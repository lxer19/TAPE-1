URL: http://www.eecs.umich.edu/~zuberi/research/toc.ps
Refering-URL: http://www.eecs.umich.edu/~zuberi/research/
Root-URL: http://www.cs.umich.edu
Email: fzuberi,kgshing@eecs.umich.edu  
Title: Design and Implementation of Efficient Message Scheduling for Controller Area Network  
Author: Khawar M. Zuberi and Kang G. Shin 
Keyword: Key Words: Distributed real-time systems, Controller Area Network (CAN), message scheduling, network scheduling implementation, priority inversion.  
Address: Ann Arbor, MI 48109-2122  
Affiliation: Real-Time Computing Laboratory Department of Electrical Engineering and Computer Science The University of Michigan  
Abstract: The Controller Area Network (CAN) is being widely used in real-time control applications such as automobiles, aircraft, and automated factories. In this paper we present the mixed traffic scheduler (MTS) for CAN, which provides higher schedulability than fixed-priority schemes like deadline-monotonic (DM) while incurring less overhead than dynamic earliest-deadline (ED) scheduling. We also describe how MTS can be implemented on existing CAN network adapters such as Motorola's TouCAN. We present schedulability results comparing MTS to DM and ED* (an imaginary scheduler which works like ED but does not incur any extra overhead) which show that MTS performs significantly better than DM (specially under heavy sporadic load), and in some cases, its performance approaches that of ED*. Our implementation overhead measurements show that processing needed to support MTS consumes only about 5-6% of CPU time, while schedulability measurements show that under MTS, 20-40 percentage points more workloads are feasible than under DM, making MTS ideal for use in control applications. fl The work reported in this paper was supported in part by the NSF under Grants MIP-9203895 and DDM-9313222, and by the ONR under Grant N00014-94-1-0229. Any opinions, findings, and conclusions or recommendations are those of the authors and do not necessarily reflect the views of the funding agencies. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. S. Raji, </author> <title> "Smart networks for control," </title> <journal> IEEE Spectrum, </journal> <volume> vol. 31, no. 6, </volume> <pages> pp. 49-55, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Distributed real-time systems are being used increasingly in control applications such as in automobiles, aircraft, robotics, and process control. These systems consist of multiple computational nodes, sensors, and actuators interconnected by a LAN <ref> [1] </ref>. Of the multiple LAN protocols available for such use (including SP-50 FieldBus [2], MAP [3], TTP [4], etc.), the Controller Area Network (CAN) [5, 6] has gained wide-spread acceptance in the industry [7].
Reference: [2] <institution> Industrial Automation Systems | Systems Integration and Communication | Fieldbus (draft) (ISA/SP50-93), Instrument Society of America, </institution> <address> 1st edition, </address> <year> 1993. </year>
Reference-contexts: 1 Introduction Distributed real-time systems are being used increasingly in control applications such as in automobiles, aircraft, robotics, and process control. These systems consist of multiple computational nodes, sensors, and actuators interconnected by a LAN [1]. Of the multiple LAN protocols available for such use (including SP-50 FieldBus <ref> [2] </ref>, MAP [3], TTP [4], etc.), the Controller Area Network (CAN) [5, 6] has gained wide-spread acceptance in the industry [7]. CAN is a contention-based multi-master network which has the potential to efficiently handle both periodic as well as sporadic messages.
Reference: [3] <institution> Manufacturing Automation Protocol (MAP) 3.0 Implementation Release, MAP/TOP Users Group, </institution> <year> 1987. </year>
Reference-contexts: 1 Introduction Distributed real-time systems are being used increasingly in control applications such as in automobiles, aircraft, robotics, and process control. These systems consist of multiple computational nodes, sensors, and actuators interconnected by a LAN [1]. Of the multiple LAN protocols available for such use (including SP-50 FieldBus [2], MAP <ref> [3] </ref>, TTP [4], etc.), the Controller Area Network (CAN) [5, 6] has gained wide-spread acceptance in the industry [7]. CAN is a contention-based multi-master network which has the potential to efficiently handle both periodic as well as sporadic messages.
Reference: [4] <author> H. Kopetz and G. Grunsteidl, </author> <title> "TTP a protocol for fault-tolerant real-time systems," </title> <journal> IEEE Computer, </journal> <volume> vol. 27, no. 1, </volume> <pages> pp. 14-23, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: These systems consist of multiple computational nodes, sensors, and actuators interconnected by a LAN [1]. Of the multiple LAN protocols available for such use (including SP-50 FieldBus [2], MAP [3], TTP <ref> [4] </ref>, etc.), the Controller Area Network (CAN) [5, 6] has gained wide-spread acceptance in the industry [7]. CAN is a contention-based multi-master network which has the potential to efficiently handle both periodic as well as sporadic messages.
Reference: [5] <institution> Road vehicles | Interchange of digital information | Controller area network (CAN) for high-speed communication, ISO 11898, </institution> <year> 1993. </year>
Reference-contexts: These systems consist of multiple computational nodes, sensors, and actuators interconnected by a LAN [1]. Of the multiple LAN protocols available for such use (including SP-50 FieldBus [2], MAP [3], TTP [4], etc.), the Controller Area Network (CAN) <ref> [5, 6] </ref> has gained wide-spread acceptance in the industry [7]. CAN is a contention-based multi-master network which has the potential to efficiently handle both periodic as well as sporadic messages. <p> Section 5 discusses issues related to implementation of MTS, focusing on the priority inversion problem. Section 6 evaluates the network schedulability performance of MTS (compared to ED and DM) and presents implementation overhead measurements. The paper concludes with Section 7. 2 Controller Area Network (CAN) CAN <ref> [5, 6] </ref> is an advanced serial communication protocol for distributed real-time control systems. It is a contention-based multi-master network whose timeliness properties come from its collision resolution algorithm.
Reference: [6] <editor> SAE Handbook, </editor> <booktitle> Society of Automotive Engineers, </booktitle> <year> 1995. </year> <pages> pp. </pages> <month> 23.560-23.573. </month>
Reference-contexts: These systems consist of multiple computational nodes, sensors, and actuators interconnected by a LAN [1]. Of the multiple LAN protocols available for such use (including SP-50 FieldBus [2], MAP [3], TTP [4], etc.), the Controller Area Network (CAN) <ref> [5, 6] </ref> has gained wide-spread acceptance in the industry [7]. CAN is a contention-based multi-master network which has the potential to efficiently handle both periodic as well as sporadic messages. <p> Section 5 discusses issues related to implementation of MTS, focusing on the priority inversion problem. Section 6 evaluates the network schedulability performance of MTS (compared to ED and DM) and presents implementation overhead measurements. The paper concludes with Section 7. 2 Controller Area Network (CAN) CAN <ref> [5, 6] </ref> is an advanced serial communication protocol for distributed real-time control systems. It is a contention-based multi-master network whose timeliness properties come from its collision resolution algorithm.
Reference: [7] <author> H. Zeltwanger, </author> <title> "An inside look at the fundamentals of CAN," </title> <journal> Control Engineering, </journal> <volume> vol. 42, no. 1, </volume> <pages> pp. 81-87, </pages> <month> January </month> <year> 1995. </year>
Reference-contexts: These systems consist of multiple computational nodes, sensors, and actuators interconnected by a LAN [1]. Of the multiple LAN protocols available for such use (including SP-50 FieldBus [2], MAP [3], TTP [4], etc.), the Controller Area Network (CAN) [5, 6] has gained wide-spread acceptance in the industry <ref> [7] </ref>. CAN is a contention-based multi-master network which has the potential to efficiently handle both periodic as well as sporadic messages. It is currently being used in a wide range of real-time control applications [7] including industrial automation, embedded automotive control, and medical monitoring. <p> [4], etc.), the Controller Area Network (CAN) [5, 6] has gained wide-spread acceptance in the industry <ref> [7] </ref>. CAN is a contention-based multi-master network which has the potential to efficiently handle both periodic as well as sporadic messages. It is currently being used in a wide range of real-time control applications [7] including industrial automation, embedded automotive control, and medical monitoring. Its main attraction is its low cost (a CAN interface chip costs about $5) and reliability features like atomic multicasts and fault confinement.
Reference: [8] <author> K. W. Tindell, H. Hansson, and A. J. Wellings, </author> <title> "Analyzing real-time communications: Controller Area Network (CAN)," </title> <booktitle> in Proc. Real-Time Systems Symposium, </booktitle> <pages> pp. 259-263, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: Previous work regarding scheduling such messages on CAN includes <ref> [8, 9] </ref>, but they focused on fixed-priority scheduling. Shin [10] considered earliest-deadline (ED) scheduling, but did not consider its high overhead which makes ED impractical for CAN. <p> RM assumes that deadline equals period, which is not always true in reality. Instead of RM, we can use its close relative, deadline monotonic (DM) scheduling [22]. With DM, messages with tighter relative deadlines are assigned higher priorities and these priorities form the ID for 7 each message <ref> [8, 9] </ref>. DM is a simple scheme and is easily implementable on CAN.
Reference: [9] <author> K. Tindell, A. Burns, and A. J. Wellings, </author> <title> "Calculating Controller Area Network (CAN) message response times," </title> <journal> Control Engineering Practice, </journal> <volume> vol. 3, no. 8, </volume> <pages> pp. 1163-1169, </pages> <year> 1995. </year>
Reference-contexts: Previous work regarding scheduling such messages on CAN includes <ref> [8, 9] </ref>, but they focused on fixed-priority scheduling. Shin [10] considered earliest-deadline (ED) scheduling, but did not consider its high overhead which makes ED impractical for CAN. <p> RM assumes that deadline equals period, which is not always true in reality. Instead of RM, we can use its close relative, deadline monotonic (DM) scheduling [22]. With DM, messages with tighter relative deadlines are assigned higher priorities and these priorities form the ID for 7 each message <ref> [8, 9] </ref>. DM is a simple scheme and is easily implementable on CAN.
Reference: [10] <author> K. G. Shin, </author> <title> "Real-time communications in a computer-controlled workcell," </title> <journal> IEEE Trans. Robotics and Automation, </journal> <volume> vol. 7, no. 1, </volume> <pages> pp. 105-113, </pages> <month> February </month> <year> 1991. </year>
Reference-contexts: Previous work regarding scheduling such messages on CAN includes [8, 9], but they focused on fixed-priority scheduling. Shin <ref> [10] </ref> considered earliest-deadline (ED) scheduling, but did not consider its high overhead which makes ED impractical for CAN. In this paper, we present a scheduling scheme for CAN called the mixed traffic scheduler (MTS) which increases schedulable utilization and performs better than fixed-priority schemes while incurring less overhead than ED. <p> Our goal is therefore to make the IDs reflect the deadlines of messages. Moreover, each message must have a unique ID (which is a requirement of CAN). This can be done by dividing the ID into three fields <ref> [10] </ref>, as shown in Figure 2. The deadline field is derived from the deadline of the message. Actually, it is the logical inverse of the deadline because we want the shortest deadline to have the highest priority. <p> If two messages have the same deadline, the one with the higher uniqueness code will win. This uniqueness code also serves to identify the message for reception purposes. For ED scheduling, messages may be assigned codes arbitrarily as long as they are unique for each message <ref> [10] </ref>. However, as we will see later, the question of assigning uniqueness codes will be critical in MTS. In Figure 2, the priority field is a single bit used to distinguish real-time and non-real-time messages. It is 1 for real-time messages and 0 otherwise. <p> As time progresses, absolute message deadlines (i.e., logical inverse of the actual deadlines) get larger and larger. Eventually, they will require more bits than are available in the CAN ID field. The obvious solution is to use slack time <ref> [10] </ref> (time to deadline) instead of the deadline itself, but this introduces two other problems: P1. Remaining slack time of a message changes with every clock tick. This will require IDs of all messages to be updated continually (at the start of each arbitration round).
Reference: [11] <author> K. M. Zuberi and K. G. Shin, </author> <title> "Non-preemptive scheduling of messages on Controller Area Network for real-time control applications," </title> <booktitle> in Proc. Real-Time Technology and Applications Symposium, </booktitle> <pages> pp. 240-249, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: In this paper, we present a scheduling scheme for CAN called the mixed traffic scheduler (MTS) which increases schedulable utilization and performs better than fixed-priority schemes while incurring less overhead than ED. This paper goes beyond the work presented in <ref> [11, 12] </ref> by removing some ideal assumptions made in that previous work. We also describe how MTS can be implemented on existing CAN network adapters.
Reference: [12] <author> K. M. Zuberi and K. G. Shin, </author> <title> "Scheduling messages on Controller Area Network for real-time CIM applications," </title> <journal> IEEE Trans. Robotics and Automation, </journal> <volume> vol. 13, no. 2, </volume> <pages> pp. 310-314, </pages> <month> April </month> <year> 1997. </year>
Reference-contexts: In this paper, we present a scheduling scheme for CAN called the mixed traffic scheduler (MTS) which increases schedulable utilization and performs better than fixed-priority schemes while incurring less overhead than ED. This paper goes beyond the work presented in <ref> [11, 12] </ref> by removing some ideal assumptions made in that previous work. We also describe how MTS can be implemented on existing CAN network adapters. <p> First, we give high-speed messages priority over low-speed and non-real-time ones by setting the most significant bit to 1 in the ID for high-speed messages (Figure 3a). This protects high-speed messages from all other types of traffic. If the uniqueness field is to be 5 bits <ref> [12] </ref> (allowing 32 high-speed messages), and the priority field is 1 bit, then the remaining 5 bits are still not enough to encode the deadlines (relative to the latest SOE). Our solution is to quantize time into regions and encode deadlines according to which region they fall in.
Reference: [13] <author> K. M. Zuberi and K. G. Shin, "EMERALDS: </author> <title> A microkernel for embedded real-time systems," </title> <booktitle> in Proc. Real-Time Technology and Applications Symposium, </booktitle> <pages> pp. 241-249, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: We measure various execution overheads associated with MTS by implementing it on a Motorola 68040 processor with the EMERALDS real-time operating system <ref> [13] </ref>. EMERALDS is an OS designed for use in distributed, embedded control applications. For MTS's implementation, we use EMERALDS to provide basic OS functionality such as interrupt handling and context switching.
Reference: [14] <author> J. Brignell and N. White, </author> <title> Intelligent Sensor Systems, </title> <address> Bristol, Philadelphia, </address> <year> 1994. </year>
Reference-contexts: In fact, maximum interval between two such events is unbounded (event may never occur again). In such cases, using periodic messages is a waste of network bandwidth and CPU cycles because there is nothing to say most of the time. Smart sensors <ref> [14] </ref> are most suitable for detecting such events. These sensors have DSP capabilities to recognize events on their own, so they signal the controller only when required.
Reference: [15] <author> A. K. Mok, </author> <title> "Fundamental design problems of distributed systems for the hard real-time environment," </title> <type> Ph.D thesis, </type> <year> 1983. </year>
Reference-contexts: This corresponds to a minimum interarrival time (MIT) for such messages. Such aperiodic messages which have a MIT are called sporadic messages <ref> [15] </ref>. Knowing the MIT of a sporadic message makes it possible to guarantee its delivery even under the worst possible situation. 3.3 Non-Real-Time Messages In manufacturing, process control, and other applications, an operator must be able to monitor the status of every device in the system.
Reference: [16] <author> K. Jeffay, D. F. Stanat, and C. U. Martel, </author> <title> "On non-preemptive scheduling of periodic and sporadic tasks," </title> <booktitle> in Proc. Real-Time Systems Symposium, </booktitle> <pages> pp. 129-139, </pages> <year> 1991. </year>
Reference-contexts: Each message will have a unique priority which will form its ID. However, in general, fixed-priority schemes give lower utilization than other schemes such as non-preemptive earliest-deadline (ED). Non-preemptive scheduling under release time constraints is NP-hard in the strong sense <ref> [16] </ref>, meaning that there is no polynomial time scheduler which will always give the maximum schedulable utilization. However, the authors of [17] showed that ED performs better than other simple heuristics. This is why several reaserchers have used ED for network scheduling [18-20].
Reference: [17] <author> W. Zhao and K. Ramamritham, </author> <title> "Simple and integrated heuristic algorithms for scheduling tasks with time and resource constraints," </title> <journal> Jounal of Systems and Software, </journal> <volume> vol. 7, </volume> <pages> pp. 195-205, </pages> <year> 1987. </year>
Reference-contexts: However, in general, fixed-priority schemes give lower utilization than other schemes such as non-preemptive earliest-deadline (ED). Non-preemptive scheduling under release time constraints is NP-hard in the strong sense [16], meaning that there is no polynomial time scheduler which will always give the maximum schedulable utilization. However, the authors of <ref> [17] </ref> showed that ED performs better than other simple heuristics. This is why several reaserchers have used ED for network scheduling [18-20]. This motivates us to use ED to schedule messages on CAN, but ED incurs high overhead (as discussed later) which makes it impractical for CAN.
Reference: [18] <author> D. Ferrari and D. Verma, </author> <title> "A scheme for real-time channel establishment in wide-area networks," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 8, no. 3, </volume> <pages> pp. 368-379, </pages> <month> April </month> <year> 1990. </year>
Reference: [19] <author> D. D. Kandlur, K. G. Shin, and D. Ferrari, </author> <title> "Real-time communication in multi-hop networks," </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> vol. 5, no. 10, </volume> <pages> pp. 1044-1056, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: If messages are numbered according to their priority with j = 1 being the highest-priority message, then i is schedulable <ref> [19] </ref> if: 9t 2 S; j=1 dt=T j eC j + C p t; where S =fset of all release times of messages 1; 2; ; i 1 through time D i C i g [fD i C i g; T j , C j , and D j are the
Reference: [20] <author> Q. Zheng and K. G. Shin, </author> <title> "On the ability of establishing real-time channels in point-to-point packet-switched networks," </title> <journal> IEEE Trans. Communications, </journal> <pages> pp. 1096-1105, </pages> <month> Febru-ary/March/April </month> <year> 1994. </year>
Reference-contexts: ED* is an imaginary scheduling policy which works the same as ED but requires only an 11-bit ID. We would expect MTS's performance to lie between those of ED* and DM. To check schedulability under ED*, we use the schedulability check for non-preemptive ED in <ref> [20] </ref>. Our measurements show that performance of MTS depends upon various workload characteristics.
Reference: [21] <author> C. L. Liu and J. W. Layland, </author> <title> "Scheduling algorithms for multiprogramming in a hard real-time environment," </title> <journal> Journal of the ACM, </journal> <volume> vol. 20, no. 1, </volume> <pages> pp. 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: The most popular form of fixed-priority real-time scheduling is rate monotonic (RM) <ref> [21] </ref>. In this scheme, messages with a shorter period get higher priority than those with longer periods. RM assumes that deadline equals period, which is not always true in reality. Instead of RM, we can use its close relative, deadline monotonic (DM) scheduling [22]. <p> MTS's performance also drops but not as much as that of DM. This affirms that deadline-based schemes are more capable of handling sporadic messages. Increasing the number of sporadic messages increases the load at the critical instant (using Liu and Layland's terminology <ref> [21] </ref>), even though overall workload utilization is almost unchanged.
Reference: [22] <author> J. Y.-T. Leung and J. Whitehead, </author> <title> "On the complexity of fixed-priority scheduling of periodic, real-time tasks," </title> <journal> Performance Evaluation, </journal> <volume> vol. 2, no. 4, </volume> <pages> pp. 237-250, </pages> <month> December </month> <year> 1982. </year>
Reference-contexts: In this scheme, messages with a shorter period get higher priority than those with longer periods. RM assumes that deadline equals period, which is not always true in reality. Instead of RM, we can use its close relative, deadline monotonic (DM) scheduling <ref> [22] </ref>. With DM, messages with tighter relative deadlines are assigned higher priorities and these priorities form the ID for 7 each message [8, 9]. DM is a simple scheme and is easily implementable on CAN.
Reference: [23] <author> M. Gergeleit and H. Streich, </author> <title> "Implementing a distributed high-resolution real-time clock using the CAN-bus," </title> <booktitle> in 1st International CAN Conference, </booktitle> <month> September </month> <year> 1994. </year>
Reference-contexts: Then, the deadline field for message i will be the logical inverse of d i SOE = d i ffi t `, where d i is the absolute deadline of message i and t is the current time (it is assumed that all nodes have synchronized clocks <ref> [23] </ref>). Value of ` depends on what fraction of CPU-time the designer is willing to allow for ID updates. Let this fraction be x. Let M be the MIPS of the CPU and n be the number of instructions required to do the update. <p> Then, for a small window of time, the low-priority message will have a higher priority ID than the high-priority message. To avoid this problem, we must use an agreement protocol to trigger the ID update on all nodes. The CAN clock synchronization algorithm <ref> [23] </ref> synchronizes clocks to within 20s, so that the ID update processes on various nodes will wake up within 20s of each other. A simple agreement protocol can be that one process is designated to broadcast a message on the CAN bus.
Reference: [24] <author> MC68336/376 User's Manual, Motorola Inc., </author> <year> 1996. </year> <title> [25] 82527 Serial Communications Controller Architectural Overview, </title> <publisher> Intel Corporation, </publisher> <year> 1993. </year>
Reference-contexts: Since high-speed messages have shorter deadlines than low-speed ones, they will automatically have higher DM priority (which is exactly what we want). 5 Implementation In this section, we present schemes to implement MTS on Motorola's TouCAN module <ref> [24] </ref> which features 16 message buffers and internal arbitration between transmission buffers based on message ID. As such, TouCAN is representative of modern CAN NAs. <p> TouCAN lies on the same chip as the CPU and is interconnected to the CPU (and other on-chip modules) through Motorola's intermodule bus. Motorola is currently marketing the MC68376 <ref> [24] </ref> microcontroller which incorporates TouCAN with a CPU32 core. TouCAN has 16 message buffers. Each buffer can be configured to either transmit or receive messages.
Reference: [26] <author> A. Indiresan, A. Mehra, , and K. G. Shin, </author> <title> "The END: An emulated network device for evaluating adapter design," </title> <booktitle> in Proc. 3rd Intl. Workshop on Performability Modeling of Computer and Communication Systems, </booktitle> <year> 1996. </year>
Reference-contexts: To implement MTS within EMERALDS on TouCAN, we would first have to port EMERALDS to the MC68376 mi-crocontroller. To avoid this, we instead used device emulation <ref> [26] </ref> under which a general-purpose microcontroller is made to emulate a network adapter. This emulator interfaces to the host CPU through an I/O bus. The emulator presents the host CPU the same interface that the actual network adapter would.
Reference: [27] <author> A. Indiresan, </author> <title> Exploring Quality-of-Service Issues in Network Interface Design, </title> <type> PhD thesis, </type> <institution> University of Michigan, </institution> <year> 1997. </year>
Reference-contexts: If a high-priority message arrives at this point, it has to be buffered in software to wait for one or more messages already in the adapter to be sent. But this priority inversion is bounded by the token rotation time and number of buffers in the adapter <ref> [27] </ref>. In CAN, priority inversion can be unbounded. If the adapter buffers contain low-priority messages, these messages will not be sent as long as there are higher-priority messages anywhere else in the network. <p> If this is the case, preemption can be used to address the priority inversion problem in these networks as well. Previous solutions to reduce priority inversion for such networks include schemes which limit the number of FIFO buffers used for transmission <ref> [27] </ref>. This reduces priority inversion but also increases the frequency of interrupts.
Reference: [28] <author> L. Sha, R. Rajkumar, and J. Lehoczky, </author> <title> "Priority inheritance protocols: An approach to real-time synchronization," </title> <journal> IEEE Trans. on Computers, </journal> <volume> vol. 39, no. 3, </volume> <pages> pp. 1175-1198, </pages> <year> 1990. </year>
Reference-contexts: Other than that, implementing DM on TouCAN is no different than implementing MTS. 5.5 Preemption as a Mechanism for Controlling Priority Inversion In CPU scheduling, priority inheritance <ref> [28] </ref> is a well-known mechanism for handling priority inversion between threads of execution. If a low-priority thread holds a resource needed by a high-priority thread, the former's priority is temporarily increased to that of the latter until the resource is released.
Reference: [29] <author> H. Tokuda and T. Nakajima, </author> <title> "Evaluation of real-time synchronization in Real-Time Mach," </title> <booktitle> in Second Mach Symposium, </booktitle> <pages> pp. 213-221. </pages> <publisher> Usenix, </publisher> <year> 1991. </year>
Reference-contexts: Using priority inheritance in this situation can lead to a significant schedulability degradation (see Section 6.5). Another technique for tackling priority inversion in CPU scheduling is preempt-and-restart <ref> [29] </ref> in which the resource holder is preempted and forced to restart later from the beginning of the critical section. The disadvantage of this scheme is that once a thread is preempted, all CPU work it had done since entering the critical section is lost.
Reference: [30] <institution> Am79C90 CMOS Local Area Network Controller for Ethernet (C-LANCE), Advanced Micro Devices, Inc., </institution> <year> 1994. </year>
Reference-contexts: But for networks such as FDDI and Ethernet which have large packet data units in the kilobytes, it would appear that preemption is infeasible, but in reality that is not the case. Most network adapters (such as LANCE <ref> [30] </ref> for Ethernet) do not keep message data in network adapter memory. Instead, data is kept in host memory and the network adapter is provided with pointers to this data and it uses DMA to transfer data as needed.
Reference: [31] <author> C. D. Locke, D. Vogel, and T. Mesler, </author> <title> "Building a predictable avionics plarform in Ada: A case study," </title> <booktitle> in Proc. Real-Time Systems Symposium, </booktitle> <pages> pp. 181-189, </pages> <year> 1991. </year>
Reference-contexts: When we look at workloads of typical real-time control applications, we find that there is indeed a great variation between periods of various tasks (and a corresponding variation in periods/deadlines of messages sent by these tasks). The well-known avionics task workload <ref> [31, 32] </ref> is accepted as typifying real-time control applications and also has been used by others for research on real-time scheduling [33]. The workload is reproduced in Table 2.
Reference: [32] <author> C. D. Locke, D. Vogel, L. Lucas, and J. Goodenough, </author> <title> "Generic avionics software specification," </title> <type> Technical Report CMU/SEI-90-TR-8, </type> <institution> Carnegie Mellon University, </institution> <year> 1990. </year>
Reference-contexts: When we look at workloads of typical real-time control applications, we find that there is indeed a great variation between periods of various tasks (and a corresponding variation in periods/deadlines of messages sent by these tasks). The well-known avionics task workload <ref> [31, 32] </ref> is accepted as typifying real-time control applications and also has been used by others for research on real-time scheduling [33]. The workload is reproduced in Table 2.
Reference: [33] <author> D. Katcher, H. Arakawa, and J. Strosnider, </author> <title> "Engineering and analysis of fixed priority sched-ulers," </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> vol. 19, no. 9, </volume> <pages> pp. 920-934, </pages> <month> September </month> <year> 1993. </year> <month> 31 </month>
Reference-contexts: The well-known avionics task workload [31, 32] is accepted as typifying real-time control applications and also has been used by others for research on real-time scheduling <ref> [33] </ref>. The workload is reproduced in Table 2. It has 6 tasks with deadlines in the 5-50ms range (i.e., high-speed tasks) and 11 tasks with deadlines in the 59-1000ms range (low-speed tasks).
References-found: 32

