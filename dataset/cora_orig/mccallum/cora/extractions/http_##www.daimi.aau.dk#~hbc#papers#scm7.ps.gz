URL: http://www.daimi.aau.dk/~hbc/papers/scm7.ps.gz
Refering-URL: http://www.daimi.aau.dk/~hbc/Ragnarok.html
Root-URL: http://www.daimi.aau.dk
Email: hbc@daimi.aau.dk  
Phone: +45 89 42 31 88  
Title: Context-Preserving Software Configuration Management context-preserving approach provides distributed, dynamic, configuration descriptions under full version control,
Author: Henrik Brbak Christensen 
Note: The  
Address: Ny Munkegade, Bldg. 540, DK-8000 Arhus C, Denmark  
Affiliation: Department of Computer Science University of Aarhus  
Abstract: This paper presents a model for version control and configuration management with high emphasis on the ability to recreate the relevant context for a given part of a software design structure. The approach is termed context-preserving software configuration management. Presently the context-preserving approach is used in a software development environment research project, Rag-narok [8], as the fundamental software configuration management layer. A prototype that implements a command-line user interface to the context-preserving layer is outlined as well as results from on-going experiments in which the prototype is used in a number of real development projects. Keywords Software design structure, versioning models and version selection, software configuration management, cooperative and parallel development, experience report. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Andersen, L. Bak, S. Brandt, J. L. Knudsen, O. L. Madsen, K. J. Mller, C. Nrgaard, and E. Sand-vad. </author> <title> The Mjlner BETA System. </title> <booktitle> In Object-Oriented Environments The Mjlner Approach, </booktitle> <pages> pages 2435. </pages> <publisher> Prentice-Hall, </publisher> <pages> 93. </pages>
Reference-contexts: However a new experiment has recently started in which the source code and technical documentation for the compiler in the Mjlner BETA System <ref> [1] </ref> is handled by Rag-narok. Based on the experiences from this experiment the full Mjlner BETA System source will be handled which will involve 8 developers and about 100 MByte of data. ACKNOWLEDGEMENTS Thanks to Ole Lehrmann Madsen, Jrgen Lindskov Knud-sen, and the anonymous referees for many valuable discussions and comments.
Reference: [2] <author> L. Bendix. </author> <title> Configuration Management and Version Control Revisited. </title> <type> PhD thesis, </type> <institution> Institute of Electronic Systems, Aalborg University, Denmark, </institution> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: The prototype may also provide a copy-modify-merge mechanism to avoid the rather coarse per-component locks. The pollution problem is interesting and discussed in the last section. RELATED WORK The context-preserving model resembles the three dimensional graph model proposed by Bendix <ref> [2] </ref> for integrating configuration management and version control. This model also sets distributed dependency information under version control but relies on generic configurations which means a selection mechanism is still essential to recreate context.
Reference: [3] <author> L. Bendix. </author> <title> Fully Supported Recursive Workspaces. </title> <editor> In I. Sommerville, editor, </editor> <booktitle> Software Configuration Management, Lecture Notes in Computer Science 1167, pages 256261. ICSE'96 SCM-6 Workshop, </booktitle> <publisher> Springer Verlag, </publisher> <year> 1996. </year>
Reference-contexts: From the developers point of view flexibility is important. A developer needs to experiment and in this process create intermediate versions as safe ground. A current effort is to provide better support for version control in workspace (see e.g. <ref> [3] </ref>) where the individual developer is allowed the flexibility of many, intermediate, versions in a local component storage and only affects the project-wide component storage when milestone-type versions emerge. Collaboration and collaborative awareness are other important themes in the current work.
Reference: [4] <author> B. Berliner. CVS II: </author> <title> Parallelizing Software Development. </title> <booktitle> In USENIX, </booktitle> <address> Washington D.C., </address> <year> 1990. </year>
Reference-contexts: Still the system is de-scribed in a central system model giving rise to synchronisa-tion and overview problems. CVS <ref> [4, 20] </ref> supports handling collections of files as a unit by versioning directories, and also part/whole relations by recursively operating on subdirectories. The module concept provides a limited way of handling reference relations also. The CVS concept sticky-tags enables branches to be made of a module.
Reference: [5] <author> G. Booch. </author> <title> Object Oriented Design. </title> <publisher> The Ben-jamin/Cummings Publishing Company, Inc., </publisher> <year> 1991. </year>
Reference-contexts: The full graph for a software project is denoted the component-graph. For example you can see in figure 1 that the software component ComponentModel (representing a class-category i.e. a set of logically related classes <ref> [5, 6] </ref>) consists of four part components: SoftwareComponent, VersionGroup, RCSFile, and SCRegister (they represents classes). SCRegister depends on SoftwareComponent which again depends on Library and VersionGroup and so on. <p> The component substances, i.e. the files and data associated with the components, are not shown in order to make the figure clearer. Even though software components, as defined here, are storage containers they serve well as logical entities like for instance classes or class categories <ref> [5, 6] </ref> in a modelling context. For instance a component may contain interface-and implementation files of a C++ class as well as e.g. associated documentation and thereby represent the class on a modelling level. Library Model Component RCS File Version Group Register SC Ragnarok Component Software ... prototype.
Reference: [6] <author> G. Booch and J. Rumbaugh. </author> <title> Unified Method for Object-Oriented Development. Documentation Set Version 0.8, Rational Software Corporation, </title> <address> Santa Clara/CA, </address> <year> 1995. </year>
Reference-contexts: The full graph for a software project is denoted the component-graph. For example you can see in figure 1 that the software component ComponentModel (representing a class-category i.e. a set of logically related classes <ref> [5, 6] </ref>) consists of four part components: SoftwareComponent, VersionGroup, RCSFile, and SCRegister (they represents classes). SCRegister depends on SoftwareComponent which again depends on Library and VersionGroup and so on. <p> The component substances, i.e. the files and data associated with the components, are not shown in order to make the figure clearer. Even though software components, as defined here, are storage containers they serve well as logical entities like for instance classes or class categories <ref> [5, 6] </ref> in a modelling context. For instance a component may contain interface-and implementation files of a C++ class as well as e.g. associated documentation and thereby represent the class on a modelling level. Library Model Component RCS File Version Group Register SC Ragnarok Component Software ... prototype.
Reference: [7] <author> H. B. Christensen. </author> <title> Ragnarok Component Model: Tu--torial and User Manual. </title> <institution> Computer Science Department, University of Aarhus, </institution> <year> 1996. </year> <note> Available at URL: http://www.daimi.aau.dk/hbc/Ragnarok.html. </note>
Reference-contexts: Ragnarok has a graphical user interface and addresses additional issues besides software configuration management but a command line user interface to the management layer has been created and it is this tool that is described here. The prototype including a tutorial and user manual is available on the WorldWideWeb <ref> [7] </ref>. Implementation A software component is in the prototype defined by a list of files (being the substance of the component), and a list of references to part components and a list of references to components referenced.
Reference: [8] <author> H. B. Christensen. Ragnarok: </author> <title> Contours of a Software Project Development Environment. </title> <type> Master's thesis, </type> <institution> Department of Computer Science, University of Arhus, </institution> <year> 1996. </year> <note> DAIMI PB-509. Also available at URL: http://www.daimi.aau.dk/hbc/Ragnarok.html. </note>
Reference-contexts: In this section the problem is to reconcile different versions of the same component whereas the previous section considered reconciling the contexts of different components. PROTOTYPE A prototype of the context-preserving software configuration management approach has been implemented as part of the Ragnarok <ref> [8] </ref> software development environment project. Ragnarok has a graphical user interface and addresses additional issues besides software configuration management but a command line user interface to the management layer has been created and it is this tool that is described here.
Reference: [9] <author> J. Estublier, </author> <title> editor. Software Configuration Management. </title> <booktitle> Lecture Notes in Computer Science 1005. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1995. </year>
Reference: [10] <author> A. Goldberg and K. S. Rubin. </author> <title> Succeeding with Objects, Decision Frameworks for Project Management. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: Ad. 5: It should be clear that the evolution of components is highly traceable. This aspect is essential in release situations but also of great importance for providing historical data in project evaluations in order to improve project management (see e.g. <ref> [10] </ref>). 1 Such a structural difference between Library version 1.12 and 1.13 would for instance tell that component VersionGroup has been added as a part component.
Reference: [11] <author> ISA. Consys. </author> <note> Available at URL: http://isals.dfi.aau.dk/, 1996. </note> <institution> ISA: Institute for Storage Ring Facilities, University of Aarhus. </institution>
Reference-contexts: Preliminary Results The prototype is currently used in three on-going development projects while a forth has been completed. In one of the on-going experiments the prototype is used by a team of three developers that are developing a control system, ConSys <ref> [11] </ref>, for controlling storage rings, accelerators, and other large distributed equipment in experimental physics. The second on-going experiment is the continued development of the Ragnarok prototype itself. In the third experiment the focus is on release control of patches and diskette-updates on a commercial database product.
Reference: [12] <author> D. A. Lamb. </author> <title> Introduction: Studies of Software Design. </title> <editor> In D. A. Lamb, editor, </editor> <booktitle> Studies of Software Design, Lecture Notes in Computer Science 1078. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1996. </year>
Reference-contexts: INTRODUCTION Developing and maintaining large software systems is intrinsically difficult. An approved approach to design and implementation is to adopt a divide-and-conquer principle and dissect the full system into manageable pieces in a hierarchical structure, often denoted for instance the software architecture <ref> [12] </ref> or software design structure [21]. This structure is usually also the framework for a work-breakdown delegating responsibilities and tasks to sub-teams and individuals.
Reference: [13] <author> D. B. Leblang and R. P. C. Jr. </author> <title> Parallel Software Configuration Management in a Network Environment. </title> <journal> IEEE Software, </journal> <pages> pages 2835, </pages> <month> Nov. </month> <year> 1987. </year>
Reference-contexts: Units relate to other units by uses links; selecting a specific version of a unit propagates proper selections to all units that it uses. However POEM seems to have no support for part/whole relations that are important to express a hierarchical structure. DSEE <ref> [13] </ref> relies on a centralised system model meaning that version selection engines are required to be able to recreate context for milestones and releases.
Reference: [14] <author> Y.-J. Lin and S. P. Reiss. </author> <title> Configuration Management in Terms of Modules. </title> <note> In Estublier [9]. </note>
Reference-contexts: This model also sets distributed dependency information under version control but relies on generic configurations which means a selection mechanism is still essential to recreate context. Another similar approach is taken by Lin and Reiss in POEM <ref> [14, 15] </ref> where configuration management is made in terms of software units, a concept that resembles software components. Units relate to other units by uses links; selecting a specific version of a unit propagates proper selections to all units that it uses.
Reference: [15] <author> Y.-J. Lin and S. P. Reiss. </author> <title> Configuration Management with Logical Structures. </title> <booktitle> In Proceedings of the 18th International Conference on Software Engineering, </booktitle> <pages> pages 298307, </pages> <year> 1996. </year>
Reference-contexts: This model also sets distributed dependency information under version control but relies on generic configurations which means a selection mechanism is still essential to recreate context. Another similar approach is taken by Lin and Reiss in POEM <ref> [14, 15] </ref> where configuration management is made in terms of software units, a concept that resembles software components. Units relate to other units by uses links; selecting a specific version of a unit propagates proper selections to all units that it uses.
Reference: [16] <author> B. Meyer. </author> <title> Object-oriented Sofware Construction. </title> <publisher> Prentice Hall International Series in Computer Science, </publisher> <year> 1988. </year>
Reference-contexts: This is arguably a pessimistic notion of modification: Making a change in one component is also an indirect change in everything that depends on it. Well established methods of using API's, invariants and the notion of programming by contract <ref> [16] </ref> on the contrary seek to allow modifying implementation with only local effects.
Reference: [17] <institution> Microsoft (R) Corporation: Visual SourceSafe. </institution> <note> Available at URL: http://www.microsoft.com/ssafe/. </note>
Reference-contexts: In essence this feature of CVS prevents developers from having version control in workspace i.e. to use the versioning ability to create intermediate versions during experiments. CVS, RCS [22, 23], and MicroSoft Visual SourceSafe <ref> [17] </ref> relies on tags to define context. For example in a release situation all relevant files are tagged with a symbolic name.
Reference: [18] <author> J. K. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley Professional Computing Series, </publisher> <year> 1994. </year>
Reference-contexts: PROTEUS [25] provides a strong configuration language, PCL, that allows describing a logical, hierarchical, structure superimposed on the physical file-structure and with strong 2 Lately the prototype has been extended with a Tcl interpreter <ref> [18] </ref> that allows users to write such parsers themselves. constructs for expressing variability. Still the system is de-scribed in a central system model giving rise to synchronisa-tion and overview problems.
Reference: [19] <author> M. Q. Patton. </author> <title> Qualitative Evaluation Methods. </title> <publisher> Sage Publications, </publisher> <address> Beverly Hills, Calif., </address> <year> 1980. </year>
Reference-contexts: The completed experiment was a three month student programming project. In all but the student project developers have previous experience with other software configuration management systems. Results are collected from the experiments primarily by open-ended interviews <ref> [19] </ref> of the developers.
Reference: [20] <institution> Signum Support AB: </institution> <note> CVS Concurrent Versions System. Available at URL: http://www.loria.fr/molli/cvs/doc/cvs toc.html. </note>
Reference-contexts: Still the system is de-scribed in a central system model giving rise to synchronisa-tion and overview problems. CVS <ref> [4, 20] </ref> supports handling collections of files as a unit by versioning directories, and also part/whole relations by recursively operating on subdirectories. The module concept provides a limited way of handling reference relations also. The CVS concept sticky-tags enables branches to be made of a module.
Reference: [21] <author> I. Sommerville. </author> <title> Software Engineering. </title> <publisher> Addison-Wesley Publishers Ltd., </publisher> <address> 4 edition, </address> <year> 1992. </year>
Reference-contexts: INTRODUCTION Developing and maintaining large software systems is intrinsically difficult. An approved approach to design and implementation is to adopt a divide-and-conquer principle and dissect the full system into manageable pieces in a hierarchical structure, often denoted for instance the software architecture [12] or software design structure <ref> [21] </ref>. This structure is usually also the framework for a work-breakdown delegating responsibilities and tasks to sub-teams and individuals. Software systems evolve over time: In the development phase milestones are defined and reached, in the maintenance phase errors are corrected and functionality added in new releases. <p> This relation allows the traditional divide-and-conquer strategy for decomposition of large systems <ref> [21] </ref>. * Reference relations: Describe uses- or depends-on relations between components (that are not already accounted for by part/whole relations).
Reference: [22] <author> W. F. Tichy. </author> <title> Design, Implementation, and Evaluation of a Revision Control System. </title> <booktitle> In 6th Conference on Software Engineering, </booktitle> <address> Tokyo, Japan, </address> <year> 1982. </year>
Reference-contexts: Implementation A software component is in the prototype defined by a list of files (being the substance of the component), and a list of references to part components and a list of references to components referenced. Versions of individual files are handled by RCS <ref> [22, 23] </ref>: When a component checks in the RCS ci command is issued to all files in the file list, and the prototype stores the resulting revision numbers for the files. <p> In essence this feature of CVS prevents developers from having version control in workspace i.e. to use the versioning ability to create intermediate versions during experiments. CVS, RCS <ref> [22, 23] </ref>, and MicroSoft Visual SourceSafe [17] relies on tags to define context. For example in a release situation all relevant files are tagged with a symbolic name.
Reference: [23] <author> W. F. Tichy. </author> <title> RCS A System for Version Control. </title> <journal> Software Practice & Experience, </journal> <volume> 15(7):637654, </volume> <month> July </month> <year> 1985. </year>
Reference-contexts: Implementation A software component is in the prototype defined by a list of files (being the substance of the component), and a list of references to part components and a list of references to components referenced. Versions of individual files are handled by RCS <ref> [22, 23] </ref>: When a component checks in the RCS ci command is issued to all files in the file list, and the prototype stores the resulting revision numbers for the files. <p> In essence this feature of CVS prevents developers from having version control in workspace i.e. to use the versioning ability to create intermediate versions during experiments. CVS, RCS <ref> [22, 23] </ref>, and MicroSoft Visual SourceSafe [17] relies on tags to define context. For example in a release situation all relevant files are tagged with a symbolic name.
Reference: [24] <author> W. F. Tichy. </author> <title> Tools for Software Configuration Management. </title> <editor> In J. F. H. Winkler, editor, </editor> <booktitle> Proceedings of the International Workshop on Software Version and Configuration Control. </booktitle> <editor> B. G. </editor> <publisher> Teubner, Stuttgart, </publisher> <month> Jan. </month> <year> 1988. </year>
Reference-contexts: Software systems evolve over time: In the development phase milestones are defined and reached, in the maintenance phase errors are corrected and functionality added in new releases. Software configuration management is the discipline of controlling the evolution of complex software systems <ref> [24] </ref>, and there exists numerous models and tools devoted to this task. However in many of these approaches there is a gap between the actual software design structure and the management of its evolution. <p> A software component version group is a set of software-components-in-the-storage connected by the relations revision-of and variant-of as proposed by Tichy <ref> [24] </ref>. The essential property of the context-preserving approach is the proposal that: A version of a software component specifies the relevant context in which it was created. This way a version of a component embodies the context that was present in the workspace when the version was created.
Reference: [25] <author> E. Tryggeseth, B. Gulla, and R. Conradi. </author> <title> Modelling Systems with Variability using the PROTEUS Configuration Language. </title> <note> In Estublier [9]. </note>
Reference-contexts: As already noted modifying the software design structure means changing the system model which creates the problem of ensuring the syn-chronisation: Recreating an earlier version of a software part means first restoring the right system model used at the time of creation. PROTEUS <ref> [25] </ref> provides a strong configuration language, PCL, that allows describing a logical, hierarchical, structure superimposed on the physical file-structure and with strong 2 Lately the prototype has been extended with a Tcl interpreter [18] that allows users to write such parsers themselves. constructs for expressing variability.
References-found: 25

