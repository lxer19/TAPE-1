URL: http://www-cs-faculty.stanford.edu/~koza/gp96.adf.ps
Refering-URL: http://www.cs.bham.ac.uk/~wbl/biblio/gp-bibliography.html
Root-URL: 
Email: koza@cs.stanford.edu  andre@flamingo.stanford.edu  fhb3@slip.net  makeane@ix.netcom.com  
Title: Use of Automatically Defined Functions and Architecture- Altering Operations in Automated Circuit Synthesis with Genetic
Author: John R. Koza David Andre Forrest H Bennett III Martin A. Keane Bennett, Andre, and Keane ). 
Note: programming.  principles and rethink the design of each subcircuit each occasion time it is needed. The previous paper in this volume "Automated  4 describes the  (Koza 1992, Koza and Rice 1992).  This book is based on the premise that no  
Address: 258 Gates Building  Stanford, California 94305  Stanford, California 94305  Stanford, California 94305  5733 West Grover Chicago, Illinois 60630  
Affiliation: Computer Science Dept.  Stanford University  Visiting Scholar Computer Science Dept. Stanford University  Visiting Scholar Computer Science Dept. Stanford University  Econometrics Inc.  
Abstract: An automatically defined function (ADF) is a function (subroutine, subprogram, DEFUN, procedure, or module) that is dynamically evolved during a run of genetic programming and that may be called by a calling program (or subprogram) that is concurrently being evolved. When automatically defined functions are being used, a program in the population consists of a hierarchy of one (or more) reusable function-defining branches (i.e., automatically defined functions) along with a main result-producing branch. Typically, the automatically defined functions possess one or more dummy arguments (formal parameters) 
Abstract-found: 1
Intro-found: 0
Reference: <author> Andre, David and Koza, John R. </author> <year> 1996. </year> <title> Parallel genetic programming: A scalable implementation using the transputer architecture. </title> <editor> In Angeline, Peter J. and Kinnear, Kenneth E. Jr. (editors). </editor> <booktitle> Advances in Genetic Programming 2. </booktitle> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: The previous paper in this volume "Automated WYWIWYG Design of Both the Topology and Component Values of Electrical Circuits Using Genetic Programming" demonstrated that complex structures such as electrical circuits can be evolved by means of natural selection <ref> (Koza, Bennett, Andre, and Keane 1996) </ref>. The regularity, symmetry, and reuse of substructures found in human-designed electrical circuits suggests that automatically defined functions might be useful in the problem domain of circuit synthesis. <p> The potential usefulness of automatically defined functions and architecture-altering operations have been previously demonstrated by both proof-of-principle ("toy") problems and by nontrivial problems. For example, on the transmembrane segment identification problem <ref> (Koza and Andre 1996) </ref>, the results produced by using genetic programming with automatically defined functions and the architecture-altering operations were competitive with the human-written algorithm for that problem. 3 . <p> Preparatory Steps This paper assumes that the reader is familiar with the use of genetic programming in electrical circuit design described in the previous paper in this volume <ref> (Koza, Bennett, Andre, and Keane 1996) </ref>. 3 . 1 . 1 Embryonic Circuit and Program Architecture A one-input, one-output embryonic circuit with two writing heads is suitable for this problem. Thus, there are two result-producing branches in each program tree in the population.
Reference: <author> Holland, John H. </author> <year> 1975. </year> <title> Adaptation in Natural and Artificial System. </title> <address> Ann Arbor, MI: </address> <publisher> University of Michigan Press. </publisher>
Reference: <author> Koza, John R. </author> <year> 1992. </year> <title> Genetic Programming: On the Programming of Computers by Means of Natural Selection. </title> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: Background Genetic programming is an extension of John Holland's genetic algorithm (1975) in which the population consists of computer programs of varying sizes and shapes <ref> (Koza 1992, Koza and Rice 1992) </ref>. The book Genetic Programming II: Automatic Discovery of Reusable Programs (Koza 1994a, 1994b) describes how to evolve multipart programs consisting of a main program and one or more reusable, parameterized, hierarchically-called subprograms.
Reference: <author> Koza, John R. </author> <year> 1994a. </year> <title> Genetic Programming II: Automatic Discovery of Reusable Programs. </title> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: Background Genetic programming is an extension of John Holland's genetic algorithm (1975) in which the population consists of computer programs of varying sizes and shapes (Koza 1992, Koza and Rice 1992). The book Genetic Programming II: Automatic Discovery of Reusable Programs <ref> (Koza 1994a, 1994b) </ref> describes how to evolve multipart programs consisting of a main program and one or more reusable, parameterized, hierarchically-called subprograms.
Reference: <author> Koza, John R. </author> <year> 1994b. </year> <title> Genetic Programming II Videotape: The Next Generation. </title> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference: <author> Koza, John R. </author> <year> 1994c. </year> <title> Architecture-Altering Operations for Evolving the Architecture of a MultiPart Program in Genetic Programming. </title> <institution> Stanford University Computer Science Department technical report STAN-CS-TR-94-1528. </institution> <month> October 21, </month> <year> 1994. </year>
Reference-contexts: The architecture-altering operations <ref> (Koza 1994c, 1995a) </ref> provide one way to automate this architectural choice so that it can be made dynamically during a run of genetic programming.
Reference: <author> Koza, John R. </author> <year> 1995. </year> <title> Evolving the architecture of a multipart program in genetic programming using architecture-altering operations. </title> <editor> In McDonnell, John R., Reynolds, Robert G., and Fogel, David B. (editors). </editor> <booktitle> 1995. Evolutionary Programming IV: Proceedings of the Fourth Annual Conference on Evolutionary Programming. </booktitle> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher> <pages> Pages 695717. </pages>
Reference: <author> Koza, John R. and Andre, David. </author> <year> 1996. </year> <title> Classifying protein segments as transmembrane domains using architecture-altering operations in genetic programming. </title>
Reference-contexts: The previous paper in this volume "Automated WYWIWYG Design of Both the Topology and Component Values of Electrical Circuits Using Genetic Programming" demonstrated that complex structures such as electrical circuits can be evolved by means of natural selection <ref> (Koza, Bennett, Andre, and Keane 1996) </ref>. The regularity, symmetry, and reuse of substructures found in human-designed electrical circuits suggests that automatically defined functions might be useful in the problem domain of circuit synthesis. <p> The potential usefulness of automatically defined functions and architecture-altering operations have been previously demonstrated by both proof-of-principle ("toy") problems and by nontrivial problems. For example, on the transmembrane segment identification problem <ref> (Koza and Andre 1996) </ref>, the results produced by using genetic programming with automatically defined functions and the architecture-altering operations were competitive with the human-written algorithm for that problem. 3 . <p> Preparatory Steps This paper assumes that the reader is familiar with the use of genetic programming in electrical circuit design described in the previous paper in this volume <ref> (Koza, Bennett, Andre, and Keane 1996) </ref>. 3 . 1 . 1 Embryonic Circuit and Program Architecture A one-input, one-output embryonic circuit with two writing heads is suitable for this problem. Thus, there are two result-producing branches in each program tree in the population.
Reference: <editor> In Angeline, Peter J. and Kinnear, Kenneth E. Jr. (editors). </editor> <booktitle> 1996. Advances in Genetic Programming 2. </booktitle> <address> Cambridge, MA: </address> <publisher> MIT Press. In Press. </publisher>
Reference: <author> Koza, John R., Bennett III, Forrest H, Andre, David, and Keane, Martin A. </author> <year> 1996. </year> <title> Automated WYWIWYG design of both the topology and component values of analog electrical circuits using genetic programming. </title> <editor> In Koza, John R., Goldberg, David E., Fogel, David B., and Riolo, Rick L. (editors). </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> MIT Press. In this volume. </publisher>
Reference-contexts: The previous paper in this volume "Automated WYWIWYG Design of Both the Topology and Component Values of Electrical Circuits Using Genetic Programming" demonstrated that complex structures such as electrical circuits can be evolved by means of natural selection <ref> (Koza, Bennett, Andre, and Keane 1996) </ref>. The regularity, symmetry, and reuse of substructures found in human-designed electrical circuits suggests that automatically defined functions might be useful in the problem domain of circuit synthesis. <p> The potential usefulness of automatically defined functions and architecture-altering operations have been previously demonstrated by both proof-of-principle ("toy") problems and by nontrivial problems. For example, on the transmembrane segment identification problem <ref> (Koza and Andre 1996) </ref>, the results produced by using genetic programming with automatically defined functions and the architecture-altering operations were competitive with the human-written algorithm for that problem. 3 . <p> Preparatory Steps This paper assumes that the reader is familiar with the use of genetic programming in electrical circuit design described in the previous paper in this volume <ref> (Koza, Bennett, Andre, and Keane 1996) </ref>. 3 . 1 . 1 Embryonic Circuit and Program Architecture A one-input, one-output embryonic circuit with two writing heads is suitable for this problem. Thus, there are two result-producing branches in each program tree in the population.
Reference: <author> Koza, John R., and Rice, James P. </author> <year> 1992. </year> <title> G e n e t i c Programming: The Movie. </title> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: Background Genetic programming is an extension of John Holland's genetic algorithm (1975) in which the population consists of computer programs of varying sizes and shapes <ref> (Koza 1992, Koza and Rice 1992) </ref>. The book Genetic Programming II: Automatic Discovery of Reusable Programs (Koza 1994a, 1994b) describes how to evolve multipart programs consisting of a main program and one or more reusable, parameterized, hierarchically-called subprograms.
Reference: <author> Ohno, Susumu. </author> <year> 1970. </year> <title> Evolution by Gene Duplication. </title> <address> New York: </address> <publisher> Springer-Verlag. </publisher>
Reference: <author> Quarles, Thomas, Newton, A. R., Pederson, D. O., and Sangiovanni-Vincentelli, A. </author> <year> 1994. </year> <note> SPICE 3 Version 3F5 User's Manual. </note> <institution> Department of Electrical Engineering and Computer Science, University of California, Berkeley, California. </institution> <month> March </month> <year> 1994. </year>
Reference-contexts: This execution applies the functions in the program tree to the embryonic circuit thereby developing the embryonic circuit into a fully developed circuit. A netlist describing the circuit is then created. Each circuit is then simulated to determine its behavior using a version of the SPICE3 <ref> (Quarles et al. 1994) </ref> simulator that we modified to run as a submodule within the genetic programming system.
Reference: <author> Van Valkenburg, M. E. </author> <year> 1982. </year> <title> Analog Filter Design. Fort Worth, </title> <address> TX: </address> <publisher> Harcourt Brace Jovanovich. </publisher>
Reference-contexts: The ladder topology for a lowpass filter consists of repeated instances of various series inductors (so named because they run "in series" horizontally across the top of the figure) and repeated instances of various vertical shunt capacitors. The classical Butterworth or Chebychev filters are based on the ladder topology <ref> (Van Valkenburg 1982) </ref>. Automatically defined function ADF0 supplies a group of three inductors (equivalent to one 154,400 mH inductor). Figure 2 shows this twice-called two-ported substructure developed by ADF0. defined function A D F 0 from generation 9. the best-of-generation circuit from generation 9.
References-found: 14

