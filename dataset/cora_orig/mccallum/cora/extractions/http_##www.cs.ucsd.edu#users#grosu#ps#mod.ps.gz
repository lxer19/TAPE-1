URL: http://www.cs.ucsd.edu/users/grosu/ps/mod.ps.gz
Refering-URL: http://www.cs.ucsd.edu/users/grosu/pubs/
Root-URL: http://www.cs.ucsd.edu
Email: grosu@cs.ucsd.edu  
Title: Abstract Semantics for Module Composition  
Author: Grigore Ro~su 
Address: Bucharest, Romania.  
Affiliation: Department of Computer Science Engineering, University of California at San Diego and Fundamentals of Computer Science, Faculty of Mathematics, University of  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Jan Bergstra, Jan Heering, and Paul Klint. </author> <title> Module algebra. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 37(2) </volume> <pages> 335-372, </pages> <year> 1990. </year>
Reference-contexts: module, is the same thing as to allow only a reduced signature to be visible: Definition 56 If M = ('; ; A) is a module specification and is a subsignature of ', then define 2M as being the module specification ( ; ; A). 2 Bergstra, Heering and Klop <ref> [1] </ref> called 2 the "export operator", and Diaconescu, Goguen and Stefaneas [6] called it the "information hiding operator". We prefer the second variant for our approach.
Reference: [2] <author> Jan Bergstra and John Tucker. </author> <title> Characterization of computable data types by means of a finite equational specification method. </title> <editor> In J.W. de Bakker and Jan van Leeuwen, editors, </editor> <booktitle> Automata, Languages and Programming, Seventh Colloquium, </booktitle> <pages> pages 76-90. </pages> <publisher> Springer, </publisher> <year> 1980. </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Volume 81. </volume>
Reference-contexts: One is the possibility to specify finitely some theories which do not admit finite standard presentations. For example, Bergstra and Tucker <ref> [2] </ref> showed that any recursive -algebra can be specified as the -restriction of an initial 0 -algebra presented by a finite number of 0 - equations, for some 0 (see [14] for a summary on this subject).
Reference: [3] <author> Virgil Emil Cazanescu and Grigore Ro~su. </author> <title> Weak inclusion systems; part 2. </title> <note> In preparation; the latest version can be found at http://www-cse.ucsd.edu/users/grosu/. </note>
Reference-contexts: [ C) = (A " B) [ (A " C) for all A; B; C 2 jIj, Proof: ... 2 Definition 6 I is distributive iff the equalities in Fact 5 hold. 2 The notion of inclusion we introduced above is similar to the one of (weak) inclusion systems (see <ref> [6, 11, 4, 3] </ref> and also [16]) except that the factorization property is no longer required. In the present paper, we do not need the whole technical engine provided by (weak) inclusion systems. <p> In the present paper, we do not need the whole technical engine provided by (weak) inclusion systems. The potential value of inclusion systems was suggested in [7], and a first definition was given in [6] in the context of modularization for standard specifications. The papers [11] and <ref> [4, 3] </ref> further simplify and generalize inclusion systems. Inclusion systems are an alternative of factorization systems (e.g., see [10, 15]). They can be prefered because the proofs tend to be smoother than using factorization systems, still having the same power of expressiveness.
Reference: [4] <author> Virgil Emil Cazanescu and Grigore Ro~su. </author> <title> Weak inclusion systems. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 7(2), </volume> <year> 1997. </year>
Reference-contexts: [ C) = (A " B) [ (A " C) for all A; B; C 2 jIj, Proof: ... 2 Definition 6 I is distributive iff the equalities in Fact 5 hold. 2 The notion of inclusion we introduced above is similar to the one of (weak) inclusion systems (see <ref> [6, 11, 4, 3] </ref> and also [16]) except that the factorization property is no longer required. In the present paper, we do not need the whole technical engine provided by (weak) inclusion systems. <p> In the present paper, we do not need the whole technical engine provided by (weak) inclusion systems. The potential value of inclusion systems was suggested in [7], and a first definition was given in [6] in the context of modularization for standard specifications. The papers [11] and <ref> [4, 3] </ref> further simplify and generalize inclusion systems. Inclusion systems are an alternative of factorization systems (e.g., see [10, 15]). They can be prefered because the proofs tend to be smoother than using factorization systems, still having the same power of expressiveness.
Reference: [5] <author> Razvan Diaconescu. </author> <title> Extra theory morphisms in institutions: logical semantics for multi-paradigm languages. </title> <note> Submitted to publication, May 1997. Also, Technical Report IS-RR-97-0032F, </note> <institution> Japan Advanced Institute for Science and Technology, </institution> <year> 1997. </year>
Reference-contexts: One interesting area of further research is to explore how our approach behaves in a multi-institutional framework (e.g., see <ref> [5, 19] </ref>), as an abstract formalism for multi-paradigm specification languages.
Reference: [6] <author> Razvan Diaconescu, Joseph Goguen, and Petros Stefaneas. </author> <title> Logical support for modularisation. </title> <editor> In Ger-ard Huet and Gordon Plotkin, editors, </editor> <booktitle> Logical Environments, </booktitle> <pages> pages 83-130. </pages> <address> Cambridge, </address> <year> 1993. </year> <title> Proceedings of a Workshop held in Edinburgh, </title> <address> Scotland, </address> <month> May </month> <year> 1991. </year> <note> 8 Thanks to Razvan Diaconescu for suggesting that. 29 </note>
Reference-contexts: We consider the present paper as a bridge between the implementation-oriented work by Goguen and Tracz [9], and the theory-oriented work by Diaconescu, Goguen and Stefaneas <ref> [6] </ref>. 2 Preliminaries This section presents notations, definitions and properties useful later in the paper. <p> [ C) = (A " B) [ (A " C) for all A; B; C 2 jIj, Proof: ... 2 Definition 6 I is distributive iff the equalities in Fact 5 hold. 2 The notion of inclusion we introduced above is similar to the one of (weak) inclusion systems (see <ref> [6, 11, 4, 3] </ref> and also [16]) except that the factorization property is no longer required. In the present paper, we do not need the whole technical engine provided by (weak) inclusion systems. <p> In the present paper, we do not need the whole technical engine provided by (weak) inclusion systems. The potential value of inclusion systems was suggested in [7], and a first definition was given in <ref> [6] </ref> in the context of modularization for standard specifications. The papers [11] and [4, 3] further simplify and generalize inclusion systems. Inclusion systems are an alternative of factorization systems (e.g., see [10, 15]). <p> Sign ! Cat op preserves the pushouts 4 , i.e. it takes pushouts in Sign to pullbacks in Cat. 2 4 Actually, we are interested only in pushouts of inclusions, but we try to avoid introducing a new concept. 8 The term semiexactness was introduced by Diaconescu, Goguen and Stefaneas <ref> [6] </ref> as a weakening of exactness. The property of exactness, which says that Mod preserves the general colimits, seems to have first appeared in [17] and then used by Tarlecki [18] on abstract algebraic institutions and by Messeguer [13] on categorical logic. <p> Proof: This is because V th (M ) = T h = fa 2 Sen (') j A j= ag = T h (M ) " Sen ('): As it is argued in <ref> [6] </ref>, the syntactic conservatism is a necessary but insufficient condition for true conservatism. <p> signature to be visible: Definition 56 If M = ('; ; A) is a module specification and is a subsignature of ', then define 2M as being the module specification ( ; ; A). 2 Bergstra, Heering and Klop [1] called 2 the "export operator", and Diaconescu, Goguen and Stefaneas <ref> [6] </ref> called it the "information hiding operator". We prefer the second variant for our approach. Proposition 57 If we let denote the inclusion ,! ' in the definition above, then - : 2M ! M is a morphism of module specifications.
Reference: [7] <author> Joseph Goguen and Rod Burstall. Institutions: </author> <title> Abstract model theory for specification and program-ming. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 39(1) </volume> <pages> 95-146, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: To formalize the notion of "logical system", we use institutions, an intensively used abstract concept introduced by Goguen and Burstall <ref> [7] </ref>. The institution in which we work (we call it the working institution) is enriched with inclusions (of signatures) formulated in a categorical setting, which abstract the standard inclusions of signatures from particular logics. <p> In the present paper, we do not need the whole technical engine provided by (weak) inclusion systems. The potential value of inclusion systems was suggested in <ref> [7] </ref>, and a first definition was given in [6] in the context of modularization for standard specifications. The papers [11] and [4, 3] further simplify and generalize inclusion systems. Inclusion systems are an alternative of factorization systems (e.g., see [10, 15]). <p> Definition 18 A functor between two categories with inclusions preserves inclusions iff it takes inclusions in the source category to inclusions in the target category. 2 2.3 Institutions The concept of institution was introduced by Goguen and Burstall <ref> [7] </ref> to formalize the abstract notion of "logical system". <p> It is known (see <ref> [7] </ref>) that Th is cocomplete whenever Sign is cocomplete; in particular, Th has pushouts whenever Sign has pushouts. <p> Notice that T is also a right adjoint of M. Therefore, Th can be (modulo an isomorphism) viewed as a reflective and coreflective subcategory of MSpec. Proposition 43 MSpec is cocomplete if Sign is cocomplete. Proof: It is known that Th is cocomplete if Sign is cocomplete (see <ref> [7] </ref>); because MSpec and Th are equivalent, we deduce that MSpec is cocomplete, too. 2 Moreover, since the two categories are equivalent, every "categorical property" (see [10]) of Th is a property of MSpec, too. In particular, the pushouts are preserved and reflected by the functors M and T . <p> h (A)) fl g (Defintion 49) = (' 00 ; ( h ) g ; g ( h ) (h (A))) (Defintion 49) = (' 00 ; h;g ; (h; g) (A)) (by hypothesis) = ('; ; A) fl (h; g) (Defintion 49): 2 In the standard theory of institutions <ref> [7] </ref>, the equality h (A * ) * = h (A) * holds for each specifi cation (; A) and each signature morphism h of source .
Reference: [8] <author> Joseph Goguen and Grant Malcolm. </author> <title> A hidden agenda. </title> <type> Technical Report CS97-538, UCSD, </type> <institution> Dept. Computer Science & Eng., </institution> <month> May </month> <year> 1997. </year>
Reference-contexts: Thus, the first module REV should be viewed as a refinement of the second. 2 5 Sometimes, we call the set -1 (A * ) the '-visible theorems over , if is not clear from the context. 10 Example 30 This example is inspired from <ref> [8] </ref>. It shows how stacks can be specified with the help of arrays. <p> A behavioral specification of stacks would be similar to the second STACK module in this example, except that the last equation is behavioral. We are not going to talk about behavioral specifications and hidden algebra, but we refer the interested reader to <ref> [8] </ref>). 2 Truth is preserved under extensions of signatures in any logical system. The following proposition says that this also holds in any institution with inclusions. Proposition 31 If ' ,! and a 2 Sen (') and A Sen (') then 1.
Reference: [9] <author> Joseph Goguen and Will Tracz. </author> <title> An implementation-oriented semantics for module composition, </title> <note> 1997. In preparation. </note>
Reference-contexts: The other theoretical reason is that it allows the user to specify behavioral properties of systems, in the sense that every behavioral specification [] is equivalent to hiding some operators (making them private) in a usual specification []. Inspired by Goguen and Tracz's work <ref> [9] </ref>, we introduce the notion of module specifications as a generalization of standard specifications, having both public (or visible) and private features, and then we explore their properties at a very abstract level, categorical, to make sure that our results are general enough to include all the particular examples we know. <p> We consider the present paper as a bridge between the implementation-oriented work by Goguen and Tracz <ref> [9] </ref>, and the theory-oriented work by Diaconescu, Goguen and Stefaneas [6]. 2 Preliminaries This section presents notations, definitions and properties useful later in the paper.
Reference: [10] <author> Horst Herrlich and George Strecker. </author> <title> Category Theory. </title> <publisher> Allyn and Bacon, </publisher> <year> 1973. </year>
Reference-contexts: an abstract concept introduced by Goguen and Burstall to formalize the notion of "logical system". 2.1 Category Theory The reader is supposed to be acquainted with some basic notions of category theory, such as categories and subcategories, products and coproducts, pullbacks and pushouts, functors and adjoints; we find [12] and <ref> [10] </ref> very good references on category theory. <p> The potential value of inclusion systems was suggested in [7], and a first definition was given in [6] in the context of modularization for standard specifications. The papers [11] and [4, 3] further simplify and generalize inclusion systems. Inclusion systems are an alternative of factorization systems (e.g., see <ref> [10, 15] </ref>). They can be prefered because the proofs tend to be smoother than using factorization systems, still having the same power of expressiveness. <p> Proposition 43 MSpec is cocomplete if Sign is cocomplete. Proof: It is known that Th is cocomplete if Sign is cocomplete (see [7]); because MSpec and Th are equivalent, we deduce that MSpec is cocomplete, too. 2 Moreover, since the two categories are equivalent, every "categorical property" (see <ref> [10] </ref>) of Th is a property of MSpec, too. In particular, the pushouts are preserved and reflected by the functors M and T .
Reference: [11] <author> Hendrik Hilberdink. </author> <title> Inclusion systems, </title> <note> 1996. Unpublished paper. </note>
Reference-contexts: [ C) = (A " B) [ (A " C) for all A; B; C 2 jIj, Proof: ... 2 Definition 6 I is distributive iff the equalities in Fact 5 hold. 2 The notion of inclusion we introduced above is similar to the one of (weak) inclusion systems (see <ref> [6, 11, 4, 3] </ref> and also [16]) except that the factorization property is no longer required. In the present paper, we do not need the whole technical engine provided by (weak) inclusion systems. <p> In the present paper, we do not need the whole technical engine provided by (weak) inclusion systems. The potential value of inclusion systems was suggested in [7], and a first definition was given in [6] in the context of modularization for standard specifications. The papers <ref> [11] </ref> and [4, 3] further simplify and generalize inclusion systems. Inclusion systems are an alternative of factorization systems (e.g., see [10, 15]). They can be prefered because the proofs tend to be smoother than using factorization systems, still having the same power of expressiveness.
Reference: [12] <author> Saunders Mac Lane. </author> <title> Categories for the Working Mathematician. </title> <publisher> Springer, </publisher> <year> 1971. </year>
Reference-contexts: of institutions, an abstract concept introduced by Goguen and Burstall to formalize the notion of "logical system". 2.1 Category Theory The reader is supposed to be acquainted with some basic notions of category theory, such as categories and subcategories, products and coproducts, pullbacks and pushouts, functors and adjoints; we find <ref> [12] </ref> and [10] very good references on category theory. <p> Proof: It follows from Theorem 1, pg. 91 in <ref> [12] </ref>. 2 Notation 42 Let U : MSpec ! MSpec denote the functor T ; M, taking modules ('; ; A) to modules ('; '; T h ' (A)). 2 Thus the categories Th and MSpec are equivalent. Notice that T is also a right adjoint of M.
Reference: [13] <author> Jose Meseguer. </author> <title> General logics. </title> <editor> In H.-D. Ebbinghaus et al., editors, </editor> <booktitle> Proceedings, Logic Colloquium, </booktitle> <year> 1987, </year> <pages> pages 275-329. </pages> <publisher> North-Holland, </publisher> <year> 1989. </year>
Reference-contexts: The property of exactness, which says that Mod preserves the general colimits, seems to have first appeared in [17] and then used by Tarlecki [18] on abstract algebraic institutions and by Messeguer <ref> [13] </ref> on categorical logic. Many sorted logics tend to be exact, but their unsorted variants tend to be only semiexact.
Reference: [14] <author> Jose Meseguer and Joseph Goguen. Initiality, </author> <title> induction and computability. </title> <editor> In Maurice Nivat and John Reynolds, editors, </editor> <booktitle> Algebraic Methods in Semantics, </booktitle> <pages> pages 459-541. </pages> <address> Cambridge, </address> <year> 1985. </year>
Reference-contexts: For example, Bergstra and Tucker [2] showed that any recursive -algebra can be specified as the -restriction of an initial 0 -algebra presented by a finite number of 0 - equations, for some 0 (see <ref> [14] </ref> for a summary on this subject). The other theoretical reason is that it allows the user to specify behavioral properties of systems, in the sense that every behavioral specification [] is equivalent to hiding some operators (making them private) in a usual specification [].
Reference: [15] <author> Istvan Nemeti. </author> <title> On notions of factorisation systems and their applications to cone-injective subcategories. </title> <journal> Periodica Mathematica Hungarica, </journal> <volume> 13(3) </volume> <pages> 229-335, </pages> <year> 1982. </year>
Reference-contexts: The potential value of inclusion systems was suggested in [7], and a first definition was given in [6] in the context of modularization for standard specifications. The papers [11] and [4, 3] further simplify and generalize inclusion systems. Inclusion systems are an alternative of factorization systems (e.g., see <ref> [10, 15] </ref>). They can be prefered because the proofs tend to be smoother than using factorization systems, still having the same power of expressiveness.
Reference: [16] <author> Grigore Ro~su. </author> <note> Axiomatizability in inclusive equational logic, 1996. Submitted to publication; it can be found at http://www-cse.ucsd.edu/users/grosu/. </note>
Reference-contexts: [ (A " C) for all A; B; C 2 jIj, Proof: ... 2 Definition 6 I is distributive iff the equalities in Fact 5 hold. 2 The notion of inclusion we introduced above is similar to the one of (weak) inclusion systems (see [6, 11, 4, 3] and also <ref> [16] </ref>) except that the factorization property is no longer required. In the present paper, we do not need the whole technical engine provided by (weak) inclusion systems.
Reference: [17] <author> Donald Sannella and Andrzej Tarlecki. </author> <title> Specifications in an arbitrary institution. </title> <journal> Information and Control, </journal> <volume> 76 </volume> <pages> 165-210, </pages> <year> 1988. </year> <title> Earlier version in Proceedings, </title> <booktitle> International Symposium on the Semantics of Data Types, Lecture Notes in Computer Science, </booktitle> <volume> Volume 173, </volume> <publisher> Springer, </publisher> <year> 1985. </year>
Reference-contexts: The property of exactness, which says that Mod preserves the general colimits, seems to have first appeared in <ref> [17] </ref> and then used by Tarlecki [18] on abstract algebraic institutions and by Messeguer [13] on categorical logic. Many sorted logics tend to be exact, but their unsorted variants tend to be only semiexact.
Reference: [18] <author> Andrzej Tarlecki. </author> <title> On the existence of free models in abstract algebraic institutions. </title> <journal> Theoretical Computer Science, </journal> <volume> 37 </volume> <pages> 269-304, </pages> <year> 1986. </year> <note> Preliminary version, </note> <institution> University of Edinburgh, Computer Science Department, Report CSR-165-84, </institution> <year> 1984. </year>
Reference-contexts: The property of exactness, which says that Mod preserves the general colimits, seems to have first appeared in [17] and then used by Tarlecki <ref> [18] </ref> on abstract algebraic institutions and by Messeguer [13] on categorical logic. Many sorted logics tend to be exact, but their unsorted variants tend to be only semiexact.
Reference: [19] <author> Andrzej Tarlecki. </author> <title> Moving between logical systems. </title> <editor> In Magne Haveraaen, Olaf Owe, and Ole-Johan Dahl, editors, </editor> <title> Recent Trends in Data Type Specification, </title> <booktitle> volume 1130 of Lecture Notes in Computer Science, </booktitle> <pages> pages 478-502. </pages> <publisher> Springer, </publisher> <year> 1996. </year> <booktitle> Proceedings of 11th Workshop on Specification of Abstract Data Types. </booktitle> <address> Oslo, Norway, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: One interesting area of further research is to explore how our approach behaves in a multi-institutional framework (e.g., see <ref> [5, 19] </ref>), as an abstract formalism for multi-paradigm specification languages.
Reference: [20] <author> Will Tracz. lileanna: </author> <title> a parameterized programming language. </title> <booktitle> In Proceedings, Second International Workshop on Software Reuse, </booktitle> <pages> pages 66-78, </pages> <month> March </month> <year> 1993. </year> <pages> Lucca, </pages> <address> Italy. </address> <month> 30 </month>
Reference-contexts: Therefore m 00 = m, that is ('; ; A) is conservative. 2 4.3 Enriching Sometimes, we need to enrich a module specification by adding new operations and new sentences to the initial ones. The language lileana <ref> [20] </ref> implements this operation by adding a partial signature to the initial signature, obtaining a new signature, and then adding some sentences over the enriched signature to the initial ones. We do not offer support for partial signatures in our approach, but we can consider directly the extended signatures.
References-found: 20

