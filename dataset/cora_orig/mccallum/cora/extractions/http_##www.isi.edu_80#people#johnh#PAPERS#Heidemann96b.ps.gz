URL: http://www.isi.edu:80/people/johnh/PAPERS/Heidemann96b.ps.gz
Refering-URL: http://www.isi.edu:80/people/johnh/PAPERS/Heidemann96b.html
Root-URL: http://www.isi.edu
Title: Performance Interactions Between P-HTTP and TCP Implementations  
Author: John Heidemann 
Web: http://www.isi.edu/lsam/.  
Address: Admiralty Way, Marina del Rey, CA, 90292-6695,  
Date: November 4, 1996  
Affiliation: USC Information Sciences Institute  
Note: Submitted for publication to ACM Computer Communication Review.  The author can be contacted at 4676  or by electronic mail to johnh@isi.edu. Other information about the LSAM project can be found at  
Abstract: This document describes several performance problems resulting from interactions between implementations of persistent-HTTP (P-HTTP) and TCP. Two of these problems tie P-HTTP performance to TCP delayed-acknowledgments, thus adding up to 200ms to each P-HTTP transaction. A third results in multiple slow-starts per TCP connection. Unresolved, these problems result in P-HTTP transactions which are 14 times slower than standard HTTP and 20 times slower than potential P-HTTP over a 10 Mb/s Ethernet. We describe each problem and potential solutions. After implementing our solutions to two of the problems, we observe that P-HTTP performs better than HTTP on a local Ethernet. Although we observed these problems in specific implementations of HTTP and TCP (Apache-1.1b4 and SunOS 4.1.3, respectively), we believe that these problems occur more widely. fl This research is supported by the Defense Advanced Research Projects Agency (DARPA) through FBI contract J-FBI-95-185 entitled Cities Online. The views and conclusions contained in this document are those of the authors and should not be interpreted as necessarily representing the official policies, either expressed or implied, of the Department of the Army, DARPA, or the U.S. Government. Copyright c fl 1996 by the USC/ISI. Permission to make digital or hard copies of part or all of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that new copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than USC/ISI must be honored. Abstracting with credit is permitted. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request Permissions from the authors. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Braden. </author> <title> Requirements for Internet hosts communication layers. RFC 1122, Internet Request For Comments, </title> <month> October </month> <year> 1989. </year>
Reference-contexts: The client reads both of these segments. TCP's delayed-acknowledgment algorithm specifies that ACKs should be delayed in hopes of piggybacking the ACK on return traffic. The host requirements RFC adds that at least every other full segment must be acknowledged <ref> [1] </ref>. Unfortunately, the client has received only one full segment and one partial segment. The client therefore delays ACKing the data until the delayed ACK timer expires, which can take up to 200ms on BSD-derived TCPs or 500ms according to the specification [1]. <p> least every other full segment must be acknowledged <ref> [1] </ref>. Unfortunately, the client has received only one full segment and one partial segment. The client therefore delays ACKing the data until the delayed ACK timer expires, which can take up to 200ms on BSD-derived TCPs or 500ms according to the specification [1]. A packet trace illustrating this problem can be seen in Figure 1. Details of the packet exchanges are listed in Figure 2. Although this trace represents a single response, time between the second and third data segments is consistently 170-190ms in our experiments. <p> TCP breaks this data into three segments of lengths 1460, 1460, and 1175. The client will acknowledge the first two segments immediately upon receipt (recall that according to the host requirements RFC, every two full segments must be acknowledged <ref> [1] </ref>). The client will delay acknowledgment of the third segment according to the TCP delayed acknowledgment algorithm. Next assume that the server has only a small amount of data to send to complete the current response (small here means less than half of the client's maximum advertised window).
Reference: [2] <author> L. Brakmo and L. Peterson. </author> <title> TCP Vegas: End to end congestion avoidance on a global internet. </title> <journal> IEEE Journal of Selected Areas in Communication, </journal> <volume> 13(8) </volume> <pages> 1465-1480, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: An open issue is how difficult it would be to add this algorithm to existing TCP implementations. We plan to explore this issue in future work, possibly using TCP-Vegas mechanisms to measure transfer rate <ref> [2] </ref> and adding a new rate-based alternative to slow-start. Finally, the question of how to initialize or reset TCP status information over time and space arises not only when a connection goes idle, but also when initiating new connections in parallel or serial.
Reference: [3] <author> David D. Clark. </author> <title> Modularity and efficiency in protocol implementation. RFC 817, Internet Request For Comments, </title> <month> July </month> <year> 1982. </year>
Reference-contexts: Next assume that the server has only a small amount of data to send to complete the current response (small here means less than half of the client's maximum advertised window). Apache will immediately write this data. TCP, however will refuse to send it because of sender-side SWS avoidance <ref> [3] </ref>.
Reference: [4] <author> David D. Clark. </author> <title> Window and acknowlegement strategy in TCP. RFC 813, Internet Request For Comments, </title> <month> July </month> <year> 1982. </year>
Reference-contexts: traffic would be to delay ACKs by the time required to send a full segment and then immediately send an ACK, thus consolidating every other ACKs without unnecessarily delay. 2.3 The Odd/Short-Final-Segment Problem The second problem we encountered involved odd numbers of segments interacting with the silly-window-syndrome (SWS) avoidance algorithm <ref> [4] </ref>. The problem occurs when the Nagle algorithm is enabled and a response requires an odd number of full segments followed by a short final segment.
Reference: [5] <author> R. Fielding, H. Frystyk, T. Berners-Lee, J. Gettys, and J. Mogul. </author> <title> Hypertext transfer protocolHTTP/1.1. RFC draft-ietf-http-v11-spec-04.txt, Internet Request For Comments, </title> <month> June </month> <year> 1996. </year>
Reference-contexts: Although we found problems in particular implementations of P-HTTP and TCP, we believe that there are several reasons broader understanding of these issues is needed in the web community. First, P-HTTP is a relatively new protocol and is only now becoming standardized <ref> [5] </ref>. Although P-HTTP is derived from HTTP, P-HTTP exhibits very different network dynamics. To a first approximation, simple HTTP is identical to the data channel of FTP: a new connection is opened for each data object. FTP behavior has been studied for many years.
Reference: [6] <author> John Franks. </author> <title> Change log for WN. WN distribution, </title> <note> http://hopf.math.nwu.edu/, August 1995. </note>
Reference-contexts: Second, we have observed these problems in widely deployed implementations of HTTP and TCP. We have also made an early draft of this work available to others and been told that similar problems exist in at least one other HTTP server <ref> [6] </ref>. Together, these observations suggest that the web development community is not widely familiar with these problems. Finally, HTTP is becoming very widely deployed outside its original domain of hypertext exchange.
Reference: [7] <author> John Heidemann, Katia Obraczka, and Joe Touch. </author> <title> Modeling the performance of HTTP over several transport protocols. </title> <journal> Submitted to IEEE/ACM Transactions on Networking, </journal> <month> November </month> <year> 1996. </year>
Reference-contexts: 1 Introduction At ISI we are currently examining HTTP protocol performance across various transport protocols <ref> [7, 15] </ref>. As a part of this work we have examined the performance of HTTP and persistent-HTTP (P-HTTP) in detail. We have developed a model for HTTP performance based on a function of server and network characteristics [7]. <p> As a part of this work we have examined the performance of HTTP and persistent-HTTP (P-HTTP) in detail. We have developed a model for HTTP performance based on a function of server and network characteristics <ref> [7] </ref>. To validate our HTTP performance model we compared predicted performance to measured performance in an actual web server. Our early experiments suggested that P-HTTP performance was ten times slower than the corresponding HTTP transactions in a simple page-retrieval benchmark. <p> Resolution of these interactions provides an HTTP implementation where P-HTTP is 40% faster than simple HTTP over an Ethernet. With these implementation changes, most P-HTTP overhead is accurately accounted for by our analytic model <ref> [7] </ref>. Although we found problems in particular implementations of P-HTTP and TCP, we believe that there are several reasons broader understanding of these issues is needed in the web community. First, P-HTTP is a relatively new protocol and is only now becoming standardized [5]. <p> With this fix we observe actual P-HTTP performance over wide-area connections that is with 5% of that predicted by our model of TCP connection setup behavior <ref> [7] </ref>. 2.4 The Slow-Start Re-Start Problem A final potential problem we are aware of involves conservative assumptions made in some TCP implementations about congestion control. These assumptions originated post-4.3BSD TCP [8] and do not occur in many BSD-derived systems (such as SunOS). <p> Web pages today typically require a cluster of HTTP requests, one for the HTML document and one for each embedded image. While P-HTTP's optimizations will be successful across a cluster, they will not be between clusters, thus limiting P-HTTP performance <ref> [7] </ref>. We have not yet experimentally verified that this behavior occurs. We have, however, examined the source code of several existing Unix implementations. SunOS 4.x does not reduce the congestion window except due to packet loss. 4.4BSD, FreeBSD 2.1, and Linux 2.0 will reset the congestion window.
Reference: [8] <author> Van Jacobson and Mike Karels. </author> <title> Congestion avoidance and control. </title> <journal> ACM Computer Communication Review, </journal> <volume> 18(4) </volume> <pages> 314-329, </pages> <month> August </month> <year> 1990. </year> <note> Revised version of his SIGCOMM '88 paper. </note>
Reference-contexts: These assumptions originated post-4.3BSD TCP <ref> [8] </ref> and do not occur in many BSD-derived systems (such as SunOS). The interaction between these assumptions and P-HTTP was originally observed in other work on P-HTTP performance [15]. BSD TCP makes a very conservative assumption about the congestion window. <p> The motivation for this algorithm was the observation that some applications such as SMTP and NNTP typically have a negotiation phase followed by a data transfer phase <ref> [8] </ref>. The negotiation phase can artificially open the congestion window; data transfer will then result in a burst of packets which can move the network out of equilibrium, potentially resulting in congestion or packet loss.
Reference: [9] <author> J.C. Mogul and S.E. Deering. </author> <title> Path MTU discovery. RFC 1191, Internet Request For Comments, </title> <month> November </month> <year> 1990. </year>
Reference-contexts: Odd numbers of segments arise when Apache sends data over a TCP connection with a large MSS. TCP connections between Ethernet-connected hosts typically have an MSS of 1460B, as would wide-area connections where the hosts implement MTU-discovery <ref> [9] </ref>. (Without MTU-discovery wide-area connections typically see a 512B or 536B MSS.) Apache writes data at the application-layer in 4KB chunks. TCP breaks this data into three segments of lengths 1460, 1460, and 1175.
Reference: [10] <author> Jeffrey C. </author> <title> Mogul. </title> <booktitle> The case for persistent-connection HTTP. In Proceedings of the SIGCOMM '95, </booktitle> <pages> pages 299-313. </pages> <publisher> ACM, </publisher> <month> August </month> <year> 1995. </year>
Reference-contexts: Our early experiments suggested that P-HTTP performance was ten times slower than the corresponding HTTP transactions in a simple page-retrieval benchmark. This result is surprising since P-HTTP is intended to improve performance by amortizing costs of connection creation across multiple requests <ref> [11, 10] </ref>. We found several interactions between P-HTTP and TCP which explain the exceedingly poor P-HTTP performance.
Reference: [11] <author> Venkata N. Padmanabhan and Jeffrey C. Mogul. </author> <title> Improving HTTP latency. </title> <booktitle> In Proceedings of the Second International World Wide Web Conference, </booktitle> <month> October </month> <year> 1994. </year>
Reference-contexts: Our early experiments suggested that P-HTTP performance was ten times slower than the corresponding HTTP transactions in a simple page-retrieval benchmark. This result is surprising since P-HTTP is intended to improve performance by amortizing costs of connection creation across multiple requests <ref> [11, 10] </ref>. We found several interactions between P-HTTP and TCP which explain the exceedingly poor P-HTTP performance.
Reference: [12] <editor> W. Richard Stevens. TCP/IP Illustrated, </editor> <volume> volume 1. </volume> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Apache will immediately write this data. TCP, however will refuse to send it because of sender-side SWS avoidance [3]. According to Stevens' summary of the BSD TCP algorithms <ref> [12] </ref> (paraphrased from page 326), the server won't send data until: (a) a full-size segment can be sent, (b) we can send half of the client's advertised window, (c) we can send everything we have and either are not expecting an ACK or the Nagle algorithm is disabled.
Reference: [13] <editor> W. Richard Stevens. TCP/IP Illustrated, </editor> <volume> volume 2. </volume> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: We have, however, examined the source code of several existing Unix implementations. SunOS 4.x does not reduce the congestion window except due to packet loss. 4.4BSD, FreeBSD 2.1, and Linux 2.0 will reset the congestion window. Stevens describes this behavior (Section 26.2, <ref> [13] </ref>), although he states that the idle time is one round-trip time rather than the retransmission time-out interval. Several solutions exist to unify the goals of the TCP layer (congestion avoidance via packet conservation) and P-HTTP (maximum throughput).
Reference: [14] <author> Joe Touch. </author> <title> TCP control block interdependence. Work in progress (Internet draft draft-touch-tcp-interdep-00.txt, </title> <month> expires 11 December </month> <year> 1996), </year> <month> June </month> <year> 1996. </year>
Reference-contexts: Finally, the question of how to initialize or reset TCP status information over time and space arises not only when a connection goes idle, but also when initiating new connections in parallel or serial. For a more detailed discussion of the alternatives, see <ref> [14] </ref>. 2.5 Other problems In addition to interactions between P-HTTP and TCP we have observed two performance problems not specific to P-HTTP. These problems and their solutions have been widely explored; we describe them here briefly in the context of Apache.
Reference: [15] <author> Joe Touch, John Heidemann, and Katia Obraczka. </author> <title> Analysis of HTTP performance. </title> <note> Released as web page http://www.isi.edu/lsam/publications /http-perf/, June 1996. 8 </note>
Reference-contexts: 1 Introduction At ISI we are currently examining HTTP protocol performance across various transport protocols <ref> [7, 15] </ref>. As a part of this work we have examined the performance of HTTP and persistent-HTTP (P-HTTP) in detail. We have developed a model for HTTP performance based on a function of server and network characteristics [7]. <p> These assumptions originated post-4.3BSD TCP [8] and do not occur in many BSD-derived systems (such as SunOS). The interaction between these assumptions and P-HTTP was originally observed in other work on P-HTTP performance <ref> [15] </ref>. BSD TCP makes a very conservative assumption about the congestion window. If at any time all data sent has been acknowledged and nothing has been sent for one retransmission time-out period, then it reinitializes the congestion window to 1 segment, forcing a slow-start.
References-found: 15

