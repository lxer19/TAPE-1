URL: ftp://ftp.eecs.umich.edu/groups/gasm/hwswmodel.ps.gz
Refering-URL: http://www.eecs.umich.edu/gasm/papers.html
Root-URL: http://www.eecs.umich.edu
Title: Towards a Unified Analysis Methodology of HW/SW Systems based on Abstract State Machines: Modelling of
Author: GIUSEPPE DEL CASTILLO giusp@uni-paderborn.de WOLFRAM HARDT flfl hardt@c-lab.de 
Abstract: In this paper we propose a novel approach to high-level analysis of HW/SW systems based on abstract state machines, a state-based specification method with a rigorous mathematical semantics. As a step in the direction of a comprehensive analysis methodology, we show how to model instruction sets and how to instrument such models in order to collect experimental data which are relevant for the evaluation of design alternatives. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Bartoloni et al. </author> <title> The Software of the APE100 Processor and A Hardware Implementation of the APE100 Architecture. </title> <journal> International Journal of Modern Physics, </journal> <note> C 4 (1993), p. 955. </note>
Reference-contexts: This instruction set is used as a kind of abstract assembler code for the zCPU, a VLIW processor used as control unit in the SIMD parallel architecture APE100 developed at INFN 5 <ref> [1] </ref>. The zCPU processor itself has already been modelled at the RT-level by means of ASMs in [2]. In the APE100 architecture, the abstract assembler code is mapped to executable VLIW code for the zCPU by a code generator.
Reference: [2] <author> E. Borger, G. Del Castillo. </author> <title> A formal method for provably correct composition of a real-life processor out of basic components. </title> <editor> In: B. Werner (Ed.), </editor> <booktitle> Proc. of ICECCS'95, </booktitle> <address> Ft. Lauderdale, Florida, </address> <pages> pp. 145-148. </pages>
Reference-contexts: a step towards such a comprehensive analysis methodology based on abstract state machines, we consider in this paper the problem of modelling instruction sets, with particular emphasis on their quantitative dynamic analysis. (Note that other aspects of ASM-based mod-elling have already been covered in other papers, e.g., RTL modelling in <ref> [2] </ref>, refinement of an instruction set to a pipelined implementation in [3]). <p> This instruction set is used as a kind of abstract assembler code for the zCPU, a VLIW processor used as control unit in the SIMD parallel architecture APE100 developed at INFN 5 [1]. The zCPU processor itself has already been modelled at the RT-level by means of ASMs in <ref> [2] </ref>. In the APE100 architecture, the abstract assembler code is mapped to executable VLIW code for the zCPU by a code generator.
Reference: [3] <author> E. Borger, S. Mazzanti. </author> <title> A Practical Method for Rigorously Controllable Hardware Design. </title> <editor> In: J.P. Bowen, M.B. Hinchey, and D. Till (Eds.), ZUM'97: </editor> <title> The Z Formal Specification Notation, </title> <publisher> Springer LNCS 1212, </publisher> <pages> pp. 151-187. </pages>
Reference-contexts: state machines, we consider in this paper the problem of modelling instruction sets, with particular emphasis on their quantitative dynamic analysis. (Note that other aspects of ASM-based mod-elling have already been covered in other papers, e.g., RTL modelling in [2], refinement of an instruction set to a pipelined implementation in <ref> [3] </ref>). Instruction Set Modelling for Dynamic Analysis As each programmable building block consists of a HW-part and a SW-part, the performance of such a BB is determined by the HW constituting this block and by the SW executed on this block.
Reference: [4] <author> J. Buck, S. Ha, A. Lee, D.G. Messerschmidt. Ptolemy: </author> <title> a Framework for Simulation and Prototyping Heterogeneous Systems. </title> <journal> International Journal of Computer Simulation, Special issue on Simulation Software Development, </journal> <month> Jan. </month> <year> 1994. </year>
Reference-contexts: Other approaches use co-simulation for evaluation. Several approaches to co-simulation have been proposed, e.g., <ref> [11, 4, 5] </ref>. Although co-simulation may provide very detailed analysis data, one major problem is constituted by the very long simulation times, due to the design complexity and to the low abstraction level at which the simulation is usually performed.
Reference: [5] <author> R. Camposano, J. Wilberg. </author> <title> Embedded System Design. Design Automation for Embedded Systems, </title> <booktitle> 1995, </booktitle> <volume> vol. 1, no. 1, </volume> <pages> pp. 5-50. </pages>
Reference-contexts: Other approaches use co-simulation for evaluation. Several approaches to co-simulation have been proposed, e.g., <ref> [11, 4, 5] </ref>. Although co-simulation may provide very detailed analysis data, one major problem is constituted by the very long simulation times, due to the design complexity and to the low abstraction level at which the simulation is usually performed.
Reference: [6] <author> G. Del Castillo. ASM-SL, </author> <title> a Specification Language based on Gurevich's Abstract State Machines: Introduction and Tutorial. Universitat-GH Paderborn, </title> <type> technical report, </type> <note> to appear. </note>
Reference-contexts: ASMs, we present a case study illustrating the proposed techniques for modelling and instrumentation, and finally some conclusions hinting at possible further developments. 2 Basic Concepts of Abstract State Machines In this section we introduce the notions of ASMs needed in this paper, as implemented in the ASM-SL specification language <ref> [6] </ref> (the reader interested in a deeper study of ASMs should consult Gurevich's definition of ASMs in [8]). We first describe the computational model underlying ASMs, and then their syntax and semantics. <p> Its meaning is, obviously: S ( R ) = S ( R T ) if S (G) = true S ( R F ) otherwise. The ASM-SL Environment The basic ASM constructions described above are part of the ASM-SL specification language <ref> [6] </ref>, which also contains features for defining types, functions, and transitions, and a set of predefined types (booleans, integers, etc.) and generic data structures (tuples, lists, sets, etc.), which help to model a wide range of systems in a concise way.
Reference: [7] <author> G. Del Castillo, W. Hardt. </author> <title> Fast Dynamic Analysis of Complex HW/SW-Systems based on Abstract State Machine Models. </title> <note> Accepted at CODES/CASHE '98. </note>
Reference-contexts: A discussion of some experimental results is given in <ref> [7] </ref>. Here we focus on the instrumentation technique used, which turned out to be very flexible.
Reference: [8] <author> Y. Gurevich. </author> <title> Evolving Algebras 1993: Lipari Guide. </title> <editor> In E. Borger, editor, </editor> <title> Specification and Validation Methods. </title> <publisher> Oxford University Press, </publisher> <year> 1995. </year>
Reference-contexts: conclusions hinting at possible further developments. 2 Basic Concepts of Abstract State Machines In this section we introduce the notions of ASMs needed in this paper, as implemented in the ASM-SL specification language [6] (the reader interested in a deeper study of ASMs should consult Gurevich's definition of ASMs in <ref> [8] </ref>). We first describe the computational model underlying ASMs, and then their syntax and semantics.
Reference: [9] <author> W. Hardt, W. Rosenstiel. </author> <title> Speed-Up Estimation for HW/SW-Systems. </title> <booktitle> Proc. of CODES/CASHE '96. </booktitle>
Reference-contexts: This requires the availability of efficient compilers for the target platform (which may be available for out-of-the-shelf components, but not for components under development) and of a prototype environment where the test runs take place, and leads to the well known bottlenecks <ref> [9] </ref>. Other approaches use co-simulation for evaluation. Several approaches to co-simulation have been proposed, e.g., [11, 4, 5].
Reference: [10] <author> W. Hardt, W. Rosenstiel. </author> <title> Prototyping of Tightly Coupled Hardware/Software-Systems. </title> <booktitle> Design Automation for Embedded Systems, </booktitle> <volume> vol. 2, no. </volume> <month> 1 </month> <year> (1997). </year>
Reference-contexts: Hardt and Rosenstiel have pointed out that detailed analysis data, e.g., on memory access and dynamic instruction usage are important for performance driven HW/SW-partitioning <ref> [10] </ref>. The detailed evaluation of instruction usage requires a dynamic analysis, as the number and sequence of instructions that are executed are in general data-dependent and therefore cannot be determined statically.
Reference: [11] <author> J. Henkel, Th. Benner, R. Ernst, W. Ye, N. Serafimov, G. Glawe. COSYMA: </author> <title> A Software Oriented Approach to Hardware/Software Codesign. </title> <journal> Journal of Computer and Software Engineering, 1994, </journal> <volume> vol. 2, no. </volume> <pages> 3. </pages>
Reference-contexts: Other approaches use co-simulation for evaluation. Several approaches to co-simulation have been proposed, e.g., <ref> [11, 4, 5] </ref>. Although co-simulation may provide very detailed analysis data, one major problem is constituted by the very long simulation times, due to the design complexity and to the low abstraction level at which the simulation is usually performed.
References-found: 11

