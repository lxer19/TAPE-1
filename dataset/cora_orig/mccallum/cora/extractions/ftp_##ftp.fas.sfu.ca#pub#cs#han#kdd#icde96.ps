URL: ftp://ftp.fas.sfu.ca/pub/cs/han/kdd/icde96.ps
Refering-URL: http://fas.sfu.ca/cs/research/groups/DB/sections/publication/kdd/kdd.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Email: dcheung@cs.hku.hk.  Email: han@cs.sfu.ca.  Email: cstyng@comp.polyu.edu.hk.  Email: cywong@cs.hku.hk.  
Title: Maintenance of Discovered Association Rules in Large Databases: An Incremental Updating Technique  
Author: David W. Cheung Jiawei Han Vincent T. Ng yy C.Y. Wong 
Address: Hong Kong, Hong Kong.  Canada.  Hong Kong.  Hong Kong, Hong Kong.  
Affiliation: Department of Computer Science, The University of  School of Computing Science, Simon Fraser University,  yy Department of Computing, Hong Kong Polytechnic University,  Department of Computer Science, The University of  
Abstract: An incremental updating technique is developed for maintenance of the association rules discovered by database mining. There have been many studies on efficient discovery of association rules in large databases. However, it is nontrivial to maintain such discovered rules in large databases because a database may allow frequent or occasional updates and such updates may not only invalidate some existing strong association rules but also turn some weak rules into strong ones. In this study, an incremental updating technique is proposed for efficient maintenance of discovered association rules when new transaction data are added to a transaction database. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Agrawal, T. Imielinski, and A. Swami. </author> <title> Mining Association Rules between Sets of Items in Large Databases. </title> <booktitle> In Proc. 1993 ACM-SIGMOD Int. Conf. Management of Data, </booktitle> <pages> 207-216, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Design efficient algorithms for mining different types of rules or patterns. 2. Design efficient algorithms to update, maintain and manage the rules discovered. The first problem has been studied substantially with many interesting and efficient database mining algorithms reported (e.g., see <ref> [1, 2, 3, 5, 6, 8, 9, 11] </ref>). Such database-oriented knowledge mining algorithms can be classified into two categories: concept generalization-based discovery and discovery at the primitive concept levels. <p> One such example is the DBLearn system [3, 5]. The latter relies on the discovery of strong regularities (rules) from the database without concept generalization. Association rule <ref> [1, 2, 9] </ref> is an important type of rules discovered by this approach. However, very little work has been done on the second problem. A method for handling incremental database updates for the rules discovered by the generalization-based approach was briefly discussed in [5]. <p> Since database updates may introduce new association rules and invalidate some existing ones, it is important to study efficient algorithms for incremental update of association rules in large databases, which is the theme of this paper. In the pioneer work <ref> [1] </ref>, it is shown that the problem of mining association rules can be decomposed into two subproblems. The first problem is to find out all large itemsets which are contained by a significant number of transactions with respect to a threshold minimum support. <p> Since it is easy to generate association rules if the large itemsets are available, major efforts in the research community have been focused on finding efficient algorithms to compute the large itemsets in recent studies. Among all the algorithms proposed, the Apriori (and its modifications) <ref> [1] </ref> and the DHP (Direct Hashing and Pruning) [9] algorithms are the two most successful. They both run a number of iterations and compute the large itemsets of the same size in each iteration, starting from the size-one itemsets. <p> Given a minimum support threshold minsup, an itemset X is large if its support is no less than minsup. The problem of mining association rules is reduced to the problem of finding all large itemsets for a pre-determined minimum support <ref> [1] </ref>. 2.2 Update of association rules Let L be the set of large itemsets in the database DB, s be the minimum support, and D be the number of transactions in DB. <p> As mentioned above, we also tested FUP with some very large databases. It was found that FUP actually performs much better in larger databases. 4.1 Generation of synthetic data The databases used in our experiments are synthetic data generated using the same technique introduced in <ref> [1] </ref> and modified in [9]. <p> P s is the pool size to store potential large itemsets from which transactions will receive their items. M f is the multiplying factor associated with the pool. Readers not familiar with these parameters please refer to <ref> [1, 9] </ref>. The way we create our increment is a straight forward extension of the technique used to synthesize the database. In order to do comparison on a database of size D with an increment of size d.
Reference: [2] <author> R. Agrawal and R. Srikant. </author> <title> Fast algorithms for mining association rules. </title> <booktitle> In Proc. 1994 Int. Conf. Very Large Data Bases, </booktitle> <pages> pages 487-499, </pages> <address> Santiago, Chile, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: Design efficient algorithms for mining different types of rules or patterns. 2. Design efficient algorithms to update, maintain and manage the rules discovered. The first problem has been studied substantially with many interesting and efficient database mining algorithms reported (e.g., see <ref> [1, 2, 3, 5, 6, 8, 9, 11] </ref>). Such database-oriented knowledge mining algorithms can be classified into two categories: concept generalization-based discovery and discovery at the primitive concept levels. <p> One such example is the DBLearn system [3, 5]. The latter relies on the discovery of strong regularities (rules) from the database without concept generalization. Association rule <ref> [1, 2, 9] </ref> is an important type of rules discovered by this approach. However, very little work has been done on the second problem. A method for handling incremental database updates for the rules discovered by the generalization-based approach was briefly discussed in [5]. <p> Proof. This is based on the property that all the subsets of a large itemset must also be large, proved in <ref> [2] </ref>. 2 Lemma 4 A k-itemset fX 1 ; : : : ; X k g in the original large k-itemsets L k is a loser (i.e., not in the large k-itemset L 0 k ) in the updated database DB [ db if and only if fX 1 ; : <p> The key is to generate a small set of candidate sets. The set of candidate sets, C 2 , is generated, before the above scan on db starts, by applying the apriori-gen function on L 0 1 <ref> [2] </ref>. The sets in L 2 are excluded when creating C 2 because they have already been handled. The support count of the itemsets in C 2 are accumulated in the same scan of db. The itemsets in C 2 can now be pruned by checking their support count. <p> k1 do if Y X then f W = W fXg; break; g for all T 2 db do f /* scan db */ for all X 2 Subset (W; T ) do X:support d ++; /* Subset (W; T ) returns all the sets in W contained in T <ref> [2] </ref> */ for all X 2 Subset (C; T ) do X:support d ++; /* find support of all X 2 C */ Reduce db (T); /*Some items in transactions in db can be removed, discussed in next section*/ g /*put the winners from W into L 0 k */ if
Reference: [3] <author> D.W. Cheung, A. W.-C. Fu, and J. Han. </author> <title> Knowledge discovery in databases: A rule-based attribute-oriented approach. </title> <booktitle> In Proc. 1994 Int'l Symp. on Methodologies for Intelligent Systems, </booktitle> <pages> pages 164-173, </pages> <address> Charlotte, North Carolina, </address> <month> Octo-ber </month> <year> 1994. </year>
Reference-contexts: Design efficient algorithms for mining different types of rules or patterns. 2. Design efficient algorithms to update, maintain and manage the rules discovered. The first problem has been studied substantially with many interesting and efficient database mining algorithms reported (e.g., see <ref> [1, 2, 3, 5, 6, 8, 9, 11] </ref>). Such database-oriented knowledge mining algorithms can be classified into two categories: concept generalization-based discovery and discovery at the primitive concept levels. <p> The former relies on the generalization of concepts (attribute values) stored in databases and then summarization of the data regularities at a high concept level. One such example is the DBLearn system <ref> [3, 5] </ref>. The latter relies on the discovery of strong regularities (rules) from the database without concept generalization. Association rule [1, 2, 9] is an important type of rules discovered by this approach. However, very little work has been done on the second problem.
Reference: [4] <author> U. M. Fayyad, G. Piatetsky-Shapiro, P. Smyth, and R. Uthurusamy. </author> <title> Advances in Knowledge Discovery and Data Mining. </title> <publisher> AAAI/MIT Press, </publisher> <year> 1995. </year>
Reference-contexts: 1 Introduction Database mining has recently attracted tremendous amount of attention in the database research because of its wide applicability in many areas, including decision support, market strategy and financial forecast. According to many studies in knowledge discovery in databases <ref> [10, 4] </ref>, mining knowledge from databases has the following characteristics. 1. The size of the database is significantly large, it could scale up to gigabytes, terabytes, or even larger, in some applications. 2. The rules discovered is valid only in statistical terms.
Reference: [5] <author> J. Han, Y. Cai, and N. Cercone. </author> <title> Data-driven discovery of quantitative rules in relational databases. </title> <journal> IEEE Trans. Knowledge and Data Engineering, </journal> <volume> 5 </volume> <pages> 29-40, </pages> <year> 1993. </year>
Reference-contexts: Design efficient algorithms for mining different types of rules or patterns. 2. Design efficient algorithms to update, maintain and manage the rules discovered. The first problem has been studied substantially with many interesting and efficient database mining algorithms reported (e.g., see <ref> [1, 2, 3, 5, 6, 8, 9, 11] </ref>). Such database-oriented knowledge mining algorithms can be classified into two categories: concept generalization-based discovery and discovery at the primitive concept levels. <p> The former relies on the generalization of concepts (attribute values) stored in databases and then summarization of the data regularities at a high concept level. One such example is the DBLearn system <ref> [3, 5] </ref>. The latter relies on the discovery of strong regularities (rules) from the database without concept generalization. Association rule [1, 2, 9] is an important type of rules discovered by this approach. However, very little work has been done on the second problem. <p> Association rule [1, 2, 9] is an important type of rules discovered by this approach. However, very little work has been done on the second problem. A method for handling incremental database updates for the rules discovered by the generalization-based approach was briefly discussed in <ref> [5] </ref>. However, previous work has not been seen on incremental updating of association rules. Since database updates may introduce new association rules and invalidate some existing ones, it is important to study efficient algorithms for incremental update of association rules in large databases, which is the theme of this paper.
Reference: [6] <author> J. Han and Y. Fu. </author> <title> Discovery of multiple-level association rules from large databases. </title> <booktitle> In Proc. 1995 Int. Conf. Very Large Data Bases, </booktitle> <address> Zurich, Switzerland, </address> <month> Sept. </month> <year> 1995. </year>
Reference-contexts: Design efficient algorithms for mining different types of rules or patterns. 2. Design efficient algorithms to update, maintain and manage the rules discovered. The first problem has been studied substantially with many interesting and efficient database mining algorithms reported (e.g., see <ref> [1, 2, 3, 5, 6, 8, 9, 11] </ref>). Such database-oriented knowledge mining algorithms can be classified into two categories: concept generalization-based discovery and discovery at the primitive concept levels. <p> We also call an association rule a strong rule to distinguish it from the weak ones, i.e., those that do not meet the thresholds <ref> [6] </ref>. For an itemset X, its support is definited similarly as the percentage of transactions in DB which contain X. Given a minimum support threshold minsup, an itemset X is large if its support is no less than minsup. <p> We have also investigated the cases of deletion and modification of a transaction database. Recently, there have been some interesting studies at finding multiple-level or generalized association rules in large transaction databases <ref> [6, 11] </ref>. The extension of our incremental updating technique for maintenance of multiple-level or generalized association rules in transaction databases is an interesting topic for future research.
Reference: [7] <author> M. Klemettinen, H. Mannila, P. Ronkainen, H. Toivonen, and A. I. Verkamo. </author> <title> Finding interesting rules from large sets of discovered association rules. </title> <booktitle> In Proc. 3rd Int'l Conf. on Information and Knowledge Management, </booktitle> <pages> pages 401-408, </pages> <address> Gaithersburg, Maryland, </address> <month> Nov. </month> <year> 1994. </year>
Reference: [8] <author> R. Ng and J. Han. </author> <title> Efficient and effective clustering method for spatial data mining. </title> <booktitle> In Proc. 1994 Int. Conf. Very Large Data Bases, </booktitle> <pages> pages 144-155, </pages> <address> Santiago, Chile, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: Design efficient algorithms for mining different types of rules or patterns. 2. Design efficient algorithms to update, maintain and manage the rules discovered. The first problem has been studied substantially with many interesting and efficient database mining algorithms reported (e.g., see <ref> [1, 2, 3, 5, 6, 8, 9, 11] </ref>). Such database-oriented knowledge mining algorithms can be classified into two categories: concept generalization-based discovery and discovery at the primitive concept levels.
Reference: [9] <author> J.S. Park, M.S. Chen, and P.S. Yu. </author> <title> An effective hash-based algorithm for mining association rules. </title> <booktitle> In Proc. 1995 ACM-SIGMOD Int. Conf. Management of Data, </booktitle> <address> San Jose, CA, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: Design efficient algorithms for mining different types of rules or patterns. 2. Design efficient algorithms to update, maintain and manage the rules discovered. The first problem has been studied substantially with many interesting and efficient database mining algorithms reported (e.g., see <ref> [1, 2, 3, 5, 6, 8, 9, 11] </ref>). Such database-oriented knowledge mining algorithms can be classified into two categories: concept generalization-based discovery and discovery at the primitive concept levels. <p> One such example is the DBLearn system [3, 5]. The latter relies on the discovery of strong regularities (rules) from the database without concept generalization. Association rule <ref> [1, 2, 9] </ref> is an important type of rules discovered by this approach. However, very little work has been done on the second problem. A method for handling incremental database updates for the rules discovered by the generalization-based approach was briefly discussed in [5]. <p> Among all the algorithms proposed, the Apriori (and its modifications) [1] and the DHP (Direct Hashing and Pruning) <ref> [9] </ref> algorithms are the two most successful. They both run a number of iterations and compute the large itemsets of the same size in each iteration, starting from the size-one itemsets. <p> In the FUP algorithm, the function Reduce DB performs this reduction. In FUP, we have also integrated the direct hashing technique in <ref> [9] </ref>, which further reduces the number of the candidate sets used in iteration two. 4 Performance Study In order to assess the performance of FUP, experiments are conducted to compare its performance with that of Apriori and DHP. <p> As mentioned above, we also tested FUP with some very large databases. It was found that FUP actually performs much better in larger databases. 4.1 Generation of synthetic data The databases used in our experiments are synthetic data generated using the same technique introduced in [1] and modified in <ref> [9] </ref>. <p> database DB d Number of transactions in the increment d j T j Mean size of the transactions j I j Mean size of the maximal potentially large itemsets j L j Number of potentially large itemsets N Number of items Table 1: Parameter Table. are similar to those in <ref> [9] </ref> except that the size of the increment is an additional parameter. Table 1 is a list of the parameters used in our synthetic database. In the following we use the notation Tx.Iy.Dm.dn, modified from the one used in [9], to denote a database in which D = m thousands, d <p> of items Table 1: Parameter Table. are similar to those in <ref> [9] </ref> except that the size of the increment is an additional parameter. Table 1 is a list of the parameters used in our synthetic database. In the following we use the notation Tx.Iy.Dm.dn, modified from the one used in [9], to denote a database in which D = m thousands, d = n thousands, jTj = x, and jIj = y. In our experiments, we set jLj = 2000, N = 1000, and the secondary parameters S q = 5, P s = 50, and M f = 2000. <p> P s is the pool size to store potential large itemsets from which transactions will receive their items. M f is the multiplying factor associated with the pool. Readers not familiar with these parameters please refer to <ref> [1, 9] </ref>. The way we create our increment is a straight forward extension of the technique used to synthesize the database. In order to do comparison on a database of size D with an increment of size d. <p> The performance ratios between them are shown in Figure 2. In our implementation of the DHP, a hash table of size 100 is used, and hashing is only used in the generation of the size-2 candidate sets. This is the same policy used in <ref> [9] </ref>. For small support, FUP is 3 to 6 times faster than DHP, and 3 to 7 times faster than Apriori. For larger support, it is less costly to re-run the mining algorithm on the updated database since the number of large itemsets is relatively smaller.
Reference: [10] <author> G. Piatetsky-Shapiro and W. J. Frawley. </author> <title> Knowledge Discovery in Databases. </title> <publisher> AAAI/MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: 1 Introduction Database mining has recently attracted tremendous amount of attention in the database research because of its wide applicability in many areas, including decision support, market strategy and financial forecast. According to many studies in knowledge discovery in databases <ref> [10, 4] </ref>, mining knowledge from databases has the following characteristics. 1. The size of the database is significantly large, it could scale up to gigabytes, terabytes, or even larger, in some applications. 2. The rules discovered is valid only in statistical terms.
Reference: [11] <author> R. Srikant and R. Agrawal. </author> <title> Mining generalized association rules. </title> <booktitle> In Proc. 1995 Int. Conf. Very Large Data Bases, </booktitle> <address> Zurich, Switzerland, </address> <month> Sept. </month> <year> 1995. </year>
Reference-contexts: Design efficient algorithms for mining different types of rules or patterns. 2. Design efficient algorithms to update, maintain and manage the rules discovered. The first problem has been studied substantially with many interesting and efficient database mining algorithms reported (e.g., see <ref> [1, 2, 3, 5, 6, 8, 9, 11] </ref>). Such database-oriented knowledge mining algorithms can be classified into two categories: concept generalization-based discovery and discovery at the primitive concept levels. <p> We have also investigated the cases of deletion and modification of a transaction database. Recently, there have been some interesting studies at finding multiple-level or generalized association rules in large transaction databases <ref> [6, 11] </ref>. The extension of our incremental updating technique for maintenance of multiple-level or generalized association rules in transaction databases is an interesting topic for future research.
References-found: 11

