URL: http://www.cs.washington.edu/homes/beame/crew.ps
Refering-URL: http://www.cs.washington.edu/homes/beame/papers.html
Root-URL: 
Phone: 2  
Title: Separating the Power of EREW and CREW PRAMs with Small Communication Width on a CREW
Author: Paul Beame Faith E. Fich Rakesh K. Sinha 
Note: h)  
Address: Seattle, WA 98195, USA  Toronto, Ontario, Canada M5S 1A4  
Affiliation: 1 Computer Science and Engineering, University of Washington,  Computer Science, University of Toronto,  
Abstract: We prove that evaluating a Boolean decision tree of height h requires ( h m+log fl h ) time on any EREW PRAM with communication width m and any number of processors. Since this function can be easily computed in time O( p 
Abstract-found: 1
Intro-found: 1
Reference: [Bea86] <author> P. Beame. </author> <title> Lower Bounds in Parallel Machine Computation. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Toronto, </institution> <year> 1986. </year> <note> Also appears as Technical Report TR 198/87. </note>
Reference-contexts: Our hope is that some of the techniques developed for small communication widths will turn out to be useful even for the general case. For example, the technique in the lower bound result for the OR function on CREW (1) PRAMs <ref> [VW85, Bea86] </ref> is very similar to the technique that Kuty lowski [Kut91] eventually used in his optimal bound for the OR on general CREW PRAMs. Our lower bound proof consists of three parts. <p> Since the shared memory is the only means of communication, we can assume that for any PRAM running for t steps only the processors that write by time t are involved in the computation. The bounds in <ref> [Bea86] </ref> (see also [VW85]) show that for any CREW (1) PRAM at time t for any given input vector e at least a 2 O (t 2 ) fraction of all inputs vectors are indistinguishable from e from the point of view of any individual processor.
Reference: [CDR86] <author> Steven A. Cook, Cynthia Dwork, and Rudiger Reischuk. </author> <title> Upper and lower time bounds for parallel random access machines without simultaneous writes. </title> <journal> SIAM Journal on Computing, </journal> <volume> 15(1) </volume> <pages> 87-97, </pages> <month> February </month> <year> 1986. </year>
Reference-contexts: Cook, Dwork, and Reischuk <ref> [CDR86] </ref>, by an elegant argument, showed a separation between the powers of CRCW and CREW PRAMs. They proved that the OR of n bits, which can be easily computed in constant time on a CRCW PRAM, requires (log n) time on any CREW PRAM. <p> In this model, the choice of processor that may write into a given cell at a given point in time is independent of the input. Processors are still allowed to read from any shared memory cell. (The machine is semi-oblivious in the terminology of <ref> [CDR86] </ref>.) The CROW PRAM [DR86] is the CREW PRAM restricted in the same manner. (Allowing processors to own more than one shared memory cell does not change the power of the CROW PRAM model.) Fich and Wigderson proved that the EROW PRAM requires ( log n) time to compute a Boolean
Reference: [DKR90] <author> M. Dietzfelbinger, M. Kuty lowski, and R. Reischuk. </author> <title> Exact time bounds for computing Boolean functions on PRAMs without simultaneous writes. </title> <booktitle> In Proceedings of the 1990 ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 125-135, </pages> <address> Crete, Greece, </address> <month> June </month> <year> 1990. </year>
Reference-contexts: They proved that the OR of n bits, which can be easily computed in constant time on a CRCW PRAM, requires (log n) time on any CREW PRAM. This result was improved by Kuty lowski [Kut91] and Dietzfelbinger et al. <ref> [DKR90] </ref> who determined the exact complexity of OR. Snir [Sni85] proved that the problem of searching a sorted list is more difficult on the EREW PRAM than on the CREW PRAM.
Reference: [DR86] <author> P. W. Dymond and W. L. Ruzzo. </author> <title> Parallel random access machines with owned global memory and deterministic context-free language recognition. </title> <editor> In Lau-rent Kott, editor, </editor> <booktitle> Automata, Languages, and Programming: 13th International Colloquium, volume 226 of Lecture Notes in Computer Science, </booktitle> <pages> pages 95-104, </pages> <publisher> Rennes, </publisher> <address> France, July 1986. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: In this model, the choice of processor that may write into a given cell at a given point in time is independent of the input. Processors are still allowed to read from any shared memory cell. (The machine is semi-oblivious in the terminology of [CDR86].) The CROW PRAM <ref> [DR86] </ref> is the CREW PRAM restricted in the same manner. (Allowing processors to own more than one shared memory cell does not change the power of the CROW PRAM model.) Fich and Wigderson proved that the EROW PRAM requires ( log n) time to compute a Boolean function that requires only
Reference: [Fic93] <author> Faith E. Fich. </author> <title> The complexity of computation on the parallel random access machine. </title> <editor> In John H. Reif, editor, </editor> <booktitle> Synthesis of Parallel Algorithms, </booktitle> <pages> pages 843-900. </pages> <publisher> Morgan Kaufman, </publisher> <address> San Mateo, CA, </address> <year> 1993. </year>
Reference-contexts: The three most popular models are the CRCW (concurrent read and write), CREW (concurrent read, but exclusive write), and EREW (exclusive read and write) PRAMs (see <ref> [JaJ92, Fic93] </ref>.) A basic issue in parallel complexity theory is to understand the relative power of different variants of PRAMs. Cook, Dwork, and Reischuk [CDR86], by an elegant argument, showed a separation between the powers of CRCW and CREW PRAMs.
Reference: [FW90] <author> Faith E. Fich and Avi Wigderson. </author> <title> Towards understanding exclusive read. </title> <journal> SIAM Journal on Computing, </journal> <volume> 19(4) </volume> <pages> 717-727, </pages> <year> 1990. </year>
Reference-contexts: An open question that remains is whether or not there is a function f : f0; 1g n ! f0; 1g that can be computed more quickly by a CREW PRAM than by an EREW PRAM. Fich and Wigderson <ref> [FW90] </ref> have made some progress by resolving this question in a special case when there is a restriction imposed on where in shared memory processors can write.
Reference: [GNR89] <author> E. Gafni, J. Naor, and P. Ragde. </author> <title> On separating the EREW and CREW PRAM models. </title> <journal> Theoretical Computer Science, </journal> <volume> 68(3) </volume> <pages> 343-346, </pages> <year> 1989. </year>
Reference-contexts: This result was improved by Kuty lowski [Kut91] and Dietzfelbinger et al. [DKR90] who determined the exact complexity of OR. Snir [Sni85] proved that the problem of searching a sorted list is more difficult on the EREW PRAM than on the CREW PRAM. Gafni, Naor, and Ragde <ref> [GNR89] </ref> extended fl Beame and Sinha's research supported by NSF/DARPA under grant CCR-8907960 and NSF under grant CCR-8858799. Fich's research supported by the Natural Science and Engineering Research Council of Canada and the Information Technology Research Centre of Ontario. 1 this result to a problem defined on a full domain.
Reference: [JaJ92] <author> Joseph JaJa. </author> <title> An Introduction to Parallel Algorithms. </title> <publisher> Addison-Wesley, </publisher> <year> 1992. </year>
Reference-contexts: The three most popular models are the CRCW (concurrent read and write), CREW (concurrent read, but exclusive write), and EREW (exclusive read and write) PRAMs (see <ref> [JaJ92, Fic93] </ref>.) A basic issue in parallel complexity theory is to understand the relative power of different variants of PRAMs. Cook, Dwork, and Reischuk [CDR86], by an elegant argument, showed a separation between the powers of CRCW and CREW PRAMs.
Reference: [Kut91] <author> M. Kuty loswski. </author> <title> The complexity of Boolean functions on CREW PRAMs. </title> <journal> SIAM Journal on Computing, </journal> <volume> 20(5) </volume> <pages> 824-833, </pages> <year> 1991. </year> <month> 11 </month>
Reference-contexts: They proved that the OR of n bits, which can be easily computed in constant time on a CRCW PRAM, requires (log n) time on any CREW PRAM. This result was improved by Kuty lowski <ref> [Kut91] </ref> and Dietzfelbinger et al. [DKR90] who determined the exact complexity of OR. Snir [Sni85] proved that the problem of searching a sorted list is more difficult on the EREW PRAM than on the CREW PRAM. <p> For example, the technique in the lower bound result for the OR function on CREW (1) PRAMs [VW85, Bea86] is very similar to the technique that Kuty lowski <ref> [Kut91] </ref> eventually used in his optimal bound for the OR on general CREW PRAMs. Our lower bound proof consists of three parts. First we show that any EREW (1) PRAM running for a short time can only have a small number of processors doing useful work.
Reference: [Nis91] <author> Noam Nisan. </author> <title> CREW PRAMs and decision trees. </title> <journal> SIAM Journal on Computing, </journal> <volume> 20(6) </volume> <pages> 999-1007, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: The CROW PRAM never requires more than a constant factor more time than the CREW PRAM to compute any function defined on a complete domain (although the simulation may require a substantial increase in the number of processors) <ref> [Nis91] </ref>. However, the restriction to the owner write model with a single memory cell per processor seems much more drastic for exclusive read machines. A fast simulation of EREW PRAMs by EROW PRAMs seems unlikely.
Reference: [Sni85] <author> M. Snir. </author> <title> On parallel searching. </title> <journal> SIAM Journal on Computing, </journal> <volume> 14(3) </volume> <pages> 688-708, </pages> <year> 1985. </year>
Reference-contexts: They proved that the OR of n bits, which can be easily computed in constant time on a CRCW PRAM, requires (log n) time on any CREW PRAM. This result was improved by Kuty lowski [Kut91] and Dietzfelbinger et al. [DKR90] who determined the exact complexity of OR. Snir <ref> [Sni85] </ref> proved that the problem of searching a sorted list is more difficult on the EREW PRAM than on the CREW PRAM. Gafni, Naor, and Ragde [GNR89] extended fl Beame and Sinha's research supported by NSF/DARPA under grant CCR-8907960 and NSF under grant CCR-8858799.
Reference: [VW85] <author> U. Vishkin and A. Wigderson. </author> <title> Trade-offs between depth and width in parallel computation. </title> <journal> SIAM Journal on Computing, </journal> <volume> 14(2) </volume> <pages> 303-314, </pages> <month> May </month> <year> 1985. </year> <month> 12 </month>
Reference-contexts: The communication width of a PRAM <ref> [VW85] </ref> is defined as the number of shared memory cells that are available for both reading and writing. (A separate read-only memory is used to store the input.) We denote by EREW (m), CREW (m), and CRCW (m) the respective PRAM models with communication width m. <p> Our hope is that some of the techniques developed for small communication widths will turn out to be useful even for the general case. For example, the technique in the lower bound result for the OR function on CREW (1) PRAMs <ref> [VW85, Bea86] </ref> is very similar to the technique that Kuty lowski [Kut91] eventually used in his optimal bound for the OR on general CREW PRAMs. Our lower bound proof consists of three parts. <p> Since the shared memory is the only means of communication, we can assume that for any PRAM running for t steps only the processors that write by time t are involved in the computation. The bounds in [Bea86] (see also <ref> [VW85] </ref>) show that for any CREW (1) PRAM at time t for any given input vector e at least a 2 O (t 2 ) fraction of all inputs vectors are indistinguishable from e from the point of view of any individual processor. <p> Define the history of the common cells on any input to be the sequence of vectors of values that they take on that input. Our lower bound proofs proceed by fixing the history of the common cells. We use the following result of Vishkin and Wigderson <ref> [VW85] </ref>. Lemma 5: [VW85] For any CRCW (m) PRAM running for t steps, there is a restric tion r which sets at most m t+1 variables such that the history of the common cells for the first t steps is the same for all inputs consistent with r. <p> Define the history of the common cells on any input to be the sequence of vectors of values that they take on that input. Our lower bound proofs proceed by fixing the history of the common cells. We use the following result of Vishkin and Wigderson <ref> [VW85] </ref>. Lemma 5: [VW85] For any CRCW (m) PRAM running for t steps, there is a restric tion r which sets at most m t+1 variables such that the history of the common cells for the first t steps is the same for all inputs consistent with r.
References-found: 12

