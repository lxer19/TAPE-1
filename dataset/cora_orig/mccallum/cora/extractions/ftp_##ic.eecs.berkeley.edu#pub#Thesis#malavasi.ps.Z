URL: ftp://ic.eecs.berkeley.edu/pub/Thesis/malavasi.ps.Z
Refering-URL: http://www-cad.eecs.berkeley.edu/Respep/Research/Thesis/thesis.html
Root-URL: http://www.cs.berkeley.edu
Title: TECHNIQUES FOR PERFORMANCE-DRIVEN LAYOUT OF ANALOG INTEGRATED CIRCUITS  
Author: Enrico Malavasi 
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> H. Y. Koh, C. H. Sequin and P. R. Gray, "OPASYN: </author> <title> A compiler for CMOS operational amplifiers", </title> <journal> IEEE Trans. on CAD, </journal> <volume> vol. 9, </volume> <editor> n. </editor> <volume> 2, </volume> <pages> pp. 113-126, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: At system level, analog silicon compilers have reached satisfactory results only on circuits or systems with regular structures, which require a number of similar building blocks with well defined characteristics. Examples are programs for the automatic synthesis of op-amps and comparators <ref> [1, 2, 3] </ref> and, at a higher level of hierarchy, switched-capacitor filters [4, 5, 6, 7] [8, 9, 10] and A/D, D/A converters [11, 12]. These generators cover a large fraction of the analog circuits needed in most industrial applications. <p> associated to the j-th parasitic p j is defined as follows: w j = w 0 i=1 j P 0 (5.7) where w 0 is a normalization factor, such that, if sensitivities are not all zero, at least one weight is set to 1, and the others are all in <ref> [0; 1] </ref>. p 0 is a dimensional parameter equal to R 0 , C 0 or C P , depending on the type of parasitic. <p> Parameter 0 is a normalization factor such that at least one of the increased weights, the one associated to the parasitic which gave the most important contribution to the constraint violation, is brought to 1, while the others w j 2 <ref> [0; 1] </ref>; 8j. 50 It is possible to show that the iterative approach based on weight modification terminates.
Reference: [2] <author> H. Onodera, H. Kanbara and K. Tamaru, </author> <title> "Operational Amplifier Compilation with Performance Optimization", </title> <booktitle> in Proc. IEEE Custom Integrated Circuits Conference, </booktitle> <month> May </month> <year> 1989. </year>
Reference-contexts: At system level, analog silicon compilers have reached satisfactory results only on circuits or systems with regular structures, which require a number of similar building blocks with well defined characteristics. Examples are programs for the automatic synthesis of op-amps and comparators <ref> [1, 2, 3] </ref> and, at a higher level of hierarchy, switched-capacitor filters [4, 5, 6, 7] [8, 9, 10] and A/D, D/A converters [11, 12]. These generators cover a large fraction of the analog circuits needed in most industrial applications.
Reference: [3] <author> R. Harjani, R. A. Rutenbar and L. R. Carley, </author> <title> "Analog Circuit Synthesis for Performance in OASYS", </title> <booktitle> in Proc. IEEE ICCAD, </booktitle> <pages> pp. 492-495, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: At system level, analog silicon compilers have reached satisfactory results only on circuits or systems with regular structures, which require a number of similar building blocks with well defined characteristics. Examples are programs for the automatic synthesis of op-amps and comparators <ref> [1, 2, 3] </ref> and, at a higher level of hierarchy, switched-capacitor filters [4, 5, 6, 7] [8, 9, 10] and A/D, D/A converters [11, 12]. These generators cover a large fraction of the analog circuits needed in most industrial applications.
Reference: [4] <author> H. Yaghutiel, A. Sangiovanni-Vincentelli and P. R. Gray, </author> <title> "A Methodology for Automated Layout of Switched-Capacitor Filters", </title> <booktitle> in Proc. IEEE ICCAD, </booktitle> <pages> pp. 444-447, </pages> <year> 1986. </year>
Reference-contexts: Examples are programs for the automatic synthesis of op-amps and comparators [1, 2, 3] and, at a higher level of hierarchy, switched-capacitor filters <ref> [4, 5, 6, 7] </ref> [8, 9, 10] and A/D, D/A converters [11, 12]. These generators cover a large fraction of the analog circuits needed in most industrial applications. <p> Also, they can be employed as parts of generators of the previous class In this chapter the most relevant approaches pursued so far are described. Details about specialized approaches for placement, routing and compaction also appear in the following respective chapters. 3.1 Specialized Layout Systems Adore <ref> [4] </ref> is a program for the layout of SC filters. The layout is organized in a fixed floor-plan. All capacitors are clustered into groups of tightly matched elements, 17 located between an array of switches and an array of opamps.
Reference: [5] <author> W. J. Helms and K. C. Russell, </author> <title> "A Switched-Capacitor Filter Compiler", </title> <booktitle> in Proc. IEEE Custom Integrated Circuits Conference, </booktitle> <pages> pp. 125-128, </pages> <year> 1986. </year>
Reference-contexts: Examples are programs for the automatic synthesis of op-amps and comparators [1, 2, 3] and, at a higher level of hierarchy, switched-capacitor filters <ref> [4, 5, 6, 7] </ref> [8, 9, 10] and A/D, D/A converters [11, 12]. These generators cover a large fraction of the analog circuits needed in most industrial applications.
Reference: [6] <author> Y. Therasse, L. Reynders, R. Lannoo and B. Dupont, </author> <title> "A Switched-Capacitor Filter Compiler", </title> <booktitle> VLSI System Design, </booktitle> <pages> pp. 85-88, </pages> <month> Sept. </month> <year> 1987. </year>
Reference-contexts: Examples are programs for the automatic synthesis of op-amps and comparators [1, 2, 3] and, at a higher level of hierarchy, switched-capacitor filters <ref> [4, 5, 6, 7] </ref> [8, 9, 10] and A/D, D/A converters [11, 12]. These generators cover a large fraction of the analog circuits needed in most industrial applications.
Reference: [7] <author> G. V. Eaton, D. G. Nairn, W. M. Snelgrove and A. S. Sedra, </author> <title> "SICOMP: A Silicon Compiler for SC Filters", </title> <booktitle> in Proc. IEEE Int. Symposium on Circuits and Systems, </booktitle> <pages> pp. 321-324, </pages> <year> 1987. </year>
Reference-contexts: Examples are programs for the automatic synthesis of op-amps and comparators [1, 2, 3] and, at a higher level of hierarchy, switched-capacitor filters <ref> [4, 5, 6, 7] </ref> [8, 9, 10] and A/D, D/A converters [11, 12]. These generators cover a large fraction of the analog circuits needed in most industrial applications.
Reference: [8] <author> J. Assael, P. Senn and M. S. Tawfik, </author> <title> "A Switched-Capacitor Filter Silicon Compiler", </title> <journal> IEEE Journal of Solid State Circuits, </journal> <volume> vol. 23, n.1, </volume> <pages> pp. 166-174, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: Examples are programs for the automatic synthesis of op-amps and comparators [1, 2, 3] and, at a higher level of hierarchy, switched-capacitor filters [4, 5, 6, 7] <ref> [8, 9, 10] </ref> and A/D, D/A converters [11, 12]. These generators cover a large fraction of the analog circuits needed in most industrial applications.
Reference: [9] <author> A. Barlow et al., </author> <title> "An Integrated Switched-Capacitor Filter Design System", </title> <booktitle> in Proc. IEEE Custom Integrated Circuits Conference, </booktitle> <year> 1989. </year> <month> 91 </month>
Reference-contexts: Examples are programs for the automatic synthesis of op-amps and comparators [1, 2, 3] and, at a higher level of hierarchy, switched-capacitor filters [4, 5, 6, 7] <ref> [8, 9, 10] </ref> and A/D, D/A converters [11, 12]. These generators cover a large fraction of the analog circuits needed in most industrial applications.
Reference: [10] <author> M. Negahban and D. Gaiski, </author> <title> "Silicon Compilation of Switched-Capacitor Networks", </title> <booktitle> in Proc. EDAC, </booktitle> <pages> pp. 164-168, </pages> <year> 1990. </year>
Reference-contexts: Examples are programs for the automatic synthesis of op-amps and comparators [1, 2, 3] and, at a higher level of hierarchy, switched-capacitor filters [4, 5, 6, 7] <ref> [8, 9, 10] </ref> and A/D, D/A converters [11, 12]. These generators cover a large fraction of the analog circuits needed in most industrial applications.
Reference: [11] <author> P. E. Allen and P. R. Barton, </author> <title> "A Silicon Compiler for Successive Approximation A/D and D/A Converters", </title> <booktitle> in Proc. IEEE Custom Integrated Circuits Conference, </booktitle> <pages> pp. 552-555, </pages> <year> 1986. </year>
Reference-contexts: Examples are programs for the automatic synthesis of op-amps and comparators [1, 2, 3] and, at a higher level of hierarchy, switched-capacitor filters [4, 5, 6, 7] [8, 9, 10] and A/D, D/A converters <ref> [11, 12] </ref>. These generators cover a large fraction of the analog circuits needed in most industrial applications. Although some of these systems have proved extremely useful for the development of specific classes of circuits, a more general approach, able to cope with arbitrary architectures and full-custom layout, is often needed.
Reference: [12] <author> G. Jusuf, P. R. Gray and A. Sangiovanni-Vincentelli, </author> <title> "CADICS Cyclic Analog-To-Digital Converter Synthesis", </title> <booktitle> in Proc. IEEE ICCAD, </booktitle> <pages> pp. 286-289, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Examples are programs for the automatic synthesis of op-amps and comparators [1, 2, 3] and, at a higher level of hierarchy, switched-capacitor filters [4, 5, 6, 7] [8, 9, 10] and A/D, D/A converters <ref> [11, 12] </ref>. These generators cover a large fraction of the analog circuits needed in most industrial applications. Although some of these systems have proved extremely useful for the development of specific classes of circuits, a more general approach, able to cope with arbitrary architectures and full-custom layout, is often needed. <p> However, optimization is limited by the fixed floor-plan topology. Also, since routing and compaction are carried out by digital tools, rather than specialized analog programs, analog constraints are not handled properly. Cadics <ref> [12] </ref> is a technology-independent synthesis tool for cyclic A/D converters. The circuits synthesized with this tools cover a broad range of specifications for sampling rate, resolution, and area. No predefined modules are used. Depending on the specifications, cadics chooses a particular netlist module generator.
Reference: [13] <author> J. M. Cohn, D. J. Garrod, R. A. Rutenbar and L. R. Carley, </author> <title> "Techniques for Simultaneous Placement and Routing of Custom Analog Cells in KOAN/ANAGRAM II", </title> <booktitle> in Proc. IEEE ICCAD, </booktitle> <pages> pp. 394-397, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: A variety of approaches, mostly derived from the digital world, have been described in the past. A critical overview of such approaches will be presented in Chapter 3. Although approaches providing simultaneous placement and routing have been presented <ref> [13] </ref>, most of the systems developed so far follow the approach developed for digital circuits, where the layout design is partitioned into separate tasks: placement, routing, and compaction.
Reference: [14] <author> J. M. Cohn, D. J. Garrod, R. A. Rutenbar and L. R. Carley, "KOAN/ANAGRAM II: </author> <title> New Tools for Device-Level Analog Placement and Routing", </title> <journal> IEEE Journal of Solid State Circuits, </journal> <volume> vol. 26, </volume> <editor> n. </editor> <volume> 3, </volume> <pages> pp. 330-342, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: However, the algorithms used with digital circuits are often inadequate, since they cannot cope with the peculiar problems of parasitic control and topological constraints. Hence, specific approaches have been developed for analog circuits. In particular, analog placement is often solved with Simulated Annealing <ref> [14, 15] </ref>, due to the flexibility of this algorithm to deal with multiple-objective cost-functions. Analog routing is approached either with specialized, parasitic-sensitive channel routers [16, 17], or with area-routing algorithms [14, 18]. Compaction is seldom used by analog layout frameworks. <p> Hence, specific approaches have been developed for analog circuits. In particular, analog placement is often solved with Simulated Annealing [14, 15], due to the flexibility of this algorithm to deal with multiple-objective cost-functions. Analog routing is approached either with specialized, parasitic-sensitive channel routers [16, 17], or with area-routing algorithms <ref> [14, 18] </ref>. Compaction is seldom used by analog layout frameworks. Analog constraints make the compaction step extremely difficult and computationally expensive. Therefore, most of the existing approaches rely only on the quality of the placement and routing tools to achieve a satisfactory layout. <p> Finally, insensitive nets are routed, followed by noisy nets. Routing is controlled by a cost function accounting for capacitive couplings, number of vias and area. Placement and routing are performed at the symbolic level. A compactor is applied to the final layout in order to minimize area. Koan/anagram <ref> [14] </ref> is a tool for full-custom layout of analog cells using a macro-cell design style. Koan is a Simulated Annealing-based placer. It allows nonslicing structure and has constrained move sets handling symmetries and matching. Suitable device merging and abutment are performed during placement to reduce area and parasitics. <p> Typically these approaches have not achieved the same layout density and flexibility obtained by expert designers. Others [34] suggested a knowledge-based approach, or required the user to provide basic hints on the layout structure [40]. In <ref> [14] </ref>, very effective analog-specific placement and routing tools accounting for topological constraints have been provided for full-custom layout. A routing methodology for the minimization of cross-coupling has been proposed. However, no method is given to define the actual bounds for the parasitics introduced by the layout. <p> In addition, at the University of California at Berkeley we have considerable experience in deriving and implementing Simulated Annealing versions for a variety of problems [41, 42, 43, 44]. The algorithm has been used before for analog layout <ref> [14] </ref>, however our approach is significantly different in the way the constraints and cost functions are derived from high-level specifications and in the accurate estimation of layout dependent performances. Our placement approach is illustrated in Figure 4.1. <p> However in case of short interconnects lines, it becomes dominant, hindering further parasitic reduction by reducing the size of the wire. A drastic reduction of this parasitic component is possible only through device abutment. In our tool device abutment is performed dynamically during the annealing algorithm as in <ref> [14] </ref>. In our approach however the process is driven by the parasitic constraints, as well as by area and wiring considerations. Instead of randomly choosing the devices to abut, the algorithm tries first to remove the nets whose parasitics induce a violation on the performance constraints. <p> In this way the routing problem is reduced to the search of a minimum cost path. The complexity of this search grows as a quadratic function of the circuit size. An example of a tool based on this approach is Anagram <ref> [14] </ref>, a flexible area router based on the line expansion algorithm. It supports variable-width routing, symmetries and over-the-device routing. The grid structure, represented by a single- tile-plane data structure, allows an effective control over geometric details. <p> Terminals and blockages can be arbitrary collections of geometries, over-the-device routing and crosstalk sensitivity to pieces of placed devices are possible without additional overhead, as required by sophisticated data structures such as the tile-planes used in anagram <ref> [14] </ref>. Wire segments can be dynamically shifted from one grid position to another and grid rows/columns can be modified during routing to make room for new wire segments. In this way, dynamic wire modifications are made available, achieving a result similar to the weak modifications introduced by Mighty [65]. <p> Nets are routed taking into account symmetric blockages and then mirrored. While in later approaches <ref> [14] </ref> nets are mirrored one by one after routing, in road they are mirrored all together. This does not limit the flexibility of the router, and at the same time it allows a drastic reduction of the grid size to a half. <p> No extra area was required with respect to the hand-routed circuit. The total wire 62 approach. length was about 10% longer. 5.10.4 High-performance comparator The layout of a high-performance comparator, first described in <ref> [14] </ref>, is shown in while its offset depends on the mismatches between the stray resistances in the input stage. Like the previous examples, the layout was designed in MOSIS 2-m n-well CMOS and automatically placed with puppy.
Reference: [15] <author> E. Charbon, E. Malavasi, U. Choudhury, A. Casotto and A. Sangiovanni-Vincentelli, </author> <title> "A Constraint-Driven Placement Methodology for Analog Integrated Circuits", </title> <booktitle> in Proc. IEEE Custom Integrated Circuits Conference, </booktitle> <pages> pp. 2821-2824, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: However, the algorithms used with digital circuits are often inadequate, since they cannot cope with the peculiar problems of parasitic control and topological constraints. Hence, specific approaches have been developed for analog circuits. In particular, analog placement is often solved with Simulated Annealing <ref> [14, 15] </ref>, due to the flexibility of this algorithm to deal with multiple-objective cost-functions. Analog routing is approached either with specialized, parasitic-sensitive channel routers [16, 17], or with area-routing algorithms [14, 18]. Compaction is seldom used by analog layout frameworks. <p> When the layout algorithm to be used is known, it is possible to estimate lower and upper limits for coupling capacitances as well. Algorithms for estimating such limits have been described for all phases of automated constraint-driven layout <ref> [15, 17, 18, 27] </ref>. When such limits are estimated for a given circuit, they can be used to generate bounding constraints on the par-asitics for constraint-driven layout. <p> Most of the research <ref> [15] </ref> reported in this chapter has been developed in tight collaboration with Mr. Edoardo Charbon, who provided major contributions to the theoretical aspects, the algorithm development and its implementation. <p> Only recently performance-driven approaches to the layout of analog circuits have been presented. However, so far such approaches have never been extended to the placement. As a consequence, the placement tool described in this chapter, originally described in <ref> [15] </ref>, is the first implementation of such a strategy for analog circuit placement. In this tool, automatically generated constraints are used to control a Simulated Annealing placement algorithm, thus trying to insure that the resulting configuration meets all the high-level constraints on performances. <p> White spaces are mostly due to the fixed placement of modules into arrays, due to the fact that this hand-placed layout was originally routed with a channel router. 5.10.3 O.T.A. The transconductance opamp shown in Fig. 5.15 was automatically placed with the constraint-driven placement tool puppy <ref> [15] </ref>. This placement is not suitable for channel routing. Experiments with YACR [67] yielded an increase of area and achieved more sparse routing. Hand-routing, on the contrary, can be performed without requiring additional area.
Reference: [16] <author> R. S. Gyurcsik and J.-C. Jeen, </author> <title> "A Generalized Approach to Routing Mixed Analog and Digital Signal Nets in a Channel", </title> <journal> IEEE Journal of Solid State Circuits, </journal> <volume> vol. 24, </volume> <editor> n. </editor> <volume> 2, </volume> <pages> pp. 436-442, </pages> <month> Apr </month> <year> 1989. </year>
Reference-contexts: Hence, specific approaches have been developed for analog circuits. In particular, analog placement is often solved with Simulated Annealing [14, 15], due to the flexibility of this algorithm to deal with multiple-objective cost-functions. Analog routing is approached either with specialized, parasitic-sensitive channel routers <ref> [16, 17] </ref>, or with area-routing algorithms [14, 18]. Compaction is seldom used by analog layout frameworks. Analog constraints make the compaction step extremely difficult and computationally expensive. Therefore, most of the existing approaches rely only on the quality of the placement and routing tools to achieve a satisfactory layout. <p> Also, the design style imposes some restrictions on the layout. Finally, mutual net sensitivity, 19 i.e. cross-coupling constraints, are not taken into account. The net classification does not reflect the complexity of parasitic control in many analog and mixed digital/analog circuits. A two-layer gridless channel router is reported in <ref> [16] </ref>, which can deal with mixed analog/digital signals. The channel routing problem is represented by a vertical-constraint graph. Net crossovers between mutually sensitive nets are controlled by appropriate arrangement of the horizontal segments, which is reflected as directed edges in the graph.
Reference: [17] <author> U. Choudhury and A. Sangiovanni-Vincentelli, </author> <title> "Constraint-Based Channel Routing for Analog and Mixed-Analog Digital Circuits", </title> <booktitle> in Proc. IEEE ICCAD, </booktitle> <pages> pp. 198-201, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Hence, specific approaches have been developed for analog circuits. In particular, analog placement is often solved with Simulated Annealing [14, 15], due to the flexibility of this algorithm to deal with multiple-objective cost-functions. Analog routing is approached either with specialized, parasitic-sensitive channel routers <ref> [16, 17] </ref>, or with area-routing algorithms [14, 18]. Compaction is seldom used by analog layout frameworks. Analog constraints make the compaction step extremely difficult and computationally expensive. Therefore, most of the existing approaches rely only on the quality of the placement and routing tools to achieve a satisfactory layout. <p> An overview of performance functions, performance sensitivities, and constraint generation will be provided here. Most of the theoretical work described in this chapter has been developed by Umakanta Choudhury, in whose M.S. thesis [20], PhD thesis [21] and publications [22] <ref> [17] </ref> [23] further details can be found on these issues. 2.1 Performance Functions The performance functions of a circuit are the functions which describe its electrical behavior. Examples of performance functions are for an opamp, unity-gain bandwidth, low-frequency small-signal gain, phase margin, DC offset etc. <p> When the layout algorithm to be used is known, it is possible to estimate lower and upper limits for coupling capacitances as well. Algorithms for estimating such limits have been described for all phases of automated constraint-driven layout <ref> [15, 17, 18, 27] </ref>. When such limits are estimated for a given circuit, they can be used to generate bounding constraints on the par-asitics for constraint-driven layout.
Reference: [18] <author> E. Malavasi and A. Sangiovanni-Vincentelli, </author> <title> "Area Routing for Analog Layout", to be published in "IEEE Trans. </title> <booktitle> on Computer Aided Design", </booktitle> <volume> vol. 12, </volume> <year> 1993. </year>
Reference-contexts: Hence, specific approaches have been developed for analog circuits. In particular, analog placement is often solved with Simulated Annealing [14, 15], due to the flexibility of this algorithm to deal with multiple-objective cost-functions. Analog routing is approached either with specialized, parasitic-sensitive channel routers [16, 17], or with area-routing algorithms <ref> [14, 18] </ref>. Compaction is seldom used by analog layout frameworks. Analog constraints make the compaction step extremely difficult and computationally expensive. Therefore, most of the existing approaches rely only on the quality of the placement and routing tools to achieve a satisfactory layout. <p> When the layout algorithm to be used is known, it is possible to estimate lower and upper limits for coupling capacitances as well. Algorithms for estimating such limits have been described for all phases of automated constraint-driven layout <ref> [15, 17, 18, 27] </ref>. When such limits are estimated for a given circuit, they can be used to generate bounding constraints on the par-asitics for constraint-driven layout.
Reference: [19] <author> H. Chang, A. Sangiovanni-Vincentelli, F. Balarin, E. Charbon, U. Choudhury, G. Jusuf, E. Liu, E. Malavasi, R. Neff and P. Gray, </author> <title> "A Top-down, Constraint-Driven Design Methodology for Analog Integrated Circuits", </title> <booktitle> in Proc. IEEE Custom Integrated Circuits Conference, </booktitle> <pages> pp. 841-846, </pages> <month> May </month> <year> 1992. </year> <month> 92 </month>
Reference-contexts: In this report, a performance-driven approach is proposed for the automatic im 3 plementation of the physical design of analog circuits. This work is part of a general design methodology for analog circuits, which is being developed at the University of California, Berkeley <ref> [19] </ref>. In order to better understand the main guidelines and the motivations of this research, it is important to outline the methodology and the role that physical design assumes in it.
Reference: [20] <author> U. Choudhury, </author> <title> "Sensitivity Computation in SPICE3", M.s. </title> <type> thesis, </type> <institution> University of Cali-fornia at Berkeley, </institution> <year> 1988. </year>
Reference-contexts: An overview of performance functions, performance sensitivities, and constraint generation will be provided here. Most of the theoretical work described in this chapter has been developed by Umakanta Choudhury, in whose M.S. thesis <ref> [20] </ref>, PhD thesis [21] and publications [22] [17] [23] further details can be found on these issues. 2.1 Performance Functions The performance functions of a circuit are the functions which describe its electrical behavior. <p> A more efficient and accurate approach to sensitivity computation is the method of direct or adjoint techniques. Sensitivity analysis (except possibly the adjoint transient sensitivity analysis) is supported in standard circuit simulators such as SPICE3 <ref> [20] </ref>, SPICE2 [24] and TISPICE [25]. The direct method simultaneously computes sensitivities of all the circuit variables with respect to a given parameter. In SPICE3, the additional CPU time required for each parameter is about 8% for transient sensitivity, 4% for AC sensitivity and 1% for DC sensitivity [21].
Reference: [21] <author> U. Choudhury, </author> <title> "Performance-Constrained Physical Design of Analog and Mixed Analog/Digital Circuits", </title> <note> Memorandum UCB/ERL M92/38, UCB, </note> <month> April </month> <year> 1992. </year>
Reference-contexts: An overview of performance functions, performance sensitivities, and constraint generation will be provided here. Most of the theoretical work described in this chapter has been developed by Umakanta Choudhury, in whose M.S. thesis [20], PhD thesis <ref> [21] </ref> and publications [22] [17] [23] further details can be found on these issues. 2.1 Performance Functions The performance functions of a circuit are the functions which describe its electrical behavior. Examples of performance functions are for an opamp, unity-gain bandwidth, low-frequency small-signal gain, phase margin, DC offset etc. <p> The direct method simultaneously computes sensitivities of all the circuit variables with respect to a given parameter. In SPICE3, the additional CPU time required for each parameter is about 8% for transient sensitivity, 4% for AC sensitivity and 1% for DC sensitivity <ref> [21] </ref>. When the number of parameters is large, the direct method of sensitivity computation can be expensive. The adjoint technique [26] becomes more efficient in that case. <p> The problem of maximizing the total flexibility is converted into a minimization problem: minimize [F (p)] subject to: N p X S i p min j i = 1; ; N p where F (p) is the flexibility of the layout tool. All constraints are linear. In <ref> [21] </ref> a flexibility model is reported, which is a positive-defined quadratic function of all parasitics. With this model, the minimization problem is solved as a standard quadratic programming problem. Notice that this problem is very sparse, and therefore sparse matrix techniques can be 15 adopted to solve it efficiently.
Reference: [22] <author> U. Choudhury and A. Sangiovanni-Vincentelli, </author> <title> "Constraint Generation for Routing Analog Circuits", </title> <booktitle> in Proc. Design Automation Conference, </booktitle> <pages> pp. 561-566, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: An overview of performance functions, performance sensitivities, and constraint generation will be provided here. Most of the theoretical work described in this chapter has been developed by Umakanta Choudhury, in whose M.S. thesis [20], PhD thesis [21] and publications <ref> [22] </ref> [17] [23] further details can be found on these issues. 2.1 Performance Functions The performance functions of a circuit are the functions which describe its electrical behavior. Examples of performance functions are for an opamp, unity-gain bandwidth, low-frequency small-signal gain, phase margin, DC offset etc. <p> Routing is carried out by a maze router working on a fine grid. However, control over parasitics is not handled adequately. 3.2.4 Performance-driven approaches Performance-driven approaches were first reported in [39] and <ref> [22] </ref>. Both works rely on sensitivity analysis to model the dependence of performance degradations on para-sitics. In [39], The layout interconnect parasitics are modeled as equivalent RC networks. The sensitivity of the performance with respect to layout interconnect parasitics is analyzed. <p> However, in this approach the constraints applied are qualitative in nature and no quantitative analysis of performance degradations is actually done. Moreover, routing is carried out with a digital switch-box router, thus not handling correctly the analog constraints. In <ref> [22] </ref>, on the contrary, a general approach using sensitivity analysis for performance-driven routing is described. <p> Hence, a longest-path algorithm can be used to determine, in polynomial time, the optimum location of all components, or alternatively the existence of overconstraint loops [76]. 6.3.2 Coupling Constraints High-level performance specifications can be mapped efficiently onto a set of low-level bounds on parasitics <ref> [22] </ref>. If every parasitic is kept below its bound, all performance constraints are guaranteed to be met. Bounds are set so as to be feasible, on the basis of reasonable estimates of parasitic values drawn from analysis of the layout.
Reference: [23] <author> U. Choudhury and A. Sangiovanni-Vincentelli, </author> <title> "Use of Performance Sensitivities in Routing of Analog Circuits", </title> <booktitle> in Proc. IEEE Int. Symposium on Circuits and Systems, </booktitle> <pages> pp. 348-351, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: An overview of performance functions, performance sensitivities, and constraint generation will be provided here. Most of the theoretical work described in this chapter has been developed by Umakanta Choudhury, in whose M.S. thesis [20], PhD thesis [21] and publications [22] [17] <ref> [23] </ref> further details can be found on these issues. 2.1 Performance Functions The performance functions of a circuit are the functions which describe its electrical behavior. Examples of performance functions are for an opamp, unity-gain bandwidth, low-frequency small-signal gain, phase margin, DC offset etc.
Reference: [24] <author> W. Nye, D. C. Riley, A. Sangiovanni-Vincentelli and A. L. Tits, "DELIGHT-SPICE: </author> <title> An Optimization-Based System for the Design of Integrated Circuits", </title> <journal> IEEE Trans. on CAD, </journal> <volume> vol. 7, </volume> <editor> n. </editor> <volume> 4, </volume> <pages> pp. 501-519, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: A more efficient and accurate approach to sensitivity computation is the method of direct or adjoint techniques. Sensitivity analysis (except possibly the adjoint transient sensitivity analysis) is supported in standard circuit simulators such as SPICE3 [20], SPICE2 <ref> [24] </ref> and TISPICE [25]. The direct method simultaneously computes sensitivities of all the circuit variables with respect to a given parameter. In SPICE3, the additional CPU time required for each parameter is about 8% for transient sensitivity, 4% for AC sensitivity and 1% for DC sensitivity [21].
Reference: [25] <author> D. E. Hocevar and P. Yang, </author> <title> "Practical Issues for Implementing Transient Sensitivity Computation", </title> <booktitle> in Proc. IEEE ICCAD, </booktitle> <pages> pp. 1-3, </pages> <year> 1984. </year>
Reference-contexts: A more efficient and accurate approach to sensitivity computation is the method of direct or adjoint techniques. Sensitivity analysis (except possibly the adjoint transient sensitivity analysis) is supported in standard circuit simulators such as SPICE3 [20], SPICE2 [24] and TISPICE <ref> [25] </ref>. The direct method simultaneously computes sensitivities of all the circuit variables with respect to a given parameter. In SPICE3, the additional CPU time required for each parameter is about 8% for transient sensitivity, 4% for AC sensitivity and 1% for DC sensitivity [21].
Reference: [26] <author> S. W. Director and R. A. Rohrer, </author> <title> "The generalized adjoint network and network sensitivities", </title> <journal> IEEE Trans. on Circuit Theory, </journal> <volume> vol. 16, </volume> <pages> pp. 318-323, </pages> <month> Aug </month> <year> 1969. </year>
Reference-contexts: In SPICE3, the additional CPU time required for each parameter is about 8% for transient sensitivity, 4% for AC sensitivity and 1% for DC sensitivity [21]. When the number of parameters is large, the direct method of sensitivity computation can be expensive. The adjoint technique <ref> [26] </ref> becomes more efficient in that case. In the adjoint method, all the sensitivities of one circuit variable are computed at a time, with respect to all the parameters of interest.
Reference: [27] <author> E. Felt, E. Charbon, E. Malavasi and A. Sangiovanni-Vincentelli, </author> <title> "An Efficient Methodology for Symbolic Compaction of Analog IC's with Multiple Symmetry Constraints", </title> <booktitle> in Proc. European Design Automation Conference, </booktitle> <pages> pp. 148-153, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: When the layout algorithm to be used is known, it is possible to estimate lower and upper limits for coupling capacitances as well. Algorithms for estimating such limits have been described for all phases of automated constraint-driven layout <ref> [15, 17, 18, 27] </ref>. When such limits are estimated for a given circuit, they can be used to generate bounding constraints on the par-asitics for constraint-driven layout. <p> In fact, under the following conditions the analog compaction problem is proved to be unimodular, i.e. the optimum solution contains only integer coordinates. The following theorem and its proof are due to Eric Felt and were first reported in <ref> [27] </ref>. Theorem If the nodes of each symmetric pair are also constrained by design-rule minimum spacing requirements, and all design-rule minimum spacing requirements are integers, and the leftmost node is located at an integer coordinate, then the optimum solution to the LP problem 80 contains only integer coordinates.
Reference: [28] <author> H. Y. Koh, C. H. Sequin and P. R. Gray, </author> <title> "Automatic Layout Generation for CMOS Operational Amplifiers", </title> <booktitle> in Proc. IEEE ICCAD, </booktitle> <pages> pp. 548-551, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: A postrouting step is used to shield the crossovers between the sensitive nodes and the large-swing nodes. This program is able to design layouts whose quality is comparable to manual designs. However, since library cells are used for opamps, the program is hardly technology independent. Opasyn <ref> [28] </ref> is an opamp generator. It uses parameterized leaf cell generators for elemental blocks, such as single MOS transistors, device pairs, and capacitors. A data base provides a library of circuit topologies.
Reference: [29] <author> C. D. Kimble, A. E. Dunlop, G. F. Gross, V. L. Hein, M. Y. Luong, K. J. Stern and E. J. Swanson, </author> <title> "Autorouted Analog VLSI", </title> <booktitle> in Proc. IEEE Custom Integrated Circuits Conference, </booktitle> <pages> pp. 72-78, </pages> <year> 1985. </year>
Reference-contexts: Finally, in the fourth class there are performance-driven tools, where some of the high-level circuit performance specifications are taken into account in the layout implementation. 3.2.1 Systems based on net classification In <ref> [29] </ref> a standard-cell strategy was described, where coupling between zero-swing-sensitive nets and large-swing-insensitive nets is avoided by allocating such nets to different channels. This is achieved with a simple, though effective, strategy. <p> Topological constraints, i.e. symmetries and matching. 2. Parasitics associated with devices and interconnections. Several approaches to automate analog layout have been reported in the past. In most of them typical methodologies derived from the digital world have been used. In <ref> [29] </ref>, coupling 25 between mutually sensitive nets was reduced by means of a standard-cell placement strategy. In [32] a slicing structure min-cut algorithm was used to reduce the CPU time needed for the placement phase of analog IC's. <p> As described in Chapter 3, specific tools for the synthesis of analog layout have been developed and integrated in most of the existing frameworks for the synthesis of mixed systems. In particular, approaches based on channel routing have been described in <ref> [29] </ref> [50] [51] and [52]. With channel routing, during the global routing phase critically coupled nets can be forced to be routed in different channels. Critical cross-coupling capacitances are avoided, but other issues such as capacitance toward substrate and stray resistances are not efficiently dealt with.
Reference: [30] <author> S. Piguet, F. Rahali, M. Kayal, E. Zysman and M. Declercq, </author> <title> "A new Routing Method for Full Custom Analog IC's", </title> <booktitle> in Proc. IEEE Custom Integrated Circuits Conference, </booktitle> <pages> pp. 2771-2774, </pages> <month> May </month> <year> 1990. </year> <month> 93 </month>
Reference-contexts: For nets with restrictions on layer switch (such as supply nets or nets which are very sensitive to stray resistances), the algorithm also attempts single-layer routing. This is achieved by attempting to avoid crossovers with other nets. In the methodology described in <ref> [30] </ref>, routing is performed in two phases: (a) symbolic routing, and (b) detailed routing. During symbolic routing, the relative positions of wires are determined. During the detailed routing, the actual positions are determined based on technology information. Nets are classified in various categories, based on their sensitivity, noisiness, etc. <p> With channel routing, during the global routing phase critically coupled nets can be forced to be routed in different channels. Critical cross-coupling capacitances are avoided, but other issues such as capacitance toward substrate and stray resistances are not efficiently dealt with. An extension is described in <ref> [30] </ref>, where the symbolic routing phase accounts for all parasitics. However, the important issue of symmetric routing for differential circuits is not discussed. Also, minimization of stray capacitances and resistances is pursued without referring to numerical values corresponding to high-level performances.
Reference: [31] <author> I. Harada, H. Kitazawa and T. Kaneko, </author> <title> "A Routing System for Mixed A/D Standard Cell LSI's", </title> <booktitle> in Proc. IEEE ICCAD, </booktitle> <pages> pp. 378-381, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: To match parasitics, stubs can be used. However, the absolute value of routing parasitics cannot be held under a specified bound, since constraints are handled at the symbolic level. Crosstalk noise between signal lines is minimized in the channel routing approach described in <ref> [31] </ref>. Four groups are considered for signal net classification: (a) high impedance analog, (b) low-impedance analog, (c) digital control signals affecting the analog cells, and (d) other digital nets. Net priorities are assigned on the ground of the class to which they belong.
Reference: [32] <editor> J. Rijmenants et al., "ILAC: </editor> <title> An Automated Layout Tool for Analog CMOS Circuits", </title> <journal> IEEE Journal of Solid State Circuits, </journal> <volume> vol. 24, </volume> <editor> n. </editor> <volume> 2, </volume> <pages> pp. 417-425, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: Digital and analog nets are routed in different portions of the circuit. Voltage drops due to stray resistances are avoided by using double-width lines. Matching of parasitics is not handled. 20 3.2.2 Systems based on cost functions Ilac <ref> [32] </ref> is a layout tool which automatically generates the layout of analog CMOS leaf cells from netlist information and constraints on cell bounds and I/O locations. <p> Several approaches to automate analog layout have been reported in the past. In most of them typical methodologies derived from the digital world have been used. In [29], coupling 25 between mutually sensitive nets was reduced by means of a standard-cell placement strategy. In <ref> [32] </ref> a slicing structure min-cut algorithm was used to reduce the CPU time needed for the placement phase of analog IC's. Typically these approaches have not achieved the same layout density and flexibility obtained by expert designers.
Reference: [33] <author> J. Tronteli et al., </author> <title> "Expert System for automated mixed analog/digital layout compilation", </title> <booktitle> in Proc. IEEE Custom Integrated Circuits Conference, </booktitle> <pages> pp. 165-167, </pages> <year> 1987. </year>
Reference-contexts: Also, the minimization of a cost function with no reference to performance specifications provides results affected by uncontrolled variations, and does not guarantee the satisfaction of the performance constraints. 3.2.3 Systems based on a knowledge base In <ref> [33] </ref> a methodology for automatic layout design is presented, where the analog circuit is partitioned into functional blocks consisting of library cells. The system allows the user to provide an incomplete specification of the basic cells.
Reference: [34] <author> M. Kayal, S. Piguet, M. Declercq and B. Hochet, "SALIM: </author> <title> A Layout Generator Tool for Analog ICs", </title> <booktitle> in Proc. IEEE Custom Integrated Circuits Conference, </booktitle> <pages> pp. 751-754, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: The set of descriptors is quite large, and includes first- and second-order parameters. Macrocell layout is carried out after the cell selection. Placement is performed interactively, while I/O peripherals are added automatically. The autorouter is able to control the maximum value of interconnect stray resistances and capacitances. Salim <ref> [34] </ref> is a layout generator using a combination of algorithmic and rule-based approaches. The layout generation is a hierarchical bottom-up process. First a number of elemental functions called structures, such as differential pairs, current mirrors, etc., are recognized. <p> In [32] a slicing structure min-cut algorithm was used to reduce the CPU time needed for the placement phase of analog IC's. Typically these approaches have not achieved the same layout density and flexibility obtained by expert designers. Others <ref> [34] </ref> suggested a knowledge-based approach, or required the user to provide basic hints on the layout structure [40]. In [14], very effective analog-specific placement and routing tools accounting for topological constraints have been provided for full-custom layout. A routing methodology for the minimization of cross-coupling has been proposed.
Reference: [35] <author> D. J. Chen, J. C. Lee and B. J. Sheu, </author> <title> "SLAM: A Smart Analog Module Generator for Mixed Analog-Digital VLSI Design", </title> <booktitle> in Proc. IEEE International Conference on Computer Design, </booktitle> <pages> pp. 24-27, </pages> <year> 1989. </year>
Reference-contexts: Such shape functions can be used to optimize the aspect ratios of the cells. Placement is based on a force-directed algorithm, followed by global routing and detailed channel routing. Rules are used to handle specific analog constraints during placement and routing. 22 Slam <ref> [35] </ref> is an analog module generator proceeding through three steps: (a) circuit primitive recognition, (b) critical net analysis, (c) placement and routing. In the first step, basic circuit nodes and four critical analog circuit nodes are recognized: high-impedance nodes, diode-connected nodes, source-coupled nodes, and current-mirror nodes.
Reference: [36] <author> M. Mogaki, N. Kato, Y. Chikami, N. Yamada and Y. Kobayashi, "LADIES: </author> <title> An Automatic Layout system for Analog LSI's", </title> <booktitle> in Proc. IEEE ICCAD, </booktitle> <pages> pp. 450-453, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: This classification imposes constraints on lengths of the nets, and separation between nets during the layout phase. During placement and routing they are taken into account, together with matching constraints, also derived from topology information. Ladies <ref> [36] </ref> is an automatic layout system for analog LSIs. An initial layout is obtained with a placement based on a clustering algorithm. During clustering, virtual nets with positive weights are created between elements to be placed together and with negative weights created between elements to be placed apart.
Reference: [37] <author> M. Itoh and H. Mori, </author> <title> "A Layout Generating and Editing System for Analog LSIs", </title> <booktitle> in Proc. IEEE Int. Symposium on Circuits and Systems, </booktitle> <pages> pp. 843-846, </pages> <year> 1990. </year>
Reference-contexts: This makes it impossible to encompass all the constraints which may be involved in a complex analog circuit. The following are two particular cases of rule-based layout systems, where the physical placement of components is derived from their relative positions in the schematic. Ale <ref> [37] </ref> is a layout generator and editing system for analog LSIs. The generator builds the layout preserving the relative positions of device cells and wires. Hence physical constraints in the circuit schematic are reflected in the layout. A two-layer maze router is used for interconnects.
Reference: [38] <author> Y. Shiraishi, M. Kimura, K. Kobayashi, T. Hino, M. Seriuchi and M. Kusaoke, </author> <title> "A High-Packing Density Module Generator for Bipolar Analog LSIs", </title> <booktitle> in Proc. IEEE ICCAD, </booktitle> <pages> pp. 194-197, </pages> <year> 1990. </year>
Reference-contexts: Hence physical constraints in the circuit schematic are reflected in the layout. A two-layer maze router is used for interconnects. The layout editor provides interactive tools such as a merging tool and a cell-shape modification tool. A layout generator for bipolar analog LSIs has been reported in <ref> [38] </ref>. A placement 23 algorithm determines all cell positions based on the relative locations of devices in the schematic. A device position graph is defined, which has information about the relative positions of devices in the schematic.
Reference: [39] <author> S. K. Hong and P. E. Allen, </author> <title> "Performance driven analog layout compiler", </title> <booktitle> in Proc. IEEE Int. Symposium on Circuits and Systems, </booktitle> <pages> pp. 835-838, </pages> <year> 1990. </year>
Reference-contexts: Routing is carried out by a maze router working on a fine grid. However, control over parasitics is not handled adequately. 3.2.4 Performance-driven approaches Performance-driven approaches were first reported in <ref> [39] </ref> and [22]. Both works rely on sensitivity analysis to model the dependence of performance degradations on para-sitics. In [39], The layout interconnect parasitics are modeled as equivalent RC networks. The sensitivity of the performance with respect to layout interconnect parasitics is analyzed. <p> Routing is carried out by a maze router working on a fine grid. However, control over parasitics is not handled adequately. 3.2.4 Performance-driven approaches Performance-driven approaches were first reported in <ref> [39] </ref> and [22]. Both works rely on sensitivity analysis to model the dependence of performance degradations on para-sitics. In [39], The layout interconnect parasitics are modeled as equivalent RC networks. The sensitivity of the performance with respect to layout interconnect parasitics is analyzed. Placement partitions are then based on circuit structure, sensitivity analysis, and boundary conditions.
Reference: [40] <author> S. W. Mehranfar, </author> <title> "A Technology-Independent Approach to Custom Analog Cell Generation", </title> <journal> IEEE Journal of Solid State Circuits, </journal> <volume> vol. 26, </volume> <editor> n. </editor> <volume> 3, </volume> <pages> pp. 386-393, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: Typically these approaches have not achieved the same layout density and flexibility obtained by expert designers. Others [34] suggested a knowledge-based approach, or required the user to provide basic hints on the layout structure <ref> [40] </ref>. In [14], very effective analog-specific placement and routing tools accounting for topological constraints have been provided for full-custom layout. A routing methodology for the minimization of cross-coupling has been proposed. However, no method is given to define the actual bounds for the parasitics introduced by the layout. <p> However, crosstalk and parasitics are controlled by a rigid net classification based on preordered crosstalk criticality. With this approach, no provision is made for a constraint-driven synthesis approach. Net scheduling is not addressed, and the solution of congestion problems relies on an aggressive rip-up and re-route scheme. Stat <ref> [40] </ref> uses a minimum-detour maze routing algorithm driven by a cost function weighting resistivity, vias and net length, but control over cross-coupling capacitances mostly relies on the user's expertise. Area routing is computationally less efficient than channel routing.
Reference: [41] <author> A. Casotto, F. Romeo and A. Sangiovanni-Vincentelli, </author> <title> "A Parallel Simulated Annealing Algorithm for the Placement of Macro-Cells", </title> <journal> IEEE Trans. on CAD, </journal> <volume> vol. </volume> <editor> CAD-6, n. </editor> <volume> 5, </volume> <pages> pp. 838-847, </pages> <month> September </month> <year> 1987. </year> <month> 94 </month>
Reference-contexts: In addition, at the University of California at Berkeley we have considerable experience in deriving and implementing Simulated Annealing versions for a variety of problems <ref> [41, 42, 43, 44] </ref>. The algorithm has been used before for analog layout [14], however our approach is significantly different in the way the constraints and cost functions are derived from high-level specifications and in the accurate estimation of layout dependent performances. Our placement approach is illustrated in Figure 4.1. <p> T is a parameter called temperature, decreasing from a starting value T 0 to a final T f with an assigned monotonic cooling schedule. 27 A version of Simulated Annealing for the placement of digital macrocells has been implemented in a tool called puppy <ref> [41] </ref>. Its cost function has been modified to include parameters corresponding to analog requirements on parasitic control as well as topology constraints, such as symmetries and device matching. What follows is a description of the modified cost function.
Reference: [42] <author> D. F. Wong, H. W. Leong and C. L. Liu, </author> <title> "PLA Folding by Simulated Annealing", </title> <journal> IEEE Journal of Solid State Circuits, </journal> <volume> vol. </volume> <editor> sc-22, n. </editor> <volume> 2, </volume> <pages> pp. 208-215, </pages> <month> April </month> <year> 1987. </year>
Reference-contexts: In addition, at the University of California at Berkeley we have considerable experience in deriving and implementing Simulated Annealing versions for a variety of problems <ref> [41, 42, 43, 44] </ref>. The algorithm has been used before for analog layout [14], however our approach is significantly different in the way the constraints and cost functions are derived from high-level specifications and in the accurate estimation of layout dependent performances. Our placement approach is illustrated in Figure 4.1.
Reference: [43] <author> C. Sechen and A. Sangiovanni-Vincentelli, "Chip-Planning, </author> <title> Placement and Global Routing of Macro/Custom Cell IC's using Simulated Annealing", </title> <booktitle> in Proc. Design Automation Conference, </booktitle> <pages> pp. 73-80, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: In addition, at the University of California at Berkeley we have considerable experience in deriving and implementing Simulated Annealing versions for a variety of problems <ref> [41, 42, 43, 44] </ref>. The algorithm has been used before for analog layout [14], however our approach is significantly different in the way the constraints and cost functions are derived from high-level specifications and in the accurate estimation of layout dependent performances. Our placement approach is illustrated in Figure 4.1. <p> Space for routing is estimated with the halo mechanism <ref> [43] </ref> * f ov (s) is the total overlapping area between cells. * f sy (s) is the distance between placement s and a symmetric configuration in the metric of the state space, given by: f sy (s) = symmetric modules (d i + W i ) (4.2) Item d (s)
Reference: [44] <author> F. Romeo and A. Sangiovanni-Vincentelli, </author> <title> "A Theoretical Framework for Simulated Annealing", </title> <journal> Algorithmica, </journal> <month> March </month> <year> 1991. </year>
Reference-contexts: In addition, at the University of California at Berkeley we have considerable experience in deriving and implementing Simulated Annealing versions for a variety of problems <ref> [41, 42, 43, 44] </ref>. The algorithm has been used before for analog layout [14], however our approach is significantly different in the way the constraints and cost functions are derived from high-level specifications and in the accurate estimation of layout dependent performances. Our placement approach is illustrated in Figure 4.1.
Reference: [45] <author> E. Malavasi, E. Charbon, G. Jusuf, R. Totaro and A. Sangiovanni-Vincentelli, </author> <title> "Virtual Symmetry Axes for the Layout of Analog IC's", </title> <booktitle> in Proc. 2 nd ICVC, Seoul, Korea, </booktitle> <pages> pp. 195-198, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: The objective is not only area and wiring minimization, but 26 especially the elimination of parasitic constraint violations. Multiple symmetry axes can be managed with the algorithm of Virtual Symmetry Axes <ref> [45] </ref>, that dynamically defines axis positions. Thus a more compact layout, less routing congestion and better matching between modules is achieved. <p> This approach can become computationally expensive when a large number of symmetry constraints are simultaneously present. Furthermore, false overconstraint frequently arise because of the order in which the symmetric objects are processed, especially when multiple symmetry axes are present. The heuristic of Virtual Symmetry Axes was proposed in <ref> [45] </ref> to overcome some of these limitations. In [71] an LP algorithm was adopted. Objects not directly interacting with symmetric items in the layout are collapsed, thus generating "super-constraints" which are solved using a linear programming (LP) approach.
Reference: [46] <author> E. H. L. Aarts and P. J. M. van Laarhoven, </author> <title> Simulated Annealing: Theory and Applications, </title> <address> D. </address> <publisher> Reidel Publishing, </publisher> <year> 1987. </year>
Reference-contexts: Thus a more compact layout, less routing congestion and better matching between modules is achieved. Finally a verification phase, based on accurate parasitics extraction, checks that all performances be within the required specifications. 4.2 Simulated Annealing for Analog Placement Simulated Annealing <ref> [46, 47] </ref>, is a non-deterministic iterative optimization algorithm. With a sufficiently large number of iterations it converges to a configuration with a low cost function value by attempting random configuration perturbations, called moves.
Reference: [47] <author> D. F. Wong, H. W. Leong and C. L. Liu, </author> <title> Simulated Annealing for VLSI Design, </title> <publisher> Kluwer Academic, </publisher> <address> Boston, </address> <year> 1988. </year>
Reference-contexts: Thus a more compact layout, less routing congestion and better matching between modules is achieved. Finally a verification phase, based on accurate parasitics extraction, checks that all performances be within the required specifications. 4.2 Simulated Annealing for Analog Placement Simulated Annealing <ref> [46, 47] </ref>, is a non-deterministic iterative optimization algorithm. With a sufficiently large number of iterations it converges to a configuration with a low cost function value by attempting random configuration perturbations, called moves.
Reference: [48] <author> U. Choudhury and A. Sangiovanni-Vincentelli, </author> <title> "An Analytical-Model Generator for Interconnect Capacitances", </title> <booktitle> in Proc. IEEE Custom Integrated Circuits Conference, </booktitle> <pages> pp. 861-864, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: C c = C fr1 (w 2 ) + C fr2 (w 1 ) + C cc w 1 w 2 : These components can be determined for each routing layer with numerical simulations <ref> [48] </ref>. The estimation of parasitics also takes into account the junction capacitances of interconnected transistors. This component is relatively small if compared with the capacitance due to interconnect lines. However in case of short interconnects lines, it becomes dominant, hindering further parasitic reduction by reducing the size of the wire. <p> The effective values of wire parasitics are evaluated by a parameter extractor. Line-to-ground capacitances are computed with the efficient and accurate Meijs-Fokkema model [66]. Line-to-line coupling capacitances are computed with approximate analytic models based on numerical simulations and automatically generated by capmod <ref> [48] </ref>. 5.10 Results 5.10.1 1st Folded cascode opamp The schematic of a folded cascode opamp, designed in MOSIS 2-m n-well CMOS, is shown in Fig. 5.8. Fig. 5.9 shows gain amplitude and Fig. 5.10 shows its phase, computed by simulation on the opamp assuming no parasitics were present.
Reference: [49] <author> E. Malavasi, U. Choudhury and A. Sangiovanni-Vincentelli, </author> <title> "A Routing Methodology for Analog Integrated Circuits", </title> <booktitle> in Proc. IEEE ICCAD, </booktitle> <pages> pp. 202-205, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Then the performance constraints were enforced (see the estimation criteria outlined in section 4.3, puppy predicted a violation in two of the three performance constraints in the first layout and none in the second. The routing was performed on both layouts using the same constraints-driven methodology as puppy <ref> [49] </ref>. All parasitics were extracted from the routed layouts and a check on the performance degradation confirmed the prediction (see Table 4.1). The placement procedures required a CPU time of 471 and 1203 seconds respectively, on a DECsystem 3100. The results are consistent with an analysis of the layouts. <p> The specifications on UBW and PM were not met, mainly because of several uncontrolled cross-coupling capacitances. With a set of weights generated with the performance-driven approach described in <ref> [49] </ref> the layout shown 60 Folded Cascode Op-Amp UBW (MHz) PM ( ffi ) DC gain (dB) No parasitics (nominal) 6.25 76 63.5 road with no constraints 5.02 66 64.5 road with constraints 6.07 75 63.8 Table 5.1: in Fig. 5.13 was obtained.
Reference: [50] <author> J.-C. Jeen, R. S. Gyurcsik and W.-T. Liu, </author> <title> "A Two-Layer Channel Routing Algorithm for Mixed Analog and Digital Signal Nets", </title> <booktitle> in Proc. IEEE Custom Integrated Circuits Conference, </booktitle> <pages> pp. 1151-1154, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: As described in Chapter 3, specific tools for the synthesis of analog layout have been developed and integrated in most of the existing frameworks for the synthesis of mixed systems. In particular, approaches based on channel routing have been described in [29] <ref> [50] </ref> [51] and [52]. With channel routing, during the global routing phase critically coupled nets can be forced to be routed in different channels. Critical cross-coupling capacitances are avoided, but other issues such as capacitance toward substrate and stray resistances are not efficiently dealt with.
Reference: [51] <author> Z.-M. Lin, "DAVE: </author> <title> an Automatic Mixed Analog/Digital IC Layout Compiler", </title> <booktitle> in Proc. IEEE Custom Integrated Circuits Conference, </booktitle> <pages> pp. 541-544, </pages> <year> 1991. </year>
Reference-contexts: As described in Chapter 3, specific tools for the synthesis of analog layout have been developed and integrated in most of the existing frameworks for the synthesis of mixed systems. In particular, approaches based on channel routing have been described in [29] [50] <ref> [51] </ref> and [52]. With channel routing, during the global routing phase critically coupled nets can be forced to be routed in different channels. Critical cross-coupling capacitances are avoided, but other issues such as capacitance toward substrate and stray resistances are not efficiently dealt with.
Reference: [52] <author> I. Harada, H. Kitazawa and T. Kaneko, </author> <title> "A Layout System for Mixed A/D Standard Cell LSI's", </title> <journal> IEICE Trans. on Electronics, </journal> <volume> vol. </volume> <editor> E75-C, n. </editor> <volume> 3, </volume> <pages> pp. 322-332, </pages> <month> March </month> <year> 1992. </year> <month> 95 </month>
Reference-contexts: As described in Chapter 3, specific tools for the synthesis of analog layout have been developed and integrated in most of the existing frameworks for the synthesis of mixed systems. In particular, approaches based on channel routing have been described in [29] [50] [51] and <ref> [52] </ref>. With channel routing, during the global routing phase critically coupled nets can be forced to be routed in different channels. Critical cross-coupling capacitances are avoided, but other issues such as capacitance toward substrate and stray resistances are not efficiently dealt with.
Reference: [53] <author> S. Mitra, K. Sudip, K. Nag, R. A. Rutenbar and L. R. Carley, </author> <title> "System-level Routing of Mixed-Signal ASICs in WREN", </title> <booktitle> in Proc. IEEE ICCAD, </booktitle> <pages> pp. 394-399, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: However, the important issue of symmetric routing for differential circuits is not discussed. Also, minimization of stray capacitances and resistances is pursued without referring to numerical values corresponding to high-level performances. Only recently performance-driven channel routing approaches have appeared <ref> [53] </ref> addressing this issue. While channel routing can be an effective method for a class of analog circuits, it 35 may not be applicable to layouts where the routing regions are highly irregular and cannot be arranged in a slicing structure.
Reference: [54] <author> T. Ohtsuki, </author> <title> "Maze-Running and Line-Search Algorithms", in Layout Design and Verification, </title> <journal> ch. </journal> <volume> 3, </volume> <pages> pp. 99-131. </pages> <editor> T. Ohtsuki Ed., </editor> <publisher> North Holland, </publisher> <year> 1986. </year>
Reference-contexts: While channel routing can be an effective method for a class of analog circuits, it 35 may not be applicable to layouts where the routing regions are highly irregular and cannot be arranged in a slicing structure. Hence area routing <ref> [54] </ref> is an essential component of any analog layout system. With this approach the area available for interconnections is considered with no geometric restrictions. A graph, called the routing graph, is defined over the entire routing space. In this graph, nodes define a partition on the wiring space.
Reference: [55] <author> C. Lee, </author> <title> "An algorithm for path connections and applications", </title> <journal> IRE Trans. Electron. Computer, </journal> <volume> vol. EC-10, </volume> <pages> pp. 346-365, </pages> <month> September </month> <year> 1961. </year>
Reference-contexts: In Section 5.10 examples are reported on industrial circuits, showing the suitability of the area routing approach and the effectiveness of the described algorithms for high-quality layouts. 5.2 Maze Routing with the A* algorithm Maze routing is an area routing approach based on the Lee-Moore algorithm <ref> [55] </ref>. In its basic form, a connection between two terminals s and t, called respectively source 37 and target, is found using a two-phase procedure.
Reference: [56] <author> N. Nilsson, </author> <booktitle> Problem-Solving Methods in Artificial Intelligence, </booktitle> <publisher> McGraw-Hill, </publisher> <year> 1971. </year>
Reference-contexts: routing is admissible <ref> [56] </ref>[57], that is it always finds the optimum path if a path exists, it is computationally expensive. The time required is O (n 2 ) where n is the path length. An analog router based on the basic Lee-Moore algorithm was described in [58]. The A* algorithm [56] is a general algorithm for shortest path calculations in graphs. It can be used to improve the average running time of the Lee-Moore algorithm [59][60]. It is based on the following idea. Let s and t be the terminals to be connected. <p> Backtrace will be carried out on the nodes of this set only. In <ref> [56] </ref> proof is given that A* is admissible whenever the h 0 (x) estimate is optimistic, that is when h 0 (x) h (x); 8x (5.2) The running-time upper bound cost of the A* algorithm is O (n 2 ), where n is path length, as for the Lee-Moore algorithm, but
Reference: [57] <author> J. Pearl, </author> <title> Heuristics: Intelligent Search Strategies for Computer Problem Solving, </title> <publisher> Ad-dison Wesley, </publisher> <address> Reading, MA, </address> <year> 1984. </year>
Reference-contexts: For small or medium-size circuits it is remarkably fast, as will be pointed out in Section 5.10. Performance depends on graph structure and on the accuracy of the estimate h 0 (x). Details on the complexity analysis of A* can be found in <ref> [57] </ref>.
Reference: [58] <author> E. Malavasi, M. Chilanti and R. Guerrieri, </author> <title> "A General Router for Analog Layout", </title> <booktitle> in Proc. COMPEURO '89, Hamburg, </booktitle> <pages> pp. 549-551, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: Although maze routing is admissible [56][57], that is it always finds the optimum path if a path exists, it is computationally expensive. The time required is O (n 2 ) where n is the path length. An analog router based on the basic Lee-Moore algorithm was described in <ref> [58] </ref>. The A* algorithm [56] is a general algorithm for shortest path calculations in graphs. It can be used to improve the average running time of the Lee-Moore algorithm [59][60]. It is based on the following idea. Let s and t be the terminals to be connected. <p> The relatively good time performance of road shows how the A* algorithm can achieve remarkable performances even with circuits of medium complexity. The same example routed with the basic Moore-Lee algorithm <ref> [58] </ref> required more than 10 hours of CPU on the same computer. 5.11 Conclusions An area router for analog design has been presented in this chapter. A cost function and a scheduling procedure, fully accounting for parasitic control, have been described in detail.
Reference: [59] <author> F. Rubin, </author> <title> "The Lee Path Connection Algorithm", </title> <journal> IEEE Trans. on Computers, </journal> <volume> vol. </volume> <editor> C-23, n. </editor> <volume> 9, </volume> <pages> pp. 907-914, </pages> <month> September </month> <year> 1974. </year>
Reference: [60] <author> J. Soukup, </author> <title> "Fast Maze Router", </title> <booktitle> in Proc. Design Automation Conference, </booktitle> <pages> pp. 100-102, </pages> <month> June </month> <year> 1978. </year>
Reference: [61] <author> M. R. Garey and D. S. Johnson, </author> <title> "The Rectilinear Steiner Tree Problem is NP-complete", </title> <journal> SIAM Journal of Applied Mathematics, </journal> <volume> vol. 32, No. 4, </volume> <pages> pp. 826-834, </pages> <year> 1977. </year>
Reference-contexts: The A* algorithm finds the best route for a two-terminal net. However, many nets have more than two terminals. In this case, the goal would be to find the minimum cost interconnection of the terminals. This problem is known as the Rectilinear Steiner Tree (RST) problem and is NP-complete <ref> [61] </ref>. In road, the A* algorithm has been extended to multi-terminal nets, using a version of Prim's algorithm [62] for Minimum Spanning Trees (MST).
Reference: [62] <author> R. C. Prim, </author> <title> "Shortest Connection Networks and Some Generalizations", </title> <journal> Bell System Tech. Journal, </journal> <volume> vol. 36, </volume> <pages> pp. 1389-1401, </pages> <year> 1957. </year>
Reference-contexts: In this case, the goal would be to find the minimum cost interconnection of the terminals. This problem is known as the Rectilinear Steiner Tree (RST) problem and is NP-complete [61]. In road, the A* algorithm has been extended to multi-terminal nets, using a version of Prim's algorithm <ref> [62] </ref> for Minimum Spanning Trees (MST). In [63] it is shown that the cost of a rectilinear MST is close to that of a RST linking the same points (in the worst case it is 1:5 times as much).
Reference: [63] <author> F. K. Hwang, </author> <title> "On Steiner Minimal Trees with Rectilinear Distance", </title> <journal> SIAM Journal of Applied Mathematics, </journal> <volume> vol. 30, </volume> <pages> pp. 37-58, </pages> <year> 1976. </year>
Reference-contexts: This problem is known as the Rectilinear Steiner Tree (RST) problem and is NP-complete [61]. In road, the A* algorithm has been extended to multi-terminal nets, using a version of Prim's algorithm [62] for Minimum Spanning Trees (MST). In <ref> [63] </ref> it is shown that the cost of a rectilinear MST is close to that of a RST linking the same points (in the worst case it is 1:5 times as much). A good RST could be obtained in linear time from a rectilinear MST as described in [64].
Reference: [64] <author> J. Ho, G. Vijayan and C. K. Wong, </author> <title> "Constructing the Optimal Rectilinear Steiner Tree Derivable from a Minimum Spanning Tree", </title> <booktitle> in Proc. IEEE ICCAD, </booktitle> <pages> pp. 6-9, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: In [63] it is shown that the cost of a rectilinear MST is close to that of a RST linking the same points (in the worst case it is 1:5 times as much). A good RST could be obtained in linear time from a rectilinear MST as described in <ref> [64] </ref>. Such a transformation would reduce the routing area, but it would alter the distribution of parasitics, which were optimized in the path built with Prim's algorithm and the cost function described in Section 5.3.
Reference: [65] <author> H. Shin and A. Sangiovanni-Vincentelli, </author> <title> "A Detailed Router Based on Incremental Routing Modifications: </title> <journal> Mighty", IEEE Trans. on CAD, </journal> <volume> vol. </volume> <editor> CAD-6, n. </editor> <volume> 6, </volume> <pages> pp. 942-955, </pages> <month> November </month> <year> 1987. </year> <month> 96 </month>
Reference-contexts: Wire segments can be dynamically shifted from one grid position to another and grid rows/columns can be modified during routing to make room for new wire segments. In this way, dynamic wire modifications are made available, achieving a result similar to the weak modifications introduced by Mighty <ref> [65] </ref>. Grid refinement by means of dynamic allocation allows everywhere the needed level of detail, without increasing the grid size by the same amount. By splitting a row (column) of the grid, the local level of detail is doubled.
Reference: [66] <author> N. v.d.Meijs and J.T.Fokkema, </author> <title> "VLSI circuit reconstruction from mask topology", </title> <journal> Integration, </journal> <volume> vol. 2, </volume> <pages> pp. 85-119, </pages> <year> 1984. </year>
Reference-contexts: SPLIT n1 n2 ... nk 56 invokes the net-splitter utility for nets n1, n2 ... nk. The effective values of wire parasitics are evaluated by a parameter extractor. Line-to-ground capacitances are computed with the efficient and accurate Meijs-Fokkema model <ref> [66] </ref>. Line-to-line coupling capacitances are computed with approximate analytic models based on numerical simulations and automatically generated by capmod [48]. 5.10 Results 5.10.1 1st Folded cascode opamp The schematic of a folded cascode opamp, designed in MOSIS 2-m n-well CMOS, is shown in Fig. 5.8.
Reference: [67] <author> J. Reed, A. Sangiovanni-Vincentelli and M. Santomauro, </author> <title> "A new symbolic channel router: </title> <journal> YACR2", IEEE Trans. on CAD, </journal> <volume> vol. CAD-4, </volume> <pages> pp. 208-219, </pages> <year> 1985. </year>
Reference-contexts: The transconductance opamp shown in Fig. 5.15 was automatically placed with the constraint-driven placement tool puppy [15]. This placement is not suitable for channel routing. Experiments with YACR <ref> [67] </ref> yielded an increase of area and achieved more sparse routing. Hand-routing, on the contrary, can be performed without requiring additional area. However, wire congestion in the upper region makes it a hard task even for an experienced designer when several simultaneous parasitic constraints need to be taken into account.
Reference: [68] <author> J. Burns, A. Casotto, M. Igusa, F. Marron, F. Romeo, A. Sangiovanni-Vincentelli, C. Sechen, H. Shin, G. Srinath and H. Yaghutiel, "MOSAICO: </author> <title> An integrated Macro-cell Layout System", </title> <booktitle> in VLSI '87, </booktitle> <address> Vancouver, Canada, </address> <month> Aug </month> <year> 1987. </year>
Reference-contexts: Due to the presence of a complex cost 65 function the CPU time required by routing can become an issue. The examples shown required routing times between 6 and 30 CPU minutes on a DECstation-3100, depending on the constraints specified. It was compared to the digital router mosaico <ref> [68] </ref> with the channel router yacr on the same examples.
Reference: [69] <author> T. Lengauer, </author> <title> Combinatorial Algorithms for Integrated Circuit Layout, </title> <booktitle> Applicable Theory in Computer Science. </booktitle> <publisher> John Wiley & Sons, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: A similar improvement is seen during routing, since with compaction the router can slightly overcrowd certain areas of the layout and rely on the compactor to fix the resulting design rule violations. The symbolic layout compaction problem, even in the simplified form of topological compaction, is NP-hard <ref> [69] </ref>. However, a large number of heuristics have been developed providing good quality layouts. In particular, the use of mono-dimensional compaction phases alternately performed in orthogonal directions is one of the most popular approaches. <p> Figure 6.4 illustrates the result of feeding a symmetrically placed circuit to a standard digital-circuit compactor. The symmetries are destroyed and as a result the offset performance is degraded. 6.3 Constraint Graph 6.3.1 Algorithm Mono-dimensional compaction can be solved efficiently with the constraint graph longest path algorithm [74] <ref> [69, Ch. 10] </ref>. The pattern of component connectivity and minimum separations required by the technology is described as a weighted, directed graph. Two graphs are actually used, one for the vertical and one for the horizontal direction. Each component is represented in the graph by a node.
Reference: [70] <author> J. R. Burns and A. R. </author> <title> Newton, "SPARCS: A New Constraint-Based IC Symbolic Layout Spacer", </title> <booktitle> in Proc. IEEE Custom Integrated Circuits Conference, </booktitle> <pages> pp. 534-539, </pages> <year> 1986. </year>
Reference-contexts: However, not all analog circuit constraints can be expressed in a form suitable of solution with a constraint-graph algorithm. Symmetry is an example of a constraint requiring a different strategy. A few approaches to symmetry preservation have been described in the past. In <ref> [70] </ref>, a perturbative method is produced on a graph initially solved without constraints, so as to gradually enforce all symmetries. This approach can become computationally expensive when a large number of symmetry constraints are simultaneously present.
Reference: [71] <author> R. Okuda, T. Sato, H. Onodera and K. Tamaru, </author> <title> "An Efficient Algorithm for Layout Compaction Problem with Symmetry Constraints", </title> <booktitle> in Proc. IEEE ICCAD, </booktitle> <pages> pp. 148-151, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: Furthermore, false overconstraint frequently arise because of the order in which the symmetric objects are processed, especially when multiple symmetry axes are present. The heuristic of Virtual Symmetry Axes was proposed in [45] to overcome some of these limitations. In <ref> [71] </ref> an LP algorithm was adopted. Objects not directly interacting with symmetric items in the layout are collapsed, thus generating "super-constraints" which are solved using a linear programming (LP) approach. <p> The use of the graph solution obtained in step 2 as the starting point for the LP solver in step 3 is the key to obtaining a significant speed-up in the solution of the LP, compared to previous approaches using pure LP <ref> [71] </ref>. In fact in most observed practical cases the configuration yielded by step 2 is close enough to the final solution to require the LP solver to carry out only a small number of steps.
Reference: [72] <author> W. Schiele, </author> <title> "Improved Compaction with Minimized Length of Wires", </title> <booktitle> in Proc. Design Automation Conference, </booktitle> <pages> pp. 390-395, </pages> <year> 1983. </year>
Reference-contexts: Heuristics <ref> [72] </ref> exist interrelating the two dimensions by incorporating wire balancing compaction al 71 gorithms and introducing jogs [73]. 6.2 Analog Constraints Under the constraint-driven methodology developed in Berkeley, high-level performance specifications are mapped onto low-level constraints which are made available to the compactor.
Reference: [73] <author> W. H. Crocker, R. Varadarajan and C. Y. Lo, </author> <title> "Compaction with Performance Optimization", </title> <booktitle> in Proc. IEEE Int. Symposium on Circuits and Systems, </booktitle> <pages> pp. 514-517, </pages> <year> 1987. </year>
Reference-contexts: Heuristics [72] exist interrelating the two dimensions by incorporating wire balancing compaction al 71 gorithms and introducing jogs <ref> [73] </ref>. 6.2 Analog Constraints Under the constraint-driven methodology developed in Berkeley, high-level performance specifications are mapped onto low-level constraints which are made available to the compactor.
Reference: [74] <author> A. Mlynsky and C.-H. Sung, </author> <title> "Layout Compaction", in Layout Design and Verification, </title> <journal> ch. </journal> <volume> 6, </volume> <pages> pp. 199-235. </pages> <editor> T.Ohtsuki Ed., </editor> <publisher> North Holland, </publisher> <year> 1986. </year>
Reference-contexts: Figure 6.4 illustrates the result of feeding a symmetrically placed circuit to a standard digital-circuit compactor. The symmetries are destroyed and as a result the offset performance is degraded. 6.3 Constraint Graph 6.3.1 Algorithm Mono-dimensional compaction can be solved efficiently with the constraint graph longest path algorithm <ref> [74] </ref> [69, Ch. 10]. The pattern of component connectivity and minimum separations required by the technology is described as a weighted, directed graph. Two graphs are actually used, one for the vertical and one for the horizontal direction. Each component is represented in the graph by a node.
Reference: [75] <author> J. L. Burns, </author> <title> "Techniques for IC Symbolic Layout and Compaction", </title> <note> Memorandum UCB/ERL M90/103, UCB, </note> <month> November </month> <year> 1990. </year>
Reference-contexts: K min 74 can be reduced to pairs of constraints of the type (6.1) or (6.2) respectively, by using the equivalent expressions: a:) x 2 x 1 K min and x 1 x 2 K min A simple plane sweep algorithm is generally used to generate the minimum spacing constraints <ref> [75] </ref>. The longest path in this graph provides the minimum width (height) achievable by any compaction. <p> While not required by the analog design methodology, optimizing on this secondary objective improves circuit performance by further reducing wire resistances and parasitic capacitances. One alternative approach <ref> [75] </ref> performs heuristic local wire length minimization, but no previous approach addresses the issue of global wire length minimization.
Reference: [76] <author> R. E. Tarjan, </author> <title> Data structures and network algorithms, </title> <booktitle> regional conference series in applied mathematics ; 44. </booktitle> <address> CBMS-NSF, </address> <year> 1983. </year> <month> 97 </month>
Reference-contexts: The longest path in this graph provides the minimum width (height) achievable by any compaction. Hence, a longest-path algorithm can be used to determine, in polynomial time, the optimum location of all components, or alternatively the existence of overconstraint loops <ref> [76] </ref>. 6.3.2 Coupling Constraints High-level performance specifications can be mapped efficiently onto a set of low-level bounds on parasitics [22]. If every parasitic is kept below its bound, all performance constraints are guaranteed to be met.
Reference: [77] <author> B. A. Murtagh and M. A. Saunders, </author> <title> "MINOS 5.1 User's Guide", </title> <type> Technical Report Rep. </type> <institution> SOL 83-20R, Dept. of Operations Research, Stanford University, Stanford, </institution> <address> CA, </address> <month> January </month> <year> 1987. </year>
Reference-contexts: This important secondary optimization is only possible in this implementation because of the use of the LP solver as a post-processor of the constraint-graph solution. 6.5 Results The performance-driven compaction methodology has been implemented in C++ and consists of approximately 22,000 lines of code. The MINOS optimization package <ref> [77] </ref> was used for the LP portion of the algorithm. Two examples of a folded cascode CMOS opamp were compacted with the new tool. High-level performance constraints were specified for unity gain bandwidth and low frequency gain.
References-found: 77

