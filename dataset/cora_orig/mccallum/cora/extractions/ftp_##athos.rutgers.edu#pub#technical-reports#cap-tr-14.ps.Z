URL: ftp://athos.rutgers.edu/pub/technical-reports/cap-tr-14.ps.Z
Refering-URL: http://www.cs.rutgers.edu/~ellman/ellman-publications.html
Root-URL: 
Title: Abstraction and Decomposition in Hillclimbing Design Optimization  
Author: Thomas Ellman Mark Schwabacher 
Keyword: Content Area: Automated Reasoning, Search, Reasoning about physical systems, Knowledge Acquisition, Machine Learning.  
Address: New Brunswick, New Jersey 08903  
Affiliation: Department of Computer Science Hill Center for Mathematical Sciences Rutgers University  
Email: fellman,schwabacg@cs.rutgers.edu  
Phone: (908) 932 4184  
Web: CAP-TR-14  
Abstract: The performance of hillclimbing design optimization can be improved by abstraction and decomposition of the design space. Methods for automatically finding and exploiting such abstractions and decompositions are presented in this paper. A technique called "Operator Importance Analysis" finds useful abstractions. It does so by determining which of a given set of operators are the most important for a given class of design problems. Hillclimbing search runs faster when performed using this this smaller set of operators. A technique called "Operator Interaction Analysis" finds useful decompositions. It does so by measuring the pairwise interaction between operators. It uses such measurements to form an ordered partition of the operator set. This partition can then be used in a "hierarchic" hillclimbing algorithm which runs faster than ordinary hillclimbing with an unstructured operator set. We have implemented both techniques and tested them in the domain of racing yacht hull design. Our experimental results show that these two methods can produce substantial speedups with little or no loss in quality of the resulting designs. 
Abstract-found: 1
Intro-found: 1
Reference: [ Amarel, 1968 ] <author> S. Amarel. </author> <title> On representations of problems of reasoning about actions. </title> <editor> In D. Michie, editor, </editor> <booktitle> Machine Intelligence 3, </booktitle> <pages> pages 131 - 171. </pages> <publisher> American Elsevier, </publisher> <address> New York, NY, </address> <year> 1968. </year>
Reference-contexts: In particular, Operator Analysis acquires abstraction and decomposition knowledge that speeds up the performance of hillclimbing search algorithms. It thus automates a task that is analogous to tasks performed by some well known methods of speedup learning, such as problem-reformulation <ref> [ Amarel, 1968 ] </ref> , and explanation-based learning, [ Mitchell et al., 1986, Laird et al., 1987 ] . 3 Related Work Several investigators have previously applied AI techniques to parameter design optimization: Methods of intelligently adapting the parameters of hillclimbing search during a single 1 problem solving session are reported
Reference: [ Ellman et al., 1992 ] <author> T. Ellman, J. Keane, and M. Schwabacher. </author> <title> The rutgers cap project design associate. </title> <type> Technical Report CAP-TR-7, </type> <institution> Department of Computer Science, Rutgers University, </institution> <address> New Brunswick, NJ, </address> <year> 1992. </year>
Reference-contexts: Our operator analysis techniques have been developed as part of the "Design Associate", a system assisting human experts in the design of complex physical engineering structures <ref> [ Ellman et al., 1992 ] </ref> . 2 Why is this AI? Artificial Intelligence has been defined as the automation of tasks that are considered to require "intelligence", when performed by humans [ Winston, 1984, Simon, 1981 ] .
Reference: [ Ellman, 1990 ] <author> T. P. </author> <title> Ellman, editor. </title> <booktitle> Working Notes of the AAAI Workshop on Automatic Generation of Approximations and Abstractions. </booktitle> <institution> Department of Computer Science, Rutgers University, </institution> <address> New Brunswick, New Jersey, </address> <year> 1990. </year>
Reference-contexts: The importance of decomposition in problem solving was discussed at length in Simon's classic work on AI and Design, [ Simon, 1981 ] . Methods of automatically finding good abstractions and decompositions have more recently received considerable attention, as manifested in a series of workshops on the subject <ref> [ Ellman, 1990 ] </ref> , [ Ellman, 1992 ] . Nevertheless, until now, little attention has been given to these issues in the context of parameter design tasks. Methods of automatically finding abstractions and decompositions for parameter design problems are discussed in this section.
Reference: [ Ellman, 1992 ] <author> T. P. </author> <title> Ellman, editor. </title> <booktitle> Working Notes of the AAAI Workshop on Approximation and Abstraction of Computational Theories. </booktitle> <institution> Department of Computer Science, Rutgers University, </institution> <address> New Brunswick, New Jersey, </address> <year> 1992. </year>
Reference-contexts: Methods of automatically finding good abstractions and decompositions have more recently received considerable attention, as manifested in a series of workshops on the subject [ Ellman, 1990 ] , <ref> [ Ellman, 1992 ] </ref> . Nevertheless, until now, little attention has been given to these issues in the context of parameter design tasks. Methods of automatically finding abstractions and decompositions for parameter design problems are discussed in this section.
Reference: [ Finger and Dixon, 1989 ] <author> S. Finger and J. R. Dixon. </author> <title> A review of research in mechanical engineering design. part ii: Representation, analysis, and design for the life cycle. </title> <booktitle> Reseach in Engineering Design, </booktitle> <volume> 1(1):121 - 137, </volume> <year> 1989. </year>
Reference-contexts: We present methods to obtain similar interaction data automatically through numerical experiments. A survey of AI methods in Mechanical Engineering Design, which includes a section on feature extraction methods, is found in <ref> [ Finger and Dixon, 1989 ] </ref> .
Reference: [ Laird et al., 1987 ] <author> J. E. Laird, A. Newell, and P. S. Rosenbloom. </author> <title> Soar: Architecture for general intelligence. </title> <journal> Artificial Intelligence, </journal> <volume> 33:1 - 64, </volume> <year> 1987. </year>
Reference-contexts: In particular, Operator Analysis acquires abstraction and decomposition knowledge that speeds up the performance of hillclimbing search algorithms. It thus automates a task that is analogous to tasks performed by some well known methods of speedup learning, such as problem-reformulation [ Amarel, 1968 ] , and explanation-based learning, <ref> [ Mitchell et al., 1986, Laird et al., 1987 ] </ref> . 3 Related Work Several investigators have previously applied AI techniques to parameter design optimization: Methods of intelligently adapting the parameters of hillclimbing search during a single 1 problem solving session are reported in [ Orelup et al., 1988 ] .
Reference: [ Letcher et al., 1987 ] <author> J. S. Letcher, J. K. Marshall, J. C. Oliver, and N. Salvesen. </author> <title> Stars and stripes. </title> <journal> Scientific American, </journal> <volume> 257(2), </volume> <month> August </month> <year> 1987. </year>
Reference-contexts: A parameter value of zero has no effect. Values of ff and ff have opposite effects. 1 This yacht figures prominently in the history of America's Cup racing. In particular, it won the America's cup back from Australia in 1987 <ref> [ Letcher et al., 1987 ] </ref> . 2 * Global Scaling Operators: Scale-X, Scale-Y and Scale-Z change the overall dimensions of a racing yacht, by uniformly scaling all surfaces. * Prismatic Coefficient Operators: P rism-X, P rism-Y and P rism-Z make a yacht's canoe-body more or less streamlined, when viewed along
Reference: [ Letcher, 1991 ] <author> J. S. Letcher. </author> <title> The Aero/Hydro VPP Manual. </title> <institution> Aerh/Hydro, Incorporated, Southwest Harbor, Maine, </institution> <year> 1991. </year>
Reference-contexts: Our system evaluates Course T ime using a "Velocity Prediction Program", called "VPP" <ref> [ Letcher, 1991 ] </ref> . A yacht geometry is represented by a set of B-Spline surfaces [ Rogers and Adams, 1990 ] . Yacht designs are modified by operators that manipulate the B-Spline surfaces. Each surface is represented by a matrix of control point 3-vectors.
Reference: [ Mitchell et al., 1986 ] <author> T. M. Mitchell, R. M. Keller, and S. T. Kedar-Cabelli. </author> <title> Explanation-based learning: A unifying view. </title> <journal> Machine Learning, </journal> <volume> 1(1):47 - 80, </volume> <year> 1986. </year>
Reference-contexts: In particular, Operator Analysis acquires abstraction and decomposition knowledge that speeds up the performance of hillclimbing search algorithms. It thus automates a task that is analogous to tasks performed by some well known methods of speedup learning, such as problem-reformulation [ Amarel, 1968 ] , and explanation-based learning, <ref> [ Mitchell et al., 1986, Laird et al., 1987 ] </ref> . 3 Related Work Several investigators have previously applied AI techniques to parameter design optimization: Methods of intelligently adapting the parameters of hillclimbing search during a single 1 problem solving session are reported in [ Orelup et al., 1988 ] .
Reference: [ Orelup et al., 1988 ] <author> M. F. Orelup, J. R. Dixon, P. R. Cohen, and M. K. Simmons. Dominic ii: </author> <title> Meta-level control in iterative redesign. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <pages> pages 25-30, </pages> <address> St. Paul, MN, 1988. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: 1968 ] , and explanation-based learning, [ Mitchell et al., 1986, Laird et al., 1987 ] . 3 Related Work Several investigators have previously applied AI techniques to parameter design optimization: Methods of intelligently adapting the parameters of hillclimbing search during a single 1 problem solving session are reported in <ref> [ Orelup et al., 1988 ] </ref> . In contrast to this, our techniques find abstractions and decompositions in advance of problem solving. Furthermore, the abstractions and decompositions are applied to many problem solving sessions.
Reference: [ Press et al., 1986 ] <author> W. H. Press, B. P. Flannery, S. A. Teukolsky, and W. T. Vetterling. </author> <title> Numerical Recipes. </title> <publisher> Cambridge University Press, </publisher> <address> New York, New York, </address> <year> 1986. </year> <month> 12 </month>
Reference-contexts: Our system uses steepest-descent as our basic hillclimbing method <ref> [ Press et al., 1986 ] </ref> . <p> One approach is to apply or adapt our abstraction and decomposition techniques to work with other optimization methods that are possibly more robust than steepest-descent, e.g., downhill simplex <ref> [ Press et al., 1986 ] </ref> . Preliminary tests with the downhill simplex method suggest that it gets stuck just as easily as steepest-descent; however, we have some ideas for extending downhill simplex to make it still more robust.
Reference: [ Rogers and Adams, 1990 ] <author> David F. Rogers and J. Alan Adams. </author> <title> Mathematical elements for computer graphics. </title> <publisher> McGraw-Hill, </publisher> <address> 2nd edition, </address> <year> 1990. </year>
Reference-contexts: Our system evaluates Course T ime using a "Velocity Prediction Program", called "VPP" [ Letcher, 1991 ] . A yacht geometry is represented by a set of B-Spline surfaces <ref> [ Rogers and Adams, 1990 ] </ref> . Yacht designs are modified by operators that manipulate the B-Spline surfaces. Each surface is represented by a matrix of control point 3-vectors. Shape modification operators implement transformations that include rotation, translation and scaling.
Reference: [ Rogers, 1989 ] <author> J. L. Rogers. </author> <title> A knowledge-based tool for multilevel decomposition of a complex design problem. </title> <type> Technical Report NASA Technical Paper 2903, </type> <institution> Langley Research Center, National Aeronautics and Space Administration, Hampton, VA, </institution> <year> 1989. </year>
Reference-contexts: In contrast to this, our techniques find abstractions and decompositions in advance of problem solving. Furthermore, the abstractions and decompositions are applied to many problem solving sessions. Methods of decomposition that are analogous to, but technically different from ours are discussed in [ Sobieszczanski-Sobiesky, 1982 ] and <ref> [ Rogers, 1989 ] </ref> . Engineous, a parameter design system discussed in [ Tong, 1988 ] , has a Parameter Knowledge Base which contains information on parameter interactions provided by human experts. We present methods to obtain similar interaction data automatically through numerical experiments.
Reference: [ Sacerdoti, 1974 ] <author> E. D. Sacerdoti. </author> <title> Planning in a hierarchy of abstraction spaces. </title> <journal> Artificial Intelligence, </journal> <volume> 5:115 - 135, </volume> <year> 1974. </year>
Reference-contexts: The resulting algorithm is more robust than the original algorithm; however, it still does not always reach a true local optimum. 6 Abstraction and Decomposition Abstraction and decomposition techniques have a long history in Artificial Intelligence. Abstraction techniques for planning and theorem proving go back as far as <ref> [ Sacerdoti, 1974 ] </ref> . The importance of decomposition in problem solving was discussed at length in Simon's classic work on AI and Design, [ Simon, 1981 ] .
Reference: [ Simon, 1981 ] <editor> H. A. Simon. </editor> <booktitle> The Sciences of the Artificial. </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1981. </year>
Reference-contexts: part of the "Design Associate", a system assisting human experts in the design of complex physical engineering structures [ Ellman et al., 1992 ] . 2 Why is this AI? Artificial Intelligence has been defined as the automation of tasks that are considered to require "intelligence", when performed by humans <ref> [ Winston, 1984, Simon, 1981 ] </ref> . Abstraction and decomposition are techniques that are often used by human designers. For example, human yacht designer know which features of a yacht's hull geometry are most important to optimize, and which should be "abstracted away", i.e., ignored, and given default values. <p> Abstraction techniques for planning and theorem proving go back as far as [ Sacerdoti, 1974 ] . The importance of decomposition in problem solving was discussed at length in Simon's classic work on AI and Design, <ref> [ Simon, 1981 ] </ref> . Methods of automatically finding good abstractions and decompositions have more recently received considerable attention, as manifested in a series of workshops on the subject [ Ellman, 1990 ] , [ Ellman, 1992 ] .
Reference: [ Sobieszczanski-Sobiesky, 1982 ] <author> J. Sobieszczanski-Sobiesky. </author> <title> A linear decomposition method for large optimization problems|blueprint for development. </title> <type> Technical Report NASA TM-83248, </type> <institution> National Aeronautics and Space Administration, </institution> <year> 1982. </year>
Reference-contexts: In contrast to this, our techniques find abstractions and decompositions in advance of problem solving. Furthermore, the abstractions and decompositions are applied to many problem solving sessions. Methods of decomposition that are analogous to, but technically different from ours are discussed in <ref> [ Sobieszczanski-Sobiesky, 1982 ] </ref> and [ Rogers, 1989 ] . Engineous, a parameter design system discussed in [ Tong, 1988 ] , has a Parameter Knowledge Base which contains information on parameter interactions provided by human experts. We present methods to obtain similar interaction data automatically through numerical experiments.
Reference: [ Tong, 1988 ] <author> S. S. Tong. </author> <title> Coupling symbolic manipulation and numerical simulation for complex engineering designs. </title> <booktitle> In International Association of Mathematics and Computers in Simulation Conference on Expert Systems for Numerical Computing, </booktitle> <institution> Purdue University, </institution> <year> 1988. </year>
Reference-contexts: Furthermore, the abstractions and decompositions are applied to many problem solving sessions. Methods of decomposition that are analogous to, but technically different from ours are discussed in [ Sobieszczanski-Sobiesky, 1982 ] and [ Rogers, 1989 ] . Engineous, a parameter design system discussed in <ref> [ Tong, 1988 ] </ref> , has a Parameter Knowledge Base which contains information on parameter interactions provided by human experts. We present methods to obtain similar interaction data automatically through numerical experiments.
Reference: [ Winston, 1984 ] <author> P.H. Winston. </author> <booktitle> Artificial Intelligence. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Massachusetts, </address> <year> 1984. </year> <month> 13 </month>
Reference-contexts: part of the "Design Associate", a system assisting human experts in the design of complex physical engineering structures [ Ellman et al., 1992 ] . 2 Why is this AI? Artificial Intelligence has been defined as the automation of tasks that are considered to require "intelligence", when performed by humans <ref> [ Winston, 1984, Simon, 1981 ] </ref> . Abstraction and decomposition are techniques that are often used by human designers. For example, human yacht designer know which features of a yacht's hull geometry are most important to optimize, and which should be "abstracted away", i.e., ignored, and given default values.
References-found: 18

