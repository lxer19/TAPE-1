URL: http://www.cs.arizona.edu/people/gene/PAPERS/sparse.dp.ps
Refering-URL: http://www.cs.arizona.edu/people/gene/vita.html
Root-URL: http://www.cs.arizona.edu
Title: Chapter 1 Chaining Multiple-Alignment Fragments in Sub-Quadratic Time  
Author: Gene Myers Webb Miller 
Abstract: We describe a multiple-sequence alignment algorithm for determining the highest-scoring alignment that can be obtained by chaining together non-overlapping subalignments selected from a given collection of such "fragments". For a given set of K sequences, a problem instance consists of a set of F precomputed fragments, an alignment score for each fragment, and a "gap" penalty function that assigns a cost for chaining two fragments together. When interpreted as a maximum weight path problem in a directed acyclic graph, it is computable in fi(F 2 ) time. Here we instead interpret the problem as "K-dimensional sparse dynamic programming" and take advantage of its underlying geometric nature. Assuming K &lt; log F , our algorithm runs in time O(F log K F ) and space O(KF log K1 F ), making it the first sub-quadratic sparse dynamic programming algorithm for the case K &gt; 2. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Bentley and H. Maurer, </author> <title> Efficient worst-case data structures for range searching, </title> <journal> Acta Informatica, </journal> <volume> 13 (1980), </volume> <pages> pp. 155-168. </pages>
Reference-contexts: A chain of fragments is a sequence ff t g L t=1 such that f t f t+1 for t 2 <ref> [1; L 1] </ref>, and the score of the chain is: t=1 f t :score L1 X gap cost (f t :e~nd; f t+1 :b~eg) The fragment-chaining problem is to determine a chain of maximum score, given a set of fragments and a gap cost function. <p> In effect, for a given point ~q these "cases" partition the set of fragments e such that e:e~nd ~q into classes E for 2 <ref> [1; C K ] </ref>. Each of these classes has associated data structures supporting a procedure select best (~q ) that returns the maximum value of score at (e) gap cost (e:e~nd; ~q ) taken over all e 2 E . <p> The recurrence for score at then operationally becomes: score at (f ) = f:score + maxf0; g where = maxfselect best (f:b~eg) : 2 <ref> [1; C K ] </ref>g If select best (~q ) runs in time O (T K;F ) then, ignoring the time needed to maintain the data structures, the fragment-chaining algorithm runs in time O (F C K T K;F ). <p> Our efficient data structure is a small variation of the traditional "range tree" <ref> [1] </ref>, which is discussed in a number of books on algorithms or computational geometry, e.g., pp. 83-88 of Preparata and Shamos [9]. <p> The linking inequality, (K1) 0 of Lemma 4.1 translates into the inequality of part (c) as follows. If (K 1) = K 1, then the condition is equivalent to P K1 i fl=K, which is equivalent to ~ C ~y c + ffb for ~ C = <ref> [ 1 ] </ref> u , ff = 1=K, and c = ~ C ~xffa. <p> case-by-case basis that it is impossible for ~q to have any non-zero components by levering the special form of the C-vectors. 2 To illustrate the construction of Theorem 4.1, we list the vectors and scalars for the case of the identity permutation with K = 5: ~ C 0 = <ref> [1; 1; 0; 0] </ref> c 0 = ~ C 0 ~x ~ C 2 = [0; 0; 1; 1] c 2 = ~ C 2 ~x ~ C 4 = [1; 1; 1; 1] c 4 = ~ C 4 ~x ffa ff = 1 ~ S = [4ffi; 3ffi; 2ffi; <p> the special form of the C-vectors. 2 To illustrate the construction of Theorem 4.1, we list the vectors and scalars for the case of the identity permutation with K = 5: ~ C 0 = [1; 1; 0; 0] c 0 = ~ C 0 ~x ~ C 2 = <ref> [0; 0; 1; 1] </ref> c 2 = ~ C 2 ~x ~ C 4 = [1; 1; 1; 1] c 4 = ~ C 4 ~x ffa ff = 1 ~ S = [4ffi; 3ffi; 2ffi; 1ffi] s = ~ S ~x fia fi = 2" &gt;From here on, we will <p> list the vectors and scalars for the case of the identity permutation with K = 5: ~ C 0 = [1; 1; 0; 0] c 0 = ~ C 0 ~x ~ C 2 = [0; 0; 1; 1] c 2 = ~ C 2 ~x ~ C 4 = <ref> [1; 1; 1; 1] </ref> c 4 = ~ C 4 ~x ffa ff = 1 ~ S = [4ffi; 3ffi; 2ffi; 1ffi] s = ~ S ~x fia fi = 2" &gt;From here on, we will denote each item belong to a case by superscripting with , and a scalar item
Reference: [2] <author> K.-M. Chao and W. Miller, </author> <title> Linear-space algorithms that build local alignments from fragments, </title> <note> to appear in Algorithmica. </note>
Reference-contexts: However, Myers and Huang were considering the problem of comparing restriction maps, where the points have to be modeled as K-tuples of real numbers, a context in which the speedup does not apply. In order to make the central algorithm of practical value to biologists, Chao and Miller <ref> [2] </ref> extended it simultaneously in two directions. First, space consumption was reduced to O (N ), assuming that fragments can be generated at will and discarded as the algorithm proceeds. Second, the generalized algorithm delivers any desired number of highest-scoring, non-intersecting chains at a slight increase in asymptotic time complexity.
Reference: [3] <author> K.-M. Chao, J. Zhang, J. Ostell and W. Miller, </author> <title> A local alignment tool for very long DNA sequences, </title> <note> to appear in CABIOS. </note>
Reference-contexts: Though these subquadratic fragment-chaining algorithms require gap cost (~p; ~q ) to satisfy certain restrictions, they are sufficiently general to appropriately handle biological data, and they have been used in a practical program for aligning very long DNA sequences <ref> [3] </ref>. For potential application to biology, it is natural to seek generalizations of these algorithms to K &gt; 2 sequences. Unfortunately, the above earlier methods, which are based on the sweep-line paradigm from two-dimensional computational geometry, do not readily generalize in that direction.
Reference: [4] <author> D. Eppstein, Z. Galil, R. Giancarlo and G. F. </author> <title> Italiano, Sparse dynamic programming. I: linear cost functions; II: convex and concave cost functions, </title> <journal> J. Assoc. Com-put. Mach., </journal> <volume> 39 (1992), </volume> <pages> pp. 519-567. </pages>
Reference-contexts: For K = 2 sequences, fragment-chaining algorithms that run in time O (N 0 + N 1 + F log F ) or faster were 1 2 Myers and Miller found independently by Eppstein et al: <ref> [4] </ref> and by My-ers and Huang [8].
Reference: [5] <author> D. B. Johnson, </author> <title> A priority queue in which initialization and queue operations take O(log log D) time, </title> <journal> Math. Syst. Theory, </journal> <volume> 15 (1982), </volume> <pages> pp. 295-309. </pages>
Reference-contexts: Eppstein et al: observed that in the case of sequence comparison the coordinates of points are integers between 0 and N = max (N i ), and so the running time can be reduced to O (F log log F ), using a data structure of Johnson <ref> [5] </ref>. However, Myers and Huang were considering the problem of comparing restriction maps, where the points have to be modeled as K-tuples of real numbers, a context in which the speedup does not apply.
Reference: [6] <author> G. Lueker, </author> <title> A data structure for orthogonal range queries, </title> <booktitle> Proceedings of the 19th Annual IEEE Symposium on Foundations of Computer Science (1978), </booktitle> <pages> pp. 28-34. </pages>
Reference-contexts: Thus, the total time is O (F log 2 F ) and the space requirement is O (F log F ). The knowledgeable reader might ask whether the Willard-Lueker variation <ref> [12, 6] </ref> on range dimensions with the set of ~q ~p for fixed ~p. The six subtriangles are regions within which the "sum-of-pairs" gap cost function (see Section 4) is affine.
Reference: [7] <author> W. Miller, M. Boguski, B. Raghavachari, Z. Zheng and R. C. Hardison, </author> <title> Constructing aligned sequence blocks, </title> <journal> Journal of Computational Biology, </journal> <volume> 1 (1994), </volume> <pages> pp. 51-64. </pages>
Reference-contexts: Intuitively, a "fragment sub-alignment" is an alignment of a highly conserved region between the sequences that we assume has been pre-computed by some other method. The literature from computational molecular biology contains dozens of papers describing methods to compute various kinds of fragment subalignments (e.g., <ref> [10, 7] </ref>). Our goal is to find an optimum subset of such a collection of fragments that can be linked together to form a longer alignment of maximum score.
Reference: [8] <author> E. Myers and X. Huang, </author> <title> An O(N 2 log N ) restriction map comparison and search algorithm, </title> <journal> Bull. Math. Biol., </journal> <volume> 54 (1992), </volume> <pages> pp. 599-618. </pages>
Reference-contexts: For K = 2 sequences, fragment-chaining algorithms that run in time O (N 0 + N 1 + F log F ) or faster were 1 2 Myers and Miller found independently by Eppstein et al: [4] and by My-ers and Huang <ref> [8] </ref>. Eppstein et al: observed that in the case of sequence comparison the coordinates of points are integers between 0 and N = max (N i ), and so the running time can be reduced to O (F log log F ), using a data structure of Johnson [5].
Reference: [9] <author> F. Preparata and M. Shamos, </author> <title> Computational Geometry, </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: Our efficient data structure is a small variation of the traditional "range tree" [1], which is discussed in a number of books on algorithms or computational geometry, e.g., pp. 83-88 of Preparata and Shamos <ref> [9] </ref>. Essentially what is needed is a maximum function value over those fragments e for which the pair (e:c 0 ; e:c 1 ) is in the semi-infinite range (1; C 0 y] fi [C 1 y ffb; 1).
Reference: [10] <author> G. Schuler, S. Altschul and D. Lipman, </author> <title> A workbench for multiple alignment construction and analysis, Proteins: Structure, Function and Genetics, </title> <booktitle> 9 (1991), </booktitle> <pages> pp. 180-190. </pages>
Reference-contexts: Intuitively, a "fragment sub-alignment" is an alignment of a highly conserved region between the sequences that we assume has been pre-computed by some other method. The literature from computational molecular biology contains dozens of papers describing methods to compute various kinds of fragment subalignments (e.g., <ref> [10, 7] </ref>). Our goal is to find an optimum subset of such a collection of fragments that can be linked together to form a longer alignment of maximum score.
Reference: [11] <author> E. Sobel and H. Martinez, </author> <title> A multiple alignment program, Nucl. </title> <journal> Acids Res., </journal> <volume> 14 (1986), </volume> <pages> pp. 363-374. </pages>
Reference-contexts: Its space requirement is O (KF ), i.e., the space needed for the fragments. This algorithm has been proposed as a practical approach for aligning biological sequences, first for K = 2 by Wilbur and Lipman [13], then for K &gt; 2 by Sobel and Martinez <ref> [11] </ref>. For K = 2 sequences, fragment-chaining algorithms that run in time O (N 0 + N 1 + F log F ) or faster were 1 2 Myers and Miller found independently by Eppstein et al: [4] and by My-ers and Huang [8].
Reference: [12] <author> D. E. Willard, </author> <title> Predicate-oriented database search algorithms, </title> <type> Ph. D. Thesis, </type> <institution> Harvard University, and Aiken Computation Laboratory Report TR-20-78, </institution> <year> 1978. </year>
Reference-contexts: Thus, the total time is O (F log 2 F ) and the space requirement is O (F log F ). The knowledgeable reader might ask whether the Willard-Lueker variation <ref> [12, 6] </ref> on range dimensions with the set of ~q ~p for fixed ~p. The six subtriangles are regions within which the "sum-of-pairs" gap cost function (see Section 4) is affine.
Reference: [13] <author> W. Wilbur and D. Lipman, </author> <title> Rapid similarity searches of nucleic acid and protein data banks, </title> <booktitle> Proc. </booktitle> <institution> Nat. Acad. Sci. USA, </institution> <month> 80 </month> <year> (1983), </year> <pages> pp. 726-730. </pages>
Reference-contexts: Its space requirement is O (KF ), i.e., the space needed for the fragments. This algorithm has been proposed as a practical approach for aligning biological sequences, first for K = 2 by Wilbur and Lipman <ref> [13] </ref>, then for K &gt; 2 by Sobel and Martinez [11].
Reference: [14] <author> Z. Zhang, B. Raghavachari, R. Hardison and W. Miller, </author> <title> Chaining multiple-alignment blocks, </title> <journal> Journal of Computational Biology, </journal> <volume> 1 (1994), </volume> <pages> pp. 217-226. </pages>
Reference-contexts: For potential application to biology, it is natural to seek generalizations of these algorithms to K &gt; 2 sequences. Unfortunately, the above earlier methods, which are based on the sweep-line paradigm from two-dimensional computational geometry, do not readily generalize in that direction. Zhang et al: <ref> [14] </ref> gave a practical algorithm based on kD-trees to compute optimum fragment chains for more than two sequences. However, no rigorous analysis of running time was provided, as is typical with kD-tree methods. Moreover, the paper left open the problem of reducing space requirement below fi (KF ).
References-found: 14

