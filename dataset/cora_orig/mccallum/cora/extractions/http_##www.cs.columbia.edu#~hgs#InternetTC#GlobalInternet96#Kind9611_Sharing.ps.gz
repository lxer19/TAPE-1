URL: http://www.cs.columbia.edu/~hgs/InternetTC/GlobalInternet96/Kind9611:Sharing.ps.gz
Refering-URL: http://gaia.cs.umass.edu:80/tccc/internet96/schedule.html
Root-URL: 
Email: Email: Tim.Kindberg@dcs.qmw.ac.uk  
Title: Sharing Objects over the Internet: the Mushroom Approach  
Author: Tim Kindberg, George Coulouris, Jean Dollimore and Jyrki Heikkinen 
Address: London, Mile End Road, London E1 4NS, UK  
Affiliation: Department of Computer Science, Queen Mary and Westfield College, University of  
Abstract: This paper reports on the Mushroom project 1 . The project is developing a software framework for collaborative working and user interaction on the Internet. The paper illustrates some of the required features in the context of an application scenario and outlines those aspects of the Mushroom system architecture that support the sharing of information. The projects motivation is to address the problems of coordinated user interaction, distribution and privacy. Mrooms are interactive environments for groups of collaborating users. They provide a shared space in which users are aware of one another while working on shared objects. Their boundaries provide a triggering mechanism for consistency and privacy checks. In contrast to other systems with room-based metaphors, Mushroom focuses on a scalable and flexible system architecture using replicated state, group communication and event-based updates. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Kindberg, T., Mushroom: </author> <title> a framework for collaboration and interaction across the Internet. </title> <booktitle> Proc. CSCW and the Web, 5th ERCIM/W4G workshop, </booktitle> <editor> Busbach, U., Kerr, D., and Sikkel, K. (eds), </editor> <booktitle> GMD, </booktitle> <pages> pp. 43-53, </pages> <year> 1996. </year>
Reference-contexts: Mrooms are normally persistent, and users can interact synchronously (in the same room at the same time) or asynchronously (users occupy the room at different times, but observe one another's changes to information objects). Further motivation is given in <ref> [1] </ref>. Mrooms contain representations of collaborating users, the information objects on which they are working and links to other Mrooms.
Reference: 2. <author> Liskov, B., Day, M. and Shrira, L., </author> <title> Distributed object management in Thor. In Distributed Object Management, </title> <editor> Oszu, M., Ed., </editor> <publisher> Morgan Kaufman, </publisher> <year> 1994. </year>
Reference-contexts: The main system requirements and issues for Mushroom are: Object replication : An important goal of the Mushroom design is scalability to many users distributed across the Internet sharing many objects. The system architecture is based on object replication <ref> [2, 3] </ref>, in which shared objects are replicated at users workstations for efficient access. This also enables users to continue with some work even when disconnection occurs. Objects with a high availability requirement are also replicated at several servers.
Reference: 3. <author> Makpangou, M., Gourhant, Y., Le Narzul, J.P., and Shapiro, M., </author> <title> Fragmented objects for distributed abstractions. </title> <booktitle> Readings in Distributed Computing Systems, </booktitle> <publisher> IEEE Computer Society Press., </publisher> <month> Jul </month> <year> 1994. </year>
Reference-contexts: The main system requirements and issues for Mushroom are: Object replication : An important goal of the Mushroom design is scalability to many users distributed across the Internet sharing many objects. The system architecture is based on object replication <ref> [2, 3] </ref>, in which shared objects are replicated at users workstations for efficient access. This also enables users to continue with some work even when disconnection occurs. Objects with a high availability requirement are also replicated at several servers.
Reference: 4. <author> Berners-Lee, T., Masinter, L., McCahill, M., </author> <title> Uniform Resource Locators (URL). </title> <type> RFC 1738, </type> <month> Dec </month> <year> 1994. </year>
Reference-contexts: Mrooms can fall under the administration of different sets of organisations as they evolve, and a further requirement is to be able to continue to access objects using the same names. This feature is noticeably absent from URLs <ref> [4] </ref>. Integrity and concurrency control : We need to be able to enforce concurrency and integrity constraints on a per-class or per-object basis, supporting both optimistic and pessimistic forms of concurrency control, and general integrity constraints. Openness: Users can install new types of shared objects in Mrooms, as Java applications.
Reference: 5. <author> Dean, D., Felten, E. and Wallach, D., </author> <title> Java security: from HotJava to Netscape and beyond. </title> <booktitle> Proc. IEEE Symp. on Security and Privacy, </booktitle> <month> May </month> <year> 1996. </year>
Reference-contexts: to these requirements derive from the exposed communication channels of the Internet, over which we transmit object state and events; the potential for a user to make illegal updates to state stored on her computer; and the loopholes and lack of security guarantees in Java as it is currently implemented <ref> [5] </ref>. Also, there may be varying levels of trust between users inside an Mroom.
Reference: 6. <author> Kindberg, T. </author> <title> A sequencing service for group communication (abstract). </title> <booktitle> Proc. Principles of Distributed Computing 95, ACM, </booktitle> <address> p. 260, </address> <year> 1995. </year>
Reference-contexts: To implement total ordering a member of the persistence domain acts as a sequencer. We can choose dynamically which member this is, according to the network location of the majority of peers, and according to the sequencing workload on the servers due to other sessions <ref> [6] </ref>. The disadvantage of a sequencer is that it may become a bottleneck and it makes recovery from failure difficult.
Reference: 7. <author> Krasner, G., and Pope, S. </author> <title> A cookbook for using the Model - View-Controller user interface paradigm in Smalltalk-80. </title> <journal> JOOP, </journal> <volume> vol 1, no 3, </volume> <pages> pp 26-49, </pages> <address> August/September, </address> <year> 1988. </year>
Reference-contexts: For example, if two users apply simultaneously to control the floor in a conference, then their positions in the queue could appear shaded at first and solid when the ordering is decided. The Model-View-Controller architecture <ref> [7] </ref> separates the user interface into three types of component: a model (a collection of objects that are to be viewed and or changed); one or more views (objects that provide visual representations of the model); controllers (objects that deal with keyboard and mouse interactions).
Reference: 8. <author> Kindberg, T., </author> <title> A stake in Cyberspace. </title> <booktitle> Proc. 7th. ACM SIGOPS European Workshop, </booktitle> <address> Connemara, Eire, </address> <month> Sept. </month> <year> 1996. </year>
Reference-contexts: We have adapted this architecture to allow for the replication of objects <ref> [8] </ref>. The model comprises both shared and personal objects as illustrated in Figure 3. The controller is responsible for user interface events (1).
Reference: 9. <institution> The URN Interoperability Project (TURNIP). </institution> <note> http://www.dstc.edu.au/RDU/TURNIP/. </note>
Reference-contexts: We now prefer a second option, in which an Mroom may have several names. A name would commence with the DNS name of a server where the remainder of the name can be resolved (c.f. URNs <ref> [9] </ref>). A user or group with an interest in a given Mroom has a link to that Mroom in their own Mroom. The attributes of an Mroom link as with any type of object in Mushroom include a Mushroom Resource Locator, MRL.
Reference: 10. <author> Floyd, S., Jacobson, V., Liu, C., McCanne, S., and Zhang, L., </author> <title> A reliable framework for lightweight sessions and application level framing. </title> <institution> Lawrence Berkeley Laboratory tech. </institution> <type> report, </type> <institution> ftp://ftp.ee.lbl.gov/papers/wb.tech.ps.Z., </institution> <year> 1995. </year>
Reference-contexts: The requesting peers list is constructed according to such considerations as trust and closeness. Random ordering of equivalent sites helps to balance load. This scheme is similar to the approach taken in the SRM protocol to obtain missing messages <ref> [10] </ref>. But our approach of using a preference list specified by a requesting peer has an advantage with respect to load balancing and trust. 4. Discussion Several systems employ similar room-based metaphors (e.g. Worlds [11] and BSCW [12]).
Reference: 11. <author> Tolone, W., Kaplan, S. and Fitzpatrick, G., </author> <title> Specifying dynamic support for collaborative work within WORLDS. </title> <booktitle> Proc. ACM Conference on Organisational Computer Systems, </booktitle> <pages> pp. 55-65, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: But our approach of using a preference list specified by a requesting peer has an advantage with respect to load balancing and trust. 4. Discussion Several systems employ similar room-based metaphors (e.g. Worlds <ref> [11] </ref> and BSCW [12]). Mushroom differs in its concern with the integrity of shared information objects, and in its focus on a scalable and flexible system architecture through using replicated state, group communication and event-based updates.
Reference: 12. <author> Bentley, R., Horstmann, T., Sikkel, K., and Trevor, J., </author> <title> Supporting collaborative information sharing with the WorldWide Web: The BSCW Shared Workspace system. </title> <booktitle> 4th International WWW Conference, </booktitle> <address> Boston, Dec.1995. </address>
Reference-contexts: But our approach of using a preference list specified by a requesting peer has an advantage with respect to load balancing and trust. 4. Discussion Several systems employ similar room-based metaphors (e.g. Worlds [11] and BSCW <ref> [12] </ref>). Mushroom differs in its concern with the integrity of shared information objects, and in its focus on a scalable and flexible system architecture through using replicated state, group communication and event-based updates.
Reference: 13. <author> Rowley, A. and Dollimore, J., </author> <title> Replicated secure shared objects for groupware applications. </title> <type> Tech. rep. 716, </type> <institution> Dept. of Comp. Sci., Queen Mary & Westfield College, U. of London. </institution>
Reference-contexts: While we believe our object location scheme is promising it raises many issues, including how session hints are updated. Security for group working is under investigation <ref> [13] </ref>. Behaviour under partitions is addressed by [14], but we believe that more investigation is needed into user requirements for dealing with partitions.
Reference: 14. <author> Cosquer, F., and Verissimo, P., </author> <title> Large-scale distributed support for cooperative applications. </title> <booktitle> Proc. European Research Seminar on Advances in Distributed Systems, </booktitle> <pages> pp. 105-110, </pages> <year> 1995. </year>
Reference-contexts: While we believe our object location scheme is promising it raises many issues, including how session hints are updated. Security for group working is under investigation [13]. Behaviour under partitions is addressed by <ref> [14] </ref>, but we believe that more investigation is needed into user requirements for dealing with partitions. Our investigations into application scenarios such as the Web site design task convinces us that proper support for interactive objectsharing will greatly enhance organisations productivity and benefit users.
References-found: 14

