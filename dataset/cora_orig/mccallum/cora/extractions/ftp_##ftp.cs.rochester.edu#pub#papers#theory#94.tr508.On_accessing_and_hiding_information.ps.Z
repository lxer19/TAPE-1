URL: ftp://ftp.cs.rochester.edu/pub/papers/theory/94.tr508.On_accessing_and_hiding_information.ps.Z
Refering-URL: http://www.cs.rochester.edu/u/han/papers.html
Root-URL: 
Title: On Accessing and Hiding Information  
Author: by Yenjo Han Lane A. Hemaspaandra 
Degree: Submitted in Partial Fulfillment of the Requirements for the Degree Doctor of Philosophy Supervised by  
Date: 1994  
Address: Rochester, New York  
Affiliation: Department of Computer Science College of Arts and Science University of Rochester  
Abstract-found: 0
Intro-found: 1
Reference: [AFK89] <author> M. Abadi, J. Feigenbaum, and J. Kilian. </author> <title> On hiding information from an oracle. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 39 </volume> <pages> 21-50, </pages> <year> 1989. </year>
Reference-contexts: If 2 there is a powerful spying observer who watches all oracle transactions, hiding the identity of the client's input from the observer's prying eyes becomes an important security concern. Clearly, hiding all information (including length) about inputs would render oracles effectively useless <ref> [AFK89] </ref>. <p> Note that we cannot hope to hide the length of the input since doing so would amount to abandoning the use of databases entirely <ref> [AFK89] </ref>. On the other hand, the timing of queries is not a serious concern in our definition of security since, given a secure algorithm, there is an equivalent secure algorithm that asks queries only at regular intervals and still accepts the same language. <p> Interestingly, there is a similar result regarding the existence of NP-hard sets that are securely accepted by a bounded-error probabilistic polynomial-time machine: that is, for any set D, no NP-hard set is in secureBPP D unless the polynomial hierarchy collapses <ref> [AFK89] </ref>. 3.2 If Secure and Oblivious Computation Differ, then P 6= PSPACE We show, for both threshold and probabilistic computation, that secure computation is more powerful than oblivious computation only if BPP 6= PP (which would resolve in the affirmative the important question of whether polynomial time differs from polynomial space). <p> Proof: Let L be a language that has a one-oracle instance-hiding scheme that leaks at most the length of its input. In this proof, we use the notation of Definition 3.3.1. Following <ref> [AFK89] </ref>, we use the term transcript to denote t , the sequence of queries and answers along a computation path.
Reference: [AHH + 93] <author> V. Arvind, Y. Han, L. Hemachandra, J. Kobler, A. Lozano, M. Mund henk, M. Ogiwara, U. Schoning, R. Silvestri, and T. Thierauf. </author> <title> Reductions to sets of low information content. </title> <editor> In K. Ambos-Spies, S. Homer, and U. Schoning, editors, </editor> <booktitle> Complexity Theory, </booktitle> <pages> pages 1-45. </pages> <publisher> Cambridge University Press, </publisher> <year> 1993. </year>
Reference: [AHOW92] <author> E. Allender, L. Hemachandra, M. Ogiwara, and O. Watanabe. </author> <title> Re lating equivalence and reducibility to sparse sets. </title> <journal> SIAM Journal on Computing, </journal> <volume> 21(3) </volume> <pages> 521-539, </pages> <year> 1992. </year>
Reference-contexts: Thus, for such sets, reducing to some sparse set implies reducing to some relatively simple sparse set. The nearest previous result is one of Allender, Hemachandra, Ogiwara, and Watanabe <ref> [AHOW92] </ref>: If P = NP and set A 2-truth-table reduces to a sparse set, then A truth-table reduces to some sparse set that itself truth-table reduces to A. However, A does not two-truth-table reduce to the particular sparse set constructed in [AHOW92]. <p> result is one of Allender, Hemachandra, Ogiwara, and Watanabe <ref> [AHOW92] </ref>: If P = NP and set A 2-truth-table reduces to a sparse set, then A truth-table reduces to some sparse set that itself truth-table reduces to A. However, A does not two-truth-table reduce to the particular sparse set constructed in [AHOW92]. Via census-functions and graph-coloring, our techniques avoid the level of explicit coding (and thus the complexity of reduction) required by previous methods.
Reference: [AS86] <author> K. Ambos-Spies. </author> <title> A note on complete problems for complexity classes. </title> <journal> Information Processing Letters, </journal> <volume> 23 </volume> <pages> 227-230, </pages> <year> 1986. </year>
Reference: [ASS93] <author> V. Arvind, U. Schoning, and R. Schuler. </author> <title> On helping probabilistic oracle machines. </title> <type> Draft, </type> <month> March </month> <year> 1993. </year>
Reference: [Bab85] <author> L. Babai. </author> <title> Trading group theory for randomness. </title> <booktitle> In Proceedings of the 17th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 421-429, </pages> <month> April </month> <year> 1985. </year>
Reference-contexts: As a consequence of Corollary 2.3.3 and Theorem 2.5.2 below, BPP path is not low for BPP path unless the polynomial hierarchy collapses. Theorem 2.4.5 BPP BPP path = BPP path . Corollary 2.4.6 NP BPP BPP path . 13 2.5 BPP path and the Polynomial Hierarchy Babai <ref> [Bab85] </ref> introduced the Arthur-Merlin classes MA and AM. It is known that NP BPP MA AM BPP NP [Bab85,Zac88]. 1 The next theorem strengthens Corollary 2.4.6 to show that even MA is contained in BPP path . This improves the result of Vereshchagin [Ver92] that MA PP.
Reference: [BBS86] <author> J. Balcazar, R. Book, and U. Schoning. </author> <title> The polynomial-time hierar chy and sparse oracles. </title> <journal> Journal of the ACM, </journal> <volume> 33(3) </volume> <pages> 603-617, </pages> <year> 1986. </year> <month> 76 </month>
Reference-contexts: Theorem 3.2.1 If there is a database D such that secureBPP D path 6= obliviousBPP D path , then BPP 6= PP. Proof: Note that BPP = PP if and only if BPP = P #P (since BPP = P BPP [Ko82,Zac82] and P PP = P #P <ref> [BBS86] </ref>). So we can prove the theorem by proving the following version of the contrapositive: If BPP = P #P , then (8D) [secureBPP D path = obliviousBPP D path ]. Assume BPP = P #P .
Reference: [Bei91] <author> R. Beigel. </author> <title> Bounded queries to SAT and the boolean hierarchy. </title> <journal> The oretical Computer Science, </journal> <volume> 84 </volume> <pages> 199-223, </pages> <year> 1991. </year>
Reference-contexts: More precisely, we study variants of bounded truth-table reduction to an NP oracle in which the evaluator is allowed to access only partial information that is extracted from the answers to the queries. This model of computation and the resulting classes of languages have been studied by Beigel <ref> [Bei91] </ref> and, more generally, by Kobler and Thierauf [KT90]. To denote these classes of languages, we adopt the advice class notation devised by Kobler and Thierauf [KT90]. The information that is obtained from the answers to the queries and subsequently made available to an evaluator is called advice. <p> It is also known that the boolean hierarchy collapses only if the polynomial hierarchy collapses [CK90]. 5.3 Parity Advice Wagner and Wechsung [Wec85] (see also Beigel <ref> [Bei91] </ref>) showed that in order to decide a set in P== NP [k] , a P evaluator actually needs to know just the parity of the number of yes answers to k (appropriately chosen) queries to SAT.
Reference: [Bei92] <author> R. Beigel. </author> <title> Perceptrons, PP, and the polynomial hierarchy. </title> <booktitle> In Pro ceedings of the 7th Structure in Complexity Theory Conference, </booktitle> <pages> pages 14-19. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> June </month> <year> 1992. </year>
Reference-contexts: Corollary 2.4.4 P NP [log] BPP path . It is natural to hope that Theorem 2.4.2 can be improved to the case of Turing reductions. However, no relativizable proof can establish the closure of BPP path under Turing reductions, as Beigel <ref> [Bei92] </ref> constructed an oracle set A such that P NP A 6 PP A and thus, relative to this oracle, BPP path is not closed under Turing reductions, i.e., BPP A path 6= P BPP A path .
Reference: [Ber78] <author> P. Berman. </author> <title> Relationship between density and deterministic complex ity of NP-complete languages. </title> <booktitle> In Proceedings of the 5th International Colloquium on Automata, Languages, and Programming, </booktitle> <pages> pages 63-71. </pages> <note> Springer-Verlag Lecture Notes in Computer Science #62, </note> <year> 1978. </year>
Reference-contexts: The first result along the lines of their sparseness conjecture was P. Berman's proof that P = NP if some tally set is NP-complete <ref> [Ber78] </ref>. This result was quickly followed by Fortune's proof that if there is a sparse coNP-complete set, then P = NP [For79]. Finally, Mahaney obtained the striking result that P = NP if any NP-complete set many-one reduces to a sparse set [Mah82]. <p> However, with respect to reductions whose strength lies between Turing and many-one reductions, the question of extending Mahaney's many-one result has proved considerably more challenging. For the case of bounded truth-table reductions, Ukkonen [Ukk83] generalized Berman's result <ref> [Ber78] </ref> by showing that if there is a tally bounded 35 truth-table hard set for NP, then P = NP. Yesha [Yes83] generalized Fortune's result [For79] by showing that if there is a sparse bounded positive truth-table hard set for coNP, then P = NP. <p> The main idea is a generalization of Mahaney's proof [Mah82] that established the many-one analog of Theorem 4.1.5: if S is sparse set in NP and SAT p m S, then P = NP. We employ Berman's tree search method <ref> [Ber78] </ref> and cut down the search space to the polynomial size using a generalization of Mahaney's pseudo-complement technique. In this way, we show that the question "x ? 2 SAT" can be answered by a deterministic procedure in polynomial time.
Reference: [BF90] <author> D. Beaver and J. Feigenbaum. </author> <title> Hiding instances in multioracle queries. </title> <booktitle> In Proceedings of the 7th Annual Symposium on Theoretical Aspects of Computer Science, </booktitle> <pages> pages 37-48. </pages> <note> Springer-Verlag Lecture Notes in Computer Science #415, </note> <year> 1990. </year>
Reference-contexts: In this section, we consider the effect of allowing the powerful player to be probabilistic. The resulting model is called a one-oracle instance-hiding scheme that leaks at most the length of its input <ref> [BF90] </ref>. We present a slightly modified but equivalent definition.
Reference: [BGS75] <author> T. Baker, J. Gill, and R. Solovay. </author> <title> Relativizations of the P=?NP question. </title> <journal> SIAM Journal on Computing, </journal> <volume> 4(4) </volume> <pages> 431-442, </pages> <year> 1975. </year>
Reference-contexts: We use the standard notions for truth-table reductions [LLS75]. In particular, A p p p A p c B, respectively) denotes that A polynomial-time bounded truth-table (k-truth-table, disjunctively, conjunctively, respectively) reduces to B. We use the standard notion (that is, giving all machines access to the oracle) of relativiza-tion <ref> [BGS75] </ref>. Levels of polynomial hierarchy are defined as follows [MS72,Sto77]. 0 = P p k+1 = NP p The polynomial hierarchy, PH, is the union of all these levels. We use the standard model of nondeterministic Turing machines, in which the nondeterministic branching degree is at most two.
Reference: [BH77] <author> L. Berman and J. Hartmanis. </author> <title> On isomorphisms and density of NP and other complete sets. </title> <journal> SIAM Journal on Computing, </journal> <volume> 6(2) </volume> <pages> 305-322, </pages> <year> 1977. </year>
Reference-contexts: These two intuitions are in many ways certified by the current literature, and by the results of this chapter. 34 4.1 Reduction of NP to Conjunctive Access to a Sparse Oracle The study of sparse complete sets was sparked by the conjecture of L. Berman and J. Hartmanis <ref> [BH77] </ref> that there are no sparse NP-complete sets; they were motivated to make this conjecture since if it fails then there are NP-complete sets that are not polynomial-time isomorphic (and at that time they conjectured that all NP-complete sets were polynomial-time isomorphic, though recent work has dimmed hopes on that issue
Reference: [BHZ87] <author> R. Boppana, J. H-astad, and S. Zachos. </author> <title> Does co-NP have short inter active proofs? Information Processing Letters, </title> <booktitle> 25 </booktitle> <pages> 127-132, </pages> <year> 1987. </year>
Reference-contexts: Thus, AM is not a subset of BPP path relative to that set A, i.e., AM A 6 BPP A path . On the other hand, BPP path is not a subset of AM unless the polynomial hierarchy collapses. This follows from the result of Boppana, H-astad, and Zachos <ref> [BHZ87] </ref> that if coNP AM then the polynomial hierarchy collapses to its second level. Since coNP BPP path , we get the same consequence from the assumption that BPP path is contained in AM.
Reference: [Boo89] <author> R. </author> <title> Book. Restricted relativizations of complexity classes. </title> <editor> In J. Hart manis, editor, </editor> <booktitle> Computational Complexity Theory, Proceedings of Symposia in Applied Mathematics #38, </booktitle> <pages> pages 47-74. </pages> <publisher> American Mathematical Society, </publisher> <year> 1989. </year> <month> 77 </month>
Reference-contexts: We note that results (such as Theorem 3.2.1 and Corollary 3.2.2) that connect the existence of an oracle separation to the existence of a real-world separation (see, e.g., the survey <ref> [Boo89] </ref>) usually occur in cases in which the oracle is tremendously restricted (e.g., to 22 the class of tally sets or the class of sparse sets [BBS86,LS86]); in contrast, Section 3.2 provides such a relativization result that applies without restriction of the database D.
Reference: [CGH + 88] <author> J. Cai, T. Gundermann, J. Hartmanis, L. Hemachandra, V. Sewelson, K. Wagner, and G. Wechsung. </author> <title> The boolean hierarchy I: Structural properties. </title> <journal> SIAM Journal on Computing, </journal> <volume> 17(6) </volume> <pages> 1232-1252, </pages> <year> 1988. </year>
Reference-contexts: The boolean hierarchy is defined as the closure of NP under boolean operations. There are many equivalent ways of defining the levels of the boolean hierarchy <ref> [CGH + 88] </ref>. <p> It is known that for all k 1, NP (k) P== NP [k] NP (k + 1) [KSW87]. (The first inclusion is also implicit in <ref> [CGH + 88] </ref>.) It follows from the downward separation 64 property that the boolean hierarchy collapses if any of these inclusions is an equality. <p> Our first result answers this question affirmatively. By the above inclusions, there remain only two possible candidates for NP==Mod 2 , namely NP (k + 1) and NP (k + 2). Observe furthermore that NP==Mod 2 sets, like the odd levels of the boolean hierarchy <ref> [CGH + 88] </ref>, are closed under union with NP sets. On the other hand, even-numbered levels of the boolean hierarchy are closed under union with NP sets only if the boolean hierarchy collapses [CGH + 88]. <p> Observe furthermore that NP==Mod 2 sets, like the odd levels of the boolean hierarchy <ref> [CGH + 88] </ref>, are closed under union with NP sets. On the other hand, even-numbered levels of the boolean hierarchy are closed under union with NP sets only if the boolean hierarchy collapses [CGH + 88]. Hence, it is natural to expect that if NP==Mod NP [k] coincides with a level of the boolean hierarchy, the level will be odd.
Reference: [CK90] <author> R. Chang and J. Kadin. </author> <title> The boolean hierarchy and the polynomial hierarchy: A closer connection. </title> <booktitle> In Proceedings of the 5th Structure in Complexity Theory Conference, </booktitle> <pages> pages 169-178. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> July </month> <year> 1990. </year>
Reference-contexts: It is also known that the boolean hierarchy collapses only if the polynomial hierarchy collapses <ref> [CK90] </ref>. 5.3 Parity Advice Wagner and Wechsung [Wec85] (see also Beigel [Bei91]) showed that in order to decide a set in P== NP [k] , a P evaluator actually needs to know just the parity of the number of yes answers to k (appropriately chosen) queries to SAT.
Reference: [FFK91] <author> S. Fenner, L. Fortnow, and S. Kurtz. </author> <title> Gap-definable counting classes. </title> <booktitle> In Proceedings of the 6th Structure in Complexity Theory Conference, </booktitle> <pages> pages 30-42. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> June/July </month> <year> 1991. </year>
Reference-contexts: Thus, none of these classes can be contained in BPP path unless the polynomial hierarchy collapses. 2.6 An Oracle Distinguishes Counting Classes from BPP path Ogiwara and Hemachandra [OH93] and Fenner, Fortnow, and Kurtz <ref> [FFK91] </ref> independently defined the counting class SPP as follows. <p> SPP is the class of all sets L such that there exist a nondeterministic polynomial-time Turing machine M and an FP function f such that for all x 2 fl it holds that x 2 L =) acc M (x) = f (x) + 1; and Fenner, Fortnow, and Kurtz <ref> [FFK91] </ref> argue that SPP is, in some sense, the smallest class that is definable in terms of the number of accepting and rejecting computations. In particular, SPP is low for PP; C = P, and P [FFK91]. <p> =) acc M (x) = f (x) + 1; and Fenner, Fortnow, and Kurtz <ref> [FFK91] </ref> argue that SPP is, in some sense, the smallest class that is definable in terms of the number of accepting and rejecting computations. In particular, SPP is low for PP; C = P, and P [FFK91].
Reference: [FFKL93] <author> S. Fenner, L. Fortnow, S. Kurtz, and L. Li. </author> <title> An oracle builder's toolkit. </title> <booktitle> In Proceedings of the 8th Structure in Complexity Theory Conference, </booktitle> <pages> pages 120-131. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> May </month> <year> 1993. </year>
Reference-contexts: Theorem 2.5.2 BPP path P p 2 [log] " BPP NP . Corollary 2.5.3 BPP BPP path path = BPP path =) PH = P p 2 [log] . 1 It is not known whether NP BPP = MA. (See <ref> [FFKL93] </ref> for a relativized separation.) Since BPP is closed under truth-table reductions, it is immediate that NP BPP = 9 BPP. So the interesting question is whether 9 BPP = MA.
Reference: [FFLS92] <author> J. Feigenbaum, L. Fortnow, C. Lund, and D. Spielman. </author> <title> The power of adaptiveness and additional queries in random-self-reductions. </title> <booktitle> In Proceedings of the 7th Structure in Complexity Theory Conference, </booktitle> <pages> pages 338-346. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> June </month> <year> 1992. </year>
Reference-contexts: Oblivious self-reducibility was discussed in <ref> [FFLS92] </ref>, and we now define complexity classes capturing the notion of oblivious access. Note that oblivious access is a simple-minded way of achieving security. In oblivious access, the query stage of computation is not allowed to learn the identity of the input string other than the length thereof. <p> Note that we could also define classes, partially-secure-BPP D path and partially-secure-BPP D , based on the notion (see, e.g., <ref> [FFLS92] </ref> and the papers cited therein) that an observer watching one query should get no information other than perhaps about the length (clearly, for all D, BPP D path partially-secure-BPP D path secureBPP D path and BPP D partially-secure-BPP D secureBPP D ), and, more generally, one could study a variety
Reference: [For79] <author> S. Fortune. </author> <title> A note on sparse complete sets. </title> <journal> SIAM Journal on Com puting, </journal> <volume> 8(3) </volume> <pages> 431-433, </pages> <year> 1979. </year>
Reference-contexts: The first result along the lines of their sparseness conjecture was P. Berman's proof that P = NP if some tally set is NP-complete [Ber78]. This result was quickly followed by Fortune's proof that if there is a sparse coNP-complete set, then P = NP <ref> [For79] </ref>. Finally, Mahaney obtained the striking result that P = NP if any NP-complete set many-one reduces to a sparse set [Mah82]. <p> For the case of bounded truth-table reductions, Ukkonen [Ukk83] generalized Berman's result [Ber78] by showing that if there is a tally bounded 35 truth-table hard set for NP, then P = NP. Yesha [Yes83] generalized Fortune's result <ref> [For79] </ref> by showing that if there is a sparse bounded positive truth-table hard set for coNP, then P = NP. Yesha also (partially) generalized Mahaney's Theorem [Mah82] by showing that if there is a sparse bounded positive truth-table complete set for NP, then P = NP. <p> For the case of conjunctive reductions, Ukkonen [Ukk83] and Yap [Yap83] generalized Fortune's result <ref> [For79] </ref> by showing that if there is a sparse conjunctive hard set for coNP, then P = NP. Yap [Yap83] also (partially) generalized Ma-haney's Theorem [Mah82] by showing that if there is a sparse set that is both conjunctive and disjunctive complete for NP, then P = NP.
Reference: [Gil77] <author> J. Gill. </author> <title> Computational complexity of probabilistic Turing machines. </title> <journal> SIAM Journal on Computing, </journal> <volume> 6(4) </volume> <pages> 675-695, </pages> <year> 1977. </year>
Reference-contexts: A threshold machine is a nondeterministic Turing machine that accepts a given input if more than half of all computation paths on that input are accepting paths. Gill <ref> [Gil77] </ref> defined the class PP as the class of sets for which there exists a probabilistic polynomial-time Turing machine that accepts exactly the members of the set with probability greater than 1/2. <p> In [HHT93a], Han, Hemaspaandra, and Thierauf extend the notion of threshold computation to bounded-error probabilistic classes and introduce BPP path and R path as the threshold analogs of BPP and RP <ref> [Gil77] </ref>. <p> See [HHT93b] for proofs of the results presented in this chapter.) A probabilistic polynomial-time Turing machine <ref> [Gil77] </ref> is a nondeterministic polynomial-time Turing machine M such that M chooses with equal probability 8 each of the nondeterministic choices at each choice point. <p> We now define some complexity classes in terms of probabilistic polynomial-time Turing machines. Definition 2.2.1 (Probabilistic Classes) <ref> [Gil77] </ref> 1. PP is the class of all sets L such that there exists a probabilistic polynomial time Turing machine M such that for all x 2 fl it holds that Pr [M (x) = L (x)] &gt; 1=2. 2. <p> R is the class of all sets L such that there exists a probabilistic polynomial time Turing machine M such that for all x 2 fl it holds that x 2 L =) Pr [M (x) = 1] &gt; 1=2; and It is well known that R BPP PP <ref> [Gil77] </ref>. By looking at the portion of accepting paths rather than the probability weight of the accepting paths, we now introduce the threshold analogs of the above probabilistic classes. Let #[M (x) = 1] denote acc M (x) and let #[M (x) = 0] denote rej M (x).
Reference: [GW93] <author> R. Gavalda and O. Watanabe. </author> <title> On the computational complexity of small descriptions. </title> <journal> SIAM Journal on Computing, </journal> <volume> 22(6) </volume> <pages> 1257-1275, </pages> <year> 1993. </year> <month> 78 </month>
Reference-contexts: However, A does not two-truth-table reduce to the particular sparse set constructed in [AHOW92]. Via census-functions and graph-coloring, our techniques avoid the level of explicit coding (and thus the complexity of reduction) required by previous methods. For the case of Turing reductions, Gavalda and Watanabe <ref> [GW93] </ref> provide a relativized lower bound result; there exists a set B which reduces to a sparse set but not to a sparse set in NP B " coNP B .
Reference: [Hel86] <author> H. Heller. </author> <title> On relativized exponential and probabilistic complexity classes. </title> <journal> Information and Control, </journal> <volume> 71 </volume> <pages> 231-243, </pages> <year> 1986. </year>
Reference: [Hem89] <author> L. Hemachandra. </author> <title> The strong exponential hierarchy collapses. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 39(3) </volume> <pages> 299-322, </pages> <year> 1989. </year>
Reference-contexts: Since NP is contained in BPP path , it also follows that the closure of NP under truth-table reductions is contained in BPP path , and this can be stated equivalently (since the closure of NP under truth-table reductions equals P NP [log] <ref> [Hem89] </ref>) as the following. Corollary 2.4.4 P NP [log] BPP path . It is natural to hope that Theorem 2.4.2 can be improved to the case of Turing reductions.
Reference: [HH88] <author> J. Hartmanis and L. Hemachandra. </author> <title> Complexity classes without ma chines: On complete languages for UP. </title> <journal> Theoretical Computer Science, </journal> <volume> 58 </volume> <pages> 129-142, </pages> <year> 1988. </year>
Reference-contexts: As another example, it is an interesting open question whether BPP path has complete sets. It is known that there is a relativized world in which BPP does not contain a many-one <ref> [HH88] </ref> or Turing complete set [AS86,HH88]. <p> For a possible proof of this conjecture, one may wish to combine the diagonalization ideas of <ref> [HH88] </ref> and of Theorem 2.6.2. This approach would work if, roughly speaking, we could argue that, in each stage of diagonalization, the maximal extension of the oracle satisfying a certain adversarial condition (as in [HH88]) coincides with the maximal computation tree (as in Theorem 2.6.2). <p> For a possible proof of this conjecture, one may wish to combine the diagonalization ideas of <ref> [HH88] </ref> and of Theorem 2.6.2. This approach would work if, roughly speaking, we could argue that, in each stage of diagonalization, the maximal extension of the oracle satisfying a certain adversarial condition (as in [HH88]) coincides with the maximal computation tree (as in Theorem 2.6.2). We hope that a well-weaved combinatorial argument will settle this problem. 75
Reference: [HHT93a] <author> Y. Han, L. Hemaspaandra, and T. Thierauf. </author> <title> Threshold computa tion and cryptographic security. </title> <booktitle> In Proceedings of the 4th International Symposium on Algorithms and Computation, </booktitle> <pages> pages 230-239. </pages> <note> Springer-Verlag Lecture Notes in Computer Science #762, </note> <month> December </month> <year> 1993. </year>
Reference-contexts: Perhaps because Simon's result seemed to collapse the threshold and probabilistic models of computation, the relationship between threshold and probabilistic computing for the case of bounded error has remained unexplored. In <ref> [HHT93a] </ref>, Han, Hemaspaandra, and Thierauf extend the notion of threshold computation to bounded-error probabilistic classes and introduce BPP path and R path as the threshold analogs of BPP and RP [Gil77]. <p> PP path [Sim75] is the class of all sets L such that there exists a nondetermin istic polynomial-time Turing machine M such that for all x 2 fl it holds that #[M (x) = L (x)] &gt; 1 2 total M (x). 9 2. BPP path <ref> [HHT93a] </ref> is the class of all sets L such that there exist a nonde terministic polynomial-time Turing machine M and an * &gt; 0 such that for all x 2 fl it holds that #[M (x) = L (x)] &gt; ( 1 2 + *) total M (x). 3. <p> R path <ref> [HHT93a] </ref> is the class of all sets L such that there exists a nondeter ministic polynomial-time Turing machine M such that for all x 2 fl it holds that x 2 L =) acc M (x) &gt; 2 total M (x); and x 62 L =) rej M (x) = total
Reference: [HHT93b] <author> Y. Han, L. Hemaspaandra, and T. Thierauf. </author> <title> Threshold computation and cryptographic security. </title> <type> Technical Report TR-461, </type> <institution> University of Rochester, Department of Computer Science, Rochester, </institution> <address> NY, </address> <year> 1993. </year>
Reference-contexts: See <ref> [HHT93b] </ref> for proofs of the results presented in this chapter.) A probabilistic polynomial-time Turing machine [Gil77] is a nondeterministic polynomial-time Turing machine M such that M chooses with equal probability 8 each of the nondeterministic choices at each choice point.
Reference: [HT93] <author> Y. Han and T. Thierauf. </author> <title> Advice from nonadaptive queries to NP. </title> <type> Technical Report TR-470, </type> <institution> University of Rochester, Department of Computer Science, Rochester, </institution> <address> NY, </address> <year> 1993. </year>
Reference: [HU79] <author> J. Hopcroft and J. Ullman. </author> <title> Introduction to Automata Theory, Lan guages, and Computation. </title> <publisher> Addison-Wesley, </publisher> <year> 1979. </year>
Reference-contexts: SPARSE denotes the class of sparse sets. A function h : fl ! fl is honest if there is a polynomial p such that (8x)[jxj p (jh (x)j)]. We use P to denote the class of sets that are computable by deterministic polynomial-time Turing machines (see, e.g., <ref> [HU79] </ref> for definitions of Turing machines and other standard notions used in this thesis). FP is the class of polynomial-time computable total functions. NP is the class of sets that are com 6 putable by nondeterministic polynomial-time Turing machines.
Reference: [JY85] <author> D. Joseph and P. Young. </author> <title> Some remarks on witness functions for non-polynomial and non-complete sets in NP. </title> <journal> Theoretical Computer Science, </journal> <volume> 39 </volume> <pages> 225-237, </pages> <year> 1985. </year> <month> 79 </month>
Reference: [JY90] <author> D. Joseph and P. Young. </author> <title> Self-reducibility: Effects of internal struc ture on computational complexity. </title> <editor> In A. Selman, editor, </editor> <booktitle> Complexity Theory Retrospective, </booktitle> <pages> pages 82-107. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Yesha also (partially) generalized Mahaney's Theorem [Mah82] by showing that if there is a sparse bounded positive truth-table complete set for NP, then P = NP. These results regarding bounded truth-table reductions have been recently subsumed by Ogiwara and Watanabe ([OW91], see also [Wat88] and <ref> [JY90, footnote 9] </ref>), who successfully extended Mahaney's result and showed that if there is a sparse bounded truth-table hard set for NP, then P = NP.
Reference: [Kad89] <author> J. Kadin. </author> <title> P NP[log n] and sparse Turing-complete sets for NP. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 39(3) </volume> <pages> 282-298, </pages> <year> 1989. </year>
Reference-contexts: FP is the class of polynomial-time computable total functions. NP is the class of sets that are com 6 putable by nondeterministic polynomial-time Turing machines. P NP [log] <ref> [Kad89] </ref> denotes the class of languages accepted by some deterministic polynomial-time Turing machine that makes O (log n) queries to its NP oracle. P=poly [KL82] denotes the class of sets having small circuits. PSPACE is the class of sets that are computable by polynomial-space Turing machines. <p> For the case of Tur-ing reductions, it is known that the existence of sparse Turing-complete sets for NP would collapse the polynomial hierarchy to P NP [log] <ref> [Kad89] </ref>, and the existence of sparse Turing-hard sets for NP would collapse the polynomial hierarchy to 2 " 2 [KL82]; both these results are known to be essentially optimal with respect to relativizable proof techniques [Kad89,Hel86].
Reference: [KL82] <author> R. Karp and R. Lipton. </author> <title> Turing machines that take advice. </title> <journal> L'Enseignement Mathematique, </journal> <volume> 28 </volume> <pages> 191-209, </pages> <year> 1982. </year>
Reference-contexts: NP is the class of sets that are com 6 putable by nondeterministic polynomial-time Turing machines. P NP [log] [Kad89] denotes the class of languages accepted by some deterministic polynomial-time Turing machine that makes O (log n) queries to its NP oracle. P=poly <ref> [KL82] </ref> denotes the class of sets having small circuits. PSPACE is the class of sets that are computable by polynomial-space Turing machines. We use the standard notions for truth-table reductions [LLS75]. <p> Theorem 2.3.2 R path = NP. Corollary 2.3.3 NP BPP path . It follows that if BPP path has small circuits or BPP path has normalized machines, then, by the result of Karp, Lipton, and Sipser (see <ref> [KL82] </ref>), the polynomial hierarchy collapses. We will strengthen Corollary 2.3.3 in Section 2.4. Thus, there is little hope that BPP path has normalized machines. Nonetheless, BPP path does have normalized 3-output machines. <p> For the case of Tur-ing reductions, it is known that the existence of sparse Turing-complete sets for NP would collapse the polynomial hierarchy to P NP [log] [Kad89], and the existence of sparse Turing-hard sets for NP would collapse the polynomial hierarchy to 2 " 2 <ref> [KL82] </ref>; both these results are known to be essentially optimal with respect to relativizable proof techniques [Kad89,Hel86]. As just noted, for the cases of many-one and Turing reductions the consequences of sparse NP-complete sets are well-understood. <p> Thus, a typical language in our model can be identified by specifying an evaluator and an advice function. Actually, Kobler and Thierauf were motivated by the notion of advice that had been originally introduced by Karp and Lipton <ref> [KL82] </ref>. Note that the advice of Kobler and Thierauf is a function of the input string whereas the advice of Karp and Lipton depends only on the length of the input string.
Reference: [KMR89] <author> S. Kurtz, S. Mahaney, and J. Royer. </author> <title> The isomorphism conjecture fails relative to a random oracle. </title> <booktitle> In Proceedings of the 21st ACM Symposium on Theory of Computing, </booktitle> <pages> pages 157-166. </pages> <publisher> ACM Press, </publisher> <month> May </month> <year> 1989. </year>
Reference: [Ko82] <author> K. Ko. </author> <title> Some observations on the probabilistic algorithms and NP hard problems. </title> <journal> Information Processing Letters, </journal> <volume> 14(1) </volume> <pages> 39-43, </pages> <year> 1982. </year>
Reference: [KSTT92] <author> J. Kobler, U. Schoning, S. Toda, and J. Toran. </author> <title> Turing machines with few accepting computations and low sets for PP. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 44(2) </volume> <pages> 272-286, </pages> <year> 1992. </year>
Reference-contexts: It is known that BPP is low for PP <ref> [KSTT92] </ref> and for itself [Ko82,Zac82], i.e., PP BPP = PP and BPP BPP = BPP. We show in the next theorem that BPP is also low for BPP path .
Reference: [KSW87] <author> J. Kobler, U. Schoning, and K. Wagner. </author> <title> The difference and truth table hierarchies of NP. </title> <journal> R.A.I.R.O. Informatique theorique et Applications, </journal> <volume> 21(4) </volume> <pages> 419-435, </pages> <year> 1987. </year>
Reference-contexts: It is known that for all k 1, NP (k) P== NP [k] NP (k + 1) <ref> [KSW87] </ref>. (The first inclusion is also implicit in [CGH + 88].) It follows from the downward separation 64 property that the boolean hierarchy collapses if any of these inclusions is an equality.
Reference: [KT90] <author> J. Kobler and T. Thierauf. </author> <title> Complexity classes with advice. </title> <booktitle> In Pro ceedings of the 5th Structure in Complexity Theory Conference, </booktitle> <pages> pages 305-315. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> July </month> <year> 1990. </year> <note> To appear in SIAM Journal on Computing. </note>
Reference-contexts: This model of computation and the resulting classes of languages have been studied by Beigel [Bei91] and, more generally, by Kobler and Thierauf <ref> [KT90] </ref>. To denote these classes of languages, we adopt the advice class notation devised by Kobler and Thierauf [KT90]. The information that is obtained from the answers to the queries and subsequently made available to an evaluator is called advice. <p> This model of computation and the resulting classes of languages have been studied by Beigel [Bei91] and, more generally, by Kobler and Thierauf <ref> [KT90] </ref>. To denote these classes of languages, we adopt the advice class notation devised by Kobler and Thierauf [KT90]. The information that is obtained from the answers to the queries and subsequently made available to an evaluator is called advice. When we consider advice as a function of the input string, we refer to it as an advice function. <p> In case advice functions in NP [k] or # NP [k] are given to nondeterministic polynomial-time evaluators instead of deterministic polynomial-time evaluators, the resulting complexity classes are much stronger. Namely, Kobler and Thier-auf <ref> [KT90] </ref> showed that for all k 0, NP== NP [k] = NP==# NP [k] = NP (2k + 1), where NP (2k + 1) is the (2k + 1)-th level of the boolean hierarchy. <p> with the (k + 2)-th level of the boolean hierarchy; i.e., for all k 0, NP==Mod 2 = NP==Mod 2 = NP (2k + 3): This result completely characterizes NP==Mod NP [k] 2 classes in terms of the levels of the boolean hierarchy, thereby solving an open question raised in <ref> [KT90] </ref>. In Section 5.4, we turn our attention to the classes NP==Mod NP [k] m for arbitrary m 2. <p> For the intersection A " B, we often omit the intersection symbol and simply write AB. Definition 5.2.1 (Advice Classes) <ref> [KT90] </ref> Let C be a class of languages and let F be a class of functions from fl to fl . <p> Note that a function in NP [k] provides advice of length k, whereas parity advice consists of just one bit. Theorem 5.3.1 [Wec85] For k 0, P== NP [k] = P==# NP [k] = P==Mod NP [k] Motivated by Theorem 5.3.1, Kobler and Thierauf <ref> [KT90] </ref> studied the corresponding advice classes where the advice is given to NP evaluators instead of P evaluators. They showed that the counterpart of the first equality of Theorem 5.3.1 holds in this case and that the resulting class coincides with the (2k +1)-th level of the boolean hierarchy. <p> They showed that the counterpart of the first equality of Theorem 5.3.1 holds in this case and that the resulting class coincides with the (2k +1)-th level of the boolean hierarchy. Theorem 5.3.2 <ref> [KT90] </ref> For k 0, NP== NP [k] = NP==# NP [k] = NP (2k + 1). How about NP==Mod NP [k] 2 ? Let L be a language in NP==Mod NP [k] 2 . <p> Consequently, the second equality in 65 Theorem 5.3.1 does not carry over to NP for k 2, unless the boolean hierarchy collapses. As a lower bound, we clearly have P== NP [k] NP==Mod NP [k] posed as an open question in <ref> [KT90] </ref> whether the class NP==Mod NP [k] 2 coincides with some level of the boolean hierarchy. Our first result answers this question affirmatively. By the above inclusions, there remain only two possible candidates for NP==Mod 2 , namely NP (k + 1) and NP (k + 2).
Reference: [LLS75] <author> R. Ladner, N. Lynch, and A. Selman. </author> <title> A comparison of polynomial time reducibilities. </title> <journal> Theoretical Computer Science, </journal> <volume> 1(2) </volume> <pages> 103-124, </pages> <year> 1975. </year> <month> 80 </month>
Reference-contexts: P=poly [KL82] denotes the class of sets having small circuits. PSPACE is the class of sets that are computable by polynomial-space Turing machines. We use the standard notions for truth-table reductions <ref> [LLS75] </ref>. In particular, A p p p A p c B, respectively) denotes that A polynomial-time bounded truth-table (k-truth-table, disjunctively, conjunctively, respectively) reduces to B. We use the standard notion (that is, giving all machines access to the oracle) of relativiza-tion [BGS75]. <p> Other filters are even more restrictive: they pass the remainder of this number modulo some constant. We show, for example, that a single bit that is the sole survivor of severe filtering may, in some cases, contain very powerful information. 5.1 Introduction A bounded truth-table reduction <ref> [LLS75] </ref> is defined in terms of a generator, an evaluator, and an oracle. Given an input string whose membership is determined by the bounded truth-table reduction, the generator produces a list of strings whose number is bounded by a constant. <p> As another example, P== NP [k] is the class of languages that are k-truth-table reducible to an NP set <ref> [LLS75] </ref>; i.e., P== NP [k] = P NP k-tt .
Reference: [Lon82] <author> T. </author> <title> Long. Strong nondeterministic polynomial-time reducibilities. </title> <journal> Theoretical Computer Science, </journal> <volume> 21 </volume> <pages> 1-25, </pages> <year> 1982. </year>
Reference: [LS86] <author> T. Long and A. Selman. </author> <title> Relativizing complexity classes with sparse oracles. </title> <journal> Journal of the ACM, </journal> <volume> 33(3) </volume> <pages> 618-627, </pages> <year> 1986. </year>
Reference: [Mah82] <author> S. Mahaney. </author> <title> Sparse complete sets for NP: Solution of a conjecture of Berman and Hartmanis. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 25(2) </volume> <pages> 130-143, </pages> <year> 1982. </year>
Reference-contexts: This result was quickly followed by Fortune's proof that if there is a sparse coNP-complete set, then P = NP [For79]. Finally, Mahaney obtained the striking result that P = NP if any NP-complete set many-one reduces to a sparse set <ref> [Mah82] </ref>. Although Mahaney obtained the complete collapse of the polynomial hierarchy in the case of many-one reducibility, possible collapses in the case of more flexible reducibilities have remained an active research area. <p> Yesha [Yes83] generalized Fortune's result [For79] by showing that if there is a sparse bounded positive truth-table hard set for coNP, then P = NP. Yesha also (partially) generalized Mahaney's Theorem <ref> [Mah82] </ref> by showing that if there is a sparse bounded positive truth-table complete set for NP, then P = NP. <p> For the case of conjunctive reductions, Ukkonen [Ukk83] and Yap [Yap83] generalized Fortune's result [For79] by showing that if there is a sparse conjunctive hard set for coNP, then P = NP. Yap [Yap83] also (partially) generalized Ma-haney's Theorem <ref> [Mah82] </ref> by showing that if there is a sparse set that is both conjunctive and disjunctive complete for NP, then P = NP. However, in the decade since Mahaney's Theorem, it has remained an open question whether his result can be extended to the case of conjunctive reductions. <p> The proof of this theorem is presented in the rest of this subsection. The main idea is a generalization of Mahaney's proof <ref> [Mah82] </ref> that established the many-one analog of Theorem 4.1.5: if S is sparse set in NP and SAT p m S, then P = NP. We employ Berman's tree search method [Ber78] and cut down the search space to the polynomial size using a generalization of Mahaney's pseudo-complement technique.
Reference: [MP79] <author> A. Meyer and M. Paterson. </author> <title> With what frequency are apparently intractable problems difficult? Technical Report MIT/LCS/TM-126, </title> <institution> MIT Laboratory for Computer Science, </institution> <address> Cambridge, MA, </address> <year> 1979. </year>
Reference-contexts: In Section 4.1.2, we also prove: Theorem 4.1.2 If a set A is disjunctively self-reducible, and A conjunctively reduces to a sparse set, then A 2 P. This theorem is an extension of the corresponding many-one version in Meyer and Paterson <ref> [MP79] </ref>. 36 4.1.1 Proof of Theorem 4.1.1 In this subsection we prove that the existence of a sparse conjunctive hard language for NP leads to P = NP.
Reference: [MS72] <author> A. Meyer and L. Stockmeyer. </author> <title> The equivalence problem for regular expressions with squaring requires exponential space. </title> <booktitle> In Proceedings of the 13th IEEE Symposium on Switching and Automata Theory, </booktitle> <pages> pages 125-129, </pages> <year> 1972. </year>
Reference: [OH93] <author> M. Ogiwara and L. Hemachandra. </author> <title> A complexity theory for feasible closure properties. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 46 </volume> <pages> 295-325, </pages> <year> 1993. </year>
Reference-contexts: As a consequence, none of these classes can be contained in the polynomial hierarchy unless the polynomial hierarchy collapses. Thus, none of these classes can be contained in BPP path unless the polynomial hierarchy collapses. 2.6 An Oracle Distinguishes Counting Classes from BPP path Ogiwara and Hemachandra <ref> [OH93] </ref> and Fenner, Fortnow, and Kurtz [FFK91] independently defined the counting class SPP as follows.
Reference: [OW91] <author> M. Ogiwara and O. Watanabe. </author> <title> On polynomial-time bounded truth table reducibility of NP sets to sparse sets. </title> <journal> SIAM Journal on Computing, </journal> <volume> 20(3) </volume> <pages> 471-483, </pages> <year> 1991. </year>
Reference: [RR92] <author> D. Ranjan and P. Rohatgi. </author> <title> On randomized reductions to sparse sets. </title> <booktitle> In Proceedings of the 7th Structure in Complexity Theory Conference, </booktitle> <pages> pages 239-242. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> June </month> <year> 1992. </year>
Reference-contexts: In this section, we resolve this question by showing that if any NP-complete set conjunctively reduces to a sparse set, then P = NP. The result has been obtained independently by Ranjan and Rohatgi <ref> [RR92] </ref> using the left set technique. In Section 4.1.1, we present a proof that uses Mahaney's pseudo-complement technique. Theorem 4.1.1 If there is a sparse conjunctive hard language for NP, then P = NP.
Reference: [Sim75] <author> J. Simon. </author> <title> On Some Central Problems in Computational Complexity. </title> <type> PhD thesis, </type> <institution> Cornell Univeristy, </institution> <address> Ithaca, N.Y., </address> <month> January </month> <year> 1975. </year> <note> Available 81 as Cornell Department of Computer Science Technical Report TR75-224. </note>
Reference-contexts: k ) equals (a) h*; *i when k = 0, (b) h*; x 1 + 1i when k = 1, and (c) hk s ; hx 1 ; hx 2 ; h hx k1 ; x k i iiii when k 2. 2.2 Probabilistic and Threshold Computation In 1975, Simon <ref> [Sim75] </ref> defined threshold machines. A threshold machine is a nondeterministic Turing machine that accepts a given input if more than half of all computation paths on that input are accepting paths. <p> Gill [Gil77] defined the class PP as the class of sets for which there exists a probabilistic polynomial-time Turing machine that accepts exactly the members of the set with probability greater than 1/2. Simon <ref> [Sim75] </ref> showed that the class of sets accepted by polynomial-time threshold machines characterizes the unbounded-error probabilistic class PP. Perhaps because Simon's result seemed to collapse the threshold and probabilistic models of computation, the relationship between threshold and probabilistic computing for the case of bounded error has remained unexplored. <p> Let #[M (x) = 1] denote acc M (x) and let #[M (x) = 0] denote rej M (x). Definition 2.2.2 (Threshold Classes) 1. PP path <ref> [Sim75] </ref> is the class of all sets L such that there exists a nondetermin istic polynomial-time Turing machine M such that for all x 2 fl it holds that #[M (x) = L (x)] &gt; 1 2 total M (x). 9 2. <p> Thus, each of the probabilistic classes is contained in the corresponding threshold class, i.e., PP PP path , BPP BPP path and R R path . In fact, Simon <ref> [Sim75] </ref> has already shown that PP path is not a bigger class than PP. Theorem 2.3.1 [Sim75] PP path = PP. 10 Interestingly, this equivalence between probabilistic and threshold classes cannot hold for R and BPP unless the polynomial hierarchy [MS72,Sto77] collapses to its second level. <p> Thus, each of the probabilistic classes is contained in the corresponding threshold class, i.e., PP PP path , BPP BPP path and R R path . In fact, Simon <ref> [Sim75] </ref> has already shown that PP path is not a bigger class than PP. Theorem 2.3.1 [Sim75] PP path = PP. 10 Interestingly, this equivalence between probabilistic and threshold classes cannot hold for R and BPP unless the polynomial hierarchy [MS72,Sto77] collapses to its second level.
Reference: [Sip83] <author> M. Sipser. </author> <title> A complexity theoretic approach to randomness. </title> <booktitle> In Pro ceedings of the 15th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 330-335, </pages> <year> 1983. </year>
Reference-contexts: This follows from the result of Boppana, H-astad, and Zachos [BHZ87] that if coNP AM then the polynomial hierarchy collapses to its second level. Since coNP BPP path , we get the same consequence from the assumption that BPP path is contained in AM. Sipser <ref> [Sip83] </ref> located BPP within the second level of the polynomial hierarchy by showing that BPP R NP . It is an open question whether the same inclusion holds for BPP path . Nonetheless, with the help of Sipser's Coding Lemma for universal hashing [Sip83], we can show that BPP path is <p> Sipser <ref> [Sip83] </ref> located BPP within the second level of the polynomial hierarchy by showing that BPP R NP . It is an open question whether the same inclusion holds for BPP path . Nonetheless, with the help of Sipser's Coding Lemma for universal hashing [Sip83], we can show that BPP path is included in the third level of the polynomial hierarchy. Theorem 2.5.2 BPP path P p 2 [log] " BPP NP .
Reference: [Sto77] <author> L. Stockmeyer. </author> <title> The polynomial-time hierarchy. </title> <journal> Theoretical Computer Science, </journal> <volume> 3 </volume> <pages> 1-22, </pages> <year> 1977. </year>
Reference: [TO92] <author> S. Toda and M. Ogiwara. </author> <title> Counting classes are at least as hard as the polynomial-time hierarchy. </title> <journal> SIAM Journal on Computing, </journal> <volume> 21(2) </volume> <pages> 316-328, </pages> <year> 1992. </year>
Reference-contexts: Since this result relativizes (i.e., for all A, NP A BPP A implies PH A = BPP A ), we obtain the following corollary from Theorem 2.5.2. Corollary 2.5.4 p 2 BPP path =) PH = BPP NP . Toda [Tod91] and Toda and Ogiwara <ref> [TO92] </ref> showed that PH BPP C for any class C among fPP; C = P; Pg. As a consequence, none of these classes can be contained in the polynomial hierarchy unless the polynomial hierarchy collapses.
Reference: [Tod91] <author> S. </author> <title> Toda. PP is as hard as the polynomial-time hierarchy. </title> <journal> SIAM Journal on Computing, </journal> <volume> 20(5) </volume> <pages> 865-877, </pages> <year> 1991. </year>
Reference-contexts: Since this result relativizes (i.e., for all A, NP A BPP A implies PH A = BPP A ), we obtain the following corollary from Theorem 2.5.2. Corollary 2.5.4 p 2 BPP path =) PH = BPP NP . Toda <ref> [Tod91] </ref> and Toda and Ogiwara [TO92] showed that PH BPP C for any class C among fPP; C = P; Pg. As a consequence, none of these classes can be contained in the polynomial hierarchy unless the polynomial hierarchy collapses.
Reference: [Ukk83] <author> E. Ukkonen. </author> <title> Two results on polynomial time truth-table reductions to sparse sets. </title> <journal> SIAM Journal on Computing, </journal> <volume> 12(3) </volume> <pages> 580-587, </pages> <year> 1983. </year>
Reference-contexts: However, with respect to reductions whose strength lies between Turing and many-one reductions, the question of extending Mahaney's many-one result has proved considerably more challenging. For the case of bounded truth-table reductions, Ukkonen <ref> [Ukk83] </ref> generalized Berman's result [Ber78] by showing that if there is a tally bounded 35 truth-table hard set for NP, then P = NP. Yesha [Yes83] generalized Fortune's result [For79] by showing that if there is a sparse bounded positive truth-table hard set for coNP, then P = NP. <p> For the case of conjunctive reductions, Ukkonen <ref> [Ukk83] </ref> and Yap [Yap83] generalized Fortune's result [For79] by showing that if there is a sparse conjunctive hard set for coNP, then P = NP. <p> The following lemma introduces an algorithm that is called repeatedly as a subroutine in the proof of the main theorem. The lemma was originally proved by Ukkonen <ref> [Ukk83] </ref> to establish that if SAT p c S and S is sparse, then P = NP. We present it in a slightly modified form that fits better with the other proofs 2 In this section, the polynomial s (n) is used to denote this upper bound.
Reference: [Ver92] <author> N. Vereshchagin. </author> <title> On the power of PP. </title> <booktitle> In Proceedings of the 7th Structure in Complexity Theory Conference, </booktitle> <pages> pages 138-143. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> June </month> <year> 1992. </year>
Reference-contexts: It is known that NP BPP MA AM BPP NP [Bab85,Zac88]. 1 The next theorem strengthens Corollary 2.4.6 to show that even MA is contained in BPP path . This improves the result of Vereshchagin <ref> [Ver92] </ref> that MA PP. Theorem 2.5.1 MA BPP path . It is an open question whether AM is contained in BPP path . Vereshcha-gin [Ver92] constructed a set A such that relative to A the class AM is not a subset of PP, i.e., AM A 6 PP A . <p> This improves the result of Vereshchagin <ref> [Ver92] </ref> that MA PP. Theorem 2.5.1 MA BPP path . It is an open question whether AM is contained in BPP path . Vereshcha-gin [Ver92] constructed a set A such that relative to A the class AM is not a subset of PP, i.e., AM A 6 PP A . Thus, AM is not a subset of BPP path relative to that set A, i.e., AM A 6 BPP A path .
Reference: [Wat88] <author> O. Watanabe. </author> <title> On p 1tt sparseness and nondeterministic complexity classes. </title> <booktitle> In Proceedings of the 15th International Colloquium on Automata, Languages, and Programming, </booktitle> <pages> pages 697-709. </pages> <note> Springer-Verlag Lecture Notes in Computer Science #317, </note> <month> July </month> <year> 1988. </year>
Reference-contexts: Yesha also (partially) generalized Mahaney's Theorem [Mah82] by showing that if there is a sparse bounded positive truth-table complete set for NP, then P = NP. These results regarding bounded truth-table reductions have been recently subsumed by Ogiwara and Watanabe ([OW91], see also <ref> [Wat88] </ref> and [JY90, footnote 9]), who successfully extended Mahaney's result and showed that if there is a sparse bounded truth-table hard set for NP, then P = NP.
Reference: [Wec85] <author> G. Wechsung. </author> <title> On the boolean closure of NP. </title> <booktitle> In Proceedings of the 5th Conference on Fundamentals of Computation Theory, </booktitle> <pages> pages 485-493. </pages> <note> Springer-Verlag Lecture Notes in Computer Science #199 , 1985. (An unpublished precursor of this paper was coauthored by K. Wagner). 82 </note>
Reference-contexts: In order to be able to discuss separately each of the truth-tables that may be used in a 2-truth-table reduction, we introduce the following definition. Definition 4.2.5 (Fixed truth-table reductions) <ref> [Wec85] </ref> A truth-table reduction is called a fixed truth-table reduction if it uses the same truth-table 4 The author thanks V. Arvind and J. Kobler for comments that helped improve his previous proof. 45 for all its inputs. <p> As another example, P== NP [k] is the class of languages that are k-truth-table reducible to an NP set [LLS75]; i.e., P== NP [k] = P NP k-tt . In case advice functions are given to deterministic polynomial-time evaluators, Wagner and Wechsung <ref> [Wec85] </ref> have shown a remarkable result: whether advice functions give full record of the answers to the queries or only the parity (a single bit!) of the number of queried strings that are in the oracle, the resulting class of languages remains unchanged. <p> What happens when parity advice is given to NP evaluators? It is easy to see that the result of Wagner and Wechsung <ref> [Wec85] </ref> mentioned above cannot carry over to NP evaluators, unless the boolean hierarchy collapses. We show in Section 5.3 that NP==Mod NP [k] 2 coincide with a level of the boolean hierarchy that is much lower than NP==# NP [k] . <p> It is also known that the boolean hierarchy collapses only if the polynomial hierarchy collapses [CK90]. 5.3 Parity Advice Wagner and Wechsung <ref> [Wec85] </ref> (see also Beigel [Bei91]) showed that in order to decide a set in P== NP [k] , a P evaluator actually needs to know just the parity of the number of yes answers to k (appropriately chosen) queries to SAT. <p> Note that a function in NP [k] provides advice of length k, whereas parity advice consists of just one bit. Theorem 5.3.1 <ref> [Wec85] </ref> For k 0, P== NP [k] = P==# NP [k] = P==Mod NP [k] Motivated by Theorem 5.3.1, Kobler and Thierauf [KT90] studied the corresponding advice classes where the advice is given to NP evaluators instead of P evaluators.
Reference: [Yao82] <author> A. Yao. </author> <title> Theory and applications of trapdoor functions. </title> <booktitle> In Proceedings of the 23rd IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 80-91, </pages> <year> 1982. </year>
Reference-contexts: Also, it would be interesting to study a more relaxed model of security that allows a moderate degree of discrepancy in the distribution of query patterns that cannot be detected by polynomial-time statistical tests <ref> [Yao82] </ref>. 33 4 Oracles of Low Information Content This chapter is concerned with two basic questions about sparse sets: * With respect to what types of reductions might NP have hard or complete sparse sets? * If a set A reduces to a sparse set, does it follow that A is
Reference: [Yap83] <author> C. Yap. </author> <title> Some consequences of non-uniform conditions on uniform classes. </title> <journal> Theoretical Computer Science, </journal> <volume> 26 </volume> <pages> 287-300, </pages> <year> 1983. </year>
Reference-contexts: For the case of conjunctive reductions, Ukkonen [Ukk83] and Yap <ref> [Yap83] </ref> generalized Fortune's result [For79] by showing that if there is a sparse conjunctive hard set for coNP, then P = NP. Yap [Yap83] also (partially) generalized Ma-haney's Theorem [Mah82] by showing that if there is a sparse set that is both conjunctive and disjunctive complete for NP, then P = <p> For the case of conjunctive reductions, Ukkonen [Ukk83] and Yap <ref> [Yap83] </ref> generalized Fortune's result [For79] by showing that if there is a sparse conjunctive hard set for coNP, then P = NP. Yap [Yap83] also (partially) generalized Ma-haney's Theorem [Mah82] by showing that if there is a sparse set that is both conjunctive and disjunctive complete for NP, then P = NP.
Reference: [Yes83] <author> Y. Yesha. </author> <title> On certain polynomial-time truth-table reducibilities of complete sets to sparse sets. </title> <journal> SIAM Journal on Computing, </journal> <volume> 12(3) </volume> <pages> 411-425, </pages> <year> 1983. </year>
Reference-contexts: For the case of bounded truth-table reductions, Ukkonen [Ukk83] generalized Berman's result [Ber78] by showing that if there is a tally bounded 35 truth-table hard set for NP, then P = NP. Yesha <ref> [Yes83] </ref> generalized Fortune's result [For79] by showing that if there is a sparse bounded positive truth-table hard set for coNP, then P = NP. Yesha also (partially) generalized Mahaney's Theorem [Mah82] by showing that if there is a sparse bounded positive truth-table complete set for NP, then P = NP.
Reference: [Zac82] <author> S. Zachos. </author> <title> Robustness of probabilistic complexity classes under defi nitional perturbations. </title> <journal> Information and Control, </journal> <volume> 54 </volume> <pages> 143-154, </pages> <year> 1982. </year>
Reference: [Zac88] <author> S. Zachos. </author> <title> Probabilistic quantifiers and games. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 36 </volume> <pages> 433-451, </pages> <year> 1988. </year>
Reference-contexts: It is an open question whether the weakened requirement lets MA accept more languages than 9 BPP. 14 Zachos <ref> [Zac88] </ref> has shown that NP BPP implies PH = BPP. Since this result relativizes (i.e., for all A, NP A BPP A implies PH A = BPP A ), we obtain the following corollary from Theorem 2.5.2. Corollary 2.5.4 p 2 BPP path =) PH = BPP NP .
Reference: [ZH86] <author> S. Zachos and H. Heller. </author> <title> A decisive characterization of BPP. </title> <journal> Infor mation and Control, </journal> <volume> 69 </volume> <pages> 125-135, </pages> <year> 1986. </year>
Reference-contexts: Although the previous section implies that BPP and BPP path differ unless the polynomial hierarchy collapses, these classes nonetheless share certain properties. For example, as is also the case for BPP (see, e.g., <ref> [ZH86] </ref>), BPP path has a strong amplification property. Theorem 2.4.1 Let L be in BPP path .
References-found: 63

