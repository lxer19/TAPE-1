URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/rbd/www/papers/rtsd2.ps.Z
Refering-URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/rbd/www/bib-scheduling.html
Root-URL: 
Title: A Real Time Scheduler/Dispatcher  
Author: Roger B. Dannenberg 
Date: December 7, 1996  
Address: Pittsburgh, PA 15213 USA  
Affiliation: Computer Science Department and Center for Art and Technology Carnegie Mellon University  
Abstract: Real-time systems often spend an inordinate amount of time getting ready to do things in the future and deciding what to do next. Designating a task to be performed at some time in the future, or scheduling, and finding the next task to be run, or dispatching, typically take a total time which is linear in the number of waiting tasks. A new algorithm is presented in which the time for both scheduling and dispatching is bounded by a small constant. An additional constant load is placed on the processor, and a modest background processing load is also imposed. The new algorithm is compared to other popular real-time scheduler/dispatcher strategies. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Adel'son-Vel'skii, G. M. </author> <year> 1962. </year> <title> "An Algorithm for the Organization of Information." </title> <journal> Dokl. Akad. Nauk SSR 146: 263-6 (in Russian). English translation in (1962) Soviet Math. Dokl. </journal> <volume> 3 </volume> <pages> 1259-62. </pages>
Reference-contexts: One method is the use of balanced binary trees <ref> [1, 3] </ref>. A balanced binary tree allows items with time tags to be inserted in random order and removed in the order indicated by the time tags.
Reference: [2] <author> Anderson, D. and Kuivila, R. </author> <year> 1986. </year> <title> "Accurately Timed Generation of Discrete Musical Events." </title> <journal> Computer Music Journal 10(3): </journal> <pages> 48-56. </pages>
Reference-contexts: This technique is described Varghese and Lauck [5] and is used in the current implementation of Formula <ref> [2] </ref>. At each clock tick, the dispatcher only looks at one of the N lists. For this scheme to work, either the scheduler must sort the lists or the dispatcher must inspect every element on the list.
Reference: [3] <author> Horowitz, E. and Sahni, S. </author> <year> 1987. </year> <title> Fundamentals of Data Structures in Pascal. </title> <publisher> Computer Science Press. </publisher>
Reference-contexts: One method is the use of balanced binary trees <ref> [1, 3] </ref>. A balanced binary tree allows items with time tags to be inserted in random order and removed in the order indicated by the time tags. <p> do this in the form of a "polling loop" that looks for ready-to-run tasks. (With the previous dispatchers, a programmable timer can be used to eliminate polling by interrupting the processor when it is time to dispatch the next task.) To do better, we use a technique called hashing 1 <ref> [3] </ref> in which a table of lists rather than a simple list is used to remember scheduled tasks.
Reference: [4] <author> Matthews, M. and Pierce, J., </author> <title> editors. (to appear). System Development Foundation Computer Music Benchmark. </title> <publisher> M.I.T. Press. </publisher>
Reference-contexts: A more extensive presentation of this algorithm and a few related ones will appear in a forthcoming book <ref> [4] </ref>. This research was partially sponsored by the Defense Advanced Research Projects Agency (DOD), ARPA Order No. 4976 under contract F33615-87-C-1499 and monitored by the: Avionics Laboratory, Air Force Wright Aeronautical Laboratories, Aeronautical Systems Division (AFSC), Wright-Patterson AFB, Ohio, 45433-6543.
Reference: [5] <author> Varghese, G. and Lauck, T. </author> <year> 1987. </year> <title> "Hashed and Hierarchical Timing Wheels: Data Structures for the Efficient Implementation of a Timer Facility." </title> <booktitle> Proceedings of the Eleventh ACM Symposium on Operating Systems Principles pp. </booktitle> <pages> 25-38, </pages> <note> published as Operating Systems Review 21(5), ACM Order No. 534870. </note>
Reference-contexts: If the table has N locations and we want to schedule a task for time T, then the task is put on the list at table location T mod N (the remainder of T divided by N). This technique is described Varghese and Lauck <ref> [5] </ref> and is used in the current implementation of Formula [2]. At each clock tick, the dispatcher only looks at one of the N lists. For this scheme to work, either the scheduler must sort the lists or the dispatcher must inspect every element on the list.
References-found: 5

