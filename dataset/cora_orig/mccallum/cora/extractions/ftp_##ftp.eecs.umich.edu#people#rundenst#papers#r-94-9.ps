URL: ftp://ftp.eecs.umich.edu/people/rundenst/papers/r-94-9.ps
Refering-URL: http://www.eecs.umich.edu/~rundenst/group/papers.html
Root-URL: http://www.cs.umich.edu
Email: e-mail: [ywh j jning j rundenst] @eecs.umich.edu  
Title: A Semi-Materialized View Approach for Route Guidance in Intelligent Vehicle Highway Systems  
Author: Yun-Wu Huangy, Ning Jingz, and Elke A. Rundensteinery 
Keyword: Index Terms View Materialization, Encoded Path Structure, Route Guidance, Map Databases, Cycle Detection.  
Address: Ann Arbor, MI48109  Changsha, Hunan, China  
Affiliation: Dept. of Electrical Engineering and Computer Science, Univ. of Michigan,  Dept. of Electrical Engineering, Changsha Institute of Technology,  
Abstract: Efficient path computation necessary for route guidance has been identified as one of the key requirements for Intelligent Vehicle Highway Systems (IVHS) applications. While the current IVHS literature has focused on the application of search algorithms (typically, heuristic A* algorithms) to provide for compute-on-demand path finding, we propose a semi-materialized path view approach that pre-computes optimal paths. Advantages of our approach include (1) route computation is very efficient and no longer dependent on the number of route requests and (2) the storage overhead is less than for the full enumeration of all possible paths. In this paper, we present algorithms for incrementally updating the encoded path view structure in response to weight changes on the traffic links of the underlying network, e.g., a slower link traversal time, a congestion, etc. Our algorithms are designed to operate correctly on cyclic graphs | given that IVHS maps typically correspond to highly interconnected grids. In this paper, we show that while our approach does not encode all paths, it omits paths only if they have undesirable path weights. We demonstrate the potential of our approach by presenting experimental results of evaluating our approach, and of comparing it against more conventional path searching algorithms. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Rakesh Agrawal and H. V. Jagadish, </author> <title> "Materialization and Incremental Update of Path Information", </title> <booktitle> IEEE 5th Int. Conf. on Data Engineering, </booktitle> <year> 1989, </year> <pages> pp. 374 - 383. </pages>
Reference-contexts: If all paths are enumerated in such a path view, a single lookup query would suffice to meet any path request, making route guidance independent of the number of requests per time period. However, such a scheme requires an unrealistically large amount of storage. The encoded structure proposed by <ref> [1] </ref>, a semi-materialized view approach, is a compromise between space and retrieval efficiency. <p> Although our algorithms do not encode all possible paths, only paths with undesirable path weights are omitted. In the next section, we describe a path encoding structure using a graph model initially proposed by <ref> [1] </ref>, extend it under IVHS context, and establish the view tables for the structure. In Section 3, we present the two update algorithms. Section 4 describes experimental results. <p> The encoded path view, on the other hand, precomputes best paths for all node-pairs. The best paths are retrieved by looking up in the materialized view, eliminating the need for the search algorithms. In this section, we introduce IVHS maps with a graph model, present the encoded structure <ref> [1] </ref>, and describe how path retrieval is achieved. 2.1 IVHS Maps An IVHS map in the simplest sense is a map of roads and intersections, with the latter being the connecting points of two or more of the former. <p> The key idea of this approach is to distribute partial encodings of best paths throughout the network, such that materialized paths can be shared by different nodes along the path fragments. More precisely, the semi-materialized path structure <ref> [1] </ref> encodes a path by associating with each node a 3-tuple table, called destination table. <p> In this section, we present two algorithms that incrementally update the materialized view for a link weight increase and decrease, respectively. While the update approach described in <ref> [1] </ref> was restricted to acyclic graphs, the algorithms presented below correctly operate on cyclic graphs as typically found in IVHS. 3.1 The Link Weight Decrease Algorithm Given G = (V; E; L) in Figure 1, let L xy be the link to be updated. <p> case of multiple queries actually refers to a frequently updated path, triggered by actual changes in traffic conditions rather than by continuously re-issuing the same path request. 5 RELATED RESEARCH Our research presented in this paper is based on the encoding approach of materialized paths proposed by Agrawal and Jagadish <ref> [1] </ref>. They have shown (using simulation) that this encoding structure has an acceptable storage overhead compared to maintaining all possible paths. In this paper, we have applied this semi-materialized path view technique to the IVHS route guidance problem.
Reference: [2] <author> Rakesh Agrawal and Jerry Kiernan, </author> <title> "An Access Structure for Generalized Transitive Closure Queries", </title> <booktitle> IEEE 9th Int. Conf on Data Engineering, </booktitle> <year> 1993, </year> <pages> pp. 429 - 438. </pages>
Reference-contexts: Such work is typically of generic nature, while the main purpose of our project is to provide database technology customized to addressing the route guidance problem in the IVHS context. For example, Agrawal and Kiernan <ref> [2] </ref> proposed an access structure to process transitive closure queries.
Reference: [3] <author> R. E. Bellman, </author> <title> "On a routing problem", </title> <journal> Quart. Appl. Math. </journal> <volume> 16, </volume> <year> 1958, </year> <pages> pp. 87 - 90. </pages>
Reference: [4] <author> T. Cormen, C. Leiserson, and R. L. Rivest, </author> <title> "Introduction to Algorithms", </title> <publisher> The MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: This poses a stringent requirement on algorithms that perform the path search. However, finding the best path, commonly modeled as a single-pair path computation of the transitive closure problem, is known to be computationally costly <ref> [4] </ref>. Thus heuristic algorithms such as A fl have been proposed to improve computation time for IVHS [7, 8]. <p> The algorithms that compute the transitive closure are known to require high computation cost <ref> [4] </ref>. The encoded path view, on the other hand, precomputes best paths for all node-pairs. The best paths are retrieved by looking up in the materialized view, eliminating the need for the search algorithms. <p> Thus, total storage required is O (d fl n 2 ). This clearly is much less than the exponential storage required to store the full-materialization of all paths. The computation complexity of the conventional best path algorithm is O (n 2 ) <ref> [4] </ref>. By iteratively querying the destination tables associated with each node along the path, the path retrieval complexity for the semi-materialized view is O (n).
Reference: [5] <author> Max J. Egenhofer, </author> <title> "What's Special about Spatial? Database Requirements for Vehicle Navigation in Geographic Space", </title> <booktitle> Proc. of the 1993 ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <year> 1993, </year> <pages> pp. 398 - 402. </pages>
Reference: [6] <institution> Loral Federal Systems, "IVHS Architecture Phase One Final Report," Sponsored by Federal Highway Administration, DTFH61-93-C-00211, </institution> <year> 1994. </year>
Reference-contexts: 1 INTRODUCTION Route guidance is the most prominent feature that characterizes IVHS to be "intelligent" <ref> [6] </ref>. In a centralized IVHS system 1 , the TMC (Traffic Management Center) processes fl This work was supported in part by the University of Michigan IVHS Center of Excellence grant (DTFH61-93-X-00017-Sub) sponsored by the U.S. Department of Transportation and by the Michigan Department of Transportation. <p> decentralized IVHS, aka distributed IVHS, each vehicle has the capability of processing path finding. route guidance by transmitting to a vehicle either the best path from its location to a requested destination or instructions that lead to the next intersection (or beacon in a beacon-based architecture) along the best path <ref> [6] </ref>. If the entire best path is transmitted, the vehicle follows the received path by self-navigation. Otherwise the vehicle, having no knowledge of the entire path, navigates by following instructions received from the TMC continuously.
Reference: [7] <author> Shashi Shekar, Asekhar Kohli, and Mark Coyle, </author> <title> "Path Computation Algorithms for Advanced Traveller Information a Systems," </title> <booktitle> IEEE 9th Int. Conf. on Data Engineering, </booktitle> <year> 1993, </year> <pages> pp. 31 - 39. </pages>
Reference-contexts: However, finding the best path, commonly modeled as a single-pair path computation of the transitive closure problem, is known to be computationally costly [4]. Thus heuristic algorithms such as A fl have been proposed to improve computation time for IVHS <ref> [7, 8] </ref>. Given the novelty of IVHS technology, there is little known about the limit of various algorithms in terms of the maximum map size and number of requests per time period that they can handle in an efficient manner. <p> Furthermore, we have developed algorithms for incremental updates, in particular, increase and decrease of traffic link weight of semi-materialized paths in the cyclic context. Shekar et al. <ref> [7] </ref> have also studied the path computation problem for IVHS applications. However, they focus on compute-on-demand approach by comparing several typical route computation algorithms, such as, bread-first search and A fl heuristic search.
Reference: [8] <author> Toneluh A. Yang, Shashi Shekhar, Babak Hamidzadeh, and P. A. Hancock, </author> <title> "Path Planning and Evaluation in IVHS Databases," </title> <address> VNIS, </address> <year> 1991, </year> <pages> pp. 283 - 290. </pages>
Reference-contexts: However, finding the best path, commonly modeled as a single-pair path computation of the transitive closure problem, is known to be computationally costly [4]. Thus heuristic algorithms such as A fl have been proposed to improve computation time for IVHS <ref> [7, 8] </ref>. Given the novelty of IVHS technology, there is little known about the limit of various algorithms in terms of the maximum map size and number of requests per time period that they can handle in an efficient manner. <p> However, we expect that the computation complexity of these algorithms limits their use in real-time route computation situations when the number of users requesting "routes" from the IVHS system reaches a heavy load. There have been several other research efforts on database support for IVHS <ref> [8] </ref>. However, all previous approaches published in the literature seem to be using a compute-on-demand (i.e., search) approach instead of the path materialization approach proposed in our paper. There has been a body of literature on the path and transitive closure query processing in the database community.
Reference: [9] <author> Yun-Wu Huang, Ning Jing, and Elke A. Rundensteiner, </author> <title> "A Semi-Materialized View Approach for Route Guidance in Intelligent Transportation Systems," </title> <institution> Electrical Engineering and Computer Science Dept., Computer Science and Engineering Division, University of Michi-gan, Ann Arbor, </institution> <type> Tech. Rep. </type> <institution> (on progress), </institution> <month> Nov. </month> <year> 1994. </year>
Reference-contexts: The complexity for the ITERATION procedure is O (n 2 )flO (n)fldfl c. The total complexity of the algorithm therefore is O (n 3 ). Claim 2 Line 9 in the above algorithm eliminates cycles. Proof: A formal proof can be found in <ref> [9] </ref>. For example, in Figure 1, L xy has decreased from 5 to 2 and the decrease algorithms is in process to update the view. Putting the INITIALIZATION step, BP xk is put onto the queue with BP W xk updated from 9 to 6.
References-found: 9

