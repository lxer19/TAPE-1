URL: ftp://ftp.cs.man.ac.uk/pub/IPG/ksw94.ps.Z
Refering-URL: http://www.cs.man.ac.uk/ipg/elss.html
Root-URL: http://www.cs.man.ac.uk
Title: Applying a Concurrent Formal Framework to Process Modelling  
Author: J.A. Keane, J. Sa and B.C. Warboys, 
Date: October  
Note: Published in the proceedings of Formal Methods Europe'94, Barcelona,  1994.  
Address: Manchester M13 9PL, England.  
Affiliation: Department of Computer Science, University of Manchester,  
Abstract-found: 0
Intro-found: 0
Reference: 1. <author> H.Barringer, R.Kuiper, and A.Pnueli, </author> <title> Now You May Compose Temporal Logic Specifications, </title> <booktitle> Proc. of 16th ACM Symp. on Theory of Computing, </booktitle> <year> 1984. </year>
Reference-contexts: Among the available formalisms that were suitable for describing such systems, temporal logic was used because it was capable of expressing liveness properties [10]. The particular temporal logic chosen offered a compositional approach <ref> [1] </ref>. Using this approach, a system is considered as a collection of components. Each component is specified as a temporal logic formula. The specification of the overall system is obtained by composing all the component specifications. <p> The behaviour of the internal coperations is not visible. The temporal semantics of boxed objects are defined in section 4.5. 4 Temporal Semantics of OBM Constructs OBM constructs are defined using the temporal logic described in <ref> [1] </ref>. The specification of a component specifies a set of sequences. In this model parallelism is modelled by interleaving events of different components, each specified sequence contains idle steps as well as the events of the component.
Reference: 2. <author> N. Belkhatir, J. Estublier and W.L. Melo, </author> <title> Software Process Model and Work Space Control in the Adele System, </title> <booktitle> Proc. of the Second International Conference on the Software Process, </booktitle> <address> Berlin, Germany, </address> <year> 1993. </year>
Reference-contexts: In this paper, this framework is applied to process modelling. 1 Motivation The importance of process models and their evolution have been recognised. Many different approaches have been developed in this field, for example, ADELE <ref> [2] </ref>, ProcessWise [4], SPELL [5] and PROCESS WEAVER [6]. However, very few process models have a formal basis to incorporate the design of concurrent activities or to allow the gradual evolution of the process description. A strong motivation for this work is a belief that both features are essential.
Reference: 3. <author> R.F. Bruynoghe, R.M. Greenwood, I. Robertson, J. Sa and B.C. Warboys, PADM: </author> <title> Towards a Total Process Modelling System, in Software Process Modelling and Technology, </title> <editor> A. Finkelstein, J. Kramer and B. Nuseibeh (Eds.), </editor> <publisher> Research Studies Press, Wiley, </publisher> <year> 1994. </year>
Reference-contexts: It also allows the gradual development of a model using the notion of refinement. An example was given and consistency shown by a hand-proof. Such proofs are error-prone, and so the BM Stepper <ref> [3] </ref> has been developed that provides a simulation facility to step through operation patterns. Further study will investigate the role of the BM Stepper in OBM. 6.4 Development of OBM In OBM, abstract objects cannot contain user defined variables.
Reference: 4. <author> R.F. Bruynoghe, J.M. Parker, and J.S. </author> <title> Rowles, PSS: A System for Process Enactment, </title> <booktitle> Proc. of the First International Conference on the Software Process, Manufacturing Complex Systems, </booktitle> <publisher> IEEE Press, </publisher> <year> 1991. </year>
Reference-contexts: In this paper, this framework is applied to process modelling. 1 Motivation The importance of process models and their evolution have been recognised. Many different approaches have been developed in this field, for example, ADELE [2], ProcessWise <ref> [4] </ref>, SPELL [5] and PROCESS WEAVER [6]. However, very few process models have a formal basis to incorporate the design of concurrent activities or to allow the gradual evolution of the process description. A strong motivation for this work is a belief that both features are essential.
Reference: 5. <author> R. Conradi, M.L. Jaccheri, C. Mazzi, M.N. Nguyen and A. Aarsten, </author> <title> Design, Use and Implementation of SPELL, a Language for Software Process Modeling and Evolution, </title> <booktitle> Proc. of the Second European Workshop on Software Process Technology - EWSPT'92, </booktitle> <address> Trondheim, Norway, </address> <year> 1992. </year>
Reference-contexts: In this paper, this framework is applied to process modelling. 1 Motivation The importance of process models and their evolution have been recognised. Many different approaches have been developed in this field, for example, ADELE [2], ProcessWise [4], SPELL <ref> [5] </ref> and PROCESS WEAVER [6]. However, very few process models have a formal basis to incorporate the design of concurrent activities or to allow the gradual evolution of the process description. A strong motivation for this work is a belief that both features are essential.
Reference: 6. <author> C. Fernstrom, </author> <title> PROCESS WEAVER: Adding Process Support to UNIX, </title> <booktitle> Proc. of the Second International Conference on the Software Process, </booktitle> <address> Berlin, Germany, </address> <year> 1993. </year>
Reference-contexts: In this paper, this framework is applied to process modelling. 1 Motivation The importance of process models and their evolution have been recognised. Many different approaches have been developed in this field, for example, ADELE [2], ProcessWise [4], SPELL [5] and PROCESS WEAVER <ref> [6] </ref>. However, very few process models have a formal basis to incorporate the design of concurrent activities or to allow the gradual evolution of the process description. A strong motivation for this work is a belief that both features are essential.
Reference: 7. <author> C.B. Jones, </author> <title> Systematic Software Development Using VDM, </title> <publisher> Prentice-Hall, </publisher> <year> 1990. </year>
Reference-contexts: Future work will investigate how to reason about the consistency between the refinement and its abstract object if the abstract object contains user defined variables. A possible solution is to use the data reification technique of <ref> [7] </ref>. The integration of OBM with the temporal-logic based design methodology described in [9] is also under investigation. 6.5 Formal Process Modelling The approach is based on a belief that ultimately a process model must have a formal basis underlying it.
Reference: 8. <author> C.B. Jones, </author> <title> Tentative Steps Toward a Development Method for Interfering Programs, </title> <journal> ACM TOPLAS 5(4), </journal> <year> 1983. </year>
Reference-contexts: OBM, therefore, makes no commitment to granularity of activity, and thus allows the designer to determine what is the most suitable grain. This is supported by the provision for gradual refinement and levelled description. 6.2 Specification of Interference In <ref> [8] </ref>, a method for specifying concurrent behaviour with possible interference is defined in terms of rely and guarantee conditions. The method is used to specify a system for shared variables. In OBM, communication and interaction between different components can only be achieved via operation calls.
Reference: 9. <author> J.A. Keane and W.Hussak, </author> <title> A Formal Approach to Parallel Resource Bindings, </title> <booktitle> Proc. 16th Int. Conf. on Software Engineering - ICSE-16, </booktitle> <pages> pp. 15-22, </pages> <publisher> IEEE Press, </publisher> <year> 1994. </year>
Reference-contexts: Future work will investigate how to reason about the consistency between the refinement and its abstract object if the abstract object contains user defined variables. A possible solution is to use the data reification technique of [7]. The integration of OBM with the temporal-logic based design methodology described in <ref> [9] </ref> is also under investigation. 6.5 Formal Process Modelling The approach is based on a belief that ultimately a process model must have a formal basis underlying it. Therefore, OBM provides a process model that has a formal basis, with the semantics defined in a linear time temporal logic.
Reference: 10. <author> L. Lamport, </author> <title> What Good is Temporal Logic?, Information Processing 83, R.E.A. </title> <publisher> Mason (Ed.), </publisher> <pages> pp. 657-668, </pages> <publisher> IFIP, </publisher> <year> 1983. </year>
Reference-contexts: Among the available formalisms that were suitable for describing such systems, temporal logic was used because it was capable of expressing liveness properties <ref> [10] </ref>. The particular temporal logic chosen offered a compositional approach [1]. Using this approach, a system is considered as a collection of components. Each component is specified as a temporal logic formula. The specification of the overall system is obtained by composing all the component specifications.
Reference: 11. <author> J. Sa and B. C. Warboys, </author> <title> Specifying Concurrent Object-based Systems using Combined Specification Notations, </title> <type> Technical Report UMCS-91-7-2, </type> <institution> Department of Computer Science, University of Manchester, </institution> <month> July </month> <year> 1991. </year>
Reference-contexts: Overall, the work has benefited from this influence. ? This work was was carried out whilst all authors were at the University of Manchester, and was supported by UK SERC grants GR/J11034 and GR/J48979. OBM is based on Base Model (BM) <ref> [11] </ref>. BM and OBM are discussed in sections 2 and 3 respectively. In section 4 the temporal semantics of OBM constructs are given. An example refinement is discussed in section 5. <p> The interface of an abstract object consists of a list of provided coperations, required coperations and an operation pattern defined in terms of the provided coperations. Operation patterns are defined using an ordering expression. The detailed definition of ordering expressions can be found in <ref> [11] </ref>. The body of an abstract object consists of a call template for each required coperation and a definition for each provided coperation which contains its type, i.e. active or passive, its call pattern, and its pre and post-conditions.
Reference: 12. <author> J. Sa and B. C. Warboys, </author> <title> Integrating a Formal Specification Method with PML: A Case Study, </title> <booktitle> Proc. of the 2nd European Workshop on Software Process Technology - EWSPT'92, </booktitle> <address> LNCS-635, </address> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Each component provides operations and contains user defined variables only accessible to the operations. An operation may call other operations in other components. The behaviour of a component is specified by the pattern to which its operations, when executed, conform. Such patterns are called operation patterns. Case studies, <ref> [12, 13] </ref>, have shown that BM addresses many aspects of process modelling. Whilst BM is a suitable methodology for representing processes, it does not enable the development and refinement of a model. Nevertheless BM was considered a good basis on which to develop a more general framework.
Reference: 13. <author> J. Sa and B.C. Warboys, </author> <title> Modelling Processes using a Stepwise Refinement Technique, </title> <booktitle> Proc. of the 4th European Workshop on Software Process Technology - EWSPT'94, </booktitle> <address> LNCS-772, </address> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Each component provides operations and contains user defined variables only accessible to the operations. An operation may call other operations in other components. The behaviour of a component is specified by the pattern to which its operations, when executed, conform. Such patterns are called operation patterns. Case studies, <ref> [12, 13] </ref>, have shown that BM addresses many aspects of process modelling. Whilst BM is a suitable methodology for representing processes, it does not enable the development and refinement of a model. Nevertheless BM was considered a good basis on which to develop a more general framework.
Reference: 14. <author> J.Sa and B.C. Warboys, </author> <title> A Formal Description of the ISPW-6 Software Process Example, </title> <type> Technical Report Series UMCS-93-6-1, </type> <institution> Department of Computer Science, University of Manchester, </institution> <month> June </month> <year> 1993. </year>
Reference: 15. <author> J.Sa, OBM: </author> <title> A Tutorial, </title> <type> Project Report, </type> <institution> Department of Computer Science, University of Manchester, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: The semantics of a subset of the ordering expression is defined in section 4.2. atmostone (C ) is defined in <ref> [15] </ref>. 4.2 Temporal Semantics of Ordering Expressions A subset of the ordering expression is defined here. The full definition is in [15]. [[on]] C 4 fin [[P1 jj P 2]] C 4 ([[P 1]] C1 C (idle (C 1) U fin)) ^ ([[P 2]] C2 C (idle (C 2) U fin)) <p> The semantics of a subset of the ordering expression is defined in section 4.2. atmostone (C ) is defined in <ref> [15] </ref>. 4.2 Temporal Semantics of Ordering Expressions A subset of the ordering expression is defined here. The full definition is in [15]. [[on]] C 4 fin [[P1 jj P 2]] C 4 ([[P 1]] C1 C (idle (C 1) U fin)) ^ ([[P 2]] C2 C (idle (C 2) U fin)) [[P + ]] C 4 [[P]] C C fl fin where P 1; P 2 means P 1 followed by P <p> (W ; W 1; W 2) _ synchronise (W 1; W 2)) ^ flhide (fC 1; C 2g; Iops) C 1 and C 2 are extended with idle steps so that they have the same length. idle, interleave, synchronise and hide have their intuitive meanings, and are formally defined in <ref> [15] </ref>. 4.6 Consistency of Refinement Given a level i abstract object A and its level i+1 refinement, the consistency of the level i+1 refinement is validated by the following stages: 1. Identify the internal coperations. Let Iops denote the set of these coperations. 2.
Reference: 16. <author> P. Wegner, </author> <title> Dimensions of Object-Based Language Design, </title> <booktitle> Proc. of OOPSLA'87, </booktitle> <year> 1987. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: As a result, more and more high level constructs have been gradually introduced to denote the temporal logic formulae. The collection of constructs has evolved into a high level language with its semantics defined in temporal logic. In the classification given in <ref> [16] </ref>, BM is an object-based language. However, the motivation for defining BM was not to provide yet another object-oriented language, but rather to make it easier to specify systems using temporal logic. In BM, a system is composed of components which may be executed concurrently.
References-found: 16

