URL: ftp://ftp.cs.jhu.edu/pub/scott/ffac.ps.Z
Refering-URL: http://www.cs.jhu.edu/tech-report/reports93.html
Root-URL: http://www.cs.jhu.edu
Email: agha@cs.uiuc.edu  iam@sail.stanford.edu  scott@cs.jhu.edu  clt@sail.stanford.edu  
Title: A Foundation for Actor Computation  
Author: Gul Agha Ian A. Mason Scott F. Smith Carolyn L. Talcott 
Address: Illinois  University  University  University  
Affiliation: University of  Stanford  The Johns Hopkins  Stanford  
Date: 1 (1): 1-000, January 1993  
Note: J. Functional Programming  c 1993 Cambridge University Press 1  Contents  
Abstract: We present an actor language which is an extension of a simple functional language, and provide a precise operational semantics for this extension. Actor configurations represent open distributed systems, by which we mean that the specification of an actor system explicitly takes into account the interface with external components. We study the com-posability of such systems. We define and study various notions of testing equivalence on actor expressions and configurations. The model we develop provides fairness. An important result is that the three forms of equivalence, namely, convex, must, and may equivalences, collapse to two in the presence of fairness. We further develop methods for proving laws of equivalence and provide example proofs to illustrate our methodology. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Abelson, H. and Sussman, G. J. </author> <year> (1985). </year> <title> Structure and Interpretation of Computer Programs. </title> <publisher> The MIT Press, McGraw-Hill Book Company. </publisher>
Reference-contexts: The work in (Hewitt, 1977) contains the insight that the usual control structures could be represented as patterns of message passing between simple actors which had a conditional construct but no local state. It provided a basis for the continuation passing style of programming as found in Scheme <ref> (Abelson and Sussman, 1985) </ref>. In (Hewitt and Atkinson, 1979), the concept of serializer is described: a serial-izer localizes conditions for resumption of waiting processes and thus improves on monitors which require explicit signaling of dormant processes. A related notion, namely, that of guardians, was defined in (Attardi and Hewitt, 1978).
Reference: <author> Agha, G. </author> <year> (1986a). </year> <title> Actors: A Model of Concurrent Computation in Distributed Systems. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Mass. </address>
Reference-contexts: The work did not develop a theory of actor systems specifically, no notion of equivalence of actor systems was defined. The model of actors we use is most closely resembles <ref> (Agha, 1986a) </ref> which defined a simple transition system for actors, and developed a notion of configurations, receptionists and external actors.
Reference: <author> Agha, G. </author> <year> (1986b). </year> <title> Actors: A Model of Concurrent Computation in Distributed Systems. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Mass. </address>
Reference-contexts: A configuration can be thought of as representing a global snapshot of an actor system with respect to some idealized observer <ref> (Agha, 1986b) </ref>. It contains a collection of actors, messages, external actor names, and receptionist names. The sets of receptionists and external actors are the interface of an actor configuration to its environment. They specify what actors are visible and what actor connections must be provided for the configuration to function.
Reference: <author> Agha, G. </author> <year> (1990). </year> <title> Concurrent object-oriented programming. </title> <journal> Communications of the ACM, </journal> <volume> 33(9) </volume> <pages> 125-141. </pages>
Reference: <author> Agha, G., Frtlund, S., Kim, W., Panwar, R., Patterson, A., and Sturman, D. </author> <year> (1993a). </year> <title> Abstraction and Modularity Mechanisms for Concurrent Computing. </title> <journal> IEEE Parallel and Distributed Technology: Systems and Applications, </journal> <volume> 1(2) </volume> <pages> 3-14. </pages>
Reference-contexts: It has also provided a basis for dozens of other projects (Agha et al., 1989; Agha et al., 1991; Agha et al., 1993b). Some of the more recent research on actors has focused on coordination structures and meta-architectures <ref> (Agha et al., 1993a) </ref>. 6 G. Agha and others 1.2.2 Other Related Research We consider two areas of related work: process algebras and concurrent functional languages. In all of the work considered here the underlying model uses synchronous communication as primitive instead of asynchronous communication.
Reference: <editor> Agha, G., Hewitt, C., Wegner, P., and Yonezawa, A., editors (1991). </editor> <booktitle> Proceedings of the ACM SIGPLAN Workshop on Object-Based Concurrent Programming. OOPS Messenger, </booktitle> <volume> vol. 2, no. </volume> <pages> 2. </pages>
Reference: <author> Agha, G., Mason, I. A., Smith, S. F., and Talcott, C. L. </author> <year> (1992). </year> <title> Towards a theory of actor computation. </title> <booktitle> In The Third International Conference on Concurrency Theory (CONCUR '92), volume 630 of Lecture Notes in Computer Science, </booktitle> <pages> pages 565-579. </pages> <publisher> Springer Verlag. </publisher>
Reference-contexts: Basic process algebra equations are established using bisimulations as well as the beta-value rule. The authors point out that establishing expression equivalence using bisimulations is much more complicated than establishing process algebra equations. An early version of actor semantics presented in this paper appeared in <ref> (Agha et al., 1992) </ref>. There we defined a notion of operational bisimulation that incorporated fairness. Operational bisimulations were intended to serve as tools for establishing observational equivalence, not as equivalence relations per se.
Reference: <editor> Agha, G., Wegner, P., and Yonezawa, A., editors (1989). </editor> <booktitle> Proceedings of the ACM SIG-PLAN Workshop on Object-Based Concurrent Programming. Special Issue of SIGPLAN Notices. </booktitle>
Reference: <author> Agha, G., Wegner, P., and Yonezawa, A., </author> <title> editors (1993b). Research Directions in Concurrent Object Oriented Programming. </title> <publisher> MIT Press. </publisher>
Reference: <author> Amadio, R. M. </author> <year> (1994). </year> <title> Translating core facile. </title> <type> Technical Report ECRC-1994-3, </type> <institution> European Computer-Industry Research Centre. </institution>
Reference-contexts: Agha and others 1.2.2 Other Related Research We consider two areas of related work: process algebras and concurrent functional languages. In all of the work considered here the underlying model uses synchronous communication as primitive instead of asynchronous communication. Synchronous communication can be simulated with asynchronous primitives <ref> (Amadio, 1994) </ref> and vice-versa, and forms of both are required in a realistic programming language. Also in models considered, although processes may be dynmaically created, they are not first class entities that can be directly manipulated.
Reference: <author> Attardi, G. and Hewitt, C. </author> <year> (1978). </year> <title> Specifying and proving properites of guardians for distributed systems. </title>
Reference-contexts: In (Hewitt and Atkinson, 1979), the concept of serializer is described: a serial-izer localizes conditions for resumption of waiting processes and thus improves on monitors which require explicit signaling of dormant processes. A related notion, namely, that of guardians, was defined in <ref> (Attardi and Hewitt, 1978) </ref>. A guardian regulates the use of shared resources, scheduling their access and providing protection and "recovery" boundaries. Guardians thus explicitly incorporated the notion of state. Lieberman implemented an actor language, Act1, incorporating guardians, serializers, and `rock bottom' actors which is best described in (Lieberman, 1987).
Reference: <author> Baker, H. G. and Hewitt, C. </author> <year> (1977). </year> <title> Laws for communicating parallel processes. </title> <booktitle> In IFIP Congress, </booktitle> <pages> pages 987-992. </pages> <publisher> IFIP. </publisher>
Reference-contexts: Irene Greif (Greif, 1975) developed an abstract model of actors in terms of event diagrams which recorded local events at each actor and the causal relations between events. Baker and Hewitt <ref> (Baker and Hewitt, 1977) </ref> then formalized a set of axioms for concurrent computation which stated properties that events in actor systems must obey in order to prevent causality violations. <p> Guardians thus explicitly incorporated the notion of state. Lieberman implemented an actor language, Act1, incorporating guardians, serializers, and `rock bottom' actors which is best described in (Lieberman, 1987). Will Clinger (Clinger, 1981) developed a semantics of actor systems, showing the consistency of axioms proposed in <ref> (Baker and Hewitt, 1977) </ref>. A key accomplishment of Clinger's work was to show that a powerdomain semantics could be developed despite the fact that the underlying domain was incomplete due to fairness.
Reference: <author> Bergstra, J. A. and Klop, J. W. </author> <year> (1986). </year> <title> Process Algebra: Specification and Verification in Bisimulation Semantics. Number CWI Monograph 4 in Mathematics and Computer Science, II. </title> <publisher> North-Holland. </publisher>
Reference: <author> Berry, D., Milner, R., and Turner, D. </author> <year> (1992). </year> <title> A semantics for ML concurrency primitives. </title> <booktitle> In Conference record of the 19th annual ACM symposium on principles of programming languages, </booktitle> <pages> pages 105-129. </pages>
Reference-contexts: A structured operational semantics and type inference system for a small kernel language contained in CML is described in (Reppy, 1991) and a type safety theorem is proved. In addition an implementation of CML is described. Basic properties of the operational semantics of similar kernel language are presented in <ref> (Berry et al., 1992) </ref>. At this point, litte has been done towards developing an equational theory concurrent extensions of ML. 2 Actor Language Constructs Our actor language is an extension of a simple functional language which provides primitives for coordinating components which carry out local computation.
Reference: <author> Brookes, S., Hoare, C., and Roscoe, A. </author> <year> (1984). </year> <title> A Theory of Communicating Sequential Processes. </title> <journal> Journal of the ACM, </journal> <volume> 31(3) </volume> <pages> 560-599. </pages> <note> Actor Computation 55 Clinger, </note> <author> W. D. </author> <year> (1981). </year> <title> Foundations of actor semantics. </title> <note> AI-TR- 633, MIT Artificial Intelligence Laboratory. </note> <author> de Nicola, R. and Hennessy, M. C. B. </author> <year> (1984). </year> <title> Testing equivalences for processes. </title> <journal> Theoretical Computer Science, </journal> <volume> 34 </volume> <pages> 83-133. </pages>
Reference-contexts: A variety of equivalence relations have been defined and studied. These include bisimulation (Milner, 1983; Milner, 1989) which defines a back-and-forth simulation relation between two processes, and trace-based equivalence <ref> (Brookes et al., 1984) </ref>. Various logics have been developed for process algebras, including (Hoare, 1985; Milner, 1989; Bergstra and Klop, 1986).
Reference: <author> Felleisen, M. and Friedman, D. </author> <year> (1986). </year> <title> Control operators, the SECD-machine, and the -calculus. </title> <editor> In Wirsing, M., editor, </editor> <booktitle> Formal Description of Programming Concepts III, </booktitle> <pages> pages 193-217. </pages> <publisher> North-Holland. </publisher>
Reference-contexts: Reduction contexts identify the subexpression of an expression that is to be evaluated next, they correspond to the standard reduction strategy (left-first, call-by-value) of (Plotkin, 1975) and were first introduced in <ref> (Felleisen and Friedman, 1986) </ref>. For further discussion of this method of defining reduction relations see (Honsell et al., 16 G. Agha and others 1994).
Reference: <author> Felleisen, M. and Hieb, R. </author> <year> (1992). </year> <title> The revised report on the syntactic theories of sequential control and state. </title> <journal> Theoretical Computer Science, </journal> <volume> 103 </volume> <pages> 235-271. </pages>
Reference: <author> Felleisen, M. and Wright, A. K. </author> <year> (1991). </year> <title> A syntactic approach to type soundness. </title> <institution> Technical Report Rice COMP TR91-160, Rice University Computer Science Department. </institution> <note> To appear, Information and Computation. </note>
Reference: <author> Giacalone, A., Mishra, P., and Prasad, S. </author> <year> (1989). </year> <title> Facile: A symmetric integration of concurrent and functional programming. </title> <journal> International Journal of Parallel Programming, </journal> <volume> 18(2) </volume> <pages> 121-160. </pages>
Reference-contexts: The underlying model of concurrency is one of processes communicating by synchronized message passing over typed channels. Any value of appropriate type, included higher-order values can be communicated over a channel. In <ref> (Giacalone et al., 1989) </ref> an operational semantics for Facile is Actor Computation 7 given using a labelled transistion system, and an abstract model of implementation is defined. In (Prasad et al., 1990) an algebraic semantics for Facile is given based on the operational semantics.
Reference: <author> Greif, I. </author> <year> (1975). </year> <title> Semantics of communicating parallel processes. </title> <type> Technical Report 154, </type> <institution> MIT, Project MAC. </institution>
Reference-contexts: In (Hewitt et al., 1973), the notion of actors was close to that of an agent in Distributed Artificial Intelligence: actors have intentions, resources, contain message monitors and a scheduler. Irene Greif <ref> (Greif, 1975) </ref> developed an abstract model of actors in terms of event diagrams which recorded local events at each actor and the causal relations between events.
Reference: <author> Hewitt, C. </author> <year> (1971). </year> <title> Description and Theoretical Analysis (Using Schemata) of PLANNER: </title>
Reference-contexts: Actor Computation 5 The actor model was originally proposed by Hewitt and the meaning of the term has evolved over time in the work of Hewitt and associates. We briefly describe the history of actor research, necessarily omitting some of the significant work. In his early work on planner <ref> (Hewitt, 1971) </ref>, Hewitt used the term actor to describe active entities which, unlike functions, went around looking for patterns to match in order to trigger activity.
References-found: 21

