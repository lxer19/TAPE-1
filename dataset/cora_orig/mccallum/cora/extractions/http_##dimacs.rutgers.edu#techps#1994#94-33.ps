URL: http://dimacs.rutgers.edu/techps/1994/94-33.ps
Refering-URL: http://dimacs.rutgers.edu/TechnicalReports/1994.html
Root-URL: http://www.cs.rutgers.edu
Author: Michael Saks Fotios Zaharoglou 
Keyword: Optimal Space Distributed Order-Preserving Lists 1  
Address: New Brunswick, NJ 08903  La Jolla, California 92093  
Affiliation: Department of Mathematics Rutgers University  Department of Computer Science and Engineering University of California San Diego  
Note: by  
Abstract: DIMACS Technical Report 94-33 November 1994 DIMACS is a partnership of Rutgers University, Princeton University, AT&T Research, Bellcore, and Bell Laboratories. DIMACS is an NSF Science and Technology Center, funded under contract STC-91-19999; and also receives support from the New Jersey Commission on Science and Technology. 
Abstract-found: 1
Intro-found: 1
Reference: [AK + 91] <author> Y. Azar, A. Karlin, J. Naor and N. Shavit. </author> <type> Personal Communication 1991. </type>
Reference-contexts: As we will show, move-to-front lists admit distributed implementations that use considerably less space than time-stamp systems. More precisely we provide matching upper and lower bounds of fi (log 2 n) on the space per processor needed to implement move-to-front lists. Independently Azar et al <ref> [AK + 91] </ref> have obtained the same upper bound. Our implementation is based on the representation of a list by its successor relation. This consists of the set of pairs (a; b) where a precedes b in the list.
Reference: [CS91] <author> R. Cori, E. Sopena. </author> <title> Some Combinatorial Aspects of Time Stamp Systems. </title> <note> Unpublished manuscript 1991. </note>
Reference-contexts: For this model the above scheme uses n 2 different labels. Cori and Sopena <ref> [CS91] </ref> give a better construction with 2n 1 labels. For the remainder of the section we describe the implementation of the abstract data object M n;2 b+1 assuming that an implementation of M n;2 b is given.
Reference: [DS89] <author> D. Dolev and N. Shavit. </author> <booktitle> Bounded Concurrent Time-Stamp Systems are Constructible! Proceedings of the 21 th Annual ACM Symposium on Theory of Computing, </booktitle> <year> 1989, </year> <pages> pp. 454-465. </pages> <note> Also Technical Report, </note> <institution> IBM, </institution> <month> March </month> <year> 1990. </year> <month> 13 </month>
Reference-contexts: Our implementation relies on the assumption that move-to-front operations do not overlap in time with other operations. Removing this assumption seems to greatly increase the difficulty of the problem; in fact even formulating the problem precisely is a nontrivial undertaking. For time-stamp systems, Dolev and Shavit <ref> [DS89] </ref> were the first to provide both a precise formulation and an implementation using O (n) bit registers. Their construction though is very complicated. Dwork and Waarts [DW92] gave recently a simple and efficient construction that uses O (n log n) bits per processor register.
Reference: [DW92] <author> C. Dwork and O. Waarts. </author> <title> Simple and Efficient Bounded Concurrent Timestamping or Bounded Concurrent Timestamp Systems are Comprehensible! Proceedings of the 24 th Annual ACM Symposium on Theory of Computing, </title> <booktitle> 1992, </booktitle> <pages> pp. 655-666. </pages>
Reference-contexts: For time-stamp systems, Dolev and Shavit [DS89] were the first to provide both a precise formulation and an implementation using O (n) bit registers. Their construction though is very complicated. Dwork and Waarts <ref> [DW92] </ref> gave recently a simple and efficient construction that uses O (n log n) bits per processor register. Section 2 contains a precise statement of the problem and our assumptions. The proof of the 2 lower bound is in section 3. An efficient implementation is described in section 4.
Reference: [IL87] <author> A. Israeli and Ming Li. </author> <title> Bounded Time-Stamps. </title> <booktitle> Proceedings of the 28 st Annual Symposium on Foundations of Computer Science, </booktitle> <month> October </month> <year> 1987 </year> <month> pp. </month> <pages> 371-382. </pages>
Reference-contexts: The move-to-front list is of interest in distributed computation because it can maintain a precedence order of the active jobs in the distributed system. This is a basic tool for breaking symmetry among jobs in distributed systems and is used in many distributed protocols. Israeli and Li <ref> [IL87] </ref> proposed Time-Stamp Systems ( TSS ) as a means of maintaining such an order. Their construction provides an implementation of move-to-front list in which each processor has a single writer multiple reader (swmr) register of O (n) bits. <p> Israeli and Li <ref> [IL87] </ref> proved that any implementation satisfying this stronger requirement needs n bit registers, so the above scheme is nearly optimal under this assumption. As we will see, the improvements to O (log 2 n) that we get here, come from eliminating this requirement.
Reference: [La78] <author> L. </author> <title> Lamport : Time, Clocks, and the Ordering of Events in a Distributed System. </title> <journal> Communications of the ACM, </journal> <month> 21(7) July </month> <year> 1978, </year> <pages> pp. 558-565. </pages>
Reference: [LV89] <author> M. Li and P. Vitanyi. </author> <title> How to Share Concurrent Asynchronous Wait-Free Variables. </title> <booktitle> Proceedings of 16 th ICALP 1989, </booktitle> <pages> pp. 488-505. </pages>
Reference-contexts: First we give an easy algorithm to implement the M n;1 due to Li and Vitanyi <ref> [LV89] </ref>. In this case all we have to do is to maintain the identity of the first processor in the list. Lemma 4.2 M n;1 can be implemented with single-writer multiple-reader registers of size log n. Proof.
Reference: [SZ91] <author> M. Saks and F. Zaharoglou. </author> <title> Optimal Space Distributed Move-To-Front Lists. </title> <booktitle> Proceedings of the 10 th ACM Symposium on Principles of Distributed Computing, </booktitle> <month> August </month> <year> 1991, </year> <pages> pp. 65-73. </pages>
Reference: [Za93] <author> F. Zaharoglou. </author> <title> Distributed Data Structures and Wait-Free Computation. </title> <type> Ph.D. Thesis, </type> <institution> University of California, </institution> <address> San Diego, </address> <month> September </month> <year> 1993. </year> <month> 14 </month>
References-found: 9

