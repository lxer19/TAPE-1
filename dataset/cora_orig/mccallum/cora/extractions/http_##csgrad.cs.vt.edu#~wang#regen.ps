URL: http://csgrad.cs.vt.edu/~wang/regen.ps
Refering-URL: http://csgrad.cs.vt.edu/~wang/
Root-URL: http://www.cs.vt.edu
Title: Massively Parallel Simulations with Application to Queueing Networks  
Author: Jain J. Wang and Marc Abrams 
Date: Novemember 1, 1994  
Abstract: With the advent of massively parallel computers, parallel simulation with hundreds or thousands of processors provides great potential in reducing simulation execution time by several orders of magnitude. This paper investigates two parallel simulation methodologies, multiple replication and parallel regenerative simulation. Problems of applying these methodologies to massively parallel simulations where the run length of each processor is short are identified. Three approaches (MR-PI, FORS, and PR) are proposed to overcome some of these problems. The MR-PI approach, based on multiple replication simulation, uses a pilot simulation to reduce the initial transient bias by starting the simulation from a state that is representative of the steady-state conditions. FORS is a pilot simulation which helps a regenerative simulation choose a frequently occurring regeneration state to increase the parallelism of the simulation. The PR approach uses substate matching for regeneration to increases the number of observations for models that do not regenerate frequently. Empirical results from simulations of some queueing models suggest that the proposed approaches can produce very accurate results while allowing short simulation run lengths.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Bhavsar V. C., Isaac J. R., </author> <title> Design and Analysis of Parallel Monte Carlo Algorithms. </title> <journal> SIAM J. Sci. Stat. Comput. </journal> <volume> 8, </volume> <year> (1987), </year> <note> s73-s95. 32 </note>
Reference-contexts: In parallel regenerative simulation, a key problem is how to stop the processors. There exists a number of `stopping rules', each resulting in a different estimator for . An example of a stopping rule is the static computation assignment <ref> [1] </ref>, in which each processor completes a fixed number of regeneration cycles and then stops. Estimators based on a variety of stopping rules have been studied by Glynn and Heidelberger [7, 8, 11]. They showed that some intuitive stopping rules could cause severely biased results.
Reference: [2] <author> Chandy, K.M., Sherman, R., </author> <title> Space-Time and Simulation. </title> <booktitle> Proceedings of the 1989 SCS Multiconference on Distributed Simulation (March 1989), </booktitle> <pages> 53-57. </pages>
Reference-contexts: Therefore, this approach can be treated as a special case of time-parallel simulation (e.g., <ref> [2, 9, 18, 19] </ref>) in which parallelism is obtained through partitioning the time domain of the simulation model. Let t r be the real (i.e., wall clock) simulation execution time for a simulation time length t . Assume that the real execution time is linear to the simulation time length.
Reference: [3] <author> Crane, M., A., Iglehart, D. L., </author> <title> Simulating Stable Stochastic Systems, III: Regenerative Process and Discrete-Event Simulations. </title> <journal> Operations Research, </journal> <volume> 23, 1, </volume> <month> (Jan. </month> <year> 1975), </year> <pages> 33-45. </pages>
Reference-contexts: Then f (Y n ; ! n ); n 1g are IID random vectors and = E (Y n )=E (! n ) <ref> [3] </ref>. Let @ be the total number of regeneration cycles simulated. Then it can be shown that the following estimator for , denoted ^ 2 (@), is strongly consistent for as @ increases (i.e., ^ 2 (@) ! with probability one as @ ! 1) [3]: ^ 2 (@) = i=1 <p> n )=E (! n ) <ref> [3] </ref>. Let @ be the total number of regeneration cycles simulated. Then it can be shown that the following estimator for , denoted ^ 2 (@), is strongly consistent for as @ increases (i.e., ^ 2 (@) ! with probability one as @ ! 1) [3]: ^ 2 (@) = i=1 Y i i=1 ! i To construct a confidence interval for ^ 2 (@), two well-known methods are the classical approach [3] and the jackknife approach [16]. We briefly describe the classical approach below. 11 Let Z i = Y i ! i . <p> denoted ^ 2 (@), is strongly consistent for as @ increases (i.e., ^ 2 (@) ! with probability one as @ ! 1) <ref> [3] </ref>: ^ 2 (@) = i=1 Y i i=1 ! i To construct a confidence interval for ^ 2 (@), two well-known methods are the classical approach [3] and the jackknife approach [16]. We briefly describe the classical approach below. 11 Let Z i = Y i ! i . Then Z i 's are IID random variables with mean 0. Let 2 Z denote the variance of Z i . <p> That is, the state of X directly depends on the state variables in an essential set. Assume that process V is regenerative. This is not a restrictive assumption because Crane and Iglehart <ref> [3] </ref> have shown that with appropriate arrangement of the state vector, a simulation model can always be structured as a regenerative process.
Reference: [4] <author> Crane, M., A, Iglehart D. L., </author> <title> Simulating Stable Stochastic Systems, IV: Approximation Techniques. </title> <journal> Management Science, </journal> <volume> 21, 11, </volume> <month> (July </month> <year> 1975), </year> <pages> 1215-1244. </pages>
Reference-contexts: The guideline stopping time is 100. 18 condition. The concept of approximate regeneration was originally suggested by Crane and Iglehart <ref> [4] </ref>. <p> Also, when the essential set W consists of a continuous state variable, a matching substate that results in a finite expected PRCL may not exist. In such cases, we may further relax the regeneration condition by using a state aggregation technique <ref> [4] </ref>, in which we group all possible states corresponding to W into some finite aggregated states. Then a partial regeneration is considered to be reached whenever the system partially regenerates on any substate in a pre-selected aggregated state.
Reference: [5] <author> David, H. A., </author> <title> Order Statistics, 2nd ed., </title> <publisher> John Wiley, </publisher> <address> New York, </address> <year> 1981. </year>
Reference-contexts: Also, let fl i denote the residual time at t =P for processor i. That is, fl i = @ j=1 1 t : Then T (P ) = max f j=1 1iP It can be shown that <ref> [5, Section 4.2] </ref> t =P + fl (t =P ) E (T (P )) t =P + fl (t =P ) + fl (t =P )(P 1) 2P 1 ; (5) where fl (t =P ) and fl (t =P ) are the mean and the variance of fl i ,
Reference: [6] <author> Fujimoto, R. M., </author> <title> Parallel Discrete Event Simulation. </title> <journal> Commun. ACM 33, </journal> <month> 10 (Oct. </month> <year> 1990), </year> <pages> 31-53. </pages>
Reference-contexts: A major challenge in running simulations on a massively parallel computer is to exploit sufficient parallelism for a large number of processors. Many parallel simulation algorithms proposed previously are space-parallel (see <ref> [6] </ref> for a survey), in which parallelism is obtained through a partitioning the simulation model into components in the space domain of the model.
Reference: [7] <author> Glynn, P., Heidelberger, P., </author> <title> Analysis of Parallel Replicated Simulations Under a Completion Time Constraint. </title> <journal> ACM TOMACS. </journal> <volume> 1(1), </volume> <month> (Jan. </month> <year> 1991), </year> <pages> 3-23. </pages>
Reference-contexts: An example of a stopping rule is the static computation assignment [1], in which each processor completes a fixed number of regeneration cycles and then stops. Estimators based on a variety of stopping rules have been studied by Glynn and Heidelberger <ref> [7, 8, 11] </ref>. They showed that some intuitive stopping rules could cause severely biased results. Glynn and Heidelberger [8, 11] have proposed a strongly consistent estimator [8, 11] that uses t =P as a guideline (because processor execution time is a random variable) stopping 13 time.
Reference: [8] <author> Glynn, P., Heidelberger, P., </author> <title> Analysis of Initial Transient Deletion for Parallel Steady-State Simulations. </title> <journal> SIAM J. Stat. Comput. </journal> <volume> 14, 4, </volume> <month> (July </month> <year> 1992), </year> <pages> 904-922. </pages>
Reference-contexts: An example of a stopping rule is the static computation assignment [1], in which each processor completes a fixed number of regeneration cycles and then stops. Estimators based on a variety of stopping rules have been studied by Glynn and Heidelberger <ref> [7, 8, 11] </ref>. They showed that some intuitive stopping rules could cause severely biased results. Glynn and Heidelberger [8, 11] have proposed a strongly consistent estimator [8, 11] that uses t =P as a guideline (because processor execution time is a random variable) stopping 13 time. <p> Estimators based on a variety of stopping rules have been studied by Glynn and Heidelberger [7, 8, 11]. They showed that some intuitive stopping rules could cause severely biased results. Glynn and Heidelberger <ref> [8, 11] </ref> have proposed a strongly consistent estimator [8, 11] that uses t =P as a guideline (because processor execution time is a random variable) stopping 13 time. This estimator forms the basis of our PR approach which will be discussed later. <p> Estimators based on a variety of stopping rules have been studied by Glynn and Heidelberger [7, 8, 11]. They showed that some intuitive stopping rules could cause severely biased results. Glynn and Heidelberger <ref> [8, 11] </ref> have proposed a strongly consistent estimator [8, 11] that uses t =P as a guideline (because processor execution time is a random variable) stopping 13 time. This estimator forms the basis of our PR approach which will be discussed later. For consistency with our notations, this estimator is denoted by ^ 3 (P; t P ).
Reference: [9] <author> A.G. Greenberg, B.D. Lubachevsky and I. Mitrani, </author> <title> Unboundedly Parallel Simulations via Recurrence Relations, </title> <booktitle> Proc. of the Conf. on Measurement and Modeling of Computer Systems (1990), </booktitle> <pages> pp. 1-12. </pages>
Reference-contexts: Therefore, this approach can be treated as a special case of time-parallel simulation (e.g., <ref> [2, 9, 18, 19] </ref>) in which parallelism is obtained through partitioning the time domain of the simulation model. Let t r be the real (i.e., wall clock) simulation execution time for a simulation time length t . Assume that the real execution time is linear to the simulation time length.
Reference: [10] <author> Gunther, F., L., Wolff, R. W., </author> <title> The Almost Regenerative Method for Stochastic System Simulation. </title> <type> ORC 75-21, </type> <institution> University of California, Berkeley, </institution> <year> 1975. </year>
Reference-contexts: Due to the relaxation of the regeneration condition, the partial regeneration cycles are unlikely to be IID. Consequently, the simulation results could be biased. Nevertheless, by applying Gunther's almost renewal process theorems <ref> [10] </ref>, it can be shown that ^ 4 (P; t P ) is a strongly consistent estimator for as t ! 1.
Reference: [11] <author> Heidelberger, P., </author> <title> Discrete Event Simulations and Parallel Processing: Statistical Properties. </title> <journal> SIAM J. Stat. Comput. </journal> <volume> 9, 6, </volume> <month> (Nov. </month> <year> 1988), </year> <pages> 1114-1132. </pages>
Reference-contexts: An example of a stopping rule is the static computation assignment [1], in which each processor completes a fixed number of regeneration cycles and then stops. Estimators based on a variety of stopping rules have been studied by Glynn and Heidelberger <ref> [7, 8, 11] </ref>. They showed that some intuitive stopping rules could cause severely biased results. Glynn and Heidelberger [8, 11] have proposed a strongly consistent estimator [8, 11] that uses t =P as a guideline (because processor execution time is a random variable) stopping 13 time. <p> Estimators based on a variety of stopping rules have been studied by Glynn and Heidelberger [7, 8, 11]. They showed that some intuitive stopping rules could cause severely biased results. Glynn and Heidelberger <ref> [8, 11] </ref> have proposed a strongly consistent estimator [8, 11] that uses t =P as a guideline (because processor execution time is a random variable) stopping 13 time. This estimator forms the basis of our PR approach which will be discussed later. <p> Estimators based on a variety of stopping rules have been studied by Glynn and Heidelberger [7, 8, 11]. They showed that some intuitive stopping rules could cause severely biased results. Glynn and Heidelberger <ref> [8, 11] </ref> have proposed a strongly consistent estimator [8, 11] that uses t =P as a guideline (because processor execution time is a random variable) stopping 13 time. This estimator forms the basis of our PR approach which will be discussed later. For consistency with our notations, this estimator is denoted by ^ 3 (P; t P ). <p> Then ^ 3 (P; t P ) is obtained by: ^ 3 (P; P P P P N i (t=P )+1 P P P N i (t=P )+1 : (3) It can be shown that ^ 3 (P; t =P ) is strongly consistent for as P increases <ref> [11] </ref>.
Reference: [12] <author> Kelton, W. D., Law, A. M., </author> <title> A New Approach for Dealing with the Startup Problems in Discrete Event Simulation. </title> <journal> Naval Res. Logist. Quart., </journal> <note> 30,(1983) 641-658. </note>
Reference-contexts: Assume that there exists a small value T 0 &gt; 0 such that for all T T 0 , the absolute amount of bias (i.e., jb (s; T )j) decreases monotonically as T increases (alternatively E (^(s; T )) converges monotonically toward ). Kelton and Law <ref> [12] </ref> has identified a class of processes that 5 satisfies this assumption with T 0 = 0.
Reference: [13] <author> Kelton, W. D., </author> <title> Random Initialization Methods in Simulation. </title> <journal> IIE Trans, </journal> <volume> 21, </volume> <year> (1989), </year> <pages> 335-367. </pages>
Reference-contexts: Therefore, it is important that the MR-D simulation starts from a state that is relatively `close' to the steady-state condition in order to achieve a small initial transient. For queueing systems, Kelton <ref> [13] </ref> has shown that an initial state that is as congested (in terms of the number of jobs that exist in the system) as the steady-state mean can induce comparatively short transients. <p> However, due to a lack of steady-state information, the deterministic initial state for the MR-D simulation is usually selected arbitrarily and thus significant bias may result. To address this problem, Kelton <ref> [13] </ref> proposed a random initialization method, which assumes that the set of all possible initial states of the simulation model can be repre 4 sented by a finite integer set I r = f1; 2 : : :; rg. <p> However, to apply this method, we still face the problem of initializing the pilot run. Kelton has suggested deterministic initialization for the pilot run. However, how to choose a deterministic initial state (i.e., for the pilot run) is not addressed in <ref> [13] </ref>. Kelton's random initialization method is not appropriate for massively parallel simulation.
Reference: [14] <author> Law, A. M., Carson, J. S., </author> <title> A Sequential Procedure for Determining the Length of a Steady-State Simulation. </title> <journal> Operations Research, </journal> <volume> 27, </volume> <year> (1979), </year> <pages> 1011-1025. </pages>
Reference-contexts: When b is large, under some mild conditions, it can be shown that the resultant observations are approximately uncorrelated <ref> [14] </ref>. Application To illustrate the PR approach, we consider an example shown in Figure 6 which represents a packet-switched local area network (LAN) of four hosts (i.e., nodes 1 to 4) and a gateway (i.e., node 5) that connects the LAN to other networks.
Reference: [15] <author> Lin, Y. B., Lazowska, E., </author> <title> A Time-Division Algorithm for Parallel Simulation. </title> <booktitle> ACM TOMACS 1, </booktitle> <month> 1 (Jan. </month> <year> 1991), </year> <pages> 73-83. </pages>
Reference-contexts: A partial regeneration cycle length (PRCL) is the time interval between two consecutive occurrences of partial regeneration. Then 1 The term `partial regeneration' was introduced in <ref> [15] </ref>. 19 we can see that for any regeneration state r, the expected RCL on r is no larger than the expected PRCL r W .
Reference: [16] <author> Miller, R. G., </author> <title> The Jackknife-A Review. </title> <journal> Biometrika, </journal> <volume> 61, </volume> <year> (1974), </year> <pages> 1-15. </pages>
Reference-contexts: strongly consistent for as @ increases (i.e., ^ 2 (@) ! with probability one as @ ! 1) [3]: ^ 2 (@) = i=1 Y i i=1 ! i To construct a confidence interval for ^ 2 (@), two well-known methods are the classical approach [3] and the jackknife approach <ref> [16] </ref>. We briefly describe the classical approach below. 11 Let Z i = Y i ! i . Then Z i 's are IID random variables with mean 0. Let 2 Z denote the variance of Z i .
Reference: [17] <author> Schwartz, M., </author> <title> Telecommunication Networks Protocols, Modeling and Analysis. </title> <publisher> Ad-dison Wesley, </publisher> <year> 1987. </year> <month> 33 </month>
Reference-contexts: During the connection, all packets are transmitted to the destination node through the virtual circuit. To control the amount of traffic admitted to the VC, an end-to-end flow control mechanism is required. Sliding-window <ref> [17, Section 5.2.2] </ref> is a commonly used flow control 27 The guideline stopping time is 100 (simulation time units). mechanism that allows a packet to be transmitted on the VC only if there are less than N W outstanding packets in the VC from the source node, where N W is <p> When the destination node receives a packet from the source node, the destination node acknowledges the source node upon reception of the packet. A VC with sliding-window flow control can be modeled by a closed network of G/G/1/K queues <ref> [17, section 5.2.2] </ref> as shown in Figure 9. Node 0 is a virtual node used to model the arrival process of the source node under the assumption that acknowledgments are transmitted at a higher priority and thus incur no queueing delay.
Reference: [18] <author> Wang, J., Abrams, M. </author> <title> Determining Initial States of Time-Parallel Simulations. </title> <booktitle> Pro--ceedings of the 1993 Workshop on Parallel and Distributed Simulation (May 1993), </booktitle> <pages> 19-26. </pages>
Reference-contexts: Therefore, this approach can be treated as a special case of time-parallel simulation (e.g., <ref> [2, 9, 18, 19] </ref>) in which parallelism is obtained through partitioning the time domain of the simulation model. Let t r be the real (i.e., wall clock) simulation execution time for a simulation time length t . Assume that the real execution time is linear to the simulation time length.
Reference: [19] <author> Wang, J., Abrams, M. </author> <title> Massively Time-Parallel, Approximate Simulation of Loss Queueing Systems. </title> <journal> Annals of the Operations Research, </journal> <volume> Vol. 53, </volume> <year> (1994), </year> <pages> 553-576. 34 </pages>
Reference-contexts: Therefore, this approach can be treated as a special case of time-parallel simulation (e.g., <ref> [2, 9, 18, 19] </ref>) in which parallelism is obtained through partitioning the time domain of the simulation model. Let t r be the real (i.e., wall clock) simulation execution time for a simulation time length t . Assume that the real execution time is linear to the simulation time length.
References-found: 19

