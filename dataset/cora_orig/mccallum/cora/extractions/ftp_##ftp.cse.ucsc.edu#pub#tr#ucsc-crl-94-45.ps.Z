URL: ftp://ftp.cse.ucsc.edu/pub/tr/ucsc-crl-94-45.ps.Z
Refering-URL: ftp://ftp.cse.ucsc.edu/pub/tr/README.html
Root-URL: http://www.cse.ucsc.edu
Title: Exact Arithmetic in Q with Applications in Celestial Mechanics  
Author: by Al Conrad Ira Pohl Al Kelley Charlie McDowell Dean 
Degree: A dissertation submitted in partial satisfaction of the requirements for the degree of Doctor of Philosophy in  
Note: The dissertation of Al Conrad is approved:  
Date: December 1994  
Affiliation: University of California Santa Cruz  Computer and Information Sciences  of Graduate Studies and Research  
Abstract-found: 0
Intro-found: 1
Reference: [Alberth and Schaefer, 1992] <author> Oliver J. Alberth and Mark J. Schaefer. </author> <title> Precise computation using range arithmetic, via c++. </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> 143(4) </volume> <pages> 481-491, </pages> <month> Dec </month> <year> 1992. </year>
Reference: [Alberth and Schaefer, 1993] <author> Oliver J. Alberth and Mark J. Schaefer. </author> <title> Precise matrix eigen-values using range arithmetic, via c++. </title> <journal> J. Matrix Anal. Appl., </journal> <volume> 14(1), </volume> <month> Jan </month> <year> 1993. </year>
Reference: [Bate, 1971] <author> Roger R. Bate. </author> <title> Fundamentals of Astrodynamics. </title> <publisher> Dover, </publisher> <address> New York, New York, </address> <year> 1971. </year>
Reference-contexts: Note that examples em, se, and sj correspond to the mass ratios for the earth-moon, sun-earth, and Sun-Jupiter systems, respectively <ref> [Bate, 1971] </ref>. 69 Name Round off error using floating (using gnu Complex) bc72 (1.3668e-16, 0) a2 (8.12177e-17, 0) a4 (2.22478e-16, 0) a6 (4.3995e-16, 0) a8 (0, 5.44438e-17) a10 (0, 9.41237e-17) a12 (3.83213e-17, 0) a14 (2.71666e-17, 0) Table 5.1: axl accuracy improvement for easy repeating eigenvalue case.
Reference: [Brent, 1978] <author> R. P. Brent. </author> <title> A fortran multiple-precision arithmetic package. </title> <journal> ACM Trans. Math. Software, </journal> <volume> 4 </volume> <pages> 57-81, </pages> <year> 1978. </year>
Reference: [Burgoyne and Cushman, 1973] <author> Nicholas Burgoyne and Richard Cushman. </author> <title> Normal forms for real linear hamiltonian systems with imaginary eigenvalues. </title> <journal> Celest. Mech., </journal> <volume> 8 </volume> <pages> 435-443, </pages> <year> 1973. </year>
Reference-contexts: Applying axl to Symplectic Normal Form Computations In this chapter we use axl arithmetic to compute symplectic normal forms. Automating this computation for matrices with purely imaginary eigenvalues has served as the primary motivation and test bed for axl. We use the algorithm provided by Burgoyne and Cushman <ref> [Burgoyne and Cushman, 1973] </ref>. <p> The method for computing t is given as follows <ref> [Burgoyne and Cushman, 1973] </ref>: "Let R 2n denote the 2n dimensional real vector space on which A acts. We next construct certain subspaces of R 2n . <p> We arrive at the above form by combining each of the 2 fi 2 normal forms for t = 0 (see 4.13 in x4.1.3) 2 4 * i i 7 via the technique given in <ref> [Burgoyne and Cushman, 1973] </ref>: "The matrix of A on R 2n with respect to the basis fb 1 ; b 2 ; :::; b 2n g is B = 6 6 6 6 6 6 6 6 6 6 6 E 1 G 1 E 3 G 3 : : H <p> The above differs from the basis given in <ref> [Burgoyne and Cushman, 1973] </ref> because we have restricted to N = 0 and t = 0. 42 For the 4 fi 4 case we change notation slightly to remain consistent with [Burgoyne and Cushman, 1973]. <p> The above differs from the basis given in <ref> [Burgoyne and Cushman, 1973] </ref> because we have restricted to N = 0 and t = 0. 42 For the 4 fi 4 case we change notation slightly to remain consistent with [Burgoyne and Cushman, 1973]. We use s ; l instead of 1 ; 2 and z; w instead of z 1 ; z 2 . To write the change of basis matrix, we need to compute the four intermediate values z, w, Az, and Aw. <p> and 4.47 and can be expressed in terms of Re (x s ) and Re (x l ), respectively z = ( s =2) 1 (Re (x s )) = A s p ; 0; 0; A s s B s p p l =2 l =2 As described in <ref> [Burgoyne and Cushman, 1973] </ref>, A maps Re (x s ) ! s (Im (x s )) and Re (x l ) ! l (Im (x l )), so 43 p = s ( s =2) 1 (Im (x s )) p = 0; 2 q ( s A s B s <p> Note that P lower differs from the incorrect change of basis matrix given in <ref> [Burgoyne and Cushman, 1973] </ref> P BC = 6 6 6 6 4 2 q l A l 0 0 q B s 2 l 0 0 2 s q ( l A l B l ) 2 q l (A l l B l ) 0 0 7 7 7 7 <p> However, this will not necessarily generate a characteristic polynomial with rational coefficients. We are looking for illustrative examples which are concise and easy to analyze, like the original A L4 taken from <ref> [Burgoyne and Cushman, 1973] </ref>. <p> Typographical Errors in Burgoyne/Cushman Typographical Errors in Burgoyne/Cushman <ref> [Burgoyne and Cushman, 1973] </ref> 1. The change of basis matrix (P ) given on page 442 is incorrect (see x4.2). 2. In the normal form (B) given on page 442, the entries for B 24 and B 31 are given as * s l and * l s , respectively. <p> Note that the test for the degree of nilpotency requires the zero-round-off feature of axl arithmetic. I.2.5 symplnf.c The symplnf.c module contains code for automating the algorithm given by Burgoyne and Cushman <ref> [Burgoyne and Cushman, 1973] </ref> to compute the symplectic normal form of a matrix. The function symplnf takes as input a matrix A and its characteristic polynomial, passed as an array of terms of the form x 2 ff i .
Reference: [Burke et al., 1946] <author> Burke, Goldstein, and Von Neuman. </author> <title> Preliminary discussion of the logical design of an electronic computing instrument. </title> <type> U.S. </type> <institution> Army Ordinance Report, </institution> <year> 1946. </year> <note> (reprinted as chapter 3 of Computer Structures Reading and Examples, by G.G. </note> <editor> Bell and A. Newell, </editor> <publisher> McGraw-Hill, </publisher> <address> N.Y., </address> <year> 1971). </year>
Reference-contexts: Each term loses its identity in the Z Q Q hierarchy and is converted to a best approximation in a subfield of the rationals (the "field" of floating point numbers). (We note that the floating point method for computer arithmetic has persisted with essentially no changes since first introduced <ref> [Burke et al., 1946] </ref>.) The result of the calculation cannot be recognized as an integer, but instead remains in the field of approximations. We avoid the pitfalls of approximation by developing a system of arithmetic which distinguishes between rational and algebraic quantities.
Reference: [Caviness, 1970] <author> B.F. Caviness. </author> <title> On canonical forms and simplification. </title> <journal> Journal of the Association for Computer Machinery, </journal> <volume> 17 </volume> <pages> 385-396, </pages> <year> 1970. </year>
Reference-contexts: Without special techniques we cannot, for example, recognize that ( p q p q p p 2 + 1) are equal. Although there can be no algorithm for defining a unique representation <ref> [Caviness, 1970] </ref>, heuristics result in unique representations for most cases. These heuristics include conventions for ordering terms, to handle cases like: ( 2 + 1) p q 2 + 1 ( 2 + 1) (1:6) We also include heuristics to handle more subtle cases. <p> In particular, our first step will be porting the "celestia" package from Pascal/floating-point to C++/axl and measuring the improvement in long term integration. 6.5 Learning Heuristics Although the general problem of checking the equivalence of two nested radicals is not solvable <ref> [Caviness, 1970] </ref>, the approach of adding heuristics one-by-one to handle special cases as they come up (see x4.4) has proved effective [Lenat, 1976]. The axl system may be extended to learn new techniques for reducing nested radicals by generalizing from examples. 83 Appendix A.
Reference: [Char et al., 1988] <author> B.W. Char, K.O. Geddes, G.H. Gonnet, M.B. Monagan, </author> <title> and S.M. </title> <type> Watt. </type>
Reference-contexts: Thanks to C++ operator overloading, we were able to convert from integer arithmetic to gnu bignum arithmetic by changing only the type declarations. This change required less than two hours of programming time. Although many bignum implementations appear in the literature [Knuth, 1981] <ref> [Char et al., 1988] </ref>[Brent, 1978][Martin and Fateman, 1971], the gnu package was the first to provide bignum arithmetic in the C++ context. Before the gnu package became available, we developed our own C++ bignum package. <p> Similar Packages We conducted a brief survey to determine whether or not other computer algebra pack ages provide Q arithmetic, and, if so, whether they could be applied to problems in Hamil tonian Mechanics. We looked at three packages: Maple <ref> [Char et al., 1988] </ref>, Mathemat ica [Wolfram, 1988], and IDL [RSI, 1991]. Of these, neither Mathematica nor IDL provide any mechanism similar to axl.
References-found: 8

