URL: ftp://ftp.cs.clemson.edu/techreports/95-108.ps.Z
Refering-URL: http://www.cs.clemson.edu/html/research/techrpt.shtml
Root-URL: http://www.cs.clemson.edu
Email: malloy@cs.clemson.edu  
Title: An Efficient, Extensible Design of a PCS Network Simulation  
Author: John T. Douglass, Devidas A. Gupta, Brian A. Malloy and David A. Sykes 
Address: Clemson, SC 29634  
Affiliation: Department of Computer Science Clemson University  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> C. D. Carothers, R. M. Fujimoto, Y. B. Lin, and P. </author> <title> England. Distributed simulation of large scale PCS networks. </title> <booktitle> Proceedings of the Second International Workshop on Modeling, Analysis, and Simulation of Computer and Telecommunication Systems, </booktitle> <pages> pages 2-6, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: To provide adequate service, the ratio of blocked calls to the number of attempted calls and attempted handoffs must remain below one percent <ref> [1] </ref>. A technique for gauging PCS performance is to simulate the actions of the cellular phones for the geographic location under study. However, there are two important problems associated with PCS simulation. <p> In dynamic channel allocation, the channel being used by a call may actually be located in a nearby cell. 1 of the network (boundary effect) [7]. It has been shown that a network must contain more than a thousand cells to avoid the boundary effect <ref> [1, 8] </ref>. A second problem is that PCS technology is advancing rapidly. Thus, the simulation model must be adaptable to allow advances in technology to be easily incorporated. <p> Intuitively, the blocking probability is the probability that a call will be blocked or terminated due to channel availability. To provide quality service to subscribers, it is important to engineer the PCS network so that the blocking probability is low, typically less than 1 percent <ref> [1] </ref>. Blocking probability can be controlled in a PCS network simulation by adjusting several of the parameters that define the network. These parameters are average call length, average call interarrival time, number of channels per cell, and number of portables per cell. <p> A processor may execute events in any order and when the local causality constraint is violated the processor returns to a previous state where the constraint holds. This action of state recovery is known as rollback. The optimistic approach can produce substantial speedup due to parallelism <ref> [1] </ref>. In the conservative approach, success is typically measured by the amount of lookahead that can be achieved to allow a window of opportunity in which processors can execute in parallel. <p> Cells have channels and track the entry and exit of portables within their boundaries. We model calls, considering them as important objects that represent an interaction between cells and portables. We do not model call origination for the reasons cited in reference <ref> [1, 5] </ref>. Within the object model, the Event class is a design-level class, a class that does not exist in the problem but is introduced in the solution.
Reference: [2] <author> D. C. Cox. </author> <title> Personal communications a viewpoint. </title> <journal> IEEE Comunications Magazine, </journal> <volume> 128(11), </volume> <year> 1990. </year>
Reference-contexts: We review the wrap-around approach of [7], which facilitates our network simulation. We then overview the two important protocols for parallelizing simulations and give a brief summary of PVM. 2.1 What is PCS? A personal communication service (PCS) network <ref> [2] </ref> is a wireless communication network that provides service for mobile phone users or PCS subscribers. The communication area covered by a PCS is partitioned into areas called cells with a set of radio channels assigned to each cell.
Reference: [3] <author> Anthony P. Galluscio, John T. Douglass, Brian A. Malloy, and A. Joe Turner. </author> <title> A comparison of two methods for advancing time in parallel discrete event simulation. </title> <booktitle> Proceedings of the 1995 Winter Simulation Conference, </booktitle> <month> December </month> <year> 1995. </year> <note> to appear. </note>
Reference-contexts: The results of our experiments indicate that the event-driven, object-oriented model is more efficient than the time-driven, procedural model. Furthermore, the time-driven approach, generally considered to be more efficient than the event-driven approach <ref> [3, 11, 10] </ref>, does not map well to the problem of modeling a PCS network. In the next section, we provide background including a discussion of PCS networks, the various protocols for parallelizing simulation and a brief summary of PVM. <p> Further inspection of columns three and five illustrate similar results. These timings are counter intuitive since experiments have shown that the time-driven approach is more efficient than the event-driven approach <ref> [3, 11, 10] </ref>. Furthermore, the dynamic binding used to resolve polymorphism may exact a run-time cost. In the time-driven approach, a list of activities is examined on each timing cycle to determine if a state change can occur; time is updated at the end of each cycle.
Reference: [4] <author> A. Geist, A. Beguelin, J. Dongarra, W. Jiang, R. Manchek, and V. Sunderam. </author> <title> PVM 3 user's guide and reference manual. </title> <institution> Oak Ridge National Laboratory, ORNL/TM-12-87:108, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: Since a PCS network simulation contains a high degree of predictability, it maps more easily to the optimistic approach than to the conservative approach. 2.4 Parallel Virtual Machine Parallel Virtual Machine (PVM) <ref> [4] </ref> is a software package that provides support for the construction of a parallel computer using a network of workstations. PVM supports a message passing communication paradigm that can accommodate more than 25 platforms, ranging from a Cray/YMP to an 80386 personal computer running the Unix operating system.
Reference: [5] <author> A. G. Greenberg, B. D. Lubachevsky, D. M. Nicol, and P. E. Wright. </author> <title> Efficient massively parallel simulation of dynamic channel assignment schemes for wireless cellular communications. </title> <booktitle> Proceedings of the 8th Workshop on Parallel and Distribted Simulation (PADS'94), </booktitle> <volume> 24(1) </volume> <pages> 187-194, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: Cells have channels and track the entry and exit of portables within their boundaries. We model calls, considering them as important objects that represent an interaction between cells and portables. We do not model call origination for the reasons cited in reference <ref> [1, 5] </ref>. Within the object model, the Event class is a design-level class, a class that does not exist in the problem but is introduced in the solution.
Reference: [6] <author> S.S. Kuek and W. C. Wong. </author> <title> Ordered dynamic channel assignment scheme with reassignment in highway microcells. </title> <journal> IEEE Transactions on Vehicle Technology, </journal> <volume> 41(3) </volume> <pages> 271-277, </pages> <year> 1992. </year>
Reference-contexts: However, there are two important problems associated with PCS simulation. The first problem is that PCS simulation is computationally intensive and demanding of the memory hierarchy so that many simulations contain fewer than 50 cells in the network <ref> [6, 13] </ref>. However, small-scale networks can induce inaccuracies into the simulation due to the effect of handoffs occurring at the boundary 1 There are two major channel allocation schemes. <p> Using conventional sequential algorithms results in 4 time consuming and burdensome simulation runs. As a result of these slow simulation runs, most studies only examine small-scale PCS networks containing less than 50 cells, and output statistics of the boundary cells are generally discarded to avoid the boundary effect <ref> [6, 13] </ref>.
Reference: [7] <author> Y. B. Lin and V. W. Mak. </author> <title> Eliminating boundary effect of a large scale personal communication service network. </title> <journal> ACM Transactions on Modeling and Computer Simulation, </journal> <volume> 4(2) </volume> <pages> 165-190, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: In fixed channel allocation, a set of channels is assigned to the cell and only calls located in the cell may use those channels. In dynamic channel allocation, the channel being used by a call may actually be located in a nearby cell. 1 of the network (boundary effect) <ref> [7] </ref>. It has been shown that a network must contain more than a thousand cells to avoid the boundary effect [1, 8]. A second problem is that PCS technology is advancing rapidly. Thus, the simulation model must be adaptable to allow advances in technology to be easily incorporated. <p> Finally, we draw some conclusions in section 7 2 Background In this section we provide background for our work beginning with a description of a typical personal communication service network. We review the wrap-around approach of <ref> [7] </ref>, which facilitates our network simulation. We then overview the two important protocols for parallelizing simulations and give a brief summary of PVM. 2.1 What is PCS? A personal communication service (PCS) network [2] is a wireless communication network that provides service for mobile phone users or PCS subscribers. <p> This approach may lead to biased output statistics, but simulating a large network with a wrap-around topology can be used to achieve reliable results <ref> [7] </ref>. 2.2 Wrap-around Topology The communication area covered by a PCS simulation is finite, while in reality there are other cells outside the area that would interact with the boundary cells in the simulation. The effect of not simulating these cells can deliver unreliable results.
Reference: [8] <author> B. A. Malloy and A. M. Montroy. </author> <title> A parallel distributed simulation of a large-scale PCS network: Keeping secrets. </title> <booktitle> Proceedings of the 1995 Winter Simulation Conference, </booktitle> <month> December </month> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: In dynamic channel allocation, the channel being used by a call may actually be located in a nearby cell. 1 of the network (boundary effect) [7]. It has been shown that a network must contain more than a thousand cells to avoid the boundary effect <ref> [1, 8] </ref>. A second problem is that PCS technology is advancing rapidly. Thus, the simulation model must be adaptable to allow advances in technology to be easily incorporated. <p> Thus, the simulation model must be adaptable to allow advances in technology to be easily incorporated. In previous work, we have addressed the first problem by parallelizing the PCS simulation using a conservative protocol on a distributed network of workstations <ref> [8, 9] </ref>. By using a unique look-ahead technique called secrets and by distributing the computation and memory references across eight workstations, our speedups ranged from 3.4 to 7.5 over the fastest sequential execution, reducing the time to perform the simulation from over 20 hours to less than 4 hours. <p> We used a procedural, time-driven approach in our simulation and our parallel architecture was parallel virtual machine (PVM)[4]. The problem with our previous work is that the procedural design was inflexible to extension and modification <ref> [8] </ref>. Thus, our initial design exploited parallelism to solve the first problem but incurred the second problem by producing an inflexible model. In this paper we address the second problem by presenting an event-driven design that exploits polymorphism to produce an object-oriented, extensible model. <p> Our prototype implementation is currently being augmented to use distributed processing to run simulations for grids of 1024 or more cells. The basic approach for distributing the processing is to distribute the grid over a set of processors, and then to apply secrets <ref> [8] </ref> to increase speedups. The use of secrets requires that a rectangular grid be decomposed into stripes. Our design is based on the sequential design we have presented, but with the addition of some new design classes. <p> While this implementation is not efficient in a sequential environment, it maps well to a distributed environment and affords excellent speedup over the sequential implementation <ref> [8] </ref>. For the event-driven approach, the three events are represented in a priority queue ordered by simulation time, where call completions have a higher priority than call arrivals. When a portable residing in a cell receives a call, a corresponding call completion event must be scheduled.
Reference: [9] <author> Albert M. Montroy and Brian A. Malloy. </author> <title> A parallel distributed simulation of a large-scale PCS network: Keeping secrets. </title> <type> Technical Report 95-106, </type> <institution> Clemson University, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: Thus, the simulation model must be adaptable to allow advances in technology to be easily incorporated. In previous work, we have addressed the first problem by parallelizing the PCS simulation using a conservative protocol on a distributed network of workstations <ref> [8, 9] </ref>. By using a unique look-ahead technique called secrets and by distributing the computation and memory references across eight workstations, our speedups ranged from 3.4 to 7.5 over the fastest sequential execution, reducing the time to perform the simulation from over 20 hours to less than 4 hours.
Reference: [10] <author> Richard E. Nance. </author> <title> On time flow mechanisms for discrete system simulation. </title> <journal> Management Science, </journal> <volume> 18(1) </volume> <pages> 59-73, </pages> <month> September </month> <year> 1971. </year>
Reference-contexts: The results of our experiments indicate that the event-driven, object-oriented model is more efficient than the time-driven, procedural model. Furthermore, the time-driven approach, generally considered to be more efficient than the event-driven approach <ref> [3, 11, 10] </ref>, does not map well to the problem of modeling a PCS network. In the next section, we provide background including a discussion of PCS networks, the various protocols for parallelizing simulation and a brief summary of PVM. <p> Further inspection of columns three and five illustrate similar results. These timings are counter intuitive since experiments have shown that the time-driven approach is more efficient than the event-driven approach <ref> [3, 11, 10] </ref>. Furthermore, the dynamic binding used to resolve polymorphism may exact a run-time cost. In the time-driven approach, a list of activities is examined on each timing cycle to determine if a state change can occur; time is updated at the end of each cycle.
Reference: [11] <author> Richard E. Nance. </author> <title> The time and state relationships in simulation modeling. </title> <journal> Communications of the ACM, </journal> <volume> 24(4) </volume> <pages> 173-179, </pages> <year> 1981. </year>
Reference-contexts: The results of our experiments indicate that the event-driven, object-oriented model is more efficient than the time-driven, procedural model. Furthermore, the time-driven approach, generally considered to be more efficient than the event-driven approach <ref> [3, 11, 10] </ref>, does not map well to the problem of modeling a PCS network. In the next section, we provide background including a discussion of PCS networks, the various protocols for parallelizing simulation and a brief summary of PVM. <p> Further inspection of columns three and five illustrate similar results. These timings are counter intuitive since experiments have shown that the time-driven approach is more efficient than the event-driven approach <ref> [3, 11, 10] </ref>. Furthermore, the dynamic binding used to resolve polymorphism may exact a run-time cost. In the time-driven approach, a list of activities is examined on each timing cycle to determine if a state change can occur; time is updated at the end of each cycle.
Reference: [12] <author> James Rumbaugh, Michael Blaha, William Premerlani, Fredrick Eddy, and William Lorensen. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice-Hall, </publisher> <year> 1991. </year>
Reference: [13] <author> M. Zhang and T. S. Yum. </author> <title> Comparisons of channel-assignment strategies in cellular mobile telephone systems. </title> <journal> IEEE Transactions on Vehicle Technology, </journal> <volume> 38(4) </volume> <pages> 211-215, </pages> <year> 1989. </year> <month> 16 </month>
Reference-contexts: However, there are two important problems associated with PCS simulation. The first problem is that PCS simulation is computationally intensive and demanding of the memory hierarchy so that many simulations contain fewer than 50 cells in the network <ref> [6, 13] </ref>. However, small-scale networks can induce inaccuracies into the simulation due to the effect of handoffs occurring at the boundary 1 There are two major channel allocation schemes. <p> Using conventional sequential algorithms results in 4 time consuming and burdensome simulation runs. As a result of these slow simulation runs, most studies only examine small-scale PCS networks containing less than 50 cells, and output statistics of the boundary cells are generally discarded to avoid the boundary effect <ref> [6, 13] </ref>.
References-found: 13

