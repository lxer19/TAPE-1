URL: http://www.cs.dartmouth.edu/~cliff/papers/MultiFlowGeneral.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/~cliff/papers/
Root-URL: http://www.cs.dartmouth.edu
Title: Fast Approximation Algorithms for Multicommodity Flow Problems  
Author: Tom Leighton Fillia Makedon Serge Plotkin Clifford Stein Eva Tardos k Spyros Tragoudas flfl 
Note: 02139. Support provided by NSF PYI Award CCR-89-96272 with matching support from UPS and Sun and by an AT&T Bell Laboratories Graduate Fellowship. k  Research supported in part by a David and Lucile Packard Fellowship and by the National Science Foundation, the Air Force Office of Scientific Research, and the Office of Naval Research, through NSF grant DMS-8920550.  62901. Supported by an ACM-SIGDA Design Automation Award and the CLEAR Center at UTD, UTD proposal #870049.  
Address: Cambridge, MA  Ithaca NY.  
Affiliation: Laboratory for Computer Science, MIT,  School of Operations Research, Cornell University,  flfl Department of Computer Science, Southern Illinois University, Carbondale, Illinois  
Date: April 19, 1993  
Abstract: fl A preliminary version of this paper appeared in the Proceedings of the 23rd Annual Symposium on Theory of Computing, 1991, pp. 101-111. y Department of Mathematics and Laboratory for Computer Science, MIT, Cambridge, MA. Research supported by DARPA under Contracts N00014-87-K-825 and N00014-86-K-0593, the Air Force under Contract OSR-89-0271, and the Army under Contract DAAL-03-86-K-0171. z Mathematics and Computer Science Department, Bradley Hall, Dartmouth College, Hanover, NH 03755. x Department of Computer Science, Stanford University, Stanford CA. Research supported by NSF Research Initiation Award CCR-900-8226, by U.S. Army Research Office Grant DAAL-03-91-G-0102, by ONR Contract N00014-88-K-0166, and by a grant from Mitsubishi Electric Laboratories.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. K. Ahuja, A.V. Goldberg, J. B. Orlin, and R.E. Tarjan. </author> <title> Finding minimum cost flows by double scaling. </title> <type> Sloan Working Paper 2047-88, </type> <institution> MIT, </institution> <address> Cambridge, MA, </address> <year> 1988. </year>
Reference-contexts: In Section 5.2, we discuss which minimum-cost flow algorithm to use. We will use different minimum cost flow algorithms in different situations. For general concurrent flow problems, the best choice seems to be either the algorithm of Goldberg and Tarjan [5] or that of Ahuja, Goldberg, Orlin and Tarjan <ref> [1] </ref>. For concurrent flow with uniform capacity, we use Gabow and Tarjan's [3] algorithm for the assignment problem. <p> The above bound can be improved if the capacities are small relative to n 2 =m. In this case we will round the demands and solve this rounded problem using the double scaling algorithm of Ahuja, Goldberg, Orlin, and Tarjan <ref> [1] </ref>. We will then satisfy the remaining flow on arbitrary paths. This flow will still satisfy (7) and the rounding will allow us to use a faster algorithm. <p> If we divide both the demands and the capacities by , we get a problem where the maximum capacity of an edge is U= = 16U nk* 1 . We can then use the double scaling algorithm of Ahuja, Goldberg, Orlin and Tarjan <ref> [1] </ref> for solving the minimum-cost problem with rounded demands. By Lemma 5.4, this gives a flow that satisfies the capacity constraints u (vw) and has cost at most *=(8k) more than the minimum cost but does not satisfy all the demands. <p> Now Lemma 5.4 implies that (7) is satisfied. For all but very dense graphs the double scaling algorithm of Ahuja, Goldberg, Orlin and Tarjan <ref> [1] </ref> gives a better bound. As we observed no edge will carry more than d 0 i units of flow in the optimal flow of commodity i.
Reference: [2] <author> L. R. Ford and D. R. Fulkerson. </author> <title> Maximal flow through a network. </title> <journal> Canad. J. Math., </journal> <volume> 8 </volume> <pages> 399-404, </pages> <year> 1956. </year>
Reference-contexts: For concurrent flow with uniform capacity, we use Gabow and Tarjan's [3] algorithm for the assignment problem. When both the demands and capacities are uniform, we use the algorithm that iteratively computes shortest paths in the residual graph with nonnegative costs discovered independently by Ford and Fulkerson <ref> [2] </ref> and Yakovleva [16]. 5.1 Rounding the Flows and Lengths Procedure Decongest, as described in the previous section, iteratively computes f fl i , which is a flow that satisfies the demands of commodity i subject to capacity constraints u (vw) on each edge vw, and minimizes C fl i = <p> When both the capacities and demands are uniform and k is relatively large, we can obtain better performance by using the minimum-cost flow algorithms of <ref> [2] </ref> and [16] that repeatedly augment the flow along the shortest path in the residual graph. <p> For simplicity we shall restrict our attention to the case when * is a constant. The number of commodities is O (n). The capacities in the minimum-cost flow problem are integer multiples of . We shall use the minimum-cost flow algorithm due to Ford-Fulkerson <ref> [2] </ref> and Yakovleva [16], that repeatedly augments the flow along the shortest path in the residual graph, to solve these problems.
Reference: [3] <author> H. N. Gabow and R. E. Tarjan. </author> <title> Faster scaling algorithms for network problems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 18 </volume> <pages> 1013-1036, </pages> <year> 1989. </year>
Reference-contexts: For general concurrent flow problems, the best choice seems to be either the algorithm of Goldberg and Tarjan [5] or that of Ahuja, Goldberg, Orlin and Tarjan [1]. For concurrent flow with uniform capacity, we use Gabow and Tarjan's <ref> [3] </ref> algorithm for the assignment problem. <p> We shall use the assignment algorithm of Gabow and Tarjan <ref> [3] </ref> to solve this rounded problem. The remaining flow can be routed by a shortest path computation in the residual graph. We compute a minimum cost flow using the rounded length function. The bounds follow from Lemma 5.4.
Reference: [4] <author> A. V. Goldberg, </author> <type> Personal communication. </type> <month> Jan., </month> <year> 1991. </year>
Reference-contexts: The running times of the presented algorithms depend polynomially on * 1 . The deterministic algorithm runs in time proportional to * 2 and the randomized one runs in time proportional to * 3 . Goldberg <ref> [4] </ref> and Grigoriadis and Khachiyan [6] have shown how to improve the dependence on * of the randomized algorithm to * 2 . Leighton and Rao [10] have shown how to use an approximately optimal solution to a concurrent flow problem to find an approximately sparsest cut in a graph. <p> Goldberg <ref> [4] </ref> and Grigoriadis and Khachiyan [6] have shown how to reduce the running time of our randomized algorithms by an * 1 factor. Goldberg gives a somewhat simplified version of our proof that leads to a randomized selection strategy which avoids having to search for an *-bad commodity.
Reference: [5] <author> A. V. Goldberg and R. E. Tarjan. </author> <title> Solving minimum-cost flow problems by successive approximation. </title> <journal> Mathematics of Operations Research, </journal> <volume> 15(3) </volume> <pages> 430-466, </pages> <year> 1990. </year>
Reference-contexts: In Section 5 we will show how to modify our algorithms to work in the standard RAM model. The question of which minimum-cost flow algorithm to use is also deferred to Section 5, where we show that the cost-scaling algorithm of Goldberg and Tarjan <ref> [5] </ref> is a good choice in most instances. 9 4.1 Finding an Initial Solution To find an initial solution, we separately route each commodity i. <p> In Section 5.2, we discuss which minimum-cost flow algorithm to use. We will use different minimum cost flow algorithms in different situations. For general concurrent flow problems, the best choice seems to be either the algorithm of Goldberg and Tarjan <ref> [5] </ref> or that of Ahuja, Goldberg, Orlin and Tarjan [1]. For concurrent flow with uniform capacity, we use Gabow and Tarjan's [3] algorithm for the assignment problem.
Reference: [6] <author> M. D. Grigoriadis and L. G. Khachiyan. </author> <title> Fast approximation schemes for convex programs with many blocks and coupling constraints. </title> <type> Technical Report DCS-TR-273, </type> <institution> Department of Computer Science, Rutgers University, </institution> <address> New Brunswick, NJ, </address> <month> March </month> <year> 1991. </year>
Reference-contexts: The running times of the presented algorithms depend polynomially on * 1 . The deterministic algorithm runs in time proportional to * 2 and the randomized one runs in time proportional to * 3 . Goldberg [4] and Grigoriadis and Khachiyan <ref> [6] </ref> have shown how to improve the dependence on * of the randomized algorithm to * 2 . Leighton and Rao [10] have shown how to use an approximately optimal solution to a concurrent flow problem to find an approximately sparsest cut in a graph. <p> Goldberg [4] and Grigoriadis and Khachiyan <ref> [6] </ref> have shown how to reduce the running time of our randomized algorithms by an * 1 factor. Goldberg gives a somewhat simplified version of our proof that leads to a randomized selection strategy which avoids having to search for an *-bad commodity.
Reference: [7] <author> S. Kapoor and P. M. Vaidya. </author> <title> Fast algorithms for convex quadratic programming and multicom-modity flows. </title> <booktitle> In Proceedings of the 18th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 147-159, </pages> <year> 1986. </year>
Reference-contexts: Linear program 1 By simple, we mean that each commodity has a single source and a single sink. 3 ming can be used to solve the problem optimally in polynomial time. Kapoor and Vaidya <ref> [7] </ref> gave a method to speed up the matrix inversions involved in Karmarkar-type algorithms for multicom-modity flow problems; combining their technique with Vaidya's new linear programming algorithm that uses fast matrix multiplication [15] yields a time bound of O (k 3:5 n 3 m :5 log (nDU )) for the concurrent
Reference: [8] <author> P. Klein, A. Agrawal, R. Ravi, and S. Rao. </author> <title> Approximation through multicommodity flow. </title> <booktitle> In Proceedings of the 31st Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 726-737, </pages> <year> 1990. </year>
Reference-contexts: As a consequence, they also showed how to approximately solve a wide variety of NP-hard graph problems, including minimum feedback arc set, minimum cut linear arrangement, and minimum area layout. This result has recently been generalized by Klein, Agrawal, Ravi and Rao <ref> [8] </ref> to find an approximately most congested cut in a general concurrent flow problem. The congestion of a cut is the ratio between the capacity of the cut and the demand crossing the cut. <p> Cut Problem As an application of our concurrent flow algorithms we give fast implementations of the minimum-ratio cut approximation algorithms of Leighton and Rao [10], its extension to hypergraphs by Makedon and Tragoudas [11], its extension to node weighted graphs, and the approximation algorithm of Klein, Agrawal, Ravi, and Rao <ref> [8] </ref>. The computational bottleneck of these algorithms is solving a concurrent flow problem and its linear programming dual. First, we will summarize the minimum-ratio cut approximation results. <p> demand d (s; t) between nodes s and t equals to -(s)-(t). (If the weights are scaled so that the total node-weight is n, then the main change to the Leighton-Rao algorithm is to select the node s for starting a tree with -(s) maximum.) Klein, Agrawal, Ravi, and Rao <ref> [8] </ref> extended the Leighton and Rao results to the case of simple concurrent flow problems with integral capacities and arbitrary integral demands. For a source-sink pair (s; t), let d (s; t) denote the corresponding demand. <p> The minimum ratio cut problem is to minimize the ratio u ((A))=d (A; A) over all cuts. The minimum value is an upper bound on 1= fl for the concurrent flow problem. Klein, Agrawal, Ravi, and Rao <ref> [8] </ref> proved that this upper bound is at most a factor of O (log nU log kD) above 1= fl in general and gave an O (log nU log kD) approximation algorithm for the minimum cut problem, where U is the maximum capacity and D is the maximum demand. <p> Proof : The idea is to use the O (log n log kD) approximation result of Klein, Agrawal, Ravi, and Rao <ref> [8] </ref> as improved by Tragoudas [14]. Consider the following auxiliary concurrent flow problem. The graph is G with capacities u. For every edge vw 2 E there is a demand of value d (v; w) = ^u (vw) u (vw) from v to w.
Reference: [9] <author> P. Klein, S. A. Plotkin, C. Stein, and E. Tardos. </author> <title> Faster approximation algorithms for the unit capacity concurrent flow problem with applications to routing and finding sparse cuts. </title> <type> Technical Report 961, </type> <institution> School of Operations Research and Industrial Engineering, Cornell University, </institution> <year> 1991. </year> <note> A preliminary version of this paper appeared in Proceedings of the 22nd Annual ACM Symposium on Theory of Computing, pages 310-321, 1990. To appear in SIAM J. Computing. </note>
Reference-contexts: For this special case, Shahrokhi and Matula [12] gave an algorithm that ran in O (nm 7 ) time. A faster algorithm was later given by Klein, Plotkin, Stein, and Tardos <ref> [9] </ref> which runs in expected O ((k + m)(m + n log n) log n) time. Our new algorithm can be applied to this special case and gives improved bounds when k &lt; m=(log n log k). Our algorithm is similar in spirit to those of [12] and [9] in that <p> and Tardos <ref> [9] </ref> which runs in expected O ((k + m)(m + n log n) log n) time. Our new algorithm can be applied to this special case and gives improved bounds when k &lt; m=(log n log k). Our algorithm is similar in spirit to those of [12] and [9] in that we start with a flow that satisfies the demands but not the capacity constraints, and then we iteratively reroute parts of the flow so as to produce a flow that is closer to optimal. However, our algorithm can handle networks with arbitrary capacities. <p> Given a solution to the concurrent flow problem, they showed how to approximately solve a variety of NP-hard problems, including minimum deletion of clauses of a 2-CNF formula, via minimization, minimum chordalization of a graph and register sufficiency. The previously known concurrent flow algorithms <ref> [12, 9] </ref> cannot be used in these approximation algorithms except in the special case of problems without capacities, or edge weights. The only 4 algorithms previously known for the capacitated case used linear programming. <p> These conditions will be relaxed versions of the complementary slackness conditions above. Similar relaxed versions of Theorem 2.2 were used in <ref> [9] </ref>. Let * &gt; 0 be an error parameter, f a multicommodity flow satisfying capacities u (vw), and ` a length function. We say that a commodity i is *-good if C i C fl X u (vw)`(vw): Otherwise, we say that the commodity is *-bad. <p> capacity constraints u (vw), a length function ` and an error parameter *): (R1) For every edge vw 2 E either (1 + *)f (vw) u (vw) or u (vw)`(vw) * P (R2) i *-bad k X C i : By a proof similar to that of Theorem 3.2 of <ref> [9] </ref>, we can show that if we can satisfy the relaxed optimality conditions then we actually have an O (*)-optimal flow. A complete version of the proof appears in [13]. Theorem 3.3 Suppose f , `, and * satisfy the relaxed optimality conditions and * &lt; 1=9. <p> In the worst case we need to check all k commodities. Hence, an iteration can be implemented in the time it takes to perform k minimum-cost flow computations. As in <ref> [9] </ref>, we can perform this computation more efficiently by using a simple randomized strategy. If we compute the cost C i of each commodity and then randomly choose a commodity with probability proportional to its cost, then with probability of at least *, we have chosen an 12 *-bad commodity. <p> If the time required to compute the costs of the k commodities is not dominated, we can use a strategy similar to that of <ref> [9] </ref> in which we pick an edge with probability proportional to the cost of flow through this edge, and then a commodity with probability proportional to the cost of flow of this commodity through this edge, and reduce the time for random selection from O (km) to the minimum of O <p> We compute a minimum cost flow using the rounded length function. The bounds follow from Lemma 5.4. Combining the above lemma with Theorem 5.5 and Lemma 4.1 leads to the following theorem. The resulting time bound for the concurrent flow algorithm with uniform capacities improves the previous best bound <ref> [9] </ref> if k &lt; p Theorem 5.11 For * &gt; 0, an *-optimal solution for the simple concurrent flow problem with uniform capacities can be found in expected O (km 3=2 log 2 n (* 3 + log k)) time and in O (k 2 m 3=2 log 2 n (* <p> The resulting time bound is the same up to log factors as those obtained in <ref> [9] </ref>. 6 The Minimum-Ratio Cut Problem As an application of our concurrent flow algorithms we give fast implementations of the minimum-ratio cut approximation algorithms of Leighton and Rao [10], its extension to hypergraphs by Makedon and Tragoudas [11], its extension to node weighted graphs, and the approximation algorithm of Klein, Agrawal, <p> To simplify the bounds we shall count each minimum-cost flow computation as O (( 1 1 + 1)m log n)) time. These bounds can be further improved by using the data structures described in <ref> [9] </ref>. Notice that here we do not have time to find an initial flow using k maximum-flow computations suggested in Lemma 4.1. The capacities of this problem are not rounded, therefore we have to use a general maximum-flow algorithm, and all such algorithms take (mn) time.
Reference: [10] <author> T. Leighton and S. Rao. </author> <title> An approximate max-flow min-cut theorem for uniform multicom-modity flow problems with applications to approximation algorithms. </title> <booktitle> In Proceedings of the 29th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 422-431, </pages> <year> 1988. </year>
Reference-contexts: The deterministic algorithm runs in time proportional to * 2 and the randomized one runs in time proportional to * 3 . Goldberg [4] and Grigoriadis and Khachiyan [6] have shown how to improve the dependence on * of the randomized algorithm to * 2 . Leighton and Rao <ref> [10] </ref> have shown how to use an approximately optimal solution to a concurrent flow problem to find an approximately sparsest cut in a graph. <p> The resulting time bound is the same up to log factors as those obtained in [9]. 6 The Minimum-Ratio Cut Problem As an application of our concurrent flow algorithms we give fast implementations of the minimum-ratio cut approximation algorithms of Leighton and Rao <ref> [10] </ref>, its extension to hypergraphs by Makedon and Tragoudas [11], its extension to node weighted graphs, and the approximation algorithm of Klein, Agrawal, Ravi, and Rao [8]. The computational bottleneck of these algorithms is solving a concurrent flow problem and its linear programming dual. <p> For a subset of the nodes A, we use A to denote the complement of A, the associated cut is the set of edges (A) leaving the set A. Let u ((A)) denote the sum of the capacities of the edges in the cut. Leighton and Rao <ref> [10] </ref> gave an O (log n)-approximation algorithm for the problem of minimizing the ratio u ((A))=(jAjj Aj) over all cuts. <p> The Leighton and Rao <ref> [10] </ref> algorithm uses the solution of a concurrent flow problem in which the demand graph is the complete graph.
Reference: [11] <author> F. Makedon and S. Tragoudas. </author> <title> Approximating the minimum net expansion: Near optimal solutions to circuit partitioning problems. </title> <booktitle> In Procedings of the 1990 Workshop on Graph Theoretic Concepts in Computer Science, </booktitle> <month> June </month> <year> 1990. </year> <month> 26 </month>
Reference-contexts: time bound is the same up to log factors as those obtained in [9]. 6 The Minimum-Ratio Cut Problem As an application of our concurrent flow algorithms we give fast implementations of the minimum-ratio cut approximation algorithms of Leighton and Rao [10], its extension to hypergraphs by Makedon and Tragoudas <ref> [11] </ref>, its extension to node weighted graphs, and the approximation algorithm of Klein, Agrawal, Ravi, and Rao [8]. The computational bottleneck of these algorithms is solving a concurrent flow problem and its linear programming dual. First, we will summarize the minimum-ratio cut approximation results. <p> By applying this approximation algorithm they obtained polylog-times-optimal approximation algorithms for a wide variety of NP-complete graph problems, including minimum flux, minimum feedback arc set, minimum cut linear arrangement, and minimum area layout. Makedon and Tragoudas <ref> [11] </ref> extended this result to hypergraphs. Consider the concurrent flow problem on G with one unit of demand between every pair of nodes. <p> in O (k fl nm log nU log k log n minflog (n 2 =m); log log nU g) expected time. 23 An analogous theorem can be obtained for finding approximately sparsest cuts in hypergraphs using the concurrent flow algorithm in conjunction with the approximation algorithm of Makedon and Tragoudas <ref> [11] </ref>. 6.3 Graphs with Low Maximum Degree Next we improve the running time given in Corollary 6.5 for low-degree graphs G. The new running time will depend on , the maximum degree of any node in the graph.
Reference: [12] <author> F. Shahrokhi and D. W. Matula. </author> <title> The maximum concurrent flow problem. </title> <journal> Journal of the ACM, </journal> <volume> 37:318 - 334, </volume> <year> 1990. </year>
Reference-contexts: For this special case, Shahrokhi and Matula <ref> [12] </ref> gave an algorithm that ran in O (nm 7 ) time. A faster algorithm was later given by Klein, Plotkin, Stein, and Tardos [9] which runs in expected O ((k + m)(m + n log n) log n) time. <p> Our new algorithm can be applied to this special case and gives improved bounds when k &lt; m=(log n log k). Our algorithm is similar in spirit to those of <ref> [12] </ref> and [9] in that we start with a flow that satisfies the demands but not the capacity constraints, and then we iteratively reroute parts of the flow so as to produce a flow that is closer to optimal. However, our algorithm can handle networks with arbitrary capacities. <p> Given a solution to the concurrent flow problem, they showed how to approximately solve a variety of NP-hard problems, including minimum deletion of clauses of a 2-CNF formula, via minimization, minimum chordalization of a graph and register sufficiency. The previously known concurrent flow algorithms <ref> [12, 9] </ref> cannot be used in these approximation algorithms except in the special case of problems without capacities, or edge weights. The only 4 algorithms previously known for the capacitated case used linear programming. <p> jf i (vw)j, and say that a multicommodity flow f in G is feasible if f (vw) u (vw) for all edges vw. (Note that f (vw) is always non-negative.) We consider the optimization version of this problem, called the simple concurrent flow problem, first defined by Shahrokhi and Matula <ref> [12] </ref>. In this problem the objective is to compute the 5 maximum possible value z such that there is a feasible multicommodity flow with demands z d i for i = 1; : : :; k. We call z the throughput of the multicommodity flow.
Reference: [13] <author> C. Stein. </author> <title> Approximation algorithms for multicommodity flow and shop scheduling problems. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <address> Cambridge, MA, </address> <month> August </month> <year> 1992. </year> <note> Also appears as MIT/LCS/TR-550. </note>
Reference-contexts: A complete version of the proof appears in <ref> [13] </ref>. Theorem 3.3 Suppose f , `, and * satisfy the relaxed optimality conditions and * &lt; 1=9. Then f is O (*)-optimal, i.e. is at most a factor (1 + 9*) more than the minimum possible value.
Reference: [14] <author> S. Tragoudas. </author> <title> VLSI partitioning approximation algorithms based on multicommodity flow and other techniques. </title> <type> PhD thesis, </type> <institution> University of Texax at Dallas, </institution> <year> 1991. </year>
Reference-contexts: Tragoudas <ref> [14] </ref> has observed that their algorithm can be modified to give the O (log n log kD) factor instead. Using this result they give approximation algorithms for chordalization of a graph and for register sufficiency. <p> Proof : The idea is to use the O (log n log kD) approximation result of Klein, Agrawal, Ravi, and Rao [8] as improved by Tragoudas <ref> [14] </ref>. Consider the following auxiliary concurrent flow problem. The graph is G with capacities u. For every edge vw 2 E there is a demand of value d (v; w) = ^u (vw) u (vw) from v to w.
Reference: [15] <author> P. M. Vaidya. </author> <title> Speeding up linear programming using fast matrix multiplication. </title> <booktitle> In Proceedings of the 30th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 332-337, </pages> <year> 1989. </year>
Reference-contexts: Kapoor and Vaidya [7] gave a method to speed up the matrix inversions involved in Karmarkar-type algorithms for multicom-modity flow problems; combining their technique with Vaidya's new linear programming algorithm that uses fast matrix multiplication <ref> [15] </ref> yields a time bound of O (k 3:5 n 3 m :5 log (nDU )) for the concurrent flow problem with integer demands and at least an O (k 2:5 n 2 m :5 log (n* 1 DU )) time bound for the approximation problem.
Reference: [16] <author> M.A. Yakovleva. </author> <title> A problem on minimum transportation cost. In V.S. </title> <editor> Nemchinov, editor, </editor> <booktitle> Applications of Mathematics in Economic Research, </booktitle> <pages> pages 390-399. </pages> <address> Izdat. Social'no-Ekon. Lit., Moscow, </address> <year> 1959. </year> <month> 27 </month>
Reference-contexts: When both the demands and capacities are uniform, we use the algorithm that iteratively computes shortest paths in the residual graph with nonnegative costs discovered independently by Ford and Fulkerson [2] and Yakovleva <ref> [16] </ref>. 5.1 Rounding the Flows and Lengths Procedure Decongest, as described in the previous section, iteratively computes f fl i , which is a flow that satisfies the demands of commodity i subject to capacity constraints u (vw) on each edge vw, and minimizes C fl i = vw2E jf fl <p> When both the capacities and demands are uniform and k is relatively large, we can obtain better performance by using the minimum-cost flow algorithms of [2] and <ref> [16] </ref> that repeatedly augment the flow along the shortest path in the residual graph. <p> For simplicity we shall restrict our attention to the case when * is a constant. The number of commodities is O (n). The capacities in the minimum-cost flow problem are integer multiples of . We shall use the minimum-cost flow algorithm due to Ford-Fulkerson [2] and Yakovleva <ref> [16] </ref>, that repeatedly augments the flow along the shortest path in the residual graph, to solve these problems.
References-found: 16

