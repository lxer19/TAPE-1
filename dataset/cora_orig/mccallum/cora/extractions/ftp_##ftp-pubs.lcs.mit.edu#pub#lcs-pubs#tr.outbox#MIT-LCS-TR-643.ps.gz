URL: ftp://ftp-pubs.lcs.mit.edu/pub/lcs-pubs/tr.outbox/MIT-LCS-TR-643.ps.gz
Refering-URL: ftp://ftp-pubs.lcs.mit.edu/pub/lcs-pubs/listings/tr600.html
Root-URL: 
Title: Small-Depth Counting Networks and Related Topics  
Author: by Michael Richard Klugerman Frank Thomson Leighton David Vogan 
Degree: (1986) Submitted to the Department of Mathematics in partial fulfillment of the requirements for the degree of Doctor of Philosophy at the  All rights reserved. Author  Certified by  Professor of Applied Mathematics Thesis Supervisor Accepted by  Chairman, Departmental Graduate Committee  
Date: September 1994  June 15, 1994  
Affiliation: B.S. Mathematics and Computer Science Yale University  MASSACHUSETTS INSTITUTE OF TECHNOLOGY  c Massachusetts Institute of Technology 1994.  Department of Mathematics  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> E. Aharonson and H. Attiya. </author> <title> Counting networks with arbitrary fan-out. </title> <booktitle> In Proceedings of the 3rd ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 104-113, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: In addition to constructions of counting networks using 2-input 2-output balancers, we discuss constructions of counting networks with balancers having more inputs and outputs. This model was introduced by Aharonson and Attiya <ref> [1] </ref>. In [1], the authors discuss limitations on the number of input and output wires a counting network may have in this generalized model. <p> In addition to constructions of counting networks using 2-input 2-output balancers, we discuss constructions of counting networks with balancers having more inputs and outputs. This model was introduced by Aharonson and Attiya <ref> [1] </ref>. In [1], the authors discuss limitations on the number of input and output wires a counting network may have in this generalized model. In independent work, Klugerman [22] shows that any counting networks comprised of 2-input 2-output balancers must contain 2 k input and output wires for some integer k. <p> In independent work, Klugerman [22] shows that any counting networks comprised of 2-input 2-output balancers must contain 2 k input and output wires for some integer k. The approaches used in [22] and <ref> [1] </ref> are similar and are described in this thesis. The remainder of this thesis is organized as follows: In Chapter 2, we provide lemmas about balancing and counting networks that will be of use in later chapters. <p> This result was independently proved by Klugerman [22] and Aharonson and Attiya <ref> [1] </ref>. Theorem 3.2.1 The width of a balancing network must be a power of two in order to be a smoothing network. Proof: Consider a balancing network of depth d and width n. <p> Proof: Consider a balancing network of depth d and width n. By Theorem 3.1.3, the number of tokens output per wire when 2 d tokens are input into a single wire is p = 2 d =n. Since p is an integer, the result follows. In <ref> [1] </ref>, the authors introduce a more general model of balancer networks they call arbitrary fan-out networks. Rather than restricting the balancers to be 2-input 2-output devices, they allow balancers of variable size. <p> Note that Theorem 3.2.1 is simply a special case of this theorem where B = f2g. We will now provide a proof which is similar in spirit to that provided in <ref> [1] </ref> but which concentrates on the depth of networks rather than the size. As a result, this proof follows the proof of Theorem 3.2.1 quite closely and thus provides a means for testing networks with arbitrary fan-out. Proof: (of Theorem 3.2.2). <p> We next show that a k-smoother can be built for any n. Though the following construction has large depth, it answers the open question asked in <ref> [1] </ref>: Can a counting network be constructed for n-inputs when the input is k-smoothed. Note that the depth of a network has to be at least lg k, independently of n. <p> In addition to discussions of randomized balancers and issues of contention, in [2] the authors discuss constructions involving expanders and models involving tokens with weights. We will not delve into these subjects in this thesis, however. In <ref> [1] </ref>, Aharonson and Attiya present impossibility results which we discussed in Section 3.2. <p> We have shown impossibility results showing restrictions on the possible widths of a counting network. Namely, that a counting network must have 2 k input and 87 output wires for some positive integer k. We also considered more general networks introduced in <ref> [1] </ref> and reviewed similar restrictions found in that paper. In Section 4.5 we constructed networks of width n from balancers of size fp 1 ; p 2 ; ; p k g where n = p ff 1 2 p ff k k . <p> In Section 4.5 we constructed networks of width n from balancers of size fp 1 ; p 2 ; ; p k g where n = p ff 1 2 p ff k k . This in some sense establishes the "tightness" of the impossibility result in <ref> [1] </ref>. The analysis of these impossibility results also leads to a method of testing balancing networks to determine if they are, in fact, smoothing or counting networks.
Reference: [2] <author> W. Aiello, R. Venkatesan, and M. Yung. </author> <title> Asynchronous low latency counting and smoothing networks. </title> <type> Unpublished manuscript, </type> <year> 1993. </year>
Reference-contexts: For the case p = n, the amortized contention is equivalent to the depth of the network (up to constant factors) and so the depth plays as significant a role in latency as the amortized contention. In <ref> [2] </ref>, Aiello, Venkatesan, and Yung continue this contention analysis, obtaining bounds on other counting networks and on the bitonic network. Namely, they show bounds on the number of tokens which must enter the bitonic network before the fi ( p n lg 2 n) bound in [11] holds. <p> Because our O (lg n)-depth counting network is preceded by a butterfly balancing network, for p = (n lg n) our network has optimal amortized contention. In addition to their analysis of amortized contention in counting networks, the authors in <ref> [2] </ref> examine a number of variants of counting networks. In one variant, 82 the authors allow dispersers and combiners in addition to balancers to be used to construct the network. <p> This is shown using induction on depth and Hoeffding's Inequality [20]. The bitonic counters then count their respective shapes resulting in a nearly smoothed shape. In addition to discussions of randomized balancers and issues of contention, in <ref> [2] </ref> the authors discuss constructions involving expanders and models involving tokens with weights. We will not delve into these subjects in this thesis, however. In [1], Aharonson and Attiya present impossibility results which we discussed in Section 3.2.
Reference: [3] <author> M. Ajtai, J. Komlos, and E. Szemeredi. </author> <title> An O(n log n) sorting network. </title> <journal> Combi-natorica, </journal> <volume> 3 </volume> <pages> 1-19, </pages> <year> 1983. </year>
Reference-contexts: A balancing network is an acyclic circuit made up of balancers, just as a comparator network is an acyclic circuit made up of comparators. Similarly, a counting network is a balancing network with additional properties in the same way that a sorting network <ref> [3, 6, 9, 23] </ref> is a comparator network with additional properties. An n-input balancing network has n input wires and n output wires. We say that such a network has width n. <p> As we discuss in Chapter 2, the ability to count depends, in part, on the ability to sort. The O (lg n)-depth and O (lg n lg lg n)-depth constructions both make use of the O (lg n)-depth AKS sorting network construction <ref> [3] </ref>. Unfortunately, the constant in the Big-Oh of the AKS construction is extremely large. As a result, the constants in the counting network constructions are quite large, as well. <p> Given the O (lg n)-depth AKS sorting network result <ref> [3] </ref>, this lemma shows that the problem of constructing a small-depth counting network can be reduced to that of constructing a small-depth smoothing network. Lemma 2.2.1 A sorting network (with comparators replaced by balancers) when applied to the output of a smoothing network, produces a counting network. <p> Any sorting network may be used at these locations by replacing the comparators with balancers. To obtain small depth we use the O (lg n)-depth AKS sorting network <ref> [3] </ref>. We refer to the AKS network with balancers as the AKS balancing network. As we discussed in Chapter 2, when the sorting network is applied to the end of a smoothing network, the resulting network becomes a counting network. We make use of this property in this section.
Reference: [4] <author> N. Alon and J. H. Spencer. </author> <title> The Probabilistic Method. </title> <publisher> Wiley-Interscience, </publisher> <address> New York, NY, </address> <year> 1992. </year>
Reference-contexts: We use martingales for this purpose. Definition 5.2.3 A martingale is a sequence of random variables X 0 ; : : : ; X m such that E [X i+1 j X i ] = X i ; We will make use of the following variant of Azuma's Inequality <ref> [4] </ref> in the analysis of Phase 2: Theorem 5.2.1 Let X 0 = c and let X 0 ; : : : ; X m be a martingale with jX i+1 X i j U; 0 i &lt; m.
Reference: [5] <author> J. Aspnes, M.P. Herlihy, and N. Shavit. </author> <title> Counting networks and multi-processor coordination. </title> <booktitle> In Proceedings of the 23rd Annual Symposium on Theory of Computing, </booktitle> <pages> pages 348-358, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Because a large number of processors may be attempting to access this single variable at the same time, this can lead to high memory contention. In order to avoid this sequential bottleneck, Aspnes, Herlihy, and Shavit <ref> [5] </ref> introduced the concept of a "counting network", and they showed that such networks can be simulated efficiently on an asynchronous shared memory machine as a means of implementing shared counters. By significantly reducing the memory contention, counting networks allow for a much higher degree of concurrency. <p> The value of the counter is then in + j where the network is an n-input n-output network. Additional uses of counting networks, as well as other practical issues such as implementation and simulations of counting networks are discussed in <ref> [5] </ref> and [18]. In [5], the authors describe a number of data structures which are of great importance to parallel and distributed computing which may be implemented with the use of counting networks. In particular, they discuss producer/consumer buffers, and synchronization barriers. <p> The value of the counter is then in + j where the network is an n-input n-output network. Additional uses of counting networks, as well as other practical issues such as implementation and simulations of counting networks are discussed in <ref> [5] </ref> and [18]. In [5], the authors describe a number of data structures which are of great importance to parallel and distributed computing which may be implemented with the use of counting networks. In particular, they discuss producer/consumer buffers, and synchronization barriers. <p> Though small depth is important for practical reasons, the focus in this thesis is on the combinatorial nature of these networks. These networks have a rich mathematical structure which we explore in order to obtain our results. In the original paper on counting networks, Aspnes, Herlihy, and Shavit <ref> [5] </ref> provide two O (lg 2 n)-depth families of n-input counting networks by proving that the balancing network isomorphic to Batcher's bitonic sorting network [6, 9, 23] and isomorphic to the balanced periodic sorting network of Dowd, Perl, Rudolph, and Saks [10] are counting networks. <p> The main result in this thesis is Klugerman's uniform polynomial-time construction of an O (lg n)-depth counting network. A slightly weaker result presented by Klugerman and Plaxton in [21] provides an existential proof for such a network. Our result answers the question posed in <ref> [5] </ref>, which asks whether such an optimal-depth counting network exists. <p> In Chapter 3, we discuss negative results and lower bounds pertaining to counting 15 networks. Chapter 4 contains constructions of simple small-depth counting networks. Sections 4.1 and 4.2 describe the O (lg 2 n)-depth counting networks presented in <ref> [5] </ref>. In Section 4.3 we describe the 2-smoother, a tool used to aid in the construction of the small-depth counting networks described in Section 4.4 and Chapter 5. Section 4.4 contains the construction and analysis of our O (lg n lg lg n)-depth counting network. <p> This is a simple extension of the serialization lemma given in <ref> [5] </ref>. Lemma 2.1.1 The order in which tokens pass through the network does not affect the number of tokens output on each wire. Proof: We prove the claim by induction on the depth of the network. <p> Note that there is no guarantee, that the i th token input to the network will be output on the "i th " wire. 2.2 Relationships between sorting, smoothing, and counting The following lemma is stated in <ref> [5] </ref> and is very useful in our constructions. Given the O (lg n)-depth AKS sorting network result [3], this lemma shows that the problem of constructing a small-depth counting network can be reduced to that of constructing a small-depth smoothing network. <p> This section provides an attempt to provide a lemma similar to the 0-1 sorting lemma for sorting networks [23]. In <ref> [5] </ref>, the authors provide a method for testing a network by testing the network with a large number of tokens. Theorem 3.1.1 [5] A balancing network with b balancers is a counting network iff it counts for all possible inputs of up to 3 fi 2 b tokens. <p> This section provides an attempt to provide a lemma similar to the 0-1 sorting lemma for sorting networks [23]. In <ref> [5] </ref>, the authors provide a method for testing a network by testing the network with a large number of tokens. Theorem 3.1.1 [5] A balancing network with b balancers is a counting network iff it counts for all possible inputs of up to 3 fi 2 b tokens. <p> Input 1 token on the remaining wires. Because these two wires have no effect on one another, the wire with 2 tokens and the one with 0 cannot be smoothed. 26 Chapter 4 Simple Counting Networks 4.1 A Bitonic Counter In the original paper introducing counting networks <ref> [5] </ref>, the authors present two small-depth counting networks, the bitonic counting network and the periodic counting network. From a practical perspective these networks are the most efficient counting networks to implement (for any reasonable value of n). <p> Proof: By induction Phase 1 of the construction outputs two counted shapes. By definition of the merger, the final output is counted. Fig. 4-2 illustrates a bitonic counter on 8 inputs. 29 4.2 A Periodic Counter The second counting network that the authors of <ref> [5] </ref> describe is known as the periodic counting network. This network is isomorphic to the network described by Dowd, Perl, Rudolph, and Saks [10]. In this construction, a depth lg n block is repeated lg n times producing a lg 2 n-depth network. <p> This network is isomorphic to the network described by Dowd, Perl, Rudolph, and Saks [10]. In this construction, a depth lg n block is repeated lg n times producing a lg 2 n-depth network. In this section we provide a description of the construction and refer the reader to <ref> [5] </ref> for a proof of its correctness. One of the basic building blocks for this construction is the ladder balancing network. In later sections we examine this object more closely, but for now, we simply define it. <p> Phase 1: Apply a butterfly balancing network to all 2 d input wires. Phase 2: Let A i denote the set of 2 d 0 wires X (j) , i2 d 0 j &lt; (i + 1)2 d 0 . Apply a 2 d 0 -input bitonic counting network <ref> [5] </ref> to each A i . Phase 3: Apply a butterfly balancing network to all 2 d wires. Phase 4: Let B denote the set of ff 0 -bad outputs of Phase 3.
Reference: [6] <author> K. E. Batcher. </author> <title> Sorting networks and their applications. </title> <booktitle> In Proceedings of the AFIPS Spring Joint Computer Conference, </booktitle> <volume> vol. 32, </volume> <pages> pages 307-314, </pages> <year> 1968. </year>
Reference-contexts: A balancing network is an acyclic circuit made up of balancers, just as a comparator network is an acyclic circuit made up of comparators. Similarly, a counting network is a balancing network with additional properties in the same way that a sorting network <ref> [3, 6, 9, 23] </ref> is a comparator network with additional properties. An n-input balancing network has n input wires and n output wires. We say that such a network has width n. <p> In the original paper on counting networks, Aspnes, Herlihy, and Shavit [5] provide two O (lg 2 n)-depth families of n-input counting networks by proving that the balancing network isomorphic to Batcher's bitonic sorting network <ref> [6, 9, 23] </ref> and isomorphic to the balanced periodic sorting network of Dowd, Perl, Rudolph, and Saks [10] are counting networks. In [22] Klugerman presents an O (lg n lg lg n)-depth counting network construction. 13 We present this construction in this thesis. <p> In addition, the networks are quite simple and again show the close relationship between sorting and counting. We now construct the bitonic counting network of depth 1 2 lg n (lg n + 1). This counter is isomorphic to the bitonic sorting network <ref> [6, 9, 23] </ref>, also known as the even-odd or Batcher sorting network. Because of the simplicity of the network we provide both a construction and a proof that the network is a counting network.
Reference: [7] <author> C. Busch and M. Mavronicolas. </author> <title> A combinatorial treatment of balancing networks. </title> <booktitle> In Proceedings of the 13th ACM Symposium on Principles of Distributed Computation, </booktitle> <year> 1994. </year> <note> To appear. </note>
Reference-contexts: At this point we know the remaining input will be counted by the test we performed. Note that this testing algorithm requires O (size fi 2 nd ) time. In <ref> [7] </ref>, a testing algorithm with the same asymptotic testing time is presented. <p> Let the set of balancer sizes available to construct the network be fp 1 ; p 2 ; ; p k g (see Section 3.2). In this section we show how to construct such a network using precisely the same technique as shown in Section 4.4. In <ref> [7] </ref>, the authors present a small depth construction of width p2 k with balancers of size f2; pg and they construct a network of width pq k with balancers of size fp; qg. In this section we address the more general problem.
Reference: [8] <author> V. Chvatal. </author> <title> Lecture notes on the new AKS sorting network. </title> <type> Technical Report 92-29, </type> <institution> DIMACS Center for Discrete Mathematics and Theoretical Computer Science, </institution> <month> June </month> <year> 1992. </year> <month> 89 </month>
Reference-contexts: A similar technique has recently been used by Ajtai, Komlos and Szemeredi <ref> [8] </ref> to improve the constant factor in their O (lg n)-depth sorting network, and by Plaxton [26] in order to obtain a 2 O ( p lg lg n) lg n-depth sorting network from an O (lg n)-depth random sorting network [24] that sorts with extremely high probability. <p> If n is odd then we require a small-depth sorting network which makes use of p-comparators rather than comparators. The p-comparator has p inputs and p outputs 40 and it sorts the p inputs. In <ref> [8] </ref>, Chvatal presents a construction of such a network with depth O (log p n). We will refer to this network as the pAKS sorting network. When the p-comparators are replaced with p-balancers, the network becomes the pAKS balancing network.
Reference: [9] <author> T.H. Cormen, C.E. Leiserson, and R.L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: A balancing network is an acyclic circuit made up of balancers, just as a comparator network is an acyclic circuit made up of comparators. Similarly, a counting network is a balancing network with additional properties in the same way that a sorting network <ref> [3, 6, 9, 23] </ref> is a comparator network with additional properties. An n-input balancing network has n input wires and n output wires. We say that such a network has width n. <p> In the original paper on counting networks, Aspnes, Herlihy, and Shavit [5] provide two O (lg 2 n)-depth families of n-input counting networks by proving that the balancing network isomorphic to Batcher's bitonic sorting network <ref> [6, 9, 23] </ref> and isomorphic to the balanced periodic sorting network of Dowd, Perl, Rudolph, and Saks [10] are counting networks. In [22] Klugerman presents an O (lg n lg lg n)-depth counting network construction. 13 We present this construction in this thesis. <p> In addition, the networks are quite simple and again show the close relationship between sorting and counting. We now construct the bitonic counting network of depth 1 2 lg n (lg n + 1). This counter is isomorphic to the bitonic sorting network <ref> [6, 9, 23] </ref>, also known as the even-odd or Batcher sorting network. Because of the simplicity of the network we provide both a construction and a proof that the network is a counting network.
Reference: [10] <author> M. Dowd, Y. Perl, M. Saks, and L. Rudolph. </author> <title> The balanced sorting network. </title> <type> Technical Report DCS-TR-127, </type> <institution> Department of Computer Science, Rutgers University, </institution> <month> June </month> <year> 1983. </year>
Reference-contexts: original paper on counting networks, Aspnes, Herlihy, and Shavit [5] provide two O (lg 2 n)-depth families of n-input counting networks by proving that the balancing network isomorphic to Batcher's bitonic sorting network [6, 9, 23] and isomorphic to the balanced periodic sorting network of Dowd, Perl, Rudolph, and Saks <ref> [10] </ref> are counting networks. In [22] Klugerman presents an O (lg n lg lg n)-depth counting network construction. 13 We present this construction in this thesis. This result has great simplicity and displays some of the concepts used in later constructions. <p> Fig. 4-2 illustrates a bitonic counter on 8 inputs. 29 4.2 A Periodic Counter The second counting network that the authors of [5] describe is known as the periodic counting network. This network is isomorphic to the network described by Dowd, Perl, Rudolph, and Saks <ref> [10] </ref>. In this construction, a depth lg n block is repeated lg n times producing a lg 2 n-depth network. In this section we provide a description of the construction and refer the reader to [5] for a proof of its correctness.
Reference: [11] <author> C. Dwork and M. Herlihy. </author> <title> Contention in shared memory algorithms. </title> <booktitle> In Proceedings of the 25th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 174-183, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: However, contention in the network also plays a major role in determining delays for a request to be fulfilled. If several tokens enter a balancer at the same time, they are required to leave one at a time. This produces a sequential bottleneck. In <ref> [11] </ref>, Dwork and Herlihy broach this subject by introducing a model for measuring contention in distributed systems to help evaluate the latency expected in various algorithms including counting network implementations. <p> In [2], Aiello, Venkatesan, and Yung continue this contention analysis, obtaining bounds on other counting networks and on the bitonic network. Namely, they show bounds on the number of tokens which must enter the bitonic network before the fi ( p n lg 2 n) bound in <ref> [11] </ref> holds. They also examine the butterfly balancing network described in Section 5.1.
Reference: [12] <author> J. Edmonds and R. Karp. </author> <title> Theoretical improvements in the algorithmic efficiency for network flow problems. </title> <journal> Journal of the ACM, </journal> <volume> 19 </volume> <pages> 248-264, </pages> <year> 1972. </year>
Reference-contexts: We now go into more detail in describing and analyzing Step 5. To remove the appropriate edges, we solve a max-flow problem using the Edmonds-Karp polynomial-time algorithm <ref> [12] </ref>. We begin with graph G 4 and form a directed graph from it.
Reference: [13] <author> C.S. Ellis and T.J. Olson. </author> <title> Algorithms for parallel memory allocation. </title> <journal> Journal of Parallel Programming, </journal> <volume> 17 </volume> <pages> 303-345, </pages> <year> 1988. </year>
Reference-contexts: Introduction One of the fundamental tools used in parallel computation is the shared counter <ref> [13, 15, 17, 28] </ref>. A shared counter permits several processors to request and increment the value of a shared variable.
Reference: [14] <author> L.R. Jr. Ford and D. R. Fulkerson. </author> <title> Flows in Networks. </title> <publisher> Princeton University Press, </publisher> <year> 1962. </year>
Reference-contexts: But these values are between d end (V 4 ) 1 andd end (V 4 ) + 1, as required. By the Integrality Theorem in <ref> [14] </ref>, because the problem has a fractional solution, we know the problem has an integral solution and, in fact, it can be found in polynomial-time. When the edges with positive flow in the integer solution are kept, G 5 is formed.
Reference: [15] <author> E. Freudenthal and A. Gottlieb. </author> <title> Process coordination with fetch-and-increment. </title> <booktitle> In Proceedings of the 4th International Conference on Architecture Support for Programming Languages and Operating Systems, </booktitle> <month> April </month> <year> 1991. </year>
Reference-contexts: Introduction One of the fundamental tools used in parallel computation is the shared counter <ref> [13, 15, 17, 28] </ref>. A shared counter permits several processors to request and increment the value of a shared variable.
Reference: [16] <author> J.R. Goodman, M.K. Vernon, and P.J. Woest. </author> <title> Efficient synchronization primitives for large-scale cache-coherent multiprocessors. </title> <booktitle> In Proceedings of the 3rd ASPLOS, </booktitle> <pages> pages 64-75, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: Otherwise, a token waits at the element of the array for a designated period of time before the processor responsible for the 85 token attempts to flip the toggle bit. The authors show, in [27], that experimentally the diffracting tree performs quite well. In <ref> [16] </ref> Goodman, Vernon, Woest use a binary tree data structure to implement a shared counter. The data structure is what they call a software combining tree.
Reference: [17] <author> A. Gottlieb, B.D. Lubachevsky, and L. Rudolph. </author> <title> Basic techniques for the efficient coordination of very large numbers of cooperating sequential processors. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 5 </volume> <pages> 164-189, </pages> <year> 1983. </year>
Reference-contexts: Introduction One of the fundamental tools used in parallel computation is the shared counter <ref> [13, 15, 17, 28] </ref>. A shared counter permits several processors to request and increment the value of a shared variable.
Reference: [18] <author> M.P. Herlihy, B. Lim, and N. Shavit. </author> <title> Low contention load balancing on large-scale multiprocessors. </title> <booktitle> In Proceedings of the 3rd Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <month> July </month> <year> 1992. </year> <month> 90 </month>
Reference-contexts: The value of the counter is then in + j where the network is an n-input n-output network. Additional uses of counting networks, as well as other practical issues such as implementation and simulations of counting networks are discussed in [5] and <ref> [18] </ref>. In [5], the authors describe a number of data structures which are of great importance to parallel and distributed computing which may be implemented with the use of counting networks. In particular, they discuss producer/consumer buffers, and synchronization barriers. <p> The values continue down in a recursive fashion until the leaves receive their updated values. In <ref> [18] </ref>, the authors show that software combining tree and counting networks are similar in their efficiency, though when contention becomes high the counting network tends to outperform the software combining tree. 86 Chapter 7 Conclusions This thesis has made substantial progress towards improving our understanding of the depth complexity of counting
Reference: [19] <author> M.P. Herlihy, N. Shavit, and O. Waarts. </author> <title> Linearizable counting networks. </title> <booktitle> In Proceedings of the 32nd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 526-535, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: This is apparent from the fact that a token recycled through the system is no different than a newly entered token and the fact that 2 dlg ne = O (n). In <ref> [19] </ref>, Herlihy, Shavit and Waarts introduce the notion of a linearizable counting network. Such a network ensures that if a token has left the counting network and has been assigned a value i and at some later time another token enters the network and then exits with the value j.
Reference: [20] <author> W. Hoeffding. </author> <title> Probability inequalities for sums of bounded random variables. </title> <journal> Am. Statist. Assoc. J., </journal> <volume> 58 </volume> <pages> 13-30, </pages> <year> 1963. </year>
Reference-contexts: The use of the randomized balancers in the initial levels of the butterfly ensure that the number of tokens enter each bitonic counter is roughly the same, with high probability. This is shown using induction on depth and Hoeffding's Inequality <ref> [20] </ref>. The bitonic counters then count their respective shapes resulting in a nearly smoothed shape. In addition to discussions of randomized balancers and issues of contention, in [2] the authors discuss constructions involving expanders and models involving tokens with weights.
Reference: [21] <author> M. Klugerman and C. G. Plaxton. </author> <title> Small-depth counting networks. </title> <booktitle> In Proceedings of the 24th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 417-428, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: This result has great simplicity and displays some of the concepts used in later constructions. The main result in this thesis is Klugerman's uniform polynomial-time construction of an O (lg n)-depth counting network. A slightly weaker result presented by Klugerman and Plaxton in <ref> [21] </ref> provides an existential proof for such a network. Our result answers the question posed in [5], which asks whether such an optimal-depth counting network exists. <p> This existential result is presented in this thesis and is built upon in order to obtain the uniform polynomial-time construction. The other result in <ref> [21] </ref> is an explicit construction of a counting network of depth O (c lg fl n lg n) (for some positive constant c).
Reference: [22] <author> M.R. Klugerman. </author> <title> Lecture 17: Counting networks. In F.T. Leighton, </title> <editor> C.E. Leis-erson, and N. Kahale, editors, </editor> <booktitle> Research Seminar Series 15: Advanced Parallel and VLSI Computation, </booktitle> <pages> pages 153-161. </pages> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: In <ref> [22] </ref> Klugerman presents an O (lg n lg lg n)-depth counting network construction. 13 We present this construction in this thesis. This result has great simplicity and displays some of the concepts used in later constructions. <p> This model was introduced by Aharonson and Attiya [1]. In [1], the authors discuss limitations on the number of input and output wires a counting network may have in this generalized model. In independent work, Klugerman <ref> [22] </ref> shows that any counting networks comprised of 2-input 2-output balancers must contain 2 k input and output wires for some integer k. The approaches used in [22] and [1] are similar and are described in this thesis. <p> In independent work, Klugerman <ref> [22] </ref> shows that any counting networks comprised of 2-input 2-output balancers must contain 2 k input and output wires for some integer k. The approaches used in [22] and [1] are similar and are described in this thesis. The remainder of this thesis is organized as follows: In Chapter 2, we provide lemmas about balancing and counting networks that will be of use in later chapters. <p> (n lg n), the number of inputs which need to be tested is 2 (n 2 lg n) We improve this theorem by making the number of tokens required to test the network exponential in the depth of the network rather than in the size of the network: Theorem 3.1.2 <ref> [22] </ref> A balancing network with depth d is a smoothing (counting) network iff it smooths (counts) on all possible inputs of up to 2 d tokens per wire. <p> This result was independently proved by Klugerman <ref> [22] </ref> and Aharonson and Attiya [1]. Theorem 3.2.1 The width of a balancing network must be a power of two in order to be a smoothing network. Proof: Consider a balancing network of depth d and width n.
Reference: [23] <author> D. E. Knuth. </author> <booktitle> The Art of Computer Programming, </booktitle> <volume> volume 3. </volume> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1973. </year>
Reference-contexts: A balancing network is an acyclic circuit made up of balancers, just as a comparator network is an acyclic circuit made up of comparators. Similarly, a counting network is a balancing network with additional properties in the same way that a sorting network <ref> [3, 6, 9, 23] </ref> is a comparator network with additional properties. An n-input balancing network has n input wires and n output wires. We say that such a network has width n. <p> In the original paper on counting networks, Aspnes, Herlihy, and Shavit [5] provide two O (lg 2 n)-depth families of n-input counting networks by proving that the balancing network isomorphic to Batcher's bitonic sorting network <ref> [6, 9, 23] </ref> and isomorphic to the balanced periodic sorting network of Dowd, Perl, Rudolph, and Saks [10] are counting networks. In [22] Klugerman presents an O (lg n lg lg n)-depth counting network construction. 13 We present this construction in this thesis. <p> This section provides an attempt to provide a lemma similar to the 0-1 sorting lemma for sorting networks <ref> [23] </ref>. In [5], the authors provide a method for testing a network by testing the network with a large number of tokens. Theorem 3.1.1 [5] A balancing network with b balancers is a counting network iff it counts for all possible inputs of up to 3 fi 2 b tokens. <p> In addition, the networks are quite simple and again show the close relationship between sorting and counting. We now construct the bitonic counting network of depth 1 2 lg n (lg n + 1). This counter is isomorphic to the bitonic sorting network <ref> [6, 9, 23] </ref>, also known as the even-odd or Batcher sorting network. Because of the simplicity of the network we provide both a construction and a proof that the network is a counting network.
Reference: [24] <author> F. T. Leighton and C. G. Plaxton. </author> <title> A (fairly) simple circuit that (usually) sorts. </title> <booktitle> In Proceedings of the 31st Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 264-274, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: has recently been used by Ajtai, Komlos and Szemeredi [8] to improve the constant factor in their O (lg n)-depth sorting network, and by Plaxton [26] in order to obtain a 2 O ( p lg lg n) lg n-depth sorting network from an O (lg n)-depth random sorting network <ref> [24] </ref> that sorts with extremely high probability. This existential result is presented in this thesis and is built upon in order to obtain the uniform polynomial-time construction.
Reference: [25] <author> N. Nisan and D. Zuckerman. </author> <title> More deterministic simulation in logspace. </title> <booktitle> In Proceedings of the 25th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 235-244, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: However, this construction is superseded by the constructive proof for an O (lg n)-depth network presented in this thesis which uses many aspects of the existential proof, but makes use of extractors constructed in <ref> [25] </ref>. These extractors are functions which extract a great deal of randomness from a source with limited randomness by using a small number of truly random bits. <p> These extractors have been used to show that randomized space (S (n)) using only poly (S (n)) random bits can be simulated deterministically in space (S (n)), for S (n) lg n <ref> [25] </ref>. In addition, the extractor function has been used to construct high degree expanders in polynomial-time [29]. Using techniques similar to those found in [29], we construct regular, high degree bipartite graphs with the expansion properties necessary to obtain an O (lg n)-depth counting network. <p> In other words, no matter what connections are made, the network will still perform its function. The bipartite graph that we construct is based directly on work done by Noam Nisan and David Zuckerman in <ref> [25] </ref>. We begin the discussion of the properties of by defining the notion of quasi-randomness, an (*; fl)-extractor, and the (*; fl)-extractor property for a bipartite graph: Definition 5.5.1 [25] A probability distribution D on a set S is quasi-random within * if for all X S, jD (X) jXj=jSjj *. <p> The bipartite graph that we construct is based directly on work done by Noam Nisan and David Zuckerman in <ref> [25] </ref>. We begin the discussion of the properties of by defining the notion of quasi-randomness, an (*; fl)-extractor, and the (*; fl)-extractor property for a bipartite graph: Definition 5.5.1 [25] A probability distribution D on a set S is quasi-random within * if for all X S, jD (X) jXj=jSjj *. Here D (X) denotes the probability of the set X according to distribution D. Definition 5.5.2 [25] Let E : f0; 1g r fif0; 1g t ! f0; 1g <p> fl)-extractor, and the (*; fl)-extractor property for a bipartite graph: Definition 5.5.1 <ref> [25] </ref> A probability distribution D on a set S is quasi-random within * if for all X S, jD (X) jXj=jSjj *. Here D (X) denotes the probability of the set X according to distribution D. Definition 5.5.2 [25] Let E : f0; 1g r fif0; 1g t ! f0; 1g s . <p> We draw upon the work of <ref> [25] </ref> and [29]. Recall definitions 5.5.1, 5.5.2, and 5.5.3.
Reference: [26] <author> C. G. Plaxton. </author> <title> A hypercubic sorting network with nearly logarithmic depth. </title> <month> May </month> <year> 1992. </year>
Reference-contexts: A similar technique has recently been used by Ajtai, Komlos and Szemeredi [8] to improve the constant factor in their O (lg n)-depth sorting network, and by Plaxton <ref> [26] </ref> in order to obtain a 2 O ( p lg lg n) lg n-depth sorting network from an O (lg n)-depth random sorting network [24] that sorts with extremely high probability.
Reference: [27] <author> N. Shavit and A. Zemach. </author> <title> Diffracting trees. </title> <booktitle> In Proceedings of the 5th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <month> July </month> <year> 1994. </year> <note> To appear. </note>
Reference-contexts: Two of the more notable are diffracting trees and software combining trees. In <ref> [27] </ref>, Shavit and Zemach recently introduced a model called the diffracting tree model. This model uses objects very much like the dispersers defined above. <p> Otherwise, a token waits at the element of the array for a designated period of time before the processor responsible for the 85 token attempts to flip the toggle bit. The authors show, in <ref> [27] </ref>, that experimentally the diffracting tree performs quite well. In [16] Goodman, Vernon, Woest use a binary tree data structure to implement a shared counter. The data structure is what they call a software combining tree.
Reference: [28] <author> H.S. Stone. </author> <title> Database applications of the fetch-and-add instruction. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-33:604-612, </volume> <year> 1984. </year> <month> 91 </month>
Reference-contexts: Introduction One of the fundamental tools used in parallel computation is the shared counter <ref> [13, 15, 17, 28] </ref>. A shared counter permits several processors to request and increment the value of a shared variable.
Reference: [29] <author> A. Wigderson and D. Zuckerman. </author> <title> Expanders that beat the eigenvalue bound: Explicit construction and applications. </title> <booktitle> In Proceedings of the 25th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 245-251, </pages> <month> May </month> <year> 1993. </year> <month> 92 </month>
Reference-contexts: These extractors have been used to show that randomized space (S (n)) using only poly (S (n)) random bits can be simulated deterministically in space (S (n)), for S (n) lg n [25]. In addition, the extractor function has been used to construct high degree expanders in polynomial-time <ref> [29] </ref>. Using techniques similar to those found in [29], we construct regular, high degree bipartite graphs with the expansion properties necessary to obtain an O (lg n)-depth counting network. In essence, this bipartite expander graph allows us to find the desired network in N fl deterministically 14 in polynomial-time. <p> In addition, the extractor function has been used to construct high degree expanders in polynomial-time <ref> [29] </ref>. Using techniques similar to those found in [29], we construct regular, high degree bipartite graphs with the expansion properties necessary to obtain an O (lg n)-depth counting network. In essence, this bipartite expander graph allows us to find the desired network in N fl deterministically 14 in polynomial-time. <p> We draw upon the work of [25] and <ref> [29] </ref>. Recall definitions 5.5.1, 5.5.2, and 5.5.3. <p> In <ref> [29] </ref>, the authors use the extractor above to generate a bipartite graph. From this bipartite graph they then construct a graph with high degree and extremely strong expansion properties. The initial bipartite graph they construct is the first step in our construction, as well. <p> The function E defines the edge set in the graph: there is an edge between a node v 2 V and a node u 2 U iff 9e 2 f0; 1g t such that E (v; e) = u. As the authors note in <ref> [29] </ref> as t becomes 71 larger or s becomes smaller, the construction of the extractor becomes easier. One can increase t by increasing the multiplicity of edges in the graph.
References-found: 29

