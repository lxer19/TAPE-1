URL: http://www.cs.umn.edu/Users/dept/users/shekhar/ccam.TKDE96.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/shekhar/
Root-URL: http://www.cs.umn.edu
Title: CCAM: A Connectivity-Clustered Access Method for Networks and Network Computations  
Author: Shashi Shekhar and Duen-Ren Liu 
Keyword: Access Methods, Geographic Information Systems, Network Computations, Spatial Databases, Spa tial Networks  
Abstract: Current Spatial Database Management Systems (SDBMS) provide efficient access methods and operators for point and range queries over collections of spatial points, line segments, and polygons. However, it is not clear if existing spatial access methods can efficiently support network computations which traverse line-segments in a spatial network based on connectivity rather than geographic proximity. The expected I/O cost for many network operations can be reduced by maximizing the Weighted Connectivity Residue Ratio (WCRR), i.e., the chance that a pair of connected nodes that are more likely to be accessed together are allocated to a common page of the file. CCAM is an access method for general networks that uses connectivity clustering. CCAM supports the operations of insert, delete, create, and find as well as the new operations, get-A-successor and get-successors, which retrieve one or all successors of a node to facilitate aggregate computations on networks. The nodes of the network are assigned to disk pages via a graph partitioning approach to maximize the WCRR. CCAM includes methods for static clustering, as well as dynamic incremental reclustering, to maintain high WCRR in the face of updates, without incurring high overheads. We also describe possible modifications to improve the WCRR that can be achieved by existing spatial access methods. Experiments with network computations on the Minneapolis road map show that CCAM outperforms existing access methods, even though the proposed modifications also substantially improve the performance of existing spatial access methods. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> "Intelligent Vehicle Highway Systems Projects". Department of Transportation, Minnesota Document, </institution> <month> March </month> <year> 1994. </year>
Reference-contexts: IVHS is also known as Intelligent Transportation Systems (ITS). 1.1 Example Application : IVHS and Network Analysis We are particularly interested in transportation applications such as Advanced Traveler Information Systems (ATIS) and Intelligent Vehicle Highway Systems (IVHS). IVHS <ref> [1] </ref> is currently being developed to improve the safety and efficiency of automobile travel. ATIS is one facet of IVHS which assists travelers with trip planning, navigation perception, analysis and decision-making to improve the convenience, safety and efficiency of travel [8, 39].
Reference: [2] <author> D. Abel and D. Mark. </author> <title> "A Comparative Analysis of Some Two-Dimensional Orderings". </title> <journal> Intl Journal of GIS, </journal> <volume> 4(1) </volume> <pages> 21-31, </pages> <year> 1990. </year>
Reference-contexts: They 2 perform transformations on higher-order keys to impose total ordering. Example methods include Z-ordering [32] and Hilbert Curves <ref> [2, 11, 22] </ref>. Multidimensional B-trees [35] and K-dB-trees [33] establish a correspondence between the levels of the index and dimensions. These approaches limit the opportunities for clustering according to connectivity.
Reference: [3] <author> R. Agrawal and H.V. Jagadish. </author> <title> "Algorithms for Searching Massive Graphs". </title> <journal> IEEE Trans. on Knowledge and Data Engineering, </journal> <volume> 6(2), </volume> <month> April </month> <year> 1994. </year>
Reference-contexts: We address the following two issues. First, the static graph-partitioning approach is not efficient when the entire network cannot fit into main memory. In general, road-maps are very large databases <ref> [3, 26] </ref>, and thus may not fit inside main memory. Second, maintaining a high WCRR in the face of Insert () and Delete () operations, without complete reorganization, is a critical problem. To solve the above two issues, we propose dynamic reclustering strategies to handle dynamic updating effects.
Reference: [4] <author> R. Agrawal and Jerry Kiernan. </author> <title> "An Access Structure for Generalized Transitive Closure Queries". </title> <booktitle> In Proc. of the Ninth Intl Conference on Data Engineering, </booktitle> <pages> pages 429-438. </pages> <publisher> IEEE, </publisher> <month> April </month> <year> 1993. </year>
Reference-contexts: Efficient access methods are available for a severely restricted class of networks, namely directed acyclic graphs [5, 10, 20, 28] and directed graphs with limited cycles <ref> [4] </ref>, which do not adequately model many networks of interest, including road-maps. This paper shows that the expected I/O cost of many network computations can be reduced by maximizing the weighted connectivity residue ratio (WCRR). <p> Reverse-topological-ordering based methods have also been used to cluster related nodes in the same data page to reduce I/O cost [21]. Finally, the topological ordering method has been extended to graphs with a few cycles in <ref> [4] </ref>. The methods based on topological order or reverse topological order can be extended to graphs that have many undirected edges as traversals, using the well-known depth-first or breadth-first search strategies. <p> Join-indices [42] can also be used to speed up iterative algorithms for computing transitive closure, and a materialized view can also accelerate path computation. Transitive closure queries can be answered by a look-up in the materialized view. A survey of these techniques can be found in <ref> [4] </ref>. However, these techniques require a separate structure for each path computation over the same graph and are not space efficient. Meanwhile, static schemes based on the graph-partitioning heuristic, albeit in a different context, were recently used in [41].
Reference: [5] <author> J. Banerjee, S. Kim W. Kim, and J. Garza. </author> <title> "Clustering a DAG for CAD Databases". </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> 14(11) </volume> <pages> 1684-1699, </pages> <month> Nov. </month> <year> 1988. </year>
Reference-contexts: Efficient access methods are available for a severely restricted class of networks, namely directed acyclic graphs <ref> [5, 10, 20, 28] </ref> and directed graphs with limited cycles [4], which do not adequately model many networks of interest, including road-maps. This paper shows that the expected I/O cost of many network computations can be reduced by maximizing the weighted connectivity residue ratio (WCRR). <p> Path computations, such as graph traversal and transitive closure, can be carried out by scanning forward in the file, using a priority queue [28] or a FIFO queue [20]. Topological orders, including depth-first sequence and breadth-first sequence, have been evaluated in <ref> [5] </ref> for their effectiveness in supporting different graph-traversal problems. Reverse-topological-ordering based methods have also been used to cluster related nodes in the same data page to reduce I/O cost [21]. Finally, the topological ordering method has been extended to graphs with a few cycles in [4]. <p> The methodology can be used to compare other combinations such as CCAM with B + -tree secondary index, CCAM with Cell-tree secondary index, Cell-tree primary index, etc. The general conclusions would be very similar to those found in the illustration. We choose the Grid File [31] and DFS-AM <ref> [5, 28] </ref> as representative of spatial access methods and connectivity-based access methods, respectively, to compare with CCAM. DFS-AM is the extension of topological-ordering based files to general graphs. <p> We compare the proposed connectivity-based clustering scheme CCAM-S and CCAM-D with the other schemes, namely, the Grid file [31], the Cell Tree [17], Z-ordering [32], and DFS-AM <ref> [5, 28] </ref>. CCAM-S denotes the static create operation of CCAM. CCAM-D is an incremental create () operation which was implemented using the second-order reorganization policy. The Cell-tree represents the family containing R + -tree [36].
Reference: [6] <author> E.R. Barnes. </author> <title> "An Algorithm for Partitioning the Nodes of a Graph". </title> <journal> SIAM Journal Alg. Disc. Meth., </journal> <volume> 3(4) </volume> <pages> 541-550, </pages> <month> December </month> <year> 1982. </year>
Reference-contexts: Analysis and experiments show that the proposed method leads to reduced I/O costs and a higher WCRR for many interesting networks. The literature in the area of graph partitioning <ref> [6, 7, 13, 25] </ref> has only focused on partitioning static graphs without considering dynamic updates. We address the following two issues. First, the static graph-partitioning approach is not efficient when the entire network cannot fit into main memory. <p> The graph-partitioning problem is to partition the nodes of a graph with costs on its edges into subsets of given sizes, so as to minimize the sum of the costs on all the cut edges. Although the graph-partitioning problem is NP-complete [14], many good heuristics based on spectral partitioning <ref> [6] </ref> and iterative approaches [7, 13, 25] have been proposed to solve this problem efficiently. The implementation of CCAM operations takes advantage of these heuristics. The WCRR model is proposed on the basis of the available database statistics on access frequencies.
Reference: [7] <author> C.K. Cheng and Y.C. Wei. </author> <title> "An Improved Two-Way Partitioning Algorithm with Stable Performance". </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <volume> 10(12) </volume> <pages> 1502-1511, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: Analysis and experiments show that the proposed method leads to reduced I/O costs and a higher WCRR for many interesting networks. The literature in the area of graph partitioning <ref> [6, 7, 13, 25] </ref> has only focused on partitioning static graphs without considering dynamic updates. We address the following two issues. First, the static graph-partitioning approach is not efficient when the entire network cannot fit into main memory. <p> Although the graph-partitioning problem is NP-complete [14], many good heuristics based on spectral partitioning [6] and iterative approaches <ref> [7, 13, 25] </ref> have been proposed to solve this problem efficiently. The implementation of CCAM operations takes advantage of these heuristics. The WCRR model is proposed on the basis of the available database statistics on access frequencies. <p> (A) &gt; MinPgSize; sizeof (A') &gt; MinPgSize; if sizeof (A) &gt; page-size then add A to F else add A to P; if sizeof (A') &gt; page-size then add A' to F else add A' to P; endwhile return P; end; We adapt Cheng and Wei's two-way ratio-cut heuristic algorithm <ref> [7] </ref> which is described in appendix A, as the basis for implementing the 2-way-partition () algorithm. The 2-way-partition () algorithm partitions a given set into two subsets by trying to minimize the total weight on the edges in the cut-set, i.e., maximizing the WCRR. The 2-way-partition algorithm [7] adapts the iterative <p> ratio-cut heuristic algorithm <ref> [7] </ref> which is described in appendix A, as the basis for implementing the 2-way-partition () algorithm. The 2-way-partition () algorithm partitions a given set into two subsets by trying to minimize the total weight on the edges in the cut-set, i.e., maximizing the WCRR. The 2-way-partition algorithm [7] adapts the iterative approach, which starts from an initial partition (i.e. two subsets), and then iteratively moves nodes across subsets in an attempt to achieve a global minimum weight on the edges in the cut set.
Reference: [8] <author> W. C. Collier and R. J. Weiland. </author> <title> "Smart Cars, Smart Highways". </title> <journal> IEEE Spectrum, </journal> <pages> pages 27-33, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: IVHS [1] is currently being developed to improve the safety and efficiency of automobile travel. ATIS is one facet of IVHS which assists travelers with trip planning, navigation perception, analysis and decision-making to improve the convenience, safety and efficiency of travel <ref> [8, 39] </ref>. An important component of IVHS and ATIS is a spatial network database containing road maps, public transportation routes, and current travel time for segments of the transportation network, which is updated frequently.
Reference: [9] <author> D. Galperin. </author> <title> "On the optimality of A*". </title> <journal> Artificial Intelligence, </journal> <volume> 8(1) </volume> <pages> 69-76, </pages> <year> 1977. </year>
Reference-contexts: A ? represents the single-pair path-planning algorithms which use heuristic lookahead to focus the search <ref> [9, 38] </ref>. Three query sets are chosen to represent path queries of three different path classes, namely small, medium and large.
Reference: [10] <author> S. Dar and H.V. Jagadish. </author> <title> "A Spanning Tree Transitive Closure Algorithm". </title> <booktitle> In Proc. of Intl Conference on Data Engineering. IEEE, </booktitle> <year> 1992. </year>
Reference-contexts: Efficient access methods are available for a severely restricted class of networks, namely directed acyclic graphs <ref> [5, 10, 20, 28] </ref> and directed graphs with limited cycles [4], which do not adequately model many networks of interest, including road-maps. This paper shows that the expected I/O cost of many network computations can be reduced by maximizing the weighted connectivity residue ratio (WCRR).
Reference: [11] <author> C. Faloutsos and Y. Rong. </author> <title> "DOT: A Spatial Access Method Using Fractals". </title> <booktitle> In Proc. of the 7th Intl Conference on Data Engineering. IEEE, </booktitle> <year> 1991. </year>
Reference-contexts: They 2 perform transformations on higher-order keys to impose total ordering. Example methods include Z-ordering [32] and Hilbert Curves <ref> [2, 11, 22] </ref>. Multidimensional B-trees [35] and K-dB-trees [33] establish a correspondence between the levels of the index and dimensions. These approaches limit the opportunities for clustering according to connectivity.
Reference: [12] <author> C. Faloutsos and S. Roseman. </author> <title> "Fractals for Secondary Key Retrival". </title> <booktitle> In Proc. Symp. on Principles of Database Systems. SIGMOD-SIGACT PODS, </booktitle> <year> 1989. </year>
Reference-contexts: The Z-order of a coordinate x,y is computed by interleaving the bits in the binary representation of the two values. Alternatively, Hilbert <ref> [12, 22, 24] </ref> ordering may be used. A conventional one-dimensional primary index (e.g. B + -tree) can be used to facilitate searches. 5.2.4 Linear Clustering by DFS-order DFS-AM arranges the nodes by a depth-first traversal from a random start node.
Reference: [13] <author> C.M. Fiduccia and R.M. Mattheyses. </author> <title> "A Linear Time Heuristic for Improving Network Partitions". </title> <booktitle> In Proc. of 19th Design Automation Conference, </booktitle> <pages> pages 175-181, </pages> <year> 1982. </year>
Reference-contexts: Analysis and experiments show that the proposed method leads to reduced I/O costs and a higher WCRR for many interesting networks. The literature in the area of graph partitioning <ref> [6, 7, 13, 25] </ref> has only focused on partitioning static graphs without considering dynamic updates. We address the following two issues. First, the static graph-partitioning approach is not efficient when the entire network cannot fit into main memory. <p> Although the graph-partitioning problem is NP-complete [14], many good heuristics based on spectral partitioning [6] and iterative approaches <ref> [7, 13, 25] </ref> have been proposed to solve this problem efficiently. The implementation of CCAM operations takes advantage of these heuristics. The WCRR model is proposed on the basis of the available database statistics on access frequencies. <p> The process repeats until no further accumulated positive gain is possible. The implementation is based on the bucket-list data structure <ref> [13] </ref> and requires a time complexity of O (jEj) with respect to the number of edges jEj. Other graph-partitioning methods can also be used as the basis of our scheme.
Reference: [14] <author> M.R. Garey and D.S. Johnson. </author> <title> "Computers and Intractability: A Guide to the Theory of NP-Completeness". W.H. </title> <publisher> Freeman and Company, </publisher> <address> San Francisco, </address> <year> 1979. </year>
Reference-contexts: The graph-partitioning problem is to partition the nodes of a graph with costs on its edges into subsets of given sizes, so as to minimize the sum of the costs on all the cut edges. Although the graph-partitioning problem is NP-complete <ref> [14] </ref>, many good heuristics based on spectral partitioning [6] and iterative approaches [7, 13, 25] have been proposed to solve this problem efficiently. The implementation of CCAM operations takes advantage of these heuristics. The WCRR model is proposed on the basis of the available database statistics on access frequencies.
Reference: [15] <author> M.F. Goodchild. </author> <title> "Towards an Enumeration and Classification of GIS Functions". </title> <booktitle> In Proc. of Intl Geographic Info. Systems Symp., </booktitle> <year> 1987. </year>
Reference-contexts: For example, a spatial network database for transportation applications may store road intersection points and the road segments connecting the intersections. Network computations perform connectivity-based computations including route evaluation, path computation, tour evaluation and location-allocation evaluation <ref> [15, 29] </ref>. There has been a great deal of research within the database area in the design and evaluation of spatial access methods for point and range queries over collections of points, line-segments, and polygons.
Reference: [16] <author> O. Gunther. </author> <title> "The Design of the Cell Tree: An Object-Oriented Index Structure for Geometric Databases". </title> <booktitle> In Proc. 5th Intl Conference on Data Engineering, </booktitle> <month> Feb. </month> <year> 1989. </year>
Reference-contexts: We refer to the above approach as a balance-based split policy for Grid file. A connectivity-based policy for the Grid-file uses the connectivity information and chooses the split-dimension which has a higher WCRR. 5.2.2 Cell Tree The cell tree <ref> [16, 17] </ref> is a height-balanced tree. Each cell tree node corresponds, not necessarily to a rectangular box, but to a convex polyhedron. The cell tree restricts the polyhedra to be partitions of a BSP (binary space partitioning), to avoid overlaps among sibling polyhedra.
Reference: [17] <author> O. Gunther and J. Bilmes. </author> <title> "Tree-Based Access Methods for Spatial Databases: Implementation and Performance Evaluation". </title> <journal> IEEE Trans. on Knowledge and Data Engineering, </journal> <volume> 3(3), </volume> <month> September </month> <year> 1991. </year>
Reference-contexts: These approaches limit the opportunities for clustering according to connectivity. Other spatial access methods capture the isotropic nature of proximity by recursively dividing the space, using a splitting rule to construct a grid or a hierarchy of regions <ref> [17] </ref>. A survey of these methods can be found in [34]. Some of the representative Isotropic Access Methods (ISM's) include grid files [31], cell-trees [17], R-trees [18] and R + trees [36]. <p> access methods capture the isotropic nature of proximity by recursively dividing the space, using a splitting rule to construct a grid or a hierarchy of regions <ref> [17] </ref>. A survey of these methods can be found in [34]. Some of the representative Isotropic Access Methods (ISM's) include grid files [31], cell-trees [17], R-trees [18] and R + trees [36]. Isotropic spatial access methods have traditionally been used to store vector-spatial data such as sets of polygons, and they allow flexible policies which can be adapted to take advantage of connectivity information. <p> The primary indices on node-id differ in depth due to different page-formats and branching factors. The Grid-File [31] provides a fixed depth. A B + tree is likely to have a higher branching factor and lesser depth than the Cell-tree <ref> [17] </ref> for a fixed page-size and a given data set. CCAM can use any index type (e.g. B + -tree, Grid File, Cell-tree) as a secondary index. The depth of a chosen secondary-index-type (e.g. B + -tree) is likely to be slightly more than the corresponding non-dense primary-index-type (e.g. <p> We compare the proposed connectivity-based clustering scheme CCAM-S and CCAM-D with the other schemes, namely, the Grid file [31], the Cell Tree <ref> [17] </ref>, Z-ordering [32], and DFS-AM [5, 28]. CCAM-S denotes the static create operation of CCAM. CCAM-D is an incremental create () operation which was implemented using the second-order reorganization policy. The Cell-tree represents the family containing R + -tree [36]. <p> We refer to the above approach as a balance-based split policy for Grid file. A connectivity-based policy for the Grid-file uses the connectivity information and chooses the split-dimension which has a higher WCRR. 5.2.2 Cell Tree The cell tree <ref> [16, 17] </ref> is a height-balanced tree. Each cell tree node corresponds, not necessarily to a rectangular box, but to a convex polyhedron. The cell tree restricts the polyhedra to be partitions of a BSP (binary space partitioning), to avoid overlaps among sibling polyhedra. <p> In the case of a tie, choose the one that balances the resulting subnodes, i.e., jsizeof (N 1 ) sizeof (N 2 )j is the smallest. A simple implementation may use slope angles of the sweeping lines to be ifl180 l for i = 1::l, as suggested in <ref> [17] </ref>. We have tried various values for l and are currently using l = 5 plus the vertical sweep lines.
Reference: [18] <author> A. Guttman. "R-Trees: </author> <title> A Dynamic Index Structure for Spatial Searching". </title> <booktitle> In Proc. of SIGMOD Intl Conference on Management of Data, </booktitle> <pages> pages 47-57. </pages> <publisher> ACM, </publisher> <year> 1984. </year>
Reference-contexts: A survey of these methods can be found in [34]. Some of the representative Isotropic Access Methods (ISM's) include grid files [31], cell-trees [17], R-trees <ref> [18] </ref> and R + trees [36]. Isotropic spatial access methods have traditionally been used to store vector-spatial data such as sets of polygons, and they allow flexible policies which can be adapted to take advantage of connectivity information. <p> The choice of a secondary index can be tailored to the application. We use the B + tree with Z-order [32] in our experiments, since the benchmark networks are embedded in geographical space. Other access methods such as the R-tree <ref> [18] </ref> and Grid File [31], etc. can alternatively be created on top of the data file, as secondary indices in CCAM to suit the application.
Reference: [19] <author> P. Haggett and R. J. Chorley. </author> <title> "Network Analysis in Geography". </title> <address> St. </address> <publisher> Martin's Press, </publisher> <address> New York, </address> <year> 1969. </year>
Reference-contexts: 1 Introduction Spatial network databases <ref> [19, 29, 43] </ref> are the kernel of many important applications, including transportation planning; air traffic control; water, electric and gas utilities; telephone networks; urban management; sewer maintenance, and irrigation canal management. <p> Route evaluation for daily commuters often consists of comparing a set of familiar routes based on the current travel-time, congestion, restrictions and other attributes of the transportation networks. Other interesting problems in network analysis include path computation <ref> [19, 29, 43] </ref>, which models problems such as shortest path analysis and minimum travel-time route computation, etc. 1.2 Related Work and Our Contributions We discuss some of the existing access methods, including proximity-based spatial access methods and connectivity-based access methods, which may be adapted for spatial network databases. <p> While Get-successors () and Get-A-successor () can be implemented as a sequence of Find () on relevant successors, more efficient implementations are possible by defining that operation as distinct. The Get-successors () and Get-A-successor () operations represent the dominant I/O cost of many aggregate queries on networks <ref> [19, 23, 28, 38] </ref>, including route evaluation and path computations. Route Evaluation To derive aggregate properties, route evaluation queries over route-units in networks may require the retrieval of all nodes and all edges in the specified route-units.
Reference: [20] <author> K. Hua, J. Su, and C. Hua. </author> <title> "An Efficient Strategy for Traversal Recursive Query Evaluation". </title> <booktitle> In Proc. of the Ninth Intl Conference on Data Engineering. IEEE, </booktitle> <month> April </month> <year> 1993. </year>
Reference-contexts: Efficient access methods are available for a severely restricted class of networks, namely directed acyclic graphs <ref> [5, 10, 20, 28] </ref> and directed graphs with limited cycles [4], which do not adequately model many networks of interest, including road-maps. This paper shows that the expected I/O cost of many network computations can be reduced by maximizing the weighted connectivity residue ratio (WCRR). <p> Path computations, such as graph traversal and transitive closure, can be carried out by scanning forward in the file, using a priority queue [28] or a FIFO queue <ref> [20] </ref>. Topological orders, including depth-first sequence and breadth-first sequence, have been evaluated in [5] for their effectiveness in supporting different graph-traversal problems. Reverse-topological-ordering based methods have also been used to cluster related nodes in the same data page to reduce I/O cost [21].
Reference: [21] <author> Y. Ioannidis, R. Ramakrishnan, and L. Winger. </author> <title> "Transitive Closure Algorithms Based on Graph Traversal". </title> <journal> ACM Trans. on Database Systems, </journal> <volume> 18(3), </volume> <month> September </month> <year> 1993. </year> <month> 33 </month>
Reference-contexts: The literature on transitive closure and recursive-query processing has evaluated algorithms for path computations. A survey of the work can be found in <ref> [21] </ref>. The effect of efficient storage and access methods on the performance of path computations is currently being explored. Most of the proposed methods have looked at storing the nodes of a directed acyclic graph in topological order [28], using a conventional index such as the B-tree. <p> Topological orders, including depth-first sequence and breadth-first sequence, have been evaluated in [5] for their effectiveness in supporting different graph-traversal problems. Reverse-topological-ordering based methods have also been used to cluster related nodes in the same data page to reduce I/O cost <ref> [21] </ref>. Finally, the topological ordering method has been extended to graphs with a few cycles in [4]. The methods based on topological order or reverse topological order can be extended to graphs that have many undirected edges as traversals, using the well-known depth-first or breadth-first search strategies.
Reference: [22] <author> H.V. Jagadish. </author> <title> "Linear Clustering of Objects with Multiple Attributes". </title> <booktitle> In Proc. of Intl Conference on Management of Data, </booktitle> <pages> pages 332-342. </pages> <booktitle> ACM SIGMOD, </booktitle> <year> 1990. </year>
Reference-contexts: They 2 perform transformations on higher-order keys to impose total ordering. Example methods include Z-ordering [32] and Hilbert Curves <ref> [2, 11, 22] </ref>. Multidimensional B-trees [35] and K-dB-trees [33] establish a correspondence between the levels of the index and dimensions. These approaches limit the opportunities for clustering according to connectivity. <p> The Z-order of a coordinate x,y is computed by interleaving the bits in the binary representation of the two values. Alternatively, Hilbert <ref> [12, 22, 24] </ref> ordering may be used. A conventional one-dimensional primary index (e.g. B + -tree) can be used to facilitate searches. 5.2.4 Linear Clustering by DFS-order DFS-AM arranges the nodes by a depth-first traversal from a random start node.
Reference: [23] <author> B. Jiang. </author> <title> "I/O Efficiency of Shortest Path Algorithms: An Analysis". </title> <booktitle> In Proc. of the Intl Conference on Data Engineering. IEEE, </booktitle> <year> 1992. </year>
Reference-contexts: There are attributes associated with the nodes and edges. In general, spatial networks can be represented in many different ways. We will focus on the adjacency-list oriented representation, which has been used quite frequently in database research <ref> [23] </ref>. In this representation, a spatial network is modeled as a list of nodes, and each node has properties including the successor-list and predecessor-list, which represent the outgoing and incoming edges. The predecessor-list facilitates updating the successor-lists during the insertion and deletion of nodes. <p> While Get-successors () and Get-A-successor () can be implemented as a sequence of Find () on relevant successors, more efficient implementations are possible by defining that operation as distinct. The Get-successors () and Get-A-successor () operations represent the dominant I/O cost of many aggregate queries on networks <ref> [19, 23, 28, 38] </ref>, including route evaluation and path computations. Route Evaluation To derive aggregate properties, route evaluation queries over route-units in networks may require the retrieval of all nodes and all edges in the specified route-units.
Reference: [24] <author> I. Kamel and C. Faloutsos. "Hilbert R-tree: </author> <title> An Improved R-tree using Fractals". </title> <booktitle> In Proc. of Intl Conference on Very Large Data Bases, </booktitle> <year> 1994. </year>
Reference-contexts: The Z-order of a coordinate x,y is computed by interleaving the bits in the binary representation of the two values. Alternatively, Hilbert <ref> [12, 22, 24] </ref> ordering may be used. A conventional one-dimensional primary index (e.g. B + -tree) can be used to facilitate searches. 5.2.4 Linear Clustering by DFS-order DFS-AM arranges the nodes by a depth-first traversal from a random start node.
Reference: [25] <author> B.W. Kernighan and S. Lin. </author> <title> "An Efficient Heuristic Procedure for Partitioning Graphs". </title> <journal> Bell Syst. Tech. J., </journal> <volume> 49(2) </volume> <pages> 291-307, </pages> <month> February </month> <year> 1970. </year>
Reference-contexts: Analysis and experiments show that the proposed method leads to reduced I/O costs and a higher WCRR for many interesting networks. The literature in the area of graph partitioning <ref> [6, 7, 13, 25] </ref> has only focused on partitioning static graphs without considering dynamic updates. We address the following two issues. First, the static graph-partitioning approach is not efficient when the entire network cannot fit into main memory. <p> It can easily be shown that the problem of partitioning the nodes of a network into pages of a given size, so as to maximize the WCRR, is an instance of the graph-partitioning problem defined in <ref> [25] </ref>. The graph-partitioning problem is to partition the nodes of a graph with costs on its edges into subsets of given sizes, so as to minimize the sum of the costs on all the cut edges. <p> Although the graph-partitioning problem is NP-complete [14], many good heuristics based on spectral partitioning [6] and iterative approaches <ref> [7, 13, 25] </ref> have been proposed to solve this problem efficiently. The implementation of CCAM operations takes advantage of these heuristics. The WCRR model is proposed on the basis of the available database statistics on access frequencies. <p> The implementation is based on the bucket-list data structure [13] and requires a time complexity of O (jEj) with respect to the number of edges jEj. Other graph-partitioning methods can also be used as the basis of our scheme. In fact, M-way partitioning <ref> [25, 45] </ref> may be used to further improve the result of partitioning, if computation complexity and CPU cost is not a concern. 10 The Incremental Create () Operation The Static-Create () operation is not efficient when the entire network does not fit inside main memory.
Reference: [26] <author> R. Kung, E. Hanson, and et. al. </author> <title> "Heuristic Search in Data Base Systems". </title> <booktitle> In Proc. Expert Database Systems. </booktitle> <publisher> Benjamin Cummings Publications, </publisher> <year> 1986. </year>
Reference-contexts: We address the following two issues. First, the static graph-partitioning approach is not efficient when the entire network cannot fit into main memory. In general, road-maps are very large databases <ref> [3, 26] </ref>, and thus may not fit inside main memory. Second, maintaining a high WCRR in the face of Insert () and Delete () operations, without complete reorganization, is a critical problem. To solve the above two issues, we propose dynamic reclustering strategies to handle dynamic updating effects.
Reference: [27] <author> Y. Kusumi, S. Nishio, and T. Hasegawa. </author> <title> "File Access Level Optimization Using Page Access Graph on Recursive Query Evaluation". </title> <booktitle> In Proc. Conference on Extending Database Technology. </booktitle> <address> EDBT, </address> <year> 1988. </year>
Reference-contexts: Local reorganizations of the data pages may be needed to improve the WCRR. Intuitively, the data sets chosen for reorganization should be those data pages which are related via the connection between nodes. We adopt the notion of the page access graph (PAG) <ref> [27] </ref> to formalize the connectivity relationship between data pages. Definition 1 (Page Access Graph) Let G = (V , E) be the given network.
Reference: [28] <author> P.A. Larson and V. Deshpande. </author> <title> "A File Structure Supporting Traversal Recursion". </title> <booktitle> In Proc. of the SIGMOD Conference, </booktitle> <pages> pages 243-252. </pages> <publisher> ACM, </publisher> <year> 1989. </year>
Reference-contexts: Efficient access methods are available for a severely restricted class of networks, namely directed acyclic graphs <ref> [5, 10, 20, 28] </ref> and directed graphs with limited cycles [4], which do not adequately model many networks of interest, including road-maps. This paper shows that the expected I/O cost of many network computations can be reduced by maximizing the weighted connectivity residue ratio (WCRR). <p> A survey of the work can be found in [21]. The effect of efficient storage and access methods on the performance of path computations is currently being explored. Most of the proposed methods have looked at storing the nodes of a directed acyclic graph in topological order <ref> [28] </ref>, using a conventional index such as the B-tree. Path computations, such as graph traversal and transitive closure, can be carried out by scanning forward in the file, using a priority queue [28] or a FIFO queue [20]. <p> of the proposed methods have looked at storing the nodes of a directed acyclic graph in topological order <ref> [28] </ref>, using a conventional index such as the B-tree. Path computations, such as graph traversal and transitive closure, can be carried out by scanning forward in the file, using a priority queue [28] or a FIFO queue [20]. Topological orders, including depth-first sequence and breadth-first sequence, have been evaluated in [5] for their effectiveness in supporting different graph-traversal problems. Reverse-topological-ordering based methods have also been used to cluster related nodes in the same data page to reduce I/O cost [21]. <p> While Get-successors () and Get-A-successor () can be implemented as a sequence of Find () on relevant successors, more efficient implementations are possible by defining that operation as distinct. The Get-successors () and Get-A-successor () operations represent the dominant I/O cost of many aggregate queries on networks <ref> [19, 23, 28, 38] </ref>, including route evaluation and path computations. Route Evaluation To derive aggregate properties, route evaluation queries over route-units in networks may require the retrieval of all nodes and all edges in the specified route-units. <p> We note that the records do not have fixed formats, since the size of the successor-list and predecessor-list varies across nodes. In contrast with the previous topological ordering based approach <ref> [28] </ref>, CCAM assigns nodes to the data page by a graph partitioning approach, which tries to maximize the WCRR. Each data page is kept at least half full whenever possible. Records of the data file are not physically ordered by node-id values. <p> The methodology can be used to compare other combinations such as CCAM with B + -tree secondary index, CCAM with Cell-tree secondary index, Cell-tree primary index, etc. The general conclusions would be very similar to those found in the illustration. We choose the Grid File [31] and DFS-AM <ref> [5, 28] </ref> as representative of spatial access methods and connectivity-based access methods, respectively, to compare with CCAM. DFS-AM is the extension of topological-ordering based files to general graphs. <p> We note that the cost of Insert () and Delete () for CCAM represents the cost of CCAM that uses the first/second reorganization policy. Z C , Z T and Z G represent the cost of accessing a node (record) in CCAM, topologically-ordered files (DFS-AM) <ref> [28] </ref> and the Grid Files, respectively. The entries listed in Table 5 are derived by adding the cost of index traversal to the cost of network operations, as discussed in Section 4.2, Tables 3 and 4. <p> We compare the proposed connectivity-based clustering scheme CCAM-S and CCAM-D with the other schemes, namely, the Grid file [31], the Cell Tree [17], Z-ordering [32], and DFS-AM <ref> [5, 28] </ref>. CCAM-S denotes the static create operation of CCAM. CCAM-D is an incremental create () operation which was implemented using the second-order reorganization policy. The Cell-tree represents the family containing R + -tree [36]. <p> Alternatively, Hilbert [12, 22, 24] ordering may be used. A conventional one-dimensional primary index (e.g. B + -tree) can be used to facilitate searches. 5.2.4 Linear Clustering by DFS-order DFS-AM arranges the nodes by a depth-first traversal from a random start node. This method extends the topological-ordering based method <ref> [28] </ref> to general graphs. A conventional one-dimensional primary index (e.g. B + -tree) can be used to facilitate searches. DFS-AM is not the only method to linearly cluster data based on connectivity.
Reference: [29] <author> R. Laurini and D. Thompson. </author> <title> "Fundamentals of Spatial Information Systems", </title> <booktitle> chapter 5 and 2.5.4. Number 37 in The A.P.I.C. Series. </booktitle> <publisher> Academic Press, </publisher> <year> 1992. </year>
Reference-contexts: 1 Introduction Spatial network databases <ref> [19, 29, 43] </ref> are the kernel of many important applications, including transportation planning; air traffic control; water, electric and gas utilities; telephone networks; urban management; sewer maintenance, and irrigation canal management. <p> For example, a spatial network database for transportation applications may store road intersection points and the road segments connecting the intersections. Network computations perform connectivity-based computations including route evaluation, path computation, tour evaluation and location-allocation evaluation <ref> [15, 29] </ref>. There has been a great deal of research within the database area in the design and evaluation of spatial access methods for point and range queries over collections of points, line-segments, and polygons. <p> Network analysis represents frequent aggregate queries on spatial networks, such as route evaluation and path computation [43], etc. Route evaluation is concerned with aggregating attribute data over route-units. A route-unit represents a collection of arcs with common characteristics (e.g. name) <ref> [29] </ref>. Route evaluation yields summary information for decision-support applications. For example, utility companies may track the volume of gas/electricity flowing through major pipeline route-units in their networks. <p> Route evaluation for daily commuters often consists of comparing a set of familiar routes based on the current travel-time, congestion, restrictions and other attributes of the transportation networks. Other interesting problems in network analysis include path computation <ref> [19, 29, 43] </ref>, which models problems such as shortest path analysis and minimum travel-time route computation, etc. 1.2 Related Work and Our Contributions We discuss some of the existing access methods, including proximity-based spatial access methods and connectivity-based access methods, which may be adapted for spatial network databases.
Reference: [30] <author> D.R. Liu and S. Shekhar. "CCAM: </author> <title> Connectivity-Clustered Access Method for Networks and Network Computations". </title> <type> Technical Report TR 93-78, </type> <institution> Computer Science Dept. University of Minnesota, </institution> <year> 1993. </year>
Reference-contexts: Each iteration is usually centered around a node called the current node for the iteration. Computations in each iteration often access the nodes on the successor-list via the Get-successors () operation. The quantitative models for the I/O cost of several path computations are summarized in <ref> [30] </ref>. These models are discussed in detail and validated in [37]. <p> In this section, we first describe the layout of our experiments and then illustrate the candidate access methods. Due to space constraints, we have only presented a subset of the experiments. A full description of these experiments and the results can be found in <ref> [30] </ref>. 20 5.1 Experimental Layout The design of our experiments is shown in Figure 6. We compare the proposed connectivity-based clustering scheme CCAM-S and CCAM-D with the other schemes, namely, the Grid file [31], the Cell Tree [17], Z-ordering [32], and DFS-AM [5, 28]. <p> We examine the WCRR measure in the set of experiments that deals with route evaluation queries. Due to space constraints, we have only presented results from a subset of the experiments. A full description of these experiments and the results can be found in <ref> [30] </ref>. 6.1 Evaluation of I/O Cost for Network Operations We evaluate the I/O cost of alternative access methods for four network operations, namely, Get-A-successor (), Get-successors (), Insert (), and Delete (). The experiments use the Minneapolis road map with disk block size = 2 K.
Reference: [31] <author> J. Nievergelt, H. Hinteberger, and K.D. Sevcik. </author> <title> "The Grid File: An Adaptable, Symmetric Multi-Key File Structure". </title> <journal> ACM Trans. on Database Systems, </journal> <volume> 9(1) </volume> <pages> 38-71, </pages> <year> 1984. </year>
Reference-contexts: A survey of these methods can be found in [34]. Some of the representative Isotropic Access Methods (ISM's) include grid files <ref> [31] </ref>, cell-trees [17], R-trees [18] and R + trees [36]. Isotropic spatial access methods have traditionally been used to store vector-spatial data such as sets of polygons, and they allow flexible policies which can be adapted to take advantage of connectivity information. <p> The choice of a secondary index can be tailored to the application. We use the B + tree with Z-order [32] in our experiments, since the benchmark networks are embedded in geographical space. Other access methods such as the R-tree [18] and Grid File <ref> [31] </ref>, etc. can alternatively be created on top of the data file, as secondary indices in CCAM to suit the application. <p> Our intention is to characterize the effect of secondary index used with CCAM, since many competitors can use a non-dense primary index. The primary indices on node-id differ in depth due to different page-formats and branching factors. The Grid-File <ref> [31] </ref> provides a fixed depth. A B + tree is likely to have a higher branching factor and lesser depth than the Cell-tree [17] for a fixed page-size and a given data set. CCAM can use any index type (e.g. B + -tree, Grid File, Cell-tree) as a secondary index. <p> The methodology can be used to compare other combinations such as CCAM with B + -tree secondary index, CCAM with Cell-tree secondary index, Cell-tree primary index, etc. The general conclusions would be very similar to those found in the illustration. We choose the Grid File <ref> [31] </ref> and DFS-AM [5, 28] as representative of spatial access methods and connectivity-based access methods, respectively, to compare with CCAM. DFS-AM is the extension of topological-ordering based files to general graphs. <p> A full description of these experiments and the results can be found in [30]. 20 5.1 Experimental Layout The design of our experiments is shown in Figure 6. We compare the proposed connectivity-based clustering scheme CCAM-S and CCAM-D with the other schemes, namely, the Grid file <ref> [31] </ref>, the Cell Tree [17], Z-ordering [32], and DFS-AM [5, 28]. CCAM-S denotes the static create operation of CCAM. CCAM-D is an incremental create () operation which was implemented using the second-order reorganization policy. The Cell-tree represents the family containing R + -tree [36]. <p> Candidate Access Methods other than CCAM In this section we describe the candidate access methods used in the experiments. 22 Parameters Values Route Length 20, 40, 60 edges Buffering 1, 8, 16 Disk Block Size 1/2, 1, 2, 4 K bytes Table 6: Parameters 5.2.1 Grid File The grid file <ref> [31] </ref> partitions the data space according to an orthogonal grid. The grid on a k-dimensional data space is defined by k one-dimensional arrays called scales. An element of a scale represents a k-1 dimensional hyperplane that partitions the space into two halves.
Reference: [32] <author> A. Orenstein and T. Merrett. </author> <title> "A Class of Data Structures for Associative Searching". </title> <booktitle> In Proc. Symp. on Principles of Database Systems, </booktitle> <pages> pages 181-190. </pages> <address> SIGMOD-SIGACT PODS, </address> <year> 1984. </year>
Reference-contexts: Linear-clustering based spatial access methods order the points in multiple dimensions by a space-filling curve, with a specific resolution of the space, and use a one-dimensional access method with this ordering. They 2 perform transformations on higher-order keys to impose total ordering. Example methods include Z-ordering <ref> [32] </ref> and Hilbert Curves [2, 11, 22]. Multidimensional B-trees [35] and K-dB-trees [33] establish a correspondence between the levels of the index and dimensions. These approaches limit the opportunities for clustering according to connectivity. <p> In addition, an auxiliary secondary index is used to support the Find (), Get-A-successor () and Get-successors () operations. The choice of a secondary index can be tailored to the application. We use the B + tree with Z-order <ref> [32] </ref> in our experiments, since the benchmark networks are embedded in geographical space. Other access methods such as the R-tree [18] and Grid File [31], etc. can alternatively be created on top of the data file, as secondary indices in CCAM to suit the application. <p> Since our benchmark networks are embedded in geographic space, (x, y) coordinates for each node are also stored in the record. A B + tree with Z-ordering <ref> [32] </ref> of the (x, y) coordinates is used to order the secondary 8 index. It can support point and range queries on spatial databases. The Z-order of a coordinate x, y is computed by interleaving the bits in the binary representation of the two values. <p> We compare the proposed connectivity-based clustering scheme CCAM-S and CCAM-D with the other schemes, namely, the Grid file [31], the Cell Tree [17], Z-ordering <ref> [32] </ref>, and DFS-AM [5, 28]. CCAM-S denotes the static create operation of CCAM. CCAM-D is an incremental create () operation which was implemented using the second-order reorganization policy. The Cell-tree represents the family containing R + -tree [36]. <p> We consider two versions of the Grid-file and Cell-tree, including connectivity-based and balance-based split policies, as described in Section 5.2. In Sections 6.1, 6.2 and 6.4, we use the connectivity-based split policies for Grid-file and Cell-tree. Z-ordering <ref> [32] </ref> represents a spatial-based linear transformation of two-dimensional data. Topological ordering based methods (DFS-AM) are chosen for comparison, since they are the commonly used methods in the areas of path computations, transitive closures and recursive queries. <p> We have tried various values for l and are currently using l = 5 plus the vertical sweep lines. A larger set of sweeping lines requires more computation time, but gains only slight improvements in performance. 5.2.3 Linear Clustering by Z-order The Z-order <ref> [32] </ref> utilizes spatial information while imposing a total order on the points. The Z-order of a coordinate x,y is computed by interleaving the bits in the binary representation of the two values. Alternatively, Hilbert [12, 22, 24] ordering may be used. A conventional one-dimensional primary index (e.g.
Reference: [33] <author> J.T. Robinson. </author> <title> "The K-D-B-tree: A Search Structure for Large Multidimensional Dynamic indexes". </title> <booktitle> In Proc. of SIGMOD Intl Conference on Management of Data, </booktitle> <pages> pages 10-18. </pages> <publisher> ACM, </publisher> <year> 1981. </year>
Reference-contexts: They 2 perform transformations on higher-order keys to impose total ordering. Example methods include Z-ordering [32] and Hilbert Curves [2, 11, 22]. Multidimensional B-trees [35] and K-dB-trees <ref> [33] </ref> establish a correspondence between the levels of the index and dimensions. These approaches limit the opportunities for clustering according to connectivity.
Reference: [34] <author> H. Samet. </author> <title> "The Design and Analysis of Spatial Data Structures". </title> <publisher> Addison Wesley, </publisher> <year> 1990. </year>
Reference-contexts: These approaches limit the opportunities for clustering according to connectivity. Other spatial access methods capture the isotropic nature of proximity by recursively dividing the space, using a splitting rule to construct a grid or a hierarchy of regions [17]. A survey of these methods can be found in <ref> [34] </ref>. Some of the representative Isotropic Access Methods (ISM's) include grid files [31], cell-trees [17], R-trees [18] and R + trees [36].
Reference: [35] <author> P. Scheuermann and M. Ouskel. </author> <title> "Multidimensional B-trees for Associative Searching in Database Systems". </title> <journal> Information Systems, </journal> <volume> 7(2), </volume> <year> 1982. </year>
Reference-contexts: They 2 perform transformations on higher-order keys to impose total ordering. Example methods include Z-ordering [32] and Hilbert Curves [2, 11, 22]. Multidimensional B-trees <ref> [35] </ref> and K-dB-trees [33] establish a correspondence between the levels of the index and dimensions. These approaches limit the opportunities for clustering according to connectivity.
Reference: [36] <author> T. Sellis, N. Roussopoulos, and C. Faloutsos. </author> <title> "The R + -Tree: A Dynamic Index for Multi-Dimensional Objects". </title> <booktitle> In Proc.13th Intl Conference on Very Large Data Bases, </booktitle> <pages> pages 507-518, </pages> <year> 1987. </year>
Reference-contexts: A survey of these methods can be found in [34]. Some of the representative Isotropic Access Methods (ISM's) include grid files [31], cell-trees [17], R-trees [18] and R + trees <ref> [36] </ref>. Isotropic spatial access methods have traditionally been used to store vector-spatial data such as sets of polygons, and they allow flexible policies which can be adapted to take advantage of connectivity information. The literature on transitive closure and recursive-query processing has evaluated algorithms for path computations. <p> CCAM-S denotes the static create operation of CCAM. CCAM-D is an incremental create () operation which was implemented using the second-order reorganization policy. The Cell-tree represents the family containing R + -tree <ref> [36] </ref>. The Grid-file and the Cell-tree partition the space to capture the isotropic nature of spatial proximity, which is an important property of spatial networks. We consider two versions of the Grid-file and Cell-tree, including connectivity-based and balance-based split policies, as described in Section 5.2.
Reference: [37] <author> S. Shekhar, A. Kohli, and M. Coyle. </author> <title> "Can Proximity-Based Access Methods Efficiently Support Network Computations?". </title> <type> Technical Report TR-93-57, </type> <institution> Computer Science Dept. University of Minnesota, </institution> <year> 1993. </year>
Reference-contexts: Computations in each iteration often access the nodes on the successor-list via the Get-successors () operation. The quantitative models for the I/O cost of several path computations are summarized in [30]. These models are discussed in detail and validated in <ref> [37] </ref>.
Reference: [38] <author> S. Shekhar, A. Kohli, and M. Coyle. </author> <title> "Path Computation Algorithms for Advanced Traveler Information System". </title> <booktitle> In Proc. of the Ninth Intl Conference on Data Engineering, </booktitle> <pages> pages 31-39. </pages> <publisher> IEEE, </publisher> <month> April </month> <year> 1993. </year>
Reference-contexts: ATIS Database Road Maps City Maps Construction Schedule Business Directory Drivers Based Sensors Highway Traffic Report Personal Communication Devices Office, Home Shopping Mall Information Center For ATIS and other applications, an efficient and effective spatial network database is needed to support network analysis <ref> [38, 43] </ref>. Network analysis represents frequent aggregate queries on spatial networks, such as route evaluation and path computation [43], etc. Route evaluation is concerned with aggregating attribute data over route-units. A route-unit represents a collection of arcs with common characteristics (e.g. name) [29]. <p> Get-A-successor () retrieves a specified successor of a given node. Get-successors () retrieves the records for all successor nodes of a given node. For example, Get-A-successor () is used in route evaluation queries, while Get-successors () is used in graph search algorithms like A ? <ref> [38] </ref>. While Get-successors () and Get-A-successor () can be implemented as a sequence of Find () on relevant successors, more efficient implementations are possible by defining that operation as distinct. <p> While Get-successors () and Get-A-successor () can be implemented as a sequence of Find () on relevant successors, more efficient implementations are possible by defining that operation as distinct. The Get-successors () and Get-A-successor () operations represent the dominant I/O cost of many aggregate queries on networks <ref> [19, 23, 28, 38] </ref>, including route evaluation and path computations. Route Evaluation To derive aggregate properties, route evaluation queries over route-units in networks may require the retrieval of all nodes and all edges in the specified route-units. <p> A ? represents the single-pair path-planning algorithms which use heuristic lookahead to focus the search <ref> [9, 38] </ref>. Three query sets are chosen to represent path queries of three different path classes, namely small, medium and large.
Reference: [39] <author> S. Shekhar and D. R. Liu. </author> <title> "Genesis and Advanced Traveler Information Systems (ATIS) : Killer Applications for Mobile Computing". </title> <booktitle> In NSF MOBIDATA Workshop on Mobile and Wireless Information Systems, </booktitle> <year> 1994. </year>
Reference-contexts: IVHS [1] is currently being developed to improve the safety and efficiency of automobile travel. ATIS is one facet of IVHS which assists travelers with trip planning, navigation perception, analysis and decision-making to improve the convenience, safety and efficiency of travel <ref> [8, 39] </ref>. An important component of IVHS and ATIS is a spatial network database containing road maps, public transportation routes, and current travel time for segments of the transportation network, which is updated frequently.
Reference: [40] <author> M. Stonebraker, J. Frew, K. Gardels, and Jeff Meredith. </author> <title> "The Sequoia 2000 Benchmark". </title> <booktitle> In Proc. of Intl Conference on Management of Data. ACM, </booktitle> <year> 1993. </year>
Reference-contexts: Reorganization policies that do not incur high CPU costs are currently being investigated. Finally, we would like to evaluate CCAM for other aggregate queries on networks, including tour evaluation and location-allocation evaluation, as well as on mixed workloads such as the sequoia benchmark <ref> [40] </ref>. 8 Acknowledgment This research was supported by the Federal Highway Authority (FHWA), Minnesota Dept. of Transportation and the Center for Transportation Studies at the University of Minnesota. We would like to thank Dr. H.V. Jagadish (AT&T Bell Labs) and Prof. K.
Reference: [41] <author> M. M. Tsangaris and Jeffrey.F. Naughton. </author> <title> "A Stochastic Approach for Clustering in Object Bases". </title> <booktitle> In Proc. of SIGMOD Conference on Management of Data, </booktitle> <pages> pages 12-21. </pages> <publisher> ACM, </publisher> <year> 1991. </year>
Reference-contexts: A survey of these techniques can be found in [4]. However, these techniques require a separate structure for each path computation over the same graph and are not space efficient. Meanwhile, static schemes based on the graph-partitioning heuristic, albeit in a different context, were recently used in <ref> [41] </ref>. The issues involved in dynamic updating effects during insertion and deletion have not been discussed. 3 Contributions: In the past, most research has focused on the modeling and evaluation of path-computation algorithms.
Reference: [42] <author> P. Valduriez and H. Boral. </author> <title> "Evaluation of Recursive Queries Using Join Indices". </title> <booktitle> In Proc. of Intl Conference on Expert Database Systems, </booktitle> <year> 1986. </year> <month> 34 </month>
Reference-contexts: Furthermore, none of the proposed access methods takes full advantage of the connectivity properties of a network, due to their reliance on total ordering. Join-indices <ref> [42] </ref> can also be used to speed up iterative algorithms for computing transitive closure, and a materialized view can also accelerate path computation. Transitive closure queries can be answered by a look-up in the materialized view. A survey of these techniques can be found in [4].
Reference: [43] <author> A. P. Vonderohe and et. al. </author> <title> "Adaption of GIS for Transportation". </title> <type> NCHRP Report 359, </type> <institution> Transportation Research Board, National Research Council, </institution> <year> 1993. </year>
Reference-contexts: 1 Introduction Spatial network databases <ref> [19, 29, 43] </ref> are the kernel of many important applications, including transportation planning; air traffic control; water, electric and gas utilities; telephone networks; urban management; sewer maintenance, and irrigation canal management. <p> ATIS Database Road Maps City Maps Construction Schedule Business Directory Drivers Based Sensors Highway Traffic Report Personal Communication Devices Office, Home Shopping Mall Information Center For ATIS and other applications, an efficient and effective spatial network database is needed to support network analysis <ref> [38, 43] </ref>. Network analysis represents frequent aggregate queries on spatial networks, such as route evaluation and path computation [43], etc. Route evaluation is concerned with aggregating attribute data over route-units. A route-unit represents a collection of arcs with common characteristics (e.g. name) [29]. <p> Network analysis represents frequent aggregate queries on spatial networks, such as route evaluation and path computation <ref> [43] </ref>, etc. Route evaluation is concerned with aggregating attribute data over route-units. A route-unit represents a collection of arcs with common characteristics (e.g. name) [29]. Route evaluation yields summary information for decision-support applications. <p> Route evaluation for daily commuters often consists of comparing a set of familiar routes based on the current travel-time, congestion, restrictions and other attributes of the transportation networks. Other interesting problems in network analysis include path computation <ref> [19, 29, 43] </ref>, which models problems such as shortest path analysis and minimum travel-time route computation, etc. 1.2 Related Work and Our Contributions We discuss some of the existing access methods, including proximity-based spatial access methods and connectivity-based access methods, which may be adapted for spatial network databases.
Reference: [44] <author> J. L. Wiener and J. F. Naughton. </author> <title> "Bulk Loading into an OODB: A Performance Study". </title> <booktitle> In Proc. of Intl Conference on Very Large Data Bases, </booktitle> <year> 1994. </year>
Reference-contexts: We use CCAM-D to denote the implementation of Incremental Create () as a sequence of Add-node () operations. CCAM-S denotes the implementation of Static Create (). Incremental Create () is different from bulk loading <ref> [44] </ref>. Incremental Create () focuses on loading the entire network, which occurs the most frequently in application domains such as transportation.
Reference: [45] <author> C.W. Yeh, C.K. Cheng, and T.T. Y. Lin. </author> <title> "A General Purpose Multiple Way Partitioning Algorithm". </title> <booktitle> In Proc. of 28th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 421-426, </pages> <year> 1991. </year> <month> 35 </month>
Reference-contexts: The implementation is based on the bucket-list data structure [13] and requires a time complexity of O (jEj) with respect to the number of edges jEj. Other graph-partitioning methods can also be used as the basis of our scheme. In fact, M-way partitioning <ref> [25, 45] </ref> may be used to further improve the result of partitioning, if computation complexity and CPU cost is not a concern. 10 The Incremental Create () Operation The Static-Create () operation is not efficient when the entire network does not fit inside main memory.
References-found: 45

