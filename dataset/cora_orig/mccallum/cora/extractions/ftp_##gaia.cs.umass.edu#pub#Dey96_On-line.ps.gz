URL: ftp://gaia.cs.umass.edu/pub/Dey96:On-line.ps.gz
Refering-URL: http://www-net.cs.umass.edu/papers/papers.html
Root-URL: 
Title: On-Line Scheduling Policies for a class of IRIS (Increasing Reward with Increasing Service) Real-Time Tasks  
Author: Jayanta K. Dey James Kurose Don Towsley 
Keyword: Index Terms| Real-time systems, on-line scheduling, deadline based scheduling, priority scheduling, reward functions for tasks, maximizing reward rates.  
Abstract: We consider a real-time task model where a task receives a "reward" that depends on the amount of service received prior to its deadline. The reward of the task is assumed to be an increasing function of the amount of service that it receives, i.e., the task has the property that it receives increasing reward with increasing service (IRIS). We focus on the problem of on-line scheduling of a random arrival sequence of IRIS tasks on a single processor with the goal of maximizing the average reward accrued per task and per unit time. We describe and evaluate several policies for this system through simulation and through a comparison with an unachievable upper bound. We observe that the best performance is exhibited by a two-level policy where the top-level algorithm is responsible for allocating the amount of service to tasks and the bottom-level algorithm, using the earliest deadline first (EDF) rule, is responsible for determining the order in which tasks are executed. Furthermore, the performance of this policy often approaches the theoretical upper bound in many cases. We also show that the average number of preemptions of a task under this two-level policy is very small. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. A. Stankovic and K. Ramamritham, </author> <title> Hard Real-Time Systems Tutorial Text, </title> <publisher> IEEE Press, </publisher> <year> 1988. </year>
Reference-contexts: FCFS, however, cannot provide that guarantee. Figure 3 shows an example where FCFS is unable to provide the top-level policy's allocation to every task. There are two tasks, numbered 1 and 2, with [a 1 ; t 1 ] = [0; 3], [a 2 ; t 2 ] = <ref> [1; 2] </ref>, as shown in Figure 3.i. Figure 3.ii depicts the linear reward functions of the two tasks with reward rates g 1 = 1, g 2 = 2. Figure 3.iii shows the top-level policy's allocation decisions made at times t = 0 and t = 1.
Reference: [2] <author> Mark Boddy and Thomas Dean, </author> <title> "Solving time-dependent planning problems", </title> <booktitle> in Proceedings of the Eleventh International Joint Conference on Artificial Intelligence (IJCAI-89), </booktitle> <address> Detroit, Mi, </address> <month> Aug. </month> <year> 1989, </year> <booktitle> IJCAI-89, </booktitle> <pages> pp. 979-984. </pages>
Reference-contexts: FCFS, however, cannot provide that guarantee. Figure 3 shows an example where FCFS is unable to provide the top-level policy's allocation to every task. There are two tasks, numbered 1 and 2, with [a 1 ; t 1 ] = [0; 3], [a 2 ; t 2 ] = <ref> [1; 2] </ref>, as shown in Figure 3.i. Figure 3.ii depicts the linear reward functions of the two tasks with reward rates g 1 = 1, g 2 = 2. Figure 3.iii shows the top-level policy's allocation decisions made at times t = 0 and t = 1. <p> The reward function for a class k task is of the form f k (x) = 1 e ffi k x ; k = 1; 2. The motivation for using exponential reward functions come from Dean and Boddy [4], <ref> [2] </ref>, who have employed an IRIS algorithm for time-dependent planning problems, that has an exponential reward function. Horvitz [16] also has described IRIS computations with exponential reward functions.
Reference: [3] <author> Mark Boddy and Thomas Dean, </author> <title> "Deliberation scheduling for problem solving in time-constrained environments", </title> <journal> Artificial Intelligence, </journal> <volume> vol. 67, no. 2, </volume> <pages> pp. 245-285, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: Note that the metric in IRIS of maximizing reward rate is analogous to the performance metric of minimizing error in the imprecise computation model. For time-dependent path planning of robots <ref> [3] </ref>, [4], Boddy and Dean consider a static system where a fixed set of tasks have to be scheduled. The tasks exhibit IRIS behavior. In their model, the processing times of tasks are multiples of a fixed time slice, i.e., it is a discrete-time version of IRIS task model. <p> FCFS, however, cannot provide that guarantee. Figure 3 shows an example where FCFS is unable to provide the top-level policy's allocation to every task. There are two tasks, numbered 1 and 2, with [a 1 ; t 1 ] = <ref> [0; 3] </ref>, [a 2 ; t 2 ] = [1; 2], as shown in Figure 3.i. Figure 3.ii depicts the linear reward functions of the two tasks with reward rates g 1 = 1, g 2 = 2.
Reference: [4] <author> Thomas Dean and Mark Boddy, </author> <title> "An analysis of time-dependent planning", </title> <booktitle> in Proceedings of the Seventh National Conference on Artificial Intelligence (AAAI-88), </booktitle> <address> St Paul, MN, </address> <month> Aug. </month> <year> 1988, </year> <pages> AAAI-88, pp. 49-54. </pages>
Reference-contexts: Note that the metric in IRIS of maximizing reward rate is analogous to the performance metric of minimizing error in the imprecise computation model. For time-dependent path planning of robots [3], <ref> [4] </ref>, Boddy and Dean consider a static system where a fixed set of tasks have to be scheduled. The tasks exhibit IRIS behavior. In their model, the processing times of tasks are multiples of a fixed time slice, i.e., it is a discrete-time version of IRIS task model. <p> The reward function for a class k task is of the form f k (x) = 1 e ffi k x ; k = 1; 2. The motivation for using exponential reward functions come from Dean and Boddy <ref> [4] </ref>, [2], who have employed an IRIS algorithm for time-dependent planning problems, that has an exponential reward function. Horvitz [16] also has described IRIS computations with exponential reward functions.
Reference: [5] <author> K.S. Decker, V.R. Lesser, </author> <title> and R.C. Whitehair, "Extending a blackboard architecture for approximate processing", </title> <journal> The Journal of Real-Time Systems, </journal> <volume> vol. 2, </volume> <pages> pp. 47-79, </pages> <year> 1990. </year>
Reference: [6] <author> Jane Liu, </author> <title> "Timing constraints and algorithms", </title> <booktitle> in Report on the Embedded AI Languages Workshop. </booktitle> <institution> University of Michigan, </institution> <month> Nov. </month> <year> 1988, </year> <pages> pp. 9-11. </pages>
Reference: [7] <author> E. Chang and A. Zakhor, </author> <title> "Scalable Video Coding using 3-D Subband Velocity Coding and Multi-Rate Quantization", </title> <booktitle> in IEEE Int. Conf. on Acoustics, Speech, and Signal Processing, </booktitle> <address> Minneapolis, MN, </address> <month> July </month> <year> 1993. </year>
Reference: [8] <author> E. Chang and A. Zakhor, </author> <title> "Scalable Video Data Placement on Parallel Disk Arrays", </title> <booktitle> in IS&T/SPIE Symposium on Electronic Imaging Science and Technology, </booktitle> <address> San Jose, CA, </address> <month> Feb. </month> <year> 1994, </year> <pages> pp. 208-221. </pages>
Reference: [9] <author> International Organization for Standardization, "ISO/IEC JTC1/SC29/WG11 MPEG93/457, </author> <title> Coding of Moving Pictures and Associated Audio, </title> <note> MPEG-2 Systems Working Draft", </note> <month> Nov. </month> <year> 1993. </year>
Reference: [10] <author> Charles J. Turner and Larry L. Peterson, </author> <title> "Image Transfer: An End-to-End design", </title> <booktitle> in SIGCOMM Symposium on Communications Architectures and Protocols, </booktitle> <address> Baltimore, MD, </address> <month> Aug. </month> <year> 1992, </year> <booktitle> ACM, </booktitle> <pages> pp. 258-268. </pages>
Reference: [11] <author> Barbara Hayes-Roth, </author> <title> "Architectural foundations for real-time performance in intelligent agents", </title> <journal> The Journal of Real-Time Systems, </journal> <volume> vol. 2, </volume> <pages> pp. 99-125, </pages> <year> 1990. </year>
Reference: [12] <author> Richard E. Korf, </author> <title> "Depth-limited search for real-time problem solving", </title> <journal> The Journal of Real-Time Systems, </journal> <volume> vol. 2, </volume> <pages> pp. 7-24, </pages> <year> 1990. </year>
Reference: [13] <author> Richard E. Korf, </author> <title> "Real-time heuristic search", </title> <journal> Artificial Intelligence, </journal> <volume> vol. 42, no. 2, </volume> <pages> pp. 189-212, </pages> <year> 1990. </year>
Reference: [14] <author> K.P. Smith and J.W.S. Liu, </author> <title> "Monotonically improving approximate answers to relational algebra queries", </title> <booktitle> in Proceedings of Compsac, </booktitle> <month> Sept. </month> <year> 1989. </year>
Reference: [15] <author> S. V. Vrbsky and J.W.S. Liu, </author> <title> "Producing monotonically improving approximate answers to database queries", </title> <booktitle> in Proceedings of IEEE Workshop on Imprecise and Approximate Computation, </booktitle> <address> Phoenix, Arizona, </address> <month> Dec. </month> <year> 1992, </year> <pages> pp. 72-76. </pages>
Reference: [16] <author> E.J. Horvitz, </author> <title> "Reasoning under varying and uncertain resource constraints", </title> <booktitle> in Proceedings of the Seventh National Conference on Artificial Intelligence (AAAI-88), </booktitle> <address> St Paul, MN, </address> <month> Aug. </month> <year> 1988, </year> <pages> AAAI-88, pp. 111-116. </pages>
Reference-contexts: The motivation for using exponential reward functions come from Dean and Boddy [4], [2], who have employed an IRIS algorithm for time-dependent planning problems, that has an exponential reward function. Horvitz <ref> [16] </ref> also has described IRIS computations with exponential reward functions. The independent parameter we have used for our simulations is the processor utilization U , a measure of the processor load, due to the combination of two task classes.
Reference: [17] <author> S. Zilberstein, </author> <title> Operational Rationality through Compilation of Anytime Algorithms, </title> <type> PhD thesis, </type> <institution> University of Cal-ifornia at Berkeley, </institution> <year> 1993. </year>
Reference: [18] <author> E.G. Coffman, A. Lenstra, and Z. Liu, </author> <title> Scheduling Theory and its Applications, </title> <publisher> Wiley, </publisher> <year> 1995. </year>
Reference: [19] <author> E. G. Coffman and et al., </author> <title> Computer and job-shop scheduling theory, </title> <publisher> Wiley, </publisher> <address> New York, NY, </address> <year> 1976. </year>
Reference: [20] <author> A. VanTilborg, </author> <title> Foundations of Real-Time Computing: Scheduling and Resource Management, </title> <publisher> Kluwer Publishers, </publisher> <year> 1991. </year>
Reference: [21] <author> J. A. Stankovic and et al., </author> <title> "Implications of classical scheduling results for real-time systems", </title> <journal> IEEE Computer, </journal> <note> To Appear 1995. </note>
Reference: [22] <author> D. Towsley, </author> <title> "Applications of sample path analysis techniques to communication networks", </title> <booktitle> in Proceedings of Fourth Conference on Data Communication Systems and their Performance, </booktitle> <address> Barcelona, Spain, </address> <month> June </month> <year> 1990. </year>
Reference: [23] <author> Jane W.S. Liu, Kwei-Jay Lin, Wei-Kuan Shih, Al-bert Chuang-Shi Yu, Chung Chung, Jen-Yao, and Wei Zhao, </author> <title> "Algorithms for scheduling imprecise computations", </title> <journal> IEEE Computer, </journal> <volume> vol. 24, no. 5, </volume> <pages> pp. 58-68, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: We show in section VI how our scheduling mechanism can easily be adapted to handle tasks with explicitly defined mandatory phases. As noted before, the IRIS model does not require explicit knowledge of processing times of tasks, whereas in the imprecise computation model <ref> [23] </ref>, [24], [25], tasks have known processing times. Note that the metric in IRIS of maximizing reward rate is analogous to the performance metric of minimizing error in the imprecise computation model.
Reference: [24] <author> Wei-Kuan Shih, J. Liu, and Chung Jen-Yao, </author> <title> "Algorithms for scheduling imprecise computations with timing constraints", </title> <journal> SIAM Journal on Computing, </journal> <volume> vol. 20, no. 3, </volume> <pages> pp. 537-552, </pages> <month> June </month> <year> 1991. </year> <month> 15 </month>
Reference-contexts: We show in section VI how our scheduling mechanism can easily be adapted to handle tasks with explicitly defined mandatory phases. As noted before, the IRIS model does not require explicit knowledge of processing times of tasks, whereas in the imprecise computation model [23], <ref> [24] </ref>, [25], tasks have known processing times. Note that the metric in IRIS of maximizing reward rate is analogous to the performance metric of minimizing error in the imprecise computation model.
Reference: [25] <author> Wei-Kuan Shih and J.W.S. Liu, </author> <title> "On-line scheduling of imprecise computations to minimize error", </title> <booktitle> in IEEE Real-Time Systems Symposium, </booktitle> <address> Los Alamitos, CA, </address> <month> Dec. </month> <year> 1992, </year> <note> IEEE. </note>
Reference-contexts: We show in section VI how our scheduling mechanism can easily be adapted to handle tasks with explicitly defined mandatory phases. As noted before, the IRIS model does not require explicit knowledge of processing times of tasks, whereas in the imprecise computation model [23], [24], <ref> [25] </ref>, tasks have known processing times. Note that the metric in IRIS of maximizing reward rate is analogous to the performance metric of minimizing error in the imprecise computation model. <p> Hence there is an additional performance metric, the probability of missing a task's deadline before it can receive its mandatory amount of service. While scheduling tasks in the imprecise computation model <ref> [25] </ref>, it is assumed that mandatory portions of tasks can always be given service before their deadlines. Further discussion of this is beyond the scope of this paper. VII. Conclusion In this paper we have presented the IRIS model, a new real-time task model.
Reference: [26] <author> B.G. Kim and Don Towsley, </author> <title> "Dynamic flow control protocols for packet-switching multiplexers serving real-time multipacket messages", </title> <journal> IEEE Transactions on Communications, COM-34, </journal> <volume> vol. 4, </volume> <pages> pp. 348-356, </pages> <month> Apr. </month> <year> 1986. </year>
Reference-contexts: The scheduling policy switches from primary versions of tasks to alternate versions when the total number of tasks in the system exceeds a threshold. Kim and Towsley <ref> [26] </ref> study this model in the context of real-time message transmissions, while Chong and Zhao [27] and Zhao, Vrbsky and Liu [28] analyze two-version scheduling disciplines for this model in uniprocessor and multiprocessor systems respectively.
Reference: [27] <author> Edwin K.P. Chong and Wei Zhao, </author> <title> "Performance evaluation of scheduling algorithms for imprecise computer systems", </title> <journal> Journal of Systems and Software, </journal> <volume> vol. 15, no. 3, </volume> <pages> pp. 261-277, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: The scheduling policy switches from primary versions of tasks to alternate versions when the total number of tasks in the system exceeds a threshold. Kim and Towsley [26] study this model in the context of real-time message transmissions, while Chong and Zhao <ref> [27] </ref> and Zhao, Vrbsky and Liu [28] analyze two-version scheduling disciplines for this model in uniprocessor and multiprocessor systems respectively. The optimal scheduling policy for such a uniprocessor system was shown to be of a threshold type in [29].
Reference: [28] <author> W. Zhao, S. Vrbsky, and J.W.S. Liu, </author> <title> "Performance of scheduling algorithms for multi-server imprecise systems", </title> <booktitle> in Proceedings of the 5th International Conference on Parallel and Distributed Computing and Systems, </booktitle> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: The scheduling policy switches from primary versions of tasks to alternate versions when the total number of tasks in the system exceeds a threshold. Kim and Towsley [26] study this model in the context of real-time message transmissions, while Chong and Zhao [27] and Zhao, Vrbsky and Liu <ref> [28] </ref> analyze two-version scheduling disciplines for this model in uniprocessor and multiprocessor systems respectively. The optimal scheduling policy for such a uniprocessor system was shown to be of a threshold type in [29].
Reference: [29] <author> S.A. Lippman, </author> <title> "Applying a new device in the optimization of exponential queueing systems", </title> <journal> Operations Research, </journal> <volume> vol. 23, no. 4, </volume> <pages> pp. 687-710, </pages> <year> 1975. </year>
Reference-contexts: The optimal scheduling policy for such a uniprocessor system was shown to be of a threshold type in <ref> [29] </ref>. Finally, we note that the framework for scheduling and planning of manufacturing systems which has been proposed by Gershwin [30], in which decisions and events in a production systems are grouped into various levels of hierarchy depending on their characteristic time-scales. Our two-level policies fit into Gershwin's scheduling framework.
Reference: [30] <author> S. B. Gershwin, </author> <title> "Hierarchical flow control: A framework for scheduling and planning discrete events in manufacturing systems", </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> vol. 77, no. 1, </volume> <pages> pp. 195-209, </pages> <month> Jan. </month> <year> 1989. </year>
Reference-contexts: The optimal scheduling policy for such a uniprocessor system was shown to be of a threshold type in [29]. Finally, we note that the framework for scheduling and planning of manufacturing systems which has been proposed by Gershwin <ref> [30] </ref>, in which decisions and events in a production systems are grouped into various levels of hierarchy depending on their characteristic time-scales. Our two-level policies fit into Gershwin's scheduling framework. However they do not correspond to any of the algorithms that he de 3 scribes.
Reference: [31] <author> K. M. Mjelde, </author> <title> Methods of the Allocation of Limited Resources, </title> <publisher> John Wiley and Sons, </publisher> <year> 1983. </year>
Reference-contexts: This is a special case of a general resource allocation problem in which the returns from an activity is a concave function of resources allocated to it, and the goal is to obtain an allocation of resources to activities such that the objective function is maxi mized. Mjelde <ref> [31] </ref> has discussed several properties of this problem.
Reference: [32] <author> D.G. Luenberger, </author> <title> Linear and Nonlinear Programming, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1984. </year>
Reference-contexts: Mjelde [31] has discussed several properties of this problem. The following Kuhn-Tucker conditions <ref> [32] </ref> are satis fied by any optimal solution to P . j denotes the Lagrange multiplier for task j in P . g i (x i ) = j ; 1 j i M; x i;j &gt; 0; (1) g i (x i ) j ; 1 j i M; x
Reference: [33] <author> Jayanta K. Dey, James F. Kurose, D. Towsley, C. M. Kr-ishna, and Mahesh Girkar, </author> <title> "Efficient on-line processor scheduling for a class of IRIS (Increasing Reward with Increasing Service) real-time tasks", </title> <booktitle> in Proceedings of the ACM Sigmetrics Conference on Measurement and Modeling of Computer Systems, </booktitle> <address> Santa Clara, California, </address> <month> May </month> <year> 1993, </year> <booktitle> ACM, </booktitle> <pages> pp. 217-228. </pages>
Reference-contexts: When tasks have exponential reward functions, the scheduling complexity reduces further to O (M log M ). Complete descriptions 6 of these algorithms can be found in <ref> [33] </ref>. A.3 The Lower-Level Policy The purpose of the lower-level algorithm is to actually schedule tasks using the service time allocation information computed by the top-level policy. In the absence of future arrivals, it executes every task for its allocated time.
Reference: [34] <author> C. L. Liu and J. W. Layland, </author> <title> "Scheduling algorithms for multiprogramming in a hard real-time environment", </title> <journal> Journal of ACM, </journal> <volume> vol. 20, no. 1, </volume> <pages> pp. 46-61, </pages> <month> Jan. </month> <year> 1973. </year>
Reference-contexts: The allocations of the top-level policy satisfy the first constraint of the optimization problem P . Therefore, for a static set of tasks, it is trivial to show that EDF is guaranteed to accord each task the service time allocated to it by the top-level policy <ref> [34] </ref>. FCFS, however, cannot provide that guarantee. Figure 3 shows an example where FCFS is unable to provide the top-level policy's allocation to every task.
Reference: [35] <author> S. Ross, </author> <title> Stochastic Processes, </title> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1983. </year>
Reference-contexts: The latter upper bound is tighter than the first. The average reward per task of any scheduling policy is defined as: E [R ] = k=1 k ]; K X k E [f k (A k=1 k ]); using Jensen's inequality <ref> [35] </ref>.
References-found: 35

