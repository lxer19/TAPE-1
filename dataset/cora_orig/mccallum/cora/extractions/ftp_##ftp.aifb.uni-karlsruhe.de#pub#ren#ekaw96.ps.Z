URL: ftp://ftp.aifb.uni-karlsruhe.de/pub/ren/ekaw96.ps.Z
Refering-URL: http://www.aifb.uni-karlsruhe.de/Staff/rpe.engl.html
Root-URL: 
Email: E-mail: [engels;perkuhn]@aifb.uni-karlsruhe.de  
Title: Describing and Integrating Competence Theories for Problem-Solving Components and Machine Learning algorithms  
Author: Robert Engels and Rainer Perkuhn 
Keyword: Knowledge Acquisition, Machine Learning Algorithms, Competence Theories, Knowledge Level Descriptions, Multi-Strategy Learning  
Web: http://www.aifb.uni-karlsruhe.de/WBS/index.engl.html  
Address: D-76128 Karlsruhe, Germany.  
Affiliation: Institute AIFB, University of Karlsruhe,  
Abstract: A topic in the field of knowledge acquisition is the reuse of components that are described at the knowledge level. Problems concern the description, indexing and retrieval of components. In our case there is the additional feature of integrating so-called automated building blocks in a knowledge level description. This paper describes what knowledge level descriptions of components for reuse should look like, and proposes a way to describe assumptions and requirements that are to be made explicit. In the paper an extension of the "normal" knowledge acquisition setting is made in the direction of machine learning components and their descrip tion and integration at the knowledge level.
Abstract-found: 1
Intro-found: 1
Reference: [ABD + 93] <author> A. Aamodt, B. Benus, C. Duursma, Chr. Tomlinson, R. Schrooten, and W. v.d. Velde. </author> <title> Task Features and their Use in CommonKADS. </title> <journal> Deliverable 1.5, </journal> <note> version 1.0, Consortium, </note> <year> 1993. </year>
Reference-contexts: In our case a description at the same level would be necessary in order for our tool to be able to select algorithms and integrate them with PSM-components. A few approaches that describe (the need for) task-features are known to us. In <ref> [ABD + 93] </ref> a more or less natural language description of features is given in the framework of the CommonKADS -approach [BvdV94]. These features are not formally described and (as far as we know) never used for describing the functionality of machine learning techniques.
Reference: [Abe95] <author> M. Aben. </author> <title> Formal Methods in Knowledge Engineering. </title> <type> PhD thesis, </type> <institution> University of Amsterdam, </institution> <year> 1995. </year>
Reference-contexts: These features are not formally described and (as far as we know) never used for describing the functionality of machine learning techniques. One of the formal oriented approaches is presented in <ref> [Abe95] </ref>. What Aben did for inference actions we provide on a higher level for tasks and problem-solving components. There is no real consensus about which features of tasks and ML-algorithms have to be described, although there are a few proposals that contain such listings of features ([KMG94], [vS95]).
Reference: [AFL + 93] <author> J. Angele, D. Fensel, D. Landes, S. Neubert, and R. Studer. </author> <title> Model based and Incremental Knowledge Engineering: The MIKE Approach. </title> <editor> In J. Cuena, editor, </editor> <booktitle> Knowledge Oriented Software Design, volume A-27, </booktitle> <pages> pages 139 - 168, </pages> <address> Amsterdam, </address> <year> 1993. </year> <title> IFIP Transactions, </title> <publisher> North Holland. </publisher>
Reference: [AFS96] <author> J. Angele, D. Fensel, and R. Studer. </author> <title> Domain and Task Modelling in MIKE. </title> <booktitle> In Proceedings of the IFIP WG8.1/13.2 Joint Working Conference on Domain Knowledge for Interactive System Design., </booktitle> <address> Geneva, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: Usually a PSM is used to describe the data- and control flow internal to a problem solving process. In many expert systems such an exhaustive description of a problem-solving process is satisfying. 1 Model-Based and Incremental Knowledge Engineering; for an overview of the MIKE-approach, see: ([AFL + 93], <ref> [AFS96] </ref>) 3 Integration of Machine-Learning techniques at the knowledge level However, there are cases in which we want to tie together components of our "conventional" knowledge level descriptions with ML-techniques in order to perform tasks that either are not suited for normal knowledge acquisition (such as the analysation of large databases,
Reference: [Ang93] <author> J. Angele. </author> <title> Operationalisierung des Modells der Expertise mit KARL. </title> <type> infix 53, </type> <institution> St. Augustin, </institution> <year> 1993. </year> <note> In German. </note>
Reference-contexts: The approach supports the step of knowledge elicitation, building a semi-formal structural model of problem-solving and transforming this semi-formal model into the so-called Model of Expertise expressed in a formal specification language KARL (cf. [Fen95], <ref> [Ang93] </ref>). This process is supported by the MIKE-tool (cf. [Neu94], [Neu93]). The final design and implementation step is supported by the design-model (cf. [Lan95], [LS95]) which integrates non-functional requirements in the model.
Reference: [AP94] <author> J. L. Arcos and E. </author> <title> Plaza. Integration of Learning into a knowledge model-ling framework. </title> <editor> In L. Steels, G. Schreiber, and W v.d. Velde, editors, </editor> <title> A Future for Knowledge Acquisition: </title> <booktitle> Proceedings of the 8th European Knowledge Acquisition Workshop, volume 867 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 355 - 373. </pages> <publisher> Springer Verlag, </publisher> <month> September </month> <year> 1994. </year>
Reference-contexts: In <ref> [AP94] </ref> the idea of integration of learning techniques for solving impasses in inference-processes is introduced. Differences between the approach of [AP94] and our approach are that we do not see impasses as the trigger for learning, we try to build up a task-decomposition instead, given the functionality-descriptions of several machine-learning techniques. <p> In <ref> [AP94] </ref> the idea of integration of learning techniques for solving impasses in inference-processes is introduced. Differences between the approach of [AP94] and our approach are that we do not see impasses as the trigger for learning, we try to build up a task-decomposition instead, given the functionality-descriptions of several machine-learning techniques.
Reference: [BFL + 94] <author> J. C. Bicarrequi, J. S. Fitzgerald, P. A. Lindsey, R. Moore, and B. Ritchie. </author> <title> Proof in VDM: A Practitioner's Guide. </title> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1994. </year>
Reference-contexts: It is argued that we need a knowledge level description as a specification of the system incorporating more knowledge of how to achieve the functionality of the system than software engineering specification languages like Z [Spi92] or VDM <ref> [BFL + 94] </ref> allow to formulate [Fen95]. In software engineering one wants to separate clearly what one wants to achieve from how to achieve this. To our mind this is a favo-urite starting point to think about reuse. The two kinds of specification are not mutually exclusive or in conflict.
Reference: [BvdV94] <author> J. Breuker and W. van de Velde. </author> <title> CommonKADS Library for Expertise Modelling. </title> <publisher> IOS Press, </publisher> <year> 1994. </year>
Reference-contexts: Also a formal way will be proposed in which one can describe the competence (functionality) of these components by their in- and output behaviour. As an example on which we want to clarify our points of view we take the assessment-model as defined in the CommonKADS -approach <ref> [BvdV94] </ref> and relate this to a knowledge level integration with a (classifying) ML-algorithm. The paper concludes with some related work and an evaluation of the approach. 2 MIKE The MIKE-approach is a methodology that supports the whole cycle of building and implementing expert-systems. <p> We assume that the knowledge engineer in the modeling process can describe the (overall) task in one sentence or otherwise he can put it in a sequence of sentences which corresponds to a sequence of (sub-)tasks. In the latter case one can think about a suite (cf. <ref> [BvdV94] </ref>) and one can iterate the elicitation process over the subtasks; in the following we want to concentrate on the former case for reasons of simplification. We reduce Fillmore's idea to a schematic description of the task which has to be instantiated during knowledge acquisition. <p> Let us assume that an expert formulated requirements according to which the knowledge engineer classified his task as a "to assess" task. The assessment-task (see figure 4) is used as defined in <ref> [BvdV94] </ref>. [VL94] define the assessment-task as: Definition: Assessment is a problem type (task) in which a case description (input) is mapped onto a decision (output) according to a system model. <p> A few approaches that describe (the need for) task-features are known to us. In [ABD + 93] a more or less natural language description of features is given in the framework of the CommonKADS -approach <ref> [BvdV94] </ref>. These features are not formally described and (as far as we know) never used for describing the functionality of machine learning techniques. One of the formal oriented approaches is presented in [Abe95]. What Aben did for inference actions we provide on a higher level for tasks and problem-solving components.
Reference: [Cha86] <author> B. Chandrasekaran. </author> <title> Generic tasks in knowledge-based reasoning: High level building blocks for expert system design. </title> <journal> IEEE Expert, </journal> <volume> 1, </volume> <year> 1986. </year> <title> 7 One can think of situations where statistics can do less due to data-characteristics, or situations where more knowledge is in the expert as in their databases(!) </title>
Reference-contexts: 1 Introduction In the field of Knowledge Acquisition many approaches deal with a separation of several levels on which to represent knowledge (i.e KADS [WSB92], Components of Expertise [Ste90], Role-limiting methods [McD88], Generalized Directive Models [vH95] and Generic Tasks <ref> [Cha86, Cha88] </ref>). Most approaches make a distinction between knowledge at the domain layer (domain specific knowledge) and problem-solving knowledge represented at the generic level.
Reference: [Cha88] <author> B. Chandrasekaran. </author> <title> Generic Tasks as building blocks for knowledge-based systems: The diagnosis and routine design examples. </title> <journal> The Knowledge Engineering Review, </journal> <volume> 3(3) </volume> <pages> 183-210, </pages> <year> 1988. </year>
Reference-contexts: 1 Introduction In the field of Knowledge Acquisition many approaches deal with a separation of several levels on which to represent knowledge (i.e KADS [WSB92], Components of Expertise [Ste90], Role-limiting methods [McD88], Generalized Directive Models [vH95] and Generic Tasks <ref> [Cha86, Cha88] </ref>). Most approaches make a distinction between knowledge at the domain layer (domain specific knowledge) and problem-solving knowledge represented at the generic level.
Reference: [Con93] <author> MLT Consortium. </author> <title> Final public report. </title> <type> Technical report, </type> <year> 1993. </year> <title> Esprit II Project 2154. </title>
Reference-contexts: The research mentioned is directed towards the formal definition of goals, where [PG96] describe what we see as a problem description, rather than goals as such. Finally there is the work of the MLT consortium <ref> [Con93] </ref> where multiple learning techniques were integrated. Especially the work on Consultant [CSG + 92] is to be mentioned here. This work uses a kind of ML-algorithm description to select algorithms, but does not do that in an explicit manner.
Reference: [CSG + 92] <author> S. Craw, D. Sleeman, N. Granger, M. Rissakis, and S. Sharma. </author> <title> CONSULTANT: Providing Advice for the Machine Learning Toolbox. In M.A. </title> <editor> Bramer and R.W. Milne, editors, </editor> <booktitle> Research and Development in Expert Systems, </booktitle> <pages> pages 5-23, </pages> <year> 1992. </year>
Reference-contexts: The research mentioned is directed towards the formal definition of goals, where [PG96] describe what we see as a problem description, rather than goals as such. Finally there is the work of the MLT consortium [Con93] where multiple learning techniques were integrated. Especially the work on Consultant <ref> [CSG + 92] </ref> is to be mentioned here. This work uses a kind of ML-algorithm description to select algorithms, but does not do that in an explicit manner.
Reference: [Fen95] <author> D. Fensel. </author> <title> The Knowledge and Representation Language KARL. </title> <publisher> Kluwer, </publisher> <address> Boston, </address> <year> 1995. </year>
Reference-contexts: The approach supports the step of knowledge elicitation, building a semi-formal structural model of problem-solving and transforming this semi-formal model into the so-called Model of Expertise expressed in a formal specification language KARL (cf. <ref> [Fen95] </ref>, [Ang93]). This process is supported by the MIKE-tool (cf. [Neu94], [Neu93]). The final design and implementation step is supported by the design-model (cf. [Lan95], [LS95]) which integrates non-functional requirements in the model. <p> It is argued that we need a knowledge level description as a specification of the system incorporating more knowledge of how to achieve the functionality of the system than software engineering specification languages like Z [Spi92] or VDM [BFL + 94] allow to formulate <ref> [Fen95] </ref>. In software engineering one wants to separate clearly what one wants to achieve from how to achieve this. To our mind this is a favo-urite starting point to think about reuse. The two kinds of specification are not mutually exclusive or in conflict.
Reference: [Fil68] <author> Ch. J. Fillmore. </author> <title> The case for case. </title> <editor> In E. Bach and R. T. Harms, editors, </editor> <booktitle> Universals in Linguistic Theory, </booktitle> <address> New York, 1968. </address> <publisher> Holt, Rinehart & Winston. </publisher>
Reference: [Fil77] <author> Ch. J. Fillmore. </author> <title> The case for case reopened. </title> <editor> In P. Cole and J.L. Morgan, editors, </editor> <booktitle> Grammatical relations, </booktitle> <pages> pages 59 - 82, </pages> <address> New York, </address> <year> 1977. </year>
Reference-contexts: We augment the nodes in the taxonomy with the semantic roles which have to (or can be) filled according to the spirit of Fillmore's Case Grammar ([Fil68], <ref> [Fil77] </ref>).
Reference: [FS96] <author> D. Fensel and R. Straatman. </author> <title> Problem-Solving Methods: Making Assumptions for Efficiency Reasons. </title> <booktitle> In Proceedings of the 9th European Knowledge Acquisition Workshop, </booktitle> <address> Nottingham, England, Berlin, </address> <month> May, 14-17 </month> <year> 1996. </year> <booktitle> Lecture Notes in Artificial Intelligence, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Some researchers argue that implicitly such kind of requirements are implemented nevertheless and argue therefore to make them explicit for PSM's as well ([FSvH96], <ref> [FS96] </ref>).
Reference: [FSvH96] <author> D. Fensel, R. Straatman, and F. van Harmelen. </author> <title> The Mincer Methaphor for Problem-Solving Methods: Making Assumptions for Reasons of Efficiency. </title> <editor> In Chr. Pierret-Golbreich, E. Motta, D. Fensel, and M. Willems, editors, </editor> <booktitle> Proceedings of the Knowledge Engineering-Methods & Languages Workshop (KEML-95), </booktitle> <address> Paris, </address> <month> January 15-16 </month> <year> 1996. </year>
Reference: [KMG94] <author> Y. Kodratoff, V. Moustakis, and N. Graner. </author> <title> Can Machine Learning solve my problem? Applied Artificial Intelligence, </title> <booktitle> 8 </booktitle> <pages> 1-31, </pages> <year> 1994. </year>
Reference: [Lan95] <author> D. Landes. </author> <title> Die Entwurfsphase in MIKE (The Design Stage in MIKE). </title> <type> infix 84, </type> <institution> St. Augustin, </institution> <year> 1995. </year> <note> In German. </note>
Reference-contexts: This process is supported by the MIKE-tool (cf. [Neu94], [Neu93]). The final design and implementation step is supported by the design-model (cf. <ref> [Lan95] </ref>, [LS95]) which integrates non-functional requirements in the model. In the context of this paper it is not relevant to describe the whole methodology, therefore we restrict ourselves to the part that will return in the discussion later on.
Reference: [LS95] <author> D. Landes and R. Studer. </author> <title> The Treatment of Non-Functional Requirements in MIKE. </title> <editor> In W. Schafer and P. Botella, editors, </editor> <booktitle> Proceedings of the 5th European Software Engineering Conference ESEC '95, </booktitle> <address> Sitges, Spain, Sep-tember 25-28 1995. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin. </address> <note> Lecture Notes in Computer Science (989). </note>
Reference-contexts: This process is supported by the MIKE-tool (cf. [Neu94], [Neu93]). The final design and implementation step is supported by the design-model (cf. [Lan95], <ref> [LS95] </ref>) which integrates non-functional requirements in the model. In the context of this paper it is not relevant to describe the whole methodology, therefore we restrict ourselves to the part that will return in the discussion later on.
Reference: [Mar88] <author> S. Marcus. </author> <title> Automating Knowledge Acquisition for Expert Systems. </title> <publisher> Kluwer, </publisher> <address> Boston, </address> <year> 1988. </year>
Reference: [McD88] <author> J. McDermott. </author> <title> Preliminary Steps towards a Taxonomy of Problem-Solving Methods. </title> <booktitle> In: </booktitle> [?], <year> 1988. </year>
Reference-contexts: 1 Introduction In the field of Knowledge Acquisition many approaches deal with a separation of several levels on which to represent knowledge (i.e KADS [WSB92], Components of Expertise [Ste90], Role-limiting methods <ref> [McD88] </ref>, Generalized Directive Models [vH95] and Generic Tasks [Cha86, Cha88]). Most approaches make a distinction between knowledge at the domain layer (domain specific knowledge) and problem-solving knowledge represented at the generic level.
Reference: [Neu93] <author> S. Neubert. </author> <title> Model construction in MIKE (Model-Based and Incremental Knowledge Engineering). </title> <booktitle> In Current Trends in Knowledge Acquisition, 7th European Knowledge Acquisition Workshop, </booktitle> <pages> pages 200-219, </pages> <address> Berlin, Sep-tember 1993. Toulouse, France, </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: The approach supports the step of knowledge elicitation, building a semi-formal structural model of problem-solving and transforming this semi-formal model into the so-called Model of Expertise expressed in a formal specification language KARL (cf. [Fen95], [Ang93]). This process is supported by the MIKE-tool (cf. [Neu94], <ref> [Neu93] </ref>). The final design and implementation step is supported by the design-model (cf. [Lan95], [LS95]) which integrates non-functional requirements in the model.
Reference: [Neu94] <author> S. Neubert. </author> <title> Modellkonstruktion in MIKE; Methoden und Werkzeuge. </title> <type> infix 60, </type> <institution> St. Augustin, </institution> <year> 1994. </year>
Reference-contexts: The approach supports the step of knowledge elicitation, building a semi-formal structural model of problem-solving and transforming this semi-formal model into the so-called Model of Expertise expressed in a formal specification language KARL (cf. [Fen95], [Ang93]). This process is supported by the MIKE-tool (cf. <ref> [Neu94] </ref>, [Neu93]). The final design and implementation step is supported by the design-model (cf. [Lan95], [LS95]) which integrates non-functional requirements in the model.
Reference: [PG96] <author> Chr. Pierret-Goldbreich. </author> <title> Modular and Reusable Specifications in Knowledge Engineering: Formal Specification of Goals and their Development. </title> <editor> In Chr. Pierret-Goldbreich, D. Fensel, E. Motta, and Mark Willems, editors, </editor> <booktitle> Proceedings of the 6th Workshop on Knowledge Engineering Methods and Languages, </booktitle> <address> Paris, januari 15-16, </address> <year> 1996, 1996. </year>
Reference-contexts: These listings are not very detailed and not stabilized at the moment. With regard to the representation of problem descriptions that initiate the generation of a task-decomposition, there is to mention the approach of <ref> [PG96] </ref>. The research mentioned is directed towards the formal definition of goals, where [PG96] describe what we see as a problem description, rather than goals as such. Finally there is the work of the MLT consortium [Con93] where multiple learning techniques were integrated. <p> These listings are not very detailed and not stabilized at the moment. With regard to the representation of problem descriptions that initiate the generation of a task-decomposition, there is to mention the approach of <ref> [PG96] </ref>. The research mentioned is directed towards the formal definition of goals, where [PG96] describe what we see as a problem description, rather than goals as such. Finally there is the work of the MLT consortium [Con93] where multiple learning techniques were integrated. Especially the work on Consultant [CSG + 92] is to be mentioned here.
Reference: [Qui86] <author> J. R. Quinlan. </author> <title> Induction of Decision Trees. </title> <journal> Machine Learning, </journal> <volume> 1:81 - 106, </volume> <year> 1986. </year>
Reference-contexts: This pre-condition is not fulfilled and may trigger two possibilities: either to elicitate this knowledge by hand, or to look for a component with the respective capability. Our library also contains ML algorithms. The description of the functionality of ID3 <ref> [Qui86] </ref> looks like the following.
Reference: [RA94] <author> C. Rouveirol and P. Albert. </author> <title> Knowledge level model of a configurable Learning System. </title> <editor> In L. Steel, G. Schreiber, and W.v.d. Velde, editors, </editor> <title> A future for Knowledge Acquisition, </title> <booktitle> 8th European Knowledge Acquisition Workshop, </booktitle> <address> Belgium, </address> <pages> pages 374 - 393, </pages> <year> 1994. </year> <booktitle> Lecture Notes in Artificial Intelligence. </booktitle>
Reference-contexts: They show these assumptions for a few problem solving components used to model the VT task and also stress the need for making explicit the assumptions and commitments that underly problem-solving methods. Another approach we want to relate to is the approach of <ref> [RA94] </ref>. This work is performed in the same philosophy as ours. However, where we want to provide a framework for integrating ML-algorithm "building blocks" with the normal PSM-building blocks settings the approach of [RA94] concentrates upon the description of ML-algorithms themselves. <p> Another approach we want to relate to is the approach of <ref> [RA94] </ref>. This work is performed in the same philosophy as ours. However, where we want to provide a framework for integrating ML-algorithm "building blocks" with the normal PSM-building blocks settings the approach of [RA94] concentrates upon the description of ML-algorithms themselves. The goal we have in mind in our framework is to describe machine learning algorithms on a high-level abstraction so we can integrate them with the task-decompositions we want to generate for complex tasks.
Reference: [SG95] <author> B. Swartout and Y. Gill. </author> <title> EXPECT: Explicit Representation for Flexible Acquisition. </title> <editor> In B.R. Gaines and M. Musen, editors, </editor> <booktitle> Proceedings of the 9th Banff Knowledge Acquisition for Knowledge-Based Systems Workshop, </booktitle> <volume> volume 2, </volume> <month> February 26- March 3 </month> <year> 1995. </year>
Reference-contexts: We assume that tasks can be described best with verbs ([BvdV94], <ref> [SG95] </ref> 4 ) and to put emphasis on this aspect we use to-do-forms. We augment the nodes in the taxonomy with the semantic roles which have to (or can be) filled according to the spirit of Fillmore's Case Grammar ([Fil68], [Fil77]). <p> semantic roles some of which are obligatory, others are facultative, and which can be used to describe what constituents a verb demands/allows and how the semantics of a sentence can be composed out of the constituents according to the role they play in the whole sentence 5 . 4 In <ref> [SG95] </ref> a similar framework for describing goals is used, however, the explicit notion of pre- and post-conditions is not taken into consideration there. 5 Example: The doctor diagnoses the patient's disease. (Fillmore proposes a notation independent from syntax which makes clear the semantic role a constituent plays in the semantics of
Reference: [Slo94] <author> A. Slodzian. </author> <title> Configuring decision tree learning algorithms with KresT. </title> <booktitle> In Workshop Proceedings of the Workshop on Knowledge level models of machine learning; ECML '94, </booktitle> <year> 1994. </year> <note> Available from: "ftp://arti.vub.ac.be/pub/krest/appkits/learnkit/learnkit.ps.Z". </note>
Reference-contexts: The same holds for the approach of <ref> [Slo94] </ref> (although highly informal) where algorithms are also described on a very low level of detail and lack a formal description of their pre and postconditions. An approach that has a similar functionality, but deals with KA-algorithms instead, is the approach of Generalized Directive Models ([vH95]).
Reference: [Spi92] <author> J. M. Spivey. </author> <title> The Z Notation: A Reference Manual. </title> <publisher> Prentice Hall, </publisher> <address> New Jersey, 2nd edition, </address> <year> 1992. </year>
Reference-contexts: This notion is quite different from specification in terms of software engineering. It is argued that we need a knowledge level description as a specification of the system incorporating more knowledge of how to achieve the functionality of the system than software engineering specification languages like Z <ref> [Spi92] </ref> or VDM [BFL + 94] allow to formulate [Fen95]. In software engineering one wants to separate clearly what one wants to achieve from how to achieve this. To our mind this is a favo-urite starting point to think about reuse. <p> Our notation is deeply influenced by the specification notation Z <ref> [Spi92] </ref>. We leave apart all the special features of Z concerning schemas; we take over the part of the grammar to formulate boolean expressions and expressions on sets.
Reference: [Ste90] <author> L. Steels. </author> <title> Components of Expertise. </title> <journal> AI Magazine, </journal> <year> 1990. </year>
Reference-contexts: 1 Introduction In the field of Knowledge Acquisition many approaches deal with a separation of several levels on which to represent knowledge (i.e KADS [WSB92], Components of Expertise <ref> [Ste90] </ref>, Role-limiting methods [McD88], Generalized Directive Models [vH95] and Generic Tasks [Cha86, Cha88]). Most approaches make a distinction between knowledge at the domain layer (domain specific knowledge) and problem-solving knowledge represented at the generic level.
Reference: [vH95] <author> G. van Heijst. </author> <title> The Role of Ontologies in Knowledge Engineering. </title> <type> PhD thesis, </type> <institution> University of Amsterdam, </institution> <year> 1995. </year>
Reference-contexts: 1 Introduction In the field of Knowledge Acquisition many approaches deal with a separation of several levels on which to represent knowledge (i.e KADS [WSB92], Components of Expertise [Ste90], Role-limiting methods [McD88], Generalized Directive Models <ref> [vH95] </ref> and Generic Tasks [Cha86, Cha88]). Most approaches make a distinction between knowledge at the domain layer (domain specific knowledge) and problem-solving knowledge represented at the generic level.
Reference: [VL94] <author> A. Valente and Ch. Lockenhoff. </author> <title> Assessment. </title> <booktitle> In [BvdV94], </booktitle> <pages> pages 155 - 174. </pages> <address> IOS-Press, </address> <year> 1994. </year>
Reference-contexts: Let us assume that an expert formulated requirements according to which the knowledge engineer classified his task as a "to assess" task. The assessment-task (see figure 4) is used as defined in [BvdV94]. <ref> [VL94] </ref> define the assessment-task as: Definition: Assessment is a problem type (task) in which a case description (input) is mapped onto a decision (output) according to a system model.
Reference: [vS95] <author> M. van Someren. </author> <type> PhD thesis, </type> <institution> University of Amsterdam, </institution> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: What Aben did for inference actions we provide on a higher level for tasks and problem-solving components. There is no real consensus about which features of tasks and ML-algorithms have to be described, although there are a few proposals that contain such listings of features ([KMG94], <ref> [vS95] </ref>). These listings are not very detailed and not stabilized at the moment. With regard to the representation of problem descriptions that initiate the generation of a task-decomposition, there is to mention the approach of [PG96].
Reference: [WJ95] <author> B.J. Wielinga and J.M. </author> <title> A Formal Analysis of Parametric Design Problem Solving. </title> <editor> In B.R. Gaines and M. Musen, editors, </editor> <booktitle> Proceedings of the 9th Banff Knowledge Acquisition for Knowleddge Based Systems Workshop, </booktitle> <volume> volume 2, </volume> <pages> pages 37/1-37/15, </pages> <address> Banff, </address> <year> 1995. </year>
Reference-contexts: We concentrate on the generic parts of such PSM's. Although the functionality of these PSM's (i.e. describing what a certain PSM can do) is an important topic for describing PSM's, few approaches make this competence explicit <ref> [WJ95] </ref>. The main focus of this paper will be concerned with describing the competence of the building blocks. Describing these re-usable components on the knowledge level has the advantage that one can define PSM's and Machine Learning algorithms at the same level of abstraction. <p> In our framework the learning is not meant to "bridge" impasses, but to use knowledge level descriptions to provide support for the use of machine learning techniques when decomposing complex tasks. In <ref> [WJ95] </ref> an analysis of the underlying ontological commitments and assumptions is made. They show these assumptions for a few problem solving components used to model the VT task and also stress the need for making explicit the assumptions and commitments that underly problem-solving methods.
Reference: [WSB92] <author> B.J. Wielinga, A.T. Schreiber, and J.A. Breuker. KADS: </author> <title> A modelling approach to knowledge engineering. Special Issue "The KADS approach to knowledge engineering". </title> <journal> Knowledge Acquisition, </journal> <volume> 4(1) </volume> <pages> 5-53, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction In the field of Knowledge Acquisition many approaches deal with a separation of several levels on which to represent knowledge (i.e KADS <ref> [WSB92] </ref>, Components of Expertise [Ste90], Role-limiting methods [McD88], Generalized Directive Models [vH95] and Generic Tasks [Cha86, Cha88]). Most approaches make a distinction between knowledge at the domain layer (domain specific knowledge) and problem-solving knowledge represented at the generic level.
References-found: 36

