URL: ftp://dimacs.rutgers.edu/pub/dimacs/TechnicalReports/TechReports/1995/95-01.ps.gz
Refering-URL: http://dimacs.rutgers.edu/TechnicalReports/1995.html
Root-URL: http://www.cs.rutgers.edu
Email: e-mail: rjain@thumper.bellcore.com  
Phone: 07960.  
Title: Analysis of approximate algorithms for constrained and unconstrained edge-coloring of bipartite graphs  
Author: by Ravi Jain ;; John Werth 
Address: South St, Morristown, NJ  
Note: 2 Part of this research was performed while the author was at the University of Texas and supported by the IBM Corporation through grant 61653 and by the State of Texas through TATP Project 003658-237. 3 Address correspondence to Ravi Jain, Applied Research, Bellcore, 445  DIMACS is a cooperative project of Rutgers University, Princeton University, AT&T Bell Laboratories and Bellcore. DIMACS is an NSF Science and Technology Center, funded under contract STC-91-19999; and also receives support from the New Jersey Commission on Science and Technology.  
Affiliation: Applied Research Bellcore  Dept of Computer Sciences Univ. of Texas at Austin  
Abstract: DIMACS Technical Report 95-01 January 1995 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Bar-Noy, R. Motwani, and J. Naor. </author> <title> The greedy algorithm is optimal for on-line edge coloring. </title> <journal> Inf. Proc. Lett., </journal> <pages> pages 251-253, </pages> <month> Dec. </month> <year> 1992. </year>
Reference-contexts: We analyze the worst-case behavior of several greedy approximation algorithms for edge-coloring bipartite graphs. Experimental studies have shown that these algorithms can generate minimum or near-minimum edge colorings in much less execution time than exact algorithms [14, 12]. However, previous studies <ref> [14, 1] </ref> do not provide tight theoretical bounds on the worst-case behavior of these algorithms. <p> In [13] we have also considered a greedy algorithm which examines the list of vertices. 3 The unconstrained edge-coloring problem In this section we derive bounds on the behavior of the greedy algorithm for the unconstrained case, i.e., k min (jAj; jBj). Lemma 3.1 <ref> [10, 1] </ref> For all greedy edge-coloring algorithms A where the edge-coloring is unconstrained, i.e., k min (jAj; jBj), 8 ; B (A; ) 2 1. Lemma 3.1 implies that there are O () iterations of the while loop. <p> Note that Lemma 3.1 also implies, for instance, that 8 ; B (FCFS; ) 2 1 and 8 ; B (HDF; ) 2 1, but does not imply that these bounds are tight. Bar-Noy et al <ref> [1] </ref> have shown that 8 , B (FCFS; ) = 2 1. <p> The operator hi has precedence over +, which has precedence over ; and []. 1. F 0; consists of a single vertex, S. 2. H 1; = R 1 hC 1 hF 0; <ref> [ 1] </ref>i 4. For 1 &lt; i &lt; , H i; = R i hC i hF i1; [ 1]ii Def. A vertex is critical if it has maximal degree. Observe that for every tree H i; , the child of the root, C i , is critical. <p> F 0; consists of a single vertex, S. 2. H 1; = R 1 hC 1 hF 0; <ref> [ 1] </ref>i 4. For 1 &lt; i &lt; , H i; = R i hC i hF i1; [ 1]ii Def. A vertex is critical if it has maximal degree. Observe that for every tree H i; , the child of the root, C i , is critical. <p> By induction over i. base. i = 1. For F 1; = H 1; = R 1 hC 1 hS <ref> [ 1] </ref>ii, the choice of coloring edge (R 1 ; C 1 ) with color 1 suffices. hypothesis. <p> A simple calculation shows that N () = O ( ). In contrast, showing that B (FCFS; ) = 2 1 involves constructing graphs for which the number of vertices is O (4 ) <ref> [1] </ref>. This observation may support the intuition that the approximation algorithms which are greedy but not arbitrary in their examination of vertices and edges are likely to provide minimum or near-minimum colorings for a larger range of graphs than the arbitrary greedy algorithm.
Reference: [2] <author> Claude Berge. </author> <title> Graphs. </title> <publisher> North-Holland, </publisher> <year> 1985. </year>
Reference-contexts: For a bipartite graph of degree , a minimum edge-coloring requires colors <ref> [2] </ref> and can be obtained in polynomial time [6, 7, 8, 4]. Scheduling applications, such as the scheduling of parallel I/O operations, motivate the development of faster algorithms for approximate edge-coloring of bipartite graphs [9, 14, 10].
Reference: [3] <author> G. Bongiovanni, D. Coppersmith, and C. K. Wong. </author> <title> An optimum time slot assignment algorithm for an SS/TDMA system with variable number of transponders. </title> <journal> IEEE Trans. Comm., </journal> <volume> 29(5) </volume> <pages> 721-726, </pages> <month> May </month> <year> 1981. </year>
Reference-contexts: Clearly, a minimum constrained edge-coloring requires max (; dm=ke) colors, where m is the number of edges. Bongiovanni et al <ref> [3] </ref> presented an O (m 2 n + mn 2 ) time algorithm for minimum constrained edge-coloring of bipartite graphs, where n is the number of vertices. Algorithms taking time O (mn 0:5 log n) and O ((m + n)n log m)) have subsequently been developed [14, 10, 11].
Reference: [4] <author> R. Cole and J. Hopcroft. </author> <title> On edge coloring bipartite graphs. </title> <journal> SIAM J. Comput., </journal> <volume> 11(3) </volume> <pages> 540-546, </pages> <year> 1982. </year>
Reference-contexts: For a bipartite graph of degree , a minimum edge-coloring requires colors [2] and can be obtained in polynomial time <ref> [6, 7, 8, 4] </ref>. Scheduling applications, such as the scheduling of parallel I/O operations, motivate the development of faster algorithms for approximate edge-coloring of bipartite graphs [9, 14, 10]. We analyze the worst-case behavior of several greedy approximation algorithms for edge-coloring bipartite graphs.
Reference: [5] <author> Dannie Durand, Ravi Jain, and David Tseytlin. </author> <title> Distributed scheduling algorithms to improve the performance of parallel data transfers. </title> <type> Technical Report 94-38, </type> <institution> DIMACS, </institution> <month> July </month> <year> 1994. </year> <month> - 12 </month> - 
Reference-contexts: We are also investigating the problem of edge-coloring the graphs given that certain edges must receive the same color, and of developing distributed edge-coloring algorithms <ref> [5] </ref>. Acknowledgements. We thank Bill Aiello of Bellcore as well as an anonymous referee for helpful comments.
Reference: [6] <author> H. Gabow. </author> <title> Using euler partitions to edge color bipartite multigraphs. </title> <journal> Intl. J. Computer and Inf. Sci., </journal> <volume> 5 </volume> <pages> 345-355, </pages> <year> 1976. </year>
Reference-contexts: For a bipartite graph of degree , a minimum edge-coloring requires colors [2] and can be obtained in polynomial time <ref> [6, 7, 8, 4] </ref>. Scheduling applications, such as the scheduling of parallel I/O operations, motivate the development of faster algorithms for approximate edge-coloring of bipartite graphs [9, 14, 10]. We analyze the worst-case behavior of several greedy approximation algorithms for edge-coloring bipartite graphs.
Reference: [7] <author> H. Gabow and O. Kariv. </author> <title> Algorithms for edge coloring bipartite multigraphs. </title> <booktitle> ACM Symp. Th. of Comp., </booktitle> <pages> pages 184-192, </pages> <year> 1978. </year>
Reference-contexts: For a bipartite graph of degree , a minimum edge-coloring requires colors [2] and can be obtained in polynomial time <ref> [6, 7, 8, 4] </ref>. Scheduling applications, such as the scheduling of parallel I/O operations, motivate the development of faster algorithms for approximate edge-coloring of bipartite graphs [9, 14, 10]. We analyze the worst-case behavior of several greedy approximation algorithms for edge-coloring bipartite graphs.
Reference: [8] <author> H. Gabow and O. Kariv. </author> <title> Algorithms for edge coloring bipartite graphs and multigraphs. </title> <journal> SIAM J. Comput., </journal> <volume> 11(1) </volume> <pages> 117-129, </pages> <year> 1982. </year>
Reference-contexts: For a bipartite graph of degree , a minimum edge-coloring requires colors [2] and can be obtained in polynomial time <ref> [6, 7, 8, 4] </ref>. Scheduling applications, such as the scheduling of parallel I/O operations, motivate the development of faster algorithms for approximate edge-coloring of bipartite graphs [9, 14, 10]. We analyze the worst-case behavior of several greedy approximation algorithms for edge-coloring bipartite graphs.
Reference: [9] <author> D. S. Hochbaum, T. Nishizeki, and D. B. Shmoys. </author> <title> A better than "best possible" algorithm to edge color multigraphs. </title> <journal> SIAM J. Comput., </journal> <volume> 7 </volume> <pages> 79-104, </pages> <year> 1986. </year>
Reference-contexts: For a bipartite graph of degree , a minimum edge-coloring requires colors [2] and can be obtained in polynomial time [6, 7, 8, 4]. Scheduling applications, such as the scheduling of parallel I/O operations, motivate the development of faster algorithms for approximate edge-coloring of bipartite graphs <ref> [9, 14, 10] </ref>. We analyze the worst-case behavior of several greedy approximation algorithms for edge-coloring bipartite graphs. Experimental studies have shown that these algorithms can generate minimum or near-minimum edge colorings in much less execution time than exact algorithms [14, 12].
Reference: [10] <author> Ravi Jain. </author> <title> Scheduling data transfers in parallel computers and communications systems. </title> <type> PhD thesis, </type> <institution> Univ. Texas at Austin, Dept. of Comp. Sci., </institution> <year> 1992. </year> <note> Available as Tech. Rept. TR 93-03. </note>
Reference-contexts: 1 Introduction Many applications can be modeled as edge-colorings of bipartite graphs, such as the scheduling of data transfers in parallel computers and communications switches <ref> [10] </ref>; vertices represent communicating entities, edges represent the data transfers, and edges with the same color represent data transfers that can occur in parallel. For a bipartite graph of degree , a minimum edge-coloring requires colors [2] and can be obtained in polynomial time [6, 7, 8, 4]. <p> For a bipartite graph of degree , a minimum edge-coloring requires colors [2] and can be obtained in polynomial time [6, 7, 8, 4]. Scheduling applications, such as the scheduling of parallel I/O operations, motivate the development of faster algorithms for approximate edge-coloring of bipartite graphs <ref> [9, 14, 10] </ref>. We analyze the worst-case behavior of several greedy approximation algorithms for edge-coloring bipartite graphs. Experimental studies have shown that these algorithms can generate minimum or near-minimum edge colorings in much less execution time than exact algorithms [14, 12]. <p> This constraint arises frequently in data transfer scheduling applications as a - 2 - limitation in the capacity of the channel used for the data transfers <ref> [10] </ref>. For the constrained edge-coloring problem we consider the worst-case behavior of two approximation algorithms also, presenting bounds on the number of colors used, and the algorithms' time complexities. <p> In [13] we have also considered a greedy algorithm which examines the list of vertices. 3 The unconstrained edge-coloring problem In this section we derive bounds on the behavior of the greedy algorithm for the unconstrained case, i.e., k min (jAj; jBj). Lemma 3.1 <ref> [10, 1] </ref> For all greedy edge-coloring algorithms A where the edge-coloring is unconstrained, i.e., k min (jAj; jBj), 8 ; B (A; ) 2 1. Lemma 3.1 implies that there are O () iterations of the while loop. <p> Bongiovanni et al [3] presented an O (m 2 n + mn 2 ) time algorithm for minimum constrained edge-coloring of bipartite graphs, where n is the number of vertices. Algorithms taking time O (mn 0:5 log n) and O ((m + n)n log m)) have subsequently been developed <ref> [14, 10, 11] </ref>. The approximation algorithm Modified-HDF (MHDF) for edge-coloring bipartite graphs when a color may be used to color at most k &lt; n edges consists of invoking the greedy algorithm for HDF with input k where 1 k &lt; min (jAj; jBj).
Reference: [11] <author> Ravi Jain, Kiran Somalwar, John Werth, and J. C. Browne. </author> <title> Scheduling parallel I/O operations in multiple-bus systems. </title> <editor> J. Par. and Distrib. </editor> <booktitle> Comp., </booktitle> <month> Dec. </month> <year> 1992. </year> <title> Special Issue on Scheduling and Load Balancing. </title>
Reference-contexts: Bongiovanni et al [3] presented an O (m 2 n + mn 2 ) time algorithm for minimum constrained edge-coloring of bipartite graphs, where n is the number of vertices. Algorithms taking time O (mn 0:5 log n) and O ((m + n)n log m)) have subsequently been developed <ref> [14, 10, 11] </ref>. The approximation algorithm Modified-HDF (MHDF) for edge-coloring bipartite graphs when a color may be used to color at most k &lt; n edges consists of invoking the greedy algorithm for HDF with input k where 1 k &lt; min (jAj; jBj).
Reference: [12] <author> Ravi Jain, Kiran Somalwar, John Werth, and J. C. Browne. </author> <title> Scheduling parallel I/O operations. </title> <booktitle> In Proc. Workshop on I/O in Par. Comp. Sys., </booktitle> <month> Apr. </month> <year> 1993. </year>
Reference-contexts: We analyze the worst-case behavior of several greedy approximation algorithms for edge-coloring bipartite graphs. Experimental studies have shown that these algorithms can generate minimum or near-minimum edge colorings in much less execution time than exact algorithms <ref> [14, 12] </ref>. However, previous studies [14, 1] do not provide tight theoretical bounds on the worst-case behavior of these algorithms. <p> Left to the reader. We have also found experimentally that HDF and HCDF can perform substantially better than FCFS when presented with graphs generated pseudo-randomly <ref> [12] </ref>. Further, in our experiments we found that in no case do they perform any worse; in Theorem 3.1 we show a theoretical justification for this.
Reference: [13] <author> Ravi Jain, Kiran Somalwar, John Werth, and J. C. Browne. </author> <title> Heuristics for scheduling parallel I/O operations. </title> <note> 1994. Submitted for publication. </note>
Reference-contexts: Ties between edges are broken arbitrarily. 3. Highest Combined Degree First, HCDF. Order () sorts the edges in descending order of the sum of the degrees of their endpoints. Ties between edges are broken arbitrarily. Note that the greedy algorithm above examines the list of edges. In <ref> [13] </ref> we have also considered a greedy algorithm which examines the list of vertices. 3 The unconstrained edge-coloring problem In this section we derive bounds on the behavior of the greedy algorithm for the unconstrained case, i.e., k min (jAj; jBj). <p> Lemma 3.1 implies that there are O () iterations of the while loop. The for loop takes time O (m), and a bucket sort taking time O (m) can be used for Order () [14], so that FCFS, HDF and HCDF all run in time O (m). (In <ref> [13] </ref> we have described versions of FCFS and HDF which operate on lists of vertices rather than edges, and hence can be implemented to run in time O (m + n)).
Reference: [14] <author> Kiran Somalwar. </author> <title> Data transfer scheduling. </title> <type> Technical Report TR-88-31, </type> <institution> Univ. Texas at Austin, Dept. of Comp. Sci., </institution> <year> 1988. </year>
Reference-contexts: For a bipartite graph of degree , a minimum edge-coloring requires colors [2] and can be obtained in polynomial time [6, 7, 8, 4]. Scheduling applications, such as the scheduling of parallel I/O operations, motivate the development of faster algorithms for approximate edge-coloring of bipartite graphs <ref> [9, 14, 10] </ref>. We analyze the worst-case behavior of several greedy approximation algorithms for edge-coloring bipartite graphs. Experimental studies have shown that these algorithms can generate minimum or near-minimum edge colorings in much less execution time than exact algorithms [14, 12]. <p> We analyze the worst-case behavior of several greedy approximation algorithms for edge-coloring bipartite graphs. Experimental studies have shown that these algorithms can generate minimum or near-minimum edge colorings in much less execution time than exact algorithms <ref> [14, 12] </ref>. However, previous studies [14, 1] do not provide tight theoretical bounds on the worst-case behavior of these algorithms. <p> We analyze the worst-case behavior of several greedy approximation algorithms for edge-coloring bipartite graphs. Experimental studies have shown that these algorithms can generate minimum or near-minimum edge colorings in much less execution time than exact algorithms [14, 12]. However, previous studies <ref> [14, 1] </ref> do not provide tight theoretical bounds on the worst-case behavior of these algorithms. <p> Lemma 3.1 implies that there are O () iterations of the while loop. The for loop takes time O (m), and a bucket sort taking time O (m) can be used for Order () <ref> [14] </ref>, so that FCFS, HDF and HCDF all run in time O (m). (In [13] we have described versions of FCFS and HDF which operate on lists of vertices rather than edges, and hence can be implemented to run in time O (m + n)). <p> Bongiovanni et al [3] presented an O (m 2 n + mn 2 ) time algorithm for minimum constrained edge-coloring of bipartite graphs, where n is the number of vertices. Algorithms taking time O (mn 0:5 log n) and O ((m + n)n log m)) have subsequently been developed <ref> [14, 10, 11] </ref>. The approximation algorithm Modified-HDF (MHDF) for edge-coloring bipartite graphs when a color may be used to color at most k &lt; n edges consists of invoking the greedy algorithm for HDF with input k where 1 k &lt; min (jAj; jBj).
References-found: 14

