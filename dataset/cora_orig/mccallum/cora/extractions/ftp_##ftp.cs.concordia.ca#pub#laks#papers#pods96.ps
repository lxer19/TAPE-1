URL: ftp://ftp.cs.concordia.ca/pub/laks/papers/pods96.ps
Refering-URL: http://www.cs.concordia.ca/~special/bibdb/schemalog.html
Root-URL: http://www.cs.concordia.ca
Title: Tables As a Paradigm for Querying and Restructuring (Extended Abstract)  
Author: Marc Gyssens Laks V.S. Lakshmanan Iyer N. Subramanian 
Affiliation: University of Limburg  Concordia University  Concordia University  
Date: June 1996  
Note: To Appear in: Proc. ACM Symp. on Principles of Database Systems (PODS'96), Montreal, PQ,  
Abstract: Tables are one of the most natural representations of real-life data. Previous table-based data models (such as relational, nested relational, and complex objects models) capture only a limited variety of real-life tables. In this paper, we study the foundations of tabular representations of data. We propose the tabular database model for handling a broad class of natural data representations and develop tabular algebra as a language for querying and restructuring tabular data. We show that the tabular algebra is complete for a very general class of transformations and show that several languages designed for very different purposes can naturally be embedded into the tabular model. We also demonstrate the applicability of our model as a theoretical foundation for on-line analytical processing (OLAP), an emerging technology for complementing the robust data management and transaction processing of DBMS with powerful tools for data analysis. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> ACM. </editor> <booktitle> ACM Computing Surveys, </booktitle> <volume> volume 22, </volume> <month> Sept </month> <year> 1990. </year> <note> Special issue on HDBS. </note>
Reference: [2] <author> S. Abiteboul and P. Kanellakis. </author> <title> Object identity as a query language primitive. </title> <editor> In J. Clifford, B. Lindsay, and D. Maier, editors, </editor> <booktitle> Proceedings of the 1989 ACM SIGMOD International Conference on the Management of Data, volume 18:2 of SIGMOD Record, </booktitle> <pages> pages 159-173. </pages> <publisher> ACM Press, </publisher> <year> 1989. </year> <note> Full version to appear in Journal of the ACM. </note>
Reference-contexts: An automorphism of D is an isomorphism from D to itself. We denote by Aut (D) the automorphism group of D. The following notion of transformation as a database mapping expressing a restructuring operation or a query is inspired by Chandra and Harel [6], Abiteboul and Kanellakis <ref> [2] </ref>, and Andries, Gyssens, Paredaens, Van den Bussche, and Van Gucht [17, 3]: Let N N .
Reference: [3] <author> J. Van den Bussche, D. Van Gucht, M. An-dries, and Gyssens, M. </author> <title> On the completeness of object-creating database transformation languages, 1994. </title> <type> manuscript. </type> <note> Preliminary version appeared in FOCS'92 and PODS'90. </note>
Reference-contexts: We also compare our model and language with existing ones and bring out their power and generality. Among other things, we show the following. (4) The graph-based object-oriented data model GOOD recently proposed by Gyssens et al. <ref> [9, 4, 3] </ref> can be embedded within the tabular database model. In particular, every GOOD query can be expressed in the tabular algebra. <p> Both features are inspired by their counterparts in the relational language FO + new + while described in <ref> [3] </ref>. The tuple tagging statement T tuplenew A (R), with A an attribute parameter, when applied to a table ae with name R adds a new column to ae with column attribute name A containing a distinct new value (chosen non-deterministically from S) for each tuple of ae &gt; . <p> We denote by inst (N ) the set of all tabular databases for which N is a scheme. For a tabular database D, jDj will denote the set of symbols occurring in D. Following Van den Bussche et al. <ref> [3] </ref>, we define various morphisms on databases as follows. <p> We denote by Aut (D) the automorphism group of D. The following notion of transformation as a database mapping expressing a restructuring operation or a query is inspired by Chandra and Harel [6], Abiteboul and Kanellakis [2], and Andries, Gyssens, Paredaens, Van den Bussche, and Van Gucht <ref> [17, 3] </ref>: Let N N . <p> The definition of transformation in the tabular model is very close to the definition of transformation in the relational model for which the language FO+while+new was shown to be complete <ref> [3] </ref>. To show completeness for the tabular algebra for the notion of transformation given above, we use a reduction argument. Therefore, we first note the following: Theorem 4.1 The language FO + while + new can be simulated within the tabular algebra. <p> Similarly. Let Q # be the transformation computing (a tabular representation of) Rep (D 0 ) from D 0 , independent of the particular database D 0 . Now the composition Q # ffiQ ffi Q ", considered as a relational database mapping, is constructive in the sense of <ref> [3] </ref> and can therefore be expressed by a program P in the FO + while + new. Let P 0 be the corresponding program in the tabular algebra. Then P Rep ffi P 0 ffi P Rep 1 computes Q.
Reference: [4] <author> J. Van den Bussche, D. Van Gucht, M. Andries, and Gyssens, M. </author> <title> On the completeness of object-creating query languages. </title> <booktitle> 33rd Symposium on Foundations of Computer Science, </booktitle> <year> 1992. </year>
Reference-contexts: We also compare our model and language with existing ones and bring out their power and generality. Among other things, we show the following. (4) The graph-based object-oriented data model GOOD recently proposed by Gyssens et al. <ref> [9, 4, 3] </ref> can be embedded within the tabular database model. In particular, every GOOD query can be expressed in the tabular algebra.
Reference: [5] <author> Gyssens, Marc, Lakshmanan, L.V.S., and Subra-manian, I. N. </author> <title> Tables As a Paradigm for Querying and Restructuring Technical Report, </title> <publisher> Concor-dia University, </publisher> <address> Montreal, </address> <month> Nov </month> <year> 1995 </year>
Reference-contexts: Similar terminology can be developed for columns. 3 The Tabular Algebra In this section, we describe the tabular algebra (TA), partly informally, due to space restrictions. Formal counterparts of informal descriptions can be found in the full paper <ref> [5] </ref>. The tabular algebra consists of assignment statements of the form T hoperation ihparameter listihargument listi, with T a table name parameter, augmented with an iteration construct. The precise meaning of the parameters will be clarified in Section 3.6. <p> Grouping and merging (respectively splitting and collapsing) can be seen as inverses of each other. Since the formal definitions are rather involved, we limit ourselves to giving an informal description on an example here. The formal definition can be found in the full paper <ref> [5] </ref>. The syntax of a grouping assignment statement is T group by A on B (R), with A and B attribute-set parameters. <p> Let P 0 be the corresponding program in the tabular algebra. Then P Rep ffi P 0 ffi P Rep 1 computes Q. For the complete details of the proof, we refer to <ref> [5] </ref>. The proof sketch of our completeness results also yields a normal form for programs and transformations, by going via the canonical representations. It goes without saying, however, that this is not the way to proceed in practice. <p> Clearly, every SchemaLog relation can be readily represented as a table in the tabular model. We were able to prove the following result: Theorem 4.5 For every program P in SchemaLog d there is an equivalent program in the tabular algebra. Due to space restrictions, we refer to <ref> [5] </ref> for the proof. It may be argued that SchemaLog d programs essentially express transformations, so Theorem 4.5 is really a corollary of Theorem 4.4. <p> However, such an argument may shed little insight into the way such transformations can be simulated in tabular algebra, as the "resulting program" would be too low level. Our proof in <ref> [5] </ref> essentially gives a procedure for obtaining the equivalent TA program at a high level. We note that it is a simple matter to extend the tabular model and algebra in a way that accounts for a federation of (tabular) databases.
Reference: [6] <author> Chandra, Ashok K. and Harel, David. </author> <title> Computable queries for relational data bases. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 21 </volume> <pages> 156-178, </pages> <year> 1980. </year>
Reference-contexts: Similarly, we allow values to occur also in attribute positions. Our operations will be allowed to distinguish individual names while, for genericity reasons <ref> [6] </ref>, they will not be allowed to distinguish individual values. In concrete examples, we shall distinguish names from values by writing names in type-writer font. As is the case in real-life tables, our tables need not have entries for every row and column combination. <p> An automorphism of D is an isomorphism from D to itself. We denote by Aut (D) the automorphism group of D. The following notion of transformation as a database mapping expressing a restructuring operation or a query is inspired by Chandra and Harel <ref> [6] </ref>, Abiteboul and Kanellakis [2], and Andries, Gyssens, Paredaens, Van den Bussche, and Van Gucht [17, 3]: Let N N .
Reference: [7] <author> Codd, E.F., Codd, </author> <title> S.B., and Salley C.T. Providing olap (on-line analytical processing) to user-analysts: An IT mandate, </title> <note> 1995. White paper - URL:http://www.arborsoft.com/papers/coddTOC.html. </note>
Reference-contexts: Having more liberal tabular representations available for databases is not only interesting from a statical but also from a dynamical point of view. It has been pointed out (e.g., see <ref> [7, 8] </ref>) that many applications can significantly benefit from the integration of database systems 1 (whose strength is efficient and robust on-line trans-action processing (OLTP) and handling large volumes of data), with analytical tools like spreadsheets (which offer strong on-line analytical processing (OLAP) capabilities). <p> Examples include row and column arithmetic, generalized aggregation on arbitrary blocks of values drawn from tables, and the ability to invoke external functions. It has been pointed out <ref> [7, 8] </ref> that an integration of relational database systems and spreadsheets will combine their complementary strengths in OLAP and OLTP respectively, leading to a powerful environment for data processing. Such an integration calls for a powerful model and language that supports convenient restructuring of data between various tabular representations. <p> lost in terms of the expressive power, because of the completeness result in the previous theorem. 4.3 The Tabular Model as a Fundamental Basis for the OLAP Model The relational model, while supporting efficient data management and robust on-line transaction processing (OLTP), provides little support for on-line analysis of data <ref> [7, 8] </ref>. To overcome this deficiency, Codd has recently proposed [7, 14] a data model called OLAP (for on-line analytical processing). <p> To overcome this deficiency, Codd has recently proposed <ref> [7, 14] </ref> a data model called OLAP (for on-line analytical processing). <p> Some of the drawbacks of the OLAP technology as it stands today are the following: (i) unlike relational model, the OLAP model has no stable theoretical foundation and many concepts therein are used rather loosely (e.g., see <ref> [7, 8, 14] </ref>); (ii ) no languages comparable to relational algebra or calculus have been developed, and whatever "operations" are referred to in the literature have no clear definition.
Reference: [8] <author> Finkelstein, Richard. </author> <title> Understanding the need for on-line analytical servers, </title> <note> 1995. White paper - URL:http://www.arborsoft.com/papers/finkTOC.html. </note>
Reference-contexts: Having more liberal tabular representations available for databases is not only interesting from a statical but also from a dynamical point of view. It has been pointed out (e.g., see <ref> [7, 8] </ref>) that many applications can significantly benefit from the integration of database systems 1 (whose strength is efficient and robust on-line trans-action processing (OLTP) and handling large volumes of data), with analytical tools like spreadsheets (which offer strong on-line analytical processing (OLAP) capabilities). <p> Examples include row and column arithmetic, generalized aggregation on arbitrary blocks of values drawn from tables, and the ability to invoke external functions. It has been pointed out <ref> [7, 8] </ref> that an integration of relational database systems and spreadsheets will combine their complementary strengths in OLAP and OLTP respectively, leading to a powerful environment for data processing. Such an integration calls for a powerful model and language that supports convenient restructuring of data between various tabular representations. <p> lost in terms of the expressive power, because of the completeness result in the previous theorem. 4.3 The Tabular Model as a Fundamental Basis for the OLAP Model The relational model, while supporting efficient data management and robust on-line transaction processing (OLTP), provides little support for on-line analysis of data <ref> [7, 8] </ref>. To overcome this deficiency, Codd has recently proposed [7, 14] a data model called OLAP (for on-line analytical processing). <p> Some of the drawbacks of the OLAP technology as it stands today are the following: (i) unlike relational model, the OLAP model has no stable theoretical foundation and many concepts therein are used rather loosely (e.g., see <ref> [7, 8, 14] </ref>); (ii ) no languages comparable to relational algebra or calculus have been developed, and whatever "operations" are referred to in the literature have no clear definition.
Reference: [9] <author> M. Gyssens, J. Paredaens, and D. Van Gucht. </author> <title> A graph-oriented object database model. </title> <booktitle> In ACM Symp. Principles of Database Systems, </booktitle> <pages> pages 417-424, </pages> <year> 1990. </year>
Reference-contexts: We also compare our model and language with existing ones and bring out their power and generality. Among other things, we show the following. (4) The graph-based object-oriented data model GOOD recently proposed by Gyssens et al. <ref> [9, 4, 3] </ref> can be embedded within the tabular database model. In particular, every GOOD query can be expressed in the tabular algebra.
Reference: [10] <author> Hurson, A.R., Bright, M.W., and Pakzad, S. </author> <title> Multidatabase Systems : An Advanced Solution For Global Information Sharing. </title> <publisher> IEEE Computer Society, Los Alamitos, </publisher> <address> CA, </address> <year> 1994. </year> <title> Collection of Papers. </title>
Reference: [11] <author> Lakshmanan, L.V.S., Sadri, F., and Subramanian, I. N. </author> <title> On the logical foundations of schema integration and evolution in heterogeneous database systems. </title> <booktitle> In Proc. 3rd International Conference on Deductive and Object-Oriented Databases (DOOD '93). </booktitle> <publisher> Springer-Verlag, </publisher> <address> LNCS-760, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: This observation also provides a means to embed other models encompassed by GOOD, such as the nested and complex-object models, in the tabular model. (5) The syntactic higher-order logic-based model of SchemaLog recently proposed by Lakshmanan et al. <ref> [11, 12] </ref> can also be embedded within the tabular model. In particular, every query or restructuring transformation expressible in SchemaLog (without function symbols) can also be expressed in tabular algebra. (6) The tabular algebra can serve as a fundamental query and restructuring language for OLAP-based information systems. <p> We anticipate that the traditional, restructuring, and redundancy removal operations, and transposition would be sufficient for most useful transformations arising in practice. 4.2 Embedding SchemaLog into the Tabular Model Lakshmanan et al. <ref> [11, 12] </ref> proposed a higher-order logic called SchemaLog, and more recently an extension to SQL called SchemaSQL [13], inspired by Schema-Log, for facilitating interoperability in a federation of databases. <p> For convenience, we refer to this language as SchemaLog d . Atomic formulas in SchemaLog d are 9 of the form Rel [Tid: Attr ! Value], with Rel, Tid, Attr, Value constants or variables, in addition to atoms formed using the standard built-in predicates and programming predicates (see <ref> [11] </ref>). Clearly, every SchemaLog relation can be readily represented as a table in the tabular model. We were able to prove the following result: Theorem 4.5 For every program P in SchemaLog d there is an equivalent program in the tabular algebra.
Reference: [12] <author> Lakshmanan, L.V.S., Sadri, F., and Subramanian, I. N. </author> <title> Logic and Algebraic Languages for Interoperability in Multi-database Systems. </title> <type> Technical report, </type> <institution> Concordia University, Montreal, </institution> <month> March </month> <year> 1995. </year> <note> (Accepted to Journal of Logic Programming, </note> <month> February </month> <year> 1996). </year>
Reference-contexts: This observation also provides a means to embed other models encompassed by GOOD, such as the nested and complex-object models, in the tabular model. (5) The syntactic higher-order logic-based model of SchemaLog recently proposed by Lakshmanan et al. <ref> [11, 12] </ref> can also be embedded within the tabular model. In particular, every query or restructuring transformation expressible in SchemaLog (without function symbols) can also be expressed in tabular algebra. (6) The tabular algebra can serve as a fundamental query and restructuring language for OLAP-based information systems. <p> We anticipate that the traditional, restructuring, and redundancy removal operations, and transposition would be sufficient for most useful transformations arising in practice. 4.2 Embedding SchemaLog into the Tabular Model Lakshmanan et al. <ref> [11, 12] </ref> proposed a higher-order logic called SchemaLog, and more recently an extension to SQL called SchemaSQL [13], inspired by Schema-Log, for facilitating interoperability in a federation of databases.
Reference: [13] <author> Lakshmanan, L.V.S., Sadri, F., and Subramanian, I. N. </author> <title> SchemaSQL A Language for Querying and Restructuring Multidatabase Systems. </title> <type> Technical report, </type> <institution> Concordia University, Montreal, </institution> <month> February </month> <year> 1996. </year> <note> (Submitted for publication.) </note>
Reference-contexts: We anticipate that the traditional, restructuring, and redundancy removal operations, and transposition would be sufficient for most useful transformations arising in practice. 4.2 Embedding SchemaLog into the Tabular Model Lakshmanan et al. [11, 12] proposed a higher-order logic called SchemaLog, and more recently an extension to SQL called SchemaSQL <ref> [13] </ref>, inspired by Schema-Log, for facilitating interoperability in a federation of databases.
Reference: [14] <author> Pilot Software. </author> <title> An introduction to olap, </title> <year> 1995. </year> <month> URL:http://www.pilotsw.com//pilot013.htm. </month>
Reference-contexts: To overcome this deficiency, Codd has recently proposed <ref> [7, 14] </ref> a data model called OLAP (for on-line analytical processing). <p> Some of the drawbacks of the OLAP technology as it stands today are the following: (i) unlike relational model, the OLAP model has no stable theoretical foundation and many concepts therein are used rather loosely (e.g., see <ref> [7, 8, 14] </ref>); (ii ) no languages comparable to relational algebra or calculus have been developed, and whatever "operations" are referred to in the literature have no clear definition.
Reference: [15] <author> Serge Abiteboul, Richard Hull, and Victor Vianu. </author> <title> Foundations of Databases. </title> <publisher> Addison Wesley, </publisher> <address> Reading, MA, </address> <year> 1995. </year>
Reference-contexts: 1 Introduction Tables are one of the most natural ways in which real-life data can be represented. Indeed, the success and popularity of the relational model (see <ref> [15] </ref>) is a testimony to this. The relational model, however, only accounts for a very limited variety of tables possible. <p> WNI, University of Limburg, B-3590 Diepenbeek, Belgium. E-mail: gyssens@charlie.luc.ac.be. z Dept. of Computer Science, Concordia University, Montreal, Quebec, Canada Email: flaks,subbug@cs.concordia.ca. names need not be distinct (unlike in relations). To a limited extent, the nested relational and complex-object models (see <ref> [15] </ref>) mitigate the limitations of the relational model by allowing nesting and promoting structure sharing. These models, however, still fail to exploit the full power of tables.
Reference: [16] <author> Han, </author> <type> Jiawei Personal Communication, </type> <month> Sept </month> <year> 1995 </year>
Reference: [17] <author> M. Andries and J. Paredaens. </author> <title> On instance-completeness of database query languages involving object creation. </title> <journal> Journal of Computer and System Sciences. </journal> <note> To appear. See also "A language for generic graph-transformations", Lecture Notes in Computer Science vol. </note> <month> 570, </month> <pages> pp. 63-74. 11 </pages>
Reference-contexts: We denote by Aut (D) the automorphism group of D. The following notion of transformation as a database mapping expressing a restructuring operation or a query is inspired by Chandra and Harel [6], Abiteboul and Kanellakis [2], and Andries, Gyssens, Paredaens, Van den Bussche, and Van Gucht <ref> [17, 3] </ref>: Let N N .
References-found: 17

