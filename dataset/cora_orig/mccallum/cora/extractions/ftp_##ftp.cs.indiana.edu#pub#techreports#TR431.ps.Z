URL: ftp://ftp.cs.indiana.edu/pub/techreports/TR431.ps.Z
Refering-URL: http://www.cs.indiana.edu/trindex.html
Root-URL: 
Email: nsundare@cs.indiana.edu gannon@cs.indiana.edu  
Title: Experimental Evaluation of Coir A System for Control and Data Parallelism  
Author: Neelakantan Sundaresan Dennis Gannon 
Keyword: Software, Object-Oriented Programming, Task and Data Parallelism, Evaluation, Scheduling  
Address: 215 Lindley Hall  Bloomington, IN 47405  
Affiliation: Computer Science Department  Indiana University  
Abstract: Though data-parallelism addresses a wide variety of problems in scientific computing, this model in inadequate for general adaptive applications. Coir is our object-oriented thread-based model for data and task parallelism [25, 22, 24]. In this paper we briefly discuss the Coir objects thread objects for control-parallelism and groups of thread objects, called ropes, for data-parallelism. Using an example from the CMU-task-parallel suite[5], we discuss the effectiveness of our model in terms of expressibility and efficiency. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Peter Beckman, Dennis Gannon, and Neelakantan Sundaresan. </author> <title> pC++ Meets Multi-Threaded Computation. </title> <editor> In Jack Dongarra and Bernard Tourancheau, editors, </editor> <booktitle> Proceedings of the second workshop on Environments and Tools for Parallel Scientific Computing, </booktitle> <address> Philadelphia, </address> <month> May </month> <year> 1994. </year> <note> SIAM. </note>
Reference: [2] <author> Brian Bershad, Edward Lazowska, and Henry Levy. </author> <title> Presto: A system for object-oriented parallel programming. </title> <journal> Software-Practice and Experience, </journal> <volume> 18(8) </volume> <pages> 713-732, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: Thus, maximal processor-utilization can be achieved at a small cost of context-switch. Pthreads ([13, 16]) is an emerging standard of thread interface at C language level. There are a variety of vendor-supplied thread libraries (SGI sprocs, SUN lwps, DCE threads etc.) and others from the university communities <ref> [6, 4, 17, 11, 2] </ref>. In Coir, threads objects depict control parallelism and rope objects, which are groups of thread objects in cooperative computation and communication, abstract data parallelism.
Reference: [3] <author> Mani Chandy and Carl Kesselman. </author> <title> Compositional CC++: A Declarative Concurrent Object-Oriented Programming Notation. </title> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference: [4] <author> Eric C. Cooper and Richard P. Draves. </author> <title> C Threads. </title> <type> Technical Report CMU-CS-88-154, </type> <institution> Carnegie Mellon University, </institution> <month> June </month> <year> 1988. </year>
Reference-contexts: Thus, maximal processor-utilization can be achieved at a small cost of context-switch. Pthreads ([13, 16]) is an emerging standard of thread interface at C language level. There are a variety of vendor-supplied thread libraries (SGI sprocs, SUN lwps, DCE threads etc.) and others from the university communities <ref> [6, 4, 17, 11, 2] </ref>. In Coir, threads objects depict control parallelism and rope objects, which are groups of thread objects in cooperative computation and communication, abstract data parallelism.
Reference: [5] <author> Peter Dinda, Thomas Gross, David O'Hallaron, Edward Segall, James Stichnoth, Jaspal Subhlok, John Webb, and Yand Bwolen. </author> <title> The CMU Task-Parallel Program Suite. </title> <type> Technical Report CMU-CS-94-131, </type> <institution> School of Computer Science, Carnegie-Mellon University, Pittsburg, </institution> <address> PA., </address> <month> March </month> <year> 1994. </year>
Reference-contexts: Thus both task and data-parallelism are supported. 5 Example: Narrow-band Tracking Radar We study the application of our model of parallelism to the narrow-band tracking radar problem in the task-parallel suite available from CMU <ref> [5, 21] </ref>. The suite program was in Fortran 77 and we translated it to C++ and to our programming model. 4 The narrow-band tracking radar benchmark is used to measure the effectiveness of various multi--computers for radar applications.
Reference: [6] <author> Edward Felten and Dylan McNamee. </author> <title> NewThreads2.0 User's Guide, August 1992. </title> <address> Williamsburg VA. </address>
Reference-contexts: Thus, maximal processor-utilization can be achieved at a small cost of context-switch. Pthreads ([13, 16]) is an emerging standard of thread interface at C language level. There are a variety of vendor-supplied thread libraries (SGI sprocs, SUN lwps, DCE threads etc.) and others from the university communities <ref> [6, 4, 17, 11, 2] </ref>. In Coir, threads objects depict control parallelism and rope objects, which are groups of thread objects in cooperative computation and communication, abstract data parallelism.
Reference: [7] <author> High Performance Fortran Forum. </author> <title> High Performance Fotran Language Specification, </title> <note> Version 1.0. </note> <month> May </month> <year> 1993. </year>
Reference-contexts: Fortran-90 and HPF <ref> [7] </ref> are purely data-parallel. The Fx Fortran system [20], adds annotations to HPF to support task parallelism. Here, task parallelism is encapsulated by begin 9 on the SGI/power-challenge. Four sub-tables, one each for partitions of size 1, 2, 4 and 8 processors are shown.
Reference: [8] <author> Ian Foster and Mani Chandy. </author> <title> Fortran M: A language for modular parallel programming. </title> <type> Technical Report MCS-P327-0992, </type> <institution> Argonne National Laboratory, </institution> <month> June </month> <year> 1992. </year>
Reference-contexts: The body of this encapsulation can contain only loops and subroutine calls. Assigning processors to the task is done using processor and origin directives. Since the model of parallelism is processor-based, different co-executing tasks cannot be scheduled on the same set of processors. Fortran-M <ref> [8] </ref> adds task-parallel extensions to Fortran-77. Here, a process models a task and concurrent processes communicate through message-passing. The runtime system of Fortran-M is based on a thread system called Nexus [9]. Message-passing is done over channels rather than between threads. A process do-loop is analogous to ropes in Coir.
Reference: [9] <author> Ian Foster, John Garnett, and Steven Tuecke. </author> <note> Nexus User's Guide, Version 2.0. </note> <month> August </month> <year> 1994. </year>
Reference-contexts: Fortran-M [8] adds task-parallel extensions to Fortran-77. Here, a process models a task and concurrent processes communicate through message-passing. The runtime system of Fortran-M is based on a thread system called Nexus <ref> [9] </ref>. Message-passing is done over channels rather than between threads. A process do-loop is analogous to ropes in Coir. There are constructs to partition a machine using the submachine construct and distribute the processes. Since their 10 runtime system is also thread-based they do support overlapping submachines.
Reference: [10] <author> Andrew Grimshaw. </author> <title> Easy-to-use Object-Oriented Parallel Processing with Mentat. </title> <booktitle> IEEE Computer, </booktitle> <month> May </month> <year> 1993. </year>
Reference: [11] <author> Dirk Grunwald. </author> <title> A Users Guide to AWESIME: An Object-Oriented Parallel Programming and Simulation System. </title> <type> Technical Report CU-CS-552-91, </type> <institution> University of Colorado, Boulder, Colorado, </institution> <month> November </month> <year> 1991. </year>
Reference-contexts: Thus, maximal processor-utilization can be achieved at a small cost of context-switch. Pthreads ([13, 16]) is an emerging standard of thread interface at C language level. There are a variety of vendor-supplied thread libraries (SGI sprocs, SUN lwps, DCE threads etc.) and others from the university communities <ref> [6, 4, 17, 11, 2] </ref>. In Coir, threads objects depict control parallelism and rope objects, which are groups of thread objects in cooperative computation and communication, abstract data parallelism.
Reference: [12] <author> Matthew Haines, David Cronk, and Piyush Mehrotra. </author> <title> On the design of Chant: A Talking Threads Package. </title> <booktitle> In Proceedings of Supercomputing 94, </booktitle> <address> Washington D.C., </address> <month> November </month> <year> 1994. </year>
Reference-contexts: CC++[3] is a task and data parallel syntax extension to C++, which is based on the same runtime as Fortran-M. The Opus [15] runtime system is another similar effort to support task parallelism in HPF and is based on a communicating pthread-based library called Chant <ref> [12] </ref> for distributed memory machines.
Reference: [13] <author> IEEE. </author> <title> Thread Extensions for Portable Operating Systems (Draft 6), </title> <month> February </month> <year> 1992. </year> <month> P1003.4a/6. </month>
Reference: [14] <author> Laxmikant Kale and Sanjeev Krishnan. CHARM++: </author> <title> A Portable Concurrent Object-Oriented System Based on C++. </title> <type> Technical report, </type> <institution> University of Illinois, Urbana-Champaign, </institution> <month> March </month> <year> 1993. </year> <month> 12 </month>
Reference: [15] <author> Piyush Mehrotra and Matthew Haines. </author> <title> An Overview of the Opus Language and Runtime System. </title> <booktitle> In Proceedings of 7th LCPC Workshop, </booktitle> <address> Ithaca, NY, </address> <month> August </month> <year> 1994. </year>
Reference-contexts: Since their 10 runtime system is also thread-based they do support overlapping submachines. CC++[3] is a task and data parallel syntax extension to C++, which is based on the same runtime as Fortran-M. The Opus <ref> [15] </ref> runtime system is another similar effort to support task parallelism in HPF and is based on a communicating pthread-based library called Chant [12] for distributed memory machines.
Reference: [16] <author> Frank Mueller. </author> <title> Pthreads Library Interface. </title> <type> Technical report, </type> <institution> Florida State University, </institution> <month> July </month> <year> 1993. </year>
Reference: [17] <author> Bodhisattwa Mukherjee, Greg Eisenhauer, and Kaushik Ghosh. </author> <title> A Machine Independent Interface for LightWeight Threads. </title> <type> Technical Report GIT-CC-93/53, </type> <institution> College of Computing, Georgia Institute of Technology, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: Thus, maximal processor-utilization can be achieved at a small cost of context-switch. Pthreads ([13, 16]) is an emerging standard of thread interface at C language level. There are a variety of vendor-supplied thread libraries (SGI sprocs, SUN lwps, DCE threads etc.) and others from the university communities <ref> [6, 4, 17, 11, 2] </ref>. In Coir, threads objects depict control parallelism and rope objects, which are groups of thread objects in cooperative computation and communication, abstract data parallelism.
Reference: [18] <author> Stephen Murer, Jerome Feldman, and Chu-Cheow Lim. </author> <title> pSather monitors: Design, Tutorial, Rationale and Implementation. </title> <type> Technical Report TR-93-028, </type> <institution> International Computer Science Institute, Berkeley, </institution> <address> CA., </address> <month> June </month> <year> 1993. </year>
Reference: [19] <author> M Rinard, D Scales, and M Lam. </author> <title> Jade: A High-Level, Machine-Independent Language for Parallel Programming. </title> <journal> IEEE Computer, </journal> <volume> 26(6) </volume> <pages> 28-38, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: parallel languages based on C or object-oriented languages like C++ or Eiffel address task parallelism; pSather [18](which is based on a monitor-model for NUMA machines and supports Eiffel-like syntax), Mentat [10](which is based on a coarse grain data-driven model and heavy-weight threads, with extensions to C++), Jade with shared-object abstractions <ref> [19] </ref>. Charm++[14](which is based on message-driven model, with C++ extensions) are a few of them. 7 Conclusions We have proposed and implemented a model for supporting task and data parallelism in object-oriented parallel languages using light-weight threads.
Reference: [20] <author> Jaspal Subhlok, David O'Hallaron, and Thomas Gross. </author> <title> Task Parallel Programming in Fx. </title> <type> Technical Report CMU-CS-94-112, </type> <institution> School of Computer Science, Carnegie-Mellon University, Pittsburg, </institution> <address> PA., </address> <month> August </month> <year> 1994. </year>
Reference-contexts: Fortran-90 and HPF [7] are purely data-parallel. The Fx Fortran system <ref> [20] </ref>, adds annotations to HPF to support task parallelism. Here, task parallelism is encapsulated by begin 9 on the SGI/power-challenge. Four sub-tables, one each for partitions of size 1, 2, 4 and 8 processors are shown.
Reference: [21] <author> Jaspal Subhlok, David O'Hallaron, Thomas Gross, Peter Dinda, and John Webb. </author> <title> Communication and Memory Requirements as the Basis for Mapping Task and Data-Parallel Programs. </title> <booktitle> In Proceedings of Supercomputing '94, </booktitle> <address> Washington D.C., </address> <month> November </month> <year> 1994. </year>
Reference-contexts: Thus both task and data-parallelism are supported. 5 Example: Narrow-band Tracking Radar We study the application of our model of parallelism to the narrow-band tracking radar problem in the task-parallel suite available from CMU <ref> [5, 21] </ref>. The suite program was in Fortran 77 and we translated it to C++ and to our programming model. 4 The narrow-band tracking radar benchmark is used to measure the effectiveness of various multi--computers for radar applications.
Reference: [22] <author> Neelakantan Sundaresan and Dennis Gannon. </author> <title> A Thread-Model for Supporting Task and Data Parallelism in Object-Oriented Parallel Languages. </title> <booktitle> In International Conference on Parallel Processing, </booktitle> <month> August </month> <year> 1995. </year> <note> to appear. </note>
Reference-contexts: In this paper we discuss how this library can be used to map a task and data-parallel application effectively on a shared-memory machine. For more details on the design and interface and portability across shared and distributed-memory machines, refer to <ref> [25, 22, 24] </ref>. The library provides a target model and runtime system for parallel extensions to C++ like pC++[1]. The paper is organized as follows. In the following two sections we briefly discuss control and data parallelism in terms of thread and rope objects.
Reference: [23] <author> Neelakantan Sundaresan and Dennis Gannon. </author> <title> Aggregate Thread Synchronization Operations on Shared and Distributed Memory Machines. </title> <type> Technical Report 430, </type> <institution> Indiana University, Computer Science Department, Bloomington, IN, </institution> <year> 1995. </year>
Reference-contexts: Threads in a rope enter a data-parallel operation together and barrier-synchronize at the end of it. Threads may synchronize during the data-parallel operation. 3 The synchronization may be just a barrier, broadcast or reduction which may be specific to a partic-ular data-type <ref> [23] </ref>. Further, the threads in the rope may communicate between themselves or with independent threads or with threads in other ropes. Communication between threads in two ropes is abstracted by a rope!rope communication. 4 Machine and Memory Model A parallel machine can be abstracted based on memory and processor hierarchy.
Reference: [24] <author> Neelakantan Sundaresan and Dennis Gannon. Coir: </author> <title> A Thread Model for Supporting Task and Data Parallelism in Object-Oriented Parallel Languages. </title> <type> Technical Report 429, </type> <institution> Indiana University, Computer Science Department, Bloomington, IN, </institution> <year> 1995. </year>
Reference-contexts: In this paper we discuss how this library can be used to map a task and data-parallel application effectively on a shared-memory machine. For more details on the design and interface and portability across shared and distributed-memory machines, refer to <ref> [25, 22, 24] </ref>. The library provides a target model and runtime system for parallel extensions to C++ like pC++[1]. The paper is organized as follows. In the following two sections we briefly discuss control and data parallelism in terms of thread and rope objects.
Reference: [25] <author> Neelakantan Sundaresan and Linda Lee. </author> <title> An Object-Oriented Thread Model for Parallel Numerical Applications. </title> <booktitle> In Proceedings of the second annual Object-Oriented Numerics Conference, </booktitle> <month> April </month> <year> 1994. </year> <institution> Sunriver, Oregon. </institution> <month> 13 </month>
Reference-contexts: In this paper we discuss how this library can be used to map a task and data-parallel application effectively on a shared-memory machine. For more details on the design and interface and portability across shared and distributed-memory machines, refer to <ref> [25, 22, 24] </ref>. The library provides a target model and runtime system for parallel extensions to C++ like pC++[1]. The paper is organized as follows. In the following two sections we briefly discuss control and data parallelism in terms of thread and rope objects.
References-found: 25

