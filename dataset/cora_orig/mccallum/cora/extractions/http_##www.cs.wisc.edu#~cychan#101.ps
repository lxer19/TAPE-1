URL: http://www.cs.wisc.edu/~cychan/101.ps
Refering-URL: http://www.cs.wisc.edu/~cychan/cychan.html
Root-URL: http://www.cs.wisc.edu
Email: cychan@cs.wisc.edu  yannis@cs.wisc.edu  
Title: Bitmap Index Design and Evaluation  
Author: Chee-Yong Chan Yannis E. Ioannidis 
Affiliation: Department of Computer Sciences University of Wisconsin-Madison  Department of Computer Sciences University of Wisconsin-Madison  
Abstract: Bitmap indexing has been touted as a promising approach for processing complex adhoc queries in read-mostly environments, like those of decision support systems. Nevertheless, only few possible bitmap schemes have been proposed in the past and very little is known about the space-time tradeoff that they offer. In this paper, we present a general framework to study the design space of bitmap indexes for selection queries and examine the disk-space and time characteristics that the various alternative index choices offer. In particular, we draw a parallel between bitmap indexing and number representation in different number systems, and define a space of two orthogonal dimensions that captures a wide array of bitmap indexes, both old and new. Within that space, we identify (analytically or experimentally) the following interesting points: (1) the time-optimal bitmap index; (2) the space-optimal bitmap index; (3) the bitmap index with the optimal space-time tradeoff (knee); and (4) the time-optimal bitmap index under a given disk-space constraint. Finally, we examine the impact of bitmap compression and bitmap buffering on the space-time tradeoffs among those indexes. As part of this work, we also describe a bitmap-index-based evaluation algorithm for selection queries that represents an improvement over earlier proposals. We believe that this study offers a useful first set of guidelines for physical database design using bitmap indexes. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> AIPD Technical Publications. </author> <title> Sybase IQ Indexes. In Sybase IQ Administration Guide, Sybase IQ Release 11.2 Collection, </title> <type> chapter 5. </type> <institution> Sybase Inc., </institution> <month> March </month> <year> 1997. </year> <note> http://sybooks.sybase.com/cgi-bin/nph-dynaweb/siq11201/iq admin/1.toc. </note>
Reference-contexts: Indeed, the multiple-index approach is adopted by Sybase IQ, a DBMS specifically designed for data warehousing applications, which supports five different types of bitmap indexes, and requires the database to be fully inverted <ref> [1] </ref>. Maintaining multiple indexes for an attribute, however, further increases the disk space requirement of data warehouse applications. Understanding the space-time tradeoff of the various bitmap indexes is therefore essential for a good physical database design.
Reference: [2] <author> C.Y. Chan and Y.E. Ioannidis. </author> <title> Bitmap Index Design and Evaluation. </title> <institution> Computer Sciences Dept., University of Wisconsin-Madison, </institution> <year> 1997. </year> <note> http://www.cs.wisc.edu/~cychan/paper101.ps. </note>
Reference-contexts: For the rest of this paper, we use the term index to refer to a bitmap index. Due to lack of space, the derivations of analytical results and the proofs of theorems and algorithms' correctness are omitted from this paper; full details are given elsewhere <ref> [2] </ref>. 2 Design Space of Bitmap Indexes for Selection Queries In this section, we present a framework to examine the design space of indexes for selection queries. The framework has been inspired by the work of Wong et. al. [13, 14]. <p> The evaluation algorithm for equality-encoded indexes is not shown here due to space constraint; details can be found elsewhere <ref> [2] </ref>. A range-encoded index requires one or two bitmap scans per component for a selection predicate evaluation.
Reference: [3] <author> S. Chaudhuri and U. Dayal. </author> <title> An Overview of Data Warehousing and OLAP Technology. </title> <booktitle> ACM SIGMOD Record, </booktitle> <address> 26(1):6574, </address> <month> March </month> <year> 1997. </year>
Reference-contexts: 1 Introduction While the query performance issues of on-line transaction processing (OLTP) systems have been extensively studied [7] and are pretty much well-understood, the state-of-the-art for Decision Support Systems (DSS) is still evolving as indicated by the growing active research in this area <ref> [3] </ref>. Current database systems, which are optimized mainly for OLTP applications, are not suitable for DSS applications due to their different requirements and workload [6].
Reference: [4] <institution> Transaction Processing Performance Council, </institution> <month> May </month> <year> 1995. </year> <note> http://www.tpc.org. </note>
Reference-contexts: In contrast, in a BS-index, the distribution of the bits in each bitmap is dependent on the distribution of the attribute values. Thus, we expect a CS-index to be more compressible than a BS-index. 9.2 Experimental Setup Our experimental study uses two data sets extracted from the TPC-D Benchmark <ref> [4] </ref>: data set 1 is for small attribute cardinality, and data set 2 is for large attribute cardinality. Table 3 shows the key characteristics of our experimental data.
Reference: [5] <author> H. Edelstein. </author> <title> Faster Data Warehouses. </title> <booktitle> Information Week, </booktitle> <pages> pages 77 88, </pages> <month> December </month> <year> 1995. </year>
Reference-contexts: More recently, various DBMS vendors, including Oracle, Red-Brick, and Sybase, have introduced bitmap indexes into their products to meet the performance requirements of DSS applications <ref> [5, 6] </ref>. In its simplest form, a bitmap index on an indexed attribute consists of one vector of bits (i.e., bitmap) per attribute value, where the size of each bitmap is equal to the cardinality of the indexed relation.
Reference: [6] <author> C.D. </author> <title> French. One Size Fits All Database Architectures do not work for DSS. </title> <booktitle> In SIGMOD'95, </booktitle> <pages> pages 449450, </pages> <address> San Jose, California, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: Current database systems, which are optimized mainly for OLTP applications, are not suitable for DSS applications due to their different requirements and workload <ref> [6] </ref>. <p> More recently, various DBMS vendors, including Oracle, Red-Brick, and Sybase, have introduced bitmap indexes into their products to meet the performance requirements of DSS applications <ref> [5, 6] </ref>. In its simplest form, a bitmap index on an indexed attribute consists of one vector of bits (i.e., bitmap) per attribute value, where the size of each bitmap is equal to the cardinality of the indexed relation.
Reference: [7] <author> G. Graefe. </author> <title> Query Evaluation Techniques for Large Databases. </title> <journal> Computing Surveys, </journal> <volume> 25(2):73170, </volume> <year> 1993. </year>
Reference-contexts: 1 Introduction While the query performance issues of on-line transaction processing (OLTP) systems have been extensively studied <ref> [7] </ref> and are pretty much well-understood, the state-of-the-art for Decision Support Systems (DSS) is still evolving as indicated by the growing active research in this area [3].
Reference: [8] <author> P. O'Neil. </author> <title> Model 204 Architecture and Performance. </title> <booktitle> In Proceedings of the 2nd International Workshop on High Performance Transactions Systems, </booktitle> <pages> pages 4059, </pages> <address> Asilomar, CA, </address> <year> 1987. </year> <note> Springer-Verlag. In Lecture Notes in Computer Science 359. </note>
Reference-contexts: A promising approach to process complex queries in DSS is the use of bitmap indexing <ref> [8, 9, 10] </ref>. Bitmap manipulation techniques have already been used in some commercial products [12] to speed up query processing: a notable example is Model 204, a pre-relational DBMS from Computer Corporation of America [8]. <p> A promising approach to process complex queries in DSS is the use of bitmap indexing [8, 9, 10]. Bitmap manipulation techniques have already been used in some commercial products [12] to speed up query processing: a notable example is Model 204, a pre-relational DBMS from Computer Corporation of America <ref> [8] </ref>. More recently, various DBMS vendors, including Oracle, Red-Brick, and Sybase, have introduced bitmap indexes into their products to meet the performance requirements of DSS applications [5, 6]. <p> In terms of the number of bytes read, using bitmap indexes for plan (P3) is more efficient than using RID-list based indexes if 2 N 8 4 (2n); i.e., n 32 . Furthermore, operations on bitmaps are more CPU-efficient than merging RID-lists. Various bitmap indexes <ref> [8, 9, 10, 13, 14] </ref> have been designed for different query types, including range queries, aggregation queries, and OLAP-style queries. <p> The Value-List index, which is the simplest index and is the most commonly implemented, has a single component and is equality-encoded. The Bit-Sliced index [10] has a uniform base and is range-encoded. A base-10 Bit-Sliced index has been used in MODEL 204 for evaluating range predicates <ref> [8] </ref>.
Reference: [9] <author> P. O'Neil and G. Graefe. </author> <title> Multi-Table Joins Through Bitmapped Join Indices. </title> <booktitle> ACM SIGMOD Record, </booktitle> <pages> pages 811, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: A promising approach to process complex queries in DSS is the use of bitmap indexing <ref> [8, 9, 10] </ref>. Bitmap manipulation techniques have already been used in some commercial products [12] to speed up query processing: a notable example is Model 204, a pre-relational DBMS from Computer Corporation of America [8]. <p> In terms of the number of bytes read, using bitmap indexes for plan (P3) is more efficient than using RID-list based indexes if 2 N 8 4 (2n); i.e., n 32 . Furthermore, operations on bitmaps are more CPU-efficient than merging RID-lists. Various bitmap indexes <ref> [8, 9, 10, 13, 14] </ref> have been designed for different query types, including range queries, aggregation queries, and OLAP-style queries. <p> We refer to selection predicates where op 2 f=; 6=g as equality predicates, and to selection predicates where op 2 f; ; &lt;; &gt;g as range predicates. Information on bitmap indexes for other types of queries (e.g., star-join and group by queries) can be found elsewhere <ref> [9, 10] </ref>. The main contributions in this paper are as follows: * The presentation of a general framework to study the design space of bitmap indexes for selection queries.
Reference: [10] <author> P. O'Neil and D. Quass. </author> <title> Improved Query Performance with Variant Indexes. </title> <booktitle> In SIGMOD'97, </booktitle> <pages> pages 3849, </pages> <address> Tucson, Arizona, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: A promising approach to process complex queries in DSS is the use of bitmap indexing <ref> [8, 9, 10] </ref>. Bitmap manipulation techniques have already been used in some commercial products [12] to speed up query processing: a notable example is Model 204, a pre-relational DBMS from Computer Corporation of America [8]. <p> This is called a Value-List index <ref> [10] </ref>. An example of a Value-List index for a 12-record relation R is shown in Figure 1, where each column in Figure 1 (b) represents a bitmap B v associated with an attribute value v. <p> In terms of the number of bytes read, using bitmap indexes for plan (P3) is more efficient than using RID-list based indexes if 2 N 8 4 (2n); i.e., n 32 . Furthermore, operations on bitmaps are more CPU-efficient than merging RID-lists. Various bitmap indexes <ref> [8, 9, 10, 13, 14] </ref> have been designed for different query types, including range queries, aggregation queries, and OLAP-style queries. <p> We refer to selection predicates where op 2 f=; 6=g as equality predicates, and to selection predicates where op 2 f; ; &lt;; &gt;g as range predicates. Information on bitmap indexes for other types of queries (e.g., star-join and group by queries) can be found elsewhere <ref> [9, 10] </ref>. The main contributions in this paper are as follows: * The presentation of a general framework to study the design space of bitmap indexes for selection queries. <p> B 1 1 1 1 0 0 1 1 0 0 1 1 0 0 1 1 1 1 1 0 0 0 1 0 1 0 &lt; 3; 3 &gt; Range-Encoded Bitmap Index. for selection queries, with the two existing alternatives, namely, the Value-List index and the Bit-Sliced index <ref> [10] </ref>, classified as shown. The Value-List index, which is the simplest index and is the most commonly implemented, has a single component and is equality-encoded. The Bit-Sliced index [10] has a uniform base and is range-encoded. <p> 3; 3 &gt; Range-Encoded Bitmap Index. for selection queries, with the two existing alternatives, namely, the Value-List index and the Bit-Sliced index <ref> [10] </ref>, classified as shown. The Value-List index, which is the simplest index and is the most commonly implemented, has a single component and is equality-encoded. The Bit-Sliced index [10] has a uniform base and is range-encoded. A base-10 Bit-Sliced index has been used in MODEL 204 for evaluating range predicates [8]. <p> scheme (the binary encoding scheme) discussed in [13, 14], as it can be characterized in our framework as a base-2 decomposition with one of the two encodings we do present. 2 Clearly, a symmetric scheme exists as well, where the roles of right and left are exchanged. 3 performing aggregation <ref> [10] </ref>. <p> In this paper, we consider all well-defined decompositions, and just the two encoding schemes presented above, which are used in practice. 3 An Improved Evaluation Algorithm for Range-Encoded Bitmap Indexes An evaluation algorithm for selection queries based on range-encoded indexes has been proposed by O'Neil and Quass (Algorithm 4.3 in <ref> [10] </ref>), which we referred to as Algorithm RangeEval. In this section, we present an improved evaluation algorithm (Algorithm RangeEval-Opt) that reduces the number of bitmap operations by about 50% and requires one less bitmap scan for a range predicate evaluation. <p> To limit the number of experiments for each data set, our comparison of the space-time tradeoff is restricted to the class of space-optimal indexes (as a function of the number of index components, n) with n being varied from 1 4 A projection index <ref> [10] </ref> on an attribute A in a relation R is simply the projection of A on R with duplicates preserved and stored in RID-order.
Reference: [11] <author> T-F. Tsuei, A.N. Packer, and K-T. Ko. </author> <title> Database Buffer Size Investigation for OLTP Workloads. </title> <booktitle> In SIGMOD'97, </booktitle> <pages> pages 112122, </pages> <address> Tucson, Arizona, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: As the typical size of buffer space is at least 1 GB in database systems running on SMP systems for large data warehouse applications <ref> [11] </ref>, it is likely that a good number of bitmaps can remain memory-resident. By taking into account the amount of main-memory allocated for buffering bitmaps, more optimal indexes with better space-time tradeoff can be designed. The unit of buffering that we consider here is the number of bitmaps.
Reference: [12] <editor> J. Winchell. Rushmore's Bald Spot. DBMS, 4(10):58, </editor> <month> September </month> <year> 1991. </year>
Reference-contexts: A promising approach to process complex queries in DSS is the use of bitmap indexing [8, 9, 10]. Bitmap manipulation techniques have already been used in some commercial products <ref> [12] </ref> to speed up query processing: a notable example is Model 204, a pre-relational DBMS from Computer Corporation of America [8]. More recently, various DBMS vendors, including Oracle, Red-Brick, and Sybase, have introduced bitmap indexes into their products to meet the performance requirements of DSS applications [5, 6].
Reference: [13] <author> H.K.T. Wong, J.Z. Li, F. Olken, D. Rotem, and L. Wong. </author> <title> Bit Tranposi-tion for Very Large Scientific and Statistical Databases. </title> <journal> Algorithmica, </journal> <volume> 1(3):289309, </volume> <year> 1986. </year>
Reference-contexts: In terms of the number of bytes read, using bitmap indexes for plan (P3) is more efficient than using RID-list based indexes if 2 N 8 4 (2n); i.e., n 32 . Furthermore, operations on bitmaps are more CPU-efficient than merging RID-lists. Various bitmap indexes <ref> [8, 9, 10, 13, 14] </ref> have been designed for different query types, including range queries, aggregation queries, and OLAP-style queries. <p> The framework has been inspired by the work of Wong et. al. <ref> [13, 14] </ref>. Let C denote the attribute cardinality; i.e., the number of distinct actual values of the indexed attribute. The attribute cardinality is generally smaller than the cardinality of the attribute domain; i.e., the number of all possible values of the indexed attribute. <p> A base-10 Bit-Sliced index has been used in MODEL 204 for evaluating range predicates [8]. The Bit-Sliced index is also used in Sybase IQ for evaluating range predicates and 1 We have excluded the third basic encoding scheme (the binary encoding scheme) discussed in <ref> [13, 14] </ref>, as it can be characterized in our framework as a base-2 decomposition with one of the two encodings we do present. 2 Clearly, a symmetric scheme exists as well, where the roles of right and left are exchanged. 3 performing aggregation [10].
Reference: [14] <author> H.K.T. Wong, H-F. Liu, F. Olken, D. Rotem, and L. Wong. </author> <title> Bit Tran-posed Files. </title> <booktitle> In VLDB'85, </booktitle> <pages> pages 448457, </pages> <address> Stockholm, </address> <year> 1985. </year> <month> 12 </month>
Reference-contexts: In terms of the number of bytes read, using bitmap indexes for plan (P3) is more efficient than using RID-list based indexes if 2 N 8 4 (2n); i.e., n 32 . Furthermore, operations on bitmaps are more CPU-efficient than merging RID-lists. Various bitmap indexes <ref> [8, 9, 10, 13, 14] </ref> have been designed for different query types, including range queries, aggregation queries, and OLAP-style queries. <p> The framework has been inspired by the work of Wong et. al. <ref> [13, 14] </ref>. Let C denote the attribute cardinality; i.e., the number of distinct actual values of the indexed attribute. The attribute cardinality is generally smaller than the cardinality of the attribute domain; i.e., the number of all possible values of the indexed attribute. <p> A base-10 Bit-Sliced index has been used in MODEL 204 for evaluating range predicates [8]. The Bit-Sliced index is also used in Sybase IQ for evaluating range predicates and 1 We have excluded the third basic encoding scheme (the binary encoding scheme) discussed in <ref> [13, 14] </ref>, as it can be characterized in our framework as a base-2 decomposition with one of the two encodings we do present. 2 Clearly, a symmetric scheme exists as well, where the roles of right and left are exchanged. 3 performing aggregation [10].
References-found: 14

