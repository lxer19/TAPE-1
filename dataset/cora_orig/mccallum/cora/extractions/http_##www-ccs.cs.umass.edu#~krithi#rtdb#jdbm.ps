URL: http://www-ccs.cs.umass.edu/~krithi/rtdb/jdbm.ps
Refering-URL: http://www-ccs.cs.umass.edu/rtdb/publications.html
Root-URL: 
Email: email: krithi@cs.umass.edu  
Title: Where do Time Constraints Come From and Where do They Go?  
Author: Krithi Ramamritham 
Note: Invited Paper To appear in International Journal of Database Management This work was supported, in part, by NSF under grant IRI-9208920.  
Address: Amherst Ma. 01003  
Affiliation: Department of Computer Science University of Massachusetts  
Abstract: While a lot of work has been done in real-time systems, in real-time database systems, and more recently, in real-time active databases on the topic of time constrained processing of tasks and transactions, very little work exists that deals with the origin of the time constraints associated with the data, the events, and the actions. In this paper we identify the sources and semantics of time constraints and show that it is important to minimize the number of "mandated" timing requirements and also weaken the implications of timing constraint violations. The Event-Condition-Action rules of active real-time databases provide a useful framework to specify the timing properties of interest as well as the actions to be taken when the properties are violated. That is, an active real-time database can be made to store the data pertaining to the controlled system as well as the meta-data about the controlling system. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> N. Audsley, A. Burns, M. Richardson, and A. Wellings. </author> <title> A Database Model for Hard Real-Time Systems. </title> <type> Technical Report, </type> <institution> Real-Time Systems Group, Univ. of York, U.K., </institution> <month> July </month> <year> 1991. </year>
Reference-contexts: This need to maintain consistency between the actual state of the environment and the state as reflected by the contents of the database leads to the notion of temporal consistency. Temporal consistency has two components <ref> [8, 1] </ref>: * Absolute consistency between the state of the environment and its reflection in the database; this arises from the need to keep the controlling system's view of the state of the environment consistent with the actual state of the environment.
Reference: [2] <author> B. Dasarathy. </author> <title> Timing constraints of Real-time systems: Constructs for Expressing Them, Methods for Validating Them. </title> <journal> IEEE Transactions on Software Engineering, </journal> <pages> pages 80-86, </pages> <month> Jan </month> <year> 1985. </year>
Reference-contexts: Because of this, certain types of time constraints on the actions are inherited from the types of events that trigger these actions. Hence it is important to examine events with respect to their timing-related 7 properties. In essence, there are three types of such time constraints <ref> [2] </ref>. 1. Maximum: delay between two events. Example: Once an object enters the view of the camera, object recognition must be completed within t 1 seconds. 2. Minimum: delay between two events. Example: No two flight landings must occur within t 2 seconds. 3. Durational: length of an event.
Reference: [3] <author> R. Gerber, S. Hong, and M. Saksena. </author> <title> Guaranteeing Real-Time Requirements with Resource-based Calibration of Periodic Processes. </title> <journal> Transactions on Software Engineering, </journal> <month> July </month> <year> 1995. </year> <month> 19 </month>
Reference-contexts: In practice, however, it is crucial that data be temporally correct when it is used or consumed by some action. Viewed from this need, absolute consistency can be seen as a freshness constraint and relative consistency can be seen as a correlation constraint <ref> [3] </ref>. That is, when a data item is used, it must be fresh (as specified by the absolute consistency requirements) and must be temporally correlated (as specified by the relative consistency requirements) with other data that it is used with. <p> This simple example considered a single periodic monolithic action whose period equals its deadline. Most real-world actions are quite complex and as we have seen earlier the types of time constraints can also be very complex. Gerber et al. <ref> [3] </ref> have proposed a solution to the problem of deriving the periods, offsets and deadlines of the subactions in a graph representation of an action so as to meet the temporal requirements, such as freshness and correlation constraints, imposed on the data.
Reference: [4] <author> B. Purimetla, R. M. Sivasankaran, J. A. Stankovic, K. Ramam--ritham, and D. Towsley. </author> <title> Priority Assignment in Real-Time Active Databases. </title> <booktitle> Conference on Parallel and Distributed Information Systems, </booktitle> <month> Oct </month> <year> 1994. </year>
Reference-contexts: Since these systems use a priority-driven scheduler, some researchers have begun to explore the problem of assignment of priority to these actions, skirting the problem of assigning time constraints first <ref> [4] </ref>. 7 Discussion In this paper, we have made a beginning in trying to understand the issues underlying the origin and semantics of time constraints. Not all deadlines are defined by users or by the application, as is said in much of the real-time literature.
Reference: [5] <author> K. Ramamritham. </author> <title> Real-Time Databases. </title> <journal> International Journal of Distributed and Parallel Databases, </journal> <volume> Vol. 1, No. 2, </volume> <year> 1993. </year>
Reference-contexts: Given specific time constraints, a lot of work has been done on the topic of time constrained processing of tasks and transactions <ref> [5] </ref>. But very little work exists that deals with the origins of the time constraints associated with the data, the events, and the actions. Knowing their origins it is possible to determine the semantics of the time constraints and also the best ways to satisfy timing requirements.
Reference: [6] <author> B. Purimetla, R. M. Sivasankaran, K. Ramamritham, and J. A. Stankovic. </author> <title> Real-Time Databases: </title> <booktitle> Issues and Applications. In Advances in Real-Time Systems, </booktitle> <publisher> Sang Son, Ed. Prentice-Hall, </publisher> <year> 1995. </year>
Reference-contexts: Section 7 summarizes the paper. 2 Motivating Examples In this section we introduce two examples of real-time applications that can benefit from real-time active database technology. Aspects of these examples will be used throughout the paper to illustrate our ideas. (Further detailed examples can be found in <ref> [6] </ref>). Consider recognizing and directing objects moving along a set of conveyer belts on a factory floor. An object's features are captured by a camera to determine its type and to recognize whether it has any abnormalities. Depending on the observed features, the object is directed to the appropriate workcell.
Reference: [7] <author> R. M. Sivasankaran, K. Ramamritham, J. A. Stankovic, and D. Towsley. </author> <title> Data Placement, Logging and Recovery in Real-Time Active Databases. Workshop on Active Real-Time Databases, </title> <address> Swe-den, </address> <month> June, </month> <year> 1995. </year>
Reference-contexts: Finally, ECA rules can also be used to govern the way transaction processing is done, especially the way data migrates through the levels of the memory hierarchy to ensure temporal validity, and how logging is done to ease timely recovery <ref> [7] </ref>. 16 6 Derivation of Time Constraints Clearly, algorithms are needed to derive the optimal values for the time constraints so as to maximize system performance, be it measured in terms of utilization or productivity of resources or the value.
Reference: [8] <author> X. Song and J.W.S. Liu. </author> <title> How Well Can Data Temporal Consistency be Maintained?. </title> <booktitle> In the Proceedings of the IEEE Symposium on Computer-Aided Control Systems Design, </booktitle> <year> 1992. </year> <month> 20 </month>
Reference-contexts: This need to maintain consistency between the actual state of the environment and the state as reflected by the contents of the database leads to the notion of temporal consistency. Temporal consistency has two components <ref> [8, 1] </ref>: * Absolute consistency between the state of the environment and its reflection in the database; this arises from the need to keep the controlling system's view of the state of the environment consistent with the actual state of the environment.
References-found: 8

