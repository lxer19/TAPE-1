URL: ftp://venera.isi.edu/sims/sss95/knoblock.ps.Z
Refering-URL: 
Root-URL: 
Email: Email: knoblock@isi.edu  
Title: Integrating Planning and Execution for Information Gathering  
Author: Craig A. Knoblock 
Address: 4676 Admiralty Way Marina del Rey, CA 90292  
Affiliation: Information Sciences Institute and Department of Computer Science University of Southern California  
Abstract: Current specialized planners for query processing are designed to work in local, reliable, and predictable environments. However, there are a number of problems that arise in gathering information from large networks of distributed information. In this environment actions can be executed in parallel to exploit distributed resources, new goals come into the system in the midst of execution, actions may fail due to exogenous events and need to be replanned, and there is incomplete information about the world. We have developed a planner called Sage that addresses the issues that arise in this environment. This system integrates previous work on planning, execution, replanning, and sensing and extends this work to support simultaneous and interleaved planning and execution. Sage has been applied to the problem of information gathering to provide a flexible and efficient system for integrating heterogeneous and distributed data and has been used in the domains of logistics planning and trauma care. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Allen, J. F.; Kautz, H. A.; Pelavin, R. N.; and Tenenberg, J. D. </author> <year> 1991. </year> <title> Reasoning About Plans. </title> <address> San Mateo: </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: These capabilities are provided by temporal planners and such planners would be more appropriate for domains involving these types of interactions <ref> (Allen et al. 1991) </ref>. Of course, this capability comes with a higher cost for reasoning about plans. operator with a resource declaration is shown in Figure 1.
Reference: <author> Ambros-Ingerson, J. </author> <year> 1987. </year> <title> IPEM: Inegrated Planning, Execution, and Monitoring. </title> <type> Ph.D. Dissertation, </type> <institution> Department of Computer Science, University of Essex. </institution>
Reference: <author> Arens, Y.; Chee, C. Y.; Hsu, C.-N.; and Knoblock, C. A. </author> <year> 1993. </year> <title> Retrieving and integrating data from multiple information sources. </title> <journal> International Journal on Intelligent and Cooperative Information Systems 2(2) </journal> <pages> 127-158. </pages>
Reference-contexts: For example, Figure 2 illustrates a goal which specifies that the set of data be sent to the output device of the sims information mediator <ref> (Arens et al. 1993, Knoblock, Arens, & Hsu 1994) </ref>. The third argument of this goal specifies the data to be retrieved and is defined using the syntax of the query language of the Loom knowledge representation system (MacGregor 1990). <p> This planner serves as the underlying query planner for the SIMS information mediator <ref> (Arens et al. 1993, Knoblock, Arens, & Hsu 1994) </ref>, whose goal is to provide flexible and efficient access to large numbers of information sources. The planning, execution, and sensing are fully implemented.
Reference: <author> Barrett, A.; Golden, K.; Penberthy, S.; and Weld, D. </author> <year> 1993. </year> <note> Ucpop user's manual (version 2.0). Technical Report 93-09-06, </note> <institution> Department of Computer Science and Engineering, University of Washington. </institution>
Reference: <author> Currie, K., and Tate, A. </author> <year> 1991. </year> <title> O-plan: The open planning architecture. </title> <booktitle> Artificial Intelligence 52(1) </booktitle> <pages> 49-86. </pages>
Reference-contexts: Of the earlier work, only IPEM claims to support execution of actions in parallel, but does not address the issue of resource conflicts and does not consider alternative plans during execution (Ambros-Ingerson 1987, pg.50). Other system have supported planning of simultaneous actions <ref> (Currie & Tate 1991, Wilkins 1984) </ref>, but do not integrate the planning and execution. The other aspect to this work is the application of the planner to the problem of information gathering.
Reference: <author> Etzioni, O.; Hanks, S.; Weld, D.; Draper, D.; Lesh, N.; and Williamson, M. </author> <year> 1992. </year> <title> An approach to planning with incomplete information. </title> <booktitle> In Proceedings of the Third International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> 115-125. </pages>
Reference-contexts: Similar to some of the other systems that perform sensing (i.e., IPEM (Ambros-Ingerson 1987) and UWL <ref> (Etzioni et al. 1992) </ref>), Sage currently delays working on any open condition that involves a run-time variable. In the remainder of this section we describe how the sensing is exploited for information gathering. Sensing for Information Gathering For information gathering, there are two important uses of run-time variables. <p> Owalski and Gini (Olawsky & Gini 1990) focused on the tradeoffs and strategies in choosing when to sense and when to plan. Etzioni et al. developed a language for representing incomplete information <ref> (Etzioni et al. 1992) </ref> and built an integrated system for planning, execution, and sensing called XII (Etzioni, Golden, & Weld 1994) that can represent and reason about locally complete information.
Reference: <author> Etzioni, O.; Golden, K.; and Weld, D. </author> <year> 1994. </year> <title> Tractable closed-world reasoning with updates. </title> <booktitle> In Fourth International Conference on Principles of Knowledge Representation and Reasoning. </booktitle>
Reference-contexts: Owalski and Gini (Olawsky & Gini 1990) focused on the tradeoffs and strategies in choosing when to sense and when to plan. Etzioni et al. developed a language for representing incomplete information (Etzioni et al. 1992) and built an integrated system for planning, execution, and sensing called XII <ref> (Etzioni, Golden, & Weld 1994) </ref> that can represent and reason about locally complete information. This paper extends this earlier work within the clas-sical planning paradigm with the capability to perform the planning in parallel with the execution.
Reference: <author> Firby, R. J. </author> <year> 1987. </year> <title> An investigation into reactive planning in complex domains. </title> <booktitle> In Proceedings of the Sixth National Conference on Artificial Intelligence, </booktitle> <pages> 202-206. </pages>
Reference-contexts: Related Work There are a variety of systems that have tightly integrated planning with some combination of execution, sensing, and replanning. There is work on reactive planning <ref> (Firby 1987) </ref>, which emphasizes the ability to react to unexpected situations rather than assume that a plan will usually work.
Reference: <author> Hanks, S., and Weld, D. S. </author> <year> 1992. </year> <title> The systematic plan adaptor: A formal foundation for case-based planning. </title> <type> Technical Report 92-09-04, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <address> Seattle, WA. </address>
Reference-contexts: was implemented by augmenting ucpop (Penberthy & Weld 1992, Barrett et al. 1993) with the capabilities to produce parallel execution plans (Knoblock 1994, Wilkins 1984), interleave planning and execution (Ambros-Ingerson 1987, Etzioni, Golden, & Weld 1994), support run-time variables (Ambros-Ingerson 1987, Etzioni et al. 1992), and perform replanning where appropriate <ref> (Hanks & Weld 1992) </ref>. We have integrated all of these capabilities into a single unified system in which the actions can be executed simultaneously, and the planning, sensing, and replanning can be performed during execution. <p> Instead, we would like to replan the failed portion of the plan, while maintaining as much of the executing plan as possible. The replanning in Sage is based on the approach used in the Systematic Plan Adaptor (SPA) <ref> (Hanks & Weld 1992) </ref>, which systematically searches the space of plan modifications. The basic idea is to annotate the plans that are being considered to avoid generating either the plan that failed or other redundant plans. <p> The planning, execution, and sensing are fully implemented. The replanning module currently replans just the failed subgoals and we are in the process of incorporating the ideas from SPA <ref> (Hanks & Weld 1992) </ref>, which will provide a more complete re-planning capability. The current system has been used in the domains of logistics planning and trauma care and provides access to data stored in Oracle databases, Mumps databases, and Loom knowledge bases, as well data produced by Lisp programs.
Reference: <author> Jarke, M., and Koch, J. </author> <year> 1984. </year> <title> Query optimization in database systems. </title> <journal> ACM Computing Surveys 16(2) </journal> <pages> 111-152. </pages>
Reference-contexts: This provides a real-world example of where this planner is useful and extends the state of the art in query processing. Conventional query processors produce a query access plan and then execute it <ref> (Jarke & Koch 1984) </ref>. There is no capability for interleaving the planning and execution, performing sensing operations, re-planning due to failures, or handling additional goals. This planner described in this paper provides the capability for a much more flexible and efficient query processor.
Reference: <author> Knoblock, C. A., and Levy, A. </author> <year> 1994. </year> <title> Efficient query processing for information gathering agents. </title> <booktitle> In Proceedings of the Workshop on Intelligent Information Agents. </booktitle>
Reference-contexts: To address these problems, we have developed a planning system that builds on the previous work on planning, execution, sensing, and replanning. The planner, which we call Sage, was implemented by augmenting ucpop (Penberthy & Weld 1992, Barrett et al. 1993) with the capabilities to produce parallel execution plans <ref> (Knoblock 1994, Wilkins 1984) </ref>, interleave planning and execution (Ambros-Ingerson 1987, Etzioni, Golden, & Weld 1994), support run-time variables (Ambros-Ingerson 1987, Etzioni et al. 1992), and perform replanning where appropriate (Hanks & Weld 1992). <p> Second, the run-time variables also can be used to retrieve information which is then used in the selection of the most appropriate information sources. We have already implemented the first use, which is described below, and we investigate the second in <ref> (Knoblock & Levy 1994) </ref>. The capability for gathering information to use in the formulation of another query can be added to the system by adding two more operators to the domain.
Reference: <author> Knoblock, C.; Arens, Y.; and Hsu, C.-N. </author> <year> 1994. </year> <title> Cooperating agents for information retrieval. </title> <booktitle> In Proceedings of the Second International Conference on Cooperative Information Systems. </booktitle>
Reference-contexts: To address these problems, we have developed a planning system that builds on the previous work on planning, execution, sensing, and replanning. The planner, which we call Sage, was implemented by augmenting ucpop (Penberthy & Weld 1992, Barrett et al. 1993) with the capabilities to produce parallel execution plans <ref> (Knoblock 1994, Wilkins 1984) </ref>, interleave planning and execution (Ambros-Ingerson 1987, Etzioni, Golden, & Weld 1994), support run-time variables (Ambros-Ingerson 1987, Etzioni et al. 1992), and perform replanning where appropriate (Hanks & Weld 1992). <p> Second, the run-time variables also can be used to retrieve information which is then used in the selection of the most appropriate information sources. We have already implemented the first use, which is described below, and we investigate the second in <ref> (Knoblock & Levy 1994) </ref>. The capability for gathering information to use in the formulation of another query can be added to the system by adding two more operators to the domain.
Reference: <author> Knoblock, C. A. </author> <year> 1994. </year> <title> Generating parallel execution plans with a partial-order planner. </title> <booktitle> In Proceedings of the Second International Conference on Artificial Intelligence Planning Systems. </booktitle>
Reference-contexts: To address these problems, we have developed a planning system that builds on the previous work on planning, execution, sensing, and replanning. The planner, which we call Sage, was implemented by augmenting ucpop (Penberthy & Weld 1992, Barrett et al. 1993) with the capabilities to produce parallel execution plans <ref> (Knoblock 1994, Wilkins 1984) </ref>, interleave planning and execution (Ambros-Ingerson 1987, Etzioni, Golden, & Weld 1994), support run-time variables (Ambros-Ingerson 1987, Etzioni et al. 1992), and perform replanning where appropriate (Hanks & Weld 1992). <p> Second, the run-time variables also can be used to retrieve information which is then used in the selection of the most appropriate information sources. We have already implemented the first use, which is described below, and we investigate the second in <ref> (Knoblock & Levy 1994) </ref>. The capability for gathering information to use in the formulation of another query can be added to the system by adding two more operators to the domain.
Reference: <author> MacGregor, R. </author> <year> 1990. </year> <title> The evolving technology of classification-based knowledge representation systems. </title> <editor> In Sowa, J., ed., </editor> <booktitle> Principles of Semantic Networks: Explorations in the Representation of Knowledge. </booktitle> <publisher> Morgan Kauf-mann. </publisher>
Reference-contexts: The third argument of this goal specifies the data to be retrieved and is defined using the syntax of the query language of the Loom knowledge representation system <ref> (MacGregor 1990) </ref>.
Reference: <author> Olawsky, D., and Gini, M. </author> <year> 1990. </year> <title> Deferred planning and sensor use. </title> <booktitle> In Proceedings of the Workshop on Innovative Approaches to Planning, Scheduling and Control, </booktitle> <pages> 166-174. </pages>
Reference-contexts: In the classical planning framework, Ambros-Ingerson and Steel (Ambros-Ingerson 1987) developed an integrated planning, execution, and monitoring system called IPEM and introduced the idea of run-time variables for sensing. Owalski and Gini <ref> (Olawsky & Gini 1990) </ref> focused on the tradeoffs and strategies in choosing when to sense and when to plan.
Reference: <author> Penberthy, J. S., and Weld, D. S. </author> <year> 1992. </year> <title> Ucpop: A sound, complete, partial order planner for adl. </title> <booktitle> In Third International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> 189-197. </pages>
Reference-contexts: Government, or any person or agency connected with them. To address these problems, we have developed a planning system that builds on the previous work on planning, execution, sensing, and replanning. The planner, which we call Sage, was implemented by augmenting ucpop <ref> (Penberthy & Weld 1992, Barrett et al. 1993) </ref> with the capabilities to produce parallel execution plans (Knoblock 1994, Wilkins 1984), interleave planning and execution (Ambros-Ingerson 1987, Etzioni, Golden, & Weld 1994), support run-time variables (Ambros-Ingerson 1987, Etzioni et al. 1992), and perform replanning where appropriate (Hanks & Weld 1992).
Reference: <author> Selinger, P. G.; Astrahan, M.; Chamberlin, D.; Lorie, R.; and Price, T. </author> <year> 1988. </year> <title> Access path selection in a relational database management system. </title> <booktitle> In Artificial Intelligence and Databases. </booktitle> <address> Los Altos, CA: </address> <publisher> Morgan Kaufmann. </publisher> <pages> 511-522. </pages>
Reference-contexts: However, the goal is to produce high quality and not optimal plans. This approach to searching the space of plans is similar to what is done in other systems for producing query plans for relational databases <ref> (Selinger et al. 1988) </ref>. These systems typically generate the space of query access plans, constraining the space of plans with appropriate domain-specific heuristics, and then evaluate the plans and select the best one. In the following sections we will describe functionality that goes beyond what existing database systems provide.
Reference: <author> Wilkins, D. E. </author> <year> 1984. </year> <title> Domain-independent planning: Representation and plan generation. </title> <booktitle> Artificial Intelligence 22(3) </booktitle> <pages> 269-301. </pages>
Reference-contexts: The resource requirements of the operators are made explicit by augmenting each operator with a resource declaration. This is similar to the way resources are declared in Sipe <ref> (Wilkins 1984) </ref>, but as described below, the way they are handled is different. An example 1 A more complete treatment of this problem requires a more expressive representation of time in order to capture the subtleties of different ways in which operators can interact.
References-found: 18

