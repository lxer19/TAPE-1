URL: http://www.cs.gatech.edu/computing/classes/cs8112m/papers/tracz-paper2.ps
Refering-URL: http://www.cs.gatech.edu/computing/classes/cs8112m/wi95/
Root-URL: 
Email: tracz@owgvm0.vnet.ibm.com  
Title: Domain-Specific Software Architecture Engineering Process Guidelines ADAGE-IBM-92-02 Version 2.0  
Author: Will Tracz Lou Coglianese Patrick Young 
Address: MD 0210 Owego, NY 13827-1298  
Affiliation: IBM Corporation Federal Sector Division  
Abstract: One of the dilemmas that has prevented software developers from reusing software is the lack of software artifacts to use or the existence of artifacts that are difficult to integrate. Domain-Specific Software Architectures (DSSAs) have been proposed [7] in order to address these issues. A DSSA not only provides a framework for reusable software components to fit into, but captures the design rationale and provides for a degree of adaptability. This document presents process guidelines for defining a Domain-Specific Software Architecture 1 . Furthermore, the process is formally specified in the Teamware Process Programming Language. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Booch. </author> <title> Software Components with Ada. </title> <address> Ben-jamin/Cummings, </address> <year> 1987. </year>
Reference-contexts: They are best suited for identifying existing reusable components or components that can serve as a basis for creating reusable components. Another option is to import reusable components from some other domain. This is possible, especially in the case of low-level data structures <ref> [1] </ref>, utilities, and user interface software. Stage 5.1: Develop/Collect the Reusable Artifacts The issue being addressed at this stage in the domain-engineering process is how to determine the best source of components to populate the DSSAs.
Reference: [2] <author> Ascent Logic Corporation. </author> <title> RDD-100 Requirements Driven Design User's Guide. </title> <type> Technical Report Release 3.0, </type> <institution> Ascent Logic Corporation, </institution> <address> San Jose, CA, </address> <month> August </month> <year> 1991. </year>
Reference-contexts: part of the STARS (Software Technology for Adaptable and Reliable Systems) program by Ruben Prieto-Diaz [10] and the Feature-Oriented Domain Analysis (FODA) work by Kyo Kang, Sholom Co-hen, et al. [3] at the Software Engineering Institute (SEI) cast into the methodology supported by Requirements Driven Design tool (RDD-100 3 ) <ref> [2] </ref> and the Issue Based Information Systems [4] (IBIS) model for recording design decisions and design rationales.
Reference: [3] <author> K.C. Kang, S.G. Cohen, J.A. Hess, </author> <title> W.E. Novak, and A.S. Peterson. Feature-Oriented Domain Analysis (FODA) Feasibility Study. </title> <type> Technical Report CMU/SEI-90-TR-21, </type> <institution> Software Engineering Institute, </institution> <month> November </month> <year> 1990. </year>
Reference-contexts: It is based on the Reuse Library Process Model that was developed as part of the STARS (Software Technology for Adaptable and Reliable Systems) program by Ruben Prieto-Diaz [10] and the Feature-Oriented Domain Analysis (FODA) work by Kyo Kang, Sholom Co-hen, et al. <ref> [3] </ref> at the Software Engineering Institute (SEI) cast into the methodology supported by Requirements Driven Design tool (RDD-100 3 ) [2] and the Issue Based Information Systems [4] (IBIS) model for recording design decisions and design rationales. <p> The term feature plays a central role in the FODA process <ref> [3] </ref>, and functional units or domain en tities are described in the STARS process [10]. 4 RDD-100 Considerations The RDD-100 (Requirements Driven Design) is a design tool that comes closest to directly supporting the domain-engineering process described in this document.
Reference: [4] <author> W. Kunz and H.Q.J. Rittel. </author> <title> Issues as Elements of Information Systems. </title> <note> Technical Report Working Paoer No. 131, </note> <institution> Institut Fur Grundlagen Der Pla-nung I.A. University of StuttgartY, </institution> <year> 1979. </year>
Reference-contexts: Adaptable and Reliable Systems) program by Ruben Prieto-Diaz [10] and the Feature-Oriented Domain Analysis (FODA) work by Kyo Kang, Sholom Co-hen, et al. [3] at the Software Engineering Institute (SEI) cast into the methodology supported by Requirements Driven Design tool (RDD-100 3 ) [2] and the Issue Based Information Systems <ref> [4] </ref> (IBIS) model for recording design decisions and design rationales.
Reference: [5] <author> K.J. Lee and et al. </author> <title> An ood paradigm for flight simulators, 2nd edition. </title> <type> Technical Report CMU/SEI-88-TR-30, </type> <institution> Software Engineering Institute, </institution> <year> 1988. </year>
Reference-contexts: This differentiation distinguishes other "domain-analysis" processes from the "domain-engineering" process described in this document. Existing domain-analysis processes fail to distinctly separate "problem-domain analysis" from "solution-space analysis". In particular they tend to focus on the latter rather than the former 4 . Domain-modeling processes (e.g., OCU Model <ref> [5] </ref>), on the other hand, focus on problem-domain analysis. The domain-engineering process described in this document addresses the issues raised by both domain-modeling and domain-analysis processes in the definition of a Domain-Specific Software Architecture.
Reference: [6] <author> D.A. </author> <title> Marca and C.M. McGowan. SADT Structured Analysis and Design Technique. </title> <publisher> McGraw-Hill, </publisher> <address> New York, NY, </address> <year> 1988. </year>
Reference: [7] <author> E.G. Mettala. </author> <title> Domain Specific Software Architectures, </title> <month> June </month> <year> 1990. </year> <title> Presentation at ISTO Software Technology Community Meeting. </title>
Reference: [8] <author> D.L. Parnas. </author> <title> A Technique for Software Module Specification with Examples. </title> <journal> Communications of the ACM, </journal> <volume> 15(5) </volume> <pages> 330-336, </pages> <month> May </month> <year> 1972. </year>
Reference-contexts: What are the optional concepts in this problem domain? 2. What are the reasons that these concepts are op tional? Stage 2.1.2.3: Identify Alternative Concepts It has long been recognized that families of implementations <ref> [8] </ref> exist that provide the same functionality with different performance and space characteristics. While the implementation tradeoffs will be addressed in later stages, the alternative relationship between features, entities, or concepts is important to identify at this abstract level. 12 13 1.
Reference: [9] <author> R. Prieto-Diaz. </author> <title> Domain Analysis for Reusability. </title> <booktitle> In Proceedings of COMPSAC'87, </booktitle> <pages> pages 23-29, </pages> <year> 1987. </year>
Reference-contexts: Another difference between this approach to domain engineering and other domain analysis approaches (e.g., Prieto-Diaz <ref> [9] </ref>) is that case-based reasoning and reverse engineering are not central mechanisms for identifying reusable resources, but rather existing applications are used as vehicles to validate the architectures that are derived, top-down, from generalized user requirements.
Reference: [10] <author> R. Prieto-Diaz. </author> <title> Reuse Library Process Model. </title> <type> Technical Report AD-B157091, </type> <institution> IBM CDRL 03041-002, STARS, </institution> <month> July </month> <year> 1991. </year>
Reference-contexts: It is based on the Reuse Library Process Model that was developed as part of the STARS (Software Technology for Adaptable and Reliable Systems) program by Ruben Prieto-Diaz <ref> [10] </ref> and the Feature-Oriented Domain Analysis (FODA) work by Kyo Kang, Sholom Co-hen, et al. [3] at the Software Engineering Institute (SEI) cast into the methodology supported by Requirements Driven Design tool (RDD-100 3 ) [2] and the Issue Based Information Systems [4] (IBIS) model for recording design decisions and design <p> Before each stage is presented in detail, the overall knowledge-acquisition process is discussed and guidelines presented to assist domain engineers in tailoring the process to meet the goals within their specific domain. Finally, included in the appendix of this document is an outline of the STARS Domain Analysis Process <ref> [10] </ref>. It provides the reader with an opportunity to compare the stages and activities within these two approaches. Terminology and Definitions Before proceeding, in order to avoid unnecessary confusion, it is important to alert the reader to the choice of terminology being used to describe this process. <p> The term feature plays a central role in the FODA process [3], and functional units or domain en tities are described in the STARS process <ref> [10] </ref>. 4 RDD-100 Considerations The RDD-100 (Requirements Driven Design) is a design tool that comes closest to directly supporting the domain-engineering process described in this document. <p> This distinction is partially motivated by an observation Ruben Prieto-Diaz made in describing the Establish Global Requirements stage (A5113 Stage 1.1.3) of the STARS Domain Analysis Activities <ref> [10] </ref> (see appendix A) relating to two kinds of requirements in an application domain: 1. Stable | ones that do not change from application to application, and 2. Variable | ones do/might change.
Reference: [11] <author> W. Tracz. </author> <title> A Conceptual Model for Megapro-gramming. </title> <journal> ACM Software Engineering Notices, </journal> <volume> 16(3) </volume> <pages> 36-45, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: clarity, the reader should note that this process makes a special distinction between the term "requirement", which describes a defining characteristic in the problem space, and the term "constraint", which describes a discriminating characteristic in the solution space. 6 Note: Historically, the term concept is associated with the 3-C Model <ref> [11] </ref> (Concept, Context, and Content) for designing reusable software components.
Reference: [12] <author> W.J. Tracz. </author> <title> Software Reuse Maxims. </title> <journal> ACM Software Engineering Notes, </journal> <volume> 13(4) </volume> <pages> 28-31, </pages> <month> October </month> <year> 1988. </year>
Reference: [13] <author> P.S. Young and R.N. Taylor. Teamware: </author> <title> Process Programming Support for Managers and Teams, </title> <month> July </month> <year> 1992. </year> . 
Reference-contexts: Process Diagram Notation The notation used in the process diagrams that follow has been developed as part of the Teamware Process Programming Language <ref> [13] </ref>. Teamware has been designed to both support specification and enactment of software processes.
References-found: 13

