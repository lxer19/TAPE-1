URL: http://www.cs.ucsb.edu/TRs/techreports/TRCS94-03.ps
Refering-URL: http://www.cs.ucsb.edu/TRs/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Task Dependence and Termination in Ada  
Author: Laura K. Dillon 
Keyword: Ada tasking, task termination, master/dependent relations, distributed termination, run-time storage management, tasking execution model  
Note: Research partially supported by NSF grants CCR-8702905 and CCR-9014382 (with cooperation from DARPA).  
Address: Santa Barbara 93106  
Affiliation: Department of Computer Science University of California,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <editor> ACM SIG Ada. </editor> <booktitle> The Approved Ada Language Commentaries, Spring 1989. </booktitle> <publisher> Grebyn Corporation, </publisher> <address> Vienna, VA. </address>
Reference-contexts: The lifetime of a task instance ends, therefore, with the termination of its direct master. We represent this in our contour model by deallocating the thread for a task instance upon terminating its direct master. 8 Related Work The ALRM and its clarifications <ref> [1] </ref> provide the definitive references for all Ada language features. A variety of Ada language text books [6], [15] describe the language in a more tutorial format, and several specialize in Ada tasking [16],[23].
Reference: [2] <editor> ACM SIG Ada. </editor> <booktitle> Proc. Third Inter. Workshop on Real-Time Ada Issues, </booktitle> <address> Farmington, PA, </address> <month> June </month> <year> 1990. </year> <note> Also published as Ada Letters, X(4), Spring 1990. </note>
Reference-contexts: The rationale mentions the need to protect the integrity of referencing environments as motivation for Ada's termination policy. Outstanding problem areas in Ada relating to tasking and its usability in real-time applications are discussed in <ref> [2] </ref>. These and problems identified in other studies resulted in the Ada 9X requirements [4].
Reference: [3] <institution> Ada 9X Project Office, Software Engineering Institute, Carnegie Mellon University, Pittsburgh. Ada 9X Requirements, </institution> <month> Dec. </month> <year> 1990. </year>
Reference-contexts: At the other extreme, not reclaiming allocated values that are inaccessible wastes storage. The severity of this problem depends on the particular program and the extent to which it makes use of allocated data; for many programs the additional storage demands incurred by a nonreclamation strategy are unacceptable <ref> [3] </ref>. Ada permits a relatively efficient scheme for reclaiming allocated values through the use of collections. In Ada, each access type has an associated collection, which consists of the values designated by values of the access type.
Reference: [4] <institution> Ada 9X Project Office, Software Engineering Institute, Carnegie Mellon University, Pittsburgh. Ada 9X Requirements Rationale, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: The rationale mentions the need to protect the integrity of referencing environments as motivation for Ada's termination policy. Outstanding problem areas in Ada relating to tasking and its usability in real-time applications are discussed in [2]. These and problems identified in other studies resulted in the Ada 9X requirements <ref> [4] </ref>. Requirements address the need to reclaim heap storage, in general, and space used for control blocks of tasks created by an allocator, in particular; they also address problems of access to a task outside its direct master, among many other problems.
Reference: [5] <author> T. Baker and G. A. Riccardi. </author> <title> Ada tasking: From semantics to efficient implementation. </title> <journal> IEEE Software, </journal> <pages> pages 34-46, </pages> <month> Mar. </month> <year> 1985. </year>
Reference-contexts: Brindle and Taylor [12] call the instance that spawns a new task instance the parent frame, and call the task instance associated with the thread that created the parent frame the parent task. Baker and Riccardi <ref> [5] </ref> use parent to refer to this parent task. In [7], the task instance executing the direct master is called the parent. 8 dependents descend from their masters. Figure 2 shows the hierarchy of masters and dependents for the program state depicted in Figure 1. <p> This report does not discuss the rationale behind the definitions of the dependence relations or of the termination rules. Issues relating to task dependence and termination are discussed in <ref> [5] </ref>, which describes a run-time supervisor for Ada tasking. Johnston's contour model provides an operational model for block-structured programming languages that has been used extensively in teaching applications.
Reference: [6] <author> J. P. Barnes. </author> <title> Programming in Ada. </title> <publisher> Addison-Wesley, </publisher> <year> 1982. </year>
Reference-contexts: We represent this in our contour model by deallocating the thread for a task instance upon terminating its direct master. 8 Related Work The ALRM and its clarifications [1] provide the definitive references for all Ada language features. A variety of Ada language text books <ref> [6] </ref>, [15] describe the language in a more tutorial format, and several specialize in Ada tasking [16],[23]. Ichbiah, et. at. [18] discuss the rationale behind the design of the Green language, which was the precursor to Ada. However, the differences between tasking in Green and tasking in Ada are substantial.
Reference: [7] <author> J. P. Barnes. </author> <title> Introducing Ada 9X. Ada Letters, </title> <address> XIII(6):61-132, </address> <month> November/December </month> <year> 1993. </year>
Reference-contexts: Brindle and Taylor [12] call the instance that spawns a new task instance the parent frame, and call the task instance associated with the thread that created the parent frame the parent task. Baker and Riccardi [5] use parent to refer to this parent task. In <ref> [7] </ref>, the task instance executing the direct master is called the parent. 8 dependents descend from their masters. Figure 2 shows the hierarchy of masters and dependents for the program state depicted in Figure 1. Vertical lines represent dynamic links and slanted lines represent direct dependences. <p> A rationale for the design of Ada 9X, which uses essentially the same termination model as Ada 83, appears in <ref> [7] </ref>. This report does not discuss the rationale behind the definitions of the dependence relations or of the termination rules. Issues relating to task dependence and termination are discussed in [5], which describes a run-time supervisor for Ada tasking.
Reference: [8] <author> B. Belkhouche and L. M. Lawrence. </author> <title> A semantic model of Ada tasking. Journal of Pascal, </title> <booktitle> Ada & Modula-2, </booktitle> <pages> pages 29-41, </pages> <month> March/April </month> <year> 1990. </year>
Reference-contexts: An automated version of the model supplies a 22 visual semantics for ALGOL programs [24]. A contour model of Ada tasking very similar to ours is described in <ref> [8] </ref>. The model in [8] is used both to clarify the semantics of the concurrency contructs in Ada and also to evaluate their complexity. <p> An automated version of the model supplies a 22 visual semantics for ALGOL programs [24]. A contour model of Ada tasking very similar to ours is described in <ref> [8] </ref>. The model in [8] is used both to clarify the semantics of the concurrency contructs in Ada and also to evaluate their complexity. The execution model outlined in [12] is designed to support debugging of Ada tasking programs and to provide for display of the dynamic execution status of concurrent programs.
Reference: [9] <author> D. M. Berry. </author> <note> Notes on PL/1. Unpublished lecture notes, </note> <institution> University of California, </institution> <address> Los Angeles, </address> <year> 1975. </year>
Reference-contexts: The model is the basis for a textbook on programming language structures [22], and has been used to illustrate the semantics of parameter passing in Ada [11] and multitasking in PL/1 <ref> [9] </ref>. An automated version of the model supplies a 22 visual semantics for ALGOL programs [24]. A contour model of Ada tasking very similar to ours is described in [8].
Reference: [10] <author> D. M. Berry. </author> <title> Notes on the contour model. </title> <booktitle> Unpublished lecture notes, </booktitle> <institution> University of California, </institution> <address> Los Angeles, </address> <year> 1975. </year>
Reference: [11] <author> D. M. Berry. </author> <title> Treatment of Ada procedures: Aliasing, anomalies, and erroneousness. </title> <type> Technical report, </type> <institution> Unisys Corporation, </institution> <address> Santa Monica, CA, </address> <month> Feb. </month> <year> 1988. </year>
Reference-contexts: Johnston's contour model provides an operational model for block-structured programming languages that has been used extensively in teaching applications. The model is the basis for a textbook on programming language structures [22], and has been used to illustrate the semantics of parameter passing in Ada <ref> [11] </ref> and multitasking in PL/1 [9]. An automated version of the model supplies a 22 visual semantics for ALGOL programs [24]. A contour model of Ada tasking very similar to ours is described in [8].
Reference: [12] <author> A. E. Brindle, R. N. Taylor, and D. F. Martin. </author> <title> A debugger for Ada tasking. </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> 15(3) </volume> <pages> 293-304, </pages> <month> Mar. </month> <year> 1989. </year>
Reference-contexts: These definitions define a hierarchy of masters and dependents for each program state. The hierarchy is rooted in the root task instance of the top level procedure, and organized so that 5 This terminology is not standard. Brindle and Taylor <ref> [12] </ref> call the instance that spawns a new task instance the parent frame, and call the task instance associated with the thread that created the parent frame the parent task. Baker and Riccardi [5] use parent to refer to this parent task. <p> A contour model of Ada tasking very similar to ours is described in [8]. The model in [8] is used both to clarify the semantics of the concurrency contructs in Ada and also to evaluate their complexity. The execution model outlined in <ref> [12] </ref> is designed to support debugging of Ada tasking programs and to provide for display of the dynamic execution status of concurrent programs. The debugger for Ada tasking described in [14] provides a graphical abstraction for rendezvous that helps the user visualize the effects of interprocess synchronization and communicatation.
Reference: [13] <author> L. K. Dillon. </author> <title> A visual execution model for Ada tasking. </title> <journal> ACM Trans. Software Engineering and Methodology, </journal> <volume> 2(4) </volume> <pages> 311-345, </pages> <month> Oct. </month> <year> 1993. </year>
Reference-contexts: The semantics of task dependence and termination in Ada are particularly difficult to understand. Seemingly arbitrary details in the definitions of these concepts makes them hard to motivate and remember, providing a likely source of programming errors. In <ref> [13] </ref> we describe a visual execution model for Ada tasking that is designed to help programmers attain a deeper understanding of the tasking semantics. <p> A more comprehensive description of the model appears in <ref> [13] </ref>. For brevity, we consider only the interaction between procedures and tasks; problems arising from their interaction illustrate the main issues of concern for termination. This section assumes familiarity with the fundamentals of tasking in Ada.
Reference: [14] <author> M. B. Feldman and M. L. Moran. </author> <title> Validating a demonstration tool for graphics-assisted debugging of Ada concurrent programs. </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> 15(3) </volume> <pages> 305-313, </pages> <month> Mar. </month> <year> 1989. </year>
Reference-contexts: The execution model outlined in [12] is designed to support debugging of Ada tasking programs and to provide for display of the dynamic execution status of concurrent programs. The debugger for Ada tasking described in <ref> [14] </ref> provides a graphical abstraction for rendezvous that helps the user visualize the effects of interprocess synchronization and communicatation. A compiler/interpreter for Ada tasking, called Small-Ada, has been found to be effective in teaching concurrency constructs [21].
Reference: [15] <author> N. Gehani. </author> <title> Ada, an Advanced Introduction. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1983. </year>
Reference-contexts: We represent this in our contour model by deallocating the thread for a task instance upon terminating its direct master. 8 Related Work The ALRM and its clarifications [1] provide the definitive references for all Ada language features. A variety of Ada language text books [6], <ref> [15] </ref> describe the language in a more tutorial format, and several specialize in Ada tasking [16],[23]. Ichbiah, et. at. [18] discuss the rationale behind the design of the Green language, which was the precursor to Ada. However, the differences between tasking in Green and tasking in Ada are substantial.
Reference: [16] <author> N. Gehani. </author> <title> Ada: Concurrent Programming. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1984. </year>
Reference: [17] <author> J. Goodenough. </author> <title> Real-time tasking semantics working group: Recovering storage for terminated tasks. </title> <booktitle> In ACM SIG Ada [2], </booktitle> <pages> page 46. </pages>
Reference-contexts: However, this is regarded as a pathological case and of no practical use; it has been recommended that this case be considered erroneous because of the negative impact that it has on the implementation of storage recovery for terminated tasks <ref> [17] </ref>. 17 - - main 1 : : : : : : main 1 dependences tt 1 p 1 q 1 tt 1 %RET main 1 T %RET q 1 s8 P Theorem 4 implies that no thread can invoke the entries of a server task instance if some master of
Reference: [18] <author> J. Ichbiah. </author> <title> Rationale for the design of the Ada programming language. </title> <journal> SIGPLAN Notices, </journal> <volume> 14(6), </volume> <year> 1979. </year>
Reference-contexts: A variety of Ada language text books [6], [15] describe the language in a more tutorial format, and several specialize in Ada tasking [16],[23]. Ichbiah, et. at. <ref> [18] </ref> discuss the rationale behind the design of the Green language, which was the precursor to Ada. However, the differences between tasking in Green and tasking in Ada are substantial. A rationale for the design of Ada was developed after it became both an ANSI and military standard [19].
Reference: [19] <author> J. Ichbiah, J. Barnes, R. Firth, and M. Woodger. </author> <title> Rationale for the Design of the Ada Programming Language. </title> <publisher> Cambridge University Press, </publisher> <year> 1991. </year>
Reference-contexts: However, the differences between tasking in Green and tasking in Ada are substantial. A rationale for the design of Ada was developed after it became both an ANSI and military standard <ref> [19] </ref>. The goal of the rationale is to impart the overall philosophy of the language design and to explain the motivation behind key features of the language. The rationale mentions the need to protect the integrity of referencing environments as motivation for Ada's termination policy.
Reference: [20] <author> J. B. Johnston. </author> <title> The contour model of block structured processes. </title> <booktitle> In Proc. ACM Symp. Data Structures in Programming Languages, </booktitle> <pages> pages 35-82, </pages> <month> Feb. </month> <year> 1971. </year> <journal> SIGPLAN Notices. </journal> <volume> 25 </volume>
Reference-contexts: In [13] we describe a visual execution model for Ada tasking that is designed to help programmers attain a deeper understanding of the tasking semantics. Derived from Johnston's contour model for block-structured programming languages <ref> [20] </ref>, it uses contour diagrams to illustrate the execution of a tasking program in a concrete pictorial fashion. In this paper, we use the model to analyze the semantics of task dependence and termination in Ada.
Reference: [21] <author> A. V. Lopes, M. B. Feldman, and R. S. Heller. </author> <title> A controlled experiment with software for teaching Ada tasking. </title> <booktitle> In Proc. </booktitle> <address> Tri-Ada 93, Seattle, WA, </address> <month> Sept. </month> <year> 1993. </year> <note> ACM SIGAda. </note>
Reference-contexts: The debugger for Ada tasking described in [14] provides a graphical abstraction for rendezvous that helps the user visualize the effects of interprocess synchronization and communicatation. A compiler/interpreter for Ada tasking, called Small-Ada, has been found to be effective in teaching concurrency constructs <ref> [21] </ref>. Small-Ada scrolls the source code of tasks as they execute, permitting the user to observe the execution of a concurrent program. User-selectable tasking options give the user control over the speed of execution and the scheduling of ready tasks.
Reference: [22] <author> E. I. Organick, A. I. Forsythe, and R. P. Plummer. </author> <title> Programming Language Structures. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <note> second edition, </note> <year> 1978. </year>
Reference-contexts: Johnston's contour model provides an operational model for block-structured programming languages that has been used extensively in teaching applications. The model is the basis for a textbook on programming language structures <ref> [22] </ref>, and has been used to illustrate the semantics of parameter passing in Ada [11] and multitasking in PL/1 [9]. An automated version of the model supplies a 22 visual semantics for ALGOL programs [24]. A contour model of Ada tasking very similar to ours is described in [8].
Reference: [23] <author> K. Shumate. </author> <title> Understanding Concurrency in Ada. </title> <publisher> McGraw-Hill, </publisher> <year> 1988. </year>
Reference: [24] <author> J. W. Thomas and E. I. Organick. </author> <title> Visible semantics for programming languages. </title> <booktitle> In Proc. 1974 ACM National Conf., </booktitle> <pages> pages 416-421, </pages> <year> 1974. </year>
Reference-contexts: The model is the basis for a textbook on programming language structures [22], and has been used to illustrate the semantics of parameter passing in Ada [11] and multitasking in PL/1 [9]. An automated version of the model supplies a 22 visual semantics for ALGOL programs <ref> [24] </ref>. A contour model of Ada tasking very similar to ours is described in [8]. The model in [8] is used both to clarify the semantics of the concurrency contructs in Ada and also to evaluate their complexity.
Reference: [25] <institution> United States Department of Defense, </institution> <address> Washington, D.C. </address> <booktitle> Reference Manual for the Ada Programming Language, </booktitle> <month> Jan. </month> <year> 1983. </year> <note> ANSI/MIL-STD-1815A. 26 </note>
Reference-contexts: Concurrency adds an extra dimension to the complexity of writing and understanding programs, and the extreme complexity of the semantics of Ada tasking compounds this problem. The Ada Language Reference Manual (ALRM) <ref> [25] </ref> and other natural language descriptions of tasking are subject to incompleteness and misinterpretation. Such descriptions provide little help in visualizing the effects of potential interactions among tasks in a program. The semantics of task dependence and termination in Ada are particularly difficult to understand.
References-found: 25

