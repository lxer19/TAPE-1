URL: ftp://ftp.cs.york.ac.uk/pub/realtime/papers/AdaUK_CBW.ps.Z
Refering-URL: http://www.csd.uu.se/~bjornfot/r2.html
Root-URL: 
Title: Worst-case timing analysis of exception handling in Ada  
Author: Roderick Chapman, Alan Burns, Andy Wellings 
Address: York, York, U.K.  
Affiliation: British Aerospace Dependable Computing Systems Centre, Department of Computer Science, University of  
Abstract: This paper describes a method for analysing the timing properties of exception handling in Ada. The paper first describes how exceptions are implemented and considers the use of exceptions in the SPARK, Safe/Ada and ANNA subsets. A static analysis technique for reasoning about exception propagation is then presented. We argue that this technique, along with a suitable subset and detailed knowledge of exception implementation can be used to develop an accurate worst-case timing analysis system. The method is illustrated with an example. Finally, our conclusions and plans for further work are presented.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Park, C.Y., </author> <title> Predicting Program Execution Times by Analyzing Static and Dynamic Program Paths. </title> <journal> Journal of Real-Time Systems, 1993. </journal> <volume> 5: </volume> <pages> p. 31-62. </pages>
Reference: [2] <author> Pospischil, G., et al. </author> , <title> Developing Real-Time Tasks with Predictable Performance. </title> <journal> IEEE Software, 1992. </journal> <volume> 9: </volume> <pages> p. 35-44. </pages>
Reference: [3] <author> Stoyenko, A.D., C. Hamacher, </author> <title> and R.C. Holt, Analyzing Hard Real-Time Programs for Guaranteed Schedulability. </title> <journal> IEEE Transactions on Software Engineering, 1991. </journal> <volume> 17(8): </volume> <pages> p. 737-750. </pages>
Reference: [4] <author> Baker, </author> <title> T.P. and G.A. Riccardi, Implementing Ada Exceptions. </title> <journal> IEEE Software, 1986. </journal> <volume> 3(5): </volume> <editor> p. </editor> <volume> 43 - 51. </volume>
Reference-contexts: The sections below look at each of the standard implementation techniques, concentrating on their impact upon timing analysis. A more detailed description is given by Baker and Riccardi <ref> [4] </ref> . 2.1. Detecting exceptions The job of detecting whether an exception must be raised can be subdivided into the following cases: Predefined exceptions, implicitly detected. Predefined exceptions, detected by runtime checks. User defined exceptions.
Reference: [5] <author> Forsyth, C.H., </author> <title> Implementation of the Worst-Case Execution Time Analyser . June 1992, </title> <institution> York Software Engineering Ltd., </institution> <address> University of York: </address> <booktitle> Task 8 Volume E Deliverable on ESTEC contract 9198/90/NL/SF </booktitle>
Reference-contexts: Timing analysis for these situations is well-understood <ref> [5] </ref> . 2.4. Exception propagation The major complexity in Ada83 exceptions occurs when no handler can be found in the current frame - the exception must then be propagated to the enclosing frames, searching for a handler in each. <p> We assume that a method for determining the WCET of normal code sequences, handlers, and the relevant parts of the runtime system already exists <ref> [5] </ref> . <p> Through this study, a model for the static timing analysis of exceptions has been developed. We feel this model is general enough to be applied to most implementations of Ada. The York Ada compilation system [11] is currently supported by a prototype worst-case execution time tool <ref> [5] </ref> . The compilation system and timing tool target a bare 68020 - based microcomputer. The timing tool supports our language subset but does not attempt any form of exception flow analysis, relying on purely syntactic means. Its analysis is therefore rather pessimistic when exceptions are used.
Reference: [6] <author> Carre, B.A., et al. </author> , <title> SPARK: the SPADE Ada Kernel (edition 3.1). 1992, Program Validation Ltd. </title>
Reference-contexts: Without tasking, the runtime-system routines needed to handle and propagate exceptions are much simpler (mainly owing to the absence of the abort statement and the complex exception handling when tasks are engaged in a rendezvous). 2.5.2. SPARK The SPARK Ada subset <ref> [6] </ref> totally excludes exceptions. SPARKs designers argue that user-defined exceptions should not be needed and that the predefined exceptions should never be raised in a well-constructed program. They also cite the lack of a formal definition of exceptions as a reason for their exclusion. <p> First, a model of the control flow of exceptions is developed. From this, a scheme to analyse their timing is derived. We start by considering the language subset. Our base is the SPARK Ada subset <ref> [6] </ref> . SPARK's goals (formal definition, logical soundness, amenability to formal proof, bounded space and time etc.) make it ideal as a base for a worst-case execution time analysis system.
Reference: [7] <author> Winterstein, D. and R. Holzapfel, </author> <title> The Use of Ada for Safety Critical Applications: Appendix A: Safe Ada Language Study. </title> <year> 1987, </year> <month> EuroFighter/Systeam. </month>
Reference-contexts: We should remember that the major goals of SPARK (formal definition and proof) force different decisions from those that might be taken if a subset was developed with only timing analysis in mind. 2.5.3. Safe/Ada The goals of the Safe Ada subset <ref> [7] </ref> are slightly different from those of SPARK. Safe Ada does not stress formal definition and proof to the same extent as SPARK: the Safe Ada subset is therefore significantly larger than SPARK.
Reference: [8] <author> Luckham, D.C., et al. , ANNA: </author> <title> A language for annotating Ada programs. </title> <booktitle> Lecture notes in Computer Science, </booktitle> <editor> ed. G. Goos and J. Hartmanis. </editor> <volume> Vol. 260. </volume> <year> 1987, </year> <note> Springer-Verlag. 143. </note>
Reference-contexts: The nesting depth is limited by excluding recursive calls from Safe Ada. This approach does indeed place an upper bound on the exception handling time, but says nothing about how such a bound could be determined. 2.5.4. ANNA The ANNA language <ref> [8] </ref> is an extended version of Ada intended to support the formal specification of the intended behaviour of a program. These specifications are written as annotations in a programs source text.
Reference: [9] <author> Baker, D.A. and S.M. Sutton, </author> <title> Exception Flow Analysis in Ada. 1986, </title> <institution> Department of Computer Science, University of Colorado, Boulder. </institution>
Reference-contexts: Weak annotations are also useful, since they specify a state to which a program must return after handling a possibly unexpected exception. 3. Exception flow analysis This section considers the sole technique <ref> [9] </ref> that has been proposed for the static analysis of Ada exceptions. Baker and Sutton realise that the flow of exceptions is, in some ways, analogous to the flow of data in a program. Their technique is therefore based upon the traditional dataflow analysis techniques performed by many optimising compilers.
Reference: [10] <author> Sutton, </author> <title> S.M., </title> <type> Personal communication. </type> <year> 1992, </year>
Reference-contexts: The when others and anonymous-raise constructs are difficult to handle. The when-others effectively kills all live exceptions entering a context. A raise in a handler effectively resurrects them. Unfortunately, this work was never followed up <ref> [10] </ref> so none of the above problems were resolved. We feel, though, that these ideas offer a useful basis for developing a static analysis technique for reasoning about the propagation of exceptions. 4. Timing analysis of exceptions This section considers how timing analysis of exceptions can be performed.
Reference: [11] <author> Firth, J.R., C.H. Forsyth, and I.C. Wand, </author> <title> York Ada Compiler Release 4 User Guide. 1989, </title> <institution> Department of Computer Science, University of York. </institution>
Reference-contexts: Through this study, a model for the static timing analysis of exceptions has been developed. We feel this model is general enough to be applied to most implementations of Ada. The York Ada compilation system <ref> [11] </ref> is currently supported by a prototype worst-case execution time tool [5] . The compilation system and timing tool target a bare 68020 - based microcomputer. The timing tool supports our language subset but does not attempt any form of exception flow analysis, relying on purely syntactic means.
Reference: [12] <author> Carr, B., J. Garnsworthy, and W. Marsh. </author> <title> SPARK A Safety-Related Ada Subset . in AdaUK 1992 . 1992. </title> <address> London, U.K.: </address> <publisher> IOS Press. </publisher>
Reference-contexts: These improvements will be complemented by a symbolic execution tool that will perform inter-procedural constant - propagation, dead-code elimination and so on. This tool will also be able to produce verification conditions in the style of the SPARK examiner <ref> [12] </ref>. It is possible that the use of weak propagation annotations will allow verification condition generation to be performed for both the normal and exception paths of a program. Finally, we plan to introduce some features of Ada9X into our subset, including a limited form of tasking and protected objects.
Reference: [13] <author> Audsley, N., et al., </author> <title> Applying New Scheduling Theory to Static Priority Preemptive Scheduling. </title> <journal> Software Engineering Journal, </journal> <note> 1993. to appear </note> . 
Reference-contexts: Non-nested, library-level tasks and protected objects will be allowed supported by certain features of the Ada9X real-time systems annex, notably priority ceiling inheritance scheduling. Our model for exception analysis is largely unchanged by these additions. Recent advances in schedulability analysis <ref> [13] </ref> will allow the construction of large parallel systems with totally predictable timing properties. Acknowledgements The authors thank Peter Fenelon and John McDermid for their valuable comments on an early draft of this paper.
References-found: 13

