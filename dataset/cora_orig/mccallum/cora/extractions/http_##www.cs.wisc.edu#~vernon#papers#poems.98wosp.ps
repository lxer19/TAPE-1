URL: http://www.cs.wisc.edu/~vernon/papers/poems.98wosp.ps
Refering-URL: http://www.cs.wisc.edu/~vernon/papers.html
Root-URL: 
Title: POEMS: End-to-end Performance Design of Large Parallel Adaptive Computational Systems  
Author: Ewa Deelman* Aditya Dube** Adolfy Hoisie Yong Luo Richard L. Oliver David Sundaram-Stukel Harvey Wasserman Vikram S. Adve Rajive Bagrodia* James C. Browne** Elias Houstis Olaf Lubeck John Rice Patricia J. Teller Mary K. Vernon 
Web: http://www.cs.utexas.edu/users/poems  
Address: Wisconsin Madison  
Affiliation: Purdue University, Los Alamos National Laboratory, Rice University, *University of California at Los Angeles, **University of Texas at Austin, University of Texas at El Paso, University of  
Abstract: The POEMS project is creating an environment for end-toend performance modeling of complex parallel and distributed systems, spanning the domains of application software, runtime and operating system software, and hardware architecture. To enable end-to-end modeling of large-scale applications and systems, the POEMS framework is designed to compose models of system components from these different domains, to integrate multiple modeling paradigms (analytical modeling, simulation, and actual system execution), and to allow different components to be modeled at multiple levels of detail. The key components of the POEMS framework include a generalized task graph model for describing parallel computations, automatic generation of the task graph by a parallelizing compiler, a specification language for mapping the computation on models for operating system and hardware components, a library of analytical and simulation models for components from the different domains, and a knowledge base describing the performance properties of widely-used algorithms. This paper provides an overview of the POEMS methodology and illustrates several key components of the POEMS framework. We illustrate the POEMS modeling capabilities for performance prediction of Sweep3D, a complex benchmark for evaluating wavefront application technologies and high performance parallel architectures. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Adve, V. S., </author> <title> Analyzing the Behavior and Performance of Parallel Programs, </title> <institution> Univ. of Wisconsin-Madison, </institution> <type> UW CS Tech. Rep. #1201, </type> <month> Oct. </month> <year> 1993. </year>
Reference-contexts: The project supports evaluation of component behaviors through analytical models and through application of discrete-event simulation at multiple levels of detail. The analytical models include deterministic task graph analysis <ref> [1] </ref>, and the LogP [8] and LoPC models [9]. POEMS supports detailed simulation of a variety of state-of-the-art processors and memory hierarchies and incorporates parallel evaluation of discrete-event simulation models through application of the Maisie simulator [4]. <p> It is independent of program input values and computed results. The dynamic task graph is a directed acyclic graph that captures the precise parallel structure of an execution of the application for a given input <ref> [1] </ref>. The dynamic task graph is important for supporting detailed and precise modeling of parallel program behavior. <p> If other pipelined wavefront applications exhibit contention for message processing resources, this contention can be included in the LoPC model as noted above. 4.2 Deterministic Task Graph Analysis Another analytical model in POEMS is parallel program performance prediction based on deterministic task graph analysis <ref> [1] </ref>. The inputs to the model are a task graph that describes the tasks and synchronization behavior of an application, a description of the task scheduling method used to allocate tasks to processors, and parameters describing the computational cost and average communication rate of each task. <p> It also has been shown to be useful for predicting the impact of program design changes, including the benefits of sophisticated dynamic and semi-static scheduling algorithms that improve communication locality as well as load-balancing <ref> [1] </ref>. Task graph analysis of the Sweep3D application is in progress. 4.3 Execution-driven System Simulation POEMS includes a modular, execution-driven, parallel program simulator called MPI-SIM that has been developed at UCLA [15].
Reference: [2] <author> Adve, V. S., and M. K. Vernon, </author> <title> Influence of Random Delays on Parallel Execution Times, </title> <booktitle> Proc. 1993 ACM SIGMETRICS Conf. on Measurement and Modeling of Computer Systems, </booktitle> <month> May </month> <year> 1993, </year> <pages> pp. 61-73. </pages>
Reference-contexts: The queueing network model is solved using AMVA to compute the mean values of the task residence times, and these are used as deterministic task execution times in analyzing the task graph model <ref> [2] </ref>. A modified critical path analysis is used to analyze the task graph, modified to account for task scheduling when the number of ready tasks exceeds the number of available processors.
Reference: [3] <author> Adve, V. S., and J. Mellor-Crummey, </author> <title> Using Integer Sets for Data-Parallel Program Analysis and Optimization, </title> <booktitle> SIGPLAN98, </booktitle> <address> Montreal, </address> <month> June </month> <year> 1998. </year>
Reference-contexts: For other cases, the dynamic graph is computed on demand (from the static task graph) during model evaluation. Data-parallel compiler technology from the Rice University dHPF compiler project <ref> [3] </ref> will be used to compute the static task graph representation for key example programs, including High Performance Fortran (HPF) as well as manually parallelized programs.
Reference: [4] <author> Bagrodia, R., and W. Liao, Maisie: </author> <title> A Language for Design of Efficient Discrete-event Simulations, </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> Apr. </month> <year> 1994. </year>
Reference-contexts: The analytical models include deterministic task graph analysis [1], and the LogP [8] and LoPC models [9]. POEMS supports detailed simulation of a variety of state-of-the-art processors and memory hierarchies and incorporates parallel evaluation of discrete-event simulation models through application of the Maisie simulator <ref> [4] </ref>. The project is also building a knowledge base of performance data that can be used to estimate the performance properties of widely-used algorithms as a function of architectural characteristics. POEMS development is being driven by modeling of the behavior of large-scale complex applications on parallel architectures. <p> There are many research projects focusing on performance modeling. The most closely related projects to POEMS are probably the Maisie parallel discrete-event simulation framework and its use in parallel program simulation <ref> [4, 15] </ref>, SimOS [18], and RSIM [13] and the earlier work in program simulators, direct execution simulators, and parallel discrete-event simulation. The conceptual extensions offered by POEMS are a formal specification language for composition of system models and integration of multiple paradigms for model evaluation.
Reference: [5] <author> Bagrodia, R., S. Docy, and A. Kahn, </author> <title> Parallel Simulation of Parallel File Systems and I/O Programs, </title> <booktitle> Proc. Supercomputing 97, </booktitle> <address> San Jose, </address> <year> 1997. </year>
Reference-contexts: MPI-SIM can evaluate the performance of existing MPI programs as a function of various hardware and system software characteristics that include the number of processors, interconnection network characteristics, or message-passing library implementations. The simulator can also be used to evaluate the performance of parallel file systems and I/O systems <ref> [5] </ref>. Supported capabilities include a number of different disk caching algorithms, collective I/O techniques, disk cache replacement algorithms, and I/O device models. MPI-SIM simulates the application program by using direct execution to simulate local code fragments and parallel discrete-event simulation to simulate communication (point-point and collective operations) and I/O operations.
Reference: [6] <author> Bayerdorffer, B., </author> <title> Associative Broadcast and the Communication Semantics of Naming in Concurrent Systems, </title> <type> Ph.D. Dissertation, </type> <institution> Dept. of Computer Sciences, Univ. of Texas at Austin, </institution> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: An object that has associative interfaces is said to be an associative object and an object that interacts through associative interfaces is said to have associative interactions. An associative interface is an extension of the associative model of communication <ref> [6] </ref> to define complex dynamic interactions among object instances. An accepts interface consists of a profile, a transaction, and a protocol. A profile is a set of name/value pairs over the attributes of the domains. An object may change its profile during execution. <p> The references cited in this section are the most pertinent sources of concepts. The conceptual framework for POEMS is a synthesis from models of naming and communication <ref> [6, Bayerdorffer 95] </ref>, Computer-Aided Design (CAD), software frameworks, parallel computation [12], object-oriented analysis [19], data mediation [24] and intelligent agents. There are many research projects focusing on performance modeling.
Reference: [7] <author> Booch, G., J. Rumbaugh, and I. Jacobson, </author> <title> Unified Modeling Language User Guide, </title> <publisher> Addison-Wesley, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1997. </year> <month> 13 </month>
Reference-contexts: Data mediation methods [24] are used to integrate the associative objects, thus enabling composition of multi-scale, multi-domain and multi-paradigm components into a coherent system model. An associative object is a standard object encapsulated with an associative interface <ref> [19, 17, 7] </ref>. The key concepts are that objects are defined in the context of a semantic domain and the properties of objects are defined in terms of the attribute set of a semantic domain. As an example, the POEMS hardware domain is comprised of three classes of component models.
Reference: [8] <author> Culler, D., R. Karp, D. Patterson, A. Sahay, K. E. Schauser, E. Santos, R. Subramonian, and T. VonEiken, </author> <title> LogP: Towards a Realistic Model of Parallel Computation, </title> <booktitle> Proc. 4 th ACM SIGPLAN Symp. on Principles and Practices of Parallel Programming (PpoPP 93), </booktitle> <address> San Diego, </address> <month> May </month> <year> 1993, </year> <pages> pp. 1-12. </pages>
Reference-contexts: The project supports evaluation of component behaviors through analytical models and through application of discrete-event simulation at multiple levels of detail. The analytical models include deterministic task graph analysis [1], and the LogP <ref> [8] </ref> and LoPC models [9]. POEMS supports detailed simulation of a variety of state-of-the-art processors and memory hierarchies and incorporates parallel evaluation of discrete-event simulation models through application of the Maisie simulator [4]. <p> POEMS Performance Analysis Tools In this section we describe the initial POEMS analytical and simulation tools for end-end performance prediction, illustrating how these tools are applied to Sweep3D. 4.1 LogP and LoPC Two of the analytical modeling capabilities in POEMS are the LogP model <ref> [8] </ref> and an extension of LogP known as LoPC [9]. The task graph for a given application elucidates the principal structure of the code, including the communication events, from which it is relatively easy to generate the LogP or LoPC equations. We illustrate this approach using the Sweep3D application.
Reference: [9] <author> Frank, M. I., A. Agarwal, and M. K. Vernon, LoPC: </author> <title> Modeling Contention in Parallel Algorithms, </title> <booktitle> Proc. 6 th ACM SIGPLAN Symp. on Principles and Practices of Parallel Programming (PpoPP 97), </booktitle> <address> Las Vegas, </address> <month> June </month> <year> 1997, </year> <pages> pp. 62-73. </pages>
Reference-contexts: The project supports evaluation of component behaviors through analytical models and through application of discrete-event simulation at multiple levels of detail. The analytical models include deterministic task graph analysis [1], and the LogP [8] and LoPC models <ref> [9] </ref>. POEMS supports detailed simulation of a variety of state-of-the-art processors and memory hierarchies and incorporates parallel evaluation of discrete-event simulation models through application of the Maisie simulator [4]. <p> Tools In this section we describe the initial POEMS analytical and simulation tools for end-end performance prediction, illustrating how these tools are applied to Sweep3D. 4.1 LogP and LoPC Two of the analytical modeling capabilities in POEMS are the LogP model [8] and an extension of LogP known as LoPC <ref> [9] </ref>. The task graph for a given application elucidates the principal structure of the code, including the communication events, from which it is relatively easy to generate the LogP or LoPC equations. We illustrate this approach using the Sweep3D application.
Reference: [10] <author> Hoisie, A., O. M. Lubeck, and H. J. Wasserman. </author> <title> Performance Analysis of Multidimensional Wavefront Algorithms with Applications to Sn Transport, </title> <note> in preparation, </note> <month> Apr. </month> <year> 1998. </year>
Reference-contexts: Furthermore, the breakdown of the total computation time and communication time predicted by the model shows that Sweep3D is heavily cpu-bound. Details of a scalability study of Sweep3D using the LogP model can be found in <ref> [10] </ref>.
Reference: [11] <author> Koch, K. R., R. S. Baker, and R.E. Alcouffe, </author> <title> Solution of the First-Order Form of the 3-D Discrete Ordinates Equation on a Massively Parallel Processor, </title> <journal> Trans. of the Amer. Nuc. Soc., </journal> <volume> 65(198), </volume> <year> 1992. </year>
Reference-contexts: This section contains a brief description of this application; section 4 discusses how the performance analysis tools in POEMS are being applied to Sweep3D. 3.1 Overview of Sweep3D The Sweep3D kernel is a solver for the three-dimensional, time-independent, neutral particle transport equation on an orthogonal mesh <ref> [11] </ref>.
Reference: [12] <author> Newton, P., and J. C. Browne, </author> <title> The CODE 2.0 Graphical Parallel Programming Language, </title> <booktitle> Proc. ACM Int. Conf. on Supercomputing, </booktitle> <month> July </month> <year> 1992. </year>
Reference-contexts: The references cited in this section are the most pertinent sources of concepts. The conceptual framework for POEMS is a synthesis from models of naming and communication [6, Bayerdorffer 95], Computer-Aided Design (CAD), software frameworks, parallel computation <ref> [12] </ref>, object-oriented analysis [19], data mediation [24] and intelligent agents. There are many research projects focusing on performance modeling.
Reference: [13] <author> Pai, V. S., P. Ranganathan, and S. V. Adve. </author> <title> RSIM Reference Manual version 1.0, </title> <type> Technical Report #9705, </type> <institution> Dept. of Electrical and Computer Engineering, Rice Univ., </institution> <month> Aug. </month> <year> 1997. </year>
Reference-contexts: There are many research projects focusing on performance modeling. The most closely related projects to POEMS are probably the Maisie parallel discrete-event simulation framework and its use in parallel program simulation [4, 15], SimOS [18], and RSIM <ref> [13] </ref> and the earlier work in program simulators, direct execution simulators, and parallel discrete-event simulation. The conceptual extensions offered by POEMS are a formal specification language for composition of system models and integration of multiple paradigms for model evaluation.
Reference: [14] <author> Pai, V. S., P. Ranganathan, and S. V. Adve. </author> <title> The Impact of Instruction Level Parallelism on Multiprocessor Performance and Simulation Methodology, </title> <booktitle> Proc. 3rd Int. Conf. on High Performance Computer Architecture, </booktitle> <address> San Antonio, </address> <month> March </month> <year> 1997, </year> <pages> pp. 72-83. </pages>
Reference-contexts: Three types of instruction-level CPU simulation are being considered: instruction-driven, execution-driven, and tracedriven. Instruction-driven simulation (IDS) of the CPU can be enhanced to include simulation of instruction-level parallelism (ILP). This IDS-ILP modeling has been shown to be essential for accurate evaluation of task execution times <ref> [14] </ref> and validation of analytical models. Modeling of the micro-architecture guarantees an accurate delivery sequence of memory addresses to the memory hierarchy simulator. Because a computational unit is executed each time a simulation is run, IDS-ILP captures both the dynamics of the application code and the memory reference behavior.
Reference: [15] <author> Prakash, S., R. </author> <title> Bagrodia Using Parallel Simulation to Evaluate MPI Programs. </title> <booktitle> To appear in Winter Simulation Conference 1998. </booktitle>
Reference-contexts: Task graph analysis of the Sweep3D application is in progress. 4.3 Execution-driven System Simulation POEMS includes a modular, execution-driven, parallel program simulator called MPI-SIM that has been developed at UCLA <ref> [15] </ref>. MPI-SIM can evaluate the performance of existing MPI programs as a function of various hardware and system software characteristics that include the number of processors, interconnection network characteristics, or message-passing library implementations. <p> Note that the translation of collective communication functions in the simulator is identical to how they are implemented on the target architecture. MPI-SIM has been validated against the NAS MPI benchmarks and has demonstrated excellent performance improvement with parallel execution against these benchmarks <ref> [15] </ref>. Section 5 presents results on the scalability and performance of Sweep3D as predicted by MPI-SIM. A facility to simulate the task graph notation expressed as an MPI program is currently being developed. <p> There are many research projects focusing on performance modeling. The most closely related projects to POEMS are probably the Maisie parallel discrete-event simulation framework and its use in parallel program simulation <ref> [4, 15] </ref>, SimOS [18], and RSIM [13] and the earlier work in program simulators, direct execution simulators, and parallel discrete-event simulation. The conceptual extensions offered by POEMS are a formal specification language for composition of system models and integration of multiple paradigms for model evaluation.
Reference: [16] <author> Ramakrishnan, N., </author> <title> Recommender Systems for Problem Solving Environments, </title> <type> Ph.D. Dissertation, </type> <institution> Dept. of Computer Sciences, Purdue Univ., </institution> <year> 1997. </year>
Reference-contexts: We are using a kernel (IFESTOS), developed at Purdue <ref> [16] </ref>, that supports the rapid prototyping of recommender systems. IFESTOS abstracts the architecture of a recommender system as a layered system with clearly defined subsystems for problem formulation, knowledge acquisition, performance modeling, and knowledge discovery. <p> Performance analysis is performed by traditional attribute-value statistical techniques and mining this information produces useful rules that can be used to drive the actual recommender system. This approach has been demonstrated successfully for problem domains in numerical quadrature and elliptic partial differential equations <ref> [16] </ref>. Currently it is being applied to the Sweep3D application, described next. 3. POEMS Driver Application: Sweep3D We consider the problem of predicting the performance of an ASCI kernel application called Sweep3D on large-scale parallel architectures such as the IBM SP/2 or the SGI Origin2000.
Reference: [17] <editor> Rumbaugh, J., et al. </editor> <booktitle> ObjectOriented Modeling and Design, </booktitle> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1991. </year>
Reference-contexts: Data mediation methods [24] are used to integrate the associative objects, thus enabling composition of multi-scale, multi-domain and multi-paradigm components into a coherent system model. An associative object is a standard object encapsulated with an associative interface <ref> [19, 17, 7] </ref>. The key concepts are that objects are defined in the context of a semantic domain and the properties of objects are defined in terms of the attribute set of a semantic domain. As an example, the POEMS hardware domain is comprised of three classes of component models.
Reference: [18] <author> Rosenblum, M., S.A. Herrod, E. Witchel, and A. Gupta, </author> <title> Complete Computer System Simulation: The SimOS Approach, </title> <booktitle> IEEE Parallel and Distributed Technology, Winter 1995, </booktitle> <pages> pp. 34-43. </pages>
Reference-contexts: There are many research projects focusing on performance modeling. The most closely related projects to POEMS are probably the Maisie parallel discrete-event simulation framework and its use in parallel program simulation [4, 15], SimOS <ref> [18] </ref>, and RSIM [13] and the earlier work in program simulators, direct execution simulators, and parallel discrete-event simulation. The conceptual extensions offered by POEMS are a formal specification language for composition of system models and integration of multiple paradigms for model evaluation.
Reference: [19] <author> Shlaer, S., and S. Mellor, </author> <title> Object Lifecycles: Modeling the World in States, </title> <publisher> Yourdon Press, </publisher> <address> NY, </address> <year> 1992. </year>
Reference-contexts: Data mediation methods [24] are used to integrate the associative objects, thus enabling composition of multi-scale, multi-domain and multi-paradigm components into a coherent system model. An associative object is a standard object encapsulated with an associative interface <ref> [19, 17, 7] </ref>. The key concepts are that objects are defined in the context of a semantic domain and the properties of objects are defined in terms of the attribute set of a semantic domain. As an example, the POEMS hardware domain is comprised of three classes of component models. <p> The references cited in this section are the most pertinent sources of concepts. The conceptual framework for POEMS is a synthesis from models of naming and communication [6, Bayerdorffer 95], Computer-Aided Design (CAD), software frameworks, parallel computation [12], object-oriented analysis <ref> [19] </ref>, data mediation [24] and intelligent agents. There are many research projects focusing on performance modeling.
Reference: [20] <author> Singh, J. P., W.-D. Weber and A. Gupta, </author> <title> "SPLASH: Stanford Parallel Applications for Shared-Memory, </title> <journal> Computer Architecture News, </journal> <volume> 20(1), </volume> <month> Mar. </month> <year> 1992, </year> <pages> pp. 5-44. </pages>
Reference-contexts: The deterministic task graph analysis has been shown to be efficient and consistently accurate for several shared-memory programs (including three from the Splash benchmarks <ref> [20] </ref>). It also has been shown to be useful for predicting the impact of program design changes, including the benefits of sophisticated dynamic and semi-static scheduling algorithms that improve communication locality as well as load-balancing [1].
Reference: [21] <author> Sorin, D. J., V. S. Pai, S. V. Adve, M. K. Vernon, and D. A. Wood, </author> <title> Analytic Evaluation of Shared-Memory with ILP Processors, </title> <booktitle> to appear in the 25 th Annual Int. Symp on Computer Architecture, </booktitle> <month> May </month> <year> 1998. </year>
Reference-contexts: However, for processors with ILP, a simple playback of the recorded trace does not provide an accurate delivery sequence of memory address to the memory hierarchy simulator <ref> [21] </ref>. In addition, since TDS is driven by a memory address trace that is recorded from a single execution of a program it may not capture the dynamics of the application code [22] and the recorded trace may have large storage requirements, even when compressed.
Reference: [22] <author> Teller, P. J., </author> <title> MP Simulations Via Unscheduled Traces, </title> <journal> Calculateurs paralleles, </journal> <volume> 7(1), </volume> <month> Apr. </month> <year> 1995, </year> <pages> pp. 9-25. </pages>
Reference-contexts: In addition, since TDS is driven by a memory address trace that is recorded from a single execution of a program it may not capture the dynamics of the application code <ref> [22] </ref> and the recorded trace may have large storage requirements, even when compressed. For the large applications targeted for the POEMS modeling system, simulation throughput will be enhanced with a performance database that can be used to compute task execution times for specific hardware subsystems.
Reference: [23] <author> Wasserman, W. J., O. M. Lubeck, and Y. Luo, </author> <title> Performance Evaluation of the SGI Origin2000: a Memory-centric Characterization of LANL ASCI Applications, </title> <booktitle> Proc. Supercomputing '97, </booktitle> <address> San Jose, </address> <year> 1997. </year>
Reference: [24] <author> Wiederhold, G., </author> <booktitle> Mediation in Information Systems: Research Directions in Software Engineering, ACM Computing Surveys, </booktitle> <month> June </month> <year> 1995. </year>
Reference-contexts: In this environment, the nodes of the graph are instances of associative objects which can be specialized to workload, software, and hardware components. Data mediation methods <ref> [24] </ref> are used to integrate the associative objects, thus enabling composition of multi-scale, multi-domain and multi-paradigm components into a coherent system model. An associative object is a standard object encapsulated with an associative interface [19, 17, 7]. <p> The references cited in this section are the most pertinent sources of concepts. The conceptual framework for POEMS is a synthesis from models of naming and communication [6, Bayerdorffer 95], Computer-Aided Design (CAD), software frameworks, parallel computation [12], object-oriented analysis [19], data mediation <ref> [24] </ref> and intelligent agents. There are many research projects focusing on performance modeling.
References-found: 24

