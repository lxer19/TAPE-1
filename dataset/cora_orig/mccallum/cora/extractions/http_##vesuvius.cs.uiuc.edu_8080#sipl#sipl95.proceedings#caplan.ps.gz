URL: http://vesuvius.cs.uiuc.edu:8080/sipl/sipl95.proceedings/caplan.ps.gz
Refering-URL: http://vesuvius.cs.uiuc.edu:8080/sipl/sipl95.proceedings.html
Root-URL: http://www.cs.uiuc.edu
Email: caplan@cs.uiuc.edu  
Title: Formalizing Hoare Logic  
Author: Joshua E. Caplan 
Note: Algol [13], including proofs about procedures.  
Date: December 22, 1994  
Affiliation: Department of Computer Science University of Illinois at Urbana-Champaign  
Abstract: We present a new formalization of Hoare Logic (using the Edinburgh Logical Framework [5]) and examine the issues raised. Our approach improves upon current LF representations of Hoare Logic and, via the LF type theory, generates for free a logic for a fragment of Idealized 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. R. Apt, </author> <title> Ten years of Hoare's Logic: A survey|part I, </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 3 (1981), </volume> <pages> pp. 431-483. </pages>
Reference-contexts: In Hoare Logic it looks like fP ^ y = eg c [y=x] fQg where y is not free in P , e, c, or Q (see <ref> [1] </ref>).
Reference: [2] <author> A. Avron, </author> <title> Simple consequence relations, </title> <journal> Information and Conputation, </journal> <volume> 92 (1991), </volume> <pages> pp. 105-139. </pages>
Reference-contexts: An additional challenge is presented in light of an unpublished paper of M. Miculan [8]. Standard encodings of first-order logic in LF are adequate for the consequence relation of truth rather than validity <ref> [2] </ref>, yet the rules given for Hoare Logic are sound only with respect to validity. In particular, there exist proofs from assumptions in Hoare Logic which have no counterpart in the LF encoding.
Reference: [3] <author> A. Avron, F. Honsell, I. A. Mason, and R. Pollack, </author> <title> Using typed -calculus to implement formal systems on a machine, </title> <journal> Journal of Automated Reasoning, </journal> <volume> 9 (1992), </volume> <pages> pp. 309-354. </pages>
Reference-contexts: We have exploited benefit number three to mechanically verify the examples in section 5. fl This work partially supported by NASA grant NAG 1-613 (I-CLASS) 1.1 Related Work There are two published formalizations of Hoare Logic in the LF, which appear in <ref> [3, 7] </ref>. Hoare Logic is not easy to formalize because weakening and contraction are admissible rules in the LF, which can lead to certain invalid formulas of the naive encoding being inhabited (see section 2.1).
Reference: [4] <author> Y. Fu, </author> <title> Categorical properties of logical frameworks, </title> <type> Tech. Rep. </type> <institution> UMCS-93-6-3, Department of Computer Science, Manchester University, Manchester, U.K., </institution> <year> 1993. </year>
Reference-contexts: Strengthening the type system of the LF itself will lead to a correspondingly stronger programming logic. For example, there is a published formulation of LF which include pairing <ref> [4] </ref> which is believed to preserve its good properties. The closer the type theory of the meta-logic 1 Private communication. matches the type theory of Algol, the more attractive our formalization will become as a basis for a programming logic.
Reference: [5] <author> R. Harper, F. Honsell, and G. Plotkin, </author> <title> A framework for defining logics, </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 40 (1993), </volume> <pages> pp. 143-184. </pages>
Reference-contexts: 1 Introduction In this paper, formalizing a logic L means defining a signature L in the language of some meta-logic, like the Edinburgh Logical Framework (LF) <ref> [5] </ref>, such that L adequately represents L. L is called the object logic, and L its representation or encoding. There are (at least) three benefits to formalization of a logic: 1. Philosophical: The search for an adequate encoding usually brings to light important prop erties of the object logic. 2. <p> x") (s x") (c x))) Q b:exp!assert Q Q c;d:var!comm H (f c) ! H (f d) ! H (f (x : if (b x") (s x") (c x) (d x))) ! c:var!comm H (f c): The soundness of this rule follows from the characterization of canonical forms in LF <ref> [5, Lemma 2.10] </ref>.
Reference: [6] <author> F. Honsell and M. Miculan, </author> <title> A natural deduction approach to program logics. </title> <booktitle> Submitted to international workshop TYPES '94, </booktitle> <year> 1994. </year>
Reference-contexts: Such contexts for program variables have appeared in earlier work, e.g. [9], and other researchers have found it natural to reformulate a program logic before formalizing it <ref> [6] </ref>. 2 Repairing Hoare Logic 2.1 Hoare Logic Recall the usual natural-deduction formulation of Hoare Logic (Table 1), defined relative to an underlying first-order language L and first-order L-theory of expressions T . There is only one judgment form, asserting the validity of a Hoare triple.
Reference: [7] <author> I. A. Mason, </author> <title> Hoare's Logic in the LF, </title> <type> Tech. Rep. </type> <institution> ECS-LFCS-87-32, Laboratory for the Foundations of Computer Science, Edinburgh, </institution> <address> Scotland, </address> <year> 1987. </year>
Reference-contexts: We have exploited benefit number three to mechanically verify the examples in section 5. fl This work partially supported by NASA grant NAG 1-613 (I-CLASS) 1.1 Related Work There are two published formalizations of Hoare Logic in the LF, which appear in <ref> [3, 7] </ref>. Hoare Logic is not easy to formalize because weakening and contraction are admissible rules in the LF, which can lead to certain invalid formulas of the naive encoding being inhabited (see section 2.1). <p> For example, having obtained a proof term t in a context = fx; y : var; z : x ] var y; z fl : y ] var xg as prescribed by I. A. Mason in <ref> [7] </ref>, contraction yields t [x=y] in context 0 = fx : var; z; z fl : x ] var xg which may correspond to some non-existent proof in Hoare Logic (based as it is on flawed assumptions). <p> The syntactic categories of Quantified Hoare Logic are easily declared: var; comm; spec : TYPE We follow Mason <ref> [7] </ref> in declaring a separate type var for program variables and giving no constructors for it, but only a coercion " : var ! exp; forcing the only normal forms of type var (in ground contexts) to be LF identifiers. <p> for the " operator, and the abbrevi-ation 8 - x for 8 - (x : ) in what follows. 3.2 Judgment Forms There are three: validity of an assertion in the underlying first-order theory T, validity of a partial correctness formula H, and a syntactic judgment QF first seen in <ref> [7] </ref> which indicates that an assertion is quantifier-free and can be used as the conditional expression in an if or while command. <p> Theorem 3.1 (Mason <ref> [7] </ref>) The signature T QHL is syntactically adequate for Quantified Hoare Logic with respect to context = [x 1 : var; : : : ; x n : var]; i.e., for each type var; exp; assert; comm; spec there is a compositional bijection t between well-formed LF fi-normal forms of type <p> One might complain that the ubiquitous subscripts appearing on the names of primitive or derived inference rules present a greater bureaucratic headache than the non-interference judgments of <ref> [7] </ref>. In a real implementation, most of these subscripts could be inferred from the types of the arguments; in an implementation of Mason's system, the non-interference proof obligations at each use of the assignment axiom can be mechanically derived, but depend on a plethora of noninterference assumptions in the context. <p> A machine implementation of the logic has been directly obtained from the representation and used to check the examples of this paper. Thus we have reaped the philosophical, theoretical, and practical benefits of formalization mentioned in the introduction. Mason suggests in <ref> [7, pg. 12] </ref> that the LF is to blame for the complexities of formalizing Hoare Logic, as it does not have a direct means to represent call-by-value substitution.
Reference: [8] <author> M. Miculan, </author> <title> The role of assumptions in Hoare's Logic. </title> <note> Anonymous ftp to ftp.di.unipi.it, file pub/Papers/miculan/assumptions HL.dvi.gz, </note> <month> Dec. </month> <year> 1992. </year>
Reference-contexts: The closer the type theory of the meta-logic 1 Private communication. matches the type theory of Algol, the more attractive our formalization will become as a basis for a programming logic. An additional challenge is presented in light of an unpublished paper of M. Miculan <ref> [8] </ref>. Standard encodings of first-order logic in LF are adequate for the consequence relation of truth rather than validity [2], yet the rules given for Hoare Logic are sound only with respect to validity. <p> In particular, there exist proofs from assumptions in Hoare Logic which have no counterpart in the LF encoding. This fact does not contradict our adequacy theorem, which is stated with respect to the empty context only; however, we would like to incorporate the side conditions introduced in <ref> [8] </ref> to broaden the semantic adequacy of the encoding. 7 Acknowledgments I wish to thank Uday S. Reddy for suggesting the problem, providing guidance and insight during its solution, and carefully reviewing early drafts of this paper.
Reference: [9] <author> P. W. O'Hearn and R. D. Tennent, </author> <title> Syntactic control of interference revisited, </title> <month> May </month> <year> 1994. </year>
Reference-contexts: This proviso is the basis of Syntactic Control of Interference <ref> [9, 10, 14] </ref>, so it is not surprising that our system has some features which seem to correspond to aspects of the typing system of P. W. O'Hearn and R. D. Tennent [9], although we arrived at our techniques independently of their work. <p> This proviso is the basis of Syntactic Control of Interference [9, 10, 14], so it is not surprising that our system has some features which seem to correspond to aspects of the typing system of P. W. O'Hearn and R. D. Tennent <ref> [9] </ref>, although we arrived at our techniques independently of their work. <p> We avoid these pitfalls, and admit far greater extensibility, by unabashedly modifying the object logic before encoding it, incorporating a disguised form of affine contexts. Such contexts for program variables have appeared in earlier work, e.g. <ref> [9] </ref>, and other researchers have found it natural to reformulate a program logic before formalizing it [6]. 2 Repairing Hoare Logic 2.1 Hoare Logic Recall the usual natural-deduction formulation of Hoare Logic (Table 1), defined relative to an underlying first-order language L and first-order L-theory of expressions T . <p> Perhaps the cleanest encoding could be obtained in a version of LF which employed both kinds of dependent product as primitive, evoking the type regimen of Syntactic Control of Interference in <ref> [9] </ref>. Part of the "essence of Algol" [12] is the simplicity of its definition, which is essentially the inclusion of commands as a base type in a typed -calculus.

References-found: 9

