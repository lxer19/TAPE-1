URL: http://www.daimi.aau.dk/~krab/report.ps.gz
Refering-URL: http://www.daimi.aau.dk/~krab/resume.html
Root-URL: http://www.daimi.aau.dk
Title: Abstractions Type Systems for Practical Object-Oriented Languages  
Keyword: Kresten Krab Thorup  
Date: May 8, 1998  
Affiliation: Department of Computer Science University of Aarhus  
Abstract: Progress Report in partial fulfilment of the requirements for the Ph.D. degree. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Agesen, O., Chambers, C., Bracha, G., Bruce, K., Cartwright, C., Fisher, K., Odersky, M., Joy, B., Rose, J., Steele, G., Stoutamire, D., Thorup, K. K., Torgersen, M., Ungar, D., and Wadler, P. </author> <year> (1997-1998). </year> <title> Personal communication (the java genericity mailing list). </title>
Reference: <editor> Aksit, M. and Matsouka, S., editors (1997). </editor> <booktitle> Proceedings of ECOOP'97 Object Oriented Programming, number 1241 in LNCS, </booktitle> <address> Jyvaskyla, Finland. AiTO, </address> <publisher> Springer Verlag. </publisher>
Reference: <author> Alexander, C. </author> <year> (1964). </year> <title> Notes on the Synthesis of Form. </title> <publisher> Harvard University Press, </publisher> <address> Cambridge, MA. </address>
Reference: <author> Almeida, P. S. </author> <year> (1997). </year> <title> Balloon types: Controlling sharing of state in data types. </title> <editor> In (Aksit and Matsouka, </editor> <year> 1997). </year> <title> Apple Computer (1992). Dylan: An object-oriented dynamic language. </title> <institution> Apple Computer, Eastern Research and Technology, </institution> <address> Cambridge, MA, 1st edition. </address>
Reference-contexts: However, since only autonomous objects can be moved, this pointer needs only be included in autonomous objects. Autonomicity could be implemented in a number of ways, depending on the level of type system support. One possible idea would be to use baloon types <ref> (Almeida, 1997) </ref>, which introduce objects complex objects to which there is only one pointer. If there is only one reference to an object, then then it is easy to migrate: your own reference is voided, and it is introduced in some other context instead.
Reference: <author> Brinch Hansen, P. </author> <year> (1977). </year> <title> The Architecture of Concurrent Programs. </title> <booktitle> Prentice-Hall series in automatic computation. </booktitle> <publisher> Prentice-Hall, </publisher> <address> Eaglewood Cliffs, NJ. </address>
Reference-contexts: A. R. Hoare (1972) Much research has been conducted in the areas of concurrency and real-time programming languages, e.g. leading to the elegant structures of e.g. monitors (Hoare, 1974) and the development of programming languages supporting concurrency, most notably Concurrent Pascal <ref> (Brinch Hansen, 1977) </ref>. More recently, research in this area has lead to e.g. the concurrency modeling in BETA (Kristensen et al., 1985) and the language ConcurrentSmalltalk (Yokote, 1988). <p> The model is inspired by Concurrent Pascal <ref> (Brinch Hansen, 1977) </ref>. From a practical point of view, a serious limitation in Concurrent Pascal is the inefficiency of transfering data from one process to another.
Reference: <author> Bruce, K. </author> <year> (1997). </year> <title> Subtyping is not a good match for object-oriented programming languages. </title> <editor> In (Aksit and Matsouka, </editor> <year> 1997). </year>
Reference-contexts: Virtual classes in BETA (Kristensen et al., 1983; Madsen et al., 1990) combines all the properties except BETA does not provide statical type safety. The type-safe language LOOM <ref> (Bruce, 1997) </ref> introduces exact types, giving the programmer the choice of selectively eliminating either subtype substitutability or the ability to call methods with covariant type parameters. Languages based on f-bounded polymorphism (Canning et al., 1989) introduce subclasses which are not subtypes.
Reference: <author> Bruce, K., Cardelli, L., Castagna, G., Group, T. H. O., Leavens, G. T., and Pierce, B. </author> <year> (1995). </year> <title> On binary methods. Theory and Practice of Object Systems, </title> <publisher> 1(3):221242. </publisher>
Reference: <author> Bruce, K., Odersky, M., and Wadler, P. </author> <year> (1998). </year> <title> A statically safe alternative to virtual types. </title> <booktitle> In Proceedings of ECOOP'98. </booktitle>
Reference-contexts: If this is not what is intended by the programmer, ConcretePoint may easily be defined so that it is protected against comparison with other kinds of Points: ConcretePoint = Point [CmpType = ConcretePoint]; 16 This bears a certain resemblance to the way virtual types are simulated with parametric types in <ref> (Bruce et al., 1998) </ref>. The flexibility as well as the generality of the approach is undeniable.
Reference: <author> Canning, P., Cook, W., Hill, W., and Olthoff, W. </author> <year> (1989). </year> <title> F-bounded qualification for object-oriented programming. </title> <booktitle> In ACM Conference on Functional Programming and Computer Architecture. </booktitle> <publisher> ACM Press. </publisher>
Reference-contexts: The type-safe language LOOM (Bruce, 1997) introduces exact types, giving the programmer the choice of selectively eliminating either subtype substitutability or the ability to call methods with covariant type parameters. Languages based on f-bounded polymorphism <ref> (Canning et al., 1989) </ref> introduce subclasses which are not subtypes. A particularly interesting take on the problem is presented in (Torgersen, 1998) which suggests a statically type safe variant of virtual classes. <p> In idea, all entities are explicitly statically typed, unlike languages with type inference, such as ML and BOPL. Class Access Usually, class parameters are only visible within the body of a generic class. With F-bounded polymorphism <ref> (Canning et al., 1989) </ref>, they are furthermore visible in the parameter block itself. In BETA, virtual types are real attributes of the enclosing class, making them remotely accessible that is, from outside the class. For generality, bounded genericity adopts both of these additional modes of access.
Reference: <author> Cook, W. </author> <year> (1989). </year> <title> A proposal for making Eiffel type-safe. </title> <editor> In Cook, S., editor, </editor> <booktitle> Proceedings of the ECOOP'89 European Conference on Object-oriented Programming, </booktitle> <pages> pages 5770, </pages> <address> Nottingham. </address> <publisher> Cambridge University Press. </publisher>
Reference-contexts: Unfortunately Eiffel is not type safe, as elaborated in great detail in <ref> (Cook, 1989) </ref>. BETA The prime contribution of bounded genericity as compared to BETA is to provide a rich set of inferred (structural) type relationship between different parameterizations of the same class.
Reference: <author> Cox, B. J. </author> <year> (1986). </year> <title> Object-oriented Programming an evolutionary approach. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA. </address>
Reference-contexts: It was first developed by Brad Cox <ref> (Cox, 1986) </ref> and later used and further developed by NeXT Software, Inc. (NeXT Computer, 1993). Objective C is a compiled language, which was first implemented as a preprocessor for C, and later as an integrated compiler in the GNU C compiler suite (Stallman, 1997; Thorup, 1993).
Reference: <author> Dahl, O. J. and Nygaard, K. </author> <year> (1966). </year> <title> Simula, an algol-based simulation language. </title> <journal> Communications of the ACM, 9(9):671678. </journal>
Reference-contexts: There was little or no understanding for reuse and there were no tools to support it either, so there were no requirements for reuse. This has changed dramatically since object-orientation was introduced 30 years ago with Simula <ref> (Dahl and Nygaard, 1966) </ref>. Today, we have no choice. In consequence, we have to start building our understanding of our programs on the shoulders of other people's understanding. Or more concrete: we have to build our classes based upon other people's classes.
Reference: <author> Ellis, M. A. and Stroustrup, B. </author> <year> (1990). </year> <title> The Annotated C ++ Reference Manual. </title> <publisher> Addison-Wesley. </publisher>
Reference-contexts: Several other programming languages, including C ++ <ref> (Ellis and Stroustrup, 1990) </ref> and Sather (Omohundro, 1993) implement similar features. As we see it, there are several conceptual problems in parameterized classes.
Reference: <author> Ernst, E. </author> <year> (1997). </year> <title> Dynamic inheritance. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Aarhus, Denmark. </institution>
Reference-contexts: For this reason, derivation from open parameters is not allowed in idea, but there is nothing inherent in bounded genericity that prevents it indeed promising experiments have been made with subclassing of open virtual types in BETA <ref> (Ernst, 1997) </ref>. Using Generic Classes as Types This section explores the different possible relationships among generic classes that might make one a subtype of the other. Parameterized types usually enjoy a number of inferred subtype relations, whereas in languages with virtual types only explicitly declared subclasses yield subtypes. <p> By grouping the mutually 18 recursive classes like this, they may be specialized together, thus still preserving the recursive structure. The example is from <ref> (Ernst, 1997) </ref>, and in our rendering illustrates how bounded classes can be used to describe many design patterns (Gamma et al., 1994). This inspired our use of the term pattern for the enclosing class, since it describes the interdependence between a set of abstract classes.
Reference: <author> Gamma, E., Helm, R., Johnson, R., and Vlissides, J. </author> <year> (1994). </year> <title> Design Patterns: Abstraction and Reuse of Object-Oriented Designs. </title> <publisher> Addison-Wesley. </publisher>
Reference-contexts: Consider in this example, a simple implementation of the Observer pattern <ref> (Gamma et al., 1994) </ref> in the following example, which also shows how virtual types can be used in interfaces (example due to Erik Ernst): interface Observer - typedef SType as Subject; typedef EventType as Object; void notify (SType subj, EventType e); - class Subject - typedef OType as Observer; typedef EventType <p> The subtle restriction which allows us to avoid the implications of full block structure, is the slightly peculiar rule that no class body may appear within another one. Consider this example, in which the class Visitor is declared in the parameter block of Collection, implementing the Visitor design pattern <ref> (Gamma et al., 1994) </ref>. Since class Visitor is defined inside the parameter list, it can see the E, the type of elements contained in the collection. <p> By grouping the mutually 18 recursive classes like this, they may be specialized together, thus still preserving the recursive structure. The example is from (Ernst, 1997), and in our rendering illustrates how bounded classes can be used to describe many design patterns <ref> (Gamma et al., 1994) </ref>. This inspired our use of the term pattern for the enclosing class, since it describes the interdependence between a set of abstract classes.
Reference: <author> Goldberg, A. and Robson, D. </author> <year> (1989). </year> <title> Smalltalk-80 The Language. </title> <publisher> Addison-Wesley. </publisher>
Reference: <author> Gomes, B. et al. </author> <year> (1996). </year> <title> Sather 1.1: Language Essentials. </title> <address> http://www.icsi.berkeley.edu/sather. </address>
Reference-contexts: Sather classes can declare a number of super types which must be abstract classes; and it can inherit (or include) any number of another classes. Sather has a distinct feature permitting exactly super-typing. The limitation of Sather's mechanism is clear from the manual <ref> (Gomes et al., 1996) </ref>: The super-type can only contain routines that are found in the subtype, i.e. it cannot extend the interface of the subtype. Thus, Sather is limited to describe the fact that two or more classes have a common operation or attribute.
Reference: <author> Gosling, J., Joy, B., and Steele, G. </author> <year> (1996). </year> <title> The Java Language Specification. </title> <publisher> Addison-Wesley. 34 Harrison, </publisher> <editor> W. and Ossher, H. </editor> <year> (1993). </year> <title> Subject-oriented programming (A critique of pure objects). </title> <booktitle> OOPSLA 1993 Conference Proceedings, </booktitle> <address> 28(10):411428. </address>
Reference-contexts: (0); 1.2.2 Java's Tradeoff While Java is indeed a typed programming language, we do not consider it fully statically typed since the execution of Java programs may still uncover type errors in the following two situations: * When making explicit down casts also known in the literature as reverse assignments <ref> (Gosling et al., 1996, x15.15) </ref>. This is allowed by the compiler if it cannot be statically deter mined that the cast will always go wrong. Such casts must be checked at runtime. * When storing elements in an array of references (Gosling et al., 1996, x10.10). <p> This is allowed by the compiler if it cannot be statically deter mined that the cast will always go wrong. Such casts must be checked at runtime. * When storing elements in an array of references <ref> (Gosling et al., 1996, x10.10) </ref>. This may cause an exception, because Java arrays are covariant typed, i.e. array of Point is a subtype of array of Object iff Point is a subtype of Object. <p> Classes in this language are similar to Smalltalk classes. The type system is a traditional strong type system, with single inheritance. In addition to classes, Objective C has a feature called protocols, which was later used in the Java programming language <ref> (Gosling et al., 1996) </ref> under the name interfaces. 1 This feature allows for a collection of methods collectively denoted by a name to be used as a type. Protocols are similar to abstract classes: they cannot declare instance-state, nor can they describe method implementations.
Reference: <author> Hoare, C. A. R. </author> <year> (1972). </year> <title> Towards a theory of parallel programming. In Hoare, </title> <editor> C. A. R. and Perrott, R. H., editors, </editor> <booktitle> Operating Systems Techniques, </booktitle> <address> New York, NY. </address> <publisher> Academic Press. </publisher>
Reference: <author> Hoare, C. A. R. </author> <year> (1974). </year> <title> Monitors: an operating system structuring concept. </title> <journal> Communications of the ACM, 17(10):549557. </journal>
Reference-contexts: A. R. Hoare (1972) Much research has been conducted in the areas of concurrency and real-time programming languages, e.g. leading to the elegant structures of e.g. monitors <ref> (Hoare, 1974) </ref> and the development of programming languages supporting concurrency, most notably Concurrent Pascal (Brinch Hansen, 1977). More recently, research in this area has lead to e.g. the concurrency modeling in BETA (Kristensen et al., 1985) and the language ConcurrentSmalltalk (Yokote, 1988).
Reference: <author> Kiczales, G. </author> <year> (1996). </year> <note> Aspect-oriented programming: A position paper from the xerox PARC aspect-oriented programming project. to appear. </note>
Reference: <author> Kiczales, G., de RiviOEeres, J., and Bobrow, D. G. </author> <year> (1991). </year> <title> The Art of the Meta Object Protocol. </title> <publisher> MIT Press. </publisher>
Reference: <author> Kristensen, B. B., Madsen, O. L., Mller-Pedersen, B., and Nygaard, K. </author> <year> (1983). </year> <title> Abstraction mechanisms in the BETA programming language. </title> <booktitle> In Proceedings of POPL'83, </booktitle> <address> Austin, TX. </address>
Reference-contexts: The rest of this chapter will summarize these results, and discuss future work. 1.2 Genericity in Java with Virtual Types This work is based on the ideas of virtual patterns in the BETA programming language <ref> (Kristensen et al., 1983) </ref>. A decade later, a similar mechanism is also found as generics in ADA (Seidewitz, 1994), and as creators in (Schwartzbach, 1996). As such, what we are about to present has already been in use for more than a decade in various programming languages.
Reference: <author> Kristensen, B. B., Madsen, O. L., and Mller-Petersen, B. </author> <year> (1985). </year> <title> Multi sequential execution in the BETA programming language. </title> <journal> ACM SIGPLAN notices, </journal> <volume> 20(4). </volume>
Reference-contexts: More recently, research in this area has lead to e.g. the concurrency modeling in BETA <ref> (Kristensen et al., 1985) </ref> and the language ConcurrentSmalltalk (Yokote, 1988).
Reference: <author> Kristensen, B. B. and sterbye, K. </author> <year> (1996). </year> <title> Roles: Conceptual abstraction theory and practical language issues. Theory and Practice of Object Sytems, </title> <publisher> 2(3):143160. </publisher>
Reference: <author> Madsen, O. L. </author> <year> (1995). </year> <title> Open issues in object-oriented programminga scandinavian perspective. </title> <journal> SoftwarePractice and Experience, 25(S4). </journal>
Reference: <author> Madsen, O. L., Magnusson, B., and Mller-Pedersen, B. </author> <year> (1990). </year> <title> Strong typing of object-oriented languages revisited. </title> <journal> ACM SIGPLAN Notices, </journal> <note> 25(10):140150. OOPSLA/ECOOP '90 Proceedings. </note>
Reference: <author> Madsen, O. L. and Mller-Pedersen, B. </author> <year> (1989). </year> <title> Virtual classes: A powerful mechanism in object-oriented programming. </title> <booktitle> In Proceedings of OOPSLA'89. SIGPLAN, </booktitle> <publisher> ACM Press. </publisher>
Reference-contexts: Secondly, parameterized classes are usually special entities in the language, whereas with virtual types <ref> (Madsen and Mller-Pedersen, 1989) </ref>, generic classes are just ordinary classes, which may be subclassed, instantiated and used as types. The latter approach is clearly more general, and also yields a simpler language with fewer different constructs (Thorup, 1997b). Therefore this approach is used for bounded genericity.
Reference: <author> Madsen, O. L., Mller-Pedersen, B., and Nygaard, K. </author> <year> (1993). </year> <title> Object-Oriented Programming in the BETA Programming Language. </title> <publisher> Addison-Wesley. </publisher>
Reference-contexts: This feature can be used to reduce the (performance) implications of subtype substitutability, and as a protection mechanism. In essence, final bindings can narrow the general open world assumption. This mechanism is much like Dylan's sealed classes (Apple Computer, 1992) and also has similarities to final bindings in BETA <ref> (Madsen et al., 1993) </ref>. 1.2.3 Critique In our opinion, Java's type system reflects a rather ad-hoc mix of the desirable properties listed in section 1.1.1, of which only subtype substitutability is available in a coherent fashion. <p> Christopher Alexander (1964) In this light, software development resembles the development of a set of differential equations: the software model and the real world affect each other. This is also similar to Marx' philosophy for concept formation discussed in <ref> (Madsen et al., 1993, x18) </ref>. For most software, it is the case that if it lives long enough so to speak, the requirements for it will change. There exists software, which is in itself flexible enough to make it adapt to these new requirements. <p> As such, a category which adds methods expresses a post hoc specialization of the class to which it applies. In practice, categories are also used to distribute the implementation of a class across several files much like BETA's fragment system <ref> (Madsen et al., 1993) </ref>. A category can also add one or more new protocols to be adopted by a class, imposing a further constraint on the methods required to be implemented by the class.
Reference: <author> Madsen, O. L., Rn, H., Thorup, K. K., and Torgersen, M. </author> <year> (1998). </year> <title> A conceptual approach to teaching object-oriented programming to C programmers. </title> <editor> In Manns, M. L., editor, </editor> <booktitle> Educators' Symposium at OOPSLA'98, Vancouver, Canada. Sigplan, ACM. </booktitle>
Reference-contexts: An appendix describes some other activities I have been involved with, that I find relevant to the audience of this report. These activities includes for the most part lecturing, teaching <ref> (Madsen et al., 1998) </ref> and co-authoring various technical books (Thorup, 1997c; Thorup, 1998a). Kresten Krab Thorup Arhus, May 1997 2 Chapter 1 Genericity and Covariance This section presents my work on object oriented programming languages on how to support genericity, covariance, and recursive types in a statically safe way. <p> Memory constraints could also be covariant and type checked with the same notion of type safe covariance mentioned before. 32 Other Related Activities * I have been engaged in teaching object-orientation <ref> (Madsen et al., 1998) </ref> to a group of engi neers that develop real-time systems. * In the fall of 97 I taught an advanced class Aspects of Object-Orientation at the Depart ment of Computer Science, University of Aarhus. * I have taught an off-site course on Java programming to 35 teachers
Reference: <author> Magnusson, B. </author> <year> (1991). </year> <title> Code reuse considered harmful. </title> <journal> JOOP Journal of Object-Oriented Programming, </journal> <volume> 4(3). </volume>
Reference-contexts: One problem with informal types is that the name of a method is its only qualification. The system cannot distinguish methods with the same name, which have distinct meanings. Using an example from <ref> (Magnusson, 1991) </ref>, if one were to consider any class with the method draw as member of the informal type graphical object, then that type is not distinguished from the informal type with the same constraints, say gun man. 2.2.3 Sather This programming language is derived from Eiffel, and is fully statically
Reference: <author> Martin, B. E. </author> <year> (1987). </year> <title> Modeling concurrent activities with nested objects. </title> <booktitle> In 7th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 432439, </pages> <address> Washington, D.C., USA. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference: <author> Martin, B. E. </author> <year> (1989). </year> <title> Concurrent programming vs. concurrency control: shared events or shared data. </title> <journal> ACM SIGPLAN Notices, 24(4):142144. </journal>
Reference: <author> Meyer, B. </author> <year> (1986). </year> <title> Genericity versus inheritance. </title> <booktitle> In Proceedings of OOPSLA'86, </booktitle> <pages> pages 391405. </pages>
Reference-contexts: Here we discuss some of the mechanisms that has already been deployed to obtain genericity in object oriented programming languages. A more encompassing review and crtique of genericity in various programming languages can be found in (Palsberg and Schwartzbach, 1993, 139ff). 1.2.5 Parameterized Classes In his often quoted paper <ref> (Meyer, 1986) </ref> Bertrand Meyer presents parameterized classes as a programming language mechanism in Eiffel which combines the benefits of polymorphism, as in ML, and those of inheritance. Several other programming languages, including C ++ (Ellis and Stroustrup, 1990) and Sather (Omohundro, 1993) implement similar features.
Reference: <author> Monfret, J.-C., </author> <title> editor (1998). The comp.realtime FAQ. </title> <address> http://www.groupipc.com/rtfaq.htm. </address>
Reference-contexts: If the timing constraints of the system are not met, system failure is said to have occurred. Donald Gillies <ref> (Monfret, 1998) </ref> When these constraints are violated at runtime, an exception is generated so that the situation that a resource violation took place can be dealt with.
Reference: <author> Myers, A., Bank, J., and Liskov, B. </author> <year> (1997). </year> <title> Parameterized types for Java. </title> <booktitle> In Proceedings of POPL'97. NeXT Computer (1993). Object Oriented Programming and the Objective C Language. NeXT Computer, </booktitle> <publisher> Inc., </publisher> <address> Redwood City, CA. </address>
Reference-contexts: or Pizza (Odersky and Wadler, 1997), or they define some kind of structural conformance semantics which is, in our opinion, only useful for one type parameter as is the case in both Eiffel and Sather, as well as the alternative proposal for parameterized types for Java by Myers, et. al. <ref> (Myers et al., 1997) </ref>. Like inheritance, conformance is yet another kind of mechanism which introduce types, and this will simply confuse the programmer. We find it compelling to think of inheritance itself as the mechanism for genericity.
Reference: <author> Nilsen, K. and Lee, S. </author> <year> (1998). </year> <title> PERC TM real-time api. </title> <type> Technical report, </type> <institution> NewMonics, Inc. </institution>
Reference-contexts: The time constraints could also be dynamically checked, generating an exception if the constraint is not met; an idea that I have seen utilized in PERC <ref> (Nilsen and Lee, 1998) </ref>. Such time-types could conceivably be co-variant allowing a specialization of an action to take longer time; which can be handled as discussed in Section 1.6.4. Memory Constraints Just like the real-time constraints for active objects, it makes sense to introduce memory constraints for places.
Reference: <author> Noble, J., Potter, J., Holmes, D., and Vitek, J. </author> <year> (1998). </year> <title> Flexible alias protection. </title> <editor> In Jul, E., editor, </editor> <booktitle> Proceeding of ECOOP'98, </booktitle> <address> Bussels, Belgium. AiTO, </address> <publisher> Springer. </publisher>
Reference-contexts: If there is only one reference to an object, then then it is easy to migrate: your own reference is voided, and it is introduced in some other context instead. A recent paper <ref> (Noble et al., 1998) </ref> describes a framework for understanding containment and aliasing in a model which captures the notion of containment, which does not handle migration, but it might also be a starting point for handling autonomicity. At the programming language level, migration should coincide with the invocation of methods.
Reference: <author> Nygaard, K. </author> <year> (1997). </year> <note> Goods to appear on the stage. In (Aksit and Matsouka, </note> <year> 1997). </year>
Reference-contexts: In <ref> (Nygaard, 1997) </ref> these are called internal and external references respectively. Dereferencing external references introduce the possibility of object is absent errors.
Reference: <author> Odersky, M. and Wadler, P. </author> <year> (1997). </year> <title> Pizza into Java: Translating theory into practice. </title> <booktitle> In Proceedings of POPL'97, </booktitle> <address> Paris. </address> <publisher> ACM Press. </publisher> <address> 35 Omohundro, S. </address> <year> (1993). </year> <title> The Sather programming language. </title> <journal> Dr. Dobb's Journal, </journal> <volume> 18(11). </volume>
Reference-contexts: Because of these conceptual problems, some programming languages either define explicitly no subtype relationship between such generic class instantiations as is the case in C ++ or Pizza <ref> (Odersky and Wadler, 1997) </ref>, or they define some kind of structural conformance semantics which is, in our opinion, only useful for one type parameter as is the case in both Eiffel and Sather, as well as the alternative proposal for parameterized types for Java by Myers, et. al. (Myers et al.,
Reference: <author> Palsberg, J. and Schwartzbach, M. I. </author> <year> (1993). </year> <title> Object-Oriented Type Systems. </title> <publisher> Addison-Wesley. </publisher>
Reference-contexts: Here we discuss some of the mechanisms that has already been deployed to obtain genericity in object oriented programming languages. A more encompassing review and crtique of genericity in various programming languages can be found in <ref> (Palsberg and Schwartzbach, 1993, 139ff) </ref>. 1.2.5 Parameterized Classes In his often quoted paper (Meyer, 1986) Bertrand Meyer presents parameterized classes as a programming language mechanism in Eiffel which combines the benefits of polymorphism, as in ML, and those of inheritance. <p> LOOM This language has a flavour of covariance similar to bounded genericity, but the type integrity is based on exact types. We believe that the notion of exact types is conceptually unsound, since it breaks subtype substitutability. BOPL To our knowledge, BOPL <ref> (Palsberg and Schwartzbach, 1993) </ref> is the only statically type safe programming language besides idea which allows expression of type safe covariant recursive classes, without introducing exact types.
Reference: <author> Pedersen, C. H. </author> <year> (1989). </year> <title> Extending ordinary inheritance schemes to include generalization. </title> <journal> ACM SIGPLAN Notices, 24(10):407417. </journal>
Reference-contexts: Secondly, parameterized classes are usually special entities in the language, whereas with virtual types <ref> (Madsen and Mller-Pedersen, 1989) </ref>, generic classes are just ordinary classes, which may be subclassed, instantiated and used as types. The latter approach is clearly more general, and also yields a simpler language with fewer different constructs (Thorup, 1997b). Therefore this approach is used for bounded genericity. <p> Thus, Sather is limited to describe the fact that two or more classes have a common operation or attribute. Sather doesn't implement post hoc specialization. 2.3 Related Work Much research has been conducted in areas related to model evolution, model combination and generalization <ref> (Pedersen, 1989) </ref>, and this area continues to be of interest to me.
Reference: <author> Pensj o, L. </author> <year> (1992). </year> <title> Lesson 1 the first lpc lesson. </title> <address> http://www.lysator.liu.se/nanny/docs/ihelp/LPC/. </address>
Reference-contexts: Places All objects in the model are considered a places, which means that they can contain other objects. Any object is in exactly one place at any time. This is similar to objects on LPC <ref> (Pensj o, 1992) </ref>, an object-oriented programming language for MUDs 1 , which in my personal experience provides a excellent physical model. A consequence of the fact that all objects are somewhere, is that an object is allocated into a certain place.
Reference: <author> Raj, R. K., Tempero, E., Levy, H. M., Black, A. P., Hutchinson, N. C., and Jul, E. </author> <year> (1991). </year> <title> Emerald: A general-purpose programming language. </title> <journal> SoftwarePractice and Experience, 21(1):91118. </journal>
Reference-contexts: Continuing the box metaphor, migration is the act of moving an object from one box to another box, following which it is no longer accessible in the original box. Autonomicity For objects to be able to migrate they need to be autonomous <ref> (Raj et al., 1991) </ref>, i.e. self contained. The autonomicity property (invariant) is that there are no references from objects inside the autonomous object to objects outside the autonomous object, nor any references from object outside the autonomous object to objects inside. An autonomous object is like a closed box.
Reference: <author> Ravn, A. P. </author> <year> (1979). </year> <title> Pointer variables in concurrent pascal. </title> <type> Technical Report 79/15, </type> <institution> Institute of Datalogy, University of Copenhagen. </institution>
Reference-contexts: The model is inspired by Concurrent Pascal (Brinch Hansen, 1977). From a practical point of view, a serious limitation in Concurrent Pascal is the inefficiency of transfering data from one process to another. This has earlier been sought solved through a notion of pointers <ref> (Ravn, 1979) </ref>, in this model we instead add the notion that objects can migrate from one component (process, monitor or class) to another. 3.1.1 Data Modeling The fundamental level of modeling is the data model, in which the prime features over existing OO models are the notions of containment and migration.
Reference: <author> Schwartzbach, M. I. </author> <year> (1996). </year> <title> Object-oriented type systems: </title> <note> Principles and applications. from http://www.daimi.aau.dk/mis. </note>
Reference-contexts: A decade later, a similar mechanism is also found as generics in ADA (Seidewitz, 1994), and as creators in <ref> (Schwartzbach, 1996) </ref>. As such, what we are about to present has already been in use for more than a decade in various programming languages.
Reference: <author> Seidewitz, E. </author> <year> (1994). </year> <title> Genericity versus inheritance reconsidered: Self-reference using generices. </title> <booktitle> In Proceedings of OOPSLA'94. </booktitle>
Reference-contexts: A decade later, a similar mechanism is also found as generics in ADA <ref> (Seidewitz, 1994) </ref>, and as creators in (Schwartzbach, 1996). As such, what we are about to present has already been in use for more than a decade in various programming languages.
Reference: <author> Shang, D. </author> <year> (1996). </year> <title> Are cows animals? Object Currents, </title> <type> 1(1). </type>
Reference-contexts: fill out this figure in space, but must choose one of the planes. a a a a a a % % % E E E E E E @ @ covariance subclasses subtype are subtypes substitutability type safe statically We will briefly illustrate it here with an example borrowed from <ref> (Shang, 1996) </ref>. Consider an eat operation of a general Animal class and as well as a Cow class. One would want to be able to have the argument of eat be qualified with Grass in the latter, and Edible in the former.
Reference: <author> Stallman, R. M. </author> <year> (1997). </year> <title> Using and Porting GNU C. Free Software Foundation, </title> <address> Boston, MA. </address>
Reference: <author> Stroustrup, B. </author> <year> (1988). </year> <title> Parameterized types for C ++ . In Proceedings of USENIX C ++ Conference, </title> <address> Denver, </address> <publisher> CO. </publisher>
Reference-contexts: A bounded generic class in idea looks like this: Collection = [E Object]- insert (e: E) - . . . - get ():E - . . . - We are immediately faced with two design dilemmas: Firstly, some parameter mechanisms (e.g., templates in C ++ <ref> (Stroustrup, 1988) </ref>) impose no restrictions on the parameters, but most allow them to be constrained by a given type, meaning that specific derivations can only supply type parameters that are a subtype of the constraint.
Reference: <author> Thorup, K. K. </author> <year> (1993). </year> <title> Optimizing method lookup in dynamic object-oriented languages with sparse arrays. </title> <editor> In Brusilovsky, P., editor, </editor> <booktitle> Proceedings of the Annual Russian Unix Users' Group Conference on Free Software, </booktitle> <address> Moscow, Russia. </address>
Reference: <author> Thorup, K. K. </author> <year> (1996a). </year> <title> Generalization in programming languages. Report for the course Aspects of Object-Oriented Programming. </title>
Reference: <author> Thorup, K. K. </author> <year> (1996b). </year> <title> Generalization throughout the software lifecycle. </title> <note> Position Paper for Subjectivity Workshop at OOPSLA'96. </note>
Reference: <author> Thorup, K. K. </author> <year> (1996c). </year> <title> Introducing generalization in the programming process. </title> <note> Submitted to OOPSLA'96 (not accepted). </note>
Reference: <author> Thorup, K. K. </author> <year> (1997a). </year> <title> Contextual class extensionsa mechanism supporting subject-oriented programming. </title> <note> Position Paper for ECOOP'97 workshop on aspect-oriented programming. </note>
Reference: <author> Thorup, K. K. </author> <year> (1997b). </year> <title> Genericity in Java with virtual types. </title> <editor> In (Aksit and Matsouka, </editor> <year> 1997), </year> <pages> pages 444471. </pages>
Reference-contexts: This report describes my contributions and ideas for future research three such general areas: genericity, generalization and concurrency. Overview of the Report Chapter 1 discusses mechanisms for genericity in object-oriented programming languages, and how to provide recursive classes with statically type safe covariance. The first sections are based on <ref> (Thorup, 1997b) </ref> describing a design and implementation for virtual types as a genericity mechanism in the Java programming language, and (Thorup and Torgersen, 1998) in which Torg-ersen and I describe a genericity mechanism unifying virtual types and parameterized classes. <p> With this approach, the ability to stop covariance through the use of final-bindings is leveraged to retain the expressiveness never the less. The author's contributions to this area of research is so far two papers: 1) Genericity in Java with Virtual Types presented at ECOOP'97 <ref> (Thorup, 1997b) </ref> describing the design and implementation of virtual classes as known from BETA, but retrofitted for the Java programming 5 language; and 2) Unifying Genericity submitted to OOPSLA'98 (Thorup and Torgersen, 1998), which describes an approach to unify all the desirable properties, by providing means to selectively eliminate any one <p> The details are described in <ref> (Thorup, 1997b) </ref>, but the general idea is that typedef Name as Type introduces an alias for type Type named Name, much like in C and C ++ . <p> The latter approach is clearly more general, and also yields a simpler language with fewer different constructs <ref> (Thorup, 1997b) </ref>. Therefore this approach is used for bounded genericity. In summary, a Collection as defined above is a class with one type parameter E, which must be at least Object.
Reference: <author> Thorup, K. K. </author> <year> (1997c). </year> <title> The java native methods interface. In Maximum Java 1.1, chapter 3335. </title> <publisher> Sams.net Publishing. </publisher>
Reference-contexts: This has been an exciting experience 1. A general introduction to the Objective C programming language in Handbook of Object-Orientation from CRC Press (Thorup, 1998a). 2. Three chapters for a tutorial on advanced Java 1.1 Programming from Sams.net pub lishing on the issue of writing native methods <ref> (Thorup, 1997c) </ref>. * I have been giving several seminars on various issues of Java and embedded systems pro gramming to at industry conferences, user groups and individual companies. * I worked at NeXT Computer, Inc. for a period of three years, primarily working on the Objective C and C ++ compilers,
Reference: <author> Thorup, K. K. </author> <year> (1998a). </year> <editor> Objective C. In Zamir, S., editor, </editor> <booktitle> Handbook of Object-Orientation, chapter 20. </booktitle> <publisher> CRC Press. </publisher>
Reference-contexts: Objective C is a compiled language, which was first implemented as a preprocessor for C, and later as an integrated compiler in the GNU C compiler suite (Stallman, 1997; Thorup, 1993). In <ref> (Thorup, 1998a) </ref> I present an overview of the language and its general characteristics. Classes in this language are similar to Smalltalk classes. The type system is a traditional strong type system, with single inheritance. <p> Their projects are related to Centre for Object Technology. * I have written some chapters for technical books. This has been an exciting experience 1. A general introduction to the Objective C programming language in Handbook of Object-Orientation from CRC Press <ref> (Thorup, 1998a) </ref>. 2.
Reference: <author> Thorup, K. K. </author> <year> (1998b). </year> <title> Type checking bounded genericity. </title> <note> Working Note. </note>
Reference-contexts: The type call 2 illustrates how constant bindings can be further-bound to something of a subtype of the original bound. At the time of this writing, I have formulated a set of type rules and started implementing a checker for Basic idea, which looks very promising <ref> (Thorup, 1998b) </ref>. It is clearly beyond the scope of this report to describe the type rules and the checker implementation. 1.5.2 Adding Semantics to Basic idea Once having developed the type system for idea, we intend to extend this with an execution semantics.
Reference: <author> Thorup, K. K. and Torgersen, M. </author> <year> (1998). </year> <note> Unifying genericity. Submitted to OOPSLA'98. </note>
Reference-contexts: The first sections are based on (Thorup, 1997b) describing a design and implementation for virtual types as a genericity mechanism in the Java programming language, and <ref> (Thorup and Torgersen, 1998) </ref> in which Torg-ersen and I describe a genericity mechanism unifying virtual types and parameterized classes. Chapter 2 discusses issues with evolution and reuse of conceptual models: some thought on generalization, roles, and subject-oriented programming. <p> The following lists some of these results, a more fulfilling coverage can be found in the Related Work section of <ref> (Thorup and Torgersen, 1998) </ref>. Virtual classes in BETA (Kristensen et al., 1983; Madsen et al., 1990) combines all the properties except BETA does not provide statical type safety. <p> contributions to this area of research is so far two papers: 1) Genericity in Java with Virtual Types presented at ECOOP'97 (Thorup, 1997b) describing the design and implementation of virtual classes as known from BETA, but retrofitted for the Java programming 5 language; and 2) Unifying Genericity submitted to OOPSLA'98 <ref> (Thorup and Torgersen, 1998) </ref>, which describes an approach to unify all the desirable properties, by providing means to selectively eliminate any one of them, effectively capturing the expressiveness of all past approaches to solve the problem. <p> As a side effect, the present section also provides the first outline for a new programming language idea, which the author intends to implement and utilize as a basis for further research. This text represents a condensed version of a paper Unifying Genericity <ref> (Thorup and Torgersen, 1998) </ref>, as such the innovative ideas herein should be credited equally to Mads Torgersen. 1.3.1 Bounded Genericity The very essence of all genericity mechanisms is to enable the description of generic classes from which specific classes can be derived. <p> This serves to eliminate any ambiguities that might otherwise occur. The notion of constant type bindings is a further development since the paper <ref> (Thorup and Torg-ersen, 1998) </ref>. The idea is to capture the type property of a constant reference, allowing Basic idea can express the complexity of typing full idea without introducing a notion of state.
Reference: <author> Torgersen, M. </author> <year> (1998). </year> <title> Virtual types are statically safe. </title> <editor> In Bruce, K., editor, </editor> <booktitle> Informal Proceedings of FOOL'98, </booktitle> <address> San Diego, CA. </address>
Reference-contexts: The first sections are based on (Thorup, 1997b) describing a design and implementation for virtual types as a genericity mechanism in the Java programming language, and <ref> (Thorup and Torgersen, 1998) </ref> in which Torg-ersen and I describe a genericity mechanism unifying virtual types and parameterized classes. Chapter 2 discusses issues with evolution and reuse of conceptual models: some thought on generalization, roles, and subject-oriented programming. <p> The following lists some of these results, a more fulfilling coverage can be found in the Related Work section of <ref> (Thorup and Torgersen, 1998) </ref>. Virtual classes in BETA (Kristensen et al., 1983; Madsen et al., 1990) combines all the properties except BETA does not provide statical type safety. <p> Languages based on f-bounded polymorphism (Canning et al., 1989) introduce subclasses which are not subtypes. A particularly interesting take on the problem is presented in <ref> (Torgersen, 1998) </ref> which suggests a statically type safe variant of virtual classes. With this approach, the ability to stop covariance through the use of final-bindings is leveraged to retain the expressiveness never the less. <p> contributions to this area of research is so far two papers: 1) Genericity in Java with Virtual Types presented at ECOOP'97 (Thorup, 1997b) describing the design and implementation of virtual classes as known from BETA, but retrofitted for the Java programming 5 language; and 2) Unifying Genericity submitted to OOPSLA'98 <ref> (Thorup and Torgersen, 1998) </ref>, which describes an approach to unify all the desirable properties, by providing means to selectively eliminate any one of them, effectively capturing the expressiveness of all past approaches to solve the problem. <p> As we see it, there are several conceptual problems in parameterized classes. To illustrate these problems, assume for a moment that Java does have parameterized classes, allowing declarations of the form: 1 As suggested in <ref> (Torgersen, 1998) </ref>, virtual types can be checked at compile time with little loss of expressiveness. This hinges heavily on the use of final virtual types, which then allow a limited form of covariance to be used. 8 class MapKey,Elem - void insertAt (Key k, Elem e) . . . <p> As a side effect, the present section also provides the first outline for a new programming language idea, which the author intends to implement and utilize as a basis for further research. This text represents a condensed version of a paper Unifying Genericity <ref> (Thorup and Torgersen, 1998) </ref>, as such the innovative ideas herein should be credited equally to Mads Torgersen. 1.3.1 Bounded Genericity The very essence of all genericity mechanisms is to enable the description of generic classes from which specific classes can be derived. <p> The following briefly compares bounded genericity to some of the programming languages listed in Figure 1.3. In-depth coverage of this can be found in the section on related work in <ref> (Tho-rup and Torgersen, 1998) </ref>. subclasses subtype inferred by statically Genericity are subtypes subclass covariance bounds unification type safe Eiffel Java (arrays) a BETA k C ++ Pizza Sather g d LOOM b b Transframe BOPL l idea a: In Java, array is a built-in type, not a class. b: LOOM uses
Reference: <author> Yokote, Y. </author> <year> (1988). </year> <title> The Design and Implementation of ConcurrentSmalltalk. </title> <publisher> World Scientific Publishing, </publisher> <address> Masashino City, Tokyo. </address>
Reference-contexts: More recently, research in this area has lead to e.g. the concurrency modeling in BETA (Kristensen et al., 1985) and the language ConcurrentSmalltalk <ref> (Yokote, 1988) </ref>.
Reference: <author> Zdonik, S. and Maier, D. </author> <year> (1990). </year> <title> Readings in Object Oriented Databases, </title> <booktitle> chapter 1: Fundamentals of Object-Oriented Databases, </booktitle> <pages> pages 132. </pages> <publisher> Morgan Kaufmann. </publisher> <pages> 36 </pages>
Reference-contexts: It is not possible to have all: supporting any two will mutually exclude the third. This dilemma, which was identified in <ref> (Zdonik and Maier, 1990) </ref>, can is represented in this simple pyramid riddle of type systems illustrated below: a programming language cannot fill out this figure in space, but must choose one of the planes. a a a a a a % % % E E E E E E @ @
References-found: 63

