URL: http://www.cs.indiana.edu/l/www/ftp/gannon/rudi.ps.Z
Refering-URL: http://www.cs.indiana.edu/l/www/ftp/gannon/
Root-URL: http://www.cs.indiana.edu
Title: Component Architectures for Distributed Scientific Problem Solving  
Author: D. Gannon, R. Bramley, T. Stuckey, J. Villacis, J. Balasubramanian, E. Akman, F. Breg, S. Diwan, M. Govindaraju 
Address: Bloomington, IN  
Affiliation: Department of Computer Science Indiana University  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> H. Casanova, J. Dongarra, C. Johnson, and M. Miller. </author> <title> Tools for Building Distributed Scientific Applications and Network Enabled Servers, 1998. In Computational Grids. </title>
Reference-contexts: Legion [12] from the University of Virginia supports an extensive object model that meets many of these objectives. Another system that could have been used to build this system is the ACE framework from Washington University [9]. Although based on a Client/Server/Agent model, NetSolve <ref> [1] </ref> can also be used to develop solution stratgies for large linear systems.
Reference: [2] <author> K. Mani Chandy and Carl Kesselman. </author> <title> CC++: A declarative concurrent object-oriented programming notation, </title> <booktitle> 1993. In Research Directions in Concurrent Object Oriented Programming, </booktitle> <publisher> MIT Press. </publisher>
Reference-contexts: HPC++Lib has been implemented using the Nexus [6] runtime system which is part of the Globus [5] metacomputing infrastructure. To implement the Java to HPC++Lib/Nexus library we have developed a version of the Java RMI layered over Nexus. HPC++Lib uses the concept of global pointers from CC++ <ref> [2] </ref> for remote method invocations. Consequently, a substantial subset of the RMI remote reference semantics can be converted to HPC++Lib global pointer operations.
Reference: [3] <author> K. Mani Chandy, Adam Rifkin, Paolo A.G. Sivilotti, Jacob Mandelson, Matthew Richardson, Wesley Tanaka, and Luke Weisman. </author> <title> A World-Wide Distributed System Using Java and the Internet. </title> <booktitle> In Proceedings of the Fifth IEEE International Symposium on High Performance Distributed Computing. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> August </month> <year> 1996. </year>
Reference-contexts: Some modern research systems such as Infospheres <ref> [3] </ref> and WebFlow [7] use a similar approach but also address the concerns of high performance scientific and engineering applications. Legion [12] from the University of Virginia supports an extensive object model that meets many of these objectives.
Reference: [4] <author> B. J. Cox. </author> <title> Object Oriented Programming. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass, </address> <year> 1986. </year>
Reference-contexts: Each part has a specification sheet which describes the precise behavior of the device and the rules for connecting it to other components, including the protocol for its input and output buffers. However, this metaphor is not new <ref> [4] </ref>. In visualization, systems like IRIS Explorer [10] use it to construct specialized visualization tools by composing various filters, image preprocessors and rendering systems. More recently, Java Studio from Sun provides a complete system for composing Java components to build complete graphical user interfaces 7 8 for Java applets.
Reference: [5] <author> I. Foster and C. Kesselman. Globus: </author> <title> A Metacomputing Infrastructure Toolkit. </title> <journal> International Journal of Supercomputer Applications, </journal> <note> 1997. To appear. </note>
Reference-contexts: HPC++ provides us support on all parallel processing platforms and it has a rich set of thread and remote object primitives. HPC++Lib has been implemented using the Nexus [6] runtime system which is part of the Globus <ref> [5] </ref> metacomputing infrastructure. To implement the Java to HPC++Lib/Nexus library we have developed a version of the Java RMI layered over Nexus. HPC++Lib uses the concept of global pointers from CC++ [2] for remote method invocations.
Reference: [6] <author> I. Foster, C. Kesselman, and S. Tuecke. </author> <title> The Nexus Approach to Integrating Multi-threading and Communication. </title> <journal> J. Parallel and Distributed Computing, </journal> <volume> 37 </volume> <pages> 70-82, </pages> <year> 1996. </year>
Reference-contexts: HPC++ provides us support on all parallel processing platforms and it has a rich set of thread and remote object primitives. HPC++Lib has been implemented using the Nexus <ref> [6] </ref> runtime system which is part of the Globus [5] metacomputing infrastructure. To implement the Java to HPC++Lib/Nexus library we have developed a version of the Java RMI layered over Nexus. HPC++Lib uses the concept of global pointers from CC++ [2] for remote method invocations.
Reference: [7] <author> G. Fox and W. Furmanski. </author> <title> Web Technologies in High Performance Distributed Computing, 1998. In Computational Grids. </title>
Reference-contexts: Some modern research systems such as Infospheres [3] and WebFlow <ref> [7] </ref> use a similar approach but also address the concerns of high performance scientific and engineering applications. Legion [12] from the University of Virginia supports an extensive object model that meets many of these objectives.
Reference: [8] <author> D. Gannon, P. Beckman, E. Johnson, and T. Green. </author> <title> Compilation Issues on Distributed Memory Systems, chapter 3 HPC++ and the HPC++Lib Toolkit. </title> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: The programmer then only needs to implement these operations. In the current LSA prototype we use HPC++Lib <ref> [8] </ref> to program the component wrapper code. The following implementation example uses synchronized queues for managing the input data streams. HPC++ is multithreaded. Synchronized queues provide a simple way for a producer thread to send data to a consumer thread. In our case, the producers are the input port objects.
Reference: [9] <author> A. Gokhale, D.C. Schmidt, T. Harrison, and G. Parulkar. </author> <title> Towards real-time CORBA. </title> <journal> IEEE Communications Magazine, </journal> <volume> 14(2), </volume> <month> Feb </month> <year> 1997. </year>
Reference-contexts: Legion [12] from the University of Virginia supports an extensive object model that meets many of these objectives. Another system that could have been used to build this system is the ACE framework from Washington University <ref> [9] </ref>. Although based on a Client/Server/Agent model, NetSolve [1] can also be used to develop solution stratgies for large linear systems.
Reference: [10] <institution> Numerical Algorithms Group. </institution> <note> IRIS Explorer, visited 8-20-97. see http://www.nag.co.uk/Welcome IEC.html. </note>
Reference-contexts: Each part has a specification sheet which describes the precise behavior of the device and the rules for connecting it to other components, including the protocol for its input and output buffers. However, this metaphor is not new [4]. In visualization, systems like IRIS Explorer <ref> [10] </ref> use it to construct specialized visualization tools by composing various filters, image preprocessors and rendering systems. More recently, Java Studio from Sun provides a complete system for composing Java components to build complete graphical user interfaces 7 8 for Java applets.
Reference: [11] <author> Kate Keahey and Dennis Gannon. PARDIS: </author> <title> A Parallel Approach to CORBA. </title> <booktitle> In 6th IEEE International Symposium on High Performance Distributed Computation, </booktitle> <month> August </month> <year> 1997. </year>
Reference-contexts: In particular, for components that are based on parallel implementations, the communications channels may need to be implemented as multiple concurrent pathways (see <ref> [11] </ref> for an example.) A second problem with current commercial desktop component systems is the mechanism for encapsulating an existing scientific application (which may itself be a parallel distributed computation) into a component.

References-found: 11

