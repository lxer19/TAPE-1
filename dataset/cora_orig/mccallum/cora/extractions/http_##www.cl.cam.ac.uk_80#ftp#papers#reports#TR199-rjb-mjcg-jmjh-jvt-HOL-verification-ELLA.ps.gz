URL: http://www.cl.cam.ac.uk:80/ftp/papers/reports/TR199-rjb-mjcg-jmjh-jvt-HOL-verification-ELLA.ps.gz
Refering-URL: http://www.cl.cam.ac.uk:80/ftp/papers/reports/
Root-URL: 
Title: The HOL Verification of ELLA Designs  
Author: Richard Boulton, Mike Gordon, John Herbert, John Van Tassel 
Address: New Museums Site Pembroke Street Cambridge CB2 3QG United Kingdom  
Affiliation: University of Cambridge Computer Laboratory  
Abstract: HOL is a public domain system for generating proofs in higher order predicate calculus. It has been in experimental and commercial use in several countries for a number of years. ELLA 2 is a hardware design language developed at the Royal Signals and Radar Establishment (RSRE) and marketed by Computer General Electronic Design. It supports simulation models at a variety of different abstraction levels. A preliminary methodology for reasoning about ELLA designs using HOL is described. Our approach is to semantically embed a subset of the ELLA language in higher order logic, and then to make this embedding convenient to use with parsers and pretty-printers. There are a number of semantic issues that may affect the ease of verification. We discuss some of these briefly. We also give a simple example to illustrate the methodology. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Borras, P. </author> <title> PPML Reference Manual & Compiler Implementation. </title> <booktitle> Sema Group, </booktitle> <month> June 6, </month> <year> 1989. </year> <title> Appears in The CENTAUR Reference Manual. Contact: CENTAUR Distribution, </title> <institution> INRIA Sophia-Antipolis, 2004 Route des Lucioles, </institution> <address> 06565 Valbonne CEDEX, FRANCE (centaur@mirsa.inria.fr). </address>
Reference-contexts: The notation is a modified form of BNF resembling Prolog's definite-clause grammars. Parse-trees (or any other data object) may be created during the parse through action symbols embedded in the grammar. The pretty-printer generator is inspired by the Pretty-Printing Meta-Language for the CENTAUR system <ref> [1] </ref>. As indicated previously, there are two pretty-printers in the system. One is for parse-trees and the other is for HOL terms. The parser and pretty-printer for parse-trees work for the whole of the ELLA language. The pretty-printer for HOL terms only deals with the semantically embedded subset of ELLA.
Reference: [2] <author> Boyer, R.S. and Moore, J.S. </author> <title> A Computational Logic. </title> <publisher> Academic Press, </publisher> <year> 1979. </year>
Reference-contexts: In the former, a hardware description language (HDL) like ELLA [10] or VHDL [8] is used, in the latter special purpose formal systems like HOL [5], Boyer-Moore logic <ref> [2] </ref> or temporal logic [7] are employed. The research described here, which has been in progress for about a year, aims to build a bridge between these two methods by providing theorem proving tools for reasoning about designs expressed in the ELLA HDL.
Reference: [3] <author> Church, A. </author> <title> A Formulation of the Simple Theory of Types. </title> <journal> Journal of Symbolic Logic, </journal> <volume> 5, </volume> <year> 1940. </year> <month> 25 </month>
Reference-contexts: This approach, which 4 ML is an acronym for "metalanguage". 5 is due to Milner [4, 9], ensures that a theorem can only be created if it has a formal proof. The formulation of higher order logic supported by the HOL system is a version of simple type theory <ref> [3] </ref> with a restricted form of polymorphism (i.e. type variables). Terms of this logic include function-denoting -abstractions; the term x: t [x] denotes the function a 7! t [a]. The type discipline of higher order logic is similar to the type system of the metalanguage ML.
Reference: [4] <author> Gordon, M., Milner, R., Morris, L., Newey, M. and Wadsworth, C. </author> <title> A Meta--language for Interactive Proof in LCF. </title> <booktitle> Proceedings of the ACM Conference on the Principles of Programming Languages, </booktitle> <address> Tuscon, </address> <year> 1978. </year> <note> (Also issued as Report CSR-16-77, </note> <institution> Department of Computer Science, University of Edinburgh, </institution> <year> 1977). </year>
Reference-contexts: This approach, which 4 ML is an acronym for "metalanguage". 5 is due to Milner <ref> [4, 9] </ref>, ensures that a theorem can only be created if it has a formal proof. The formulation of higher order logic supported by the HOL system is a version of simple type theory [3] with a restricted form of polymorphism (i.e. type variables).
Reference: [5] <author> Gordon, M.J.C. </author> <title> HOL: A Proof Generating System for Higher-Order Logic. </title> <institution> University of Cambridge, Computer Laboratory, Tech. </institution> <note> Report No. 103, 1987; Revised version in G. </note> <editor> Birtwistle and P.A. Subrahmanyam (eds), </editor> <title> VLSI Specification, Verification and Synthesis, </title> <publisher> Kluwer, </publisher> <year> 1987. </year>
Reference-contexts: In the former, a hardware description language (HDL) like ELLA [10] or VHDL [8] is used, in the latter special purpose formal systems like HOL <ref> [5] </ref>, Boyer-Moore logic [2] or temporal logic [7] are employed. The research described here, which has been in progress for about a year, aims to build a bridge between these two methods by providing theorem proving tools for reasoning about designs expressed in the ELLA HDL. <p> To keep the translation from ELLA to HOL context-free, constants are translated in the same way wherever they appear. They are modelled as predicates. This fits in with their use as choosers. For use as initial values, Hilbert's "-operator <ref> [5] </ref> is applied to the predicate. When the predicate specifies a unique value (as is required for initial values), the result is that unique value. <p> We represent such occurrences by an application of the HOL semantic constant SIGNAL to the fixed value. SIGNAL is defined by: SIGNAL (v:*) (t:time) = v 4 An example The example described in this section is based on the example in <ref> [5] </ref>. It is not claimed to be typical of real design, but is merely intended to illustrate our approach to reasoning about ELLA designs with HOL. The example will be presented by showing the input to the HOL-ELLA system supplied by a user, together with the system's response. <p> The proof of this correctness theorem follows the proof of the example in <ref> [5] </ref>. Extra work is required to eliminate the semantic constants. 5 Conclusions and Future work We have described the first stage of a project to link the HOL formal logic, and its associated formal proof system, with the ELLA hardware description language and its associated CAD system.
Reference: [6] <author> Gordon, M.J.C. </author> <title> Mechanizing Programming Logics in Higher Order Logic, in Current Trends in Hardware Verification and Automated Theorem Proving, edited by G. Birtwistle and P.A. Subrahmanyam, </title> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: The approach taken, which is illustrated by the example in Section 4, is to semantically embed a subset of ELLA in higher order logic, the logic of the HOL theorem proving system. This approach has already been used for programming languages <ref> [6] </ref>. Parsers and pretty-printers are provided that enable texts in ELLA syntax to be input and output from HOL. An ELLA text parses to the term of higher order logic that represents its semantics. Behavioural properties of this semantic representation can then be deduced, using the standard laws of logic.
Reference: [7] <author> Halpern, J., Manna, Z. and Moszkowski, B. </author> <title> A Hardware Semantics based on Temporal Intervals. </title> <booktitle> In the proceedings of the 10-th International Colloquium on Automata, Languages and Programming", </booktitle> <address> Barcelona, Spain, </address> <year> 1983. </year>
Reference-contexts: In the former, a hardware description language (HDL) like ELLA [10] or VHDL [8] is used, in the latter special purpose formal systems like HOL [5], Boyer-Moore logic [2] or temporal logic <ref> [7] </ref> are employed. The research described here, which has been in progress for about a year, aims to build a bridge between these two methods by providing theorem proving tools for reasoning about designs expressed in the ELLA HDL.
Reference: [8] <author> Institute of Electrical and Electronics Engineers. </author> <title> IEEE Standard VHDL Language Reference Manual. </title> <publisher> IEEE Press, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: 1 Introduction There is currently a gap between the methods used to specify hardware in simulation oriented CAD systems and the methods used for formal verification. In the former, a hardware description language (HDL) like ELLA [10] or VHDL <ref> [8] </ref> is used, in the latter special purpose formal systems like HOL [5], Boyer-Moore logic [2] or temporal logic [7] are employed.
Reference: [9] <author> Milner, R. </author> <title> A Theory of Type Polymorphism in Programming. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 17, </volume> <year> 1978. </year>
Reference-contexts: This approach, which 4 ML is an acronym for "metalanguage". 5 is due to Milner <ref> [4, 9] </ref>, ensures that a theorem can only be created if it has a formal proof. The formulation of higher order logic supported by the HOL system is a version of simple type theory [3] with a restricted form of polymorphism (i.e. type variables).
Reference: [10] <author> Morison, J.D., Peeling, N.E. and Thorp, </author> <title> T.L. ELLA: Hardware Description or Specification?, </title> <booktitle> Proceedings IEEE International Conference, </booktitle> <address> CAD-84, Santa Clara, </address> <month> November, </month> <year> 1984. </year>
Reference-contexts: 1 Introduction There is currently a gap between the methods used to specify hardware in simulation oriented CAD systems and the methods used for formal verification. In the former, a hardware description language (HDL) like ELLA <ref> [10] </ref> or VHDL [8] is used, in the latter special purpose formal systems like HOL [5], Boyer-Moore logic [2] or temporal logic [7] are employed.
Reference: [11] <author> Pygott, C.H. NODEN-HDL: </author> <title> An Engineering Approach to Hardware Verification. In The Fusion of Hardware Design & Verification, edited by G.J. Milne, </title> <publisher> Elsevier Science Publishers, </publisher> <year> 1988. </year> <month> 26 </month>
Reference-contexts: can be conducted while maintaining an ELLA syntactic view of the behaviour? * Should the designer move quickly from the ELLA texts to the corresponding HOL and do all proofs with a HOL view of behaviour? * Could one use mostly automatic verification tools at the lower levels of design <ref> [11] </ref>, and expect that only the higher-level or system aspects be verified in HOL by "experts"? * How much does specification help/guide the design? 24 * What design styles best accommodate formal methods? * What verification tasks can be automated or made easier? In trying to find answers to these questions
References-found: 11

