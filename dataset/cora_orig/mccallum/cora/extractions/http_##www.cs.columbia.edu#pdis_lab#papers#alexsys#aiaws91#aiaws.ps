URL: http://www.cs.columbia.edu/pdis_lab/papers/alexsys/aiaws91/aiaws.ps
Refering-URL: http://www.cs.columbia.edu/pdis_lab/
Root-URL: 
Title: The ALEXSYS Mortgage Pool Allocation System  
Author: Salvatore J. Stolfo, Philip K. Chan, Leland Woodbury, Jason Glazier, David Ohsie 
Address: New York, N.Y. 10027  
Affiliation: Columbia University Department of Computer Science and the Center for Advanced Technology  
Abstract: We studied various approaches for the allocation of mortgage pools, a combinatorial optimization problem faced by financial institutions that trade in mortgage-backed securities. We review the problem, describe and compare the approaches taken to solve it, and demonstrate how this work motivates further research and the development of a high-level parallel rule language that uses meta-rules for redaction of conflicting (or less profitable) instantiations. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. Pinsky, P. Fahn, and Y. Yemini, </author> <title> "Mortgage pool allocation by simulated annealing," </title> <type> Tech. Rep. </type> <institution> CUCS-052-90, Department of Computer Science, Columbia University, </institution> <address> New York, NY, </address> <year> 1990. </year>
Reference-contexts: Concurrently, a simulated annealing program (ANNEAL), implemented in the C language, was developed to solve the same problem. (Due to space limitations, we shall not detail ANNEAL in this paper. The details of the simulated annealing solution are reported in <ref> [1] </ref>.) Each of fl This research has been partially supported by grants from Citicorp and the New York Science and Technology Foundation. these two approaches appealed for different reasons: the advantage of ALEXSYS is the ease of encoding and modifying the rules used by the human alloca-tors for the task; the
Reference: [2] <author> M. R. Garey and D. S. Johnson, </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. </title> <editor> W. H. </editor> <publisher> Freeman and Company, </publisher> <year> 1979. </year>
Reference-contexts: The rapidity with which the computer may reallocate contracts allows the allocators to exploit the full variance and capture this lost source of profit. The mortgage pool allocation problem is an instance of a general class of well-known combinatorial optimization problems whose complexity is known to be NP-complete <ref> [2] </ref>, and hence intractable [3]. (It is interesting to note that such optimization problems are ubiquitous in the financial industry.) Yet, each month, human allocators allocate pools to contracts effectively: profits are made and contract delivery fails are minimized.
Reference: [3] <author> S. J. Stolfo and X. Yu, </author> <title> "Complexity of mortgage pool allocation," </title> <type> Tech. Rep. </type> <institution> CUCS-063-90, Department of Computer Science, Columbia University, </institution> <address> New York, NY, </address> <year> 1990. </year>
Reference-contexts: The mortgage pool allocation problem is an instance of a general class of well-known combinatorial optimization problems whose complexity is known to be NP-complete [2], and hence intractable <ref> [3] </ref>. (It is interesting to note that such optimization problems are ubiquitous in the financial industry.) Yet, each month, human allocators allocate pools to contracts effectively: profits are made and contract delivery fails are minimized.
Reference: [4] <author> C. L. Forgy, </author> <title> "OPS5 user's manual," </title> <type> Tech. Rep. </type> <institution> CMU-CS-81-135, Department of Computer Science, Carnegie-Mellon University, </institution> <month> July </month> <year> 1981. </year>
Reference-contexts: may dictate a long-term strategy of preserving a strong inventory, another may prefer short-term profitability. 3 Two approaches In this section we outline our efforts in solving the mortgage pool allocation problem using two different techniques: the rule-based OPS5 and procedural C++ approaches. 3.1 OPS5 implementation of ALEXSYS The OPS5 <ref> [4] </ref> version of ALEXSYS was originally implemented in a Common Lisp environment running on a SUN/4 workstation. It was then compiled to the C language, using an OPS5-to-C compiler [5]. The rule-based expert system implementation was investigated for two reasons.
Reference: [5] <author> D. P. Miranker and B. J. Lofaso, </author> <title> "The organization and performance of a TREAT-based production system compiler," </title> <journal> IEEE Trans. on Knowledge and Data Engineering, </journal> <note> to appear. </note>
Reference-contexts: It was then compiled to the C language, using an OPS5-to-C compiler <ref> [5] </ref>. The rule-based expert system implementation was investigated for two reasons. First, the task is primarily solved in many financial organizations by human experts who learn the PSA rules and allocate with paper and pencil. Hence, human experiential heuristic knowledge is readily available to tackle the problem.
Reference: [6] <author> S. J. Stolfo, L. Woodbury, J. Glazier, and P. Chan, </author> <title> "The ALEXSYS mortgage pool allocation expert system: A case study of speeding up rule-based programs," </title> <booktitle> in Proceedings of the AI in Business Workshop, AAAI, </booktitle> <year> 1990. </year>
Reference-contexts: Most of this time was devoted to investigating several techniques used to speed the running time of the OPS5 program from days to seconds <ref> [6] </ref>. The human allocators' strategy is straightforward and was replicated as closely as possible by ALEXSYS.
Reference: [7] <author> S. J. Stolfo, H. M. Dewan, and O. Wolfson, </author> <title> "The PARULEL parallel rule language," </title> <booktitle> in Proc. Intl. Conf. Parallel Processing, </booktitle> <month> August </month> <year> 1991. </year> <note> In press. </note>
Reference-contexts: these problems. 5 PARULEL PARULEL is a rule language with parallel execution semantics that we are currently developing. (It should be noted that PARULEL is ultimately intended to run on parallel hardware, though this is beyond the scope of this paper.) The essential features of the language are described in <ref> [7, 8] </ref>. In this section, we briefly describe the meta-rule feature of PARULEL and how it was used to build a prototype parallel version of ALEXSYS. The execution of current rule languages can be divided into the match, select, and act phases.
Reference: [8] <author> S. J. Stolfo, O. Wolfson, P. K. Chan, H. M. De-wan, L. Woodbury, J. S. Glazier, and D. A. Ohsie, "PARULEL: </author> <title> Parallel rule processing using meta-rules for redaction," </title> <journal> Journal of Parallel and Distributed Computing, </journal> <year> 1991. </year> <title> Special issue on the parallel execution of rule-based programs, </title> <note> to appear Dec. </note> <year> 1991. </year>
Reference-contexts: these problems. 5 PARULEL PARULEL is a rule language with parallel execution semantics that we are currently developing. (It should be noted that PARULEL is ultimately intended to run on parallel hardware, though this is beyond the scope of this paper.) The essential features of the language are described in <ref> [7, 8] </ref>. In this section, we briefly describe the meta-rule feature of PARULEL and how it was used to build a prototype parallel version of ALEXSYS. The execution of current rule languages can be divided into the match, select, and act phases.
References-found: 8

