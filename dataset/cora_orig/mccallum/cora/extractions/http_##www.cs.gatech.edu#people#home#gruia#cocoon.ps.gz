URL: http://www.cs.gatech.edu/people/home/gruia/cocoon.ps.gz
Refering-URL: http://www.cs.gatech.edu/people/home/gruia/
Root-URL: 
Title: Finding Large Planar Subgraphs and Large Subgraphs of a Given Genus  
Author: Gruia Calinescu Cristina G. Fernandes 
Abstract: We consider the MAXIMUM PLANAR SUBGRAPH problem given a graph G, find a largest planar subgraph of G. This problem has applications in circuit layout, facility layout, and graph drawing [F92, TDB88]. We improve the analysis of one of the algorithms presented in [CFFK96], showing it has an approximation ratio of 4/9, which becomes the best known approximation ratio for the MAXIMUM PLANAR SUBGRAPH problem. We also consider the MAXIMUM GENUS D SUBGRAPH problem given a connected graph G, find a maximum subgraph of G of genus at most D. For this problem, we present a simple algorithm whose approximation ratio is 1/4, and then indicate how to improve this bound by a positive *.
Abstract-found: 1
Intro-found: 1
Reference: [CFFK96] <author> G. Calinescu, C. G. Fernandes, U. Finkler and H. Karloff, </author> <title> "A Better Approximation Algorithm for Finding Planar Subgraphs", </title> <booktitle> Proc. 7 th Annual ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <year> 1996. </year>
Reference-contexts: In the literature, authors sometimes ensure that their performance ratio is at least one by defining it to be the reciprocal of ours. Before the algorithm presented in <ref> [CFFK96] </ref>, the best known approximation ratio for this problem was 1=3. The basic idea of that paper was to look for large triangular structures (i.e., graphs whose cycles are all triangles). More specifically, the best algorithm presented in [CFFK96], from now on denoted by A, simply outputs a maximum triangular structure <p> Before the algorithm presented in <ref> [CFFK96] </ref>, the best known approximation ratio for this problem was 1=3. The basic idea of that paper was to look for large triangular structures (i.e., graphs whose cycles are all triangles). More specifically, the best algorithm presented in [CFFK96], from now on denoted by A, simply outputs a maximum triangular structure in the input graph G (that is, which is a subgraph of G). Note that triangular structures are planar: a triangular structure cannot contain a subdivision of K 5 or K 3;3 . <p> Given a graph H, let mts (H) denote the number of edges in a maximum triangular structure in H. Define (H) = mts (H)=jE (H)j if E (H) 6= ;, and (H) = 1 if E (H) = ;. In <ref> [CFFK96] </ref>, it was proved that (H) 0:4, provided that H is planar. It was also shown that there is a family of planar graphs H i for which (H i ) tends to 4/9. In this paper, we show that for any planar graph H, (H) 4 9 . <p> In this section, we give a better lower bound on the number of triangles in a maximum triangular cactus in a planar graph. Using this lower bound, we prove that (H) 4 9 , for any planar graph H. Previously, the best lower bound for (H) was 2/5 <ref> [CFFK96] </ref>. Let G be a graph. Let P = fV 1 ; : : : ; V k g be a partition of the vertices of G and Q = fE 1 ; : : : ; E m g be a partition of the edges of G. <p> Corollary 2.10 The performance ratio of algorithm A is 4 9 . Proof. If H is a maximum planar subgraph of the input graph G, then mts (G) mts (H) = (H)jE (H)j. And, from the previous corollary, we conclude the 4/9 lower bound. In <ref> [CFFK96] </ref>, there is a proof that 4/9 is also an upper bound, i.e., the performance ratio of algorithm A is exactly 4/9. 3 Subgraphs of a Given Genus In this section, we describe and analyze an algorithm for finding a large subgraph (of a given graph) with an embedding of genus <p> A C 4 has four edges and can be added to P increasing the genus of the embedding by at most three. We gain one edge for each C 4 , and we end up with ( 1 4 + *)jE (H)j edges. 4 Open Problems In <ref> [CFFK96] </ref>, the MAXIMUM PLANAR SUBGRAPH problem was proved to be MAX-SNP Hard, which means there is a positive * such that a polynomial-time algorithm with approximation ratio higher than 1* 9 implies P = N P .
Reference: [CN85] <author> N. Chiba and T. Nishizeki, </author> <title> "Arboricity and Subgraph Listing Algorithms", </title> <journal> SIAM Journal of Computing, </journal> <volume> 14 </volume> <pages> 210-223, </pages> <year> 1985. </year>
Reference-contexts: Note that the algorithm can be implemented in polynomial time, since one can explicitly list all the triangles of G in time jE (G)j 3 2 <ref> [CN85] </ref>. And modifying the embeddings (the clockwise orientations around the vertices) can also be done in polynomial time. Also steps 2 and 3 iterate at most jE (G)j times. 8 Theorem 3.2 The approximation ratio of algorithm B is 1 4 . Proof.
Reference: [F92] <author> L. R. Foulds, </author> <title> Graph Theory Applications, </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: 1 Introduction The MAXIMUM PLANAR SUBGRAPH problem is: given a graph G, find a subgraph H of G of maximum size, where size is the number of edges. This problem has applications in circuit layout, facility layout, and graph drawing <ref> [F92, TDB88] </ref>. MAXIMUM PLANAR SUBGRAPH is known to be NP-Complete [LG77]. Therefore we are looking for polynomial-time approximation algorithms. For a graph G, let us define Opt (G) to be the maximum size of a planar subgraph of G.
Reference: [GS85] <author> H. N. Gabow and M. Stallmann, </author> <title> "Efficient Algorithms for Graphic Matroid Intersection and Parity", Automata, </title> <booktitle> Language and Programming: 12 th Colloq., Lecture Notes in Computer Science, </booktitle> <volume> vol. 194, </volume> <pages> 210-220, </pages> <year> 1985. </year>
Reference-contexts: In fact, all the blocks of a triangular structure are edges or triangles. Finding a maximum triangular structure subgraph of G is solvable in polynomial time, by using a matroid parity algorithm <ref> [LP86, GS85] </ref>. Given a graph H, let mts (H) denote the number of edges in a maximum triangular structure in H. Define (H) = mts (H)=jE (H)j if E (H) 6= ;, and (H) = 1 if E (H) = ;.
Reference: [GT87] <author> J. N. Gross and T. W. Tucker, </author> <title> Topological Graph theory, </title> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1987. </year>
Reference-contexts: This purely combinatorial definition of embedding and genus can easily be shown to be equivalent with the usual topological definition (see, e.g., <ref> [GT87] </ref>). For simplicity, we shall only give a high level description of the algorithm. Algorithm B Step 1: Start with a plane embedding of P , a spanning tree of the input graph G.
Reference: [LG77] <author> P. C. Liu and R. C. Geldmacher, </author> <title> "On the Deletion of Nonplanar Edges of a Graph", </title> <booktitle> Proc. 10 th Southeastern Conference on Combinatorics, Graph Theory, and Computing, </booktitle> <pages> 727-738, </pages> <year> 1977. </year>
Reference-contexts: 1 Introduction The MAXIMUM PLANAR SUBGRAPH problem is: given a graph G, find a subgraph H of G of maximum size, where size is the number of edges. This problem has applications in circuit layout, facility layout, and graph drawing [F92, TDB88]. MAXIMUM PLANAR SUBGRAPH is known to be NP-Complete <ref> [LG77] </ref>. Therefore we are looking for polynomial-time approximation algorithms. For a graph G, let us define Opt (G) to be the maximum size of a planar subgraph of G.
Reference: [LP86] <author> L. Lovasz and M. D. Plummer, </author> <title> Matching Theory, </title> <publisher> Elsevier Science, </publisher> <address> Amsterdam, </address> <year> 1986. </year>
Reference-contexts: In fact, all the blocks of a triangular structure are edges or triangles. Finding a maximum triangular structure subgraph of G is solvable in polynomial time, by using a matroid parity algorithm <ref> [LP86, GS85] </ref>. Given a graph H, let mts (H) denote the number of edges in a maximum triangular structure in H. Define (H) = mts (H)=jE (H)j if E (H) 6= ;, and (H) = 1 if E (H) = ;. <p> And if the input graph G happens to be planar, the approximation ratio of algorithm A is exactly (G). This improves the best known ratio for the MAXIMUM PLANAR SUBGRAPH to 4/9. Lovasz and Plummer <ref> [LP86] </ref> give a minimax formula relating the size of a maximum triangular structure in a graph G to some "valid" partitions of the vertices and edges of G. This formula enables us to prove the 4/9 bound. <p> Set (P; Q) = n k + i=1 2 c; (1) where n is the number of vertices in G. Note that (P; Q) 0, and that there is always a valid pair (P; Q). According to Lovasz and Plummer <ref> [LP86] </ref>, we have the following theorem: Theorem 2.1 The number of triangles in a maximum triangular cactus in a graph G is equal to the minimum of (P; Q) taken over all valid pairs (P; Q) for G. Actually, there is a mistake in [LP86] in the formula corresponding to (1): <p> According to Lovasz and Plummer <ref> [LP86] </ref>, we have the following theorem: Theorem 2.1 The number of triangles in a maximum triangular cactus in a graph G is equal to the minimum of (P; Q) taken over all valid pairs (P; Q) for G. Actually, there is a mistake in [LP86] in the formula corresponding to (1): the floor is missing 1 . Let G be a planar graph with n vertices. Embed G in the plane without crossing edges, obtaining a plane graph. Let t be the number of edges missing for this embedding to be triangulated.
Reference: [TDB88] <author> R. Tamassia, G. Di Battista and C. Batini, </author> <title> "Automatic Graph Drawing and Readability of Diagrams", </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <volume> 18 </volume> <pages> 61-79, </pages> <year> 1988. </year>
Reference-contexts: 1 Introduction The MAXIMUM PLANAR SUBGRAPH problem is: given a graph G, find a subgraph H of G of maximum size, where size is the number of edges. This problem has applications in circuit layout, facility layout, and graph drawing <ref> [F92, TDB88] </ref>. MAXIMUM PLANAR SUBGRAPH is known to be NP-Complete [LG77]. Therefore we are looking for polynomial-time approximation algorithms. For a graph G, let us define Opt (G) to be the maximum size of a planar subgraph of G.
Reference: [Th89] <author> C. Thomassen, </author> <title> "The Graph Genus Problem is NP-Complete", </title> <journal> Journal of Algorithms, </journal> <volume> 10 </volume> <pages> 568-576, </pages> <year> 1989. </year>
Reference-contexts: This problem is NP-hard. The particular case when d = 0 is the MAXIMUM PLANAR SUBGRAPH problem. And, deciding if G is the optimum solution is equivalent to deciding if the genus of G is at most d, which is an NP-complete problem <ref> [Th89] </ref>. Without loss of generality, we may assume that the input graph G has at least n 1 + d edges. Recall that G is connected. So, consider P a connected spanning subgraph of G with n 1 + d edges. <p> We can treat embeddings purely combinatorially as in <ref> [Th89] </ref>.
References-found: 9

