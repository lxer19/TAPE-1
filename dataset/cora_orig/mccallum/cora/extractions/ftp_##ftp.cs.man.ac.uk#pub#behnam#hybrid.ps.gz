URL: ftp://ftp.cs.man.ac.uk/pub/behnam/hybrid.ps.gz
Refering-URL: http://www.cs.man.ac.uk/ugrad/projects/graph.html
Root-URL: http://www.cs.man.ac.uk
Title: Combining Tree and Feature Classification in Fractal Encoding of Images  
Author: Behnam Bani-Eqbal 
Keyword: Subject terms: Digital image compression, iterated function systems, fractal codes.  
Note: Address:  No: +44-61-275-6152  
Address: UK.  Oxford Road, Manchester M13 9PL, UK.  
Affiliation: Department of Computer Science University of Manchester  Department of Computer Science, University of Manchester,  
Email: Email: behnam@cs.man.ac.uk  
Phone: Tel  
Date: November 13, 1995  
Abstract: Fractal coding of digital images offers many promising qualities. The encoding process, however, suffers from the long search time of the domain block pool. A standard technique for speeding up the encoding is the feature classification of blocks. In this paper we show that the classes can be arranged in a tree, and searched by a pruning algorithm developed and explained in a previous paper by the author. We show that this hybrid method enhances the search speed by upto 75% over the purely feature based method. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. E. Hutchinson, </author> <title> `Fractals and Self-Similarity', </title> <journal> Indiana Univ Math Journal, </journal> <volume> Vol 35, </volume> <pages> pp 713 - 747, </pages> <year> 1981. </year>
Reference-contexts: 1 Introduction Recently fractal compression of digital images has attracted much attention. It is based on the mathematical theory of iterated function systems (IFS) developed by Hutchinson <ref> [1] </ref> and Barnsley [2]. The application of IFS theory to image compression was proposed originally by Jacquin [3] and Barnsley [4]. Since their seminal work, many variants of the IFS method have been reported in the literature [5].
Reference: [2] <author> M. F. </author> <title> Barnsley, `Fractals Everywhere', </title> <publisher> Academic Press, </publisher> <address> San Diego, CA, </address> <year> 1988. </year>
Reference-contexts: 1 Introduction Recently fractal compression of digital images has attracted much attention. It is based on the mathematical theory of iterated function systems (IFS) developed by Hutchinson [1] and Barnsley <ref> [2] </ref>. The application of IFS theory to image compression was proposed originally by Jacquin [3] and Barnsley [4]. Since their seminal work, many variants of the IFS method have been reported in the literature [5].
Reference: [3] <author> A. E. Jacquin, </author> <title> `A fractal theory of iterated Markov operations, with applications to digital image coding', </title> <type> Ph.D. Thesis, </type> <institution> Department of Mathematics, Georgia Institute of Technology, </institution> <year> 1989. </year>
Reference-contexts: 1 Introduction Recently fractal compression of digital images has attracted much attention. It is based on the mathematical theory of iterated function systems (IFS) developed by Hutchinson [1] and Barnsley [2]. The application of IFS theory to image compression was proposed originally by Jacquin <ref> [3] </ref> and Barnsley [4]. Since their seminal work, many variants of the IFS method have been reported in the literature [5]. The IFS theory and its applications to image compression together with recent research results are collected in the book edited by Y. Fisher [6]. <p> The map T is contracting if a 0 &lt; 1. Jacobs et al. [9], however, show that it is not necessary to enforce this condition for all the maps. The offset is constant as in the original work of Jacquin <ref> [3] </ref>, but researchers have used more general forms. The massic map is chosen to minimise the distance from the (contracted flipped) domain block D to the range block R = (r ij ).
Reference: [4] <author> M. Barnsley, L. Hurd, </author> <title> `Fractal Image Compression', </title> <editor> Jones and Bartlett, </editor> <year> 1992. </year>
Reference-contexts: 1 Introduction Recently fractal compression of digital images has attracted much attention. It is based on the mathematical theory of iterated function systems (IFS) developed by Hutchinson [1] and Barnsley [2]. The application of IFS theory to image compression was proposed originally by Jacquin [3] and Barnsley <ref> [4] </ref>. Since their seminal work, many variants of the IFS method have been reported in the literature [5]. The IFS theory and its applications to image compression together with recent research results are collected in the book edited by Y. Fisher [6].
Reference: [5] <author> D. Saupe, R. Hamzaoui, </author> <title> `A review of the fractal image compression literature,' </title> <journal> ACM Computer Graphics 28, </journal> <note> 4 (1994) pp 268 - 276. </note>
Reference-contexts: The application of IFS theory to image compression was proposed originally by Jacquin [3] and Barnsley [4]. Since their seminal work, many variants of the IFS method have been reported in the literature <ref> [5] </ref>. The IFS theory and its applications to image compression together with recent research results are collected in the book edited by Y. Fisher [6]. The basic idea of the fractal image compression is as follows. The image is partitioned into non-overlapping range blocks.
Reference: [6] <author> Y. Fisher, </author> <title> Editor, Fractal Image Compression: Theory and Applications to Digital Images, </title> <publisher> Springer Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Since their seminal work, many variants of the IFS method have been reported in the literature [5]. The IFS theory and its applications to image compression together with recent research results are collected in the book edited by Y. Fisher <ref> [6] </ref>. The basic idea of the fractal image compression is as follows. The image is partitioned into non-overlapping range blocks. For every range block a similar but larger domain block is found. The mapping of the domain block to the range block is recorded. <p> This latter condition is explained in section 5. 2 Iterated Function Systems In this section, we explain the basics of the fractal compression scheme. This scheme undelies all further refinements. Our experiments are based on a scheme called quad-tree partitioning, as explained in Fisher's book <ref> [6] </ref>. The appendix of this book contains a complete implementation of the algorithm in the C language. We have adapted this program to incorporate the tree method. The image is a digital gray level picture. <p> The class number must be insensitive to scale and offset adjustments to the pixels, and also to small perturbations of their values. One method was devised by Jacobs, Fisher and Boss [9]. It is also explained in Fisher's book <ref> [6] </ref>. This book includes a C implementation of the algorithm. The idea is to distinguish a block by the order of the average brightness of its four quadrants. More specifically, a block is divided into four quadrants, and their average brightness are computed. <p> It turns out that the class a block belongs to does not change, but the 4 symmetry operation is different. In the search process, a range block is compared against two classes, one for positive scale and one for negative scale. The code presented in Fisher's book <ref> [6] </ref> introduces two refinements. First the classes are further split into 24 sub-clsses each by noting the 24 possible orderings of the quadrant variances. Second it uses variable size range blocks, in a method aptly called quad-tree partitioning. <p> Experiments show that a range of fi values from 4 - 10 give good results. 6 Experimental Results In this section we evaluate the performance of our coder. As the base coder, we use Fisher's quad-tree fractal coder as presented in his book <ref> [6] </ref>, called here the QF algorithm. Our coder is based on Fisher's code but it includes the tree search algorithm. We used both the Haar transform and the DCT for tree data.
Reference: [7] <author> D. Saupe, R. Hamzaoui, </author> <title> `Complexity Reduction methods for fractal image compression', </title> <booktitle> in: IMA Conf. Proc. on Image Processing; Mathematical Methods and Applications, </booktitle> <publisher> Oxford University Press, </publisher> <year> 1995. </year>
Reference-contexts: Its disadvantage is the long encoding time due to the repeated search of the domain pool. Much effort has been spent in devising ways to overcome this problem. The paper by D. Saupe et. al. <ref> [7] </ref> presents an excellent summary of the results. One efficient method is block classification. The domains are grouped independently and online into predefined classes. Only the class of a range block is searched for a matching domain. <p> 2 3 ba a b 2 3 3 4 3 2 1 2 1 4 into 3 classes under the symmetry operations. sym1 sym2 sym2 sym1 domain range standard bring the domain and the range to the standard position, then sym1 1 ffi sym2 transforms the range to the domain. <ref> [7] </ref>. One method is to classify the blocks according to their content. A range block is matched against only the domains in the same class. The key question is how to assign a class number to a block.
Reference: [8] <author> B. Bani-Eqbal, </author> <title> `Enhancing the Speed of Fractal Image Compression', </title> <journal> Optical Engineering, </journal> <volume> Vol 34, No 6, </volume> <pages> pp 1705-1710, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: The paper by D. Saupe et. al. [7] presents an excellent summary of the results. One efficient method is block classification. The domains are grouped independently and online into predefined classes. Only the class of a range block is searched for a matching domain. In a previous paper <ref> [8] </ref>, we presented a tree based scheme for speeding up the search. We structure the domain pool into a tree, and use a pruning algorithm to search for matching blocks. Experimental results demonstrate substantial improvement in the search time. <p> The starting size of the range blocks and the depth of the recursion are set by the user. The idea is that the use of larger range blocks results in a higher compression ratio. 4 Tree search In a previous paper <ref> [8] </ref>, the author presented a novel method of speeding up the encoding process. This is based on arranging the domains in a tree. The reader should refer to the paper for a complete discussion of the method. For completeness we explain the main idea. <p> The best match to R is then the nearest domain D in the conic sense. Now suppose we know that the best match should lie within a distance e. To find it, we must search the cone defined by the equation d (D; R) e. The main result of <ref> [8] </ref> is an algorithm to enumerate blocks lying in a cone. The core of the algorithm depends on the following incremental distance evaluation. Lemma 1 Let D; R be two blocks. Choose a postion and let the pixels there be d; r. <p> The idea simply is to build several trees. Thus we classify the domain pool into classes and build them into distinct trees. Since the tree pruning is faster than linear search, so we should expect to gain on the encoding speed. There is one problem. As noted in <ref> [8] </ref>, building the tree on the full set of block coefficients results in a widely branching stem, which thins out rapidly to the leaves. This is both wasteful and inefficient. <p> This is both wasteful and inefficient. The solution to this problem is to concentrate the block information into fewer coefficients, and use them to build the tree. In <ref> [8] </ref> we achieve this with quadrant averages, utilising the following lemma:- Lemma 2 Let the pixels of the blocks D and R be partitoned into equally-sized sets of size k. Let D; R be obtained by averaging the partitions. Then d (D; R) d (D; R)=k. <p> So we use the first four of the transformed coefficients (but not the term representing the average). As in <ref> [8] </ref>, the tree is searched with an error set to e = jR 0 j 2 =fi where fi is a fixed constant, and R 0 is the subset of the transformed coefficients.
Reference: [9] <author> E. W. Jacobs, Y. Fisher, R. D. </author> <title> Boss `Image Compression: A Study of the Iterated Transform Method' Signal Processing, </title> <booktitle> Vol 29, </booktitle> <year> 1992, </year> <pages> pp 251 - 263. </pages>
Reference-contexts: The domain block (d ij ) is mapped to (a 0 d ij + a 1 ). The map T is contracting if a 0 &lt; 1. Jacobs et al. <ref> [9] </ref>, however, show that it is not necessary to enforce this condition for all the maps. The offset is constant as in the original work of Jacquin [3], but researchers have used more general forms. <p> The key question is how to assign a class number to a block. The class number must be insensitive to scale and offset adjustments to the pixels, and also to small perturbations of their values. One method was devised by Jacobs, Fisher and Boss <ref> [9] </ref>. It is also explained in Fisher's book [6]. This book includes a C implementation of the algorithm. The idea is to distinguish a block by the order of the average brightness of its four quadrants.
Reference: [10] <author> E.J. Stollnitz, T.D. DeRose, D.H. Salesin, </author> <title> `Wavelets for Computer Graphics: A Primer', </title> <institution> Department of Computer Science and Engineering, University of Wash-ington, Seattle, </institution> <note> Technical Report 94-09-11. </note>
Reference-contexts: If we view the image array as a piecewise constant function supported on the unit interval, then it can be written as a linear sum of the basis elements. The coefficients form the Haar transform. For more detail refer to <ref> [10] </ref>. 2. Discrete Cosine Transform (DCT). This is a well studied transform in image processing applications [11]. It is the underlying coder of the JPEG image compression standard.

References-found: 10

