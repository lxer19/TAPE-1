URL: http://www.cs.pitt.edu/~gupta/research/Dist/jrts.ps
Refering-URL: http://www.cs.pitt.edu/~gupta/research/dist.html
Root-URL: 
Title: Real Time Systems,  A Compact Task Graph Representation for Real-Time Scheduling  
Author: RAJIV GUPTA 
Keyword: compile-time timing analysis, task graphs, real-time scheduling, multiprocessor scheduling, monitoring  
Address: Pittsburgh, Pittsburgh, PA 15260  College, Hartford, CT 06106  
Affiliation: Department of Computer Science, University of  Mathematics, Computing and Engineering Center, Trinity  
Note: c 1996 Kluwer Academic Publishers, Boston. Manufactured in The Netherlands.  
Pubnum: 10,  
Email: gupta@cs.pitt.edu  MADALENE SPEZIALETTI mspezial@starbase.cs.trincoll.edu  
Date: 1-32 (1996)  
Abstract: A new task graph representation, namely the compact task graph (CTG), is developed to aid in the scheduling of a set of communicating periodic real-time tasks. This representation explicitly expresses the potential for parallelism across tasks as well as the idle times that may be encountered within application tasks. A CTG based scheduler can generate schedules that are able to meet deadlines by interleaving the execution of tasks on a single processor and/or overlapping the execution of tasks on multiple processors. The construction of a CTG is based upon the busy-idle execution profiles for the tasks generated by the compiler. The profiles are computed assuming that sufficient resources are available for parallel execution of all tasks. Thus, they expose all opportunities for overlapped and interleaved execution. The compiler analyzes the profiles to identify useful opportunities for interleaving and expresses them in the CTG without unnecessary partitioning of the tasks. The CTG is powerful because it expresses schedules that are not expressed by existing approaches for constructing task graphs. Schedules can be generated efficiently since a CTG's construction minimizes the splitting of tasks. We briefly demonstrate the usefulness of CTGs in scheduling real-time tasks and scheduling monitoring tasks without affecting the timing of application tasks. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Audsley, N.C., R.I. Davis, and A. Burns, </author> <title> "Mechanisms for Enhancing the Flexibility and Utility of Hard Real-Time Systems," </title> <booktitle> Proc. IEEE Real-Time Systems Symposium, </booktitle> <year> 1994, </year> <pages> pp. 12-21. </pages>
Reference: <author> Burke, M., </author> <title> "An Interval-based Approach to Exhaustive and Incremental and Interprocedural Data-flow Analysis," </title> <journal> ACM Transactions on Programming Languages and Systems, 1990, </journal> <volume> 12(3) </volume> <pages> 341-395. </pages>
Reference-contexts: The compiler performs this analysis on the control flow graph (CFG) representation of the program. We assume that the CFG is reducible and the analysis is based upon intervals <ref> (Burke, 1990) </ref>, which intuitively correspond to program loops. Each interval L, has a header node h, a last node l, and a back edge from l to h. The busy-idle analysis is carried out in two passes.
Reference: <author> Cheng, S., J.A. Stankovic, and K. Ramamritham, </author> <title> "Dynamic Scheduling of Groups of Tasks with Precedence Constraints in Distributed Hard Real-Time Systems," </title> <booktitle> Proc. 7th IEEE Real-Time Systems Symposium, </booktitle> <month> December, </month> <year> 1986, </year> <pages> pp. 166-174. </pages>
Reference: <author> Gerber, R. and S. Hong, </author> <title> "Semantics-Based Compiler Transformations for Enhanced Schedulabil-ity," </title> <booktitle> Proc. 14th IEEE Real-Time Systems Symposium, </booktitle> <month> December, </month> <year> 1991, </year> <pages> pp. 232-242. </pages>
Reference: <author> Gopinath, P., T. Bihari, and R. Gupta, </author> <title> "Compiler Techniques for Generating Predictable Object-Oriented Real-Time Software," </title> <journal> IEEE Software, </journal> <month> September, </month> <year> 1992, </year> <pages> pp. 45-50. </pages>
Reference: <author> Gopinath, P. and R. Gupta, </author> <title> "Applying Compiler Techniques to Scheduling in Real Time Systems," </title> <booktitle> Proc. 11th IEEE Real-Time Systems Symposium, </booktitle> <month> December, </month> <year> 1990, </year> <pages> Orlando, pp. 247-256. </pages>
Reference: <author> Gudmundsson, O., D. Mosse, K-T. Ko, A.K. Agrawala, and S.K. Tripathi, "MARUTI: </author> <title> A Platform for Hard Real-Time Application," Mission Critical Operating Systems, </title> <publisher> IOS Press, </publisher> <year> 1991. </year>
Reference: <author> Gupta, R. and P. Gopinath, </author> <title> "Correlation Analysis Techniques for Refining Execution Time Estimates of Real-Time Applications," </title> <booktitle> Proc. 11th IEEE Workshop Real-Time Operating Systems and Software, </booktitle> <month> May, </month> <year> 1994, </year> <pages> Seattle, pp. 54-58. </pages>
Reference-contexts: Monitoring Real-Time Applications Non-intrusive monitoring of parallel applications is a challenging task <ref> (Spezialetti and Gupta, 1994) </ref>. In the context of real-time systems we would like to introduce a monitoring task only if it does not adversely affect the schedulability of the real-time application. <p> Although, the monitoring requests must A COMPACT TASK GRAPH REPRESENTATION FOR REAL TIME SCHEDULING 29 be provided at compile-time, the actual monitoring activity can be turned on/off dynamically by activating/deactivating switching instructions. The detailed analysis for introducing monitoring code can be found elsewhere <ref> (Spezialetti and Gupta, 1994) </ref>. 5. <p> Previous work on timing analysis has mainly concentrated on execution timing analysis. This includes compiler support for computing WCET estimates (Neihaus, 1991, Harmon, Baker, and Whalley, 1992, Hong and Greber, 1993, Nirkhe and Pugh, 1992) and the run-time refinement of WCET estimates based upon a combination of compile-time information <ref> (Gupta and Gopinath, 1994, Park and Shaw, 1990) </ref> and run-time information (Gopinath, Bihari, and Gupta, 1992, Gopinath and Gupta, 1990, Ha-ban and Shin, 1989, Audsley, Davis, and Burns, 1994). Some analysis techniques take into account the architectural characteristics of the system (Lim et al., 1994, Neihaus, 1991).
Reference: <author> Gupta, R. and D. Mosse, </author> <title> "Real-Time Scheduling using Compact Task Graphs," </title> <type> Technical Report TR-95-31, </type> <institution> University of Pittsburgh, </institution> <address> Pittsburgh, PA, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: Recently we have implemented our algorithms for computing interleaving and overlapping. We have also developed and implemented extensions to the scheduling algorithms developed by Ramamritham (1990) and Cheng, Stankovic, and Ramamritham (1986). so that they can take advantage of CTGs <ref> (Gupta and Mosse, 1995) </ref>. Acknowledgments The authors thank the reviewers for offering suggestions that have greatly improved the presentation of the material.
Reference: <author> Haban, D. and K.G. Shin, </author> <title> "Application of Real-Time Monitoring to Scheduling Tasks with Random Execution Times," </title> <booktitle> Proc. 10th IEEE Real-Time Systems Symposium, </booktitle> <year> 1989, </year> <pages> pp. 172-183. </pages>
Reference: <author> Haban, D. and K.G. Shin, </author> <title> "Monitoring Distributed Real-Time Systems and its Application," </title> <booktitle> Proc. 6th IEEE Workshop on Real-Time Operating Systems and Software, </booktitle> <year> 1989. </year>
Reference: <author> Han, C.C. and K.J. Lin, </author> <title> "Scheduling Real-Time Computations with Separation Constraints," </title> <journal> Information Processing Letters, </journal> <month> May, </month> <year> 1992, </year> <pages> 42 61-66. </pages>
Reference: <author> Harmon, M., T. Baker, and D. Whalley, </author> <title> "A Retargetable Technique for Predicting Execution Time," </title> <booktitle> Proc. 13th IEEE Real-Time Systems Symposium, </booktitle> <year> 1992, </year> <pages> pp. 68-77. </pages>
Reference: <author> Hong, S. and R. Greber, </author> <title> "Compiling Real-Time Programs into Schedulable Code," </title> <booktitle> Proc. ACM SIGPLAN Conference on Programming Languages Design and Implementation, </booktitle> <year> 1993, </year> <pages> pp. 166-176. </pages>
Reference: <author> Kenny, K.B. and K-J. Lin, </author> <title> "Building Flexible Real-Time Systems using the Flex Language," </title> <booktitle> IEEE Computer, </booktitle> <month> May, </month> <year> 1991, </year> <pages> pp. 70-78. </pages> <note> 32 GUPTA, R. AND SPEZIALETTI, M. </note>
Reference: <author> Kirk, D.B. and J.K. Strosnider, </author> <title> "SMART (Strategic Memory Allocation for Real-Time) Cache Design Using MIPS R3000," </title> <booktitle> Proc. 11th IEEE Real-Time Systems Symposium, </booktitle> <month> December, </month> <year> 1990, </year> <pages> Orlando, pp. 322-330. </pages>
Reference-contexts: In addition to architectural support for switching we must also provide caching support for interleaved scheduling. By partitioning the cache among the interleaved tasks we can ensure that the cache locality is not adversely affected. One such strategy was proposed in <ref> (Kirk and Strosnider, 1990) </ref>. 4. Application of CTGs in Scheduling In this section we briefly discuss the issues relating to the use of CTGs during real-time scheduling. First we briefly discuss the impact of resource constraints that are considered during scheduling.
Reference: <author> Lee, I. and V. Gehlot, </author> <title> "Language Constructs for Real-Time Programming," </title> <booktitle> Proc. 6th IEEE Real-Time Systems Symposium, </booktitle> <year> 1985, </year> <pages> pp. 57-66. </pages>
Reference: <author> Lim, S.S., Y.H. Bae, G.T. Jang, B.-D. Rhee, S.L. Min, C.Y. Park, H. Shin, K. Park, and C.S. Kim, </author> <title> "An Accurate Worst case Timing Analysis for RISC Processors," </title> <booktitle> Proc. IEEE Real-Time Systems Symposium, </booktitle> <year> 1994, </year> <pages> pp. 97-108. </pages>
Reference-contexts: Some analysis techniques take into account the architectural characteristics of the system <ref> (Lim et al., 1994, Neihaus, 1991) </ref>. However, we are unaware of any algorithms that automatically generate CTGs or compute busy-idle profiles to facilitate interleaved and overlapped scheduling of real-time tasks. A number of scheduling techniques that allow for interleaved or overlapped scheduling have been considered before.
Reference: <author> Lin, K.J., S. Natarajan, and J.W.S. Liu, </author> <title> "Imprecise Results: Utilizing Partial Computations in Real-Time Systems," </title> <booktitle> Proc. 8th IEEE Real-Time Systems Symposium, </booktitle> <year> 1987, </year> <pages> pp. 210-217. </pages>
Reference: <author> Lin, K.J. and S. Natarajan, </author> <title> "Expressing and Maintaining Timing Constraints in FLEX," </title> <booktitle> Proc. 9th IEEE Real-Time Systems Symposium, </booktitle> <month> December, </month> <year> 1988, </year> <pages> pp. 96-105. </pages>
Reference: <author> Liu, C.L. and J. Layland, </author> <title> "Scheduling Algorithms for Multiprogramming in a Hard Real-Time Environment," </title> <journal> Journal of the ACM, 1973, </journal> <volume> 20(1) </volume> <pages> 46-61. </pages>
Reference: <author> Mok, A. et al, </author> <title> "Evaluating Tight Execution Time Bounds of Programs by Annotations", </title> <booktitle> Proc. 6th IEEE Workshop on Real-Time Operating Systems and Software, </booktitle> <month> May, </month> <year> 1989, </year> <pages> pp. 74-80. </pages>
Reference: <author> Neihaus, D., </author> <title> "Program Representation and Translation for Predictable Real-Time Systems," </title> <booktitle> Proc. 12th IEEE Real-Time Systems Symposium, </booktitle> <month> December, </month> <year> 1991, </year> <pages> pp. 53-63. </pages>
Reference-contexts: The expanded task graph (ETG) exposes additional amounts of parallelism and idle times in an application. This goal is achieved by assuming that at each input point a new task begins and at each output point a task ends <ref> (Neihaus, 1991, Gud-mundsson et al., 1991) </ref>. When an ETG is constructed for the producer-consumer example (see Figure 1c), corresponding to each value two tasks are created, one for its generation and one for its consumption.
Reference: <author> Nirkhe, V. and W. Pugh, </author> <title> "Partial Evaluation of High-Level Imperative Programming Languages with Applications in Hard Real-Time Systems," </title> <booktitle> Proc. 19th ACM Sigplan-Sigact Symposium on Principles of Programming Languages, </booktitle> <year> 1992, </year> <pages> pp. 269-280. </pages>
Reference: <author> Nirkhe, V., S. Tripathi, and A. Agrawala, </author> <title> "Language Support for the Maruti Real-Time System," </title> <booktitle> Proc. 11th IEEE Real-Time Systems Symposium, </booktitle> <month> December, </month> <year> 1990, </year> <pages> pp. 257-266. </pages>
Reference: <author> Ogle, D.M., K. Schwan, and R. Snodgrass, </author> <title> "Application Dependent Dynamic Monitoring of Distributed and Parallel Systems," </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <month> July, </month> <year> 1993, </year> <pages> 4(7) 762-778. </pages>
Reference: <author> Park, C. and A. Shaw, </author> <title> "Experiments with a Program Timing Tool Based on Source-Level Timing Schema," </title> <booktitle> Proc. 11th IEEE Real-Time Systems Symposium, </booktitle> <year> 1990, </year> <pages> pp. 72-81. </pages>
Reference: <author> Pospischil, G., P. Puschner, A. Vrchoticky, and R. Zainlinger, </author> <title> "Developing Real-Time Tasks with Predictable Timing," </title> <journal> IEEE Software, </journal> <month> September, </month> <year> 1992, </year> <pages> pp. 35-44. </pages>
Reference: <author> Ramamritham, K., </author> <title> "Allocation and Scheduling of Complex Periodic tasks," </title> <booktitle> Proc. 10th International Conference on Distributed Computing Systems, </booktitle> <year> 1990, </year> <pages> pp. 108-115. </pages>
Reference-contexts: 1. Introduction A real-time scheduler typically generates schedules from a task graph (TG) representation of a given real-time application <ref> (Ramamritham, 1990) </ref>. The nodes in a TG represent the tasks and the edges impose a partial ordering on the execution of these tasks. <p> Next we explain why some existing task graph representations meet only a subset of the above objectives and therefore a new representation must be developed. The simplest form of a TG is an acyclic task graph (ATG) <ref> (Ramamritham, 1990) </ref>. In this representation a task cannot start executing until all of its predecessors have completed execution. This approach will not allow the execution of tasks to be partially overlapped. Furthermore, the idle times within a task are not exposed by an ATG.
Reference: <author> Shaw, </author> <title> A.C., "Reasoning about Time in Higher Level Language Software," </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> July, </month> <year> 1989, </year> <pages> 15(7) 875-889. </pages>
Reference: <author> Spezialetti, M. and R. Gupta, </author> <title> "Timed Perturbation Analysis: An Approach for Non-Intrusive Monitoring of Real time Computations," </title> <booktitle> Proc. ACM SIGPLAN Workshop on Language, Compiler, and Tool Support for Real-Time Systems, </booktitle> <address> June, 1994, Orlando. </address>
Reference-contexts: Monitoring Real-Time Applications Non-intrusive monitoring of parallel applications is a challenging task <ref> (Spezialetti and Gupta, 1994) </ref>. In the context of real-time systems we would like to introduce a monitoring task only if it does not adversely affect the schedulability of the real-time application. <p> Although, the monitoring requests must A COMPACT TASK GRAPH REPRESENTATION FOR REAL TIME SCHEDULING 29 be provided at compile-time, the actual monitoring activity can be turned on/off dynamically by activating/deactivating switching instructions. The detailed analysis for introducing monitoring code can be found elsewhere <ref> (Spezialetti and Gupta, 1994) </ref>. 5.
Reference: <author> Spezialetti, M. and R. Gupta, </author> <title> "Perturbation Analysis: A Static Analysis Approach for the NonIntrusive Monitoring of Parallel Programs," </title> <booktitle> International Conference on Parallel Processing, </booktitle> <month> August, </month> <year> 1994. </year>
Reference-contexts: Monitoring Real-Time Applications Non-intrusive monitoring of parallel applications is a challenging task <ref> (Spezialetti and Gupta, 1994) </ref>. In the context of real-time systems we would like to introduce a monitoring task only if it does not adversely affect the schedulability of the real-time application. <p> Although, the monitoring requests must A COMPACT TASK GRAPH REPRESENTATION FOR REAL TIME SCHEDULING 29 be provided at compile-time, the actual monitoring activity can be turned on/off dynamically by activating/deactivating switching instructions. The detailed analysis for introducing monitoring code can be found elsewhere <ref> (Spezialetti and Gupta, 1994) </ref>. 5.
Reference: <author> Stoyenko, </author> <title> A.D., "A Real-Time Language With A Schedulability Analyzer," </title> <type> Ph.D. Thesis, </type> <institution> University of Toronto, </institution> <month> August, </month> <year> 1987. </year>
Reference: <author> Stoyenko, A.D. and T. Marlowe, </author> <title> "Polynomial-Time Transformations and Schedulability Analysis of Parallel Real-Time Programs with Restricted Resource Contention," </title> <journal> Journal of Real-Time Systems, 1992, </journal> <volume> 4 </volume> <pages> 307-329. </pages>
Reference: <author> Tokuda, H., M. Kotera, and C.W. Mercer, </author> <title> "A Real-Time Monitor for a Distributed Real-Time Operating System," </title> <booktitle> ACM Workshop on Parallel and Distributed Debugging, </booktitle> <month> May, </month> <year> 1988, </year> <pages> pp. 68-77. </pages>
Reference: <author> Tsai, J.J.P., K-Y. Fang, and H-Y. Chen, </author> <title> "A Noninvasive Architecture to Monitor Real-Time Distributed Systems," </title> <booktitle> IEEE Computer, </booktitle> <month> March, </month> <year> 1990, </year> <pages> pp. 11-23. </pages>
Reference: <author> Xu, J. and D.L. Parnas, </author> <title> "Scheduling Processes with Release Times, Deadlines, Precedence, and Exclusion Relations," </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> March, </month> <year> 1990, </year> <pages> 16(3) 360-369. </pages>
References-found: 37

