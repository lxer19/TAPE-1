URL: http://www.cs.dartmouth.edu/~cliff/papers/ReleaseDates.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/~cliff/papers/
Root-URL: http://www.cs.dartmouth.edu
Title: Minimizing Average Completion Time in the Presence of Release Dates  
Author: Cynthia Phillips Clifford Stein Joel Wein 
Date: Oct. 27, 1995  
Note: SUMITTED FOR JOURNAL PUBLICATION  
Abstract: A natural and basic problem in scheduling theory is to provide good average quality of service to a stream of jobs that arrive over time. In this paper we consider the problem of scheduling n jobs that are released over time in order to minimize the average completion time of the set of jobs. In contrast to the problem of minimizing average completion time when all jobs are available at time 0, all the problems that we consider are N P-hard, and essentially nothing was known about constructing good approximations in polynomial time. We give the first constant-factor approximation algorithms for several variants of the single and parallel machine model. Many of the algorithms are based on interesting algorithmic and structural relationships between preemptive and nonpreemptive schedules and linear programming relaxations of both. Many of the algorithms generalize to the minimization of average weighted completion time as well.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. R. Baker. </author> <title> Introduction to Sequencing and Scheduling. </title> <publisher> Wiley, </publisher> <year> 1974. </year>
Reference-contexts: We apply this conversion algorithm to the problem 1jr j j P C j . This problem is N P-hard [12]; we give a simple 2-approximation algorithm for it, which works by transforming the optimum preemptive schedule for the problem, which can be found in polynomial time <ref> [1] </ref>. The best previous approximation algorithm for this problem was an O (log 2 n)-approximation algorithm [15]. <p> P C j Nonpreempt. P w j C j Preempt. P C j Preempt. P One machine 2 16 + * 1 <ref> [1] </ref> 8 + * Identical 6 24 + * 2 8 + * unrelated O (log 2 n)[15] O (log 2 n)[15] 8 + * 8 + * an arbitrarily small constant. <p> It is well known how to solve, in polynomial time, 1jr j ; pmtnj P C j using the shortest processing time rule: always be processing the job with the shortest remaining processing time <ref> [1] </ref>. <p> Let X 0 = X [ fxg and Y 0 = Y [ fyg. Then X 0 Y 0 . Proof: Let i x be the index of x in X 0 and let i y be the index of y in Y 0 . We split the range <ref> [1; jX 0 j] </ref> into three (possibly empty) regions, and show that in each region X 0 [i] Y 0 [i].
Reference: [2] <author> J.L. Bruno, E.G. Coffman, and R. Sethi. </author> <title> Scheduling independent tasks to reduce mean finishing time. </title> <journal> Communications of the ACM, </journal> <volume> 17 </volume> <pages> 382-387, </pages> <year> 1974. </year>
Reference-contexts: At times we will associate with J j a weight w j and seek to minimize the average weighted completion time, 1 n j w j C j . These optimality criteria are fundamental ones in scheduling theory and accordingly have received much attention, e.g. <ref> [2, 3, 7, 8, 9, 12, 13, 14, 17] </ref>. For simplicity, we will typically drop the factor of 1=n and refer, equivalently, to the optimization of total (weighted) completion time. <p> We then turn to parallel identical machines. For P jpmtnj P C j , McNaughton [13] showed that no preemptions are needed in order to minimize the average completion time; therefore the polynomial-time algorithm for the nonpreemptive version of this problem <ref> [2, 7] </ref> solves it directly. When release dates are introduced, however, even the two machine problem becomes N P-hard [3]. When one attempts, in addition, to minimize the average weighted completion time even the one machine version of the problem becomes N P-hard [9].
Reference: [3] <author> J. Du, J.Y.T. Leung, and G.H Young. </author> <title> Minimizing mean flow time with release time constraint. </title> <journal> Theoretical Computer Science, </journal> <volume> 75, </volume> <year> 1990. </year>
Reference-contexts: At times we will associate with J j a weight w j and seek to minimize the average weighted completion time, 1 n j w j C j . These optimality criteria are fundamental ones in scheduling theory and accordingly have received much attention, e.g. <ref> [2, 3, 7, 8, 9, 12, 13, 14, 17] </ref>. For simplicity, we will typically drop the factor of 1=n and refer, equivalently, to the optimization of total (weighted) completion time. <p> When release dates are introduced, however, even the two machine problem becomes N P-hard <ref> [3] </ref>. When one attempts, in addition, to minimize the average weighted completion time even the one machine version of the problem becomes N P-hard [9]. To the best of our knowledge, nothing was known about approximation algorithms for any version of these problems. <p> The nonpreemptive versions of these problems are N P-hard due to the N P-hardness of the one-machine problem. When preemption is allowed, as noted, the one machine problem is solvable in polynomial-time, using the shortest processing time rule, but the scheduling of even two identical machines is N P-hard <ref> [3] </ref>. In this section we first give a 2-approximation algorithm for P jr j ; pmtnj P C j . The algorithm is the multiple-machine generalization of the one-machine algorithm: always be running the m jobs with the shortest remaining amount of work.
Reference: [4] <author> T. Gonzalez and S. Sahni. </author> <title> Open shop scheduling to minimize finish time. </title> <journal> Journal of the ACM, </journal> <volume> 23 </volume> <pages> 665-679, </pages> <year> 1976. </year>
Reference-contexts: We can accomplish this by an application of open shop theory <ref> [4, 11] </ref>. In the open-shop scheduling environment each job is made up of a number of operations, and each operation must be scheduled on a specific one of m machines; no two operations of one job may be scheduled simultaneously. <p> The O ijt define an open-shop problem for each unit of time; O ijt is J j 's operation on machine i. Using a result of Gonzales and Sahni <ref> [4] </ref>, we can create a preemptive sched ule with at most m 4 preemptions per processor , with length maxfmax j 0 P P which by constraints (5) and (6) is at most 1. Thus the jobs can be scheduled in the time unit to which they are assigned.
Reference: [5] <author> R.L. Graham, E.L. Lawler, J.K. Lenstra, and A.H.G. Rinnooy Kan. </author> <title> Optimization and approximation in deterministic sequencing and scheduling: a survey. </title> <journal> Annals of Discrete Mathematics, </journal> <volume> 5 </volume> <pages> 287-326, </pages> <year> 1979. </year>
Reference-contexts: Since there are a number of scheduling models considered in this paper, it will be convenient to refer to them in the notation of Graham, Lawler, Lenstra, & Rinnooy Kan (1979) <ref> [5] </ref>.
Reference: [6] <author> L. Hall, D. B. Shmoys, and J. Wein. </author> <title> Scheduling to minimize average completion time: Off-line and on-line algorithms. </title> <note> submitted for publication, </note> <month> July </month> <year> 1995. </year>
Reference-contexts: The particular generalization of matching, the rounding techniques, and the quality of approximation achieved, however, are quite different. Subsequent to our work, Hall, Shmoys and Wein have given new approximation algorithms with performance guarantees that improve upon several of those proved in this paper <ref> [6] </ref>. Some of their results can be viewed as building upon the ideas in Section 5. Whereas our algorithms in Sections 2 - 4 run in O (n log n) time, the algorithms in Section 5 run in polynomial time, but the polynomial is quite large.
Reference: [7] <author> W. Horn. </author> <title> Minimizing average flow time with parallel machines. </title> <journal> Operations Research, </journal> <volume> 21 </volume> <pages> 846-847, </pages> <year> 1973. </year>
Reference-contexts: At times we will associate with J j a weight w j and seek to minimize the average weighted completion time, 1 n j w j C j . These optimality criteria are fundamental ones in scheduling theory and accordingly have received much attention, e.g. <ref> [2, 3, 7, 8, 9, 12, 13, 14, 17] </ref>. For simplicity, we will typically drop the factor of 1=n and refer, equivalently, to the optimization of total (weighted) completion time. <p> We then turn to parallel identical machines. For P jpmtnj P C j , McNaughton [13] showed that no preemptions are needed in order to minimize the average completion time; therefore the polynomial-time algorithm for the nonpreemptive version of this problem <ref> [2, 7] </ref> solves it directly. When release dates are introduced, however, even the two machine problem becomes N P-hard [3]. When one attempts, in addition, to minimize the average weighted completion time even the one machine version of the problem becomes N P-hard [9].
Reference: [8] <author> T. Kawaguchi and S. Kyan. </author> <title> Worst case boundof an lrf schedule for the mean weighted flow-time problem. </title> <journal> SIAM Journal on Computing, </journal> <volume> 15 </volume> <pages> 1119-1129, </pages> <year> 1986. </year> <month> 18 </month>
Reference-contexts: At times we will associate with J j a weight w j and seek to minimize the average weighted completion time, 1 n j w j C j . These optimality criteria are fundamental ones in scheduling theory and accordingly have received much attention, e.g. <ref> [2, 3, 7, 8, 9, 12, 13, 14, 17] </ref>. For simplicity, we will typically drop the factor of 1=n and refer, equivalently, to the optimization of total (weighted) completion time.
Reference: [9] <author> J. Labetoulle, E.L. Lawler, J.K. Lenstra, and A.H.G. Rinooy Kan. </author> <title> Preemptive scheduling of uniform machines subject to release dates. </title> <editor> In W.R. Pulleyblank, editor, </editor> <booktitle> Progress in Combinatorial Optimization, </booktitle> <pages> pages 245-261. </pages> <publisher> Academic Press, </publisher> <year> 1984. </year>
Reference-contexts: At times we will associate with J j a weight w j and seek to minimize the average weighted completion time, 1 n j w j C j . These optimality criteria are fundamental ones in scheduling theory and accordingly have received much attention, e.g. <ref> [2, 3, 7, 8, 9, 12, 13, 14, 17] </ref>. For simplicity, we will typically drop the factor of 1=n and refer, equivalently, to the optimization of total (weighted) completion time. <p> When release dates are introduced, however, even the two machine problem becomes N P-hard [3]. When one attempts, in addition, to minimize the average weighted completion time even the one machine version of the problem becomes N P-hard <ref> [9] </ref>. To the best of our knowledge, nothing was known about approximation algorithms for any version of these problems. We give a combinatorial 2-approximation algorithm for P jr j ; pmtnj P C j . This algorithm is the natural m-machine generalization of the shortest processing time rule.
Reference: [10] <author> T. C. Lai, </author> <type> Personal communication. </type> <month> May, </month> <year> 1995. </year>
Reference-contexts: In the optimum preemptive schedule the total completion time is ( x 2 +1)+(x+1) = 3 the optimum nonpreemptive schedule the total completion time is 2x+1, yielding a ratio arbitrarily close to 4 3 . Recently, T.C. Lai has given a slightly stronger lower bound of 18 13 <ref> [10] </ref>. 2.3 Parallel Identical Machines In this section we analyze the application of algorithm Convert to parallel identical machines.
Reference: [11] <author> E.L. Lawler, J.K. Lenstra, A.H.G. Rinooy Kan, </author> <title> and D.B. Shmoys. Sequencing and scheduling: Algorithms and complexity. In S.C. Graves, </title> <editor> A.H.G. Rinnooy Kan, and P.H. Zipkin, editors, </editor> <booktitle> Handbooks in Operations Research and Management Science, </booktitle> <volume> Vol 4., </volume> <booktitle> Logistics of Production and Inventory, </booktitle> <pages> pages 445-522. </pages> <publisher> North-Holland, </publisher> <year> 1993. </year>
Reference-contexts: We will focus both on the one machine (m = 1) environment and two fundamental variants of parallel machine scheduling. In the identical parallel machine environment, job J j runs in time p j on every machine <ref> [11] </ref>. <p> characterize how fast job J j runs on machine M i , and p ij , the processing time of job J j on machine M i , is defined to be p ij = p j =s ij , and thus depends on both the machine and the job <ref> [11] </ref>. We will give algorithms for both preemptive and nonpreemptive scheduling. In nonpreemptive scheduling, once a job begins running on a machine, it must run uninterruptedly to completion, while in preemptive scheduling a job that is running can be preempted and continued later on any machine. <p> We note also that one consequence of this last result is the first constant-approximation algorithm for Rjpmtnj P C j . It is not known if this problem is N P-hard; in <ref> [11] </ref> it states, "Very little is known about this problem ... it remains one of the more vexing questions in the area of preemptive scheduling." 3 Environment Nonpreempt. P C j Nonpreempt. P w j C j Preempt. P C j Preempt. <p> We can accomplish this by an application of open shop theory <ref> [4, 11] </ref>. In the open-shop scheduling environment each job is made up of a number of operations, and each operation must be scheduled on a specific one of m machines; no two operations of one job may be scheduled simultaneously.
Reference: [12] <author> J.K. Lenstra, A.H.G. Rinnooy Kan, and P. Brucker. </author> <title> Complexity of machine scheduling problems. </title> <journal> Annals of Discrete Mathematics, </journal> <volume> 1 </volume> <pages> 343-362, </pages> <year> 1977. </year>
Reference-contexts: At times we will associate with J j a weight w j and seek to minimize the average weighted completion time, 1 n j w j C j . These optimality criteria are fundamental ones in scheduling theory and accordingly have received much attention, e.g. <ref> [2, 3, 7, 8, 9, 12, 13, 14, 17] </ref>. For simplicity, we will typically drop the factor of 1=n and refer, equivalently, to the optimization of total (weighted) completion time. <p> We apply this conversion algorithm to the problem 1jr j j P C j . This problem is N P-hard <ref> [12] </ref>; we give a simple 2-approximation algorithm for it, which works by transforming the optimum preemptive schedule for the problem, which can be found in polynomial time [1]. The best previous approximation algorithm for this problem was an O (log 2 n)-approximation algorithm [15].
Reference: [13] <author> R. McNaughton. </author> <title> Scheduling with deadlines and loss functions. </title> <journal> Management Science, </journal> <volume> 6 </volume> <pages> 1-12, </pages> <year> 1959. </year>
Reference-contexts: At times we will associate with J j a weight w j and seek to minimize the average weighted completion time, 1 n j w j C j . These optimality criteria are fundamental ones in scheduling theory and accordingly have received much attention, e.g. <ref> [2, 3, 7, 8, 9, 12, 13, 14, 17] </ref>. For simplicity, we will typically drop the factor of 1=n and refer, equivalently, to the optimization of total (weighted) completion time. <p> We then turn to parallel identical machines. For P jpmtnj P C j , McNaughton <ref> [13] </ref> showed that no preemptions are needed in order to minimize the average completion time; therefore the polynomial-time algorithm for the nonpreemptive version of this problem [2, 7] solves it directly. When release dates are introduced, however, even the two machine problem becomes N P-hard [3].
Reference: [14] <author> R. Motwani, S. Phillips, and E. Torng. </author> <title> Non-clairvoyant scheduling. </title> <booktitle> In Proceedings of the 4th ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 422-431, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: At times we will associate with J j a weight w j and seek to minimize the average weighted completion time, 1 n j w j C j . These optimality criteria are fundamental ones in scheduling theory and accordingly have received much attention, e.g. <ref> [2, 3, 7, 8, 9, 12, 13, 14, 17] </ref>. For simplicity, we will typically drop the factor of 1=n and refer, equivalently, to the optimization of total (weighted) completion time.
Reference: [15] <author> C. Phillips, C. Stein, and J. Wein. </author> <title> Task scheduling in networks. </title> <booktitle> In Proceedings of Fourth Scandinavian Workshop on Algorithm Theory, </booktitle> <pages> pages 290-301, </pages> <year> 1994. </year>
Reference-contexts: This problem is N P-hard [12]; we give a simple 2-approximation algorithm for it, which works by transforming the optimum preemptive schedule for the problem, which can be found in polynomial time [1]. The best previous approximation algorithm for this problem was an O (log 2 n)-approximation algorithm <ref> [15] </ref>. Our algorithm can be modified slightly to be on-line; we show as well that it is close to an optimal on-line scheduler, by showing that any on-line scheduling algorithm for the problem must be at least a 3 2 -approximation algorithm. We then turn to parallel identical machines. <p> 1 [1] 8 + * Identical 6 24 + * 2 8 + * unrelated O (log 2 n)<ref> [15] </ref> O (log 2 n)[15] 8 + * 8 + * an arbitrarily small constant. Previous Work: The only prior work we know of that gives approximation algorithms for these problems is [15] which gives O (log 2 n)-approximation algorithms for the nonpreemptive versions of the problems, as a special case of a very general theorem.
Reference: [16] <author> D. B. Shmoys, C. Stein, and J. Wein. </author> <title> Improved approximation algorithms for shop scheduling problems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 23(3) </volume> <pages> 617-632, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: in combinatorial scheduling to partition the jobs into a set of large jobs and a set of small jobs, schedule the large jobs, which are scaled to be in a polynomially-bounded range, and then schedule the small jobs arbitrarily and show that their net contribution is not significant, (see e.g. <ref> [16] </ref>). In the minimization of average weighted completion time, however, we must be more careful, since the small jobs may have large weights and can not be scheduled arbitrarily.
Reference: [17] <author> W.E. Smith. </author> <title> Various optimizers for single-stage production. </title> <journal> Naval Research Logistics Quarterly, </journal> <volume> 3 </volume> <pages> 59-66, </pages> <year> 1956. </year>
Reference-contexts: At times we will associate with J j a weight w j and seek to minimize the average weighted completion time, 1 n j w j C j . These optimality criteria are fundamental ones in scheduling theory and accordingly have received much attention, e.g. <ref> [2, 3, 7, 8, 9, 12, 13, 14, 17] </ref>. For simplicity, we will typically drop the factor of 1=n and refer, equivalently, to the optimization of total (weighted) completion time.
Reference: [18] <author> A. Vestjens. </author> <type> Personal communication, </type> <month> May </month> <year> 1995. </year> <month> 19 </month>
Reference-contexts: Choosing c = 1 2 , yields the theorem. Note that Arjen Vestjens has recently given a lower bound of 2 <ref> [18] </ref>, which implies our algorithm is optimal in the worst case. 8 4 Minimizing P C j on Identical Parallel Machines We now turn to the problem of scheduling jobs with release dates on parallel machines, so as to minimize the average completion time.
References-found: 18

