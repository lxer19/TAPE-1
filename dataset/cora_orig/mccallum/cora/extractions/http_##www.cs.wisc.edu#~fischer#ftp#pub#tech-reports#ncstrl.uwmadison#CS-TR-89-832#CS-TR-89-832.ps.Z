URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-89-832/CS-TR-89-832.ps.Z
Refering-URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-89-832/
Root-URL: http://www.cs.wisc.edu
Title: Specification and Verification of Network Managers for Large Internets  
Author: David L. Cohrs Barton P. Miller 
Note: Research supported in part by an AT&T Ph.D Scholarship, National Science Foundation grants CCR-8703373 and CCR-8815928, Office of Naval Research grant N00014-89-J-1222, and a Digital Equipment Corporation External Research Grant.  
Address: 1210 W. Dayton Street Madison, Wisconsin 53706  
Affiliation: Computer Sciences Department University of Wisconsin Madison  
Abstract: Large internet environments are increasing the difficulty of network management. Integrating increasing numbers of autonomous subnetworks (each with an increasing number of hosts) makes it more difficult to determine if the network managers of the subnetworks will interoperate correctly. We propose a high level, formal specification language, NMSL, as an aid in solving this problem. NMSL has two aspects of operation, a descriptive aspect and a prescriptive aspect. In its descriptive aspect, NMSL specifies abstractions of the network components and their instantiations, and verifies the consistency of such a specification. The abstractions include the data objects and processes in a network management system. These abstractions are instantiated on network elements. Network elements are grouped together in the specification of domains of administration. An extension mechanism is provided to allow for the specification of new management characteristics that the basic language cannot express. In its prescriptive aspect, NMSL generates configuration information directly from a consistent specification. This information is used to configure network management processes to make their operation consistent with their specifications. Standard management protocols (such as the emerging ISO or IETF standards) can be used to incorporate the configuration information into running management processes. hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> ``Network Management,'' </institution> <note> IBM Systems Journal 27(1) pp. </note> <month> 1-85 </month> <year> (1988). </year>
Reference-contexts: Management domains may be nested, and the internal features of domains may be hidden from the outside applications. Configuring network managers based on the OSI model could be complex and error-prone, due to the model's generality. Providing a formal specification of the correct configuration could reduce these errors. NetView <ref> [1] </ref>, the SNA network management product from IBM, is a fully developed management product. NetView is a centralized management service for SNA networks, but also includes methods for integrating non-SNA components into the system.
Reference: [2] <author> N. Heintze, et al, </author> <title> The CLP(R) Programmer's Manual, </title> <institution> Dept. of Computer Science, Monash University, Clayton, </institution> <address> Victoria, Australia (1987). </address>
Reference: [3] <author> J.A. Barchanski, </author> <title> ``Expert Systems for Local Computer Network Software Debugging,'' </title> <booktitle> Proceedings of the 1987 IEEE 12th Conference on Local Computer Networks, </booktitle> <pages> pp. </pages> <address> 154-159 Minneapolis, MN, </address> <month> (October </month> <year> 1987). </year>
Reference-contexts: NETWORK MANAGEMENT Most previous computer network management systems concentrate on low level management issues, such as local area network management [8, 19] and network address assignment [12], debugging local area communications software <ref> [3] </ref>, and wide area network management [6, 15, 18]. Higher level issues, such as coordinating the interactions between network managers, and coordinating access controls, have been left for later work.
Reference: [4] <author> D. B. Berry, </author> <title> ``Towards a Formal Basis for the Formal Development Method and the Ina Jo Specification Language,'' </title> <journal> IEEE Transactions on Software engineering SE-13(2) pp. </journal> <month> 184-201 (February </month> <year> 1987). </year>
Reference-contexts: Our interest in specification languages is in using them as part of a larger tool, rather than in the correct way in which a specification language should be designed. A few of the better known specification languages are Ina Jo <ref> [4] </ref>, PAISLey [21], and Larch [20]. Various features of these languages are important to designing our network management specification language. Three other recent specification languages, Gist [7], PLEASE [16], Anna [13] and LOTOS [9] also have features in common with our work.
Reference: [5] <author> J. Case, M. Fedor, M. Schoffstall, and J. Davin, </author> <title> ``A Simple Network Management Protocol,'' </title> <type> RFC 1067, </type> <institution> IETF Network Working Group (August 1988). </institution>
Reference-contexts: It should also verify that the various rules and requirements given by the administrator are being met. Finally, the tool should map its abstractions onto the emerging standards, such as the OSI organizational model [11], or the IETF management framework <ref> [5] </ref>. In this way, it extends the standards' functionality by providing a high level, global management tool, using the protocols defined in the standard to perform the actual management of the network. We are not directly addressing the important issues of security, or authentication.
Reference: [6] <author> L. J. Cole, </author> <title> ``Network Management as Described in Systems Network Architecture,'' </title> <booktitle> IEEE Infocom 86, </booktitle> <pages> pp. </pages> <address> 364-376 Miami, FL, </address> <month> (April </month> <year> 1986). </year>
Reference-contexts: NETWORK MANAGEMENT Most previous computer network management systems concentrate on low level management issues, such as local area network management [8, 19] and network address assignment [12], debugging local area communications software [3], and wide area network management <ref> [6, 15, 18] </ref>. Higher level issues, such as coordinating the interactions between network managers, and coordinating access controls, have been left for later work.
Reference: [7] <author> M. S. Feather, </author> <title> ``Language Support for the Specification and Development of Composite Systems,'' </title> <journal> ACM Transactions on Programming Languages and Systems 9(2) pp. </journal> <month> 198-243 (April </month> <year> 1987). </year>
Reference-contexts: A few of the better known specification languages are Ina Jo [4], PAISLey [21], and Larch [20]. Various features of these languages are important to designing our network management specification language. Three other recent specification languages, Gist <ref> [7] </ref>, PLEASE [16], Anna [13] and LOTOS [9] also have features in common with our work. The specification languages mentioned are used primarily for specifying programming languages. Ina Jo, PAISLey and LOTOS use a constructive specification method.
Reference: [8] <author> F. Fluckiger and C. Piney, </author> <title> ``Principles of Control in a Distributed Network,'' Networks 80, </title> <booktitle> Online, </booktitle> <pages> pp. </pages> <address> 159-171 London, England, </address> <month> (June </month> <year> 1980). </year>
Reference-contexts: Specification languages have been used to specify many areas of computer development, for specifying both hardware and software designs. 2.1. NETWORK MANAGEMENT Most previous computer network management systems concentrate on low level management issues, such as local area network management <ref> [8, 19] </ref> and network address assignment [12], debugging local area communications software [3], and wide area network management [6, 15, 18]. Higher level issues, such as coordinating the interactions between network managers, and coordinating access controls, have been left for later work.
Reference: [9] <author> Information Processing Systems Open Systems Interconnection, </author> <title> ``LOTOS (Formal description technique based on the temporal ordering of obervational behavior),'' ISO 8807, International Organization for Standardization (August 1987). </title>
Reference-contexts: A few of the better known specification languages are Ina Jo [4], PAISLey [21], and Larch [20]. Various features of these languages are important to designing our network management specification language. Three other recent specification languages, Gist [7], PLEASE [16], Anna [13] and LOTOS <ref> [9] </ref> also have features in common with our work. The specification languages mentioned are used primarily for specifying programming languages. Ina Jo, PAISLey and LOTOS use a constructive specification method. A constructive specification is one in which an abstract version of the algorithm used in the program is specified.
Reference: [10] <author> Information Processing Systems Open Systems Interconnection, </author> <title> ``Specification of Abstract Syntax Notation One (ASN.1),'' ISO 8824, International Organization for Standardization (December 1987). </title>
Reference: [11] <author> S. M. Klerer, </author> <title> ``The OSI Management Architecture: an Overview,'' </title> <journal> IEEE Network 2(2) pp. </journal> <month> 20-29 (March </month> <year> 1988). </year>
Reference-contexts: It should also verify that the various rules and requirements given by the administrator are being met. Finally, the tool should map its abstractions onto the emerging standards, such as the OSI organizational model <ref> [11] </ref>, or the IETF management framework [5]. In this way, it extends the standards' functionality by providing a high level, global management tool, using the protocols defined in the standard to perform the actual management of the network. We are not directly addressing the important issues of security, or authentication. <p> As the name states, the protocol is simple, defining only a small number of messages. It includes a protection mechanism that allows flexibility in determining the accesses a remote domain of administration can make on data from a network element's database. The OSI network management architecture <ref> [11] </ref>, while still under development, also includes support for administrative domains in its current definition. Their organizational model assumes that management of the network will be distributed across different domains of administration. Each management domain can communicate with other domains via ports. <p> Above all, NMSL must be easy to evaluate, to allow quick answers to questions of consistency and to scale to support the large networks of the future. Providing general support for network management systems also requires support for more complex queries than outlined above. Some network management systems <ref> [11, 14] </ref>, allow the network manager for a given network element to exist on some other network element. This type of network management is called proxy network management. Proxies are necessary because some network elements cannot respond to management queries directly.
Reference: [12] <author> W.M. Louks, W.I. Kwak, and Z.G. Vranesic, </author> <title> ``Implementation of a Dynamic Address Assignment Protocol in a Local Area Network,'' </title> <booktitle> Computer Networks and ISDN Systems 11(3) pp. </booktitle> <month> 133-146 (July </month> <year> 1986). </year>
Reference-contexts: Specification languages have been used to specify many areas of computer development, for specifying both hardware and software designs. 2.1. NETWORK MANAGEMENT Most previous computer network management systems concentrate on low level management issues, such as local area network management [8, 19] and network address assignment <ref> [12] </ref>, debugging local area communications software [3], and wide area network management [6, 15, 18]. Higher level issues, such as coordinating the interactions between network managers, and coordinating access controls, have been left for later work.
Reference: [13] <author> D. C. Luckham and F. W. Henke, </author> <title> ``An Overview of Anna, a Specification Language for Ada,'' </title> <journal> IEEE Software 2(2) pp. </journal> <month> 99-22 (March </month> <year> 1985). </year>
Reference-contexts: A few of the better known specification languages are Ina Jo [4], PAISLey [21], and Larch [20]. Various features of these languages are important to designing our network management specification language. Three other recent specification languages, Gist [7], PLEASE [16], Anna <ref> [13] </ref> and LOTOS [9] also have features in common with our work. The specification languages mentioned are used primarily for specifying programming languages. Ina Jo, PAISLey and LOTOS use a constructive specification method.
Reference: [14] <author> K. McCloghrie and M. Rose, </author> <title> ``Management Information Base for Network Management of TCP/IP-based Inter-nets,'' </title> <type> RFC 1066, </type> <institution> IETF Network Working Group (August 1988). </institution>
Reference-contexts: Above all, NMSL must be easy to evaluate, to allow quick answers to questions of consistency and to scale to support the large networks of the future. Providing general support for network management systems also requires support for more complex queries than outlined above. Some network management systems <ref> [11, 14] </ref>, allow the network manager for a given network element to exist on some other network element. This type of network management is called proxy network management. Proxies are necessary because some network elements cannot respond to management queries directly. <p> As an example of the use of a type specification, consider the specification of the IP Address Table that defines the IP Addresses for a given entity. The example in Figure 4.2 is derived from the TCP/IP MIB <ref> [14] </ref>. The IpAddress and INTEGER tokens are ASN.1 type names. ipAdEntAddr, et al, are members of the IpAddrEntry sequence. Complex types of this form are common in network management data. This simple specification shows how the ASN.1 type specification fits into a NMSL specification.
Reference: [15] <author> R. E. Moore, </author> <title> ``Problem Detection, Isolation, </title> <booktitle> and Notification in Systems Network Architecture,'' IEEE Infocom 86, </booktitle> <pages> pp. </pages> <address> 377-381 Miami, FL, </address> <month> (April </month> <year> 1986). </year>
Reference-contexts: NETWORK MANAGEMENT Most previous computer network management systems concentrate on low level management issues, such as local area network management [8, 19] and network address assignment [12], debugging local area communications software [3], and wide area network management <ref> [6, 15, 18] </ref>. Higher level issues, such as coordinating the interactions between network managers, and coordinating access controls, have been left for later work.
Reference: [16] <author> R. B. Terwilliger and R. H. Campbell, </author> <title> ``PLEASE: Predicate Logic based ExecutAble SpEcifications,'' </title> <booktitle> Proceedings of the 1986 ACM Computer Science Conference, </booktitle> <pages> pp. </pages> <address> 349-358 Cincinnati, OH, </address> <month> (February </month> <year> 1986). </year>
Reference-contexts: A few of the better known specification languages are Ina Jo [4], PAISLey [21], and Larch [20]. Various features of these languages are important to designing our network management specification language. Three other recent specification languages, Gist [7], PLEASE <ref> [16] </ref>, Anna [13] and LOTOS [9] also have features in common with our work. The specification languages mentioned are used primarily for specifying programming languages. Ina Jo, PAISLey and LOTOS use a constructive specification method.
Reference: [17] <author> U. S. Warrier, P. A. Relan, O. Berry, and J. Bannister, </author> <title> ``A Network Management Language for OSI Networks,'' </title> <booktitle> ACM SIGCOMM 88, </booktitle> <address> Stanford, CA, </address> <month> (August </month> <year> 1988). </year>
Reference-contexts: Recently, researchers have begun to address the issue of providing higher level access to the low level information in the network management system, such as the work by Warrier <ref> [17] </ref>, which provides a network management protocol independent query language. We feel that high level tools must be, as much as possible, independent of the low level protocols used to implement the network management.
Reference: [18] <author> J. Westcott, J. Buress, and V. Begg, </author> <title> ``Automated Network Management,'' </title> <booktitle> IEEE Infocom '85, </booktitle> <pages> pp. </pages> <address> 43-50 Washing-ton, DC, </address> <month> (March </month> <year> 1985). </year>
Reference-contexts: NETWORK MANAGEMENT Most previous computer network management systems concentrate on low level management issues, such as local area network management [8, 19] and network address assignment [12], debugging local area communications software [3], and wide area network management <ref> [6, 15, 18] </ref>. Higher level issues, such as coordinating the interactions between network managers, and coordinating access controls, have been left for later work.
Reference: [19] <author> S. Wilber, </author> <title> ``Local area network management for distributed applications,'' </title> <journal> Computer Communications 9(2) pp. </journal> <month> 100-104 (April </month> <year> 1986 </year> ). 
Reference-contexts: Specification languages have been used to specify many areas of computer development, for specifying both hardware and software designs. 2.1. NETWORK MANAGEMENT Most previous computer network management systems concentrate on low level management issues, such as local area network management <ref> [8, 19] </ref> and network address assignment [12], debugging local area communications software [3], and wide area network management [6, 15, 18]. Higher level issues, such as coordinating the interactions between network managers, and coordinating access controls, have been left for later work.
Reference: [20] <author> J. M. Wing, </author> <title> ``Writing Larch Interface Language Specifications,'' </title> <journal> ACM Transactions on Programming Languages and Systems 9(1) pp. </journal> <month> 1-24 (January </month> <year> 1987). </year>
Reference-contexts: Our interest in specification languages is in using them as part of a larger tool, rather than in the correct way in which a specification language should be designed. A few of the better known specification languages are Ina Jo [4], PAISLey [21], and Larch <ref> [20] </ref>. Various features of these languages are important to designing our network management specification language. Three other recent specification languages, Gist [7], PLEASE [16], Anna [13] and LOTOS [9] also have features in common with our work. The specification languages mentioned are used primarily for specifying programming languages. <p> This allows the management information to be specified independent of its use. It also allows types of processes to be specified, and allows these process types to be instantiated in various locations. These separate specifications, as pointed out in Larch <ref> [20] </ref>, make them more generally useful. In the case of network management, the separation also mirrors the real world, where many network elements will store the same types of management data, and run network management software derived from the same source. 4.1.1.
Reference: [21] <author> P. Zave, </author> <title> ``An Operational Approach to Requirements Specification for Embedded Systems,'' </title> <journal> IEEE Transactions on Software Engineering 8(3) pp. </journal> <month> 250-269 (May </month> <year> 1982). </year>
Reference-contexts: Our interest in specification languages is in using them as part of a larger tool, rather than in the correct way in which a specification language should be designed. A few of the better known specification languages are Ina Jo [4], PAISLey <ref> [21] </ref>, and Larch [20]. Various features of these languages are important to designing our network management specification language. Three other recent specification languages, Gist [7], PLEASE [16], Anna [13] and LOTOS [9] also have features in common with our work.
References-found: 21

