URL: ftp://info.mcs.anl.gov/pub/Otter/www-misc/robbins-jar-final.ps.gz
Refering-URL: http://www.mcs.anl.gov/~mccune/papers/robbins/
Root-URL: http://www.mcs.anl.gov
Title: Solution of the Robbins Problem  
Author: WILLIAM McCUNE 
Keyword: Key words: Associative-commutative unification, Boolean algebra, EQP, equational logic, paramodulation, Robbins algebra, Robbins problem.  
Note: Submitted to J. Automated Reasoning,  
Date: 60439.  Jan. 22, 1997.  
Address: Argonne, IL  
Affiliation: Mathematics and Computer Science Division, Argonne National Laboratory,  
Abstract: In this article we show that the three equations known as commutativity, associativity, and the Robbins equation are a basis for the variety of Boolean algebras. The problem was posed by Herbert Robbins in the 1930s. The proof was found automatically by EQP, a theorem-proving program for equational logic. We present the proof and the search strategies that enabled the program to find the proof. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> L. Bachmair, H. Ganzinger, C. Lynch, and W. Snyder. </author> <title> Basic paramodulation and superposition. </title> <editor> In D. Kapur, editor, </editor> <booktitle> Proceedings of the 11th International Conference on Automated Deduction, Lecture Notes in Artificial Intelligence, </booktitle> <volume> Vol. 607, </volume> <pages> pages 462-476. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: The search algorithm is similar to Knuth-Bendix completion [9], with the option of using the "basic" restriction <ref> [1, 13] </ref>. We describe here some of EQP's features that were used in the proof of Lemma 3. See [11] for details on these and the other features of EQP. 3.1. <p> This ordering is primitive, but adequate for this work. 8 The "basic" restriction is not implemented by storing equations as hskeleton,substitutioni. Instead, "basic" positions in equations are marked, and the marks are inherited during paramodulation. paper.tex; 4/03/1997; 10:03; no v.; p.5 6 WILLIAM McCUNE predicate calculus with equality <ref> [1, 13] </ref>, and it is related to the idea of prime superpositions [7]. The "basic" restriction imposes an order on derivations, but, like most other strategies, its use can interfere with searches as well as help them.
Reference: 2. <author> S. Burris. Correspondence, </author> <month> November </month> <year> 1996. </year>
Reference-contexts: Robbins equation? (No algorithm exists for deciding whether a finite set of equations is a basis for Boolean algebra [12].) Robbins and Huntington could not find a proof or counterexample, and the problem later became a favorite of Alfred Tarski, who gave it to many of his students and colleagues <ref> [2] </ref>, [3, p. 245].
Reference: 3. <editor> L. Henkin, J. D. Monk, and A. Tarski. Cylindric Algebras, Part I. </editor> <publisher> North-Holland, </publisher> <year> 1971. </year>
Reference-contexts: equation? (No algorithm exists for deciding whether a finite set of equations is a basis for Boolean algebra [12].) Robbins and Huntington could not find a proof or counterexample, and the problem later became a favorite of Alfred Tarski, who gave it to many of his students and colleagues [2], <ref> [3, p. 245] </ref>.
Reference: 4. <author> J.-M. Hullot. </author> <title> Canonical forms and unification. </title> <editor> In R. Kowalski and W. Bibel, editors, </editor> <booktitle> Proceedings of CADE-5, </booktitle> <volume> LNCS Vol. 87, </volume> <pages> pages 318-334, </pages> <address> Berlin, 1980. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: As far as we know, the "basic" restriction was first used in the context of narrowing <ref> [4] </ref> for unification problems in equational theories.
Reference: 5. <author> E. V. Huntington. </author> <title> Boolean algebra. A correction. </title> <journal> Trans. AMS, </journal> <volume> 35 </volume> <pages> 557-558, </pages> <year> 1933. </year>
Reference-contexts: The answer is yes, all Robbins algebras are Boolean. The proof that answers the question was found by EQP, an automated theorem-proving program for equational logic. In 1933, E. V. Huntington presented the following three equations as a basis for Boolean algebra <ref> [6, 5] </ref>: x + y = y + x, (commutativity) (x + y) + z = x + (y + z), (associativity) n (n (x) + y) + n (n (x) + n (y)) = x. (Huntington equation) The unary operation n can be read as complement. (Boolean algebra is ordinarily <p> the program EQP) starts with the Robbins equation and uses paramodulation (Section 3.3) with built-in associative 1 In [6], Huntington included x + x = x in his basis (along with commutativity, associativity, and the Huntington equation) and incorrectly stated that the four equations are independent; the correction appeared in <ref> [5] </ref>, where he showed that x + x = x can be derived from the other three (which are independent).
Reference: 6. <author> E. V. Huntington. </author> <title> New sets of independent postulates for the algebra of logic, with special reference to Whitehead and Russell's Principia Mathematica. </title> <journal> Trans. AMS, </journal> <volume> 35 </volume> <pages> 274-304, </pages> <year> 1933. </year>
Reference-contexts: The answer is yes, all Robbins algebras are Boolean. The proof that answers the question was found by EQP, an automated theorem-proving program for equational logic. In 1933, E. V. Huntington presented the following three equations as a basis for Boolean algebra <ref> [6, 5] </ref>: x + y = y + x, (commutativity) (x + y) + z = x + (y + z), (associativity) n (n (x) + y) + n (n (x) + n (y)) = x. (Huntington equation) The unary operation n can be read as complement. (Boolean algebra is ordinarily <p> Lemma 3. All Robbins algebras satisfy 9c9d (c + d = c). Proof. The proof (found automatically by the program EQP) starts with the Robbins equation and uses paramodulation (Section 3.3) with built-in associative 1 In <ref> [6] </ref>, Huntington included x + x = x in his basis (along with commutativity, associativity, and the Huntington equation) and incorrectly stated that the four equations are independent; the correction appeared in [5], where he showed that x + x = x can be derived from the other three (which are <p> Folklore incorrectly has it that the Robbins problem arose from Huntington's mistake, in particular, that the error in Huntington's paper is that the Robbins equation appears in place of the Huntington equation <ref> [6] </ref>. According to Robbins [14], the Robbins problem is not related to Huntington's error. 2 Proof.
Reference: 7. <author> D. Kapur, D. Musser, and P Narendran. </author> <title> Only prime superpositions need be considered in the Knuth-Bendix completion procedure. </title> <journal> J. Symbolic Computation, </journal> <volume> 6 </volume> <pages> 19-36, </pages> <year> 1988. </year> <note> paper.tex; 4/03/1997; 10:03; no v.; p.13 14 WILLIAM McCUNE </note>
Reference-contexts: Instead, "basic" positions in equations are marked, and the marks are inherited during paramodulation. paper.tex; 4/03/1997; 10:03; no v.; p.5 6 WILLIAM McCUNE predicate calculus with equality [1, 13], and it is related to the idea of prime superpositions <ref> [7] </ref>. The "basic" restriction imposes an order on derivations, but, like most other strategies, its use can interfere with searches as well as help them. It appears to have been a key strategy in finding the proof of Lemma 3 and similar proofs. 3.3. <p> Appendix A: Detailed Proof of Lemma 3 This appendix contains a detailed proof of Lemma 3 (i.e., Condition 1). We start with the Robbins equation (7) and derive equation <ref> (8871) </ref> with AC unification and matching. <p> Use (8866) to replace the underlined term; then rearrange: n (n (n (n (3x)+x)+n (3x)+y)+n (x+y)) = y. [8866!7] <ref> (8870) </ref> paper.tex; 4/03/1997; 10:03; no v.; p.11 12 WILLIAM McCUNE Step 8871 With (8870), let y be 2x: n (n (n (n (3x)+x)+n (3x)+2x)+n (3x)) = 2x. <p> Use (8866) to replace the underlined term; then rearrange: n (n (n (n (3x)+x)+n (3x)+y)+n (x+y)) = y. [8866!7] <ref> (8870) </ref> paper.tex; 4/03/1997; 10:03; no v.; p.11 12 WILLIAM McCUNE Step 8871 With (8870), let y be 2x: n (n (n (n (3x)+x)+n (3x)+2x)+n (3x)) = 2x. <p> Use the preceding equation to simplify (8865): n (n (3x)+x)+2x = 2x. [8865:8870] <ref> (8871) </ref> Appendix B: Proof of Lemma 1 This appendix contains a proof of Lemma 1, conjectured and first proved by Winker [16, 17], then later proved automatically by EQP [11]. To simplify the presentation, we first prove a stronger condition sufficient.
Reference: 8. <author> D. Kapur and H. Zhang. RRL: </author> <title> Rewrite Rule Laboratory user's manual. </title> <type> Technical Report 89-03, </type> <institution> Department of Computer Science, University of Iowa, </institution> <year> 1989. </year>
Reference-contexts: Although AC matching is a special case of AC unification, we use a different algorithm, because (1) AC matching is less complicated (conceptually and practi 5 The RRL system <ref> [8] </ref> has a strategy similar to our super-0 strategy. 6 With the benchmark problem to find the AC unifiers of the pair of terms x + x + x and y+z+u+v, EQP ordinarily returns 1,044,569 unifiers; with the super-0 restriction, EQP returns 139 unifiers. paper.tex; 4/03/1997; 10:03; no v.; p.4 Solution <p> For AC matching, we use a backtracking algorithm of our own design, with ideas from the RRL system <ref> [8] </ref>. See [11] for details on EQP's AC unification and matching. 3.2. Paramodulation and Demodulation The search for a proof uses paramodulation (an inference rule for equality) and demodulation (simplification of inferred equations) [18].
Reference: 9. <author> D. Knuth and P. Bendix. </author> <title> Simple word problems in universal algebras. </title> <editor> In J. Leech, editor, </editor> <booktitle> Computational Problems in Abstract Algebras, </booktitle> <pages> pages 263-297. </pages> <publisher> Pergamon Press, Oxford, </publisher> <year> 1970. </year>
Reference-contexts: The search algorithm is similar to Knuth-Bendix completion <ref> [9] </ref>, with the option of using the "basic" restriction [1, 13]. We describe here some of EQP's features that were used in the proof of Lemma 3. See [11] for details on these and the other features of EQP. 3.1.
Reference: 10. <author> W. McCune. </author> <title> Otter 3.0 Reference Manual and Guide. </title> <type> Technical Report ANL-94/6, </type> <institution> Argonne National Laboratory, Argonne, Ill., </institution> <year> 1994. </year>
Reference-contexts: The theorem prover that found the proof of Lemma 3 is EQP, presented in [11]. 4 EQP is restricted to equational logic and can perform associative-commutative 3 EQP automatically rearranges AC subterms and renames variables. 4 EQP is similar in many ways to our more well known theorem prover Otter <ref> [10] </ref>; the most important differences are that Otter (1) does not have associative-commutative unification or matching, (2) applies to full first-order statements, (3) has fewer paramodulation options, and (4) always uses the given clause algorithm to drive the search. paper.tex; 4/03/1997; 10:03; no v.; p.3 4 WILLIAM McCUNE (AC) unification and
Reference: 11. <author> W. McCune. </author> <title> 33 basic test problems: A practical evaluation of some paramodulation strategies. </title> <editor> In Robert Veroff, editor, </editor> <booktitle> Automated Reasoning: Essays in Honor of Larry Wos, chapter 5. </booktitle> <publisher> MIT Press, </publisher> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: Proof. This follows directly from Lemma 1, Lemma 3, and the observation that the Robbins equation is valid in all Boolean algebras. 3. The Theorem Prover EQP The theorem prover that found the proof of Lemma 3 is EQP, presented in <ref> [11] </ref>. 4 EQP is restricted to equational logic and can perform associative-commutative 3 EQP automatically rearranges AC subterms and renames variables. 4 EQP is similar in many ways to our more well known theorem prover Otter [10]; the most important differences are that Otter (1) does not have associative-commutative unification or <p> The search algorithm is similar to Knuth-Bendix completion [9], with the option of using the "basic" restriction [1, 13]. We describe here some of EQP's features that were used in the proof of Lemma 3. See <ref> [11] </ref> for details on these and the other features of EQP. 3.1. AC Unification and Matching Associative-commutative (AC) unification [15] builds the properties of associativity and commutativity of a binary operation into the inference process so that the corresponding equations need not be present as explicit axioms. <p> For AC matching, we use a backtracking algorithm of our own design, with ideas from the RRL system [8]. See <ref> [11] </ref> for details on EQP's AC unification and matching. 3.2. Paramodulation and Demodulation The search for a proof uses paramodulation (an inference rule for equality) and demodulation (simplification of inferred equations) [18]. A simplification ordering O on terms is used to orient equations and to guarantee termination of demodulation. <p> As EQP searches, it sends derived equations and some statistics to the output file. If the search fails or does not look promising, the user can adjust the parameters and try again. By iterating in this way, we try to achieve a well-behaved search <ref> [11] </ref>. We had up to three generic UNIX workstations available when working on this project, so we ran (independent) searches in parallel as well. The attack that led to the solution of the Robbins problem took place over the course of five weeks (September 6 through October 11, 1996). <p> of the Lemma 1 condition (from the search m5-50) because it leads to a simpler overall proof|Winker's proof (and the computer proof in Appendix B) that Condition 1 paper.tex; 4/03/1997; 10:03; no v.; p.7 8 WILLIAM McCUNE is sufficient is much less complicated than his proof (or our computer proof <ref> [11] </ref>) that Condition 2 is sufficient. The most important result of these additional experiments is that the Hunt-ington equation was proved directly, giving us automatic solutions that do not rely on either of the Winker lemmas. <p> Use the preceding equation to simplify (8865): n (n (3x)+x)+2x = 2x. [8865:8870] (8871) Appendix B: Proof of Lemma 1 This appendix contains a proof of Lemma 1, conjectured and first proved by Winker [16, 17], then later proved automatically by EQP <ref> [11] </ref>. To simplify the presentation, we first prove a stronger condition sufficient. Both computer proofs were found by EQP, the first in about 5 seconds, and the second in about 2319 seconds. Lemma 0. A Robbins algebra satisfying 9c (c + c = c) is a Boolean algebra. Proof.
Reference: 12. <author> G. F. McNulty. </author> <title> Undecidable properties of finite sets of equations. </title> <journal> J. Symbolic Logic, </journal> <volume> 41 </volume> <pages> 589-604, </pages> <year> 1976. </year>
Reference-contexts: Department of Energy, under Contract W-31-109-Eng-38. 2 WILLIAM McCUNE associativity, and the Robbins equation? (No algorithm exists for deciding whether a finite set of equations is a basis for Boolean algebra <ref> [12] </ref>.) Robbins and Huntington could not find a proof or counterexample, and the problem later became a favorite of Alfred Tarski, who gave it to many of his students and colleagues [2], [3, p. 245].
Reference: 13. <author> R. Niewenhuis and A. Rubio. </author> <title> Theorem proving with ordering and equality constrained clauses. </title> <journal> J. Symbolic Computation, </journal> <volume> 19(4) </volume> <pages> 321-351, </pages> <year> 1995. </year>
Reference-contexts: The search algorithm is similar to Knuth-Bendix completion [9], with the option of using the "basic" restriction <ref> [1, 13] </ref>. We describe here some of EQP's features that were used in the proof of Lemma 3. See [11] for details on these and the other features of EQP. 3.1. <p> This ordering is primitive, but adequate for this work. 8 The "basic" restriction is not implemented by storing equations as hskeleton,substitutioni. Instead, "basic" positions in equations are marked, and the marks are inherited during paramodulation. paper.tex; 4/03/1997; 10:03; no v.; p.5 6 WILLIAM McCUNE predicate calculus with equality <ref> [1, 13] </ref>, and it is related to the idea of prime superpositions [7]. The "basic" restriction imposes an order on derivations, but, like most other strategies, its use can interfere with searches as well as help them.
Reference: 14. <author> H. Robbins. </author> <title> Phone conversation, </title> <month> October </month> <year> 1996. </year>
Reference-contexts: Folklore incorrectly has it that the Robbins problem arose from Huntington's mistake, in particular, that the error in Huntington's paper is that the Robbins equation appears in place of the Huntington equation [6]. According to Robbins <ref> [14] </ref>, the Robbins problem is not related to Huntington's error. 2 Proof.
Reference: 15. <author> M. Stickel. </author> <title> A unification algorithm for associative-commutative functions. </title> <journal> J. ACM, </journal> <volume> 28(3) </volume> <pages> 423-434, </pages> <year> 1981. </year>
Reference-contexts: We describe here some of EQP's features that were used in the proof of Lemma 3. See [11] for details on these and the other features of EQP. 3.1. AC Unification and Matching Associative-commutative (AC) unification <ref> [15] </ref> builds the properties of associativity and commutativity of a binary operation into the inference process so that the corresponding equations need not be present as explicit axioms. Two terms are AC identical if they can be made identical by reassociating and commuting subterms. <p> AC matching is a special case of AC unification in which only one of the two given terms is instantiated; AC matching is used to simplify derived equations and to determine whether one equation subsumes another. EQP uses Stickel's AC unification algorithm <ref> [15] </ref>. Let + be an AC operation, and suppose we are trying to unify s j s 1 + + s n with t j t 1 + + t m .
Reference: 16. <author> S. Winker. </author> <title> Robbins algebra: Conditions that make a near-Boolean algebra Boolean. </title> <journal> J. Automated Reasoning, </journal> <volume> 6(4) </volume> <pages> 465-489, </pages> <year> 1990. </year>
Reference-contexts: Winker then proved (by hand) several weaker conditions sufficient. The two such conditions that play a role in the present work are contained in the following two lemmas. Lemma 1 (S. Winker <ref> [16, 17] </ref>). A Robbins algebra satisfying 9c9d (c + d = c) is a Boolean algebra. Lemma 2 (S. Winker [16, 17]). A Robbins algebra satisfying 9c9d (n (c+d) = n (c)) is a Boolean algebra. Appendix B contains a computer proof of Lemma 1. <p> The two such conditions that play a role in the present work are contained in the following two lemmas. Lemma 1 (S. Winker <ref> [16, 17] </ref>). A Robbins algebra satisfying 9c9d (c + d = c) is a Boolean algebra. Lemma 2 (S. Winker [16, 17]). A Robbins algebra satisfying 9c9d (n (c+d) = n (c)) is a Boolean algebra. Appendix B contains a computer proof of Lemma 1. <p> Use the preceding equation to simplify (8865): n (n (3x)+x)+2x = 2x. [8865:8870] (8871) Appendix B: Proof of Lemma 1 This appendix contains a proof of Lemma 1, conjectured and first proved by Winker <ref> [16, 17] </ref>, then later proved automatically by EQP [11]. To simplify the presentation, we first prove a stronger condition sufficient. Both computer proofs were found by EQP, the first in about 5 seconds, and the second in about 2319 seconds. Lemma 0. <p> Winker <ref> [16, 17] </ref>). A Robbins algebra satisfying 9c9d (c + d = c) is a Boolean algebra. Proof.
Reference: 17. <author> S. Winker. </author> <title> Absorption and idempotency criteria for a problem in near-Boolean algebras. </title> <journal> J. Algebra, </journal> <volume> 153(2) </volume> <pages> 414-423, </pages> <year> 1992. </year>
Reference-contexts: Winker then proved (by hand) several weaker conditions sufficient. The two such conditions that play a role in the present work are contained in the following two lemmas. Lemma 1 (S. Winker <ref> [16, 17] </ref>). A Robbins algebra satisfying 9c9d (c + d = c) is a Boolean algebra. Lemma 2 (S. Winker [16, 17]). A Robbins algebra satisfying 9c9d (n (c+d) = n (c)) is a Boolean algebra. Appendix B contains a computer proof of Lemma 1. <p> The two such conditions that play a role in the present work are contained in the following two lemmas. Lemma 1 (S. Winker <ref> [16, 17] </ref>). A Robbins algebra satisfying 9c9d (c + d = c) is a Boolean algebra. Lemma 2 (S. Winker [16, 17]). A Robbins algebra satisfying 9c9d (n (c+d) = n (c)) is a Boolean algebra. Appendix B contains a computer proof of Lemma 1. <p> Use the preceding equation to simplify (8865): n (n (3x)+x)+2x = 2x. [8865:8870] (8871) Appendix B: Proof of Lemma 1 This appendix contains a proof of Lemma 1, conjectured and first proved by Winker <ref> [16, 17] </ref>, then later proved automatically by EQP [11]. To simplify the presentation, we first prove a stronger condition sufficient. Both computer proofs were found by EQP, the first in about 5 seconds, and the second in about 2319 seconds. Lemma 0. <p> Winker <ref> [16, 17] </ref>). A Robbins algebra satisfying 9c9d (c + d = c) is a Boolean algebra. Proof.
Reference: 18. <author> L. Wos, R. Overbeek, E. Lusk, and J. Boyle. </author> <title> Automated Reasoning: Introduction and Applications, 2nd edition. </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1992. </year> <note> paper.tex; 4/03/1997; 10:03; no v.; p.14 </note>
Reference-contexts: See [11] for details on EQP's AC unification and matching. 3.2. Paramodulation and Demodulation The search for a proof uses paramodulation (an inference rule for equality) and demodulation (simplification of inferred equations) <ref> [18] </ref>. A simplification ordering O on terms is used to orient equations and to guarantee termination of demodulation.
References-found: 18

