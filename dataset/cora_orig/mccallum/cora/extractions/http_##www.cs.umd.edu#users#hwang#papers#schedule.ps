URL: http://www.cs.umd.edu/users/hwang/papers/schedule.ps
Refering-URL: http://www.cs.umd.edu/users/hwang/
Root-URL: 
Email: fhwang; prabha; vsg@cs.umd.edu  
Title: Scheduling Responses From Video Databases (Extended Abstract)  
Author: Eenjun Hwang, B. Prabhakaran and V.S. Subrahmanian 
Address: College Park, MD 20770  
Affiliation: Computer Science Department Institute for Advanced Computer Studies University of Maryland  
Abstract: In a video database system, the answer to a query Q may involve retrieval of a set of segments of one or more videos. When multiple queries are posed by several users, we might wish to reorder the video segments so as to take advantage of the fact that certain video blocks appear in the answers to different queries. We assume that the user generating a query is not particularly interested in the order in which movie segments are presented. Based on this assumption, a server generating responses may be able to reorder the movie clips in such a way that the number of accesses to databases can be minimized. As this problem of ordering movie clips has been shown to be NP-complete, we propose three algorithms to order video clips in such a way that number of database accesses is reduced. We present these algorithms, together with experimental data evaluating performance under different assumptions on the distribution of requests.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Bhatia, S. Khuller and V.S.Subrahmanian. </author> <title> (1997) "Complexity Results for Video on Demand Systems", </title> <note> manuscript in preparation. </note>
Reference-contexts: In this work, we have focused on efficient ordering of movie segments that comprise a response in such a way that the number of accesses made to the video database is reduced. This problem of optimal ordering of movie segments is proved to be NP-complete in <ref> [1] </ref>. <p> In our work, we use the same access pattern for our experiments. [2] also uses Zipf distribution for workload studies on video servers. [5] describes methodologies for maximizing buffer and disk utilization for News-on-demand systems. NP-completeness of this movie segment scheduling problem is shown in <ref> [1] </ref>. 6 Summary In this work, we consider query-response scenario in video database systems that involve presentation of similar movie segments to more than one response. <p> A server generating the responses may 7 be able to order the movie segments in such a way that the number of database accesses is mini-mized. This problem of ordering movie segments is shown to be NP-complete in <ref> [1] </ref>. Hence, we have proposed heuristic algorithms for efficient ordering of movie segments comprising the responses. We have also presented simulation results for one of the algorithms.
Reference: [2] <author> A.L. Drapeau, D.A. Patterson, and R.H. Katz, </author> <title> "Toward Workload Characterization of Video Server and Digital Library Application", </title> <booktitle> ACM Sigmetrics Conference on Measurement and Modeling of Computer Systems, </booktitle> <address> Nashville, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: They also provide valuable user access patterns of movies derived from a real-life video rental store data. In our work, we use the same access pattern for our experiments. <ref> [2] </ref> also uses Zipf distribution for workload studies on video servers. [5] describes methodologies for maximizing buffer and disk utilization for News-on-demand systems.
Reference: [3] <author> A. Dan and D. Sitaram, </author> <title> "A Generalized Interval Caching Policy for Mixed Interactive and Long Video Workloads", </title> <booktitle> Multimedia Computing and Networking, </booktitle> <address> San Jose, </address> <month> January </month> <year> 1996. </year>
Reference-contexts: One criteria for finding this set is that the start times of the video blocks should be within a pre-defined buffer holding time. (Buffer holding time corresponds to the interval in which movie blocks are held in buffer. This corresponds to the interval caching policy discussed in <ref> [3] </ref>). 2. These sets of (overlapping) movie segments are arranged in decreasing order of the number of overlap blocks in the set. 3. Schedule these sets successively so that the number of overlapping blocks in the entire presentation is maximized (in other words, the number of block accesses is minimized). <p> the number of disk reads (total as well as peak) more effectively. 6 (a) Disk reads under uniform distribution (b) Disk reads under Zipf distribution (c) Peak disk reads under uniform distribution (d) Peak disk reads under Zipf distribution 5 Related Work Caching of movie blocks has been described in <ref> [3] </ref>. They also provide valuable user access patterns of movies derived from a real-life video rental store data.
Reference: [4] <author> E. Hwang, B. Prabhakaran, </author> <title> and V.S. Subrahmanian, "Presentation Planning for Distributed Video Systems", </title> <type> CS TR 3723, Umiacs TR 96-91, </type> <institution> University of Maryland, College Park, Computer Science Technical Report Series, </institution> <month> December </month> <year> 1996. </year>
Reference: [5] <author> R.T. Ng and J. Yang, </author> <title> "Maximizing Buffer and Disk Utilizations for News On-demand", </title> <booktitle> Proceedings of the 20'th VLDB Conference, </booktitle> <address> Chile, </address> <year> 1994. </year> <month> 8 </month>
Reference-contexts: They also provide valuable user access patterns of movies derived from a real-life video rental store data. In our work, we use the same access pattern for our experiments. [2] also uses Zipf distribution for workload studies on video servers. <ref> [5] </ref> describes methodologies for maximizing buffer and disk utilization for News-on-demand systems. NP-completeness of this movie segment scheduling problem is shown in [1]. 6 Summary In this work, we consider query-response scenario in video database systems that involve presentation of similar movie segments to more than one response.
References-found: 5

