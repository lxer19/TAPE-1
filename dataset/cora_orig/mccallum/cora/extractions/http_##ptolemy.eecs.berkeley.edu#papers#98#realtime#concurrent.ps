URL: http://ptolemy.eecs.berkeley.edu/papers/98/realtime/concurrent.ps
Refering-URL: http://ptolemy.eecs.berkeley.edu/papers/98/realtime/
Root-URL: 
Title: MODELING CONCURRENT REAL-TIME PROCESSES USING DISCRETE EVENTS  
Author: Edward A. Lee 
Degree: Professor  
Date: February 28, 1997  Abstract  
Address: BERKELEY, CALIFORNIA 94720  Berkeley, CA, USA 94720.  
Affiliation: DEPARTMENT OF ELECTRICAL ENGINEERING AND COMPUTER SCIENCE UNIVERSITY OF CALIFORNIA  EECS, University of California,  
Abstract: We give a formal framework for studying real-time discrete-event systems. It describes concurrent processes as sets of possible behaviors. Compositions of processes are processes with behaviors in the intersection of the behaviors of the component processes. The interaction between processes is through signals, which are collections of events. Each event is a value-tag pair, where the tags denote time. Zeno conditions are defined and methods are given for avoiding them. Strict causality ensures determi-nacy under certain technical conditions, and delta-causality ensures the absence of Zeno conditions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abramsky, S. J. Gay, and R. Nagarajan, </author> <title> Interaction Categories and the Foundations of Typed Concurrent Programming, In: Deductive Program Design: </title> <booktitle> Proceedings of the 1994 Marktober dorf International Summer School, </booktitle> <editor> (M. Broy, ed.), </editor> <booktitle> NATO ASI Series F, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Lee 3 of 29 found in the interaction categories of Abramsky <ref> [1] </ref>. We define . The empty signal (one with no events) will be denoted by , and the tuple of empty signals by . These are signals like any other, so and . For any signal , (ordinary set union). <p> The tensor product is used in the interaction categories of Abramsky <ref> [1] </ref> for the same composition. Here it fol lows from the intersection of behaviors. P 1 P 2 FIGURE 1. Composition of independent processes. <p> This suggests a type system that focuses on signals rather than values. Of course, processes themselves can then also be divided by types, yielding a process-level type system that captures the semantic model of the signals that satisfy the process, something like the interaction categories of Abramsky <ref> [1] </ref>. 6.
Reference: [2] <author> R. Alur and T. A. Henzinger, </author> <title> Real-Time System = Discrete System + Clock Variables, Prof. of the First AMAST Workshop on Real Time, in Theories and Experiences for Real-Time System Development (T. </title> <editor> Rus and C. Rattray, eds.) </editor> <booktitle> AMAST Series in Computing 2, World Scientific, </booktitle> <year> 1994, </year> <pages> pp. 1-29. </pages> <booktitle> V V 1 V 2 28 of 29 Edward A. Lee </booktitle>
Reference-contexts: This paper gives a formal framework for talking about such systems. Unlike temporal logics [16], which focus on eventually and always, this methodology focuses on when. Unlike models based on transition systems <ref> [2] </ref>, this one is input/output oriented, and is more concerned with simulation than with verification. As such, the focus of the paper is on definability and determinism (existence and uniqueness of solutions), although hints are given at extensions that support nondeterminism.
Reference: [3] <author> A. Benveniste, </author> <title> Compositional and Uniform Modeling of Hybrid Systems, </title> <note> to appear, IEEE Tr. on Automatic Control, </note> <year> 1998. </year>
Reference-contexts: However, we have to use some care in forming this intersection. Before we can form such an intersection, each process to be composed must be defined as a subset of the same set of signals , called by some researchers its sort <ref> [3] </ref>. 1.
Reference: [4] <author> A. Benveniste and G. Berry, </author> <title> The Synchronous Approach to Reactive and Real-Time Systems, </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> Vol. 79, No. 9, </volume> <pages> pp. 1270-1282, </pages> <year> 1991. </year>
Reference-contexts: If there is a firing function that is only causal in a feedback loop, then we have no assurance of their being a denotational solution, much less an operational one. In the latter case, lessons could be taken from the synchronous languages <ref> [4] </ref> to define a fixed-point semantics at each time stamp. This could be done with functional signals and firing functions that are monotonic over a Scott order on the event values.
Reference: [5] <author> G. Birkhoff and S. MacLane, </author> <title> A survey of modern algebra, 4th ed., </title> <publisher> Macmillan, </publisher> <address> New York, </address> <year> 1977. </year>
Reference-contexts: These are signals like any other, so and . For any signal , (ordinary set union). For any tuple , , where by the notation we mean the pointwise union of the sets in the tuple. Following Birkhoff and Mac Lane <ref> [5] </ref>, we define to be a set with a single element, which we denote . 2.1.3 Continuous-time, discrete, and Zeno signals Let denote the set of distinct tags in a signal . A continuous-time signal satisfies .
Reference: [6] <author> M. Broy, </author> <title> Functional Specification of Time Sensitive Communicating Systems, in Program ming and Methematical Method, </title> <editor> M. Broy, ed., </editor> <booktitle> NATO ASI Series, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Some aspects of the modeling technique are inspired by Invited paper to Annals of Software Engineering, Special Volume on Real-Time Software Engineering, to appear, 1998. Also UCB/ERL Memorandum M98/7, March 4th 1998. 2 of 29 Edward A. Lee Yates [26] and Broy <ref> [6] </ref>. The mathematical framework that is used here was introduced in [15], but we have repeated the essential material in order to make this paper self-contained. 2.
Reference: [7] <author> V. Bryant, </author> <title> Metric Spaces, </title> <publisher> Cambridge University Press, </publisher> <year> 1985. </year>
Reference-contexts: It can be verified that the set of signals in a discrete-event system is complete. The Banach fixed point theorem (see for example <ref> [7] </ref>) states that if : is a contraction mapping and is a complete metric space, then there is exactly one such that . This is called a fixed point. Moreover, the Banach fixed point theorem gives a constructive way (sometimes called the fixed point algorithm) to find the fixed point. <p> This is still not ensured by VHDL simulators, for example, nor by many other discrete-event simulators in practical use. It is possible to reformulate things so that VHDL processes are correctly modeled as strictly causal (not delta causal) (see [15] for details). Fortunately, a closely related theorem (see <ref> [7] </ref>, chapter 4) states that if : is a strictly causal function and is a complete metric space, then there is at most one fixed point , . <p> If the metric space is compact rather than just complete, then strict causality is enough to ensure the existence of a fixed point and the validity of the constructive procedure (35) <ref> [7] </ref>. In general, the metric space of discrete-event signals is not compact, although it is beyond the scope of this paper to show this.
Reference: [8] <author> C. Cassandras, </author> <title> Discrete Event Systems, Modeling and Performance Analysis, </title> <publisher> Irwin, </publisher> <address> Homewood IL, </address> <year> 1993. </year>
Reference: [9] <author> S. A. Edwards, </author> <title> The Specification and Execution of Heterogeneous Synchronous Reactive Systems, </title> <type> Ph.D. thesis, </type> <institution> University of California, Berkeley, </institution> <month> May </month> <year> 1997. </year> <note> Available as UCB/ERL M97/ 31. (http://ptolemy.eecs.berkeley.edu/papers/97/sedwardsThesis/) </note>
Reference-contexts: This could be done with functional signals and firing functions that are monotonic over a Scott order on the event values. Efficient procedures exist for finding such fixed points at run time <ref> [9] </ref>, so this is by no means a farfetched approach. 5. Conclusions We have given a formal framework for a class of models of real-time systems based on tagging events with the time at which they occur. The framework supports answering questions of composi-tionality and correctness of an operational semantics.
Reference: [10] <author> C. Ellingson and R. J. Kulpinski, </author> <title> Dissemination of System-Time, </title> <journal> IEEE Trans. on Communica tions, </journal> <volume> Vol. Com-23, No. 5, </volume> <pages> pp. 605-624, </pages> <month> May, </month> <year> 1973. </year>
Reference: [11] <author> C. J. Fidge, </author> <title> Logical Time in Distributed Systems, </title> <journal> Computer, </journal> <volume> Vol. 24, No. 8, </volume> <pages> pp. 28-33, </pages> <month> Aug. </month> <year> 1991. </year>
Reference: [12] <author> Y.-C. Ho (Ed.), </author> <title> Discrete Event Dynamic Systems: Analyzing Complexity and Performance in the Modern World, </title> <publisher> IEEE Press, </publisher> <address> New York, </address> <year> 1992. </year>
Reference: [13] <author> C. A. R. Hoare, </author> <title> Communicating Sequential Processes, </title> <journal> Communications of the ACM, </journal> <volume> Vol. 21, No. 8, </volume> <month> August </month> <year> 1978. </year>
Reference: [14] <author> L. Lamport, </author> <title> Time, Clocks, and the Ordering of Events in a Distributed System, </title> <journal> Communica tions of the ACM, </journal> <volume> Vol. 21, No. 7, </volume> <month> July, </month> <year> 1978. </year>
Reference: [15] <author> E. A. Lee and A. Sangiovanni-Vincentelli, </author> <title> A Denotational Framework for Comparing Models of Computation, </title> <institution> ERL Memorandum UCB/ERL M97/11, University of California, Berkeley, </institution> <address> CA 94720, </address> <month> January 30, </month> <year> 1997. </year> <note> (http://ptolemy.eecs.berkeley.edu/papers/97/denotational/) </note>
Reference-contexts: Also UCB/ERL Memorandum M98/7, March 4th 1998. 2 of 29 Edward A. Lee Yates [26] and Broy [6]. The mathematical framework that is used here was introduced in <ref> [15] </ref>, but we have repeated the essential material in order to make this paper self-contained. 2. Discrete-Event Systems 2.1 SIGNALS 2.1.1 Values and tags Given a set of values and tags , the reals, we define an event to be a member of . <p> I.e., cycles around a feedback loop introduce at least delay. This is still not ensured by VHDL simulators, for example, nor by many other discrete-event simulators in practical use. It is possible to reformulate things so that VHDL processes are correctly modeled as strictly causal (not delta causal) (see <ref> [15] </ref> for details). Fortunately, a closely related theorem (see [7], chapter 4) states that if : is a strictly causal function and is a complete metric space, then there is at most one fixed point , .
Reference: [16] <author> Z. Manna and A. Pnueli, </author> <title> The Temporal Logic of Reactive and Concurrent Systems, </title> <publisher> Springer-Ver lag, </publisher> <year> 1991. </year>
Reference-contexts: 1. Introduction Discrete-event systems, where atomic events occur along a physical time line, provide a useful abstraction for many real-time digital systems. This paper gives a formal framework for talking about such systems. Unlike temporal logics <ref> [16] </ref>, which focus on eventually and always, this methodology focuses on when. Unlike models based on transition systems [2], this one is input/output oriented, and is more concerned with simulation than with verification.
Reference: [17] <author> F. Mattern, </author> <title> Virtual Time and Global States of Distributed Systems, in Parallel and Distributed Algorithms, </title> <editor> M. Cosnard and P. Quinton, eds., </editor> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1989, </year> <pages> pp. 215-226. </pages>
Reference: [18] <author> S.G. Matthews, </author> <title> An Extensional Treatment of Lazy Dataflow Deadlock, </title> <journal> Theoretical Computer Science, </journal> <volume> Vol. 151, </volume> <pages> pp. 195-205, </pages> <year> 1995. </year>
Reference: [19] <author> S.G. Matthews, </author> <title> Partial Metric Topology, in General Topology & its Applications, </title> <editor> eds. S. Andima et al, </editor> <booktitle> Proc. of the 8th Summer Conf., </booktitle> <institution> Queens College (1992), Annals of the New York Academy of Science, Vol. 728 (New York Academy of Sci., </institution> <year> 1994), </year> <pages> pp. 183-197. </pages> <editor> Edward A. </editor> <booktitle> Lee 29 of 29 </booktitle>
Reference: [20] <author> A. Mazurkiewicz, </author> <title> Traces, Histories, Graphs: Instances of a Process Monoid, </title> <booktitle> in Proc. Conf. on Mathematical Foundations of Computer Science, </booktitle> <editor> M. P. Chytil and V. Koubek, eds., </editor> <publisher> Springer Verlag LNCS 176, </publisher> <year> 1984. </year>
Reference-contexts: It captures the intuitively appealing concept that between any two finite tags there will be a finite number of tags. Mazurkiewicz gives a considerably more complicated but equivalent notion of discreteness in terms of relations <ref> [20] </ref>. Let denote the set of tags appearing in any signal in the tuple . Clearly .
Reference: [21] <author> D. G. Messerschmitt, </author> <title> Synchronization in Digital System Design, </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> Vol. 8, No. 8, </volume> <pages> pp. 1404-1419, </pages> <month> October </month> <year> 1990. </year>
Reference: [22] <author> R. Milner, </author> <title> Communication and Concurrency, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1989. </year>
Reference: [23] <author> V. R. Pratt, </author> <title> Modeling Concurrency with Partial Orders, </title> <journal> Int. J. of Parallel Programming, </journal> <volume> Vol. 15, No. 1, </volume> <pages> pp. 33-71, </pages> <month> Feb. </month> <year> 1986. </year>
Reference-contexts: Position in the tuple serves the same purposes as naming of signals in process calculi [13][22]. Reordering of the tuple serves the same purposes as renaming. A similar use of tuples is 1. An alternative is to define a signal as a multiset, as done by Pratt <ref> [23] </ref>. V T = e V 1= s S S E ( )= T V e 1 t v, 1 ( ) s= e 2 t v, 2 ( ) s= v 1 v 2 = s t ( ) 1 t T S Edward A.
Reference: [24] <author> M. Raynal and M. Singhal, </author> <title> Logical time: Capturing Causality in Distributed Systems, </title> <journal> Com puter, </journal> <volume> Vol. 29, No. 2, </volume> <month> February </month> <year> 1996. </year>
Reference: [25] <author> G. M. Reed and A. W. Roscoe, </author> <title> Metric Spaces as Models for Real-Time Concurrency, </title> <booktitle> Mathematical Foundations of Programming Language Semantics, 3rd Workshop, </booktitle> <address> New Orleans, </address> <publisher> Springer-Verlag LNCS 298 (1987) pp.331-343. </publisher>
Reference-contexts: Consider an tuple of signals . Let where is the subset of events in signal with tag . Thus, means that (there are no events with tag ). We can define a metric on the set of tuples of signals as follows 1 1. Reed and Roscoe <ref> [25] </ref> use an infimum over times where the two signals are identical. For discrete signals, the two metrics are identical. FIGURE 7. Feedback (a directed self-loop).
Reference: [26] <author> R. K. Yates, </author> <title> Networks of Real-Time Processes, </title> <booktitle> in Concur 93, Proc. of the 4th Int. Conf. on Concurrency Theory, </booktitle> <editor> E. Best, ed., </editor> <publisher> Springer-Verlag LNCS 715, </publisher> <year> 1993. </year>
Reference-contexts: Some aspects of the modeling technique are inspired by Invited paper to Annals of Software Engineering, Special Volume on Real-Time Software Engineering, to appear, 1998. Also UCB/ERL Memorandum M98/7, March 4th 1998. 2 of 29 Edward A. Lee Yates <ref> [26] </ref> and Broy [6]. The mathematical framework that is used here was introduced in [15], but we have repeated the essential material in order to make this paper self-contained. 2. <p> The Banach fixed point theorem tells us that if the process is functional and delta causal, then the feedback loop has exactly one behavior (i.e. it is determinate). This determinacy result was also proved by Yates <ref> [26] </ref>, although he used somewhat different methods. Moreover, the Banach fixed point theorem gives us a constructive way to find that behavior. Start with any guess about the signals (most simulators start with an empty signal), and iteratively apply the function corresponding to the process.
References-found: 26

