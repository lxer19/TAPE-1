URL: http://c.gp.cs.cmu.edu:5103/afs/cs/project/chopshop/pub/papers/CMU-CS-95-108.ps
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs/project/compose/www/paper_abstracts/dnj/CMU-CS-95-108.html
Root-URL: http://www.cs.cmu.edu
Title: Problem Decomposition for Reuse  
Author: Daniel Jackson Michael Jackson 
Date: January 2, 1995  
Address: Pittsburgh, PA 15213, USA  101 Hamilton Terrace London NW8 9QX  
Affiliation: School of Computer Science Carnegie Mellon University  MAJ Consulting Ltd  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Robert M Balzer, </author> <title> Neil M Goldman and David S Wile; Operational Specification as the Basis for Prototyping; ACM Sigsoft SE Notes Volume 7 Number 5 pages 3-16, December 1982; reprinted in New Paradigms for Software Development; ed W W Agresti; IEEE Tutorial Text, </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1986. </year>
Reference-contexts: The approach is illustrated by an example problem: the control of a package routing machine <ref> [11, 1] </ref>. We show the decomposition of the problem into three subproblems, or views, that fit into three problem frames; the specification of each view; and the connection of the subproblem views into a single specification. <p> In the following section we describe our example problem and decompose it into three subproblems that fit the frames given above. 3 An Example Problem Our example is adapted from a well-known problem discussed by Swartout and Balzer <ref> [11, 1] </ref>. It concerns the control of a package router. 3.1 Problem Statement A package router consists of a binary tree of pipes through which packages slide by gravity to destination bins, passing through two-position switches that can be set to direct them to the right bins.
Reference: [2] <author> Martin S Feather, Stephen Fickas, </author> <title> and B Robert Helm; Composite System Design: </title> <booktitle> the Good News and the Bad News; in Proceedings of the 6th RADC Conference on Knowledge-Based Software Engineering; IEEE Computer Society Press, </booktitle> <year> 1992. </year>
Reference-contexts: When a problem with an essentially parallel structure is forced into a hierarchical decomposition, the resulting components are likely to be unsatisfactory in both the problem and the solution domain. The problem domain, for example, may be decomposed into domain entities, viewed as agents <ref> [8, 2] </ref>. The component for each agent will then inevitably entangle different aspects of its behaviour that are unlikely to reappear in exactly that combination in any other problem. In the solution domain the same difficulty is found in a different context.
Reference: [3] <institution> David Garlan and Mary Shaw; An Introduction to Software Architecture; in Advances in Software Engineering and Knowledge Engineering Volume 1, V Ambriola and G Tortora eds; World Scientific Publishing Co, </institution> <address> New Jersey, </address> <year> 1993. </year>
Reference: [4] <institution> Daniel Jackson; Structuring Z Specifications with Views; Technical Report CMU-CS-94-126, School of Computer Science, Carnegie Mellon University, </institution> <month> March </month> <year> 1994. </year>
Reference-contexts: The approach presented in this paper combines two ingredients, both of which aim to exploit parallel structuring of problems and of problem domains. They are: the idea of problem frames [6, 7]; and the idea of structuring Z specifications as views <ref> [4] </ref>. 3 A problem frame is a template characterising a class of simple problems| that is, problems for which a reliable solution method is known. It also characterises a class of problem whose solutions are likely to be reusable.
Reference: [5] <author> Michael Jackson; System Development; Prentice-Hall International, </author> <year> 1983. </year>
Reference-contexts: This is often done. For example, JSD, which is essentially a method for Dynamic Information problems, has been pressed into service to solve problems that would fit far better into the Control frame <ref> [5] </ref>. We are accustomed to this kind of fudging, and expect to devote some effort to finding work-arounds. <p> A problem frame bounds a class of problem for which an effective and systematic method is known. The method can be readily applied to a problem of the class because the method is expressed in terms of the principal parts of the problem. The JSD method, for example <ref> [5] </ref>, treats Dynamic Information problems. In JSD the first step is to describe the Subject Domain|which in JSD is called the Real World| as a collection of concurrent sequential processes each with a regular structure.
Reference: [6] <editor> Michael Jackson; Software Development Method; in A Classical Mind: </editor> <booktitle> Essays in Honour of C A R Hoare; A W Roscoe ed; pages 211-230; Prentice-Hall International, </booktitle> <year> 1994. </year>
Reference-contexts: The approach presented in this paper combines two ingredients, both of which aim to exploit parallel structuring of problems and of problem domains. They are: the idea of problem frames <ref> [6, 7] </ref>; and the idea of structuring Z specifications as views [4]. 3 A problem frame is a template characterising a class of simple problems| that is, problems for which a reliable solution method is known. It also characterises a class of problem whose solutions are likely to be reusable. <p> We also discuss some difficulties of view integration as they appear in Z and other languages, and outline some desirable properties of an integration mechanism. For convenience, the complete specification is gathered together at the end of the paper, in an Appendix. 2 Problem Frames A problem frame <ref> [6, 7] </ref> is a structure of principal parts and a solution task. <p> PackageRouterControl state, and write the necessary event classification: Init PackageRouterControl b= PackageRouterControl ^ ffiRouterRequestsAndRules ^ Init PackageTrackingDomain PassSensor b= PackageRouterControl ^ ffiRouterRequestsAndRules ^ (ReadDest _ WrongBinMessage _ RightBin _ TransferAndFlip _ TransferNoFlip) 23 8 Discussion 8.1 Problem Frames The original motivation of the idea of problem frames was chiefly methodological <ref> [6] </ref>. A problem frame bounds a class of problem for which an effective and systematic method is known. The method can be readily applied to a problem of the class because the method is expressed in terms of the principal parts of the problem.
Reference: [7] <author> Michael Jackson; Problems, </author> <title> Methods and Specialisation; SE Journal Volume 9 Number 6 pages 249-255, </title> <booktitle> November 1994; edited and abridged in IEEE Software Volume 11 Number 6 pages 57-62, </booktitle> <month> November </month> <year> 1994. </year> <month> 29 </month>
Reference-contexts: The approach presented in this paper combines two ingredients, both of which aim to exploit parallel structuring of problems and of problem domains. They are: the idea of problem frames <ref> [6, 7] </ref>; and the idea of structuring Z specifications as views [4]. 3 A problem frame is a template characterising a class of simple problems| that is, problems for which a reliable solution method is known. It also characterises a class of problem whose solutions are likely to be reusable. <p> We also discuss some difficulties of view integration as they appear in Z and other languages, and outline some desirable properties of an integration mechanism. For convenience, the complete specification is gathered together at the end of the paper, in an Appendix. 2 Problem Frames A problem frame <ref> [6, 7] </ref> is a structure of principal parts and a solution task.
Reference: [8] <institution> W Lewis Johnson; Deriving Specifications from Requirements; in Pro--ceedings of the 10th International Conference on Software Engineering; IEEE Computer Society Press, </institution> <year> 1988. </year>
Reference-contexts: When a problem with an essentially parallel structure is forced into a hierarchical decomposition, the resulting components are likely to be unsatisfactory in both the problem and the solution domain. The problem domain, for example, may be decomposed into domain entities, viewed as agents <ref> [8, 2] </ref>. The component for each agent will then inevitably entangle different aspects of its behaviour that are unlikely to reappear in exactly that combination in any other problem. In the solution domain the same difficulty is found in a different context.
Reference: [9] <author> Bashar Nuseibeh, </author> <title> Jeff Kramer and Anthony Finkelstein; Expressing the Relationships Between Multiple Views in Requirements Specification; Proceedings of 15th International Conference on Software Engineering, </title> <publisher> pages 187-196; IEEE Computer Society Press, </publisher> <year> 1993. </year>
Reference-contexts: It is parallel structure, and the benefits of a decomposition that respects its nature, that characterises the present approach and other approaches based on the notion of viewpoints <ref> [10, 9] </ref>. The approach presented in this paper combines two ingredients, both of which aim to exploit parallel structuring of problems and of problem domains. <p> Problem decomposition is then the recognition of the appropriate problem frames and the identification of their principal parts. A problem frame applied in this way has something in common with an instantiated Viewpoint <ref> [9] </ref>, which incorporates a representation scheme, a development process, and an area of concern in the problem domain. In different problem frames the principal parts have different characteristics and are differently connected. Many problem frames are needed, to accommodate the many parts and aspects of realistic problems.
Reference: [10] <institution> Gerald Kotonya and Ian Sommerville; Viewpoints for Requirements Definition; Software Engineering Journal Volume 7 Number 6, </institution> <address> pages 375-387, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: It is parallel structure, and the benefits of a decomposition that respects its nature, that characterises the present approach and other approaches based on the notion of viewpoints <ref> [10, 9] </ref>. The approach presented in this paper combines two ingredients, both of which aim to exploit parallel structuring of problems and of problem domains.
Reference: [11] <institution> William Swartout and Robert Balzer; On the Inevitable Intertwining of Specification and Implementation; Comm ACM Volume 25 Number 7 pages 438-440, </institution> <month> July </month> <year> 1982. </year>
Reference-contexts: The approach is illustrated by an example problem: the control of a package routing machine <ref> [11, 1] </ref>. We show the decomposition of the problem into three subproblems, or views, that fit into three problem frames; the specification of each view; and the connection of the subproblem views into a single specification. <p> In the following section we describe our example problem and decompose it into three subproblems that fit the frames given above. 3 An Example Problem Our example is adapted from a well-known problem discussed by Swartout and Balzer <ref> [11, 1] </ref>. It concerns the control of a package router. 3.1 Problem Statement A package router consists of a binary tree of pipes through which packages slide by gravity to destination bins, passing through two-position switches that can be set to direct them to the right bins.
Reference: [12] <institution> Pamela Zave and Michael Jackson; Conjunction as Composition; ACM Transactions on Software Engineering Methodology, </institution> <note> Volume 2 Number 4 pages 379-411; October 1993. </note>
Reference-contexts: It also characterises a class of problem whose solutions are likely to be reusable. In general, different problem frames invite the use of different specification languages|sometimes more than one for a frame. However, it is not our purpose here to discuss multiparadigm specification <ref> [12] </ref>, which is largely orthogonal to the immediate concerns of this paper (although not orthogonal to problem decomposition generally). <p> empty choicesw ; d = fflipped (setting (sw ))g setting 0 = setting fsw 7! flipped (setting (sw ))g ArriveNoFlip SwitchModel sw : SWITCH d : DEST : pre ArriveAndFlip setting 0 = setting 7 Connections The fundamental connection technique for the components of a parallel decomposition is logical conjunction <ref> [12] </ref>. For a Z specification this means combining schemas by including one within another, or by the conjunction operation of the Z schema calculus.
References-found: 12

