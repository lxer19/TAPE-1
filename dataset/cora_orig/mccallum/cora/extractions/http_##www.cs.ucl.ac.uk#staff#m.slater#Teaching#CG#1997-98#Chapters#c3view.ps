URL: http://www.cs.ucl.ac.uk/staff/m.slater/Teaching/CG/1997-98/Chapters/c3view.ps
Refering-URL: http://www.cs.ucl.ac.uk/staff/m.slater/Teaching/CG/1997-98/Chapters/
Root-URL: http://www.cs.ucl.ac.uk
Keyword: Computer Graphics and Virtual Environments  
Note: M. Slater, November 1997,  Chapter 3 Viewing in 2D  
Abstract-found: 0
Intro-found: 1
Reference: <author> Andreev, R.D. </author> <title> (1989) Algorithm for Clipping Arbitrary Polygons, </title> <journal> Computer Graphics Forum, </journal> <pages> 8(3) 183-91. </pages>
Reference: <author> Blinn, J.F. </author> <title> (1991) A Trip Down the Graphics Pipeline Line Clipping, </title> <journal> IEEE CG&A Jan, </journal> <pages> 11(1) 98-105. </pages>
Reference: <author> Cyrus, M., Beck, J. </author> <title> (1978) Generalised Two and Three Dimensional Clipping, </title> <journal> Computers and Graphics 3(1), </journal> <pages> 23-28. </pages>
Reference-contexts: In other cases the line segment is intersected with one of the boundaries it is known to cross, and the procedure repeated with the truncated line. Cyrus, Beck <ref> (Cyrus and Beck, 1978) </ref> and Liang, Barsky (LB) introduced an alternative approach where the line is represented in parametric form (6).
Reference: <author> Duvanenko, V.J., </author> <title> W.E. Robbins, R.S. Gyurcsik (1990) Improving Line Segment Clipping, </title> <journal> Dr Dobb's Journal of Software Tools, </journal> <volume> 15(7), </volume> <month> July, 36,38,40,42,44-5,98,100. </month>
Reference: <author> Foley J.D., Van Dam A., Feiner, S., Hughes, J. </author> <booktitle> (1990) Computer Graphics: Principles and Practise, </booktitle> <publisher> Addison-Wesley. </publisher>
Reference: <author> Newman W.M. </author> <title> and Sproull R.F. </title> <booktitle> (1979) Principles of Interactive Computer Graphics (2nd Ed) McGraw-Hill. </booktitle>
Reference-contexts: illustrated in Figure 2. p x B &gt; A + y p p p p p t= 0 t= 0 t= 0 t&gt; 1 0 &lt; t &lt; 1 - ve ha lfspa ce Parametric and Implicit Line equations and intersections 4.3 The Cohen-Sutherland Algorithm The Cohen-Sutherland line clipping algorithm <ref> (Newman and Sproull, 1979) </ref> is based on the ideas illustrated in Figure 3. In (a) the line is completely inside the clip region, so that the clipped line is the same as the original.
Reference: <author> Sutherland, </author> <title> I.E. and Hodgman, G.W. (1974) Reentrant Polygon Clipping, </title> <journal> Communications of the ACM 17(1), </journal> <pages> 43-42. </pages>
Reference-contexts: This new polygon is then clipped against a second boundary, say the right boundary. The result is clipped against the bottom and finally against the left boundary. The method is illustrated in Figure 7. This method of clipping polygons is known as the Sutherland-Hodgman algorithm <ref> (Sutherland and Hodgman, 1974) </ref>. Clipping the polygon against a clip boundary is straightforward. The procedure is to iterate through each of the polygon edges, constructing a new sequence of points - representing the polygon after clipping against that boundary.
Reference: <author> Liang, You-Dong, and Barsky, </author> <title> B.A. (1984) A New Concept and Method of Line Clipping, </title> <journal> ACM Transactions on Graphics, </journal> <pages> 3(1) 1-22. </pages>
Reference: <author> Liang, Y.-D and B.A. </author> <title> Barsky (1990) An Improved Parametric Line Clipping Algorithm, Algorithms and Parallel VLSI Architectures, </title> <editor> ed. Deprettere E.F., </editor> <publisher> Elsevier Science Publishers, </publisher> <address> Amsterdam. </address> <note> Conference held 10-16 June 1990 in Pont-a-Mousson, </note> <institution> France. </institution>
Reference: <author> Liang, Y.-D, </author> <title> B.A. Barsky (1992) The Optimal Tree Algorithm for Line clipping Technical Report UCB/CSD 92/691, </title> <type> CS Division, </type> <institution> Electrical Engineering and Computer Science, University of California at Berkeley. </institution>
Reference-contexts: Liang and Barsky claim that the new algorithm is provably optimal compared to the other approaches. This is described in <ref> (Liang and Barsky, 1992) </ref>. Another approach by Slater and Barsky, traces the line segment through the subdivided space shown in Figure 4, much in the sense that Bresenham's algorithm traces a line segment through the grid of pixels.
Reference: <author> Liang, Y.-D, B.A. Barsky and M. </author> <title> Slater (1992) Some Improvements to a Parametric Line Clipping Algorithm, </title> <type> Technical Report, </type> <institution> CS Division, Electrical Engineering and Computer Science, University of California at Berkeley. </institution>
Reference-contexts: Liang and Barsky claim that the new algorithm is provably optimal compared to the other approaches. This is described in <ref> (Liang and Barsky, 1992) </ref>. Another approach by Slater and Barsky, traces the line segment through the subdivided space shown in Figure 4, much in the sense that Bresenham's algorithm traces a line segment through the grid of pixels.
Reference: <author> Nicholl, T.M., Lee, D.T., Nicholl, R.A. </author> <title> (1987) An Efficient New Algorithm for 2-D Line Clipping: Its Development and Analysis, </title> <booktitle> Computer Graphics 21(4), </booktitle> <pages> 253-262. </pages>
Reference-contexts: However, this claim is doubtful (see Slater and Barsky, 1994). Each of CS and LB necessitate computing intersection points that might not form one of the endpoints of the clipped line. Nicholl, Lee and Nicholl (NLN) <ref> (Nicholl, Lee, Nicholl, 1987) </ref> introduced a new approach which computed intersection points of the line with the clip boundaries only when the new point is definitely one of the endpoints of the clipped line.
Reference: <author> Rappaport, A. </author> <title> (1991) An Efficient Algorithm for Line and Polygon Clipping, </title> <journal> The Visual Computer, </journal> <volume> 7(1), </volume> <pages> 19-28. </pages>
Reference: <author> Shi, K.K., Edwards J.A. </author> <title> Cooper D.C. (1990) An Efficient Line Clipping Algorithm, Computers and Graphics 14(2) 297-301. 34 Skala, V. (1989) Algorithms for 2D line clipping, </title> <booktitle> Eurographics 89, proceedings, </booktitle> <pages> 355-66, eds. </pages>
Reference: <author> Hansmann, W., F.R.A. Hopgood, W. </author> <title> Strasser, </title> <publisher> North-Holland. </publisher>
Reference: <author> Slater, M. and Barsky, B. </author> <title> (1994) 2D Line and Polygon Clipping Based on Space Subdivision, </title> <booktitle> The Visual Computer Vol. </booktitle> <volume> 10(7), </volume> <pages> 407-422. </pages>
Reference-contexts: It has been argued by Liang and Barsky, based on empirical evidence that this parametric approach is faster than CS, for the case of a large number of random lines distributed over the display space, and various sizes of clipping region. However, this claim is doubtful <ref> (see Slater and Barsky, 1994) </ref>. Each of CS and LB necessitate computing intersection points that might not form one of the endpoints of the clipped line. <p> A version of this algorithm has been developed that empirical evidence suggests is the most efficient compared with all of the others. An extensive comparison of several algorithms is given in <ref> (Slater and Barsky, 1994) </ref>. The complexity of the general clipping problem, of line segments against polygons, has been given attention in the computational geometry literature (where it is known as the Line-Polygon Classification problem, LPC), and is discussed, for example, in (Tilove, 1981; Skala, 1989; Rappaport, 1991). 7.
Reference: <author> Sobkow, </author> <title> M.S., Pospilsil, P, Y.-H Yang (1987) A Fast two-dimensional line clipping algorithm via line encoding, </title> <journal> Computers and Graphics 11(4), </journal> <pages> 459-467. </pages>
Reference-contexts: In (Liang, Barsky, 1990; Liang, Barsky, Slater, 1992) the original LB algorithm is improved by reducing the number of divisions in favour of more comparisons. (Dorr, 1990) provides a further improvement by showing that the LB algorithm can be performed entirely in integer arithmetic. <ref> (Sobkow, Pospilsil, Yang, 1987) </ref> developed an algorithm which is similar to NLN in substance (if not in form) in the sense that they enumerate all possible relationships between a line and the clipping region, and only compute intersection points where these are required as part of the output.
Reference: <author> Tilove, R.B. </author> <title> (1981) Line/Polygon Classification: A study of the complexity of geometrical classication, </title> <journal> IEEE CCG&A, </journal> <month> April, </month> <pages> 75-86. </pages>
Reference: <author> Weiler, K. </author> <title> (1980) Polygon Comparison Using a Graph Representation, </title> <booktitle> Computer Graphics (SIGGRAPH) 14(4), </booktitle> <pages> 10-18. </pages>
Reference-contexts: The algorithm will output one polygon for each of the vertices in E. <ref> (Weiler, 1980) </ref> produced an improved version of this algorithm, which relied on a data structure with greater complexity than the one above.
Reference: <author> Weiler, K. and P. </author> <title> Atherton (1977) Hidden Surface Removal Using Polygon Area Sorting, </title> <booktitle> Computer Graphics (SIGGRAPH) 11(2) 214-222. </booktitle>
Reference-contexts: However, there are examples where the degenerate edges could be a problem. For example, clipping is required for some hidden-surface and shadow detection algorithms, where the output in the case of polygon A should be two distinct polygons. <ref> (Weiler and Atherton, 1977) </ref> produced an algorithm that would allow the clipping of any simple polygon to any other polygon. Here the algorithm is discussed in the context of a rectangular clipping region.
References-found: 20

