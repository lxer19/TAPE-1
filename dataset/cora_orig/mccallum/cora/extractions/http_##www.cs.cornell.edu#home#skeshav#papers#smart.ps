URL: http://www.cs.cornell.edu/home/skeshav/papers/smart.ps
Refering-URL: http://www.cs.cornell.edu/skeshav/real/changes.html
Root-URL: http://www.cs.brown.edu/
Email: -keshav,spm-@research.att.com  
Title: SMART Retransmission: Performance with Overload and Random Losses  
Author: S. Keshav S. P. Morgan 
Address: 600 Mountain Avenue Murray Hill, New Jersey 07974  
Affiliation: AT&T Bell Laboratories  
Abstract: Feedback flow control, in conjunction with limited buffering in the network, inevitably leads to packet loss. Effective congestion control requires not only intelligent flow control but also a good retransmission strategy. We present a new retransmission strategy called SMART (Simple Method to Aid ReTransmissions), that combines the best features of the traditional Go-back-N (GBN) and selective-ack strategies. We show, first, that GBN retransmission with static window flow control leads to congestion collapse when the nominal load exceeds the link capacity. Second, we can avert congestion collapse by replacing GBN with SMART retransmission, even with static window flow control. Third, SMART retransmission, when combined with intelligent flow control, performs extremely well, both when losses are due to buffer overflows and when losses are random. Moreover, sources implementing intelligent flow control as well as SMART have a substantial advantage over static-window SMART sources under overload. Finally, in the presence of heavy random losses, SMART plus intelligent flow control is far better than TCP. 
Abstract-found: 1
Intro-found: 1
Reference: [AHUJ96] <author> R. Ahuja, S. Keshav, and H. Saran, </author> <title> ``Design, Implementation, and Performance of a Native-Mode ATM Transport Layer,'' </title> <note> To appear, Proc. IEEE INFO-COM '96, </note> <month> (March </month> <year> 1996). </year>
Reference-contexts: Thus, our results are directly applicable to ATM transport layers, and have already been implemented in a prototype native-ATM transport layer <ref> [AHUJ96] </ref>. January 26, 1996 - 11 - In the simulations, the offered load is 100%; the source attempts to send continuously at the speed of the bottleneck link. The one-way loss rate varies from 0 to 5%. The mean loss burst size is 1 packet or 5 packets, geometrically distributed.
Reference: [BONO95] <author> F. Bonomi and K. W. Fendick, </author> <title> ``The Rate-Based Flow Control Framework for the Available Bit Rate ATM Service,'' </title> <journal> IEEE NETWORK, </journal> <volume> Vol. 9, No, 2 (March/April 1995), </volume> <pages> pp. 25-39. </pages>
Reference-contexts: A filtered version of the measured rate is used in conjunction with a control law to ensure that the bottleneck's buffers are neither too full, nor too empty. If the network does not provide round-robin queueing but does give explicit rate feedback through the use of RM cells <ref> [BONO95] </ref>, a Packet-Pair source would simply use this rate instead of making its own rate estimates. A detailed study of Packet-Pair performance can be found in [KESH95]. Packet-Pair + SMART, in the same scenario as before.
Reference: [DOSH93] <author> B.T. Doshi, P.K. Johri, A.N. Netravali, and K.K. Sabnani, </author> <title> ``Error and Flow Control Performance of a High Speed Protocol,'' </title> <journal> IEEE Transactions on Communications, </journal> <volume> Vol. 41, </volume> <month> May </month> <year> 1993, </year> <pages> pp. 707-720. </pages>
Reference-contexts: This scheme is clearly more efficient in its use of bandwidth. However, this comes at the expense of reduced throughput during the first round-trip-time after a loss. Besides, the source still depends on a timer to initiate retransmission. Selective acknowledgement Several selective-acknowledgment schemes have been proposed in the literature <ref> [DOSH93] </ref>. In these schemes, every acknowledgment carries a bit-mask of the packets seen so far. Since the sender knows which packets have been received, only packets that are actually lost are retransmitted. Thus, selective-acknowledgment allows a source to use bandwidth efficiently.
Reference: [KESH91] <author> S. Keshav, </author> <title> ``A Control-Theoretic Approach to Flow Control,'' </title> <journal> Computer Communication Review, </journal> <volume> Vol. 21, No. </volume> <month> 4 (September </month> <year> 1991), </year> <pages> pp. 3-15. </pages>
Reference-contexts: This is why, in Fig. 3, the achievable goodput is around 50%, instead of around 100%. In order to achieve better goodput, we not only need smarter retransmission, but also better flow control. In this section, we study sources that implement both SMART, and Packet-Pair flow control <ref> [KESH91, KESH95] </ref>. Packet-Pair is a rate-based flow control scheme designed for networks of round-robin servers. It measures the bottleneck service rate by sending all data in the form of back-to-back pairs, and measuring their inter-ack spacing.
Reference: [KESH95] <author> S. Keshav, </author> <title> ``Packet-Pair Flow Control,'' </title> <journal> submitted to IEEE/ACM Transactions on Networking. </journal>
Reference-contexts: This is why, in Fig. 3, the achievable goodput is around 50%, instead of around 100%. In order to achieve better goodput, we not only need smarter retransmission, but also better flow control. In this section, we study sources that implement both SMART, and Packet-Pair flow control <ref> [KESH91, KESH95] </ref>. Packet-Pair is a rate-based flow control scheme designed for networks of round-robin servers. It measures the bottleneck service rate by sending all data in the form of back-to-back pairs, and measuring their inter-ack spacing. <p> If the network does not provide round-robin queueing but does give explicit rate feedback through the use of RM cells [BONO95], a Packet-Pair source would simply use this rate instead of making its own rate estimates. A detailed study of Packet-Pair performance can be found in <ref> [KESH95] </ref>. Packet-Pair + SMART, in the same scenario as before.
Reference: [LAKS94] <author> T. V. Lakshman and U. Madhow, </author> <title> ``Performance Analysis of Window-Based Flow Control using TCP/IP: The Effect of High Bandwidth-Delay Products and Random Loss,'' IFIP Transactions C-26, High Performance Networking V, </title> <publisher> North-Holland (1994), </publisher> <pages> pp. 135-150. </pages>
Reference-contexts: Here, we are interested in seeing how well TCP does with random losses. The behavior of TCP, both Tahoe and Reno versions, under random losses has been extensively studied in <ref> [LAKS94] </ref>. The following argument displays the important parameter for the small-loss case. <p> Thus, for sufficiently small losses, the fractional reduction in goodput is rW 2 / 4, where W is the number of packets in a round-trip window. Of course the throughput doesn't entirely vanish if rW 2 / 4 is greater than 1, but as Lakshman and Madhow have shown <ref> [LAKS94] </ref>, the performance of TCP with random packet drops is poor if rW 2 is large. By way of January 26, 1996 - 10 - illustration, if W = 100 packets and the one-way loss rate r = 1 %, the parameter rW 2 / 4 = 25.
Reference: [LAW82] <author> Averill M. Law and W. David Kelton, </author> <title> Simulation Modeling and Analysis, </title> <publisher> (McGraw-Hill, </publisher> <address> New York, </address> <year> 1982), </year> <pages> pp. 145-151. </pages>
Reference-contexts: To estimate the reliability of the simulator output, we went through the usual procedure of taking a sample of n values of goodput corresponding to n = 20 intervals. We computed a sample mean X _ _ variance s 2 , according to <ref> [LAW82] </ref>, X = ( 1 / n ) S X i . (2) 2 n (n - 1 ) i = 1 n _ _ The intervals ( X _ _ _ _ + 1. 96 s ) are plotted on Fig. 2.
Reference: [SCHW77] <author> M. Schwartz, </author> <title> Computer-Communication Network Design and Analysis, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ (1977). </address>
Reference-contexts: Typically, the receiver writes the cumulative acknowledgment (ack) number in the ack header: this is the last in-sequence packet it has received, and is the one smaller than the left edge of the error control window. In strict GBN, on a timeout, the source retransmits the entire outstanding window <ref> [SCHW77] </ref>. This has the advantage of being conservative, because the source treats every loss as a burst loss, but uses bandwidth inefficiently. Moreover, loss recovery depends on a timer, which is usually hard to set [ZHAN86].
Reference: [WRIG95] <author> G. R. Wright and W. R. </author> <title> Stevens, </title> <journal> TCP/IP Illustrated, </journal> <volume> Vol. 2, </volume> <publisher> Addison-Wesley, </publisher> <address> Reading, MA (1995). </address>
Reference-contexts: If the timer is set too low, the source retransmits packets unnecessarily; if set too high, it wastes time, waiting for a timeout. Some of this inefficiency is avoided by modified versions of GBN, as in TCP <ref> [WRIG95] </ref>. In these schemes, on a timeout, the source marks the entire window eligible for retransmission, but flow control ensures that the source retransmits only the first packet in the window. <p> When a packet arrives that would cause the total buffer space to overflow, the arriving packet is discarded. The destination acknowledges every received packet with an acknowledgment of length A. Sources measure round-trip-times from the acknowledgments, smoothing them with an exponential averaging filter, as in TCP <ref> [WRIG95] </ref>. The timeout value is set to twice the smoothed round-trip-time. The sources do GBN retransmission of the entire outstanding window on a timeout, simultaneously doubling the timeout value.

References-found: 9

