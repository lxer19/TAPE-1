URL: ftp://ftp.cs.kun.nl/pub/SoftwEng.InfSyst/articles/PopOpMap.ps.Z
Refering-URL: http://www.sci.kun.nl/afdis/publist.html
Root-URL: 
Title: Transformation of Database Populations and Operations from the Conceptual to the Internal Level Transformation of
Author: P. van Bommel Gy. Kovacs A. Micsik P. van Bommel, Gy. Kovacs, and A. Micsik. 
Note: Published as:  For each  
Date: April 18, 1994  
Pubnum: Vol.19(2),pages:175-191,1994.  
Abstract: In this paper we describe a framework for the automatic transformation of databases from the conceptual to the internal level. Our approach fits in with the ANSI/SPARC three level architecture for database management systems. The framework consists of three components: structures (database schemata), populations (database contents) and operations (database manipulations). On the conceptual level we describe these components for modelling techniques, such as ER, NIAM and the Binary Relationship Model. On the internal level we focus on (nested) relational models. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A.V. Aho, J.E. Hopcroft, and J.D. Ullman. </author> <title> Data structures and algorithms. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1983. </year>
Reference-contexts: However, we do aim at a framework for database transformation from the conceptual to the internal level, in which the essential features are captured. We therefore adopt three notions playing a central role in the field of computer algorithms: data structure, data value and data operation (see e.g. <ref> [1] </ref>, [19]). Usually, the conceptual and internal aspects mentioned earlier are considered in relation to these notions. The framework we describe specifies these three notions on both the conceptual and the internal level, and provides a systematic transformation. The organization of this paper is as follows.
Reference: [2] <author> A. Amikam. </author> <title> On the automatic generation of optimal internal schemata. </title> <journal> Information Systems, </journal> <volume> 10(1) </volume> <pages> 37-45, </pages> <year> 1985. </year>
Reference-contexts: 1 Introduction Database transformations have been extensively studied in literature (see e.g. <ref> [2] </ref>, [3], [16], [20], [21], [22]). It is found that these transformations involve far more problems than just schema translation.
Reference: [3] <author> A.D. Atri and D. Sacca. </author> <title> Equivalence and mapping of database schemes. </title> <booktitle> In Proceedings of the Tenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 187-195, </pages> <year> 1984. </year>
Reference-contexts: 1 Introduction Database transformations have been extensively studied in literature (see e.g. [2], <ref> [3] </ref>, [16], [20], [21], [22]). It is found that these transformations involve far more problems than just schema translation.
Reference: [4] <author> D.S. Batory and C.C. Gotlieb. </author> <title> A unifying model of physical databases. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 7(4) </volume> <pages> 509-539, </pages> <month> December </month> <year> 1982. </year>
Reference-contexts: Furthermore, high level information languages may be used for data definition and manipulation (see e.g. [11], [17], [14]). Internal models represent the storage structure of the database (see e.g. <ref> [4] </ref>, [26], [28] ). As a consequence these models deal with (nested) tables, data dependencies, access path selection, hashing, B-trees and query optimization.
Reference: [5] <author> P. van Bommel. </author> <title> Experiences with EDO: an Evolutionary Database Optimizer. </title> <journal> Data & Knowledge Engineering. </journal> <note> To appear. </note>
Reference-contexts: The approach is currently being implemented in a prototype database optimizer. This optimizer performs a probabilistic search through the space of all possible internal representations of a given conceptual model. For more details, we refer to [6], [10], <ref> [5] </ref> and [7]. Acknowledgement We would like to thank Th.P. van der Weide and E.D. Falkenberg of the Department of Information Systems, University of Nijmegen, The Netherlands, for their constructive discussions and comments on this research. The remarks of the anonymous referees resulted in many improvements.
Reference: [6] <author> P. van Bommel. </author> <title> A Randomised Schema Mutator for Evolutionary Database Optimisation. </title> <journal> The Australian Computer Journal, </journal> <volume> 25(2) </volume> <pages> 61-69, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Next we describe the transformation of conceptual operations into internal operations. Our approach is based on the Predicator Model ([8]), a formal definition of data models with an underlying object-role structure. For more details about the Predicator Model, see also <ref> [6] </ref>, [9], [10], [18], [29]. 2 Framework for database transformation In this section we describe a general framework for database transformation. Let 1 be a structure description of a database. Suppose we perform a transformation resulting in a new structure description, say 2 . <p> A `top' in a node is an anchor, and thus there can be only one `top' per node. A `bottom' in a node is a hook. Obviously there may be several hooks in the same node. In <ref> [6] </ref> and [10] it was shown that our concept of tree representations is similar to the concept of nested relations (also called non first normal form or NF 2 ), as discussed in [13] and [26]. <p> The approach is currently being implemented in a prototype database optimizer. This optimizer performs a probabilistic search through the space of all possible internal representations of a given conceptual model. For more details, we refer to <ref> [6] </ref>, [10], [5] and [7]. Acknowledgement We would like to thank Th.P. van der Weide and E.D. Falkenberg of the Department of Information Systems, University of Nijmegen, The Netherlands, for their constructive discussions and comments on this research. The remarks of the anonymous referees resulted in many improvements.
Reference: [7] <author> P. van Bommel. </author> <title> Database Design Modifications based on Conceptual Modelling. </title> <editor> In H. Kan-gassalo and H. Jaakkola, editors, </editor> <booktitle> Information Modelling and Knowledge Bases V, </booktitle> <address> Amsterdam, The Netherlands, 1993. </address> <publisher> IOS Press. In Press. </publisher>
Reference-contexts: The approach is currently being implemented in a prototype database optimizer. This optimizer performs a probabilistic search through the space of all possible internal representations of a given conceptual model. For more details, we refer to [6], [10], [5] and <ref> [7] </ref>. Acknowledgement We would like to thank Th.P. van der Weide and E.D. Falkenberg of the Department of Information Systems, University of Nijmegen, The Netherlands, for their constructive discussions and comments on this research. The remarks of the anonymous referees resulted in many improvements.
Reference: [8] <author> P. van Bommel, A.H.M. ter Hofstede, and Th.P. van der Weide. </author> <title> Semantics and verification of object-role models. </title> <journal> Information Systems, </journal> <volume> 16(5) </volume> <pages> 471-495, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: As conceptual and internal models are used for different purposes, their capabilities are also quite different. We summarize the possibilities of both kinds of models. Conceptual models directly represent the semantics of the data to be handled by the system (e.g. <ref> [8] </ref>, [12], [21], [24]). For this purpose a large variety of constraints is used along with generalization and specialization of object types and objectification of fact types (relationship types). Furthermore, high level information languages may be used for data definition and manipulation (see e.g. [11], [17], [14]). <p> In this paper we discuss several basic population rules and consider their violation for each operation we introduce. Usually, more advanced rules can be specified by an information analyst, for example constraints involving uniqueness and mandatory roles, and subset constraints (see <ref> [8] </ref>, [24]). An elaborate treatment of these constraints is outside the scope of this paper. Some aspects will be discussed in section 3.3. 3 Conceptual data models and internal representations In this section we consider the definition of conceptual data models and their internal representa tions. <p> Next we consider uniqueness constraints. The meaning of a uniqueness constraint is similar to the notion of a key (see e.g. <ref> [8] </ref>). As a consequence, presence or absence of a uniqueness constraint will not cause an internal representation to be illegal. However, a special situation occurs if the hook of a fact type is unique. Then the subtable corresponding to that fact type is flat rather than nested.
Reference: [9] <author> P. van Bommel and Th.P. van der Weide. </author> <title> Reducing the search space for conceptual schema transformation. </title> <journal> Data & Knowledge Engineering, </journal> <volume> 8 </volume> <pages> 269-292, </pages> <year> 1992. </year>
Reference-contexts: Next we describe the transformation of conceptual operations into internal operations. Our approach is based on the Predicator Model ([8]), a formal definition of data models with an underlying object-role structure. For more details about the Predicator Model, see also [6], <ref> [9] </ref>, [10], [18], [29]. 2 Framework for database transformation In this section we describe a general framework for database transformation. Let 1 be a structure description of a database. Suppose we perform a transformation resulting in a new structure description, say 2 . <p> These conditions will guarantee the wellformedness of a tree representation with respect to a specific information structure. They do not specify the generation process of tree representations. In <ref> [9] </ref> a generation algorithm was described. This algorithm yields all possible tree representations for a given information structure. Several guidance parameters were introduced in order to exclude candidates with undesirable properties from the generation process. <p> Note that several other tree representations are possible for the same information structure. Note furthermore that the tree representation in figure 3 consists of only one tree. In general, a tree representation consists of a number of trees. In <ref> [9] </ref> it was shown that the following property can 4 ' $ ffi p & % n 3 C ' $ ffi t ' $ ffi @ r & % n 5 E @ @ 6 f g g be derived from the wellformedness conditions discussed above, in combination with the <p> These constraints are of vital importance for the conceptual information structure, since they are used for identification purposes ([8],[24]). Furthermore, these constraints are important for internal representations, because several basic properties of these representations can be derived from them (see e.g. <ref> [9] </ref>). First we consider total role constraints. A total role constraint for predicator p expresses that each instance of Base (p) must occur in at least one instance of Fact (p). For an internal representation containing predicator p this has the following consequences: 1. <p> However, a special situation occurs if the hook of a fact type is unique. Then the subtable corresponding to that fact type is flat rather than nested. More details and several examples are found in <ref> [9] </ref>. 6 project budget dollars project involvement duration person coworkership department 4 Populations In this section we discuss populations (instantiations) of information structures, tree representations, and their relationship. We first discuss the population of information structures (4.1). Then we introduce populations for tree representations (4.2).
Reference: [10] <author> P. van Bommel and Th.P. van der Weide. </author> <title> Towards Database Optimization by Evolution. In A.K. </title> <editor> Majumdar and N. Prakash, editors, </editor> <booktitle> Proceedings of the International Conference on Information Systems and Management of Data (CISMOD 92), </booktitle> <pages> pages 273-287, </pages> <address> Bangalore, India, </address> <month> July </month> <year> 1992. </year> <month> 17 </month>
Reference-contexts: Next we describe the transformation of conceptual operations into internal operations. Our approach is based on the Predicator Model ([8]), a formal definition of data models with an underlying object-role structure. For more details about the Predicator Model, see also [6], [9], <ref> [10] </ref>, [18], [29]. 2 Framework for database transformation In this section we describe a general framework for database transformation. Let 1 be a structure description of a database. Suppose we perform a transformation resulting in a new structure description, say 2 . <p> A `top' in a node is an anchor, and thus there can be only one `top' per node. A `bottom' in a node is a hook. Obviously there may be several hooks in the same node. In [6] and <ref> [10] </ref> it was shown that our concept of tree representations is similar to the concept of nested relations (also called non first normal form or NF 2 ), as discussed in [13] and [26]. <p> Obviously, the resulting population of the tree representation satisfies the Partitioning Rule and the Fitting Rule. In <ref> [10] </ref> this was used to estimate the expected storage requirements for a given tree representation. Example 4.2 Let I be the information structure from figure 2 and let T be the tree representation from figure 3. We transform the population of I into a population of T . <p> The approach is currently being implemented in a prototype database optimizer. This optimizer performs a probabilistic search through the space of all possible internal representations of a given conceptual model. For more details, we refer to [6], <ref> [10] </ref>, [5] and [7]. Acknowledgement We would like to thank Th.P. van der Weide and E.D. Falkenberg of the Department of Information Systems, University of Nijmegen, The Netherlands, for their constructive discussions and comments on this research. The remarks of the anonymous referees resulted in many improvements.
Reference: [11] <author> A. Borgida. </author> <title> Features of Languages for the Development of Information Systems at the Con--ceptual Level. </title> <journal> IEEE Software, </journal> <pages> pages 63-72, </pages> <month> January </month> <year> 1985. </year>
Reference-contexts: For this purpose a large variety of constraints is used along with generalization and specialization of object types and objectification of fact types (relationship types). Furthermore, high level information languages may be used for data definition and manipulation (see e.g. <ref> [11] </ref>, [17], [14]). Internal models represent the storage structure of the database (see e.g. [4], [26], [28] ). As a consequence these models deal with (nested) tables, data dependencies, access path selection, hashing, B-trees and query optimization.
Reference: [12] <author> P.P. Chen. </author> <title> The Entity-Relationship Model: Toward a Unified View of Data. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 1(1) </volume> <pages> 9-36, </pages> <month> March </month> <year> 1976. </year>
Reference-contexts: As conceptual and internal models are used for different purposes, their capabilities are also quite different. We summarize the possibilities of both kinds of models. Conceptual models directly represent the semantics of the data to be handled by the system (e.g. [8], <ref> [12] </ref>, [21], [24]). For this purpose a large variety of constraints is used along with generalization and specialization of object types and objectification of fact types (relationship types). Furthermore, high level information languages may be used for data definition and manipulation (see e.g. [11], [17], [14]). <p> We first discuss conceptual data models (3.1). Then we define a mechanism for representing such conceptual models on the internal level (3.2). 3.1 The conceptual model We restrict ourselves to conceptual data modelling techniques with an underlying object-role structure (e.g. ER <ref> [12] </ref>, NIAM [21], [24] and the Binary Relationship Model [20], [27]). The information structure in these models consists of the following basic components ([8], [29]): 1. A set O of object types. For example, in figure 2 we have A 2 O.
Reference: [13] <author> L.S. Colby. </author> <title> A recursive algebra for nested relations. </title> <journal> Information Systems, </journal> <volume> 15(5) </volume> <pages> 567-582, </pages> <year> 1990. </year>
Reference-contexts: Obviously there may be several hooks in the same node. In [6] and [10] it was shown that our concept of tree representations is similar to the concept of nested relations (also called non first normal form or NF 2 ), as discussed in <ref> [13] </ref> and [26]. In order to demonstrate this, we give a practical example. ~ dollars ~ project ~ dura tion ~ person ~ depart ment budget involvement coworkership p q r t u v Example 3.3 Consider the information structure in figure 4. <p> When no confusion is likely to occur, t may simply be written as ha 1 ; b 1 i or hb 1 ; a 1 i. 4.2 Tree population In this section we introduce how tree representations are populated. Our way of populating tree representations is analogous with <ref> [13] </ref>, [25] and [26], where the population of a nested relation consists of nested tuples. We describe such tuples in terms of nodes in the forest. A population of a tree representation T assigns to each node m 2 N a set of values of the population of Base (m).
Reference: [14] <author> O.M.F. De Troyer, R. Meersman, and F. Ponsaert. </author> <title> RIDL User Guide. Research report, International Centre for Information Analysis Services, Control Data Belgium, </title> <publisher> Inc., </publisher> <address> Brussels, Belgium, </address> <year> 1984. </year>
Reference-contexts: For this purpose a large variety of constraints is used along with generalization and specialization of object types and objectification of fact types (relationship types). Furthermore, high level information languages may be used for data definition and manipulation (see e.g. [11], [17], <ref> [14] </ref>). Internal models represent the storage structure of the database (see e.g. [4], [26], [28] ). As a consequence these models deal with (nested) tables, data dependencies, access path selection, hashing, B-trees and query optimization. <p> Furthermore both object type and role are specified 3 by a predicator, although for transformational purposes only the object type is necessary. Role names are especially interesting for conceptual data manipulation languages, such as RIDL <ref> [14] </ref> and LISA-D [17]. ~ A ~ C ~ E s a 1 b 1 b 1 b 1 c 2 d 1 d 2 d 2 e 1 Object types can be populated with instances. <p> This elementary search action is an example of a low-level action, to be used when queries on information structures are performed. They can be applied during the evaluation of path expressions through information structures, occurring in conceptual languages like RIDL <ref> [14] </ref> and LISA-D [17]. Next we consider the transformation of the above search action for information structures into search actions for tree representations of information structures. Let m be the node containing predicator p, and let n be the node containing predicator q.
Reference: [15] <editor> J.J. van Griethuysen, editor. </editor> <title> Concepts and Terminology for the Conceptual Schema and the Information Base. </title> <publisher> Publ. nr. </publisher> <address> ISO/TC97/SC5-N695, </address> <year> 1982. </year>
Reference-contexts: These problems are further increased by the fact that very often the source database model is a conceptual model, which is especially suited to express data semantics, while the target data model is a (traditional) internal model, specifying how the database is actually represented in a computer system (cf. <ref> [15] </ref>). As conceptual and internal models are used for different purposes, their capabilities are also quite different. We summarize the possibilities of both kinds of models. Conceptual models directly represent the semantics of the data to be handled by the system (e.g. [8], [12], [21], [24]).
Reference: [16] <author> T.A. Halpin. </author> <title> A Fact-Oriented Approach to Schema Transformation. </title> <editor> In B. Thalheim, J. Demetrovics, and H.-D. Gerhardt, editors, </editor> <booktitle> MFDBS 91, volume 495 of Lecture Notes in Computer Science, </booktitle> <pages> pages 342-356, </pages> <address> Rostock, Germany, 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: 1 Introduction Database transformations have been extensively studied in literature (see e.g. [2], [3], <ref> [16] </ref>, [20], [21], [22]). It is found that these transformations involve far more problems than just schema translation.
Reference: [17] <author> A.H.M. ter Hofstede, H.A. Proper, and Th.P. van der Weide. </author> <title> Formal definition of a conceptual language for the description and manipulation of information models. </title> <journal> Information Systems, </journal> <volume> 18(7) </volume> <pages> 489-523, </pages> <year> 1993. </year>
Reference-contexts: For this purpose a large variety of constraints is used along with generalization and specialization of object types and objectification of fact types (relationship types). Furthermore, high level information languages may be used for data definition and manipulation (see e.g. [11], <ref> [17] </ref>, [14]). Internal models represent the storage structure of the database (see e.g. [4], [26], [28] ). As a consequence these models deal with (nested) tables, data dependencies, access path selection, hashing, B-trees and query optimization. <p> Furthermore both object type and role are specified 3 by a predicator, although for transformational purposes only the object type is necessary. Role names are especially interesting for conceptual data manipulation languages, such as RIDL [14] and LISA-D <ref> [17] </ref>. ~ A ~ C ~ E s a 1 b 1 b 1 b 1 c 2 d 1 d 2 d 2 e 1 Object types can be populated with instances. <p> This elementary search action is an example of a low-level action, to be used when queries on information structures are performed. They can be applied during the evaluation of path expressions through information structures, occurring in conceptual languages like RIDL [14] and LISA-D <ref> [17] </ref>. Next we consider the transformation of the above search action for information structures into search actions for tree representations of information structures. Let m be the node containing predicator p, and let n be the node containing predicator q. Then the search action is from m to n.
Reference: [18] <author> A.H.M. ter Hofstede and Th.P. van der Weide. </author> <title> Expressiveness in conceptual data modelling. </title> <journal> Data & Knowledge Engineering, </journal> <volume> 10(1) </volume> <pages> 65-100, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: Next we describe the transformation of conceptual operations into internal operations. Our approach is based on the Predicator Model ([8]), a formal definition of data models with an underlying object-role structure. For more details about the Predicator Model, see also [6], [9], [10], <ref> [18] </ref>, [29]. 2 Framework for database transformation In this section we describe a general framework for database transformation. Let 1 be a structure description of a database. Suppose we perform a transformation resulting in a new structure description, say 2 . <p> Firstly, the ER approach ([12]) does not fit as neatly as NIAM ([21], [24]) and the Binary Relationship Model ([20], [27]). Secondly, the definition of complex object types is not straightforward. This problem was considered in <ref> [18] </ref> and it was shown that predicators can be used to define very complex object types, involving e.g. generalization, set types, sequence types and hierarchical decompostion. For more details we refer to [18]. <p> Secondly, the definition of complex object types is not straightforward. This problem was considered in <ref> [18] </ref> and it was shown that predicators can be used to define very complex object types, involving e.g. generalization, set types, sequence types and hierarchical decompostion. For more details we refer to [18]. We believe that our tree representations provide a useful intermediate language between existing conceptual and internal data modelling techniques. However, the approach still has some restrictions. A natural extension of the framework in figure 1 would be the transformation of database constraints.
Reference: [19] <author> E. Horowitz. </author> <title> Programming Languages. </title> <publisher> Springer-Verlag, </publisher> <year> 1983. </year>
Reference-contexts: However, we do aim at a framework for database transformation from the conceptual to the internal level, in which the essential features are captured. We therefore adopt three notions playing a central role in the field of computer algorithms: data structure, data value and data operation (see e.g. [1], <ref> [19] </ref>). Usually, the conceptual and internal aspects mentioned earlier are considered in relation to these notions. The framework we describe specifies these three notions on both the conceptual and the internal level, and provides a systematic transformation. The organization of this paper is as follows.
Reference: [20] <author> I. Kobayashi. </author> <title> Classification and transformations of binary relationship relation schemata. </title> <journal> Information Systems, </journal> <volume> 11(2) </volume> <pages> 109-122, </pages> <year> 1986. </year>
Reference-contexts: 1 Introduction Database transformations have been extensively studied in literature (see e.g. [2], [3], [16], <ref> [20] </ref>, [21], [22]). It is found that these transformations involve far more problems than just schema translation. <p> Then we define a mechanism for representing such conceptual models on the internal level (3.2). 3.1 The conceptual model We restrict ourselves to conceptual data modelling techniques with an underlying object-role structure (e.g. ER [12], NIAM [21], [24] and the Binary Relationship Model <ref> [20] </ref>, [27]). The information structure in these models consists of the following basic components ([8], [29]): 1. A set O of object types. For example, in figure 2 we have A 2 O. Note that we use A as the designation of a type.
Reference: [21] <author> C.M.R. Leung and G.M. Nijssen. </author> <title> Relational database design using the NIAM conceptual schema. </title> <journal> Information Systems, </journal> <volume> 13(2) </volume> <pages> 219-227, </pages> <year> 1988. </year>
Reference-contexts: 1 Introduction Database transformations have been extensively studied in literature (see e.g. [2], [3], [16], [20], <ref> [21] </ref>, [22]). It is found that these transformations involve far more problems than just schema translation. <p> As conceptual and internal models are used for different purposes, their capabilities are also quite different. We summarize the possibilities of both kinds of models. Conceptual models directly represent the semantics of the data to be handled by the system (e.g. [8], [12], <ref> [21] </ref>, [24]). For this purpose a large variety of constraints is used along with generalization and specialization of object types and objectification of fact types (relationship types). Furthermore, high level information languages may be used for data definition and manipulation (see e.g. [11], [17], [14]). <p> We first discuss conceptual data models (3.1). Then we define a mechanism for representing such conceptual models on the internal level (3.2). 3.1 The conceptual model We restrict ourselves to conceptual data modelling techniques with an underlying object-role structure (e.g. ER [12], NIAM <ref> [21] </ref>, [24] and the Binary Relationship Model [20], [27]). The information structure in these models consists of the following basic components ([8], [29]): 1. A set O of object types. For example, in figure 2 we have A 2 O.
Reference: [22] <author> P Lyngbaek and V. Vianu. </author> <title> Mapping a semantic database model to the relational model. </title> <booktitle> In SIGMOD Record, </booktitle> <pages> pages 132-142, </pages> <year> 1987. </year>
Reference-contexts: 1 Introduction Database transformations have been extensively studied in literature (see e.g. [2], [3], [16], [20], [21], <ref> [22] </ref>). It is found that these transformations involve far more problems than just schema translation.
Reference: [23] <author> E. Mendelson. </author> <title> Introduction to Mathematical Logic. </title> <publisher> Wadsworth and Brooks, </publisher> <year> 1987. </year>
Reference: [24] <author> G.M. Nijssen and T.A. Halpin. </author> <title> Conceptual Schema and Relational Database Design: a fact oriented approach. </title> <publisher> Prentice-Hall, </publisher> <address> Sydney, Australia, </address> <year> 1989. </year>
Reference-contexts: As conceptual and internal models are used for different purposes, their capabilities are also quite different. We summarize the possibilities of both kinds of models. Conceptual models directly represent the semantics of the data to be handled by the system (e.g. [8], [12], [21], <ref> [24] </ref>). For this purpose a large variety of constraints is used along with generalization and specialization of object types and objectification of fact types (relationship types). Furthermore, high level information languages may be used for data definition and manipulation (see e.g. [11], [17], [14]). <p> In this paper we discuss several basic population rules and consider their violation for each operation we introduce. Usually, more advanced rules can be specified by an information analyst, for example constraints involving uniqueness and mandatory roles, and subset constraints (see [8], <ref> [24] </ref>). An elaborate treatment of these constraints is outside the scope of this paper. Some aspects will be discussed in section 3.3. 3 Conceptual data models and internal representations In this section we consider the definition of conceptual data models and their internal representa tions. <p> We first discuss conceptual data models (3.1). Then we define a mechanism for representing such conceptual models on the internal level (3.2). 3.1 The conceptual model We restrict ourselves to conceptual data modelling techniques with an underlying object-role structure (e.g. ER [12], NIAM [21], <ref> [24] </ref> and the Binary Relationship Model [20], [27]). The information structure in these models consists of the following basic components ([8], [29]): 1. A set O of object types. For example, in figure 2 we have A 2 O. Note that we use A as the designation of a type. <p> It was shown that this approach can be used appropriately for the transformation of database populations and operations. 16 The use of predicators seems to have several restrictions. Firstly, the ER approach ([12]) does not fit as neatly as NIAM ([21], <ref> [24] </ref>) and the Binary Relationship Model ([20], [27]). Secondly, the definition of complex object types is not straightforward. This problem was considered in [18] and it was shown that predicators can be used to define very complex object types, involving e.g. generalization, set types, sequence types and hierarchical decompostion.
Reference: [25] <author> M.A. Roth, H.F. Korth, and A. Silberschatz. </author> <title> Extended algebra and calculus for nested relational databases. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 13(4) </volume> <pages> 389-417, </pages> <month> December </month> <year> 1988. </year>
Reference-contexts: When no confusion is likely to occur, t may simply be written as ha 1 ; b 1 i or hb 1 ; a 1 i. 4.2 Tree population In this section we introduce how tree representations are populated. Our way of populating tree representations is analogous with [13], <ref> [25] </ref> and [26], where the population of a nested relation consists of nested tuples. We describe such tuples in terms of nodes in the forest. A population of a tree representation T assigns to each node m 2 N a set of values of the population of Base (m). <p> a population Pop (m) is a set of tuples, where each tuple assigns a unique value to m: 8 t 1 ;t 2 2Pop (m) [t 1 (m) = t 2 (m) ) t 1 = t 2 ] This is referred to as the Partitioning Rule for populations (cf. <ref> [25] </ref>). The value t (m) is called the root value of tuple t. Note that Pop is used with two different kinds of arguments.
Reference: [26] <author> H.J. Schek and M.H. Scholl. </author> <title> The relational model with relation-valued attributes. </title> <journal> Information Systems, </journal> <volume> 11(2) </volume> <pages> 137-147, </pages> <year> 1986. </year>
Reference-contexts: Furthermore, high level information languages may be used for data definition and manipulation (see e.g. [11], [17], [14]). Internal models represent the storage structure of the database (see e.g. [4], <ref> [26] </ref>, [28] ). As a consequence these models deal with (nested) tables, data dependencies, access path selection, hashing, B-trees and query optimization. <p> Obviously there may be several hooks in the same node. In [6] and [10] it was shown that our concept of tree representations is similar to the concept of nested relations (also called non first normal form or NF 2 ), as discussed in [13] and <ref> [26] </ref>. In order to demonstrate this, we give a practical example. ~ dollars ~ project ~ dura tion ~ person ~ depart ment budget involvement coworkership p q r t u v Example 3.3 Consider the information structure in figure 4. <p> Our way of populating tree representations is analogous with [13], [25] and <ref> [26] </ref>, where the population of a nested relation consists of nested tuples. We describe such tuples in terms of nodes in the forest. A population of a tree representation T assigns to each node m 2 N a set of values of the population of Base (m).
Reference: [27] <author> P. Shoval and S. Zohn. </author> <title> Binary-Relationship integration methodology. </title> <journal> Data & Knowledge Engineering, </journal> <volume> 6(3) </volume> <pages> 225-250, </pages> <year> 1991. </year>
Reference-contexts: Then we define a mechanism for representing such conceptual models on the internal level (3.2). 3.1 The conceptual model We restrict ourselves to conceptual data modelling techniques with an underlying object-role structure (e.g. ER [12], NIAM [21], [24] and the Binary Relationship Model [20], <ref> [27] </ref>). The information structure in these models consists of the following basic components ([8], [29]): 1. A set O of object types. For example, in figure 2 we have A 2 O. Note that we use A as the designation of a type. <p> It was shown that this approach can be used appropriately for the transformation of database populations and operations. 16 The use of predicators seems to have several restrictions. Firstly, the ER approach ([12]) does not fit as neatly as NIAM ([21], [24]) and the Binary Relationship Model ([20], <ref> [27] </ref>). Secondly, the definition of complex object types is not straightforward. This problem was considered in [18] and it was shown that predicators can be used to define very complex object types, involving e.g. generalization, set types, sequence types and hierarchical decompostion. For more details we refer to [18].
Reference: [28] <author> J.D. Ullman. </author> <title> Principles of Database and Knowledge-base Systems, volume I. </title> <publisher> Computer Science Press, </publisher> <address> Rockville, Maryland, </address> <year> 1989. </year>
Reference-contexts: Furthermore, high level information languages may be used for data definition and manipulation (see e.g. [11], [17], [14]). Internal models represent the storage structure of the database (see e.g. [4], [26], <ref> [28] </ref> ). As a consequence these models deal with (nested) tables, data dependencies, access path selection, hashing, B-trees and query optimization.
Reference: [29] <author> Th.P. van der Weide, A.H.M. ter Hofstede, and P. van Bommel. Uniquest: </author> <title> Determining the Semantics of Complex Uniqueness Constraints. </title> <journal> The Computer Journal, </journal> <volume> 35(2) </volume> <pages> 148-156, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: Next we describe the transformation of conceptual operations into internal operations. Our approach is based on the Predicator Model ([8]), a formal definition of data models with an underlying object-role structure. For more details about the Predicator Model, see also [6], [9], [10], [18], <ref> [29] </ref>. 2 Framework for database transformation In this section we describe a general framework for database transformation. Let 1 be a structure description of a database. Suppose we perform a transformation resulting in a new structure description, say 2 . <p> ER [12], NIAM [21], [24] and the Binary Relationship Model [20], [27]). The information structure in these models consists of the following basic components ([8], <ref> [29] </ref>): 1. A set O of object types. For example, in figure 2 we have A 2 O. Note that we use A as the designation of a type. As a consequence, A is not the set of object instances considered to belong to that type. 2.
References-found: 29

