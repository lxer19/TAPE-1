URL: file://ftp.cis.ohio-state.edu/pub/tech-report/1993/TR33.ps.gz
Refering-URL: ftp://ftp.cis.ohio-state.edu/pub/tech-report/TRList.html
Root-URL: 
Email: E-mail: ftseng, laig@cis.ohio-state.edu  
Phone: Tel: (614)292-5813, Fax: (614)292-2911  
Title: On the Embedding of a Class of Regular Graphs in a Faulty Hypercube  
Author: Yu-Chee Tseng and Ten-Hwang Lai 
Keyword: Key Words: graph embedding, processor allocation, hypercube, binary-reflected trees, fault tolerance.  
Address: Columbus, Ohio 43210  
Affiliation: Department of Computer and Information Science The Ohio State University  
Abstract: A wide range of graphs with regular structures are shown to be embeddable in an injured hypercube with faulty links. These include rings, linear paths, binomial trees, binary trees, meshes, tori, and many others. Unlike many existing algorithms which are capable of embedding only one type of graphs, our algorithm embeds the above graphs in a unified way, all centered around a notion called edge matrix. In many cases, the degree of fault tolerance offered by the algorithm is optimal or near-optimal.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F. Berman and L. Snyder. </author> <title> On mapping parallel algorithms into parallel architectures. </title> <journal> J. of Parallel and Distrib. Comput., </journal> <volume> 4 </volume> <pages> 439-458, </pages> <year> 1987. </year>
Reference-contexts: 1 Introduction Embedding a guest graph into a host graph, or the graph embedding problem, has long been recognized as being suitable for modeling the problem of processor allocation in a parallel or distributed system <ref> [1, 2] </ref>.
Reference: [2] <author> S. Bokhari. </author> <title> On the mapping problem. </title> <journal> IEEE Trans. on Comput., </journal> <volume> C-30:207-214, </volume> <year> 1981. </year>
Reference-contexts: 1 Introduction Embedding a guest graph into a host graph, or the graph embedding problem, has long been recognized as being suitable for modeling the problem of processor allocation in a parallel or distributed system <ref> [1, 2] </ref>.
Reference: [3] <author> M. Y. Chan and S.-J. Lee. </author> <title> Distributed fault-tolerant embeddings of rings in hypercubes. </title> <journal> J. of Parallel and Distrib. Comput., </journal> <volume> 11 </volume> <pages> 63-71, </pages> <year> 1991. </year>
Reference-contexts: This leads to the problem of embedding a graph is an injured hypercube. Several results on this topic are available in the literature of parallel computing. Algo- rithms for constructing a ring as large as possible in an injured n-cube have been proposed in <ref> [3] </ref>, [17], and [14]. These algorithms are able to tolerate up to n=2, 2n, and fi (2 n=2 ) faulty nodes, respectively.
Reference: [4] <author> M. Y. Chan and S.-J. Lee. </author> <title> Fault-tolerant embeddings of complete binary trees in hypercubes. </title> <journal> IEEE Trans. on Comput., </journal> <volume> 4(3) </volume> <pages> 277-288, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: These algorithms are able to tolerate up to n=2, 2n, and fi (2 n=2 ) faulty nodes, respectively. A level-(n 1) complete binary tree can be embedded in an n-cube with O (n) faulty nodes <ref> [4] </ref>; a better result is available that allows up to fi (n 2 ) faulty nodes [18]. Fault-tolerant embedding of meshes in injured hypercubes was studied in [22]. <p> In this paper, we consider the case where a hypercube has faulty links rather than faulty nodes. It has been suggested (e.g., in <ref> [4, 17, 18] </ref>) that faulty links be treated as faulty nodes: if link hu; vi is faulty then regard either node u or node v as faulty. With this treatment, faulty links are converted to faulty nodes and the above mentioned results are immediately applicable.
Reference: [5] <author> G. Cybenko, D. W. Krumme, and K. N. Venkataraman. </author> <title> Fixed hypercube embedding. Info. Process. </title> <journal> Letts., </journal> <volume> 25 </volume> <pages> 35-39, </pages> <month> April </month> <year> 1987. </year> <month> 19 </month>
Reference-contexts: In general, this problem is computationally difficult. Determining whether an arbitrary graph is embeddable in a hypercube is NP-hard <ref> [5] </ref>, and it remains so even if dilation is allowed [8] or if the guest graph is a tree [19]. In a hypercube of high dimension, the probability of there existing a node/link fault may not be negligible.
Reference: [6] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. </title> <publisher> Freeman, </publisher> <year> 1979. </year>
Reference-contexts: Unfortunately, step 1 is not always doable, and to determine whether the F matrix can be so partitioned is an NP-hard problem (when k = 2 and d 1 = d 2 , the problem becomes the well-known, NP-complete PARTITION Problem <ref> [6] </ref>). One may readily observe that n k is a worst-case upper bound on the number of faulty links that any algorithm can tolerate, since G (X) is a graph of degree greater than or equal to k.
Reference: [7] <author> S. L. Johnsson and C. T. Ho. </author> <title> Optimal broadcasting and personalized communication in hypercubes. </title> <journal> IEEE Trans. on Comput., </journal> <volume> 38(9) </volume> <pages> 1249-68, </pages> <month> Sep. </month> <year> 1989. </year>
Reference-contexts: Two of the most important level-n BR-trees are the length-2 n linear path and the level-n binomial trees y . Binomial trees are useful for implementing broadcasting <ref> [7] </ref> and parallel divide-and-conquer [11] in a hypercube. Note that each level-n BR-tree is an abstract tree isomorphic to a spanning tree in the n-cube. Thus, a ring is not a BR-tree, and a Hamiltonian cycle of an n-cube cannot be described as an edge matrix conforming to Eq. (1).
Reference: [8] <author> Y. M. Kim and T.-H. Lai. </author> <title> The complexity of congestion-1 embedding in a hypercube. </title> <editor> J. </editor> <booktitle> of Algorithm 12, </booktitle> <pages> pages 246-280, </pages> <year> 1991. </year>
Reference-contexts: In general, this problem is computationally difficult. Determining whether an arbitrary graph is embeddable in a hypercube is NP-hard [5], and it remains so even if dilation is allowed <ref> [8] </ref> or if the guest graph is a tree [19]. In a hypercube of high dimension, the probability of there existing a node/link fault may not be negligible.
Reference: [9] <author> T.-H. Lai and W. White. </author> <title> Mapping pyramid algorithms into hypercubes. </title> <journal> J. of Parallel and Distrib. Comput., </journal> <volume> 9(1) </volume> <pages> 42-54, </pages> <year> 1990. </year>
Reference-contexts: Because of the importance and popularity of the hypercube as a network architecture for concurrent computers, the problem of embedding in a hypercube has received much attention from researchers and has been intensively studied for various guest graphs, such as rings [12], trees [20, 21], pyramid <ref> [9] </ref>, and shu*e networks [16]. In general, this problem is computationally difficult. Determining whether an arbitrary graph is embeddable in a hypercube is NP-hard [5], and it remains so even if dilation is allowed [8] or if the guest graph is a tree [19].
Reference: [10] <author> S. Latifi, S. Zheng, and N. Bagherzadeh. </author> <title> Optimal ring embedding in hypercubes with faulty links. </title> <booktitle> In Fault-Tolerant Computing Symp., </booktitle> <pages> pages 178-184, </pages> <year> 1992. </year>
Reference-contexts: For instance, if in some application a user wishes to use as many processors as possible, it is certainly undesirable to give up a processor (node) just because a link connected to it is faulty. Assuming faulty links do not jeopardize their end nodes, it is shown in <ref> [10, 13] </ref> that a ring of length 2 n can be embedded in an n-cube with up to n 2 faulty links. (Such an embedding would be impossible if faulty links are treated as faulty nodes.) In this paper, we considerably extend this result and show that a wide range of <p> Since binomial trees are BR-trees (by Lemma 3) and there exists an (n 1)-resilient embedding of a level-n binomial tree in an n-cube (by Corollary 1), this corollary is proved. 2 The following result has been established in <ref> [10] </ref> in a relatively complicated way. Here we offer a much simpler proof. Corollary 3 If there are no more than n 2 faulty links in the n-cube, then there exists a Hamiltonian cycle in the cube. Proof. By Lemma 4, G (X hc ) is a Hamiltonian cycle.
Reference: [11] <author> V. M. Lo et al. </author> <title> Mapping divide-and-conquer algorithm to parallel architectures. </title> <booktitle> In Int'l Conf. on Parallel Processing, </booktitle> <pages> pages III.128-135, </pages> <year> 1990. </year>
Reference-contexts: Two of the most important level-n BR-trees are the length-2 n linear path and the level-n binomial trees y . Binomial trees are useful for implementing broadcasting [7] and parallel divide-and-conquer <ref> [11] </ref> in a hypercube. Note that each level-n BR-tree is an abstract tree isomorphic to a spanning tree in the n-cube. Thus, a ring is not a BR-tree, and a Hamiltonian cycle of an n-cube cannot be described as an edge matrix conforming to Eq. (1).
Reference: [12] <author> Y. Saad and M. H. Schultz. </author> <title> Topological properties of hypercubes. </title> <journal> IEEE Trans. on Comput., </journal> <volume> 37(7) </volume> <pages> 867-872, </pages> <month> July </month> <year> 1988. </year>
Reference-contexts: Because of the importance and popularity of the hypercube as a network architecture for concurrent computers, the problem of embedding in a hypercube has received much attention from researchers and has been intensively studied for various guest graphs, such as rings <ref> [12] </ref>, trees [20, 21], pyramid [9], and shu*e networks [16]. In general, this problem is computationally difficult. Determining whether an arbitrary graph is embeddable in a hypercube is NP-hard [5], and it remains so even if dilation is allowed [8] or if the guest graph is a tree [19].
Reference: [13] <author> A. Sen, A. Sengupta, and S. Bandyopadhyay. </author> <title> On some topological properties of hyper-cube, incomplete hypercube and supercube. </title> <booktitle> In Int'l Parallel Processing Symp., </booktitle> <pages> pages 636-642, </pages> <year> 1993. </year>
Reference-contexts: For instance, if in some application a user wishes to use as many processors as possible, it is certainly undesirable to give up a processor (node) just because a link connected to it is faulty. Assuming faulty links do not jeopardize their end nodes, it is shown in <ref> [10, 13] </ref> that a ring of length 2 n can be embedded in an n-cube with up to n 2 faulty links. (Such an embedding would be impossible if faulty links are treated as faulty nodes.) In this paper, we considerably extend this result and show that a wide range of
Reference: [14] <author> Y.-C. Tseng and T.-H. Lai. </author> <title> Ring embedding in an injured hypercube. </title> <booktitle> In Int'l Conf. on Parallel Processing, </booktitle> <pages> pages III-149-152, </pages> <year> 1993. </year>
Reference-contexts: This leads to the problem of embedding a graph is an injured hypercube. Several results on this topic are available in the literature of parallel computing. Algo- rithms for constructing a ring as large as possible in an injured n-cube have been proposed in [3], [17], and <ref> [14] </ref>. These algorithms are able to tolerate up to n=2, 2n, and fi (2 n=2 ) faulty nodes, respectively.
Reference: [15] <author> Y.-C. Tseng, T.-H. Lai, and L.-F. Wu. </author> <title> Matrix representation of graph embedding in a hypercube. </title> <journal> J. of Parallel and Distrib. Comput., </journal> <note> To appear. </note>
Reference-contexts: The purpose of this paper is twofold: 1) to report the above new results, and 2) to demonstrate the advantage of representing a subgraph of a hypercube as an edge matrix. In a previous work <ref> [15] </ref>, we introduced the notion of edge matrix as a possible data structure for representing a subgraph of a hypercube (or the embedding of a guest graph in a hypercube). <p> The following lemma is also straightforward and can be easily verified. Lemma 2 For two edge matrices X and Y , if X $ Y , then (X) C $ (Y ) C, for any column-permutation and any binary vector C. 2.3 Binary-Reflected Trees The next lemma, proved in <ref> [15] </ref>, describes the edge matrices of a wide range of trees in the n-cube. Lemma 3 [15] Let X br = B B B B ~ fl fl : : : fl fl b 3;1 b 3;2 ~ : : : fl fl b n1;1 b n1;2 b n1;3 : : <p> edge matrices X and Y , if X $ Y , then (X) C $ (Y ) C, for any column-permutation and any binary vector C. 2.3 Binary-Reflected Trees The next lemma, proved in <ref> [15] </ref>, describes the edge matrices of a wide range of trees in the n-cube. Lemma 3 [15] Let X br = B B B B ~ fl fl : : : fl fl b 3;1 b 3;2 ~ : : : fl fl b n1;1 b n1;2 b n1;3 : : : ~ fl 1 C C C A where each b i;j is 0 or 1. <p> Proof. A level-n complete binary tree can be embedded into a level-n binomial tree with congestion 2 and dilation 2 (see <ref> [15] </ref>). Since binomial trees are BR-trees (by Lemma 3) and there exists an (n 1)-resilient embedding of a level-n binomial tree in an n-cube (by Corollary 1), this corollary is proved. 2 The following result has been established in [10] in a relatively complicated way.
Reference: [16] <author> R. Varadarajan. </author> <title> Embedding shu*e networks in hypercubes. </title> <journal> J. of Parallel and Distrib. Comput., </journal> <volume> 11 </volume> <pages> 252-256, </pages> <year> 1991. </year>
Reference-contexts: Because of the importance and popularity of the hypercube as a network architecture for concurrent computers, the problem of embedding in a hypercube has received much attention from researchers and has been intensively studied for various guest graphs, such as rings [12], trees [20, 21], pyramid [9], and shu*e networks <ref> [16] </ref>. In general, this problem is computationally difficult. Determining whether an arbitrary graph is embeddable in a hypercube is NP-hard [5], and it remains so even if dilation is allowed [8] or if the guest graph is a tree [19].
Reference: [17] <author> A. Wang and R. Cypher. </author> <title> Fault-tolerant embeddings of rings, meshes, and tori in hypercubes. </title> <booktitle> In IEEE Symp. on Parallel and Distributed Processing, </booktitle> <pages> pages 20-29, </pages> <year> 1992. </year>
Reference-contexts: This leads to the problem of embedding a graph is an injured hypercube. Several results on this topic are available in the literature of parallel computing. Algo- rithms for constructing a ring as large as possible in an injured n-cube have been proposed in [3], <ref> [17] </ref>, and [14]. These algorithms are able to tolerate up to n=2, 2n, and fi (2 n=2 ) faulty nodes, respectively. <p> In this paper, we consider the case where a hypercube has faulty links rather than faulty nodes. It has been suggested (e.g., in <ref> [4, 17, 18] </ref>) that faulty links be treated as faulty nodes: if link hu; vi is faulty then regard either node u or node v as faulty. With this treatment, faulty links are converted to faulty nodes and the above mentioned results are immediately applicable.
Reference: [18] <author> A. Wang, R. Cypher, and E. Mayr. </author> <title> Embedding complete binary trees in faulty hypercubes. </title> <booktitle> In IEEE Symp. on Parallel and Distributed Processing, </booktitle> <pages> pages 112-119, </pages> <year> 1991. </year> <month> 20 </month>
Reference-contexts: A level-(n 1) complete binary tree can be embedded in an n-cube with O (n) faulty nodes [4]; a better result is available that allows up to fi (n 2 ) faulty nodes <ref> [18] </ref>. Fault-tolerant embedding of meshes in injured hypercubes was studied in [22]. <p> In this paper, we consider the case where a hypercube has faulty links rather than faulty nodes. It has been suggested (e.g., in <ref> [4, 17, 18] </ref>) that faulty links be treated as faulty nodes: if link hu; vi is faulty then regard either node u or node v as faulty. With this treatment, faulty links are converted to faulty nodes and the above mentioned results are immediately applicable.
Reference: [19] <author> A. Wanger and D. Corneil. </author> <title> Embedding trees in the hypercube is NP-complete. </title> <journal> SIAM J. of Comput., </journal> <volume> 19(4) </volume> <pages> 570-590, </pages> <year> 1990. </year>
Reference-contexts: In general, this problem is computationally difficult. Determining whether an arbitrary graph is embeddable in a hypercube is NP-hard [5], and it remains so even if dilation is allowed [8] or if the guest graph is a tree <ref> [19] </ref>. In a hypercube of high dimension, the probability of there existing a node/link fault may not be negligible.
Reference: [20] <author> A. S. Wanger. </author> <title> Embedding arbitrary binary trees in a hypercube. </title> <journal> J. of Parallel and Distrib. Comput., </journal> <volume> 7 </volume> <pages> 503-520, </pages> <year> 1989. </year>
Reference-contexts: Because of the importance and popularity of the hypercube as a network architecture for concurrent computers, the problem of embedding in a hypercube has received much attention from researchers and has been intensively studied for various guest graphs, such as rings [12], trees <ref> [20, 21] </ref>, pyramid [9], and shu*e networks [16]. In general, this problem is computationally difficult. Determining whether an arbitrary graph is embeddable in a hypercube is NP-hard [5], and it remains so even if dilation is allowed [8] or if the guest graph is a tree [19].
Reference: [21] <author> A. Y. Wu. </author> <title> Embedding of tree networks in hypercubes. </title> <journal> J. of Parallel and Distrib. Comput., </journal> <volume> 2 </volume> <pages> 238-249, </pages> <year> 1985. </year>
Reference-contexts: Because of the importance and popularity of the hypercube as a network architecture for concurrent computers, the problem of embedding in a hypercube has received much attention from researchers and has been intensively studied for various guest graphs, such as rings [12], trees <ref> [20, 21] </ref>, pyramid [9], and shu*e networks [16]. In general, this problem is computationally difficult. Determining whether an arbitrary graph is embeddable in a hypercube is NP-hard [5], and it remains so even if dilation is allowed [8] or if the guest graph is a tree [19].
Reference: [22] <author> P.-J. Yang, S.-B. Tien, and C. S. Raghavendra. </author> <title> Embedding of multidimensional meshes on to faulty hypercubes. </title> <booktitle> In Int'l Conf. on Parallel Processing, </booktitle> <pages> pages I-571-574, </pages> <year> 1991. </year> <month> 21 </month>
Reference-contexts: A level-(n 1) complete binary tree can be embedded in an n-cube with O (n) faulty nodes [4]; a better result is available that allows up to fi (n 2 ) faulty nodes [18]. Fault-tolerant embedding of meshes in injured hypercubes was studied in <ref> [22] </ref>. All these results are concerned with graph embedding in a hypercube with faulty nodes, where whenever a node is faulty, it is commonly assumed that not only the node itself but all the links incident upon it are not available.
References-found: 22

