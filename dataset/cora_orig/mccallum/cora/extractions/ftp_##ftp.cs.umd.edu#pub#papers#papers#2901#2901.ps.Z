URL: ftp://ftp.cs.umd.edu/pub/papers/papers/2901/2901.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Title: Improving the Visualization of Hierarchies with Treemaps: Design Issues and Experimentation  
Phone: 20742  
Address: College Park, MD  
Affiliation: Department of Computer Science Human-Computer Interaction Laboratory University of Maryland,  
Date: October 1992 Page 1  
Note: To Appear in the Proceedings of the IEEE Conference on Visualization,  
Abstract: Controlled experiments with novice treemap users and real data highlight the strengths of treemaps and provide direction for improvement. Issues discussed include experimental results, layout algorithms, nesting offsets, labeling, animation and small multiple displays. Treemaps prove to be a potent tool for hierarchy display. The principles discussed are applicable to many information visualization situations. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Beard and J. Walker II. </author> <title> Navigational techniques to improve the display of large two-dimensional spaces. </title> <journal> Behavior & Information Technology, </journal> <volume> 9(6) </volume> <pages> 451-466, </pages> <year> 1990. </year>
Reference-contexts: When these limits are reached, navigational techniques such as scrolling or panning must be used, creating the potential for loss of context <ref> [1] </ref>. Common character-based applications use a set number of lines to display the hierarchy. Graphical tree diagrams have more leeway: depending upon the drawing algorithm and the size of the display space, a hundred or so nodes can be adequately represented on screen without the need for panning or zooming.
Reference: [2] <author> A. Buja, J. McDonald, J. Michalak, and W. Stuetzle. </author> <title> Interactive Data Visualization using Focusing and Linking. </title> <booktitle> IEEE Visualization 91, </booktitle> <pages> 156-163, </pages> <year> 1991. </year>
Reference-contexts: Issues here relate to appropriate highlighting mechanisms and feedback to users. An offshoot of this involves implementation of dynamic queries <ref> [16, 2] </ref>, which allow users to generate a large number of queries in a short period of time via direct manipulation with sliders or other widgets. 4.2 Aspect Ratio Perception Problem Treemaps use a single numeric weight to determine the display area of a node in the hierarchy.
Reference: [3] <author> D. Cox. </author> <title> The art of scientific visualization. </title> <publisher> Academic Computing, </publisher> <editor> p. </editor> <volume> 20, </volume> <month> March </month> <year> 1990. </year>
Reference-contexts: User control over the color is of primary concern as color preference varies by task and individual. Aesthetically pleasing color schemes can be preconfigured for the user and accompanied by a color key or chart for user reference <ref> [3] </ref>. One area of color control addresses the problem of color deficiencies and monochrome monitors: providing a transformation to a gray scale or patterns alleviates the problem. <p> The height dimen sion can code one more variable, and the location of the apex, To Appear in the Proceedings of the IEEE Conference on Visualization, October 1992 Page 6 apex skew, and the four sides can code additional properties in a manner similar to datajacks <ref> [3, 5] </ref>. Leaf nodes become pyramids and internal nodes become flat top plateaus. Figure 6 illustrates 2 1/2-D treemaps. True 3-D treemaps would be volumes partitioned on all 3 dimensions. Free movement of the perspective point can provide natural zooming and perspective.
Reference: [4] <author> C. Ding and P. Mateti. </author> <title> A framework for the automated drawing of data structure diagrams. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(5) </volume> <pages> 543-557, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: Current algorithmic research is concentrating on minimizing recomputation in dynamic environments. 4.4 2 1/2-D Treemaps A third dimension can be added by using the 2-D rectangular area as the base of a 3-D solid. Increasing the visual vocabulary can provide for richer information resolution <ref> [4] </ref>. Simply extruding the rectangles produces a Manhat-tan-like scene, where rectangular solids obscure one another. Using a single point in the third dimension creates pyramids, which do not obscure each other as much.
Reference: [5] <author> R. Ellson. </author> <title> Visualization at work. </title> <publisher> Academic Computing, </publisher> <editor> p. </editor> <volume> 26, </volume> <month> March </month> <year> 1990. </year>
Reference-contexts: The height dimen sion can code one more variable, and the location of the apex, To Appear in the Proceedings of the IEEE Conference on Visualization, October 1992 Page 6 apex skew, and the four sides can code additional properties in a manner similar to datajacks <ref> [3, 5] </ref>. Leaf nodes become pyramids and internal nodes become flat top plateaus. Figure 6 illustrates 2 1/2-D treemaps. True 3-D treemaps would be volumes partitioned on all 3 dimensions. Free movement of the perspective point can provide natural zooming and perspective.
Reference: [6] <author> W. Feeney. </author> <title> Gray Scale Diagrams as Business Charts. </title> <booktitle> IEEE Visualization 91, </booktitle> <pages> 140-147, </pages> <year> 1991. </year>
Reference-contexts: One area of color control addresses the problem of color deficiencies and monochrome monitors: providing a transformation to a gray scale or patterns alleviates the problem. When distinct hues are eliminated, information can be conveyed via gray scale <ref> [6] </ref>. 3.3 Node Filtering Filtering nodes allows users to concentrate on features of interest. In hierarchies users may wish to see only those nodes satisfying certain properties.
Reference: [7] <author> G. Furnas. </author> <title> Generalized fisheye views. </title> <booktitle> ACM CHI86, </booktitle> <pages> 16-23. </pages> <year> 1986. </year>
Reference-contexts: This concept of emphasizing importance through size is similar to the fisheye concept <ref> [7] </ref>, though there are multiple points of interest in treemaps. As the top-down approach to tiling planar areas limits recursive subdivision to one dimension, acceptable results are produced only for hierarchies of limited size. <p> Size allowed the users to concentrate on products of interest (products that generated the most revenue) <ref> [7] </ref> and quickly answer questions related to high revenue; a hindrance to this was the aspect ratio problem mentioned earlier where products of similar revenue had to be compared manually.
Reference: [8] <author> T. Henry and S. Hudson. </author> <title> Viewing large graphs. </title> <type> Technical Report 90-13, </type> <institution> University of Arizona, </institution> <month> May </month> <year> 1990. </year>
Reference-contexts: GEnie experiment using a subset of the product data. The 3.2 Attribute Mapping User confidence in the treemap application may be improved by providing the user more control over attributes which determine node size (weight) and color <ref> [8, 15] </ref>. Figure 2, for example, displays the same treemap as in Figure 3, except that all leaf nodes have the same weight (the areas of the leaf nodes bounding boxes are all the same).
Reference: [9] <author> B. Johnson and B. Shneiderman. </author> <title> Tree-Maps: A Space-Filling Approach to the Visualization of Hierarchical Information Structures. </title> <booktitle> IEEE Visualization 91, </booktitle> <pages> 284-291, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction Treemaps are a novel method for presenting large hierarchical information spaces on planar display areas of limited size <ref> [9, 13] </ref>. A treemap is generated by recursively slicing the screen into rectangular bounding boxes to convey global structure (hierarchy). Individual node information is presented through display attributes such as bounding box size and fill color. <p> Section 4 offers a sampling of current research directions. Section 5 describes the experiments conducted with treemaps. Section 6 is the conclusion. 2 Partitioning Algorithms The partitioning of rectangular screen region into a treemap can take one of two approaches: the slice-and-dice approach as previously described in <ref> [9] </ref> and the top-down approach [12], which is discussed below. 2.1 Top-Down Development of the top-down algorithm was motivated by Brian Johnson brianj@cs.umd.edu David Turo turo@cs.umd.edu the desire to preserve the structure (and user familiarity) of traditional tree diagrams, which flow from one side of the screen to the other (usually <p> Much larger hierarchies, greater than 1,000 nodes, can be displayed (Figure 8). The slice-and-dice algorithm is presented and discussed in detail in <ref> [9] </ref>. A slice-and-dice treemap presents the hierarchy as a series of recursively-drawn bounding boxes, sliced alternatively To Appear in the Proceedings of the IEEE Conference on Visualization, October 1992 Page 3 in order of their weights. <p> A few of the more important issues and refinements are: nesting offsets user control of attribute mapping, node filtering, and sibling node sort order animation small multiple displays zooming textual signposts 3.1 Nesting Offsets Treemaps convey structure via containment (nesting and grouping) in the same fashion as Venn diagrams <ref> [9, 14] </ref>. Nesting offsets give users control over the allocation of display space between internal and leaf nodes. Larger offsets put greater emphasis on internal nodes and hence the structure of the hierarchy; smaller offsets emphasize leaf nodes.
Reference: [10] <author> T. Mihalisin, J. Timlin, and J. Schwegler. </author> <title> Visualization and Analysis of Multi-variate Data: A Technique for All Fields. </title> <booktitle> IEEE Visualization 91, </booktitle> <pages> 171-178, </pages> <year> 1991. </year>
Reference-contexts: Hierarchies can be created based on the degree of interest in a set of categorical variables <ref> [10] </ref>. The display space is partitioned amongst the categorical levels of each variable relative to their proportionate values. Treemaps can be generated either singly or as a series of small multiples. performance in the treemap vs. UNIX directory browsing experiment.
Reference: [11] <author> G.. Robertson, J. Mackinlay, and S. Card. </author> <title> Cone trees: Animated 3d visualizations of hierarchical information. </title> <booktitle> ACM CHI91, </booktitle> <pages> 189-194. </pages> <year> 1991. </year>
Reference-contexts: Graphical tree diagrams have more leeway: depending upon the drawing algorithm and the size of the display space, a hundred or so nodes can be adequately represented on screen without the need for panning or zooming. More advanced graphical diagrams such as cone trees <ref> [11] </ref> increase the display limit through the use of a virtual third dimension at the expense of increased navigation (in this resolution. As an example, the GEnie hierarchy used in the treemap experiment contained 120 nodes (products) in two-levels (product manager and product type).
Reference: [12] <author> B. Shneiderman. </author> <type> Personal Communication, </type> <year> 1991. </year>
Reference-contexts: Section 5 describes the experiments conducted with treemaps. Section 6 is the conclusion. 2 Partitioning Algorithms The partitioning of rectangular screen region into a treemap can take one of two approaches: the slice-and-dice approach as previously described in [9] and the top-down approach <ref> [12] </ref>, which is discussed below. 2.1 Top-Down Development of the top-down algorithm was motivated by Brian Johnson brianj@cs.umd.edu David Turo turo@cs.umd.edu the desire to preserve the structure (and user familiarity) of traditional tree diagrams, which flow from one side of the screen to the other (usually from top to bottom).
Reference: [13] <author> B. Shneiderman. </author> <title> Tree visualization with tree-maps: A 2-D space-filling approach. </title> <journal> ACM Transactions on Graphics, </journal> <month> Janu-ary </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Treemaps are a novel method for presenting large hierarchical information spaces on planar display areas of limited size <ref> [9, 13] </ref>. A treemap is generated by recursively slicing the screen into rectangular bounding boxes to convey global structure (hierarchy). Individual node information is presented through display attributes such as bounding box size and fill color.
Reference: [14] <author> M. Travers. </author> <title> A visual representation for knowledge structures. </title> <booktitle> ACM Hypertext89, </booktitle> <pages> 147-158. </pages> <year> 1989. </year>
Reference-contexts: A few of the more important issues and refinements are: nesting offsets user control of attribute mapping, node filtering, and sibling node sort order animation small multiple displays zooming textual signposts 3.1 Nesting Offsets Treemaps convey structure via containment (nesting and grouping) in the same fashion as Venn diagrams <ref> [9, 14] </ref>. Nesting offsets give users control over the allocation of display space between internal and leaf nodes. Larger offsets put greater emphasis on internal nodes and hence the structure of the hierarchy; smaller offsets emphasize leaf nodes.
Reference: [15] <author> E. R. Tufte. </author> <title> The Visual Display of Quantitative Information. </title> <publisher> Graphics Press, </publisher> <address> Cheshire, CT, </address> <year> 1983. </year>
Reference-contexts: method, the entire treemap would grow and shrink, and the area of each bounding box would reflect absolute data over the time period being examined. 3.6 Small Multiples Treemaps promote relative comparisons and are particularly suited to the presentation of small multiple views or animation when relative comparisons are desired <ref> [15] </ref>. The GEnie experiment used this technique to display six months worth of data side by side. Users were asked to interpret changes by following particular squares across the diagram and noting changes in size, position, and color. GEnie experiment using a subset of the product data. <p> GEnie experiment using a subset of the product data. The 3.2 Attribute Mapping User confidence in the treemap application may be improved by providing the user more control over attributes which determine node size (weight) and color <ref> [8, 15] </ref>. Figure 2, for example, displays the same treemap as in Figure 3, except that all leaf nodes have the same weight (the areas of the leaf nodes bounding boxes are all the same).
Reference: [16] <author> C. Williamson and B. Shneiderman. </author> <title> The Dynamic Homefinder: Evaluating Dynamic Queries in a Real-Estate Information Exploration System. </title> <booktitle> ACM SIGIR 92, </booktitle> <year> 1992. </year> <title> Macintosh file hierarchy with 1500 files and 190 directories. Notice the duplicate directory at the top level which contains a copy of the system file. Name Size Scaled Weight Path Information Creator Type Creation Date Modification Date Unknown Text Graphics Archives/Stacks Programming Applications System Border Color </title>
Reference-contexts: Issues here relate to appropriate highlighting mechanisms and feedback to users. An offshoot of this involves implementation of dynamic queries <ref> [16, 2] </ref>, which allow users to generate a large number of queries in a short period of time via direct manipulation with sliders or other widgets. 4.2 Aspect Ratio Perception Problem Treemaps use a single numeric weight to determine the display area of a node in the hierarchy.
References-found: 16

