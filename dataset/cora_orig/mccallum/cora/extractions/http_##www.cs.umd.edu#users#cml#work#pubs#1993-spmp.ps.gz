URL: http://www.cs.umd.edu/users/cml/work/pubs/1993-spmp.ps.gz
Refering-URL: http://www.cs.umd.edu/users/cml/work/pubs/
Root-URL: 
Title: Measurement-Based Guidance of Software Projects Using Explicit Project Plans  
Author: Christopher M. Lott and H. Dieter Rombach 
Keyword: improvement-oriented engineering model, measurement, explicit models, project modeling, project guidance.  
Note: Appeared in Information and Software Technology, Volume 35, Number 6/7, June/July  
Address: 67653 Kaiserslautern, Germany  
Affiliation: Arbeitsgruppe Software Engineering Fachbereich Informatik Universitat Kaiserslautern  
Email: Email: lott@informatik.uni-kl.de, rombach@informatik.uni-kl.de  
Date: 1993.  
Abstract: As first steps towards establishing software engineering as an engineering discipline, we need to create explicit models of its building blocks, i.e., projects, processes, products, and various quality perspectives; organize these models for effective reuse across project boundaries; and establish measurable criteria for project guidance. This paper investigates the possibilities of providing measurement-based project guidance using explicit project plans. Following a summary of technologies developed by the process modeling and measurement subcommunities of software engineering, a method for integrating these technologies is suggested, and the potential benefits for project guidance are discussed. Examples from the MVP Project at the University of Kaiserslautern are used throughout for illustration purposes. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Frederick P. Brooks, Jr. </author> <title> The Mythical Man-Month. </title> <publisher> Addison Wesley, </publisher> <year> 1978. </year>
Reference-contexts: 1 Introduction Software development and maintenance projects are difficult to plan and manage <ref> [1] </ref>.
Reference: [2] <institution> Proceedings of the International Software Process Workshop, </institution> <year> 1984-1993. </year>
Reference-contexts: The process modeling and measurement subcommunities especially have accumulated a significant body of knowledge and provided promising technologies <ref> [2, 3] </ref>. The purpose of this paper is to demonstrate how integrating explicit process models and measurement can offer the needed intellectual control over software evolution projects. Process modeling and measurement technologies offer many possible avenues towards solving the problems of planning and managing projects. <p> Some were designed to automate processes to the extent possible and others to aid understanding. Numerous examples of notations for building formal process models are surveyed in <ref> [2] </ref>. Lessons learned over the past five years of process research [2, 16] include the following: * Descriptive versus prescriptive models: Processes already exist in software evolution organizations, so it is natural to begin modeling them. <p> Some were designed to automate processes to the extent possible and others to aid understanding. Numerous examples of notations for building formal process models are surveyed in [2]. Lessons learned over the past five years of process research <ref> [2, 16] </ref> include the following: * Descriptive versus prescriptive models: Processes already exist in software evolution organizations, so it is natural to begin modeling them. Starting from the current situation establishes the necessary baselines against which any future improvements must be measured.
Reference: [3] <institution> Proceedings of the International Conference on the Software Process. IEEE Computer Society Press, </institution> <year> 1992-1993. </year>
Reference-contexts: The process modeling and measurement subcommunities especially have accumulated a significant body of knowledge and provided promising technologies <ref> [2, 3] </ref>. The purpose of this paper is to demonstrate how integrating explicit process models and measurement can offer the needed intellectual control over software evolution projects. Process modeling and measurement technologies offer many possible avenues towards solving the problems of planning and managing projects.
Reference: [4] <author> Marc I. Kellner and H. Dieter Rombach. </author> <title> Session summary: Comparisons of software process descriptions. </title> <editor> In Takuya Katayama, editor, </editor> <booktitle> Proceedings of the 6 th International Software Process Workshop, </booktitle> <pages> pages 7-18. </pages> <publisher> IEEE Press, </publisher> <month> October </month> <year> 1990. </year>
Reference-contexts: An operational definition typically requires measurement. A tractable quality model is an operational definition which allows tracing of quality aspects through all relevant stages of a project. 1 cess modeling languages have been developed <ref> [4] </ref>, and first experiences regarding their practical usefulness are documented [5, 6, 7, 8, 9].
Reference: [5] <author> Mark I. Kellner. </author> <title> Software process modeling: value and experience. </title> <booktitle> In SEI Technical Review, </booktitle> <pages> pages 23-54. </pages> <institution> Software Engineering Institute, Pittsburgh, Pennsylvania 15213, </institution> <year> 1989. </year>
Reference-contexts: An operational definition typically requires measurement. A tractable quality model is an operational definition which allows tracing of quality aspects through all relevant stages of a project. 1 cess modeling languages have been developed [4], and first experiences regarding their practical usefulness are documented <ref> [5, 6, 7, 8, 9] </ref>.
Reference: [6] <author> H. Dieter Rombach and Bradford T. Ulery. </author> <title> Improving software maintenance through measurement. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 77(4), </volume> <year> 1989. </year>
Reference-contexts: An operational definition typically requires measurement. A tractable quality model is an operational definition which allows tracing of quality aspects through all relevant stages of a project. 1 cess modeling languages have been developed [4], and first experiences regarding their practical usefulness are documented <ref> [5, 6, 7, 8, 9] </ref>. <p> of met rics [10]. * Various goal-oriented measurement approaches exist, including Murine and McCall's SQM [22], Akao's QFD [23], and Basili's G/Q/M [10, 11]. * Empirical research studies need to be based on sound principles [24]. * Process measurement requires an explicit model of the process object to be measured <ref> [6, 9] </ref>. * Process data are owned by individuals and only explicitly released for well-specified purposes. <p> Needs in this sense may be any requirement imposed on the project organization, including product properties such as reliability and process properties such as resource consumption. * Metric collection efforts depend on a sound, objective, unambiguous understanding of the processes from which data is collected <ref> [6, 9] </ref>. <p> Next we describe two real-world examples of having used the MVP technology off-line. NASA's Software Engineering Laboratory used project plans off-line to understand a maintenance process <ref> [6, 9] </ref>. A first attempt to collect data on maintenance processes in this environment failed because the process model implicit in the minds of the leaders of the study was not consistent with the existing processes.
Reference: [7] <author> Maria H. Penedo and Christine Shu. </author> <title> Acquiring experience with the modeling and implementation of the project life-cycle process. </title> <journal> IEE Software Engineering Journal, </journal> <volume> 6(5) </volume> <pages> 259-274, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: An operational definition typically requires measurement. A tractable quality model is an operational definition which allows tracing of quality aspects through all relevant stages of a project. 1 cess modeling languages have been developed [4], and first experiences regarding their practical usefulness are documented <ref> [5, 6, 7, 8, 9] </ref>.
Reference: [8] <author> C. D. Klingler, M. Neviaser, A. Marmor-Squires, C. M. Lott, and H. D. Rombach. </author> <title> A case study in process representation using MVP-L. </title> <booktitle> In Proceedings of the 7 th Annual Conference on Computer Assurance (COMPASS 92), </booktitle> <pages> pages 137-146, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: An operational definition typically requires measurement. A tractable quality model is an operational definition which allows tracing of quality aspects through all relevant stages of a project. 1 cess modeling languages have been developed [4], and first experiences regarding their practical usefulness are documented <ref> [5, 6, 7, 8, 9] </ref>. <p> After views of maintenance personnel were iteratively captured, represented using MVP-L, and reviewed until conflicts were resolved, data collection efforts yielded interesting and meaningful results. The second example is a case study which we performed in cooperation with TRW <ref> [8] </ref>. TRW personnel used their natural-language description of a proposed reuse-oriented development process to build a project plan using the MVP-L language, analyzed the MVP-L representation for completeness and consistency, changed the representation to fix problems and improve it, and finally rewrote an improved natural-language description.
Reference: [9] <author> H. Dieter Rombach, Bradford T. Ulery, and Jon Valett. </author> <title> Toward full life cycle control: Adding maintenance measurement to the SEL. </title> <journal> Journal of Systems and Software, </journal> <volume> 18(2) </volume> <pages> 125-138, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: An operational definition typically requires measurement. A tractable quality model is an operational definition which allows tracing of quality aspects through all relevant stages of a project. 1 cess modeling languages have been developed [4], and first experiences regarding their practical usefulness are documented <ref> [5, 6, 7, 8, 9] </ref>. <p> The reverse is also true; the best measurement plans are useless if they are based on incorrect assumptions regarding the performance of the projects to be measured <ref> [9] </ref>. We suggest explicitly integrating process modeling and measurement technologies. <p> of met rics [10]. * Various goal-oriented measurement approaches exist, including Murine and McCall's SQM [22], Akao's QFD [23], and Basili's G/Q/M [10, 11]. * Empirical research studies need to be based on sound principles [24]. * Process measurement requires an explicit model of the process object to be measured <ref> [6, 9] </ref>. * Process data are owned by individuals and only explicitly released for well-specified purposes. <p> Needs in this sense may be any requirement imposed on the project organization, including product properties such as reliability and process properties such as resource consumption. * Metric collection efforts depend on a sound, objective, unambiguous understanding of the processes from which data is collected <ref> [6, 9] </ref>. <p> Next we describe two real-world examples of having used the MVP technology off-line. NASA's Software Engineering Laboratory used project plans off-line to understand a maintenance process <ref> [6, 9] </ref>. A first attempt to collect data on maintenance processes in this environment failed because the process model implicit in the minds of the leaders of the study was not consistent with the existing processes.
Reference: [10] <author> Victor R. Basili and H. Dieter Rombach. </author> <title> The TAME project: Towards improvement-oriented software environments. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-14(6):758-773, </volume> <month> June </month> <year> 1988. </year>
Reference-contexts: A number of measurement approaches have been developed based on the idea of tying measures to project goals; one example is explained in in <ref> [10, 11] </ref>. Experience tells that useful measurement plans can be established and significant improvements can be achieved based on goal-oriented measurement approaches in local environments [12]. There is a growing understanding that useful project plans must be based on explicit models of processes, products, quality aspects, etc. <p> essential in order to support learning from ongoing projects as well as to support guidance of projects based on sound, objective criteria. 2.1 The TAME Model The Quality Improvement Paradigm (QIP) developed in the TAME project combines support for model building with support for project guidance, and also integrates measurement <ref> [10, 14] </ref>. <p> the following: * Measurement involves the specification, collection, and interpretation of measurement data for various purposes. * Measurement is oriented towards better understanding (building baselines), better planning and management (prediction), and better quality and productivity (improvement). * Various improvement approaches exist, include Deming's Plan-Do-Check-Act approach [19], Basili's Quality Improvement Paradigm <ref> [10] </ref>, and the SEI's Capability Maturity Model (CMM) [20]. * There is no generally accepted set of process met-rics, because processes, perspectives, roles, needs, and expectations vary too much. * Owners of to-be-measured processes should be involved in defining goals of measurement, metrics, and interpretation of data (i.e., model building). * <p> model building). * We are capable of building models with strong predictive powers for local environments [12, 21]. * We are only starting to understand the impact of environmental factors on empirical models [12, 21]. * Measurement needs to be top-down or goal-oriented; objectives determine the choice of met rics <ref> [10] </ref>. * Various goal-oriented measurement approaches exist, including Murine and McCall's SQM [22], Akao's QFD [23], and Basili's G/Q/M [10, 11]. * Empirical research studies need to be based on sound principles [24]. * Process measurement requires an explicit model of the process object to be measured [6, 9]. * Process <p> We are only starting to understand the impact of environmental factors on empirical models [12, 21]. * Measurement needs to be top-down or goal-oriented; objectives determine the choice of met rics [10]. * Various goal-oriented measurement approaches exist, including Murine and McCall's SQM [22], Akao's QFD [23], and Basili's G/Q/M <ref> [10, 11] </ref>. * Empirical research studies need to be based on sound principles [24]. * Process measurement requires an explicit model of the process object to be measured [6, 9]. * Process data are owned by individuals and only explicitly released for well-specified purposes. <p> A comprehensive state-of-the-art review of measurement and empirical research appears in [16]. 3.2.1 The Goal/Question/Metric Paradigm The Goal/Question/Metric paradigm (G/Q/M), which provides a framework for constructing a measurement plan and interpreting measurement results <ref> [10, 11, 25] </ref>, is used in the MVP Project. G/Q/M supports both a top-down, definitional approach, in which goals are refined in a traceable way into metrics, and a bottom-up, interpretational approach, in which measurement data are interpreted in the context of the high-level goals. <p> Currently, there seems to exist general agreement on the following three issues: * Systematic planning and performance tracking of projects is only possible when project goals are defined objectively. * Processes are specialized for each project's needs <ref> [10] </ref>. Needs in this sense may be any requirement imposed on the project organization, including product properties such as reliability and process properties such as resource consumption. * Metric collection efforts depend on a sound, objective, unambiguous understanding of the processes from which data is collected [6, 9].
Reference: [11] <author> Victor R. Basili. </author> <title> Software development: A paradigm for the future. </title> <booktitle> In Proceedings of the 13 th Annual International Computer Software and Application Conference (COMPSAC), </booktitle> <pages> pages 471-485, </pages> <address> Orlando, Florida, </address> <month> September </month> <year> 1989. </year>
Reference-contexts: A number of measurement approaches have been developed based on the idea of tying measures to project goals; one example is explained in in <ref> [10, 11] </ref>. Experience tells that useful measurement plans can be established and significant improvements can be achieved based on goal-oriented measurement approaches in local environments [12]. There is a growing understanding that useful project plans must be based on explicit models of processes, products, quality aspects, etc. <p> We are only starting to understand the impact of environmental factors on empirical models [12, 21]. * Measurement needs to be top-down or goal-oriented; objectives determine the choice of met rics [10]. * Various goal-oriented measurement approaches exist, including Murine and McCall's SQM [22], Akao's QFD [23], and Basili's G/Q/M <ref> [10, 11] </ref>. * Empirical research studies need to be based on sound principles [24]. * Process measurement requires an explicit model of the process object to be measured [6, 9]. * Process data are owned by individuals and only explicitly released for well-specified purposes. <p> A comprehensive state-of-the-art review of measurement and empirical research appears in [16]. 3.2.1 The Goal/Question/Metric Paradigm The Goal/Question/Metric paradigm (G/Q/M), which provides a framework for constructing a measurement plan and interpreting measurement results <ref> [10, 11, 25] </ref>, is used in the MVP Project. G/Q/M supports both a top-down, definitional approach, in which goals are refined in a traceable way into metrics, and a bottom-up, interpretational approach, in which measurement data are interpreted in the context of the high-level goals.
Reference: [12] <author> Frank E. </author> <title> McGarry. </title> <booktitle> Results of 15 years of measurement in the SEL. In Proceedings of the 15 th Annual Software Engineering Workshop. </booktitle> <institution> NASA Goddard Space Flight Center, Greenbelt MD 20771, </institution> <month> November </month> <year> 1990. </year>
Reference-contexts: A number of measurement approaches have been developed based on the idea of tying measures to project goals; one example is explained in in [10, 11]. Experience tells that useful measurement plans can be established and significant improvements can be achieved based on goal-oriented measurement approaches in local environments <ref> [12] </ref>. There is a growing understanding that useful project plans must be based on explicit models of processes, products, quality aspects, etc. <p> accepted set of process met-rics, because processes, perspectives, roles, needs, and expectations vary too much. * Owners of to-be-measured processes should be involved in defining goals of measurement, metrics, and interpretation of data (i.e., model building). * We are capable of building models with strong predictive powers for local environments <ref> [12, 21] </ref>. * We are only starting to understand the impact of environmental factors on empirical models [12, 21]. * Measurement needs to be top-down or goal-oriented; objectives determine the choice of met rics [10]. * Various goal-oriented measurement approaches exist, including Murine and McCall's SQM [22], Akao's QFD [23], and <p> of to-be-measured processes should be involved in defining goals of measurement, metrics, and interpretation of data (i.e., model building). * We are capable of building models with strong predictive powers for local environments <ref> [12, 21] </ref>. * We are only starting to understand the impact of environmental factors on empirical models [12, 21]. * Measurement needs to be top-down or goal-oriented; objectives determine the choice of met rics [10]. * Various goal-oriented measurement approaches exist, including Murine and McCall's SQM [22], Akao's QFD [23], and Basili's G/Q/M [10, 11]. * Empirical research studies need to be based on sound principles [24]. *
Reference: [13] <author> Victor R. Basili and H. Dieter Rombach. </author> <title> Tailoring the software process to project goals and environments. </title> <booktitle> In Proceedings of the 9 th International Conference on Software Engineering, </booktitle> <pages> pages 345-357. </pages> <publisher> IEEE, </publisher> <month> March </month> <year> 1987. </year>
Reference-contexts: One of the major lessons learned from many years of software engineering experience is that such models are complex and need to be tailored and adjusted for changing project goals and characteristics <ref> [13] </ref>. Therefore, systematic software engineering requires explicit support both for continuously building new models and for improving existing ones based on lessons learned from ongoing projects. It also requires support for guiding ongoing evolution projects effectively based on the reuse of existing models.
Reference: [14] <author> Victor R. Basili and H. Dieter Rombach. </author> <title> Support for comprehensive reuse. </title> <journal> IEE Software Engineering Journal, </journal> <volume> 6(5) </volume> <pages> 303-316, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: essential in order to support learning from ongoing projects as well as to support guidance of projects based on sound, objective criteria. 2.1 The TAME Model The Quality Improvement Paradigm (QIP) developed in the TAME project combines support for model building with support for project guidance, and also integrates measurement <ref> [10, 14] </ref>. <p> Re-packaging refers to all activities aimed at improving the reuse potential of existing experience (includes generalizing, tailoring, formalizing) <ref> [14] </ref>. <p> This requires that project goals and characteristics are defined in a measurable way, and that candidate models are available in the experience factory together with information on their effectiveness relative to the project goals and characteristics in question <ref> [14] </ref>. Consider an example instantiation of the descriptive project plan described above for a second project called DCT2, in which the characteristics match those of DCT1. The goals of DCT2 are to use not more than 1,000 staff-hours and to stay within the characteristic fault detection rate of project DCT1. <p> This example instantiated a project plan without any changes. A more realistic case is that the goals of the project do not have exact matches in the library of models, which is the general reuse problem <ref> [14] </ref>. 2.5 Project Tracking and Guidance Project tracking is a prerequisite for a posteriori detection or a priori prevention of project performance problems, and for recognizing the need for replanning. Project guidance consists of suggesting alternate performance patterns to avoid reaching undesirable states.
Reference: [15] <author> National Aeronautics and Space Administration. </author> <title> Manager's handbook for software development. </title> <type> Technical Report SEL-84-101, </type> <institution> NASA Goddard Space Flight Center, Greenbelt MD 20771, </institution> <year> 1991. </year>
Reference-contexts: * Performance tracking and guidance: the activities aimed at comparing actual project performance with prescriptive project plans in order to recognize deviations, to suggest alternate performance patterns for achieving project goals, and to initiate replanning activities. 3 2.2 Example project plan The following descriptive process model, abstracted and simplified from <ref> [15] </ref>, is used throughout the paper. The product-flow view of this example appears in Figure 2. A development project, named the DCT1 project, is modeled as consisting solely of the three processes Write design, Write code, and Test code. Each process consumes and produces a single product document. <p> This level of technology has been implemented in NASA's Software Engineering Laboratory <ref> [30, 15] </ref>. The Software Management Environment (SME), developed in this organization, offers one example of on-line use of a measurement program [31].
Reference: [16] <author> H. Dieter Rombach, Victor R. Basili, and Richard W. Selby, </author> <title> editors. Experimental Software Engineering Issues: A critical assessment and future directions. </title> <booktitle> Lecture Notes in Computer Science Nr. </booktitle> <volume> 706, </volume> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Some were designed to automate processes to the extent possible and others to aid understanding. Numerous examples of notations for building formal process models are surveyed in [2]. Lessons learned over the past five years of process research <ref> [2, 16] </ref> include the following: * Descriptive versus prescriptive models: Processes already exist in software evolution organizations, so it is natural to begin modeling them. Starting from the current situation establishes the necessary baselines against which any future improvements must be measured. <p> A comprehensive state-of-the-art review of measurement and empirical research appears in <ref> [16] </ref>. 3.2.1 The Goal/Question/Metric Paradigm The Goal/Question/Metric paradigm (G/Q/M), which provides a framework for constructing a measurement plan and interpreting measurement results [10, 11, 25], is used in the MVP Project.
Reference: [17] <author> Karen Huff and Viktor Lesser. </author> <title> A plan-based intelligent assistant that supports the software development process. </title> <editor> In Peter Henderson, editor, </editor> <booktitle> Proceedings of the 3 rd ACM SIGSoft/SIGPLAN Symposium on Practical Software Development Environments, </booktitle> <pages> pages 97-106, </pages> <month> November </month> <year> 1988. </year> <note> Appeared as ACM SIGSoft Software Engineering Notes 13(5), </note> <month> November </month> <year> 1988. </year> <month> 17 </month>
Reference-contexts: Project goal definitions help in selecting the appropriate processes to match the given goals and also motivate project personnel in terms of what is expected. Algorithms are used to guide the performance of project members in terms of what they should do. With the exception of <ref> [17] </ref>, too little emphasis has been placed on explicitly modeling project and process goals. * In-the-large versus in-the-small models: Projects are typically performed by teams of developers. <p> There will always be unforeseen problems that must be handled during project performance. Therefore, static (unchangeable) project plans are not acceptable for guiding software projects. Little previous work (again an exception is <ref> [17] </ref>) has addressed the need for changeable plans. 3.1.1 The Process Modeling Language MVP-L In the MVP Project, we developed the process notation called MVP-L [18].
Reference: [18] <author> Alfred Brockers, Christopher M. Lott, H. Di--eter Rombach, and Martin Verlage. </author> <title> MVP Language Report. </title> <type> Technical Report 229/92, </type> <institution> Fachbere-ich Informatik, Universitat Kaiserslautern, </institution> <address> 67653 Kaiserslautern, Germany, </address> <month> December </month> <year> 1992. </year>
Reference-contexts: Therefore, static (unchangeable) project plans are not acceptable for guiding software projects. Little previous work (again an exception is [17]) has addressed the need for changeable plans. 3.1.1 The Process Modeling Language MVP-L In the MVP Project, we developed the process notation called MVP-L <ref> [18] </ref>. Our notation was designed for modeling processes in-the-large, including building comprehensible specifications and designs of processes, products, and resources, and supporting the instantiation and execution of these models for the purposes of analysis, simulation, and project guidance.
Reference: [19] <author> W. Edwards Deming. </author> <title> Out of the crisis. </title> <institution> Mas-sachusetts Institute of Technology, </institution> <address> Cambridge, Mass., </address> <year> 1986. </year>
Reference-contexts: years of measurement research include the following: * Measurement involves the specification, collection, and interpretation of measurement data for various purposes. * Measurement is oriented towards better understanding (building baselines), better planning and management (prediction), and better quality and productivity (improvement). * Various improvement approaches exist, include Deming's Plan-Do-Check-Act approach <ref> [19] </ref>, Basili's Quality Improvement Paradigm [10], and the SEI's Capability Maturity Model (CMM) [20]. * There is no generally accepted set of process met-rics, because processes, perspectives, roles, needs, and expectations vary too much. * Owners of to-be-measured processes should be involved in defining goals of measurement, metrics, and interpretation of
Reference: [20] <author> Watts S. Humphrey. </author> <title> Managing the Software Process. </title> <publisher> Addison Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1989. </year>
Reference-contexts: and interpretation of measurement data for various purposes. * Measurement is oriented towards better understanding (building baselines), better planning and management (prediction), and better quality and productivity (improvement). * Various improvement approaches exist, include Deming's Plan-Do-Check-Act approach [19], Basili's Quality Improvement Paradigm [10], and the SEI's Capability Maturity Model (CMM) <ref> [20] </ref>. * There is no generally accepted set of process met-rics, because processes, perspectives, roles, needs, and expectations vary too much. * Owners of to-be-measured processes should be involved in defining goals of measurement, metrics, and interpretation of data (i.e., model building). * We are capable of building models with strong
Reference: [21] <author> Frank E. McGarry and R. Pajerski. </author> <title> Towards understanding software - 15 years in the SEL. </title> <booktitle> In Proceedings of the 15 th Annual Software Engineering Workshop. </booktitle> <institution> NASA Goddard Space Flight Center, Greenbelt MD 20771, </institution> <month> November </month> <year> 1990. </year>
Reference-contexts: accepted set of process met-rics, because processes, perspectives, roles, needs, and expectations vary too much. * Owners of to-be-measured processes should be involved in defining goals of measurement, metrics, and interpretation of data (i.e., model building). * We are capable of building models with strong predictive powers for local environments <ref> [12, 21] </ref>. * We are only starting to understand the impact of environmental factors on empirical models [12, 21]. * Measurement needs to be top-down or goal-oriented; objectives determine the choice of met rics [10]. * Various goal-oriented measurement approaches exist, including Murine and McCall's SQM [22], Akao's QFD [23], and <p> of to-be-measured processes should be involved in defining goals of measurement, metrics, and interpretation of data (i.e., model building). * We are capable of building models with strong predictive powers for local environments <ref> [12, 21] </ref>. * We are only starting to understand the impact of environmental factors on empirical models [12, 21]. * Measurement needs to be top-down or goal-oriented; objectives determine the choice of met rics [10]. * Various goal-oriented measurement approaches exist, including Murine and McCall's SQM [22], Akao's QFD [23], and Basili's G/Q/M [10, 11]. * Empirical research studies need to be based on sound principles [24]. *
Reference: [22] <author> J. A. McCall, P. K. Richards, and G. F. Wal-ters. </author> <title> Factors in software quality. </title> <type> Technical Report RADC-TR-77-369, </type> <institution> Rome Laboratory, Griffis AFB, </institution> <address> NY, 13441, </address> <year> 1977. </year>
Reference-contexts: powers for local environments [12, 21]. * We are only starting to understand the impact of environmental factors on empirical models [12, 21]. * Measurement needs to be top-down or goal-oriented; objectives determine the choice of met rics [10]. * Various goal-oriented measurement approaches exist, including Murine and McCall's SQM <ref> [22] </ref>, Akao's QFD [23], and Basili's G/Q/M [10, 11]. * Empirical research studies need to be based on sound principles [24]. * Process measurement requires an explicit model of the process object to be measured [6, 9]. * Process data are owned by individuals and only explicitly released for well-specified purposes.
Reference: [23] <author> M. Kogure and Y. Akao. </author> <title> Quality function deployment and CWQC in Japan. </title> <booktitle> Quality Progress, </booktitle> <month> October </month> <year> 1983. </year>
Reference-contexts: environments [12, 21]. * We are only starting to understand the impact of environmental factors on empirical models [12, 21]. * Measurement needs to be top-down or goal-oriented; objectives determine the choice of met rics [10]. * Various goal-oriented measurement approaches exist, including Murine and McCall's SQM [22], Akao's QFD <ref> [23] </ref>, and Basili's G/Q/M [10, 11]. * Empirical research studies need to be based on sound principles [24]. * Process measurement requires an explicit model of the process object to be measured [6, 9]. * Process data are owned by individuals and only explicitly released for well-specified purposes.
Reference: [24] <author> Victor R. Basili, Richard W. Selby, and David H. Hutchens. </author> <title> Experimentation in software engineering. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-12(7):733-743, </volume> <month> July </month> <year> 1986. </year>
Reference-contexts: models [12, 21]. * Measurement needs to be top-down or goal-oriented; objectives determine the choice of met rics [10]. * Various goal-oriented measurement approaches exist, including Murine and McCall's SQM [22], Akao's QFD [23], and Basili's G/Q/M [10, 11]. * Empirical research studies need to be based on sound principles <ref> [24] </ref>. * Process measurement requires an explicit model of the process object to be measured [6, 9]. * Process data are owned by individuals and only explicitly released for well-specified purposes.
Reference: [25] <author> H. Dieter Rombach. </author> <title> Practical benefits of goal-oriented measurement. </title> <editor> In N. Fenton and B. Little-wood, editors, </editor> <title> Software Reliability and Metrics. </title> <publisher> Elsevier Applied Science, </publisher> <address> London, </address> <year> 1991. </year>
Reference-contexts: A comprehensive state-of-the-art review of measurement and empirical research appears in [16]. 3.2.1 The Goal/Question/Metric Paradigm The Goal/Question/Metric paradigm (G/Q/M), which provides a framework for constructing a measurement plan and interpreting measurement results <ref> [10, 11, 25] </ref>, is used in the MVP Project. G/Q/M supports both a top-down, definitional approach, in which goals are refined in a traceable way into metrics, and a bottom-up, interpretational approach, in which measurement data are interpreted in the context of the high-level goals.
Reference: [26] <author> Watts S. Humphrey, David H. Kitson, and Tim C. Kasse. </author> <title> The state of software engineering practice: A preliminary report. </title> <booktitle> In Proceedings of the 11 th International Conference on Software Engineering, </booktitle> <pages> pages 277-288. </pages> <publisher> IEEE, </publisher> <month> May </month> <year> 1989. </year>
Reference-contexts: However, recent trends emphasize the integration of these technologies; examples include the SEI's Capability Maturity Model (CMM) <ref> [26] </ref> and the most recent ESPRIT Call for Proposals [27]. The CMM combines process modeling with measurement of projects, products, and processes. The ESPRIT CFP calls for integration of processes and measurement to build process-centered environments.
Reference: [27] <author> ESPRIT. </author> <title> Specific research and technological development programme in the field of information technology. Draft Work Programme for 1993-94, Directorate General XIII, Commission of the Eu-ropean Communities, </title> <address> B-1049 Brussels, Belgium, </address> <year> 1993. </year>
Reference-contexts: However, recent trends emphasize the integration of these technologies; examples include the SEI's Capability Maturity Model (CMM) [26] and the most recent ESPRIT Call for Proposals <ref> [27] </ref>. The CMM combines process modeling with measurement of projects, products, and processes. The ESPRIT CFP calls for integration of processes and measurement to build process-centered environments.
Reference: [28] <author> Watts S. Humphrey, Terry R. Snyder, and Ronald R. Willis. </author> <title> Software process improvement at Hughes Aircraft. </title> <journal> IEEE Software, </journal> <pages> pages 11-23, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: Reaching this level requires an organization to devote considerable effort towards defining its processes and constructing a measurement plan. An example of writing and using explicit project plans, although not using exactly those notations developed in the MVP Project, 9 10 is discussed in <ref> [28] </ref>. Next we describe two real-world examples of having used the MVP technology off-line. NASA's Software Engineering Laboratory used project plans off-line to understand a maintenance process [6, 9].
Reference: [29] <author> Walter Tichy. </author> <title> Rcs-a system for version control. </title> <journal> Software-Practice and Experience, </journal> <volume> 15(7) </volume> <pages> 637-654, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: Further, because we believe that all of these benefits accrue through the use of version control technology, the investment required of an organization to achieve this level is moderate. Version control systems such as RCS <ref> [29] </ref> are well understood and freely available. 5.4 Level 3b: Off-Line project plan, on-line measurement plan The possibility of an environment that supports on-line collection and interpretation of measurement data, but does not incorporate a project plan, is depicted in Figure 6.
Reference: [30] <author> National Aeronautics and Space Administration. </author> <title> Software engineering laboratory (SEL) relationships, models, and management rules. </title> <type> Technical Report SEL-91-001, </type> <institution> NASA Goddard Space Flight Center, Greenbelt MD 20771, </institution> <month> February </month> <year> 1991. </year>
Reference-contexts: This level of technology has been implemented in NASA's Software Engineering Laboratory <ref> [30, 15] </ref>. The Software Management Environment (SME), developed in this organization, offers one example of on-line use of a measurement program [31].
Reference: [31] <author> W. Decker and Jon Valett. </author> <title> Software management environment (SME) concepts and architecture. </title> <type> Technical Report SEL-89-103, </type> <institution> NASA God-dard Space Flight Center, Greenbelt MD 20771, </institution> <month> September </month> <year> 1992. </year>
Reference-contexts: This level of technology has been implemented in NASA's Software Engineering Laboratory [30, 15]. The Software Management Environment (SME), developed in this organization, offers one example of on-line use of a measurement program <ref> [31] </ref>. SME accesses large quantities of data captured from the current project and compares that data to models of the typical and target values for each metric in their environment.
Reference: [32] <author> Kurt C. Wallnau and Peter H. Feiler. </author> <title> Tool integration and environment architectures. </title> <type> Technical Report CMU/SEI-91-TR-11, </type> <institution> Software Engineering Institute, Carnegie Mellon University, </institution> <month> May </month> <year> 1991. </year> <month> 18 </month>
Reference-contexts: The system interface will gather quantitative data and offer guidance according to the collected data and the project plan. By providing such an interface, a project plan serves as an integration mechanism for a software engineering environment <ref> [32] </ref>. User-initiated evaluations of project state remain possible, but deviations may additionally be detected and reported to project personnel asynchronously; i.e., without explicit user action.
References-found: 32

