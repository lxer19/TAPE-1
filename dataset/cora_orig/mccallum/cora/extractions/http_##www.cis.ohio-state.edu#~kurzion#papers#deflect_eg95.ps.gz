URL: http://www.cis.ohio-state.edu/~kurzion/papers/deflect_eg95.ps.gz
Refering-URL: http://www.cis.ohio-state.edu/~kurzion/resume.html
Root-URL: 
Title: Space Deformation using Ray Deectors  
Author: Yair Kurzion and Roni Yagel 
Affiliation: Department of Computer and Information Science The Ohio State University  
Abstract: In this paper we introduce a new approach to the deformation of surface and raster models in two and three dimensions. Rather then deforming the objects in the model, we deform the rays used to render the scene. The mechanism to specify the deformation, which we call a deector, is a vector of gravity positioned in space. This gravity vector bends any ray that travels through its field of gravity in a view-independent fashion. Images generated by these curved rays give the impression of a deformed space. Unlike previous methods that deform all the objects in the scene, our approach deforms only those parts of the model that contribute to the final image. In addition, using deectors, our approach can deform any object type that can be rendered by a ray casting algorithm, providing a unified solution to space deformation.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Barr A., </author> <title> Global and Local Deformations of Solid Primitives, </title> <booktitle> Proceedings of SIGGRAPH 84, Computer Graphics, </booktitle> <volume> 18(3) </volume> <pages> 21-30, </pages> <month> July </month> <year> 1984. </year>
Reference-contexts: Intersecting these curves with the scene objects creates an illusion of a deformed scene. The objects residing in the deformed space now appear to have changed their shape, although they have not been modified in any way. Barr <ref> [1] </ref> introduced the deformation of sight rays as a way to achieve the deformation of solid primitives. <p> Therefore, the minimal value of D (v) occurs when d=0. Geometrically, this means that the minimal derivative occurs on the sphere chord passing through C. When we assign d=0, we get: (4) If we denote , and rearrange the terms (recall that k 0), we get: In the interval <ref> [-1, 1] </ref> the function has a maximum at , and therefore setting satisfies inequality (5). By the theorem condition, k meets this requirement and thus D (v) is indeed monotone. Since D (v) sends each segments endpoint to itself, D (v) is 1-1, and so is T (p). <p> The three vectors , , and are a basis of B of the deformed 3D space at T (p). We use these two basis to map tangent vectors and reconstruct N. 5 Discussion Barr <ref> [1] </ref> presented a deformation method for objects in space. Given some global space transform M, rays are transformed by the inverse of M. Barr [1] suggests expressing any local transforms as global ones. <p> We use these two basis to map tangent vectors and reconstruct N. 5 Discussion Barr <ref> [1] </ref> presented a deformation method for objects in space. Given some global space transform M, rays are transformed by the inverse of M. Barr [1] suggests expressing any local transforms as global ones.
Reference: 2. <author> Barr A., </author> <title> Ray Tracing Deformed Surfaces, </title> <booktitle> Proceedings of SIGGRAPH 86, Computer Graphics, </booktitle> <volume> 20(4) </volume> <pages> 287-296, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: Functional deformations exist, in various forms, for each and every object type we can render. A few recent examples are, free form deformations of polymeshes and parametric surfaces, soft objects and hypertextures for implicit surfaces, space deformation <ref> [2] </ref> for parametric and implicit surfaces, and sculpting for 3D rasters. Our approach belongs to this category of functional deformations, however, it provides a uniform mechanism to deform all types of ray-tracable objects. Some of the above deformations [2,3,13] can be thought of as space deformation.
Reference: 3. <author> Bier T. and Neely S., </author> <title> Feature Based Image Metamorphosis, </title> <booktitle> Proceedings of SIGGRAPH 92, Computer Graphics, </booktitle> <volume> 26(2) </volume> <pages> 35-42, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Although we show only a few example object types, this approach can successfully deform polymeshes, implicit surfaces, algebraic surfaces (e.g., quadrics), volumes, parametric surfaces, and procedural surfaces (e.g., sweeps, CSG, fractals) [4]. Although existing methods for specifying object deformations (e.g., grids [13], vectors <ref> [3] </ref>) may be used to deform sight rays, we have chosen to introduce a new mechanism, called a deector, that is specifically suited to our paradigm of deforming rays rather than objects. <p> Unlike existing methods, deector based deformation is much more intuitive as a modeling tool. Existing methods deform the space somewhat indirectly by moving grid points [13] or vectors <ref> [3] </ref>, an extremely laborious operation in 3D. Our approach, on the other hand, simulates the process of creating a sculpture by deforming an initial set of objects in space using a sequence of local deformations. Our technique makes it very easy to compose deformations.
Reference: 4. <author> Glassner, A. S. (ed.), </author> <title> An Introduction to Ray Tracing, </title> <publisher> Academic Press, </publisher> <year> 1989. </year>
Reference-contexts: After computing the mapping of all the control points, one is free to render the new model with the most appropriate rendering algorithm. For example, if one employs a ray casting (or ray tracing) algorithm <ref> [4] </ref>, then a collection of rays is cast, from the eye, through each screen pixel, into the scene. Traditionally one develops an algorithm to compute the deformation operation for each object type. Obviously, one cannot use a volume deformation algorithm [6], for example, to deform parametric surfaces. <p> Although we show only a few example object types, this approach can successfully deform polymeshes, implicit surfaces, algebraic surfaces (e.g., quadrics), volumes, parametric surfaces, and procedural surfaces (e.g., sweeps, CSG, fractals) <ref> [4] </ref>. Although existing methods for specifying object deformations (e.g., grids [13], vectors [3]) may be used to deform sight rays, we have chosen to introduce a new mechanism, called a deector, that is specifically suited to our paradigm of deforming rays rather than objects. <p> When deforming geometric primitives, we compute the intersection of the deformed ray with the geometry as in traditional ray tracing <ref> [4] </ref>, when deforming 2D rasters we sample at points along the deformed scan lines, and when deforming 3D rasters, we sample along rays as in traditional volume rendering [8]. r 2 X t X X + C 2 Y t Y Y + C 2 Z t Z Z + C
Reference: 5. <author> He T., Wang S., and Kaufman A., </author> <title> Wavelet-Based Volume Morphing, </title> <booktitle> Proceedings of Visualization94, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1994, </year> <pages> pp. 85-92. </pages>
Reference: 6. <author> Hughes J.F., </author> <title> Scheduled Fourier Volume Morphing, </title> <booktitle> Proceedings of SIGGRAPH 92, Computer Graphics, </booktitle> <volume> 26(2) </volume> <pages> 43-46, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Traditionally one develops an algorithm to compute the deformation operation for each object type. Obviously, one cannot use a volume deformation algorithm <ref> [6] </ref>, for example, to deform parametric surfaces. The separation between the modeling phase and rendering phase requires one to deform the whole model even those parts that do not contribute to the final image. Our approach is based on the idea of space deformation.
Reference: 7. <author> Isaacs P.M. and Cohen M.F., </author> <title> Controlling Dynamic Simulation with Kinematic Constrains, Behavior Functions and Inverse Dynamics, </title> <booktitle> Proceedings of SIGGRAPH 87, Computer Graphics, </booktitle> <volume> 21(4) </volume> <pages> 215-224, </pages> <month> July </month> <year> 1987. </year>
Reference: 8. <author> Kaufman A. (ed.), </author> <title> Volume Visualization, </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1990. </year>
Reference-contexts: When deforming geometric primitives, we compute the intersection of the deformed ray with the geometry as in traditional ray tracing [4], when deforming 2D rasters we sample at points along the deformed scan lines, and when deforming 3D rasters, we sample along rays as in traditional volume rendering <ref> [8] </ref>. r 2 X t X X + C 2 Y t Y Y + C 2 Z t Z Z + C 2 + += at 2 bt g+ + - = at 2 bt+ - = 1 r 2 R 2 ( ) 2 4.1 Determining Ray Trajectory When
Reference: 9. <author> Kent J.R., Carlson W.E., and Parent R., </author> <title> Shape Transformations for Polyhedral Objects, </title> <booktitle> Proceedings of SIGGRAPH 92, Computer Graphics, </booktitle> <volume> 26(2) </volume> <pages> 47-54, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Methods have been developed to deform various types of objects such as 2D polygons [10], 3D polyhedral models <ref> [9] </ref>, 2D rasters [3,13], and 3D rasters [5,6]. Functional deformations, where models are deformed according to some function, are much more basic and widely used. They can be as simple as the application of affine transformations or as complex as free form deformations. <p> This choice of a step size is similar to the choice of a sub-polygon size when breaking a polygon into a mesh of smaller polygons as done in traditional object deformation algorithms <ref> [9] </ref>. The smaller the pieces are, the smoother the resulting deformation is. In volume graphics, we take equidistant steps along each sight ray and sample the volume contents at each step. When stepping along linear segments of a ray, we use standard volume ray tracing techniques. <p> The consecutive activation of two deectors with identical gravity fields and opposite direction vectors does not result in an identity transform. On the other hand, our approach exhibits attractive characteristics. When deforming polygons, traditional techniques break them down into a mesh of smaller polygons and deform their vertices <ref> [9] </ref>. Many of the smaller polygons may not contribute to the final image because they are hidden by other polygons in space. Moreover, polygons that lie farther away from the eye need not be subdivided into as many polygons as the closer polygons.
Reference: 10. <author> Sederberg, T.W. and Greenwood E., </author> <title> A Physically Based Approach to 2-D Shape Blending, </title> <booktitle> Proceedings of SIGGRAPH 92, Computer Graphics, </booktitle> <volume> 26(2) </volume> <pages> 25-34, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Methods have been developed to deform various types of objects such as 2D polygons <ref> [10] </ref>, 3D polyhedral models [9], 2D rasters [3,13], and 3D rasters [5,6]. Functional deformations, where models are deformed according to some function, are much more basic and widely used. They can be as simple as the application of affine transformations or as complex as free form deformations.
Reference: 11. <author> Terzopoulos D., Platt J., Barr A., and Fleischer K., </author> <title> Elastically Deformable Models, </title> <booktitle> Proceedings of SIGGRAPH 87, Computer Graphics, </booktitle> <volume> 21(4) </volume> <pages> 205-214, </pages> <month> July </month> <year> 1987. </year>
Reference: 12. <editor> Williams L., Pyramidal Parametrics, </editor> <booktitle> Proceedings of SIGGRAPH 83, Computer Graphics, </booktitle> <volume> 17(3) </volume> <pages> 1-10, </pages> <month> July </month> <year> 1983. </year>
Reference-contexts: In the future we plan to investigate deectors with more complex shapes then spheres and different deection operators such as higher order gravity functions. In volume graphics, we wish to improve our sampling technique by using a mip-mapped version of the volume <ref> [12] </ref>. Finally, the current technique forces smooth deformations and cannot be used to simulate cuts or cracks in objects. Adding continuity breakers such as three dimensional planes can help generate sharp cuts in objects. 6 Conclusions We have introduced a new technique for modeling and rendering deformations in space.
Reference: 13. <author> Wolberg G., </author> <title> Digital Image Warping, </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1990. </year> <title> Images Fig. 5. Bump on the right hand face of a box as described in Figure 1. Fig. 6. Examples of deecting a volume from MRI with multiple deectors. Fig. 7. A teapot modeled from a box (left) and a teapot modeled from a sphere (center), both represented by a 128 3 volume. A teapot represented by a polymesh consisting of 256 polygons being deected (right). </title>
Reference-contexts: Although we show only a few example object types, this approach can successfully deform polymeshes, implicit surfaces, algebraic surfaces (e.g., quadrics), volumes, parametric surfaces, and procedural surfaces (e.g., sweeps, CSG, fractals) [4]. Although existing methods for specifying object deformations (e.g., grids <ref> [13] </ref>, vectors [3]) may be used to deform sight rays, we have chosen to introduce a new mechanism, called a deector, that is specifically suited to our paradigm of deforming rays rather than objects. <p> Unlike existing methods, deector based deformation is much more intuitive as a modeling tool. Existing methods deform the space somewhat indirectly by moving grid points <ref> [13] </ref> or vectors [3], an extremely laborious operation in 3D. Our approach, on the other hand, simulates the process of creating a sculpture by deforming an initial set of objects in space using a sequence of local deformations. Our technique makes it very easy to compose deformations.
References-found: 13

