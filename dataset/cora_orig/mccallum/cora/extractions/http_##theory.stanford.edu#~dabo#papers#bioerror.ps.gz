URL: http://theory.stanford.edu/~dabo/papers/bioerror.ps.gz
Refering-URL: http://theory.stanford.edu/~dabo/publications.html
Root-URL: 
Email: dabo@cs.princeton.edu ctd@cs.princeton.edu rjl@cs.princeton.edu  sgallj@mbox.cesnet.cz  
Title: Making DNA computers error resistant  
Author: Dan Boneh Christopher Dunworth Richard J. Lipton Jir Sgall 
Note: Mathematical Institute, AV CR Zitna 25 115 67 Praha 1 Czech Republic  
Address: Princeton, NJ 08544  
Affiliation: Department of Computer Science Princeton University  
Abstract: We describe methods for making volume decreasing algorithms more resistant to certain types of errors. Such error recovery techniques are crucial if DNA computers ever become practical. Our first approach relies on applying PCR at various stages of the computation. We analyze its performance and show that it increases the survival-probability of various strands to acceptable proportions. Our second approach relies on changing the method by which information is encoded on DNA strands. This encoding is likely to reduce false negative errors during the bead separation procedure.
Abstract-found: 1
Intro-found: 1
Reference: [A] <author> L. Adleman, </author> <title> "Molecular Computation of Solutions to Combinatorial Problems", </title> <booktitle> Science 266 </booktitle> <month> 1021-1024 (Nov. 11) </month> <year> 1994. </year>
Reference-contexts: 1 Introduction In the short history of DNA (deoxyribonucleic acid) based computing there have already been a number of exciting results. It all started with Adleman's <ref> [A] </ref> beautiful insight that showed that biological experiments could solve the Directed Hamiltonian Path problem (DHP). Then, Lipton [L] showed how to use DNA to solve more general problems, namely to find satisfying assignments for arbitrary (directed) contact networks, which includes the important case of arbitrary formulas. <p> A type II (or false positive) error occurs when a strand should not be extracted but is anyway: let q be the probability that this happens. Typical values of p are :95 and q are 10 6 (see <ref> [A] </ref>). Note, just because a strand is bad does not mean that at each step it will not match the pattern. The good strand always matches the pattern; the bad strands may or may not.
Reference: [Ar] <author> S. Arora, </author> <title> "Probabilistic Checkable Proofs", </title> <type> Ph.D. thesis, </type> <institution> U.C. Berekely, </institution> <year> 1994. </year>
Reference-contexts: This seems to be related to the famous Probabilistic Checkable Proofs of <ref> [Ar] </ref>. The techniques presented above transformed a decreasing volume algorithm into a constant volume algorithm. By doing so we made sure that the prevalence of good strands increases in the test tube. However, this technique can not be applied to an algorithm which is constant volume to begin with.
Reference: [B] <author> D. Beaver, </author> <title> "A Universal Molecular Computer", </title> <institution> Penn State University Tech Report CSE-95-001. </institution>
Reference: [BDL] <author> D. Boneh, C. Dunworth, R. Lipton, </author> <title> "Breaking DES Using a Molecular Computer", </title> <publisher> Prince-ton CS Tech-Report CS-TR-489-95. </publisher>
Reference: [BDLS] <author> D. Boneh, C. Dunworth, R. Lipton, J. Sgall, </author> <title> "On the Computational Power of DNA", </title> <journal> In Journal of Discrete Applied Mathematics (DAM), Special Issue on Computational Molecular Biology, </journal> <volume> Vol. 71 (1996), </volume> <pages> pp. 79-94. </pages>
Reference-contexts: The generation of the initial solution for the double encoding is a bit more complicated. We can no longer simply form all paths in some graph. Fortunately we can use a technique described in <ref> [BDLS] </ref>. In [BDLS] it was shown that it is possible to create a solution of all pairs (x; f (x)) for a function f . <p> The generation of the initial solution for the double encoding is a bit more complicated. We can no longer simply form all paths in some graph. Fortunately we can use a technique described in <ref> [BDLS] </ref>. In [BDLS] it was shown that it is possible to create a solution of all pairs (x; f (x)) for a function f .
Reference: [PCR] <author> H. Erlich, "PCR Technology: </author> <title> Principles and Applications for DNA Amplification", </title> <publisher> Stock-ton Press. </publisher>
Reference-contexts: Finally, such pathological cases may not arise in real problems. Our modification to the basic algorithms is twofold: First, every s=n steps double the amount of DNA. We do this by a PCR operation <ref> [PCR] </ref>. There are several points: In practice one might wait until the volume decreased by a larger factor. We will do the analysis in this simple case; the generalization to bigger steps is quite easy. Second, the additional cost in time is small.
Reference: [F] <author> W. Feller, </author> <title> "An Introduction to Probability Theory and Its Application", Volume I., </title> <publisher> John Wiley and Sons 1957. </publisher>
Reference-contexts: Therefore, if a good strand survives s=n steps, it creates 2 new good strands. (Note, we are assuming that PCR step is error-free. However, any error there can be handled by decreasing p.) This is an example of a branching process <ref> [F] </ref>. Branching processes are famous for modelling nuclear reactions and spread of diseases. In our case we are modelling whether or not the single initial good strand or its descendants survive many extractions. An example of such a branching process can be seen in Figure 1. <p> If a strand survives, then it becomes 2 good ones. Thus, the chances have greatly increased that some good strand will survive all the future extractions. Following Feller <ref> [F] </ref> the key quantity is the extinction probability ; for this branching process it is the smallest positive solution to the equation 1 r + r 2 = : A simple computation shows that the value of is 1 r 1.
Reference: [KKW] <author> R. Karp, C. Kenyon, O. Waarts, </author> <title> "Error-resilient DNA computations", </title> <booktitle> In Proceedings of Symposium on Discrete Algorithms, SODA 1996. </booktitle>
Reference-contexts: Lipton [L] describes how binary strings can be encoded as DNA strands in a useful manner. We suggest a modified encoding scheme which is likely to reduce the false negative error rate. We 2 mention that recently Karp, Kenyon and Waarts <ref> [KKW] </ref> have also presented some techniques for coping with errors in the bead separation procedure. 2 Error resistant computations We now turn to showing how to make DNA algorithms more error resistant.
Reference: [L2] <author> Lindahl, Tomas, </author> <title> "Instability and decay of the primary structure of DNA", </title> <note> Nature 362 (Apr 1993) 709-715 </note>
Reference: [L] <author> R. Lipton, </author> <title> "Using DNA to solve NP-Complete Problems", </title> <booktitle> Science 268 </booktitle> <month> 542-545 (Apr. 28) </month> <year> 1995. </year>
Reference-contexts: 1 Introduction In the short history of DNA (deoxyribonucleic acid) based computing there have already been a number of exciting results. It all started with Adleman's [A] beautiful insight that showed that biological experiments could solve the Directed Hamiltonian Path problem (DHP). Then, Lipton <ref> [L] </ref> showed how to use DNA to solve more general problems, namely to find satisfying assignments for arbitrary (directed) contact networks, which includes the important case of arbitrary formulas. Since then there has been a series of papers on DNA computation [BDL,BDLS,S,B,RW,R,P]. <p> This may not be much of a penalty. If one only wishes to perform one computation, then the original algorithm would have more and more equipment sit idle as the volume decreases. Our second result has to do with decreasing the error rates in the bead separation procedure. Lipton <ref> [L] </ref> describes how binary strings can be encoded as DNA strands in a useful manner. We suggest a modified encoding scheme which is likely to reduce the false negative error rate. <p> In order to make the analysis clear we will assume that the algorithm operates as follows: (The more general case in <ref> [L] </ref> is handled in the same way.) Initially, there are 2 n strands of DNA. Just one of these strands is good; all the rest are bad. Clearly, the case of one good strand is worst case. The algorithm consists of s extraction steps. <p> The basic idea is to modify the way in which binary strings are encoded in DNA. The hope is that the extraction procedure will incur less false negatives when this encoding is used. In Lipton's algorithm for solving SAT <ref> [L] </ref> a binary string x = x 1 : : : x n is represented by the DNA molecule 3 0 B (1; x 1 ) B (2; x 2 ) B (3; x 3 ) B (n; x n ) 5 0 where B (k; b) are 20-mers appropriately chosen. <p> For the standard encoding this is done by creating all paths in a certain graph as is described in <ref> [L] </ref>. The generation of the initial solution for the double encoding is a bit more complicated. We can no longer simply form all paths in some graph. Fortunately we can use a technique described in [BDLS]. <p> double encoding solution which consists of all strings (x; x). k p 2 min = p 1 (2 p k 5 96.4% 15 93.6% Table 3: Threshold value for p 2 assuming p 1 = 90% 7 4 Conclusions We discussed methods for making the formula satisfaction techniques of Lipton <ref> [L] </ref> resistant to certain types of errors by applying PCR every several steps. This doubling step turns this algorithm into a constant volume algorithm. The analysis demonstrates that the error parameters of the extract operation are sufficiently small to make the formula satisfaction algorithm work in the presence of errors.
Reference: [P] <author> C. Papadimitrou, </author> <title> private communications. </title>
Reference: [RW] <author> D. Rooand Klaus W. Wagner, </author> <title> "On the power of Bio-Computers", </title> <type> Technical report, </type> <institution> University of Wurzburg, </institution> <year> 1995. </year>
Reference: [R] <author> Rothemund, </author> <title> A DNA and restriction enzyme implementation of Turing machines, </title> <type> unpublished manuscript. 8 </type>
Reference: [SA] <author> Saul, </author> <title> R.L., Ames, B.N., "Background levels of DNA damage in the population", </title> <booktitle> Basic Life Sciences 38 (1986) 529-535. </booktitle>
Reference: [S] <author> W. Smith, </author> <title> "DNA Computers in Vitro and Vivo", </title> <type> Technical report, </type> <institution> NEC, </institution> <year> 1995. </year> <month> 9 </month>
References-found: 15

