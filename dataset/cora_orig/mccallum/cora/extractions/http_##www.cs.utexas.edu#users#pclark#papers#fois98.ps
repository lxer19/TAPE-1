URL: http://www.cs.utexas.edu/users/pclark/papers/fois98.ps
Refering-URL: http://www.cs.utexas.edu/users/pclark/papers/fois98.abs.html
Root-URL: 
Title: Ontology Reuse and Application  
Author: Mike Uschold, Mike Healy, Keith Williamson, Peter Clark, Steven Woods 
Keyword: ontology reuse, ontology application, ontology translation.  
Address: PO Box 3707, Seattle, USA  
Affiliation: Boeing Applied Research Technology,  
Web: http://www.cs.utexas.edu/users/pclark/papers/fois98.ps  
Note: In: Proc Int Conf on Formal Ontology and Information Systems FOIS'98 (1998)  
Abstract: In this paper, we describe an investigation into the reuse and application of an existing ontology for the purpose of specifying and formally developing software for aircraft design. Our goals were to clearly identify the processes involved in the task, and assess the cost-effectiveness of reuse. Our conclusions are that (re)using an ontology is far from an automated process, and instead requires significant effort from the knowledge engineer. We describe and illustrate some intrinsic properties of the ontology translation problem and argue that fully automatic translators are unlikely to be forthcoming in the foreseeable future. Despite the effort involved, our subjective conclusions are that in this case knowledge reuse was cost-effective, and that it would have taken significantly longer to design the knowledge content of this ontology from scratch in our application. Our preliminary results are promising for achieving larger-scale knowledge reuse in the future. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Barley, P. Clark, K. Williamson, and S. Woods. </author> <title> The neutral representation project. </title> <booktitle> In Proc AAAI-97 Spring Symposium on Ontological Engineering. </booktitle> <publisher> AAAI Press, </publisher> <year> 1997. </year>
Reference-contexts: towards an object-oriented representation style [7]. 3 The Process of Ontology Reuse and Application Motivation for Reuse The re-engineering of the panel layout application in Slang was performed prior to this experiment in ontology reuse as part of a wider objective of capturing engineering knowledge in an explicit, reusable form <ref> [1] </ref>. A physical quantity in engineering software is typically represented as a real-valued variable. So, in Slang, the weight of a panel was represented by a function mapping things of sort panel to things of sort real - i.e. weight: panel -&gt; real.
Reference: [2] <author> P. Borst, H. Akkermans, and J. </author> <title> Top. </title> <journal> Engineering ontologies. International Journal of Human-Computer Studies (submitted), </journal> <year> 1996. </year>
Reference-contexts: However, despite the potential advantages of such sharing, and the availability of such components in component libraries (e.g. [5]), it remains a challenging task to import and use such components. Despite the existence of many ontologies, evident from the literature, there are few published examples of such reuse (e.g. <ref> [2, 4, 9] </ref>). Furthermore, in cases where an ontology is reused, (e.g. as the basis for building a new ontology rather than starting from scratch) descriptions of how the ontologies are applied are terse or absent 1 .
Reference: [3] <author> R.L. Crole. </author> <title> Categories for Types. </title> <publisher> Cambridge University Press, </publisher> <year> 1993. </year>
Reference-contexts: It has a rigorous mathematical foundation, based on logic and category theory. It provides an order-sorted higher order logic representation language called Slang, whose semantics are founded on categorical type theory <ref> [3, 10] </ref>. It includes a rich set of primitives for composing specifications by reusing and parameterizing one or more copies of other specifications.
Reference: [4] <author> M. Cutkosky, R. Engelmore, R. Fikes, M. Genesereth, T. Gruber, W. Mark, J. Tenen-baum, and J. Weber. </author> <title> PACT: An experiment in integrating concurrent engineering systems. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 28-37, </pages> <month> Jan </month> <year> 1993. </year>
Reference-contexts: However, despite the potential advantages of such sharing, and the availability of such components in component libraries (e.g. [5]), it remains a challenging task to import and use such components. Despite the existence of many ontologies, evident from the literature, there are few published examples of such reuse (e.g. <ref> [2, 4, 9] </ref>). Furthermore, in cases where an ontology is reused, (e.g. as the basis for building a new ontology rather than starting from scratch) descriptions of how the ontologies are applied are terse or absent 1 .
Reference: [5] <author> R. Fikes, A. Farquhar, and J. Rice. </author> <title> Tools for assembling modular ontologies in ontolingua. </title> <booktitle> In Proceedings of AAAI-97, </booktitle> <pages> pages 436-441, </pages> <year> 1997. </year>
Reference-contexts: However, despite the potential advantages of such sharing, and the availability of such components in component libraries (e.g. <ref> [5] </ref>), it remains a challenging task to import and use such components. Despite the existence of many ontologies, evident from the literature, there are few published examples of such reuse (e.g. [2, 4, 9]).
Reference: [6] <author> M.R. Genesereth and R.E. Fikes. </author> <title> Knowledge interchange format, version 3.0 reference manual. </title> <type> Technical Report Logic-92-1, </type> <institution> Computer Science Department, Stanford University, </institution> <year> 1992. </year>
Reference-contexts: Lower level specifications in Slang must contain implementation information in order for Specware to generate code from them. Ontolingua Ontolingua, was developed specifically for the purpose of knowledge sharing and reuse in the context of knowledge-based systems, not for the development of software in general. Ontolingua, based on KIF <ref> [6] </ref>, was to facilitate reuse and interoperability by acting as an interchange format so that knowledge bases could be translated into and out of it.
Reference: [7] <author> T. Gruber. </author> <title> A translation approach to portable ontology specifications. </title> <journal> Knowledge Acquisition, </journal> <volume> 5(2) </volume> <pages> 199-220, </pages> <year> 1993. </year>
Reference-contexts: In this paper, we describe the start-to-finish process of reusing and applying an existing ontology. We conducted an experiment consisting of the following steps: a) take the engineering math ontology [8] written in Ontolingua <ref> [7] </ref> from the library of ontologies at the Stanford Knowledge Systems Laboratory (KSL) Ontology Server, b) translate it into a target specification language c) integrate it into the specification of an existing small engineering software component d) transform and refine the enhanced specification into executable code using Specware, a system for <p> Translating arbitrary sets of axioms in logic to any given output language, is not feasible. For this reason, Ontolingua is biased towards an object-oriented representation style <ref> [7] </ref>. 3 The Process of Ontology Reuse and Application Motivation for Reuse The re-engineering of the panel layout application in Slang was performed prior to this experiment in ontology reuse as part of a wider objective of capturing engineering knowledge in an explicit, reusable form [1]. <p> Translation Perhaps the most important observation from this experiment is that there is significant manual effort involved in translating an ontology. This observation is particularly significant given recent interest in fully automatic translation between Ontolingua and AI languages supporting computation (e.g. Lisp, Prolog, LOOM) <ref> [7] </ref>. From our experience, we believe that the issue involves not only a rich source of difficult challenges which may in time be surmounted, there are some inherent barriers to fully automating the process of producing an accurate translation between any two highly expressive languages.
Reference: [8] <author> T. Gruber and G. Olsen. </author> <title> An ontology for engineering mathematics. </title> <booktitle> In Proc. of the Fourth International Conference on Principles of Knowledge Representation and Reasoning. </booktitle> <publisher> Morgan Kauffman, </publisher> <year> 1994. </year>
Reference-contexts: In this paper, we describe the start-to-finish process of reusing and applying an existing ontology. We conducted an experiment consisting of the following steps: a) take the engineering math ontology <ref> [8] </ref> written in Ontolingua [7] from the library of ontologies at the Stanford Knowledge Systems Laboratory (KSL) Ontology Server, b) translate it into a target specification language c) integrate it into the specification of an existing small engineering software component d) transform and refine the enhanced specification into executable code using <p> math with the already existing specification of the panel layout example, and together refine this into executable code. 5 We now describe each of these steps in detail. 3.1 Understanding the Ontology & Finding a Kernel to Reuse The engineering math ontology is well documented both as a technical paper <ref> [8] </ref> and in its Ontolingua form. The latter is web-browsable and contains additional documentation not found in the paper. The process of understanding the ontology continued throughout the translation phase, as more details were required.
Reference: [9] <author> J. McGuire, D. Kuokka, J. Weber, J. Tenenbaum, T. Gruber, and G. Olsen. SHADE: </author> <title> Knowledge-based technology for the re-engineering problem. Concurrent Engineering: </title> <journal> Applications and Research (CERA), </journal> <volume> 1(2), </volume> <month> Sep </month> <year> 1993. </year>
Reference-contexts: However, despite the potential advantages of such sharing, and the availability of such components in component libraries (e.g. [5]), it remains a challenging task to import and use such components. Despite the existence of many ontologies, evident from the literature, there are few published examples of such reuse (e.g. <ref> [2, 4, 9] </ref>). Furthermore, in cases where an ontology is reused, (e.g. as the basis for building a new ontology rather than starting from scratch) descriptions of how the ontologies are applied are terse or absent 1 .
Reference: [10] <author> B. Pierce. </author> <title> Basic Category Theory for Computer Scientists. </title> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: It has a rigorous mathematical foundation, based on logic and category theory. It provides an order-sorted higher order logic representation language called Slang, whose semantics are founded on categorical type theory <ref> [3, 10] </ref>. It includes a rich set of primitives for composing specifications by reusing and parameterizing one or more copies of other specifications.
Reference: [11] <editor> M. (editor) Uschold. </editor> <title> Knowledge level modelling: Concepts and terminology. </title> <journal> Knowledge Engineering Review, </journal> <volume> 13(1), </volume> <year> 1998. </year>
Reference-contexts: The process of applying an ontology requires converting the knowledge-level <ref> [11] </ref> specification which the ontology provides into an implementation. This is time-consuming, and requires careful consideration of a) the context, intended usage, and idioms of both the source ontology representation language, and the target implementation language, and b) the specific task of the current application.
Reference: [12] <author> R. Waldinger, Y.V. Srinivas, A. Goldberg, and R. Jullig. </author> <title> Specware Language Manual, </title> <booktitle> 1996. </booktitle> <pages> 15 </pages>
Reference-contexts: Our model of panel layout is a research prototype intended to, among other things, demonstrate the feasibility of deriving knowledge based engineering software from reusable 3 components of formalized engineering knowledge. Specware Our platform for demonstrating ontology reuse and application is Specware, <ref> [12] </ref> a system for the specification and formal development of software. It has a rigorous mathematical foundation, based on logic and category theory. It provides an order-sorted higher order logic representation language called Slang, whose semantics are founded on categorical type theory [3, 10]. <p> Slang contains primitives for specifying refinements, which are formal mappings between specifications which move closer and closer to implementation. Formally, these consist of morphisms in the category of specifications and specification morphisms <ref> [12, 13] </ref>. The higher level specifications are refined step by step until sufficient implementation information is given that Specware may automatically generate executable code (currently in Lisp or C++). In order to generate executable code, there are two main tasks.
Reference: [13] <author> K. Williamson, M. Healy, and R. Jasper. </author> <title> Formally specifying engineering design rationale. </title> <type> Technical Report ISSTECH-97-011, </type> <institution> Applied Research and Technology, The Boeing Company, </institution> <year> 1997. </year>
Reference-contexts: Slang contains primitives for specifying refinements, which are formal mappings between specifications which move closer and closer to implementation. Formally, these consist of morphisms in the category of specifications and specification morphisms <ref> [12, 13] </ref>. The higher level specifications are refined step by step until sufficient implementation information is given that Specware may automatically generate executable code (currently in Lisp or C++). In order to generate executable code, there are two main tasks.
References-found: 13

