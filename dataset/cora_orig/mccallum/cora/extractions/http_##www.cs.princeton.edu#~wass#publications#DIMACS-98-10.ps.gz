URL: http://www.cs.princeton.edu/~wass/publications/DIMACS-98-10.ps.gz
Refering-URL: http://www.cs.princeton.edu/~wass/publications.html
Root-URL: http://www.cs.princeton.edu
Email: wass@cs.princeton.edu  
Title: a Virtue: The Effect of Delay on Competitiveness for Admission Control  
Author: by Michael H. Goldwasser 
Address: Princeton, NJ 08544  
Affiliation: Department of Computer Science Princeton University  
Note: Patience is  DIMACS is a partnership of Rutgers University, Princeton University, AT&T Labs-Research, Bell Labs and Bellcore. DIMACS is an NSF Science and Technology Center, funded under contract STC-91-19999; and also receives support from the New Jersey Commission on Science and Technology.  
Abstract: DIMACS Technical Report 98-10 February 1998 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Awerbuch, Y. Azar, and S. Plotkin. </author> <title> Throughput-competitive online routing. </title> <booktitle> In Proc. 33rd Symp. on Found. Comput. Sci., </booktitle> <pages> pages 32-40, </pages> <year> 1993. </year>
Reference-contexts: Awerbuch, Azar and Plotkin provide a deterministic, non-preemptive O (log )-competitive algorithm for maximizing the throughput on a network, where they require an additional bound on the bandwidth used by a single call <ref> [1] </ref>. They also provide a lower bound showing that this is the best possible result for a deterministic algorithm. The restriction on bandwidth was removed for the special case of tree networks by Awerbuch, Bartal Fiat and Rosen [2].
Reference: [2] <author> B. Awerbuch, Y. Bartal, A. Fiat, and A. Rosen. </author> <title> Competitive non-preemptive call control. </title> <booktitle> In Proc. 5th ACM Symp. on Discrete Algorithms, </booktitle> <pages> pages 312-320, </pages> <year> 1994. </year>
Reference-contexts: They also provide a lower bound showing that this is the best possible result for a deterministic algorithm. The restriction on bandwidth was removed for the special case of tree networks by Awerbuch, Bartal Fiat and Rosen <ref> [2] </ref>. Finally, an interesting result in relation to our work, is that of Feldman et. al. [5]. They consider the requirement of minimum delays proportional to job lengths, in the more general context of non-preemptive call control on networks.
Reference: [3] <author> S. Baruah, G. Koren, B. Mishra, A. Ragunathan, L. Rosier, and D. </author> <title> Shasta. Online scheduling in the presence of overload. </title> <booktitle> In Proc. 31st Symp. on Found. Comput. Sci., </booktitle> <pages> pages 100-110, </pages> <year> 1991. </year>
Reference-contexts: Baruah et. al. give a constant competitive algorithm for maximizing the resource utilization in a similar model as ours, except where they allow preemption of calls <ref> [3] </ref>. Our single resource scheduling problem is simply a special case of the more general problem of admission control of calls in larger communication networks.
Reference: [4] <author> S. Ben-David, A. Borodin, R. Karp, G. Tardos, and A. Widgerson. </author> <title> On the power of randomization in on-line algorithms. </title> <journal> Algorithmica, </journal> <volume> 11(1) </volume> <pages> 2-14, </pages> <year> 1994. </year>
Reference-contexts: In this case, the competitiveness compares the gain of the optimal schedule to the expected gain of the randomized algorithm. We assume that the input for an algorithm is chosen by an oblivious adversary, who must choose the entire sequence before the algorithm begins its work <ref> [4, 10] </ref>. In order to characterize the competitiveness of this scheduling problem based on different values of and !, we introduce the following notation. We let D (!; ) be the deterministic competitiveness of the scheduling problem for a fixed ! 0 and 1.
Reference: [5] <author> A. Feldmann, B. Maggs, J. Sgall, D. Sleator, and A. Tomkins. </author> <title> Competitive analysis of call admission algorithms that allow delay. </title> <type> Technical Report CMU-CS-95-102, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <year> 1995. </year> <month> - 24 </month> - 
Reference-contexts: A requirement that minimum delays be proportional to the job lengths was introduced into a different model for scheduling on networks, where lower bounds are provided showing that this requirement does not significantly improve the overall competitiveness of the problem <ref> [5] </ref>. The main result of our paper is that for this problem, requiring a job's delay to be at least proportional to the job's length significantly improves the competitiveness for online scheduling algorithms. <p> The restriction on bandwidth was removed for the special case of tree networks by Awerbuch, Bartal Fiat and Rosen [2]. Finally, an interesting result in relation to our work, is that of Feldman et. al. <ref> [5] </ref>. They consider the requirement of minimum delays proportional to job lengths, in the more general context of non-preemptive call control on networks.
Reference: [6] <author> S. Goldman, J. Parwatikar, and S. Suri. </author> <title> On-line scheduling with hard deadlines. </title> <booktitle> In Proc. of the Workshop on Algorithms and Data Structures, volume 1272 of Lecture Notes in Computer Science, </booktitle> <pages> pages 258-271. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: This model was then generalized to include delays by Goldman et. al.,, where they allow each job to specify an arbitrary delay <ref> [6] </ref>. Notice that the existence of delays, in general, acts as a double-edged sword. Clearly, the existence of delays can only help a scheduler in increasing the resource utilization, as it offers more flexibility for scheduling jobs. <p> We provide a lower bound showing that this is the best possible deterministic result, even when all jobs have one of three distinct lengths. In the special case where all jobs are required to have the same length (e.g., packets in an ATM network) <ref> [6] </ref>, we generalize previous results, showing that the natural greedy algorithm is 1 + 1 b!c+1 -competitive, and again that this is the best possible deterministic result. <p> Goldman, Parwatikar and Suri extended the model of Lipton and Tomkins to allow jobs to specify arbitrary delay times, up to which they are willing to wait <ref> [6] </ref>. When arbitrary delay times are allowed, their model is exactly the same as the case ! = 0 for our model. For arbitrary job lengths, they give a randomized algorithm that improves upon the result of Lipton and Tomkins, providing a 6 (dlg 2 e + 1)-competitive algorithm. <p> triple of positive numbers ha i ; l i ; w i i, where a i is the arrival time of the job, l i is the processing time, and w i is the amount of time the job is willing to wait after its arrival, before it must begin <ref> [6] </ref>. <p> For unit-length jobs, Goldman, Parwatikar and Suri prove a tight bound of D 1 (0) = 2, and they also show that D 1 (1) 3 2 and that R 1 (0) 4=3 <ref> [6] </ref>. <p> Although some rules may be better than others, we prove in Section 5.3 that any greedy-type algorithm is strongly competitive for all values of !. For these proofs, we borrow the notions of blocking and covering from <ref> [6] </ref>. Given two schedules and fl , assume that job J j 2 begins running in at time J j , and that - 6 - Unit-length jobs D 1 (!) R 1 (!) ! = 0 2 4=3 From [6] From [6] From [6] ! 0 1 + 1 2b!c+3 <p> proofs, we borrow the notions of blocking and covering from <ref> [6] </ref>. Given two schedules and fl , assume that job J j 2 begins running in at time J j , and that - 6 - Unit-length jobs D 1 (!) R 1 (!) ! = 0 2 4=3 From [6] From [6] From [6] ! 0 1 + 1 2b!c+3 Two distinct job lengths ^ D 2 (!) ^ R 2 (!) ! = 0 1 2 4 (Cor. 16) From [8] From [6] ! &gt; 0 1 + max ( d!e ; ! ) Arbitrary job lengths ^ D <p> borrow the notions of blocking and covering from <ref> [6] </ref>. Given two schedules and fl , assume that job J j 2 begins running in at time J j , and that - 6 - Unit-length jobs D 1 (!) R 1 (!) ! = 0 2 4=3 From [6] From [6] From [6] ! 0 1 + 1 2b!c+3 Two distinct job lengths ^ D 2 (!) ^ R 2 (!) ! = 0 1 2 4 (Cor. 16) From [8] From [6] ! &gt; 0 1 + max ( d!e ; ! ) Arbitrary job lengths ^ D (!) ^ <p> notions of blocking and covering from <ref> [6] </ref>. Given two schedules and fl , assume that job J j 2 begins running in at time J j , and that - 6 - Unit-length jobs D 1 (!) R 1 (!) ! = 0 2 4=3 From [6] From [6] From [6] ! 0 1 + 1 2b!c+3 Two distinct job lengths ^ D 2 (!) ^ R 2 (!) ! = 0 1 2 4 (Cor. 16) From [8] From [6] ! &gt; 0 1 + max ( d!e ; ! ) Arbitrary job lengths ^ D (!) ^ R (!) <p> 6 - Unit-length jobs D 1 (!) R 1 (!) ! = 0 2 4=3 From <ref> [6] </ref> From [6] From [6] ! 0 1 + 1 2b!c+3 Two distinct job lengths ^ D 2 (!) ^ R 2 (!) ! = 0 1 2 4 (Cor. 16) From [8] From [6] ! &gt; 0 1 + max ( d!e ; ! ) Arbitrary job lengths ^ D (!) ^ R (!) ! = 0 1 1 (Cor. 21) From [8] ! &gt; 0 2 + 1 (Cor. 22) (The. 10) Table 1: The lower/upper bounds for the deterministic/randomized competitiveness of the <p> To do so, we use a charging scheme, similar to those of <ref> [6, 8] </ref>. In general, we will devise charging schemes where every job J 2 J distributes up to cjJj units of value to various jobs of J 0 . <p> We show that Greedy achieves a competitive ratio of 1+ 1 b!c+1 . Later, we will see that this is in fact a strongly-competitive deterministic algorithm, for all values of !. As in <ref> [6] </ref>, we consider the schedule produced by Greedy, and call the periods during which the resource is continuously in use the busy periods of . <p> In this paper, we have set up the notation for the study of randomized online algorithms, but for the most part our results have involved deterministic algorithms. As a first step, we point towards a remaining open question of <ref> [6] </ref> concerning the case of unit-length jobs with no minimum delay. They show that the Greedy algorithm is a deterministic 2-competitive algorithm, and yet the strongest randomized lower bounds still allows for the possibility for a 4=3-competitive algorithm. <p> This scheduling model may be generalized in several ways. The problem can be formulated in a multi-processor setting, where more than one channel is available to the scheduler. Also, as is pointed out in <ref> [6] </ref>, we could add an additional parameter for each job specifying the payoff that the algorithm receives if that job is scheduled (in our model, the payoff is assumed to be exactly the length of the job).
Reference: [7] <author> A. Karlin, M. Manasse, L. Rudolph, and D. Sleator. </author> <title> Competitive snoopy paging. </title> <journal> Algo-rithmica, </journal> <volume> 3(1) </volume> <pages> 70-119, </pages> <year> 1988. </year>
Reference-contexts: We will analyze the performance of an algorithm using competitive analysis, comparing the schedule produced by the algorithm to an optimal schedule produced by an algorithm that has full knowledge of all jobs from the beginning <ref> [7, 11] </ref>. This framework can be used to model many applications, and typically is motivated mostly by applications of scheduling for the delivery of communication through a network. <p> that our lower bounds apply even when both ! and are given as part of the input, whereas our upper bounds are achieved using algorithms that need not know either of ! or in advance. 3.1 Competitive Analysis We use competitive analysis to measure the quality of an online algorithm <ref> [7, 11] </ref>. The performance of an online algorithm is evaluated by comparing the gain of the algorithm to the gain of the optimal o*ine algorithm that knows the entire future when making decisions.
Reference: [8] <author> R. Lipton and A. Tomkins. </author> <title> Online interval scheduling. </title> <booktitle> In Proc. 5th ACM Symp. on Discrete Algorithms, </booktitle> <pages> pages 302-311, </pages> <year> 1994. </year>
Reference-contexts: A special case of this problem, studied by Lipton and Tomkins, is when all jobs have delay exactly zero, and thus immediately need to be scheduled or else lost <ref> [8] </ref>. This model was then generalized to include delays by Goldman et. al.,, where they allow each job to specify an arbitrary delay [6]. Notice that the existence of delays, in general, acts as a double-edged sword. <p> When ! = 0, a previous lower bound shows that the competitiveness - 2 - depends logarithmically on the maximum job length <ref> [8] </ref>, even when randomization is allowed, and thus no bounded competitiveness is possible when arbitrary job lengths are allowed. <p> we provide more detailed results for the competitiveness when parameterized by both the value of !, as well as the ratio between minimum and maximum job lengths. 2 Previous Work The problem of scheduling a single resource non-preemptively, when all jobs have delay zero was studied by Lipton and Tomkins <ref> [8] </ref>. In the case where all jobs have one of two lengths 1 or , they provide a randomized online algorithm that is 2-competitive for any , and they give a lower bound that this is the best possible result. <p> Lipton and Tomkins prove the lower bound, ^ R (0) 2, by giving a proof that implies that for any fixed , R 2 (0; ) 2 1 <ref> [8] </ref>. When arbitrary length jobs are allowed, they prove a lower bound of R (0; ) = (log ()), and thus ^ R (0) = 1. <p> that - 6 - Unit-length jobs D 1 (!) R 1 (!) ! = 0 2 4=3 From [6] From [6] From [6] ! 0 1 + 1 2b!c+3 Two distinct job lengths ^ D 2 (!) ^ R 2 (!) ! = 0 1 2 4 (Cor. 16) From <ref> [8] </ref> From [6] ! &gt; 0 1 + max ( d!e ; ! ) Arbitrary job lengths ^ D (!) ^ R (!) ! = 0 1 1 (Cor. 21) From [8] ! &gt; 0 2 + 1 (Cor. 22) (The. 10) Table 1: The lower/upper bounds for the deterministic/randomized competitiveness <p> job lengths ^ D 2 (!) ^ R 2 (!) ! = 0 1 2 4 (Cor. 16) From <ref> [8] </ref> From [6] ! &gt; 0 1 + max ( d!e ; ! ) Arbitrary job lengths ^ D (!) ^ R (!) ! = 0 1 1 (Cor. 21) From [8] ! &gt; 0 2 + 1 (Cor. 22) (The. 10) Table 1: The lower/upper bounds for the deterministic/randomized competitiveness of the problem, based on specific values of !. <p> To do so, we use a charging scheme, similar to those of <ref> [6, 8] </ref>. In general, we will devise charging schemes where every job J 2 J distributes up to cjJj units of value to various jobs of J 0 .
Reference: [9] <author> D. Long and M. Thakur. </author> <title> Scheduling realtime disk transfers for continuous media applications. </title> <booktitle> In Proc. 12th IEEE Symp. on Mass Storage Systems, </booktitle> <pages> pages 227-232, </pages> <year> 1993. </year>
Reference-contexts: They provide an O (log 1+* )-competitive randomized algorithm for this case. This work generalized an earlier deterministic lower bound by Long and Thakur for a related scheduling model in the context of scheduling disk transfers <ref> [9] </ref>. Goldman, Parwatikar and Suri extended the model of Lipton and Tomkins to allow jobs to specify arbitrary delay times, up to which they are willing to wait [6]. When arbitrary delay times are allowed, their model is exactly the same as the case ! = 0 for our model.
Reference: [10] <author> P. Raghavan and M. Snir. </author> <title> Memory versus randomization in on-line algorithms. </title> <journal> IBM Journal of Research and Development, </journal> <volume> 38 </volume> <pages> 683-707, </pages> <year> 1994. </year>
Reference-contexts: In this case, the competitiveness compares the gain of the optimal schedule to the expected gain of the randomized algorithm. We assume that the input for an algorithm is chosen by an oblivious adversary, who must choose the entire sequence before the algorithm begins its work <ref> [4, 10] </ref>. In order to characterize the competitiveness of this scheduling problem based on different values of and !, we introduce the following notation. We let D (!; ) be the deterministic competitiveness of the scheduling problem for a fixed ! 0 and 1.
Reference: [11] <author> D. Sleator and R. Tarjan. </author> <title> Amortized efficiency of list update and paging rules. </title> <journal> Communications of the ACM, </journal> <volume> 28 </volume> <pages> 202-208, </pages> <year> 1985. </year>
Reference-contexts: We will analyze the performance of an algorithm using competitive analysis, comparing the schedule produced by the algorithm to an optimal schedule produced by an algorithm that has full knowledge of all jobs from the beginning <ref> [7, 11] </ref>. This framework can be used to model many applications, and typically is motivated mostly by applications of scheduling for the delivery of communication through a network. <p> that our lower bounds apply even when both ! and are given as part of the input, whereas our upper bounds are achieved using algorithms that need not know either of ! or in advance. 3.1 Competitive Analysis We use competitive analysis to measure the quality of an online algorithm <ref> [7, 11] </ref>. The performance of an online algorithm is evaluated by comparing the gain of the algorithm to the gain of the optimal o*ine algorithm that knows the entire future when making decisions.
References-found: 11

