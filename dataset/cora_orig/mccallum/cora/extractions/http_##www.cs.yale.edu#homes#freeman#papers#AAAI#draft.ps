URL: http://www.cs.yale.edu/homes/freeman/papers/AAAI/draft.ps
Refering-URL: http://www.cs.yale.edu/homes/freeman/lifestreams.html
Root-URL: http://www.cs.yale.edu
Title: Lifestreams: Organizing your Electronic Life  
Author: Eric Freeman and Scott Fertig 
Address: New Haven, Connecticut, 06520  
Affiliation: Yale University Department of Computer Science  
Abstract: The "Web," an attempt to organize the electronic world, has become the focus of a wide range of research activities from agents to information retrieval to virtual reality systems, and is a central focus of work presented at this symposium. Our work considers a more humble task: that of organizing our own electronic lives. We introduce a new metaphor, Lifestreams, for dynamically organizing a user's personal files, electronic mail, schedules, rolodex and financial data. In this paper we describe our prototype Lifestreams system and in the process cover most of the topics of this symposium, including indexing, information retrieval, user interfaces, multi source integration and multimedia.
Abstract-found: 1
Intro-found: 1
Reference: [ Borenstein and Freed, 1992 ] <author> N. Boren-stein and N. Freed. </author> <title> MIME (Multipurpose Internet Mail Extensions) part one: Mechanisms for specifying and describing the format of internet message bodies, </title> <month> June </month> <year> 1992. </year>
Reference-contexts: The user can view (or edit) a document by clicking on its representation in the stream. Rather than committing to a document model (e.g., ATK, PDF, ASCII, HTML, Microsoft Word, etc.) we have instead chosen an open architecture based on MIME types <ref> [ Borenstein and Freed, 1992 ] </ref> .
Reference: [ Borenstein and Rose, 1993 ] <author> Nathaniel Borenstein and Marshall T. Rose. </author> <title> MIME extensions for mail-enabled applications: </title> <editor> application/Safe-Tcl and multipart/enabled-mail, </editor> <month> Nov </month> <year> 1993. </year>
Reference-contexts: All three agent types are specified in Tcl/Tk and have access to Lifestreams through our extended command set. Personal agents "live" in the user interface; users can define their own arbitrary personal agents and attach them to the user interface. Document agents are loosely based on enabled-mail <ref> [ Borenstein and Rose, 1993 ] </ref> and are stored in a document attribute until they are spawned. Document agents can be spawned on three different events: (1) a document's arrival at a stream, (2) when it is read for the first time, and (3) any time it is read.
Reference: [ Cook, 1995 ] <author> Terry Cook. </author> <title> Do you know where your data are? In Technology Review. </title> <publisher> MIT, </publisher> <month> January </month> <year> 1995. </year>
Reference-contexts: Like a diary of our electronic lives, streams document our work, correspondence, and transactions. This historical context can be crucial in an organizational setting <ref> [ Cook, 1995 ] </ref> and notably, most current software systems do little to track when, where, and why documents are created and deleted, something that was taken for granted in the paper-based world.
Reference: [ Fertig and Gelernter, 1991 ] <author> Scott J. Fertig and David H. Gelernter. FGP: </author> <title> A software architecture for acquiring knowledge from cases. </title> <booktitle> In Proc. of the International Joint Conference on Artificial Intelligence, </booktitle> <month> August </month> <year> 1991. </year>
Reference-contexts: This extends the model first proposed by Fertig and Gelernter <ref> [ Fertig and Gelernter, 1991 ] </ref> to support the automatic calculation of retrieval cue evocativeness. The concept of feature evocativeness has a long history in AI, going back at least to the expert system Internist-1 [ Miller et al., 1982 ] .
Reference: [ Freeman, 1995 ] <author> Eric Freeman. </author> <title> Lifestreams for the New-ton. </title> <journal> PDA Developer, </journal> <volume> 3(4) </volume> <pages> 42-45, </pages> <month> July/August </month> <year> 1995. </year>
Reference-contexts: The workstation version provides an interesting graphical interface and implements the full-range of Lifestream functionalities, while the New-ton version implements a minimal method of accessing streams| given our lack of space, we concentrate on the UNIX version in this paper (information on the Newton version can be found in <ref> [ Freeman, 1995 ] </ref> .) 3.1 The Viewport Our workstation viewport can be seen in figure 1. The viewport is implemented in C and Tcl/Tk, extended with our own command set. In the interface, we have attempted to preserve the stream-based metaphor.
Reference: [ Gifford et al., 1991 ] <author> David K. Gifford, Pierre Jouvelot, Mark Sheldon, and James O'Toole. </author> <title> Semantic file systems. </title> <booktitle> In 13th ACM Symposium on Operating Systems Principles, </booktitle> <month> October </month> <year> 1991. </year>
Reference-contexts: Transfer copies a document from your stream to someone else's stream. Find prompts the user for a search query, such as "all email I haven't responded to," or "all faxes I've sent to Schwartz" and creates a substream. Substreams, like virtual directories <ref> [ Gifford et al., 1991; Manber and Wu, 1993 ] </ref> , present the user with a "view" of a document collection. In our case, this view contains all the documents that are relevant to our search query.
Reference: [ Klark and Manber, 1995 ] <author> Paul Klark and Udi Manber. </author> <title> Developing a personal internet assistant. </title> <booktitle> In ED-MEDIA '95 World conference on educational multimedia and hypermedia, </booktitle> <month> June </month> <year> 1995. </year>
Reference-contexts: We were able to solve both of these problems with Lifestreams. We developed a system similar to "warm lists" <ref> [ Klark and Manber, 1995 ] </ref> , whereby a daemon watches each user's bookmark file, and each time a new bookmark is added the same bookmark is added to Lifestreams as a new "URL document." The effect of opening a URL document in Lifestreams is that our web browser comes to
Reference: [ Manber and Wu, 1993 ] <author> Udi Manber and Sun Wu. Glimpse: </author> <title> A tool to search through entire file systems. </title> <type> Technical Report 093-34, </type> <institution> Department of Computer Science, The Univesity of Arizona, </institution> <month> October </month> <year> 1993. </year>
Reference-contexts: Transfer copies a document from your stream to someone else's stream. Find prompts the user for a search query, such as "all email I haven't responded to," or "all faxes I've sent to Schwartz" and creates a substream. Substreams, like virtual directories <ref> [ Gifford et al., 1991; Manber and Wu, 1993 ] </ref> , present the user with a "view" of a document collection. In our case, this view contains all the documents that are relevant to our search query.
Reference: [ Miller et al., 1982 ] <author> R.A. Miller, H. Pople, and J.D. Meyers. Internist-i, </author> <title> an experimental computer-based diagnostic consultant for general internal medicine. </title> <journal> New England Journal of Medicine, </journal> <volume> 307(8) </volume> <pages> 468-476, </pages> <month> August </month> <year> 1982. </year>
Reference-contexts: This extends the model first proposed by Fertig and Gelernter [ Fertig and Gelernter, 1991 ] to support the automatic calculation of retrieval cue evocativeness. The concept of feature evocativeness has a long history in AI, going back at least to the expert system Internist-1 <ref> [ Miller et al., 1982 ] </ref> . But whereas the authors of Internist-1 manually assigned weights to features, the Lifestreams server will empirically and temporarily assign weights.
References-found: 9

