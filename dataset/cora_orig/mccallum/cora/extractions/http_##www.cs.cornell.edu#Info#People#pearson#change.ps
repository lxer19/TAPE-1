URL: http://www.cs.cornell.edu/Info/People/pearson/change.ps
Refering-URL: http://www.cs.cornell.edu/Info/People/pearson/pearson.html
Root-URL: 
Email: pearson@cs.cornell.edu  
Title: A Polynomial-time Algorithm for the Change-Making Problem  
Author: David Pearson 
Date: June 14, 1994  
Address: Ithaca, New York 14853, USA  
Affiliation: Computer Science Department Cornell University  
Abstract: The change-making problem is the problem of representing a given value with the fewest coins possible from a given set of coin denominations. To solve this problem for arbitrary coin systems is NP-hard [L]. We investigate the problem of determining whether the greedy algorithm always produces the optimal result for a given coin system. Chang and Gill [CG] show that this can be solved in time polynomial in the size of the largest coin and in the number of coins. Kozen and Zaks [KZ] give a more efficient algorithm, and pose as an open problem whether there is an algorithm to solve this problem which is polynomial in the size of the input. In this paper, we will derive such an algorithm. We first obtain a characterization of the smallest counterexample (if there is one) for which the greedy algorithm is not optimal. We then derive a set of O(n 2 ) possible values (where n is the number of coins) which must contain the smallest counterexample. Each can be tested with O(n) arithmetic operations, giving us an O(n 3 ) algorithm.
Abstract-found: 1
Intro-found: 1
Reference: [CG] <author> Chang, S. K., A. Gill, </author> <title> "Algorithmic solution of the change-making problem," </title> <journal> J. Assoc. Comput. Mach. </journal> <month> 17:1 (January </month> <year> 1970), </year> <pages> pp. 113-122. </pages>
Reference-contexts: We call the coin system C canonical if G (x) = M (x) for all x. It is not immediately clear whether there is a finite process to show that a coin system is canonical, since there are infinitely many values x to test. However, Chang and Gill <ref> [CG] </ref> show that if no counterexample exists for which G (x) 6= M (x) in a certain finite set, then no counterexample exists. The size of this set is polynomial in the value of the largest coin c 1 , in the worst case O (c 1 3 ).
Reference: [GJ] <author> Garey, M. R., D. S. Johnson, </author> <title> Computers and Intractability: a Guide to the Theory of NP-Completeness. </title> <editor> W. H. </editor> <publisher> Freeman, </publisher> <year> 1979. </year>
Reference-contexts: 1 Introduction In the change-making problem, we are given a finite set of coin denominations and an unlimited supply of coins in each denomination. We want to represent a given value with the fewest coins possible. The problem of determining the optimal representation in general is NP-hard <ref> [GJ, KZ] </ref>. However, in almost all coin systems in use in the world, the problem can be efficiently solved by the greedy algorithm. This algorithm repeatedly takes the largest coin whose value is no larger than the remaining amount. For general systems, the greedy algorithm is not always optimal.
Reference: [KZ] <author> Kozen, D., S. Zaks, </author> <title> "Optimal bounds for the change-making problem," </title> <institution> Theor. Comput. Sci. </institution> <month> 123 </month> <year> (1994), </year> <pages> pp. 377-388. </pages>
Reference-contexts: 1 Introduction In the change-making problem, we are given a finite set of coin denominations and an unlimited supply of coins in each denomination. We want to represent a given value with the fewest coins possible. The problem of determining the optimal representation in general is NP-hard <ref> [GJ, KZ] </ref>. However, in almost all coin systems in use in the world, the problem can be efficiently solved by the greedy algorithm. This algorithm repeatedly takes the largest coin whose value is no larger than the remaining amount. For general systems, the greedy algorithm is not always optimal. <p> The size of this set is polynomial in the value of the largest coin c 1 , in the worst case O (c 1 3 ). Kozen and Zaks <ref> [KZ] </ref> show that the smallest counterexample w (if there is one) must lie in the range c n2 w &lt; c 1 + c 2 . <p> They leave it as an open problem whether an algorithm exists which is polynomial in the size of the input. It is NP-hard to decide, for an arbitrary coin system, whether the greedy algorithm is optimal for a specific value x <ref> [KZ] </ref>. Answering the same question for all x seems intuitively harder, but is actually easier. The smallest counterexample is much easier to test than an arbitrary one, and it has a particular structure which will make it easy to find.
Reference: [L] <author> Lueker, G. S., </author> <title> "Two NP-complete problems in nonnegative integer programming," </title> <type> Report No. 178, </type> <institution> Computer Science Laboratory, Princeton University, </institution> <year> 1975. </year> <month> 5 </month>
References-found: 4

