URL: http://www.cs.columbia.edu/~kar/pubsk/aggconstraints.ps
Refering-URL: http://www.cs.columbia.edu/~kar/pubsk/pubsk.html
Root-URL: http://www.cs.columbia.edu
Email: kar@cs.columbia.edu  divesh@research.att.com  pjs@cs.mu.oz.au  sudarsha@cse.iitb.ernet.in  E-mail: divesh@research.att.com.  
Phone: Tel: +1-(908)-582-3194,  
Title: Foundations of Aggregation Constraints  
Author: Kenneth A. Ross Divesh Srivastava Peter J. Stuckey S. Sudarshan 
Keyword: Aggregate functions, satisfiability, constraint selections, query optimization  
Note: Theoretical Computer Science B, Vol. 190, to appear  Contact author. AT&T Labs Research, 600-700  The research of Peter J. Stuckey was partially supported by the Centre for Intelligent Decision Systems and ARC Grant A49130842. Thework of S. Sudarshan was performed while he was at AT&T Bell  
Address: New York, NY 10027, USA  Murray Hill, NJ 07974, USA  Parkville, 3052, Australia  Powai, Mumbai 400 076, India  Mountain Avenue, Murray Hill, NJ 07974, USA,  Murray Hill, NJ 07974, USA.  
Affiliation: Columbia University  AT&T Labs Research  University of Melbourne  Indian Institute of Technology  Laboratories,  
Abstract: We introduce a new constraint domain, aggregation constraints, that is useful in database query languages, and in constraint logic programming languages that incorporate aggregate functions. We formally study the fundamental problem of determining if a conjunction of aggregation constraints is satisfiable, and show that, for many classes of aggregation constraints, the problem is undecidable. We describe a complete and minimal axiomatization of aggregation constraints, for the SQL aggregate functions min, max, sum, count and average, over a non-empty, finite multiset on several domains. This axiomatization helps identify classes of aggregation constraints for which the satis-fiability check is efficient. We present a polynomial-time algorithm that directly checks for satisfiability of a conjunction of aggregation range constraints over a single multiset; this is a practically useful class of aggregation constraints. We discuss the relationships between aggregation constraints over a non-empty, finite multiset of reals, and constraints on the elements of the multiset. We show how these relationships can be used to push constraints through aggregate functions to enable compile-time optimization of database queries involving aggregate functions and constraints. fl A preliminary version of this paper appeared in [5]. y The research of Kenneth A. Ross was supported by NSF grant IRI-9209029, by a grant from the AT&T Foundation, by a David and Lucile Packard Foundation Fellowship in Science and Engineering, by a Sloan Foundation Fellowship, and by an NSF Young Investigator Award. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Joxan Jaffar, Spiro Michaylov, Peter J. Stuckey, and Roland H. C. Yap. </author> <title> The CLP(R) language and system. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 14(3) </volume> <pages> 339-395, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: The techniques described in this paper can be used to efficiently check for satisfiability of such aggregation constraints. 2 Checking satisfiability of aggregation constraints can be used much like checking satis-fiability of ordinary arithmetic constraints in a constraint logic programming system like CLP (R) <ref> [1] </ref>. Aggregate functions are typically applied only after multisets have been constructed. However, checking satisfiability of aggregation constraints even before the mul-tisets have been constructed can be used to restrict the search space by not generating subgoals that are guaranteed to fail, as illustrated by the above view and query.
Reference: [2] <author> Alon Y. Levy, Inderpal S. Mumick, and Yehoshua Sagiv. </author> <title> Query optimization by predicate move-around. </title> <booktitle> In Proceedings of the International Conference on Very Large Databases, </booktitle> <pages> pages 96-107, </pages> <address> Santiago, Chile, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: Intuitively, only answers that satisfy these constraints are "relevant" to the query. Such constraints are referred to as query constraints, and are used extensively in query optimization (e.g., <ref> [9, 7, 8, 2] </ref>). Query constraints in the presence of aggregate functions have been considered in [9, 2]. However, they consider special cases. <p> Intuitively, only answers that satisfy these constraints are "relevant" to the query. Such constraints are referred to as query constraints, and are used extensively in query optimization (e.g., [9, 7, 8, 2]). Query constraints in the presence of aggregate functions have been considered in <ref> [9, 2] </ref>. However, they consider special cases. <p> Levy et al. <ref> [2] </ref> only consider constraints of the form max (S) c and min (S) c, where c is a constant. <p> Another important direction is to examine how this research can be used to improve query optimization and integrity constraint verification in database query languages such as SQL. Sudarshan and Ramakrishnan [9] and Levy et al. <ref> [2] </ref> consider how to use simple aggregation conditions for query optimization; it would be interesting to see how their work can be generalized. It would also be interesting to see how to use aggregation constraints in conjunction with Stuckey and Sudarshan's technique [8] for compilation of query constraints.
Reference: [3] <author> Kim Marriott and Peter J. Stuckey. </author> <title> Semantics of constraint logic programs with optimization. </title> <journal> Letters on Programming Languages and Systems, </journal> <volume> 2(1-4):197-212, </volume> <year> 1993. </year>
Reference-contexts: In this paper, we formally study constraints on the results of aggregate functions on multisets; we refer to this constraint domain as aggregation constraints. This is a novel constraint domain that is useful in database query languages, and in constraint logic programming languages that incorporate aggregate functions <ref> [3] </ref>. We make the following contributions in this paper: 1. We study the fundamental problem of determining if a conjunction of aggregation constraints is satisfiable, and show that, for many classes of aggregation constraints, the problem is undecidable (Section 3). 2.
Reference: [4] <author> Jim Melton and Alan R. Simon. </author> <title> Understanding the new SQL: A complete guide. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Francisco, CA, </address> <year> 1993. </year>
Reference-contexts: We describe a complete and minimal axiomatization of aggregation constraints, for the aggregate functions min, max, sum, count and average, over a non-empty, finite multiset on several domains (Section 4). These aggregate functions are exactly those supported in SQL-92 <ref> [4] </ref>. The axiomatization enables a natural reduction from this class of aggregation constraints to the class of mixed integer/real, non-linear arithmetic constraints. This axiomatization also helps identify interesting classes of aggregation constraints for which the satisfiability check is efficient. 3.
Reference: [5] <author> Kenneth A. Ross, Divesh Srivastava, Peter J. Stuckey, and S. Sudarshan. </author> <title> Foundations of aggregation constraints. </title> <booktitle> In Proceedings of the Second International Workshop on Principles and Practice of Constraint Programming, </booktitle> <pages> pages 193-204, </pages> <address> Orcas Island, WA, </address> <year> 1994. </year> <booktitle> Lecture Notes in Computer Science 874, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference: [6] <author> Alexander Schrijver. </author> <title> Theory of Linear and Integer Programming. Discrete Mathematics and Optimization. </title> <publisher> Wiley-Interscience, </publisher> <year> 1986. </year>
Reference-contexts: There is a similar reduction from linear aggregation constraints to integer linear arithmetic constraints as well. Checking for satisfiability of linear arithmetic constraints over the integers is NP-complete <ref> [6] </ref>. The result follows. 2 7 4 An Axiomatization In this section, we present a complete and minimal set of relationships between the values of the aggregate functions on a single multiset. The intuition here is that the domain of aggregation constraints only allows aggregation terms on individual multisets. <p> Interactions between different multisets is possible only via arithmetic constraints between the results of the aggregate functions on individual multisets. Consequently, relationships between the results of aggregate functions on different multisets can be inferred using techniques from the language of ordinary arithmetic constraints (see <ref> [6] </ref>, for example). Definition 4.1 (Aggregate Assignment and Aggregate Satisfiability) An aggregate assignment maps each aggregation term of the form F (S), where F is an aggregate function and S is a multiset variable, to a value. <p> If the original aggregation constraint is linear and the multiset elements are drawn from the reals, the transformed arithmetic constraint is also linear over the reals; satisfiability can now be checked in time polynomial in the size of the aggregation constraint, using any of the standard techniques (see <ref> [6] </ref>, for example) for solving linear arithmetic constraints over the reals.
Reference: [7] <author> Divesh Srivastava and Raghu Ramakrishnan. </author> <title> Pushing constraint selections. </title> <journal> Journal of Logic Programming, </journal> <volume> 16(3-4):361-414, </volume> <year> 1993. </year>
Reference-contexts: If the employee relation is a database relation, these constraints may be specified as integrity constraints on the database. If the employee relation is a derived view relation, these constraints may be computed using the integrity constraints on the database relations and the definition of the employee relation (see <ref> [7] </ref>, for example). Constraints on the tuples of the employee relation can be used to infer constraints on the results of the aggregate functions (and hence on the tuples of V). <p> Intuitively, only answers that satisfy these constraints are "relevant" to the query. Such constraints are referred to as query constraints, and are used extensively in query optimization (e.g., <ref> [9, 7, 8, 2] </ref>). Query constraints in the presence of aggregate functions have been considered in [9, 2]. However, they consider special cases.
Reference: [8] <author> Peter J. Stuckey and S. Sudarshan. </author> <title> Compiling query constraints. </title> <booktitle> In Proceedings of the ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 56-67, </pages> <address> Minneapolis, MN, </address> <month> May </month> <year> 1994. </year> <month> 31 </month>
Reference-contexts: Intuitively, only answers that satisfy these constraints are "relevant" to the query. Such constraints are referred to as query constraints, and are used extensively in query optimization (e.g., <ref> [9, 7, 8, 2] </ref>). Query constraints in the presence of aggregate functions have been considered in [9, 2]. However, they consider special cases. <p> It would also be interesting to see how to use aggregation constraints in conjunction with Stuckey and Sudarshan's technique <ref> [8] </ref> for compilation of query constraints. We believe that we have identified an important area of research, namely aggregation constraints, and have laid the foundations for further research.
Reference: [9] <author> S. Sudarshan and Raghu Ramakrishnan. </author> <title> Aggregation and relevance in deductive databases. </title> <booktitle> In Proceedings of the International Conference on Very Large Databases, </booktitle> <pages> pages 501-512, </pages> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year> <month> 32 </month>
Reference-contexts: Intuitively, only answers that satisfy these constraints are "relevant" to the query. Such constraints are referred to as query constraints, and are used extensively in query optimization (e.g., <ref> [9, 7, 8, 2] </ref>). Query constraints in the presence of aggregate functions have been considered in [9, 2]. However, they consider special cases. <p> Intuitively, only answers that satisfy these constraints are "relevant" to the query. Such constraints are referred to as query constraints, and are used extensively in query optimization (e.g., [9, 7, 8, 2]). Query constraints in the presence of aggregate functions have been considered in <ref> [9, 2] </ref>. However, they consider special cases. <p> Such constraints are referred to as query constraints, and are used extensively in query optimization (e.g., [9, 7, 8, 2]). Query constraints in the presence of aggregate functions have been considered in [9, 2]. However, they consider special cases. Sudarshan and Ramakrishnan <ref> [9] </ref> essentially consider dynamic order constraints of the form X f 1 and X f 2 , where f 1 is the "current" value of min (S) and f 2 is the "current" value of max (S), and S is a multiset that is incrementally computed during program evaluation. <p> Another important direction is to examine how this research can be used to improve query optimization and integrity constraint verification in database query languages such as SQL. Sudarshan and Ramakrishnan <ref> [9] </ref> and Levy et al. [2] consider how to use simple aggregation conditions for query optimization; it would be interesting to see how their work can be generalized.
References-found: 9

