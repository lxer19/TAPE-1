URL: http://www.cis.ohio-state.edu/~rjmiller/Teaching/788dir/papers/zhkf95.ps
Refering-URL: http://www.cis.ohio-state.edu/~rjmiller/Teaching/788dir/bib.html
Root-URL: 
Email: email: fgzhou, hull, king, franchitg@cs.colorado.edu  
Title: Data Integration and Warehousing Using H2O  
Author: Gang Zhou Richard Hull Roger King Jean-Claude Franchitti 
Address: Boulder, CO 80309-0430  
Affiliation: Computer Science Department, University of Colorado  
Abstract: This paper presents a broad framework for data integration, that supports both data materialization and virtual view capabilities, and that can be used with legacy as well as modern database systems. The framework is based on "integration mediators", these are software components that use techniques generalized from active databases, such as triggering and rulebases. This permits the logic, especially for incremental maintenance of materialized data, of an integration mediator to be specified in a relatively declarative and modular fashion. One specific focus of this paper is the development of a taxonomy of the solution space for supporting and maintaining integrated views. A second focus concerns providing support for intricate object matching criteria that specify when object representations (e.g., OIDs) in different databases correspond to the same object-in-the-world (or interchangeable ones).
Abstract-found: 1
Intro-found: 1
Reference: [AHV95] <author> S. Abiteboul, R. Hull, V. Vianu. </author> <title> Foundations of Databases. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1995. </year>
Reference-contexts: Export classes are defined as views constructed from the source databases and from the match classes. The current prototype can support export classes that are defined using what amounts to conjunctive queries <ref> [AHV95] </ref>; these correspond to relational algebra queries that can be expressed using selection, projection, and join. Given a view defined by such a query and information about what parts of it should be materialized, it is relatively straightforward to determine what (projections of) source database classes should be materialized.
Reference: [ACHK93] <author> Y. Arens, C.Y. Chee, C.N. Hsu, </author> <title> C.A. Knoblock. Retrieving and integrating data from multiple information sources. </title> <journal> Intl. Journal of Intelligent and Cooperative Information Systems, </journal> <volume> 2(2) </volume> <pages> 127-158, </pages> <year> 1993. </year> <month> 38 </month>
Reference-contexts: The choices include fully materialized approach, as presented in references [WHW89, KAAK93], which materializes all relevant information in the data warehouse of the mediator; hybrid approach, as illustrated in the Student/Employee example of Section 2, that materializes only part of the relevant information; and fully virtual approach, as presented in <ref> [DH84, ACHK93, FRV95] </ref>, that uses query pre-processing and query shipping to answer queries that are made against the integrated view. <p> For communication between source databases and the integration mediators we are using Knowledge Query and Manipulation Language (KQML) [FWW + 93]. In the near future, we plan to extend this research primarily in the direction of the hybrid material-ized/virtual approach. In one experiment we plan to use the SIMS <ref> [ACHK93] </ref> query processing engine to execute queries where matching information is materialized but all other export data is virtual. We also plan to incorporate mechanisms for integrating data that involves related but "non-congruent" classes, in the spirit of [Cha94, CH95].
Reference: [BDD + 95] <author> O. Boulcema, J. Dalrymple, M. Doherty, J-C. Franchitti, R. Hull, R. King, and G. Zhou. </author> <title> Incorpo rating active and multi-database-state services into an OSA-compliant interoperability toolkit. The Collected Arcadia Papers, Second Edition. </title> <institution> University of California at Irvine, </institution> <year> 1995. </year>
Reference-contexts: A fundamental aspect of data warehousing is propagation of incremental updates at the source databases to the warehouse. Activeness, as found in active databases [WC95], is emerging as the paradigm of choice for supporting such propagation. Part of the H2O project is focused on the notion of "active module" <ref> [Dal95, BDD + 95] </ref>. These are software modules that include a rule base, an execution model for rule application, and optionally a local persistent store. While an active module might be a full-fledged active database, it might also be a lightweight process supporting a focused family of functionalities. <p> This paper is a survey of some aspects of the on-going research in the H2O project at the University of Colorado, Boulder, and the presentation here is somewhat abbreviated. More details can be found in <ref> [BDD + 95, ZHKF95, DHDD95, DHR95] </ref>. The rest of the paper is organized as follows: Section 2 gives a motivating example that illustrates our approach. Section 3 presents the taxonomy of the space of approaches to data integration. The notion of active modules is described in Section 4. <p> Two representative rules responding to the creation of new Student objects in the source database StudentDB, written in a pidgin H2O <ref> [BDD + 95, DHR95] </ref> rule language, are shown in Figure 4. Intuitively, the two rules state: Rule R1: If an object of class Student is created, create a new object of class Stud minus Emp. <p> In its broadest sense, an active module <ref> [Dal95, BDD + 95] </ref> is a software module that incorporates: * a rule base, that specifies the bulk of the behavior of the module in a relatively declarative fashion; * an execution model for applying the rules (in the spirit of active databases); * (optionally) a local persistent store 1 An
Reference: [BLT86] <author> J.A. Blakeley, P.-A. Larson, F.W. Tompa. </author> <title> Efficiently updating materialized views. </title> <booktitle> Proc. ACM SIGMOD Symp. on the Management of Data, </booktitle> <pages> 61-71, </pages> <year> 1986. </year>
Reference-contexts: This provides two major advantages: First, it could significantly reduce the network traffic by transferring deltas rather than full snapshots of the membership of a class. Second, most algorithms <ref> [BLT86, GMS93] </ref> for maintaining materialized views compute the incremental updates on derived data based on the net effects of the updates of the source data.
Reference: [Cha94] <author> T.-P. Chang. </author> <title> On Incremental Update Propagation Between Object-Based Databases. </title> <type> PhD thesis, </type> <institution> University of Southern California, </institution> <address> Los Angeles, CA, </address> <year> 1994. </year>
Reference-contexts: The export class itself might also be materialized, or might be left as virtual. Generalizing this to export classes defined using richer queries is a topic of current research. The basic approach to generating rules for integration mediators follows the general spirit of <ref> [CW91, Cha94] </ref>, which describe how view definitions can be translated into rules for performing incremental maintenance. The primary mechanism used by Squirrel is a family of rule templates. <p> In one experiment we plan to use the SIMS [ACHK93] query processing engine to execute queries where matching information is materialized but all other export data is virtual. We also plan to incorporate mechanisms for integrating data that involves related but "non-congruent" classes, in the spirit of <ref> [Cha94, CH95] </ref>. Acknowledgements We are grateful to Omar Boucelma, Ti-Pin Chang, Jim Dalrymple, and Mike Doherty for many interesting discussions on topics related to this research. We also thank Jennifer Widom for her careful review of this paper and valuable comments.
Reference: [CH95] <author> T.-P. Chang and R. Hull. </author> <title> On Witnesses and Witness Generators for Object-Based Databases. </title> <booktitle> Proc. of the ACM Symp. on Principles of Database Systems, </booktitle> <pages> 196-207, </pages> <year> 1995. </year>
Reference-contexts: In one experiment we plan to use the SIMS [ACHK93] query processing engine to execute queries where matching information is materialized but all other export data is virtual. We also plan to incorporate mechanisms for integrating data that involves related but "non-congruent" classes, in the spirit of <ref> [Cha94, CH95] </ref>. Acknowledgements We are grateful to Omar Boucelma, Ti-Pin Chang, Jim Dalrymple, and Mike Doherty for many interesting discussions on topics related to this research. We also thank Jennifer Widom for her careful review of this paper and valuable comments.
Reference: [CW91] <author> Stefano Ceri and Jennifer Widom. </author> <title> Deriving production rules for incremental view maintenance. </title> <booktitle> Proc. of Intl. Conf. on Very Large Data Bases, </booktitle> <pages> 577-589, </pages> <year> 1991. </year>
Reference-contexts: The export class itself might also be materialized, or might be left as virtual. Generalizing this to export classes defined using richer queries is a topic of current research. The basic approach to generating rules for integration mediators follows the general spirit of <ref> [CW91, Cha94] </ref>, which describe how view definitions can be translated into rules for performing incremental maintenance. The primary mechanism used by Squirrel is a family of rule templates.
Reference: [Dal95] <author> J. Dalrymple. </author> <title> Extending Rule Mechanisms for the Construction of Interoperable Systems. </title> <type> PhD thesis, </type> <institution> University of Colorado, Boulder, </institution> <year> 1995. </year>
Reference-contexts: A fundamental aspect of data warehousing is propagation of incremental updates at the source databases to the warehouse. Activeness, as found in active databases [WC95], is emerging as the paradigm of choice for supporting such propagation. Part of the H2O project is focused on the notion of "active module" <ref> [Dal95, BDD + 95] </ref>. These are software modules that include a rule base, an execution model for rule application, and optionally a local persistent store. While an active module might be a full-fledged active database, it might also be a lightweight process supporting a focused family of functionalities. <p> In its broadest sense, an active module <ref> [Dal95, BDD + 95] </ref> is a software module that incorporates: * a rule base, that specifies the bulk of the behavior of the module in a relatively declarative fashion; * an execution model for applying the rules (in the spirit of active databases); * (optionally) a local persistent store 1 An <p> In particular, the separation of rules (logic/policy) from execution model (implementation/mechanism) allows a more declarative style of program specification, and facilitates maintenance of the active module as the underlying environment evolves. Reference <ref> [Dal95] </ref> describes an implemented prototype system that uses several active modules with different execution models to support complex interoperation of software and database systems. A key enabling technology in the development of active modules has been the Heraclitus paradigm [HJ91, GHJ + 93, GHJ94].
Reference: [DH84] <author> U. Dayal and H.Y. Hwang. </author> <title> View definition and generalization for database integration in a multi database system. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> SE-10(6):628-644, </volume> <year> 1984. </year>
Reference-contexts: The choices include fully materialized approach, as presented in references [WHW89, KAAK93], which materializes all relevant information in the data warehouse of the mediator; hybrid approach, as illustrated in the Student/Employee example of Section 2, that materializes only part of the relevant information; and fully virtual approach, as presented in <ref> [DH84, ACHK93, FRV95] </ref>, that uses query pre-processing and query shipping to answer queries that are made against the integrated view.
Reference: [DHDD95] <author> M. Doherty, R. Hull, M. Derr, J. Durand. </author> <title> On detecting conflict between proposed updates. To appear, </title> <booktitle> Proc. Intl. Workshop on Database Programming Languages, </booktitle> <address> Italy, </address> <month> September, </month> <year> 1995. </year>
Reference-contexts: This paper is a survey of some aspects of the on-going research in the H2O project at the University of Colorado, Boulder, and the presentation here is somewhat abbreviated. More details can be found in <ref> [BDD + 95, ZHKF95, DHDD95, DHR95] </ref>. The rest of the paper is organized as follows: Section 2 gives a motivating example that illustrates our approach. Section 3 presents the taxonomy of the space of approaches to data integration. The notion of active modules is described in Section 4. <p> The Heraclitus [Alg,C] DBPL [GHJ + 93, GHJ94] implements the Heraclitus paradigm for the relational data model; a central component of the H2O project is the development of the H2O DBPL <ref> [DHDD95, DHR95] </ref>, an extension and generalization of Heraclitus [Alg,C] for object-oriented databases. 2 The current experimentation with the framework described in this paper is based on Heraclitus [Alg,C], and we expect the port to the H2O DBPL to be relatively straightforward.
Reference: [DHR95] <author> M. Doherty, R. Hull, M. Rupawalla. </author> <booktitle> The Heraclitus[OO] database programming language, </booktitle> <year> 1995. </year> <note> Technical Report in preparation. </note>
Reference-contexts: This paper is a survey of some aspects of the on-going research in the H2O project at the University of Colorado, Boulder, and the presentation here is somewhat abbreviated. More details can be found in <ref> [BDD + 95, ZHKF95, DHDD95, DHR95] </ref>. The rest of the paper is organized as follows: Section 2 gives a motivating example that illustrates our approach. Section 3 presents the taxonomy of the space of approaches to data integration. The notion of active modules is described in Section 4. <p> Two representative rules responding to the creation of new Student objects in the source database StudentDB, written in a pidgin H2O <ref> [BDD + 95, DHR95] </ref> rule language, are shown in Figure 4. Intuitively, the two rules state: Rule R1: If an object of class Student is created, create a new object of class Stud minus Emp. <p> The Heraclitus [Alg,C] DBPL [GHJ + 93, GHJ94] implements the Heraclitus paradigm for the relational data model; a central component of the H2O project is the development of the H2O DBPL <ref> [DHDD95, DHR95] </ref>, an extension and generalization of Heraclitus [Alg,C] for object-oriented databases. 2 The current experimentation with the framework described in this paper is based on Heraclitus [Alg,C], and we expect the port to the H2O DBPL to be relatively straightforward.
Reference: [EK91] <author> F. Eliassen and R. Karlsen. </author> <title> Interoperability and Object Identity. </title> <booktitle> SIGMOD Record 10(4) </booktitle> <pages> 25-29, </pages> <year> 1991. </year>
Reference-contexts: In order to support the match classes and the materialized attributes of export classes we use three kinds of attributes (these sets may overlap): identification attributes: These are used to identify objects from the source databases. They might be keys or immutable OIDs (cf. <ref> [EK91] </ref>) from the source databases. match attributes: These are the attributes referred to in the match criteria. For example, the match attributes of the class Employee are empName and address. export attributes: These are attributes that are used in the export classes.
Reference: [FK93] <author> J. C. Franchitti and R. King. </author> <title> A Language for Composing Heterogeneous, Persistent Applications. </title> <booktitle> Proc. of the Workshop on Interoperability of Database Systems and Database Applications, Fribourg, </booktitle> <address> Switzerland, </address> <month> October 13-14 </month> <year> 1993. </year> <note> Springer-Verlag, LNCS. </note>
Reference-contexts: The primary focus of ISL to be discussed here is on the specification of integrated views and matching criteria. (Issues such as composing heterogeneous applications, as handled by, e.g., Amalgame Specification Language (ASL) <ref> [FK93] </ref>, are not addressed here.) In the current version of ISL, users can specify (1) (relevant portions of) source database schemas, (2) the criteria to be used when matching objects from corresponding pairs of classes in the source databases, and (3) derived classes to be exported from the integration mediator.
Reference: [FRV95] <author> D. Florescu, L. Raschid, P. Valduriez. </author> <title> Using heterogeneous equivalences for query rewriting in multidatabase systems. </title> <booktitle> Proc. of Third Intl. Conf. on Cooperative Information Systems (CoopIS-95), </booktitle> <address> Vienna, Austria, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: The choices include fully materialized approach, as presented in references [WHW89, KAAK93], which materializes all relevant information in the data warehouse of the mediator; hybrid approach, as illustrated in the Student/Employee example of Section 2, that materializes only part of the relevant information; and fully virtual approach, as presented in <ref> [DH84, ACHK93, FRV95] </ref>, that uses query pre-processing and query shipping to answer queries that are made against the integrated view.
Reference: [FWW + 93] <author> T. Finin, J. Weber, G. Wiederhold, et al. </author> <title> DRAFT Specification of the KQML Agent-Communication Language. </title> <address> June 15, </address> <year> 1993. </year>
Reference-contexts: These are implemented in the Heraclitus [Alg,C] DBPL, but as the H2O DBPL becomes available we shall port our prototypes to H2O. For communication between source databases and the integration mediators we are using Knowledge Query and Manipulation Language (KQML) <ref> [FWW + 93] </ref>. In the near future, we plan to extend this research primarily in the direction of the hybrid material-ized/virtual approach. In one experiment we plan to use the SIMS [ACHK93] query processing engine to execute queries where matching information is materialized but all other export data is virtual.
Reference: [GHJ + 93] <author> S. Ghandeharizadeh, R. Hull, D. Jacobs, et. al. </author> <title> On implementing a language for specifying active database execution models. </title> <booktitle> Proc. of Intl. Conf. on Very Large Data Bases, </booktitle> <pages> 441-454, </pages> <year> 1993. </year>
Reference-contexts: Reference [Dal95] describes an implemented prototype system that uses several active modules with different execution models to support complex interoperation of software and database systems. A key enabling technology in the development of active modules has been the Heraclitus paradigm <ref> [HJ91, GHJ + 93, GHJ94] </ref>. As detailed in those citations, the Heraclitus paradigm permits the flexible specification of a wide range of execution models based on deferred rule firing, immediate rule firing, and hybrids of these, and also supports rich expressive power in rule conditions. <p> Deltas can be used to easily represent different virtual states that are created during the course of rule application, and make these accessible to rule conditions. The Heraclitus [Alg,C] DBPL <ref> [GHJ + 93, GHJ94] </ref> implements the Heraclitus paradigm for the relational data model; a central component of the H2O project is the development of the H2O DBPL [DHDD95, DHR95], an extension and generalization of Heraclitus [Alg,C] for object-oriented databases. 2 The current experimentation with the framework described in this paper is
Reference: [GHJ94] <author> S. Ghandeharizadeh, R. Hull, and D. Jacobs. Heraclitus[Alg,C]: </author> <title> Elevating deltas to be first-class citizens in a database programming language. </title> <type> Technical Report USC-CS-94-581, </type> <institution> Computer Science Department, Univ. of Southern California, </institution> <year> 1994. </year>
Reference-contexts: Reference [Dal95] describes an implemented prototype system that uses several active modules with different execution models to support complex interoperation of software and database systems. A key enabling technology in the development of active modules has been the Heraclitus paradigm <ref> [HJ91, GHJ + 93, GHJ94] </ref>. As detailed in those citations, the Heraclitus paradigm permits the flexible specification of a wide range of execution models based on deferred rule firing, immediate rule firing, and hybrids of these, and also supports rich expressive power in rule conditions. <p> Deltas can be used to easily represent different virtual states that are created during the course of rule application, and make these accessible to rule conditions. The Heraclitus [Alg,C] DBPL <ref> [GHJ + 93, GHJ94] </ref> implements the Heraclitus paradigm for the relational data model; a central component of the H2O project is the development of the H2O DBPL [DHDD95, DHR95], an extension and generalization of Heraclitus [Alg,C] for object-oriented databases. 2 The current experimentation with the framework described in this paper is
Reference: [GMS93] <author> A. Gupta, </author> <title> I.S. Mumick, and V.S. Subrahmanian. Maintaining views incrementally. </title> <booktitle> Proc. ACM SIGMOD Symp. on the Management of Data, </booktitle> <pages> 157-166, </pages> <year> 1993. </year>
Reference-contexts: This provides two major advantages: First, it could significantly reduce the network traffic by transferring deltas rather than full snapshots of the membership of a class. Second, most algorithms <ref> [BLT86, GMS93] </ref> for maintaining materialized views compute the incremental updates on derived data based on the net effects of the updates of the source data.
Reference: [HJ91] <author> R. Hull and D. Jacobs. </author> <title> Language constructs for programming active databases. </title> <booktitle> Proc. of Intl. Conf. on Very Large Data Bases, </booktitle> <pages> 455-468, </pages> <year> 1991. </year>
Reference-contexts: Reference [Dal95] describes an implemented prototype system that uses several active modules with different execution models to support complex interoperation of software and database systems. A key enabling technology in the development of active modules has been the Heraclitus paradigm <ref> [HJ91, GHJ + 93, GHJ94] </ref>. As detailed in those citations, the Heraclitus paradigm permits the flexible specification of a wide range of execution models based on deferred rule firing, immediate rule firing, and hybrids of these, and also supports rich expressive power in rule conditions.
Reference: [IK93] <author> W.H. Inmon and C. Kelley. Rdb/VMS: </author> <title> Developing the Data Warehouse. </title> <publisher> QED Publishing Group, </publisher> <address> Boston, Massachussetts, </address> <year> 1993. </year>
Reference-contexts: Among a wide range of techniques addressing this problem, data warehousing, i.e., materializing integrated information in a persistent store, is gaining increasing importance <ref> [WHW90, KAAK93, IK93, ZGHW95] </ref>. This paper describes how we are applying research being developed in the H2O project at the University of Colorado, Boulder, to support data integration.
Reference: [KAAK93] <author> W. Kent, R. Ahmed, J. Albert, and M. Ketabchi. </author> <title> Object identification in multidatabase systems. </title> <editor> D. Hsiao, E. Neuhold, and R. Sacks-Davis, editors, </editor> <booktitle> Interoperable Database Systems (DS-5) (A-25). </booktitle> <publisher> Elsevier Science Publishers B. V. (North-Holland), </publisher> <year> 1993. </year>
Reference-contexts: Among a wide range of techniques addressing this problem, data warehousing, i.e., materializing integrated information in a persistent store, is gaining increasing importance <ref> [WHW90, KAAK93, IK93, ZGHW95] </ref>. This paper describes how we are applying research being developed in the H2O project at the University of Colorado, Boulder, to support data integration. <p> The choices include fully materialized approach, as presented in references <ref> [WHW89, KAAK93] </ref>, which materializes all relevant information in the data warehouse of the mediator; hybrid approach, as illustrated in the Student/Employee example of Section 2, that materializes only part of the relevant information; and fully virtual approach, as presented in [DH84, ACHK93, FRV95], that uses query pre-processing and query shipping to
Reference: [WC95] <author> J. Widom and S. Ceri. </author> <title> Active Database Systems: Triggers and Rules for Advanced Database Pro cessing. </title> <publisher> Morgan-Kaufmann, Inc., </publisher> <address> San Francisco, California, </address> <year> 1995. </year>
Reference-contexts: A fundamental aspect of data warehousing is propagation of incremental updates at the source databases to the warehouse. Activeness, as found in active databases <ref> [WC95] </ref>, is emerging as the paradigm of choice for supporting such propagation. Part of the H2O project is focused on the notion of "active module" [Dal95, BDD + 95]. These are software modules that include a rule base, an execution model for rule application, and optionally a local persistent store.
Reference: [WHW89] <author> S. Widjojo, R. Hull, and D. Wile. </author> <title> Distributed Information Sharing using WorldBase. </title> <journal> IEEE Office Knowledge Engineering, </journal> <volume> 3(2) </volume> <pages> 17-26, </pages> <month> August </month> <year> 1989. </year> <month> 39 </month>
Reference-contexts: The choices include fully materialized approach, as presented in references <ref> [WHW89, KAAK93] </ref>, which materializes all relevant information in the data warehouse of the mediator; hybrid approach, as illustrated in the Student/Employee example of Section 2, that materializes only part of the relevant information; and fully virtual approach, as presented in [DH84, ACHK93, FRV95], that uses query pre-processing and query shipping to
Reference: [WHW90] <author> S. Widjojo, R. Hull, and D. S. Wile. </author> <title> A specificational approach to merging persistent object bases. </title> <editor> Al Dearle, Gail Shaw, and Stanley Zdonik, editors, </editor> <title> Implementing Persistent Object Bases. </title> <publisher> Morgan Kaufmann, </publisher> <month> December </month> <year> 1990. </year>
Reference-contexts: Among a wide range of techniques addressing this problem, data warehousing, i.e., materializing integrated information in a persistent store, is gaining increasing importance <ref> [WHW90, KAAK93, IK93, ZGHW95] </ref>. This paper describes how we are applying research being developed in the H2O project at the University of Colorado, Boulder, to support data integration.
Reference: [Wie92] <author> G. Wiederhold. </author> <booktitle> Mediators in the architecture of future information systems. IEEE Computer, </booktitle> <pages> 38-49, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: is on (i) a taxonomy of the solution space for the problem of data integration, (ii) the concept of "active modules", these are software components that support the specification of behavior using rules as in active databases, and (iii) the Squirrel prototype for constructing "integration mediators", in the sense of <ref> [Wie92] </ref>. These integration mediators are active modules that support data integration using a hybrid of virtual and materialized data approaches.
Reference: [ZGHW95] <author> Y. Zhuge, H. Garcia-Molina, J. Hammer, J. Widom. </author> <title> View maintenance in a warehousing environ ment. </title> <booktitle> Proc. ACM SIGMOD Symp. on the Management of Data, </booktitle> <address> San Jose, California, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: Among a wide range of techniques addressing this problem, data warehousing, i.e., materializing integrated information in a persistent store, is gaining increasing importance <ref> [WHW90, KAAK93, IK93, ZGHW95] </ref>. This paper describes how we are applying research being developed in the H2O project at the University of Colorado, Boulder, to support data integration. <p> This problem is exacerbated if some of the data is replicated, as is the case in our approach. The Eager Compensation Algorithm developed in <ref> [ZGHW95] </ref> provides a promising direction for solving at least some of these inconsistency problems. We plan to address this issue in our future research. 3.2 Activeness of Source Databases This spectrum concerns the active capabilities of source databases, and is relevant only if some materialization occurs.
Reference: [ZHKF95] <author> G. Zhou, R. Hull, R. King, J-C. Franchitti. </author> <title> Using object matching and materialization to integrate heterogeneous databases. </title> <booktitle> Proc. of Third Intl. Conf. on Cooperative Information Systems (CoopIS-95), </booktitle> <address> Vienna, Austria, </address> <month> May </month> <year> 1995. </year> <month> 40 </month>
Reference-contexts: This paper is a survey of some aspects of the on-going research in the H2O project at the University of Colorado, Boulder, and the presentation here is somewhat abbreviated. More details can be found in <ref> [BDD + 95, ZHKF95, DHDD95, DHR95] </ref>. The rest of the paper is organized as follows: Section 2 gives a motivating example that illustrates our approach. Section 3 presents the taxonomy of the space of approaches to data integration. The notion of active modules is described in Section 4. <p> More details concerning this development may be found in <ref> [ZHKF95] </ref>. In the example we assume that there are two databases, StudentDB and EmployeeDB, that hold information about students at a university and employees in a large nearby corporation, respectively. The relevant subschemas of the two databases are shown in Figure 1. <p> This section identifies the major spectra of this solution space. More details concerning this taxonomy may be found in <ref> [ZHKF95] </ref>. Our taxonomy is based on four spectra (Table 1). The first spectrum is relevant to all solutions for data integration, and the latter three are relevant to solutions that involve data warehousing. <p> Users can invoke Squirrel by specifying an integration problem using a high level Integration Specification Language (ISL) (Subsection 5.1). Based on this, Squirrel generates a corresponding integration mediator (Subsection 5.2). The presentation here is rather abbreviated, more details are presented in <ref> [ZHKF95] </ref>. 5.1 Integration Specification Language (ISL) The Integration Specification Language (ISL) allows users to specify their data integration applications in a largely declarative fashion.
References-found: 27

