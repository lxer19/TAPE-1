URL: http://ptolemy.eecs.berkeley.edu/papers/98/HCFSMinPtolemy/HCFSMinPtolemy.ps
Refering-URL: http://ptolemy.eecs.berkeley.edu/papers/98/HCFSMinPtolemy/
Root-URL: 
Email: -bilung, eal-@eecs.berkeley.edu  
Title: Hierarchical Concurrent Finite State Machines in Ptolemy  
Author: Bilung Lee and Edward A. Lee 
Address: Berkeley  
Affiliation: University of California at  
Abstract: We implement a finite state machine (FSM) domain for specifying and simulating control functionality of a system within the Ptolemy software environment. The FSM domain is successfully integrated with synchronous data- ow (SDF) and discrete-event (DE) concurrency domains in Ptolemy. In this heterogeneous combination, the semantics of FSM, concurrency and hierarchy are naturally supported in a manner similar to hierarchical concurrent FSMs (HCFSMs). Unlike most formalisms that support HCFSMs, such as Statecharts and its variants, our scheme decouples the FSM from the concurrency models, enabling selection of the most appropriate concurrency model for the problem at hand. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Bernhard, G Berry, F. Boussinot, R. de Simone, G. Gonthier, A. Ressouche, J. P. Rigault, J. M. Tanzi, </author> <title> Programming a Reex Game in Esterel V3, Rapport de Recherche No. </title> <type> 07/91, </type> <institution> INRIA, Sophia-Antipolis, France, </institution> <month> June, </month> <year> 1991. </year>
Reference-contexts: After drawing the state transition diagram, users can further make an icon compatible with VEM and simulate it in Ptolemy. 5. Application example 5.1. System description A commonly used example for control-intensive software environments is the reex game <ref> [1] </ref>. Our version of the reex game is a two-player game (to introduce more concurrency). Each player has two buttons to press during the game: coin and go buttons for player 1; ready and stop buttons for player 2. Normal play proceeds as follows: 1.
Reference: [2] <author> J. T. Buck, S. Ha, E. A. Lee, and D. G. Messerschmitt, Ptolemy: </author> <title> A Framework for Simulating and Prototyping Heterogeneous Systems, </title> <journal> Int. Journal of Computer Simulation, special issue on Simulation Software Development, </journal> <volume> vol. 4, </volume> <pages> pp. 155-182, </pages> <month> April, </month> <year> 1994. </year>
Reference-contexts: By equipping the basic FSM with hierarchy and heterogeneity, hierarchical combinations of FSMs with various concurrency models become feasible. Thus, systems can truly be built up from modular components that are separately designed, and each subsystem can be designed using the best suited model. Ptolemy <ref> [2] </ref> is a software environment that supports heterogeneous system design by allowing diverse models of computation to coexist and interact. Two of the more mature concurrency domains in the software are synchronous dataow (SDF) [8] and discrete-event (DE).
Reference: [3] <author> C. Cassandras, </author> <title> Discrete Event Systems, Modeling and Performance Analysis, </title> <publisher> Irwin, </publisher> <address> Homewood IL, </address> <year> 1993. </year>
Reference-contexts: However, the con- currency semantics in Statecharts is tightly integrated with the FSM semantics. A number of variants [10], including Argos language [9], exhibit different concurrency seman <p>- tics. For example, the co-design finite state machines (CFSM) model [4] essentially combines FSMs with a discrete-event <ref> [3] </ref> concurrency model. In this paper, we advocate decoupling the concurrency semantics from the FSM semantics. By equipping the basic FSM with hierarchy and heterogeneity, hierarchical combinations of FSMs with various concurrency models become feasible. <p> A simple approach is to encode presence and absence using boolean-valued tokens. I.e. a true-valued token means the event present and a false-valued token means absent. 3.2. Discrete events The DE domain <ref> [3] </ref> carries a notion of global time that is known simultaneously throughout the system. An event occurs at a point in time. In a simulation of such a system, each event needs to carry a time stamp that indicates the time at which the event occurs.
Reference: [4] <author> M. Chiodo, P. Giusto, H. Hsieh, A. Jurecska, L. Lavagno, A. Sangiovanni-Vincentelli, </author> <title> Hardware-Software Codesign of Embedded Systems, </title> <booktitle> IEEE Micro, </booktitle> <month> August </month> <year> 1994, </year> <month> pp.26-36. </month>
Reference-contexts: However, the con- currency semantics in Statecharts is tightly integrated with the FSM semantics. A number of variants [10], including Argos language [9], exhibit different concurrency seman <p>- tics. For example, the co-design finite state machines (CFSM) model <ref> [4] </ref> essentially combines FSMs with a discrete-event [3] concurrency model. In this paper, we advocate decoupling the concurrency semantics from the FSM semantics. By equipping the basic FSM with hierarchy and heterogeneity, hierarchical combinations of FSMs with various concurrency models become feasible.
Reference: [5] <author> S. A. Edwards, </author> <title> The Specification and Execution of Heterogeneous Synchronous Reactive Systems, </title> <type> Ph.D. </type> <institution> disserta-tion, Memorandum UCB/ERL M97/31, Electronics Research Laboratory, University of California, Berkeley, California, </institution> <month> May </month> <year> 1997. </year>
Reference-contexts: In many applications, non-boolean values are more useful. Also, the instantaneous dialog implemented in figure 5 (c) would be better implemented using the synchronous/ reactive (SR) domain <ref> [5] </ref> in Ptolemy, since this would yield a description that could be more efficiently implemented in hardware or software. We have not yet integrated the SR domain with the FSM domain, although we have developed the semantics of the combination [6].
Reference: [6] <author> A. Girault, B. Lee, and E. A. Lee, </author> <title> A Preliminary Study of Hierarchical Finite State Machines with Multiple Concurrency Models, </title> <institution> Memorandum UCB/ERL M97/57, Electronics Research Laboratory, University of California, Berkeley, California, </institution> <month> August </month> <year> 1997. </year>
Reference-contexts: We have not yet integrated the SR domain with the FSM domain, although we have developed the semantics of the combination <ref> [6] </ref>. Finally, the reex game example, which we chose in order to follow tradition in the HCFSM community, does not really illustrate the main advantages of our approach.
Reference: [7] <author> D. Harel, Statecharts: </author> <title> A Visual Formalism for Complex Systems, </title> <journal> Sci. Comput. Program., </journal> <volume> vol 8, </volume> <pages> pp. 231-274, </pages> <year> 1987. </year>
Reference-contexts: Hierarchy allows a state of the FSM to be refined into another FSM, i.e. a set of substates. Con- currency allows a state to be further decomposed into multiple simultaneously active FSMs that communicate through messaging of some sort. The Statecharts formalism <ref> [7] </ref> is a popular and seminal representative of the HCFSM model. However, the con- currency semantics in Statecharts is tightly integrated with the FSM semantics. A number of variants [10], including Argos language [9], exhibit different concurrency seman <p>- tics. <p> When it is subsequently invoked, we may wish to reinitialize it or allow it to continue from the last known conditions. Thus, like in Statecharts <ref> [7] </ref>, we support a transition entering a hierarchical state to be either history entry or initial entry. His- tory entry permits the slave to resume computation from the final conditions of the last invocation. Initial entry starts the slave from the initial conditions like the first invocation.
Reference: [8] <author> E. A. Lee and D. G. Messerschmitt, </author> <title> Static Scheduling of Synchronous Data Flow Programs for Digital Signal Processing, </title> <journal> IEEE Trans. on Computers, </journal> <month> January, </month> <year> 1987. </year>
Reference-contexts: Ptolemy [2] is a software environment that supports heterogeneous system design by allowing diverse models of computation to coexist and interact. Two of the more mature concurrency domains in the software are synchronous dataow (SDF) <ref> [8] </ref> and discrete-event (DE). We implement a new FSM domain in Ptolemy and integrate it with the two existing domains. We begin by adding to a basic FSM hierarchy and heterogeneity in section 2. <p> Among various existing Ptolemy concurrency domains, currently we focus on two of the more mature ones, the synchronous dataow (SDF) and the discrete-event (DE) domains. 3.1. Synchronous dataow Under the SDF <ref> [8] </ref> paradigm, a system consists of a set of blocks interconnected by directed arcs. The blocks represent computational functions that map input data into output data when they fire, and the arcs represent streams of data tokens implemented as first-in-first-out queues.
Reference: [9] <author> F. Maraninchi, </author> <title> Operational and compositional semantics of synchronous automaton compositions, </title> <booktitle> In Third International Conference on Concurrency Theory, volume 630 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 550-564, </pages> <publisher> Springer-Verlag, </publisher> <month> August </month> <year> 1992. </year>
Reference-contexts: The Statecharts formalism [7] is a popular and seminal representative of the HCFSM model. However, the con- currency semantics in Statecharts is tightly integrated with the FSM semantics. A number of variants [10], including Argos language <ref> [9] </ref>, exhibit different concurrency seman <p>- tics. For example, the co-design finite state machines (CFSM) model [4] essentially combines FSMs with a discrete-event [3] concurrency model. In this paper, we advocate decoupling the concurrency semantics from the FSM semantics.
Reference: [10] <author> M. von der Beeck, </author> <title> A Comparison of Statecharts Variants, In Formal Techniques in Real Time and Fault Tolerant Systems, </title> <booktitle> volume 863 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 128-148, </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The Statecharts formalism [7] is a popular and seminal representative of the HCFSM model. However, the con- currency semantics in Statecharts is tightly integrated with the FSM semantics. A number of variants <ref> [10] </ref>, including Argos language [9], exhibit different concurrency seman <p>- tics. For example, the co-design finite state machines (CFSM) model [4] essentially combines FSMs with a discrete-event [3] concurrency model. In this paper, we advocate decoupling the concurrency semantics from the FSM semantics. <p> However, we may need to immediately interrupt before the slave is invoked in some situations. Thus, we support a transition exiting from a hierarchical state to be either preemptive or non-preemptive <ref> [10] </ref>. If a preemptive transition is triggered, the slave of the current state will not be invoked. Otherwise, for a non-preemptive transition, the slave is invoked normally. 2.4.
References-found: 10

