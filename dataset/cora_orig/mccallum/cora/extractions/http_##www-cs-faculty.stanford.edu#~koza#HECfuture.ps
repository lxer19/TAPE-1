URL: http://www-cs-faculty.stanford.edu/~koza/HECfuture.ps
Refering-URL: http://www.cs.bham.ac.uk/~wbl/biblio/gp-bibliography.html
Root-URL: 
Email: EMAIL: Koza@CS.Stanford.Edu  
Phone: PHONE: 415-941-0336 FAX: 415-941-9430  
Title: for Handbook of Evolutionary Computation. Future Work and Practical Applications of Genetic Programming  
Author: John R. Koza 
Web: WWW  http://www-cs-faculty.stanford.edu/~koza/  
Address: 258 Gates Building Stanford, California 94305 USA  
Affiliation: Computer Science Department Stanford University  
Note: Version 3 June 25, 1996  ADDRESS:  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: <author> Andre, David, Bennett III, Forrest H, and Koza, John R. </author> <year> 1996. </year> <title> Discovery by genetic programming of a cellular automata rule that is better than any known rule for the majority classification problem. </title> <editor> In Koza, John R., Goldberg, David E., Fogel, David B., and Riolo, Rick L. (editors). </editor> <booktitle> 1996. Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: programming with automatically defined functions has evolved a rule for the majority classification task for one-dimensional twostate cellular automata with an accuracy that exceeds that of the original human-written Gacs-Kurdyumov-Levin (GKL) rule, all other known subsequent human-written rules, and all other known rules produced by automated approaches for this problem <ref> (Andre, Bennett, and Koza 1996) </ref>. Another example involves the near-minimum-time control of a spacecraft's attitude maneuvers using genetic programming (Howley 1996). <p> A fifth example involves the design of difficult-to-design electrical circuits using genetic programming <ref> (Koza, Bennett, Andre, and Keane 1996) </ref>. A sixth example is recent work on facility layouts (Garces-Perez, Schoenefeld, and Wainwright 1996). 4 . Handling Complex Data Structures Ordinary computer programs use numerous well-known techniques for handling vectors of data, arrays, and more complex data structures. <p> Brave (1996a) has extended and applied this technique to the evolution of finite automata. This technique has also been applied to other complex structures, such as electrical circuits <ref> (Koza, Bennett, Andre, and Keane 1996) </ref>. 9 . Automatic Programming of Multi-Agent Systems The cooperative behavior of multiple independent agents can potentially be harnessed to solve a wide variety of practical problems. However, programming of multi-agent systems is particularly vexatious. <p> The important area of coevolution, as illustrated by the work of Pollack and Blair (1996), can be expected to attract considerable future work. 1 2 . Complex Adaptive Systems Genetic programming has proven useful in evolving complex systems, such as Lindenmayer systems (Jacob 1996) and cellular automata <ref> (Andre, Bennett, and Koza 1996) </ref> and can be expected to continue to be useful in this area. 1 3 . <p> In most genetic programming applications, the vast majority of computer resources are used on the fitness evaluations. The calculation of fitness for the individuals in the population is usually entirely decoupled. Thus, parallel computing techniques can be beneficially applied to genetic programming and genetic algorithms with almost 100% efficiency <ref> (Andre and Koza 1996) </ref>. In fact, the use of semi-isolated subpopulations often accelerates the finding of a solution to a problem using genetic programming and produces super-linear speedup. Parallelization of genetic programming will be of central importance to the growth of the field. 18.
Reference: <author> Andre, David and Koza, John R. </author> <year> 1996. </year> <title> Parallel genetic programming: A scalable implementation using the transputer network architecture. </title> <editor> In Angeline, Peter J. and Kinnear, Kenneth E. Jr. (editors). </editor> <booktitle> 1996. Advances in Genetic Programming 2. </booktitle> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher> <address> Chapter 18. </address>
Reference-contexts: programming with automatically defined functions has evolved a rule for the majority classification task for one-dimensional twostate cellular automata with an accuracy that exceeds that of the original human-written Gacs-Kurdyumov-Levin (GKL) rule, all other known subsequent human-written rules, and all other known rules produced by automated approaches for this problem <ref> (Andre, Bennett, and Koza 1996) </ref>. Another example involves the near-minimum-time control of a spacecraft's attitude maneuvers using genetic programming (Howley 1996). <p> A fifth example involves the design of difficult-to-design electrical circuits using genetic programming <ref> (Koza, Bennett, Andre, and Keane 1996) </ref>. A sixth example is recent work on facility layouts (Garces-Perez, Schoenefeld, and Wainwright 1996). 4 . Handling Complex Data Structures Ordinary computer programs use numerous well-known techniques for handling vectors of data, arrays, and more complex data structures. <p> Brave (1996a) has extended and applied this technique to the evolution of finite automata. This technique has also been applied to other complex structures, such as electrical circuits <ref> (Koza, Bennett, Andre, and Keane 1996) </ref>. 9 . Automatic Programming of Multi-Agent Systems The cooperative behavior of multiple independent agents can potentially be harnessed to solve a wide variety of practical problems. However, programming of multi-agent systems is particularly vexatious. <p> The important area of coevolution, as illustrated by the work of Pollack and Blair (1996), can be expected to attract considerable future work. 1 2 . Complex Adaptive Systems Genetic programming has proven useful in evolving complex systems, such as Lindenmayer systems (Jacob 1996) and cellular automata <ref> (Andre, Bennett, and Koza 1996) </ref> and can be expected to continue to be useful in this area. 1 3 . <p> In most genetic programming applications, the vast majority of computer resources are used on the fitness evaluations. The calculation of fitness for the individuals in the population is usually entirely decoupled. Thus, parallel computing techniques can be beneficially applied to genetic programming and genetic algorithms with almost 100% efficiency <ref> (Andre and Koza 1996) </ref>. In fact, the use of semi-isolated subpopulations often accelerates the finding of a solution to a problem using genetic programming and produces super-linear speedup. Parallelization of genetic programming will be of central importance to the growth of the field. 18.
Reference: <author> Bennett, Forrest H III. </author> <year> 1996. </year> <title> Automatic creation of an efficient multi-agent architecture using genetic programming with architecture-altering operations. </title> <editor> In Koza, John R., Goldberg, David E., Fogel, David B., and Riolo, Rick L. (editors). </editor> <booktitle> 1996. Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher>
Reference-contexts: programming with automatically defined functions has evolved a rule for the majority classification task for one-dimensional twostate cellular automata with an accuracy that exceeds that of the original human-written Gacs-Kurdyumov-Levin (GKL) rule, all other known subsequent human-written rules, and all other known rules produced by automated approaches for this problem <ref> (Andre, Bennett, and Koza 1996) </ref>. Another example involves the near-minimum-time control of a spacecraft's attitude maneuvers using genetic programming (Howley 1996). <p> A fifth example involves the design of difficult-to-design electrical circuits using genetic programming <ref> (Koza, Bennett, Andre, and Keane 1996) </ref>. A sixth example is recent work on facility layouts (Garces-Perez, Schoenefeld, and Wainwright 1996). 4 . Handling Complex Data Structures Ordinary computer programs use numerous well-known techniques for handling vectors of data, arrays, and more complex data structures. <p> Brave (1996a) has extended and applied this technique to the evolution of finite automata. This technique has also been applied to other complex structures, such as electrical circuits <ref> (Koza, Bennett, Andre, and Keane 1996) </ref>. 9 . Automatic Programming of Multi-Agent Systems The cooperative behavior of multiple independent agents can potentially be harnessed to solve a wide variety of practical problems. However, programming of multi-agent systems is particularly vexatious. <p> The important area of coevolution, as illustrated by the work of Pollack and Blair (1996), can be expected to attract considerable future work. 1 2 . Complex Adaptive Systems Genetic programming has proven useful in evolving complex systems, such as Lindenmayer systems (Jacob 1996) and cellular automata <ref> (Andre, Bennett, and Koza 1996) </ref> and can be expected to continue to be useful in this area. 1 3 .
Reference: <author> Brave, Scott. </author> <year> 1995. </year> <title> Using genetic programming to evolve recursive programs for tree search. </title> <booktitle> Proceedings of the Fourth Golden West Conference on intelligent Systems. Raleigh, NC: International Society for Computers and Their Applications. </booktitle> <pages> Pages 60 65. </pages>
Reference: <author> Brave, Scott. </author> <year> 1996a. </year> <title> Evolving deterministic finite automata using cellular encoding. </title> <editor> In Koza, John R., Goldberg, David E., Fogel, David B., and Riolo, Rick L. (editors). </editor> <booktitle> 1996. Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference: <author> Brave, Scott. </author> <year> 1996b. </year> <title> The evolution of memory and mental models using genetic programming. </title> <editor> In Koza, John R., Goldberg, David E., Fogel, David B., and Riolo, Rick L. (editors). </editor> <booktitle> 1996. Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher> <editor> de Garis, Hugo. CAM-BRAIN: </editor> <title> The evolutionary engineering of a billion neuron artificial brain by 2001 which grows / evolves at electronic speeds inside a cellular automata machine (CAM). </title> <editor> In Sanchez, Eduardo and Tomassini, Marco (editors). </editor> <title> Towards Evolvable Hardware. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Volume 1062. </volume> <publisher> Berlin: Springer-Verlag. </publisher> <pages> Pages 76 98. </pages>
Reference: <author> Floreano, Dario and Mondada, Francesco. </author> <year> 1994. </year> <title> Automatic creation of an autonomous agent: Evolution of a neural-network drive robot. </title> <editor> In Cliff, Dave, Husbands, Philip, Meyer, Jean-Arcady, and Wilson, Stewart W. (editors). </editor> <booktitle> 1994. From Animals to Animats 3 Proceedings of the Third International Conference on Simulation of Adaptive Behavior. </booktitle> <pages> Pages 421430. </pages>
Reference: <author> Garces-Perez, Jaime, Schoenefeld, Dale A., and Wainwright, Roger L. </author> <year> 1996. </year> <title> Solving facility layout problems using genetic programming. </title> <editor> In Koza, John R., Goldberg, David E., Fogel, David B., and Riolo, Rick L. (editors). </editor> <booktitle> 1996. Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference: <author> Gruau, Frederic. </author> <year> 1994. </year> <title> Genetic micro programming of neural networks. </title> <editor> In Kinnear, Kenneth E. Jr. (editor). </editor> <booktitle> 1994. Advances in Genetic Programming. </booktitle> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher> <pages> Pages 495518. </pages>
Reference: <author> Handley, Simon. </author> <year> 1996. </year> <title> A new class of function sets for solving sequence problems. </title> <editor> In Koza, John R., Goldberg, David E., Fogel, David B., and Riolo, Rick L. (editors). </editor> <booktitle> 1996. Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher>
Reference: <author> Holland, John H. </author> <year> 1975. </year> <title> Adaptation in Natural and Artificial Systems: An Introductory Analysis with Applications to Biology, Control, </title> <booktitle> and Artificial Intelligence. </booktitle> <address> Ann Arbor, MI: </address> <institution> University of Michigan Press. </institution> <note> The 1992 second edition was published by The MIT Press. 6 Howley, </note> <author> Brian. </author> <year> 1996. </year> <title> Genetic programming of near-minimum-time spacecraft attitude maneuvers. </title> <editor> In Koza, John R., Goldberg, David E., Fogel, David B., and Riolo, Rick L. (editors). </editor> <booktitle> 1996. Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference: <author> Koza, John R. </author> <year> 1992. </year> <title> Genetic Programming: On the Programming of Computers by Means of Natural Selection. </title> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher>
Reference-contexts: 1. Introduction The goal of the field of automatic programming is to create, in an automated way, a computer program that enables a computer to solve a problem. Genetic programming <ref> (Koza 1992, 1994) </ref> is a domain-independent approach to automatic programming in which computer programs are evolved to solve, or approximately solve, problems. The field of genetic programming has grown rapidly in the past few years. Between 1992 and 1996, over 600 papers on genetic programming have been published.
Reference: <author> Koza, John R. </author> <year> 1994. </year> <title> Genetic Programming II: Automatic Discovery of Reusable Programs. </title> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher>
Reference: <author> Koza, John R. </author> <year> 1995. </year> <title> Gene duplication to enable genetic programming to concurrently evolve both the architecture and work-performing steps of a computer program. </title> <booktitle> Proceedings of 14th International Joint Conference on Artificial Intelligence. </booktitle> <address> San Francisco, CA: </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: There can be expected to be continuing research on ways by which the size and shape of the solution can be made part of the answer provided by the automated machine learning technique, rather than part of the question supplied by the human user. For example, 4 architecture-altering operations <ref> (Koza 1995) </ref> enable genetic programming to introduce (or delete) function-defining branches, to adjust the number of arguments of each function-defining branch, and to alter the hierarchical references among function-defining branches. Brave (1995) showed that recursion could be implemented within genetic programming.
Reference: <author> Koza, John R. and Andre, David. </author> <year> 1996a. </year> <title> Classifying protein segments as transmembrane domains using architecture-altering operations in genetic programming. </title> <editor> In Angeline, Peter J. and Kinnear, Kenneth E. Jr. (editors). </editor> <booktitle> 1996. Advances in Genetic Programming II. </booktitle> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference: <author> Koza, John R. and Andre, David. </author> <year> 1996b. </year> <title> Evolution of iteration in genetic programming. </title> <booktitle> In Evolutionary Programming V: Proceedings of the Fifth Annual Conference on Evolutionary Programming. </booktitle> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference: <author> Koza, John R. and Andre, David. </author> <year> 1996c. </year> <title> Automatic discovery of protein motifs using genetic programming. </title> <editor> In Yao, Xin (editor). </editor> <booktitle> 1996. Evolutionary Computation: Theory and Applications. </booktitle> <address> Singapore: </address> <publisher> World Scientific. </publisher>
Reference-contexts: successfully evolved motifs for detecting the D-E-A-D box family of proteins and for detecting the manganese superoxide dismutase family that detected the two families either as well as, or slightly better than, the comparable human-written motifs found in the database created by an international committee of experts on molecular biology <ref> (Koza and Andre 1996c) </ref>. A fifth example involves the design of difficult-to-design electrical circuits using genetic programming (Koza, Bennett, Andre, and Keane 1996). A sixth example is recent work on facility layouts (Garces-Perez, Schoenefeld, and Wainwright 1996). 4 .
Reference: <author> Koza, John R., Bennett III, Forrest H, Andre, David, and Keane, Martin A. </author> <year> 1996. </year> <title> Automated WYWIWYG design of both the topology and component values of analog electrical circuits using genetic programming. </title> <editor> In Koza, John R., Goldberg, David E., Fogel, David B., and Riolo, Rick L. (editors). </editor> <booktitle> 1996. Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: programming with automatically defined functions has evolved a rule for the majority classification task for one-dimensional twostate cellular automata with an accuracy that exceeds that of the original human-written Gacs-Kurdyumov-Levin (GKL) rule, all other known subsequent human-written rules, and all other known rules produced by automated approaches for this problem <ref> (Andre, Bennett, and Koza 1996) </ref>. Another example involves the near-minimum-time control of a spacecraft's attitude maneuvers using genetic programming (Howley 1996). <p> A fifth example involves the design of difficult-to-design electrical circuits using genetic programming <ref> (Koza, Bennett, Andre, and Keane 1996) </ref>. A sixth example is recent work on facility layouts (Garces-Perez, Schoenefeld, and Wainwright 1996). 4 . Handling Complex Data Structures Ordinary computer programs use numerous well-known techniques for handling vectors of data, arrays, and more complex data structures. <p> Brave (1996a) has extended and applied this technique to the evolution of finite automata. This technique has also been applied to other complex structures, such as electrical circuits <ref> (Koza, Bennett, Andre, and Keane 1996) </ref>. 9 . Automatic Programming of Multi-Agent Systems The cooperative behavior of multiple independent agents can potentially be harnessed to solve a wide variety of practical problems. However, programming of multi-agent systems is particularly vexatious. <p> The important area of coevolution, as illustrated by the work of Pollack and Blair (1996), can be expected to attract considerable future work. 1 2 . Complex Adaptive Systems Genetic programming has proven useful in evolving complex systems, such as Lindenmayer systems (Jacob 1996) and cellular automata <ref> (Andre, Bennett, and Koza 1996) </ref> and can be expected to continue to be useful in this area. 1 3 . <p> In most genetic programming applications, the vast majority of computer resources are used on the fitness evaluations. The calculation of fitness for the individuals in the population is usually entirely decoupled. Thus, parallel computing techniques can be beneficially applied to genetic programming and genetic algorithms with almost 100% efficiency <ref> (Andre and Koza 1996) </ref>. In fact, the use of semi-isolated subpopulations often accelerates the finding of a solution to a problem using genetic programming and produces super-linear speedup. Parallelization of genetic programming will be of central importance to the growth of the field. 18.
Reference: <author> Langdon, W. B. </author> <year> 1996. </year> <title> Using data structures within genetic programming. </title> <editor> In Koza, John R., Goldberg, David E., Fogel, David B., and Riolo, Rick L. (editors). </editor> <booktitle> 1996. Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference: <author> Nordin, Peter. </author> <year> 1994. </year> <title> A compiling genetic programming system that directly manipulates the machine code. </title> <editor> In Kinnear, Kenneth E. Jr. (editor). </editor> <booktitle> 1994. Advances in Genetic Programming. </booktitle> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher>
Reference: <author> Pollack, Jordan B. and Blair, Alan D. </author> <year> 1996. </year> <title> Coevolution of a backgammon player. </title> <booktitle> In Artificial Life V: Proceedings of the Fifth International Workshop on the Synthesis and Simulation of Living Systems. </booktitle> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher>
Reference: <author> Rosca, Justinian P. </author> <year> 1995. </year> <title> Genetic programming exploratory power and the discovery of functions. </title> <editor> In McDonnell, John R., Reynolds, Robert G., and Fogel, David B. (editors). </editor> <booktitle> 1995. Evolutionary Programming IV: Proceedings of the Fourth Annual Conference on Evolutionary Programming. </booktitle> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher>
Reference: <author> Samuel, Arthur L. </author> <year> 1959. </year> <title> Some studies in machine learning using the game of checkers. </title> <journal> IBM Journal of Research and Development. </journal> <volume> 3(3): 210229. </volume> <editor> Sanchez, Eduardo and Tomassini, Marco (editors). </editor> <title> Towards Evolvable Hardware. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Volume 1062. </volume> <publisher> Berlin: Springer-Verlag. </publisher>
Reference-contexts: Evolution of Structure One of the most vexatious aspects of automated machine learning from the earliest times has been the requirement that the human user predetermine the size and shape of the ultimate solution to his problem <ref> (Samuel 1959) </ref>. There can be expected to be continuing research on ways by which the size and shape of the solution can be made part of the answer provided by the automated machine learning technique, rather than part of the question supplied by the human user.
Reference: <author> Soule, Terence, Foster, James A., and Dickinson, John. </author> <year> 1996. </year> <title> Code growth in genetic programming. </title> <editor> In Koza, John R., Goldberg, David E., Fogel, David B., and Riolo, Rick L. (editors). </editor> <booktitle> 1996. Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: There is increasing word on the grammatical structure of genetic programming (Whigham 1996). 1 5 . Optimization The fundamental importance of optimization problems guarantees that there will be considerable future work on applying genetic programming to optimization. Recent examples include work <ref> (Soule, Foster, and Dickinson 1996) </ref> from the University of Idaho, the site of much early work on genetic programming techniques and the work of Garces-Perez, Schoenefeld, and Wainwright (1996). 1 6 .
Reference: <author> Spector, Lee. </author> <year> 1996. </year> <title> Simultaneous evolution of programs and their control structures. </title> <editor> In Angeline, Peter J. and Kinnear, Kenneth E. Jr. (editors). </editor> <booktitle> 1996. Advances in Genetic Programming 2. </booktitle> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher> <address> 7 Teller, </address> <note> Astro and Veloso Manuela. </note> <year> 1996. </year> <title> PADO: A new learning architecture for object recognition. </title> <editor> In Ikeuchi, Katsushi and Veloso Manuela (editors). </editor> <title> Symbolic Visual Learning. </title> <publisher> Oxford University Press. </publisher>
Reference: <author> Thompson, Adrian. </author> <title> Silicon evolution. 1996. </title> <editor> In Koza, John R., Goldberg, David E., Fogel, David B., and Riolo, Rick L. (editors). </editor> <booktitle> 1996. Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference: <author> Walsh, Paul and Ryan, Conor. </author> <year> 1996. </year> <title> Paragen: A novel technique for the autoparallelisation of sequential programs using genetic programming. </title> <editor> In Koza, John R., Goldberg, David E., Fogel, David B., and Riolo, Rick L. (editors). </editor> <booktitle> 1996. Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference: <author> Whigham, Peter A. </author> <title> Search bias, language bias, and genetic programming. </title> <editor> In Koza, John R., Goldberg, David E., Fogel, David B., and Riolo, Rick L. (editors). </editor> <booktitle> 1996. Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: The transition from the fixed-length character strings of the genetic algorithm to the variablesized Turing-complete program trees (and even program graphs) of genetic programming further compounds the difficulty of the theoretical issues involved. There is increasing word on the grammatical structure of genetic programming <ref> (Whigham 1996) </ref>. 1 5 . Optimization The fundamental importance of optimization problems guarantees that there will be considerable future work on applying genetic programming to optimization.
References-found: 28

