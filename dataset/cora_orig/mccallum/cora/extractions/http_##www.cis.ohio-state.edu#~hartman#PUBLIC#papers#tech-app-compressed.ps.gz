URL: http://www.cis.ohio-state.edu/~hartman/PUBLIC/papers/tech-app-compressed.ps.gz
Refering-URL: http://www.cis.ohio-state.edu/~hartman/publications.html
Root-URL: 
Email: chandra@cis.ohio-state.edu  
Title: Functional Representation and Understanding of Software: Technology and Application  
Author: John Hartman B. Chandrasekaran 
Note: hartman or  
Web: http://www.cis.ohio-state.edu/hypertext/LAIR/lair-page.html  
Address: 2015 Neil Ave., Columbus, OH 43210-1277  
Affiliation: Laboratory for Artificial Intelligence Research, Dept. of Computer and Information Science The Ohio State University,  
Abstract: We describe our automatic program understanding theory and technology. Our approach has two parts: understanding and representation. The UN-PROG system uses programming plan knowledge to recognize deep programming concepts in existing programs. Functional Representation (FR) is a theory and language for representing understanding of devices, including programs. We use FR to capture program understanding to give the explanations required by applications. Automatic reverse engineering and reengineering tools can use this understanding to produce more useful program descriptions and reengineered code. We describe what has been accomplished so far, and discuss how this strategic dual-use technology can be further developed and applied. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Dean Allemang and B. Chandrasekaran. </author> <title> Func tional representation and program debugging. </title> <booktitle> In 6TH ANNUAL KNOWLEDGE-BASED SOFTWARE ENGINEERING CONFERENCE, </booktitle> <year> 1991. </year>
Reference: [2] <author> B. Chandrasekaran. </author> <title> Functional representation and causal processes. </title> <editor> In M. Yovits, </editor> <booktitle> ADVANCES in COMPUTERS. </booktitle> <publisher> Academic Press, </publisher> <year> 1994. </year>
Reference: [3] <author> David C. Luckham et al. </author> <title> Specification and anal ysis of system architecture using Rapide. </title> <journal> Forthcoming: IEEE Trans. on Software Engineering. </journal>
Reference: [4] <author> John Hartman. </author> <title> Understanding natural pro grams using proper decomposition. </title> <booktitle> 13th INTL. CONF. SOFTWARE ENGINRG. </booktitle> , <year> 1991. </year>
Reference: [5] <author> John Hartman. </author> <title> Technical introduction. </title> <booktitle> AI and AUTOMATED PROGRAM UNDERSTANDING WORKSHOP, Tenth National Conference On Artificial Intelligence, </booktitle> <year> 1992. </year>
Reference-contexts: The plan is represented by control and data flow schemas, and additional qualifications (bottom). Here the program part and plan can be uniquely bound. Therefore, UNPROG recognizes "read-process", its implementation, and associated concepts. Its output is bind 3 APU surveys are in <ref> [5] </ref> and [7]. ings and correspondences between the program, plan and concepts. UNPROG is a powerful technology for identifying deep programming concepts, regardless of how they are implemented.
Reference: [6] <author> John Hartman. </author> <title> Plans in software engineering An overview. </title> <institution> OSU Lab. For AI Research, </institution> <year> 1994. </year>
Reference: [7] <author> Linda Mary Wills. </author> <title> Automated program recogni tion by graph parsing. </title> <type> Technical Report AI-TR-1358, </type> <institution> MIT AI Lab., </institution> <year> 1992. </year> <type> Ph.D. Thesis. </type>
Reference-contexts: The plan is represented by control and data flow schemas, and additional qualifications (bottom). Here the program part and plan can be uniquely bound. Therefore, UNPROG recognizes "read-process", its implementation, and associated concepts. Its output is bind 3 APU surveys are in [5] and <ref> [7] </ref>. ings and correspondences between the program, plan and concepts. UNPROG is a powerful technology for identifying deep programming concepts, regardless of how they are implemented.
References-found: 7

