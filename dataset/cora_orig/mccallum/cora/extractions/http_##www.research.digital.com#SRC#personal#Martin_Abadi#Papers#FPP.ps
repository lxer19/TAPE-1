URL: http://www.research.digital.com/SRC/personal/Martin_Abadi/Papers/FPP.ps
Refering-URL: http://www.research.digital.com/SRC/personal/Martin_Abadi/allpapers.html
Root-URL: http://www.research.digital.com
Title: Page 1 Formal Parametric Polymorphism  
Author: Martn Abadi Luca Cardelli Pierre-Louis Curien 
Affiliation: Digital Equipment Corporation Digital Equipment Corporation CNRS Systems Research Center Systems Research Center Ecole Normale Suprieure  
Abstract: A polymorphic function is parametric if its behavior does not depend on the type at which it is instanti - ated. Starting with Reynolds's work, the study of parametricity is typically semantic. In this paper, we de - velop a syntactic approach to parametricity, and a formal system that embodies this approach, called system R . Girards system F deals with terms and types; R is an extension of F that deals also with relations be - tween types. In R, it is possible to derive theorems about functions from their types, or theorems for free, as Wadler calls them. An easy theorem for free asserts that the type "(X)XfiBool contains only constant functions; this is not provable in F. There are many harder and more substantial examples. Various metatheorems can also be obtained, such as a syntactic version of Reynolds's abstraction theorem. 
Abstract-found: 1
Intro-found: 1
Reference: [Abadi, Cardelli, Curien 1993] <author> M. Abadi, L. Cardelli, and P.-L. Curien. </author> <title> Formal Parametric Polymorphism . Proc. </title> <booktitle> 20th Annual ACM Symposium on Principles of Programming Languages. </booktitle>
Reference-contexts: From here we can apply the elimination rules for " and fi, and obtain (iii). This kind of reasoning is common in our examples of section 3. (In <ref> [Abadi, Cardelli, Curien 1993] </ref>, we had adopted a different formalization of parametricity; it turned out to be inconsistent, see the appendix.) The preceding rules, together with the rules of b and h conversion, form the core of the fragment of R that deals with relations built from variables, fi, and quantifiers.
Reference: [Bainbridge, et al. 1990] <author> E.S. Bainbridge, P.J. Freyd, A. Scedrov, and P.J. Scott, </author> <title> Functorial polymorphism. </title> <booktitle> Theoretical Computer Science 70, </booktitle> <pages> 35-64. </pages>
Reference-contexts: As for semantics, we intend to develop a model of R based on the per model of <ref> [Bainbridge, et al. 1990] </ref>. In the standard per model, universal quantification over types is interpreted with an intersection over pers; in contrast, in the per model of [Bainbridge, et al. 1990], universal quantification over types is interpreted with an intersection over saturated relations. <p> As for semantics, we intend to develop a model of R based on the per model of <ref> [Bainbridge, et al. 1990] </ref>. In the standard per model, universal quantification over types is interpreted with an intersection over pers; in contrast, in the per model of [Bainbridge, et al. 1990], universal quantification over types is interpreted with an intersection over saturated relations. This modification of the per model leads to a simple proof of soundness for the rules (Rel Val Rx) and (Rel Val R y), and for all the other rules of R .
Reference: [Bhm, Berarducci 1985] <author> C. Bhm and A. Berarducci, </author> <title> Automatic synthesis of typed l -programs on term algebras. </title> <booktitle> Theoretical Computer Science 39, </booktitle> <pages> 135-154. </pages>
Reference-contexts: Bhm and Berarducci have used similar types to encode primitive recursion on (possibly heteroge - neous) term algebras <ref> [Bhm, Berarducci 1985] </ref>. They obtain a completeness result that guarantees that the encoding of algebras is correct for closed terms.
Reference: [Cardelli, et al. 1991] <author> L. Cardelli, J.C. Mitchell, S. Martini, and A. Scedrov. </author> <title> An extension of system F with subtyping . Proc. </title> <booktitle> Theoretical Aspects of Computer Software. Lecture Notes in Computer Science 526. </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Mairson treated a system with implicit typing; this stands in contrast with our approach where types and re - lations are treated explicitly. The resulting formalisms have very different properties. Cardelli et al. have defined F &lt;: , an extension of F with subtyping <ref> [Cardelli, et al. 1991] </ref> . Curiously, the rules for F &lt;: capture some aspects of parametricity, but they do not provide a full account of it. Ma suggested another syntactic approach to para metricity [Ma 1992] . It is based on encoding relations using subtyp ing. <p> On the other hand, the work of Hasegawa [Hasegawa 1991] and Hyland, Robin son, and Rosolini [Hyland, Robinson, Rosolini 1990] suggest that the standard per model itself, or closely related ones, may validate those rules. As mentioned in the introduction, system F &lt;: <ref> [Cardelli, et al. 1991] </ref> captures some aspects of para - metric ity. An extension of R with subtyping may yield an encoding of F &lt;: and provide a basis for studying parametricity in lan guages with subtyping.
Reference: [de Bruijn 1972] <author> N.G. de Bruijn, </author> <title> Lambda-calculus notation with nameless dummies. </title> <journal> Indag. Math. </journal> <volume> 34(5), </volume> <pages> 381-392. </pages>
Reference-contexts: Environments, however, are not identified up to renaming of variables in their domain; environment variables are kept distinct by construction. A more formal approach would use de Bruijn indices for free and bound variables <ref> [de Bruijn 1972] </ref> . Page 8 We use the following metavariables: x,y,z range over value variables; X,Y,Z range over type variables; W, X range over relation variables; a,b,c,d range over value terms; A,B,C,D range over type terms; R,S,T,U range over relation terms; E ranges over environments.
Reference: [Girard, Lafont, Taylor 1989] <author> J.-Y. Girard, Y. Lafont, and P. Taylor, </author> <title> Proofs and types. </title> <publisher> Cambridge University Press. </publisher>
Reference-contexts: Reynolds's work provides a precise counterpart to the informal definition of parametricity just given [Reynolds 1983; Ma, Reynolds 1991] . Reynolds's abstraction theorem concerns a language similar to Gi - rards system F <ref> [Girard, Lafont, Taylor 1989] </ref>, and implies that the instances of a polymorphic function at different types behave in re lated ways.
Reference: [Hasegawa 1991] <author> R. Hasegawa. </author> <title> Parametricity of extensionally collapsed term models of polymorphism and their categorical properties . Proc. </title> <booktitle> Theoretical Aspects of Computer Software. Lecture Notes in Computer Science 526. </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: This modification of the per model leads to a simple proof of soundness for the rules (Rel Val Rx) and (Rel Val R y), and for all the other rules of R . On the other hand, the work of Hasegawa <ref> [Hasegawa 1991] </ref> and Hyland, Robin son, and Rosolini [Hyland, Robinson, Rosolini 1990] suggest that the standard per model itself, or closely related ones, may validate those rules. As mentioned in the introduction, system F &lt;: [Cardelli, et al. 1991] captures some aspects of para - metric ity.
Reference: [Hasegawa 1992] <author> R. Hasegawa, </author> <title> Categorical data types in parametric polymorphism . Manuscript. </title> <note> Page 37 </note>
Reference: [Hyland, Robinson, Rosolini 1990] <author> J.M.E. Hyland, E.P. Robinson, and G. Rosolini. </author> <title> Algebraic types in PER models. </title> <booktitle> Proc. Mathematical Foundations of Programming Semantics . Lecture Notes in Computer Science 442. </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: This modification of the per model leads to a simple proof of soundness for the rules (Rel Val Rx) and (Rel Val R y), and for all the other rules of R . On the other hand, the work of Hasegawa [Hasegawa 1991] and Hyland, Robin son, and Rosolini <ref> [Hyland, Robinson, Rosolini 1990] </ref> suggest that the standard per model itself, or closely related ones, may validate those rules. As mentioned in the introduction, system F &lt;: [Cardelli, et al. 1991] captures some aspects of para - metric ity.
Reference: [Longo, Milstead, Soloviev 1993] <author> G. Longo, K. Milstead, and S. Soloviev, </author> <title> The genericity theorem and the notion of parametricity in the polymorphic l calculus. </title> <publisher> In Bhm Festschrift . Cambridge University Press. </publisher>
Reference-contexts: Page 7 Longo, Milsted, and Soloviev investigated para metricity in a system like F with just one new rule (a special case of one of the rules of F &lt;: ) <ref> [Longo, Milstead, Soloviev 1993] </ref> . The system is weaker than R , and leads to different sorts of results. Finally, Plotkin and Abadi explore an alternative formalization of parametricity closer in spirit to Mair - sons [Plotkin, Abadi 1993]. <p> Here we neither prove nor disprove the conjecture, but simply verify some instances. The first instance is the R analogue of Axiom (C) considered in <ref> [Longo, Milstead, Soloviev 1993] </ref> . Instance 1 Let E a : (X)A " , where X A , and let E F F C.
Reference: [Longo, Moggi 1991] <author> G. Longo and E. Moggi, </author> <booktitle> Constructive natural deduction and its w-set interpretation . Mathematical Structures in Computer Science 1(2). </booktitle>
Reference-contexts: Reynolds's more satisfactory approach is based on relations between types. But before we discuss relations in general, it is con venient to introduce the per model <ref> [Longo, Moggi 1991] </ref> , which is based on special relations. In per semantics, types are interpreted as pers, that is, as partial equivalence relations (symmetric and transitive rela tions on the universe of values).
Reference: [Ma 1992] <author> Q.-Y. Ma. </author> <title> Parametricity as subtyping. </title> <booktitle> Proc. 19th Annual ACM Symposium on Principles of Programming Languages. </booktitle>
Reference-contexts: Cardelli et al. have defined F &lt;: , an extension of F with subtyping [Cardelli, et al. 1991] . Curiously, the rules for F &lt;: capture some aspects of parametricity, but they do not provide a full account of it. Ma suggested another syntactic approach to para metricity <ref> [Ma 1992] </ref> . It is based on encoding relations using subtyp ing. The power of Mas system seems to be less understood; there is also some difficulty in finding a model for all the desired subtyping rules.
Reference: [Ma, Reynolds 1991] <author> Q.-Y. Ma and J. Reynolds. </author> <title> Types, abstraction, and parametric polymorphism, </title> <booktitle> part 2 . Proc. Mathematical Foundations of Programming Semantics . Springer-Verlag. </booktitle>
Reference-contexts: Reynolds's work provides a precise counterpart to the informal definition of parametricity just given <ref> [Reynolds 1983; Ma, Reynolds 1991] </ref> . Reynolds's abstraction theorem concerns a language similar to Gi - rards system F [Girard, Lafont, Taylor 1989], and implies that the instances of a polymorphic function at different types behave in re lated ways.
Reference: [Mairson 1991] <author> H. Mairson. </author> <title> Outline of a proof theory of parametricity. </title> <booktitle> Proc. 5th International Symposium on Functional Programming Languages and Computer Architecture . Springer-Verlag. </booktitle>
Reference-contexts: On the other hand, the syntactic study of parametricity is rather new. Some recent work is re lated to ours. Mairson advocated and developed a syntactic approach to parametricity in order to provide careful formal versions of some of Wadlers theorems <ref> [Mairson 1991] </ref>. Mairsons approach consists in translating a polymorphic language into a second-order logic. Because the second-order logic used is fairly weak, induc - tion arguments become necessary in some of the proofs; our proofs, like Wadlers, do not rely on induction.
Reference: [Meyer, et al. 1990] <author> A.R. Meyer, J.C. Mitchell, E. Moggi, and R. Statman, </author> <title> Empty types in polymorphic lambda calculus (preliminary report). In Logical foundations of functional programming, </title> <editor> G. Huet, ed. </editor> <publisher> Addison-Wesley. </publisher> <pages> 273-314. </pages>
Reference-contexts: Such a lemma would claim that if E,x:A J is provable and x does not occur in J , then E J is provable as well. As in calculi with empty types <ref> [Meyer, et al. 1990] </ref> this lemma fails in R 1 . As an example we show that true : Bool Bool * false : Bool but the consistency of R 1 disallows true : Bool Bool * false : Bool (see section 4).
Reference: [Milner, Tofte, Harper 1989] <author> R. Milner, M. Tofte, and R. Harper, </author> <title> The definition of Standard ML. </title> <publisher> MIT Press. </publisher>
Reference-contexts: With this caveat, it can be argued that truly polymorphic functions are parametric, and in any case it is the parametric poly - morphic functions that form the core of languages such as ML <ref> [Milner, Tofte, Harper 1989] </ref> . Reynolds's work provides a precise counterpart to the informal definition of parametricity just given [Reynolds 1983; Ma, Reynolds 1991] .
Reference: [Mitchell, Scedrov 1992] <author> J.C. Mitchell and A. Scedrov, </author> <title> Notes on sconing and relators. </title> <type> Manuscript. </type>
Reference: [Plotkin, Abadi 1993] <author> G.D. Plotkin and M. Abadi. </author> <title> A logic for parametric polymorphism . Proc. </title> <booktitle> International Conference on Typed Lambda Calculi and Applications . Springer-Verlag. </booktitle>
Reference-contexts: The system is weaker than R , and leads to different sorts of results. Finally, Plotkin and Abadi explore an alternative formalization of parametricity closer in spirit to Mair - sons <ref> [Plotkin, Abadi 1993] </ref>. That paper describes a second-order logic with an axiom of parametricity; the logic is not an extension of system F, like R , but rather a logic about system F terms. 2. Formal parametricity In this section we describe our formalization of parametricity.
Reference: [Plotkin, Abadi, Cardelli 1993] <author> G.D. Plotkin, M. Abadi, and L. Cardelli, </author> <title> Subtyping and parametricity. </title> <type> Manuscript. </type>
Reference-contexts: An extension of R with subtyping may yield an encoding of F &lt;: and provide a basis for studying parametricity in lan guages with subtyping. An analogous extension of a logic for parametric polymorphism is carried out in <ref> [Plotkin, Abadi, Cardelli 1993] </ref> . Acknowledgments We would like to thank Roberto Bellucci, Ryu Hasegawa, Christine Paulin-Mohring, Gordon Plotkin, and Phil Wadler for helpful discussions.
Reference: [Reynolds 1983] <author> J.C. Reynolds, </author> <title> Types, abstraction, and parametric polymorphism . In Information Processing, R.E.A. </title> <editor> Mason, ed. </editor> <publisher> North Holland. </publisher> <pages> 513-523. </pages>
Reference-contexts: Reynolds's work provides a precise counterpart to the informal definition of parametricity just given <ref> [Reynolds 1983; Ma, Reynolds 1991] </ref> . Reynolds's abstraction theorem concerns a language similar to Gi - rards system F [Girard, Lafont, Taylor 1989], and implies that the instances of a polymorphic function at different types behave in re lated ways.
Reference: [Strachey 1967] <author> C. </author> <title> Strachey, </title> <booktitle> Fundamental concepts in programming languages . Lecture notes for the International Summer School in Computer Programming, </booktitle> <address> Copenhagen, </address> <month> August </month> <year> 1967. </year>
Reference-contexts: 1. Explicit relations A polymorphic function is parametric if its behavior does not depend on the type at which it is instanti - ated <ref> [Strachey 1967] </ref> . A function that reverses lists, for example, is parametric because it does not look at the types of the elements of the lists given as inputs. There are important non-parametric polymorphic functions, such as a print function that maps values of any type to text representations.
Reference: [Wadler 1989] <author> P. Wadler. </author> <title> Theorems for free! Proc. </title> <booktitle> 4th International Symposium on Functional Programming Languages and Computer Architecture . Springer-Verlag. </booktitle>
Reference-contexts: A bit of calculation reveals that the iden tity function is the only function with this property, so f must be the identity function. This is what Wadler would call a theorem for free <ref> [Wadler 1989] </ref> : a result about a func - tion that is obtained by examin ing only its type, and not its code. <p> Theorems for free, syntactically In this section we illustrate the power of R 1 by carrying out formal proofs. The results given below apply to all terms, and not just to closed terms. In some cases, even the results for closed terms are somewhat difficult; Wadlers work <ref> [Wadler 1989] </ref> includes a few interesting semantic results that can be read as results about closed terms. <p> The statements of these theorems express interesting equations between polymorphic terms that can be interpreted as program transformations. The theorems have been proved semantically for closed terms by Wadler <ref> [Wadler 1989] </ref>. Mairson has also discussed the second of these theorems, and has argued for the need of structural induction (in his framework). As we have already stressed, our proofs are free of induction.
Reference: [Wadler 1991] <author> P. Wadler, </author> <title> Recursive types for free! Manuscript. </title> <note> Page 38 </note>
Reference-contexts: The goal of this subsection is to show that, given A covariant in X, the type T = (X)(A X) X" fi fi Page 28 can be turned into an initial A-algebra. (See also <ref> [Wadler 1991] </ref>.) Hence the initial algebras useful in programming (for example, that of natural numbers, see section 3.9) can be defined properly as polymorphic types. Bhm and Berarducci have used similar types to encode primitive recursion on (possibly heteroge - neous) term algebras [Bhm, Berarducci 1985].
References-found: 23

