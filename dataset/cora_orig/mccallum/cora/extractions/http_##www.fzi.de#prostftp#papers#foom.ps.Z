URL: http://www.fzi.de/prostftp/papers/foom.ps.Z
Refering-URL: http://www.progsoc.uts.edu.au/~geldridg/cpp/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: e-mail: -casais, lindner, rueping-@fzi.de  
Title: Formal Object-Oriented Methods  
Author: Eduardo Casais, Thomas Lindner, Andreas Rping 
Address: Haid-und-Neu-Strae 10-14 D-76131 Karlsruhe, Germany  
Affiliation: Forschungszentrum Informatik (FZI)  
Abstract: Basing software construction on formal methods is a key issue when dealing with the production of reliable programs. Formal object-oriented methods combine the advantages of object-orientationnotably its powerful modelling capabilitiesand those of formal methodssuch as verifiability of program properties. Our tutorial reports on the state of the art in formal object-oriented methods. The issues to address when integrating object-orientation and formal methods are considered, and various integration strategies are presented. Major formal approaches (such as Object-Z or OSDL) are compared and evaluated. The application of formal object-oriented methods is illustrated with a case study dealing with the specification and implementation of control programs for the model of a manufacturing plant. The impact of formal approaches on the development process is briey discussed. 
Abstract-found: 1
Intro-found: 1
Reference: [Alencar 91] <author> Antonio J. Alencar, Joseph A. Goguen. </author> <title> OOZE: An Object Oriented Z Environment, </title> <editor> in Pierre America (Ed.), </editor> <booktitle> ECOOP 91. </booktitle> <volume> LNCS No. 512. </volume> <publisher> Springer Verlag, </publisher> <year> 1991. </year>
Reference-contexts: These efforts have been carried in three main directions: Extending traditional formal specifications languages notably VDM [Jones 90] and Z [Potter 91] with object-oriented features; some examples of this approach are VDM++ [Drr 92], MooZ [Meira 91], Object-Z [Carrington 90], OOZE <ref> [Alencar 91] </ref> and Z++ [Lano 91]. Designing object-oriented programming languages on the basis of mathematical models enabling validation of program properties at compile-time and at run-time: typical examples of this approach include Eiffel [Meyer 92] and POOL [America 87].
Reference: [Brok 93] <author> R. Brok, fl. Haugen: </author> <title> Engineering Real-Time Systems, </title> <publisher> Prentice Hall, </publisher> <year> 1993. </year>
Reference: [Casais 95] <author> E. Casais, T. Lindner: </author> <title> Formal Object-Oriented Methods. </title> <booktitle> Tutorial Notes, TOOLS Europe 95 Conference, </booktitle> <address> Versailles, </address> <year> 1995. </year>
Reference-contexts: Undefined signals are discharged. A means for validating SDL specifications are so-called Message Sequence Charts (MSC). Using MSCs, one can formulate requirements of an SDL specification, and afterwards validate it using the SDT Validator. Examples for MSCs are shown in the more elaborate tutorial material <ref> [Casais 95] </ref>. 4.2 Production Cell in SDL 4.2.1 The system level Sensors and actuators are viewed as part of the environment. As a consequence, each sensor and each actuator is represented by a channel connecting the corresponding block with the surrounding box representing the environment.
Reference: [Carrington 90] <author> D. Carrington, D. Duke, R. Duke, P. King, G. Rose and G. Smith, Object-Z: </author> <title> An Object-Oriented Extension to Z, in Formal Description Techniques, </title> <editor> ed. S. T. Vuong, </editor> <publisher> Elsevier Science Publishers, </publisher> <year> 1990, </year> <pages> pp. 281-296. </pages>
Reference-contexts: These efforts have been carried in three main directions: Extending traditional formal specifications languages notably VDM [Jones 90] and Z [Potter 91] with object-oriented features; some examples of this approach are VDM++ [Drr 92], MooZ [Meira 91], Object-Z <ref> [Carrington 90] </ref>, OOZE [Alencar 91] and Z++ [Lano 91]. Designing object-oriented programming languages on the basis of mathematical models enabling validation of program properties at compile-time and at run-time: typical examples of this approach include Eiffel [Meyer 92] and POOL [America 87].
Reference: [Cline 90] <author> Marshall P. Cline and Doug Lea, </author> <title> The Behavior of C++ Classes, </title> <booktitle> in Proceedings of the Symposium on Object-Oriented Programming Emphasizing Practical Applications, </booktitle> <year> 1990. </year>
Reference-contexts: Adding specification and verification capabilities to a traditional object-oriented programming environment: Fresco [Wills91] (for Smalltalk) and A++ <ref> [Cline 90] </ref> (for C++) correspond to this retrofitting approach. In all cases, language designers must strike a difficult balance between the abstraction level and the expressiveness of the language on the one hand, and the ability to manipulate and verify software mathematically on the other hand.
Reference: [Drr 92] <author> Eugne Drr and Jan van Katwijk, </author> <title> VDM++: A Formal Specification Language for Object-Oriented Designs, </title> <booktitle> in Proceedings 7th TOOLS Conference, </booktitle> <editor> eds. Georg Heeg, Boris Magnusson and Bertrand Meyer, </editor> <publisher> Prentice Hall, </publisher> <year> 1992, </year> <pages> pp. 63-78. </pages>
Reference-contexts: These efforts have been carried in three main directions: Extending traditional formal specifications languages notably VDM [Jones 90] and Z [Potter 91] with object-oriented features; some examples of this approach are VDM++ <ref> [Drr 92] </ref>, MooZ [Meira 91], Object-Z [Carrington 90], OOZE [Alencar 91] and Z++ [Lano 91]. Designing object-oriented programming languages on the basis of mathematical models enabling validation of program properties at compile-time and at run-time: typical examples of this approach include Eiffel [Meyer 92] and POOL [America 87].
Reference: [Gamma 93] <author> Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides. </author> <title> Design Patterns: Abstraction and Reuse of Object-Oriented Design, </title> <editor> in Oscar M. Nierstrasz (Ed.), </editor> <booktitle> ECOOP 93. </booktitle> <volume> LNCS No. 707. </volume> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Application programmers can use such libraries by choosing the appropriate components for their application program. Second, classes can be reused including the structure in which they are organized. Design patterns are reusable microarchitectures which describe typical collaborations of classes in a certain context (cf. <ref> [Gamma 93] </ref>). Reuse at the level of design patterns means that we can reuse not only implementations, but also designs. Finally, there are domain-specific design patterns which let us reuse not only a design, but also the knowledge acquired for a certain application domain.
Reference: [Jones 90] <author> Cliff B. Jones, </author> <title> Systematic Software Development using VDM, </title> <publisher> Prentice Hall, </publisher> <year> 1990. </year>
Reference-contexts: These efforts have been carried in three main directions: Extending traditional formal specifications languages notably VDM <ref> [Jones 90] </ref> and Z [Potter 91] with object-oriented features; some examples of this approach are VDM++ [Drr 92], MooZ [Meira 91], Object-Z [Carrington 90], OOZE [Alencar 91] and Z++ [Lano 91].
Reference: [Lano 91] <author> Kevin Lano, </author> <title> Z++ An Object-Oriented Extension To Z, </title> <booktitle> in Z User Workshop: Proceedings of the Z User Meeting, </booktitle> <publisher> Oxford, </publisher> <editor> ed. John E. Nicholls, </editor> <booktitle> Workshops in Computing, </booktitle> <publisher> Springer Verlag, </publisher> <year> 1991, </year> <pages> pp. 151-172. </pages>
Reference-contexts: These efforts have been carried in three main directions: Extending traditional formal specifications languages notably VDM [Jones 90] and Z [Potter 91] with object-oriented features; some examples of this approach are VDM++ [Drr 92], MooZ [Meira 91], Object-Z [Carrington 90], OOZE [Alencar 91] and Z++ <ref> [Lano 91] </ref>. Designing object-oriented programming languages on the basis of mathematical models enabling validation of program properties at compile-time and at run-time: typical examples of this approach include Eiffel [Meyer 92] and POOL [America 87].
Reference: [Lewerentz 95] <author> C. Lewerentz, T. Lindner. </author> <title> Formal Development of Reactive Systems: Case Study Production Cell. </title> <publisher> LNCS No. 891. Springer Verlag, </publisher> <year> 1995. </year>
Reference-contexts: and parallel object-oriented system, with appropriate verification calculi, are still being developed; this explains why formal specification languages, but also programming languages, providing extensive facilities to describe object dynamics have in general only partial semantics. 3 Case Study Production Cell In this section we present the case study Production Cell <ref> [Lewerentz 95] </ref>. The task was to construct a control program for an industrial production cell. <p> To increase the utilization of the press, the robot is fitted with two arms one always used for loading, the other one for unloading the press. 1. The task description was given in <ref> [Lewerentz 95] </ref> and can be obtained via anonymous ftp from ftp.fzi.de in the directory /pub/korso/production_cell. The Forschungszentrum Informatik (FZI) has a working toy model of the production cell which can be controlled via a RS 232 serial line port. <p> The same control program can be used for running the toy model as well. More details can be found in the appendix of <ref> [Lewerentz 95] </ref>. 4 SDL In this section we introduce object-oriented SDL as our first example of an object-oriented specification language. SDL is presented using an SDL solution for the Production Cell problem. 4.1 The Language SDL is a language standardized by CCITT.
Reference: [Meira 91] <author> Silvio R. L. Meira and Ana L. C. Cavalcanti, </author> <title> Modular Object Oriented Z Specifications, </title> <booktitle> in Z User Workshop: Proceedings of the Fourth Annual Z User Meeting, </booktitle> <publisher> Oxford, </publisher> <editor> ed. John E. Nicholls, </editor> <booktitle> Workshops in Computing, </booktitle> <publisher> Springer Verlag, </publisher> <year> 1991, </year> <pages> pp. 173-192. </pages>
Reference-contexts: These efforts have been carried in three main directions: Extending traditional formal specifications languages notably VDM [Jones 90] and Z [Potter 91] with object-oriented features; some examples of this approach are VDM++ [Drr 92], MooZ <ref> [Meira 91] </ref>, Object-Z [Carrington 90], OOZE [Alencar 91] and Z++ [Lano 91]. Designing object-oriented programming languages on the basis of mathematical models enabling validation of program properties at compile-time and at run-time: typical examples of this approach include Eiffel [Meyer 92] and POOL [America 87].
Reference: [Meyer 92] <author> Bertrand Meyer, </author> <title> Eiffel: The Language, Object-Oriented Series, </title> <publisher> Prentice Hall, </publisher> <year> 1992. </year>
Reference-contexts: Designing object-oriented programming languages on the basis of mathematical models enabling validation of program properties at compile-time and at run-time: typical examples of this approach include Eiffel <ref> [Meyer 92] </ref> and POOL [America 87]. Adding specification and verification capabilities to a traditional object-oriented programming environment: Fresco [Wills91] (for Smalltalk) and A++ [Cline 90] (for C++) correspond to this retrofitting approach.
Reference: [Potter 91] <author> B. Potter, J. Sinclair and D. Till, </author> <title> An introduction to formal specification and Z, </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: These efforts have been carried in three main directions: Extending traditional formal specifications languages notably VDM [Jones 90] and Z <ref> [Potter 91] </ref> with object-oriented features; some examples of this approach are VDM++ [Drr 92], MooZ [Meira 91], Object-Z [Carrington 90], OOZE [Alencar 91] and Z++ [Lano 91].
Reference: [Rping 94] <author> Andreas Rping. </author> <title> Modules in Object-Oriented Systems, </title> <editor> in Raimund Ege, Madhu Singh, Bertrand Meyer (Eds.), </editor> <booktitle> TOOLS 14. </booktitle> <publisher> Prentice Hall, </publisher> <year> 1994. </year>
Reference-contexts: First, formal object-oriented methods embody the powerful structuring mechanisms that object-orientation offers, such as encapsulation and abstraction. While conventional specification techniques are somewhat difficult to apply in larger projects, formal object-oriented methods let specifiers structure their system into manageable modules (cf. <ref> [Rping 94] </ref>). Second, components are more reliable if they are formally specified. There is no doubt that object-oriented libraries can profit a lot from the fact that their components have been formally specified. Users are ensured that the components they choose for their application have indeed the expected behaviour.
Reference: [Wills 91] <author> Alan Wills. </author> <title> Capsules and Types in Fresco: Program Verification in Smalltalk, </title> <editor> in Pierre America (Ed.), </editor> <booktitle> ECOOP 91. </booktitle> <volume> LNCS No. 512. </volume> <publisher> Springer Verlag, </publisher> <year> 1991. </year>
References-found: 15

