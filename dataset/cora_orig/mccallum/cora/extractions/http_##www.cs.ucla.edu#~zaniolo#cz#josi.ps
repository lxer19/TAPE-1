URL: http://www.cs.ucla.edu/~zaniolo/cz/josi.ps
Refering-URL: http://www.cs.ucla.edu/~zaniolo/cz/ZanioloPapers.html
Root-URL: http://www.cs.ucla.edu
Title: where he specializes in data warehouse and data mining applications. active and temporal reasoning in
Author: He Carlo Zaniolo 
Degree: where he occupies the N.E. Friedmann Chair in  
Affiliation: of Computer Science with the UCLA School of Engineering and Applied Sciences,  Knowledge Science.  
Note: 38 IAKOVOS MOTAKIS AND CARLO ZANIOLO Contributing Authors Iakovos Motakis obtained his Diploma in Electrical Engineering from the National Technical University of Athens, in 1989, and his M.S. and Ph.D. from U.C.L.A., in 1992 and 1997, respectively. He is currently a consultant with Cambridge Technology Partners,  was previously with NCR Teradata. His current research interests also include  is a professor  Dr. Zaniolo's research interests include  ACM SIGMOD and VLDB conferences.  
Abstract: Before joining UCLA, in 1991, C. Zaniolo earned twenty years of industrial experience. He was an associate director in the Software Technology Program of MCC (Austin, Texas); before MCC he was with AT&T Bell Labs (Murray Hill, NJ), Sperry Research (Sudbury, Massachusetts) and Burroughs Corporation (Pasadena, California). 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> S. Abiteboul, R. Hull, and V. Vianu. </author> <title> Foundations of Databases. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: Within this framework, the expressive power of such languages can now be studied using methods and tools previously used for Datalog and First-Order languages <ref> [1] </ref>. Another topic for further research that we are currently pursuing is that of alternative optimization strategies for composite event languages.
Reference: 2. <author> N. Arni, K. Ong, S. Tsur, and C. Zaniolo. </author> <title> LDL++: A second generation deductive database system. </title> <note> submitted for publication. </note>


Reference: 1. <author> SEQ (;). Since the event E = E 1 (X); E 2 (Y) is equivalent to prior(E 1 (X); E 2 (Y)) in EPL and ODE, </author> <title> the rule for sat E is defined as it is explained in Sections 4.5 and 4.6: sat E (X; Y; s(J)) sat E 2 (Y; s(J)); has sat E 1 (X; J): </title>
Reference-contexts: Within this framework, the expressive power of such languages can now be studied using methods and tools previously used for Datalog and First-Order languages <ref> [1] </ref>. Another topic for further research that we are currently pursuing is that of alternative optimization strategies for composite event languages.
Reference: 2. <author> OR. </author> <title> This is similar to EPL's disjunction, but the scope rules are different. In SNOOP, the parameters of a disjunction's instance are the parameters of the disjunct that actually occurs. This is different from EPL, where the variables inside a disjunction are not exported outside it. </title>





Reference: 4. <institution> The disjunction E = fE 1 (X 1 ); E 2 (X 2 ); : : : ; E n (X n )g occurs when at least one event among E 1 ; : : : ; E n occurs. </institution> <note> An example is shown in Figure 2(d). </note>


Reference: 2. <institution> A star sequence E(X) = flF (X) is satisfied by an immediate sequence of one or more consecutive instances of F . This is illustrated in Figure 2(b). </institution>


Reference: 2. <author> Simultaneous Events. </author> <title> FSA are inherently sequential, and thus, simultaneous events cannot be supported, unless transitions based on combinations of events are allowed. This could result in a multitude of states and transitions, that would make the FSA very complicated. </title>

Reference: 2. <editor> Motivations Among the various formalisms used in the past for implementing composite event detectors, </editor> <title> that of Finite State Automata (FSA) used in ODE is probably the simplest and most familiar one. occurrence of a composite event. Here, f and g denote two basic events and (f,g) denotes an immediate sequence, i.e., event g must immediately follow event f. In ODE, for each composite event expression E, a general non-deterministic automaton is created, which can succeed multiple times, once for each occurrence of E. Unfortunately, when it comes to detecting composite events, FSA suffer from the following limitations: </title>


References-found: 8

