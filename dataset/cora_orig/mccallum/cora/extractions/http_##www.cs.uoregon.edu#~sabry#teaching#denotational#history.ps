URL: http://www.cs.uoregon.edu/~sabry/teaching/denotational/history.ps
Refering-URL: http://www.cs.uoregon.edu/~sabry/teaching/denotational/index.html
Root-URL: http://www.cs.uoregon.edu
Title: Domains and Denotational Semantics: History, Accomplishments and Open Problems edited by with contributions by start
Author: Achim Jung Marcelo Fiore Achim Jung Eugenio Moggi Peter O'Hearn Jon Riecke Giuseppe Rosolini Ian Stark 
Note: Let us  
Date: January 22, 1996  
Abstract: In this collection we try to give an overview of some selected topics in Domain Theory and Denotational Semantics. In doing so, we first survey the mathematical universes which have been used as semantic domains. The emphasis is on those ordered structures which have been introduced by Dana Scott in 1969 and which figure under the name (Scott-) domains. After surveying developments in the concrete theory of domains we describe two newer developments, the axiomatic and the synthetic approach. In the second part we look at three computational phenomena in detail, namely, sequential computation, polymorphism, and mutable state, and at the challenges that these pose for a mathematical model. This presentation does by no means exhaust the various approaches to denota-tional semantics and it certainly does not describe all possible mathematical techniques which have been used to describe various aspects of programs. We hope that, nevertheless, it illustrates how a particular challenge (namely the modelling of recursive definitions) has given rise to an immensely rich theory, both in its general parts and in its applications. Denotational semantics has traditionally been described as the theory of true meanings for programs, or, to put it more poignantly, as the theory of what programs denote. In many cases, denotations have been built with the help of functions in some mathematical universe and so this position presupposes that the ontological status of sets and functions is firmly established. But there has always been an alternative viewpoint in which denotational semantics is seen as a translation from one formal system to another. This second position has become more and more popular over the last years, following the rapid progress on the programming language side which results in ever new and successful computational paradigms and which can hardly be ascribed merely to the desire to find syntactical descriptions of already existing mathematical objects. However, the pragmatics of denotational semantics is essentially unaffected by the foundational stance one takes; the aims, hopes and concrete uses are the same. In highly condensed form, these may be described as follows: By translating from one formalism into another one expects to gain new insight into the object at hand. Elaborating slightly on this, we can say that the purpose of denotational semantics is threefold: to bring out subtle issues in language design, to derive new reasoning principles, and to develop an intuitive abstract model of the programming language under consideration so as to aid program development. One would expect that the connection between programming language and 
Abstract-found: 1
Intro-found: 1
Reference: [Abr87] <author> S. Abramsky. </author> <title> Domain Theory and the Logic of Observable Properties. </title> <type> PhD thesis, </type> <institution> University of London, </institution> <year> 1987. </year>
Reference: [Abr91a] <author> S. Abramsky. </author> <title> A domain equation for bisimulation. </title> <journal> Information and Computation, </journal> <volume> 92 </volume> <pages> 161-218, </pages> <year> 1991. </year>
Reference: [Abr91b] <author> S. Abramsky. </author> <title> Domain theory in logical form. </title> <journal> Annals of Pure and Applied Logic, </journal> <volume> 51 </volume> <pages> 1-77, </pages> <year> 1991. </year>
Reference: [AC80] <author> E. Astesiano and G. Costa. </author> <title> Nondeterminism and fully abstract models. </title> <journal> RAIRO, </journal> <volume> 14(4) </volume> <pages> 323-347, </pages> <year> 1980. </year>
Reference: [ACN90] <author> L. Augustsson, Th. Coquand, and B. Nordstrom. </author> <title> A short description of Another Logical Framework. </title> <booktitle> In Informal Proceedings of the First Workshop on Logical Frameworks, Antibes, </booktitle> <year> 1990. </year>
Reference: [Ada93] <author> J. Adamek. </author> <title> Data types in algebraically !-complete categories. </title> <note> To appear in Information and Computation, </note> <year> 1993. </year>
Reference: [AJ94a] <author> S. Abramsky and R. Jagadeesan. </author> <title> Games and full completeness for multiplicative linear logic. </title> <journal> Journal of Symbolic Logic, </journal> <volume> 59(2) </volume> <pages> 543-574, </pages> <year> 1994. </year>
Reference-contexts: One interesting bit of progress is the game semantics of Samson Abramsky and Radha Jagadeesan <ref> [AJ94a] </ref>, which gives a model of multiplicative linear type theory in which all elements are definable (and one expects parametric). This covers a weak form of polymorphism related to that found in ML, and the model construction does not use logical relations. Other Approaches to Parametricity.
Reference: [AJ94b] <author> S. Abramsky and A. Jung. </author> <title> Domain theory. </title> <editor> In S. Abramsky, D. M. Gabbay, and T. S. E. Maibaum, editors, </editor> <booktitle> Handbook of Logic in Computer Science, </booktitle> <volume> volume 3, </volume> <pages> pages 1-168. </pages> <publisher> Clarendon Press, </publisher> <year> 1994. </year>
Reference: [AM94] <author> S. Abramsky and G. McCusker. </author> <title> Games for recursive types. </title> <editor> In C. Han-kin and R. Nagarajan, editors, </editor> <booktitle> Theory and Formal Methods 1994, Lecture Notes in Computer Science. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1994. </year> <note> to appear. </note>
Reference: [AM95] <author> S. Abramsky and G. McCusker. </author> <title> Games and full abstraction for the lazy -calculus. </title> <booktitle> In 10th Symposium on Logic in Computer Science, </booktitle> <pages> pages 234-243. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year>
Reference: [Ama89] <author> R. M. Amadio. </author> <title> Recursion over realizability structures. </title> <journal> Information and Computation, </journal> <volume> 91 </volume> <pages> 55-85, </pages> <year> 1989. </year>
Reference-contexts: Work on realizability models has flourished. Specific directions include algebraic characterizations of low-order types, work on recursion, and on subtypes; just a few examples are <ref> [HRR88, BFSS90, Ama89, FMRS90, BL90, Mit88] </ref>. Other pointers to work on realizability models can be found in the section on synthetic domain theory. Comparison and Evaluation. The construction and understanding of models of the polymorphic -calculus represents a substantial achievement. <p> One example already is in work on applying parametricity to the semantics of imperative languages [OR95c]. One way to find a parametric model of impredicative type theory with recursion would be to trim down a domain-based PER model <ref> [Ama89, Pho90, FMRS90] </ref>. But since we already know of domain-theoretic models of polymorphism, models that accommodate fixed-points, there is a natural question: * Can a cpo model of the polymorphic -calculus be modified to be parametric? .
Reference: [AMJ94] <author> S. Abramsky, P. Malacaria, and R. Jagadeesan. </author> <title> Full abstraction for PCF (extended abstract). </title> <editor> In M. Hagiya and J.C. Mitchell, editors, </editor> <booktitle> Theoretical Aspects of Computer Software, </booktitle> <pages> pages 1-15. </pages> <publisher> Springer Verlag, </publisher> <year> 1994. </year> <note> (Full version available from http://theory.doc.ic.ac.uk:80/tfm/papers/MalacariaP/PCFfullabs.dvi.Z). </note>
Reference: [AO93] <author> S. Abramsky and L. Ong. </author> <title> Full abstraction in the lazy lambda calculus. </title> <journal> Information and Computation, </journal> <volume> 105 </volume> <pages> 159-267, </pages> <year> 1993. </year>
Reference: [AP90] <author> M. Abadi and G. D. Plotkin. </author> <title> A Per model of polymorphism and recursive types. </title> <booktitle> In 5th Annual IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 355-365. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1990. </year> <month> 27 </month>
Reference: [Bar92] <author> M. Barr. </author> <title> Algebraically compact functors. </title> <journal> Journal of Pure and Applied Algebra, </journal> <volume> 82 </volume> <pages> 211-231, </pages> <year> 1992. </year>
Reference: [BBHdP93] <author> P.N. Benton, G.M. Bierman, J.M.E. Hyland, and V.C.V. de Paiva. </author> <title> Linear lambda calculus and categorical models revisited. </title> <editor> In E. Borger et al., editor, </editor> <booktitle> Selected Papers from Computer Science Logic '92, volume 702 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference: [BC85] <author> G. Berry and P.-L. Curien. </author> <title> Theory and practice of sequential algorithms: The kernel of the applicative language CDS. </title> <editor> In J. C. Reynolds and M. Nivat, editors, </editor> <booktitle> Algebraic Semantics, </booktitle> <pages> pages 35-84. </pages> <publisher> Cambridge University Press, </publisher> <year> 1985. </year>
Reference: [BCL85] <author> G. Berry, P.-L. Curien, and J.-J. Levy. </author> <title> Full abstraction for sequential languages: The state of the art. </title> <editor> In M. Nivat and J. Reynolds, editors, </editor> <booktitle> Algebraic Semantics, </booktitle> <pages> pages 89-132. </pages> <publisher> Cambridge University Press, </publisher> <year> 1985. </year>
Reference: [BE91] <author> A. Bucciarelli and T. Ehrhard. </author> <title> Sequentiality and strong stability. </title> <booktitle> In 6th Annual IEEE Symposium on Logic in Computer Science. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1991. </year>
Reference: [Ber78] <author> G. Berry. </author> <title> Stable models of typed -calculi. </title> <booktitle> In Proceedings of the 5th International Colloquium on Automata, Languages and Programming, volume 62 of Lecture Notes in Computer Science, </booktitle> <pages> pages 72-89. </pages> <publisher> Springer Verlag, </publisher> <year> 1978. </year>
Reference: [Ber79] <author> G. Berry. </author> <title> Modeles Complement Adequats et Stables des Lambda-calculs types, 1979. </title> <institution> These de Doctorat d'Etat, Universite Paris VII. </institution>
Reference: [Ber93] <author> U. Berger. </author> <title> Total sets and objects in domain theory. </title> <journal> Annals of Pure and Applied Logic, </journal> <volume> 60 </volume> <pages> 91-117, </pages> <year> 1993. </year>
Reference: [BFSS90] <author> S. Bainbridge, P. J. Freyd, A. Scedrov, and P. J. Scott. </author> <title> Functorial poly-morphism. </title> <journal> Theoretical Computer Science, </journal> <volume> 70(10) </volume> <pages> 35-64, </pages> <year> 1990. </year> <note> Corrigendum in 71(3):431, </note> <year> 1990. </year>
Reference-contexts: Work on realizability models has flourished. Specific directions include algebraic characterizations of low-order types, work on recursion, and on subtypes; just a few examples are <ref> [HRR88, BFSS90, Ama89, FMRS90, BL90, Mit88] </ref>. Other pointers to work on realizability models can be found in the section on synthetic domain theory. Comparison and Evaluation. The construction and understanding of models of the polymorphic -calculus represents a substantial achievement. <p> The importance of these properties can be seen in a number of works, beginning with [Rey83] and continuing in a number of places (e.g. [RP93]), with probably the most systematic exposition being [PA93]. Bainbridge, 18 Freyd, Scedrov and Scott <ref> [BFSS90] </ref> were the first to define a parametric model sat-isfying these properties; they achieved this by trimming down the PER model. <p> The first parametric model was in fact obtained by taking the standard PER model, and applying the cut-down scheme wrt certain relations between PERs <ref> [BFSS90] </ref>. The key fact is that PERs are sufficiently rich to allow the trimmed-down PER to exist. General conditions sufficient for collapsing to a parametric model, together with a slick model construction based on internal categories, have been given in [RR94]. <p> A connection between dinaturality and parametricity was proposed in <ref> [BFSS90] </ref>. The notion of dinatural has problems: dinatural transformations do not compose in general, and thus one does not automatically get a category. However, all definable elements in the polymorphic -calculus are dinatural, so dinaturality can be used as a sound principle for reasoning about polymorphic functions. <p> There remain specific questions about relational parametricity and related approaches. The connection between data abstraction and uniformity has not been completely explained [Rob], and there are particularly questions about alternative formalizations. For example: * Is the PER model relationally parametric? Is the trimmed-down model of <ref> [BFSS90] </ref> any different than the standard PER model? Answering this would be a first step to relating relational parametricity and Strachey parametricity. (Some partial results are [HRR90, FRR92a].) * For what n and m are n-ary and m-ary relational parametricity different? Similarly for Kripke relations [Plo80, JT93].
Reference: [BG93] <author> S. Brookes and S. Geva. </author> <title> Sequential functions on indexed domains and full abstraction for a sub-language of PCF. </title> <type> Technical Report CMU-CS-93-163, </type> <institution> Carnegie Mellon University, </institution> <year> 1993. </year>
Reference: [BJO91] <author> P. Buneman, A. Jung, and A. Ohori. </author> <title> Using powerdomains to generalize relational databases. </title> <journal> Theoretical Computer Science, </journal> <volume> 91 </volume> <pages> 23-55, </pages> <year> 1991. </year>
Reference: [BL90] <author> K. Bruce and G. Longo. </author> <title> A modest model of records, inheritance, and bounded quantification. </title> <journal> Information and Computation, </journal> <volume> 87 </volume> <pages> 196-240, </pages> <year> 1990. </year>
Reference-contexts: Work on realizability models has flourished. Specific directions include algebraic characterizations of low-order types, work on recursion, and on subtypes; just a few examples are <ref> [HRR88, BFSS90, Ama89, FMRS90, BL90, Mit88] </ref>. Other pointers to work on realizability models can be found in the section on synthetic domain theory. Comparison and Evaluation. The construction and understanding of models of the polymorphic -calculus represents a substantial achievement.
Reference: [Blo90] <author> B. Bloom. </author> <title> Can LCF be topped? Flat lattice models of typed - calculus. </title> <journal> Information and Computation, </journal> <volume> 87 </volume> <pages> 264-301, </pages> <year> 1990. </year>
Reference-contexts: One final question is in order: how good is the original model used by Scott? After the extraneous top elements of the base types are eliminated (see, e.g., <ref> [Blo90] </ref> for an account of why such elements ought to be eliminated), the model appears to classify correctly many equations. Indeed, the counterexample above due to Plotkin relies on having divergence built into the terms that are operationally equivalent but denotationally distinct.
Reference: [BM92] <author> K. Bruce and J. C. Mitchell. </author> <title> PER models of subtyping, recursive types, and higher-order polymorphism. </title> <booktitle> In Conference Record of the 19th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, </booktitle> <pages> pages 316-327. </pages> <publisher> ACM, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: A prime example of this is in work on applying type-theory technology to develop secure type systems for object-oriented programming (e.g. <ref> [BM92] </ref>). Parametricity When Strachey introduced the notion of polymorphic function in 1967, he immediately distinguished between parametric and ad hoc polymorphism. Ad hoc functions may work differently at different types, whereas parametric functions are supposed to be uniform.
Reference: [BMM90] <author> K. Bruce, A.R. Meyer, and J.C. Mitchell. </author> <title> The semantics of second-order lambda calculus. </title> <journal> Information and Computation, </journal> <volume> 85(1) </volume> <pages> 76-134, </pages> <year> 1990. </year>
Reference-contexts: There is also similar work of Mitchell and Scedrov [MS92] for essentially ML-style polymorphism. 2. Robinson and Rosolini [RR94] give a related development, with the definitions reworked in the setting of internal category models of polymorphism. 3. Wadler [Wad89] does the same in the context of type-frame models <ref> [BMM90] </ref>, and provides many useful examples of reasoning with relational parametricity (see also [Has94]). 4. Plotkin and Abadi [PA93] define a logic that allows quantification over, and substitution of, relations as well as types, leading to a logical expression of the relational parametricity condition.
Reference: [Bra94] <author> T. Brauner. </author> <title> A general adequacy result for a linear functional lan-guage. </title> <type> Technical Report RS-94-22, </type> <institution> BRICS Research Series, </institution> <month> August </month> <year> 1994. </year> <note> (Appears in the proceedings of MFPS'94). </note>
Reference: [BTC88] <author> V. Breazu-Tannen and T. Coquand. </author> <title> Extensional models of polymor-phism. </title> <journal> Theoretical Computer Science, </journal> <volume> 59 </volume> <pages> 85-114, </pages> <year> 1988. </year>
Reference-contexts: Such a semantics would be very attractive but, apart from syntactically-defined models <ref> [BTC88, Has91] </ref>, no such are known for the full polymorphic calculus or for any type theory where polymorphic functions can be passed as arguments.
Reference: [CAB + 86] <author> R. L. Constable, S. F. Allen, H. M. Bromley, W. R. Cleaveland, J. F. Cremer, R. W. Harper, D. J. Howe, T. B. Knobloch, N. P. Mendler, P. Panangaden, J. T. Sasaki, and S. F. Smith. </author> <title> Implementing Mathematics with the NuPrl Proof Development System. </title> <publisher> Prentice Hall, </publisher> <year> 1986. </year>
Reference: [CCF94] <author> R. Cartwright, P.-L. Curien, and M. Felleisen. </author> <title> Fully abstract semantics for observably sequential languages. </title> <journal> Information and Computation, </journal> <volume> 111 </volume> <pages> 297-401, </pages> <year> 1994. </year>
Reference: [CDCHL84] <author> M. Coppo, M. Dezani-Ciancaglini, F. Honsell, and G. Longo. </author> <title> Extended type structure and filter lambda models. </title> <editor> In G. Lolli, G. Longo, and A. Marcja, editors, </editor> <booktitle> Logic Colloquium '82, </booktitle> <pages> pages 241-262. </pages> <publisher> Elsevier Science Publishers B.V. (North-Holland), </publisher> <year> 1984. </year>
Reference: [CF92] <author> R. Cartwright and M. Felleisen. </author> <title> Observable sequentiality and full abstraction. </title> <booktitle> In Conference Record 19th ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 328-342. </pages> <publisher> ACM, </publisher> <address> New York, </address> <year> 1992. </year>
Reference: [CGW89] <author> T. Coquand, C. Gunter, and G. Winskel. </author> <title> Domain theoretic models of polymorphism. </title> <journal> Information and Computation, </journal> <volume> 81 </volume> <pages> 123-167, </pages> <year> 1989. </year>
Reference-contexts: The earliest such model [McC79] interprets types as operators on a suitable universal domain. An alternative, that avoids universal domains, is the model construction given by Girard [Gir86] using ideas from stable domain theory; it was later adapted by Coquand, Gunter and Winskel <ref> [CGW89] </ref> to a more traditional cpo setting. The construction works by interpreting types as continuous functors of a certain kind, allowing a type to be constructed out of finite approximations. This finitary nature of the interpretation is what allows impredicativity to be skirted.
Reference: [CH88] <author> T. Coquand and G. Huet. </author> <title> The calculus of constructions. </title> <journal> Information and Computation, </journal> <volume> 76 </volume> <pages> 95-120, </pages> <year> 1988. </year>
Reference: [CP92] <author> R. L. Crole and A. M. Pitts. </author> <title> New foundations for fixpoint computations: </title> <journal> FIX-hyperdoctrines and the FIX-logic. Information and Computation, </journal> <volume> 98 </volume> <pages> 171-210, </pages> <year> 1992. </year>
Reference: [Cur86] <author> P.-L. Curien. </author> <title> Categorical Combinators, Sequential Algorithms and Functional Programming. </title> <publisher> Pitman, </publisher> <year> 1986. </year>
Reference: [Cur92] <author> P.-L. Curien. </author> <title> Observable algorithms on concrete data structures. </title> <booktitle> In Logic in Computer Science, </booktitle> <pages> pages 432-443. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1992. </year>
Reference: [dB80] <author> N. G. de Bruijn. </author> <title> A survey of the project AUTOMATH. </title> <editor> In J. R. Hindley and J. P. Seldin, editors, </editor> <booktitle> To H.B. Curry: Essays in Combinatory Logic, Lambda Calculus and Formalisms, </booktitle> <pages> pages 589-606. </pages> <publisher> Academic Press, </publisher> <year> 1980. </year>
Reference: [Eda95a] <author> A. Edalat. </author> <title> Domain theory in learning processes. </title> <editor> In S. Brookes, M. Main, A. Melton, and M. Mislove, editors, </editor> <booktitle> 11th Conference on Mathematical Foundations of Programming Semantics, volume 1 of Electronic Notes in Theoretical Computer Science, </booktitle> <address> http://www.elsevier.nl:80/mcs/tcs/pc/Menu.html, 1995. </address> <publisher> Elsevier Science Publishers B.V. </publisher>
Reference: [Eda95b] <author> A. Edalat. </author> <title> Dynamical systems, measures and fractals via domain theory. </title> <journal> Information and Computation, </journal> <volume> 120(1) </volume> <pages> 32-48, </pages> <year> 1995. </year>
Reference: [Ehr93] <author> T. Ehrhard. Hypercoherences: </author> <title> A strongly stable model of linear logic. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 3 </volume> <pages> 365-386, </pages> <year> 1993. </year> <month> 29 </month>
Reference: [Fio93] <author> M.P. Fiore. </author> <title> A coinduction principle for recursive data types based on bisimulation. </title> <booktitle> In 8 th LICS Conf. </booktitle> <publisher> IEEE, Computer Society Press, </publisher> <year> 1993. </year> <note> (Full version to appear in Information and Computation special issue for LICS93). </note>
Reference: [Fio94a] <author> M. P. Fiore. </author> <title> Axiomatic Domain Theory in Categories of Partial Maps. </title> <type> PhD thesis, </type> <institution> University of Edinburgh, </institution> <year> 1994. </year> <note> To be published by Cam-bridge University Press in the Distinguished Dissertations Series. </note>
Reference: [Fio94b] <author> M.P. Fiore. </author> <title> First steps on the representation of domains (extended abstract). </title> <note> Manuscript available from http://www.dcs.ed.ac.uk (full version in preparation), </note> <month> December </month> <year> 1994. </year>
Reference: [FMRS90] <author> P. Freyd, P. Mulry, G. Rosolini, and D. Scott. </author> <title> Extensional PERs. </title> <booktitle> In Logic in Computer Science, </booktitle> <pages> pages 346-354. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1990. </year>
Reference-contexts: Work on realizability models has flourished. Specific directions include algebraic characterizations of low-order types, work on recursion, and on subtypes; just a few examples are <ref> [HRR88, BFSS90, Ama89, FMRS90, BL90, Mit88] </ref>. Other pointers to work on realizability models can be found in the section on synthetic domain theory. Comparison and Evaluation. The construction and understanding of models of the polymorphic -calculus represents a substantial achievement. <p> One example already is in work on applying parametricity to the semantics of imperative languages [OR95c]. One way to find a parametric model of impredicative type theory with recursion would be to trim down a domain-based PER model <ref> [Ama89, Pho90, FMRS90] </ref>. But since we already know of domain-theoretic models of polymorphism, models that accommodate fixed-points, there is a natural question: * Can a cpo model of the polymorphic -calculus be modified to be parametric? .
Reference: [FP94] <author> M. P. Fiore and G. D. Plotkin. </author> <title> An axiomatisation of computationally adequate domain theoretic models of FPC. </title> <booktitle> In 9 th LICS Conf., </booktitle> <pages> pages 92-102. </pages> <publisher> IEEE, </publisher> <year> 1994. </year>
Reference: [Fre90] <author> P.J. Freyd. </author> <title> Recursive types reduced to inductive types. </title> <booktitle> In 5th Symposium on Logic in Computer Science, </booktitle> <pages> pages 498-507. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1990. </year>
Reference-contexts: : T (ff) 8ff : (T (ff)ffi ff) ! ff, one obtains strong sums (which are incompatible with intuitionistic, or Cartesian closed, type theory and recursion), and most remarkably, one obtains solutions of arbitrary domain equations, and not just covariant ones. (This uses Freyd's reduction of recursive to inductive types <ref> [Fre90] </ref>.) 21 These results have been presented by Plotkin in lectures [Plo93], though they have not been published yet.
Reference: [Fre91] <author> P. J. Freyd. </author> <title> Algebraically complete categories. </title> <editor> In A. Carboni, M. C. Pedicchio, and G. Rosolini, editors, </editor> <booktitle> Como Category Theory Conference, volume 1488 of Lecture Notes in Mathematics, </booktitle> <pages> pages 95-104. </pages> <publisher> Springer Verlag, </publisher> <year> 1991. </year>
Reference: [Fre92] <author> P. J. Freyd. </author> <title> Remarks on algebraically compact categories. </title> <editor> In M. P. Fourman, P. T. Johnstone, and A. M. Pitts, editors, </editor> <booktitle> Applications of Categories in Computer Science, volume 177 of L.M.S. Lecture Notes, </booktitle> <pages> pages 95-106. </pages> <publisher> Cambridge University Press, </publisher> <year> 1992. </year>
Reference: [Fre93] <author> P. J. Freyd. </author> <title> Structural polymorphism. </title> <journal> Theoretical Computer Science, </journal> <volume> 115 </volume> <pages> 107-129, </pages> <year> 1993. </year>
Reference-contexts: Peter Freyd's work on structors also a general flavour of this kind <ref> [Fre93] </ref>. Directions and Problems. Broadly speaking, there is room and reason to investigate both generalizations and further applications of parametricity. For example, it has been suggested that the "information hiding" aspect of locally encapsulated state, as found in objects or higher-order imperative programming, is closely related to parametricity [OT95].
Reference: [FRR92a] <author> P. J. Freyd, E. P. Robinson, and G. Rosolini. </author> <title> Dinaturality for free. </title> <editor> In M. P. Fourman, P. T. Johnstone, and A. M. Pitts, editors, </editor> <booktitle> Proc. LMS Symposium on Applications of Categories in Computer Science, Durham 1991, volume 177 of LMS Lecture Note Series, </booktitle> <pages> pages 107-118. </pages> <publisher> Cambridge University Press, </publisher> <year> 1992. </year>
Reference-contexts: For example: * Is the PER model relationally parametric? Is the trimmed-down model of [BFSS90] any different than the standard PER model? Answering this would be a first step to relating relational parametricity and Strachey parametricity. (Some partial results are <ref> [HRR90, FRR92a] </ref>.) * For what n and m are n-ary and m-ary relational parametricity different? Similarly for Kripke relations [Plo80, JT93]. Most of the discussion so far has avoided fixed-points.
Reference: [FRR92b] <author> P. J. Freyd, E. P. Robinson, and G. Rosolini. </author> <title> Functorial parametricity. </title> <booktitle> In 6th Annual IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 444-452. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1992. </year>
Reference-contexts: demonstration that enough "intuitionistically set-theoretic" models exist to satisfy a completeness theorem (in stark contrast to the clas sical case); and * the study by Hyland, Edmund Robinson and Pino Rosolini elucidating subtle completeness properties of internal categories in the effective topos and other categories related to it [HRR90] (also, <ref> [Hyl82, Rob89, FRR92b] </ref>). Work on realizability models has flourished. Specific directions include algebraic characterizations of low-order types, work on recursion, and on subtypes; just a few examples are [HRR88, BFSS90, Ama89, FMRS90, BL90, Mit88].
Reference: [GHK + 80] <author> G. Gierz, K. H. Hofmann, K. Keimel, J. D. Lawson, M. Mislove, and D. S. Scott. </author> <title> A Compendium of Continuous Lattices. </title> <publisher> Springer Verlag, </publisher> <year> 1980. </year>
Reference: [Gir72] <author> J.-Y. Girard. </author> <title> Interpretation fonctionelle et elimination des coupures dans l'arithmetique d'ordre superieur, 1972. </title> <institution> These d'Etat, Universite Paris VII. </institution>
Reference-contexts: Polymorphism has posed a severe challenge for semantics from the beginning. Initially, the most substantial issue faced was the impredicativity of the polymorphic, or second-order, -calculus, an extension of typed -calculus discovered independently by Jean-Yves Girard and John Reynolds in the early seventies <ref> [Gir72, Rey74] </ref>. More recently the focus has shifted to parametricity, the idea that a parametric polymorphic function works uniformly for any types to which it is instantiated: the map function is a good example of this.
Reference: [Gir86] <author> J.-Y. Girard. </author> <title> The system F of variable types: Fifteen years later. </title> <journal> Theoretical Computer Science, </journal> <volume> 45 </volume> <pages> 159-192, </pages> <year> 1986. </year> <month> 30 </month>
Reference-contexts: Domain Models. One successful attack on impredicativity uses the technology originally developed for solving recursive domain equations. The earliest such model [McC79] interprets types as operators on a suitable universal domain. An alternative, that avoids universal domains, is the model construction given by Girard <ref> [Gir86] </ref> using ideas from stable domain theory; it was later adapted by Coquand, Gunter and Winskel [CGW89] to a more traditional cpo setting. The construction works by interpreting types as continuous functors of a certain kind, allowing a type to be constructed out of finite approximations.
Reference: [GS90] <author> C. Gunter and D. S. Scott. </author> <title> 12: Semantic Domains. </title> <editor> In Jan van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume B: Formal Models and Semantics, </booktitle> <pages> pages 633-674. </pages> <publisher> Elsevier Science Publishers, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference: [Gun92] <author> C. Gunter. </author> <title> Semantics of Programming Languages. Structures and Techniques. </title> <booktitle> Foundations of Computing. </booktitle> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference: [Has91] <author> R. Hasegawa. </author> <title> Parametricity of extensionally collapsed models of poly-morphism and their categorical properties. </title> <editor> In T. Ito and A. R. Meyer, editors, </editor> <booktitle> Theoretical Aspects of Computer Software, volume 526 of Lecture Notes in Computer Science, </booktitle> <pages> pages 495-512. </pages> <publisher> Springer Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Such a semantics would be very attractive but, apart from syntactically-defined models <ref> [BTC88, Has91] </ref>, no such are known for the full polymorphic calculus or for any type theory where polymorphic functions can be passed as arguments.
Reference: [Has94] <author> R. Hasegawa. </author> <title> Categorical data types in parametric polymorphism. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 4 </volume> <pages> 71-109, </pages> <year> 1994. </year>
Reference-contexts: Robinson and Rosolini [RR94] give a related development, with the definitions reworked in the setting of internal category models of polymorphism. 3. Wadler [Wad89] does the same in the context of type-frame models [BMM90], and provides many useful examples of reasoning with relational parametricity (see also <ref> [Has94] </ref>). 4. Plotkin and Abadi [PA93] define a logic that allows quantification over, and substitution of, relations as well as types, leading to a logical expression of the relational parametricity condition.
Reference: [HHP92] <author> R. Harper, F. Honsell, and G. Plotkin. </author> <title> A framework for defining logics. </title> <journal> Journal of the ACM, </journal> <volume> 40(1) </volume> <pages> 143-184, </pages> <year> 1992. </year>
Reference: [HJ95] <author> C. Hermida and B. Jacobs. </author> <title> Induction and coinduction via subset types and quotient types. </title> <editor> In P. Dybjer and R. Pollack, editors, </editor> <booktitle> Informal proceedings of the Joint CLICS-TYPES Workshop on Categories and Type Theory, </booktitle> <month> May </month> <year> 1995. </year> <note> (Available as Technical Report 85, </note> <institution> Programming Methodology Group, Goteborg University and Chalmers University of Technology). </institution>
Reference: [HM95] <author> J. M. E. Hyland and E. Moggi. </author> <booktitle> The S-replete construction. In Category Theory in Computer Science, volume 953 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1995. </year>
Reference: [HMT84] <author> J. Y. Halpern, A. R. Meyer, and B. A. Trakhtenbrot. </author> <title> The semantics of local storage, </title> <booktitle> or what makes the free-list free? In Conference Record of the Eleventh Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 245-257. </pages> <publisher> ACM Press, </publisher> <year> 1984. </year>
Reference-contexts: As a consequence, all local variables can be safely allocated on a stack. Such carefully drawn constraints also make it possible to consider construction of a denotational semantics for state in Idealized Algol. One line of models for Algol-like state has been developed by Halpern, Meyer, Trakhtenbrot and Sieber <ref> [HMT84, MS88, Sie93, Sie94] </ref>. These build on the very simple model described above, but take into account the support of procedures: the locations they actually use and how they affect them. This is done through a system of multiple simultaneous logical relations, indexed in the style of Kripke models.
Reference: [HO] <author> M. Hyland and L. Ong. </author> <title> Dialogue games and innocent strategies: An approach to intensional full abstraction for PCF (preliminary announcement). </title> <address> Cambridge University, UK. </address> <note> Note distributed August 1993. </note>
Reference: [HO95a] <author> J.M.E. Hyland and C.-H.L. Ong. </author> <title> On full abstraction for PCF. </title> <note> Manuscript (available from http://theory.doc.ic.ac.uk:80/tfm/papers/OngCLH/pcf.ps.gz), 1995. </note>
Reference: [HO95b] <author> J.M.E. Hyland and C.-H.L. Ong. </author> <title> Pi-calculus, dialogue games and PCF. </title> <booktitle> In 7th Annual ACM Conference on Functional Programming Languages and Computer Architecture, </booktitle> <address> La Jolla, California, </address> <year> 1995. </year>
Reference: [Hoa72] <author> C. A. R. Hoare. </author> <title> Proof of correctness of data representations. </title> <journal> Acta Informatica, </journal> <volume> 1 </volume> <pages> 271-281, </pages> <year> 1972. </year>
Reference-contexts: Put this way, relational parametricity appears as a systematization and generalization of (often informal) ideas for reasoning about data types, objects, and so on (e.g. <ref> [Hoa72] </ref>), and this connection with data abstraction is part of its appeal.
Reference: [HP79] <author> M. C. B. Hennessy and G. D. Plotkin. </author> <title> Full abstraction for a simple parallel programming language. </title> <editor> In J. Be~cvar, editor, </editor> <booktitle> Mathematical Foundations of Computer Science, volume 74 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1979. </year>
Reference: [HP90] <author> H. Huwig and A. Poigne. </author> <title> A note on inconsistencies caused by fixpoints in a cartesian closed category. </title> <journal> Theoretical Computer Science, </journal> <volume> 73 </volume> <pages> 101-112, </pages> <year> 1990. </year>
Reference: [HRR88] <author> J. M. E. Hyland, E. P. Robinson, and G. Rosolini. </author> <title> The discrete objects in the effective topos. </title> <booktitle> Proceedings of the London Mathematical Society, </booktitle> <year> 1988. </year>
Reference-contexts: Work on realizability models has flourished. Specific directions include algebraic characterizations of low-order types, work on recursion, and on subtypes; just a few examples are <ref> [HRR88, BFSS90, Ama89, FMRS90, BL90, Mit88] </ref>. Other pointers to work on realizability models can be found in the section on synthetic domain theory. Comparison and Evaluation. The construction and understanding of models of the polymorphic -calculus represents a substantial achievement.
Reference: [HRR90] <author> J. M. E. Hyland, E. P. Robinson, and G. Rosolini. </author> <title> Algebraic types in PER models. </title> <editor> In M. Main, A. Melton, M. Mislove, and D. Schmidt, editors, </editor> <booktitle> Mathematical Foundations of Programming Semantics, volume 442 of Lecture Notes in Computer Science, </booktitle> <pages> pages 333-350. </pages> <publisher> Springer Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Pitts's [Pit87] demonstration that enough "intuitionistically set-theoretic" models exist to satisfy a completeness theorem (in stark contrast to the clas sical case); and * the study by Hyland, Edmund Robinson and Pino Rosolini elucidating subtle completeness properties of internal categories in the effective topos and other categories related to it <ref> [HRR90] </ref> (also, [Hyl82, Rob89, FRR92b]). Work on realizability models has flourished. Specific directions include algebraic characterizations of low-order types, work on recursion, and on subtypes; just a few examples are [HRR88, BFSS90, Ama89, FMRS90, BL90, Mit88]. <p> For example: * Is the PER model relationally parametric? Is the trimmed-down model of [BFSS90] any different than the standard PER model? Answering this would be a first step to relating relational parametricity and Strachey parametricity. (Some partial results are <ref> [HRR90, FRR92a] </ref>.) * For what n and m are n-ary and m-ary relational parametricity different? Similarly for Kripke relations [Plo80, JT93]. Most of the discussion so far has avoided fixed-points.
Reference: [Hyl82] <author> J. M. E. Hyland. </author> <title> The effective topos. </title> <editor> In A. S. Troelstra and D. van Dalen, editors, The L. E. J. </editor> <booktitle> Brouwer Centenary Symposium, </booktitle> <pages> pages 165-216. </pages> <publisher> North-Holland, </publisher> <year> 1982. </year>
Reference-contexts: fact about this second form of description is that the standard PER model appears as a set-theoretic model, provided that one understands "set theoretic" liberally enough allow models of intuitionistic set theory; the model of 15 intuitionistic ZF that contains the PER model in this way is the effective topos <ref> [Hyl82, Ros90] </ref>. From the point of view of intuitionistic set theory the result is models where the function type A ! B is interpreted by all set-theoretic functions and 8 is an indexed product Q D2T ype T (D). <p> demonstration that enough "intuitionistically set-theoretic" models exist to satisfy a completeness theorem (in stark contrast to the clas sical case); and * the study by Hyland, Edmund Robinson and Pino Rosolini elucidating subtle completeness properties of internal categories in the effective topos and other categories related to it [HRR90] (also, <ref> [Hyl82, Rob89, FRR92b] </ref>). Work on realizability models has flourished. Specific directions include algebraic characterizations of low-order types, work on recursion, and on subtypes; just a few examples are [HRR88, BFSS90, Ama89, FMRS90, BL90, Mit88].
Reference: [Hyl88] <author> J. M. E. Hyland. </author> <title> A small complete category. </title> <journal> Annals of Pure and Applied Logic, </journal> <volume> 40 </volume> <pages> 135-165, </pages> <year> 1988. </year>
Reference-contexts: The existence of such models for the polymorphic calculus dates back in fact to Girard and Troelstra in the seventies. But in the mid eighties there was a discovery, due to Eugenio Moggi and Martin Hyland <ref> [LM91, Hyl88] </ref>, of a perspective on these models that exposed their extraordinary character.
Reference: [Hyl91] <author> J. M. E. Hyland. </author> <title> First steps in synthetic domain theory. </title> <editor> In A. Carboni, C. Pedicchio, and G. Rosolini, editors, </editor> <booktitle> Conference on Category Theory 1990, volume 1488 of Lecture Notes in Mathematics, </booktitle> <pages> pages 131-156. </pages> <publisher> Springer Verlag, </publisher> <year> 1991. </year>
Reference: [JM91] <author> T. Jim and A. Meyer. </author> <title> Full abstraction and the context lemma. </title> <booktitle> In Theoretical Aspects of Computer Software, volume 526 of Lecture Notes in Computer Science, </booktitle> <pages> pages 131-151, </pages> <year> 1991. </year>
Reference: [Joh77] <author> P. T. Johnstone. </author> <title> Topos Theory. </title> <publisher> Academic Press, </publisher> <year> 1977. </year>
Reference: [Joh82] <author> P. T. Johnstone. </author> <title> Stone Spaces, </title> <booktitle> volume 3 of Cambridge Studies in Advanced Mathematics. </booktitle> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1982. </year>
Reference: [Jon90] <author> C. Jones. </author> <title> Probabilistic Non-Determinism. </title> <type> PhD thesis, </type> <institution> University of Edinburgh, Edinburgh, </institution> <year> 1990. </year> <note> Also published as Technical Report No. CST-63-90. </note>
Reference: [JP95] <author> A. Jung and H. Puhlmann. </author> <title> Types, logic, and semantics for nested databases. </title> <editor> In M. Main and S. Brookes, editors, </editor> <booktitle> 11th Conference on Mathematical Foundations of Programming Semantics, volume 1 of Electronic Notes in Theoretical Computer Science. </booktitle> <publisher> Elsevier Science Publishers B.V., </publisher> <year> 1995. </year>
Reference: [JS93] <author> A. Jung and A. Stoughton. </author> <title> Studying the fully abstract model of PCF within its continuous function model. </title> <editor> In M. Bezem and J. F. Groote, editors, </editor> <title> Typed Lambda Calculi and Applications, </title> <booktitle> volume 664 of Lecture Notes in Computer Science, </booktitle> <pages> pages 230-244. </pages> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference: [JT93] <author> A. Jung and J. Tiuryn. </author> <title> A new characterization of lambda definability. </title> <editor> In M. Bezem and J. F. Groote, editors, </editor> <title> Typed Lambda Calculi and Applications, </title> <booktitle> volume 664 of Lecture Notes in Computer Science, </booktitle> <pages> pages 245-257. </pages> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Is the trimmed-down model of [BFSS90] any different than the standard PER model? Answering this would be a first step to relating relational parametricity and Strachey parametricity. (Some partial results are [HRR90, FRR92a].) * For what n and m are n-ary and m-ary relational parametricity different? Similarly for Kripke relations <ref> [Plo80, JT93] </ref>. Most of the discussion so far has avoided fixed-points. Certainly relational para-metricity and a polymorphic fixed-point operator Y : 8ff : (ff ! ff) ! ff can live together comfortably; one restricts to suitable "admissible" relations.
Reference: [Jun90] <author> A. Jung. </author> <title> The classification of continuous domains. </title> <booktitle> In Logic in Computer Science, </booktitle> <pages> pages 35-40. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1990. </year>
Reference: [Keg95] <author> M. Kegelmann. </author> <title> Factorisation systems on domains. Extended Abstract, </title> <year> 1995. </year>
Reference: [Lam] <author> F. Lamarche. </author> <title> A large cartesian closed category of domains. </title> <note> To appear in: Information and Computation. 32 </note>
Reference: [Law64] <author> F. W. Lawvere. </author> <title> An elementary theory of the category of sets. </title> <journal> Proc. Nat. Acad. Sci., </journal> <volume> 52, </volume> <year> 1964. </year>
Reference: [Law69] <author> F. W. Lawvere. </author> <title> Diagonal arguments and cartesian closed categories. In Category Theory, Homology Theory and their Applications II, </title> <booktitle> volume 92 of Lecture Notes in Mathematics. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1969. </year>
Reference: [Len93] <author> A. F. Lent. </author> <title> The category of functors from state shapes to bottomless CPOs is adequate for block structure. </title> <booktitle> In Proceedings of the 1993 ACM SIGPLAN Workshop on State in Programming Languages, </booktitle> <institution> number YALEU/DCS/RR-968 in Yale University Department, of Computer Science, </institution> <type> Research Report, </type> <pages> pages 101-119, </pages> <year> 1993. </year>
Reference-contexts: Following Reynolds work with Oles [Rey81, Ole82, Ole85], models for Idealized Algol using functor categories have been further developed by Tennent, O'Hearn and Lent <ref> [OT92, OT95, Len93] </ref>. Functors are important because they capture the fact that the size of the store, as well as its contents, may change over time.
Reference: [LM84] <author> G. Longo and E. Moggi. </author> <title> Cartesian closed categories of enumerations for effective type structure, part I and II. </title> <editor> In G. Kahn, D. B. Mac-Queen, and G. Plotkin, editors, </editor> <booktitle> Semantics of Data Types, </booktitle> <pages> pages 235-255. </pages> <publisher> Springer Verlag, </publisher> <year> 1984. </year> <booktitle> Proceedings of International Symposium at Sophia-Antipolis, </booktitle> <address> France, </address> <month> June 27-29, </month> <year> 1984. </year> <note> Lecture Notes in Computer Science Vol. 173. </note>
Reference: [LM91] <author> G. Longo and E. Moggi. </author> <title> Constructive natural deduction and its "!- set" interpretation. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 1(2) </volume> <pages> 215-254, </pages> <year> 1991. </year>
Reference-contexts: The existence of such models for the polymorphic calculus dates back in fact to Girard and Troelstra in the seventies. But in the mid eighties there was a discovery, due to Eugenio Moggi and Martin Hyland <ref> [LM91, Hyl88] </ref>, of a perspective on these models that exposed their extraordinary character.
Reference: [Lon95] <author> J. Longley. </author> <title> Realizability Toposes and Language Semantics. </title> <type> PhD thesis, </type> <institution> University of Edinburgh, </institution> <year> 1995. </year>
Reference: [LS81] <author> D. J. Lehmann and M. B. Smyth. </author> <title> Algebraic specification of data types: A synthetic approach. </title> <journal> Mathematical Systems Theory, </journal> <volume> 14 </volume> <pages> 97-139, </pages> <year> 1981. </year>
Reference: [LS86] <author> J. Lambek and P. J. Scott. </author> <title> Introduction to Higher Order Categorical Logic. </title> <booktitle> Cambridge Studies in Advanced Mathematics Vol. </booktitle> <volume> 7. </volume> <publisher> Cambridge University Press, </publisher> <year> 1986. </year>
Reference: [MC88] <author> A. R. Meyer and S. S. Cosmadakis. </author> <title> Semantical paradigms: </title> <booktitle> Notes for an invited lecture. In 3rd Symposium on Logic in Computer Science, </booktitle> <pages> pages 236-253. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1988. </year>
Reference: [McC79] <author> N. </author> <title> McCracken. An investigation of a programming language with a polymorphic type structure. </title> <type> PhD thesis, </type> <institution> Syracuse University, </institution> <year> 1979. </year>
Reference-contexts: So the question of mere existence of (non-syntactically-defined) models is non-trivial. Domain Models. One successful attack on impredicativity uses the technology originally developed for solving recursive domain equations. The earliest such model <ref> [McC79] </ref> interprets types as operators on a suitable universal domain. An alternative, that avoids universal domains, is the model construction given by Girard [Gir86] using ideas from stable domain theory; it was later adapted by Coquand, Gunter and Winskel [CGW89] to a more traditional cpo setting.
Reference: [McC84] <author> D. C. McCarty. </author> <title> Realizability and Recursive Mathematics. </title> <type> PhD thesis, </type> <institution> Oxford University, </institution> <year> 1984. </year>
Reference: [Mil77] <author> R. Milner. </author> <title> Fully abstract models of typed lambda-calculi. </title> <journal> Theoretical Computer Science, </journal> <volume> 4 </volume> <pages> 1-22, </pages> <year> 1977. </year>
Reference-contexts: Another method may be the link to linear logic, and even game semantics, suggested by Reddy and O'Hearn. In the case of ML-style references and the nu-calculus, there is another result related to full abstraction and of independent interest. Purely functional languages like PCF satisfy Milner's context lemma <ref> [Mil77] </ref>, which says that the behaviour of an expression in any context C [] is determined by its behaviour in contexts of the form []V 1 : : : V n .
Reference: [Mit86] <author> J. C. Mitchell. </author> <title> Representation independence and data abstraction. </title> <booktitle> In Conference Record 13th ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 263-276. </pages> <publisher> ACM Press, </publisher> <year> 1986. </year>
Reference-contexts: Reynolds' treatment of abstract types using polymorphic application - e.g. (flff : x 1 ; :::; x n :M ) [T ] K 1 ::: K n to bind ff and x i to their concrete representations or the treatment later given by Mitchell and Plotkin using existential types (see <ref> [Mit86, PA93] </ref>). Put this way, relational parametricity appears as a systematization and generalization of (often informal) ideas for reasoning about data types, objects, and so on (e.g. [Hoa72]), and this connection with data abstraction is part of its appeal.
Reference: [Mit88] <author> J. C. Mitchell. </author> <title> Polymorphic type inference and containment. </title> <journal> Information and Computation, </journal> <volume> 76 </volume> <pages> 211-249, </pages> <year> 1988. </year>
Reference-contexts: Work on realizability models has flourished. Specific directions include algebraic characterizations of low-order types, work on recursion, and on subtypes; just a few examples are <ref> [HRR88, BFSS90, Ama89, FMRS90, BL90, Mit88] </ref>. Other pointers to work on realizability models can be found in the section on synthetic domain theory. Comparison and Evaluation. The construction and understanding of models of the polymorphic -calculus represents a substantial achievement.
Reference: [Mit90a] <author> J. C. Mitchell. </author> <title> A type inference approach to reduction properties and semantics of polymorphic expressions (summary). </title> <editor> In G. Huet, editor, </editor> <booktitle> Logical Foundations of Functional Programming, </booktitle> <pages> pages 195-212. </pages> <publisher> Addison-Wesley, </publisher> <year> 1990. </year> <month> 33 </month>
Reference-contexts: This notion is what Plotkin and Abadi term Strachey Parametricity, to contrast with Reynolds Parametricity ([PA93], also <ref> [Mit90a] </ref>). The standard PER model of polymorphism furnishes something of a formalization of this notion.
Reference: [Mit90b] <author> J. C. Mitchell. </author> <title> Type systems for programming languages. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <pages> pages 365-458. </pages> <publisher> North Holland, </publisher> <year> 1990. </year>
Reference-contexts: It is this uniformity notion that is increasingly being seen as important to capture semantically. The most satisfactory approach to parametricity thus far is based on logical relations, relations defined by induction on types <ref> [Mit90b] </ref>, and is often referred to as relational parametricity or Reynolds parametricity [Rey83]. Relational Parametricity. Throughout his work Reynolds has emphasized a connection between parametric polymorphism and representation independence, the principle that the behaviour of an abstract data type is invariant under changes to its concrete representation.
Reference: [ML83] <author> P. Martin-Lof. </author> <title> Lecture notes on the domain interpretation of type theory. In Programming Methodology Group, editor, </title> <booktitle> Workshop on the Semantics of Programming Languages, </booktitle> <institution> Goteborg, Sweden, 1983. Chalmers University of Technology. </institution>
Reference: [Mog90] <author> E. Moggi. </author> <title> An abstract view of programming languages. </title> <type> Technical Report ECS-LFCS-90-113, </type> <institution> Laboratory for Foundations of Computer Science, University of Edinburgh, </institution> <month> April </month> <year> 1990. </year>
Reference-contexts: Pitts and Stark describe the nu-calculus in [PS93b, PS93a], and outline a categorical semantics for the language. This model uses a computational monad, following Moggi's general scheme for extensible denotational semantics <ref> [Mog90, Mog91] </ref>. The idea is to use a cartesian closed category C for the functional part of the model, and concentrate all non-standard behaviour in a chosen monad T : C ! C.
Reference: [Mog91] <author> E. Moggi. </author> <title> Notions of computations and monads. </title> <journal> Information and Computation, </journal> <volume> 93(1) </volume> <pages> 55-92, </pages> <year> 1991. </year>
Reference-contexts: Pitts and Stark describe the nu-calculus in [PS93b, PS93a], and outline a categorical semantics for the language. This model uses a computational monad, following Moggi's general scheme for extensible denotational semantics <ref> [Mog90, Mog91] </ref>. The idea is to use a cartesian closed category C for the functional part of the model, and concentrate all non-standard behaviour in a chosen monad T : C ! C.
Reference: [Mog95] <author> E. Moggi. </author> <note> Metalanguages and applications. Manuscript (available from http://theory.doc.ic.ac.uk:80/tfm/papers/MoggiE/ML-notes.dvi.gz), 1995. </note>
Reference: [Mor68] <author> J. H. Morris. </author> <title> Lambda Calculus Models of Programming Languages. </title> <type> PhD thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <year> 1968. </year>
Reference: [MR92] <author> Q. Ma and J. C. Reynolds. </author> <title> Types, abstraction, and parametric poly-morphism, part 2. </title> <editor> In S. Brookes, M. Main, A. Melton, M. Mislove, and D. Schmidt, editors, </editor> <booktitle> Mathematical Foundations of Programming Semantics, volume 598 of Lecture Notes in Computer Science, </booktitle> <pages> pages 1-40. </pages> <publisher> Springer Verlag, </publisher> <year> 1992. </year>
Reference-contexts: That is, independently of whether relations have been used to construct a model, one can ask whether all of the elements that live in it satisfy the relational condition. Some approaches to frameworks for parametricity are the following 1. Reynolds and Ma <ref> [MR92] </ref> give a categorical formulation of parametricity, in the context of indexed-category models of polymorphism [See87]. There is also similar work of Mitchell and Scedrov [MS92] for essentially ML-style polymorphism. 2. <p> In the first three cases we have a notion of what counts as a model of polymorphism, and additional requirements that parametric models must satisfy; <ref> [MR92, RR94] </ref> contain useful discussions on relationships among the three approaches. One might expect that parametric models in the Ma-Reynolds or Robinson-Rosolini senses would provide sound models of the logic of Plotkin-Abadi, but the details of this have not appeared as of yet.
Reference: [MS88] <author> A. R. Meyer and K. Sieber. </author> <title> Towards fully abstract semantics for local variables: Preliminary report. </title> <booktitle> In Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 191-203. </pages> <publisher> ACM Press, </publisher> <year> 1988. </year>
Reference-contexts: As a consequence, all local variables can be safely allocated on a stack. Such carefully drawn constraints also make it possible to consider construction of a denotational semantics for state in Idealized Algol. One line of models for Algol-like state has been developed by Halpern, Meyer, Trakhtenbrot and Sieber <ref> [HMT84, MS88, Sie93, Sie94] </ref>. These build on the very simple model described above, but take into account the support of procedures: the locations they actually use and how they affect them. This is done through a system of multiple simultaneous logical relations, indexed in the style of Kripke models. <p> These build on the very simple model described above, but take into account the support of procedures: the locations they actually use and how they affect them. This is done through a system of multiple simultaneous logical relations, indexed in the style of Kripke models. In <ref> [MS88] </ref> Meyer and Sieber give a range of examples that illustrate the difficulties that can arise when reasoning about local variables, and show how the denotational approach can express invariants of the store: properties that a procedure is guaranteed to preserve. <p> These capture the notion that a procedure is polymorphic in those parts of the state to which it has no direct access. The resulting models allow reasoning about state invariants, and can prove all of the tricky examples of Meyer and Sieber <ref> [MS88] </ref>, together with various others. Perhaps most interesting from a mathematical standpoint is that this this rather powerful semantics can be represented quite simply as Oles' original model reformulated in the 2-category of reflexive graphs, rather than the 2-category of sets.
Reference: [MS92] <author> J.C. Mitchell and A. Scedrov. </author> <note> Notes on sconing and relators. </note> <editor> In E. Boerger et al., editors, </editor> <booktitle> Computer Science Logic: 6th Workshop, volume 702 of Lecture Notes in Computer Science, </booktitle> <pages> pages 352-378, </pages> <address> San Miniato, Italy, 1992. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: Some approaches to frameworks for parametricity are the following 1. Reynolds and Ma [MR92] give a categorical formulation of parametricity, in the context of indexed-category models of polymorphism [See87]. There is also similar work of Mitchell and Scedrov <ref> [MS92] </ref> for essentially ML-style polymorphism. 2. Robinson and Rosolini [RR94] give a related development, with the definitions reworked in the setting of internal category models of polymorphism. 3.
Reference: [MT91] <author> R. Milner and M. Tofte. </author> <title> Commentary on Standard ML. </title> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: Mutable state is incorporated through references: dynamically created cells that can be read and written at will. Standard ML is a real language, with a number of implementations and, unusually, a complete published operational semantics <ref> [MT91, MTH90] </ref>. Programs in Standard ML use mutable state in quite different ways to the Algol-like languages described above. Whereas in Algol, local variables are essential intermediaries in all computation, in ML a purely functional sublanguage is sufficient for most programming.
Reference: [MTH90] <author> R. Milner, M. Tofte, and R. Harper. </author> <title> The Definition of Standard ML. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Mutable state is incorporated through references: dynamically created cells that can be read and written at will. Standard ML is a real language, with a number of implementations and, unusually, a complete published operational semantics <ref> [MT91, MTH90] </ref>. Programs in Standard ML use mutable state in quite different ways to the Algol-like languages described above. Whereas in Algol, local variables are essential intermediaries in all computation, in ML a purely functional sublanguage is sufficient for most programming.
Reference: [Mul81] <author> P. Mulry. </author> <title> Generalized Banach-Mazur functionals in the topos of recursive sets. </title> <journal> Journal of Pure and Applied Algebra, </journal> <volume> 26 </volume> <pages> 71-83, </pages> <year> 1981. </year>
Reference: [Mul87] <author> K. Mulmuley. </author> <title> Full Abstraction and Semantic Equivalence. </title> <publisher> The MIT Press, </publisher> <year> 1987. </year>
Reference: [Nic94] <author> H. Nickau. </author> <title> Hereditarily sequential functionals. </title> <booktitle> In Proceedings of the Symposium on Logical Foundations of Computer Science: Logic at St. Petersburg, Lecture Notes in Computer Science. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1994. </year>
Reference: [O'H91] <author> P. W. O'Hearn. </author> <title> Linear logic and interference control (preliminary report). </title> <booktitle> In Category Theory and Computer Science 1991, number 530 in Lecture Notes in Computer Science, </booktitle> <pages> pages 74-93. </pages> <publisher> Springer Verlag, </publisher> <year> 1991. </year>
Reference-contexts: This too has a denotational semantics within the functor category model [Ten83, O'H93], and indeed a comparison with mathematical models for linear logic has inspired a reworking of the original syntactic scheme <ref> [O'H91, OPTT95] </ref>. This new version corrects some known difficulties with types, by giving a correct handling of passive and active procedure parameters. We can see this as a prime example of good denotational semantics feeding back into improvements at the language level.
Reference: [O'H93] <author> P. W. O'Hearn. </author> <title> A model for syntactic control of interference. </title> <booktitle> Mathe--matical Structures in Computer Science, </booktitle> <volume> 3 </volume> <pages> 435-465, </pages> <year> 1993. </year>
Reference-contexts: This property can be hard to check, and with syntactic control of interference [Rey78, Rey89] Reynolds proposes a scheme to ensure that such interfering code cannot be written. This too has a denotational semantics within the functor category model <ref> [Ten83, O'H93] </ref>, and indeed a comparison with mathematical models for linear logic has inspired a reworking of the original syntactic scheme [O'H91, OPTT95]. This new version corrects some known difficulties with types, by giving a correct handling of passive and active procedure parameters.
Reference: [Ole82] <author> F. J. Oles. </author> <title> A Category-Theoretic Approach to the Semantics of Programming Languages. </title> <type> PhD thesis, </type> <institution> Syracuse University, </institution> <year> 1982. </year>
Reference-contexts: Following Reynolds work with Oles <ref> [Rey81, Ole82, Ole85] </ref>, models for Idealized Algol using functor categories have been further developed by Tennent, O'Hearn and Lent [OT92, OT95, Len93]. Functors are important because they capture the fact that the size of the store, as well as its contents, may change over time.
Reference: [Ole85] <author> F. J. Oles. </author> <title> Type categories, functor categories and block structure. </title> <editor> In M. Nivat and J. C. Reynolds, editors, </editor> <booktitle> Algebraic Semantics, </booktitle> <pages> pages 543-574. </pages> <publisher> Cambridge University Press, </publisher> <year> 1985. </year>
Reference-contexts: Following Reynolds work with Oles <ref> [Rey81, Ole82, Ole85] </ref>, models for Idealized Algol using functor categories have been further developed by Tennent, O'Hearn and Lent [OT92, OT95, Len93]. Functors are important because they capture the fact that the size of the store, as well as its contents, may change over time.
Reference: [OPTT95] <author> P. W. O'Hearn, A. J. Power, M. Takeyama, and R. D. Tennent. </author> <title> Syntactic control of interference revisited. </title> <editor> In M. Main and S. Brookes, editors, </editor> <booktitle> Mathematical Foundations of Programming Semantics: Proceedings of the 11th International Conference, number 1 in Electronic Notes in Theoretical Computer Science. </booktitle> <publisher> Elsevier Science Publishers B.V., </publisher> <year> 1995. </year>
Reference-contexts: This too has a denotational semantics within the functor category model [Ten83, O'H93], and indeed a comparison with mathematical models for linear logic has inspired a reworking of the original syntactic scheme <ref> [O'H91, OPTT95] </ref>. This new version corrects some known difficulties with types, by giving a correct handling of passive and active procedure parameters. We can see this as a prime example of good denotational semantics feeding back into improvements at the language level.
Reference: [OR95a] <author> P. W. O'Hearn and U. S. Reddy. </author> <title> Objects, interference and the Yoneda embedding. </title> <editor> In M. Main and S. Brookes, editors, </editor> <booktitle> Mathematical Foundations of Programming Semantics: Proceedings of the 11th International Conference, number 1 in Electronic Notes in Theoretical Computer Science. </booktitle> <publisher> Elsevier Science Publishers B.V., </publisher> <year> 1995. </year>
Reference-contexts: Remarkably, an apparently crude bolting together of this model with functor categories, via the Yoneda embedding, gives a good description of both locality and historicity at the same time <ref> [OR95a] </ref>. The success of this model is not yet entirely understood. Standard ML The language Standard ML offers functional programming with imperative features. It is built around a core language that provides strongly typed higher-order functions, possibly polymorphic, with call-by-value parameter passing.
Reference: [OR95b] <author> P. W. O'Hearn and J. G. Riecke. </author> <title> Kripke logical relations and PCF. </title> <journal> Information and Computation, </journal> <volume> 120(1) </volume> <pages> 107-116, </pages> <year> 1995. </year>
Reference-contexts: As mentioned earlier, proofs of full abstraction at lower types have been obtained for Idealized Algol and the nu-calculus; one route to extending these might be through logical relations of varying arity, as used by O'Hearn and Riecke to construct a fully-abstract model of PCF <ref> [OR95b] </ref>. Another method may be the link to linear logic, and even game semantics, suggested by Reddy and O'Hearn. In the case of ML-style references and the nu-calculus, there is another result related to full abstraction and of independent interest.
Reference: [OR95c] <author> P.W. O'Hearn and J.C. Reynolds. </author> <title> From Algol to polymorphic linear lambdas calculus. </title> <institution> Lectures at Isaac Newton Institute for Mathematical Sciences, </institution> <address> Cambridge, </address> <year> 1995. </year>
Reference-contexts: One example already is in work on applying parametricity to the semantics of imperative languages <ref> [OR95c] </ref>. One way to find a parametric model of impredicative type theory with recursion would be to trim down a domain-based PER model [Ama89, Pho90, FMRS90].
Reference: [OT92] <author> P. W. O'Hearn and R. D. Tennent. </author> <title> Semantics of local variables. </title> <booktitle> In Applications of Categories in Computer Science 1991, number 177 in Lon-don Mathematical Society Lecture Note Series, </booktitle> <pages> pages 217-238. </pages> <publisher> Cam-bridge University Press, </publisher> <year> 1992. </year>
Reference-contexts: Following Reynolds work with Oles [Rey81, Ole82, Ole85], models for Idealized Algol using functor categories have been further developed by Tennent, O'Hearn and Lent <ref> [OT92, OT95, Len93] </ref>. Functors are important because they capture the fact that the size of the store, as well as its contents, may change over time.
Reference: [OT93] <author> P. W. O'Hearn and R. D. Tennent. </author> <title> Semantical analysis of specification logic, part 2. </title> <journal> Information and Computation, </journal> <volume> 107(1) </volume> <pages> 25-57, </pages> <year> 1993. </year>
Reference-contexts: These functor category models have been used to give a denotational account of specification logic, Reynolds' extension of Hoare logic to higher-order procedures <ref> [Rey82, Ten90, OT93] </ref>. Specification logic uses a notion of non-interference to avoid the problems of variable aliasing, where procedures may affect each other in unforeseen ways.
Reference: [OT95] <author> P. W. O'Hearn and R. D. Tennent. </author> <title> Parametricity and local variables. </title> <journal> Journal of the ACM, </journal> <volume> 42 </volume> <pages> 658-709, </pages> <year> 1995. </year>
Reference-contexts: Directions and Problems. Broadly speaking, there is room and reason to investigate both generalizations and further applications of parametricity. For example, it has been suggested that the "information hiding" aspect of locally encapsulated state, as found in objects or higher-order imperative programming, is closely related to parametricity <ref> [OT95] </ref>. It is reasonable to ask whether there is a general notion of which the "abstractness of interfaces" found in polymorphic type theories, in imperative and object-oriented programming, and in many other programming situations are instances. There remain specific questions about relational parametricity and related approaches. <p> Following Reynolds work with Oles [Rey81, Ole82, Ole85], models for Idealized Algol using functor categories have been further developed by Tennent, O'Hearn and Lent <ref> [OT92, OT95, Len93] </ref>. Functors are important because they capture the fact that the size of the store, as well as its contents, may change over time.
Reference: [PA93] <author> G. Plotkin and M. Abadi. </author> <title> A logic for parametric polymorphism. </title> <editor> In M. Bezem J. F. Groote, editor, </editor> <title> Typed Lambda Calculi and Applications, </title> <booktitle> volume 664 of Lecture Notes in Computer Science, </booktitle> <pages> pages 361-375. </pages> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Reynolds' treatment of abstract types using polymorphic application - e.g. (flff : x 1 ; :::; x n :M ) [T ] K 1 ::: K n to bind ff and x i to their concrete representations or the treatment later given by Mitchell and Plotkin using existential types (see <ref> [Mit86, PA93] </ref>). Put this way, relational parametricity appears as a systematization and generalization of (often informal) ideas for reasoning about data types, objects, and so on (e.g. [Hoa72]), and this connection with data abstraction is part of its appeal. <p> The importance of these properties can be seen in a number of works, beginning with [Rey83] and continuing in a number of places (e.g. [RP93]), with probably the most systematic exposition being <ref> [PA93] </ref>. Bainbridge, 18 Freyd, Scedrov and Scott [BFSS90] were the first to define a parametric model sat-isfying these properties; they achieved this by trimming down the PER model. <p> Wadler [Wad89] does the same in the context of type-frame models [BMM90], and provides many useful examples of reasoning with relational parametricity (see also [Has94]). 4. Plotkin and Abadi <ref> [PA93] </ref> define a logic that allows quantification over, and substitution of, relations as well as types, leading to a logical expression of the relational parametricity condition. <p> However, all definable elements in the polymorphic -calculus are dinatural, so dinaturality can be used as a sound principle for reasoning about polymorphic functions. It was further shown in <ref> [PA93] </ref> that relational parametricity implies dinaturality, in the context of their logic for polymorphism.
Reference: [Pho90] <author> W. Phoa. </author> <title> Effective domains and intrinsic structure. </title> <booktitle> In 5th Symposium on Logic in Computer Science. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1990. </year>
Reference-contexts: One example already is in work on applying parametricity to the semantics of imperative languages [OR95c]. One way to find a parametric model of impredicative type theory with recursion would be to trim down a domain-based PER model <ref> [Ama89, Pho90, FMRS90] </ref>. But since we already know of domain-theoretic models of polymorphism, models that accommodate fixed-points, there is a natural question: * Can a cpo model of the polymorphic -calculus be modified to be parametric? .
Reference: [Pho91] <author> W. Phoa. </author> <title> Domain Theory in Realizability Toposes. </title> <type> PhD thesis, </type> <institution> University of Cambridge, </institution> <year> 1991. </year>
Reference: [Pho94] <author> W. Phoa. </author> <title> From term models to domains. </title> <journal> Information and Computation, </journal> <volume> 109 </volume> <pages> 211-255, </pages> <year> 1994. </year>
Reference: [Pit87] <author> A. M. Pitts. </author> <title> Polymorphism is set theoretic, </title> <editor> constructively. In D. H. Pitt, A. Poigne, and D. E. Rydeheard, editors, </editor> <booktitle> Category Theory and Computer Science, Proc. Edinburgh 1987, volume 283 of Lecture Notes in Computer Science, </booktitle> <pages> pages 12-39. </pages> <publisher> Springer Verlag, </publisher> <year> 1987. </year> <month> 35 </month>
Reference-contexts: It is crucial, however, that "completeness" is understood relative to the ambient category, such as the effective topos or one of its subcategories, and not in the usual classical (external) sense. Important work illuminating these issues include: * Andy Pitts's <ref> [Pit87] </ref> demonstration that enough "intuitionistically set-theoretic" models exist to satisfy a completeness theorem (in stark contrast to the clas sical case); and * the study by Hyland, Edmund Robinson and Pino Rosolini elucidating subtle completeness properties of internal categories in the effective topos and other categories related to it [HRR90] (also,
Reference: [Pit93] <author> A. M. Pitts. </author> <title> Relational properties of recursively defined domains. </title> <booktitle> In 8th Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 86-97. </pages> <publisher> IEEE Computer Society Press, </publisher> <address> Washington, </address> <year> 1993. </year>
Reference: [Pit94] <author> A. M. Pitts. </author> <title> A co-induction principle for recursively defined domains. </title> <journal> Theoretical Computer Science, </journal> <volume> 124 </volume> <pages> 195-219, </pages> <year> 1994. </year>
Reference: [Pit96] <author> A. M. Pitts. </author> <title> Relational properties of domains. </title> <journal> Information and Computation, </journal> <note> 1996. To appear. </note>
Reference: [Plo77] <author> G. D. Plotkin. </author> <title> LCF considered as a programming language. </title> <journal> Theoretical Computer Science, </journal> <volume> 5 </volume> <pages> 223-255, </pages> <year> 1977. </year>
Reference: [Plo80] <author> G. D. Plotkin. </author> <title> Lambda-definability in the full type hierarchy. </title> <editor> In Jonathan P. Seldin and J. Roger Hindley, editors, To H. B. </editor> <booktitle> Curry: Essays on Combinatory Logic, Lambda Calculus and Formalism, </booktitle> <pages> pages 363-373. </pages> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1980. </year>
Reference-contexts: Is the trimmed-down model of [BFSS90] any different than the standard PER model? Answering this would be a first step to relating relational parametricity and Strachey parametricity. (Some partial results are [HRR90, FRR92a].) * For what n and m are n-ary and m-ary relational parametricity different? Similarly for Kripke relations <ref> [Plo80, JT93] </ref>. Most of the discussion so far has avoided fixed-points. Certainly relational para-metricity and a polymorphic fixed-point operator Y : 8ff : (ff ! ff) ! ff can live together comfortably; one restricts to suitable "admissible" relations.
Reference: [Plo81] <editor> G. D. Plotkin. </editor> <booktitle> Post-graduate lecture notes in advanced domain theory (incorporating the "Pisa Notes"). </booktitle> <institution> Dept. of Computer Science, Univ. of Edinburgh, </institution> <year> 1981. </year>
Reference: [Plo85] <author> G. D. Plotkin. </author> <title> Lectures on predomains and partial functions. Notes for a course given at the Center for the Study of Language and Information, </title> <address> Stanford 1985, </address> <year> 1985. </year>
Reference: [Plo93] <author> G. D. Plotkin. </author> <title> Type theory and recursion. </title> <booktitle> In Eighth Annual IEEE Symposium on Logic in Computer Science, </booktitle> <pages> page 374. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1993. </year>
Reference-contexts: obtains strong sums (which are incompatible with intuitionistic, or Cartesian closed, type theory and recursion), and most remarkably, one obtains solutions of arbitrary domain equations, and not just covariant ones. (This uses Freyd's reduction of recursive to inductive types [Fre90].) 21 These results have been presented by Plotkin in lectures <ref> [Plo93] </ref>, though they have not been published yet. But the point that linear type theory allows for a better treatment of parametricity with recursion rings clear, and there are likely to be further applications of linear type theory as far as parametricity is concerned.
Reference: [Plo95] <author> G.D. Plotkin. </author> <title> Algebraic completeness and compactness in an enriched setting. </title> <booktitle> Invited lecture given at LDPL95 (Workshop on Logic, Domains, and Programming Languages), </booktitle> <year> 1995. </year>
Reference: [Pol95] <author> R. Pollack. </author> <title> The Theory of LEGO: A Proof Checker for the Extended Calculus of Constructions. </title> <type> PhD thesis, </type> <institution> University of Edinburgh, </institution> <year> 1995. </year>
Reference: [PS93a] <author> A. M. Pitts and I. D. B. Stark. </author> <title> Observable properties of higher order functions that dynamically create local names, or: </title> <booktitle> What's new? In Mathematical Foundations of Computer Science, Proc. 18th Int. Symp., Gdansk, 1993, volume 711 of Lecture Notes in Computer Science, </booktitle> <pages> pages 122-141. </pages> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Bare as it appears, the nu-calculus captures the essence of visibility, and its operational and denotational semantics have a surprisingly rich structure that mirrors the subtleties of reference behaviour in Standard ML. Pitts and Stark describe the nu-calculus in <ref> [PS93b, PS93a] </ref>, and outline a categorical semantics for the language. This model uses a computational monad, following Moggi's general scheme for extensible denotational semantics [Mog90, Mog91].
Reference: [PS93b] <author> A. M. Pitts and I. D. B. Stark. </author> <title> On the observable properties of higher order functions that dynamically create local names (preliminary report). </title> <booktitle> In Workshop on State in Programming Languages, </booktitle> <address> Copenhagen, </address> <year> 1993, </year> <pages> pages 31-45. </pages> <booktitle> ACM SIGPLAN, </booktitle> <year> 1993. </year> <institution> Yale Univ. Dept. Computer Science Technical Report YALEU/DCS/RR-968. </institution>
Reference-contexts: Bare as it appears, the nu-calculus captures the essence of visibility, and its operational and denotational semantics have a surprisingly rich structure that mirrors the subtleties of reference behaviour in Standard ML. Pitts and Stark describe the nu-calculus in <ref> [PS93b, PS93a] </ref>, and outline a categorical semantics for the language. This model uses a computational monad, following Moggi's general scheme for extensible denotational semantics [Mog90, Mog91].
Reference: [Puh95] <author> H. Puhlmann. </author> <title> Re-grouping information in a domain theoretic data model. </title> <type> Preprint, </type> <institution> Technische Hochschule Darmstadt, </institution> <month> October </month> <year> 1995. </year> <month> 27pp. </month>
Reference: [Red93] <author> U. S. Reddy. </author> <title> A linear logic model of state. </title> <type> Technical Report FP-1993-3, </type> <institution> Department of Computer Science, University of Glasgow, </institution> <month> January </month> <year> 1993. </year>
Reference-contexts: This link to linear logic has been investigated by Reddy, whose models using coherence spaces bring out the historicity implicit in the state: variables are objects, and the history of their local state is threaded through the course of program execution <ref> [Red93, Red94, Red96] </ref>. Remarkably, an apparently crude bolting together of this model with functor categories, via the Yoneda embedding, gives a good description of both locality and historicity at the same time [OR95a]. The success of this model is not yet entirely understood.
Reference: [Red94] <author> U. S. Reddy. </author> <title> Passivity and independence. </title> <booktitle> In Proceedings of the 9th Annual IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 342-352. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1994. </year>
Reference-contexts: This link to linear logic has been investigated by Reddy, whose models using coherence spaces bring out the historicity implicit in the state: variables are objects, and the history of their local state is threaded through the course of program execution <ref> [Red93, Red94, Red96] </ref>. Remarkably, an apparently crude bolting together of this model with functor categories, via the Yoneda embedding, gives a good description of both locality and historicity at the same time [OR95a]. The success of this model is not yet entirely understood.
Reference: [Red96] <author> U. S. Reddy. </author> <title> Global state considered unnecessary: Object-based semantics for interference-free imperative programs. </title> <journal> Lisp and Symbolic Computation, </journal> <volume> 9(1), </volume> <year> 1996. </year>
Reference-contexts: This link to linear logic has been investigated by Reddy, whose models using coherence spaces bring out the historicity implicit in the state: variables are objects, and the history of their local state is threaded through the course of program execution <ref> [Red93, Red94, Red96] </ref>. Remarkably, an apparently crude bolting together of this model with functor categories, via the Yoneda embedding, gives a good description of both locality and historicity at the same time [OR95a]. The success of this model is not yet entirely understood.
Reference: [Reu95] <author> B. Reus. </author> <title> Program Verification in Synthetic Domain Theory. </title> <type> PhD thesis, </type> <institution> Universitat Munchen, </institution> <month> November </month> <year> 1995. </year>
Reference: [Rey74] <author> J. C. Reynolds. </author> <title> Towards a theory of type structure. </title> <editor> In B. Robinet, editor, </editor> <booktitle> Proc. Colloque sur la Programmation, volume 19 of Lecture Notes in Computer Science, </booktitle> <pages> pages 408-425. </pages> <publisher> Springer Verlag, </publisher> <year> 1974. </year>
Reference-contexts: Polymorphism has posed a severe challenge for semantics from the beginning. Initially, the most substantial issue faced was the impredicativity of the polymorphic, or second-order, -calculus, an extension of typed -calculus discovered independently by Jean-Yves Girard and John Reynolds in the early seventies <ref> [Gir72, Rey74] </ref>. More recently the focus has shifted to parametricity, the idea that a parametric polymorphic function works uniformly for any types to which it is instantiated: the map function is a good example of this.
Reference: [Rey78] <author> J. C. Reynolds. </author> <title> Syntactic control of interference. </title> <booktitle> In Conference Record of the Fifth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 39-46. </pages> <publisher> ACM Press, </publisher> <year> 1978. </year>
Reference-contexts: Specification logic uses a notion of non-interference to avoid the problems of variable aliasing, where procedures may affect each other in unforeseen ways. This property can be hard to check, and with syntactic control of interference <ref> [Rey78, Rey89] </ref> Reynolds proposes a scheme to ensure that such interfering code cannot be written. This too has a denotational semantics within the functor category model [Ten83, O'H93], and indeed a comparison with mathematical models for linear logic has inspired a reworking of the original syntactic scheme [O'H91, OPTT95].
Reference: [Rey81] <author> J. C. Reynolds. </author> <title> The essence of Algol. </title> <booktitle> In Proceedings of the 1981 International Symposium on Algorithmic Languages, </booktitle> <pages> pages 345-372. </pages> <publisher> North-Holland, </publisher> <year> 1981. </year>
Reference-contexts: Idealized Algol Reynolds has promoted the investigation of Algol-like languages, with block structured use of local variables, call-by-name parameter passing and higher-order procedures. These all come together in Idealized Algol <ref> [Rey81] </ref>. This language makes a sharp distinction between commands, which can modify the state but not return values, and expressions, which can return values but cannot affect the state. As a consequence, all local variables can be safely allocated on a stack. <p> Following Reynolds work with Oles <ref> [Rey81, Ole82, Ole85] </ref>, models for Idealized Algol using functor categories have been further developed by Tennent, O'Hearn and Lent [OT92, OT95, Len93]. Functors are important because they capture the fact that the size of the store, as well as its contents, may change over time.
Reference: [Rey82] <author> J. C. Reynolds. </author> <title> Idealized Algol and its specification logic. </title> <editor> In D. Neel, editor, </editor> <booktitle> Tools and Notions for Program Construction, </booktitle> <pages> pages 121-161. </pages> <publisher> Cambridge University Press, </publisher> <year> 1982. </year>
Reference-contexts: These functor category models have been used to give a denotational account of specification logic, Reynolds' extension of Hoare logic to higher-order procedures <ref> [Rey82, Ten90, OT93] </ref>. Specification logic uses a notion of non-interference to avoid the problems of variable aliasing, where procedures may affect each other in unforeseen ways.
Reference: [Rey83] <author> J. C. Reynolds. </author> <title> Types, abstraction and parametric polymorphism. In R.E.A. </title> <editor> Mason, editor, </editor> <booktitle> Information Processing, </booktitle> <pages> pages 513-523. </pages> <publisher> Elsevier Science Publishers, </publisher> <year> 1983. </year>
Reference-contexts: A second problem is that the domain models can all interpret the polymorphic -calculus with a fixed-point operator. Reynolds had argued in <ref> [Rey83] </ref> that "types are not limited to computation," and that that the polymorphic calculus should possess a set-theoretic model; there seems no prior reason why recursion should be necessary in interpreting the calculus. In contrast, realizability models are set-theoretic, provided one is willing to accept intuitionistic sets. <p> It is this uniformity notion that is increasingly being seen as important to capture semantically. The most satisfactory approach to parametricity thus far is based on logical relations, relations defined by induction on types [Mit90b], and is often referred to as relational parametricity or Reynolds parametricity <ref> [Rey83] </ref>. Relational Parametricity. Throughout his work Reynolds has emphasized a connection between parametric polymorphism and representation independence, the principle that the behaviour of an abstract data type is invariant under changes to its concrete representation. <p> These properties are nowadays usually taken as definitive properties of parametric-ity, not just relational parametricity, and provide a useful test for any proposed alternative definitions. The importance of these properties can be seen in a number of works, beginning with <ref> [Rey83] </ref> and continuing in a number of places (e.g. [RP93]), with probably the most systematic exposition being [PA93]. Bainbridge, 18 Freyd, Scedrov and Scott [BFSS90] were the first to define a parametric model sat-isfying these properties; they achieved this by trimming down the PER model.
Reference: [Rey84] <author> J. C. Reynolds. </author> <title> Polymorphism is not set-theoretic. </title> <editor> In G. Kahn, D. B. MacQueen, and G. D. Plotkin, editors, </editor> <booktitle> Semantics of Data Types, volume 173 of Lecture Notes in Computer Science, </booktitle> <pages> pages 145-156. </pages> <publisher> Springer Verlag, </publisher> <year> 1984. </year>
Reference-contexts: From the point of view of intuitionistic set theory the result is models where the function type A ! B is interpreted by all set-theoretic functions and 8 is an indexed product Q D2T ype T (D). This is particularly startling, because Reynolds <ref> [Rey84] </ref> had earlier shown the impossibility of a (classical) set-theoretic model, a model where types denote sets of some kind and where the function type A ! B consists of all set theoretic functions, with "all set theoretic functions" understood classically. <p> So the parametricity condition in this case cuts a proper class down to a two-point set. But because of the result of <ref> [Rey84] </ref>, it is not possible to use the parametricity constraint to pick out a suitable subset of Q D2Set : T (D), for any type T in the polymorphic -calculus: parametricity does 17 not give us a way to skirt impredicativity. Data Abstraction and Algebra.
Reference: [Rey89] <author> J. C. Reynolds. </author> <title> Syntactic control of interference, part II. </title> <booktitle> In Proceedings of ICALP '89, number 372 in Lecture Notes in Computer Science, </booktitle> <pages> pages 704-722. </pages> <publisher> Springer Verlag, </publisher> <year> 1989. </year>
Reference-contexts: Specification logic uses a notion of non-interference to avoid the problems of variable aliasing, where procedures may affect each other in unforeseen ways. This property can be hard to check, and with syntactic control of interference <ref> [Rey78, Rey89] </ref> Reynolds proposes a scheme to ensure that such interfering code cannot be written. This too has a denotational semantics within the functor category model [Ten83, O'H93], and indeed a comparison with mathematical models for linear logic has inspired a reworking of the original syntactic scheme [O'H91, OPTT95].
Reference: [Rob] <author> E. P. Robinson. </author> <title> Parametricity as isomorphism. </title> <note> Theoretical Computer Science. Accepted for publication. </note>
Reference-contexts: There remain specific questions about relational parametricity and related approaches. The connection between data abstraction and uniformity has not been completely explained <ref> [Rob] </ref>, and there are particularly questions about alternative formalizations.
Reference: [Rob88] <author> E. Robinson. </author> <title> Logical aspects of denotational semantics. </title> <booktitle> In Summer Conference on Category Theory and Computer Science, </booktitle> <address> Edinburgh, </address> <month> 7th-9th September </month> <year> 1987, </year> <booktitle> Lecture Notes in Computer Science. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1988. </year>
Reference: [Rob89] <author> E. P. Robinson. </author> <booktitle> How complete is PER? In 4th Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 106-111. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1989. </year>
Reference-contexts: demonstration that enough "intuitionistically set-theoretic" models exist to satisfy a completeness theorem (in stark contrast to the clas sical case); and * the study by Hyland, Edmund Robinson and Pino Rosolini elucidating subtle completeness properties of internal categories in the effective topos and other categories related to it [HRR90] (also, <ref> [Hyl82, Rob89, FRR92b] </ref>). Work on realizability models has flourished. Specific directions include algebraic characterizations of low-order types, work on recursion, and on subtypes; just a few examples are [HRR88, BFSS90, Ama89, FMRS90, BL90, Mit88].
Reference: [Ros86] <author> G. Rosolini. </author> <title> Continuity and Effectiveness in Topoi. </title> <type> PhD thesis, </type> <institution> Oxford University, </institution> <year> 1986. </year>
Reference: [Ros90] <author> G. Rosolini. </author> <title> About modest sets. </title> <journal> Int. J. Found. Comp. Sci., </journal> <volume> 1 </volume> <pages> 341-353, </pages> <year> 1990. </year>
Reference-contexts: fact about this second form of description is that the standard PER model appears as a set-theoretic model, provided that one understands "set theoretic" liberally enough allow models of intuitionistic set theory; the model of 15 intuitionistic ZF that contains the PER model in this way is the effective topos <ref> [Hyl82, Ros90] </ref>. From the point of view of intuitionistic set theory the result is models where the function type A ! B is interpreted by all set-theoretic functions and 8 is an indexed product Q D2T ype T (D).
Reference: [Ros92] <author> G. Rosolini. </author> <title> An exper model for Quest. </title> <editor> In S. Brookes, M. Main, A. Melton, M. Mislove, and D. Schmidt, editors, </editor> <booktitle> Mathematical Foundations of Programming Semantics, volume 598 of Lecture Notes in Computer Science, </booktitle> <pages> pages 436-445. </pages> <publisher> Springer Verlag, </publisher> <year> 1992. </year>
Reference: [Ros95] <author> G. Rosolini. </author> <title> Notes on synthetic domain theory. </title> <note> Available by ftp from theory.doc.ic.ac.uk, </note> <year> 1995. </year>
Reference: [RP93] <author> J. C. Reynolds and G. D. Plotkin. </author> <title> On functors expressible in the ploymorphic typed lambda calculus. </title> <journal> Information and Computation, </journal> <volume> 105 </volume> <pages> 1-29, </pages> <year> 1993. </year>
Reference-contexts: These properties are nowadays usually taken as definitive properties of parametric-ity, not just relational parametricity, and provide a useful test for any proposed alternative definitions. The importance of these properties can be seen in a number of works, beginning with [Rey83] and continuing in a number of places (e.g. <ref> [RP93] </ref>), with probably the most systematic exposition being [PA93]. Bainbridge, 18 Freyd, Scedrov and Scott [BFSS90] were the first to define a parametric model sat-isfying these properties; they achieved this by trimming down the PER model.
Reference: [RR88] <author> E. Robinson and G. Rosolini. </author> <title> Categories of partial maps. </title> <journal> Information and Computation, </journal> <volume> 79 </volume> <pages> 95-130, </pages> <year> 1988. </year>
Reference: [RR94] <author> E. P. Robinson and G. Rosolini. </author> <title> Reflexive graphs and parametric poly-morphism. </title> <booktitle> In Proceedings of the 9th Annual IEEE Symposium on Logic in Computer Science. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1994. </year>
Reference-contexts: Some approaches to frameworks for parametricity are the following 1. Reynolds and Ma [MR92] give a categorical formulation of parametricity, in the context of indexed-category models of polymorphism [See87]. There is also similar work of Mitchell and Scedrov [MS92] for essentially ML-style polymorphism. 2. Robinson and Rosolini <ref> [RR94] </ref> give a related development, with the definitions reworked in the setting of internal category models of polymorphism. 3. Wadler [Wad89] does the same in the context of type-frame models [BMM90], and provides many useful examples of reasoning with relational parametricity (see also [Has94]). 4. <p> In the first three cases we have a notion of what counts as a model of polymorphism, and additional requirements that parametric models must satisfy; <ref> [MR92, RR94] </ref> contain useful discussions on relationships among the three approaches. One might expect that parametric models in the Ma-Reynolds or Robinson-Rosolini senses would provide sound models of the logic of Plotkin-Abadi, but the details of this have not appeared as of yet. <p> The key fact is that PERs are sufficiently rich to allow the trimmed-down PER to exist. General conditions sufficient for collapsing to a parametric model, together with a slick model construction based on internal categories, have been given in <ref> [RR94] </ref>. As an alternative to the cut-down scheme, one might hope for a model that is somehow more inherently parametric, that is to say, a model whose definition does not explicitly use logical relations, but for which all elements satisfy a para-metricity condition.
Reference: [RS94] <author> B. Reus and Th. Streicher. </author> <title> Nave synthetic domain theory. </title> <note> Available via ftp from ftp.informatik.uni-muenchen.de in directory pub/local/pst/papers/streicher+reus, </note> <year> 1994. </year>
Reference: [Sco69] <author> D. S. Scott. </author> <title> A type theoretic alternative to ISWIM, CUCH, OWHY. </title> <type> Manuscript, </type> <institution> University of Oxford, </institution> <year> 1969. </year>
Reference: [Sco70] <author> D. S. Scott. </author> <title> Outline of a mathematical theory of computation. </title> <booktitle> In 4th Annual Princeton Conference on Information Sciences and Systems, </booktitle> <pages> pages 169-176, </pages> <year> 1970. </year>
Reference: [Sco72] <author> D. S. Scott. </author> <title> Continuous lattices. </title> <editor> In E. Lawvere, editor, </editor> <booktitle> Toposes, Algebraic Geometry and Logic, volume 274 of Lecture Notes in Mathematics, </booktitle> <pages> pages 97-136. </pages> <publisher> Springer Verlag, </publisher> <year> 1972. </year>
Reference: [Sco76] <author> D. S. Scott. </author> <title> Data types as lattices. </title> <journal> SIAM J. Computing, </journal> <volume> 5 </volume> <pages> 522-587, </pages> <year> 1976. </year>
Reference: [Sco82] <author> D. S. Scott. </author> <title> Domains for denotational semantics. </title> <editor> In M. Nielson and E. M. Schmidt, editors, </editor> <booktitle> International Colloquium on Automata, Languages and Programs, volume 140 of Lecture Notes in Computer Science, </booktitle> <pages> pages 577-613. </pages> <publisher> Springer Verlag, </publisher> <year> 1982. </year>
Reference: [Sco93] <author> D. S. Scott. </author> <title> A type-theoretical alternative to ISWIM, </title> <journal> CUCH, OWHY. Theoretical Computer Science, </journal> <volume> 121 </volume> <pages> 411-440, </pages> <year> 1993. </year> <note> Reprint of a manuscript written in 1969. </note>
Reference: [See87] <author> R. A. G. Seely. </author> <title> Categorical semantics of higher-order polymorphic lambda calculus. </title> <journal> Journal of Symbolic Logic, </journal> <volume> 52 </volume> <pages> 969-989, </pages> <year> 1987. </year>
Reference-contexts: Some approaches to frameworks for parametricity are the following 1. Reynolds and Ma [MR92] give a categorical formulation of parametricity, in the context of indexed-category models of polymorphism <ref> [See87] </ref>. There is also similar work of Mitchell and Scedrov [MS92] for essentially ML-style polymorphism. 2. Robinson and Rosolini [RR94] give a related development, with the definitions reworked in the setting of internal category models of polymorphism. 3.
Reference: [Sie92] <author> K. Sieber. </author> <title> Reasoning about sequential functions via logical relations. </title> <editor> In M. P. Fourman, P. T. Johnstone, and A. M. Pitts, editors, </editor> <booktitle> Proc. LMS Symposium on Applications of Categories in Computer Science, Durham 1991, volume 177 of LMS Lecture Note Series, </booktitle> <pages> pages 258-269. </pages> <publisher> Cambridge University Press, </publisher> <year> 1992. </year>
Reference-contexts: idea of the difficulty of reasoning about local state by noting that this proof both subsumes and considerably extends Sieber's previous demonstration that logical relations give a complete account of sequentiality up to third-order in the purely functional language PCF | generally considered a hard problem in its own right <ref> [Sie92] </ref>. Following Reynolds work with Oles [Rey81, Ole82, Ole85], models for Idealized Algol using functor categories have been further developed by Tennent, O'Hearn and Lent [OT92, OT95, Len93].
Reference: [Sie93] <author> K. Sieber. </author> <title> New steps towards full abstraction for local variables. </title> <booktitle> In Proceedings of the 1993 ACM SIGPLAN Workshop on State in Programming Languages, </booktitle> <institution> number YALEU/DCS/RR-968 in Yale University, Department of Computer Science, </institution> <type> Research Report, </type> <pages> pages 88-100, </pages> <year> 1993. </year>
Reference-contexts: As a consequence, all local variables can be safely allocated on a stack. Such carefully drawn constraints also make it possible to consider construction of a denotational semantics for state in Idealized Algol. One line of models for Algol-like state has been developed by Halpern, Meyer, Trakhtenbrot and Sieber <ref> [HMT84, MS88, Sie93, Sie94] </ref>. These build on the very simple model described above, but take into account the support of procedures: the locations they actually use and how they affect them. This is done through a system of multiple simultaneous logical relations, indexed in the style of Kripke models.
Reference: [Sie94] <author> K. Sieber. </author> <title> Full abstraction for the second order subset of an Algol-like language (preliminary report). </title> <type> Technical Report A 01/94, </type> <institution> Universitat des Saarlandes, Saarbrucken, </institution> <month> January </month> <year> 1994. </year>
Reference-contexts: As a consequence, all local variables can be safely allocated on a stack. Such carefully drawn constraints also make it possible to consider construction of a denotational semantics for state in Idealized Algol. One line of models for Algol-like state has been developed by Halpern, Meyer, Trakhtenbrot and Sieber <ref> [HMT84, MS88, Sie93, Sie94] </ref>. These build on the very simple model described above, but take into account the support of procedures: the locations they actually use and how they affect them. This is done through a system of multiple simultaneous logical relations, indexed in the style of Kripke models. <p> In [MS88] Meyer and Sieber give a range of examples that illustrate the difficulties that can arise when reasoning about local variables, and show how the denotational approach can express invariants of the store: properties that a procedure is guaranteed to preserve. Sieber, in <ref> [Sie94] </ref>, gives an impressive proof of full abstraction for the second-order subset of the language.
Reference: [Sim92] <author> A. K. Simpson. </author> <title> Recursive types in Kleisli categories. </title> <note> Manuscript (available from http://www.dcs.ed.ac.uk/), 1992. </note>
Reference: [Smy77] <author> M. B. Smyth. </author> <title> Effectively given domains. </title> <journal> Theoretical Computer Science, </journal> <volume> 5 </volume> <pages> 257-274, </pages> <year> 1977. </year>
Reference: [Smy83a] <author> M. B. Smyth. </author> <title> The largest cartesian closed category of domains. </title> <journal> Theoretical Computer Science, </journal> <volume> 27 </volume> <pages> 109-119, </pages> <year> 1983. </year>
Reference: [Smy83b] <author> M. B. Smyth. </author> <title> Powerdomains and predicate transformers: a topological view. </title> <editor> In J. Diaz, editor, </editor> <booktitle> Automata, Languages and Programming, volume 154 of Lecture Notes in Computer Science, </booktitle> <pages> pages 662-675. </pages> <publisher> Springer Verlag, </publisher> <year> 1983. </year>
Reference: [Smy91] <editor> M.B. Smyth. I-categories and duality. In M.P. Fourman, P.T. John-stone, and A.M. Pitts, editors, </editor> <booktitle> Applications of Categories in Computer Science, volume 177 of London Mathematical Society Lecture Note Series, </booktitle> <pages> pages 270-287. </pages> <publisher> Cambridge University Press, </publisher> <year> 1991. </year>
Reference: [SP82] <author> M. B. Smyth and G. D. Plotkin. </author> <title> The category-theoretic solution of recursive domain equations. </title> <journal> SIAM J. Computing, </journal> <volume> 11 </volume> <pages> 761-783, </pages> <year> 1982. </year>
Reference: [Sta94] <author> I. Stark. </author> <title> Names and Higher-Order Functions. </title> <type> PhD thesis, </type> <institution> University of Cambridge, </institution> <month> December </month> <year> 1994. </year> <note> Also published as Technical Report 363, </note> <institution> University of Cambridge, Computer Laboratory. </institution>
Reference-contexts: The more sophisticated uses categories with relations, from O'Hearn and Tennent's work on relational parametricity; and this model is proved to be fully abstract for expressions of ground and first-order type. All this is brought together in <ref> [Sta94] </ref>, and extended to a language Reduced ML that includes integer references.
Reference: [Sta96] <author> I. Stark. </author> <title> Categorical models for local names. </title> <journal> Lisp and Symbolic Computation, </journal> <volume> 9(1), </volume> <year> 1996. </year>
Reference-contexts: In essence, a generalised element of T A is then a computation `create some new names and return an element of A, that may depend on them'. They also give some examples of suitable categories, and two of these are investigated in more detail in <ref> [Sta96] </ref>. Like the models in the previous section, both use functor categories indexed by possible worlds, where the state is now represented by a finite set of names.
Reference: [Sto77] <author> J. E. Stoy. </author> <title> Denotational Semantics: The Scott-Strachey Approach to Programming Language Theory. </title> <publisher> The MIT Press, </publisher> <year> 1977. </year>
Reference-contexts: The denotation of store as a function from locations to their contents goes back a long way: Strachey attributes it to a suggestion of Burstall in 1964 (see the forward to <ref> [Sto77] </ref>). Adding loops and procedures makes things more complicated, but the treatment of global state remains much the same. However, state as a model of the underlying machine is not at all the same as state as a programming tool.
Reference: [Sto88] <author> A. Stoughton. </author> <title> Fully Abstract Models of Programming Languages. </title> <booktitle> Research Notes in Theoretical Computer Science. </booktitle> <address> Pitman/Wiley, </address> <year> 1988. </year>
Reference: [Sto90] <author> A. Stoughton. </author> <title> Equationally fully abstract models of PCF. </title> <editor> In M. Main, A. Melton, M. Mislove, and D. Schmidt, editors, </editor> <booktitle> Mathematical Foundations of Programming Semantics, volume 442 of Lecture Notes in Computer Science, </booktitle> <pages> pages 271-283. </pages> <publisher> Springer Verlag, </publisher> <year> 1990. </year>
Reference: [Sto91] <author> A. Stoughton. </author> <title> Interdefinability of parallel operations in PCF. </title> <journal> Theoretical Computer Science, </journal> <volume> 79 </volume> <pages> 357-358, </pages> <year> 1991. </year>
Reference: [Tay91] <author> P. Taylor. </author> <title> The fixed point property in synthetic domain theory. </title> <booktitle> In 6th LICS conference, </booktitle> <pages> pages 152-160. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1991. </year>
Reference: [Tay95] <author> P. Taylor. </author> <title> An abstract stone duality. </title> <note> Available by ftp from theory.doc.ic.ac.uk, </note> <year> 1995. </year>
Reference: [Ten83] <author> R. D. Tennent. </author> <title> Semantics of interference control. </title> <journal> Theoretical Computer Science, </journal> <volume> 27 </volume> <pages> 297-310, </pages> <year> 1983. </year>
Reference-contexts: This property can be hard to check, and with syntactic control of interference [Rey78, Rey89] Reynolds proposes a scheme to ensure that such interfering code cannot be written. This too has a denotational semantics within the functor category model <ref> [Ten83, O'H93] </ref>, and indeed a comparison with mathematical models for linear logic has inspired a reworking of the original syntactic scheme [O'H91, OPTT95]. This new version corrects some known difficulties with types, by giving a correct handling of passive and active procedure parameters.
Reference: [Ten90] <author> R. D. Tennent. </author> <title> Semantical analysis of specification logic. </title> <journal> Information and Computation, </journal> <volume> 85(2) </volume> <pages> 135-162, </pages> <year> 1990. </year> <month> 39 </month>
Reference-contexts: These functor category models have been used to give a denotational account of specification logic, Reynolds' extension of Hoare logic to higher-order procedures <ref> [Rey82, Ten90, OT93] </ref>. Specification logic uses a notion of non-interference to avoid the problems of variable aliasing, where procedures may affect each other in unforeseen ways.
Reference: [TP90] <author> P. Taylor and W. K.-S. Phoa. </author> <title> The synthetic plotkin powerdomain. </title> <note> Available by ftp from theory.doc.ic.ac.uk, </note> <year> 1990. </year>
Reference: [Vic89] <author> S. J. Vickers. </author> <title> Topology Via Logic. </title> <booktitle> Cambridge Tracts in Theoretical Computer Science. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1989. </year>
Reference: [Wad89] <editor> P. Wadler. </editor> <booktitle> Theorems for free! In 4th International Symposium on Functional Programming Languages and Computer Architecture, </booktitle> <pages> pages 347-359. </pages> <publisher> ACM, </publisher> <address> New York, </address> <year> 1989. </year>
Reference-contexts: There is also similar work of Mitchell and Scedrov [MS92] for essentially ML-style polymorphism. 2. Robinson and Rosolini [RR94] give a related development, with the definitions reworked in the setting of internal category models of polymorphism. 3. Wadler <ref> [Wad89] </ref> does the same in the context of type-frame models [BMM90], and provides many useful examples of reasoning with relational parametricity (see also [Has94]). 4.
Reference: [Wan79] <author> M. Wand. </author> <title> Fixed point constructions in order-enriched categories. </title> <journal> Theoretical Computer Science, </journal> <volume> 8 </volume> <pages> 13-30, </pages> <year> 1979. </year>
Reference: [Win93] <author> G. Winskel. </author> <title> The Formal Semantics of Programming Languages. An Introduction. </title> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference: [Win94] <author> G. Winskel. </author> <title> Stable bistructure models of PCF. </title> <type> Technical Report RS-94-13, BRICS, </type> <year> 1994. </year>
Reference: [Zha91] <author> G.-Q. Zhang. </author> <title> Logic of Domains. </title> <booktitle> Progress in Theoretical Computer Science. </booktitle> <publisher> Birkhauser, </publisher> <year> 1991. </year> <month> 40 </month>
References-found: 200

