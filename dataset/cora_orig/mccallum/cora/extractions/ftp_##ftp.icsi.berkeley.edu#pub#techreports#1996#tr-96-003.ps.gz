URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1996/tr-96-003.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1996.html
Root-URL: http://www.icsi.berkeley.edu
Abstract-found: 0
Intro-found: 1
Reference: [ Baker, 1991 ] <author> Andrew B. Baker. </author> <title> Nonmonotonic reasoning in the framework of situation calculus. </title> <journal> Artificial Intelligence Journal, </journal> <volume> 49 </volume> <pages> 5-23, </pages> <year> 1991. </year>
Reference-contexts: In case the action description is applied to the second state, an additional ramification step based on (10) has to be computed in order to ensure the turkey stops walking when shot dead. Example 2 Consider the following adaption, which is due to <ref> [ Baker, 1991 ] </ref> , of the Yale Shooting scenario [ Hanks and McDermott, 1987 ] . We intend to hunt a turkey which is either alive or not (described via fluent alive ) and which is walking around or not (fluent walking ).
Reference: [ Bibel, 1986 ] <author> Wolfgang Bibel. </author> <title> A deductive solution for plan generation. </title> <journal> New Generation Computing, </journal> <volume> 4 </volume> <pages> 115-132, </pages> <year> 1986. </year>
Reference-contexts: While the work reported in this article has been concentrated solely on the ramification problem, the particular approach|aside from being closely related, in its basic form, to the Linear Connection Method <ref> [ Bibel, 1986 ] </ref> and reasoning about actions based on Linear Logic [ Girard, 1987; Masseron et al., 1993 ] |has shown a wide range of applicability, e.g. regarding postdiction problems and non-deterministic actions [ Thielscher, 1994b ] , reasoning about counterfactual action sequences [ Thielscher, 1994a ] , or concurrent
Reference: [ Bornscheuer and Thielscher, 1994 ] <author> Sven-Erik Bornscheuer and Michael Thielscher. </author> <title> Representing concurrent actions and solving conflicts. </title> <editor> In B. Nebel and L. Dreschler-Fischer, editors, </editor> <booktitle> Proceedings of the German Annual Conference on Artificial Intelligence (KI), volume 861 of LNAI, </booktitle> <pages> pages 16-27, </pages> <address> Saarbrucken, Germany, September 1994. </address> <publisher> Springer. </publisher>
Reference-contexts: based on Linear Logic [ Girard, 1987; Masseron et al., 1993 ] |has shown a wide range of applicability, e.g. regarding postdiction problems and non-deterministic actions [ Thielscher, 1994b ] , reasoning about counterfactual action sequences [ Thielscher, 1994a ] , or concurrent actions in conjunction with (locally) inconsistent specifications <ref> [ Bornscheuer and Thielscher, 1994 ] </ref> . Thus, a main goal of future research consists in combining all these results, each of which focuses on a single ontological aspect, into a uniform and expressive calculus. Acknowledgments.
Reference: [ Brewka and Hertzberg, 1993 ] <author> Gerhard Brewka and Joachim Hertzberg. </author> <title> How to do things with worlds: on formalizing actions and plans. </title> <journal> Journal of Logic and Computation, </journal> <volume> 3(5) </volume> <pages> 517-532, </pages> <year> 1993. </year>
Reference-contexts: E T ; 2. T satisfies D ; and 19 E.g., frame vs. non-frame fluents [ Lifschitz, 1990 ] ; relevant vs. dependent <ref> [ Brewka and Hertzberg, 1993 ] </ref> ; persistent vs. non-persistent [ del Val and Shoham, 1993 ] ; the latter augmented by mutable fluents [ Zhang and Foo, 1993 ] ; or occluded , remanent, and dependent [ Sandewall, 1995a ] . 20 The terms "primary" and "secondary," respectively, were inspired <p> Similar ideas have been used in e.g. [ del Val and Shoham, 1993 ] and (in the second part of) <ref> [ Brewka and Hertzberg, 1993 ] </ref> . <p> Consequently, no intermediately occurring fact can possibly trigger an indirect effect; hence, this formalization does not allow for deriving the successor state where a flash of the light bulb is recorded by the light detector in our Example 4. In <ref> [ Brewka and Hertzberg, 1993 ] </ref> and [ McCain and Turner, 1995 ] , the notion of causality is introduced by defining so-called causal rules (c.f. <p> Aside from a far more simple formalization employed in [ McCain and Turner, 1995 ] compared to <ref> [ Brewka and Hertzberg, 1993 ] </ref> , the latter does not allow for concluding implicit qualifications from domain constraints rather than ramifications (c.f. Subsection 3.3). The reason is that [ Brewka and Hertzberg, 1993 ] always strive for a successor state no matter how many changes are necessary to this end, <p> Aside from a far more simple formalization employed in [ McCain and Turner, 1995 ] compared to <ref> [ Brewka and Hertzberg, 1993 ] </ref> , the latter does not allow for concluding implicit qualifications from domain constraints rather than ramifications (c.f. Subsection 3.3). The reason is that [ Brewka and Hertzberg, 1993 ] always strive for a successor state no matter how many changes are necessary to this end, while [ McCain and Turner, 1995 ] additionally require all changes be explicitly grounded on some causal rule. <p> Finally, we should also stress both <ref> [ Brewka and Hertzberg, 1993; McCain and Turner, 1995 ] </ref> assume that causal rules be given as part of a domain specification, which requires more design effort than necessary|as can be seen by our suggestion to generate causal relationships automatically by employing more general information on potential influences. <p> v; s) ] (57) where caused (f; v; s) should be read as "fluent f is caused to take truth-value v in state s " 29 Moreover, a third approach, [ Geffner, 1990; Geffner, 1992 ] , which is based on a nonmonotonic theory of "conditional entailment," appears similar to <ref> [ Brewka and Hertzberg, 1993; McCain and Turner, 1995 ] </ref> in using expressions which resemble causal rules. A thorough and formal comparison between these three frameworks, however, has not yet been accomplished. 37 and (s) describes properties of state s , e.g. (c.f. <p> This is formally achieved by applying circumscription [ McCarthy, 1980 ] . Hence, aside from also devoting the effort of constructing the various causal relations to the designer, this method is grounded on the paradigm of minimal change as well. In fact, this work too appears closely related to <ref> [ Brewka and Hertzberg, 1993; McCain and Turner, 1995 ] </ref> .
Reference: [ Burckert et al., 1988 ] <author> Hans-Jurgen Burckert, Alexander Herold, Deepak Kapur, Jorg H. Siekmann, Mark E. Stickel, M. Tepp, and H. Zhang. </author> <title> Opening the AC-unification race. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 4 </volume> <pages> 465-474, </pages> <year> 1988. </year>
Reference: [ Clark, 1978 ] <author> Keith L. Clark. </author> <title> Negation as failure. </title> <editor> In H. Gallaire and J. Minker, editors, </editor> <booktitle> Workshop Logic and Data Bases, </booktitle> <pages> pages 293-322. </pages> <publisher> Plenum Press, </publisher> <year> 1978. </year>
Reference-contexts: Ordinary, i.e. definite, clauses do not allow for encoding rules like " p if, for all X , r (X) ." To overcome this lack of expressiveness, we follow [ Lloyd, 1987 ] in employing the negation-as-failure principle <ref> [ Clark, 1978 ] </ref> and re-formulate the above statement to " p if not q " in conjunction with " q if exists X such that non-r (X ) ." More precisely, to encode that p (t S ) shall be true if formula 8X: F holds in state S ,
Reference: [ del Val and Shoham, 1993 ] <author> Alvaro del Val and Yoav Shoham. </author> <title> Deriving properties of belief update from theories of action (II). </title> <editor> In R. Bajcsy, editor, </editor> <booktitle> Proceedings of the International Joint Conference on Artificial Intelligence (IJCAI), </booktitle> <pages> pages 732-737, </pages> <address> Chambery, France, August 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: E T ; 2. T satisfies D ; and 19 E.g., frame vs. non-frame fluents [ Lifschitz, 1990 ] ; relevant vs. dependent [ Brewka and Hertzberg, 1993 ] ; persistent vs. non-persistent <ref> [ del Val and Shoham, 1993 ] </ref> ; the latter augmented by mutable fluents [ Zhang and Foo, 1993 ] ; or occluded , remanent, and dependent [ Sandewall, 1995a ] . 20 The terms "primary" and "secondary," respectively, were inspired by [ Sandewall, 1995b ] . 18 light sw 1 <p> Similar ideas have been used in e.g. <ref> [ del Val and Shoham, 1993 ] </ref> and (in the second part of) [ Brewka and Hertzberg, 1993 ] .
Reference: [ Elkan, 1992 ] <author> Charles Elkan. </author> <title> Reasoning about action in first-order logic. </title> <booktitle> In Proceedings of the Conference of the Canadian Society for Computational Studies of Intelligence, </booktitle> <address> Vancouver, Canada, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: Recently, some approaches have been established that take into account specific notions of causality, as does our method, to tackle the problem of unintended changes. The monotonic first-order formalism developed in <ref> [ Elkan, 1992 ] </ref> supports specifications of indirect effects by means of complete descriptions of how the truth-value of a particular fluent might be caused to change, e.g. (c.f.
Reference: [ Fikes and Nilsson, 1971 ] <author> Richard E. Fikes and Nils J. Nilsson. </author> <title> STRIPS: A new approach to the application of theorem proving to problem solving. </title> <journal> Artificial Intelligence Journal, </journal> <volume> 2 </volume> <pages> 189-208, </pages> <year> 1971. </year>
Reference-contexts: The second basic entity in frameworks to reason about dynamic environments are actions , whose execution causes state transitions. Again, since stress shall lie on the ramification problem rather than on sophisticated methods of specifying the direct effects of actions, we employ a fairly simple, Strips-style <ref> [ Fikes and Nilsson, 1971; Lifschitz, 1986 ] </ref> notion of action specification.
Reference: [ Finger, 1987 ] <author> Joseph J. </author> <title> Finger. Exploiting Constraints in Design Synthesis. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <address> CA, </address> <year> 1987. </year>
Reference-contexts: albeit informal, guidance we suggest a single state transition should summarize what happens until someone, e.g. the reasoning agent himself, has the possibility to intervene by acting again (stopping the chair from falling, for instance). 2 The naming was suggested in [ Ginsberg and Smith, 1988b ] being inspired by <ref> [ Finger, 1987 ] </ref> .
Reference: [ Gallier and Raatz, 1989 ] <author> Jean H. Gallier and Stan Raatz. </author> <title> Extending SLD-resolution to equational horn clauses using E-unification. </title> <journal> Journal of Logic Programming, </journal> <volume> 6 </volume> <pages> 3-44, </pages> <year> 1989. </year>
Reference: [ Geffner, 1990 ] <author> Hector Geffner. </author> <title> Causal theories for nonmonotonic reasoning. </title> <booktitle> In Proceedings of the AAAI National Conference on Artificial Intelligence, </booktitle> <pages> pages 524-530, </pages> <address> Boston, MA, </address> <year> 1990. </year>
Reference-contexts: ; v 1 ; S) ^ : : : ^ caused (f n ; v n ; S) caused (f; v; s) ] (57) where caused (f; v; s) should be read as "fluent f is caused to take truth-value v in state s " 29 Moreover, a third approach, <ref> [ Geffner, 1990; Geffner, 1992 ] </ref> , which is based on a nonmonotonic theory of "conditional entailment," appears similar to [ Brewka and Hertzberg, 1993; McCain and Turner, 1995 ] in using expressions which resemble causal rules.
Reference: [ Geffner, 1992 ] <author> Hector Geffner. </author> <title> Default Reasoning: Causal and Conditional Theories. </title> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: ; v 1 ; S) ^ : : : ^ caused (f n ; v n ; S) caused (f; v; s) ] (57) where caused (f; v; s) should be read as "fluent f is caused to take truth-value v in state s " 29 Moreover, a third approach, <ref> [ Geffner, 1990; Geffner, 1992 ] </ref> , which is based on a nonmonotonic theory of "conditional entailment," appears similar to [ Brewka and Hertzberg, 1993; McCain and Turner, 1995 ] in using expressions which resemble causal rules.
Reference: [ Gelfond and Lifschitz, 1993 ] <author> Michael Gelfond and Vladimir Lifschitz. </author> <title> Representing Action and Change by Logic Programs. </title> <journal> Journal of Logic Programming, </journal> <volume> 17 </volume> <pages> 301-321, </pages> <year> 1993. </year>
Reference-contexts: Three recent, similarly high-level action semantics focus on sophis-ticated ways to formalize this aspect, namely, the Action Description Language A <ref> [ Gelfond and Lifschitz, 1993 ] </ref> , the Ego-World-Semantics [ Sandewall, 1994 ] , and the framework presented in [ Thielscher, 1995 ] . These approaches are considered prime candidates for being enhanced by the concept of causal relationships.
Reference: [ Ginsberg and Smith, 1988a ] <author> Matthew L. Ginsberg and David E. Smith. </author> <title> Reasoning about action I: A possible worlds approach. </title> <journal> Artificial Intelligence Journal, </journal> <volume> 35 </volume> <pages> 165-195, </pages> <year> 1988. </year>
Reference-contexts: The necessity of additional information to prevent changes that are suggested syntactically by the mere domain constraints but contradict the intuition was first observed in [ Ginsberg and Smith, 1988b ] in the context of the possible worlds approach <ref> [ Ginsberg and Smith, 1988a ] </ref> . There, indirect effects of actions are implicitly obtained by searching for successor worlds (i.e., state descriptions) staying as close as possible to the original world and satisfying both the direct effects of the action under consideration and all domain constraints.
Reference: [ Ginsberg and Smith, 1988b ] <author> Matthew L. Ginsberg and David E. Smith. </author> <title> Reasoning about action II: The qualification problem. </title> <journal> Artificial Intelligence Journal, </journal> <volume> 35 </volume> <pages> 311-342, </pages> <year> 1988. </year>
Reference-contexts: set during the next state transition)." As a reasonable, albeit informal, guidance we suggest a single state transition should summarize what happens until someone, e.g. the reasoning agent himself, has the possibility to intervene by acting again (stopping the chair from falling, for instance). 2 The naming was suggested in <ref> [ Ginsberg and Smith, 1988b ] </ref> being inspired by [ Finger, 1987 ] . <p> Implicit Qualification Thus far we have seen that and how domain constraints give rise to additional, indirect effects of actions. On the other hand, as observed e.g. in <ref> [ Ginsberg and Smith, 1988b; Lin and Reiter, 1994 ] </ref> , domain constraints might instead give rise to additional, implicit qualifications of actions. <p> These results form the basis for comparing the method presented in this paper with existing approaches to the ramification problem. The necessity of additional information to prevent changes that are suggested syntactically by the mere domain constraints but contradict the intuition was first observed in <ref> [ Ginsberg and Smith, 1988b ] </ref> in the context of the possible worlds approach [ Ginsberg and Smith, 1988a ] .
Reference: [ Girard, 1987 ] <author> Jean-Yves Girard. </author> <title> Linear Logic. </title> <journal> Journal of Theoretical Computer Science, </journal> <volume> 50(1) </volume> <pages> 1-102, </pages> <year> 1987. </year>
Reference-contexts: While the work reported in this article has been concentrated solely on the ramification problem, the particular approach|aside from being closely related, in its basic form, to the Linear Connection Method [ Bibel, 1986 ] and reasoning about actions based on Linear Logic <ref> [ Girard, 1987; Masseron et al., 1993 ] </ref> |has shown a wide range of applicability, e.g. regarding postdiction problems and non-deterministic actions [ Thielscher, 1994b ] , reasoning about counterfactual action sequences [ Thielscher, 1994a ] , or concurrent actions in conjunction with (locally) inconsistent specifications [ Bornscheuer and Thielscher, 1994
Reference: [ Green, 1969 ] <author> Cordell Green. </author> <title> Application of theorem proving to problem solving. </title> <booktitle> In Proceedings of the International Joint Conference on Artificial Intelligence (IJCAI), </booktitle> <pages> pages 219-239, </pages> <address> Los Altos, CA, 1969. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Note that this formalization avoids additional axioms (so-called frame axioms <ref> [ McCarthy and Hayes, 1969; Green, 1969 ] </ref> ) to express the law of persistence since all fluent literals unaffected by the execution of an action automatically continue to be true in the resulting state.
Reference: [ Groe et al., 1992 ] <author> Gerd Groe, Steffen Holldobler, Josef Schneeberger, Ute Sigmund, and Michael Thielscher. </author> <title> Equational logic programming, actions, and change. </title> <editor> In K. Apt, editor, </editor> <booktitle> Proceedings of the International Joint Conference and Symposium on Logic Programming (IJCSLP), </booktitle> <pages> pages 177-191, </pages> <address> Washington, 1992. </address> <publisher> MIT Press. </publisher>
Reference: [ Hanks and McDermott, 1987 ] <author> Steve Hanks and Drew McDermott. </author> <title> Nonmonotonic logic and temporal projection. </title> <journal> Artificial Intelligence Journal, </journal> <volume> 33(3) </volume> <pages> 379-412, </pages> <year> 1987. </year>
Reference-contexts: Example 2 Consider the following adaption, which is due to [ Baker, 1991 ] , of the Yale Shooting scenario <ref> [ Hanks and McDermott, 1987 ] </ref> . We intend to hunt a turkey which is either alive or not (described via fluent alive ) and which is walking around or not (fluent walking ). Domain constraint walking alive restricts walking turkeys to vivid ones.
Reference: [ Holldobler and Schneeberger, 1990 ] <author> Steffen Holldobler and Josef Schneeberger. </author> <title> A new deductive approach to planning. </title> <journal> New Generation Computing, </journal> <volume> 8 </volume> <pages> 225-244, </pages> <year> 1990. </year>
Reference-contexts: In the second part of the paper, Section 6, we integrate the concept of causal relationships into a particular action calculus which is based on reifying entire state descriptions and which employs the logic programming paradigm <ref> [ Holldobler and Schneeberger, 1990; Holldobler and Thielscher, 1995 ] </ref> . While for sake of simplicity states are described via a set of propositional constants in the first part (see Section 2), the calculus itself employs more complex a notion of fluent, which comes along with fluent formulas involving quantifications. <p> This calculus will be based on the logic programming paradigm. More precisely, we adapt and extend a method described in <ref> [ Holldobler and Schneeberger, 1990; Holldobler and Thielscher, 1995 ] </ref> , which applies the concept of reifi-cation to entire states, i.e., each of which is formally represented as single term and, thus, is manipulable by means of program clauses. <p> the instance = fX 7! s 1 g of the first action description is applicable due to fon (X )g S ; its application yields (S n fon (s 1 )g) [ fon (s 1 )g = fon (s 1 ); on (s 2 ); lightg The approach defined in <ref> [ Holldobler and Schneeberger, 1990; Holldobler and Thielscher, 1995 ] </ref> is grounded on the formal representation of an entire state by a single term. To this end, fluent expressions are reified and connected via a special binary function, which is illustratively denoted by ffi and written in infix notation. <p> Intuitively, the order in which the various fluent expressions are connected is irrelevant as regards the state to be represented. Hence, our connection function obeys some special properties, which are formalized using the following equational theory <ref> [ Holldobler and Schneeberger, 1990 ] </ref> : 8X; Y; Z: (X ffi Y ) ffi Z = X ffi (Y ffi Z) (associativity) 8X; Y: X ffi Y = Y ffi X (commutativity) 8X: X ffi ; = X (unit element) where the special constant ; denotes a unit element for <p> As an exemplary formalism, in the second part of this paper we have adapted a method which is based on reification of entire state descriptions and uses equational logic programming <ref> [ Holldobler and Schneeberger, 1990; Holldobler and Thielscher, 1995 ] </ref> . Our Theorem 22 demonstrates that the extension of this approach developed here is sound and complete wrt the formal semantics described in the first part.
Reference: [ Holldobler and Thielscher, 1995 ] <author> Steffen Holldobler and Michael Thielscher. </author> <title> Computing change and specificity with equational logic programs. </title> <journal> Annals of Mathematics and Artificial Intelligence, </journal> <volume> 14(1) </volume> <pages> 99-133, </pages> <year> 1995. </year>
Reference-contexts: In the second part of the paper, Section 6, we integrate the concept of causal relationships into a particular action calculus which is based on reifying entire state descriptions and which employs the logic programming paradigm <ref> [ Holldobler and Schneeberger, 1990; Holldobler and Thielscher, 1995 ] </ref> . While for sake of simplicity states are described via a set of propositional constants in the first part (see Section 2), the calculus itself employs more complex a notion of fluent, which comes along with fluent formulas involving quantifications. <p> This calculus will be based on the logic programming paradigm. More precisely, we adapt and extend a method described in <ref> [ Holldobler and Schneeberger, 1990; Holldobler and Thielscher, 1995 ] </ref> , which applies the concept of reifi-cation to entire states, i.e., each of which is formally represented as single term and, thus, is manipulable by means of program clauses. <p> the instance = fX 7! s 1 g of the first action description is applicable due to fon (X )g S ; its application yields (S n fon (s 1 )g) [ fon (s 1 )g = fon (s 1 ); on (s 2 ); lightg The approach defined in <ref> [ Holldobler and Schneeberger, 1990; Holldobler and Thielscher, 1995 ] </ref> is grounded on the formal representation of an entire state by a single term. To this end, fluent expressions are reified and connected via a special binary function, which is illustratively denoted by ffi and written in infix notation. <p> 1989; Holldobler, 1989 ] where, in contrast to ordinary SLD-resolution, the standard unification procedure is replaced by an algorithm that unifies wrt an underlying equational theory, i.e., in our case, wrt (AC1). 26 In conjunction with this resolution principle, the program is sound and complete as regards Definition 16 (see <ref> [ Holldobler and Thielscher, 1995 ] </ref> ): Theorem 17 Let A be a set of action description, S; S 0 two states, and a be ground instance of an action. <p> As an exemplary formalism, in the second part of this paper we have adapted a method which is based on reification of entire state descriptions and uses equational logic programming <ref> [ Holldobler and Schneeberger, 1990; Holldobler and Thielscher, 1995 ] </ref> . Our Theorem 22 demonstrates that the extension of this approach developed here is sound and complete wrt the formal semantics described in the first part.
Reference: [ Holldobler, 1989 ] <author> Steffen Holldobler. </author> <title> Foundations of Equational Logic Programming, </title> <booktitle> volume 353 of LNAI. </booktitle> <publisher> Springer, </publisher> <year> 1989. </year>
Reference: [ Jaffar et al., 1984 ] <author> Joxan Jaffar, Jean-Louis Lassez, and Michael J. Maher. </author> <title> A theory of complete logic programs with equality. </title> <journal> Journal of Logic Programming, </journal> <volume> 1(3) </volume> <pages> 211-223, </pages> <year> 1984. </year>
Reference: [ Kartha and Lifschitz, 1994 ] <author> G. Neelakantan Kartha and Vladimir Lifschitz. </author> <title> Actions with indirect effects. </title> <editor> In J. Doyle, E. Sandewall, and P. Torasso, editors, </editor> <booktitle> Proceedings of the International Conference on Principles of Knowledge Representation and Reasoning (KR), </booktitle> <pages> pages 341-350, </pages> <address> Bonn, Germany, May 1994. </address> <publisher> Morgan Kaufmann. </publisher> <pages> 41 </pages>
Reference-contexts: A fluent is now an n-place relation over given objects (see, e.g., <ref> [ Sandewall, 1994; Kartha and Lifschitz, 1994 ] </ref> ), called entities here. This comes along with both a generalized concept of action descriptions and fluent formulas involving quantifications. Yet, by requiring underlying sets of entities be finite, we still guarantee decidability in any respect. <p> The resulting extension of the Action Description Language would constitute an alternate to the variant presented in <ref> [ Kartha and Lifschitz, 1994 ] </ref> , which handles ramifications on the basis of categorization and minimization, as does the extension of the Ego-World-Semantics presented in [ Sandewall, 1995b ] .
Reference: [ Lifschitz, 1986 ] <author> Vladimir Lifschitz. </author> <title> On the semantics of STRIPS. </title> <editor> In M. P. Georgeff and A. L. Lansky, editors, </editor> <booktitle> Proceedings of the Workshop on Reasoning about Actions & Plans. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1986. </year>
Reference-contexts: The second basic entity in frameworks to reason about dynamic environments are actions , whose execution causes state transitions. Again, since stress shall lie on the ramification problem rather than on sophisticated methods of specifying the direct effects of actions, we employ a fairly simple, Strips-style <ref> [ Fikes and Nilsson, 1971; Lifschitz, 1986 ] </ref> notion of action specification.
Reference: [ Lifschitz, 1990 ] <author> Vladimir Lifschitz. </author> <title> Frames in the space of situations. </title> <journal> Artificial Intelligence Journal, </journal> <volume> 46 </volume> <pages> 365-376, </pages> <year> 1990. </year>
Reference-contexts: If S is a state and a an action description then a state T is successor iff there exists some hC; a; Ei 2 A such that C S and the following holds: 1. E T ; 2. T satisfies D ; and 19 E.g., frame vs. non-frame fluents <ref> [ Lifschitz, 1990 ] </ref> ; relevant vs. dependent [ Brewka and Hertzberg, 1993 ] ; persistent vs. non-persistent [ del Val and Shoham, 1993 ] ; the latter augmented by mutable fluents [ Zhang and Foo, 1993 ] ; or occluded , remanent, and dependent [ Sandewall, 1995a ] . 20 <p> While the authors argued that this might yield unintended changes (such as a switch magically jumping its position in the circuit depicted in Figure 1), no solution was offered. 35 In <ref> [ Lifschitz, 1990 ] </ref> , the first and most elementary categorization-based solution to this problem was formally developed by distinguishing between so-called frame and non-frame fluents. 28 Only the former are subject to the persistence assumption, and their respective values completely determine the states of the latter.
Reference: [ Lin and Reiter, 1994 ] <author> Fangzhen Lin and Raymond Reiter. </author> <title> State constraints revisited. </title> <journal> Journal of Logic and Computation, </journal> <volume> 4(5) </volume> <pages> 655-678, </pages> <year> 1994. </year>
Reference-contexts: Implicit Qualification Thus far we have seen that and how domain constraints give rise to additional, indirect effects of actions. On the other hand, as observed e.g. in <ref> [ Ginsberg and Smith, 1988b; Lin and Reiter, 1994 ] </ref> , domain constraints might instead give rise to additional, implicit qualifications of actions. <p> Similar remarks apply to a recently developed integration of causality into the situation calculus-based framework <ref> [ Lin and Reiter, 1994 ] </ref> , also with the aim of handling indirect effects [ Lin, 1995 ] . There, first-order formulas resembling causal relationships are used to define dependencies between effects and their indirect consequences.
Reference: [ Lin, 1995 ] <author> Fangzhen Lin. </author> <title> Embracing causality in specifying the indirect effects of actions. </title> <editor> In C. S. Mellish, editor, </editor> <booktitle> Proceedings of the International Joint Conference on Artificial Intelligence (IJCAI), </booktitle> <pages> pages 1985-1991, </pages> <address> Montreal, Canada, August 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Similar remarks apply to a recently developed integration of causality into the situation calculus-based framework [ Lin and Reiter, 1994 ] , also with the aim of handling indirect effects <ref> [ Lin, 1995 ] </ref> . There, first-order formulas resembling causal relationships are used to define dependencies between effects and their indirect consequences.
Reference: [ Lincoln and Christian, 1990 ] <author> Patrick D. Lincoln and J. Christian. </author> <title> Adventures in associative-commutative unification. </title> <editor> In C. Kirchner, editor, </editor> <booktitle> Unification, </booktitle> <pages> pages 393-416. </pages> <publisher> Academic Press Limited, </publisher> <year> 1990. </year>
Reference: [ Lloyd, 1987 ] <author> John W. Lloyd. </author> <booktitle> Foundations of Logic Programming. Series Symbolic Computation. </booktitle> <address> Springer, </address> <note> second, extended edition, </note> <year> 1987. </year>
Reference-contexts: The adequate treatment of these terms requires a (domain-independent) equational theory, which, essentially, formalizes crucial properties of the datastructure set. We assume the reader be familiar with basic concepts of logic programs and the negation-as-failure principle, as can be found e.g. in the textbook <ref> [ Lloyd, 1987 ] </ref> . 24 Since the trapdoor does not work automatically, we do not consider (at-trap; trapdoor-open) 2 I , and (trapdoor-open; at-trap) 62 I is due to the assumption that the turkey has no time to escape during the process of opening the door. 24 6.1 Reified States <p> Ordinary, i.e. definite, clauses do not allow for encoding rules like " p if, for all X , r (X) ." To overcome this lack of expressiveness, we follow <ref> [ Lloyd, 1987 ] </ref> in employing the negation-as-failure principle [ Clark, 1978 ] and re-formulate the above statement to " p if not q " in conjunction with " q if exists X such that non-r (X ) ." More precisely, to encode that p (t S ) shall be true
Reference: [ Lukaszewicz and Madalinska-Bugaj, 1995 ] <author> Witold Lukaszewicz and Ewa Madalinska-Bugaj. </author> <title> Reasoning about action and change using Dijkstra's semantics for programming languages: Preliminary report. </title> <editor> In C. S. Mellish, editor, </editor> <booktitle> Proceedings of the International Joint Conference on Artificial Intelligence (IJCAI), </booktitle> <pages> pages 1950-1955, </pages> <address> Montreal, Canada, August 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: This requires an elaborated way to carefully distinguish between conceivable changes triggered by actually occurred (direct or indirect) effects and unfounded changes. The approach developed in <ref> [ Lukaszewicz and Madalinska-Bugaj, 1995 ] </ref> , which uses Dijkstra's semantics of programming languages to reason about actions, fails to handle this challenge appropriately: There, the ramification problem is tackled by allowing actions to (temporarily) release fluents from being subject to the assumption of persistence; but in case the domain constraints <p> First, recall Figure 8 (a). Since the resulting value of a node, after having 30 For sake of simplicity we neglect the concept of action preconditions. 31 This was observed by V. Lifschitz during the presentation of <ref> [ Lukaszewicz and Madalinska-Bugaj, 1995 ] </ref> . 38 sw 1 sw 3 relay sw 2 light detect (a) ? + trapdoor-open at-trap alive (b) sw 1 sw 2 j fixed the direct effects, must not be computed until all new values of its predecessors have been determined, the proposition detect necessarily
Reference: [ Masseron et al., 1993 ] <author> M. Masseron, Christophe Tollu, and Jacqueline Vauzielles. </author> <title> Generating plans in linear logic I. Actions as proofs. </title> <journal> Journal of Theoretical Computer Science, </journal> <volume> 113 </volume> <pages> 349-370, </pages> <year> 1993. </year>
Reference-contexts: While the work reported in this article has been concentrated solely on the ramification problem, the particular approach|aside from being closely related, in its basic form, to the Linear Connection Method [ Bibel, 1986 ] and reasoning about actions based on Linear Logic <ref> [ Girard, 1987; Masseron et al., 1993 ] </ref> |has shown a wide range of applicability, e.g. regarding postdiction problems and non-deterministic actions [ Thielscher, 1994b ] , reasoning about counterfactual action sequences [ Thielscher, 1994a ] , or concurrent actions in conjunction with (locally) inconsistent specifications [ Bornscheuer and Thielscher, 1994
Reference: [ McCain and Turner, 1995 ] <author> Norman McCain and Hudson Turner. </author> <title> A causal theory of ramifications and qalifi-cations. </title> <editor> In C. S. Mellish, editor, </editor> <booktitle> Proceedings of the International Joint Conference on Artificial Intelligence (IJCAI), </booktitle> <pages> pages 1978-1984, </pages> <address> Montreal, Canada, August 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: In this section, we relate our approach to a more static, fixpoint oriented characterization of successor states, which accounts for indirect effects, is based on the idea of minimizing change in conjunction with causal information, and which has been introduced in <ref> [ McCain and Turner, 1995 ] </ref> . The aim is to prove that all successor states in the sense of the latter framework are also obtained by applying causal relationships. <p> Neither does this allow for preventing unintended changes nor does it enable us to distinguish between ramifications and qualifications (see Subsection 3.3). Based on this observation, the authors of <ref> [ McCain and Turner, 1995 ] </ref> suggest to replace domain constraints by a suitable set of directed rules, called causal rules, which serve as deduction rules and are therefore weaker than the corresponding implications: Definition 9 [ McCain and Turner, 1995 ] Let F be a set of fluent names. <p> Based on this observation, the authors of <ref> [ McCain and Turner, 1995 ] </ref> suggest to replace domain constraints by a suitable set of directed rules, called causal rules, which serve as deduction rules and are therefore weaker than the corresponding implications: Definition 9 [ McCain and Turner, 1995 ] Let F be a set of fluent names. A causal rule is an expression ) where and are fluent formulas. Let C be a finite set of causal rules. <p> Thereby, the last requirement encodes the notion of minimal change: Definition 10 <ref> [ McCain and Turner, 1995 ] </ref> Let F be a set of fluent names, A a set of action descriptions, and C a set of causal rules. Furthermore, let S be a state and a an action name. <p> This illustrates that all formulas induced by causal relationships ) hold in minimal change successors. 14 Observation 11 is a consequence of a theorem stated and proved in <ref> [ McCain and Turner, 1995 ] </ref> , which essentially relates Definition 10 to the basic definition of the so-called possible models approach [ Winslett, 1988 ] . <p> Consequently, no intermediately occurring fact can possibly trigger an indirect effect; hence, this formalization does not allow for deriving the successor state where a flash of the light bulb is recorded by the light detector in our Example 4. In [ Brewka and Hertzberg, 1993 ] and <ref> [ McCain and Turner, 1995 ] </ref> , the notion of causality is introduced by defining so-called causal rules (c.f. <p> Aside from a far more simple formalization employed in <ref> [ McCain and Turner, 1995 ] </ref> compared to [ Brewka and Hertzberg, 1993 ] , the latter does not allow for concluding implicit qualifications from domain constraints rather than ramifications (c.f. Subsection 3.3). <p> Subsection 3.3). The reason is that [ Brewka and Hertzberg, 1993 ] always strive for a successor state no matter how many changes are necessary to this end, while <ref> [ McCain and Turner, 1995 ] </ref> additionally require all changes be explicitly grounded on some causal rule. <p> Finally, we should also stress both <ref> [ Brewka and Hertzberg, 1993; McCain and Turner, 1995 ] </ref> assume that causal rules be given as part of a domain specification, which requires more design effort than necessary|as can be seen by our suggestion to generate causal relationships automatically by employing more general information on potential influences. <p> v; s) ] (57) where caused (f; v; s) should be read as "fluent f is caused to take truth-value v in state s " 29 Moreover, a third approach, [ Geffner, 1990; Geffner, 1992 ] , which is based on a nonmonotonic theory of "conditional entailment," appears similar to <ref> [ Brewka and Hertzberg, 1993; McCain and Turner, 1995 ] </ref> in using expressions which resemble causal rules. A thorough and formal comparison between these three frameworks, however, has not yet been accomplished. 37 and (s) describes properties of state s , e.g. (c.f. <p> This is formally achieved by applying circumscription [ McCarthy, 1980 ] . Hence, aside from also devoting the effort of constructing the various causal relations to the designer, this method is grounded on the paradigm of minimal change as well. In fact, this work too appears closely related to <ref> [ Brewka and Hertzberg, 1993; McCain and Turner, 1995 ] </ref> .
Reference: [ McCarthy and Hayes, 1969 ] <author> John McCarthy and Patrick J. Hayes. </author> <title> Some philosophical problems from the standpoint of artificial intelligence. </title> <journal> Machine Intelligence, </journal> <volume> 4 </volume> <pages> 463-502, </pages> <year> 1969. </year>
Reference-contexts: Note that this formalization avoids additional axioms (so-called frame axioms <ref> [ McCarthy and Hayes, 1969; Green, 1969 ] </ref> ) to express the law of persistence since all fluent literals unaffected by the execution of an action automatically continue to be true in the resulting state.
Reference: [ McCarthy, 1959 ] <author> John McCarthy. </author> <title> Programs with Common Sense. </title> <booktitle> In Proceedings of the Teddington Conference on the Mechanization of Thought Processes, </booktitle> <address> London, </address> <year> 1959. </year> <note> (Reprinted in: </note> <author> J. McCarthy, </author> <title> Formalizing Common Sense, </title> <publisher> Ablex, </publisher> <address> Norwood, New Jersey, </address> <year> 1990). </year>
Reference-contexts: Formal approaches to model this ability have therefore a long tradition in philosophy and, especially, AI, where this research area was initiated by the paper <ref> [ McCarthy, 1959 ] </ref> , which claimed reasoning about actions play a fundamental role in common sense. Drawing conclusions about dynamically changing environments is grounded on formal specifications of what effects are caused by the execution of a particular action.
Reference: [ McCarthy, 1980 ] <author> John McCarthy. </author> <title> Circumscription|a form of non-monotonic reasoning. </title> <journal> Artificial Intelligence Journal, </journal> <volume> 13 </volume> <pages> 27-39, </pages> <year> 1980. </year>
Reference-contexts: This is formally achieved by applying circumscription <ref> [ McCarthy, 1980 ] </ref> . Hence, aside from also devoting the effort of constructing the various causal relations to the designer, this method is grounded on the paradigm of minimal change as well.
Reference: [ Pearl, 1988a ] <author> Judea Pearl. </author> <title> Embracing causality in default reasoning. </title> <journal> Artificial Intelligence Journal, </journal> <volume> 35(2) </volume> <pages> 259-271, </pages> <year> 1988. </year>
Reference-contexts: Employing a collection of single causal relationships, each of which only relates two particular effects, accounts for both several indirect effects caused by a direct one and also indirect effects in turn causing further indirect effects. To illustrate the latter, consider the relationship 3 See <ref> [ Pearl, 1988a ] </ref> for a general discussion on the different nature of causal compared to evidential implications. 2 A change of light to light causes a change of light-detector to light-detector , provided detector-activated is true. in addition to the one above.
Reference: [ Pearl, 1988b ] <author> Judea Pearl. </author> <title> Probabilistic Reasoning in Intelligent Systems: Networks of Plausible Inference. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1988. </year>
Reference-contexts: An approach which is considerably different from all methods discussed so far yet still related, is based on networks representing probabilistic causal theories <ref> [ Pearl, 1988b ] </ref> . Such networks describe, in the first place, static dependencies between its components.
Reference: [ Pearl, 1993 ] <author> Judea Pearl. </author> <title> Graphical models, causality, and intervention. </title> <journal> Statistical Science, </journal> <volume> 8(3) </volume> <pages> 266-273, </pages> <year> 1993. </year>
Reference-contexts: An approach which is considerably different from all methods discussed so far yet still related, is based on networks representing probabilistic causal theories [ Pearl, 1988b ] . Such networks describe, in the first place, static dependencies between its components. As argued in <ref> [ Pearl, 1993; Pearl, 1994 ] </ref> , it is however feasible to re-set the truth-value of one or more nodes and, then, to adjust the values of all depending nodes according to standard (Bayesian) rules of probability|which can be interpreted as generating indirect effects.
Reference: [ Pearl, 1994 ] <author> Judea Pearl. </author> <title> A probabilistic calculus of actions. </title> <editor> In R. Lopez de Mantaras and D. Poole, editors, </editor> <booktitle> Proceedings of the Conference on Uncertainty in Artificial Intelligence (UAI), </booktitle> <pages> pages 454-462, </pages> <address> San Mateo, CA, 1994. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: An approach which is considerably different from all methods discussed so far yet still related, is based on networks representing probabilistic causal theories [ Pearl, 1988b ] . Such networks describe, in the first place, static dependencies between its components. As argued in <ref> [ Pearl, 1993; Pearl, 1994 ] </ref> , it is however feasible to re-set the truth-value of one or more nodes and, then, to adjust the values of all depending nodes according to standard (Bayesian) rules of probability|which can be interpreted as generating indirect effects. <p> The calculus presented in <ref> [ Pearl, 1994 ] </ref> , for instance, considers only actions without preconditions, and it merely refers to the temporal projection problem, which names the task to predict effects of actions.
Reference: [ Plotkin, 1972 ] <author> Gordon D. Plotkin. </author> <title> Building in equational theories. </title> <journal> Machine Intelligence, </journal> <volume> 7 </volume> <pages> 73-90, </pages> <year> 1972. </year>
Reference: [ Sandewall, 1994 ] <author> Erik Sandewall. </author> <title> Features and Fluents. </title> <publisher> Oxford University Press, </publisher> <year> 1994. </year>
Reference-contexts: A fluent is now an n-place relation over given objects (see, e.g., <ref> [ Sandewall, 1994; Kartha and Lifschitz, 1994 ] </ref> ), called entities here. This comes along with both a generalized concept of action descriptions and fluent formulas involving quantifications. Yet, by requiring underlying sets of entities be finite, we still guarantee decidability in any respect. <p> This raises the question whether and how this approach can also be applied in other modes of reasoning like planning or postdiction (also called chronicle completion in <ref> [ Sandewall, 1994 ] </ref> ); the latter of which deals with finding explanations for observations made during the execution of action sequences. This discussion leads us to the question of how to exploit the insights gained in this article. <p> Three recent, similarly high-level action semantics focus on sophis-ticated ways to formalize this aspect, namely, the Action Description Language A [ Gelfond and Lifschitz, 1993 ] , the Ego-World-Semantics <ref> [ Sandewall, 1994 ] </ref> , and the framework presented in [ Thielscher, 1995 ] . These approaches are considered prime candidates for being enhanced by the concept of causal relationships.
Reference: [ Sandewall, 1995a ] <author> Erik Sandewall. </author> <title> Reasoning about actions and change with ramification. </title> <booktitle> In Computer Science Today, volume 1000 of LNCS. </booktitle> <publisher> Springer, </publisher> <year> 1995. </year> <month> 42 </month>
Reference-contexts: E.g., frame vs. non-frame fluents [ Lifschitz, 1990 ] ; relevant vs. dependent [ Brewka and Hertzberg, 1993 ] ; persistent vs. non-persistent [ del Val and Shoham, 1993 ] ; the latter augmented by mutable fluents [ Zhang and Foo, 1993 ] ; or occluded , remanent, and dependent <ref> [ Sandewall, 1995a ] </ref> . 20 The terms "primary" and "secondary," respectively, were inspired by [ Sandewall, 1995b ] . 18 light sw 1 sw 2 relay sw 3 first switch is off), sw 2 (the second switch is on), sw 3 (the third switch is on), light (the light bulb
Reference: [ Sandewall, 1995b ] <author> Erik Sandewall. </author> <title> Systematic comparison of approaches to ramification using restricted min--imzation of change. </title> <type> Technical Report LiTH-IDA-R-95-15, </type> <institution> Department of Computer Science, Linkoping University, Sweden, </institution> <year> 1995. </year>
Reference-contexts: and Hertzberg, 1993 ] ; persistent vs. non-persistent [ del Val and Shoham, 1993 ] ; the latter augmented by mutable fluents [ Zhang and Foo, 1993 ] ; or occluded , remanent, and dependent [ Sandewall, 1995a ] . 20 The terms "primary" and "secondary," respectively, were inspired by <ref> [ Sandewall, 1995b ] </ref> . 18 light sw 1 sw 2 relay sw 3 first switch is off), sw 2 (the second switch is on), sw 3 (the third switch is on), light (the light bulb is off) and relay (the relay is deactivated). 3. there is no T 0 S <p> In <ref> [ Sandewall, 1995b ] </ref> , a systematic framework based on this concept is introduced with the aim of assessing the range of applicability of different approaches that follow the same principles. <p> The resulting extension of the Action Description Language would constitute an alternate to the variant presented in [ Kartha and Lifschitz, 1994 ] , which handles ramifications on the basis of categorization and minimization, as does the extension of the Ego-World-Semantics presented in <ref> [ Sandewall, 1995b ] </ref> . The main purpose of these three formal frameworks is to provide a uniform semantics for calculi designed to reason about actions and change.
Reference: [ Shepherdson, 1992 ] <author> John C. Shepherdson. </author> <title> SLDNF-resolution with equality. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 8 </volume> <pages> 297-306, </pages> <year> 1992. </year>
Reference-contexts: Its two branches fail because st is not AC1-unifiable with on (s 1 ) ffi V nor with on (s 2 ) ffi V . This equational logic program contains negative literals in clause bodies, which requires an extended resolution principle, namely SLDENF-resolution <ref> [ Shepherdson, 1992; Thielscher, 1996 ] </ref> , i.e., SLDE-resolution augmented by negation-as-failure. As usual, a negative literal as subgoal is solved by verifying that every derivation of the respective affirmative part fails, which in turn is shown by constructing a corresponding finitely failed derivation tree.
Reference: [ Stickel, 1981 ] <author> Mark E. Stickel. </author> <title> A unification algorithm for associative commutative functions. </title> <journal> Journal of the ACM, </journal> <volume> 28(3) </volume> <pages> 207-274, </pages> <year> 1981. </year>
Reference-contexts: or S j= G ; 25 To be precise, we always assume an additional program clause representing reflexivity, X = AC1 X , which is employed to solve equality subgoals. 26 AC1-unification is known to be decidable and finitary, i.e., two terms always admit a finite complete set of AC1-unifiers <ref> [ Stickel, 1981 ] </ref> . For efficient unification algorithms see, e.g., [ Burckert et al., 1988; Lincoln and Christian, 1990; Groe et al., 1992 ] . 27 6.
Reference: [ Thielscher, 1994a ] <author> Michael Thielscher. </author> <title> An analysis of systematic approaches to reasoning about actions and change. </title> <editor> In P. Jorrand and V. Sgurev, editors, </editor> <booktitle> International Conference on Artificial Intelligence: Methodology, Systems, Applications (AIMSA), </booktitle> <pages> pages 195-204, </pages> <address> Sofia, Bulgaria, </address> <month> September </month> <year> 1994. </year> <title> World Scientific. </title>
Reference-contexts: form, to the Linear Connection Method [ Bibel, 1986 ] and reasoning about actions based on Linear Logic [ Girard, 1987; Masseron et al., 1993 ] |has shown a wide range of applicability, e.g. regarding postdiction problems and non-deterministic actions [ Thielscher, 1994b ] , reasoning about counterfactual action sequences <ref> [ Thielscher, 1994a ] </ref> , or concurrent actions in conjunction with (locally) inconsistent specifications [ Bornscheuer and Thielscher, 1994 ] . Thus, a main goal of future research consists in combining all these results, each of which focuses on a single ontological aspect, into a uniform and expressive calculus. Acknowledgments.
Reference: [ Thielscher, 1994b ] <author> Michael Thielscher. </author> <title> Representing actions in equational logic programming. </title> <editor> In P. Van Hen-tenryck, editor, </editor> <booktitle> Proceedings of the International Conference on Logic Programming (ICLP), </booktitle> <pages> pages 207-224, </pages> <address> Santa Margherita Ligure, Italy, June 1994. </address> <publisher> MIT Press. </publisher>
Reference-contexts: These approaches are considered prime candidates for being enhanced by the concept of causal relationships. In case of A , this should be based on the dialect called A ND <ref> [ Thielscher, 1994b ] </ref> , which includes the notion of non-determinism, here needed if more than a single successor state exists. <p> the particular approach|aside from being closely related, in its basic form, to the Linear Connection Method [ Bibel, 1986 ] and reasoning about actions based on Linear Logic [ Girard, 1987; Masseron et al., 1993 ] |has shown a wide range of applicability, e.g. regarding postdiction problems and non-deterministic actions <ref> [ Thielscher, 1994b ] </ref> , reasoning about counterfactual action sequences [ Thielscher, 1994a ] , or concurrent actions in conjunction with (locally) inconsistent specifications [ Bornscheuer and Thielscher, 1994 ] .
Reference: [ Thielscher, 1995 ] <author> Michael Thielscher. </author> <title> The logic of dynamic systems. </title> <editor> In C. S. Mellish, editor, </editor> <booktitle> Proceedings of the International Joint Conference on Artificial Intelligence (IJCAI), </booktitle> <pages> pages 1956-1962, </pages> <address> Montreal, Canada, August 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Three recent, similarly high-level action semantics focus on sophis-ticated ways to formalize this aspect, namely, the Action Description Language A [ Gelfond and Lifschitz, 1993 ] , the Ego-World-Semantics [ Sandewall, 1994 ] , and the framework presented in <ref> [ Thielscher, 1995 ] </ref> . These approaches are considered prime candidates for being enhanced by the concept of causal relationships.
Reference: [ Thielscher, 1996 ] <author> Michael Thielscher. </author> <title> On the completeness of SLDENF-resolution. </title> <journal> Journal of Automated Reasoning, </journal> <note> 1996. (To appear Fall '96). </note>
Reference-contexts: Its two branches fail because st is not AC1-unifiable with on (s 1 ) ffi V nor with on (s 2 ) ffi V . This equational logic program contains negative literals in clause bodies, which requires an extended resolution principle, namely SLDENF-resolution <ref> [ Shepherdson, 1992; Thielscher, 1996 ] </ref> , i.e., SLDE-resolution augmented by negation-as-failure. As usual, a negative literal as subgoal is solved by verifying that every derivation of the respective affirmative part fails, which in turn is shown by constructing a corresponding finitely failed derivation tree.
Reference: [ Winslett, 1988 ] <author> Marianne Winslett. </author> <title> Reasoning about action using a possible models approach. </title> <booktitle> In Proceedings of the AAAI National Conference on Artificial Intelligence, </booktitle> <pages> pages 89-93, </pages> <address> Saint Paul, MN, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: This illustrates that all formulas induced by causal relationships ) hold in minimal change successors. 14 Observation 11 is a consequence of a theorem stated and proved in [ McCain and Turner, 1995 ] , which essentially relates Definition 10 to the basic definition of the so-called possible models approach <ref> [ Winslett, 1988 ] </ref> . <p> Otherwise, i.e., if fluents depend mutually, unmotivated changes cannot be precluded. To see why, consider the specification 8A; S [ causes (A; S; f 1 ) causes (A; S; f 2 ) ] (56) 28 Earlier, the author of <ref> [ Winslett, 1988 ] </ref> raised the idea of introducing some notion of preference as regards changes of specific fluents to changes of other fluents; yet, her discussion was only informal and took place in the context of an example. 36 If a is an action whose execution in s does not
Reference: [ Zhang and Foo, 1993 ] <author> Yan Zhang and Norman Y. Foo. </author> <title> Reasoning about persistence: A theory of actions. </title> <editor> In R. Bajcsy, editor, </editor> <booktitle> Proceedings of the International Joint Conference on Artificial Intelligence (IJCAI), </booktitle> <pages> pages 718-723, </pages> <address> Chambery, France, </address> <month> August </month> <year> 1993. </year> <note> Morgan Kaufmann. 43 </note>
Reference-contexts: E T ; 2. T satisfies D ; and 19 E.g., frame vs. non-frame fluents [ Lifschitz, 1990 ] ; relevant vs. dependent [ Brewka and Hertzberg, 1993 ] ; persistent vs. non-persistent [ del Val and Shoham, 1993 ] ; the latter augmented by mutable fluents <ref> [ Zhang and Foo, 1993 ] </ref> ; or occluded , remanent, and dependent [ Sandewall, 1995a ] . 20 The terms "primary" and "secondary," respectively, were inspired by [ Sandewall, 1995b ] . 18 light sw 1 sw 2 relay sw 3 first switch is off), sw 2 (the second switch
References-found: 53

