URL: ftp://ftp.cse.ucsc.edu/pub/tr/ucsc-crl-93-03.ps.Z
Refering-URL: http://www.cse.ucsc.edu/~brucem/
Root-URL: http://www.cse.ucsc.edu
Title: The Swift/RAID Distributed Transaction Driver  
Author: Bruce R. Montague 
Keyword: Swift, RAID, concurrent programming, transactions, distributed systems  
Address: Santa Cruz, CA 95064 USA  
Affiliation: Baskin Center for Computer Engineering Information Sciences University of California, Santa Cruz  
Date: 1 January 1993  
Pubnum: UCSC-CRL-93-03  
Abstract: This document describes a distributed transaction driver developed to support the reimplementation of Swift with added RAID (Redundant Arrays of Inexpensive Disks) functionality. Both a high-level overview and a low-level program description are provided. The Swift system was developed to investigate the use of disk striping to achieve high I/O performance. The transaction driver described here has been used to implement RAID-0, RAID-4, and RAID-5 Swift systems. Swift uses a network of workstations in a manner similar to a redundant disk array, i.e., an application on a client node requests I/O via library routines which evenly distribute I/O across multiple server nodes. Data blocks in RAID files are distributed over the servers. RAID-0 contains no redundancy/parity information, RAID-4 uses a dedicated parity node, and RAID-5 uses distributed parity. The original Swift system used a straight-forward RAID-0 scheme that did not readily scale to RAID-4 and RAID-5 implementations. The transaction driver described here was developed to cope with the distributed concurrent programming problems posed by these implementations. In principle, this transaction driver can be used for a wide variety of distributed concurrent programming problems. 
Abstract-found: 1
Intro-found: 1
Reference: [Allworth 81] <author> S.Allworth, </author> <title> Introduction to Real-Time Software Design, </title> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference-contexts: The last two items are not particularly new or surprising. Variants of the virtual machine technique have long been used to implement multi-threaded servers in uniprocessor environments. The preceding conclusions confirm observations that have been made numerous times in the uniprocessor case, e.g., in <ref> [Allworth 81] </ref> and [Beizer 83]. References 31
Reference: [Beizer 83] <author> B.Beizer, </author> <title> Software Testing Techniques, </title> <publisher> Von Nostrand Reinhold, </publisher> <year> 1983. </year>
Reference-contexts: The last two items are not particularly new or surprising. Variants of the virtual machine technique have long been used to implement multi-threaded servers in uniprocessor environments. The preceding conclusions confirm observations that have been made numerous times in the uniprocessor case, e.g., in [Allworth 81] and <ref> [Beizer 83] </ref>. References 31
Reference: [Cabrera and Long 91] <author> L.Cabrera, D.Long, Swift: </author> <title> Using Distributed Disk Striping to Provide High I/O Data Rates, </title> <journal> Computing Systems, </journal> <volume> Vol. 4, No. 4, </volume> <month> Fall </month> <year> 1991, </year> <pages> pp. 405-436. </pages>
Reference-contexts: A system called Swift was implemented in the Concurrent Systems Laboratory at UCSC during 1990-1991 [Emigh 92]. Swift was designed to investigate the use of disk striping to achieve the high I/O rates required by multimedia applications. The performance of this system was investigated and reported in <ref> [Cabrera and Long 91] </ref>. The Swift system used striping only to enhance performance. No parity schemes were supported, i.e., Swift is a RAID-0 scheme. The original Swift system was modified in July through August of 1992 to use a very different internal implementation.
Reference: [Emigh 92] <author> Aaron T. Emigh, </author> <title> The Swift Architecture: Anatomy of a Prototype, </title> <type> UCSC, </type> <year> 1992. </year>
Reference-contexts: They differ in that RAID-4 uses a dedicated parity device, which can become a bottleneck, while RAID-5 scatters parity data across the devices in the strip, thus achieving a more uniform load. A system called Swift was implemented in the Concurrent Systems Laboratory at UCSC during 1990-1991 <ref> [Emigh 92] </ref>. Swift was designed to investigate the use of disk striping to achieve the high I/O rates required by multimedia applications. The performance of this system was investigated and reported in [Cabrera and Long 91]. The Swift system used striping only to enhance performance.
Reference: [Hartman and Ousterhout 92] <author> J.Hartman and J.Ousterhout, </author> <title> Zebra: A Striped Network File System, </title> <booktitle> in Proceedings of the USENIX Workshop on File Systems, </booktitle> <month> May </month> <year> 1992. </year>
Reference-contexts: Indeed, workers in distributed systems have long been motivated by the effort to design systems which tolerate node failure. However, it is not easy to maintain acceptable performance when implementing RAID-4 and RAID-5 in the Swift environment. <ref> [Hartman and Ousterhout 92] </ref> correctly note that no single location exists to accumulate parity, that update operations, especially in the case of small random writes, require multiple network accesses to correctly perform parity update, and that ensuring atomic update of data and parity blocks is difficult.

References-found: 5

