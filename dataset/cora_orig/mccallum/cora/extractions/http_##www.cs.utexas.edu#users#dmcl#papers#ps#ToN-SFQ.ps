URL: http://www.cs.utexas.edu/users/dmcl/papers/ps/ToN-SFQ.ps
Refering-URL: http://www.cs.utexas.edu/users/dmcl/allpapers.html
Root-URL: 
Title: Start-time Fair Queuing: A Scheduling Algorithm for Integrated Services Packet Switching Networks  
Author: Pawan Goyal, Harrick M. Vin, and Haichen Cheng 
Abstract: We present Start-time Fair Queuing (SFQ) algorithm that is computationally efficient and achieves fairness regardless of variation in a server capacity. We analyze its single server and end-to-end deadline guarantee for variable rate Fluctuation Constrained (FC) and Exponentially Bounded Fluctuation (EBF) servers. To support heterogeneous services and multiple protocol families in integrated services networks, we present a hierarchical SFQ scheduler and derive its performance bounds. Our analysis demonstrates that SFQ is suitable for integrated services networks since it: (1) achieves low average as well as maximum delay for low-throughput applications (e.g., interactive audio, telnet, etc.); (2) provides fairness which is desirable for VBR video; (3) provides fairness, regardless of variation in server capacity, for throughput-intensive, flow-controlled data applications; (4) enables hierarchical link sharing which is desirable for managing heterogeneity; and (5) is computation-ally efficient. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.C.R. Bennett and H. Zhang. </author> <title> Hierarchical Packet Fair Queuing Algorithms. </title> <booktitle> In Proceedings of SIGCOMM'96, </booktitle> <pages> pages 143-156, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: WF 2 Q+ has been recently, independent of our work, proposed to reduce the implementation complexity of WF 2 Q while retaining several of its properties (a similar, but not identical, algorithm termed Starting Potential based Fair Queuing was proposed in [20]) <ref> [1] </ref>. <p> WF 2 Q+ , like WF 2 Q , schedules eligible packets in increasing order of finish tags. Though worst-case fairness of WF 2 Q+ has been derived, its fairness measure has not been derived in 1 <ref> [1] </ref>. To ensure that properties of WF 2 Q+ hold over variable rate servers, it has been proposed in [1] that reference time, instead of real time, should be used in virtual time computation. <p> Though worst-case fairness of WF 2 Q+ has been derived, its fairness measure has not been derived in 1 <ref> [1] </ref>. To ensure that properties of WF 2 Q+ hold over variable rate servers, it has been proposed in [1] that reference time, instead of real time, should be used in virtual time computation. <p> The following example demonstrates that this assumption is necessary to ensure fairness of WF 2 Q+ . Example 2 Let a server serve packets at a constant rate of K +1pkt=s in <ref> [0; 1] </ref> and then at the constant rate of 2pkt=s. Thus, C is 2 pkt/s. Let the server serve K +2 flows and let each flow be assigned a weight of 1pkt=s. <p> Since the first packet of flows 1::K + 1 are eligible at time 0 and WF 2 Q+ schedules packets in the increasing order of finish tags, first packet of flows 1::K + 1 will be served in the time interval <ref> [0; 1] </ref>. For ease of exposition of the later part of the schedule, let q = d K+1 2 e. Then, since S (p q q 1 and v (1) &gt; q 1, packets p 2 K+1 ; ::p K+1 are eligible for scheduling at time 1. <p> Then, since S (p q q 1 and v (1) &gt; q 1, packets p 2 K+1 ; ::p K+1 are eligible for scheduling at time 1. Furthermore, since F (p q F (p 1 K+2 ), in the interval <ref> [1; 1 + q1 2 ] </ref>, q 1 packets of flow K + 1 will be scheduled. Thus in the interval [1; 1 + q1 2 ] even though flows K +1 and K +2 are backlogged, whereas q 1 packets of flow K + 1 are served, no packet of <p> Furthermore, since F (p q F (p 1 K+2 ), in the interval <ref> [1; 1 + q1 2 ] </ref>, q 1 packets of flow K + 1 will be scheduled. Thus in the interval [1; 1 + q1 2 ] even though flows K +1 and K +2 are backlogged, whereas q 1 packets of flow K + 1 are served, no packet of flow K +2 is served. <p> P i C may be ensured either by dynamically changing the weight assignments of flows or by performing admission control. An algorithm for dynamically changing the weights or an evaluation of its effects on the fairness properties have not been presented in <ref> [1] </ref>. On the other hand, it 1 An algorithm that has bounded worst-case-fairness may have un bounded fairness measure [12]. 3 may not be possible to perform admission control for some flow types (for example, best-effort flows). <p> Since SFQ fairly allocates bandwidth regardless of the server behavior, this simple recursive hierarchical scheduling ensures that bandwidth allocated to a class is fairly allocated between the subclasses and thereby achieves the objective of hierarchical link sharing (a similar hierarchical WF 2 Q+ scheduler has been independently presented in <ref> [1] </ref>). Moreover, in contrast to link sharing mechanism in [6], it provides bounds on various performance measures. To derive bounds on the performance measures, we first prove the following corollaries of Theorems 4 and 5. <p> The above analysis method is general and can be employed for any fair scheduling algorithm that provides guarantees similar to SFQ, i.e., bounds on T (w) over FC and EBF servers. Furthermore, this analysis is tighter than the analysis presented in <ref> [1, 13] </ref>. To observe this, consider a tree with three classes; two leaf classes and a root class. Let the rate of leaf classes 1 and 2 be r 1 and r 2 , respectively, and let each of them contain 2 flows with equal weights. <p> Let both the leaf classes be scheduled by SFQ and the length of all packets be l. Then, it can be shown that the best bound on delay of packet p j f for flow f in leaf class 1 using the analysis in <ref> [1, 13] </ref> is: EAT (p f ; 2 l + C 2l (40) In contrast using our analysis, we get: EAT (p f ; 2 2l + r 1 Hierarchical SFQ scheduler not only achieves the objectives of hierarchical link sharing, but can also be used to achieve several other objectives.
Reference: [2] <author> J.C.R. Bennett and H. Zhang. </author> <title> W F 2 Q: Worst-case Fair Weighted Fair Queuing. </title> <booktitle> In Proceedings of INFOCOM'96, </booktitle> <pages> pages 120-127, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: Furthermore, its H (f; m) value depends on the minimum rate allocated by a server, and can deviate significantly from the lower bound. Worst-case-fair weighted Fair Queuing (WF 2 Q ), proposed in <ref> [2] </ref>, was designed to improve WFQ's emulation of hypothetical bit-by-bit round robin server. <p> It has been shown that WF 2 Q emulates the hypothetical server well and has a H (f; m) value of ( f l max m ) <ref> [2] </ref>. However, since it utilizes v (t) as defined in (3), it is computationally inefficient and unsuitable for achieving fairness over variable rate servers.
Reference: [3] <author> J. Davin and A. Heybey. </author> <title> A Simulation Study of Fair Queueing and Policy Enforcement. </title> <journal> Computer Communication Review, </journal> <volume> 20(5) </volume> <pages> 23-29, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Though FQS has advantages for processor scheduling, it is not known to have any advantage over WFQ for scheduling packets in a network. Moreover, since it utilizes v (t) as defined in (3), it has disadvantages similar to that of WFQ. Self Clocked Fair Queuing (SCFQ), originally proposed in <ref> [3] </ref> and later analyzed in [8], was designed to reduce the computational complexity of fair scheduling algorithms like WFQ. SCFQ also schedules packets in the increasing order of finish tags.
Reference: [4] <author> A. Demers, S. Keshav, and S. Shenker. </author> <title> Analysis and Simulation of a Fair Queueing Algorithm. </title> <booktitle> In Proceedings of ACM SIG-COMM, </booktitle> <pages> pages 1-12, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Hence, fair scheduling algorithms are desirable for video applica tions. * Data applications: To support low-throughput, interactive data applications (e.g., telnet), scheduling algorithms must provide low average delay. On the other hand, to support throughput-intensive, flow-controlled applications in heterogeneous, large-scale, decentralized networks, scheduling algorithms must allocate bandwidth fairly <ref> [4, 15] </ref>. Due to the coexistence of VBR video sources and data sources in integrated services networks, the bandwidth available to data applications may vary significantly over time. Consequently, the fairness property of the scheduling algorithm must hold regardless of variation in server capacity. <p> The function H (f; m) is referred to as fairness measure. Several fair scheduling algorithms that achieve value of H (f; m) close to the lower bound have been proposed in the literature. The earliest known fair scheduling algorithm is Weighted Fair Queuing (WFQ) <ref> [4] </ref> (also referred to as Packet-by-Packet Generalized Processor Sharing (PGPS) [17]). WFQ was designed to emulate a hypothetical bit-by-bit weighted round robin server in which the number of bits of a flow served in a round is proportional to the weight of the flow. <p> Whereas the isolation property enables a server to provide stronger guarantees to the flow and is desirable when sources may be malicious <ref> [4] </ref>, independence of delay guarantee from traffic characterization enables a server to provide various QoS guarantees to flows conforming to any specification [10].
Reference: [5] <author> D. Ferrari and D. C. Verma. </author> <title> A Scheme for Real-Time Channel Establishment in Wide-Area Networks. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 8(3) </volume> <pages> 368-379, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: Since such over-booking may yield persistent congestion, a network should provide some QoS guarantees even in the presence of congestion. Unfair scheduling algorithms, such as Virtual Clock [21], Delay EDD <ref> [5] </ref>, etc., penalize channels for the use of idle bandwidth and do not provide bandwidth allocation guarantee in the presence of congestion [17]. Fair scheduling algorithms, on the other hand, guarantee that, regardless of prior usage or congestion, bandwidth would be allocated fairly [17]. <p> We first define Delay EDD and then prove its delay guarantee for a FC server. Delay EDD on arrival of packet p j flow f assigns it a deadline, denoted by D (p j f ), and sched ules packets in increasing order of deadline <ref> [5] </ref>. D (p j defined as: D (p f ) = EAT (p f ; r f ) + d f (42) where d f is the deadline of flow f packets, r f = r j l f = l f .
Reference: [6] <author> S. Floyd and V. Jacobson. </author> <title> Link-sharing and Resource Management Models for Packet Networks. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> 3(4) </volume> <pages> 365-386, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: Furthermore, since such networks will support a wide variety of services and mul 1 tiple protocol families, the scheduling algorithm should fa-cilitate hierarchical link sharing <ref> [6, 18] </ref>. Finally, to facilitate its implementation in high-speed networks, it should be computationally efficient. A scheduling algorithm that achieves these objectives is the subject of investigation in this paper. 1.2 Relation To Previous Work Each unit of data transmission at the network level is a packet. <p> Thus, WFQ is unsuitable for 2 achieving fairness over variable rate servers. As we will out-line in Section 3, to be useful for hierarchical link sharing <ref> [6, 18] </ref>, a scheduling algorithm must provide fairness over variable rate servers. Consequently, WFQ is unsuitable for supporting hierarchical link sharing also. Fair Queuing based on Start-time (FQS), proposed in [14], computes start tag and finish tag of a packet exactly as in WFQ. <p> In the next section, we show that it enables hierarchical link sharing, and thus meets all the requirements of a scheduling algorithm for integrated services networks. 3 Hierarchical Link Sharing Hierarchical link sharing is an ideal mechanism for managing heterogeneity in integrated services networks <ref> [6, 18] </ref>. It can be used by a network to support services that provide heterogeneous QoS as well as multiple protocol families that support different traffic types and/or congestion control mechanisms. <p> The requirements of hierarchical link sharing are specified by a tree, referred to as link-sharing structure, in which each node, other than possibly leaf nodes, denotes an aggregation of flows <ref> [6] </ref>. Each node in the tree is referred to as a class and has a weight associated with it. The objective of a mechanism implementing hierarchical link sharing is to distribute the bandwidth allocated to a class among its subclasses fairly, i.e., in proportion to the weights [18]. <p> Moreover, in contrast to link sharing mechanism in <ref> [6] </ref>, it provides bounds on various performance measures. To derive bounds on the performance measures, we first prove the following corollaries of Theorems 4 and 5.
Reference: [7] <author> L. Georgiadis, R. Guerin, V. Peris, and K.N. Sivarajan. </author> <title> Efficient Network QoS Provisioning Based on per Node Traffic Shaping. </title> <booktitle> In Proceedings of INFOCOM'96, </booktitle> <pages> pages 102-110, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: This method has been used in [10] to derive end-to-end delay guarantee of a network of servers that employ algorithms in the class of Guaranteed Rate (GR) scheduling algorithms (the framework presented in <ref> [7] </ref> can also be employed to study the end-to-end behaviour). However, the end-to-end delay guarantee presented in [10] assumes that each of the server provides a deterministic bound on the departure time of a packet. <p> However, the main advantage of such algorithms is that they have O (1) complexity admission control algorithms. * Fair scheduling algorithms that achieve separation of rate and delay allocation: In such a case, the network utilization is higher. However, these algorithms have O (Q) complexity admission control algorithms <ref> [7] </ref>. For networking environments where either of these two approaches are preferable over SFQ, we have designed a class of Fair Airport (FA) algorithms [12]. An algorithm in FA class combines SFQ with any non-work conserving algorithm in Rate Controlled Service Discipline (RCSD) class [7]. <p> O (Q) complexity admission control algorithms <ref> [7] </ref>. For networking environments where either of these two approaches are preferable over SFQ, we have designed a class of Fair Airport (FA) algorithms [12]. An algorithm in FA class combines SFQ with any non-work conserving algorithm in Rate Controlled Service Discipline (RCSD) class [7]. By appropriately choosing an algorithm from RCSD class, fair algorithms that either allocate only rate or achieve separation of rate and delay allocation can be designed. This method leads to the design of the first fair algorithm that achieves separation of rate and delay allocation.
Reference: [8] <author> S.J. Golestani. </author> <title> A Self-Clocked Fair Queueing Scheme for High Speed Applications. </title> <booktitle> In Proceedings of INFOCOM'94, </booktitle> <pages> pages 636-646, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: Clearly, this is an idealized definition of fairness as it assumes that flows can be served in infinitesimally divisible units. The objective of fair packet scheduling algorithms is to ensure that j f m j is as close to 0 as possible. However, it has been shown in <ref> [8] </ref> that if a packet scheduling algo rithm guarantees that j W f (t 1 ;t 2 ) W m (t 1 ;t 2 ) all intervals [t 1 ; t 2 ] then H (f; m) 1 2 l max f + m , where H (f; m) is a <p> This simulation may require processing of O (Q) events in a single packet transmission time, where Q is the number of flows served, and thus is considered computationally expensive <ref> [8] </ref>. Furthermore, to retain fairness when server rate varies over time, the definition of virtual time will have to be modified. <p> Moreover, since it utilizes v (t) as defined in (3), it has disadvantages similar to that of WFQ. Self Clocked Fair Queuing (SCFQ), originally proposed in [3] and later analyzed in <ref> [8] </ref>, was designed to reduce the computational complexity of fair scheduling algorithms like WFQ. SCFQ also schedules packets in the increasing order of finish tags. However, it achieves efficiency over WFQ by approximating v (t) with the finish tag of the packet in service at time t. <p> It has been shown that the value of H (f; m) for SCFQ is ( l max f + m m ), which is only a factor of two away from the lower bound <ref> [8] </ref>. The main limitation of SCFQ is that it increases the maximum delay incurred by the packets significantly. <p> To evaluate the fairness guarantee of SFQ, we have derived a lower bound on H (f; m) that is tighter than 1 2 ( f l max m ) which was presented in <ref> [8] </ref>. Specifi cally, in [12], we have shown that H (f; m) L (f; m) where L (f; m) is (c + 1)ff, ff = f l max m , ff fi, and c is a positive integer such that cff &lt; fi (c + 1)ff.
Reference: [9] <author> P. Goyal, X. Guo, and H.M. Vin. </author> <title> A Hierarchical CPU Scheduler for Multimedia Operating Systems. </title> <booktitle> In Proceedings of Operating System Design and Implementation (OSDI'96), Seattle, </booktitle> <pages> pages 107-122, </pages> <month> October </month> <year> 1996. </year>
Reference-contexts: The scheduling of packets occurs recursively: the scheduler for root class schedules the subclasses; the scheduler of subclasses in turn schedule their subclasses. If the leaf class is an aggregation of flows, it schedules flows by employing 11 a leaf class dependent scheduler (see <ref> [9] </ref> for an implemen-tation of hierarchical SFQ scheduler).
Reference: [10] <author> P. Goyal and H. M. Vin. </author> <title> Generalized Guaranteed Rate Scheduling Algorithms: A Framework. </title> <note> In IEEE/ACM Transactions on Networking (to appear). Also available as technical report TR95-30, </note> <institution> Department of Computer Sciences, The University of Texas at Austin. </institution>
Reference-contexts: Specifically, if Q is the set of flows served by a server and C its capacity, then packets of flow f may incur P n C more delay in SCFQ than in WFQ <ref> [10] </ref>. This may be unacceptably large in many cases. Frame-based Fair Queuing (FFQ) was designed to retain the efficiency of SCFQ in computing the start and finish tags but ensure that the worst-case delay that can be guaranteed to a packet is the same as in WFQ [20]. <p> Such a guarantee has been referred to as delay guarantee and is used to provide various QoS guarantees regardless of the behaviour of the other flows in the network <ref> [10] </ref>. * It guarantees a deadline to a packet based on its arrival time and the departure time of the previous packet. <p> Theorem 2 demonstrates that maximum delay of a packet in SFQ is smaller than in SCFQ. Specifically, a tight bound on the departure time of a packet at a constant rate server employing SCFQ, given in <ref> [10] </ref>, is: L SCF Q (p f ) EAT (p f ; r f ) + n2Q^n6=f n + j r f Since ffi (C) = 0 for a constant rate server, the difference in maximum delay that a packet may incur at servers em ploying SCFQ and SFQ is: l <p> Whereas the isolation property enables a server to provide stronger guarantees to the flow and is desirable when sources may be malicious [4], independence of delay guarantee from traffic characterization enables a server to provide various QoS guarantees to flows conforming to any specification <ref> [10] </ref>. <p> deadline guar antee to derive delay and delay-cum-throughput guarantee of a network of servers. 2.3.1 End-to-End Delay Guarantee The objective is to determine the deadline guarantee of a network of servers based on the expected arrival time of a packet at the first server on the path of a flow <ref> [10] </ref>. To do so, let the i th server along the path of a flow be denoted as server i. Also, let there be K servers on the path of a flow and let each of the server guarantee a deadline to a packet based on its expected arrival time. <p> Using this argument recursively, a network of servers can guarantee a deadline to a packet based on the expected arrival time of the packet at the first server. This method has been used in <ref> [10] </ref> to derive end-to-end delay guarantee of a network of servers that employ algorithms in the class of Guaranteed Rate (GR) scheduling algorithms (the framework presented in [7] can also be employed to study the end-to-end behaviour). However, the end-to-end delay guarantee presented in [10] assumes that each of the server <p> This method has been used in <ref> [10] </ref> to derive end-to-end delay guarantee of a network of servers that employ algorithms in the class of Guaranteed Rate (GR) scheduling algorithms (the framework presented in [7] can also be employed to study the end-to-end behaviour). However, the end-to-end delay guarantee presented in [10] assumes that each of the server provides a deterministic bound on the departure time of a packet. Consequently, even though SFQ belongs to GR, the guarantee is not applicable to a network which may have some SFQ EBF servers. To analyze such networks, we generalize the method presented in [10]. <p> <ref> [10] </ref> assumes that each of the server provides a deterministic bound on the departure time of a packet. Consequently, even though SFQ belongs to GR, the guarantee is not applicable to a network which may have some SFQ EBF servers. To analyze such networks, we generalize the method presented in [10].
Reference: [11] <author> P. Goyal and H. M. Vin. </author> <title> Network Algorithms and Protocol for Multimedia Servers. </title> <booktitle> In Proceedings of INFOCOM'96, </booktitle> <pages> pages 1371-1379, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: Their e-mail addresses are fpawang,vin,hcchengg@cs.utexas.edu, and their URL is http://www.cs.utexas.edu/users/dmcl. highly variable bit rate requirement at multiple time-scales <ref> [11] </ref>. These features impose two key require ments on network resource management: Due to the difficulty in predicting the bit rate requirement of VBR video sources, video channels may utilize more than the reserved bandwidth.
Reference: [12] <author> P. Goyal, H. M. Vin, and H. Cheng. </author> <title> Start-time Fair Queuing: </title>
Reference-contexts: An algorithm for dynamically changing the weights or an evaluation of its effects on the fairness properties have not been presented in [1]. On the other hand, it 1 An algorithm that has bounded worst-case-fairness may have un bounded fairness measure <ref> [12] </ref>. 3 may not be possible to perform admission control for some flow types (for example, best-effort flows). Furthermore, it may not be feasible to employ admission control when minimum server capacity is zero. <p> Though the per packet computational complexity of DRR is O (1) per packet, its fairness measure can deviate arbitrarily from the lower bound. Furthermore, the maximum delay incurred by packets can be significantly higher than in WFQ <ref> [12] </ref>. <p> Since a (C; 0) FC server is a constant rate server, the following analysis is also valid for constant rate servers. Due to space constraints, we omit the proofs and present them in <ref> [12] </ref>. 2.1 Fairness Guarantee To derive fairness guarantee of SFQ, we need to prove a bound on j W f (t 1 ;t 2 ) W m (t 1 ;t 2 ) m j for any interval in which both flows f and m are backlogged. <p> To evaluate the fairness guarantee of SFQ, we have derived a lower bound on H (f; m) that is tighter than 1 2 ( f l max m ) which was presented in [8]. Specifi cally, in <ref> [12] </ref>, we have shown that H (f; m) L (f; m) where L (f; m) is (c + 1)ff, ff = f l max m , ff fi, and c is a positive integer such that cff &lt; fi (c + 1)ff. <p> The delay guarantee of SFQ depends on the maximum packet length of all the flows at the server. In contrast, the delay guarantee of WFQ depends only on the flow's properties. Thus, WFQ provides better isolation of delay guarantee of a flow. We have shown in <ref> [12] </ref> that the delay guarantee of SFQ is similar to that of an online algorithm 4 that minimizes unfairness. <p> However, these algorithms have O (Q) complexity admission control algorithms [7]. For networking environments where either of these two approaches are preferable over SFQ, we have designed a class of Fair Airport (FA) algorithms <ref> [12] </ref>. An algorithm in FA class combines SFQ with any non-work conserving algorithm in Rate Controlled Service Discipline (RCSD) class [7]. By appropriately choosing an algorithm from RCSD class, fair algorithms that either allocate only rate or achieve separation of rate and delay allocation can be designed.
References-found: 12

