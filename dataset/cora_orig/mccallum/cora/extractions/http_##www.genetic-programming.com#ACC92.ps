URL: http://www.genetic-programming.com/ACC92.ps
Refering-URL: http://www.genetic-programming.com/jkpubs72to93.html
Root-URL: http://www.genetic-programming.com/jkpubs72to93.html
Email: Koza@Sunburn.Stanford.Edu  
Phone: Phone: 415-941-0336, FAX: 415-941-9430  
Title: A Genetic Approach to Finding a Controller to Back Up a Tractor-Trailer Truck  
Author: John R. Koza 
Address: Stanford, CA 94305 USA  
Affiliation: Computer Science Department, Stanford University  
Abstract: Problems of control can be recast as requiring the discovery of a computer program (i.e., control strategy) that takes the state variables of a problem as its inputs and produces the values of the control variables as its output. This paper describes the recently developed genetic programming paradigm which genetically breeds a population of computer programs to solve problems. Genetic programming begins with a population of hundreds or thousands of random computer programs and improves them from generation to generation using the Darwinian operation of fitness proportionate reproduction and the genetic operation of sexual recombination. The sexual recombination operation combines parts of two parental computer programs to produce new offspring programs, each parent being selected proportional to fitness, This paper shows, step by step, how to apply genetic programming to the four dimensional control problem of backing up a tractor-trailer truck to a loading dock. Genetic programming breeds an approximately correct computer program (i.e., control strategy) that successfully performs the required task. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Nguyen, Derrick and Widrow, Bernard. </author> <title> The truck backer-upper: An example of self-learning in neural networks. </title> <editor> In Miller, W. Thomas III, Sutton, Richard S., and Werbos, Paul J. (editors). </editor> <title> Neural Networks for Control. </title> <address> Cambridge, MA: </address> <publisher> MIT Press 1990. </publisher>
Reference-contexts: Introduction and Overview Anyone who has tried to back up a tractor-trailer truck to a loading dock knows that it presents a difficult problem of control. Nguyen and Widrow <ref> [1] </ref> successfully illustrated the capabilities of neural networks by finding a controller for this four dimensional control problem. In this paper, we use the recently developed genetic programming paradigm to genetically breed a controller for this problem.
Reference: [2] <author> Holland, J. H. </author> <booktitle> Adaptation in Natural and Artificial Systems. </booktitle> <address> Ann Arbor, MI: </address> <publisher> University of Michigan Press 1975. </publisher>
Reference-contexts: The needed structure is evolved in response to the selective pressures of Darwinian natural selection and genetic sexual recombination. Background on Genetic Algorithms John Holland's pioneering 1975 Adaptation in Natural and Artificial Systems <ref> [2] </ref> described how the evolutionary process in nature can be applied to artificial systems using the genetic algorithm operating on fixed length character strings.
Reference: [3] <author> Goldberg, David E. </author> <title> Genetic Algorithms in Search, Optimization, </title> <booktitle> and Machine Learning. </booktitle> <address> Reading, MA: </address> <publisher> Addison-Wesley l989. </publisher>
Reference-contexts: Genetic algorithms are an efficient way to search a highly nonlinear multi-dimensional space. A good overview of the many practical applications of the genetic algorithms operating on fixed length character strings (and other variants of the genetic algorithm) can be found in Goldberg <ref> [3] </ref>, Davis [4,5], Belew and Booker [6], and Rawlins [7]. Background on Genetic Programming For many problems, the most natural representation for solutions to problems are computer programs. The size, shape, and contents of the computer program to solve the problem is generally not known in advance.
Reference: [4] <author> Davis, </author> <title> Lawrence (editor) Genetic Algorithms and Simulated Annealing London: </title> <publisher> Pittman l987. </publisher>
Reference: [5] <author> Davis, Lawrence. </author> <title> Handbook of Genetic Algorithms. </title> <address> New York: </address> <publisher> Van Nostrand Reinhold.1991. </publisher>
Reference: [6] <editor> Belew, Richard and Booker, </editor> <booktitle> Lashon (editors) Proceedings of the Fourth International Conference on Genetic Algorithms. </booktitle> <address> San Mateo, CA: </address> <publisher> Morgan Kaufmann Publishers Inc. </publisher> <year> 1991. </year>
Reference-contexts: Genetic algorithms are an efficient way to search a highly nonlinear multi-dimensional space. A good overview of the many practical applications of the genetic algorithms operating on fixed length character strings (and other variants of the genetic algorithm) can be found in Goldberg [3], Davis [4,5], Belew and Booker <ref> [6] </ref>, and Rawlins [7]. Background on Genetic Programming For many problems, the most natural representation for solutions to problems are computer programs. The size, shape, and contents of the computer program to solve the problem is generally not known in advance.
Reference: [7] <editor> Rawlins, Gregory (editor). </editor> <booktitle> Proceedings of Workshop on the Foundations of Genetic Algorithms and Classifier Systems. </booktitle> <address> Bloomington, Indiana. July 15-18, 1990. San Mateo, CA: </address> <publisher> Morgan Kaufmann 1991. </publisher>
Reference-contexts: A good overview of the many practical applications of the genetic algorithms operating on fixed length character strings (and other variants of the genetic algorithm) can be found in Goldberg [3], Davis [4,5], Belew and Booker [6], and Rawlins <ref> [7] </ref>. Background on Genetic Programming For many problems, the most natural representation for solutions to problems are computer programs. The size, shape, and contents of the computer program to solve the problem is generally not known in advance.
Reference: [8] <author> Koza, John R. </author> <title> Hierarchical genetic algorithms operating on populations of computer programs." </title> <booktitle> In Proceedings of the 11th International Joint Conference on Artificial Intelligence San Mateo, </booktitle> <address> CA: </address> <publisher> Morgan Kaufman 1989. </publisher>
Reference-contexts: We have shown that computer programs can be genetically bred to solve problems in a surprising variety of different areas. Specifically, genetic programming has been successfully applied to problems in a wide variety of different areas <ref> [8, 9, 10, 11] </ref> including discovering inverse kinematic equations (e.g., to move a robot arm to designated target points) [10], optimal control (e.g., centering a cart and balancing a broom on a moving cart in minimal time by applying a "bang bang" force to the cart) [12,13], symbolic "data to function"
Reference: [9] <author> Koza, John R. </author> <title> Genetic Programming: A Paradigm for Genetically Breeding Populations of Computer Programs to Solve Problems. </title> <institution> Stanford University Computer Science Department Technical Report STAN-CS-90-1314. </institution> <month> June </month> <year> 1990. </year>
Reference-contexts: We have shown that computer programs can be genetically bred to solve problems in a surprising variety of different areas. Specifically, genetic programming has been successfully applied to problems in a wide variety of different areas <ref> [8, 9, 10, 11] </ref> including discovering inverse kinematic equations (e.g., to move a robot arm to designated target points) [10], optimal control (e.g., centering a cart and balancing a broom on a moving cart in minimal time by applying a "bang bang" force to the cart) [12,13], symbolic "data to function"
Reference: [10] <author> Koza, John R. </author> <title> Genetic Programming: On Programming Computer by Means of Natural Selection and G e n e t i c s . Cambridge, </title> <address> MA: </address> <publisher> The MIT Press 1992 (forthcoming). </publisher>
Reference-contexts: We have shown that computer programs can be genetically bred to solve problems in a surprising variety of different areas. Specifically, genetic programming has been successfully applied to problems in a wide variety of different areas <ref> [8, 9, 10, 11] </ref> including discovering inverse kinematic equations (e.g., to move a robot arm to designated target points) [10], optimal control (e.g., centering a cart and balancing a broom on a moving cart in minimal time by applying a "bang bang" force to the cart) [12,13], symbolic "data to function" <p> Specifically, genetic programming has been successfully applied to problems in a wide variety of different areas [8, 9, 10, 11] including discovering inverse kinematic equations (e.g., to move a robot arm to designated target points) <ref> [10] </ref>, optimal control (e.g., centering a cart and balancing a broom on a moving cart in minimal time by applying a "bang bang" force to the cart) [12,13], symbolic "data to function" regression, integration, differentiation, and symbolic solution to general functional equations (including differential equations with initial conditions, and integral equations),
Reference: [11] <author> Koza, John R. </author> <title> The genetic programming paradigm: Genetically breeding populations of computer programs to solve problems. In Soucek, Branko and the IRIS Group (editors). Dynamic, Genetic, and Chaotic Programming. </title> <address> New York: </address> <publisher> John Wiley 1992. </publisher>
Reference-contexts: We have shown that computer programs can be genetically bred to solve problems in a surprising variety of different areas. Specifically, genetic programming has been successfully applied to problems in a wide variety of different areas <ref> [8, 9, 10, 11] </ref> including discovering inverse kinematic equations (e.g., to move a robot arm to designated target points) [10], optimal control (e.g., centering a cart and balancing a broom on a moving cart in minimal time by applying a "bang bang" force to the cart) [12,13], symbolic "data to function"
Reference: [12] <author> Koza, John R., and Keane, Martin A. </author> <title> Cart centering and broom balancing by genetically breeding populations of control strategy programs. </title> <booktitle> In Proceedings of International Joint Conference on Neural Networks, </booktitle> <address> Washington, </address> <month> January 15-19, </month> <year> 1990. </year> <booktitle> Volume I, </booktitle> <pages> Pages 198-201. </pages> <address> Hillsdale, NJ: </address> <publisher> Lawrence Erlbaum 1990. </publisher>
Reference: [13] <author> Koza, John R. and Keane, Martin A. </author> <title> Genetic breeding of nonlinear optimal control strategies for broom balancing. </title> <booktitle> In Proceedings of the Ninth International Conference on Analysis and Optimization of Systems. </booktitle> <address> Antibes,France, </address> <month> June, </month> <year> 1990. </year> <pages> Pages 47-56. </pages> <address> Berlin: </address> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference: [14] <author> Koza, John R. </author> <title> Evolving a computer program to generate random numbers using the genetic programming paradigm. </title> <editor> In Belew, Rik and Booker, </editor> <booktitle> Lashon (editors) Proceedings of the Fourth International Conference on Genetic Algorithms. </booktitle> <address> San Mateo, CA: </address> <publisher> Morgan Kaufmann Publishers Inc. </publisher> <year> 1991. </year>
Reference-contexts: navigating an artificial ant along a trail and developing a robotic plan for stacking blocks in a desired order), automatic programming (e.g., finding a general formula for solving pairs of linear equations for both unknowns and solving quadratic equations for complex roots), generation of maximal entropy sequences of random numbers <ref> [14] </ref>, finding minimax strategies for games (e.g., differential pursuer-evader games, discrete games in extensive form) by both evolution and coevolution, and simultaneous architectural design and training of neural networks [15].
Reference: [15] <author> Koza, John R., and Rice, James P. </author> <title> Genetic generation of both the weights and architecture for a neural network. </title> <booktitle> In Proceedings of International Joint Conference on Neural Networks, </booktitle> <address> Seattle, July 1991. Los Alamitos, CA: </address> <publisher> IEEE Press 1991. Volume II, </publisher> <pages> Pages 397-404. </pages>
Reference-contexts: of linear equations for both unknowns and solving quadratic equations for complex roots), generation of maximal entropy sequences of random numbers [14], finding minimax strategies for games (e.g., differential pursuer-evader games, discrete games in extensive form) by both evolution and coevolution, and simultaneous architectural design and training of neural networks <ref> [15] </ref>. A videotape visualization of the application of genetic programming to planning, emergent behavior, empirical discovery, inverse kinematics, and game playing can be found in the Artificial Life II Video Proceedings [16].
Reference: [16] <author> Koza, John R. and Rice, James P. </author> <title> A genetic approach to artificial intelligence. </title> <editor> In C. G. </editor> <booktitle> Langton Artificial Life II Video Proceedings. </booktitle> <publisher> Addison-Wesley 1991. </publisher>
Reference-contexts: A videotape visualization of the application of genetic programming to planning, emergent behavior, empirical discovery, inverse kinematics, and game playing can be found in the Artificial Life II Video Proceedings <ref> [16] </ref>. Objects used in Genetic Programming In genetic programming, the individuals in the population are compositions of functions and terminals appropriate to the particular problem domain. The set of functions used typically includes arithmetic operations, mathematical functions, conditional logical operations, and domain-specific functions.
References-found: 16

