URL: http://wwwis.win.tue.nl/~wsinwa/tools.ps
Refering-URL: http://wwwis.win.tue.nl/~wsinwa/publications.html
Root-URL: http://www.win.tue.nl
Email: e-mail: wsinwa@win.tue.nl  
Title: Using Interval Timed Coloured Petri Nets to Calculate Performance Bounds  
Author: W.M.P. van der Aalst 
Address: P.O. Box 513, 5600 MB Eindhoven, The Netherlands  
Affiliation: Eindhoven University of Technology Dept. of Mathematics and Computing Science  
Abstract: Nearly all existing techniques in the field of performance evaluation provide estimates (i.e. average and variation) for performance measures like: response times, throughput times, occupations rates, etc. However, when evaluating the design of a time-critical system, we are particularly interested in accurate bounds for these performance measures. We are concerned with the maximal response time of a controller in a nuclear power plant, the average response time of this controller is of less importance. This is the reason we propose an alternative approach based on the Interval Timed Coloured Petri Net (ITCPN) model. The ITCPN model allows for the modelling of the dynamic behaviour of large and complex systems, without losing the possibility of formal analysis. In addition to the existing analysis techniques for coloured Petri nets, we provide a new analysis method to analyse the temporal behaviour of the net. This method can be used to calculate bounds for all kinds of performance measures. In this paper we will show that this approach can be used to analyse complex time-critical systems. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> W.M.P. van der Aalst. </author> <title> Modelling and Analysis of Complex Logistic Systems. </title> <editor> In H.J. Pels and J.C. Wortmann, editors, </editor> <title> Integration in Production Management Systems, </title> <journal> volume B-7 of IFIP Transactions, </journal> <pages> pages 277-292. </pages> <publisher> Elsevier Science Publishers, </publisher> <address> Amsterdam, </address> <year> 1992. </year>
Reference-contexts: ae p in p busy p out p free hhp free ; hP 1; J 1ii; 3i ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae w - ' $ oe <ref> [1; 3] </ref> [0; 0] in figure 1: dom (F (t 1 )) = fhp in ; ji + hp free ; pi j j 2 J and p 2 Pg. <p> For j 2 J and p 2 P, we have: 1 F (t 1 )(hp in ; ji + hp free ; pi) = hhp busy ; hp; jii; <ref> [1; 3] </ref>i. The domain of F (t 1 ) describes the condition on which transition t 1 is enabled, i.e. t 1 is enabled if there is (at least) one token in place p in and one token in p free . <p> These deadlines have to be met for a safe operation of the system. An acceptable behaviour of the system depends not only on the logical correctness 1 Note that hp in ; ji + hp free ; pi and hhp busy ; hp; jii; <ref> [1; 3] </ref>i are multi-sets, see appendix A.1. of the results, but also on the time at which the results are produced. Therefore, we are interested in techniques to verify these deadlines and to calculate upper and lower bounds for all sorts of performance criteria. <p> Consider an enabled transition. In general, there is an infinite number of allowed firing delays, all resulting in a different state. If a transition produces a token for a place with a delay x specified by the delay interval <ref> [1; 3] </ref>, then every delay x between 1 and 3 is allowed. Moreover, each x leads to a different state. Since one firing already results in a `fan-out' of reachable states, the reachability graph cannot be used to analyse the system. <p> A state class s is also a multi-set of tuples hhp; vi; [y; z]i. Each tuple also corresponds OEAE Oo OEAE Oo OEAE Oo OEAE Oo @ @ @ @R @ @R [0; 3] * p2 [4; 6] p4 [0; 2] <ref> [1; 3] </ref> to one token in the net. However, instead of a timestamp each token has a time-interval. <p> In the second case the time interval of the token in p4 is [5; 8]. Using intervals rather than timestamps prevented us from having to consider all possible delays in the intervals [0; 2] and <ref> [1; 3] </ref>, i.e. it suffices to consider upper and lower bounds. In Van der Aalst [2, 3] a formal definition of these alternative semantics are given. <p> Moreover, we are able to answer questions which cannot be answered by simulation or the method proposed by Berthomieu et al. [6]. We have modelled and analysed many examples using the approach presented in this paper, see Van der Aalst <ref> [1, 2] </ref> and Odijk [19]. To facilitate the analysis of real-life systems we have developed an analysis tool, called IAT ([2]). This tool also supports more traditional kinds of analysis such as the generation of place and transition invariants.
Reference: 2. <author> W.M.P. van der Aalst. </author> <title> Timed coloured Petri nets and their application to logistics. </title> <type> PhD thesis, </type> <institution> Eindhoven University of Technology, Eindhoven, </institution> <year> 1992. </year>
Reference-contexts: The formal definition is given in appendix A. For the formal semantics of the ITCPN model the reader is referred to <ref> [2] </ref> or [3]. We use an example to introduce the notion of interval timed coloured Petri nets. Figure 1 shows an ITCPN composed of four places (p in ; p busy ; p free and p out ) and two transitions (t 1 and t 2 ). <p> Therefore, we are interested in techniques to verify these deadlines and to calculate upper and lower bounds for all sorts of performance criteria. This is the reason we developed the Modified Transition System Reduction Technique (MTSRT), which was presented in <ref> [2] </ref> and [3]. Before giving a short description of this analysis method, we provide a brief survey of existing techniques which can be used to analyse the dynamic behaviour of timed and coloured Petri nets. The techniques may be subdivided into three classes: simulation, reachability analysis and Markovian analysis. <p> A state class s is also a multi-set of tuples hhp; vi; [y; z]i. Each tuple also corresponds OEAE Oo OEAE Oo OEAE Oo OEAE Oo @ @ @ @R @ @R [0; 3] * p2 [4; 6] p4 <ref> [0; 2] </ref> [1; 3] to one token in the net. However, instead of a timestamp each token has a time-interval. <p> We will use an example to clarify the modified firing rule. Consider the net shown in figure 4. Initially, there is one token in place p1 with an interval of [0; 3], there is one token in p2 with an interval of <ref> [2; 5] </ref> and there is one token in p3 with an interval of [4; 6]. <p> The transition with the smallest enabling time will fire first. Since the intervals associated to the enabling times of the transitions (i.e. <ref> [2; 5] </ref> and [4; 6]) overlap it is not determined whether t1 or t2 fires first. However, the upper bound of the transition time (M T max (s)) is equal to 5, i.e. a transition will fire before or at time 5. <p> In both cases a token is produced for place p4. There are two possible terminal states: one with a token in p3 and p4 and one with a token in p1 and p4. In the first case the time interval of the token in p4 is <ref> [2; 7] </ref>, because the delay interval of a token produced by t1 is [0; 2]. In the second case the time interval of the token in p4 is [5; 8]. <p> There are two possible terminal states: one with a token in p3 and p4 and one with a token in p1 and p4. In the first case the time interval of the token in p4 is [2; 7], because the delay interval of a token produced by t1 is <ref> [0; 2] </ref>. In the second case the time interval of the token in p4 is [5; 8]. Using intervals rather than timestamps prevented us from having to consider all possible delays in the intervals [0; 2] and [1; 3], i.e. it suffices to consider upper and lower bounds. <p> in p4 is [2; 7], because the delay interval of a token produced by t1 is <ref> [0; 2] </ref>. In the second case the time interval of the token in p4 is [5; 8]. Using intervals rather than timestamps prevented us from having to consider all possible delays in the intervals [0; 2] and [1; 3], i.e. it suffices to consider upper and lower bounds. In Van der Aalst [2, 3] a formal definition of these alternative semantics are given. <p> Using intervals rather than timestamps prevented us from having to consider all possible delays in the intervals [0; 2] and [1; 3], i.e. it suffices to consider upper and lower bounds. In Van der Aalst <ref> [2, 3] </ref> a formal definition of these alternative semantics are given. If we use these semantics to construct a reachability graph, we obtain the reduced reach-ability graph which is finite for any practical application (see [2]). The alternative semantics have been introduced for computational reasons only. <p> In Van der Aalst [2, 3] a formal definition of these alternative semantics are given. If we use these semantics to construct a reachability graph, we obtain the reduced reach-ability graph which is finite for any practical application (see <ref> [2] </ref>). The alternative semantics have been introduced for computational reasons only. However, calculating the reduced reachability graph only makes sense if the reduced reachability graph can be used to deduce properties of the original reachability graph which represents the behaviour of the ITCPN. <p> Fortunately, the alternative semantics are `sound' which means that any state reachable in the original reachability graph is also reachable in the reduced reachability graph. A formal proof is given in <ref> [2] </ref> and [3]. In these references it is also shown that the opposite is not true, i.e. the alternative semantics are not `complete'. Despite the non-completeness, the soundness property allows us to answer various questions. <p> Moreover, we are able to answer questions which cannot be answered by simulation or the method proposed by Berthomieu et al. [6]. We have modelled and analysed many examples using the approach presented in this paper, see Van der Aalst <ref> [1, 2] </ref> and Odijk [19]. To facilitate the analysis of real-life systems we have developed an analysis tool, called IAT ([2]). This tool also supports more traditional kinds of analysis such as the generation of place and transition invariants. <p> This tool also supports more traditional kinds of analysis such as the generation of place and transition invariants. IAT is part of the software package ExSpect (see ASPT [5], Van Hee et al. [9] and Van der Aalst <ref> [2, 4] </ref>). 4 Case A: A Simple Computer System In the remainder, we discuss two applications of the approach just presented. This section describes a model of a simple computer system. This system is composed of multiple CPU's and a number of disks. <p> Note that this figure does not contain information on colour sets and transition functions. In this paper we will not a supply a detailed description of the net. Instead we will give a sketch of each of the subsystems. (A more detailed description of this case is given in <ref> [2] </ref>). The divider works as follows: it takes raw materials from place p1 and distributes them over the two production units. Moreover, the divider differentiates between the four kinds of raw material.
Reference: 3. <author> W.M.P. van der Aalst. </author> <title> Interval Timed Coloured Petri Nets and their Analysis. </title> <editor> In M. Ajmone Marsan, editor, </editor> <booktitle> Application and Theory of Petri Nets 1993, volume 691 of Lecture Notes in Computer Science, </booktitle> <pages> pages 453-472. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1993. </year>
Reference-contexts: The formal definition is given in appendix A. For the formal semantics of the ITCPN model the reader is referred to [2] or <ref> [3] </ref>. We use an example to introduce the notion of interval timed coloured Petri nets. Figure 1 shows an ITCPN composed of four places (p in ; p busy ; p free and p out ) and two transitions (t 1 and t 2 ). <p> ae p in p busy p out p free hhp free ; hP 1; J 1ii; 3i ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae w - ' $ oe <ref> [1; 3] </ref> [0; 0] in figure 1: dom (F (t 1 )) = fhp in ; ji + hp free ; pi j j 2 J and p 2 Pg. <p> For j 2 J and p 2 P, we have: 1 F (t 1 )(hp in ; ji + hp free ; pi) = hhp busy ; hp; jii; <ref> [1; 3] </ref>i. The domain of F (t 1 ) describes the condition on which transition t 1 is enabled, i.e. t 1 is enabled if there is (at least) one token in place p in and one token in p free . <p> These deadlines have to be met for a safe operation of the system. An acceptable behaviour of the system depends not only on the logical correctness 1 Note that hp in ; ji + hp free ; pi and hhp busy ; hp; jii; <ref> [1; 3] </ref>i are multi-sets, see appendix A.1. of the results, but also on the time at which the results are produced. Therefore, we are interested in techniques to verify these deadlines and to calculate upper and lower bounds for all sorts of performance criteria. <p> Therefore, we are interested in techniques to verify these deadlines and to calculate upper and lower bounds for all sorts of performance criteria. This is the reason we developed the Modified Transition System Reduction Technique (MTSRT), which was presented in [2] and <ref> [3] </ref>. Before giving a short description of this analysis method, we provide a brief survey of existing techniques which can be used to analyse the dynamic behaviour of timed and coloured Petri nets. The techniques may be subdivided into three classes: simulation, reachability analysis and Markovian analysis. <p> Consider an enabled transition. In general, there is an infinite number of allowed firing delays, all resulting in a different state. If a transition produces a token for a place with a delay x specified by the delay interval <ref> [1; 3] </ref>, then every delay x between 1 and 3 is allowed. Moreover, each x leads to a different state. Since one firing already results in a `fan-out' of reachable states, the reachability graph cannot be used to analyse the system. <p> A state class s is also a multi-set of tuples hhp; vi; [y; z]i. Each tuple also corresponds OEAE Oo OEAE Oo OEAE Oo OEAE Oo @ @ @ @R @ @R <ref> [0; 3] </ref> * p2 [4; 6] p4 [0; 2] [1; 3] to one token in the net. However, instead of a timestamp each token has a time-interval. <p> A state class s is also a multi-set of tuples hhp; vi; [y; z]i. Each tuple also corresponds OEAE Oo OEAE Oo OEAE Oo OEAE Oo @ @ @ @R @ @R [0; 3] * p2 [4; 6] p4 [0; 2] <ref> [1; 3] </ref> to one token in the net. However, instead of a timestamp each token has a time-interval. <p> We will use an example to clarify the modified firing rule. Consider the net shown in figure 4. Initially, there is one token in place p1 with an interval of <ref> [0; 3] </ref>, there is one token in p2 with an interval of [2; 5] and there is one token in p3 with an interval of [4; 6]. <p> In the second case the time interval of the token in p4 is [5; 8]. Using intervals rather than timestamps prevented us from having to consider all possible delays in the intervals [0; 2] and <ref> [1; 3] </ref>, i.e. it suffices to consider upper and lower bounds. In Van der Aalst [2, 3] a formal definition of these alternative semantics are given. <p> Using intervals rather than timestamps prevented us from having to consider all possible delays in the intervals [0; 2] and [1; 3], i.e. it suffices to consider upper and lower bounds. In Van der Aalst <ref> [2, 3] </ref> a formal definition of these alternative semantics are given. If we use these semantics to construct a reachability graph, we obtain the reduced reach-ability graph which is finite for any practical application (see [2]). The alternative semantics have been introduced for computational reasons only. <p> Fortunately, the alternative semantics are `sound' which means that any state reachable in the original reachability graph is also reachable in the reduced reachability graph. A formal proof is given in [2] and <ref> [3] </ref>. In these references it is also shown that the opposite is not true, i.e. the alternative semantics are not `complete'. Despite the non-completeness, the soundness property allows us to answer various questions.
Reference: 4. <author> W.M.P. van der Aalst and A.W. Waltmans. </author> <title> Modelling logistic systems with EXSPECT. </title> <editor> In H.G. Sol and K.M. van Hee, editors, </editor> <booktitle> Dynamic Modelling of Information Systems, </booktitle> <pages> pages 269-288. </pages> <publisher> Elsevier Science Publishers, </publisher> <address> Amsterdam, </address> <year> 1991. </year>
Reference-contexts: A state class s is also a multi-set of tuples hhp; vi; [y; z]i. Each tuple also corresponds OEAE Oo OEAE Oo OEAE Oo OEAE Oo @ @ @ @R @ @R [0; 3] * p2 <ref> [4; 6] </ref> p4 [0; 2] [1; 3] to one token in the net. However, instead of a timestamp each token has a time-interval. <p> Consider the net shown in figure 4. Initially, there is one token in place p1 with an interval of [0; 3], there is one token in p2 with an interval of [2; 5] and there is one token in p3 with an interval of <ref> [4; 6] </ref>. Note that this state class s corresponds to an infinite number of states in the original reachability graph, for instance the state with a token in p1 with timestamp 2:4 and a token in p2 with timestamp and a token in p3 with timestamp 31=6. <p> The transition with the smallest enabling time will fire first. Since the intervals associated to the enabling times of the transitions (i.e. [2; 5] and <ref> [4; 6] </ref>) overlap it is not determined whether t1 or t2 fires first. However, the upper bound of the transition time (M T max (s)) is equal to 5, i.e. a transition will fire before or at time 5. <p> This tool also supports more traditional kinds of analysis such as the generation of place and transition invariants. IAT is part of the software package ExSpect (see ASPT [5], Van Hee et al. [9] and Van der Aalst <ref> [2, 4] </ref>). 4 Case A: A Simple Computer System In the remainder, we discuss two applications of the approach just presented. This section describes a model of a simple computer system. This system is composed of multiple CPU's and a number of disks.
Reference: 5. <author> ASPT. </author> <title> ExSpect 4.0 User Manual. </title> <institution> Eindhoven University of Technology, </institution> <year> 1993. </year>
Reference-contexts: We will use an example to clarify the modified firing rule. Consider the net shown in figure 4. Initially, there is one token in place p1 with an interval of [0; 3], there is one token in p2 with an interval of <ref> [2; 5] </ref> and there is one token in p3 with an interval of [4; 6]. <p> The transition with the smallest enabling time will fire first. Since the intervals associated to the enabling times of the transitions (i.e. <ref> [2; 5] </ref> and [4; 6]) overlap it is not determined whether t1 or t2 fires first. However, the upper bound of the transition time (M T max (s)) is equal to 5, i.e. a transition will fire before or at time 5. <p> In the first case the time interval of the token in p4 is [2; 7], because the delay interval of a token produced by t1 is [0; 2]. In the second case the time interval of the token in p4 is <ref> [5; 8] </ref>. Using intervals rather than timestamps prevented us from having to consider all possible delays in the intervals [0; 2] and [1; 3], i.e. it suffices to consider upper and lower bounds. In Van der Aalst [2, 3] a formal definition of these alternative semantics are given. <p> To facilitate the analysis of real-life systems we have developed an analysis tool, called IAT ([2]). This tool also supports more traditional kinds of analysis such as the generation of place and transition invariants. IAT is part of the software package ExSpect (see ASPT <ref> [5] </ref>, Van Hee et al. [9] and Van der Aalst [2, 4]). 4 Case A: A Simple Computer System In the remainder, we discuss two applications of the approach just presented. This section describes a model of a simple computer system.
Reference: 6. <author> B. Berthomieu and M. Diaz. </author> <title> Modelling and verification of time dependent systems using Time Petri Nets. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(3) </volume> <pages> 259-273, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: A state class s is also a multi-set of tuples hhp; vi; [y; z]i. Each tuple also corresponds OEAE Oo OEAE Oo OEAE Oo OEAE Oo @ @ @ @R @ @R [0; 3] * p2 <ref> [4; 6] </ref> p4 [0; 2] [1; 3] to one token in the net. However, instead of a timestamp each token has a time-interval. <p> Consider the net shown in figure 4. Initially, there is one token in place p1 with an interval of [0; 3], there is one token in p2 with an interval of [2; 5] and there is one token in p3 with an interval of <ref> [4; 6] </ref>. Note that this state class s corresponds to an infinite number of states in the original reachability graph, for instance the state with a token in p1 with timestamp 2:4 and a token in p2 with timestamp and a token in p3 with timestamp 31=6. <p> The transition with the smallest enabling time will fire first. Since the intervals associated to the enabling times of the transitions (i.e. [2; 5] and <ref> [4; 6] </ref>) overlap it is not determined whether t1 or t2 fires first. However, the upper bound of the transition time (M T max (s)) is equal to 5, i.e. a transition will fire before or at time 5. <p> However, experimentation shows that the calculated bounds are often of great value and far from trivial. Moreover, we are able to answer questions which cannot be answered by simulation or the method proposed by Berthomieu et al. <ref> [6] </ref>. We have modelled and analysed many examples using the approach presented in this paper, see Van der Aalst [1, 2] and Odijk [19]. To facilitate the analysis of real-life systems we have developed an analysis tool, called IAT ([2]).
Reference: 7. <author> G. Florin and S. Natkin. </author> <title> Evaluation based upon Stochastic Petri Nets of the Maximum Throughput of a Full Duplex Protocol. </title> <editor> In C. Girault and W. Reisig, editors, </editor> <title> Application and theory of Petri nets: </title> <booktitle> selected papers from the first and the second European workshop, volume 52 of Informatik Fachberichte, </booktitle> <pages> pages 280-288, </pages> <address> Berlin, 1982. </address> <publisher> Springer-Verlag, </publisher> <address> New York. </address>
Reference-contexts: In both cases a token is produced for place p4. There are two possible terminal states: one with a token in p3 and p4 and one with a token in p1 and p4. In the first case the time interval of the token in p4 is <ref> [2; 7] </ref>, because the delay interval of a token produced by t1 is [0; 2]. In the second case the time interval of the token in p4 is [5; 8].
Reference: 8. <author> K.M. van Hee. </author> <title> Information System Engineering: a Formal Approach. </title> <institution> Cambridge University Press, </institution> <note> (to appear) 1994. </note>
Reference-contexts: In the first case the time interval of the token in p4 is [2; 7], because the delay interval of a token produced by t1 is [0; 2]. In the second case the time interval of the token in p4 is <ref> [5; 8] </ref>. Using intervals rather than timestamps prevented us from having to consider all possible delays in the intervals [0; 2] and [1; 3], i.e. it suffices to consider upper and lower bounds. In Van der Aalst [2, 3] a formal definition of these alternative semantics are given.
Reference: 9. <author> K.M. van Hee, L.J. Somers, and M. Voorhoeve. </author> <title> Executable specifications for distributed information systems. </title> <editor> In E.D. Falkenberg and P. Lindgreen, editors, </editor> <booktitle> Proceedings of the IFIP TC 8 / WG 8.1 Working Conference on Information System Concepts: An In-depth Analysis, </booktitle> <pages> pages 139-156, </pages> <address> Namur, Belgium, 1989. </address> <publisher> Elsevier Science Publishers, Amsterdam. </publisher>
Reference-contexts: To facilitate the analysis of real-life systems we have developed an analysis tool, called IAT ([2]). This tool also supports more traditional kinds of analysis such as the generation of place and transition invariants. IAT is part of the software package ExSpect (see ASPT [5], Van Hee et al. <ref> [9] </ref> and Van der Aalst [2, 4]). 4 Case A: A Simple Computer System In the remainder, we discuss two applications of the approach just presented. This section describes a model of a simple computer system. This system is composed of multiple CPU's and a number of disks.
Reference: 10. <author> P. Hubner, A.M. Jensen, L.O. Jepsen, and K. Jensen. </author> <title> Reachability trees for high level Petri nets. </title> <journal> Theoretical Computer Science, </journal> <volume> 45 </volume> <pages> 261-292, </pages> <year> 1986. </year>
Reference-contexts: If we want to inspect the reachability graph by means of a computer, we have to solve this problem. This is the reason several authors developed reduction techniques (Hubner et al. <ref> [10] </ref> and Valmari [22]). Unfortunately, it is not known how to apply these techniques to timed coloured Petri nets. For timed coloured Petri nets with certain types of stochastic delays it is possible to translate the net into a continuous time Markov chain.
Reference: 11. <author> K. Jensen. </author> <title> Coloured Petri Nets. </title> <editor> In W. Brauer, W. Reisig, and G. Rozenberg, editors, </editor> <title> Advances in Petri Nets 1986 Part I: Petri Nets, central models and their properties, </title> <booktitle> volume 254 of Lecture Notes in Computer Science, </booktitle> <pages> pages 248-299. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1987. </year>
Reference-contexts: Modern graphical screens are fast and have a high resolution. Therefore, it is possible to visualize a simulation graphically (i.e. animation). Reachability analysis is a technique which constructs a reachability graph, sometimes referred to as reachability tree or occurrence graph (cf. Jensen <ref> [11, 13] </ref>). Such a reachability graph contains a node for each possible state and an arc for each possible state change. Reachability analysis is a very powerful method in the sense that it can be used to prove all kinds of properties. <p> For more information about the calculation of invariants in a coloured Petri net, see Jensen <ref> [11, 13] </ref>. The Modified Transition System Reduction Technique is a technique which generates the reduced reachability graph to answer all kinds of questions. If we try to construct the reachability graph of an ITCPN in a straightforward manner we get into problems.
Reference: 12. <author> K. Jensen. </author> <title> Coloured Petri Nets: A High Level Language for System Design and Analysis. </title> <editor> In G. Rozenberg, editor, </editor> <booktitle> Advances in Petri Nets 1990, volume 483 of Lecture Notes in Computer Science, </booktitle> <pages> pages 342-416. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1990. </year>
Reference: 13. <author> K. Jensen. </author> <title> Coloured Petri Nets. Basic concepts, analysis methods and practical use. </title> <booktitle> EATCS monographs on Theoretical Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: Modern graphical screens are fast and have a high resolution. Therefore, it is possible to visualize a simulation graphically (i.e. animation). Reachability analysis is a technique which constructs a reachability graph, sometimes referred to as reachability tree or occurrence graph (cf. Jensen <ref> [11, 13] </ref>). Such a reachability graph contains a node for each possible state and an arc for each possible state change. Reachability analysis is a very powerful method in the sense that it can be used to prove all kinds of properties. <p> For more information about the calculation of invariants in a coloured Petri net, see Jensen <ref> [11, 13] </ref>. The Modified Transition System Reduction Technique is a technique which generates the reduced reachability graph to answer all kinds of questions. If we try to construct the reachability graph of an ITCPN in a straightforward manner we get into problems.
Reference: 14. <author> K. Jensen and G. Rozenberg, </author> <title> editors. High-level Petri Nets: Theory and Application. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1991. </year>
Reference: 15. <author> M. Ajmone Marsan, G. Balbo, A. Bobbio, G. Chiola, G. Conte, and A. Cumani. </author> <title> On Petri Nets with Stochastic Timing. </title> <booktitle> In Proceedings of the International Workshop on Timed Petri Nets, </booktitle> <pages> pages 80-87, </pages> <address> Torino, 1985. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Several authors attempted to increase the modelling power by allowing other kinds of delays, for example mixed deterministic and negative exponential distributed delays, and phase-distributed delays (see Ajmone Marsan et al. <ref> [15] </ref>). Nearly all stochastic Petri net models (and related analysis techniques) do not allow for coloured tokens, because the increased modelling power is offset by computational difficulties. This is the reason stochastic high-level Petri nets are often used in a simulation context only.
Reference: 16. <author> M. Ajmone Marsan, G. Balbo, and G. Conte. </author> <title> A Class of Generalised Stochastic Petri Nets for the Performance Evaluation of Multiprocessor Systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(2) </volume> <pages> 93-122, </pages> <month> May </month> <year> 1984. </year>
Reference: 17. <author> P. Merlin. </author> <title> A Study of the Recoverability of Computer Systems. </title> <type> PhD thesis, </type> <institution> University of California, Irvine, California, </institution> <year> 1974. </year>
Reference: 18. <author> S. Morasca, M. Pezze, and M. Trubian. </author> <title> Timed High-Level Nets. </title> <journal> The Journal of Real-Time Systems, </journal> <volume> 3 </volume> <pages> 165-189, </pages> <year> 1991. </year>
Reference: 19. <author> M.A. Odijk. </author> <title> ITPN analysis of ExSpect specifications with respect to production logistics. </title> <type> Master's thesis, </type> <institution> Eindhoven University of Technology, Eindhoven, </institution> <year> 1991. </year>
Reference-contexts: Moreover, we are able to answer questions which cannot be answered by simulation or the method proposed by Berthomieu et al. [6]. We have modelled and analysed many examples using the approach presented in this paper, see Van der Aalst [1, 2] and Odijk <ref> [19] </ref>. To facilitate the analysis of real-life systems we have developed an analysis tool, called IAT ([2]). This tool also supports more traditional kinds of analysis such as the generation of place and transition invariants.
Reference: 20. <author> C. Ramchandani. </author> <title> Performance Evaluation of Asynchronous Concurrent Systems by Timed Petri Nets. </title> <type> PhD thesis, </type> <institution> Massachusetts Institute of Technology, Cam-bridge, </institution> <year> 1973. </year>
Reference: 21. <author> W. Reisig. </author> <title> Petri nets: an introduction. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, </address> <year> 1985. </year>
Reference: 22. <author> A. Valmari. </author> <title> Stubborn sets for reduced state space generation. </title> <booktitle> In Proceedings of the 10th International Conference on Applications and Theory of Petri Nets, </booktitle> <address> Bonn, </address> <month> June </month> <year> 1989. </year>
Reference-contexts: If we want to inspect the reachability graph by means of a computer, we have to solve this problem. This is the reason several authors developed reduction techniques (Hubner et al. [10] and Valmari <ref> [22] </ref>). Unfortunately, it is not known how to apply these techniques to timed coloured Petri nets. For timed coloured Petri nets with certain types of stochastic delays it is possible to translate the net into a continuous time Markov chain.
References-found: 22

