URL: http://www.cs.ucsb.edu/~schauser/papers/97-javelin-large.ps
Refering-URL: http://www.cs.ucsb.edu/~schauser/papers/
Root-URL: http://www.cs.ucsb.edu
Email: danielwg@cs.ucsb.edu  
Title: Javelin: Internet-Based Parallel Computing Using Java  
Author: Bernd O. Christiansen, Peter Cappello, Mihai F. Ionescu Michael O. Neary, Klaus E. Schauser, and Daniel Wu fbernd, cappello, mionescu, neary, schauser, 
Keyword: Distributed Computing, High Performance Computing, Java, Internet, World Wide Web.  
Address: Santa Barbara, CA 93106  
Affiliation: Department of Computer Science University of California, Santa Barbara  
Abstract: Java offers the basic infrastructure needed to integrate computers connected to the Internet into a seamless distributed computational resource: an infrastructure for running coarse-grained parallel applications on numerous, anonymous machines. First, we sketch such a resource's essential technical properties. Then, we present Javelin, an infrastructure for global computing. The system is based on Internet software that is interoperable, increasingly secure, and ubiquitous: Java-enabled Web technology. Ease of participation is seen as a key property for such a resource to realize the vision of a multiprocessing environment comprising thousands of computers. Javelin's architecture and implementation require participants to have access to only a Java-enabled Web browser. The security constraints implied by this, the resulting architecture, and the current implementation are presented. The Javelin architecture is intended to be a substrate on which various programming models may be implemented. Different computation servers, each corresponding to a different programming model, are supported by Javelin's architecture. Several are presented briefly. Experimental results are given in the form of micro-benchmarks, a Mersenne Prime application, and a ray-tracing application that run on a heterogeneous network of several parallel machines, workstations, and PCs. 
Abstract-found: 1
Intro-found: 1
Reference: [ACP95] <author> T. E. Anderson, D. E. Culler, and D. Patterson. </author> <title> A case for NOW (Networks of Workstations). </title> <journal> IEEE Micro, </journal> <volume> 15(1), </volume> <month> February </month> <year> 1995. </year>
Reference-contexts: This vision is as old as the Internet. Some of the more recent network computing approaches, include CONDOR [LLM88], Linda [WL88], PVM [Sun90], Piranha [GK92], MPI 15 2 4253 1. [MPI94], Network of Workstations (NOW) <ref> [ACP95] </ref>, Legion [GWtLt97], GLOBUS [FK97], and WebOS [VEY + 97]. The goal of the Legion research project is to provide secure shared object and name spaces, application-controlled fault-tolerance, improved response time, and greater throughput. Multiple language support is another of its goals.
Reference: [AISS97] <author> A. Alexandrov, M. Ibel, K. E. Schauser, and C. Scheiman. SuperWeb: </author> <title> Research Issues in Java-Based Global Computing. </title> <journal> Concurrency: Practice and Experience, </journal> <month> June </month> <year> 1997. </year>
Reference-contexts: We therefore expect tens of thousands of hosts to participate. 1.3 Scope of our Work The purpose of this work is to provide a simple yet efficient infrastructure that supports as many different programming models as possible without compromising portability and flexibility. As discussed in <ref> [AISS97] </ref>, there are several important issues such an infrastructure must provide to be successful. In this paper, we do not attempt to study these issues, but instead focus on a particular design, discussing the constraints imposed by standard, Java-enabled web browsers. Future versions however will take these aspects into account.
Reference: [BBB96] <author> J. E. Baldeschwieler, R. D. Blumofe, and E. A. Brewer. </author> <title> ATLAS: An Infrastructure for Global Computing. </title> <booktitle> In Proceedings of the Seventh ACM SIGOPS European Workshop on System Support for Worldwide Applications, </booktitle> <year> 1996. </year>
Reference-contexts: Java helps to address these issues. The flexibility of Java for Internet computing has been observed by several other researchers. A new, Java-based, generation of projects is aimed at establishing a software infrastructure on which a global computing vision can be implemented. These projects include ATLAS <ref> [BBB96] </ref>, Charlotte [BKKW96], ParaWeb [BSST96], and Popcorn [CLNR97]. All these projects are designed explicitly to run parallel applications and provide a specific programming model. Other recent systems such as JPVM [Fer] and Java-MPI [Tay] use Java to overcome heterogeneity, but are not intended to execute on anonymous machines.
Reference: [BKKW96] <author> A. Baratloo, M. Karaul, Z. Kedem, and P. Wyckoff. </author> <title> Charlotte: Metacomputing on the Web. </title> <booktitle> In Proceedings of the 9th Conference on Parallel and Distributed Computing Systems, </booktitle> <year> 1996. </year>
Reference-contexts: Java helps to address these issues. The flexibility of Java for Internet computing has been observed by several other researchers. A new, Java-based, generation of projects is aimed at establishing a software infrastructure on which a global computing vision can be implemented. These projects include ATLAS [BBB96], Charlotte <ref> [BKKW96] </ref>, ParaWeb [BSST96], and Popcorn [CLNR97]. All these projects are designed explicitly to run parallel applications and provide a specific programming model. Other recent systems such as JPVM [Fer] and Java-MPI [Tay] use Java to overcome heterogeneity, but are not intended to execute on anonymous machines.
Reference: [BL94] <author> R. D. Blumofe and C. E. Leierson. </author> <title> Scheduling Multithreaded Computations by Work Stealing. </title> <booktitle> In 35th Annual Symposium on Foundations of Computer Science (FOCS), </booktitle> <address> Santa Fe, New Mexico, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: The I WANT WORK and HERE IS WORK messages are asynchronous. Currently, a prospective host is selected randomly from a local table that is updated continuously (similar to Cilk <ref> [BL94] </ref>). Figure 4 illustrates the implemented scheme. Each processor keeps a local table of hosts which it believes have work. Initially, this table contains the client only. In Figure 4 (a), host A issues a request for work to the client, because it is not aware of other hosts.
Reference: [Blu95] <author> R. D. Blumofe. </author> <title> Executing Multithreaded Programs Efficiently. </title> <type> PhD thesis, </type> <institution> Department of Electrical Engineering and Computer Science, Massachusetts Institute of Technology, </institution> <month> September </month> <year> 1995. </year>
Reference-contexts: ATLAS provides a global computing model, based on Java and on the Cilk programming model <ref> [Blu95] </ref>, that is best suited to tree-based computations. ATLAS ensures scalability using a hierarchy of managers. The current implementation uses native libraries, which may raise some portability problems. Charlotte supports distributed shared memory, and uses a fork-join model for parallel programming.
Reference: [BSST96] <author> T. Brecht, H. Sandhu, M. Shan, and J. Talbot. ParaWeb: </author> <title> Towards World-Wide Supercomputing. </title> <booktitle> In Proceedings of the Seventh ACM SIGOPS European Workshop on System Support for Worldwide Applications, </booktitle> <year> 1996. </year>
Reference-contexts: The flexibility of Java for Internet computing has been observed by several other researchers. A new, Java-based, generation of projects is aimed at establishing a software infrastructure on which a global computing vision can be implemented. These projects include ATLAS [BBB96], Charlotte [BKKW96], ParaWeb <ref> [BSST96] </ref>, and Popcorn [CLNR97]. All these projects are designed explicitly to run parallel applications and provide a specific programming model. Other recent systems such as JPVM [Fer] and Java-MPI [Tay] use Java to overcome heterogeneity, but are not intended to execute on anonymous machines.
Reference: [CDL + 96] <author> K. M. Chandy, B. Dimitrov, H. Le, J. Mandleson, M. Richardson, A. Rifkin, P. A. G. Sivilotti, W. Tanaka, and L. Weisman. </author> <title> A World-Wide Distributed System Using Java and the Internet. </title> <booktitle> In Proceedings of the Fifth IEEE International Symposium on High Performance Distributed Computing, </booktitle> <address> Syracuse, NY, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: Other recent systems such as JPVM [Fer] and Java-MPI [Tay] use Java to overcome heterogeneity, but are not intended to execute on anonymous machines. The use of Java as a means for building distributed systems that execute throughout the Internet has also been recently proposed by Chandy et al. <ref> [CDL + 96] </ref> and Fox et al. [FF96], and studied in [Sar96]. ATLAS provides a global computing model, based on Java and on the Cilk programming model [Blu95], that is best suited to tree-based computations. ATLAS ensures scalability using a hierarchy of managers.
Reference: [CLNR97] <author> N. Camiel, S. London, N. Nisan, and O. Regev. </author> <title> The POPCORN Project: Distributed Computation over the Internet in Java. </title> <booktitle> In 6th International World Wide Web Conference, </booktitle> <month> April </month> <year> 1997. </year>
Reference-contexts: The flexibility of Java for Internet computing has been observed by several other researchers. A new, Java-based, generation of projects is aimed at establishing a software infrastructure on which a global computing vision can be implemented. These projects include ATLAS [BBB96], Charlotte [BKKW96], ParaWeb [BSST96], and Popcorn <ref> [CLNR97] </ref>. All these projects are designed explicitly to run parallel applications and provide a specific programming model. Other recent systems such as JPVM [Fer] and Java-MPI [Tay] use Java to overcome heterogeneity, but are not intended to execute on anonymous machines.
Reference: [Com96] <editor> Electric Communities. </editor> <booktitle> The E programming language, </booktitle> <year> 1996. </year> <note> http://www.communities.com/e/epl.html. </note>
Reference-contexts: Recently, a large variety of Java performance boosters have become available [FJa]. Most commercial compiler vendors offer JIT Java compilers, and new web browsers use JIT techniques, too. Languages worth considering, besides Java, include the E programming language <ref> [Com96] </ref> which is very similar, but offers a more flexible security framework than Java, and the Limbo programming language in the Inferno operating system [Inc], which allows, among other features, for easier and more efficient just-in-time compilation.
Reference: [Cor96] <author> Microsoft Corporation. </author> <title> DCOM The Distributed Component Object Model, </title> <year> 1996. </year>
Reference-contexts: However, promising standards for interoperability and portability between different combinations of software and hardware components emerged only a couple of years ago. Java Beans [Sun96d] is the latest in the world of Web-based distributed computation, but we also have widely used technologies such as CORBA [Gro95] or DCOM <ref> [Cor96] </ref>. We expect to see a shift in Web technology towards systems based on distributed objects and IIOP. 6 Conclusions We have designed and implemented Javelin, a prototype infrastructure for Internet-based parallel computing using Java.
Reference: [DES97] <author> DESCHALL. </author> <title> Internet-Linked Computers Challenge Data Encryption Standard. </title> <publisher> Press Release, </publisher> <year> 1997. </year>
Reference-contexts: Two weeks later, the 48-bit RSA code was cracked using 3,500 workstations spread across Europe [Las97b]. On June 17th, 1997, the 56-bit DES [RDS97] was cracked, using approximately 78,000 computers, as many as 14,000 per day. The press release <ref> [DES97] </ref> states: This project demonstrates the kind of supercomputing power that can be harnessed on the Internet using nothing but spare CPU time.
Reference: [DFW96] <author> D. Dean, E. W. Felten, and D. S. Wallach. </author> <title> Java Security: From HotJava to Netscape and Beyond. </title> <booktitle> In Proceedings of the 1996 IEEE Sumposium on Security and Privacy, </booktitle> <address> Oakland, CA, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: Security: Hosts must be able to trust the programs being executed on their machines. We therefore assume the usual Java security restrictions that apply to applets. For example, applets downloaded from the broker are permitted to communicate with the broker only. Additional Java security issues are discussed in <ref> [DFW96] </ref>. In this version, we do not provide levels of security beyond what Java-enabled Web browsers offer. Scheduling and Load Balancing: Since brokers cannot know the semantics of particular applications, the client ultimately is responsible for scheduling tasks.
Reference: [dM] <author> Frederico Inacio de Moraes. </author> <title> Java RayTrace. </title> <address> http://www.dcc.unicamp.br/ chico/raytracing/raytrace.html. </address>
Reference-contexts: The raytracer was written by Frederico Inacio de Moraes, Universidade Estadual de Campinas, <ref> [dM] </ref> and was first parallelized by Laurence Vanhelsuwe [Van97]. Raytracing is a method that creates photo-realistic synthetic images from a mathematical description of the scene to be generated. A scene is defined by the camera, light sources, and objects built from textured primitives such as cubes, spheres, and planes.
Reference: [Fer] <author> A. Ferrari. </author> <title> JPVM The Java Parallel Virtual Machine. </title> <address> http://www.cs.virginia.edu/ajf2j/jpvm.html. </address>
Reference-contexts: These projects include ATLAS [BBB96], Charlotte [BKKW96], ParaWeb [BSST96], and Popcorn [CLNR97]. All these projects are designed explicitly to run parallel applications and provide a specific programming model. Other recent systems such as JPVM <ref> [Fer] </ref> and Java-MPI [Tay] use Java to overcome heterogeneity, but are not intended to execute on anonymous machines.
Reference: [FF96] <author> G. Fox and W. Furmanski. </author> <title> Towards Web/Java based High Performance Distributed Computing An Evolving Virtual Machine. </title> <booktitle> In Proceedings of the Fifth IEEE International Symposium on High Performance Distributed Computing, </booktitle> <address> Syracuse, NY, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: The use of Java as a means for building distributed systems that execute throughout the Internet has also been recently proposed by Chandy et al. [CDL + 96] and Fox et al. <ref> [FF96] </ref>, and studied in [Sar96]. ATLAS provides a global computing model, based on Java and on the Cilk programming model [Blu95], that is best suited to tree-based computations. ATLAS ensures scalability using a hierarchy of managers. The current implementation uses native libraries, which may raise some portability problems.
Reference: [FJa] <institution> Free Java compilers. </institution> <note> http://webhackers.cygnus.com/webhackers/projects/java.html. </note>
Reference-contexts: Recently, a large variety of Java performance boosters have become available <ref> [FJa] </ref>. Most commercial compiler vendors offer JIT Java compilers, and new web browsers use JIT techniques, too.
Reference: [FK97] <author> I. Foster and C. Kesselman. Globus: </author> <title> A Metacomputing Infrastructure Toolkit. </title> <journal> International Journal of Supercomputer Applications, </journal> <year> 1997. </year>
Reference-contexts: This vision is as old as the Internet. Some of the more recent network computing approaches, include CONDOR [LLM88], Linda [WL88], PVM [Sun90], Piranha [GK92], MPI 15 2 4253 1. [MPI94], Network of Workstations (NOW) [ACP95], Legion [GWtLt97], GLOBUS <ref> [FK97] </ref>, and WebOS [VEY + 97]. The goal of the Legion research project is to provide secure shared object and name spaces, application-controlled fault-tolerance, improved response time, and greater throughput. Multiple language support is another of its goals.
Reference: [FT96] <author> I. Foster and S. Tuecke. </author> <title> Enabling Technologies for Web-Based Ubiquitous Supercomputing. </title> <booktitle> In Proceedings of the 5th IEEE Symposium on High Performance Distributed Computing, </booktitle> <year> 1996. </year>
Reference-contexts: It implements the classes JDatagramPacket, JDatagramSocket, and JnetAddress that mimic the native Java UDP classes in java.net, but may be implemented on top of an arbitrary communication mechanism such as TCP sockets, UDP sockets, RMI, NexusJava <ref> [FT96] </ref>, or CORBA. A JnetAddress is built from the IP addresses of the host and the server it is attached to. Figure 6 illustrates how a message is routed from the sending to the receiving applet.
Reference: [Gil] <author> D. Gillmor. </author> <title> Move over, supercomputers. </title> <address> San Jose Mercury News. http://www.sjmercury.com/business/compute/prime1122.htm. </address>
Reference-contexts: On a more global scale, Internet-based cluster computing involving thousands of computers, recently has demonstrated its usefulness for several important and news-breaking applications. In November 1996, a PC in France running for 88 hours found the 35th known Mersenne prime, the largest known prime discovered so far <ref> [Gil] </ref>. This computer was part of a world-wide distributed computing effort for finding large primes, involving a group of more than 700 workstations and PCs. Then, in January 1997, RSA announced a code breaking challenge.
Reference: [GK92] <author> D. Gelernter and D. Kaminsky. </author> <title> Supercomputing out of Recycled Garbage: Preliminary Experience with Piranha. </title> <booktitle> In Proceedings of the Sixth ACM International Conference on Supercomputing, </booktitle> <month> July </month> <year> 1992. </year>
Reference-contexts: This vision is as old as the Internet. Some of the more recent network computing approaches, include CONDOR [LLM88], Linda [WL88], PVM [Sun90], Piranha <ref> [GK92] </ref>, MPI 15 2 4253 1. [MPI94], Network of Workstations (NOW) [ACP95], Legion [GWtLt97], GLOBUS [FK97], and WebOS [VEY + 97]. The goal of the Legion research project is to provide secure shared object and name spaces, application-controlled fault-tolerance, improved response time, and greater throughput.
Reference: [Gro95] <author> Object Management Group. </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <note> 1995. 2.0 ed. </note>
Reference-contexts: However, promising standards for interoperability and portability between different combinations of software and hardware components emerged only a couple of years ago. Java Beans [Sun96d] is the latest in the world of Web-based distributed computation, but we also have widely used technologies such as CORBA <ref> [Gro95] </ref> or DCOM [Cor96]. We expect to see a shift in Web technology towards systems based on distributed objects and IIOP. 6 Conclusions We have designed and implemented Javelin, a prototype infrastructure for Internet-based parallel computing using Java.
Reference: [Gut] <author> Y. S. Gutfreund. </author> <note> The WWWinda Orchestrator. http://info.gte.com/ftp/circus/Orchestrator/. </note>
Reference-contexts: Market incentives are supported. Some of the mechanisms needed to implement the proposed framework may eventually be realized through recently released standard Java components such as Remote Method Invocation (RMI) [Sun96b] and Object Serialization [Sun96a], or already have been provided by other research groups (for example [SC96], [Ros] and <ref> [Gut] </ref>). Recently, a large variety of Java performance boosters have become available [FJa]. Most commercial compiler vendors offer JIT Java compilers, and new web browsers use JIT techniques, too.
Reference: [GWTB96] <author> I. Goldberg, D. Wagner, R. Thomas, and E. A. Brewer. </author> <title> A Secure Environment for Untrusted Helper Applications Confining the Wily Hacker. </title> <booktitle> In Proceedings of the 1996 USENIX Security Symposium, </booktitle> <year> 1996. </year>
Reference-contexts: The secure execution of arbitrary binaries recently has been addressed by at least two techniques. First, software-based fault isolation techniques [Sof95] guard against insecure system calls of programs by patching their binaries. Second, secure remote helper applications <ref> [GWTB96] </ref> use operating system tracing facilities to limit the use of resources that could violate system integrity. Another important goal of our project is to allow a natural integration of our infrastructure with other currently existing models for distributed systems.
Reference: [GWtLt97] <author> A. S. Grimshaw, Wm. A. Wulf, </author> <title> and the Legion team. The Legion Vision of a Worldwide Virtual Computer. </title> <journal> Communications of the ACM, </journal> <volume> 40(1), </volume> <month> January </month> <year> 1997. </year> <month> 18 </month>
Reference-contexts: This vision is as old as the Internet. Some of the more recent network computing approaches, include CONDOR [LLM88], Linda [WL88], PVM [Sun90], Piranha [GK92], MPI 15 2 4253 1. [MPI94], Network of Workstations (NOW) [ACP95], Legion <ref> [GWtLt97] </ref>, GLOBUS [FK97], and WebOS [VEY + 97]. The goal of the Legion research project is to provide secure shared object and name spaces, application-controlled fault-tolerance, improved response time, and greater throughput. Multiple language support is another of its goals.
Reference: [Inc] <institution> Lucent Technologies Inc. </institution> <note> Inferno. http://inferno.bell-labs.com/inferno/. </note>
Reference-contexts: Languages worth considering, besides Java, include the E programming language [Com96] which is very similar, but offers a more flexible security framework than Java, and the Limbo programming language in the Inferno operating system <ref> [Inc] </ref>, which allows, among other features, for easier and more efficient just-in-time compilation. The secure execution of arbitrary binaries recently has been addressed by at least two techniques. First, software-based fault isolation techniques [Sof95] guard against insecure system calls of programs by patching their binaries.
Reference: [Las97a] <author> A. </author> <title> Lash. 40-bit crypto proves no problem. </title> <booktitle> CNET: The Computer Network, </booktitle> <month> January </month> <year> 1997. </year> <note> http://www.news.com/News/Item/0,4,7483,00.html. </note>
Reference-contexts: Then, in January 1997, RSA announced a code breaking challenge. Within only 3.5 hours, a graduate student at Berkeley had cracked the 40-bit RSA code running on a 128-processor UltraSparc NOW cluster <ref> [Las97a] </ref>. Two weeks later, the 48-bit RSA code was cracked using 3,500 workstations spread across Europe [Las97b]. On June 17th, 1997, the 56-bit DES [RDS97] was cracked, using approximately 78,000 computers, as many as 14,000 per day.
Reference: [Las97b] <author> A. </author> <title> Lash. 48-bit crypto latest to crack. </title> <booktitle> CNET: The Computer Network, </booktitle> <month> February </month> <year> 1997. </year> <note> http://www.news.com/News/Item/0,4,7849,4000.html. </note>
Reference-contexts: Then, in January 1997, RSA announced a code breaking challenge. Within only 3.5 hours, a graduate student at Berkeley had cracked the 40-bit RSA code running on a 128-processor UltraSparc NOW cluster [Las97a]. Two weeks later, the 48-bit RSA code was cracked using 3,500 workstations spread across Europe <ref> [Las97b] </ref>. On June 17th, 1997, the 56-bit DES [RDS97] was cracked, using approximately 78,000 computers, as many as 14,000 per day. The press release [DES97] states: This project demonstrates the kind of supercomputing power that can be harnessed on the Internet using nothing but spare CPU time.
Reference: [LLM88] <author> M. Litzkow, M. Livny, and M. W. </author> <title> Mutka. Condor A Hunter of Idle Workstations. </title> <booktitle> In Proceedings of the 8th International Conference of Distributed Computing Systems, </booktitle> <month> June </month> <year> 1988. </year>
Reference-contexts: This vision is as old as the Internet. Some of the more recent network computing approaches, include CONDOR <ref> [LLM88] </ref>, Linda [WL88], PVM [Sun90], Piranha [GK92], MPI 15 2 4253 1. [MPI94], Network of Workstations (NOW) [ACP95], Legion [GWtLt97], GLOBUS [FK97], and WebOS [VEY + 97].
Reference: [MPI94] <author> MPI: </author> <title> A Message-Passing Interface Standard. </title> <journal> The International Journal of Supercomputer Applications and High Performance Computing, </journal> <volume> 8(3), </volume> <year> 1994. </year>
Reference-contexts: This vision is as old as the Internet. Some of the more recent network computing approaches, include CONDOR [LLM88], Linda [WL88], PVM [Sun90], Piranha [GK92], MPI 15 2 4253 1. <ref> [MPI94] </ref>, Network of Workstations (NOW) [ACP95], Legion [GWtLt97], GLOBUS [FK97], and WebOS [VEY + 97]. The goal of the Legion research project is to provide secure shared object and name spaces, application-controlled fault-tolerance, improved response time, and greater throughput. Multiple language support is another of its goals.
Reference: [RDS97] <author> Inc. </author> <title> RSA Data Security. The RSA Data Security Secret-Key Challenge, </title> <note> 1997. http://www.rsa.com/rsalabs/97challenge. </note>
Reference-contexts: Within only 3.5 hours, a graduate student at Berkeley had cracked the 40-bit RSA code running on a 128-processor UltraSparc NOW cluster [Las97a]. Two weeks later, the 48-bit RSA code was cracked using 3,500 workstations spread across Europe [Las97b]. On June 17th, 1997, the 56-bit DES <ref> [RDS97] </ref> was cracked, using approximately 78,000 computers, as many as 14,000 per day. The press release [DES97] states: This project demonstrates the kind of supercomputing power that can be harnessed on the Internet using nothing but spare CPU time.
Reference: [Rob] <author> D. Robinson. </author> <title> The WWW Common Gateway Interface. Internet Draft. </title> <note> Version 1.1. </note>
Reference-contexts: Since Web browsers are available on almost every platform and architecture, and common to almost every user, our framework facilitates these operations. Similarly, in implementing the broker, we want to leverage existing HTTP server technology and ways of extending server functionality using CGI scripts <ref> [Rob] </ref> or servlets [Sun96c]. In other words, we want our architecture to be build on top of the existing Internet infrastructure. Consequently, our design is based on the following premises: Tasks: A task on which a host can operate is represented as an applet embedded in an HTML page.
Reference: [Rob54] <author> R. M. Robinson. </author> <title> Mersenne and Fermat numbers. </title> <booktitle> In Proceedings of the American Mathematical Society, </booktitle> <volume> volume 5, </volume> <year> 1954. </year>
Reference-contexts: These are traditionally the largest known primes. The advent of the computer provided a powerful tool to search and verify Mersenne primes. Beginning in the 1952, with the discovery of the 13th Mersenne prime by Raphael M. Robinson <ref> [Rob54] </ref>, all subsequent Mersenne primes have been found by computer. To date only 35 Mersenne primes have been discovered. The current record holder is 2 1398269 1 and was discovered in November 1996 by a coordinated effort of over 700 PCs and workstations worldwide.
Reference: [Ros] <author> D. Rossi. </author> <note> Jada. http://www.cs.unibo.it/rossi/jada/. </note>
Reference-contexts: Market incentives are supported. Some of the mechanisms needed to implement the proposed framework may eventually be realized through recently released standard Java components such as Remote Method Invocation (RMI) [Sun96b] and Object Serialization [Sun96a], or already have been provided by other research groups (for example [SC96], <ref> [Ros] </ref> and [Gut]). Recently, a large variety of Java performance boosters have become available [FJa]. Most commercial compiler vendors offer JIT Java compilers, and new web browsers use JIT techniques, too.
Reference: [Sar96] <author> L. F. G. Sarmenta. </author> <title> Volunteer Computing. Draft Preliminary Concept Paper and Project Proposal, </title> <month> October </month> <year> 1996. </year>
Reference-contexts: The use of Java as a means for building distributed systems that execute throughout the Internet has also been recently proposed by Chandy et al. [CDL + 96] and Fox et al. [FF96], and studied in <ref> [Sar96] </ref>. ATLAS provides a global computing model, based on Java and on the Cilk programming model [Blu95], that is best suited to tree-based computations. ATLAS ensures scalability using a hierarchy of managers. The current implementation uses native libraries, which may raise some portability problems.
Reference: [SC96] <author> P. A. G. Sivilotti and K. M. Chandy. </author> <title> Reliable Synchronization Primitives for Java Threads. </title> <type> Technical Report CS-TR-96-11, </type> <institution> California Institute of Technology, </institution> <month> June </month> <year> 1996. </year>
Reference-contexts: Market incentives are supported. Some of the mechanisms needed to implement the proposed framework may eventually be realized through recently released standard Java components such as Remote Method Invocation (RMI) [Sun96b] and Object Serialization [Sun96a], or already have been provided by other research groups (for example <ref> [SC96] </ref>, [Ros] and [Gut]). Recently, a large variety of Java performance boosters have become available [FJa]. Most commercial compiler vendors offer JIT Java compilers, and new web browsers use JIT techniques, too.
Reference: [Sof95] <institution> Colusa Software. </institution> <note> Omniware Technical Overview. http://www.colusa.com, 1995. </note>
Reference-contexts: The secure execution of arbitrary binaries recently has been addressed by at least two techniques. First, software-based fault isolation techniques <ref> [Sof95] </ref> guard against insecure system calls of programs by patching their binaries. Second, secure remote helper applications [GWTB96] use operating system tracing facilities to limit the use of resources that could violate system integrity.
Reference: [Sun90] <author> V. S. Sunderam. </author> <title> PVM: A Framework for Parallel Distributed Computing. </title> <type> Technical Report ORNL/TM-11375, </type> <institution> Dept. of Math and Computer Science, Emory University, </institution> <address> Atlanta, GA, USA, </address> <month> February </month> <year> 1990. </year>
Reference-contexts: This vision is as old as the Internet. Some of the more recent network computing approaches, include CONDOR [LLM88], Linda [WL88], PVM <ref> [Sun90] </ref>, Piranha [GK92], MPI 15 2 4253 1. [MPI94], Network of Workstations (NOW) [ACP95], Legion [GWtLt97], GLOBUS [FK97], and WebOS [VEY + 97]. The goal of the Legion research project is to provide secure shared object and name spaces, application-controlled fault-tolerance, improved response time, and greater throughput.
Reference: [Sun96a] <author> Sun Microsystems, Inc. </author> <title> Java Object Serialization Specification, </title> <month> May </month> <year> 1996. </year> <note> Revision 0.9. </note>
Reference-contexts: Market incentives are supported. Some of the mechanisms needed to implement the proposed framework may eventually be realized through recently released standard Java components such as Remote Method Invocation (RMI) [Sun96b] and Object Serialization <ref> [Sun96a] </ref>, or already have been provided by other research groups (for example [SC96], [Ros] and [Gut]). Recently, a large variety of Java performance boosters have become available [FJa]. Most commercial compiler vendors offer JIT Java compilers, and new web browsers use JIT techniques, too.
Reference: [Sun96b] <author> Sun Microsystems, Inc. </author> <title> Java Remote Method Invocation Specification, </title> <month> May </month> <year> 1996. </year> <note> Revision 0.9. </note>
Reference-contexts: Rather, a market, which brings together buyers and sellers of CPU, determines which seller will run the computelet. Market incentives are supported. Some of the mechanisms needed to implement the proposed framework may eventually be realized through recently released standard Java components such as Remote Method Invocation (RMI) <ref> [Sun96b] </ref> and Object Serialization [Sun96a], or already have been provided by other research groups (for example [SC96], [Ros] and [Gut]). Recently, a large variety of Java performance boosters have become available [FJa]. Most commercial compiler vendors offer JIT Java compilers, and new web browsers use JIT techniques, too.
Reference: [Sun96c] <author> Sun Microsystems, Inc. </author> <title> Java Servlet Application Programming Interface, </title> <month> November </month> <year> 1996. </year> <note> Draft version 2. </note>
Reference-contexts: Since Web browsers are available on almost every platform and architecture, and common to almost every user, our framework facilitates these operations. Similarly, in implementing the broker, we want to leverage existing HTTP server technology and ways of extending server functionality using CGI scripts [Rob] or servlets <ref> [Sun96c] </ref>. In other words, we want our architecture to be build on top of the existing Internet infrastructure. Consequently, our design is based on the following premises: Tasks: A task on which a host can operate is represented as an applet embedded in an HTML page. <p> File upload, routing, and the broker itself are implemented as Java applications that are accessed via RMI as well as servlets that are compatible with the API defined by JavaSoft <ref> [Sun96c] </ref>. Servlets allow for the smooth integration of Javelin into server technology that is becoming more and more common in enterprises. Optional servlets provide additional services such as form-based file upload (as defined in RFC 1867), semaphores, and a Linda tuple space.
Reference: [Sun96d] <author> Sun Microsystems, Inc. </author> <title> JavaBeans 1.0 API Specification, </title> <month> December </month> <year> 1996. </year> <title> Revision A. </title>
Reference-contexts: There has been substantial work in the last decade geared towards heterogeneity and open systems. However, promising standards for interoperability and portability between different combinations of software and hardware components emerged only a couple of years ago. Java Beans <ref> [Sun96d] </ref> is the latest in the world of Web-based distributed computation, but we also have widely used technologies such as CORBA [Gro95] or DCOM [Cor96].
Reference: [Tay] <author> S. Taylor. </author> <title> Prototype Java-MPI Package. http://cisr.anu.edu.au/sam/java/java mpi prototype.html. </title>
Reference-contexts: These projects include ATLAS [BBB96], Charlotte [BKKW96], ParaWeb [BSST96], and Popcorn [CLNR97]. All these projects are designed explicitly to run parallel applications and provide a specific programming model. Other recent systems such as JPVM [Fer] and Java-MPI <ref> [Tay] </ref> use Java to overcome heterogeneity, but are not intended to execute on anonymous machines.
Reference: [Van97] <author> L. Vanhelsuwe. </author> <title> Create Your Own Supercomputer With Java. </title> <journal> JavaWorld, </journal> <volume> 2(1), </volume> <month> January </month> <year> 1997. </year>
Reference-contexts: The raytracer was written by Frederico Inacio de Moraes, Universidade Estadual de Campinas, [dM] and was first parallelized by Laurence Vanhelsuwe <ref> [Van97] </ref>. Raytracing is a method that creates photo-realistic synthetic images from a mathematical description of the scene to be generated. A scene is defined by the camera, light sources, and objects built from textured primitives such as cubes, spheres, and planes.
Reference: [VEY + 97] <author> A. Vahdat, P. Eastham, C. Yoshikawa, E. Belani, T. Anderson, D. Culler, and M. Dahlin. WebOS: </author> <title> Operating System Services For Wide Area Applications. </title> <type> Technical Report CSD-97-938, </type> <institution> UC Berkeley, </institution> <year> 1997. </year>
Reference-contexts: This vision is as old as the Internet. Some of the more recent network computing approaches, include CONDOR [LLM88], Linda [WL88], PVM [Sun90], Piranha [GK92], MPI 15 2 4253 1. [MPI94], Network of Workstations (NOW) [ACP95], Legion [GWtLt97], GLOBUS [FK97], and WebOS <ref> [VEY + 97] </ref>. The goal of the Legion research project is to provide secure shared object and name spaces, application-controlled fault-tolerance, improved response time, and greater throughput. Multiple language support is another of its goals.
Reference: [WL88] <author> R. A. Whiteside and J. S. Leichter. </author> <title> Using Linda for Supercomputing on a Local Area Network. </title> <type> Technical Report YALEU/DCS/TR-638, </type> <institution> Department of Computer Science, Yale University, </institution> <address> New Haven, Connecticut, </address> <year> 1988. </year> <month> 19 </month>
Reference-contexts: The Javelin programming environment provides a number of library support classes and tools to map different programming models onto the current applet infrastructure. To illustrate how these language constructs can be mapped, we consider the implementation of a Linda tuple space as an example. The Linda programming model <ref> [WL88] </ref> was originally developed by Gelernter and Carriero of Yale University. This Linda model provides a construct, known as tuple space, that concurrent processes can access to insert, delete, and update data known as tuples. Atomic operations known as Out, Rd, and In provide synchronization for these accesses. <p> This vision is as old as the Internet. Some of the more recent network computing approaches, include CONDOR [LLM88], Linda <ref> [WL88] </ref>, PVM [Sun90], Piranha [GK92], MPI 15 2 4253 1. [MPI94], Network of Workstations (NOW) [ACP95], Legion [GWtLt97], GLOBUS [FK97], and WebOS [VEY + 97]. The goal of the Legion research project is to provide secure shared object and name spaces, application-controlled fault-tolerance, improved response time, and greater throughput.
References-found: 46

