URL: ftp://ftp.cs.utah.edu/techreports/1996/UUCS-96-009.ps
Refering-URL: ftp://ftp.cs.utah.edu/techreports/1996/index.html
Root-URL: 
Email: E-mail: fstoller,swanson,kuramkotg@cs.utah.edu  
Title: Paint: PA Instruction Set Interpreter 1 consult for an overview of the Mint simulation environment
Author: Leigh B. Stoller Mark R. Swanson Ravindra Kuramkote 
Note: Note that this document is intended to be an addendum to the original Mint technical report, which the reader should  
Date: September 11, 1996  
Address: Salt Lake City, UT 84112, USA  
Affiliation: Department of Computer Science University of Utah  
Web: WWW: http://www.cs.utah.edu/projects/avalanche UUCS-96-009  
Abstract: This document describes Paint, an instruction set simulator based on Mint[3]. Paint interprets the PA-RISC instruction set, and has been extended to support the Avalanche Scalable Computing Project[2]. These extensions include a new process model that allows multiple programs to be run on each processor and the ability to model both kernel and user code on each processor. In addition, a new address space model more accurately detects when a program is accessing an illegal virtual address, allows a program's virtual address space to grow dynamically, and does lazy allocation of physical pages as programs need them. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Hewlett-Packard Co. </author> <title> PA-RISC 1.1 Architecture and Instruction Set Reference Manual, </title> <month> February </month> <year> 1994. </year>
Reference-contexts: 1 Introduction This note describes the Paint (PA Interpreter) simulation environment. Paint is based on the Mint [3] simulation system developed at the University of Rochester, and has been modified to interpret the PA-RISC <ref> [1] </ref> instruction set and to support the Avalanche Scalable Computing Project [2]. These changes are documented here. The reader is encouraged to read the original Mint report before proceeding, but as a review the next few sections present the essential concepts.
Reference: [2] <author> Swanson, M., Kuramkote, R., Tateyama, T., and Stoller, L. </author> <title> Message Passing Support in the Avalanche Widget. </title> <type> Tech. Rep. </type> <institution> UUCS-96-002, University of Utah Computer Science Department, </institution> <month> March </month> <year> 1996. </year>
Reference-contexts: 1 Introduction This note describes the Paint (PA Interpreter) simulation environment. Paint is based on the Mint [3] simulation system developed at the University of Rochester, and has been modified to interpret the PA-RISC [1] instruction set and to support the Avalanche Scalable Computing Project <ref> [2] </ref>. These changes are documented here. The reader is encouraged to read the original Mint report before proceeding, but as a review the next few sections present the essential concepts. <p> This is because there is just one event structure per instruction execution task, which is reused for all events that are sent to the backend. All of the information in the event 14 typedef struct - unsigned long value <ref> [2] </ref>; unsigned long *paddr; unsigned long vaddr; short regnum; short type; short spaceid; short vproc; short pid; - rw_trans_t; structure must be captured before the frontend is allowed to continue, or it will be lost when the next event is reached.
Reference: [3] <author> Veenstra, J. </author> <title> Mint Tutorial and User Manual. </title> <type> Tech. Rep. 452, </type> <institution> University of Rochester Computer Science Department, </institution> <month> May </month> <year> 1993. </year> <month> 23 </month>
Reference-contexts: 1 Introduction This note describes the Paint (PA Interpreter) simulation environment. Paint is based on the Mint <ref> [3] </ref> simulation system developed at the University of Rochester, and has been modified to interpret the PA-RISC [1] instruction set and to support the Avalanche Scalable Computing Project [2]. These changes are documented here. <p> Meanwhile, other processors can continue ahead until some synchronizing event occurs. There are many types of events that can be generated for the backend. This document will concern itself with just memory events, so the reader should consult the Mint <ref> [3] </ref> document for 7 typedef struct task - struct task *next; struct task *prev; int priority; int pid; mint_time_t time; PFTASK ufunc; struct event *pevent; int ival1; void *uptr1; - task_t, *task_ptr; a discussion of other events. Events in the Paint frontend look much like an instruction.
References-found: 3

