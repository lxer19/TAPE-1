URL: http://www.cs.brown.edu/~lpk/sitaut.ps
Refering-URL: 
Root-URL: 
Title: A Situated View of Representation and Control  
Author: Stanley J. Rosenschein Leslie Pack Kaelbling 
Date: October 31, 1994  
Abstract: For correspondence concerning this paper, please contact Abstract Intelligent agents are systems that have a complex, ongoing interaction with an environment that is dynamic and imperfectly predictable. Agents are typically difficult to program because the correctness of a program depends on the details of how the agent is situated in its environment. In this paper, we present a methodology for the design of situated agents that is based on situated automata theory. This approach allows designers to describe the informational content of an agent's computational states in a semantically rigorous way without requiring a commitment to conventional run-time symbolic processing. We start by outlining this situated view of representation, then show how it contributes to design methodologies for building systems that track perceptual conditions and take purposeful actions in their environments.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. R. Cassandra, L. P. Kaelbling, and M. L. Littman. </author> <title> Acting optimally in partially observable stochastic domains. </title> <booktitle> In Proceedings of the Twelfth National Conference on Artificial Intelligence, </booktitle> <address> Seattle, WA, </address> <year> 1994. </year>
Reference-contexts: Interim constraints and incremental refinement may be useful, but must be used cautiously, especially when modeling domains probabilistically. The theory of partially observable Markov decision processes <ref> [9, 1] </ref> provides a theoretically well-founded methodology for deriving controllers in stochastic domains, but it seems to be computationally very intractable. 4 Conclusions The aim of situated-automata theory is to provide a new semantic perspective on intelligent agents.
Reference: [2] <author> J. Halpern and Y. Moses. </author> <title> Knowledge and common knowledge in an distributed environment. </title> <booktitle> In Proceedings of the Third ACM Conference on Principles of Distributed Computing, </booktitle> <pages> pages 50-61, </pages> <year> 1984. </year> <note> A revised version appears as IBM RJ 4421. </note>
Reference-contexts: More formal notions of an agent's having knowledge about its environment are found in the work on epistemic logic: Moore [11] uses epistemic logic to model the knowledge of one agent about another's knowledge for the purpose of asking questions, for example. Halpern and Moses <ref> [2] </ref> provide a concrete computational model of knowledge in their applications of epistemic logic to the formalization of communication protocols in distributed systems.
Reference: [3] <author> G. E. Hughes and M. J. Cresswell. </author> <title> An Introduction to Modal Logic. </title> <publisher> Methuen and Company, </publisher> <address> London, </address> <year> 1968. </year>
Reference-contexts: This definition of information induces an equivalence relation on possible worlds, thus giving rise to an accessibility relation satisfying the S5 axioms <ref> [3] </ref>: K (x; ') ! ' (truth) K (x; ' ! ) ! (K (x; ') ! K (x; )) (consequential closure) K (x; ') ! K (x; K (x; ')) (positive introspection) :K (x; ') ! K (x; :K (x; ')) (negative introspection) We view an agent as the union
Reference: [4] <author> L. P. Kaelbling. Rex: </author> <title> A symbolic language for the design and parallel implementation of embedded systems. </title> <booktitle> In Proceedings of the AIAA Conference on Computers in Aerospace, </booktitle> <address> Wakefield, Massachusetts, </address> <year> 1987. </year>
Reference-contexts: The base-level relations can be represented either enumeratively or in more compact form. Rex <ref> [4, 8] </ref> is a language for specifying action mappings (as well as machines with internal state) as abstract circuit descriptions. Rex served as a substrate for Gapps [5, 7], which takes a symbolic specification of an action mapping and compiles it into fixed runtime circuitry.
Reference: [5] <author> L. P. Kaelbling. </author> <title> Goals as parallel program specifications. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <address> Minneapolis-St. Paul, Minnesota, </address> <year> 1988. </year>
Reference-contexts: The base-level relations can be represented either enumeratively or in more compact form. Rex [4, 8] is a language for specifying action mappings (as well as machines with internal state) as abstract circuit descriptions. Rex served as a substrate for Gapps <ref> [5, 7] </ref>, which takes a symbolic specification of an action mapping and compiles it into fixed runtime circuitry. A Gapps program consists of a set of goal reduction rules, which specify how a high-level goal is transformed to a more specific and simpler low-level goal.
Reference: [6] <author> L. P. Kaelbling. </author> <title> Compiling operator descriptions into reactive strategies using goal regression. </title> <type> Technical report, </type> <institution> Teleos Research, Palo Alto, California, </institution> <year> 1991. </year>
Reference-contexts: Rather than calculating G fl through enumeration, operator descriptions allow it to be calculated through symbolic regression. This may be more or less efficient that the alternative, depending on specifics of the problem domain. This technique has been implemented and explored as an extension to the Gapps programming system <ref> [6] </ref>. 3.2 Pure Perception Until now we have assumed that inputs from the environment are sufficiently informative, in that they encode all the world-state information needed to drive action.
Reference: [7] <author> L. P. Kaelbling and S. J. Rosenschein. </author> <title> Action and planning in embedded agents. </title> <booktitle> Robotics and Autonomous Systems, </booktitle> <volume> 6(1) </volume> <pages> 35-48, </pages> <year> 1990. </year> <title> Also published in Designing Autonomous Agents: Theory and Practice from Biology to Engineering and Back, </title> <editor> Pattie Maes, editor, </editor> <publisher> The MIT Press/Elsevier, </publisher> <year> 1991. </year>
Reference-contexts: The base-level relations can be represented either enumeratively or in more compact form. Rex [4, 8] is a language for specifying action mappings (as well as machines with internal state) as abstract circuit descriptions. Rex served as a substrate for Gapps <ref> [5, 7] </ref>, which takes a symbolic specification of an action mapping and compiles it into fixed runtime circuitry. A Gapps program consists of a set of goal reduction rules, which specify how a high-level goal is transformed to a more specific and simpler low-level goal.
Reference: [8] <author> L. P. Kaelbling and N. J. Wilson. </author> <title> Rex programmer's manual. </title> <type> Technical Report 381R, </type> <institution> Artificial Intelligence Center, SRI International, </institution> <address> Menlo Park, California, </address> <year> 1988. </year>
Reference-contexts: The base-level relations can be represented either enumeratively or in more compact form. Rex <ref> [4, 8] </ref> is a language for specifying action mappings (as well as machines with internal state) as abstract circuit descriptions. Rex served as a substrate for Gapps [5, 7], which takes a symbolic specification of an action mapping and compiles it into fixed runtime circuitry.
Reference: [9] <author> W. S. Lovejoy. </author> <title> A survey of algorithmic methods for partially observed markov decision processes. </title> <journal> Annals of Operations Research, </journal> <volume> 28(1) </volume> <pages> 47-65, </pages> <year> 1991. </year>
Reference-contexts: Interim constraints and incremental refinement may be useful, but must be used cautiously, especially when modeling domains probabilistically. The theory of partially observable Markov decision processes <ref> [9, 1] </ref> provides a theoretically well-founded methodology for deriving controllers in stochastic domains, but it seems to be computationally very intractable. 4 Conclusions The aim of situated-automata theory is to provide a new semantic perspective on intelligent agents.
Reference: [10] <author> J. McCarthy and P. J. Hayes. </author> <title> Some philosophical problems from the standpoint of artificial intelligence. </title> <editor> In B. Meltzer and D. Michie, editors, </editor> <booktitle> Machine Intelligence 4. </booktitle> <publisher> Edinburgh University Press, Edinburgh, </publisher> <year> 1969. </year>
Reference-contexts: Many researchers have found it useful to provide ascriptional accounts of the relationship between states of an agent and states of the environment. McCarthy <ref> [10] </ref>, for example, speaks of attributing knowledge of the temperature to a thermostat, and Newell [12] gives a definition of knowledge of an agent in terms of what would have to be true in the world in order for that agent's actions to be rational (in service of some goal).
Reference: [11] <author> R. C. Moore. </author> <title> A formal theory of knowledge and action. </title> <editor> In J. R. Hobbs and R. C. Moore, editors, </editor> <title> Formal Theories of the Commonsense World. </title> <publisher> Ablex Publishing Company, </publisher> <address> Norwood, New Jersey, </address> <year> 1985. </year> <month> 24 </month>
Reference-contexts: More formal notions of an agent's having knowledge about its environment are found in the work on epistemic logic: Moore <ref> [11] </ref> uses epistemic logic to model the knowledge of one agent about another's knowledge for the purpose of asking questions, for example. Halpern and Moses [2] provide a concrete computational model of knowledge in their applications of epistemic logic to the formalization of communication protocols in distributed systems. <p> When choosing action strategies, attention must be given to how actions chosen now will maintain the flow of information necessary for distinguishing among future states to be acted on. In AI, this problem often goes under the label of the knowledge precondition problem <ref> [11] </ref>: it is not enough to be in an environmental state when a certain action is appropriate; the agent must know that it is in an environmental state in which that action is appropriate.
Reference: [12] <author> A. Newell. </author> <title> The knowledge level. </title> <journal> Artificial Intelligence, </journal> <volume> 18 </volume> <pages> 87-127, </pages> <year> 1982. </year>
Reference-contexts: Many researchers have found it useful to provide ascriptional accounts of the relationship between states of an agent and states of the environment. McCarthy [10], for example, speaks of attributing knowledge of the temperature to a thermostat, and Newell <ref> [12] </ref> gives a definition of knowledge of an agent in terms of what would have to be true in the world in order for that agent's actions to be rational (in service of some goal).
Reference: [13] <author> S. J. Rosenschein. </author> <title> Plan synthesis: A logical perspective. </title> <booktitle> In Proceedings of the Seventh International Joint Conference on Artificial Intelligence, </booktitle> <address> Vancouver, British Columbia, </address> <year> 1981. </year> <note> Reprinted in Readings in Planning, </note> <editor> J. Allen, J. Hendler, and A. Tate, eds., </editor> <publisher> Morgan Kaufmann, </publisher> <year> 1990. </year>
Reference-contexts: This step is called "goal regression," because G n+1 is the weakest precondition under which G n can be made true on the next step (see Rosenschein <ref> [13] </ref> or Waldinger [17] for a more complete description of regression-based planning). When this process reaches a fixed point, then we have determined the set, G fl of states from which G can be maintained indefinitely.
Reference: [14] <author> S. J. Rosenschein. </author> <title> Formal theories of knowledge in AI and robotics. </title> <journal> New Generation Computing, </journal> <volume> 3(4) </volume> <pages> 345-357, </pages> <year> 1985. </year>
Reference-contexts: The emphasis on an agent's connection to its environment is an important change from that of traditional theories of representation and control. In this paper, we present an informal overview of a particular methodology for the design of situated agents. This methodology, based on situated automata theory <ref> [14, 16] </ref>, allows system designers to use high-level symbolic languages to describe the informational content of agents without requiring the symbolic structures to be implemented in the agent. It has become folk wisdom that `situated agents' and `representation' are incompatible concepts. <p> We will say that when an agent x is in state v, it carries the information that ' if and only if whenever it is in state v, ' is true in the world. This definition was originally articulated <ref> [14] </ref> in terms of equivalence classes of strings that would leave an automaton in the same state. Given this definition, we can specify the simple robot plant-watering task more precisely: whenever the agent carries the information that the plant is dry, it should water the plant.
Reference: [15] <author> S. J. Rosenschein. </author> <title> Synthesizing information-tracking automata from environment descriptions. </title> <booktitle> In Proceedings of Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <address> Toronto, Canada, </address> <year> 1989. </year>
Reference-contexts: Thus the lattice transition function approximates the optimal transition function and degrades gracefully with the precision of the representation. The lattices themselves would typically be cartesian products of simpler lattices, with elements that could be represented compactly as parameter vectors. This technique forms the basis of the ruler system <ref> [15] </ref>. ruler takes an approach analogous in many ways to AI planning systems. In ruler, the environment is described by a set of assertions, including temporal assertions that describe conditions that are either true initially or that will be true in the next state, depending on current conditions.
Reference: [16] <author> S. J. Rosenschein and L. P. Kaelbling. </author> <title> The synthesis of digital machines with provable epistemic properties. </title> <editor> In J. Halpern, editor, </editor> <booktitle> Proceedings of the Conference on Theoretical Aspects of Reasoning About Knowledge, </booktitle> <pages> pages 83-98. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1986. </year> <note> An updated version appears as Technical Note 412, Artificial Intelligence Center, </note> <institution> SRI International, Menlo Park, California. </institution>
Reference-contexts: The emphasis on an agent's connection to its environment is an important change from that of traditional theories of representation and control. In this paper, we present an informal overview of a particular methodology for the design of situated agents. This methodology, based on situated automata theory <ref> [14, 16] </ref>, allows system designers to use high-level symbolic languages to describe the informational content of agents without requiring the symbolic structures to be implemented in the agent. It has become folk wisdom that `situated agents' and `representation' are incompatible concepts. <p> The correlational definition of information, introducted in section 2.2.2, can be directly formalized in epistemic logic <ref> [16] </ref>, using the form K (x; ') to indicate that agent x carries the information that '. <p> : The formal model can be used to prove correctness properties of agents: given a descrip-tion of the circuit that makes up the agent and a description of the informational properties of the inputs to the agent, it can, for example, be shown that the outputs have certain informational properties <ref> [16] </ref>.
Reference: [17] <author> R. Waldinger. </author> <title> Achieving several goals simultaneously. </title> <booktitle> In Machine Intelligence 8. </booktitle> <publisher> Ellis Horwood Limited, </publisher> <address> Chichester, </address> <year> 1977. </year> <note> Reprinted in Readings in Planning, </note> <editor> J. Allen, J. Hendler, and A. Tate, eds., </editor> <publisher> Morgan Kaufmann, </publisher> <year> 1990. </year> <month> 25 </month>
Reference-contexts: This step is called "goal regression," because G n+1 is the weakest precondition under which G n can be made true on the next step (see Rosenschein [13] or Waldinger <ref> [17] </ref> for a more complete description of regression-based planning). When this process reaches a fixed point, then we have determined the set, G fl of states from which G can be maintained indefinitely.
References-found: 17

