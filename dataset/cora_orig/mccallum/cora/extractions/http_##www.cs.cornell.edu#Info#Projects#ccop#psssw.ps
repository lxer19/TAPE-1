URL: http://www.cs.cornell.edu/Info/Projects/ccop/psssw.ps
Refering-URL: http://www.cs.cornell.edu/Info/Projects/ccop/reports.html
Root-URL: 
Title: Improved Bounds on Relaxations of a Parallel Machine Scheduling Problem  
Author: Cynthia A. Phillips Andreas S. Schulz David B. Shmoys Cliff Stein Joel Wein k 
Address: Ithaca, NY  College, Hanover,  
Affiliation: School of Operations Research Industrial Engineering and Department of Computer Science, Cornell University,  Department of Computer Science, Sudikoff Laboratory, Dartmouth  Dartmouth College  Department of Computer Science, Polytechnic University, Brooklyn, NY,  
Date: (3 1  
Note: schedule to that of the optimal preemptive schedule is at most 7 3 improving a bound of  shmoys@cs.cornell.edu.  14853. Research partially supported by NSF grants CCR-9307391 and DMS-9505155 and ONR grant N00014-96-1-0050O. cliff@cs.dartmouth.edu.  NH. Research partially supported by NSF Award CCR-9308701, a Walter Burke Research Initiation Award and a  Research Initiation Award. k wein@mem.poly.edu.  11201. Research par tially supported by NSF Research Initiation Award CCR-9211494, NSF Grant CCR-9626831, and a grant from the New York State Science and Technology Foundation, through its Center for Advanced Technology in Telecommunications.  
Abstract: We consider the problem of scheduling n jobs with release dates on m identical parallel machines to minimize the average completion time of the jobs. We prove m ) due to Phillips, Stein and Wein. We then use our technique to give an improved bound on the quality of a linear programming relaxation of the problem considered by Hall, Schulz, Shmoys and Wein. fl A preliminary presentation of these results was given in the Proceedings of the 1996 International Colloquium on Automata, Languages and Programming [1]. y caphill@cs.sandia.gov. Sandia National Labs, Albuquerque, NM. This work was performed under U.S. Department of Energy contract number DE-AC04-76AL85000. z schulz@math.tu-berlin.de. Department of Mathematics, Technical University of Berlin, 10623 Berlin, Germany. Research partially supported by the graduate school Algorithmische Diskrete Mathematik (DFG), grant We 1265/2-1. that the ratio of the average completion time of the optimal nonpreemptive
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Chakrabarti, C. Phillips, A. S. Schulz, D.B. Shmoys, C. Stein, and J. Wein. </author> <title> Improved approximation algorithms for minsum criteria. </title> <booktitle> In Proceedings of the 1996 International Colloquium on Automata, Languages and Programming, Lecture Notes in Computer Science 1099, </booktitle> <pages> pages 646-657, </pages> <address> Berlin, 1996. </address> <publisher> Springer-Verlag. </publisher> <pages> 12 </pages>
Reference-contexts: The second technique does improve over the best previously known approximation algorithm, but simultaneously with our discovery of this result we also discovered a (2:89 + *)-approximation algorithm for the problem using rather different techniques <ref> [1] </ref>. We note, however, that our 3:75-approximation algorithm can be implemented in O (n log n) time (by applying results of Queyranne and Schulz [21] and Goemans [5]) whereas the (2:89 + *)-approximation algorithm is rather computationally intensive. <p> First, the idea of scheduling in a natural order based on a linear programming relaxation in completion-time variables, or related formulations, has found many applications to a number of scheduling problems, e.g., <ref> [1, 2, 3, 6, 8, 17, 22, 24] </ref>. This is currently a very active area of research, and our techniques offer new ideas that we believe may find other applications and lead to further improvements.
Reference: [2] <author> C. Chekuri, R. Motwani, B. Natarajan, and C. Stein. </author> <title> Approximation techniques for average completion time scheduling. </title> <booktitle> In Proceedings of the 8th ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 609-618, </pages> <month> January </month> <year> 1997. </year>
Reference-contexts: 1 Introduction Recently there has been much activity in the development of approximation algorithms for a number of scheduling problems in which the goal is to minimize the average completion time of the jobs scheduled <ref> [2, 3, 6, 8, 9, 17, 18, 22, 23] </ref>. The key idea behind most of these results is that, given certain sorts of relaxations of scheduling problems, a valid schedule can be inferred from a simple ordering that can be easily constructed from these relaxations. <p> We note, however, that our 3:75-approximation algorithm can be implemented in O (n log n) time (by applying results of Queyranne and Schulz [21] and Goemans [5]) whereas the (2:89 + *)-approximation algorithm is rather computationally intensive. Subsequent to the results in this paper, Chekuri et al. <ref> [2] </ref> gave a 2:85-approximation algorithm that runs in O (n log n) time, and quite recently, Schulz and Skutella have given a randomized O (n log n) 2-approximation algorithm [22]. (A consequence of this result is also an improved bound of 2 on the ratio of the optimal nonpreemptive to preemptive <p> First, the idea of scheduling in a natural order based on a linear programming relaxation in completion-time variables, or related formulations, has found many applications to a number of scheduling problems, e.g., <ref> [1, 2, 3, 6, 8, 17, 22, 24] </ref>. This is currently a very active area of research, and our techniques offer new ideas that we believe may find other applications and lead to further improvements.
Reference: [3] <author> F. A. Chudak and D. B. Shmoys. </author> <title> Approximation algorithms for precedence-constrained scheduling problems on parallel machines that run at different speeds. </title> <booktitle> In Proceedings of the 8th ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 581-590, </pages> <year> 1997. </year>
Reference-contexts: 1 Introduction Recently there has been much activity in the development of approximation algorithms for a number of scheduling problems in which the goal is to minimize the average completion time of the jobs scheduled <ref> [2, 3, 6, 8, 9, 17, 18, 22, 23] </ref>. The key idea behind most of these results is that, given certain sorts of relaxations of scheduling problems, a valid schedule can be inferred from a simple ordering that can be easily constructed from these relaxations. <p> First, the idea of scheduling in a natural order based on a linear programming relaxation in completion-time variables, or related formulations, has found many applications to a number of scheduling problems, e.g., <ref> [1, 2, 3, 6, 8, 17, 22, 24] </ref>. This is currently a very active area of research, and our techniques offer new ideas that we believe may find other applications and lead to further improvements.
Reference: [4] <author> E.G. Coffman Jr. </author> <title> and M.R. Garey. Proof of the 4/3 conjecture for preemptive vs. nonpreemptive two-processor scheduling. </title> <booktitle> In Proceedings of the 23rd Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 241-248, </pages> <year> 1991. </year>
Reference-contexts: schedule j as early as possible subject to the following constraints: * Job j does not start before r j . * Jobs 1; : : : ; j 1 have already been scheduled in N , and their position is fixed. and the makespan (max j C j ) <ref> [4, 7, 10, 15] </ref> of a schedule.
Reference: [5] <author> M. Goemans. </author> <title> A supermodular relaxation for scheduling with release dates. </title> <booktitle> In Proceedings of the 5th MPS Conference on Integer Programming and Combinatorial Optimization, </booktitle> <pages> pages 288-300, </pages> <month> June </month> <year> 1996. </year> <note> Published as Lecture Notes in Computer Science 1084, Springer-Verlag. </note>
Reference-contexts: We note, however, that our 3:75-approximation algorithm can be implemented in O (n log n) time (by applying results of Queyranne and Schulz [21] and Goemans <ref> [5] </ref>) whereas the (2:89 + *)-approximation algorithm is rather computationally intensive. <p> More surprisingly, as a consequence of the results of Queyranne and Schulz [21] and Goemans <ref> [5, 6] </ref>, an optimal solution to this linear program can actually be obtained in O (n log n) time. For further discussion of this formulation, see [8] or [21].
Reference: [6] <author> M. Goemans. </author> <title> Improved approximation algorithms for scheduling with release dates. </title> <booktitle> In Proceedings of the 8th ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 591-598, </pages> <year> 1997. </year>
Reference-contexts: 1 Introduction Recently there has been much activity in the development of approximation algorithms for a number of scheduling problems in which the goal is to minimize the average completion time of the jobs scheduled <ref> [2, 3, 6, 8, 9, 17, 18, 22, 23] </ref>. The key idea behind most of these results is that, given certain sorts of relaxations of scheduling problems, a valid schedule can be inferred from a simple ordering that can be easily constructed from these relaxations. <p> First, the idea of scheduling in a natural order based on a linear programming relaxation in completion-time variables, or related formulations, has found many applications to a number of scheduling problems, e.g., <ref> [1, 2, 3, 6, 8, 17, 22, 24] </ref>. This is currently a very active area of research, and our techniques offer new ideas that we believe may find other applications and lead to further improvements. <p> More surprisingly, as a consequence of the results of Queyranne and Schulz [21] and Goemans <ref> [5, 6] </ref>, an optimal solution to this linear program can actually be obtained in O (n log n) time. For further discussion of this formulation, see [8] or [21].
Reference: [7] <author> D.K. Goyal. </author> <title> Nonpreemptive scheduling of unequal execution time tasks on two identical processors. </title> <type> Technical Report CS-77-039, </type> <institution> Washington State University, </institution> <address> Pullman, WA, </address> <year> 1977. </year>
Reference-contexts: schedule j as early as possible subject to the following constraints: * Job j does not start before r j . * Jobs 1; : : : ; j 1 have already been scheduled in N , and their position is fixed. and the makespan (max j C j ) <ref> [4, 7, 10, 15] </ref> of a schedule.
Reference: [8] <author> L. A. Hall, A. S. Schulz, D. B. Shmoys, and J. Wein. </author> <title> Scheduling to minimize average completion time: Off-line and on-line approximation algorithms. </title> <note> Submitted to Mathematics of Operations Research, </note> <year> 1996. </year>
Reference-contexts: 1 Introduction Recently there has been much activity in the development of approximation algorithms for a number of scheduling problems in which the goal is to minimize the average completion time of the jobs scheduled <ref> [2, 3, 6, 8, 9, 17, 18, 22, 23] </ref>. The key idea behind most of these results is that, given certain sorts of relaxations of scheduling problems, a valid schedule can be inferred from a simple ordering that can be easily constructed from these relaxations. <p> The idea of scheduling in a natural order dictated by a relaxation of the problem has proved to be quite powerful. Inspired by this idea, Hall, Schulz, Shmoys, and Wein in <ref> [8] </ref>, which is a joint journal version of [9] and [23], studied a number of linear programming relaxations of constrained minsum scheduling problems and gave methods to round their solutions to feasible schedules. <p> Our results improve upon both the techniques of Phillips, Stein and Wein [18] and of Hall et al. <ref> [8] </ref>. <p> schedule, improving the previous bound of (3 1 m ) [18]; * we improve the analysis of Hall et al. to show that the linear programming relaxation that they consider yields a lower bound within a factor of 3:75 of optimal, improving on the bound of (4 1 m ) <ref> [8] </ref>. Neither of these results gives the best current performance guarantee for an approxima tion algorithm for P jr j j P C j . The current best approximation algorithm for the underlying preemptive problem is a 2-approximation algorithm [18]; thus our first technique yields only a 4:666-approximation algorithm. <p> First, the idea of scheduling in a natural order based on a linear programming relaxation in completion-time variables, or related formulations, has found many applications to a number of scheduling problems, e.g., <ref> [1, 2, 3, 6, 8, 17, 22, 24] </ref>. This is currently a very active area of research, and our techniques offer new ideas that we believe may find other applications and lead to further improvements. <p> This is currently a very active area of research, and our techniques offer new ideas that we believe may find other applications and lead to further improvements. The analyses of Phillips, Stein, and Wein [18] and Hall et al. <ref> [8] </ref> show, respectively, that the completion time of job j in the schedule found is within a constant factor of the preemptive completion time of j and the LP completion time of j. <p> Let N be the nonpreemptive schedule resulting from the application of List to L. Then C N j1 X p i )=m + p j : Proof. The proof is essentially identical to arguments given by both Phillips, Stein and Wein [18] and Hall et al. <ref> [8] </ref>. Consider the schedule of jobs 1; 2; : : : ; j 1, and suppose that job j is then scheduled to start at time t. Trace back in this (partial) schedule to find the latest time t 0 that a machine is idle prior to time t. <p> re lease dates on identical parallel machines, algorithm List, when applied to L P , produces a nonpreemptive schedule for that instance whose total completion time is at most 7 3 C P . 3.2 Bounding a Linear Programming Relaxation The (4 1 m )-approximation algorithm of Hall et al. <ref> [8] </ref> is based on the LP relaxation of a formulation in which there are completion-time variables: with each job j we associate a variable C j . <p> The first set of constraints is less intuitive, but can be readily derived by summing over load-based constraints on job completion times <ref> [8] </ref>. We note that the first set of constraints is exponential in size, but as a consequence of the results of Queyranne [19] we can separate over these constraints in polynomial time, and thus an optimal solution to this linear programming relaxation can be obtained in polynomial time. <p> More surprisingly, as a consequence of the results of Queyranne and Schulz [21] and Goemans [5, 6], an optimal solution to this linear program can actually be obtained in O (n log n) time. For further discussion of this formulation, see <ref> [8] </ref> or [21]. Let C j ; j = 1; : : : ; n, be an optimal solution to the linear program lpc, and renumber the jobs so that C 1 C n .
Reference: [9] <author> L. A. Hall, D. B. Shmoys, and J. Wein. </author> <title> Scheduling to minimize average completion time: Off-line and on-line algorithms. </title> <booktitle> In Proceedings of the 7th ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 142-151, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: 1 Introduction Recently there has been much activity in the development of approximation algorithms for a number of scheduling problems in which the goal is to minimize the average completion time of the jobs scheduled <ref> [2, 3, 6, 8, 9, 17, 18, 22, 23] </ref>. The key idea behind most of these results is that, given certain sorts of relaxations of scheduling problems, a valid schedule can be inferred from a simple ordering that can be easily constructed from these relaxations. <p> The idea of scheduling in a natural order dictated by a relaxation of the problem has proved to be quite powerful. Inspired by this idea, Hall, Schulz, Shmoys, and Wein in [8], which is a joint journal version of <ref> [9] </ref> and [23], studied a number of linear programming relaxations of constrained minsum scheduling problems and gave methods to round their solutions to feasible schedules. Their techniques yield improved performance guarantees for many problems, and in some cases, the first constant performance guarantees.
Reference: [10] <author> K.S. Hong and J.Y. Leung. </author> <title> Some results on liu's conjecture. </title> <note> SIAM Journal on Discrete Mathematics. </note>
Reference-contexts: schedule j as early as possible subject to the following constraints: * Job j does not start before r j . * Jobs 1; : : : ; j 1 have already been scheduled in N , and their position is fixed. and the makespan (max j C j ) <ref> [4, 7, 10, 15] </ref> of a schedule.
Reference: [11] <author> T. C. Lai, </author> <type> Personal communication. </type> <month> May, </month> <year> 1995. </year>
Reference-contexts: Specifically, by disallowing preemption, the average completion time can increase by no more than a factor of 7 3 . In contrast, T.C. Lai <ref> [11] </ref> has proven the best known lower bound: there exists an instance for which the optimal value for a nonpreemptive schedule is at least 18 13 times the optimal value for a preemptive schedule.
Reference: [12] <author> E.L. Lawler, J.K. Lenstra, A.H.G. Rinnooy Kan, </author> <title> and D.B. Shmoys. Sequencing and scheduling: Algorithms and complexity. In S.C. Graves, </title> <editor> A.H.G. Rinnooy Kan, and P.H. Zipkin, editors, </editor> <booktitle> Handbooks in Operations Research and Management Science, </booktitle> <volume> Vol 4., </volume> <booktitle> Logistics of Production and Inventory, </booktitle> <pages> pages 445-522. </pages> <publisher> North-Holland, </publisher> <year> 1993. </year>
Reference-contexts: McNaughton [16] proved that no finite number of preemptions can improve the average completion time of a set of jobs on parallel machines; combined with a result from open-shop scheduling theory <ref> [12] </ref>, this establishes that that for the scheduling of jobs without release dates on identical parallel machines to minimize average completion time, the optimal preemptive schedule is no better than the optimal nonpreemptive schedule.
Reference: [13] <author> J.K. Lenstra, A.H.G. Rinnooy Kan, and P. Brucker. </author> <title> Complexity of machine scheduling problems. </title> <journal> Annals of Discrete Mathematics, </journal> <volume> 1 </volume> <pages> 343-362, </pages> <year> 1977. </year>
Reference-contexts: We require a nonpreemptive schedule in which each job must be processed in an uninterrupted fashion. This problem is often denoted by P jr j j P and is N P-hard <ref> [13] </ref>; thus, it is natural to be interested in approximately-optimal solutions that can be computed in polynomial time. We define a -approximation algorithm as an algorithm that runs in polynomial time and always produces a solution of value within a factor of of the optimum.
Reference: [14] <author> J.H. Lin and J.S. Vitter. </author> <title> *-approximation with minimum packing constraint violation. </title> <booktitle> In Proceedings of the 24th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 771-782, </pages> <year> 1992. </year>
Reference: [15] <author> C. L. Liu. </author> <title> Optimal scheduling on multiprocessor computing systems. </title> <booktitle> In Proceedings of the 13th Annual IEEE Symposium on Switching and Automata Theory, </booktitle> <pages> pages 155-60, </pages> <year> 1972. </year>
Reference-contexts: schedule j as early as possible subject to the following constraints: * Job j does not start before r j . * Jobs 1; : : : ; j 1 have already been scheduled in N , and their position is fixed. and the makespan (max j C j ) <ref> [4, 7, 10, 15] </ref> of a schedule.
Reference: [16] <author> R. McNaughton. </author> <title> Scheduling with deadlines and loss functions. </title> <journal> Management Science, </journal> <volume> 6 </volume> <pages> 1-12, </pages> <year> 1959. </year>
Reference-contexts: McNaughton <ref> [16] </ref> proved that no finite number of preemptions can improve the average completion time of a set of jobs on parallel machines; combined with a result from open-shop scheduling theory [12], this establishes that that for the scheduling of jobs without release dates on identical parallel machines to minimize average completion
Reference: [17] <author> R. H. Mohring, M. W. Schaffter, and A. S. Schulz. </author> <title> Scheduling jobs with communication delays: Using infeasible solutions for approximation. </title> <editor> In J. Diaz and M. Serna, editors, </editor> <booktitle> Algorithms - ESA'96, volume 1136 of Lecture Notes in Computer Science, </booktitle> <pages> pages 76 - 90. </pages> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1996. </year> <booktitle> Proceedings of the 4th Annual European Symposium on Algorithms. </booktitle>
Reference-contexts: 1 Introduction Recently there has been much activity in the development of approximation algorithms for a number of scheduling problems in which the goal is to minimize the average completion time of the jobs scheduled <ref> [2, 3, 6, 8, 9, 17, 18, 22, 23] </ref>. The key idea behind most of these results is that, given certain sorts of relaxations of scheduling problems, a valid schedule can be inferred from a simple ordering that can be easily constructed from these relaxations. <p> First, the idea of scheduling in a natural order based on a linear programming relaxation in completion-time variables, or related formulations, has found many applications to a number of scheduling problems, e.g., <ref> [1, 2, 3, 6, 8, 17, 22, 24] </ref>. This is currently a very active area of research, and our techniques offer new ideas that we believe may find other applications and lead to further improvements.
Reference: [18] <author> C. Phillips, C. Stein, and J. Wein. </author> <title> Scheduling jobs that arrive over time. </title> <booktitle> In Proceedings of Fourth Workshop on Algorithms and Data Structures, Lecture Notes in Computer Science, </booktitle> <volume> 955, </volume> <pages> pages 86-97, </pages> <address> Berlin, </address> <year> 1995. </year> <note> Springer-Verlag. Journal version to appear in Mathematical Programming B. </note>
Reference-contexts: 1 Introduction Recently there has been much activity in the development of approximation algorithms for a number of scheduling problems in which the goal is to minimize the average completion time of the jobs scheduled <ref> [2, 3, 6, 8, 9, 17, 18, 22, 23] </ref>. The key idea behind most of these results is that, given certain sorts of relaxations of scheduling problems, a valid schedule can be inferred from a simple ordering that can be easily constructed from these relaxations. <p> The first progress in developing approximation algorithms with constant-factor performance guarantees for these problems was made by Phillips, Stein and Wein <ref> [18] </ref>, who developed approximation algorithms by using a preemptive schedule as a relaxation of the nonpreemptive schedule. <p> Our results improve upon both the techniques of Phillips, Stein and Wein <ref> [18] </ref> and of Hall et al. [8]. <p> Specifically, * we show that list scheduling in order of the completion times in a preemptive identical-parallel-machine schedule yields a nonpreemptive schedule of average completion time at most a factor of 7 3 larger than that of the preemptive schedule, improving the previous bound of (3 1 m ) <ref> [18] </ref>; * we improve the analysis of Hall et al. to show that the linear programming relaxation that they consider yields a lower bound within a factor of 3:75 of optimal, improving on the bound of (4 1 m ) [8]. <p> Neither of these results gives the best current performance guarantee for an approxima tion algorithm for P jr j j P C j . The current best approximation algorithm for the underlying preemptive problem is a 2-approximation algorithm <ref> [18] </ref>; thus our first technique yields only a 4:666-approximation algorithm. The second technique does improve over the best previously known approximation algorithm, but simultaneously with our discovery of this result we also discovered a (2:89 + *)-approximation algorithm for the problem using rather different techniques [1]. <p> This is currently a very active area of research, and our techniques offer new ideas that we believe may find other applications and lead to further improvements. The analyses of Phillips, Stein, and Wein <ref> [18] </ref> and Hall et al. [8] show, respectively, that the completion time of job j in the schedule found is within a constant factor of the preemptive completion time of j and the LP completion time of j. <p> Let N be the nonpreemptive schedule resulting from the application of List to L. Then C N j1 X p i )=m + p j : Proof. The proof is essentially identical to arguments given by both Phillips, Stein and Wein <ref> [18] </ref> and Hall et al. [8]. Consider the schedule of jobs 1; 2; : : : ; j 1, and suppose that job j is then scheduled to start at time t. <p> We will show that this yields a nonpreemptive schedule with average completion time at most 7 3 times greater. This improves on the bound of (3 1 m ) given by Phillips, Stein and Wein <ref> [18] </ref>. For any preemptive schedule P , let L (P ) denote the set of m jobs with the largest completion times (where ties are broken, for example, by job index).
Reference: [19] <author> M. Queyranne. </author> <title> Structure of a simple scheduling polyhedron. </title> <journal> Mathematical Programming, </journal> (58):263-285, 1993. 
Reference-contexts: The first set of constraints is less intuitive, but can be readily derived by summing over load-based constraints on job completion times [8]. We note that the first set of constraints is exponential in size, but as a consequence of the results of Queyranne <ref> [19] </ref> we can separate over these constraints in polynomial time, and thus an optimal solution to this linear programming relaxation can be obtained in polynomial time.
Reference: [20] <author> M. Queyranne, </author> <year> 1995. </year> <title> Private communication. </title>
Reference-contexts: Their techniques yield improved performance guarantees for many problems, and in some cases, the first constant performance guarantees. In particular, they give a (4 1 m )-approximation algorithm for P jr j j P C j ; this result was discovered independently by Queyranne <ref> [20] </ref>.
Reference: [21] <author> M. Queyranne and A.S. Schulz. </author> <title> Polyhedral approaches to machine scheduling. </title> <type> Technical Report 408/1994, </type> <institution> Technical University of Berlin, </institution> <year> 1994. </year>
Reference-contexts: We note, however, that our 3:75-approximation algorithm can be implemented in O (n log n) time (by applying results of Queyranne and Schulz <ref> [21] </ref> and Goemans [5]) whereas the (2:89 + *)-approximation algorithm is rather computationally intensive. <p> linear programming formulations considered in these results have received a great deal of attention both from the perspective of their strength when used to give lower bounds in computing optimal solutions to small problem instances, and from the perspective of their use in giving polyhedral characterizations of various scheduling problems <ref> [21] </ref>. Until the recent work to which we have referred, these polyhedral formulations have had no worst-case analysis; therefore our results in Section 3.2 create more precise connections between the worst-case analysis of scheduling problems and the study of polyhedral formulations of these problems. <p> More surprisingly, as a consequence of the results of Queyranne and Schulz <ref> [21] </ref> and Goemans [5, 6], an optimal solution to this linear program can actually be obtained in O (n log n) time. For further discussion of this formulation, see [8] or [21]. <p> More surprisingly, as a consequence of the results of Queyranne and Schulz <ref> [21] </ref> and Goemans [5, 6], an optimal solution to this linear program can actually be obtained in O (n log n) time. For further discussion of this formulation, see [8] or [21]. Let C j ; j = 1; : : : ; n, be an optimal solution to the linear program lpc, and renumber the jobs so that C 1 C n .
Reference: [22] <author> A. Schulz and M. Skutella. </author> <title> Randomization strikes in lp-based scheduling: Improved approximations for min-sum criteria. </title> <type> Manuscript., </type> <month> November </month> <year> 1996. </year>
Reference-contexts: 1 Introduction Recently there has been much activity in the development of approximation algorithms for a number of scheduling problems in which the goal is to minimize the average completion time of the jobs scheduled <ref> [2, 3, 6, 8, 9, 17, 18, 22, 23] </ref>. The key idea behind most of these results is that, given certain sorts of relaxations of scheduling problems, a valid schedule can be inferred from a simple ordering that can be easily constructed from these relaxations. <p> Subsequent to the results in this paper, Chekuri et al. [2] gave a 2:85-approximation algorithm that runs in O (n log n) time, and quite recently, Schulz and Skutella have given a randomized O (n log n) 2-approximation algorithm <ref> [22] </ref>. (A consequence of this result is also an improved bound of 2 on the ratio of the optimal nonpreemptive to preemptive schedule.) Our results, however, are important for three reasons. <p> First, the idea of scheduling in a natural order based on a linear programming relaxation in completion-time variables, or related formulations, has found many applications to a number of scheduling problems, e.g., <ref> [1, 2, 3, 6, 8, 17, 22, 24] </ref>. This is currently a very active area of research, and our techniques offer new ideas that we believe may find other applications and lead to further improvements.
Reference: [23] <author> A.S. Schulz. </author> <title> Scheduling to minimize total weighted completion time: performance guarantees of lp based heuristics and lower bounds. </title> <booktitle> In Proceedings of the 5th MPS Conference on Integer Programming and Combinatorial Optimization, </booktitle> <pages> pages 301-315, </pages> <month> June </month> <year> 1996. </year> <note> Published as Lecture Notes in Computer Science 1084, Springer-Verlag. </note>
Reference-contexts: 1 Introduction Recently there has been much activity in the development of approximation algorithms for a number of scheduling problems in which the goal is to minimize the average completion time of the jobs scheduled <ref> [2, 3, 6, 8, 9, 17, 18, 22, 23] </ref>. The key idea behind most of these results is that, given certain sorts of relaxations of scheduling problems, a valid schedule can be inferred from a simple ordering that can be easily constructed from these relaxations. <p> The idea of scheduling in a natural order dictated by a relaxation of the problem has proved to be quite powerful. Inspired by this idea, Hall, Schulz, Shmoys, and Wein in [8], which is a joint journal version of [9] and <ref> [23] </ref>, studied a number of linear programming relaxations of constrained minsum scheduling problems and gave methods to round their solutions to feasible schedules. Their techniques yield improved performance guarantees for many problems, and in some cases, the first constant performance guarantees.
Reference: [24] <author> Y. Wang. </author> <title> Bicriteria job scheduling with release dates. </title> <type> Technical report, </type> <institution> Max-Planck-Institut fur Informatik, Saarbrucken, Germany, </institution> <month> November </month> <year> 1996. </year> <month> 14 </month>
Reference-contexts: First, the idea of scheduling in a natural order based on a linear programming relaxation in completion-time variables, or related formulations, has found many applications to a number of scheduling problems, e.g., <ref> [1, 2, 3, 6, 8, 17, 22, 24] </ref>. This is currently a very active area of research, and our techniques offer new ideas that we believe may find other applications and lead to further improvements.
References-found: 24

