URL: http://www-ccs.cs.umass.edu/rtdb/paper/rtdb96.ps
Refering-URL: http://www-ccs.cs.umass.edu/rtdb/publications.html
Root-URL: 
Email: e-mail:  sivasank-@cs.umass.edu  
Title: Maintaining Temporal Consistency: Issues and Algorithms  
Author: Ming Xiong, John A. Stankovic, Krithi Ramamritham, Don Towsley, Rajendran Sivasankaran stankovic, krithi, towsley, 
Note: -xiong,  
Address: Amherst MA 01003  
Affiliation: Department of Computer Science University of Massachusetts  
Abstract: Although transaction scheduling and concurrency control issues that arise in real-time databases have been studied in detail, insufficient attention has been paid to issues that arise when real-time transactions access data with temporal validity. Such transactions must not only meet their deadlines but also read and use data that correctly reflects the environment. In this paper, we discuss the issues involved in the design of a real-time active database which maintains data temporal consistency. The concept of data-deadline is introduced and time cognizant transaction scheduling algorithms which exploit the semantics of data and trans actions based on data-deadline are proposed.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Robert Abbort and Hector Garcia-Molina, </author> <title> Scheduling Real-Time Transactions: A Performance Evaluation, </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 17, No. 3, </volume> <pages> pp. 513-560, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Such data, typically obtained from sensors, become inaccurate with the passage of time. Examples of such applications include autopilot systems, robot navigation, and program stock trading [13]. While considerable work has been done on real-time databases, most of it only assumes that transactions have deadlines <ref> [1, 7, 8, 10] </ref>. Database systems in which time validity intervals are associated with the data were discussed in [4, 16, 17, 9]. Such systems introduce the need to maintain data temporal consistency in addition to logical consistency.
Reference: [2] <author> B. Adelberg, H. Garcia-Molina and B. Kao, </author> <title> Applying Update Streams in a Soft Real-Time Database System, </title> <booktitle> Proceedings of the 1995 ACM SIGMOD, </booktitle> <pages> pp. 245 - 256, </pages> <year> 1995. </year>
Reference-contexts: In [9], the semantics of data-intensive real-time applications that should maintain data temporal consistency is discussed, and the notion of similarity which is used to provide more flexibility in concurrency control is formalized. Weaker consistency requirements based on the similarity notion are proposed. Other work <ref> [2] </ref> discusses how to keep the database fresh, and at the same time ensure that transactions read valid data and meet their deadlines. Two real-time active database applications are discussed and the applicability of ECA (Event-Condition-Action) paradigm from active databases in these applications is explored in [11].
Reference: [3] <author> B. Adelberg, H. Garcia-Molina and B. Kao, </author> <title> Database Support for Efficiently Maintaining Derived Data, </title> <type> Technical Report, </type> <institution> Stanford University, </institution> <year> 1995. </year>
Reference-contexts: An alternative is to use an update on demand policy as discussed before. However, the drawback of this approach is its latency. Adelberg et. al. <ref> [3] </ref> study the intricate balance between recomputing derived data and transaction execution. They propose a policy which does not permit the recomputation of derived data until a fixed amount of time passes. <p> The scheduling algorithm should maximize the number of user transactions which meet their deadlines while maintaining temporal consistency. Policies that assign priorities to different transaction classes and to transactions within the same class are studied. Similar to <ref> [3] </ref>, four policies can be considered to assign priority to different transaction classes: 1. Assign higher priority to user transactions. 2. Assign lower priority to user transactions. 3.
Reference: [4] <author> N. Audsley, A. Burns, M. Richardson, and A. </author> <note> Wellings, </note>
Reference-contexts: While considerable work has been done on real-time databases, most of it only assumes that transactions have deadlines [1, 7, 8, 10]. Database systems in which time validity intervals are associated with the data were discussed in <ref> [4, 16, 17, 9] </ref>. Such systems introduce the need to maintain data temporal consistency in addition to logical consistency. The performance of several concurrency control algorithms for maintaining temporal consistency is studied in [16, 17]. <p> Otherwise, the decisions made based on the data in the database may be wrong, and potentially disastrous. For example, not only must the data read by transactions be fresh, but also be temporally correlated. This leads to the notion of temporal consistency which consists of two components <ref> [4, 16, 17, 18] </ref>: absolute consistency and relative consistency.
References-found: 4

