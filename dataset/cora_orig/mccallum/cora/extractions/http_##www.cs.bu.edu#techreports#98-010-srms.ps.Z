URL: http://www.cs.bu.edu/techreports/98-010-srms.ps.Z
Refering-URL: http://cs-www.bu.edu/techreports/Home.html
Root-URL: 
Email: fakatlas, bestg@cs.bu.edu  
Title: Statistical Rate Monotonic Scheduling  
Author: Alia K. Atlas and Azer Bestavros 
Keyword: real-time computing and communication; scheduling algorithms and analysis; admission control; operating systems; probabilistic analysis; Quality of Service (QoS) management.  
Note: This work was partially supported by NSF research grant CCR-9706685.  
Address: Boston, MA 02215  
Affiliation: Computer Science Department Boston University  
Abstract: Statistical Rate Monotonic Scheduling (SRMS) is a generalization of the classical RMS results of Liu and Layland [LL73] for periodic tasks with highly variable execution times and statistical QoS requirements. The main tenet of SRMS is that the variability in task resource requirements could be smoothed through aggregation to yield guaranteed QoS. This aggregation is done over time for a given task and across multiple tasks for a given period of time. Similar to RMS, SRMS has two components: a feasibility test and a scheduling algorithm. SRMS feasibility test ensures that it is possible for a given periodic task set to share a given resource without violating any of the statistical QoS constraints imposed on each task in the set. The SRMS scheduling algorithm consists of two parts: a job admission controller and a scheduler. The SRMS scheduler is a simple, preemptive, fixed-priority scheduler. The SRMS job admission controller manages the QoS delivered to the various tasks through admit/reject and priority assignment decisions. In particular, it ensures the important property of task isolation, whereby tasks do not infringe on each other. We have evaluated SRMS against a number of alternative scheduling algorithms suggested in the literature, as well as refinements thereof. Consistently throughout our experiments, SRMS provided the best performance. In addition, to evaluate the optimality of SRMS, we have compared it to an inefficient, yet optimal scheduler for task sets with harmonic periods. 
Abstract-found: 1
Intro-found: 1
Reference: [AB98a] <author> Alia Atlas and Azer Bestavros. </author> <title> Slack stealing job admission control. </title> <type> Technical Report BUCS-TR-98-009, </type> <institution> Boston University, Computer Science Department, </institution> <year> 1998. </year>
Reference-contexts: Finally, no jobs are ever rejected, because the deadlines are soft and all work must be completed. Motivated by the work in [TDS + 95] and [Bin97], we considered a similar approach, Slack Stealing Job Admission Control (SSJAC) <ref> [AB98a] </ref>, where tasks have firm deadlines and slack stealing was used to admit or reject jobs. Associated with each task is a threshold. Jobs with resource requirements below the threshold were automatically admitted. <p> Slack Stealing Job Admission Control: As described in section 2, SSJAC <ref> [AB98a] </ref> uses slack-stealing to determine whether to admit jobs with resource requirements above a set threshold. Like SRMS, when a job is released, it must undergo admission control. If the job's resource requirement is below a preset allowance, then the job is automatically admitted.
Reference: [AB98b] <author> Alia K. Atlas and Azer Bestavros. </author> <title> Maintaining quality of service for multimedia systems using statistical rate monotonic scheduling. </title> <type> Technical Report BUCS-TR-98-011, </type> <institution> Boston University, Computer Science Department, </institution> <year> 1998. </year>
Reference-contexts: The additional complexity is caused by an analysis of the behavior for overlap jobs. Due to space limitations, we do not include this analysis here. Interested readers are referred to the derivations and formulae in <ref> [AB98b] </ref>. 4 Extensions to Basic SRMS In this section we examine a number of extensions that optimize the performance of the Basic SRMS algorithms presented in the previous section. <p> SRMS enforces task isolation, so that no task can adversely affect another task. This permits SRMS to be overload-cognizant on an individual task basis; the responses caused by the overload only affect the misbehaving task. Additionally, quality of service (QoS) guarantees can be specified for each task <ref> [AB98b] </ref>. SRMS also permits intratask fairness; a job with a large resource requirement can still be admitted, and a job with a small resource requirement can be rejected. Our current work focuses on deploying SRMS in working real-time environments.
Reference: [BB97] <author> Guillem Bernat and Alan Burns. </author> <title> Combining (n m)-hard deadlines and dual priority scheduling. </title> <booktitle> In Real-Time Systems Symposium, </booktitle> <pages> pages 46-57, </pages> <year> 1997. </year>
Reference-contexts: This occurs with RMS, when the worst case resource requirement must be used. SRMS is not the first to consider alternatives to hard deadlines. For overloaded systems, Koren and Shasha considered tasks where some portion of the jobs can just be skipped [KS95]. In <ref> [BB97] </ref>, Bernat and Burns expanded the idea of a skip factor to create the idea of ( n m )-Hard deadlines, where in any consecutive m jobs, at least n deadlines must be met.
Reference: [BHS] <author> Sanjoy Baruah, Jayant Haritsa, and Nitin Sharma. </author> <title> On line scheduling to maximize task completions. </title> <note> URL is http://www.emba.uvm.edu/ sanjoy/Papers/cc-jnl.ps. </note>
Reference-contexts: One such goal is to maximize the number of deadlines met (a.k.a. the completion count). Baruah, Haritsa and Sharma proved that on an arbitrary workload, an on-line algorithm can perform arbitrarily bad compared to a perfect knowledge optimal algorithm <ref> [BHS] </ref>. The authors showed better results for restricted workloads. Another goal under overload conditions is for the scheduler to maximize the effective processor utilization (EPU). In that respect, no on-line algorithm can attain a system value larger than one quarter of that obtained by the perfect knowledge optimal algorithm [BHS]. <p> algorithm <ref> [BHS] </ref>. The authors showed better results for restricted workloads. Another goal under overload conditions is for the scheduler to maximize the effective processor utilization (EPU). In that respect, no on-line algorithm can attain a system value larger than one quarter of that obtained by the perfect knowledge optimal algorithm [BHS]. Another possible goal under overload conditions is for the scheduler to complete all mandatory work by discarding unnecessary, optional work [TH97, KS95].
Reference: [Bin97] <author> Pam Binns. </author> <title> Incremental rate monotonic scheduling for improved control system performance. </title> <booktitle> In Real-Time Technology and Applications Symposium, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: Woodbury examined the execution time of real-time tasks in [Woo86]. In [CLL90], Chung, Liu and Lin defined incremental tasks, where the value to the system increases with the amount of time given to the task, until the deadline occurs. In <ref> [Bin97] </ref>, Binns considered incremental tasks and design-to-time tasks, where the time needed by the task can be decided at release time based upon the system availability. In [MC96], Mok and Chen presented the multiframe model, where each task has a sequence of resource requirements which it iterates through. <p> However, the sporadic jobs are served in FIFO order, disregarding any sort of intertask fairness. Finally, no jobs are ever rejected, because the deadlines are soft and all work must be completed. Motivated by the work in [TDS + 95] and <ref> [Bin97] </ref>, we considered a similar approach, Slack Stealing Job Admission Control (SSJAC) [AB98a], where tasks have firm deadlines and slack stealing was used to admit or reject jobs. Associated with each task is a threshold. Jobs with resource requirements below the threshold were automatically admitted.
Reference: [CLL90] <author> Jen-Yao Chung, Jane W. S. Liu, and Kwei-Jay Lin. </author> <title> Scheduling periodic jobs that allow imprecise results. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(9) </volume> <pages> 1156-1174, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: SRMS relaxes the pivotal assumption of RMS|namely that the resource requirement of a periodic task is fixed. Several other relaxations of this assumption have been explored in the literature. Woodbury examined the execution time of real-time tasks in [Woo86]. In <ref> [CLL90] </ref>, Chung, Liu and Lin defined incremental tasks, where the value to the system increases with the amount of time given to the task, until the deadline occurs.
Reference: [HL96] <author> Daniel P. Heyman and T. V. Lakshman. </author> <title> Source models for vbr broadcast-video traffic. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> 4(1) </volume> <pages> 40-48, </pages> <year> 1996. </year>
Reference-contexts: The Pareto distribution is particularly interesting because it is heavy-tailed, and thus suitable in modeling the high variability exhibited in many real-time applications (e.g. frame size distributions for scenes in MPEG video <ref> [HL96] </ref>). For the Pareto distribution, we considered values for ff (the distribution constant) between 0.4 and 1.4. 12 Experiments with Harmonic Task Sets: First, we compare the performance of the various algorithms to those of the oracles we developed for harmonic task sets.
Reference: [HyT97] <author> Ching-Chih Han and Hung ying Tyan. </author> <title> A better polynomial-time schedulability test for real-time fixed-priority scheduling algorithms. </title> <booktitle> In Real-Time Systems Symposium, </booktitle> <pages> pages 36-45, </pages> <year> 1997. </year>
Reference-contexts: This makes many of the schedulability results obtained for RMS applicable to SRMS as well. Examples of such results include the less restrictive, though more complex, schedulability test by Lehoczky, Sha and Ding [LSD89] and the improved polynomial-time schedulability test by Han and Tyan <ref> [HyT97] </ref>. SRMS relaxes the pivotal assumption of RMS|namely that the resource requirement of a periodic task is fixed. Several other relaxations of this assumption have been explored in the literature. Woodbury examined the execution time of real-time tasks in [Woo86].
Reference: [KS95] <author> Gilad Koren and Dennis Shasha. Skip-over: </author> <title> Algorithms and complexity for overloaded systems that allow skips. </title> <booktitle> In Real-Time Systems Symposium, </booktitle> <year> 1995. </year> <month> 21 </month>
Reference-contexts: In [TH97], Tan and Hsu considered the problem of variable resource requirements and overload. Each task, broken into non-preemptible operations, has maximum and minimum frequencies assigned to each operation. These frequencies are similar to the skip factor introduced by Koren and Shasha in <ref> [KS95] </ref>. Feedback determines the actual frequencies assigned, and those frequencies are used by job admission control. This method created variable resource requirements based upon the resources available, according to feedback information. The jobs with these variable resource requirements had hard deadlines. <p> In that respect, no on-line algorithm can attain a system value larger than one quarter of that obtained by the perfect knowledge optimal algorithm [BHS]. Another possible goal under overload conditions is for the scheduler to complete all mandatory work by discarding unnecessary, optional work <ref> [TH97, KS95] </ref>. If there is no optional work to discard, then the system goal is to ensure that all critical tasks meet their deadlines and that a minimum of non-critical tasks miss their deadlines. <p> This occurs with RMS, when the worst case resource requirement must be used. SRMS is not the first to consider alternatives to hard deadlines. For overloaded systems, Koren and Shasha considered tasks where some portion of the jobs can just be skipped <ref> [KS95] </ref>. In [BB97], Bernat and Burns expanded the idea of a skip factor to create the idea of ( n m )-Hard deadlines, where in any consecutive m jobs, at least n deadlines must be met.
Reference: [LL73] <author> C.L. Liu and J.W. Layland. </author> <title> Scheduling algorithms for multiprogramming in a hard-real-time environment. </title> <journal> Journal of the ACM, </journal> <volume> 20(1), </volume> <year> 1973. </year>
Reference-contexts: Under such semantics, a set of periodic tasks is deemed schedulable if every instance of every task in the set is guaranteed to meet its deadline. An optimal fixed-priority algorithm is the classical Rate Monotonic Scheduling (RMS) algorithm of Liu and Layland <ref> [LL73] </ref>. To ensure the satisfaction of the hard deadlines imposed on periodic tasks, RMS requires that either the periodic resource requirement of each task be constant, or the periodic worst-case resource requirement of each task be known a priori.
Reference: [LRT92] <author> John P. Lehoczky and Sandra Ramos-Thuel. </author> <title> An optimal algorithm for scheduling soft-aperiodic tasks in fixed-priority preemptive systems. </title> <booktitle> In Real-Time Systems Symposium. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> Dec </month> <year> 1992. </year>
Reference-contexts: This preserves the high priority of the aperiodic 3 budget. 1 Finally, Thuel and Lehoczky present slack stealing, which keeps exact track of the slack available in the system at every priority <ref> [LRT92, RTL93, RTL94] </ref>. Like EPE, slack stealing has a mechanism for reclaiming unused resource time, known as the slack reclaimer (given by Thuel in her thesis [Thu93]), which credits slack when a job doesn't use all its resource requirement.
Reference: [LSD89] <author> John Lehoczky, Lui Sha, and Ye Ding. </author> <title> The rate monotonic scheduling algorithm: Exact characterization and average case behavior. </title> <booktitle> In Real-Time Systems Symposium, </booktitle> <pages> pages 166-171, </pages> <year> 1989. </year>
Reference-contexts: This makes many of the schedulability results obtained for RMS applicable to SRMS as well. Examples of such results include the less restrictive, though more complex, schedulability test by Lehoczky, Sha and Ding <ref> [LSD89] </ref> and the improved polynomial-time schedulability test by Han and Tyan [HyT97]. SRMS relaxes the pivotal assumption of RMS|namely that the resource requirement of a periodic task is fixed. Several other relaxations of this assumption have been explored in the literature.
Reference: [MC96] <author> Aloysius K. Mok and Deji Chen. </author> <title> A multiframe model for real-time tasks. </title> <booktitle> In Real-Time Systems Symposium. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> Dec </month> <year> 1996. </year>
Reference-contexts: In [Bin97], Binns considered incremental tasks and design-to-time tasks, where the time needed by the task can be decided at release time based upon the system availability. In <ref> [MC96] </ref>, Mok and Chen presented the multiframe model, where each task has a sequence of resource requirements which it iterates through. In [TH97], Tan and Hsu considered the problem of variable resource requirements and overload. Each task, broken into non-preemptible operations, has maximum and minimum frequencies assigned to each operation.
Reference: [MS95] <author> M. Marucheck and J.K. Strosnider. </author> <title> An evaluation of the graceful degradation properties of real-time schedulers. </title> <booktitle> In The Twenty Fifth Annual International Symposium on Fault-Tolerant Computing, </booktitle> <month> June </month> <year> 1995. </year>
Reference-contexts: If there is no optional work to discard, then the system goal is to ensure that all critical tasks meet their deadlines and that a minimum of non-critical tasks miss their deadlines. In <ref> [MS95] </ref>, Marucheck and Strosnider provided a taxonomy of scheduling algorithms with varying levels of overload and criticality cognizance. Dealing with variable execution requirements introduces an unpredictability akin to that introduced when aperiodic tasks are to be executed along with RMS-scheduled periodic tasks. <p> utilization is an average, and some overloaded intervals may occur even when the requested utilization is within the schedulability requirement of RMS. 9 We considered a variety of such distributions as will be evident later in this section. 10 This is the opposite of the job completion rate used in <ref> [MS95] </ref>, which is the average percentage of met deadlines. 13 Definition 9 The requested utilization is the sum of all jobs' resource requirements divided by the time interval during which scheduling occurs.
Reference: [RTL93] <author> Sandra Ramos-Thuel and John P. Lehoczky. </author> <title> On-line scheduling of hard deadline aperiodic tasks in fixed-priority systems. </title> <booktitle> In Real-Time Systems Symposium. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> Dec </month> <year> 1993. </year>
Reference-contexts: This preserves the high priority of the aperiodic 3 budget. 1 Finally, Thuel and Lehoczky present slack stealing, which keeps exact track of the slack available in the system at every priority <ref> [LRT92, RTL93, RTL94] </ref>. Like EPE, slack stealing has a mechanism for reclaiming unused resource time, known as the slack reclaimer (given by Thuel in her thesis [Thu93]), which credits slack when a job doesn't use all its resource requirement.
Reference: [RTL94] <author> Sandra Ramos-Thuel and John P. Lehoczky. </author> <title> Algorithms for scheduling hard aperiodic tasks in fixed-priority systems using slack stealing. </title> <booktitle> In Real-Time Systems Symposium. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> Dec </month> <year> 1994. </year>
Reference-contexts: This preserves the high priority of the aperiodic 3 budget. 1 Finally, Thuel and Lehoczky present slack stealing, which keeps exact track of the slack available in the system at every priority <ref> [LRT92, RTL93, RTL94] </ref>. Like EPE, slack stealing has a mechanism for reclaiming unused resource time, known as the slack reclaimer (given by Thuel in her thesis [Thu93]), which credits slack when a job doesn't use all its resource requirement.
Reference: [SC95] <author> Kang G. Shin and Yi-Chieh Chang. </author> <title> A reservation-based algorithm for scheduling both periodic and aperiodic real-time tasks. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 44 </volume> <pages> 1405-1419, </pages> <month> December </month> <year> 1995. </year>
Reference-contexts: This latter problem has been examined in a number of studies. Shin and Chang considered a polling server modeled as a periodic task with a fixed budget and a preset priority <ref> [SC95] </ref>. Strosnider improved upon the polling server with the deferrable server, which permits the server budget to be spent at any time during its current period [[Str88] in [vTK91]].
Reference: [SLS88] <author> Brinkly Sprunt, John Lehoczky, and Lui Sha. </author> <title> Exploiting unused periodic time for aperiodic service using the extended priority exchange algorithm. </title> <booktitle> In Real-Time Systems Symposium, </booktitle> <year> 1988. </year>
Reference-contexts: The Sporadic Server (SS), presented by Sprunt in [[Spr90] in [vTK91]], has its execution budget replenished based upon how much was consumed since the server last became active. The Extended Priority Exchange (EPE), described by Sprunt, Lehoczky and Sha in <ref> [SLS88] </ref>, exploits the actual variability of task resource requirements to gain more budget for serving aperiodic tasks and exchanges high priority aperiodic time to lower priority periodic time, when no aperiodic works exists.
Reference: [Spr90] <author> B. Sprunt. </author> <title> Aperiodic task scheduling for real-time systems. </title> <type> PhD thesis, </type> <institution> Department of Electrical and Computer Engineering, Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <month> August </month> <year> 1990. </year>
Reference: [Str88] <author> J. K. Strosnider. </author> <title> Highly responsive real-time token rings. </title> <type> PhD thesis, </type> <institution> Department of Electrical and Computer Engineering, Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <month> August </month> <year> 1988. </year>
Reference: [TDS + 95] <author> T.S. Tia, Z. Deng, M. Shankar, M. Storch, J. Sun, L.-C. Wu, and J. W.-S. Liu. </author> <title> Probabilistic performance guarantees for real-time tasks with varying computation times. </title> <booktitle> In Real-Time Technology and Applications Symposium, </booktitle> <pages> pages 164-173, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: They used the ability to skip all non-mandatory jobs to enhance the system's responsiveness to aperiodic tasks. The work of Tia et al. <ref> [TDS + 95] </ref> is most closely related to SRMS in that it considered the problem of scheduling periodic tasks with variable resource requirements and soft deadlines. <p> The other jobs are split into two parts. The first part is considered as a periodic job with a resource requirement equal to the threshold; the second part is considered to be a sporadic job and is scheduled via the sporadic server when the periodic part has completed. In <ref> [TDS + 95] </ref>, an analysis was given for the probability that the sporadic job would meet its deadline. However, the sporadic jobs are served in FIFO order, disregarding any sort of intertask fairness. Finally, no jobs are ever rejected, because the deadlines are soft and all work must be completed. <p> However, the sporadic jobs are served in FIFO order, disregarding any sort of intertask fairness. Finally, no jobs are ever rejected, because the deadlines are soft and all work must be completed. Motivated by the work in <ref> [TDS + 95] </ref> and [Bin97], we considered a similar approach, Slack Stealing Job Admission Control (SSJAC) [AB98a], where tasks have firm deadlines and slack stealing was used to admit or reject jobs. Associated with each task is a threshold. Jobs with resource requirements below the threshold were automatically admitted. <p> discussed in more detail in section 5.2 as we pit it against SRMS for performance comparison purposes. 3 Statistical Rate Monotonic Scheduling 3.1 SRMS Task Model The SRMS task model we use in this paper extends the RMS's task model and the semiperiodic task model given by Tia et al. <ref> [TDS + 95] </ref>. We start with the following basic definitions. <p> Once a job is admitted to the system, it runs completely at its original priority. To reclaim unspent resource time, we used Thuel's slack reclaimer [Thu93]. SSJAC could be considered as an evolution of the transform-task method introduced by Tia et al. in <ref> [TDS + 95] </ref>. For the problem at hand, the performance of SSJAC subsumes that of the transform-task method for many reasons. First, in SSJAC, any job which is not guaranteed to meet its deadline is discarded.
Reference: [TH97] <author> Teik Guan Tan and Wynne Hsu. </author> <title> Scheduling multimedia applications under overload and nondeterministic conditions. </title> <booktitle> In Real-Time Technology and Applications Symposium, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: In [MC96], Mok and Chen presented the multiframe model, where each task has a sequence of resource requirements which it iterates through. In <ref> [TH97] </ref>, Tan and Hsu considered the problem of variable resource requirements and overload. Each task, broken into non-preemptible operations, has maximum and minimum frequencies assigned to each operation. These frequencies are similar to the skip factor introduced by Koren and Shasha in [KS95]. <p> In that respect, no on-line algorithm can attain a system value larger than one quarter of that obtained by the perfect knowledge optimal algorithm [BHS]. Another possible goal under overload conditions is for the scheduler to complete all mandatory work by discarding unnecessary, optional work <ref> [TH97, KS95] </ref>. If there is no optional work to discard, then the system goal is to ensure that all critical tasks meet their deadlines and that a minimum of non-critical tasks miss their deadlines.
Reference: [Thu93] <author> Sandra Ramos Thuel. </author> <title> Enhancing Fault Tolerance of Real-Time Systems through Time Redundancy. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: Like EPE, slack stealing has a mechanism for reclaiming unused resource time, known as the slack reclaimer (given by Thuel in her thesis <ref> [Thu93] </ref>), which credits slack when a job doesn't use all its resource requirement. This occurs with RMS, when the worst case resource requirement must be used. SRMS is not the first to consider alternatives to hard deadlines. <p> Otherwise, the job is rejected. For SSJAC, we chose to calculate the available slack myopically so that no aperiodic servers are necessary. Once a job is admitted to the system, it runs completely at its original priority. To reclaim unspent resource time, we used Thuel's slack reclaimer <ref> [Thu93] </ref>. SSJAC could be considered as an evolution of the transform-task method introduced by Tia et al. in [TDS + 95]. For the problem at hand, the performance of SSJAC subsumes that of the transform-task method for many reasons.
Reference: [vTK91] <author> Andre M. van Tilborg and Gary M. Koob. </author> <title> Foundations of Real-Time Computing Scheduling and Resource Management. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year>
Reference-contexts: Shin and Chang considered a polling server modeled as a periodic task with a fixed budget and a preset priority [SC95]. Strosnider improved upon the polling server with the deferrable server, which permits the server budget to be spent at any time during its current period [[Str88] in <ref> [vTK91] </ref>]. The Sporadic Server (SS), presented by Sprunt in [[Spr90] in [vTK91]], has its execution budget replenished based upon how much was consumed since the server last became active. <p> Strosnider improved upon the polling server with the deferrable server, which permits the server budget to be spent at any time during its current period [[Str88] in <ref> [vTK91] </ref>]. The Sporadic Server (SS), presented by Sprunt in [[Spr90] in [vTK91]], has its execution budget replenished based upon how much was consumed since the server last became active.
Reference: [Woo86] <author> M. Woodbury. </author> <title> Analysis of the execution time of real-time tasks. </title> <booktitle> In Real-Time Systems Symposium, </booktitle> <pages> pages 89-96, </pages> <year> 1986. </year> <month> 22 </month>
Reference-contexts: SRMS relaxes the pivotal assumption of RMS|namely that the resource requirement of a periodic task is fixed. Several other relaxations of this assumption have been explored in the literature. Woodbury examined the execution time of real-time tasks in <ref> [Woo86] </ref>. In [CLL90], Chung, Liu and Lin defined incremental tasks, where the value to the system increases with the amount of time given to the task, until the deadline occurs.
References-found: 25

