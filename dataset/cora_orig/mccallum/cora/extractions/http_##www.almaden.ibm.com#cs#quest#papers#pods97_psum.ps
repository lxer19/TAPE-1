URL: http://www.almaden.ibm.com/cs/quest/papers/pods97_psum.ps
Refering-URL: http://www.almaden.ibm.com/cs/quest/publications.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fho,ragrawalg@almaden.ibm.com  bruck@paradise.caltech.edu  
Title: Partial-Sum Queries in OLAP Data Cubes Using Covering Codes  
Author: Ching-Tien Ho Jehoshua Bruck Rakesh Agrawal 
Address: 650 Harry Road San Jose, CA 95120  Mail Stop 136-93 Pasadena, CA 91125  
Affiliation: IBM Almaden Research Center  California Institute of Technology  
Abstract: A partial-sum query obtains the summation over a set of specified cells of a data cube. We establish a connection between the covering problem in the theory of error-correcting codes and the partial-sum problem and use this connection to devise algorithms for the partial-sum problem with efficient space-time trade-offs. For example, using our algorithms, with 44% additional storage, the query response time can be improved by about 12%; by roughly doubling the storage requirement, the query response time can be improved by about 34%. 
Abstract-found: 1
Intro-found: 1
Reference: [AAD + 96] <author> S. Agarwal, R. Agrawal, P.M. Deshpande, A. Gupta, J.F. Naughton, R. Ramakrishnan, and S. Sarawagi. </author> <title> On the computation of multidimensional aggregates. </title> <booktitle> In Proc. of the 22nd Int'l Conference on Very Large Databases, </booktitle> <pages> pages 506-521, </pages> <address> Mumbai (Bombay), India, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: Related work Following the introduction of the data cube model in [GBLP96], there has been considerable research in developing algorithms for computing the data cube <ref> [AAD + 96] </ref>, for deciding what subset of a data cube to pre-compute [HRU96] [GHRU97], for estimating the size of multidimensional aggregates [SDNR96], and for indexing pre-computed summaries [SR96] [JS96].
Reference: [CLLJ97] <author> G.D. Cohen, S. Litsyn, A.C. Lobstein, and H.F. Mattson Jr. </author> <note> Covering radius 1985-1994. to appear in Journal of Applicable Algebra in Engineering, Communication and Computing, </note> <year> 1997. </year>
Reference-contexts: The main contributions of the paper are as follows. First, we establish the connection between covering codes [GS85] and the partial-sum problem. Second, we apply four known covering codes from [GS85], [CLS86], and <ref> [CLLJ97] </ref> to the partial-sum problem to obtain algorithms with various space-time trade-offs. Third, we modify the requirements on covering codes to better reflect the partial-sum problem and devise new covering codes with respect to the new requirements. <p> Thus, (7; 16; 1) Hamming code also generalizes to (7 + i; 2 i+4 ; 1)- covering codes for all i 0. However, for many n 9, better (n; K; 1)-covering codes than the naive extension from (7; 16; 1) are known [CLS86] <ref> [CLLJ97] </ref>. In particular, (9; 62; 1) is such a code included in [CLLJ97]. 4.3 The (2R + 3; 7; R)-Covering Codes The 7 codewords for (5; 7; 1) code are: f (00000); (00111); (10000); (01000); (11011); (11101); (11110)g: The (5; 7; 1) code is a piecewise constant code given in [CLS86]. <p> However, for many n 9, better (n; K; 1)-covering codes than the naive extension from (7; 16; 1) are known [CLS86] <ref> [CLLJ97] </ref>. In particular, (9; 62; 1) is such a code included in [CLLJ97]. 4.3 The (2R + 3; 7; R)-Covering Codes The 7 codewords for (5; 7; 1) code are: f (00000); (00111); (10000); (01000); (11011); (11101); (11110)g: The (5; 7; 1) code is a piecewise constant code given in [CLS86]. <p> In this paper, we established the connection 9 between the covering problem [GS85] in the theory of error-correcting codes and the partial-sum problem. We use this connection to apply four known covering codes from [GS85], [CLS86], and <ref> [CLLJ97] </ref> to the partial-sum problem to obtain algorithms with various space-time trade-offs. We then modified the requirements on covering codes to better reflect the partial-sum problem and devise new covering codes with respect to the new requirements. As a result, we develop new algorithms with better space-time trade-offs.
Reference: [CLS86] <author> G.D. Cohen, A.C. Lobstein, and N.J.A. Sloane. </author> <title> Further results on the covering radius of codes. </title> <journal> IEEE Trans. Information Theory, </journal> <volume> IT-32(5):680-694, </volume> <month> September </month> <year> 1986. </year>
Reference-contexts: The main contributions of the paper are as follows. First, we establish the connection between covering codes [GS85] and the partial-sum problem. Second, we apply four known covering codes from [GS85], <ref> [CLS86] </ref>, and [CLLJ97] to the partial-sum problem to obtain algorithms with various space-time trade-offs. Third, we modify the requirements on covering codes to better reflect the partial-sum problem and devise new covering codes with respect to the new requirements. <p> Thus, (7; 16; 1) Hamming code also generalizes to (7 + i; 2 i+4 ; 1)- covering codes for all i 0. However, for many n 9, better (n; K; 1)-covering codes than the naive extension from (7; 16; 1) are known <ref> [CLS86] </ref> [CLLJ97]. <p> In particular, (9; 62; 1) is such a code included in [CLLJ97]. 4.3 The (2R + 3; 7; R)-Covering Codes The 7 codewords for (5; 7; 1) code are: f (00000); (00111); (10000); (01000); (11011); (11101); (11110)g: The (5; 7; 1) code is a piecewise constant code given in <ref> [CLS86] </ref>. Through an amalgamated direct sum technique [GS85][CLS86], one can generalize (5; 7; 1) to (2R + 3; 7; R) with c = 2 for all R &gt; 1. 4.4 The (2R + 4; 12; R)-Covering Codes The 12 codewords for (6; 12; 1) code are: f (000100); (000010); (000001); (100111); <p> (2R + 3; 7; R) with c = 2 for all R &gt; 1. 4.4 The (2R + 4; 12; R)-Covering Codes The 12 codewords for (6; 12; 1) code are: f (000100); (000010); (000001); (100111); (010111); (001111); The (6; 12; 1) code is a piecewise constant code given in <ref> [CLS86] </ref>. Through an amalgamated direct sum technique [GS85][CLS86], one can generalize (6; 12; 1) to (2R + 4; 12; R) with c = 3 for all R &gt; 1. 4.5 Results The results of applying the above codes to the partial-sum problem are summarized in Table 4. <p> The construction is based on a modified version of Figure 5 in <ref> [CLS86] </ref>. Each codeword has 2R + 3 bits. We will use Y to denote the all-1 vector (11 1) of length 2R 1 and use Z to denote the all-0 vector (00 0) of length 2R 1. <p> In this paper, we established the connection 9 between the covering problem [GS85] in the theory of error-correcting codes and the partial-sum problem. We use this connection to apply four known covering codes from [GS85], <ref> [CLS86] </ref>, and [CLLJ97] to the partial-sum problem to obtain algorithms with various space-time trade-offs. We then modified the requirements on covering codes to better reflect the partial-sum problem and devise new covering codes with respect to the new requirements. As a result, we develop new algorithms with better space-time trade-offs.
Reference: [CM89] <author> M.C. Chen and L.P. McNamee. </author> <title> The data model and access method of summary data management. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 1(4) </volume> <pages> 519-29, </pages> <year> 1989. </year>
Reference-contexts: Related work also includes work done in the context of statistical databases <ref> [CM89] </ref> on indexing pre-computed aggregates [STL89] and incrementally maintaining them [Mic92]. Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] [GHQ95] [YL95]. However, these works do not directly addresses efficient precomputa-tion techniques for partial-sum queries.
Reference: [Cod93] <author> E. F. Codd. </author> <title> Providing OLAP (on-line analytical processing) to user-analysts: An IT mandate. </title> <note> Technical report, </note> <author> E. F. Codd and Associates, </author> <year> 1993. </year>
Reference-contexts: 1 Introduction On-Line Analytical Processing (OLAP) <ref> [Cod93] </ref> allows companies to analyze aggregate databases built from their data warehouses. An increasingly popular data model for OLAP applications is the multidimensional database (MDDB) [OLA96], also known as data cube [GBLP96]. To build an MDDB from a data warehouse, certain number of attributes are selected.
Reference: [CS94] <author> S. Chaudhuri and K. Shim. </author> <title> Including group-by in query optimization. </title> <booktitle> In Proc. of the 20th Int'l Conference on Very Large Databases, </booktitle> <pages> pages 354-366, </pages> <address> Santiago, Chile, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates [STL89] and incrementally maintaining them [Mic92]. Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries <ref> [CS94] </ref> [GHQ95] [YL95]. However, these works do not directly addresses efficient precomputa-tion techniques for partial-sum queries. Closest to the work presented in this paper is the accompanying paper [HAMS97], in which we consider range-sum queries over data cubes and give fast algorithms for them.
Reference: [GBLP96] <author> J. Gray, A. Bosworth, A. Layman, and H. Pira-hesh. </author> <title> Data cube: A relational aggregation operator generalizing group-by, </title> <booktitle> cross-tabs and subtotals. In Proc. of the 12th Int'l Conference on Data Engineering, </booktitle> <pages> pages 152-159, </pages> <year> 1996. </year>
Reference-contexts: 1 Introduction On-Line Analytical Processing (OLAP) [Cod93] allows companies to analyze aggregate databases built from their data warehouses. An increasingly popular data model for OLAP applications is the multidimensional database (MDDB) [OLA96], also known as data cube <ref> [GBLP96] </ref>. To build an MDDB from a data warehouse, certain number of attributes are selected. Some of these attributes are chosen as metrics of interest and are referred to as the measure attributes. The remaining attributes, say d of them, are referred to as dimensions or the functional attributes. <p> In general, these techniques can be applied to any binary operation op for which there exists an inverse binary operation iop such that a op b iop b = a, for any a and b in the domain. Related work Following the introduction of the data cube model in <ref> [GBLP96] </ref>, there has been considerable research in developing algorithms for computing the data cube [AAD + 96], for deciding what subset of a data cube to pre-compute [HRU96] [GHRU97], for estimating the size of multidimensional aggregates [SDNR96], and for indexing pre-computed summaries [SR96] [JS96].
Reference: [GHQ95] <author> A. Gupta, V. Harinarayan, and D. Quass. </author> <title> Aggregate-query processing in data warehousing environments. </title> <booktitle> In Proceedings of the Eighth International Conference on Very Large Databases (VLDB), </booktitle> <pages> pages 358-369, </pages> <address> Zurich, Switzerland, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates [STL89] and incrementally maintaining them [Mic92]. Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] <ref> [GHQ95] </ref> [YL95]. However, these works do not directly addresses efficient precomputa-tion techniques for partial-sum queries. Closest to the work presented in this paper is the accompanying paper [HAMS97], in which we consider range-sum queries over data cubes and give fast algorithms for them.
Reference: [GHRU97] <author> Himanshu Gupta, Venky Harinarayan, Anand Rajaraman, and Jeffrey D. Ullman. </author> <title> Index selection for OLAP. </title> <booktitle> In Proc. of the 13th Int'l Conference on Data Engineering, </booktitle> <address> Birmingham, U.K., </address> <month> April </month> <year> 1997. </year>
Reference-contexts: Related work Following the introduction of the data cube model in [GBLP96], there has been considerable research in developing algorithms for computing the data cube [AAD + 96], for deciding what subset of a data cube to pre-compute [HRU96] <ref> [GHRU97] </ref>, for estimating the size of multidimensional aggregates [SDNR96], and for indexing pre-computed summaries [SR96] [JS96]. Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates [STL89] and incrementally maintaining them [Mic92].
Reference: [GS85] <author> R.L. Graham and N.J.A. Sloane. </author> <title> On the covering radius of codes. </title> <journal> IEEE Trans. Information Theory, </journal> <volume> IT-31(3):385-401, </volume> <month> May </month> <year> 1985. </year>
Reference-contexts: Another entry (s; t) = (2:17; 0:33) means that if we roughly double the storage requirement, the query response time can be improved by about 34%. The main contributions of the paper are as follows. First, we establish the connection between covering codes <ref> [GS85] </ref> and the partial-sum problem. Second, we apply four known covering codes from [GS85], [CLS86], and [CLLJ97] to the partial-sum problem to obtain algorithms with various space-time trade-offs. <p> The main contributions of the paper are as follows. First, we establish the connection between covering codes <ref> [GS85] </ref> and the partial-sum problem. Second, we apply four known covering codes from [GS85], [CLS86], and [CLLJ97] to the partial-sum problem to obtain algorithms with various space-time trade-offs. Third, we modify the requirements on covering codes to better reflect the partial-sum problem and devise new covering codes with respect to the new requirements. <p> This results in further improvement in space and time overheads in solving the partial sum problem. Section 7 discusses partial-sum queries over multi-dimensional cubes. We conclude with a summary in Section 8. 2 Covering Codes In this section, we briefly review some concepts from the theory of error-correcting codes <ref> [GS85] </ref> that are pertinent to the partial-sum problem. A code is a set of codewords where each codeword defines a valid string of digits. For the purposes of this paper, we are only interested in binary codes of fixed length. <p> These are the only codes that yielded useful (s; t)-pairs amongst all the codes we examined. 4.1 The (7 + 2i; 16; i + 1)-Covering Codes It was shown in <ref> [GS85] </ref> that an (n; K; R)-covering code can be generalized to the class of (n+2i; K; R+i)-covering codes for all i 0, provided that the (n; K; R) code is linear and normal (see the definition in [GS85]). <p> The (7 + 2i; 16; i + 1)-Covering Codes It was shown in <ref> [GS85] </ref> that an (n; K; R)-covering code can be generalized to the class of (n+2i; K; R+i)-covering codes for all i 0, provided that the (n; K; R) code is linear and normal (see the definition in [GS85]). <p> Note the leftmost (s; t) data point has been changed from (1; 0:5) in Figure 1 to (1; 0:25) in this figure. 8 Summary Partial-sum queries obtain the summation over specified cells of a data cube. In this paper, we established the connection 9 between the covering problem <ref> [GS85] </ref> in the theory of error-correcting codes and the partial-sum problem. We use this connection to apply four known covering codes from [GS85], [CLS86], and [CLLJ97] to the partial-sum problem to obtain algorithms with various space-time trade-offs. <p> In this paper, we established the connection 9 between the covering problem <ref> [GS85] </ref> in the theory of error-correcting codes and the partial-sum problem. We use this connection to apply four known covering codes from [GS85], [CLS86], and [CLLJ97] to the partial-sum problem to obtain algorithms with various space-time trade-offs. We then modified the requirements on covering codes to better reflect the partial-sum problem and devise new covering codes with respect to the new requirements.
Reference: [HAMS97] <author> Ching-Tien Ho, Rakesh Agrawal, Nimrod Megiddo, and Ramakrishnan Srikant. </author> <title> Range queries in OLAP data cubes. </title> <booktitle> In Proc. of the ACM SIGMOD Conference on Management of Data, </booktitle> <month> May </month> <year> 1997. </year>
Reference-contexts: Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] [GHQ95] [YL95]. However, these works do not directly addresses efficient precomputa-tion techniques for partial-sum queries. Closest to the work presented in this paper is the accompanying paper <ref> [HAMS97] </ref>, in which we consider range-sum queries over data cubes and give fast algorithms for them. A range-sum query obtains the sum over all selected cells of a data cube where the selection is specified by providing contiguous ranges of values for numeric dimensions.
Reference: [HRU96] <author> V. Harinarayan, A. Rajaraman, and J.D. Ull-man. </author> <title> Implementing data cubes efficiently. </title> <booktitle> In Proc. of the ACM SIGMOD Conference on Management of Data, </booktitle> <month> June </month> <year> 1996. </year>
Reference-contexts: Related work Following the introduction of the data cube model in [GBLP96], there has been considerable research in developing algorithms for computing the data cube [AAD + 96], for deciding what subset of a data cube to pre-compute <ref> [HRU96] </ref> [GHRU97], for estimating the size of multidimensional aggregates [SDNR96], and for indexing pre-computed summaries [SR96] [JS96]. Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates [STL89] and incrementally maintaining them [Mic92].
Reference: [JS96] <author> T. Johnson and D. Shasha. </author> <title> Hierarchically split cube forests for decision support: </title> <booktitle> description and tuned design, </booktitle> <year> 1996. </year> <note> Working Paper. </note>
Reference-contexts: introduction of the data cube model in [GBLP96], there has been considerable research in developing algorithms for computing the data cube [AAD + 96], for deciding what subset of a data cube to pre-compute [HRU96] [GHRU97], for estimating the size of multidimensional aggregates [SDNR96], and for indexing pre-computed summaries [SR96] <ref> [JS96] </ref>. Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates [STL89] and incrementally maintaining them [Mic92]. Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] [GHQ95] [YL95].
Reference: [Lom95] <author> D. Lomet, </author> <title> editor. Special Issue on Materialized Views and Data Warehousing. </title> <journal> IEEE Data Engineering Bulletin, </journal> <volume> 18(2), </volume> <month> June </month> <year> 1995. </year>
Reference-contexts: Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates [STL89] and incrementally maintaining them [Mic92]. Also relevant is the work on maintenance of materialized views <ref> [Lom95] </ref> and processing of aggregation queries [CS94] [GHQ95] [YL95]. However, these works do not directly addresses efficient precomputa-tion techniques for partial-sum queries. Closest to the work presented in this paper is the accompanying paper [HAMS97], in which we consider range-sum queries over data cubes and give fast algorithms for them.
Reference: [Mic92] <author> Z. Michalewicz. </author> <title> Statistical and Scientific Databases. </title> <publisher> Ellis Horwood, </publisher> <year> 1992. </year>
Reference-contexts: Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates [STL89] and incrementally maintaining them <ref> [Mic92] </ref>. Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] [GHQ95] [YL95]. However, these works do not directly addresses efficient precomputa-tion techniques for partial-sum queries.
Reference: [OLA96] <author> The OLAP Council. </author> <title> MD-API the OLAP Application Program Interface Version 0.5 Specification, </title> <month> September </month> <year> 1996. </year>
Reference-contexts: 1 Introduction On-Line Analytical Processing (OLAP) [Cod93] allows companies to analyze aggregate databases built from their data warehouses. An increasingly popular data model for OLAP applications is the multidimensional database (MDDB) <ref> [OLA96] </ref>, also known as data cube [GBLP96]. To build an MDDB from a data warehouse, certain number of attributes are selected. Some of these attributes are chosen as metrics of interest and are referred to as the measure attributes.
Reference: [SDNR96] <author> A. Shukla, P.M. Deshpande, J.F. Naughton, and K. Ramasamy. </author> <title> Storage estimation for multidimensional aggregates in the presence of hierarchies. </title> <booktitle> In Proc. of the 22nd Int'l Conference on Very Large Databases, </booktitle> <pages> pages 522-531, </pages> <address> Mumbai (Bombay), India, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: Related work Following the introduction of the data cube model in [GBLP96], there has been considerable research in developing algorithms for computing the data cube [AAD + 96], for deciding what subset of a data cube to pre-compute [HRU96] [GHRU97], for estimating the size of multidimensional aggregates <ref> [SDNR96] </ref>, and for indexing pre-computed summaries [SR96] [JS96]. Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates [STL89] and incrementally maintaining them [Mic92]. Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] [GHQ95] [YL95].
Reference: [SR96] <author> B. Salzberg and A. Reuter. </author> <title> Indexing for aggregation, </title> <note> 1996. Working Paper. </note>
Reference-contexts: the introduction of the data cube model in [GBLP96], there has been considerable research in developing algorithms for computing the data cube [AAD + 96], for deciding what subset of a data cube to pre-compute [HRU96] [GHRU97], for estimating the size of multidimensional aggregates [SDNR96], and for indexing pre-computed summaries <ref> [SR96] </ref> [JS96]. Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates [STL89] and incrementally maintaining them [Mic92]. Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] [GHQ95] [YL95].
Reference: [STL89] <author> J. Srivastava, J.S.E. Tan, and V.Y. Lum. TB-SAM: </author> <title> An access method for efficient processing of statistical queries. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 1(4), </volume> <year> 1989. </year>
Reference-contexts: Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates <ref> [STL89] </ref> and incrementally maintaining them [Mic92]. Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] [GHQ95] [YL95]. However, these works do not directly addresses efficient precomputa-tion techniques for partial-sum queries.
Reference: [YL95] <author> W. P. Yan and P. Larson. </author> <title> Eager aggregation and lazy aggregation. </title> <booktitle> In Proceedings of the Eighth International Conference on Very Large Databases (VLDB), </booktitle> <pages> pages 345-357, </pages> <address> Zurich, Switzerland, </address> <month> September </month> <year> 1995. </year> <month> 10 </month>
Reference-contexts: Related work also includes work done in the context of statistical databases [CM89] on indexing pre-computed aggregates [STL89] and incrementally maintaining them [Mic92]. Also relevant is the work on maintenance of materialized views [Lom95] and processing of aggregation queries [CS94] [GHQ95] <ref> [YL95] </ref>. However, these works do not directly addresses efficient precomputa-tion techniques for partial-sum queries. Closest to the work presented in this paper is the accompanying paper [HAMS97], in which we consider range-sum queries over data cubes and give fast algorithms for them.
References-found: 20

