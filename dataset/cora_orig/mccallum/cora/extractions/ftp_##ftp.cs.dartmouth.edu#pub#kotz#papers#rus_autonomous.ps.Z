URL: ftp://ftp.cs.dartmouth.edu/pub/kotz/papers/rus:autonomous.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/~agent/papers/index.html
Root-URL: http://www.cs.dartmouth.edu
Email: frus,rgray,dfkg@cs.dartmouth.edu  
Author: Daniela Rus, Robert Gray, and David Kotz 
Address: Hanover, NH 03755  
Affiliation: Department of Computer Science Dartmouth College  
Abstract: In AAAI '96 International Workshop on Intelligent Adaptive Agents. Proceedings available as AAAI technical report WS-96-04. Paper available at ftp://ftp.cs.dartmouth.edu/kotz/papers/rus:autonomous.ps.Z. Autonomous and Adaptive Agents Abstract We have designed and implemented autonomous software agents. Our agents are programs that can move independently through a heterogeneous network of computers. They can sense the state of the network, monitor software conditions, and interact with other agents. The network-sensing tools allow our agents to adapt to the network configuration and to navigate under the control of reactive plans. In this paper we illustrate the intelligent and adaptive behavior of autonomous agents in distributed information-gathering tasks. that Gather Information
Abstract-found: 1
Intro-found: 1
Reference: [BN84] <author> A. Birrell and B. Nelson, </author> <title> Implementing remote procedure calls, </title> <journal> in ACM Transactions on Computer Systems, </journal> <volume> 2(1) </volume> <pages> 39-59, </pages> <month> February </month> <year> 1984. </year>
Reference-contexts: Remote Procedure Call (RPC) <ref> [BN84] </ref> was an early form of remote client-server processing. Falcone [Fal87] discusses a distributed-system in which a programming language provides a remote service interface as an alternative to RPC calls. Stamos and Gifford [SG90] introduce the concept of Remote Evaluation (REV), in which servers are viewed as programmable processors.
Reference: [EW94] <author> O. Etzioni and D. Weld, </author> <title> A softbot-based interface to the Internet, </title> <journal> in Communications of the ACM, </journal> <volume> 37(7) </volume> <pages> 72-76, </pages> <year> 1994. </year>
Reference-contexts: Prototypes of transportable agent systems are described in [KK94, Gra95, Gra96, JRS95]. In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. Agents are called knowbots by [KC86], softbots by <ref> [EW94] </ref>, sodabots by [KSC94], software agents by [GK94], personal assistants by [Mae94, MCF94], and information agents by [RS93]. We are interested in the same class of tasks as [EW94, Mae94, MCF94, KSC94]. Etzioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. <p> Agents are called knowbots by [KC86], softbots by [EW94], sodabots by [KSC94], software agents by [GK94], personal assistants by [Mae94, MCF94], and information agents by [RS93]. We are interested in the same class of tasks as <ref> [EW94, Mae94, MCF94, KSC94] </ref>. Etzioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes [MCF94, Mae94] study the interaction between users and agents and propose statistical and machine-learning methods for building user models to control the agent actions. <p> Agents are called knowbots by [KC86], softbots by <ref> [EW94] </ref>, sodabots by [KSC94], software agents by [GK94], personal assistants by [Mae94, MCF94], and information agents by [RS93]. We are interested in the same class of tasks as [EW94, Mae94, MCF94, KSC94]. Etzioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes [MCF94, Mae94] study the interaction between users and agents and propose statistical and machine-learning methods for building user models to control the agent actions.
Reference: [Fal87] <author> J. Falcone, </author> <title> A programmable interface language for heterogeneous distributed systems, </title> <journal> in ACM Transactions on Computer Systems, </journal> <volume> 5(4) </volume> <pages> 330-351, </pages> <year> 1987. </year>
Reference-contexts: Remote Procedure Call (RPC) [BN84] was an early form of remote client-server processing. Falcone <ref> [Fal87] </ref> discusses a distributed-system in which a programming language provides a remote service interface as an alternative to RPC calls. Stamos and Gifford [SG90] introduce the concept of Remote Evaluation (REV), in which servers are viewed as programmable processors.
Reference: [GK94] <author> M. Genesereth and S. Ketchpel, </author> <title> Software agents, </title> <journal> in Communications of the ACM, </journal> <volume> 37(7) </volume> <pages> 48-53, </pages> <year> 1994. </year>
Reference-contexts: Prototypes of transportable agent systems are described in [KK94, Gra95, Gra96, JRS95]. In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. Agents are called knowbots by [KC86], softbots by [EW94], sodabots by [KSC94], software agents by <ref> [GK94] </ref>, personal assistants by [Mae94, MCF94], and information agents by [RS93]. We are interested in the same class of tasks as [EW94, Mae94, MCF94, KSC94]. Etzioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts.
Reference: [Gra95] <author> R. Gray, </author> <title> Agent Tcl, </title> <booktitle> in Proceedings of the CIKM Workshop on Intelligent Agents, </booktitle> <address> Baltimore, MD, </address> <year> 1995. </year>
Reference-contexts: Stamos and Gifford [SG90] introduce the concept of Remote Evaluation (REV), in which servers are viewed as programmable processors. The Telescript technology introduced by General Magic, Inc. in 1994 was the first commercial description of transportable agents [Whi94]. Prototypes of transportable agent systems are described in <ref> [KK94, Gra95, Gra96, JRS95] </ref>. In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. <p> Rus and Subramanian [RS93, RS96] propose a modular, open, and customizable agent architecture organized around a notion of structure recognition. In our previous work <ref> [Gra95, Gra96, NCK96, GKNRC95, KGR96] </ref> we describe other aspects of Agent Tcl. 3 Transportable Agents Autonomous agents should move independently. A transportable agent is a program that can migrate under its own control from machine to machine in a heterogeneous network. <p> We are currently addressing these issues. 3.1 Agent Tcl: a system for transportable agents Agent Tcl <ref> [Gra95] </ref> will reduce migration to a single instruction, provide transparent communication among agents, support multiple languages and transport mechanisms, run on generic platforms, and provide effective security, fault tolerance and performance. In the current implementation, agents are written in a modified version of the Tool Command Language (Tcl) [Ous94].
Reference: [Gra96] <author> R. Gray, </author> <title> Agent Tcl: A transportable agent system, </title> <booktitle> in Proceedings of the Fourth Annual Tcl/Tk Workshop, </booktitle> <address> Monterey, Ca, </address> <year> 1996. </year>
Reference-contexts: Stamos and Gifford [SG90] introduce the concept of Remote Evaluation (REV), in which servers are viewed as programmable processors. The Telescript technology introduced by General Magic, Inc. in 1994 was the first commercial description of transportable agents [Whi94]. Prototypes of transportable agent systems are described in <ref> [KK94, Gra95, Gra96, JRS95] </ref>. In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. <p> Rus and Subramanian [RS93, RS96] propose a modular, open, and customizable agent architecture organized around a notion of structure recognition. In our previous work <ref> [Gra95, Gra96, NCK96, GKNRC95, KGR96] </ref> we describe other aspects of Agent Tcl. 3 Transportable Agents Autonomous agents should move independently. A transportable agent is a program that can migrate under its own control from machine to machine in a heterogeneous network.
Reference: [GKNRC95] <author> R. Gray, D. Kotz, S. Nog, D. Rus, and G. Cybenko, </author> <title> Mobile Agents for Mobile Computing, </title> <note> submitted to the ACM/IEEE MobiCom'96. Also available as Technical Report PCS-TR96-285, </note> <institution> Department of Computer Science, Dart-mouth College, </institution> <year> 1996. </year>
Reference-contexts: This capability supports distributed information-processing applications on mobile computers such as laptops. Third, the network sensing capabilities enable agents to autonomously find the host computer, even when the host changes its geographical location. Our work on using mobile agents for mobile computing is described in <ref> [GKNRC95] </ref>. Fourth, the network software- and hardware-sensing capabilities permit transportable agents to be driven by reactive plans. <p> Rus and Subramanian [RS93, RS96] propose a modular, open, and customizable agent architecture organized around a notion of structure recognition. In our previous work <ref> [Gra95, Gra96, NCK96, GKNRC95, KGR96] </ref> we describe other aspects of Agent Tcl. 3 Transportable Agents Autonomous agents should move independently. A transportable agent is a program that can migrate under its own control from machine to machine in a heterogeneous network.
Reference: [JRS95] <author> D. Johansen, R. van Renesse, and F. Schneider, </author> <title> Operating system support for mobile agents, </title> <booktitle> in Proceedings of the 5th IEEE Workshop on Hot Topics in Operating Systems, </booktitle> <year> 1995. </year>
Reference-contexts: Stamos and Gifford [SG90] introduce the concept of Remote Evaluation (REV), in which servers are viewed as programmable processors. The Telescript technology introduced by General Magic, Inc. in 1994 was the first commercial description of transportable agents [Whi94]. Prototypes of transportable agent systems are described in <ref> [KK94, Gra95, Gra96, JRS95] </ref>. In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents.
Reference: [KC86] <author> R. Kahn and V. Cerf, </author> <title> The World of Knowbots, report to the Corporation for National Research Initiative, </title> <address> Arlington, VA, </address> <year> 1988. </year>
Reference-contexts: Prototypes of transportable agent systems are described in [KK94, Gra95, Gra96, JRS95]. In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. Agents are called knowbots by <ref> [KC86] </ref>, softbots by [EW94], sodabots by [KSC94], software agents by [GK94], personal assistants by [Mae94, MCF94], and information agents by [RS93]. We are interested in the same class of tasks as [EW94, Mae94, MCF94, KSC94].
Reference: [KSC94] <author> H. Kautz, B. Selman, and M. Coen, </author> <title> Bottom-up design of software agents, </title> <journal> in Communications of the ACM, </journal> <volume> 37(7) </volume> <pages> 143-145, </pages> <year> 1994. </year>
Reference-contexts: Prototypes of transportable agent systems are described in [KK94, Gra95, Gra96, JRS95]. In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. Agents are called knowbots by [KC86], softbots by [EW94], sodabots by <ref> [KSC94] </ref>, software agents by [GK94], personal assistants by [Mae94, MCF94], and information agents by [RS93]. We are interested in the same class of tasks as [EW94, Mae94, MCF94, KSC94]. Etzioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. <p> Agents are called knowbots by [KC86], softbots by [EW94], sodabots by [KSC94], software agents by [GK94], personal assistants by [Mae94, MCF94], and information agents by [RS93]. We are interested in the same class of tasks as <ref> [EW94, Mae94, MCF94, KSC94] </ref>. Etzioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes [MCF94, Mae94] study the interaction between users and agents and propose statistical and machine-learning methods for building user models to control the agent actions.
Reference: [KK94] <author> K. Kotay and D. Kotz, </author> <title> Transportable agents, </title> <booktitle> in Workshop on Intelligent Information Agents, </booktitle> <month> December </month> <year> 1994. </year>
Reference-contexts: Stamos and Gifford [SG90] introduce the concept of Remote Evaluation (REV), in which servers are viewed as programmable processors. The Telescript technology introduced by General Magic, Inc. in 1994 was the first commercial description of transportable agents [Whi94]. Prototypes of transportable agent systems are described in <ref> [KK94, Gra95, Gra96, JRS95] </ref>. In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents.
Reference: [KGR96] <author> D. Kotz, R. Gray, and D. </author> <title> Rus, Transportable Agents Support Worldwide Applications, </title> <booktitle> in Proceedings of SIGOPS96, </booktitle> <year> 1996. </year> <note> To appear. </note>
Reference-contexts: Rus and Subramanian [RS93, RS96] propose a modular, open, and customizable agent architecture organized around a notion of structure recognition. In our previous work <ref> [Gra95, Gra96, NCK96, GKNRC95, KGR96] </ref> we describe other aspects of Agent Tcl. 3 Transportable Agents Autonomous agents should move independently. A transportable agent is a program that can migrate under its own control from machine to machine in a heterogeneous network.
Reference: [Mae94] <author> P. Maes, </author> <title> Agents that reduce work and information overload, </title> <journal> in Communications of the ACM, </journal> <volume> 37(7) </volume> <pages> 31-40, </pages> <year> 1994. </year>
Reference-contexts: In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. Agents are called knowbots by [KC86], softbots by [EW94], sodabots by [KSC94], software agents by [GK94], personal assistants by <ref> [Mae94, MCF94] </ref>, and information agents by [RS93]. We are interested in the same class of tasks as [EW94, Mae94, MCF94, KSC94]. Etzioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. <p> Agents are called knowbots by [KC86], softbots by [EW94], sodabots by [KSC94], software agents by [GK94], personal assistants by [Mae94, MCF94], and information agents by [RS93]. We are interested in the same class of tasks as <ref> [EW94, Mae94, MCF94, KSC94] </ref>. Etzioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes [MCF94, Mae94] study the interaction between users and agents and propose statistical and machine-learning methods for building user models to control the agent actions. <p> We are interested in the same class of tasks as [EW94, Mae94, MCF94, KSC94]. Etzioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes <ref> [MCF94, Mae94] </ref> study the interaction between users and agents and propose statistical and machine-learning methods for building user models to control the agent actions. Rus and Subramanian [RS93, RS96] propose a modular, open, and customizable agent architecture organized around a notion of structure recognition.
Reference: [MCF94] <author> T. Mitchell, R. Caruana, D. Freitag, J. McDermott, and D. Zabowski, </author> <title> Experience with a learning personal assistant, </title> <journal> in Communications of the ACM, </journal> <volume> 37(7) </volume> <pages> 81-91, </pages> <year> 1994. </year>
Reference-contexts: In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. Agents are called knowbots by [KC86], softbots by [EW94], sodabots by [KSC94], software agents by [GK94], personal assistants by <ref> [Mae94, MCF94] </ref>, and information agents by [RS93]. We are interested in the same class of tasks as [EW94, Mae94, MCF94, KSC94]. Etzioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. <p> Agents are called knowbots by [KC86], softbots by [EW94], sodabots by [KSC94], software agents by [GK94], personal assistants by [Mae94, MCF94], and information agents by [RS93]. We are interested in the same class of tasks as <ref> [EW94, Mae94, MCF94, KSC94] </ref>. Etzioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes [MCF94, Mae94] study the interaction between users and agents and propose statistical and machine-learning methods for building user models to control the agent actions. <p> We are interested in the same class of tasks as [EW94, Mae94, MCF94, KSC94]. Etzioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes <ref> [MCF94, Mae94] </ref> study the interaction between users and agents and propose statistical and machine-learning methods for building user models to control the agent actions. Rus and Subramanian [RS93, RS96] propose a modular, open, and customizable agent architecture organized around a notion of structure recognition.
Reference: [NCK96] <author> S. Nog, S. Chawala, and D. Kotz, </author> <title> An RPC mechanism for transportable agents, </title> <type> Technical Report PCS-TR96-280, </type> <institution> Department of Computer Science, Dartmouth College, </institution> <year> 1996. </year>
Reference-contexts: Rus and Subramanian [RS93, RS96] propose a modular, open, and customizable agent architecture organized around a notion of structure recognition. In our previous work <ref> [Gra95, Gra96, NCK96, GKNRC95, KGR96] </ref> we describe other aspects of Agent Tcl. 3 Transportable Agents Autonomous agents should move independently. A transportable agent is a program that can migrate under its own control from machine to machine in a heterogeneous network. <p> The server restores the state image and the Tcl script continues execution on the new machine from the exact point at which it left off. The Tcl scripts can communicate via message passing, or remote procedure call <ref> [NCK96] </ref>.
Reference: [Ous94] <author> J. Ousterhout, </author> <title> Tcl and the Tk Toolkit, </title> <publisher> in Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1994. </year>
Reference-contexts: In the current implementation, agents are written in a modified version of the Tool Command Language (Tcl) <ref> [Ous94] </ref>. Tcl is a high-level scripting language and is an attractive agent language since it is highly portable, easy to use, and easy to make secure (due to the large amount of existing work that addresses the problem of executing a Tcl program from an untrusted source).
Reference: [RS93] <author> D. Rus and D. Subramanian, </author> <title> Multi-media RISSC Informatics: Retrieving Information with Simple Structural Components, </title> <booktitle> in Proceedings of the ACM Conference on Information and Knowledge Management, </booktitle> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. Agents are called knowbots by [KC86], softbots by [EW94], sodabots by [KSC94], software agents by [GK94], personal assistants by [Mae94, MCF94], and information agents by <ref> [RS93] </ref>. We are interested in the same class of tasks as [EW94, Mae94, MCF94, KSC94]. Etzioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. <p> Etzioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes [MCF94, Mae94] study the interaction between users and agents and propose statistical and machine-learning methods for building user models to control the agent actions. Rus and Subramanian <ref> [RS93, RS96] </ref> propose a modular, open, and customizable agent architecture organized around a notion of structure recognition. In our previous work [Gra95, Gra96, NCK96, GKNRC95, KGR96] we describe other aspects of Agent Tcl. 3 Transportable Agents Autonomous agents should move independently.
Reference: [RS96] <author> D. Rus and D. Subramanian, </author> <title> Information Retrieval, Information Structure, and Information Agents, </title> <note> to appear, ACM Transactions on Information Systems, </note> <year> 1996. </year>
Reference-contexts: Etzioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes [MCF94, Mae94] study the interaction between users and agents and propose statistical and machine-learning methods for building user models to control the agent actions. Rus and Subramanian <ref> [RS93, RS96] </ref> propose a modular, open, and customizable agent architecture organized around a notion of structure recognition. In our previous work [Gra95, Gra96, NCK96, GKNRC95, KGR96] we describe other aspects of Agent Tcl. 3 Transportable Agents Autonomous agents should move independently.
Reference: [Sal91] <author> G. Salton. </author> <title> The Smart document retrieval project. </title> <booktitle> In Proceedings of the Fourteenth Annual International ACM/SIGIR Conference on Research and Development in Information Retrieval, </booktitle> <pages> pages 356-358, </pages> <year> 1991. </year>
Reference-contexts: A simplified version of this agent appears at bottom. The network location of the various agents is shown at top. file-watch looks at the size of the file and compares the content of the file against a query or a previous version of the file using information retrieval techniques <ref> [Sal91] </ref>. 5 Navigation Agents implemented in Agent Tcl have the ability to move by themselves through a network. But where should they go? Agents need either a partial model or partial knowledge of both the task and the environment. <p> In distributed information gathering, a distributed collection of corpora is searched based on a query and the results extracted from each site are fused in a coherent picture. We have built information-gathering agents and Smart agents that interface with the Smart information retrieval system <ref> [Sal91] </ref>. 2 Our data is a distributed collection of Smart repositories running the Smart system. Each collection consists of computer science technical reports. For a given query, an information agent visits a sequence of sites and interacts with the local Smart agent to search the local collection. <p> Our agents can be viewed as virtual robots that are equipped with virtual sensors and effectors and are capable of maintaining internal state, registering external state, and interacting with their environment. 2 The Smart system is a successful statistical information-retrieval system <ref> [Sal91] </ref> that uses the vector-space model to measure the textual similarity between documents. The idea of the vector-space model is that each word that occurs in a collection defines an axis in the space of all words in the collection.
Reference: [SG90] <author> J. Stamos and D. Gifford, </author> <title> Remote execution, </title> <journal> in ACM Transactions on Programming Languages and Systems, </journal> <volume> 12(4) </volume> <pages> 537-565, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Remote Procedure Call (RPC) [BN84] was an early form of remote client-server processing. Falcone [Fal87] discusses a distributed-system in which a programming language provides a remote service interface as an alternative to RPC calls. Stamos and Gifford <ref> [SG90] </ref> introduce the concept of Remote Evaluation (REV), in which servers are viewed as programmable processors. The Telescript technology introduced by General Magic, Inc. in 1994 was the first commercial description of transportable agents [Whi94]. Prototypes of transportable agent systems are described in [KK94, Gra95, Gra96, JRS95].
Reference: [Whi94] <author> J. E. White, </author> <title> Telescript technology: The foundation for the electronic marketplace, General Magic White Paper, General Magic, </title> <publisher> Inc., </publisher> <year> 1994. </year>
Reference-contexts: Stamos and Gifford [SG90] introduce the concept of Remote Evaluation (REV), in which servers are viewed as programmable processors. The Telescript technology introduced by General Magic, Inc. in 1994 was the first commercial description of transportable agents <ref> [Whi94] </ref>. Prototypes of transportable agent systems are described in [KK94, Gra95, Gra96, JRS95]. In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents.
References-found: 21

