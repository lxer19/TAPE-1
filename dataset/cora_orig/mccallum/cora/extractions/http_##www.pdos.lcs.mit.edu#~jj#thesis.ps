URL: http://www.pdos.lcs.mit.edu/~jj/thesis.ps
Refering-URL: http://www.pdos.lcs.mit.edu/~jj/
Root-URL: 
Title: Applying Exokernel Principles to Conventional Operating Systems  
Author: by John Jannotti M. Frans Kaashoek Arthur P. Smith 
Degree: (1997) Submitted to the Department of Electrical Engineering and Computer Science in partial fulfillment of the requirements for the degree of Master of Engineering in Computer Science and Engineering at the  c John Jannotti, MCMXCVIII. All rights reserved. The author hereby grants to MIT permission to reproduce and distribute publicly paper and electronic copies of this thesis document in whole or in part, and to grant others the right to do so. Author  Certified by  Associate Professor of Electrical Engineering and Computer Science Thesis Supervisor Accepted by  Chair, Department Committee on Graduate Students  
Date: Feb 1998  Feb 4, 1998  
Affiliation: S.B., Massachusetts Institute of Technology  MASSACHUSETTS INSTITUTE OF TECHNOLOGY  Department of Electrical Engineering and Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Peter Druschel and Gaurav Banga. </author> <title> Lazy receiver processing (lrp): A network subsystem architecture for server systems. </title> <booktitle> In Proceedings of the Second Symposium on Operating Systems Design and Implementation, </booktitle> <pages> pages 261-275, </pages> <address> Seattle, WA, </address> <month> October </month> <year> 1996. </year> <note> USENIX Assoc. </note>
Reference-contexts: All processes are charged equally for the CPU time required to decode incoming packets. However, in the case of Cheetah, TCP is handled explicitly in user space. Thus, Cheetah's network utilization is charged exclusively to it. Arguably, this is a more equitable situation (Druschel make similar observations in <ref> [1] </ref>), but since the other servers are not operating under it, it may provide a slightly unfair comparison.
Reference: [2] <author> Dawson R. Engler and M. Frans Kaashoek. </author> <title> Exterminate All Operating System Abstractions. </title> <booktitle> In Proceedings of the 5th Workshop on Hot Topics in Operating Systems (HotOS-V), </booktitle> <pages> pages 78-83, </pages> <address> Orcas Island, Washington, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: An evaluation of the integration's success is provided; engineering effort involved is quantified, preliminary performance results are presented, and the completeness of integration of the exokernel interface is discussed. 7 1.1 The Problem The idea of an exokernel was proposed three years ago <ref> [2] </ref>, and in that time three research operating systems based on the idea have been built. Exokernels strive to expose hardware to applications to the greatest degree possible, while maintaining protection between processes.
Reference: [3] <author> Dawson R. Engler and M. Frans Kaashoek. DPF: </author> <title> Fast, Flexible Message De-multiplexing using Dynamic Code Generation. </title> <booktitle> In Proceedings of the ACM SIG-COMM'96 Conference on Communication Architectures, Protocols, and Applications, </booktitle> <pages> pages 53-59, </pages> <address> Stanford, California, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: For network access, Cheetah uses DPF <ref> [3] </ref>. To access the disk, Cheetah currently uses a very low level interface that XN has made obsolete. XN provides an equally flexible interface to the disk, but solves protection difficulties of the older interface.
Reference: [4] <author> Dawson R. Engler, M. Frans Kaashoek, and James O'Toole, Jr. Exokernel: </author> <title> An Operating System Architecture for Application-Level Resource Management. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating Systems Principles (SOSP), </booktitle> <pages> pages 251-266, </pages> <address> Copper Mountain Resort, Colorado, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: Introduction The exokernel approach to operating system design has demonstrated the potential for excellent performance gains through enhanced flexibility in three experimental systems <ref> [4, 7, 6] </ref>. However, each of these systems was designed as an exokernel from its beginning. Outside of academia, if the developers of a widely used, mature operating system wished to employ exokernel ideas, a complete redesign and rewrite would normally be unthinkable.
Reference: [5] <author> Gregory R. Ganger and M. Frans Kaashoek. </author> <title> Embedded Inodes and Explicit Grouping: Exploiting Disk Bandwidth for Small Files. </title> <booktitle> In Proceedings of theUSENIX Technical Conference, </booktitle> <pages> pages 1-17, </pages> <address> Anaheim, California, </address> <month> January </month> <year> 1997. </year>
Reference-contexts: DPF allows Cheetah to efficiently implement its own TCP/IP stack at user level, while low level disk access allows it to implement its own filesystem. Cheetah uses it's network specialization to decrease total network usage. Cheetah's filesystem is a 9 derivative of C-FFS <ref> [5] </ref>, which provides excellent small file performance by colocating data blocks of files from the same directory and embedding inodes in directory blocks. 1.2.2 Engineering Effort It would be inappropriate to report that this thesis's integration effort was successful without also giving an indication of the work involved.
Reference: [6] <author> M. Frans Kaashoek, Dawson R. Engler, Gregory R. Ganger, Hector M. Brice no, Russell Hunt, David Mazieres, Thomas Pinckney, Robert Grimm, John Jannotti, 50 and Kenneth Mackenzie. </author> <title> Application Performance and Flexibility on Exokernel Systems. </title> <booktitle> In Proceedings of the Sixteenth ACM Symposium on Operating Systems Principles (SOSP), </booktitle> <pages> pages 52-65, </pages> <address> St. Malo, France, </address> <month> October </month> <year> 1997. </year>
Reference-contexts: Introduction The exokernel approach to operating system design has demonstrated the potential for excellent performance gains through enhanced flexibility in three experimental systems <ref> [4, 7, 6] </ref>. However, each of these systems was designed as an exokernel from its beginning. Outside of academia, if the developers of a widely used, mature operating system wished to employ exokernel ideas, a complete redesign and rewrite would normally be unthinkable.
Reference: [7] <author> K. Mackenzie, J. Kubiatowicz, A. Agarwal, and M.F. Kaashoek. FUGU: </author> <title> implementing translation and protection in a multiuser, multimodel multiprocessor. Technical Memorandum MIT/LCS/TM503, </title> <publisher> MIT, </publisher> <month> October </month> <year> 1994. </year>
Reference-contexts: Introduction The exokernel approach to operating system design has demonstrated the potential for excellent performance gains through enhanced flexibility in three experimental systems <ref> [4, 7, 6] </ref>. However, each of these systems was designed as an exokernel from its beginning. Outside of academia, if the developers of a widely used, mature operating system wished to employ exokernel ideas, a complete redesign and rewrite would normally be unthinkable.
Reference: [8] <author> Thomas Pinckney. </author> <title> Operating system extensibility through event capture. </title> <type> Master's thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <year> 1997. </year> <month> 51 </month>
Reference-contexts: One concern that developers may have is that the extraction of a single subsystem from Xok may be difficult. Indeed, many exokernel subsystems, at least ostensibly, require other subsystems. An application that uses DPF or XN also uses wakeup predicates <ref> [8] </ref> to avoid busy waiting. DPF and wakeup predicates require vcode. XN uses Xok's application accessible buffer cache. Many subsystems benefit from Xok's simple memory management that allows the kernel to access the memory of all processes, at all times, easily.
References-found: 8

