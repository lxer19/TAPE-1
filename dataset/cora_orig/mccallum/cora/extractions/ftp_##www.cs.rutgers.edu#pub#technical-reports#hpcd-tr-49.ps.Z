URL: ftp://www.cs.rutgers.edu/pub/technical-reports/hpcd-tr-49.ps.Z
Refering-URL: http://www.cs.rutgers.edu/pub/technical-reports/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: KNOWLEDGE-BASED MANAGEMENT OF LEGACY CODES FOR AUTOMATED DESIGN  Written under the direction of  
Author: BY JOHN ERIC KEANE Thomas Ellman 
Degree: A dissertation submitted to the Graduate School|New Brunswick  in partial fulfillment of the requirements for the degree of Doctor of Philosophy  and approved by  
Date: October, 1996  
Note: Graduate Program in Computer Science  
Address: New Jersey  Brunswick, New Jersey  
Affiliation: Rutgers, The State University of  New  
Abstract-found: 0
Intro-found: 1
Reference: [ Aiello and Levi, 1988 ] <author> L. Aiello and G. Levi. </author> <title> The uses of metaknowledge in AI systems. </title> <editor> In P. Maes and D. Nardi, editors, </editor> <title> Meta-level Architectures and Reflection. </title> <publisher> Elsevier Science Publishers B. V., </publisher> <year> 1988. </year>
Reference: [ Beightler et al., 1979 ] <author> Charles S. Beightler, Don T. Phillips, and Douglass J. Wilde. </author> <title> Foundations of Optimization second edition. </title> <publisher> Prentice Hall, </publisher> <year> 1979. </year>
Reference-contexts: introduction to numerical optimization can be found in <ref> [ Beightler et al., 1979 ] </ref> , and in a more application-oriented approach in [ Gill et al., 1981 ] .
Reference: [ Bellman and Landauer, 1995 ] <author> Kirstie L. Bellman and Christopher Landauer. </author> <title> Designing testable, hetergeneous software environments. </title> <journal> Journal of Systems Software, </journal> <volume> 29:199 - 217, </volume> <year> 1995. </year>
Reference-contexts: A further, more general discussion of the role of code wrapping in systems for design can be found in <ref> [ Bellman and Landauer, 1995 ] </ref> . She defines a wrapping: "A wrapping is an expert interface that describes the uses of a resource in complex software system [sic].
Reference: [ Bellman, 1991 ] <author> Kirstie L. Bellman. </author> <title> An approach to integrating and creating flexible software environments supporting the design of complex systems. </title> <booktitle> In Proceedings of WSC '91: The 1991 Winter Simulation Conference, </booktitle> <pages> pages 1101-1105. </pages> <publisher> SCS, </publisher> <year> 1991. </year> [ <title> Boisvert, 1985 ] et al. Boisvert. GAMS: A framework for the management of scientific software. </title> <journal> ACM Transactions on Mathematical Software, </journal> <pages> pages 313 - 355, </pages> <month> December </month> <year> 1985. </year>
Reference-contexts: Except for the most routine tasks, the re-engineering process is still largely manual. 131 5.9 Wrapping Mathematical Software 5.9.1 VEHICLES The VEHICLES knowledge-based environment for the conceptual design of spacecraft is a tool for assisting design engineers <ref> [ Bellman, 1991 ] </ref> . It allows simulations and optimizations to be carried out as part of the design process, using numerical tools. The VEHICLES system utilized wrappers around legacy mathematical programs [ Landauer, 1993 ] [ Miller and Quilici, 1992 ] .
Reference: [ Borgida, 1985 ] <author> Alexander Borgida. </author> <title> Language features for flexible handling of exceptions in information systems. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 10(4), </volume> <month> December </month> <year> 1985. </year>
Reference-contexts: He proposes mechanisms for exception handling in hierarchical modular systems. [ Yemini and Berry, 1985 ] give a survey of a number of proposals, in addition to their own "replacement" model. Alex Borgida proposed treating exception handling as in integral mechanism for effectively dealing with problems of database inconsistency <ref> [ Borgida, 1985 ] </ref> . A potentially useful proposed set of extensions to scientific programming languages to handle computational exceptions is given in [ Hull, 1988 ] . We see our work as complementary to this research effort.
Reference: [ Cristian, 1982 ] <author> Flaviu Cristian. </author> <title> Exception handling and software fault tolerance. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-31(6):531 - 540, </volume> <month> June </month> <year> 1982. </year>
Reference-contexts: This feature enables the context sensitivity of our recovery strategies, which we have shown to be of benefit. Our approach is also novel in allowing "generic" failure handling to be specialized by automatic instantiation into a system. The SESAME programming language developed by Cristian <ref> [ Cristian, 1982 ] </ref> allows for the specification of "default handlers" based on the 128 principle of automatically recovering to an earlier system state when a failure occurs, but this is a "one size fits all" solution.
Reference: [ Cristian, 1989 ] <author> Flaviu Cristian. </author> <title> Exception handling. </title> <editor> In T. Anderson, editor, </editor> <booktitle> Dependability of Resilient Computers, </booktitle> <pages> pages 68 - 97. </pages> <publisher> Blackwell Scientific Publications, </publisher> <year> 1989. </year>
Reference-contexts: Flaviu Cristan <ref> [ Cristian, 1989 ] </ref> gives rigorous definitions of the basic concepts, such as robustness, exception, failure, and error. He proposes mechanisms for exception handling in hierarchical modular systems. [ Yemini and Berry, 1985 ] give a survey of a number of proposals, in addition to their own "replacement" model.
Reference: [ Dague et al., 1992 ] <author> P. Dague, O. Raiman, and P. Deves. </author> <title> Troubleshooting: When modeling is the trouble. </title> <editor> In W. Hamscher, L. Console, and J. de Kleer, editors, </editor> <title> Model-Based Diagnosis. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference: [ des Rivieres, 1988 ] <author> J. </author> <title> des Rivieres. Control-related meta-level facilities in LISP. </title> <editor> In P. Maes and D. Nardi, editors, </editor> <title> Meta-level Architectures and Reflection. </title> <publisher> Elsevier Science Publishers B. V., </publisher> <year> 1988. </year>
Reference: [ Edwards, 1995 ] <author> S. Edwards. </author> <title> A formal model of software subsystems. </title> <type> Technical report, </type> <institution> The Ohio State University Department of Computer and Information Science, </institution> <year> 1995. </year> <type> Ph.D. Thesis. 143 </type>
Reference: [ Ellman and Murata, 1996 ] <author> Thomas P. Ellman and Takahiro Murata. </author> <title> Deductive synthesis of numerical simulation programs from networks of algebraic and ordinary differential equations. </title> <booktitle> In Proceedings of the Eleventh Knowledge-Based Software Engineering Conference. IEEE, </booktitle> <year> 1996. </year>
Reference: [ Ellman et al., 1992 ] <author> Thomas Ellman, John Keane, and Mark Schwabacher. </author> <title> The Rutgers CAP project design associate. </title> <type> Technical Report CAP-TR-7, </type> <institution> Rutgers University, Department of Computer Science, </institution> <address> New Brunswick, NJ, </address> <year> 1992. </year>
Reference: [ Ellman et al., 1993 ] <author> Thomas Ellman, John Keane, and Mark Schwabacher. </author> <title> Intelligent model selection for hillclimbing search in computer-aided design. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence. AAAI, </booktitle> <year> 1993. </year>
Reference: [ Ellman et al., 1995 ] <author> Thomas Ellman, John E. Keane, Takahiro Murata, and Mark Schwabacher. </author> <title> A transformation system for interactive reformulation of design optimization strategies. </title> <type> Technical Report HPCD-TR-42, </type> <institution> Rutgers University, Department of Computer Science, </institution> <address> New Brunswick, NJ, </address> <year> 1995. </year>
Reference: [ Ellman et al., 1996 ] <author> Thomas Ellman, John Keane, Mark Schwabacher, and Ke-Thia Yao. </author> <title> Multi-level modeling for engineering design optimization. </title> <type> Technical Report HPCD-TR-44, </type> <institution> Rutgers University, Department of Computer Science, </institution> <address> New Brunswick, NJ, </address> <year> 1996. </year>
Reference: [ Engelhardt, 1996 ] <author> B. Engelhardt. </author> <title> Tools and methods for development, maintenance, and reuse of quality software. </title> <type> Technical Report UPN 323-08: </type> <institution> Maintaining Software Safety, NASA, </institution> <month> September </month> <year> 1996. </year>
Reference-contexts: One approach to address this is discussed in [ Yau et al., 1995 ] , where numerical techniques are used dynamically in lieu of static analysis of code. The fault-tree approach is also incorporated into an approach to software re-use described in <ref> [ Engelhardt, 1996 ] </ref> . These two systems have similarities to LCM in their focus on addressing the robustness of legacy software.
Reference: [ Filman, 1995 ] <author> R. Filman. </author> <title> Applying AI to software renovation. </title> <booktitle> In Working Notes, Third Workshop on AI and Software Engineering: Breaking the Toy Mold. IJCAI, </booktitle> <year> 1995. </year>
Reference-contexts: At the 1995 IJCAI workshop on AI and Software Engineering, several papers on work in progress were presented, including a description of AI approaches used by Lockheed Martin InVision consulting services <ref> [ Filman, 1995 ] </ref> . The paper is interesting principally because it describes a very large scale deployment of knowledge-based techniques, primarily in the service of acquisition of information about legacy systems.
Reference: [ Gelsey and Smith, 1995 ] <author> Andrew Gelsey and Don Smith. </author> <title> A computational environment for exhaust nozzle design. </title> <booktitle> In Proceedings, Computing in Aerospace 10, </booktitle> <address> San Antonio, TX, </address> <month> March </month> <year> 1995. </year> <note> AIAA. AIAA-95-1016. </note>
Reference: [ Gill et al., 1981 ] <author> Philip E. Gill, Walter Murray, and Margaret Wright. </author> <title> Practical Optimization. </title> <publisher> Academic Press, </publisher> <year> 1981. </year>
Reference-contexts: introduction to numerical optimization can be found in [ Beightler et al., 1979 ] , and in a more application-oriented approach in <ref> [ Gill et al., 1981 ] </ref> . A practical discussion of applying numerical optimization to problems of engineering design is given by [ Vanderplaats, 1984 ] , and [ More and Wright, 1993 ] surveys commercially available optimization and root-finding software.
Reference: [ Hartman and Chandrasekaran, 1995 ] <author> J. Hartman and B. Chandrasekaran. </author> <title> Functional representation and understanding of software: Technology and application. </title> <booktitle> In Proceedings 5th Annual Dual-Use Technologies and Applications Conference. IEEE, </booktitle> <month> May </month> <year> 1995. </year>

Reference: [ Keene, 1989 ] <author> S. Keene. </author> <title> Object-oriented programming in Lisp. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference: [ Kiczales et al., 1992 ] <author> G. Kiczales, J. des Rivieres, and D. Bobrow. </author> <title> The Art of the Meta-Object Protocol. </title> <publisher> The MIT Press, </publisher> <year> 1992. </year>
Reference: [ Kuipers, 1990 ] <author> B. Kuipers. </author> <title> Qualitative simulation. </title> <editor> In Daniel S. Weld and Johan deKleer, editors, </editor> <booktitle> Qualitative Reasoning about Physical Systems, </booktitle> <pages> pages 470 - 475. </pages> <publisher> Morgan Kauf-mann, </publisher> <address> Palo Alto, CA, </address> <year> 1990. </year>
Reference: [ Laboratories, 1990 ] <author> AT&T Bell Laboratories. </author> <title> f2c A Fortran to C Compiler, </title> <booktitle> 1990. Program. </booktitle>
Reference: [ Landauer, 1993 ] <author> Christopher Landauer. </author> <title> Wrapping mathematical tools. </title> <booktitle> In Proceedings of the 1990 SCS Eastern MultiConference, </booktitle> <pages> pages 261 - 266. </pages> <publisher> SCS, </publisher> <year> 1993. </year>
Reference-contexts: It allows simulations and optimizations to be carried out as part of the design process, using numerical tools. The VEHICLES system utilized wrappers around legacy mathematical programs <ref> [ Landauer, 1993 ] </ref> [ Miller and Quilici, 1992 ] . The primary concern addressed by code wrappers in this system was interfacing with the legacy routines, and making it easier for the users to employ existing modeling programs for new purposes.
Reference: [ Lawrence et al., 1994 ] <author> C.T. Lawrence, Zhou J.L., and Tits A.L. </author> <title> CFSQP Version 2.1 (Released November 1994); Copyright (c) 1993 | 1994, all rights reserved, </title> <booktitle> 1994. Program. </booktitle>
Reference: [ Leveson and Harvey, 1983 ] <author> N. Leveson and P. R. Harvey. </author> <title> Analyzing software safety. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-9(5), </volume> <month> September </month> <year> 1983. </year>
Reference-contexts: An overview of the technique is given in <ref> [ Leveson and Harvey, 1983 ] </ref> and [ Leveson, 1991 ] . The software fault tree approach requires a priori knowledge about ways in which the software system can fail catastrophically. It is an analysis tool for improving the robustness of a system by identifying safety-related weaknesses in advance.
Reference: [ Leveson, 1991 ] <author> Nancy Leveson. </author> <title> Software safety in embedded computer systems. </title> <journal> Communications of the ACM, </journal> <volume> 34(2):35 - 46, </volume> <month> February </month> <year> 1991. </year>
Reference-contexts: An overview of the technique is given in [ Leveson and Harvey, 1983 ] and <ref> [ Leveson, 1991 ] </ref> . The software fault tree approach requires a priori knowledge about ways in which the software system can fail catastrophically. It is an analysis tool for improving the robustness of a system by identifying safety-related weaknesses in advance.
Reference: [ Liskov and Guttag, 1986 ] <author> Barbara Liskov and John Guttag. </author> <title> Abstraction and Specification in Program Development. </title> <publisher> The MIT Press, </publisher> <year> 1986. </year>
Reference-contexts: The ideal is certainly that well-designed programs should clearly specify their pre- and post-conditions, be free of side-effects, and never return an unexpected value. 1 A classic treatment is given in the description of the CLU language in <ref> [ Liskov and Guttag, 1986 ] </ref> . Leaving aside the question of whether programs developed using object-oriented languages are, in fact, less susceptible to failure than others, we find two problems.
Reference: [ Liver, 1995 ] <author> B. Liver. </author> <title> Repair of communication systems by working around failures. </title> <booktitle> In Proceedings of Applied Artificial Intelligence 9, </booktitle> <pages> pages 81-99, </pages> <year> 1995. </year>
Reference: [ Lowry, 1995 ] <author> M. Lowry. </author> <title> Automating software reuse. </title> <booktitle> In Working Notes, Third Workshop on AI and Software Engineering: Breaking the Toy Mold. IJCAI, </booktitle> <year> 1995. </year>
Reference-contexts: Fault-tree analysis could (in principle) have identified the conditions under which the failure occurred. 130 5.8 Automated Re-engineering and Re-use of Legacy Systems 5.8.1 AMPHION The AMPHION system <ref> [ Lowry, 1995 ] </ref> is a successfully implemented Automated Programming system that derives correct programs by composition of legacy library routines. It uses an elegant formal methods approach, and has a powerful graphical user interface. AM-PHION utilizes a knowledge base that provides semantic information about library function syntax and semantics.
Reference: [ Lucks and Gladwell, 1992 ] <author> M. Lucks and I. Gladwell. </author> <title> Automated selection of mathematical software. </title> <journal> ACM Transactions on Mathematical Software, </journal> <pages> pages 11 - 34, </pages> <month> March </month> <year> 1992. </year>
Reference: [ Maes, 1988 ] <author> P. Maes. </author> <title> Issues in computational reflection. </title> <editor> In P. Maes and D. Nardi, editors, </editor> <title> Meta-level Architectures and Reflection. </title> <publisher> Elsevier Science Publishers B. V., </publisher> <year> 1988. </year>
Reference: [ ME, 1992 ] <author> AeroHydro Inc. </author> <title> Southwest Harbor ME. AHVPP1 SAILING YACHT PERFORMANCE PREDICTION PROGRAM, </title> <booktitle> 1992. Program. </booktitle> <pages> 145 </pages>
Reference: [ Miller and Quilici, 1992 ] <author> L. Miller and A. Quilici. </author> <title> A knowledge-based approach to encouraging reuse of simulation and modeling programs. </title> <booktitle> In Proceedings, 4th International Conference on Software Engineering and Knowledge Engineering. IEEE, </booktitle> <year> 1992. </year>
Reference-contexts: It allows simulations and optimizations to be carried out as part of the design process, using numerical tools. The VEHICLES system utilized wrappers around legacy mathematical programs [ Landauer, 1993 ] <ref> [ Miller and Quilici, 1992 ] </ref> . The primary concern addressed by code wrappers in this system was interfacing with the legacy routines, and making it easier for the users to employ existing modeling programs for new purposes.
Reference: [ Minsky, 1991 ] <author> N. Minsky. </author> <title> Law-governed systems. </title> <booktitle> Software Engineering, </booktitle> <pages> pages 285 - 302, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: While we did not implement the LCM system as a part of the architecture, we are pleased to find that we can explain it after the fact in those terms. 5.6.2 Law-Governed Systems Naftaly Minsky has originated the concept of "Law-governed Systems" <ref> [ Minsky, 1991, Min-sky, 1995, Minsky, 1996 ] </ref> , where global rules can constrain the interactions between components of a system.
Reference: [ Minsky, 1995 ] <author> Naftaly Minsky. </author> <title> Law-governed regularities in object systems; part 1: </title> <booktitle> Principles. In Theory and Practice of Object Systems. </booktitle> <year> 1995. </year> <note> To be published. </note>
Reference: [ Minsky, 1996 ] <author> Naftaly Minsky. </author> <title> Independent on-line monitoring of evolving systems. </title> <booktitle> In Proceedings of The 18th International Conference on Software Engineering (IWWW.CSE), </booktitle> <year> 1996. </year>
Reference-contexts: While we did not implement the LCM system as a part of the architecture, we are pleased to find that we can explain it after the fact in those terms. 5.6.2 Law-Governed Systems Naftaly Minsky has originated the concept of "Law-governed Systems" <ref> [ Minsky, 1991, Min-sky, 1995, Minsky, 1996 ] </ref> , where global rules can constrain the interactions between components of a system.
Reference: [ More and Wright, 1993 ] <author> Jorge J. More and Stephen J. Wright. </author> <title> Optimization Software Guide. </title> <publisher> SIAM, </publisher> <year> 1993. </year>
Reference-contexts: introduction to numerical optimization can be found in [ Beightler et al., 1979 ] , and in a more application-oriented approach in [ Gill et al., 1981 ] . A practical discussion of applying numerical optimization to problems of engineering design is given by [ Vanderplaats, 1984 ] , and <ref> [ More and Wright, 1993 ] </ref> surveys commercially available optimization and root-finding software. Throughout this literature is the assumption that the functions to be optimized do not fail.
Reference: [ Office, 1992 ] <author> U. S. </author> <title> General Accouting Office. Patriot missile defense: Software problem led to system failure at Dharan, </title> <type> Saudi Arabia. Technical Report GAO/IMTEC-92-26, </type> <institution> U. S. General Accounting Office, </institution> <address> P.O. Box 6015, Gaithersburg, MD 20887, </address> <month> February </month> <year> 1992. </year>
Reference-contexts: A chilling example of software failure in a critical system is found in a report on the failure of the Patriot missile system during the 1991 Gulf war <ref> [ Office, 1992 ] </ref> .
Reference: [ Orelup et al., 1988 ] <author> M. F. Orelup, J. R. Dixon, P. R. Cohen, and M. K. Simmons. Dominic II: </author> <title> Meta-level control in iterative redesign. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <pages> pages 25-30, </pages> <address> St. Paul, MN, </address> <year> 1988. </year>
Reference: [ Powell, 1990 ] <author> D. Powell. Inter-GEN: </author> <title> A hybrid approach to engineering design optimization. </title> <type> Technical report, </type> <institution> Rensselaer Polytechnic Institute Department of Computer Science, </institution> <month> De-cember </month> <year> 1990. </year> <type> Ph.D. Thesis. </type>
Reference: [ Press et al., 1986 ] <author> W. Press, B. Flannery, S. Teukolsky, and W. Vetterling. </author> <title> Numerical Recipes in C, 2d ed. </title> <publisher> Cambridge University Press, </publisher> <address> New York, NY, </address> <year> 1986. </year>
Reference: [ Reiter, 1987 ] <author> R. Reiter. </author> <title> A theory of diagnosis from first principles. </title> <editor> In W. Hamscher, L. Console, and J. de Kleer, editors, </editor> <title> Model-Based Diagnosis. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1987. </year>
Reference: [ Sacks, 1990 ] <author> Elisha Sacks. </author> <title> A dynamic systems perspective on qualitative simulation. </title> <journal> Artificial Intelligence, </journal> <volume> 42(2-3):159-188, </volume> <month> March </month> <year> 1990. </year>
Reference: [ Schwabacher, 1996 ] <author> Mark Schwabacher. </author> <title> The use of artificial intelligence to improve the numerical optimization of complex engineering designs. </title> <type> Technical report, </type> <institution> Rutgers University, Department of Computer Science, </institution> <address> New Brunswick, NJ, </address> <year> 1996. </year> <type> PhD Thesis. </type>
Reference: [ Steele, 1990 ] <author> Guy L. Steele. </author> <title> Common Lisp, the Language Second Edition. </title> <publisher> Digital Press, </publisher> <year> 1990. </year>
Reference: [ Stroulia and Goel, 1995 ] <author> E. Stroulia and A. Goel. </author> <title> Functional representation and reasoning for reflective systems. </title> <booktitle> In Proceedings of Applied Artificial Intelligence 9, </booktitle> <pages> pages 101-125, </pages> <year> 1995. </year> <month> 146 </month>
Reference: [ Stroulia, 1994 ] <author> E. Stroulia. </author> <title> Failure-driven learning as model-based self-redesign. </title> <type> Technical report, </type> <institution> Georgia Institute of Technology Department of Computer Science, </institution> <month> December </month> <year> 1994. </year> <type> Ph.D. Thesis. </type>
Reference: [ Subramanian, 1995 ] <author> S. Subramanian. </author> <title> Qualitative multiple-fault diagnosis of continuous dynamic systems using behavioral modes. </title> <type> Technical report, </type> <institution> The University of Texas at Austin Department of Computer Science, </institution> <month> December </month> <year> 1995. </year> <type> Ph.D. Thesis. </type>
Reference: [ Tong, 1988 ] <author> S. S. Tong. </author> <title> Coupling symbolic manipulation and numerical simulation for complex engineering designs. </title> <booktitle> In International Association of Mathematics and Computers in Simulation Conference on Expert Systems for Numerical Computing, </booktitle> <institution> Purdue University, </institution> <year> 1988. </year>
Reference: [ Vanderplaats, 1984 ] <author> Garret N. Vanderplaats. </author> <title> Numerical Optimization Techniques for Engineering Design: With Applications. </title> <publisher> McGraw-Hill, </publisher> <year> 1984. </year>
Reference-contexts: introduction to numerical optimization can be found in [ Beightler et al., 1979 ] , and in a more application-oriented approach in [ Gill et al., 1981 ] . A practical discussion of applying numerical optimization to problems of engineering design is given by <ref> [ Vanderplaats, 1984 ] </ref> , and [ More and Wright, 1993 ] surveys commercially available optimization and root-finding software. Throughout this literature is the assumption that the functions to be optimized do not fail.
Reference: [ Williams and Nayak, 1996 ] <author> B. Williams and P. Nayak. </author> <title> A model-based approach to self-configuring systems. </title> <booktitle> In Proceedings of AAAI-96. AAAI, </booktitle> <month> August </month> <year> 1996. </year>
Reference: [ Yau et al., 1995 ] <author> M. Yau, S. Guarro, and G. Apostolakis. </author> <title> Demonstration of the dynamic flowgraph methodology using the Titan II space launch vehicle digitial flight control system. In Reliability Engineering and System Safety. </title> <publisher> Elsevier Science Ltd., </publisher> <year> 1995. </year>
Reference-contexts: Software fault-tree analysis can be difficult to accomplish for some software systems because of the difficulty of regressing failure conditions back through complex functions. One approach to address this is discussed in <ref> [ Yau et al., 1995 ] </ref> , where numerical techniques are used dynamically in lieu of static analysis of code. The fault-tree approach is also incorporated into an approach to software re-use described in [ Engelhardt, 1996 ] .
Reference: [ Yemini and Berry, 1985 ] <author> Shaula Yemini and Daniel Berry. </author> <title> A modular verifiable exception-handling mechanism. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 7(2), </volume> <month> April </month> <year> 1985. </year>
Reference-contexts: Flaviu Cristan [ Cristian, 1989 ] gives rigorous definitions of the basic concepts, such as robustness, exception, failure, and error. He proposes mechanisms for exception handling in hierarchical modular systems. <ref> [ Yemini and Berry, 1985 ] </ref> give a survey of a number of proposals, in addition to their own "replacement" model. Alex Borgida proposed treating exception handling as in integral mechanism for effectively dealing with problems of database inconsistency [ Borgida, 1985 ] .
Reference: [ Yip, 1990 ] <author> Kenneth Yip. </author> <title> Generating global behaviors using deep knowledge of local dynamics. </title> <editor> In Daniel S. Weld and Johan deKleer, editors, </editor> <booktitle> Qualitative Reasoning about Physical Systems, </booktitle> <pages> pages 470 - 475. </pages> <publisher> Morgan Kaufmann, </publisher> <address> Palo Alto, CA, </address> <year> 1990. </year> <month> 147 </month>
References-found: 56

