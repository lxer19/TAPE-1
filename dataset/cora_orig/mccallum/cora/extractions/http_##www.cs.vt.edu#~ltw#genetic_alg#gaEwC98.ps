URL: http://www.cs.vt.edu/~ltw/genetic_alg/gaEwC98.ps
Refering-URL: http://www.cs.vt.edu/~ltw/genetic_alg/
Root-URL: http://www.cs.vt.edu
Phone: 2  3  4  5  
Title: A Fortran 90 Genetic Algorithm Module for Composite Laminate Structure Design  
Author: M. T. McMahon L. T. Watson G. A. Soremekun Z. Gurdal and R. T. Haftka 
Keyword: Genetic Algorithms; Composite Laminate Structure Design; Fortran 90  
Address: VA 24061-0106 USA  VA 24061-0106 USA  VA 24061-0219 USA  24061-0219 USA  Gainesville, FL 32611-6250 USA  
Affiliation: 1 Graduate Research Assistant, Department of Computer Science, Virginia Polytechnic Institute and State University, Blacksburg,  Professor, Departments of Computer Science and Mathematics, Virginia Polytechnic Institute and State University, Blacksburg,  Graduate Research Assistant, Department of Engineering Science and Mechanics, Virginia Polytechnic Institute and State University, Blacksburg,  Professor, Department of Engineering Science and Mechanics, Virginia Polytechnic Institute and State University, Blacksburg, VA  Professor, Department of Aerospace Engineering, Mechanics, and Engineering Science, University of Florida,  
Abstract: The design of the stacking sequence for a composite laminate involves a set of discrete variables (ply material and ply orientation), and is thus well-suited to genetic algorithms for design optimization. Such algorithms have typically been custom-designed in FORTRAN 77 to suit specific optimization problems. Fortran 90 is a modern, powerful language with features that support important programming concepts, including those used in object-oriented programming. The Fortran 90 genetic algorithm module is used to define genetic data types, the functions which use these data types, and to provide a general framework for solving composite laminate structure design problems. The language's support of abstract data types is used to build genetic structures such as populations, subpop-ulations, individuals, chromosomes, and genes, and these data types are combined and manipulated by module subroutines. The use of abstract data types and long variable names makes the code useful and easily understood, while dynamic memory allocation makes the module flexible enough to be used in design problems of varying size and specification. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Holland, J. H. </author> <year> (1976), </year> <title> Adaptation in Natural and Artificial Systems, </title> <publisher> The University of Michigan Press, </publisher> <address> Ann Arbor, MI, USA. </address>
Reference-contexts: 1. Introduction Since their formal introduction in 1975 by John Hol-land <ref> [1] </ref> at the University of Michigan, genetic algorithms have increasingly been applied to the solution of combinatorial problems in artificial systems.
Reference: 2. <author> Goldberg, D.E. </author> <year> (1989), </year> <title> Genetic Algorithms in Search, Optimization, and Machine Learning, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, USA. </address>
Reference-contexts: A genetic algorithm (GA) simulates evolution by means of random genetic changes (genetic operators) and an environment (fitness function) provided by the user. Since their introduction, GAs have been used in a variety of fields, including medicine, business, and engineering. Goldberg <ref> [2] </ref> provides an excellent introduction to the use of genetic algorithms in search and optimization. Composite laminate design is often formulated as a continuous optimization problem, with ply thickness and orientation used as design variables. <p> In addition, continuous design variables may be used to describe the geometry of the panel. 3. Genetic Algorithms As succinctly stated by Goldberg <ref> [2] </ref>, genetic algorithms are "search procedures based on the mechanics of natural selection and natural genetics." With GAs, the adaptive processes of natural systems are brought to bear on artificial systems by coding a design problem, represented by one or more strings (chromosomes); randomly creating an initial population of designs (individuals);
Reference: 3. <author> Le Riche, R.; Haftka, R.T. </author> <year> (1993), </year> <title> "Optimization of Laminate Stacking Sequence for Buckling Load Maximization by Genetic Algorithm", </title> <journal> AIAA Journal, </journal> <volume> 31(5), </volume> <pages> 951-956. </pages>
Reference: 4. <author> Le Riche, R.; Haftka, R.T. </author> <year> (1994), </year> <title> "Improved Genetic Algorithm for Minimum Thickness Composite Laminate Design", </title> <booktitle> Proceedings of International Conf. on Composite Engineering, </booktitle> <address> New Orleans, LA, USA. </address>
Reference: 5. <author> Kogiso, N.; Watson, L.T.; Gurdal, Z.; Haftka, R. T.; Nagendra, S. </author> <year> (1994), </year> <title> "Design of Composite Laminates by a Genetic Algorithm with Memory", Mechanics of Composite Materials and Structures, </title> <journal> Vol. </journal> <volume> 1, </volume> <pages> 95-117. </pages>
Reference: 6. <author> Soremekun, G. A. </author> <year> (1997), </year> <title> Genetic Algorithms for Composite Laminate Design and Optimization, </title> <type> MS Thesis, </type> <institution> Department of Engineering Mechanics, Virginia Polytechnic Institute and State University, Blacksburg, VA, USA. </institution>
Reference-contexts: A Test Program A test program was developed using the above guidelines for a main program. The program uses the full module GENERIC GA and uses NAMELIST input to read genetic data. The analysis chosen for the test program is a previously existing FORTRAN 77 analysis code <ref> [6] </ref>. The code analyzes a panel which is 36 in. long, 30 in. wide, and simply supported on all four sides. The panel can be loaded under any combination of axial and shear loads. <p> The fitness value returned by the analysis code for each panel is a measure of the panel's weight penalized by small or violated safety margins, and this value is minimized by the GA (see <ref> [6] </ref> for a complete description of the physical analysis problem). Test runs conducted to compare the performance of the test program with the performance of the original FORTRAN 77 code yielded optimum designs identical to those found by the original implementation.
Reference: 7. <author> Nagendra, S.; Haftka, R.T.; Gurdal, Z. </author> <year> (1993), </year> <title> "Design of Blade Stiffened Composite Panels by a Genetic Algorithm Approach", </title> <booktitle> Proceedings of the 34th AIAA/- ASME/AHS SDM Conf., </booktitle> <pages> 2418-2436, </pages> <address> La Jolla, CA, USA. </address>
Reference-contexts: The design optimization becomes a stacking sequence optimization using discrete (integer) values, a problem well-suited to genetic algorithms. GAs have been used extensively in the design of composite laminates (e.g., [3]-[6]) and stiffened panels (e.g., <ref> [7] </ref>, [8]) . Many computer programs have been written to implement GAs for specific composite laminate design problems, mostly in FORTRAN 77. FORTRAN is still the most widely used scientific programming language, and Fortran 90 introduces many modern programming features into the FORTRAN standard.
Reference: 8. <author> Nagendra, S.; Haftka, R.T.; Gurdal, Z. </author> <year> (1993), </year> <title> "PASCO-GA : A Genetic Algorithm based Design Procedure For Stiffened Composite Panels under Stability and Strain Constraints", </title> <booktitle> Tenth DOD/NASA/FAA Conf. on Fibrous Composites in Structural Design Hilton Head, </booktitle> <address> SC, USA. </address>
Reference-contexts: The design optimization becomes a stacking sequence optimization using discrete (integer) values, a problem well-suited to genetic algorithms. GAs have been used extensively in the design of composite laminates (e.g., [3]-[6]) and stiffened panels (e.g., [7], <ref> [8] </ref>) . Many computer programs have been written to implement GAs for specific composite laminate design problems, mostly in FORTRAN 77. FORTRAN is still the most widely used scientific programming language, and Fortran 90 introduces many modern programming features into the FORTRAN standard.
Reference: 9. <author> Kerrigan, J. F. </author> <year> (1994), </year> <title> Migrating to Fortran 90, </title> <address> O'Reilly, Sebastopol, CA, USA. </address>
Reference-contexts: Attention is given to representing and manipulating composite structures in a way that provides for flexibility in designing GA operators and in implementing a GA optimization. As observed by Kerrigan <ref> [9] </ref>, the Fortran 90 module provides a simple but highly adaptable method to compartmentalize code. A module can replace all uses of FORTRAN 77's INCLUDE statements and COMMON blocks, while still retaining the concepts of shared declarations and globally accessible data.
Reference: 10. <author> Back, T. </author> <year> (1996), </year> <title> Evolutionary Algorithms in Theory and Practice, </title> <publisher> Oxford University Press, </publisher> <address> NY, USA. </address>
Reference-contexts: This is essentially how evolutionary algorithms <ref> [10] </ref> work, where the value of itself can be adapted as the evolution proceeds. 5.1.

References-found: 10

