URL: http://www.cs.ucl.ac.uk/staff/L.Braine/glafp97.ps
Refering-URL: http://www.cs.ucl.ac.uk/staff/L.Braine/researchdocs.html
Root-URL: http://www.cs.ucl.ac.uk
Title: Object-Oriented Functional Spreadsheets  
Author: Chris Clack and Lee Braine 
Address: Gower Street, London WC1E 6BT, UK  
Affiliation: Department of Computer Science, University College London,  
Abstract: We propose a new spreadsheet paradigm which incorporates many functional programming features such as higher-order functions, a strong type system, curried partial applications, referential transparency and lazy evaluation. It also incorporates many object-oriented programming features such as a class hierarchy, inheritance, overloading, overriding, subsumption, and dynamic despatch on a distinguished object. 
Abstract-found: 1
Intro-found: 1
Reference: [BC96] <author> L. Braine and C. Clack. </author> <title> Introducing CLOVER: an Object-Oriented Functional Language. </title> <editor> In W. Kluge, editor, </editor> <booktitle> Implementation of Functional Languages, 8th International Workshop (IFL'96), Selected Papers, </booktitle> <volume> LNCS 1268, </volume> <pages> pages 1-20, </pages> <publisher> Springer-Verlag, </publisher> <month> September </month> <year> 1996. </year>
Reference-contexts: Our approach involves viewing a spreadsheet system as a programming environment and using (a variant of) our new object-oriented functional language CLOVER <ref> [BC96, BC97a, BC97b, BC97c] </ref> to support the new computational model. However, it is not sufficient merely to replace CLOVER's visual-programming interface with a spreadsheet grid to support name bindings. <p> Commercial products such as Excel T M and Quattro Pro T M provide support for viewing spreadsheets as components, but this does not change the computational model of the spreadsheet. The integration of OOP and FP languages has received a lot of attention (see <ref> [BC96] </ref> for a survey of this related work), but most of these systems lose the key feature of referential transparency and none consider the application of the resulting technology to spreadsheets. The use of declarative languages to implement spreadsheets has similarly received considerable attention [DW88, Wra86, DRV95]. <p> A cell may now produce a partial application (of function type) and may contain a value that is the name of a parameterised worksheet or of a built-in operation, but note that we do not introduce generalised function abstraction and so cells cannot be -forms (see <ref> [BC96] </ref> for explanation). <p> position (all the other required changes are in the semantics, which we do not present in this paper). 5.3 Adding OOP Functionality We add OOP functionality to the above system in a similar way (and using similar design decisions) as we added OOP to FP to produce the CLOVER language <ref> [BC96] </ref>. We will not repeat the arguments of [BC96] here, but merely observe that it is possible to reconcile FP with the key aspects of OOP except for the issue of object identity, which in CLOVER must have copy-semantics rather than having mutable internal state. <p> the semantics, which we do not present in this paper). 5.3 Adding OOP Functionality We add OOP functionality to the above system in a similar way (and using similar design decisions) as we added OOP to FP to produce the CLOVER language <ref> [BC96] </ref>. We will not repeat the arguments of [BC96] here, but merely observe that it is possible to reconcile FP with the key aspects of OOP except for the issue of object identity, which in CLOVER must have copy-semantics rather than having mutable internal state.
Reference: [BC97a] <author> L. Braine and C. Clack. </author> <title> An Object-Oriented Functional Approach to Information Systems Engineering. </title> <booktitle> In Proceedings of the CAiSE'97 4th Doctoral Consortium on Advanced Information Systems Engineering, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: Our approach involves viewing a spreadsheet system as a programming environment and using (a variant of) our new object-oriented functional language CLOVER <ref> [BC96, BC97a, BC97b, BC97c] </ref> to support the new computational model. However, it is not sufficient merely to replace CLOVER's visual-programming interface with a spreadsheet grid to support name bindings.
Reference: [BC97b] <author> L. Braine and C. Clack. Object-Flow. </author> <booktitle> To appear in Proceedings of the 13th IEEE Symposium on Visual Languages (VL'97), </booktitle> <month> September </month> <year> 1997. </year>
Reference-contexts: Our approach involves viewing a spreadsheet system as a programming environment and using (a variant of) our new object-oriented functional language CLOVER <ref> [BC96, BC97a, BC97b, BC97c] </ref> to support the new computational model. However, it is not sufficient merely to replace CLOVER's visual-programming interface with a spreadsheet grid to support name bindings.
Reference: [BC97c] <author> L. Braine and C. Clack. </author> <title> The CLOVER Rewrite Rules: A Translation from OOFP to FP. </title> <booktitle> In Proceedings of the 9th International Workshop on Implementation of Functional Languages (IFL'97), </booktitle> <pages> pages 467-488, </pages> <month> September </month> <year> 1997. </year>
Reference-contexts: Our approach involves viewing a spreadsheet system as a programming environment and using (a variant of) our new object-oriented functional language CLOVER <ref> [BC96, BC97a, BC97b, BC97c] </ref> to support the new computational model. However, it is not sufficient merely to replace CLOVER's visual-programming interface with a spreadsheet grid to support name bindings.
Reference: [DH96] <author> A. Davie and K. Hammond. </author> <title> Functional Hypersheets. </title> <booktitle> In Proceedings of the 8th International Workshop on Implementation of Functional Languages (IFL'96), </booktitle> <pages> pages 39-48, </pages> <month> September </month> <year> 1996. </year>
Reference-contexts: However, this is not directly relevant to our research since we are concerned with adding FP (and OOP) features to the spreadsheet itself. Finally, there has been recent work done on the implementation of functional hypersheets with persistent store <ref> [DH96] </ref>, but this does not address any OOP issues. Generalised Spreadsheet Model: Yoder and Cohn exploit implicit con-currency of spreadsheet operations.
Reference: [DRV95] <author> W. De Hoon, L. Rutten, and M. Van Eekelen. </author> <title> Implementing a Functional Spreadsheet in Clean. </title> <journal> Journal of Functional Programming, </journal> <volume> 5(3) </volume> <pages> 383-414, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: The use of declarative languages to implement spreadsheets has similarly received considerable attention <ref> [DW88, Wra86, DRV95] </ref>. However, this is not directly relevant to our research since we are concerned with adding FP (and OOP) features to the spreadsheet itself.
Reference: [DW88] <author> W. Du and W. Wadge. </author> <title> An intensional language as the basis of a 3D spreadsheet design. </title> <booktitle> In Proceedings of the IEEE International Conference on Computer Languages 1988 (ICCL'88), </booktitle> <pages> pages 2-9, </pages> <year> 1988. </year>
Reference-contexts: The use of declarative languages to implement spreadsheets has similarly received considerable attention <ref> [DW88, Wra86, DRV95] </ref>. However, this is not directly relevant to our research since we are concerned with adding FP (and OOP) features to the spreadsheet itself.
Reference: [Sta93] <author> M. Stadelmann. </author> <title> A Spreadsheet based on Constraints. </title> <booktitle> In Proceedings of the 6th Symposium on User Interface Software and Technology (UIST'93), </booktitle> <pages> pages 217-224, </pages> <year> 1993. </year>
Reference-contexts: The three exceptions are Simple <ref> [Sta93] </ref> (an enhanced declarative spreadsheet which provides a constraint-based environment), the Generalised Spreadsheet Model (GSM) [YC94, YC95, YC97] and the work of Wack [Wac95], the last two of which are discussed further below.
Reference: [Tur95] <author> D. Turner. </author> <title> Elementary Strong Functional Programming. </title> <editor> In P. Har-tel and M. Plasmeijer, editors, </editor> <booktitle> Proceedings of the First International Symposium on Functional Programming Languages in Education (FPLE'95), </booktitle> <volume> LNCS 1022, </volume> <pages> pages 1-13, </pages> <publisher> Springer-Verlag, </publisher> <month> December </month> <year> 1995. </year>
Reference-contexts: This restricts the computational power of the system, yet in the next section we add higher-order functions and this combination of primitive recursion plus higher-order functions provides a system of adequate computational power (see <ref> [Tur95] </ref>). <p> In this, we follow the lead of <ref> [Tur95] </ref>.
Reference: [Wac95] <author> A. Wack. </author> <title> Partitioning Dependency Graphs for Concurrent Execution: </title>
Reference-contexts: The three exceptions are Simple [Sta93] (an enhanced declarative spreadsheet which provides a constraint-based environment), the Generalised Spreadsheet Model (GSM) [YC94, YC95, YC97] and the work of Wack <ref> [Wac95] </ref>, the last two of which are discussed further below. Commercial products such as Excel T M and Quattro Pro T M provide support for viewing spreadsheets as components, but this does not change the computational model of the spreadsheet. <p> Their research is summarised in [YC97] with the definition of a Generalised Spreadsheet Model. Wack: Like Yoder & Cohn, Wack <ref> [Wac95] </ref> is primarily interested in the implicit parallelism of spreadsheets.
References-found: 10

