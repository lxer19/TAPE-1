URL: ftp://ftp.cs.indiana.edu/pub/techreports/TR455.ps.Z
Refering-URL: http://www.cs.indiana.edu/trindex.html
Root-URL: 
Title: Techniques for Non-Linear Magnification Transformations  
Author: T. Alan Keahey Edward L. Robertson 
Keyword: Distortion, Magnification, Fisheye, Hyperbolic, Information Visualization, Piecewise Trans formation  
Note: This work was supported by US Dept. of Education award number P200A502367.  
Address: 215 Lindley Hall  Bloomington, IN 47405  
Affiliation: Department of Computer Science Indiana University  Indiana University  Department of Computer Science Indiana University  
Email: tkeahey@cs.indiana.edu  edrbtsn@cs.indiana.edu  
Phone: Phone: (812) 855-3609 Fax: (812) 855-4829  
Date: March 29, 1996  
Abstract: This paper presents some methods for implementing efficient and general non-linear magnification transformations. Techniques are provided for combining linear and non-linear magnifications, for constraining the domain of magnifications, and for combining multiple transformations. In addition piecewise linear methods are introduced which allow greater efficiency and expressiveness than their continuous counterparts. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Benjamin B. Bederson and James D. Hollan. </author> <title> Pad++: A zoomable graphical interface. </title> <booktitle> In CHI '94 Proceedings, </booktitle> <year> 1994. </year>
Reference-contexts: Several different choices exist for a 1D base transformation function. Furnas [5] and Sarkar and Brown [17] use the function G (x) = (d+1)x dx+1 to perform this transformation. G (x) is well behaved and has desirable non-linear characteristics over the domain <ref> [0; 1] </ref>, so that G (x) : [0; 1] ! [0; 1]. Although this function is by itself relatively inexpensive computationally, all coordinates to be transformed by this function must first be normalized or constrained to the [0; 1] domain. <p> Several different choices exist for a 1D base transformation function. Furnas [5] and Sarkar and Brown [17] use the function G (x) = (d+1)x dx+1 to perform this transformation. G (x) is well behaved and has desirable non-linear characteristics over the domain <ref> [0; 1] </ref>, so that G (x) : [0; 1] ! [0; 1]. Although this function is by itself relatively inexpensive computationally, all coordinates to be transformed by this function must first be normalized or constrained to the [0; 1] domain. <p> Furnas [5] and Sarkar and Brown [17] use the function G (x) = (d+1)x dx+1 to perform this transformation. G (x) is well behaved and has desirable non-linear characteristics over the domain <ref> [0; 1] </ref>, so that G (x) : [0; 1] ! [0; 1]. Although this function is by itself relatively inexpensive computationally, all coordinates to be transformed by this function must first be normalized or constrained to the [0; 1] domain. <p> G (x) is well behaved and has desirable non-linear characteristics over the domain <ref> [0; 1] </ref>, so that G (x) : [0; 1] ! [0; 1]. Although this function is by itself relatively inexpensive computationally, all coordinates to be transformed by this function must first be normalized or constrained to the [0; 1] domain. Alternatively, it is possible to use a function which is well behaved over an infinite domain h (x) : R ! (C; C). Such a function maps points at infinity to some fixed point. <p> Very often this is used in conjunction with some type of non-linear transformation. A full discussion of these approaches is beyond the scope of this paper, however the techniques that we present here are relevant to many of them. The interested reader is referred to [2], <ref> [1] </ref>, [4] and [7]. 2.3 Continuous/Discrete Domain Characteristics For tasks such as graph visualization, the domain consists of discrete objects in a continuous coordinate space, and (in general) adjacencies between nodes can be maintained through rendering of edges directly between then, regardless of the type or level of distortion introduced by <p> Note that it is often desirable to map the points inside the sub-area to some regular domain (e.g. <ref> [1; 1] </ref> fi [1; 1]) before performing the actual transformation on them, and then mapping the transformed points back into the original sub-area. <p> Note that it is often desirable to map the points inside the sub-area to some regular domain (e.g. <ref> [1; 1] </ref> fi [1; 1]) before performing the actual transformation on them, and then mapping the transformed points back into the original sub-area.
Reference: [2] <author> Benjamin B. Bederson and James D. Hollan. </author> <title> Pad++: A zooming graphical interface for exploring alternate interface physics. </title> <booktitle> In UIST '94 Proceedings, </booktitle> <year> 1994. </year>
Reference-contexts: Very often this is used in conjunction with some type of non-linear transformation. A full discussion of these approaches is beyond the scope of this paper, however the techniques that we present here are relevant to many of them. The interested reader is referred to <ref> [2] </ref>, [1], [4] and [7]. 2.3 Continuous/Discrete Domain Characteristics For tasks such as graph visualization, the domain consists of discrete objects in a continuous coordinate space, and (in general) adjacencies between nodes can be maintained through rendering of edges directly between then, regardless of the type or level of distortion introduced
Reference: [3] <editor> James D. Foley [et al]. </editor> <booktitle> Computer Graphics: Principles and Practice. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: Not all functions constructed in this manner will be useful, the loose restriction of C 0 continuity will allow the user to construct wildly distorting transformations with sharp transitions rather than smooth curves. This problem can be alleviated by using spline functions with higher degrees of continuity <ref> [3] </ref> to construct a "transformation curve", and then sampling the spline function to obtain an approximating piecewise linear function. Piecewise transformations can also be constructed through manipulation of the values of the magnification function (which is the derivative of the transformation function).
Reference: [4] <author> Ken Fishkin and Maureen C. Stone. </author> <title> Enhanced dynamic queries via movable filters. </title> <booktitle> In CHI '95 Proceedings, </booktitle> <year> 1995. </year>
Reference-contexts: Very often this is used in conjunction with some type of non-linear transformation. A full discussion of these approaches is beyond the scope of this paper, however the techniques that we present here are relevant to many of them. The interested reader is referred to [2], [1], <ref> [4] </ref> and [7]. 2.3 Continuous/Discrete Domain Characteristics For tasks such as graph visualization, the domain consists of discrete objects in a continuous coordinate space, and (in general) adjacencies between nodes can be maintained through rendering of edges directly between then, regardless of the type or level of distortion introduced by the
Reference: [5] <author> G. W. Furnas. </author> <title> Generalized fisheye views. </title> <booktitle> Human Factors in Computing Systems, CHI '86, </booktitle> <pages> pages 16-23, </pages> <month> April </month> <year> 1986. </year>
Reference-contexts: In this schema, the user is provided with a view which is distorted in a manner similar to that produced by a very wide-angle camera lens. Furnas popularized this idea in 1986 <ref> [5] </ref>, and it has since been used in other systems such as Sarkar and Brown [17]. Several different mechanisms can be used to implement the fisheye lens effect. It is not in general necessary to construct an explicit lens model, rather the effect can be achieved through simple geometric transformations. <p> Every extra level of magnification must incur a corresponding decrease in magnification at some other location if the range boundaries are not to exceed the domain boundaries (which is a requirement for non-occluding magnification). Several different choices exist for a 1D base transformation function. Furnas <ref> [5] </ref> and Sarkar and Brown [17] use the function G (x) = (d+1)x dx+1 to perform this transformation. G (x) is well behaved and has desirable non-linear characteristics over the domain [0; 1], so that G (x) : [0; 1] ! [0; 1]. <p> For this reason, graph visualization tasks are very amenable to non-linear transformation techniques, and there are many graph visualization systems which take advantage of this [14], [10], [17] and <ref> [5] </ref>. For discrete domains (such as the texture mapping example just presented), adjacency requirements become more of a concern. This is particularly the case when linear/non-linear combinations or constrained boundaries are introduced. In these cases, boundaries between areas of different transformations must be carefully thought out to preserve adjacency information. <p> If we choose a transformation function with a fixed range (such as R ! (1; 1) these mappings are more easily facilitated. 9 4 Compound Transformations Work on static transformations with multiple areas of magnification began with [8]. Other authors <ref> [5] </ref> [16] [17] have discussed the possibility of combining multiple centers of magnification within a single domain. This section will consider methods for combining transformations from multiple individual transformations.
Reference: [6] <author> George W. Furnas and Benjamin B. Bederson. </author> <title> Space-scale diagrams: Understanding multiscale interfaces. </title> <booktitle> In Proceedings of CHI '95 Human Factors in Computing Systems, </booktitle> <year> 1995. </year>
Reference-contexts: The magnification function is the derivative of the transformation function. It will be shown in this paper that it is useful to be able to translate between these two functions. Related work illustrating a technique for visualizing these transformations has been done by Furnas and Bederson <ref> [6] </ref>. 2.1 Linear Transformations The most familiar magnification technique involves the application of linear transformation functions as shown in Figure 1.
Reference: [7] <author> Brian Johnson and Ben Shneiderman. Treemaps: </author> <title> A space-filling approach to the visualization of hierarchical information structures. </title> <booktitle> In IEEE Visualization '91 Proceedings, </booktitle> <year> 1991. </year>
Reference-contexts: Very often this is used in conjunction with some type of non-linear transformation. A full discussion of these approaches is beyond the scope of this paper, however the techniques that we present here are relevant to many of them. The interested reader is referred to [2], [1], [4] and <ref> [7] </ref>. 2.3 Continuous/Discrete Domain Characteristics For tasks such as graph visualization, the domain consists of discrete objects in a continuous coordinate space, and (in general) adjacencies between nodes can be maintained through rendering of edges directly between then, regardless of the type or level of distortion introduced by the transformation.
Reference: [8] <author> N. Kadmon and E. Shlomi. </author> <title> A polyfocal projection for statistical surfaces. </title> <journal> Cartograph. J., </journal> <volume> 15(1) </volume> <pages> 36-41, </pages> <year> 1978. </year>
Reference-contexts: If we choose a transformation function with a fixed range (such as R ! (1; 1) these mappings are more easily facilitated. 9 4 Compound Transformations Work on static transformations with multiple areas of magnification began with <ref> [8] </ref>. Other authors [5] [16] [17] have discussed the possibility of combining multiple centers of magnification within a single domain. This section will consider methods for combining transformations from multiple individual transformations.
Reference: [9] <author> T. Alan Keahey and Julianne Marley. </author> <title> Non-linear in situ magnification techniques: Overview and an experimental study. </title> <institution> Term project conducted at Indiana University SLIS, </institution> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: As will be shown in the following section, a 1D function can be used as the base function for transformations in two or more dimensions. It can also be used for magnification in one dimension only; Keahey and Marley <ref> [9] </ref> have shown that using such a "magnification bar" can be superior to scrolling for viewing highly structured text documents. * Two Dimensional By applying these simple 1D transformation functions to two dimensional coordinate spaces in various ways, many different effects can be produced.
Reference: [10] <author> T. Alan Keahey and Reid Rivenburgh. Hyperlink: </author> <title> A program for visualizing traversal of the www. Demonstrated at HyperText '96, </title> <year> 1996. </year>
Reference-contexts: For this reason, graph visualization tasks are very amenable to non-linear transformation techniques, and there are many graph visualization systems which take advantage of this [14], <ref> [10] </ref>, [17] and [5]. For discrete domains (such as the texture mapping example just presented), adjacency requirements become more of a concern. This is particularly the case when linear/non-linear combinations or constrained boundaries are introduced.
Reference: [11] <author> John Lamping, Ramana Rao, and Peter Pirolli. </author> <title> A focus+context technique based on hyperbolic geometry for visualizing large hierarchies. </title> <booktitle> In CHI '95 Proceedings, </booktitle> <year> 1995. </year>
Reference-contexts: This approach allows infinite Euclidean space to be mapped into a finite disk in a continuous, non-occluding manner so that the space is "bigger" near the center of the disk, and "smaller" near the periphery. Examples of work using such geometries can be found in <ref> [11] </ref> and [13]. 2.2.3 General Non-Linear The fisheye lens and hyperbolic geometry are special cases of a class of transformations called nonlinear or distortion based transformations. A general property of these non-linear transformations is localized enhancement of detail while still preserving some of the global context for the viewer.
Reference: [12] <author> Y.K. Leung and M.D. Apperly. </author> <title> A review and taxonomy of distortion-oriented presentation techniques. </title> <journal> ACM Transactions on Computer-Human Interaction, </journal> <volume> 1(2) </volume> <pages> 126-160, </pages> <year> 1994. </year>
Reference-contexts: Where possible we follow the lead of Leung and Apperley <ref> [12] </ref>, whose review and taxonomy of these techniques provides a basis for discussion. In particular, Leung and Apperley make the distinction between transformation functions and magnification functions, and show the relationship between them. <p> A general property of these non-linear transformations is localized enhancement of detail while still preserving some of the global context for the viewer. There have been a number of papers describing different approaches to this, a survey of many of these can be found in <ref> [12] </ref>.
Reference: [13] <author> Tamara Munzner and Paul Burchard. </author> <title> Visualizing the structure of the world wide web in 3d hyperbolic space. </title> <booktitle> In VRML '95 Proceedings, </booktitle> <year> 1995. </year>
Reference-contexts: This approach allows infinite Euclidean space to be mapped into a finite disk in a continuous, non-occluding manner so that the space is "bigger" near the center of the disk, and "smaller" near the periphery. Examples of work using such geometries can be found in [11] and <ref> [13] </ref>. 2.2.3 General Non-Linear The fisheye lens and hyperbolic geometry are special cases of a class of transformations called nonlinear or distortion based transformations. A general property of these non-linear transformations is localized enhancement of detail while still preserving some of the global context for the viewer.
Reference: [14] <author> Emanuel G. Noik. </author> <title> Exploring large hyperdocuments: Fisheye views of nested networks. </title> <booktitle> In Hypertext '93: ACM Conference on Hypertext and Hyeprmedia, </booktitle> <year> 1993. </year>
Reference-contexts: For this reason, graph visualization tasks are very amenable to non-linear transformation techniques, and there are many graph visualization systems which take advantage of this <ref> [14] </ref>, [10], [17] and [5]. For discrete domains (such as the texture mapping example just presented), adjacency requirements become more of a concern. This is particularly the case when linear/non-linear combinations or constrained boundaries are introduced.
Reference: [15] <author> F.P. Preparata and M.I. Shamos. </author> <title> Computational Geometry: An Introduction. </title> <publisher> Springer-Verlag, </publisher> <address> New York, Berlin, Heidelberg, Tokyo, </address> <year> 1985. </year> <month> 17 </month>
Reference-contexts: This approach produces a partitioning of the domain space similar to Voronoi diagram partitioning methods from computational geometry <ref> [15] </ref>. The effect of this technique is a parti tioning of the space in which each transformation has its own "domain of influence".
Reference: [16] <author> Manojit Sarkar and Marc H. Brown. </author> <title> Graphical fisheye views of graphs. </title> <type> Technical Report 84, </type> <institution> Systems Research Center, </institution> <year> 1992. </year>
Reference-contexts: It is not in general necessary to construct an explicit lens model, rather the effect can be achieved through simple geometric transformations. A thorough discussion of one mechanism for implementing fisheye transformations can be found in works by Sarkar and Brown <ref> [16] </ref> [17]. 2.2.2 Hyperbolic Hyperbolic geometries provide a natural means for producing local resolution enhancement and global context. <p> If we choose a transformation function with a fixed range (such as R ! (1; 1) these mappings are more easily facilitated. 9 4 Compound Transformations Work on static transformations with multiple areas of magnification began with [8]. Other authors [5] <ref> [16] </ref> [17] have discussed the possibility of combining multiple centers of magnification within a single domain. This section will consider methods for combining transformations from multiple individual transformations.
Reference: [17] <author> Manojit Sarkar and Marc H. Brown. </author> <title> Graphical fisheye views. </title> <journal> Communications of the ACM, </journal> <volume> 37(12) </volume> <pages> 73-84, </pages> <year> 1994. </year>
Reference-contexts: In this schema, the user is provided with a view which is distorted in a manner similar to that produced by a very wide-angle camera lens. Furnas popularized this idea in 1986 [5], and it has since been used in other systems such as Sarkar and Brown <ref> [17] </ref>. Several different mechanisms can be used to implement the fisheye lens effect. It is not in general necessary to construct an explicit lens model, rather the effect can be achieved through simple geometric transformations. <p> It is not in general necessary to construct an explicit lens model, rather the effect can be achieved through simple geometric transformations. A thorough discussion of one mechanism for implementing fisheye transformations can be found in works by Sarkar and Brown [16] <ref> [17] </ref>. 2.2.2 Hyperbolic Hyperbolic geometries provide a natural means for producing local resolution enhancement and global context. <p> Several different choices exist for a 1D base transformation function. Furnas [5] and Sarkar and Brown <ref> [17] </ref> use the function G (x) = (d+1)x dx+1 to perform this transformation. G (x) is well behaved and has desirable non-linear characteristics over the domain [0; 1], so that G (x) : [0; 1] ! [0; 1]. <p> For this reason, graph visualization tasks are very amenable to non-linear transformation techniques, and there are many graph visualization systems which take advantage of this [14], [10], <ref> [17] </ref> and [5]. For discrete domains (such as the texture mapping example just presented), adjacency requirements become more of a concern. This is particularly the case when linear/non-linear combinations or constrained boundaries are introduced. <p> If we choose a transformation function with a fixed range (such as R ! (1; 1) these mappings are more easily facilitated. 9 4 Compound Transformations Work on static transformations with multiple areas of magnification began with [8]. Other authors [5] [16] <ref> [17] </ref> have discussed the possibility of combining multiple centers of magnification within a single domain. This section will consider methods for combining transformations from multiple individual transformations.
References-found: 17

