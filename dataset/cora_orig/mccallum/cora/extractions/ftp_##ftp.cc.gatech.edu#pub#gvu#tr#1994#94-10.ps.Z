URL: ftp://ftp.cc.gatech.edu/pub/gvu/tr/1994/94-10.ps.Z
Refering-URL: http://www.cs.gatech.edu/gvu/reports/1994/
Root-URL: 
Title: Toward Flexible Control of the Temporal Mapping from Concurrent Program Events to Animations  
Author: Eileen Kraemer John T. Stasko 
Note: E-mail: feileen,staskog@cc.gatech.edu  
Abstract: Technical Report 94-10 Graphics, Visualization, and Usability Center College of Computing Georgia Institute of Technology Atlanta, GA 30332-0280 (404) 853-9386 Abstract As parallel and distributed computers become more widely available and used, the already important process of understanding and debugging concurrent programs will take on even greater importance. We believe that visualization can help in the process. In this paper we discuss heretofore unaddressed issues in the visualization of concurrent programs, and present the Animation Choreographer. The Animation Choreographer allows users to view, manipulate, and explore the set of alternate feasible orderings of the program execution under study, both through the Choreographer interface and in the context of the selected visualizations, thus providing the user with a variety of temporal perspectives on the computation. 
Abstract-found: 1
Intro-found: 1
Reference: [CHK92] <author> Janice E. Cuny, Alfred A. Hough, and Joydip Kundu. </author> <title> Logical time in visualizations produced by parallel programs. In Visualization '92, </title> <address> Boston, MA, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: One hope for helping this process is the use of visualization and animation tools. A number of systems providing visualizations of concurrent programs have been developed [KS93]. Several authors [Sto89], [LMCF90], and <ref> [CHK92] </ref>, have emphasized the value of displaying alternate orderings of a program's execution. However, we believe that a number of critical, interrelated issues have yet to be addressed in depth. Below we describe a few scenarios that are symptomatic of these issues. <p> If a sequence of events that matches the user-specified pattern is located, a picture is generated. Otherwise, the display fails. The specified order is not used to drive an animation, nor are alternate consistent orderings generated automatically. More recent work <ref> [CHK92] </ref> by the same authors extends these techniques to the manipulation of logical time in order to produce more coherent visualizations.
Reference: [Fid91] <author> Colin Fidge. </author> <title> Logical time in distributed computing systems. </title> <journal> Computer, </journal> <volume> 24(8) </volume> <pages> 28-33, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: The interactive user interface and graphics portions of the Choreographer are implemented using the X Window System and Motif. 11 by the end-user. 12 semantics are based on the "happened before" relation as discussed in [Lam78] and <ref> [Fid91] </ref>. The anim spec file defines the POLKA animation Views that may be created, the scenes associated with each view, and the parameters associated with each scene. A View is a POLKA class that encapsulates a particular visual representation of the program being animated.
Reference: [GHPW90] <author> G.A. Geist, M.T. Heath, B.W. Peyton, and P.H. Worley. PICL: </author> <title> a portable instruemnted communication library, C reference manual. </title> <type> Technical report, </type> <institution> Oak Ridge National Labs, Oak Ridge, TN, </institution> <year> 1990. </year>
Reference-contexts: Thus, it can properly reflect the concurrent operations occurring in a parallel program. POLKA is available via anonymous ftp from par.cc.gatech.edu. Using POLKA, libraries of visualizations have been developed synchronization, history, and and callgraph views for Pthreads programs on the KSR, performance views based on PICL <ref> [GHPW90] </ref> traces, 3-D visualizations of communication on the MasPar, algorithmic and performance views of branch and bound algorithms in the iPSC hypercube, as well as a number of application-specific visualizations. Using PARADE, programmers may select visualizations from libraries such as these, or they may create their own new visualizations.
Reference: [HC91] <author> Alfred A. Hough and Janice E. Cuny. </author> <title> Perspective views: A technique for enhancing parallel program visualization. </title> <booktitle> In Proceedings of 1991 International Conference on Parallel Processing, </booktitle> <pages> pages II 124-132, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: No support is provided for producing visualizations which adhere to the concurrent order specified in the execution history graph. Perspective Views <ref> [HC91] </ref> performs "reordering of events", but for a different purpose, and on a different scale. The goal of Perspective Views is the use of abstraction to understand the flow of data and control between processors. The user defines abstract events, usually logical patterns of communication.
Reference: [HMW90] <author> David P. Helmbold, Charlie E. McDowell, and Jian-Zhong Wang. Trace-viewer: </author> <title> A graphical browser for trace analysis. </title> <type> Technical Report UCSC 18 CRL-90-59, </type> <institution> Univ. of California at Santa Cruz, </institution> <address> Santa Cruz, CA, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: This is done through a selection in the File menu. An execution graph, similar to the graphs described in [ZR91], <ref> [HMW90] </ref> , and [ZSM92] then appears in the Choreographer display window. This is an acyclic, directed graph in which the nodes represent the recorded program events, and the arcs indicate the temporal precedence relations between these events. <p> The importance of time in representing and understanding the behavior or parallel programs has been recognized by numerous researchers. Systems such as MAD [ZR91], the monitoring system for the Makbilan shared memory machine, and TraceViewer <ref> [HMW90] </ref> display 16 a program causality graph, allow the user to select a node, and will highlight those event nodes that must have occurred before, must have occurred after, or may have occurred concurrently with the selected node.
Reference: [KS93] <author> Eileen Kraemer and John T. Stasko. </author> <title> The visualization of parallel systems: An overview. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 18(2) </volume> <pages> 105-117, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: One hope for helping this process is the use of visualization and animation tools. A number of systems providing visualizations of concurrent programs have been developed <ref> [KS93] </ref>. Several authors [Sto89], [LMCF90], and [CHK92], have emphasized the value of displaying alternate orderings of a program's execution. However, we believe that a number of critical, interrelated issues have yet to be addressed in depth. Below we describe a few scenarios that are symptomatic of these issues.
Reference: [Lam78] <author> Leslie Lamport. </author> <title> Time, clocks, and the ordering of events in a distributed system. </title> <journal> Communications of the ACM, </journal> <volume> 21(7) </volume> <pages> 558-565, </pages> <month> July </month> <year> 1978. </year>
Reference-contexts: The interactive user interface and graphics portions of the Choreographer are implemented using the X Window System and Motif. 11 by the end-user. 12 semantics are based on the "happened before" relation as discussed in <ref> [Lam78] </ref> and [Fid91]. The anim spec file defines the POLKA animation Views that may be created, the scenes associated with each view, and the parameters associated with each scene. A View is a POLKA class that encapsulates a particular visual representation of the program being animated. <p> Logical time, based on the happened-before relationship <ref> [Lam78] </ref> and the causal relationships in the program, defines the observable order of events, the partial order. Phase time relies on the user's specification of the events that constitute a phase, and is a refinement of logical time. Their system, Moviola, displays an execution history graph as a space-time diagram.
Reference: [LMCF90] <author> Thomas J. LeBlanc, John M. Mellor-Crummey, and Robert J. Fowler. </author> <title> Analyzing parallel program execution using multiple views. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 9(2) </volume> <pages> 203-217, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: One hope for helping this process is the use of visualization and animation tools. A number of systems providing visualizations of concurrent programs have been developed [KS93]. Several authors [Sto89], <ref> [LMCF90] </ref>, and [CHK92], have emphasized the value of displaying alternate orderings of a program's execution. However, we believe that a number of critical, interrelated issues have yet to be addressed in depth. Below we describe a few scenarios that are symptomatic of these issues.
Reference: [MHJ91] <author> Allen D. Malony, David H. Hammerslag, and David J. Jablownski. Trace-view: </author> <title> A trace visualization tool. </title> <journal> IEEE Software, </journal> <volume> 8(5) </volume> <pages> 29-38, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: Thus, a view-specific, trace-format specific version of the Choreographer is generated at the beginning of a visualization session. This generation is performed by the Choreographer-generator tool. TraceView <ref> [MHJ91] </ref> also uses this concept of a visualization session. Figure 3 illustrates the generation process in PARADE. The user 10 supplies three files an event spec file, an anim spec file, and a map spec file. The generator tool then produces source code representing the session-specific portions of the Choreographer.
Reference: [SK93] <author> John T. Stasko and Eileen Kraemer. </author> <title> A methodology for building application-specific visualizations of parallel programs. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 18(2) </volume> <pages> 258-264, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: The user specifies a mapping from each program event to zero or more display events. A display event is composed of changes to the graphical object in the display objects may appear, disappear, move, grow, change color, etc. These displays are created using POLKA <ref> [SK93] </ref>, an animation system that supports concurrent, overlapping animation actions that properly reflect the concurrent operations occurring in a program. We wish to animate these displays in a consistent, comprehensible manner, and we are particularly interested in the representation of time, duration, and event order. <p> Currently under development is an automatic instrumentation tool for parallel FORTRAN, and monitoring or tracing libraries for KSR Pthreads and Conch, a PVM-like distributed system. The use of such a tool is not required, however. PARADE accepts events records in various formats. The POLKA <ref> [SK93] </ref> animation toolkit, which has both 2-D and 3-D versions, is used to design and generate visualizations. POLKA supports true animation - smooth, continuous movements and actions, not just blinking objects or color changes. It supports concurrent, overlapping animation actions on multiple objects.
Reference: [Sto89] <author> Janice M. Stone. </author> <title> A graphical representation of concurrent processes. </title> <journal> SIGPLAN Notices, </journal> <volume> 24(1) </volume> <pages> 226-235, </pages> <month> January </month> <year> 1989. </year> <booktitle> (Proceedings of the Workshop on Parallel and Distributed Debugging, </booktitle> <address> Madison, WI, </address> <month> May </month> <year> 1988). </year>
Reference-contexts: One hope for helping this process is the use of visualization and animation tools. A number of systems providing visualizations of concurrent programs have been developed [KS93]. Several authors <ref> [Sto89] </ref>, [LMCF90], and [CHK92], have emphasized the value of displaying alternate orderings of a program's execution. However, we believe that a number of critical, interrelated issues have yet to be addressed in depth. Below we describe a few scenarios that are symptomatic of these issues. <p> However, knowledge of this ordering is not used to drive the ordering of events in an associated visualization. Stone <ref> [Sto89] </ref> and LeBlanc, et al.[LMCF90], emphasize the value of displaying both the actual order of events in a program's execution and alternate orderings of those events. Stone's concurrency map is designed to concisely represent the collection of feasible event-orderings for a set of concurrent processes.
Reference: [ZR91] <author> Dror Zernik and Larry Rudolph. </author> <title> Animating work and time for debugging parallel programs foundations and experience. </title> <journal> SIGPLAN Notices, </journal> <volume> 26(12) </volume> <pages> 46-56, </pages> <month> December </month> <year> 1991. </year> <booktitle> In Proceedings of the SIGPLAN/SIGOPS Workshop on Parallel and Distributed Debugging, </booktitle> <address> Santa Cruz, CA, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: The graphical interface to the Choreographer appears as in 14 Interacting with the Choreographer After the Choreographer has been started, the first task is to read in the event records. This is done through a selection in the File menu. An execution graph, similar to the graphs described in <ref> [ZR91] </ref>, [HMW90] , and [ZSM92] then appears in the Choreographer display window. This is an acyclic, directed graph in which the nodes represent the recorded program events, and the arcs indicate the temporal precedence relations between these events. <p> The importance of time in representing and understanding the behavior or parallel programs has been recognized by numerous researchers. Systems such as MAD <ref> [ZR91] </ref>, the monitoring system for the Makbilan shared memory machine, and TraceViewer [HMW90] display 16 a program causality graph, allow the user to select a node, and will highlight those event nodes that must have occurred before, must have occurred after, or may have occurred concurrently with the selected node.
Reference: [ZSM92] <author> Dror Zernik, Marc Snir, and Dalia Malki. </author> <title> Using visualization tools to understand concurrency. </title> <journal> IEEE Software, </journal> <volume> 9(3):87 - 92, </volume> <month> May </month> <year> 1992. </year> <month> 19 </month>
Reference-contexts: This is done through a selection in the File menu. An execution graph, similar to the graphs described in [ZR91], [HMW90] , and <ref> [ZSM92] </ref> then appears in the Choreographer display window. This is an acyclic, directed graph in which the nodes represent the recorded program events, and the arcs indicate the temporal precedence relations between these events. The events produced by a particular process or thread are displayed in a column. <p> Stone [Sto89] and LeBlanc, et al.[LMCF90], emphasize the value of displaying both the actual order of events in a program's execution and alternate orderings of those events. Stone's concurrency map is designed to concisely represent the collection of feasible event-orderings for a set of concurrent processes. The causality graph <ref> [ZSM92] </ref> also displays a logical view of the execution of a concurrent program. The concurrency map provides a single representation of the execution of the program. Furthermore, the alternate orderings of events are not elaborated; the viewer must study the display closely to derive them.
References-found: 13

