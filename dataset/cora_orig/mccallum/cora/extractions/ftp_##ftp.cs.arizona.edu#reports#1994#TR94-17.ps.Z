URL: ftp://ftp.cs.arizona.edu/reports/1994/TR94-17.ps.Z
Refering-URL: http://glimpse.cs.arizona.edu/udi.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: sw@cs.ccu.edu.tw  udi@cs.arizona.edu  
Title: A FAST ALGORITHM FOR MULTI-PATTERN SEARCHING  SUMMARY  
Author: Sun Wu Udi Manber 
Keyword: algorithms, merging, multiple patterns, searching, string matching.  
Date: May 1994  
Address: Chia-Yi, Taiwan  Tucson, AZ 85721  
Affiliation: Department of Computer Science Chung-Cheng University  Department of Computer Science University of Arizona  
Abstract: A new algorithm to search for multiple patterns at the same time is presented. The algorithm is faster than previous algorithms and can support a very large number tens of thousands of patterns. Several applications of the multi-pattern matching problem are discussed. We argue that, in addition to previous applications that required such search, multi-pattern matching can be used in lieu of indexed or sorted data in some applications involving small to medium size datasets. Its advantage, of course, is that no additional search structure is needed. The information contained in this paper does not necessarily reflect the position or the policy of the U.S. Government or other sponsors of this research. No official endorsement should be inferred. 
Abstract-found: 1
Intro-found: 1
Reference: [AC75] <author> Aho, A. V., and M. J. Corasick, </author> <title> ``Efficient string matching: an aid to bibliographic search,'' </title> <journal> Communications of the ACM 18 (June 1975), </journal> <pages> pp. 333-340. </pages>
Reference-contexts: There are, of course, many other applications. Aho and Corasick <ref> [AC75] </ref> presented a linear-time algorithm for this problem, based on an automata approach. This algorithm serves as the basis for the UNIX tool fgrep.
Reference: [AG+90] <author> Altschul S. F., W. Gish, W. Miller, E. W. Myers, and D. J. Lipman, </author> <title> ``Basic local alignment search tool,'' </title> <editor> J. </editor> <booktitle> Molecular Biology 15 (1990), </booktitle> <pages> pp. 403-410. </pages>
Reference-contexts: forms such as dates; it is used in glimpse [MW94] to support Boolean queries by searching for all terms at the same time and then intersecting the results; and it is used in DNA searching by translating an approximate search to a search for a large number of exact patterns <ref> [AG+90] </ref>. There are, of course, many other applications. Aho and Corasick [AC75] presented a linear-time algorithm for this problem, based on an automata approach. This algorithm serves as the basis for the UNIX tool fgrep.
Reference: [Ba89] <author> Baeza-Yates R. A., </author> <title> ``Improved string searching,'' </title> <booktitle> Software Practice and Experience 19 (1989), </booktitle> <pages> pp. 257-271. </pages>
Reference-contexts: The Commentz-Walter algorithm is substantially faster than the Aho-Corasick algorithm in practice. Hume [Hu91] designed a tool called gre based on this algorithm, and version 2.0 of fgrep by the GNU project [Ha93] is using it. Baeza-Yates <ref> [Ba89] </ref> also gave an algorithm that combines the Boyer-Moore-Horspool algorithm [Ho80] (which is a slight variation of the classical Boyer-Moore algorithm) with the Aho-Corasick algorithm. We present a different approach that also uses the ideas of Boyer and Moore.
Reference: [BM77] <author> Boyer R. S., and J. S. Moore, </author> <title> ``A fast string searching algorithm,'' </title> <booktitle> Communications of the ACM 20 (October 1977), </booktitle> <pages> pp. 762-772. </pages>
Reference-contexts: Aho and Corasick [AC75] presented a linear-time algorithm for this problem, based on an automata approach. This algorithm serves as the basis for the UNIX tool fgrep. A linear-time algorithm is optimal in the worst case, but as the regular string-searching algorithm by Boyer and Moore <ref> [BM77] </ref> demonstrated, it is possible to actually skip a large portion of the text while searching, leading to faster than linear algorithms in the average case. Commentz-Walter [CW79] presented an algorithm for the multi-pattern matching problem that combines the Boyer-Moore technique with the Aho-Corasick algorithm. <p> Section 3 contains a rough analysis of the expected running time, and experimental results comparing our algorithm to three others. The last section discusses applications of multi-pattern matching. 3 2. The Algorithm 2.1. Outline of the Algorithm The basic idea of the Boyer-Moore string-matching algorithm <ref> [BM77] </ref> is as follows. Suppose that the pattern is of length m. We start by comparing the last character of the pattern against t m , the m'th character of the text.
Reference: [CW79] <author> Commentz-Walter, B, </author> <title> ``A string matching algorithm fast on the average,'' </title> <booktitle> Proc. 6th International Colloquium on Automata, Languages, and Programming (1979), </booktitle> <pages> pp. 118-132. </pages>
Reference-contexts: A linear-time algorithm is optimal in the worst case, but as the regular string-searching algorithm by Boyer and Moore [BM77] demonstrated, it is possible to actually skip a large portion of the text while searching, leading to faster than linear algorithms in the average case. Commentz-Walter <ref> [CW79] </ref> presented an algorithm for the multi-pattern matching problem that combines the Boyer-Moore technique with the Aho-Corasick algorithm. The Commentz-Walter algorithm is substantially faster than the Aho-Corasick algorithm in practice.
Reference: [Ha93] <author> Haertel, M., </author> <title> ``Gnugrep-2.0,'' </title> <journal> Usenet archive comp.sources.reviewed, </journal> <volume> Volume 3 (July, </volume> <year> 1993). </year>
Reference-contexts: The Commentz-Walter algorithm is substantially faster than the Aho-Corasick algorithm in practice. Hume [Hu91] designed a tool called gre based on this algorithm, and version 2.0 of fgrep by the GNU project <ref> [Ha93] </ref> is using it. Baeza-Yates [Ba89] also gave an algorithm that combines the Boyer-Moore-Horspool algorithm [Ho80] (which is a slight variation of the classical Boyer-Moore algorithm) with the Aho-Corasick algorithm. We present a different approach that also uses the ideas of Boyer and Moore. <p> The patterns were words from the file (all patterns appeared in the text). Table 1 compares our algorithm, labeled agrep, against four other search routines: the original egrep and fgrep, GNU-grep version 2.0 <ref> [Ha93] </ref>, and gre, an older program written by Andrew Hume (which at the time was the only program that could handle large number of patterns). The patterns were words of sizes ranging from 5 to 15 with average size slightly above 6.
Reference: [Ho80] <author> Horspool, N., </author> <title> ``Practical Fast Searching in Strings,'' </title> <journal> Software Practice and Experience, </journal> <month> 10 </month> <year> (1980). </year>
Reference-contexts: The Commentz-Walter algorithm is substantially faster than the Aho-Corasick algorithm in practice. Hume [Hu91] designed a tool called gre based on this algorithm, and version 2.0 of fgrep by the GNU project [Ha93] is using it. Baeza-Yates [Ba89] also gave an algorithm that combines the Boyer-Moore-Horspool algorithm <ref> [Ho80] </ref> (which is a slight variation of the classical Boyer-Moore algorithm) with the Aho-Corasick algorithm. We present a different approach that also uses the ideas of Boyer and Moore. Our algorithm is quite simple, and the main engine of it is given later in the paper.
Reference: [Hu91] <author> Hume A., </author> <type> personal communication (1991). </type>
Reference-contexts: Commentz-Walter [CW79] presented an algorithm for the multi-pattern matching problem that combines the Boyer-Moore technique with the Aho-Corasick algorithm. The Commentz-Walter algorithm is substantially faster than the Aho-Corasick algorithm in practice. Hume <ref> [Hu91] </ref> designed a tool called gre based on this algorithm, and version 2.0 of fgrep by the GNU project [Ha93] is using it. Baeza-Yates [Ba89] also gave an algorithm that combines the Boyer-Moore-Horspool algorithm [Ho80] (which is a slight variation of the classical Boyer-Moore algorithm) with the Aho-Corasick algorithm.
Reference: [Ma94] <author> U. Manber, </author> <title> ``Finding Similar Files in a Large File System,'' </title> <booktitle> Usenix Winter 1994 Technical Conference, </booktitle> <address> San Francisco (January 1994), </address> <pages> pp. 1-10. </pages>
Reference-contexts: For more patterns, GNU-grep becomes slower (because of the added complexity of building tries); for 10,000 patterns, agrep takes about 0.17 seconds whereas GNU-grep requires about 0.90 seconds. 5. Additional Applications In another project, to find all similar files in a large file system <ref> [Ma94] </ref>, we needed a data structure to handle the following type of searches. We had a large set of (typically 100,000 to 500,000) small records, each identified by a unique integer. The main operation was to retrieve several records (typically 50-100, but sometimes as high as 1000) given their identifiers.
Reference: [MW94] <author> U. Manber and S. Wu, ``GLIMPSE: </author> <title> A Tool to Search Through Entire File Systems,'' </title> <booktitle> Usenix Winter 1994 Technical Conference, </booktitle> <address> San Francisco (January 1994), </address> <pages> pp. 23-32. </pages> <note> hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 2 We expect to make mar available by anonymous ftp in a few weeks. 11 </note>
Reference-contexts: used in data filtering (also called data mining) to find selected patterns, for example, from a stream of newsfeed; it is used in security applications to detect certain suspicious keywords; it is used in searching for patterns that can have several forms such as dates; it is used in glimpse <ref> [MW94] </ref> to support Boolean queries by searching for all terms at the same time and then intersecting the results; and it is used in DNA searching by translating an approximate search to a search for a large number of exact patterns [AG+90]. There are, of course, many other applications. <p> An earlier version of this algorithm was part of the second version of agrep [WM92a, WM92b], although the algorithm has not been discussed in [WM92b] and only briefly in [WM92a]. The current version is used in glimpse <ref> [MW94] </ref>. The design of the algorithm concentrates on typical searches rather than on worst-case behavior. This allows us to make some engineering decisions that we believe are crucial to making the algorithm significantly faster than other algorithms in practice. We start by describing the algorithm in detail.
Reference: [WM92a] <author> Wu S., and U. Manber, </author> <title> ``Agrep A Fast Approximate Pattern-Matching Tool,'' </title> <booktitle> Usenix Winter 1992 Technical Conference, </booktitle> <address> San Francisco (January 1992), </address> <pages> pp. 153-162. </pages>
Reference-contexts: We present a different approach that also uses the ideas of Boyer and Moore. Our algorithm is quite simple, and the main engine of it is given later in the paper. An earlier version of this algorithm was part of the second version of agrep <ref> [WM92a, WM92b] </ref>, although the algorithm has not been discussed in [WM92b] and only briefly in [WM92a]. The current version is used in glimpse [MW94]. The design of the algorithm concentrates on typical searches rather than on worst-case behavior. <p> Our algorithm is quite simple, and the main engine of it is given later in the paper. An earlier version of this algorithm was part of the second version of agrep [WM92a, WM92b], although the algorithm has not been discussed in [WM92b] and only briefly in <ref> [WM92a] </ref>. The current version is used in glimpse [MW94]. The design of the algorithm concentrates on typical searches rather than on worst-case behavior. This allows us to make some engineering decisions that we believe are crucial to making the algorithm significantly faster than other algorithms in practice.
Reference: [WM92b] <author> Wu S., and U. Manber, </author> <title> ``Fast Text Searching Allowing Errors,'' </title> <booktitle> Communications of the ACM 35 (October 1992), </booktitle> <pages> pp. 83-91. </pages>
Reference-contexts: We present a different approach that also uses the ideas of Boyer and Moore. Our algorithm is quite simple, and the main engine of it is given later in the paper. An earlier version of this algorithm was part of the second version of agrep <ref> [WM92a, WM92b] </ref>, although the algorithm has not been discussed in [WM92b] and only briefly in [WM92a]. The current version is used in glimpse [MW94]. The design of the algorithm concentrates on typical searches rather than on worst-case behavior. <p> Our algorithm is quite simple, and the main engine of it is given later in the paper. An earlier version of this algorithm was part of the second version of agrep [WM92a, WM92b], although the algorithm has not been discussed in <ref> [WM92b] </ref> and only briefly in [WM92a]. The current version is used in glimpse [MW94]. The design of the algorithm concentrates on typical searches rather than on worst-case behavior.
References-found: 12

