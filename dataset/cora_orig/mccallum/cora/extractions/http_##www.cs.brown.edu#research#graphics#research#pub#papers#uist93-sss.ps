URL: http://www.cs.brown.edu/research/graphics/research/pub/papers/uist93-sss.ps
Refering-URL: http://www.cs.brown.edu/research/graphics/research/pub/
Root-URL: http://www.cs.brown.edu
Email: fms,sss,ojt,sprg@cs.brown.edu  
Title: Stretching the Rubber Sheet: A Metaphor for Viewing Large Layouts on Small Screens  
Author: Manojit Sarkar, Scott S. Snibbe, Oren J. Tversky, and Steven P. Reiss 
Keyword: Information Visualization, Graphical Visualization, Interface Metaphors, Interactive Systems  
Address: Providence, RI 02912-1910 USA  
Affiliation: Department of Computer Science Brown University,  
Abstract: We propose the metaphor of rubber sheet stretching for viewing large and complex layouts within small display areas. Imagine the original 2D layout on a rubber sheet. Users can select and enlarge different areas of the sheet by holding and stretching it with a set of special tools called handles. As the user stretches an area, a greater level of detail is displayed there. The technique has some additional desirable features such as areas specified as arbitrary closed polygons, multiple regions of interest, and uniform scaling inside the stretched regions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Thaddeus Beier, and Shawn Neely. </author> <title> Feature-based image metamorphosis. </title> <booktitle> Proc. ACM SIGGRAPH, Published as Computer Graphics, </booktitle> <volume> vol. 26, no. 2, </volume> <pages> pp. 35|41, </pages> <year> 1992. </year>
Reference-contexts: Compare this figure with Figure 2. The algorithm for transforming a source layout to a stretched layout (henceforth called destination layout) is based on a technique used by Beier and Neely for image transformation <ref> [1] </ref>. A single pair of vectors, one corresponding to the source layout and another corre sponding to the destination layout, defines a mapping between the two layouts. This can be extended to multiple pairs of vectors by weighting the pairs based on their length and distance from the source points.
Reference: [2] <author> Stuart K. Card, George G. Robertson, and Jock D. Mackinlay. </author> <title> The Information Visualizer, an information workspace. </title> <booktitle> Proc. ACM SIGCHI Conf. on Human Factors in Computing Systems, </booktitle> <pages> pp. 189|194, </pages> <year> 1991. </year>
Reference-contexts: Since both source and destination position and size of the information items are known, the system computes the bounding box (convex hull) of the selected items to generate a rectangle (polygon) handle. Structured Layouts Hierarchical abstraction is a useful technique for managing and navigating through large volumes of information <ref> [2] </ref>. It clusters related information nodes, and creates abstract higher level nodes to represent each cluster. These higher level nodes are again clustered together to create further higher level nodes. We have integrated techniques of hierarchical decomposition and stretching for viewing structured layouts.
Reference: [3] <author> Peter Eades, Wei Lai, Kazuo Misue, and Kozo Sugiyama. </author> <title> Preserving the mental map of a diagram. </title> <institution> Research Report IIAS|RR|91|16E, International Institute for Advanced Study of Social Information Science, Fujitsu Laboratories Limited, </institution> <year> 1991. </year>
Reference-contexts: Therefore a complete visualization system should allow multiple foci. Preserve overall shape: Maintaining the overall shape of the layout reduces the disorienting effect due to the introduced distortion. Eades, Lai, Misue and Sugiyama <ref> [3] </ref>, mention three primary properties which should be preserved by transformations in order to pre serve the user's "mental map" of the layout. The properties are orthogonal ordering , clusters and topology. Orthogonal ordering can be simply thought of as the "compass direction" between two points.
Reference: [4] <author> George W. Furnas. </author> <title> Generalized fisheye views. </title> <booktitle> Proc. ACM SIGCHI Conf. on Human Factors in Computing Systems, </booktitle> <pages> pp. 16|23, </pages> <year> 1986. </year>
Reference-contexts: In the following section we review two such techniques. Related Research In 1986, Furnas proposed the concept of a Fisheye Lens <ref> [4] </ref>. In photography, a fisheye lens is a very wide-angle lens. It shows the nearby regions in great detail while showing surrounding regions in successively less detail. The software analog to a fisheye lens shows local detail and global context in one view.
Reference: [5] <author> T. N. T. Goodman, and K. Unsworth. </author> <title> Shape-preserving interpolation by parametrically defined curves. </title> <journal> SIAM J. Numerical Analysis, </journal> <volume> vol. 25, no. 6, </volume> <pages> pp. 1453|1465, </pages> <month> December, </month> <year> 1988. </year>
Reference-contexts: Here n is the number of polygonal handles, and we assume there is at least one handle on the screen. The values of the derivatives provide the scale factors at the handle boundaries. Figure 9 illustrates the problem for a single handle. Piece-wise curves such splines as discussed in <ref> [5] </ref> are not appropriate here because change in two control points and derivatives at two points of a spline (corresponding to a change in position and size of one handle) affects the spline only locally.
Reference: [6] <author> Jock D. Mackinlay, George G. Robertson, and Stuart K. Card. </author> <title> The perspective wall: Detail and context smoothly integrated. </title> <booktitle> Proc. ACM SIGCHI Conf. on Human Factors in Computing Systems, </booktitle> <pages> pp. 173| 179, </pages> <year> 1991. </year>
Reference-contexts: More importantly, users are not allowed to control the amount of space allocated to the focus. The system indirectly infers this from a specified distortion factor. In 1991, Mackinlay, Robertson and Card developed a technique called the Perspective Wall for viewing large information bases ordered along a single dimension <ref> [6] </ref>. Typical examples of such information are project records ordered by chronology and directory entries ordered alphabetically. Because their lengths are much larger than their widths, such structures result in 2D layouts of wide aspect ratios. Their technique folds a 2D layout into a 3D wall.
Reference: [7] <author> Manojit Sarkar, and Marc H. Brown. </author> <title> Graphical Fisheye Views of Graphs. </title> <booktitle> Proc. ACM SIGCHI Conf. on Human Factors in Computing Systems, </booktitle> <pages> pp. 83| 91, </pages> <year> 1992. </year>
Reference-contexts: The software analog to a fisheye lens shows local detail and global context in one view. In 1992, Sarkar and Brown provided a concrete graphical interpretation to Fisheye Views by building a prototype browser for 2D layouts <ref> [7] </ref>. The browser allows a user to specify a focal point in a layout. It then expands the focal region, and correspondingly contracts the other regions. Users can browse a layout by clicking and dragging. The system keeps enlarging the regions near the foci in real time.
Reference: [8] <author> Manojit Sarkar, and Steven P. Reiss. </author> <title> Manipulating Screen Space with StretchTools: Visualizing Large Structure on Small Screen. </title> <type> Technical Report CS| 92|42, </type> <institution> Department of Computer Science, Brown University, </institution> <address> Providence, RI 02912, USA, </address> <year> 1992. </year>
Reference-contexts: We have decided to describe both techniques, concentrating mostly on the later, because each has its own merits, and neither is subsumed by the other. Readers can find more detailed description of the former technique in <ref> [8] </ref>. Orthogonal Stretching Figures 1 and 2 together illustrate the orthogonal stretching technique. Figure 1 shows a large graph layout with 134 nodes and 338 links. The nodes represent the major US cities, and the links represent the routes connecting the cities.
References-found: 8

