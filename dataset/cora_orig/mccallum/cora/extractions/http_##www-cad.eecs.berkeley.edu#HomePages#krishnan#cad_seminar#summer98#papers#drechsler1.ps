URL: http://www-cad.eecs.berkeley.edu/HomePages/krishnan/cad_seminar/summer98/papers/drechsler1.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/krishnan/cad_seminar/summer98/abstract/drechsler.html
Root-URL: http://www.cs.berkeley.edu
Email: fguenther,drechsleg@informatik.uni-freiburg.de  
Title: Linear Transformations and Exact Minimization of BDDs  
Author: Wolfgang Gunther Rolf Drechsler 
Address: 79110 Freiburg im Breisgau, Germany  
Affiliation: Institute of Computer Science, Albert-Ludwigs-University  
Abstract: We present an exact algorithm to find an optimal linear transformation for the variables of a Boolean function to minimize its corresponding ordered Binary Decision Diagram (BDD). To prune the huge search space, techniques known from algorithms for finding the optimal variable ordering are used. This BDD minimization finds direct application in FPGA design. We give experimental results for a large variety of circuits to show the efficiency of our approach. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> V. Bertacco, S. Minato, P. Verplaetse, L. Benini, and G. De Micheli. </author> <title> Decision diagrams and pass transistor logic synthesis. </title> <booktitle> In Int'l Workshop on Logic Synth., </booktitle> <year> 1997. </year>
Reference-contexts: Nevertheless, the approaches presented so far are purely heuristical and cannot give any guarantees on the quality of the result. Several design methods based on BDDs have been proposed, and recently, first promising results on transforming BDDs directly to pass transistor logic have been reported <ref> [5, 1] </ref>. There, the size of the resulting circuit directly depends on the size of the BDD. It is therefore desirable to minimize the size of the BDD.
Reference: [2] <author> S.D. Brown, R.J. Francis, J. Rose, and Z.G. Vranesic. </author> <title> Field-Programmable Gate Arrays. </title> <publisher> Kluwer Academic Publisher, </publisher> <year> 1992. </year>
Reference-contexts: It is therefore desirable to minimize the size of the BDD. Notice that in these applications a small gain counted in the number of nodes can tremendously simplify the mapping to FPGAs or a target architecture <ref> [2, 14] </ref>. In this paper, we present the first algorithm to ex actly find the optimal linear transformation, i.e. a linear transformation for which the size of the BDD is minimal with respect to the number of nodes.
Reference: [3] <author> R.E. Bryant. </author> <title> Graph based algorithms for Boolean function manipulation. </title> <journal> IEEE Trans. on Comp., </journal> <volume> 35(8) </volume> <pages> 677-691, </pages> <year> 1986. </year>
Reference-contexts: The order of the variables is fixed over all G j s. For functions represented by reduced, ordered BDDs efficient manipulations are possible <ref> [3] </ref>.
Reference: [4] <author> R.E. Bryant. </author> <title> On the complexity of VLSI implementations and graph representations of Boolean functions with application to integer multiplication. </title> <journal> IEEE Trans. on Comp., </journal> <volume> 40 </volume> <pages> 205-213, </pages> <year> 1991. </year>
Reference-contexts: Obviously, we can not determine the optimal number within reasonable time, so we have to give a lower estimation for that number, which can be computed efficiently. Lower bounds for the size of BDDs have been proven in <ref> [4] </ref> using lower bound techniques from VLSI design. These techniques were applicated in an automated way for the first time in [6], giving good estimations for the lower bound in case of "pure" reordering.

Reference: [6] <author> R. Drechsler, N. Gockel, and W. Gunther. </author> <title> Fast exact minimization of BDDs. </title> <type> Technical Report 94, </type> <institution> Albert-Ludwigs-University, Freiburg, </institution> <month> Oct. </month> <year> 1997. </year>
Reference-contexts: Likewise, one can start at the top level and consider the levels upwards. As (I) = (X n nI), Lemma 1 can be used the same way in that case. Actually, this is done by all previously presented algorithms except <ref> [6] </ref> (for a discussion see [6] and Subsection 5.2). 4 Linear Transformations As in the case of permutations, the first approach to exact minimization would be to construct BDDs for all linear transformations. Obviously, this approach is only applicable to "tiny" functions. <p> Likewise, one can start at the top level and consider the levels upwards. As (I) = (X n nI), Lemma 1 can be used the same way in that case. Actually, this is done by all previously presented algorithms except <ref> [6] </ref> (for a discussion see [6] and Subsection 5.2). 4 Linear Transformations As in the case of permutations, the first approach to exact minimization would be to construct BDDs for all linear transformations. Obviously, this approach is only applicable to "tiny" functions. <p> We do not mention this further, as it would complicate the algorithm unnecessarily. 5 Finding the Optimal Linear Trans formation Algorithms for finding the optimal variable ordering are based on iteratively considering all levels of the BDD <ref> [7, 6] </ref>. Considering one level means calculating the minimum number of nodes for this level using the calculation of the step before. In case of reordering, this has to be done for all k-element subsets I X n , with increasing k. <p> Lower bounds for the size of BDDs have been proven in [4] using lower bound techniques from VLSI design. These techniques were applicated in an automated way for the first time in <ref> [6] </ref>, giving good estimations for the lower bound in case of "pure" reordering. We do not repeat the exact method here, but it can be easily seen that the same technique can be used in case of linear transformations, too. (For more details see [6].) name i/o ord lsift ex time <p> way for the first time in <ref> [6] </ref>, giving good estimations for the lower bound in case of "pure" reordering. We do not repeat the exact method here, but it can be easily seen that the same technique can be used in case of linear transformations, too. (For more details see [6].) name i/o ord lsift ex time MB cm42a 4/10 20 20 20 1 1 c17 5/2 7 9 7 15 1 decod 5/16 32 32 32 56 1 majority 5/1 8 6 6 32 1 rd53-hdl 5/3 17 15 10 32 1 bcd.div3 4/4 14 15 12 1 1 dekoder
Reference: [7] <author> S.J. Friedman and K.J. Supowit. </author> <title> Finding the optimal variable ordering for binary decision diagrams. </title> <booktitle> In Design Automation Conf., </booktitle> <pages> pages 348-356, </pages> <year> 1987. </year>
Reference-contexts: But notice that it can be incorporated without any problems.) In our experiments we show how the choice of the penalty influences the result (see Section 6). 3 Optimal Variable Ordering Our algorithm is based on techniques of exact minimization by finding the optimal variable ordering. In <ref> [7] </ref> an exact algorithm has been presented where the number of variable orderings which have to be considered could be reduced significantly in comparison with the trivial idea of constructing BDDs for all n! variable orderings. <p> We do not mention this further, as it would complicate the algorithm unnecessarily. 5 Finding the Optimal Linear Trans formation Algorithms for finding the optimal variable ordering are based on iteratively considering all levels of the BDD <ref> [7, 6] </ref>. Considering one level means calculating the minimum number of nodes for this level using the calculation of the step before. In case of reordering, this has to be done for all k-element subsets I X n , with increasing k.
Reference: [8] <author> W. Gunther and R. Drechsler. </author> <title> Linear transformations and exact minimization of BDDs. </title> <type> Technical Report 98, </type> <institution> Albert-Ludwigs-University, Freiburg, </institution> <month> Dec. </month> <year> 1997. </year>
Reference-contexts: C C and 0 B B @ 1 k 1 (k) . . . . . . (k) 1 C C A (All non-given matrix elements are 0.) The proof makes only use of well known properties of matrix theory. (We leave it out here; it can be found in <ref> [8] </ref>.) It can easily be seen that all intermediate matrices U i D i : : : U n D n and D i U i+1 D i+1 : : : U n D n are normalized. So we can prune the search space whenever we get an "un-normalized" matrix.
Reference: [9] <author> J. P. Hansen and M. Sekine. </author> <title> Synthesis by spectral translation using boolean decision diagrams. </title> <booktitle> In Design Automation Conf., </booktitle> <pages> pages 248-253, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: 1 Introduction Spectral methods have been suggested as an efficient tool for circuit design in the early 1960s. Recently, they are of growing interest, since methods have been proposed that allow to efficiently identify good solutions <ref> [13, 9] </ref>. Spectral transformations are based on a transformation of the whole function table, which has 2 n elements. Linear transformations can be seen as a restriction of this, as only n variables are transformed.
Reference: [10] <author> C. Meinel, F. Somenzi, and T. Theobald. </author> <title> Linear sifting of decision diagrams. </title> <booktitle> In Design Automation Conf., </booktitle> <pages> pages 202-207, </pages> <year> 1997. </year>
Reference-contexts: Linear transformations can be seen as a restriction of this, as only n variables are transformed. Instead of operating with 2 n fi 2 n -matrices, we only have to deal with n fi n-matrices. An application of linear transformations to BDD minimization is presented in <ref> [10] </ref>, where linear combinations of single variables are dynamically applied. This is integrated in the widely used sifting algorithm [15] for BDD minimization. The resulting BDDs are often much smaller than sifting alone. This gain can be up to 98%. <p> the Galois field (B; ; ): ij (x 1 ; : : : ; x n ) = B j i 0 1 C 0 B x 1 x n C A (All non-given matrix elements are 0.) Linear transformations are those automorphisms obtained by a sequence of elementary transformations <ref> [10] </ref>. This is analogously done to the generation of regular matrices out of elementary matrices. In the following we do not distinguish between linear transformations and regular matrices. <p> Furthermore, in our more complex case this additionally has to consider linear transformations, as shown in the previous section. In this regard, our algorithm can be seen as an extension to reordering algorithms. The implementation aspects of linear transforma tions are similar to <ref> [10] </ref>. 5.1 Algorithm A sketch of the exact algorithm is given in Figure 2. For increasing k, we consider all subsets I of size k and all linear transformations % based on elementary transformations ij with i &lt; k &lt; j or j &lt; k &lt; i. <p> Results for all LGSynth93 benchmarks with less than 7 inputs are given in Table 1. In column "i/o" the number of inputs and outputs is given, respectively. In column "ord", the minimum number of BDD nodes under all variable orderings is given. Results for linear sifting <ref> [10] </ref> are given in column "lsift", measured for a fixed set of parameters. The minimum number of nodes for all linear transformations is given in column "ex". Columns "time" and "MB" refer to runtime in seconds and memory usage in MB of our exact algorithm, respectively.
Reference: [11] <author> C. Meinel, F. Somenzi, and T. Theobald. </author> <title> Function decomposition and synthesis using linear sifting. </title> <booktitle> In ASP Design Automation Conf., </booktitle> <month> Feb. </month> <year> 1998. </year>
Reference-contexts: This is integrated in the widely used sifting algorithm [15] for BDD minimization. The resulting BDDs are often much smaller than sifting alone. This gain can be up to 98%. The influence of this approach on the resulting area of the FPGA design has been described in <ref> [11] </ref>. Nevertheless, the approaches presented so far are purely heuristical and cannot give any guarantees on the quality of the result. Several design methods based on BDDs have been proposed, and recently, first promising results on transforming BDDs directly to pass transistor logic have been reported [5, 1].
Reference: [12] <author> C. Meinel and T. Theobald. </author> <title> Local encoding transformations for optimizing OBDD-representations of finite state machines. </title> <booktitle> In FMCAD, </booktitle> <volume> volume 1166, </volume> <pages> pages 404-418, </pages> <year> 1996. </year>
Reference-contexts: This is analogously done to the generation of regular matrices out of elementary matrices. In the following we do not distinguish between linear transformations and regular matrices. As shown in <ref> [12] </ref>, the number of possible linear transformations is n1 Y (2 n 2 i ); which is much larger than n!, the number of possible variable orderings, but much smaller than 2 n !, the number of all possible automorphisms.
Reference: [13] <author> M. Miller. </author> <title> A spectral method for Boolean function matching. </title> <booktitle> In European Design & Test Conf., </booktitle> <pages> page 602, </pages> <year> 1996. </year>
Reference-contexts: 1 Introduction Spectral methods have been suggested as an efficient tool for circuit design in the early 1960s. Recently, they are of growing interest, since methods have been proposed that allow to efficiently identify good solutions <ref> [13, 9] </ref>. Spectral transformations are based on a transformation of the whole function table, which has 2 n elements. Linear transformations can be seen as a restriction of this, as only n variables are transformed.
Reference: [14] <author> R. Murgai, R.K. Brayton, and A.L. Sangiovanni-Vincentelli. </author> <title> Logic Synthesis for Field-Programmable Gate Arrays. </title> <publisher> Kluwer Academic Publisher, </publisher> <year> 1995. </year>
Reference-contexts: It is therefore desirable to minimize the size of the BDD. Notice that in these applications a small gain counted in the number of nodes can tremendously simplify the mapping to FPGAs or a target architecture <ref> [2, 14] </ref>. In this paper, we present the first algorithm to ex actly find the optimal linear transformation, i.e. a linear transformation for which the size of the BDD is minimal with respect to the number of nodes.
Reference: [15] <author> R. Rudell. </author> <title> Dynamic variable ordering for ordered binary decision diagrams. </title> <booktitle> In Int'l Conf. on CAD, </booktitle> <pages> pages 42-47, </pages> <year> 1993. </year>
Reference-contexts: Instead of operating with 2 n fi 2 n -matrices, we only have to deal with n fi n-matrices. An application of linear transformations to BDD minimization is presented in [10], where linear combinations of single variables are dynamically applied. This is integrated in the widely used sifting algorithm <ref> [15] </ref> for BDD minimization. The resulting BDDs are often much smaller than sifting alone. This gain can be up to 98%. The influence of this approach on the resulting area of the FPGA design has been described in [11].
Reference: [16] <author> F. Somenzi. CUDD: </author> <title> CU Decision Diagram Package Release 2.1.2. </title> <institution> University of Colorado at Boulder, </institution> <year> 1997. </year>
Reference-contexts: For all our experiments we used an upper memory limit of 100 MBytes. Our algorithm has been integrated in the CUDD package <ref> [16] </ref>. In a first series of experiments, all EXOR gates that are needed for the realization of the linear transformations are counted as zero. Results for all LGSynth93 benchmarks with less than 7 inputs are given in Table 1.
References-found: 15

