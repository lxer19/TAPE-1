URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr92/tr92-025.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr92-abstracts.html
Root-URL: http://www.cis.ufl.edu
Email: Email: sharma@snapper.cis.ufl.edu  
Title: A Formal Approach to the Vertical Partitioning Problem in Distributed Database Design  
Author: J. Muthuraj S. Chakravarthy R. Varadarajan S. B. Navathe 
Address: Gainesville, FL 32611, USA  Atlanta, GA 30332  
Affiliation: Computer and Information Sciences Department University of Florida,  College of Computing Georgia Institute of Technology  
Abstract: The design of distributed databases is an optimization problem requiring solutions to several interrelated problems: data fragmentation, allocation, and local optimization. Each problem can be solved with several different approaches thereby making the distributed database design a very difficult task. Although there is a large body of work on the design of data fragmentation, most of them are either ad hoc solutions or formal solutions for special cases (e. g., binary vertical partitioning). In this paper, we address the problem of n-ary vertical partitioning problem and derive an objective function that generalizes and subsumes earlier work. The objective function derived in this paper is being used for developing heuristic algorithms that can be shown to satisfy the objective function. The objective function is also being used for comparing previously proposed algorithms for vertical partitioning. We first derive an objective function that is suited to distributed transaction processing and then show how it can be extended to include additional information, such as transaction types, different local and remote accessing costs and replication. Finally, we indicate the current status of implementation.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Babad. </author> <title> A record and file partitioning model. </title> <journal> Commun. ACM 20, </journal> <month> 1(Jan </month> <year> 1977). </year>
Reference-contexts: Hoffer [8] developed a non-linear, zero-one program which minimizes a linear combination of storage, retrieval and update costs, with capacity constraints for each file. Babad <ref> [1] </ref> formulated a less restrictive vertical partitioning problem for variable length attributes as a non-linear zero-one program. In the work of Eisner and Severance [5], a file can be partitioned into two subfiles: a primary and secondary subfile. Two forms of cost function are used in this approach.
Reference: [2] <author> S. Ceri, S.B. Navathe, G. Weiderhold. </author> <title> Distribution Design of Logical Database Schemas IEEE trans. </title> <journal> on SW engg. </journal> <volume> Vol SE-9 No.4, p 487 - 503, </volume> <month> July </month> <year> 1983. </year>
Reference: [3] <author> S. Ceri, S. Pernici, and G. Weiderhold. </author> <title> Optimization Problems and Solution Methods in the Design of Data distribution. </title> <journal> Information Sciences Vol 14, </journal> <volume> No. 3, </volume> <pages> p 261-272, </pages> <year> 1989. </year>
Reference-contexts: Navathe, et al [15] extend the BEA approach and propose a two phase approach for vertical partitioning. Cornell and Yu [4] apply the work of Navathe [15] to physical design of relational databases. Ceri, Pernici and Wiederhold <ref> [3] </ref> extend the work of Navathe [15] by considering it as a `divide' tool and by adding a `conquer' tool. Navathe and Ra [16] construct a graph-based algorithm to the vertical partitioning problem where the heuristics used includes an intuitive objective function which is not explicitly quantified.
Reference: [4] <author> D. Cornell, and P. Yu. </author> <title> A Vertical Partitioning Algorithm for Relational Databases. </title> <booktitle> Proc. Third International Conference on Data Engineering, </booktitle> <month> Feb. </month> <year> 1987, </year> <pages> pp. 30-35. </pages>
Reference-contexts: Hammer and Niamir [6] use a file design cost estimator and a heuristic to arrive at a "bottom up" partitioning scheme. Navathe, et al [15] extend the BEA approach and propose a two phase approach for vertical partitioning. Cornell and Yu <ref> [4] </ref> apply the work of Navathe [15] to physical design of relational databases. Ceri, Pernici and Wiederhold [3] extend the work of Navathe [15] by considering it as a `divide' tool and by adding a `conquer' tool. <p> After clustering, an empirical objective function is used to perform iterative binary partitioning. In the second step, estimated cost factors reflecting the physical environment of fragment storage are considered for further refinement of the partitioning scheme. Cornell and Yu <ref> [4] </ref> propose an algorithm, as an extension of Navathe et al [15] approach, which decreases the number of disk accesses to obtain an optimal binary partitioning. This algorithm uses specific physical factors such as number of attributes, their length and selectivity, cardinality of the relation etc.
Reference: [5] <author> M. Eisner, and D. Severance. </author> <title> Mathematical techniques for efficient record segmentation in large shared databases. </title> <journal> J. ACM 23, </journal> <volume> 4(Oct. </volume> <year> 1976). </year>
Reference-contexts: Hoffer [8] developed a non-linear, zero-one program which minimizes a linear combination of storage, retrieval and update costs, with capacity constraints for each file. Babad [1] formulated a less restrictive vertical partitioning problem for variable length attributes as a non-linear zero-one program. In the work of Eisner and Severance <ref> [5] </ref>, a file can be partitioned into two subfiles: a primary and secondary subfile. Two forms of cost function are used in this approach.
Reference: [6] <author> M. Hammer, and B. Niamir. </author> <title> A heuristic approach to attribute partitioning. </title> <booktitle> In Proceedings ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <address> (Boston, Mass., 1979), </address> <publisher> ACM, </publisher> <address> New York. </address>
Reference-contexts: Several vertical partitioning algorithms have been proposed in the literature. Hoffer and Severance [7] measure the affinity between pairs of attributes and try to cluster attributes according to their pairwise affinity by using the bond energy algorithm (BEA) [12]. Hammer and Niamir <ref> [6] </ref> use a file design cost estimator and a heuristic to arrive at a "bottom up" partitioning scheme. Navathe, et al [15] extend the BEA approach and propose a two phase approach for vertical partitioning. <p> Schklonik [18] has examined the problem of partitioning a hierarchical structure (for a hierarchical database) in order to minimize the access time to it for a given access pattern. Segment sizes and scan information is used to minimize the page faults. Hammer and Niamir <ref> [6] </ref> developed two heuristics, grouping and regrouping, and used them to perform the partitioning. The grouping heuristic starts by initially assigning each attribute to a different partition.
Reference: [7] <author> J. Hoffer, and D. Severance. </author> <title> The Uses of Cluster Analysis in Physical Database Design In Proc. </title> <booktitle> 1st International Conference on VLDB, </booktitle> <address> Framingham, MA, </address> <year> 1975, </year> <pages> pp. 69 - 86. </pages>
Reference-contexts: Other detailed information need to be considered on the outcome of this stage in order to obtain a design at the physical level. Several vertical partitioning algorithms have been proposed in the literature. Hoffer and Severance <ref> [7] </ref> measure the affinity between pairs of attributes and try to cluster attributes according to their pairwise affinity by using the bond energy algorithm (BEA) [12]. Hammer and Niamir [6] use a file design cost estimator and a heuristic to arrive at a "bottom up" partitioning scheme. <p> The limitation of this approach is that at most two subfiles are allowed [17]. March and Severance [13] extended this model to incorporate block factors for both primary and secondary memories. Hoffer and Severance <ref> [7] </ref> grouped the attributes of a relation based on the extent to which they were used together (measured the "affinity between pairs of attributes"). This clustering of attributes based on their pairwise affinity was done using the bond energy algorithm (BEA).
Reference: [8] <author> J. Hoffer. </author> <title> An integer programming formulation of computer database design problems. </title> <institution> Inf. Sci., </institution> <month> 11(July </month> <year> 1976), </year> <pages> 29-48. </pages>
Reference-contexts: The concept of using fragmentation of data as a means of improving the performance of a database management system has often appeared in the literature on file design and optimization. Hoffer <ref> [8] </ref> developed a non-linear, zero-one program which minimizes a linear combination of storage, retrieval and update costs, with capacity constraints for each file. Babad [1] formulated a less restrictive vertical partitioning problem for variable length attributes as a non-linear zero-one program.
Reference: [9] <author> A. Jain, and R. Dubes. </author> <title> Algorithms for clustering Data. </title> <publisher> Prentice Hall Advanced Reference Series, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1988. </year>
Reference-contexts: Navathe and Ra [16] construct a graph-based algorithm to the vertical partitioning problem where the heuristics used includes an intuitive objective function which is not explicitly quantified. In addition to these vertical partitioning algorithms, there are many data clustering techniques <ref> [9] </ref>, traditionally used in pattern recognition and statistics, some of which can be adapted to partitioning of a database. These data clustering algorithms include Square-error clustering [9], Zahn's clustering [22], Nearest-neighbor clustering [11] and Fuzzy [9]clustering. The partitioning algorithms mentioned above use some heuristics to create fragments of a relation. <p> In addition to these vertical partitioning algorithms, there are many data clustering techniques <ref> [9] </ref>, traditionally used in pattern recognition and statistics, some of which can be adapted to partitioning of a database. These data clustering algorithms include Square-error clustering [9], Zahn's clustering [22], Nearest-neighbor clustering [11] and Fuzzy [9]clustering. The partitioning algorithms mentioned above use some heuristics to create fragments of a relation. The input to most of these algorithms is an Attribute Usage Matrix (AUM). <p> Specifically: 1. We have, perhaps for the first time, studied the applicability of some data clustering algorithms for distributed database design 5 proposed in areas such as pattern classification, statistics etc., <ref> [9] </ref>, [22], [11], to data fragmentation problem. In fact, we start from one such objective function proposed for data clustering and modify and extend it to the specific problem at hand. 2. <p> A number of data clustering algorithms have been developed in application areas such as statistics and pattern classification and analysis which address the problem of grouping or clustering data using various criteria. The most commonly used partitioning clustering strategy is based on the square-error criterion <ref> [9] </ref>. The general objective is to obtain that partition which, for a fixed number of clusters, minimizes the square-error. Minimizing square-error, or within-cluster variation, has been shown to be equivalent to maximizing the between-cluster variation. <p> Shaffer et al [19] demonstrate the similarity of the mode-seeking partitioning algorithm [10] to the graph algorithm of Zahn [22] based on minimum spanning trees. Lu and Fu [11] used another graph-based approach called "Nearest-Neighbor clustering algorithm" to cluster patterns during character recognition <ref> [9] </ref>. The concept of using fragmentation of data as a means of improving the performance of a database management system has often appeared in the literature on file design and optimization. <p> We would like to have a number of fragments which is typically much less than n and still having the least E 2 M value. In some data clustering techniques, the number of data clusters is minimized using an index called Davies-Bouldwin (DB) index <ref> [9] </ref> which is a measure of the spread between centers of the clusters. For a typical data set with small standard deviation (less than 0:1), this index reaches a global minimum (highest spread) for a partition size that falls between the extremes. <p> For this particular example, other algorithms such as Ra's [16], Zahn's [22] and Binary Vertical Partitioning [15] identify the above mentioned partition set (i.e., 3 fragments) as optimum. In Zahn's approach, once the maximum spanning tree is obtained two different conditions can be used to determine the partitions <ref> [9] </ref>. For this example, when these two 17 conditions are applied to Zahn's algorithm, they produce two different partitioning schemes. One of them is the same as the optimal partitioning scheme obtained as above and the other one is not.
Reference: [10] <author> J. Kittler. </author> <title> A locally sensitive method for cluster analysis. </title> <booktitle> Pattern Recognition 8, </booktitle> <pages> 22-33. </pages>
Reference-contexts: His choice of MST was influenced by the Gestalt principle, which favors the grouping of attribute patterns based on Euclidean distance measure. Shaffer et al [19] demonstrate the similarity of the mode-seeking partitioning algorithm <ref> [10] </ref> to the graph algorithm of Zahn [22] based on minimum spanning trees. Lu and Fu [11] used another graph-based approach called "Nearest-Neighbor clustering algorithm" to cluster patterns during character recognition [9].
Reference: [11] <author> S. Lu, and K. Fu. </author> <title> A sentence-to-sentence clustering procedure for pattern analysis. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics SMC 8, </journal> <pages> 381-389. </pages>
Reference-contexts: In addition to these vertical partitioning algorithms, there are many data clustering techniques [9], traditionally used in pattern recognition and statistics, some of which can be adapted to partitioning of a database. These data clustering algorithms include Square-error clustering [9], Zahn's clustering [22], Nearest-neighbor clustering <ref> [11] </ref> and Fuzzy [9]clustering. The partitioning algorithms mentioned above use some heuristics to create fragments of a relation. The input to most of these algorithms is an Attribute Usage Matrix (AUM). <p> Specifically: 1. We have, perhaps for the first time, studied the applicability of some data clustering algorithms for distributed database design 5 proposed in areas such as pattern classification, statistics etc., [9], [22], <ref> [11] </ref>, to data fragmentation problem. In fact, we start from one such objective function proposed for data clustering and modify and extend it to the specific problem at hand. 2. <p> Shaffer et al [19] demonstrate the similarity of the mode-seeking partitioning algorithm [10] to the graph algorithm of Zahn [22] based on minimum spanning trees. Lu and Fu <ref> [11] </ref> used another graph-based approach called "Nearest-Neighbor clustering algorithm" to cluster patterns during character recognition [9]. The concept of using fragmentation of data as a means of improving the performance of a database management system has often appeared in the literature on file design and optimization.
Reference: [12] <author> W. McCormick, P. Schweitzer, and T. White. </author> <title> Problem Decomposition and Data Reorganization by a Clustering technique Operations Research, </title> <month> 20 Sep. </month> <year> 1972. </year>
Reference-contexts: Several vertical partitioning algorithms have been proposed in the literature. Hoffer and Severance [7] measure the affinity between pairs of attributes and try to cluster attributes according to their pairwise affinity by using the bond energy algorithm (BEA) <ref> [12] </ref>. Hammer and Niamir [6] use a file design cost estimator and a heuristic to arrive at a "bottom up" partitioning scheme. Navathe, et al [15] extend the BEA approach and propose a two phase approach for vertical partitioning. <p> The testbed includes several different vertical partitioning algorithms and modules that compare and evaluate the results of these algorithms. The algorithms that were developed as part of this effort are as follows: * Bond Energy Algorithm <ref> [12] </ref>. 20 * Binary Vertical Partitioning Algorithm [15]. * Minyoung Ra's Graphical Algorithm [16]. * Exhaustive Enumeration Algorithm. The figure 5 gives an overall outline of the design testbed.
Reference: [13] <author> S. March, and D. Severance. </author> <title> The determination of efficient record segmentation and blocking factors for share data files. </title> <journal> ACM Trans. Database Syst. </journal> <volume> 2, 3(Sept. </volume> <year> 1977). </year>
Reference-contexts: The second function is nonlinear, and measures the total costs of access, transfer, and storage for subtuples in both primary and secondary subfiles. The limitation of this approach is that at most two subfiles are allowed [17]. March and Severance <ref> [13] </ref> extended this model to incorporate block factors for both primary and secondary memories. Hoffer and Severance [7] grouped the attributes of a relation based on the extent to which they were used together (measured the "affinity between pairs of attributes").
Reference: [14] <author> R. Muthuraj. </author> <title> A formal approach to the vertical partitioning problem in distributed database design. M.S. </title> <type> Thesis, </type> <institution> Dept. of Computer Science, Univ. of Florida, </institution> <month> Aug. </month> <year> 1992. </year>
Reference-contexts: This work is a first step in that direction and addresses the partitioning (or fragmentation) problem. In this paper, we delimit our discussion to one of the data fragmentation problems, namely the vertical partitioning problem. More information on this vertical partitioning problem, can be found in Muthuraj's thesis <ref> [14] </ref>. Vertical Partitioning (also called attribute partitioning) is a technique that is used during the design of a database to improve the performance of 2 transactions [15]. <p> Also, there is no common criterion or objective function to compare and evaluate the results of these vertical partitioning algorithms. 1.1 Contributions This paper makes several contributions to the problem of data fragmentation in general and the design of vertical partitioning in particular <ref> [14] </ref>. Specifically: 1. We have, perhaps for the first time, studied the applicability of some data clustering algorithms for distributed database design 5 proposed in areas such as pattern classification, statistics etc., [9], [22], [11], to data fragmentation problem.
Reference: [15] <author> S. Navathe, S. Ceri, G. Weiderhold, and J. Dou. </author> <title> Vertical Partitioning Algorithms for Database Design ACM Transactions on Database Systems, </title> <journal> Vol. </journal> <volume> 9, No. 4, </volume> <month> Dec. </month> <year> 1984. </year>
Reference-contexts: More information on this vertical partitioning problem, can be found in Muthuraj's thesis [14]. Vertical Partitioning (also called attribute partitioning) is a technique that is used during the design of a database to improve the performance of 2 transactions <ref> [15] </ref>. In vertical partitioning, attributes of a relation R 3 are clustered into non-overlapping 4 groups and the relation R is projected into fragment relations according to these attribute groups. In distributed database systems, these fragments are allocated among the different sites. <p> If the fragments closely match the requirements of the set of transactions provided, then the transaction processing cost could be minimized. Vertical partitioning also has its use in partitioning individual files in centralized databases, and dividing data among different levels of memory hierarchies etc. <ref> [15, 18] </ref>. In the case of distributed database design, transaction processing cost is minimized by increasing the local processing of transactions (at a site) as well as by reducing the amount of accesses to data items that are not local. <p> Hammer and Niamir [6] use a file design cost estimator and a heuristic to arrive at a "bottom up" partitioning scheme. Navathe, et al <ref> [15] </ref> extend the BEA approach and propose a two phase approach for vertical partitioning. Cornell and Yu [4] apply the work of Navathe [15] to physical design of relational databases. Ceri, Pernici and Wiederhold [3] extend the work of Navathe [15] by considering it as a `divide' tool and by adding <p> Hammer and Niamir [6] use a file design cost estimator and a heuristic to arrive at a "bottom up" partitioning scheme. Navathe, et al <ref> [15] </ref> extend the BEA approach and propose a two phase approach for vertical partitioning. Cornell and Yu [4] apply the work of Navathe [15] to physical design of relational databases. Ceri, Pernici and Wiederhold [3] extend the work of Navathe [15] by considering it as a `divide' tool and by adding a `conquer' tool. <p> Navathe, et al <ref> [15] </ref> extend the BEA approach and propose a two phase approach for vertical partitioning. Cornell and Yu [4] apply the work of Navathe [15] to physical design of relational databases. Ceri, Pernici and Wiederhold [3] extend the work of Navathe [15] by considering it as a `divide' tool and by adding a `conquer' tool. Navathe and Ra [16] construct a graph-based algorithm to the vertical partitioning problem where the heuristics used includes an intuitive objective function which is not explicitly quantified. <p> On each iteration, all possible grouping of these partitions is considered and the one with maximum improvement is chosen as the candidate grouping for the next iteration. During regrouping, attributes are moved between partitions to achieve any additional improvements possible. Navathe et al <ref> [15] </ref> use a two step approach for vertical partitioning. In the first step, they use the given input parameters in the form of an attribute usage matrix to construct the attribute affinity matrix on which clustering is performed. <p> In the second step, estimated cost factors reflecting the physical environment of fragment storage are considered for further refinement of the partitioning scheme. Cornell and Yu [4] propose an algorithm, as an extension of Navathe et al <ref> [15] </ref> approach, which decreases the number of disk accesses to obtain an optimal binary partitioning. This algorithm uses specific physical factors such as number of attributes, their length and selectivity, cardinality of the relation etc. Navathe and Ra [Nava 89] present a graph-based approach to the vertical partitioning problem. <p> The Partition Evaluator values above are the minimum of the values where the second component of the PE is calculated using optimistic (minimum value) estimate. For this particular example, other algorithms such as Ra's [16], Zahn's [22] and Binary Vertical Partitioning <ref> [15] </ref> identify the above mentioned partition set (i.e., 3 fragments) as optimum. In Zahn's approach, once the maximum spanning tree is obtained two different conditions can be used to determine the partitions [9]. <p> The testbed includes several different vertical partitioning algorithms and modules that compare and evaluate the results of these algorithms. The algorithms that were developed as part of this effort are as follows: * Bond Energy Algorithm [12]. 20 * Binary Vertical Partitioning Algorithm <ref> [15] </ref>. * Minyoung Ra's Graphical Algorithm [16]. * Exhaustive Enumeration Algorithm. The figure 5 gives an overall outline of the design testbed.
Reference: [16] <author> S. Navathe, and M. Ra. </author> <title> Vertical Partitioning for Database Design: A Graphical Algorithm. </title> <booktitle> ACM SIGMOD, </booktitle> <address> Portland, </address> <month> June </month> <year> 1989. </year>
Reference-contexts: Cornell and Yu [4] apply the work of Navathe [15] to physical design of relational databases. Ceri, Pernici and Wiederhold [3] extend the work of Navathe [15] by considering it as a `divide' tool and by adding a `conquer' tool. Navathe and Ra <ref> [16] </ref> construct a graph-based algorithm to the vertical partitioning problem where the heuristics used includes an intuitive objective function which is not explicitly quantified. <p> The Partition Evaluator values above are the minimum of the values where the second component of the PE is calculated using optimistic (minimum value) estimate. For this particular example, other algorithms such as Ra's <ref> [16] </ref>, Zahn's [22] and Binary Vertical Partitioning [15] identify the above mentioned partition set (i.e., 3 fragments) as optimum. In Zahn's approach, once the maximum spanning tree is obtained two different conditions can be used to determine the partitions [9]. <p> The testbed includes several different vertical partitioning algorithms and modules that compare and evaluate the results of these algorithms. The algorithms that were developed as part of this effort are as follows: * Bond Energy Algorithm [12]. 20 * Binary Vertical Partitioning Algorithm [15]. * Minyoung Ra's Graphical Algorithm <ref> [16] </ref>. * Exhaustive Enumeration Algorithm. The figure 5 gives an overall outline of the design testbed. More algorithms can be easily "hooked" on to this design testbed prototype. 7 Summary and Future Work In this paper, we have presented a general approach to the vertical partitioning problem.
Reference: [17] <author> B. Niamir. </author> <title> Attribute Partitioning in Self-Adaptive Relational Database System. </title> <publisher> Ph. </publisher> <address> D. </address> <institution> Dissertation, M.I.T. Lab. for Computer Science, </institution> <month> Jan. </month> <year> 1978. </year>
Reference-contexts: The second function is nonlinear, and measures the total costs of access, transfer, and storage for subtuples in both primary and secondary subfiles. The limitation of this approach is that at most two subfiles are allowed <ref> [17] </ref>. March and Severance [13] extended this model to incorporate block factors for both primary and secondary memories. Hoffer and Severance [7] grouped the attributes of a relation based on the extent to which they were used together (measured the "affinity between pairs of attributes").
Reference: [18] <author> M. Schkolnic. </author> <title> A Clustering Algorithm for Hierarchical Structures ACM TODS, </title> <journal> Vol. </journal> <volume> 1, No. 2, </volume> <pages> pp. 27-44. </pages> <month> March </month> <year> 1977. </year> <month> 23 </month>
Reference-contexts: If the fragments closely match the requirements of the set of transactions provided, then the transaction processing cost could be minimized. Vertical partitioning also has its use in partitioning individual files in centralized databases, and dividing data among different levels of memory hierarchies etc. <ref> [15, 18] </ref>. In the case of distributed database design, transaction processing cost is minimized by increasing the local processing of transactions (at a site) as well as by reducing the amount of accesses to data items that are not local. <p> The organization of the paper is as follows. Section 2 discusses previous related work on data clustering. Section 3 describes prior work in the area of vertical partitioning and summarizes the need for the development of our Partition Evaluator. In section 4, we derive the Partition 5 Schkolnik <ref> [18] </ref> uses data clustering techniques for partitioning a hierarchical structure for an IMS database using detailed cost information which is different from the problem addressed in this paper. 4 Evaluator (PE) appropriate for distributed database design at the conceptual level. <p> The BEA produced matrix in which an cost function was minimized for the entire matrix using the affinity attribute matrix. They left the 5 creation of partitions to the subjective evaluation of the designer. Schklonik <ref> [18] </ref> has examined the problem of partitioning a hierarchical structure (for a hierarchical database) in order to minimize the access time to it for a given access pattern. Segment sizes and scan information is used to minimize the page faults.
Reference: [19] <author> E. Shaffer, R. Dubes, and A. Jain. </author> <title> Single-link characteristics of a mode-seeking algorithm. </title> <booktitle> Pattern Recognition 11, </booktitle> <pages> 65-73. </pages>
Reference-contexts: Zahn [22] has demonstrated how the minimum spanning tree (MST) can be used to detect clusters. His choice of MST was influenced by the Gestalt principle, which favors the grouping of attribute patterns based on Euclidean distance measure. Shaffer et al <ref> [19] </ref> demonstrate the similarity of the mode-seeking partitioning algorithm [10] to the graph algorithm of Zahn [22] based on minimum spanning trees. Lu and Fu [11] used another graph-based approach called "Nearest-Neighbor clustering algorithm" to cluster patterns during character recognition [9].
Reference: [20] <author> N. Tamer, P. Valduriez. </author> <title> Principles of Distributed Database Systems. </title> <publisher> Prentice Hall En-glewood Cliffs, </publisher> <address> New Jersey 07362. </address>
Reference: [21] <author> A. Torn. </author> <title> Cluster analysis using seed points and density-determined hyperspheres as an aid to global optimization. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics SMC 7, </journal> <pages> 610-616. </pages>
Reference-contexts: Clusters can also be viewed as regions of the attribute pattern space in which the patterns are dense, separated by regions of low attribute pattern density. In the mode-seeking partitioning algorithm due to Torn <ref> [21] </ref>, clusters are identified by searching for regions of high density, called modes, in the pattern space. Each mode is associated with a cluster center and each pattern is assigned to the cluster with the closest center.
Reference: [22] <author> C. Zahn. </author> <title> Graph-theoretical methods for detecting and describing Gestalt Clusters. </title> <journal> IEEE Transactions on Computers C 20, </journal> <pages> 68-86. 24 </pages>
Reference-contexts: In addition to these vertical partitioning algorithms, there are many data clustering techniques [9], traditionally used in pattern recognition and statistics, some of which can be adapted to partitioning of a database. These data clustering algorithms include Square-error clustering [9], Zahn's clustering <ref> [22] </ref>, Nearest-neighbor clustering [11] and Fuzzy [9]clustering. The partitioning algorithms mentioned above use some heuristics to create fragments of a relation. The input to most of these algorithms is an Attribute Usage Matrix (AUM). <p> Specifically: 1. We have, perhaps for the first time, studied the applicability of some data clustering algorithms for distributed database design 5 proposed in areas such as pattern classification, statistics etc., [9], <ref> [22] </ref>, [11], to data fragmentation problem. In fact, we start from one such objective function proposed for data clustering and modify and extend it to the specific problem at hand. 2. <p> In the mode-seeking partitioning algorithm due to Torn [21], clusters are identified by searching for regions of high density, called modes, in the pattern space. Each mode is associated with a cluster center and each pattern is assigned to the cluster with the closest center. Zahn <ref> [22] </ref> has demonstrated how the minimum spanning tree (MST) can be used to detect clusters. His choice of MST was influenced by the Gestalt principle, which favors the grouping of attribute patterns based on Euclidean distance measure. <p> His choice of MST was influenced by the Gestalt principle, which favors the grouping of attribute patterns based on Euclidean distance measure. Shaffer et al [19] demonstrate the similarity of the mode-seeking partitioning algorithm [10] to the graph algorithm of Zahn <ref> [22] </ref> based on minimum spanning trees. Lu and Fu [11] used another graph-based approach called "Nearest-Neighbor clustering algorithm" to cluster patterns during character recognition [9]. <p> The Partition Evaluator values above are the minimum of the values where the second component of the PE is calculated using optimistic (minimum value) estimate. For this particular example, other algorithms such as Ra's [16], Zahn's <ref> [22] </ref> and Binary Vertical Partitioning [15] identify the above mentioned partition set (i.e., 3 fragments) as optimum. In Zahn's approach, once the maximum spanning tree is obtained two different conditions can be used to determine the partitions [9].
References-found: 22

