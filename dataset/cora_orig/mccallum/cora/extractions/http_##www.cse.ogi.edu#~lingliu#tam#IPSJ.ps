URL: http://www.cse.ogi.edu/~lingliu/tam/IPSJ.ps
Refering-URL: http://www.cse.ogi.edu/~lingliu/tam/index.html
Root-URL: http://www.cse.ogi.edu
Email: lingliu@cs.ualberta.ca  calton@cse.ogi.edu  
Title: A Reflective Framework for Capturing Complex Dependencies of Workflow Activities  
Author: Ling Liu Calton Pu 
Address: GSB 615, Edmonton, Alberta T6G 2H1 Canada  P.O.Box 91000 Portland Oregon 97291-1000 USA  
Affiliation: Dept. of Computing Science University of Alberta  Dept. of Computer Science Oregon Graduate Institute  
Abstract: Complex workflow activities are typically of hierarchically nested structure and sophisticated interaction dependencies, and often are vulnerable to uncertain duration and unpredictable development. Methods and techniques that can avoid or reduce any significant performance loss due to such uncertainty and unpredictability are proved to be desirable and rewarding. In this paper we describe a reflective framework for declarative specification and dynamic restructuring of complex workflow activities, including the transactional activity composition model (TAM) and a family of activity-split and activity-join meta operations. By using the TAM activity specification facility, both the hierarchical organization of complex activities and the wide spectrum of interaction dependencies among concurrent activities can be captured declaratively and incrementally, allowing reasoning about correctness of complex activities independently from their transaction implementation mechanisms. By using the set of activity-split and activity-join meta operations introduced, users may restructure ongoing activities, in anticipation of uncertain duration or unpredictable development, to allow performance improvement through release of early committed resources or transferring ownership of uncommitted resources. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Ansari, L. Ness, M. Rusinkiewicz, and A. Sheth. </author> <title> Using flexible transactions to support multi-system telecommunication applications. </title> <booktitle> In Proceedings of the 18th International Conference on Very Large Data Bases, </booktitle> <pages> pages 65-76, </pages> <year> 1992. </year>
Reference-contexts: This example is an extended scenario of the workflow application for designing telephone circuit described in <ref> [1, 10] </ref>. Suppose the activity A:TeleConnect consists of four sub-activities A 1 :ClientRegister, A 2 :CreditCheck, B:AllocateCircuit, and A 3 :InstallNewCircuit (see Figure refAltDesign2 (a)). A is executed when a telephone company customer requests telephone service installation.
Reference: [2] <author> F. Bancilhon, W. Kim, and H. Korth. </author> <title> A model for cad transactions. </title> <booktitle> In Proceeding of the 11th International Conference on Very Large Databases, </booktitle> <pages> pages 25-33. </pages> <publisher> Morgan Kauffman, </publisher> <year> 1985. </year>
Reference-contexts: 1 Introduction Since 1985 <ref> [2] </ref> significant results have been produced in the area of database support for collaborative applications. At the same time, the continual expansion of network bandwidth and increase in computing speed raised both the quantity and complexity of data types.
Reference: [3] <author> R. Barga and C. Pu. </author> <title> A practical and modular implementation technique of extended transaction models. </title> <booktitle> In Proceedings of the 21st International Conference on Very Large Data Bases, </booktitle> <address> Zurich, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: However, no considerations were given for concurrent execution of activities and for studying the correctness properties of dynamic split-activity and join-activity operations. A concrete implementation of TAM is being built on top of the two prototypes: the distributed information mediation system (DIOM) [15] and the Reflective Transaction Adapters <ref> [3] </ref>, a toolkt for building the Reflective Transaction Framework on top of Transarc Encina, a commercial TP monitor.
Reference: [4] <author> P. A. Bernstein, V. Hadzilacos, and N. Good-man. </author> <title> Concurrency Control and Recovery in database ststems. </title> <publisher> Addison-Wesley, </publisher> <year> 1987. </year>
Reference-contexts: In contrast to traditional serializability theory <ref> [4] </ref>, temporal precedence correctness criteria consider histories correct if and only if they are equivalent to some specific serial history [11].
Reference: [5] <author> P. A. Bernstein, J. Rothnie, N. Goodman, and C. Pa--padimitriou. </author> <title> The concurrency control mechanism of sdd-1: A system for distributed databases (the full redundant case). </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> 4(3), </volume> <month> May </month> <year> 1978. </year>
Reference-contexts: The new version of the object is written back to the parent activity's access set when the subactivity that initiated the access to the object commits or comes to a breakpoint. A breakpoint <ref> [5, 9] </ref> of an activity is a point in its execution where it can interleave with other activities. <p> In contrast to traditional serializability theory [4], temporal precedence correctness criteria consider histories correct if and only if they are equivalent to some specific serial history [11]. Cooperative correctness criteria <ref> [5, 9, 17, 19, 10] </ref> use less restrictive notions of conflicts that take into account application-dependent semantics, and allow compatible activities to cooperate, e.g., to repetitively read and write specific objects without restrictions.
Reference: [6] <author> U. Dayal, M. Hsu, and R. Ladin. </author> <title> Organizing long-running activities with triggers and transactions. </title> <booktitle> In Proceedings of the ACM SIGMOD, </booktitle> <year> 1991. </year>
Reference-contexts: transfer ownership of un committed resources, these dynamic restructuring op-erations bring a number of advantages, such as added concurrency, enhanced cooperation, and adaptive recovery, to the composable activity model for organizing cooperative activities in distributed and multi-user design and computing environment. 4 Related Work Several activity models have been proposed <ref> [7, 6, 22] </ref> to support declarative specification of control flows within activities. Features of long running activities [7, 6] include an automatic compensation capability that offers some level of failure atomicity for the activity and the use of ECA-rules for monitoring activities. <p> Features of long running activities <ref> [7, 6] </ref> include an automatic compensation capability that offers some level of failure atomicity for the activity and the use of ECA-rules for monitoring activities. The cooperative model [22] achieves cooperation by controlled data exchange of the content of workspaces and controlled sharing of a common database among users.
Reference: [7] <author> U. Dayal, M. Hsu, and R. Ladin. </author> <title> A transactional model for long-running activities. </title> <booktitle> In Proceedings of the 17th Very Large Databases, </booktitle> <pages> pages 113-122, </pages> <year> 1991. </year>
Reference-contexts: transfer ownership of un committed resources, these dynamic restructuring op-erations bring a number of advantages, such as added concurrency, enhanced cooperation, and adaptive recovery, to the composable activity model for organizing cooperative activities in distributed and multi-user design and computing environment. 4 Related Work Several activity models have been proposed <ref> [7, 6, 22] </ref> to support declarative specification of control flows within activities. Features of long running activities [7, 6] include an automatic compensation capability that offers some level of failure atomicity for the activity and the use of ECA-rules for monitoring activities. <p> Features of long running activities <ref> [7, 6] </ref> include an automatic compensation capability that offers some level of failure atomicity for the activity and the use of ECA-rules for monitoring activities. The cooperative model [22] achieves cooperation by controlled data exchange of the content of workspaces and controlled sharing of a common database among users.
Reference: [8] <author> A. K. Elmagarmid. </author> <title> Database Transaction Models for Advanced Applications. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference: [9] <author> H. Garcia-Molina. </author> <title> Using semantic knowledge for transaction processing in a distributed database. </title> <journal> ACM Trans. on Database Systems, </journal> <volume> 8(3), </volume> <month> June </month> <year> 1983. </year>
Reference-contexts: The new version of the object is written back to the parent activity's access set when the subactivity that initiated the access to the object commits or comes to a breakpoint. A breakpoint <ref> [5, 9] </ref> of an activity is a point in its execution where it can interleave with other activities. <p> In contrast to traditional serializability theory [4], temporal precedence correctness criteria consider histories correct if and only if they are equivalent to some specific serial history [11]. Cooperative correctness criteria <ref> [5, 9, 17, 19, 10] </ref> use less restrictive notions of conflicts that take into account application-dependent semantics, and allow compatible activities to cooperate, e.g., to repetitively read and write specific objects without restrictions.
Reference: [10] <author> D. Georgakopoulos, M. Hornick, P. Krychniak, and F. Manola. </author> <title> Specification and management of extended transactions in a programmable transaction environment. </title> <booktitle> In Proceedings of the 1994 IEEE Conference on Data Engineering, </booktitle> <pages> pages 462-473, </pages> <month> Feb </month> <year> 1994. </year>
Reference-contexts: This example is an extended scenario of the workflow application for designing telephone circuit described in <ref> [1, 10] </ref>. Suppose the activity A:TeleConnect consists of four sub-activities A 1 :ClientRegister, A 2 :CreditCheck, B:AllocateCircuit, and A 3 :InstallNewCircuit (see Figure refAltDesign2 (a)). A is executed when a telephone company customer requests telephone service installation. <p> In contrast to traditional serializability theory [4], temporal precedence correctness criteria consider histories correct if and only if they are equivalent to some specific serial history [11]. Cooperative correctness criteria <ref> [5, 9, 17, 19, 10] </ref> use less restrictive notions of conflicts that take into account application-dependent semantics, and allow compatible activities to cooperate, e.g., to repetitively read and write specific objects without restrictions.
Reference: [11] <author> D. Georgakopoulos, M. Rusinkiewicz, and W. Litwin. </author> <title> Chronological scheduling of transactions with temporal dependencies. Very Large Database Journal, </title> <month> Jan-uary </month> <year> 1994. </year>
Reference-contexts: In contrast to traditional serializability theory [4], temporal precedence correctness criteria consider histories correct if and only if they are equivalent to some specific serial history <ref> [11] </ref>. Cooperative correctness criteria [5, 9, 17, 19, 10] use less restrictive notions of conflicts that take into account application-dependent semantics, and allow compatible activities to cooperate, e.g., to repetitively read and write specific objects without restrictions.
Reference: [12] <author> G. Kaiser and C. Pu. </author> <title> Dynamic restructuring of transactions. </title> <editor> In A. Elmagarmid, editor, </editor> <title> Transaction Models for Advanced Applications. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference-contexts: In case of elementary activities (of ECAT patterns), a system-default option can be provided in terms of the objects accessible to each of the split activities, for example, an elementary activity can be divided into two serializable transactions using the mechanisms defined in <ref> [21, 12] </ref>. Thus our discussion herein focuses on composite activities (of CACT patterns). The inverse operation of split-activity, called join-activity, can combine results of several subactivities together and release them atomically.
Reference: [13] <author> G. Kiczales. </author> <title> Towards a new model of abstraction in software engineering. </title> <booktitle> In Proceedings of the IMSA Workshop on Reflection and Meta-level Architectures, </booktitle> <year> 1992. </year> <note> See http://www.xerox.com/PARC/spl/eca/on.html for updates. </note>
Reference-contexts: Third, TAM separates the specification of activity patterns from their transaction implementation strategies, thus allowing more reasoning and optimization to improve performance in the actual implementation. Another distinct feature of the proposed framework is its unique application of computational reflection concept and principles <ref> [13] </ref> throughout the development of TAM and its associated set of activity restructuring operators.
Reference: [14] <author> L. Liu and R. Meersman. </author> <title> Activity model: a declarative approach for capturing communication behavior in object-oriented databases. </title> <booktitle> In Proceeding of the 18th International Conference on Very Large Databases, </booktitle> <pages> pages 481-493, </pages> <address> Vancouver, Canada, </address> <year> 1992. </year> <note> Morgan Kauffman. The long version of this paper is published in ACM Transactions on Database Systems, Vol.21, No.3, </note> <year> 1996. </year>
Reference-contexts: TAM can be seen as a careful combination of the compositional activity model proposed in <ref> [14] </ref> with well defined extended transaction models such as split/join transactions [21]. Our results reported in this paper are significant advance over each one of the component technology we used and over the previous activity models. <p> An activity pattern describes the communication protocol of a group of cooperating objects in accomplishing a task <ref> [14] </ref>. Informally, an activity pattern consists of objects, messages among them, constraints, preconditions, post conditions, and triggering conditions of executions. TAM distinguishes two types of activity patterns: elementary activity patterns and composite activity patterns. <p> The development of TAM can be seen as an important extension to the activity composition model proposed in <ref> [14] </ref> by adding correctness (transactional) properties and incorporating dynamic activity restructuring operations into the activity execution. Our early proposal [14] focused more on the scheduling of message exchanges within an activity execution. <p> The development of TAM can be seen as an important extension to the activity composition model proposed in <ref> [14] </ref> by adding correctness (transactional) properties and incorporating dynamic activity restructuring operations into the activity execution. Our early proposal [14] focused more on the scheduling of message exchanges within an activity execution. However, no considerations were given for concurrent execution of activities and for studying the correctness properties of dynamic split-activity and join-activity operations.
Reference: [15] <author> L. Liu, C. Pu, and Y. Lee. </author> <title> An adaptive approach to query mediation across heterogeneous databases. </title> <booktitle> In Proceedings of the International Conference on Coopertive Information Systems, </booktitle> <address> Brussels, </address> <month> June 19-21 </month> <year> 1996. </year>
Reference-contexts: However, no considerations were given for concurrent execution of activities and for studying the correctness properties of dynamic split-activity and join-activity operations. A concrete implementation of TAM is being built on top of the two prototypes: the distributed information mediation system (DIOM) <ref> [15] </ref> and the Reflective Transaction Adapters [3], a toolkt for building the Reflective Transaction Framework on top of Transarc Encina, a commercial TP monitor.
Reference: [16] <author> L. Liu, C. Pu, and R. Meersman. </author> <title> The transactional activity model for organizing open-ended activities. </title> <type> Technical Report TR96-21, </type> <institution> University of Alberta, Department of Computing Science, </institution> <month> April </month> <year> 1996. </year>
Reference-contexts: The architectural dependencies reflect the invocation hierarchy of the system, whereas the dynamic or correctness dependencies reflect the intended behavioral interactions (e.g., interleavings) among any number of activities that are unrelated in terms of the invocation hierarchy. Note that dynamic dependencies are not at all hierarchical <ref> [16] </ref>. Any activity (incl. atomic action) at any invocation level can be involved in dynamic (correctness) dependencies with many other activities at different levels of the invocation hierarchy. <p> In TAM a compatibility specification of activities is captured in the form of a compatibility matrix <ref> [16] </ref>. TAM provides four constructs for specification of user-defined activity dependencies. They are precede, enable, disable, and compatible. The construct precede is designed to capture the temporary precedence dependencies and the existence dependencies between two activities.
Reference: [17] <author> N. Lynch. </author> <title> Multilevel atomicity: A new correctness criterion for database concurrency control. </title> <journal> ACM Trans. on Database Systems, </journal> <volume> 8(4), </volume> <month> December </month> <year> 1983. </year>
Reference-contexts: In contrast to traditional serializability theory [4], temporal precedence correctness criteria consider histories correct if and only if they are equivalent to some specific serial history [11]. Cooperative correctness criteria <ref> [5, 9, 17, 19, 10] </ref> use less restrictive notions of conflicts that take into account application-dependent semantics, and allow compatible activities to cooperate, e.g., to repetitively read and write specific objects without restrictions.
Reference: [18] <author> C. Mohan, G. Alonso, R. Gunthor, and M. Kamath. Exotica: </author> <title> A research prespective on workflow management systems. </title> <journal> In IEEE Bulletin of the Technical Committee on Data Engineering, </journal> <pages> pages 19-26, </pages> <month> March </month> <year> 1995, </year> <note> Vol.18, No.1. </note>
Reference-contexts: Appropriate recovery of composite activities is a challenging research topic on which significant progress has been made. Workflow systems such as Exotica <ref> [18] </ref>, for example, contain useful components for the recovery of elementary activities such as reliable/recoverable queues and a state machine interpreter.
Reference: [19] <author> M. Nodine, S. Ramaswamy, and S. Zdonik. </author> <title> A cooperative transaction model for design databases. </title> <booktitle> In Elmagarmid [8], </booktitle> <pages> pages 53-85, </pages> <note> Chapter 3, </note> <year> 1992. </year>
Reference-contexts: In contrast to traditional serializability theory [4], temporal precedence correctness criteria consider histories correct if and only if they are equivalent to some specific serial history [11]. Cooperative correctness criteria <ref> [5, 9, 17, 19, 10] </ref> use less restrictive notions of conflicts that take into account application-dependent semantics, and allow compatible activities to cooperate, e.g., to repetitively read and write specific objects without restrictions.
Reference: [20] <author> M. Nodine and S. Zdonik. </author> <title> Cooperative transaction hierarchies: a transaction model to support design applications. </title> <booktitle> In Proceedings of the 16th International Conference on Very Large Data Bases, </booktitle> <pages> pages 83-94, </pages> <year> 1990. </year>
Reference-contexts: In other words, the activity T may commit even if one of its component activities is aborted. 2.4.2 Activity Visibility Dependencies TAM uses the multiple object version scheme <ref> [20] </ref> to define the notion of visibility in the presence of concurrent execution of activities, that is, object versions are created and maintained at different points in the activity hierarchy.
Reference: [21] <author> C. Pu, G. Kaiser, and N. Hutchinson. </author> <title> Split-transactions for open-ended activities. </title> <booktitle> In Proceedings of the Fourteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 27-36, </pages> <address> Los Angeles, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: Of the three main characteristics <ref> [21] </ref> of the cooperative activities, the first two, uncertain duration and unpredictable development , are aggravated by the increased necessity of accessing and sharing data over widely distributed information sources, and the third characteristics, flexible interaction among concurrent activities, has become an increasingly higher challenge due to the growing complexity of <p> TAM can be seen as a careful combination of the compositional activity model proposed in [14] with well defined extended transaction models such as split/join transactions <ref> [21] </ref>. Our results reported in this paper are significant advance over each one of the component technology we used and over the previous activity models. <p> In case of elementary activities (of ECAT patterns), a system-default option can be provided in terms of the objects accessible to each of the split activities, for example, an elementary activity can be divided into two serializable transactions using the mechanisms defined in <ref> [21, 12] </ref>. Thus our discussion herein focuses on composite activities (of CACT patterns). The inverse operation of split-activity, called join-activity, can combine results of several subactivities together and release them atomically.
Reference: [22] <author> M. Rusinkiewicz, W. Klas, T. Tesch, J. Wasch, and P.Muth. </author> <title> Towards a cooperative activity model the coopertive activity model. </title> <booktitle> In Proceedings of the 21st International Conference on Very Large Data Bases, </booktitle> <pages> pages 194-205, </pages> <year> 1995. </year>
Reference-contexts: transfer ownership of un committed resources, these dynamic restructuring op-erations bring a number of advantages, such as added concurrency, enhanced cooperation, and adaptive recovery, to the composable activity model for organizing cooperative activities in distributed and multi-user design and computing environment. 4 Related Work Several activity models have been proposed <ref> [7, 6, 22] </ref> to support declarative specification of control flows within activities. Features of long running activities [7, 6] include an automatic compensation capability that offers some level of failure atomicity for the activity and the use of ECA-rules for monitoring activities. <p> Features of long running activities [7, 6] include an automatic compensation capability that offers some level of failure atomicity for the activity and the use of ECA-rules for monitoring activities. The cooperative model <ref> [22] </ref> achieves cooperation by controlled data exchange of the content of workspaces and controlled sharing of a common database among users.
Reference: [23] <author> T. Zhou, C. Pu, and L. Liu. </author> <title> Adaptable, efficient, and modular coordination of distributed extended transactions. </title> <booktitle> In Proceeding of the International Conference on Parallel and Distributed Databases, </booktitle> <year> 1996. </year>
Reference-contexts: Workflow systems such as Exotica [18], for example, contain useful components for the recovery of elementary activities such as reliable/recoverable queues and a state machine interpreter. Flexible and modular implementation of coordination protocols <ref> [23] </ref> is another example of important components of a solution for complex activity recovery. 5 Conclusion We have described a reflective framework for organizing and restructuring of complex activities. The framework consists of the Transactional Activity composition Model (TAM) and a family of activity-split and activity-join operations.
References-found: 23

