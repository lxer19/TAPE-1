URL: http://www.dfki.uni-kl.de/~vega/relfun+/GeneTS.ps
Refering-URL: http://www.dfki.uni-kl.de/~vega/relfun.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Phone: Tel.: 49 (631) 205-3211 Stuhlsatzenhausweg 3  Tel.: 49 (681) 302-5252  
Title: GeneTS: A Relational-Functional Genetic Algorithm for the Traveling Salesman Problem  
Author: f ur K unstliche Markus Perling f ur K unstliche Intelligenz 
Address: Postfach 20 80 67608 Kaiserslautern, FRG  66123 Saarbrucken, FRG  
Note: Deutsches Forschungszentrum  
Date: August 1997  
Affiliation: Deutsches Forschungszentrum  Intelligenz GmbH  GmbH  
Pubnum: Technical Memo TM-97-01  
Abstract-found: 0
Intro-found: 1
Reference: [BEH + 96] <author> Harold Boley, Klaus Elsbernd, Hans-Guenther Hein, Thomas Krause, Markus Per-ling, q Michael Sintek, and Werner Stein. </author> <title> RFM Manual: Compiling RELFUN into the Relational/Functional Machine. Document D-91-03, </title> <institution> DFKI GmbH, </institution> <month> July </month> <year> 1996. </year> <note> Third, Revised Edition. </note>
Reference: [Bol92] <author> Harold Boley. </author> <title> Extended Logic-plus-Functional Programming. </title> <editor> In Lars-Henrik Eriks-son, Lars Hallnas, and Peter Schroeder-Heister, editors, </editor> <booktitle> Proceedings of the 2nd International Workshop on Extensions of Logic Programming, ELP '91, Stockholm 1991, volume 596 of LNAI. </booktitle> <publisher> Springer, </publisher> <year> 1992. </year>
Reference-contexts: RelFun possesses many additional concepts, like higher-order operators and sorts, of which not all will be required here (for further reading see <ref> [Bol92] </ref>). For the TSP application we restrict ourselves to a mostly pure RelFun style; this allows comparisons with languages supporting different paradigms.
Reference: [CH97] <author> Chih-Ping Chen and Paul Hudak. </author> <title> Rolling Your Own Mutable MADT | A Connection Between Linear Types and Monads. </title> <booktitle> In Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, </booktitle> <pages> pages 54-66, </pages> <note> Paris, January 15 - 17, 1997. ACM Press. </note>
Reference-contexts: Therefore, the efficiency of GeneTS currently does not compete with implementations in imperative languages like C: functional list manipulation in such cases is less efficient than in-place array updates. This behavior may lead to further optimization considerations towards in-place updates for lists along the lines of <ref> [HB85, CH97] </ref> in our (WAM-)compiler and emulator combination.
Reference: [DFJ54] <author> G. Dantzig, R. Fulkerson, and S. Johnson. </author> <title> Solution of a Large Scale Traveling Salesman Problem. </title> <journal> Operations Research, </journal> <volume> 2 </volume> <pages> 393-410, </pages> <year> 1954. </year>
Reference-contexts: It discusses several optimization methods applied to the TSP, including genetic algorithms, and can be used as backlink to earlier references. For remarks on the origins of the TSP see chapter 10 in [Mic96] and the footnote at the beginning of <ref> [DFJ54] </ref>. The latter text is also the earliest reference we found; `it is shown that a tour across 49 US cities has the shortest road distance'.
Reference: [GJ79] <author> M. Garey and D. Johnson. </author> <title> Computers and Intractability. W.H. </title> <publisher> Freeman, </publisher> <address> San Francisco, </address> <year> 1979. </year>
Reference-contexts: The search space for finding the shortest path across m cities consists of all possible permutations of the numbers 1; : : : ; m and has therefore a size of 1 2 (m 1)!; the NP-hardness of the TSP was proven in <ref> [GJ79] </ref>. In order to still cope with this, we give up trying to find an optimal solution.
Reference: [Gol89] <author> David E. Goldberg. </author> <title> Genetic Algorithms in Search, Optimization, and Machine Learning. </title> <publisher> Addison Wesley, </publisher> <year> 1989. </year>
Reference-contexts: We chose the TSP because it is well-known and constitutes a challenging testbed for various optimization methods, as well as, like in our case, for programming paradigms. Also, the combination of TSP and GA is a well-discussed subject in the literature, see, e.g., [Mic96], <ref> [Gol89] </ref>, on which our discussion is based (also see [RS94]); therefore our program will be comparable to many other implementations. <p> In appendix B one finds the complete source of the GeneTS program. 2 The "Traveling Salesman" Problem and Genetic Algo rithms In this section an introduction to the basic concepts of applying genetic algorithms to the TSP is given. Originally, the idea for the project came from <ref> [Gol89] </ref>, and we will follow the language used in this book.
Reference: [HB85] <author> Paul Hudak and Adriene Bloss. </author> <title> The Aggregate Update Problem in Functional Programming Languages. </title> <booktitle> In Conference Record of the Twelfth ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 300-314, </pages> <address> New Orleans, </address> <month> January </month> <year> 1985. </year> <note> "ACM". </note>
Reference-contexts: Therefore, the efficiency of GeneTS currently does not compete with implementations in imperative languages like C: functional list manipulation in such cases is less efficient than in-place array updates. This behavior may lead to further optimization considerations towards in-place updates for lists along the lines of <ref> [HB85, CH97] </ref> in our (WAM-)compiler and emulator combination.
Reference: [HB87] <author> P. Hudak and A. Bloss. </author> <title> Avoiding Copying in Functional and Logic Programming Languages. </title> <booktitle> In Conference record of the 14th ACM Symposium on Principles of Programming Languages (POPL), </booktitle> <pages> pages 300-314, </pages> <year> 1987. </year>
Reference: [HK70] <author> M. Held and R. M. Karp. </author> <title> The traveling salesman problem and minimum spanning trees. </title> <journal> Operations Research, </journal> <volume> 18 </volume> <pages> 1138-1162, </pages> <year> 1970. </year> <note> REFERENCES 16 </note>
Reference: [JM97] <author> David S. Johnson and Lyle A. McGeoch. </author> <title> The traveling salesman problem: a case study. </title> <editor> In E. Aarts and J.K. Lenstra, editors, </editor> <booktitle> Local Search in Combinatorial Optimization, </booktitle> <pages> pages 215-310. </pages> <publisher> John Wiley & Sons, </publisher> <year> 1997. </year>
Reference-contexts: For direct comparisons between GAs in different declarative languages one will find many (although mostly experimental and therefore undocumented) implementations in Prolog, Lisp, Eiffel, Scheme, and others in the WWW (for a Lisp implementation refer to [Koz93]). For further reading about the TSP, we suggest a recent text, <ref> [JM97] </ref>. It discusses several optimization methods applied to the TSP, including genetic algorithms, and can be used as backlink to earlier references. For remarks on the origins of the TSP see chapter 10 in [Mic96] and the footnote at the beginning of [DFJ54].
Reference: [Koz93] <author> John R. Koza. </author> <title> Genetic programming: On the programming of computers by means of natural selection. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1993. </year>
Reference-contexts: For direct comparisons between GAs in different declarative languages one will find many (although mostly experimental and therefore undocumented) implementations in Prolog, Lisp, Eiffel, Scheme, and others in the WWW (for a Lisp implementation refer to <ref> [Koz93] </ref>). For further reading about the TSP, we suggest a recent text, [JM97]. It discusses several optimization methods applied to the TSP, including genetic algorithms, and can be used as backlink to earlier references.
Reference: [Mic96] <author> Zbigniew Michalewicz. </author> <title> Genetic Algorithms + Data Structures = Evolution Programs. </title> <publisher> Springer Verlag, </publisher> <year> 1996. </year>
Reference-contexts: We chose the TSP because it is well-known and constitutes a challenging testbed for various optimization methods, as well as, like in our case, for programming paradigms. Also, the combination of TSP and GA is a well-discussed subject in the literature, see, e.g., <ref> [Mic96] </ref>, [Gol89], on which our discussion is based (also see [RS94]); therefore our program will be comparable to many other implementations. We will not detail here any discussion whether our application is an evolution program or a genetic algorithm (see also [Mic96]): it doesn't use binary coding like GA's in their <p> is a well-discussed subject in the literature, see, e.g., <ref> [Mic96] </ref>, [Gol89], on which our discussion is based (also see [RS94]); therefore our program will be comparable to many other implementations. We will not detail here any discussion whether our application is an evolution program or a genetic algorithm (see also [Mic96]): it doesn't use binary coding like GA's in their original definition, but it still uses string coding (or, lists); therefore we will speak of a GA. <p> For further reading about the TSP, we suggest a recent text, [JM97]. It discusses several optimization methods applied to the TSP, including genetic algorithms, and can be used as backlink to earlier references. For remarks on the origins of the TSP see chapter 10 in <ref> [Mic96] </ref> and the footnote at the beginning of [DFJ54]. The latter text is also the earliest reference we found; `it is shown that a tour across 49 US cities has the shortest road distance'. <p> Originally, the idea for the project came from [Gol89], and we will follow the language used in this book. Later, our implementation was modified to fit to chapter 10 of <ref> [Mic96] </ref>, which describes the application of evolutionary algorithms to the TSP. 2.1 The "Traveling Salesman" Problem The general TSP is to plan, as for a salesperson, the shortest possible route between a number of cities.
Reference: [Per97] <author> Markus Perling. </author> <title> RAWAM A Relfun Adapted WAM. </title> <type> Technical report, </type> <institution> Universitat Kaiserslautern, perling@dfki.uni-kl.de, </institution> <year> 1997. </year>
Reference: [RS94] <author> N. J. Radcliffe and P. D. Surry. </author> <title> Fitness Variance of Formae and Performance Prediction. </title> <editor> In Whitley, L. D. and Vose, M.D., editor, </editor> <booktitle> Foundations of Genetic Algorithms III. </booktitle> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1994. </year>
Reference-contexts: Also, the combination of TSP and GA is a well-discussed subject in the literature, see, e.g., [Mic96], [Gol89], on which our discussion is based (also see <ref> [RS94] </ref>); therefore our program will be comparable to many other implementations.
References-found: 14

