URL: http://www.csl.sri.com/fme96-utrecht.ps.Z
Refering-URL: http://www.csl.sri.com/old-news.html
Root-URL: 
Title: Local Nondeterminism in Asynchronously Communicating Processes  
Author: F.S. de Boer and M. van Hulst 
Address: P.O. Box 80089, 3508 TB Utrecht, The Netherlands  
Affiliation: Utrecht University, Dept. of Comp. Sc.,  
Abstract: In this paper we present a simple compositional Hoare logic for reasoning about the correctness of a certain class of distributed systems. We consider distributed systems composed of processes which interact asynchronously via unbounded FIFO buffers. The simplicity of the proof system is due to the restriction to local nondeterminism in the description of the sequential processes of a system. To illustrate the usefulness of the proof system we use PVS (Prototype Verification System, see [ORS92]) to prove in a compositional manner the correctness of a heartbeat algorithm for computing the topology of a network.
Abstract-found: 1
Intro-found: 1
Reference: [AFdR80] <author> K.R. Apt, N. Francez, and W.-P. de Roever. </author> <title> A proof system for communicating sequential processes. </title> <journal> ACM-TOPLAS, </journal> <volume> 2(3) </volume> <pages> 359-385, </pages> <year> 1980. </year>
Reference-contexts: The difference between input/output variables and histories is that in the former information of the relative ordering of communication events on different buffers is lost. In [Fra92] these input/output variables are used in a non-compositional proof system based on a cooperation test along the lines of <ref> [AFdR80] </ref> for FIFO buffered communication in general. A compositional proof system based on input/output variables is given in [dBvH94] for the class of systems composed of deterministic processes as described above. <p> The compositional method of proving deadlock freedom incorporated in the above rule can be best understood by comparing it with the standard way of proving deadlock freedom using the proof outlines. For example in <ref> [AFdR80] </ref>, given proof outlines of the components of a CSP program P [S 1 k : : : k S n ], absence of deadlock can be proved by first determining statically all possible deadlock configurations.
Reference: [And91] <author> Gregory R. Andrews. </author> <title> Concurrent Programming, </title> <booktitle> Principles and Practice. </booktitle> <publisher> The Benjamin/Cummings Publishing Company, Inc., </publisher> <year> 1991. </year>
Reference-contexts: ], where we assume the following restrictions: the statements S i do not share program variables, channels are unidirectional and connect exactly one sender and one receiver. 3 An example: Computing the network topology We consider a symmetric and distributive algorithm for computing a network topology, which is described in <ref> [And91] </ref>.
Reference: [CS95] <author> D. A. Cyrluk and M. K. Srivas. </author> <title> Theorem proving: Not an esoteric diversion, but the unifying framework for industrial verification. </title> <booktitle> In IEEE International Conference on Computer Design (ICCD) '95, </booktitle> <address> Austin, Texas, </address> <month> October </month> <year> 1995. </year>
Reference-contexts: Much effort has already been invested in developing a useful tool for (automated) verification by means of PVS <ref> [CS95, Raj94] </ref>. The rest of this paper is organized as follows: In section 2, the programming language is defined. Section 3 explains the algorithm for computing the topology of a network. Then, in section 4, the proof system is introduced and its formal justification is briefly touched upon.
Reference: [dB94] <author> F.S. de Boer. </author> <title> Compositionality and completeness of the inductive assertion method for concurrent systems. </title> <booktitle> In Proc. IFIP Working Conference on Programming Concepts, Methods and Calculi, </booktitle> <address> San Miniato, Italy, </address> <year> 1994. </year>
Reference-contexts: The proof system in [dBvH94] does not allow this because part of a local specification is the global invariant which specifies the overall communication behaviour of the entire system. Moreover, the relevance of a compositional reasoning pattern <ref> [dB94, dBHdR, dBvH95, HdR86] </ref> with respect to the complexity of (mechanically supported) correctness proofs of concurrent systems lies in the fact that the verification of the local components of a system can in most practical cases be mechanized fully (or at least to a very large extent).
Reference: [dBHdR] <author> F.S. de Boer, J. Hooman, and W.-P. de Roever. </author> <title> State-based proof theory of concurrency: from noncompositional to compositional methods. Draft of a book. </title>
Reference-contexts: The proof system in [dBvH94] does not allow this because part of a local specification is the global invariant which specifies the overall communication behaviour of the entire system. Moreover, the relevance of a compositional reasoning pattern <ref> [dB94, dBHdR, dBvH95, HdR86] </ref> with respect to the complexity of (mechanically supported) correctness proofs of concurrent systems lies in the fact that the verification of the local components of a system can in most practical cases be mechanized fully (or at least to a very large extent).
Reference: [dBvH94] <author> F.S. de Boer and M. van Hulst. </author> <title> A proof system for asynchronously communicating deterministic processes. </title> <editor> In B. Rovan I. Prvara and P. Ruzicka, editors, </editor> <booktitle> Proc. MFCS '94, volume 841 of Lecture Notes in Computer Science, </booktitle> <pages> pages 256-265. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: 1 Introduction In <ref> [dBvH94] </ref> we have shown that a certain class of distributed systems composed of processes which communicate asynchronously via (unbounded) FIFO buffers, can be proved correct using a simple compositional proof system based on Hoare-logic. The class of systems introduced in [dBvH94] is characterized by the restriction to deterministic control structures in <p> 1 Introduction In <ref> [dBvH94] </ref> we have shown that a certain class of distributed systems composed of processes which communicate asynchronously via (unbounded) FIFO buffers, can be proved correct using a simple compositional proof system based on Hoare-logic. The class of systems introduced in [dBvH94] is characterized by the restriction to deterministic control structures in the description of the local sequential processes. An additional feature is the introduction of input statements as tests in the choice and iterative constructs. Such input statements involve a test on the contents of the particular buffer under consideration. <p> In [Fra92] these input/output variables are used in a non-compositional proof system based on a cooperation test along the lines of [AFdR80] for FIFO buffered communication in general. A compositional proof system based on input/output variables is given in <ref> [dBvH94] </ref> for the class of systems composed of deterministic processes as described above. However, the proof system in [dBvH94] allows only a decomposition of the pre/postcondition part of the specification of a distributed system. <p> A compositional proof system based on input/output variables is given in <ref> [dBvH94] </ref> for the class of systems composed of deterministic processes as described above. However, the proof system in [dBvH94] allows only a decomposition of the pre/postcondition part of the specification of a distributed system. <p> This is due to the global non-determinism inherent in the distributed systems considered in <ref> [dBvH94] </ref>. In this paper, we investigate local nondeterminism, that is, we restrict to distributed systems composed of processes which may test only their own private program variables. <p> This additional compositional feature is very important because it allows for the construction of a library of specified components which can be reused in any parallel context. The proof system in <ref> [dBvH94] </ref> does not allow this because part of a local specification is the global invariant which specifies the overall communication behaviour of the entire system. <p> In the example below, we only have need for simple guarded statements, which we will denote by if b then S 1 else S 2 fi and while b do S od. In <ref> [dBvH94] </ref> we considered deterministic choice and iteration constructs which use input statements as tests.
Reference: [dBvH95] <author> F.S. de Boer and M. van Hulst. </author> <title> A compositional proof system for asynchronously communicating processes. </title> <booktitle> In Proceedings MPC'95, </booktitle> <address> Kloster Irsee, Germany, </address> <year> 1995. </year>
Reference-contexts: The proof system in [dBvH94] does not allow this because part of a local specification is the global invariant which specifies the overall communication behaviour of the entire system. Moreover, the relevance of a compositional reasoning pattern <ref> [dB94, dBHdR, dBvH95, HdR86] </ref> with respect to the complexity of (mechanically supported) correctness proofs of concurrent systems lies in the fact that the verification of the local components of a system can in most practical cases be mechanized fully (or at least to a very large extent).
Reference: [dBvH96] <author> F.S. de Boer and M. van Hulst. </author> <title> Local nondeterminism in asynchronously communicating processes. </title> <type> Technical report, </type> <institution> Utrecht University, </institution> <year> 1996. </year> <note> In Preparation. </note>
Reference-contexts: Moreover it is rather straightforward to prove the correctness of the compositional semantics with respect to an operational semantics. More details can be found in the technical report <ref> [dBvH96] </ref>. 5 Automated verification in PVS In this section, we will show how the network topology determination algorithm can be specified and verified using PVS.
Reference: [Fra92] <author> N. Francez. </author> <title> Program Verification. </title> <publisher> Addison Wesley, </publisher> <year> 1992. </year>
Reference-contexts: This should be contrasted with logics which formalize reasoning about distributed systems in terms of histories ([OG76, AFdR80, ZdRvEB85, Pan88, HdR86]). The difference between input/output variables and histories is that in the former information of the relative ordering of communication events on different buffers is lost. In <ref> [Fra92] </ref> these input/output variables are used in a non-compositional proof system based on a cooperation test along the lines of [AFdR80] for FIFO buffered communication in general.
Reference: [HdR86] <author> J. Hooman and W.-P. de Roever. </author> <title> The quest goes on: a survey of proof systems for partial correctness of CSP. </title> <booktitle> In Current trends in concur-rency, volume 224 of Lecture Notes in Computer Science, </booktitle> <pages> pages 343-395. </pages> <publisher> Springer-Verlag, </publisher> <year> 1986. </year>
Reference-contexts: The proof system in [dBvH94] does not allow this because part of a local specification is the global invariant which specifies the overall communication behaviour of the entire system. Moreover, the relevance of a compositional reasoning pattern <ref> [dB94, dBHdR, dBvH95, HdR86] </ref> with respect to the complexity of (mechanically supported) correctness proofs of concurrent systems lies in the fact that the verification of the local components of a system can in most practical cases be mechanized fully (or at least to a very large extent).
Reference: [OG76] <author> S. Owicki and D. Gries. </author> <title> An axiomatic proof technique for parallel programs I. </title> <journal> Acta Informatica, </journal> <volume> 6 </volume> <pages> 319-340, </pages> <year> 1976. </year>
Reference: [ORS92] <author> S. Owre, J. Rushby, and N. Shankar. PVS: </author> <title> A prototype verification system. </title> <booktitle> In 11th Conference on Automated Deduction, volume 607 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 748-752. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference: [Pan88] <author> P.K. Pandya. </author> <title> Compositional Verification of Distributed Programs. </title> <type> PhD thesis, </type> <institution> Tata Institute of Fundamental Research, </institution> <address> Homi Bhabha Road, Bom-bay 400 005, INDIA, </address> <year> 1988. </year>
Reference: [Raj94] <author> S. Rajan. </author> <title> Transformations in high-level synthesis: Formal specification and efficient mechanical verification. </title> <type> Technical Report CSL-94-10, CSL, </type> <year> 1994. </year>
Reference-contexts: Much effort has already been invested in developing a useful tool for (automated) verification by means of PVS <ref> [CS95, Raj94] </ref>. The rest of this paper is organized as follows: In section 2, the programming language is defined. Section 3 explains the algorithm for computing the topology of a network. Then, in section 4, the proof system is introduced and its formal justification is briefly touched upon.
Reference: [ZdRvEB85] <author> J. Zwiers, W.-P. de Roever, and P. van Emde Boas. </author> <title> Compositionality and concurrent networks: Soundness and completeness of a proofsystem. </title> <booktitle> In Proc. ICALP'85, volume 194 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1985. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
References-found: 15

