URL: http://www.cs.uni-bonn.de/~ralf/IFPL/grasp-jfit.ps.gz
Refering-URL: http://www.cs.uni-bonn.de/~ralf/index.body.html
Root-URL: http://cs.uni-bonn.de
Email: email: simonpj@dcs.glasgow.ac.uk  
Title: The Glasgow Haskell compiler: a technical overview  portable, modular, generates good code,  
Author: Simon L Peyton Jones Cordy Hall Kevin Hammond Will Partain Phil Wadler 
Note: The compiler is  and is freely available.  
Date: December 22, 1992  
Address: G12 8QQ.  
Affiliation: Department of Computing Science, University of Glasgow,  
Abstract: This paper appears in the Proceedings of the UK Joint Framework for Information Technology (JFIT) Technical Conference, Keele, 1993. Abstract We give an overview of the Glasgow Haskell compiler, focusing especially on way in which we have been able to exploit the rich theory of functional languages to give very practical improvements in the compiler. 
Abstract-found: 1
Intro-found: 1
Reference: <author> AW Appel [1992], </author> <title> Compiling with continuations, </title> <publisher> Cam-bridge University Press. </publisher> <month> JF Bartlett [Jan </month> <year> 1989], </year> <title> "SCHEME to C: a portable Scheme-to-C compiler," </title> <note> DEC WRL RR 89/1. </note>
Reference: <author> P Fradet & D Le Metayer [Jan 1991], </author> <title> "Compilation of functional languages by program transformation," ACM Transactions on Programming Languages and Systems 13. JL Hennessy & DA Patterson [Feb 1990], Computer Architecture: A Quantitative Approach, </title> <publisher> Morgan Kaufman, </publisher> <address> ISBN 1-55860-069-8. </address>
Reference: <author> P Hudak, SL Peyton Jones, PL Wadler, Arvind, B Boutel, J Fairbairn, J Fasel, M Guzman, K Hammond, J Hughes, T Johnsson, R Kieburtz, </author> <title> RS Nikhil, W Partain & J Peterson [May 1992], "Report on the functional programming language Haskell, Version 1.2," SIGPLAN Notices 27. RJM Hughes [July 1983], "The design and implementation of programming languages," </title> <type> PhD thesis, </type> <institution> Programming Research Group, </institution> <month> Oxford. </month> <title> R Kelsey [May 1989], "Compilation by program transformation," YALEU/DCS/RR-702, </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Yale University. </institution>
Reference: <author> H Lieberman & C Hewitt [June 1983], </author> <title> "A real-time garbage collector based on the lifetimes of objects," </title> <journal> CACM 26, </journal> <pages> 419-429. </pages> <address> R Milner [June 1991], </address> <institution> "Computer Science: The Core IT Research Discipline," Lab for the Foundations of Computer Science, Edinburgh. </institution>
Reference: <author> E Miranda [Apr 1991], </author> <title> "How to do machine-independent fast threaded code," </title> <institution> Dept of Computer Science, Queen Mary and Westfield College, </institution> <address> London. E Moggi [June 1989], </address> <booktitle> "Computational lambda calculus and monads," in Logic in Computer Science, Cal-ifornia, IEEE. WD Partain [1993], "The nofib Benchmark Suite of Haskell Programs," in Functional Programming, Glasgow 1992, </booktitle> <editor> J Launchbury, ed., </editor> <booktitle> Workshops in Computing, </booktitle> <publisher> Springer Verlag. </publisher> <editor> SL Peyton Jones [Apr 1992a], </editor> <title> "Implementing lazy functional languages on stock hardware: </title> <journal> the Spineless Tagless G-machine," Journal of Functional Programming 2, </journal> <pages> 127-202. </pages> <note> SL Peyton Jones [Autumn 1992b], "UK research in functional programming," SERC Bulletin 4. </note>
Reference: <author> SL Peyton Jones & J Launchbury [Sept 1991], </author> <title> "Unboxed values as first class citizens," </title> <booktitle> in Functional Programming Languages and Computer Architecture, </booktitle> <address> Boston, </address> <publisher> Hughes, ed., LNCS 523, Springer Verlag. </publisher>
Reference: <author> SL Peyton Jones & D Lester [May 1991], </author> <title> "A modular fully-lazy lambda lifter in Haskell," </title> <journal> Software Practice and Experience 21. </journal>

Reference: <author> D Tarditi, </author> <title> A Acharya & P Lee [July 1992], "No assembly required: compiling Standard ML to C," </title> <institution> School of Computer Science, Carnegie Mellon University. </institution> <note> PL Wadler [June 1990], </note> <editor> "Comprehending monads," </editor> <booktitle> in Proc ACM Conference on Lisp and Functional Programming, Nice, ACM. </booktitle>
Reference: <editor> PL Wadler & S Blott [Jan 1989], </editor> <title> "How to make ad-hoc polymorphism less ad hoc," </title> <booktitle> in Proc 16th ACM Symposium on Principles of Programming Languages, </booktitle> <address> Austin, Texas, </address> <publisher> ACM. </publisher> <pages> 9 </pages>
References-found: 9

