URL: ftp://ftp.cs.indiana.edu/pub/techreports/TR421.ps.Z
Refering-URL: http://www.cs.indiana.edu/trindex.html
Root-URL: 
Email: fjgotwals,ssriniva,yangg@cs.indiana.edu  
Phone: 215,  
Title: Parallel I/O from the User's Perspective  
Author: Jacob Gotwals Suresh Srinivas Shelby Yang 
Address: Lindley Hall  Bloomington, IN, 47405  
Affiliation: Department of Computer Science  Indiana University  
Abstract: Parallel I/O systems are gaining popularity as a means for providing scalable high bandwidth I/O. In this paper we develop abstract models of parallel I/O systems and provide empirical results that show how I/O intensive applications interact with the elements of parallel I/O systems. The abstract models are useful for explaining parallel I/O performance to developers of applications requiring high performance I/O and the experimental results provide insight into the I/O performance of present generation parallel machines. We also identify optimizations for improving I/O performance, which should be useful for developers of applications and I/O libraries. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Thinking Machines Corporation. </institution> <note> CMMD Reference Manual. Chapter 12. </note>
Reference-contexts: Therefore, many present-generation parallel machines provide a scalable parallel I/O subsystem consisting of several I/O nodes each connected to a high speed I/O device. This enables high bandwidth co-operative I/O i.e., parallel I/O to be performed from the compute nodes <ref> [1, 2, 3] </ref>. Many large-scale parallel applications require the use of parallel I/O to achieve high performance [4]. In this paper, we design models and experiments to examine how parallel I/O systems perform and scale. <p> Some of the present genera-tion parallel machines that provide such a system are the Intel Paragon, Thinking Machines CM-5 <ref> [1] </ref> and IBM SP-1 [5]. Both the Paragon and the CM-5 provide a special UNIX file system that gives applications high speed access to the parallel I/O system.
Reference: [2] <institution> Intel Supercomputing System Division. </institution> <note> Paragon Users Guide. Chapter 5 and Chapter 8. </note>
Reference-contexts: Therefore, many present-generation parallel machines provide a scalable parallel I/O subsystem consisting of several I/O nodes each connected to a high speed I/O device. This enables high bandwidth co-operative I/O i.e., parallel I/O to be performed from the compute nodes <ref> [1, 2, 3] </ref>. Many large-scale parallel applications require the use of parallel I/O to achieve high performance [4]. In this paper, we design models and experiments to examine how parallel I/O systems perform and scale. <p> On the Paragon we started with a simple test program that linearly increased the total amount of I/O, and measured the I/O rates for the M SYNC mode. We successively added the following optimizations that the Paragon User's Guide <ref> [2] </ref> suggests: 1. Align read/write buffers to page boundaries 1 . 2. Use the paragon's record (M RECORD) parallel I/O mode. This mode requires that the same amount of data be read or written by each processor in any given parallel I/O operation. 3.
Reference: [3] <author> Peter Corbett and Dror Feitelson. </author> <title> Design and impelementation of the vesta parallel file system. </title> <booktitle> In Proceedings of Scalable High Performance Computing Conference, </booktitle> <address> SHPCC94, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Therefore, many present-generation parallel machines provide a scalable parallel I/O subsystem consisting of several I/O nodes each connected to a high speed I/O device. This enables high bandwidth co-operative I/O i.e., parallel I/O to be performed from the compute nodes <ref> [1, 2, 3] </ref>. Many large-scale parallel applications require the use of parallel I/O to achieve high performance [4]. In this paper, we design models and experiments to examine how parallel I/O systems perform and scale.
Reference: [4] <author> Juan Rosario and Alok Choudhary. </author> <title> Highperformance I/O for massively parallel computers: Problems and Prospects. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 59-68, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: This enables high bandwidth co-operative I/O i.e., parallel I/O to be performed from the compute nodes [1, 2, 3]. Many large-scale parallel applications require the use of parallel I/O to achieve high performance <ref> [4] </ref>. In this paper, we design models and experiments to examine how parallel I/O systems perform and scale. We provide experimental results for parallel I/O scalability and performance on the Intel Paragon and the Thinking Machines CM-5.
Reference: [5] <author> Mark Henderson, Bill Nickless, and Rick Stevens. </author> <title> A scalable high-performance I/O system. </title> <booktitle> In Proceedings of Scalable High Performance Computing Conference, </booktitle> <address> SHPCC94, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Some of the present genera-tion parallel machines that provide such a system are the Intel Paragon, Thinking Machines CM-5 [1] and IBM SP-1 <ref> [5] </ref>. Both the Paragon and the CM-5 provide a special UNIX file system that gives applications high speed access to the parallel I/O system.
Reference: [6] <author> Thomas Kwan and Daniel Reed. </author> <title> Performance of the CM-5 scalable file system. </title> <booktitle> In Proceedings of International Conference on Supercomputing 94, </booktitle> <month> July </month> <year> 1994. </year> <note> Also accessible on the World Wide Web at http://bugle.cs.uiuc.edu/. </note>
Reference-contexts: MANCE of application output and actual input rates on the Maryland CM-5. Notice the performance drop for both input and output rates beyond 6MB 5 Related work Kwan and Reed <ref> [6] </ref> study the performance of the Scalable File System on the NCSA CM-5. Their motivation was to compare the performance of the CM-5 parallel I/O interfaces of CM-Fortran and C/CMMD. Their C/CMMD experiments are similar to ours. Our results on the CM-5 are preliminary but are comparable with theirs. <p> The actual read (6 MB/sec) and actual write (1.2 MB/sec) rates we measured on the IU Paragon are a lot lower than the rates they report for the Intel Touchstone Delta (also reported in <ref> [6] </ref>). . 6 Conclusions We identify two important data transfer rates for I/O: the application rate and the actual rate. The ap <p>- OUTPUT PERFORMANCE of the IU's Intel Paragon and the Maryland's CM-5. Both measurements are for 32 processors.
Reference: [7] <author> R Bordawekar, J.M. Del Rosario, and A Choudhary. </author> <title> Experimental performance evaluation of touchstone delta concurrent file system. </title> <booktitle> In Proceedings of International Conference on Supercomputing 93, </booktitle> <month> July </month> <year> 1993. </year>
Reference-contexts: Their motivation was to compare the performance of the CM-5 parallel I/O interfaces of CM-Fortran and C/CMMD. Their C/CMMD experiments are similar to ours. Our results on the CM-5 are preliminary but are comparable with theirs. Bordawekar, Rosario and Choudhary <ref> [7] </ref> present an experimental performance evaluation of the Touch- stone Delta Concurrent File System.
Reference: [8] <author> James C. French, Terrence W. Pratt, and Mriganka Das. </author> <title> Performance measurement of the con-current file system of the intel iPSC/2 hypercube. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 17 </volume> <pages> 115-123, </pages> <year> 1993. </year>
Reference: [9] <author> Alok Choudhary. </author> <title> Parallel I/O systems: Guest ed-itor's introduction. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 17 </volume> <pages> 1-3, </pages> <year> 1993. </year>
Reference: [10] <institution> The parallel i/o archive. </institution> <note> Available on the World Wide Web at http://www.cs.dartmouth.edu/pario.html. </note>
References-found: 10

