URL: http://www.cs.colostate.edu/~ftppub/TechReports/1998/tr98-103.ps.Z
Refering-URL: http://www.cs.colostate.edu/~ftppub/
Root-URL: 
Email: malaiya@cs.colostate.edu  
Phone: Phone: (970) 491-5792 Fax: (970) 491-2466  
Title: Antirandom Testing: Beyond Random Testing  
Author: ShenHui Wu Yashwant K. Malaiya* A.P. Jayasumana 
Web: WWW: http://www.cs.colostate.edu  
Address: Fort Collins, CO 80523  Fort Collins, CO 80523-1873  
Affiliation: Computer Science  Electrical Engineering Dept. *Computer Science Dept. Colorado State University  Computer Science Department Colorado State University  
Pubnum: Technical Report  Technical Report CS-98-103  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> P. Bardell and W. McAnney and J. Savir, </author> <title> Built-in Test for VLSI Pseudo-random Techniques, </title> <publisher> John Wiley and Sons, </publisher> <year> 1987. </year>
Reference-contexts: Further, in testing digital circuits, pseudo random test vectors are used. This results in a test vector which is a shifted version of the previous pattern, with one new bit based on a primitive polynomial <ref> [1] </ref>. Random testing does not exploit some information that is available in black-box testing environment. This information consists of the previous tests applied.
Reference: [2] <author> The Nemesis Manual, C. Hall, B. Chess, T. Larrabee and H. </author> <type> Manley, </type> <institution> Computer Engineering, University of California, Santa Cruze, </institution> <year> 1995. </year>
Reference-contexts: We have simulated several ISCAS85 combinational benchmark circuits using Nemesis, a software tool developed at University of California, Santa Cruz <ref> [2] </ref>. The basic characteristics of the simulated ISACAS85 combinational circuit are given in Ta- ble 3.
Reference: [3] <author> W. R. </author> <title> Hamming, Error Detecting and error Correction Codes, </title> <journal> Bell Sys. Tech. Journal, </journal> <month> April </month> <year> 1950, </year> <pages> pp. 147-160. </pages>
Reference-contexts: In this paper we use two specific criteria introduced below. Definition: Distance is a measure of how different two vectors t i and t j are. Here we use two measures of distance defined below. Definition: Hamming Distance (HD) <ref> [3] </ref> is the number of bits in which two binary vectors differ. It is not defined for vectors containing continuous values.
Reference: [4] <author> Carafe User's Manual, A. Jee, D. Dahle, C. Bazeghi and F. </author> <note> J. </note> <institution> Ferguson Computer Engineering, University of California, Santa Cruze, </institution> <year> 1996. </year>
Reference-contexts: We have applied the two new test pattern generation schemes to test bridging faults in the four ISCAS benchmark circuits. The bridging faults are identified by Carafe <ref> [4] </ref> by considering the layout information. Nemesis assumes that a bridging fault is being tested in the IDDQ test environment. If the two bridged nodes have opposite logic values then the bridging fault will cause a high value of IDDQ thus detecting the fault.
Reference: [5] <author> W. A. Geisel, </author> <title> Tutorial on Reed-Solomon Error Correction Coding, </title> <type> NASA Technical Memorandum 102162, </type> <year> 1990. </year>
Reference-contexts: With RS coding, only a fraction of the input combinations are code words, whereas with antirandom testing all combinations would eventually be applied, if one would choose to do so. Using RS codes has the advantage that algorithms and hardware designs for generation are already available <ref> [5] </ref>. Figure 3 shows an encoder shift register circuits for (15,9) RS code. In the output shift register part of Figure 3, LSS represents the least significant symbol, it is also the last byte transmitted. MSS represents the most significant symbol, corresponding to byte (n-1).
Reference: [6] <author> Y. K. Malaiya, </author> <title> Antirandom Testing: Getting the most out of black-box testing, </title> <booktitle> Proc. International Symposium On Software Reliability Engineering, </booktitle> <month> Oct. </month> <year> 1995, </year> <pages> pp. 86-95. </pages>
Reference-contexts: We extend the antirandom concept further by proposing a functional test generation scheme in which we find input vectors that would cause antirandom patterns at the output of a circuit. This scheme is evaluated on a popular ALU circuit. 2 Binary Antirandom Sequences Antirandom testing <ref> [6] </ref> is a black-box strategy like psuedo-random testing, meaning that it assumes no information about the internal implementation of the circuit. Here we start with formal definitions of the terms used and then examine construction of antirandom sequences. We assume that the input variables are all binary. <p> We can verify that all of these are also MCDATSs. A large number of experiments with construction of MHDATSs and MCDATSs have been done. Based on these, the following results can be stated <ref> [6] </ref>. Definition: If a sequence B is obtained by reordering the variables of sequence A, then B is a variable-order-variant (VOV) of A. Theorem 1: If a sequence B is variable-order-variant of a MHDATS (MCDATS) A, then B is also a MHDATS (MCDATS).
Reference: [7] <author> Y.K. Malaiya and S. Yang, </author> <title> The Coverage Problem for Random Testing, </title> <booktitle> Proc. International Test Conference, </booktitle> <month> October </month> <year> 1984, </year> <pages> pp. 237-245. </pages> <note> Test No. 1 3 5 7 15 25 55 75 105 Antirandom 4.524 38.05 71.09 78.91 88.88 91.75 97.13 98.55 99.63 Reed-solomon 4.524 51.34 69 72.71 82.17 91.97 98.85 99.15 99.23 Pseudo-0 4.524 29.18 37.98 45.83 68.21 84.11 97.09 98.21 99.13 Pseudo-1 18.77 27.43 45.62 56.03 73.30 84.69 97.62 99.21 99.75 Pseudo-2 31.34 49.26 54.50 57.85 65.47 87.73 98.01 98.35 99.17 Table 11: Bridging Fault Coverage for c499 14 </note>
Reference-contexts: Available evidence suggests that random testing may be a reasonable choice for obtaining a moderate degree of confidence, however it becomes inefficient when only hard to test faults remain <ref> [7] </ref>. Further, in testing digital circuits, pseudo random test vectors are used. This results in a test vector which is a shifted version of the previous pattern, with one new bit based on a primitive polynomial [1].
Reference: [8] <author> L. Nachman, K.K. Saluja, S.J. Upadhyaya and R. </author> <title> Reuse, A Novel Approach to Random Pattern Testing of Sequential Circuits IEEE Trans. </title> <booktitle> Computers, </booktitle> <month> January </month> <year> 1998, </year> <pages> pp. 125-134. </pages>
Reference-contexts: The sequential circuits are much less amenable to random testing because it takes a few clock periods for many faults to be detected. Pattern-holding based approaches, which have been proposed for random testing <ref> [8] </ref>, may be applicable for antirandom testing also. 13 Test No. 1 4 5 7 15 25 55 75 105 Antirandom 16.57 54.47 60.46 72.12 84.44 90.39 95.42 96.22 97.51 Reed-solomon 16.57 54.17 58.93 67.25 80.93 86.53 92.05 93.27 94.37 Pseudo-0 16.57 21.32 28.05 28.79 37.33 47.21 77.06 85.46 89.40 Pseudo-1
Reference: [9] <author> D. K. Pradhan and M. Chatterjee, </author> <title> GLFSR-A New Test Pattern Generation for BIST, </title> <booktitle> Proc. International Test Conference, 1994 pp. </booktitle> <pages> 481-490. </pages>
Reference-contexts: A black pixel indicates value 0, while the white pixel indicate value 1. The time progresses from top to bottom for each bit-map. There are several formal tests for randomness. Pradhan and Chatterjee <ref> [9] </ref> have shown that LFSR based sequences fail most of these tests. 5 Effectiveness of Antirandom and Psuedo-random Testing To compare the effectiveness of antirandom and Reed-Solomon sequences with psuedo-random tests generated using linear feedback shift registers, (LFSRs), a series of experiments has been performed.
Reference: [10] <author> I. Reed and G. Solomon, </author> <title> Polynomial Codes over Certain Finite Fiels, </title> <journal> Journal of The Society for Industrial and Applied Mathematics, </journal> <month> June, </month> <year> 1960. </year>
Reference-contexts: The error correction and detection codes used in communications and data storage applications can generate code words with appropriate minimum Hamming distances. Here we have chosen to use the Reed- Solomon (RS) error correction code <ref> [10] </ref> because of its minimum Hamming distance properties as another test generation scheme. A major difference between antirandom and RS based testing is that antirandom testing exploits the sequence in which the vectors are applied.
Reference: [11] <author> N. A. Touba and E. J. McCluskey, </author> <title> Altering A Pseudo-random Bit Sequence for Scan-based BIST, </title> <booktitle> Proc. International Test Conference 1996, </booktitle> <address> pp.167-175. </address>
Reference-contexts: So far we have considered only black-box testing which assumes that we do not have any structural information available. It is possible to generate antirandom sequences that can exploit some structural information thus further increasing coverage, just like weighted psuedo-random testing <ref> [11] </ref> We are developing methods for applying this approach for sequential circuits. The sequential circuits are much less amenable to random testing because it takes a few clock periods for many faults to be detected.
Reference: [12] <author> S. Wu, </author> <title> Effectiveness of Antirandom and Rood-Solomon Code based Testing, </title> <type> MS Thesis, </type> <institution> Electrical Engineering Dept, Colorado State University, </institution> <month> March 1, </month> <year> 1998. </year>
Reference: [13] <author> H. Yin, </author> <title> Test Data Generation and Evaluation for Antirandom Testing with Checkpointing MS Thesis, </title> <institution> Computer Science Dept., Colorado State University, </institution> <year> 1997. </year>
Reference-contexts: Step 2. Complement one of the columns and append the resulting vectors to first set of vectors obtained in Step 1. Here, it would be convenient to complement the variable added in Step 1. The above procedures have been implemented in a program called ATG <ref> [13] </ref>. It generates MCDATSs which are also MHDATSs.

References-found: 13

