URL: http://www.cs.wustl.edu/~schmidt/av.ps.gz
Refering-URL: http://www.cs.wustl.edu/~schmidt/TAO-status.html
Root-URL: 
Email: fsumedh,naga,schmidtg@cs.wustl.edu  
Title: The Design and Performance of a CORBA Audio/Video Streaming Service network bandwidth and processing power
Author: Sumedh Mungee, Nagarajan Surendran, Douglas C. Schmidt 
Keyword: CORBA-based Multimedia Streaming, QoS- enabled OO Middleware, Performance Measurements  
Note: Recent advances in  This work was supported in part by Boeing, CDI, DARPA contract 9701516, Lucent, Motorola, NSF grant NCR-9628218, Siemens, and US Sprint.  
Address: St. Louis, MO 63130, USA  
Affiliation: Department of Computer Science, Washington University  
Abstract: This paper has been submitted to the HICSS-32 Interna- tional Conference on System Sciences, minitrack on Multi- media DBMS and the WWW. It is available as a Washington University technical report #WUCS-98-15. Abstract This paper makes two contributions to the study of CORBA- based distributed multimedia streaming frameworks. First, it describes the design and performance of an implementation of the OMG audio/video (A/V) streaming model based on TAO, which is a real-time CORBA ORB. Second, it describes the design and performance of a distributed application that uses TAO's A/V streaming framework to establish and control MPEG video streams. Our experience with TAO's A/V streaming framework indicates that CORBA defines a flexible and efficient model for developing standards-based multimedia streaming applications. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> RealNetworks, </author> <note> Realvideo player. www.real.com, 1998. </note>
Reference-contexts: 1 Introduction 1.1 Motivation Traditional distributed object computing (DOC) middle- ware such as CORBA, DCOM, and Java RMI support request/response semantics for distributed applications. How- ever, an increasingly important class of applications require transfer of continuous media data streams. For instance, popular Internet-based streaming mechanisms, such as Realvideo <ref> [1] </ref> and Vxtreme [2], allow suppliers to transmit continuous streams of audio and video packets to consumers. Likewise, non-continuous media applications, such as medical imaging servers [3] and network management agents [4], employ streaming to transfer bulk data efficiently from suppliers to consumers. <p> We achieved this decoupling via the Factory Method and Abstract Factory patterns [17], as described in Section 2.2.1. Flexibility in transport protocol: A streaming service may need to select from a variety of transport protocols. For instance, an Internet-based streaming application like Realvideo <ref> [1] </ref> may use the UDP protocol, whereas a local intranet video- conferencing tool [20] might prefer the higher bandwidth offered by native high-speed ATM protocols. Thus, it is essential that a streaming service support a range of transport protocols. <p> One of the most popular Internet-based streaming mechanism is Realvideo <ref> [1] </ref>, from Real Networks. Like the MPEG application described in Section 3, the Realvideo system uses the UDP protocol to send A/V packets from the supplier to the consumer. How- ever, the Realvideo application uses proprietary stream establishment and control protocols, as well as a proprietary audio and video format.
Reference: [2] <author> Vxtreme, </author> <note> Vxtreme player. www.microsoft.com/netshow/vxtreme/, 1998. </note>
Reference-contexts: How- ever, an increasingly important class of applications require transfer of continuous media data streams. For instance, popular Internet-based streaming mechanisms, such as Realvideo [1] and Vxtreme <ref> [2] </ref>, allow suppliers to transmit continuous streams of audio and video packets to consumers. Likewise, non-continuous media applications, such as medical imaging servers [3] and network management agents [4], employ streaming to transfer bulk data efficiently from suppliers to consumers. <p> Like the MPEG application described in Section 3, the Realvideo system uses the UDP protocol to send A/V packets from the supplier to the consumer. How- ever, the Realvideo application uses proprietary stream establishment and control protocols, as well as a proprietary audio and video format. Vxtreme <ref> [2] </ref> from Microsoft is another popular streaming mechanism, which is similar to Realvideo. IONA Inc. is developing Orbix MX [27], which is an implementation of the CORBA A/V streaming specification.
Reference: [3] <author> J. Hu, S. Mungee, and D. C. Schmidt, </author> <title> Principles for Developing and Measuring High-performance Web Servers over ATM, </title> <booktitle> in Proceeedings of INFOCOM '98, </booktitle> <month> March/April </month> <year> 1998. </year>
Reference-contexts: For instance, popular Internet-based streaming mechanisms, such as Realvideo [1] and Vxtreme [2], allow suppliers to transmit continuous streams of audio and video packets to consumers. Likewise, non-continuous media applications, such as medical imaging servers <ref> [3] </ref> and network management agents [4], employ streaming to transfer bulk data efficiently from suppliers to consumers. Stringent performance requirements for streaming data often preclude DOC middleware from being used as the transport mechanism for multimedia applications [5]. <p> Many performance-sensitive multimedia applications require fine-grained control over the strategies governing the creation of stream components. For instance, our past studies of Web server performance <ref> [18, 3] </ref> motivate the need to support adaptive concurrency strategies to develop efficient and scalable streaming applications.
Reference: [4] <author> D. C. Schmidt and T. Suda, </author> <title> An Object-Oriented Framework for Dynamically Configuring Extensible Distributed Communication Systems, </title> <journal> IEE/BCS Distributed Systems Engineering Journal (Special Issue on Configurable Distributed Systems), </journal> <volume> vol. 2, </volume> <pages> pp. 280293, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: For instance, popular Internet-based streaming mechanisms, such as Realvideo [1] and Vxtreme [2], allow suppliers to transmit continuous streams of audio and video packets to consumers. Likewise, non-continuous media applications, such as medical imaging servers [3] and network management agents <ref> [4] </ref>, employ streaming to transfer bulk data efficiently from suppliers to consumers. Stringent performance requirements for streaming data often preclude DOC middleware from being used as the transport mechanism for multimedia applications [5].
Reference: [5] <author> I. Pyarali, T. H. Harrison, and D. C. Schmidt, </author> <title> Design and Performance of an Object-Oriented Framework for HighPerformance Electronic Medical Imaging, </title> <booktitle> USENIX Computing Systems, </booktitle> <volume> vol. 9, </volume> <month> November/December </month> <year> 1996. </year>
Reference-contexts: Likewise, non-continuous media applications, such as medical imaging servers [3] and network management agents [4], employ streaming to transfer bulk data efficiently from suppliers to consumers. Stringent performance requirements for streaming data often preclude DOC middleware from being used as the transport mechanism for multimedia applications <ref> [5] </ref>. For instance, inefficient CORBA Internet Inter-ORB Protocol (IIOP) [6] implementations often perform excessive data-copying and memory allocation per-request, which increases packet latency [7]. Likewise, inefficient marshaling/demarshaling in DOC middleware decreases streaming data throughput [8].
Reference: [6] <author> A. Gokhale and D. C. Schmidt, </author> <title> Principles for Optimizing CORBA Internet Inter-ORB Protocol Performance, </title> <booktitle> in Hawaiian International Conference on System Sciences, </booktitle> <month> January </month> <year> 1998. </year>
Reference-contexts: Stringent performance requirements for streaming data often preclude DOC middleware from being used as the transport mechanism for multimedia applications [5]. For instance, inefficient CORBA Internet Inter-ORB Protocol (IIOP) <ref> [6] </ref> implementations often perform excessive data-copying and memory allocation per-request, which increases packet latency [7]. Likewise, inefficient marshaling/demarshaling in DOC middleware decreases streaming data throughput [8].
Reference: [7] <author> A. Gokhale and D. C. Schmidt, </author> <title> Measuring and Optimizing CORBA Latency and Scalability Over High-speed Networks, </title> <journal> Transactions on Computing, </journal> <volume> vol. 47, no. 4, </volume> <year> 1998. </year>
Reference-contexts: Stringent performance requirements for streaming data often preclude DOC middleware from being used as the transport mechanism for multimedia applications [5]. For instance, inefficient CORBA Internet Inter-ORB Protocol (IIOP) [6] implementations often perform excessive data-copying and memory allocation per-request, which increases packet latency <ref> [7] </ref>. Likewise, inefficient marshaling/demarshaling in DOC middleware decreases streaming data throughput [8]. If the design and performance of DOC middleware can be improved, however, the stream establishment and control components of distributed multimedia applications can benefit greatly from the portability and flexibility provided by middle- ware.
Reference: [8] <author> A. Gokhale and D. C. Schmidt, </author> <title> Measuring the Performance of Communication Middleware on High-Speed Networks, </title> <booktitle> in Proceedings of SIGCOMM '96, </booktitle> <address> (Stanford, CA), </address> <pages> pp. 306317, </pages> <publisher> ACM, </publisher> <month> August </month> <year> 1996. </year>
Reference-contexts: For instance, inefficient CORBA Internet Inter-ORB Protocol (IIOP) [6] implementations often perform excessive data-copying and memory allocation per-request, which increases packet latency [7]. Likewise, inefficient marshaling/demarshaling in DOC middleware decreases streaming data throughput <ref> [8] </ref>. If the design and performance of DOC middleware can be improved, however, the stream establishment and control components of distributed multimedia applications can benefit greatly from the portability and flexibility provided by middle- ware. <p> Therefore, the throughput obtained is nearly identical to the ideal TCP/socket case for all buffer sizes. These results illustrate that using the ORB as the transport layer can cause a significant performance overhead, due to overheads such as dynamic memory allocation, data- copying, and marshaling/demarshaling <ref> [8] </ref>. For all the buffer sizes, the throughput obtained by TCP, and the stream established using the A/V service is higher than the stream using the ORB.
Reference: [9] <institution> Object Management Group, Control and Management of A/V Streams specification, OMG Document telecom/97-05-07 ed., </institution> <month> October </month> <year> 1997. </year>
Reference-contexts: To address these issues, the Object Management Group (OMG) has defined a specification for the control and management of A/V streams <ref> [9] </ref>, based on the CORBA reference model [10]. The CORBA A/V streaming specification defines a model for implementing an open distributed multimedia streaming framework. This model integrates (1) well-defined modules, interfaces, and semantics for stream establishment and control with (2) efficient transport-level mechanisms for data trans <p>- 1 mission. <p> It also describes the design challenges facing developers of A/V streaming frameworks and explains how TAO's A/V streaming service solves these challenges. 2.1 Overview of the OMG Audio/Video Streaming Specification The OMG A/V streams specification <ref> [9] </ref> presents an architectural model and OMG IDL interfaces for building distributed multimedia streaming frameworks. <p> Thus, in the PLAYING state, the data component plays the audio and video frames in chronological order. Future implementations of the data component in our MPEG player application will support multiple encoding protocols via the simple flow protocol (SFP) <ref> [9] </ref>. SFP encoding encapsulates frames of various protocols within an SFP frame. It provides standard framing and sequence numbering mechanisms. SFP uses the CORBA CDR encoding mechanism to encode frame headers and uses a simple credit-based flow control mechanism described in [9]. 3.2 Consumer Architecture The role of the consumer is <p> multiple encoding protocols via the simple flow protocol (SFP) <ref> [9] </ref>. SFP encoding encapsulates frames of various protocols within an SFP frame. It provides standard framing and sequence numbering mechanisms. SFP uses the CORBA CDR encoding mechanism to encode frame headers and uses a simple credit-based flow control mechanism described in [9]. 3.2 Consumer Architecture The role of the consumer is to read audio and video frames off the network, decode them, and play them synchronously. The audio and video servers stream the frames separately, and A/V frame synchronization is performed on consumer.
Reference: [10] <author> Object Management Group, </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <editor> 2.2 ed., </editor> <month> Feb. </month> <year> 1998. </year>
Reference-contexts: To address these issues, the Object Management Group (OMG) has defined a specification for the control and management of A/V streams [9], based on the CORBA reference model <ref> [10] </ref>. The CORBA A/V streaming specification defines a model for implementing an open distributed multimedia streaming framework. This model integrates (1) well-defined modules, interfaces, and semantics for stream establishment and control with (2) efficient transport-level mechanisms for data trans <p>- 1 mission.
Reference: [11] <author> D. C. Schmidt, D. L. Levine, and S. Mungee, </author> <title> The Design and Performance of Real-Time Object Request Brokers, </title> <journal> Computer Communications, </journal> <volume> vol. 21, </volume> <pages> pp. 294324, </pages> <month> Apr. </month> <year> 1998. </year>
Reference-contexts: In addition to defining standard stream establish-ment and control mechanisms, the OMG specification allows distributed multimedia applications to leverage the portability and flexibility provided by DOC middleware. Our prior research on CORBA middleware has explored several dimensions of real-time ORB endsystem design including static <ref> [11] </ref> and dynamic [12] real-time scheduling, real-time request demultiplexing [13], real-time event processing [14], real-time I/O subsystem integration [15], and the real-time performance of various commercial and research ORBs [16] over ATM networks. <p> This paper focuses on a previously unexamined point in the real-time ORB endsystem design space: the design and performance of the CORBA A/V streaming service specification. 1.2 Design Challenges We have developed the first freely available implementation of the OMG A/V streaming model using TAO <ref> [11] </ref>, which is a real-time CORBA ORB that is ported to a wide range of OS platforms. <p> framework itself, in each state must be well-defined, To address this issue we applied the State Pattern [17], as described in Section 3.1. 1.3 Paper Organization The remainder of this paper is organized as follows: Sec- tion 2 describes our implementation of the OMG A/V streaming service specification using TAO <ref> [11] </ref>, which is a real-time CORBA ORB; Section 3 outlines the design of an MPEG streaming application that uses TAO's A/V streaming service; 2 Section 4 analyzes the performance results of TAO's A/V streaming service over a high-speed ATM network; Section 5 summarizes related work; and Section 6 presents concluding remarks. <p> In this case, sockets and TCP were the transport mechanism. This is the ideal case since there is no additional ORB-related or presentation layer overhead. * Via the ORB i.e., the throughput obtained by a stream that used an octet stream passed through the TAO <ref> [11] </ref> CORBA ORB. In this case, the IIOP data path was the transport mechanism. We measured the throughput obtained by varying the buffer size of the sender, i.e., the number of bytes written by the supplier in one write system call.
Reference: [12] <author> C. D. Gill, D. L. Levine, and D. C. Schmidt, </author> <title> Evaluating Strategies for Real-Time CORBA Dynamic Scheduling, </title> <booktitle> in submitted to the Real-time Systems Symposium, IEEE, </booktitle> <month> Dec. </month> <year> 1998. </year>
Reference-contexts: In addition to defining standard stream establish-ment and control mechanisms, the OMG specification allows distributed multimedia applications to leverage the portability and flexibility provided by DOC middleware. Our prior research on CORBA middleware has explored several dimensions of real-time ORB endsystem design including static [11] and dynamic <ref> [12] </ref> real-time scheduling, real-time request demultiplexing [13], real-time event processing [14], real-time I/O subsystem integration [15], and the real-time performance of various commercial and research ORBs [16] over ATM networks.
Reference: [13] <author> A. Gokhale and D. C. Schmidt, </author> <title> Evaluating the Performance of Demultiplexing Strategies for Real-time CORBA, </title> <booktitle> in Proceedings of GLOBECOM '97, </booktitle> <address> (Phoenix, AZ), </address> <publisher> IEEE, </publisher> <month> November </month> <year> 1997. </year>
Reference-contexts: Our prior research on CORBA middleware has explored several dimensions of real-time ORB endsystem design including static [11] and dynamic [12] real-time scheduling, real-time request demultiplexing <ref> [13] </ref>, real-time event processing [14], real-time I/O subsystem integration [15], and the real-time performance of various commercial and research ORBs [16] over ATM networks.
Reference: [14] <author> T. H. Harrison, D. L. Levine, and D. C. Schmidt, </author> <title> The Design and Performance of a Real-time CORBA Event Service, </title> <booktitle> in Proceedings of OOPSLA '97, </booktitle> <address> (Atlanta, GA), </address> <publisher> ACM, </publisher> <month> October </month> <year> 1997. </year>
Reference-contexts: Our prior research on CORBA middleware has explored several dimensions of real-time ORB endsystem design including static [11] and dynamic [12] real-time scheduling, real-time request demultiplexing [13], real-time event processing <ref> [14] </ref>, real-time I/O subsystem integration [15], and the real-time performance of various commercial and research ORBs [16] over ATM networks.
Reference: [15] <author> D. C. Schmidt, R. Bector, D. Levine, S. Mungee, and G. Parulkar, </author> <title> An ORB Endsystem Architecture for Statically Scheduled Real-time Applications, </title> <booktitle> in Proceedings of the Workshop on Middleware for Real-Time Systems and Services, </booktitle> <address> (San Francisco, CA), </address> <publisher> IEEE, </publisher> <month> December </month> <year> 1997. </year> <month> 13 </month>
Reference-contexts: Our prior research on CORBA middleware has explored several dimensions of real-time ORB endsystem design including static [11] and dynamic [12] real-time scheduling, real-time request demultiplexing [13], real-time event processing [14], real-time I/O subsystem integration <ref> [15] </ref>, and the real-time performance of various commercial and research ORBs [16] over ATM networks.
Reference: [16] <author> D. C. Schmidt, S. Mungee, S. Flores-Gaitan, and A. Gokhale, </author> <title> Alleviating Priority Inversion and Non-determinism in Realtime CORBA ORB Core Architectures, </title> <booktitle> in Proceedings of the Fourth IEEE Real-Time Technology and Applications Symposium, </booktitle> <address> (San Francisco, CA), </address> <publisher> IEEE, </publisher> <month> December </month> <year> 1997. </year>
Reference-contexts: Our prior research on CORBA middleware has explored several dimensions of real-time ORB endsystem design including static [11] and dynamic [12] real-time scheduling, real-time request demultiplexing [13], real-time event processing [14], real-time I/O subsystem integration [15], and the real-time performance of various commercial and research ORBs <ref> [16] </ref> over ATM networks.
Reference: [17] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides, </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software. </title> <address> Reading, MA: </address> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: In addition to implementing the components defined by the OMG specification, TAO's A/V streaming service uses patterns <ref> [17] </ref> to resolve the following key design challenges that arise when developing distributed multimedia streaming frameworks: Flexibility in stream endpoint creation strategies: The OMG specification defines the interfaces and roles of stream components. Many performance-sensitive multimedia applications require fine-grained control over the strategies governing the creation of stream components. <p> To achieve a high degree of flexibility, therefore, our A/V streaming service design decouples the behavior of stream components from the strategies governing their creation. We achieved this decoupling via the Factory Method and Abstract Factory patterns <ref> [17] </ref>, as described in Section 2.2.1. Flexibility in transport protocol: A streaming service may need to select from a variety of transport protocols. <p> Another design challenge, therefore, is to define stream establishment components that can work with a variety of transport endpoints. To resolve this challenge, we applied the Strat- egy pattern <ref> [17] </ref>, as explained in Section 2.2.5. Flexibility in stream control interfaces: An A/V streaming framework must provide flexible mechanisms that allow developers to define and use different operations for different streams. For instance, a video application typically supports a variety of operations, such as play, stop and rewind. <p> Thus, an important design challenge for developers is designing flexible applications whose states can be extended. In addition, the behavior of supplier/consumer applications, and the A/V streaming framework itself, in each state must be well-defined, To address this issue we applied the State Pattern <ref> [17] </ref>, as described in Section 3.1. 1.3 Paper Organization The remainder of this paper is organized as follows: Sec- tion 2 describes our implementation of the OMG A/V streaming service specification using TAO [11], which is a real-time CORBA ORB; Section 3 outlines the design of an MPEG streaming application that <p> We are enhancing TAO's A/V streaming framework to support other MMDevice concurrency strategies, such as a thread-based strategy that creates new stream endpoints to run in separate threads within the same process. In TAO's A/V streaming service, the MMDevice uses the Abstract Factory pattern <ref> [17] </ref> to decouple (1) the creation strategy of the stream endpoint and virtual device from (2) the concrete classes that define it. Thus, applications that use the MMDevice can subclass both the strategies described above, as well as the stream endpoint and the virtual device that are created. <p> For instance, a stream that uses UDP as the transport protocol will use a host name and a port number to identify its StreamEndpoint. TAO's A/V streaming service implementation of the StreamEndpoint uses patterns, such as Double Dispatch- ing and Template Method <ref> [17] </ref>, to allow applications to define and exchange transport-level parameters flexibly. <p> To provide a flexible design to achieve these requirements, the control component is implemented using the State pattern <ref> [17] </ref>. This implementation is shown in Figure 12. The Media Controller has a state object pointer. The object being pointed to by the Media Controller's state pointer represents the current state. <p> Enhancing an existing A/V streaming application to use CORBA was a key design challenge. By applying patterns, such as the State, Strategy, <ref> [17] </ref> and the Reactor [19], we found it was much easier to address these design issues. Thus, the use of patterns helped us rework the architecture of an existing MPEG A/V player and make it more amenable to a distributed technology such as CORBA.
Reference: [18] <author> J. Hu, I. Pyarali, and D. C. Schmidt, </author> <title> Measuring the Impact of Event Dispatching and Concurrency Models on Web Server Performance Over High-speed Networks, </title> <booktitle> in Proceedings of the 2 nd Global Internet Conference, IEEE, </booktitle> <month> November </month> <year> 1997. </year>
Reference-contexts: Many performance-sensitive multimedia applications require fine-grained control over the strategies governing the creation of stream components. For instance, our past studies of Web server performance <ref> [18, 3] </ref> motivate the need to support adaptive concurrency strategies to develop efficient and scalable streaming applications.
Reference: [19] <author> D. C. Schmidt, </author> <title> Reactor: An Object Behavioral Pattern for Concurrent Event Demultiplexing and Event Handler Dispatching, in Pattern Languages of Program Design (J. </title> <editor> O. Coplien and D. C. Schmidt, </editor> <booktitle> eds.), </booktitle> <pages> pp. 529545, </pages> <address> Reading, MA: AddisonWesley, </address> <year> 1995. </year>
Reference-contexts: Other types of applications required different implementations, however. For example, the consumer- side of our MPEG application benefitted from the creation of reactive <ref> [19] </ref> suppliers that contain all related endpoints within a single process. To achieve a high degree of flexibility, therefore, our A/V streaming service design decouples the behavior of stream components from the strategies governing their creation. <p> Reactive strategy: In this strategy, endpoint objects for each new stream are created in the same process as the factory, as shown in Figure 5. This means that a single process handles all the simultaneous connections reactively <ref> [19] </ref>. This strategy is useful for applications that dedicate one process to control multiple streams. For instance, the consumer of the MPEG A/V player application described in Section 3.2 creates the video and audio endpoints in the same process using this strategy in order to minimize synchronization overhead. <p> Enhancing an existing A/V streaming application to use CORBA was a key design challenge. By applying patterns, such as the State, Strategy, [17] and the Reactor <ref> [19] </ref>, we found it was much easier to address these design issues. Thus, the use of patterns helped us rework the architecture of an existing MPEG A/V player and make it more amenable to a distributed technology such as CORBA.
Reference: [20] <author> D. D. et al., Vaudeville: </author> <title> A High Performance, Voice Activated Teleconferencing Application, </title> <institution> Department of Computer Science, </institution> <type> Technical Report WUCS-96-18, </type> <institution> Washington University, St. Louis, </institution> <month> June </month> <year> 1996. </year>
Reference-contexts: Flexibility in transport protocol: A streaming service may need to select from a variety of transport protocols. For instance, an Internet-based streaming application like Realvideo [1] may use the UDP protocol, whereas a local intranet video- conferencing tool <ref> [20] </ref> might prefer the higher bandwidth offered by native high-speed ATM protocols. Thus, it is essential that a streaming service support a range of transport protocols. The OMG streaming service makes no assumptions about the transport protocol used for data streaming.
Reference: [21] <author> International Organisation for Standardisation, </author> <title> Coding Of Moving Pictures And Audio For Digital Storage Media At Up To About 1.5 Mbit/s, </title> <year> 1993. </year>
Reference-contexts: There is typically one MMDevice per physical or logical device. The MMDevice encapsulates the device-specific parameters of a multimedia device, as shown in Figure 3. For in <p>- stance, a particular device might support MPEG-1 <ref> [21] </ref> compression or ULAW audio [22]. Such parameters are termed properties of the MMDevice. Properties can be associated with the MMDevice using the CORBA Property Service [23], which is described in Appendix B. <p> This application is an enhanced version of a non- CORBA MPEG player developed at the Oregon Graduate In- stitute [25]. Our application plays movies using the MPEG-1 video format <ref> [21] </ref> and the Sun ULAW audio format [22]. Fig- ure 9 shows the architecture of our A/V streaming application. The MPEG player application uses a supplier/consumer design implemented using TAO. The consumer locates the supplier using the CORBA Naming Service [26].
Reference: [22] <author> Sun Microsystems, Inc., </author> <title> Sun Audio File Format, </title> <year> 1992. </year>
Reference-contexts: There is typically one MMDevice per physical or logical device. The MMDevice encapsulates the device-specific parameters of a multimedia device, as shown in Figure 3. For in <p>- stance, a particular device might support MPEG-1 [21] compression or ULAW audio <ref> [22] </ref>. Such parameters are termed properties of the MMDevice. Properties can be associated with the MMDevice using the CORBA Property Service [23], which is described in Appendix B. The MMDevice is an endpoint factory, i.e., it is responsible for creating new endpoints for new stream connections. <p> This application is an enhanced version of a non- CORBA MPEG player developed at the Oregon Graduate In- stitute [25]. Our application plays movies using the MPEG-1 video format [21] and the Sun ULAW audio format <ref> [22] </ref>. Fig- ure 9 shows the architecture of our A/V streaming application. The MPEG player application uses a supplier/consumer design implemented using TAO. The consumer locates the supplier using the CORBA Naming Service [26].
Reference: [23] <institution> Object Management Group, Property Service Specification, 1.0 ed., </institution> <month> July </month> <year> 1996. </year>
Reference-contexts: For in <p>- stance, a particular device might support MPEG-1 [21] compression or ULAW audio [22]. Such parameters are termed properties of the MMDevice. Properties can be associated with the MMDevice using the CORBA Property Service <ref> [23] </ref>, which is described in Appendix B. The MMDevice is an endpoint factory, i.e., it is responsible for creating new endpoints for new stream connections. <p> The VDev object represents device-specific parameters such as compression format or frame rate. Likewise, the MediaCtrl interface is device-specific since different devices support different control interfaces. Therefore, the MediaCtrl is associated with the VDev object using the Property Service <ref> [23] </ref>. There is typically one MediaCtrl per stream. In some cases, however, the application developer might choose to control multiple streams using the same MediaCtrl.
Reference: [24] <author> T. Harrison and D. C. Schmidt, </author> <title> Thread-Specific Storage: A Pattern for Reducing Locking Overhead in Concurrent Programs, </title> <booktitle> in OOPSLA Workshop on Design Patterns for Concurrent, Parallel, and Distributed Systems, ACM, </booktitle> <month> October </month> <year> 1995. </year>
Reference-contexts: For instance, by default, the reactive strategy creates new stream endpoints using dynamic allocation, e.g., via the new operator in C++. Appli- cations can override this behavior via subclassing so they can allocate stream endpoints using other allocation techniques, such as thread-specific storage <ref> [24] </ref> or special framebuffers. 2.2.2 Virtual Device (VDev) The virtual device (VDev) component is created by the MMDevice in response to a request for a new stream connection. There is one VDev per stream. The VDev is used by 4 the application to define its response to configure requests.
Reference: [25] <author> S. Chen, C. Pu, R. Staehli, C. Cowan, and J. Walpole, </author> <title> A Distributed Real-Time MPEG Video Audio Player, </title> <booktitle> in Fifth International Workshop on Network and Operating System Support of Digital Audio and Video, </booktitle> <month> Apr. </month> <year> 1995. </year>
Reference-contexts: This application is an enhanced version of a non- CORBA MPEG player developed at the Oregon Graduate In- stitute <ref> [25] </ref>. Our application plays movies using the MPEG-1 video format [21] and the Sun ULAW audio format [22]. Fig- ure 9 shows the architecture of our A/V streaming application. The MPEG player application uses a supplier/consumer design implemented using TAO. <p> The audio and video servers stream the frames separately, and A/V frame synchronization is performed on consumer. Figure 14 depicts the key components in the consumer architecture: The original MPEG consumer <ref> [25] </ref> used a process-based 9 concurrency architecture. Our CORBA-based consumer main-tain this architecture to minimize changes to the code. Sepa- rate processes are used to do the buffering, decoding, and playback, as explained next: 1.
Reference: [26] <institution> Object Management Group, </institution> <month> CORBAServices: </month> <title> Common Object Services Specification, </title> <note> Revised Edition, </note> <editor> 97-12-02 ed., </editor> <month> Nov. </month> <year> 1997. </year>
Reference-contexts: Our application plays movies using the MPEG-1 video format [21] and the Sun ULAW audio format [22]. Fig- ure 9 shows the architecture of our A/V streaming application. The MPEG player application uses a supplier/consumer design implemented using TAO. The consumer locates the supplier using the CORBA Naming Service <ref> [26] </ref>. Future versions of our MPEG application will use the Trading Service [26] to find suppliers that match the consumer's requirements. For instance, a consumer might want to locate a supplier that has a particular movie or a supplier with the least number of consumers currently connected to it. <p> Fig- ure 9 shows the architecture of our A/V streaming application. The MPEG player application uses a supplier/consumer design implemented using TAO. The consumer locates the supplier using the CORBA Naming Service <ref> [26] </ref>. Future versions of our MPEG application will use the Trading Service [26] to find suppliers that match the consumer's requirements. For instance, a consumer might want to locate a supplier that has a particular movie or a supplier with the least number of consumers currently connected to it.
Reference: [27] <author> IONA, </author> <note> IONA Orbix MX. www.iona.com, 1998. </note>
Reference-contexts: How- ever, the Realvideo application uses proprietary stream establishment and control protocols, as well as a proprietary audio and video format. Vxtreme [2] from Microsoft is another popular streaming mechanism, which is similar to Realvideo. IONA Inc. is developing Orbix MX <ref> [27] </ref>, which is an implementation of the CORBA A/V streaming specification. The key features of Orbix MX are similar to TAO's implementation of the A/V Streaming service, i.e., support for multiple transport protocols, flexible stream controls, and support for multiple concurrency strategies while creating stream endpoints.
Reference: [28] <author> T. Fitzpatrick, G. Blair, G. Coulson, N. Davies, and P. Robin, </author> <title> Supporting Adaptive Multimedia Applications through Open Bindings, </title> <booktitle> in International Conference on Configurable Distributed Systems (ICCDS '98), </booktitle> <month> May </month> <year> 1998. </year>
Reference-contexts: The Distributed Multimedia Research Group at the Univer- sity of Lancaster is working on standardization of Open Dis- tributed Systems using CORBA middleware. Towards this goal, they propose the explicit open bindings concept <ref> [28] </ref>, which is a mechanism using which application developers can explicitly set up an additional transport connection between two CORBA objects. This connection can then be used for streaming data. 6 Concluding Remarks The demand for high quality multimedia streaming is growing, both over the Internet and for intranets.
Reference: [29] <author> S. Vinoski, </author> <title> CORBA: Integrating Diverse Applications Within Distributed Heterogeneous Environments, </title> <journal> IEEE Communications Magazine, </journal> <volume> vol. 14, </volume> <month> February </month> <year> 1997. </year>
Reference: [30] <author> E. Eide, K. Frei, B. Ford, J. Lepreau, and G. Lindstrom, </author> <month> Flick: </month>
References-found: 30

