URL: ftp://osm7.cs.byu.edu/papers/ObjMitosis-IWOOOS93.ps
Refering-URL: http://osm7.cs.byu.edu/Papers.html
Root-URL: 
Title: Position Paper Object Mitosis: A Systematic Approach To Splitting Objects Across Subsystems  
Author: Stephen W. Clyde 
Address: Logan, UT 84322-4205  
Affiliation: Computer Science Department Utah State University  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Clyde, S., D. W. Embley, and S. N. Woodfield, "Object-class Congruency: </author> <title> Improving the Quality of Classification Abstractions in Object-oriented Software Systems", </title> <type> Technical Report, </type> <institution> Brigham Young University, Provo, Utah, </institution> <year> 1993. </year>
Reference-contexts: However, we learned the importance of a good object classification scheme. We discovered that some schemes led to high levels of component reuse and facilitated reliable, maintainable, and extensible implementations, while others did not. One difference between successful and unsuccessful schemes was that successful schemes contained congruent classes <ref> [1] </ref>. Informally, a class is congruent if its definition matches the common properties of its intended members. Another difference was that successful schemes had loosely coupled subsystems.
Reference: [2] <author> Embley, D. W., B. D. Kurtz, and S. N. Woodfield, </author> <title> Object-oriented System Analysis: A Model-driven Approach, </title> <publisher> Prentice Hall, </publisher> <month> January, </month> <year> 1992. </year>
Reference-contexts: Here, we address one of these problems, namely the decomposition of a system into objects, or more precisely, classes of objects. In a recent advanced course on operating systems design taught by the author, students used Object-oriented Systems Analysis (OSA) <ref> [2] </ref> to analysis and design a multitasking operating system called MTOS. They implemented their designs in C ++ on Intel 386-based machines. For the most part, the projects were very successful and demonstrated the viability of using object orientation for operating system development.
Reference: [3] <author> Meyer, B., </author> <title> "Systematic Concurrent Object-Oriented Programming", </title> <journal> Communications of the ACM, </journal> <volume> Vol. 36, No. 9, </volume> <month> September, </month> <year> 1993, </year> <pages> pp. 56-80. </pages>
Reference-contexts: 1. Introduction Operating system development lends itself to the use of object-oriented methods. There are many striking similarities between key operating system and object-oriented concepts. For example, some obvious similarities between processes and objects include: identity, local data, persistence, encapsulated behavior, and communication via message passing <ref> [3] </ref>. These similarities, however, do not imply that developing an operating system using object orientation is any easier than other complex applications. In fact, object-oriented operating system design has some interesting modeling problems that can be difficult.
References-found: 3

