URL: ftp://ftp.cs.unc.edu/pub/users/krishnas/thesis/thesis.ps.gz
Refering-URL: http://www.cs.unc.edu/~krishnas/dissertation.html
Root-URL: http://www.cs.unc.edu
Title: Efficient and Accurate Boundary Evaluation Algorithms for Boolean Combinations of Sculptured Solids  
Author: by Shankar Krishnan Dr. Gregory Turk, Reader Dr. David Eberly, Reader 
Degree: A dissertation submitted to the faculty of the  in partial fulfillment of the requirements for the degree of Doctor of Philosophy in the  Approved by: Dr. Dinesh Manocha, Advisor  
Date: 1997  
Address: Chapel Hill  Chapel Hill  
Affiliation: University of North Carolina at  Department of Computer Science.  
Abstract-found: 0
Intro-found: 1
Reference: [AB88a] <author> S.S. Abhyankar and C. Bajaj. </author> <title> Automatic parametrizations of rational curves and surfaces iii: Algebraic plane curves. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 5 </volume> <pages> 309-321, </pages> <year> 1988. </year>
Reference-contexts: In general the problem of computing the singularities in the intersection curve of high degree surfaces in floating point arithmetic can be numerically unstable [FR87]. Algorithms based on exact arithmetic and birational transformations have been proposed in <ref> [AB88a] </ref>. However they are computationally very slow. Our algorithms are based on the local geometry of the curve and the properties of the representation M (u; v). The algorithm proposed here assumes that all the singular points on the curve are geometrically isolated and well apart. <p> Most of these trimming curves correspond to intersection curves between two surfaces. Therefore, these curves are typically algebraic curves that do not admit a rational parametrization <ref> [AB88a] </ref>. We represent these curve segments (c i ) by their algebraic equation (for accuracy), and a piecewise linear approximation (for efficient computation) and the two 116 endpoints (p i and p i+1 ).
Reference: [AB88b] <author> S.S. Abhyankar and C. Bajaj. </author> <title> Computations with algebraic curves. </title> <booktitle> In Lecture Notes in Computer Science, </booktitle> <volume> volume 358, </volume> <pages> pages 279-284. </pages> <publisher> Springer Verlag, </publisher> <year> 1988. </year>
Reference-contexts: Every algebraic space curve is birationally equivalent to an algebraic plane curve and the latter can be computed using Grobner bases [Buc89] and resultants. Given an algebraic plane curve, techniques for desingularization based on quadratic transformations are given in <ref> [Wal50, Abh90, AB88b] </ref>. An excellent introduction to desingularization techniques is provided in [Abh90, Hof89]. However, the resulting algorithm can be exponential in the degree of the curve. Algorithms based on Collins' cylindrical algebraic decomposition (CAD), [Col75, ACM84], have been used for evaluating all components of algebraic curves [Arn83, SS83].
Reference: [ABB + 92] <author> E. Anderson, Z. Bai, C. Bischof, J. Demmel, J. Dongarra, J. Du Croz, A. Green-baum, S. Hammarling, and D. Sorensen. </author> <title> LAPACK User's Guide, Release 1.0. </title> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1992. </year>
Reference-contexts: Iterations [0.0,1.0] 0.5 0.5976 0.3367 0.5738 9 [0.0,0.1802] 0.0901 0.1210 2.3133 0.4864 7 [0.2121,0.3923] 0.3022 0.2900 0.1880 -1.0303 4 [0.6076,1.0] 0.8038 0.7973 0.2332 0.8176 4 Table 3.2: Algebraic pruning on the curve and surface shown in Figure 3.5 3.3 Performance and Comparison We have implemented the algorithm using LAPACK routines <ref> [ABB + 92] </ref>. The overall algorithm has been applied to many cases of parametric curve intersection, algebraic curve intersection, intersection of a ray with a parametric surface and curve-surface intersections. In each case, the problem is reduced to an eigenvalue problem and we compute the eigenvalues in a domain. <p> This is used as an initial guess to approach the actual turning point using inverse power iterations. 5.2 Implementation, Performance and Applications The loop detection algorithm has been implemented and its performance was measured on a number of models. The algorithm uses existing EISPACK [GBDM77] and LA-PACK <ref> [ABB + 92] </ref> routines for some of the matrix computations. We report the results of our implementation on an SGI Onyx workstation with 128MB of main memory and a specFP rating of 98.1. <p> These algorithms are implemented in C and makes use of a number of matrix operations like SVD, matrix eigendecomposition and inverse iterations. These routines are available in public domain in the form of Fortran libraries like EISPACK [GBDM77] and LAPACK <ref> [ABB + 92] </ref>. The main advantage of using these libraries is that they are carefully and efficiently implemented by numerical analysts and well tested on a number of benchmarks. Further, most of the matrix routines also return the condition number of the problem. <p> Here is a brief description about each. * Numeric libraries: We make use of the public domain Fortran libraries EISPACK [GBDM77] and LAPACK <ref> [ABB + 92] </ref>. These libraries provide most of the routines required by our algorithms like QR decomposition for computing eigenvalues and eigenvectors, LU decomposition for solution of linear systems and Singular Value Decomposition. Various parts of our surface-surface intersection algorithm use these numerical algorithms.
Reference: [Abh90] <author> S. S. Abhyankar. </author> <title> Algebraic Geometry for Scientists and Engineers. </title> <publisher> American Mathematical Society, Providence, </publisher> <editor> R. I., </editor> <year> 1990. </year>
Reference-contexts: Every algebraic space curve is birationally equivalent to an algebraic plane curve and the latter can be computed using Grobner bases [Buc89] and resultants. Given an algebraic plane curve, techniques for desingularization based on quadratic transformations are given in <ref> [Wal50, Abh90, AB88b] </ref>. An excellent introduction to desingularization techniques is provided in [Abh90, Hof89]. However, the resulting algorithm can be exponential in the degree of the curve. Algorithms based on Collins' cylindrical algebraic decomposition (CAD), [Col75, ACM84], have been used for evaluating all components of algebraic curves [Arn83, SS83]. <p> Given an algebraic plane curve, techniques for desingularization based on quadratic transformations are given in [Wal50, Abh90, AB88b]. An excellent introduction to desingularization techniques is provided in <ref> [Abh90, Hof89] </ref>. However, the resulting algorithm can be exponential in the degree of the curve. Algorithms based on Collins' cylindrical algebraic decomposition (CAD), [Col75, ACM84], have been used for evaluating all components of algebraic curves [Arn83, SS83]. However, its worst case complexity is doubly exponential in the number of variables. <p> Different types of singularities that can occur in intersection curves are shown Figure 4.10. Algebraically the singularities are classified by the number of branches or places the curve has at that point <ref> [Abh90] </ref>. The main difference between cusps and nodes (also tacnodes) is that the former has only one branch while nodes have more than one branch. The tracing algorithm evaluates an algebraic plane curve (D (u; v) = 0).
Reference: [ACM84] <author> D. S. Arnon, G.E. Collins, and S. McCallum. </author> <title> Cylindrical algebraic decomposition. </title> <journal> SIAM J. on Computing, </journal> <volume> 13 </volume> <pages> 878-889, </pages> <year> 1984. </year>
Reference-contexts: An excellent introduction to desingularization techniques is provided in [Abh90, Hof89]. However, the resulting algorithm can be exponential in the degree of the curve. Algorithms based on Collins' cylindrical algebraic decomposition (CAD), <ref> [Col75, ACM84] </ref>, have been used for evaluating all components of algebraic curves [Arn83, SS83]. However, its worst case complexity is doubly exponential in the number of variables. For plane curves, improved polynomial time algorithms based on CAD have been presented in [AF88, AM88].
Reference: [AF88] <author> S. Arnborg and H. Feng. </author> <title> Algebraic decomposition of regular curves. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 5 </volume> <pages> 131-140, </pages> <year> 1988. </year>
Reference-contexts: Algorithms based on Collins' cylindrical algebraic decomposition (CAD), [Col75, ACM84], have been used for evaluating all components of algebraic curves [Arn83, SS83]. However, its worst case complexity is doubly exponential in the number of variables. For plane curves, improved polynomial time algorithms based on CAD have been presented in <ref> [AF88, AM88] </ref>. The problem of evaluating all the loops of an algebraic curve numerically has been studied in the modeling literature and a number of techniques based on subdivision methods, marching methods and lattice evaluations [Hof89, RR92] have been developed.
Reference: [AM88] <author> D. Arnon and S. McCallum. </author> <title> A polynomial time algorithm for the topological type of a real algebraic curve. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 5 </volume> <pages> 213-236, </pages> <year> 1988. </year>
Reference-contexts: Algorithms based on Collins' cylindrical algebraic decomposition (CAD), [Col75, ACM84], have been used for evaluating all components of algebraic curves [Arn83, SS83]. However, its worst case complexity is doubly exponential in the number of variables. For plane curves, improved polynomial time algorithms based on CAD have been presented in <ref> [AF88, AM88] </ref>. The problem of evaluating all the loops of an algebraic curve numerically has been studied in the modeling literature and a number of techniques based on subdivision methods, marching methods and lattice evaluations [Hof89, RR92] have been developed.
Reference: [Arn83] <author> D. S. Arnon. </author> <title> Topologically reliable display of algebraic curves. </title> <journal> Computer Graphics, </journal> <volume> 17 </volume> <pages> 219-227, </pages> <year> 1983. </year> <month> 159 </month>
Reference-contexts: An excellent introduction to desingularization techniques is provided in [Abh90, Hof89]. However, the resulting algorithm can be exponential in the degree of the curve. Algorithms based on Collins' cylindrical algebraic decomposition (CAD), [Col75, ACM84], have been used for evaluating all components of algebraic curves <ref> [Arn83, SS83] </ref>. However, its worst case complexity is doubly exponential in the number of variables. For plane curves, improved polynomial time algorithms based on CAD have been presented in [AF88, AM88]. <p> Our algorithm uses an efficient and accurate zero-dimensional solver (described in chapter 3) and works well using finite precision arithmetic. On the other hand, the algorithms based on algebraic decomposition <ref> [Arn83] </ref> compute all the extremal point and turning points using purely symbolic methods and exact arithmetic. Even though this method guarantees that the solution is always topologically reliable, they are impractical because of their large memory requirements and poor efficiency. Analysis of domain decomposition better than bisection.
Reference: [Bau75] <author> B. Baumgart. </author> <title> A polyhedron representation for computer vision. </title> <booktitle> In National Computer Conference, AFIPS Conf. Proc., </booktitle> <pages> pages 589-596, </pages> <year> 1975. </year>
Reference-contexts: The use of topological structures of solids has been very popular in B-rep solid modeling. The winged-edge style of boundary representation is due to Baumgart <ref> [Bau75] </ref>. Many variants of the method, and other alternatives, have been proposed and used in B-rep modeling systems since then. A complete survey of topological structures in solid modeling is given in [Wei86]. The use of non-manifold boundary representations was first proposed by Wesley [Wes80].
Reference: [BBP95] <author> I. Biehl, J. Buchmann, and T. Papanikolaou. Lidia: </author> <title> A library for computational number theory. </title> <type> Technical Report SFB 124-C1, </type> <institution> Fachbereich Informatik, Universitt des Saarlandes, </institution> <year> 1995. </year>
Reference-contexts: The implementation of our algorithm was carried out in exact rational arithmetic using LiDIA <ref> [BBP95] </ref> (a rational number library). By using exact arithmetic, we can assure that the algorithm gives accurate results, however, for the sake of efficiency it is better to implement the algorithm in finite precision.
Reference: [BFJP87] <author> R. Barnhill, G. Farin, M. Jordan, and B. Piper. </author> <title> Surface/surface intersection. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 4(3) </volume> <pages> 3-16, </pages> <year> 1987. </year>
Reference-contexts: The biggest drawback in this approach is the lack of robustness. Small loops could easily be missed depending on the frequency with which the curves are evaluated. In the last decade, techniques based on curve tracing have been widely used to evaluate high degree curves <ref> [BFJP87, BHHL88, KPP90, MC91] </ref>. The main idea is to compute at least one point on every component of the curve and use the local geometry of the curve to evaluate successive points.
Reference: [BHHL88] <author> C.L. Bajaj, C.M. Hoffmann, J.E.H. Hopcroft, and R.E. Lynch. </author> <title> Tracing surface intersections. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 5 </volume> <pages> 285-307, </pages> <year> 1988. </year>
Reference-contexts: Most of the recent work in the literature on Boolean combinations of curved models has focussed on computing the surface intersection between a pair of B-spline surfaces <ref> [KS88, SN91, Nat90, Hoh92, MC91, KPW90, BHHL88, BK90, KM97] </ref>. We shall now look at some of these methods. 1.2.2 Surface Intersection Techniques There is a significant body of literature addressing the surface intersection problem. Some recent surveys include [Pat93, Pra86, Hof89]. <p> In this paper, Piegl uses geometric principles to compute the intersection of quadric surfaces very accurately. However, the algorithm cannot be easily extended to the general intersection problem. Marching methods: These are by far the most widely used <ref> [Far86, BHHL88, BK90, KPW90] </ref> and are easy to implement. The main advantage of this technique is its generality, allowing intersection of arbitrary parametric surfaces as well as their offsets and blends. <p> Tracing is done on the intersection curve in higher dimensions or on its projection in the plane. Most algorithms use the local geometry of the curve coupled with quasi-Newton's methods <ref> [BHHL88, BK90] </ref> for tracing. These methods do not converge well sometimes [FF92] and many issues related to choice of step size to prevent component jumping are still open. Therefore, most implementations use very conservative step sizes for tracing and this slows down the algorithm. <p> The biggest drawback in this approach is the lack of robustness. Small loops could easily be missed depending on the frequency with which the curves are evaluated. In the last decade, techniques based on curve tracing have been widely used to evaluate high degree curves <ref> [BFJP87, BHHL88, KPP90, MC91] </ref>. The main idea is to compute at least one point on every component of the curve and use the local geometry of the curve to evaluate successive points. <p> There are a number of algorithms proposed for tracing <ref> [BHHL88, BK90, Che89, KPW90] </ref>. Given a point on the curve, an approximate value of the next point is obtained by taking a small step size in a direction determined by the local geometry of the curve. A single tracing step is shown in Figure 4.2.
Reference: [BK90] <author> R.E. </author> <title> Barnhill and S.N. Kersey. A marching method for parametric surface/surface intersection. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 7 </volume> <pages> 257-280, </pages> <year> 1990. </year>
Reference-contexts: Most of the recent work in the literature on Boolean combinations of curved models has focussed on computing the surface intersection between a pair of B-spline surfaces <ref> [KS88, SN91, Nat90, Hoh92, MC91, KPW90, BHHL88, BK90, KM97] </ref>. We shall now look at some of these methods. 1.2.2 Surface Intersection Techniques There is a significant body of literature addressing the surface intersection problem. Some recent surveys include [Pat93, Pra86, Hof89]. <p> In this paper, Piegl uses geometric principles to compute the intersection of quadric surfaces very accurately. However, the algorithm cannot be easily extended to the general intersection problem. Marching methods: These are by far the most widely used <ref> [Far86, BHHL88, BK90, KPW90] </ref> and are easy to implement. The main advantage of this technique is its generality, allowing intersection of arbitrary parametric surfaces as well as their offsets and blends. <p> Tracing is done on the intersection curve in higher dimensions or on its projection in the plane. Most algorithms use the local geometry of the curve coupled with quasi-Newton's methods <ref> [BHHL88, BK90] </ref> for tracing. These methods do not converge well sometimes [FF92] and many issues related to choice of step size to prevent component jumping are still open. Therefore, most implementations use very conservative step sizes for tracing and this slows down the algorithm. <p> There are a number of algorithms proposed for tracing <ref> [BHHL88, BK90, Che89, KPW90] </ref>. Given a point on the curve, an approximate value of the next point is obtained by taking a small step size in a direction determined by the local geometry of the curve. A single tracing step is shown in Figure 4.2.
Reference: [BMP94] <author> M. Benouamer, D. Michelucci, and B. Peroche. </author> <title> Error-free boundary evaluation based on a lazy rational arithmetic: a detailed implementation. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 26(6), </volume> <year> 1994. </year>
Reference-contexts: To circumvent these problems, combinations of symbolic reasoning [HHK89] and adaptive tolerances [Seg90] have been proposed. Other algorithms include those based on redundancy elimination [FBZ93]. Many algorithms based on exact arithmetic have been proposed for reliable numeric computation for polyhedra <ref> [SI89, For95, BMP94, Hof89] </ref>. Sculptured Solids: The idea of using free-form surfaces in solid modeling was introduced by Chiyokura et. al [CK83]. It describes the implementation of a system called Designbase with some curved-surface capabilities.
Reference: [Bra75] <author> I. </author> <title> Braid. The synthesis of solid bounded by many faces. </title> <journal> Comm. ACM, </journal> <volume> 18 </volume> <pages> 209-216, </pages> <year> 1975. </year>
Reference-contexts: Perform the same for all faces of B. 4. Assemble all the faces into the new solid. 1.2.1 Boundary Evaluation Techniques Polyhedral solids: Algorithms for performing Boolean operations on polyhedra 8 in B-rep have been proposed by a number of researchers <ref> [Bra75, Hil82, Man86, OKK73, Voe74, Wes80] </ref>. Most of these techniques rely heavily on the algebraic formulation of the problem.
Reference: [Buc89] <author> B. </author> <title> Buchberger. Applications of groebner bases in non-linear computational geometry. </title> <editor> In D. Kapur and J. Mundy, editors, </editor> <booktitle> Geometric Reasoning, </booktitle> <pages> pages 415-447. </pages> <publisher> MIT Press, </publisher> <year> 1989. </year>
Reference-contexts: There is a considerable amount of work in classic and modern literature related to complete evaluation of algebraic curves. Every algebraic space curve is birationally equivalent to an algebraic plane curve and the latter can be computed using Grobner bases <ref> [Buc89] </ref> and resultants. Given an algebraic plane curve, techniques for desingularization based on quadratic transformations are given in [Wal50, Abh90, AB88b]. An excellent introduction to desingularization techniques is provided in [Abh90, Hof89]. However, the resulting algorithm can be exponential in the degree of the curve.
Reference: [Cam85] <author> S. A. Cameron. </author> <title> A study of the clash detection problem in robotics. </title> <booktitle> IEEE Conference on Robotics and Automation, </booktitle> <pages> pages 488-493, </pages> <year> 1985. </year>
Reference-contexts: Most of these techniques rely heavily on the algebraic formulation of the problem. Cameron <ref> [Cam85] </ref> considers several strategies and redundancy tests to propagate approximations of CSG primitives from the root of the CSG tree down to the leaves, and possibly refining them on the way. Rossignac and Voelcker [RV89] consider redundancy determination without approximating the primitives.
Reference: [Can88] <author> J.F. Canny. </author> <title> The Complexity of Robot Motion Planning. ACM Doctoral Dissertation Award. </title> <publisher> MIT Press, </publisher> <year> 1988. </year>
Reference-contexts: Many problems like surface-surface intersection, offsets of curves and surfaces, slicing operations on surface models, Voronoi sets generated by curves and surfaces in geometric modeling [Hof89], kinematic analysis of a redundant robot [Cra89], robot motion planning <ref> [Can88] </ref>, object recognition in computer vision [PK92] and conformation space of molecular 94 chains [CH88] correspond to evaluating algebraic curves. 5.1 Loop Detection I: Algebraic Curves We apply our loop detection algorithm to find all the loops of an algebraic plane curve.
Reference: [Cas87] <author> M. S. Casale. </author> <title> Free-form solid modeling with trimmed surface patches. </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pages 33-43, </pages> <month> January </month> <year> 1987. </year> <month> 160 </month>
Reference-contexts: On the research front, there has been considerable effort in integrating geometric and solid modeling [Kal82, Jar84, CK83, VP84, KGI84, FH85, Far86]. In particular, there is a lot of interest in building complete solid representations from spline surfaces and their Boolean combinations <ref> [Hof89, RR92, CS85, Cas87, Wei85, RV82, Cha87, Men92] </ref>. However, the major bottleneck is in performing robust, efficient and accurate Boolean operations on the sculptured models. <p> Geisow [Gei83] maps surface intersection curves to the plane and uses subdivision methods to solve surface interrogation problems. Requicha and Voelcker [RV85] describes the PADL system developed at University of Rochester. This system supports Boolean operations on polyhedral solids and a few curved primitives. Casale et. al. <ref> [CS85, Cas87, CB89] </ref> use trimmed parametric surfaces to generate B-reps of sculptured solids. The algorithm uses subdivision methods to evaluate surface intersections, and represents the trimming boundary with piecewise linear segments. Chan [Cha87] uses special properties of quadric surfaces and other free-form surface to design industrial parts.
Reference: [CB89] <author> M. S. Casale and J. E. Bobrow. </author> <title> A set operation algorithm for sculptured solids modeled with trimmed patches. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 6 </volume> <pages> 235-247, </pages> <year> 1989. </year>
Reference-contexts: Geisow [Gei83] maps surface intersection curves to the plane and uses subdivision methods to solve surface interrogation problems. Requicha and Voelcker [RV85] describes the PADL system developed at University of Rochester. This system supports Boolean operations on polyhedral solids and a few curved primitives. Casale et. al. <ref> [CS85, Cas87, CB89] </ref> use trimmed parametric surfaces to generate B-reps of sculptured solids. The algorithm uses subdivision methods to evaluate surface intersections, and represents the trimming boundary with piecewise linear segments. Chan [Cha87] uses special properties of quadric surfaces and other free-form surface to design industrial parts.
Reference: [CH88] <author> G.W. Crippen and T.F. </author> <title> Havel. Distance geometry and molecular conformation. </title> <publisher> Research Studies Press, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: Many problems like surface-surface intersection, offsets of curves and surfaces, slicing operations on surface models, Voronoi sets generated by curves and surfaces in geometric modeling [Hof89], kinematic analysis of a redundant robot [Cra89], robot motion planning [Can88], object recognition in computer vision [PK92] and conformation space of molecular 94 chains <ref> [CH88] </ref> correspond to evaluating algebraic curves. 5.1 Loop Detection I: Algebraic Curves We apply our loop detection algorithm to find all the loops of an algebraic plane curve.
Reference: [Cha87] <author> K. Chan. </author> <title> Solid Modelling of Parts with Quadric and Free-form Surfaces. </title> <type> PhD thesis, </type> <institution> University of Hong Kong, </institution> <year> 1987. </year>
Reference-contexts: On the research front, there has been considerable effort in integrating geometric and solid modeling [Kal82, Jar84, CK83, VP84, KGI84, FH85, Far86]. In particular, there is a lot of interest in building complete solid representations from spline surfaces and their Boolean combinations <ref> [Hof89, RR92, CS85, Cas87, Wei85, RV82, Cha87, Men92] </ref>. However, the major bottleneck is in performing robust, efficient and accurate Boolean operations on the sculptured models. <p> This system supports Boolean operations on polyhedral solids and a few curved primitives. Casale et. al. [CS85, Cas87, CB89] use trimmed parametric surfaces to generate B-reps of sculptured solids. The algorithm uses subdivision methods to evaluate surface intersections, and represents the trimming boundary with piecewise linear segments. Chan <ref> [Cha87] </ref> uses special properties of quadric surfaces and other free-form surface to design industrial parts. A number of techniques like interval arithmetic and shell representations [VP84, KGI84, Taw91, Sat91, Men92, Duf92] have been developed to perform solid design with free-form geometries.
Reference: [Che89] <author> K.P Cheng. </author> <title> Using plane vector fields to obtain all the intersection curves of two general surfaces. </title> <booktitle> In Theory and Practice of Geometric Modeling, </booktitle> <pages> pages 187-204, </pages> <year> 1989. </year>
Reference-contexts: The intersection curve is defined implicitly as an algebraic set based on the surface equations, as a curve of zero distance between the two surfaces, or as a vector field <ref> [Hof90, KPW90, Che89] </ref>. Tracing is done on the intersection curve in higher dimensions or on its projection in the plane. Most algorithms use the local geometry of the curve coupled with quasi-Newton's methods [BHHL88, BK90] for tracing. <p> In this class of methods, identifying a point on every loop is significantly harder than identifying a point on open components. As a result, simultaneously with the development of new ideas for evaluating such curves, a number of techniques for loop detection have been proposed <ref> [SKW85, SM88, THS89, Che89, Hoh91, Kim90, KPP90, KPW90] </ref>. Most of the loop detection criteria are based on bounds on the Gauss map of the surfaces being intersected. <p> Furthermore, these algorithms may not work well if the intersection curve is self-intersecting. Techniques based on finding critical points of plane vector fields inside the domain of the surfaces have been proposed by <ref> [Che89, KPP90, KPW90, ML95] </ref>. Cheng [Che89] defined a plane vector field as the gradient of an oriented distance function of one surface from the other. <p> Furthermore, these algorithms may not work well if the intersection curve is self-intersecting. Techniques based on finding critical points of plane vector fields inside the domain of the surfaces have been proposed by [Che89, KPP90, KPW90, ML95]. Cheng <ref> [Che89] </ref> defined a plane vector field as the gradient of an oriented distance function of one surface from the other. <p> There are a number of algorithms proposed for tracing <ref> [BHHL88, BK90, Che89, KPW90] </ref>. Given a point on the curve, an approximate value of the next point is obtained by taking a small step size in a direction determined by the local geometry of the curve. A single tracing step is shown in Figure 4.2. <p> In this case, the intersection curve has a single loop component. We shall now formulate the loop detection problem as critical points of a plane vector field. The vector field is obtained as the gradient of a distance function introduced by <ref> [Che89] </ref>. 5.3.1 Intersection formulation using distance function The intersection set between a pair of parametric surfaces can be formulated as a minimization problem in which the distance between two variable points on the two surfaces becomes zero.
Reference: [CK83] <author> H. Chiyokura and F. Kimura. </author> <title> Design of solids with free-form surfaces. </title> <journal> Computer Graphics, </journal> <volume> 17 </volume> <pages> 289-298, </pages> <year> 1983. </year>
Reference-contexts: Over the last few years, modeling using free-form surfaces (sculptured models) has become very useful throughout the commercial CAD/CAM/CAE industry. On the research front, there has been considerable effort in integrating geometric and solid modeling <ref> [Kal82, Jar84, CK83, VP84, KGI84, FH85, Far86] </ref>. In particular, there is a lot of interest in building complete solid representations from spline surfaces and their Boolean combinations [Hof89, RR92, CS85, Cas87, Wei85, RV82, Cha87, Men92]. <p> Other algorithms include those based on redundancy elimination [FBZ93]. Many algorithms based on exact arithmetic have been proposed for reliable numeric computation for polyhedra [SI89, For95, BMP94, Hof89]. Sculptured Solids: The idea of using free-form surfaces in solid modeling was introduced by Chiyokura et. al <ref> [CK83] </ref>. It describes the implementation of a system called Designbase with some curved-surface capabilities. In this system, curved solids are designed 9 and modified by local operations such as altering the shape of certain edges and faces. However, Boolean operations require that one of the intersecting objects be polyhedral.
Reference: [Col75] <author> G.E. Collins. </author> <title> Quantifier elimination for real closed fields by cylindrical algebraic decomposition. </title> <booktitle> In Lecture Notes in Computer Science, number 33, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1975. </year>
Reference-contexts: An excellent introduction to desingularization techniques is provided in [Abh90, Hof89]. However, the resulting algorithm can be exponential in the degree of the curve. Algorithms based on Collins' cylindrical algebraic decomposition (CAD), <ref> [Col75, ACM84] </ref>, have been used for evaluating all components of algebraic curves [Arn83, SS83]. However, its worst case complexity is doubly exponential in the number of variables. For plane curves, improved polynomial time algorithms based on CAD have been presented in [AF88, AM88]. <p> For most practical cases, there are a few well-separated components in the real domain and the algorithm performs well for such cases. In many ways the underlying philosophy is rather similar to cylindrical algebraic decomposition <ref> [Col75] </ref> based algorithms for partitioning the domain into regions. Our algorithm uses an efficient and accurate zero-dimensional solver (described in chapter 3) and works well using finite precision arithmetic.
Reference: [Cra89] <author> J.J. Craig. </author> <title> Introduction to Robotics: Mechanics and Control. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1989. </year>
Reference-contexts: Many problems like surface-surface intersection, offsets of curves and surfaces, slicing operations on surface models, Voronoi sets generated by curves and surfaces in geometric modeling [Hof89], kinematic analysis of a redundant robot <ref> [Cra89] </ref>, robot motion planning [Can88], object recognition in computer vision [PK92] and conformation space of molecular 94 chains [CH88] correspond to evaluating algebraic curves. 5.1 Loop Detection I: Algebraic Curves We apply our loop detection algorithm to find all the loops of an algebraic plane curve.
Reference: [CS85] <author> M.S. Casale and E.L. Stanton. </author> <title> An overview of analytic solid modeling. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 5 </volume> <pages> 45-56, </pages> <month> February </month> <year> 1985. </year>
Reference-contexts: On the research front, there has been considerable effort in integrating geometric and solid modeling [Kal82, Jar84, CK83, VP84, KGI84, FH85, Far86]. In particular, there is a lot of interest in building complete solid representations from spline surfaces and their Boolean combinations <ref> [Hof89, RR92, CS85, Cas87, Wei85, RV82, Cha87, Men92] </ref>. However, the major bottleneck is in performing robust, efficient and accurate Boolean operations on the sculptured models. <p> Geisow [Gei83] maps surface intersection curves to the plane and uses subdivision methods to solve surface interrogation problems. Requicha and Voelcker [RV85] describes the PADL system developed at University of Rochester. This system supports Boolean operations on polyhedral solids and a few curved primitives. Casale et. al. <ref> [CS85, Cas87, CB89] </ref> use trimmed parametric surfaces to generate B-reps of sculptured solids. The algorithm uses subdivision methods to evaluate surface intersections, and represents the trimming boundary with piecewise linear segments. Chan [Cha87] uses special properties of quadric surfaces and other free-form surface to design industrial parts.
Reference: [DC95] <author> E. Driskill and E. Cohen. </author> <title> Interactive desigb, analysis, and illustration of assemblies. </title> <booktitle> In Proc. of 1995 Symposium on Int. 3D Graphics, </booktitle> <pages> pages 27-34, </pages> <year> 1995. </year>
Reference-contexts: The Alpha 1 CAD system developed at the University of Utah has many features to combine solids composed of sculptured surfaces. A systematic approach for design, analysis and illustration of assemblies has been presented in <ref> [DC95, RMS92] </ref>. Ray representations along with specialized parallel architectures [Mea84, EKL + 91, Men92] like the RayCasting engine and `Solids engine' were used to achieve interactive solid modeling on low-degree primitives like quadrics. Mantyla and Ranta [MR86] describe methods to perform solid modeling using HutDesign.
Reference: [Dix08] <author> A.L. Dixon. </author> <title> The eliminant of three quantics in two independent variables. </title> <journal> Proceedings of London Mathematical Society, </journal> <volume> 6 </volume> <pages> 49-69, 209-236, </pages> <year> 1908. </year>
Reference-contexts: The resultant is expressed as a ratio of two determinants. However, a single determinant formulation exists for n = 2 and 3 <ref> [Sal85, Dix08] </ref>. For n = 3, however, [Dix08] gives the resultant only if the three equations have the same degree. In our applications, it is sufficient to compute resultants for the cases when n = 2 and 3. <p> The resultant is expressed as a ratio of two determinants. However, a single determinant formulation exists for n = 2 and 3 [Sal85, Dix08]. For n = 3, however, <ref> [Dix08] </ref> gives the resultant only if the three equations have the same degree. In our applications, it is sufficient to compute resultants for the cases when n = 2 and 3. <p> representation of a parametric surface F (s; t) = (X (s; t); Y (s; t); Z (s; t); W (s; t)) involves eliminating s and t from the three polynomials X (s; t) xW (s; t) = 0 Z (s; t) zW (s; t) = 0 We use Dixon's resultant <ref> [Dix08] </ref> to compute the implicit form. We discuss this in more detail in chapter 3. The results and algorithms developed in elimination theory assume that the poly nomials are described in their monomial basis (like polynomials given in equations (2.3) and (2.4). <p> In intersection problems, we obtain systems consisting of two or three algebraic equations. For two equations corresponding to curve-curve intersection and ray-tracing we use Sylvester resultant [Sal85], and for curve-surface intersections we use Dixon's formulation <ref> [Dix08] </ref>. In either case the resultant can be expressed as a matrix determinant and the entries of the matrix are univariate polynomials. Such matrices are called matrix polynomials. Instead 49 of symbolically expanding the determinant, we reduce the problem to an eigenvalue for mulation [Man92]. <p> The implicit form of F (s; t) is basically an expression in terms of x, y, z and other numeric coefficients of the patch equations that simultaneously satisfy (4.2). Dixon's resultant <ref> [Dix08] </ref> provides an elegant way to compute this expression. Dixon's resultant: Let us denote the three equations in (4.2) as p 1 (s; t), p 2 (s; t) and p 3 (s; t). <p> Given a point (u 1 ; v 1 ) in the domain of G (u; v), (s 1 ; t 1 ) can be computed from a vector in the kernel of M (u 1 ; v 1 ) <ref> [Dix08] </ref>. The main advantages of this matrix representation are its efficiency and accuracy. Although the singular set is defined in terms of a determinant, we use algorithms based on eigenvalues and singular values for numerical stability.
Reference: [Dok85] <author> T. Dokken. </author> <title> Finding intersections of b-spline represented geometries using recursive subdivision techniques. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 2 </volume> <pages> 189-195, </pages> <year> 1985. </year> <month> 161 </month>
Reference-contexts: Thus making use of domain decomposition and inverse power iterations, we ensure that there is no component jumping during tracing. It is possible to compute less conservative step sizes by using higher order derivatives of the intersection curve <ref> [Dok85, DSY89] </ref>. However, we feel that the complexity of computing higher order derivatives is much more than tracing with a smaller step size. 4.4 Singularities In this section, we describe algorithms to detect singular points. Different types of singularities that can occur in intersection curves are shown Figure 4.10.
Reference: [DSY89] <author> T. Dokken, V. Skytt, and A.M. Ytrehus. </author> <title> Recursive subdivision and iteration in intersections and related problems. </title> <booktitle> In Mathematical Methods in Computer-Aided Geometric Design, </booktitle> <pages> pages 207-214. </pages> <publisher> Academic Press, </publisher> <year> 1989. </year>
Reference-contexts: Thus making use of domain decomposition and inverse power iterations, we ensure that there is no component jumping during tracing. It is possible to compute less conservative step sizes by using higher order derivatives of the intersection curve <ref> [Dok85, DSY89] </ref>. However, we feel that the complexity of computing higher order derivatives is much more than tracing with a smaller step size. 4.4 Singularities In this section, we describe algorithms to detect singular points. Different types of singularities that can occur in intersection curves are shown Figure 4.10.
Reference: [Duf92] <author> Tom Duff. </author> <title> Interval arithmetic and recursive subdivision for implicit functions and constructive solid geometry. </title> <journal> ACM Computer Graphics, </journal> <volume> 26(2) </volume> <pages> 131-139, </pages> <year> 1992. </year>
Reference-contexts: The algorithm uses subdivision methods to evaluate surface intersections, and represents the trimming boundary with piecewise linear segments. Chan [Cha87] uses special properties of quadric surfaces and other free-form surface to design industrial parts. A number of techniques like interval arithmetic and shell representations <ref> [VP84, KGI84, Taw91, Sat91, Men92, Duf92] </ref> have been developed to perform solid design with free-form geometries. Sorting points along intersection curves [Joh87] was used to classify components with respect to solids.
Reference: [EC90] <author> G. Elber and E. Cohen. </author> <title> Hidden curve removal for free form surfaces. </title> <journal> Computer Graphics, </journal> <volume> 24(4) </volume> <pages> 95-104, </pages> <year> 1990. </year>
Reference-contexts: We use a fast implementation [NM95] of Seidel's algorithm for this purpose. 45 Chapter 3 Curve Surface Intersection The problems of computing the intersection of curves and surfaces are fundamental in computer graphics and geometric modeling. Common applications include surface-surface intersection, ray-tracing, hidden-curve removal and visibility algorithms <ref> [Hof89, EC90, NSK90, SP86] </ref>. Our surface-surface intersection algorithm (chapter 4) needs starting points on each component of the intersection curve. We use curve-surface intersection to evaluate these starting points. Our algorithm for boundary evaluation relies on a ray-shooting approach for the classification of certain solid features.
Reference: [EC94] <author> G. Elber and E. Cohen. </author> <title> Exact computation of gauss maps and visibility sets for freefrom surfaces. </title> <type> Technical report CIS #9414, </type> <institution> Computer Science Department, Technion, </institution> <year> 1994. </year>
Reference-contexts: This is continued until all patch pairs fail the test. The number of levels of subdivision depends on the tightness of Gauss map bounds <ref> [EC94] </ref> and curvature variations of the two surfaces. Furthermore, these algorithms may not work well if the intersection curve is self-intersecting. Techniques based on finding critical points of plane vector fields inside the domain of the surfaces have been proposed by [Che89, KPP90, KPW90, ML95].
Reference: [Ede83] <author> H. Edelsbrunner. </author> <title> A new approach to rectangle intersections, part i. </title> <journal> Int. J. of Comput. Math, </journal> <volume> 13 </volume> <pages> 209-219, </pages> <year> 1983. </year>
Reference-contexts: While this algorithm is time optimal if 118 there are O (mn) overlapping bounding boxes, this algorithm is quite inefficient if there are very few actually intersecting boxes. Obtaining an output sensitive algorithm that performs asymptotically better on average has been a well studied problem in computational geometry. Edelsbrunner <ref> [Ede83] </ref> obtained an O (n log n + k) for the three dimensional rectangle intersection problem. We, however, use an algorithm which runs in O (n log 2 n + k) time using nested segment trees.
Reference: [EKL + 91] <author> J. L. Ellis, G. Kedem, T. C. Lyerly, D. G. Thielman, R. J. Marisa, J. P. Menon, and H. B. Voelcker. </author> <title> The raycasting engine and ray representations. </title> <booktitle> In Proceedings of Symposium on Solid Modeling Foundations and CAD/CAM Applications, </booktitle> <pages> pages 255-267, </pages> <year> 1991. </year>
Reference-contexts: The Alpha 1 CAD system developed at the University of Utah has many features to combine solids composed of sculptured surfaces. A systematic approach for design, analysis and illustration of assemblies has been presented in [DC95, RMS92]. Ray representations along with specialized parallel architectures <ref> [Mea84, EKL + 91, Men92] </ref> like the RayCasting engine and `Solids engine' were used to achieve interactive solid modeling on low-degree primitives like quadrics. Mantyla and Ranta [MR86] describe methods to perform solid modeling using HutDesign.
Reference: [Far86] <author> R.T. Farouki. </author> <title> The characterization of parametric surface sections. Computer Vision, </title> <journal> Graphics and Image Processing, </journal> <volume> 33 </volume> <pages> 209-236, </pages> <year> 1986. </year>
Reference-contexts: Over the last few years, modeling using free-form surfaces (sculptured models) has become very useful throughout the commercial CAD/CAM/CAE industry. On the research front, there has been considerable effort in integrating geometric and solid modeling <ref> [Kal82, Jar84, CK83, VP84, KGI84, FH85, Far86] </ref>. In particular, there is a lot of interest in building complete solid representations from spline surfaces and their Boolean combinations [Hof89, RR92, CS85, Cas87, Wei85, RV82, Cha87, Men92]. <p> In this paper, Piegl uses geometric principles to compute the intersection of quadric surfaces very accurately. However, the algorithm cannot be easily extended to the general intersection problem. Marching methods: These are by far the most widely used <ref> [Far86, BHHL88, BK90, KPW90] </ref> and are easy to implement. The main advantage of this technique is its generality, allowing intersection of arbitrary parametric surfaces as well as their offsets and blends.
Reference: [Far93] <author> G. Farin. </author> <title> Curves and Surfaces for Computer Aided Geometric Design: A Practical Guide. </title> <publisher> Academic Press Inc., </publisher> <year> 1993. </year>
Reference-contexts: For example, a parametric space curve is a mapping from the real line to R 3 . The domain of these functions is also called the parameter of the curve. By substituting different values for the parameter, we obtain different points on the curve. A NURBS curve <ref> [Far93] </ref> is a special kind of parametric curve. This curve is completely specified by a set of points in space and a few smooth functions. These points are called the control points of the NURBS curve. The pre-specified functions are called the basis or blending functions. <p> A tensor product NURBS surface is defined over a two dimensional parametric domain over the parameters 0 s; t 1. The shape of the surface is determined by two array of knot vectors (one for each parameter) and a two dimensional array of control points <ref> [Far93] </ref>. Figure 2.3 shows the relationship between a surface patch and its parametric domain. <p> The multiplicity of s and t knots is one more than s and t degrees, respectively, of the surface. The main advantages of the Bezier representation is that they are more easy to evaluate than general NURBS. Using knot insertion algorithms <ref> [Far93] </ref>, it is possible to decompose each NURBS surface into a series of rational Bezier patches. We use Bezier patches to represent boundaries of the solid primitives in our algorithms. <p> We shall restrict our discussion to surfaces whose silhouette (from a given viewpoint) is a curve on the surface. We now describe our formulation of the silhouette curve on a parametric (represented as a tensor product Bezier <ref> [Far93] </ref>) patch from a given viewpoint. We assume for the sake of simplicity that the viewpoint is located at (0; 0; 1). <p> However, not all the mn pairs would intersect typically. We prune out most of the non-intersecting pairs based on a two-step process. Initially, we compute a 3D axis-aligned bounding box for each patch. Since tensor-product Bezier patches have the convex hull property <ref> [Far93] </ref>, the bounding box and convex hull of the control points encloses the entire surface. Therefore, if a pair of bounding boxes do not intersect, the corresponding patches are also non-intersecting.
Reference: [FBZ93] <author> S. Fang, B. Bruderlin, and X. Zhu. </author> <title> Robustness in solid modeling: a tolerance-based intuitionistic approach. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 25(9) </volume> <pages> 567-576, </pages> <year> 1993. </year>
Reference-contexts: However, it is hard to decide a global tolerance value for all computations. To circumvent these problems, combinations of symbolic reasoning [HHK89] and adaptive tolerances [Seg90] have been proposed. Other algorithms include those based on redundancy elimination <ref> [FBZ93] </ref>. Many algorithms based on exact arithmetic have been proposed for reliable numeric computation for polyhedra [SI89, For95, BMP94, Hof89]. Sculptured Solids: The idea of using free-form surfaces in solid modeling was introduced by Chiyokura et. al [CK83].
Reference: [FF92] <author> D.A. Field and R. </author> <title> Field. A new family of curves for industrial applications. </title> <type> Technical report GMR-7571, </type> <institution> General Motors Research Laboratories, </institution> <year> 1992. </year> <month> 162 </month>
Reference-contexts: Tracing is done on the intersection curve in higher dimensions or on its projection in the plane. Most algorithms use the local geometry of the curve coupled with quasi-Newton's methods [BHHL88, BK90] for tracing. These methods do not converge well sometimes <ref> [FF92] </ref> and many issues related to choice of step size to prevent component jumping are still open. Therefore, most implementations use very conservative step sizes for tracing and this slows down the algorithm. Overall, current tracing algorithms are not considered robust [Sny92]. <p> A single tracing step is shown in Figure 4.2. Given the approximate value, these algorithms use iterative 74 methods like Newton's method to trace back on to the curve. The three main problems with tracing algorithms are <ref> [FF92, Sny92] </ref> 1. Converging back on to the curve. 2. Component jumping. 3. Inability to handle singularities and multiple branches. The convergence problems arising from the behavior of Newton's method are described in [FF92]. <p> The three main problems with tracing algorithms are [FF92, Sny92] 1. Converging back on to the curve. 2. Component jumping. 3. Inability to handle singularities and multiple branches. The convergence problems arising from the behavior of Newton's method are described in <ref> [FF92] </ref>. It is rather difficult to predict the convergence of Newton's method on high degree equations corresponding to the intersection (for bicubic patches). Component jumping can occur when two components of the curve are close to each other as shown in Figure 4.3.
Reference: [FH85] <author> R.T. Farouki and J.K. Hinds. </author> <title> A hierarchy of geometric forms. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 5 </volume> <pages> 51-78, </pages> <month> May </month> <year> 1985. </year>
Reference-contexts: Over the last few years, modeling using free-form surfaces (sculptured models) has become very useful throughout the commercial CAD/CAM/CAE industry. On the research front, there has been considerable effort in integrating geometric and solid modeling <ref> [Kal82, Jar84, CK83, VP84, KGI84, FH85, Far86] </ref>. In particular, there is a lot of interest in building complete solid representations from spline surfaces and their Boolean combinations [Hof89, RR92, CS85, Cas87, Wei85, RV82, Cha87, Men92].
Reference: [FM84] <author> A. Fournier and D. Y. Montuno. </author> <title> Triangulating simple polygons and equivalent problems. </title> <journal> ACM Trans. Graph., </journal> <volume> 3 </volume> <pages> 153-174, </pages> <year> 1984. </year>
Reference-contexts: This is a linear time operation. * Triangulation of monotone polygons: A monotone polygon can be triangulated in linear time by using a simple greedy algorithm which repeatedly cuts off the convex corners of the polygon <ref> [FM84] </ref>. Hence, all the monotone polygons can be triangulated in O (n) time. In our algorithm for boundary evaluation, we represent the trimming boundary of a surface patch as a simple polygon.
Reference: [For95] <author> S. Fortune. </author> <title> Polyhedral modeling with exact arithmetic. </title> <booktitle> Proceedings of ACM Solid Modeling, </booktitle> <pages> pages 225-234, </pages> <year> 1995. </year>
Reference-contexts: To circumvent these problems, combinations of symbolic reasoning [HHK89] and adaptive tolerances [Seg90] have been proposed. Other algorithms include those based on redundancy elimination [FBZ93]. Many algorithms based on exact arithmetic have been proposed for reliable numeric computation for polyhedra <ref> [SI89, For95, BMP94, Hof89] </ref>. Sculptured Solids: The idea of using free-form surfaces in solid modeling was introduced by Chiyokura et. al [CK83]. It describes the implementation of a system called Designbase with some curved-surface capabilities. <p> Degeneracies in the polyhedral case can generally be classified into the category of four planes meeting at a point. It has been shown <ref> [For95] </ref> that a simple perturbation scheme applied to a single basic geometric predicate can eliminate these degeneracies. <p> This is the problem of "robustness" in 140 geometric computing. However, if a particular instance is degenerate, the value of the corresponding expression is smaller than the errors accumulated due to fixed precision. There are two ways of dealing with this problem tolerances and error estimates <ref> [For95] </ref>. Estimating tolerances when evaluating a complex sequence of predicates is non trivial, and error estimates are too pessimistic to be useful. We shall now identify two areas where our algorithm is susceptible to failure when using floating point arithmetic. <p> By robustness in this context, we mean that the boundary evaluation algorithm must be able to handle all geometric situations (including degeneracies) and produce correct results. The use of exact arithmetic coupled with perturbation schemes has been shown to be successful in polyhedral modeling <ref> [For95] </ref>. We are trying to extend this work to curved geometries. One class of robustness problems is degeneracies like the ones listed in section 6.3.
Reference: [FR87] <author> R.T. Farouki and V.T. Rajan. </author> <title> On the numerical condition of polynomials in bernstein form. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 4 </volume> <pages> 191-216, </pages> <year> 1987. </year>
Reference-contexts: To avoid these problems, we apply this transformation only during phases of the algorithm where resultant algorithms are used. Once that is done, we apply the inverse transformation to restore the stability of the Bernstein basis <ref> [FR87] </ref>. 35 2.3 Sturm Sequences Let f (x) be a polynomial of degree n, f (x) = a n x n + a n1 x n1 + : : : + a 1 x + a 0 ; a n 6= 0 (2.6) We construct a sequence of polynomials f i <p> Since we are evaluating the plane curve, we compute all the singularities and the branches. In general the problem of computing the singularities in the intersection curve of high degree surfaces in floating point arithmetic can be numerically unstable <ref> [FR87] </ref>. Algorithms based on exact arithmetic and birational transformations have been proposed in [AB88a]. However they are computationally very slow. Our algorithms are based on the local geometry of the curve and the properties of the representation M (u; v).
Reference: [GBDM77] <author> B.S. Garbow, J.M. Boyle, J. Dongarra, and C.B. Moler. </author> <title> Matrix Eigensystem Routines - EISPACK Guide Extension, volume 51. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1977. </year>
Reference-contexts: This is used as an initial guess to approach the actual turning point using inverse power iterations. 5.2 Implementation, Performance and Applications The loop detection algorithm has been implemented and its performance was measured on a number of models. The algorithm uses existing EISPACK <ref> [GBDM77] </ref> and LA-PACK [ABB + 92] routines for some of the matrix computations. We report the results of our implementation on an SGI Onyx workstation with 128MB of main memory and a specFP rating of 98.1. <p> These algorithms are implemented in C and makes use of a number of matrix operations like SVD, matrix eigendecomposition and inverse iterations. These routines are available in public domain in the form of Fortran libraries like EISPACK <ref> [GBDM77] </ref> and LAPACK [ABB + 92]. The main advantage of using these libraries is that they are carefully and efficiently implemented by numerical analysts and well tested on a number of benchmarks. Further, most of the matrix routines also return the condition number of the problem. <p> Here is a brief description about each. * Numeric libraries: We make use of the public domain Fortran libraries EISPACK <ref> [GBDM77] </ref> and LAPACK [ABB + 92]. These libraries provide most of the routines required by our algorithms like QR decomposition for computing eigenvalues and eigenvectors, LU decomposition for solution of linear systems and Singular Value Decomposition. Various parts of our surface-surface intersection algorithm use these numerical algorithms.
Reference: [Gea95] <author> G. Georgiannakis and C. Houstis et. al. </author> <title> Description of the adaptive resource management problem, cost functions and performance objectives. </title> <type> Technical Report TR130, </type> <institution> The Institute of Computer Science, Foundation for Research and Technology, </institution> <year> 1995. </year>
Reference-contexts: It is clear that the most effective parallel algorithm is one where the tasks are equally distributed among all the processors. The problem of load balancing has received considerable attention for a long time due to the fact that a single scheme is not applicable for parallelizing all algorithms <ref> [Lam87, YA93, Whi94, Gea95, HL95] </ref>. The effectiveness of different techniques varies with the nature of the problem it is used for. Hence there arises a need for newer problem specific analysis methods which help in choosing the most effective load balancing technique.
Reference: [Gei83] <author> A. Geisow. </author> <title> Surface Interrogations. </title> <type> PhD thesis, </type> <institution> School of Computing Studies and Accountancy, University of East Anglia, </institution> <year> 1983. </year>
Reference-contexts: It describes the implementation of a system called Designbase with some curved-surface capabilities. In this system, curved solids are designed 9 and modified by local operations such as altering the shape of certain edges and faces. However, Boolean operations require that one of the intersecting objects be polyhedral. Geisow <ref> [Gei83] </ref> maps surface intersection curves to the plane and uses subdivision methods to solve surface interrogation problems. Requicha and Voelcker [RV85] describes the PADL system developed at University of Rochester. This system supports Boolean operations on polyhedral solids and a few curved primitives. <p> The last step is to merge all the individual curves together to get the final solution. This approach has the flavor of the divide and conquer paradigm used extensively in algorithmic design. Subdivisions are based on the geometric properties of the control polytopes <ref> [LR80, Gei83, Las86] </ref>. These methods are convergent in the limit, but if used for high-precision results, lead to data proliferation and are consequently slow. In case subdivision is stopped after some finite number of steps, it may miss small loops or lead to incorrect connectivity in the presence of singularities. <p> The subdivision based algorithms subdivide the domain up to a user-specified tolerance and evaluate the curves accordingly <ref> [Gei83, LR80, MP93] </ref>. No good methods are known for computing a good tolerance value during curve tracing. Thus, most implementations use a conservative value for the tolerance.
Reference: [GL89] <author> G.H. Golub and C.F. Van Loan. </author> <title> Matrix Computations. </title> <publisher> John Hopkins Press, </publisher> <address> Baltimore, </address> <year> 1989. </year>
Reference-contexts: To circumvent these problems, Manocha et. al. [Man92, MD94] have proposed methods combining elimination theory with matrix computations. The resulting problem 13 is reduced to computing the eigenvalues of a matrix as opposed to roots of a polynomial. Eigenvalue algorithms like the QR algorithm <ref> [GL89] </ref> are backward stable and as a result the intersections can be computed accurately and efficiently for high degree curves and surfaces. Loop Detection As shown in Figure 1.4, the intersection curve of two surfaces can result in a number of different components like closed loops and singularities. <p> Standard algorithms for computing eigenvalues, like the QR algorithm for the standard eigenvalue problem and QZ algorithm for the generalized eigenvalue problem, are based on orthogonal similarity transformations <ref> [GL89] </ref>. 40 We reduce our problems of intersection computation to computing certain eigen-values of a matrix pencil (a parameterized matrix form). Since the QR or QZ algorithm compute all the eigenvalues, they can be inefficient. <p> Moreover, the asymptotic convergence rate is j 1 j=j 2 j. 1 is the dominant eigenvalue of A. The power method is described in detail in <ref> [GL89, Wil65] </ref>. In our applications, we use power iterations to compute the smallest eigenvalues (in magnitude) of matrix pencils of the form, As 0 + B. The smallest eigenvalue of As 0 corresponds to the largest eigenvalue of (As 0 + B) 1 . <p> The QR algorithm for the standard eigenvalue problem and QZ algorithm for the generalized eigenvalue problem <ref> [GL89] </ref> compute all eigenvalues and it is difficult to restrict them to eigenvalues in the given domain. But in our applications we are only interested in finding intersections that lie inside the given domain. <p> The matrix pencil defined in Theorem 4 has order N = mfln. In particular, it has a block companion structure being linearized from a m fi m matrix polynomial of degree n. The LU decomposition is computed using Gaussian elimination <ref> [GL89] </ref> which takes about 1 3 N 3 operations (without pivoting). Solving each triangular system costs about 1 2 N 2 operations. As a result, inverse iteration requires 1 3 N 3 + kN 2 operations, where k is the number of iterations. <p> Although the singular set is defined in terms of a determinant, we use algorithms based on eigenvalues and singular values for numerical stability. Efficient and accurate algorithms for computing the eigendecomposition and SVD (Singular Value Decomposition) are well known <ref> [GL89] </ref>, and good implementations are available as part of numerical libraries like EISPACK and LAPACK. 73 4.2.1 Start Points Given the matrix representation of the intersection curve, we use numerical marching methods to evaluate points on the intersection curve.
Reference: [HHK89] <author> C. Hoffmann, J. Hopcroft, and M. Karasick. </author> <title> Robust set operations on polyhedral solids. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 9(6) </volume> <pages> 50-59, </pages> <year> 1989. </year>
Reference-contexts: This framework was first introduced by Requicha and Voelcker [RV85] to perform Boolean operations on polyhedra. However, this can be extended easily to accommodate curve surface domains as well. Given two polyhedra, A and B, the conceptual structure of the algorithm <ref> [Hof89, HHK89] </ref> is 1. Determine which pairs of faces f 2 A and g 2 B intersect. If there are none, test for containment only and skip all other steps. 2. <p> One of the most common approaches is based on using tolerances with floating-point arithmetic [Jac95]. However, it is hard to decide a global tolerance value for all computations. To circumvent these problems, combinations of symbolic reasoning <ref> [HHK89] </ref> and adaptive tolerances [Seg90] have been proposed. Other algorithms include those based on redundancy elimination [FBZ93]. Many algorithms based on exact arithmetic have been proposed for reliable numeric computation for polyhedra [SI89, For95, BMP94, Hof89].
Reference: [Hil82] <author> R. C. Hillyard. </author> <title> The build group of solid modellers. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 2 </volume> <pages> 43-52, </pages> <year> 1982. </year>
Reference-contexts: Perform the same for all faces of B. 4. Assemble all the faces into the new solid. 1.2.1 Boundary Evaluation Techniques Polyhedral solids: Algorithms for performing Boolean operations on polyhedra 8 in B-rep have been proposed by a number of researchers <ref> [Bra75, Hil82, Man86, OKK73, Voe74, Wes80] </ref>. Most of these techniques rely heavily on the algebraic formulation of the problem.
Reference: [HL95] <author> B. Hendrickson and R. Leland. </author> <title> A multilevel algorithm for partitioning graphs. </title> <booktitle> Proc. Supercomputing '95, </booktitle> <year> 1995. </year> <month> 163 </month>
Reference-contexts: It is clear that the most effective parallel algorithm is one where the tasks are equally distributed among all the processors. The problem of load balancing has received considerable attention for a long time due to the fact that a single scheme is not applicable for parallelizing all algorithms <ref> [Lam87, YA93, Whi94, Gea95, HL95] </ref>. The effectiveness of different techniques varies with the nature of the problem it is used for. Hence there arises a need for newer problem specific analysis methods which help in choosing the most effective load balancing technique.
Reference: [Hof89] <author> C.M. Hoffmann. </author> <title> Geometric and Solid Modeling. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, California, </address> <year> 1989. </year>
Reference-contexts: On the research front, there has been considerable effort in integrating geometric and solid modeling [Kal82, Jar84, CK83, VP84, KGI84, FH85, Far86]. In particular, there is a lot of interest in building complete solid representations from spline surfaces and their Boolean combinations <ref> [Hof89, RR92, CS85, Cas87, Wei85, RV82, Cha87, Men92] </ref>. However, the major bottleneck is in performing robust, efficient and accurate Boolean operations on the sculptured models. <p> In particular, there is a lot of interest in building complete solid representations from spline surfaces and their Boolean combinations [Hof89, RR92, CS85, Cas87, Wei85, RV82, Cha87, Men92]. However, the major bottleneck is in performing robust, efficient and accurate Boolean operations on the sculptured models. According to Hoffmann <ref> [Hof89] </ref>: "The difficulty of evaluating and representing the intersection of parametric surface patches has hindered the development of solid modelers that incorporate parametric surface patches". <p> This framework was first introduced by Requicha and Voelcker [RV85] to perform Boolean operations on polyhedra. However, this can be extended easily to accommodate curve surface domains as well. Given two polyhedra, A and B, the conceptual structure of the algorithm <ref> [Hof89, HHK89] </ref> is 1. Determine which pairs of faces f 2 A and g 2 B intersect. If there are none, test for containment only and skip all other steps. 2. <p> To circumvent these problems, combinations of symbolic reasoning [HHK89] and adaptive tolerances [Seg90] have been proposed. Other algorithms include those based on redundancy elimination [FBZ93]. Many algorithms based on exact arithmetic have been proposed for reliable numeric computation for polyhedra <ref> [SI89, For95, BMP94, Hof89] </ref>. Sculptured Solids: The idea of using free-form surfaces in solid modeling was introduced by Chiyokura et. al [CK83]. It describes the implementation of a system called Designbase with some curved-surface capabilities. <p> We shall now look at some of these methods. 1.2.2 Surface Intersection Techniques There is a significant body of literature addressing the surface intersection problem. Some recent surveys include <ref> [Pat93, Pra86, Hof89] </ref>. One of the main issues that has 10 to be considered while designing surface intersection algorithms is that two surfaces can intersect in a number of components including small loops and singularities (see Figure 1.4). <p> Given an algebraic plane curve, techniques for desingularization based on quadratic transformations are given in [Wal50, Abh90, AB88b]. An excellent introduction to desingularization techniques is provided in <ref> [Abh90, Hof89] </ref>. However, the resulting algorithm can be exponential in the degree of the curve. Algorithms based on Collins' cylindrical algebraic decomposition (CAD), [Col75, ACM84], have been used for evaluating all components of algebraic curves [Arn83, SS83]. However, its worst case complexity is doubly exponential in the number of variables. <p> For plane curves, improved polynomial time algorithms based on CAD have been presented in [AF88, AM88]. The problem of evaluating all the loops of an algebraic curve numerically has been studied in the modeling literature and a number of techniques based on subdivision methods, marching methods and lattice evaluations <ref> [Hof89, RR92] </ref> have been developed. The subdivision based algorithms subdivide the domain up to a user-specified tolerance and evaluate the curves accordingly [Gei83, LR80, MP93]. No good methods are known for computing a good tolerance value during curve tracing. Thus, most implementations use a conservative value for the tolerance. <p> This connectivity information turns out to be very useful in classifying the various components efficiently. When two polyhedral solids intersect, it is fairly easy to classify the inside/outside nature of the various components by performing simple local tests based on the orientation of the intersection curve <ref> [Hof89] </ref>. However, for solid boundaries composed of curved surfaces, local tests cannot be performed. The main reason for this is the complicated nature of the intersection curve. We use an algorithm based on ray-shooting to perform the classification tests. <p> We use a fast implementation [NM95] of Seidel's algorithm for this purpose. 45 Chapter 3 Curve Surface Intersection The problems of computing the intersection of curves and surfaces are fundamental in computer graphics and geometric modeling. Common applications include surface-surface intersection, ray-tracing, hidden-curve removal and visibility algorithms <ref> [Hof89, EC90, NSK90, SP86] </ref>. Our surface-surface intersection algorithm (chapter 4) needs starting points on each component of the intersection curve. We use curve-surface intersection to evaluate these starting points. Our algorithm for boundary evaluation relies on a ray-shooting approach for the classification of certain solid features. <p> We represent the plane curve as an unevaluated determinant [MC91]. Given two Bezier surfaces, F (s; t) = (X (s; t); Y (s; t); Z (s; t); W (s; t)) in homogeneous coordinates, implicitize F (s; t) to the form f (x; y; z; w) = 0 <ref> [Sed83, Hof89] </ref> 67 and substitute the parametrization of G (u; v) into f to get an algebraic plane curve of the form f (X (u; v); Y (u; v); Z (u; v); W (u; v)) = 0: (4.1) This corresponds to an algebraic plane curve birationally equivalent to the original intersection <p> However, its degree is rather high and leads to efficiency and accuracy problems <ref> [Hof89] </ref>. <p> The conditioning becomes more significant because of errors introduced by numerical computations. If the input data changes by *, the output results will change by a function ffi (*). For very small values of *, there may exist a constant such that ffi (*) * <ref> [Hof89] </ref>. If is small the problem is said to be well-conditioned. A large value of signifies an ill-conditioned problem. The value is called the condition number. However, it is nontrivial to calculate for surface intersection problems. Because of such difficulties, we restrict ourselves to robustness issues for well-conditioned problems only. <p> Algebraic sets are widely used for representing objects and constraints in computer graphics, geometric modeling, robotics, computer vision and molecular modeling. Many problems like surface-surface intersection, offsets of curves and surfaces, slicing operations on surface models, Voronoi sets generated by curves and surfaces in geometric modeling <ref> [Hof89] </ref>, kinematic analysis of a redundant robot [Cra89], robot motion planning [Can88], object recognition in computer vision [PK92] and conformation space of molecular 94 chains [CH88] correspond to evaluating algebraic curves. 5.1 Loop Detection I: Algebraic Curves We apply our loop detection algorithm to find all the loops of an algebraic <p> Every solid is represented as a set of trimmed parametric surface (tensor-product Bezier) patches (for definition, see chapter 2) which define the solid boundary. 115 Topological information of the solid is maintained in terms of an adjacency graph. It is similar to the winged-edge data structure <ref> [Hof89, MT83] </ref>. To start with, we assume that each of the input objects has manifold boundaries, and the Boolean operation is regularized [Man88]. While it is possible to generate non-manifold objects from regularized Booleans on manifold solids, we assume for the sake of simplicity that such cases do not occur. <p> While it is possible to generate non-manifold objects from regularized Booleans on manifold solids, we assume for the sake of simplicity that such cases do not occur. Given this assumption, it has been shown that an unambiguous topological representation is possible for a solid <ref> [Hof89] </ref>. A trimmed patch consists of a sequence of curves defined in the domain of the patch such that they form a closed curve (c i 's in Figure 6.2). In the figure, the c i refer to the algebraic curve segments forming the trimming boundary. <p> In most polyhedral modelers, component classification is carried out locally <ref> [Hof89] </ref> by looking at the relative orientation (left/right) of the intersection curve. When dealing with sculptured surfaces, though, the same technique cannot be used, primarily due to the complexity of 126 graphs based on partitions (e) Connectivity graph of final solid 127 the intersection curve topology.
Reference: [Hof90] <author> C.M. Hoffmann. </author> <title> A dimensionality paradigm for surface interrogations. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 7 </volume> <pages> 517-532, </pages> <year> 1990. </year>
Reference-contexts: The intersection curve is defined implicitly as an algebraic set based on the surface equations, as a curve of zero distance between the two surfaces, or as a vector field <ref> [Hof90, KPW90, Che89] </ref>. Tracing is done on the intersection curve in higher dimensions or on its projection in the plane. Most algorithms use the local geometry of the curve coupled with quasi-Newton's methods [BHHL88, BK90] for tracing. <p> However, the problem of finding roots of higher degree polynomials can be numerically unstable [Wil59]. Therefore, the overall algorithm for intersection may not be accurate. Moreover, the symbolic expansion of determinants to compute resultants can be computationally expensive <ref> [Hof90] </ref>. To circumvent these problems, Manocha et. al. [Man92, MD94] have proposed methods combining elimination theory with matrix computations. The resulting problem 13 is reduced to computing the eigenvalues of a matrix as opposed to roots of a polynomial.
Reference: [Hoh91] <author> M.E. Hohmeyer. </author> <title> A surface intersection algorithm based on loop detection. </title> <journal> International Journal of Computational Geometry and Applications, </journal> <volume> 1(4) </volume> <pages> 473-490, </pages> <year> 1991. </year> <note> Special issue on Solid Modeling. </note>
Reference-contexts: In this class of methods, identifying a point on every loop is significantly harder than identifying a point on open components. As a result, simultaneously with the development of new ideas for evaluating such curves, a number of techniques for loop detection have been proposed <ref> [SKW85, SM88, THS89, Che89, Hoh91, Kim90, KPP90, KPW90] </ref>. Most of the loop detection criteria are based on bounds on the Gauss map of the surfaces being intersected. <p> Sederberg et. al. [SM88, ZS93] developed an efficient way to bound the normals and tangents of a surface using bounding cones and pyramidal surfaces, thereby giving a faster way to achieve the no loop condition. Hohmeyer <ref> [Hoh91] </ref> bounded the Gauss maps using pseudo-normal patches and used an efficient algorithm for linear programming [Sei90a] to test the separability criterion. <p> The computation of the pseudo-Gauss map is quite efficient and is based on the partial derivative computation described above. Another benefit of using the pseudo-Gauss map is that G is itself a Bezier surface, and can thus be described in terms of its control points. Hohmeyer <ref> [Hoh91] </ref> uses pseudo-Gauss maps to perform efficient loop detection in surface intersection algorithms. If F (s; t) has a polynomial parameterization of degree m fi n, then the pseudo-normal surface is a degree (2m 1) fi (2n 1) Bezier patch. <p> In this case, each control points contributes one constraint. Good randomized algorithms for linear programming are described in [Sei90b] and they work very well in practice. We use an implementation of Seidel's algorithm [Sei90b] given to us by Mike Hohmeyer <ref> [Hoh91] </ref>. 58 Curve-Surface Intersection The control points of the curve in homogeneous coordinates are given by P (s) = ((85:0; 0:0; 150:0; 1:6); (104:0; 50:0; 50:0; 1:6); (90:0; 50:0; 50:0; 1:4); The control points of the surface are given by the matrix: Q (u; v) = B B (160:0;10:0; 140:0; 1:8) <p> This observation could be used to speed up the tracing step depending on the robustness requirements of the application. In order to compare our algebraic method with the Gauss map based approaches to loop detection, we implemented Hohmeyer's algorithm (in the context of surface intersection) using pseudo-normal patches <ref> [Hoh91] </ref>. Hohmeyer's algorithm performed slightly slower than our algorithm on the example in Figure 5.3. Eight levels of subdivision were performed, and most of the time was consumed in the repeated computation of the Gauss map and application of linear programming. <p> We use a very fast implementation of Seidel's triangulation algorithm [Sei91] provided by Atul Narkhede et al [NM95]. The point location algorithm based on the triangulation algorithm was also implemented by Atul Narkhede. We use Mike Hohmeyer's <ref> [Hoh91] </ref> implementation of Seidel's randomized linear programming algorithm [Sei90b]. We implemented the segment tree version of the bounding box intersection test described in chapter 6. * Curve/Surface manipulation module: This module primarily handles all the low-level routines for manipulating parametric curves and surfaces.
Reference: [Hoh92] <author> M.E. Hohmeyer. </author> <title> Robust and Efficient Intersection for Solid Modeling. </title> <type> PhD thesis, </type> <institution> Computer Science Division, Department of Electrical Engineering and Computer Science, University of California, Berkeley, </institution> <year> 1992. </year>
Reference-contexts: Most of the recent work in the literature on Boolean combinations of curved models has focussed on computing the surface intersection between a pair of B-spline surfaces <ref> [KS88, SN91, Nat90, Hoh92, MC91, KPW90, BHHL88, BK90, KM97] </ref>. We shall now look at some of these methods. 1.2.2 Surface Intersection Techniques There is a significant body of literature addressing the surface intersection problem. Some recent surveys include [Pat93, Pra86, Hof89].
Reference: [Ips97] <author> I. C. F. Ipsen. </author> <title> Computing an eigenvector with inverse iteration. </title> <journal> SIAM Reviews, </journal> <volume> 39(2) </volume> <pages> 254-291, </pages> <year> 1997. </year>
Reference-contexts: Unfortunately, however, a small backward error does not imply a small forward error <ref> [Ips97] </ref>. Their relationship also depends on the distribution of eigenvalues. In the absence of this information, we have to resort to backward analysis. 66 Chapter 4 Surface Intersection Algorithm 4.1 Overview The problem of surface intersection corresponds to computing an accurate representation of the intersection curve.
Reference: [Jac95] <author> D. Jackson. </author> <title> Boundary representation modeling with local tolerances. </title> <booktitle> Proceedings of ACM Solid Modeling, </booktitle> <pages> pages 247-253, </pages> <year> 1995. </year>
Reference-contexts: A number of approaches have been proposed for robust and accurate B-rep computation in polyhedral modelers. One of the most common approaches is based on using tolerances with floating-point arithmetic <ref> [Jac95] </ref>. However, it is hard to decide a global tolerance value for all computations. To circumvent these problems, combinations of symbolic reasoning [HHK89] and adaptive tolerances [Seg90] have been proposed. Other algorithms include those based on redundancy elimination [FBZ93].
Reference: [Jar84] <author> G.E.M Jared. </author> <title> Synthesis of volume modeling and sculptured surfaces in build. </title> <booktitle> In CAD84, Computers in Design Engineering Conference Proceedings, </booktitle> <pages> pages 481-495, </pages> <year> 1984. </year>
Reference-contexts: Over the last few years, modeling using free-form surfaces (sculptured models) has become very useful throughout the commercial CAD/CAM/CAE industry. On the research front, there has been considerable effort in integrating geometric and solid modeling <ref> [Kal82, Jar84, CK83, VP84, KGI84, FH85, Far86] </ref>. In particular, there is a lot of interest in building complete solid representations from spline surfaces and their Boolean combinations [Hof89, RR92, CS85, Cas87, Wei85, RV82, Cha87, Men92].
Reference: [JI92] <author> E. R. Jessup and I. C. F. Ipsen. </author> <title> Improving the accuracy of inverse iteration. </title> <journal> SIAM Journal on Scientific and Statistical Computation, </journal> <volume> 13(2) </volume> <pages> 550-572, </pages> <year> 1992. </year>
Reference-contexts: Given these assumptions, choice of u 0 , and the fact that A x k = k x k , after i steps of the inverse iteration <ref> [JI92] </ref> u i = n It is easy to see that as i ! 1 the term that dominates corresponds to an eigenvalue that is closest to the point p in the complex plane (if there is such a unique eigenvalue). <p> Let p = k + *. Thus, (A p I + ) v i+1 = u i 65 v i+1 kv i+1 k 1 kv i+1 k 1 = , where k k 1 &lt; j*j + ffi + 1 kv i+1 k 1 <ref> [JI92] </ref>. This shows that if k v i+1 k 1 is large and * and ffi are small, u i+1 gives a small residue.
Reference: [Joh87] <author> J.K. Johnstone. </author> <title> The Sorting of points along an algebraic curve. </title> <type> PhD thesis, </type> <institution> Cornell University, Department of Computer Science, </institution> <year> 1987. </year>
Reference-contexts: Chan [Cha87] uses special properties of quadric surfaces and other free-form surface to design industrial parts. A number of techniques like interval arithmetic and shell representations [VP84, KGI84, Taw91, Sat91, Men92, Duf92] have been developed to perform solid design with free-form geometries. Sorting points along intersection curves <ref> [Joh87] </ref> was used to classify components with respect to solids. The Alpha 1 CAD system developed at the University of Utah has many features to combine solids composed of sculptured surfaces. A systematic approach for design, analysis and illustration of assemblies has been presented in [DC95, RMS92].
Reference: [Kaj82] <author> J. Kajiya. </author> <title> Ray tracing parametric patches. </title> <journal> Computer Graphics, </journal> <volume> 16(3) </volume> <pages> 245-254, </pages> <year> 1982. </year>
Reference-contexts: Algebraic methods formulate the intersection problem in terms of solutions of a system of algebraic equations. Given the equations, the variables are eliminated using techniques from elimination theory [Sal85] and the problem is reduced to finding roots of a univariate polynomial. This approach was applied to ray-tracing by Kajiya <ref> [Kaj82] </ref> and to curve intersections by Sederberg [Sed83]. For lower degree curve intersection (up to degree three or four), the implicitization approach results in the fastest algorithms. However, the problem of finding roots of higher degree polynomials can be numerically unstable [Wil59].
Reference: [Kal82] <author> Y.E. Kalay. </author> <title> Modeling polyhedral solids bounded by multi-curved parametric surfaces. </title> <booktitle> ACM IEEE Nineteenth Design Automation Conference Proceedings, </booktitle> <pages> pages 501-507, </pages> <year> 1982. </year> <month> 164 </month>
Reference-contexts: Over the last few years, modeling using free-form surfaces (sculptured models) has become very useful throughout the commercial CAD/CAM/CAE industry. On the research front, there has been considerable effort in integrating geometric and solid modeling <ref> [Kal82, Jar84, CK83, VP84, KGI84, FH85, Far86] </ref>. In particular, there is a lot of interest in building complete solid representations from spline surfaces and their Boolean combinations [Hof89, RR92, CS85, Cas87, Wei85, RV82, Cha87, Men92].
Reference: [KGI84] <author> F. Kimura and Geomap-III. </author> <title> Designing solids with free-form surfaces. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 4 </volume> <pages> 58-72, </pages> <year> 1984. </year>
Reference-contexts: Over the last few years, modeling using free-form surfaces (sculptured models) has become very useful throughout the commercial CAD/CAM/CAE industry. On the research front, there has been considerable effort in integrating geometric and solid modeling <ref> [Kal82, Jar84, CK83, VP84, KGI84, FH85, Far86] </ref>. In particular, there is a lot of interest in building complete solid representations from spline surfaces and their Boolean combinations [Hof89, RR92, CS85, Cas87, Wei85, RV82, Cha87, Men92]. <p> The algorithm uses subdivision methods to evaluate surface intersections, and represents the trimming boundary with piecewise linear segments. Chan [Cha87] uses special properties of quadric surfaces and other free-form surface to design industrial parts. A number of techniques like interval arithmetic and shell representations <ref> [VP84, KGI84, Taw91, Sat91, Men92, Duf92] </ref> have been developed to perform solid design with free-form geometries. Sorting points along intersection curves [Joh87] was used to classify components with respect to solids.
Reference: [Kim90] <author> Deok-Soo Kim. </author> <title> Cones on Bezier Curves and Surfaces. </title> <type> PhD thesis, </type> <institution> University of Michigan, </institution> <address> Ann Arbor, </address> <year> 1990. </year>
Reference-contexts: In this class of methods, identifying a point on every loop is significantly harder than identifying a point on open components. As a result, simultaneously with the development of new ideas for evaluating such curves, a number of techniques for loop detection have been proposed <ref> [SKW85, SM88, THS89, Che89, Hoh91, Kim90, KPP90, KPW90] </ref>. Most of the loop detection criteria are based on bounds on the Gauss map of the surfaces being intersected.
Reference: [KKM97] <author> J. Keyser, S. Krishnan, and D. Manocha. </author> <title> Efficient and accurate b-rep generation of low degree sculptured solids using exact arithmetic. </title> <booktitle> In ACM/SIGGRAPH Symposium on Solid Modeling, </booktitle> <pages> pages 42-55, </pages> <year> 1997. </year>
Reference-contexts: Finding a tolerance that works for all models is very difficult. In some cases, we had to change tolerances to make our system work. Currently, we are incorporating B-rep computation using exact rational arithmetic <ref> [KKM97] </ref> to prevent most robustness and accuracy problems. The use of exact arithmetic can slow down the computation time, however exploiting parallelism helps significantly in the overall speed. The accuracy of the B-rep generated is determined by the accuracy of the intersection curves between solids. <p> Experience with the BOOLE system has shown us that these problems can arise in a significant number of real-world cases. We are currently exploring approaches to address the robustness issue by making use of exact arithmetic and exact representations <ref> [KKM97] </ref>. This eliminates the problems related to numerical precision. In addition, the use of exact arithmetic allows us to use perturbations methods to eliminate degeneracies. Perturbation methods have proven to be useful at eliminating degeneracies in the linear case and may be similarly useful in the curved-surface domain.
Reference: [KKMN95] <author> S. Kumar, S. Krishnan, D. Manocha, and A. Narkhede. </author> <title> Representation and display of complex csg models. </title> <type> Technical Report TR95-019, </type> <institution> Department of Computer Science, University of North Carolina, </institution> <year> 1995. </year>
Reference-contexts: This routine is not used by the BOOLE system directly for B-rep computation. Rather, it is used as a means of data compaction by a display system (developed at UNC) that renders large NURBS models. Details of the curve fitting method can be found in <ref> [KKMN95] </ref>. * Graph Algorithms: This final module is used in maintaining topology information for each solid in our system. Apart from the simple tools to manipulate graph structures, it contains an algorithm to generate connected components in graphs. The algorithm uses repeated calls to a depth-first traversal routine in graphs.
Reference: [KM83] <author> P.A. Koparkar and S. P. Mudur. </author> <title> A new class of algorithms for the processing of parametric curves. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 15(1) </volume> <pages> 41-45, </pages> <year> 1983. </year>
Reference-contexts: Its convergence is improved using Bezier clipping [SWZ89, Sed89, NSK90]. Bezier clipping makes use of the convex hull property in a powerful way, by determining parameter ranges which are guaranteed not to include points of intersection. The interval arithmetic approach is similar to subdivision <ref> [KM83] </ref>. The curves are divided into intervals using vertical and horizontal tangents which define rectangular bounding boxes. The subdivision amounts to evaluating the coordinate of the midpoint of the interval and defining the resulting rectangles.
Reference: [KM97] <author> S. Krishnan and D. Manocha. </author> <title> An efficient surface intersection algorithm based on the lower dimensional formulation. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 16(1) </volume> <pages> 74-106, </pages> <year> 1997. </year>
Reference-contexts: Most of the recent work in the literature on Boolean combinations of curved models has focussed on computing the surface intersection between a pair of B-spline surfaces <ref> [KS88, SN91, Nat90, Hoh92, MC91, KPW90, BHHL88, BK90, KM97] </ref>. We shall now look at some of these methods. 1.2.2 Surface Intersection Techniques There is a significant body of literature addressing the surface intersection problem. Some recent surveys include [Pat93, Pra86, Hof89].
Reference: [KPP90] <author> G.A. Kriezis, P.V. Prakash, and N.M. Patrikalakis. </author> <title> Method for intersecting algebraic surfaces with rational polynomial patches. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 22(10) </volume> <pages> 645-654, </pages> <year> 1990. </year>
Reference-contexts: The biggest drawback in this approach is the lack of robustness. Small loops could easily be missed depending on the frequency with which the curves are evaluated. In the last decade, techniques based on curve tracing have been widely used to evaluate high degree curves <ref> [BFJP87, BHHL88, KPP90, MC91] </ref>. The main idea is to compute at least one point on every component of the curve and use the local geometry of the curve to evaluate successive points. <p> In this class of methods, identifying a point on every loop is significantly harder than identifying a point on open components. As a result, simultaneously with the development of new ideas for evaluating such curves, a number of techniques for loop detection have been proposed <ref> [SKW85, SM88, THS89, Che89, Hoh91, Kim90, KPP90, KPW90] </ref>. Most of the loop detection criteria are based on bounds on the Gauss map of the surfaces being intersected. <p> Patriakalakis et. al. <ref> [KPP90] </ref> precomputed the most significant points of the intersection curve between an algebraic surface and a parametric patch to identify the main features of the curve. <p> Furthermore, these algorithms may not work well if the intersection curve is self-intersecting. Techniques based on finding critical points of plane vector fields inside the domain of the surfaces have been proposed by <ref> [Che89, KPP90, KPW90, ML95] </ref>. Cheng [Che89] defined a plane vector field as the gradient of an oriented distance function of one surface from the other. <p> Cheng [Che89] defined a plane vector field as the gradient of an oriented distance function of one surface from the other. The critical points are found by following special integral curves that connect all the critical points. <ref> [KPP90, KPW90, ML95] </ref> use rotational indices of (planar and three-dimensional) vector fields to determine presence of critical points. <p> Most existing methods use the idea of rotational index of the vector field inside a closed curve <ref> [KPP90, KPW90] </ref>. However, this test is inconclusive because if a particular region contains two critical points of opposite rotational index, then we obtain net rotational index of zero.
Reference: [KPW90] <institution> G.A. Kriezis, N.M. Patrikalakis, and F.E. </institution> <month> Wolter. </month> <title> Topological and differential equation methods for surface intersections. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 24(1) </volume> <pages> 41-55, </pages> <year> 1990. </year>
Reference-contexts: Most of the recent work in the literature on Boolean combinations of curved models has focussed on computing the surface intersection between a pair of B-spline surfaces <ref> [KS88, SN91, Nat90, Hoh92, MC91, KPW90, BHHL88, BK90, KM97] </ref>. We shall now look at some of these methods. 1.2.2 Surface Intersection Techniques There is a significant body of literature addressing the surface intersection problem. Some recent surveys include [Pat93, Pra86, Hof89]. <p> In this paper, Piegl uses geometric principles to compute the intersection of quadric surfaces very accurately. However, the algorithm cannot be easily extended to the general intersection problem. Marching methods: These are by far the most widely used <ref> [Far86, BHHL88, BK90, KPW90] </ref> and are easy to implement. The main advantage of this technique is its generality, allowing intersection of arbitrary parametric surfaces as well as their offsets and blends. <p> The intersection curve is defined implicitly as an algebraic set based on the surface equations, as a curve of zero distance between the two surfaces, or as a vector field <ref> [Hof90, KPW90, Che89] </ref>. Tracing is done on the intersection curve in higher dimensions or on its projection in the plane. Most algorithms use the local geometry of the curve coupled with quasi-Newton's methods [BHHL88, BK90] for tracing. <p> In this class of methods, identifying a point on every loop is significantly harder than identifying a point on open components. As a result, simultaneously with the development of new ideas for evaluating such curves, a number of techniques for loop detection have been proposed <ref> [SKW85, SM88, THS89, Che89, Hoh91, Kim90, KPP90, KPW90] </ref>. Most of the loop detection criteria are based on bounds on the Gauss map of the surfaces being intersected. <p> Furthermore, these algorithms may not work well if the intersection curve is self-intersecting. Techniques based on finding critical points of plane vector fields inside the domain of the surfaces have been proposed by <ref> [Che89, KPP90, KPW90, ML95] </ref>. Cheng [Che89] defined a plane vector field as the gradient of an oriented distance function of one surface from the other. <p> Cheng [Che89] defined a plane vector field as the gradient of an oriented distance function of one surface from the other. The critical points are found by following special integral curves that connect all the critical points. <ref> [KPP90, KPW90, ML95] </ref> use rotational indices of (planar and three-dimensional) vector fields to determine presence of critical points. <p> There are a number of algorithms proposed for tracing <ref> [BHHL88, BK90, Che89, KPW90] </ref>. Given a point on the curve, an approximate value of the next point is obtained by taking a small step size in a direction determined by the local geometry of the curve. A single tracing step is shown in Figure 4.2. <p> Most existing methods use the idea of rotational index of the vector field inside a closed curve <ref> [KPP90, KPW90] </ref>. However, this test is inconclusive because if a particular region contains two critical points of opposite rotational index, then we obtain net rotational index of zero.
Reference: [KS88] <author> S. Katz and T.W. </author> <title> Sederberg. Genus of the intersection curve of two rational surface patches. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 5, </volume> <year> 1988. </year>
Reference-contexts: Most of the recent work in the literature on Boolean combinations of curved models has focussed on computing the surface intersection between a pair of B-spline surfaces <ref> [KS88, SN91, Nat90, Hoh92, MC91, KPW90, BHHL88, BK90, KM97] </ref>. We shall now look at some of these methods. 1.2.2 Surface Intersection Techniques There is a significant body of literature addressing the surface intersection problem. Some recent surveys include [Pat93, Pra86, Hof89].
Reference: [Lam87] <author> L. Lamport. </author> <title> A fast mutual exclusion algorithm. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 5(1) </volume> <pages> 1-11, </pages> <year> 1987. </year> <month> 165 </month>
Reference-contexts: It is clear that the most effective parallel algorithm is one where the tasks are equally distributed among all the processors. The problem of load balancing has received considerable attention for a long time due to the fact that a single scheme is not applicable for parallelizing all algorithms <ref> [Lam87, YA93, Whi94, Gea95, HL95] </ref>. The effectiveness of different techniques varies with the nature of the problem it is used for. Hence there arises a need for newer problem specific analysis methods which help in choosing the most effective load balancing technique.
Reference: [Las86] <author> D. </author> <title> Lasser. Intersection of parametric surfaces in the bernstein-bezier representation. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 18(4) </volume> <pages> 186-192, </pages> <year> 1986. </year>
Reference-contexts: The last step is to merge all the individual curves together to get the final solution. This approach has the flavor of the divide and conquer paradigm used extensively in algorithmic design. Subdivisions are based on the geometric properties of the control polytopes <ref> [LR80, Gei83, Las86] </ref>. These methods are convergent in the limit, but if used for high-precision results, lead to data proliferation and are consequently slow. In case subdivision is stopped after some finite number of steps, it may miss small loops or lead to incorrect connectivity in the presence of singularities.
Reference: [LR80] <author> J.M. Lane and R.F. Riesenfeld. </author> <title> A theoretical development for the computer generation and display of piecewise polynomial surfaces. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 2(1) </volume> <pages> 150-159, </pages> <year> 1980. </year>
Reference-contexts: The last step is to merge all the individual curves together to get the final solution. This approach has the flavor of the divide and conquer paradigm used extensively in algorithmic design. Subdivisions are based on the geometric properties of the control polytopes <ref> [LR80, Gei83, Las86] </ref>. These methods are convergent in the limit, but if used for high-precision results, lead to data proliferation and are consequently slow. In case subdivision is stopped after some finite number of steps, it may miss small loops or lead to incorrect connectivity in the presence of singularities. <p> Subdivision based approaches use the geometric properties of curve and surface representations <ref> [LR80] </ref>. Given two spline curves, the intersection algorithm proceeds by comparing the convex hulls of their control polytopes. Control polytopes and their relation to splines are described in chapter 2. If they do not overlap, the curves or surfaces do not intersect. <p> The subdivision based algorithms subdivide the domain up to a user-specified tolerance and evaluate the curves accordingly <ref> [Gei83, LR80, MP93] </ref>. No good methods are known for computing a good tolerance value during curve tracing. Thus, most implementations use a conservative value for the tolerance.
Reference: [LTH86] <author> D. H. Laidlaw, W. B. Trumbore, and J. F. Hughes. </author> <title> Constructive solid geometry for polyhedral objects. </title> <journal> ACM Computer Graphics, </journal> <volume> 20 </volume> <pages> 161-170, </pages> <year> 1986. </year>
Reference-contexts: Weiler [Wei85, Wei86] observed that a number of geometric operations on polyhedra simplify when non-manifold structures are permitted. Paoluzzi et. al. [PRS86] implement Boolean operations on B-rep solids by using only triangular faces for their polyhedra. Laidlaw et. al. <ref> [LTH86] </ref> describes another method in which all faces must be convex polygons, and suggest random perturbations to eliminate complex vertex intersection cases. A number of approaches have been proposed for robust and accurate B-rep computation in polyhedral modelers.
Reference: [Mac02] <author> F.S. </author> <title> Macaulay. On some formula in elimination. </title> <journal> Proceedings of London Mathematical Society, </journal> <volume> 1(33) </volume> <pages> 3-27, </pages> <month> May </month> <year> 1902. </year>
Reference-contexts: In this dissertation, we use resultants to compute implicit forms of surfaces from their parametric representation and to detect the presence of loops in our surface intersection algorithm. <ref> [Mac02] </ref> provided a general method for eliminating n variables from n homogeneous polynomials. The resultant is expressed as a ratio of two determinants. However, a single determinant formulation exists for n = 2 and 3 [Sal85, Dix08].
Reference: [Man86] <author> M. Mantyla. </author> <title> Boolean operations of 2-manifolds through vertex neighborhood classification. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 5 </volume> <pages> 1-29, </pages> <year> 1986. </year>
Reference-contexts: Perform the same for all faces of B. 4. Assemble all the faces into the new solid. 1.2.1 Boundary Evaluation Techniques Polyhedral solids: Algorithms for performing Boolean operations on polyhedra 8 in B-rep have been proposed by a number of researchers <ref> [Bra75, Hil82, Man86, OKK73, Voe74, Wes80] </ref>. Most of these techniques rely heavily on the algebraic formulation of the problem.
Reference: [Man88] <author> M. Mantyla. </author> <title> An Introduction to Solid Modeling. </title> <publisher> Computer Science Press, </publisher> <address> Rockville, Maryland, </address> <year> 1988. </year>
Reference-contexts: It is similar to the winged-edge data structure [Hof89, MT83]. To start with, we assume that each of the input objects has manifold boundaries, and the Boolean operation is regularized <ref> [Man88] </ref>. While it is possible to generate non-manifold objects from regularized Booleans on manifold solids, we assume for the sake of simplicity that such cases do not occur. Given this assumption, it has been shown that an unambiguous topological representation is possible for a solid [Hof89].
Reference: [Man92] <author> D. Manocha. </author> <title> Algebraic and Numeric Techniques for Modeling and Robotics. </title> <type> PhD thesis, </type> <institution> Computer Science Division, Department of Electrical Engineering and Computer Science, University of California, Berkeley, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: However, the problem of finding roots of higher degree polynomials can be numerically unstable [Wil59]. Therefore, the overall algorithm for intersection may not be accurate. Moreover, the symbolic expansion of determinants to compute resultants can be computationally expensive [Hof90]. To circumvent these problems, Manocha et. al. <ref> [Man92, MD94] </ref> have proposed methods combining elimination theory with matrix computations. The resulting problem 13 is reduced to computing the eigenvalues of a matrix as opposed to roots of a polynomial. <p> In either case the resultant can be expressed as a matrix determinant and the entries of the matrix are univariate polynomials. Such matrices are called matrix polynomials. Instead 49 of symbolically expanding the determinant, we reduce the problem to an eigenvalue for mulation <ref> [Man92] </ref>. <p> basis see section 2.2.2) yields a matrix polynomial L (u) = M n u n + M n1 u n1 + : : : + M 0 : (3.4) The intersection algorithm computes the roots of Determinant (L (u)) = 0 by solving an eigenvalue problem in the following manner <ref> [Man92] </ref>: Theorem 4 Given the matrix polynomial, L (u) the roots of the polynomial corresponding to its determinant are the eigenvalues of the generalized system C 1 u + C 2 , where C 1 = 6 6 6 6 6 6 I m 0 0 : : : 0 . <p> Computing the implicit form: The resultant (determinant of M (x; y; z; w)) provides the implicit representation of the surface if its parameterization does not contain base points. However, in their presence, the resultant method will not work. It was shown in <ref> [Man92] </ref> that the maximum rank submatrix (largest non-vanishing minor) contains the implicit form as a factor in such cases. In order to obtain the implicit representation of the surface, we have to find the maximum rank submatrix. This can be achieved by performing Gaussian elimination on the original matrix.
Reference: [MC91] <author> D. Manocha and J.F. Canny. </author> <title> A new approach for surface intersection. </title> <journal> International Journal of Computational Geometry and Applications, </journal> <volume> 1(4) </volume> <pages> 491-516, </pages> <year> 1991. </year> <note> Special issue on Solid Modeling. </note>
Reference-contexts: Most of the recent work in the literature on Boolean combinations of curved models has focussed on computing the surface intersection between a pair of B-spline surfaces <ref> [KS88, SN91, Nat90, Hoh92, MC91, KPW90, BHHL88, BK90, KM97] </ref>. We shall now look at some of these methods. 1.2.2 Surface Intersection Techniques There is a significant body of literature addressing the surface intersection problem. Some recent surveys include [Pat93, Pra86, Hof89]. <p> The biggest drawback in this approach is the lack of robustness. Small loops could easily be missed depending on the frequency with which the curves are evaluated. In the last decade, techniques based on curve tracing have been widely used to evaluate high degree curves <ref> [BFJP87, BHHL88, KPP90, MC91] </ref>. The main idea is to compute at least one point on every component of the curve and use the local geometry of the curve to evaluate successive points. <p> The plane curves with one-to-one correspondence with the intersection curve in space are shown in Figure 4.1. We represent the plane curve as an unevaluated determinant <ref> [MC91] </ref>. <p> To compute the first and higher order partials, we use a simple variation of Gaussian elimination <ref> [MC91] </ref>. The basic idea is to compute the partial derivative of each matrix entry at the beginning of computation and update the derivative information with each step of Gaussian elimination.
Reference: [MC93] <author> D. Manocha and J.F. Canny. </author> <title> Multipolynomial resultant algorithms. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 15(2) </volume> <pages> 99-122, </pages> <year> 1993. </year>
Reference-contexts: We use the Sylvester resultant [Sal85] (see chapter 2) to eliminate variable a 2 . We use an algorithm based on multivariate interpolation <ref> [MC93] </ref> to compute the resultant of a set of polynomials efficiently. The main bottleneck in most resultant algorithms is the symbolic expansion of determinants. Most of the computer algebra systems use symbolic algorithms like polynomial manipulations for resultants, which are very expensive. <p> The main bottleneck in most resultant algorithms is the symbolic expansion of determinants. Most of the computer algebra systems use symbolic algorithms like polynomial manipulations for resultants, which are very expensive. Further, the magnitude of intermediate expressions grows quickly, and the memory requirements are high. The algorithm in <ref> [MC93] </ref> performs all computations over finite fields (all numbers are computed modulo some prime number), and uses a probabilistic incremental algorithm based on the Chinese Remainder Theorem to recover actual coefficients. A practical implementation of the Sylvester resultant introduces extraneous factors in the resultant that must be removed.
Reference: [MD94] <author> D. Manocha and J. Demmel. </author> <title> Algorithms for intersecting parametric and algebraic curves i: simple intersections. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 13(1) </volume> <pages> 73-100, </pages> <year> 1994. </year>
Reference-contexts: However, the problem of finding roots of higher degree polynomials can be numerically unstable [Wil59]. Therefore, the overall algorithm for intersection may not be accurate. Moreover, the symbolic expansion of determinants to compute resultants can be computationally expensive [Hof90]. To circumvent these problems, Manocha et. al. <ref> [Man92, MD94] </ref> have proposed methods combining elimination theory with matrix computations. The resulting problem 13 is reduced to computing the eigenvalues of a matrix as opposed to roots of a polynomial. <p> In case the actual number of intersections between the original pair of control polytopes is high, we use the QR algorithm <ref> [MD94] </ref>. The technique of algebraic pruning works best when there are relatively few intersections. Let k be the number of intersections between the control polytopes. <p> In each case, the problem is reduced to an eigenvalue problem and we compute the eigenvalues in a domain. We have performed comparisons with the QR algorithm in <ref> [MD94] </ref> and an implementation of implicitization based algorithm described in [SP86] and Bezier clipping described in [SN90]. <p> If a given pair of curves or a curve and a surface have very few intersections, the technique based on algebraic pruning gives almost an order of magnitude improvement over the algorithm presented in <ref> [MD94] </ref>. This is mainly due to the fact that we are only computing the relevant solutions in the domain of interest as opposed to computing all the solutions.
Reference: [Mea84] <author> D. J. Meagher. </author> <title> The solids engine: a processor for interactive solid modeling. </title> <booktitle> In Proceedings of Nicograph, </booktitle> <year> 1984. </year> <month> 166 </month>
Reference-contexts: The Alpha 1 CAD system developed at the University of Utah has many features to combine solids composed of sculptured surfaces. A systematic approach for design, analysis and illustration of assemblies has been presented in [DC95, RMS92]. Ray representations along with specialized parallel architectures <ref> [Mea84, EKL + 91, Men92] </ref> like the RayCasting engine and `Solids engine' were used to achieve interactive solid modeling on low-degree primitives like quadrics. Mantyla and Ranta [MR86] describe methods to perform solid modeling using HutDesign.
Reference: [Men92] <author> J. Menon. </author> <title> Constructive Shell Representations for Free-form Surfaces and Solids. </title> <type> PhD thesis, </type> <institution> Dept. of Computer Science, Cornell University, </institution> <year> 1992. </year>
Reference-contexts: On the research front, there has been considerable effort in integrating geometric and solid modeling [Kal82, Jar84, CK83, VP84, KGI84, FH85, Far86]. In particular, there is a lot of interest in building complete solid representations from spline surfaces and their Boolean combinations <ref> [Hof89, RR92, CS85, Cas87, Wei85, RV82, Cha87, Men92] </ref>. However, the major bottleneck is in performing robust, efficient and accurate Boolean operations on the sculptured models. <p> The algorithm uses subdivision methods to evaluate surface intersections, and represents the trimming boundary with piecewise linear segments. Chan [Cha87] uses special properties of quadric surfaces and other free-form surface to design industrial parts. A number of techniques like interval arithmetic and shell representations <ref> [VP84, KGI84, Taw91, Sat91, Men92, Duf92] </ref> have been developed to perform solid design with free-form geometries. Sorting points along intersection curves [Joh87] was used to classify components with respect to solids. <p> The Alpha 1 CAD system developed at the University of Utah has many features to combine solids composed of sculptured surfaces. A systematic approach for design, analysis and illustration of assemblies has been presented in [DC95, RMS92]. Ray representations along with specialized parallel architectures <ref> [Mea84, EKL + 91, Men92] </ref> like the RayCasting engine and `Solids engine' were used to achieve interactive solid modeling on low-degree primitives like quadrics. Mantyla and Ranta [MR86] describe methods to perform solid modeling using HutDesign.
Reference: [Mil92] <author> P. S. Milne. </author> <title> On the solutions of a set of polynomial equations. </title> <booktitle> In Symbolic and Numerical Computation for Artificial Intelligence, </booktitle> <pages> pages 89-102, </pages> <year> 1992. </year>
Reference-contexts: The number of real roots is computed by counting the number of sign changes of this sequence at the endpoints of the interval. Extending this idea to multivariate polynomial systems (that yield zero-dimensional solution sets) has been the focus of research for quite some time. Milne <ref> [Mil92] </ref> introduced the volume function which essentially achieved the extension to multivariate polynomial systems. 5.4.1 Multivariate Sturm sequences Here, we describe briefly the algorithm proposed by Milne [Mil92] to compute the number of common real solutions of n polynomials in n variables inside an n-dimensional rectangle. <p> Milne <ref> [Mil92] </ref> introduced the volume function which essentially achieved the extension to multivariate polynomial systems. 5.4.1 Multivariate Sturm sequences Here, we describe briefly the algorithm proposed by Milne [Mil92] to compute the number of common real solutions of n polynomials in n variables inside an n-dimensional rectangle. This algorithm is an extension of the univariate case which constructs a polynomial sequence, and measures sign variations of this sequence at the endpoints of the interval. <p> by P (M (b 1 ; b 2 )) + P (M (a 1 ; a 2 )) P (M (b 1 ; a 2 )) P (M (a 1 ; b 2 )) : 110 The justification for various steps and extension to arbitrary dimensions can be found in <ref> [Mil92] </ref>. 5.4.2 Converging to the critical points In order to find all the collinear normal points between the two surfaces, we have to converge to each critical point within a given tolerance.
Reference: [ML95] <author> Y. Ma and R. C. Luo. </author> <title> Topological method for loop detection of surface intersection problems. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 27(11) </volume> <pages> 811-820, </pages> <year> 1995. </year>
Reference-contexts: Furthermore, these algorithms may not work well if the intersection curve is self-intersecting. Techniques based on finding critical points of plane vector fields inside the domain of the surfaces have been proposed by <ref> [Che89, KPP90, KPW90, ML95] </ref>. Cheng [Che89] defined a plane vector field as the gradient of an oriented distance function of one surface from the other. <p> Cheng [Che89] defined a plane vector field as the gradient of an oriented distance function of one surface from the other. The critical points are found by following special integral curves that connect all the critical points. <ref> [KPP90, KPW90, ML95] </ref> use rotational indices of (planar and three-dimensional) vector fields to determine presence of critical points. <p> Most existing methods use the idea of rotational index of the vector field inside a closed curve [KPP90, KPW90]. However, this test is inconclusive because if a particular region contains two critical points of opposite rotational index, then we obtain net rotational index of zero. Recently <ref> [ML95] </ref> extended this to a three-dimensional vector field such that rotational index of this field decides conclusively the number of critical points (provided they are non-degenerate). However, their method is susceptible to failure if the sampling grid in the domain contains contours of zero Jacobians completely inside them.
Reference: [MP93] <author> T. Maekawa and N. M. Patrikalakis. </author> <title> Computation of singularities and intersections of offsets of planar curves. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 10, </volume> <year> 1993. </year>
Reference-contexts: The subdivision based algorithms subdivide the domain up to a user-specified tolerance and evaluate the curves accordingly <ref> [Gei83, LR80, MP93] </ref>. No good methods are known for computing a good tolerance value during curve tracing. Thus, most implementations use a conservative value for the tolerance.
Reference: [MR86] <author> M. Mantyla and M. Ranta. </author> <title> Interactive solid modeling in hutdesign. </title> <booktitle> In Proceedings of Computer Graphics, </booktitle> <address> Tokyo, </address> <year> 1986. </year>
Reference-contexts: Ray representations along with specialized parallel architectures [Mea84, EKL + 91, Men92] like the RayCasting engine and `Solids engine' were used to achieve interactive solid modeling on low-degree primitives like quadrics. Mantyla and Ranta <ref> [MR86] </ref> describe methods to perform solid modeling using HutDesign. Rossignac et. al. [RMS92] present algorithms for inspection of cross-sections and interference between solids with bounded degree and limited height of CSG trees.
Reference: [MT83] <author> M. Mantyla and M. Tamminen. </author> <title> Localized set operations for solid modeling. </title> <journal> In Computer Graphics, </journal> <volume> volume 17, </volume> <pages> pages 279-288, </pages> <year> 1983. </year>
Reference-contexts: Every solid is represented as a set of trimmed parametric surface (tensor-product Bezier) patches (for definition, see chapter 2) which define the solid boundary. 115 Topological information of the solid is maintained in terms of an adjacency graph. It is similar to the winged-edge data structure <ref> [Hof89, MT83] </ref>. To start with, we assume that each of the input objects has manifold boundaries, and the Boolean operation is regularized [Man88]. While it is possible to generate non-manifold objects from regularized Booleans on manifold solids, we assume for the sake of simplicity that such cases do not occur.
Reference: [Nat90] <author> B.K. Natarajan. </author> <title> On computing the intersection of b-splines. </title> <booktitle> In ACM Symposium on Computationl Geometry, </booktitle> <pages> pages 157-167, </pages> <year> 1990. </year>
Reference-contexts: Most of the recent work in the literature on Boolean combinations of curved models has focussed on computing the surface intersection between a pair of B-spline surfaces <ref> [KS88, SN91, Nat90, Hoh92, MC91, KPW90, BHHL88, BK90, KM97] </ref>. We shall now look at some of these methods. 1.2.2 Surface Intersection Techniques There is a significant body of literature addressing the surface intersection problem. Some recent surveys include [Pat93, Pra86, Hof89].
Reference: [NM95] <author> A. Narkhede and D. Manocha. </author> <title> Fast polygon triangulation based on seidel's algorithm. </title> <editor> In A. Paeth, editor, </editor> <booktitle> Graphics Gems V, </booktitle> <pages> pages 394-397, </pages> <publisher> Academic Press, </publisher> <year> 1995. </year>
Reference-contexts: In our algorithm for boundary evaluation, we represent the trimming boundary of a surface patch as a simple polygon. During ray shooting and trimmed surface intersection operations, we have to perform point location queries in the trimmed domain. We use a fast implementation <ref> [NM95] </ref> of Seidel's algorithm for this purpose. 45 Chapter 3 Curve Surface Intersection The problems of computing the intersection of curves and surfaces are fundamental in computer graphics and geometric modeling. Common applications include surface-surface intersection, ray-tracing, hidden-curve removal and visibility algorithms [Hof89, EC90, NSK90, SP86]. <p> We use a very fast implementation of Seidel's triangulation algorithm [Sei91] provided by Atul Narkhede et al <ref> [NM95] </ref>. The point location algorithm based on the triangulation algorithm was also implemented by Atul Narkhede. We use Mike Hohmeyer's [Hoh91] implementation of Seidel's randomized linear programming algorithm [Sei90b].
Reference: [NSK90] <author> T. Nishita, T.W. Sederberg, and M. Kakimoto. </author> <title> Ray tracing trimmed rational surface patches. </title> <journal> Computer Graphics, </journal> <volume> 24(4) </volume> <pages> 337-345, </pages> <year> 1990. </year>
Reference-contexts: Eventually, the curve segments are approximated by straight lines up to a certain tolerance, and their intersection point is accepted as the intersection of two curves. A simple subdivision algorithm has linear convergence in the domain. Its convergence is improved using Bezier clipping <ref> [SWZ89, Sed89, NSK90] </ref>. Bezier clipping makes use of the convex hull property in a powerful way, by determining parameter ranges which are guaranteed not to include points of intersection. The interval arithmetic approach is similar to subdivision [KM83]. <p> We use a fast implementation [NM95] of Seidel's algorithm for this purpose. 45 Chapter 3 Curve Surface Intersection The problems of computing the intersection of curves and surfaces are fundamental in computer graphics and geometric modeling. Common applications include surface-surface intersection, ray-tracing, hidden-curve removal and visibility algorithms <ref> [Hof89, EC90, NSK90, SP86] </ref>. Our surface-surface intersection algorithm (chapter 4) needs starting points on each component of the intersection curve. We use curve-surface intersection to evaluate these starting points. Our algorithm for boundary evaluation relies on a ray-shooting approach for the classification of certain solid features. <p> Bezier clipping converges more robustly with the 60 polynomial's solution than does Newton's method. This method was first developed for ray-tracing Bezier patches <ref> [NSK90] </ref>. The main advantages of this method include applicability to high-degree polynomials, robustness and faster convergence. It does not require initial guesses unlike Newton's method and can provide all solutions within a specified range.
Reference: [OKK73] <author> N. Okino, Y. Kakazu, and H. Kubo. TIPS-1: </author> <title> Technical Information Processing System for Computer Aided Design and Manufacturing. Computer Languages for Numerical Control, </title> <editor> J. Hatvany, ed., </editor> <publisher> North Holland, </publisher> <address> Amsterdam, </address> <year> 1973. </year>
Reference-contexts: Perform the same for all faces of B. 4. Assemble all the faces into the new solid. 1.2.1 Boundary Evaluation Techniques Polyhedral solids: Algorithms for performing Boolean operations on polyhedra 8 in B-rep have been proposed by a number of researchers <ref> [Bra75, Hil82, Man86, OKK73, Voe74, Wes80] </ref>. Most of these techniques rely heavily on the algebraic formulation of the problem.
Reference: [O'N66] <author> B. O'Neill. </author> <title> Elementary Differential Geometry. </title> <publisher> Academic Press, </publisher> <address> London, UK, </address> <year> 1966. </year> <month> 167 </month>
Reference-contexts: W s W V s VW s W t W V t VW t 31 2.2.1 Gauss Maps Gauss maps provide a convenient way to describe the normals of a surface. We define the Gauss map of a surface with a continuous unit normal vector field as <ref> [O'N66] </ref> Definition 3 The Gauss map G f of a surface F, is a map G f : F ! S 2 , a sphere embedded in R 3 , which maps point F (s; t) to the vector U (s; t), translated to the origin, where U (s; t) =
Reference: [Pat93] <author> N.M. Patrikalakis. </author> <title> Surface-to-surface intersections. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 13(1) </volume> <pages> 89-95, </pages> <year> 1993. </year>
Reference-contexts: We shall now look at some of these methods. 1.2.2 Surface Intersection Techniques There is a significant body of literature addressing the surface intersection problem. Some recent surveys include <ref> [Pat93, Pra86, Hof89] </ref>. One of the main issues that has 10 to be considered while designing surface intersection algorithms is that two surfaces can intersect in a number of components including small loops and singularities (see Figure 1.4).
Reference: [PFTV90] <author> W.H. Press, B.P. Flannery, S.A. Teukolsky, and W.T. Vetterling. </author> <title> Numerical Recipes: </title> <booktitle> The Art of Scientific Computing. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1990. </year>
Reference-contexts: We use Powell's method <ref> [PFTV90] </ref> as our local minimization algorithm. In our experience, the minimization step converges within 3-5 iterations for a tolerance of 10 8 . By applying this algorithm on all pairs of patches, we obtain a set of curves in the domain of every patch. <p> Various parts of our surface-surface intersection algorithm use these numerical algorithms. We have also implemented the algorithm for local minimization given in Press et. al <ref> [PFTV90] </ref>. The minimization routine is used in conjunction with the tracing algorithm to improve the accuracy of the intersection curve. * Symbolic module: This module comprises basically of routines for computing various resultants.
Reference: [Pie89] <author> L. Piegl. </author> <title> Geometric method of intersecting natural quadrics represented in trimmed surface form. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 21(4) </volume> <pages> 201-212, </pages> <year> 1989. </year>
Reference-contexts: Analytic methods: Analytic methods are based on explicit representation of the intersection curve and have been restricted to low degree intersections [Sed83, Sar83]. Another alternative to the analytic methods is the use of geometric methods developed by <ref> [Pie89] </ref>. In this paper, Piegl uses geometric principles to compute the intersection of quadric surfaces very accurately. However, the algorithm cannot be easily extended to the general intersection problem. Marching methods: These are by far the most widely used [Far86, BHHL88, BK90, KPW90] and are easy to implement.
Reference: [PK92] <author> J. Ponce and D.J. Kriegman. </author> <title> Elimination theory and computer vision: Recognition and positioning of curved 3d objects from range, intensity, or contours. </title> <booktitle> In Symbolic and Numerical Computation for Artificial Intelligence, </booktitle> <pages> pages 123-146, </pages> <year> 1992. </year>
Reference-contexts: Many problems like surface-surface intersection, offsets of curves and surfaces, slicing operations on surface models, Voronoi sets generated by curves and surfaces in geometric modeling [Hof89], kinematic analysis of a redundant robot [Cra89], robot motion planning [Can88], object recognition in computer vision <ref> [PK92] </ref> and conformation space of molecular 94 chains [CH88] correspond to evaluating algebraic curves. 5.1 Loop Detection I: Algebraic Curves We apply our loop detection algorithm to find all the loops of an algebraic plane curve.
Reference: [Pra86] <author> M.J. Pratt. </author> <title> Surface/surface intersection problems. </title> <editor> In J.A. Gregory, editor, </editor> <booktitle> The Mathematics of Surfaces II, </booktitle> <pages> pages 117-142, </pages> <address> Oxford, 1986. </address> <publisher> Claredon Press. </publisher>
Reference-contexts: We shall now look at some of these methods. 1.2.2 Surface Intersection Techniques There is a significant body of literature addressing the surface intersection problem. Some recent surveys include <ref> [Pat93, Pra86, Hof89] </ref>. One of the main issues that has 10 to be considered while designing surface intersection algorithms is that two surfaces can intersect in a number of components including small loops and singularities (see Figure 1.4).
Reference: [PRS86] <author> A. Paoluzzi, M. Ramella, and A. Santarelli. Un modellatori geometrico su rappresentazioni triango-alate. </author> <type> Technical Report Rept. TR 13.86, </type> <institution> Department of Inf. and Systems, University of Rome, Italy, </institution> <year> 1986. </year>
Reference-contexts: A complete survey of topological structures in solid modeling is given in [Wei86]. The use of non-manifold boundary representations was first proposed by Wesley [Wes80]. Weiler [Wei85, Wei86] observed that a number of geometric operations on polyhedra simplify when non-manifold structures are permitted. Paoluzzi et. al. <ref> [PRS86] </ref> implement Boolean operations on B-rep solids by using only triangular faces for their polyhedra. Laidlaw et. al. [LTH86] describes another method in which all faces must be convex polygons, and suggest random perturbations to eliminate complex vertex intersection cases.
Reference: [RMS92] <author> J. Rossignac, A. Megahed, and B.D. Schneider. </author> <title> Interactive inspection of solids: cross-sections and interferences. </title> <booktitle> In Proceedings of ACM Siggraph, </booktitle> <pages> pages 353-60, </pages> <year> 1992. </year>
Reference-contexts: The Alpha 1 CAD system developed at the University of Utah has many features to combine solids composed of sculptured surfaces. A systematic approach for design, analysis and illustration of assemblies has been presented in <ref> [DC95, RMS92] </ref>. Ray representations along with specialized parallel architectures [Mea84, EKL + 91, Men92] like the RayCasting engine and `Solids engine' were used to achieve interactive solid modeling on low-degree primitives like quadrics. Mantyla and Ranta [MR86] describe methods to perform solid modeling using HutDesign. <p> Ray representations along with specialized parallel architectures [Mea84, EKL + 91, Men92] like the RayCasting engine and `Solids engine' were used to achieve interactive solid modeling on low-degree primitives like quadrics. Mantyla and Ranta [MR86] describe methods to perform solid modeling using HutDesign. Rossignac et. al. <ref> [RMS92] </ref> present algorithms for inspection of cross-sections and interference between solids with bounded degree and limited height of CSG trees.
Reference: [RR87] <author> J.R. Rossignac and A.A.G. Requicha. </author> <title> Piecewise-circular curves for geometric modeling. </title> <journal> IBM Journal of Research and Development, </journal> <volume> 31(3) </volume> <pages> 296-313, </pages> <year> 1987. </year>
Reference-contexts: The robustness of this approach can be improved by posing the problem algebraically and using interval arithmetic [Sny92]. 11 Lattice evaluation: These techniques decompose surface intersection into a series of lower geometric complexity problems like curve-surface intersections <ref> [RR87] </ref>. This is followed by connecting the discrete points into curves. Determination of the discrete step size to guarantee robust solutions is hard. Further, these techniques can be slow and suffer from robustness problems in terms of finding all the small loops and singularities.
Reference: [RR92] <author> A.A.G. Requicha and J.R. Rossignac. </author> <title> Solid modeling and beyond. </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pages 31-44, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: On the research front, there has been considerable effort in integrating geometric and solid modeling [Kal82, Jar84, CK83, VP84, KGI84, FH85, Far86]. In particular, there is a lot of interest in building complete solid representations from spline surfaces and their Boolean combinations <ref> [Hof89, RR92, CS85, Cas87, Wei85, RV82, Cha87, Men92] </ref>. However, the major bottleneck is in performing robust, efficient and accurate Boolean operations on the sculptured models. <p> For plane curves, improved polynomial time algorithms based on CAD have been presented in [AF88, AM88]. The problem of evaluating all the loops of an algebraic curve numerically has been studied in the modeling literature and a number of techniques based on subdivision methods, marching methods and lattice evaluations <ref> [Hof89, RR92] </ref> have been developed. The subdivision based algorithms subdivide the domain up to a user-specified tolerance and evaluate the curves accordingly [Gei83, LR80, MP93]. No good methods are known for computing a good tolerance value during curve tracing. Thus, most implementations use a conservative value for the tolerance.
Reference: [RV82] <author> A.A.G. Requicha and H.B. Voelcker. </author> <title> Solid modeling: A historical summary and contemporary assessment. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 2(2) </volume> <pages> 9-24, </pages> <month> March </month> <year> 1982. </year> <month> 168 </month>
Reference-contexts: On the research front, there has been considerable effort in integrating geometric and solid modeling [Kal82, Jar84, CK83, VP84, KGI84, FH85, Far86]. In particular, there is a lot of interest in building complete solid representations from spline surfaces and their Boolean combinations <ref> [Hof89, RR92, CS85, Cas87, Wei85, RV82, Cha87, Men92] </ref>. However, the major bottleneck is in performing robust, efficient and accurate Boolean operations on the sculptured models.
Reference: [RV85] <author> A.A.G. Requicha and H.B. Voelcker. </author> <title> Boolean operations in solid modeling: boundary evaluation and merging algorithms. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 73(1), </volume> <year> 1985. </year>
Reference-contexts: The need to use free-form surfaces to represent solids has led to research in the problems of curve-surface and surface-surface intersection and loop detection which are important for B-rep generation. Currently, most boundary evaluation algorithms follow a general framework. This framework was first introduced by Requicha and Voelcker <ref> [RV85] </ref> to perform Boolean operations on polyhedra. However, this can be extended easily to accommodate curve surface domains as well. Given two polyhedra, A and B, the conceptual structure of the algorithm [Hof89, HHK89] is 1. Determine which pairs of faces f 2 A and g 2 B intersect. <p> However, Boolean operations require that one of the intersecting objects be polyhedral. Geisow [Gei83] maps surface intersection curves to the plane and uses subdivision methods to solve surface interrogation problems. Requicha and Voelcker <ref> [RV85] </ref> describes the PADL system developed at University of Rochester. This system supports Boolean operations on polyhedral solids and a few curved primitives. Casale et. al. [CS85, Cas87, CB89] use trimmed parametric surfaces to generate B-reps of sculptured solids.
Reference: [RV89] <author> J. Rossignac and H.B. Voelcker. </author> <title> Active zones in csg for accelerating boundary evaluation, redundancy elimination, interference detection, and shading algorithm. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 8(1) </volume> <pages> 51-87, </pages> <year> 1989. </year>
Reference-contexts: Most of these techniques rely heavily on the algebraic formulation of the problem. Cameron [Cam85] considers several strategies and redundancy tests to propagate approximations of CSG primitives from the root of the CSG tree down to the leaves, and possibly refining them on the way. Rossignac and Voelcker <ref> [RV89] </ref> consider redundancy determination without approximating the primitives. They define certain active zones on solids and show how knowledge of active zones can be used to improve conversion from CSG to B-rep, detection of redundancy and other operations on CSG trees.
Reference: [Sal85] <author> G. Salmon. </author> <title> Lessons Introductory to the Modern Higher Algebra. G.E. </title> <publisher> Stechert & Co., </publisher> <address> New York, </address> <month> 1885. </month>
Reference-contexts: The subdivision amounts to evaluating the coordinate of the midpoint of the interval and defining the resulting rectangles. Algebraic methods formulate the intersection problem in terms of solutions of a system of algebraic equations. Given the equations, the variables are eliminated using techniques from elimination theory <ref> [Sal85] </ref> and the problem is reduced to finding roots of a univariate polynomial. This approach was applied to ray-tracing by Kajiya [Kaj82] and to curve intersections by Sederberg [Sed83]. For lower degree curve intersection (up to degree three or four), the implicitization approach results in the fastest algorithms. <p> Usually, it concerns itself with sets of n homogeneous polynomials in n unknowns, and finds the relationship between the coefficients of the polynomials which can be used to determine whether the polynomials have a non-trivial common solution. Definition 4 <ref> [Sal85] </ref> A resultant of a set of polynomials is an expression involving the coefficients of the polynomials such that the vanishing of the resultant (evaluating to zero) is a necessary and sufficient condition for the set of polynomials to have a common non-trivial root. <p> The resultant is expressed as a ratio of two determinants. However, a single determinant formulation exists for n = 2 and 3 <ref> [Sal85, Dix08] </ref>. For n = 3, however, [Dix08] gives the resultant only if the three equations have the same degree. In our applications, it is sufficient to compute resultants for the cases when n = 2 and 3. <p> For n = 3, however, [Dix08] gives the resultant only if the three equations have the same degree. In our applications, it is sufficient to compute resultants for the cases when n = 2 and 3. Sylvester's method <ref> [Sal85] </ref> can be used to express the resultant of two polynomials of degree m and n respectively as a determinant of a matrix with (m +n) rows and columns. <p> In intersection problems, we obtain systems consisting of two or three algebraic equations. For two equations corresponding to curve-curve intersection and ray-tracing we use Sylvester resultant <ref> [Sal85] </ref>, and for curve-surface intersections we use Dixon's formulation [Dix08]. In either case the resultant can be expressed as a matrix determinant and the entries of the matrix are univariate polynomials. Such matrices are called matrix polynomials. <p> Because of the special bilinear form of f 3 , the two resultants involving elimination of variable a 1 inside the expression for volume function is easily performed by hand. We use the Sylvester resultant <ref> [Sal85] </ref> (see chapter 2) to eliminate variable a 2 . We use an algorithm based on multivariate interpolation [MC93] to compute the resultant of a set of polynomials efficiently. The main bottleneck in most resultant algorithms is the symbolic expansion of determinants.
Reference: [Sar83] <author> R F Sarraga. </author> <title> Algebraic methods for intersection. Computer Vision, </title> <journal> Graphics and Image Processing, </journal> <volume> 22 </volume> <pages> 222-238, </pages> <year> 1983. </year>
Reference-contexts: Further, these techniques can be slow and suffer from robustness problems in terms of finding all the small loops and singularities. Analytic methods: Analytic methods are based on explicit representation of the intersection curve and have been restricted to low degree intersections <ref> [Sed83, Sar83] </ref>. Another alternative to the analytic methods is the use of geometric methods developed by [Pie89]. In this paper, Piegl uses geometric principles to compute the intersection of quadric surfaces very accurately. However, the algorithm cannot be easily extended to the general intersection problem.
Reference: [Sat91] <author> T. Satoh. </author> <title> Boolean operations on sets using surface data. </title> <booktitle> In Proceedings of Symposium on Solid Modeling Foundations and CAD/CAM Applications, </booktitle> <pages> pages 119-127, </pages> <year> 1991. </year>
Reference-contexts: The algorithm uses subdivision methods to evaluate surface intersections, and represents the trimming boundary with piecewise linear segments. Chan [Cha87] uses special properties of quadric surfaces and other free-form surface to design industrial parts. A number of techniques like interval arithmetic and shell representations <ref> [VP84, KGI84, Taw91, Sat91, Men92, Duf92] </ref> have been developed to perform solid design with free-form geometries. Sorting points along intersection curves [Joh87] was used to classify components with respect to solids.
Reference: [SB93] <author> J. Stoer and R. </author> <title> Bulirsch. Introduction to Numerical Analysis. </title> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Such a sign change happens whenever the sign of a polynomial value differs from that of its successor. Furthermore, if f i (a) = 0, then this entry is removed from the sequence before counting the sign changes. Suitable sequences of polynomials are called Sturm sequences. Definition 5 <ref> [SB93] </ref> The sequence f 0 (x) = f (x); f 1 (x); : : : ; f m (x) (2.7) of real polynomials is a Sturm sequence for the polynomial f (x) if: * All real roots of f 0 (x) are simple. * sign f 1 (~) = sign f <p> For such Sturm sequences we have the following theorem that we state without proof. Theorem 1 <ref> [SB93] </ref> The number of real roots of f (x) f 0 (x) in the interval [a; b) equals w (b)w (a), where w (x) is the number of sign changes of a Sturm sequence f 0 (x); f 1 (x); : : : ; f m (x) at location x. 36 <p> The basic QR algorithm makes use of the Schur Normal Form. Schur's theorem states that 42 Theorem 3 <ref> [SB93] </ref> For every n fi n matrix A there is a unitary n fi n matrix U such that U H AU = B B B B 1 fl : : : fl . . . 1 C C C A The diagonal elements are the eigenvalues of A. <p> B B B B B B fl fl : : : fl fl 0 fl : : : fl fl . . . 1 C C C C C C C Computing a QR decomposition of an upper Hessenberg matrix (using Given's rotations) requires only O (n 2 ) operation <ref> [SB93] </ref>. The QR decomposition of an upper Hessen-berg matrix yields an orthogonal component Q which is also upper Hessenberg. <p> The roots of this equation in the range s 2 [0; 1] is solved using standard numerical polynomial root finding methods like the Jenkins-Traub method <ref> [SB93] </ref>. The actual timings obtained from our implementation can be greatly improved by careful programming and using the structure of the problem. For example, the technique applied to intersection of parametric curves results in a matrix polynomial with symmetric matrices. <p> Firstly, we assume that the set of eigenvectors of A span the entire space. This is true only if the matrix is diagonalizable, i.e., if the Jordan canonical form <ref> [SB93] </ref> is a diagonal matrix, or it has distinct eigenvalues. Secondly, the assumption that a random initial vector has a non-zero component along each eigenvector may not be true. However, this seems very unlikely for purely random initial choices.
Reference: [Sed83] <author> T.W. </author> <title> Sederberg. Implicit and Parametric Curves and Surfaces. </title> <type> PhD thesis, </type> <institution> Purdue University, </institution> <year> 1983. </year>
Reference-contexts: Further, these techniques can be slow and suffer from robustness problems in terms of finding all the small loops and singularities. Analytic methods: Analytic methods are based on explicit representation of the intersection curve and have been restricted to low degree intersections <ref> [Sed83, Sar83] </ref>. Another alternative to the analytic methods is the use of geometric methods developed by [Pie89]. In this paper, Piegl uses geometric principles to compute the intersection of quadric surfaces very accurately. However, the algorithm cannot be easily extended to the general intersection problem. <p> Given the equations, the variables are eliminated using techniques from elimination theory [Sal85] and the problem is reduced to finding roots of a univariate polynomial. This approach was applied to ray-tracing by Kajiya [Kaj82] and to curve intersections by Sederberg <ref> [Sed83] </ref>. For lower degree curve intersection (up to degree three or four), the implicitization approach results in the fastest algorithms. However, the problem of finding roots of higher degree polynomials can be numerically unstable [Wil59]. Therefore, the overall algorithm for intersection may not be accurate. <p> Theorem 2 Bezout's Theorem: Two algebraic surfaces of degree d 1 and d 2 , respectively, intersect in an algebraic curve of degree d 1 d 2 unless they have a common component. Sederberg <ref> [Sed83] </ref> developed a computational method based on resultants to compute the implicit form of any parametric surface. <p> It does not require initial guesses unlike Newton's method and can provide all solutions within a specified range. Implicitization algorithm: It uses the fact that any rational curve can be expressed as an implicit equation, f (x; y; w) = 0 <ref> [Sed83] </ref>. The problem of computing the intersection of two parametric curves is solved by implicitizing one of the curves. The parameterization of the second rational curve is substituted into the implicit form to obtain an equation of the form f (x (s); y (s); w (s)) = 0. <p> We represent the plane curve as an unevaluated determinant [MC91]. Given two Bezier surfaces, F (s; t) = (X (s; t); Y (s; t); Z (s; t); W (s; t)) in homogeneous coordinates, implicitize F (s; t) to the form f (x; y; z; w) = 0 <ref> [Sed83, Hof89] </ref> 67 and substitute the parametrization of G (u; v) into f to get an algebraic plane curve of the form f (X (u; v); Y (u; v); Z (u; v); W (u; v)) = 0: (4.1) This corresponds to an algebraic plane curve birationally equivalent to the original intersection <p> To perform this computation, we use an algorithm by <ref> [Sed83] </ref>. Let us assume that the surface we are implicitizing is denoted by F (s; t) with 68 coordinate functions as above.
Reference: [Sed89] <author> T.W. </author> <title> Sederberg. Algorithms for algebraic curve intersection. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 21(9) </volume> <pages> 547-555, </pages> <year> 1989. </year>
Reference-contexts: Eventually, the curve segments are approximated by straight lines up to a certain tolerance, and their intersection point is accepted as the intersection of two curves. A simple subdivision algorithm has linear convergence in the domain. Its convergence is improved using Bezier clipping <ref> [SWZ89, Sed89, NSK90] </ref>. Bezier clipping makes use of the convex hull property in a powerful way, by determining parameter ranges which are guaranteed not to include points of intersection. The interval arithmetic approach is similar to subdivision [KM83]. <p> We assume that each curve and surface is associated with a corresponding control polytope. For Bezier curves and surfaces such control polytopes are formed by their control points. Similar geometric representations are known for algebraic curves and surfaces as well <ref> [Sed89] </ref>. The simplest algorithm for intersection is based on the version of algebraic pruning from Section 3.2. We start with the middle point of the domain, find a closest eigenvalue using inverse iteration and prune the domain. The algorithm can be recursively applied to each domain obtained after pruning.
Reference: [Seg90] <author> M. Segal. </author> <title> Using tolerances to guarantee valid polyhedral modeling results. </title> <booktitle> In Proceedings of ACM Siggraph, </booktitle> <pages> pages 105-114, </pages> <year> 1990. </year>
Reference-contexts: One of the most common approaches is based on using tolerances with floating-point arithmetic [Jac95]. However, it is hard to decide a global tolerance value for all computations. To circumvent these problems, combinations of symbolic reasoning [HHK89] and adaptive tolerances <ref> [Seg90] </ref> have been proposed. Other algorithms include those based on redundancy elimination [FBZ93]. Many algorithms based on exact arithmetic have been proposed for reliable numeric computation for polyhedra [SI89, For95, BMP94, Hof89]. Sculptured Solids: The idea of using free-form surfaces in solid modeling was introduced by Chiyokura et. al [CK83].
Reference: [Sei90a] <author> R. Seidel. </author> <title> Linear programming and convex hulls made easy. </title> <booktitle> In Proc. 6th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 211-215, </pages> <year> 1990. </year>
Reference-contexts: Hohmeyer [Hoh91] bounded the Gauss maps using pseudo-normal patches and used an efficient algorithm for linear programming <ref> [Sei90a] </ref> to test the separability criterion. In all these algorithms, if the loop detection criterion is satisfied, each surface is divided into a pair of sub-patches and the criterion is recursively tested on each pair combination. This is continued until all patch pairs fail the test.
Reference: [Sei90b] <author> R. Seidel. </author> <title> Linear programming and convex hulls made easy. </title> <booktitle> In Proc. 6th Ann. ACM Conf. on Computational Geometry, </booktitle> <pages> pages 211-215, </pages> <address> Berkeley, California, </address> <year> 1990. </year> <month> 169 </month>
Reference-contexts: But in our applications we are only interested in finding intersections that lie inside the given domain. In this section, we describe a new algorithm called algebraic pruning to compute intersections restricted to a domain. Initially, we use linear programming <ref> [Sei90b] </ref> to check if the control polytopes of the pairs of curves (or a curve and a surface) have a separating line (or plane) between them. If they do, then the given pair does not intersect. <p> The convex hull test is reduced to a linear programming problem, whose complexity is linear in the number of constraints. In this case, each control points contributes one constraint. Good randomized algorithms for linear programming are described in <ref> [Sei90b] </ref> and they work very well in practice. We use an implementation of Seidel's algorithm [Sei90b] given to us by Mike Hohmeyer [Hoh91]. 58 Curve-Surface Intersection The control points of the curve in homogeneous coordinates are given by P (s) = ((85:0; 0:0; 150:0; 1:6); (104:0; 50:0; 50:0; 1:6); (90:0; 50:0; <p> In this case, each control points contributes one constraint. Good randomized algorithms for linear programming are described in <ref> [Sei90b] </ref> and they work very well in practice. We use an implementation of Seidel's algorithm [Sei90b] given to us by Mike Hohmeyer [Hoh91]. 58 Curve-Surface Intersection The control points of the curve in homogeneous coordinates are given by P (s) = ((85:0; 0:0; 150:0; 1:6); (104:0; 50:0; 50:0; 1:6); (90:0; 50:0; 50:0; 1:4); The control points of the surface are given by the matrix: Q (u; <p> Therefore, the running time is O (k). By applying these two methods on the two solids, we are left with few pairs of patches that are most likely to intersect. We use Mike Hohmeyer's implementation of the linear programming algorithm developed by Seidel <ref> [Sei90b] </ref>. 6.2.1 Intersection Curve between Trimmed Patches In order to compute the intersection curve between the two solids, we compute a series of intersections between pairs of trimmed patches. <p> Another method is to maintain the triangulation of the trimming polygon and choosing the centroid of one 128 of the triangles. When points have to be repeatedly generated, it is beneficial to preserve the triangulation. We perform triangulation using an implementation of Seidel's algorithm <ref> [Sei90b] </ref>. The second step involves actual ray-shooting in 3-space. The algebraic pruning algorithm described in chapter 3 gives the number of intersections of a ray with an untrimmed patch. <p> We use a very fast implementation of Seidel's triangulation algorithm [Sei91] provided by Atul Narkhede et al [NM95]. The point location algorithm based on the triangulation algorithm was also implemented by Atul Narkhede. We use Mike Hohmeyer's [Hoh91] implementation of Seidel's randomized linear programming algorithm <ref> [Sei90b] </ref>. We implemented the segment tree version of the bounding box intersection test described in chapter 6. * Curve/Surface manipulation module: This module primarily handles all the low-level routines for manipulating parametric curves and surfaces.
Reference: [Sei91] <author> R. Seidel. </author> <title> A simple and fast randomized algorithm for computing trapezoidal decompositions and for triangulating polygons. </title> <journal> Computational Geometry Theory & Applications, </journal> <volume> 1(1) </volume> <pages> 51-64, </pages> <year> 1991. </year>
Reference-contexts: The QR decomposition of an upper Hessen-berg matrix yields an orthogonal component Q which is also upper Hessenberg. Therefore, the basic QR algorithm preserves upper Hessenberg form. 2.6 Seidel's algorithm for polygon triangulation Seidel's algorithm <ref> [Sei91] </ref> is an incremental randomized algorithm to compute the trapezoidal decomposition induced by a set of n lines segments in 2D. The expected time complexity of this algorithm in O (n log fl n). <p> length of the chain is m, and the sizes of the two polygons are n 1 and n 2 , then this problem can be solved in time O (m (log n 1 + log n 2 )) using point location queries each of which take O (log n) time <ref> [Sei91] </ref>. The intersection points obtained 121 by this process is only an approximation to the true intersection point. Figure 6.4 (b) illustrates this point on a sample surface S 1 whose trimming boundary is the result of a previous intersection computation with surface S 3 . <p> These routines are implemented both in double precision arithmetic and in exact rational arithmetic. * Geometric module: The geometric module contains algorithms for triangulation of simple polygons, point location in planar arrangements, linear programming and bounding box overlap tests. We use a very fast implementation of Seidel's triangulation algorithm <ref> [Sei91] </ref> provided by Atul Narkhede et al [NM95]. The point location algorithm based on the triangulation algorithm was also implemented by Atul Narkhede. We use Mike Hohmeyer's [Hoh91] implementation of Seidel's randomized linear programming algorithm [Sei90b].
Reference: [SI89] <author> K. Sugihara and M. Iri. </author> <title> A solid modeling system free from topological incon-sistencis. </title> <journal> J. Inf. Proc., Inf. Proc. Soc. of Japan, </journal> <volume> 12(4) </volume> <pages> 380-393, </pages> <year> 1989. </year>
Reference-contexts: To circumvent these problems, combinations of symbolic reasoning [HHK89] and adaptive tolerances [Seg90] have been proposed. Other algorithms include those based on redundancy elimination [FBZ93]. Many algorithms based on exact arithmetic have been proposed for reliable numeric computation for polyhedra <ref> [SI89, For95, BMP94, Hof89] </ref>. Sculptured Solids: The idea of using free-form surfaces in solid modeling was introduced by Chiyokura et. al [CK83]. It describes the implementation of a system called Designbase with some curved-surface capabilities.
Reference: [SKW85] <author> P. Sinha, E. Klassen, and K.K. Wang. </author> <title> Exploiting topological and geometric properties for selective subdivision. </title> <booktitle> In ACM Symposium on Computationl Geometry, </booktitle> <pages> pages 39-45, </pages> <year> 1985. </year>
Reference-contexts: In this class of methods, identifying a point on every loop is significantly harder than identifying a point on open components. As a result, simultaneously with the development of new ideas for evaluating such curves, a number of techniques for loop detection have been proposed <ref> [SKW85, SM88, THS89, Che89, Hoh91, Kim90, KPP90, KPW90] </ref>. Most of the loop detection criteria are based on bounds on the Gauss map of the surfaces being intersected. <p> Most of the loop detection criteria are based on bounds on the Gauss map of the surfaces being intersected. Sinha et. al. <ref> [SKW85] </ref> had shown that if two (at least C 1 ) surfaces intersect in a closed loop, there exists a normal vector on one surface 15 that is parallel to a normal vector of the other surface.
Reference: [SM88] <author> T.W. Sederberg and R.J. Meyers. </author> <title> Loop detection in surface patch intersections. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 5 </volume> <pages> 161-171, </pages> <year> 1988. </year>
Reference-contexts: In this class of methods, identifying a point on every loop is significantly harder than identifying a point on open components. As a result, simultaneously with the development of new ideas for evaluating such curves, a number of techniques for loop detection have been proposed <ref> [SKW85, SM88, THS89, Che89, Hoh91, Kim90, KPP90, KPW90] </ref>. Most of the loop detection criteria are based on bounds on the Gauss map of the surfaces being intersected. <p> The use of overlaps of Gauss maps in loop detection is illustrated in Figure 1.5. Sederberg et. al. <ref> [THS89, SM88] </ref> strengthened the above work by proving that if two (at least C 1 ) surfaces intersect in a closed loop, there exists a line which is perpendicular to both surfaces (collinear normal vectors), provided the inner product between any normal on one surface and any other normal on the <p> Patriakalakis et. al. [KPP90] precomputed the most significant points of the intersection curve between an algebraic surface and a parametric patch to identify the main features of the curve. Sederberg et. al. <ref> [SM88, ZS93] </ref> developed an efficient way to bound the normals and tangents of a surface using bounding cones and pyramidal surfaces, thereby giving a faster way to achieve the no loop condition. <p> But points where is not well-defined (boundary points of surfaces) cannot be enclosed by a loop. Therefore, we can assume for the purposes of this paper that is well-defined. 107 5.3.2 Collinear normal points and Distance function Sederberg <ref> [SM88, THS89] </ref> was the first to recognize the importance of collinear normals in detecting existence of closed loops in intersection problems. It is easy to see that collinear normal points between two surfaces are critical points of the distance function .
Reference: [SN90] <author> T.W. Sederberg and T. Nishita. </author> <title> Curve intersection using bezier clipping. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 22 </volume> <pages> 538-549, </pages> <year> 1990. </year>
Reference-contexts: In each case, the problem is reduced to an eigenvalue problem and we compute the eigenvalues in a domain. We have performed comparisons with the QR algorithm in [MD94] and an implementation of implicitization based algorithm described in [SP86] and Bezier clipping described in <ref> [SN90] </ref>. Bezier Clipping: Bezier Clipping is an iterative method which takes advantage of the convex hull property of Bezier curves, and iteratively clips away regions of the curve that does not intersect with the surface. Bezier clipping converges more robustly with the 60 polynomial's solution than does Newton's method. <p> We would again like to emphasize the fact that these are the performance figures corresponding to our implementation and an earlier implementation of implicitization based intersection algorithm [SP86]. Other implementations may result in a different set of timings. Finally, we compared our algorithm to Bezier clipping <ref> [SN90] </ref>. This comparison has been performed only for curve intersections. The actual performance of the algorithm is actually a function of the geometry of the curves and the number of intersections in the given domain.
Reference: [SN91] <author> T.W. Sederberg and T. Nishita. </author> <title> Geometric hermite approximation of surface patch intersection curves. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 8 </volume> <pages> 97-114, </pages> <year> 1991. </year>
Reference-contexts: Most of the recent work in the literature on Boolean combinations of curved models has focussed on computing the surface intersection between a pair of B-spline surfaces <ref> [KS88, SN91, Nat90, Hoh92, MC91, KPW90, BHHL88, BK90, KM97] </ref>. We shall now look at some of these methods. 1.2.2 Surface Intersection Techniques There is a significant body of literature addressing the surface intersection problem. Some recent surveys include [Pat93, Pra86, Hof89].
Reference: [Sny92] <author> J. Snyder. </author> <title> Interval arithmetic for computer graphics. </title> <booktitle> In Proceedings of ACM Siggraph, </booktitle> <pages> pages 121-130, </pages> <year> 1992. </year>
Reference-contexts: In case subdivision is stopped after some finite number of steps, it may miss small loops or lead to incorrect connectivity in the presence of singularities. The robustness of this approach can be improved by posing the problem algebraically and using interval arithmetic <ref> [Sny92] </ref>. 11 Lattice evaluation: These techniques decompose surface intersection into a series of lower geometric complexity problems like curve-surface intersections [RR87]. This is followed by connecting the discrete points into curves. Determination of the discrete step size to guarantee robust solutions is hard. <p> These methods do not converge well sometimes [FF92] and many issues related to choice of step size to prevent component jumping are still open. Therefore, most implementations use very conservative step sizes for tracing and this slows down the algorithm. Overall, current tracing algorithms are not considered robust <ref> [Sny92] </ref>. The components of an intersection curve consist of open components and closed loops (see Figure 1.4). Start points on the open components are obtained by curve-surface intersections. <p> A single tracing step is shown in Figure 4.2. Given the approximate value, these algorithms use iterative 74 methods like Newton's method to trace back on to the curve. The three main problems with tracing algorithms are <ref> [FF92, Sny92] </ref> 1. Converging back on to the curve. 2. Component jumping. 3. Inability to handle singularities and multiple branches. The convergence problems arising from the behavior of Newton's method are described in [FF92]. <p> There are no benchmarks available to test its efficiency, but our algorithm compares favorably to many of the published timings. For example, it performs an order of magnitude faster than techniques like interval arithmetic. <ref> [Sny92] </ref> reports that a difference operation (Boolean operation) between a bumpy sphere and a cylinder using trimmed parametric surfaces takes order of a few minutes on a HP workstation. <p> Unfortunately, there are no existing benchmarks available to test our algorithm and there are very few 92 published performance results on surface intersection algorithms. Our algorithm performs almost 10-15 times faster than algorithms based on interval arithmetic <ref> [Sny92] </ref>. 93 Chapter 5 Loop Detection Algorithm In our discussion of the surface intersection problem in chapter 2, the intersection curve was formulated as an algebraic curve in higher dimensions (R 4 , to be precise).
Reference: [SP86] <author> T.W. Sederberg and S.R. Parry. </author> <title> Comparison of three curve intersection algorithms. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 18(1) </volume> <pages> 58-63, </pages> <year> 1986. </year>
Reference-contexts: We use a fast implementation [NM95] of Seidel's algorithm for this purpose. 45 Chapter 3 Curve Surface Intersection The problems of computing the intersection of curves and surfaces are fundamental in computer graphics and geometric modeling. Common applications include surface-surface intersection, ray-tracing, hidden-curve removal and visibility algorithms <ref> [Hof89, EC90, NSK90, SP86] </ref>. Our surface-surface intersection algorithm (chapter 4) needs starting points on each component of the intersection curve. We use curve-surface intersection to evaluate these starting points. Our algorithm for boundary evaluation relies on a ray-shooting approach for the classification of certain solid features. <p> In each case, the problem is reduced to an eigenvalue problem and we compute the eigenvalues in a domain. We have performed comparisons with the QR algorithm in [MD94] and an implementation of implicitization based algorithm described in <ref> [SP86] </ref> and Bezier clipping described in [SN90]. Bezier Clipping: Bezier Clipping is an iterative method which takes advantage of the convex hull property of Bezier curves, and iteratively clips away regions of the curve that does not intersect with the surface. <p> As a result, if we implement algorithms as part of a generic package or specialize to particular cases (like intersection of cubic Bezier curves), we can see a considerable difference in their running time. A similar analysis holds for the implementation of implicitization based algorithm described in <ref> [SP86] </ref>. Thus, it is rather difficult to perform an exact comparison between two algorithms and in this section we analyze them in terms of convergence per iteration and the total number of iterations required on various examples. <p> The QR algorithm has a comparable performance if the number of intersections in the domain 62 is at least equal to 2 p Compared to the implicitization based approach in <ref> [SP86] </ref>, algebraic pruning almost shows the same kind of performance (on low degree curves of degree three or four). The implicitization based approach involves expansion of the symbolic determinant and computing all the roots in the domain of interest of the resulting polynomial. <p> However, on degree five curves consisting of at most two or three intersections, algebraic pruning performed better by a couple of milliseconds. We would again like to emphasize the fact that these are the performance figures corresponding to our implementation and an earlier implementation of implicitization based intersection algorithm <ref> [SP86] </ref>. Other implementations may result in a different set of timings. Finally, we compared our algorithm to Bezier clipping [SN90]. This comparison has been performed only for curve intersections.
Reference: [SS83] <author> J. T. Schwartz and M. Sharir. </author> <title> On the piano movers probelem ii, general techniques for computing topological properties of real algebraic manifolds. </title> <journal> Advances of Applied Maths, </journal> <volume> 4 </volume> <pages> 298-351, </pages> <year> 1983. </year>
Reference-contexts: An excellent introduction to desingularization techniques is provided in [Abh90, Hof89]. However, the resulting algorithm can be exponential in the degree of the curve. Algorithms based on Collins' cylindrical algebraic decomposition (CAD), [Col75, ACM84], have been used for evaluating all components of algebraic curves <ref> [Arn83, SS83] </ref>. However, its worst case complexity is doubly exponential in the number of variables. For plane curves, improved polynomial time algorithms based on CAD have been presented in [AF88, AM88].
Reference: [SWZ89] <author> T.W. Sederberg, S. White, and A. Zundel. </author> <title> Fat arcs: A bounding region with cubic convergence. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 6 </volume> <pages> 205-218, </pages> <year> 1989. </year>
Reference-contexts: Eventually, the curve segments are approximated by straight lines up to a certain tolerance, and their intersection point is accepted as the intersection of two curves. A simple subdivision algorithm has linear convergence in the domain. Its convergence is improved using Bezier clipping <ref> [SWZ89, Sed89, NSK90] </ref>. Bezier clipping makes use of the convex hull property in a powerful way, by determining parameter ranges which are guaranteed not to include points of intersection. The interval arithmetic approach is similar to subdivision [KM83].
Reference: [Taw91] <author> M. S. Tawfik. </author> <title> An efficient algorithm for csg to b-rep conversion. </title> <booktitle> In Proceedings of Symposium on Solid Modeling Foundations and CAD/CAM Applications, </booktitle> <pages> pages 99-108, </pages> <year> 1991. </year> <month> 170 </month>
Reference-contexts: The algorithm uses subdivision methods to evaluate surface intersections, and represents the trimming boundary with piecewise linear segments. Chan [Cha87] uses special properties of quadric surfaces and other free-form surface to design industrial parts. A number of techniques like interval arithmetic and shell representations <ref> [VP84, KGI84, Taw91, Sat91, Men92, Duf92] </ref> have been developed to perform solid design with free-form geometries. Sorting points along intersection curves [Joh87] was used to classify components with respect to solids.
Reference: [THS89] <author> Sederberg T.W, Christiansen H.N, and Katz S. </author> <title> An improved test for closed loops in surface intersections. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 21(8) </volume> <pages> 505-508, </pages> <year> 1989. </year>
Reference-contexts: In this class of methods, identifying a point on every loop is significantly harder than identifying a point on open components. As a result, simultaneously with the development of new ideas for evaluating such curves, a number of techniques for loop detection have been proposed <ref> [SKW85, SM88, THS89, Che89, Hoh91, Kim90, KPP90, KPW90] </ref>. Most of the loop detection criteria are based on bounds on the Gauss map of the surfaces being intersected. <p> The use of overlaps of Gauss maps in loop detection is illustrated in Figure 1.5. Sederberg et. al. <ref> [THS89, SM88] </ref> strengthened the above work by proving that if two (at least C 1 ) surfaces intersect in a closed loop, there exists a line which is perpendicular to both surfaces (collinear normal vectors), provided the inner product between any normal on one surface and any other normal on the <p> But points where is not well-defined (boundary points of surfaces) cannot be enclosed by a loop. Therefore, we can assume for the purposes of this paper that is well-defined. 107 5.3.2 Collinear normal points and Distance function Sederberg <ref> [SM88, THS89] </ref> was the first to recognize the importance of collinear normals in detecting existence of closed loops in intersection problems. It is easy to see that collinear normal points between two surfaces are critical points of the distance function .
Reference: [Voe74] <author> H. B. Voelcker. </author> <title> An introduction to padl: Characteristics, status, and rationale. </title> <type> Technical Report Research Memo. #22, </type> <institution> University of Rochester, </institution> <year> 1974. </year> <title> Production Automation Project. </title>
Reference-contexts: Perform the same for all faces of B. 4. Assemble all the faces into the new solid. 1.2.1 Boundary Evaluation Techniques Polyhedral solids: Algorithms for performing Boolean operations on polyhedra 8 in B-rep have been proposed by a number of researchers <ref> [Bra75, Hil82, Man86, OKK73, Voe74, Wes80] </ref>. Most of these techniques rely heavily on the algebraic formulation of the problem.
Reference: [VP84] <author> T. Varady and M.J. Pratt. </author> <title> Design techniques for the definition of solid objects with free-form geometry. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 1(3) </volume> <pages> 207-225, </pages> <year> 1984. </year>
Reference-contexts: Over the last few years, modeling using free-form surfaces (sculptured models) has become very useful throughout the commercial CAD/CAM/CAE industry. On the research front, there has been considerable effort in integrating geometric and solid modeling <ref> [Kal82, Jar84, CK83, VP84, KGI84, FH85, Far86] </ref>. In particular, there is a lot of interest in building complete solid representations from spline surfaces and their Boolean combinations [Hof89, RR92, CS85, Cas87, Wei85, RV82, Cha87, Men92]. <p> The algorithm uses subdivision methods to evaluate surface intersections, and represents the trimming boundary with piecewise linear segments. Chan [Cha87] uses special properties of quadric surfaces and other free-form surface to design industrial parts. A number of techniques like interval arithmetic and shell representations <ref> [VP84, KGI84, Taw91, Sat91, Men92, Duf92] </ref> have been developed to perform solid design with free-form geometries. Sorting points along intersection curves [Joh87] was used to classify components with respect to solids.
Reference: [Wal50] <author> R.J. Walker. </author> <title> Algebraic Curves. </title> <publisher> Princeton University Press, </publisher> <address> New Jersey, </address> <year> 1950. </year>
Reference-contexts: Every algebraic space curve is birationally equivalent to an algebraic plane curve and the latter can be computed using Grobner bases [Buc89] and resultants. Given an algebraic plane curve, techniques for desingularization based on quadratic transformations are given in <ref> [Wal50, Abh90, AB88b] </ref>. An excellent introduction to desingularization techniques is provided in [Abh90, Hof89]. However, the resulting algorithm can be exponential in the degree of the curve. Algorithms based on Collins' cylindrical algebraic decomposition (CAD), [Col75, ACM84], have been used for evaluating all components of algebraic curves [Arn83, SS83].
Reference: [Wei85] <author> Kevin J. Weiler. </author> <title> Edge-based data structures for solid modeling in curved-surface environments. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 5(1) </volume> <pages> 21-40, </pages> <month> January </month> <year> 1985. </year>
Reference-contexts: On the research front, there has been considerable effort in integrating geometric and solid modeling [Kal82, Jar84, CK83, VP84, KGI84, FH85, Far86]. In particular, there is a lot of interest in building complete solid representations from spline surfaces and their Boolean combinations <ref> [Hof89, RR92, CS85, Cas87, Wei85, RV82, Cha87, Men92] </ref>. However, the major bottleneck is in performing robust, efficient and accurate Boolean operations on the sculptured models. <p> Many variants of the method, and other alternatives, have been proposed and used in B-rep modeling systems since then. A complete survey of topological structures in solid modeling is given in [Wei86]. The use of non-manifold boundary representations was first proposed by Wesley [Wes80]. Weiler <ref> [Wei85, Wei86] </ref> observed that a number of geometric operations on polyhedra simplify when non-manifold structures are permitted. Paoluzzi et. al. [PRS86] implement Boolean operations on B-rep solids by using only triangular faces for their polyhedra.
Reference: [Wei86] <author> Kevin J. Weiler. </author> <title> Topological Structures for Solid Modeling. </title> <type> PhD thesis, </type> <institution> Computer and Systems Engineering, Rensselaer Polytechnic Institute, </institution> <year> 1986. </year>
Reference-contexts: The winged-edge style of boundary representation is due to Baumgart [Bau75]. Many variants of the method, and other alternatives, have been proposed and used in B-rep modeling systems since then. A complete survey of topological structures in solid modeling is given in <ref> [Wei86] </ref>. The use of non-manifold boundary representations was first proposed by Wesley [Wes80]. Weiler [Wei85, Wei86] observed that a number of geometric operations on polyhedra simplify when non-manifold structures are permitted. Paoluzzi et. al. [PRS86] implement Boolean operations on B-rep solids by using only triangular faces for their polyhedra. <p> Many variants of the method, and other alternatives, have been proposed and used in B-rep modeling systems since then. A complete survey of topological structures in solid modeling is given in [Wei86]. The use of non-manifold boundary representations was first proposed by Wesley [Wes80]. Weiler <ref> [Wei85, Wei86] </ref> observed that a number of geometric operations on polyhedra simplify when non-manifold structures are permitted. Paoluzzi et. al. [PRS86] implement Boolean operations on B-rep solids by using only triangular faces for their polyhedra.
Reference: [Wes80] <author> M. Wesley. </author> <title> A geometric modeling system for automated mechanical assembly. </title> <journal> IBM Journal of Research and Development 24, </journal> <pages> pages 64-74, </pages> <year> 1980. </year>
Reference-contexts: Perform the same for all faces of B. 4. Assemble all the faces into the new solid. 1.2.1 Boundary Evaluation Techniques Polyhedral solids: Algorithms for performing Boolean operations on polyhedra 8 in B-rep have been proposed by a number of researchers <ref> [Bra75, Hil82, Man86, OKK73, Voe74, Wes80] </ref>. Most of these techniques rely heavily on the algebraic formulation of the problem. <p> Many variants of the method, and other alternatives, have been proposed and used in B-rep modeling systems since then. A complete survey of topological structures in solid modeling is given in [Wei86]. The use of non-manifold boundary representations was first proposed by Wesley <ref> [Wes80] </ref>. Weiler [Wei85, Wei86] observed that a number of geometric operations on polyhedra simplify when non-manifold structures are permitted. Paoluzzi et. al. [PRS86] implement Boolean operations on B-rep solids by using only triangular faces for their polyhedra.
Reference: [Whi94] <author> S. Whitman. </author> <title> Dynamic load balancing for parallel polygon rendering. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 14(4) </volume> <pages> 41-48, </pages> <year> 1994. </year>
Reference-contexts: It is clear that the most effective parallel algorithm is one where the tasks are equally distributed among all the processors. The problem of load balancing has received considerable attention for a long time due to the fact that a single scheme is not applicable for parallelizing all algorithms <ref> [Lam87, YA93, Whi94, Gea95, HL95] </ref>. The effectiveness of different techniques varies with the nature of the problem it is used for. Hence there arises a need for newer problem specific analysis methods which help in choosing the most effective load balancing technique.
Reference: [Wil59] <author> J.H. Wilkinson. </author> <title> The evaluation of the zeros of ill-conditioned polynomials. parts i and ii. </title> <journal> Numer. Math., </journal> <volume> 1 </volume> <pages> 150-166 and 167-180, </pages> <year> 1959. </year>
Reference-contexts: This approach was applied to ray-tracing by Kajiya [Kaj82] and to curve intersections by Sederberg [Sed83]. For lower degree curve intersection (up to degree three or four), the implicitization approach results in the fastest algorithms. However, the problem of finding roots of higher degree polynomials can be numerically unstable <ref> [Wil59] </ref>. Therefore, the overall algorithm for intersection may not be accurate. Moreover, the symbolic expansion of determinants to compute resultants can be computationally expensive [Hof90]. To circumvent these problems, Manocha et. al. [Man92, MD94] have proposed methods combining elimination theory with matrix computations.
Reference: [Wil65] <author> J.H. Wilkinson. </author> <title> The algebraic eigenvalue problem. </title> <publisher> Oxford University Press, Oxford, </publisher> <year> 1965. </year>
Reference-contexts: Moreover, the asymptotic convergence rate is j 1 j=j 2 j. 1 is the dominant eigenvalue of A. The power method is described in detail in <ref> [GL89, Wil65] </ref>. In our applications, we use power iterations to compute the smallest eigenvalues (in magnitude) of matrix pencils of the form, As 0 + B. The smallest eigenvalue of As 0 corresponds to the largest eigenvalue of (As 0 + B) 1 . <p> following procedure (given q 0 and u 0 ). for k = 1; 2; : : : Solve (As 0 Solve (As 0 q k = z k = k z k k 1 s k = (u T T end In exact arithmetic, this process is locally cubically convergent <ref> [Wil65] </ref>. Many other techniques for improving the accuracy and convergence of the algorithm in the presence of higher multiplicity eigenvalues or closely spaced eigenvalues are presented in [Wil65]. 2.5.2 QR Algorithm The QR algorithm computes eigenvalues of a matrix. The basic QR algorithm makes use of the Schur Normal Form. <p> k = k z k k 1 s k = (u T T end In exact arithmetic, this process is locally cubically convergent <ref> [Wil65] </ref>. Many other techniques for improving the accuracy and convergence of the algorithm in the presence of higher multiplicity eigenvalues or closely spaced eigenvalues are presented in [Wil65]. 2.5.2 QR Algorithm The QR algorithm computes eigenvalues of a matrix. The basic QR algorithm makes use of the Schur Normal Form. <p> As a result, there are 51 no other eigenvalues of the pencil in the circle centered at s = s 0 with radius R = jt s 0 <ref> [Wil65] </ref> (as shown in Figure 3.3). We draw the following conclusions: * If t 2 [0; 1], t corresponds to an intersection point. <p> Let i be a closest eigenvalue to s 0 with corresponding eigenvector x i . If u 0 has a very small component of x i then rounding errors may prevent these components from being enriched and the algorithm may not converge. However, according to <ref> [Wil65] </ref>, this possibility is extremely rare if u 0 is chosen at random. If a given pair of curves or a curve and a surface have very few intersections, the technique based on algebraic pruning gives almost an order of magnitude improvement over the algorithm presented in [MD94].
Reference: [YA93] <author> J.H. Yang and J. Anderson. </author> <title> Fast, scalable synchronization with minimal hardware support. </title> <booktitle> In ACM symposium on Principles of Distributed Computing, </booktitle> <pages> pages 171-182, </pages> <year> 1993. </year> <month> 171 </month>
Reference-contexts: It is clear that the most effective parallel algorithm is one where the tasks are equally distributed among all the processors. The problem of load balancing has received considerable attention for a long time due to the fact that a single scheme is not applicable for parallelizing all algorithms <ref> [Lam87, YA93, Whi94, Gea95, HL95] </ref>. The effectiveness of different techniques varies with the nature of the problem it is used for. Hence there arises a need for newer problem specific analysis methods which help in choosing the most effective load balancing technique.
Reference: [ZS93] <author> A. Zundel and T. </author> <title> Sederberg. Using pyramidal surfaces to detect and isolate surface/surface intersections. </title> <booktitle> In SIAM Conference on Geometric Design, </booktitle> <address> Tempe, AZ, </address> <year> 1993. </year>
Reference-contexts: Patriakalakis et. al. [KPP90] precomputed the most significant points of the intersection curve between an algebraic surface and a parametric patch to identify the main features of the curve. Sederberg et. al. <ref> [SM88, ZS93] </ref> developed an efficient way to bound the normals and tangents of a surface using bounding cones and pyramidal surfaces, thereby giving a faster way to achieve the no loop condition.
References-found: 138

