URL: ftp://ftp.cc.gatech.edu/pub/gvu/tech-reports/95-02.ps.Z
Refering-URL: http://www.cc.gatech.edu/gvu/softviz/algoanim/algoanim.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: E-mail: fjkjstaskog@cc.gatech.edu  
Title: Visualizing Program Executions on Large Data Sets Using Semantic Zooming  
Author: Jeyakumar Muthukumarasamy John T. Stasko 
Address: Atlanta, GA 30332-0280  
Affiliation: Graphics, Visualization, and Usability Center College of Computing Georgia Institute of Technology  
Pubnum: Technical Report GIT-GVU-95-02  
Abstract: Understanding and interpreting a large data source is an important but challenging operation in many technical disciplines. Computer visualization has become a valuable tool to help capture and portray characteristics of large data sets. In software visualization, illustrating the operation of very large programs or programs working on very large data sets has remained one of the key open problems. Here, we introduce an approach that uses semantic zooming to depict large program executions. Our method utilizes abstract, clustered graphics to portray program operations on the entire data set. Then, by interacting with the presentation, a viewer can zoom in to examine details and individual values. At this "magnified" level, the presentation adjusts to reflect displays common in existing algorithm animation and program visualization systems. 
Abstract-found: 1
Intro-found: 1
Reference: [BH94] <author> Benjamin B. Bederson and James D. Hollan. </author> <title> Pad++: A zooming graphical interface for exploring alternate interface physics. </title> <booktitle> In Proceedings of the 1994 ACM Symposium on User Interface Software and Technology, </booktitle> <pages> pages 17-26, </pages> <address> Marina del Rey, CA, </address> <month> November </month> <year> 1994. </year>
Reference: [Bro88] <author> Marc H. Brown. </author> <title> Exploring algorithms using Balsa-II. </title> <journal> Computer, </journal> <volume> 21(5) </volume> <pages> 14-36, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: Software visualization systems can present a wide range of attributes about programs including views of data structures [Mye83, SI91], system functionality [Rei85, KRR94], algorithmic operations <ref> [Bro88, Sta90, Bro91] </ref>, performance measures [HE91, SG93, RWJ93, HM94], and even software engineering metrics [ESSJ92, DPHKV93]. Although much of the focus in software visualization has been on serial programs, recent interest in visualizing the operation of concurrent programs has grown [KS93] as well.
Reference: [Bro91] <author> Marc H. Brown. ZEUS: </author> <title> A system for algorithm animation and multi-view editing. </title> <booktitle> In Proceedings of the 1991 IEEE Workshop on Visual Languages, </booktitle> <pages> pages 4-9, </pages> <address> Kobe Japan, </address> <month> October </month> <year> 1991. </year>
Reference-contexts: Software visualization systems can present a wide range of attributes about programs including views of data structures [Mye83, SI91], system functionality [Rei85, KRR94], algorithmic operations <ref> [Bro88, Sta90, Bro91] </ref>, performance measures [HE91, SG93, RWJ93, HM94], and even software engineering metrics [ESSJ92, DPHKV93]. Although much of the focus in software visualization has been on serial programs, recent interest in visualizing the operation of concurrent programs has grown [KS93] as well.
Reference: [BS81] <author> Ronald M. Baecker and David Sherman. </author> <title> Sorting Out Sorting. 16mm color sound film, </title> <booktitle> 1981. Shown at SIGGRAPH '81, </booktitle> <address> Dallas TX. </address>
Reference-contexts: Animation Examples This section discusses two examples, sorting and graph programs, and shows how we use semantic zooming to present large data sets in these domains. 3 3.1 Sorting Programs Literally hundreds of animations of sorting programs exist, with perhaps the best known being the seminal video Sorting Out Sorting <ref> [BS81] </ref> by Ron Baecker. Virtually all of these existing animations, however, are of programs running on at most a few hundred data elements. <p> For example, Figure 5 shows the same program executions portrayed in the prior figures. Here, however, we have zoomed in far enough so that the data values shown can be depicted in the classic scatter-plot dots algorithm animation viewing technique <ref> [BS81] </ref>. Alternatively, the individual data elements could be shown in any other traditional algorithm animation or program visualization style, such as height-scaled bars [BS85]. At this level, detail about particular elements now is available.
Reference: [BS85] <author> Marc H. Brown and Robert Sedgewick. </author> <title> Techniques for algorithm animation. </title> <journal> IEEE Software, </journal> <volume> 2(1) </volume> <pages> 28-39, </pages> <month> January </month> <year> 1985. </year>
Reference-contexts: Here, however, we have zoomed in far enough so that the data values shown can be depicted in the classic scatter-plot dots algorithm animation viewing technique [BS81]. Alternatively, the individual data elements could be shown in any other traditional algorithm animation or program visualization style, such as height-scaled bars <ref> [BS85] </ref>. At this level, detail about particular elements now is available.
Reference: [Cou93] <author> Alva L. Couch. </author> <title> Categories and context in scalable execution visualization. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 18(2) </volume> <pages> 195-204, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: That is, software visualizations do not scale up well, and they poorly portray large systems or program executions on large data sets. Recent research has begun to address this issue, however. The Seeplex system by Couch <ref> [Cou93] </ref> provides scalable execution views for parallel programs, ones that do not change in size or meaning as the number of processors increases. Graphical elements portray categories of processors which are grouped by behavior. Different categories are depicted using color and texture. <p> Our work builds on all this prior research. Our particular focus herein is on 2-D, color graphical displays. This makes it potentially useful to a large number of software developers. Like Couch <ref> [Cou93] </ref>, we choose not to fallback on the use of scrolling and scrollbars to address scale. Like Leban [Leb93] and Hackstadt, et al [HMM94] in particular, and characteristic of all work in this area, we use graphical images to represent abstractions or clusters of values from a program.
Reference: [DBM89] <author> Thomas A. DeFanti, Maxine D. Brown, and Bruce H. McCormick. </author> <title> Visualization: Expanding scientific and research opportunities. </title> <journal> Computer, </journal> <volume> 22(8) </volume> <pages> 12-25, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: In particular, the views were created using the IBM Data Explorer scientific visualization environment. Techniques like this allow software visualizers to leverage the large body of work already existing in the scientific visualization community <ref> [Fre88, DBM89, R + 94] </ref>. 1 Also taking a 3-D approach, Stasko and Wehrli have developed views that can portray large data sets manipulated by large parallel programs [WS93, SW93]. All the work mentioned above was developed in the context of visualizing concurrent programs.
Reference: [DPHKV93] <author> Wim De Pauw, Richard Helm, Doug Kimelman, and John Vlissides. </author> <title> Visualizing the behavior of object-oriented systems. </title> <booktitle> In Proceedings of the ACM OOPSLA '93 Conference, </booktitle> <pages> pages 326-337, </pages> <address> Washington, D.C., </address> <month> October </month> <year> 1993. </year>
Reference-contexts: Software visualization systems can present a wide range of attributes about programs including views of data structures [Mye83, SI91], system functionality [Rei85, KRR94], algorithmic operations [Bro88, Sta90, Bro91], performance measures [HE91, SG93, RWJ93, HM94], and even software engineering metrics <ref> [ESSJ92, DPHKV93] </ref>. Although much of the focus in software visualization has been on serial programs, recent interest in visualizing the operation of concurrent programs has grown [KS93] as well.
Reference: [ESSJ92] <author> Stephen G. Eick, L. Steffen, Joseph, and Eric E. Sumner Jr. </author> <title> Seesoft|a tool for visualizing line oriented software statistics. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 18(11) </volume> <pages> 957-968, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: Software visualization systems can present a wide range of attributes about programs including views of data structures [Mye83, SI91], system functionality [Rei85, KRR94], algorithmic operations [Bro88, Sta90, Bro91], performance measures [HE91, SG93, RWJ93, HM94], and even software engineering metrics <ref> [ESSJ92, DPHKV93] </ref>. Although much of the focus in software visualization has been on serial programs, recent interest in visualizing the operation of concurrent programs has grown [KS93] as well. <p> All the work mentioned above was developed in the context of visualizing concurrent programs. This is not unexpected, since one of the primary advantages of a parallel computer is to facilitate computation on extremely large data sets. Research on visualizing large serial programs also exists, however. The SeeSoft system <ref> [ESSJ92] </ref> provides a columnar representation of source files in which one line of pixels on a display corresponds to one line of source code. In this way, thousands of lines of code can be presented succinctly on one display.
Reference: [Fre88] <author> Karen Frenkel. </author> <title> The art and science of visualizing data. </title> <journal> Communications of the ACM, </journal> <volume> 21(2) </volume> <pages> 110-121, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: In particular, the views were created using the IBM Data Explorer scientific visualization environment. Techniques like this allow software visualizers to leverage the large body of work already existing in the scientific visualization community <ref> [Fre88, DBM89, R + 94] </ref>. 1 Also taking a 3-D approach, Stasko and Wehrli have developed views that can portray large data sets manipulated by large parallel programs [WS93, SW93]. All the work mentioned above was developed in the context of visualizing concurrent programs.
Reference: [HE91] <author> Michael T. Heath and Jennifer A. Etheridge. </author> <title> Visualizing the performance of parallel programs. </title> <journal> IEEE Software, 8(5):29 -39, </journal> <month> September </month> <year> 1991. </year>
Reference-contexts: Software visualization systems can present a wide range of attributes about programs including views of data structures [Mye83, SI91], system functionality [Rei85, KRR94], algorithmic operations [Bro88, Sta90, Bro91], performance measures <ref> [HE91, SG93, RWJ93, HM94] </ref>, and even software engineering metrics [ESSJ92, DPHKV93]. Although much of the focus in software visualization has been on serial programs, recent interest in visualizing the operation of concurrent programs has grown [KS93] as well.
Reference: [HM94] <author> Steven T. Hackstadt and Allen D. Malony. </author> <title> Next generation parallel performance visualization: A prototyping environment for visualization development. </title> <booktitle> In Proceedings of the Parallel Architectures and Languages Europe (PARLE), </booktitle> <month> pages ???-???, July </month> <year> 1994. </year> <month> 14 </month>
Reference-contexts: Software visualization systems can present a wide range of attributes about programs including views of data structures [Mye83, SI91], system functionality [Rei85, KRR94], algorithmic operations [Bro88, Sta90, Bro91], performance measures <ref> [HE91, SG93, RWJ93, HM94] </ref>, and even software engineering metrics [ESSJ92, DPHKV93]. Although much of the focus in software visualization has been on serial programs, recent interest in visualizing the operation of concurrent programs has grown [KS93] as well.
Reference: [HMM94] <author> Steven T. Hackstadt, Allen D. Malony, and Bernd Mohr. </author> <title> Scalabale perfor-mance visualization for data-parallel programs. </title> <booktitle> In Proceedings of the Scalable High Performance Computing Conference (SHPCC '94), </booktitle> <pages> pages 342-349, </pages> <address> Knoxville, TN, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: A scripting language is provided to describe how data values in a program should be mapped to their visual depictions. Hackstadt, Malony, and Mohr have presented visualization techniques for illustrating large data-parallel program executions <ref> [HMM94] </ref>. They list four techniques to help create scalable visualizations: * adaptive graphical representations * reduction and filtering * spatial arrangements * generalized scrolling The program views utilized in this work differ from those used by Couch and Leban in that these use 3-D graphics. <p> Our particular focus herein is on 2-D, color graphical displays. This makes it potentially useful to a large number of software developers. Like Couch [Cou93], we choose not to fallback on the use of scrolling and scrollbars to address scale. Like Leban [Leb93] and Hackstadt, et al <ref> [HMM94] </ref> in particular, and characteristic of all work in this area, we use graphical images to represent abstractions or clusters of values from a program. In particular, we utilize the notion of semantic zooming, a visualization and interaction technique with three key components: 1.
Reference: [KRR94] <author> Doug Kimelman, Bryan Rosenburg, and Tova Roth. Strata-Various: </author> <title> Multilayer visualization of dynamics in software system behavior. </title> <booktitle> In Proceedings of the IEEE Visualization '94 Conference, </booktitle> <pages> pages 172-178, </pages> <address> Washington, D.C., </address> <month> October </month> <year> 1994. </year>
Reference-contexts: Software visualization systems can present a wide range of attributes about programs including views of data structures [Mye83, SI91], system functionality <ref> [Rei85, KRR94] </ref>, algorithmic operations [Bro88, Sta90, Bro91], performance measures [HE91, SG93, RWJ93, HM94], and even software engineering metrics [ESSJ92, DPHKV93]. Although much of the focus in software visualization has been on serial programs, recent interest in visualizing the operation of concurrent programs has grown [KS93] as well. <p> Strata-Various uses tabular and chart views to portray many different levels of a program execution including hardware, operating system, user libraries and the program itself <ref> [KRR94] </ref>. The system provides a variety of views and coordinated navigation techniques to facilitate viewer inspection of what a program did during a particular execution. Our work builds on all this prior research. Our particular focus herein is on 2-D, color graphical displays.
Reference: [KS93] <author> Eileen Kraemer and John T. Stasko. </author> <title> The visualization of parallel systems: An overview. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 18(2) </volume> <pages> 105-117, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Although much of the focus in software visualization has been on serial programs, recent interest in visualizing the operation of concurrent programs has grown <ref> [KS93] </ref> as well. One of the key open problems in software visualization, and a valid criticism of the area, is that most software visualizations are of smaller, laboratory-created programs [PBS93].
Reference: [Leb93] <author> Bruce Leban. </author> <title> Representative Views of Parallel Computation. </title> <type> Unpublished Ph.D. thesis proposal, </type> <institution> M.I.T., </institution> <year> 1993. </year>
Reference-contexts: Graphical elements portray categories of processors which are grouped by behavior. Different categories are depicted using color and texture. Users also can create new categories by interactively selecting portions of views. Leban has developed the notion of a representative view <ref> [Leb93] </ref>, one in which both the elements and the behavior of a program are mapped many-to-one to a relatively small number of graphical elements. In other words, graphical objects in a view represent collections of values or operations in a program. <p> Our particular focus herein is on 2-D, color graphical displays. This makes it potentially useful to a large number of software developers. Like Couch [Cou93], we choose not to fallback on the use of scrolling and scrollbars to address scale. Like Leban <ref> [Leb93] </ref> and Hackstadt, et al [HMM94] in particular, and characteristic of all work in this area, we use graphical images to represent abstractions or clusters of values from a program. In particular, we utilize the notion of semantic zooming, a visualization and interaction technique with three key components: 1. <p> The average of all 4 is completely sorted. Note that the 10 blocks are mutually exclusive and totally black. the elements in a block is computed and represented as a bright horizontal line dividing the rectangle. Following an idea of Leban <ref> [Leb93] </ref>, the shade or fill pattern of a block indicates how "sorted" the block is. The shade of a completely unsorted (data values in reverse sorted order) block is shown as white and the shade of a totally sorted block is shown as black.
Reference: [Mye83] <author> Brad A. Myers. </author> <title> A system for displaying data structures. </title> <journal> Computer Graphics: </journal> <volume> SIGGRAPH '83, 17(3) </volume> <pages> 115-125, </pages> <month> July </month> <year> 1983. </year>
Reference-contexts: Software visualization systems can present a wide range of attributes about programs including views of data structures <ref> [Mye83, SI91] </ref>, system functionality [Rei85, KRR94], algorithmic operations [Bro88, Sta90, Bro91], performance measures [HE91, SG93, RWJ93, HM94], and even software engineering metrics [ESSJ92, DPHKV93].
Reference: [PBS93] <author> Blaine A. Price, Ronald M. Baecker, and Ian S. </author> <title> Small. A principled taxonomy of software visualization. </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 4(3) </volume> <pages> 211-266, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Software Visualization is the use of visualization and animation techniques to help people understand the characteristics and executions of computer programs <ref> [SP92, PBS93] </ref>. By facilitating program understanding, one can assist students who are learning new programming methodologies, and software developers who are testing, debugging, maintaining, and optimizing their code. <p> One of the key open problems in software visualization, and a valid criticism of the area, is that most software visualizations are of smaller, laboratory-created programs <ref> [PBS93] </ref>. That is, software visualizations do not scale up well, and they poorly portray large systems or program executions on large data sets. Recent research has begun to address this issue, however.
Reference: [PF93] <author> Ken Perlin and David Fox. </author> <title> Pad: An alternative approach to the computer interface. </title> <booktitle> In Proceedings of the 1993 ACM SIGGRAPH Conference, </booktitle> <pages> pages 57-64, </pages> <address> Anaheim, CA, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: The AGE Graphical Environment [SKA94] uses semantic zooming to show more detail of objects in pen-based computing environments. The Galaxy of News system [Ren94] helps support navigation through a large news article information space by providing semantic zooming operations to the viewer. Pad <ref> [PF93] </ref> and Pad++[BH94] provide general information visualization environments where semantic zooming is the primary presentation and navigation metaphor. When the user selects an object to examine, the view zooms in on that object.
Reference: [R + 94] <editor> Lawrence Rosenblum et al., editors. </editor> <booktitle> Scientific Visualization: Advances and Challenges. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <address> Los Alomitos, CA, </address> <year> 1994. </year>
Reference-contexts: In particular, the views were created using the IBM Data Explorer scientific visualization environment. Techniques like this allow software visualizers to leverage the large body of work already existing in the scientific visualization community <ref> [Fre88, DBM89, R + 94] </ref>. 1 Also taking a 3-D approach, Stasko and Wehrli have developed views that can portray large data sets manipulated by large parallel programs [WS93, SW93]. All the work mentioned above was developed in the context of visualizing concurrent programs.
Reference: [Rei85] <author> Steve P. Reiss. </author> <title> Pecan: Program development systems that support multiple views. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-11(3):276-285, </volume> <month> March </month> <year> 1985. </year>
Reference-contexts: Software visualization systems can present a wide range of attributes about programs including views of data structures [Mye83, SI91], system functionality <ref> [Rei85, KRR94] </ref>, algorithmic operations [Bro88, Sta90, Bro91], performance measures [HE91, SG93, RWJ93, HM94], and even software engineering metrics [ESSJ92, DPHKV93]. Although much of the focus in software visualization has been on serial programs, recent interest in visualizing the operation of concurrent programs has grown [KS93] as well.
Reference: [Ren94] <author> Earl Rennsion. </author> <title> Galaxy of news: An approach to visualizing and understanding expansive news landscapes. </title> <booktitle> In Proceedings of the 1994 ACM Symposium on User Interface Software and Technology, </booktitle> <pages> pages 3-12, </pages> <address> Marina del Rey, CA, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: A variety of different systems have utilized the general notion of semantic zooming recently. The AGE Graphical Environment [SKA94] uses semantic zooming to show more detail of objects in pen-based computing environments. The Galaxy of News system <ref> [Ren94] </ref> helps support navigation through a large news article information space by providing semantic zooming operations to the viewer. Pad [PF93] and Pad++[BH94] provide general information visualization environments where semantic zooming is the primary presentation and navigation metaphor.
Reference: [RWJ93] <author> Diane T. Rover and Charles T. Wright Jr. </author> <title> Visualizing the performance of SPMD and data-parallel programs. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 18(2) </volume> <pages> 129-146, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Software visualization systems can present a wide range of attributes about programs including views of data structures [Mye83, SI91], system functionality [Rei85, KRR94], algorithmic operations [Bro88, Sta90, Bro91], performance measures <ref> [HE91, SG93, RWJ93, HM94] </ref>, and even software engineering metrics [ESSJ92, DPHKV93]. Although much of the focus in software visualization has been on serial programs, recent interest in visualizing the operation of concurrent programs has grown [KS93] as well.
Reference: [SB94] <author> Manojit Sarkar and Marc H. Brown. </author> <title> Graphical fisheye views. </title> <journal> Communications of the ACM, </journal> <volume> 37(12) </volume> <pages> 73-84, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: One possible solution is to use fisheye view techniques <ref> [SB94] </ref>. This approach alleviates the problem to some extent, but it will break down on a graph with a very large number of vertices, too many to properly fit within a display window.
Reference: [SG93] <author> Sekhar R. Sarukkai and Dennis Gannon. </author> <title> SIEVE: A performance debugging environment for parallel programs. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 18(2) </volume> <pages> 147-168, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Software visualization systems can present a wide range of attributes about programs including views of data structures [Mye83, SI91], system functionality [Rei85, KRR94], algorithmic operations [Bro88, Sta90, Bro91], performance measures <ref> [HE91, SG93, RWJ93, HM94] </ref>, and even software engineering metrics [ESSJ92, DPHKV93]. Although much of the focus in software visualization has been on serial programs, recent interest in visualizing the operation of concurrent programs has grown [KS93] as well.
Reference: [SI91] <author> Takao Shimomura and Sadahiro Isoda. </author> <title> Linked-list visualization for debugging. </title> <journal> IEEE Software, </journal> <volume> 8(3) </volume> <pages> 44-51, </pages> <month> May </month> <year> 1991. </year> <month> 15 </month>
Reference-contexts: Software visualization systems can present a wide range of attributes about programs including views of data structures <ref> [Mye83, SI91] </ref>, system functionality [Rei85, KRR94], algorithmic operations [Bro88, Sta90, Bro91], performance measures [HE91, SG93, RWJ93, HM94], and even software engineering metrics [ESSJ92, DPHKV93].
Reference: [SK93] <author> John T. Stasko and Eileen Kraemer. </author> <title> A methodology for building application--specific visualizations of parallel programs. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 18(2) </volume> <pages> 258-264, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: We also have found it useful to introduce a mode where the detailed view is always present and it automatically follows the focus of the algorithm. 4 Support Environment The visualizations shown in this article were built using the Polka animation system <ref> [SK93] </ref>. Polka provides an object-oriented framework for building animations, including individual windows or Views in which animations occur. Within a View, graphical objects (called AnimObjects) such as lines, rectangles, circles, text, etc., can change position, size, color, and so on, thus presenting an animation.
Reference: [SKA94] <author> Samudra Sengupta, Takayuki Dan Kimura, and Ajay Apte. </author> <title> An artist's studio: A metaphor for modularity and abstraction in a graphical diagramming environment. </title> <booktitle> In Proceedings of the 1994 IEEE Symposium on Visual Languages, </booktitle> <pages> pages 128-136, </pages> <address> St. Louis, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: Most importantly, these two views may not look anything alike, but they should be built to be as informative and to convey as much information as possible at that level. A variety of different systems have utilized the general notion of semantic zooming recently. The AGE Graphical Environment <ref> [SKA94] </ref> uses semantic zooming to show more detail of objects in pen-based computing environments. The Galaxy of News system [Ren94] helps support navigation through a large news article information space by providing semantic zooming operations to the viewer.
Reference: [SP92] <author> John T. Stasko and Charles Patterson. </author> <title> Understanding and characterizing software visualization systems. </title> <booktitle> In Proceedings of the 1992 IEEE Workshop on Visual Languages, </booktitle> <pages> pages 3-10, </pages> <address> Seattle, WA, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Software Visualization is the use of visualization and animation techniques to help people understand the characteristics and executions of computer programs <ref> [SP92, PBS93] </ref>. By facilitating program understanding, one can assist students who are learning new programming methodologies, and software developers who are testing, debugging, maintaining, and optimizing their code.
Reference: [Sta90] <author> John T. Stasko. </author> <title> TANGO: A framework and system for algorithm animation. </title> <journal> Computer, </journal> <volume> 23(9) </volume> <pages> 27-39, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: Software visualization systems can present a wide range of attributes about programs including views of data structures [Mye83, SI91], system functionality [Rei85, KRR94], algorithmic operations <ref> [Bro88, Sta90, Bro91] </ref>, performance measures [HE91, SG93, RWJ93, HM94], and even software engineering metrics [ESSJ92, DPHKV93]. Although much of the focus in software visualization has been on serial programs, recent interest in visualizing the operation of concurrent programs has grown [KS93] as well.
Reference: [SW93] <author> John T. Stasko and Joseph F. Wehrli. </author> <title> Three-dimensional computation visualization. </title> <booktitle> In Proceedings of the 1993 IEEE Symposium on Visual Languages, </booktitle> <pages> pages 100-107, </pages> <address> Bergen, Norway, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: Techniques like this allow software visualizers to leverage the large body of work already existing in the scientific visualization community [Fre88, DBM89, R + 94]. 1 Also taking a 3-D approach, Stasko and Wehrli have developed views that can portray large data sets manipulated by large parallel programs <ref> [WS93, SW93] </ref>. All the work mentioned above was developed in the context of visualizing concurrent programs. This is not unexpected, since one of the primary advantages of a parallel computer is to facilitate computation on extremely large data sets. Research on visualizing large serial programs also exists, however.
Reference: [WS93] <author> Joseph Wehrli and John Stasko. </author> <title> Interactive three-dimensional visual debugging in massively parallel computation (extended abstract). </title> <booktitle> In Proceedings of the 1993 ACM/ONR Workshop on Parallel and Distributed Debugging, </booktitle> <pages> pages 235-237, </pages> <address> San Diego, CA, </address> <month> May </month> <year> 1993. </year> <month> 16 </month>
Reference-contexts: Techniques like this allow software visualizers to leverage the large body of work already existing in the scientific visualization community [Fre88, DBM89, R + 94]. 1 Also taking a 3-D approach, Stasko and Wehrli have developed views that can portray large data sets manipulated by large parallel programs <ref> [WS93, SW93] </ref>. All the work mentioned above was developed in the context of visualizing concurrent programs. This is not unexpected, since one of the primary advantages of a parallel computer is to facilitate computation on extremely large data sets. Research on visualizing large serial programs also exists, however.
References-found: 32

