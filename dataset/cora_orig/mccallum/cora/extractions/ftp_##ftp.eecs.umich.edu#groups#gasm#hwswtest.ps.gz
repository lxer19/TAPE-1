URL: ftp://ftp.eecs.umich.edu/groups/gasm/hwswtest.ps.gz
Refering-URL: http://www.eecs.umich.edu/gasm/papers.html
Root-URL: http://www.eecs.umich.edu
Title: Fast Dynamic Analysis of Complex HW/SW-Systems based on Abstract State Machine Models  
Author: Giuseppe Del Castillo Wolfram Hardt 
Address: Furstenallee 11, 33102 Paderborn, Germany  Furstenallee 11, 33102 Paderborn, Germany  
Affiliation: Heinz Nixdorf Institut Department of Mathematics Computer Science University of Paderborn  C-LAB: Cooperative Computing Communication Laboratory, Siemens Nixdorf Informationssysteme AG University of Paderborn  
Abstract: High level design decisions as HW/SW-partitioning and instrumenting of building blocks can be supported efficiently by detailed analysis of dynamic instruction usage. In many cases the instruction usage is specific to the application domain in view. We present a very fast analysis approach based on high level system models. Complex application characteristics, e.g., the average number of not interrupted instructions can be determined. This is much more than execution of, e.g., C-programs can provide. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Bartoloni et al. </author> <title> The Software of the APE100 Processor and A Hardware Implementation of the APE100 Architecture. </title> <journal> International Journal of Modern Physics, </journal> <note> C 4 (1993), p. 955. </note>
Reference-contexts: This instruction set is used as a kind of abstract assembler code for the zCPU, a VLIW processor used as control unit in the SIMD parallel architecture APE100 developed at INFN 5 <ref> [1] </ref>. The zCPU processor itself has already been modelled at the RT-level by means of ASMs in [2]. In the APE100 architecture, the abstract assembler code is mapped to executable VLIW code for the zCPU by a code generator.
Reference: [2] <author> E. Borger, G. Del Castillo. </author> <title> A formal method for provably correct composition of a real-life processor out of basic components. </title> <editor> In: B. Werner (Ed.), </editor> <booktitle> Proc. of ICECCS'95, </booktitle> <address> Ft. Lauderdale, Florida, </address> <pages> pp. 145-148. </pages>
Reference-contexts: This instruction set is used as a kind of abstract assembler code for the zCPU, a VLIW processor used as control unit in the SIMD parallel architecture APE100 developed at INFN 5 [1]. The zCPU processor itself has already been modelled at the RT-level by means of ASMs in <ref> [2] </ref>. In the APE100 architecture, the abstract assembler code is mapped to executable VLIW code for the zCPU by a code generator.
Reference: [3] <author> J. Buck, S. Ha, A. Lee, D.G. Messerschmidt. Ptolemy: </author> <title> a Framework for Simulation and Prototyping Heterogeneous Systems. </title> <journal> International Journal of Computer Simulation, Special issue on Simulation Software Development, </journal> <month> Jan. </month> <year> 1994. </year>
Reference-contexts: Of course, this cannot be determined statically, as the control structure is in general data-dependent. For evaluation co-simulation can be used. Several approaches to co-simulation have been proposed, e.g., <ref> [10, 3, 4] </ref>. One major problem is the design complexity of HW/SW-systems, which leads to very long simulation times. Other approaches provide executable HW/SW-implementations for dynamic analysis, e.g., [8]. This is much faster than simulation but the instrumentation of the executable implementation is very specialized to one single target system.
Reference: [4] <author> R. Camposano, J. Wilberg. </author> <title> Embedded System Design. Design Automation for Embedded Systems, </title> <booktitle> 1995, </booktitle> <volume> vol. 1, no. 1, </volume> <pages> pp. 5-50. </pages>
Reference-contexts: Of course, this cannot be determined statically, as the control structure is in general data-dependent. For evaluation co-simulation can be used. Several approaches to co-simulation have been proposed, e.g., <ref> [10, 3, 4] </ref>. One major problem is the design complexity of HW/SW-systems, which leads to very long simulation times. Other approaches provide executable HW/SW-implementations for dynamic analysis, e.g., [8]. This is much faster than simulation but the instrumentation of the executable implementation is very specialized to one single target system.
Reference: [5] <author> G. Del Castillo. ASM-SL, </author> <title> a Specification Language based on Gurevich's Abstract State Machines: Introduction and Tutorial. Universitat-GH Paderborn, </title> <type> technical report, </type> <note> to appear. </note>
Reference-contexts: overview of the basic notions of ASMs, a first case study, and some experimental results to demonstrate the improvements of our approach. 2 Basic Concepts of Abstract State Machines In this section we introduce the notions of ASMs needed in this paper, as implemented in the ASM-SL specifica tion language <ref> [5] </ref> (the reader interested in a deeper study of ASMs should consult Gurevich's definition of ASMs in [7]). <p> Its meaning is, obviously: S ( R ) = S ( R T ) if S (G) = true S ( R F ) otherwise. The ASM-SL Environment The basic ASM constructions described above are part of the ASM-SL specification language <ref> [5] </ref>, which also contains features for defining types, functions, and transitions, and a set of predefined types (booleans, integers, etc.) and generic data structures (tuples, lists, sets, etc.), which help to model a wide range of systems in a concise way.
Reference: [6] <author> M. Giese, D. Kempe, A. Schonegge. </author> <title> KIV zur Verifika-tion von ASM-Spezifikationen am Beispiel der DLX-Pipelining Architektur. </title> <institution> Universitat Karlsruhe, </institution> <note> Interner Bericht Nr. 16/97, </note> <year> 1997. </year>
Reference-contexts: The presented analysis approach provides much more information than, e.g., the execution of a C-program which is derived from the ASM model basis. Further work will concentrate on the adaption of design space exploration. Moreover, ASMs could be used for verification (see for instance <ref> [6] </ref>, where the theorem prover KIV is used to verify the correctness of an ASM-based model of the DLX architecture).
Reference: [7] <author> Y. Gurevich. </author> <title> Evolving Algebras 1993: Lipari Guide. </title> <editor> In E. Borger, editor, </editor> <title> Specification and Validation Methods. </title> <publisher> Oxford University Press, </publisher> <year> 1995. </year>
Reference-contexts: the improvements of our approach. 2 Basic Concepts of Abstract State Machines In this section we introduce the notions of ASMs needed in this paper, as implemented in the ASM-SL specifica tion language [5] (the reader interested in a deeper study of ASMs should consult Gurevich's definition of ASMs in <ref> [7] </ref>).
Reference: [8] <author> W. Hardt, W. Rosenstiel. </author> <title> Speed-Up Estimation for HW/SW-Systems. </title> <booktitle> Proc. of CODES/CACHE '96. </booktitle>
Reference-contexts: For evaluation co-simulation can be used. Several approaches to co-simulation have been proposed, e.g., [10, 3, 4]. One major problem is the design complexity of HW/SW-systems, which leads to very long simulation times. Other approaches provide executable HW/SW-implementations for dynamic analysis, e.g., <ref> [8] </ref>. This is much faster than simulation but the instrumentation of the executable implementation is very specialized to one single target system. In this paper, we propose a different approach for system level analysis of HW/SW-systems. An abstract model is provided for analysis of dynamic instruction usage.
Reference: [9] <author> W. Hardt, W. Rosenstiel. </author> <title> Prototyping of Tightly Coupled Hardware/Software-Systems. </title> <booktitle> Design Automation for Embedded Systems, </booktitle> <volume> vol. 2, no. </volume> <month> 1 </month> <year> (1997). </year>
Reference-contexts: Based on this analysis data, important design deci sions are made, e.g., concerning HW/SW-partitioning, and the complexity of BBs. Hardt and Rosenstiel have pointed out that detailed analysis data, e.g., on memory access and dynamic instruction usage are important for performance driven HW/SW-partitioning <ref> [9] </ref>. Of course, this cannot be determined statically, as the control structure is in general data-dependent. For evaluation co-simulation can be used. Several approaches to co-simulation have been proposed, e.g., [10, 3, 4]. One major problem is the design complexity of HW/SW-systems, which leads to very long simulation times.
Reference: [10] <author> J. Henkel, Th. Benner, R. Ernst, W. Ye, N. Serafimov, G. Glawe. COSYMA: </author> <title> A SoftwareOriented Approach to Hardware/Software Codesign. </title> <journal> Journal of Computer and Software Engineering, 1994, </journal> <volume> vol. 2, no. </volume> <month> 3. </month> <title> More details about the techniques and models described in this paper can be found at: </title> <address> http://www.uni-paderborn.de/cs/giusp.html </address>
Reference-contexts: Of course, this cannot be determined statically, as the control structure is in general data-dependent. For evaluation co-simulation can be used. Several approaches to co-simulation have been proposed, e.g., <ref> [10, 3, 4] </ref>. One major problem is the design complexity of HW/SW-systems, which leads to very long simulation times. Other approaches provide executable HW/SW-implementations for dynamic analysis, e.g., [8]. This is much faster than simulation but the instrumentation of the executable implementation is very specialized to one single target system.
References-found: 10

