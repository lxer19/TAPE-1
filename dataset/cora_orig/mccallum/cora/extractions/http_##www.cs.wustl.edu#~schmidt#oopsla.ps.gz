URL: http://www.cs.wustl.edu/~schmidt/oopsla.ps.gz
Refering-URL: http://www.cs.wustl.edu/~nanbor/cgi-bin/ace-cvs.cgi/ACE_wrappers/TAO/docs/releasenotes/index.html?r1=1.23&r2=1.24
Root-URL: 
Email: fharrison,levine,schmidtg@cs.wustl.edu  
Title: The Design and Performance of a Real-time CORBA Event Service  
Author: Timothy H. Harrison, David L. Levine, and Douglas C. Schmidt 
Date: June 24, 1998  
Address: St. Louis, MO 63130, USA  
Affiliation: Department of Computer Science, Washington University  
Abstract: This paper appeared in the Proceedings of the OOPSLA '97 conference, Atlanta, Georgia, October, 1997. It is available from the Washington University, St. Louis, Department of Computer Science, as Technical Report #WUCS-97-31. Abstract The CORBA Event Service provides a flexible model for asynchronous communication among objects. However, the standard CORBA Event Service specification lacks important features required by real-time applications. For instance, operational flight programs for fighter aircraft have complex real-time processing requirements. This paper describes the design and performance of an object-oriented, real-time implementation of the CORBA Event Service that is designed to meet these requirements. This paper makes three contributions to the design and performance measurement of object-oriented real-time systems. First, it illustrates how to extend the CORBA Event Service so that it is suitable for real-time systems. These extensions support periodic rate-based event processing and efficient event filtering and correlation. Second, it describes how to develop object-oriented event dispatching and scheduling mechanisms that can provide real-time guarantees. Finally, the paper presents benchmarks that demonstrate the performance tradeoffs of alternative concurrent dispatching mechanisms for real-time Event Services. 
Abstract-found: 1
Intro-found: 1
Reference: <institution> References </institution>
Reference: [1] <author> Object Management Group, </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <editor> 2.2 ed., </editor> <month> Feb. </month> <year> 1998. </year>
Reference-contexts: However, many real-time application domains (such as avionics, telecommunications, process control, and distributed interactive simulation) can benefit from flexible and open distributed object computing architectures, such as those defined in the CORBA specification <ref> [1] </ref>. 1.1 Overview of CORBA CORBA is a distributed object computing middleware standard being defined by the Object Management Group (OMG).
Reference: [2] <author> S. Vinoski, </author> <title> CORBA: Integrating Diverse Applications Within Distributed Heterogeneous Environments, </title> <journal> IEEE Communications Magazine, </journal> <volume> vol. 14, </volume> <month> February </month> <year> 1997. </year>
Reference-contexts: Reference Model architecture <ref> [2] </ref>: At the heart of the OMG Reference Model is the Object Request Broker (ORB).
Reference: [3] <author> D. C. Schmidt, A. Gokhale, T. Harrison, and G. </author> <month> Parulkar, </month>
Reference-contexts: ORBs allow clients to invoke operations on target object implementations without concern for where the object resides, what language the object is written in, the OS/hardware platform, or the type of communication protocols and networks used to interconnect distributed objects <ref> [3] </ref>. This paper focuses on the CORBA Event Service, which is defined within the CORBA Object Services (COS) component in Figure 1. The COS specification [4] presents architectural models and interfaces that factor out common services for developing distributed applications. <p> To alleviate the limitations with the standard COS Event Service, we have developed a Real-time Event Service (RT Event Service) as part of the TAO project <ref> [3] </ref> at Washington University. TAO is a real-time ORB endsystem that provides end-to-end quality of service guarantees to applications by vertically integrating CORBA middleware with OS I/O subsystems, communication protocols, and network interfaces. and their relationship to the real-time Event Service. <p> Our approach is based on emerging distributed object computing standards (i.e., CORBA) we focus on the design and performance of various strategies for implementing QoS in real-time ORBs <ref> [3] </ref>. The QuO project at BBN [18] has defined a model for communicating changes in QoS characteristics between applications, middleware, and the underlying endsystems and network. <p> Chief among these missing features include real-time event dispatching and scheduling, periodic event processing, and centralized event filtering and correlations. To resolve these limitations, we have developed a Real-time Event Service (RT Event Service) as part of the TAO project <ref> [3] </ref>. TAO's RT Event Service extends the COS Event Service specification to satisfy the quality of service (QoS) needs of real-time applications in domains like avionics, telecommunications, and process control. <p> The current design of the Dispatching Module is motivated largely from need to support a single host, real-time event propagation mechanism. To allow all CORBA applications to utilize the ORB's real-time scheduling and dispatching features, we are integrating the role of the Dispatching Module into TAO's Real-time Object Adapter <ref> [3] </ref>. However, this paper focuses on an implementation that integrates real-time dispatching into TAO's Real-time Event Service. 4.1.2 Scheduling Enforcement The real-time scheduling for the version of TAO's Event Channel described in this paper is performed off-line. Therefore, no mechanisms for enforcing component behavior are provided.
References-found: 4

