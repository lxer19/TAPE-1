URL: ftp://ftp.docs.uu.se/docs/papers/exrt_group/Linda95_LNCS.ps.Z
Refering-URL: http://www.csd.uu.se/~stinal/publications.html
Root-URL: 
Email: E-mail: -stinal, goranw-@DoCS.UU.SE  
Phone: Phone: +46 18 18 25 00, Fax: +46 18 55 02 25  
Title: Using Object Oriented Methods in Ada 95 to Implement Linda  
Author: Kristina Lundqvist Gran Wall 
Address: P.O. Box 325, S-751 05 Uppsala, Sweden  
Affiliation: Department of Computer Systems, Uppsala University  
Note: This work is sponsored by NUTEK, project number P1221-2  
Abstract: This paper describes an implementation of Linda for Ada 95. The new capabilities of object oriented programming and programming by extension are used to define an elegant, type safe and easy to use interface to Linda. The implementation provides more of the functionality of Linda than Ada-Linda for Ada 83. A short presentation of the Linda model and a programming example are also included.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Ahuja, N. Carriero, and D. Gelernter, </author> <title> Linda and Friends, </title> <journal> IEEE Com puter, </journal> <volume> 19(8) </volume> <pages> 26-34, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: 1 Introduction Linda <ref> [1] </ref> is a language independent model for concurrent and distributed programming, that can be hosted by any language, e.g. Ada [5]. The model introduces a few simple operations on a logical associative distributed memory, the Tuple Space.
Reference: [2] <author> N. Carriero, and D. Gelernter, </author> <title> How to Write Parallel Programs: A First Course, </title> <publisher> The MIT Press, </publisher> <address> London England, ISBN 0-262-03171-X. </address>
Reference-contexts: initial tuple space, A in fig 1, the effect of performing the operations In, Rd and Out as in B, will cause the TS to change to that of C. 2.2 Previous Work With Linda There exists several implementations with Linda and different host languages such as Ada-Linda [6], C-Linda <ref> [2] </ref>, C++Linda [10], and many more; a number of them listed in [10]. 3 Implementing Linda With Ada 95 Ada 95 offers new and powerful programming constructs that can be used to make a new and, in our opinion, more powerful implementation of Linda for Ada than was possible with Ada <p> New Operations on Tuple Space Two new operations on TS are added, TS_Inp and TS_Readp <ref> [2] </ref>[3]. The operations does not belong to the original Linda model, but has been implemented in e.g. C-Linda [2]. The operations try to find a matching tuple and return false if they fail; otherwise they return true and match with the found tuple. The only difference compared to TS_In and TS_Read is that the predicates will not block if no matching tuple is found.
Reference: [3] <author> N. Carriero, and D. Gelernter, </author> <title> How to Write Parallel Programs: A Guide to the Perplexed, </title> <journal> ACM Computing Surveys, </journal> <volume> Vol. 21, No. 3, </volume> <month> September </month> <year> 1989. </year>
Reference-contexts: Tasks communicate in an uncoupled fashion by inserting, reading and removing memory objects, called tuples, from the tuple space. Linda is suitable for a wide range of programming styles, e.g. the master-worker technique. A detailed survey of programming styles for Linda can be found in <ref> [3] </ref>. There exists an implementation of Linda for Ada 83 called Ada-Linda [6]. However, Ada 95 with its new object oriented features, child packages and protected objects, supplies more sophisticated programming constructs than Ada 83 for implementing Linda. <p> With two request lists there appears to be a risk for starvation when In and Read requests compete over the same tuple. This is a no-risk considering the semantics of the operations on the tuple space and the common programming techniques used in Linda <ref> [3] </ref>, e.g. the Master-Worker technique, see example in section 4. If applications are depend-ing on that a tuple is read by a number of tasks before it is removed from the tuple space the applications still needs some extra synchronization.
Reference: [4] <author> D. Gelernter, </author> <title> Multiple Tuple Spaces in Linda, </title> <booktitle> proceedings PARLE '89, </booktitle> <volume> LNCS no 366, </volume> <pages> pp 20-27, </pages> <year> 1989. </year>
Reference: [5] <author> Intermetrics Inc., </author> <title> Ada 95 Reference Manual, </title> <address> ANSI/ISO/IEC-8652:1995, </address> <month> Jan. </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Linda [1] is a language independent model for concurrent and distributed programming, that can be hosted by any language, e.g. Ada <ref> [5] </ref>. The model introduces a few simple operations on a logical associative distributed memory, the Tuple Space. Tasks communicate in an uncoupled fashion by inserting, reading and removing memory objects, called tuples, from the tuple space. Linda is suitable for a wide range of programming styles, e.g. the master-worker technique.
Reference: [6] <author> Y. Kermarrec and L. Pautet, Ada-Linda: </author> <title> a powerful paradigm for programming distributed Ada applications, </title> <booktitle> proceedings of the TRI-Ada '94 confer ence, </booktitle> <pages> pp 438-445, </pages> <address> Baltimore, Maryland, </address> <year> 1994. </year>
Reference-contexts: Linda is suitable for a wide range of programming styles, e.g. the master-worker technique. A detailed survey of programming styles for Linda can be found in [3]. There exists an implementation of Linda for Ada 83 called Ada-Linda <ref> [6] </ref>. However, Ada 95 with its new object oriented features, child packages and protected objects, supplies more sophisticated programming constructs than Ada 83 for implementing Linda. These new capabilities allow a more elegant, type safe Linda that better suits the Ada way of writing programs. <p> Given the initial tuple space, A in fig 1, the effect of performing the operations In, Rd and Out as in B, will cause the TS to change to that of C. 2.2 Previous Work With Linda There exists several implementations with Linda and different host languages such as Ada-Linda <ref> [6] </ref>, C-Linda [2], C++Linda [10], and many more; a number of them listed in [10]. 3 Implementing Linda With Ada 95 Ada 95 offers new and powerful programming constructs that can be used to make a new and, in our opinion, more powerful implementation of Linda for Ada than was possible
Reference: [7] <author> Y. Kermarrec, L. Pautet, and S. Tardieu, GARLIC: </author> <title> Generic Ada Reusable Library for Interpartition Communication, </title> <booktitle> proceedings of the TRI-Ada '95 conference, </booktitle> <pages> pp 263-269, </pages> <address> Anaheim, California, </address> <year> 1995. </year>
Reference-contexts: Node 1 is initiator. Solid arcs indicates requests and dashed arcs indicates positive replies. 3.6 Network Communication We are still awaiting the release of a version of GNAT that implements streams and that supplies the services of GARLIC <ref> [7] </ref>, therefore only in-partition communication is currently available. In-partition communication is sufficient for writing and testing Linda applications, and for verifying the tuple search protocol. 4 A Programming Example A common technique for writing parallel programs is the master-worker method, which Linda is specially suitable for.
Reference: [8] <author> B. B. Mandelbrot, </author> <title> The Fractal Geometry of Nature, </title> <editor> W. H. </editor> <publisher> Freeman and Company, </publisher> <address> New York, ISBN 0-7167-1186-9. </address>
Reference-contexts: Workers on lightly loaded CPUs solve their assignments faster than workers on more heavily loaded CPUs and thus get to solve more assignments. The following example shows how Linda can be used to implement a master-worker solution of the Mandelbrot problem <ref> [8] </ref>. The Mandelbrot problem is to decide which points in the complex plane belongs to the Mandelbrot set. A point belongs to the set if the absolute value of the formula Z in fig 4 is less or equal to 2 after an infinite number of iterations.
Reference: [9] <author> L. Sterling and E. Shapiro, </author> <title> The Art of Prolog, </title> <publisher> Cambridge, Mas: MIT Press. </publisher>
Reference-contexts: The matching is done by using a template-tuple with the same number of fields as the tuple, and it works much like unification in Prolog <ref> [9] </ref>. The fields in a template can either be actual or formal fields, where an actual field is a value and a formal field denotes any value of a given type.
Reference: [10] <editor> Greg Wilson (editor), </editor> <title> Linda-Like Systems and Their Implementations, Edinburgh Parallel Computing Centre, </title> <type> Technical Report 91-13, </type> <month> June 24, </month> <year> 1991. </year>
Reference-contexts: space, A in fig 1, the effect of performing the operations In, Rd and Out as in B, will cause the TS to change to that of C. 2.2 Previous Work With Linda There exists several implementations with Linda and different host languages such as Ada-Linda [6], C-Linda [2], C++Linda <ref> [10] </ref>, and many more; a number of them listed in [10]. 3 Implementing Linda With Ada 95 Ada 95 offers new and powerful programming constructs that can be used to make a new and, in our opinion, more powerful implementation of Linda for Ada than was possible with Ada 83. <p> operations In, Rd and Out as in B, will cause the TS to change to that of C. 2.2 Previous Work With Linda There exists several implementations with Linda and different host languages such as Ada-Linda [6], C-Linda [2], C++Linda <ref> [10] </ref>, and many more; a number of them listed in [10]. 3 Implementing Linda With Ada 95 Ada 95 offers new and powerful programming constructs that can be used to make a new and, in our opinion, more powerful implementation of Linda for Ada than was possible with Ada 83.
References-found: 10

