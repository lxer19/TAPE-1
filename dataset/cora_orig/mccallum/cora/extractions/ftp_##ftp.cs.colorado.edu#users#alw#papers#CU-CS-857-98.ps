URL: ftp://ftp.cs.colorado.edu/users/alw/papers/CU-CS-857-98.ps
Refering-URL: http://www.cs.colorado.edu/users/alw/RecentPubs.html
Root-URL: http://www.cs.colorado.edu
Email: fcarzanig,rickhall,dennis,andre,alwg@cs.colorado.edu fuggetta@elet.polimi.it  
Title: A Characterization Framework for Software Deployment Technologies  
Author: Antonio Carzaniga yz Alfonso Fuggetta Richard S. Hall Dennis Heimbigner Andre van der Hoek and Alexander L. Wolf Antonio Carzaniga, Alfonso Fuggetta, Richard S. Hall, Dennis Heimbigner, Andre van der Hoek, and Alexander L. Wolf 
Note: c 1998  
Address: Boulder, CO 80309 USA 20133 Milano, Italy  
Affiliation: Department of Computer Science Dip. di Elettronica e Informazione University of Colorado Politecnico di Milano  
Abstract: University of Colorado Department of Computer Science Technical Report CU-CS-857-98 April 1998 ABSTRACT Software applications are no longer stand-alone systems. They are increasingly the result of integrating heterogeneous collections of components, both executable and data, possibly dispersed over a computer network. Different components can be provided by different producers and they can be part of different systems at the same time. Moreover, components can change rapidly and independently, making it difficult to manage the whole system in a consistent way. Under these circumstances, a crucial step of the software life cycle is deployment|that is, the activities related to the release, installation, activation, deactivation, update, and removal of components, as well as whole systems. This paper presents a framework for characterizing technologies that are intended to support software deployment. The framework highlights four primary factors concerning the technologies: process coverage; process changeability; interprocess coordination; and site, product, and deployment policy abstraction. A variety of existing technologies are surveyed and assessed against the framework. Finally, we discuss promising research directions in software deployment. This work was supported in part by the Air Force Material Command, Rome Laboratory, and the Defense Advanced Research Projects Agency under Contract Number F30602-94-C-0253. The content of the information does not necessarily reflect the position or the policy of the U.S. Government and no official endorsement should be inferred. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E.C. Bailey. </author> <title> Maximum RPM. Red Hat Software, </title> <publisher> Inc., </publisher> <month> February </month> <year> 1997. </year>
Reference-contexts: For example, netDeploy 3 already supports the update deployment activity to a limited extent. 4.2 Package Managers Almost every modern operating system comes with a suite of utilities that assist system administrators in installing, updating, and generally managing software. Examples of such utilities include Linux RedHat's RPM <ref> [3, 1] </ref>, HP-UX SD commands [7], and SUN Solaris pkg commands [24].
Reference: [2] <institution> Desktop Management Task Force Inc. Desktop Management Interface Specification, </institution> <month> March </month> <year> 1996. </year> <note> http://www.dmtf.org/tech/specs.html. </note>
Reference-contexts: To this end, a number of organizations have proposed various standards to describe software and hardware components for purposes of deployment and management. The Desktop Management Task Force (DMTF) is the major organizational force here and is proposing a standard called the Management Information Format (MIF) <ref> [4, 2] </ref>. The standard specifies the description of various hardware and software properties. Another effort has been made by IEEE with its POSIX standard for software administration [10]. Tivoli's Application Management Specification (AMS) [27] is derived from the DMI. It specifically targets the description of application software systems.
Reference: [3] <author> M. Ewing and E. Troan. </author> <title> The RPM Packaging System. </title> <booktitle> In Proceedings of the First Conference on Freely Redistributable Software, </booktitle> <address> Cambridge, MA, USA, </address> <month> February </month> <year> 1996. </year> <title> Free Software Foundation. </title>
Reference-contexts: For example, netDeploy 3 already supports the update deployment activity to a limited extent. 4.2 Package Managers Almost every modern operating system comes with a suite of utilities that assist system administrators in installing, updating, and generally managing software. Examples of such utilities include Linux RedHat's RPM <ref> [3, 1] </ref>, HP-UX SD commands [7], and SUN Solaris pkg commands [24].
Reference: [4] <institution> Desktop Management Task Force. Software Standard Groups Definition, </institution> <month> November </month> <year> 1995. </year> <note> http://hplbwww.hpl.hp.com/people/arp/dmtf/ver2.htm. </note>
Reference-contexts: To this end, a number of organizations have proposed various standards to describe software and hardware components for purposes of deployment and management. The Desktop Management Task Force (DMTF) is the major organizational force here and is proposing a standard called the Management Information Format (MIF) <ref> [4, 2] </ref>. The standard specifies the description of various hardware and software properties. Another effort has been made by IEEE with its POSIX standard for software administration [10]. Tivoli's Application Management Specification (AMS) [27] is derived from the DMI. It specifically targets the description of application software systems.
Reference: [5] <author> R.S. Hall, D. Heimbigner, and A.L. Wolf. </author> <title> Software Deployment Languages and Schema. </title> <type> Technical Report CU-SERL-204-08, </type> <institution> Department of Computer Science, University of Colorado, </institution> <month> December </month> <year> 1997. </year>
Reference-contexts: The Software Dock addresses the software deployment life cycle by defining a rigorous and thorough schema to describe both products and sites <ref> [5] </ref>. The data encompassed by the schema is housed in registries at the producer and consumer sites. The schema for describing software systems capture semantic information such as constraints, subsystem dependencies, component relationships, and distributed coordination.
Reference: [6] <editor> R.S. Hall, D.M. Heimbigner, A. van der Hoek, and A.L. Wolf. </editor> <title> An Architecture for Post-Development Configuration Management in a Wide-Area Network. </title> <booktitle> In Proceedings of the 1997 International Conference on Distributed Computing Systems, </booktitle> <pages> pages 269-278. </pages> <publisher> IEEE Computer Society, </publisher> <month> May </month> <year> 1997. </year>
Reference-contexts: It turns out that none of the technologies that we examined is designed to provide all of the abstractions, although elements of each can be found in many. A prototype that explicitly refers to this conceptual architecture, implementing site and product models, is presented in <ref> [6] </ref>. <p> These new approaches are important because they are addressing some of the most complex issues in software deployment. In particular, ArchShell [16] and the Software Architecture Assistant (SAA) [18] are addressing the dynamic aspects of the adapt and update activities. The Software Dock <ref> [6] </ref> is concerned with integrating support for the whole deployment life cycle into a single, systematic framework. <p> Both ArchShell and the Software Architecture Assistant use the product model to dynamically insert and remove components in a running system. They are also capable of changing the topology of a product|that is, changing connections among components. 5.2 Software Dock The Software Dock <ref> [6] </ref> is a distributed, agent-based framework to support the entire software deployment life cycle. The Software Dock addresses the software deployment life cycle by defining a rigorous and thorough schema to describe both products and sites [5].
Reference: [7] <institution> Hewlett-Packard Company. </institution> <note> HP-UX Release 10.10 Manual, </note> <month> November 95. </month>
Reference-contexts: Examples of such utilities include Linux RedHat's RPM [3, 1], HP-UX SD commands <ref> [7] </ref>, and SUN Solaris pkg commands [24].
Reference: [8] <author> J. Honeycutt. </author> <title> Using the Windows 95 Registry. </title> <publisher> Que Publishing, </publisher> <address> Indianapolis, IN, </address> <year> 1996. </year>
Reference-contexts: This gives the producer the ability to ignore consumer-site anomalies. In this respect, the site model specifically addresses the issue of heterogeneity discussed in Section 2.4.5. Mechanisms such as GNU's Autoconf [13] and the Microsoft Registry <ref> [8] </ref> demonstrate how this factoring can be achieved, but in two rather different ways. Autoconf is used to produce a single program, configure, that dynamically computes a site abstraction. The Registry, in contrast, is a passive repository containing the site abstraction.
Reference: [9] <author> HP OpenView, </author> <year> 1998. </year> <note> http://www.hp.com/openview/index.html. </note>
Reference-contexts: Second, because their site abstraction is primarily static|that is, the site model does not accommodate any run-time information|package managers are not in a position to provide support for activation and deactivation. 4.3 Application Management Systems TME-10 [26] from Tivoli, SystemView [23] from IBM, OpenView <ref> [9] </ref> from Hewlett Packard, System Management tools [22] from Platinum, and EDM [19] from Novadigm are representative of so-called network or application management systems. 3 Their original purpose was to support the management of corporate LANs.
Reference: [10] <institution> IEEE Standard for Information Technology. Portable Operating Interface System-Part 2: Administration (POSIX 1387.2), </institution> <year> 1995. </year>
Reference-contexts: The standard specifies the description of various hardware and software properties. Another effort has been made by IEEE with its POSIX standard for software administration <ref> [10] </ref>. Tivoli's Application Management Specification (AMS) [27] is derived from the DMI. It specifically targets the description of application software systems. The Simple Network Management Protocol (SNMP) [15] defines a standard for schemas of information, primarily for hardware components of networks.
Reference: [11] <author> InstallShield, </author> <year> 1997. </year> <note> http://www.installshield.com. </note>
Reference-contexts: Table 2 assesses their support for changeability, coordination, and model abstraction. In the tables, a filled circle ("*") indicates full support, an empty circle ("ffi") indicates minimal support, and the absence of a circle indicates no support at all. 4.1 Installers PC-Install 6 with Internet Extensions [21], InstallShield 5 <ref> [11] </ref>, and netDeploy 3 [20] are representative of the class of deployment technologies referred to as installers. The primary focus of installers is to package a stand-alone software system into a self-installing archive that is able to be distributed via physical media or networks.
Reference: [12] <author> B. Kantor and P. Lapsley. </author> <title> Network News Transfer Protocol, A Proposed Standard for the Stream-Based Transmission of News. </title> <type> RFC 977, </type> <month> February </month> <year> 1986. </year>
Reference: [13] <author> D. Mackenzie, R. McGrath, and N. Friedman. Autoconf: </author> <title> Generating Automatic Configuration Scripts. Free Software Foundation, </title> <publisher> Inc., </publisher> <month> April </month> <year> 1994. </year>
Reference-contexts: This gives the producer the ability to ignore consumer-site anomalies. In this respect, the site model specifically addresses the issue of heterogeneity discussed in Section 2.4.5. Mechanisms such as GNU's Autoconf <ref> [13] </ref> and the Microsoft Registry [8] demonstrate how this factoring can be achieved, but in two rather different ways. Autoconf is used to produce a single program, configure, that dynamically computes a site abstraction. The Registry, in contrast, is a passive repository containing the site abstraction. <p> Tivoli's Application Management Specification (AMS) [27] is derived from the DMI. It specifically targets the description of application software systems. The Simple Network Management Protocol (SNMP) [15] defines a standard for schemas of information, primarily for hardware components of networks. To some extent, GNU Autoconf <ref> [13] </ref> falls into this category as well by providing a consumer site abstraction and various techniques to determine the consumer site configuration. In terms of our characterization framework, the standards are used to specify both the site and the product models.
Reference: [14] <institution> Marimba Inc. </institution> <note> Castanet White Paper, 1996. http://www.marimba.com/developer/castanet-whitepaper.html. </note>
Reference-contexts: Because their primary objective is to model software and hardware components in changing network environments, they are flexible enough to incorporate new elements and structures. They subsume an articulated deployment process and provide an access point to each deployment activity. 4.5 Delivery of Content Marimba's Castanet <ref> [14] </ref>, PointCast, Rsync [28], and Rdist [17] directly implement the content delivery activity. In this class of technology, the information being deployed is simply transferred from one or more information servers to a number of client sites.
Reference: [15] <author> K. McCloghrie and M. Rose. </author> <title> Management Information Base for Network Management of TCP/IP-based Internets. </title> <type> RFC 1156, </type> <month> May </month> <year> 1990. </year>
Reference-contexts: Another effort has been made by IEEE with its POSIX standard for software administration [10]. Tivoli's Application Management Specification (AMS) [27] is derived from the DMI. It specifically targets the description of application software systems. The Simple Network Management Protocol (SNMP) <ref> [15] </ref> defines a standard for schemas of information, primarily for hardware components of networks. To some extent, GNU Autoconf [13] falls into this category as well by providing a consumer site abstraction and various techniques to determine the consumer site configuration.
Reference: [16] <author> N. Medvidovic. </author> <title> ADLs and Dynamic Architecture Changes. </title> <editor> In L. Vidal, A. Finkelstein, G. Spanoudakis, and A.L. Wolf, editors, </editor> <booktitle> Joint Proceedings of the SIGSOFT '96 Workshops, </booktitle> <pages> pages 24-27, </pages> <address> New York, New York, 1996. </address> <publisher> ACM Press. </publisher>
Reference-contexts: We now present three technologies that are still research efforts and, as such, are still in their infancy. These new approaches are important because they are addressing some of the most complex issues in software deployment. In particular, ArchShell <ref> [16] </ref> and the Software Architecture Assistant (SAA) [18] are addressing the dynamic aspects of the adapt and update activities. The Software Dock [6] is concerned with integrating support for the whole deployment life cycle into a single, systematic framework.
Reference: [17] <author> D. Nachbar. </author> <title> When Network File Systems Aren't Enough: Automatic Software Distribution Revisited. </title> <booktitle> In Proceedings of the USENIX 1986 Summer Technical Conference, </booktitle> <pages> pages 159-171, </pages> <address> Atlanta, GA, </address> <month> June </month> <year> 1986. </year> <institution> USENIX Association. </institution>
Reference-contexts: They subsume an articulated deployment process and provide an access point to each deployment activity. 4.5 Delivery of Content Marimba's Castanet [14], PointCast, Rsync [28], and Rdist <ref> [17] </ref> directly implement the content delivery activity. In this class of technology, the information being deployed is simply transferred from one or more information servers to a number of client sites.
Reference: [18] <author> K. Ng, J. Kramer, and J. Magee. </author> <title> A CASE Tool for Software Architecture Design. </title> <journal> Journal of Automated Software Engineering, </journal> 3(3/4):261-284, August 1996. 
Reference-contexts: We now present three technologies that are still research efforts and, as such, are still in their infancy. These new approaches are important because they are addressing some of the most complex issues in software deployment. In particular, ArchShell [16] and the Software Architecture Assistant (SAA) <ref> [18] </ref> are addressing the dynamic aspects of the adapt and update activities. The Software Dock [6] is concerned with integrating support for the whole deployment life cycle into a single, systematic framework.
Reference: [19] <author> Novadigm's EDM, </author> <year> 1998. </year> <note> http://www.novadigm.com/c1.htm. </note>
Reference-contexts: primarily static|that is, the site model does not accommodate any run-time information|package managers are not in a position to provide support for activation and deactivation. 4.3 Application Management Systems TME-10 [26] from Tivoli, SystemView [23] from IBM, OpenView [9] from Hewlett Packard, System Management tools [22] from Platinum, and EDM <ref> [19] </ref> from Novadigm are representative of so-called network or application management systems. 3 Their original purpose was to support the management of corporate LANs. They are capable of detecting hardware failures and network disruptions and reporting them to some operations center for examination.
Reference: [20] <author> OpenWEB netDeploy, </author> <year> 1997. </year> <note> http://www.osa.com. </note>
Reference-contexts: In the tables, a filled circle ("*") indicates full support, an empty circle ("ffi") indicates minimal support, and the absence of a circle indicates no support at all. 4.1 Installers PC-Install 6 with Internet Extensions [21], InstallShield 5 [11], and netDeploy 3 <ref> [20] </ref> are representative of the class of deployment technologies referred to as installers. The primary focus of installers is to package a stand-alone software system into a self-installing archive that is able to be distributed via physical media or networks.
Reference: [21] <author> PC-Install, </author> <year> 1996. </year> <note> http://www.twenty.com. 19 </note>
Reference-contexts: Table 2 assesses their support for changeability, coordination, and model abstraction. In the tables, a filled circle ("*") indicates full support, an empty circle ("ffi") indicates minimal support, and the absence of a circle indicates no support at all. 4.1 Installers PC-Install 6 with Internet Extensions <ref> [21] </ref>, InstallShield 5 [11], and netDeploy 3 [20] are representative of the class of deployment technologies referred to as installers. The primary focus of installers is to package a stand-alone software system into a self-installing archive that is able to be distributed via physical media or networks.
Reference: [22] <institution> PLATINUM System Management, </institution> <year> 1998. </year> <note> http://www.platinum.com/products/sys mgmt.htm. </note>
Reference-contexts: because their site abstraction is primarily static|that is, the site model does not accommodate any run-time information|package managers are not in a position to provide support for activation and deactivation. 4.3 Application Management Systems TME-10 [26] from Tivoli, SystemView [23] from IBM, OpenView [9] from Hewlett Packard, System Management tools <ref> [22] </ref> from Platinum, and EDM [19] from Novadigm are representative of so-called network or application management systems. 3 Their original purpose was to support the management of corporate LANs. They are capable of detecting hardware failures and network disruptions and reporting them to some operations center for examination.
Reference: [23] <institution> RS/6000 System Management, </institution> <year> 1998. </year> <note> http://www.austin.ibm.com/resource/aix resource/Pubs/redbooks/ooksc16.html. </note>
Reference-contexts: Second, because their site abstraction is primarily static|that is, the site model does not accommodate any run-time information|package managers are not in a position to provide support for activation and deactivation. 4.3 Application Management Systems TME-10 [26] from Tivoli, SystemView <ref> [23] </ref> from IBM, OpenView [9] from Hewlett Packard, System Management tools [22] from Platinum, and EDM [19] from Novadigm are representative of so-called network or application management systems. 3 Their original purpose was to support the management of corporate LANs.
Reference: [24] <author> SUN Microsystems. SunOS 5.5 Manual, </author> <month> September </month> <year> 1992. </year>
Reference-contexts: Examples of such utilities include Linux RedHat's RPM [3, 1], HP-UX SD commands [7], and SUN Solaris pkg commands <ref> [24] </ref>.
Reference: [25] <author> O.H. Tallman. Project Gabriel: </author> <title> Automated Deployment in a Large Commercial Network. </title> <journal> Digital Technical Journal, </journal> <volume> 7(2) </volume> <pages> 52-70, </pages> <month> October </month> <year> 1995. </year> <note> http://www.europe.digital.com/.i/info/DTJI05/DTJI05SC.TXT. </note>
Reference-contexts: There may be applications installed on every machine in a branch, as well as common branch-wide applications that can be shared through a server. 1 This example is inspired by the Digital Equipment Corporation's Project Gabriel <ref> [25] </ref>. 2 The obvious requirement of the organization is to minimize the overall cost of software man-agement and deployment, where the cost function is determined by the loss or the down time of functionality due to deployment activities, the additional labor spent in those activities, and the amount of computational and
Reference: [26] <institution> TME/10 Software Distribution. </institution> <note> http://www.tivoli.com/products/Courier. </note>
Reference-contexts: Second, because their site abstraction is primarily static|that is, the site model does not accommodate any run-time information|package managers are not in a position to provide support for activation and deactivation. 4.3 Application Management Systems TME-10 <ref> [26] </ref> from Tivoli, SystemView [23] from IBM, OpenView [9] from Hewlett Packard, System Management tools [22] from Platinum, and EDM [19] from Novadigm are representative of so-called network or application management systems. 3 Their original purpose was to support the management of corporate LANs.
Reference: [27] <institution> Tivoli Systems Inc. Applications Management Specification, </institution> <year> 1995. </year> <note> http://www.tivoli.com/products/tech info/AMS/AMS.html. </note>
Reference-contexts: The standard specifies the description of various hardware and software properties. Another effort has been made by IEEE with its POSIX standard for software administration [10]. Tivoli's Application Management Specification (AMS) <ref> [27] </ref> is derived from the DMI. It specifically targets the description of application software systems. The Simple Network Management Protocol (SNMP) [15] defines a standard for schemas of information, primarily for hardware components of networks.
Reference: [28] <author> A. Tridgell and P. Mackerras. </author> <title> The Rsync Algorithm. </title> <type> Technical Report TR-CS-96-05, </type> <institution> Department of Computer Science, The Australian National University, Canberra, Australia, </institution> <month> June </month> <year> 1996. </year> <month> 20 </month>
Reference-contexts: Because their primary objective is to model software and hardware components in changing network environments, they are flexible enough to incorporate new elements and structures. They subsume an articulated deployment process and provide an access point to each deployment activity. 4.5 Delivery of Content Marimba's Castanet [14], PointCast, Rsync <ref> [28] </ref>, and Rdist [17] directly implement the content delivery activity. In this class of technology, the information being deployed is simply transferred from one or more information servers to a number of client sites.
References-found: 28

