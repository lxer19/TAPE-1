URL: http://www.win.tue.nl/cs/tt/jaco/papers/transformation.ps.Z
Refering-URL: http://www.win.tue.nl/cs/tt/jaco/papers/
Root-URL: http://www.win.tue.nl
Email: fokkink@phil.ruu.nl jaco@phil.ruu.nl  
Phone: 8, 3584  
Title: Correct Transformation of Rewrite Systems for Implementation Purposes  
Author: Wan Fokkink Jaco van de Pol 
Address: Heidelberglaan  Netherlands  
Affiliation: Utrecht University, Department of Philosophy  CS Utrecht, The  
Abstract: We propose the notion of a correct transformation of one rewrite system into another. If such a transformation is correct, then the normal forms of a term in the original rewrite system can be obtained by computing the normal forms of the interpretation of this term in the transformed rewrite system. We show for several transformations from the literature that they are correct, most notably for the notion of simulation from Kamperman and Walters. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.C.M. Baeten, J.A. Bergstra, J.W. Klop, </author> <title> and W.P. Weijland. Term-rewriting systems with rule priorities. </title> <journal> Theoretical Computer Science, </journal> <volume> 67 </volume> <pages> 283-301, </pages> <year> 1989. </year>
Reference-contexts: In order to obtain correctness, one additionally has to verify that termination is preserved, which is indeed the case. Laville [12] considered rewrite systems with priorities, which were first studied in <ref> [1] </ref>. If two rewrite rules can be applied to the same term, then only the rule with the highest priority is applied. Priorities are a powerful means to capture intricate rewriting in a simple rewrite system, but they are troublesome when it comes to implementation.
Reference: [2] <author> H.P. Barendregt, M.C.J.D van Eekelen, J.R.W. Glauert, J.R. Kennaway, M.J. Plasmeijer, </author> <title> and M.R. Sleep. Term graph rewriting. </title> <editor> In J.W. de Bakker, A.J. Nijman, and P.C. Treleaven, editors, </editor> <booktitle> Proceedings 1st Conference on Parallel Architectures and Languages Europe (PARLE'87), Eindhoven, Vol. II: Parallel Languages, </booktitle> <volume> LNCS 259, </volume> <pages> pages 141-158. </pages> <publisher> Springer, </publisher> <year> 1987. </year>
Reference-contexts: 1 Introduction Quite a number of papers deal with particular examples of transformations of rewrite systems, usually with the aim to obtain a rewrite system which satisfies some desirable property, e.g. <ref> [17, 12, 2, 18, 16, 20, 19, 23, 9, 10, 8] </ref>. In most of these papers, correctness of the transformation is stated, meaning that the original and the transformed rewrite system are in some sense `equivalent'. <p> However, in graph rewriting due to the sharing of variables, only the reductions f (a; a) ! f (a; a) and f (a; a) ! f (b; b) are possible, so that f (a; a) does not have a normal form. In <ref> [2] </ref>, soundness and completeness of the transformation of term rewriting into graph rewriting is studied. The conclusion is that for left-linear weakly non-overlapping term rewriting systems, the transformation into graph rewriting systems preserves normal forms.
Reference: [3] <author> H.P. Barendregt, H. Wupper, and H. </author> <title> Mulder. Computable processes. </title> <type> Report CS-R9428, </type> <institution> CWI, </institution> <address> Amsterdam, </address> <year> 1994. </year>
Reference-contexts: This is the case if the input/output behaviour of the system is maintained, where the input is any term, and the output is (one of) its normal form (s). Hence, for us the prime interest of a transformation is that it preserves normal forms. In <ref> [3] </ref>, the distinction is made of `control' versus `computation', which in rewriting would be the internal structure of a reduction tree versus its eventual normal forms.
Reference: [4] <author> J.A. Bergstra, J. Heering, and P. Klint, </author> <title> editors. Algebraic Specification. </title> <publisher> ACM Press in cooperation with Addison Wesley, </publisher> <year> 1989. </year>
Reference-contexts: For example: * in equational theorem proving one is mostly concerned with terminating rewrite systems which yield unique normal forms [15]; * if rewriting is applied to implement abstract data types, then the meaning of a term is fixed by its normal forms <ref> [4] </ref>; * in [5] it is remarked that "rewrite systems defining at most one normal form for any input term can serve as functional programs". We propose the notion of a correct transformation of rewrite systems.
Reference: [5] <author> N. Dershowitz and J.-P. Jouannaud. </author> <title> Rewrite systems. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, Volume B, Formal Methods and Semantics, </booktitle> <pages> pages 243-320. </pages> <publisher> Elsevier, </publisher> <year> 1990. </year>
Reference-contexts: We will also briefly study several other examples of transformations of rewrite systems, to decide whether or not they satisfy our correctness criteria. Acknowledgements. Jasper Kamperman and Bas Luttik are thanked for useful discussions. 2 Abstract Reduction Systems This section introduces some preliminaries from rewriting; for more background see <ref> [5, 11] </ref>. We will focus on abstract reduction systems instead of on term rewriting systems, in order to emphasize the generality of our approach. Definition 2.1 An abstract reduction system (ARS) consists of a collection A of elements, together with a binary reduction relation R between elements in A. <p> For example: * in equational theorem proving one is mostly concerned with terminating rewrite systems which yield unique normal forms [15]; * if rewriting is applied to implement abstract data types, then the meaning of a term is fixed by its normal forms [4]; * in <ref> [5] </ref> it is remarked that "rewrite systems defining at most one normal form for any input term can serve as functional programs". We propose the notion of a correct transformation of rewrite systems.
Reference: [6] <author> H. Ehrig, H.-J. Kreowski, and P. Padawitz. </author> <title> Stepwise specification and implementation of abstract data types. </title> <editor> In G. Ausiello and C. Bohm, editors, </editor> <booktitle> Proceedings 5th Colloquium on Automata, Languages and Programming (ICALP'78), Udine, </booktitle> <volume> LNCS 62, </volume> <pages> pages 205-226. </pages> <publisher> Springer, </publisher> <year> 1978. </year>
Reference-contexts: Their notion of equivalence is similar to the one of Thatte in [17], so it cannot be concluded from their equivalence notion that the transformation is correct. In <ref> [6, 14] </ref>, transformations of equational specifications of abstract data types are studied. Such a transformation is called a `correct implementation' if the initial algebras of the original and the transformed specification are isomorphic. This notion is considerably stronger than our notion of a correct transformation.
Reference: [7] <author> W.J. Fokkink and H. Zantema. </author> <title> Basic process algebra with iteration: completeness of its equational axioms. </title> <journal> The Computer Journal, </journal> <volume> 37(4) </volume> <pages> 259-267, </pages> <year> 1994. </year>
Reference-contexts: Zantema proves that the original rewrite system is terminating if and only if its labelled transformation is so. Sometimes, proving termination of the labelled rewrite system is much easier than proving termination for the original rewrite system, see for example <ref> [7] </ref>. Semantic labelling preserves the structure of reduction trees, so it constitutes a correct transformation. Graph rewriting is an implementation strategy for term rewriting systems where variables are shared. It is well-known that the transformation of term rewriting into 13 graph rewriting can lead to undesirable complications.
Reference: [8] <author> J.F.Th. Kamperman and J.C. van de Pol. </author> <title> Simulation of strategies in term rewriting. </title> <note> In preparation, </note> <year> 1996. </year>
Reference-contexts: 1 Introduction Quite a number of papers deal with particular examples of transformations of rewrite systems, usually with the aim to obtain a rewrite system which satisfies some desirable property, e.g. <ref> [17, 12, 2, 18, 16, 20, 19, 23, 9, 10, 8] </ref>. In most of these papers, correctness of the transformation is stated, meaning that the original and the transformed rewrite system are in some sense `equivalent'. <p> In order to avoid extensive technical expositions, the foundations for our correctness claims will not be described in detail. Kamperman and Van de Pol <ref> [8] </ref> show how a weakly terminating rewrite system together with a normalization strategy can be turned into a terminating rewrite system. They prove that their transformation is a simulation that is sound and complete and totally conserves termination.
Reference: [9] <author> J.F.Th. Kamperman and H.R. Walters. </author> <title> Minimal term rewriting systems. </title> <booktitle> In Proceedings 11th Workshop on Abstract Data Types, </booktitle> <institution> LNCS, </institution> <note> to appear. Available at http://www.cwi.nl/epic. 15 </note>
Reference-contexts: 1 Introduction Quite a number of papers deal with particular examples of transformations of rewrite systems, usually with the aim to obtain a rewrite system which satisfies some desirable property, e.g. <ref> [17, 12, 2, 18, 16, 20, 19, 23, 9, 10, 8] </ref>. In most of these papers, correctness of the transformation is stated, meaning that the original and the transformed rewrite system are in some sense `equivalent'. <p> In this paper we formulate general conditions which ensure that a transformation of rewrite systems constitutes a correct implementation step. Recently, Kamperman and Walters <ref> [9, 10] </ref> proposed a notion of simulation of one rewrite system by another. They apply simulation to transform a rewrite system into a so-called `minimal' rewrite system, which has a form more suitable for compilation into an abstract machine. <p> Furthermore, it is required that a correct transformation preserves termination properties. We will confirm the claim of Kamperman and Walters, that is, we will show that the notion of simulation as proposed in <ref> [9, 10] </ref> constitutes a correct transformation. In the presentation, we will generalize and simplify some of the original simulation definitions. The proof of the correctness result will use the criteria for a simulation almost in full. <p> Let R be the following standard implementation of addition on the natural numbers over T (f0; succ; +g), which consists of the closed terms over f0; succ; +g. x + 0 ! x succ (x) + y ! succ (x + y) In so-called `minimal' rewrite systems <ref> [9, 10] </ref>, rewrite rules are not allowed to contain more than three function symbols. Note that the second rule of R does not satisfy this requirement. <p> S is terminating. We will see in the next section that these properties together ensure that the transformation is correct. 4 Application to Simulation 4.1 Simulation Kamperman and Walters <ref> [9, 10] </ref> propose a notion of simulation for rewrite systems, which they apply to transform rewrite systems into so-called `minimal' rewrite systems. Their definitions are presented in the next sections. In several cases we propose simplifications and/or generalizations of the original definitions. <p> In most of these examples, A is a proper subset of B and is simply the identity mapping. At several points, our notions for simulation are more general than as formulated in <ref> [9, 10] </ref>. There, only term rewriting systems are considered, where A is a proper subset of B, and is the identity mapping. Furthermore, OE is required to be a homomorphism with respect to terms, inspired by the fact that this is usually the case with practical examples of simulations. <p> Earlier, we noted that this simulation is sound and complete. Then, by Proposition 4.8, it conserves termination and totally conserves weak termination. So according to Theorem 4.16 it is a correct transformation. Kamperman and Walters <ref> [9, 10] </ref> consider several practical examples of simulation, and show that they are sound and complete and totally conserve termination.
Reference: [10] <author> J.F.Th. Kamperman and H.R. Walters. </author> <title> Simulating TRSs by minimal TRSs: a simple, efficient, and correct compilation technique. </title> <type> Technical Report CS-R9605, </type> <institution> CWI, </institution> <year> 1996. </year> <note> Available at http://www.cwi.nl/epic. </note>
Reference-contexts: 1 Introduction Quite a number of papers deal with particular examples of transformations of rewrite systems, usually with the aim to obtain a rewrite system which satisfies some desirable property, e.g. <ref> [17, 12, 2, 18, 16, 20, 19, 23, 9, 10, 8] </ref>. In most of these papers, correctness of the transformation is stated, meaning that the original and the transformed rewrite system are in some sense `equivalent'. <p> In this paper we formulate general conditions which ensure that a transformation of rewrite systems constitutes a correct implementation step. Recently, Kamperman and Walters <ref> [9, 10] </ref> proposed a notion of simulation of one rewrite system by another. They apply simulation to transform a rewrite system into a so-called `minimal' rewrite system, which has a form more suitable for compilation into an abstract machine. <p> This transformation constitutes a step in the implementation of their functional programming language EPIC [21, 22]. Luttik [13] proposes a series of stronger simulation notions, and derives desirable properties for them, such as termination and confluence. Kamperman and Walters state, for example in the title of <ref> [10] </ref>, that simulation constitutes a correct transformation of rewrite systems. However, they do not provide any further foundation for this claim. Unfortunately, the definition of simulation is quite complex, so that it is not so easy to grasp its intuition. <p> Furthermore, it is required that a correct transformation preserves termination properties. We will confirm the claim of Kamperman and Walters, that is, we will show that the notion of simulation as proposed in <ref> [9, 10] </ref> constitutes a correct transformation. In the presentation, we will generalize and simplify some of the original simulation definitions. The proof of the correctness result will use the criteria for a simulation almost in full. <p> Let R be the following standard implementation of addition on the natural numbers over T (f0; succ; +g), which consists of the closed terms over f0; succ; +g. x + 0 ! x succ (x) + y ! succ (x + y) In so-called `minimal' rewrite systems <ref> [9, 10] </ref>, rewrite rules are not allowed to contain more than three function symbols. Note that the second rule of R does not satisfy this requirement. <p> S is terminating. We will see in the next section that these properties together ensure that the transformation is correct. 4 Application to Simulation 4.1 Simulation Kamperman and Walters <ref> [9, 10] </ref> propose a notion of simulation for rewrite systems, which they apply to transform rewrite systems into so-called `minimal' rewrite systems. Their definitions are presented in the next sections. In several cases we propose simplifications and/or generalizations of the original definitions. <p> In most of these examples, A is a proper subset of B and is simply the identity mapping. At several points, our notions for simulation are more general than as formulated in <ref> [9, 10] </ref>. There, only term rewriting systems are considered, where A is a proper subset of B, and is the identity mapping. Furthermore, OE is required to be a homomorphism with respect to terms, inspired by the fact that this is usually the case with practical examples of simulations. <p> And if (OE; ) conserves (weak) termination, then the same holds for ( OE; ), simply because this property does not depend on OE, but on . 2 In <ref> [10] </ref>, the reachability restriction is added to the definition of completeness for simulations. However, the rationale of Lemma 4.11 is that the notion of reachability needs no elaboration in the theory of simulations. The converse of Lemma 4.11 does not hold. <p> Earlier, we noted that this simulation is sound and complete. Then, by Proposition 4.8, it conserves termination and totally conserves weak termination. So according to Theorem 4.16 it is a correct transformation. Kamperman and Walters <ref> [9, 10] </ref> consider several practical examples of simulation, and show that they are sound and complete and totally conserve termination.
Reference: [11] <author> J.W. Klop. </author> <title> Term rewriting systems. </title> <editor> In S. Abramsky, D.M. Gabbay, and T.S.E. Maibaum, editors, </editor> <booktitle> Handbook of Logic in Computer Science, Volume I, Background: Computational Structures, </booktitle> <pages> pages 1-116. </pages> <publisher> Oxford University Press, </publisher> <year> 1992. </year>
Reference-contexts: We will also briefly study several other examples of transformations of rewrite systems, to decide whether or not they satisfy our correctness criteria. Acknowledgements. Jasper Kamperman and Bas Luttik are thanked for useful discussions. 2 Abstract Reduction Systems This section introduces some preliminaries from rewriting; for more background see <ref> [5, 11] </ref>. We will focus on abstract reduction systems instead of on term rewriting systems, in order to emphasize the generality of our approach. Definition 2.1 An abstract reduction system (ARS) consists of a collection A of elements, together with a binary reduction relation R between elements in A.
Reference: [12] <author> A. Laville. </author> <title> Lazy pattern matching in the ML language. </title> <editor> In K.V. Nori, editor, </editor> <booktitle> Proceedings 7th Conference on Foundations of Software Technology and Theoretical Computer Science (FSTTCS'87), Pune, India, </booktitle> <volume> LNCS 287, </volume> <pages> pages 400-419. </pages> <publisher> Springer, </publisher> <year> 1987. </year>
Reference-contexts: 1 Introduction Quite a number of papers deal with particular examples of transformations of rewrite systems, usually with the aim to obtain a rewrite system which satisfies some desirable property, e.g. <ref> [17, 12, 2, 18, 16, 20, 19, 23, 9, 10, 8] </ref>. In most of these papers, correctness of the transformation is stated, meaning that the original and the transformed rewrite system are in some sense `equivalent'. <p> The conclusion is that for left-linear weakly non-overlapping term rewriting systems, the transformation into graph rewriting systems preserves normal forms. In order to obtain correctness, one additionally has to verify that termination is preserved, which is indeed the case. Laville <ref> [12] </ref> considered rewrite systems with priorities, which were first studied in [1]. If two rewrite rules can be applied to the same term, then only the rule with the highest priority is applied.
Reference: [13] <author> B. Luttik. </author> <title> Simulation for rewrite systems. </title> <note> In preparation. </note>
Reference-contexts: They apply simulation to transform a rewrite system into a so-called `minimal' rewrite system, which has a form more suitable for compilation into an abstract machine. This transformation constitutes a step in the implementation of their functional programming language EPIC [21, 22]. Luttik <ref> [13] </ref> proposes a series of stronger simulation notions, and derives desirable properties for them, such as termination and confluence. Kamperman and Walters state, for example in the title of [10], that simulation constitutes a correct transformation of rewrite systems. However, they do not provide any further foundation for this claim.
Reference: [14] <author> C.F. Nourani. </author> <title> Abstract implementations and their correctness proofs. </title> <journal> Journal of the ACM, </journal> <volume> 30 </volume> <pages> 343-359, </pages> <year> 1983. </year>
Reference-contexts: Their notion of equivalence is similar to the one of Thatte in [17], so it cannot be concluded from their equivalence notion that the transformation is correct. In <ref> [6, 14] </ref>, transformations of equational specifications of abstract data types are studied. Such a transformation is called a `correct implementation' if the initial algebras of the original and the transformed specification are isomorphic. This notion is considerably stronger than our notion of a correct transformation.
Reference: [15] <author> M.J. O'Donnell. </author> <title> Equational Logic as a Programming Language. </title> <publisher> MIT Press, </publisher> <address> Cambridge, </address> <year> 1985. </year>
Reference-contexts: For example: * in equational theorem proving one is mostly concerned with terminating rewrite systems which yield unique normal forms <ref> [15] </ref>; * if rewriting is applied to implement abstract data types, then the meaning of a term is fixed by its normal forms [4]; * in [5] it is remarked that "rewrite systems defining at most one normal form for any input term can serve as functional programs".
Reference: [16] <author> R.C. Sekar, S. Pawagi, and I.V. Ramakrishnan. </author> <title> Transforming strongly sequential rewrite systems with constructors for efficient parallel execution. </title> <editor> In N. Der-showitz, editor, </editor> <booktitle> Proceedings 3rd Conference on Rewriting Techniques and Applications (RTA'89), </booktitle> <address> Chapel Hill, </address> <publisher> LNCS 355, </publisher> <pages> pages 404-418. </pages> <publisher> Springer, </publisher> <year> 1989. </year>
Reference-contexts: 1 Introduction Quite a number of papers deal with particular examples of transformations of rewrite systems, usually with the aim to obtain a rewrite system which satisfies some desirable property, e.g. <ref> [17, 12, 2, 18, 16, 20, 19, 23, 9, 10, 8] </ref>. In most of these papers, correctness of the transformation is stated, meaning that the original and the transformed rewrite system are in some sense `equivalent'. <p> Moreover, Thatte's transformation does not preserve confluence. Therefore, Verma [19] introduced a new transformation for confluent terminating rewrite systems, and showed that his transformation does preserve both confluence and normal forms. We remark that transformations of terminating rewrite systems that preserve normal forms are correct. 14 Sekar et al. <ref> [16] </ref> showed how a strongly sequential constructor-based rewrite system can be transformed into an `equivalent' path sequential rewrite system. Their notion of equivalence is similar to the one of Thatte in [17], so it cannot be concluded from their equivalence notion that the transformation is correct.
Reference: [17] <author> S.R. Thatte. </author> <title> On the correspondence between two classes of reduction systems. </title> <journal> Information Processing Letters, </journal> <volume> 20(2) </volume> <pages> 83-85, </pages> <year> 1985. </year>
Reference-contexts: 1 Introduction Quite a number of papers deal with particular examples of transformations of rewrite systems, usually with the aim to obtain a rewrite system which satisfies some desirable property, e.g. <ref> [17, 12, 2, 18, 16, 20, 19, 23, 9, 10, 8] </ref>. In most of these papers, correctness of the transformation is stated, meaning that the original and the transformed rewrite system are in some sense `equivalent'. <p> Laville's transformation leaves the structure of reduction trees in tact, so clearly it is correct. Thatte <ref> [17] </ref> showed how a left-linear non-overlapping rewrite system R can be transformed into a left-linear non-overlapping rewrite system S that is constructor-based, where R ranges over a signature and S ranges over an extended signature . <p> We remark that transformations of terminating rewrite systems that preserve normal forms are correct. 14 Sekar et al. [16] showed how a strongly sequential constructor-based rewrite system can be transformed into an `equivalent' path sequential rewrite system. Their notion of equivalence is similar to the one of Thatte in <ref> [17] </ref>, so it cannot be concluded from their equivalence notion that the transformation is correct. In [6, 14], transformations of equational specifications of abstract data types are studied. Such a transformation is called a `correct implementation' if the initial algebras of the original and the transformed specification are isomorphic.
Reference: [18] <author> S.R. Thatte. </author> <title> Implementing first-order rewriting with constructor systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 61(1) </volume> <pages> 83-92, </pages> <year> 1988. </year>
Reference-contexts: 1 Introduction Quite a number of papers deal with particular examples of transformations of rewrite systems, usually with the aim to obtain a rewrite system which satisfies some desirable property, e.g. <ref> [17, 12, 2, 18, 16, 20, 19, 23, 9, 10, 8] </ref>. In most of these papers, correctness of the transformation is stated, meaning that the original and the transformed rewrite system are in some sense `equivalent'. <p> However, this simulation does not conserve weak termination: (A; R) is weakly terminating, but S is not weakly terminating for (a) = b. 4.4 Reachability Thatte <ref> [18] </ref> and Verma [20] studied a transformation of rewrite systems into so-called constructor-based rewrite systems, and they concluded that their transformation preserves normal forms for what they called the reachable part of the transformed system. <p> The first property ensures that as a simulation this transformation is sound. However, completeness and conservation of (weak) termination cannot be concluded from these properties. Therefore, this equivalence notion does not imply that the transformation is correct. In <ref> [18] </ref>, Thatte claimed for several more general notions of rewrite systems that his transformation preserves confluence and normal forms in the reachable part of the transformed system. However, Verma [20, 19] showed that two of these claims are erroneous.
Reference: [19] <author> R.M. Verma. </author> <title> A theory of using history for equational systems with applications. </title> <journal> Journal of the ACM, </journal> <volume> 42(5) </volume> <pages> 984-1020, </pages> <year> 1995. </year>
Reference-contexts: 1 Introduction Quite a number of papers deal with particular examples of transformations of rewrite systems, usually with the aim to obtain a rewrite system which satisfies some desirable property, e.g. <ref> [17, 12, 2, 18, 16, 20, 19, 23, 9, 10, 8] </ref>. In most of these papers, correctness of the transformation is stated, meaning that the original and the transformed rewrite system are in some sense `equivalent'. <p> Therefore, this equivalence notion does not imply that the transformation is correct. In [18], Thatte claimed for several more general notions of rewrite systems that his transformation preserves confluence and normal forms in the reachable part of the transformed system. However, Verma <ref> [20, 19] </ref> showed that two of these claims are erroneous. Namely, Thatte's transformation does not preserve confluence nor normal forms for confluent non-overlapping rewrite systems, but only for confluent weakly persistent rewrite systems, see [20]. Moreover, Thatte's transformation does not preserve confluence. <p> However, Verma [20, 19] showed that two of these claims are erroneous. Namely, Thatte's transformation does not preserve confluence nor normal forms for confluent non-overlapping rewrite systems, but only for confluent weakly persistent rewrite systems, see [20]. Moreover, Thatte's transformation does not preserve confluence. Therefore, Verma <ref> [19] </ref> introduced a new transformation for confluent terminating rewrite systems, and showed that his transformation does preserve both confluence and normal forms.
Reference: [20] <author> R.M. Verma. </author> <title> Transformations and confluence for rewrite systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 152(2) </volume> <pages> 269-283, </pages> <year> 1995. </year>
Reference-contexts: 1 Introduction Quite a number of papers deal with particular examples of transformations of rewrite systems, usually with the aim to obtain a rewrite system which satisfies some desirable property, e.g. <ref> [17, 12, 2, 18, 16, 20, 19, 23, 9, 10, 8] </ref>. In most of these papers, correctness of the transformation is stated, meaning that the original and the transformed rewrite system are in some sense `equivalent'. <p> However, this simulation does not conserve weak termination: (A; R) is weakly terminating, but S is not weakly terminating for (a) = b. 4.4 Reachability Thatte [18] and Verma <ref> [20] </ref> studied a transformation of rewrite systems into so-called constructor-based rewrite systems, and they concluded that their transformation preserves normal forms for what they called the reachable part of the transformed system. <p> Therefore, this equivalence notion does not imply that the transformation is correct. In [18], Thatte claimed for several more general notions of rewrite systems that his transformation preserves confluence and normal forms in the reachable part of the transformed system. However, Verma <ref> [20, 19] </ref> showed that two of these claims are erroneous. Namely, Thatte's transformation does not preserve confluence nor normal forms for confluent non-overlapping rewrite systems, but only for confluent weakly persistent rewrite systems, see [20]. Moreover, Thatte's transformation does not preserve confluence. <p> However, Verma [20, 19] showed that two of these claims are erroneous. Namely, Thatte's transformation does not preserve confluence nor normal forms for confluent non-overlapping rewrite systems, but only for confluent weakly persistent rewrite systems, see <ref> [20] </ref>. Moreover, Thatte's transformation does not preserve confluence. Therefore, Verma [19] introduced a new transformation for confluent terminating rewrite systems, and showed that his transformation does preserve both confluence and normal forms.
Reference: [21] <author> H.R. Walters and J.F.Th. Kamperman. </author> <title> EPIC: an equational language abstract machine and supporting tools. </title> <booktitle> In Proceedings 7th Conference on Rewriting Techniques and and Applications (RTA'96), </booktitle> <institution> LNCS, </institution> <note> to appear. </note>
Reference-contexts: They apply simulation to transform a rewrite system into a so-called `minimal' rewrite system, which has a form more suitable for compilation into an abstract machine. This transformation constitutes a step in the implementation of their functional programming language EPIC <ref> [21, 22] </ref>. Luttik [13] proposes a series of stronger simulation notions, and derives desirable properties for them, such as termination and confluence. Kamperman and Walters state, for example in the title of [10], that simulation constitutes a correct transformation of rewrite systems.
Reference: [22] <author> H.R. Walters and J.F.Th. Kamperman. </author> <title> Epic 1.0 (unconditional), an equational programming language. </title> <type> Report CS-R9604, </type> <institution> CWI, </institution> <address> Amsterdam, </address> <year> 1996. </year> <note> Available at http://www.cwi.nl/epic. </note>
Reference-contexts: They apply simulation to transform a rewrite system into a so-called `minimal' rewrite system, which has a form more suitable for compilation into an abstract machine. This transformation constitutes a step in the implementation of their functional programming language EPIC <ref> [21, 22] </ref>. Luttik [13] proposes a series of stronger simulation notions, and derives desirable properties for them, such as termination and confluence. Kamperman and Walters state, for example in the title of [10], that simulation constitutes a correct transformation of rewrite systems.
Reference: [23] <author> H. Zantema. </author> <title> Termination of term rewriting by semantic labelling. </title> <note> Fundamenta Informaticae, 24(1,2):89-105, 1995. 16 </note>
Reference-contexts: 1 Introduction Quite a number of papers deal with particular examples of transformations of rewrite systems, usually with the aim to obtain a rewrite system which satisfies some desirable property, e.g. <ref> [17, 12, 2, 18, 16, 20, 19, 23, 9, 10, 8] </ref>. In most of these papers, correctness of the transformation is stated, meaning that the original and the transformed rewrite system are in some sense `equivalent'. <p> They prove that their transformation is a simulation that is sound and complete and totally conserves termination. So according to results obtained in this paper it is a correct transformation. Zantema <ref> [23] </ref> invented the technique of semantic labelling, where semantics is provided to the function symbols, and for each choice of semantic labels for the operators in the left-hand side of a rewrite rule, a new rewrite rule is introduced.
References-found: 23

