URL: ftp://theory.cs.uni-bonn.de/pub/reports/cs-reports/1985-1989/8516-cs.ps.gz
Refering-URL: http://cs.uni-bonn.de/info5/publications/CS-1985-1989-en.html
Root-URL: http://cs.uni-bonn.de
Title: A FAST PARALLEL ALGORITHM FOR COMPUTING ALL MAXIMAL CLIQUES IN A GRAPH AND THE RELATED
Author: Elias Dahlhaus and Marek Karpinski 
Address: Bonn, 5300 Bonn 1  
Affiliation: Department of Computer Science University of  
Abstract: We design a fast parallel algorithm for determining all maximal cliques (maximal independent sets) in an arbitrary graph, working in O(log 3 (nM)) parallel time and O(M 6 n 2 ) processors on a CREW-PRAM, where n is the number of vertices and M the number of maximal cliques. It entails the existence of deterministic NC-algorithms for several important graph classes with a polynomially bounded number of maximal cliques (maximal independent sets) in the number of vertices. Our result surprisingly generalizes the recent fast NC-algorithms of [NNS] and [DK 1] for computing all maximal cliques on chordal graphs to the arbitrary classes with polynomially many maximal cliques. Examples of these important classes of graphs besides chordal and strongly chordal graphs [NNS], [DK] are circle and circular graphs [Go], [GHS], K 4 ne graphs, circular arc graphs, expander graphs, and edge graphs [Ga]. They arise in a number of applications [Ga], [TIAS], [MC], [GMS]. All computational solutions for the set of all maximal cliques or maximal independent sets up to now were inherently sequential and strongly restraining efficient parallelization [TIAS], [CN]. Our result implies that the problem of finding the maximum clique or the lexicographically first maximal clique is efficiently parallelizable for every class of graphs with polynomially many cliques. It stands in contrast to the status of these problems for an unbounded case (N P -completeness and P -completeness [Co]). It also provides another class of problems ([GK]) with superpolynomial (exponential) monotone lower bound complexity [AB], [Ra], and within the uniform Boolean circuits of O(log 3 n) depth and polynomial size. The following general enumeration problem has also been proved to be in N C: Given fl Supported in part by Leibniz Center for Research in Computer Science and the DFG Grant KA 673/2-1
Abstract-found: 1
Intro-found: 1
Reference: [AB] <author> Alon, N., and Boppana, R.B., </author> <title> The Monotone Circuit Complexity of Boolean Functions, </title> <type> Manuscript, </type> <institution> MIT 1986 </institution>
Reference: [AM] <author> Auguston, J.M. and Minker, J., </author> <title> An Analysis of Some Graph Theoretical Cluster Techniques, </title> <editor> J. </editor> <booktitle> ACM 17(1970), </booktitle> <pages> pp. 571-588 </pages>
Reference: [Bi 1] <author> Birkhoff, G., </author> <title> Subdirect Unions in Universal Algebra, </title> <journal> Bull. Amer. Soc. </journal> <volume> 50(1944), </volume> <pages> pp. 764-768 </pages>
Reference-contexts: In [Wi] we find the following result: Theorem 2 [Wi]: The maximal complete bipartite subgraphs of a bipartite graph form a lattice structure in the sense of universal algebra. The lattice structure is related to a Galois connection <ref> [Bi 1] </ref>, [Bi 2] and is defined as follows. First, we define an auxiliary closure operator: Let A be any subset of U .
Reference: [Bi 2] <author> Birkhoff, G., </author> <title> Lattice Theory, 3 rd ed. </title> <publisher> Amer. Soc., </publisher> <address> Providence 1967 </address>
Reference-contexts: In [Wi] we find the following result: Theorem 2 [Wi]: The maximal complete bipartite subgraphs of a bipartite graph form a lattice structure in the sense of universal algebra. The lattice structure is related to a Galois connection [Bi 1], <ref> [Bi 2] </ref> and is defined as follows. First, we define an auxiliary closure operator: Let A be any subset of U .
Reference: [CN] <author> Chiba, N., and Nishivuki, T., </author> <title> Arboricity and Subgraph Listing Algorithms, </title> <journal> SIAM J. of Comput. </journal> <volume> 14(1985), </volume> <pages> pp. 210-223 </pages>
Reference-contexts: A first general algorithm which enumerates all cliques of a graph and executable in polynomial time with respect to the number of vertices and the number of cliques was the algorithm of Bierstone [TIAS]. For further developments in this direction see also <ref> [CN] </ref>. Quite recently fast parallel algorithms were discovered which compute the set of all cliques in the chordal graphs [NNS], [DK 1]. Surprisingly, generalizing these algorithms, we present here a parallel algorithm which enumerates the cliques of an arbitrary given graph.
Reference: [Cl] <author> Cole, R., </author> <title> Parallel Merge Sorting, </title> <booktitle> Proc. 27 th IEEE FOCS (1986), </booktitle> <pages> pp. 511-516 </pages>
Reference-contexts: in O (log n) time by O (M 2 n 2 ) processors; 2) * can be executed in O (log n) time by O (M 4 n) processors; 3) * can be done in O (log M ) time by O (M 2 ) processors (see for example [Hi], <ref> [Cl] </ref>). Consequence: U i can be computed from U i1 in time max (O (log n); O (log M )) by max (O (M 4 n); O (M 2 n 2 )) processors.
Reference: [CV] <author> Cole, R., and Vishkin, U., </author> <title> Approximate and Exact Scheduling with Applications to List, Tree and Graph Problems, </title> <booktitle> Proc. 27 th IEEE FOCS (1986), </booktitle> <pages> pp. 478-491 </pages>
Reference: [Co] <author> Cook, S.A., </author> <title> A Taxonomy of Problems with Fast Parallel Algorithms, </title> <booktitle> Information and Control 64 (1986), </booktitle> <pages> pp. 2-22 </pages>
Reference: [DK 1] <author> Dahlhaus, E., and Karpinski, M., </author> <title> The Matching Problem for Strongly Chordal Graphs is in N C, </title> <note> Research Report No. </note> <institution> 855-CS, Department of Computer Science, University of Bonn 1986 </institution>
Reference-contexts: For further developments in this direction see also [CN]. Quite recently fast parallel algorithms were discovered which compute the set of all cliques in the chordal graphs [NNS], <ref> [DK 1] </ref>. Surprisingly, generalizing these algorithms, we present here a parallel algorithm which enumerates the cliques of an arbitrary given graph. In Section 2, we give basic definitions and known fundamental results. Section 3 presents a global description of the divide-and-conquer algorithm.
Reference: [DK 2] <author> Dahlhaus, E., and Karpinski, M., </author> <title> Fast Parallel Computation of Perfect and Strongly Perfect Elimination Schemes, </title> <type> IBM Research Report # RJ 5901 (59206), </type> <institution> IBM Almaden Research Center, </institution> <note> San Jose 1987; submitted for publication </note>
Reference: [GHS] <author> Gabor, C.P., Hsu, W.L., and Supowit, K,J., </author> <title> Recognizing Circle Graphs in Polynomial Time, </title> <booktitle> Proc. 26 th IEEE FOCS (1985), </booktitle> <pages> pp. 106-116 </pages>
Reference: [GJ] <author> Garey, M.R., and Johnson, </author> <title> D.S., Computers and Intractability: A Guide to the Theory of N P -Completeness, </title> <address> Freeman:San Francisco 1979 </address>
Reference: [Ga] <author> Gavril, F., </author> <title> Algorithms for Minimum Coloring, Maximum Clique, Minimum Coloring by Cliques, and Maximum Independent Sets of a Chordal Graph, </title> <journal> SIAM J. Comput. </journal> <year> (1972), </year> <pages> pp. 180-187 </pages>
Reference-contexts: 1. Introduction. Several important graph classes have a number of cliques which is polynomially bounded by the number of vertices. The best known examples are chordal graphs [Go], circular arc graphs, and edge graphs <ref> [Ga] </ref>. For these classes polynomial time algorithms are known which compute the set of all cliques. A first general algorithm which enumerates all cliques of a graph and executable in polynomial time with respect to the number of vertices and the number of cliques was the algorithm of Bierstone [TIAS].
Reference: [GS] <author> Goldberg, M., and Spencer, T., </author> <title> A New Parallel Algorithm for the Maximal Independent Set Problem, </title> <booktitle> Proc. 28 th IEEE FOCS (1987), </booktitle> <pages> pp. 161-165 </pages>
Reference-contexts: We start the algorithm and stop as soon as we have a section of the divide-and-conquer method which has K or more cliques. We extend these cliques of the section to the cliques of the whole graph by one of the known M IS-algorithms (see [Lu], <ref> [GS] </ref>). 5. Possible Applications and Related Research Topics The immediate consequence of the results of this paper is that the problems of computing all cliques (and maximal independent sets) are efficiently parallelizable for several important classes of graphs.
Reference: [Go] <author> Golumbic, </author> <title> M.C., Algorithmic Graph Theory and Perfect Graphs, </title> <publisher> Academic Press, </publisher> <address> New York 1980 </address>
Reference-contexts: 1. Introduction. Several important graph classes have a number of cliques which is polynomially bounded by the number of vertices. The best known examples are chordal graphs <ref> [Go] </ref>, circular arc graphs, and edge graphs [Ga]. For these classes polynomial time algorithms are known which compute the set of all cliques.
Reference: [GK] <author> Grigoriev, D.Yu., and Karpinski, M., </author> <title> The Matching Problem for Bipartite Graphs with Polynomially Bounded Permanents is in N C, </title> <booktitle> Proc. 28 th IEEE FOCS (1987), </booktitle> <pages> pp. 166-172 </pages>
Reference-contexts: The results also entail the existence of uniform Boolean circuits of O (log 3 n) depth and poly-size for computing all cliques for arbitrary classes of graphs, provided the number of cliques is bounded by a polynomial. This seems to be related to the recent results of <ref> [GK] </ref> on parallel enumeration of all perfect matchings in bipartite graphs with polynomially bounded permanents. A related problem is a fast parallel clique decomposition of a graph. [Ta] has designed an algorithm depending on a highly sequential subroutine for computing minimal orderings.
Reference: [GLS] <author> Grotschel, M., Lovasz, L., and Schrijver, A., </author> <title> The Ellipsoid Method and its Consequences in Combinational Optimization, </title> <type> Combinatorica 1(1987), </type> <pages> pp. 169-197 </pages>
Reference: [Hi] <author> Hirschberg, D., </author> <title> Fast Parallel Sorting Algorithms, </title> <journal> Communications of the ACM 21(1978), </journal> <volume> No. 8, </volume> <pages> pp. 657-661 </pages>
Reference-contexts: executed in O (log n) time by O (M 2 n 2 ) processors; 2) * can be executed in O (log n) time by O (M 4 n) processors; 3) * can be done in O (log M ) time by O (M 2 ) processors (see for example <ref> [Hi] </ref>, [Cl]). Consequence: U i can be computed from U i1 in time max (O (log n); O (log M )) by max (O (M 4 n); O (M 2 n 2 )) processors.
Reference: [Lu] <author> Luby, M., </author> <title> A Simple Parallel Algorithm for the Maximal Inpedendent Set Problem, </title> <booktitle> Proc. 17 th ACM STOC (1985), </booktitle> <pages> pp. 1-9 </pages>
Reference-contexts: We start the algorithm and stop as soon as we have a section of the divide-and-conquer method which has K or more cliques. We extend these cliques of the section to the cliques of the whole graph by one of the known M IS-algorithms (see <ref> [Lu] </ref>, [GS]). 5. Possible Applications and Related Research Topics The immediate consequence of the results of this paper is that the problems of computing all cliques (and maximal independent sets) are efficiently parallelizable for several important classes of graphs.
Reference: [MC] <author> Mulligan, G.D., and Corneil, D.G., </author> <title> Corrections to Bierstone's Algorithm for Generating Cliques, </title> <journal> JACM 19(1972), </journal> <pages> pp. 244-247 </pages>
Reference: [NNS] <author> Naor, J., Naor, M., and Schaffer, A., </author> <title> Fast Parallel Algorithms for Chordal Graphs, </title> <booktitle> Proc. 19 th ACM STOC (1987), </booktitle> <pages> pp. 355-364 </pages>
Reference-contexts: For further developments in this direction see also [CN]. Quite recently fast parallel algorithms were discovered which compute the set of all cliques in the chordal graphs <ref> [NNS] </ref>, [DK 1]. Surprisingly, generalizing these algorithms, we present here a parallel algorithm which enumerates the cliques of an arbitrary given graph. In Section 2, we give basic definitions and known fundamental results. Section 3 presents a global description of the divide-and-conquer algorithm.
Reference: [Ra] <author> Razborov, A.A., </author> <title> Bound on the Monotone Network Complexity of the Logical Permanent, </title> <booktitle> Matem. Zametk 37 (1985); in Russian </booktitle>
Reference: [Ta] <author> Tarjan, R., </author> <title> Decomposition by Clique Separations, </title> <booktitle> Discrete Mathematics 55(1985), </booktitle> <pages> pp. 221-232 </pages>
Reference-contexts: This seems to be related to the recent results of [GK] on parallel enumeration of all perfect matchings in bipartite graphs with polynomially bounded permanents. A related problem is a fast parallel clique decomposition of a graph. <ref> [Ta] </ref> has designed an algorithm depending on a highly sequential subroutine for computing minimal orderings. Since the number of clique separators in an arbitrary graph is polynomial in the number of vertices, one can ask for the fast parallel enumerator of all the clique separators.
Reference: [TIAS] <author> Tsukiyama, S., Ide, M., Ariyoshi, H. and Shirakawa, I., </author> <title> A New Algorithm for Generating All the Maximal Independent Sets, </title> <journal> SIAM J. </journal> <volume> Comput 6(1977), </volume> <pages> pp. 505-517 </pages>
Reference-contexts: For these classes polynomial time algorithms are known which compute the set of all cliques. A first general algorithm which enumerates all cliques of a graph and executable in polynomial time with respect to the number of vertices and the number of cliques was the algorithm of Bierstone <ref> [TIAS] </ref>. For further developments in this direction see also [CN]. Quite recently fast parallel algorithms were discovered which compute the set of all cliques in the chordal graphs [NNS], [DK 1]. Surprisingly, generalizing these algorithms, we present here a parallel algorithm which enumerates the cliques of an arbitrary given graph. <p> We denote the number of vertices by n, the number of edges by m, and the number of cliques by M . The basic result on the sequential complexity of computing all cliques is the following Theorem 1 ([CN], <ref> [TIAS] </ref>): There is an algorithm which computes the set of all cliques of any graph and which needs O (n + m) space and O ((n m)M ) time. In the next section we will present a most global description of our parallel algorithm. 3.
Reference: [Wi] <author> Wille, R., </author> <title> Subdirect Decomposition of Concept Lattices, </title> <booktitle> Algebra Universalis 17(1983), </booktitle> <pages> pp. 275-287 </pages>
Reference-contexts: In <ref> [Wi] </ref> we find the following result: Theorem 2 [Wi]: The maximal complete bipartite subgraphs of a bipartite graph form a lattice structure in the sense of universal algebra. The lattice structure is related to a Galois connection [Bi 1], [Bi 2] and is defined as follows. <p> In <ref> [Wi] </ref> we find the following result: Theorem 2 [Wi]: The maximal complete bipartite subgraphs of a bipartite graph form a lattice structure in the sense of universal algebra. The lattice structure is related to a Galois connection [Bi 1], [Bi 2] and is defined as follows.
References-found: 25

