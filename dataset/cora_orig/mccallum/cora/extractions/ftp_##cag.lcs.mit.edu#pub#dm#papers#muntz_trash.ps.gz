URL: ftp://cag.lcs.mit.edu/pub/dm/papers/muntz:trash.ps.gz
Refering-URL: http://www.pdos.lcs.mit.edu/~dm/
Root-URL: 
Title: Multi-level Caching in Distributed File Systems or Your cache ain't nuthin' but trash degree of
Author: D. Muntz and P. Honeyman 
Note: The  
Address: Ann Arbor  
Affiliation: Center for Information Technology Integration The University of Michigan  
Abstract: We are investigating the potential for a hierarchy of intermediate file servers to address scaling problems in increasingly large distributed file systems. To this end, we have run trace-driven simulations based on data from DEC-SRC and our own data collection to determine the potential of caching-only intermediate servers. Our simulations show that even with an infinite cache at an intermediate server, cache hit rates are disappointingly low. For client caches as small as 20M, we observe hit rates under 19%. As client cache sizes increase, the hit rate at an intermediate server approaches the degree of sharing among all clients. On the other hand, the intermediate server does appear to be effective in boosting the performance and scalability of upstream file servers by substantially reducing the request rate presented to them. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> J.H. Howard, </author> <title> ``An Overview of the Andrew File System,'' pp. </title> <booktitle> 23-26 in Winter 1988 USENIX Conference Proceedings, </booktitle> <address> Dallas (February, </address> <year> 1988). </year>
Reference-contexts: 1. Introduction As distributed file systems grow, so does the need to increase scalability. At the Institutional File System Project, we are investigating tools and techniques for offering file service to a huge client base, perhaps as many as 30,000 end systems. We elected to deploy AFS <ref> [1] </ref> as the principal distributed file system protocol, because it has proven to scale well to environments with large numbers of users and files [2]. AFS clients cache copies of recently used files on their local disks.
Reference: 2. <author> J.H. Howard, M.L. Kazar, S.G. Menees, D.A. Nichols, M. Satyanarayanan, R.N. Sidebotham, and M. West, </author> <title> ``Scale and Performance in Distributed File Systems,'' </title> <journal> ACM TOCS 6(1), </journal> <pages> pp. </pages> <month> 51-81 (February, </month> <year> 1988). </year>
Reference-contexts: We elected to deploy AFS [1] as the principal distributed file system protocol, because it has proven to scale well to environments with large numbers of users and files <ref> [2] </ref>. AFS clients cache copies of recently used files on their local disks. This allows most file system access requests to be serviced by the local cache manager, without any mediation by file servers.
Reference: 3. <author> R. Sandberg, D. Goldberg, S. Kleiman, D. Walsh, and B. Lyon, </author> <title> ``Design and Implementation of the Sun Network Filesystem,'' pp. </title> <booktitle> 119-130 in Summer 1985 USENIX Conference Proceedings, </booktitle> <address> Portland (June, </address> <year> 1985). </year>
Reference-contexts: This allows most file system access requests to be serviced by the local cache manager, without any mediation by file servers. To reach the broad base of users at our campus, we need to service clients supporting a variety of file system protocols, e.g. , AFS, NFS <ref> [3] </ref>, and AFP [4], among others. Our principal file servers all run AFS, so the first of these is not a problem.
Reference: 4. <author> G.S. Sidhu, </author> <title> R.F. Andrews, and A.B. Oppenheimer, Inside AppleTalk, </title> <publisher> Addison-Wesley, </publisher> <address> Reading (1989). </address>
Reference-contexts: To reach the broad base of users at our campus, we need to service clients supporting a variety of file system protocols, e.g. , AFS, NFS [3], and AFP <ref> [4] </ref>, among others. Our principal file servers all run AFS, so the first of these is not a problem. For other file system protocols, we have built intermediate servers that act as AFS clients of the principal file servers and as NFS or AFP servers for clients requiring foreign protocols.
Reference: 5. <author> J. L. Hennessy and D. A. Patterson, </author> <title> Computer Architecture: A Quantitative Approach, </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> Palo Alto (1990). </address>
Reference-contexts: One reason for considering multi-level cache hierarchies is that they have shown great success in improving CPU performance when used in processor memories <ref> [5] </ref>. In the context of file systems, caching-only intermediate servers potentially reduce the load presented to the principal file servers by satisfying client requests directly. Furthermore, iAFS servers offer the potential to concentrate state information that might otherwise overload the principal servers.
Reference: 6. <author> Charles P. Thacker, Lawrence C. Stewart, and Edwin H. Satterthwaite, Jr., ``Firefly: </author> <title> A Multiprocessor Workstation,'' </title> <journal> IEEE Transactions on Computers 37(8), </journal> <pages> pp. </pages> <month> 909-920 (August, </month> <year> 1988). </year>
Reference-contexts: The subject of these simulations is data caching. (Directory caching may be studied in future work.) The traces fed to the simulator were derived both from data collected in a network of Firefly workstations <ref> [6] </ref> at the Digital Equipment Corporation's Systems Research Center, and from file server trace data collected here at CITI. 2.1.

References-found: 6

