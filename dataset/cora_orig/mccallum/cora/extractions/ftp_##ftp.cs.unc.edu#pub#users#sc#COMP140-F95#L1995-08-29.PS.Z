URL: ftp://ftp.cs.unc.edu/pub/users/sc/COMP140-F95/L1995-08-29.PS.Z
Refering-URL: http://www.cs.unc.edu/~sc/teaching/COMP140-F1995/lectures.html
Root-URL: http://www.cs.unc.edu
Title: COMP 140: Introduction to Translator Systems Lecture 2 (ANSI C for Turing Programmers)  
Author: Siddhartha Chatterjee 
Date: 29 August 1995  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> B. W. Kernighan and D. M. Ritchie. </author> <title> The C Programming Language. </title> <publisher> Prentice Hall Software Series. Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <note> second edition, </note> <year> 1988. </year>
Reference-contexts: 1 Introduction Today's lecture is a quick introduction to the programming language ANSI C, developed with your background in Turing in mind. This is not a language reference manual: that honor is reserved for the book by Kernighan and Ritchie <ref> [1] </ref>. This document is merely a crutch that uses your existing knowledge of Turing to facilitate your learning of ANSI C. <p> You should not make any assumptions about the integer value used to represent the boolean value true. You may safely use the int type to represent values in the range INT_MIN to INT_MAX. These symbolic constants, and many other related values, are defined in the standard header file &lt;limits.h&gt; <ref> [1, pp. 257-258] </ref>. If you need to represent larger values, you can use the type long instead. The types int, long, and char also come in an unsigned flavor. You will occasionally need to use them, for example, in defining hash functions for hash tables. <p> Arrays of characters are important enough to warrant their own syntax. A string constant is written enclosed within double quotes, thus: "This is a string constant". Functions for manipulating strings are defined in the standard header file &lt;string.h&gt; <ref> [1, pp. 249-250] </ref>. Structures Structures are defined and used very much like records in Turing, as shown below. <p> The memory management functions are actually not a part of the ANSI C language definition; they belong to the standard library, and are declared in the standard header file &lt;stdlib.h&gt; <ref> [1, pp. 251-253] </ref>. Here are some examples. <p> if fib (i) := 1 for i: 3..n end for result fib (n) end fibonacci Copyright c fl Siddhartha Chatterjee 1995 Page 6 In ANSI C: int fibonacci (int n) - if (1 == n || 2 == n) return 1; fib = malloc (n*sizeof (int)); fib [0] = fib <ref> [1] </ref> = 1; fib [i] = fib [i-1] + fib [i-2]; return fib [n-1]; - 5.2 Prime sieve In Turing: procedure sieve (n: int) var isprime: array 1 .. n of boolean for i: 1 .. n isprime (i) := true end for isprime (1) := false for i: 2 .. <p> for end for if isprime (j) then put j end if end for end sieve In ANSI C: #include &lt;stdio.h&gt; #include &lt;math.h&gt; void sieve (int n) - int i, j, isprime []; isprime = malloc ((n+1)*sizeof (int)); for (i = 0; i &lt; n; i++) isprime [i] = 1; isprime <ref> [1] </ref> = 0; for (i = 2; i &lt;= ceil (sqrt ((double) n)); i++) - if (isprime [i]) - for (j = 2*i; j &lt;= n; j++) isprime [j] = 0; - Copyright c fl Siddhartha Chatterjee 1995 Page 7 - if (isprime [i]) printf ("%d"n", i); - 6 Subroutines Finally, <p> You can get its effect by ex plicitly passing in a pointer to the variable rather than the variable itself. 7 Miscellaneous Here are some miscellaneous useful features of ANSI C that don't seem to fit anywhere else. 1. The C preprocessor <ref> [1, xA12] </ref> is automatically invoked when you invoke the compiler. The preprocessor is a simple macro processor that handles file inclusion, macro expansion, and conditional compilation. Files are included using the preprocessor syntax #include filename where filename is the name of the header file to include.
References-found: 1

