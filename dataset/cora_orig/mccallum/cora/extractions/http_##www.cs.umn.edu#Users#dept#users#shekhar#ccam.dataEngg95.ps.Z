URL: http://www.cs.umn.edu/Users/dept/users/shekhar/ccam.dataEngg95.ps.Z
Refering-URL: http://www.cs.umn.edu/Users/dept/users/shekhar/
Root-URL: http://www.cs.umn.edu
Email: shekhar@cs.umn.edu dliu@cs.umn.edu  
Title: CCAM: A Connectivity-Clustered Access Method for Aggregate  
Address: Minneapolis, MN 55455  
Affiliation: Department of Computer Science, University of Minnesota,  
Abstract: Queries on Transportation Networks : A Summary of Results Abstract CCAM is an access method for general networks. It uses connectivity clustering. The nodes of the network are assigned to disk pages via the graph partitioning approach to maximize the CRR, i.e., the chances that a pair of connected nodes are allocated to a common page of the file. CCAM supports the operations of insert, delete, create, and find as well as the new operations, get-A-successor and get-successors, which retrieve one or all successors of a node to facilitate aggregate computations on networks. CCAM includes methods for static clustering, as well as dynamic incremental reclustering, to maintain high CRR, in the face of updates without incurring high overheads. Experimental analysis indicates that CCAM can outperform many other access methods for network operations. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Agrawal and H.V. Jagadish. </author> <title> "Algorithms for Searching massive Graphs". </title> <journal> IEEE Trans. on Knowledge and Data Engineering, </journal> <volume> 6(2), </volume> <month> April </month> <year> 1994. </year>
Reference-contexts: Ideally, the clustering maximizes WCRR. In particular, we address the following two issues. First, the static graph-partitioning approach is not efficient when the entire network can not fit into main memory. In general, road-maps are really large databases <ref> [16, 1] </ref>, and thus may not fit inside main memory. Secondly, maintaining higher CRR in the face of Insert () and Delete () operations, without complete reorganization, is a critical problem. To solve the above two issues, we propose dynamic reclustering strategies to handle dynamic updating effects.
Reference: [2] <author> R. Agrawal and Jerry Kiernan. </author> <title> "An Access Structure for Generalized Transitive Closure Queries". </title> <booktitle> In Proc. of the Ninth Intl Conference on Data Engineering, </booktitle> <pages> pages 429-438. </pages> <publisher> IEEE, </publisher> <month> April </month> <year> 1993. </year>
Reference-contexts: However, there has been little work in the design of efficient storage and access methods for network data and aggregate queries on networks. Efficient access methods are available for a severely restricted class of networks, namely directed acyclic graphs [12, 7, 3, 18] and directed graphs with limited cycles <ref> [2] </ref>, which do not adequately model many networks of interest, including road-maps. <p> Topological orders, including depth-first sequence and breadth-first sequence, have been evaluated in [3] for their effectiveness in supporting different graph-traversal problems. Finally, the topological ordering method has been extended to graphs with a few cycles in <ref> [2] </ref>. In addition, spatial access methods were evaluated for benchmark path computations in [23]. A more detailed survey is available in [20]. Meanwhile, static schemes based on the graph-partitioning heuristic, albeit in a different context, was recently used in [26].
Reference: [3] <author> J. Banerjee, S. Kim W. Kim, and J. Garza. </author> <title> "Clustering a DAG for CAD Databases". </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> 14(11) </volume> <pages> 1684-1699, </pages> <month> Nov. </month> <year> 1988. </year>
Reference-contexts: However, there has been little work in the design of efficient storage and access methods for network data and aggregate queries on networks. Efficient access methods are available for a severely restricted class of networks, namely directed acyclic graphs <ref> [12, 7, 3, 18] </ref> and directed graphs with limited cycles [2], which do not adequately model many networks of interest, including road-maps. <p> Path computations, such as graph traversal and transitive closure, can be carried out by scanning forward in the file, using a priority queue [18] or a FIFO queue [12]. Topological orders, including depth-first sequence and breadth-first sequence, have been evaluated in <ref> [3] </ref> for their effectiveness in supporting different graph-traversal problems. Finally, the topological ordering method has been extended to graphs with a few cycles in [2]. In addition, spatial access methods were evaluated for benchmark path computations in [23]. A more detailed survey is available in [20].
Reference: [4] <author> E.R. Barnes. </author> <title> "An Algorithm for Partitioning the Nodes of a Graph". </title> <journal> SIAM Journal Alg. Disc. Meth., </journal> <volume> 3(4) </volume> <pages> 541-550, </pages> <month> December </month> <year> 1982. </year>
Reference-contexts: Contributions: We propose a new access method, CCAM, to efficiently support aggregate queries over general networks such as road maps. We adapt the heuristic graph-partitioning approach 2 to cluster the 2 The literature in the area of graph partitioning <ref> [4, 8, 15, 5] </ref> albeit in a different context and has only focused on partitioning static graphs, without considering dynamic updates. Proc. of the IEEE Eleventh Intl. Conference on Data Engineering, March 1995 3 nodes of a given network into file pages by the connectivity relationship.
Reference: [5] <author> C.K. Cheng and Y.C. Wei. </author> <title> "An Improved Two-Way Partitioning Algorithm with Stable Performance". </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <volume> 10(12) </volume> <pages> 1502-1511, </pages> <month> December </month> <year> 1991. </year> <booktitle> Proc. of the IEEE Eleventh Intl. Conference on Data Engineering, </booktitle> <month> March </month> <year> 1995 </year> <month> 10 </month>
Reference-contexts: Contributions: We propose a new access method, CCAM, to efficiently support aggregate queries over general networks such as road maps. We adapt the heuristic graph-partitioning approach 2 to cluster the 2 The literature in the area of graph partitioning <ref> [4, 8, 15, 5] </ref> albeit in a different context and has only focused on partitioning static graphs, without considering dynamic updates. Proc. of the IEEE Eleventh Intl. Conference on Data Engineering, March 1995 3 nodes of a given network into file pages by the connectivity relationship. <p> Section 3 presents an algebraic analysis, and section 4 describes the experimental evaluation of CCAM. Finally, section 5 summarizes our conclusions and suggests future work. 2 CCAM: Connectivity-Clustered Ac cess Method CCAM clusters the nodes of the network via graph partitioning, using the ratio-cut heuristic <ref> [5] </ref>. Other graph partitioning methods can also be used as the basis of our scheme. In this section, we describe the file-structure and procedures used to implement various operations on networks. 2.1 Connectivity-Clustered Data File For each node, a record stores the node data, successor-list and predecessor-list. <p> We adapt Cheng and Wei's two-way ratio-cut heuristic algorithm <ref> [5] </ref> as the basis for our connectivity based clustering method. Figure 2 shows the connectivity-based clustering algorithm for top-down clustering using the 2-way-partition-graph algorithm. We repeatedly apply the 2-way-partition-graph () to cluster the graph. After applying the 2-way-partition-graph (), two subsets return from the algorithm. <p> Although the graph partitioning problem is NP-complete [9], many good heuristics based on iterative approaches <ref> [8, 15, 5] </ref> have been proposed to solve this problem efficiently. The implementation of CCAM operations takes advantage of these heuristics. 3.2 Cost Modeling For simplicity, we assume that each edge is equally likely to be accessed by network operations. This assumption is made only to simplify the analysis.
Reference: [6] <author> W.C. Collier and R.J. Weiland. </author> <title> "Smart Cars, Smart Highways". </title> <journal> IEEE Spectrum, </journal> <month> April </month> <year> 1994. </year>
Reference-contexts: efficient storage and access methods for aggregate queries on networks such as road maps. 1.1 Application Domain: IVHS and Route Evaluation Queries IVHS 1 is currently being developed to improve the transportation infra-structure and thus improve safety, increase efficiency, and productivity by applying sensor, database, communication and other emerging technologies <ref> [6] </ref>. An important part of IVHS is a geographic database containing road maps, public transportation routes, and current travel time on segments of transportation network, which is updated frequently.
Reference: [7] <author> S. Dar and H.V. Jagadish. </author> <title> "A Spanning Tree Transitive Closure Algorithm". </title> <booktitle> In Proc. of Intl Conference on Data Engineering. IEEE, </booktitle> <year> 1992. </year>
Reference-contexts: However, there has been little work in the design of efficient storage and access methods for network data and aggregate queries on networks. Efficient access methods are available for a severely restricted class of networks, namely directed acyclic graphs <ref> [12, 7, 3, 18] </ref> and directed graphs with limited cycles [2], which do not adequately model many networks of interest, including road-maps.
Reference: [8] <author> C.M. Fiduccia and R.M. Mattheyses. </author> <title> "A Linear Time Heuristic for Improving Network Partitions". </title> <booktitle> In Proc. of 19th Design Automation Conference, </booktitle> <pages> pages 175-181, </pages> <year> 1982. </year>
Reference-contexts: Contributions: We propose a new access method, CCAM, to efficiently support aggregate queries over general networks such as road maps. We adapt the heuristic graph-partitioning approach 2 to cluster the 2 The literature in the area of graph partitioning <ref> [4, 8, 15, 5] </ref> albeit in a different context and has only focused on partitioning static graphs, without considering dynamic updates. Proc. of the IEEE Eleventh Intl. Conference on Data Engineering, March 1995 3 nodes of a given network into file pages by the connectivity relationship. <p> Although the graph partitioning problem is NP-complete [9], many good heuristics based on iterative approaches <ref> [8, 15, 5] </ref> have been proposed to solve this problem efficiently. The implementation of CCAM operations takes advantage of these heuristics. 3.2 Cost Modeling For simplicity, we assume that each edge is equally likely to be accessed by network operations. This assumption is made only to simplify the analysis.
Reference: [9] <author> M.R. Garey and D.S. Johnson. </author> <title> "Computers and Intractability: A Guide to the Theory of NP-Completeness". W.H. </title> <publisher> Freeman and Company, </publisher> <address> San Francisco, </address> <year> 1979. </year>
Reference-contexts: It can be easily shown that the problem of partitioning the nodes of a network into pages of a given size, so as to maximize the WCRR, is an instance of the graph/circuit partitioning problem defined in [15]. Although the graph partitioning problem is NP-complete <ref> [9] </ref>, many good heuristics based on iterative approaches [8, 15, 5] have been proposed to solve this problem efficiently. The implementation of CCAM operations takes advantage of these heuristics. 3.2 Cost Modeling For simplicity, we assume that each edge is equally likely to be accessed by network operations.
Reference: [10] <author> M.F. Goodchild. </author> <title> "Towards an Enumeration and Classification of GIS Functions". </title> <booktitle> In Proc. of Intl Geographic Info. Systems Symp., </booktitle> <year> 1987. </year>
Reference-contexts: The phenomena of interest in these applications are limited to a finite collection of points (nodes) with locations and the line-segments (edges) connecting the points. Aggregate queries on networks perform connectivity-based computations including route evaluation, path comparison, tour evaluation and location-allocation evaluation <ref> [10, 19] </ref>. Databases are increasingly being used to store network data and to carry out network computations within a reasonable response time. A lot of research has been carried out within the database area in the design and evaluation of algorithms for the shortest path computation.
Reference: [11] <author> A. Guttman. "R-Trees: </author> <title> A Dynamic Index Structure for Spatial Searching". </title> <booktitle> In Proc. of SIGMOD Intl Conference on Management of Data, </booktitle> <pages> pages 47-57. </pages> <publisher> ACM, </publisher> <year> 1984. </year>
Reference-contexts: A B + tree with Z-ordering [22] of the x, y coordinates is used to order the secondary index. It can support point and range queries on spatial databases. Other access methods such as R-tree <ref> [11] </ref> and Grid File [21], etc. can alternatively be created on top of the data file as secondary indices in CCAM to suit the application. Example: In figure 1, a sample network and its CCAM is shown.
Reference: [12] <author> K. Hua, J. Su, and C. Hua. </author> <title> "An Efficient Strategy for Traversal Recursive Query Evaluation". </title> <booktitle> In Proc. of the Ninth Intl Conference on Data Engineering. IEEE, </booktitle> <month> April </month> <year> 1993. </year>
Reference-contexts: However, there has been little work in the design of efficient storage and access methods for network data and aggregate queries on networks. Efficient access methods are available for a severely restricted class of networks, namely directed acyclic graphs <ref> [12, 7, 3, 18] </ref> and directed graphs with limited cycles [2], which do not adequately model many networks of interest, including road-maps. <p> Path computations, such as graph traversal and transitive closure, can be carried out by scanning forward in the file, using a priority queue [18] or a FIFO queue <ref> [12] </ref>. Topological orders, including depth-first sequence and breadth-first sequence, have been evaluated in [3] for their effectiveness in supporting different graph-traversal problems. Finally, the topological ordering method has been extended to graphs with a few cycles in [2].
Reference: [13] <author> Y. Ioannidis, R. Ramakrishnan, and L. Winger. </author> <title> "Transitive Closure Algorithms Based on Graph Traversal". </title> <journal> ACM Trans. on Database Systems, </journal> <volume> 18(3), </volume> <month> September </month> <year> 1993. </year>
Reference-contexts: The Get-successors () and Get-A-successor () operations represent the dominant I/O cost of many aggregate queries on networks. Related Work: The literature on transitive closure and recursive-query processing has evaluated algorithms for path computations. A survey of the work can be found in <ref> [13] </ref>. The effect of efficient storage and access methods on the performance of path computations is currently being explored. Most of the proposed methods have looked at storing nodes of a directed acyclic graph in topological order [18], using a conventional index like the B-tree.
Reference: [14] <author> B. Jiang. </author> <title> "I/O Efficiency of Shortest Path Algorithms: An Analysis". </title> <booktitle> In Proc. of the Intl Conference on Data Engineering. IEEE, </booktitle> <year> 1992. </year>
Reference-contexts: The issues involved in dynamic updating effects during insertion and deletion have not been discussed. Our Approach: In general, graphs can be represented in many different ways. We will focus on the adjacency-list oriented representation, which has been used quite frequently in database research <ref> [14] </ref>. In this paper, a network (structurally identical to a graph) is modeled as a list of nodes, and each node has attributes named successor-list and predecessor-list, which represent the outgoing and incoming edges. The predecessor-list facilitates updating the successor-lists during the insertion and deletion of nodes.
Reference: [15] <author> B.W. Kernighan and S. Lin. </author> <title> "An Efficient Heuristic Procedure for Partitioning Graphs". </title> <journal> Bell Syst. Tech. J., </journal> <volume> 49(2) </volume> <pages> 291-307, </pages> <month> February </month> <year> 1970. </year>
Reference-contexts: Contributions: We propose a new access method, CCAM, to efficiently support aggregate queries over general networks such as road maps. We adapt the heuristic graph-partitioning approach 2 to cluster the 2 The literature in the area of graph partitioning <ref> [4, 8, 15, 5] </ref> albeit in a different context and has only focused on partitioning static graphs, without considering dynamic updates. Proc. of the IEEE Eleventh Intl. Conference on Data Engineering, March 1995 3 nodes of a given network into file pages by the connectivity relationship. <p> In fact, M-way partitioning <ref> [15, 27] </ref> may be used to further improve the result of partitioning, if computation complexity and CPU cost is not a concern. Static-Create () operation is not efficient when the entire network does not fit inside main memory. Incremental Create () operation is designed to handle very large networks. <p> It can be easily shown that the problem of partitioning the nodes of a network into pages of a given size, so as to maximize the WCRR, is an instance of the graph/circuit partitioning problem defined in <ref> [15] </ref>. Although the graph partitioning problem is NP-complete [9], many good heuristics based on iterative approaches [8, 15, 5] have been proposed to solve this problem efficiently. <p> Although the graph partitioning problem is NP-complete [9], many good heuristics based on iterative approaches <ref> [8, 15, 5] </ref> have been proposed to solve this problem efficiently. The implementation of CCAM operations takes advantage of these heuristics. 3.2 Cost Modeling For simplicity, we assume that each edge is equally likely to be accessed by network operations. This assumption is made only to simplify the analysis.
Reference: [16] <author> R. Kung, E. Hanson, and et. al. </author> <title> "Heuristic Search in Data Base Systems". </title> <booktitle> In Proc. Expert Database Systems. </booktitle> <publisher> Benjamin Cummings Publications, </publisher> <year> 1986. </year>
Reference-contexts: Ideally, the clustering maximizes WCRR. In particular, we address the following two issues. First, the static graph-partitioning approach is not efficient when the entire network can not fit into main memory. In general, road-maps are really large databases <ref> [16, 1] </ref>, and thus may not fit inside main memory. Secondly, maintaining higher CRR in the face of Insert () and Delete () operations, without complete reorganization, is a critical problem. To solve the above two issues, we propose dynamic reclustering strategies to handle dynamic updating effects.
Reference: [17] <author> Y. Kusumi, S. Nishio, and T. Hasegawa. </author> <title> "File Access Level Optimization Using Page Access Graph on Recursive Query Evaluation". </title> <booktitle> In Proc. Conference on Extending Database Technology. </booktitle> <address> EDTB, </address> <year> 1988. </year>
Reference-contexts: Local reorganization of the data pages may be needed to improve the CRR. Intuitively, the data set chosen for reorganization should be those data pages which are related via the connection between nodes. We adapt the notion of the page access graph (PAG) <ref> [17] </ref> to formalize the connectivity relationship between data pages. Definition 1 (Page Access Graph) Let G = (V , E) be the given network.
Reference: [18] <author> P.A. Larson and V. Deshpande. </author> <title> "A File Structure Supporting Traversal Recursion". </title> <booktitle> In Proc. of the SIG-MOD Conference, </booktitle> <pages> pages 243-252. </pages> <publisher> ACM, </publisher> <year> 1989. </year>
Reference-contexts: However, there has been little work in the design of efficient storage and access methods for network data and aggregate queries on networks. Efficient access methods are available for a severely restricted class of networks, namely directed acyclic graphs <ref> [12, 7, 3, 18] </ref> and directed graphs with limited cycles [2], which do not adequately model many networks of interest, including road-maps. <p> A survey of the work can be found in [13]. The effect of efficient storage and access methods on the performance of path computations is currently being explored. Most of the proposed methods have looked at storing nodes of a directed acyclic graph in topological order <ref> [18] </ref>, using a conventional index like the B-tree. Path computations, such as graph traversal and transitive closure, can be carried out by scanning forward in the file, using a priority queue [18] or a FIFO queue [12]. <p> Most of the proposed methods have looked at storing nodes of a directed acyclic graph in topological order <ref> [18] </ref>, using a conventional index like the B-tree. Path computations, such as graph traversal and transitive closure, can be carried out by scanning forward in the file, using a priority queue [18] or a FIFO queue [12]. Topological orders, including depth-first sequence and breadth-first sequence, have been evaluated in [3] for their effectiveness in supporting different graph-traversal problems. Finally, the topological ordering method has been extended to graphs with a few cycles in [2]. <p> We note that the records do not have fixed formats, since the size of the successor-list and predecessor-list varies across nodes. In contrast with the previous topological ordering based approach <ref> [18] </ref> , we use connectivity clustering to cluster node records into data pages. CCAM assigns nodes to the data page by the graph partitioning approach, which maximizes CRR. Each data page is kept at least half full whenever possible.
Reference: [19] <author> R. Laurini and D. Thompson. </author> <title> "Fundamentals of Spatial Information Systems", </title> <booktitle> chapter 5 and 2.5.4. Number 37 in The A.P.I.C. Series. </booktitle> <publisher> Academic Press, </publisher> <year> 1992. </year>
Reference-contexts: The phenomena of interest in these applications are limited to a finite collection of points (nodes) with locations and the line-segments (edges) connecting the points. Aggregate queries on networks perform connectivity-based computations including route evaluation, path comparison, tour evaluation and location-allocation evaluation <ref> [10, 19] </ref>. Databases are increasingly being used to store network data and to carry out network computations within a reasonable response time. A lot of research has been carried out within the database area in the design and evaluation of algorithms for the shortest path computation. <p> This computation can be formulated as instances of an aggregate query, called route evaluation, over specified routes in the road-network database. Route evaluation arises in many other important applications and several GIS support special data-type of a route-unit which represents a collection of arcs with common characteristics (e.g. name) <ref> [19] </ref>. The attribute data is often aggregated over edges and nodes inside or connected to route-units to present a summary information for decision support applications.
Reference: [20] <author> D.R. Liu and S. Shekhar. "CCAM: </author> <title> Connectivity-Clustered Access Method for Networks and Network Computations". </title> <type> Technical Report TR 93-78, </type> <institution> Computer Science Dept. University of Minnesota, </institution> <year> 1993. </year>
Reference-contexts: Finally, the topological ordering method has been extended to graphs with a few cycles in [2]. In addition, spatial access methods were evaluated for benchmark path computations in [23]. A more detailed survey is available in <ref> [20] </ref>. Meanwhile, static schemes based on the graph-partitioning heuristic, albeit in a different context, was recently used in [26]. The issues involved in dynamic updating effects during insertion and deletion have not been discussed. Our Approach: In general, graphs can be represented in many different ways. <p> The cost of Get-A-successor () is high if successor is not in the same page as the node. The cost is low, otherwise. In this model, the expected cost of Get-A-successor () can be expressed as a linear monotonically decreasing function of WCRR. The details are available in <ref> [20] </ref>. 2 Theorem 1 suggests that the expected cost of aggregate queries over a network is minimized by designing an access method customized to maximize WCRR or the sum of weights over unsplit edges. <p> In the analysis, we focus on the number of data page accesses. A detailed analysis is provided in <ref> [20] </ref>. The algebraic cost for search operations and route evaluation queries is listed in the table 3. The Get-successors () operation retrieves all successors of a given node x. We assume that the data page containing node x is located in main memory. <p> Due to space constraints, we only present a subset of the experiments. A full description of these experiments and the results can be found in <ref> [20] </ref>. We compare our proposed connectivity-based clustering schemes CCAM with the other three schemes, namely, Grid file, DFS-AM and BFS-AM. DFS-AM and BFS-AM are extensions of topological-ordering based files to general graphs.
Reference: [21] <author> J. Nievergelt, H. Hinteberger, and K.D. Sevcik. </author> <title> "The Grid File: An Adaptable, Symmetric Multi-Key File Structure". </title> <journal> ACM Trans. on Database Systems, </journal> <volume> 9(1) </volume> <pages> 38-71, </pages> <year> 1984. </year>
Reference-contexts: A B + tree with Z-ordering [22] of the x, y coordinates is used to order the secondary index. It can support point and range queries on spatial databases. Other access methods such as R-tree [11] and Grid File <ref> [21] </ref>, etc. can alternatively be created on top of the data file as secondary indices in CCAM to suit the application. Example: In figure 1, a sample network and its CCAM is shown.
Reference: [22] <author> A. Orenstein and T. Merrett. </author> <title> "A Class of Data Structures for Associative Searching". </title> <booktitle> In Proc. Symp. on Principles of Database Systems, </booktitle> <pages> pages 181-190. </pages> <address> SIGMOD-SIGACT PODS, </address> <year> 1984. </year>
Reference-contexts: Records of the data file are not physically ordered by node-id values. A secondary index is created on top of the data file. Since our benchmark networks are embedded in geographic space, x,y coordinates for each node are also stored in the record. A B + tree with Z-ordering <ref> [22] </ref> of the x, y coordinates is used to order the secondary index. It can support point and range queries on spatial databases.
Reference: [23] <author> S. Shekhar, A. Kohli, and M. Coyle. </author> <title> "Can Proximity-Based Access Methods Efficiently Support Network Computations?". </title> <type> Technical Report TR-93-57, </type> <institution> Computer Science Dept. University of Minnesota, </institution> <year> 1993. </year>
Reference-contexts: Topological orders, including depth-first sequence and breadth-first sequence, have been evaluated in [3] for their effectiveness in supporting different graph-traversal problems. Finally, the topological ordering method has been extended to graphs with a few cycles in [2]. In addition, spatial access methods were evaluated for benchmark path computations in <ref> [23] </ref>. A more detailed survey is available in [20]. Meanwhile, static schemes based on the graph-partitioning heuristic, albeit in a different context, was recently used in [26]. The issues involved in dynamic updating effects during insertion and deletion have not been discussed.
Reference: [24] <author> S. Shekhar, A. Kohli, and M. Coyle. </author> <title> "Path Computation Algorithms for Advanced Traveler Information System". </title> <booktitle> In Proc. of the Ninth Intl Conference on Data Engineering, </booktitle> <pages> pages 31-39. </pages> <publisher> IEEE, </publisher> <month> April </month> <year> 1993. </year>
Reference-contexts: An important part of IVHS is a geographic database containing road maps, public transportation routes, and current travel time on segments of transportation network, which is updated frequently. Route planning <ref> [24] </ref> is a useful function of the IVHS database to allow travelers to compare alternate routes between their origin and destination before travel begins. <p> The Get-A-successor () and Get-successors () operations are unique to aggregate queries on networks, and they retrieve one or all successors of a node. For example, Get-A-successor () is used in route evaluation queries, while Get-successors () is used in graph search algorithms like A ? <ref> [24] </ref>. While Get-successors () and Get-A-successor () can be implemented as sequences of Find () on relevant successors, more efficient implementations are possible by defining these operations as distinct. The Get-successors () and Get-A-successor () operations represent the dominant I/O cost of many aggregate queries on networks.
Reference: [25] <author> M. Stonebraker, J. Frew, K. Gardels, and Jeff Mered-ith. </author> <title> "The Sequoia 2000 Benchmark". </title> <booktitle> In Proc. of Intl Conference on Management of Data. ACM, </booktitle> <year> 1993. </year>
Reference-contexts: Further, the CPU cost for reorganization should be taken into account. Reorganization policies that do not incur high CPU costs are currently being investigated. Finally, we will evaluate CCAM for various aggregate computations over networks and benchmarks (such as the sequoia benchmark <ref> [25] </ref>). We would also like to evaluate CCAM for other aggregate queries on networks, including tour evaluation, location-allocation evaluation etc. Acknowledgments This research was supported by the Federal Highway Authority (FHWA), Minnesota Dept. of Transportation and the Center for Transportation Studies at the University of Minnesota.
Reference: [26] <author> M. M. Tsangaris and Jeffrey.F. Naughton. </author> <title> "A Stochastic Approach for Clustering in Object Bases". </title> <booktitle> In Proc. of SIGMOD Conference on Management of Data, </booktitle> <pages> pages 12-21. </pages> <publisher> ACM, </publisher> <year> 1991. </year>
Reference-contexts: In addition, spatial access methods were evaluated for benchmark path computations in [23]. A more detailed survey is available in [20]. Meanwhile, static schemes based on the graph-partitioning heuristic, albeit in a different context, was recently used in <ref> [26] </ref>. The issues involved in dynamic updating effects during insertion and deletion have not been discussed. Our Approach: In general, graphs can be represented in many different ways. We will focus on the adjacency-list oriented representation, which has been used quite frequently in database research [14].
Reference: [27] <author> C.W. Yeh, C.K. Cheng, and T.T. Y. Lin. </author> <title> "A General Purpose Multiple Way Partitioning Algorithm". </title> <booktitle> In Proc. of 28th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 421-426, </pages> <year> 1991. </year>
Reference-contexts: In fact, M-way partitioning <ref> [15, 27] </ref> may be used to further improve the result of partitioning, if computation complexity and CPU cost is not a concern. Static-Create () operation is not efficient when the entire network does not fit inside main memory. Incremental Create () operation is designed to handle very large networks.
References-found: 27

