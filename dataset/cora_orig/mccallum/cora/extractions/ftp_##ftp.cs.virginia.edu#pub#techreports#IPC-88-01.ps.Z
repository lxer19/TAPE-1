URL: ftp://ftp.cs.virginia.edu/pub/techreports/IPC-88-01.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: COMPACT O-COMPLETE TREES: A NEW METHOD FOR SEARCHING LARGE FILES  
Author: Ratko Orlandic John L. Pfaltz 
Note: This research was supported in part by JPL under contract #957721.  
Address: Charlottesville, VA 22903  
Affiliation: Institute for Parallel Computation School of Engineering and Applied Science University of Virginia  
Date: January 26, 1988  
Pubnum: IPC-TR-88-001  
Abstract-found: 0
Intro-found: 1
Reference: [Bur76] <author> W. A. Burkhard, </author> <title> Hashing and Trie Algorithms for Partial Match Retrieval, </title> <journal> Trans. Database Systems 1,2 (June 1976), </journal> <pages> 175-187. </pages>
Reference-contexts: Binary tree access is commonly ignored in practice. Access paths of length greater than 14 in files exceeding 30K records is intolerable. However, one can attain large fan out n-ary trees in "tries", which label the edges with search key substrings <ref> [Bur76, Fla81] </ref>. Finding an effective set of edge labels (it must be a reasonably large disjoint set of key subsegments that appear in most keys) that is appropriate in a variety of applications is difficult. Consequently, "trie" retrieval tends to be reserved for special purpose applications.
Reference: [Com79] <author> D. Comer, </author> <title> The Ubiquitous B-Tree, </title> <journal> Computing Surveys 11,2 (June 1979), </journal> <pages> 121-137. </pages>
Reference-contexts: The unique ability to ensure a minimal bound on the fan out in B-tree search guarantees retrieval performance of no more than 4 disk accesses for all but the largest files. Indeed, B-trees have so many desirable properties <ref> [Com79, ScO82] </ref>. that they are commonly regarded as the file access method of choice whenever range searching is desired. The major drawback of B-tree access is that the retrieval keys themselves must be stored in the index blocks.
Reference: [Fae79] <author> R. Fagin and et.al., </author> <title> Extendible Hashing---A Fast Access Method for Dynamic Files, </title> <journal> Trans. Database Systems 4,3 (Sep. </journal> <year> 1979), </year> <pages> 315-344. </pages>
Reference-contexts: They are (1) B-tree, (2) extensible hashing, (3) binary tree, and (4) trie retrieval. If the data file need not be stored in any kind of sort order, e.g. for range searching or sequential processing, and if only exact match retrieval is to be supported then extensible hashing <ref> [Fae79] </ref> or any of several variants [LiL87, Lom83, RLT83] are appropriate. The great appeal of extensible hashing methods is that normally no more than 2 disk reads are required to access any record of the file. <p> Analysis and Discussion Using a derivation, similar to one in <ref> [Fae79] </ref>, we can show that under a Poisson distribution the expected number of data blocks B, in the structure with N records and the blocking factor per data page M, tends asymptotically to B (N,M) = N /( M . ln 2 ) .
Reference: [Fla81] <author> P. Flajolet, </author> <title> On the Performance Evaluation of Extendible Hashing and Trie Searching, </title> <institution> RJ3258, IBM, </institution> <address> San Jose CA, </address> <month> Oct. </month> <year> 1981. </year>
Reference-contexts: Binary tree access is commonly ignored in practice. Access paths of length greater than 14 in files exceeding 30K records is intolerable. However, one can attain large fan out n-ary trees in "tries", which label the edges with search key substrings <ref> [Bur76, Fla81] </ref>. Finding an effective set of edge labels (it must be a reasonably large disjoint set of key subsegments that appear in most keys) that is appropriate in a variety of applications is difficult. Consequently, "trie" retrieval tends to be reserved for special purpose applications.
Reference: [Fre60] <author> E. </author> <title> Fredkin, </title> <booktitle> Many-way Information Retrieval, Comm. of the ACM 3(1960), </booktitle> <pages> 490-500. </pages>
Reference-contexts: If a leaf is found then the sequential examination of the keys stored in the leaf will reveal whether the desired record is actually present or not. This is a standard trie search, in which the search is controlled by the successive edge labels <ref> [Fre60, Knu73] </ref>. 8 The key observation is that every leaf can be labeled by its path from the root. The traversed arc labels correspond to the prefix of all keys stored in the leaf.
Reference: [Knu73] <author> D. E. Knuth, </author> <title> The Art of Computer Programming, Sorting and Searching, </title> <publisher> Addison Wesley, </publisher> <address> Reading, MA, </address> <year> 1973. </year> <note> Vol. 3. </note>
Reference-contexts: If a leaf is found then the sequential examination of the keys stored in the leaf will reveal whether the desired record is actually present or not. This is a standard trie search, in which the search is controlled by the successive edge labels <ref> [Fre60, Knu73] </ref>. 8 The key observation is that every leaf can be labeled by its path from the root. The traversed arc labels correspond to the prefix of all keys stored in the leaf.
Reference: [LiL87] <author> W. Litwin and D. B. Lomet, </author> <title> A New Method for Fast Data Searches with Keys, </title> <journal> IEEE Software, </journal> <month> Mar. </month> <year> 1987, </year> <pages> 16-24. </pages>
Reference-contexts: If the data file need not be stored in any kind of sort order, e.g. for range searching or sequential processing, and if only exact match retrieval is to be supported then extensible hashing [Fae79] or any of several variants <ref> [LiL87, Lom83, RLT83] </ref> are appropriate. The great appeal of extensible hashing methods is that normally no more than 2 disk reads are required to access any record of the file. But hashing methods will not support range searching, and is of limited value for secondary key retrieval.
Reference: [Lom83] <author> D. B. Lomet, </author> <title> Bounded Index Exponential Hashing, </title> <journal> Trans. Database Systems 8,1 (Mar. </journal> <year> 1983), </year> <pages> 136-165. </pages>
Reference-contexts: If the data file need not be stored in any kind of sort order, e.g. for range searching or sequential processing, and if only exact match retrieval is to be supported then extensible hashing [Fae79] or any of several variants <ref> [LiL87, Lom83, RLT83] </ref> are appropriate. The great appeal of extensible hashing methods is that normally no more than 2 disk reads are required to access any record of the file. But hashing methods will not support range searching, and is of limited value for secondary key retrieval.
Reference: [Pfa72] <author> J. L. Pfaltz, </author> <title> Graph Structures, </title> <journal> J. ACM 19,3 (July 1972), </journal> <pages> 411-422. </pages>
Reference-contexts: This would, however, imply that the original tree t also has missing leaf, which contradicts our assumption. ` Note that the contracted tree t 2 , together with t 0 and t 1 , permit the unique reconstruction of t in the sense of <ref> [Pfa72, Pfa83] </ref>. 16 hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 0000 1000 0010 0101 1000 0001 1010 1010 1011 0010 L 000 L 100 L 1011 t 0 t 0 0 0 0 0 0 0 (a) (b) Minimal partitions of 0-complete PB-trees. hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 2.4.
Reference: [Pfa83] <author> J. L. Pfaltz, </author> <title> Transformations of Structures by Convex Homomorphisms, </title> <booktitle> in Lecture Notes in Computer Science, </booktitle> <volume> #153, </volume> <editor> H. Ehrig, M. Nagl and G. Rozenberg (editors), </editor> <publisher> Springer-Verlag, </publisher> <year> 1983, </year> <pages> 297-313. </pages>
Reference-contexts: This would, however, imply that the original tree t also has missing leaf, which contradicts our assumption. ` Note that the contracted tree t 2 , together with t 0 and t 1 , permit the unique reconstruction of t in the sense of <ref> [Pfa72, Pfa83] </ref>. 16 hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 0000 1000 0010 0101 1000 0001 1010 1010 1011 0010 L 000 L 100 L 1011 t 0 t 0 0 0 0 0 0 0 (a) (b) Minimal partitions of 0-complete PB-trees. hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 2.4.
Reference: [RLT83] <author> K. Ramamohanarao, J. W. Lloyd and J. A. Thom, </author> <title> Partial-match Retrieval using Hashing and Descriptors, </title> <journal> Trans. </journal> <note> Database Systems 8,4 (Dec. </note> <year> 1983). </year>
Reference-contexts: If the data file need not be stored in any kind of sort order, e.g. for range searching or sequential processing, and if only exact match retrieval is to be supported then extensible hashing [Fae79] or any of several variants <ref> [LiL87, Lom83, RLT83] </ref> are appropriate. The great appeal of extensible hashing methods is that normally no more than 2 disk reads are required to access any record of the file. But hashing methods will not support range searching, and is of limited value for secondary key retrieval.

References-found: 11

