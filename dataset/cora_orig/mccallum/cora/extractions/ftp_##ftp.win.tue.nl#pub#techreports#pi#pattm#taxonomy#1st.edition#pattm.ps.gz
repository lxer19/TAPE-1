URL: ftp://ftp.win.tue.nl/pub/techreports/pi/pattm/taxonomy/1st.edition/pattm.ps.gz
Refering-URL: http://www.win.tue.nl/cs/pa/research/tax-n-tool.html
Root-URL: http://www.win.tue.nl
Title: A taxonomy of keyword pattern matching algorithms  
Author: by B.W. Watson and G.Zwaan 
Date: Eindhoven, December 1992  
Affiliation: Eindhoven University of Technology Department of Mathematics and Computing Science  
Pubnum: 92/27 Computing Science Note 92/27  
Abstract-found: 0
Intro-found: 1
Reference: [Aho90] <author> Aho, </author> <title> A.V. Algorithms for finding patterns in strings, </title> <editor> in: J. van Leeuwen, ed., </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <volume> vol. </volume> <publisher> A (North-Holland, </publisher> <address> Amsterdam, </address> <year> 1990) </year> <month> 257-300. </month>
Reference-contexts: introduction to all variants of the four principal pattern matching algorithms presented in <ref> [Aho90] </ref>. Results concerning particular algorithms can be summarized as follows: * As stated in [AC75], the AC algorithm is intended to be a generalization of the original Knuth-Morris-Pratt (KMP) algorithm | making use of automata theory. <p> Our taxonomy has emphasized the derivation of each of these components from a common specification. * The precomputation of the BM shift functions has been troublesome; many solutions were published, corrected, and re-published (for a good bibliography of these see <ref> [Aho90] </ref>).
Reference: [AC75] <author> Aho, A.V. and M.J. Corasick. </author> <title> Efficient string matching: an aid to bibliographic search, </title> <journal> Comm. ACM, </journal> <month> 18(6) </month> <year> (1975) </year> <month> 333-340. </month>
Reference-contexts: introduction to all variants of the four principal pattern matching algorithms presented in [Aho90]. Results concerning particular algorithms can be summarized as follows: * As stated in <ref> [AC75] </ref>, the AC algorithm is intended to be a generalization of the original Knuth-Morris-Pratt (KMP) algorithm | making use of automata theory. The classical derivations of the two (using automata and indices, respectively) do not serve to highlight their similarities, or differences. <p> The running time of this new algorithm does not appear to be any better than algorithm 3.4. The transformation (by adding indices) of algorithm 3.5 into the classically presented KMP algorithm (algorithm 3.6) was demonstrated to be straight forward. * The original Aho-Corasick article <ref> [AC75] </ref> presented the "optimal" version of the algorithm after the failure function version of the algorithm. The optimal algorithm was explained as using a transition function fl f which is a composition of the extended forward trie o ef and failure function f f .
Reference: [AHU74] <author> Aho, A.V., J.E. Hopcroft, and J.D. Ullman. </author> <title> The Design and Analysis of Computer Algorithms (Addison-Wesley Publishing Company, </title> <address> Reading, MA, </address> <year> 1974). </year>
Reference: [BM77] <author> Boyer, R.S. and J.S. Moore. </author> <title> A fast string searching algorithm, </title> <journal> Comm. ACM, </journal> <month> 20(10) </month> <year> (1977) </year> <month> 62-72. </month>
Reference: [Bro83] <author> Broy, M. </author> <title> Program construction by transformations: a family tree of sorting programs, </title> <editor> in: A.W. Biermann and G Guiho, eds., </editor> <booktitle> Computer Program Synthesis Methodologies (1983) 1-49. </booktitle>
Reference: [Com79a] <author> Commentz-Walter, B. </author> <title> A string matching algorithm fast on the average, </title> <editor> in: H.A. Maurer, ed., </editor> <booktitle> Proc. 6th Internat. Coll. on Automata, Languages and Programming (Springer, </booktitle> <address> Berlin, </address> <year> 1979) </year> <month> 118-132. </month>
Reference-contexts: The publication of the Hume-Sunday taxonomy [HS91] motivated us to also derive the BM algorithm in an entirely different manner | making use of the concept of "match-orders". * In both papers by Commentz-Walter describing her algorithm (in particular <ref> [Com79a] </ref>), the differences between methods of determining a safe shift amount were not made explicit. Indeed, that some of these shift functions were distinct was not mentioned in all cases. Our derivation of the CW algorithm clearly defines the differences between the shift functions.
Reference: [Com79b] <author> Commentz-Walter, B. </author> <title> A string matching algorithm fast on the average, </title> <type> Technical report TR 79.09.007, </type> <institution> IBM Germany, Heidelberg Scientific Center, </institution> <year> 1979. </year>
Reference: [Dar78] <author> Darlington, J. </author> <title> A synthesis of several sorting algorithms. </title> <journal> Acta Informatica, </journal> <month> 11 </month> <year> (1978) </year> <month> 1-30. </month>
Reference: [Dij76] <author> Dijkstra, </author> <title> E.W. A discipline of programming (Prentice-Hall Inc., </title> <address> New Jersey, </address> <year> 1976). </year> <editor> [vdE92] van den Eijnde, J.P.H.W. </editor> <title> Program derivation in acyclic graphs and related problems, </title> <booktitle> Computing Science Notes 92/04, </booktitle> <institution> Eindhoven University of Technology, </institution> <address> The Netherlands, </address> <year> 1992. </year>
Reference: [Fre60] <author> Fredkin, E. </author> <title> Trie memory, </title> <journal> Comm. ACM, </journal> <month> 3(9) </month> <year> (1960) </year> <month> 490-499. </month>
Reference: [HU79] <author> Hopcroft, J.E. and J.D. Ullman. </author> <title> Introduction to Automata, Theory, Languages, </title> <publisher> and Computation (Addison-Wesley Publishing Company, </publisher> <address> Reading, MA, </address> <year> 1979). </year>
Reference: [HS91] <author> Hume, S.C. and D. Sunday. </author> <title> Fast string searching, </title> <journal> Software|Practice and Experience, </journal> <note> 21 (11) (1991) 1221-1248. </note>
Reference-contexts: As seen from section 4 the BM algorithm can indeed be arrived at in the same framework (as the CW algorithm) as a special case. The publication of the Hume-Sunday taxonomy <ref> [HS91] </ref> motivated us to also derive the BM algorithm in an entirely different manner | making use of the concept of "match-orders". * In both papers by Commentz-Walter describing her algorithm (in particular [Com79a]), the differences between methods of determining a safe shift amount were not made explicit. <p> Until the publication of the taxonomy by <ref> [HS91] </ref> it was difficult to examine the contribution of each shift function. Both section 5 and [HS91] present a shift as consisting of components that can be readily replaced by an equivalent component, for example: the "skip" loops, or the "match-orders". [HS91] emphasized effects on running-time of each component. <p> Until the publication of the taxonomy by <ref> [HS91] </ref> it was difficult to examine the contribution of each shift function. Both section 5 and [HS91] present a shift as consisting of components that can be readily replaced by an equivalent component, for example: the "skip" loops, or the "match-orders". [HS91] emphasized effects on running-time of each component. <p> Until the publication of the taxonomy by <ref> [HS91] </ref> it was difficult to examine the contribution of each shift function. Both section 5 and [HS91] present a shift as consisting of components that can be readily replaced by an equivalent component, for example: the "skip" loops, or the "match-orders". [HS91] emphasized effects on running-time of each component. Our taxonomy has emphasized the derivation of each of these components from a common specification. * The precomputation of the BM shift functions has been troublesome; many solutions were published, corrected, and re-published (for a good bibliography of these see [Aho90]).
Reference: [Jon82] <author> Jonkers, H.B.M. </author> <title> Abstraction, specification and implementation techniques, </title> <type> Dissertation, </type> <institution> Eindhoven University of Technology, The Netherlands, </institution> <note> 1982; also MC-Tract 166, </note> <institution> Mathematical Center, </institution> <address> Amsterdam, The Netherlands, </address> <year> 1983. </year>
Reference: [KMP77] <author> Knuth, D.E., J.H. Morris and V.R. Pratt. </author> <title> Fast pattern matching in strings, </title> <journal> SIAM J. Comput. </journal> <month> 6(2) </month> <year> (1977) </year> <month> 323-350. </month>
Reference: [Mar90] <author> Marcelis, A.J.J.M. </author> <title> On the classification of attribute evaluation algorithms, </title> <booktitle> Science of Computer Programming 14 (1990) 1-24. </booktitle>
Reference: [Per90] <author> Perrin, D. </author> <title> Finite Automata, </title> <editor> in: J. van Leeuwen, ed., </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <volume> vol. </volume> <publisher> B (North-Holland, </publisher> <address> Amsterdam, </address> <year> 1990) </year> <month> 1-57. </month>
Reference: [RS59] <author> Rabin, M.O. and D. Scott. </author> <title> Finite automata and their decision problems, </title> <note> IBM Journal of Research 3(2) (1959) 115-125. </note>
Reference: [Ryt80] <author> Rytter, W. </author> <title> A correct preprocessing algorithm for Boyer-Moore string-searching, </title> <journal> SIAM J. Comput. </journal> <volume> 9(2) (1980) 509-512. </volume> <pages> 51 </pages>
References-found: 18

