URL: http://www.cs.orst.edu/~budd/vita/Sources/tr896011.ps
Refering-URL: http://www.csd.uu.se/projects/EFLIB/Documentation/Articles/BubbleCasting.html
Root-URL: 
Email: budd@cs.orst.edu  
Title: Generalized Arithmetic in C++  
Author: Timothy A. Budd 
Keyword: C++, Object Oriented Programming, Arithmetic, Polymorphism  
Date: September 20, 1994  
Address: Corvallis, Oregon 97331  
Affiliation: Department of Computer Science Oregon State University  
Abstract: A generalized arithmetic package allows a programmer to think of numbers as abstract quantities, without regard to whether they are represented as integers, floating point values, fractions, complex numbers, or even polynomials. In this paper we describe two implementation techniques that can be used to produce a generalized arithmetic package in the programming language C++, and evaluate the advantages and disadvantages of the two approaches. The second approach uses a technique called multiple polymorphism that has applicability to many other problem areas. 
Abstract-found: 1
Intro-found: 1
Reference: [Bud87] <author> Budd, Timothy A., </author> <title> "A Little Smalltalk", </title> <publisher> Addison-Wesley, </publisher> <year> 1987. </year>
Reference-contexts: This will then be followed by a comparison of the advantages and disadvantages of the two successful techniques. 2.1 Coercive Generality Coercive generality is the technique used by the Smalltalk-80 system described in the "blue book" [GoR84], and in the Little Smalltalk system <ref> [Bud87] </ref>. In this scheme each type of number is assigned a "generality index". Two numbers are of the same class if they have the same generality index. If not, the number with the lower generality index is modified (coerced) into being compatible with the number with the higher generality index.
Reference: [GoR84] <author> Goldberg, Adele and Robson, David, </author> <title> Smalltalk-80: The Language and Its Implementation, </title> <publisher> Addison-Wesley, </publisher> <year> 1984. </year>
Reference-contexts: This will then be followed by a comparison of the advantages and disadvantages of the two successful techniques. 2.1 Coercive Generality Coercive generality is the technique used by the Smalltalk-80 system described in the "blue book" <ref> [GoR84] </ref>, and in the Little Smalltalk system [Bud87]. In this scheme each type of number is assigned a "generality index". Two numbers are of the same class if they have the same generality index.
Reference: [Ing86] <author> Ingalls, Daniel H.H., </author> <title> A Simple Technique for Handling Multiple Polymorphism, </title> <journal> Sigplan Notices, </journal> <volume> Vol 21(11): </volume> <pages> 347-349, </pages> <month> November </month> <year> 1986. </year>
Reference-contexts: The techniques described, Coercive Generality and Double Polymorphism, are not limited to use only in arithmetic. Similar situations occur whenever dynamic lookup must be based on two or more arguments, rather than only a single receiver. Ingalls <ref> [Ing86] </ref>, for example, describes the display of multiple graphics objects on different display ports. 2 Generalized Arithmetic The abstract specifications for our generalized arithmetic package are easy to state. We want to define a class of objects, called Number, that can represent abstract quantities. <p> polynomials? The technique of Double Polymorphism, described in the next section, avoids the necessity of forming this linear ordering. 2.2 Double Polymorphism In a 1986 paper at the first OOPSLA (object oriented programming systems, languages and applications) conference, Daniel Ingalls presented an interesting technique for handling polymorphism in several variables <ref> [Ing86] </ref>. In simple terms, we make use of the automatic polymorphism facility implicit in message passing by making each argument, in turn, a receiver for a message and encoding the types of the remainder of the arguments in the message selector. <p> Nevertheless, there are situations where the more general facility is desirable. The utility of the double (or even multiple) polymorphism technique is not limited to its use with mixed mode arithmetic. As Ingalls describes in his original paper <ref> [Ing86] </ref>, it can be used any time you have arguments that can vary in two or more positions for a method, and the type of the arguments cannot be determined at compile time.
Reference: [Kee89] <author> Keene, S. E., </author> <title> Object-Oriented Programming in Common Lisp, </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year> <month> 12 </month>
Reference-contexts: Thus the technique is one that should be more widely known and used by programmers working in object oriented languages. 1 To the authors knowledge, only the object oriented language CLOS directly supports dynamic lookup based on two or more objects <ref> [Kee89] </ref>. 11 Acknowledgements A number of people provided useful comments on an earlier draft of this paper, these include Frank Griswold, Rajeev Pandey, Don Pardo and Bjarne Stroustrup. Jim Adcock pointed out the use of overloaded arguments instead of using multiple method names described in section 2.3.
References-found: 4

