URL: http://www.cs.caltech.edu/~heirich/speedup.ps
Refering-URL: http://www.cs.caltech.edu/~heirich/heirich.html
Root-URL: http://www.cs.caltech.edu
Email: heirich@caltech.edu  
Title: Some scaling effects in concurrent algorithms  
Author: Alan Heirich 
Date: August, 1994  
Affiliation: California Institute of Technology Computer Science Department  
Abstract: This note records some scaling effects observed in concurrent numerical algorithms. One effect causes a computation to become instantaneous (in principle) at large scales. These effects may be relevant to the design of large numerical calculations.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Amdahl, G. M. </author> <title> Validity of the single processor approach to achieving large scale computing capabilities. </title> <booktitle> AFIPS Conf. Proc. </booktitle> <year> (1967) </year> <month> 483-485. </month>
Reference-contexts: 1 Introduction The subjects of parallel speedup and scaling have populated three decades of discussion <ref> [1, 5, 7, 8, 11, 16] </ref>. This discussion, as well as a growing body of experience with massively parallel computing, demonstrates that there are substantial applications which can profitably scale to run on large numbers of computers.
Reference: [2] <author> Boillat, J. E. </author> <title> Load balancing and Poisson equation in a graph. </title> <institution> Concur-rency: Pract. Exp. </institution> <month> 2 </month> <year> (1990) </year> <month> 289-313. </month>
Reference-contexts: It has been proposed as a method to load balance massively parallel computer systems <ref> [2, 3, 4, 10, 14] </ref>.
Reference: [3] <author> Conley, A. J. </author> <title> Using a transfer function to describe the load balancing problem. </title> <note> Argonne National Laboratory report ANL-93/40 (1993). </note>
Reference-contexts: It has been proposed as a method to load balance massively parallel computer systems <ref> [2, 3, 4, 10, 14] </ref>.
Reference: [4] <author> Cybenko, G. </author> <title> Dynamic load balancing for distributed memory multiprocessors. </title> <journal> J. Par. Distrib. Comp. </journal> <month> 7 </month> <year> (1989) </year> <month> 279-301. </month>
Reference-contexts: It has been proposed as a method to load balance massively parallel computer systems <ref> [2, 3, 4, 10, 14] </ref>.
Reference: [5] <author> Faber, V., Lubeck, O. M. & White, A. B. </author> <title> Superlinear speedup of an efficient sequential algorithm is not possible. Par. </title> <booktitle> Comp. </booktitle> <month> 3 </month> <year> (1986) </year> <month> 259-260. </month>
Reference-contexts: 1 Introduction The subjects of parallel speedup and scaling have populated three decades of discussion <ref> [1, 5, 7, 8, 11, 16] </ref>. This discussion, as well as a growing body of experience with massively parallel computing, demonstrates that there are substantial applications which can profitably scale to run on large numbers of computers.
Reference: [6] <author> Gries, D. </author> <note> The Science of Programming. (1981) Springer-Verlag. A. Heirich | Draft 5 </note>
Reference: [7] <author> Gupta, A. & Kumar, V. </author> <title> Performance properties of large scale parallel systems. </title> <journal> J. Par. Dist. Comp. </journal> <month> 19 </month> <year> (1993) </year> <month> 234-244. </month>
Reference-contexts: 1 Introduction The subjects of parallel speedup and scaling have populated three decades of discussion <ref> [1, 5, 7, 8, 11, 16] </ref>. This discussion, as well as a growing body of experience with massively parallel computing, demonstrates that there are substantial applications which can profitably scale to run on large numbers of computers.
Reference: [8] <author> Gustafson, J. L. Reevaluating Amdahl's Law. </author> <note> Comm. ACM 31 (1987) 532-533. </note>
Reference-contexts: 1 Introduction The subjects of parallel speedup and scaling have populated three decades of discussion <ref> [1, 5, 7, 8, 11, 16] </ref>. This discussion, as well as a growing body of experience with massively parallel computing, demonstrates that there are substantial applications which can profitably scale to run on large numbers of computers.
Reference: [9] <author> Hackbusch, W. </author> <title> Multi-grid methods and applications. </title> <publisher> (1985) Springer-Verlag. </publisher>
Reference-contexts: For * equal to 10 5 this number is 11 when n is 16 and 13 when n is 64. This effect is recognized as significant in contemporary problems <ref> [9] </ref>. 4 Recursive search on scalable domains The advantages and disadvantages of recursive search are well known. In low dimensions convergence occurs exponentially fast as a function of the size of the domain. In high dimensions recursive subdivision can be expensive. <p> Algorithms for which memory requirements grow faster than algorithmic complexity execute instantaneously for problems of sufficient size. Subtler effects have had sufficient impact to spawn research in multigrid methods <ref> [9] </ref>. As massively parallel computers scale to increasing sizes these and other effects may become pronounced.
Reference: [10] <author> Heirich, A. </author> <title> Scalable load balancing by diffusion. </title> <institution> Caltech Computer Science Department Technical Report CS-TR-94-04 (1994). </institution>
Reference-contexts: It has been proposed as a method to load balance massively parallel computer systems <ref> [2, 3, 4, 10, 14] </ref>.
Reference: [11] <author> Helmbold, D. P. & McDowell, C. E. </author> <title> Modeling Speedup(n) greater than n. </title> <booktitle> Proc. 1989 Int. Conf. Par. Proc., </booktitle> <address> III-219 | III-225. </address>
Reference-contexts: 1 Introduction The subjects of parallel speedup and scaling have populated three decades of discussion <ref> [1, 5, 7, 8, 11, 16] </ref>. This discussion, as well as a growing body of experience with massively parallel computing, demonstrates that there are substantial applications which can profitably scale to run on large numbers of computers.
Reference: [12] <author> Hesselink, W. H. </author> <title> Programs, Recursion and Unbounded Choice. </title> <publisher> (1992) Cambridge University Press. </publisher>
Reference: [13] <author> Holmes, P.J. </author> <title> Domain of stability in a wind induced oscillation problem. </title> <journal> Tr. ASME J. Appl. Mech. </journal> <volume> 46, </volume> <month> 672-676 </month> <year> (1979). </year>
Reference: [14] <author> Horton, G. </author> <title> A multi-level diffusion method for dynamic load balancing. Par. </title> <booktitle> Comp. </booktitle> <month> 19 </month> <year> (1993) </year> <month> 209-218. </month>
Reference-contexts: It has been proposed as a method to load balance massively parallel computer systems <ref> [2, 3, 4, 10, 14] </ref>.
Reference: [15] <author> Lehmer, D. H. </author> <title> A machine method for solving polynomial equations. </title> <note> JACM 8 (1961) 151-162. </note>
Reference: [16] <author> Parkinson, D. </author> <title> Parallel efficiency can be greater than unity. Par. </title> <booktitle> Comp. </booktitle> <month> 3 </month> <year> (1986) </year> <month> 261-262. </month>
Reference-contexts: 1 Introduction The subjects of parallel speedup and scaling have populated three decades of discussion <ref> [1, 5, 7, 8, 11, 16] </ref>. This discussion, as well as a growing body of experience with massively parallel computing, demonstrates that there are substantial applications which can profitably scale to run on large numbers of computers.
Reference: [17] <author> Heirich, A. </author> <title> Poincare index search for fixed points of vector fields. </title> <note> posted on http://www.cs.caltech.edu/ ~ heirich/heirich.html (1994). </note>
Reference-contexts: In high dimensions recursive subdivision can be expensive. As dimensionality increases the cost of the search (measured by the volume of search area which must be considered) approaches the cost of exhaustive search. A related article <ref> [17] </ref> analyzes the complexity of one recursive search algorithm. An analysis of algorithmic complexity reveals the decreasing scaling A.
Reference: [18] <author> Vrahatis, M. N. </author> <title> Solving systems of nonlinear equations using the nonzero value of the topological degree. </title> <journal> ACM Tr. Math. Soft. </journal> <volume> 14 no. </volume> <month> 4 </month> <year> (1988). </year>
Reference: [19] <author> Wiggins, S. </author> <title> Introduction to Applied Nonlinear Dynamical Systems and Chaos. </title> <publisher> (1990) Springer-Verlag. </publisher>
References-found: 19

