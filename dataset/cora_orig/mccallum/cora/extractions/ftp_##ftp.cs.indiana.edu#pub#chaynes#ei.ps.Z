URL: ftp://ftp.cs.indiana.edu/pub/chaynes/ei.ps.Z
Refering-URL: http://www.cs.indiana.edu/eip/home.html
Root-URL: http://www.cs.indiana.edu
Title: CISE Educational Infrastructure: Tools and techniques for use of the Scheme programming language in Undergraduate Education  
Author: Christopher T. Haynes, R. Kent Dybvig, Daniel P. Friedman, LoriLee Sadler, George Springer 
Address: Summary  
Affiliation: Computer Science Department Indiana University  
Abstract: This award is for the development of curricular materials and software to support the use of the Scheme programming language (a modern Lisp dialect) in undergraduate computer science courses. The exceptional simplicity and power of Scheme that account for its widespread use in computer science research also explain its increasing use in education. To assist in the development and distribution of quality instructional material based on Scheme, a programming environment will be developed that is portable to a wide range of implementations and window systems. This programming environment will support graphic user interface development, hypertext authoring and delivery, object-oriented programming, and static type analysis, among other modes of programming and courseware development. Indiana University at Bloomington will investigate the use of Scheme in a variety of courses, including but not limited to introductory programming, programming languages, mathematical methods, data structures, and artificial intelligence. Teaching materials to be developed include computer assisted instruction courseware, outlines and visual aids for a variety of curricular options, laboratory manuals, and exercise sets including software support and solutions. Curricular knowledge, materials, and software will be disseminated through summer workshops, Internet, professional meetings, and publications. Evaluation instruments will assess the effectiveness of Scheme as a first programming language and the utility of the curricular materials developed by this project. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> The revised revised report on scheme, or an uncommon lisp. MIT AI Memo 848, Massachusetts Institute of Technology, </institution> <address> Cambridge, Mass., </address> <month> August </month> <year> 1985. </year>
Reference-contexts: implementations of Scheme [11] to one of the highest performance Scheme implementations [7], which has thousands of users in more than a dozen countries; * authored popular Scheme-based texts for introductory and programming languages courses [10, 12, 18]; * played a major role in the evolution and standardization of Scheme <ref> [1, 2, 3] </ref>; and * performed research on the design and implementation of Scheme and extensions of Scheme and used Scheme as a tool in a variety of other research, as demonstrated by over 35 refereed publications. <p> Wherever possible portability will be achieved using standard Scheme, defined by the IEEE/ANSI standard and the ongoing Revised Report series <ref> [1, 2] </ref>. Any extensions of standard Scheme that are thought to be essential for the purposes of this project will be carefully defined and well publicized.
Reference: [2] <institution> Revised 3 report on the algorithmic language scheme. ACM Sigplan Notices, </institution> <month> 21(12), December </month> <year> 1986. </year>
Reference-contexts: implementations of Scheme [11] to one of the highest performance Scheme implementations [7], which has thousands of users in more than a dozen countries; * authored popular Scheme-based texts for introductory and programming languages courses [10, 12, 18]; * played a major role in the evolution and standardization of Scheme <ref> [1, 2, 3] </ref>; and * performed research on the design and implementation of Scheme and extensions of Scheme and used Scheme as a tool in a variety of other research, as demonstrated by over 35 refereed publications. <p> Wherever possible portability will be achieved using standard Scheme, defined by the IEEE/ANSI standard and the ongoing Revised Report series <ref> [1, 2] </ref>. Any extensions of standard Scheme that are thought to be essential for the purposes of this project will be carefully defined and well publicized.
Reference: [3] <editor> IEEE Std 1178-1990. </editor> <title> Ieee Standard for the Scheme Programming Language. </title> <publisher> Institute of Electrical and Electronic Engineers, Inc., </publisher> <address> New York, NY, </address> <year> 1991. </year>
Reference-contexts: Educational users played a central role in the development of an IEEE and ANSI standard for Scheme <ref> [3] </ref>. A large number of Scheme implementations are available at moderate or no cost covering all popular hardware platforms. We identify, however, three difficulties that limit the wider and more effective use of Scheme in undergraduate education. 1. <p> implementations of Scheme [11] to one of the highest performance Scheme implementations [7], which has thousands of users in more than a dozen countries; * authored popular Scheme-based texts for introductory and programming languages courses [10, 12, 18]; * played a major role in the evolution and standardization of Scheme <ref> [1, 2, 3] </ref>; and * performed research on the design and implementation of Scheme and extensions of Scheme and used Scheme as a tool in a variety of other research, as demonstrated by over 35 refereed publications.
Reference: [4] <author> Harold Abelson, Gerald Jay Sussman, and Julie Sussman. </author> <title> Structure and Interpretation of Computer Programs. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1985. </year>
Reference-contexts: At MIT Abelson and Sussman designed a two semester introduction to computer science course based entirely on Scheme that is taken by most MIT undergraduates. The publication of this course's text <ref> [4] </ref> was a landmark in computer science education that has inspired many schools to use Scheme in a variety of courses. A recent survey identified 135 colleges and universities worldwide that are using Scheme for undergraduate instruction, of which 86 are in the United States [15]. <p> will be maintained (through matching funds) for at least three years after termination of the project to provide ongoing support to users throughout the country. 4 Curricular Development A number of texts support the use of Scheme in undergraduate computer science education, primarily in introductory programming and programming languages courses <ref> [4, 6, 8, 10, 12, 13, 17, 18] </ref>). There is a need, however, for supporting materials to make courses based on these and similar texts more effective. <p> This will make the use of Scheme easier and more effective by sharing the techniques and materials of experienced teachers. 2 2 A rich set of materials have already been developed for the MIT course using the Abelson and Sussman text <ref> [4] </ref>. This course has been highly successful with MIT students and some students elsewhere, but it is too engineering 6 We see great promise in the application of CAI techniques, augmented by hypertext, to Scheme--based instruction. <p> Further spread of Scheme-baed education around the world is also expected. Already both Friedman's The Little Lisper [10] and Abelson and Sussman's text <ref> [4] </ref> have been translated into French and Japanese. 11
Reference: [5] <author> R. Cartwright and M. Fagan. </author> <title> Soft typing. </title> <booktitle> In Proceedings of the the ACM SIGPLAN '91 Conf. on Prog. Lang. Design and Implementation, </booktitle> <pages> pages 278-292, </pages> <year> 1991. </year>
Reference-contexts: It is still possible, however, to catch many type errors via static analysis even in a dynamically typed language using "soft typeing" systems <ref> [5, 16] </ref>. The Scheme programming environment developed by this project will include such type analysis, based on recent research by a student in our department.
Reference: [6] <author> R. Kent Dybvig. </author> <title> The Scheme Programming Language. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1987. </year>
Reference-contexts: Almost half of these are using Scheme in their introductory course. (Twenty-two secondary schools using Scheme were also identified.) Several other Scheme-based introductory texts have been written for various types of students and curricular orientations <ref> [6, 8, 9, 10, 13, 17, 18] </ref>, as well as a text on programming language concepts [12]. Educational users played a central role in the development of an IEEE and ANSI standard for Scheme [3]. <p> will be maintained (through matching funds) for at least three years after termination of the project to provide ongoing support to users throughout the country. 4 Curricular Development A number of texts support the use of Scheme in undergraduate computer science education, primarily in introductory programming and programming languages courses <ref> [4, 6, 8, 10, 12, 13, 17, 18] </ref>). There is a need, however, for supporting materials to make courses based on these and similar texts more effective.
Reference: [7] <author> R. Kent Dybvig and Bruce T. Smith. </author> <title> Chez Scheme Reference Manual Version 1.0. </title> <institution> Cadence Research Systems, Bloomington, Indiana, </institution> <month> May </month> <year> 1985. </year>
Reference-contexts: We have * long experience with the development of Scheme systems, from one of the earliest widely used implementations of Scheme [11] to one of the highest performance Scheme implementations <ref> [7] </ref>, which has thousands of users in more than a dozen countries; * authored popular Scheme-based texts for introductory and programming languages courses [10, 12, 18]; * played a major role in the evolution and standardization of Scheme [1, 2, 3]; and * performed research on the design and implementation of
Reference: [8] <author> Michael Eisenberg. </author> <title> Programming in Scheme. </title> <publisher> The Scientific Press, </publisher> <address> Redwood City, CA, </address> <year> 1988. </year>
Reference-contexts: Almost half of these are using Scheme in their introductory course. (Twenty-two secondary schools using Scheme were also identified.) Several other Scheme-based introductory texts have been written for various types of students and curricular orientations <ref> [6, 8, 9, 10, 13, 17, 18] </ref>, as well as a text on programming language concepts [12]. Educational users played a central role in the development of an IEEE and ANSI standard for Scheme [3]. <p> will be maintained (through matching funds) for at least three years after termination of the project to provide ongoing support to users throughout the country. 4 Curricular Development A number of texts support the use of Scheme in undergraduate computer science education, primarily in introductory programming and programming languages courses <ref> [4, 6, 8, 10, 12, 13, 17, 18] </ref>). There is a need, however, for supporting materials to make courses based on these and similar texts more effective.
Reference: [9] <author> Iain Ferguson, Edward Martin, and Burt Kaufman. </author> <title> The Schemer's Guide. </title> <publisher> Schemers Inc., </publisher> <address> Fort Lauderdale, Florida, </address> <year> 1990. </year>
Reference-contexts: Almost half of these are using Scheme in their introductory course. (Twenty-two secondary schools using Scheme were also identified.) Several other Scheme-based introductory texts have been written for various types of students and curricular orientations <ref> [6, 8, 9, 10, 13, 17, 18] </ref>, as well as a text on programming language concepts [12]. Educational users played a central role in the development of an IEEE and ANSI standard for Scheme [3]. <p> We have already been influential in this regard: the Scheme-based programming languages text [12] is widely used in graduate as well as undergraduate courses, and a one day consultation with Friedman by high-school teachers inspired the development of a Scheme-based curriculum with its own text <ref> [9] </ref>. Further spread of Scheme-baed education around the world is also expected. Already both Friedman's The Little Lisper [10] and Abelson and Sussman's text [4] have been translated into French and Japanese. 11
Reference: [10] <author> Daniel P. Friedman and Matthias Felleisen. </author> <title> The Little LISPer. </title> <publisher> MIT Press, </publisher> <year> 1987. </year>
Reference-contexts: Almost half of these are using Scheme in their introductory course. (Twenty-two secondary schools using Scheme were also identified.) Several other Scheme-based introductory texts have been written for various types of students and curricular orientations <ref> [6, 8, 9, 10, 13, 17, 18] </ref>, as well as a text on programming language concepts [12]. Educational users played a central role in the development of an IEEE and ANSI standard for Scheme [3]. <p> long experience with the development of Scheme systems, from one of the earliest widely used implementations of Scheme [11] to one of the highest performance Scheme implementations [7], which has thousands of users in more than a dozen countries; * authored popular Scheme-based texts for introductory and programming languages courses <ref> [10, 12, 18] </ref>; * played a major role in the evolution and standardization of Scheme [1, 2, 3]; and * performed research on the design and implementation of Scheme and extensions of Scheme and used Scheme as a tool in a variety of other research, as demonstrated by over 35 refereed <p> will be maintained (through matching funds) for at least three years after termination of the project to provide ongoing support to users throughout the country. 4 Curricular Development A number of texts support the use of Scheme in undergraduate computer science education, primarily in introductory programming and programming languages courses <ref> [4, 6, 8, 10, 12, 13, 17, 18] </ref>). There is a need, however, for supporting materials to make courses based on these and similar texts more effective. <p> This course has been highly successful with MIT students and some students elsewhere, but it is too engineering 6 We see great promise in the application of CAI techniques, augmented by hypertext, to Scheme--based instruction. The continued popularity of The Little Lisper <ref> [10] </ref> indicates the value of its programmed learning style for mastering such abstract concepts as recursion. Many students have found this approach, if diligently pursued, provides facility with recursion when other approaches have failed. <p> Further spread of Scheme-baed education around the world is also expected. Already both Friedman's The Little Lisper <ref> [10] </ref> and Abelson and Sussman's text [4] have been translated into French and Japanese. 11
Reference: [11] <author> Daniel P. Friedman, Christopher T. Haynes, Eugene E. Kohlbecker, and Mitchell Wand. </author> <title> Scheme 84 interim reference manual. </title> <institution> Computer Science Technical Report 153, Indiana University, Bloomington, Indiana, </institution> <month> January </month> <year> 1985. </year>
Reference-contexts: We have * long experience with the development of Scheme systems, from one of the earliest widely used implementations of Scheme <ref> [11] </ref> to one of the highest performance Scheme implementations [7], which has thousands of users in more than a dozen countries; * authored popular Scheme-based texts for introductory and programming languages courses [10, 12, 18]; * played a major role in the evolution and standardization of Scheme [1, 2, 3]; and
Reference: [12] <author> Daniel P. Friedman, Mitchell Wand, and Christopher T. Haynes. </author> <title> Essentials of Programming Languages. </title> <publisher> MIT Press and McGraw-Hill, </publisher> <year> 1992. </year>
Reference-contexts: half of these are using Scheme in their introductory course. (Twenty-two secondary schools using Scheme were also identified.) Several other Scheme-based introductory texts have been written for various types of students and curricular orientations [6, 8, 9, 10, 13, 17, 18], as well as a text on programming language concepts <ref> [12] </ref>. Educational users played a central role in the development of an IEEE and ANSI standard for Scheme [3]. A large number of Scheme implementations are available at moderate or no cost covering all popular hardware platforms. <p> long experience with the development of Scheme systems, from one of the earliest widely used implementations of Scheme [11] to one of the highest performance Scheme implementations [7], which has thousands of users in more than a dozen countries; * authored popular Scheme-based texts for introductory and programming languages courses <ref> [10, 12, 18] </ref>; * played a major role in the evolution and standardization of Scheme [1, 2, 3]; and * performed research on the design and implementation of Scheme and extensions of Scheme and used Scheme as a tool in a variety of other research, as demonstrated by over 35 refereed <p> will be maintained (through matching funds) for at least three years after termination of the project to provide ongoing support to users throughout the country. 4 Curricular Development A number of texts support the use of Scheme in undergraduate computer science education, primarily in introductory programming and programming languages courses <ref> [4, 6, 8, 10, 12, 13, 17, 18] </ref>). There is a need, however, for supporting materials to make courses based on these and similar texts more effective. <p> Initially this project will develop materials to support two courses with which we have extensive experience: an introduction to computer science and programming course and a course on the principles of programming languages. While our texts <ref> [12, 18] </ref> have proved valuable in these courses, success requires a high degree of commitment on the part of both instructor and student. The materials produced by this project should make a transition to this new material much easier for instructors and enhance student motivation. <p> In the latter course we have in mind using Scheme to provide an eligantly structured proof checker, rewrite system for natural deduction, lambda calculus evaluator <ref> [12] </ref>, and verification condition generator. <p> We have already been influential in this regard: the Scheme-based programming languages text <ref> [12] </ref> is widely used in graduate as well as undergraduate courses, and a one day consultation with Friedman by high-school teachers inspired the development of a Scheme-based curriculum with its own text [9]. Further spread of Scheme-baed education around the world is also expected.
Reference: [13] <author> Brian Harvey. </author> <title> Symbolic Introduction to Programming or Scheme: The Prequel. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1993, </year> <note> to appear. </note>
Reference-contexts: Almost half of these are using Scheme in their introductory course. (Twenty-two secondary schools using Scheme were also identified.) Several other Scheme-based introductory texts have been written for various types of students and curricular orientations <ref> [6, 8, 9, 10, 13, 17, 18] </ref>, as well as a text on programming language concepts [12]. Educational users played a central role in the development of an IEEE and ANSI standard for Scheme [3]. <p> will be maintained (through matching funds) for at least three years after termination of the project to provide ongoing support to users throughout the country. 4 Curricular Development A number of texts support the use of Scheme in undergraduate computer science education, primarily in introductory programming and programming languages courses <ref> [4, 6, 8, 10, 12, 13, 17, 18] </ref>). There is a need, however, for supporting materials to make courses based on these and similar texts more effective.
Reference: [14] <author> Christopher T. Haynes. Infer: </author> <title> A statically-typed dialect of scheme. </title> <type> Technical Report 367, </type> <institution> Computer Science Department, Indiana University, Bloomington, Indiana, </institution> <month> October </month> <year> 1992. </year>
Reference-contexts: To make the advantages of strong typing accessible in a programming language that is as similar as possible to Scheme in other respects, we are developing a dialect of Scheme, called Infer, that supports ML-style polymorphic type-inference <ref> [14] </ref>. The preliminary design and implementation of Infer is nearing completion. Early versions of Infer have been used in research and a graduate level programming language course at Indiana University, as well as for the implementation of Infer itself (which at present compiles Infer programs into Scheme programs).
Reference: [15] <author> Terry Kaufman. </author> <title> Scheme digest. </title> <note> posted to comp.lang.scheme Internet newsgroup, </note> <month> February </month> <year> 1993. </year>
Reference-contexts: A recent survey identified 135 colleges and universities worldwide that are using Scheme for undergraduate instruction, of which 86 are in the United States <ref> [15] </ref>. Prominent examples include Berkeley, Brandeis, Columbia, Johns Hopkins, MIT, Northeastern, Northwestern, Oberlin, Penn State, Princton, Rice, Stanford, Swarthmore, Syracuse, UCLA, U. of Chicago, U. of Illinois, U. of Massachussetts, U. of Wisconsin at Madison, U. of Utah, Wesleyan, and Yale.
Reference: [16] <author> Olin Shivers. </author> <title> Control flow analysis in scheme. </title> <booktitle> In Proceedings of the Sigplan 1988 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 164-174, </pages> <address> Atlanta, Georgia, </address> <month> June </month> <year> 1988. </year>
Reference-contexts: It is still possible, however, to catch many type errors via static analysis even in a dynamically typed language using "soft typeing" systems <ref> [5, 16] </ref>. The Scheme programming environment developed by this project will include such type analysis, based on recent research by a student in our department.
Reference: [17] <author> Jerry D. Smith. </author> <title> An Introduction to Scheme. </title> <publisher> Prentice Hall, Inc., </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1988. </year>
Reference-contexts: Almost half of these are using Scheme in their introductory course. (Twenty-two secondary schools using Scheme were also identified.) Several other Scheme-based introductory texts have been written for various types of students and curricular orientations <ref> [6, 8, 9, 10, 13, 17, 18] </ref>, as well as a text on programming language concepts [12]. Educational users played a central role in the development of an IEEE and ANSI standard for Scheme [3]. <p> will be maintained (through matching funds) for at least three years after termination of the project to provide ongoing support to users throughout the country. 4 Curricular Development A number of texts support the use of Scheme in undergraduate computer science education, primarily in introductory programming and programming languages courses <ref> [4, 6, 8, 10, 12, 13, 17, 18] </ref>). There is a need, however, for supporting materials to make courses based on these and similar texts more effective.
Reference: [18] <author> George Springer and Daniel P. Friedman. </author> <title> Scheme and the Art of Programming. </title> <publisher> MIT Press and McGraw-Hill, </publisher> <year> 1989. </year>
Reference-contexts: Almost half of these are using Scheme in their introductory course. (Twenty-two secondary schools using Scheme were also identified.) Several other Scheme-based introductory texts have been written for various types of students and curricular orientations <ref> [6, 8, 9, 10, 13, 17, 18] </ref>, as well as a text on programming language concepts [12]. Educational users played a central role in the development of an IEEE and ANSI standard for Scheme [3]. <p> long experience with the development of Scheme systems, from one of the earliest widely used implementations of Scheme [11] to one of the highest performance Scheme implementations [7], which has thousands of users in more than a dozen countries; * authored popular Scheme-based texts for introductory and programming languages courses <ref> [10, 12, 18] </ref>; * played a major role in the evolution and standardization of Scheme [1, 2, 3]; and * performed research on the design and implementation of Scheme and extensions of Scheme and used Scheme as a tool in a variety of other research, as demonstrated by over 35 refereed <p> will be maintained (through matching funds) for at least three years after termination of the project to provide ongoing support to users throughout the country. 4 Curricular Development A number of texts support the use of Scheme in undergraduate computer science education, primarily in introductory programming and programming languages courses <ref> [4, 6, 8, 10, 12, 13, 17, 18] </ref>). There is a need, however, for supporting materials to make courses based on these and similar texts more effective. <p> Initially this project will develop materials to support two courses with which we have extensive experience: an introduction to computer science and programming course and a course on the principles of programming languages. While our texts <ref> [12, 18] </ref> have proved valuable in these courses, success requires a high degree of commitment on the part of both instructor and student. The materials produced by this project should make a transition to this new material much easier for instructors and enhance student motivation.
Reference: [19] <author> Gerald Jay Sussman and Guy Lewis Steele Jr. </author> <title> Scheme: an interpreter for extended lambda calculus. MIT AI Memo 349, </title> <institution> Massachusetts Institute of Technology, </institution> <address> Cambridge, Mass., </address> <month> December </month> <year> 1975. </year>
Reference-contexts: 1 Introduction The Scheme programming language was initially designed at MIT to support research in programming languages <ref> [19] </ref>. The same remarkable combination of simplicity and power that has made Scheme one of the most popular research languages also makes it an excellent language for instruction. One of the earliest instructional uses of Scheme was in Friedman's undergraduate course in programming languages at Indiana University.
References-found: 19

