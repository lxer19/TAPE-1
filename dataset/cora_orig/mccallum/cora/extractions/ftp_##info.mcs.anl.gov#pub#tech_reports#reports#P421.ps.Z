URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/P421.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/abstracts/abstracts94.htm
Root-URL: http://www.mcs.anl.gov
Title: PARALLEL ALGORITHMS FOR ADAPTIVE MESH REFINEMENT  
Author: MARK T. JONES AND PAUL E. PLASSMANN 
Abstract: Computational methods based on the use of adaptively constructed nonuniform meshes reduce the amount of computation and storage necessary to perform many scientific calculations. The adaptive construction of such nonuniform meshes is an important part of these methods. In this paper, we present a parallel algorithm for adaptive mesh refinement that is suitable for implementation on distributed-memory parallel computers. Experimental results obtained on the Intel DELTA are presented to demonstrate that, for scientific computations involving the finite element method, the algorithm exhibits scalable performance and has a small run time in comparison with other aspects of the scientific computations examined. It is also shown that the algorithm has a fast expected running time under the P-RAM computation model. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> I. Babu ska and A. K. Aziz, </author> <title> On the angle condition in the finite element method, </title> <journal> SIAM Journal of Numerical Analysis, </journal> <volume> 13 (1976), </volume> <pages> pp. 214-226. </pages>
Reference-contexts: A final requirement is that all angles in the mesh be bounded away from 0 and . The latter condition is necessary because the discretization error in a finite element approximation has been shown to grow as the maximum angle approaches <ref> [1] </ref>. We would like to avoid small angles because the condition number of the matrices arising from mesh elements has been shown to grow as O ( 1 min ), where min is the smallest angle in the mesh [4]. 2.1. Related Work.
Reference: [2] <author> R. E. Bank, PLTMG: </author> <title> A Software Package for Solving Elliptic Partial Differential Equations. Users' Guide 6.0, </title> <publisher> SIAM Publications, </publisher> <address> Philadelphia, Penn., </address> <year> 1990. </year>
Reference-contexts: Fig. 3. On the left, a triangle divided with bisection; on the right, a triangle divided by using regular refinement The regular refinement algorithm of Bank, Sherman, and Weiser [3] has been used very successfully in the software package PLTMG <ref> [2] </ref>. Triangles are divided by using regular refinement and temporary bisections of selected triangles to make the mesh conforming. The bisected triangles are merged before the mesh is refined again.
Reference: [3] <author> R. E. Bank, A. H. Sherman, and A. Weiser, </author> <title> Refinement algorithms and data structures for regular local mesh refinement, in Scientific Computing, </title> <editor> R. Stepleman et al., ed., </editor> <publisher> IMACS/North-Holland Publishing Company, </publisher> <address> Amsterdam, </address> <year> 1983, </year> <pages> pp. 3-17. </pages>
Reference-contexts: The adaptive construction of these nonuniform meshes is a crucial part of adaptive mesh solution methods and has been examined by many researchers, for example, <ref> [3] </ref>, [10], [11], [12], [13], [14], [15], [16], and [18]. Typically, one begins with an initial mesh conforming to a particular geometry. This mesh is selectively refined, based on local error estimates, to construct a mesh that satisfies a certain error tolerance. <p> Fig. 3. On the left, a triangle divided with bisection; on the right, a triangle divided by using regular refinement The regular refinement algorithm of Bank, Sherman, and Weiser <ref> [3] </ref> has been used very successfully in the software package PLTMG [2]. Triangles are divided by using regular refinement and temporary bisections of selected triangles to make the mesh conforming. The bisected triangles are merged before the mesh is refined again.
Reference: [4] <author> I. Fried, </author> <title> Condition of finite element matrices generated from nonuniform meshes, </title> <journal> AIAA Journal, </journal> <volume> 10 (1972), </volume> <pages> pp. 219-221. </pages>
Reference-contexts: We would like to avoid small angles because the condition number of the matrices arising from mesh elements has been shown to grow as O ( 1 min ), where min is the smallest angle in the mesh <ref> [4] </ref>. 2.1. Related Work. A number of mesh refinement algorithms have been shown to maintain the mesh properties given above. In this section we briefly review the three most widely used of these refinement methods.
Reference: [5] <author> W. D. Gropp and B. F. Smith, </author> <title> Users Manual for Chameleon Parallel Programming Tools, </title> <type> ANL Report ANL-93/23, </type> <institution> Argonne National Laboratory, Argonne, Ill., </institution> <year> 1993. </year>
Reference-contexts: The parallel refinement algorithm is implemented as a subroutine library that can be called by an application program. Chameleon <ref> [5] </ref> is used to achieve portability across several architectures, including the Intel DELTA, which is the focus of this section. Note that in addition to the refinement algorithm, the subroutine library also includes a similarly constructed, parallel unrefinement algorithm.
Reference: [6] <author> M. T. Jones and P. E. Plassmann, </author> <title> BlockSolve v1.0: Scalable library software for the parallel solution of sparse linear systems, </title> <type> ANL Report ANL-92/46, </type> <institution> Argonne National Laboratory, Argonne, Ill., </institution> <year> 1992. </year> <title> [7] , A parallel graph coloring heuristic, </title> <journal> SIAM Journal on Scientific Computing, </journal> <volume> 14 (1993), </volume> <pages> pp. </pages> <month> 654-669. </month> <title> [8] , Parallel algorithms for the adaptive refinement and partitioning of unstructured meshes, </title> <booktitle> in Proceedings of the 1994 SHPCC, IEEE, </booktitle> <year> 1994, </year> <pages> pp. </pages> <month> 726-733. </month> <title> [9] , Computational results for parallel unstructured mesh computations, </title> <note> International Journal of Computing Systems in Engineering (to appear). </note>
Reference-contexts: This movement requires significant mesh re-finement around the new charge position and definement around the old position while the remainder of the mesh remains relatively constant. The parallel conjugate gradient method preconditioned by an incomplete factorization is used to solve the sparse linear systems that arise <ref> [6] </ref>.
Reference: [10] <author> W. F. Mitchell, </author> <title> A comparison of adaptive refinement techniques for elliptic problems, </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> 15 (1989), </volume> <pages> pp. 326-347. </pages>
Reference-contexts: 1. Introduction. Adaptive mesh refinement techniques have been shown to be very successful in reducing the computational and storage requirements for solving many partial differential equations <ref> [10] </ref>. Rather than use a uniform mesh with grid points evenly spaced on a domain, adaptive mesh refinement techniques place more grid points in areas where the local error in the solution is large. <p> The adaptive construction of these nonuniform meshes is a crucial part of adaptive mesh solution methods and has been examined by many researchers, for example, [3], <ref> [10] </ref>, [11], [12], [13], [14], [15], [16], and [18]. Typically, one begins with an initial mesh conforming to a particular geometry. This mesh is selectively refined, based on local error estimates, to construct a mesh that satisfies a certain error tolerance. <p> A framework for the adaptive solution of PDEs 2 Consider the general adaptive mesh algorithm <ref> [10] </ref> shown in Figure 1. We begin by assuming that we have an initial element mesh given by the triangulation T 0 consistent with the geometry of the problem domain. <p> A detailed discussion of this algorithm is given in the following subsection. The newest-node algorithm of Sewell is also based on bisection, but without the restriction on bisecting the longest edge <ref> [10] </ref>. In this algorithm, a triangle is always bisected by using its newest node. The propagation inherent in the bisection and regular refinement algorithms is avoided by refining triangles only in pairs. <p> The propagation inherent in the bisection and regular refinement algorithms is avoided by refining triangles only in pairs. However, because of the pair restriction, it is possible that a triangle may never be able to be refined. In the experiments run by Mitchell <ref> [10] </ref>, this difficulty did not arise. Mitchell compared these three methods in a series of numerical experiments and found that it was difficult to choose a consistently superior algorithm [10]. In addition, he found that all three methods were superior to using uniform refinement except on smooth problems. <p> In the experiments run by Mitchell <ref> [10] </ref>, this difficulty did not arise. Mitchell compared these three methods in a series of numerical experiments and found that it was difficult to choose a consistently superior algorithm [10]. In addition, he found that all three methods were superior to using uniform refinement except on smooth problems. <p> The function f (x) is a Gaussian charge distribution centered at a point (S x ; S y ) inside the domain. The mesh is selectively refined according to the energy norm <ref> [10] </ref> until the estimate of the local error on each triangle is less than a specified tolerance. Further, the point (S x ; S y ) is moved several times, and a new solution/mesh is 14 found from the old solution/mesh.
Reference: [11] <author> R. V. Nambiar, R. S. Valera, K. L. Lawrence, R. B. Morgan, and D. Amil, </author> <title> An algorithm for adaptive refinement of triangular element meshes, International Journal for Numerical Methods in Engineering, </title> <booktitle> 36 (1993), </booktitle> <pages> pp. 499-509. </pages>
Reference-contexts: The adaptive construction of these nonuniform meshes is a crucial part of adaptive mesh solution methods and has been examined by many researchers, for example, [3], [10], <ref> [11] </ref>, [12], [13], [14], [15], [16], and [18]. Typically, one begins with an initial mesh conforming to a particular geometry. This mesh is selectively refined, based on local error estimates, to construct a mesh that satisfies a certain error tolerance.
Reference: [12] <author> W. C. Rheinboldt and C. K. Mesztenyi, </author> <title> On a data structure for adaptive finite element mesh refinements, </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> 6 (1980), </volume> <pages> pp. 166-187. </pages>
Reference-contexts: The adaptive construction of these nonuniform meshes is a crucial part of adaptive mesh solution methods and has been examined by many researchers, for example, [3], [10], [11], <ref> [12] </ref>, [13], [14], [15], [16], and [18]. Typically, one begins with an initial mesh conforming to a particular geometry. This mesh is selectively refined, based on local error estimates, to construct a mesh that satisfies a certain error tolerance.
Reference: [13] <author> M.-C. Rivara, </author> <title> Algorithms for refining triangular grids suitable for adaptive and multigrid techniques, International Journal for Numerical Methods in Engineering, </title> <booktitle> 20 (1984), </booktitle> <pages> pp. </pages> <month> 745-756. </month> <title> [14] , Design and data structure of fully adaptive, multigrid, finite-element software, </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> 10 (1984), </volume> <pages> pp. </pages> <month> 242-264. </month> <title> [15] , Mesh refinement processes based on the generalized bisection of simplices, </title> <journal> SIAM Journal of Numerical Analysis, </journal> <volume> 21 (1984), </volume> <pages> pp. </pages> <month> 604-613. </month> <title> [16] , Selective refinement/derefinement algorithms for sequences of nested triangulations, International Journal for Numerical Methods in Engineering, </title> <booktitle> 28 (1989), </booktitle> <pages> pp. 2889-2906. </pages>
Reference-contexts: The adaptive construction of these nonuniform meshes is a crucial part of adaptive mesh solution methods and has been examined by many researchers, for example, [3], [10], [11], [12], <ref> [13] </ref>, [14], [15], [16], and [18]. Typically, one begins with an initial mesh conforming to a particular geometry. This mesh is selectively refined, based on local error estimates, to construct a mesh that satisfies a certain error tolerance.
Reference: [17] <author> I. G. Rosenberg and F. Stenger, </author> <title> A lower bound on the angles of triangles constructed by bisecting the longest side, </title> <journal> Mathematics of Computation, </journal> <volume> 29 (1975), </volume> <pages> pp. 390-395. </pages>
Reference-contexts: This approach has been shown to yield triangulations, T k , whose smallest angle is bounded by at worst one-half the smallest angle in T 0 <ref> [17] </ref>. A detailed discussion of this algorithm is given in the following subsection. The newest-node algorithm of Sewell is also based on bisection, but without the restriction on bisecting the longest edge [10]. In this algorithm, a triangle is always bisected by using its newest node.
Reference: [18] <author> E. G. Sewell, </author> <title> A finite element program with automatic user-controlled mesh grading, in Advances in Computer Methods for Partial Differential Equations III, </title> <editor> R. Stepleman, ed., </editor> <booktitle> IMACS, </booktitle> <address> New Brunswick, </address> <year> 1979, </year> <pages> pp. 8-10. </pages>
Reference-contexts: The adaptive construction of these nonuniform meshes is a crucial part of adaptive mesh solution methods and has been examined by many researchers, for example, [3], [10], [11], [12], [13], [14], [15], [16], and <ref> [18] </ref>. Typically, one begins with an initial mesh conforming to a particular geometry. This mesh is selectively refined, based on local error estimates, to construct a mesh that satisfies a certain error tolerance.
Reference: [19] <author> R. Williams, </author> <title> A dynamic solution-adaptive unstructured parallel solver, Report CCSF-21-92, Caltech Concurrent Supercomputing Facilities, </title> <institution> California Institute of Technology, Pasadena, Calif., </institution> <year> 1992. </year> <month> 23 </month>
Reference-contexts: We note, however, that our algorithms are applicable to all three algorithms. In addition, only 4 a simple modification to our parallel implementation is required to implement the newest-node algorithm. We note that Williams <ref> [19] </ref> has developed a voxel database approach to the parallel mesh refinement problem. Our approach, which we present in the following section, differs from his approach in that we have explicit parallel runtime bounds.
References-found: 13

