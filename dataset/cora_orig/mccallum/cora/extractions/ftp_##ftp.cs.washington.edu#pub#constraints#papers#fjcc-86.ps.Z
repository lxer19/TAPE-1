URL: ftp://ftp.cs.washington.edu/pub/constraints/papers/fjcc-86.ps.Z
Refering-URL: http://www.cs.washington.edu/research/constraints/object-oriented/fjcc-86.html
Root-URL: 
Title: Classes versus Prototypes in Object-Oriented Languages  
Author: Alan Borning 
Abstract: Smalltalk uses classes to describe the common properties of related objects. Unfortunately, the use of classes and metaclasses is the source of a number of complications. This paper discusses prototypes as an alternative to classes and metaclasses. In a prototype-based language, copying rather than instantiation is the mechanism provided to the user for making new objects. Inheritance constraints are proposed as a way of representing object hierarchies and supporting the automatic updating of related objects when edits are made.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Alan Borning. </author> <title> ThingLab|A Constraint-Oriented Simulation Laboratory. </title> <type> PhD thesis, </type> <institution> Stanford, </institution> <month> March </month> <year> 1979. </year> <note> A revised version is published as Xerox Palo Alto Research Center Report SSL-79-3 (July 1979). </note>
Reference-contexts: Many of the ideas used here have arisen from the author's work on constraint-oriented languages and systems <ref> [1, 2, 3] </ref>, where a constraint describes a relation that must hold. In this proposal, constraints are used to express inheritance relations among objects. However, the set of inheritance constraints used here is limited and straightforward to maintain, and a general-purpose constraint representation and satisfaction mechanism is not required. <p> In such applications, prototypes are more useful than classes, since it is more straightforward to display them for viewing and manipulation by the user; their concreteness also makes them valuable for less experienced users. Examples of systems of this sort that have been built in Smalltalk include ThingLab <ref> [1, 2] </ref>, Programming by Rehearsal [9, 10], the Alternate Reality Kit [16], and Animus [5, 6]. Languages in the Actor family are general-purpose programming languages that use prototypes.
Reference: [2] <author> Alan Borning. </author> <title> The programming language aspects of ThingLab, a constraint-oriented simulation laboratory. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 3(4) </volume> <pages> 353-387, </pages> <month> October </month> <year> 1981. </year>
Reference-contexts: Many of the ideas used here have arisen from the author's work on constraint-oriented languages and systems <ref> [1, 2, 3] </ref>, where a constraint describes a relation that must hold. In this proposal, constraints are used to express inheritance relations among objects. However, the set of inheritance constraints used here is limited and straightforward to maintain, and a general-purpose constraint representation and satisfaction mechanism is not required. <p> In such applications, prototypes are more useful than classes, since it is more straightforward to display them for viewing and manipulation by the user; their concreteness also makes them valuable for less experienced users. Examples of systems of this sort that have been built in Smalltalk include ThingLab <ref> [1, 2] </ref>, Programming by Rehearsal [9, 10], the Alternate Reality Kit [16], and Animus [5, 6]. Languages in the Actor family are general-purpose programming languages that use prototypes.
Reference: [3] <author> Alan Borning. </author> <title> Constraints and functional programming. </title> <booktitle> In Proceedings of the Sixth Annual IEEE Phoenix Conference on Computers and Communications, </booktitle> <pages> pages 300-306, </pages> <address> Scottsdale, Ari-zona, </address> <month> February </month> <year> 1987. </year> <note> IEEE. </note>
Reference-contexts: Many of the ideas used here have arisen from the author's work on constraint-oriented languages and systems <ref> [1, 2, 3] </ref>, where a constraint describes a relation that must hold. In this proposal, constraints are used to express inheritance relations among objects. However, the set of inheritance constraints used here is limited and straightforward to maintain, and a general-purpose constraint representation and satisfaction mechanism is not required.
Reference: [4] <author> Alan Borning and Danial H. H. Ingalls. </author> <title> Multiple inheritance in smalltalk-80. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <pages> pages 234-237, </pages> <address> Pittsburgh, Pennsylvania, </address> <month> August </month> <year> 1982. </year> <journal> American Association for Artificial Intelligence. </journal>
Reference-contexts: However, this problem arises 5 equally in class-based systems, and the same sorts of choices are applicable. For simplicity, for the present the rules described in the Smalltalk multiple inheritance implementation <ref> [4] </ref> are to be used. 4 Evaluation In this section, a (doubtless biased) listing of the benefits and drawbacks of the proposed scheme as opposed to that in the standard Smalltalk-80 language is presented. 4.1 Benefits Some benefits of this scheme over the current one are: * The initial explanation of
Reference: [5] <author> Robert Duisberg. Animus: </author> <title> A constraint based animation system. </title> <booktitle> In CHI'86 Proceedings, </booktitle> <pages> pages 131-136, </pages> <address> Boston, </address> <month> April </month> <year> 1986. </year>
Reference-contexts: Examples of systems of this sort that have been built in Smalltalk include ThingLab [1, 2], Programming by Rehearsal [9, 10], the Alternate Reality Kit [16], and Animus <ref> [5, 6] </ref>. Languages in the Actor family are general-purpose programming languages that use prototypes.
Reference: [6] <author> Robert A. Duisberg. </author> <title> Constraint-Based Animation: The Implementation of Temporal Constraints in the Animus System. </title> <type> PhD thesis, </type> <institution> University of Washington, </institution> <year> 1986. </year> <note> Published as UW Computer Science Department Technical Report No. 86-09-01. </note>
Reference-contexts: Examples of systems of this sort that have been built in Smalltalk include ThingLab [1, 2], Programming by Rehearsal [9, 10], the Alternate Reality Kit [16], and Animus <ref> [5, 6] </ref>. Languages in the Actor family are general-purpose programming languages that use prototypes.
Reference: [7] <author> R. Fikes and T. Kehler. </author> <title> The role of frame-based reasoning in representation. </title> <journal> Communications of the ACM, </journal> <volume> 28(9) </volume> <pages> 904-920, </pages> <month> September </month> <year> 1985. </year>
Reference-contexts: In Biggertalk [11], an object-oriented language implemented in Prolog, instances are like classes in all respects, except that they cannot be further refined. Finally, prototypes are often used in artificial intelligence representation languages <ref> [7] </ref> to store default or typical information. The language proposed in Section 2 does not include type declarations. However, if type declarations were to be added, protocols would be the logical entity to use in the declaration and checking of type.
Reference: [8] <author> Adele Goldberg and David Robson. </author> <title> Smalltalk-80: The Language and its Implementation. </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year>
Reference-contexts: 1 Introduction The Smalltalk-80 language <ref> [8] </ref>, as well as a number of other object-oriented languages, uses classes to describe the common properties of related objects. Unfortunately, classes and the class-instance relation are the source of a number of complications.
Reference: [9] <author> Laura Gould and William Finzer. </author> <title> Programming by rehearsal. </title> <type> Technical Report SCL-84-1, </type> <institution> Xerox Palo Alto Research Center, </institution> <month> May </month> <year> 1984. </year>
Reference-contexts: Examples of systems of this sort that have been built in Smalltalk include ThingLab [1, 2], Programming by Rehearsal <ref> [9, 10] </ref>, the Alternate Reality Kit [16], and Animus [5, 6]. Languages in the Actor family are general-purpose programming languages that use prototypes.
Reference: [10] <author> Laura Gould and William Finzer. </author> <title> Programming by rehearsal. </title> <journal> Byte, </journal> <volume> 9(6) </volume> <pages> 187-210, </pages> <month> June </month> <year> 1984. </year>
Reference-contexts: Examples of systems of this sort that have been built in Smalltalk include ThingLab [1, 2], Programming by Rehearsal <ref> [9, 10] </ref>, the Alternate Reality Kit [16], and Animus [5, 6]. Languages in the Actor family are general-purpose programming languages that use prototypes.
Reference: [11] <author> E. Gullichsen. Biggertalk: </author> <title> Object-oriented prolog. </title> <type> Technical Report STP-125-85, </type> <institution> MCC, </institution> <month> Novem-ber </month> <year> 1985. </year>
Reference-contexts: LaLonde [12] describes an exemplar-based Smalltalk (an exemplar is the same as a prototype); this language allows a given class to have multiple exemplars, an idea that has been borrowed and used in the design described here. In Biggertalk <ref> [11] </ref>, an object-oriented language implemented in Prolog, instances are like classes in all respects, except that they cannot be further refined. Finally, prototypes are often used in artificial intelligence representation languages [7] to store default or typical information. The language proposed in Section 2 does not include type declarations.
Reference: [12] <author> W. R. LaLonde, D.A. Thomas, and J. R. Pugh. </author> <title> An exemplar based smalltalk. </title> <type> Technical Report TR-94, </type> <institution> Computer Science Department, Carleton University, </institution> <address> Ottawa, Canada, </address> <year> 1986. </year>
Reference-contexts: Rather than inheritance, the Actor languages use a more general concept of delegation, in which any object may be delegated to handle a message for another; Lieberman [13] provides a useful and readable discussion of both prototypes and delegation. LaLonde <ref> [12] </ref> describes an exemplar-based Smalltalk (an exemplar is the same as a prototype); this language allows a given class to have multiple exemplars, an idea that has been borrowed and used in the design described here.
Reference: [13] <author> Henry Lieberman. </author> <title> Using prototypical objects to implement shared behavior in object-oriented systems. </title> <booktitle> In Proceedings of the 1986 ACM Conference on Object-Oriented Programming Systems, Languages and Applications, </booktitle> <pages> pages 214-223, </pages> <address> Portland, Oregon, </address> <month> September </month> <year> 1986. </year> <note> ACM. </note>
Reference-contexts: Languages in the Actor family are general-purpose programming languages that use prototypes. Rather than inheritance, the Actor languages use a more general concept of delegation, in which any object may be delegated to handle a message for another; Lieberman <ref> [13] </ref> provides a useful and readable discussion of both prototypes and delegation. LaLonde [12] describes an exemplar-based Smalltalk (an exemplar is the same as a prototype); this language allows a given class to have multiple exemplars, an idea that has been borrowed and used in the design described here.
Reference: [14] <author> Tim O'Shea. </author> <title> The learnability of object-oriented programming systems. </title> <booktitle> In Proceedings of the ACM Conference on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> page 502, </pages> <address> Portland, Oregon, </address> <month> September </month> <year> 1986. </year> <note> ACM. </note>
Reference-contexts: If, as in Smalltalk, classes themselves are objects, then to allow different classes to understand different initialization messages, each class must itself be an instance of a different class (called a metaclass in Smalltalk). Metaclasses add to the complexity of the language; a recent study <ref> [14] </ref> on difficulties encountered in teaching and learning about Smalltalk indicates that metaclasses are uniformly regarded as the single worst barrier to learnability by both teachers and students.
Reference: [15] <author> Craig Schaffert, Topher Cooper, Bruce Bullis, Mike Kilian, and Carrie Wilpolt. </author> <title> An introduction to trellis/owl. </title> <booktitle> In Proceedings of the 1986 ACM Conference on Object-Oriented Programming Systems, Languages and Applications, </booktitle> <pages> pages 9-16, </pages> <address> Portland, Oregon, </address> <month> September </month> <year> 1986. </year> <note> ACM. </note>
Reference-contexts: However, if type declarations were to be added, protocols would be the logical entity to use in the declaration and checking of type. An object-oriented language that does have strong typing, along with a separation of protocol and implementation, is Trellis/Owl <ref> [15] </ref>. Acknowledgements Thanks to Dave Robson, Randy Smith, Adele Goldberg, Tim O'Shea, and other members of the System Concepts Laboratory at Xerox PARC, and to David Notkin and Andrew Black at the University of Washington.
Reference: [16] <author> Randall B. Smith. </author> <title> The alternate reality kit: An animated environment for creating interactive simulations. </title> <booktitle> In Proceedings of the 1986 IEEE Computer Society Workshop on Visual Languages, </booktitle> <address> Dallas, Texas, </address> <month> June </month> <year> 1986. </year> <journal> IEEE. </journal> <volume> 8 </volume>
Reference-contexts: Examples of systems of this sort that have been built in Smalltalk include ThingLab [1, 2], Programming by Rehearsal [9, 10], the Alternate Reality Kit <ref> [16] </ref>, and Animus [5, 6]. Languages in the Actor family are general-purpose programming languages that use prototypes.
References-found: 16

