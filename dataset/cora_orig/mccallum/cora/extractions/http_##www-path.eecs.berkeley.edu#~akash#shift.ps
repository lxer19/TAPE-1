URL: http://www-path.eecs.berkeley.edu/~akash/shift.ps
Refering-URL: http://www-path.eecs.berkeley.edu/~akash/akash.html
Root-URL: http://www.cs.berkeley.edu
Email: fakash,gollu,luigig@eecs.berkeley.edu  
Title: The SHIFT Programming Language for Dynamic Networks of Hybrid Automata  
Author: Akash Deshpande, Aleks Gollu and Luigi Semenzato 
Web: http://www.path.berkeley.edu/shift  
Address: Berkeley, Berkeley, CA 94720  
Affiliation: Department of Electrical Engineering and Computer Sciences University of California at  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> R. Alur, C. Courcoubetis, T. Henzinger, and P. Ho. </author> <title> Hybrid Automata: An Algorithmic Approach to the Specification and Verification of Hybrid Systems. In Hybrid Systems, </title> <publisher> LNCS 736, Springer-Verlag, </publisher> <year> 1993, </year> <pages> pp. 209-229. </pages>
Reference-contexts: The hybrid systems approach <ref> [1] </ref> satisfies our needs for component modeling but it lacks the capacity to model dynamically reconfigurable interactions between components. The Omola/Omsim [15] language has a very similar approach to hybrid system modeling as SHIFT.
Reference: [2] <author> F. Barros. </author> <title> Dynamic Structure Discrete Event Specification Formalism. </title> <booktitle> In Transactions for the Society for Computer Simulation. </booktitle> <volume> No 1, </volume> <pages> pp. </pages> <month> 35-46 </month> <year> 1996. </year>
Reference-contexts: SHIFT does not provide explicit facilities for hierarchical behavior specification; instead, it provides a sub-typing mechanism which can be used to organize components hierarchically. SHIFT adds continuous time semantics and dynamic reconfigurability of the synchronization structure. Recent extensions to the DEVS [21] formalism have introduced notions of dynamic reconfiguration <ref> [2, 16] </ref>. However, the DEVS formalism is primarily aimed at untimed discrete event simulation and the extensions provided for continuous evolution laws are limited. Our mathematical model for the discrete event semantics is similar to Milner's -calculus [14].
Reference: [3] <author> A. Deshpande and P. Varaiya. </author> <title> Viable Control of Hybrid Systems. In Hybrid Systems II, </title> <publisher> LNCS 999, Springer-Verlag. </publisher> <year> 1995. </year>
Reference-contexts: Models for these components are provided by different groups of experts and then integrated in different ways for comparative analysis. From our previous experience in modeling [10, 6], analysis <ref> [17, 3] </ref> and implementation [5, 7], we adopted the hybrid systems approach for modeling the system components. Since spatial relationships between vehicles change as they move, our application is characterized by a dynamically changing network of interactions between system components.
Reference: [4] <author> A. Deshpande, D. Godbole, A. G ollu, P. Varaiya. </author> <title> "Design and Evaluation Tools for Automated Highway Systems." </title> <booktitle> In DIMACS 1995 and in Hybrid Systems III, </booktitle> <publisher> LNCS, Springer-Verlag, </publisher> <year> 1996. </year> <month> 11 </month>
Reference-contexts: Our primary application is the specification and analysis of different designs for automatic control of vehicles and highway systems [19]. We need to capture the behavior of vehicles, sensors, actuators, communication devices and controllers in a structured and modular specification <ref> [4] </ref>. Models for these components are provided by different groups of experts and then integrated in different ways for comparative analysis. From our previous experience in modeling [10, 6], analysis [17, 3] and implementation [5, 7], we adopted the hybrid systems approach for modeling the system components.
Reference: [5] <author> F. Eskafi, Delnaz Khorramabadi, and P. Varaiya, </author> <title> An Automatic Highway System Simulator. </title> <booktitle> In Transpn. </booktitle> <volume> Res.-C Vol. 3, No. 1, </volume> <pages> pp. 1-17, </pages> <year> 1995. </year>
Reference-contexts: Models for these components are provided by different groups of experts and then integrated in different ways for comparative analysis. From our previous experience in modeling [10, 6], analysis [17, 3] and implementation <ref> [5, 7] </ref>, we adopted the hybrid systems approach for modeling the system components. Since spatial relationships between vehicles change as they move, our application is characterized by a dynamically changing network of interactions between system components.
Reference: [6] <author> D. Godbole, J. Lygeros, E. Singh, A. Deshpande and E. Lindsey. </author> <title> Design and Verification of Communication Protocols for Degraded Modes of Operation of AHS. </title> <booktitle> In Conference on Decision and Control. </booktitle> <year> 1995. </year>
Reference-contexts: We need to capture the behavior of vehicles, sensors, actuators, communication devices and controllers in a structured and modular specification [4]. Models for these components are provided by different groups of experts and then integrated in different ways for comparative analysis. From our previous experience in modeling <ref> [10, 6] </ref>, analysis [17, 3] and implementation [5, 7], we adopted the hybrid systems approach for modeling the system components. Since spatial relationships between vehicles change as they move, our application is characterized by a dynamically changing network of interactions between system components.
Reference: [7] <author> A. G ollu, P. Varaiya. SmartAHS: </author> <title> An Object Oriented Simulation Framework for Highway Systems, </title> <note> To Appear in Iternational Journal of Mathematical and Computer Modeling. </note>
Reference-contexts: Models for these components are provided by different groups of experts and then integrated in different ways for comparative analysis. From our previous experience in modeling [10, 6], analysis [17, 3] and implementation <ref> [5, 7] </ref>, we adopted the hybrid systems approach for modeling the system components. Since spatial relationships between vehicles change as they move, our application is characterized by a dynamically changing network of interactions between system components.
Reference: [8] <author> A. G ollu, P. Varaiya. </author> <title> Dynamic Networks of Hybrid Automata, </title> <booktitle> Fifth Annual Conference on AI, Simulation, and Planning in High Autonomy Systems, </booktitle> <pages> pp. 244-251, </pages> <address> Gainesville, Florida. </address> <year> 1994. </year>
Reference-contexts: Our model performs synchronous composition of multiple automata. Our choice of this definition of world transitions rested on a tradeoff between ease of use and efficiency of implementation. An alternative would be to describe pair-wise cause-effect relationships between the transitions of different components <ref> [8, 12] </ref>. Programs written using the synchronous composition approach can be exponentially smaller than those written using cause-effect relationships. However, the algorithm for determining world transitions in the synchronous composition approach is exponentially more complex than the corresponding algorithm for the cause-effect synchronization approach.
Reference: [9] <author> D. Harel. Statecharts: </author> <title> a visual approach to complex systems. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 8(3) </volume> <pages> 231-275, </pages> <year> 1987. </year>
Reference-contexts: The Omola/Omsim [15] language has a very similar approach to hybrid system modeling as SHIFT. However, Omola is designed to represent statically interconnected objects, and it does not provide the means of querying sets of components using existential quantifiers. Statecharts <ref> [9] </ref> and Argos [13], based on Statecharts, are approaches for synchronous discrete event modeling. Their focus is on hierarchical specification of finite state machines. SHIFT does not provide explicit facilities for hierarchical behavior specification; instead, it provides a sub-typing mechanism which can be used to organize components hierarchically.
Reference: [10] <author> A. Hsu, F. Eskafi, S. Sachs, P. Varaiya. </author> <title> Protocol Design for an Automated Highway System. In Discrete Event Dynamic Systems: </title> <booktitle> Theory and Applications 2, </booktitle> <year> (1993): </year> <pages> 183-206. </pages>
Reference-contexts: We need to capture the behavior of vehicles, sensors, actuators, communication devices and controllers in a structured and modular specification [4]. Models for these components are provided by different groups of experts and then integrated in different ways for comparative analysis. From our previous experience in modeling <ref> [10, 6] </ref>, analysis [17, 3] and implementation [5, 7], we adopted the hybrid systems approach for modeling the system components. Since spatial relationships between vehicles change as they move, our application is characterized by a dynamically changing network of interactions between system components.
Reference: [11] <author> Tak-Kuen Juhn Koo, Yi Ma, George J. Pappas and Claire Tomlin. SmartATMS: </author> <title> A Simulator for Air Traffic Management Systems Submitted to Winter Simulation Conference 1997. </title>
Reference-contexts: Since spatial relationships between vehicles change as they move, our application is characterized by a dynamically changing network of interactions between system components. SHIFT has since also been used in coordinated autonomous submarines [18], air traffic control systems <ref> [11] </ref>, and material handling systems. In the rest of this section, we examine other work related to the SHIFT approach. In section 2, we describe the main features of the SHIFT languagestates, inputs, outputs, differential equations and algebraic 1 definitions, discrete states and state transitions.
Reference: [12] <author> R. Kurshan. </author> <title> Computer-Aided Verification of Coordinating Processes: The Automata-Theoretic Approach. </title> <publisher> Princeton University Press, </publisher> <year> 1994. </year>
Reference-contexts: Our model performs synchronous composition of multiple automata. Our choice of this definition of world transitions rested on a tradeoff between ease of use and efficiency of implementation. An alternative would be to describe pair-wise cause-effect relationships between the transitions of different components <ref> [8, 12] </ref>. Programs written using the synchronous composition approach can be exponentially smaller than those written using cause-effect relationships. However, the algorithm for determining world transitions in the synchronous composition approach is exponentially more complex than the corresponding algorithm for the cause-effect synchronization approach.
Reference: [13] <author> F. Maraninchi. </author> <title> The Argos language: Graphical Representation of Automata and Description of Reactive Systems. </title> <booktitle> Proc. IEEE International Conference on Visual Languages, </booktitle> <address> Kobe, Japan, </address> <year> 1991 </year>
Reference-contexts: The Omola/Omsim [15] language has a very similar approach to hybrid system modeling as SHIFT. However, Omola is designed to represent statically interconnected objects, and it does not provide the means of querying sets of components using existential quantifiers. Statecharts [9] and Argos <ref> [13] </ref>, based on Statecharts, are approaches for synchronous discrete event modeling. Their focus is on hierarchical specification of finite state machines. SHIFT does not provide explicit facilities for hierarchical behavior specification; instead, it provides a sub-typing mechanism which can be used to organize components hierarchically.
Reference: [14] <author> R. Milner, J. Parrow, D. Walker. </author> <title> A Calculus of Mobile Processes (Parts I and II). </title> <journal> Information and Computation, </journal> <volume> 100 Vol. </volume> <pages> 1 pp 1-77. </pages> <year> 1992. </year>
Reference-contexts: However, the DEVS formalism is primarily aimed at untimed discrete event simulation and the extensions provided for continuous evolution laws are limited. Our mathematical model for the discrete event semantics is similar to Milner's -calculus <ref> [14] </ref>. Both models achieve reconfiguration by a renaming of event labels used in synchronization. 2 The SHIFT Language A SHIFT program describes a set of interacting objects called components, grouped into component types.
Reference: [15] <author> S.E. Mattsson and M. Anderson. </author> <title> The Ideas Behind Omola. </title> <booktitle> In Proc. IEEE Symposium on Computer Aided Control System Design, </booktitle> <address> CADCS '92. Napa, CA, </address> <month> March 17-19 </month> <year> 1992. </year>
Reference-contexts: The hybrid systems approach [1] satisfies our needs for component modeling but it lacks the capacity to model dynamically reconfigurable interactions between components. The Omola/Omsim <ref> [15] </ref> language has a very similar approach to hybrid system modeling as SHIFT. However, Omola is designed to represent statically interconnected objects, and it does not provide the means of querying sets of components using existential quantifiers.
Reference: [16] <author> H. Praehofer, F. Auernig, adn G. Resinger. </author> <title> An Environment for DEVS-based multiformalisms simulation in Common Lisp/CLOS, Discrete Event Dynamic Systems: Theory and Application, </title> <booktitle> 3(2) </booktitle> <pages> 119-149, </pages> <year> 1993. </year>
Reference-contexts: SHIFT does not provide explicit facilities for hierarchical behavior specification; instead, it provides a sub-typing mechanism which can be used to organize components hierarchically. SHIFT adds continuous time semantics and dynamic reconfigurability of the synchronization structure. Recent extensions to the DEVS [21] formalism have introduced notions of dynamic reconfiguration <ref> [2, 16] </ref>. However, the DEVS formalism is primarily aimed at untimed discrete event simulation and the extensions provided for continuous evolution laws are limited. Our mathematical model for the discrete event semantics is similar to Milner's -calculus [14].
Reference: [17] <author> A. Puri and P. Varaiya, </author> <title> Driving safely in smart cars. </title> <booktitle> In American Control Conference, </booktitle> <pages> pp. 3597-3599, </pages> <year> 1995. </year>
Reference-contexts: Models for these components are provided by different groups of experts and then integrated in different ways for comparative analysis. From our previous experience in modeling [10, 6], analysis <ref> [17, 3] </ref> and implementation [5, 7], we adopted the hybrid systems approach for modeling the system components. Since spatial relationships between vehicles change as they move, our application is characterized by a dynamically changing network of interactions between system components.
Reference: [18] <author> Joao Sousa and Aleks G ollu. </author> <title> A Simulation Environment of the Coordinated Operation of Multiple Autonomous Underwater Vehicles Submitted to Winter Simulation Conference 1997. </title>
Reference-contexts: Since spatial relationships between vehicles change as they move, our application is characterized by a dynamically changing network of interactions between system components. SHIFT has since also been used in coordinated autonomous submarines <ref> [18] </ref>, air traffic control systems [11], and material handling systems. In the rest of this section, we examine other work related to the SHIFT approach. In section 2, we describe the main features of the SHIFT languagestates, inputs, outputs, differential equations and algebraic 1 definitions, discrete states and state transitions.
Reference: [19] <author> P. Varaiya. </author> <title> Smart cars on smart roads: problems of control. </title> <journal> In IEEE Trans. Automatic Control, </journal> <volume> vol. 38, No. 2, </volume> <year> 1993. </year>
Reference-contexts: The interaction network itself may evolve. The SHIFT model and language were motivated by our need for tools that support dynamically reconfigurable hybrid systems. Our primary application is the specification and analysis of different designs for automatic control of vehicles and highway systems <ref> [19] </ref>. We need to capture the behavior of vehicles, sensors, actuators, communication devices and controllers in a structured and modular specification [4]. Models for these components are provided by different groups of experts and then integrated in different ways for comparative analysis.
Reference: [20] <author> Peter Wegner. </author> <title> Concepts and Paradigms of Object-Oriented Programming, </title> <journal> ACM SIGPLAN OOPS Messenger, </journal> <volume> 1(1), </volume> <month> Aug </month> <year> 1990. </year>
Reference-contexts: Each component has both continuous-time dynamics and discrete-event dynamics which depend on the configuration of the world. Components obey continuous-time dynamics within each phase and discrete-event dynamics in phase transitions. The SHIFT mathematical model is class based <ref> [20] </ref>. The components are organized into types that describe the prototypical behavior of a component. We say that a component is an instantiation of its type. Type descriptors are an implicit and static part of the world.
Reference: [21] <author> Bernard Zeigler. </author> <title> Multifaceted modeling and discrete event simulation. </title> <publisher> Academic Press, </publisher> <address> London, Orlando, </address> <year> 1984. </year> <month> 13 </month>
Reference-contexts: SHIFT does not provide explicit facilities for hierarchical behavior specification; instead, it provides a sub-typing mechanism which can be used to organize components hierarchically. SHIFT adds continuous time semantics and dynamic reconfigurability of the synchronization structure. Recent extensions to the DEVS <ref> [21] </ref> formalism have introduced notions of dynamic reconfiguration [2, 16]. However, the DEVS formalism is primarily aimed at untimed discrete event simulation and the extensions provided for continuous evolution laws are limited. Our mathematical model for the discrete event semantics is similar to Milner's -calculus [14].
References-found: 21

