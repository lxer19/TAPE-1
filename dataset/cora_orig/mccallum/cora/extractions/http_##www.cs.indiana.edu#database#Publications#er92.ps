URL: http://www.cs.indiana.edu/database/Publications/er92.ps
Refering-URL: http://www.cs.indiana.edu/database/Publications/index.html
Root-URL: http://www.cs.indiana.edu
Title: A Specification-based Data Model viewpoint has other advantages. It keeps specifications and implementations consistent with
Author: Munish Gandhi Edward L. Robertson 
Note: This  
Address: Bloomington, IN 47405-4101  
Affiliation: Computer Science Department, Indiana University,  
Abstract: This paper presents a conceptual data model for engineered products ranging from software systems to physical objects. The presented model views the hierarchy of components that constitute a system as layers of alternating specification and implementation. If one considers the principles of abstraction and encapsulation, one can see that this viewpoint is quite natural. Abstraction implies that all implementations are implementations of some specification. Thus specifications may be regarded as directly "above" implementations. Encapsulation implies that implementations, at least conceptually, use specifications rather than other implementations to fulfill their goals. Thus, implementations may be regarded as directly "above" specifications. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Batory and W. Kim. </author> <title> Modeling concepts for VLSI CAD objects. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 10(3) </volume> <pages> 322-346, </pages> <month> September </month> <year> 1985. </year>
Reference-contexts: The model records versions as independent objects related to each other by the is version of link. This may be contrasted with other approaches which use a specialized object to handle versions <ref> [1, 6, 5] </ref>. We believe our approach is more natural. It also makes the model independent of the underlying object management system which may or may not provide support for versioning. Similarly, we do not have specialized structures for composite objects. <p> Instead, the composition relationship and the uses relationships are considered special cases of the needs relationship. The presented versioning mechanism permits an intuitive configuration mechanism. A configuration simply selects desired implementations from the required functionalities. We do not make any real distinction between static and dynamic configurations <ref> [1, 7] </ref>. In fact, we consider the difference as being process oriented and hence not part of a data model. Finally, manifestations are used to distinguish the instance hierarchy from the definition hierarchies [1, 9]. <p> We do not make any real distinction between static and dynamic configurations [1, 7]. In fact, we consider the difference as being process oriented and hence not part of a data model. Finally, manifestations are used to distinguish the instance hierarchy from the definition hierarchies <ref> [1, 9] </ref>.
Reference: [2] <author> G. Booch. </author> <title> Object Oriented Design with Applications. </title> <address> Benjamin/Cummings, Redwood City, California, </address> <year> 1991. </year>
Reference-contexts: At the manifestation stage, however, each wheel is different and thus has its own identity. 3.2 Object Oriented Software Systems We illustrate the applicability of SBDM to object oriented software systems in this subsection. Our examples use principles represented in the design approaches of Booch <ref> [2] </ref> and Meyer [10]. A specification for a family of objects in SBDM is very close to the notion of a class interface in object-oriented systems. It defines the communication protocol used to interact with the objects, the behavior expected of the objects, and other important information regarding the objects. <p> For example, in ADA if each class is placed in a separate package, the package implementation may be considered an ImpC for that class (and the specification package a part of the SpecC). We now adapt an example from <ref> [2] </ref> to illustrate the above concepts. A home heating system provides and controls heat to individual rooms in a home. The structure of one system is modeled in SBDM in Figure 6.
Reference: [3] <author> P. P. Chen. </author> <title> The Entity-Relationship Model Toward a unified view of data. </title> <journal> ACM Transactions in Database Systems, </journal> <volume> 1(1) </volume> <pages> 9-36, </pages> <month> March </month> <year> 1976. </year>
Reference-contexts: All other figures are instance diagrams using different shapes to distinguish various entity types and lines of various forms to distinguish relationships. 2 Design Components in SBDM This section presents the Specification-based Data Model (SBDM) using the ER formalism <ref> [3] </ref> (Figure 1). The entities in the figure correspond to four important components in SBDM. Specification Component encapsulates a formal statement of the objectives satisfied by its implementations and may be versioned to reflect an evolving design, or subtyped to represent a generalization hierarchy.
Reference: [4] <author> H. T. Chou and W. Kim. </author> <title> A Unifying Framework for Version Control in a CAD Environment. </title> <booktitle> In Proceedings of the 12th VLDB conference, </booktitle> <address> Kyoto, Japan, </address> <pages> pages 336-346, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: Else, we are done. Of course, it may not be necessary to explicitly create ConfCs and link them to get the desired configuration. A method of defaults may derive the configuration hierarchy automatically. The idea here subsumes that used in <ref> [4] </ref>. For each specification one may designate a distinguished object from its design set as current. To configure an object, we recursively construct it using the current versions of each functionality linked by the needs link. An atomic ImpC is configured using the ImpC itself.
Reference: [5] <author> K. R. Dittrich, W. Gotthard, and P. C. Lockemann. </author> <title> DAMOKLES A Database Systems for Software Engineering Environments. </title> <booktitle> In Proceedings of an International Workshop on Advanced Programming Environments, Trondheim, Norway, </booktitle> <pages> pages 353-371, </pages> <month> June </month> <year> 1986. </year>
Reference-contexts: Rather, it produced a generic model which excluded implementation issues [13]. Another work which has objectives similar to ours is the data model (DODM) in the DAMOKLES project <ref> [5] </ref>. However, since DODM has been developed in context of the DAMOKLES system, the data model is closely tied to its implementation. The presented model considers the specification for each component of a product as being closely linked to its implementation. <p> The model records versions as independent objects related to each other by the is version of link. This may be contrasted with other approaches which use a specialized object to handle versions <ref> [1, 6, 5] </ref>. We believe our approach is more natural. It also makes the model independent of the underlying object management system which may or may not provide support for versioning. Similarly, we do not have specialized structures for composite objects.
Reference: [6] <author> K. R. Dittrich and R. Lorie. </author> <title> Version support for engineering database systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 14(4) </volume> <pages> 429-437, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: The model records versions as independent objects related to each other by the is version of link. This may be contrasted with other approaches which use a specialized object to handle versions <ref> [1, 6, 5] </ref>. We believe our approach is more natural. It also makes the model independent of the underlying object management system which may or may not provide support for versioning. Similarly, we do not have specialized structures for composite objects.
Reference: [7] <author> R. H. Katz. </author> <title> Information Management for Engineering Design. </title> <publisher> Springer-Verlag Computer Science Survey Series, </publisher> <address> Heidelberg, Germany, </address> <year> 1985. </year>
Reference-contexts: Instead, the composition relationship and the uses relationships are considered special cases of the needs relationship. The presented versioning mechanism permits an intuitive configuration mechanism. A configuration simply selects desired implementations from the required functionalities. We do not make any real distinction between static and dynamic configurations <ref> [1, 7] </ref>. In fact, we consider the difference as being process oriented and hence not part of a data model. Finally, manifestations are used to distinguish the instance hierarchy from the definition hierarchies [1, 9].
Reference: [8] <author> R. H. Katz. </author> <title> Toward a Unified Framework for Version Modeling in Engineering Databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(4) </volume> <pages> 375-408, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: The same holds true for the ImpC G y x . 3 To configure current versions for different platforms a constraint mechanism may be used. We do not elaborate of that mechanism here. 2.5 Manifestation Component <ref> [8] </ref> refers to the need for distinguishing an instance hierarchy and a definition hierarchy. The Manifestation Component (ManC) entity in SBDM together with the contains relationship enables us to explicitly create an instance hierarchy.
Reference: [9] <author> D. McLeod, K. Narayanaswamy, and K. BapaRao. </author> <title> An approach to information management for CAD/VLST applications. </title> <booktitle> In Proceedings of the SIGMOD conference on Databases for Engineering Applications, </booktitle> <address> San Jose, California, </address> <pages> pages 39-50, </pages> <month> May </month> <year> 1983. </year>
Reference-contexts: We do not make any real distinction between static and dynamic configurations [1, 7]. In fact, we consider the difference as being process oriented and hence not part of a data model. Finally, manifestations are used to distinguish the instance hierarchy from the definition hierarchies <ref> [1, 9] </ref>.
Reference: [10] <author> B. Meyer. </author> <title> Object-oriented Software Construction. </title> <publisher> Prentice Hall International (UK) Ltd., </publisher> <address> Hertfordshire, HP2 4RG, </address> <year> 1988. </year>
Reference-contexts: At the manifestation stage, however, each wheel is different and thus has its own identity. 3.2 Object Oriented Software Systems We illustrate the applicability of SBDM to object oriented software systems in this subsection. Our examples use principles represented in the design approaches of Booch [2] and Meyer <ref> [10] </ref>. A specification for a family of objects in SBDM is very close to the notion of a class interface in object-oriented systems. It defines the communication protocol used to interact with the objects, the behavior expected of the objects, and other important information regarding the objects.
Reference: [11] <author> K. D. Mueller-Glaser, J. Bortolazzi, and Y. Tanhuran. </author> <title> Towards a Requirements Definition, Specification, and System Design Environment. </title> <note> In EURO-DAC Proceedings (to appear), </note> <year> 1992. </year>
Reference-contexts: In other words, as software evolves both specifications and implementations undergo change. In fact, systems that integrate specifications in the design process are being developed currently. For example, the DEBYS (DEsign BY Specification) project intends to develop an integrated design and test environment for the design of electronic systems <ref> [11] </ref>. Our effort has been guided by a few general objectives. We explicate these as the following principles: P1 The model should be general and flexible. P2 Both the modeling notation and the model itself should be minimal. P3 The model should represent designed objects.
Reference: [12] <author> M. H. Penedo and E. D. Stuckle. </author> <title> Integrated Project Master Database IR&D Final Report. </title> <type> Technical Report TRW-84-SS-22, </type> <institution> TRW, </institution> <month> December </month> <year> 1984. </year>
Reference-contexts: We present a minimal model that unifies mechanisms for system design, system configuration and system instantiation. We regard the model as an "engineering asset" which may be appropriately extended for purposes of a specific design environment. For example, the PMDB Project <ref> [12] </ref> has modeled the data relating to software development life cycle process used at TRW.
Reference: [13] <author> M. H. Penedo and E. D. Stuckle. </author> <title> TRW`s SEE Saga. </title> <booktitle> In Software Engineering Environments International Workshop on Environments, Chinon, France, </booktitle> <pages> pages 25-56, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Rather, it produced a generic model which excluded implementation issues <ref> [13] </ref>. Another work which has objectives similar to ours is the data model (DODM) in the DAMOKLES project [5]. However, since DODM has been developed in context of the DAMOKLES system, the data model is closely tied to its implementation.
Reference: [14] <author> W. Swartout and R. Balzer. </author> <title> On the inevitable intertwining of specification and implementation. </title> <journal> Communications of the ACM, </journal> <volume> 25(7) </volume> <pages> 438-440, </pages> <month> July </month> <year> 1982. </year>
Reference-contexts: The presented model considers the specification for each component of a product as being closely linked to its implementation. The need for such an integration has been felt before. Swartout and Balzer <ref> [14] </ref> argue that even though software process models view specification and implementation as successive steps, in reality they influence one another. In other words, as software evolves both specifications and implementations undergo change. In fact, systems that integrate specifications in the design process are being developed currently.
References-found: 14

