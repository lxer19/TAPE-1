URL: ftp://ftp.cs.dartmouth.edu/TR/TR95-260.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/reports/abstracts/TR95-260/
Root-URL: http://www.cs.dartmouth.edu
Title: Simulation of a Video-on-Demand System  
Author: Song Bac Toh 
Degree: Senior Thesis in Computer Science  
Date: June 6, 1995  
Address: Hanover, New Hampshire 03755  
Affiliation: Dartmouth College  
Abstract: This paper presents a simulation study of a video-on-demand system. The focus of the study is the effectiveness of different caching strategies on a video-on-demand system with two levels of cache, RAM and disks, in front of a tape library. Using an event-driven simulator, I show that the service capacity of the system benefited only marginally from caching if no other information was available. I find that on-demand caching was only useful if movies to be shown clustered around a few popular titles (in other words, there was temporal locality).
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ann Drapeau and Randy Katz, </author> <title> Striping in Large Tape Libraries, </title> <booktitle> Proceedings of Supercomputing 93, </booktitle> <pages> pp. 378-387. </pages>
Reference-contexts: The tape drive parameters used in this simulation, shown in Table 1, are taken from a paper describing striping in large tape libraries by Drapeau and Katz <ref> [1] </ref>. The authors did an in-depth study of a slow tape library, the Exabyte EXB-120. However, the tapeswitch time and search time of EXB-120 system is too slow for video-on-demand use. An average tape switch takes up to 284 seconds.
Reference: [2] <author> Craig Federighi and Lawrence A. Rowe, </author> <title> A Distributed Hierarchical Storage Manager for a Video-on-Demand System, </title> <note> UCB Technical Report No. UCB/CSD 94/795. </note>
Reference-contexts: Gemmell also considered the use of tertiary storage devices, e.g., tape libraries. The author acknowledged that it is not practical to play the movie streams directly from a tertiary storage device due to its slow random-access time, which concurs with my finding. Rowe et al. <ref> [2] </ref> presented a larger scale video-on-demand system, although it is not conceptually different from the one in this paper. Rowe had the resources to actually implement the system. Rowes studied a distributed hierarchical storage system.
Reference: [3] <author> Craig Freedman, David J. DeWitt, </author> <title> The SPIFFI Scalable Video-on-Demand System, </title> <institution> University of Wisconsin Technical Report, </institution> <note> submitted to IEEE TPDS, </note> <year> 1994. </year>
Reference: [4] <author> Borko Furht, Deven Kalra, Frederick Kitson, Arturo Rodriguez and William Wall, </author> <title> Design Issues for Interactive Television Systems, </title> <booktitle> IEEE Computer, </booktitle> <month> May </month> <year> 1995, </year> <pages> pp. 25-39. </pages>
Reference-contexts: The study concentrated on calculating the upper bounds on seek time for various diskseek algorithms, and using the knowledge to enhance the performance of a multimedia server. The study, however, did not concern itself with the interaction between the disk and other levels of cache. Furht et al. <ref> [4] </ref> studied the display of HDTV and MPEG-2 (2-20 Mbps) videos from distributed servers. Due to the bandwidth requirement of MPEG-2 movies, the authors recommended using highly parallel servers with high I/O throughput.
Reference: [5] <author> D. James Gemmell, Harrick Vin, Dilip Kandlur, P. Venkat Rangan and Lawrence A. Rowe, </author> <title> Multimedia Storage Servers: A Tutorial, </title> <booktitle> IEEE Computer, </booktitle> <month> May </month> <year> 1995, </year> <pages> pp. 40-49. </pages>
Reference-contexts: Due to the bandwidth requirement of MPEG-2 movies, the authors recommended using highly parallel servers with high I/O throughput. Storage architecture is not a chief concern in that paper, but it provides insightful information on the set-top-box (STB) used in video-on-demand applications. Gemmell <ref> [5] </ref> studied the disk-head scheduling policy, the use of contiguous placement, the use of a smaller file-index table with greater allocation sizes, and data striping across disks, all in the context of continuous-media servers.
Reference: [6] <author> David Kotz, Song Bac Toh, Sriram Radhakrishnan, </author> <title> A Detailed Simulation Model of the HP 97650 Disk Drive, </title> <type> Dartmouth College Technical Report PCS-TR94-220. </type>
Reference-contexts: The allocation unit on disk is one movie segment, or a GOP. The access size, a GOP, is 76.8 kilobytes. I obtained disk read and write access times by issuing a series of 10,000 uniformly distributed GOP requests to a HP 97560 disk simulator <ref> [6] </ref> and then generated a cumulative distribution function (CDF) based on the access time [Figures 5 & 6]. Whenever there is a request for a movie segment from the disk, the disk will first check in the segmentallocation table to find the segments physical location.
Reference: [7] <author> O. Rose, </author> <title> Statistical Properties of MPEG video traffic and their impact on modeling in ATM systems, </title> <institution> University of Wrzburg, Institute of Computer Science, </institution> <note> Research Report Series, Report No. 101, </note> <month> February </month> <year> 1995. </year>
Reference-contexts: The decompressed video quality will match VHS videotape playback. As MPEG is a scalable compression algorithm, one should bear in mind that the option to provide better quality video is there, but the demand on the hardware will scale up as well. Based on a paper by O. Rose <ref> [7] </ref>, the parameter I chose for the MPEG compression is 12 frames per group of pictures (GOP). Each stream plays 30 frames per second. I also set the size of a movie segment to be the same as the size of a GOP.
Reference: [8] <author> Yen-Jen Oyang, Meng-Huang Lee, Chun-Hung Wen, and Chih-Yuan Chen, </author> <title> Design of Multimedia Storage Systems for On-Demand Playback, </title> <booktitle> Proceedings of the 11th International Conference on Data Engineering (ICDE '95). </booktitle> <address> [9] phade@cs.tu-berlin.de, MPEG-FAQ/part 1, comp.compression </address>
Reference-contexts: Most studies that used real hardware, however, were limited to systems with only RAM and disks, possibly because highspeed tape libraries were not readily available. Oyang et al. <ref> [8] </ref> did a high-level study on the storage system design for a multimedia system with on-demand playback. The study concentrated on calculating the upper bounds on seek time for various diskseek algorithms, and using the knowledge to enhance the performance of a multimedia server.
Reference: [10] <author> Andrew S. Tanenbaum, </author> <title> "Operating Systems: Design and Implementation", </title> <publisher> Prentice Hall, </publisher> <address> ISBN: 0-13-637331-3. </address> <month> 19 </month>
Reference-contexts: Often, when this occurs, the RAM will not be able to get the segment in on-time, which results in glitches. The system is considered overloaded when such glitches become frequent. The cache replacement policies used in the simulator include least-recently-used (LRU), first-in-first-out (FIFO), least-frequently-used (LFU), and random (RND) (see <ref> [10] </ref> for detailed descriptions of such strategies). As long as the cache pool is not filled up, the device will simply use the next available slot.
Reference: [11] <author> Paul Fishwick, SIMPACK: </author> <title> Getting Started with Simulation Programming in C and C++, </title> <note> http://www.cis.ufl.edu/~fishwick/simpack/simpack.html 20 </note>
Reference-contexts: The paper describes how to improve the performance of a video server by intelligent caching, i.e., by using the knowledge of which movies are popular and which may become popular in the near future. 4 The Simulator The simulator in this paper is based on Simpack <ref> [11] </ref>, a free simulator package distributed by Paul Fishwick from University of Florida. Simpack contains several 5 simulation models, from which I chose the queuing event model.
References-found: 10

