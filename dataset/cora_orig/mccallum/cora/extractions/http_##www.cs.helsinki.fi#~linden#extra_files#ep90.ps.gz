URL: http://www.cs.helsinki.fi/~linden/extra_files/ep90.ps.gz
Refering-URL: http://www.cs.helsinki.fi/research/rati/rati.html
Root-URL: 
Title: A structured document database system  
Author: Pekka Kilpelainen Greger Linden Heikki Mannila Erja Nikunen 
Address: Helsinki  
Affiliation: University of  
Abstract: We describe a database system for writing, editing, and querying structured documents. The structure of text is described using a context-free grammar. The operations are implemented using a powerful query language. The system supports the use of user-defined multiple views of the documents: one view can contain all the structure explicitly, while another can contain only part of the document and have only part of the structure visible. This makes the system flexible for different editing tasks. The system is implemented in C using a relational database system. 
Abstract-found: 1
Intro-found: 1
Reference: [AFQ89a] <author> J. Andre, R. Furuta, and V. Quint. </author> <title> By way of an introduction. Structured documents: </title> <editor> What and why? In J. Andre, R. Furuta, and V. Quint, editors, </editor> <title> Structured Documents, </title> <booktitle> The Cambridge Series on Electronic Publishing, </booktitle> <pages> pages 1-6. </pages> <publisher> Cambridge University Press, </publisher> <year> 1989. </year>
Reference-contexts: 1 Introduction Text with a structure is quite common: dictionaries, reference manuals, yearly reports etc. are typical examples. In recent years, research into systems for writing structured documents has flourished: see, e.g., <ref> [AFQ89b, AFQ89a, Fur89, Qui89] </ref> for recent surveys of the field. The SGML and ODA standards (see [Jol89, Bar89, Bro89]) have further increased the interest in the area. The Helsinki Structured Text Database System (HST) is an environment for the writing and editing of structured documents.
Reference: [AFQ89b] <author> J. Andre, R. Furuta, and V. Quint, </author> <title> editors. Structured Documents. The Cambridge Series on Electronic Publishing. </title> <publisher> Cambridge University Press, </publisher> <year> 1989. </year>
Reference-contexts: 1 Introduction Text with a structure is quite common: dictionaries, reference manuals, yearly reports etc. are typical examples. In recent years, research into systems for writing structured documents has flourished: see, e.g., <ref> [AFQ89b, AFQ89a, Fur89, Qui89] </ref> for recent surveys of the field. The SGML and ODA standards (see [Jol89, Bar89, Bro89]) have further increased the interest in the area. The Helsinki Structured Text Database System (HST) is an environment for the writing and editing of structured documents.
Reference: [ASU86] <author> A.V. Aho, R. Sethi, and J.D. Ullman. </author> <booktitle> Compilers Principles, Techniques, and Tools. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1986. </year> <title> 8 first and follow sets 9 </title>
Reference-contexts: Hence the data in HST is in the form of parse trees. Besides grammars, the data model of HST contains attributes, which are values stored at the nodes of the parse tree Thus the grammars are actually attribute grammars (see, e.g., <ref> [ASU86] </ref>).
Reference: [AU72] <author> A. V. Aho and J. D. Ullman. </author> <title> The Theory of Parsing, Translation, and Compiling, vol I and II. </title> <publisher> Prentice-Hall, </publisher> <year> 1972. </year>
Reference-contexts: title journal volume year pages publication -&gt; '"item' authors ': ' title ' -"it' journal '-' ' -"bf' volume '-, ' year ', ' pages '.' 3. authors ! author* 4 3 An annotated grammar is actually a syntax-directed translation, in the sense this term was used in the 1970's <ref> [AU72] </ref>. 4 Here we use a convenient shorthand for describing how regular expressions are handled in view definitions.
Reference: [Bar89] <author> David Barron. </author> <title> Why use SGML? Electronic Publishing, </title> <booktitle> 2(1) </booktitle> <pages> 3-24, </pages> <year> 1989. </year>
Reference-contexts: 1 Introduction Text with a structure is quite common: dictionaries, reference manuals, yearly reports etc. are typical examples. In recent years, research into systems for writing structured documents has flourished: see, e.g., [AFQ89b, AFQ89a, Fur89, Qui89] for recent surveys of the field. The SGML and ODA standards (see <ref> [Jol89, Bar89, Bro89] </ref>) have further increased the interest in the area. The Helsinki Structured Text Database System (HST) is an environment for the writing and editing of structured documents. The system uses context-free grammars for modelling the structure of documents. The HST system differs from previous work in several respects.
Reference: [BR84] <author> F. Bancilhon and P. Richard. </author> <title> Managing texts and facts in a mixed data base environment. </title> <editor> In G. Gardarin and E. Gelenbe, editors, </editor> <booktitle> New Applications of Data Bases, </booktitle> <pages> pages 87-107. </pages> <publisher> Academic Press, </publisher> <year> 1984. </year>
Reference-contexts: As in, e.g., <ref> [GT87a, BR84, CIV86, FQA88, QV86] </ref>, the structure of documents is described in HST using context-free grammars. Thus, in database terminology, grammars correspond to schemas, and parse trees correspond to instances. Hence the data in HST is in the form of parse trees.
Reference: [Bro88] <author> K.P Brooks. </author> <title> A two-view document editor with user-definable document structure. </title> <type> Research Report 33, </type> <institution> Digital Systems Research Center, Palo Alto, </institution> <year> 1988. </year>
Reference-contexts: Next we briefly describe other work related to the use of multiple views. For a highly specialized case of view updating, see the description of the VorTeX system [Che88, CH88]. Also Lilac <ref> [Bro88] </ref> supports two views. The pedtnt system described in [FQA88] allows users to edit the formatted text representation of the document, and heuristics modify the structure accordingly. Grif [QV86, FQA88] allows definition of both full and partial views.
Reference: [Bro89] <author> Heather Brown. </author> <title> Standards for structured documents. </title> <journal> The Computer Journal, </journal> <volume> 32(6) </volume> <pages> 505-514, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: 1 Introduction Text with a structure is quite common: dictionaries, reference manuals, yearly reports etc. are typical examples. In recent years, research into systems for writing structured documents has flourished: see, e.g., [AFQ89b, AFQ89a, Fur89, Qui89] for recent surveys of the field. The SGML and ODA standards (see <ref> [Jol89, Bar89, Bro89] </ref>) have further increased the interest in the area. The Helsinki Structured Text Database System (HST) is an environment for the writing and editing of structured documents. The system uses context-free grammars for modelling the structure of documents. The HST system differs from previous work in several respects.
Reference: [CH88] <author> P. Chen and M.A. Harrison. </author> <title> Multiple representation document development. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 15-31, </pages> <month> Jan-uary </month> <year> 1988. </year>
Reference-contexts: Next we briefly describe other work related to the use of multiple views. For a highly specialized case of view updating, see the description of the VorTeX system <ref> [Che88, CH88] </ref>. Also Lilac [Bro88] supports two views. The pedtnt system described in [FQA88] allows users to edit the formatted text representation of the document, and heuristics modify the structure accordingly. Grif [QV86, FQA88] allows definition of both full and partial views.
Reference: [Che88] <author> Pehong Chen. </author> <title> A multiple-representation paradigm for document development. </title> <type> Ph.D. Thesis Report UCB/CSD 88/436, </type> <institution> Computer Science Division (EECS), University of California, Berkeley, </institution> <month> July </month> <year> 1988. </year>
Reference-contexts: Next we briefly describe other work related to the use of multiple views. For a highly specialized case of view updating, see the description of the VorTeX system <ref> [Che88, CH88] </ref>. Also Lilac [Bro88] supports two views. The pedtnt system described in [FQA88] allows users to edit the formatted text representation of the document, and heuristics modify the structure accordingly. Grif [QV86, FQA88] allows definition of both full and partial views.
Reference: [CIV86] <author> G. Coray, R. Ingold, and C. Vanoirbeek. </author> <title> Formatting structured documents: Batch versus interactive. </title> <editor> In J. C. van Vliet, editor, </editor> <booktitle> Text Processing and Document Manipulation, </booktitle> <pages> pages 154-170. </pages> <publisher> Cambridge University Press, </publisher> <year> 1986. </year>
Reference-contexts: As in, e.g., <ref> [GT87a, BR84, CIV86, FQA88, QV86] </ref>, the structure of documents is described in HST using context-free grammars. Thus, in database terminology, grammars correspond to schemas, and parse trees correspond to instances. Hence the data in HST is in the form of parse trees.
Reference: [FQA88] <author> R. Furuta, V. Quint, and J. Andre. </author> <title> Interactively editing structured documents. </title> <publisher> Electronic Publishing, </publisher> <pages> 1(1) 19-44, </pages> <year> 1988. </year>
Reference-contexts: As in, e.g., <ref> [GT87a, BR84, CIV86, FQA88, QV86] </ref>, the structure of documents is described in HST using context-free grammars. Thus, in database terminology, grammars correspond to schemas, and parse trees correspond to instances. Hence the data in HST is in the form of parse trees. <p> Next we briefly describe other work related to the use of multiple views. For a highly specialized case of view updating, see the description of the VorTeX system [Che88, CH88]. Also Lilac [Bro88] supports two views. The pedtnt system described in <ref> [FQA88] </ref> allows users to edit the formatted text representation of the document, and heuristics modify the structure accordingly. Grif [QV86, FQA88] allows definition of both full and partial views. Partial views are defined by describing which logical objects are visible in different views. <p> For a highly specialized case of view updating, see the description of the VorTeX system [Che88, CH88]. Also Lilac [Bro88] supports two views. The pedtnt system described in [FQA88] allows users to edit the formatted text representation of the document, and heuristics modify the structure accordingly. Grif <ref> [QV86, FQA88] </ref> allows definition of both full and partial views. Partial views are defined by describing which logical objects are visible in different views. Work on view updates with similar goals as ours has been reported by Yellin and Mueckstein [YM86, Yel88], who discuss a method to invert attribute grammars.
Reference: [Fur89] <author> R. Furuta. </author> <title> Concepts and models for structured documents. </title> <editor> In J. Andre, R. Furuta, and V. Quint, editors, </editor> <title> Structured Documents, </title> <booktitle> The Cambridge Series on Electronic Publishing, </booktitle> <pages> pages 7-38. </pages> <publisher> Cambridge University Press, </publisher> <year> 1989. </year>
Reference-contexts: 1 Introduction Text with a structure is quite common: dictionaries, reference manuals, yearly reports etc. are typical examples. In recent years, research into systems for writing structured documents has flourished: see, e.g., <ref> [AFQ89b, AFQ89a, Fur89, Qui89] </ref> for recent surveys of the field. The SGML and ODA standards (see [Jol89, Bar89, Bro89]) have further increased the interest in the area. The Helsinki Structured Text Database System (HST) is an environment for the writing and editing of structured documents.
Reference: [GT87a] <author> G.H. Gonnet and F.Wm. Tompa. </author> <title> Mind your grammar: A new approach to modelling text. </title> <booktitle> In VLDB '87, Proceedings of the Conference on Very Large Data Bases, </booktitle> <pages> pages 339-346, </pages> <year> 1987. </year>
Reference-contexts: As in, e.g., <ref> [GT87a, BR84, CIV86, FQA88, QV86] </ref>, the structure of documents is described in HST using context-free grammars. Thus, in database terminology, grammars correspond to schemas, and parse trees correspond to instances. Hence the data in HST is in the form of parse trees. <p> Several programming language environments have multiple representations. The documents they manipulate are programs. 7 5 Query language The query language of HST is called PQL (parse tree query language). It is loosely based on the language of Gonnet and Tompa <ref> [GT87a, GT87b] </ref>, but includes some extensions (e.g., attributes). The language is a procedural language with assignments and control structures (loops, procedures, functions). Additionally, it includes specific operations for manipulating parse trees. The language is described fully in [KLM + 91].
Reference: [GT87b] <author> G.H. Gonnet and F.Wm. Tompa. </author> <title> Mind your grammar: A new approach to modelling text. </title> <institution> Research Report CS-87-13, University of Waterloo, </institution> <year> 1987. </year> <month> 10 </month>
Reference-contexts: Several programming language environments have multiple representations. The documents they manipulate are programs. 7 5 Query language The query language of HST is called PQL (parse tree query language). It is loosely based on the language of Gonnet and Tompa <ref> [GT87a, GT87b] </ref>, but includes some extensions (e.g., attributes). The language is a procedural language with assignments and control structures (loops, procedures, functions). Additionally, it includes specific operations for manipulating parse trees. The language is described fully in [KLM + 91].
Reference: [Jol89] <author> Vania Joloboff. </author> <title> Document representation: Concepts and standards. </title> <editor> In J. Andre, R. Furuta, and V. Quint, editors, </editor> <title> Structured Documents, </title> <booktitle> The Cambridge Series on Electronic Publishing, </booktitle> <pages> pages 75-105. </pages> <publisher> Cambridge University Press, </publisher> <year> 1989. </year>
Reference-contexts: 1 Introduction Text with a structure is quite common: dictionaries, reference manuals, yearly reports etc. are typical examples. In recent years, research into systems for writing structured documents has flourished: see, e.g., [AFQ89b, AFQ89a, Fur89, Qui89] for recent surveys of the field. The SGML and ODA standards (see <ref> [Jol89, Bar89, Bro89] </ref>) have further increased the interest in the area. The Helsinki Structured Text Database System (HST) is an environment for the writing and editing of structured documents. The system uses context-free grammars for modelling the structure of documents. The HST system differs from previous work in several respects.
Reference: [KLM + 91] <author> Pekka Kilpelainen, Greger Linden, Heikki Mannila, Erja Nikunen, and Kari-Jouko Raiha. </author> <title> The data model and query language of the Helsinki structured text database system (HST). </title> <type> Technical report, </type> <institution> University of Helsinki, Department of Computer Science, </institution> <month> November </month> <year> 1991. </year>
Reference-contexts: It is loosely based on the language of Gonnet and Tompa [GT87a, GT87b], but includes some extensions (e.g., attributes). The language is a procedural language with assignments and control structures (loops, procedures, functions). Additionally, it includes specific operations for manipulating parse trees. The language is described fully in <ref> [KLM + 91] </ref>. One design decision in HST is that the query language is not meant to be used by the end user. Thus we have not been forced to make the language suitable for users with no programming experience.
Reference: [Min90] <author> Sten Minor. </author> <title> On Structure-Oriented Editing. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Lund University, </institution> <year> 1990. </year>
Reference-contexts: Structured editors have been studied extensively in the field of programming environments (see, e.g., [RT89]). The experience seems to be that structure is sometimes useful and sometimes harmful. A survey on the advantages and disadvantages of structure-oriented editors for programming languages can be found in <ref> [Min90] </ref>. We aim at a flexible system, where the structure can be used only when it is useful. The user should be able to use whatever view is most convenient.
Reference: [NM89] <author> Erja Nikunen and Heikki Mannila. </author> <title> Views of structured documents. </title> <type> Unpublished manuscript, </type> <month> December </month> <year> 1989. </year>
Reference-contexts: If the view is partial, then d 0 6 Provided that some of the peculiarities allowed by SGML are not used. 6 must be merged with d. (See Figure 2.) This process is described in more detail in <ref> [NM89] </ref>. Changes in an arbitrary view can not be transformed back to the original document.
Reference: [Qui89] <author> Vincent Quint. </author> <title> Systems for the manipulation of structured documents. </title> <editor> In J. Andre, R. Furuta, and V. Quint, editors, </editor> <title> Structured Documents, </title> <booktitle> The Cambridge Series on Electronic Publishing, </booktitle> <pages> pages 39-74. </pages> <publisher> Cambridge University Press, </publisher> <year> 1989. </year>
Reference-contexts: 1 Introduction Text with a structure is quite common: dictionaries, reference manuals, yearly reports etc. are typical examples. In recent years, research into systems for writing structured documents has flourished: see, e.g., <ref> [AFQ89b, AFQ89a, Fur89, Qui89] </ref> for recent surveys of the field. The SGML and ODA standards (see [Jol89, Bar89, Bro89]) have further increased the interest in the area. The Helsinki Structured Text Database System (HST) is an environment for the writing and editing of structured documents.
Reference: [QV86] <author> V. Quint and I. Vatton. Grif: </author> <title> An interactive system for structured document manipulation. </title> <editor> In J. C. van Vliet, editor, </editor> <booktitle> Text Processing and Document Manipulation, </booktitle> <pages> pages 200-213. </pages> <publisher> Cambridge University Press, </publisher> <year> 1986. </year>
Reference-contexts: As in, e.g., <ref> [GT87a, BR84, CIV86, FQA88, QV86] </ref>, the structure of documents is described in HST using context-free grammars. Thus, in database terminology, grammars correspond to schemas, and parse trees correspond to instances. Hence the data in HST is in the form of parse trees. <p> For a highly specialized case of view updating, see the description of the VorTeX system [Che88, CH88]. Also Lilac [Bro88] supports two views. The pedtnt system described in [FQA88] allows users to edit the formatted text representation of the document, and heuristics modify the structure accordingly. Grif <ref> [QV86, FQA88] </ref> allows definition of both full and partial views. Partial views are defined by describing which logical objects are visible in different views. Work on view updates with similar goals as ours has been reported by Yellin and Mueckstein [YM86, Yel88], who discuss a method to invert attribute grammars.
Reference: [RT89] <author> T.W. Reps and T. Teitelbaum. </author> <title> The Synthesizer Generator. </title> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: Next we describe in more detail the reasons for adopting them, their definition, and their implementation. Structured editors have been studied extensively in the field of programming environments (see, e.g., <ref> [RT89] </ref>). The experience seems to be that structure is sometimes useful and sometimes harmful. A survey on the advantages and disadvantages of structure-oriented editors for programming languages can be found in [Min90]. We aim at a flexible system, where the structure can be used only when it is useful.
Reference: [Yel88] <author> D.M. Yellin. </author> <title> Attribute Grammar Inversion and Source-to-source Translation. </title> <publisher> Springer-Verlag, </publisher> <year> 1988. </year> <note> Lecture Notes in Computer Science 302. </note>
Reference-contexts: Grif [QV86, FQA88] allows definition of both full and partial views. Partial views are defined by describing which logical objects are visible in different views. Work on view updates with similar goals as ours has been reported by Yellin and Mueckstein <ref> [YM86, Yel88] </ref>, who discuss a method to invert attribute grammars. Several programming language environments have multiple representations. The documents they manipulate are programs. 7 5 Query language The query language of HST is called PQL (parse tree query language).
Reference: [YM86] <author> D.M. Yellin and E.-M.M. Mueckstein. </author> <title> The automatic inversion of attribute grammars. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 12(5) </volume> <pages> 590-599, </pages> <month> May </month> <year> 1986. </year> <note> 11 12 to grammar G. 13 </note>
Reference-contexts: Grif [QV86, FQA88] allows definition of both full and partial views. Partial views are defined by describing which logical objects are visible in different views. Work on view updates with similar goals as ours has been reported by Yellin and Mueckstein <ref> [YM86, Yel88] </ref>, who discuss a method to invert attribute grammars. Several programming language environments have multiple representations. The documents they manipulate are programs. 7 5 Query language The query language of HST is called PQL (parse tree query language).
References-found: 24

