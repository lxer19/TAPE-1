URL: http://www.merl.com/reports/TR93-10/TR93-10.ps.gz
Refering-URL: http://www.merl.com/reports/TR93-10/index.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: ESTABLISHMENT OF ISOLATED FAILURE IMMUNE REAL-TIME CHANNELS IN HARTS  
Author: by Qin Zheng and Kang G. Shin 
Note: Submitted to IEEE Transactions on Networking. 201  
Address: 201 Broadway Cambridge, MA 02139  Ann Arbor, Michigan 48109-2122  Cambridge Massachusetts 02139  
Date: 93-10 June 8 1993  
Affiliation: Mitsubishi Electric Research Laboratories Cambridge Research Center  Mitsubishi Electric Research Laboratories, Inc.  Real-Time Computing Laboratory Department of Electrical Engineering and Computer Science The University of Michigan  Broadway  
Pubnum: Technical Report  
Abstract: Fault-tolerant, real-time communication is very important yet difficult to achieve. Traditional protocols like the TCP/IP achieve reliable communication through acknowledgment and retransmission schemes, where one gains the reliability at the cost of performance. In this paper, we discuss how this problem can be solved by using the concept of real-time channel [1] and exploring the inherent spatial redundancy of a given network topology. Specifically, we will show how isolated failure immune real-time channels can be established in wrapped hexagonal mesh networks which ensure timely delivery of messages in the presence of network component failures as long as the failures are isolated. This kind of fault-tolerance cannot be achieved with other commonly-known topologies like rings, rectangular meshes, and hypercubes. The proposed approach is to be implemented in an experimental distributed real-time system called HARTS [2]. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Ferrari and D. C. Verma, </author> <title> "A scheme for real-time channel establishment in wide-area networks," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. SAC-8, no. 3, </volume> <pages> pp. 368-379, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: Examples include circuit-switching transmission, synchronous transmission mode (STM), and the recently-proposed real-time channel <ref> [1, 3, 4] </ref>. Sending messages along a static path, however, reduces the fault-tolerance of real-time traffic, since a node/link failure in the path would disable the channel that runs over the path. To alleviate this problem, Zheng and Shin [5] proposed a semi-dynamic routing scheme for real-time channels. <p> If the channel can be established, the algorithm also calculates the link delay bounds d j 's which will be used to determine the deadlines of the channel's packets. Readers are referred to <ref> [1, 9, 3, 4] </ref> for a detailed discussion of real-time channels. 3 Isolated Failure Immune Real-Time Channels in HARTS This section discusses how real-time channels can be enhanced to be Isolated Failure Immune (IFI) in HARTS. <p> Algorithm 3.2 (Construction of an IFI path) . Step 1. Calculate m x ; m y ; m z for the source node v s using Algorithm 2.1. Notice that at most two of them can be non-zero. Step 2. Set i := 1 and node <ref> [1] </ref> := v s . <p> In Step 2, the initial rotating direction R for the secondary link is chosen such that if node <ref> [1] </ref> has two links both on shortest paths 3 to the destination nodes, node [1]:s will take one of them. In this way, the resulting IFI path needs less links and nodes than when doing otherwise. <p> Otherwise, the channel establishment request is rejected. Results in [3, 4] can be used for the calculation of the link delay bounds in Step 1. Let node [i]; i = 1; ; k be the nodes of an IFI path obtained from Algorithm 3.2, where node <ref> [1] </ref> is the source node and node [k] is the destination node. Let d [i]:p and d [i]:s be the delay bounds over the primary and secondary links of node [i], respectively. Then the end-to-end packet delivery delay bound in Step 2 can be calculated using the following algorithm. <p> Since i p and i s are always larger than i for i k 2, the maximum delay bound from node [i] to node [k] can be obtained from the above equations. If d <ref> [1] </ref> D, the IFI real-time channel can be established, and we need to determine the link delay bounds to be assigned to the channel. <p> Notice that there could be two links for i = k 2 or i = k 1. Step 2. Record all the links traversed as one goes from node <ref> [1] </ref> to node [k] using only the links recorded in Step 1. This gives a critical path from the source to the destination which has the end-to-end delay bound d [1] as calculated from Algorithm 3.3. Step 3. Let N be the total number of links on the critical path. <p> Step 2. Record all the links traversed as one goes from node <ref> [1] </ref> to node [k] using only the links recorded in Step 1. This gives a critical path from the source to the destination which has the end-to-end delay bound d [1] as calculated from Algorithm 3.3. Step 3. Let N be the total number of links on the critical path. <p> Algorithm 3.5 (Establishment of an IFI real-time channel) . Step 1. Calculate the minimum packet delay bounds d [i]:p min and d [i]:s min over the primary and secondary links of node [i]; i = 1; ; k 1. Step 2. Calculate the end-to-end delay bound d <ref> [1] </ref> from Algorithm 3.3. Step 3. If d [1] is larger than the user-requested end-to-end delay bound D, the channel request is rejected. Otherwise, the channel can be established with the link delay bounds calculated from Algorithm 3.4. We now give an example to demonstrate the above ideas. <p> Step 1. Calculate the minimum packet delay bounds d [i]:p min and d [i]:s min over the primary and secondary links of node [i]; i = 1; ; k 1. Step 2. Calculate the end-to-end delay bound d <ref> [1] </ref> from Algorithm 3.3. Step 3. If d [1] is larger than the user-requested end-to-end delay bound D, the channel request is rejected. Otherwise, the channel can be established with the link delay bounds calculated from Algorithm 3.4. We now give an example to demonstrate the above ideas. Figure 5 shows a portion of a hexagonal mesh. <p> We want to establish an IFI real-time channel from node 1 to node 8 with channel parameters (T; C; D) = (100; 5; 70). We first construct an IFI path from node 1 to node 8 using Algorithm 3.2. For i = 1, node <ref> [1] </ref> = node 1. (m x ; m y ; m z ) = (2; 0; 2). The initial rotating direction for the secondary link R = 1 since abs (m x ) &gt; 1 and m z 6= 0. <p> Then, for i = 1; ; 8, d [i]:p min = d [i]:s min = C = 5. Using Algorithm 3.3, d [i]'s are calculated and shown near each node in Figure 5. The requested real-time channel can be established since d <ref> [1] </ref> = 35 &lt; D = 70. The critical path can be determined by recording the links over which the maximum is achieved in Algorithm 3.3, which is in this example the ones marked by "//" in Figure 5.
Reference: [2] <author> K. G. Shin, </author> <title> "HARTS: A distributed real-time architecture," </title> <journal> IEEE Computer, </journal> <volume> vol. 24, no. 5, </volume> <pages> pp. 25-35, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Section 3 presents the schemes of establishing isolated failure immune real-time channels in HARTS. The paper concludes with Section 4. 2 HARTS and Real-time Channels HARTS is an experimental distributed real-time system currently being built in the Real-Time Computing Laboratory of the University of Michigan <ref> [2] </ref>. As shown in Fig. 3, the interconnection 2 network of HARTS is a wrapped hexagonal mesh which can be defined as follows. Definition 2.1 Let [a] b denote a mod b. <p> Intermediate nodes update these values to indicate the remaining number of hops to take in X, Y , and Z directions before forwarding the message. Hence m x = m y = m z = 0 indicates that the packet has reached its destination. The readers are referred to <ref> [6, 2] </ref> for a detailed account of the wrapped hexagonal mesh and its routing algorithm. To meet the requirement of real-time communication, the HARTS communication subsystem is designed to support real-time channels [8]. <p> From Algorithm 3.1, the primary link is calculated to be node [1]:p = L (1) = X, and the secondary link is node [1]:s = L (1) + 1 = Z. Set the next node to one which link Z leads to, then node <ref> [2] </ref> = node 2. Update m x ; m y ; m z for node [2] as follows. The direction of Z is Z, so u = Z, and v = X; w = Y . Also, s = 1. <p> Set the next node to one which link Z leads to, then node <ref> [2] </ref> = node 2. Update m x ; m y ; m z for node [2] as follows. The direction of Z is Z, so u = Z, and v = X; w = Y . Also, s = 1.
Reference: [3] <author> Q. Zheng and K. G. Shin, </author> <title> "On the ability of establishing real-time channels in point-to-point packet-switched networks," </title> <journal> IEEE Transactions on Communication (in press), </journal> <year> 1993. </year>
Reference-contexts: Examples include circuit-switching transmission, synchronous transmission mode (STM), and the recently-proposed real-time channel <ref> [1, 3, 4] </ref>. Sending messages along a static path, however, reduces the fault-tolerance of real-time traffic, since a node/link failure in the path would disable the channel that runs over the path. To alleviate this problem, Zheng and Shin [5] proposed a semi-dynamic routing scheme for real-time channels. <p> When several real-time packets contend for use of the same link, the packet with the earliest deadline is transmitted first. The advantages of using deadline scheduling are the minimization of contention delays and protection between established channels <ref> [3, 4] </ref>. To set up a real-time channel, the requesting process must determine two parameters, T and C, specifying its traffic generation pattern, where T is the minimum packet inter-generation time and C is the maximum packet transmission time (directly proportional to the maximum packet length). <p> sends a channel establishment request message containing T and C together with the end-to-end packet delay bound D and addresses of the source and destination nodes to a special node containing the Network Manager (NM), which maintains the information of all existing channels and executes the channel establishment algorithm of <ref> [3, 4] </ref> to check if the requested channel can be established over a specified route under the current network 4 load condition. <p> If the channel can be established, the algorithm also calculates the link delay bounds d j 's which will be used to determine the deadlines of the channel's packets. Readers are referred to <ref> [1, 9, 3, 4] </ref> for a detailed discussion of real-time channels. 3 Isolated Failure Immune Real-Time Channels in HARTS This section discusses how real-time channels can be enhanced to be Isolated Failure Immune (IFI) in HARTS. <p> Calculate the end-to-end delay bound using the link delay bounds. Step 3. If the end-to-end delay bound is not larger than the requested one, the channel can be established. Calculate the link delay bounds to be assigned to the channel. Otherwise, the channel establishment request is rejected. Results in <ref> [3, 4] </ref> can be used for the calculation of the link delay bounds in Step 1. Let node [i]; i = 1; ; k be the nodes of an IFI path obtained from Algorithm 3.2, where node [1] is the source node and node [k] is the destination node. <p> If d [1] D, the IFI real-time channel can be established, and we need to determine the link delay bounds to be assigned to the channel. As discussed in <ref> [3, 4] </ref>, the link delay bounds of the channel should be set as large as possible to reduce the channel's influence on the links' ability to establish more real-time channels in future. This can be done using the following algorithm. Algorithm 3.4 (Assignment of link delay bounds) . Step 1. <p> This means that more transmission bandwidth needs to be reserved for an IFI channel. This "over-reservation" reduces a network's ability of accommodating real-time channels. However, as discussed in <ref> [3, 4] </ref>, real-time channels make only "soft" reservation since any unused bandwidth can be used for non real-time traffic. In this sense, the "cost" of an IFI channel to non real-time traffic is the same as a basic channel.
Reference: [4] <author> Q. Zheng, </author> <title> Real-time Fault-tolerant Communication in Computer Networks, </title> <type> PhD thesis, </type> <institution> University of Michigan, </institution> <year> 1993. </year> <note> PostScript version of the thesis is available via anonymous FTP from ftp.eecs.umich.edu in directory outgoing/zheng. </note>
Reference-contexts: Examples include circuit-switching transmission, synchronous transmission mode (STM), and the recently-proposed real-time channel <ref> [1, 3, 4] </ref>. Sending messages along a static path, however, reduces the fault-tolerance of real-time traffic, since a node/link failure in the path would disable the channel that runs over the path. To alleviate this problem, Zheng and Shin [5] proposed a semi-dynamic routing scheme for real-time channels. <p> When several real-time packets contend for use of the same link, the packet with the earliest deadline is transmitted first. The advantages of using deadline scheduling are the minimization of contention delays and protection between established channels <ref> [3, 4] </ref>. To set up a real-time channel, the requesting process must determine two parameters, T and C, specifying its traffic generation pattern, where T is the minimum packet inter-generation time and C is the maximum packet transmission time (directly proportional to the maximum packet length). <p> sends a channel establishment request message containing T and C together with the end-to-end packet delay bound D and addresses of the source and destination nodes to a special node containing the Network Manager (NM), which maintains the information of all existing channels and executes the channel establishment algorithm of <ref> [3, 4] </ref> to check if the requested channel can be established over a specified route under the current network 4 load condition. <p> If the channel can be established, the algorithm also calculates the link delay bounds d j 's which will be used to determine the deadlines of the channel's packets. Readers are referred to <ref> [1, 9, 3, 4] </ref> for a detailed discussion of real-time channels. 3 Isolated Failure Immune Real-Time Channels in HARTS This section discusses how real-time channels can be enhanced to be Isolated Failure Immune (IFI) in HARTS. <p> Calculate the end-to-end delay bound using the link delay bounds. Step 3. If the end-to-end delay bound is not larger than the requested one, the channel can be established. Calculate the link delay bounds to be assigned to the channel. Otherwise, the channel establishment request is rejected. Results in <ref> [3, 4] </ref> can be used for the calculation of the link delay bounds in Step 1. Let node [i]; i = 1; ; k be the nodes of an IFI path obtained from Algorithm 3.2, where node [1] is the source node and node [k] is the destination node. <p> If d [1] D, the IFI real-time channel can be established, and we need to determine the link delay bounds to be assigned to the channel. As discussed in <ref> [3, 4] </ref>, the link delay bounds of the channel should be set as large as possible to reduce the channel's influence on the links' ability to establish more real-time channels in future. This can be done using the following algorithm. Algorithm 3.4 (Assignment of link delay bounds) . Step 1. <p> This means that more transmission bandwidth needs to be reserved for an IFI channel. This "over-reservation" reduces a network's ability of accommodating real-time channels. However, as discussed in <ref> [3, 4] </ref>, real-time channels make only "soft" reservation since any unused bandwidth can be used for non real-time traffic. In this sense, the "cost" of an IFI channel to non real-time traffic is the same as a basic channel.
Reference: [5] <author> Q. Zheng and K. G. Shin, </author> <title> "Fault-tolerant real-time communication in distributed computing systems," </title> <booktitle> in in Proc. 22nd Annual International Symposium on Fault-tolerant Computing, </booktitle> <pages> pp. 86 - 93, </pages> <year> 1992. </year>
Reference-contexts: Sending messages along a static path, however, reduces the fault-tolerance of real-time traffic, since a node/link failure in the path would disable the channel that runs over the path. To alleviate this problem, Zheng and Shin <ref> [5] </ref> proposed a semi-dynamic routing scheme for real-time channels. By reserving resources at some extra links and nodes, these real-time channels with extra links and nodes can tolerate any single node/link failure in the network. <p> Thus upgrade of the current basic real-time channel routing algorithm to the IFI real-time channel routing algorithm is extremely simple. The system can also be easily built to support different types of real-time channels ranging from basic, single-failure-immune (SFI) <ref> [5] </ref>, to IFI. Bit-by-bit feedback transmission links: The current HARTS is equipped with bit-by-bit feedback transmission links. Each receiver sends back every bit it receives from a sender. In this way, each node has continuous information about the status of its neighboring nodes.
Reference: [6] <author> M.-S. Chen, K. G. Shin, and D. D. Kandlur, </author> <title> "Addressing, routing and broadcasting in hexagonal mesh multiprocessors," </title> <journal> IEEE Trans. Computers, </journal> <volume> vol. 39, no. 1, </volume> <pages> pp. 10-18, </pages> <month> Jan-uary </month> <year> 1990. </year>
Reference-contexts: In the Real-time Computing Laboratory of the University of Michigan, we have been exploring various network topologies to solve this problem and have found a wrapped hexagonal mesh <ref> [6] </ref> to be isolated failure immune (IFI). An IFI real-time channel guarantees the timely delivery of messages in the presence of network component failures as long as the failures are isolated with respect to the channel. <p> It was proved in <ref> [6] </ref> that a wrapped hexagonal mesh is homogeneous. Consequently, any node can view itself as the center of the mesh. <p> Let m x ; m y , and m z be, respectively, the number of hops (negative values mean the moves in negative directions) from the source node to the destination node along the X; Y; and Z directions on a shortest path. The following routing algorithm <ref> [6] </ref> determines the values of m x , m y , and m z for the shortest paths from a source node s to a destination node d in a wrapped hexagonal mesh of size n: Algorithm 2.1 (Routing in HARTS) . Step 0. <p> Intermediate nodes update these values to indicate the remaining number of hops to take in X, Y , and Z directions before forwarding the message. Hence m x = m y = m z = 0 indicates that the packet has reached its destination. The readers are referred to <ref> [6, 2] </ref> for a detailed account of the wrapped hexagonal mesh and its routing algorithm. To meet the requirement of real-time communication, the HARTS communication subsystem is designed to support real-time channels [8].
Reference: [7] <author> A. M. Farley, </author> <title> "Networks immune to isolated failures," </title> <journal> Networks, </journal> <volume> vol. 11, </volume> <pages> pp. 255-268, </pages> <year> 1981. </year>
Reference-contexts: Another two types of non-isolated failures are the failures of the source and destination nodes. Fig. 2 shows an example of an IFI channel from node 1 to node 6 and one pattern of tolerable isolated failures. The isolated failure immune problem for undirected networks was first discussed in <ref> [7] </ref> where the authors proved that a 2-tree 1 is a minimum IFI network. In other words, any IFI network must contain a spanning 2-tree.
Reference: [8] <author> D. D. Kandlur and K. G. Shin, </author> <title> "A communication subsystem for HARTS: An experimental distributed real-time system," </title> <note> submitted for publication. </note>
Reference-contexts: The readers are referred to [6, 2] for a detailed account of the wrapped hexagonal mesh and its routing algorithm. To meet the requirement of real-time communication, the HARTS communication subsystem is designed to support real-time channels <ref> [8] </ref>. A real-time channel is a simplex virtual connection between the source and destination nodes which guarantees the delivery of packets within a user-specified end-to-end delay bound. Two techniques are used to achieve this goal: admission control of channels and deadline scheduling of packet transmissions.
Reference: [9] <author> D. D. Kandlur, K. G. Shin, and D. Ferrari, </author> <title> "Real-time communication in multi-hop networks," </title> <booktitle> in Proc. 11th Int. Conf. on Distributed Computer Systems, </booktitle> <pages> pp. 300-307. </pages> <publisher> IEEE, </publisher> <month> May </month> <year> 1991. </year>
Reference-contexts: If the channel can be established, the algorithm also calculates the link delay bounds d j 's which will be used to determine the deadlines of the channel's packets. Readers are referred to <ref> [1, 9, 3, 4] </ref> for a detailed discussion of real-time channels. 3 Isolated Failure Immune Real-Time Channels in HARTS This section discusses how real-time channels can be enhanced to be Isolated Failure Immune (IFI) in HARTS.
Reference: [10] <author> K. G. Shin, D. P. Kandlur, D. L. Kiskis, P. Dodd, H. Rosenberg, and A. Indiresan, </author> <title> "A distributed real-time operating system," </title> <journal> IEEE Software, </journal> <volume> vol. 9, no. 5, </volume> <pages> pp. 58-68, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Thus far, the researchers of the HARTS project have implemented basic real-time channels <ref> [10] </ref>. Upgrading the HARTS communication subsystem to accommodate IFI real-time channels will be easy by using the following features of HARTS architecture: Programmable Routing Controller: Built as a testbed for distributed computing systems, HARTS achieves the maximum flexibility by using a custom-designed programmable routing controller for each node.
References-found: 10

