URL: ftp://ftp.cs.brown.edu/pub/techreports/94/cs94-03.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-94-03.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Nancy M. Amato. </author> <title> An optimal algorithm for finding the separation of simple polygons. </title> <booktitle> In Proc. 3rd Workshop Algorithms Data Struct., volume 709 of Lecture Notes in Computer Science, </booktitle> <pages> pages 48-59. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: If both R 1 and R 2 are convex their separation can be computed in O (log h) time [7, 12, 5, 11]; if only one of them is convex an O (h)-time algorithm is given in [7]; if neither is convex, an optimal algorithm is recently given by Amato <ref> [1] </ref>, who improves the previous result of Kirkpatrick [18] from O (h log h) to O (h).
Reference: [2] <author> E. M. Arkin, J. S. B. Mitchell, and S. Suri. </author> <title> Optimal link path queries in a simple polygon. </title> <booktitle> In Proc. 3rd ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 269-279, </pages> <year> 1992. </year>
Reference-contexts: In [31], a scheme based on window partition can answer link distance queries from a fixed source in O (log n) time, after O (n) time preprocessing. The best known results are due to Arkin, Mitchell and Suri <ref> [2] </ref>. Their data structure uses O (n 3 ) space and preprocessing time, and supports minimum-link-path queries between two points and between two segments in optimal O (log n) time (plus O (k) if the k links are reported). <p> The previous best result <ref> [2] </ref> has query time O (log h log n) (and the same space and preprocessing time as ours). * We provide the first fully dynamic data structure for shortest-path queries between two convex polygons in the same region of a connected planar subdivision S. <p> Static Min-Link Paths Query Type Query Space Preprocessing Suri [31] one fixed point and one query point log n fl n fl n fl Arkin-Mitchell- two query points/segments log n fl n 3 n 3 Suri <ref> [2] </ref> two query convex polygons log h log n n 3 n 3 This paper two query convex polygons log h + log n fl n 3 n 3 fl optimal Table 3 Results for static minimum-link-path queries. geodesic hourglass between R 1 and R 2 is central to our method. <p> A straightforward method is to compute H G directly. As shown in <ref> [2] </ref>, we can compute the geodesic external tangents between R 1 and R 2 (and hence H G ) by a binary search mimicking the algorithm [25] for finding ordinary common tangents, where in each iteration we compute the shortest path between two chosen points rather than the segment joining them. <p> The data structure given by Arkin, 23 Mitchell and Suri <ref> [2] </ref> supports minimum-link-path queries between two points and between two segments inside P in optimal O (log n) time, and between two convex polygons R 1 and R 2 in time O (log h log n) (plus O (k) if the k links are reported), using O (n 3 ) space <p> Let H G be the geodesic hourglass of R 1 and R 2 , with geodesic tangent points a 1 ; b 1 2 R 1 and a 2 ; b 2 2 R 2 . As shown in <ref> [2] </ref>, a minimum-link path between the two segments s 1 = (a 1 ; b 1 ) and s 2 = (a 2 ; b 2 ) gives a desired minimum-link path between R 1 and R 2 , i.e., L (s 1 ; s 2 ) = L (R 1 <p> Otherwise (H G is closed), extend 1 and 2 to intersect R 1 and R 2 respectively at p and q via binary searches on R 1 and R 2 . Compute L (p; q) (and thus also d L (p; q)) by the algorithm of <ref> [2] </ref>. Report L (R 1 ; R 2 ) = L (p; q), d L (R 1 ; R 2 ) = d L (p; q) and stop. <p> Then e 1 ; ; e j partition G (p; q) into subchains that are always left-turning or always right-turning, namely, into inward convex subchains (see Fig. 16). It is shown that every inflection edge e 2 G (p; q) must be contained in L (p; q) <ref> [2, 3, 13] </ref>.
Reference: [3] <author> V. Chandru, S. K. Ghosh, A. Maheshwari, V. T. Rajan, and S. Saluja. </author> <title> N C-algorithms for minimum link path and related problems. </title> <type> Technical Report CS-90/3, </type> <institution> TATA inst., Bombay, India, </institution> <year> 1990. </year>
Reference-contexts: Their technique can also perform minimum-link-path queries between two convex polygons, however, in non-optimal O (log h log n) time. Also, efficient parallel algorithms are given in <ref> [3] </ref>. There are other results on the variations of the minimum-link-path problem. Efficient algorithms for link diameter and link center are given in [10, 14, 19, 17, 24, 23, 30]. A minimum-link path between two fixed points in a multiply connected polygon can be computed efficiently [22]. <p> Then e 1 ; ; e j partition G (p; q) into subchains that are always left-turning or always right-turning, namely, into inward convex subchains (see Fig. 16). It is shown that every inflection edge e 2 G (p; q) must be contained in L (p; q) <ref> [2, 3, 13] </ref>.
Reference: [4] <author> B. Chazelle. </author> <title> Triangulating a simple polygon in linear time. </title> <journal> Discrete Comput. Geom., </journal> <volume> 6 </volume> <pages> 485-524, </pages> <year> 1991. </year>
Reference-contexts: Point-location queries can also be performed in O (log n) time. The data structure uses O (n) space and can be built in O (n) time after triangulating P (again in O (n) time by Chazelle's linear-time triangulation algorithm <ref> [4] </ref>). We modify this data structure so that associated with the implicit representation of a shortest path G , there are two balanced binary trees respectively maintaining the inflection edges and the cusps on G in their path order.
Reference: [5] <author> B. Chazelle and D. P. Dobkin. </author> <title> Intersection of convex objects in two and three dimensions. </title> <journal> J. ACM, </journal> <volume> 34 </volume> <pages> 1-27, </pages> <year> 1987. </year>
Reference-contexts: If both R 1 and R 2 are convex their separation can be computed in O (log h) time <ref> [7, 12, 5, 11] </ref>; if only one of them is convex an O (h)-time algorithm is given in [7]; if neither is convex, an optimal algorithm is recently given by Amato [1], who improves the previous result of Kirkpatrick [18] from O (h log h) to O (h). <p> C R1 , from R 2 and C L2 , and from R 2 and C R2 , respectively). (a) Check whether R 1 intersects C L1 (viewing C L1 = G (l 1 ; x) as a convex polygon with edge (l 1 ; x) added) using the algorithm <ref> [5] </ref>, which runs in logarithmic time and also reports a common point g inside both R 1 and C L1 if they intersect. <p> We compute two shortest-path queries and extract four bounding convex chains in step 4. Step 5a invloves O (1) calls to algorithm <ref> [5] </ref>, and O (1) tangent computations and binary searches. Step 5 (a)i can be done in O (1) time, and step 5 (a)ii performs O (1) path extractions and tangent computations. Step 5b applies the computation of Lemma 3, which is a binary search.
Reference: [6] <author> Y.-J. Chiang, F. P. Preparata, and R. Tamassia. </author> <title> A unified approach to dynamic point location, ray shooting, and shortest paths in planar maps. </title> <booktitle> In Proc. 4th ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 44-53, </pages> <year> 1993. </year>
Reference-contexts: Although there has been a lot of work on the separation problem, the more general shortest-path problem for two objects in the presence of obstacle P has been previously studied only for the simple case when the objects are points, for which there exist efficient static [16] and dynamic <ref> [6, 15] </ref> solutions. The static technique of [16] supports two-point shortest-path queries in optimal O (log n) time (plus O (k) if the k edges of the path are reported), employing a data structure that uses O (n) space and can be built in linear time. <p> The static technique of [16] supports two-point shortest-path queries in optimal O (log n) time (plus O (k) if the k edges of the path are reported), employing a data structure that uses O (n) space and can be built in linear time. The dynamic technique of <ref> [6] </ref> performs shortest-path queries between two points in the same region of a connected planar subdivision S with n vertices in O (log 3 n) time (plus O (k) to report the k edges of the path), using a data structure with O (n log n) space that can support updates <p> As we shall see later, the notion of 2 Dynamic Shortest Paths Query Type Query Space Update Chiang-Preparata-Tamassia <ref> [6] </ref> two query points log 3 n n log n log 3 n Goodrich-Tamassia [15] two query points log 2 n n fl log 2 n This paper two query convex polygons log h + log 2 n n fl log 2 n fl optimal Table 2 Results for dynamic shortest-path
Reference: [7] <author> F. Chin and C. A. Wang. </author> <title> Optimal algorithms for the intersection and the minimum distance problems between planar polygons. </title> <journal> IEEE Trans. Comput., </journal> <volume> C-32(12):1203-1207, </volume> <year> 1983. </year>
Reference-contexts: If both R 1 and R 2 are convex their separation can be computed in O (log h) time <ref> [7, 12, 5, 11] </ref>; if only one of them is convex an O (h)-time algorithm is given in [7]; if neither is convex, an optimal algorithm is recently given by Amato [1], who improves the previous result of Kirkpatrick [18] from O (h log h) to O (h). <p> If both R 1 and R 2 are convex their separation can be computed in O (log h) time [7, 12, 5, 11]; if only one of them is convex an O (h)-time algorithm is given in <ref> [7] </ref>; if neither is convex, an optimal algorithm is recently given by Amato [1], who improves the previous result of Kirkpatrick [18] from O (h log h) to O (h). <p> Ignoring P and using any one of the methods for computing the separation of two convex polygons <ref> [7, 11, 12] </ref>, we can find p 0 2 R 1 and q 0 2 R 2 with length (p 0 ; q 0 ) = (R 1 ; R 2 ) in O (log h) time. Now we compute G (p 0 ; q 0 ). <p> Algorithm Visible-Path 1. Ignore P and compute the separation (R 1 ; R 2 ) of R 1 and R 2 by any one of the methods <ref> [7, 11, 12] </ref>, which gives two points p 0 2 R 1 and q 0 2 R 2 such that length (p 0 ; q 0 ) = (R 1 ; R 2 ). 2. Compute G (p 0 ; q 0 ).
Reference: [8] <author> M. de Berg. </author> <title> On rectilinear link distance. </title> <journal> Comput. Geom. Theory Appl., </journal> <volume> 1(1) </volume> <pages> 13-34, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: Efficient algorithms for link diameter and link center are given in [10, 14, 19, 17, 24, 23, 30]. A minimum-link path between two fixed points in a multiply connected polygon can be computed efficiently [22]. Sequential and parallel algorithms for rectilinear link distance are respectively given by de Berg <ref> [8] </ref> 1 and Lingas et al. [20]. De Berg et al. [9] study the problem of finding a shortest rectilinear path among rectilinear obstacles.
Reference: [9] <author> M. de Berg, M. van Kreveld, B. J. Nilsson, and M. H. Overmars. </author> <title> Finding shortest paths in the presence of orthogonal obstacles using a combined L 1 and link metric. </title> <booktitle> In Proc. 2nd Scand. Workshop Algorithm Theory, volume 447 of Lecture Notes in Computer Science, </booktitle> <pages> pages 213-224. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: A minimum-link path between two fixed points in a multiply connected polygon can be computed efficiently [22]. Sequential and parallel algorithms for rectilinear link distance are respectively given by de Berg [8] 1 and Lingas et al. [20]. De Berg et al. <ref> [9] </ref> study the problem of finding a shortest rectilinear path among rectilinear obstacles. Mitchell et al. [21] consider the problem of finding a shortest path with at most K links between two query points inside a simple polygon, where K is an input parameter.
Reference: [10] <author> H. N. Djidjev, A. Lingas, and J.-R. Sack. </author> <title> An O(n log n) algorithm for computing the link center of a simple polygon. </title> <journal> Discrete Comput. Geom., </journal> <volume> 8 </volume> <pages> 131-152, </pages> <year> 1992. </year>
Reference-contexts: Also, efficient parallel algorithms are given in [3]. There are other results on the variations of the minimum-link-path problem. Efficient algorithms for link diameter and link center are given in <ref> [10, 14, 19, 17, 24, 23, 30] </ref>. A minimum-link path between two fixed points in a multiply connected polygon can be computed efficiently [22]. Sequential and parallel algorithms for rectilinear link distance are respectively given by de Berg [8] 1 and Lingas et al. [20].
Reference: [11] <author> D. P. Dobkin and D. G. Kirkpatrick. </author> <title> Determining the separation of preprocessed polyhedra - a unified approach. </title> <booktitle> In Proc. 17th Internat. Colloq. Automata Lang. Program., volume 443 of Lecture Notes in Computer Science, </booktitle> <pages> pages 400-413. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: The related problem of computing the length of the shortest path between two polygons R 1 and R 2 without obstacle P has been extensively studied; this problem is also known as finding the separation of the two polygons <ref> [11] </ref>, denoted by (R 1 ; R 2 ). <p> If both R 1 and R 2 are convex their separation can be computed in O (log h) time <ref> [7, 12, 5, 11] </ref>; if only one of them is convex an O (h)-time algorithm is given in [7]; if neither is convex, an optimal algorithm is recently given by Amato [1], who improves the previous result of Kirkpatrick [18] from O (h log h) to O (h). <p> Ignoring P and using any one of the methods for computing the separation of two convex polygons <ref> [7, 11, 12] </ref>, we can find p 0 2 R 1 and q 0 2 R 2 with length (p 0 ; q 0 ) = (R 1 ; R 2 ) in O (log h) time. Now we compute G (p 0 ; q 0 ). <p> Algorithm Visible-Path 1. Ignore P and compute the separation (R 1 ; R 2 ) of R 1 and R 2 by any one of the methods <ref> [7, 11, 12] </ref>, which gives two points p 0 2 R 1 and q 0 2 R 2 such that length (p 0 ; q 0 ) = (R 1 ; R 2 ). 2. Compute G (p 0 ; q 0 ).
Reference: [12] <author> H. Edelsbrunner. </author> <title> Computing the extreme distances between two convex polygons. </title> <journal> J. Algorithms, </journal> <volume> 6 </volume> <pages> 213-224, </pages> <year> 1985. </year>
Reference-contexts: If both R 1 and R 2 are convex their separation can be computed in O (log h) time <ref> [7, 12, 5, 11] </ref>; if only one of them is convex an O (h)-time algorithm is given in [7]; if neither is convex, an optimal algorithm is recently given by Amato [1], who improves the previous result of Kirkpatrick [18] from O (h log h) to O (h). <p> Ignoring P and using any one of the methods for computing the separation of two convex polygons <ref> [7, 11, 12] </ref>, we can find p 0 2 R 1 and q 0 2 R 2 with length (p 0 ; q 0 ) = (R 1 ; R 2 ) in O (log h) time. Now we compute G (p 0 ; q 0 ). <p> Algorithm Visible-Path 1. Ignore P and compute the separation (R 1 ; R 2 ) of R 1 and R 2 by any one of the methods <ref> [7, 11, 12] </ref>, which gives two points p 0 2 R 1 and q 0 2 R 2 such that length (p 0 ; q 0 ) = (R 1 ; R 2 ). 2. Compute G (p 0 ; q 0 ).
Reference: [13] <author> S. K. Ghosh. </author> <title> Computing visibility polygon from a convex set and related problems. </title> <journal> J. Algorithms, </journal> <volume> 12 </volume> <pages> 75-95, </pages> <year> 1991. </year>
Reference-contexts: Then e 1 ; ; e j partition G (p; q) into subchains that are always left-turning or always right-turning, namely, into inward convex subchains (see Fig. 16). It is shown that every inflection edge e 2 G (p; q) must be contained in L (p; q) <ref> [2, 3, 13] </ref>.
Reference: [14] <author> S. K. Ghosh and A. Maheshwari. </author> <title> Parallel algorithms for all minimum link paths and link center problems. </title> <booktitle> In Proc. 3rd Scand. Workshop Algorithm Theory, volume 621 of Lecture Notes in Computer Science, </booktitle> <pages> pages 106-117. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Also, efficient parallel algorithms are given in [3]. There are other results on the variations of the minimum-link-path problem. Efficient algorithms for link diameter and link center are given in <ref> [10, 14, 19, 17, 24, 23, 30] </ref>. A minimum-link path between two fixed points in a multiply connected polygon can be computed efficiently [22]. Sequential and parallel algorithms for rectilinear link distance are respectively given by de Berg [8] 1 and Lingas et al. [20].
Reference: [15] <author> M. T. Goodrich and R. Tamassia. </author> <title> Dynamic ray shooting and shortest paths via balanced geodesic triangulations. </title> <booktitle> In Proc. 9th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 318-327, </pages> <year> 1993. </year>
Reference-contexts: Although there has been a lot of work on the separation problem, the more general shortest-path problem for two objects in the presence of obstacle P has been previously studied only for the simple case when the objects are points, for which there exist efficient static [16] and dynamic <ref> [6, 15] </ref> solutions. The static technique of [16] supports two-point shortest-path queries in optimal O (log n) time (plus O (k) if the k edges of the path are reported), employing a data structure that uses O (n) space and can be built in linear time. <p> The very recent result of <ref> [15] </ref> improves the query and update times to O (log 2 n), with space complexity also improved to O (n). The minimum-link path problem between two points has been extensively studied. <p> As we shall see later, the notion of 2 Dynamic Shortest Paths Query Type Query Space Update Chiang-Preparata-Tamassia [6] two query points log 3 n n log n log 3 n Goodrich-Tamassia <ref> [15] </ref> two query points log 2 n n fl log 2 n This paper two query convex polygons log h + log 2 n n fl log 2 n fl optimal Table 2 Results for dynamic shortest-path queries. <p> The above repertory of operations is complete for connected subdivisions. That is, any connected subdivision S can be constructed "from scratch" using only the above operations. We make use of the dynamic data structure of Goodrich and Tamassia <ref> [15] </ref>. Their technique supports two-point shortest-path queries and ray-shooting queries, which consist of finding the first edge or vertex of S hit by a query ray. Their data structure is based on geodesic triangulation of each region of S. <p> A geodesic triangulation of P is a decomposition of P 's interior into geodesic triangles whose boundaries do not cross. The technique <ref> [15] </ref> dynamically maintains such triangulations by viewing their dual trees as balanced trees. <p> The two-point shortest path is obtained by locating the two points and then walking from geodesic triangle to geodesic triangle either following a boundary or taking a shortcut through a common tangent <ref> [15] </ref>. Let n be the current number of vertices in S. Using the data structure of [15], we can perform each of the above update operations as well as ray-shooting and two-point shortest-path queries in O (log 2 n) time, using O (n) space, where in O (log 2 n) time <p> The two-point shortest path is obtained by locating the two points and then walking from geodesic triangle to geodesic triangle either following a boundary or taking a shortcut through a common tangent <ref> [15] </ref>. Let n be the current number of vertices in S. Using the data structure of [15], we can perform each of the above update operations as well as ray-shooting and two-point shortest-path queries in O (log 2 n) time, using O (n) space, where in O (log 2 n) time we get an implicit representation (a balanced binary tree) and the length of the queried shortest <p> in O (log 2 n) time, using O (n) space, where in O (log 2 n) time we get an implicit representation (a balanced binary tree) and the length of the queried shortest path, and using additional O (k) time to retrieve the k links we get the actual path <ref> [15] </ref>. Again we enhance this data structure so that associated with the implicit representation of a shortest path G , there are two balanced binary trees respectively maintaining the inflection edges and the cusps on G in their path order.
Reference: [16] <author> L. J. Guibas and J. Hershberger. </author> <title> Optimal shortest path queries in a simple polygon. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 39 </volume> <pages> 126-152, </pages> <year> 1989. </year>
Reference-contexts: Although there has been a lot of work on the separation problem, the more general shortest-path problem for two objects in the presence of obstacle P has been previously studied only for the simple case when the objects are points, for which there exist efficient static <ref> [16] </ref> and dynamic [6, 15] solutions. The static technique of [16] supports two-point shortest-path queries in optimal O (log n) time (plus O (k) if the k edges of the path are reported), employing a data structure that uses O (n) space and can be built in linear time. <p> of work on the separation problem, the more general shortest-path problem for two objects in the presence of obstacle P has been previously studied only for the simple case when the objects are points, for which there exist efficient static <ref> [16] </ref> and dynamic [6, 15] solutions. The static technique of [16] supports two-point shortest-path queries in optimal O (log n) time (plus O (k) if the k edges of the path are reported), employing a data structure that uses O (n) space and can be built in linear time. <p> No such data structure was known before even for two-point queries. We summarize the comparisions of our results with the previous ones in Tables 1-4. Static Shortest Paths Query Type Query Space Preprocessing Guibas-Hershberger <ref> [16] </ref> two query points log n fl n fl n fl This paper two query convex polygons log h + log n fl n fl n fl fl optimal Table 1 Results for static shortest-path queries. We briefly outline our techniques. <p> The data structure of Guibas and Hershberger <ref> [16] </ref> computes the shortest path G (p; q) between any two points p and q inside P in O (log n) time, where in O (log n) time we get an implicit representation (a balanced binary tree) and the length of G (p; q), and using additional O (k) time to
Reference: [17] <author> Y. Ke. </author> <title> An efficient algorithm for link-distance problems. </title> <booktitle> In Proc. 5th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 69-78, </pages> <year> 1989. </year>
Reference-contexts: The minimum-link path problem between two points has been extensively studied. In many applications, such as robotics, motion planning, VLSI and computer vision, the link distance often provides a more natural measure of path complexity than the Euclidean distance <ref> [17, 22, 27, 29, 31] </ref>. For example, in a robot system, a straight-line navigation is often much cheaper than rotation, thus it is desirable to minimize the number of turns in path planning [27, 31]. <p> Also, efficient parallel algorithms are given in [3]. There are other results on the variations of the minimum-link-path problem. Efficient algorithms for link diameter and link center are given in <ref> [10, 14, 19, 17, 24, 23, 30] </ref>. A minimum-link path between two fixed points in a multiply connected polygon can be computed efficiently [22]. Sequential and parallel algorithms for rectilinear link distance are respectively given by de Berg [8] 1 and Lingas et al. [20].
Reference: [18] <author> D. G. Kirkpatrick. </author> <title> Efficient computation of continuous skeletons. </title> <booktitle> In Proc. 20th Annu. IEEE 29 Sympos. Found. Comput. Sci., </booktitle> <pages> pages 18-27, </pages> <year> 1979. </year>
Reference-contexts: convex their separation can be computed in O (log h) time [7, 12, 5, 11]; if only one of them is convex an O (h)-time algorithm is given in [7]; if neither is convex, an optimal algorithm is recently given by Amato [1], who improves the previous result of Kirkpatrick <ref> [18] </ref> from O (h log h) to O (h).
Reference: [19] <author> W. Lenhart, R. Pollack, J.-R. Sack, R. Seidel, M. Sharir, S. Suri, G. T. Toussaint, S. White-sides, and C. K. Yap. </author> <title> Computing the link center of a simple polygon. </title> <journal> Discrete Comput. Geom., </journal> <volume> 3 </volume> <pages> 281-293, </pages> <year> 1988. </year>
Reference-contexts: Also, efficient parallel algorithms are given in [3]. There are other results on the variations of the minimum-link-path problem. Efficient algorithms for link diameter and link center are given in <ref> [10, 14, 19, 17, 24, 23, 30] </ref>. A minimum-link path between two fixed points in a multiply connected polygon can be computed efficiently [22]. Sequential and parallel algorithms for rectilinear link distance are respectively given by de Berg [8] 1 and Lingas et al. [20].
Reference: [20] <author> A. Lingas, A. Maheshwari, and J.-R. Sack. </author> <title> Parallel algorithms for rectilinear link distance problems. </title> <booktitle> In Proc. 7th IEEE Internat. Parallel Process. Sympos. IEEE Computer Society, </booktitle> <year> 1993. </year>
Reference-contexts: A minimum-link path between two fixed points in a multiply connected polygon can be computed efficiently [22]. Sequential and parallel algorithms for rectilinear link distance are respectively given by de Berg [8] 1 and Lingas et al. <ref> [20] </ref>. De Berg et al. [9] study the problem of finding a shortest rectilinear path among rectilinear obstacles. Mitchell et al. [21] consider the problem of finding a shortest path with at most K links between two query points inside a simple polygon, where K is an input parameter.
Reference: [21] <author> J. S. B. Mitchell, C. Piatko, and E. M. Arkin. </author> <title> Computing a shortest k-link path in a polygon. </title> <booktitle> In Proc. 33rd Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 573-582, </pages> <year> 1992. </year>
Reference-contexts: Sequential and parallel algorithms for rectilinear link distance are respectively given by de Berg [8] 1 and Lingas et al. [20]. De Berg et al. [9] study the problem of finding a shortest rectilinear path among rectilinear obstacles. Mitchell et al. <ref> [21] </ref> consider the problem of finding a shortest path with at most K links between two query points inside a simple polygon, where K is an input parameter. Our main results are outlined as follows. * Let P be a simple polygon with n vertices.
Reference: [22] <author> J. S. B. Mitchell, G. Rote, and G. Woeginger. </author> <title> Minimum-link paths among obstacles in the plane. </title> <journal> Algorithmica, </journal> <volume> 8 </volume> <pages> 431-459, </pages> <year> 1992. </year>
Reference-contexts: The minimum-link path problem between two points has been extensively studied. In many applications, such as robotics, motion planning, VLSI and computer vision, the link distance often provides a more natural measure of path complexity than the Euclidean distance <ref> [17, 22, 27, 29, 31] </ref>. For example, in a robot system, a straight-line navigation is often much cheaper than rotation, thus it is desirable to minimize the number of turns in path planning [27, 31]. <p> There are other results on the variations of the minimum-link-path problem. Efficient algorithms for link diameter and link center are given in [10, 14, 19, 17, 24, 23, 30]. A minimum-link path between two fixed points in a multiply connected polygon can be computed efficiently <ref> [22] </ref>. Sequential and parallel algorithms for rectilinear link distance are respectively given by de Berg [8] 1 and Lingas et al. [20]. De Berg et al. [9] study the problem of finding a shortest rectilinear path among rectilinear obstacles.
Reference: [23] <author> B. J. Nilsson and S. Schuierer. </author> <title> An optimal algorithm for the rectilinear link center of a rectilinear polygon. </title> <booktitle> In Proc. 2nd Workshop Algorithms Data Struct., volume 519 of Lecture Notes in Computer Science, </booktitle> <pages> pages 249-260. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Also, efficient parallel algorithms are given in [3]. There are other results on the variations of the minimum-link-path problem. Efficient algorithms for link diameter and link center are given in <ref> [10, 14, 19, 17, 24, 23, 30] </ref>. A minimum-link path between two fixed points in a multiply connected polygon can be computed efficiently [22]. Sequential and parallel algorithms for rectilinear link distance are respectively given by de Berg [8] 1 and Lingas et al. [20].
Reference: [24] <author> Bengt J. Nilsson and Sven Schuierer. </author> <title> Computing the rectilinear link diameter of a polygon. In Computational Geometry | Methods, </title> <booktitle> Algorithms and Applications: Proc. Internat. Workshop Comput. Geom. CG '91, volume 553 of Lecture Notes in Computer Science, </booktitle> <pages> pages 203-215. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Also, efficient parallel algorithms are given in [3]. There are other results on the variations of the minimum-link-path problem. Efficient algorithms for link diameter and link center are given in <ref> [10, 14, 19, 17, 24, 23, 30] </ref>. A minimum-link path between two fixed points in a multiply connected polygon can be computed efficiently [22]. Sequential and parallel algorithms for rectilinear link distance are respectively given by de Berg [8] 1 and Lingas et al. [20].
Reference: [25] <author> M. H. Overmars and J. van Leeuwen. </author> <title> Maintenance of configurations in the plane. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 23 </volume> <pages> 166-204, </pages> <year> 1981. </year>
Reference-contexts: A straightforward method is to compute H G directly. As shown in [2], we can compute the geodesic external tangents between R 1 and R 2 (and hence H G ) by a binary search mimicking the algorithm <ref> [25] </ref> for finding ordinary common tangents, where in each iteration we compute the shortest path between two chosen points rather than the segment joining them. However, this 6 results in a computation of O (log h log n) time. Also, it seems difficult to compute H G in optimal time. <p> We first describe the algorithm and then justify its correctness. Algorithm Pseudo-Hourglass 1. Ignore P and compute the ordinary external common tangents (a 0 1 ; a 0 1 ; b 0 2 ) between R 1 and R 2 , using the algorithm of Overmars and van Leeuwen <ref> [25] </ref>, where a 0 1 ; b 0 a 0 2 2 R 2 . Let s 0 1 ; b 0 2 = (a 0 2 ). Compute shortest paths 1 = G (a 0 1 ; a 0 2 = G (b 0 2 ). <p> If they are disjoint (i.e., neither has an inflection edge) then the hourglass H 0 = H (s 0 2 ) is open. In this case s 0 1 and s 0 2 are mutually visible, implying that R 1 and R 2 are mutually visible. Use algorithm <ref> [25] </ref> to compute an internal common tangent l between 1 and 2 , report fopen with visibility link lg and stop. 2. Else ( 1 and 2 are not disjoint) H 0 is closed.
Reference: [26] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: an Introduction. </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1985. </year>
Reference-contexts: Sections 4, 5 and 6 are devoted to dynamic shortest-path, static minimum-link-path, and dynamic minimum-link-path queries, respectively. 2 Preliminaries For the geometric terminology used in this paper, see <ref> [26] </ref>. A connected planar subdivision S is a subdivision of the plane into polygonal regions whose underlying planar graph is connected. Thus each region of S is a simple polygon P .
Reference: [27] <author> J. H. Reif and J. A. Storer. </author> <title> Minimizing turns for discrete movement in the interior of a polygon. </title> <journal> IEEE J. Robot. </journal> <volume> Autom., </volume> <pages> pages 182-193, </pages> <year> 1987. </year>
Reference-contexts: The minimum-link path problem between two points has been extensively studied. In many applications, such as robotics, motion planning, VLSI and computer vision, the link distance often provides a more natural measure of path complexity than the Euclidean distance <ref> [17, 22, 27, 29, 31] </ref>. For example, in a robot system, a straight-line navigation is often much cheaper than rotation, thus it is desirable to minimize the number of turns in path planning [27, 31]. <p> For example, in a robot system, a straight-line navigation is often much cheaper than rotation, thus it is desirable to minimize the number of turns in path planning <ref> [27, 31] </ref>. Also, in graph drawing, it is often desirable to minimize the number of bends [28, 32]. All previously known techniques for the minimum-link path problem are restricted to the static environment, where updates to the problem instance are not allowed.
Reference: [28] <author> J. A. Storer. </author> <title> On minimal node-cost planar embeddings. </title> <journal> Networks, </journal> <volume> 14 </volume> <pages> 181-212, </pages> <year> 1984. </year>
Reference-contexts: For example, in a robot system, a straight-line navigation is often much cheaper than rotation, thus it is desirable to minimize the number of turns in path planning [27, 31]. Also, in graph drawing, it is often desirable to minimize the number of bends <ref> [28, 32] </ref>. All previously known techniques for the minimum-link path problem are restricted to the static environment, where updates to the problem instance are not allowed. The method of [29] computes a minimum-link path between two fixed points inside a simple polygon in linear time.
Reference: [29] <author> S. Suri. </author> <title> A linear time algorithm for minimum link paths inside a simple polygon. Comput. Vision Graph. </title> <journal> Image Process., </journal> <volume> 35 </volume> <pages> 99-110, </pages> <year> 1986. </year>
Reference-contexts: The minimum-link path problem between two points has been extensively studied. In many applications, such as robotics, motion planning, VLSI and computer vision, the link distance often provides a more natural measure of path complexity than the Euclidean distance <ref> [17, 22, 27, 29, 31] </ref>. For example, in a robot system, a straight-line navigation is often much cheaper than rotation, thus it is desirable to minimize the number of turns in path planning [27, 31]. <p> Also, in graph drawing, it is often desirable to minimize the number of bends [28, 32]. All previously known techniques for the minimum-link path problem are restricted to the static environment, where updates to the problem instance are not allowed. The method of <ref> [29] </ref> computes a minimum-link path between two fixed points inside a simple polygon in linear time. In [31], a scheme based on window partition can answer link distance queries from a fixed source in O (log n) time, after O (n) time preprocessing.
Reference: [30] <author> S. Suri. </author> <title> Minimum link paths in polygons and related problems. </title> <type> Ph.D. thesis, </type> <institution> Dept. Comput. Sci., Johns Hopkins Univ., Baltimore, MD, </institution> <year> 1987. </year>
Reference-contexts: Also, efficient parallel algorithms are given in [3]. There are other results on the variations of the minimum-link-path problem. Efficient algorithms for link diameter and link center are given in <ref> [10, 14, 19, 17, 24, 23, 30] </ref>. A minimum-link path between two fixed points in a multiply connected polygon can be computed efficiently [22]. Sequential and parallel algorithms for rectilinear link distance are respectively given by de Berg [8] 1 and Lingas et al. [20].
Reference: [31] <author> S. Suri. </author> <title> On some link distance problems in a simple polygon. </title> <journal> IEEE Trans. Robot. Autom., </journal> <volume> 6 </volume> <pages> 108-113, </pages> <year> 1990. </year>
Reference-contexts: The minimum-link path problem between two points has been extensively studied. In many applications, such as robotics, motion planning, VLSI and computer vision, the link distance often provides a more natural measure of path complexity than the Euclidean distance <ref> [17, 22, 27, 29, 31] </ref>. For example, in a robot system, a straight-line navigation is often much cheaper than rotation, thus it is desirable to minimize the number of turns in path planning [27, 31]. <p> For example, in a robot system, a straight-line navigation is often much cheaper than rotation, thus it is desirable to minimize the number of turns in path planning <ref> [27, 31] </ref>. Also, in graph drawing, it is often desirable to minimize the number of bends [28, 32]. All previously known techniques for the minimum-link path problem are restricted to the static environment, where updates to the problem instance are not allowed. <p> All previously known techniques for the minimum-link path problem are restricted to the static environment, where updates to the problem instance are not allowed. The method of [29] computes a minimum-link path between two fixed points inside a simple polygon in linear time. In <ref> [31] </ref>, a scheme based on window partition can answer link distance queries from a fixed source in O (log n) time, after O (n) time preprocessing. The best known results are due to Arkin, Mitchell and Suri [2]. <p> Static Min-Link Paths Query Type Query Space Preprocessing Suri <ref> [31] </ref> one fixed point and one query point log n fl n fl n fl Arkin-Mitchell- two query points/segments log n fl n 3 n 3 Suri [2] two query convex polygons log h log n n 3 n 3 This paper two query convex polygons log h + log n <p> A polygon is monotone if and only if it has no cusps. The notion of window partition was introduced in <ref> [31] </ref>. Given a point or a line segment s in region P , let W P (s) denote the partition of P into maximally-connected subregions with the same link distance from s; W P (s) is called the window partition of P with respect to s. <p> On the contrary, a minimum-link path is not unique and may turn at any point inside P . Adopting the terminology of <ref> [31] </ref>, we define the (unique) greedy minimum-link path L (p; q) to be the minimum-link path whose first and last links are respectively the extensions of the first and last links of G (p; q), and whose other links are the extensions of the windows of W P (p).
Reference: [32] <author> R. Tamassia. </author> <title> On embedding a graph in the grid with the minimum number of bends. </title> <journal> SIAM J. Comput., </journal> <volume> 16(3) </volume> <pages> 421-444, </pages> <year> 1987. </year> <month> 30 </month>
Reference-contexts: For example, in a robot system, a straight-line navigation is often much cheaper than rotation, thus it is desirable to minimize the number of turns in path planning [27, 31]. Also, in graph drawing, it is often desirable to minimize the number of bends <ref> [28, 32] </ref>. All previously known techniques for the minimum-link path problem are restricted to the static environment, where updates to the problem instance are not allowed. The method of [29] computes a minimum-link path between two fixed points inside a simple polygon in linear time.
References-found: 32

