URL: http://swarm.cs.wustl.edu/~picco/papers/icse98.ps.gz
Refering-URL: http://swarm.cs.wustl.edu/~picco/listpub.type.html
Root-URL: 
Email: mbaldi@polito.it  picco@polito.it  
Phone: +39-11-564-7067  +39-11-564-7008  
Title: Evaluating the Tradeoffs of Mobile Code Design Paradigms in Network Management Applications  
Author: Mario Baldi Gian Pietro Picco 
Keyword: Mobile code, network management, management by delegation, mobile agent, remote evaluation.  
Address: C.so Duca degli Abruzzi, 24 I-10129, Italy  C.so Duca degli Abruzzi, 24 I-10129, Italy  
Affiliation: Dip. Automatica e Informatica Politecnico di Torino  Dip. Automatica e Informatica Politecnico di Torino  
Abstract: The question of whether technologies supporting mobile code are bringing significant benefits to the design and implementation of distributed applications is still an open one. Even more difficult is to identify precisely under which conditions a design exploiting mobile code is preferable over a traditional one. In this work, we present an in-depth evaluation of several mobile code design paradigms against the traditional client-server architecture, within the application domain of network management. The evaluation is centered around a quantitative model, which is used to determine precisely the conditions for the selection of a design paradigm minimizing the network traffic related to management. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Baldi, S. Gai, and G. P. Picco. </author> <title> Exploiting Code Mobility in Decentralized and Flexible Network Management. </title> <booktitle> In Mobile Agents, volume 1219 of LNCS, </booktitle> <pages> pages 13-26. </pages> <publisher> Springer, </publisher> <month> Apr. </month> <year> 1997. </year>
Reference-contexts: The original idea has been interpreted in many ways by researchers leading to prototypes which are often based on relatively limited "mobile code" technology, like interpreted Perl scripts. Management by delegation is presently under standardization by IETF and ISO working groups [10]. As discussed in <ref> [1] </ref>, the characterization of mobile code made earlier shows that management by delegation can benefit from the recent developments in code mobility. 3 MODEL OF MANAGEMENT TRAFFIC In this section, we derive a model for the traffic generated by network management.
Reference: [2] <author> A. Carzaniga, G. P. Picco, and G. Vigna. </author> <title> Designing Distributed Applications with Mobile Code Paradigms. </title> <booktitle> In Proc. of the 19 th Int. Conf. on Software Engineering, </booktitle> <pages> pages 22-32. </pages> <publisher> ACM Press, </publisher> <year> 1997. </year>
Reference-contexts: These arguments are often supported only by qualitative and superficial considerations, rather than by a careful analysis of the problem, possibly supported by quantitative evidence. Previous work <ref> [2] </ref> presented a characterization of mobile code that abstracted from the details of the different technologies by deriving design paradigms that can be adopted for structuring distributed applications. <p> Code mobility can be described at a higher level of abstraction, without delving into the details of the technology. In this work, we focus on the description provided in <ref> [2] </ref>. Here, mobile code design paradigms are identified as the architectural styles that can be used to exploit code mobility in the design of a distributed application. Design paradigms are characterized by components and the interactions between them.
Reference: [3] <author> J. </author> <title> Case et al. Structure of Management Information for version 2 of the Simple Network Management Protocol. </title> <booktitle> RFC 1902, </booktitle> <month> Jan. </month> <year> 1996. </year>
Reference-contexts: Due to this situation, access to devices in the congested area becomes difficult and slow. Centralization is being addressed by IETF and ISO by adapting their management architecture, as with SN-MPv2 <ref> [3] </ref>. However, experimentation showed that these new proposals do not provide yet the desired level of decentralization needed to cope with large networks.
Reference: [4] <author> G. Cugola, C. Ghezzi, G. P. Picco, and G. Vigna. </author> <title> Analyzing Mobile Code Languages. </title> <booktitle> In Mobile Object Systems, volume 1222 of LNCS, </booktitle> <pages> pages 93-111. </pages> <publisher> Springer, </publisher> <month> Apr. </month> <year> 1997. </year>
Reference-contexts: When the Mobile Agent (MA) paradigm is used, the client component knows how to perform the service, but 2 A classification of mobile code technologies, design paradigms, and applications can be found in [5]. Moreover, <ref> [4] </ref> analyzes the impact of mobility on the design of a programming language. lacks the resources. Unlike REV, the whole computational component is migrated to the site where the resources reside. There, the component performs service execution with local access to resources.
Reference: [5] <author> A. Fuggetta, G. P. Picco, and G. Vigna. </author> <title> Understanding Code Mobility. </title> <type> Technical report, </type> <institution> Politec-nico di Milano, Italy, </institution> <month> July </month> <year> 1997. </year> <note> Submitted. </note>
Reference-contexts: It is still unclear how to exploit the new technologies, concepts, and paradigms enabled by these systems, and which are the advantages that can be potentially benefited <ref> [5] </ref>. Many researchers suggest that a major benefit provided by mobile code is the capability to reduce network communication by moving client's knowledge close to server's resources, thus accessing them locally. <p> When the Mobile Agent (MA) paradigm is used, the client component knows how to perform the service, but 2 A classification of mobile code technologies, design paradigms, and applications can be found in <ref> [5] </ref>. Moreover, [4] analyzes the impact of mobility on the design of a programming language. lacks the resources. Unlike REV, the whole computational component is migrated to the site where the resources reside. There, the component performs service execution with local access to resources.
Reference: [6] <author> G. Goldszmidt and Y. Yemini. </author> <title> Distributed Management by Delegation. </title> <booktitle> In Proc. of the 15 th Int. Conf. on Distributed Computing, </booktitle> <month> June </month> <year> 1995. </year>
Reference-contexts: The approaches to network management that involve code mobility are usually grouped under the label management by delegation. Management by delegation has been conceived originally before the appearance of Internet-based MCSs, as a means to cope with the micro-management phenomenon of centralized management. The original proposal, further extended in <ref> [6] </ref>, identifies an architecture for the dynamic uploading of management scripts on network devices using a combination of the REV and CS paradigms. In this architecture, management scripts are delegated to perform management operations on the device on behalf of the NMS.
Reference: [7] <author> K. Jones. </author> <title> Internet's SNMP and ISO's CMIP Protocols for Network Management. </title> <journal> Int. J. of Network Management, </journal> <pages> pages 130-137, </pages> <month> Sept. </month> <year> 1994. </year>
Reference-contexts: Some final remarks are provided in Section 6. 2 BACKGROUND 2.1 Network Management Network management is split in two nearly separate worlds <ref> [7] </ref>: IETF management, which relies on the Simple Network Management Protocol (SNMP) and its derivatives, and ISO management, which relies on the Common Management Information Protocol (CMIP). Both protocols assume a centralized management architecture based on a client-server paradigm.
Reference: [8] <author> D. Lange. </author> <title> Java Aglet Application Programming Interface (J-AAPI). IBM White Paper, </title> <month> Feb. </month> <year> 1997. </year>
Reference-contexts: The goal is to show how to refine the model to cope with the details of the technologies used to implement design paradigms and how to use the model to actually determine the best design choice. We used SNMP as an implementation of the CS paradigm and Java Aglets <ref> [8] </ref> to implement the mobile code paradigms, because of their diffusion and level of support. For each implementation, the traffic generated has been measured and the overhead of each protocol layer down to the IP one has been isolated 6 .
Reference: [9] <author> J.-P. Martin-Flatin and S. Znaty. </author> <title> A Simple Typology of Distributed Network Management Paradigms. </title> <booktitle> In Proc. of the 8 th IFIP/IEEE Int. Workshop on Distributed Systems: Operations & Management (DSOM'97), </booktitle> <month> Oct. </month> <year> 1997. </year>
Reference-contexts: However, experimentation showed that these new proposals do not provide yet the desired level of decentralization needed to cope with large networks. The interested reader can find an extensive survey of approaches to network management in <ref> [9] </ref>. 2.2 Why Mobile Code in Network Management? A first issue is the possibility to perform semantic compression of information. Suppose a table in the MIB has to be searched for a value matching some criteria.
Reference: [10] <author> J. Schonwalder. </author> <title> Network Management by Delegation From Research Prototypes Towards Standards. </title> <booktitle> In Proc. of the 8 th Joint European Networking Conf., </booktitle> <month> May </month> <year> 1997. </year>
Reference-contexts: The original idea has been interpreted in many ways by researchers leading to prototypes which are often based on relatively limited "mobile code" technology, like interpreted Perl scripts. Management by delegation is presently under standardization by IETF and ISO working groups <ref> [10] </ref>. As discussed in [1], the characterization of mobile code made earlier shows that management by delegation can benefit from the recent developments in code mobility. 3 MODEL OF MANAGEMENT TRAFFIC In this section, we derive a model for the traffic generated by network management.
References-found: 10

