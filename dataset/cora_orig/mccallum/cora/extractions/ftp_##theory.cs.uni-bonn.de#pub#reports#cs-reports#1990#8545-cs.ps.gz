URL: ftp://theory.cs.uni-bonn.de/pub/reports/cs-reports/1990/8545-cs.ps.gz
Refering-URL: http://cs.uni-bonn.de/info5/publications/CS-1990-en.html
Root-URL: http://cs.uni-bonn.de
Title: On the Complexity of Genuinely Polynomial Computation  
Author: Marek Karpinski Friedhelm Meyer auf der Heide 
Note: Research supported by the International  by the DFG Grant KA 673/4-1 and by the SERC Grant GR-E 68297. Research supported by the DFG Grant ME 872/1-3.  
Address: Bonn, 5300 Bonn 1  4790 Paderborn  
Affiliation: Dept. of Computer Science University of  Dept. of Computer Science University of Paderborn,  Computer Science Institute, Berkeley, California,  
Abstract: We present separation results on genuinely (or strongly) time bounded sequential, parallel and non-deterministic complexity classes defined by RAMs with fixed set of arithmetic operations. In particular, we separate non-uniform polynomial time from non-uniform parallel polynomial time for the set of operations f+; ; flg (answering a question of [M 88]), and uniform deterministic polynomial time from uniform non-deterministic polynomial time for the set of operations f+; ; DIV c g, where DIV c denotes a restricted integer division operation. 
Abstract-found: 1
Intro-found: 1
Reference: [BJM 88] <author> Babai, L., </author> <title> Just, </title> <editor> B., and Meyer auf der Heide, F., </editor> <title> On the Limits of Computation with the Floor Function, </title> <booktitle> Information and Computation 78 (1988), </booktitle> <pages> pp. 99-107. 9 </pages>
Reference-contexts: The best known genuine time bound comes from the simplex algorithm and is exponential. It is a challenging open problem to find a genuinely polynomial algorithm. Steps in this direction can be found in [M 83] or [T 86]. b) Integer programming It is shown in <ref> [BJM 88] </ref> that for this problem no genuine algorithm exists, i.e. every algorithm has a uniform runtime which grows to infinity with the binary input length, even if the number of integer input variables is fixed.
Reference: [BO 83] <author> Ben-Or, M., </author> <title> Lower Bounds for Algebraic Computation Trees, </title> <booktitle> Proc. 15 th ACM STOC (1983), </booktitle> <pages> pp. 80-86. </pages>
Reference: [BM 75] <author> Borodin, A., and Munro, I., </author> <title> The Computational Complexity of Algebraic and Numeric Problems, </title> <publisher> Elsevier Computer Science Library, </publisher> <year> 1975. </year>
Reference: [C 85] <author> Cook, S. A., </author> <title> A Taxonomy of Problems with Fast Parallel Algorithms, </title> <booktitle> Information and Control 64 (1985), </booktitle> <pages> pp. 2-22. </pages>
Reference: [JMW 88] <editor> Just, B., Meyer auf der Heide, F., and Widgerson, A., </editor> <title> On Computations with Integer Division, </title> <booktitle> Rairo Theoretical Informatics and Applications 23(1) (1989), </booktitle> <pages> pp. 101-111. </pages>
Reference: [K 84] <author> Karmakar, N., </author> <title> A New Polynomial Time Algorithm for Linear Programming, </title> <booktitle> Proc. 16 th ACM STOC (1984), </booktitle> <pages> pp. 302-311. </pages>
Reference-contexts: Examples are sorting, searching, weighted matching, knapsack, travelling salesman, etc. Two very interesting problems in this context are the following: a) Linear programming The known polynomial algorithms see e. g. <ref> [K 84] </ref> are not genuinely polynomial, i.e. their uniform runtine depends on the binary input length, not just on the number of integer inputs. The best known genuine time bound comes from the simplex algorithm and is exponential. It is a challenging open problem to find a genuinely polynomial algorithm.
Reference: [KR 88] <author> Karp, R. M., and Remachandran, V., </author> <title> A Survey of Parallel Algorithms for Shared-Memory Machines, </title> <note> Research Report No. UCB/CSD 88/407, </note> <institution> University of California, </institution> <note> Berkeley (1988); to appear in: Handbook of Theoretical Computer Science, North Hol-land. </note>
Reference-contexts: M accepts L ae IN fl , if it computes its characteristic function. Non-deterministic and parallel RAMs (cf. <ref> [KR 88] </ref>) are defined as usual. We shall consider the following complexity classes: S-P , S-NP, S-Parallel, S-NC. In what follows "polynomially time-bounded" will mean genuinely polynomially time-bounded. S-P := fL ae IN fl ; there is a polynomially time-bounded S-RAM accepting Lg.
Reference: [M 83] <author> Meggido, N., </author> <title> Towards a Genuinely Polynomial Algorithm for Linear Programming, </title> <journal> SIAM J. Comp. </journal> <volume> 12 (1983), </volume> <pages> pp. 347-353. </pages>
Reference-contexts: The best known genuine time bound comes from the simplex algorithm and is exponential. It is a challenging open problem to find a genuinely polynomial algorithm. Steps in this direction can be found in <ref> [M 83] </ref> or [T 86]. b) Integer programming It is shown in [BJM 88] that for this problem no genuine algorithm exists, i.e. every algorithm has a uniform runtime which grows to infinity with the binary input length, even if the number of integer input variables is fixed.
Reference: [M 84] <editor> Meyer auf der Heide, F., </editor> <title> A Polynomial Linear Search Algorithm for the n-Dimensional Knapsack Problem, </title> <editor> J. </editor> <booktitle> ACM 31 (1984), </booktitle> <pages> pp. 668-676. </pages>
Reference: [M 85] <editor> Meyer auf der Heide, F., </editor> <title> Simulating Probabilistic by Deterministic Algebraic Computation Trees, </title> <booktitle> Theoretical Computer Science 41 (1985), </booktitle> <pages> pp. 325-330. </pages>
Reference-contexts: For operations f+; ; flg, non-uniform polynomial time = non-uniform random polynomial time <ref> [M 85] </ref>. In this paper we try to lay the foundations of a complexity theory of genuinely polynomial computations (for the survey paper on the topic see [M 89]) and prove some basic separation results.
Reference: [M 88] <editor> Meyer auf der Heide, F. </editor> <title> Fast Algorithms for n-Dimensional Restrictions of Hard Problems, </title> <editor> J. </editor> <booktitle> ACM 35 (1988), </booktitle> <pages> pp. 740-747. </pages>
Reference-contexts: There are also results that show how the computation power explodes if we allow non-uniformity: For operations f+; g, non-uniform polynomial time = non-uniform parallel polynomial time where 2 poly (n) processors are allowed ([M 84], <ref> [M 88] </ref>). For operations f+; ; flg, non-uniform polynomial time = non-uniform random polynomial time [M 85]. In this paper we try to lay the foundations of a complexity theory of genuinely polynomial computations (for the survey paper on the topic see [M 89]) and prove some basic separation results. <p> Note that for (i) equality holds for the operation set f+; g (see above). (i) answers a question posed in <ref> [M 88] </ref>. 2. Computation Models and Complexity Classes A Random Access Machine with the arithmetic operation set S ae f+; ; fl; DIV ; DIV c ; MODg consists of a finite program, an input tape, an output tape and infinitely many registers numbered 0, 1, 2 : : :.
Reference: [M 89] <editor> Meyer auf der Heide, F., </editor> <title> On Genuinely Time Bounded Computations, </title> <booktitle> Proc. 6 th STACS (1988), </booktitle> <pages> pp. 1-16. </pages>
Reference-contexts: This is true even for a very powerful operation set: evaluating any analytic function or applying integer division is allowed. There are a lot more results concerning computability and lower bounds for S-RAMs (see e. g. <ref> [M 89] </ref>). All these results have in common that they are even true for non-uniform S-RAMs. <p> For operations f+; ; flg, non-uniform polynomial time = non-uniform random polynomial time [M 85]. In this paper we try to lay the foundations of a complexity theory of genuinely polynomial computations (for the survey paper on the topic see <ref> [M 89] </ref>) and prove some basic separation results. For a given operation set S, we define the complexity classes S-NP, S-P , S-Parallel, S-NC.
Reference: [S 79] <author> Schonhage, A., </author> <title> On the Power of Random Access Machines, </title> <booktitle> Proc. 6 th ICALP (1979), </booktitle> <pages> pp. 520-529. </pages>
Reference: [SY 82] <author> Steele, J. M., and Yao, A. C., </author> <title> Lower Bounds for Algebraic Decision Trees, </title> <editor> J. </editor> <booktitle> of Algorithms 3 (1982), </booktitle> <pages> pp. 1-8. </pages>
Reference: [S 84] <author> Strassen, V., </author> <title> Algebraische Berechnungskomplexitat, </title> <booktitle> Perspectives in Mathematics, Anniversary of Oberwolfach 1984, </booktitle> <publisher> Birkhauser Verlag, </publisher> <address> Basel, </address> <year> 1984. </year>
Reference: [T 86] <author> Tardos, E., </author> <title> A Strongly Polynomial Algorithm to Solve Combinatorial Linear Programs, </title> <booktitle> Operations Research 34 (1986), </booktitle> <pages> pp. 250-256. 10 </pages>
Reference-contexts: The best known genuine time bound comes from the simplex algorithm and is exponential. It is a challenging open problem to find a genuinely polynomial algorithm. Steps in this direction can be found in [M 83] or <ref> [T 86] </ref>. b) Integer programming It is shown in [BJM 88] that for this problem no genuine algorithm exists, i.e. every algorithm has a uniform runtime which grows to infinity with the binary input length, even if the number of integer input variables is fixed.
References-found: 16

