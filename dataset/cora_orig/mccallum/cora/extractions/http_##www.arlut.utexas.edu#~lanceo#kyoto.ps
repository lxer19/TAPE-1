URL: http://www.arlut.utexas.edu/~lanceo/kyoto.ps
Refering-URL: 
Root-URL: 
Email: miranker@cs.utexas.edu, lanceo@arlut.utexas.edu  
Title: An Overview of the VenusDB Active Multidatabase System encapsulates the details of data access. Although
Author: Daniel P. Miranker and Lance Obermeyer 
Note: The Venus compiler is readily extended by virtue of an abstract interface, the AMI, that  
Address: Austin, TX 78712  
Affiliation: Applied Research Laboratories The University of Texas at Austin  
Abstract: VenusDB is a C++ embedded, forward-chaining rule language and compiler that includes linguistic elements and runtime support for accessing multiple databases across multiple platforms. Multidatabase access was a natural evolutionary step for Venus. Evaluation of Venus using an expert-database application revealed the need for explicit syntax for the expression of event conditions. Thus, VenusDB provides for both event-condition-action (ECA) rules typical of active-database systems and condition action rules typical of expert systems and expert-database systems. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Batory, D, J. Thomas, and M. Sirkin. </author> <title> Reengineering a Complex Application Using a Scaleable Data Structure Compiler. </title> <booktitle> In Proceedings of the 1994 ACM SIGSOFT Conference, </booktitle> <year> 1994. </year> <note> 2 Brant, </note> <author> D., T. Grose, B. Lofaso, and D. P. Miranker. </author> <title> Effects of Database Size on Rule System Performance: Five Case Studies. </title> <booktitle> In Proceedings of the 17 International Conference on Very Large Databases, </booktitle> <year> 1991. </year>
Reference-contexts: A special challenge behind this research has been the determination of an appropriate abstraction for the interface to the data sources. The clearest algorithmic description of the interface can be found in Batory and Thomas <ref> [1] </ref>. The key elements of the abstraction involved identifying a cursor-based definition of LEAPS, thus data could be streamed into the inference engine. Elements of the internal state and sequencing in LEAPS has been mapped to precise cursor semantics.
Reference: 3. <author> Browne, J. C., and et.al. </author> <title> Modularity in Rule-Based Programming. </title> <journal> International Journal on Artificial Intelligence Tools, </journal> <volume> 4(1), </volume> <year> 1995. </year>
Reference-contexts: We feel that the VenusDB infrastructure and implementation results in a loose form of multidatabase, since a single rule can transparently access data from multiple preexisting heterogeneous databases. Our works starts with the Venus system <ref> [3] </ref>, which is a general purpose rule environment originally developed to support embedded hard-deadline real-time applications. Venus includes the Venus rule language and a compiled execution environment. The Venus language is forward-chaining and embedded in C++.
Reference: 4. <author> Ceri, S., and J. Widom. </author> <title> Managing Semantic Heterogeneity with Production Rules and Persistent Queues. </title> <booktitle> In Proceedings of the 19 th International Conference on Very Large Databases, </booktitle> <year> 1993. </year>
Reference-contexts: The integration of active properties with multiple databases may serve as a programming infrastructure that solves other problems in cooperative database including resolution of semantic inconsistencies <ref> [4] </ref>. We feel that the VenusDB infrastructure and implementation results in a loose form of multidatabase, since a single rule can transparently access data from multiple preexisting heterogeneous databases.
Reference: 5. <author> Chakravarthy, S. </author> <title> A Comparative Evaluation of Active Relational Databases. </title> <type> Technical Report UF-CIS-TR-93-002. </type> <institution> Computer and Information Sciences, University of Florida, </institution> <year> 1993. </year>
Reference: 6. <author> Forgy, C. </author> <title> OPS5 Users Manual. </title> <type> Technical Report CMU-CS-81-135. </type> <institution> Carnegie-Mellon University, </institution> <year> 1981. </year>
Reference-contexts: This segregation of the rulebase into active and inactive groups based on the event was a critical part of the implementation. VenusDB VenusDB attempts to unify active database systems with expert database systems by supporting event specification through ECA rules and supporting Venus (OPS5 <ref> [6] </ref> derived) execution semantics. Event Specification VenusDB implements its ECA language by adding an event specification to the standard Venus language. The only supported events are the database events insert, update, and remove. Existentially quantified variables are sensitive only to insert and update.
Reference: 7. <author> Forgy, C., </author> <title> RETE: A Fast Match Algorithm for the Many Pattern/Many Object Pattern Match Problem. </title> <journal> Artificial Intelligence, </journal> <volume> 19, </volume> <year> 1982. </year>
Reference-contexts: The LEAPS algorithm can retain the operational semantics defined by the TREAT [10] and RETE <ref> [7] </ref> match algorithms and can also provide stronger performance guarantees than its predecessors due to reduced asymptotic algorithmic complexity. In particular, LEAPS requires only linear space vs exponential space for TREAT and RETE [11]. <p> Abstract Machine Interface Venus is based on a demand-driven matching algorithm. Until recently, the best (and still most popular) match algorithms have been discrimination networks like TREAT [10] and RETE <ref> [7] </ref>. These, and virtually all other match algorithms that support the execution of forward-chaining systems, have asymptotic algorithmic space complexity that grows exponentially in the size of the rules.
Reference: 8. <author> Hanson, E. and J. Widom. </author> <title> An Overview of Production Rules in Database Systems. </title> <journal> The Knowledge Engineering Review, </journal> <volume> 8(2), </volume> <year> 1993. </year>
Reference: 9. <author> McCarthy, D. R. and U. Dayal. </author> <title> The Architecture of an Active Database Management System. </title> <booktitle> In Proceedings of the 1989 ACM SIGMOD International Conference on the Management of Data, </booktitle> <year> 1989. </year>
Reference-contexts: In databases that do not support triggers, some form of application specific inline wrapper function is necessary. Signaling may be on committed or uncommitted data, depending upon the application. If committed data is signaled, then VenusDB will, by necessity, operate in a detached coupling mode <ref> [9] </ref>. If uncommitted data is signaled, then VenusDB will operate in either immediate or deferred coupling mode. If this is the case, then the rule system must be activated and allowed to run before a commit is issued.
Reference: 10. <author> Miranker, D. P., and B. Lofaso. </author> <title> The Organization and Performance of a TREAT-Based Production System Compiler. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 3(1), </volume> <year> 1991. </year>
Reference-contexts: The LEAPS algorithm can retain the operational semantics defined by the TREAT <ref> [10] </ref> and RETE [7] match algorithms and can also provide stronger performance guarantees than its predecessors due to reduced asymptotic algorithmic complexity. In particular, LEAPS requires only linear space vs exponential space for TREAT and RETE [11]. <p> Abstract Machine Interface Venus is based on a demand-driven matching algorithm. Until recently, the best (and still most popular) match algorithms have been discrimination networks like TREAT <ref> [10] </ref> and RETE [7]. These, and virtually all other match algorithms that support the execution of forward-chaining systems, have asymptotic algorithmic space complexity that grows exponentially in the size of the rules.
Reference: 11. <author> Miranker, D. P., D. Brant, B. J. Lofaso, and D. Gadbois. </author> <title> On the Performance of Lazy Matching in Production Systems. </title> <booktitle> In Proceedings of the 1990 National Conference on Artificial Intelligence, </booktitle> <year> 1990. </year>
Reference-contexts: The LEAPS algorithm can retain the operational semantics defined by the TREAT [10] and RETE [7] match algorithms and can also provide stronger performance guarantees than its predecessors due to reduced asymptotic algorithmic complexity. In particular, LEAPS requires only linear space vs exponential space for TREAT and RETE <ref> [11] </ref>. We feel the space requirement is essential in a database environment, where any space requirement above linear can easily exhaust system resources. These properties are equally important for both embedded real-time systems and active and expert database applications. <p> This violates the once semantics of VenusDB. The LEAPS solution to this is to maintain shadow elements, which are special data elements that block subsequent firings of a rule on a specific combination of data elements <ref> [11] </ref>. A shadow element may need to be created whenever an element is removed from a container that has an active universally quantified cursor variable. An existing shadow element may safely be removed when there are no active universally quantified cursor variables over the container.
Reference: 12. <author> Obermeyer, L., D. P. Miranker, and D. </author> <title> Brant. Selective Indexing Speeds Production Systems. </title> <booktitle> In Proceedings of the 7 th International Conference on Tools with Artificial Intelligence , 1995. </booktitle>
Reference-contexts: C++ code is generated, primarily by traversing the forms. Optional inputs to the optimization phase of the compiler include schema information consisting of the physical capabilities of the databases (especially available indices) and query plans instructing the compiler to output specific rule execution plans for specified rules <ref> [12] </ref>. Abstract Machine Interface Venus is based on a demand-driven matching algorithm. Until recently, the best (and still most popular) match algorithms have been discrimination networks like TREAT [10] and RETE [7].
Reference: 13. <author> Obermeyer, L., L. Warshaw, and D. P. Miranker. </author> <title> Porting an Expert Database Application to an Active Database: An Experience Report. </title> <booktitle> In Proceedings of the Workshop on Databases: Active and Real-Time, </booktitle> <year> 1996. </year>
Reference-contexts: It was run on all data, once at the end of the month. We felt that the continuous receipt of contracts and pools made this program an excellent candidate for implementation on an active database. Therefore, we ported the program to VenusDB <ref> [13] </ref>.
Reference: 14. <author> Stolfo, S. and et.al. </author> <title> The ALEXSYS Mortgage Pool Allocation Expert System: A Case Study of Speeding Up Rule-based Programs. </title> <institution> Columbia University Department of Computer Sciences and Center for Advanced Technology, </institution> <year> 1990. </year>
Reference-contexts: In a database environment where evaluating a condition and executing an action are significantly more costly (main memory speed vs. disk access speed), reducing the number of rule evaluations is imperative. Application Requirements Our analysis of application requirements is based largely on our experience with the ALEXSYS program <ref> [14] </ref>. That program is from the domain of finance. It takes items from inventory (collections of individual mortgages with similar characteristics called pools) and matches them with orders (orders to buy mortgages called contracts) according to a variety of government regulations.
Reference: 15. <author> Stonebraker; M. </author> <title> The Integration of Rule Systems and Database Systems. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 4(5), </volume> <year> 1992. </year>
Reference: 16. <author> Warren, D. H. D. </author> <title> An Abstract Prolog Instruction Set. </title> <type> Technical Note 309. </type> <institution> Artificial Intelligence Center, SRI International, </institution> <year> 1993. </year>
Reference-contexts: One consequence is that as the systems matured, encapsulating access to the underlying data became easier. Frankly, the motivation has been a clean definition of a target instruction set for rule-language compilers based on LEAPS and TREAT, similar to the Warren abstract machine (WAM) for Prolog <ref> [16] </ref> and the unnamed abstract instruction set developed for the RETE match. It is a fortunate coincidence that the abstract instruction set (AMI) for LEAPS allowed the current Venus compiler to be easility extended to use data from a variety of sources. <p> VenusDB Compiler Rules C++ Compiler AMI Implementation Libraries & other code Schemas Query Plans VenusDB executes by issuing commands from the abstract machine interface, an instruction set used by LEAPS programs. The AMI is modeled after the Warren abstract machine, which defines the instruction set used by Prolog programs <ref> [16] </ref>. The purpose of the AMI is to encapsulate all database functionality behind a common interface. The AMI is defined by a set of abstract C++ classes.
Reference: 17. <author> Warshaw, L. and D. P. Miranker. </author> <title> A Case Study of Venus and a Declarative Bases for Rule Modules. </title> <booktitle> In Proceedings of the 5 th Conference on Information and Knowledge Management, </booktitle> <year> 1996. </year>
Reference-contexts: The nested state model enables explicit, nonprocedural semantics for structured rule-based programming. A case study comparing Venus and OPS5 demonstrated dramatic improvements in four quantitative measures of code quality, suggesting that programmer productivity using Venus is much greater than in OPS and OPS-derived languages <ref> [17] </ref>. The parameters to a module may be both scalar values and collections of objects. The syntax for expressing rules is basically a legal C++ function of type rule containing a single if statement. An additional clause, plus overloaded definitions of * and ? introduce quantification and inferencing over collections.
References-found: 16

