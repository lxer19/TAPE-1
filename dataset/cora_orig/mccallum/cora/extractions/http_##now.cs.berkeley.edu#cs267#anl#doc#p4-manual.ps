URL: http://now.cs.berkeley.edu/cs267/anl/doc/p4-manual.ps
Refering-URL: http://now.cs.berkeley.edu/cs267/lectures/lecture7.html
Root-URL: http://www.cs.berkeley.edu
Phone: 60439-4801  
Title: Distribution Category:  User's Guide to the p4 Parallel Programming System  
Author: Mathematics and by Ralph Butler* and Ewing Lusk 
Note: This work was supported in part by the Applied Mathematical Sciences subprogram of the Office of Energy Research under Contract W-31-109-Eng-38. *Also of The  
Date: October 1992 (Revised, April 1994)  
Address: 9700 South Cass Avenue Argonne, IL  
Affiliation: Computer Science (UC-405) ARGONNE NATIONAL LABORATORY  Mathematics and Computer Science Division  University of North Florida, Department of Computer Science, Jacksonville, Florida  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> J. Boyle, R. Butler, T. Disz, B. Glickfeld, E. Lusk, R. Overbeek, J. Patterson, and R. Stevens. </author> <title> Portable Programs for Parallel Processors. </title> <publisher> Holt, Rinehart, and Winston, </publisher> <year> 1987. </year>
Reference-contexts: A paper describing its functions and use is [2]. Its predecessor was the m4-based "Argonne macros" system described in the Holt, Rinehart, and Winston book Portable Programs for Parallel Processors, by Lusk, Overbeek, et al., from which p4 takes its name <ref> [1] </ref>. The current p4 system maintains the same basic computational models described there (monitors for the shared-memory model, message-passing for the distributed-memory model, and support for combining the two models) while significantly increasing ease and flexibility of use. See 4 [Getting Started], page 6 for a simple example. <p> Good places to learn about the monitor concept in general are [3] and [5]. The specific approach taken by p4 is described in <ref> [1] </ref>. P4 provides several useful monitors (p4_barrier_t, p4_getsub_monitor_t, p4_askfor_monitor_t) as well as a general monitor type to help the user in constructing his own monitors (p4_monitor_t). 11.3 Monitor-Building Primitives The following functions can be used to construct monitors. <p> process called p4_progend) 0 : a problem was obtained and ``problem'' points to it 1 : problem solved by exhaustion, i.e. no more problems to get n &gt; 1 : a process found a solution and called p4_probend with code n For a detailed discussion of the "askfor" monitor, see <ref> [1] </ref>. int p4_update (af,putprob_fxn,problem) p4_askfor_monitor_t *af; int (*putprob_fxn)(); VOID *problem; updates the problem pool being managed by the askfor monitor.
Reference: [2] <author> Ralph Butler and Ewing Lusk. </author> <title> Monitors, messages, and clusters: the p4 parallel programming system. </title> <journal> Parallel Computing, </journal> <volume> 20, </volume> <month> April </month> <year> 1994. </year> <note> See also Argonne National Laboratory preprint MCS-P362-0493. </note>
Reference-contexts: 1 Introduction P4 is a library of macros and subroutines developed at Argonne National Laboratory for programming a variety of parallel machines. A paper describing its functions and use is <ref> [2] </ref>. Its predecessor was the m4-based "Argonne macros" system described in the Holt, Rinehart, and Winston book Portable Programs for Parallel Processors, by Lusk, Overbeek, et al., from which p4 takes its name [1].
Reference: [3] <author> Per Brinch Hansen. </author> <title> The Architecture of Concurrent Programs. </title> <publisher> Prentice-Hall, Inc., </publisher> <year> 1977. </year>
Reference-contexts: VOID p4_shfree (p) char *p; frees memory obtained with p4_shmalloc. Compare with p4_free. 11 FUNCTIONS FOR SHARED MEMORY 23 11.2 Shared Memory Data Types The abstraction provided by p4 for managing data in shared memory is monitors. Good places to learn about the monitor concept in general are <ref> [3] </ref> and [5]. The specific approach taken by p4 is described in [1]. P4 provides several useful monitors (p4_barrier_t, p4_getsub_monitor_t, p4_askfor_monitor_t) as well as a general monitor type to help the user in constructing his own monitors (p4_monitor_t). 11.3 Monitor-Building Primitives The following functions can be used to construct monitors.
Reference: [4] <author> Virginia Herrarte and Ewing Lusk. </author> <title> Studying parallel program behavior with upshot. </title> <type> Technical Report ANL-91/15, </type> <institution> Argonne National Laboratory, Argonne, </institution> <address> IL 60439, </address> <year> 1991. </year>
Reference-contexts: It works on Suns. 18 Creating Logfiles for Upshot P4 is distributed with a set of routines for creating logfiles (see `README' in the `p4/alog' directory. The resulting logfiles can be examined by upshot, distributed separately. For details about upshot, see <ref> [4] </ref>. The `p4/alog' directory contains a package (ALOG) for creating logs of time-stamped events, that is of general utility, outside of p4. The timestamps are obtained from various microsecond-level resolution timers on various machines. The portable microsecond timing package is contained in the `usc' subdirectory. <p> This is accomplished with the program `mergelogs', found in the `bin' subdirectory. To merge the logfiles, do mergelogs alogfile.p* &gt; myprog.log rm alogfile.p* The resulting logfile can be examined by upshot or some other logfile examination facility. See <ref> [4] </ref> for details of the logfile format. On networks of workstations and some distributed memory machisnes, the microsecond timers on the various processors are synchronized.
Reference: [5] <author> C. A. R. Hoare. </author> <title> Monitors: an operating system structuring concept. </title> <booktitle> Comunications of the ACM, </booktitle> <pages> pages 549-557, </pages> <month> October </month> <year> 1974. </year> <note> This copy was produced on May 16, </note> <year> 1994. </year>
Reference-contexts: Compare with p4_free. 11 FUNCTIONS FOR SHARED MEMORY 23 11.2 Shared Memory Data Types The abstraction provided by p4 for managing data in shared memory is monitors. Good places to learn about the monitor concept in general are [3] and <ref> [5] </ref>. The specific approach taken by p4 is described in [1]. P4 provides several useful monitors (p4_barrier_t, p4_getsub_monitor_t, p4_askfor_monitor_t) as well as a general monitor type to help the user in constructing his own monitors (p4_monitor_t). 11.3 Monitor-Building Primitives The following functions can be used to construct monitors.
References-found: 5

