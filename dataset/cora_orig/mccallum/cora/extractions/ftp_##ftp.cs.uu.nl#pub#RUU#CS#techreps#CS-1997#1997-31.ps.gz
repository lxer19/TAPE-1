URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1997/1997-31.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Author: Hans L. Bodlaender 
Abstract: Treewidth: Algorithmic techniques and results fl Abstract This paper gives an overview of several results and techniques for graphs algorithms that compute the treewidth of a graph or that solve otherwise intractable problems when restricted graphs with bounded treewidth more efficiently. Also, several results on graph minors are reviewed. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. A. Abrahamson, R. G. Downey, and M. R. Fellows. </author> <title> Fixed-parameter tractability and completeness IV: On completeness for W [P ] and PSPACE analogues. </title> <journal> Annals of Pure and Applied Logic, </journal> <volume> 73 </volume> <pages> 235-276, </pages> <year> 1995. </year>
Reference-contexts: To distinguish between the second and third type of behavior, Downey and Fellows introduced the theory of fixed parameter complexity <ref> [58, 59, 57, 1] </ref>. Hereto, they introduced the notion of parameterized language (or problem): a subset L fl fi fl for some fixed alphabet . The second part of the input is called the parameter; we are interested in what happens if this parameter is `small'. <p> Then they introduce a hierarchy of complexity classes F T P W <ref> [1] </ref> W [2] W [i] W [P ] of parameterized problems. Classes W [i], W [P ] are defined in terms of reductions to certain parameterized problems on Boolean circuits. It is conjectured that the hierarchy is proper. So, hardness for W [1] or any larger class means for a problem <p> hierarchy of complexity classes F T P W <ref> [1] </ref> W [2] W [i] W [P ] of parameterized problems. Classes W [i], W [P ] are defined in terms of reductions to certain parameterized problems on Boolean circuits. It is conjectured that the hierarchy is proper. So, hardness for W [1] or any larger class means for a problem that it is unlikely that there exists an algorithm for it with time complexity of the form O (f (k)n c ). As an example: the treewidth of a graph is never larger than its bandwidth. <p> Other graph problems where yes-instances have bounded treewidth, and which are hard for W <ref> [1] </ref> or a larger class, can be found in [28, 27, 29, 82, 83]. Postscript I want to thank all who cooperated with me and informed me on all kinds of treewidth related topics in the past years, and to apologize to those whose work I forgot to mention here.
Reference: [2] <author> K. R. Abrahamson and M. R. Fellows. </author> <title> Finite automata, bounded treewidth and well-quasiordering. </title> <editor> In N. Robertson and P. Seymour, editors, </editor> <booktitle> Proceedings of the AMS Summer Workshop on Graph Minors, Graph Structure Theory, Contemporary Mathematics vol. </booktitle> <volume> 147, </volume> <pages> pages 539-564. </pages> <publisher> American Mathematical Society, </publisher> <year> 1993. </year>
Reference-contexts: One can show that every finite index problem can be solved in linear time on graphs of bounded treewidth (see e.g., <ref> [2] </ref>). <p> Then they introduce a hierarchy of complexity classes F T P W [1] W <ref> [2] </ref> W [i] W [P ] of parameterized problems. Classes W [i], W [P ] are defined in terms of reductions to certain parameterized problems on Boolean circuits. It is conjectured that the hierarchy is proper.
Reference: [3] <author> S. Arnborg. </author> <title> Some PSPACE-complete logic decision problems that become linear time solvable on formula graphs of bounded treewidth. </title> <type> Manuscript, </type> <year> 1991. </year>
Reference-contexts: See e.g., [50, 52, 81]. Additional remarks Some problems whose decision versions are not in NP can also be solved in linear time on graphs of bounded treewidth. See e.g. <ref> [4, 3, 19] </ref>. For more algorithms that exploit the small treewidth of graphs, see also (amongst others) [10, 18, 38, 44, 61, 74, 79, 92, 93, 94, 125, 126, 129, 130]. Dynamic algorithms for graphs of bounded treewidth have been considered amongst others in [22, 45, 70, 78].
Reference: [4] <author> S. Arnborg. </author> <title> Graph decompositions and tree automata in reasoning with uncertainty. </title> <journal> J. Expt. Theor. Artif. Intell., </journal> <volume> 5 </volume> <pages> 335-357, </pages> <year> 1993. </year>
Reference-contexts: See e.g., [50, 52, 81]. Additional remarks Some problems whose decision versions are not in NP can also be solved in linear time on graphs of bounded treewidth. See e.g. <ref> [4, 3, 19] </ref>. For more algorithms that exploit the small treewidth of graphs, see also (amongst others) [10, 18, 38, 44, 61, 74, 79, 92, 93, 94, 125, 126, 129, 130]. Dynamic algorithms for graphs of bounded treewidth have been considered amongst others in [22, 45, 70, 78].
Reference: [5] <author> S. Arnborg, D. G. Corneil, and A. Proskurowski. </author> <title> Complexity of finding embeddings in a k-tree. </title> <journal> SIAM J. Alg. Disc. Meth., </journal> <volume> 8 </volume> <pages> 277-284, </pages> <year> 1987. </year> <month> 13 </month>
Reference-contexts: tree decompositions. 3 Determining treewidth In this section we review a number of results on the problem, to determine the treewidth of a given graph. 2 The problem to determine, when given a graph G and an integer k, whether the treewidth of G is at most k is NP-complete <ref> [5] </ref>, even for graphs of maximum degree at most 9 [36], bipartite graphs, or cocomparability graphs. <p> The first polynomial time algorithm for the (construction and decision) problem used O (n k+2 ) time and was found by Arnborg, Corneil, and Proskurowski <ref> [5] </ref>. Using deep results on graph minors, Robertson and Seymour then gave a non-constructive proof of the existence of a decision algorithm that uses O (n 2 ) time [115]. This algorithm has the following structure.
Reference: [6] <author> S. Arnborg, B. Courcelle, A. Proskurowski, and D. Seese. </author> <title> An algebraic theory of graph reduction. </title> <journal> J. ACM, </journal> <volume> 40 </volume> <pages> 1134-1164, </pages> <year> 1993. </year>
Reference-contexts: An interesting different approach was taken by Arnborg et al. <ref> [6] </ref>. They use graph reduction to obtain algorithms that use linear time, but more than linear memory. More on graph reduction can be found in Section 4. Work has also been done on parallel algorithms for the fixed parameter case of the treewidth problem. <p> The first algorithm with work (product of time and number of processors) only a polylogarithmic factor more than linear was the algorithm by Lagergren [90], discussed above. This result was improved by Bodlaender and Hagerup [31], who, combining paralliza-tions of the sequential algorithms of [24] and <ref> [6] </ref> with new techniques, obtained the following results. <p> When no rule can be applied, we have a graph of size at most some constant, or for which P does not hold. This method was introduced to the setting of treewidth in <ref> [6] </ref>. More on graph reduction can be found in [26, 54].
Reference: [7] <author> S. Arnborg, J. Lagergren, and D. Seese. </author> <title> Easy problems for tree-decomposable graphs. </title> <journal> J. Algorithms, </journal> <volume> 12 </volume> <pages> 308-340, </pages> <year> 1991. </year>
Reference-contexts: Monadic second order logic An interesting general framework to quickly establish that a problem can be solved in linear time on graphs of bounded treewidth has been established by Courcelle [49, 48, 47, 51], and extended by Borie et al. [39], Arnborg et al. <ref> [7] </ref>, and Courcelle and Mosbah [53]. Courcelle 9 results states that each problem that can be stated in monadic second order logic can be solved in linear time on graphs of bounded treewidth.
Reference: [8] <author> S. Arnborg and A. Proskurowski. </author> <title> Characterization and recognition of partial 3-trees. </title> <journal> SIAM J. Alg. Disc. Meth., </journal> <volume> 7 </volume> <pages> 305-314, </pages> <year> 1986. </year>
Reference-contexts: Each of the algorithm has optimal speedup, i.e., the product of time and number of processors is linear. In the case that k is 2, 3, or 4, better algorithms have been found. Practically efficient linear time algorithm exist, based on graph reduction <ref> [8, 94, 119] </ref>. The parallel algorithms for k = 2; 3 by [73] were improved by the results in [31], mentioned above.
Reference: [9] <author> S. Arnborg and A. Proskurowski. </author> <title> Linear time algorithms for NP-hard problems restricted to partial k-trees. </title> <journal> Disc. Appl. Math., </journal> <volume> 23 </volume> <pages> 11-24, </pages> <year> 1989. </year>
Reference-contexts: The technique first appeared (in 1992) in the context of graphs of bounded treewidth in a paper by 4 Arnborg and Proskurowski <ref> [9] </ref>; another paper founding this technique was Bern et al. [13].
Reference: [10] <author> S. Arnborg and A. Proskurowski. </author> <title> Canonical representations of partial 2-and 3-trees. </title> <journal> BIT, </journal> <volume> 32 </volume> <pages> 197-214, </pages> <year> 1992. </year>
Reference: [11] <author> S. Arnborg, A. Proskurowski, and D. G. Corneil. </author> <title> Forbidden minors characterization of partial 3-trees. </title> <journal> Disc. Math., </journal> <volume> 80 </volume> <pages> 1-19, </pages> <year> 1990. </year>
Reference-contexts: There are several results giving the obstruction sets of specific minor closed classes of graphs, e.g., the obstruction set of graphs of treewidth two is fK 4 g; see <ref> [11, 120] </ref> for the obstruction set of graphs of treewidth 3, and [84] for the obstruction sets of graphs of pathwidth 1, respectively 2.
Reference: [12] <author> S. Arnborg, A. Proskurowski, and D. Seese. </author> <title> Monadic second order logic, tree automata and forbidden minors. </title> <editor> In E. Borger, H. Kleine Buning, M. M. Richter, and W. Schonfeld, editors, </editor> <booktitle> Proceedings 4th Workshop on Computer Science Logic, CSL'90, </booktitle> <pages> pages 1-16. </pages> <address> Springer Verlag, </address> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 533, </volume> <year> 1991. </year>
Reference-contexts: As on graphs of bounded treewidth, one can check for any fixed graph H whether it is a minor of input graph G in linear time (e.g., for fixed H, the property can be formulated in monadic second order logic, see e.g., <ref> [12] </ref>), we have the following result. Theorem 5.4 If G is a class of graphs, closed under taking of minors and that does not contain all planar graphs, then there exists an algorithm that decides membership in G in O (n) time. (Let planar graph H 62 G.
Reference: [13] <author> M. W. Bern, E. L. Lawler, and A. L. Wong. </author> <title> Linear time computation of optimal subgraphs of decomposable graphs. </title> <journal> J. Algorithms, </journal> <volume> 8 </volume> <pages> 216-235, </pages> <year> 1987. </year>
Reference-contexts: The technique first appeared (in 1992) in the context of graphs of bounded treewidth in a paper by 4 Arnborg and Proskurowski [9]; another paper founding this technique was Bern et al. <ref> [13] </ref>.
Reference: [14] <author> D. Bienstock. </author> <title> Graph searching, path-width, tree-width and related problems (a survey). </title> <journal> DIMACS Ser. in Discrete Mathematics and Theoretical Computer Science, </journal> <volume> 5 </volume> <pages> 33-49, </pages> <year> 1991. </year>
Reference-contexts: A tree decomposition (X ; T ) is a path decomposition if T is a path; the pathwidth of a graph G is the minimum width over all path decompositions of G. A survey giving relations to notions of graph searching has been written by Bienstock <ref> [14] </ref>. Another notion that is related to treewidth and that might be more suitable in some cases for implementation purposes is branchwidth [115].
Reference: [15] <author> D. Bienstock and M. A. Langston. </author> <title> Algorithmic implications of the graph minor theorem. To appear as chapter in: </title> <booktitle> Handbook of Operations Research and Management Science: Volume on Networks and Distribution, </booktitle> <year> 1993. </year>
Reference-contexts: Several applications for problems from graph layout, VLSI-design, and graph theory have been found by Fellows and Langston. See e.g., <ref> [62, 63, 66, 65, 15] </ref>. 6 Fixed parameter complexity Some problems are not (known to be) linear time solvable when restricted to graphs of bounded treewidth.
Reference: [16] <author> D. Bienstock, N. Robertson, P. D. Seymour, and R. Thomas. </author> <title> Quickly excluding a forest. </title> <journal> J. Comb. Theory Series B, </journal> <volume> 52 </volume> <pages> 274-283, </pages> <year> 1991. </year>
Reference-contexts: If H is a forest, then there exists a similar upper bound c H on the pathwidth of graphs that do not contain H as a minor (see <ref> [16, 42] </ref>). In [118], it is shown that one can take c H = 20 2 (2jV H j+4jE H j) 5 . A similar type of bound was proved by Gorbunov [72]. In some special cases, one can prove 11 better bounds.
Reference: [17] <author> H. L. Bodlaender. </author> <title> NC-algorithms for graphs with small treewidth. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Proceedings 14th International Workshop on Graph-Theoretic Concepts in Computer Science WG'88, </booktitle> <pages> pages 1-10. </pages> <booktitle> Springer Ver-lag, Lecture Notes in Computer Science, </booktitle> <volume> vol. 344, </volume> <year> 1988. </year>
Reference-contexts: They use graph reduction to obtain algorithms that use linear time, but more than linear memory. More on graph reduction can be found in Section 4. Work has also been done on parallel algorithms for the fixed parameter case of the treewidth problem. Older algorithms by Bodlaender <ref> [17] </ref> and Chandrasekha-ran and Hedetniemi [43] need large numbers of processors. The first algorithm with work (product of time and number of processors) only a polylogarithmic factor more than linear was the algorithm by Lagergren [90], discussed above.
Reference: [18] <author> H. L. Bodlaender. </author> <title> Polynomial algorithms for graph isomorphism and chromatic index on partial k-trees. </title> <journal> J. Algorithms, </journal> <volume> 11 </volume> <pages> 631-643, </pages> <year> 1990. </year> <month> 14 </month>
Reference: [19] <author> H. L. Bodlaender. </author> <title> Complexity of path-forming games. </title> <journal> Theor. Comp. Sc., </journal> <volume> 110 </volume> <pages> 215-245, </pages> <year> 1993. </year>
Reference-contexts: See e.g., [50, 52, 81]. Additional remarks Some problems whose decision versions are not in NP can also be solved in linear time on graphs of bounded treewidth. See e.g. <ref> [4, 3, 19] </ref>. For more algorithms that exploit the small treewidth of graphs, see also (amongst others) [10, 18, 38, 44, 61, 74, 79, 92, 93, 94, 125, 126, 129, 130]. Dynamic algorithms for graphs of bounded treewidth have been considered amongst others in [22, 45, 70, 78].
Reference: [20] <author> H. L. Bodlaender. </author> <title> On linear time minor tests with depth first search. </title> <journal> J. Algorithms, </journal> <volume> 14 </volume> <pages> 1-23, </pages> <year> 1993. </year>
Reference-contexts: For instance, for H = C k , the cycle with k vertices, then one can take c H = k 1 [64]. If H = K 2;k , then one can take c H = 2k 2 [35]. Other special cases are discussed in <ref> [20, 23, 35] </ref>.
Reference: [21] <author> H. L. Bodlaender. </author> <title> A tourist guide through treewidth. </title> <journal> Acta Cybernetica, </journal> <volume> 11 </volume> <pages> 1-23, </pages> <year> 1993. </year>
Reference-contexts: There are several `real world' applications of the notion of treewidth, amongst others in expert systems [91], telecommunication network design ([46]), VLSI-design, Choleski factorization, natural language processing [89] (see e.g. <ref> [21] </ref> for a brief overview.) An interesting recent application has been found by Thorup [127]. He shows that for many well known programming languages (like C, Pascal, Modula-2), the control-flow graph of goto-free programs has treewidth bounded by a small constant (e.g., 3 for Pascal, 6 for C).
Reference: [22] <author> H. L. Bodlaender. </author> <title> Dynamic algorithms for graphs with treewidth 2. </title> <booktitle> In Proceedings 19th International Workshop on Graph-Theoretic Concepts in Computer Science WG'93, </booktitle> <pages> pages 112-124, </pages> <address> Berlin, 1994. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: See e.g. [4, 3, 19]. For more algorithms that exploit the small treewidth of graphs, see also (amongst others) [10, 18, 38, 44, 61, 74, 79, 92, 93, 94, 125, 126, 129, 130]. Dynamic algorithms for graphs of bounded treewidth have been considered amongst others in <ref> [22, 45, 70, 78] </ref>.
Reference: [23] <author> H. L. Bodlaender. </author> <title> On disjoint cycles. </title> <journal> Int. J. Found. Computer Science, </journal> <volume> 5(1) </volume> <pages> 59-68, </pages> <year> 1994. </year>
Reference-contexts: For instance, for H = C k , the cycle with k vertices, then one can take c H = k 1 [64]. If H = K 2;k , then one can take c H = 2k 2 [35]. Other special cases are discussed in <ref> [20, 23, 35] </ref>.
Reference: [24] <author> H. L. Bodlaender. </author> <title> A linear time algorithm for finding tree-decompositions of small treewidth. </title> <journal> SIAM J. Comput., </journal> <volume> 25 </volume> <pages> 1305-1317, </pages> <year> 1996. </year>
Reference-contexts: Using the algorithm from [32], in <ref> [24] </ref> for each fixed k, a linear 3 time algorithm is given for both the decision and construction problem. <p> The first algorithm with work (product of time and number of processors) only a polylogarithmic factor more than linear was the algorithm by Lagergren [90], discussed above. This result was improved by Bodlaender and Hagerup [31], who, combining paralliza-tions of the sequential algorithms of <ref> [24] </ref> and [6] with new techniques, obtained the following results. <p> Check whether the treewidth of G is at most c H (linear time by the algorithm of <ref> [24] </ref>). If not, answer no. If so, test minorship of all graphs in the obstruction set | this can now be done in linear time.) In some cases, self-reduction can help to overcome the non-constructive aspects of this theory. A general technique has been established by Fellows and Langston [67].
Reference: [25] <author> H. L. Bodlaender. </author> <title> A partial k-arboretum of graphs with bounded treewidth. </title> <type> Technical Report UU-CS-1996-02, </type> <institution> Department of Computer Science, Utrecht University, Utrecht, </institution> <year> 1996. </year>
Reference-contexts: The treewidth of a graph G is the minimum width over all tree decompositions of G. There are several equivalent notions to treewidth (for an overview, also of classes of graphs that have a uniform upper bound on the treewidth, see <ref> [25] </ref>); amongst others, graphs of treewidth at most k are also known as partial k-trees. A notion related to treewidth is pathwidth, defined first in [99].
Reference: [26] <author> H. L. Bodlaender and B. de Fluiter. </author> <title> Reduction algorithms for constructing solutions in graphs with small treewidth. </title> <editor> In J.-Y. Cai and C. K. Wong, editors, </editor> <booktitle> Proceedings 2nd Annual International Conference on Computing and Combinatorics, COCOON'96, </booktitle> <pages> pages 199-208. </pages> <address> Springer Verlag, </address> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 1090, </volume> <year> 1996. </year>
Reference-contexts: When no rule can be applied, we have a graph of size at most some constant, or for which P does not hold. This method was introduced to the setting of treewidth in [6]. More on graph reduction can be found in <ref> [26, 54] </ref>.
Reference: [27] <author> H. L. Bodlaender and J. Engelfriet. </author> <title> Domino treewidth. </title> <journal> J. Algorithms, </journal> <volume> 24 </volume> <pages> 94-123, </pages> <year> 1997. </year>
Reference-contexts: Other graph problems where yes-instances have bounded treewidth, and which are hard for W [1] or a larger class, can be found in <ref> [28, 27, 29, 82, 83] </ref>. Postscript I want to thank all who cooperated with me and informed me on all kinds of treewidth related topics in the past years, and to apologize to those whose work I forgot to mention here.
Reference: [28] <author> H. L. Bodlaender, M. R. Fellows, and M. Hallett. </author> <title> Beyond NP-completeness for problems of bounded width: Hardness for the W hierarchy. </title> <booktitle> In Proceedings of the 26th Annual Symposium on Theory of Computing, </booktitle> <pages> pages 449-458, </pages> <address> New York, 1994. </address> <publisher> ACM Press. </publisher>
Reference-contexts: As an example: the treewidth of a graph is never larger than its bandwidth. Bandwidth is solvable in O (f (K)n K ) time, K the bandwidth to obtain [75]. Bandwidth is hard for all W [i], i 2 N <ref> [28] </ref>, and hence it is unlikely that the bounded treewidth of yes-instances will help to get an e.g., a linear time algorithm for bandwidth for fixed k, even with the help of tree decompositions. <p> Other graph problems where yes-instances have bounded treewidth, and which are hard for W [1] or a larger class, can be found in <ref> [28, 27, 29, 82, 83] </ref>. Postscript I want to thank all who cooperated with me and informed me on all kinds of treewidth related topics in the past years, and to apologize to those whose work I forgot to mention here.
Reference: [29] <author> H. L. Bodlaender, M. R. Fellows, M. T. Hallett, H. T. Wareham, and T. J. Warnow. </author> <title> The hardness of problems on thin colored graphs. </title> <type> Technical Report UU-CS-1995-36, </type> <institution> Department of Computer Science, Utrecht University, Utrecht, </institution> <year> 1995. </year>
Reference-contexts: Other graph problems where yes-instances have bounded treewidth, and which are hard for W [1] or a larger class, can be found in <ref> [28, 27, 29, 82, 83] </ref>. Postscript I want to thank all who cooperated with me and informed me on all kinds of treewidth related topics in the past years, and to apologize to those whose work I forgot to mention here.
Reference: [30] <author> H. L. Bodlaender, J. R. Gilbert, H. Hafsteinsson, and T. Kloks. </author> <title> Approximating treewidth, pathwidth, and minimum elimination tree height. </title> <journal> J. Algorithms, </journal> <volume> 18 </volume> <pages> 238-255, </pages> <year> 1995. </year> <month> 15 </month>
Reference-contexts: For arbitrary graphs, there is a polynomial time approximation algorithm for treewidth with performance ration O (log n) <ref> [30] </ref>; it is an interesting (but probably hard) open problem whether treewidth can be approximated with constant performance ratio. A well studied case is when the parameter k is a fixed constant.
Reference: [31] <author> H. L. Bodlaender and T. Hagerup. </author> <title> Parallel algorithms with optimal speedup for bounded treewidth. </title> <editor> In Z. Fulop and F. Gecseg, editors, </editor> <booktitle> Proceedings 22nd International Colloquium on Automata, Languages and Programming, </booktitle> <pages> pages 268-279, </pages> <address> Berlin, </address> <year> 1995. </year> <note> Springer-Verlag, Lecture Notes in Computer Science 944. To appear in SIAM J. Computing, </note> <year> 1997. </year>
Reference-contexts: The first algorithm with work (product of time and number of processors) only a polylogarithmic factor more than linear was the algorithm by Lagergren [90], discussed above. This result was improved by Bodlaender and Hagerup <ref> [31] </ref>, who, combining paralliza-tions of the sequential algorithms of [24] and [6] with new techniques, obtained the following results. <p> In the case that k is 2, 3, or 4, better algorithms have been found. Practically efficient linear time algorithm exist, based on graph reduction [8, 94, 119]. The parallel algorithms for k = 2; 3 by [73] were improved by the results in <ref> [31] </ref>, mentioned above. For k = 2, a parallel algorithm for the construction problem that uses O (log n log fl n) time on a EREW PRAM and O (log n) time on a CRCW PRAM and has optimal speedup has been found by de Fluiter and Bodlaender [54, 55].
Reference: [32] <author> H. L. Bodlaender and T. Kloks. </author> <title> Efficient and constructive algorithms for the pathwidth and treewidth of graphs. </title> <journal> J. Algorithms, </journal> <volume> 21 </volume> <pages> 358-402, </pages> <year> 1996. </year>
Reference-contexts: Each of these algorithms either determines that the treewidth of input graph is more than G or finds a tree decomposition of width at most f (k) for some linear function f . (See [42] for a simple linear time algorithm for the pathwidth variant of this problem.) In <ref> [32, 86] </ref>, Bodlaender and Kloks address the second step of the algorithm of Robertson and Seymour: they give an algorithm for the second step that solves the construction problem in linear time (i.e., provided a tree decomposition of bounded but perhaps not optimal width has been found). <p> Using the algorithm from <ref> [32] </ref>, in [24] for each fixed k, a linear 3 time algorithm is given for both the decision and construction problem.
Reference: [33] <author> H. L. Bodlaender, T. Kloks, and D. Kratsch. </author> <title> Treewidth and pathwidth of permutation graphs. </title> <journal> SIAM J. Disc. Meth., </journal> <volume> 8(4) </volume> <pages> 606-616, </pages> <year> 1995. </year>
Reference-contexts: For several special graph classes, there exist polynomial time algorithms to determine the treewidth of graphs in the class, e.g., for chordal graphs, permutation graphs <ref> [33] </ref>, circular arc graphs [123], circle graphs [85], and distance hereditary graphs [40]. See also [34, 60, 71, 76, 77, 87]. One of the most interesting open problems here is the complexity of treewidth when restricted to planar graphs.
Reference: [34] <author> H. L. Bodlaender and R. H. Mohring. </author> <title> The pathwidth and treewidth of cographs. </title> <journal> SIAM J. Disc. Meth., </journal> <volume> 6 </volume> <pages> 181-188, </pages> <year> 1993. </year>
Reference-contexts: For several special graph classes, there exist polynomial time algorithms to determine the treewidth of graphs in the class, e.g., for chordal graphs, permutation graphs [33], circular arc graphs [123], circle graphs [85], and distance hereditary graphs [40]. See also <ref> [34, 60, 71, 76, 77, 87] </ref>. One of the most interesting open problems here is the complexity of treewidth when restricted to planar graphs.
Reference: [35] <author> H. L. Bodlaender, R. B. Tan, D. M. Thilikos, and J. van Leeuwen. </author> <title> On interval routing schemes and treewidth. </title> <editor> In M. Nagl, editor, </editor> <booktitle> Proceedings 21th International Workshop on Graph Theoretic Concepts in Computer Science WG'95, </booktitle> <pages> pages 181-186. </pages> <address> Springer Verlag, </address> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 1017, </volume> <year> 1995. </year>
Reference-contexts: In some special cases, one can prove 11 better bounds. For instance, for H = C k , the cycle with k vertices, then one can take c H = k 1 [64]. If H = K 2;k , then one can take c H = 2k 2 <ref> [35] </ref>. Other special cases are discussed in [20, 23, 35]. <p> For instance, for H = C k , the cycle with k vertices, then one can take c H = k 1 [64]. If H = K 2;k , then one can take c H = 2k 2 [35]. Other special cases are discussed in <ref> [20, 23, 35] </ref>. <p> The class of graphs for which k-interval routing schemes exist under varying edge lengths, k-IRS is closed under taking of minors, hence there exists a linear time checkable characterization for each fixed k. (See <ref> [35] </ref> for precise definitions and more results.) Still, no actual characterization is known. Several applications for problems from graph layout, VLSI-design, and graph theory have been found by Fellows and Langston.
Reference: [36] <author> H. L. Bodlaender and D. M. Thilikos. </author> <title> Treewidth and small separators for graphs with small chordality. </title> <type> Technical Report UU-CS-1995-02, </type> <institution> Department of Computer Science, Utrecht University, Utrecht, </institution> <year> 1995. </year> <note> To appear in Disc. Appl. Math. </note>
Reference-contexts: a number of results on the problem, to determine the treewidth of a given graph. 2 The problem to determine, when given a graph G and an integer k, whether the treewidth of G is at most k is NP-complete [5], even for graphs of maximum degree at most 9 <ref> [36] </ref>, bipartite graphs, or cocomparability graphs. For several special graph classes, there exist polynomial time algorithms to determine the treewidth of graphs in the class, e.g., for chordal graphs, permutation graphs [33], circular arc graphs [123], circle graphs [85], and distance hereditary graphs [40].
Reference: [37] <author> H. L. Bodlaender and D. M. Thilikos. </author> <title> Constructive linear time algorithms for branchwidth. </title> <editor> In P. Degano, R. Gorrieri, and A. Marchetti-Spaccamela, editors, </editor> <booktitle> Proceedings 24th International Colloquium on Automata, Languages, and Programming, </booktitle> <pages> pages 627-637. </pages> <address> Springer Verlag, </address> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 1256, </volume> <year> 1997. </year>
Reference-contexts: For k = 2, a parallel algorithm for the construction problem that uses O (log n log fl n) time on a EREW PRAM and O (log n) time on a CRCW PRAM and has optimal speedup has been found by de Fluiter and Bodlaender [54, 55]. See also <ref> [37] </ref> for a closely related problem. 4 Finding algorithms for problems on graphs of small treewidth For large numbers of graph problems, it has been shown that they are solvable in linear time, polynomial time, or become a member of NC, when the inputs are restricted to graphs of treewidth at
Reference: [38] <author> R. B. Borie. </author> <title> Generation of polynomial-time algorithms for some optimization problems on tree-decomposable graphs. </title> <journal> Algorithmica, </journal> <volume> 14 </volume> <pages> 123-137, </pages> <year> 1995. </year>
Reference: [39] <author> R. B. Borie, R. G. Parker, and C. A. Tovey. </author> <title> Deterministic decomposition of recursive graph classes. </title> <journal> SIAM J. Disc. Meth., </journal> <volume> 4:481 - 501, </volume> <year> 1991. </year>
Reference-contexts: Monadic second order logic An interesting general framework to quickly establish that a problem can be solved in linear time on graphs of bounded treewidth has been established by Courcelle [49, 48, 47, 51], and extended by Borie et al. <ref> [39] </ref>, Arnborg et al. [7], and Courcelle and Mosbah [53]. Courcelle 9 results states that each problem that can be stated in monadic second order logic can be solved in linear time on graphs of bounded treewidth. <p> 9e : e 2 F ^ v 2 e ^ w 2 e.) The maximum independent set problem can be formulated as: max jW j : 8v : 8w : (v 2 W ^ w 2 W ) ! :(fv; wg 2 E) Especially the paper by Borie et al. <ref> [39] </ref> is very helpfull to see what kind of constructions can be used to express problems in (extensions of) monadic second order logic. Problems in monadic second order logic are finite index.
Reference: [40] <author> H. Broersma, E. Dahlhaus, and T. Kloks. </author> <title> A linear time algorithm for minimum fill in and tree width for distance hereditary graphs. </title> <editor> In U. Faigle and C. Hoede, editors, </editor> <booktitle> Scientific program 5th Twente Workshop on Graphs and Combinatorial Optimization, </booktitle> <pages> pages 48-50, </pages> <year> 1997. </year>
Reference-contexts: For several special graph classes, there exist polynomial time algorithms to determine the treewidth of graphs in the class, e.g., for chordal graphs, permutation graphs [33], circular arc graphs [123], circle graphs [85], and distance hereditary graphs <ref> [40] </ref>. See also [34, 60, 71, 76, 77, 87]. One of the most interesting open problems here is the complexity of treewidth when restricted to planar graphs.
Reference: [41] <author> K. Cattell, M. J. Dinneen, and M. R. Fellows. </author> <title> Obstructions to within a few vertices or edges of acyclic. </title> <booktitle> In Proceedings 4th Int. Workshop on Algorithms 16 and Data Structures. Springer Verlag, Lecture Notes in Computer Science, </booktitle> <volume> vol. 955, </volume> <year> 1995. </year>
Reference-contexts: Ramachandramurthi [96, 97] investigated the graphs with k + 1, k + 2 and k + 3 vertices that belong to the obstruction sets for graphs of treewidth or pathwidth k. See, e.g., also <ref> [41, 56] </ref>. Some additional results make that Theorem 5.1 has surprising algorithmic implications. Robertson and Seymour [115] have shown that for every fixed graph H, there exists an algorithm that decides in O (n 3 ) time whether H is a minor of a given graph G.
Reference: [42] <author> K. Cattell, M. J. Dinneen, and M. R. Fellows. </author> <title> A simple linear-time algorithm for finding path-decompositions of small width. </title> <journal> Inform. Proc. Letters, </journal> <volume> 57 </volume> <pages> 197-204, </pages> <year> 1996. </year>
Reference-contexts: Each of these algorithms either determines that the treewidth of input graph is more than G or finds a tree decomposition of width at most f (k) for some linear function f . (See <ref> [42] </ref> for a simple linear time algorithm for the pathwidth variant of this problem.) In [32, 86], Bodlaender and Kloks address the second step of the algorithm of Robertson and Seymour: they give an algorithm for the second step that solves the construction problem in linear time (i.e., provided a tree <p> If H is a forest, then there exists a similar upper bound c H on the pathwidth of graphs that do not contain H as a minor (see <ref> [16, 42] </ref>). In [118], it is shown that one can take c H = 20 2 (2jV H j+4jE H j) 5 . A similar type of bound was proved by Gorbunov [72]. In some special cases, one can prove 11 better bounds.
Reference: [43] <author> N. Chandrasekharan and S. T. Hedetniemi. </author> <title> Fast parallel algorithms for tree decomposing and parsing partial k-trees. </title> <booktitle> In Proc. 26th Annual Aller-ton Conference on Communication, Control, and Computing, </booktitle> <address> Urbana-Champaign, Illinois, </address> <year> 1988. </year>
Reference-contexts: More on graph reduction can be found in Section 4. Work has also been done on parallel algorithms for the fixed parameter case of the treewidth problem. Older algorithms by Bodlaender [17] and Chandrasekha-ran and Hedetniemi <ref> [43] </ref> need large numbers of processors. The first algorithm with work (product of time and number of processors) only a polylogarithmic factor more than linear was the algorithm by Lagergren [90], discussed above.
Reference: [44] <author> S. Chaudhuri and C. D. Zaroliagis. </author> <title> Optimal parallel shortest paths in small treewidth digraphs. </title> <editor> In P. Spirakis, editor, </editor> <booktitle> Proceedings 3rd Annual European Symposium on Algorithms ESA'95, </booktitle> <pages> pages 31-45. </pages> <address> lncs979, </address> <year> 1995. </year>
Reference: [45] <author> R. F. Cohen, S. Sairam, R. Tamassia, and J. S. Vitter. </author> <title> Dynamic algorithms for optimization problems in bounded tree-width graphs. </title> <booktitle> In Proceedings of the 3rd Conference on Integer Programming and Combinatorial Optimization, </booktitle> <pages> pages 99-112, </pages> <year> 1993. </year>
Reference-contexts: See e.g. [4, 3, 19]. For more algorithms that exploit the small treewidth of graphs, see also (amongst others) [10, 18, 38, 44, 61, 74, 79, 92, 93, 94, 125, 126, 129, 130]. Dynamic algorithms for graphs of bounded treewidth have been considered amongst others in <ref> [22, 45, 70, 78] </ref>.
Reference: [46] <author> W. Cook and P. D. Seymour. </author> <title> An algorithm for the ring-routing problem. </title> <type> Bellcore technical memorandum, </type> <institution> Bellcore, </institution> <year> 1993. </year>
Reference: [47] <author> B. Courcelle. </author> <title> The monadic second-order logic of graphs II: Infinite graphs of bounded width. </title> <journal> Mathematical Systems Theory, </journal> <volume> 21 </volume> <pages> 187-221, </pages> <year> 1989. </year>
Reference-contexts: More on graph reduction can be found in [26, 54]. Monadic second order logic An interesting general framework to quickly establish that a problem can be solved in linear time on graphs of bounded treewidth has been established by Courcelle <ref> [49, 48, 47, 51] </ref>, and extended by Borie et al. [39], Arnborg et al. [7], and Courcelle and Mosbah [53]. Courcelle 9 results states that each problem that can be stated in monadic second order logic can be solved in linear time on graphs of bounded treewidth.
Reference: [48] <author> B. Courcelle. </author> <title> Graph rewriting: an algebraic and logical approach. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <volume> volume B, </volume> <pages> pages 192-242, </pages> <address> Amsterdam, 1990. </address> <publisher> North Holland Publ. </publisher> <address> Comp. </address>
Reference-contexts: More on graph reduction can be found in [26, 54]. Monadic second order logic An interesting general framework to quickly establish that a problem can be solved in linear time on graphs of bounded treewidth has been established by Courcelle <ref> [49, 48, 47, 51] </ref>, and extended by Borie et al. [39], Arnborg et al. [7], and Courcelle and Mosbah [53]. Courcelle 9 results states that each problem that can be stated in monadic second order logic can be solved in linear time on graphs of bounded treewidth.
Reference: [49] <author> B. Courcelle. </author> <title> The monadic second-order logic of graphs I: Recognizable sets of finite graphs. </title> <journal> Information and Computation, </journal> <volume> 85 </volume> <pages> 12-75, </pages> <year> 1990. </year>
Reference-contexts: More on graph reduction can be found in [26, 54]. Monadic second order logic An interesting general framework to quickly establish that a problem can be solved in linear time on graphs of bounded treewidth has been established by Courcelle <ref> [49, 48, 47, 51] </ref>, and extended by Borie et al. [39], Arnborg et al. [7], and Courcelle and Mosbah [53]. Courcelle 9 results states that each problem that can be stated in monadic second order logic can be solved in linear time on graphs of bounded treewidth.
Reference: [50] <author> B. Courcelle. </author> <title> The monadic second-order logic of graphs V: On closing the gap between definability and recognizability. </title> <journal> Theor. Comp. Sc., </journal> <volume> 80 </volume> <pages> 153-202, </pages> <year> 1991. </year>
Reference-contexts: Problems in monadic second order logic are finite index. An interesting question is whether language constructions can be added to monadic second order logic, such that its expressive power becomes sufficient to describe all problems that are finite index. See e.g., <ref> [50, 52, 81] </ref>. Additional remarks Some problems whose decision versions are not in NP can also be solved in linear time on graphs of bounded treewidth. See e.g. [4, 3, 19].
Reference: [51] <author> B. Courcelle. </author> <title> The monadic second-order logic of graphs III: Treewidth, forbidden minors and complexity issues. </title> <journal> Informatique Theorique, </journal> <volume> 26 </volume> <pages> 257-286, </pages> <year> 1992. </year>
Reference-contexts: More on graph reduction can be found in [26, 54]. Monadic second order logic An interesting general framework to quickly establish that a problem can be solved in linear time on graphs of bounded treewidth has been established by Courcelle <ref> [49, 48, 47, 51] </ref>, and extended by Borie et al. [39], Arnborg et al. [7], and Courcelle and Mosbah [53]. Courcelle 9 results states that each problem that can be stated in monadic second order logic can be solved in linear time on graphs of bounded treewidth.
Reference: [52] <author> B. Courcelle and J. Lagergren. </author> <title> Equivalent definitions of recognizability for sets of graphs of bounded tree-width. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 6 </volume> <pages> 141-166, </pages> <year> 1996. </year> <month> 17 </month>
Reference-contexts: Problems in monadic second order logic are finite index. An interesting question is whether language constructions can be added to monadic second order logic, such that its expressive power becomes sufficient to describe all problems that are finite index. See e.g., <ref> [50, 52, 81] </ref>. Additional remarks Some problems whose decision versions are not in NP can also be solved in linear time on graphs of bounded treewidth. See e.g. [4, 3, 19].
Reference: [53] <author> B. Courcelle and M. Mosbah. </author> <title> Monadic second-order evaluations on tree--decomposable graphs. </title> <journal> Theor. Comp. Sc., </journal> <volume> 109 </volume> <pages> 49-82, </pages> <year> 1993. </year>
Reference-contexts: Monadic second order logic An interesting general framework to quickly establish that a problem can be solved in linear time on graphs of bounded treewidth has been established by Courcelle [49, 48, 47, 51], and extended by Borie et al. [39], Arnborg et al. [7], and Courcelle and Mosbah <ref> [53] </ref>. Courcelle 9 results states that each problem that can be stated in monadic second order logic can be solved in linear time on graphs of bounded treewidth.
Reference: [54] <author> B. de Fluiter. </author> <title> Algorithms for Graphs of Small Treewidth. </title> <type> PhD thesis, </type> <institution> Utrecht University, </institution> <year> 1997. </year>
Reference-contexts: For k = 2, a parallel algorithm for the construction problem that uses O (log n log fl n) time on a EREW PRAM and O (log n) time on a CRCW PRAM and has optimal speedup has been found by de Fluiter and Bodlaender <ref> [54, 55] </ref>. <p> When no rule can be applied, we have a graph of size at most some constant, or for which P does not hold. This method was introduced to the setting of treewidth in [6]. More on graph reduction can be found in <ref> [26, 54] </ref>.
Reference: [55] <author> B. de Fluiter and H. L. Bodlaender. </author> <title> Parallel algorithms for treewidth two, </title> <note> 1997. To appear in Proceedings WG'97. </note>
Reference-contexts: For k = 2, a parallel algorithm for the construction problem that uses O (log n log fl n) time on a EREW PRAM and O (log n) time on a CRCW PRAM and has optimal speedup has been found by de Fluiter and Bodlaender <ref> [54, 55] </ref>.
Reference: [56] <author> M. J. Dinneen. </author> <title> Bounded Combinatorial Width and Forbidden Substructures. </title> <type> PhD thesis, </type> <institution> University of Victoria, </institution> <year> 1995. </year>
Reference-contexts: Ramachandramurthi [96, 97] investigated the graphs with k + 1, k + 2 and k + 3 vertices that belong to the obstruction sets for graphs of treewidth or pathwidth k. See, e.g., also <ref> [41, 56] </ref>. Some additional results make that Theorem 5.1 has surprising algorithmic implications. Robertson and Seymour [115] have shown that for every fixed graph H, there exists an algorithm that decides in O (n 3 ) time whether H is a minor of a given graph G.
Reference: [57] <author> R. G. Downey and M. R. Fellows. </author> <title> Fixed-parameter tractability and completeness III: Some structural aspects of the W hierarchy. </title> <editor> In K. Ambos-Spies, S. Homer, and U. Schoning, editors, </editor> <booktitle> Complexity Theory, </booktitle> <pages> pages 191-226. </pages> <publisher> Cambridge University Press, </publisher> <year> 1993. </year>
Reference-contexts: To distinguish between the second and third type of behavior, Downey and Fellows introduced the theory of fixed parameter complexity <ref> [58, 59, 57, 1] </ref>. Hereto, they introduced the notion of parameterized language (or problem): a subset L fl fi fl for some fixed alphabet . The second part of the input is called the parameter; we are interested in what happens if this parameter is `small'.
Reference: [58] <author> R. G. Downey and M. R. Fellows. </author> <title> Fixed-parameter tractability and completeness I: Basic results. </title> <journal> SIAM J. Comput., </journal> <volume> 24 </volume> <pages> 873-921, </pages> <year> 1995. </year>
Reference-contexts: To distinguish between the second and third type of behavior, Downey and Fellows introduced the theory of fixed parameter complexity <ref> [58, 59, 57, 1] </ref>. Hereto, they introduced the notion of parameterized language (or problem): a subset L fl fi fl for some fixed alphabet . The second part of the input is called the parameter; we are interested in what happens if this parameter is `small'.
Reference: [59] <author> R. G. Downey and M. R. Fellows. </author> <title> Fixed-parameter tractability and completeness II: On completeness for W [1]. </title> <journal> Theor. Comp. Sc., </journal> <volume> 141 </volume> <pages> 109-131, </pages> <year> 1995. </year>
Reference-contexts: To distinguish between the second and third type of behavior, Downey and Fellows introduced the theory of fixed parameter complexity <ref> [58, 59, 57, 1] </ref>. Hereto, they introduced the notion of parameterized language (or problem): a subset L fl fi fl for some fixed alphabet . The second part of the input is called the parameter; we are interested in what happens if this parameter is `small'.
Reference: [60] <author> J. A. Ellis, I. H. Sudborough, and J. Turner. </author> <title> The vertex separation and search number of a graph. </title> <journal> Information and Computation, </journal> <volume> 113 </volume> <pages> 50-79, </pages> <year> 1994. </year>
Reference-contexts: For several special graph classes, there exist polynomial time algorithms to determine the treewidth of graphs in the class, e.g., for chordal graphs, permutation graphs [33], circular arc graphs [123], circle graphs [85], and distance hereditary graphs [40]. See also <ref> [34, 60, 71, 76, 77, 87] </ref>. One of the most interesting open problems here is the complexity of treewidth when restricted to planar graphs.
Reference: [61] <author> D. Eppstein. </author> <title> Subgraph isomorphism in planar graphs and related problems. </title> <booktitle> In Proceedings SODA'95, </booktitle> <year> 1995. </year>
Reference: [62] <author> M. R. Fellows and M. A. Langston. </author> <title> Nonconstructive advances in polynomial-time complexity. </title> <journal> Inform. Proc. Letters, </journal> <volume> 26 </volume> <pages> 157-162, </pages> <year> 1987. </year>
Reference-contexts: Several applications for problems from graph layout, VLSI-design, and graph theory have been found by Fellows and Langston. See e.g., <ref> [62, 63, 66, 65, 15] </ref>. 6 Fixed parameter complexity Some problems are not (known to be) linear time solvable when restricted to graphs of bounded treewidth.
Reference: [63] <author> M. R. Fellows and M. A. Langston. </author> <title> Nonconstructive tools for proving polynomial-time decidability. </title> <journal> J. ACM, </journal> <volume> 35 </volume> <pages> 727-739, </pages> <year> 1988. </year>
Reference-contexts: Several applications for problems from graph layout, VLSI-design, and graph theory have been found by Fellows and Langston. See e.g., <ref> [62, 63, 66, 65, 15] </ref>. 6 Fixed parameter complexity Some problems are not (known to be) linear time solvable when restricted to graphs of bounded treewidth.
Reference: [64] <author> M. R. Fellows and M. A. Langston. </author> <title> On search, decision and the efficiency of polynomial-time algorithms. </title> <booktitle> In Proceedings of the 21rd Annual Symposium on Theory of Computing, </booktitle> <pages> pages 501-512, </pages> <year> 1989. </year>
Reference-contexts: A similar type of bound was proved by Gorbunov [72]. In some special cases, one can prove 11 better bounds. For instance, for H = C k , the cycle with k vertices, then one can take c H = k 1 <ref> [64] </ref>. If H = K 2;k , then one can take c H = 2k 2 [35]. Other special cases are discussed in [20, 23, 35].
Reference: [65] <author> M. R. Fellows and M. A. Langston. </author> <title> Fast search algorithms for layout permutation problems. </title> <booktitle> Int. J. on Computer Aided VLSI Design, </booktitle> <volume> 3 </volume> <pages> 325-340, </pages> <year> 1991. </year>
Reference-contexts: Several applications for problems from graph layout, VLSI-design, and graph theory have been found by Fellows and Langston. See e.g., <ref> [62, 63, 66, 65, 15] </ref>. 6 Fixed parameter complexity Some problems are not (known to be) linear time solvable when restricted to graphs of bounded treewidth.
Reference: [66] <author> M. R. Fellows and M. A. Langston. </author> <title> On well-partial-order theory and its application to combinatorial problems of VLSI design. </title> <journal> SIAM J. Disc. Meth., </journal> <volume> 5 </volume> <pages> 117-126, </pages> <year> 1992. </year>
Reference-contexts: Several applications for problems from graph layout, VLSI-design, and graph theory have been found by Fellows and Langston. See e.g., <ref> [62, 63, 66, 65, 15] </ref>. 6 Fixed parameter complexity Some problems are not (known to be) linear time solvable when restricted to graphs of bounded treewidth.
Reference: [67] <author> M. R. Fellows and M. A. Langston. </author> <title> On search, decision and the efficiency of polynomial-time algorithms. </title> <journal> J. Comp. Syst. Sc., </journal> <volume> 49 </volume> <pages> 769-779, </pages> <year> 1994. </year>
Reference-contexts: If not, answer no. If so, test minorship of all graphs in the obstruction set | this can now be done in linear time.) In some cases, self-reduction can help to overcome the non-constructive aspects of this theory. A general technique has been established by Fellows and Langston <ref> [67] </ref>. An application of the theorem recently arose in the area of distributed computing, specifically interval routing.
Reference: [68] <author> D. Fernandez-Baca and A. Medipalli. </author> <title> Parametric module allocation on partial k-trees. </title> <journal> IEEE Trans. on Computers, </journal> <volume> 42 </volume> <pages> 738-742, </pages> <year> 1993. </year>
Reference-contexts: Dynamic algorithms for graphs of bounded treewidth have been considered amongst others in [22, 45, 70, 78]. Parametric problems can also be solved effi ciently on graphs of bounded treewidth in many cases <ref> [68, 69] </ref>. 5 Graph minors In a long series of papers, [99, 101, 100, 105, 102, 103, 104, 107, 106, 108, 113, 114, 115, 116, 117, 109, 110, 98, 111, 112] (and others), Robertson and Seymour showed many deep results on graph minors.
Reference: [69] <author> D. Fernandez-Baca and G. Slutzki. </author> <title> Parametic problems on graphs of bounded treewidth. </title> <journal> J. Algorithms, </journal> <volume> 16 </volume> <pages> 408-430, </pages> <year> 1994. </year>
Reference-contexts: Dynamic algorithms for graphs of bounded treewidth have been considered amongst others in [22, 45, 70, 78]. Parametric problems can also be solved effi ciently on graphs of bounded treewidth in many cases <ref> [68, 69] </ref>. 5 Graph minors In a long series of papers, [99, 101, 100, 105, 102, 103, 104, 107, 106, 108, 113, 114, 115, 116, 117, 109, 110, 98, 111, 112] (and others), Robertson and Seymour showed many deep results on graph minors.
Reference: [70] <author> G. N. Frederickson. </author> <title> Maintaining regular properties dynamically in k-terminal graphs. </title> <type> Manuscript. </type> <note> To appear in Algorithmica., </note> <year> 1993. </year>
Reference-contexts: See e.g. [4, 3, 19]. For more algorithms that exploit the small treewidth of graphs, see also (amongst others) [10, 18, 38, 44, 61, 74, 79, 92, 93, 94, 125, 126, 129, 130]. Dynamic algorithms for graphs of bounded treewidth have been considered amongst others in <ref> [22, 45, 70, 78] </ref>.
Reference: [71] <author> R. Garbe. </author> <title> Tree-width and path-width of comparability graphs of interval orders. </title> <editor> In E. W. Mayr, G. Schmidt, and G. Tinhofer, editors, </editor> <booktitle> Proceedings 20th International Workshop on Graph Theoretic Concepts in Computer Science WG'94, </booktitle> <pages> pages 26-37. </pages> <address> Springer Verlag, </address> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 903, </volume> <year> 1995. </year>
Reference-contexts: For several special graph classes, there exist polynomial time algorithms to determine the treewidth of graphs in the class, e.g., for chordal graphs, permutation graphs [33], circular arc graphs [123], circle graphs [85], and distance hereditary graphs [40]. See also <ref> [34, 60, 71, 76, 77, 87] </ref>. One of the most interesting open problems here is the complexity of treewidth when restricted to planar graphs.
Reference: [72] <author> K. Y. Gorbunov. </author> <title> An estimate of the tree-width of a graph which has not a given planar grid as a minor. </title> <type> Manuscript, </type> <year> 1993. </year>
Reference-contexts: In [118], it is shown that one can take c H = 20 2 (2jV H j+4jE H j) 5 . A similar type of bound was proved by Gorbunov <ref> [72] </ref>. In some special cases, one can prove 11 better bounds. For instance, for H = C k , the cycle with k vertices, then one can take c H = k 1 [64]. If H = K 2;k , then one can take c H = 2k 2 [35].
Reference: [73] <author> D. Granot and D. Skorin-Kapov. </author> <title> NC algorithms for recognizing partial 2-trees and 3-trees. </title> <journal> SIAM J. Disc. Meth., </journal> <volume> 4(3) </volume> <pages> 342-354, </pages> <year> 1991. </year>
Reference-contexts: In the case that k is 2, 3, or 4, better algorithms have been found. Practically efficient linear time algorithm exist, based on graph reduction [8, 94, 119]. The parallel algorithms for k = 2; 3 by <ref> [73] </ref> were improved by the results in [31], mentioned above.
Reference: [74] <author> A. Gupta and N. Nishimura. </author> <title> The complexity of subgraph isomorphism: Duality results for graphs of bounded path- and tree-width. </title> <type> Technical Report CS-95-14, </type> <institution> University of Waterloo, Computer Science Department, Waterloo, </institution> <address> Ontario, Canada, </address> <year> 1995. </year>
Reference: [75] <author> E. M. Gurari and I. H. Sudborough. </author> <title> Improved dynamic programming algorithms for bandwidth minimization and the mincut linear arrangement problem. </title> <journal> J. Algorithms, </journal> <volume> 5 </volume> <pages> 531-546, </pages> <year> 1984. </year>
Reference-contexts: As an example: the treewidth of a graph is never larger than its bandwidth. Bandwidth is solvable in O (f (K)n K ) time, K the bandwidth to obtain <ref> [75] </ref>. Bandwidth is hard for all W [i], i 2 N [28], and hence it is unlikely that the bounded treewidth of yes-instances will help to get an e.g., a linear time algorithm for bandwidth for fixed k, even with the help of tree decompositions.
Reference: [76] <author> J. Gustedt. </author> <title> On the pathwidth of chordal graphs. </title> <journal> Disc. Appl. Math., </journal> <volume> 45(3) </volume> <pages> 233-248, </pages> <year> 1993. </year>
Reference-contexts: For several special graph classes, there exist polynomial time algorithms to determine the treewidth of graphs in the class, e.g., for chordal graphs, permutation graphs [33], circular arc graphs [123], circle graphs [85], and distance hereditary graphs [40]. See also <ref> [34, 60, 71, 76, 77, 87] </ref>. One of the most interesting open problems here is the complexity of treewidth when restricted to planar graphs.
Reference: [77] <author> M. Habib and R. H. Mohring. </author> <title> Treewidth of cocomparability graphs and a new order-theoretic parameter. </title> <booktitle> ORDER, </booktitle> <volume> 1 </volume> <pages> 47-60, </pages> <year> 1994. </year>
Reference-contexts: For several special graph classes, there exist polynomial time algorithms to determine the treewidth of graphs in the class, e.g., for chordal graphs, permutation graphs [33], circular arc graphs [123], circle graphs [85], and distance hereditary graphs [40]. See also <ref> [34, 60, 71, 76, 77, 87] </ref>. One of the most interesting open problems here is the complexity of treewidth when restricted to planar graphs.
Reference: [78] <author> T. Hagerup. </author> <title> Dynamic algorithms for graphs of bounded treewidth. </title> <editor> In P. Degano, R. Gorrieri, and A. Marchetti-Spaccamela, editors, </editor> <booktitle> Proceedings 24th International Colloquium on Automata, Languages, and Programming, </booktitle> <pages> pages 292-302. </pages> <address> Springer Verlag, </address> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 1256, </volume> <year> 1997. </year>
Reference-contexts: See e.g. [4, 3, 19]. For more algorithms that exploit the small treewidth of graphs, see also (amongst others) [10, 18, 38, 44, 61, 74, 79, 92, 93, 94, 125, 126, 129, 130]. Dynamic algorithms for graphs of bounded treewidth have been considered amongst others in <ref> [22, 45, 70, 78] </ref>.
Reference: [79] <author> T. Hagerup, J. Katajainen, N. Nishimura, and P. Ragde. </author> <title> Characterizations of k-terminal flow networks and computing network flows in partial k-trees. </title> <booktitle> In Proceedings SODA'95, </booktitle> <year> 1995. </year>
Reference: [80] <author> K. Jansen and P. Sche*er. </author> <title> Generalized coloring for tree-like graphs. </title> <booktitle> In Proceedings 18th International Workshop on Graph-Theoretic Concepts in Computer Science WG'92, </booktitle> <pages> pages 50-59, </pages> <address> Berlin, </address> <year> 1993. </year> <title> Springer Verlag, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. </volume> <pages> 657. </pages>
Reference-contexts: Again, we can compute the full set for a node when given the full sets for its children in a tree decomposition in constant time, giving a linear time algorithm. (For similar algorithms, see e.g., <ref> [80] </ref>.) Actually, results exploiting analogues to Myhill-Nerode theory (for finite state automata) can be used to show existence of an algorithm at an earlier stage of the design process, when dealing with certain types of decision problems. Let P be a graph property.
Reference: [81] <author> D. Kaller. </author> <title> Definability equals recognizability of partial 3-trees. </title> <booktitle> In Proceedings 22nd International Workshop on Graph-Theoretic Concepts in Computer Science WG'96, </booktitle> <pages> pages 239-253. </pages> <address> Springer Verlag, </address> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 1197, </volume> <year> 1997. </year>
Reference-contexts: Problems in monadic second order logic are finite index. An interesting question is whether language constructions can be added to monadic second order logic, such that its expressive power becomes sufficient to describe all problems that are finite index. See e.g., <ref> [50, 52, 81] </ref>. Additional remarks Some problems whose decision versions are not in NP can also be solved in linear time on graphs of bounded treewidth. See e.g. [4, 3, 19].
Reference: [82] <author> H. Kaplan and R. Shamir. </author> <title> Pathwidth, bandwidth and completion problems to proper interval graphs with small cliques. </title> <journal> SIAM J. Comput., </journal> <volume> 25 </volume> <pages> 540-561, </pages> <year> 1996. </year>
Reference-contexts: Other graph problems where yes-instances have bounded treewidth, and which are hard for W [1] or a larger class, can be found in <ref> [28, 27, 29, 82, 83] </ref>. Postscript I want to thank all who cooperated with me and informed me on all kinds of treewidth related topics in the past years, and to apologize to those whose work I forgot to mention here.
Reference: [83] <author> H. Kaplan, R. Shamir, and R. E. Tarjan. </author> <title> Tractability of parameterized completion problems on chordal and interval graphs: Minimum fill-in and physical mapping. </title> <booktitle> In Proceedings of the 35th annual symposium on Foundations of Computer Science (FOCS), </booktitle> <pages> pages 780-791. </pages> <publisher> IEEE Computer Science Press, </publisher> <year> 1994. </year>
Reference-contexts: Other graph problems where yes-instances have bounded treewidth, and which are hard for W [1] or a larger class, can be found in <ref> [28, 27, 29, 82, 83] </ref>. Postscript I want to thank all who cooperated with me and informed me on all kinds of treewidth related topics in the past years, and to apologize to those whose work I forgot to mention here.
Reference: [84] <author> N. G. Kinnersley and M. A. Langston. </author> <title> Obstruction set isolation for the gate matrix layout problem. </title> <journal> Disc. Appl. Math., </journal> <volume> 54 </volume> <pages> 169-213, </pages> <year> 1994. </year>
Reference-contexts: There are several results giving the obstruction sets of specific minor closed classes of graphs, e.g., the obstruction set of graphs of treewidth two is fK 4 g; see [11, 120] for the obstruction set of graphs of treewidth 3, and <ref> [84] </ref> for the obstruction sets of graphs of pathwidth 1, respectively 2. The size of the obstruction sets can grow very fast: for instance, the obstruction set of the graphs with pathwidth at most k contains at least k! 2 trees, each containing 53 k 1 2 vertices [124].
Reference: [85] <author> T. Kloks. </author> <title> Treewidth of circle graphs. </title> <booktitle> In Proceedings Forth International Symposium on Algorithms and Computation, ISAAC'93, </booktitle> <pages> pages 108-117, </pages> <address> Berlin, </address> <year> 1993. </year> <title> Springer Verlag, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. </volume> <pages> 762. </pages>
Reference-contexts: For several special graph classes, there exist polynomial time algorithms to determine the treewidth of graphs in the class, e.g., for chordal graphs, permutation graphs [33], circular arc graphs [123], circle graphs <ref> [85] </ref>, and distance hereditary graphs [40]. See also [34, 60, 71, 76, 77, 87]. One of the most interesting open problems here is the complexity of treewidth when restricted to planar graphs.
Reference: [86] <author> T. Kloks. </author> <title> Treewidth. Computations and Approximations. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 842. </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1994. </year>
Reference-contexts: Each of these algorithms either determines that the treewidth of input graph is more than G or finds a tree decomposition of width at most f (k) for some linear function f . (See [42] for a simple linear time algorithm for the pathwidth variant of this problem.) In <ref> [32, 86] </ref>, Bodlaender and Kloks address the second step of the algorithm of Robertson and Seymour: they give an algorithm for the second step that solves the construction problem in linear time (i.e., provided a tree decomposition of bounded but perhaps not optimal width has been found).
Reference: [87] <author> T. Kloks and D. Kratsch. </author> <title> Treewidth of chordal bipartite graphs. </title> <journal> J. Algorithms, </journal> <volume> 19 </volume> <pages> 266-281, </pages> <year> 1995. </year>
Reference-contexts: For several special graph classes, there exist polynomial time algorithms to determine the treewidth of graphs in the class, e.g., for chordal graphs, permutation graphs [33], circular arc graphs [123], circle graphs [85], and distance hereditary graphs [40]. See also <ref> [34, 60, 71, 76, 77, 87] </ref>. One of the most interesting open problems here is the complexity of treewidth when restricted to planar graphs.
Reference: [88] <author> E. Korach and N. Solel. </author> <title> Linear time algorithm for minimum weight Steiner tree in graphs with bounded treewidth. </title> <type> Manuscript, </type> <year> 1990. </year>
Reference: [89] <author> A. Kornai and Z. Tuza. Narrowness, </author> <title> pathwidth, and their application in natural language processing. </title> <journal> Disc. Appl. Math., </journal> <volume> 36 </volume> <pages> 87-92, </pages> <year> 1992. </year>
Reference-contexts: There are several `real world' applications of the notion of treewidth, amongst others in expert systems [91], telecommunication network design ([46]), VLSI-design, Choleski factorization, natural language processing <ref> [89] </ref> (see e.g. [21] for a brief overview.) An interesting recent application has been found by Thorup [127].
Reference: [90] <author> J. Lagergren. </author> <title> Efficient parallel algorithms for graphs of bounded tree-width. </title> <journal> J. Algorithms, </journal> <volume> 20 </volume> <pages> 20-44, </pages> <year> 1996. </year> <month> 20 </month>
Reference-contexts: this tree decomposition is used to check in linear time whether G contains an element of the obstruction set of graphs of treewidth at most k (see section 5.) The first step of this algorithm was improved by Matousek and Thomas [94], who gave a faster randomized algorithm, by Lagergren <ref> [90] </ref>, who gave a parallel algorithm using O (log 3 n) time and O (n) processors on a CRCW PRAM, or a sequential O (nlog 2 n) time algorithm, and Reed, who gave an algorithm running in O (n log n) time. <p> Older algorithms by Bodlaender [17] and Chandrasekha-ran and Hedetniemi [43] need large numbers of processors. The first algorithm with work (product of time and number of processors) only a polylogarithmic factor more than linear was the algorithm by Lagergren <ref> [90] </ref>, discussed above. This result was improved by Bodlaender and Hagerup [31], who, combining paralliza-tions of the sequential algorithms of [24] and [6] with new techniques, obtained the following results.
Reference: [91] <author> S. J. Lauritzen and D. J. Spiegelhalter. </author> <title> Local computations with probabil-ities on graphical structures and their application to expert systems. </title> <journal> The Journal of the Royal Statistical Society. Series B (Methodological), </journal> <volume> 50 </volume> <pages> 157-224, </pages> <year> 1988. </year>
Reference-contexts: There are several `real world' applications of the notion of treewidth, amongst others in expert systems <ref> [91] </ref>, telecommunication network design ([46]), VLSI-design, Choleski factorization, natural language processing [89] (see e.g. [21] for a brief overview.) An interesting recent application has been found by Thorup [127].
Reference: [92] <author> S. Mahajan and J. G. Peters. </author> <title> Regularity and locality in k-terminal graphs. </title> <journal> Disc. Appl. Math., </journal> <volume> 54 </volume> <pages> 229-250, </pages> <year> 1994. </year>
Reference: [93] <author> E. Mata-Montero. </author> <title> Resilience of partial k-tree networks with edge and node failures. </title> <journal> Networks, </journal> <volume> 21 </volume> <pages> 321-344, </pages> <year> 1991. </year>
Reference: [94] <author> J. Matousek and R. Thomas. </author> <title> On the complexity of finding iso- and other morphisms for partial k-trees. </title> <journal> Disc. Math., </journal> <volume> 108 </volume> <pages> 343-364, </pages> <year> 1992. </year>
Reference-contexts: similar result; the technical difference is not important.) Then, this tree decomposition is used to check in linear time whether G contains an element of the obstruction set of graphs of treewidth at most k (see section 5.) The first step of this algorithm was improved by Matousek and Thomas <ref> [94] </ref>, who gave a faster randomized algorithm, by Lagergren [90], who gave a parallel algorithm using O (log 3 n) time and O (n) processors on a CRCW PRAM, or a sequential O (nlog 2 n) time algorithm, and Reed, who gave an algorithm running in O (n log n) time. <p> Each of the algorithm has optimal speedup, i.e., the product of time and number of processors is linear. In the case that k is 2, 3, or 4, better algorithms have been found. Practically efficient linear time algorithm exist, based on graph reduction <ref> [8, 94, 119] </ref>. The parallel algorithms for k = 2; 3 by [73] were improved by the results in [31], mentioned above.
Reference: [95] <author> A. </author> <title> Parra. Structural and Algorithmic Aspects of Chordal Graph Embeddings. </title> <type> PhD thesis, </type> <institution> Technical University Berlin, </institution> <year> 1996. </year>
Reference: [96] <author> S. Ramachandramurthi. </author> <title> Algorithms for VLSI Layout Based on Graph Width Metrics. </title> <type> PhD thesis, </type> <institution> Computer Science Department, University of Tennessee, Knoxville, Tennessee, USA, </institution> <year> 1994. </year>
Reference-contexts: The size of the obstruction sets can grow very fast: for instance, the obstruction set of the graphs with pathwidth at most k contains at least k! 2 trees, each containing 53 k 1 2 vertices [124]. Ramachandramurthi <ref> [96, 97] </ref> investigated the graphs with k + 1, k + 2 and k + 3 vertices that belong to the obstruction sets for graphs of treewidth or pathwidth k. See, e.g., also [41, 56]. Some additional results make that Theorem 5.1 has surprising algorithmic implications.
Reference: [97] <author> S. Ramachandramurthi. </author> <title> The structure and number of obstructions to treewidth. </title> <journal> SIAM J. Disc. Meth., </journal> <volume> 10 </volume> <pages> 146-157, </pages> <year> 1997. </year>
Reference-contexts: The size of the obstruction sets can grow very fast: for instance, the obstruction set of the graphs with pathwidth at most k contains at least k! 2 trees, each containing 53 k 1 2 vertices [124]. Ramachandramurthi <ref> [96, 97] </ref> investigated the graphs with k + 1, k + 2 and k + 3 vertices that belong to the obstruction sets for graphs of treewidth or pathwidth k. See, e.g., also [41, 56]. Some additional results make that Theorem 5.1 has surprising algorithmic implications.
Reference: [98] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. XX. Wagner's conjecture. </title> <booktitle> In prepartion. </booktitle>
Reference: [99] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. I. Excluding a forest. </title> <journal> J. Comb. Theory Series B, </journal> <volume> 35 </volume> <pages> 39-61, </pages> <year> 1983. </year>
Reference-contexts: A notion related to treewidth is pathwidth, defined first in <ref> [99] </ref>. A tree decomposition (X ; T ) is a path decomposition if T is a path; the pathwidth of a graph G is the minimum width over all path decompositions of G. A survey giving relations to notions of graph searching has been written by Bienstock [14].
Reference: [100] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. III. Planar tree-width. </title> <journal> J. Comb. Theory Series B, </journal> <volume> 36 </volume> <pages> 49-64, </pages> <year> 1984. </year>
Reference: [101] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. II. Algorithmic aspects of tree-width. </title> <journal> J. Algorithms, </journal> <volume> 7 </volume> <pages> 309-322, </pages> <year> 1986. </year>
Reference-contexts: Thus, certain optimization problems arising in compiling can be solved using techniques relying on small treewidth. 2 Definitions The notion of treewidth was introduced by Robertson and Seymour in their work on graph minors <ref> [101] </ref>. fl This research was partially supported by ESPRIT Long Term Research Project 20244 (project ALCOM IT: Algorithms and Complexity in Information Technology). y Department of Computer Science, Utrecht University, P.O. Box 80.089, 3508 TB Utrecht, the Netherlands. Email: hansb@cs.ruu.nl. 1 Definition. <p> If the minor closed class of graphs G does not contain all planar graphs, then a linear time algorithm is possible. Theorem 5.3 (Robertson, Seymour <ref> [101] </ref>) For any planar graph H, there is a constant c H , such that every graph with no minor isomorphic to H has treewidth at most c H .
Reference: [102] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. V. Excluding a planar graph. </title> <journal> J. Comb. Theory Series B, </journal> <volume> 41 </volume> <pages> 92-114, </pages> <year> 1986. </year>
Reference: [103] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. VI. Disjoint paths across a disc. </title> <journal> J. Comb. Theory Series B, </journal> <volume> 41 </volume> <pages> 115-138, </pages> <year> 1986. </year>
Reference: [104] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. VII. Disjoint paths on a surface. </title> <journal> J. Comb. Theory Series B, </journal> <volume> 45 </volume> <pages> 212-254, </pages> <year> 1988. </year>
Reference: [105] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. IV. Tree-width and well-quasi-ordering. </title> <journal> J. Comb. Theory Series B, </journal> <volume> 48 </volume> <pages> 227-254, </pages> <year> 1990. </year> <month> 21 </month>
Reference: [106] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. IX. Disjoint crossed paths. </title> <journal> J. Comb. Theory Series B, </journal> <volume> 49 </volume> <pages> 40-77, </pages> <year> 1990. </year>
Reference: [107] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. VIII. A Kuratowski theorem for general surfaces. </title> <journal> J. Comb. Theory Series B, </journal> <volume> 48 </volume> <pages> 255-288, </pages> <year> 1990. </year>
Reference: [108] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. X. Obstructions to tree-decomposition. </title> <journal> J. Comb. Theory Series B, </journal> <volume> 52 </volume> <pages> 153-190, </pages> <year> 1991. </year>
Reference: [109] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. XVI. Excluding a nonplanar graph. </title> <type> Manuscript, </type> <year> 1991. </year>
Reference: [110] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. XVII. Taming a vortex. </title> <type> Manuscript, </type> <year> 1991. </year>
Reference: [111] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. XXI. Graphs woth unique linkages. </title> <type> Manuscript, </type> <year> 1992. </year>
Reference: [112] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. XXII. Irrelevant vertices in linkage problems. </title> <type> Manuscript, </type> <year> 1992. </year>
Reference: [113] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. XI. Distance on a surface. </title> <journal> J. Comb. Theory Series B, </journal> <volume> 60 </volume> <pages> 72-106, </pages> <year> 1994. </year>
Reference: [114] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. XII. Excluding a nonplanar graph. </title> <journal> J. Comb. Theory Series B, </journal> <volume> 64 </volume> <pages> 240-272, </pages> <year> 1995. </year>
Reference: [115] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. XIII. The disjoint paths problem. </title> <journal> J. Comb. Theory Series B, </journal> <volume> 63 </volume> <pages> 65-110, </pages> <year> 1995. </year>
Reference-contexts: A survey giving relations to notions of graph searching has been written by Bienstock [14]. Another notion that is related to treewidth and that might be more suitable in some cases for implementation purposes is branchwidth <ref> [115] </ref>. <p> Using deep results on graph minors, Robertson and Seymour then gave a non-constructive proof of the existence of a decision algorithm that uses O (n 2 ) time <ref> [115] </ref>. This algorithm has the following structure. <p> See, e.g., also [41, 56]. Some additional results make that Theorem 5.1 has surprising algorithmic implications. Robertson and Seymour <ref> [115] </ref> have shown that for every fixed graph H, there exists an algorithm that decides in O (n 3 ) time whether H is a minor of a given graph G.
Reference: [116] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. XIV. Extending an embedding. </title> <journal> J. Comb. Theory Series B, </journal> <volume> 65 </volume> <pages> 23-50, </pages> <year> 1995. </year>
Reference: [117] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. XV. Giant steps. </title> <journal> J. Comb. Theory Series B, </journal> <volume> 68 </volume> <pages> 112-148, </pages> <year> 1996. </year>
Reference: [118] <author> N. Robertson, P. D. Seymour, and R. Thomas. </author> <title> Quickly excluding a planar graph. </title> <journal> J. Comb. Theory Series B, </journal> <volume> 62 </volume> <pages> 323-348, </pages> <year> 1994. </year>
Reference-contexts: If H is a forest, then there exists a similar upper bound c H on the pathwidth of graphs that do not contain H as a minor (see [16, 42]). In <ref> [118] </ref>, it is shown that one can take c H = 20 2 (2jV H j+4jE H j) 5 . A similar type of bound was proved by Gorbunov [72]. In some special cases, one can prove 11 better bounds.
Reference: [119] <author> D. P. Sanders. </author> <title> On linear recognition of tree-width at most four. </title> <journal> SIAM J. Disc. Meth., </journal> <volume> 9(1) </volume> <pages> 101-117, </pages> <year> 1996. </year>
Reference-contexts: Each of the algorithm has optimal speedup, i.e., the product of time and number of processors is linear. In the case that k is 2, 3, or 4, better algorithms have been found. Practically efficient linear time algorithm exist, based on graph reduction <ref> [8, 94, 119] </ref>. The parallel algorithms for k = 2; 3 by [73] were improved by the results in [31], mentioned above.
Reference: [120] <author> A. Satyanarayana and L. Tung. </author> <title> A characterization of partial 3-trees. </title> <journal> Networks, </journal> <volume> 20 </volume> <pages> 299-322, </pages> <year> 1990. </year>
Reference-contexts: There are several results giving the obstruction sets of specific minor closed classes of graphs, e.g., the obstruction set of graphs of treewidth two is fK 4 g; see <ref> [11, 120] </ref> for the obstruction set of graphs of treewidth 3, and [84] for the obstruction sets of graphs of pathwidth 1, respectively 2.
Reference: [121] <author> P. Sche*er. </author> <title> A practical linear time algorithm for disjoint paths in graphs with bounded tree-width. </title> <type> Report 396/1994, </type> <institution> TU Berlin, Fachbereich Math-ematik, </institution> <address> Berlin, </address> <year> 1994. </year> <month> 22 </month>
Reference-contexts: See <ref> [121] </ref>. When designing these types of algorithms, the most important step is the right choice of characteristic. First, it should fulfill property (1).
Reference: [122] <author> P. D. Seymour and R. Thomas. </author> <title> Call routing and the ratcatcher. </title> <journal> Combina--torica, </journal> <volume> 14(2) </volume> <pages> 217-241, </pages> <year> 1994. </year>
Reference-contexts: See also [34, 60, 71, 76, 77, 87]. One of the most interesting open problems here is the complexity of treewidth when restricted to planar graphs. As branchwidth can be solved in polynomial time on planar graphs <ref> [122] </ref>, and branchwidth differs at most a factor 1.5 from treewidth, we have a polynomial time approximation algorithm for treewidth on planar graphs with performance ratio 1.5.
Reference: [123] <author> R. Sundaram, K. Sher Singh, and C. Pandu Rangan. </author> <title> Treewidth of circular-arc graphs. </title> <journal> SIAM J. Disc. Meth., </journal> <volume> 7 </volume> <pages> 647-655, </pages> <year> 1994. </year>
Reference-contexts: For several special graph classes, there exist polynomial time algorithms to determine the treewidth of graphs in the class, e.g., for chordal graphs, permutation graphs [33], circular arc graphs <ref> [123] </ref>, circle graphs [85], and distance hereditary graphs [40]. See also [34, 60, 71, 76, 77, 87]. One of the most interesting open problems here is the complexity of treewidth when restricted to planar graphs.
Reference: [124] <author> A. Takahashi, S. Ueno, and Y. Kajitani. </author> <title> Minimal acyclic forbidden minors for the family of graphs with bounded path-width. </title> <journal> Disc. Math., </journal> <volume> 127(1/3):293 - 304, </volume> <year> 1994. </year>
Reference-contexts: The size of the obstruction sets can grow very fast: for instance, the obstruction set of the graphs with pathwidth at most k contains at least k! 2 trees, each containing 53 k 1 2 vertices <ref> [124] </ref>. Ramachandramurthi [96, 97] investigated the graphs with k + 1, k + 2 and k + 3 vertices that belong to the obstruction sets for graphs of treewidth or pathwidth k. See, e.g., also [41, 56]. Some additional results make that Theorem 5.1 has surprising algorithmic implications.
Reference: [125] <author> J. Telle and A. Proskurowski. </author> <title> Efficient sets in partial k-trees. </title> <journal> Disc. Appl. Math., </journal> <volume> 44 </volume> <pages> 109-117, </pages> <year> 1993. </year>
Reference: [126] <author> J. Telle and A. Proskurowski. </author> <title> Practical algorithms on partial k-trees with an application to domination-like problems. </title> <booktitle> In Proceedings of Workshop on Algorithms and Data Structures WADS'93, </booktitle> <pages> pages 610-621. </pages> <address> Springer Verlag, </address> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 700, </volume> <year> 1993. </year>
Reference: [127] <author> M. </author> <title> Thorup. Structured programs have small tree-width and good register allocation. </title> <type> Technical Report DIKU-TR-95/18, </type> <institution> Department of Computer Science, University of Copenhagen, Denmark, </institution> <year> 1995. </year> <note> To appear in: Proceedings WG'97. </note>
Reference-contexts: There are several `real world' applications of the notion of treewidth, amongst others in expert systems [91], telecommunication network design ([46]), VLSI-design, Choleski factorization, natural language processing [89] (see e.g. [21] for a brief overview.) An interesting recent application has been found by Thorup <ref> [127] </ref>. He shows that for many well known programming languages (like C, Pascal, Modula-2), the control-flow graph of goto-free programs has treewidth bounded by a small constant (e.g., 3 for Pascal, 6 for C).
Reference: [128] <author> E. Wanke. </author> <title> Bounded tree-width and LOGCFL. </title> <journal> J. Algorithms, </journal> <volume> 16 </volume> <pages> 470-491, </pages> <year> 1994. </year>
Reference: [129] <author> T. V. Wimer. </author> <title> Linear Algorithms on k-Terminal Graphs. </title> <type> PhD thesis, </type> <institution> Dept. of Computer Science, Clemson University, </institution> <year> 1987. </year>
Reference: [130] <author> X. Zhou, S. Nakano, and T. Nishizeki. </author> <title> Edge-coloring partial k-trees. </title> <journal> J. Algorithms, </journal> <volume> 21 </volume> <pages> 598-617, </pages> <year> 1996. </year> <month> 23 </month>
References-found: 130

