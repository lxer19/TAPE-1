URL: http://www.cs.utah.edu/~sci/publications/sc94_9.ps
Refering-URL: http://www.cs.utah.edu/~sci/scirun/papers.html
Root-URL: 
Email: E-mail: crj@cs.utah.edu and sparker@cs.utah.edu  
Title: A Computational Steering Model Applied to Problems in Medicine  
Author: Christopher R. Johnson and Steven G. Parker 
Address: Salt Lake City, UT 84112.  
Affiliation: Department of Computer Science University of Utah  
Abstract: We describe a computational steering model which allows users to interactively change boundary conditions, model geometry, and computational parameters via a graphical user interface. To replace the typical simulation mode in which the researcher manually sets input parameters, computes results, stores data off to disk, visualizes the results via a separate visualization package, then starts again at the beginning we have designed software to "close the loop" and allow the visualization to help guide (steer) the design and computation phases of the simulation. We have applied the computational steering model to problems in medicine, specifically to applications in bioelectric field phenomena and biomedical device design. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W. Gu, J. Vetter, and K. Schwan. </author> <title> An annotated bibliography of interactive program steering. </title> <institution> Georgia Institute of Technology Technical Report, </institution> <year> 1994. </year>
Reference-contexts: Computational steering has been defined as "the capacity to control the execution of long-running, resource-intensive programs" <ref> [1] </ref>. In the field of computational science, we apply this concept to link visualization with geometric design and computational phases to interactively explore (steer) a simulation in time and/or space. As knowledge is gained, it can be used to change the input conditions and/or other parameters of the simulation.
Reference: [2] <author> C.R. Johnson, R.S. MacLeod, and P.R. Ershler. </author> <title> A computer model for the study of electrical current flow in the human thorax. </title> <journal> Computers in Biology and Medicine, </journal> <volume> 22(3) </volume> <pages> 305-323, </pages> <year> 1992. </year>
Reference-contexts: Over the past several years we have developed numerous techniques to solve com-putationally intensive problems in medicine focusing primarily on bioelectric field problems, such as (1) interactive programs to construct, manipulate, and display large scale, three-dimensional surface and volumetric meshes <ref> [2, 3, 4, 5] </ref>; (2) three-dimensional, adaptive, finite element programs for solving elliptic partial differential equations with general boundary conditions and source terms [2, 6, 7, 8]; (3) programs that solve the resulting large system of equations and simultaneously apply global and local regularization to ill-posed inverse problems [2, 9]; and <p> intensive problems in medicine focusing primarily on bioelectric field problems, such as (1) interactive programs to construct, manipulate, and display large scale, three-dimensional surface and volumetric meshes [2, 3, 4, 5]; (2) three-dimensional, adaptive, finite element programs for solving elliptic partial differential equations with general boundary conditions and source terms <ref> [2, 6, 7, 8] </ref>; (3) programs that solve the resulting large system of equations and simultaneously apply global and local regularization to ill-posed inverse problems [2, 9]; and (4) scientific visualization packages for displaying and interpreting the results [3, 4, 5, 10]. <p> volumetric meshes [2, 3, 4, 5]; (2) three-dimensional, adaptive, finite element programs for solving elliptic partial differential equations with general boundary conditions and source terms [2, 6, 7, 8]; (3) programs that solve the resulting large system of equations and simultaneously apply global and local regularization to ill-posed inverse problems <ref> [2, 9] </ref>; and (4) scientific visualization packages for displaying and interpreting the results [3, 4, 5, 10]. Because our work involves a large problem size, much of the software we have developed has been designed to take advantage of parallel processing via high performance architectures. <p> a linear system, A = b, where A is sparse, symmetric, and positive definite and on the order of N = 25; 000 1; 000; 000 depending on the level of mesh refinement, on the level of interactiveness required by the user, and on the specific goals of the study <ref> [2, 3] </ref>. Due to the quasi-static nature of the bioelectric field problems we are solving [11], we are primarily interested in spatial steering for this application. Spatial steering involves controlling the discretization level of the geometry, typically in terms of the accuracy of the finite element model.
Reference: [3] <author> C.R. Johnson, R.S. MacLeod, and M.A. Mathe-son. </author> <title> Computational medicine: Bioelectric field problems. </title> <booktitle> IEEE COMPUTER, </booktitle> <pages> pages 59-67, </pages> <month> Oct., </month> <year> 1993. </year>
Reference-contexts: Over the past several years we have developed numerous techniques to solve com-putationally intensive problems in medicine focusing primarily on bioelectric field problems, such as (1) interactive programs to construct, manipulate, and display large scale, three-dimensional surface and volumetric meshes <ref> [2, 3, 4, 5] </ref>; (2) three-dimensional, adaptive, finite element programs for solving elliptic partial differential equations with general boundary conditions and source terms [2, 6, 7, 8]; (3) programs that solve the resulting large system of equations and simultaneously apply global and local regularization to ill-posed inverse problems [2, 9]; and <p> solving elliptic partial differential equations with general boundary conditions and source terms [2, 6, 7, 8]; (3) programs that solve the resulting large system of equations and simultaneously apply global and local regularization to ill-posed inverse problems [2, 9]; and (4) scientific visualization packages for displaying and interpreting the results <ref> [3, 4, 5, 10] </ref>. Because our work involves a large problem size, much of the software we have developed has been designed to take advantage of parallel processing via high performance architectures. <p> a linear system, A = b, where A is sparse, symmetric, and positive definite and on the order of N = 25; 000 1; 000; 000 depending on the level of mesh refinement, on the level of interactiveness required by the user, and on the specific goals of the study <ref> [2, 3] </ref>. Due to the quasi-static nature of the bioelectric field problems we are solving [11], we are primarily interested in spatial steering for this application. Spatial steering involves controlling the discretization level of the geometry, typically in terms of the accuracy of the finite element model. <p> The user is able to visualize and explore intermediate results while the calculations continue to progress. Refined datasets are automatically substituted for the less accurate ones as they are completed. To date we have developed several scientific visualization systems <ref> [3, 4, 5, 10] </ref>. One is an interactive three-dimensional GL based graphics system for viewing surface and volume geometry and simulation results. For higher quality ray-traced rendered images, we have developed a batch-mode graphics system which exploits parallel processors and/or clusters of workstations.
Reference: [4] <author> R.S. MacLeod, C.R. Johnson, and M.A. Mathe--son. </author> <title> Visualization tools for computational electrocardiography. </title> <booktitle> In Visualization in Biomedical Computing, </booktitle> <pages> pages 433-444, </pages> <year> 1992. </year>
Reference-contexts: Over the past several years we have developed numerous techniques to solve com-putationally intensive problems in medicine focusing primarily on bioelectric field problems, such as (1) interactive programs to construct, manipulate, and display large scale, three-dimensional surface and volumetric meshes <ref> [2, 3, 4, 5] </ref>; (2) three-dimensional, adaptive, finite element programs for solving elliptic partial differential equations with general boundary conditions and source terms [2, 6, 7, 8]; (3) programs that solve the resulting large system of equations and simultaneously apply global and local regularization to ill-posed inverse problems [2, 9]; and <p> solving elliptic partial differential equations with general boundary conditions and source terms [2, 6, 7, 8]; (3) programs that solve the resulting large system of equations and simultaneously apply global and local regularization to ill-posed inverse problems [2, 9]; and (4) scientific visualization packages for displaying and interpreting the results <ref> [3, 4, 5, 10] </ref>. Because our work involves a large problem size, much of the software we have developed has been designed to take advantage of parallel processing via high performance architectures. <p> The user is able to visualize and explore intermediate results while the calculations continue to progress. Refined datasets are automatically substituted for the less accurate ones as they are completed. To date we have developed several scientific visualization systems <ref> [3, 4, 5, 10] </ref>. One is an interactive three-dimensional GL based graphics system for viewing surface and volume geometry and simulation results. For higher quality ray-traced rendered images, we have developed a batch-mode graphics system which exploits parallel processors and/or clusters of workstations.
Reference: [5] <author> R.S. MacLeod, C.R. Johnson, and M.A. Math-eson. </author> <title> Visualization of cardiac bioelectricity | a case study. </title> <booktitle> In IEEE Visualization `92, </booktitle> <pages> pages 411-418, </pages> <year> 1992. </year>
Reference-contexts: Over the past several years we have developed numerous techniques to solve com-putationally intensive problems in medicine focusing primarily on bioelectric field problems, such as (1) interactive programs to construct, manipulate, and display large scale, three-dimensional surface and volumetric meshes <ref> [2, 3, 4, 5] </ref>; (2) three-dimensional, adaptive, finite element programs for solving elliptic partial differential equations with general boundary conditions and source terms [2, 6, 7, 8]; (3) programs that solve the resulting large system of equations and simultaneously apply global and local regularization to ill-posed inverse problems [2, 9]; and <p> solving elliptic partial differential equations with general boundary conditions and source terms [2, 6, 7, 8]; (3) programs that solve the resulting large system of equations and simultaneously apply global and local regularization to ill-posed inverse problems [2, 9]; and (4) scientific visualization packages for displaying and interpreting the results <ref> [3, 4, 5, 10] </ref>. Because our work involves a large problem size, much of the software we have developed has been designed to take advantage of parallel processing via high performance architectures. <p> The user is able to visualize and explore intermediate results while the calculations continue to progress. Refined datasets are automatically substituted for the less accurate ones as they are completed. To date we have developed several scientific visualization systems <ref> [3, 4, 5, 10] </ref>. One is an interactive three-dimensional GL based graphics system for viewing surface and volume geometry and simulation results. For higher quality ray-traced rendered images, we have developed a batch-mode graphics system which exploits parallel processors and/or clusters of workstations.
Reference: [6] <author> C.R. Johnson, R.S. MacLeod, and M.A. Math-eson. </author> <title> Computer simultions reveal complexity of electrical activity in the human thorax. </title> <journal> Comp. in Physics, </journal> <volume> 6(3) </volume> <pages> 230-237, </pages> <month> May/June </month> <year> 1992. </year>
Reference-contexts: intensive problems in medicine focusing primarily on bioelectric field problems, such as (1) interactive programs to construct, manipulate, and display large scale, three-dimensional surface and volumetric meshes [2, 3, 4, 5]; (2) three-dimensional, adaptive, finite element programs for solving elliptic partial differential equations with general boundary conditions and source terms <ref> [2, 6, 7, 8] </ref>; (3) programs that solve the resulting large system of equations and simultaneously apply global and local regularization to ill-posed inverse problems [2, 9]; and (4) scientific visualization packages for displaying and interpreting the results [3, 4, 5, 10].
Reference: [7] <author> C.R. Johnson and R.S. MacLeod. </author> <title> Nonuniform spatial mesh adaption using a posteriori error estimates: applications to forward and inverse problems. </title> <journal> Applied Numerical Mathematics, </journal> <volume> 14 </volume> <pages> 311-326, </pages> <year> 1994. </year>
Reference-contexts: intensive problems in medicine focusing primarily on bioelectric field problems, such as (1) interactive programs to construct, manipulate, and display large scale, three-dimensional surface and volumetric meshes [2, 3, 4, 5]; (2) three-dimensional, adaptive, finite element programs for solving elliptic partial differential equations with general boundary conditions and source terms <ref> [2, 6, 7, 8] </ref>; (3) programs that solve the resulting large system of equations and simultaneously apply global and local regularization to ill-posed inverse problems [2, 9]; and (4) scientific visualization packages for displaying and interpreting the results [3, 4, 5, 10]. <p> Briefly, suppose we want the accuracy of the finite element approximation to be within a given tolerance, ffi of the true solution, k h k ffi: (4) We can use an error estimator <ref> [18, 7, 8] </ref> to refine the mesh so that the resulting error in the finite element approximation of the governing equations decreases to within the limits imposed by equation (4).
Reference: [8] <author> J.A. Schmidt, C.R. Johnson, J.C. Eason, </author> <title> and R.S. MacLeod. Applications of automatic mesh generation and adaptive methods in computational medicine. </title> <editor> In J.E. Flaherty and I. Babuska, editors, </editor> <title> Modeling, Mesh Generation, and Adaptive Methods for Partial Differential Equations. </title> <note> Springer-Verlag, 1994 (to appear). </note>
Reference-contexts: intensive problems in medicine focusing primarily on bioelectric field problems, such as (1) interactive programs to construct, manipulate, and display large scale, three-dimensional surface and volumetric meshes [2, 3, 4, 5]; (2) three-dimensional, adaptive, finite element programs for solving elliptic partial differential equations with general boundary conditions and source terms <ref> [2, 6, 7, 8] </ref>; (3) programs that solve the resulting large system of equations and simultaneously apply global and local regularization to ill-posed inverse problems [2, 9]; and (4) scientific visualization packages for displaying and interpreting the results [3, 4, 5, 10]. <p> To solve the bioelectric field problems associated with equations (1-3), we have constructed torso models from MRI (magnetic resonance imaging) scans. A semi-automatic segmentation algorithm is used to classify the relevant tissues [14]. We then utilize two-and three-dimensional Delaunay triangulation algorithms to construct three-dimensional surfaces and/or volumetric meshes <ref> [8, 15, 16] </ref>. Geometric postprocess-ing consists of assigning each tetrahedron an electrical conductivity tensor. The range of conductivity represented in the model is approximately 50 to 1 with blood the most conductive and bone the least. <p> Briefly, suppose we want the accuracy of the finite element approximation to be within a given tolerance, ffi of the true solution, k h k ffi: (4) We can use an error estimator <ref> [18, 7, 8] </ref> to refine the mesh so that the resulting error in the finite element approximation of the governing equations decreases to within the limits imposed by equation (4).
Reference: [9] <author> C.R. Johnson and R.S. MacLeod. </author> <title> Inverse solutions for electric and potential field imaging. In R.L. </title> <editor> Barbour and M.J. Carvlin, editors, </editor> <title> Physiological Imaging, Spectroscopy, and Early Dec-tection Diagnostic Methods, </title> <booktitle> volume 1887, </booktitle> <pages> pages 130-139. SPIE, </pages> <year> 1993. </year>
Reference-contexts: volumetric meshes [2, 3, 4, 5]; (2) three-dimensional, adaptive, finite element programs for solving elliptic partial differential equations with general boundary conditions and source terms [2, 6, 7, 8]; (3) programs that solve the resulting large system of equations and simultaneously apply global and local regularization to ill-posed inverse problems <ref> [2, 9] </ref>; and (4) scientific visualization packages for displaying and interpreting the results [3, 4, 5, 10]. Because our work involves a large problem size, much of the software we have developed has been designed to take advantage of parallel processing via high performance architectures.
Reference: [10] <author> R.S. MacLeod, C.R. Johnson, and M.A. Mathe-son. </author> <title> Visualizing bioelectric fields. </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pages 10-12, </pages> <year> 1993. </year>
Reference-contexts: solving elliptic partial differential equations with general boundary conditions and source terms [2, 6, 7, 8]; (3) programs that solve the resulting large system of equations and simultaneously apply global and local regularization to ill-posed inverse problems [2, 9]; and (4) scientific visualization packages for displaying and interpreting the results <ref> [3, 4, 5, 10] </ref>. Because our work involves a large problem size, much of the software we have developed has been designed to take advantage of parallel processing via high performance architectures. <p> The user is able to visualize and explore intermediate results while the calculations continue to progress. Refined datasets are automatically substituted for the less accurate ones as they are completed. To date we have developed several scientific visualization systems <ref> [3, 4, 5, 10] </ref>. One is an interactive three-dimensional GL based graphics system for viewing surface and volume geometry and simulation results. For higher quality ray-traced rendered images, we have developed a batch-mode graphics system which exploits parallel processors and/or clusters of workstations.
Reference: [11] <author> R. Plonsey and R. C. Barr. </author> <title> Bioelectricity. </title> <publisher> Plenum Press, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: An Application Problem in Cardiology Here we address the application of our computational steering model to two problems in electrocardiography, the forward (or direct) ECG problem and simulation of cardiac defibrillation. Mathematically, these problems are governed by the generalized Laplace's equation for electrical conduction in the physical domain <ref> [11] </ref>: r r = 0 (1) where is an electrical conductivity tensor. <p> Due to the quasi-static nature of the bioelectric field problems we are solving <ref> [11] </ref>, we are primarily interested in spatial steering for this application. Spatial steering involves controlling the discretization level of the geometry, typically in terms of the accuracy of the finite element model.
Reference: [12] <author> B. Lerman and O. Deale. </author> <title> Relation between tran-scardiac and transthoracic current during defibril-lation in humans. </title> <journal> Circulation Research, </journal> <volume> 67 </volume> <pages> 1420-1426, </pages> <year> 1990. </year>
Reference-contexts: For the defibrillation problem, electrodes are either implanted internally or applied directly to the chest in order to deliver sufficient electric energy to stop the irregular heart rhythms that signify a fibrillating heart <ref> [12, 13] </ref>. Mathematically, this can be posed as solving equations (1-3) with the voltage boundary condition applied on a portion of the torso boundary, 2 for external defibrillation or from the surface of the defib-rillation electrode (s) within the volume of the thorax for internal defibrillation.
Reference: [13] <author> M. Mirowski. </author> <title> The automatic implantable cardioverter-defibrillation: An overview. </title> <journal> Journal of the American College of Cardiology, </journal> <volume> 6 </volume> <pages> 461-466, </pages> <year> 1985. </year>
Reference-contexts: For the defibrillation problem, electrodes are either implanted internally or applied directly to the chest in order to deliver sufficient electric energy to stop the irregular heart rhythms that signify a fibrillating heart <ref> [12, 13] </ref>. Mathematically, this can be posed as solving equations (1-3) with the voltage boundary condition applied on a portion of the torso boundary, 2 for external defibrillation or from the surface of the defib-rillation electrode (s) within the volume of the thorax for internal defibrillation.
Reference: [14] <author> H.W. Shen. </author> <title> Semi-automatic image segmentation: A bimodel thresholding approach. </title> <type> Technical report, </type> <institution> UUCS-94-019, Dept. of CS, Univ. of Utah, </institution> <year> 1994. </year>
Reference-contexts: To solve the bioelectric field problems associated with equations (1-3), we have constructed torso models from MRI (magnetic resonance imaging) scans. A semi-automatic segmentation algorithm is used to classify the relevant tissues <ref> [14] </ref>. We then utilize two-and three-dimensional Delaunay triangulation algorithms to construct three-dimensional surfaces and/or volumetric meshes [8, 15, 16]. Geometric postprocess-ing consists of assigning each tetrahedron an electrical conductivity tensor.
Reference: [15] <author> D.F. Watson. </author> <title> Computing the n-dimensional De-launay tesselation with applications to Voronoi polytopes. </title> <journal> Computer Journal, </journal> <volume> 24(2) </volume> <pages> 167-172, </pages> <year> 1981. </year>
Reference-contexts: To solve the bioelectric field problems associated with equations (1-3), we have constructed torso models from MRI (magnetic resonance imaging) scans. A semi-automatic segmentation algorithm is used to classify the relevant tissues [14]. We then utilize two-and three-dimensional Delaunay triangulation algorithms to construct three-dimensional surfaces and/or volumetric meshes <ref> [8, 15, 16] </ref>. Geometric postprocess-ing consists of assigning each tetrahedron an electrical conductivity tensor. The range of conductivity represented in the model is approximately 50 to 1 with blood the most conductive and bone the least.
Reference: [16] <author> N. Weatherill and O. Hassan. </author> <title> Efficient three-dimensional grid generation using the Delaunay triangulation. </title> <booktitle> In Proc. of the 1st European CFD Conf., </booktitle> <volume> volume 1, </volume> <year> 1992. </year>
Reference-contexts: To solve the bioelectric field problems associated with equations (1-3), we have constructed torso models from MRI (magnetic resonance imaging) scans. A semi-automatic segmentation algorithm is used to classify the relevant tissues [14]. We then utilize two-and three-dimensional Delaunay triangulation algorithms to construct three-dimensional surfaces and/or volumetric meshes <ref> [8, 15, 16] </ref>. Geometric postprocess-ing consists of assigning each tetrahedron an electrical conductivity tensor. The range of conductivity represented in the model is approximately 50 to 1 with blood the most conductive and bone the least.
Reference: [17] <author> F. Yu and C. Johnson. </author> <title> An automatic adaptive refinement and derefinement method. </title> <booktitle> In Proceedings of the 14th IMACS World Congress, </booktitle> <pages> pages 1555-1557, </pages> <year> 1994. </year>
Reference-contexts: Spatial steering involves controlling the discretization level of the geometry, typically in terms of the accuracy of the finite element model. We have implemented an adaptive method to automatically refine and de-refine a finite element mesh based upon a posteriori error estimates of the finite element approximation <ref> [17] </ref>.
Reference: [18] <author> P.G. Ciarlet and J.L Lions. </author> <title> Handbook of Numerical Analysis: Finite Element Methods, volume 1. </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1991. </year>
Reference-contexts: Briefly, suppose we want the accuracy of the finite element approximation to be within a given tolerance, ffi of the true solution, k h k ffi: (4) We can use an error estimator <ref> [18, 7, 8] </ref> to refine the mesh so that the resulting error in the finite element approximation of the governing equations decreases to within the limits imposed by equation (4).
Reference: [19] <author> H.W. Shen and C.R. Johnson. </author> <title> Differential volume rendering: A fast volume visualization technique for flow animation. </title> <note> In IEEE Visualization `94, 1994 (to appear). </note>
Reference-contexts: For higher quality ray-traced rendered images, we have developed a batch-mode graphics system which exploits parallel processors and/or clusters of workstations. Recently, we have developed a differential volume rendering module which allows nearly real-time rendering of three-dimensional flows for models with hundreds of thousands of elements <ref> [19] </ref>. For our computational steering model, we have combined many of the components of these visualization systems with our computational and geometrical design systems to produce an integrated method for interactively designing and exploring computational science and engineering models.
Reference: [20] <author> C. Upson and et al. </author> <title> The application visualization system: A computational environment for scientific visualization. </title> <journal> IEEE Computer Graphics & Applications, </journal> <volume> 9(4) </volume> <pages> 30-42, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: In the computational steering framework, the scientist sets input parameters and starts the simulation. The researcher is then able to interact with the model by changing spatial and/or temporal requirements as the solution algorithm progresses. Software systems such as AVS from Application Visualization Systems Inc. <ref> [20] </ref>, Iris Explorer from Silicon Graphics, and Visualization Data Explorer from IBM [21] have made this archetype popular for scientific visualization [22]. Our work has extended this paradigm into the realm of scientific computation.
Reference: [21] <author> B. Lucas and et al. </author> <title> An architecture for a scientific visualization system. </title> <booktitle> In Proceedings of Visualization '92, </booktitle> <pages> pages 107-114. </pages> <publisher> IEEE Press, </publisher> <year> 1992. </year>
Reference-contexts: The researcher is then able to interact with the model by changing spatial and/or temporal requirements as the solution algorithm progresses. Software systems such as AVS from Application Visualization Systems Inc. [20], Iris Explorer from Silicon Graphics, and Visualization Data Explorer from IBM <ref> [21] </ref> have made this archetype popular for scientific visualization [22]. Our work has extended this paradigm into the realm of scientific computation. As a simple example, consider a group of visualization modules within our dataflow network, illustrated in Figure 1.
Reference: [22] <author> C. Willams, J. Rasure, and C. Hansen. </author> <title> The state of the art of visual languages for visualization. </title> <booktitle> In Proceedings of Visualization '92, </booktitle> <pages> pages 202-209. </pages> <publisher> IEEE Press, </publisher> <year> 1992. </year>
Reference-contexts: Software systems such as AVS from Application Visualization Systems Inc. [20], Iris Explorer from Silicon Graphics, and Visualization Data Explorer from IBM [21] have made this archetype popular for scientific visualization <ref> [22] </ref>. Our work has extended this paradigm into the realm of scientific computation. As a simple example, consider a group of visualization modules within our dataflow network, illustrated in Figure 1. The boxes represent computational algorithms (modules) and the lines represent data pipes between the modules.
Reference: [23] <author> D. Conner and et al. </author> <title> Three-dimensional widgets. </title> <booktitle> Computer Graphics (Proceedings of the 1992 Symposium on Interactive 3D Graphics), </booktitle> <pages> pages 183-188, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: While engineers are excited by this opportunity, it presents a very complex human-computer interaction problem, due to the difficulty of 3D interaction. While we have not entirely solved these problems, we have addressed them by employing 3D widgets <ref> [23, 24] </ref> and alternative input devices to assist in the interaction tasks. Steering a Defibrillator Design Problem A network (dataflow program) that can be used to implement a computational steering application for cardiac defibrillation is shown in Figure 3.
Reference: [24] <author> R. Zeleznik and et al. </author> <title> An interactive 3d toolkit for constructing 3d widgets. </title> <booktitle> Computer Graphics (Proceedings of SIGGRAPH '93), </booktitle> <pages> pages 81-84, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: While engineers are excited by this opportunity, it presents a very complex human-computer interaction problem, due to the difficulty of 3D interaction. While we have not entirely solved these problems, we have addressed them by employing 3D widgets <ref> [23, 24] </ref> and alternative input devices to assist in the interaction tasks. Steering a Defibrillator Design Problem A network (dataflow program) that can be used to implement a computational steering application for cardiac defibrillation is shown in Figure 3.
Reference: [25] <author> K. Herndon and T. Meyer. </author> <title> 3d widgets for exploratory scientific visualization. </title> <note> In Proceedings of UIST '94, 1994 (to appear). </note>
Reference-contexts: The 3D widget for the single streamline consists of a small sphere which specifies the seed point for the streamline. The widget for the row of streamlines takes the form of a rake <ref> [25] </ref>. Dragging on the cylindrical shaft controls the position of the rake, while dragging on the spherical endpoints controls the orientation and the length of the rake.
Reference: [26] <editor> B. Ribarsky and et al. </editor> <booktitle> Object-oriented, dataflow visualization systems|A paradigm shift? In Proceedings of Visualization '92, </booktitle> <pages> pages 384-388. </pages> <publisher> IEEE Press, </publisher> <year> 1992. </year>
Reference-contexts: Steering Optimizations In order to accommodate the large datasets required by high resolution computational models, we have optimized and streamlined the dataflow implementation. These optimizations are made necessary by the limitations many scientists have experienced with currently available dataflow visualization systems <ref> [26] </ref>. Data structure management: A naive implementation of the dataflow paradigm might use the pipe structure to make copies of the data. Consider the example in Figure 1. If the vector field is copied to both the Streamline and StreamSurface modules, then twice as much memory is consumed as necessary.
Reference: [27] <author> B. Stroustrup. </author> <title> The C++ Programming Language. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, </address> <year> 1991. </year>
Reference-contexts: If the vector field is copied to both the Streamline and StreamSurface modules, then twice as much memory is consumed as necessary. In addition, a significant amount of CPU time is required to copy large data structures. In order to avoid these overheads, we employ smart pointers <ref> [27] </ref> in C++, which help reduce complexity by allowing different modules to share common data structures. When the VectorFieldReader modules create the Vec-torField, it sets a reference count in the vector field to zero.
References-found: 27

