URL: http://www.cs.purdue.edu/homes/jing/lock.ps
Refering-URL: http://www.cs.purdue.edu/homes/jing/mobile.html
Root-URL: http://www.cs.purdue.edu
Email: fjing,bukhres,akeg@cs.purdue.edu  
Title: Distributed Lock Management for Mobile Transactions  
Author: Jin Jing Omran Bukhres Ahmed Elmagarmid 
Address: West Lafayette, IN 47907  
Affiliation: Department of Computer Sciences Purdue University  
Abstract: In this paper, we present a new lock management scheme which allows a read unlock for an item to be executed at any copy site of that item; the site may be different from the copy site on which the read lock is set. The scheme utilizes the replicated copies of data items to reduce the message costs incurred by the mobility of the transaction host. We demonstrate this idea in an optimistic locking algorithm called O2PL-MT (Optimistic Two Phase Locking for Mobile Transactions). Like its counterpart algorithm O2PL (Optimistic Two Phase Locking), O2PL-MT grants read locks immediately on demand and defers write locks until the commitment time. However, O2PL-MT requires the transmission of fewer messages than O2PL in a mobile environment in which data items are replicated. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Alonso and H. Korth. </author> <booktitle> Database issues in nomadic computing. In Proceedings of the ACM SIGMOD Conference on Management of Data, </booktitle> <pages> pages 388-392, </pages> <year> 1993. </year>
Reference-contexts: A mobile host can move within a cell or between two cells while retaining its network connections. The mobile computing paradigm introduces new technical issues in the area of database systems <ref> [5, 1] </ref>. For example, techniques for traditional distributed database management have been based on the assumption that the location of and connections among hosts in the distributed system do not change. However, in mobile computing, these assumptions are no longer valid. <p> In a longer network path, communication traverses more intermediaries and consumes more network capacity. This mobility of hosts means that even a short transaction may involve a long communication transmission. Some of the problems involved in supporting transaction services in a mobile environment have been identified recently in <ref> [5, 1, 9] </ref>. A prototype of transaction service for mobile hosts is currently being implemented on the Code file system [7, 9]. This prototype uses the optimistic concurrency control method in [8] to enforce the serializable execution of transactions submitted from mobile hosts.
Reference: [2] <author> B. R. Badrinath, A. Acharya, and T. Imielin-ski. </author> <title> Structuring distributed algorithms for mobile hosts. </title> <booktitle> In Proc. of the 14th International Conference on Distributed Computing Systems, </booktitle> <address> Poznan, Poland, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Following the concepts and terms introduced in <ref> [5, 3, 2] </ref>, a mobile computing environment consists of two distinct sets of entities: mobile hosts and fixed hosts. <p> Section 4 presents an analytical model of message and a comparison of the O2PL-MT and O2PL algorithms. Concluding remarks and directions for future work are offered in Section 5. 2 The Mobile Transaction Model model similar to those described in <ref> [5, 3, 2] </ref> for mobile computing systems. In this model, both a database server and a database are attached to each fixed host. A database server is to support basic transaction operations such as read, write, prepare, commit, and abort. <p> In this paper, we assume that a mobile host can move away from its current cell only after it has received results for all operations submitted from that cell. In practice, however, a mobile host may move at any time <ref> [2] </ref>. It may move away from its current cell after it submitted an operation and before receiving a reply from the coordinator. In this case, additional procedures are needed to locate the mobile host and convey to it the results of submitted operations. <p> To abort a mobile transaction, extra communication costs are entailed in searching for any remote servers that have the locks set for the transaction. Possible solutions to this issue may use the search strategy or the always-inform strategy presented in <ref> [2] </ref> to locate the current transaction coordinator (or the transaction proxy) and obtain the required location information. We plan to address this issue and compare various possible alternative strategies for this problem in a future paper.
Reference: [3] <author> D. Barbara and T. Imielinksi. Sleepers and workaholics: </author> <title> Caching strategies for mobile environments. </title> <booktitle> In Proceedings of the ACM SIGMOD Conference on Management of Data, </booktitle> <pages> pages 1-12, </pages> <year> 1994. </year>
Reference-contexts: 1 Introduction Following the concepts and terms introduced in <ref> [5, 3, 2] </ref>, a mobile computing environment consists of two distinct sets of entities: mobile hosts and fixed hosts. <p> Section 4 presents an analytical model of message and a comparison of the O2PL-MT and O2PL algorithms. Concluding remarks and directions for future work are offered in Section 5. 2 The Mobile Transaction Model model similar to those described in <ref> [5, 3, 2] </ref> for mobile computing systems. In this model, both a database server and a database are attached to each fixed host. A database server is to support basic transaction operations such as read, write, prepare, commit, and abort.
Reference: [4] <author> M. J. Carey and M. Livny. </author> <title> Conflict detection tradeoffs for replicated data. </title> <journal> ACM Trans. Database Syst., </journal> <volume> 16(4) </volume> <pages> 703-746, </pages> <month> Dec. </month> <year> 1991. </year>
Reference-contexts: We demonstrate this idea in an optimistic locking algorithm called O2PL-MT (Optimistic Two Phase Locking for Mobile Transactions). Like its counterpart algorithm O2PL (Optimistic Two Phase Locking), which was presented in <ref> [4] </ref> for a conventional distributed database system, O2PL-MT grants read locks immediately on demand and defers write locks until commitment time. However, in a mobile environment where data items are replicated, O2PL-MT requires fewer messages than O2PL. <p> A mobile transaction consists of a set of read and write operations which are encapsulated by a BEGIN T RAN SACT ION statement and an EN D T RAN SACT ION statement. 3 An O2PL-MT Algorithm For Mobile Transactions 3.1 Motivation The O2PL algorithm, which was presented in <ref> [4] </ref>, uses an "optimistic" read-one write-all concurrency control approach. A read lock must be obtained immediately from the local or nearest copy site for each read operation; write locks for replicated copies are deferred until the beginning of the commit phase is reached. <p> The basic idea underlying O2PL is to set locks immediately within a site (it is possible if data items are replicated), where doing so is cheap, while taking a more optimistic, less message-intensive approach across site boundaries <ref> [4] </ref>. In a mobile computing environment, however, the mobility of transaction hosts may increase message costs for the lock management approach used in the O2PL algorithm.
Reference: [5] <author> T. Imielinski and B. R. Badrinath. </author> <title> Wireless mobile computing : Challenges in data management. </title> <journal> Communication of ACM, </journal> <volume> 37(10), </volume> <year> 1994. </year>
Reference-contexts: 1 Introduction Following the concepts and terms introduced in <ref> [5, 3, 2] </ref>, a mobile computing environment consists of two distinct sets of entities: mobile hosts and fixed hosts. <p> A mobile host can move within a cell or between two cells while retaining its network connections. The mobile computing paradigm introduces new technical issues in the area of database systems <ref> [5, 1] </ref>. For example, techniques for traditional distributed database management have been based on the assumption that the location of and connections among hosts in the distributed system do not change. However, in mobile computing, these assumptions are no longer valid. <p> In a longer network path, communication traverses more intermediaries and consumes more network capacity. This mobility of hosts means that even a short transaction may involve a long communication transmission. Some of the problems involved in supporting transaction services in a mobile environment have been identified recently in <ref> [5, 1, 9] </ref>. A prototype of transaction service for mobile hosts is currently being implemented on the Code file system [7, 9]. This prototype uses the optimistic concurrency control method in [8] to enforce the serializable execution of transactions submitted from mobile hosts. <p> Section 4 presents an analytical model of message and a comparison of the O2PL-MT and O2PL algorithms. Concluding remarks and directions for future work are offered in Section 5. 2 The Mobile Transaction Model model similar to those described in <ref> [5, 3, 2] </ref> for mobile computing systems. In this model, both a database server and a database are attached to each fixed host. A database server is to support basic transaction operations such as read, write, prepare, commit, and abort.
Reference: [6] <author> J. Jing, O. Bukhres, and A. Elmagarmid. </author> <title> Distributed lock management for mobile transactions. </title> <type> Technical Report CSD-TR-94-073, </type> <institution> Department of Computer Science, Purdue University, </institution> <year> 1994. </year>
Reference-contexts: Thus, there is no blocking drawback to having a pending read lock on the copy of an item until the copy is updated. A detailed description for the O2PL-MT algorithm is available in <ref> [6] </ref>. 4 Comparison of O2PL-MT and O2PL 4.1 An Analytical Model In this section, we shall develop an analytical model to represent message costs over fixed networks for both the O2PL and O2PL-MT algorithms.
Reference: [7] <author> J. Kistler and M. Satyanaranyanan. </author> <title> Disconnected Operation in the Coda File System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(1), </volume> <month> February </month> <year> 1992. </year>
Reference-contexts: Some of the problems involved in supporting transaction services in a mobile environment have been identified recently in [5, 1, 9]. A prototype of transaction service for mobile hosts is currently being implemented on the Code file system <ref> [7, 9] </ref>. This prototype uses the optimistic concurrency control method in [8] to enforce the serializable execution of transactions submitted from mobile hosts. The optimistic concurrency control method is generally suitable for applications of low data contention.
Reference: [8] <author> H. Kung and J. Robinson. </author> <title> On optimistic methods for concurrency control. </title> <journal> ACM Trans. Database Syst., </journal> <volume> 6(2) </volume> <pages> 213-226, </pages> <month> June </month> <year> 1981. </year>
Reference-contexts: Some of the problems involved in supporting transaction services in a mobile environment have been identified recently in [5, 1, 9]. A prototype of transaction service for mobile hosts is currently being implemented on the Code file system [7, 9]. This prototype uses the optimistic concurrency control method in <ref> [8] </ref> to enforce the serializable execution of transactions submitted from mobile hosts. The optimistic concurrency control method is generally suitable for applications of low data contention. The method presented in this paper assumes that read locks are executed immediately when read operations are performed in data servers.
Reference: [9] <author> Q. Lu and M. Satyanaranyanan. </author> <title> Isolation-only transactions for mobile computing. </title> <journal> ACM Operating Systems Review, </journal> <volume> 28(3), </volume> <year> 1994. </year>
Reference-contexts: In a longer network path, communication traverses more intermediaries and consumes more network capacity. This mobility of hosts means that even a short transaction may involve a long communication transmission. Some of the problems involved in supporting transaction services in a mobile environment have been identified recently in <ref> [5, 1, 9] </ref>. A prototype of transaction service for mobile hosts is currently being implemented on the Code file system [7, 9]. This prototype uses the optimistic concurrency control method in [8] to enforce the serializable execution of transactions submitted from mobile hosts. <p> Some of the problems involved in supporting transaction services in a mobile environment have been identified recently in [5, 1, 9]. A prototype of transaction service for mobile hosts is currently being implemented on the Code file system <ref> [7, 9] </ref>. This prototype uses the optimistic concurrency control method in [8] to enforce the serializable execution of transactions submitted from mobile hosts. The optimistic concurrency control method is generally suitable for applications of low data contention.
Reference: [10] <author> L. Yeo and A. Zaslavsky. </author> <title> Submission of transactions from mobile workstations in a cooperative multidatabase processing environment. </title> <booktitle> In Proc. of the 14th International Conference on Distributed Computing Systems, </booktitle> <address> Poznan, Poland, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: For example, a mobile host may move into a new cell after it obtains the results of previously submitted operations. In the new cell, it will submit the remainder of the transaction operations to the coordinator in the appropriate new MSS. The first approach is described in <ref> [10] </ref> and related issues regarding the interface between the mobile host and the coordinator are discussed. Our proposed model employs the second approach to transaction submissions. This approach supports the interactive execution of transactions and therefore offers increased flexibility in transaction computations.
References-found: 10

