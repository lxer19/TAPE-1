URL: http://www-eksl.cs.umass.edu/papers/ida95-prc.ps
Refering-URL: http://eksl-www.cs.umass.edu/publications.html
Root-URL: 
Email: cohen@cs.umass.edu, oates@cs.umass.edu  
Title: Finding Structure in Streams  
Author: Paul R. Cohen and Tim Oates 
Keyword: dependency detection, time series, fluents  
Address: Box 34610 Amherst MA 01003-4610  
Affiliation: Experimental Knowledge Systems Laboratory Department of Computer Science, LGRC University of Massachusetts  
Abstract: Finding structure in streams (series of categorical data) is an important task. Consider a patient in an intensive care unit, where monitors record different aspects of the patient's condition. There is clearly utility in determining how current values of those monitors are indicative and predictive of various features of the patient's health. We present four algorithms for finding different types of structure in one or more streams. The first algorithm finds predictive relationships among the tokens in a single stream. The next two algorithms find predictive relationships between the values in multiple streams over a fixed time interval; one is a batch algorithm and the other is incremental. Finally, we present a representation for ongoing processes in streams, called fluents, and an algorithm for finding fluents and associations among them in multiple streams. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Cohen, P.R., Atkin, M., Oates, T. and D. Gregory. </author> <title> (1995) A representation and learning mechanisms for mental states. </title> <booktitle> In Working Notes of the AAAI Spring Symposium on Representing Mental States and Mechanisms. </booktitle> <pages> pp. 15 - 21. </pages>
Reference-contexts: Finding Structure in a Single Stream The first algorithm was developed by Adele Howe and Paul Cohen for finding dependencies in a single stream <ref> (Howe and Cohen, 1995) </ref>. Consider the Wave stream, above. It contains two tokens, W and O, which apparently are not distributed uniformly. A simple G test on a contingency table tells us that W follows itself more often than we'd expect by chance under the uniform distribution hypothesis. <p> Although this technique is very simple, Howe used it to find dependencies between different events in the execution traces of complex computer programs, facilitating debugging <ref> (Howe and Cohen, 1995) </ref>. 2 Finding Structure in Multiple Streams We can also find dependencies between multitokens rather than just between token values in a single stream. <p> To limit the size of the precursor tree, we employ a pruning method that dynamically excises old rules that have not proven to be accurate. Preliminary experiments with artificial data sets are encouraging <ref> (Schmill and Cohen, 1995) </ref>. Representing, Finding and Associating Ongoing Processes Multitokens are a poor representation of ongoing processes; they are snapshots of the state of streams. In most real world environments, states persist for some amount of time before changing. <p> We have tested fluent learning in a simulated world in which a baby interacts with objects in its environment <ref> (Cohen et al., 1995) </ref>. One of the goals of that project is to develop general algorithms that will allow an embedded agent to learn about the structure of its environment. Conclusion Single-stream dependency detection has helped us discover bugs in complex programs by examining their execution traces.
Reference: <author> Howe, A.E. </author> <title> (1995) Finding Dependencies in Event Streams Using Local Search. </title> <booktitle> In Preliminary Papers of the Fifth International Workshop on AI and Statistics. </booktitle> <pages> pp. 271 - 277. </pages>
Reference-contexts: Finding Structure in a Single Stream The first algorithm was developed by Adele Howe and Paul Cohen for finding dependencies in a single stream <ref> (Howe and Cohen, 1995) </ref>. Consider the Wave stream, above. It contains two tokens, W and O, which apparently are not distributed uniformly. A simple G test on a contingency table tells us that W follows itself more often than we'd expect by chance under the uniform distribution hypothesis. <p> It would be easy to introduce a lag into the analysis to find dependencies between one token and another after, say, five time steps, and Howe has designed an adaptive algorithm to find the most predictive lag for dependencies <ref> (Howe, 1995) </ref>. Note also that the average length of a "run" of W's is just the first row margin (13) divided by the cell 2 count, that is, 13/2 = 7.5. <p> Although this technique is very simple, Howe used it to find dependencies between different events in the execution traces of complex computer programs, facilitating debugging <ref> (Howe and Cohen, 1995) </ref>. 2 Finding Structure in Multiple Streams We can also find dependencies between multitokens rather than just between token values in a single stream.
Reference: <author> Howe, A.E. and P.R. Cohen. </author> <title> (1995) Understanding Planner Behavior. </title> <note> To appear in AI Journal. </note>
Reference-contexts: Finding Structure in a Single Stream The first algorithm was developed by Adele Howe and Paul Cohen for finding dependencies in a single stream <ref> (Howe and Cohen, 1995) </ref>. Consider the Wave stream, above. It contains two tokens, W and O, which apparently are not distributed uniformly. A simple G test on a contingency table tells us that W follows itself more often than we'd expect by chance under the uniform distribution hypothesis. <p> It would be easy to introduce a lag into the analysis to find dependencies between one token and another after, say, five time steps, and Howe has designed an adaptive algorithm to find the most predictive lag for dependencies <ref> (Howe, 1995) </ref>. Note also that the average length of a "run" of W's is just the first row margin (13) divided by the cell 2 count, that is, 13/2 = 7.5. <p> Although this technique is very simple, Howe used it to find dependencies between different events in the execution traces of complex computer programs, facilitating debugging <ref> (Howe and Cohen, 1995) </ref>. 2 Finding Structure in Multiple Streams We can also find dependencies between multitokens rather than just between token values in a single stream.
Reference: <author> Oates, T., Gregory, D. and P.R. Cohen. </author> <title> (1995) Detecting Complex Dependencies in Categorical Data. </title> <booktitle> In Preliminary Papers of the Fifth International Workshop on AI and Statistics. </booktitle> <pages> pp. 417 - 423. </pages>
Reference-contexts: We have implemented two algorithms to find generalization hierarchies of such rules. The multi-stream dependency detection (MSDD) algorithm <ref> (Oates et al., 1995) </ref> starts with the most general possible rule (for the current example, &lt; fl fl fl &gt;)&lt; fl fl fl &gt;) and specializes it. The space of specializations is exponential, so MSDD uses a best-first search heuristic based on contingency tables for multitoken dependencies. <p> Classification typically involves finding a set of attribute values that accurately predict a single attribute value, whereas MSDD can find multiple attribute values that in turn accurately predict multiple attribute values. MSDD is surprisingly efficient and very accurate in comparison with other algorithms <ref> (Oates et al., 1995) </ref>. &lt; W fl fl &gt; &lt; W fl fl &gt; Totals &lt; fl fl R &gt; 10 2 12 Totals 12 9 21 Incremental Multi-Stream Dependency Detection MSDD is a batch algorithm, which means it needs to see all the streams before it starts work.
Reference: <author> Schmill, Matthew D. and P.R. Cohen. </author> <title> (1995) Learning Predictive Generalizations for Multiple Streams: An Incremental Algorithm. </title> <institution> Department of Computer Science Technical Report 95-36, University of Massachusetts, Amherst. </institution> <month> 5 </month>
Reference-contexts: To limit the size of the precursor tree, we employ a pruning method that dynamically excises old rules that have not proven to be accurate. Preliminary experiments with artificial data sets are encouraging <ref> (Schmill and Cohen, 1995) </ref>. Representing, Finding and Associating Ongoing Processes Multitokens are a poor representation of ongoing processes; they are snapshots of the state of streams. In most real world environments, states persist for some amount of time before changing.
References-found: 5

