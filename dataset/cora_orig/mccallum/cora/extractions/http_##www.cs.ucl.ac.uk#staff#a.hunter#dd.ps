URL: http://www.cs.ucl.ac.uk/staff/a.hunter/dd.ps
Refering-URL: http://www.cs.ucl.ac.uk/staff/A.Hunter/papers.html
Root-URL: http://www.cs.ucl.ac.uk
Email: Email: a.hunter@cs.ucl.ac.uk  Email: pjm@dcs.kcl.ac.uk  
Phone: Tel: +44 171 380 7295  Tel: +44 171 873 2469  
Title: Default Databases: Extending the Approach of Deductive Databases Using Default Logic  
Author: Anthony Hunter Peter M c .Brien 
Date: August 1997  
Note: Friday 15 th  
Address: Gower Street London WC1E 6BT  King's College London Strand London WC2R 2LS  
Affiliation: Dept. of Computer Science University College London  Dept. of Computer Science  
Abstract: Extending the relational data model using classical logic to give deductive databases has some significant benefits. In particular, classical logic rules offer an efficient representation: a universally quantified rule can represent many facts. However, classical logic does not support the representation of general rules, or synonymously defaults. General rules are rules that are usually valid, but occasionally have exceptions. They are useful in a database since they can allow for the derivation of relations on the basis of incomplete information. The need for incorporating general rules into a database is reinforced when considering that participants in the development process may naturally describe rules for a deductive database in the form of general rules. In order to meet this need for using general rules in databases, we extend the notion of deductive databases. In particular, we use default logic, an extension of classical logic that has been developed for representing and reasoning with default knowledge, to formalise the use of general rules in deductive databases, to give what we call default databases. In this paper, we provide an overview of default logic, motivate its applicability to capturing general rules in databases, and then develop a framework for default databases. In particular, we propose a methodology for developing default databases that is based on entity-relationship modelling. 
Abstract-found: 1
Intro-found: 1
Reference: [AS93] <author> C. Ashworth and L. Slater. </author> <title> An Introduction to SSADM version 4. </title> <booktitle> International series in software engineering. </booktitle> <publisher> McGraw-Hill, </publisher> <year> 1993. </year>
Reference-contexts: form of (1) tools to facilitate the modelling of the domain and capture of default rules applicable to the domain, and (2) methodological support for how the tools should be used. 4.1 Default Logic & Conceptual Modelling Conceptual modelling of information systems, as exemplified by structural analysis [GS78] and SSADM <ref> [AS93] </ref>, make a distinction between the modelling of the static and dynamic aspects of information systems, where: * The static aspects cover those things in the universe of discourse (UoD) which have the implied notion of duration, such as people, departments, goods, etc.
Reference: [Bes89] <author> P. Besnard. </author> <title> An Introduction to Default Logic. </title> <publisher> Springer, </publisher> <year> 1989. </year>
Reference-contexts: Default logic is one of the best known and most widely studied formalisations of default reasoning <ref> [Bes89, Bre91, MT93, GHR94] </ref>. Furthermore, it offers a very expressive and lucid language. In default logic, knowledge is represented as a default theory, which consists of a set of first-order formulae and a set of default rules for representing default information.
Reference: [BL84] <author> C. Batini and M. Lenzerini. </author> <title> A methodology for data schema integration in the entity relationship model. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 10(6) </volume> <pages> 650-664, </pages> <month> November </month> <year> 1984. </year>
Reference-contexts: The modelling language is basically the enriched ER of <ref> [BL84] </ref>, an extension of the original notation of Chen [Che76]. The most important of the extensions is the introduction of concepts of subset (allowing is-a associations between entity sets) and generalisations (which produce the union entity set of entity sets). <p> For the purposes of simplifying the presentation of the relationship to default logic, we will also assume that all relationships are binary, though this assumption is not essential to our work. The additions we make to the notation of <ref> [BL84] </ref> are shown in Table 2, and which are used describe when objects are implemented as EDB, IDB or DDB. As in [LMS + 91], we use dashed lines to indicate any object which is implemented as IDB rather than EDB.
Reference: [BQQ83] <author> P Besnard, R Quiniou, </author> <title> and P Quinton. A theorem-prover for a decidable subset of default logic. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <pages> pages 27-30, </pages> <year> 1983. </year>
Reference: [Bre91] <author> G Brewka. </author> <title> Common-sense Reasoning. </title> <publisher> Cambridge University Press, </publisher> <year> 1991. </year>
Reference-contexts: Default logic is one of the best known and most widely studied formalisations of default reasoning <ref> [Bes89, Bre91, MT93, GHR94] </ref>. Furthermore, it offers a very expressive and lucid language. In default logic, knowledge is represented as a default theory, which consists of a set of first-order formulae and a set of default rules for representing default information.
Reference: [BS94] <author> S Bruning and T Schaub. </author> <title> Using classical theorem-proving techniques for approximate reasoning. </title> <editor> In B Bouchon-Meunier and R Yager, editors, </editor> <booktitle> Proceedings of the Fifth International Conference on Information Processing and Management of Uncertainty in Knowledge-based Systems, </booktitle> <pages> pages 493-498. IPMU, </pages> <year> 1994. </year>
Reference-contexts: For certain classes of default databases, where the interaction of default rules is limited, there exist techniques to solve the conflict resolution task in polynomial time [NR92]. In addition, there are some positive results on pruning the search space [Nie94, Sch95], and on seeking fast approximate answers to queries <ref> [BS94] </ref>. 3 Default Databases The distinction between intensional and extensional data in database systems is well understood [Ull88], and the usefulness of being able to define data intensionally widely appreciated, as witnessed by the use of views in commercial DBMS.
Reference: [CEG94] <author> M Cadoli, T Eiter, and G Gottlob. </author> <title> Default logic as a query language. </title> <editor> In J Doyle, E Sandewall, and P Torasso, editors, </editor> <booktitle> Proceedings of the Fourth International Conference Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 473-484. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1994. </year>
Reference-contexts: Previously, Cadoli et al. have proposed default logic as a query language for finite relational databases <ref> [CEG94] </ref>. We will adopt the same language, which they call default query language (DQL), for our default databases. In this paper, we provide an overview of default logic, motivate its applicability to capturing general rules in databases, for generating default facts, and then develop a framework for default databases. <p> Each default rule is a scheme where variables can be grounded only with constants. The set of constants is the set of attribute values used in the EDB. This language is the query language proposed in <ref> [CEG94] </ref>. Now we have defined the components, we can define the notion of a default database. A default database is a default theory (D; W ) where D is a default rules database, and W is the union of an extensional database and an intentional database. <p> In this paper, we have shown how default logic can be used to extend the notion of a deductive database to give what we call a default database. We have used DQL by Cadoli et al. <ref> [CEG94] </ref>, a restriction of default rules to being quantifier-free and function-free, as the language for defaults. DQL is more expressive than DATALOG : (DATALOG with negated literals in the body of the rules).
Reference: [CFP82] <author> M.A. Casanova, R. Fagin, and C.H. Papadimitriou. </author> <title> Inclusion dependencies and their interaction with functional dependencies. </title> <booktitle> In 1st ACM SIGACT-SIGMOD Symposium on Principles of Database Systems, </booktitle> <pages> pages 171-176, </pages> <year> 1982. </year>
Reference-contexts: (SNo,Amount) fire (SNo) theft (SNo) accident (SNo) uninvestigated (SNo) pending (SNo) investigated (SNo) investigated clerk (SNo,Clerk) investigated edate (SNo,EDate) 2 4.3 Dependency Rules for ER Models From the description of an ER model in the table, it may be realised that there are (using the usual database terminology) inclusion dependencies <ref> [CFP82] </ref> or exclusion dependencies [CV83] between objects in ER models | instances of one type of object may only exist if there are corresponding instances in another type of object.
Reference: [Che76] <author> P.P. Chen. </author> <title> The Entity-Relationship model | toward a unified view of data. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 1(1) </volume> <pages> 9-36, </pages> <year> 1976. </year>
Reference-contexts: In practice usually some (mainly syntactic) variant of entity-relationship (ER) modelling <ref> [Che76] </ref> is used. * The dynamic aspects cover those things which relate to the processing and alteration of the static aspects in the UoD, such as people changing departments, of departments buying goods. <p> The modelling language is basically the enriched ER of [BL84], an extension of the original notation of Chen <ref> [Che76] </ref>. The most important of the extensions is the introduction of concepts of subset (allowing is-a associations between entity sets) and generalisations (which produce the union entity set of entity sets).
Reference: [CV83] <author> M.A. Casanova and V.M.P. Vidal. </author> <title> Towards a sound view integration methodology. </title> <booktitle> In 2nd ACM SIGACT-SIGMOD Symposium on Principles of Database Systems, </booktitle> <pages> pages 36-47, </pages> <year> 1983. </year>
Reference-contexts: (SNo) accident (SNo) uninvestigated (SNo) pending (SNo) investigated (SNo) investigated clerk (SNo,Clerk) investigated edate (SNo,EDate) 2 4.3 Dependency Rules for ER Models From the description of an ER model in the table, it may be realised that there are (using the usual database terminology) inclusion dependencies [CFP82] or exclusion dependencies <ref> [CV83] </ref> between objects in ER models | instances of one type of object may only exist if there are corresponding instances in another type of object.
Reference: [deM78] <author> T. deMarco. </author> <title> Structured Analysis and System Specification. </title> <publisher> Yourdon Press, </publisher> <year> 1978. </year>
Reference-contexts: Some variant of data-flow diagrams (DFD) <ref> [GS78, deM78] </ref> is often used for modelling dynamic aspects, but there is less consensus as to the type of model to be used. More recently, object-orientation has achieved considerable attention as a mechanism for modelling both static and dynamic aspects of an information system in an integrated model.
Reference: [EN94] <author> R. Elmasri and S. Navathe. </author> <title> Fundamentals of Database Systems. </title> <publisher> The Ben-jamin/Cummings Publishing Company, Inc., </publisher> <address> 2nd edition, </address> <year> 1994. </year>
Reference-contexts: The decision is subject to a number of rules. Constructing such an ER model may largely be achieved by following textbook design techniques for ER models <ref> [Ull88, EN94] </ref>. However we have introduced the notions of DDB, IDB and DDB objects, which can be initially differentiated during design as follows: * EDB objects are things in the UoD which can be regarded as non-derivative facts.
Reference: [GHR94] <editor> D. Gabbay, C. Hogger, and J. Robinson, editors. </editor> <booktitle> Handbook of Logic in Artificial Intelligence and Logic Programming: Volume 3 | Nonmonotonic Reasoning and Uncertainty Reasoning. </booktitle> <publisher> Oxford University Press, </publisher> <year> 1994. </year> <month> 25 </month>
Reference-contexts: Default logic is one of the best known and most widely studied formalisations of default reasoning <ref> [Bes89, Bre91, MT93, GHR94] </ref>. Furthermore, it offers a very expressive and lucid language. In default logic, knowledge is represented as a default theory, which consists of a set of first-order formulae and a set of default rules for representing default information.
Reference: [GLV97] <author> P Geerts, E Laenens, and D Vermeir. </author> <title> Defeasible logics. In Handbook of Defeasible Reasoning and Uncertainty Management. </title> <publisher> Kluwer, </publisher> <year> 1997. </year>
Reference-contexts: Though we do have other options besides default logic. One is to directly use general rules together with associated ordering. This would necessitate adopting an appropriate proof theory such as that of a defeasible logic (for a review see <ref> [GLV97] </ref>), and insisting that the DAGs created during our design process are fully resolved. Finally, via the running example on car insurance claim processing, we have illustrated how default databases can be useful in information systems.
Reference: [Got92] <author> G Gottlob. </author> <title> Complexity results for non-monotonic logics. </title> <journal> Journal of Logic and Computation, </journal> <pages> pages 397-425, </pages> <year> 1992. </year>
Reference-contexts: These include systems that compute extensions and systems that provide credulous and skeptical query-answering. An inference engine can be viewed as being composed of classical reasoning and conflict resolution. These two activities are orthogonal sources of complexity in default reasoning <ref> [Got92] </ref>. For classical reasoning, automated reasoning techniques exist. Both classical deduction and consistency checking can be used in default reasoning. Conflict resolution is currently an important research area in default reasoning. <p> The initial search space for the conflict resolution task is exponential with respect to the number of default rules and brute force search methods are able to handle only very modest sized sets of default rules. For more general complexity results in default logic see <ref> [Got92] </ref>. For certain classes of default databases, where the interaction of default rules is limited, there exist techniques to solve the conflict resolution task in polynomial time [NR92].
Reference: [GS78] <author> C. Gane and T. Sarson. </author> <title> Structured Systems Analysis: Tools and Techniques. </title> <publisher> Prentice-Hall, </publisher> <year> 1978. </year>
Reference-contexts: provided in the form of (1) tools to facilitate the modelling of the domain and capture of default rules applicable to the domain, and (2) methodological support for how the tools should be used. 4.1 Default Logic & Conceptual Modelling Conceptual modelling of information systems, as exemplified by structural analysis <ref> [GS78] </ref> and SSADM [AS93], make a distinction between the modelling of the static and dynamic aspects of information systems, where: * The static aspects cover those things in the universe of discourse (UoD) which have the implied notion of duration, such as people, departments, goods, etc. <p> Some variant of data-flow diagrams (DFD) <ref> [GS78, deM78] </ref> is often used for modelling dynamic aspects, but there is less consensus as to the type of model to be used. More recently, object-orientation has achieved considerable attention as a mechanism for modelling both static and dynamic aspects of an information system in an integrated model.
Reference: [Hop93] <author> M Hopkins. </author> <title> Default logic: Orderings and extensions. In Symbolic and Qualitative Approaches to Reasoning and Uncertainty, </title> <booktitle> volume 747 of Lecture Notes in Computer Science, </booktitle> <pages> pages 174-179. </pages> <publisher> Springer, </publisher> <year> 1993. </year>
Reference: [Hun96] <author> A Hunter. </author> <title> Uncertainty in Information Systems. </title> <publisher> McGraw-Hill, </publisher> <year> 1996. </year>
Reference-contexts: 1 Introduction Handling uncertain information is becoming an increasingly significant issue in information technology. However, uncertainty in information is not a homogeneous concept. Rather there are clearly diverse types, such as fuzzy, probabilistic, and default information, that require distinct means for handling (see for example <ref> [Hun96] </ref>). Interest in default knowledge started with attempts to handle general rules, or defaults, of the form "if ff holds, then fi normally holds", where ff and fi are propositions.
Reference: [JK90] <author> U. Junker and K. Konolige. </author> <title> Computing the extensions of autoepistemic and default logics with a truth maintenance system. </title> <booktitle> In Proceedings of the Eighth National Conference on Artifical Intelligence (AAAI'90), </booktitle> <pages> pages 278-283. </pages> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference: [LMS + 91] <author> P. Loucopoulos, P.J. McBrien, F. Schumacker, B. Theodoulidis, V. Kopanas, and B. Wangler. </author> <title> Integrating database technology, rule-based systems and temporal reasoning for effective software: the TEMPORA paradigm. </title> <journal> Journal of Information Systems, </journal> <volume> 1(2), </volume> <year> 1991. </year>
Reference-contexts: This division in the modelling allows us to connect the default reasoning supported in the rule modelling with the classical first order view of information in the data and process models, and hence with existing applications. This approach was used in the Tempora <ref> [LMS + 91, TEM93] </ref> CASE tool for connecting deductive and active reasoning in classical logic to standard information system data modelling, and we will following this approach in our handling of default reasoning. <p> The additions we make to the notation of [BL84] are shown in Table 2, and which are used describe when objects are implemented as EDB, IDB or DDB. As in <ref> [LMS + 91] </ref>, we use dashed lines to indicate any object which is implemented as IDB rather than EDB. We introduce the use of shading to indicate any object which is implemented as DDB.
Reference: [LS95] <author> T Linke and T Schaub. </author> <title> Lemma handling in default logic theorem provers. </title> <editor> In C Froide-vaux and J Kohlas, editors, </editor> <title> Symbolic and Qualitative Approaches to Reasoning and Uncertainty, </title> <booktitle> volume 946 of Lecture Notes in Computer Science, </booktitle> <pages> pages 285-292. </pages> <publisher> Springer, </publisher> <year> 1995. </year>
Reference: [MD92] <author> D. McGoveran and C.J. Date. </author> <title> Sybase and SQL Server. </title> <publisher> Addison Wesley, </publisher> <year> 1992. </year>
Reference-contexts: Many commercial DBMS implementations, such as Sybase 10 <ref> [MD92] </ref>, now directly support the specification of inclusion dependencies. This allows us to implement each ER object as a separate relation, and specify the inclusion/exclusion dependency implied by the model directly as a rule. Although this method has a certain elegance, it is also highly inefficient.
Reference: [MT93] <author> W. Marek and M. Truszczynski. </author> <title> Nonmonotonic Logic: Context-Dependent Reasoning. </title> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Default logic is one of the best known and most widely studied formalisations of default reasoning <ref> [Bes89, Bre91, MT93, GHR94] </ref>. Furthermore, it offers a very expressive and lucid language. In default logic, knowledge is represented as a default theory, which consists of a set of first-order formulae and a set of default rules for representing default information.
Reference: [Nie94] <author> I. Niemela. </author> <title> A decision method for nonmonotonic reasoning based on autoepistemic reasoning. </title> <editor> In J Doyle, E Sandewall, and P Torasso, editors, </editor> <booktitle> Proceedings of the Fourth International Conference Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 473-484. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1994. </year>
Reference-contexts: For more general complexity results in default logic see [Got92]. For certain classes of default databases, where the interaction of default rules is limited, there exist techniques to solve the conflict resolution task in polynomial time [NR92]. In addition, there are some positive results on pruning the search space <ref> [Nie94, Sch95] </ref>, and on seeking fast approximate answers to queries [BS94]. 3 Default Databases The distinction between intensional and extensional data in database systems is well understood [Ull88], and the usefulness of being able to define data intensionally widely appreciated, as witnessed by the use of views in commercial DBMS.
Reference: [Nie95a] <author> I Niemela. </author> <title> A decision method for nonmonotonic reasoning based on autoepistemic reasoning. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 14 </volume> <pages> 3-42, </pages> <year> 1995. </year>
Reference: [Nie95b] <author> I Niemela. </author> <title> Towards efficient default reasoning. </title> <booktitle> In Proceedings of the 14th International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 312-318. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1995. </year>
Reference: [NR92] <author> I. Niemela and J. Rintanen. </author> <title> On the impact of stratification on the complexity of non-monotonic reasoning. </title> <editor> In B Nebel and W Swartout, editors, </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proceedings of the Third International Conference, </booktitle> <pages> pages 627-638. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: For more general complexity results in default logic see [Got92]. For certain classes of default databases, where the interaction of default rules is limited, there exist techniques to solve the conflict resolution task in polynomial time <ref> [NR92] </ref>.
Reference: [NS96] <author> I Niemela and P Simons. </author> <title> Efficient implementation of the well-founded and stable model semantics. </title> <editor> In M. Maher, editor, </editor> <booktitle> Proceedings of the Joint International Conference and Symposium on Logic Programming, </booktitle> <pages> pages 289-303. </pages> <publisher> The MIT Press, </publisher> <year> 1996. </year>
Reference: [Rei80] <author> R. Reiter. </author> <title> Default logic. </title> <journal> Artificial Intelligence, </journal> <volume> 13 </volume> <pages> 81-132, </pages> <year> 1980. </year>
Reference-contexts: In order to meet this need for using general rules in databases, we extend the notion of deductive databases. In particular, we use default logic, an extension of classical logic that has been developed for representing and reasoning with default knowledge <ref> [Rei80] </ref>, to formalise the use of general rules in deductive databases, to give what we call default databases. Previously, Cadoli et al. have proposed default logic as a query language for finite relational databases [CEG94]. <p> Finally, we explore some properties of the framework, and in particular, discuss how it builds upon DQL. 2 Overview of Default Logic As a basis of representing default knowledge we employ default logic originally introduced by Reiter <ref> [Rei80] </ref>. Default logic is one of the best known and most widely studied formalisations of default reasoning [Bes89, Bre91, MT93, GHR94]. Furthermore, it offers a very expressive and lucid language.
Reference: [RS94] <author> V. Risch and C. Schwind. </author> <title> Tableau-based characterization and theorem proving for default logic. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 13 </volume> <pages> 223-242, </pages> <year> 1994. </year> <month> 26 </month>
Reference: [SB96] <author> T Schaub and S Bruning. </author> <title> Prolog technology for default reasoning. In W Wahlster, editor, </title> <booktitle> Proceedings of the European Conference on Artificial Intelligence, </booktitle> <pages> pages 105-109. </pages> <publisher> John Wiley, </publisher> <year> 1996. </year>
Reference: [Sch95] <author> T Schaub. </author> <title> A new methodology for query-answering in default logics via structure-oriented theorem proving. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 15 </volume> <pages> 95-165, </pages> <year> 1995. </year>
Reference-contexts: For more general complexity results in default logic see [Got92]. For certain classes of default databases, where the interaction of default rules is limited, there exist techniques to solve the conflict resolution task in polynomial time [NR92]. In addition, there are some positive results on pruning the search space <ref> [Nie94, Sch95] </ref>, and on seeking fast approximate answers to queries [BS94]. 3 Default Databases The distinction between intensional and extensional data in database systems is well understood [Ull88], and the usefulness of being able to define data intensionally widely appreciated, as witnessed by the use of views in commercial DBMS.
Reference: [SN97] <author> T Schaub and P Nicolas. </author> <title> An implementation platform for query-answering in default logics: The XRay System, its implementation and evaluation, </title> <booktitle> volume 1265 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer, </publisher> <year> 1997. </year>
Reference: [TEM93] <author> TEMPORA project members. </author> <title> The TEMPORA project manual. </title> <type> Technical report, </type> <institution> BIM S.A., </institution> <year> 1993. </year>
Reference-contexts: This division in the modelling allows us to connect the default reasoning supported in the rule modelling with the classical first order view of information in the data and process models, and hence with existing applications. This approach was used in the Tempora <ref> [LMS + 91, TEM93] </ref> CASE tool for connecting deductive and active reasoning in classical logic to standard information system data modelling, and we will following this approach in our handling of default reasoning.
Reference: [Ull88] <author> J.D. Ullman. </author> <booktitle> Principles of Database and Knowledge-Base Systems, </booktitle> <volume> volume 1. </volume> <publisher> Computer Science Press, </publisher> <year> 1988. </year> <month> 27 </month>
Reference-contexts: In addition, there are some positive results on pruning the search space [Nie94, Sch95], and on seeking fast approximate answers to queries [BS94]. 3 Default Databases The distinction between intensional and extensional data in database systems is well understood <ref> [Ull88] </ref>, and the usefulness of being able to define data intensionally widely appreciated, as witnessed by the use of views in commercial DBMS. <p> Since default logic is an extension of the classical logic normally used to define data intensionally, we differentiate three types of object, the first two of which come from the same notions in Datalog <ref> [Ull88] </ref>: 5 * extensional database (EDB) objects are stored in the database, and manifest themselves as unit Horn clauses in the data model. * intentional database (IDB) objects are specified solely by Horn clauses with a model-theoretic interpretation. Function symbols may not be used as arguments. <p> Function symbols may not be used as arguments. All rules must be safe (in the Datalog sense <ref> [Ull88] </ref>), meaning that the extent of the rule is always finite for any finite extension of the predicates in the rule body. * default rules database (DDB) objects are specified as default rules, which we will detail below. <p> The decision is subject to a number of rules. Constructing such an ER model may largely be achieved by following textbook design techniques for ER models <ref> [Ull88, EN94] </ref>. However we have introduced the notions of DDB, IDB and DDB objects, which can be initially differentiated during design as follows: * EDB objects are things in the UoD which can be regarded as non-derivative facts. <p> This involves restructuring the canonical representation using lossless joins <ref> [Ull88] </ref> in the following ways: Attribute sets that are associated with entity sets by a (x; 1) cardinality constraint can be stored in the relation which holds the entity, providing they are of the same type (EDB, IDB or DDB). <p> have been used. 12 Arrows lead from rules defining a predicate to rules which use a predicate EDB EDB EDB IDB DDB K 6 K6o extensional layer intensional layer default reasoning layer 4.5 Using ER Modelling for Default Logic Rules We have already stated that we are building upon Datalog <ref> [Ull88] </ref> in the way we use default logic in database systems. In Datalog, an ER object can only be implemented as either an EDB relation in the database, or a set of IDB deductive rules.
References-found: 35

