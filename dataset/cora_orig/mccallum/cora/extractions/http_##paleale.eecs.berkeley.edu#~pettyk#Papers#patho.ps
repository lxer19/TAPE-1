URL: http://paleale.eecs.berkeley.edu/~pettyk/Papers/patho.ps
Refering-URL: http://paleale.eecs.berkeley.edu/~pettyk/pubs.html
Root-URL: http://www.cs.berkeley.edu
Title: The PATHO Operating System and User's Manual Version 1.0  
Author: Karl Petty 
Address: Berkeley, CA 94720  
Affiliation: Department of Electrical Engineering and Computer Sciences University of California, Berkeley  
Pubnum: PATH Project  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> David M. Auslander and Cheng H. Tham. </author> <title> Real-Time Software For Control. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1990. </year>
Reference-contexts: There are many interesting and important problems in real-time computing that can only be addressed properly in the context of a text book. A very good reference is the book written by Dr. Auslander and C.H. Tham on the real-time operating system Clotho <ref> [1] </ref>. This manual is not meant to be a substitute for that type of knowledge. This is just enough real-time operating system theory to allow a person to start programming using PATHO.
Reference: [2] <author> Borland. </author> <title> Borland C++ 3.0 Library Reference Manual. Borland, </title> <address> Scotts Valley, Ca, </address> <year> 1991. </year>
Reference-contexts: There are a couple of different tools for doing debugging in PATHO. The system that is usually used is the Borland C++ Turbo Debugger <ref> [2] </ref>. Everything that will be described here has been tested and used within that environment. Conceptually, everything should work in another debugger as well, it just hasn't been tested yet. In a real-time operating system there are two major software problems.
Reference: [3] <author> Borland. </author> <title> Borland C++ Turbo Debugger 3.0 User's Guide. Borland, </title> <address> Scotts Valley, Ca, </address> <year> 1991. </year> <month> 77 </month>
Reference-contexts: It is not always safe to assume that the last string in memory is the last string written. To explain PATHO debugging in the Borland C++ Debugger <ref> [3] </ref> I will assume that 4.3. DEBUGGING 41 the program has been compiled with no errors and that you have started up the debugger. From this point, to start up data logging involves only a few steps: 1. Open up the file path.c.
References-found: 3

