URL: ftp://ftp.cm.deakin.edu.au/pub/TR/Computing/rhodos/TR-C94-09.ps.gz
Refering-URL: http://gollum.cm.deakin.edu.au/techreports.html
Root-URL: 
Email: gjw-@deakin.edu.au  
Title: Message Passing and RPC-based Interprocess Communication Mechanisms in the RHODOS Microkernel  
Author: A. Goscinski, M. Hobbs, P. Joyce, G. Wickham -ang, mick, philj, 
Note: *This work was partly supported by the Australian Research Council under Grant A48831034, A49232429 and the Deakin University Research Grant 0504010151.  
Address: Geelong Victoria 3217, Australia.  
Affiliation: School of Computing and Mathematics Deakin University,  
Date: September 8, 1994  
Pubnum: RHODOS  
Abstract: RHODOS is a microkernel based distributed operating system that has been designed with message passing as the primary communication mechanism. RHODOS provides efficient interprocess communication system by providing two methods of cross address space communications: internal buffering and virtual memory mapping. Both methods were implemented to reduce operating system overheads in communications. Integral to the success of the interprocess communications facility within RHODOS are the microkernel data structures: SNames, Operation Structures, and Berkeley Mbufs. These microkernel data structures provide the required modularity, exibility, and simplicity in the design of interprocess communication mechanism necessary for both message passing and remote procedure call based communications for RHO-DOS. 
Abstract-found: 1
Intro-found: 1
Reference: [De Paoli and Goscinski 1994] <author> D. De Paoli, and A. Goscinski. </author> <title> An Overview of Process Management in the RHODOS System, </title> <type> Technical Report CS94/01, </type> <institution> School of Computing & Mathematics, Deakin University, Geelong. </institution> <month> March </month> <year> 1994. </year>
Reference-contexts: The benefits obtained from implementing such an architecture relate mainly to the inherent modularity of the system, including portability, expandability, scalability and a simplified programming environment <ref> [De Paoli and Goscinski 1994] </ref>. Interprocess communication (IPC) provides the mechanism for which a user process requests services or resources from the now system and kernel server processes. To maintain good performance, the interprocess communication facility supported by the microkernel is required to be fast and efficient.
Reference: [Gerrity et al. 1991] <author> G. Gerrity, A. Goscinksi, J. Indulska, W. Toomey, W. Zhu. </author> <title> RHODOS A Testbed for Studying Design Issues in Distributed Operating Systems. </title> <booktitle> Proceedings of the 2 nd Singapore International Conference on Networks (SINCON 91), </booktitle> <month> 3-6 September </month> <year> 1991. </year>
Reference-contexts: RHODOS is a microkernel based distributed operating system designed to provide a ex-ible platform for the investigation and evaluation of research topics in the area of distributed operating systems <ref> [Gerrity et al. 1991] </ref>. The fundamental concept of a microkernel design is to implement only the barest set of services and functions within this component and the remaining services are provided by system and kernel server processes running in user mode. <p> The use of MBufs and Opers are hidden to the users by the internals of the Nucleus. 5.1 SNames RHODOS provides three levels of naming: User level naming, System level naming, and low level naming <ref> [Gerrity et al. 1991] </ref>. Objects that are referenced in RHODOS are ports, files, users, groups of processes, and devices [Haddock and Goscinski 1991]. System Names or SNames are used in RHODOS to identify objects owned and managed by users or by the system itself.
Reference: [Goscinski et al. 1990] <author> A. Goscinksi, J. Indulska, W. Toomey, W. Zhu. </author> <title> RHODOS Nucleus Calls. </title> <type> Technical Report CS90/28, </type> <institution> Department of Computer Science, University College, University of New South Wales, Canberra. </institution> <month> July, </month> <year> 1990. </year>
Reference: [Haddock and Goscinski 1991] <author> A. Haddock and A. Goscinski. </author> <title> The Development and Experiences of the RHODOS Naming Facility. </title> <type> Technical Report CS91/37, </type> <institution> Department of Computer Science, University College, University of New South Wales, Canberra. </institution> <month> December, </month> <year> 1991. </year>
Reference-contexts: Objects that are referenced in RHODOS are ports, files, users, groups of processes, and devices <ref> [Haddock and Goscinski 1991] </ref>. System Names or SNames are used in RHODOS to identify objects owned and managed by users or by the system itself. The SName structure has been designed to facilitate the implementation of protection policies and mechanisms, including capability based and access control list protection. <p> The first step is the setting up of the destination system name, which is used by the Nucleus to locate where the message should be placed. In this example, a replacement system call to the Name Server <ref> [Haddock and Goscinski 1991] </ref> is used to extract the complete details of the destination port. As only the destination ports object number is known, this is used to complete the remaining details of the SName.
Reference: [Hobbs et al. 1992] <author> M. Hobbs, W. Toomey, G. Wickham. </author> <title> Booting of the RHODOS Distributed Operating System. </title> <type> Technical Report CS92/3, </type> <institution> School of Computing & Mathematics, Deakin University, Geelong. </institution> <month> August </month> <year> 1992. </year>
Reference: [Toomey et al. 1991] <author> W. Toomey, J. Indulska, G. Gerrity, and A. Goscinski. </author> <title> The Design of the RHODOS September 8, 1994 References Page 26 RHODOS Nucleus, </title> <type> Technical Report CS91/15, </type> <institution> Department of Computer Science, University College, University of New South Wales, Canberra. </institution> <month> May, </month> <year> 1991. </year>
Reference-contexts: As messages are received they are paired up by matching the destination and return port details found in the identifying operation structures. In the previous RHODOS IPC design messages must be processed in the order in which they arrive at the corresponding port <ref> [Toomey et al. 1991] </ref>, thus making it difficult to prioritize the processing of messages. An example is a message from the Nucleus or another Kernel server that may be more important than a request from a user process.
Reference: [Wickham et al. 1994] <author> G. Wickham, M. Hobbs, and D. De Poali. </author> <title> Implementation of the RHODOS Space Manager, </title> <type> Technical Report TR C94/08, </type> <institution> School of Computing and Mathematics, Deakin University, </institution> <note> Geelong, (in preparation). </note>
References-found: 7

