URL: http://www-eksl.cs.umass.edu/papers/Oates96c.ps
Refering-URL: http://eksl-www.cs.umass.edu/publications.html
Root-URL: 
Email: oates@cs.umass.edu  cohen@cs.umass.edu  
Title: Searching for Structure in Multiple Streams of Data  
Author: Tim Oates Paul R. Cohen 
Address: Box 34610 Amherst, MA 01003-4610  Box 34610 Amherst, MA 01003-4610  
Affiliation: Computer Science Department, LGRC University of Massachusetts  Computer Science Department, LGRC University of Massachusetts  
Abstract: Finding structure in multiple streams of data is an important problem. Consider the streams of data flowing from a robot's sensors, the monitors in an intensive care unit, or periodic measurements of various indicators of the health of the economy. There is clearly utility in determining how current and past values in those streams are related to future values. We formulate the problem of finding structure in multiple streams of categorical data as search over the space of dependencies, unexpectedly frequent or infrequent co-occurrences, between complex patterns of values that can appear in the streams. Based on that formulation, we develop the Multi-Stream Dependency Detection (msdd) algorithm that performs an efficient systematic search over the space of all possible dependencies. Dependency strength is evaluated with a statistical measure of nonindependence, and bounds that we derive for the value of that measure allow the search to be pruned. Due to the pruning, msdd can find the k strongest dependencies in the streams by examining only a fraction of the search space.
Abstract-found: 1
Intro-found: 1
Reference: <author> Howe, A. E., and Cohen, P. R. </author> <year> 1995. </year> <title> Understanding planner behavior. </title> <journal> Artificial Intelligence 76(1-2):125-166. </journal>
Reference-contexts: structure in the data, regardless of whether an accurate set of target concepts exists. 5 Related Work The research reported in this paper grew out of the work of Howe and Cohen on finding dependencies between events in execution traces (a single stream of data) generated by the Phoenix planner <ref> (Howe & Co-hen 1995) </ref>.
Reference: <author> Oates, T., and Cohen, P. R. </author> <year> 1996. </year> <title> Searching for planning operators with context-dependent and probabilistic effects. </title> <booktitle> To appear in Proceedings of the Thirteenth National Conference on Artificial Intelligence. </booktitle>
Reference-contexts: that existing commercial databases (many of which have a temporal component) can be mined to discover structure that might confer a competitive business advantage; an intelligent agent with the ability to discover structure in the values flowing from its sensors can automatically acquire and update a model of its environment <ref> (Oates & Cohen 1996) </ref>; an understanding of how current and past states of a computer network are related to future states may allow proactive network management (Oates 1995). <p> The structure of the search facilitates formulation of both domain independent (see Section 3) and domain dependent <ref> (Oates & Cohen 1996) </ref> heuristics that greatly increase efficiency. In particular, because msdd returns a list of the k strongest dependencies, it is possible to use upper bounds on the values of a node's descendants to prune the search. <p> We will extend this research in several directions, including work on the basic msdd algorithm and applications. In terms of the algorithm, we are currently implementing and testing a distributed version, called d-msdd, which parallelizes the search for structure on multiple machines distributed across a network <ref> (Oates, Schmill, & Cohen 1996) </ref>. The structure of the search makes it possible to non-redundantly expand nodes and to make pruning decisions based only on information that is available within individual nodes (with one minor caveat). <p> In terms of applications, work is proceeding in two areas. First, we are using msdd to find structure in the interactions of an artificial agent with its environment for the purpose of learning planning operators <ref> (Oates & Cohen 1996) </ref>. Precursor multitokens encode state/action pairs, and successor multitokens encode state changes. Strong dependencies capture state changes that the agent can reliably bring about.
Reference: <author> Oates, T.; Gregory, D. E.; and Cohen, P. R. </author> <year> 1994. </year> <title> Detecting complex dependencies in categorical data. </title> <booktitle> In Preliminary Papers of the Fifth International Workshop on Artificial Intelligence and Statistics, </booktitle> <month> 417-423. </month> <title> Does not contain work on incremental algorithm reported in book version. </title>
Reference-contexts: For example, the multitoken x = f (B; 1; 0); (Y; 2; 1)g specifies a pattern that occurs twice in the streams above. For 1 The definition of a multitoken given here is an extension of the one given in previous descriptions of the algorithm <ref> (Oates, Gregory, & Cohen 1994) </ref>. t = 2 and t = 9, we see token B in stream one at time t+0 and token Y in stream 2 at time t+1.
Reference: <author> Oates, T.; Schmill, M. D.; and Cohen, P. R. </author> <year> 1996. </year> <title> Parallel and distributed search for structure in mul-tivariate time series. </title> <type> Technical Report 96-23, </type> <institution> University of Massachusetts at Amherst, Computer Science Department. </institution>
Reference-contexts: that existing commercial databases (many of which have a temporal component) can be mined to discover structure that might confer a competitive business advantage; an intelligent agent with the ability to discover structure in the values flowing from its sensors can automatically acquire and update a model of its environment <ref> (Oates & Cohen 1996) </ref>; an understanding of how current and past states of a computer network are related to future states may allow proactive network management (Oates 1995). <p> The structure of the search facilitates formulation of both domain independent (see Section 3) and domain dependent <ref> (Oates & Cohen 1996) </ref> heuristics that greatly increase efficiency. In particular, because msdd returns a list of the k strongest dependencies, it is possible to use upper bounds on the values of a node's descendants to prune the search. <p> We will extend this research in several directions, including work on the basic msdd algorithm and applications. In terms of the algorithm, we are currently implementing and testing a distributed version, called d-msdd, which parallelizes the search for structure on multiple machines distributed across a network <ref> (Oates, Schmill, & Cohen 1996) </ref>. The structure of the search makes it possible to non-redundantly expand nodes and to make pruning decisions based only on information that is available within individual nodes (with one minor caveat). <p> In terms of applications, work is proceeding in two areas. First, we are using msdd to find structure in the interactions of an artificial agent with its environment for the purpose of learning planning operators <ref> (Oates & Cohen 1996) </ref>. Precursor multitokens encode state/action pairs, and successor multitokens encode state changes. Strong dependencies capture state changes that the agent can reliably bring about.
Reference: <author> Oates, T. </author> <year> 1995. </year> <title> Fault identification in computer networks: A review and a new approach. </title> <type> Technical Report 95-113, </type> <institution> University of Massachusetts at Amherst, Computer Science Department. </institution>
Reference-contexts: agent with the ability to discover structure in the values flowing from its sensors can automatically acquire and update a model of its environment (Oates & Cohen 1996); an understanding of how current and past states of a computer network are related to future states may allow proactive network management <ref> (Oates 1995) </ref>. <p> Second, we are using msdd to learn how current and past states of computer networks are related to future states for the purpose of acquiring rules that will allow network managers to predict and avoid problems in their networks before they arise <ref> (Oates 1995) </ref>. Acknowledgements This research was supported by ARPA/Rome Laboratory under contract numbers F30602-91-C-0076 and F30602-93-0100, and by a National Defense Science and Engineering Graduate Fellowship. The U.S. Government is authorized to reproduce and distribute reprints for governmental purposes not withstanding any copyright notation hereon.
Reference: <author> Riddle, P.; Segal, R.; and Etzioni, O. </author> <year> 1994. </year> <title> Representation design and brute-force induction in a boeing manufacturing domain. </title> <booktitle> Applied Artificial Intelligence 8 </booktitle> <pages> 125-147. </pages>
Reference: <author> Rymon, R. </author> <year> 1992. </year> <title> Search through systematic set enumeration. </title> <booktitle> In Proceedings of the Third International Conference on Principles of Knowledge Representation and Reasoning. </booktitle>
Reference: <author> Schlimmer, J. C. </author> <year> 1993. </year> <title> Efficiently inducing determinations: A complete and systematic search algorithm that uses optimal pruning. </title> <booktitle> In Proceedings of the Tenth International Conference on Machine Learning, </booktitle> <pages> 284-290. </pages>
Reference: <author> Smyth, P., and Goodman, R. M. </author> <year> 1992. </year> <title> An information theoretic approach to rule induction from databases. </title> <journal> IEEE Transactions on Knowledge and Data Engineering 4(4) </journal> <pages> 301-316. </pages>
Reference-contexts: Pruning based on optimistic estimates of the value of the descendants of a node has been used infrequently in rule induction algorithms, with itrule <ref> (Smyth & Goodman 1992) </ref> and opus (Webb 1996) be ing notable exceptions. It is possible to derive a bound on the value of G for all of the descendants of any given node in msdd's search space, allowing msdd to perform optimistic pruning as described above. <p> Our use of optimistic bounds on the value of the node evaluation function for pruning systematic search spaces is similar to the opus algorithm (Webb 1996), which in turn is a generalization of the same idea as applied to non-systematic search in the itrule induction algorithm <ref> (Smyth & Goodman 1992) </ref>. msdd and itrule return the k best rules, whereas opus returns a single goal node or the single node with the highest value.
Reference: <author> Webb, G. I. </author> <year> 1996. </year> <title> OPUS: An efficient admissible algorithm for unordered search. </title> <journal> Journal of Artificial Intelligence Research 3 </journal> <pages> 45-83. </pages>
Reference-contexts: Multitokens and dependencies express conjunctive concepts, and the order in which individual terms are added is irrelevant to the semantics of the final concept. Webb <ref> (Webb 1996) </ref> calls such search spaces unordered. It is possible to enumerate all of the elements of an unordered search space systematically so that each element of the space is generated exactly once. <p> Pruning based on optimistic estimates of the value of the descendants of a node has been used infrequently in rule induction algorithms, with itrule (Smyth & Goodman 1992) and opus <ref> (Webb 1996) </ref> be ing notable exceptions. It is possible to derive a bound on the value of G for all of the descendants of any given node in msdd's search space, allowing msdd to perform optimistic pruning as described above. <p> Our use of optimistic bounds on the value of the node evaluation function for pruning systematic search spaces is similar to the opus algorithm <ref> (Webb 1996) </ref>, which in turn is a generalization of the same idea as applied to non-systematic search in the itrule induction algorithm (Smyth & Goodman 1992). msdd and itrule return the k best rules, whereas opus returns a single goal node or the single node with the highest value. <p> We are also working on an incremental version (i-msdd) of the basic algorithm. Although the algorithm as implemented is very efficient, recently published work of Webb <ref> (Webb 1996) </ref> describes an interesting technique for dynamically restructuring systematic search spaces so that most of the space is placed beneath nodes that have a high probability of being pruned. We will investigate extending that technique to apply to the space of dependencies between multitokens searched by msdd.
Reference: <author> Weigend, A., and Gershenfeld, N. </author> <year> 1993. </year> <title> Time Series Prediction: Forecasting the Future and Understanding the Past. </title> <publisher> Addison-Wesley. </publisher>
Reference-contexts: low) (engine-type overhead-cam) ) (wheel-base low) (num-of-cylinders four) (engine-size low) (bore low) In another experiment, msdd searched for the top 25 rules in 2000 time steps of the multivariate time series of chest volume (cv), heart rate (hr) and oxygen saturation (os) taken from a patient suffering from sleep apnea <ref> (Weigend & Gershenfeld 1993) </ref>. msdd found rules that used values in the streams over the last three time steps (w p = 3) to predict values over the next two time steps (w s = 2; ffi = 1).
Reference: <author> Wickens, T. D. </author> <year> 1989. </year> <title> Multiway Contingency Tables Analysis for the Social Sciences. </title> <publisher> Lawrence Erlbaum Associates. </publisher>
Reference-contexts: The G statistic computed for 2x2 contingency tables is a statistical measure of nonindependence, and is therefore an ideal candidate for f <ref> (Wickens 1989) </ref>.
References-found: 12

