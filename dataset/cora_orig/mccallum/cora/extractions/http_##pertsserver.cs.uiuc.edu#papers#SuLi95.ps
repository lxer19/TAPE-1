URL: http://pertsserver.cs.uiuc.edu/papers/SuLi95.ps
Refering-URL: http://pertsserver.cs.uiuc.edu/papers/
Root-URL: http://www.cs.uiuc.edu
Email: fjsun, janeliug@cs.uiuc.edu  
Title: Bounding the End-to-End Response Time in Multiprocessor Real-Time Systems  
Author: Jun Sun Jane W.S. Liu 
Address: Urbana, IL 61801  
Affiliation: Department of Computer Science, University of Illinois, Urbana-Champaign  
Date: 1995  
Note: To appear in Proc. of the Third Workshop on Parallel and Distributed Real-Time Systems,  
Abstract: In a multiprocessor real-time system, a task may execute in turn on several processors before it completes. The task may have different priorities on different processors and execute on some processors more than once. Existing techniques for bounding the response times of such tasks are not effective. In this paper, we present a method to compute tighter upper bounds on their response times. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Bettati and J. W.S. Liu, </author> <title> "End-to-End Scheduling to Meet Deadlines in Distributed Systems". </title> <booktitle> In The 12th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 452-459, </pages> <address> Yokohama, Japan, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: In a dynamic system, each subtask is dynamically released immediately after its immediate predecessor completes. In a static system, every subtask is released periodically according to its own period and phase. Some method, such as the phase modification technique <ref> [1] </ref>, is used to adjust the phases of subtasks such that when a subtask is released its immediate predecessor is surely completed. In this case, we say that the subtasks are statically released.
Reference: [2] <author> R. Rajkumar and L. Sha and J. P. Lehoczky, </author> <title> "Real-Time Synchronization Protocols for Multiprocessors", </title> <booktitle> In IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 259-269, </pages> <year> 1988. </year>
Reference-contexts: In this case, we say that the subtasks are statically released. To the best of our knowledge, existing schedulabil-ity analysis techniques can give us only loose upper bounds of the response times of recurrent end-to-end tasks. Rajkumar et al. extended the Priority Ceiling Protocol to multiprocessor systems <ref> [2] </ref>. In their model, each task has a host processor on which most of the computation of that task takes place, and the task has a fixed priority on its host processor.
Reference: [3] <author> J. Lehoczky and L. Sha and Y, Ding, </author> <title> "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior", </title> <booktitle> In IEEE Real-Time Symposium, </booktitle> <pages> pages 166-171, </pages> <year> 1989. </year>
Reference-contexts: The delay of the execution incurred when the task executes on processors other than its host processor is counted as the blocking time. Consequently existing methods <ref> [3, 4] </ref> to determine the worst-case response times of periodic tasks on a single processor can be applied. This approach is applicable to some dynamic systems. However it does not give satisfactory upper bounds on response times of end-to-end tasks in general. <p> This approach is applicable to some dynamic systems. However it does not give satisfactory upper bounds on response times of end-to-end tasks in general. In a static system, it is possible to treat all sub tasks as independent periodic tasks. Existing meth-ods <ref> [3, 4] </ref> to determine upper bounds of the response times of periodic tasks on a single processor can be applied to determine upper bounds of the response times of individual subtasks. The sum of these upper bounds gives an upper bound to the response time of their parent task [5]. <p> delay the execution of T i;j , a simple way to bound M i;j k (t 0 ; t) is to treat the subtasks of T k in H i;j as independent subtasks and to let them all be released at time t 0 , which is a critical instant <ref> [3] </ref>. In other words, an upper bound is M k (t) = T k;l 2H i;j t Eq.(2) gives a loose bound of M i;j k (t 0 ; t) since subtasks of T k are not independent. <p> In the next section we will present improved methods to compute the PTTD function that yields tighter bound. If T i;j does not have any sibling subtask which executes on the same processor as itself, the time demand analysis method, proposed by Lehoczky <ref> [3] </ref>, can be extended to determine an upper bound c i;j of the response time of T i;j .
Reference: [4] <author> M. Joseph and P. Pandya, </author> <title> "Finding Response Times in a Real-Time System", </title> <journal> In The Computer Journal of the British Computer Society, </journal> <volume> 29(5) </volume> <pages> 390-395, </pages> <month> October </month> <year> 1986. </year>
Reference-contexts: The delay of the execution incurred when the task executes on processors other than its host processor is counted as the blocking time. Consequently existing methods <ref> [3, 4] </ref> to determine the worst-case response times of periodic tasks on a single processor can be applied. This approach is applicable to some dynamic systems. However it does not give satisfactory upper bounds on response times of end-to-end tasks in general. <p> This approach is applicable to some dynamic systems. However it does not give satisfactory upper bounds on response times of end-to-end tasks in general. In a static system, it is possible to treat all sub tasks as independent periodic tasks. Existing meth-ods <ref> [3, 4] </ref> to determine upper bounds of the response times of periodic tasks on a single processor can be applied to determine upper bounds of the response times of individual subtasks. The sum of these upper bounds gives an upper bound to the response time of their parent task [5]. <p> is the first time instant when the time demand W i;j (t) is met by time supply t, i.e., c i;j = minft &gt; 0jt = W i;j (t)g (4) We can use an efficient iterative method to compute the right hand side of (4) if c i;j p i;j <ref> [4] </ref>. According to this method, S 0 is set to W i;j (0) and S k for k = 1; 2; : : : is computed by the following equation. S k = W i;j (S k1 ) (5) According to the Eq.(3) and (5), S k is monotonically increasing.
Reference: [5] <author> J. Sun and R. Bettati and J. W.S. Liu, </author> <title> "An End-to-End Approach to Scheduling Periodic Tasks with Shared Resources in Multiprocessor Systems", </title> <booktitle> In IEEE Workshop on Real-Time Operating Systems and Software, </booktitle> <pages> pages 18-22, </pages> <year> 1994. </year>
Reference-contexts: The sum of these upper bounds gives an upper bound to the response time of their parent task <ref> [5] </ref>. However, by treating subtasks on each processor as independent periodic tasks, the precedence relation among subtasks is not exploited, and the bounds of the response times based on this assumption can be very pessimistic, especially for recurrent tasks.
References-found: 5

