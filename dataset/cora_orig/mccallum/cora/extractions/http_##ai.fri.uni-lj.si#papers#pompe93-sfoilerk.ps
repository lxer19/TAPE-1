URL: http://ai.fri.uni-lj.si/papers/pompe93-sfoilerk.ps
Refering-URL: http://ai.fri.uni-lj.si/papers/index.html
Root-URL: 
Email: e-mail: fpuros,kovacicm,xaigorg@fer.uni-lj.si  
Title: SFOIL: Stochastic Approach to Inductive Logic Programming  
Author: Uros Pompe, Matevz Kovacic, Igor Kononenko 
Address: Trzaska 25, 61001 Ljubljana, Slovenia  
Affiliation: University of Ljubljana Faculty of Electrical Engeneering and Computer Science  
Abstract: Current systems in the field of Inductive Logic Programming (ILP) use, primarily for the sake of efficiency, heuristically guided search techniques. Such greedy algorithms suffer from local optimization problem. Present paper describes a system named SFOIL, that tries to alleviate this problem by using a stochastic search method, based on a generalization of simulated annealing, called Markovian neural network. Various tests were performed on benchmark, and real-world domains. The results show both, advantages and weaknesses of stochastic approach. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. R. Quinlan, </author> <title> "Learning logical definitions from relations," </title> <booktitle> in Machine Learning 5, </booktitle> <pages> pp. 239-266, </pages> <year> 1990. </year>
Reference-contexts: 1 Introduction The main problem, when dealing with induction of logic programs from instances, is an enormous number of possible logic descriptions. Inductive Logic Programming systems perform the task by searching the state space of logic programs. This space is determined by the language of logic programs <ref> [1] </ref> and can be structured as a refinement graph [2]. The ILP algorithms were supposed to be an efficient tool for coping with real world problems. In order to achieve that, many systems search the sub space which is significantly reduced compared to complete (full blown) state space. FOIL [1] is <p> programs <ref> [1] </ref> and can be structured as a refinement graph [2]. The ILP algorithms were supposed to be an efficient tool for coping with real world problems. In order to achieve that, many systems search the sub space which is significantly reduced compared to complete (full blown) state space. FOIL [1] is a step in this direction. The search strategy introduced by this system is based on a greedy, heuristically guided algorithm. Unfortunately, due to its myopic behaviour, it is not able to discover interesting relations that often appear in real world problems. <p> This paper describes an ILP system, named SFOIL, that benefits from one such technique. We use our algorithm called Markovian neural network [3], which is a generalization of simulated annealing. The system inherits also some qualities from other ILP systems, namely, FOIL <ref> [1] </ref>, mFOIL [4], and PCFOIL [5]. We tested SFOIL on several benchmark problems, described in [1]. <p> We use our algorithm called Markovian neural network [3], which is a generalization of simulated annealing. The system inherits also some qualities from other ILP systems, namely, FOIL <ref> [1] </ref>, mFOIL [4], and PCFOIL [5]. We tested SFOIL on several benchmark problems, described in [1]. We also used it on a real world problem (finite element mesh design), and on King-rook-king chess endgame domain, which is appropriate for evaluating noise resistance. 2 SFOIL Like FOIL, SFOIL uses extensional representation of background knowledge and target predicate. At the outer level it is a covering algorithm. <p> This probability is defined as follows: p ij = N i T (1) where N (T) P (T ) ij denotes a normalization coefficient, assuring that p (T ) ij 2 <ref> [0; 1] </ref>. In every iteration temperature T is decreased. This corresponds to simulated annealing which aims, in the limit, to reach the state of minimum energy. Successor s next of state s cur is randomly selected from set S s cur according to probability p (T ) cur;next . <p> Note that in case of q i = p (recursive literal), q i (V 1 ; : : : ; V s ) must comply with additional restrictions, carefully described in <ref> [1] </ref>. <p> We are interested only in clauses s k 2 S, where it holds CB (s k ) fl weight &lt; T SB (s k ) <ref> [1, 5] </ref>. <p> The main purposes of this tests were to evaluate efficiency and effectiveness of the algorithm, and to measure it's noise resistance. 3.1 Benchmark domains We took several benchmark domains, known from the literature <ref> [1] </ref>, and performed time measurements. SFOIL tried to learn the definition of the following predicates: canreach, member, arch, eastbound, quicksort.
Reference: [2] <author> M. Kovacic, N. Lavrac, M. Grobelnik, D. Zupanic, and D. Mladenic, </author> <title> "Stochastic search in inductive logic programming," </title> <booktitle> in Proc. European Conference on Artificial Intelligence-92, (Vienna, Aus-tria), </booktitle> <pages> pp. 444-445, </pages> <year> 1992. </year>
Reference-contexts: Inductive Logic Programming systems perform the task by searching the state space of logic programs. This space is determined by the language of logic programs [1] and can be structured as a refinement graph <ref> [2] </ref>. The ILP algorithms were supposed to be an efficient tool for coping with real world problems. In order to achieve that, many systems search the sub space which is significantly reduced compared to complete (full blown) state space. FOIL [1] is a step in this direction. <p> The search strategy introduced by this system is based on a greedy, heuristically guided algorithm. Unfortunately, due to its myopic behaviour, it is not able to discover interesting relations that often appear in real world problems. We can also consider the induction of hypothesis as an optimization problem <ref> [2] </ref>. This way we do not only look at the problem from another point of view, but we can also employ well-known techniques, that are able solve such problems. This paper describes an ILP system, named SFOIL, that benefits from one such technique. <p> The task is to find such s min 2 S that 8s i 2 S : f (s min ) f (s i ), that is, function f has a minimum in s min . Stochastic search method <ref> [2] </ref> works as follows. Let S s cur be a set of successors of state s cur; and T &gt; 0, a parameter called temperature.
Reference: [3] <author> M. </author> <title> Kovacic, "Markovian neural networks," </title> <journal> Biolo gical Cybernetics, </journal> <volume> vol. 64, </volume> <pages> pp. 337-342, </pages> <year> 1991. </year>
Reference-contexts: This paper describes an ILP system, named SFOIL, that benefits from one such technique. We use our algorithm called Markovian neural network <ref> [3] </ref>, which is a generalization of simulated annealing. The system inherits also some qualities from other ILP systems, namely, FOIL [1], mFOIL [4], and PCFOIL [5]. We tested SFOIL on several benchmark problems, described in [1].
Reference: [4] <author> S. Dzeroski, </author> <title> "Handling noise in inductive lo gic programming," </title> <type> Master's thesis, </type> <institution> University of Ljubljana, FER, </institution> <year> 1991. </year>
Reference-contexts: This paper describes an ILP system, named SFOIL, that benefits from one such technique. We use our algorithm called Markovian neural network [3], which is a generalization of simulated annealing. The system inherits also some qualities from other ILP systems, namely, FOIL [1], mFOIL <ref> [4] </ref>, and PCFOIL [5]. We tested SFOIL on several benchmark problems, described in [1]. <p> This entropy is, informally speaking, total information contained in training set T S (s k ). The second set of heuristic estimates is based on the m-estimate <ref> [4] </ref>. <p> Clause is then added to the definition and optionally eliminated later by the post-process algorithm. At the outer level post-processing consists of eliminating inaccurate and insignificant clauses. Significance of the clause is measured by the likelihood ratio statistics <ref> [4] </ref>, where only those clauses for which the value of the statistic exceeds some predetermined threshold are retained in final definition. <p> FOIL mFOIL SFOIL i SFOIL m % 12.9 22.3 24.1 27.7 Table 2: Percentage of correctly classified edges. With a small amount of fine-tuning classification accuracy of up to 32.7% was easily achieved. SFOIL clearly performed better than FOIL (FOIL's and mFOIL's data taken from <ref> [4] </ref>). The main source of classification accuracy boost were clauses, containing neghbour literal. Learning time for individual clauses was in the range of minutes (on Sun-Sparc station IPX). 3.3 King-rook-king chess endgame (KRK) Significant property of every learning algorithm is it's noise resistance. <p> In order to evaluate it's ability, SFOIL was tested on KRK domain. Tests were performed on the same data, and conducted in the same manner as described in <ref> [4] </ref>.
Reference: [5] <author> R. Zupanc, </author> <title> "Efficient implementation of machine learning in first order logic (in slovene)," </title> <type> Master's thesis, </type> <institution> University of Ljubljana,FER, </institution> <year> 1991. </year>
Reference-contexts: This paper describes an ILP system, named SFOIL, that benefits from one such technique. We use our algorithm called Markovian neural network [3], which is a generalization of simulated annealing. The system inherits also some qualities from other ILP systems, namely, FOIL [1], mFOIL [4], and PCFOIL <ref> [5] </ref>. We tested SFOIL on several benchmark problems, described in [1]. <p> L is a literal of the form X i = X j (not (X i = X j )), X i = "const" (not (X i = "const")) <ref> [5] </ref>, and q i (V 1 ; : : : ; V s ) (not q i (V 1 ; : : : ; V s )), where X i ,X j are existing variables (those introduced by clause s cur ) and V i are both, existing, and new variables. <p> We are interested only in clauses s k 2 S, where it holds CB (s k ) fl weight &lt; T SB (s k ) <ref> [1, 5] </ref>.
Reference: [6] <author> J. R. Quinlan, </author> <booktitle> "Determinate literals in induct ive logic programming," in Proc. Twelfth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pp. 746-750, </pages> <year> 1991. </year>
Reference-contexts: We will sometimes, when appropriate, refer to the function h as a function of literal L (h (L)). * finally, (s cur ) = fs k ; s k = s cur fl L c g (3) L c is determinate literal <ref> [6] </ref> or a literal with the maximum utility estimate. This literal is computed individually for each predicate. For a background knowledge B with r predicates therefore holds j (s cur )j r. This transition operator can help us define a successorset S s cur of current set s cur .
Reference: [7] <author> B. Dolsak, A. Jezernik, and I. Bratko, </author> <title> "A knowledge base for finite element mesh design," </title> <type> tech. rep., </type> <institution> University of Maribor, University of Ljubljana, </institution> <year> 1991. </year> <month> 4 </month>
Reference-contexts: The domain and testing technique are described in detail in <ref> [7] </ref>. This domain is particularly appropriate for ILP since predicates in the background knowledge introduce spatial relations into the model. FOIL was unable to add literals, based on one of this predicates, namely neighbour , in built clauses.
References-found: 7

