URL: http://www.cs.ucsb.edu/~vigna/pub/mos97.ps.gz
Refering-URL: http://www.cs.ucsb.edu/~vigna/listpub.html
Root-URL: http://www.cs.ucsb.edu
Email: vigna@elet.polimi.it.  
Title: Protecting Mobile Agents through Tracing  
Author: Giovanni Vigna 
Keyword: mobile code, mobile agents, security, auditing.  
Address: P.za L. Da Vinci 23, 20133 Milano, Italy  
Affiliation: Dip. Elettronica e Informazione, Politecnico di Milano  
Abstract: Mobile code systems provide a flexible and powerful platform to build distributed applications in an Internet scale, but they rise strong requirements from the security point of view. Security issues include authentication of the different remote parties involved and protection of the execution environments from malicious agents. Nonetheless, the most difficult task is to protect roaming agents from execution environments. This paper presents a new mechanism based on execution tracing and cryptography that allows an agent owner to determine if some site in the route followed by the agent tried to tamper with the agent state or code. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> J. K. Boggs. </author> <title> IBM Remote Job Entry Facility: Generalize Subsystem Remote Job Entry Facility. </title> <journal> IBM Technical Disclosure Bulletin 752, IBM, </journal> <month> August </month> <year> 1973. </year>
Reference-contexts: Remote execution is a well-known mechanism that dates back to the 70s, when it was used for remote job submissions <ref> [1] </ref>, and that has always been available to UNIX users by means of the rsh facility. A formal definition of the remote evaluation mechanism is presented in [20]. Remote code execution represents the basis for several mobile code systems like TACOMA [13], Obliq [3], and M0 [23].
Reference: 2. <author> N.S. Borenstein. </author> <title> EMail With A Mind of Its Own: The Safe-Tcl Language for Enabled Mail. Technical report, First Virtual Holdings, </title> <publisher> Inc, </publisher> <year> 1994. </year>
Reference-contexts: partial state S i should produce a hash value equal to the one contained in the corresponding receipt message, otherwise the site at step i cheated. 4 The SALTA language The SALTA language (Secure Agent Language with Tracing of Actions 6 ) is a modified version of the Safe-Tcl language <ref> [2, 17] </ref>. The available Tcl [16] command set is showed in Table 1. The Safe-Tcl language has been restricted further, and some new instructions have been added: request, service, reply and go. The request command takes as a parameter an agent name, a command name and possible parameters.
Reference: 3. <author> Luca Cardelli. </author> <title> A language with distributed scope. </title> <journal> Computing Systems, </journal> <volume> 8(1) </volume> <pages> 27-59, </pages> <year> 1995. </year>
Reference-contexts: A formal definition of the remote evaluation mechanism is presented in [20]. Remote code execution represents the basis for several mobile code systems like TACOMA [13], Obliq <ref> [3] </ref>, and M0 [23]. Suppose now that user A wants to execute code C on site B.
Reference: 4. <author> A. Carzaniga, G.P. Picco, and G. Vigna. </author> <title> Designing Distributed Applications with Mobile Code Paradigms. </title> <editor> In A. Fuggetta and A. Wolf, editors, </editor> <booktitle> Proceedings of the 19th International Conference on Software Engineering (ICSE'97), </booktitle> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: Examples of strongly mobile languages are Telescript [24] and Agent-Tcl [10]. A survey of several mobile code languages and systems can be found in [6]. While the mobile code approach to designing and implementing distributed application has proved valuable <ref> [4] </ref>, it raises some serious security issues: protection of hosts and execution environments from misbehaviors or attacks coming from agents, protection of executing units from each other, protection of agents information while traveling through untrusted networks, protection of agents from malicious computational environments.
Reference: 5. <author> David Chess, , Benjamin Grosof, Colin Harrison, David Levine, Colin Paris, and Gene Tsudik. </author> <title> Itinerant Agents for Mobile Computing. </title> <type> Technical report, </type> <institution> IBM Research Division - T.J. Watson Research Center, </institution> <year> 1995. </year>
Reference-contexts: Most mobile code systems consider the site as a trusted entity and therefore they do not provide any mechanism to protect agent execution. Others <ref> [5, 8] </ref> have tried to identify which goals are impossible or very difficult to achieve. <p> From this point of view, the agent developer must use the same caution 1 Partially encrypted agents are a possible partial solution to the problem. required when developing privileged programs that could receive parameters by untrusted principals (e.g., CGI scripts). 3 Cryptographic traces As stated in <ref> [5] </ref>, it is impossible to prevent malicious or faulty sites from tampering with agents. Sites must have access to an agent code and state in order to support its execution. Still, there are means to detect abnormal behaviors or unauthorized modifications of agents components.
Reference: 6. <author> G. Cugola, C. Ghezzi, G.P. Picco, and G. Vigna. </author> <title> Analyzing Mobile Code Languages. </title> <editor> In Jan Vitek and Christian Tschudin, editors, </editor> <title> Mobile Object Systems: Towards the Programmable Internet. </title> <booktitle> Lecture Notes on Computer Science, </booktitle> <month> April </month> <year> 1997. </year>
Reference-contexts: Examples of strongly mobile languages are Telescript [24] and Agent-Tcl [10]. A survey of several mobile code languages and systems can be found in <ref> [6] </ref>.
Reference: 7. <author> William M. Farmer, Joshua D. Guttman, and Vipin Swarup. </author> <title> Security for Mobile Agents: Authentication and State Appraisal. </title> <booktitle> In Proceedings of the Fourth Euro-pean Symposium on Research in Computer Security, </booktitle> <pages> pages 118-130, </pages> <address> Rome, Italy, </address> <month> September </month> <year> 1996. </year> <note> Lecture Notes in Computer Science No. 1146. </note>
Reference-contexts: In <ref> [7] </ref> a protection mechanism against sites trying to tamper with agents state is presented. The mechanism is based on state appraisal functions. These functions express invariants that the agent state must satisfy. This way, some malicious attempt to tamper with the agent state can be detected.
Reference: 8. <author> William M. Farmer, Joshua D. Guttman, and Vipin Swarup. </author> <title> Security for Mobile Agents: Issues and Requirements. </title> <booktitle> In Proceedings of the 19th National Information Systems Security Conference, </booktitle> <pages> pages 591-597, </pages> <address> Baltimore, Md., </address> <month> October </month> <year> 1996. </year>
Reference-contexts: Most mobile code systems consider the site as a trusted entity and therefore they do not provide any mechanism to protect agent execution. Others <ref> [5, 8] </ref> have tried to identify which goals are impossible or very difficult to achieve.
Reference: 9. <author> James Gosling and Henry McGilton. </author> <title> The Java Language Environment: A White Paper. </title> <type> Technical report, </type> <institution> Sun Microsystems, </institution> <month> October </month> <year> 1995. </year>
Reference-contexts: Mobile code technologies can be roughly divided into two sets. Weakly mobile technologies allow an executing unit to send some code to a remote site in order to have it executed there or to dynamically link code retrieved from a remote site. Examples of weakly mobile technologies are Java <ref> [9] </ref> and Mole [21]. Strongly mobile technologies allow an executing unit that is running on a particular site to move to a different computational environment.
Reference: 10. <author> Robert S. Gray. </author> <title> Agent Tcl: A transportable agent system. </title> <booktitle> In Proceedings of the CIKM Workshop on Intelligent Information Agents, </booktitle> <address> Baltimore, Md., </address> <month> December </month> <year> 1995. </year>
Reference-contexts: Examples of strongly mobile languages are Telescript [24] and Agent-Tcl <ref> [10] </ref>. A survey of several mobile code languages and systems can be found in [6].
Reference: 11. <author> Robert S. Gray. </author> <title> Agent Tcl: A flexible and secure mobile agent system. </title> <booktitle> In Proceedings of the Fourth Annual Tcl/Tk Workshop, </booktitle> <pages> pages 9-23, </pages> <address> Monterey, </address> <institution> Cal., </institution> <month> July </month> <year> 1996. </year>
Reference-contexts: When the packed executing unit reaches its destination, it is unpacked, its state is restored and its execution is restarted from the command following the go. From this point of view SALTA is similar to Agent-Tcl <ref> [11] </ref>. SALTA code is static, i.e., it is not possible to evaluate code that is produced dynamically.
Reference: 12. <author> ITU-T. </author> <title> Information Technology Open Systems Interconnection The Directory: Authentication Framework. </title> <type> ITU-T Recommendation X.509, </type> <month> November </month> <year> 1993. </year>
Reference-contexts: The public key of a principal A is denoted by A p , while A s is used for the corresponding secret key. The principals are users of a public key infrastructure <ref> [12] </ref> that guarantees the association of a principal with the corresponding public key. We assume that, at any moment, any principal can retrieve the public key of any other principal and verify its integrity.
Reference: 13. <author> Dag Johansen, Robbert van Renesse, and Fred B. Schneider. </author> <title> An Introduction to the TACOMA Distributed System Version 1.0. </title> <type> Technical Report 95-23, </type> <institution> Department of Computer Science, University of Tromst and Cornell University, Tromst, Norway, </institution> <month> June </month> <year> 1995. </year>
Reference-contexts: A formal definition of the remote evaluation mechanism is presented in [20]. Remote code execution represents the basis for several mobile code systems like TACOMA <ref> [13] </ref>, Obliq [3], and M0 [23]. Suppose now that user A wants to execute code C on site B.
Reference: 14. <author> S. Lucco, O. Sharp, and R. Wahbe. Omniware: </author> <title> A Universal Substrate for Web Programming. </title> <booktitle> In Proceedings of the Fourth International World Wide Web Conference, </booktitle> <address> Boston, Massachusetts, USA, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: Protection of agents information while traveling over an untrusted network can be achieved using well-known cryptographic protocols. Mechanisms and policies to protect a site from code coming from an untrusted source have been the focus of recent research <ref> [22, 17, 25, 14] </ref>. Using suitable access control and sandboxing mechanisms, it is possible to protect effectively the execution environment from attacks. The hardest security problem is represented by the protection of agents from malicious actions of the computational environments they are running in.
Reference: 15. <author> J. Ordille. </author> <title> When agents roam, </title> <type> who can you trust? Technical report, </type> <institution> Bell Labs, Computing Science Research Center, </institution> <year> 1996. </year>
Reference-contexts: For example, if the read (x) instruction gets the integer 3 from the terminal, the associated signature will be x := 3. The signature is empty for white statements. In the following sections we will address problems of increasing complexity. In particular, we will follow the distinction made by <ref> [15] </ref>, firstly tackling the problem of protecting remote code execution, and then analyzing boomerang agents and multi-hop agents. 3.1 Remote code execution Remote code execution, also known as remote evaluation, is a mechanism that allows a program to have some code, together with some initialization data, sent to a remote host
Reference: 16. <author> J. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: The available Tcl <ref> [16] </ref> command set is showed in Table 1. The Safe-Tcl language has been restricted further, and some new instructions have been added: request, service, reply and go. The request command takes as a parameter an agent name, a command name and possible parameters.
Reference: 17. <author> J. Ousterhout, J. Levy, and B. Welch. </author> <title> The Safe-Tcl Security Model. </title> <type> Technical report, </type> <institution> Sun Microsystems, </institution> <month> November </month> <year> 1996. </year>
Reference-contexts: Protection of agents information while traveling over an untrusted network can be achieved using well-known cryptographic protocols. Mechanisms and policies to protect a site from code coming from an untrusted source have been the focus of recent research <ref> [22, 17, 25, 14] </ref>. Using suitable access control and sandboxing mechanisms, it is possible to protect effectively the execution environment from attacks. The hardest security problem is represented by the protection of agents from malicious actions of the computational environments they are running in. <p> partial state S i should produce a hash value equal to the one contained in the corresponding receipt message, otherwise the site at step i cheated. 4 The SALTA language The SALTA language (Secure Agent Language with Tracing of Actions 6 ) is a modified version of the Safe-Tcl language <ref> [2, 17] </ref>. The available Tcl [16] command set is showed in Table 1. The Safe-Tcl language has been restricted further, and some new instructions have been added: request, service, reply and go. The request command takes as a parameter an agent name, a command name and possible parameters.
Reference: 18. <author> R. L. Rivest, A. Shamir, and L. Adleman. </author> <title> A Method for Obtaining Digital Signatures and Public-Key Cryptosystems. </title> <journal> Communications of the ACM, </journal> <volume> 21(2):120 - 126, </volume> <month> February </month> <year> 1978. </year>
Reference-contexts: The proposed protocol assumes that all the involved principals, namely users and site owners, own a public and a secret key that can be used for encryption and digital signatures <ref> [18] </ref>. The public key of a principal A is denoted by A p , while A s is used for the corresponding secret key. The principals are users of a public key infrastructure [12] that guarantees the association of a principal with the corresponding public key.
Reference: 19. <author> Bruce Schneier. </author> <title> Applied Cryptography Protocols, Algorithms, and Source Code in C. </title> <publisher> John Wiley & Sons, Inc., </publisher> <year> 1994. </year>
Reference-contexts: The hash value obtained by application of the function H to the message m is denoted by H (m). Several examples of public key cryptosystems 2 and one-way hash functions can be found in <ref> [19] </ref>. A moving agent is composed by some code C and some state S i that has been determined, at some specified point i, by code execution. The state includes global data structures, the call stack and the program counter.
Reference: 20. <author> J. W. Stamos and D. K. Gifford. </author> <title> Remote Evaluation. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 12(4) </volume> <pages> 537-565, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Remote execution is a well-known mechanism that dates back to the 70s, when it was used for remote job submissions [1], and that has always been available to UNIX users by means of the rsh facility. A formal definition of the remote evaluation mechanism is presented in <ref> [20] </ref>. Remote code execution represents the basis for several mobile code systems like TACOMA [13], Obliq [3], and M0 [23]. Suppose now that user A wants to execute code C on site B.
Reference: 21. <author> M. Strasser, J. Baumann, and F. Hohl. </author> <title> Mole|A Java Based Mobile Agent System. </title> <editor> In M. Muhlhauser, editor, </editor> <booktitle> Special Issues in Object-Oriented Programming: Workshop Reader of the 10th European Conference on Object-Oriented Programming, ECOOP'96, </booktitle> <pages> pages 327-334, </pages> <address> Linz, Austria, </address> <month> July </month> <year> 1997. </year>
Reference-contexts: Weakly mobile technologies allow an executing unit to send some code to a remote site in order to have it executed there or to dynamically link code retrieved from a remote site. Examples of weakly mobile technologies are Java [9] and Mole <ref> [21] </ref>. Strongly mobile technologies allow an executing unit that is running on a particular site to move to a different computational environment.
Reference: 22. <author> Joseph Tardo and Luis Valenta. </author> <title> Mobile agent security and Telescript. </title> <booktitle> In Proceedings of IEEE COMPCON '96, </booktitle> <month> February </month> <year> 1996. </year>
Reference-contexts: Protection of agents information while traveling over an untrusted network can be achieved using well-known cryptographic protocols. Mechanisms and policies to protect a site from code coming from an untrusted source have been the focus of recent research <ref> [22, 17, 25, 14] </ref>. Using suitable access control and sandboxing mechanisms, it is possible to protect effectively the execution environment from attacks. The hardest security problem is represented by the protection of agents from malicious actions of the computational environments they are running in.
Reference: 23. <author> C. F. Tschudin. </author> <title> An Introduction to the M0 Messenger Language. </title> <institution> University of Geneva, Switzerland, </institution> <year> 1994. </year>
Reference-contexts: A formal definition of the remote evaluation mechanism is presented in [20]. Remote code execution represents the basis for several mobile code systems like TACOMA [13], Obliq [3], and M0 <ref> [23] </ref>. Suppose now that user A wants to execute code C on site B.
Reference: 24. <author> James E. White. </author> <title> Telescript Technology: Mobile Agents. </title> <editor> In Jeffrey Bradshaw, editor, </editor> <booktitle> Software Agents. </booktitle> <publisher> AAAI Press/MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: Examples of strongly mobile languages are Telescript <ref> [24] </ref> and Agent-Tcl [10]. A survey of several mobile code languages and systems can be found in [6].
Reference: 25. <author> F. Yellin. </author> <title> Low Level Security in Java. </title> <type> Technical report, </type> <institution> Sun Microsystems, </institution> <year> 1995. </year>
Reference-contexts: Protection of agents information while traveling over an untrusted network can be achieved using well-known cryptographic protocols. Mechanisms and policies to protect a site from code coming from an untrusted source have been the focus of recent research <ref> [22, 17, 25, 14] </ref>. Using suitable access control and sandboxing mechanisms, it is possible to protect effectively the execution environment from attacks. The hardest security problem is represented by the protection of agents from malicious actions of the computational environments they are running in.
References-found: 25

