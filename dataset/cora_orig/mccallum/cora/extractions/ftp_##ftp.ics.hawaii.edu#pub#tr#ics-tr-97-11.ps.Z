URL: ftp://ftp.ics.hawaii.edu/pub/tr/ics-tr-97-11.ps.Z
Refering-URL: ftp://ftp.ics.hawaii.edu/pub/tr/INDEX.html
Root-URL: 
Email: dwyer@cis.ksu.edu  avrunin@math.umass.edu  corbett@hawaii.edu  
Title: Property Specification Patterns for Finite-State Verification  
Author: Matthew B. Dwyer George S. Avrunin James C. Corbett 
Keyword: Patterns, finite-state verification, formal specification, concurrent systems  
Address: 234 Nichols Hall Manhattan, KS 66506-2302  Box 34515 Amherst, MA 01003-4515  Honolulu, HI 96822  
Affiliation: Kansas State University Department of Computing and Information Sciences  University of Massachusetts Department of Mathematics and Statistics  University of Hawai`i Department of Information and Computer Science  
Abstract: Finite-state verification (e.g., model checking) provides a powerful means to detect errors that are often subtle and difficult to reproduce. Nevertheless, the transition of this technology from research to practice has been slow. While there are a number of potential causes for reluctance in adopting such formal methods in practice, we believe that a primary cause rests with the fact that practitioners are unfamiliar with specification processes, notations, and strategies. Recent years have seen growing success in leveraging experience with design and coding patterns. We propose a pattern-based approach to the presentation, codification and reuse of property specifications for finite-state verification. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Anderson, P. Beame, S. Burns, W. Chan, F. Mod-ugno, D. Notkin, and J. Reese. </author> <title> Model checking large software specifications. </title> <journal> Software Engineering Notes, </journal> <volume> 21(6) </volume> <pages> 156-166, </pages> <month> Nov. </month> <year> 1996. </year> <booktitle> Proceedings of the Fourth ACM SIGSOFT Symposium on the Foundations of Software Engineering. </booktitle>
Reference-contexts: The same appears true in formal specification languages for concurrent and reactive systems. While there are a number of very expressive formalisms, such as CTL* and the modal mu-calculus, the specifications that are documented in the literature, for example in <ref> [1, 6, 12,14,24,27] </ref>, appear relatively simple. They can be expressed fairly simply in existing specification formalisms and don't require advanced, complex features.
Reference: [2] <author> B. Appleton. </author> <title> Patterns and Software: Essential Concepts and Terminology. </title> <address> http://www.enteract.com/ ~bradapp/docs/patterns-intro.html, </address> <year> 1997. </year>
Reference-contexts: Patterns seek to generalize experience across multiple specific problems. Care must be taken, however, to keep patterns from being too abstract or removed from practice. A well-defined design pattern has the following characteristics <ref> [2] </ref>: It Solves a Specific Problem, or class of problems, rather than being an abstract principle or strategy. It is a Proven Concept that has been demonstrated to be effective in practice. The Solution isn't Obvious and is not a direct ap plication of basic principles.
Reference: [3] <author> G. Avrunin, U. Buy, J. Corbett, L. Dillon, and J. Wile-den. </author> <title> Automated analysis of concurrent systems with the constrained expression toolset. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(11) </volume> <pages> 1204-1222, </pages> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: Tool support is available for a variety of verification techniques including, for example, techniques based on model checking [23], bisimulation [8], language containment [18], flow analysis [15], and inequality necessary conditions <ref> [3] </ref>. In contrast to mechanical theorem proving, which often requires guidance by an expert, most finite-state verification techniques can be fully automated, thus relieving the user of the need to understand the inner workings of the verification process.
Reference: [4] <author> F. Buschmann, R. Meunier, H. Rohnert, P. Sommerlad, and M. Stal. </author> <title> Pattern-Oriented Software Architecture </title> - 
Reference-contexts: In addition, we might check the mappings of a given pattern for consistency by translating them into finite-state structures (e.g., using tableau or other algorithms) and comparing this common representation of their semantics. 8 CONCLUSIONS Patterns and the people who define them are characterized by an "aggressive disregard for originality" <ref> [4] </ref>. Patterns are not research; they are an expression of best-practice in a software domain. A pattern system does not belong to an individual, but to the community of experts and practitioners who contribute to and use it.
References-found: 4

