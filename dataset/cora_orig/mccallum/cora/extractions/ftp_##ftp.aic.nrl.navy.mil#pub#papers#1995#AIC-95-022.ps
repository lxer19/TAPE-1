URL: ftp://ftp.aic.nrl.navy.mil/pub/papers/1995/AIC-95-022.ps
Refering-URL: http://www.aic.nrl.navy.mil/~schultz/research/adap-testing/
Root-URL: 
Email: schultz@aic.nrl.navy.mil  
Phone: (202) 767-2684, fax (202) 767-3172  
Title: Applying Genetic Algorithms to the Testing of Intelligent Controllers  
Author: Alan C. Schultz, John J. Grefenstette, Kenneth A. De Jong 
Address: (Code 5514)  DC 20375-5000, U.S.A.  
Affiliation: Navy Center for Applied Research in Artificial Intelligence  Naval Research Laboratory, Washington,  
Abstract: Autonomous vehicles require sophisticated software controllers to maintain vehicle performance in the presence of vehicle faults. The test and evaluation of complex software controllers is a challenging task. The goal of this effort is to apply machine learning techniques to the general problem of evaluating an intelligent controller for an autonomous vehicle. The approach involves subjecting a controller to an adaptively chosen set of fault scenarios within a vehicle simulator, and searching for combinations of faults that produce noteworthy performance by the vehicle controller. The search employs a genetic algorithm. The evidence suggests that this approach is an effective supplement to manual and other forms of automated testing of sophisticated software controllers. Several intelligent controllers were tested in this project using several different genetic algorithm-based learning programs. Over the course of this research, the representation, evaluation function, genetic operators and the basic algorithm themselves evolved. This paper presents this work from the point of view of describing the process that the authors followed in applying these learning al gorithms to this real-world problem.
Abstract-found: 1
Intro-found: 1
Reference: <author> Appleby, B., Bonnice, W., and Bedrossian, N. </author> <year> (1990). </year> <title> "Robustness analysis methods for underwater vehicle control systems," </title> <booktitle> Proc. of the Symp. on Autonomous Underwater Vehicle Technology, </booktitle> <address> Washing-ton, DC, </address> <month> June </month> <year> 1990, </year> <journal> IEEE, </journal> <pages> pp. 74-80. </pages>
Reference-contexts: The controller may perform as specified, but the specifications may be incorrect; that is, the vehicle might not behave as expected. Testing all possible situations is obviously intractable due to the complexity of the system involved. Analysis techniques exist for testing the robustness of low-level controllers in isolation <ref> (e.g. Appleby 1990) </ref>, but the methods are not applicable to testing the vehicle as a whole. Traditional approaches to performance testing of controllers can be labor intensive and time consuming.
Reference: <author> Hartley, R. L. and Pipitone, F. J. </author> <year> (1991). </year> <title> "Experiments with the Subsumption Architecture," </title> <booktitle> Proceedings of the 1991 IEEE International Conference on Robotics and Automation, </booktitle> <address> Sacramento, CA, </address> <month> April </month> <year> 1991, </year> <pages> pp. 1652-1659. </pages>
Reference-contexts: The simulation includes the ability to control environmental conditions, in particular, constant wind and wind gusts. 4.1 Description of the vehicle controller The autonomous controller, which is responsible for flying the aircraft and performing the landing on the carrier deck, was designed using a subsumption architecture approach <ref> (Hartley 1991) </ref>. The controller is composed of individual behaviors, operating at different levels of abstraction, that communicate among themselves and together allow the aircraft to fly and to land. Top level behaviors include fly-craft and land-craft. At a lower level, behaviors include fly-heading and fly-altitude.
Reference: <author> Holland, J. H. </author> <year> (1975). </year> <title> Adaptation in Natural and Artificial Systems. </title> <publisher> Univ. Michigan Press, </publisher> <address> Ann Arbor, </address> <year> 1975. </year>
Reference: <author> Deb, K. and Goldberg, D. E. </author> <year> (1989). </year> <title> "An investigation of niche and species formation in genetic function optimization," </title> <booktitle> Proc. Third Intl. Conf. on Genetic Algorithms, </booktitle> <institution> George Mason University, Fairfax, VA, </institution> <month> June 4-7, </month> <year> 1989, </year> <pages> pp 42-50. </pages>
Reference: <author> De Jong, K. A. </author> <year> (1980). </year> <title> "Adaptive system design: a genetic approach." </title> <journal> IEEE Trans. Syst., Man, and Cyber., </journal> <volume> SMC-10(9), </volume> <pages> pp. 566-574, </pages> <year> 1980. </year>
Reference: <author> Grefenstette, J. J., Ramsey, Connie L. and Schultz, Alan C. </author> <year> (1990). </year> <title> "Learning sequential decision rules using simulation models and competition," </title> <journal> Machine Learning, </journal> <volume> 5(4), </volume> <pages> (pp. 355-381). </pages>
Reference-contexts: effort, which had already been instrumented with hooks for instantiating faults into the vehicle. 5.1 Use of Samuel learning system To support the anticipated scale up to more complex fault scenarios, and for better representation of temporal aspects of the fault scenarios, we started using the Samuel rule learning system <ref> (Grefenstette, Ramsey and Schultz 1990) </ref>. Samuel differs significantly from the earlier algorithm used in Phase 1 of the project. In particular, Samuel was designed to learn sequential decision rules for solving sequential decision problems. The rule representation was more appropriate for this domain.
Reference: <author> Grefenstette, J.J. </author> <year> (1991). </year> <title> "Lamarckian learning in multi-agent environments," </title> <booktitle> Proc. Fourth International Conference of Genetic Algorithms, </booktitle> <address> San Mateo, CA: </address> <publisher> Morgan Kaufmann, </publisher> <pages> 303-310. </pages>
Reference-contexts: One approach to accomplish this involved using Lamarckian operators in addition to the genetic operators. Operators, such as generalization and specialization are triggered when appropriate situations occur during a run. For more information on Lamarkian operators, see <ref> (Grefenstette 1991) </ref>. 5.4 Changes in the fitness function A measure of the vehicle controller's performance is calculated by CSDL based on the position of the vehicle with respect to the commands given to the controller (e.g. deviation from the commanded waypoint).
Reference: <author> Schultz, Alan C. </author> <year> (1991). </year> <title> "Using a genetic algorithm to learn strategies for collision avoidance and local navigation," </title> <booktitle> Proceedings of the Seventh International Symposium on Unmanned Untethered Submersible Technology, </booktitle> <month> September 23-25, </month> <year> 1991, </year> <institution> Durham, N.H. </institution>
Reference: <author> Schultz, Alan C. and Grefenstette, John J. </author> <year> (1992). </year> <title> "Using a genetic algorithm to learn behaviors for autonomous vehicles," </title> <booktitle> Proceedings of the of the AIAA Guidance, Navigation and Control Conference, </booktitle> <address> Hilton Head, SC, </address> <month> August 10-12, </month> <year> 1992. </year>
Reference: <author> Schultz, Alan C., Grefenstette, J. J., and De Jong, K. A. </author> <title> (1993) "Test and Evaluation by Genetic Algorithms," </title> <journal> IEEE Expert, v8, </journal> <volume> n5, </volume> <pages> 9-14, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: On the other hand, increased drag due to damage of the vehicle's body, cannot be undone and is modeled as a persistent fault. Details of the modeling of the faults can be found in <ref> (Schultz 1993) </ref>. 4.4 Trigger Conditions for the Faults In the initial experiments, there are 21 triggers (conditions) for each fault rule. Some of the triggers measure the state of the aircraft and others examine other fault conditions. <p> To find the second class of scenarios, those where despite maximal fault activity, the aircraft still manages to land well, we use the GA to minimize eval. 4.7 Results of Experiments in Phase One The results of the initial experiments can be found in <ref> (Schultz 1993) </ref>, and are summarized here. In all experiments, we used a population size of 100, and ran the GA for 100 generations resulting in 10,000 total evaluations. We first maximized the evaluation function to find several minimum-fault, maximum-failure scenarios on the simulator.
References-found: 10

