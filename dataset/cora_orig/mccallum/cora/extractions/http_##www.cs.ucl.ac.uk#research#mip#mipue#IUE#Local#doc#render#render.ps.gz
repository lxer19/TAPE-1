URL: http://www.cs.ucl.ac.uk/research/mip/mipue/IUE/Local/doc/render/render.ps.gz
Refering-URL: http://www.cs.ucl.ac.uk/research/mip/mipue/
Root-URL: http://www.cs.ucl.ac.uk
Email: Email: J.Schnabel@cs.ucl.ac.uk G.Bailey@cs.ucl.ac.uk  
Author: Julia A. Schnabel, Gavin Bailey and Simon R. Arridge 
Keyword: Image Understanding Environment (IUE), Medical Image Processing and Understanding Environment (MIPUE), volume rendering, Bresenham algorithm, ray tracing, medical image analysis.  
Address: Gower Street London WC1E 6BT, UK  
Affiliation: Department of Computer Science University College London  
Web: S.Arridge.cs.ucl.ac.uk URL: http://www.cs.ucl.ac.uk/research/mip/mipue/  
Note: Volume Rendering Implementation in the UK IUE Project  
Abstract: TR/98/2 Technical Report Abstract This report describes design issues, specification and implementation details of the concept of volume rendering in medical image processing as part of the UK IUE Project sponsored by EPSRC. For the DARPA funded Image Understanding Environment (IUE), general package information is provided by Amerinex Applied Imaging at URL http://www.aai.com/AAI/IUE/IUE.html, URL http://s10d.smb.man.ac.uk/IUE/IUE gate.html gives further general project information at the hub site at Manchester, and URL http://www.cs.ucl.ac.uk/research/mip/mipue/ provides local spoke project information, reference guides, and programs. This stage of the project has been partially reported as an MSc. thesis titled Volume Rendering in the IUE by Gavin Bailey [ 1 ] . This work has also been presented in [ 11 ] . The other two stages of this project are described in [ 9 ] and [ 10 ] . 
Abstract-found: 1
Intro-found: 1
Reference: [ 1 ] <author> G. Bailey. </author> <title> Volume rendering in the IUE. </title> <type> Master's thesis, </type> <institution> Department of Computer Science, University College London, </institution> <year> 1997. </year>
Reference-contexts: Process Objects The data object is processed on the basis of the following objects: Opacity lookup tables (LUT) and opacity functions [ 7 ] : The opacity LUT is used to calculate the opacity of voxels for the compositing, and requires storage of opacity gradient values ff (i) grad 2 <ref> [0; 1] </ref> associated with the respective voxel values (before scaling by the gradient), possibly as a 3d data structure of the entire dataset [ 6 ] . The opacity functions are responsible for generating the tables from user input. This enables to render a super-imposition of tissues of different densities. <p> A large amount of time of this project has been spent on designing or implementing classes which are planned, but not thoroughly designed or implemented yet in the IUE. As mentioned earlier, this project was designed to be carried out as an MSc. project <ref> [ 1 ] </ref> , within which it was fully designed and most of the code was generated. <p> In addition to this report, the MSc. theses about volume rendering in GLOOP [ 8 ] , and volume rendering in the IUE <ref> [ 1 ] </ref> provide an extensive overview about volume rendering in general, and their implementation details in GLOOP and the IUE. 5 Opinions and Conclusions The memory and timing analysis above revealed that the IUE rendering is at least two times as slow than the GLOOP implementation, and needs almost seven
Reference: [ 2 ] <author> J. Bradley. </author> <note> XV. Shareware, 1994. Available from ftp://ftp.cis.upenn.edu. </note>
Reference-contexts: To create RGB images using the scalar image, three scalar images can be generated for each of the component colours. Scalar images are saved using the fileformat.h task library function IUE PGM write image in PGM format. These images can be viewed using XV <ref> [ 2 ] </ref> . TR/98/2 Page 13 Volume Rendering Implementation in the UK IUE Project J.A. Schnabel, G. Bailey, and S.R.
Reference: [ 3 ] <author> J.D. Foley, A. van Damm, S.K. Feiner, and J.F. Hughes. </author> <title> Computer Graphics Principles and Practice. </title> <publisher> Addison Wesley, </publisher> <address> second edition, </address> <year> 1992. </year>
Reference-contexts: Several data structures are possible <ref> [ 3 ] </ref> , including spatial array voxels (conveniently indexed 3D structure, but expensive in terms of storage), octrees (of non-trivial traversal), run-length encoding (compact, but without random access), and marginal indexing (pointer based sparse representation; see figure 1).
Reference: [ 4 ] <author> GLOOP. </author> <title> Graphics Language by Object Oriented Programming. </title> <note> Information at http://www.cs.ucl.ac.uk/teaching/Gloop/Gloop.html. Maintained by Simon R. Arridge. </note>
Reference-contexts: The structure of this report follows the steps taken in designing and implementing the IUE volume renderer. This section gives an overview of volume rendering, covering the objects required for a generic renderer. It also details the design of the GLOOP renderer (an object-oriented graphics package developed at UCL <ref> [ 4 ] </ref> ), and describes how it is ported into the IUE class hierarchy. Section 2 presents a quantitative evaluation of the designed renderer, section 3 assesses the use of IUE classes, and section 4 describes the development environment and implementation problems encountered with the IUE. <p> This approach is used in [ 13 ] (where the context is the only object), as well as in <ref> [ 4 ] </ref> (which has a more object-oriented design) as will be discussed later. In [ 12 ] , a volume is assigned a structure containing the object properties, such as opacity, and another structure for the rendering function. <p> Multiple inheritance is used in cases such as Point3d, and it is evident that the objects do not derive from a single base object. Further details of the GLOOP Library and manuals are found in <ref> [ 4 ] </ref> . Central to the GLOOP renderer design is rendering time. The rendering context is confined to a single class Voxel Database, thereby reducing the degree to which class interfaces are used.
Reference: [ 5 ] <author> IUE. </author> <title> Image Understanding Environment. </title> <note> Information at http://www.aai.com/AAI/IUE/IUE.html. </note>
Reference-contexts: The classes identified during the design are of general use in volume rendering. 3.5 Desired or Recommended Changes Besides improving the initial installation and setup of the IUE, the code generation needs to be improved (a task which is currently undertaken by Amerinex Applied Imaging <ref> [ 5 ] </ref> ). In addition, volume rendering requires a good visualization, and, preferably, a good menu interaction for the user.
Reference: [ 6 ] <author> P. Lacroute. </author> <title> Fast Volume Rendering Using a Shear-Warp Factorization of the Viewing Transformation. </title> <type> PhD thesis and Technical Report CSL-TR-95-678, </type> <institution> Stanford University, </institution> <year> 1995. </year> <title> Information at http://www-graphics.stanford.edu/papers/lacroute thesis/gamma-corrected/. TR/98/2 Page 18 Volume Rendering Implementation in the UK IUE Project J.A. </title> <editor> Schnabel, G. Bailey, and S.R. </editor> <publisher> Arridge </publisher>
Reference-contexts: ] : The opacity LUT is used to calculate the opacity of voxels for the compositing, and requires storage of opacity gradient values ff (i) grad 2 [0; 1] associated with the respective voxel values (before scaling by the gradient), possibly as a 3d data structure of the entire dataset <ref> [ 6 ] </ref> . The opacity functions are responsible for generating the tables from user input. This enables to render a super-imposition of tissues of different densities.
Reference: [ 7 ] <author> M. Levoy. </author> <title> Display of surfaces from volume data. </title> <type> PhD thesis, </type> <institution> University of North Carolina at Chapel Hill, </institution> <year> 1989. </year>
Reference-contexts: It can be carried out linearly which may lead to jaggedness, or via averaging over neighbouring voxels which removes jaggedness, but is slower. 1.1.2 Process Objects The data object is processed on the basis of the following objects: Opacity lookup tables (LUT) and opacity functions <ref> [ 7 ] </ref> : The opacity LUT is used to calculate the opacity of voxels for the compositing, and requires storage of opacity gradient values ff (i) grad 2 [0; 1] associated with the respective voxel values (before scaling by the gradient), possibly as a 3d data structure of the entire <p> E.g. using piecewise linear mapping, voxels of value f vn are converted to opacity value ff vn , voxels of value f vn+1 are mapped to opacity value ff vn+1 , and intermediate voxel values to intermediate opacities using a voxel gradient dependent adjacency criterion <ref> [ 7 ] </ref> ). Shading LUTs and lighting functions: Parameters specifying the lighting model, and the lookup tables for gradient shading. Applying Phong's lighting model to the gradient of a voxel i, a voxel shade C (i) is obtained. <p> Fuzzy segmentation: Also simply referred to as volume rendering, a fuzzy segmentation is obtained by volumetric compositing, which is a blending of opacities and voxel shades along a viewing ray. This blending is approximated using visibility calculations for rendering a semi-transparent gel <ref> [ 7 ] </ref> . Each voxel's contribution to the final colour of the ray is determined in a recurrent fashion.
Reference: [ 8 ] <author> I. Petikas. </author> <title> Efficient algorithms for volume rendering of voxel structures. </title> <type> Master's thesis, </type> <institution> Department of Computer Science, University College London, </institution> <year> 1994. </year>
Reference-contexts: Interpolation requires the storage of the set of existing slices into a data TR/98/2 Page 1 Volume Rendering Implementation in the UK IUE Project J.A. Schnabel, G. Bailey, and S.R. Arridge structure, and assigning the new dimension to the data set's bounding box <ref> [ 8 ] </ref> . <p> The set of voxels is determined which contributes to the value of the pixel. This is referred to as ray traversal, and is here implemented as a 3D Bresenham algorithm, using initial and final points as parameters for a parametric ray equation <ref> [ 8 ] </ref> . 2. A rendering function is applied to the obtained voxel set, which may use the following voxel attributes as parameters: value, gradient, opacity, shade, colour, position (array index). Common ren dering functions fall under the following categories: Binary object segmentation: displays classified surface voxels. <p> This last function has no parameters since all voxel attributes are private members of Voxel Database. In this design the concept of a single object rendering context has been utilised. Individual rendering functions include threshold value, summation, region boundary contour surface and iso-value contour surface <ref> [ 8 ] </ref> . The latter functions obtain their opacity values using a pointer to opacity accessor function. 1.2.2 IUE Renderer Design The design of the IUE renderer follows the object-oriented methodology. <p> In addition to this report, the MSc. theses about volume rendering in GLOOP <ref> [ 8 ] </ref> , and volume rendering in the IUE [ 1 ] provide an extensive overview about volume rendering in general, and their implementation details in GLOOP and the IUE. 5 Opinions and Conclusions The memory and timing analysis above revealed that the IUE rendering is at least two times
Reference: [ 9 ] <author> J.A. Schnabel and S.R. Arridge. </author> <title> Scale-space implementation in the UK IUE project. </title> <type> Technical Report TR/98/1, </type> <institution> Department of Computer Science, University College London, </institution> <address> Gower Street, UK - London WC1E 6BT, </address> <year> 1998. </year> <note> Information at http://www.cs.ucl.ac.uk/research/mip/mipue/. </note>
Reference-contexts: The newly generated package and sub-package libraries are of the following hierarchy: libliue-mipue-base.so libliue-mipue-spatial-object.so libliue-mipue-axis-aligned-box.so libliue-mipue-point.so libliue-mipue-volume.so libliue-mipue-energy.so libliue-mipue-scene.so libliue-mipue-sensor.so The first one, libliue-mipue-base.so, contains besides the previously designed image diffusion class <ref> [ 9 ] </ref> the helper class IUE volume renderer general.
Reference: [ 10 ] <author> J.A. Schnabel and S.R. Arridge. </author> <title> Snake implementation in the UK IUE project. </title> <type> Technical Report TR/98/3, </type> <institution> Department of Computer Science, University College London, </institution> <address> Gower Street, UK - London WC1E 6BT, </address> <year> 1998. </year> <note> Information at http://www.cs.ucl.ac.uk/research/mip/mipue/. </note>
Reference-contexts: Additionally, the spatial object package contains the snake class designed in another stage of this project <ref> [ 10 ] </ref> . The libliue-mipue-energy.so package contains the IUE voxel lighting model, for which no further sub-package library was created.
Reference: [ 11 ] <author> J.A. Schnabel, G.Bailey, and S.R. Arridge. </author> <title> Volume rendering in the UK IUE project. </title> <booktitle> Presentation at the IUE users group meeting, </booktitle> <year> 1997. </year> <note> Slides are under http://www.cs.ucl.ac.uk/research/mip/mipue/IUE/Local/doc/render/present/. </note>
Reference: [ 12 ] <author> W. Schroeder, K. Martin, and B. Lorensen. </author> <title> The Visualization Toolkit. Prentice Hall, </title> <note> Information at http://www.cs.rpi.edu/martink/, second edition, </note> <year> 1997. </year>
Reference-contexts: The components of the VolPack volume rendering library [ 13 ] , and the Visualization Toolkit (VTK) <ref> [ 12 ] </ref> are good examples of extensible sets of rendering functions with a clear modular design. A simplification of this structure provides a generic standard against which the design possibilities of the IUE and GLOOP renderers can be compared. <p> This approach is used in [ 13 ] (where the context is the only object), as well as in [ 4 ] (which has a more object-oriented design) as will be discussed later. In <ref> [ 12 ] </ref> , a volume is assigned a structure containing the object properties, such as opacity, and another structure for the rendering function. Rendering the volume uses these structures in a true pipeline, offering a very flexible approach due to its modularity.
Reference: [ 13 ] <author> VolPack. </author> <title> Volume rendering library. Information at http://www-graphics.stanford.edu/software/volpack/. TR/98/2 Page 19 Volume Rendering Implementation in the UK IUE Project J.A. </title> <editor> Schnabel, G. Bailey, and S.R. </editor> <publisher> Arridge </publisher>
Reference-contexts: The components of the VolPack volume rendering library <ref> [ 13 ] </ref> , and the Visualization Toolkit (VTK) [ 12 ] are good examples of extensible sets of rendering functions with a clear modular design. A simplification of this structure provides a generic standard against which the design possibilities of the IUE and GLOOP renderers can be compared. <p> This approach is used in <ref> [ 13 ] </ref> (where the context is the only object), as well as in [ 4 ] (which has a more object-oriented design) as will be discussed later.
References-found: 13

