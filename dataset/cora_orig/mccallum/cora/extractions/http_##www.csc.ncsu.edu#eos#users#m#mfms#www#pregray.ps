URL: http://www.csc.ncsu.edu/eos/users/m/mfms/www/pregray.ps
Refering-URL: http://www.csc.ncsu.edu/eos/users/m/mfms/www/publications.html
Root-URL: http://www.csc.ncsu.edu
Title: On Embedding Binary Trees into Hypercubes  
Author: Woei-Kae Chen Matthias F.M. Stallmann 
Note: To appear in Journal on Parallel and Distributed Computing. Please direct all correspondence to Prof. Stallmann at the above address. This research was partially supported by the Office of Naval Research under contract N00014-88-K-0555, which is gratefully acknowledged.  
Date: Written: September, 1990. Revised: July 23, 1997  
Address: 3, Chung-Hsiao East Road Taipei, Taiwan Republic of China  Raleigh, NC 27695-8206  
Affiliation: Department of Electronic Engineering National Taipei Institute of Technology 1. Section  Department of Computer Science North Carolina State University  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> F. Afrati, C. Papadimitriou, and G. Papageorgiou, </author> <title> The complexity of cubical graphs, </title> <journal> Information and Control, </journal> <volume> 66 (1985), </volume> <pages> pp. 53 - 60. </pages>
Reference-contexts: However, Nebesky [11] showed that a complete binary tree can be embedded into a hypercube with either expansion 2 and dilation 1 or with expansion 1 and dilation 2 (in fact, only one edge in the complete binary tree is embedded in dilation 2). 4 Afrati et al. <ref> [1] </ref> describe a divide-and-conquer algorithm that gives dilation-1 em--beddings in a hypercube of dimension at most dk for trees having at most 2 k nodes and a maximum degree of d.
Reference: [2] <author> S. Bhatt and J.-Y. Cai, </author> <title> Take a walk, grow a tree, </title> <booktitle> in Proceedings 29th Annual Symposium on Foundations of Computer Science, </booktitle> <year> 1988, </year> <pages> pp. 469 - 478. </pages>
Reference-contexts: Monien and Sudborough [10] improved the result by giving an embedding of dilation 3 and expansion O (1) and an embedding of dilation 5 and expansion 1. Obviously, an embedding heuristic that guarantees a constant dilation also guarantees a constant average dilation. However, heuristics such as <ref> [2] </ref>, [4], and [10] were not designed with the average dilation metric in mind, and the average dilations obtained by them are not likely to be competitive. Also, it is desirable to have a simpler heuristic so that implementation is easier.
Reference: [3] <author> S. Bhatt and C. Leiserson, </author> <title> How to assemble tree machines, </title> <booktitle> in Advances in Computing Research 2, </booktitle> <editor> F. Preparata, ed., </editor> <publisher> JAI Press, </publisher> <year> 1984, </year> <pages> pp. 95 - 114. </pages>
Reference-contexts: Proof. See <ref> [3] </ref>. Given an n-vertex binary tree with n e even vertices and n o odd vertices, we can convert this binary tree to a balanced binary forest with the removal of no more than O (log n) edges as follows.
Reference: [4] <author> S. N. Bhatt, F. R. K. Chung, F. T. Leighton, and A. L. Rosenberg, </author> <title> Efficient embeddings of trees in hypercubes, </title> <journal> SIAM Journal on Computing, </journal> <volume> 21 (1992), </volume> <pages> pp. 151-162. </pages>
Reference-contexts: Wagner [12] improved this result by showing that any binary tree can be embedded into an O (n log n)-node hypercube in dilation 1. Bhatt et al. <ref> [4] </ref> first showed that any arbitrary binary tree can be embedded in a hypercube with O (1) dilation and O (1) expansion (the embedding also has O (1) congestion, a measure not discussed here). The constant factor of this embedding is too large to make it of practical interest. <p> Monien and Sudborough [10] improved the result by giving an embedding of dilation 3 and expansion O (1) and an embedding of dilation 5 and expansion 1. Obviously, an embedding heuristic that guarantees a constant dilation also guarantees a constant average dilation. However, heuristics such as [2], <ref> [4] </ref>, and [10] were not designed with the average dilation metric in mind, and the average dilations obtained by them are not likely to be competitive. Also, it is desirable to have a simpler heuristic so that implementation is easier. <p> Conclusions. This paper has shown that all binary trees can be embedded into hypercubes with expansion 1 and average dilation no more than 2. This is an improvement over known results given in <ref> [4] </ref> and [10] when average dilation is of interest. Our results also extend to arbitrary d-ary trees: all d-ary trees can be embedded into hypercubes with expansion 1 and average dilation no more than O (log d) | see [5]. <p> We further conjectured that all binary trees can be embedded into hypercubes with expansion 1 and average dilation approaching 1. So far known results on embedding binary trees into hypercubes such as <ref> [4] </ref>, [10], [12], and the strategy presented in this paper have not been able to match the lower bounds. We believe that further studies on the embeddings of balanced binary trees are the key to improving known results.
Reference: [5] <author> W.-K. Chen, </author> <title> Theoretical and Experimental Approaches for the Hypercube Embedding Problem, </title> <type> PhD thesis, </type> <institution> North Carolina State University, </institution> <year> 1991. </year>
Reference-contexts: Thus g (x) can be computed efficiently. What follows is a list of important properties of the Gray code, used in this paper. They can all be proved directly from the definition or by straightforward induction. 7 Readers who are interested in the proofs may refer to <ref> [5] </ref> for details. Fact 1. (cyclic) The Gray code sequence is cyclic, i.e., for any G k , d (g (x); g (y)) = 1, where 0 x 2 k 1 and y = (x + 1) mod 2 k . <p> This is an improvement over known results given in [4] and [10] when average dilation is of interest. Our results also extend to arbitrary d-ary trees: all d-ary trees can be embedded into hypercubes with expansion 1 and average dilation no more than O (log d) | see <ref> [5] </ref>. In addition, we showed that good embeddings of balanced binary trees can be extended to arbitrary binary trees.
Reference: [6] <author> W.-K. Chen and M. Stallmann, </author> <title> Local search variants for hypercube embedding, </title> <booktitle> in Proceedings Fifth Distributed Memory Computing Conference, </booktitle> <year> 1990, </year> <pages> pp. 1375 - 1383. </pages>
Reference-contexts: We believe that further studies on the embeddings of balanced binary trees are the key to improving known results. Our experiments with general purpose heuristics such as greedy [7] or local search <ref> [6] </ref> show that they do a good job of embedding binary trees. In fact they do better on average (on a 7-cube) than the preorder-Gray-code embedding. However, the preorder-Gray-code embedding has the advantage of being simple, efficient, and analyzable.
Reference: [7] <author> W.-K. Chen, M. Stallmann, and E. Gehringer, </author> <title> Hypercube embedding heuristics: An evaluation, </title> <journal> International Journal on Parallel Programming, </journal> <volume> 18 (1989), </volume> <pages> pp. 505-549. </pages>
Reference-contexts: For asynchronous algorithms, the average dilation (1=jEj) P fv; wg2E d (f (v); f (w)) is usually used (see <ref> [7] </ref> for comments on using average dilation as a cost measure). <p> We believe that further studies on the embeddings of balanced binary trees are the key to improving known results. Our experiments with general purpose heuristics such as greedy <ref> [7] </ref> or local search [6] show that they do a good job of embedding binary trees. In fact they do better on average (on a 7-cube) than the preorder-Gray-code embedding. However, the preorder-Gray-code embedding has the advantage of being simple, efficient, and analyzable.
Reference: [8] <author> I. </author> <title> Havel, On hamiltonian circuits and spanning trees of hypercubes, </title> <journal> Casopis pro Pestovani Matematiky, </journal> <volume> 109 (1984), </volume> <pages> pp. 135 - 152. </pages>
Reference-contexts: Also, it is desirable to have a simpler heuristic so that implementation is easier. This paper presents a simple linear-time embedding strategy called the preorder-Gray-code embedding. We will show that this strategy embeds arbitrary binary trees into hypercubes with expansion 1 and average dilation no more than 2. Havel <ref> [8] </ref> conjectured that all parity-balanced binary trees with 2 k vertices can be embedded perfectly (i.e., with dilation 1 and expansion 1) in a k-cube (the conjecture 5 has been proven for the special case of caterpillars [9]).
Reference: [9] <author> I. Havel and P. Liebl, </author> <title> One-legged caterpillars span hypercubes, </title> <journal> Journal of Graph Theory, </journal> <volume> 10 (1986), </volume> <pages> pp. 69 - 77. </pages>
Reference-contexts: Havel [8] conjectured that all parity-balanced binary trees with 2 k vertices can be embedded perfectly (i.e., with dilation 1 and expansion 1) in a k-cube (the conjecture 5 has been proven for the special case of caterpillars <ref> [9] </ref>). A parity-balanced tree is a tree in which the two bipartitions of the tree have the same number of vertices (recall that trees are bipartite; parity-balanced trees are also called color-balanced trees). For brevity's sake, we simply use "balanced" instead of "parity-balanced" in the remainder of the text.
Reference: [10] <author> B. Monien and I. Sudborough, </author> <title> Simulating binary trees on hypercubes, </title> <booktitle> in VLSI Algorithms and Architectures: 3rd Aegean Workshop on Computing, Lecture Notes in Computer Science 21 319, </booktitle> <publisher> Springer Verlag, </publisher> <year> 1988, </year> <pages> pp. 170 - 180. </pages>
Reference-contexts: The constant factor of this embedding is too large to make it of practical interest. Monien and Sudborough <ref> [10] </ref> improved the result by giving an embedding of dilation 3 and expansion O (1) and an embedding of dilation 5 and expansion 1. Obviously, an embedding heuristic that guarantees a constant dilation also guarantees a constant average dilation. However, heuristics such as [2], [4], and [10] were not designed with <p> Monien and Sudborough <ref> [10] </ref> improved the result by giving an embedding of dilation 3 and expansion O (1) and an embedding of dilation 5 and expansion 1. Obviously, an embedding heuristic that guarantees a constant dilation also guarantees a constant average dilation. However, heuristics such as [2], [4], and [10] were not designed with the average dilation metric in mind, and the average dilations obtained by them are not likely to be competitive. Also, it is desirable to have a simpler heuristic so that implementation is easier. This paper presents a simple linear-time embedding strategy called the preorder-Gray-code embedding. <p> Conclusions. This paper has shown that all binary trees can be embedded into hypercubes with expansion 1 and average dilation no more than 2. This is an improvement over known results given in [4] and <ref> [10] </ref> when average dilation is of interest. Our results also extend to arbitrary d-ary trees: all d-ary trees can be embedded into hypercubes with expansion 1 and average dilation no more than O (log d) | see [5]. <p> We further conjectured that all binary trees can be embedded into hypercubes with expansion 1 and average dilation approaching 1. So far known results on embedding binary trees into hypercubes such as [4], <ref> [10] </ref>, [12], and the strategy presented in this paper have not been able to match the lower bounds. We believe that further studies on the embeddings of balanced binary trees are the key to improving known results.
Reference: [11] <author> L. Nebesk y, </author> <title> On cubes and dichotomic trees, </title> <journal> Casopis pro Pestovani Matematiky, </journal> <volume> 99 (1974), </volume> <pages> pp. 164 - 167. </pages>
Reference-contexts: A binary tree is a tree in which the degree of every vertex is less than or equal to 3. The embedding of complete binary trees has been studied in <ref> [11, 13] </ref>. A complete binary tree with 2 k 1 vertices is not a subgraph of a k-cube [13]. <p> The embedding of complete binary trees has been studied in [11, 13]. A complete binary tree with 2 k 1 vertices is not a subgraph of a k-cube [13]. However, Nebesky <ref> [11] </ref> showed that a complete binary tree can be embedded into a hypercube with either expansion 2 and dilation 1 or with expansion 1 and dilation 2 (in fact, only one edge in the complete binary tree is embedded in dilation 2). 4 Afrati et al. [1] describe a divide-and-conquer algorithm <p> The embedding used for ^ T is an embedding for T with expansion e and dilation d + 1. The results of this section imply that Havel's conjecture is at least as strong as another well-known conjecture attributed to Nebesky <ref> [11] </ref>: every binary tree can be embedded with expansion 1 and dilation 2 and (using a different embedding) with dilation 1 and expansion 2.
Reference: [12] <author> A. Wagner, </author> <title> Embedding arbitrary binary trees in a hypercube, </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 7 (1989), </volume> <pages> pp. 503-520. </pages>
Reference-contexts: Wagner <ref> [12] </ref> improved this result by showing that any binary tree can be embedded into an O (n log n)-node hypercube in dilation 1. <p> There are at most O (log n) edges (the removed edges) embedded in unknown dilation. Since the diameter of the target hypercube for the embedding of T 0 is at most dlog (en)e and e is at most O (log n) <ref> [12] </ref>, T can be embedded with average dilation C + O (log (en) log n=n) = C + O ((log n) 2 =n). <p> We further conjectured that all binary trees can be embedded into hypercubes with expansion 1 and average dilation approaching 1. So far known results on embedding binary trees into hypercubes such as [4], [10], <ref> [12] </ref>, and the strategy presented in this paper have not been able to match the lower bounds. We believe that further studies on the embeddings of balanced binary trees are the key to improving known results.

References-found: 12

