URL: http://www.cs.indiana.edu/hyplan/ejohnson/papers/ics97/ics97.ps
Refering-URL: http://www.cs.indiana.edu/hyplan/ejohnson.html
Root-URL: http://www.cs.indiana.edu
Email: fejohnson,gannong@cs.indiana.edu  beckman@lanl.gov  
Title: HPC++: Experiments with the Parallel Standard Template Library  
Author: Elizabeth Johnson Dennis Gannon Peter Beckman 
Affiliation: Department of Computer Science, Indiana University  Advanced Computing Laboratory, Los Alamos National Laboratory  
Abstract: HPC++ is a C++ library and language extension framework that is being developed by the HPC++ consortium as a standard model for portable parallel C++ programming. This paper describes an initial implementation of the HPC++ Parallel Standard Template Library (PSTL) framework. This implementation includes seven distributed containers as well as selected algorithms. We include preliminary performance results from several experiments using the PSTL. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Agha. </author> <title> Actors. </title> <publisher> MIT Press, </publisher> <year> 1986. </year>
Reference-contexts: Several groups have joined to define standard library and language extensions for writing portable, parallel C++ applications. In Europe, the Europa consortium [16] has defined a model of parallel C++ computation based on Active Objects <ref> [1, 6, 8] </ref> and a meta-object protocol derived from the work on reflection in the programming language research community [12, 17]. In Japan, the Real World Computing Partnership has established the MPC++ programming system [11] which provides broad and powerful mechanisms for user-level extensions to a C++ compiler.
Reference: [2] <author> P. Beckman and D. Gannon. Tulip: </author> <title> A portable run-time system for object-parallel systems. </title> <booktitle> In Proceedings of the 10th International Parallel Processing Symposium, </booktitle> <month> April </month> <year> 1996. </year>
Reference-contexts: While HPC++ supports several execution models, the model for our implementation is Single Program, Multiple Data (SPMD). In this model, an HPC++ program launches a single thread of control in each context. We use Tulip <ref> [2] </ref>, a run-time system developed at Indiana University, as the basis for our RTS layer. This system runs on various machines including the IBM SP-2, SGI Power Challenge, and Cray T3D. It provides support for remote member function invocation and load/store operations on remote data.
Reference: [3] <author> William W. Carlson and Jesse M. Draper. </author> <title> Distributed data access in AC. </title> <booktitle> In Fifth ACM Sigplan Symposium on Principles and Practices of Parallel Programming, </booktitle> <year> 1995. </year>
Reference-contexts: A barrier is also included to provide synchronization for operations on distributed containers. The following sections describe the components of the run-time system. 3.1 Global Pointers and Global References Global pointers are based on the global type in languages like CC++ [4], AC <ref> [3] </ref> and Split-C [7]. A global pointer to an object of type T is defined as a templated class HPCxx_GlobalPtr&lt;T&gt; p; Global pointers can be passed between contexts to allow a processor to read and modify objects on a remote node.
Reference: [4] <author> K. Mani Chandy and Carl Kesselman. </author> <title> CC++: A declarative concurrent object-oriented programming notation, </title> <booktitle> 1993. In Research Directions in Concurrent Object Oriented Programming, </booktitle> <publisher> MIT Press. </publisher>
Reference-contexts: A barrier is also included to provide synchronization for operations on distributed containers. The following sections describe the components of the run-time system. 3.1 Global Pointers and Global References Global pointers are based on the global type in languages like CC++ <ref> [4] </ref>, AC [3] and Split-C [7]. A global pointer to an object of type T is defined as a templated class HPCxx_GlobalPtr&lt;T&gt; p; Global pointers can be passed between contexts to allow a processor to read and modify objects on a remote node.
Reference: [5] <author> C. Chang, A. Sussman, and J. Saltz. </author> <title> Object-oriented runtime support for complex distributed data structures. </title> <type> Technical Report UMIACS-TR-95-35, </type> <institution> University of Maryland Institute for Advanced Computer Studies and Department of Computer Science, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: The base class of all message classes, Mes-sageBase, is an abstract base class with two virtual functions: getSize and decipher. These functions are used in sending and unpacking each particular message type. The message objects are similar to the Mobile Objects defined in the CHAOS++ run-time library <ref> [5] </ref>. Each of these message classes is paired with a template function to be invoked by the application when a remote call is needed. This function instantiates a message object in the local context, packs the arguments, and sends the message to the appropriate remote context.
Reference: [6] <author> Andrew A. Chien. </author> <title> Concurrent Aggregates: Supporting Modularity in Massively-Parallel Programs. </title> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: Several groups have joined to define standard library and language extensions for writing portable, parallel C++ applications. In Europe, the Europa consortium [16] has defined a model of parallel C++ computation based on Active Objects <ref> [1, 6, 8] </ref> and a meta-object protocol derived from the work on reflection in the programming language research community [12, 17]. In Japan, the Real World Computing Partnership has established the MPC++ programming system [11] which provides broad and powerful mechanisms for user-level extensions to a C++ compiler.
Reference: [7] <author> D. Culler, A. Dusseau, S. Goldstein, A. Krishnamurthy, S. Lumetta, T. von Eicken, and K. Yelick. </author> <title> Parallel programming in Split-C. </title> <booktitle> In Supercomputing '93, </booktitle> <year> 1993. </year>
Reference-contexts: A barrier is also included to provide synchronization for operations on distributed containers. The following sections describe the components of the run-time system. 3.1 Global Pointers and Global References Global pointers are based on the global type in languages like CC++ [4], AC [3] and Split-C <ref> [7] </ref>. A global pointer to an object of type T is defined as a templated class HPCxx_GlobalPtr&lt;T&gt; p; Global pointers can be passed between contexts to allow a processor to read and modify objects on a remote node.
Reference: [8] <author> Wayne Fenton, Balkrishan Ramkumar, Vikram Sale-tore, Amitabh B. Sinha, and Laxmikant V. Kale. </author> <title> Supporting machine-independent parallel programming on diverse architectures. </title> <booktitle> In Proceedings of the 1991 International Conference on Parallel Processing, </booktitle> <year> 1991. </year>
Reference-contexts: Several groups have joined to define standard library and language extensions for writing portable, parallel C++ applications. In Europe, the Europa consortium [16] has defined a model of parallel C++ computation based on Active Objects <ref> [1, 6, 8] </ref> and a meta-object protocol derived from the work on reflection in the programming language research community [12, 17]. In Japan, the Real World Computing Partnership has established the MPC++ programming system [11] which provides broad and powerful mechanisms for user-level extensions to a C++ compiler.
Reference: [9] <author> Object Management Group. </author> <title> The Common Object Request Broker: Architecture and specification, </title> <month> July </month> <year> 1995. </year> <note> Revision 2.0. </note>
Reference-contexts: Level 1 of the HPC++ framework consists of the following parts: * parallel loop directives (to support single-context par allelism), * a parallel Standard Template Library, * a multidimensional array class, and, in the future, * a library for distributed active objects, * an interface to CORBA <ref> [9] </ref> via IDL mapping, and * a set of programming and performance analysis tools. The Parallel Standard Template Library (PSTL) is a parallel extension of the C++ Standard Template Library (STL). Distributed versions of the STL container classes are provided along parallel algorithms and parallel itera-tors.
Reference: [10] <institution> The HPC++ Working Group. </institution> <type> HPC++ White Papers. Technical Report TR 95633, </type> <note> Center for Research on Parallel Computation, </note> <year> 1995. </year>
Reference-contexts: In the United States, the HPC++ consortium has focused on extensions to standard C++ class libraries, compiler directives, and a few small language extensions to achieve the goal of portable parallel programming. The consortium is a diverse group, with representatives from industry, academia, and government laboratories <ref> [10] </ref>. In this paper, we describe an initial implementation of HPC++. This implementation is limited, but it does allow exploration of some of the ideas proposed by the HPC++ consortium.
Reference: [11] <author> Yutaka Ishikawa. </author> <title> Meta-level architecture for extendable C++ draft document. </title> <type> Technical Report TR-94024, </type> <institution> Real World Computing Partnership, </institution> <month> February </month> <year> 1995. </year>
Reference-contexts: In Japan, the Real World Computing Partnership has established the MPC++ programming system <ref> [11] </ref> which provides broad and powerful mechanisms for user-level extensions to a C++ compiler. In the United States, the HPC++ consortium has focused on extensions to standard C++ class libraries, compiler directives, and a few small language extensions to achieve the goal of portable parallel programming.
Reference: [12] <author> Gregor Kiczales, Jim des Rivieres, and Daniel G. Bo-brow. </author> <title> The Art of the Metaobject Protocol. </title> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: In Europe, the Europa consortium [16] has defined a model of parallel C++ computation based on Active Objects [1, 6, 8] and a meta-object protocol derived from the work on reflection in the programming language research community <ref> [12, 17] </ref>. In Japan, the Real World Computing Partnership has established the MPC++ programming system [11] which provides broad and powerful mechanisms for user-level extensions to a C++ compiler.
Reference: [13] <author> Scott Kohn and Scott Baden. </author> <title> Irregular coarse-grain data parallelism under LPARX. </title> <journal> Journal of Scientific Programming, </journal> <volume> 5(3) </volume> <pages> 185-202, </pages> <month> Fall </month> <year> 1996. </year>
Reference-contexts: Distributed versions of the STL container classes are provided along parallel algorithms and parallel itera-tors. These components are discussed in Section 4 below. HPC++ also includes another distributed container amul-tidimensional distributed array class based on A++ [18] and LPARX <ref> [13] </ref>. This array class supports element access via standard array indices as well as parallel random access it-erators, allowing use of STL and PSTL algorithms on the array class.
Reference: [14] <author> A. Malony, B. Mohr, P. Beckman, and D. Gannon. </author> <title> Program analysis and tuning tools for a parallel object oriented language: An experiment with the Tau system. </title> <booktitle> In Proceedings 1994 Los Alamos Workshop on Parallel Performance Tools, </booktitle> <year> 1994. </year>
Reference-contexts: In order to redistribute the data evenly, a redistribute operation is then done on the distributed vector. This moves elements from the single processor context and distributes them to the other processor contexts. The vector is then sorted using the PSTL sort algorithm, which is a parallel bitonic sort <ref> [14] </ref>. The anagram group finding portion of the algorithm is done in each context in a loop over the context's local elements.
Reference: [15] <author> David Musser and Atul Saini. </author> <title> STL Tutorial and Reference Guide. </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference-contexts: The basic problem is to determine the anagram groups (groups of words which are permutations of each other) in a dictionary. This problem is described in <ref> [15] </ref> as an example of STL use. The algorithm is as follows: 1. Read in words from dictionary. For each word, store it along with a key consisting of the word's letters sorted in alphabetical order. 2. Sort words in dictionary by their keys.
Reference: [16] <institution> The EUROPA Working Group on Parallel C++ Architecture SIG. </institution> <note> EC++ - EUROPA Parallel C++ Draft Definition. Unpublished manuscript, </note> <year> 1995. </year>
Reference-contexts: Several groups have joined to define standard library and language extensions for writing portable, parallel C++ applications. In Europe, the Europa consortium <ref> [16] </ref> has defined a model of parallel C++ computation based on Active Objects [1, 6, 8] and a meta-object protocol derived from the work on reflection in the programming language research community [12, 17].
Reference: [17] <author> Andreas Paepcke. </author> <title> Object-Oriented Programming: The CLOS Perspective. </title> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: In Europe, the Europa consortium [16] has defined a model of parallel C++ computation based on Active Objects [1, 6, 8] and a meta-object protocol derived from the work on reflection in the programming language research community <ref> [12, 17] </ref>. In Japan, the Real World Computing Partnership has established the MPC++ programming system [11] which provides broad and powerful mechanisms for user-level extensions to a C++ compiler.
Reference: [18] <author> Rebecca Parsons and Daniel Quinlan. </author> <title> Run-time recognition of task parallelism within the P++ parallel array class library. </title> <booktitle> In Proceedings of the Workshop of Scalable Parallel Libraries, </booktitle> <year> 1993. </year>
Reference-contexts: Distributed versions of the STL container classes are provided along parallel algorithms and parallel itera-tors. These components are discussed in Section 4 below. HPC++ also includes another distributed container amul-tidimensional distributed array class based on A++ <ref> [18] </ref> and LPARX [13]. This array class supports element access via standard array indices as well as parallel random access it-erators, allowing use of STL and PSTL algorithms on the array class.
Reference: [19] <author> Alexander Stepanov and Meng Lee. </author> <title> The Standard Template Library. </title> <type> Technical Report HPL-95-11, </type> <institution> Hewlett-Packard Laboratories, </institution> <month> January </month> <year> 1995. </year>
Reference-contexts: non-blocking calls, a mechanism, similar to the future class in ABC++ [22], supports subsequent access to return values from the remote function invocation. 2 4 Parallel Standard Template Library One of the major recent changes to the draft C++ standard has been the addition of the Standard Template Library (STL) <ref> [19] </ref>. The STL has five basic components. * Container class templates provide standard definitions for common aggregate data structures, including vec tor, list, deque, set and map. * Iterators generalize the concept of a pointer.
Reference: [20] <author> Bjarne Stroustrup. </author> <title> The C++ Programming Language, Second Edition. </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: 1 Introduction C++ <ref> [20] </ref> has become a standard programming language for desktop applications. Increasingly, it is being used in other areas including scientific and engineering applications, and there are dozens of research projects focused on designing parallel extensions for C++ [21].
Reference: [21] <author> Gregory Wilson and Paul Lu. </author> <title> Parallel Programming Using C++. </title> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: 1 Introduction C++ [20] has become a standard programming language for desktop applications. Increasingly, it is being used in other areas including scientific and engineering applications, and there are dozens of research projects focused on designing parallel extensions for C++ <ref> [21] </ref>. Several groups have joined to define standard library and language extensions for writing portable, parallel C++ applications.
Reference: [22] <author> Gregory Wilson and William O'Farrell. </author> <title> An introduction to ABC++. </title> <type> Unpublished manuscript, </type> <year> 1995. </year> <month> 8 </month>
Reference-contexts: A global pointer from the calling context is used for storing of the return value by the receiver. For non-blocking calls, a mechanism, similar to the future class in ABC++ <ref> [22] </ref>, supports subsequent access to return values from the remote function invocation. 2 4 Parallel Standard Template Library One of the major recent changes to the draft C++ standard has been the addition of the Standard Template Library (STL) [19].
References-found: 22

