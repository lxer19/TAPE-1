URL: http://sctest.cse.ucsc.edu/papers/1992/tcad.sat.ps
Refering-URL: http://www.cse.ucsc.edu/~larrabee/publications.html
Root-URL: http://www.cse.ucsc.edu
Title: Test Pattern Generation Using Boolean Satisfiability  
Author: Tracy Larrabee 
Abstract: This article describes the Boolean satisfiability method for generating test patterns for single stuck-at faults in combinational circuits. This new method generates test patterns in two steps: First, it constructs a formula expressing the Boolean difference between the unfaulted and faulted circuits. Second, it applies a Boolean satisfiability algorithm to the resulting formula. This approach differs from previous methods now in use, which search the circuit structure directly instead of constructing a formula from it. The new method is general and effective: it allows for the addition of heuristics used by structural search methods, and it has produced excellent results on popular test pattern generation benchmarks. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. B. Akers. </author> <title> On a theory of boolean functions. </title> <journal> Journal of the Society for Industrial and Applied Mathematics, </journal> <volume> 7, </volume> <year> 1959. </year>
Reference-contexts: This work was supported by a Digital Equipment Corporation Student Fellowship. 1 Once the formula using the Boolean difference is obtained, it is simplified using the basic laws of Boolean algebra or by using identities specific to the Boolean difference <ref> [1] </ref>. The tedious nature of the algebraic manipulations involved in solving formulas using the Boolean difference led to its disfavor as a practical tool for test pattern generation [12, 14, 11]. <p> We call the current prefix of V the sequence of bound values V [0], V <ref> [1] </ref>, : : : , V [i-1]. All elements of V greater than or equal to 0 and less than i are bound.
Reference: [2] <author> B. Aspvall, M. Plass, and R. Tarjan. </author> <title> A linear-time algorithm for testing the truth of certain quantified boolean formulas. </title> <journal> Information Processing Letters, </journal> <volume> 8 </volume> <pages> 121-123, </pages> <year> 1979. </year>
Reference-contexts: In practice we have found that 80% to 90% of the clauses are in 2CNF. The problem of satisfying a 2CNF formula, 2SAT, is satisfiable in time linear in the number of clauses plus the number of variables <ref> [2] </ref>. We may have an exponential number of 2SAT solutions, but we can use information from the ternary clauses to guide the iteration through the 2SAT assignments. 2.2.1 Using 2SAT to Solve SAT We use an algorithm from the 1970's for satisfying a 2CNF formula [2]. <p> plus the number of variables <ref> [2] </ref>. We may have an exponential number of 2SAT solutions, but we can use information from the ternary clauses to guide the iteration through the 2SAT assignments. 2.2.1 Using 2SAT to Solve SAT We use an algorithm from the 1970's for satisfying a 2CNF formula [2]. The first step is to construct an implication graph. Each 2CNF clause (X + Y) can be viewed as two implications: X ! Y and Y ! X .
Reference: [3] <author> F. Brglez and H. Fujiwara. </author> <title> A neutral netlist of 10 combinatorial benchmark circuits and a target translator in fortran. </title> <booktitle> In International Symposium on Circuits and Systems. IEEE, </booktitle> <month> June </month> <year> 1985. </year>
Reference-contexts: Nemesis, an ATPG system using the new method is quite practical: it correctly tests or proves untestable every fault in the ISCAS-85 (Brglez-Fujiwara) benchmark set <ref> [3] </ref>. 2 The Boolean Satisfiability Method To generate a test pattern for a single fault, first extract a formula that defines the set of test patterns that detect the fault and then use a Boolean satisfiability algorithm to satisfy the formula. 2.1 Extracting the Formula A directed acyclic graph represents the <p> Nemesis is written in C and runs on a Sun Sparcstation 1+. We used the ten sample circuits collected by Franc Brglez and Hideo Fujiwara and distributed at the 1985 ISCAS Conference as input to Nemesis <ref> [3] </ref>. We used the Tegas Description Language (TDL) version of the ISCAS circuits. Before test pattern generation begins, Nemesis translates the TDL into an internal form and produces a collapsed fault list. After wirelist translation and fault collapsing, two phases of test pattern generation follow: random and algorithmic.
Reference: [4] <author> S. A. Cook. </author> <title> The complexity of theorem proving procedures. </title> <booktitle> In Proceedings of the Third Anual ACM Symposium of Theory of Computing. ACM, </booktitle> <year> 1971. </year>
Reference-contexts: These redundancies will be helpful in finding a satisfying assignment for the formula. 2.2 Satisfying the Formula The problem of satisfying a CNF formula, SAT, is an NP-complete problem <ref> [4] </ref>. We have transformed one problem that in the worst case will take exponential time in the number of its circuit inputs into another 5 problem that in the worst case will take exponential time in the number of its variables.
Reference: [5] <author> M. Davis and H. Putman. </author> <title> A computing procedure for quantification theory. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 7 </volume> <pages> 201-215, </pages> <year> 1960. </year>
Reference-contexts: Many researchers have recognized that the average behavior of a SAT algorithm can be improved dramatically if the set of formulas to be solved fit a restricted profile <ref> [5, 15] </ref>. The set of formulas produced by combinational circuits fits such a restricted profile. At least two thirds of the clauses generated for the Boolean difference of a combinational circuit have only two disjuncts (are in 2CNF).
Reference: [6] <author> H. Fujiwara and T. Shimono. </author> <title> On the acceleration of test generation algorithms. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-31:1137-1144, </volume> <year> 1983. </year>
Reference-contexts: The most successful ATPG systems use structural search methods. Of these, the most notable are the D-algorithm, Podem, FAN, and Socrates <ref> [6, 7, 16, 17] </ref>. Instead of performing a search on a data structure representing a circuit, algebraic methods produce an equation describing all possible tests for a particular fault and then simplify the resulting equation. The most famous algebraic method is the Boolean difference method. <p> That is, we can derive that if B is active, F must be active. Many authors of structural search ATPG systems place great importance on preprocessing the circuit structure to derive the unique sensitization points (points of total reconvergence) in the circuit <ref> [6, 17] </ref>, but such a preprocessing step is not necessary for us. In the process of finding an active path, our satisfier will always find all the unique sensitization points without explicitly searching for them.
Reference: [7] <author> P. Goel. </author> <title> An implicit enumeration algorithm to generate tests for combinational logic circuits. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-31:215-222, </volume> <year> 1981. </year>
Reference-contexts: The most successful ATPG systems use structural search methods. Of these, the most notable are the D-algorithm, Podem, FAN, and Socrates <ref> [6, 7, 16, 17] </ref>. Instead of performing a search on a data structure representing a circuit, algebraic methods produce an equation describing all possible tests for a particular fault and then simplify the resulting equation. The most famous algebraic method is the Boolean difference method.
Reference: [8] <author> T. Larrabee. </author> <title> Efficient generation of test patterns using boolean difference. </title> <booktitle> In Proceedings of the International Test Conference. IEEE, </booktitle> <month> August </month> <year> 1989. </year> <note> Also available as part of Digital Equipment Corporation Western Research Lab Research Report WRL-90/3. </note>
Reference-contexts: The Boolean satisfiability method is a new algorithm for test pattern generation for single stuck-at faults in combinational circuits that is neither a purely structural method nor an algebraic one <ref> [8, 9] </ref>. This method is not only practical but performs better than most systems now in use. Before describing the Boolean satisfiability method in detail we will briefly review the two classes of existing methods. Structural search methods use a data structure representing the circuit to be tested.
Reference: [9] <author> T. Larrabee. </author> <title> A framework for evaluating test pattern generation strategies. </title> <booktitle> In Proceedings of the International Conference on Computer Design. IEEE, </booktitle> <month> October </month> <year> 1989. </year> <note> Also available as part of Digital Equipment Corporation Western Research Lab Research Report WRL-90/3. </note>
Reference-contexts: The Boolean satisfiability method is a new algorithm for test pattern generation for single stuck-at faults in combinational circuits that is neither a purely structural method nor an algebraic one <ref> [8, 9] </ref>. This method is not only practical but performs better than most systems now in use. Before describing the Boolean satisfiability method in detail we will briefly review the two classes of existing methods. Structural search methods use a data structure representing the circuit to be tested. <p> In this section we will describe how we translate several structural search heuristics into modifications to the basic Nemesis system described in Section 2. The effect that these modifications have on the efficiency of the base level system is described in detail in a previous publication <ref> [9, 10] </ref>. Each of the heuristics we will discuss is implemented in our system by adding to or subtracting from the formula to be satisfied. By adding or subtracting clauses we can avoid portions of the search tree.
Reference: [10] <author> T. Larrabee. </author> <title> Efficient Generation of Test Patterns Using Boolean Satisfiability. </title> <type> PhD thesis, </type> <institution> Stan-ford University, </institution> <year> 1990. </year> <note> Also available as Stanford Technical Report STAN-CS-90-1302 and as Digital Equipment Corporation Western Research Lab Research Report WRL-90/2. </note>
Reference-contexts: In this section we will describe how we translate several structural search heuristics into modifications to the basic Nemesis system described in Section 2. The effect that these modifications have on the efficiency of the base level system is described in detail in a previous publication <ref> [9, 10] </ref>. Each of the heuristics we will discuss is implemented in our system by adding to or subtracting from the formula to be satisfied. By adding or subtracting clauses we can avoid portions of the search tree.
Reference: [11] <author> E. J. </author> <title> McCluskey. </title> <booktitle> Logic Design Principles. </booktitle> <publisher> Prentice-Hall Publishing, </publisher> <year> 1986. </year>
Reference-contexts: The tedious nature of the algebraic manipulations involved in solving formulas using the Boolean difference led to its disfavor as a practical tool for test pattern generation <ref> [12, 14, 11] </ref>. The Boolean satisfiability method generates a formula equivalent to that of the Boolean difference method, but instead of performing symbol manipulation, it runs a Boolean Satisfiability algorithm on the formula.
Reference: [12] <author> A. Miczo. </author> <title> Digital Logic Testing and Simulation. </title> <publisher> Harper and Row, Publishers, </publisher> <year> 1986. </year>
Reference-contexts: The tedious nature of the algebraic manipulations involved in solving formulas using the Boolean difference led to its disfavor as a practical tool for test pattern generation <ref> [12, 14, 11] </ref>. The Boolean satisfiability method generates a formula equivalent to that of the Boolean difference method, but instead of performing symbol manipulation, it runs a Boolean Satisfiability algorithm on the formula.
Reference: [13] <author> H. B Min and W. A. Rogers. </author> <title> Search strategy switching: An alternative to increased backtracking. </title> <booktitle> In Proceedings of the International Test Conference. IEEE, </booktitle> <year> 1989. </year>
Reference-contexts: In Section 2.2 we explained how we use a metric to determine the order of variable assignment. In fact, we do not use one metric, we use three. Like others who produce ATPG systems <ref> [13] </ref>, we have noted that independent search strategies are often effective on different classes of faults. To use the terminology of Min and Rogers, search strategies that have largely disjoint solution sets (with a given search or backtrack limit) are called orthogonal search strategies.
Reference: [14] <author> D. K. Pradhan. </author> <title> Fault-Tolerant Computing Theory and Techniques. </title> <publisher> Prentice-Hall Publishing, </publisher> <year> 1986. </year>
Reference-contexts: The tedious nature of the algebraic manipulations involved in solving formulas using the Boolean difference led to its disfavor as a practical tool for test pattern generation <ref> [12, 14, 11] </ref>. The Boolean satisfiability method generates a formula equivalent to that of the Boolean difference method, but instead of performing symbol manipulation, it runs a Boolean Satisfiability algorithm on the formula.
Reference: [15] <author> P. W. Jr. Purdom and C. A. Brown. </author> <title> Evaluating search methods analytically. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <pages> pages 124-127, </pages> <year> 1982. </year>
Reference-contexts: Many researchers have recognized that the average behavior of a SAT algorithm can be improved dramatically if the set of formulas to be solved fit a restricted profile <ref> [5, 15] </ref>. The set of formulas produced by combinational circuits fits such a restricted profile. At least two thirds of the clauses generated for the Boolean difference of a combinational circuit have only two disjuncts (are in 2CNF).
Reference: [16] <author> J. P. Roth. </author> <title> Diagnosis of automata failures: A calculus and a method. </title> <journal> IBM Journal of Research and Development, </journal> <volume> 10 </volume> <pages> 278-291, </pages> <year> 1966. </year>
Reference-contexts: The most successful ATPG systems use structural search methods. Of these, the most notable are the D-algorithm, Podem, FAN, and Socrates <ref> [6, 7, 16, 17] </ref>. Instead of performing a search on a data structure representing a circuit, algebraic methods produce an equation describing all possible tests for a particular fault and then simplify the resulting equation. The most famous algebraic method is the Boolean difference method. <p> Non-local implications are vital when it comes to processing difficult faults. 3.1.2 Active Clauses When the D-algorithm was introduced, Roth concentrated on trying to get a discrepancy to a circuit output <ref> [16] </ref>. We can modify our formula so that the explicit need for a sensitized path can be used to speed up the satisfier.
Reference: [17] <author> M. H. Schulz, E. Trischler, and T. M. Sarfert. Socrates: </author> <title> A highly efficient automatic test pattern generation system. </title> <journal> IEEE Transactions on CAD, </journal> <pages> pages 126-137, </pages> <month> January </month> <year> 1988. </year>
Reference-contexts: The most successful ATPG systems use structural search methods. Of these, the most notable are the D-algorithm, Podem, FAN, and Socrates <ref> [6, 7, 16, 17] </ref>. Instead of performing a search on a data structure representing a circuit, algebraic methods produce an equation describing all possible tests for a particular fault and then simplify the resulting equation. The most famous algebraic method is the Boolean difference method. <p> Adding this kind of derivable information can speed up the satisfier by an order of magnitude. 3.1.1 Non-local Implications As noted by the designers of the SOCRATES system, it is possible to explicitly derive non-local implications by examining the reconvergent fanout in a circuit <ref> [17] </ref>. In Figure 12, we see that if line B has the value 1, line F has the value 1; conversely, if line F has the value 0, line B has the value 0. <p> That is, we can derive that if B is active, F must be active. Many authors of structural search ATPG systems place great importance on preprocessing the circuit structure to derive the unique sensitization points (points of total reconvergence) in the circuit <ref> [6, 17] </ref>, but such a preprocessing step is not necessary for us. In the process of finding an active path, our satisfier will always find all the unique sensitization points without explicitly searching for them.
Reference: [18] <author> J. A. Waicukauski, E. B. Eichelberger, D. O. Forlenza, E. Lindbloom, and T. McCarthy. </author> <title> Fault simulation for structured VLSI. VLSI Design, </title> <address> VI:20-32, </address> <year> 1985. </year> <month> 19 </month>
Reference-contexts: The first phase of test pattern generation is the random phase: We use the logic word operations of the computer to simulate 32 pseudo-random patterns against one target fault. The simulator is modeled after the parallel-pattern, single fault propagation (PPSFP) simulator reported by Waicukaski et. al. <ref> [18] </ref>. In this way we generate patterns for the easily tested faults (generally 80% to 99% of the total faults). When one complete PPSFP pass produces fewer than a predetermined number of patterns (currently two), the second phase, algorithmic pattern generation, begins.
References-found: 18

