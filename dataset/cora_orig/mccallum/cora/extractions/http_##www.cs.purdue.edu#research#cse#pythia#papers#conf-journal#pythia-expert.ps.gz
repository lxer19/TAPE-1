URL: http://www.cs.purdue.edu/research/cse/pythia/papers/conf-journal/pythia-expert.ps.gz
Refering-URL: http://www.cs.purdue.edu/research/cse/pythia/pythia-papers.html
Root-URL: http://www.cs.purdue.edu
Title: Knowledge Discovery in Computational Science: A Case Study in Algorithm Selection  
Author: N. Ramakrishnan, J.R. Rice and E.N. Houstis 
Keyword: Computational Science, Problem Solving Environments, Knowledge Discovery, Data Mining, Algorithm Selection, Feature Determination  
Address: West Lafayette, IN 47906  
Affiliation: Department of Computer Sciences Purdue University,  
Abstract: Computational Science is an interdisciplinary field that addresses all aspects of science and engineering that utilize computing as their main tool. One important research issue in computational science is the selection of appropriate algorithms for solving particular problems. In other words, given a problem and some performance objectives (speed, accuracy, cost etc.), one is to select the best (or nearly best) algorithm. In this paper we formulate these issues, illustrate the general methodology and present new techniques for the domain of numerical quadrature. Our technique uses a combination of inductive logic programming, symbolic and numeric identification of problem features and a repository of algorithm performance data to map problems plus performance objectives to appropriate algorithms. We discuss how this selection problem is closely related to knowledge discovery and data mining in particular problem domains. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H.A. Abelson, M. Eisenberg, M. Halfant, J. Katzenelson, E. Sacks, G.J. Sussman, J. Wisdom, and K. </author> <title> Yip. </title> <journal> Intelligence in Scientific Computing. Communications of the ACM, </journal> <volume> 32(5) </volume> <pages> 546-562, </pages> <month> May, </month> <year> 1989. </year>
Reference-contexts: Further applications abound in biology, astronomy, physics and graph theory. A comprehensive summary of early computer science research on scientific discovery is provided in [10]. Recently, applications have demonstrated considerable expertise in catalytic chemistry, particle physics and cell biology. Qualitative analysis of dynamical systems has been undertaken in <ref> [1] </ref> | the approach taken is to automate most routine tasks in numerical modeling and to exploit techniques like imagistic reasoning and computer vision to make programs `see' what to compute and how to compute it. <p> In particular, representational schemas motivated by a certain field of science were found to offer valuable insights into a completely different domain. A case in point is the opinion <ref> [1] </ref> that problem solvers employing visual or diagrammatic representations are more efficient than those relying on purely linguistic or symbolic paradigms. <p> The location of the singularities of f (4) Are there singularities of the derivatives of f? (5) The location of the singularities of f 0 (6) Does f have end-point singularities? This is determined by checking the derivative of f at the limits of the domain of integration. 14 Out <ref> [1] </ref>= The function has a disc. at 2 (x). Lt (x^2 + 2 x + 4) = 12 Since the limit exists, this is a removable discontinuity. At other points, this function can be expressed as (x^2 + 2 x + 4). <p> However, there exist occasions when a domain 20 needs to be split up and different methods used to evaluate the integrals at different sub-intervals. Such `composite' rules can be included in this approach. |In research on similar lines, Abelson et al., <ref> [1] </ref>, have shown how their systems for intelligent scientific computing automatically construct numerical procedures through liberal use of high-order procedural abstractions. This methodology would be appropriate for our domain. A potential system could `chain' together necessary routines to determine features of functions.
Reference: [2] <author> I. Bratko and S. Muggleton. </author> <title> Applications of Inductive Logic Programming. </title> <journal> Communications of the ACM, </journal> <volume> 38(11) </volume> <pages> 65-70, </pages> <month> November, </month> <year> 1995. </year>
Reference-contexts: Lt (x^2 + 2 x + 4) = 12 Since the limit exists, this is a removable discontinuity. At other points, this function can be expressed as (x^2 + 2 x + 4). In <ref> [2] </ref> := AFD [Sin [x]/x] The function has a disc. at 0 (x). Lt Sin [x] x -&gt; 0 x Since the limit exists, this is a removable discontinuity. In [3]:= AFD [Sin [(1/x)]] The function has a disc. at 0 (x). <p> All features determined by these three means are encoded as logic rules in GAUSS. 4.4 The "Expert" Methodology The approach in GAUSS is a highly knowledge intensive one. Its paradigm of learning is inductive logic programming <ref> [2] </ref>, a classical technique that has recently seen a resurgence of interest, mainly due to reports of successful developments and applications. Background knowledge is represented as a set of predicate definitions and positive and negative examples.
Reference: [3] <author> P. J. Davis and P. Rabinowitz. </author> <title> Methods of Numerical Integration. </title> <publisher> Academic Press, </publisher> <address> Orlando, Florida, </address> <year> 1984. </year> <note> Second Edition. </note>
Reference-contexts: Numerical quadrature/integration <ref> [3] </ref> is an approximate technique for evaluating definite integrals wherein the integral is approximated by (in most cases) a linear combination of the values of the integrand: Z b f (x)dx w 1 f (x 1 ) + w 2 f (x 2 ) + + w n f (x n <p> At other points, this function can be expressed as (x^2 + 2 x + 4). In [2] := AFD [Sin [x]/x] The function has a disc. at 0 (x). Lt Sin [x] x -&gt; 0 x Since the limit exists, this is a removable discontinuity. In <ref> [3] </ref>:= AFD [Sin [(1/x)]] The function has a disc. at 0 (x). Lt 1 x -&gt; 0 x does not exist. Since the limit does not exist, this is a non-removable discontinuity. Fig. 6: Symbolic analysis of three functions in the AFD module of GAUSS.
Reference: [4] <author> E. Gallopoulos, E. Houstis, and J.R. Rice. </author> <title> Computer as Thinker/Doer: Problem-Solving Environments for Computational Science. </title> <journal> IEEE Computational Science and Enginerring, </journal> <volume> vol.1(2):pp.11-23, </volume> <year> 1994. </year>
Reference-contexts: In this paper, we specifically concentrate on automatic algorithm selection techniques | efficient schemes that guide the user from a high-level specification of a scientific problem to a solution satisfying his performance requirements. Efficient algorithm selection systems also aid in the creation of Problem Solving Environments (PSEs) <ref> [4] </ref> which are high-level environments for CS&E. A PSE is a computer system that provides all the computational facilities necessary to solve a target class of problems.
Reference: [5] <author> A. Joshi, S. Weerawarana, N. Ramakrishnan, E.N. Houstis, and J.R. Rice. </author> <title> Neuro-Fuzzy Support for PSEs: A Step Toward the Automated Solution of PDEs. </title> <journal> IEEE Computational Science and Enginerring, </journal> <volume> vol.3(1):pp.44-56, </volume> <year> 1996. </year>
Reference-contexts: If the domain does not exhibit any kind of regularities, one will have to introduce an unreasonable number of classes to represent the domain. Our studies have shown that specialized schemes 6 tailored for classification in scientific domains <ref> [5] </ref> fare better than general-purpose algorithms. The automatic inference of such classes is another research issue that our group is working on. This is also known as clustering or unsupervised learning in the statistical learning parlance. <p> We utilize a conventional three layer feed forward neural network and train it by an algorithm that our group has devised. This is a neuro-fuzzy classification algorithm for neural networks and has been shown to produce results comparable to benchmark methods such as RProp, C4.5, etc. <ref> [5] </ref>. Moreover, our algorithm handles mutually non-exclusive categories that are very common in scientific domains, i.e., one `pattern' can belong to more than one category at the same time. The 16 Fig. 7. Plots of functions that are `similar-looking' total number of functions `plotted' was 1000. <p> These results seem to indicate favorably toward the use of ILP modules like Golem. The difference between our earlier approaches <ref> [5] </ref> and this is that the newer method is highly knowledge intensive and, more importantly, uses relational descriptions of objects to influence the decision making process. In our earlier approaches, the background knowledge about the domain could be expressed in only a limited form.
Reference: [6] <author> E. Kant, R. Keller, and S. Steinberg. </author> <booktitle> Working Notes of the AAAI Fall Symposium on Intelligent Scientific Computation. American Association for Artificial Intelligence, 1992. </booktitle> <address> Cambridge, Massachusetts. </address>
Reference-contexts: A recent AAAI Symposium on "Intelligent Scientific Computation" <ref> [6] </ref> highlights the contributions made by AI to Scientific Computing (and vice versa). With more scientific data getting organized into huge databases and repositories, the fields of KDD (Knowledge Discovery in Databases) and data mining have contributed to many discoveries in science.
Reference: [7] <author> J.R. Rice. </author> <title> A Metalgorithm for Adaptive Quadrature. </title> <journal> Journal of the ACM, </journal> <volume> vol.22(1):pp.61-82, </volume> <year> 1973. </year>
Reference-contexts: There are numerous practical situations that produce data in this form the results of sampling experimentally observed data, for example. This problem is further complicated by the multitude of adaptive algorithms applicable to certain problems. An interesting study by Rice <ref> [7] </ref> concludes that there are between 1 and 10 million adaptive quadrature algorithms that are potentially interesting and significantly different from one another!! This staggering number arises from the possible ways of permuting the choice of rules, processor components, error bounds, data structures, etc.
Reference: [8] <author> J.R. Rice. </author> <title> The Algorithm Selection Problem. </title> <booktitle> Advances in Computers, </booktitle> <address> 15:pp.65-118, </address> <year> 1976. </year>
Reference-contexts: THE ALGORITHM SELECTION PROBLEM The algorithm selection problem has its origins in an early paper by Rice <ref> [8] </ref>. Given a problem in scientific computation and performance criteria constraints on its solution (such as accuracy, time, cost, etc.), it is required to decide on a good (enough) algorithm to achieve the desired objectives. Even for `routine' tasks in scientific computing, this can get quite complicated. <p> Even for `routine' tasks in scientific computing, this can get quite complicated. An abstract model for this problem is also proposed in <ref> [8] </ref>. The salient features of this model are reproduced in Fig. 1, where p is the problem given and w are the performance criteria. The problem p is `represented' by the feature (s) f in the feature space. The task is 5 Fig. 1.
Reference: [9] <author> R.E. Valdes-Perez. </author> <title> Generic Tasks of Scientific Discovery. </title> <booktitle> Working Notes of AAAI Spring Symposium on Systematic Methods of Scientific Discovery, </booktitle> <year> 1995. </year>
Reference-contexts: A more elaborate discussion of these tasks of scientific discovery (albeit in the context of theoretical and experimental science) is provided in <ref> [9] </ref>. In this paper, we specifically concentrate on automatic algorithm selection techniques | efficient schemes that guide the user from a high-level specification of a scientific problem to a solution satisfying his performance requirements. <p> This is achieved by a small amount of background domain knowledge and a judicious choice of heuristics that guide the search into `interesting territories'. At the other end of the spectrum, Valdes-Perez <ref> [9] </ref> argues that successful scientific discovery is more likely to be facilitated by a change in the task representation of the problem space. In particular, representational schemas motivated by a certain field of science were found to offer valuable insights into a completely different domain.
Reference: [10] <author> R.E. Valdes-Perez. </author> <note> Computer Science Research on Scientific Discovery. Knowledge Engineering Review, vol.11(1):pp.57-66, </note> <year> 1996. </year>
Reference-contexts: Systems have been developed for performing analytical differentiation, discovering logic proofs, validating theorems in geometry and unraveling molecular structures. Further applications abound in biology, astronomy, physics and graph theory. A comprehensive summary of early computer science research on scientific discovery is provided in <ref> [10] </ref>. Recently, applications have demonstrated considerable expertise in catalytic chemistry, particle physics and cell biology.
References-found: 10

