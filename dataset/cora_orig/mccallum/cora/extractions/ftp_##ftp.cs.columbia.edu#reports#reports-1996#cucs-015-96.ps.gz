URL: ftp://ftp.cs.columbia.edu/reports/reports-1996/cucs-015-96.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1996.html
Root-URL: http://www.cs.columbia.edu
Title: Architectures for Federation of Process-Centered Environments  
Author: Israel Z. Ben-Shaul Gail E. Kaiser Z. Ben-Shaul and Gail E. Kaiser 
Keyword: Collaborative work, Distributed system, Enterprise-wide process, Geographical distribution, Internet, Software process, Workflow management  
Note: c fl1996, Israel  
Address: City, Haifa 32000 New York, NY 10027 ISRAEL UNITED STATES  
Affiliation: Technion-Israel Institute of Technology Columbia University Department of Electrical Engineering Department of Computer Science Technion  
Pubnum: CUCS-015-96  
Email: issy@ee.technion.ac.il kaiser@cs.columbia.edu  
Phone: phone +972-4-8294680 212-939-7081 fax +972-4-8323041 212-666-0140  
Date: May 6, 1996  
Abstract: We describe two models for federating process-centered environments, homogeneous federation where the interoperability is among distinct process models enacted by different copies of the same system and heterogeneous federation with interoperability among distinct process enactment systems. We identify the requirements and possible architectures for each model. The bulk of the paper presents the specific architecture and infrastructure for homogeneous federation we realized in the Oz system. We briefly consider how Oz might be integrated into a heterogeneous federation to serve as one of its interoperating PCEs. This paper is based on work sponsored in part by Advanced Research Project Agency under ARPA Order B128 monitored by Air Force Rome Lab F30602-94-C-0197, in part by National Science Foundation CCR-9301092, and in part by the New York State Science and Technology Foundation Center for Advanced Technology in High Performance Computing and Communications in Healthcare NYSSTF-CAT-95013. The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of the US or NYS government, ARPA, Air Force, NSF, or NYSSTF. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Alonso, D. Agrawal, A. El Abbadi, C. Mohan, R. Gunthor, and Mohan U. Kamath. Exotica/FMQM: </author> <title> A persistent message-based architecture for distributed workflow management. </title> <booktitle> In IFIP WG 8.1 Workgroup Conference on Information Systems Development for Decentralized Organizations, </booktitle> <address> Trondheim, Norway, </address> <month> August </month> <year> 1995. </year>
Reference-contexts: We note that the Web might serve as a desirable infrastructure for any of the decentralized classes outlined here, but further elaboration is beyond the scope of this work. 4. Decentralized process enactment and decentralized task execution. Merlin [51] and several transactional workflow systems, such as Exotica <ref> [1] </ref>, operate in a fully distributed manner | the former by divying up the process among user clients and the latter by expressing the workflow implicitly in a network of task managers that interact only with their predecessors and successors in the workflow routing.
Reference: [2] <author> John E. Arnold and Steven S. Popovich. </author> <title> Integrating, customizing and extending environments with a message-based architecture. </title> <type> Technical Report CUCS-008-95, </type> <institution> Columbia University, Department of Computer Science, </institution> <month> September </month> <year> 1994. </year> <note> The research described in this report was conducted at Bull HN Information Systems, </note> <institution> Inc. </institution>
Reference-contexts: Evaluation against the heterogeneous federation requirements and lessons learned should prove interesting. One area of current research by ourselves and others is federation of process-centered environments and computer-supported cooperative work (or "groupware") systems; see, e.g., <ref> [16, 2] </ref>. This should be followed by hybrid federations mixing and matching multiple PCE and CSCW components, perhaps based on a decentralized hypermedia infrastructure such as the World Wide Web; see [71] for a possible substrate for this direction.
Reference: [3] <author> Michael Baentsch, Georg Molter, and Peter Sturm. WebMake: </author> <title> Integrating distributed software development in a structure-enhanced Web. </title> <booktitle> In 3rd International World-Wide Web Conference, </booktitle> <address> Darmstadt, Germany, </address> <month> April </month> <year> 1995. </year> <note> Elsevier Science B.V. http://www.igd.fhg.de/www/www95/proceedings/papers/51/WebMake/WebMake.html. </note>
Reference-contexts: And workflow vendors are also rushing to the Web, e.g., Action Workflow Metro from Action Technologies [64]. One can easily imagine multiple workflow engines accessing the same task execution resource | particularly if only the task execution broker is centralized, directing tasks to distributed hosts as in WebMake <ref> [3] </ref>. We note that the Web might serve as a desirable infrastructure for any of the decentralized classes outlined here, but further elaboration is beyond the scope of this work. 4. Decentralized process enactment and decentralized task execution.
Reference: [4] <author> Sergio Bandinelli and Alfonso Fuggetta. </author> <title> Computational reflection in software process modeling: the SLANG approach. </title> <booktitle> In 15th International Conference on Software Engineering, </booktitle> <pages> pages 144-154, </pages> <address> Baltimore MD, May 1993. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: The choice of local PCE architecture is influenced by several issues. For example, PCEs with data-integration facilities for the product artifacts (e.g., SPADE <ref> [4] </ref>, EPOS [20]) might be likely to choose architecture 2 to minimize communication overhead between the data and process managers, whereas PCEs with no data-integration facilities might be fully distributed (architecture 4) in an easier manner | although note that full distribution of process enactment is not incompatible with sharing a
Reference: [5] <author> Naser S. Barghouti. </author> <title> Concurrency Control in Rule-Based Software Development Environments. </title> <type> PhD thesis, </type> <institution> Columbia University, </institution> <month> February </month> <year> 1992. </year> <month> CUCS-001-92. </month>
Reference-contexts: Oz's transaction manager was developed as a separate component from the rest of Oz and is outside the scope of this work. This component is the subject of a related but semi-independent research line; see <ref> [17, 6, 5, 29, 30, 27] </ref>. 7 It is also possible to start up and shut down a server manually, often useful when testing a new version of the server. 17 Data Manager This component consists of an in-memory object manager that provides uniform object-based access to data from any system
Reference: [6] <author> Naser S. Barghouti. </author> <title> Supporting cooperation in the marvel process-centered SDE. </title> <editor> In Herbert Weber, editor, </editor> <booktitle> 5th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 21-31, </pages> <address> Tyson's Corner VA, </address> <month> December </month> <year> 1992. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 17(5), </volume> <month> December </month> <year> 1992. </year>
Reference-contexts: The explicitness of the process in PCEs makes it possible to employ semantics-based transaction management <ref> [8, 6, 30] </ref>. Multi-site tasks that may modify remote data (i.e., data from sites other than the coordinating PCE) require some kind of global transactional support, such as two-phase commit. <p> Oz's transaction manager was developed as a separate component from the rest of Oz and is outside the scope of this work. This component is the subject of a related but semi-independent research line; see <ref> [17, 6, 5, 29, 30, 27] </ref>. 7 It is also possible to start up and shut down a server manually, often useful when testing a new version of the server. 17 Data Manager This component consists of an in-memory object manager that provides uniform object-based access to data from any system
Reference: [7] <author> Naser S. Barghouti and Gail E. Kaiser. </author> <title> Modeling concurrency in rule-based development environments. </title> <journal> IEEE Expert, </journal> <volume> 5(6) </volume> <pages> 15-27, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: etc.), file attributes (pathnames to files in an intentionally opaque "hidden file system" that should not be accessed except through Oz), composite attributes in an aggregation hierarchy, reference attributes allowing arbitrary 1-to-N relations among objects, and one or more superclasses from which it inherits attributes (and rules treated as multi-methods <ref> [7] </ref>). Ad hoc and embedded (in rules) queries may combine navigational and associative 4 We mechanically upgraded our document authoring environment from Marvel to Oz, but devised a new software development process to better support componentization as explained in [37]. 11 clauses in a declarative style.
Reference: [8] <author> Naser S. Barghouti and Gail E. Kaiser. </author> <title> Concurrency control in advanced database applications. </title> <journal> ACM Computing Surveys, </journal> <volume> 23(3) </volume> <pages> 269-317, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: The explicitness of the process in PCEs makes it possible to employ semantics-based transaction management <ref> [8, 6, 30] </ref>. Multi-site tasks that may modify remote data (i.e., data from sites other than the coordinating PCE) require some kind of global transactional support, such as two-phase commit.
Reference: [9] <author> Israel Ben-Shaul and Gail E. Kaiser. </author> <title> A Paradigm for Decentralized Process Modeling. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1995. </year>
Reference-contexts: These two notions of federated PCEs are superimposed on the SDE spectrum in Figure 1. One approach to homogeneous PCE federation, where every team runs a component of the same multi-site PCE but enacts a different process, is taken by our Oz PCE <ref> [14, 9] </ref>. Oz introduces an International Alliance metaphor whereby each team retains its own local process, analogous to how each country has its own local customs and laws. <p> Thus, Summits alternate between execution of shared, global, and multi-site activities, to execution of private, local and single-site activities, and effectively enact multi-site processes with minimal inter-process dependencies beyond the explicitly defined shared sub-processes and with minimal global architectural constraints. Full details of Summits and Treaties are given in <ref> [15, 9] </ref>. 13 3.1.2 Example Imagine two collaborating development organizations, perhaps part of the same large institution, which are physically distant and temporally shifted, e.g., one in the western United States and one in Israel.
Reference: [10] <author> Israel Z. Ben-Shaul. </author> <title> An object management system for multi-user programming environments. </title> <type> Master's thesis, </type> <institution> Columbia University, Department of Computer Science, </institution> <month> April </month> <year> 1991. </year> <month> CUCS-010-91. </month>
Reference-contexts: Thus, it is necessary for the server to keep a context for each chain and switch among the contexts to service multiple clients concurrently <ref> [10] </ref>. In the direct-peer-to-peer Oz architecture, there is an additional problem.
Reference: [11] <author> Israel Z. Ben-Shaul and George T. Heineman. </author> <title> A 3-level atomicity model for decentralized workflow management systems. </title> <type> Technical Report 1013, </type> <institution> Technion, Israel Institute of Technology, Department of Electrical Engineering, </institution> <month> January </month> <year> 1996. </year> <note> Submitted for publication. </note>
Reference-contexts: Multi-site tasks that may modify remote data (i.e., data from sites other than the coordinating PCE) require some kind of global transactional support, such as two-phase commit. This topic is beyond the scope of this paper, see <ref> [11, 29, 27] </ref>. * There must be a (preferably graphical) user interface that allows users to browse and select objects from multiple SubEnvs while preserving each SubEnv's privacy with respect to which of its data may be viewed.
Reference: [12] <author> Israel Z. Ben-Shaul and Gail E. Kaiser. </author> <title> Process evolution in the Marvel environment. </title> <editor> In Wilhelm Schafer, editor, </editor> <booktitle> 8th International Software Process Workshop: State of the Practice in Process Technology, </booktitle> <pages> pages 104-106, </pages> <address> Wadern, Germany, </address> <month> March </month> <year> 1993. </year> <note> Position paper. </note>
Reference-contexts: In particular, it can be enacted by the process-centered environment exactly 26 like any other process that one undertakes during software development. Furthermore, the process can be partially modified and tailored for new and existing environment instances using the same process evolution capabilities (see <ref> [12] </ref>), provided that the required parts of the data and rules are protected from modifications. Finally, it was easy to implement, reusing largely pre-existing facilities. For example, maintaining the configuration database as part of the process and product database took advantage of Oz's persistent object management system.
Reference: [13] <author> Israel Z. Ben-Shaul and Gail E. Kaiser. </author> <title> A configuration process for a distributed software development environment. </title> <booktitle> In 2nd International Workshop on Configurable Distributed Systems, </booktitle> <pages> pages 123-134, </pages> <address> Pittsburgh PA, </address> <month> March </month> <year> 1994. </year>
Reference-contexts: Finally, protection from accident is afforded through the objectbase's normal access control facilities. We now present the actual registration process. An earlier version of the configuration process was described in <ref> [13] </ref>. 3.4.1 Configuration Facilities The registration process presented here is fairly similar to any other Oz (sub)process.
Reference: [14] <author> Israel Z. Ben-Shaul and Gail E. Kaiser. </author> <title> A paradigm for decentralized process modeling and its realization in the oz environment. </title> <booktitle> In 16th International Conference on Software Engineering, </booktitle> <pages> pages 179-188, </pages> <address> Sorrento, Italy, May 1994. </address> <publisher> IEEE Computer Society Press. </publisher> <pages> 40 </pages>
Reference-contexts: These two notions of federated PCEs are superimposed on the SDE spectrum in Figure 1. One approach to homogeneous PCE federation, where every team runs a component of the same multi-site PCE but enacts a different process, is taken by our Oz PCE <ref> [14, 9] </ref>. Oz introduces an International Alliance metaphor whereby each team retains its own local process, analogous to how each country has its own local customs and laws.
Reference: [15] <author> Israel Z. Ben-Shaul and Gail E. Kaiser. </author> <title> An interoperability model for process-centered software engineer-ing environments and its implementation in Oz. </title> <type> Technical Report CUCS-034-95, </type> <institution> Columbia University Department of Computer Science, </institution> <month> December </month> <year> 1995. </year> <note> Submitted for publication. </note>
Reference-contexts: For example, multi-site processes devised using a top-down methodology, say intended for multiple campuses of a single institution [58], may require somewhat different architectural support than multi-site processes constructed in a bottom-up manner, e.g., for temporary multi-institution collaborations <ref> [15] </ref>. However, we do not propose or compare/contrast methodologies for developing multi-site processes in this paper. First we present architectural requirements and alternative architectural models for homogeneous PCE federations. <p> It is of course also necessary for SubEnvs to determine or negotiate what services each can expect from other (perhaps anonymous) SubEnvs in terms of process tasks and resources, and how to coordinate exploitation of those services, but that is the subject of another paper <ref> [15] </ref>. 4 * The Foundation must provide some means by which the SubEnvs establish communication paths. Perhaps a given SubEnv always runs on the same machine and receives messages on the same port, but this seems overly restrictive | and unlikely when the SubEnvs run in independent administrative domains. <p> Bottom-up refers to interoperability among possibly pre-existing local processes, as in Oz's International Alliance metaphor, without a global overseer. We do not 9 discuss here which of the two styles is more appropriate (see <ref> [15] </ref> for such a discussion), but rather which architecture best supports each of the styles. In order to support top-down global processes, the underlying federation architecture must support maintenance of some global process state. This suggests a "glue" architecture, either centralized or decentralized, that is responsible for this state. <p> It follows the direct-peer-to-peer architectural model, where the bulk of the process-oriented interoperability and collaboration support resides in the process engine (as elaborated in <ref> [15] </ref>) rather than the Foundation. <p> Thus, Summits alternate between execution of shared, global, and multi-site activities, to execution of private, local and single-site activities, and effectively enact multi-site processes with minimal inter-process dependencies beyond the explicitly defined shared sub-processes and with minimal global architectural constraints. Full details of Summits and Treaties are given in <ref> [15, 9] </ref>. 13 3.1.2 Example Imagine two collaborating development organizations, perhaps part of the same large institution, which are physically distant and temporally shifted, e.g., one in the western United States and one in Israel.
Reference: [16] <author> Israel Z. Ben-Shaul and Gail E. Kaiser. </author> <title> Integrating groupware activities into workflow management systems. </title> <booktitle> In 7th Israeli Conference on Computer Based Systems and Software Engineering, </booktitle> <address> Tel Aviv, Israel, </address> <month> June </month> <year> 1996. </year> <note> In press. </note>
Reference-contexts: Built-in operations such as add an object, delete an object, etc., are modeled as rules for a uniform approach. Oz provides means for modeling and enacting synchronous and asynchronous "groupware" tools <ref> [67, 16] </ref>, but the details are not relevant to this paper. Oz supports object-oriented data definition and query languages. <p> Evaluation against the heterogeneous federation requirements and lessons learned should prove interesting. One area of current research by ourselves and others is federation of process-centered environments and computer-supported cooperative work (or "groupware") systems; see, e.g., <ref> [16, 2] </ref>. This should be followed by hybrid federations mixing and matching multiple PCE and CSCW components, perhaps based on a decentralized hypermedia infrastructure such as the World Wide Web; see [71] for a possible substrate for this direction.
Reference: [17] <author> Israel Z. Ben-Shaul, Gail E. Kaiser, and George T. Heineman. </author> <title> An architecture for multi-user software development environments. </title> <journal> Computing Systems, The Journal of the USENIX Association, </journal> <volume> 6(2) </volume> <pages> 65-103, </pages> <month> Spring </month> <year> 1993. </year>
Reference-contexts: Centralized process enactment and decentralized task execution: A process server maintains the state of the process, controls its enactment, and synchronizes access to shared resources, but the tasks themselves execute at process clients. Marvel 3.x <ref> [17] </ref>, ProcessWEAVER [22], and Mentor [70] fit this mold, albeit in different ways. Marvel (the single-site predecessor of Oz) relies on fixed user clients to execute tasks, whereas ProcessWEAVER spawns user "work contexts" as needed by the process. <p> This requirement implies a bottom-up approach, which in turn suggests a peer-based architectural style. Second, Oz was developed (among other reasons) to interconnect Marvel instances [36]. 4 Since the client/server architecture of Marvel <ref> [17] </ref> corresponds to the centralized-process-enactment, decentralized-task-execution local architecture, it was natural to adopt the direct-peer-to-peer approach. 3.1 Oz Overview To define a project-specific local process or to parameterize a reusable process for an organization or project, Oz employs a rule-based process modeling language. <p> Oz's transaction manager was developed as a separate component from the rest of Oz and is outside the scope of this work. This component is the subject of a related but semi-independent research line; see <ref> [17, 6, 5, 29, 30, 27] </ref>. 7 It is also possible to start up and shut down a server manually, often useful when testing a new version of the server. 17 Data Manager This component consists of an in-memory object manager that provides uniform object-based access to data from any system
Reference: [18] <author> Philip A. Bernstein. </author> <title> Database system support for software engineering. </title> <booktitle> In 9th International Conference on Software Engineering, </booktitle> <pages> pages 166-178, </pages> <address> Monterey CA, </address> <month> March </month> <year> 1987. </year>
Reference-contexts: general, data may be temporarily cached, permanently copied, or migrated between sites. * SDEs require sophisticated and flexible concurrency control and failure recovery mechanisms due to the long duration of tasks and task segments, interactive control by users, and collaboration among tasks and task segments while they are in progress <ref> [18] </ref>. The explicitness of the process in PCEs makes it possible to employ semantics-based transaction management [8, 6, 30]. Multi-site tasks that may modify remote data (i.e., data from sites other than the coordinating PCE) require some kind of global transactional support, such as two-phase commit.
Reference: [19] <author> Gregory Alan Bolcer and Richard N. Taylor. Endeavors: </author> <title> A process system integration infrastructure. </title> <type> Technical Report UCI-96-17, </type> <institution> University of California at Irvine Department of Information and Computer Science, </institution> <month> April </month> <year> 1996. </year> <note> Submitted for publication. </note>
Reference-contexts: Or Oz could send additional activities to the process task server dynamically as alternatives are discarded or pursued. A variant would be for the task server to treat the entire rule chain as a unit, analogous to our implementation of TeamWare's <ref> [19] </ref> coarse-grained tasks as entry points into Oz rule chains as described in [39]. In either case, the intermediate model posed above requires relatively little extension. Now the question arises as to how exactly Oz performs the mechanics of posting or notification (points 1 and 3).
Reference: [20] <author> Reidar Conradi, Espen Osjord, Per H. Westby, and Chunnian Liu. </author> <title> Initial software process management in EPOS. </title> <journal> Software Engineering Journal, </journal> <volume> 6(5) </volume> <pages> 275-284, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: The choice of local PCE architecture is influenced by several issues. For example, PCEs with data-integration facilities for the product artifacts (e.g., SPADE [4], EPOS <ref> [20] </ref>) might be likely to choose architecture 2 to minimize communication overhead between the data and process managers, whereas PCEs with no data-integration facilities might be fully distributed (architecture 4) in an easier manner | although note that full distribution of process enactment is not incompatible with sharing a centralized data
Reference: [21] <author> Stephen E. Dossick and Gail E. Kaiser. </author> <title> WWW access to legacy client/server applications. </title> <booktitle> In 5th International World Wide Web Conference, </booktitle> <address> Paris, France, </address> <month> May </month> <year> 1996. </year> <note> In press. </note>
Reference-contexts: executing) client connected to its server, because the server automatically shuts itself down when there are no more active clients (and is automatically started up on demand by 5 Oz actually supports several kinds of user and tool management clients, but the distinctions are not germane to this paper; see <ref> [59, 67, 21] </ref>. 6 An extension of this model, in which clients can be disconnected from their server and continue to operate independently to enact a process segment until reconnection, has been investigated separately to support mobile computing [60]. 15 16 the Connection Server, as will be explained shortly). 7 In
Reference: [22] <author> Christer Fernstrom. </author> <title> PROCESS WEAVER: Adding process support to UNIX. </title> <booktitle> In 2nd International Conference on the Software Process: Continuous Software Process Improvement, </booktitle> <pages> pages 12-26, </pages> <address> Berlin, Germany, February 1993. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Centralized process enactment and decentralized task execution: A process server maintains the state of the process, controls its enactment, and synchronizes access to shared resources, but the tasks themselves execute at process clients. Marvel 3.x [17], ProcessWEAVER <ref> [22] </ref>, and Mentor [70] fit this mold, albeit in different ways. Marvel (the single-site predecessor of Oz) relies on fixed user clients to execute tasks, whereas ProcessWEAVER spawns user "work contexts" as needed by the process.
Reference: [23] <author> Carlo Ghezzi, </author> <title> editor. </title> <booktitle> 9th International Software Process Workshop: The Role of Humans in the Process, </booktitle> <address> Airlie VA, October 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: There has been some work towards federation of SDEs. We are concerned in this paper with the subclass of SDEs known as process-centered environments (PCEs) <ref> [49, 23] </ref>, and do not address SDE federations that do not specifically support process. In general, a PCE is a generic environment kernel intended to be parameterized by a process model that defines the software development process for a specific instance of the environment.
Reference: [24] <author> Mark A. Gisi and Gail E. Kaiser. </author> <title> Extending a tool integration language. </title> <editor> In Mark Dowson, editor, </editor> <booktitle> 1st International Conference on the Software Process: Manufacturing Complex Systems, </booktitle> <pages> pages 218-227, </pages> <address> Redondo Beach CA, October 1991. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Rules perform all data manipulation. Commercial off-the-shelf tools and other external application programs are interfaced to an environment instance through shell script envelopes, using augmented notation that hides from tool integrators the details of accessing the "hidden file system" and passing input and output parameters <ref> [24] </ref>. A return code from the envelope determines which of the several rule effects is asserted. The external view of the multi-site direct-peer-to-peer Oz architecture is shown in Figure 6. It is a multi-client/multi-server architecture, within which each SubEnv follows a conventional client/server model and is self-sufficient for local work.
Reference: [25] <author> Dennis Heimbigner. </author> <title> The ProcessWall: A process state server approach to process programming. </title> <editor> In Herbert Weber, editor, </editor> <booktitle> 5th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 159-168, </pages> <address> Tyson's Corner VA, </address> <month> December </month> <year> 1992. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 17(5), </volume> <month> December </month> <year> 1992. </year>
Reference-contexts: One approach to heterogeneous PCE federation, where external "glue" binds together two or more PCEs, is taken by Heimbigner's ProcessWall <ref> [25] </ref>. Heimbigner refers to ProcessWall as a process state server because it enables interoperation between the PCEs through a (conceptually) centralized representation of global process state that the teams agree to share.
Reference: [26] <author> George T. Heineman. </author> <title> Automatic translation of process modeling formalisms. </title> <booktitle> In 1994 Centre for Advanced Studies Conference (CASCON), </booktitle> <pages> pages 110-120, </pages> <address> Toronto ON, Canada, </address> <month> November </month> <year> 1994. </year> <institution> IBM Canada Ltd. Laboratory. </institution>
Reference-contexts: So difficulties arise only when pending tasks posted through the Foundation involve non-Oz SubEnvs. Fortuitously, we have already shown fairly straightforward mappings from most of the major PCE paradigms, including Petri nets [53], task graphs <ref> [26] </ref>, and grammars [38], into Oz rules, and reverse mappings are not inconceivable. And as previously 37 noted, Mentor involves translation from one notation into another, as does the standard process interchange format work.
Reference: [27] <author> George T. Heineman. </author> <title> A Transaction Manager Component for Cooperative Transaction Models. </title> <type> PhD thesis, </type> <institution> Columbia University Department of Computer Science, </institution> <year> 1996. </year> <title> CUCS-010-96. </title> <publisher> Forthcoming. </publisher>
Reference-contexts: Multi-site tasks that may modify remote data (i.e., data from sites other than the coordinating PCE) require some kind of global transactional support, such as two-phase commit. This topic is beyond the scope of this paper, see <ref> [11, 29, 27] </ref>. * There must be a (preferably graphical) user interface that allows users to browse and select objects from multiple SubEnvs while preserving each SubEnv's privacy with respect to which of its data may be viewed. <p> Oz's transaction manager was developed as a separate component from the rest of Oz and is outside the scope of this work. This component is the subject of a related but semi-independent research line; see <ref> [17, 6, 5, 29, 30, 27] </ref>. 7 It is also possible to start up and shut down a server manually, often useful when testing a new version of the server. 17 Data Manager This component consists of an in-memory object manager that provides uniform object-based access to data from any system
Reference: [28] <author> George T. Heineman and Gail E. Kaiser. </author> <title> Integrating a transaction manager component with Process-WEAVER. </title> <type> Technical Report CUCS-012-94, </type> <institution> Columbia University Department of Computer Science, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: Thus an alternative is that only the Foundation is aware of the various SubEnvs, and picks up results through some non-intrusive manner, such as understanding file formats of what the PCE considers internal process state information. (Some possible interaction schemes are outlined in <ref> [28] </ref> for adding on external concurrency control to a PCE that does not know it is using concurrency control, and some similar mechanism could be applied here.) As in homogeneous federation, there must be some means for configuring federations and allowing individual SubEnvs to enter and leave a given federation over
Reference: [29] <author> George T. Heineman and Gail E. Kaiser. </author> <title> An architecture for integrating concurrency control into environment frameworks. </title> <booktitle> In 17th International Conference on Software Engineering, </booktitle> <pages> pages 305-313, </pages> <address> Seattle WA, April 1995. </address> <publisher> ACM Press. </publisher>
Reference-contexts: Multi-site tasks that may modify remote data (i.e., data from sites other than the coordinating PCE) require some kind of global transactional support, such as two-phase commit. This topic is beyond the scope of this paper, see <ref> [11, 29, 27] </ref>. * There must be a (preferably graphical) user interface that allows users to browse and select objects from multiple SubEnvs while preserving each SubEnv's privacy with respect to which of its data may be viewed. <p> Oz's transaction manager was developed as a separate component from the rest of Oz and is outside the scope of this work. This component is the subject of a related but semi-independent research line; see <ref> [17, 6, 5, 29, 30, 27] </ref>. 7 It is also possible to start up and shut down a server manually, often useful when testing a new version of the server. 17 Data Manager This component consists of an in-memory object manager that provides uniform object-based access to data from any system
Reference: [30] <author> George T. Heineman and Gail E. Kaiser. </author> <title> The CORD approach to extensible concurrency control. </title> <type> Technical Report CUCS-024-95 (revised), </type> <institution> Columbia University Department of Computer Science, </institution> <month> February </month> <year> 1996. </year> <note> Submitted for publication. </note>
Reference-contexts: The explicitness of the process in PCEs makes it possible to employ semantics-based transaction management <ref> [8, 6, 30] </ref>. Multi-site tasks that may modify remote data (i.e., data from sites other than the coordinating PCE) require some kind of global transactional support, such as two-phase commit. <p> Oz's transaction manager was developed as a separate component from the rest of Oz and is outside the scope of this work. This component is the subject of a related but semi-independent research line; see <ref> [17, 6, 5, 29, 30, 27] </ref>. 7 It is also possible to start up and shut down a server manually, often useful when testing a new version of the server. 17 Data Manager This component consists of an in-memory object manager that provides uniform object-based access to data from any system
Reference: [31] <author> George T. Heineman, Gail E. Kaiser, Naser S. Barghouti, and Israel Z. Ben-Shaul. </author> <title> Rule chaining in marvel: Dynamic binding of parameters. </title> <journal> IEEE Expert, </journal> <volume> 7(6) </volume> <pages> 26-32, </pages> <month> December </month> <year> 1992. </year> <month> 41 </month>
Reference-contexts: When a rule's activity completes, its asserted effect triggers automatic enactment of other rules whose conditions have now become satisfied. Both backward and forward chaining procedures operate recursively <ref> [31] </ref>.
Reference: [32] <author> Watts Humphrey and Marc I. Kellner. </author> <title> Software process modeling: </title> <booktitle> Principles of entity process models. In 11th Internation Conference on Software Engineering, </booktitle> <pages> pages 331-342, </pages> <address> Pittsburgh PA, May 1989. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Thus there is no true federation in the sense addressed by this paper. However, some kind of translation facilities are needed as part of any heterogeneous federation: Mentor transforms the heterogeneous process modeling formalisms into StateMate charts <ref> [32] </ref>, but in the case of ProcessWall only process state is translated (or the participating PCEs might be implemented to use a common task format). We mentioned above that process enactment by a federated PCE might involve movement of product artifacts among teams that could potentially be geographically dispersed.
Reference: [33] <author> Gail E. Kaiser. </author> <title> Cooperative transactions for multi-user environments. </title> <editor> In Won Kim, editor, </editor> <title> Modern Database Systems: The Object Model, Interoperability, and Beyond, </title> <booktitle> chapter 20, </booktitle> <pages> pages 409-433. </pages> <publisher> ACM Press, </publisher> <address> New York NY, </address> <year> 1994. </year>
Reference-contexts: It does not seem to matter much whether the task was previously posted, or the notification only informs the history manager, except that if it was previously posted it is reasonable to assume some kind of "checkout" model <ref> [33] </ref> whereby the SubEnv indicates that it intends to perform a given task and then acquires the data and other resources it needs to perform the work; later a 38 "checkin" is achieved via the notification.
Reference: [34] <author> Gail E. Kaiser, Naser S. Barghouti, Peter H. Feiler, and Robert W. Schwanke. </author> <title> Database support for knowledge-based engineering environments. </title> <journal> IEEE Expert, </journal> <volume> 3(2) </volume> <pages> 18-32, </pages> <month> Summer </month> <year> 1988. </year>
Reference-contexts: Although Oz's process modeling language tends to obscure such relationships from a human-readability standpoint, they are visible in the internal rule network compiled from the process model <ref> [34] </ref>. A less restrictive option would be to only post tasks with already satisfied conditions, or prerequisites in some other non-rule-based process modeling paradigm, but this prevents posting of tasks obligated for eventual completion [50], but not currently enabled.
Reference: [35] <author> Gail E. Kaiser, Naser S. Barghouti, and Michael H. Sokolsky. </author> <title> Experience with process modeling in the marvel software development environment kernel. </title> <editor> In Bruce Shriver, editor, </editor> <booktitle> 23rd Annual Hawaii International Conference on System Sciences, </booktitle> <volume> volume II, </volume> <pages> pages 131-140, </pages> <address> Kona HI, </address> <month> January </month> <year> 1990. </year>
Reference-contexts: Local PCEs can be roughly characterized as belonging to one of four classes with respect to process enactment: 1. Centralized process enactment and centralized task execution. An all-in-one single-user PCE such as Marvel 2.x <ref> [35] </ref> or a compiled process program such as those written in APPL/A [62] would presumably fit into this class. Even a client/server system might belong if the client supported only the user interface and all process enactment was performed in the server. 2.
Reference: [36] <author> Gail E. Kaiser, Peter H. Feiler, and Steven S. Popovich. </author> <title> Intelligent assistance for software development and maintenance. </title> <journal> IEEE Software, </journal> <volume> 5(3) </volume> <pages> 40-49, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: First, one of the major requirements for the Oz system was to support interoperability among autonomous, geographically distributed, and possibly pre-existing processes. This requirement implies a bottom-up approach, which in turn suggests a peer-based architectural style. Second, Oz was developed (among other reasons) to interconnect Marvel instances <ref> [36] </ref>. 4 Since the client/server architecture of Marvel [17] corresponds to the centralized-process-enactment, decentralized-task-execution local architecture, it was natural to adopt the direct-peer-to-peer approach. 3.1 Oz Overview To define a project-specific local process or to parameterize a reusable process for an organization or project, Oz employs a rule-based process modeling language.
Reference: [37] <author> Gail E. Kaiser, George T. Heineman, Peter D. Skopp, and Jack J. Yang. </author> <title> Incremental process support for code reengineering: An update (experience report). </title> <type> Technical Report CUCS-007-96, </type> <institution> Columbia University Department of Computer Science, </institution> <month> February </month> <year> 1996. </year> <note> Submitted for publication. </note>
Reference-contexts: Ad hoc and embedded (in rules) queries may combine navigational and associative 4 We mechanically upgraded our document authoring environment from Marvel to Oz, but devised a new software development process to better support componentization as explained in <ref> [37] </ref>. 11 clauses in a declarative style. Rules perform all data manipulation. <p> Then the connection database is not global in the sense that not every SubEnv maintains the same set of remote SubEnvs in its database. This approach has been adopted in the recent EmeraldCity Oz process for the continued development of Oz <ref> [37] </ref>, but "hand crafting" of all the SubEnv stubs was required. 31 4 Heterogeneous Federation 4.1 Requirements Recall that in the heterogeneous model, each site (or team) runs a separate PCE that works together with other PCEs via the external federation "glue".
Reference: [38] <author> Gail E. Kaiser, Steven S. Popovich, and Israel Z. Ben-Shaul. </author> <title> A bi-level language for software process modeling. </title> <editor> In Walter F. Tichy, editor, </editor> <booktitle> Configuration Management, number 2 in Trends in Software, chapter 2, </booktitle> <pages> pages 39-72. </pages> <publisher> John Wiley & Sons, </publisher> <year> 1994. </year>
Reference-contexts: So difficulties arise only when pending tasks posted through the Foundation involve non-Oz SubEnvs. Fortuitously, we have already shown fairly straightforward mappings from most of the major PCE paradigms, including Petri nets [53], task graphs [26], and grammars <ref> [38] </ref>, into Oz rules, and reverse mappings are not inconceivable. And as previously 37 noted, Mentor involves translation from one notation into another, as does the standard process interchange format work.
Reference: [39] <author> Gail E. Kaiser, Steven S. Popovich, and Stephen E. Dossick. </author> <title> A process server component supporting integration of heterogeneous process-centered environments. </title> <type> Technical report, </type> <institution> Columbia University Department of Computer Science, </institution> <month> May </month> <year> 1996. </year>
Reference-contexts: Oz servers already transmit rule definitions between themselves as part of Treaty negotiation, and transmit the parameters and bound variables of instantiated rules as part of Summit enactment. The newest version of Oz, which replaces the native process engine with a process server component <ref> [39] </ref>, among other things introduces a protocol for transferring instantiated rules (after condition evaluation but before activity initiation) between client and server to support delegation to and selection from user and group agendas ("to do" lists). <p> A variant would be for the task server to treat the entire rule chain as a unit, analogous to our implementation of TeamWare's [19] coarse-grained tasks as entry points into Oz rule chains as described in <ref> [39] </ref>. In either case, the intermediate model posed above requires relatively little extension. Now the question arises as to how exactly Oz performs the mechanics of posting or notification (points 1 and 3). <p> Thus it would not be necessary to modify the process engine itself. Details on the mediator callback model can be found in <ref> [39, 52] </ref>; this is not a subject of this paper. Now let's consider how Oz might receive requests from a heterogeneous federation controller component, or poll its worklist manager for opportunities to perform tasks on behalf of other SubEnvs, point 2.
Reference: [40] <author> Henry F. Korth. </author> <title> Extending the scope of relational languages. </title> <journal> IEEE Software, </journal> <volume> 3(1) </volume> <pages> 19-28, </pages> <month> January </month> <year> 1986. </year>
Reference-contexts: A related issue is that the SubEnv should minimize the dependencies on uninvolved SubEnvs when executing part of a multi-site task. These two requirements are somewhat similar to control and execution autonomy, respectively, in multi-database transaction management <ref> [40] </ref>. The local site autonomy prized in the Oz approach to bottom-up process modeling has also been argued as necessary for top-down modeling: "A participant on a lower level [of the hierarchy] does not want his/her management to know how a task is performed" [56].
Reference: [41] <institution> Programming Systems Lab. </institution> <note> Darkover 1.0 manual. Technical Report CUCS-023-95e, </note> <institution> Columbia University, Department of Computer Science, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: A SubEnv is considered active if exactly one server is executing "on the environment", meaning that it has loaded the SubEnv's process, and the SubEnv's objectbase (containing persistent product data and process state) is under the control of the server's data management subsystem (described in <ref> [41] </ref>).
Reference: [42] <institution> Programming Systems Laboratory. Oz 1.1 Manual set, </institution> <month> January </month> <year> 1996. </year> <month> ftp://ftp.cs.columbia.edu/pub/marvel/oz.1.1.manuals. </month>
Reference-contexts: See <ref> [42] </ref> for details. Task Manager The task manager is the main component of the server. Its front-end sub-component is the sched-uler, which receives requests for service from three entities that correspond to the previously mentioned inter-connections, namely local clients, remote clients, and remote servers. <p> performance overhead for remote communication, since every remote request must pass through the local server, including the built-in operations that do not require process-authorization such as parameter selection and remote browsing (conventional access control still protects sites from unauthorized remote access just as it does so for local clients, see <ref> [42] </ref>). 3.3.3 The Communication Protocol As mentioned earlier, Oz supports two modes of communication: the direct communication mode, which attempts to use the (possibly invalid) dynamic information in the connection database to connect directly to the desired server, and the indirect mode, which uses the static and always valid information in
Reference: [43] <author> Jintae Lee, Gregg Yost, </author> <title> and the PIF Working Group. The PIF process interchange format and framework, </title> <month> December </month> <year> 1994. </year> <note> http://www-sloan.mit.edu/ccs/pifmain.html. </note>
Reference-contexts: Note Mentor is a workflow management system intended for business applications, not a process-centered environment oriented towards software engineering; whether there is any fundamental difference between workflow and process is a matter of some debate, 2 but we blur the distinction in this paper. Common process interchange formats <ref> [45, 43] </ref> support translation of a logically single process model into the different representations of distinct process systems, but do not provide any means for collaboration and interoperability during the process enactment by those systems. Thus there is no true federation in the sense addressed by this paper.
Reference: [44] <author> Wenke Lee, Gail E. Kaiser, Paul D. Clayton, and Eric H. Sherman. OzCare: </author> <title> A workflow automation system for care plans. </title> <type> Technical Report CUCS-012-96, </type> <institution> Columbia University Department of Computer Science, </institution> <month> March </month> <year> 1996. </year> <note> Submitted for publication. </note>
Reference-contexts: Note that they are temporally constrained: the former should be done early to avoid "rush-hour" network traffic, and the latter has to finish in time for the other site to start its work for the day. (See <ref> [44] </ref> for discussion of temporal sensitively within Oz processes.) Test-downloaded-module and Test-new-module are shown here as local to a single SubEnv, but they might alternatively 14 be distributed among multiple teams inside the campus, hence also defined as multi-site Summit rules. <p> messages from the server and does something different than the typical user client; in fact, we've already introduced numerous special-purpose clients where the server tells the client for one reason or another about 36 the activity to be carried out (only a few of these have been written up, see <ref> [44, 59, 67] </ref>). The process state server could be that new client, to implement point 1. Similarly, we could implement point 2 by treating the task server as the "client" in this same protocol.
Reference: [45] <institution> Workflow Management Coalition Members. Coalition overview, </institution> <month> September </month> <year> 1995. </year> <note> http://www.aiai.ed.ac.uk/WfMC/overview.html. </note>
Reference-contexts: Note Mentor is a workflow management system intended for business applications, not a process-centered environment oriented towards software engineering; whether there is any fundamental difference between workflow and process is a matter of some debate, 2 but we blur the distinction in this paper. Common process interchange formats <ref> [45, 43] </ref> support translation of a logically single process model into the different representations of distinct process systems, but do not provide any means for collaboration and interoperability during the process enactment by those systems. Thus there is no true federation in the sense addressed by this paper.
Reference: [46] <institution> Microsoft announcements agreement with aspect software engineering, inc. to enhance active internet vision, </institution> <month> March 12 </month> <year> 1996. </year> <note> Press release. http://www.aspectse.com/Announce.html. </note>
Reference-contexts: For example, World Wide Web-based gateways from arbitrary Web browsers to numerous backend databases have already been developed | Microsoft recently bought out Aspect Software Engineering, acquiring their dbWeb gateway to databases meeting the Open Database Connectivity standard <ref> [46] </ref>. And workflow vendors are also rushing to the Web, e.g., Action Workflow Metro from Action Technologies [64]. One can easily imagine multiple workflow engines accessing the same task execution resource | particularly if only the task execution broker is centralized, directing tasks to distributed hosts as in WebMake [3].
Reference: [47] <editor> Erich Neuhold and Michael Stonebraker (editors). </editor> <booktitle> Future directions in DBMS research. SIGMOD Record, </booktitle> <volume> 18(1) </volume> <pages> 17-26, </pages> <month> March </month> <year> 1989. </year>
Reference-contexts: However, in the general case we also require substantial translation capabilities regarding both data formats and predicates and operations over those formats. The "universal data model" problem is a well-known unresolved, probably unresolvable <ref> [47] </ref>, issue in database research.
Reference: [48] <author> Leon J. Osterweil. </author> <title> Presentation at Software Process Architectures Workshop, </title> <month> March </month> <year> 1995. </year>
Reference-contexts: A scheduler might be attached to ProcessWall to direct tasks to particular "sites" <ref> [48] </ref>, or ProcessWall might be treated as a "blackboard" (using artificial intelligence terminology) from which the schedulers of the individual PCEs select the tasks they intend to perform or to which they delegate those 2 pending tasks that cannot be performed locally.
Reference: [49] <editor> Dewayne E. Perry, editor. </editor> <booktitle> 3nd International Conference on the Software Process: Applying Software Process, </booktitle> <address> Reston VA, October 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: There has been some work towards federation of SDEs. We are concerned in this paper with the subclass of SDEs known as process-centered environments (PCEs) <ref> [49, 23] </ref>, and do not address SDE federations that do not specifically support process. In general, a PCE is a generic environment kernel intended to be parameterized by a process model that defines the software development process for a specific instance of the environment.
Reference: [50] <author> Dewayne E. Perry. </author> <title> Enactment control in Interact/Intermediate. </title> <editor> In Brian Warboys, editor, </editor> <booktitle> 3rd European Workshop on Software Process Technology, volume 772 of Lecture Notes in Computer Science, </booktitle> <pages> pages 107-113, </pages> <institution> Villard de Lans (Grenoble), France, </institution> <month> February </month> <year> 1994. </year> <note> Springer-Verlag. 42 </note>
Reference-contexts: A less restrictive option would be to only post tasks with already satisfied conditions, or prerequisites in some other non-rule-based process modeling paradigm, but this prevents posting of tasks obligated for eventual completion <ref> [50] </ref>, but not currently enabled.
Reference: [51] <author> Burkhard Peuschel and Stefan Wolf. </author> <title> Architectural support for distributed process centered software development environments. </title> <editor> In Wilhelm Schafer, editor, </editor> <booktitle> 8th International Software Process Workshop, </booktitle> <address> Wadern, Germany, </address> <month> March </month> <year> 1993. </year> <note> Position paper. </note>
Reference-contexts: We note that the Web might serve as a desirable infrastructure for any of the decentralized classes outlined here, but further elaboration is beyond the scope of this work. 4. Decentralized process enactment and decentralized task execution. Merlin <ref> [51] </ref> and several transactional workflow systems, such as Exotica [1], operate in a fully distributed manner | the former by divying up the process among user clients and the latter by expressing the workflow implicitly in a network of task managers that interact only with their predecessors and successors in the <p> likely to choose architecture 2 to minimize communication overhead between the data and process managers, whereas PCEs with no data-integration facilities might be fully distributed (architecture 4) in an easier manner | although note that full distribution of process enactment is not incompatible with sharing a centralized data repository; see <ref> [51] </ref>. Another characteristic that impacts the choice of architecture is whether the process modeling paradigm employed by the PCE is reactive or proactive.
Reference: [52] <author> Steven S. Popovich. </author> <title> Rule-Based Process Servers for Software Development Environments. </title> <type> PhD thesis, </type> <institution> Columbia University Department of Computer Science, </institution> <year> 1996. </year> <title> CUCS-014-96. </title> <publisher> Forthcoming. </publisher>
Reference-contexts: Thus it would not be necessary to modify the process engine itself. Details on the mediator callback model can be found in <ref> [39, 52] </ref>; this is not a subject of this paper. Now let's consider how Oz might receive requests from a heterogeneous federation controller component, or poll its worklist manager for opportunities to perform tasks on behalf of other SubEnvs, point 2.
Reference: [53] <author> Steven S. Popovich and Gail E. Kaiser. </author> <title> Integrating an existing environment with a rule-based process server. </title> <type> Technical Report CUCS-004-95, </type> <institution> Columbia University Department of Computer Science, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: So difficulties arise only when pending tasks posted through the Foundation involve non-Oz SubEnvs. Fortuitously, we have already shown fairly straightforward mappings from most of the major PCE paradigms, including Petri nets <ref> [53] </ref>, task graphs [26], and grammars [38], into Oz rules, and reverse mappings are not inconceivable. And as previously 37 noted, Mentor involves translation from one notation into another, as does the standard process interchange format work.
Reference: [54] <editor> Sudha Ram, editor. </editor> <booktitle> Special Issue on Heterogeneous Distributed Database Systems, volume 24:12 of Computer. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> December </month> <year> 1991. </year>
Reference-contexts: The database community has also delineated intermediate points, often termed federated databases <ref> [57, 54] </ref>.
Reference: [55] <author> Steven P. Reiss. </author> <title> Connecting tools using message passing in the Field environment. </title> <journal> IEEE Software, </journal> <volume> 7(4) </volume> <pages> 57-66, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: This assumes some kind of scheduler or other entity to select among enabled tasks for enactment and choose the recipient SubEnv. The latter function might be achieved in the style of a broadcast message server like Field <ref> [55] </ref>, where the SubEnv's register their interests in or abilities to perform certain kinds of tasks, perhaps by supplying a pattern that is matched by the task server against the enabled task specifications; the application of event subscription to workflow management system interoperability is suggested in [56].
Reference: [56] <author> Friedemann Schwenkreis. </author> <title> Workflow for the German federal government. In NSF Workshop on Workflow and Process Automation in Information Systems: State-of-the-Art and Future Directions, </title> <address> Athens GA, </address> <month> May </month> <year> 1996. </year> <note> Position paper. In press. </note>
Reference-contexts: The local site autonomy prized in the Oz approach to bottom-up process modeling has also been argued as necessary for top-down modeling: "A participant on a lower level [of the hierarchy] does not want his/her management to know how a task is performed" <ref> [56] </ref>. Thus we rationalize site autonomy as a critical requirement. * The SubEnvs must somehow be aware a priori (statically), or become aware during the course of process enactment (dynamically), of each other's existence if they are intended to collaborate. <p> No translation services are needed, since all the SubEnvs speak the same "language" (including data formats and process modeling language). The Foundation may perform brokerage or routing among SubEnvs, and maintain the state of any "superworkflow" <ref> [56] </ref>. Figure 2 illustrates this architecture. <p> The Foundation could itself impose all tasks, perhaps through a special process modeling and enactment system intended to act as a "global hand" supporting some form of "super-workflow" <ref> [56] </ref>, analogous to multi-part transactions submitted to heterogeneous database federations. * Either every SubEnv must be perpetually executing, to perform the polling outlined above, or the Foundation must support a facility for "bringing up" a SubEnv each time it seeks to notify that SubEnv. <p> message server like Field [55], where the SubEnv's register their interests in or abilities to perform certain kinds of tasks, perhaps by supplying a pattern that is matched by the task server against the enabled task specifications; the application of event subscription to workflow management system interoperability is suggested in <ref> [56] </ref>. Note this is a remarkably efficient form of "polling", differing from the conventional busy-wait or blocking receive primarily in that notifications may come in at times when the SubEnv is not immediately equipped to handle them.
Reference: [57] <author> Amit P. Sheth and James A. Larson. </author> <title> Federated database systems for managing distributed, heterogeneous, and autonomous databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(3) </volume> <pages> 183-236, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: The database community has also delineated intermediate points, often termed federated databases <ref> [57, 54] </ref>.
Reference: [58] <author> Izhar Shy, Richard Taylor, and Leon Osterweil. </author> <title> A metaphor and a conceptual framework for software development environments. </title> <editor> In Fred Long, editor, </editor> <booktitle> Software Engineering Environments International Workshop on Environments, volume 467 of Lecture Notes in Computer Science, </booktitle> <pages> pages 77-97, </pages> <address> Chinon, France, </address> <month> September </month> <year> 1989. </year> <note> Springer-Verlag. </note>
Reference-contexts: That is, our investigation of architecture is strongly influenced by the fact that the main purpose of PCE federation is to enact multi-site processes. For example, multi-site processes devised using a top-down methodology, say intended for multiple campuses of a single institution <ref> [58] </ref>, may require somewhat different architectural support than multi-site processes constructed in a bottom-up manner, e.g., for temporary multi-institution collaborations [15]. However, we do not propose or compare/contrast methodologies for developing multi-site processes in this paper. First we present architectural requirements and alternative architectural models for homogeneous PCE federations. <p> The anticipated global process style. 2. The type of local SubEnv architecture as outlined above. Regarding global process, we distinguish between two major styles, top-down and bottom-up, although of course hybrids are possible. Top-down refers to a process, probably hierarchical as in the Corporation metaphor <ref> [58] </ref>, imposed on the local SubEnvs; this is analogous to a global transaction in federated databases. Bottom-up refers to interoperability among possibly pre-existing local processes, as in Oz's International Alliance metaphor, without a global overseer.
Reference: [59] <author> Peter D. Skopp. </author> <title> Low bandwidth operation in a multi-user software development environment. </title> <type> Master's thesis, </type> <institution> Columbia University Department of Computer Science, </institution> <month> December </month> <year> 1995. </year> <month> CUCS-035-95. </month>
Reference-contexts: executing) client connected to its server, because the server automatically shuts itself down when there are no more active clients (and is automatically started up on demand by 5 Oz actually supports several kinds of user and tool management clients, but the distinctions are not germane to this paper; see <ref> [59, 67, 21] </ref>. 6 An extension of this model, in which clients can be disconnected from their server and continue to operate independently to enact a process segment until reconnection, has been investigated separately to support mobile computing [60]. 15 16 the Connection Server, as will be explained shortly). 7 In <p> messages from the server and does something different than the typical user client; in fact, we've already introduced numerous special-purpose clients where the server tells the client for one reason or another about 36 the activity to be carried out (only a few of these have been written up, see <ref> [44, 59, 67] </ref>). The process state server could be that new client, to implement point 1. Similarly, we could implement point 2 by treating the task server as the "client" in this same protocol.
Reference: [60] <author> Peter D. Skopp and Gail E. Kaiser. </author> <title> Disconnected operation in a multi-user software development environment. </title> <editor> In Bharat Bhargava, editor, </editor> <booktitle> IEEE Workshop on Advances in Parallel and Distributed Systems, </booktitle> <pages> pages 146-151, </pages> <address> Princeton NJ, </address> <month> October </month> <year> 1993. </year>
Reference-contexts: management clients, but the distinctions are not germane to this paper; see [59, 67, 21]. 6 An extension of this model, in which clients can be disconnected from their server and continue to operate independently to enact a process segment until reconnection, has been investigated separately to support mobile computing <ref> [60] </ref>. 15 16 the Connection Server, as will be explained shortly). 7 In the rest of this section we will interpret the architecture figure, with emphasis on the Foundation components. <p> Thus, an effective object cache may improve the performance significantly. Another motivation for the cache is to hold pre-fetched objects in case a pre-fetching mechanism is employed (e.g., based on the semantics of the process model as discussed in <ref> [60] </ref>). The interesting aspects of the cache implementation from the federated PCE perspective are to address its particular requirements, and to possibly use the semantics of the federated process and data models to direct the cache-invalidation policy. <p> The simulation of branchings and iterations, with pruning to most probable paths, has been considered (for unrelated purposes) in <ref> [60] </ref>; some similar approach could be taken here to limit the cluttering of the server's task representation. Or Oz could send additional activities to the process task server dynamically as alternatives are discarded or pursued.
Reference: [61] <author> Richard Mark Soley and William Kent. </author> <title> The OMG object model. </title> <editor> In Won Kim, editor, </editor> <title> Modern Database Systems: The Object Model, Interoperability, and Beyond, </title> <booktitle> chapter 2, </booktitle> <pages> pages 18-41. </pages> <publisher> ACM Press, </publisher> <address> New York NY, </address> <year> 1994. </year>
Reference-contexts: This might be constructed directly on top of TCP/IP sockets, or employ some higher level mechanism such as RPC or CORBA <ref> [61] </ref>. Note the SubEnvs might communicate either directly with each other, or through some PCE-cognizant intermediary (ies) provided by the Foundation.
Reference: [62] <author> Stanley M. Sutton, Jr., Dennis Heimbigner, and Leon J. Osterweil. APPL/A: </author> <title> A language for software process programming. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> 4(3) </volume> <pages> 221-286, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: Local PCEs can be roughly characterized as belonging to one of four classes with respect to process enactment: 1. Centralized process enactment and centralized task execution. An all-in-one single-user PCE such as Marvel 2.x [35] or a compiled process program such as those written in APPL/A <ref> [62] </ref> would presumably fit into this class. Even a client/server system might belong if the client supported only the user interface and all process enactment was performed in the server. 2.
Reference: [63] <author> L. Masinter T. Berners-Lee and M. McCahill. </author> <title> Uniform resource locators (url), </title> <month> December </month> <year> 1994. </year> <note> http://www.w3.org/hypertext/WWW/Addressoing/rfc1738.txt. </note>
Reference-contexts: There are complications regarding representation of data arguments as part of the task specification, and later regarding data transfer when the task is enacted by some PCE participating in the federation; we ignore those here, except to note that something like World Wide Web URLs (uniform resource locators <ref> [63] </ref>) would probably suffice. Even though the task may eventually be picked up by another Oz SubEnv, this cannot be assumed a priori (if it could, direct interaction through the homogeneous Foundation would almost certainly be more efficient). 2.
Reference: [64] <institution> Action Technologies, Inc. Action workflow metro, </institution> <month> November </month> <year> 1995. </year> <note> http://www.actiontech.com/metrotour/resources/Metwp.htm. </note>
Reference-contexts: And workflow vendors are also rushing to the Web, e.g., Action Workflow Metro from Action Technologies <ref> [64] </ref>. One can easily imagine multiple workflow engines accessing the same task execution resource | particularly if only the task execution broker is centralized, directing tasks to distributed hosts as in WebMake [3].
Reference: [65] <author> Andrew Z. Tong, Gail E. Kaiser, and Steven S. Popovich. </author> <title> A flexible rule-chaining engine for process-based software engineering. </title> <booktitle> In 9th Knowledge-Based Software Engineering Conference, </booktitle> <pages> pages 79-88, </pages> <address> Monterey CA, September 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Oz's new "guidance chaining" already supports delegation of rules, and all subsequent chaining from those rules, to agendas <ref> [65] </ref>. The Oz process engine could alternatively simulate a full rule chain, with all alternatives, to unfold all predecessor/successor possibilities for the process task server (note the availability of backward chaining implies that not all predecessors have been exercised at the time a task is considered for execution).
Reference: [66] <author> Giuseppe Valetto and Gail E. Kaiser. </author> <title> Enveloping sophisticated tools into process-centered environments. </title> <journal> Automated Software Engineering. </journal> <note> In press. Also available as Columbia University Department of Computer Science, CUCS-022-95, revised March 1996. </note>
Reference-contexts: Oz sites are somewhere in between, with one server per site (i.e., per team), generally employing user clients inherited from Marvel but also supporting "proxy clients" that fork tools on behalf of one or more users under various circumstances <ref> [66] </ref>. Mentor is similar to Oz in that user clients can connect to multiple servers in the federation. 3. Decentralized process enactment and centralized task execution. At first glance this model does not seem very useful, but it would support sharing of special computational or database resources for task execution. <p> Another major avenue of future research is to consider federation of PCEs in their role as tool integrators, i.e., the tools invoked during task execution directed by process enactment. This would extend the work we conducted in <ref> [67, 66] </ref> to facilitate remote execution of tools that "belong" to a remote SubEnv (in either the homogeneous or heterogeneous case), while for now we assume all tools are executed by local users and/or are available at all participating sites.
Reference: [67] <author> Giuseppe Valetto and Gail E. Kaiser. </author> <title> Enveloping sophisticated tools into computer-aided software engineering environments. </title> <booktitle> In IEEE 7th International Workshop on Computer-Aided Software Engineering, </booktitle> <pages> pages 40-48, </pages> <address> Toronto Ontario, Canada, </address> <month> July </month> <year> 1995. </year> <month> 43 </month>
Reference-contexts: Built-in operations such as add an object, delete an object, etc., are modeled as rules for a uniform approach. Oz provides means for modeling and enacting synchronous and asynchronous "groupware" tools <ref> [67, 16] </ref>, but the details are not relevant to this paper. Oz supports object-oriented data definition and query languages. <p> executing) client connected to its server, because the server automatically shuts itself down when there are no more active clients (and is automatically started up on demand by 5 Oz actually supports several kinds of user and tool management clients, but the distinctions are not germane to this paper; see <ref> [59, 67, 21] </ref>. 6 An extension of this model, in which clients can be disconnected from their server and continue to operate independently to enact a process segment until reconnection, has been investigated separately to support mobile computing [60]. 15 16 the Connection Server, as will be explained shortly). 7 In <p> messages from the server and does something different than the typical user client; in fact, we've already introduced numerous special-purpose clients where the server tells the client for one reason or another about 36 the activity to be carried out (only a few of these have been written up, see <ref> [44, 59, 67] </ref>). The process state server could be that new client, to implement point 1. Similarly, we could implement point 2 by treating the task server as the "client" in this same protocol. <p> Another major avenue of future research is to consider federation of PCEs in their role as tool integrators, i.e., the tools invoked during task execution directed by process enactment. This would extend the work we conducted in <ref> [67, 66] </ref> to facilitate remote execution of tools that "belong" to a remote SubEnv (in either the homogeneous or heterogeneous case), while for now we assume all tools are executed by local users and/or are available at all participating sites.
Reference: [68] <author> M. Rusinkiewicz W. Jin, L. Ness and A. Sheth. </author> <title> Concurrency control and recovery of multi-database work flows in telecommunication applications. </title> <booktitle> In ACM SIGMOD Conference on Management of Data, </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: This is related to the transactional workflow concern in the database community; e.g., Meteor <ref> [68] </ref> incorporates a variety of repositories with and without their own transaction management.
Reference: [69] <author> Kurt Wallnau, Fred Long, and Anthony Earl. </author> <title> Toward a distributed, mediated architecture for workflow management. In NSF Workshop on Workflow and Process Automation in Information Systems: State-of-the-Art and Future Directions, </title> <address> Athens GA, </address> <month> May </month> <year> 1996. </year> <note> Position paper. In press. </note>
Reference-contexts: Instead, a new moderator component is attached to the SubEnv as a whole and communicates with each of the other local components as well as with the Foundation. However, a direct-peer-to-peer architecture is not inconceivable <ref> [69] </ref>. To summarize, the four categories represent different degrees of (de)centralization of the Foundation, ranging from a logically and physically centralized architecture, to a logically and physically decentralized architecture. Our key observation is that there is no one architectural style for federated PCEs that is superior to all others. <p> Both the homogeneous and heterogeneous federation architectures we present are in line with a proposed distributed workflow reference model <ref> [69] </ref>. * The design of a specific homogeneous federation architecture in Oz, described in sufficient detail to permit adaptation by another party to extend their own single-site PCE architecture to multi-site, as we did going from Marvel to Oz. * A presentation of the issues that must be addressed to integrate
Reference: [70] <author> Jeanine Weissenfels, Dirk Wodtke, Gerhard Weikum, and Angelika Kotz-Dittrich. </author> <title> The Mentor architecture for enterprise-wide workflow management. In NSF Workshop on Workflow and Process Automation in Information Systems: State-of-the-Art and Future Directions, </title> <address> Athens GA, </address> <month> May </month> <year> 1996. </year> <note> Position paper. In press. </note>
Reference-contexts: Any sharing of product artifacts, as opposed to process state, is implicit in the data information included with posted tasks. As in Oz, each site might autonomously devise its own process model. Mentor <ref> [70] </ref> is similar to ProcessWall but divides the process state/task server into two components: a worklist manager acting as a pure task server and a history manager corresponding to a pure state server; data sharing is factored out as in ProcessWall. <p> Centralized process enactment and decentralized task execution: A process server maintains the state of the process, controls its enactment, and synchronizes access to shared resources, but the tasks themselves execute at process clients. Marvel 3.x [17], ProcessWEAVER [22], and Mentor <ref> [70] </ref> fit this mold, albeit in different ways. Marvel (the single-site predecessor of Oz) relies on fixed user clients to execute tasks, whereas ProcessWEAVER spawns user "work contexts" as needed by the process.
Reference: [71] <author> Jack Jingshuang Yang and Gail E. Kaiser. </author> <title> An architecture for integrating oodbs with www. In 5th International World Wide Web Conference, </title> <address> Paris, France, </address> <month> May </month> <year> 1996. </year> <note> In press. 44 </note>
Reference-contexts: This should be followed by hybrid federations mixing and matching multiple PCE and CSCW components, perhaps based on a decentralized hypermedia infrastructure such as the World Wide Web; see <ref> [71] </ref> for a possible substrate for this direction. Another major avenue of future research is to consider federation of PCEs in their role as tool integrators, i.e., the tools invoked during task execution directed by process enactment.
References-found: 71

