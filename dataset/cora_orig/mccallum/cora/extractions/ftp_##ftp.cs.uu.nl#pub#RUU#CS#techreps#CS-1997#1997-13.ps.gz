URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1997/1997-13.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: e-mail: cf@di.fct.unl.pt  
Phone: tel: +351-1-294 85 36, fax: +351-1- 294 85 41,  
Title: Recursively defined (quasi) orders on terms  
Author: M. C. F. Ferreira 
Keyword: Path Orders, term rewriting, semantic path order recursive path order lexicographic path order, Knuth-Bendix order  
Note: Contents  
Address: Quinta da Torre 2825 Monte da Caparica, Portugal,  
Affiliation: Dep. de Informatica, Fac. Ci^encias e Tecnologia, Univ. Nova de Lisboa  
Abstract: We study the problems involved in the recursive definition of (quasi) orders on terms, focussing on the question of establishing well-definedness, and the properties required for partial and quasi-orders: irreflexivity and transitivity, and reflexivity and transitivity, respectively. These properties are in general difficult to establish and this has in many cases come down in the literature as folklore results. Here we present a general scheme that allows us to show that relations are well-defined and represent partial or quasi-orders. Known path orders as semantic, recursive and lexicographic path order as well as Knuth-Bendix order fit into the scheme. Additionally we will also discuss how to obtain other properties commonly found in term orders (amongst which well-foundedness) as an integrated feature of the scheme. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Davey, B. A., and Priestley, H. A. </author> <title> Introduction to Lattices and Order. </title> <publisher> Cambridge Mathematical Textbooks. Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1991. </year>
Reference-contexts: A possibility is to require A to be a CPO and f to be continuous. We now introduce these concepts. For more detailed information, see for example Davey and Priestley <ref> [1] </ref>. Definition 2.17. Let (P; &gt;) be a poset and let S be a subset of P . An element p 2 P is named an upper bound for S if it satisfies p s, for all s 2 S. <p> Furthermore if _ f n (?) is a fixed point then it is the least fixed-point. 2. if f is continuous then f has a least fixed point given by _ f n (?). For a proof of these statements see <ref> [1] </ref>. Note that the set ff n (?)j n 0g is a directed set and so the supremum is well-defined. 2.2 Terms and Rewriting Systems We introduce some notions over terms and rewriting needed in the sequel.
Reference: [2] <author> Dershowitz, N. </author> <title> Orderings for term rewriting systems. </title> <booktitle> In Proc. 20th Annual Symp. on Foundations of Computer Science (1979), </booktitle> <editor> S. R. Kosaraju, </editor> <publisher> Ed., </publisher> <pages> pp. 123-131. </pages>
Reference-contexts: The different ways of doing this subterm's comparison give rise to different path orders. Path orders originated with the work of Plaisted (path of subterms orderings [20, 21]) and Dershowitz (recursive path order <ref> [2, 3] </ref>) at the end of the seventies. Since then other orders have been proposed and the original ones improved; examples of such orders include the lexicographic path order [13], the recursive decomposition ordering [12], the path ordering [14]. <p> Definition 2.26. Let F be a signature and 2 a constant not occurring in F . A (linear) context is a term over T (F [ f2g; X ) with exactly one occurrence of 2 (the trivial context). Given a context C <ref> [2] </ref> (also denoted by C [ ]) and a term t 2 T (F ; X ), C [t] denotes the term obtained by replacing the occurrence of 2 by t.
Reference: [3] <author> Dershowitz, N. </author> <title> Orderings for term rewriting systems. </title> <booktitle> Theoretical Computer Science 17, 3 (1982), </booktitle> <pages> 279-301. </pages>
Reference-contexts: The different ways of doing this subterm's comparison give rise to different path orders. Path orders originated with the work of Plaisted (path of subterms orderings [20, 21]) and Dershowitz (recursive path order <ref> [2, 3] </ref>) at the end of the seventies. Since then other orders have been proposed and the original ones improved; examples of such orders include the lexicographic path order [13], the recursive decomposition ordering [12], the path ordering [14]. <p> Many if not all of the orders known in the literature are instances of the schemes presented. As an example we show how four of the most representative path orders, namely recursive path order <ref> [3, 4] </ref>, semantic path order [13], lexicographic path order [13], and Knuth-Bendix order [16], fit in the scheme. The rest of the paper is organized as follows.
Reference: [4] <author> Dershowitz, N. </author> <title> Termination of rewriting. </title> <journal> Journal of Symbolic Computation 3, </journal> <volume> 1 and 2 (1987), </volume> <pages> 69-116. </pages>
Reference-contexts: Many if not all of the orders known in the literature are instances of the schemes presented. As an example we show how four of the most representative path orders, namely recursive path order <ref> [3, 4] </ref>, semantic path order [13], lexicographic path order [13], and Knuth-Bendix order [16], fit in the scheme. The rest of the paper is organized as follows. <p> our framework (see [9, 8]); for the sake of simplicity and because we believe that dealing with the more complicated cases would not add anything to the understanding of the mechanism, we choose not to treat those cases here. 3.4.1 rpo The following definition of rpo is due to Dershowitz <ref> [4] </ref>. Definition 3.30. (rpo) Let ffi be a quasi-order in the set F . <p> The reader should note the similarity between po and spo : po is actually a general formulation of spo , being this generalization a consequence of the freer definition of status used. The following definition of spo extends the original one [13] to quasi-orders and can be found in <ref> [4] </ref>. Definition 3.31. (spo) Let be a well-founded quasi-order on T (F ).
Reference: [5] <author> Dershowitz, N., and Jouannaud, J.-P. </author> <title> Rewrite systems. </title> <booktitle> In Handbook of Theoretical Computer Science, </booktitle> <editor> J. van Leeuwen, Ed., </editor> <volume> vol. </volume> <publisher> B. Elsevier, </publisher> <year> 1990, </year> <journal> ch. </journal> <volume> 6, </volume> <pages> pp. 243-320. </pages>
Reference-contexts: More complete information about term rewriting and its applications can be found in the surveys of Klop [15], Dershowitz and Jouannaud <ref> [5] </ref>, and Plaisted [22].
Reference: [6] <author> Dershowitz, N., and Manna, Z. </author> <title> Proving termination with multiset orderings. </title> <journal> Communications ACM 22, </journal> <volume> 8 (1979), </volume> <pages> 465-476. </pages>
Reference-contexts: Elements of S k , for any k, are denoted by hs 1 s k i, where "" denotes concatenation. 5 We now consider posets and define the multiset and lexicographic extension of the orders. The following definition is due to Dershowitz and Manna <ref> [6] </ref>. Definition 2.9. Let (S; &gt;) be a poset. <p> The following lemma is proven in <ref> [6] </ref>. Lemma 2.10. If (S; &gt;) is a poset then (M (S); &gt; mul ) is also a poset. Furthermore, &gt; is well-founded (respectively total) on S if and only if &gt; mul is well-founded (respectively total) on M (S). Definition 2.11. Let (S; &gt;) be a poset.
Reference: [7] <author> Dick, J., Kalmus, J., and Martin, U. </author> <title> Automating the Knuth Bendix ordering. </title> <journal> Acta Informatica 28 (1990), </journal> <pages> 95-119. </pages>
Reference-contexts: In its simplest form (see [26] for extensions) a weight is a natural number which is associated to each function or variable symbol and which is then extended uniquely to terms. We will consider a definition of weight and of the kbo similar to the one presented in <ref> [7] </ref>, however we extend the precedence to be a quasi-order in F and allow for more than one maximum element in F with arity one and weight zero. Other more general possibilities for weight functions do exist.
Reference: [8] <author> Ferreira, M. C. F. </author> <title> Recursively defined term orders. </title> <booktitle> In Proceedings of the APPIA-GULP-PRODE International Conference on Declarative Programming (1996), </booktitle> <institution> Universidad del Pas Vasco. </institution>
Reference-contexts: It is not difficult to see that these variations are still within our framework (see <ref> [9, 8] </ref>); for the sake of simplicity and because we believe that dealing with the more complicated cases would not add anything to the understanding of the mechanism, we choose not to treat those cases here. 3.4.1 rpo The following definition of rpo is due to Dershowitz [4].
Reference: [9] <author> Ferreira, M. C. F. </author> <title> Termination of Term Rewriting - Well-foundedness, totality and transformations. </title> <type> PhD thesis, </type> <institution> Universiteit Utrecht, </institution> <month> November </month> <year> 1995. </year> <month> 43 </month>
Reference-contexts: substantially simpler than establishing well-definedness, (ir)reflexivity and transitivity. * the abstraction provided by the scheme allows for a better understanding of the mechanisms behind the definition of these orders and the scheme itself can be used for defining new path orders; furthermore, the scheme can be combined with results from <ref> [9, 10] </ref>, in order to ensure well-foundedness of the orders. Many if not all of the orders known in the literature are instances of the schemes presented. <p> Consider the following rewrite system: f (f (x)) ! f (g (f (x))) This rewrite system is terminating: we sketch a proof of termination. It is well-known that the system consisting only of the first rule is terminating (see for example <ref> [9] </ref> for a proof of termination); thus we can say that there is some algebra (A; &gt; A ), with &gt; A being a well-founded partial order, where terms are interpreted and such that if s ! t (using that rule) then (s) &gt; A (t), being the interpretation function. <p> Roughly this theorem implies that any simplification ordering (an order closed under substitutions and contexts and satisfying the subterm property) is well-founded; clearly it cannot be applied to non-simplification orderings, so Kruskal's theorem cannot help us prove well-foundedness of our orders, which are not, in general, simplification orderings. In <ref> [10, 9] </ref> the problem of proving well-foundedness of (quasi) orders was studied and simple sufficient conditions are given; these results apply also to orders which are not closed under contexts and/or substitutions. The following definition and theorem are taken from [10, 9], slightly modified in order to fit the quasi-order framework. <p> In <ref> [10, 9] </ref> the problem of proving well-foundedness of (quasi) orders was studied and simple sufficient conditions are given; these results apply also to orders which are not closed under contexts and/or substitutions. The following definition and theorem are taken from [10, 9], slightly modified in order to fit the quasi-order framework. Definition 3.27. <p> (F ; X ) then fl () is well-founded in A = ff (t 1 ; : : : ; t k ) : f =k 2 F [ X ; k 0; and t i 2 A for all 1 i kg. 2 Term status in the terminology of <ref> [10, 9] </ref>. 25 Theorem 3.28. Let be a quasi-order on T (F ; X ) and let be a well-foundedness stable status. <p> It is not difficult to see that these variations are still within our framework (see <ref> [9, 8] </ref>); for the sake of simplicity and because we believe that dealing with the more complicated cases would not add anything to the understanding of the mechanism, we choose not to treat those cases here. 3.4.1 rpo The following definition of rpo is due to Dershowitz [4]. <p> Again Kruskal's theorem is not enough to help prove well-foundedness of the order obtained via the partial order scheme since the resulting order may not be a simplification ordering. As we did in section 3.3.4, we use results from <ref> [10, 9] </ref> to provide a sufficient condition for ensuring well-foundedness of po . The following definition and theorem are taken from [10, 9]. Definition 4.19. <p> As we did in section 3.3.4, we use results from <ref> [10, 9] </ref> to provide a sufficient condition for ensuring well-foundedness of po . The following definition and theorem are taken from [10, 9]. Definition 4.19. <p> quasi-orders by the corresponding results for partial orders. 2 4.4 Lexicographic path order and Knuth-Bendix order Here we show how the lexicographic path order , abbreviatedly lpo, and the Knuth-Bendix order , abbreviatedly kbo, can be obtained as instances of the scheme presented. 4 Term status in the terminology of <ref> [10, 9] </ref>. 37 4.4.1 lpo The lexicographic path order was originally proposed by Kamin and Levy [13] and is very similar to recursive path order : instead of comparing multisets of principal subterms, a lexicographic comparison is performed.
Reference: [10] <author> Ferreira, M. C. F., and Zantema, H. </author> <title> Well-foundedness of term orderings. </title> <booktitle> In Proceed--ings of CTRS 94 (1994), vol. 968 of LNCS, </booktitle> <publisher> Springer, </publisher> <pages> pp. 106-123. </pages>
Reference-contexts: substantially simpler than establishing well-definedness, (ir)reflexivity and transitivity. * the abstraction provided by the scheme allows for a better understanding of the mechanisms behind the definition of these orders and the scheme itself can be used for defining new path orders; furthermore, the scheme can be combined with results from <ref> [9, 10] </ref>, in order to ensure well-foundedness of the orders. Many if not all of the orders known in the literature are instances of the schemes presented. <p> Roughly this theorem implies that any simplification ordering (an order closed under substitutions and contexts and satisfying the subterm property) is well-founded; clearly it cannot be applied to non-simplification orderings, so Kruskal's theorem cannot help us prove well-foundedness of our orders, which are not, in general, simplification orderings. In <ref> [10, 9] </ref> the problem of proving well-foundedness of (quasi) orders was studied and simple sufficient conditions are given; these results apply also to orders which are not closed under contexts and/or substitutions. The following definition and theorem are taken from [10, 9], slightly modified in order to fit the quasi-order framework. <p> In <ref> [10, 9] </ref> the problem of proving well-foundedness of (quasi) orders was studied and simple sufficient conditions are given; these results apply also to orders which are not closed under contexts and/or substitutions. The following definition and theorem are taken from [10, 9], slightly modified in order to fit the quasi-order framework. Definition 3.27. <p> (F ; X ) then fl () is well-founded in A = ff (t 1 ; : : : ; t k ) : f =k 2 F [ X ; k 0; and t i 2 A for all 1 i kg. 2 Term status in the terminology of <ref> [10, 9] </ref>. 25 Theorem 3.28. Let be a quasi-order on T (F ; X ) and let be a well-foundedness stable status. <p> Again Kruskal's theorem is not enough to help prove well-foundedness of the order obtained via the partial order scheme since the resulting order may not be a simplification ordering. As we did in section 3.3.4, we use results from <ref> [10, 9] </ref> to provide a sufficient condition for ensuring well-foundedness of po . The following definition and theorem are taken from [10, 9]. Definition 4.19. <p> As we did in section 3.3.4, we use results from <ref> [10, 9] </ref> to provide a sufficient condition for ensuring well-foundedness of po . The following definition and theorem are taken from [10, 9]. Definition 4.19. <p> quasi-orders by the corresponding results for partial orders. 2 4.4 Lexicographic path order and Knuth-Bendix order Here we show how the lexicographic path order , abbreviatedly lpo, and the Knuth-Bendix order , abbreviatedly kbo, can be obtained as instances of the scheme presented. 4 Term status in the terminology of <ref> [10, 9] </ref>. 37 4.4.1 lpo The lexicographic path order was originally proposed by Kamin and Levy [13] and is very similar to recursive path order : instead of comparing multisets of principal subterms, a lexicographic comparison is performed.
Reference: [11] <author> Gallier, J. H. </author> <title> What's so special about Kruskal's theorem and the ordinal 0 ? A survey of some results in proof theory. </title> <booktitle> Annals of Pure and Applied Logic 53 (1991), </booktitle> <pages> 199-260. </pages>
Reference: [12] <author> Jouannaud, J.-P., Lescanne, P., and Reinig, F. </author> <title> Recursive decomposition ordering. </title> <booktitle> In Working Conference on Formal Description of Programming Concepts II (IFIP) (1982), </booktitle> <editor> D. Bjtrner, Ed., </editor> <publisher> North-Holland Publising Company, </publisher> <pages> pp. 331 - 353. </pages>
Reference-contexts: Since then other orders have been proposed and the original ones improved; examples of such orders include the lexicographic path order [13], the recursive decomposition ordering <ref> [12] </ref>, the path ordering [14]. Based on the earlier examples, others have been proposed and a lot of work has been done on generalizing and improving existing ones (see [18, 23]). For an exhaustive account on path orders and their history, see [26].
Reference: [13] <author> Kamin, S., and L evy, J. J. </author> <title> Attempts for generalizing the recursive path orderings. </title> <institution> University of Illinois, </institution> <year> 1980. </year>
Reference-contexts: Path orders originated with the work of Plaisted (path of subterms orderings [20, 21]) and Dershowitz (recursive path order [2, 3]) at the end of the seventies. Since then other orders have been proposed and the original ones improved; examples of such orders include the lexicographic path order <ref> [13] </ref>, the recursive decomposition ordering [12], the path ordering [14]. Based on the earlier examples, others have been proposed and a lot of work has been done on generalizing and improving existing ones (see [18, 23]). For an exhaustive account on path orders and their history, see [26]. <p> Many if not all of the orders known in the literature are instances of the schemes presented. As an example we show how four of the most representative path orders, namely recursive path order [3, 4], semantic path order <ref> [13] </ref>, lexicographic path order [13], and Knuth-Bendix order [16], fit in the scheme. The rest of the paper is organized as follows. In sec. 2 we introduce some needed notions about Complete Partial Orders and most of the terminology/notions on terms that are used through out out the paper. <p> Many if not all of the orders known in the literature are instances of the schemes presented. As an example we show how four of the most representative path orders, namely recursive path order [3, 4], semantic path order <ref> [13] </ref>, lexicographic path order [13], and Knuth-Bendix order [16], fit in the scheme. The rest of the paper is organized as follows. In sec. 2 we introduce some needed notions about Complete Partial Orders and most of the terminology/notions on terms that are used through out out the paper. <p> s t, or (c) s ~ t and s eq (fl ( po )) t, and for all 1 j k we have that t po s j and :(s j po t); or The quasi-order po bears a striking similarity with the usual definition of spo (Kamin and Levy <ref> [13] </ref>). <p> Therefore fl is a well-foundedness stable status and we can state (cf. theorem 3.29) that if ffi is well-founded on F then rpo is well-founded on T (F ; X ). The reverse statement also holds. 28 3.4.2 spo The definition of spo is due to Kamin and Levy <ref> [13] </ref>. The reader should note the similarity between po and spo : po is actually a general formulation of spo , being this generalization a consequence of the freer definition of status used. The following definition of spo extends the original one [13] to quasi-orders and can be found in [4]. <p> of spo is due to Kamin and Levy <ref> [13] </ref>. The reader should note the similarity between po and spo : po is actually a general formulation of spo , being this generalization a consequence of the freer definition of status used. The following definition of spo extends the original one [13] to quasi-orders and can be found in [4]. Definition 3.31. (spo) Let be a well-founded quasi-order on T (F ). <p> It can be seen <ref> [13] </ref> that &gt; spo satisfies the subterm property and is in general not mono tonic though closed under substitutions. <p> Here we show how the lexicographic path order , abbreviatedly lpo, and the Knuth-Bendix order , abbreviatedly kbo, can be obtained as instances of the scheme presented. 4 Term status in the terminology of [10, 9]. 37 4.4.1 lpo The lexicographic path order was originally proposed by Kamin and Levy <ref> [13] </ref> and is very similar to recursive path order : instead of comparing multisets of principal subterms, a lexicographic comparison is performed. Definition 4.22. (lpo) Let ffi be a quasi-order in the set F .
Reference: [14] <author> Kapur, D., Narendran, P., and Sivakumar, G. </author> <title> A path ordering for proving termination of term rewriting systems. </title> <booktitle> In Proc. 10th CAAP (1985), </booktitle> <editor> H. Ehrig, Ed., </editor> <volume> vol. </volume> <publisher> 185 of LNCS, Springer, </publisher> <pages> pp. 173 - 187. </pages>
Reference-contexts: Since then other orders have been proposed and the original ones improved; examples of such orders include the lexicographic path order [13], the recursive decomposition ordering [12], the path ordering <ref> [14] </ref>. Based on the earlier examples, others have been proposed and a lot of work has been done on generalizing and improving existing ones (see [18, 23]). For an exhaustive account on path orders and their history, see [26].
Reference: [15] <author> Klop, J. W. </author> <title> Term rewriting systems. </title> <booktitle> In Handbook of Logic in Computer Science, </booktitle> <editor> S. Abram-sky, D. M. Gabbay, and T. S. E. Maibaum, Eds., </editor> <volume> vol. II. </volume> <publisher> Oxford University Press, </publisher> <year> 1992, </year> <pages> pp. 1-116. </pages>
Reference-contexts: More complete information about term rewriting and its applications can be found in the surveys of Klop <ref> [15] </ref>, Dershowitz and Jouannaud [5], and Plaisted [22].
Reference: [16] <author> Knuth, D. E., and Bendix, P. </author> <title> Simple words problems in Universal Algebras. In Computational Problems in Abstract Algebras, </title> <editor> J. Leech, Ed. </editor> <publisher> Pergamon Press, </publisher> <year> 1970, </year> <pages> pp. 263-297. </pages>
Reference-contexts: Many if not all of the orders known in the literature are instances of the schemes presented. As an example we show how four of the most representative path orders, namely recursive path order [3, 4], semantic path order [13], lexicographic path order [13], and Knuth-Bendix order <ref> [16] </ref>, fit in the scheme. The rest of the paper is organized as follows. In sec. 2 we introduce some needed notions about Complete Partial Orders and most of the terminology/notions on terms that are used through out out the paper. <p> Whatever solution one choses, it is routine work to verify that well-foundedness of &gt; lpo in this cases can be obtained via theorem 4.21. 4.4.2 kbo The Knuth-Bendix order was originally proposed by Knuth and Bendix <ref> [16] </ref>. It is a path order of a different kind since not only is the syntactical structure of terms used for the comparison but also a "semantical" component which associates weights to terms.
Reference: [17] <author> Kruskal, J. </author> <title> Well-quasi-ordering, the tree theorem, and Vazsonyi's conjecture. </title> <journal> Trans. American Mathematical Society 95 (1960), </journal> <pages> 210-225. </pages>
Reference: [18] <author> Lescanne, P. </author> <title> On the recursive decomposition ordering with lexicographical status and other related orderings. </title> <booktitle> Journal of Automated Reasoning 6 (1990), </booktitle> <pages> 39-49. </pages>
Reference-contexts: Based on the earlier examples, others have been proposed and a lot of work has been done on generalizing and improving existing ones (see <ref> [18, 23] </ref>). For an exhaustive account on path orders and their history, see [26]. When giving a recursive definition of a path order, several problems are posed.
Reference: [19] <author> Nash-Williams, C. S. J. A. </author> <title> On well-quasi ordering finite trees. </title> <journal> Proc. Cambridge Phil. Soc. </journal> <volume> 59 (1963), </volume> <pages> 833-835. </pages>
Reference: [20] <author> Plaisted, D. A. </author> <title> A recursively defined ordering for proving termination of term rewriting systems. </title> <type> Tech. Rep. </type> <institution> UIUCDCS-R-78-943, Department of Computer Science, University of Illinois at Urbana-Champaign, Urbana (Illinois), </institution> <year> 1978. </year>
Reference-contexts: The different ways of doing this subterm's comparison give rise to different path orders. Path orders originated with the work of Plaisted (path of subterms orderings <ref> [20, 21] </ref>) and Dershowitz (recursive path order [2, 3]) at the end of the seventies. Since then other orders have been proposed and the original ones improved; examples of such orders include the lexicographic path order [13], the recursive decomposition ordering [12], the path ordering [14].
Reference: [21] <author> Plaisted, D. A. </author> <title> Well-founded orderings for proving termination of systems of rewrite rules. </title> <type> Tech. Rep. </type> <institution> UIUCDCS-R-78-932, Department of Computer Science, University of Illinois at Urbana-Champaign, Urbana (Illinois), </institution> <year> 1978. </year>
Reference-contexts: The different ways of doing this subterm's comparison give rise to different path orders. Path orders originated with the work of Plaisted (path of subterms orderings <ref> [20, 21] </ref>) and Dershowitz (recursive path order [2, 3]) at the end of the seventies. Since then other orders have been proposed and the original ones improved; examples of such orders include the lexicographic path order [13], the recursive decomposition ordering [12], the path ordering [14].
Reference: [22] <author> Plaisted, D. A. </author> <title> Equational reasoning and term rewriting systems. </title> <booktitle> In Handbook of Logic in Artificial Intelligence and Logic Programming, </booktitle> <editor> D. Gabbay, C. J. Hogger, and J. A. Robinson, Eds., </editor> <volume> vol. </volume> <booktitle> 1 Logical Foundations. </booktitle> <publisher> Oxford Science Publications, Clarendon Press Oxford, </publisher> <year> 1993, </year> <pages> pp. 273-364. </pages>
Reference-contexts: More complete information about term rewriting and its applications can be found in the surveys of Klop [15], Dershowitz and Jouannaud [5], and Plaisted <ref> [22] </ref>.
Reference: [23] <author> Rusinowitch, M. </author> <title> On termination of the direct sum of term rewriting systems. </title> <booktitle> Information Processing Letters 26 (1987), </booktitle> <pages> 65-70. 44 </pages>
Reference-contexts: Based on the earlier examples, others have been proposed and a lot of work has been done on generalizing and improving existing ones (see <ref> [18, 23] </ref>). For an exhaustive account on path orders and their history, see [26]. When giving a recursive definition of a path order, several problems are posed.
Reference: [24] <author> Steinbach, J. </author> <title> Extensions and comparison of simplification orderings. </title> <booktitle> In Proceedings of the 3rd Conference on Rewriting Techniques an Applications (1989), </booktitle> <editor> N. Dershowitz, Ed., </editor> <volume> vol. </volume> <booktitle> 355 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer, </publisher> <pages> pp. 434-448. </pages>
Reference-contexts: We will restrict ourselves to the "pure" versions of these orders in which the extension associated to the orders is either the multiset extension or the lexicographic extension. In the last years other extensions have been proposed (see eg. <ref> [24, 25] </ref>), notably mixing the two before mentioned extensions.
Reference: [25] <author> Steinbach, J. </author> <title> Termination of Rewriting Extension, Comparison and Automatic Generation of Simplification Orderings. </title> <type> PhD thesis, </type> <institution> University of Kaiserslautern, </institution> <year> 1994. </year>
Reference-contexts: We will restrict ourselves to the "pure" versions of these orders in which the extension associated to the orders is either the multiset extension or the lexicographic extension. In the last years other extensions have been proposed (see eg. <ref> [24, 25] </ref>), notably mixing the two before mentioned extensions.
Reference: [26] <author> Steinbach, J. </author> <title> Simplification Orderings: History of results. </title> <note> Fundamenta Informaticae 24 (1995), 47-87. </note>
Reference-contexts: Based on the earlier examples, others have been proposed and a lot of work has been done on generalizing and improving existing ones (see [18, 23]). For an exhaustive account on path orders and their history, see <ref> [26] </ref>. When giving a recursive definition of a path order, several problems are posed. One of them is well-definedness of the order, i. e., one should see that an object of the sort that is being defined exists. <p> It is a path order of a different kind since not only is the syntactical structure of terms used for the comparison but also a "semantical" component which associates weights to terms. In its simplest form (see <ref> [26] </ref> for extensions) a weight is a natural number which is associated to each function or variable symbol and which is then extended uniquely to terms.
Reference: [27] <author> Zantema, H. </author> <title> Termination of term rewriting. </title> <type> Tech. rep., </type> <institution> University of Utrecht, </institution> <year> 1997. </year> <note> To appear. 45 </note>
Reference-contexts: Other more general possibilities for weight functions do exist. In <ref> [27] </ref> a general weight function is given using an interpretation of terms in a weakly monotone algebra. In the following we assume lexicographic extension as defined in 2.11. Definition 4.24.
References-found: 27

