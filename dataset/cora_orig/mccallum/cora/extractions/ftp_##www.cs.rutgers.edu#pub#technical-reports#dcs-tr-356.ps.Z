URL: ftp://www.cs.rutgers.edu/pub/technical-reports/dcs-tr-356.ps.Z
Refering-URL: http://www.cs.rutgers.edu/pub/technical-reports/
Root-URL: 
Email: fborgida,muratag@cs.rutgers.edu  
Title: A Unified Framework for Exceptions in Workflow and Process Models An Approach based on Persistent
Author: Alex Borgida and Takahiro Murata 
Note: On the other  Unlike most previous work, the  
Date: January 1998  
Address: New Brunswick, NJ 08903  
Affiliation: Dept. of Computer Science Rutgers University  
Abstract: The need for flexibility in workflows and the problem of unanticipated exceptions are well recognized, and in fact a number of solutions have already been proposed in areas such as computer-supported collaborative work and software process modeling. This paper presents a framework for treating both kinds of exceptions uniformly by applying ideas from programming language exception handling (but where the responsible agents of workflows are allowed to handle exceptions on-line) to a situation where most aspects of workflows have been reified as persistent objects in special classes and with special attributes. As a result, only a small number of new constructs need to be introduced, and power is achieved through orthogonality. Also as a departure from prior efforts, the paper takes the view that the evolution of the schema (workflow or data) is a different problem from that of individual exceptions, but that a limited form of incremental evolution providing exception handlers ahead of time is a useful abstraction mechanism to help organize the details of complex workflows. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K.R. Abbott, </author> <title> S.K. Sarin, "Experiences with Workflow Management: Issues for the Next Generation", </title> <booktitle> in the Proceedings of ACM Conference on Computer Supported Collaborative Work (CSCW94), </booktitle> <address> Chapel Hill, NC, </address> <year> 1994. </year>
Reference-contexts: For example, InConcert allows a workcase to be modified by allowing tasks or dependencies to be added/removed, roles reassigned, etc. <ref> [1] </ref>. However, we believe that in most cases the mechanisms considered so far suffer from a number of failings, including being either too specific/ad-hoc (e.g., restricted to forms handling [24]) or too powerful (e.g., allowing arbitrary editing of the schema), and giving insufficient consideration to the consequences of having exceptions.
Reference: [2] <author> Alonso, G., Agrawal, D., El Abbadi, A., Kamath, M., Guenthoer, R., Mohan, C. </author> <title> "Advanced Transaction Models in Workflow Contexts", </title> <booktitle> Proc. 12th International Conference on Data Engineering, </booktitle> <address> New Orleans, </address> <month> February </month> <year> 1996. </year>
Reference-contexts: In fact this feature can support an important form of program abstraction: dealing with normal cases first, and relegating special cases as the handling of exceptions to "normalcy conditions." 4 Because much prior database work on workflows has concerned in some way advanced transaction models (see <ref> [2, 38] </ref> for reviews), it may be worth pointing out right from the beginning that the work presented here does not (yet) consider issues of concurrency control and recovery. <p> There is considerable work that remains to be done in completing our enterprise. Among others, we will need to take a closer look at the traditional issues of concurrency control and error recovery. As argued in <ref> [2, 38] </ref>, it might be the case that further research will yield better workflow-specific solutions to these issues than the standard Advanced Transaction Models. 18 In particular, we find quite interesting the proposal for a variety of ways of sharing documents in the APEL graphical process language [16], which is based <p> And in the spirit of <ref> [2] </ref>, we plan to examine the use of the exception mechanism (together with primitive transaction facilities like begin/commit/abort) as a way of providing programmable yet declarative simulations of ATM mechanisms.
Reference: [3] <author> R. </author> <title> Balzer Tolerating Inconsistency in Software Development, </title> <booktitle> Proceedings of the 13th International Conference on Software Engineering, </booktitle> <pages> pp. 158-165, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: For this reason, jane.age needs to be marked as exceptional. We do so using an instance of the special built-in class class EXNAL-ATTRIBUTE fonObj : OBJECT; attrib : ATTRIBUTE-ID g using syntax like new EXNAL-ATTRIBUTE (onObj=jane,attrib='age). (Balzer <ref> [3] </ref> has felicitously called such an object a pollution marker.) There is then a built-in constraint that any time such an attribute is being accessed or modified, an exception (which is exactly this pollution marker) is raised to alert the program or user, thus giving them a chance to decide whether <p> classified exception is handled by situation analysis and creating a new event handling rule and/or updating the rule base either at the instance level or at the type level of a procedure. 7 This idea is based on Balzer's exploration of the utility of exceptions in the software engineering context <ref> [3] </ref>, which in turn uses some of the technical notions in [9]. 17 6.3 Contributions Our primary objective has been to lay out a computational framework for providing generic, flexible, and disciplined means of exception handling in workflow/process enactment.
Reference: [4] <author> S. Bandinelli, A. Fuggetta, and C. Ghezzi. </author> <title> "Software Process Model Evolution in the SPADE Environment." </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> December </month> <year> 1993. </year>
Reference-contexts: Of course, the violation of even such assumptions and goals may be excused, but at least the responsibleAgent has been made aware of the potential problems. 6 Related work and conclusions 6.1 Exceptions vs. Evolution There have been a number of papers on the evolution of process models, including <ref> [12, 19, 4] </ref>, and some techniques for accommodating run-time exceptions are based on the use of schema-editors applied to running workflow instances (e.g., [35]). However, we believe there is an important distinction to be made between exceptional occurrences during workflow enactment (the topic of this paper) and workflow evolution. <p> There are relatively few constraints one can impose on the changes that can be made it is mostly a matter of cataloging the operations needed to achieve any goal. One important issue in schema evolution is what to do with existing individuals/on-going enactments. This issue has been addressed <ref> [19, 4] </ref> by finding invariants that should not be violated even during schema evolution. (We have argued earlier that these can be captured by our finalGoals for workflows.) On the other hand, as we have remarked in the introduction, our framework supports a limited additive form of evolution by codifying exception
Reference: [5] <author> Jay Banerjee, Won Kim, Hyoung-Joo Kim, Henry F. Korth: </author> <title> "Semantics and Implementation of Schema Evolution in Object-Oriented Databases." </title> <booktitle> Proc. ACM SIGMOD'87: </booktitle> <pages> 311-322 </pages>
Reference-contexts: However, we believe there is an important distinction to be made between exceptional occurrences during workflow enactment (the topic of this paper) and workflow evolution. The difference is analogous to the one between allowing exceptional individuals in a database (e.g., [9]) and schema evolution in a database (e.g., <ref> [5] </ref>). The latter task might be prompted by multiple occurrences of the former, but it is a different process, more like schema development.
Reference: [6] <author> J. Barron, </author> <title> "Dialogue and Process Design for Interactive Information Systems Using Taxis", </title> <booktitle> ACM SIGOA Conference, </booktitle> <year> 1982. </year>
Reference-contexts: This general approach was implicit in our original work on workflow-like scripts in Taxis <ref> [6] </ref> and explicit in our requirements modeling languages RML [23] and Telos [30]. It has been independently adopted by the InConcert [35] workflow product.
Reference: [7] <author> D.P. Bogia, </author> <title> S.M. Kaplan, "Flexibility and Control for Dynamic Workflows in the wOrlds Environment", </title> <booktitle> in Proceedings of the Conference on Organizational Computing Systems, Milpitas, </booktitle> <address> CA, </address> <month> November </month> <year> 1995. </year>
Reference-contexts: As future work we will be considering such a "pollution analysis" tool as support for users who are asked to choose which values are to be blamed for an exception. In what [32] calls the situated work camp, <ref> [7] </ref> is a report of a workflow system where activities are modeled as an executable network of obligations, a request from one person to other agents.
Reference: [8] <author> A.Borgida, J.Mylopoulos, </author> <title> H.K.T.Wong "Generalization as a basis for software specification", </title> <editor> M. Brodie, J. Mylopoulos, and J. Schmidt Editors, </editor> <booktitle> On Conceptual Modeling, </booktitle> <address> pp.87-114, </address> <publisher> Springer Verlag, </publisher> <year> 1984. </year>
Reference-contexts: It has been independently adopted by the InConcert [35] workflow product. Although we will not use this point in the present paper, this means that activity/workflow descriptions can also be organized into subclass hierarchies, with the usual concomitant advantages of abbreviation, reuse and change propagation due to inheritance (see <ref> [8] </ref>). 5.1 Elementary Activities. For our purposes, the most important attribute of an activity is responsibleAgent to be filled by some agent who has authority on achieving the goal of the activity.
Reference: [9] <author> A. Borgida, </author> <title> "Language Features for Flexible Handling of Exceptions in Information Systems", </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol 10, No.4, </volume> <month> December </month> <year> 1985, </year> <month> pp565-603. </month>
Reference-contexts: summarize the paper, these goals are accomplished by * reifying actions and workflows as instances of classes, and reifying states of actions as classes; * associating all exceptions with violations of constraints; * extending the discipline of exception handling learned from programming languages, and its application to persistent exceptional data <ref> [9] </ref>; * viewing membership in some of the system-defined class extents as a temporal database. In this paper we focus on dealing with unanticipated special cases, which we see as being taken care of by human role-players acting as on-line exception handlers. <p> language exception mechanisms offer a controlled, structured way in which those processes that are influenced by an exceptional event can participate in its resolution and either terminate, due to an unrecoverable error, or resume after appropriate repairs have been made. 4 Objects and Exceptions The fundamental motto of our approach <ref> [9] </ref> is An exception occurs when some constraint is violated In our case, every constraint will be associated with a class through an attribute, and so the constraint can be identified by the &lt;class name, attribute name&gt; pair. <p> The main advantages of the mechanism described in this section is that we do not have to weaken constraints (and thus weaken the ability to detect errors or to find efficient storage 3 Of course, it will be important to have ways of placing administrative controls over such actions; in <ref> [9] </ref> this is accomplished by creating an EXCUSE object that records who, when and why allowed the exceptional property in the database, as well as expiration date for the excuse. 9 structures) nor do we have to attempt the impossible, which is to anticipate all the kinds of facts that might <p> However, we believe there is an important distinction to be made between exceptional occurrences during workflow enactment (the topic of this paper) and workflow evolution. The difference is analogous to the one between allowing exceptional individuals in a database (e.g., <ref> [9] </ref>) and schema evolution in a database (e.g., [5]). The latter task might be prompted by multiple occurrences of the former, but it is a different process, more like schema development. <p> event handling rule and/or updating the rule base either at the instance level or at the type level of a procedure. 7 This idea is based on Balzer's exploration of the utility of exceptions in the software engineering context [3], which in turn uses some of the technical notions in <ref> [9] </ref>. 17 6.3 Contributions Our primary objective has been to lay out a computational framework for providing generic, flexible, and disciplined means of exception handling in workflow/process enactment. <p> class memberships encode the information maintained by the workflow engine for each workcase enactment (e.g., the current state, the next step), and are kept in the same database as the data needed by workflows. 2) The technique for handling exceptions, and especially for permitting exceptional values to persist, described in <ref> [9] </ref>, is extended so that it can be used to permit all the desired kinds of deviations from the norm both in data and process descriptions (e.g., specifying an exceptional, alternate next step and flow of control). 3) Responsible agents, or other users, are allowed to act as on-line exception handlers,
Reference: [10] <author> A. Borgida, </author> <title> "Description Logics in Data Management", </title> <journal> IEEE Transactions on Knowl--edge and Data Engineering, </journal> <month> October </month> <year> 1995. </year>
Reference-contexts: The WIDE system in fact provides an explicit exception facility, which is related to the one in this paper (Section 6). 1 This idea is suggested by both description logics <ref> [10] </ref> and the notation of X-SQL queries [25]. 5 ICN is a process, rather than document or message oriented workflow modeling languages. The steps of a workflow are either activities or control steps.
Reference: [11] <author> F. Casati, S. Ceri, B. Pernici, G. Pozzi. </author> <title> "Conceptual modeling of workflows",O-O ER'95, </title> <address> Gold Coast, Australia, </address> <publisher> Springer Verlag, </publisher> <month> Dec. </month> <pages> 12-15, </pages> <year> 1995. </year>
Reference-contexts: ICN has a quite powerful notation for control-flow (CICN), which is however more restrictive than arbitrary Petri-nets; it was the basis of the FlowPATH commercial product, and has been recently used by the WIDE project in Milan <ref> [11] </ref> as the basis of a prototype workflow system that is implemented using active database technology. <p> It is usual to describe the "enactment life-cycle" of an activity by providing a state transition diagram. Figure 1 is our elaboration of the diagram in <ref> [11] </ref> 5 . As indicated in the diagram, the workflow engine is normally in charge of moving the workflow instance from INERT to ENABLED to READY under the appropriate conditions. <p> This distinction between a main-line and deviations from it has also been studied and supported in a language for organizational description developed at MIT in the early 80's [27]. 6.2 Other closely related work As mentioned earlier, WIDE is a workflow system implemented using active database technology <ref> [11] </ref>, whose conceptual model is in some ways similar to ours (it is also based on the ICN framework, and has similar state transition diagram to ours). It facilitates the declarative specification of constraints and their error handling by associating condition-reaction pairs to each action.
Reference: [12] <author> F. Casati, S. Ceri, B. Pernici, G. Pozzi. </author> <title> "Workflow Evolution". </title> <type> ER '96 (Cottbus, </type> <institution> Germany).438-455 </institution>
Reference-contexts: Of course, the violation of even such assumptions and goals may be excused, but at least the responsibleAgent has been made aware of the potential problems. 6 Related work and conclusions 6.1 Exceptions vs. Evolution There have been a number of papers on the evolution of process models, including <ref> [12, 19, 4] </ref>, and some techniques for accommodating run-time exceptions are based on the use of schema-editors applied to running workflow instances (e.g., [35]). However, we believe there is an important distinction to be made between exceptional occurrences during workflow enactment (the topic of this paper) and workflow evolution.
Reference: [13] <author> Fabio Casati, Stefano Ceri, Barbara Pernici, Giuseppe Pozzi: </author> <title> "Deriving Active Rules for Workflow Enactment". </title> <booktitle> Proc. DEXA 1996: </booktitle> <pages> 94-115 </pages>
Reference-contexts: We note that although our presentation was couched in object-centered terminilogy, there is no obstacle to representing this information in ordinary relational tables, and using active rules, for example, to implement workflow enactment, as in <ref> [13] </ref>. There is considerable work that remains to be done in completing our enterprise. Among others, we will need to take a closer look at the traditional issues of concurrency control and error recovery.
Reference: [14] <author> G. Cugola, E. Di Nitto, C. Ghezzi, M. Mantione, </author> <title> "How To Deal With Deviations During Process Model Enactment", </title> <booktitle> Proceedings 17th International Conference on Software Engineering, </booktitle> <address> Seattle, WA, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: Similarly, run-time verification of the finalGoals should be performed when the activity is manually moved to the ENDED state, when it is exceptionally resumed after a failed initialTest or initialAssumption, or when a compound activity's coordination has been exceptionally changed. For example, both [19] and <ref> [14] </ref> give examples where during on-line changes of step ordering, one has to make sure that neither of the steps is omitted in the end. Such a condition should be expressed as a finalGoal for the corresponding workflow. <p> Exceptions in transactional workflows have of course been present almost from the beginning, including [17]. From the software-engineering process modeling camp, most relevant is the work on deviations during enactment <ref> [14] </ref>. This work distinguishes "tolerable" deviations (which are state transitions imposed in cases when the trigger constraint is still false) from intolerable ones (where certain specially asserted invariants are violated). We have already discussed how our mechanism can handle, as special cases, these situations. The remainder of [14] is devoted to <p> deviations during enactment <ref> [14] </ref>. This work distinguishes "tolerable" deviations (which are state transitions imposed in cases when the trigger constraint is still false) from intolerable ones (where certain specially asserted invariants are violated). We have already discussed how our mechanism can handle, as special cases, these situations. The remainder of [14] is devoted to analyzing, using temporal logic, the propagation of "possibly polluted information" when deviations are allowed, assuming that any deviant action produces suspect data 7 .
Reference: [15] <author> G.P. Cugola, E. Di Nitto, A. Fuggetta, C. Ghezzi, </author> <title> "A Framework for Formalizing Inconsistencies in Human-Centered Systems", </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <month> September </month> <year> 1996. </year>
Reference: [16] <author> S. Dami, J. Estublier, M. Amiour, "APEL: </author> <title> A Graphical Yet Executable Formalism for Process Modeling", </title> <note> Automated Software Engineering (ASE) to appear (obtainable at ftp://ftp.imag.fr/pub/ADELE/ASE.ps). </note>
Reference-contexts: In addition to business computing, other areas of computer science, especially software engineering, have also been interested in process modeling and enactment <ref> [31, 16] </ref>. From the beginning, a major source of problems was the perceived prescriptive nature of the workflow specifications, which laid down rules according to which workcases were to be handled, without allowing for unanticipated variations, deviations, etc. <p> As argued in [2, 38], it might be the case that further research will yield better workflow-specific solutions to these issues than the standard Advanced Transaction Models. 18 In particular, we find quite interesting the proposal for a variety of ways of sharing documents in the APEL graphical process language <ref> [16] </ref>, which is based on long practical experience of its authors, including commercial workflow products. And in the spirit of [2], we plan to examine the use of the exception mechanism (together with primitive transaction facilities like begin/commit/abort) as a way of providing programmable yet declarative simulations of ATM mechanisms.
Reference: [17] <author> Umeshwar Dayal, Meichun Hsu, Rivka Ladin, </author> <title> "Organizing Long-Running Activities with Triggers and Transactions". </title> <booktitle> Proc. ACM SIGMOD Conf. </booktitle> <year> 1990, </year> <pages> pp. 204-214 </pages>
Reference-contexts: Of course, our approach has an entire additional dimension, dealing with the consequences of resuming after an exception, and having persistent violations. Exceptions in transactional workflows have of course been present almost from the beginning, including <ref> [17] </ref>. From the software-engineering process modeling camp, most relevant is the work on deviations during enactment [14]. This work distinguishes "tolerable" deviations (which are state transitions imposed in cases when the trigger constraint is still false) from intolerable ones (where certain specially asserted invariants are violated).
Reference: [18] <author> C. Ellis and G. Nutt, </author> <title> "Modeling and Enactment of Workflow Systems", in Application and Theory of Petri Nets, </title> <editor> M. Ajmone Marsan Ed., </editor> <publisher> LNCS 691, Springer Verlag, </publisher> <year> 1993, </year> <month> pp.1-16. </month>
Reference-contexts: Of course, there are also operations for retrieving or storing values of attributes for individuals. 2.2 The process model For specificity, we adopt in this paper a variant of the ICN (Information Control Net) language for describing the co-ordination aspects of the workflow <ref> [18, 19] </ref>.
Reference: [19] <author> C. Ellis and K. Keddara, </author> <title> "Dynamic Change within Workflow Systems," </title> <note> draft of a paper with the same title published in the Proceedings of the Conference on Organizational Computing Systems, </note> <year> 1995. </year>
Reference-contexts: The language used for this might be called a process modeling language. Some of the activities, called elementary, are described using a computation language <ref> [32, 19] </ref>. <p> Of course, there are also operations for retrieving or storing values of attributes for individuals. 2.2 The process model For specificity, we adopt in this paper a variant of the ICN (Information Control Net) language for describing the co-ordination aspects of the workflow <ref> [18, 19] </ref>. <p> On the other hand, after the Decision step terminates, the token passes through the OR-fork and may then move along any of its three outgoing edges, thus enabling any of FinalDecision, ReceiveReply, DeniedFollow-up1. As in <ref> [19] </ref>, we allow arbitrary sequencing of control steps, rather than invoking the restriction that every control node needs to be followed by an actual real-world activity. <p> When an activity step finishes, it helps enable the successor step indicated by the value of the next attribute 6 . There is however detected a technical difficulty in computing the "enabled step" relationship for ICN workflows, as formally specified in <ref> [19] </ref>, and we offer an approach in [28] which deals with the inherent nondeterminism in an relatively efficient manner in many practical cases. <p> Similarly, run-time verification of the finalGoals should be performed when the activity is manually moved to the ENDED state, when it is exceptionally resumed after a failed initialTest or initialAssumption, or when a compound activity's coordination has been exceptionally changed. For example, both <ref> [19] </ref> and [14] give examples where during on-line changes of step ordering, one has to make sure that neither of the steps is omitted in the end. Such a condition should be expressed as a finalGoal for the corresponding workflow. <p> Of course, the violation of even such assumptions and goals may be excused, but at least the responsibleAgent has been made aware of the potential problems. 6 Related work and conclusions 6.1 Exceptions vs. Evolution There have been a number of papers on the evolution of process models, including <ref> [12, 19, 4] </ref>, and some techniques for accommodating run-time exceptions are based on the use of schema-editors applied to running workflow instances (e.g., [35]). However, we believe there is an important distinction to be made between exceptional occurrences during workflow enactment (the topic of this paper) and workflow evolution. <p> There are relatively few constraints one can impose on the changes that can be made it is mostly a matter of cataloging the operations needed to achieve any goal. One important issue in schema evolution is what to do with existing individuals/on-going enactments. This issue has been addressed <ref> [19, 4] </ref> by finding invariants that should not be violated even during schema evolution. (We have argued earlier that these can be captured by our finalGoals for workflows.) On the other hand, as we have remarked in the introduction, our framework supports a limited additive form of evolution by codifying exception
Reference: [20] <author> Hector Garcia-Molina, Kenneth Salem: "Sagas", </author> <booktitle> Proc SIGMOD'87: </booktitle> <pages> 249-259. </pages>
Reference-contexts: A second advantage, will be the presence of database notions. So for example, the clean-up actions can be greatly facilitated by the presence of "backward-recovery" transaction-like operations such as checkpoint, commit and abort. The clean-up section can also be used for "forward-recovery" compensating actions (as in sagas <ref> [20] </ref>), which may be preprogrammed or once again directed on-line by users (e.g., sending follow-up e-mail messages).
Reference: [21] <author> Dimitrios Georgakopoulos, Mark F. Hornick, Amit P. Sheth: </author> <title> "An Overview of Work-flow Management: From Process Modeling to Workflow Automation Infrastructure." </title> <booktitle> Distributed and Parallel Databases 3(2): </booktitle> <month> 119-153 </month> <year> (1995) </year>
Reference-contexts: carried in some particular order; * exchange the order of steps in a workflow (e.g., although the subordinate was supposed 3 to sign off on some document before the manager did, the manager is leaving town so the order of the two steps is swapped); According to the survey in <ref> [21] </ref>, many workflow products on the market do in fact support deviations from the process model during an enactment. For example, InConcert allows a workcase to be modified by allowing tasks or dependencies to be added/removed, roles reassigned, etc. [1].
Reference: [22] <author> J.Goslin, B.Joy, G.Steele, </author> <title> "The Java Language Specification", </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference-contexts: And in languages supporting parallelism/concurrency, threads "collaborating" with the one in which the exception was signaled may also provide handlers (e.g., <ref> [33, 22] </ref>). Finally, default handlers may be attached to the exception class definition itself. Every language must then provide some specific policy for choosing the actual handler (s) to be invoked.
Reference: [23] <author> S.Greenspan, J.Mylopoulos, A.Borgida. </author> <title> "Capturing more world knowledge in the requirements specification", </title> <booktitle> Proc. 6th International Conference on Software Engineering, </booktitle> <address> Tokyo, Japan, </address> <month> September </month> <year> 1982, </year> <month> pp.225-234. </month>
Reference-contexts: This general approach was implicit in our original work on workflow-like scripts in Taxis [6] and explicit in our requirements modeling languages RML <ref> [23] </ref> and Telos [30]. It has been independently adopted by the InConcert [35] workflow product.
Reference: [24] <author> B.H. Karbe, N.G. Ramsperger, </author> <title> "Influence of Exception Handling on the Support of Cooperative Office Work", Multi-User Interfaces and Applications, </title> <editor> S. Gibbs and A.A. Verrijn-Stuart Eds., </editor> <publisher> Elsevier Science Publishers, </publisher> <address> pp.355-370, </address> <year> 1990 </year> <month> 20 </month>
Reference-contexts: For example, InConcert allows a workcase to be modified by allowing tasks or dependencies to be added/removed, roles reassigned, etc. [1]. However, we believe that in most cases the mechanisms considered so far suffer from a number of failings, including being either too specific/ad-hoc (e.g., restricted to forms handling <ref> [24] </ref>) or too powerful (e.g., allowing arbitrary editing of the schema), and giving insufficient consideration to the consequences of having exceptions.
Reference: [25] <author> M. Kifer, Won Kim, Y. Sagiv: </author> <title> "Querying Object-Oriented Databases."Proc. </title> <publisher> SIG--MOD'92, pp.393-402. </publisher>
Reference-contexts: The WIDE system in fact provides an explicit exception facility, which is related to the one in this paper (Section 6). 1 This idea is suggested by both description logics [10] and the notation of X-SQL queries <ref> [25] </ref>. 5 ICN is a process, rather than document or message oriented workflow modeling languages. The steps of a workflow are either activities or control steps.
Reference: [26] <author> M. Klein, </author> <title> "Exception Handling in Process Enactment Systems",ECAI96, </title> <booktitle> 12th Euro-pean Conference on Artificial Intelligence, </booktitle> <editor> W. Wahlster Ed., </editor> <publisher> John Wiley & Sons, </publisher> <year> 1996. </year>
Reference-contexts: Although the notion of "errors" exists together with built-in detection mechanism thereof to issue warnings, there is no explicit notion of exceptions, especially user-defined ones, as well as their handling. In contrast to our more technical focus, several papers have addressed the organizational aspects of exceptions [37]. In <ref> [26] </ref>, an approach is reported toward effective exception resolution that achieves "organizational integrity" based on taxonomies of exceptions, mapping them to potential diagnoses, and resolution strategies, all housed in a knowledge base.
Reference: [27] <author> J.Kunin, </author> <title> "Analysis and Specification of Office Procedures", </title> <address> MIT/LCS/TR-275, </address> <year> 1982. </year>
Reference-contexts: The steps of a workflow are either activities or control steps. The main goal of ICN is to provide partial ordering of the constituent steps of a workflow via control flow in a graph-like notation augmented by data flow between a data repository and an activity. from <ref> [27] </ref>. A large oval stands for an ordinary activity (processing) step. The small circles are control steps/nodes affecting flow of control: a filled circle (and-node) for conjunctive ("concurrent") control flow; an open circle (or-node) for disjunctive ("exclusive OR") control flow. <p> The remaining constraints require run-time handling of exceptions. This distinction between a main-line and deviations from it has also been studied and supported in a language for organizational description developed at MIT in the early 80's <ref> [27] </ref>. 6.2 Other closely related work As mentioned earlier, WIDE is a workflow system implemented using active database technology [11], whose conceptual model is in some ways similar to ours (it is also based on the ICN framework, and has similar state transition diagram to ours).
Reference: [28] <author> T. Murata, A. Borgida, </author> <title> "Towards an On-line Enablement Algorithm for ICN Control Nets", </title> <note> forthmcoming Technical Note, available by e-mail from authors. </note>
Reference-contexts: When an activity step finishes, it helps enable the successor step indicated by the value of the next attribute 6 . There is however detected a technical difficulty in computing the "enabled step" relationship for ICN workflows, as formally specified in [19], and we offer an approach in <ref> [28] </ref> which deals with the inherent nondeterminism in an relatively efficient manner in many practical cases. Note that according to ICN1, wf1.step-b is expected to have at most a single ACTIVE value at any moment of time the then executing instance of that step for wf1.
Reference: [29] <author> John Mylopoulos, Philip A. Bernstein, Harry K. T. Wong, </author> <title> "A Language Facility for Designing Database-Intensive Applications." </title> <journal> ACM TODS 5(2): </journal> <month> 185-207 </month> <year> (1980) </year>
Reference-contexts: We believe that our mechanism can be considered orthogonal to such aspects, although we mention some alternatives in the concluding remarks. 2 Our conceptual model 2.1 The data model We begin with a Taxis-like <ref> [29] </ref> object-based data model, where individuals are instances of classes (which have extents), and are related by attributes. The class definition (schema) specifies range and other kinds of constraints on the attributes.
Reference: [30] <author> John Mylopoulos, Alexander Borgida, Matthias Jarke, Manolis Koubarakis, </author> <title> "Telos: Representing Knowledge About Information Systems." </title> <booktitle> ACM TOIS 8(4): </booktitle> <month> 325-362 </month> <year> (1990) </year>
Reference-contexts: This general approach was implicit in our original work on workflow-like scripts in Taxis [6] and explicit in our requirements modeling languages RML [23] and Telos <ref> [30] </ref>. It has been independently adopted by the InConcert [35] workflow product.
Reference: [31] <institution> NSF Workshop on Workflow and Process Automation in Information Systems, A.Sheth editor, </institution> <address> May 8-10, 1996, Athens Georgia, http://lsdis.cs.uga.edu/activities/NSF-workflow. </address>
Reference-contexts: In addition to business computing, other areas of computer science, especially software engineering, have also been interested in process modeling and enactment <ref> [31, 16] </ref>. From the beginning, a major source of problems was the perceived prescriptive nature of the workflow specifications, which laid down rules according to which workcases were to be handled, without allowing for unanticipated variations, deviations, etc.
Reference: [32] <author> G. Nutt, </author> <title> "The evolution toward flexible workflow systems", </title> <journal> Distributed Systems Engineering, </journal> <month> Dec. </month> <year> 1996. </year>
Reference-contexts: The language used for this might be called a process modeling language. Some of the activities, called elementary, are described using a computation language <ref> [32, 19] </ref>. <p> As future work we will be considering such a "pollution analysis" tool as support for users who are asked to choose which values are to be blamed for an exception. In what <ref> [32] </ref> calls the situated work camp, [7] is a report of a workflow system where activities are modeled as an executable network of obligations, a request from one person to other agents.
Reference: [33] <author> A. Romanovsky , J. Xu, B. </author> <title> Randell "Exception Handling and Resolution in Distributed Object Oriented Systems", </title> <booktitle> ICDCS '96; Proceedings of the 16th International Conference on Distributed Computing Systems, </booktitle> <address> May 27-30 1996, Hong Kong,, </address> <pages> pp. 545-553 </pages>
Reference-contexts: And in languages supporting parallelism/concurrency, threads "collaborating" with the one in which the exception was signaled may also provide handlers (e.g., <ref> [33, 22] </ref>). Finally, default handlers may be attached to the exception class definition itself. Every language must then provide some specific policy for choosing the actual handler (s) to be invoked.
Reference: [34] <author> H.T. Saastamoinen, </author> <title> "On the handling of exceptions", </title> <type> Ph.D. Thesis, </type> <institution> University of Jy-vaskyla, </institution> <address> Jyvaskyla, </address> <pages> 194 pages, </pages> <year> 1995. </year>
Reference-contexts: In [26], an approach is reported toward effective exception resolution that achieves "organizational integrity" based on taxonomies of exceptions, mapping them to potential diagnoses, and resolution strategies, all housed in a knowledge base. Along similar lines, <ref> [34] </ref> suggests, supported by a substantial empirical study, an interesting dimension for a taxonomy: "exceptionality", the degree of availability of applicable rules and exception handling routines in the organization given to address a deviation from a main line.
Reference: [35] <author> Sunil K. Sarin: </author> <title> "Object-Oriented Workflow Technology in InConcert". </title> <booktitle> COMPCON 1996: </booktitle> <pages> 446-450 </pages>
Reference-contexts: This general approach was implicit in our original work on workflow-like scripts in Taxis [6] and explicit in our requirements modeling languages RML [23] and Telos [30]. It has been independently adopted by the InConcert <ref> [35] </ref> workflow product. Although we will not use this point in the present paper, this means that activity/workflow descriptions can also be organized into subclass hierarchies, with the usual concomitant advantages of abbreviation, reuse and change propagation due to inheritance (see [8]). 5.1 Elementary Activities. <p> It provides a number of advantages: * As also pointed out by <ref> [35] </ref>, having the extents of the classes of activities in various states available in the database makes it possible to query them using the standard query facilities of the database (rather than requiring specialized report generators), and obtain all sorts of ad-hoc information about the status of individual or collections of <p> Evolution There have been a number of papers on the evolution of process models, including [12, 19, 4], and some techniques for accommodating run-time exceptions are based on the use of schema-editors applied to running workflow instances (e.g., <ref> [35] </ref>). However, we believe there is an important distinction to be made between exceptional occurrences during workflow enactment (the topic of this paper) and workflow evolution. The difference is analogous to the one between allowing exceptional individuals in a database (e.g., [9]) and schema evolution in a database (e.g., [5]).
Reference: [36] <author> R. </author> <title> Sebesta, </title> <booktitle> Concepts of Progragramming Languages, 3rd edition, </booktitle> <publisher> Addison Wesley, </publisher> <year> 1996. </year>
Reference-contexts: it resemble much more our data model. 3 Components of an Exception Mechanism Exception handling mechanisms are a family of programming language control structures that allow the normal execution of a program to be replaced or augmented by so-called exception handling code when certain special events or conditions occur. (See <ref> [36] </ref> for a standard introduction.) The execution of such a control structure can usually be described in terms of the following major steps: 1. signaling an exception, when a problem situation is encountered, resulting in the suspension/interruption of the normal flow of control; 2. collecting a set of potential handler procedures
Reference: [37] <author> Diane M. Strong, Steven M. Miller: </author> <title> "Exceptions and Exception Handling in Computerized Information Processes." </title> <booktitle> ACM TOIS 13(2): </booktitle> <month> 206-233 </month> <year> (1995) </year>
Reference-contexts: Although the notion of "errors" exists together with built-in detection mechanism thereof to issue warnings, there is no explicit notion of exceptions, especially user-defined ones, as well as their handling. In contrast to our more technical focus, several papers have addressed the organizational aspects of exceptions <ref> [37] </ref>. In [26], an approach is reported toward effective exception resolution that achieves "organizational integrity" based on taxonomies of exceptions, mapping them to potential diagnoses, and resolution strategies, all housed in a knowledge base.
Reference: [38] <author> D. Worah and Amit Sheth. </author> <title> "Transactions in Transactional Workflows" in Advanced Transaction Models and Architectures, </title> <editor> S. Jajodia and L. Kerschberg, Eds., </editor> <publisher> Kluwer Academic Publishers, </publisher> <year> 1997 </year> <month> (to appear). </month> <pages> 21 22 </pages>
Reference-contexts: In fact this feature can support an important form of program abstraction: dealing with normal cases first, and relegating special cases as the handling of exceptions to "normalcy conditions." 4 Because much prior database work on workflows has concerned in some way advanced transaction models (see <ref> [2, 38] </ref> for reviews), it may be worth pointing out right from the beginning that the work presented here does not (yet) consider issues of concurrency control and recovery. <p> There is considerable work that remains to be done in completing our enterprise. Among others, we will need to take a closer look at the traditional issues of concurrency control and error recovery. As argued in <ref> [2, 38] </ref>, it might be the case that further research will yield better workflow-specific solutions to these issues than the standard Advanced Transaction Models. 18 In particular, we find quite interesting the proposal for a variety of ways of sharing documents in the APEL graphical process language [16], which is based
References-found: 38

