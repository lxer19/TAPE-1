URL: ftp://gregorio.stanford.edu/pub/papers/lbrm.ps.gz
Refering-URL: http://www.cs.gatech.edu/computing/Telecomm/seminar/fall95.html
Root-URL: 
Title: Log-Based Receiver-Reliable Multicast for Distributed Interactive Simulation  
Author: Hugh W. Holbrook Sandeep K. Singhal David R. Cheriton 
Affiliation: Department of Computer Science Stanford University  
Abstract: In this paper, we introduce the notion of Log-Based Receiver-reliable Multicast (LBRM) communication, and we describe and evaluate a collection of log-based receiver reliable multicast optimizations that provide an efficient, scalable protocol for high-performance simulation applications. We argue that these techniques provide value to a broader range of applications and that the receiver-reliable model is an appropriate one for communication in general. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Susan M. Armstrong, Alan O. Freier, and Keith A. Marzullo. </author> <title> "Multicast transport protocol." In Internet Requests for Comments (RFC 1301), </title> <month> February </month> <year> 1992. </year>
Reference-contexts: Chang and Maxemchuk [5] describe several techniques to reduce acknowledgements at the cost of increased delay in lost packet detection. Causally and totally ordered multicast protocols such as those in Isis [14] and MTP <ref> [1] </ref> introduce additional latency to enforce ordering of updates across multiple sources, so they are unsuitable for use in real-time applications such as DIS. Our work is closest to that of Floyd, Jacobson, Liu, McCanne and Zhang [13, 8] on lightweight multicast sessions and the wb reliable multicast protocol.
Reference: [2] <author> ARPA. </author> <title> "Stow 97 program plan.", </title> <month> May </month> <year> 1994. </year>
Reference-contexts: When the basic transmission rate is low, as is the case for DIS terrain entities, the variable heartbeat scheme has a significant advantage. Consider a DIS scenario, loosely based on the US military's current simulation plans <ref> [2] </ref>. The scenario involves 100,000 dynamic entities (tanks, planes, ships, infantry), and an equal number of aggregate terrain entities (rocks, trees, fences, bridges).
Reference: [3] <author> Kevin W. Arthur, Kellogg S. Booth, and Colin Ware. </author> <title> "Evaluating 3d task performance for fish tank virtual worlds." </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 11(3) </volume> <pages> 239-265, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: The application chooses MaxIT according to the freshness requirement of the data being disseminated. Shortening MaxIT results in fresher data, but more network traffic. For entities with strict real-time delivery requirements, MaxIT must be small. For DIS terrain entities that change infrequently, recent research <ref> [3] </ref> suggests that a 1=4 second MaxIT is required to provide acceptable real-time visual performance. In the Log-Based Receiver-reliable Multicast (LBRM) approach, illustrated in Figure 2, reliability is provided by a logging server that logs all transmitted packets from the source.
Reference: [4] <author> Jean-Chrysostome Bolot, Thierry Turletti, and Ian Wakeman. </author> <title> "Scalable feedback control for multicast video distribution in the internet." </title> <booktitle> In Proceedings of SIGCOMM 1994, </booktitle> <pages> pages 139-146, </pages> <address> London, England, </address> <month> August </month> <year> 1994. </year> <note> ACM SIGCOMM. </note>
Reference-contexts: This occurs at t wait h min after the first heartbeat has arrived. 2.3.3 Group Size Estimation Our basic algorithm for generating an initial secondary logging server count N sl is based a modification of a technique described by Bolot, Turletti, and Wake-man <ref> [4] </ref>. We build upon their basic protocol in which a sender initiates a series of rounds wherein the secondary loggers are probed, using an increasing ACK probability p ack to avoid causing an ACK implosion on the sender.
Reference: [5] <author> Jo-Mei Chang and N. F. Maxemchuk. </author> <title> "Reliable broadcast protocols." </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(3) </volume> <pages> 251-273, </pages> <month> August </month> <year> 1984. </year>
Reference-contexts: Dead 1 Bottleneck reckoning [17] at each receiver dramatically reduces the bandwidth demands of dynamic entities, but the naturally high update rate of these entities still requires a large amount of communication. Positive acknowledgement protocols such as the Chang and Maxemchuk algorithm <ref> [5] </ref> are unsuitable for the type of multicast traffic we have in mind for several reasons. First, a positive acknowledgement scheme used with multicast can lead to an acknowledgment implosion at the source and significant network load. <p> Such a designated logger might have a fast network connection and a large memory and disk. An alternative implementation could provide distributed logging at each site by rotating the role of log server among the local hosts in order to distribute the load, similar to the Chang and Maxemchuk <ref> [5] </ref> algorithm, except that the multicast traffic originates from a source outside the virtual ring. A variety of resource discovery techniques are possible for locating a secondary logging server. In our implementation, each host uses a series of scoped multicast discovery queries to locate a nearby logging service. <p> Cheriton and Zwaenepoel's [7] k-reliable multicast simply generalizes the conventional all-reliable semantics that are usually implemented using sender-reliable techniques. Chang and Maxemchuk <ref> [5] </ref> describe several techniques to reduce acknowledgements at the cost of increased delay in lost packet detection.
Reference: [6] <author> David R. Cheriton and Dale Skeen. </author> <title> "Understanding the limitations of causally and totally ordered communication." </title> <booktitle> In Proceedings of the 14th Symposium on Operating Systems Principles, </booktitle> <address> Asheville, NC, </address> <month> December </month> <year> 1993. </year> <note> ACM SIGOPS. </note>
Reference-contexts: Moreover, message causality and ordering are strictly an application-level concern for the receiver <ref> [6] </ref>. The length of time that the logging server must store a packet is application-specific. Some applications may only store packets until their useful lifetime has expired. Other applications with stronger persistence needs may log all packets, writing them to disk once in-memory buffers are full.
Reference: [7] <author> David R. Cheriton and Willy Zwaenepoel. </author> <title> "Distributed process groups in the v kernel." </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 3(2) </volume> <pages> 77-107, </pages> <month> May </month> <year> 1985. </year>
Reference-contexts: Cheriton and Zwaenepoel's <ref> [7] </ref> k-reliable multicast simply generalizes the conventional all-reliable semantics that are usually implemented using sender-reliable techniques. Chang and Maxemchuk [5] describe several techniques to reduce acknowledgements at the cost of increased delay in lost packet detection.
Reference: [8] <author> Sally Floyd, Van Jacobson, Charley Liu, Steven Mc-Canne, and Lixia Zhang. </author> <title> "A reliable multicast framework for light-weight sessions and application-level framing." </title> <booktitle> In Proceedings of SIGCOMM 1995, </booktitle> <address> Boston, MA, </address> <month> August </month> <year> 1995. </year> <note> ACM SIGCOMM. </note>
Reference-contexts: We also describe several optimizations to the basic LBRM approach that further reduce the network load, the expected delay to recover a lost packet, and the load on receivers. In discussing related work, we contrast this protocol with the highly successful wb multicast session protocol <ref> [8] </ref> and argue that wb is inadequate for the type of large-scale applications that we are considering. The next section describes the Log-Based Receiver-reliable multicast protocol and three optimizations that improve the protocol's performance. Section 3 presents our preliminary experience with an implementation of the protocol. <p> Our work is closest to that of Floyd, Jacobson, Liu, McCanne and Zhang <ref> [13, 8] </ref> on lightweight multicast sessions and the wb reliable multicast protocol. The wb protocol was initially designed to support a shared whiteboard application. A major difference between LBRM and wb lies in their approaches to packet recovery for large multicast groups.
Reference: [9] <author> Carey G. Gray and David R. Cheriton. "Leases: </author> <title> An efficient fault-tolerant mechanism for file cache consistency." </title> <booktitle> In Proceedings of the 12th Symposium on Operating Systems Principles, </booktitle> <pages> pages 202-210, </pages> <address> Litchfield Park, AZ, </address> <month> December </month> <year> 1989. </year> <note> ACM SIGOPS. </note>
Reference-contexts: Examples of such information dissemination applications arise for distributing real-time stock quotes to brokers' terminals (and eventually to the public at large) and providing up-to-date traffic report maps to a client display mounted in an automobile dashboard. 4.2 File Caching LBRM is an alternative to leasing <ref> [9] </ref> for fault-tolerant distributed file caching. Rather than having explicit leases on the files in its cache, each client subscribes to a LBRM channel from the server on which to (reliably) receive invalidation notifications.
Reference: [10] <author> Kieran Harty. </author> <type> Personal communication, </type> <month> December </month> <year> 1994. </year> <title> Dr. Harty is Manager of Advanced Technology at Teknekron Software Systems in Palo Alto, </title> <address> CA. </address>
Reference-contexts: Data from these sensors must be transmitted reliably to the many systems that monitor factory performance, maintenance, etc. LBRM is particularly well-suited to this application domain <ref> [10] </ref>: Factory automation typically requires that all transactions and tasks are logged for accurate record-keeping. LBRM already provides this logging as part of the lost packet recovery mechanism. Moreover, LBRM supports simple data sensors because it imposes minimal buffering and computation requirements on those sources.
Reference: [11] <author> Institute for Simulation and Training. </author> <title> "Standard for distributed interactive simulation|application protocols (version 2.0.4 draft ieee standard)." </title> <type> Technical Report IST-CR-94-50, </type> <institution> University of Central Florida, Or-lando, Florida, </institution> <month> March </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Multicast sources in certain distributed applications have relatively low update rates yet have receivers that expect low delay in receiving updates, even in the face of loss. For instance, the dynamic terrain in a distributed virtual reality system such as Distributed Interactive Simulation (DIS) <ref> [11, 19] </ref> is normally updated infrequently, yet hosts need to be notified of updates within a fraction of a second or less to avoid perceptible skew among the views of participants.
Reference: [12] <author> Van Jacobson. </author> <title> "Congestion avoidance and control." </title> <booktitle> In Proceedings of SIGCOMM 1988, </booktitle> <pages> pages 314-329, </pages> <address> Stanford, CA, </address> <month> August </month> <year> 1988. </year> <note> ACM SIGCOMM. </note>
Reference-contexts: Using the following formula, the source revises its N sl estimate: N 0 where ff is some small number, say 1=8. The new ACK probability is p 0 ack = k=N 0 sl . This approach is similar to Jacobson's TCP Round-Trip-Time estimator <ref> [12] </ref>. Statistical variations in k 0 cause minimal variation in N sl or p ack , but the algorithm dynamically adjusts as secondary loggers enter and leave the group. Due to software or hardware faults, a logger might disrupt the system by, for example, responding to every Acker Selection Packet.
Reference: [13] <author> Van Jacobson. </author> <title> Multimedia Conferencing on the Internet. </title> <booktitle> SIGCOMM 1994 Tutorial Notes. </booktitle> <month> August </month> <year> 1994. </year> <month> 13 </month>
Reference-contexts: Our work is closest to that of Floyd, Jacobson, Liu, McCanne and Zhang <ref> [13, 8] </ref> on lightweight multicast sessions and the wb reliable multicast protocol. The wb protocol was initially designed to support a shared whiteboard application. A major difference between LBRM and wb lies in their approaches to packet recovery for large multicast groups.
Reference: [14] <author> T. A. Joseph and K. P. Birman. </author> <title> "Reliable broad-cast protocols." </title> <editor> In S. Mullender, editor, </editor> <booktitle> Distributed Systems, </booktitle> <pages> pages 293-318. </pages> <publisher> ACM Press, Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: Chang and Maxemchuk [5] describe several techniques to reduce acknowledgements at the cost of increased delay in lost packet detection. Causally and totally ordered multicast protocols such as those in Isis <ref> [14] </ref> and MTP [1] introduce additional latency to enforce ordering of updates across multiple sources, so they are unsuitable for use in real-time applications such as DIS.
Reference: [15] <author> J. H. Saltzer, D. P. Reed, and D. D. Clark. </author> <title> "End-to-end arguments in system design." </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(4) </volume> <pages> 277-288, </pages> <month> November </month> <year> 1984. </year>
Reference-contexts: However, the receipt of a positive acknowledgment from the transport level of the remote client does not guarantee end-to-end reliability. Application-level reliability is provided only by an acknowledgement that was generated after the data was received and processed at the receiver's application level <ref> [15] </ref>. In a remote procedure call (RPC) system, this end-to-end requirement is provided by receipt of the return packet for the call. Acknowledgments in conventional transport protocols are really resource management actions to assist the sender in managing its resources and processing.
Reference: [16] <author> H. Schulzrinne, S. Casner, R. Frederick, and V. Jaco-boson. "Rtp: </author> <title> A transport protocol for real-time applications." Internet draft, </title> <booktitle> Work in Progress, </booktitle> <month> November </month> <year> 1994. </year>
Reference-contexts: For example, the tank needs an up-to-date view of the bridge, even though the bridge may not change frequently. High-frequency transmission of state updates guarantees freshness in real-time protocols like vat <ref> [16] </ref>. However, it is not feasible to require DIS terrain entities to send frequent updates because of the excessive network traffic that would result. For example, next generation DIS systems may include hundreds of thousands of terrain objects. Similar scale may arise with entertainment applications over the Internet.
Reference: [17] <author> Sandeep K. Singhal and David R. Cheriton. </author> <title> "Exploiting position history for efficient remote rendering in networked virtual reality." Presence: </title> <booktitle> Teleoperators and Virtual Environments, </booktitle> <volume> 4(2) </volume> <pages> 169-193, </pages> <month> Spring </month> <year> 1995. </year>
Reference-contexts: In current DIS, most of the bandwidth is consumed by periodic appearance PDUs that apply the real-time approach of continual state transmission for highly active entities such as airplanes, tanks, and jeeps. Dead 1 Bottleneck reckoning <ref> [17] </ref> at each receiver dramatically reduces the bandwidth demands of dynamic entities, but the naturally high update rate of these entities still requires a large amount of communication.
Reference: [18] <author> Sun Microsystems. </author> <title> "The hotjava TM browser: </title> <note> A white paper." Available from http://java.sun.com/., 1995. </note>
Reference-contexts: LBRM could be implemented as a dynamic protocol module in an extensible browser such as HotJava <ref> [18] </ref>. In general, there is a need for multicast protocols that allow receivers to determine how much loss they are experiencing, recover missing data if they desire, and recover the data within reasonable delay bounds relative to the time of original transmission.
Reference: [19] <author> Jack A. Thorpe. </author> <title> "The new technology of large scale simulator networking: Implications for mastering the art of warfighting." </title> <booktitle> In Proceedings of the 9th Interser-vice/Industry Training System Conference, </booktitle> <pages> pages 157-160, </pages> <address> Washington, DC, </address> <month> November-December </month> <year> 1987. </year>
Reference-contexts: 1 Introduction Multicast sources in certain distributed applications have relatively low update rates yet have receivers that expect low delay in receiving updates, even in the face of loss. For instance, the dynamic terrain in a distributed virtual reality system such as Distributed Interactive Simulation (DIS) <ref> [11, 19] </ref> is normally updated infrequently, yet hosts need to be notified of updates within a fraction of a second or less to avoid perceptible skew among the views of participants.
Reference: [20] <author> Adam H. Whitlock. </author> <title> "Draft estimate of bandwidth demand for stow-97." Distributed by the Naval Research and Development Center (NRaD), </title> <month> May </month> <year> 1995. </year> <month> 14 </month>
Reference-contexts: If each aggregate terrain entity has a real-time update requirement of 1=4 second, then with a fixed heartbeat, each would generate 4 packets per second, for a total of 400; 000 packets per second. In current DIS simulations, dynamic entities generate one packet per second, on average <ref> [20] </ref>, which results in 100; 000 packets per second. Although terrain entities desire a 1=4 second freshness guarantee, they generally change state infrequently.
References-found: 20

