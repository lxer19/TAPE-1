URL: http://www.research.digital.com/SRC/personal/monika/papers/monika-tcs94.ps.gz
Refering-URL: http://www.research.digital.com/SRC/personal/monika/papers.html
Root-URL: http://www.research.digital.com
Title: Data Structures for Two-Edge Connectivity in Planar Graphs  
Author: John Hershberger Monika Rauch Subhash Suri 
Affiliation: DEC Systems Research Center  Princeton University  Bell Communications Research  
Abstract: We present a data structure for maintaining 2-edge connectivity information dynamically in an embedded planar graph. The data structure requires linear storage and preprocessing time for its construction, supports online updates (deletion of an edge or insertion of an edge consistent with the embedding) in O(log 2 n) time, and answers a query (whether two vertices are in the same 2-edge-connected component) in O(log n) time. The previous best algorithm for this problem requires O(log 3 n) time for updates. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. V. Aho, J. Hopcroft, and J. D. Ullman. </author> <title> The Design and Analysis of Computer Algorithms. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1974. </year>
Reference-contexts: 1 Introduction Connectivity in graphs is an important class of problems that has received considerable attention since the early work of Hopcroft and Tarjan, who designed linear-time algorithms for computing bi- and tri-connected components of a graph <ref> [1, 12, 17] </ref>. NC algorithms for 2- and 3-connectivity have been proposed in [14, 18]. In recent years, attention has turned toward dynamic algorithms for graph connectivity. These algorithms maintain connectivity information as the underlying graph is modified by the insertion/deletion of edges or vertices. <p> We check this in O (log n) time using a classical static algorithm <ref> [1, 9, 17] </ref>. Then we merge the topology tree together in the same way we expanded it, leaving it as it was before the query.
Reference: [2] <author> D. Eppstein, Z. Galil, G. F. Italiano, and A. Nissenzweig. </author> <title> "Sparsification A technique for speeding up dynamic graph algorithms." </title> <booktitle> Proc. 33rd Annual Symp. on Foundations of Computer Science, </booktitle> <year> 1992. </year>
Reference-contexts: The problem becomes 1 significantly harder if both insertions and deletions are allowed, and the best result to date for general graphs is an algorithm due to Eppstein et al. <ref> [2] </ref> that takes O ( p n log (m=n)) time per update, where m is the number of edges in the graph. <p> Rauch [15] gave a fully dynamic algorithm for maintaining 2-vertex connectivity. An update operation takes time O (m 2=3 ). In embedded planar graphs the running time reduces to O ( p n log n). Eppstein et al. <ref> [2] </ref> developed a general technique that speeds up the algorithms by Frederickson for fully dynamic connectivity and 2-edge connectivity to time O ( p n log (m=n)) per update operation.
Reference: [3] <author> D. Eppstein, Z. Galil, G. F. Italiano, and T. Spencer. </author> <title> "Separator based sparsification for dynamic planar graph algorithms." </title> <booktitle> Proc. 25th Annual Symp. on Theory of Computing, </booktitle> <year> 1993, </year> <pages> 208-217. </pages>
Reference-contexts: Section 6 describes the concept of recipes for building coverage graphs, and Sec tions 7 and 8 describe our query and update procedures. Finally, we conclude in Section 9 1 After the conference publication of the present paper, Eppstein et al. <ref> [3] </ref> developed an algorithm for 2-edge connectivity in non-embedded planar graphs whose running time is O (log n) per query and edge insertion, and O (log 2 n) per edge deletion. 2 with some discussion and directions for future research. <p> Of course, from a theoretical point of view, it would be more satisfying to have an algorithm that was not restricted by a particular embedding. (The recent algorithm of Eppstein et al. <ref> [3] </ref> achieves this goal.) With some small modifications, our data structure may work for 2-vertex connectivity as well. We are currently investigating this. It also seems likely that many of our ideas generalize to 3-edge connectivity, and we continue to explore that possibility.
Reference: [4] <author> D. Eppstein, G. Italiano, R. Tamassia, R. E. Tarjan, J. Westbrook, and M. Yung. </author> <title> "Maintenance of a minimum spanning forest in a dynamic planar graph." </title> <booktitle> Proc. of 1st SODA, </booktitle> <year> 1990. </year>
Reference-contexts: the journal version of their paper. (It is worth pointing out that the 1-connectivity problem, with both insertions and deletions, is quite different from the Union-Find-Deunion problem, for which a logarithmic update procedure is known [8].) If the graph is planar and embedded, then a result of Eppstein et al. <ref> [4] </ref> achieves O (log n) time per operation for the 1-connectivity problem. The semi-dynamic versions of the 2-edge connectivity and the 2-vertex connectivity problems were considered by Westbrook and Tarjan [19]; they showed that a sequence of n insertions and queries can be processed in O (nff (n)) time.
Reference: [5] <author> G. N. Frederickson. </author> <title> "Ambivalent data structures for dynamic 2-edge connectivity and k smallest spanning trees." </title> <booktitle> Proc. of 32nd FOCS, </booktitle> <year> 1991. </year>
Reference-contexts: For general graphs, their algorithm takes O (m 2=3 ) time per operation (update or query), where m is the current number of edges in the graph. For planar graphs, their time complexity improves to O ( p n log log n). Soon afterwards, Frederickson <ref> [5] </ref> improved the time bound in [7] to O ( m) per operation. Frederickson also presented a faster algorithm for planar embedded graphs, with query time O (log n) and update time O (log 3 n). Rauch [15] gave a fully dynamic algorithm for maintaining 2-vertex connectivity. <p> Thin solid edges are bridges. 3 Topology trees We build a hierarchical representation of G based on the spanning tree T . The representation is a tree, called the topology tree, that has depth O (log n) <ref> [5, 6] </ref>. Each level of the topology tree partitions the vertices of G into connected subsets called clusters. Two clusters are said to be adjacent if they are joined by an edge in the spanning tree T . <p> The greedy method of forming clusters reduces the number of clusters at each level by a constant fraction, thus ensuring that the height of the topology tree is O (log n). The following lemma is due to Frederickson <ref> [5] </ref>. 4 Lemma 3.1 ([5]) The number of clusters at level i + 1 is at most 5=6 times the number of clusters at level i. Corollary 3.2 The topology tree for the graph G has height fi (log n). <p> We merge back the clusters using a locally greedy heuristic: whenever possible, we merge two adjacent clusters of the lowest level, until the final topology tree is obtained; the merges respect the two clustering rules given earlier (see the full version of <ref> [5] </ref> for details). This process may force further expansion of some clusters. The number of expansions in each cluster is proportional to the sum of the differences between the level of the cluster and those of its neighbors.
Reference: [6] <author> G. N. Frederickson. </author> <title> "Data structures for online updating of minimum spanning trees." </title> <journal> SIAM J. on Computing (14), </journal> <year> 1985, </year> <pages> 781-798. </pages>
Reference-contexts: Thin solid edges are bridges. 3 Topology trees We build a hierarchical representation of G based on the spanning tree T . The representation is a tree, called the topology tree, that has depth O (log n) <ref> [5, 6] </ref>. Each level of the topology tree partitions the vertices of G into connected subsets called clusters. Two clusters are said to be adjacent if they are joined by an edge in the spanning tree T .
Reference: [7] <author> Z. Galil and G. </author> <title> Italiano. "Fully dynamic algorithms for edge connectivity problems." </title> <booktitle> Proc. of 23rd STOC, </booktitle> <year> 1991. </year> <month> 20 </month>
Reference-contexts: The semi-dynamic versions of the 2-edge connectivity and the 2-vertex connectivity problems were considered by Westbrook and Tarjan [19]; they showed that a sequence of n insertions and queries can be processed in O (nff (n)) time. Galil and Italiano <ref> [7] </ref> managed to obtain a sublinear time algorithm for fully dynamic 2-edge connectivity. For general graphs, their algorithm takes O (m 2=3 ) time per operation (update or query), where m is the current number of edges in the graph. <p> For planar graphs, their time complexity improves to O ( p n log log n). Soon afterwards, Frederickson [5] improved the time bound in <ref> [7] </ref> to O ( m) per operation. Frederickson also presented a faster algorithm for planar embedded graphs, with query time O (log n) and update time O (log 3 n). Rauch [15] gave a fully dynamic algorithm for maintaining 2-vertex connectivity. An update operation takes time O (m 2=3 ).
Reference: [8] <author> Z. Galil and G. </author> <title> Italiano. "A note on set union with arbitrary deunions." </title> <journal> IPL, </journal> <month> (37) </month> <year> 1991. </year>
Reference-contexts: have improved the time bound to O ( p n); this improvement will appear in the journal version of their paper. (It is worth pointing out that the 1-connectivity problem, with both insertions and deletions, is quite different from the Union-Find-Deunion problem, for which a logarithmic update procedure is known <ref> [8] </ref>.) If the graph is planar and embedded, then a result of Eppstein et al. [4] achieves O (log n) time per operation for the 1-connectivity problem.
Reference: [9] <author> Z. Galil and G. F. </author> <title> Italiano. "Reducing edge connectivity to vertex connectivity." </title> <journal> SIGACT News, </journal> <volume> 22(1), </volume> <year> 1991, </year> <pages> 57-61. </pages>
Reference-contexts: We check this in O (log n) time using a classical static algorithm <ref> [1, 9, 17] </ref>. Then we merge the topology tree together in the same way we expanded it, leaving it as it was before the query.
Reference: [10] <author> F. Harary. </author> <title> Graph Theory. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1969. </year>
Reference-contexts: Observe that the transformed graph has O (m) vertices, and that it inherits the 2-edge-connectivity properties of the original graph: two vertices are 2-edge connected in G if and only if they are 2-edge connected in the transformed graph <ref> [10] </ref>. Thus, from now on, we assume that G has maximum vertex degree 3. Furthermore, since we will be primarily concerned with edge connectivity, we use the term 2-connectivity instead of 2-edge connectivity. Our data structure is based on a spanning tree of G.
Reference: [11] <author> J. Hershberger, M. Rauch, S. Suri. </author> <title> "Fully dynamic 2-edge-connectivity in planar graphs." </title> <booktitle> Proc. 3rd Scandinavian Workshop on Algorithm Theory, </booktitle> <publisher> LNCS 621, Springer-Verlag, </publisher> <year> 1992, </year> <pages> 233-244. </pages>
Reference-contexts: A preliminary version of this result was published in <ref> [11] </ref>. 2 Preliminaries Let G = (V; E) be an undirected planar graph, embedded in the plane. The initial embedding of G remains fixed throughout the course of the algorithm, and all the updates must respect the embedding.
Reference: [12] <author> J. H. Hopcroft and R. E. Tarjan. </author> <title> "Dividing a graph into tri-connected components." </title> <journal> SIAM J. on Computing, </journal> <year> 1973. </year>
Reference-contexts: 1 Introduction Connectivity in graphs is an important class of problems that has received considerable attention since the early work of Hopcroft and Tarjan, who designed linear-time algorithms for computing bi- and tri-connected components of a graph <ref> [1, 12, 17] </ref>. NC algorithms for 2- and 3-connectivity have been proposed in [14, 18]. In recent years, attention has turned toward dynamic algorithms for graph connectivity. These algorithms maintain connectivity information as the underlying graph is modified by the insertion/deletion of edges or vertices.
Reference: [13] <author> G. F. Italiano, J. A. La Poutre, and M. Rauch. </author> <title> "Fully dynamic planarity testing in planar embedded graphs." </title> <booktitle> Proc. 1st Annual European Symposium on Algorithms (ESA 1993), </booktitle> <year> 1993. </year>
Reference-contexts: Along the way we have introduced several new ideas on dynamically maintaining a planar embedded graph, which may have broader applications. Testing planarity in an embedded graph is one application of our data structure. A recent algorithm of Italiano, La Poutre, and Rauch <ref> [13] </ref> uses the data structure to support insertions that do not destroy the planar embedding, deletions, and queries of the form "would the insertion of edge (x,y) destroy the planar embedding?" Our algorithm permits only those updates that maintain the planar embedding.
Reference: [14] <author> G. L. Miller and V. Ramachandran. </author> <title> "A new graph triconnectivity algorithm and its parallelization." </title> <booktitle> Proc. 19th STOC, </booktitle> <year> 1987. </year>
Reference-contexts: 1 Introduction Connectivity in graphs is an important class of problems that has received considerable attention since the early work of Hopcroft and Tarjan, who designed linear-time algorithms for computing bi- and tri-connected components of a graph [1, 12, 17]. NC algorithms for 2- and 3-connectivity have been proposed in <ref> [14, 18] </ref>. In recent years, attention has turned toward dynamic algorithms for graph connectivity. These algorithms maintain connectivity information as the underlying graph is modified by the insertion/deletion of edges or vertices.
Reference: [15] <author> M. Rauch. </author> <title> "Fully dynamic biconnectivity in graphs." </title> <booktitle> Proc. 33rd Annual Symp. on Foundations of Computer Science, </booktitle> <year> 1992. </year>
Reference-contexts: Soon afterwards, Frederickson [5] improved the time bound in [7] to O ( m) per operation. Frederickson also presented a faster algorithm for planar embedded graphs, with query time O (log n) and update time O (log 3 n). Rauch <ref> [15] </ref> gave a fully dynamic algorithm for maintaining 2-vertex connectivity. An update operation takes time O (m 2=3 ). In embedded planar graphs the running time reduces to O ( p n log n).
Reference: [16] <author> R. E. Tarjan. </author> <title> Data Structures and Network Algorithms. </title> <institution> Society for Industrial and Applied Mathematics, </institution> <address> Philadelphia, </address> <year> 1983. </year>
Reference-contexts: If only insertions are allowed, then this problem reduces to the disjoint set union problem, and hence a sequence of n insertions and queries can be processed in O (nff (n)) time, using the union-find data structure <ref> [16] </ref>.
Reference: [17] <author> R. E. Tarjan. </author> <title> "Depth-first search and linear graph algorithms." </title> <journal> SIAM J. on Computing, </journal> <year> 1972. </year>
Reference-contexts: 1 Introduction Connectivity in graphs is an important class of problems that has received considerable attention since the early work of Hopcroft and Tarjan, who designed linear-time algorithms for computing bi- and tri-connected components of a graph <ref> [1, 12, 17] </ref>. NC algorithms for 2- and 3-connectivity have been proposed in [14, 18]. In recent years, attention has turned toward dynamic algorithms for graph connectivity. These algorithms maintain connectivity information as the underlying graph is modified by the insertion/deletion of edges or vertices. <p> We check this in O (log n) time using a classical static algorithm <ref> [1, 9, 17] </ref>. Then we merge the topology tree together in the same way we expanded it, leaving it as it was before the query.
Reference: [18] <author> R. E. Tarjan and U. Vishkin. </author> <title> "An efficient parallel biconnectivity algorithm." </title> <journal> SIAM J. on Computing, </journal> <year> 1985, </year> <pages> 862-874. </pages>
Reference-contexts: 1 Introduction Connectivity in graphs is an important class of problems that has received considerable attention since the early work of Hopcroft and Tarjan, who designed linear-time algorithms for computing bi- and tri-connected components of a graph [1, 12, 17]. NC algorithms for 2- and 3-connectivity have been proposed in <ref> [14, 18] </ref>. In recent years, attention has turned toward dynamic algorithms for graph connectivity. These algorithms maintain connectivity information as the underlying graph is modified by the insertion/deletion of edges or vertices.
Reference: [19] <author> J. Westbrook and R. E. Tarjan. </author> <title> "Maintaining bridge-connected and bi-connected components on-line." </title> <type> Tech Report, </type> <institution> Princeton University, </institution> <year> 1989. </year> <month> 21 </month>
Reference-contexts: The semi-dynamic versions of the 2-edge connectivity and the 2-vertex connectivity problems were considered by Westbrook and Tarjan <ref> [19] </ref>; they showed that a sequence of n insertions and queries can be processed in O (nff (n)) time. Galil and Italiano [7] managed to obtain a sublinear time algorithm for fully dynamic 2-edge connectivity.
References-found: 19

