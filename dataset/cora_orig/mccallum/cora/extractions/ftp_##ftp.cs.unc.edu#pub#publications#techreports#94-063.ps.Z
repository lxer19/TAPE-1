URL: ftp://ftp.cs.unc.edu/pub/publications/techreports/94-063.ps.Z
Refering-URL: ftp://ftp.cs.unc.edu/pub/publications/techreports/FILE.html
Root-URL: http://www.cs.unc.edu
Title: Hidden Surface Removal Algorithms for Curved Surfaces  
Author: Shankar Krishnan Dinesh Manocha 
Address: Chapel Hill, NC 27599-3175  
Affiliation: Department of Computer Science, University of North Carolina,  
Abstract: Computing the visible portions of curved surfaces from a given viewpoint is of great interest in many applications. It is closely related to the hidden surface removal problem in computer graphics and machining applications in manufacturing. Most of the earlier work has focused on discrete methods based on polygonization or ray-tracing and hidden curve removal. In this paper we present an algorithm for hidden surface computations on curved surfaces. Given a viewpoint, it decomposes the domain of each surface based on silhouettes and boundary curves. To compute the exact visibility, we introduce a notion of "visibility curves" obtained by projection of silhouette and boundary curves and decomposing the surface into non-overlapping regions. These curves are computed using marching methods and we present techniques to compute all the components. The non-overlapping and visible portions of the surface are represented as trimmed surfaces and we present a representation based on polygon trapezoidation algorithms. The algorithms presented use some recently developed algorithms from computational geometry like triangulation of simple polygons and point location. Given the non-overlapping regions, we use a simple randomized algorithm for visibility computations from a given viewpoint. fl Supported in part by a Sloan Fellowship, university research council grant, NSF grant CCR-9319957, ONR contract N00014-94-1-0738, ARPA contract DABT63-93-C-0048, NSF/ARPA Science and Technology Center for Computer Graphics & Scientific Visualization and NSF Prime contract No. 8920219 
Abstract-found: 1
Intro-found: 1
Reference: [Can88] <author> J.F. Canny. </author> <title> The Complexity of Robot Motion Planning. ACM Doctoral Dissertation Award. </title> <publisher> MIT Press, </publisher> <year> 1988. </year>
Reference-contexts: When dealing with curved surfaces, most hidden surface removal algorithms must be capable of manipulating semi-algebraic sets [Mul90]. Results from elimination theory and algebraic decision procedures like Grobner bases are usually used for this purpose <ref> [Can88] </ref>. Unfortunately, algorithms based entirely on symbolic manipulation require infinite precision to represent algebraic numbers. Bounds based on Gap theorems [Can88] have been developed to approximate these numbers using finite precision. <p> Results from elimination theory and algebraic decision procedures like Grobner bases are usually used for this purpose <ref> [Can88] </ref>. Unfortunately, algorithms based entirely on symbolic manipulation require infinite precision to represent algebraic numbers. Bounds based on Gap theorems [Can88] have been developed to approximate these numbers using finite precision. However, implementations of these algorithms are very non-trivial and applicability of these bounds in practical situations are still not clear.
Reference: [CCW93] <author> L. Chen, S. Chou, and T.C. Woo. </author> <title> Separating and intersecting spherical polygons: computing machinability on three, four and five axis numerically controlled machines. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 12(4) </volume> <pages> 305-326, </pages> <year> 1993. </year>
Reference-contexts: In particular, hidden line and surface removal algorithms in computer graphics are related to visibility computations [FDHF90, Hor84, SSS74, HG77]. Similarly, accessibility computations in manufacturing applications are based on Gauss maps and visibility sets <ref> [Woo94, CCW93, GWT94] </ref>. These problems have been extensively studied in computer graphics, computer-aided design, computational geometry and manufacturing literature. In this paper, we are dealing with algebraic surfaces and surfaces defined using rational splines [Far93] that are differentiable.
Reference: [CEGS94] <author> B. Chazelle, H. Edelsbrunner, L. Guibas, and M. Sharir. </author> <title> Algorithms for bichromatic line segment problems and polyhedral terrains. </title> <booktitle> Algorithmica II, </booktitle> <pages> pages 116-132, </pages> <year> 1994. </year>
Reference-contexts: The algorithm works in two steps. * Find all the intersection points of each chain with the polygon and number them according to the order in which they occur. This problem can be solved in time O (N log 2 N ) <ref> [CEGS94] </ref>, where N is the total number of segments in the polygon and chains.
Reference: [Dix08] <author> A.L. Dixon. </author> <title> The eliminant of three quantics in two independent variables. </title> <journal> Proceedings of London Mathematical Society, </journal> <volume> 6 </volume> <pages> 49-69, 209-236, </pages> <year> 1908. </year>
Reference-contexts: If the number of intersections is 0, the surface is visible, otherwise it is not. We use some recent algorithms for these intersections based on eigenvalue computations [MD94]. Given a surface F (s; t), we compute its implicit representation using resultant methods <ref> [Dix08] </ref> and obtain a matrix formulation M (x; y; z; w). We substitute the parametrization of the curve, say G (u) = (X (u); Y (u); Z (u); W (u)) of degree d, and obtain a univariate matrix polynomial M (u).
Reference: [Dor94] <author> S. E. Dorward. </author> <title> A survey of object-space hidden surface removal. </title> <journal> International journal of Computational Geometry and Applications, </journal> <volume> 4 </volume> <pages> 325-362, </pages> <year> 1994. </year>
Reference-contexts: Extensions of the hidden surface algorithm from planar to curved faces are described in [Mul90]. A survey of most of the recent results in computational geometry regarding object-space hidden surface removal is presented in <ref> [Dor94] </ref>. When dealing with curved surfaces, most hidden surface removal algorithms must be capable of manipulating semi-algebraic sets [Mul90]. Results from elimination theory and algebraic decision procedures like Grobner bases are usually used for this purpose [Can88].
Reference: [EC90] <author> G. Elber and E. Cohen. </author> <title> Hidden curve removal for free form surfaces. </title> <journal> Computer Graphics, </journal> <volume> 24(4) </volume> <pages> 95-104, </pages> <year> 1990. </year>
Reference-contexts: The surfaces obtained after partitioning based on the silhouette computation need not be completely visible, as shown in Fig. 1. More recently, a hidden curve removal algorithm has been presented for parametric surfaces 2 3 by Elber and Cohen <ref> [EC90] </ref>. In particular, [EC90] extract the curves of interest by considering boundary curves, silhouette curves, iso-parametric curves and curves along C 1 discontinuity based on 2D curve-curve intersections. Their intersection algorithms are based on subdivision. <p> The surfaces obtained after partitioning based on the silhouette computation need not be completely visible, as shown in Fig. 1. More recently, a hidden curve removal algorithm has been presented for parametric surfaces 2 3 by Elber and Cohen <ref> [EC90] </ref>. In particular, [EC90] extract the curves of interest by considering boundary curves, silhouette curves, iso-parametric curves and curves along C 1 discontinuity based on 2D curve-curve intersections. Their intersection algorithms are based on subdivision. We present an algorithm for hidden surface removal on a set of parametric surfaces from a given viewpoint.
Reference: [EC93] <author> G. Elber and E. Cohen. </author> <title> Second order surface analysis using hybrid symbolic and numeric operators. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 12(2) </volume> <pages> 160-178, </pages> <year> 1993. </year>
Reference: [EC94] <author> G. Elber and E. Cohen. </author> <title> Exact computation of gauss maps and visibility sets for freefrom surfaces. </title> <type> Technical report CIS #9414, </type> <institution> Computer Science Department, Technion, </institution> <year> 1994. </year>
Reference: [Far93] <author> G. Farin. </author> <title> Curves and Surfaces for Computer Aided Geometric Design: A Practical Guide. </title> <publisher> Academic Press Inc., </publisher> <year> 1993. </year>
Reference-contexts: Similarly, accessibility computations in manufacturing applications are based on Gauss maps and visibility sets [Woo94, CCW93, GWT94]. These problems have been extensively studied in computer graphics, computer-aided design, computational geometry and manufacturing literature. In this paper, we are dealing with algebraic surfaces and surfaces defined using rational splines <ref> [Far93] </ref> that are differentiable. Given a viewpoint, the hidden surface removal problem deals with computation of the surface boundary visible from that viewpoint. Most of the earlier algorithms in the literature are for planar and polygonal primitives and hidden lines removal [FDHF90, Mul89, SSS74]. <p> However, as shown in fig. 1, silhouettes alone are not sufficient to determine all visible regions. In this section, we describe an algorithm to compute the silhouette curve on a parametric (represented as Bezier <ref> [Far93] </ref>) patch efficiently. We assume for the sake of simplicity that the viewpoint is located at (0; 0; 1). It is easy to see that even if this is not the case, one can always achieve it by applying an appropriate perspective transformation to the parametric surface F (s; t).
Reference: [FDHF90] <author> J. Foley, A. Van Dam, J. Hughes, and S. </author> <title> Feiner. </title> <booktitle> Computer Graphics: Principles and Practice. </booktitle> <publisher> Addison Wesley, </publisher> <address> Reading, Mass., </address> <year> 1990. </year>
Reference-contexts: 1 Introduction The problems of visibility and accessibility computations are fundamental for computer graphics, computer-aided design and manufacturing applications. In particular, hidden line and surface removal algorithms in computer graphics are related to visibility computations <ref> [FDHF90, Hor84, SSS74, HG77] </ref>. Similarly, accessibility computations in manufacturing applications are based on Gauss maps and visibility sets [Woo94, CCW93, GWT94]. These problems have been extensively studied in computer graphics, computer-aided design, computational geometry and manufacturing literature. <p> Given a viewpoint, the hidden surface removal problem deals with computation of the surface boundary visible from that viewpoint. Most of the earlier algorithms in the literature are for planar and polygonal primitives and hidden lines removal <ref> [FDHF90, Mul89, SSS74] </ref>. In computational geometry literature, many of the hidden surface algorithms simply calculate the entire arrangement of lines (projections of edges and vertices of the objects on the viewing plane). <p> Given a model composed of algebraic or parametric surfaces, it can be polygonized and algorithms developed for polygonal models can then be applied. However, the accuracy of the overall algorithm is limited by the accuracy of the polygonal approximation. Other techniques for visibility computations are based on ray-tracing <ref> [FDHF90] </ref>. Not only are the resulting algorithms slow but their accuracy is limited by the image-precision. These techniques are device resolution dependent and many applications in modeling and rendering desire a device-independent solution [TW93].
Reference: [Ful78] <author> W. Fulks. </author> <title> Advanced Calculus: An introduction to analysis. </title> <publisher> John Wiley & sons, </publisher> <year> 1978. </year> <month> 23 </month>
Reference-contexts: We shall now introduce the notion of visibility curves and elucidate their role in determining global visibility. We now state without proof a fundamental theorem from vector calculus called the global inverse theorem which provides the basis for our method <ref> [Ful78] </ref>. Theorem 1 Let F be a continuously differentiable mapping defined on an open region D 2 &lt; 2 , with range R 2 &lt; 2 , and let its Jacobian be never zero in D.
Reference: [GBDM77] <author> B.S. Garbow, J.M. Boyle, J. Dongarra, and C.B. Moler. </author> <title> Matrix Eigensystem Routines - EISPACK Guide Extension, volume 51. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1977. </year>
Reference-contexts: At each stage of the algorithm, we can compute bounds on the accuracy of the results obtained based on the accuracy and convergence of numerical methods adopted like eigenvalue computation, power iteration and Gaussian elimination. Our implementation uses EISPACK <ref> [GBDM77] </ref> routines (in Fortran) to compute the eigenvalues of matrices. The algorithm was run on a high-end SGI Onyx workstation with a single processor configuration. The performance of the algorithm was measured on a number of bicubic (of degree 3 in both parameters) patches.
Reference: [GL89] <author> G.H. Golub and C.F. Van Loan. </author> <title> Matrix Computations. </title> <publisher> John Hopkins Press, </publisher> <address> Baltimore, </address> <year> 1989. </year>
Reference-contexts: In case M d is singular or ill-conditioned, the intersection problem is reduced to a generalized eigenvalue problem [MD94]. Algorithms to compute all the eigenvalues are based on QR orthogonal transformations <ref> [GL89] </ref>. They compute all the real as well as complex eigenvalues. Algorithms to compute eigenvalues in a subset of the real or complex domain are presented in [MD94]. 2.4 Power Iterations We use marching methods to trace the visibility curves. <p> Consider a patch F (s; t) of degree m in s and n in t, and let N = maxfm; ng. Then the companion matrix (eq. (2), whose eigenvalues correspond to the roots of the matrix polynomial) is of order 3N . We use the QR method <ref> [GL89] </ref> to compute all the eigenvalues. The number of floating point operations performed is 8N 3 . In inverse power iterations, the two main operations are the LU decomposition of the matrix and solving the resulting triangular systems.
Reference: [GLR82] <author> I. Gohberg, P. Lancaster, and L. Rodman. </author> <title> Matrix Polynomials. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1982. </year>
Reference-contexts: M 0 M 1 M 2 : : : M d1 7 7 5 where M i = M 1 d M i <ref> [GLR82] </ref>. In case M d is singular or ill-conditioned, the intersection problem is reduced to a generalized eigenvalue problem [MD94]. Algorithms to compute all the eigenvalues are based on QR orthogonal transformations [GL89]. They compute all the real as well as complex eigenvalues. <p> By eliminating u from these two equations using Sylvester's resultant [Sed83], we obtain a matrix polynomial in v. We can reduce it to an eigenvalue problem of an associated companion matrix <ref> [GLR82] </ref>. After obtaining all the eigenvalues (using LAPACK routines) only the solutions that lie within the intervals are taken. Using this method, all the intersection points are determined accurately and efficiently. 2.
Reference: [GO87] <author> R. H. Guting and T. Ottmann. </author> <title> New algorithms for special cases of the hidden line elimination problem. Comput. Vision Graph. </title> <journal> Image Process., </journal> <volume> 40 </volume> <pages> 188-204, </pages> <year> 1987. </year>
Reference-contexts: In computational geometry literature, many of the hidden surface algorithms simply calculate the entire arrangement of lines (projections of edges and vertices of the objects on the viewing plane). Output-sensitive hidden surface algorithms were developed for special input cases like c-oriented solids <ref> [GO87] </ref>, axis-parallel rectangles [PVY92] and polyhedral terrains [RS88]. Very few algorithms are able to cope with cycles (impossible to obtain an ordering among the faces without splitting some of them) efficiently. A randomized algorithm to generate the visibility map was given by Mulmuley [Mul89] for the general case.
Reference: [GWT94] <author> J.G. Gan, T.C. Woo, and K. Tang. </author> <title> Spherical maps: Their construction, properties, and approximation. </title> <journal> ASME Trans. J. Mech. </journal> <note> Des., 1994. To appear. </note>
Reference-contexts: In particular, hidden line and surface removal algorithms in computer graphics are related to visibility computations [FDHF90, Hor84, SSS74, HG77]. Similarly, accessibility computations in manufacturing applications are based on Gauss maps and visibility sets <ref> [Woo94, CCW93, GWT94] </ref>. These problems have been extensively studied in computer graphics, computer-aided design, computational geometry and manufacturing literature. In this paper, we are dealing with algebraic surfaces and surfaces defined using rational splines [Far93] that are differentiable.
Reference: [HG77] <author> G. Hamlin and C. W. Gear. </author> <title> Raster-scan hidden surface algorithm techniques. </title> <journal> Computer Graphics, </journal> <volume> 11 </volume> <pages> 206-213, </pages> <year> 1977. </year>
Reference-contexts: 1 Introduction The problems of visibility and accessibility computations are fundamental for computer graphics, computer-aided design and manufacturing applications. In particular, hidden line and surface removal algorithms in computer graphics are related to visibility computations <ref> [FDHF90, Hor84, SSS74, HG77] </ref>. Similarly, accessibility computations in manufacturing applications are based on Gauss maps and visibility sets [Woo94, CCW93, GWT94]. These problems have been extensively studied in computer graphics, computer-aided design, computational geometry and manufacturing literature.
Reference: [Hor84] <author> C. Hornung. </author> <title> A method for solving the visibility problem. </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pages 26-33, </pages> <month> July </month> <year> 1984. </year>
Reference-contexts: 1 Introduction The problems of visibility and accessibility computations are fundamental for computer graphics, computer-aided design and manufacturing applications. In particular, hidden line and surface removal algorithms in computer graphics are related to visibility computations <ref> [FDHF90, Hor84, SSS74, HG77] </ref>. Similarly, accessibility computations in manufacturing applications are based on Gauss maps and visibility sets [Woo94, CCW93, GWT94]. These problems have been extensively studied in computer graphics, computer-aided design, computational geometry and manufacturing literature.
Reference: [KM95] <author> S. Krishnan and D. Manocha. </author> <title> Numeric-symbolic algorithms for evaluating one-dimensional algebraic sets. </title> <booktitle> In Proceedings of International Symposium on Symbolic and Algebraic Computation, </booktitle> <year> 1995. </year>
Reference-contexts: Since the coefficients of the curve are real, all complex portions of the curve must occur in conjugate pairs. We characterize certain special points on loops (turning points) as places where two complex conjugate paths merge to form a real component <ref> [KM95] </ref>. By following all the complex paths inside the domain we can locate at least a single point on each loop. <p> Converging back on to the curve. 2. Preventing component jumping. 3. Ability to handle singularities and trace through multiple branches. We have developed an algorithm based on inverse power iterations (section 2.4) to trace the curve. The details of the complete algorithm are presented in <ref> [KM95] </ref>. Our algorithm evaluates the silhouette curve at discrete steps to create a piecewise linear approximation. The tracing algorithm has been implemented and tested on a variety of examples and has proved to be fairly robust. <p> Our final goal is to output trimmed patches of the scene that are visible from the given viewpoint. We shall assume for simplicity that the faces input to this algorithm are non-intersecting. If they are intersecting, we may have to compute all the pairwise surface intersections <ref> [KM95] </ref> and split them into non-intersecting faces. The input to the algorithm is a set of n faces, each of whose boundaries is represented as a collection of Bezier curves and piecewise linear chains. We also have the entire face boundary as a closed simple polygon.
Reference: [Li81] <author> L. Li. </author> <title> Hidden-line algorithm for curved surfaces. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 20(8) </volume> <pages> 466-470, </pages> <year> 1981. </year>
Reference: [MD94] <author> D. Manocha and J. Demmel. </author> <title> Algorithms for intersecting parametric and algebraic curves i: simple intersections. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 13(1) </volume> <pages> 73-100, </pages> <year> 1994. </year>
Reference-contexts: If the number of intersections is 0, the surface is visible, otherwise it is not. We use some recent algorithms for these intersections based on eigenvalue computations <ref> [MD94] </ref>. Given a surface F (s; t), we compute its implicit representation using resultant methods [Dix08] and obtain a matrix formulation M (x; y; z; w). <p> M 0 M 1 M 2 : : : M d1 7 7 5 where M i = M 1 d M i [GLR82]. In case M d is singular or ill-conditioned, the intersection problem is reduced to a generalized eigenvalue problem <ref> [MD94] </ref>. Algorithms to compute all the eigenvalues are based on QR orthogonal transformations [GL89]. They compute all the real as well as complex eigenvalues. Algorithms to compute eigenvalues in a subset of the real or complex domain are presented in [MD94]. 2.4 Power Iterations We use marching methods to trace the <p> the intersection problem is reduced to a generalized eigenvalue problem <ref> [MD94] </ref>. Algorithms to compute all the eigenvalues are based on QR orthogonal transformations [GL89]. They compute all the real as well as complex eigenvalues. Algorithms to compute eigenvalues in a subset of the real or complex domain are presented in [MD94]. 2.4 Power Iterations We use marching methods to trace the visibility curves. At each iterations, we pose the problem as an eigenvalue problem and use local methods to compute points on the curve. Power iteration is a fundamental local technique used to compute eigenvalues and eigenvectors of a matrix. <p> We find all the boundary silhouette points by determining the roots of four univariate matrix polynomials, M (0; t), M (1; t), M (s; 0) and M (s; 1). This problem can be reduced to finding the eigenvalues of an associated companion matrix (see eq. (2)) <ref> [MD94] </ref>. We retain only the real solutions that lie within the domain. A much harder problem is to determine if the silhouette curve has loops inside the domain of the surface, and if so to compute at least one point on each of them.
Reference: [Mul89] <author> K. Mulmuley. </author> <title> An efficient algorithm for hidden surface removal. </title> <journal> Computer Graphics, </journal> <volume> 23(3) </volume> <pages> 379-388, </pages> <year> 1989. </year>
Reference-contexts: Given a viewpoint, the hidden surface removal problem deals with computation of the surface boundary visible from that viewpoint. Most of the earlier algorithms in the literature are for planar and polygonal primitives and hidden lines removal <ref> [FDHF90, Mul89, SSS74] </ref>. In computational geometry literature, many of the hidden surface algorithms simply calculate the entire arrangement of lines (projections of edges and vertices of the objects on the viewing plane). <p> Very few algorithms are able to cope with cycles (impossible to obtain an ordering among the faces without splitting some of them) efficiently. A randomized algorithm to generate the visibility map was given by Mulmuley <ref> [Mul89] </ref> for the general case. The algorithm maintains the trapezoidation of the visibility map and updates it by randomly adding one face at a time. The algorithm is (almost) output-sensitive. <p> We shall, therefore, refer to each such region as a face. Recently fast randomized algorithms have been developed that can handle this problem for polygonal models <ref> [Mul89] </ref>. However, we present a simple algorithm based on the the same projection idea that works well. Our final goal is to output trimmed patches of the scene that are visible from the given viewpoint. We shall assume for simplicity that the faces input to this algorithm are non-intersecting.
Reference: [Mul90] <author> K. Mulmuley. </author> <title> An efficient algorithm for hidden surface removal, ii. </title> <type> Report TR-90-31, </type> <institution> Dept. Comput. Sci., Univ. Of Chicago, Chicago, Illinois, </institution> <year> 1990. </year>
Reference-contexts: The algorithm is (almost) output-sensitive. In [Mul91], the expected time was improved to O (n log n + q), where q is the number of edges in the visibility map. Extensions of the hidden surface algorithm from planar to curved faces are described in <ref> [Mul90] </ref>. A survey of most of the recent results in computational geometry regarding object-space hidden surface removal is presented in [Dor94]. When dealing with curved surfaces, most hidden surface removal algorithms must be capable of manipulating semi-algebraic sets [Mul90]. <p> the hidden surface algorithm from planar to curved faces are described in <ref> [Mul90] </ref>. A survey of most of the recent results in computational geometry regarding object-space hidden surface removal is presented in [Dor94]. When dealing with curved surfaces, most hidden surface removal algorithms must be capable of manipulating semi-algebraic sets [Mul90]. Results from elimination theory and algebraic decision procedures like Grobner bases are usually used for this purpose [Can88]. Unfortunately, algorithms based entirely on symbolic manipulation require infinite precision to represent algebraic numbers. Bounds based on Gap theorems [Can88] have been developed to approximate these numbers using finite precision.
Reference: [Mul91] <author> K. Mulmuley. </author> <title> Hidden surface removal with respect to a moving point. </title> <booktitle> In Proc. 23rd Annu. ACM Sympos. Theory Comput., </booktitle> <pages> pages 512-522, </pages> <year> 1991. </year>
Reference-contexts: A randomized algorithm to generate the visibility map was given by Mulmuley [Mul89] for the general case. The algorithm maintains the trapezoidation of the visibility map and updates it by randomly adding one face at a time. The algorithm is (almost) output-sensitive. In <ref> [Mul91] </ref>, the expected time was improved to O (n log n + q), where q is the number of edges in the visibility map. Extensions of the hidden surface algorithm from planar to curved faces are described in [Mul90].
Reference: [PS85] <author> F.P. Preparata and M. I. Shamos. </author> <title> Computational Geometry. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1985. </year>
Reference-contexts: Therefore, we use piecewise linear approximation of all silhouette curves as the first iteration in our intersection computation. We treat the chain as a set of line segments. We use the Bentley-Ottmann algorithm <ref> [PS85] </ref> to obtain the intersection points in O ((N + k) log N ) time, where k is the number of intersection points. This algorithm is close to optimal because in our case k is very small.
Reference: [PVY92] <author> F. P. Preparata, J. S. Vitter, and M. Yvinec. </author> <title> Output-sensitive generation of the perspective view of isothetic par allelepipeds. </title> <journal> Algorithmica, </journal> <volume> 8 </volume> <pages> 257-283, </pages> <year> 1992. </year>
Reference-contexts: In computational geometry literature, many of the hidden surface algorithms simply calculate the entire arrangement of lines (projections of edges and vertices of the objects on the viewing plane). Output-sensitive hidden surface algorithms were developed for special input cases like c-oriented solids [GO87], axis-parallel rectangles <ref> [PVY92] </ref> and polyhedral terrains [RS88]. Very few algorithms are able to cope with cycles (impossible to obtain an ordering among the faces without splitting some of them) efficiently. A randomized algorithm to generate the visibility map was given by Mulmuley [Mul89] for the general case.
Reference: [RS88] <author> J. H. Reif and S. Sen. </author> <title> An efficient output-sensitive hidden-surface removal algorithms and its parallelization. </title> <booktitle> In Proc. 4th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 193-200, </pages> <year> 1988. </year>
Reference-contexts: In computational geometry literature, many of the hidden surface algorithms simply calculate the entire arrangement of lines (projections of edges and vertices of the objects on the viewing plane). Output-sensitive hidden surface algorithms were developed for special input cases like c-oriented solids [GO87], axis-parallel rectangles [PVY92] and polyhedral terrains <ref> [RS88] </ref>. Very few algorithms are able to cope with cycles (impossible to obtain an ordering among the faces without splitting some of them) efficiently. A randomized algorithm to generate the visibility map was given by Mulmuley [Mul89] for the general case.
Reference: [Sed83] <author> T.W. </author> <title> Sederberg. Implicit and Parametric Curves and Surfaces. </title> <type> PhD thesis, </type> <institution> Purdue University, </institution> <year> 1983. </year>
Reference-contexts: By eliminating u from these two equations using Sylvester's resultant <ref> [Sed83] </ref>, we obtain a matrix polynomial in v. We can reduce it to an eigenvalue problem of an associated companion matrix [GLR82]. After obtaining all the eigenvalues (using LAPACK routines) only the solutions that lie within the intervals are taken.
Reference: [Sei91] <author> R. Seidel. </author> <title> A simple and fast randomized algorithm for computing trapezoidal decompositions and for triangulating polygons. </title> <journal> Computational Geometry Theory & Applications, </journal> <volume> 1(1) </volume> <pages> 51-64, </pages> <year> 1991. </year>
Reference-contexts: These non-convex polygonal domains are decomposed into triangles for many geometric operations like intersections and partitioning. To decompose a simple polygon into an optimal number of triangles we use Seidel's algorithm <ref> [Sei91] </ref>. It is an incremental randomized algorithm whose expected complexity is O (N log fl N ), 4 where N is the number of vertices. In practice, it is almost linear time. The algorithm proceeds in three steps as shown in fig. 2.
Reference: [SSS74] <author> I. Sutherland, R. Sproull, and R. Schumaker. </author> <title> A characterization of ten hidden-surface algorithms. </title> <journal> Computing Surveys, </journal> <volume> 6(1) </volume> <pages> 1-55, </pages> <year> 1974. </year>
Reference-contexts: 1 Introduction The problems of visibility and accessibility computations are fundamental for computer graphics, computer-aided design and manufacturing applications. In particular, hidden line and surface removal algorithms in computer graphics are related to visibility computations <ref> [FDHF90, Hor84, SSS74, HG77] </ref>. Similarly, accessibility computations in manufacturing applications are based on Gauss maps and visibility sets [Woo94, CCW93, GWT94]. These problems have been extensively studied in computer graphics, computer-aided design, computational geometry and manufacturing literature. <p> Given a viewpoint, the hidden surface removal problem deals with computation of the surface boundary visible from that viewpoint. Most of the earlier algorithms in the literature are for planar and polygonal primitives and hidden lines removal <ref> [FDHF90, Mul89, SSS74] </ref>. In computational geometry literature, many of the hidden surface algorithms simply calculate the entire arrangement of lines (projections of edges and vertices of the objects on the viewing plane).
Reference: [TW93] <author> B. Tebbs and T. Whitted. </author> <title> Numerical Design Limited, </title> <type> Personal Communication, </type> <year> 1993. </year>
Reference-contexts: Other techniques for visibility computations are based on ray-tracing [FDHF90]. Not only are the resulting algorithms slow but their accuracy is limited by the image-precision. These techniques are device resolution dependent and many applications in modeling and rendering desire a device-independent solution <ref> [TW93] </ref>. Given a curved surface model and a viewpoint, the silhouettes on the model partition it into front facing and back facing regions (as shown in Fig. 1). The silhouettes are composed of points on surfaces where the normal vector is orthogonal to the viewing direction.
Reference: [Woo94] <author> T. Woo. </author> <title> Visibility maps and spherical algorithms. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 26(1) </volume> <pages> 6-16, </pages> <year> 1994. </year>
Reference-contexts: In particular, hidden line and surface removal algorithms in computer graphics are related to visibility computations [FDHF90, Hor84, SSS74, HG77]. Similarly, accessibility computations in manufacturing applications are based on Gauss maps and visibility sets <ref> [Woo94, CCW93, GWT94] </ref>. These problems have been extensively studied in computer graphics, computer-aided design, computational geometry and manufacturing literature. In this paper, we are dealing with algebraic surfaces and surfaces defined using rational splines [Far93] that are differentiable.
References-found: 32

