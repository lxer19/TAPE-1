URL: http://www.csl.sri.com/~munoz/Papers/wes98.ps.gz
Refering-URL: http://www.csl.sri.com/~munoz/cv.html
Root-URL: 
Email: Email: munoz@csl.sri.com  
Phone: Tel: +1 (650) 859-2784, Fax: +1 (650) 859-2844  
Title: Proof Synthesis via Refinement Steps: Another Application of Explicit Substitutions on Open Terms (Extended Abstract)  
Author: Cesar Mu~noz 
Date: February 24, 1998  
Address: 333 Ravenswood Avenue Menlo Park, CA 94025, USA  
Affiliation: Computer Science Laboratory SRI International  
Abstract: We present a proof synthesis method for the dependent type systems where proofs are built incrementally by successive refinement steps. In particular, we show how the Dowek's proof synthesis method for the cube type systems can be adapted to the incomplete proof-term paradigm via a suitable theory with explicit substitutions and typed meta-variables.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Abadi, L. Cardelli, P.-L. Curien, and J.-J. Levy. </author> <title> Explicit substitution. </title> <journal> Journal of Functional Programming, </journal> <volume> 1(4) </volume> <pages> 375-416, </pages> <year> 1991. </year>
Reference-contexts: Moreover, if we use the -calculus a la De Bruijn, a meta-variable is simply a variable of the free-algebra of terms. In order to satisfy typing requirements, it is necessary to provide a mechanism to postpone the application of substitutions to place-holders [23, 10]. Calculi of explicit substitutions <ref> [1] </ref> improve the substitution mechanism of the -calculus by allowing substitutions to be part of the formal language by means of special constructors and reduction rules. Thus, in these calculi it is possible to consider terms with partially applied substitutions. <p> This fact is reflected in the several variants of calculi of explicit substitutions that have been proposed; see among others <ref> [1, 29, 21, 18, 2, 22, 7, 19, 24, 13, 26] </ref>. <p> This calculus is a dependent-typed version of a left-linear variant of <ref> [1] </ref>. In L , variables use the De Bruijn indices notation and meta-variables use names. As usual in typed calculi a la De Bruijn, variables are declared in lists of types called contexts. In addition, meta-variables are declared in list structures called signatures.
Reference: [2] <author> R. Bloo and K. H. Rose. </author> <title> Preservation of strong normalisation in named lambda calculi with explicit substitution and garbage collection. </title> <booktitle> In Proceedings of CSN-95: Computer Science in the Netherlands, </booktitle> <month> November </month> <year> 1995. </year>
Reference-contexts: This fact is reflected in the several variants of calculi of explicit substitutions that have been proposed; see among others <ref> [1, 29, 21, 18, 2, 22, 7, 19, 24, 13, 26] </ref>.
Reference: [3] <author> D. Briaud. </author> <title> Higher order unification as a typed narrowing. </title> <type> Technical report, </type> <institution> CRIN report 96-R-112, </institution> <year> 1996. </year>
Reference-contexts: This algorithm is generalized to solve higher-order equational unification by Kirchner and Ringeissen [20], and restricted to the case of higher-order patterns by Dowek, Hardin, Kirchner and Pfenning in [11]. On other hand, Briaud <ref> [3] </ref> shows how HOU can be considered as a typed narrowing in the - calculus of explicit substitutions. Magnusson [23] presents a unification algorithm in the Martin-Lof's type theory with explicit substitutions. This algorithm solves first-order unification problems, but leaves unsolved the flexible-flexible constraints.
Reference: [4] <author> T. Coquand. </author> <title> Une Theorie de Constructions. </title> <institution> These de doctorat, U. Paris VII, </institution> <year> 1985. </year>
Reference-contexts: how to reduce higher-order unification into a first-order framework via explicit substitutions and typed meta-variables. fl This research was supported by National Science Foundation grant CCR-9712383. 1 In [25, 27] we propose an explicit substitution calculus, namely L , for dependent type theories like [14] and the Calculus of Constructions <ref> [4, 5] </ref>. On well-typed expressions containing meta-variables of terms, the L -calculus is confluent and weakly normalizing. Although L does not enjoy confluence on the full set of open expressions, i.e.
Reference: [5] <author> T. Coquand and G. Huet. </author> <title> The Calculus of Constructions. </title> <journal> Information and Computation, </journal> <volume> 76 </volume> <pages> 96-120, </pages> <year> 1988. </year>
Reference-contexts: how to reduce higher-order unification into a first-order framework via explicit substitutions and typed meta-variables. fl This research was supported by National Science Foundation grant CCR-9712383. 1 In [25, 27] we propose an explicit substitution calculus, namely L , for dependent type theories like [14] and the Calculus of Constructions <ref> [4, 5] </ref>. On well-typed expressions containing meta-variables of terms, the L -calculus is confluent and weakly normalizing. Although L does not enjoy confluence on the full set of open expressions, i.e.
Reference: [6] <author> C. Cornes. </author> <title> Conception d'un langage de haut niveau de representation de preuves: recurrence par filtrage de motifs, unification en presence de types inductif primitifs. </title> <institution> synthese de lemmes d'inversion. These de doctorat, Universite Paris 7, </institution> <year> 1997. </year>
Reference-contexts: In type systems, higher-order unification (HOU) algorithms are known for the simply-typed -calculus [16] and for the -calculus of dependent types [12, 28]. For the cube type systems, Dowek [8, 9] re-formulates the unification procedure and generalizes it as a method of term enumeration. Recently, Cornes <ref> [6] </ref> proposes an extension of Dowek's method to the Calculus of Constructions with Inductive Types. 8 Dowek, Hardin and Kirchner [10] propose a first-order presentation of the Huet's HOU-algorithm based on explicit substitutions and typed meta-variables.
Reference: [7] <author> P.-L. Curien, T. Hardin, and J.-J. Levy. </author> <title> Confluence properties of weak and strong calculi of explicit substitutions. </title> <journal> Journal of the ACM, </journal> <volume> 43(2) </volume> <pages> 362-397, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: This fact is reflected in the several variants of calculi of explicit substitutions that have been proposed; see among others <ref> [1, 29, 21, 18, 2, 22, 7, 19, 24, 13, 26] </ref>.
Reference: [8] <author> G. Dowek. </author> <title> Demonstration automatique dans le calcul des constructions. </title> <institution> These de doctorat, U. Paris VII, </institution> <year> 1991. </year>
Reference-contexts: In this paper we describe a proof synthesis method for the calculus of construction that uses the incomplete proof-term paradigm. The method we present is strongly inspired by that proposed by Dowek in <ref> [8, 9] </ref> for the Cube of Type Systems. In contrast to Dowek's work, we use the L -calculus, and not the -calculus, as the underlying theory. In this way, proof-terms can be built incrementally by successive refinement steps. <p> Of course this method is impractical for implementations. A smart enumeration of terms takes typing information into account. Dowek shows in <ref> [8, 9] </ref> a complete term enumeration algorithm for the type systems of the Barendregt's cube. Let us present the Dowek's method, from an incomplete proof-term perspective, with an example. Assume we search a proof of 8p:(8h:nat:(h 0)):(0 0) in a context containing the following declarations nat:Type; :nat!(nat!Type); 0:nat. <p> In the case of polymorphism and constructions of types, it must also deal with the problem of splitting <ref> [8] </ref>, i.e. the arity of a function can not be deduced from its type. Informally, the method to find an instantiation for a meta-variable X of type A in a context can be summarized as follows: 1. <p> In type systems, higher-order unification (HOU) algorithms are known for the simply-typed -calculus [16] and for the -calculus of dependent types [12, 28]. For the cube type systems, Dowek <ref> [8, 9] </ref> re-formulates the unification procedure and generalizes it as a method of term enumeration. <p> Our main contribution is the presentation of the Dowek's method of proof synthesis in a suitable theory with explicit substitutions and typed meta-variables. In this way, proof-terms can be built incrementally by successive instantiation of meta-variables. Just as in <ref> [8, 9] </ref>, the method presented here is sound and we conjecture its completeness. Thus, it can be seen as a semi-algorithm for ground higher-order unification in the calculus of constructions.
Reference: [9] <author> G. Dowek. </author> <title> A complete proof synthesis method for type systems of the cube. </title> <journal> Journal of Logic and Computation, </journal> <volume> 3(3) </volume> <pages> 287-315, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: In this paper we describe a proof synthesis method for the calculus of construction that uses the incomplete proof-term paradigm. The method we present is strongly inspired by that proposed by Dowek in <ref> [8, 9] </ref> for the Cube of Type Systems. In contrast to Dowek's work, we use the L -calculus, and not the -calculus, as the underlying theory. In this way, proof-terms can be built incrementally by successive refinement steps. <p> Of course this method is impractical for implementations. A smart enumeration of terms takes typing information into account. Dowek shows in <ref> [8, 9] </ref> a complete term enumeration algorithm for the type systems of the Barendregt's cube. Let us present the Dowek's method, from an incomplete proof-term perspective, with an example. Assume we search a proof of 8p:(8h:nat:(h 0)):(0 0) in a context containing the following declarations nat:Type; :nat!(nat!Type); 0:nat. <p> In type systems, higher-order unification (HOU) algorithms are known for the simply-typed -calculus [16] and for the -calculus of dependent types [12, 28]. For the cube type systems, Dowek <ref> [8, 9] </ref> re-formulates the unification procedure and generalizes it as a method of term enumeration. <p> Our main contribution is the presentation of the Dowek's method of proof synthesis in a suitable theory with explicit substitutions and typed meta-variables. In this way, proof-terms can be built incrementally by successive instantiation of meta-variables. Just as in <ref> [8, 9] </ref>, the method presented here is sound and we conjecture its completeness. Thus, it can be seen as a semi-algorithm for ground higher-order unification in the calculus of constructions.
Reference: [10] <author> G. Dowek, T. Hardin, and C. Kirchner. </author> <title> Higher-order unification via explicit substitutions (extended abstract). </title> <booktitle> In Proceedings of the Tenth Annual IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 366-374, </pages> <address> San Diego, California, 26-29 June 1995. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Moreover, if we use the -calculus a la De Bruijn, a meta-variable is simply a variable of the free-algebra of terms. In order to satisfy typing requirements, it is necessary to provide a mechanism to postpone the application of substitutions to place-holders <ref> [23, 10] </ref>. Calculi of explicit substitutions [1] improve the substitution mechanism of the -calculus by allowing substitutions to be part of the formal language by means of special constructors and reduction rules. Thus, in these calculi it is possible to consider terms with partially applied substitutions. <p> This fact is reflected in the several variants of calculi of explicit substitutions that have been proposed; see among others [1, 29, 21, 18, 2, 22, 7, 19, 24, 13, 26]. For the simply-typed -calculus, Dowek, Hardin and Kirchner <ref> [10] </ref> show how to reduce higher-order unification into a first-order framework via explicit substitutions and typed meta-variables. fl This research was supported by National Science Foundation grant CCR-9712383. 1 In [25, 27] we propose an explicit substitution calculus, namely L , for dependent type theories like [14] and the Calculus of <p> For the cube type systems, Dowek [8, 9] re-formulates the unification procedure and generalizes it as a method of term enumeration. Recently, Cornes [6] proposes an extension of Dowek's method to the Calculus of Constructions with Inductive Types. 8 Dowek, Hardin and Kirchner <ref> [10] </ref> propose a first-order presentation of the Huet's HOU-algorithm based on explicit substitutions and typed meta-variables. This algorithm is generalized to solve higher-order equational unification by Kirchner and Ringeissen [20], and restricted to the case of higher-order patterns by Dowek, Hardin, Kirchner and Pfenning in [11].
Reference: [11] <author> G. Dowek, T. Hardin, C. Kirchner, and F. Pfenning. </author> <title> Unification via explicit substitutions: The case of higher-order patterns. </title> <editor> In M. Maher, editor, </editor> <booktitle> Proceedings of the Joint International Conference and Symposium on Logic Programming, </booktitle> <address> Bonn, Germany, September 1996. </address> <publisher> MIT Press. </publisher>
Reference-contexts: This algorithm is generalized to solve higher-order equational unification by Kirchner and Ringeissen [20], and restricted to the case of higher-order patterns by Dowek, Hardin, Kirchner and Pfenning in <ref> [11] </ref>. On other hand, Briaud [3] shows how HOU can be considered as a typed narrowing in the - calculus of explicit substitutions. Magnusson [23] presents a unification algorithm in the Martin-Lof's type theory with explicit substitutions. This algorithm solves first-order unification problems, but leaves unsolved the flexible-flexible constraints.
Reference: [12] <author> C. Elliott. </author> <title> Higher-order unification with dependent types. </title> <editor> In N. Dershowitz, editor, </editor> <booktitle> Proceedings fo the International Conference on Rewriting Techniques and Applications (RTA-89), volume 355 of LNCS, </booktitle> <pages> pages 121-136, </pages> <address> Chapel Hill, North Carolina, April 1989. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: In type systems, higher-order unification (HOU) algorithms are known for the simply-typed -calculus [16] and for the -calculus of dependent types <ref> [12, 28] </ref>. For the cube type systems, Dowek [8, 9] re-formulates the unification procedure and generalizes it as a method of term enumeration.
Reference: [13] <author> M. C. F. Ferreira, D. Kesner, and L. Puel. </author> <title> -calculi with explicit substitutions and composition which preserve fi-strong normalization. </title> <publisher> LNCS, </publisher> <address> 1139, </address> <year> 1996. </year>
Reference-contexts: This fact is reflected in the several variants of calculi of explicit substitutions that have been proposed; see among others <ref> [1, 29, 21, 18, 2, 22, 7, 19, 24, 13, 26] </ref>.
Reference: [14] <author> R. Harper, F. Honsell, and G. Plotkin. </author> <title> A framework for defining logics. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 40(1) </volume> <pages> 143-184, </pages> <year> 1993. </year>
Reference-contexts: Dowek, Hardin and Kirchner [10] show how to reduce higher-order unification into a first-order framework via explicit substitutions and typed meta-variables. fl This research was supported by National Science Foundation grant CCR-9712383. 1 In [25, 27] we propose an explicit substitution calculus, namely L , for dependent type theories like <ref> [14] </ref> and the Calculus of Constructions [4, 5]. On well-typed expressions containing meta-variables of terms, the L -calculus is confluent and weakly normalizing. Although L does not enjoy confluence on the full set of open expressions, i.e.
Reference: [15] <author> G. Huet. </author> <title> Constrained Resolution A Complete Method for Higher Order Logic. </title> <type> PhD thesis, </type> <institution> Case Western Reserve University, </institution> <year> 1972. </year>
Reference-contexts: A complete method for search of proof-trees based on resolution and unification was formulated by Robinson [30] for the first-order logic, and by Huet <ref> [15] </ref> for the higher-order logic. In type systems, higher-order unification (HOU) algorithms are known for the simply-typed -calculus [16] and for the -calculus of dependent types [12, 28]. For the cube type systems, Dowek [8, 9] re-formulates the unification procedure and generalizes it as a method of term enumeration.
Reference: [16] <author> G. Huet. </author> <title> A unification algorithm for typed lambda calculus. </title> <journal> Theoretical Computer Science, </journal> <volume> 1(1) </volume> <pages> 27-57, </pages> <year> 1975. </year>
Reference-contexts: A complete method for search of proof-trees based on resolution and unification was formulated by Robinson [30] for the first-order logic, and by Huet [15] for the higher-order logic. In type systems, higher-order unification (HOU) algorithms are known for the simply-typed -calculus <ref> [16] </ref> and for the -calculus of dependent types [12, 28]. For the cube type systems, Dowek [8, 9] re-formulates the unification procedure and generalizes it as a method of term enumeration.
Reference: [17] <author> G. Huet. </author> <title> Resolution d' Equations dans les Langages d'Ordre 1,2, </title> ...,!. <institution> These de doctorat, U. Paris VII, </institution> <year> 1976. </year>
Reference: [18] <author> F. Kamareddine and A. Ros. </author> <title> A -calculus a la de Bruijn with explicit substitutions. </title> <booktitle> In Proceedings of PLILP'95. </booktitle> <publisher> LNCS, </publisher> <year> 1995. </year>
Reference-contexts: This fact is reflected in the several variants of calculi of explicit substitutions that have been proposed; see among others <ref> [1, 29, 21, 18, 2, 22, 7, 19, 24, 13, 26] </ref>.
Reference: [19] <author> D. Kesner. </author> <title> Confluence properties of extensional and non-extensional -calculi with explicit substitutions (extended abstract). </title> <editor> In H. Ganzinger, editor, </editor> <booktitle> Proceedings of the 7th International Conference on Rewriting Techniques and Applications (RTA-96), volume 1103 of LNCS, </booktitle> <pages> pages 184-199, </pages> <address> New Brunswick, NJ, USA, 1996. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: This fact is reflected in the several variants of calculi of explicit substitutions that have been proposed; see among others <ref> [1, 29, 21, 18, 2, 22, 7, 19, 24, 13, 26] </ref>.
Reference: [20] <author> C. Kirchner and C. Ringeissen. </author> <title> Higher order equational unification via explicit substitutions. </title> <booktitle> In Proceedings of the International Conference PLILP/ALP/HOA'97, volume 1298 of LNCS, </booktitle> <address> Southampton (England), September 1997. </address> <publisher> Springer. </publisher>
Reference-contexts: This algorithm is generalized to solve higher-order equational unification by Kirchner and Ringeissen <ref> [20] </ref>, and restricted to the case of higher-order patterns by Dowek, Hardin, Kirchner and Pfenning in [11]. On other hand, Briaud [3] shows how HOU can be considered as a typed narrowing in the - calculus of explicit substitutions.
Reference: [21] <author> P. Lescanne. </author> <title> From to a journey through calculi of explicit substitutions. </title> <booktitle> In Proceedings of the 21st Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, </booktitle> <pages> pages 60-69, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: This fact is reflected in the several variants of calculi of explicit substitutions that have been proposed; see among others <ref> [1, 29, 21, 18, 2, 22, 7, 19, 24, 13, 26] </ref>.
Reference: [22] <author> P. Lescanne and J. Rouyer-Degli. </author> <title> Explicit substitutions with de Bruijn's levels. </title> <editor> In J. Hsiang, editor, </editor> <booktitle> Proceedings of the International Conference on Rewriting Techniques and Applications (RTA-95), volume 914 of LNCS, </booktitle> <pages> pages 294-308, </pages> <address> Chapel Hill, North Carolina, 1995. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: This fact is reflected in the several variants of calculi of explicit substitutions that have been proposed; see among others <ref> [1, 29, 21, 18, 2, 22, 7, 19, 24, 13, 26] </ref>.
Reference: [23] <author> L. Magnusson. </author> <title> The Implementation of ALF|A Proof Editor Based on Martin-Lof 's Monomorphic Type Theory with Explicit Substitution. </title> <type> PhD thesis, </type> <institution> Chalmers University of Technology and Goteborg University, </institution> <month> January </month> <year> 1995. </year> <month> 10 </month>
Reference-contexts: 1 Introduction In the proof-as-term paradigm of the constructive logic, -terms with place-holders have been proposed as a convenient framework to represent incomplete proofs <ref> [23, 27] </ref>. Therefore a term like x:A:tu, where tu is a place-holder, could be seen as a proof-term of A!B provided that we can find a term having the type B in the right context to fill the place left by tu. <p> Moreover, if we use the -calculus a la De Bruijn, a meta-variable is simply a variable of the free-algebra of terms. In order to satisfy typing requirements, it is necessary to provide a mechanism to postpone the application of substitutions to place-holders <ref> [23, 10] </ref>. Calculi of explicit substitutions [1] improve the substitution mechanism of the -calculus by allowing substitutions to be part of the formal language by means of special constructors and reduction rules. Thus, in these calculi it is possible to consider terms with partially applied substitutions. <p> On other hand, Briaud [3] shows how HOU can be considered as a typed narrowing in the - calculus of explicit substitutions. Magnusson <ref> [23] </ref> presents a unification algorithm in the Martin-Lof's type theory with explicit substitutions. This algorithm solves first-order unification problems, but leaves unsolved the flexible-flexible constraints. Our main contribution is the presentation of the Dowek's method of proof synthesis in a suitable theory with explicit substitutions and typed meta-variables.
Reference: [24] <author> C. Mu~noz. </author> <title> Confluence and preservation of strong normalisation in an explicit substitutions calculus (extended abstract). </title> <booktitle> In Proceedings of the Eleven Annual IEEE Symposium on Logic in Computer Science, </booktitle> <address> New Brunswick, New Jersey, July 1996. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: This fact is reflected in the several variants of calculi of explicit substitutions that have been proposed; see among others <ref> [1, 29, 21, 18, 2, 22, 7, 19, 24, 13, 26] </ref>.
Reference: [25] <author> C. Mu~noz. </author> <title> Dependent types with explicit substitutions: A meta-theoretical development. In Types for Proofs and Programs, </title> <booktitle> Proceedings of International Workshop TYPES'96, </booktitle> <year> 1997. </year>
Reference-contexts: For the simply-typed -calculus, Dowek, Hardin and Kirchner [10] show how to reduce higher-order unification into a first-order framework via explicit substitutions and typed meta-variables. fl This research was supported by National Science Foundation grant CCR-9712383. 1 In <ref> [25, 27] </ref> we propose an explicit substitution calculus, namely L , for dependent type theories like [14] and the Calculus of Constructions [4, 5]. On well-typed expressions containing meta-variables of terms, the L -calculus is confluent and weakly normalizing. <p> Before presenting our proof synthesis method, we give an overview to the L -calculus. 3 The L -calculus and its Extension with Constraints As we have said, the underlying theory of our proof synthesis method is the L -calculus of explicit substitutions <ref> [25] </ref>. This calculus is a dependent-typed version of a left-linear variant of [1]. In L , variables use the De Bruijn indices notation and meta-variables use names. As usual in typed calculi a la De Bruijn, variables are declared in lists of types called contexts. <p> The full rewrite system and the typing rules of L are shown in Appendix A. We prove in <ref> [25, 27] </ref> that L satisfies, among others, the following properties on well-typed terms: * Church-Rosser (and so confluence) and Weak Normalization. * Type Uniqueness, i.e. types are unique modulo conversions. * Subject Reduction, i.e. types are preserved under reductions. * Instantiation Soundness, i.e. types are preserved under instantiations of meta-variables.
Reference: [26] <author> C. </author> <title> Mu~noz. </title> <booktitle> A left-linear variant of . In Proceedings of the International Conference PLILP/ALP/HOA'97, volume 1298 of LNCS, </booktitle> <address> Southampton (England), September 1997. </address> <publisher> Springer. </publisher>
Reference-contexts: This fact is reflected in the several variants of calculi of explicit substitutions that have been proposed; see among others <ref> [1, 29, 21, 18, 2, 22, 7, 19, 24, 13, 26] </ref>.
Reference: [27] <author> C. Mu~noz. </author> <title> Un calcul de substitutions pour la representation de preuves partielles en theorie de types. </title> <institution> These de doctorat, Universite Paris 7, 1997. Version en anglais disponible comme rapport de recherche INRIA RR-3309. </institution>
Reference-contexts: 1 Introduction In the proof-as-term paradigm of the constructive logic, -terms with place-holders have been proposed as a convenient framework to represent incomplete proofs <ref> [23, 27] </ref>. Therefore a term like x:A:tu, where tu is a place-holder, could be seen as a proof-term of A!B provided that we can find a term having the type B in the right context to fill the place left by tu. <p> For the simply-typed -calculus, Dowek, Hardin and Kirchner [10] show how to reduce higher-order unification into a first-order framework via explicit substitutions and typed meta-variables. fl This research was supported by National Science Foundation grant CCR-9712383. 1 In <ref> [25, 27] </ref> we propose an explicit substitution calculus, namely L , for dependent type theories like [14] and the Calculus of Constructions [4, 5]. On well-typed expressions containing meta-variables of terms, the L -calculus is confluent and weakly normalizing. <p> Although L does not enjoy confluence on the full set of open expressions, i.e. L is no more confluent when meta-variables of substitutions are considered, and it does not preserve strong normalization, i.e. arbitrary reductions on well-typed expressions may not terminate, we argue in <ref> [27] </ref> that the given properties are sufficient to represent incomplete proof-terms in a constructive logic framework. In this paper we describe a proof synthesis method for the calculus of construction that uses the incomplete proof-term paradigm. <p> The full rewrite system and the typing rules of L are shown in Appendix A. We prove in <ref> [25, 27] </ref> that L satisfies, among others, the following properties on well-typed terms: * Church-Rosser (and so confluence) and Weak Normalization. * Type Uniqueness, i.e. types are unique modulo conversions. * Subject Reduction, i.e. types are preserved under reductions. * Instantiation Soundness, i.e. types are preserved under instantiations of meta-variables. <p> 00 c ) c : ` N : A and N is not a L -normal form 0 M : 00 L - 0 c Remark 6 The above definition is sound since the L -normal form of a well-typed expression always exists and it is unique (for details see <ref> [27] </ref>). We recall that an expression x is said to be ground if it has no occurrence of meta-variables. <p> In <ref> [27] </ref> we discuss some efficiency improvements based on these features. * Since substitutions go through abstraction and products, normal forms have a simple characterization. For example, the normal form of a type has the form A 1 : : : : A i :A where A is not a product.
Reference: [28] <author> D. Pym. </author> <title> A unification algorithm for the -calculus. </title> <journal> International Journal of Foundations of Computer Science, </journal> <volume> 3(3) </volume> <pages> 333-378, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: In type systems, higher-order unification (HOU) algorithms are known for the simply-typed -calculus [16] and for the -calculus of dependent types <ref> [12, 28] </ref>. For the cube type systems, Dowek [8, 9] re-formulates the unification procedure and generalizes it as a method of term enumeration.
Reference: [29] <author> A. Ros. </author> <title> Contributions a l'etude de -calculs avec des substitutions explicites. </title> <institution> These de doctorat, U. Paris VII, </institution> <year> 1993. </year>
Reference-contexts: This fact is reflected in the several variants of calculi of explicit substitutions that have been proposed; see among others <ref> [1, 29, 21, 18, 2, 22, 7, 19, 24, 13, 26] </ref>.
Reference: [30] <author> J. A. Robinson. </author> <title> A machine-oriented logic based on the resolution principle. </title> <journal> Journal of the ACM, </journal> <volume> 12(1) </volume> <pages> 23-41, </pages> <month> January </month> <year> 1965. </year>
Reference-contexts: A complete method for search of proof-trees based on resolution and unification was formulated by Robinson <ref> [30] </ref> for the first-order logic, and by Huet [15] for the higher-order logic. In type systems, higher-order unification (HOU) algorithms are known for the simply-typed -calculus [16] and for the -calculus of dependent types [12, 28].
References-found: 30

