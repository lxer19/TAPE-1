URL: http://robotics.stanford.edu/users/as/icra97.ps.gz
Refering-URL: http://robotics.stanford.edu/users/as/bio.html
Root-URL: http://www.cs.stanford.edu
Email: schweika@informatik.tu-muenchen.de  
Title: General Translational Assembly Planning  
Author: Achim Schweikard, Fabian Schwarzer 
Keyword: geometric reasoning, assembly planning, motion planning, complete algorithms, arrangement computation in D dimensions.  
Address: 80290 Munchen  
Affiliation: Informatik Technische Universitat Munchen,  
Abstract: An exact and practical method for translational motion planning with many degrees of freedom is derived. It is shown that certain Ddimensional arrangements of hyperplanes can be searched in the following way: only a single connected component is traversed during the search, and the arrangement is searched as an arrangement of surface patches rather than full hyperplanes. This reduction in search effort allows for polynomial time bounds in appropriate cases. Heuristic and randomized planners cannot return an information about infeasibility of planning problems. The new method is exact and complete. Experiments obtained with an implementation suggest that it is capable of reaching the performance of the most advanced random planning schemes. In addition, in-solvability can be established in practical cases. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. K. Agarwal, M. de Berg, D. Halperin, M. Sharir. </author> <title> Efficient Generation of k-Directional Assembly Sequences. </title> <booktitle> Proc. 7th ACM-SIAM Symp. Discr. Algorithms (SODA), </booktitle> <pages> 122-131, </pages> <year> 1996. </year>
Reference-contexts: Pollack, Sharir and Sifrony [13] describe a near-optimal method for the case of two polygons translating in the plane. The analysis in [13] is based on computing the boundary of a single connected component in a planar arrangement of line segments. Agarwal, de Berg, Halperin and Sharir <ref> [1] </ref> consider sequences of translations for separating polyhedra. In [1] the set of allowed motion directions is assumed to be given in advance. Kavraki [5] shows that the problem of separating sets is NP-complete even for a very restricted class of planar objects. <p> The analysis in [13] is based on computing the boundary of a single connected component in a planar arrangement of line segments. Agarwal, de Berg, Halperin and Sharir <ref> [1] </ref> consider sequences of translations for separating polyhedra. In [1] the set of allowed motion directions is assumed to be given in advance. Kavraki [5] shows that the problem of separating sets is NP-complete even for a very restricted class of planar objects.
Reference: [2] <author> H. Edelsbrunner. </author> <title> Algorithms in Combinatorial Geometry. </title> <publisher> Springer, </publisher> <address> Heidelberg, </address> <year> 1987. </year>
Reference-contexts: We obtain a total of O (k 2 n 2 ) halfspaces in A D . Each step will reach a new cell in A D , and cells will not be visited again. A D has at most O ((k 2 n 2 ) D ) cells <ref> [2] </ref>. Here D = 3k 3 for polyhedral assemblies and D = 2k 2 in the planar case.
Reference: [3] <author> L. Guibas, D. Halperin, H. Hirukawa et al. </author> <title> Polyhedral assembly partitioning using maximally covered cells in arrangements of convex polytopes. </title> <note> To appear: Intl. J. Comp. Geometry and Applications. </note>
Reference-contexts: The minimal and maximal cells do not form a connected component, and for the application in [15] it is sufficient to search the minimal and maximal cells after computing the entire arrangement. Guibas and Halperin et al. <ref> [3] </ref> describe methods for partitioning three-dimensional assemblies under infinitesimal motions. The algorithm in [3] allows for computing one allowed infinitesimal motion in polynomial time, and uses methods in [14]. <p> Guibas and Halperin et al. <ref> [3] </ref> describe methods for partitioning three-dimensional assemblies under infinitesimal motions. The algorithm in [3] allows for computing one allowed infinitesimal motion in polynomial time, and uses methods in [14]. An infinitesimal motion may not give a valid motion for removing parts, since parts may still collide during the motions extending the computed infinitesimal motion. However, the techniques in [3] include rotations. <p> The algorithm in <ref> [3] </ref> allows for computing one allowed infinitesimal motion in polynomial time, and uses methods in [14]. An infinitesimal motion may not give a valid motion for removing parts, since parts may still collide during the motions extending the computed infinitesimal motion. However, the techniques in [3] include rotations. The techniques in [14] are not used here, since they inherently require that all moving parts follow the same motion path. Instead, the analysis of 3-dimensional arrangements given by pairwise Minkowski-differences of parts is used to guide the search of a Ddimensional arrangement.
Reference: [4] <author> L. Kavraki. </author> <title> Randomized preprocessing of configuration space for fast path planning. </title> <booktitle> IEEE Intl. Conf. Rob. Automation, </booktitle> <pages> 2138-2145, </pages> <year> 1994. </year>
Reference-contexts: For comparison, a random planner based on the principles in <ref> [4, 6] </ref> was implemented for the mentioned hardware environment. Both methods were then applied to the example in figure 9. The running time of approximate planners depends upon the width of the smallest passage the planner must find.
Reference: [5] <author> L. Kavraki, M. Kolountzakis. </author> <title> Partitioning a planar assembly into two connected parts is NP-Complete. </title> <journal> Information Processing Letters, </journal> <volume> 55(3), </volume> <pages> 159-165, </pages> <year> 1995. </year>
Reference-contexts: Agarwal, de Berg, Halperin and Sharir [1] consider sequences of translations for separating polyhedra. In [1] the set of allowed motion directions is assumed to be given in advance. Kavraki <ref> [5] </ref> shows that the problem of separating sets is NP-complete even for a very restricted class of planar objects. Schweikard and Wilson [14] describe an algorithm for computing a subassembly S of a given assembly, such that S is removable by a single translation, if such a subassembly exists.
Reference: [6] <author> J.-C. Latombe. </author> <title> Robot Motion Planning. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1991. </year>
Reference-contexts: For comparison, a random planner based on the principles in <ref> [4, 6] </ref> was implemented for the mentioned hardware environment. Both methods were then applied to the example in figure 9. The running time of approximate planners depends upon the width of the smallest passage the planner must find.
Reference: [7] <author> T. Lozano-Perez. </author> <title> Spatial planning: A configuration space approach. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-32(2):108-120, </volume> <year> 1983. </year>
Reference-contexts: Here D = 3k. A point in this space is called forbidden, if two or more parts intersect in the corresponding placement. The origin in E D represents the initial placement of all parts, and is not forbidden. We consider pairwise Minkowski-differences (Cobstacles, <ref> [7] </ref>) for each pair of parts P i ; P j .
Reference: [8] <author> K. Mehlhorn, S. Naeher. LEDA: </author> <title> A Platform for Combinatorial and Geometric Computing. </title> <institution> Max-Planck-Institut fuer Informatik, Saarbruecken, </institution> <year> 1995. </year>
Reference-contexts: Clearance be tween parts in the actual experiment was set to zero. which the number of examined Dnodes remains constant. 7 Experiments To find practical limitations, the above algorithm was imple mented on a Unix-workstation HP 700 in C++ based on the LEDA-library <ref> [8] </ref>. For comparison, a random planner based on the principles in [4, 6] was implemented for the mentioned hardware environment. Both methods were then applied to the example in figure 9. The running time of approximate planners depends upon the width of the smallest passage the planner must find.
Reference: [9] <author> J. J. More', S. J. Wright. </author> <note> Optimization Software Guide. Frontiers in Applied Mathematics, 14, SIAM, 1993. See also: "http://www.mcs.anl.gov/home/ otc/Guide/SoftwareGuide/". </note>
Reference: [10] <author> B. K. Natarajan. </author> <title> On planning assemblies. </title> <booktitle> In Proc. of the ACM Symp. on Computational Geometry, </booktitle> <pages> pages 299-308, </pages> <year> 1988. </year>
Reference-contexts: In this context, Toussaint [12] surveys earlier methods for separating sets in two and three dimensions. Natarajan <ref> [10] </ref> derives lower bounds on the number of simultaneous translations necessary for separating objects. Pollack, Sharir and Sifrony [13] describe a near-optimal method for the case of two polygons translating in the plane.
Reference: [11] <author> J. O'Rourke. </author> <title> Computational Geometry in C. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1994. </year>
Reference-contexts: The total running time is thus bounded by O ((k 2 m) D )k 2 rLP (k 2 r; D)). In this bound we have not accounted for the precomputation of pairwise floorgraphs. The analysis of this preprocessing step is straightforward and follows methods in <ref> [11] </ref> and [14]. Remark: The above lemma expresses the number of examined Dnodes in terms of the maximum number m of nodes in the current connected component of floorgraphs, rather than in the number n of triangles in faces of parts. <p> In this case the running times were 6.40 seconds for preprocessing (computing all floorgraphs) and 11.1 seconds for finding a removal motion. This example was not solvable with any of the random planners, even when the goal position was given in advance. An example in <ref> [11] </ref> provides a simple proof for the NP-hardness of the problem considered here. Specifically, the 'PARTITION'-problem for integers must be solved to find a removal motion in fig. 11.
Reference: [12] <author> G. T. Toussaint. </author> <title> Movable separability of sets. </title> <editor> In G. T. Toussaint, editor, </editor> <booktitle> Computational Geometry. </booktitle> <publisher> Elsevier, North Holland, </publisher> <year> 1985. </year>
Reference-contexts: But notice that we would detect infeasibility in error, if the set of essential contacts thus chosen was too small. 1 Related Work The problem of finding a motion for removing an object from a set of other objects arises in assembly planning. In this context, Toussaint <ref> [12] </ref> surveys earlier methods for separating sets in two and three dimensions. Natarajan [10] derives lower bounds on the number of simultaneous translations necessary for separating objects. Pollack, Sharir and Sifrony [13] describe a near-optimal method for the case of two polygons translating in the plane.
Reference: [13] <author> R. Pollack, M. Sharir, and S. Sifrony. </author> <title> Separating two simple polygons by a sequence of translations. </title> <journal> Discrete and Computational Geometry, </journal> <volume> 3 </volume> <pages> 123-136, </pages> <year> 1988. </year>
Reference-contexts: In this context, Toussaint [12] surveys earlier methods for separating sets in two and three dimensions. Natarajan [10] derives lower bounds on the number of simultaneous translations necessary for separating objects. Pollack, Sharir and Sifrony <ref> [13] </ref> describe a near-optimal method for the case of two polygons translating in the plane. The analysis in [13] is based on computing the boundary of a single connected component in a planar arrangement of line segments. <p> Natarajan [10] derives lower bounds on the number of simultaneous translations necessary for separating objects. Pollack, Sharir and Sifrony <ref> [13] </ref> describe a near-optimal method for the case of two polygons translating in the plane. The analysis in [13] is based on computing the boundary of a single connected component in a planar arrangement of line segments. Agarwal, de Berg, Halperin and Sharir [1] consider sequences of translations for separating polyhedra. In [1] the set of allowed motion directions is assumed to be given in advance.
Reference: [14] <author> A. Schweikard and R. H. Wilson. </author> <title> Assembly Sequences for Polyhedra. </title> <journal> Algorithmica, </journal> <volume> 13(6): </volume> <pages> 539-552, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: In [1] the set of allowed motion directions is assumed to be given in advance. Kavraki [5] shows that the problem of separating sets is NP-complete even for a very restricted class of planar objects. Schweikard and Wilson <ref> [14] </ref> describe an algorithm for computing a subassembly S of a given assembly, such that S is removable by a single translation, if such a subassembly exists. The output consists of S and an appropriate removal direction d. <p> The output consists of S and an appropriate removal direction d. Interestingly this computation is possible in polynomial time, even though the number of removable subassemblies is exponential in general. The algorithm in <ref> [14] </ref> will thus compute a valid subassembly and a removal direction if there is such a subassembly, but does not enumerate all possible subassemblies. In [15] techniques for analyzing arrangements defined by radiation beams in radiosurgery are described. <p> Guibas and Halperin et al. [3] describe methods for partitioning three-dimensional assemblies under infinitesimal motions. The algorithm in [3] allows for computing one allowed infinitesimal motion in polynomial time, and uses methods in <ref> [14] </ref>. An infinitesimal motion may not give a valid motion for removing parts, since parts may still collide during the motions extending the computed infinitesimal motion. However, the techniques in [3] include rotations. The techniques in [14] are not used here, since they inherently require that all moving parts follow the <p> allows for computing one allowed infinitesimal motion in polynomial time, and uses methods in <ref> [14] </ref>. An infinitesimal motion may not give a valid motion for removing parts, since parts may still collide during the motions extending the computed infinitesimal motion. However, the techniques in [3] include rotations. The techniques in [14] are not used here, since they inherently require that all moving parts follow the same motion path. Instead, the analysis of 3-dimensional arrangements given by pairwise Minkowski-differences of parts is used to guide the search of a Ddimensional arrangement. <p> The total running time is thus bounded by O ((k 2 m) D )k 2 rLP (k 2 r; D)). In this bound we have not accounted for the precomputation of pairwise floorgraphs. The analysis of this preprocessing step is straightforward and follows methods in [11] and <ref> [14] </ref>. Remark: The above lemma expresses the number of examined Dnodes in terms of the maximum number m of nodes in the current connected component of floorgraphs, rather than in the number n of triangles in faces of parts.
Reference: [15] <author> A. Schweikard, R. Tombropoulos, L. Kavraki, J. R. Adler, J.-C. Latombe. </author> <title> Treatment Planning for a Radiosurgical System with General Kinematics. </title> <booktitle> IEEE Conference Robotics and Automation, </booktitle> <pages> 1720-1727, </pages> <month> May </month> <year> 1994. </year> <month> 8 </month>
Reference-contexts: Interestingly this computation is possible in polynomial time, even though the number of removable subassemblies is exponential in general. The algorithm in [14] will thus compute a valid subassembly and a removal direction if there is such a subassembly, but does not enumerate all possible subassemblies. In <ref> [15] </ref> techniques for analyzing arrangements defined by radiation beams in radiosurgery are described. These techniques are based on searching so-called minimal and maximal cells in three dimensions and are related to the methods developed here. <p> These techniques are based on searching so-called minimal and maximal cells in three dimensions and are related to the methods developed here. The minimal and maximal cells do not form a connected component, and for the application in <ref> [15] </ref> it is sufficient to search the minimal and maximal cells after computing the entire arrangement. Guibas and Halperin et al. [3] describe methods for partitioning three-dimensional assemblies under infinitesimal motions. The algorithm in [3] allows for computing one allowed infinitesimal motion in polynomial time, and uses methods in [14].
References-found: 15

