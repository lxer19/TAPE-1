URL: ftp://ftp.cse.unsw.edu.au/pub/doc/papers/UNSW/9701.ps.Z
Refering-URL: http://www.cse.unsw.edu.au/school/research/tr.html
Root-URL: http://www.cse.unsw.edu.au
Email: E-mail: fgernot,jerry,kevine,smrg@cse.unsw.edu.au  
Title: The Mungi Kernel API, Release 1.0  
Author: Gernot Heiser Jerry Vochteloo Kevin Elphinstone Stephen Russell 
Address: Sydney 2052, Australia  
Affiliation: Department of Computer Systems School of Computer Science and Engineering The University of New South Wales  
Date: April 1997  
Note: UNSW-CSE-TR-9701  
Web: WWW: http://www.cse.unsw.edu.au/ ~disy  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [APW86] <author> M. Anderson, Ronald Pose, and Chris S. Wallace. </author> <title> A password-capability system. </title> <journal> The Computer Journal, </journal> <volume> 29:18, </volume> <year> 1986. </year>
Reference-contexts: Newly allocated objects are zero filled. From the system's point of view, an object is simply a contiguous, aligned region of virtual address space; the system imposes no structure on objects (but higher software levels are free to do so). Access to objects is controlled by password capabilities <ref> [APW86] </ref>. 2.1 Password capabilities passwordmodeVirtual page number object. The mode indicates the rights conferred by the capability. This field is only a hint for the user, it is ignored by the system when a capability is presented.
Reference: [Ber80] <author> Viktors Berstis. </author> <title> Security and protection in the IBM System/38. </title> <booktitle> In Proceedings of the 7th Symposium on Computer Architecture, </booktitle> <pages> pages 245250. </pages> <address> ACM/IEEE, </address> <month> May </month> <year> 1980. </year>
Reference-contexts: Most notably, Mungi presents the single-address-space model in a very pure form, as it provides no inter-process-communication mechanisms other than shared memory. Many of the basic ideas in Mungi go back to the IBM System/38 <ref> [Ber80, HSH81] </ref> and its successor, the AS/400 [Sol96]. This document presents the application programming interface (API) of the Mungi kernel. <p> Clist capabilities in the APD are also periodically revalidated, if such a capability is found to have become invalid it is silently removed from the APD. 3.2 Protected procedure calls Mungi provides a protected procedure call mechanism similar to the profile adoption mechanism of the IBM System/38 <ref> [Ber80] </ref>. Mungi's mechanism, called protection domain extension (PDX) allows the caller of a PDX procedure to extend its protection domain, for the duration of the call, by the protection domain of the callee.
Reference: [CLBHL92] <author> Jeff S. Chase, Hank M. Levy, Miche Baker-Harvey, and Edward D. Lazowska. Opal: </author> <title> A single address space system for 64-bit architectures. </title> <booktitle> In Proceedings of the 3rd Workshop on Workstation Operating Systems, </booktitle> <pages> pages 8085, </pages> <address> Key Biscayne, FL, USA, 1992. </address> <publisher> IEEE. </publisher>
Reference-contexts: 1 Introduction Mungi [RSE + 92, HERH93, VRH93, HERV94, ERHL96, VERH96] is a single-address-space operating system (SASOS) [CLFL94, WMR + 97] developed by the Distributed Operating Systems Group at the University of New South Wales. It is conceptually similar to Angel [WSO + 92, WM96] and Opal <ref> [CLBHL92, CLFL94] </ref>, although quite different in many important aspects. Most notably, Mungi presents the single-address-space model in a very pure form, as it provides no inter-process-communication mechanisms other than shared memory.
Reference: [CLFL94] <author> Jeffrey S. Chase, Henry M. Levy, Michael J. Feeley, and Edward D. Lazowska. </author> <title> Sharing and protection in a single address space operating system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 12:271307, </volume> <month> November </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Mungi [RSE + 92, HERH93, VRH93, HERV94, ERHL96, VERH96] is a single-address-space operating system (SASOS) <ref> [CLFL94, WMR + 97] </ref> developed by the Distributed Operating Systems Group at the University of New South Wales. It is conceptually similar to Angel [WSO + 92, WM96] and Opal [CLBHL92, CLFL94], although quite different in many important aspects. <p> 1 Introduction Mungi [RSE + 92, HERH93, VRH93, HERV94, ERHL96, VERH96] is a single-address-space operating system (SASOS) [CLFL94, WMR + 97] developed by the Distributed Operating Systems Group at the University of New South Wales. It is conceptually similar to Angel [WSO + 92, WM96] and Opal <ref> [CLBHL92, CLFL94] </ref>, although quite different in many important aspects. Most notably, Mungi presents the single-address-space model in a very pure form, as it provides no inter-process-communication mechanisms other than shared memory.
Reference: [ERHL96] <author> Kevin Elphinstone, Stephen Russell, Gernot Heiser, and Jochen Liedtke. </author> <title> Supporting persistent object systems in a single address space. </title> <booktitle> In Proceedings of the 7th International Workshop on Persistent Object Systems, </booktitle> <address> Cape May, NJ, USA, </address> <month> May </month> <year> 1996. </year> <note> Morgan Kauf-mann. </note>
Reference-contexts: 1 Introduction Mungi <ref> [RSE + 92, HERH93, VRH93, HERV94, ERHL96, VERH96] </ref> is a single-address-space operating system (SASOS) [CLFL94, WMR + 97] developed by the Distributed Operating Systems Group at the University of New South Wales.
Reference: [HERH93] <author> Gernot Heiser, Kevin Elphinstone, Stephen Russell, and Graham R. Hellestrand. </author> <title> A distributed single address space system supporting persistence. </title> <institution> School of Computer Science and Engineering Report 9302, University of NSW, University of NSW, </institution> <address> Sydney 2052, Aus-tralia, </address> <month> March </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Mungi <ref> [RSE + 92, HERH93, VRH93, HERV94, ERHL96, VERH96] </ref> is a single-address-space operating system (SASOS) [CLFL94, WMR + 97] developed by the Distributed Operating Systems Group at the University of New South Wales.
Reference: [HERV94] <author> Gernot Heiser, Kevin Elphinstone, Stephen Russell, and Jerry Vochteloo. Mungi: </author> <title> A distributed single address-space operating system. </title> <booktitle> In Proceedings of the 17th Australasian Computer Science Conference, </booktitle> <pages> pages 27180, </pages> <address> Christchurch, New Zealand, </address> <month> January </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Mungi <ref> [RSE + 92, HERH93, VRH93, HERV94, ERHL96, VERH96] </ref> is a single-address-space operating system (SASOS) [CLFL94, WMR + 97] developed by the Distributed Operating Systems Group at the University of New South Wales.
Reference: [HSH81] <author> Merle E. Houdek, Frank G. Soltis, and Roy L. Hoffman. </author> <title> IBM System/38 support for capability-based addressing. </title> <booktitle> In Proceedings of the 8th Symposium on Computer Architecture, </booktitle> <pages> pages 341348. </pages> <address> ACM/IEEE, </address> <month> May </month> <year> 1981. </year>
Reference-contexts: Most notably, Mungi presents the single-address-space model in a very pure form, as it provides no inter-process-communication mechanisms other than shared memory. Many of the basic ideas in Mungi go back to the IBM System/38 <ref> [Ber80, HSH81] </ref> and its successor, the AS/400 [Sol96]. This document presents the application programming interface (API) of the Mungi kernel.
Reference: [Lie95] <author> Jochen Liedtke. </author> <booktitle> On -kernel construction. In Proceedings of the 15th ACM Symposium on OS Principles, </booktitle> <pages> pages 237250, </pages> <address> Copper Mountain, CO, USA, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: This document presents the application programming interface (API) of the Mungi kernel. While Mungi does not pretend to be a microkernel (in fact, the prototype is implemented on top of the L4 microkernel <ref> [Lie95] </ref>), it nevertheless presents a minimal and low-level interface to the programmer. Policies are, as far as possible, left to be implemented by higher software layers. Similar to microkernels, Mungi allows the implementation of device drivers and page fault handlers at user level.
Reference: [RSE + 92] <author> Stephen Russell, Alan Skea, Kevin Elphinstone, Gernot Heiser, Keith Burston, Ian Gorton, and Graham Hellestrand. </author> <title> Distribution + persistence = global virtual memory. </title> <booktitle> In Proceedings of the 2nd International Workshop on Object Orientation in Operating Systems, </booktitle> <pages> pages 9699, </pages> <address> Dourdan, France, </address> <month> September </month> <year> 1992. </year> <note> IEEE. </note>
Reference-contexts: 1 Introduction Mungi <ref> [RSE + 92, HERH93, VRH93, HERV94, ERHL96, VERH96] </ref> is a single-address-space operating system (SASOS) [CLFL94, WMR + 97] developed by the Distributed Operating Systems Group at the University of New South Wales.
Reference: [Sol96] <author> Frank G. Soltis. </author> <title> Inside the AS/400. </title> <publisher> Duke Press, Loveland, CO, </publisher> <address> USA, </address> <year> 1996. </year>
Reference-contexts: Most notably, Mungi presents the single-address-space model in a very pure form, as it provides no inter-process-communication mechanisms other than shared memory. Many of the basic ideas in Mungi go back to the IBM System/38 [Ber80, HSH81] and its successor, the AS/400 <ref> [Sol96] </ref>. This document presents the application programming interface (API) of the Mungi kernel. While Mungi does not pretend to be a microkernel (in fact, the prototype is implemented on top of the L4 microkernel [Lie95]), it nevertheless presents a minimal and low-level interface to the programmer.
Reference: [VERH96] <author> Jerry Vochteloo, Kevin Elphinstone, Stephen Russell, and Gernot Heiser. </author> <title> Protection domain extensions in Mungi. </title> <booktitle> In Proceedings of the 5th International Workshop on Object Orientation in Operating Systems, </booktitle> <pages> pages 161165, </pages> <address> Seattle, WA, USA, </address> <month> October </month> <year> 1996. </year> <note> IEEE. 18 REFERENCES </note>
Reference-contexts: 1 Introduction Mungi <ref> [RSE + 92, HERH93, VRH93, HERV94, ERHL96, VERH96] </ref> is a single-address-space operating system (SASOS) [CLFL94, WMR + 97] developed by the Distributed Operating Systems Group at the University of New South Wales.
Reference: [VRH93] <author> Jerry Vochteloo, Stephen Russell, and Gernot Heiser. </author> <title> Capability-based protection in the Mungi operating system. </title> <booktitle> In Proceedings of the 3rd International Workshop on Object Orientation in Operating Systems, </booktitle> <pages> pages 10815, </pages> <address> Asheville, NC, USA, </address> <month> December </month> <year> 1993. </year> <note> IEEE. </note>
Reference-contexts: 1 Introduction Mungi <ref> [RSE + 92, HERH93, VRH93, HERV94, ERHL96, VERH96] </ref> is a single-address-space operating system (SASOS) [CLFL94, WMR + 97] developed by the Distributed Operating Systems Group at the University of New South Wales.
Reference: [WM96] <author> Tim Wilkinson and Kevin Murray. </author> <title> Evaluation of a distributed single address space operating system. </title> <booktitle> In Proceedings of the 16th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 494501, </pages> <address> Hong Kong, </address> <month> May </month> <year> 1996. </year> <note> IEEE. </note>
Reference-contexts: 1 Introduction Mungi [RSE + 92, HERH93, VRH93, HERV94, ERHL96, VERH96] is a single-address-space operating system (SASOS) [CLFL94, WMR + 97] developed by the Distributed Operating Systems Group at the University of New South Wales. It is conceptually similar to Angel <ref> [WSO + 92, WM96] </ref> and Opal [CLBHL92, CLFL94], although quite different in many important aspects. Most notably, Mungi presents the single-address-space model in a very pure form, as it provides no inter-process-communication mechanisms other than shared memory.
Reference: [WMR + 97] <author> Tim Wilkinson, Kevin Murray, Stephen Russell, Gernot Heiser, and Jochen Liedtke. </author> <title> Single address space operating systems. </title> <editor> In Nayeem Islam and Roy Campbell, editors, </editor> <booktitle> Modern Operating System Research. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1997. </year>
Reference-contexts: 1 Introduction Mungi [RSE + 92, HERH93, VRH93, HERV94, ERHL96, VERH96] is a single-address-space operating system (SASOS) <ref> [CLFL94, WMR + 97] </ref> developed by the Distributed Operating Systems Group at the University of New South Wales. It is conceptually similar to Angel [WSO + 92, WM96] and Opal [CLBHL92, CLFL94], although quite different in many important aspects.
Reference: [WSO + 92] <author> Tim Wilkinson, Tom Stiemerling, Peter E. Osmon, Ashley Saulsbury, and Paul Kelly. Angel: </author> <title> A proposed multiprocessor operating system kernel. </title> <booktitle> In European Workshop on Parallel Computing, </booktitle> <pages> pages 316319, </pages> <address> Barcelona, Spain, </address> <year> 1992. </year> <month> 19 </month>
Reference-contexts: 1 Introduction Mungi [RSE + 92, HERH93, VRH93, HERV94, ERHL96, VERH96] is a single-address-space operating system (SASOS) [CLFL94, WMR + 97] developed by the Distributed Operating Systems Group at the University of New South Wales. It is conceptually similar to Angel <ref> [WSO + 92, WM96] </ref> and Opal [CLBHL92, CLFL94], although quite different in many important aspects. Most notably, Mungi presents the single-address-space model in a very pure form, as it provides no inter-process-communication mechanisms other than shared memory.
References-found: 16

