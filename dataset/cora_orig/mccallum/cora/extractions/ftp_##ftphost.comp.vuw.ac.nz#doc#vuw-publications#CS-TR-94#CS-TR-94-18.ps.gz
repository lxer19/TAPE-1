URL: ftp://ftphost.comp.vuw.ac.nz/doc/vuw-publications/CS-TR-94/CS-TR-94-18.ps.gz
Refering-URL: http://www.progsoc.uts.edu.au/~geldridg/cpp/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Author: Robert Biddle and Ewan Tempero 
Keyword: Teaching C++  
Address: Wellington  
Note: Experience  Publishing Information  
Affiliation: VICTORIA UNIVERSITY OF WELLINGTON VUW Department of Computer Science  at Victoria University of  
Abstract: PO Box 600 Wellington New Zealand Tel: +64 4 471 5328 Fax: +64 4 495 5232 Internet: Tech.Reports@comp.vuw.ac.nz Technical Report CS-TR-94/18 November 1994 Abstract In 1992 we introduced C++ as one of the major programming languages used in our teaching at the Computer Science Department at Victoria University of Wellington. We now have three years worth of experience of teaching C++ in both university and professional courses, and this paper is a review of the decisions we have made and the experience we have gained. This paper has three goals. The first is to examine our curriculum design, specifically the choice of programming languages used in our computer science degree programme. We discuss the factors that influenced our choice. The second goal is to present our approach to teaching object-oriented programming in general and C++ in particular. Finally, we discuss our experience associated with teaching C++, in particular focusing on the advantages and disadvantages of the language. This paper appeared at the Software Education Conference (SEC'94), November 22-25, 1994. University of Otago, New Zealand 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Peter Andreae, Robert Biddle, and Ewan Tempero. </author> <title> How to reuse code, really. </title> <booktitle> In Proceedings of the 1993 New Zealand Computer Society Conference, </booktitle> <address> Auckland, New Zealand, </address> <month> August </month> <year> 1993. </year> <institution> New Zealand Computer Society. </institution>
Reference-contexts: In fact, organising these courses has drawn us to examine closely the nature of reusable code, and we have found the subject rewarding and well worth further investigation <ref> [1, 2] </ref>. Throughout this teaching program, we pause after every main topic for work with lab exercises. The exercises involve using classes created beforehand, creating new classes, and adapting and developing programs involving all the main features of the C++ language.
Reference: [2] <author> Peter Andreae, Robert Biddle, and Ewan Tempero. </author> <title> Understanding code reusability: Experience with C and C++. </title> <type> Technical Report CS-TR-93/12, </type> <institution> Victoria University of Wellington, Wellington, </institution> <address> New Zealand, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: In fact, organising these courses has drawn us to examine closely the nature of reusable code, and we have found the subject rewarding and well worth further investigation <ref> [1, 2] </ref>. Throughout this teaching program, we pause after every main topic for work with lab exercises. The exercises involve using classes created beforehand, creating new classes, and adapting and developing programs involving all the main features of the C++ language.
Reference: [3] <author> Tom A. Cargill. </author> <title> Controversy: The case against multiple inheritance in C++. </title> <booktitle> USENIX Computer Systems, </booktitle> <volume> 4(1) </volume> <pages> 69-82, </pages> <month> winter </month> <year> 1991. </year>
Reference-contexts: With this understood, we then introduce abstract base classes, showing how functions may be written in terms of completely abstract containers, and then used for different concrete implementations in the same program. Finally, we introduce multiple inheritance, still a controversial addition to C++ <ref> [3, 9] </ref>. To explain the details, we distinguish three cases of multiple inheritance.
Reference: [4] <author> Marshall P. Cline and Greg A. Lomow. C++ FAQs: </author> <title> Frequently Asked Questions. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: also recommend a more advanced book by Meyers [6] that addresses a number of key issues, and suggest students study Cline's FAQ (Frequently Asked Questions) for the Usenet newsgroup comp.lang.c++ as a very good, compact, and free guide to C++. (The FAQ has recently also been published in book form <ref> [4] </ref>). 4.2 Advantages A number of the advantages of C++ concern practical considerations, but the language itself is also attractive in its own right. Fundamentally, C++ does offer all the key components necessary to support programming in the object-oriented paradigm.
Reference: [5] <author> Margaret A. Ellis and Bjarne Stroustrup. </author> <title> The Annotated C++ Reference Manual. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction In 1992 we introduced C++ <ref> [8, 5] </ref> as one of the major programming languages used in our teaching at the Computer Science Department at Victoria University of Wellington.
Reference: [6] <author> Scott Meyers. </author> <title> Effective C++: 50 Specific Ways to Improve Your Programs and Designs. Addison-Wesley, </title> <booktitle> Professional Computing Series, </booktitle> <year> 1992. </year>
Reference-contexts: The book we currently recommend is in fact Stroustrup's own book [8], mostly because it is perhaps the most comprehensive book available. We also recommend a more advanced book by Meyers <ref> [6] </ref> that addresses a number of key issues, and suggest students study Cline's FAQ (Frequently Asked Questions) for the Usenet newsgroup comp.lang.c++ as a very good, compact, and free guide to C++. (The FAQ has recently also been published in book form [4]). 4.2 Advantages A number of the advantages of
Reference: [7] <author> Bjarne Stroustrup. </author> <title> What is object-oriented programming? IEEE Software, </title> <type> 5(3), </type> <month> May </month> <year> 1988. </year> <note> Also appeared in ECOOP'87, pp51-70. </note>
Reference-contexts: C++ also has other features expected of modern programming languages, such as support for generic types and overloading of functions and operators. Of particular pedagogical interest is the fact that its design was specifically intended to support user-defined types as first-class constructs <ref> [7] </ref>. Even if we had moved to Modula at first year, or another language at second year, it still would have left open the question of supporting use of C later on. Of course, we could change that too.
Reference: [8] <author> Bjarne Stroustrup. </author> <title> The C++ Programming Language. </title> <publisher> Addison-Wesley, </publisher> <address> 2nd edition, </address> <year> 1991. </year>
Reference-contexts: 1 Introduction In 1992 we introduced C++ <ref> [8, 5] </ref> as one of the major programming languages used in our teaching at the Computer Science Department at Victoria University of Wellington. <p> Where examples are given showing how the C++ features are used, contrived and meaningless examples are unfortunately the norm. The book we currently recommend is in fact Stroustrup's own book <ref> [8] </ref>, mostly because it is perhaps the most comprehensive book available.
Reference: [9] <author> Jim Waldo. </author> <title> Controversy: The case for multiple inheritance in C++. </title> <booktitle> USENIX Computer Systems, </booktitle> <volume> 4(2) </volume> <pages> 157-171, </pages> <month> spring </month> <year> 1991. </year> <month> 10 </month>
Reference-contexts: With this understood, we then introduce abstract base classes, showing how functions may be written in terms of completely abstract containers, and then used for different concrete implementations in the same program. Finally, we introduce multiple inheritance, still a controversial addition to C++ <ref> [3, 9] </ref>. To explain the details, we distinguish three cases of multiple inheritance.
References-found: 9

