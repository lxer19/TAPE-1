URL: http://www.cs.cornell.edu/home/sharma/papers/nf.ps
Refering-URL: 
Root-URL: 
Title: Abstract Active networks have the potential to solve three fundamental problems in traditional (and current)
Abstract: In this paper, we describe some preliminary ideas in exploiting an active network framework for next-generation networks. We fix ideas by describing our experience in using an active network framework for network management. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. E. Anderson, D. E. Culler and D. A. Patterson, </author> <title> A Case for NOW (Network of Workstations). </title>
Reference-contexts: We believe that these advances adequately answer the inherent security concerns in an active network architecture. 8 Related Work Our vision of active networks is inspired by the seminal work by Tennenhouse et al described in References <ref> [26, 27, 1] </ref>. In their framework, applications inject capsules rather than packets into the network. A capsule is a packet where the header identifies what piece of code should be run for the packet. <p> Reference [5] classifies frameworks based on their capability to support applet migration. This is similar to the JavaBeans [14] effort for Java. References [16, 15, 17, 19] describe various aspects of Java and the Java virtual machine, which is the language in which applets are written. NOW <ref> [1] </ref> and SPIN [4] describe operating systems that allow user code to be executed in a safe manner in the kernel.
Reference: [2] <author> F. Baker, </author> <title> IP Forwarding Table MIB, </title> <institution> RFC1354, SRI Network Information Center, </institution> <month> January </month> <year> 1997. </year>
Reference-contexts: This unification of snmplet state and the MIB leads to a uniform and simple access of persistent state information. We developed an active proxy for an IP router and exposed MIB-II [22] and the IP forwarding MIB <ref> [2] </ref> to applets running on the router. This allows snmplets to access the routing and forwarding tables on the router.
Reference: [3] <author> Fred Baker and J. Krawczyk, </author> <title> RSVP Management Information Base, </title> <type> Internet Draft, </type> <month> November </month> <year> 1996 </year>
Reference: [4] <author> B.N. Bershad et al, </author> <title> Extensibility, Safety and Performance in the SPIN Operating System. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating Systems Principles (SOSP), </booktitle> <address> Copper Mountain Colorado. </address>
Reference-contexts: Programming languages like Java provide security at the level of individual applets, but do not allow multiple protection domains (many applets) to exist within a single address space. For example web browsers do not provide secure communications between two applets on the same page. Work in operating systems <ref> [4, 9, 23] </ref> has explored the use of safe languages to allow untrusted code (thus many protection domains) to run inside the kernel (a single address space). <p> This is similar to the JavaBeans [14] effort for Java. References [16, 15, 17, 19] describe various aspects of Java and the Java virtual machine, which is the language in which applets are written. NOW [1] and SPIN <ref> [4] </ref> describe operating systems that allow user code to be executed in a safe manner in the kernel.
Reference: [5] <author> K. A. Bharat and L. Cardelli, </author> <note> Migratory Applications, http://gatekeeper.dec.com/pub/ DEC/SRC/research-reports/abstracts/src-rr-138.html </note>
Reference-contexts: Section 7 discusses our solution to the problem of defining object models. Section 8 presents some problems we encountered in using this framework. 2 Key Advantages of an Active Network Framework The many advantages of an applet-based framework have been thoroughly discussed in the literature <ref> [7, 5] </ref>. Here, we enumerate only those advantages that we have identified to be useful in building next-generation networks. 2.1 Extensibility Traditional networks expose a fixed set of network services, which are hard to modify and to customize. <p> ACL is a declarative language (similar to SQL), that represents knowledge as tupules and first order logic. Reference <ref> [5] </ref> classifies frameworks based on their capability to support applet migration. This is similar to the JavaBeans [14] effort for Java. References [16, 15, 17, 19] describe various aspects of Java and the Java virtual machine, which is the language in which applets are written.
Reference: [6] <author> L. Breslau, </author> <title> Adaptive Source Routing of Real-Time Traffic in Integrated Service Networks, </title> <type> PhD Dissertation, </type> <institution> University of Southern California. </institution>
Reference-contexts: This introduces an inherent tension in the routing protocol. Widespread dissemination of routing state incurs high overhead, introduces instability, and questions the timeliness of the information available to a source. Breslau <ref> [6] </ref> has evaluated schemes like Hop Count Limited Flooding, Random flooding and Reverse Path Update to trade off performance of routing with the amount of overhead propagated in the network. For example, Hop Count Limited Flooding (HCLF) restricts the propagation of information to the desired number of hops.
Reference: [7] <author> D. M. Chess, C. Harrison and A. Kershenbaum, </author> <title> Mobile Agents: Are they a good idea ?, IBM Research Divsion, </title> <institution> T. J. Watson Research Center, Yorktown Heights, NY10598,http://www.research.ibm.com/ massive/ mobag.ps </institution>
Reference-contexts: Section 7 discusses our solution to the problem of defining object models. Section 8 presents some problems we encountered in using this framework. 2 Key Advantages of an Active Network Framework The many advantages of an applet-based framework have been thoroughly discussed in the literature <ref> [7, 5] </ref>. Here, we enumerate only those advantages that we have identified to be useful in building next-generation networks. 2.1 Extensibility Traditional networks expose a fixed set of network services, which are hard to modify and to customize. <p> A capsule is a packet where the header identifies what piece of code should be run for the packet. Our work proposes to use applets only in the control path, thus avoiding the performance penalty incurred by using applets in the data path. References <ref> [7, 12, 11, 28] </ref> provide a high-level survey of the advantages and disadvantages of using applets. They conclude that applets offer significant advantages in cases of disconnected operation, individualized service, server side execution, high bandwidth-low latency interactions, but they also introduces problems like performance limitations, secure environments, transmission efficiency.
Reference: [8] <author> W. R. Cheswick and S. M. Bellovin, </author> <title> Firewalls and Internet Security, </title> <publisher> Addison Wesley </publisher>
Reference: [9] <author> E. Cooper, R. Harper and P. Lee. </author> <title> The Fox Project: Advanced Development of Systems Software. </title> <type> Technical Report CMU-CS-91-178, </type> <institution> Carnegie Mellon University, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: Programming languages like Java provide security at the level of individual applets, but do not allow multiple protection domains (many applets) to exist within a single address space. For example web browsers do not provide secure communications between two applets on the same page. Work in operating systems <ref> [4, 9, 23] </ref> has explored the use of safe languages to allow untrusted code (thus many protection domains) to run inside the kernel (a single address space).
Reference: [10] <author> Thorsten von Eicken et al, SLK: </author> <title> A Capability System Based on Safe Language Technology, </title> <note> submitted to SOSP 97 </note>
Reference-contexts: Work in operating systems [4, 9, 23] has explored the use of safe languages to allow untrusted code (thus many protection domains) to run inside the kernel (a single address space). Recent advances in language technology like the Safe Language Kernel <ref> [10] </ref> allows different applets to execute in a secure and efficient manner in the same address space.
Reference: [11] <author> L. Fonner, </author> <title> What's an agent, </title> <note> anyway? , http://fonner.www.media.mit.edu/people/foner/Julia/Juli a.htm </note>
Reference-contexts: A capsule is a packet where the header identifies what piece of code should be run for the packet. Our work proposes to use applets only in the control path, thus avoiding the performance penalty incurred by using applets in the data path. References <ref> [7, 12, 11, 28] </ref> provide a high-level survey of the advantages and disadvantages of using applets. They conclude that applets offer significant advantages in cases of disconnected operation, individualized service, server side execution, high bandwidth-low latency interactions, but they also introduces problems like performance limitations, secure environments, transmission efficiency.
Reference: [12] <author> S. Franklin and A. Graesse, </author> <title> Is it an Agent or just a Program ?: A taxonomy for Autonomous Agents, </title> <journal> Institute of Intelligent Systems, </journal> <note> University of Memphis http://www.msci.memphis.edu/~franklin/AgentProg.ht ml </note>
Reference-contexts: A capsule is a packet where the header identifies what piece of code should be run for the packet. Our work proposes to use applets only in the control path, thus avoiding the performance penalty incurred by using applets in the data path. References <ref> [7, 12, 11, 28] </ref> provide a high-level survey of the advantages and disadvantages of using applets. They conclude that applets offer significant advantages in cases of disconnected operation, individualized service, server side execution, high bandwidth-low latency interactions, but they also introduces problems like performance limitations, secure environments, transmission efficiency.
Reference: [13] <author> M. Genereseth and Ketchpel, </author> <title> Software Agents, </title> <address> http://logic.stanford.edu/sharing/papers/agents.ps </address>
Reference-contexts: They conclude that applets offer significant advantages in cases of disconnected operation, individualized service, server side execution, high bandwidth-low latency interactions, but they also introduces problems like performance limitations, secure environments, transmission efficiency. Other work focuses on different aspects of the applet framework. References <ref> [29, 13] </ref> describe the ARPA Knowledge sharing effort which led to the definition of an applet communication language (ACL), which consists of a vocabulary, Knowledge Interchange Format (KIF) and the Knowledge Manipulation and Query Language (KQML).
Reference: [14] <author> Java(tm) Beans: </author> <title> A Component Architecture for Java http://splash.javasoft.com/beans/WhitePaper.html </title>
Reference-contexts: ACL is a declarative language (similar to SQL), that represents knowledge as tupules and first order logic. Reference [5] classifies frameworks based on their capability to support applet migration. This is similar to the JavaBeans <ref> [14] </ref> effort for Java. References [16, 15, 17, 19] describe various aspects of Java and the Java virtual machine, which is the language in which applets are written. NOW [1] and SPIN [4] describe operating systems that allow user code to be executed in a safe manner in the kernel.
Reference: [15] <institution> The Java Language Environment White Paper, ftp://ftp.javasoft.com/docs/whitepaper.ps.tar.Z </institution>
Reference-contexts: ACL is a declarative language (similar to SQL), that represents knowledge as tupules and first order logic. Reference [5] classifies frameworks based on their capability to support applet migration. This is similar to the JavaBeans [14] effort for Java. References <ref> [16, 15, 17, 19] </ref> describe various aspects of Java and the Java virtual machine, which is the language in which applets are written. NOW [1] and SPIN [4] describe operating systems that allow user code to be executed in a safe manner in the kernel.
Reference: [16] <institution> Java Language Overview, ftp://ftp.javasoft.com/docs/java-overview.ps </institution>
Reference-contexts: ACL is a declarative language (similar to SQL), that represents knowledge as tupules and first order logic. Reference [5] classifies frameworks based on their capability to support applet migration. This is similar to the JavaBeans [14] effort for Java. References <ref> [16, 15, 17, 19] </ref> describe various aspects of Java and the Java virtual machine, which is the language in which applets are written. NOW [1] and SPIN [4] describe operating systems that allow user code to be executed in a safe manner in the kernel.
Reference: [17] <institution> The Java Platform White Paper ftp://ftp.javasoft.com/docs/JavaPlatform.ps </institution>
Reference-contexts: ACL is a declarative language (similar to SQL), that represents knowledge as tupules and first order logic. Reference [5] classifies frameworks based on their capability to support applet migration. This is similar to the JavaBeans [14] effort for Java. References <ref> [16, 15, 17, 19] </ref> describe various aspects of Java and the Java virtual machine, which is the language in which applets are written. NOW [1] and SPIN [4] describe operating systems that allow user code to be executed in a safe manner in the kernel.
Reference: [18] <institution> Java Security FAQ, </institution> <note> http://java.sun.com/sfaq </note>
Reference: [19] <author> JavaOS(tm): </author> <title> A Standalone Java Environment ftp://ftp.javasoft.com/docs/whitePaper.JavaOS/JavaOS.c over.ps </title>
Reference-contexts: ACL is a declarative language (similar to SQL), that represents knowledge as tupules and first order logic. Reference [5] classifies frameworks based on their capability to support applet migration. This is similar to the JavaBeans [14] effort for Java. References <ref> [16, 15, 17, 19] </ref> describe various aspects of Java and the Java virtual machine, which is the language in which applets are written. NOW [1] and SPIN [4] describe operating systems that allow user code to be executed in a safe manner in the kernel.
Reference: [20] <author> G. Malkin and F. Baker, </author> <title> "RIP Version 2 MIB Extension", </title> <type> RFC 1724, </type> <institution> SRI Network Information Center, </institution> <month> November </month> <year> 1994. </year>
Reference: [21] <author> McCanne, S., and Jacobson, V., </author> <title> The BSD Packet Filter: A New Architecture for User-level Packet Capture. </title> <booktitle> Proceedings of the 1993 Winter USENIX Technical Conference (San Diego, </booktitle> <address> CA, </address> <month> Jan. </month> <year> 1993) </year>
Reference: [22] <author> S. K. McCloghrie and M. Rose, </author> <title> "Management Information Base for Network Management of TCP/IP-based internets: </title> <institution> MIB-II", RFC1213, SRI Network Information Center. </institution>
Reference-contexts: This unification of snmplet state and the MIB leads to a uniform and simple access of persistent state information. We developed an active proxy for an IP router and exposed MIB-II <ref> [22] </ref> and the IP forwarding MIB [2] to applets running on the router. This allows snmplets to access the routing and forwarding tables on the router.
Reference: [23] <author> H. Mossenbook. </author> <title> Extensibility in the Oberon System. </title> <journal> Nordic Journal of Computing 1(1), </journal> <month> February </month> <year> 1994. </year>
Reference-contexts: Programming languages like Java provide security at the level of individual applets, but do not allow multiple protection domains (many applets) to exist within a single address space. For example web browsers do not provide secure communications between two applets on the same page. Work in operating systems <ref> [4, 9, 23] </ref> has explored the use of safe languages to allow untrusted code (thus many protection domains) to run inside the kernel (a single address space).
Reference: [24] <author> Marshall T. Rose, </author> <title> The Simple Book: an Introduction to Network Management revised Second Edition, </title> <publisher> Prentice Hall Series in Innovative Technology, </publisher> <year> 1996 </year>
Reference-contexts: Note that both extensions described in this section do not need any modification to existing protocols. In contrast, in the next section, we discuss extensions to existing protocols to better exploit an active network framework. 4 Extending current protocols and systems 4.1 SNMP The designers of SNMP <ref> [24, 25] </ref> purposely made it simple because they did not expect managed entities to have adequate computing power. Today, however, managed entities run operating systems (like pSoS) which supports Java applets and are powerful enough to do things beyond the scope of SNMP. <p> The snmplets are executed in the proxy and have access to the SNMP Management Information Base (MIB) at the managed object. In SNMP, the manager has to poll the managed entity to obtain information about dynamically changing variables in the MIB <ref> [24] </ref>. The possibility of a large latency between the manger and the managed object precludes the implementation of fine grained control M anager sn m plets SN M P D A ctive S N M P Proxy G et /Set /G et N ext Req uests Snm p lets algorithms.
Reference: [25] <author> W. Stallings, </author> <title> Network Management, </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1993. </year>
Reference-contexts: Note that both extensions described in this section do not need any modification to existing protocols. In contrast, in the next section, we discuss extensions to existing protocols to better exploit an active network framework. 4 Extending current protocols and systems 4.1 SNMP The designers of SNMP <ref> [24, 25] </ref> purposely made it simple because they did not expect managed entities to have adequate computing power. Today, however, managed entities run operating systems (like pSoS) which supports Java applets and are powerful enough to do things beyond the scope of SNMP.
Reference: [26] <author> D. L. Tennenhouse, S. J. Garland, L. Shrira and M. F. Kaashoek, </author> <title> From Internet to Activenet , Laboratory for Computer Science, </title> <publisher> MIT </publisher>
Reference-contexts: We believe that these advances adequately answer the inherent security concerns in an active network architecture. 8 Related Work Our vision of active networks is inspired by the seminal work by Tennenhouse et al described in References <ref> [26, 27, 1] </ref>. In their framework, applications inject capsules rather than packets into the network. A capsule is a packet where the header identifies what piece of code should be run for the packet.
Reference: [27] <author> D. L. Tennenhouse and D. J. Wetherall, </author> <title> Towards an Active Network Architecture. Telemedia, Networks and Systems Group, </title> <publisher> MIT, </publisher>
Reference-contexts: We believe that these advances adequately answer the inherent security concerns in an active network architecture. 8 Related Work Our vision of active networks is inspired by the seminal work by Tennenhouse et al described in References <ref> [26, 27, 1] </ref>. In their framework, applications inject capsules rather than packets into the network. A capsule is a packet where the header identifies what piece of code should be run for the packet.
Reference: [28] <author> Wooldridge and Jennings, </author> <title> Intelligent Agents: </title> <journal> theory and practice, </journal> <note> http://www.doc.mmu.ac.uk/STAFF/mike/ker95.ps </note>
Reference-contexts: A capsule is a packet where the header identifies what piece of code should be run for the packet. Our work proposes to use applets only in the control path, thus avoiding the performance penalty incurred by using applets in the data path. References <ref> [7, 12, 11, 28] </ref> provide a high-level survey of the advantages and disadvantages of using applets. They conclude that applets offer significant advantages in cases of disconnected operation, individualized service, server side execution, high bandwidth-low latency interactions, but they also introduces problems like performance limitations, secure environments, transmission efficiency.
Reference: [29] <author> M. Wu, R. Sharma and S. Keshav, </author> <title> An Intelligent Framework for Network Management, </title> <booktitle> work in progress. </booktitle>
Reference-contexts: For example, applets injected by different sources may be collecting the same information. How can we aggregate this information to avoid sending the same information twice over the network? Two techniques for this purpose are described in Reference <ref> [29] </ref>. First, as described in Section 5.1, each applet and its instance could be uniquely identified. Thus, an endpoint could discover that an instance of an applet that it wants to run is already present on an intermediate node. <p> They conclude that applets offer significant advantages in cases of disconnected operation, individualized service, server side execution, high bandwidth-low latency interactions, but they also introduces problems like performance limitations, secure environments, transmission efficiency. Other work focuses on different aspects of the applet framework. References <ref> [29, 13] </ref> describe the ARPA Knowledge sharing effort which led to the definition of an applet communication language (ACL), which consists of a vocabulary, Knowledge Interchange Format (KIF) and the Knowledge Manipulation and Query Language (KQML).
References-found: 29

