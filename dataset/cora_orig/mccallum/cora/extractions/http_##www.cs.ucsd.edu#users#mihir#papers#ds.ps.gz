URL: http://www.cs.ucsd.edu/users/mihir/papers/ds.ps.gz
Refering-URL: http://www.cs.ucsd.edu/users/mihir/papers/ds.html
Root-URL: http://www.cs.ucsd.edu
Email: E-mail: mihir@cs.ucsd.edu.  
Title: How to Sign Given Any Trapdoor Permutation  
Author: Mihir Bellare Silvio Micali 
Address: San Diego, 9500 Gilman Drive, La Jolla, CA 92093.  545 Technology Square, Cambridge, MA  
Affiliation: Department of Computer Science Engineering, Mail Code 0114, University of California at  MIT Laboratory for Computer Science,  
Date: January 1992  
Note: Appears in Journal of the ACM, Vol. 39, No. 1, January 1992, pp. 214-233. Prelimanary version in Proceedings of the 20th Annual Symposium on Theory of Computing, ACM, 1988.  Work done while author was at MIT, supported in part by NSF grant CCR-87-19689.  02139. Supported in part by NSF grant DCR-84-13577 and ARO grant DAALO3-86-K-0171.  
Abstract: We present a digital signature scheme which is based on the existence of any trapdoor permutation. Our scheme is secure in the strongest possible natural sense: namely, it is secure against existential forgery under adaptive chosen message attack. 
Abstract-found: 1
Intro-found: 1
Reference: [BeMi] <author> Bellare, M., and S. Micali, </author> <title> "How to Sign Given Any Trapdoor Function," </title> <booktitle> Proceedings of the 20th Annual Symposium on Theory of Computing, ACM, </booktitle> <year> 1988. </year>
Reference-contexts: A dual and equivalent scheme which directly uses the Lamport format but signs new functions instead is described briefly in Section 8. (The latter version of the scheme was also presented in <ref> [BeMi] </ref>). 5.2 The Signature Scheme A user's public key in our scheme is of the form PK = (f 0;0 ; f 0;1 ; : : :; f k;0 ; f k;1 ; ff 0 ) where the f i;j are trapdoor permutations with security parameter k and ff 0 is <p> In fact, it is this dual scheme that was presented in detail in <ref> [BeMi] </ref>, and the interested reader can obtain details from there. We point out, though, that the scheme of Section 6 is the far more natural one for implementation.
Reference: [BBS] <author> Blum, L., M. Blum, and M. Shub, </author> <title> "A Simple Unpredictable Pseudo-Random Number Generator," </title> <journal> SIAM Journal on Computing 15(2), </journal> <pages> 364-383, </pages> <month> May </month> <year> 1986. </year>
Reference-contexts: The same construction works for the trapdoor permutations of <ref> [BBS] </ref>.
Reference: [BlMi] <author> Blum, M., and S. Micali, </author> <title> "How to Generate Cryptographically Strong Sequences of Pseudo-Random Bits," </title> <journal> SIAM Journal on Computing 13(4), </journal> <pages> 850-864, </pages> <month> November </month> <year> 1984. </year>
Reference: [DH] <author> Diffie, W. and M. E. Hellman, </author> <title> "New Directions in Cryptography," </title> <journal> IEEE Trans. Info. Theory IT-22, </journal> <pages> 644-654, </pages> <month> November </month> <year> 1976. </year>
Reference: [Go] <author> Goldreich, O., </author> <title> "Two Remarks Concerning the GMR Signature Scheme," </title> <institution> MIT Laboratory for Computer Science Technical Report 715, </institution> <month> September </month> <year> 1986. </year>
Reference-contexts: This is much better than encoding into strings of length k (at least for k 3). 10.2 A Memoryless Version [GMR] describe a method to make their scheme memoryless; they attribute the basic idea to Levin and improvements to <ref> [Go] </ref>. Another memoryless version of the scheme is due to [Gu]. We note here that the former set of techniques can be applied to make our scheme memoryless as well. The basic tool is the use of pseudo-random functions [GGM], whose existence is implied by our assumptions.
Reference: [GGM] <author> Goldreich, O., S. Goldwasser, and S. Micali, </author> <title> "How To Construct Random Functions," </title> <journal> Journal of the ACM 33(4), </journal> <pages> 792-807, </pages> <month> October </month> <year> 1986. </year>
Reference-contexts: Another memoryless version of the scheme is due to [Gu]. We note here that the former set of techniques can be applied to make our scheme memoryless as well. The basic tool is the use of pseudo-random functions <ref> [GGM] </ref>, whose existence is implied by our assumptions. A function from a pseudo-random collection is put in the secret key and used to compute the seeds in the tree ([GMR] call them roots) in a specific manner.
Reference: [GM] <author> Goldwasser, S., and S. Micali, </author> <title> "Probabalistic Encryption," </title> <journal> Journal of Computer and System Sciences 28, </journal> <pages> 270-299, </pages> <month> April </month> <year> 1984. </year>
Reference: [GMR] <author> Goldwasser, S., and S. Micali, and R. Rivest, </author> <title> "A Digital Signature Scheme Secure Against Adaptive Chosen-Message Attacks," </title> <journal> SIAM Journal on Computing 17(2), </journal> <pages> 281-308, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: However, it is hard to forge A's signatures without knowledge of his secret key. Below we give a more precise outline of the constituents of a signature scheme and of the notion of security against adaptive chosen message attack <ref> [GMR] </ref>. 3.1 Components of a Signature Scheme A digital signature scheme has the following components: * A security parameter k. <p> It is to be understood that f () = E (x; ) for some (x; y) 2 [G (1 k )] where (G; E; I) is the underlying trapdoor permutation generator. Although simpler, our definition is potentially less general than that of <ref> [GMR] </ref>. The difference lies in the nature of the domain on which a trapdoor permutation is defined. We ask that the domain be f0; 1g k when the security parameter is k, while [GMR] only require that it be a set which can be sampled ; their generator produces with each <p> Although simpler, our definition is potentially less general than that of <ref> [GMR] </ref>. The difference lies in the nature of the domain on which a trapdoor permutation is defined. We ask that the domain be f0; 1g k when the security parameter is k, while [GMR] only require that it be a set which can be sampled ; their generator produces with each permutation an algorithm which can produce a random point of the domain. We utilize this difference in our scheme. <p> We do this by regenerating some of the public key information every time we sign a bit. <ref> [GMR] </ref> too uses the idea of regenerating some part of the information in the public key, but a different way of signing a single bit. <p> simulate the signing and get E (x; ) 1 (z) from the forger in the same manner as before. 9 Using Tree Structures A key tool in improving the efficiency of our scheme and in eventually getting a memoryless version is the use of tree structures in the style of <ref> [GMR] </ref>. We describe in this section the nature of the basic tree based scheme. <p> The new string is about twice as long as the old. This is much better than encoding into strings of length k (at least for k 3). 10.2 A Memoryless Version <ref> [GMR] </ref> describe a method to make their scheme memoryless; they attribute the basic idea to Levin and improvements to [Go]. Another memoryless version of the scheme is due to [Gu]. We note here that the former set of techniques can be applied to make our scheme memoryless as well.
Reference: [GMY] <author> Goldwasser, S., S. Micali, and A. Yao, </author> <title> "Strong Signature Schemes," </title> <booktitle> Proceedings of the 15th Annual Symposium on Theory of Computing, ACM, </booktitle> <year> 1983. </year>
Reference: [Gu] <author> Guillou, L., </author> <title> "A Zero-Knowledge Evolution of the Paradoxical GMR Signature Scheme", </title> <month> February </month> <year> 1988. </year>
Reference-contexts: This is much better than encoding into strings of length k (at least for k 3). 10.2 A Memoryless Version [GMR] describe a method to make their scheme memoryless; they attribute the basic idea to Levin and improvements to [Go]. Another memoryless version of the scheme is due to <ref> [Gu] </ref>. We note here that the former set of techniques can be applied to make our scheme memoryless as well. The basic tool is the use of pseudo-random functions [GGM], whose existence is implied by our assumptions.
Reference: [La] <author> Lamport, L. </author> <title> "Constructing Digital Signatures from a One-Way Function," </title> <booktitle> SRI Intl. </booktitle> <address> CSL-98, </address> <month> October </month> <year> 1979. </year> <month> 19 </month>
Reference-contexts: For simplicity we will for the moment completely disregard efficiency. 7 5.1 Background Lamport <ref> [La] </ref> suggested the following method for signing a single bit. The signer makes public a trapdoor permutation f and a pair of points ff 0 and ff 1 , and keeps secret f 1 .
Reference: [M] <author> Merkle, R., </author> <title> "A Digital Signature Based on a Conventional Encryption Function," </title> <booktitle> Ad--vances in Cryptology - Crypto 87 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 293, </volume> <editor> C. Pomerance ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference: [NY] <author> Naor, M., and M. Yung, </author> <title> "Universal One-Way Hash Functions and their Cryptographic Applications," </title> <booktitle> Proceedings of the 21st Annual Symposium on Theory of Computing, ACM, </booktitle> <year> 1989. </year>
Reference: [RSA] <author> Rivest, R., A. Shamir, and L. Adleman, </author> <title> "A Method for Obtaining Digital Signatures and Public-Key Cryptosystems," </title> <journal> Communications of the ACM 21(2), </journal> <pages> 120-26, </pages> <month> February </month> <year> 1978. </year>
Reference-contexts: A simple, general construction due to Yao [Y] fits RSA and other candidates into our scenario. An informal description of this construction follows. 4.2 Using Yao's Construction Take for example the RSA function <ref> [RSA] </ref>, the most popular candidate for a trapdoor permutation. The domain of the trapdoor permutation f when the security parameter is k is D = Z fl k , a subset of the k bit strings.
Reference: [R] <author> Rompel, J., </author> <title> "One-Way Functions are Necessary and Sufficient for Secure Signatures," </title> <booktitle> Proceedings of the 22nd Annual Symposium on Theory of Computing, ACM, </booktitle> <year> 1990. </year>
Reference: [W] <author> Williams, H.C., </author> <title> "A Modification of the RSA Public-Key Cryptosystem," </title> <journal> IEEE Trans. Inform. Theory, </journal> <pages> IT-26 , 726-729, </pages> <year> 1980. </year>
Reference: [Y] <author> Yao, A. C., </author> <title> "Theory and Applications of Trapdoor Functions," </title> <booktitle> Proceedings of the 23rd Symposium on Foundations of Computer Science, IEEE, </booktitle> <year> 1982. </year> <month> 20 </month>
Reference-contexts: We utilize this difference in our scheme. However our definition is without loss of generality in the sense that it does capture all known candidates for trapdoor permutations. A simple, general construction due to Yao <ref> [Y] </ref> fits RSA and other candidates into our scenario. An informal description of this construction follows. 4.2 Using Yao's Construction Take for example the RSA function [RSA], the most popular candidate for a trapdoor permutation.
References-found: 17

