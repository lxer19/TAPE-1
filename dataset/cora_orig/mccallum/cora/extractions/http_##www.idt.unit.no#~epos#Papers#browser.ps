URL: http://www.idt.unit.no/~epos/Papers/browser.ps
Refering-URL: http://www.idt.unit.no/~epos/bibliografia.html
Root-URL: 
Title: A Browser for a Versioned Entity-Relationship Database  single pictorial representation of multiple versions of some structure.  
Author: Bjtrn Gulla 
Keyword: Existing browsers and navigation tools  
Date: 1-3 July 1992  
Note: Presented at the Int'l Workshop on Interfaces to Database Systems (IDS'92) Glasgow, Scotland,  only support single-version views of the database. However, many tasks require or would be better supported if visualizations also conveying version information were used. A multi-version view is a  
Address: (NTH), Trondheim, Norway  
Affiliation: Norwegian Institute of Technology  
Abstract: We are currently building a browser with a graphical user interface that allow easy navigation in both information spaces for an entity-relationship database. A range of different multi-version viewing techniques is supported. 
Abstract-found: 1
Intro-found: 1
Reference: [CERE90] <author> B. Czejdo, R. El-masri, M. Rusinkiewicz, and D. Em-bley. </author> <title> A graphical data manipulation language for an extended entity-relationship model. </title> <journal> IEEE Computer, </journal> <volume> 23(3) </volume> <pages> 26-36, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: Navigation commands manipulate this set. 3.3 Query mechanism In an early prototype we implemented a query mechanism based on direct manipulation of a visual representation of the entity-relationship schema of the database (or a subschema thereof ), similar to the approach in <ref> [CERE90] </ref>. Clicking on a symbol for an entity class, a relationship or a relationship role would toggle between dimmed and full intensity. The constructed query included all non-dimmed entity and relationship types. In addition, the query could be restricted by specifying for each type patterns for attributes to match.
Reference: [Che76] <author> Peter Pin-Shan Chen. </author> <title> The Entity-Relationship Model | towards a unified view of data. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 1(1) </volume> <pages> 9-36, </pages> <month> March </month> <year> 1976. </year>
Reference-contexts: The need for automatic support of multiple versions in such database system is widely recognized as essential, and an increasing number of databases provide such support [Kat90, EB91]. In the EPOS project we are building a database system based on an entity-relationship model <ref> [Che76] </ref> extended with uniform versioning and subtyping of both entities and relationships [Lie90]. It can also be considered a structurally object-oriented database [Dit86, ZM90], since new types can be created, but with the underlying representation visible.
Reference: [Dit86] <author> Klaus R. Dittrich. </author> <title> Object-oriented database systems: The notions and the issues. </title> <booktitle> In Proceedings of the 1st International Workshop on Object-Oriented Database Systems, </booktitle> <pages> pages 2-6, </pages> <month> September </month> <year> 1986. </year>
Reference-contexts: In the EPOS project we are building a database system based on an entity-relationship model [Che76] extended with uniform versioning and subtyping of both entities and relationships [Lie90]. It can also be considered a structurally object-oriented database <ref> [Dit86, ZM90] </ref>, since new types can be created, but with the underlying representation visible. The database incorporates features such as long fields, long non-serializable (conversation) and nested transactions [DL88]. It is realized in a client-server architecture running over a local network.
Reference: [DL88] <author> Klaus R. Dittrich and Raymond A. Lorie. </author> <title> Version support for engineering database systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 14(4) </volume> <pages> 429-437, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: It can also be considered a structurally object-oriented database [Dit86, ZM90], since new types can be created, but with the underlying representation visible. The database incorporates features such as long fields, long non-serializable (conversation) and nested transactions <ref> [DL88] </ref>. It is realized in a client-server architecture running over a local network. Database access is by interpreting explicitly represented type descriptor objects. Our objective with this browser tool is to make the version space more easily accessible.
Reference: [DLPT82] <author> E. Diday, J. Lemaire, J. Pouget, and F. Testu. Elements d`analyse de donnees. Dunod, Paris, </author> <year> 1982. </year>
Reference-contexts: For the graph view we have implemented several algorithms, namely barycentric [STT81], median [GNV88], and Eade's splitting [EK86] algorithms for hierarchical graphs, and a Kamada spring embedder [KK89] algorithm with optional orthogo-nalization for general graphs. For the affinity view we have an operational algorithm based on distance analysis <ref> [DLPT82] </ref> that provide optimal or near-optimal solutions. However, this algorithm is too slow to be used interactively since matrix diagonalizations and eigenvalue computations are involved. Therefore we plan to switch 6 to an adapted spring embedder algorithm. The value view uses a very simple tree layout algorithm. <p> Fragments appearing in both or in any one of the versions are easily identified. Use: merge two versions, or migrate changes. compatibility For each pair of components, compute the degree of overlap between their visibilities for a set of versions. Use statistical distance analysis <ref> [DLPT82] </ref> to map this nfi n matrix down to a single dimension controlling a visual attribute. Visually similar components are likely to have occurred in the same configurations. Use: compatibility of components. structure variance Use a 2.5 dimensional view with the version space into the paper plane.
Reference: [EB91] <author> Jacky Estublier and Noureddine Belkhatir. </author> <title> An environment for software maintenance: </title> <type> Adele 2. Technical report, </type> <institution> IMAG-LGI, </institution> <month> 91. </month>
Reference-contexts: In addition, the steady evolution by error corrections and enhancements must be tracked. The need for automatic support of multiple versions in such database system is widely recognized as essential, and an increasing number of databases provide such support <ref> [Kat90, EB91] </ref>. In the EPOS project we are building a database system based on an entity-relationship model [Che76] extended with uniform versioning and subtyping of both entities and relationships [Lie90].
Reference: [EK86] <author> Peter Eades and David Kelly. </author> <title> Heuristics for drawing 2-layered networks. </title> <address> ARS Combinatoria, 21-A:89-98, </address> <year> 1986. </year>
Reference-contexts: Different layout procedures can be used, depending on the characteristics of the structure. For the graph view we have implemented several algorithms, namely barycentric [STT81], median [GNV88], and Eade's splitting <ref> [EK86] </ref> algorithms for hierarchical graphs, and a Kamada spring embedder [KK89] algorithm with optional orthogo-nalization for general graphs. For the affinity view we have an operational algorithm based on distance analysis [DLPT82] that provide optimal or near-optimal solutions.
Reference: [GKY91] <author> Bjtrn Gulla, Even-Andre Karlsson, and Dashing Yeh. </author> <title> Change-oriented version descriptions in EPOS. </title> <journal> Software Engineering Journal, </journal> <volume> 6(6) </volume> <pages> 378-386, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: Multi-version ambitions and choices are expressed by not specifying values for some options, since this is treated as the the set of versions where these options are either true or false. To simplify the use of COV for large systems, version description mechanisms <ref> [GKY91] </ref> have been designed. Abstract descriptions specifying desired properties and functional requirements are evaluated to an ambition and a choice. Suggested techniques include aggregates, constraints, validities (properties of versions) and preferences. entity is created and its attribute assigned the value 3 during a transaction with ambition true (a).
Reference: [GM89] <editor> Carlo Ghezzi and John A. McDer-mid, editors. </editor> <booktitle> Proceedings of 2nd Eu-ropean Software Engineering Conference, </booktitle> <address> Coventry, UK, September 1989. </address> <publisher> Springer Verlag, LNCS 387. </publisher>
Reference: [GNV88] <author> E. R. Gansner, S. C. North, and K. P. Vo. </author> <title> DAG a program that draws directed graphs. </title> <journal> Software| Practice and Experience, </journal> <volume> 18(11) </volume> <pages> 1047-1062, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: The structures are derived (through a query) and continuously updated, and there are possibly multiple views of the same instance in different contexts. Different layout procedures can be used, depending on the characteristics of the structure. For the graph view we have implemented several algorithms, namely barycentric [STT81], median <ref> [GNV88] </ref>, and Eade's splitting [EK86] algorithms for hierarchical graphs, and a Kamada spring embedder [KK89] algorithm with optional orthogo-nalization for general graphs. For the affinity view we have an operational algorithm based on distance analysis [DLPT82] that provide optimal or near-optimal solutions.
Reference: [Kat90] <author> Randy H. Katz. </author> <title> Toward a unified framework for version modeling in engineering databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(4) </volume> <pages> 375-408, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: In addition, the steady evolution by error corrections and enhancements must be tracked. The need for automatic support of multiple versions in such database system is widely recognized as essential, and an increasing number of databases provide such support <ref> [Kat90, EB91] </ref>. In the EPOS project we are building a database system based on an entity-relationship model [Che76] extended with uniform versioning and subtyping of both entities and relationships [Lie90].
Reference: [KK89] <author> Tomihisa Kamada and Satoru Kawai. </author> <title> An algorithm for drawing general undirected graphs. </title> <journal> Information Processing Letters, </journal> <volume> 31 </volume> <pages> 7-15, </pages> <year> 1989. </year>
Reference-contexts: Different layout procedures can be used, depending on the characteristics of the structure. For the graph view we have implemented several algorithms, namely barycentric [STT81], median [GNV88], and Eade's splitting [EK86] algorithms for hierarchical graphs, and a Kamada spring embedder <ref> [KK89] </ref> algorithm with optional orthogo-nalization for general graphs. For the affinity view we have an operational algorithm based on distance analysis [DLPT82] that provide optimal or near-optimal solutions. However, this algorithm is too slow to be used interactively since matrix diagonalizations and eigenvalue computations are involved.
Reference: [LDC + 89] <author> Anund Lie, Tor M. Didriksen, Rei-dar Conradi, Even-Andre Karlsson, Svein O. Hallsteinsen, and Per Ho-lager. </author> <title> Change Oriented Versioning. </title> <booktitle> In Ghezzi and McDermid [GM89], </booktitle> <pages> pages 191-202. </pages> <publisher> Springer Verlag, LNCS 387. </publisher>
Reference-contexts: Techniques available are presented in Section Four. Then the system architecture and the actual user interface of the browser is presented. Finally some remarks about support for cooperative work and the notification mechanism are mentioned. 2 Change-Oriented Versioning Using the change-oriented versioning (COV) model <ref> [LDC + 89] </ref>, versioning can be considered largely orthogonal to data structuring (data model, schema, composition structure, etc.) as suggested in Figure 1. A version is global, i.e. a "view" of the entire database with any version-related variability removed.
Reference: [Lie90] <author> Anund Lie. </author> <title> Versioning in Software Engineering Databases. </title> <type> PhD thesis, </type> <institution> Norwegian Institute of Technology, Division of Computer Systems and Telematics, </institution> <month> January </month> <year> 1990. </year> <note> ISBN 82-7119-155-1. </note>
Reference-contexts: In the EPOS project we are building a database system based on an entity-relationship model [Che76] extended with uniform versioning and subtyping of both entities and relationships <ref> [Lie90] </ref>. It can also be considered a structurally object-oriented database [Dit86, ZM90], since new types can be created, but with the underlying representation visible. The database incorporates features such as long fields, long non-serializable (conversation) and nested transactions [DL88].
Reference: [LVC89] <author> Mark A. Linton, John M. Vlissides, and Paul R. Calder. </author> <title> Composing user interfaces with InterViews. </title> <journal> IEEE Computer, </journal> <volume> 22(2) </volume> <pages> 8-22, </pages> <month> February </month> <year> 1989. </year>
Reference-contexts: This illustrates how COV permits specification of different patterns of cooperation. 8 Conclusion The browser is being implemented to run under the X Window System. It is implemented in C++ using the InterViews <ref> [LVC89] </ref> library to construct the users interface and the graphical interaction parts. The layout algorithms are implemented, but some of the view generation techniques and user dialogs still remain. The COV-based entity-relationship database is operating.
Reference: [NPT90] <author> Frances Newbery Paulisch and Wal-ter F. Tichy. </author> <title> Edge: An extendible graph editor. </title> <journal> Software|Practice and Experience, </journal> <volume> 20(S1):63-88, </volume> <month> June </month> <year> 1990. </year>
Reference-contexts: Edges incident to vertices in the set are then drawn as incident to the super vertex. <ref> [NPT90] </ref> defines three types of graph abstraction: black box, grey box and white box, depending on the super vertex contents.
Reference: [Pin90] <author> Xavier Pintado. </author> <title> Selection and exploration in an object-oriented environment: The affinity browser. </title> <booktitle> In Object Management, </booktitle> <pages> pages 79-89. </pages> <institution> Centre Universitaire d'Informatique, Univer-site de Geneve, </institution> <year> 1990. </year>
Reference-contexts: Later we intend to include views for textual data and attribute name-value pairs. Figure 6 shows the primary techniques we have considered for E-R data structures. In a graph view there is a vertex for each entity, and an edge for each relationship in the product choice. Affinity views <ref> [Pin90] </ref> differ from graph 5 views in the way relations are visualized. Relationships are not drawn, but instead an ideal distance between each pair of entities is computed as a weighted sum of values from the connecting relationships.
Reference: [Rei89] <author> Peter Reid. </author> <title> Dynamic interactive display of complex data structures. </title> <editor> In Alistair Kilgour and Rae Earnshaw, editors, </editor> <booktitle> Graphical Tools for Software Engineers, </booktitle> <pages> pages 60-70. </pages> <publisher> Cambridge Unversity Press, </publisher> <year> 1989. </year> <note> ISBN 0-521-37221-6. </note>
Reference-contexts: While basic configuration control technology has improved to cope with demands for more flexible revision and variant support, facilities to allow the user to understand, manage and exploit this increasingly more complex versioned structure have not advanced significantly. As stated in <ref> [Rei89] </ref> "There is a very real danger that the data base of a project under IPSE control will become something of a 'black hole' as far as the user is concerned." Information is difficult to locate, and when located, difficult to interpret.
Reference: [STT81] <author> K. Sugiyama, S. Tagawa, and M. </author> <title> Toda. Methods 12 for visual understanding of hierarchi-cal system structures. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <volume> SMC-11(2):109-125, </volume> <month> February </month> <year> 1981. </year>
Reference-contexts: The structures are derived (through a query) and continuously updated, and there are possibly multiple views of the same instance in different contexts. Different layout procedures can be used, depending on the characteristics of the structure. For the graph view we have implemented several algorithms, namely barycentric <ref> [STT81] </ref>, median [GNV88], and Eade's splitting [EK86] algorithms for hierarchical graphs, and a Kamada spring embedder [KK89] algorithm with optional orthogo-nalization for general graphs. For the affinity view we have an operational algorithm based on distance analysis [DLPT82] that provide optimal or near-optimal solutions.
Reference: [ZM90] <editor> Stanley B. Zdonik and David Maier, editors. </editor> <booktitle> Readings in Object-Oriented Database Systems. The Morgan Kauf-mann Series in Data Management Systems. </booktitle> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> San Mateo, California, </address> <year> 1990. </year> <note> ISBN 1-55860-000-0. 13 </note>
Reference-contexts: In the EPOS project we are building a database system based on an entity-relationship model [Che76] extended with uniform versioning and subtyping of both entities and relationships [Lie90]. It can also be considered a structurally object-oriented database <ref> [Dit86, ZM90] </ref>, since new types can be created, but with the underlying representation visible. The database incorporates features such as long fields, long non-serializable (conversation) and nested transactions [DL88]. It is realized in a client-server architecture running over a local network.
References-found: 20

