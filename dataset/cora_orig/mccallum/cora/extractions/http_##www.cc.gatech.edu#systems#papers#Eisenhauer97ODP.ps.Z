URL: http://www.cc.gatech.edu/systems/papers/Eisenhauer97ODP.ps.Z
Refering-URL: http://www.cs.gatech.edu/systems/projects/FALCON/
Root-URL: 
Title: Online Displays of Parallel Programs: Problems and Solutions  
Author: Greg Eisenhauer, Weiming Gu Eileen Kraemer Karsten Schwan, John Stasko 
Keyword: online displays, parallel programs  
Date: July 1997  
Note: From Proceedings of the International Conference on Parallel and Distributed Processing Techniques and Applications PDPTA'97 Las Vegas  
Address: Atlanta,  30332  
Affiliation: College of Computing, Georgia Institute of Technology  GA  
Abstract: The continuous display of information derived from on-line monitoring presents problems that are more difficult to resolve than those associated with off-line displays. Handling these problems requires a systematic approach affecting both the displays and the monitoring system itself. This paper discusses the problems inherent in on-line display and the approach to them taken by the Falcon monitoring system. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Weiming Gu. </author> <title> On-line Monitoring and Interactive Steering of Large-Scale Parallel and Distributed Applications. </title> <type> PhD thesis, </type> <institution> Georgia Institute of Technology, </institution> <year> 1995. </year>
Reference-contexts: Our approach. The previous discussion of out-of-order events makes clear that the use of timestamps is not sufficient for determining and enforcing suitable, global event orderings. Falcon addresses this issue by employing an ordering filter between the local monitors and the display system <ref> [1] </ref>. This filter ensures that the event stream reaching the display system adheres to a specified, known causal ordering among events of various types. The ordering filter has knowledge of all execution threads, mutex locks, and conditions identified as occurring in the event stream. <p> An event should be held back only for the time it takes for its causal predecessors to reach the ordering filter. This time is a function of the specifics of the monitoring system and its configuration. See <ref> [1] </ref> for typical values in the Falcon system. Also, ordering filters may affect the overall latency of the monitoring system, both for events that are held back and those that are immediately passed to the display system. <p> A more detailed inspection of the view in y Strictly speaking, the introduction of online monitoring may perturb the application in innumerable ways, including modifying application caching and paging behavior and consuming network and processor resources. See <ref> [1] </ref> for more discussion of these costs. to be addressed. The solid color bars shown in the figure (the first and the fifth, counting from top to bottom) represent `worker' threads used in the atmospheric modeling application.
Reference: [2] <author> Weiming Gu, Greg Eisenhauer, Eileen Kraemer, Karsten Schwan, John Stasko, Jeffrey Vetter, and Nirupama Mallavarupu. </author> <title> Falcon: On-line monitoring and steering of large-scale parallel programs. </title> <booktitle> In Proceedings of FRONTIERS'95, </booktitle> <month> February </month> <year> 1995. </year>
Reference-contexts: Part of the run-time system for information capture is based on Cthreads, a user-level threads package that runs on a variety of platforms. The detailed discussions of the Falcon monitoring and steering system in <ref> [2] </ref> highlight the system's ability to provide scalable monitoring services and describe its characteristics with respect to end-to-end latency and bandwidth. For this paper, we describe only those aspects of Falcon relevant to the on-line displays it supports. <p> and they demonstrate the need to make displays and analysis code aware of critical properties of the underlying parallel programming libraries (e.g., the Cthreads programming library used in this work ) and of the monitoring system used for event capture and collection (in this case, the Falcon on-line monitoring system <ref> [2] </ref>).
Reference: [3] <author> Michael T. Heath and Jennifer A. Etheridge. </author> <title> Visualizing the performance of parallel programs. </title> <journal> IEEE Software, </journal> <pages> pages 29-39, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: The reordering problem. The diagnosis and correction of out-of-order events is a common problem in parallel and distributed monitoring systems. Existing o*ine systems (e.g., ParaGraph <ref> [3] </ref> and SIEVE [7]) rely on a sort by timestamp value to impose a total order on all events stored in event files. The on-line nature of the Falcon monitoring system precludes using such a solution. <p> The condition begin wait on sequence number n must be preceded by condition begin wait on sequence number n-1 . Comparison with other approaches. Our approach to online event reordering shares some common elements with other online and o*ine systems <ref> [6, 3, 7] </ref>. Of these systems, the Program Visualization project [4] at IBM is perhaps the most closely related. This system relies on a Lamport-like algorithm to perform on-the-fly event reordering for program visualization.
Reference: [4] <author> Doug Kimelman and Dror Zernik. </author> <title> On-the-fly topological sort a basis for interactive debugging and live visualization of parallel programs. </title> <booktitle> In Proc. of the 3rd ACM/ONR Workshop on Parallel and Distributed Debugging, </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: Comparison with other approaches. Our approach to online event reordering shares some common elements with other online and o*ine systems [6, 3, 7]. Of these systems, the Program Visualization project <ref> [4] </ref> at IBM is perhaps the most closely related. This system relies on a Lamport-like algorithm to perform on-the-fly event reordering for program visualization.
Reference: [5] <author> Eileen Kraemer. </author> <title> Causality filters: A tool for the online visualization and steering of parallel and distributed programs. </title> <booktitle> In Proc. of the 11th IPPS, </booktitle> <address> Geneva, Switzer-land, </address> <month> April </month> <year> 1997. </year>
Reference-contexts: While the general problem of establishing a consistent ordering between events in a distributed system has been widely studied, the use of techniques such as "Lamport" and vector timestamps in the monitoring system are not a panacea <ref> [5] </ref>. If the application already employs such techniques, a monitoring system might make use of them to maintain its own consistent view. <p> The on-line nature of the Falcon monitoring system precludes using such a solution. Additionally, sorting by timestamp order does not entirely eliminate the problem of out-of-order events <ref> [5] </ref> because coarse clock granularities and poor clock synchronization among different processors may lead to event timestamps that do not accurately reflect the actual order of program execution. <p> Our future work addresses the automatic generation of filtering code from formal rule specifications like the one shown above. Moreover, the generality of the rule-based approach to capturing and representing relevant program semantics is demonstrated in <ref> [5] </ref> by applying it to other threads packages as well as to distributed computing platforms like PVM. Implementation of on-line reordering. event reordering filter. <p> Our approach does not require such a library and is also applicable to applications which are implemented in other programming styles, such as the threads-based shared-memory atmospheric modeling application used as an example above. Coupled with tools to ease the process of creating causality filters <ref> [5] </ref>, we expect our approach to prove more portable. Effects on monitoring performance. While a complete analysis of the behavior of ordering filters is beyond the scope of this paper, several observations are relevant.
Reference: [6] <author> Allen D. Malony, Daniel A. Reed, and Harry A. G. Wijshoff. </author> <title> Performance measurement intrusion and perturbation analysis. </title> <journal> IEEE TPDS, </journal> <volume> 3(4) </volume> <pages> 433-450, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Various issues relating to time, ordering and perturbation appear in both off-line monitoring systems and distributed systems in general. In off-line monitoring, post-mortem processing is often used to resolve problems with ordering and perturbation <ref> [6] </ref>. The techniques used in off-line monitoring often rely on knowledge of the entire data stream, but the lack of this knowledge in on-line monitoring greatly complicates the resolution of these problems. <p> The condition begin wait on sequence number n must be preceded by condition begin wait on sequence number n-1 . Comparison with other approaches. Our approach to online event reordering shares some common elements with other online and o*ine systems <ref> [6, 3, 7] </ref>. Of these systems, the Program Visualization project [4] at IBM is perhaps the most closely related. This system relies on a Lamport-like algorithm to perform on-the-fly event reordering for program visualization.
Reference: [7] <author> Sekhar R. Sarukkai and Dennis Gan-non. </author> <title> Parallel program visualization using SIEVE.1. </title> <booktitle> In International Conference on Supercomputing. ACM, </booktitle> <month> July </month> <year> 1992. </year>
Reference-contexts: The reordering problem. The diagnosis and correction of out-of-order events is a common problem in parallel and distributed monitoring systems. Existing o*ine systems (e.g., ParaGraph [3] and SIEVE <ref> [7] </ref>) rely on a sort by timestamp value to impose a total order on all events stored in event files. The on-line nature of the Falcon monitoring system precludes using such a solution. <p> The condition begin wait on sequence number n must be preceded by condition begin wait on sequence number n-1 . Comparison with other approaches. Our approach to online event reordering shares some common elements with other online and o*ine systems <ref> [6, 3, 7] </ref>. Of these systems, the Program Visualization project [4] at IBM is perhaps the most closely related. This system relies on a Lamport-like algorithm to perform on-the-fly event reordering for program visualization.
Reference: [8] <author> John T. Stasko and Eileen Kraemer. </author> <title> A methodology for building application-specific visualizations of parallel programs. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 18(2) </volume> <pages> 258-264, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: This display uses the default monitoring sensors embedded in interactive Cthreads to provide system-level information about application behavior. The display is implemented with the Polka animation library <ref> [8] </ref>. Polka provides a flexible animation scheduling policy, permits different temporal mappings of program events to their animations, and therefore facilitates rapid construction of on-line displays fl . The thread lifetime view shows the different states of threads over time. <p> A narrow bar terminates when the thread exits, or, in the case of attached threads, when the thread is joined. In the case of a join, another vertical line is drawn from the caller thread to fl Polka is described and evaluated in detail in <ref> [8] </ref>. the thread it is joining. After a thread exits, the resulting empty space in the display can be reused for depiction of a new thread, if present. of an atmospheric modeling application.
References-found: 8

