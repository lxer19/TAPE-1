URL: ftp://ftp.cs.man.ac.uk/pub/hardware-verification/AHV-PROJECT/nfmw96-paper.ps.gz
Refering-URL: http://www.cs.man.ac.uk/fmethods/projects/AHV-PROJECT/node21.html
Root-URL: http://www.cs.man.ac.uk
Email: email: howard@cs.man.ac.uk  
Title: A Formally Based Framework for Supporting Design and Analysis of Asynchronous Hardware Systems  
Author: Howard Barringer, Donal Fellows, Graham Gough, Pete Jinks, Alan Williams 
Address: Manchester, UK  
Affiliation: Department of Computer Science, University of  
Abstract-found: 0
Intro-found: 1
Reference: [1] <editor> Graham Birtwistle and Al Davis, editors. </editor> <title> Asynchronous Digital Circuit Design. </title> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: 1 Introduction Digital hardware systems have, for the past 30 years, been designed using a synchronous approach, involving global clocking strategies. Recently, there has been renewed interest in asynchronous design techniques <ref> [1] </ref>, with the aim of obtaining low-power designs combined with high speed operation, a combination which is becoming increasingly difficult to achieve with synchronous systems.
Reference: [2] <author> I. Sutherland. </author> <title> Micropipelines. </title> <journal> Communications of the ACM, </journal> <volume> 32(6), </volume> <month> June </month> <year> 1989. </year>
Reference-contexts: Progress has been supported by the emergence of various asynchronous design methodologies, such as Sutherland's micropipeline philosophy <ref> [2] </ref>, which sufficiently simplify the design process to render it tractable for commercially sized systems.
Reference: [3] <author> AMULET. </author> <title> The AMULET Group Publications and Bibliography. </title> <note> Available via WorldWide Web, URL: http://www.cs.man.ac. uk/amulet/publications/index.html. </note>
Reference-contexts: The work, especially the development of the framework, is being conducted in close collaboration with the AMULET Group at the University of Manchester. They have been investigating commercial-scale asynchronous micropipeline design, including versions of the ARM RISC processor <ref> [3] </ref>. They have identified particular features required of an asynchronous design environment that current systems lack, restricting design development.
Reference: [4] <institution> Formal Verification Support for ELLA, IED/SERC Project 4/1/1357. </institution> <note> Reports are available on the World-Wide Web, URL: http://www.cs.man.ac.uk/fmethods/ projects/ella-project.html. </note>
Reference-contexts: They have been investigating commercial-scale asynchronous micropipeline design, including versions of the ARM RISC processor [3]. They have identified particular features required of an asynchronous design environment that current systems lack, restricting design development. Our philosophy, illustrated in past work on the synchronous HDL ELLA <ref> [4] </ref>, is to embed application-specific formal analysis techniques into the more traditional hardware development system, so that the engineer is presented with a familiar design interface via the HDL, and is thus still able to use conventional design tools in the design cycle. <p> We will also develop novel analysis techniques that exploit characteristics of the design in order to provide more tractable analysis methods, again illustrated by our work on ELLA <ref> [4] </ref>. <p> APA components operate at the level of abstraction corresponding to Rainbow; APA therefore supports value-passing and has richly-structured transition labels, similar to those used in our previous work on ELLA and EPA <ref> [4] </ref>. These features lead to a compact semantic representation of Rainbow designs, providing the basis for simulation formal analysis. The development of APA 8 extends our work of developing application-specific process algebraic semantic representations which naturally express the semantics of the source language at the most suitable level.
Reference: [5] <author> Manfred Broy, Frank Dederich, Claus Dendor-fer, and Max Fuchs. </author> <title> The Design of Distributed Systems An Introduction to FOCUS. </title> <type> Technical Report TUM-19202, </type> <institution> Inistitut fu Infor-matik, Technische Universitat Munchen, </institution> <year> 1992. </year>
Reference-contexts: Each language is given a formal semantics, enabling the language suite to form the basis of specialised formal verification and analysis tools for supporting a design. Ultimately, the framework will contain the following languages: Red : supports behavioural/specification descriptions using, for example, temporal logic or stream transformers <ref> [5] </ref>. Yellow : describes designs using a control flow style and Ada-like rendezvous communication [6, 7]. Green : supports hierarchical structural descriptions based on micropipeline primitives.
Reference: [6] <author> Wei Li. </author> <title> An Operational Semantics of Tasking and Exception Handling in Ada. </title> <type> Technical Report CSR-99-82, </type> <institution> University of Edinburgh, </institution> <month> January </month> <year> 1982. </year>
Reference-contexts: Ultimately, the framework will contain the following languages: Red : supports behavioural/specification descriptions using, for example, temporal logic or stream transformers [5]. Yellow : describes designs using a control flow style and Ada-like rendezvous communication <ref> [6, 7] </ref>. Green : supports hierarchical structural descriptions based on micropipeline primitives. It has schematic and textual versions | it is possible to convert from a schematic to a textual description, and to instantiate textual descriptions of components within a schematic. <p> However, the composition operators have been designed to support bundled-data micropipeline communication | the communication primitives involved use an Ada-like rendezvous, and their semantics resembles the Ada semantics presented in <ref> [6] </ref>. APA components operate at the level of abstraction corresponding to Rainbow; APA therefore supports value-passing and has richly-structured transition labels, similar to those used in our previous work on ELLA and EPA [4]. <p> For example, the Green pipeline operator `&gt;>' translates into a parallel composition with channel renaming and hiding; several channels may be piped independently between two processes. Yellow registers utilise an evaluation environment, similar to that used in <ref> [6] </ref>. Channel declarations and scoping rules simply translate into channel hiding in APA.
Reference: [7] <author> I. Sommerville and R. Morrison. </author> <title> Software Development with Ada. </title> <publisher> Addison-Wesley, </publisher> <year> 1987. </year>
Reference-contexts: Ultimately, the framework will contain the following languages: Red : supports behavioural/specification descriptions using, for example, temporal logic or stream transformers [5]. Yellow : describes designs using a control flow style and Ada-like rendezvous communication <ref> [6, 7] </ref>. Green : supports hierarchical structural descriptions based on micropipeline primitives. It has schematic and textual versions | it is possible to convert from a schematic to a textual description, and to instantiate textual descriptions of components within a schematic. <p> In contrast, Yellow allows evolving descriptions to be constructed, using a control-flow style, similar in many respects to CSP [10] or Ada <ref> [7] </ref>; for example the basic call/accept communication primitives used are adaptations of those given in Ada. Again, other Rainbow components, such as Green procedures, can be instantiated.
Reference: [8] <author> Ying Liu. AMULET1: </author> <title> Specification and Verification in CCS. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Calgary, </institution> <month> September </month> <year> 1995. </year>
Reference-contexts: It has schematic and textual versions | it is possible to convert from a schematic to a textual description, and to instantiate textual descriptions of components within a schematic. Blue: operates at a level below Green, and exposes handshaking control, similar to the CCS models of AMULET described in <ref> [8] </ref>. The formal semantics of Yellow and Green are defined by a specialised process algebra called APA (Asynchronous Process Algebra), which also operates at the micropipeline level: basic mi-cropipeline components and combinators are modelled by atomic components and combinators in APA (see x3 below).
Reference: [9] <author> J. Herath, Y. Yamaguchi, K. Toda, R. Mat-tingley, N. Saito, and T. Yuba. </author> <title> Comparison of Dataflow Computing Models. </title> <editor> In John A. Sharp, editor, </editor> <title> Data Flow Computing: Theory and Practice. </title> <publisher> Ablex, </publisher> <year> 1992. </year>
Reference-contexts: Apart from these primitives, nodes may also contain Visual Green sub-networks, or components from other Rainbow sub-languages, such as Textual Green or Yellow. In this way a mixed-view design description can be built up. The resulting networks are similar to static dataflow networks described in <ref> [9] </ref>, although in Green, the wires are stateless, and explicit buffering is used instead. 2 Simulate Analyse Verify APA Design Entry types value expressions Hardware Models Internal Representation Underlying Semantic Model Tools User Languages handshake algorithmic control-flow properties specification Yellow: Red: Blue: Green: structural data-flow compile visualise A textual dataflow description
Reference: [10] <author> C.A.R. Hoare. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice-Hall, </publisher> <year> 1985. </year>
Reference-contexts: In contrast, Yellow allows evolving descriptions to be constructed, using a control-flow style, similar in many respects to CSP <ref> [10] </ref> or Ada [7]; for example the basic call/accept communication primitives used are adaptations of those given in Ada. Again, other Rainbow components, such as Green procedures, can be instantiated. <p> It is similar to standard process algebras, such as CCS [13], CSP <ref> [10] </ref> or LOTOS [14], using some familiar process operators and with its semantics defined operationally using SOS-style transition rules. However, the composition operators have been designed to support bundled-data micropipeline communication | the communication primitives involved use an Ada-like rendezvous, and their semantics resembles the Ada semantics presented in [6].
Reference: [11] <author> H. Barringer, D.K. Fellows, G.D. Gough, and A. Williams. </author> <title> Rainbow: Towards a Hardware Description Framework for Micropipeline Designs. </title> <type> Draft technical report, </type> <institution> University of Manchester, </institution> <year> 1996. </year>
Reference-contexts: Again, other Rainbow components, such as Green procedures, can be instantiated. All languages support a common set of built-in types such as integers and booleans equipped with the usual operators, together with user-defined data, function and type expressions. Further details appear in <ref> [11] </ref>. 2.2 Rainbow Example: a Simple Processor We introduce Rainbow by presenting a simple example, which illustrates the different styles available for describing designs. We show how the styles can be combined so that each part of a design can be described in the most effective way. <p> Further details of APA and its role in providing the semantics for Rainbow appear in <ref> [11] </ref>. 4 Summary We have introduced the prototype Rainbow framework that supports mixed-view descriptions of asynchronous micropipeline designs. A uniform semantics for all Rainbow sub-languages is defined via APA, providing a straightforward definition of the behaviour of a design described using combinations of sub-language components.
Reference: [12] <author> J.S.H. van Gageldonk. </author> <title> The Asynchronous Move Machine: Verification using CCS. </title> <type> Master's thesis, </type> <institution> Eindhoven University of Technology, </institution> <year> 1994. </year>
Reference-contexts: We show how the styles can be combined so that each part of a design can be described in the most effective way. The example used 1 is a simple microprocessor unit (SMPU ), similar to the Move Machine <ref> [12] </ref>. Figure 2 shows the basic block structure of SMPU described in Visual Green.
Reference: [13] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <publisher> Prentice Hall, </publisher> <address> Hemel Hempstead, Herts, Eng-land, </address> <year> 1989. </year>
Reference-contexts: It is similar to standard process algebras, such as CCS <ref> [13] </ref>, CSP [10] or LOTOS [14], using some familiar process operators and with its semantics defined operationally using SOS-style transition rules.
Reference: [14] <author> T. Bolognesi and E. Brinksma. </author> <title> Introduction to the ISO Specification Language LO-TOS. </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> 14(1) </volume> <pages> 25-59, </pages> <year> 1987. </year>
Reference-contexts: It is similar to standard process algebras, such as CCS [13], CSP [10] or LOTOS <ref> [14] </ref>, using some familiar process operators and with its semantics defined operationally using SOS-style transition rules. However, the composition operators have been designed to support bundled-data micropipeline communication | the communication primitives involved use an Ada-like rendezvous, and their semantics resembles the Ada semantics presented in [6].
References-found: 14

