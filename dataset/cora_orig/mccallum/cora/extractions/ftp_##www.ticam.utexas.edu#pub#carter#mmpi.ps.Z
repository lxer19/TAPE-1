URL: ftp://www.ticam.utexas.edu/pub/carter/mmpi.ps.Z
Refering-URL: 
Root-URL: 
Title: MMPI: Asynchronous Message Management for the Message-Passing Interface  
Author: Harold Carter Edwards 
Date: 96-44  
Address: Austin, Texas, 78712  
Affiliation: Texas Institute for Computational and Applied Mathematics The University of Texas at Austin  
Pubnum: TICAM Report  
Abstract: The Message-Passing Interface (MPI) Standard defines an asynchronous message passing functionality through primitive nonblocking send and receive operations. Applications which use asynchronous message passing within MPI must assume responsibility for managing the MPI nonblocking send and receive primitives. For an application with dynamic interprocessor communication requirements, asynchronous message management is a complex task. The asynchronous message Management for MPI (MMPI) library described in this report has been developed to simplify dynamic asynchronous message passing with MPI. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Intel Corporation. </author> <title> Paragon(TM) System C Calls Reference Manual, </title> <note> 1995. http://www.ssd.intel.com/pubs.html. </note>
Reference-contexts: TICAM 2 November 4, 1996 1.3 Related Message Management Capabilities Other message passing libraries support handlers for asynchronous message passing. Two such libraries are: * the NX library <ref> [1] </ref> and * active messages [4]. This is by no means intended to be a comprehensive list of communication libraries with asynchronous message management. The hrecv and hrecvx routines of the NX library post an asynchronous receive to the run-time environment with an attached handler.
Reference: [2] <author> H. Carter Edwards. </author> <title> A Consistent Extension of the Message-Passing Interface (MPI) for Nonblocking Communication Handlers. </title> <type> TICAM Report 96-11, </type> <institution> Texas Institute for Computational and Applied Mathematics, The University of Texas, Austin, TX, </institution> <year> 1996. </year>
Reference-contexts: In the early stages of the MPI-2 effort this functionality appeared in the "mpi-1sided" group. One contribution to this debate was the TICAM report "A Consistent Extension of the Message-Passing Interface (MPI) for Nonblocking Communication Handlers" <ref> [2] </ref>. The handler discussion was subsequently moved to the "mpi-external" group of the MPI-2 effort where the integration of MPI, handlers, and threads are addressed. Note again that the MMPI library does not use threads, so the integration of handlers and threads is not an issue here.
Reference: [3] <author> Message-Passing Interface Forum. </author> <title> MPI: A Message-Passing Interface Standard, </title> <month> June </month> <year> 1995. </year> <note> http://www.mcs.anl.gov/mpi/index.html. </note>
Reference-contexts: However, it is assumed that the reader reader is already familiar with the Message-Passing Interface Standard, especially those sections regarding asynchronous message passing. 1.1 Asynchronous Messages Passing with MPI The Message-Passing Interface defines primitive nonblocking send and receive operations (see Section 3.7 of the MPI Standard <ref> [3] </ref>). A simple MPI nonblocking communication operation is initiated with a start call and is terminated with a complete call. Other computations may occur between these MPI calls, thus overlapping communications and computations. <p> To avoid such conflicts the MMPI library provides a tag management facility. 1.4.2 Request Management The Message-Passing Interface Standard defines an asynchronous message passing capability with primitives for nonblocking point-to-point sends and receives (Section 3.7 of <ref> [3] </ref>). Within MPI each asynchronous communication operation is identified with a request, an MPI opaque data object. The MMPI library allows an application to associate a request handler with an MPI request. <p> The MMPI request manager assumes responsibility for completing the MPI request's send or receive operation and invoking the application's associated request handler. 1.4.3 Packed Buffer Management Messages with compound or varying contents are most easily managed through the MPI pack and unpack routines (Section 3.13 of <ref> [3] </ref>). Multiple calls to these MPI routines are used to pack and unpack compound messages. Multiple calls to the MPI pack and unpack routines require an adequately sized buffer (possibly dynamically TICAM 4 November 4, 1996 allocated and reallocated) and a consistent set of calling arguments. <p> MPI Comm comm , /* IN OUT */ int * tag ); /* OUT */ int MMPI Tag rel local ( MPI Comm comm , /* IN OUT */ int * tag ); /* OUT */ TICAM 7 November 4, 1996 3 Request Management MPI nonblocking communications (Section 3.7 of <ref> [3] </ref>) support asynchronous message passing. Each MPI asynchronous message requires two actions: 1) start the asynchronous message request (send or receive) and 2) complete the request. An asynchronous message request which has been started but has not yet completed is termed an active request. <p> request ); /* Restart the request */ D-&gt;request = *request ; /* Insure consistency */ 15 MMPI_Serve_handler (); /* Possible recursive call */ return R ; - TICAM 12 November 4, 1996 4 Packed Buffer Management MPI defines several routines for packing and unpacking messages into buffers (Section 3.13 of <ref> [3] </ref>). These buffers are then sent or received using the MPI PACKED data type specification. Allocating, packing, and unpacking these buffers can become tedious when numerous messages are packed into the same buffer.
Reference: [4] <author> Alan Michael Mainwaring. </author> <title> Active Message Applications Programming Interface and Communication Subsystem Organization. </title> <type> Technical report, </type> <institution> Computer Science Division, University of California at Berkeley, </institution> <year> 1995. </year> <note> http://now.cs.berkeley.edu/AM/active messages.html. [5] et al. </note> <author> Robert van de Geijn. </author> <title> Parallel Linear Algebra Package (PLAPACK). </title> <note> http://www.cs.utexas.edu/users/rvdg/plapack/index.html. TICAM 31 November 4, </note> <year> 1996 </year>
Reference-contexts: TICAM 2 November 4, 1996 1.3 Related Message Management Capabilities Other message passing libraries support handlers for asynchronous message passing. Two such libraries are: * the NX library [1] and * active messages <ref> [4] </ref>. This is by no means intended to be a comprehensive list of communication libraries with asynchronous message management. The hrecv and hrecvx routines of the NX library post an asynchronous receive to the run-time environment with an attached handler. <p> In contrast, an MPI based application must explicitly check each asynchronous receive operations to guarantee that a message has actually been received. Active messages <ref> [4] </ref> also allow the application to associate routines with received messages. As with the NX run-time environment, the active message run-time environment automatically invokes the handler upon receipt of a message.
References-found: 4

