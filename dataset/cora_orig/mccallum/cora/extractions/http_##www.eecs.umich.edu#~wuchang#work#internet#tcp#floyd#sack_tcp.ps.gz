URL: http://www.eecs.umich.edu/~wuchang/work/internet/tcp/floyd/sack_tcp.ps.gz
Refering-URL: http://www.eecs.umich.edu/~wuchang/work/internet/
Root-URL: http://www.cs.umich.edu
Email: kfall@ee.lbl.gov, floyd@ee.lbl.gov  
Title: Simulation-based Comparisons of Tahoe, Reno, and SACK TCP  
Author: Kevin Fall and Sally Floyd 
Address: One Cyclotron Road, Berkeley, CA 94720  
Affiliation: Lawrence Berkeley National Laboratory  
Abstract: This paper uses simulations to explore the benefits of adding selective acknowledgments (SACK) and selective repeat to TCP. We compare Tahoe and Reno TCP, the two most common reference implementations for TCP, with two modified versions of Reno TCP. The first version is New-Reno TCP, a modified version of TCP without SACK that avoids some of Reno TCP's performance problems when multiple packets are dropped from a window of data. The second version is SACK TCP, a conservative extension of Reno TCP modified to use the SACK option being proposed in the Internet Engineering Task Force (IETF). We describe the congestion control algorithms in our simulated implementation of SACK TCP and show that while selective acknowledgments are not required to solve Reno TCP's performance problems when multiple packets are dropped, the absence of selective acknowledgments does impose limits to TCP's ultimate performance. In particular, we show that without selective acknowledgments, TCP implementations are constrained to either retransmit at most one dropped packet per round-trip time, or to retransmit packets that might have already been successfully delivered. 
Abstract-found: 1
Intro-found: 1
Reference: [BBJ92] <author> D. Borman, R. Braden, and V. Jacobson. </author> <title> TCP Extensions for High Performance,. Request for Comments (Proposed Standard) RFC 1323, </title> <institution> Internet Engineering Task Force, </institution> <month> May </month> <year> 1992. </year> <note> (Obsoletes RFC1185). </note>
Reference-contexts: DE-AC03-76SF00098. considerable savings can be achieved. Several transport protocols have provided for selective acknowledgment (SACK) of received data. These include NETBLT [CLZ87], XTP [SDW92], RDP [HSV84] and VMTP [Che88]. The first proposals for adding SACK to TCP [BJ88, BJZ90] were later removed from the TCP RFCs (Request For Comments) <ref> [BBJ92] </ref> pending further research. The current proposal for adding SACK to TCP is given in [MMFR96]. We use simulations to show how the SACK option defined in [MMFR96] can be of substantial benefit relative to TCP without SACK. <p> In these simulations each SACK option is assumed to have room for three SACK blocks. When the SACK option is used with the Timestamp option specified for TCP Extensions for High Performance <ref> [BBJ92] </ref>, then the SACK option has room for only three SACK blocks [MMFR96].
Reference: [BJ88] <author> R. Braden and V. Jacobson. </author> <title> TCP extensions for long-delay paths,. Request for Comments (Experimental) RFC 1072, </title> <institution> Internet Engineering Task Force, </institution> <month> October </month> <year> 1988. </year>
Reference-contexts: Department of Energy under Contract No. DE-AC03-76SF00098. considerable savings can be achieved. Several transport protocols have provided for selective acknowledgment (SACK) of received data. These include NETBLT [CLZ87], XTP [SDW92], RDP [HSV84] and VMTP [Che88]. The first proposals for adding SACK to TCP <ref> [BJ88, BJZ90] </ref> were later removed from the TCP RFCs (Request For Comments) [BBJ92] pending further research. The current proposal for adding SACK to TCP is given in [MMFR96]. We use simulations to show how the SACK option defined in [MMFR96] can be of substantial benefit relative to TCP without SACK.
Reference: [BJZ90] <author> R. Braden, V. Jacobson, and L. Zhang. </author> <title> TCP Extension for High-Speed Paths,. Request for Comments (Experimental) RFC 1185, </title> <institution> Internet Engineering Task Force, </institution> <month> October </month> <year> 1990. </year> <note> (Obsoleted by RFC1323). 9 The earlier versions of this note are available at URL ftp://ftp.ee.lbl.gov/papers/sacks v0.ps.Z (December 1995) and URL ftp://ftp.ee.lbl.gov/papers/sacks v1.ps.Z (March 1996). </note> <editor> While the results are essentially unchanged, </editor> <title> the earlier results used non-standard TCP implementations where the sender's maximum congestion window is assumed to be less than the receiver's advertised window. </title>
Reference-contexts: Department of Energy under Contract No. DE-AC03-76SF00098. considerable savings can be achieved. Several transport protocols have provided for selective acknowledgment (SACK) of received data. These include NETBLT [CLZ87], XTP [SDW92], RDP [HSV84] and VMTP [Che88]. The first proposals for adding SACK to TCP <ref> [BJ88, BJZ90] </ref> were later removed from the TCP RFCs (Request For Comments) [BBJ92] pending further research. The current proposal for adding SACK to TCP is given in [MMFR96]. We use simulations to show how the SACK option defined in [MMFR96] can be of substantial benefit relative to TCP without SACK.
Reference: [BPSK96] <author> H. Balakrishnan, V.N. Padmanabhan, S. Seshan, and R.H. Katz. </author> <title> A Comparison of Mechanisms for Improving TCP Performance over Wireless Links,. </title> <booktitle> SIG-COMM Symposium on Communications Architectures and Protocols, </booktitle> <month> Aug. </month> <year> 1996. </year> <note> to appear. </note>
Reference-contexts: and an unnecessary retransmit timeout. 8 Future directions for selective ac knowledgments The addition of selective acknowledgments allows additional improvements to TCP, in addition to improving the congestion control behavior when multiple packets are dropped in one window of data. [MM96] explores TCP congestion control algorithms for TCP with SACK. <ref> [BPSK96] </ref> shows that SACK and explicit wireless loss notification both result in substantial performance improvements for TCP over lossy links. Sev eral researchers are exploring the use of SACK, coupled with the explicit notification of non-congestion-related losses, for lossy environments such as satellite links.
Reference: [Bra94] <author> R. Braden. </author> <title> T/TCP TCP Extensions for Transactions Functional Specification,. Request for Comments (Experimental) RFC 1644, </title> <institution> Internet Engineering Task Force, </institution> <month> July </month> <year> 1994. </year>
Reference-contexts: If the SACK option were to be used with both the Timestamp option and with T/TCP (TCP Extensions for Transactions) <ref> [Bra94] </ref>, the TCP option space would have room for only two SACK blocks. 1 The 1990 Sack TCP implementation on our previous simulator is from Steven McCanne and Sally Floyd, and does not conform to the formats in [MMFR96].
Reference: [CH95] <author> D.D. Clark and J. Hoe. </author> <title> Start-up Dynamics of TCP's Congestion Control and Avoidance Schemes,. </title> <type> Technical report, </type> <month> Jun. </month> <year> 1995. </year> <title> Presentation to the Internet End-to-End Research Group, cited for acknowledgement purposes only. </title>
Reference-contexts: The New-Reno TCP in this paper includes a small change to the Reno algorithm at the sender that eliminates Reno's wait for a retransmit timer when multiple packets are lost from a window <ref> [Hoe95, CH95] </ref>. The change concerns the sender's behavior during Fast Recovery when a partial ACK is received that acknowledges some but not all of the packets that were outstanding at the start of that Fast Recovery period.
Reference: [Che88] <author> D. Cheriton. VMTP: </author> <title> Versatile Message Transaction Protocol: Protocol specification,. Request for Comments (Experimental) RFC 1045, </title> <institution> Internet Engineering Task Force, </institution> <month> February </month> <year> 1988. </year>
Reference-contexts: Department of Energy under Contract No. DE-AC03-76SF00098. considerable savings can be achieved. Several transport protocols have provided for selective acknowledgment (SACK) of received data. These include NETBLT [CLZ87], XTP [SDW92], RDP [HSV84] and VMTP <ref> [Che88] </ref>. The first proposals for adding SACK to TCP [BJ88, BJZ90] were later removed from the TCP RFCs (Request For Comments) [BBJ92] pending further research. The current proposal for adding SACK to TCP is given in [MMFR96].
Reference: [CLZ87] <author> D. Clark, M. Lambert, and L. Zhang. NETBLT: </author> <title> A bulk data transfer protocol,. Request for Comments (Experimental) RFC 998, </title> <institution> Internet Engineering Task Force, </institution> <month> March </month> <year> 1987. </year> <note> (Obsoletes RFC0969). </note>
Reference-contexts: Department of Energy under Contract No. DE-AC03-76SF00098. considerable savings can be achieved. Several transport protocols have provided for selective acknowledgment (SACK) of received data. These include NETBLT <ref> [CLZ87] </ref>, XTP [SDW92], RDP [HSV84] and VMTP [Che88]. The first proposals for adding SACK to TCP [BJ88, BJZ90] were later removed from the TCP RFCs (Request For Comments) [BBJ92] pending further research. The current proposal for adding SACK to TCP is given in [MMFR96].
Reference: [FJ93] <author> Sally Floyd and Van Jacobson. </author> <title> Random Early Detection Gateways for Congestion Avoidance,. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> 1(4):397413, </volume> <month> Aug. </month> <year> 1993. </year> <note> URL http://www-nrg.ee.lbl.gov/nrg-papers.html. </note>
Reference-contexts: These simulations use drop-tail gateways with small buffers. These are not intended to be realistic scenarios, or realistic values for the buffer size. They are intended as a simple scenario for illustrating TCP's congestion control algorithms. Simulations with RED (Random Early Detection) gateways <ref> [FJ93] </ref> would in general avoid the bursts of packet drops characteristic of drop-tail gateways. Ns [MF95] is based on LBNL's previous simulator tcpsim, which was in turn based on the REAL simulator [Kes88].
Reference: [Flo95] <author> Sally Floyd. </author> <title> Simulator Tests,. </title> <type> Technical report, </type> <month> Jul. </month> <year> 1995. </year> <note> URL http://www-nrg.ee.lbl.gov/nrg-papers.html. </note>
Reference-contexts: The bursts of packets upon exiting Fast Recovery with New-Reno TCP are illustrated in Section 6 in the simulations with three and four packet drops. Bursts of packets upon exiting Fast Recovery with Reno TCP are illustrated in <ref> [Flo95] </ref>. [Hoe95] recommends an additional change to TCP's Fast Recovery algorithms. She suggests the data sender send a new packet for every two dup ACKs received during Fast Recovery, to keep the flywheel of ACK and data packets going. <p> Ns [MF95] is based on LBNL's previous simulator tcpsim, which was in turn based on the REAL simulator [Kes88]. The simulator does not use production TCP code, and does not pretend to reproduce the exact behavior of specific implementations of TCP <ref> [Flo95] </ref>. Instead, the simulator is intended to support exploration of underlying TCP congestion and error control algorithms, including Slow-Start, Congestion Avoidance, Fast Retransmit, and Fast Recovery. The simulation results contained in this report can be recreated with the test-sack script supplied with ns.
Reference: [Flo96a] <author> S. Floyd. </author> <title> Issues of TCP with SACK,. </title> <type> Technical report, </type> <month> Mar. </month> <year> 1996. </year> <note> URL ftp://ftp.ee.lbl.gov/papers/issues sa.ps.Z. </note>
Reference-contexts: This is not implemented in New-Reno because we wanted to consider the minimal set of changes to Reno needed to avoid unnecessary retransmit timeouts. 5 SACK TCP The SACK TCP implementation in this paper, called Sack1 in our simulator, is also discussed in <ref> [Flo96b, Flo96a] </ref>. 1 The SACK option follows the format in [MMFR96]. From [MMFR96], the SACK option field contains a number of SACK blocks, where each SACK block reports a non-contiguous set of data that has been received and queued.
Reference: [Flo96b] <author> S. Floyd. </author> <title> SACK TCP: The sender's congestion control algorithms for the implementation sack1 in LBNL's ns simulator (viewgraphs).,. </title> <type> Technical report, </type> <month> Mar. </month> <year> 1996. </year> <title> Presentation to the TCP Large Windows Working Group of the IETF, </title> <address> March 7, </address> <year> 1996. </year> <note> URL ftp://ftp.ee.lbl.gov/talks/sacks.ps. </note>
Reference-contexts: This is not implemented in New-Reno because we wanted to consider the minimal set of changes to Reno needed to avoid unnecessary retransmit timeouts. 5 SACK TCP The SACK TCP implementation in this paper, called Sack1 in our simulator, is also discussed in <ref> [Flo96b, Flo96a] </ref>. 1 The SACK option follows the format in [MMFR96]. From [MMFR96], the SACK option field contains a number of SACK blocks, where each SACK block reports a non-contiguous set of data that has been received and queued.
Reference: [Hoe95] <author> J. Hoe. </author> <title> Start-up Dynamics of TCP's Con--gestion Control and Avoidance Schemes,. </title> <month> Jun. </month> <year> 1995. </year> <type> Master's thesis, </type> <institution> MIT. </institution>
Reference-contexts: Not all of Reno's performance problems are a necessary consequence of the absence of SACK. To show why, we implemented a variant of the Reno algorithms in our simulator, called New-Reno. Using a suggestion from Janey Hoe <ref> [Hoe95, Hoe96] </ref>, New-Reno avoids many of the retransmit timeouts of Reno without requiring SACK. Nevertheless, New-Reno does not perform as well as TCP with SACK when a large number of packets are dropped from a window of data. <p> The New-Reno TCP in this paper includes a small change to the Reno algorithm at the sender that eliminates Reno's wait for a retransmit timer when multiple packets are lost from a window <ref> [Hoe95, CH95] </ref>. The change concerns the sender's behavior during Fast Recovery when a partial ACK is received that acknowledges some but not all of the packets that were outstanding at the start of that Fast Recovery period. <p> The bursts of packets upon exiting Fast Recovery with New-Reno TCP are illustrated in Section 6 in the simulations with three and four packet drops. Bursts of packets upon exiting Fast Recovery with Reno TCP are illustrated in [Flo95]. <ref> [Hoe95] </ref> recommends an additional change to TCP's Fast Recovery algorithms. She suggests the data sender send a new packet for every two dup ACKs received during Fast Recovery, to keep the flywheel of ACK and data packets going.
Reference: [Hoe96] <author> J. Hoe. </author> <title> Improving the Start-up Behavior of a Congestion Control Scheme for TCP,. </title> <booktitle> SIGCOMM Symposium on Communications Architectures and Protocols, </booktitle> <month> Aug. </month> <year> 1996. </year> <note> to appear. </note>
Reference-contexts: Not all of Reno's performance problems are a necessary consequence of the absence of SACK. To show why, we implemented a variant of the Reno algorithms in our simulator, called New-Reno. Using a suggestion from Janey Hoe <ref> [Hoe95, Hoe96] </ref>, New-Reno avoids many of the retransmit timeouts of Reno without requiring SACK. Nevertheless, New-Reno does not perform as well as TCP with SACK when a large number of packets are dropped from a window of data.
Reference: [HSV84] <author> R. Hinden, J. Sax, and D. Velten. </author> <title> Reliable Data Protocol,. Request for Comments (Experimental) RFC 908, </title> <institution> Internet Engineering Task Force, </institution> <month> July </month> <year> 1984. </year> <note> (Updated by RFC1151). </note>
Reference-contexts: Department of Energy under Contract No. DE-AC03-76SF00098. considerable savings can be achieved. Several transport protocols have provided for selective acknowledgment (SACK) of received data. These include NETBLT [CLZ87], XTP [SDW92], RDP <ref> [HSV84] </ref> and VMTP [Che88]. The first proposals for adding SACK to TCP [BJ88, BJZ90] were later removed from the TCP RFCs (Request For Comments) [BBJ92] pending further research. The current proposal for adding SACK to TCP is given in [MMFR96].
Reference: [Jac88] <author> V. Jacobson. </author> <title> Congestion Avoidance and Control,. </title> <booktitle> SIGCOMM Symposium on Communications Architectures and Protocols, </booktitle> <pages> pages 314329, </pages> <year> 1988. </year> <note> An updated version is available via ftp://ftp.ee.lbl.gov/papers/congavoid.ps.Z. </note>
Reference-contexts: These TCPs did little to minimize network congestion. The Tahoe TCP implementation added a number of new algorithms and refinements to earlier implementations. The new algorithms include Slow-Start, Congestion Avoidance, and Fast Retransmit <ref> [Jac88] </ref>. The re finements include a modification to the round-trip time estimator used to set retransmission timeout values. All modifications have been described elsewhere [Jac88, Ste94]. The Fast Retransmit algorithm is of special interest in this paper because it is modified in subsequent versions of TCP. <p> The Tahoe TCP implementation added a number of new algorithms and refinements to earlier implementations. The new algorithms include Slow-Start, Congestion Avoidance, and Fast Retransmit [Jac88]. The re finements include a modification to the round-trip time estimator used to set retransmission timeout values. All modifications have been described elsewhere <ref> [Jac88, Ste94] </ref>. The Fast Retransmit algorithm is of special interest in this paper because it is modified in subsequent versions of TCP.
Reference: [Jac90] <author> V. Jacobson. </author> <title> Modified TCP Congestion Avoidance Algorithm,. </title> <type> Technical report, </type> <month> 30 Apr. </month> <year> 1990. </year> <note> Email to the end2end-interest Mailing List, URL ftp://ftp.ee.lbl.gov/email/vanj.90apr30.txt. </note>
Reference-contexts: infers that a packet has been lost and retransmits the packet without waiting for a retransmission timer to expire, leading to higher channel utilization and connection throughput. 3 Reno TCP The Reno TCP implementation retained the enhancements incorporated into Tahoe, but modified the Fast Retransmit operation to include Fast Recovery <ref> [Jac90] </ref>. The new algorithm prevents the communication path (pipe) from going empty after Fast Retransmit, thereby avoiding the need to Slow-Start to re-fill it after a single packet loss. Fast Recovery operates by assuming each dup ACK received represents a single packet having left the pipe.
Reference: [Kes88] <author> S. Keshav. </author> <title> REAL: a Network Simulator,. </title> <type> Technical Report 88/472, </type> <institution> University of California Berkeley, Berkeley, Califor-nia, </institution> <year> 1988. </year>
Reference-contexts: Simulations with RED (Random Early Detection) gateways [FJ93] would in general avoid the bursts of packet drops characteristic of drop-tail gateways. Ns [MF95] is based on LBNL's previous simulator tcpsim, which was in turn based on the REAL simulator <ref> [Kes88] </ref>. The simulator does not use production TCP code, and does not pretend to reproduce the exact behavior of specific implementations of TCP [Flo95]. Instead, the simulator is intended to support exploration of underlying TCP congestion and error control algorithms, including Slow-Start, Congestion Avoidance, Fast Retransmit, and Fast Recovery.
Reference: [Kes94] <author> S. Keshav. </author> <title> Packet-Pair Flow Control,. </title> <type> Technical report, </type> <month> Nov. </month> <year> 1994. </year> <title> Presentation to the Internet End-to-End Research Group, cited for acknowledgement purposes only. </title>
Reference-contexts: The maxburst parameter, which limits the number of packets that can be sent in response to a single incoming ACK packet, is experimental, and is not necessarily recommended for SACK implementations. 3 There are a number of other proposals for TCP congestion control algorithms using selective acknowledgments <ref> [Kes94, MM96] </ref>.
Reference: [MF95] <author> Steven McCanne and Sally Floyd. </author> <title> NS (Network Simulator),, </title> <note> 1995. URL http://www-nrg.ee.lbl.gov/ns. </note>
Reference-contexts: The pattern of packet drops is changed simply by changing the number of packets sent by the second and third connections. Readers interested in the exact details of the simulation set-up are referred to the files test-sack and sack.tcl in our simulator ns <ref> [MF95] </ref>. The granularity of the TCP clock is set to 100 msec, giving round-trip time measurements accurate to only the nearest 100 msec. These simulations use drop-tail gateways with small buffers. These are not intended to be realistic scenarios, or realistic values for the buffer size. <p> They are intended as a simple scenario for illustrating TCP's congestion control algorithms. Simulations with RED (Random Early Detection) gateways [FJ93] would in general avoid the bursts of packet drops characteristic of drop-tail gateways. Ns <ref> [MF95] </ref> is based on LBNL's previous simulator tcpsim, which was in turn based on the REAL simulator [Kes88]. The simulator does not use production TCP code, and does not pretend to reproduce the exact behavior of specific implementations of TCP [Flo95].
Reference: [MM96] <author> Matthew Mathis and Jamshid Mahdavi. </author> <title> Forward Acknowledgement: Refining TCP Congestion Control,. </title> <booktitle> SIGCOMM Symposium on Communications Architectures and Protocols, </booktitle> <month> Aug. </month> <year> 1996. </year> <note> to appear. </note>
Reference-contexts: The maxburst parameter, which limits the number of packets that can be sent in response to a single incoming ACK packet, is experimental, and is not necessarily recommended for SACK implementations. 3 There are a number of other proposals for TCP congestion control algorithms using selective acknowledgments <ref> [Kes94, MM96] </ref>. <p> are likely to include Reno TCP with multiple packet drops and an unnecessary retransmit timeout. 8 Future directions for selective ac knowledgments The addition of selective acknowledgments allows additional improvements to TCP, in addition to improving the congestion control behavior when multiple packets are dropped in one window of data. <ref> [MM96] </ref> explores TCP congestion control algorithms for TCP with SACK. [BPSK96] shows that SACK and explicit wireless loss notification both result in substantial performance improvements for TCP over lossy links.
Reference: [MMFR96] <author> Matthew Mathis, Jamshid Mahdavi, Sally Floyd, and Allyn Romanow. </author> <title> TCP Selective Acknowledgment Options,. (Internet draft, </title> <booktitle> work in progress), </booktitle> <year> 1996. </year>
Reference-contexts: These include NETBLT [CLZ87], XTP [SDW92], RDP [HSV84] and VMTP [Che88]. The first proposals for adding SACK to TCP [BJ88, BJZ90] were later removed from the TCP RFCs (Request For Comments) [BBJ92] pending further research. The current proposal for adding SACK to TCP is given in <ref> [MMFR96] </ref>. We use simulations to show how the SACK option defined in [MMFR96] can be of substantial benefit relative to TCP without SACK. The simulations are designed to highlight performance differences between TCP with and without SACK. <p> The first proposals for adding SACK to TCP [BJ88, BJZ90] were later removed from the TCP RFCs (Request For Comments) [BBJ92] pending further research. The current proposal for adding SACK to TCP is given in <ref> [MMFR96] </ref>. We use simulations to show how the SACK option defined in [MMFR96] can be of substantial benefit relative to TCP without SACK. The simulations are designed to highlight performance differences between TCP with and without SACK. <p> implemented in New-Reno because we wanted to consider the minimal set of changes to Reno needed to avoid unnecessary retransmit timeouts. 5 SACK TCP The SACK TCP implementation in this paper, called Sack1 in our simulator, is also discussed in [Flo96b, Flo96a]. 1 The SACK option follows the format in <ref> [MMFR96] </ref>. From [MMFR96], the SACK option field contains a number of SACK blocks, where each SACK block reports a non-contiguous set of data that has been received and queued. <p> New-Reno because we wanted to consider the minimal set of changes to Reno needed to avoid unnecessary retransmit timeouts. 5 SACK TCP The SACK TCP implementation in this paper, called Sack1 in our simulator, is also discussed in [Flo96b, Flo96a]. 1 The SACK option follows the format in <ref> [MMFR96] </ref>. From [MMFR96], the SACK option field contains a number of SACK blocks, where each SACK block reports a non-contiguous set of data that has been received and queued. <p> The first block in a SACK option is required to report the data receiver's most recently received segment, and the additional SACK blocks repeat the most recently reported SACK blocks <ref> [MMFR96] </ref>. In these simulations each SACK option is assumed to have room for three SACK blocks. When the SACK option is used with the Timestamp option specified for TCP Extensions for High Performance [BBJ92], then the SACK option has room for only three SACK blocks [MMFR96]. <p> most recently reported SACK blocks <ref> [MMFR96] </ref>. In these simulations each SACK option is assumed to have room for three SACK blocks. When the SACK option is used with the Timestamp option specified for TCP Extensions for High Performance [BBJ92], then the SACK option has room for only three SACK blocks [MMFR96]. <p> with both the Timestamp option and with T/TCP (TCP Extensions for Transactions) [Bra94], the TCP option space would have room for only two SACK blocks. 1 The 1990 Sack TCP implementation on our previous simulator is from Steven McCanne and Sally Floyd, and does not conform to the formats in <ref> [MMFR96] </ref>. The new Sack1 implementation contains major contributions from Kevin Fall, Jamshid Mahdavi, and Matt Mathis. <p> We assume that the addition of selective acknowledgments to TCP will open the way to further developments of the TCP protocol. 10 Acknowledgements This document 9 was written in support of <ref> [MMFR96] </ref>, the current proposal for adding a SACK option to TCP, and draws from discussions about SACK and TCP with a wide range of people.
Reference: [SDW92] <author> W. T. Strayer, B. Dempsey, and A. Weaver. XTP: </author> <title> The Xpress Transfer Protocol. </title> <publisher> Addi-son Wesley, </publisher> <address> Reading, MA, </address> <year> 1992. </year>
Reference-contexts: Department of Energy under Contract No. DE-AC03-76SF00098. considerable savings can be achieved. Several transport protocols have provided for selective acknowledgment (SACK) of received data. These include NETBLT [CLZ87], XTP <ref> [SDW92] </ref>, RDP [HSV84] and VMTP [Che88]. The first proposals for adding SACK to TCP [BJ88, BJZ90] were later removed from the TCP RFCs (Request For Comments) [BBJ92] pending further research. The current proposal for adding SACK to TCP is given in [MMFR96].
Reference: [Ste94] <author> W. Richard Stevens. </author> <title> TCP/IP Illustrated, Volume 1: The Protocols. </title> <publisher> Addison Wes-ley, </publisher> <year> 1994. </year>
Reference-contexts: The Tahoe TCP implementation added a number of new algorithms and refinements to earlier implementations. The new algorithms include Slow-Start, Congestion Avoidance, and Fast Retransmit [Jac88]. The re finements include a modification to the round-trip time estimator used to set retransmission timeout values. All modifications have been described elsewhere <ref> [Jac88, Ste94] </ref>. The Fast Retransmit algorithm is of special interest in this paper because it is modified in subsequent versions of TCP.
References-found: 24

