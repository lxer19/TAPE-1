URL: http://www.cs.wisc.edu/~jignesh/papers/spjoin.ps
Refering-URL: http://www.cs.wisc.edu/~jignesh/jignesh.html
Root-URL: 
Email: jignesh@cs.wisc.edu  dewitt@cs.wisc.edu  
Title: Partition Based Spatial-Merge Join  
Author: Jignesh M. Patel David J. DeWitt 
Address: Wisconsin, Madison  Wisconsin, Madison  
Affiliation: Computer Sciences Department, University of  Computer Sciences Department, University of  
Date: 1996 1  
Note: To appear in SIGMOD  
Abstract: This paper describes PBSM (Partition Based Spatial-Merge), a new algorithm for performing spatial join operation. This algorithm is especially effective when neither of the inputs to the join have an index on the joining attribute. Such a situation could arise if both inputs to the join are intermediate results in a complex query, or in a parallel environment where the inputs must be dynamically redistributed. The PBSM algorithm partitions the inputs into manageable chunks, and joins them using a computational geometry based plane-sweeping technique. This paper also presents a performance study comparing the the traditional indexed nested loops join algorithm, a spatial join algorithm based on joining spatial indices, and the PBSM algorithm. These comparisons are based on complete implementations of these algorithms in Paradise, a database system for handling GIS applications. Using real data sets, the performance study examines the behavior of these spatial join algorithms in a variety of situations, including the cases when both, one, or none of the inputs to the join have an suitable index. The study also examines the effect of clustering the join inputs on the performance of these join algorithms. The performance comparisons demonstrates the feasibility, and applicability of the PBSM join algorithm. 
Abstract-found: 1
Intro-found: 1
Reference: [Arc95] <author> ESRI, Redlands, </author> <title> CA. ARC/INFO: The World's GIS. An ESRI White Paper, </title> <month> March </month> <year> 1995. </year>
Reference-contexts: In- creasingly, a database system has been employed to meet these requirements. Examples of commercial database systems that have been used for these applications are ARC/INFO <ref> [Arc95] </ref>, Intergraph's MGE [Cor95], and Illustra [Ube94]). <p> To the best of our knowledge, most commercial spatial database systems do not transform the approximations of spatial objects into another domain (for example, ARC/INFO <ref> [Arc95] </ref>, and Illustra [Ube94]). The remainder of this section is organized as follows. First the index nested loops and the R-tree based join algorithms are described.
Reference: [Ben75] <author> J. L. Bentley. </author> <title> Multidimensional Binary Search Trees Used for Associative Searching. </title> <journal> In Communication of the ACM, </journal> <volume> volume 18(9), </volume> <month> September </month> <year> 1975. </year>
Reference-contexts: The algorithm for building the spatial join index requires grid files for indexing the spatial data, and uses these grid files to compute the spatial join index. Grid files [NHS84] and kd-trees <ref> [Ben75, Ben79] </ref> have also been employed for evaluating multi-attribute joins in the relational domain [KHT89, HNKT90, BHF93]. These methods can also be used for evaluating the filter step by storing the bounding box of the spatial objects as points in a higher dimension [BHF93].
Reference: [Ben79] <author> J. L. Bentley. </author> <title> Multidimensional Binary Search Trees in Database Applications. </title> <journal> In IEEE Transactions on Software Engineering, </journal> <volume> volume 5(4), </volume> <year> 1979. </year>
Reference-contexts: The algorithm for building the spatial join index requires grid files for indexing the spatial data, and uses these grid files to compute the spatial join index. Grid files [NHS84] and kd-trees <ref> [Ben75, Ben79] </ref> have also been employed for evaluating multi-attribute joins in the relational domain [KHT89, HNKT90, BHF93]. These methods can also be used for evaluating the filter step by storing the bounding box of the spatial objects as points in a higher dimension [BHF93].
Reference: [BHF93] <author> L. Becker, K. Hinrichs, and U. Finke. </author> <title> A New Algorithm for Computing Joins With Grid Files. </title> <journal> In IEEE Transactions on Knowledge and Data Engineering, </journal> <year> 1993. </year>
Reference-contexts: Numerous algorithms have been proposed to execute the filter step of a spatial join. Many of the earlier algorithms are based on transforming an approximation of a spatial object into another domain (e.g. a 1-dimensional domain), and performing the filter step in the new domain <ref> [OM88, Ore86, BHF93] </ref>. The drawback of this approach is that in the new domain some spatial proximity information is lost, making the algorithms complex and less efficient. <p> The algorithm for building the spatial join index requires grid files for indexing the spatial data, and uses these grid files to compute the spatial join index. Grid files [NHS84] and kd-trees [Ben75, Ben79] have also been employed for evaluating multi-attribute joins in the relational domain <ref> [KHT89, HNKT90, BHF93] </ref>. These methods can also be used for evaluating the filter step by storing the bounding box of the spatial objects as points in a higher dimension [BHF93]. <p> Grid files [NHS84] and kd-trees [Ben75, Ben79] have also been employed for evaluating multi-attribute joins in the relational domain [KHT89, HNKT90, BHF93]. These methods can also be used for evaluating the filter step by storing the bounding box of the spatial objects as points in a higher dimension <ref> [BHF93] </ref>. Recently, spatial index structures like R-trees [Gut84], R+-trees [CFR87], R*-trees [BKSS90], and PMR quad trees [NS86] have been used to speed up the evaluation of the spatial join. <p> Similar tree joins have been proposed for other To appear in SIGMOD 1996 3 Require Use of an Index Operate without an Index Transform the * Z-values [OM84], * Join Indices [Rot91] approximation into * Grid Files <ref> [HNKT90, BHF93] </ref> * Z-values [Ore86, OM88] another dimension * kd-trees [KHT89, HNKT90] Use the approximation * Synchronized Tree * External VLSI algo [GS87] directly in the Traversal [BKS93, G un93, HS95] * PBSM two dimensional space * Build 1 or 2 indices before joining [LR94, LR95] * Spatial Hash Join [LR96]
Reference: [BKS93] <author> T. Brinkhoff, H. P. Kriegel, and B. Seeger. </author> <title> Efficient Processing of Spatial Joins Using R-trees. </title> <booktitle> In Proceedings of the 1993 ACM-SIGMOD Conference, </booktitle> <address> Washington, DC, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: The drawback of this approach is that in the new domain some spatial proximity information is lost, making the algorithms complex and less efficient. Most of the newer algorithms are based on using spatial indices for performing the filter step of the spatial join <ref> [BKS93, G un93, HS95] </ref>, and require a spatial index on both the join inputs. These tree join algorithms can be described as synchronized depth-first To appear in SIGMOD 1996 2 searches of both indices, with the two depth-first searches being guided by hints from each other. <p> This study concludes that for low join selectivities, join indices usually provide the best join performance, but for higher join selectivities generalization trees are more efficient. The proposed join algorithm using the generalization trees, is similar to the join algorithm on R-trees proposed by Brinkhoff, Kriegel and Seeger <ref> [BKS93] </ref>. This algorithm can be used only if an R-tree index exists on both the join inputs, and can be described as a synchronized depth-first search of both indices, with the two depth-first searches being guided by hints from each other. <p> Require Use of an Index Operate without an Index Transform the * Z-values [OM84], * Join Indices [Rot91] approximation into * Grid Files [HNKT90, BHF93] * Z-values [Ore86, OM88] another dimension * kd-trees [KHT89, HNKT90] Use the approximation * Synchronized Tree * External VLSI algo [GS87] directly in the Traversal <ref> [BKS93, G un93, HS95] </ref> * PBSM two dimensional space * Build 1 or 2 indices before joining [LR94, LR95] * Spatial Hash Join [LR96] Table 1: Classification of Various Spatial Join Algorithms data structures. <p> The algorithm for constructing the seeded tree uses the existing index on one of the two inputs as a starting point, and tries to minimize the number of random I/Os incurred during the tree construction. The two indices are then joined using the tree join algorithm described in <ref> [BKS93] </ref>. In [LR95], Lo and Ravishankar extend this work to handle the case when neither of the inputs have an index. In this approach, spatial sampling techniques are used for constructing seeded trees on both inputs, and the seeded trees are joined using the tree join algorithm of [BKS93]. <p> described in <ref> [BKS93] </ref>. In [LR95], Lo and Ravishankar extend this work to handle the case when neither of the inputs have an index. In this approach, spatial sampling techniques are used for constructing seeded trees on both inputs, and the seeded trees are joined using the tree join algorithm of [BKS93]. The problem of finding pairwise intersection between two sets of rectangles has been extensively studied in the VLSI domain [MC80], and numerous solutions exist for the case when both the input set of rectangles fit in memory [PS88]. <p> After both the inputs R and S have been partitioned, the algorithm joins the partitions using a computational geome <br>- try based plane-sweeping technique [PS88]. This technique, which was also used in <ref> [BKS93] </ref> for joining the entries of two R*-tree nodes, can be thought of as the spatial equivalent of the sort-merge algorithm. The details of the algorithm for merging the partitions R kp kp i are as follows. <p> The first algorithm is based on the traditional indexed nested loops algorithm and the other is based on the R-tree join algorithm <ref> [BKS93] </ref>. These algorithms use spatial indices, and were chosen because most spatial databases support some form of spatial indexing (for example, R-trees in Illustra [Ube94]). Such systems can easily use these index based join algorithms. <p> The two indices are then joined using the R-tree join algorithm proposed in <ref> [BKS93] </ref>. The R-tree join algorithm performs a synchronous depth-first traversal of the two trees. The traversal starts with the roots of the two R-trees, and moves down the levels of the two trees in tandem until the leaf nodes are reached. <p> Joining two nodes requires finding all bounding boxes in the first node that intersect with some bounding box in the other node. The child pointers corresponding to such matching bounding boxes are then traversed (resulting in a depth-first traversal). The R-tree join algorithm of <ref> [BKS93] </ref> only performs the filter step of the spatial join, and produces a set of candidate OID pairs corresponding to the objects whose MBRs intersect. The objects corresponding to these OIDs then have to be fetched and checked to determine if the join predicate is actually satisfied.
Reference: [BKSS90] <author> N. Beckmann, H. P. Kriegel, R. Schneider, and B. Seeger. </author> <title> The R*-tree: An Efficient and Robust Access Method for Points and Rectangles. </title> <booktitle> In Proceedings of the 1990 ACM-SIGMOD Conference, </booktitle> <month> June </month> <year> 1990. </year>
Reference-contexts: These methods can also be used for evaluating the filter step by storing the bounding box of the spatial objects as points in a higher dimension [BHF93]. Recently, spatial index structures like R-trees [Gut84], R+-trees [CFR87], R*-trees <ref> [BKSS90] </ref>, and PMR quad trees [NS86] have been used to speed up the evaluation of the spatial join.
Reference: [BKSS94] <author> T. Brinkhoff, H. P. Kriegel, R. Schneider, and B. Seeger. </author> <title> Multi-step Processing of Spatial Joins. </title> <booktitle> In Proceedings of the 1994 ACM-SIGMOD Conference, </booktitle> <address> Minneapolis, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: There are a number of techniques for reducing the cost of this part of To appear in SIGMOD 1996 10 gorithms with indices, TIGER Data (Join Road with Hydrography). gorithms with indices, TIGER Data (Join Road with Rail). the join <ref> [BKSS94] </ref> (by an order of magnitude in many cases). These techniques rely on using as a filter in the refinement step, extra information that is precomputed and stored along with each spatial feature.
Reference: [Bur86] <author> P. A. Burrough. </author> <title> Principles of Geographic Information Systems for Land Resources Assessment. </title> <publisher> Oxford University Press, </publisher> <year> 1986. </year>
Reference-contexts: Spatial database users frequently need to combine two spatial inputs based on some spatial relationship between the objects in the two inputs. For example, map overlap, which requires combining two maps to produce a third, is an important operation in a spatial database <ref> [Bur86, MGR91] </ref>. This operation of combining two inputs based on their spatial relationship is called a spatial join. Spatial joins, just like their counterparts in a relational system, are an expensive operation. Consequently, efficient spatial join algorithms are a critical component of any spatial database system.
Reference: [CDF + 94] <author> M. J. Carey, D. J. DeWitt, M. J. Franklin, N. E. Hall, M. McAuliffe, J. F. Naughton, D. T. Schuh, M. H. Solomon, C. K. Tan, O. Tsatalos, S. White, and M. J. Zwilling. </author> <title> Shoring up Persistent Applications. </title> <booktitle> In Proceedings of the 1994 ACMSIGMOD Conference, </booktitle> <address> Minneapolis, Minnesota, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Par- adise is a database system that handles GIS type of applications. Paradise supports storing, browsing, and querying of geographic data sets. It uses an extended-relational data model and supports an extension of SQL as its query language. Paradise uses SHORE <ref> [CDF + 94] </ref> as its storage manager for persistent objects. The machine used for the study was a Sun SPARC-10/51 with 64 MBytes of memory, running SunOS Release 4.1.3.
Reference: [CFR87] <author> T. Sellis C. Faloutsos and N. Roussopoulos. </author> <title> Analysis of Object Oriented Spatial Access Methods. </title> <booktitle> In Proceedings of the 1987 ACM-SIGMOD Conference, </booktitle> <address> San Francisco, </address> <month> May </month> <year> 1987. </year>
Reference-contexts: These methods can also be used for evaluating the filter step by storing the bounding box of the spatial objects as points in a higher dimension [BHF93]. Recently, spatial index structures like R-trees [Gut84], R+-trees <ref> [CFR87] </ref>, R*-trees [BKSS90], and PMR quad trees [NS86] have been used to speed up the evaluation of the spatial join.
Reference: [Cor95] <author> Intergraph Corporation. </author> <note> GIS/AM/FM Information. http://www.intergraph.com/utilmap.shtml, 1995. </note>
Reference-contexts: In- creasingly, a database system has been employed to meet these requirements. Examples of commercial database systems that have been used for these applications are ARC/INFO [Arc95], Intergraph's MGE <ref> [Cor95] </ref>, and Illustra [Ube94]).
Reference: [DKL + 94] <author> D. J. DeWitt, N. Kabra, J. Luo, J. M. Patel, and J. Yu. </author> <title> Client-Server Paradise. </title> <booktitle> In Proceedings of the 20th VLDB Conf., </booktitle> <address> Santiago, Chile, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: Second, it includes the results of a comprehensive performance study of three spatial join algorithms: a simple indexed nested loops based join algorithm, an R-tree based join algorithm, and the PBSM algorithm. The performance study is based on actual implementations of the three algorithms in Paradise <ref> [DKL + 94] </ref>, which is an experimental GIS database system. <p> This sorting brings together key-pointers whose joining attributes are spatially close. The spatial index, which in our case is a R*-tree, is then built in a bottom up fashion <ref> [DKL + 94] </ref>. After building the index on the join attribute of R, a scan is started on S. Each tuple of S is used to probe the index on R. The result of the probe is a set of (possibly empty) OI Ds of R. <p> For this, we use the same technique that was used in the PBSM join algorithm (refer to Section 3.2). 4.3 Methodology For the performance comparison, we implemented each of these algorithms, namely, indexed nested loops join, R-tree based join and the PBSM join in Paradise <ref> [DKL + 94] </ref>. Par- adise is a database system that handles GIS type of applications. Paradise supports storing, browsing, and querying of geographic data sets. It uses an extended-relational data model and supports an extension of SQL as its query language. <p> Parallelizing PBSM, would require a strategy for declustering spatial objects. The spatial partitioning function that is used by PBSM for partitioning large inputs, can also be used for declustering spatial data. We are currently examining these issues in the broader context of extending Paradise <ref> [DKL + 94] </ref> to run on shared- nothing architectures [Sto86]. Parallel spatial databases are emerging as an attractive solution for storing and manipulating large volumes of spatial data [DLPY93], and some techniques for declustering spatial data have recently been proposed [TY95].
Reference: [DLPY93] <author> D. J. DeWitt, J. Luo, J. M. Patel, and J. Yu. </author> <title> Paradise </title>
Reference-contexts: We are currently examining these issues in the broader context of extending Paradise [DKL + 94] to run on shared- nothing architectures [Sto86]. Parallel spatial databases are emerging as an attractive solution for storing and manipulating large volumes of spatial data <ref> [DLPY93] </ref>, and some techniques for declustering spatial data have recently been proposed [TY95]. However, unless the spatial data is uniformly distributed, these techniques can result in unbalanced partitions.
References-found: 13

