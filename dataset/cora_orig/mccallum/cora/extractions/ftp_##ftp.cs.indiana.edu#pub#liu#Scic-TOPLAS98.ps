URL: ftp://ftp.cs.indiana.edu/pub/liu/Scic-TOPLAS98.ps
Refering-URL: http://www.cs.indiana.edu/hyplan/liu.html
Root-URL: http://www.cs.indiana.edu
Title: Static Caching for Incremental Computation  
Author: YANHONG A. LIU and SCOTT D. STOLLER TIM TEITELBAUM 
Keyword: Categories and Subject Descriptors: D.1 [Programming Techniques]: Automatic Programming|automatic analysis of algorithms; program transformation; D.3.3 [Programming Languages]: Language Constructs and Features; D.3.4 [Programming Languages]: Processors| optimization; F.3.3 [Logics and Meanings of Programs]: Studies of Program Constructs General Terms: Algorithms, Languages, Performance  
Affiliation: Indiana University and  Cornell University  
Abstract: A systematic approach is given for deriving incremental programs that exploit caching. The cache-and-prune method presented in the article consists of three stages: (I) the original program is extended to cache the results of all its intermediate subcomputations as well as the final result, (II) the extended program is incrementalized so that computation on a new input can use all intermediate results on an old input, and (III) unused results cached by the extended program and maintained by the incremental program are pruned away, leaving a pruned extended program that caches only useful intermediate results and a pruned incremental program that uses and maintains only the useful results. All three stages utilize static analyses and semantics-preserving transformations. Stages I and III are simple, clean, and fully automatable. The overall method has a kind of optimality with respect to the techniques used in Stage II. The method can be applied straightforwardly to provide a systematic approach to program improvement via caching. Additional Key Words and Phrases: Caching, dependence analysis, incremental computation, incremental programs, intermediate results, memoization, optimization, program efficiency improvement, program transformation, static analysis 
Abstract-found: 1
Intro-found: 1
Reference: <author> Abadi, M., Lampson, B., and L evy, J.-J. </author> <year> 1996. </year> <title> Analysis and caching of dependencies. </title> <booktitle> In Proceedings of the 1996 ACM SIGPLAN International Conference on Functional Programming. ACM, </booktitle> <address> New York. </address>
Reference: <author> Aho, A. V., Hopcroft, J. E., and Ullman, J. D. </author> <year> 1974. </year> <title> The Design and Analysis of Computer Algorithms. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass. </address>
Reference: <author> Aho, A. V., Sethi, R., and Ullman, J. D. </author> <year> 1986. </year> <title> Compilers, Principles, Techniques, and Tools. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass. </address>
Reference: <author> Allen, F. E. </author> <year> 1969. </year> <title> Program optimization. </title> <booktitle> In Annual Review of Automatic Programming. </booktitle> <volume> Vol. 5. </volume> <publisher> Pergamon Press, </publisher> <address> New York, </address> <pages> 239-307. </pages>
Reference: <author> Allen, F. E., Cocke, J., and Kennedy, K. </author> <year> 1981. </year> <title> Reduction of operator strength. In Program Flow Analysis, </title> <editor> S. S. Muchnick and N. D. Jones, Eds. </editor> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <pages> 79-101. </pages>
Reference: <author> Ballance, R. A., Graham, S. L., and Van De Vanter, M. L. </author> <year> 1992. </year> <title> The Pan language-based editing system. </title> <journal> ACM Trans. Soft. Eng. Methodol. </journal> <volume> 1, 1 (Jan.), </volume> <pages> 95-127. </pages>
Reference: <author> Bird, R. S. </author> <year> 1980. </year> <title> Tabulation techniques for recursive programs. </title> <journal> ACM Comput. Surv. </journal> <volume> 12, </volume> <month> 4 (Dec.), </month> <pages> 403-417. </pages>
Reference: <author> Bird, R. S. </author> <year> 1984. </year> <title> The promotion and accumulation strategies in transformational programming. </title> <journal> ACM Trans. Program. Lang. Syst. </journal> <volume> 6, 4 (Oct.), </volume> <pages> 487-504. </pages>
Reference: <author> Burstall, R. M. and Darlington, J. </author> <year> 1977. </year> <title> A transformation system for developing recursive programs. </title> <journal> J. ACM 24, 1 (Jan.), 44-67. ACM Transactions on Programming Languages and Systems, </journal> <volume> Vol. 20, No. 3, </volume> <month> May </month> <year> 1998. </year> <title> Static Caching for Incremental Computation 583 Cartwright, </title> <editor> R. </editor> <year> 1984. </year> <title> Recursive programs as definitions in first order logic. </title> <journal> SIAM J. Com-put. </journal> <volume> 13, </volume> <month> 2 (May), </month> <pages> 374-408. </pages>
Reference: <author> Chin, W.-N. </author> <year> 1993. </year> <title> Towards an automated tupling strategy. </title> <booktitle> In Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation. ACM, </booktitle> <address> New York, </address> <pages> 119-132. </pages>
Reference: <author> Chin, W.-N. and Khoo, S.-C. </author> <year> 1993. </year> <title> Tupling functions with multiple recursion parameters. </title> <booktitle> In Proceedings of the 3rd International Workshop on Static Analysis, </booktitle> <editor> P. Cousot, M. Falaschi, G. File, and A. Rauzy, Eds. </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 724. </volume> <publisher> Springer-Verlag, Berlin, </publisher> <pages> 124-140. </pages>
Reference: <author> Cocke, J. and Kennedy, K. </author> <year> 1977. </year> <title> An algorithm for reduction of operator strength. </title> <journal> Commun. ACM 20, </journal> <volume> 11 (Nov.), </volume> <pages> 850-856. </pages>
Reference: <author> Cohen, N. H. </author> <year> 1983. </year> <title> Eliminating redundant recursive calls. </title> <journal> ACM Trans. Program. Lang. Syst. </journal> <volume> 5, </volume> <month> 3 (July), </month> <pages> 265-299. </pages>
Reference: <author> Cormen, T. H., Leiserson, C. E., and Rivest, R. L. </author> <year> 1990. </year> <title> Introduction to Algorithms. </title> <publisher> The MIT Press/McGraw-Hill. </publisher>
Reference: <author> Deransart, P., Jourdan, M., and Lorho, B. </author> <year> 1988. </year> <title> Attribute Grammars: Definitions, Systems, and Bibliography. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 323. </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin. </address>
Reference: <author> Earley, J. </author> <year> 1976. </year> <title> High level iterators and a method for automatically designing data structure representation. </title> <journal> J. Comput. Lang. </journal> <volume> 1, </volume> <pages> 321-342. </pages>
Reference: <author> Gunter, C. A. </author> <year> 1992. </year> <title> Semantics of Programming Languages. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass. </address>
Reference: <author> Hall, R. J. </author> <year> 1990. </year> <title> Program improvement by automatic redistribution of intermediate results. </title> <type> Tech. Rep. </type> <institution> AI-TR-1251, Artificial Intelligence Laboratory, MIT, </institution> <address> Cambridge, Mass. </address> <month> Dec. </month>
Reference: <author> Hall, R. J. </author> <year> 1991. </year> <title> Program improvement by automatic redistribution of intermediate results: An overview. In Automating Software Design, </title> <editor> M. R. Lowry and R. D. McCartney, Eds. </editor> <publisher> AAAI Press/The MIT Press, </publisher> <pages> 339-372. </pages>
Reference: <author> Hoover, R. </author> <year> 1992. </year> <title> Alphonse: Incremental computation as a programming abstraction. </title> <booktitle> In Proceedings of the ACM SIGPLAN '92 Conference on Programming Language Design and Implementation. ACM, </booktitle> <address> New York, </address> <pages> 261-272. </pages>
Reference: <author> Hughes, J. </author> <year> 1985. </year> <title> Lazy memo-functions. </title> <booktitle> In Proceedings of the 2nd Conference on Functional Programming Languages and Computer Architecture. Lecture Notes in Computer Science, </booktitle> <volume> vol. 201. </volume> <publisher> Springer-Verlag, Berlin, </publisher> <pages> 129-146. </pages>
Reference: <author> Hughes, J. </author> <year> 1990. </year> <title> Compile-time analysis of functional programs. </title> <booktitle> In Research Topics in Functional Programming, </booktitle> <editor> D. Turner, Ed. </editor> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <pages> 117-153. </pages>
Reference: <author> Jones, N. D., Gomard, C. K., and Sestoft, P. </author> <year> 1993. </year> <title> Partial Evaluation and Automatic Program Generation. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J. </address>
Reference: <author> Jones, S. B. and Le M etayer, D. </author> <year> 1989. </year> <title> Compile-time garbage collection by sharing analysis. </title> <booktitle> In Proceedings of the 4th International Conference on Functional Programming Languages and Computer Architecture. ACM, </booktitle> <address> New York, </address> <pages> 54-74. </pages>
Reference: <author> Katayama, T. </author> <year> 1984. </year> <title> Translation of attribute grammars into procedures. </title> <journal> ACM Trans. Program. </journal>
Reference: <author> Lang. Syst. </author> <month> 6, 3 (July), </month> <pages> 345-369. </pages>
Reference: <author> Keller, R. M. and Sleep, M. R. </author> <year> 1986. </year> <title> Applicative caching. </title> <journal> ACM Trans. Program. Lang. Syst. </journal> <volume> 8, 1 (Jan.), </volume> <pages> 88-108. </pages>
Reference: <author> Kleene, S. C. </author> <year> 1952. </year> <title> Introduction to Metamathematics. </title> <publisher> Van Nostrand, </publisher> <address> New York. 10th reprint, </address> <publisher> Wolters-Noordhoff Publishing, Groningen and North-Holland Publishing Company, </publisher> <address> Amster-dam, </address> <year> 1991. </year>
Reference: <author> Knuth, D. E. </author> <year> 1968. </year> <title> Semantics of context-free languages. </title> <journal> Math. Syst. Theory 2, </journal> <month> 2 (June), </month> <pages> 127-145. </pages>
Reference: <author> Launchbury, J. </author> <year> 1989. </year> <title> Projection factorisations in partial evaluation. </title> <type> Ph.D. thesis, </type> <institution> Department of Computing, University of Glasgow, </institution> <address> Glasgow, Scotland. </address>
Reference: <author> Launchbury, J. </author> <year> 1991. </year> <title> Strictness and binding-time analysis: Two for the price of one. </title> <booktitle> In Proceedings of the ACM SIGPLAN '91 Conference on Programming Language Design and Implementation. ACM, </booktitle> <address> New York, </address> <pages> 80-91. </pages>
Reference: <author> Lawall, J. L. and Danvy, O. </author> <year> 1993. </year> <title> Separating stages in the continuation-passing style transformation. </title> <booktitle> In Conference Record of the 20th Annual ACM Symposium on Principles of Programming Languages. ACM, </booktitle> <address> New York, </address> <month> 124-136. </month> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> Vol. 20, No. 3, </volume> <month> May </month> <year> 1998. </year> <note> 584 Yanhong A. Liu et al. </note>
Reference: <author> Liu, Y. A. </author> <year> 1995. </year> <title> CACHET: An interactive, incremental-attribution-based program transformation system for deriving incremental programs. </title> <booktitle> In Proceedings of the 10th Knowledge-Based Software Engineering Conference. </booktitle> <publisher> IEEE CS Press, Los Alamitos, Calif., </publisher> <pages> 19-26. </pages>
Reference: <author> Liu, Y. A. </author> <year> 1997. </year> <title> Principled strength reduction. In Algorithmic Languages and Calculi, </title> <editor> R. Bird and L. Meertens, Eds. </editor> <publisher> Chapman & Hall, </publisher> <address> London, U.K., </address> <pages> 357-381. </pages>
Reference: <author> Liu, Y. A. </author> <year> 1998. </year> <title> Dependence analysis for recursive data. </title> <booktitle> In Proceedings of the 1998 IEEE International Conference on Computer Languages. </booktitle> <publisher> IEEE CS Press, Los Alamitos, Calif. </publisher>
Reference: <author> Liu, Y. A. and Stoller, S. D. </author> <year> 1998. </year> <title> Loop optimization for aggregate array computations. </title> <booktitle> In Proceedings of the 1998 IEEE International Conference on Computer Languages. </booktitle> <publisher> IEEE CS Press, Los Alamitos, Calif. </publisher>
Reference: <author> Liu, Y. A. and Teitelbaum, T. </author> <year> 1995. </year> <title> Systematic derivation of incremental programs. </title> <institution> Sci. Comput. Program. </institution> <month> 24, 1 (Feb.), </month> <pages> 1-39. </pages>
Reference: <author> Liu, Y. A., Stoller, S. D., and Teitelbaum, T. </author> <year> 1996. </year> <title> Discovering auxiliary information for incremental computation. </title> <booktitle> In Conference Record of the 23rd Annual ACM Symposium on Principles of Programming Languages. ACM, </booktitle> <address> New York, </address> <pages> 157-170. </pages>
Reference: <author> Michie, D. </author> <year> 1968. </year> <title> "memo" functions and machine learning. </title> <booktitle> Nature 218, </booktitle> <pages> 19-22. </pages>
Reference: <author> Mogensen, T. </author> <year> 1989. </year> <title> Separating binding times in language specifications. </title> <booktitle> In Proceedings of the 4th International Conference on Functional Programming Languages and Computer Architecture. ACM, </booktitle> <address> New York, </address> <pages> 12-25. </pages>
Reference: <author> Mostow, D. J. and Cohen, D. </author> <year> 1985. </year> <title> Automating program speedup by deciding what to cache. </title> <booktitle> In Proceedings of the 9th International Joint Conference on Artificial Intelligence. </booktitle> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, Calif., </address> <pages> 165-172. </pages>
Reference: <author> Paakki, J. </author> <year> 1995. </year> <title> Attribute grammar paradigms|A high-level methodology in language implementation. </title> <journal> ACM Comput. Surv. </journal> <volume> 27, </volume> <month> 2 (June), </month> <pages> 196-255. </pages>
Reference: <author> Paige, R. </author> <year> 1983. </year> <title> Transformational programming|Applications to algorithms and systems. </title> <booktitle> In Conference Record of the 10th Annual ACM Symposium on Principles of Programming Languages. ACM, </booktitle> <address> New York, </address> <pages> 73-87. </pages>
Reference: <author> Paige, R. </author> <year> 1990. </year> <title> Symbolic finite differencing|Part I. </title> <booktitle> In Proceedings of the 3rd European Symposium on Programming. Lecture Notes in Computer Science, </booktitle> <volume> vol. 432. </volume> <publisher> Springer-Verlag, Berlin, </publisher> <pages> 36-56. </pages>
Reference: <author> Paige, R. </author> <year> 1994. </year> <title> Viewing a program transformation system at work. </title> <booktitle> In Proceedings of Joint 6th International Conference on Programming Languages: Implementations, Logics and Programs and 4th International Conference on Algebraic and Logic Programming, </booktitle> <editor> M. Hermenegildo and J. Penjam, Eds. </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 844. </volume> <publisher> Springer-Verlag, Berlin, </publisher> <pages> 5-24. </pages>
Reference: <author> Paige, R. and Koenig, S. </author> <year> 1982. </year> <title> Finite differencing of computable expressions. </title> <journal> ACM Trans. Program. Lang. Syst. </journal> <volume> 4, </volume> <month> 3 (July), </month> <pages> 402-454. </pages>
Reference: <author> Partsch, H. A. </author> <year> 1990. </year> <title> Specification and Transformation of Programs|A Formal Approach to Software Development. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin. </address>
Reference: <author> Pettorossi, A. </author> <year> 1984. </year> <title> A powerful strategy for deriving efficient programs by transformation. </title> <booktitle> In Conference Record of the 1984 ACM Symposium on LISP and Functional Programming. ACM, </booktitle> <address> New York. </address>
Reference: <author> Pettorossi, A. </author> <year> 1987. </year> <title> Strategical derivation of on-line programs. In Program Specification and Transformation, </title> <editor> L. G. L. T. Meertens, Ed. </editor> <publisher> North-Holland, Amsterdam, </publisher> <pages> 73-88. </pages>
Reference: <author> Pettorossi, A. and Proietti, M. </author> <year> 1997. </year> <title> Program derivation via list introduction. In Algorithmic Languages and Calculi, </title> <editor> R. Bird and L. Meertens, Eds. </editor> <publisher> Chapman & Hall, </publisher> <address> London, U.K. </address>
Reference: <author> Plotkin, G. D. </author> <year> 1975. </year> <title> Call-by-name, call-by-value and the -calculus. </title> <journal> Theoret. Comput. Sci. </journal> <volume> 1, </volume> <pages> 125-159. </pages>
Reference: <author> Pugh, W. </author> <year> 1988. </year> <title> An improved cache replacement strategy for function caching. </title> <booktitle> In Proceedings of the 1988 ACM Conference on LISP and Functional Programming. ACM, </booktitle> <address> New York, </address> <pages> 269-276. </pages>
Reference: <author> Pugh, W. and Teitelbaum, T. </author> <year> 1989. </year> <title> Incremental computation via function caching. </title> <booktitle> In Conference Record of the 16th Annual ACM Symposium on Principles of Programming Languages. ACM, </booktitle> <address> New York, </address> <pages> 315-328. </pages>
Reference: <author> Purdom, P. W. and Brown, C. A. </author> <year> 1985. </year> <title> The Analysis of Algorithms. Holt, Rinehart and Winston. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> Vol. 20, No. 3, </volume> <month> May </month> <year> 1998. </year> <title> Static Caching for Incremental Computation 585 Reps, </title> <editor> T. and Teitelbaum, T. </editor> <year> 1988. </year> <title> The Synthesizer Generator: A System for Constructing Language-Based Editors. </title> <publisher> Springer-Verlag, </publisher> <address> New York. </address>
Reference: <author> Reps, T. and Turnidge, T. </author> <year> 1996. </year> <title> Program specialization via program slicing. </title> <booktitle> In Proceedings of the Dagstuhl Seminar on Partial Evaluation, </booktitle> <editor> O. Danvy, R. Gluck, and P. Thiemann, Eds. </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 1110. </volume> <publisher> Springer-Verlag, Berlin, </publisher> <pages> 409-429. </pages>
Reference: <author> Reps, T., Teitelbaum, T., and Demers, A. </author> <year> 1983. </year> <title> Incremental context-dependent analysis for language-based editors. </title> <journal> ACM Trans. Program. Lang. Syst. </journal> <volume> 5, </volume> <month> 3 (July), </month> <pages> 449-477. </pages>
Reference: <author> Rosendahl, M. </author> <year> 1989. </year> <title> Automatic complexity analysis. </title> <booktitle> In Proceedings of the 4th International Conference on Functional Programming Languages and Computer Architecture. ACM, </booktitle> <address> New York, </address> <pages> 144-156. </pages>
Reference: <author> Scott, D. S. </author> <year> 1982. </year> <title> Lectures on a mathematical theory of computation. </title> <booktitle> In Theoretical Foundations of Programming Methodology, </booktitle> <editor> M. Broy and G. Schmidt, Eds. D. </editor> <publisher> Reidel Publishing Company, </publisher> <pages> 145-292. </pages>
Reference: <author> Smith, D. R. </author> <year> 1990. </year> <title> KIDS: A semiautomatic program development system. </title> <journal> IEEE Trans. Softw. Eng. </journal> <volume> 16, 9 (Sept.), </volume> <pages> 1024-1043. </pages>
Reference: <author> Sundaresh, R. S. </author> <year> 1991. </year> <title> Building incremental programs using partial evaluation. </title> <booktitle> In Proceedings of the Symposium on Partial Evaluation and Semantics-Based Program Manipulation. ACM, </booktitle> <address> New York, </address> <pages> 83-93. </pages>
Reference: <author> Sundaresh, R. S. and Hudak, P. </author> <year> 1991. </year> <title> Incremental computation via partial evaluation. </title> <booktitle> In Conference Record of the 18th Annual ACM Symposium on Principles of Programming Languages. ACM, </booktitle> <address> New York, </address> <pages> 1-13. </pages>
Reference: <author> Traub, K. R. </author> <year> 1986. </year> <title> A compiler for the MIT tagged-token dataflow architecture. M.S. </title> <type> thesis, </type> <institution> Department of Electrical Engineering and Computer Science, MIT, Cambridge, Massachusetts. </institution> <note> Appeared as Technical Report LCS TR-370, </note> <month> August, </month> <year> 1986. </year>
Reference: <author> Wadler, P. and Hughes, R. J. M. </author> <year> 1987. </year> <title> Projections for strictness analysis. </title> <booktitle> In Proceedings of the 3rd International Conference on Functional Programming Languages and Computer Architecture. Lecture Notes in Computer Science, </booktitle> <volume> vol. 274. </volume> <publisher> Springer-Verlag, Berlin, </publisher> <pages> 385-407. </pages>
Reference: <author> Webb, J. A. </author> <year> 1992. </year> <title> Steps towards architecture-independent image processing. </title> <journal> IEEE Comput. </journal> <volume> 25, 2 (Feb.), </volume> <pages> 21-31. </pages>
Reference: <author> Webber, A. </author> <year> 1995. </year> <title> Optimization of functional programs by grammar thinning. </title> <journal> ACM Trans. Program. Lang. Syst. </journal> <volume> 17, 2 (Mar.), </volume> <pages> 293-330. </pages>
Reference: <author> Webber, A. B. </author> <year> 1993. </year> <title> Principled optimization of functional programs. </title> <type> Ph.D. thesis, </type> <institution> Department of Computer Science, Cornell University, Ithaca, N.Y. </institution> <note> Also appeared as Technical Report TR 93-1363, </note> <month> June </month> <year> 1993. </year>
Reference: <author> Webber, A. B. </author> <year> 1997. </year> <title> Program analysis using binary relations. </title> <booktitle> In Proceedings of the ACM SIGPLAN '97 Conference on Programming Language Design and Implementation. ACM, </booktitle> <address> New York, </address> <pages> 249-160. </pages>
Reference: <author> Wegbreit, B. </author> <year> 1975. </year> <title> Mechanical program analysis. </title> <journal> Commun. ACM 18, </journal> <volume> 9 (Sept.), </volume> <pages> 528-538. </pages>
Reference: <author> Wells, W. M., III. </author> <year> 1986. </year> <title> Efficient synthesis of Gaussian filters by cascaded uniform filters. </title> <journal> IEEE Trans. Patt. Anal. Mach. Intell. </journal> <volume> 8, 2 (Mar.), </volume> <pages> 234-239. </pages>
Reference: <author> Yeh, D. and Kastens, U. </author> <year> 1988. </year> <title> Improvements on an incremental evaluation algorithm for ordered attribute grammars. </title> <journal> SIGPLAN Not. </journal> <volume> 23, 12, </volume> <pages> 45-50. </pages>
Reference: <author> Zabih, R. </author> <year> 1994. </year> <title> Individuating unknown objects by combining motion and stereo. </title> <type> Ph.D. thesis, </type> <institution> Department of Computer Science, Stanford University, Stanford, Calif. </institution>
Reference: <author> Zabih, R. and Woodfill, J. </author> <year> 1994. </year> <title> Non-parametric local transforms for computing visual correspondence. </title> <booktitle> In Proceedings of the 3rd European Conference on Computer Vision, </booktitle> <editor> J.-O. Eklundh, Ed. </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 801. </volume> <publisher> Springer-Verlag, </publisher> <pages> 151-158. </pages> <note> Received November 1996; revised August 1997; accepted November 1997 ACM Transactions on Programming Languages and Systems, Vol. 20, No. 3, </note> <month> May </month> <year> 1998. </year>
References-found: 72

