URL: http://www.cs.cornell.edu/home/kleinber/stoc98-uf.ps
Refering-URL: http://www.cs.cornell.edu/home/kleinber/kleinber.html
Root-URL: 
Title: Decision Algorithms for Unsplittable Flow and the Half-Disjoint Paths Problem  
Author: Jon M. Kleinberg 
Abstract: We consider the bounded unsplittable flow problem: given terminal pairs in a network, with associated real-valued demands in the range [0; 1 2 ], find a single flow path for each pair so that no more than 1 unit of demand is routed through any vertex. Thus, the setting is not directly comparable to that of the classical disjoint paths problem (when all demands are equal to 1) | we must deal with connections having varied, real-valued amounts of demand, but we impose the boundedness restriction that each connection can consume at most half the capacity of any vertex. Our main result is a polynomial-time algorithm for the bounded unsplittable flow problem, in an arbitrary graph, when the number of terminal pairs is a fixed constant. Our algorithm is conceptually much simpler than Robertson and Seymour's corresponding algorithm for the disjoint paths problem with a constant number of terminal pairs; and we can decide the routability of a non-trivially super-constant number of terminal pairs (up to ((log log n) 2=15 )) in polynomial time. We also obtain polynomial-time algorithms for several natural optimization problems derived from the bounded unsplittable flow problem, when the number of terminal pairs is sufficiently small, and algorithms with better bounds for the case of planar graphs. The results all carry over to problems involving edge capacities. Our approach makes use of several of the ideas underlying the Robertson-Seymour algorithm, together with some new algorithmic components. The results add to a growing body of work suggesting that versions of our boundedness restriction | while often relatively mild from the point of view of the underlying motivation | can have very interesting qualitative effects on the tractability of basic routing problems.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Arnborg, A. Proskurowski, </author> <title> "Linear-time algorithms for NP-hard problems restricted to partial k-trees," </title> <journal> Disc. Appl. Math., </journal> <volume> 8(1987), </volume> <pages> pp. 277-284. </pages>
Reference-contexts: In the former case, one can apply dynamic programming to a recursive decomposition of the graph by separators (see also <ref> [1] </ref>). The latter case again breaks into a dichotomy. <p> This is captured by the notion of a passage. If X V and D = f 1 ; : : : ; ` g is a (multi)set of reals in <ref> [0; 1] </ref>, then we define a passage fl on (X; D) as follows: for each i 2 D, we choose a forest fl i of maximum degree 2 on the set X. The edges of these graphs fl i will be called the edges of fl. <p> Now we use Lemma 5.4 as part of a method to solve the ufp when G has a decomposition in terms of small separators. The overall approach is a type of dynamic programming over this separator decomposition; a framework for developing such algorithms is presented by Arnborg and Proskurowski <ref> [1] </ref>, and it also forms a component of the R-S algorithm.
Reference: [2] <author> B. Bollobas, A. Thomason, </author> <title> "Highly linked graphs," </title> <type> Combinatorica 16(1996), </type> <pages> pp. 313-320. </pages>
Reference-contexts: This is handled by an induction argument; a similar theorem for clique minors was proved in [12] and subsequently, in a somewhat different form, in <ref> [2] </ref>. Theorem 4.3 Let G be a graph containing a blocked hex B = (K; ) of order (m; q) as a subgraph, where m 24k 3=2 + 2k.
Reference: [3] <author> A. Frank, </author> <title> "Packing paths, cuts, and circuits | a survey," in Paths, Flows, </title> <editor> and VLSI-Layout, B. Korte, L. Lovasz, H.J. Promel, A. Schrijver, Eds., </editor> <publisher> Berlin: Springer-Verlag, </publisher> <year> 1990, </year> <pages> pp. 49-100. </pages>
Reference-contexts: This is a central problem in combinatorial optimization and algorithmic graph theory (see e.g. the surveys <ref> [3, 10, 15] </ref>), and is one of Karp's original NP-complete problems [5]. <p> This has similarities with, and often technical connections to, a large set of half-integrality results for the edge-disjoint paths problem: good characterizations are known for the multicommodity flow problem with half-integer flow values in a large number of special cases for which the corresponding edge-disjoint paths problem is intractable <ref> [3] </ref>; in many such special cases, allowing half-integrality also greatly reduces the computational complexity of the problem [9]. The Robertson-Seymour Algorithm.
Reference: [4] <author> N. Garg, V. Vazirani, M. Yannakakis, </author> <title> "Primal-dual approximation algorithms for integral flow and multicut in trees, with applications to matching and set cover," </title> <booktitle> Proc. ICALP, </booktitle> <year> 1993, </year> <pages> pp. 64-75. </pages>
Reference-contexts: the n fi n grid [7], the natural multicommodity flow relaxation of the problem provides very strong information for designing approximation algorithms when all demands are at most 1 2 , but the relaxation is known to be extremely weak when the demands are as large as 1 (see e.g. <ref> [4] </ref>). Thus, by imposing a fairly mild restriction | that each connection consume at most half the capacity of each vertex | one can effect fairly dramatic changes on the "global" structure of the routing problem.
Reference: [5] <author> R.M. Karp, </author> <title> "On the computational complexity of combinatorial problems," </title> <booktitle> Networks 5(1975), </booktitle> <pages> pp. 45-68. </pages>
Reference-contexts: This is a central problem in combinatorial optimization and algorithmic graph theory (see e.g. the surveys [3, 10, 15]), and is one of Karp's original NP-complete problems <ref> [5] </ref>. It has attracted interest in the contexts of transportation networks, VLSI layout, and, recently, virtual circuit routing in high-speed networks; it is an underlying component, and serves as a common theme, in the range of problems that are formulated and studied in these settings.
Reference: [6] <author> J. Kleinberg, </author> <title> "Single-source unsplittable flow," </title> <booktitle> Proc. 37th IEEE FOCS, </booktitle> <year> 1996. </year>
Reference-contexts: Thus, the disjoint paths problem is simply the special case in which all demands i are equal to 1. Versions of this model were studied by Schrijver, Seymour, and Winkler [16] in the context of sonet ring routing, by the author in the single-source case <ref> [6] </ref>, and more recently in work of Srinivasan [17] and Kolliopoulos and Stein [8]. The special case of the ufp in which all demands are at most 1 2 | we will call this the bounded unsplittable flow problem | often exhibits qualitatively different behavior from the general ufp.
Reference: [7] <author> J. Kleinberg, E. Tardos, </author> <title> "Disjoint Paths in Densely Embedded Graphs," </title> <booktitle> Proc. 36th IEEE FOCS, </booktitle> <year> 1995, </year> <pages> pp. 52-61. </pages>
Reference-contexts: (by a simple reduction from the disjoint paths problem), but there are several contexts in which it appears to be algorithmically more "manageable." For example, in work of the author and Eva Tardos on the ufp (with edge capacities) in a family of graphs generalizing the n fi n grid <ref> [7] </ref>, the natural multicommodity flow relaxation of the problem provides very strong information for designing approximation algorithms when all demands are at most 1 2 , but the relaxation is known to be extremely weak when the demands are as large as 1 (see e.g. [4]).
Reference: [8] <author> S. Kolliopoulos, C. Stein, </author> <title> "Improved approximation algorithms for unsplittable flow problems," </title> <booktitle> Proc. 38th IEEE FOCS, </booktitle> <year> 1997. </year>
Reference-contexts: Versions of this model were studied by Schrijver, Seymour, and Winkler [16] in the context of sonet ring routing, by the author in the single-source case [6], and more recently in work of Srinivasan [17] and Kolliopoulos and Stein <ref> [8] </ref>. The special case of the ufp in which all demands are at most 1 2 | we will call this the bounded unsplittable flow problem | often exhibits qualitatively different behavior from the general ufp.
Reference: [9] <author> M. Middendorf, F. Pfeiffer, </author> <title> "On the complexity of the disjoint paths problem," </title> <journal> Combinatorica, </journal> <volume> 13(1993). </volume> <pages> pp. 97-107. </pages>
Reference-contexts: the edge-disjoint paths problem: good characterizations are known for the multicommodity flow problem with half-integer flow values in a large number of special cases for which the corresponding edge-disjoint paths problem is intractable [3]; in many such special cases, allowing half-integrality also greatly reduces the computational complexity of the problem <ref> [9] </ref>. The Robertson-Seymour Algorithm. One of the major results in the area of graph algorithms is Robertson and Seymour's polynomial-time algorithm for the disjoint paths problem when the number of terminal pairs is a fixed constant [10, 12].
Reference: [10] <author> N. Robertson, </author> <title> P.D. Seymour, "An outline of a disjoint paths algorithm," in Paths, Flows, </title> <editor> and VLSI-Layout, B. Korte, L. Lovasz, H.J. Promel, A. Schrijver, Eds., </editor> <publisher> Berlin: Springer-Verlag, </publisher> <year> 1990, </year> <pages> pp. 267-292. </pages>
Reference-contexts: This is a central problem in combinatorial optimization and algorithmic graph theory (see e.g. the surveys <ref> [3, 10, 15] </ref>), and is one of Karp's original NP-complete problems [5]. <p> The Robertson-Seymour Algorithm. One of the major results in the area of graph algorithms is Robertson and Seymour's polynomial-time algorithm for the disjoint paths problem when the number of terminal pairs is a fixed constant <ref> [10, 12] </ref>. The Robertson-Seymour algorithm (henceforth, the R-S algorithm) is quite involved, and the new techniques underlying it have found applications in a wide variety of algorithmic problems. Two aspects of its complexity are of interest to us here. <p> Two aspects of its complexity are of interest to us here. First, the proof of its correctness requires the full power of the machinery from the Graph Minors series of papers of Robertson and Seymour, and thus runs to several hundred pages <ref> [10] </ref>. <p> This latter point is by far the most difficult, and it is possible to prove in this case <ref> [10] </ref> that the middle vertex of such a grid minor can be deleted without affecting the realizability of the terminal pairs.
Reference: [11] <author> N. Robertson, </author> <title> P.D. Seymour, "Graph Minors V. Excluding a planar graph," </title> <journal> J. Combinatorial Theory Ser. B, </journal> <volume> 41(1986), </volume> <pages> pp. 92-114. </pages>
Reference-contexts: First, its description and proof of cor 2 rectness are much simpler than those of the R-S algorithm | specifically, we are able to provide them in full in the present paper, with the exception of a single result from <ref> [11, 13] </ref>, that a graph with an excluded grid minor has bounded tree-width (more on this below). <p> Precise definitions of certain other terms used in this informal discussion will be given in the following sections. At a high level, the R-S algorithm is based on the following dichotomy: either the input graph G has bounded tree-width, or it has a large grid minor <ref> [11, 13] </ref>. In the former case, one can apply dynamic programming to a recursive decomposition of the graph by separators (see also [1]). The latter case again breaks into a dichotomy. <p> Our algorithm is based on the same initial dichotomy, that either G has bounded tree-width or a large grid minor; it is for this that we need the result of <ref> [11, 13] </ref>. The case of bounded tree-width is somewhat more involved in our setting, since paths carrying small amounts of demand can cross a separator, and each other, in complicated ways | but this is still not very difficult; we discuss it in Section 5.
Reference: [12] <author> N. Robertson, </author> <title> P.D. Seymour, "Graph Minors XIII. The disjoint paths problem," </title> <journal> J. Combinatorial Theory Ser. B, </journal> <volume> 63(1995), </volume> <pages> pp. 65-110. 14 </pages>
Reference-contexts: The Robertson-Seymour Algorithm. One of the major results in the area of graph algorithms is Robertson and Seymour's polynomial-time algorithm for the disjoint paths problem when the number of terminal pairs is a fixed constant <ref> [10, 12] </ref>. The Robertson-Seymour algorithm (henceforth, the R-S algorithm) is quite involved, and the new techniques underlying it have found applications in a wide variety of algorithmic problems. Two aspects of its complexity are of interest to us here. <p> for g (n) terminal pairs in polynomial time, where g is an extremely slowly growing function. (I.e. g is chosen so that f (g (n)) = n O (1) .) It is a non-trivial task even to determine the function g explicitly (see e.g. the discussion at the conclusion of <ref> [12] </ref>), for that too requires tracing its (implicit) construction through much of the Graph Minors series. The present work. We begin by considering the bounded unsplittable flow problem in an arbitrary graph, when the number of terminal pairs is a fixed constant. <p> It turns out that it is not difficult to determine the function h explicitly in our case, and it is also easy to show (using e.g. <ref> [12] </ref>) that the number h (n) is significantly larger than the corresponding number g (n) associated with the R-S algorithm. <p> The effect of this is that we are not forced to deal with the distinction between "flat" grid minors and arbitrary grid minors, as was the case in <ref> [12] </ref>, and this eliminates a large amount of complexity both in the proof and in the overall bounds. Again, it is worth making some observations. <p> Any improvement in this bound translates directly to a corresponding improvement in the bound on k in Theorem 1.1. In the remainder of the paper, we use branch-width <ref> [12] </ref> in place of tree-width; and we use subgraphs of G that we call hexes in place of grid minors. This follows the approach of [12], and seems to make for simpler proofs; at a conceptual level, the effect of this substitution is not significant. 4 2 Preliminaries Let G = <p> In the remainder of the paper, we use branch-width <ref> [12] </ref> in place of tree-width; and we use subgraphs of G that we call hexes in place of grid minors. This follows the approach of [12], and seems to make for simpler proofs; at a conceptual level, the effect of this substitution is not significant. 4 2 Preliminaries Let G = (V; E) be an undirected graph on n vertices, and let T = f (s 1 ; t 1 ); : : : ; (s <p> It will follow that v is irrelevant, and can be deleted without affecting the realizability of T . This overall strategy is analogous to one that is used in the analysis of the R-S algorithm <ref> [12] </ref>, for showing how to make use of a large clique minor in a graph. We begin with a basic fact about separations. <p> This is handled by an induction argument; a similar theorem for clique minors was proved in <ref> [12] </ref> and subsequently, in a somewhat different form, in [2]. Theorem 4.3 Let G be a graph containing a blocked hex B = (K; ) of order (m; q) as a subgraph, where m 24k 3=2 + 2k. <p> a separation (A; B) of minimum order such that A, C B for some ring C in H of order at least 4k, and so that A is maximal subject to these conditions. (Such a separation can be found efficiently by a standard maximum flow algorithm; see e.g. (6.2) of <ref> [12] </ref>.) Let G 0 = G [B], K = H [B], X = A " B, = V (H [X]), and ` 0 = jXj `. <p> Given T , with terminal set and demand set D, we solve the more general problem of determining R G (; D); by Lemma 5.2, we can determine the realizability of T from this information in time roughly proportional to jR G (; D)j. A branch-decomposition, following <ref> [12] </ref>, is a ternary tree T together with an assignment t of a distinct edge of G to each leaf of T . <p> we obtain Theorem 5.5 Given a branch-decomposition of G of width !, we can decide the realizability of T in time [jEj (k + !) O ((k+!)k) ]. 6 Decision Algorithms for Realizability We need the following combination of results of Robertson, Seymour, and Thomas [13] and Robert-son and Seymour <ref> [12] </ref>. Theorem 6.1 [12, 13] (i) There exists a algorithm that, given a graph G and an integer m, finds either a subgraph of G isomorphic to a hex of order m or a branch-decomposition of G of width ! 20 2m 5 . <p> Theorem 6.1 <ref> [12, 13] </ref> (i) There exists a algorithm that, given a graph G and an integer m, finds either a subgraph of G isomorphic to a hex of order m or a branch-decomposition of G of width ! 20 2m 5 .
Reference: [13] <author> N. Robertson, P.D. Seymour, R. Thomas, </author> <title> "Quickly excluding a planar graph," </title> <journal> J. Combinato--rial Theory Ser. B, </journal> <volume> 62(1994), </volume> <pages> pp. 323-348. </pages>
Reference-contexts: First, its description and proof of cor 2 rectness are much simpler than those of the R-S algorithm | specifically, we are able to provide them in full in the present paper, with the exception of a single result from <ref> [11, 13] </ref>, that a graph with an excluded grid minor has bounded tree-width (more on this below). <p> Precise definitions of certain other terms used in this informal discussion will be given in the following sections. At a high level, the R-S algorithm is based on the following dichotomy: either the input graph G has bounded tree-width, or it has a large grid minor <ref> [11, 13] </ref>. In the former case, one can apply dynamic programming to a recursive decomposition of the graph by separators (see also [1]). The latter case again breaks into a dichotomy. <p> Our algorithm is based on the same initial dichotomy, that either G has bounded tree-width or a large grid minor; it is for this that we need the result of <ref> [11, 13] </ref>. The case of bounded tree-width is somewhat more involved in our setting, since paths carrying small amounts of demand can cross a separator, and each other, in complicated ways | but this is still not very difficult; we discuss it in Section 5. <p> Again, it is worth making some observations. First, the main bounds needed in analyzing the algorithm here are low-order polynomials, with the exception of the exponential bound on the relation between tree-width and grid minors in arbitrary graphs that is provided by <ref> [13] </ref>. Any improvement in this bound translates directly to a corresponding improvement in the bound on k in Theorem 1.1. In the remainder of the paper, we use branch-width [12] in place of tree-width; and we use subgraphs of G that we call hexes in place of grid minors. <p> Thus v is irrelevant, as desired. 5 Bounded Branch-Width We will see via the main result of <ref> [13] </ref> that any graph with sufficiently large branch-width (defined below) must contain a large hex subgraph, and therefore an irrelevant vertex by Theorem 4.4. In this section, we show how the realizability of T can be decided when the branch-width of G is bounded. <p> tree to the root ff, we obtain Theorem 5.5 Given a branch-decomposition of G of width !, we can decide the realizability of T in time [jEj (k + !) O ((k+!)k) ]. 6 Decision Algorithms for Realizability We need the following combination of results of Robertson, Seymour, and Thomas <ref> [13] </ref> and Robert-son and Seymour [12]. Theorem 6.1 [12, 13] (i) There exists a algorithm that, given a graph G and an integer m, finds either a subgraph of G isomorphic to a hex of order m or a branch-decomposition of G of width ! 20 2m 5 . <p> Theorem 6.1 <ref> [12, 13] </ref> (i) There exists a algorithm that, given a graph G and an integer m, finds either a subgraph of G isomorphic to a hex of order m or a branch-decomposition of G of width ! 20 2m 5 .
Reference: [14] <author> A. Schrijver, </author> <title> "Disjoint homotopic paths and trees in a planar graph," </title> <journal> Discrete and Computational Geometry, </journal> <volume> 6(1991), </volume> <pages> pp. 527-574. </pages>
Reference-contexts: For example, consider that the vertex-disjoint paths problem and the edge-disjoint path problem coincide in the case of 3-regular graphs, for which both problems appear to be nearly as difficult as they are on arbitrary graphs. 3 Finally we mention a result of Schrijver <ref> [14] </ref> that provides a method, different from the R-S algorithm, to solve the disjoint paths problem in planar graphs when the number of terminal pairs is a fixed constant k.
Reference: [15] <author> A. Schrijver, </author> <title> "Homotopic routing methods," in Paths, Flows, </title> <editor> and VLSI-Layout, B. Korte, L. Lovasz, H.J. Promel, A. Schrijver, Eds., </editor> <publisher> Berlin: Springer-Verlag, </publisher> <year> 1990, </year> <pages> pp. 329-372. </pages>
Reference-contexts: This is a central problem in combinatorial optimization and algorithmic graph theory (see e.g. the surveys <ref> [3, 10, 15] </ref>), and is one of Karp's original NP-complete problems [5].
Reference: [16] <author> A. Schrijver, P.D. Seymour, P. Winkler, </author> <title> "The ring loading problem," </title> <journal> SIAM J. Discrete Math., </journal> <note> to appear. </note>
Reference-contexts: Thus, the disjoint paths problem is simply the special case in which all demands i are equal to 1. Versions of this model were studied by Schrijver, Seymour, and Winkler <ref> [16] </ref> in the context of sonet ring routing, by the author in the single-source case [6], and more recently in work of Srinivasan [17] and Kolliopoulos and Stein [8].
Reference: [17] <author> A. Srinivasan, </author> <title> "Improved approximations for edge-disjoint paths, unsplittable flow, and related routing problems," </title> <booktitle> Proc. 38th IEEE FOCS, </booktitle> <year> 1997. </year> <month> 15 </month>
Reference-contexts: Versions of this model were studied by Schrijver, Seymour, and Winkler [16] in the context of sonet ring routing, by the author in the single-source case [6], and more recently in work of Srinivasan <ref> [17] </ref> and Kolliopoulos and Stein [8]. The special case of the ufp in which all demands are at most 1 2 | we will call this the bounded unsplittable flow problem | often exhibits qualitatively different behavior from the general ufp.
References-found: 17

