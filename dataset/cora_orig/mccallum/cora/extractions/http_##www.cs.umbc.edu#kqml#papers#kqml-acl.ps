URL: http://www.cs.umbc.edu/kqml/papers/kqml-acl.ps
Refering-URL: http://www.paoli.atm.lmco.com/kqml/
Root-URL: 
Email: finin@cs.umbc.edu fritzson@cs.umbc.edu  mckay@vfl.paramax.com robin@vfl.paramax.com  
Title: KQML as an Agent Communication Language  
Author: Tim Finin and Richard Fritzson Don McKay and Robin McEntire 
Address: Baltimore MD USA  Paoli PA USA  
Affiliation: Computer Science Department University of Maryland Baltimore County  Valley Forge Laboratory Unisys Corporation  
Abstract: This paper describes the design of and experimentation with the Knowledge Query and Manipulation Language (KQML), a new language and protocol for exchanging information and knowledge. This work is part of a larger effort, the ARPA Knowledge Sharing Effort which is aimed at developing techniques and methodology for building large-scale knowledge bases which are sharable and reusable. KQML is both a message format and a message-handling protocol to support run-time knowledge sharing among agents. KQML focuses on an extensible set of performatives, which defines the permissible "speech acts" agents may use and comprise a substrate on which to develop higher-level models of in-teragent interaction such as contract nets and negotiation. In addition, KQML provides a basic architecture for knowledge sharing through a special class of agent called communication facilitators which coordinate the interactions of other agents The ideas which underlie the evolving design of KQML are currently being explored through experimental prototype systems which are being used to support several testbeds in such areas as concurrent engineering, intelligent design and intelligent planning and scheduling. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Yigal Arens. </author> <title> Planning and reformulating queries for semantically-modeled multidatabase systems. </title> <booktitle> In First International Conference on Information and Knowledge Management, </booktitle> <month> October </month> <year> 1992. </year>
Reference-contexts: All of the components integrated were preexisting systems which were not designed to work in a cooperative distributed environment. In a second experiment, we developed a information agent consisting of CoBASE [6], a cooperative front-end, SIMS <ref> [1, 2] </ref>, an information mediator for planning information access, and LIM [26], an information mediator for translating relational data into knowledge structures. CoBASE processes a query, and, if no responses are found relaxes the query based upon approximation operators and domain semantics and executes the query again.
Reference: [2] <author> Yigal Arens, Chin Chee, Chun-Nan Hsu, Hoh In, and Craig A. Knoblock. </author> <title> Query processing in an information mediator. </title> <booktitle> In Proceedings of the ARPA/Rome Lab 1994 Knowledge-Based Planning and Scheduling Initiative Workshop, </booktitle> <month> February </month> <year> 1994. </year>
Reference-contexts: All of the components integrated were preexisting systems which were not designed to work in a cooperative distributed environment. In a second experiment, we developed a information agent consisting of CoBASE [6], a cooperative front-end, SIMS <ref> [1, 2] </ref>, an information mediator for planning information access, and LIM [26], an information mediator for translating relational data into knowledge structures. CoBASE processes a query, and, if no responses are found relaxes the query based upon approximation operators and domain semantics and executes the query again.
Reference: [3] <institution> External Interfaces Working Group ARPA Knowledge Sharing Initiative. </institution> <note> Specification of the KQML agent-communication language. Working paper. Available as http://www.cs.umbc.edu/kqml/papers/kqml-spec.ps, De-cember 1992. 7 </note>
Reference: [4] <author> Marie Bienkowski, Marie desJardins, and Roberto Des--imone. SOCAP: </author> <title> system for operations crisis action planning. </title> <booktitle> In Proceedings of the ARPA/Rome Lab 1994 Knowledge-Based Planning and Scheduling Initiative Workshop, </booktitle> <month> February </month> <year> 1994. </year>
Reference-contexts: We have used KQML as the communication language in several technology integration experiments in the ARPA Rome Lab Planning Initiative. One of these experiments supported an integrated planning and scheduling system for military transportation logistics linking a planning agent (in SIPE <ref> [30, 4] </ref>), with a scheduler (in Common Lisp), a knowledge base (in LOOM [22]), and a case based reasoning tool (in Common Lisp). All of the components integrated were preexisting systems which were not designed to work in a cooperative distributed environment.
Reference: [5] <author> Mark Burstein, </author> <title> editor. Proceedings of the ARPA/Rome Lab 1994 Knowledge-Based Planning and Scheduling Initiative Workshop. </title> <publisher> Morgan Kuafmann Publishers, Inc., </publisher> <month> February </month> <year> 1994. </year>
Reference-contexts: Current KQML-based applications have used one of two simple techniques. In the PACT project [7], for example, all agents used a central, common facilitator whose location was a parameter initialized when the agents were launched. In the ARPI applications <ref> [5] </ref>, finding and establishing contact with a local facilitator is one of the functions of the KQML API. When each agent starts up, its KQML router module announces itself to the local facilitator so that it is registered in the local database.
Reference: [6] <author> Wes Chu and Hua Yang. Cobase: </author> <title> A cooperative query answering system for database systems. </title> <booktitle> In Proceedings of the ARPA/Rome Lab 1994 Knowledge-Based Planning and Scheduling Initiative Workshop, </booktitle> <month> Febru-ary </month> <year> 1994. </year>
Reference-contexts: All of the components integrated were preexisting systems which were not designed to work in a cooperative distributed environment. In a second experiment, we developed a information agent consisting of CoBASE <ref> [6] </ref>, a cooperative front-end, SIMS [1, 2], an information mediator for planning information access, and LIM [26], an information mediator for translating relational data into knowledge structures.
Reference: [7] <author> M. Cutkosky, E. Engelmore, R. Fikes, T. Gruber, M. Genesereth, and W. Mark. </author> <title> PACT: An experiment in integrating concurrent engineering systems. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 28-38, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: The problem of how agents find facilitators in the first place is not strictly an issue for KQML and has a variety of possible solutions. Current KQML-based applications have used one of two simple techniques. In the PACT project <ref> [7] </ref>, for example, all agents used a central, common facilitator whose location was a parameter initialized when the agents were launched. In the ARPI applications [5], finding and establishing contact with a local facilitator is one of the functions of the KQML API.
Reference: [8] <editor> D. Kuokka et. al. Shade: </editor> <booktitle> Technology for knowledge-based collaborative. In AAAI Workshop on AI in Collaborative Design, </booktitle> <year> 1993. </year>
Reference-contexts: The use of KQML in these demonstrations has allowed the integrators to focus on what the integration of design and engineering tools can accomplish and appropriately deemphasized how the tools communicate <ref> [17, 23, 8, 10] </ref>. We have used KQML as the communication language in several technology integration experiments in the ARPA Rome Lab Planning Initiative.
Reference: [9] <author> J. McGuire et. al. Shade: </author> <title> Technology for knowledge-based collaborative engineering. </title> <journal> Journal of Concurrent Engineering: Applications and Research (CERA), </journal> <volume> 1(2), </volume> <month> September </month> <year> 1993. </year>
Reference: [10] <author> William Mark et. al. Cosmos: </author> <title> A system for supporting design negotiation. </title> <journal> Journal of Concurrent Engineering: Applications and Research (CERA), </journal> <volume> 2(3), </volume> <year> 1994. </year>
Reference-contexts: The use of KQML in these demonstrations has allowed the integrators to focus on what the integration of design and engineering tools can accomplish and appropriately deemphasized how the tools communicate <ref> [17, 23, 8, 10] </ref>. We have used KQML as the communication language in several technology integration experiments in the ARPA Rome Lab Planning Initiative.
Reference: [11] <author> Tim Finin, Rich Fritzson, and Don McKay. </author> <title> A high-level language and protocol to support intelligent agent interoperability. </title> <booktitle> In Workshop on Enabling Technologies for Concurrent Engineering, </booktitle> <month> April </month> <year> 1992. </year>
Reference: [12] <author> Tim Finin, Rich Fritzson, and Don McKay. </author> <title> A knowledge query and manipulation language for intelligent agent interoperability. </title> <booktitle> In Fourth National Symposium on Concurrent Engineering, CE & CALS Conference, </booktitle> <month> June 1-4 </month> <year> 1992. </year> <note> Available as http://www.cs.umbc.edu/kqml/papers/cecals.ps. </note>
Reference: [13] <author> Tim Finin, Don McKay, Rich Fritzson, and Robin McEntire. </author> <title> KQML: an information and knowledge exchange protocol. </title> <booktitle> In International Conference on Building and Sharing of Very Large-Scale Knowledge Bases, </booktitle> <month> December </month> <year> 1993. </year> <note> A version of this paper will appear in Kazuhiro Fuchi and Toshio Yokoi (Ed.), "Knowledge Building and Knowledge Sharing", Ohmsha and IOS Press, 1994. Available as http://www.cs.umbc.edu/kqml/papers/kbks.ps. </note>
Reference: [14] <editor> Tim Finin, Charles Nicholas, and Yelena Yesha, editors. </editor> <booktitle> Information and Knowledge Management, Expanding the Definition of Database. Lecture Notes in Computer Science 752. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year> <note> (ISBN 3-540-57419-0). </note>
Reference: [15] <author> M. Genesereth and R. Fikes et. al. </author> <title> Knowledge interchange format, version 3.0 reference manual. </title> <type> Technical report, </type> <institution> Computer Science Department, Stanford University, </institution> <year> 1992. </year>
Reference-contexts: The Interlingua Group is developing a common language for expressing the content of a knowledge-base. This group has published a specification document describing the Knowledge Interchange Formalism or KIF <ref> [15] </ref> which is based on first order logic with some extensions to support non-monotonic reason and definitions. KIF includes both a specifica 1 tion of a syntax for the language as well as a specification for the semantics. <p> In linguistic terms, this means that they would share a common syntax, semantics and pragmatics. Getting information processes, especially AI processes, to share a common syntax is a major problem. There is no universally accepted language in which to represent information and queries. Languages such as KIF <ref> [15] </ref>, extended SQL, and LOOM [22] have their supporters, but there is also a strong position that it is too early to standardize on any representation language [19].
Reference: [16] <author> Michael R. Genesereth and Steven P. Katchpel. </author> <title> Software agents. </title> <journal> Communications of the ACM, </journal> <volume> 37(7) </volume> <pages> 48-53, 147, </pages> <year> 1994. </year>
Reference-contexts: Our approach to this is to introduce a small number of KQML performatives which are used by agents to describe the meta-data specifying the information requirements and capabilities and then to introduce a special class of agents called communication facilitators <ref> [16] </ref>. A facilitator is an agent that performs various useful communication services, e.g. maintaining a registry of service names, forwarding messages to named services, routing messages based on content, providing "matchmaking" between information providers and clients, and providing mediation and translation services. <p> Agent-Base Software Integration [18] is an effort underway at Stanford University which applying KQML as an integrating framework for general software systems. Using KQML, a federated architecture incorporating a highly sophisticated facilitator is developed which supports an agent-based view of software integration and interoperation <ref> [16] </ref>. The facilitator in this architecture is an intelligent agent used to process and reason about the content of KQML messages supporting tighter integration of disparate software systems.
Reference: [17] <author> Mike Genesereth. Designworld. </author> <booktitle> In Proceedings of the IEEE Conference on Robotics and Automation, pages 2,785-2,788. </booktitle> <publisher> IEEE CS Press. </publisher>
Reference-contexts: The use of KQML in these demonstrations has allowed the integrators to focus on what the integration of design and engineering tools can accomplish and appropriately deemphasized how the tools communicate <ref> [17, 23, 8, 10] </ref>. We have used KQML as the communication language in several technology integration experiments in the ARPA Rome Lab Planning Initiative.
Reference: [18] <author> Mike Genesereth. </author> <title> An agent-based approach to software interoperability. </title> <type> Technical Report Logic-91-6, </type> <institution> Logic Group, CSD, Stanford University, </institution> <month> February </month> <year> 1993. </year>
Reference-contexts: A LIM server front-ends each different database. This experiment was run over the internet involving three, geographically dispersed sites. Agent-Base Software Integration <ref> [18] </ref> is an effort underway at Stanford University which applying KQML as an integrating framework for general software systems. Using KQML, a federated architecture incorporating a highly sophisticated facilitator is developed which supports an agent-based view of software integration and interoperation [16].
Reference: [19] <author> Matt Ginsberg. </author> <title> Knowledge interchange format: The KIF of death. </title> <journal> AI Magazine, </journal> <year> 1991. </year>
Reference-contexts: There is no universally accepted language in which to represent information and queries. Languages such as KIF [15], extended SQL, and LOOM [22] have their supporters, but there is also a strong position that it is too early to standardize on any representation language <ref> [19] </ref>. As a result, it is currently necessary to say that two agents can communicate with each other if they have a common representation language or use languages that are inter-translatable.
Reference: [20] <author> Yannis Labrou and Tim Finin. </author> <title> A semantics approach for KQML a general purpose communication language for software agents. </title> <booktitle> In Third International Conference on Information and Knowledge Management, </booktitle> <month> Novem-ber </month> <year> 1994. </year> <note> Available as http://www.cs.umbc.edu/kqml/- papers/kqml-semantics.ps. </note>
Reference: [21] <author> Nancy Lehrer. </author> <title> The knowledge representation specification language manual. </title> <type> Technical report, </type> <institution> ISX Corporation, Thousand Oaks, California, </institution> <year> 1994. </year>
Reference-contexts: The content languages used have included languages intended for knowledge exchange including the Knowledge Interchange Format (KIF) and the Knowledge Representation Specification Language (KRSL) <ref> [21] </ref> as well as other more traditional languages such as SQL. Early experimentations with KQML began in 1990. The following is a representative selection of applications and experiments developed using KQML.
Reference: [22] <author> Robert MacGregor and Raymond Bates. </author> <title> The LOOM knowledge representation language. </title> <type> Technical Report ISI/RS-87-188, </type> <institution> USC/ISI, </institution> <year> 1987. </year> <note> Also appears in Proceedings of the Knowledge-Based Systems Workshop held in St. </note> <institution> Louis, Missouri, </institution> <month> April 21-23, </month> <year> 1987. </year>
Reference-contexts: Getting information processes, especially AI processes, to share a common syntax is a major problem. There is no universally accepted language in which to represent information and queries. Languages such as KIF [15], extended SQL, and LOOM <ref> [22] </ref> have their supporters, but there is also a strong position that it is too early to standardize on any representation language [19]. <p> One of these experiments supported an integrated planning and scheduling system for military transportation logistics linking a planning agent (in SIPE [30, 4]), with a scheduler (in Common Lisp), a knowledge base (in LOOM <ref> [22] </ref>), and a case based reasoning tool (in Common Lisp). All of the components integrated were preexisting systems which were not designed to work in a cooperative distributed environment.
Reference: [23] <author> M.Tenenbaum, J. Weber, and T. Gruber. </author> <title> Enterprise integration: Lessons from shade and pact. </title> <editor> In C. Petrie, editor, </editor> <title> Enterprise Integration Modeling. </title> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: The use of KQML in these demonstrations has allowed the integrators to focus on what the integration of design and engineering tools can accomplish and appropriately deemphasized how the tools communicate <ref> [17, 23, 8, 10] </ref>. We have used KQML as the communication language in several technology integration experiments in the ARPA Rome Lab Planning Initiative.
Reference: [24] <author> R. Neches, R. Fikes, T. Finin, T. Gruber, R. Patil, T. Senator, and W. Swartout. </author> <title> Enabling technology for knowledge sharing. </title> <journal> AI Magazine, </journal> <volume> 12(3) </volume> <pages> 36-56, </pages> <month> Fall </month> <year> 1991. </year>
Reference-contexts: Knowledge Query and Manipulation Language (KQML) is a language that is designed to support interactions among intelligent software agents. It was developed by the ARPA supported Knowledge Sharing Effort <ref> [24, 27] </ref> and separately implemented by several research groups. It has been successfully used to implement a variety of information systems using different software architectures.
Reference: [25] <author> Jeff Y-C Pan and Jay M. Tenenbaum. </author> <title> An intelligent agent framework for enterprise integration. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <volume> 21(6), </volume> <month> December </month> <year> 1991. </year> <note> (Special Issue on Distributed AI). </note>
Reference: [26] <author> Jon Pastor, Don McKay, and Tim Finin. View-concepts: </author> <title> Knowledge-based access to databases. </title> <booktitle> In First International Conference on Information and Knowledge Management, </booktitle> <month> October </month> <year> 1992. </year>
Reference-contexts: The scope of the External Interfaces Group is the run-time interactions between knowledge based systems and other modules in a run-time environment. Special attention has been given to two important cases communication between two knowledge-based systems and communication between a knowledge-based system and a conventional database management system <ref> [26] </ref>. The KQML language is one of the main results which have come out of the external interfaces group of the KSE. <p> All of the components integrated were preexisting systems which were not designed to work in a cooperative distributed environment. In a second experiment, we developed a information agent consisting of CoBASE [6], a cooperative front-end, SIMS [1, 2], an information mediator for planning information access, and LIM <ref> [26] </ref>, an information mediator for translating relational data into knowledge structures. CoBASE processes a query, and, if no responses are found relaxes the query based upon approximation operators and domain semantics and executes the query again.
Reference: [27] <author> R. Patil, R. Fikes, P. Patel-Schneider, D. McKay, T. Finin, T. Gruber, and R. Neches. </author> <title> The DARPA knowledge sharing effort: Progress report. </title> <booktitle> In Principles of Knowledge Representation and Reasoning: Proceedings of the Third International Conference, </booktitle> <month> Novem-ber </month> <year> 1992. </year> <note> Available as http://www.cs.umbc.edu/kqml/- papers/kr92.ps. </note>
Reference-contexts: Knowledge Query and Manipulation Language (KQML) is a language that is designed to support interactions among intelligent software agents. It was developed by the ARPA supported Knowledge Sharing Effort <ref> [24, 27] </ref> and separately implemented by several research groups. It has been successfully used to implement a variety of information systems using different software architectures.
Reference: [28] <author> R. Patil, R. Fikes, P. Patel-Schneider, D. McKay, T. Finin, T. Gruber, and R. Neches. </author> <title> The DARPA knowledge sharing effort: Progress report. </title> <editor> In B. Nebel, C. Rich, and W. Swartout, editors, </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proc. of the Third International Conference (KR'92), </booktitle> <address> San Mateo, CA, November 1992. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [29] <author> Gio Wiederhold, Peter Wegner, and Stefano Ceri. </author> <title> Toward megaprogramming. </title> <journal> Communications of the ACM, </journal> <volume> 33(11) </volume> <pages> 89-99, </pages> <month> November </month> <year> 1992. </year>
Reference: [30] <author> David Wilkins. </author> <title> Practical Planning: Extending the Classical AI Planning Paradigm. </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> San Mateo, CA., </address> <year> 1988. </year> <month> 8 </month>
Reference-contexts: We have used KQML as the communication language in several technology integration experiments in the ARPA Rome Lab Planning Initiative. One of these experiments supported an integrated planning and scheduling system for military transportation logistics linking a planning agent (in SIPE <ref> [30, 4] </ref>), with a scheduler (in Common Lisp), a knowledge base (in LOOM [22]), and a case based reasoning tool (in Common Lisp). All of the components integrated were preexisting systems which were not designed to work in a cooperative distributed environment.
References-found: 30

