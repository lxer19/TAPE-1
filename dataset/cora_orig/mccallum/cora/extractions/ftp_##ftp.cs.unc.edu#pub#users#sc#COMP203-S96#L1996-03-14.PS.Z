URL: ftp://ftp.cs.unc.edu/pub/users/sc/COMP203-S96/L1996-03-14.PS.Z
Refering-URL: http://www.cs.unc.edu/~sc/teaching/COMP203-S1996/lectures.html
Root-URL: http://www.cs.unc.edu
Title: COMP 203: Parallel and Distributed  Ritu Nagpal  Scheduling Tasks on Parallel Systems  
Author: Weihai Chen . 
Keyword: 1.1 Example of scheduling tasks  
Note: T 1 /3 T 9 /9 T 3 /2 T 6 /4 T 8 /4  
Date: Mar 14, 1996  
Pubnum: Computing  
Abstract: A task graph is a set of given tasks. The computation time of each task and the dependencies of the tasks on other tasks in the graph are given. Scheduling tasks of a task graph optimally on a given set of processors is an extremely hard problem. Approximate algorithms are therefore used to solve these problems. These algorithms are not optimal in general but one can get optimal solutions if some restrictions are placed on the task graph. Scheduling tasks has a wide range of applications. For example, it is used for instruction scheduling in microprocessors and is also used in operations research for job shop scheduling. This example is based on the list scheduling discipline. In this discipline, a priority list of the tasks is formed based on a set of criteria. Each processor scans down the list looking for the first task ready for execution and runs it. If two processors want to run the same task, the tie is broken in favor of the processor with the smaller index. Input: A set of tasks, the computation time of each task (T i ), dependencies of these tasks on each other, a fixed number of processors (p). Let us consider the following set of tasks as input: Priority List (L) of the given tasks = (T 1 , T 2 , ........., T 9 ) p = 3 In Fig. 1, each task is specified as T i /t, where T i is the task number and t is the computation time of task T i . It is difficult in general to determine the exact computation time for a task as it is not known which execution path will be taken at each conditional in the task. The arrows in Fig. 1 
Abstract-found: 1
Intro-found: 1
References-found: 0

