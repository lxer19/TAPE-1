URL: http://www.merl.com/reports/TR97-01/TR97-01.ps.gz
Refering-URL: http://www.merl.com/reports/TR97-01/index.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: RT-CRM: Real-Time Channel-based Reflective Memory  
Author: Chia Shen Ichiro Mizunuma 
Address: Cambridge, Massachusetts 02139 8-1-1, Tsukaguchi-honmachi USA Amagasaki, Hyogo, 661, Japan  
Affiliation: MERL A Mitsubishi Electric Reseach Lab. Industrial Electronics and Systems Lab. 201 Broadway Mitsubishi Electric Corp.  
Abstract: In this paper, we propose and present Real-Time Channel-based Reflective Memory (RT-CRM) a useful programming model and middleware communication service for constructing distributed real-time industrial monitoring and control applications on commercially available open systems. RT-CRM provides remote real-time data reflection abstraction using a simple writer-push model. This writer-push approach enables us to easily decouple the QoS characteristics of the writers from that of the readers. This decou-pling is crucial in supporting different kinds of remote data transfer and access needs that one often finds in distributed industrial systems. We will describe the design of RT-CRM, along with a set of easy-to-use API to access the RT-CRM service. We have implemented RT-CRM as part of a larger real-time middle-ware project, MidART. We address many of the important implementation issues including buffer management and QoS support. We demonstrate the fea-siblity of RT-CRM through a discussion of our application programming support and preliminary performance data. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Raha and S. Kamat and W. Zhao. </author> <title> Admission Control for Hard Real-Time Connections in ATM LANs. </title> <booktitle> Proceedings of the 15th IEEE INFOCOM, </booktitle> <month> March </month> <year> 1996. </year>
Reference-contexts: In particular, since the first target network for RT-CRM is ATM, we use ATM traffic class CBR which provides a constant cell rate service and bounded cell delay variation. Real-time communication can be supported by this traffic class with appropriate network switch scheduling <ref> [1, 14] </ref>. For scheduling the DPA-threads, writers as well as readers in the host systems, we use rate-monotonic scheduling algorithms [3, 9] with operating system support on QNX.
Reference: [2] <author> C. Amza, A. L. Cox, S. Dwarkadas, P. Keleher, H. Lu, R. Rajamony, W. Yu, and W. Zwaenepoel. TreadMarks: </author> <title> Shared Memory Computing on Networks of Workstations. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 18-28, </pages> <month> February </month> <year> 1996. </year>
Reference-contexts: However, we do not need the full semantics of a DSM system such as those in TreadMarks DSM system described in <ref> [2] </ref>. Most of the functionalities of a DSM system are built to provide an illusion of a global virtual memory and to support concurrent writes on different nodes, e.g., a read must return the value that is last written.
Reference: [3] <author> C.L. Liu and J.W. Layland. </author> <title> Scheduling Algorithm For Multiprogramming in a Hard-Real-Time Environment. </title> <journal> JACM, </journal> <volume> 20(1), </volume> <month> January </month> <year> 1973. </year>
Reference-contexts: Real-time communication can be supported by this traffic class with appropriate network switch scheduling [1, 14]. For scheduling the DPA-threads, writers as well as readers in the host systems, we use rate-monotonic scheduling algorithms <ref> [3, 9] </ref> with operating system support on QNX. Moreover, in scheduling a writer thread and the DPA-threads associated with the same writer's reflective memory area, we use a Writer-QoS based correctness model | the writer has higher priority over readers (i.e., the DPA-threads).
Reference: [4] <author> D. Ferrari and D. Verma. </author> <title> A Scheme for Real-Time Channel Establishment in Wide-Area Networks. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 8(3), </volume> <month> April </month> <year> 1990. </year>
Reference-contexts: In general, a LAN-based industrial plant has hundreds of plant control sensors (i.e., writers), but 1 RT-CRM actually should be read as Real-Time and Channel-based Reflective Memory, and is not based on real-time channels <ref> [4] </ref>, although real-time channels can be one of the underlying communication support to implement RT-CRM. only a handful, usually 5 to 10, operator stations (i.e., readers). <p> While most of the current research focuses on real-time message communication, as examplified in <ref> [4, 6, 10] </ref>, after analyzing the characteristics of distributed industrial applications, we have approached the problem from a memory-to-memory data transfer perspective. This enabled us to devise a useful real-time distributed programming model, and to provide a set of intuitive middleware services.
Reference: [5] <author> Digital Equiqment Corporation. </author> <title> Memory Channel Overview. </title> <address> www.unix.digital.com/bin/textit/ cluster/memchanl/memchanl.html, </address> <month> May 29 </month> <year> 1996. </year>
Reference-contexts: For example, for a N -node system, we need K fl N system memory assuming each node needs to reflect data of size K. 2.3 Why Not Memory Channels? Memory Channel is a hardware-software combined technology from Digital Equipment Corp., originally licensed from Encore Computer Corp <ref> [5] </ref>. It is designed for low latency high performance clustered parallel computing and is in the middle ground as far as performance and scalability are concerned be-tween symmetric multiprocessors and ATM. A Memory Channel is shared. Reads and writes on a Memory Channel are supported directly by DEC's PCI-MC adaptors.
Reference: [6] <author> A. Mehra, A. Indiresan, and K.G. Shin. </author> <title> Resource Management for Real-Time Communication: Making Theory Meet Practice. </title> <booktitle> In IEEE Real-Time Technology and Applications Symposium, </booktitle> <month> June </month> <year> 1996. </year>
Reference-contexts: While most of the current research focuses on real-time message communication, as examplified in <ref> [4, 6, 10] </ref>, after analyzing the characteristics of distributed industrial applications, we have approached the problem from a memory-to-memory data transfer perspective. This enabled us to devise a useful real-time distributed programming model, and to provide a set of intuitive middleware services.
Reference: [7] <author> I. Mizunuma, C. Shen, and M. Takegaki. </author> <title> Mid-dleware for Distributed Industrial Real-Time Systems on ATM Networks. </title> <booktitle> In 17th IEEE Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1996. </year>
Reference-contexts: We have designed and implemented RT-CRM as part of an ongoing project MidART Middleware and network Architecture for distributed Real-Time industrial systems <ref> [7] </ref>. MidART provides a set of real-time client-server computing facilities for building industrial applications. class of distributed industrial applications for which RT-CRM is designed for, and their implications for the requirements of the underlying real-time system and communication support are: (1) Data sharing and communication patterns are often unidirectional.
Reference: [8] <author> R. Osborne, Q. Zheng, J. Howard, R. Casley, D. Hahn, and T. Nakabayashi. </author> <title> DART | A Low Overhead ATM Network Interface Chip. In Hot Interconnects 96, </title> <month> August </month> <year> 1996. </year>
Reference-contexts: In particular, we point out their limitations for supporting the type of industrial applications under consideration. 2 Note that with a good network interface hardware technology such as those found in <ref> [8] </ref>, one can narrow the gap between MtM and NtN. However, this is beyond the scope of our work reported here. 3 DSM, Reflective Memory and Memory Channels, at some level, are all systems and protocols which allow reads and writes on physically distance memories in a networked environment. <p> This circular buffer is shared (or mapped to) between the application and the network interface (where the network interface supports direct memory access <ref> [8] </ref> by the interface card), or between the application and a RT-CRM receiving thread (where the network interface does not support direct memory access by the interface card). <p> closely influence how RT-CRM achieves its goals. 5.1 Network Interface Support The RT-CRM architecture on the reader side can be implemented in two ways depending on the type of network interface hardware and software available. (1) With direct memory deposit capability from the network interface such as those discussed in <ref> [8] </ref>, we do not need a receiving thread in the middle-ware on the reader's node.
Reference: [9] <author> R. Rajkumar. </author> <title> Synchronization in Real-Time Systems: A Priority Inheritance Approach. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> 101 Philip Drive, Assinippi Park, Norwell, Massachusetts 02061 USA., </address> <year> 1991. </year>
Reference-contexts: Real-time communication can be supported by this traffic class with appropriate network switch scheduling [1, 14]. For scheduling the DPA-threads, writers as well as readers in the host systems, we use rate-monotonic scheduling algorithms <ref> [3, 9] </ref> with operating system support on QNX. Moreover, in scheduling a writer thread and the DPA-threads associated with the same writer's reflective memory area, we use a Writer-QoS based correctness model | the writer has higher priority over readers (i.e., the DPA-threads).
Reference: [10] <author> R. Rajkuma, M. Gagliardi, and L. Sha. </author> <title> The Real-Time Publisher/Subscriber Inter-Process Communication Model for Distributed Real-Time Systems: </title> <booktitle> Design and Implementation. In IEEE Real-Time Technology and Applications Symposium, </booktitle> <month> May </month> <year> 1995. </year>
Reference-contexts: While most of the current research focuses on real-time message communication, as examplified in <ref> [4, 6, 10] </ref>, after analyzing the characteristics of distributed industrial applications, we have approached the problem from a memory-to-memory data transfer perspective. This enabled us to devise a useful real-time distributed programming model, and to provide a set of intuitive middleware services.
Reference: [11] <author> S. Bocking. Sockets++: </author> <title> A Uniform Application Programming Interface for Basic-Level Communication Services. </title> <journal> IEEE Communications Magazine, </journal> <volume> 34(12), </volume> <month> December </month> <year> 1996. </year>
Reference-contexts: In this paper, we propose and present Real-Time Channel-based Reflective Memory (RT-CRM) 1 | a useful programming model and middleware communication service <ref> [11] </ref> for constructing distributed real-time industrial monitoring and control applications on such commercially available open systems. We have designed and implemented RT-CRM as part of an ongoing project MidART Middleware and network Architecture for distributed Real-Time industrial systems [7].
Reference: [12] <author> C. Shen. </author> <title> On ATM Support for Distributed Real-Time Applications. </title> <booktitle> In IEEE Real-Time Technology and Applications Symposium, </booktitle> <month> June </month> <year> 1996. </year>
Reference-contexts: 1 Introduction The availability of high speed networks, such as ATM which can support QoS sensitive real-time communication <ref> [12] </ref>, and the availability of real-time operating systems on PCs and workstations, such as Lynx or QNX, as well as real-time scheduling support in general purpose operating systems, such as those found in IRIX and Solaris, have lead to increased interest in both industry and academia to design distributed real-time systems
Reference: [13] <author> VME Microsystems International Corporation. </author> <title> Reflective Memory Network. </title> <type> White Paper, </type> <month> Febru-ary </month> <year> 1996. </year>
Reference-contexts: In a real-time system, we must consider this worst case delay. 2.2 Why Not Reflective Memory? Hardware supported reflective memory, such as what is provided by SCRAMNet or VME Microsys-tems, Inc. <ref> [13] </ref>, replicates (or reflects) data in all nodes of the network in a bounded amount of time (e.g., 1usec/node latency).
Reference: [14] <author> Q. Zheng, T. Yokotani, T. Ichihashi, and Y. Nemoto. </author> <title> Connection Admission Control for Hard Real-Time Communication in ATM Networks. </title> <booktitle> In Submitted to 17th International Conference on Distributed Computing Systems, </booktitle> <year> 1997. </year>
Reference-contexts: In particular, since the first target network for RT-CRM is ATM, we use ATM traffic class CBR which provides a constant cell rate service and bounded cell delay variation. Real-time communication can be supported by this traffic class with appropriate network switch scheduling <ref> [1, 14] </ref>. For scheduling the DPA-threads, writers as well as readers in the host systems, we use rate-monotonic scheduling algorithms [3, 9] with operating system support on QNX.
References-found: 14

