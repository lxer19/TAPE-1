URL: file://ftp.csri.toronto.edu/csri-technical-reports/267/267.ps.Z
Refering-URL: http://www.eecg.toronto.edu/~okrieg/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Exploiting the Advantages of Mapped Files for Stream I/O  
Author: Orran Krieger, Michael Stumm and Ron Unrau 
Address: Toronto, Canada M5S 1A4  
Affiliation: Computer Systems Research Institute University of Toronto  
Abstract: Technical Report CSRI-267 November, 1991 The Computer Systems Research Institute (CSRI) is an interdisciplinary group formed to conduct research and development relevant to computer systems and their application. It is an Institute within the Faculty of Applied Science and Engineering, and the Faculty of Arts and Science, at the University of Toronto, and is supported in part by the Natural Sciences and Engineering Research Council of Canada. 
Abstract-found: 1
Intro-found: 1
Reference: [ABB + 86] <author> M. Accetta, R. Baron, W. Bolosky, D. Golub, R. Rashid, A. Tevanian, and M. Young. </author> <title> Mach: A New Kernel Foundation for UNIX Development. </title> <booktitle> In 1986 Summer USENIX Conference, </booktitle> <year> 1986. </year>
Reference-contexts: This approach is referred to as Mapped Stream I/O (MSIO) and is dis 1 For example, Mach <ref> [ABB + 86] </ref>, AIX [Mis90], Hurricane [SUK] . . . Page 1 shaded boxes indicate interfaces supported by the operating system. cussed in Section 3. <p> This is shown in Table 1, since the cost of experiment mmapw is greater than the single byte write experiment. However, the cost of a page fault may be less than a read or a write operation on micro-kernel based operating systems, such as V [Che88], Mach <ref> [ABB + 86] </ref> or Hurricane [SUK] 4 . For example, on Hurricane, page faults are handled by the micro-kernel with no communication to the file servers if the data is already in the file cache, resulting in a substantial performance gain.
Reference: [BJ91] <author> A. Lester Buck and Robert A. Coyne Jr. </author> <title> An Experimental Implementation of Draft POSIX Asynchronous I/O. </title> <booktitle> In USENIX-Winter 91, </booktitle> <pages> pages 289-306, </pages> <year> 1991. </year>
Reference-contexts: SunOS has the madvise () system call). In effect, this is more powerful than having the operating system implicitly pre-fetch pages, since it can be applied to non-sequential accesses. Also, it allows the advantages of asynchronous reading <ref> [BJ91] </ref>, without requiring a special mechanism to inform the application that the requested data is available. If the application attempts to access the data before it is available, a page fault will occur that allows the operating system to defer the access until the data is available.
Reference: [Che87] <author> David R. Cheriton. UIO: </author> <title> A Uniform I/O System Interface for Distributed Systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 5(1) </volume> <pages> 12-46, </pages> <month> February </month> <year> 1987. </year>
Reference-contexts: However, these semantics are not supported by most distributed file systems [LS90]. Moreover, significant performance gains can be obtained by having file servers support only block oriented operations, as discussed in <ref> [Che87] </ref>. The primary contribution of this paper is the definition of a new I/O interface, called the Alloc Stream Interface (ASI) that improves on the Stdio and emulated Unix I/O interfaces by significantly reducing the amount of data copying that is necessary.
Reference: [Che88] <author> D. R. Cheriton. </author> <title> The V Distributed System. </title> <journal> Communications of the ACM, </journal> <volume> 31(3) </volume> <pages> 314-333, </pages> <month> March </month> <year> 1988. </year> <pages> Page 13 </pages>
Reference-contexts: This is shown in Table 1, since the cost of experiment mmapw is greater than the single byte write experiment. However, the cost of a page fault may be less than a read or a write operation on micro-kernel based operating systems, such as V <ref> [Che88] </ref>, Mach [ABB + 86] or Hurricane [SUK] 4 . For example, on Hurricane, page faults are handled by the micro-kernel with no communication to the file servers if the data is already in the file cache, resulting in a substantial performance gain.
Reference: [CK91] <author> Ann L. Chervenak and Randy H. Katz. </author> <title> Performance of a Disk Array Prototype. </title> <booktitle> In ACM Sigmetrics Conference, </booktitle> <year> 1991. </year>
Reference-contexts: The processor time saved by not copying data is responsible for most of the performance advantage shown in Table 1. However, there are hidden advantages not evident in these numbers. As observed in <ref> [CK91] </ref>, copying data can cause memory contention, which can be very important in the case of multiprocessor systems or if high 2 It is fair to compare a read of an entire page to a touch of a mapped page, since these correspond to the system cost to get a page <p> In future work, we intend to explore the effectiveness of ASI on systems with parallel disks, for which we think ASI is particularly appropriate. Cherve-nak and Katz <ref> [CK91] </ref> found that the performance advantage of parallel disks was severely limited by the overhead of data copying in memory.
Reference: [FPD91] <author> J. French, T. Pratt, and M. Das. </author> <title> Performance Measurement of a Parallel Input/Output System for the Intel iPSC/2 Hypercube. </title> <booktitle> In ACM Sigmetrics Conference, </booktitle> <pages> pages 178-187, </pages> <year> 1991. </year>
Reference-contexts: Therefore, if several application threads access the same mapped region, each thread may independently cause a page fault that initiates an I/O operation to disk. This allows the application to exploit high bandwidth file systems (e.g. if disk I/O is spread across many disks <ref> [PGK88, FPD91] </ref>). Reduced Memory Usage: When an application uses Unix I/O, there are often multiple copies of the same data resident in memory, since data is copied from the file cache to application specific buffers. This can result in paging or swapping activity.
Reference: [JCF + 83] <author> William Joy, Eric Cooper, Robert Fabry, Samuel Le*er, Kirk McKusick, and David Mosher. </author> <title> 4.2BSD System Manual. </title> <year> 1983. </year>
Reference-contexts: The mmap/munmap <ref> [JCF + 83] </ref> interface is a typical interface for mapping files into an address space. Mmap takes as parameters the file number, protection flags, the length of the region to be mapped, and an offset into a file. It returns a pointer to the mapped region.
Reference: [Jon91] <author> Michael B. Jones. </author> <title> Bringing the C Libraries With Us into a Multi-Threaded Future. </title> <booktitle> In USENIX-Winter 91, </booktitle> <pages> pages 81-91, 91. </pages>
Reference-contexts: This advantage is becoming increasingly important, since more and more memory is being made available for file caching. 2. Threads in a multi-threaded application <ref> [Jon91] </ref> can concurrently access a stream. The behaviour of ASI operations are well defined regardless of the number of threads accessing a stream.
Reference: [KV91] <author> David G. Korn and K.-Phong Vo. SFIO: </author> <title> Safe/Fast String/File I/O. </title> <booktitle> In USENIX-Summer'91-Nashville, </booktitle> <address> TN, </address> <year> 1991. </year>
Reference-contexts: Page 2 This allows application programmers to get the full performance advantage of ASI by rewriting just the I/O intensive parts of the application. In related work, the Sfio library <ref> [KV91] </ref> is a replacement library for Stdio. As well as providing a much more consistent, powerful and natural interface than Stdio, Sfio uses algorithms that are more efficient than those used by typical Stdio implementations and uses mapped file I/O for reading from files. <p> In contrast, many implementations of Stdio require the application to perform explicit seek operations when changing modes <ref> [KV91] </ref>. 5 5 As another example, with every implementation of Stdio Page 5 Finally, since the file offset is maintained by the li-brary, seek operations can be supported without any communication to the file system.
Reference: [LS90] <author> Eliezer Levy and Abraham Silberschatz. </author> <title> Distributed File Systems: Concepts and Examples. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(4) </volume> <pages> 323-374, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: Emulated Unix I/O has the disadvantage that the full Unix I/O semantics (e.g. shared file semantics) cannot be supported by a user level library. However, these semantics are not supported by most distributed file systems <ref> [LS90] </ref>. Moreover, significant performance gains can be obtained by having file servers support only block oriented operations, as discussed in [Che87].
Reference: [Mis90] <author> Mamata Misra, </author> <title> editor. </title> <institution> IBM RISC System/6000 Technology, volume SA23-2619. IBM, </institution> <year> 1990. </year>
Reference-contexts: This approach is referred to as Mapped Stream I/O (MSIO) and is dis 1 For example, Mach [ABB + 86], AIX <ref> [Mis90] </ref>, Hurricane [SUK] . . . Page 1 shaded boxes indicate interfaces supported by the operating system. cussed in Section 3.
Reference: [PGK88] <author> D. Patterson, G. Gibson, and R. Katz. </author> <title> A Case for Redundant Arrays of Inexpensive Disks (RAIDS). </title> <booktitle> In ACM SIGMOD Conference, </booktitle> <pages> pages 109-116, </pages> <address> Chicago, Illinois, </address> <month> June </month> <year> 1988. </year>
Reference-contexts: Therefore, if several application threads access the same mapped region, each thread may independently cause a page fault that initiates an I/O operation to disk. This allows the application to exploit high bandwidth file systems (e.g. if disk I/O is spread across many disks <ref> [PGK88, FPD91] </ref>). Reduced Memory Usage: When an application uses Unix I/O, there are often multiple copies of the same data resident in memory, since data is copied from the file cache to application specific buffers. This can result in paging or swapping activity.
Reference: [SUK] <author> M. Stumm, R. Unrau, and O. Krieger. </author> <title> Hurricane, A Shared-Memory Multiprocessor Operating System Structured for Scalability. </title> <note> submitted for publication, </note> <year> 1991. </year>
Reference-contexts: This approach is referred to as Mapped Stream I/O (MSIO) and is dis 1 For example, Mach [ABB + 86], AIX [Mis90], Hurricane <ref> [SUK] </ref> . . . Page 1 shaded boxes indicate interfaces supported by the operating system. cussed in Section 3. To differentiate between the Unix I/O interface supported by the operating system and a similar interface supported by a user level library, we refer to the latter as Emulated Unix I/O. <p> However, the cost of a page fault may be less than a read or a write operation on micro-kernel based operating systems, such as V [Che88], Mach [ABB + 86] or Hurricane <ref> [SUK] </ref> 4 . For example, on Hurricane, page faults are handled by the micro-kernel with no communication to the file servers if the data is already in the file cache, resulting in a substantial performance gain.
Reference: [VSWL91] <author> Zvonko G. Vranesic, Michael Stumm, Ron White, and David Lewis. </author> <title> "The Hector Multiprocessor". </title> <journal> Computer, </journal> <volume> 24(1), </volume> <month> Jan-uary </month> <year> 1991. </year>
Reference-contexts: This can result in paging or swapping activity. In contrast, if mapped file I/O is used, 4 Hurricane is an experimental operating system designed to study scalability issues for large scale multiprocessors. It is the operating system used on the Hector multiprocessor <ref> [VSWL91] </ref> Page 4 no extra copies of the data are made, so the sys-tem memory is used more effectively.
Reference: [Zho88] <author> S. Zhou. </author> <title> A Trace-Driven Simulation Study of Dynamic Load Balancing. </title> <journal> IEEE Trans. on Softw. Eng., </journal> <volume> 14(9) </volume> <pages> 1327-1341, </pages> <month> September </month> <year> 1988. </year> <title> Availability The MSIO library, as well as all programs used in our tests are available on request from the authors: </title> <note> Orran Krieger (okrieg@eecg.toronto.edu), </note> <author> Michael Stumm (stumm@eecg.toronto.edu) and Ron Unrau (unrau@eecg.toronto.edu). </author> <title> Mail can be sent to: </title> <institution> Orran Krieger Graduate Office Department of Electrical Engineering University of Toronto Toronto, Canada, </institution> <note> M5S-1A4 Page 14 </note>
References-found: 15

