URL: http://www.cs.rutgers.edu/~minsky/papers/invariants-paper.ps
Refering-URL: http://www.cs.rutgers.edu/~minsky/pubs.html
Root-URL: http://www.cs.rutgers.edu
Email: minsky@cs.rutgers.edu  
Title: Towards Architectural Invariants of Evolving Systems  
Author: Naftaly H. Minsky 
Keyword: evolution-invariants, evolving systems, embedded sys tems, law-governed architecture, firewalls in software, auditing.  
Note: Work supported in part by NSF grants No. CCR-9308773  
Date: January 17, 1997  
Address: New Brunswick, NJ, 08903 USA  
Affiliation: Department of Computer Science Rutgers University  
Abstract: An enterprise that uses evolving software is susceptible to destructive and even disastrous effects caused either by inadvertent errors, or by malicious attacks by the programmers employed to maintain this software. It is our thesis that these perils of evolving software can often be tamed by ensuring that suitable architectural principles are maintained as invariants of the evolution of a given software system. For example, it is often useful to partition a system into a set of divisions, constructing permanent| i.e., evolution-invariant|"firewalls" between them, which will limit the effect that one division can have on the others. We define this concept of evolution-invariant, discuss its usefulness, and show how it can be realized under law-governed architecture. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> N. Belkhtair, J. Estublier, and W. Melo. Adele-tempo: </author> <title> An environment for process modeling and enaction. </title> <editor> In A. Finkelstein, J. Kramer, and B. Nu-seibeh, editors, </editor> <booktitle> Software Process Modeling and Technology. </booktitle> <publisher> John Wiley and Sons, </publisher> <year> 1994. </year>
Reference-contexts: The process of software evolution is the subject of an extensive body of research on what is called process-centered environments such as Arcadia [5], Marvel [6], Polis [2], and Adele-Tempo <ref> [1] </ref>. There is a strong similarity between our law|as a means for regulating the process of software development|and the concept of "process programming" in Arcadia, or the set of rules of Marvel Polis or Adele.
Reference: [2] <author> Paolo Ciancarini. </author> <title> Enacting rule-based software processes with polis. </title> <type> Technical report, </type> <institution> University of Pisa, </institution> <month> october </month> <year> 1991. </year>
Reference-contexts: The process of software evolution is the subject of an extensive body of research on what is called process-centered environments such as Arcadia [5], Marvel [6], Polis <ref> [2] </ref>, and Adele-Tempo [1]. There is a strong similarity between our law|as a means for regulating the process of software development|and the concept of "process programming" in Arcadia, or the set of rules of Marvel Polis or Adele.
Reference: [3] <author> C. K. Duby, S. Meyers, and S. P. Reiss. CCEL: </author> <title> A metalanguage for C++. </title> <booktitle> In USENIX C++ Conference, </booktitle> <month> August </month> <year> 1992. </year>
Reference-contexts: It should be pointed out that SA-researchers do not necessarily lack the ability to do such enforcement, they just seem not to see the need for it. Indeed, several researchers <ref> [3, 14, 19] </ref> recently created sophisticated tools whose purpose is to verify that a given system satisfies a given architectural model. These are quite similar to the tools used by Darwin-E to enforce the law|but the mere existance of good tools does not ensure invariance.
Reference: [4] <author> D. Garlan. </author> <title> Research direction in software architecture. </title> <journal> ACM Computing Surveys, </journal> <volume> 27(2) </volume> <pages> 257-261, </pages> <year> 1995. </year>
Reference-contexts: We share with the emerging research on SA the conviction that a complex evolving system needs an explicit architectural model, which provides a framework within which the system can be reasoned about and maintained <ref> [18, 4, 20] </ref>.
Reference: [5] <author> D. Heimbinger. </author> <title> Prescription versus proscription in process-centered environments. </title> <booktitle> In Proceedings of the 6th International Software Process Workshop, </booktitle> <address> Hakkaido Japan, </address> <month> October </month> <year> 1990. </year> <note> To appear. </note>
Reference-contexts: These are quite similar to the tools used by Darwin-E to enforce the law|but the mere existance of good tools does not ensure invariance. The process of software evolution is the subject of an extensive body of research on what is called process-centered environments such as Arcadia <ref> [5] </ref>, Marvel [6], Polis [2], and Adele-Tempo [1]. There is a strong similarity between our law|as a means for regulating the process of software development|and the concept of "process programming" in Arcadia, or the set of rules of Marvel Polis or Adele.
Reference: [6] <author> G. et al. Kaiser. </author> <title> Intelligent assistance for software development and maintenance. </title> <journal> IEEE Software, </journal> <month> May </month> <year> 1988. </year>
Reference-contexts: These are quite similar to the tools used by Darwin-E to enforce the law|but the mere existance of good tools does not ensure invariance. The process of software evolution is the subject of an extensive body of research on what is called process-centered environments such as Arcadia [5], Marvel <ref> [6] </ref>, Polis [2], and Adele-Tempo [1]. There is a strong similarity between our law|as a means for regulating the process of software development|and the concept of "process programming" in Arcadia, or the set of rules of Marvel Polis or Adele.
Reference: [7] <editor> M.M. Lehman. </editor> <booktitle> Program Evolution, </booktitle> <pages> pages 3-24. </pages> <publisher> IFIP, </publisher> <year> 1985. </year> <institution> Teichroew and David Eds. </institution>
Reference-contexts: to multi lingual systems. 1 We say "more or less," because the operational context of such along-lived sequence of systems is itself likely to change, even if relatively slowly. 2 The term "e-system" is used here, in part, to recall a related concept called an "e-type program" introduced by Lehman <ref> [7] </ref>. 3 To provide for a broad range of invariants, an e-system must be subject to an explicit law.
Reference: [8] <author> N.H. Minsky. </author> <title> Law-governed systems. </title> <journal> The IEE Software Engineering Journal, </journal> <month> September </month> <year> 1991. </year>
Reference-contexts: Space limitation precluded any discussion of the structure of these metaRules, but see <ref> [8] </ref> for a general discussion of metaRules and for rule-formation. * Finally, Rule R11 allows the manager of each division to remove rules defined as belonging to his own division.
Reference: [9] <author> N.H. Minsky. </author> <title> Independent on-line monitoring of evolving systems. </title> <booktitle> In Proceedings of the 18th International Conference on Software Engineering (ICSE), </booktitle> <month> March </month> <year> 1996. </year> <note> (also available through http://www.cs.rutgers.edu/~minsky/index.html). </note>
Reference-contexts: For example, it is often useful to partition a system into a set of divisions, constructing permanent|i.e., evolution-invariant|"firewalls" between them, which will limit the effect that one division can have on the others. As another example, recently demonstrated in <ref> [9] </ref>, it is possible to ensure that a given system is auditable, throughout its evolutionary lifetime. The knowledge that a system can be audited effectively, throughout its evolutionary life time, is likely to discourage would be attackers by presenting them with a credible chance of being caught. <p> These include access-control regimes of the kind exemplified by our case study in this paper; more dynamic access-control of the kind used in operating systems [12]; auditability, which is particularly critical for financial systems <ref> [9] </ref>; establishing various programming styles [17]; and making sure that certain programming patterns are not misused [16]. 3 Intensive-Care System: an Informal Case study Consider an e-system S embedded in an intensive care unit. <p> We do this under the Darwin-E environment, assuming that the system is to be written in the Eiffel language. We start with a very brief description of the structure of laws under Darwin-E, referring the reader to <ref> [13, 9] </ref> for more details. <p> These are calls to routines that are guaranteed not to make any permanent change to the system. This concept of side-effect-free routines is established by a small set of primitive rules permanently associated with every e-system under Darwin-E environment, in a manner described in <ref> [9] </ref>. The Initial Evolution Sub-law Let us turn now to the control provided by L 0 over the process of evolution of S , including the manner in which the law itself is allowed to be changed.
Reference: [10] <author> N.H. Minsky. </author> <title> Law-governed regularities in object systems; part 1: An abstract model. </title> <journal> Theory and Practice of Object Systems (TAPOS), </journal> <note> 1996. (to be published; also available through http://www.cs.rutgers.edu/ min-sky/index.html). </note>
Reference-contexts: We start, in Section 2, by defining our concept of evolution-invariant for software that evolves within a single long-lived enterprise. We argue that the realization of evolution-invariants requires software to be built and maintained in a regulated manner, and we introduce the previously developed concept of law-governed architecture (LGA) <ref> [10] </ref>, which can support such invariants. We continue, in Section 3, with an informal case study of an evolving system with its invariants. <p> This is made possible by what we call law-governed architecture (LGA) <ref> [10] </ref>, under which an e-system is defined as follows: Definition 2 An e-system S is a triple hS; L; E i ; where * S is the system, at a given moment in time. (That is, at time t, S is one of the stages) S i of S. * L, <p> Finally, this paper is based on on previous work of the author in his colleagues on law-governed architecture. The focus of the LGA work so far had been the implementation of regularities, which we defined as the conformity of all parts of a system to some architectural principles <ref> [10] </ref>. This focus is extended here to invariants, which are, in a sense, regularities over time.
Reference: [11] <author> N.H. Minsky. </author> <title> Taking software architecture seriously. </title> <type> Technical report, </type> <institution> Rutgers University, </institution> <month> April </month> <year> 1996. </year> <note> (available through http://www.cs.rutgers.edu/~minsky/index.html). 17 </note>
Reference-contexts: The point of this principle is to provide a way for the kernel to keep some of its methods for internal use only. (The manner in which methods can be declared internal to a division, or exported from it, is discussed in <ref> [11] </ref>.) The enforcement of this principle is again essential because it protects the kernel, guaranteeing that a non exported method will never be called by any code in the therapy-division. (Unlike the previous two principles, this one can be established as an invariant under some conventional languages, such as Java, in
Reference: [12] <author> N.H. Minsky and P. Pal. </author> <title> Providing multiple views for objects by means of surrogates. </title> <type> Technical report, </type> <institution> Rutgers University, LCSR, </institution> <month> November </month> <year> 1995. </year> <note> (available through http://www.cs.rutgers.edu/~minsky/index.html). </note>
Reference-contexts: Some indication of this range is given by the type of invariants which we already implemented under the experimental, and relatively primitive, Darwin-E environment. These include access-control regimes of the kind exemplified by our case study in this paper; more dynamic access-control of the kind used in operating systems <ref> [12] </ref>; auditability, which is particularly critical for financial systems [9]; establishing various programming styles [17]; and making sure that certain programming patterns are not misused [16]. 3 Intensive-Care System: an Informal Case study Consider an e-system S embedded in an intensive care unit.
Reference: [13] <author> N.H. Minsky and P. Pal. </author> <title> Law-governed regularities in object systems; part 2: A concrete implementation. </title> <journal> Theory and Practice of Object Systems (TAPOS), </journal> <note> 1996. (to be published; also available through http://www.cs.rutgers.edu/ minsky/index.html). </note>
Reference-contexts: In Section 4 we elaborate our concept of invariant by defining a concept of "strong invariant." In Section 5 we present a concrete implementation of our case study under the experimental environment called Darwin-E <ref> [13] </ref> that supports LGA. <p> with a carefully circumscribed flexibility in molding the law of an e-system during its evolutionary lifetime, while maintaining certain architectural principles intact. 2.1 Supporting Explicit Invariants under LGA We describe here some aspects of environment E of LGA, as it is currently realized by the experimental software-development environment called Darwin-E <ref> [13] </ref>, for systems written in the object-oriented language Eiffel. Additional aspects of this environment will be introduced later, as needed. The state of a given e-system S, under E, is represented by a persistent object-base B S . <p> We do this under the Darwin-E environment, assuming that the system is to be written in the Eiffel language. We start with a very brief description of the structure of laws under Darwin-E, referring the reader to <ref> [13, 9] </ref> for more details. <p> Another regulated interaction is the relation call (f1,c1,f2,c2) which means that routine f1 featured by class c1 contains a call to feature f2 of class c2. These, and other regulated interactions, are discussed in detail in <ref> [13] </ref>. The disposition of a given interaction t is determined by evaluating the "goal" can t with respect to the the system-part of law L, which is expected to contain some rules that deal with this interaction.
Reference: [14] <author> G.C. Murphy, D. Notkin, and K. Sullivan. </author> <title> Software reflextion models: Bridging the gap between source and high level models. </title> <booktitle> In Proceedings of the Third ACM Symposium on the Foundation of Software Engineering, </booktitle> <year> 1995. </year>
Reference-contexts: It should be pointed out that SA-researchers do not necessarily lack the ability to do such enforcement, they just seem not to see the need for it. Indeed, several researchers <ref> [3, 14, 19] </ref> recently created sophisticated tools whose purpose is to verify that a given system satisfies a given architectural model. These are quite similar to the tools used by Darwin-E to enforce the law|but the mere existance of good tools does not ensure invariance.
Reference: [15] <author> Robert Nozick. </author> <title> The Future of Rationality. </title> <publisher> Princeton University Press, </publisher> <year> 1993. </year>
Reference-contexts: We would like to be able to associate with S a property I that holds for all its stages S i , which we will call an invariants of S . But we must keep in mind a distinction made by philosophers of science <ref> [15] </ref> between an "accidental" property of a system, which this system happens to satisfy, and an "essential" (also called "lawlike") property, which the system is compelled to satisfy, due to some law that governs it. It is the latter kind of properties that we wish to call invariants.
Reference: [16] <author> P. Pal. </author> <title> Law-governed support for realizing design patterns. </title> <booktitle> In Proceedings of the 17th Conference on Technology of Object-Oriented Languages and Systems(TOOLS-17), </booktitle> <pages> pages 25-34, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: These include access-control regimes of the kind exemplified by our case study in this paper; more dynamic access-control of the kind used in operating systems [12]; auditability, which is particularly critical for financial systems [9]; establishing various programming styles [17]; and making sure that certain programming patterns are not misused <ref> [16] </ref>. 3 Intensive-Care System: an Informal Case study Consider an e-system S embedded in an intensive care unit.
Reference: [17] <author> P. Pal and N.H. Minsky. </author> <title> Imposing the law of demeter and its variations. </title> <booktitle> In Proceedings of the 18th Conference on Technology of Object-Oriented Languages and Systems(TOOLS-18), </booktitle> <month> August </month> <year> 1996. </year>
Reference-contexts: These include access-control regimes of the kind exemplified by our case study in this paper; more dynamic access-control of the kind used in operating systems [12]; auditability, which is particularly critical for financial systems [9]; establishing various programming styles <ref> [17] </ref>; and making sure that certain programming patterns are not misused [16]. 3 Intensive-Care System: an Informal Case study Consider an e-system S embedded in an intensive care unit.
Reference: [18] <author> D.E. Perry and A.L. Wolf. </author> <title> Foundations for the study of software architecture. </title> <journal> Software Engineering Notes, </journal> <volume> 17(4) </volume> <pages> 40-52, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: We share with the emerging research on SA the conviction that a complex evolving system needs an explicit architectural model, which provides a framework within which the system can be reasoned about and maintained <ref> [18, 4, 20] </ref>.
Reference: [19] <author> M. Sefica, A Sane, and R.H. Campbell. </author> <title> Monitoring complience of a software system with its high-level design model. </title> <booktitle> In Proceedings of the 18th International Conference on Software Engineering (ICSE), </booktitle> <month> March </month> <year> 1996. </year>
Reference-contexts: It should be pointed out that SA-researchers do not necessarily lack the ability to do such enforcement, they just seem not to see the need for it. Indeed, several researchers <ref> [3, 14, 19] </ref> recently created sophisticated tools whose purpose is to verify that a given system satisfies a given architectural model. These are quite similar to the tools used by Darwin-E to enforce the law|but the mere existance of good tools does not ensure invariance.
Reference: [20] <author> M. Shaw. </author> <title> Architectural issues in software reuse: It's not just the functionality, it's the packaging. </title> <booktitle> In Proceedings of IEEE Symp. on Software Reuse, </booktitle> <year> 1995. </year>
Reference-contexts: We share with the emerging research on SA the conviction that a complex evolving system needs an explicit architectural model, which provides a framework within which the system can be reasoned about and maintained <ref> [18, 4, 20] </ref>.
References-found: 20

