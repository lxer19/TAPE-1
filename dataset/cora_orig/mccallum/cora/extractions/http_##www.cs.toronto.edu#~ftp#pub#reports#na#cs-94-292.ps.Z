URL: http://www.cs.toronto.edu/~ftp/pub/reports/na/cs-94-292.ps.Z
Refering-URL: http://www.cs.toronto.edu/NA/reports.html
Root-URL: 
Title: Interpolating Runge-Kutta methods for vanishing delay differential equations  
Author: W.H. Enright and Min Hu 
Keyword: Key Words: Runge-Kutta methods, interpolations, iterations, delay differential equations  
Note: AMS Subject Classifications: 65L05, 65L06  
Abstract: In the numerical solution of delay differential equations by a continuous explicit Runge-Kutta method a difficulty arises when the delay vanishes or becomes smaller than the stepsize the method would like to use. In this situation the standard explicit sequential process of computing the Runge-Kutta stages become an implicit process and an iteration scheme must be adopted. We will consider several alternative iteration schemes and investigate their order. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Calvo, J.I. Montijano and L. Randez, </author> <title> A fifth order interpolant for the Dormand and Prince Runge-Kutta method, </title> <journal> J. Comp. Appl. Math., </journal> <volume> 29 (1990), </volume> <pages> pp. 91-100. </pages>
Reference-contexts: For example, Enright et al [4] consider minimizing max f max je i (t )jg and max f max je i (t )jg while Calvo et al <ref> [1] </ref> minimize the quantity g fl = 0 over the free parameters, where g (t ) = u t i=1 [e i (t )ff (t i )] 2 i=1 [e i (1)ff (t i )] 2 Since our coefficients b i;j (t ) are functions of the variable t and r,
Reference: [2] <author> W.H. Enright, </author> <title> A new error-control for initial value solvers, </title> <journal> Applied Maths. and Computation, </journal> <volume> 31 (1989), </volume> <pages> pp. 288-301. </pages>
Reference-contexts: We only make use of the sixth order formula since we adopt defect error control (see <ref> [2] </ref>). The sixth stage is then not used for the sixth order formula. The standard interpolant u based on one step has been developed for DVERK in [4].
Reference: [3] <author> W.H. Enright, </author> <title> The relative efficiency of alternative defect control schemes for high order continuous Runge-Kutta formulas, </title> <journal> SIAM J. Numer. Anal., </journal> <volume> 30 (1993), </volume> <pages> pp. 1419-1445. </pages>
Reference-contexts: The sixth stage is then not used for the sixth order formula. The standard interpolant u based on one step has been developed for DVERK in [4]. We use the modification of u proposed in <ref> [3] </ref>), where the corresponding code is called CRK6N, since the latter interpolant does not use the sixth stage. The interpolant u is used on the interval [x n1 ; x n + h n =6] and its coefficients can be found in [3]. <p> We use the modification of u proposed in <ref> [3] </ref>), where the corresponding code is called CRK6N, since the latter interpolant does not use the sixth stage. The interpolant u is used on the interval [x n1 ; x n + h n =6] and its coefficients can be found in [3]. <p> DDRK6N | the six order Runge-Kutta code described in section 3. DDVSS6 | a six order Runge-Kutta code from the Verner class. The discrete coefficients was chosen by Sharp and Smart [13] as being near-optimal (as a discrete formula pair) from Verner class. The continuous extensions was developed in <ref> [3] </ref>. The option for handling vanishing delay is the same as that for DDRK6N and the specific coefficients are given in the appendix B. DDVERK | a code described in [5] with the same discrete and continuous coefficients as DDVSS6. <p> Since the coefficients are near-optimal, DDVSS6 is also better than DDRK6N for all problems, which is in accordance with the comparison in <ref> [3] </ref>. For the last test problem, where h &gt; on almost every step and the solutions increase significantly, DDVSS6 and DDVERK are comparable and they are better than the other codes.
Reference: [4] <author> W.H. Enright, K.R. Jackson, S.P. Ntrsett and P.G. Thomsen, </author> <title> Interpolants for RungeKutta formulas, </title> <journal> ACM Trans. Math. Soft., </journal> <volume> 12 (1986), </volume> <pages> pp. 193-218. </pages>
Reference-contexts: n + h n j=1 The formula can be represented by the tableau 0 0 c 3 a 3;1 a 3;2 0 c s a s;1 a s;2 . . . a s;s1 0 Continuous Runge-Kutta methods, i.e, Runge-Kutta methods with interpolants, have been investigated extensively (See for example, [6], <ref> [4] </ref>, [11], [15]). <p> We can illustrate this by considering the interpolant for a sixth order Runge-Kutta formula in <ref> [4] </ref>, the local error on [x n1 ; x n1 + 2h n1 ] can be 90 times larger than that on [x n1 ; x n1 + h n1 ]. <p> In that case, we make use of the standard continuous Runge-Kutta formula, for example, those discussed in Enright et al <ref> [4] </ref>. <p> For example, Enright et al <ref> [4] </ref> consider minimizing max f max je i (t )jg and max f max je i (t )jg while Calvo et al [1] minimize the quantity g fl = 0 over the free parameters, where g (t ) = u t i=1 [e i (t )ff (t i )] 2 i=1 <p> We only make use of the sixth order formula since we adopt defect error control (see [2]). The sixth stage is then not used for the sixth order formula. The standard interpolant u based on one step has been developed for DVERK in <ref> [4] </ref>. We use the modification of u proposed in [3]), where the corresponding code is called CRK6N, since the latter interpolant does not use the sixth stage.
Reference: [5] <author> H. Hayashi and W.H. Enright, </author> <title> A new algorithm for vanishing delay problems, </title> <booktitle> CAMS annual meeting, </booktitle> <month> May 30 - June 2, </month> <year> 1993, </year> <institution> York University (invited oral presentation). </institution>
Reference-contexts: This situation can also arise particularly at relaxed tolerance when the delay does not vanish but the actual optimal stepsize is larger than the size of the delay. Several authors have investigated numerical methods for vanishing delay problems, for example, Tavernini [14], Paul [12], Hayashi & Enright <ref> [5] </ref>, Karoui & Vaillancourt [8]. We shall propose a new approach which combines an iteration method and an interpolation technique based on two timesteps for Runge-Kutta methods. Our numerical tests show favorable aspects compared with the existing approaches. <p> The continuous extensions was developed in [3]. The option for handling vanishing delay is the same as that for DDRK6N and the specific coefficients are given in the appendix B. DDVERK | a code described in <ref> [5] </ref> with the same discrete and continuous coefficients as DDVSS6. The vanishing delay is dealt with by using lower order interpolation based on the information on one step only. DRKLAG | a code developed by K.W. Neves and S. Thompson [10]. <p> Example 2. (Vanishing delay at x = 1) [10] y 0 y 0 2 (x) exp (1 y 2 (x)); x 2 <ref> [0:1; 5] </ref> y 2 (x) = x The exact solution is y 1 (x) = ln (x); y 2 (x) = 1 x . <p> In many cases the derivative discontinuities will be smoothed before a vanishing point as discussed in Neves and Thompson [10, p.13]. For the vanishing delay close to discontinuous points or on the first step, we would recommend adopting a technique using one-step information, such as those in [14], [12], <ref> [5] </ref>.
Reference: [6] <author> M.K. Horn, Fourth- and Fifty-order, </author> <title> scaled Runge-Kutta algorithms for treating dense output, </title> <journal> SIAM J. Numer. Anal., </journal> <volume> 20 (1983), </volume> <pages> pp. 558-568. </pages>
Reference-contexts: y n + h n j=1 The formula can be represented by the tableau 0 0 c 3 a 3;1 a 3;2 0 c s a s;1 a s;2 . . . a s;s1 0 Continuous Runge-Kutta methods, i.e, Runge-Kutta methods with interpolants, have been investigated extensively (See for example, <ref> [6] </ref>, [4], [11], [15]).
Reference: [7] <author> T.E. Hull, W.H. Enright and K.R. Jackson, </author> <title> User's guide for DVERK | A subroutine for solving nonstiff ODE's, </title> <type> Rep. 100, </type> <institution> Dept. of Computer Science, Univ. of Toronto, Canada, </institution> <year> 1976. </year> <month> 12 </month>
Reference-contexts: An example of the special interpolants for a RK formula According to the procedure described in section 2, we constructed interpolants for the seven- stage RK formula of order six developed by Verner and used in the subroutine DVERK <ref> [7] </ref>.
Reference: [8] <author> A. Karoui and R. Vaillancourt, </author> <title> A numerical method for vanishing-lag delay differential equations, </title> <type> Private communication, </type> <year> 1993. </year>
Reference-contexts: Several authors have investigated numerical methods for vanishing delay problems, for example, Tavernini [14], Paul [12], Hayashi & Enright [5], Karoui & Vaillancourt <ref> [8] </ref>. We shall propose a new approach which combines an iteration method and an interpolation technique based on two timesteps for Runge-Kutta methods. Our numerical tests show favorable aspects compared with the existing approaches. <p> DRKLAG | a code developed by K.W. Neves and S. Thompson [10]. This is a fourth order Runge-Kutta code and uses extrapolation to deal with the vanishing delay. SYSDEL | a code developed by Karoui and Vaillancourt <ref> [8] </ref>, which deals with the vanishing delay by using an extrapolation polynomial. <p> The reported statistics in tables 2-4 are: Tol: requested error tolerance; NS: total number of steps; NF: total number of function evaluations; ERR: maximum relative error over mesh points. (For SYSDEL, the error reported is that associated with the end points) The results of SYSDEL is from <ref> [8] </ref>, where example 2 is not considered, so the corresponding 9 Table 2: Numerical results for example 1 Tol DDVSS6 DDRK6N DDVERK DRKLAG SYSDEL NS 13 14 12 34 ERR 2.56E-4 1.37E-4 2.96E-4 4.82E-7 4.05E-3 10 6 NF 299 350 446 527 568 NS 32 38 37 194 ERR 4.64E-7 2.00E-8 <p> 323 ERR 2.70E-4 2.55E-4 1.71E-5 4.54E-4 4.00E-5 10 6 NF 1281 2605 1445 2160 13945 NS 72 150 95 725 ERR 1.72E-6 4.30E-8 4.75E-8 8.59E-10 1.96E-8 10 10 NF 4947 9044 3928 11189 22051 NS 328 421 298 4567 ERR 5.07E-11 8.58E-12 1.01E-11 6.78E-14 1.09E-12 Example 3. (Asymptotically vanishing delay) <ref> [8] </ref> y 0 (x) = (1 + e x )y (x e x ) exp e x+e x y (x) = e xe x The exact solution is y (x) = e xe x .
Reference: [9] <author> K.W. Neves, </author> <title> Automatic integration of functional differential equations: An approach, </title> <journal> ACM Trans. Math. Soft., </journal> <volume> 1 (1986), </volume> <pages> pp. 357-368. </pages>
Reference-contexts: The blank entries corresponding for DRKLAG on example 2 are caused by the effect of round error on the delay argument, the code returns an error message when (x; y) &lt; 0 is detected. Example 1. (Vanishing delay at x = 1) <ref> [9] </ref> y 0 (x) = 1 y (exp (1 x y (x) = ln (x); x 2 [0; 0:1] The exact solution is y (x) = ln (x).
Reference: [10] <author> K.W. Neves and S. Thomson, </author> <title> Solution of systems of functional differential equations with state dependent delays, </title> <type> Technical Report TR-92-003, </type> <institution> Computer Science, Radford University, </institution> <year> 1992. </year>
Reference-contexts: DDVERK | a code described in [5] with the same discrete and continuous coefficients as DDVSS6. The vanishing delay is dealt with by using lower order interpolation based on the information on one step only. DRKLAG | a code developed by K.W. Neves and S. Thompson <ref> [10] </ref>. This is a fourth order Runge-Kutta code and uses extrapolation to deal with the vanishing delay. SYSDEL | a code developed by Karoui and Vaillancourt [8], which deals with the vanishing delay by using an extrapolation polynomial. <p> Example 1. (Vanishing delay at x = 1) [9] y 0 (x) = 1 y (exp (1 x y (x) = ln (x); x 2 [0; 0:1] The exact solution is y (x) = ln (x). Example 2. (Vanishing delay at x = 1) <ref> [10] </ref> y 0 y 0 2 (x) exp (1 y 2 (x)); x 2 [0:1; 5] y 2 (x) = x The exact solution is y 1 (x) = ln (x); y 2 (x) = 1 x . <p> In many cases the derivative discontinuities will be smoothed before a vanishing point as discussed in Neves and Thompson <ref> [10, p.13] </ref>. For the vanishing delay close to discontinuous points or on the first step, we would recommend adopting a technique using one-step information, such as those in [14], [12], [5].
Reference: [11] <author> B. Owren and M. Zennaro, </author> <title> Derivation of efficient, continuous, explicit Runge-Kutta methods, </title> <journal> SIAM J. Sci. Stat. Comput., </journal> <volume> 13 (1992), </volume> <pages> pp. 1488-1501. </pages>
Reference-contexts: + h n j=1 The formula can be represented by the tableau 0 0 c 3 a 3;1 a 3;2 0 c s a s;1 a s;2 . . . a s;s1 0 Continuous Runge-Kutta methods, i.e, Runge-Kutta methods with interpolants, have been investigated extensively (See for example, [6], [4], <ref> [11] </ref>, [15]). By appending an additional s s stages to the discrete RK formula, the general form of a continuous Runge-Kutta formula is u (x n + t h n ) = y n + h n i=1 where t = (x x n )=h n and 0 t 1.
Reference: [12] <author> C.A.H. Paul, </author> <title> Developing a delay differential equation solver, </title> <journal> Applied Numer. Math., </journal> <volume> 9 (1992), </volume> <pages> pp. 403-414. </pages>
Reference-contexts: This situation can also arise particularly at relaxed tolerance when the delay does not vanish but the actual optimal stepsize is larger than the size of the delay. Several authors have investigated numerical methods for vanishing delay problems, for example, Tavernini [14], Paul <ref> [12] </ref>, Hayashi & Enright [5], Karoui & Vaillancourt [8]. We shall propose a new approach which combines an iteration method and an interpolation technique based on two timesteps for Runge-Kutta methods. Our numerical tests show favorable aspects compared with the existing approaches. <p> In many cases the derivative discontinuities will be smoothed before a vanishing point as discussed in Neves and Thompson [10, p.13]. For the vanishing delay close to discontinuous points or on the first step, we would recommend adopting a technique using one-step information, such as those in [14], <ref> [12] </ref>, [5].
Reference: [13] <author> P.W. Sharp and E. </author> <title> Smart, </title> <type> Private communication. </type>
Reference-contexts: For comparison we also report the corresponding results for other related methods that are available. DDRK6N | the six order Runge-Kutta code described in section 3. DDVSS6 | a six order Runge-Kutta code from the Verner class. The discrete coefficients was chosen by Sharp and Smart <ref> [13] </ref> as being near-optimal (as a discrete formula pair) from Verner class. The continuous extensions was developed in [3]. The option for handling vanishing delay is the same as that for DDRK6N and the specific coefficients are given in the appendix B.
Reference: [14] <author> L. Tavernini, </author> <title> One-step methods for the numerical solution of Volterra functional differ-ential equations, </title> <journal> SIAM J. Numer. Anal., </journal> <volume> 8 (1971), </volume> <pages> pp. 786-795. </pages>
Reference-contexts: This situation can also arise particularly at relaxed tolerance when the delay does not vanish but the actual optimal stepsize is larger than the size of the delay. Several authors have investigated numerical methods for vanishing delay problems, for example, Tavernini <ref> [14] </ref>, Paul [12], Hayashi & Enright [5], Karoui & Vaillancourt [8]. We shall propose a new approach which combines an iteration method and an interpolation technique based on two timesteps for Runge-Kutta methods. Our numerical tests show favorable aspects compared with the existing approaches. <p> In many cases the derivative discontinuities will be smoothed before a vanishing point as discussed in Neves and Thompson [10, p.13]. For the vanishing delay close to discontinuous points or on the first step, we would recommend adopting a technique using one-step information, such as those in <ref> [14] </ref>, [12], [5].
Reference: [15] <author> J. Verner, </author> <title> Differentiable interpolants for high-order Runge-Kutta methods, </title> <journal> SIAM J. Numer. Anal., </journal> <volume> 30 (1993), </volume> <pages> pp. 1446-1466. </pages>
Reference-contexts: h n j=1 The formula can be represented by the tableau 0 0 c 3 a 3;1 a 3;2 0 c s a s;1 a s;2 . . . a s;s1 0 Continuous Runge-Kutta methods, i.e, Runge-Kutta methods with interpolants, have been investigated extensively (See for example, [6], [4], [11], <ref> [15] </ref>). By appending an additional s s stages to the discrete RK formula, the general form of a continuous Runge-Kutta formula is u (x n + t h n ) = y n + h n i=1 where t = (x x n )=h n and 0 t 1. <p> ) b i;s (t ) b i;s+1 (t ) b i;s+2 (t ) . . . b i;s+i (t ) b i;s+i+1 (t ) where the coefficients b i;j (t ) = `=1 The above tableau has the same form as the standard continuous Runge-Kutta so that the approach ([11], <ref> [15] </ref>) for analyzing the order and local error can be adopted here.
References-found: 15

