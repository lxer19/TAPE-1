URL: http://http.cs.berkeley.edu/~asah/papers/other/printed/widom-static-analysis.ps.gz
Refering-URL: http://http.cs.berkeley.edu/~asah/papers/other/printed/
Root-URL: http://www.cs.berkeley.edu
Email: faiken,widomg@almaden.ibm.com, hellers@cs.wisc.edu  
Title: Static Analysis Techniques for Predicting the Behavior of Database Production Rules  
Author: Alexander Aiken Jennifer Widom Joseph M. Hellerstein 
Address: 650 Harry Road San Jose, CA 95120  
Affiliation: IBM Almaden Research Center  
Abstract: Methods are given for statically analyzing sets of database production rules to determine if the rules are (1) guaranteed to terminate, (2) guaranteed to produce a unique final database state, and (3) guaranteed to produce a unique stream of observable actions. If the analysis determines that one of these properties is not guaranteed, it isolates the rules responsible for the problem and determines criteria that, if satisfied, guarantee the property. The analysis methods are presented in the context of the Starburst Rule System.
Abstract-found: 1
Intro-found: 1
Reference: [ACL91] <author> R. Agrawal, R.J. Cochrane, and B. Lindsay. </author> <title> On maintaining priorities in a production rule system. </title> <booktitle> In Proceedings of the Seventeenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 479-487, </pages> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: In the context of rule conditions and for the purposes of rule analysis, predicates and select statements are equivalent [WCL91]. 2 The system actually orders non-prioritized rules using an algorithm based on rule creation time <ref> [ACL91] </ref>, but this is an implementation feature separate from the semantics of the rule language. 4 sees each modification exactly once.) Rule processing terminates when a rollback operation is executed or when there are no more triggered rules.
Reference: [AWH92] <author> A. Aiken, J. Widom, and J.M. Hellerstein. </author> <title> Behavior of database production rules: Termination, confluence, and observable determinism. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 59-68, </pages> <address> San Diego, California, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: In [CW90] we presented preliminary methods for analyzing termination in the context of deriving production rules for integrity constraint maintenance; these methods form the basis of our approach to termination in this paper. An initial presentation of our analysis methods appears in <ref> [AWH92] </ref>; in this paper we provide additional intuition, refine and extend the methods in [AWH92], include numerous examples, and provide proofs for all lemmas and theorems. 1.2 Outline of Paper As an introduction to active databases and to establish a basis for our analysis techniques, in Section 2 we give a <p> An initial presentation of our analysis methods appears in <ref> [AWH92] </ref>; in this paper we provide additional intuition, refine and extend the methods in [AWH92], include numerous examples, and provide proofs for all lemmas and theorems. 1.2 Outline of Paper As an introduction to active databases and to establish a basis for our analysis techniques, in Section 2 we give a syntax and semantics for the Starburst production rule language; Section 3 then motivates the
Reference: [BFKM85] <author> L. Brownston, R. Farrell, E. Kant, and N. Martin. </author> <title> Programming Expert Systems in OPS5: An Introduction to Rule-Based Programming. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1985. </year>
Reference-contexts: First, it considers simplified versions of the OPS5 production rule language <ref> [BFKM85] </ref>. OPS5 has a quite different model of rule processing than most active database systems, including Starburst. Second, the goal of previous work is to impose restrictions and/or orderings on OPS5 rule sets such that unique fixed points are guaranteed.
Reference: [CW90] <author> S. Ceri and J. Widom. </author> <title> Deriving production rules for constraint maintenance. </title> <booktitle> In Proceedings of the Sixteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 566-577, </pages> <address> Brisbane, Australia, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: In [KU91], the issue of rule set termination is discussed, along with the issue of conflicting updates|determining when one rule may undo changes made by a previous rule. Although models 2 and a problem-solving architecture for rule analysis are proposed, no algorithms are given. In <ref> [CW90] </ref> we presented preliminary methods for analyzing termination in the context of deriving production rules for integrity constraint maintenance; these methods form the basis of our approach to termination in this paper. <p> We take as an assumption that individual rule actions terminate. Hence, in terms of execution graphs, the rules in R are guaranteed to terminate iff all paths in every execution graph for R are finite. As suggested in <ref> [CW90] </ref>, termination is analyzed by constructing a directed triggering graph for the rules in R, denoted TG R . The nodes in TG R represent all rules r 2 R such that Rollback (r) is false; the edges in TG R represent the Triggers relationship. <p> As part of a case study, we used this approach to establish termination for a set of rules in a power network design application <ref> [CW90] </ref>. 8 Confluence Next we want to determine whether the rules in R are confluent. That is, we want to determine if the final database state at termination of rule processing can depend on which rule is chosen for consideration when multiple non-prioritized rules are triggered.
Reference: [DW92] <author> U. Dayal and J. Widom. </author> <title> Active database systems. </title> <booktitle> In ACM SIGMOD International Conference on Management of Data (tutorial), </booktitle> <address> San Diego, California, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Production rules in database systems allow specification of data manipulation operations that are executed automatically whenever certain events occur or conditions are met, making the database system active <ref> [DW92] </ref>. Database production rules provide a general and powerful mechanism for many database features, including integrity constraint enforcement, derived data maintenance, triggers, alerters, authorization checking, and versioning. In addition, active database systems provide a convenient platform for large and efficient knowledge-bases and expert systems.
Reference: [H + 90] <author> L.M. Haas et al. </author> <title> Starburst mid-flight: As the dust clears. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 2(1) </volume> <pages> 143-160, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: Our analysis methods have been developed and are presented in the context of the Starburst Rule System [WCL91], a production rules facility integrated into the Starburst extensible relational DBMS prototype at the IBM Almaden Research Center <ref> [H + 90] </ref>.
Reference: [HH91] <author> J.M. Hellerstein and M. Hsu. </author> <title> Determinism in partially ordered production systems. </title> <institution> IBM Research Report RJ 8009, IBM Almaden Research Center, </institution> <address> San Jose, California, </address> <month> March </month> <year> 1991. </year>
Reference-contexts: Some technical comparisons can be drawn between this work and the results in [HH91,Ras90, ZH90]. In <ref> [HH91] </ref>, a version of the OPS5 production rule language is considered, and a class of rule sets is identified that (conservatively) guarantees the unique fixed point property, which essentially corresponds to our notion of confluence. By defining a (reasonable) mapping between our language and the language in [HH91], we have shown <p> In <ref> [HH91] </ref>, a version of the OPS5 production rule language is considered, and a class of rule sets is identified that (conservatively) guarantees the unique fixed point property, which essentially corresponds to our notion of confluence. By defining a (reasonable) mapping between our language and the language in [HH91], we have shown that our confluence requirements properly subsume their fixed point requirements: if a rule set has the unique fixed point property according to [HH91], then our methods determine that the corresponding rule set is confluent, but not always vice-versa. The methods in [HH91] have previously been shown to <p> By defining a (reasonable) mapping between our language and the language in <ref> [HH91] </ref>, we have shown that our confluence requirements properly subsume their fixed point requirements: if a rule set has the unique fixed point property according to [HH91], then our methods determine that the corresponding rule set is confluent, but not always vice-versa. The methods in [HH91] have previously been shown to subsume those in [Ras90,ZH90], hence our approach, although still conservative, appears quite accurate when compared with previous work. <p> language and the language in <ref> [HH91] </ref>, we have shown that our confluence requirements properly subsume their fixed point requirements: if a rule set has the unique fixed point property according to [HH91], then our methods determine that the corresponding rule set is confluent, but not always vice-versa. The methods in [HH91] have previously been shown to subsume those in [Ras90,ZH90], hence our approach, although still conservative, appears quite accurate when compared with previous work.
Reference: [Hue80] <author> G. Huet. </author> <title> Confluent reductions: Abstract properties and applications to term rewriting systems. </title> <journal> Journal of the ACM, </journal> <volume> 27(4) </volume> <pages> 797-821, </pages> <month> October </month> <year> 1980. </year>
Reference-contexts: most one final state. (Recall that all final states in an execution graph have an empty set of triggered rules, so two different final states cannot represent the same database state.) Confluence for production rules is a particularly difficult problem because, in addition to the standard problems associated with confluence <ref> [Hue80] </ref>, we must take into account the interactions between rule triggering and rule priorities. <p> for any three states S, S i , and S j in EG such that S fl ! S i and S fl ! S j , there is a fourth state S 0 such that S i fl ! S 0 and S j Proof: Classic result; see e.g. <ref> [Hue80] </ref>. 6 Such a path does not exist if r i or r j is untriggered along all potential paths, or if rules with precedence over r i or r j are considered indefinitely along all potential paths. <p> These are highly unlikely (and probably undesirable) circumstances, but are why this is an observation rather than a theorem. 7 Sometimes the term confluence is used to denote the supposition of this Lemma <ref> [Hue80] </ref>, which then implies confluence in the sense that we've defined it. 15 S S j @ fl @ fl fl (a) Based on paths S S j @ r j @ fl fl (b) Based on edges We use Lemma 8.4 as the basis for our analysis techniques.
Reference: [KU91] <editor> A.P. Karadimce and S.D. Urban. </editor> <title> Diagnosing anomalous rule behavior in databases with integrity maintenance production rules. </title> <booktitle> In Third Workshop on Foundations of Models and Languages for Data and Objects, </booktitle> <address> Aigen, Austria, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: Our goal, on the other hand, is to permit arbitrary rule sets and provide useful information about their behavior in the database setting. In Section 11 we make some additional, more technical, comparisons, and we explain how our analysis techniques subsume results in [HH91,Ras90,ZH90]. In <ref> [KU91] </ref>, the issue of rule set termination is discussed, along with the issue of conflicting updates|determining when one rule may undo changes made by a previous rule. Although models 2 and a problem-solving architecture for rule analysis are proposed, no algorithms are given.
Reference: [Ras90] <author> L. Raschid. </author> <title> Maintaining consistency in a stratified production system. </title> <booktitle> In Proceedings of the AAAI National Conference on Artificial Intelligence, </booktitle> <year> 1990. </year> <month> 33 </month>
Reference: [WCL91] <author> J. Widom, R.J. Cochrane, and B.G. Lindsay. </author> <title> Implementing set-oriented production rules as an extension to Starburst. </title> <booktitle> In Proceedings of the Seventeenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 275-285, </pages> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: If termination, confluence, or observable determinism is desired but not guaranteed, then the user may verify that the necessary criteria are satisfied or may modify the rule set and try again. Our analysis methods have been developed and are presented in the context of the Starburst Rule System <ref> [WCL91] </ref>, a production rules facility integrated into the Starburst extensible relational DBMS prototype at the IBM Almaden Research Center [H + 90]. <p> In the context of rule conditions and for the purposes of rule analysis, predicates and select statements are equivalent <ref> [WCL91] </ref>. 2 The system actually orders non-prioritized rules using an algorithm based on rule creation time [ACL91], but this is an implementation feature separate from the semantics of the rule language. 4 sees each modification exactly once.) Rule processing terminates when a rollback operation is executed or when there are no
Reference: [WF90] <author> J. Widom and S.J. Finkelstein. </author> <title> Set-oriented production rules in relational database systems. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 259-270, </pages> <address> Atlantic City, New Jersey, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: A formal theory of transitions and their net effects appears in <ref> [WF90] </ref>.
Reference: [Wid92] <author> J. Widom. </author> <title> The Starburst Rule System: Language design, implementation, </title> <journal> and applications. IEEE Data Engineering Bulletin, Special Issue on Active Databases, </journal> <volume> 15(4) </volume> <pages> 15-18, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: User-invoked rule processing may specify that only a subset of the defined rules should be considered for execution, rather than all rules <ref> [Wid92] </ref>. Hence, the rule programmer may want to predict the behavior of a subset of the rules. The semantics of rule processing for rule subsets is identical to rule processing in the general case, so our analysis methods can be applied directly to arbitrary rule subsets.
Reference: [ZH90] <author> Y. Zhou and M. Hsu. </author> <title> A theory for rule triggering systems. </title> <booktitle> In Advances in Database Technology| EDBT '90, Lecture Notes in Computer Science 416, </booktitle> <pages> pages 407-421. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <month> March </month> <year> 1990. </year> <month> 34 </month>
Reference-contexts: Some technical comparisons can be drawn between this work and the results in <ref> [HH91,Ras90, ZH90] </ref>. In [HH91], a version of the OPS5 production rule language is considered, and a class of rule sets is identified that (conservatively) guarantees the unique fixed point property, which essentially corresponds to our notion of confluence.
References-found: 14

