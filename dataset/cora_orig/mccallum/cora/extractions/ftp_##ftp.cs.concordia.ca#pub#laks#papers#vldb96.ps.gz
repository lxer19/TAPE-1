URL: ftp://ftp.cs.concordia.ca/pub/laks/papers/vldb96.ps.gz
Refering-URL: http://www.cs.concordia.ca/~grad/gingras/
Root-URL: http://www.cs.concordia.ca
Email: flaks,subbug@cs.concordia.ca  
Title: SchemaSQL A Language for Interoperability in Relational Multi-database Systems  
Author: Laks V. S. Lakshmanan Fereidoon Sadri Iyer N. Subramanian 
Address: Canada.  
Affiliation: University of North Carolina at Greensboro. Dept of Computer Science, Concordia University, Montreal,  
Note: This work was supported by grants from the Natural Sciences and Engineering Research Council of Canada (NSERC), the National Science Foundation (NSF), and The  
Abstract: We provide a principled extension of SQL, called SchemaSQL , that offers the capability of uniform manipulation of data and meta-data in relational multi-database systems. We develop a precise syntax and semantics of SchemaSQL in a manner that extends traditional SQL syntax and semantics, and demonstrate the following. (1) SchemaSQL retains the flavour of SQL while supporting querying of both data and meta-data. (2) It can be used to represent data in a database in a structure substantially different from original database, in which data and meta-data may be interchanged. (3) It also permits the creation of views whose schema is dynamically dependent on the contents of the input instance. (4) While aggregation in SQL is restricted to values occurring in one column at a time, SchemaSQL permits "horizontal" aggregation and even aggregation over more general "blocks" of information. (5) SchemaSQL provides a great facility for interoperability and data/meta-data management in relational multi-database systems. We provide many examples to illustrate our claims. We outline an architecture for the implementation of SchemaSQL and discuss implementation algorithms based on available database technology that allows for powerful integration of SQL based relational DBMS. z Dept of Mathematical Sciences, University of North Car-olina, Greensboro, NC. sadri@uncg.edu Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the VLDB copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Very Large Data Base Endowment. To copy otherwise, or to republish, requires a fee and/or special permission from the Endowment. Proceedings of the 22nd VLDB Conference Mumbai(Bombay), India, 1996 
Abstract-found: 1
Intro-found: 1
Reference: [ACM90] <editor> ACM. </editor> <booktitle> ACM Computing Surveys, </booktitle> <volume> volume 22, </volume> <month> Sept </month> <year> 1990. </year> <note> Special issue on HDBS. </note>
Reference-contexts: Systems capable of operating over a distributed network and encompassing a heterogeneous mix of computers, operating systems, communication links, and local database systems have become highly desirable, and commercial products are slowly appearing on the market. For surverys on MDBS, see <ref> [ACM90] </ref> (in particular, Sheth and Larson, and Litwin, Mark, and Roussopoulos), and Hsiao [Hsi92]. One of the fundamental requirements in a multi-database system is interoperability, which is the ability to uniformly share, interpret, and manipulate information in component databases in a MDBS.
Reference: [ASD + 91] <author> Ahmed, R., Smedt, P., Du, W., Kent, W., Ketabchi, A., and Litwin, W. </author> <title> The Pegasus heterogeneous multidatabase system. </title> <booktitle> IEEE Computer, </booktitle> <month> December </month> <year> 1991. </year>
Reference-contexts: Many object-oriented query languages, by virtue of treating the schema information as objects, are capable of powerful meta-data querying and manipulation. Some of these languages include XSQL (Kifer, Kim, and Sagiv [KKS92]), HOSQL (Ahmed et al. <ref> [ASD + 91] </ref>), and OSQL (Chomicki and Litwin [CL93]). XSQL ([KKS92]) has its logical foundations in F-logic ([KLW95]) and is capable of querying and restructuring object-oriented databases.
Reference: [Bee93] <author> Beech, D. </author> <title> Collections of objects in SQL3. </title> <booktitle> In Proc. 19th VLDB Conference, </booktitle> <year> 1993. </year>
Reference: [BR86] <author> Bancilhon, F. and Ramakrishnan, R. </author> <title> An amateur's introduction to recursive query-processing strategies. </title> <booktitle> In Proc. ACM SIG-MOD, </booktitle> <year> 1986. </year>
Reference-contexts: Thus, the spawned SQL statements need to be submitted (in batches) to the component databases in such a way that they are evaluated in minimal number of connections to the databases. 5. In view of the sideways information passing (sip) <ref> [BR86] </ref> technique inherent in our algorithm, reordering of variable declarations would result in more efficient query processing. However, the heuristics that meta-variables obtain a significantly less number of bindings when compared to other variables in a multidatabase setting, Page 8 presents novel issues in reordering.
Reference: [CCS95] <author> Codd, E.F., Codd, </author> <title> S.B., and Sal-ley C.T. Providing OLAP (on-line analytical processing) to user-analysts: An IT mandate, </title> <note> 1995. White paper www.arborsoft.com/papers/coddTOC.html Page 11 </note>
Reference: [CL93] <author> Chomicki, J. and Litwin, W. </author> <title> Declar--ative definition of object-oriented multi-database mappings. In Ozsu, M.T, Dayal, U, and Valduriez, P, editors, Distributed Object Management. </title> <editor> M. </editor> <publisher> Kaufmann Publishers, </publisher> <address> Los Altos, California, </address> <year> 1993. </year>
Reference-contexts: Many object-oriented query languages, by virtue of treating the schema information as objects, are capable of powerful meta-data querying and manipulation. Some of these languages include XSQL (Kifer, Kim, and Sagiv [KKS92]), HOSQL (Ahmed et al. [ASD + 91]), and OSQL (Chomicki and Litwin <ref> [CL93] </ref>). XSQL ([KKS92]) has its logical foundations in F-logic ([KLW95]) and is capable of querying and restructuring object-oriented databases. However, it is not suitable for the needs addressed in this paper as its syntax was not designed with interoperability as a main goal.
Reference: [GBLP96] <author> Gray, J., Bosworth, A., Layman, A., and Pirahesh H. </author> <title> Data Cube: A relational aggregation operator generalizing group-by, </title> <booktitle> cross-tab, and sub-totals. In Proceedings of the 12th International Conference on Data Engineering, </booktitle> <pages> pages 152-159, </pages> <year> 1996. </year>
Reference: [GLRS93] <author> John Grant, Witold Litwin, Nick Rous-sopoulos, and Timos Sellis. </author> <title> Query languages for relational multidatabases. </title> <journal> VLDB Journal, </journal> <volume> 2(2) </volume> <pages> 153-171, </pages> <year> 1993. </year>
Reference-contexts: Further, we also discuss the implementation of SchemaSQL on a platform of SQL servers. In <ref> [Lit89, GLRS93] </ref>, Litwin et al. propose a multi-database manipulation language called MSQL that is capable of expressing queries over multiple databases in a single statement. MSQL extends the traditional functions of SQL to the context of a federation of databases.
Reference: [GLS96] <author> Gyssens, Marc, Lakshmanan, L.V.S., and Subramanian, I. N. </author> <title> Tables as a paradigm for querying and restructuring. </title> <booktitle> In Proc. ACM Symposium on Principles of Database Systems (PODS), </booktitle> <month> June </month> <year> 1996. </year>
Reference: [HM93] <author> Hammer, J. and McLeod, D. </author> <title> An approach to resolving semantic heterogeneity in a federation of autonomous, heterogeneous database systems. </title> <journal> Intl Journal of Intelligent & Cooperative Information Systems, </journal> <volume> 2(1), </volume> <year> 1993. </year>
Reference-contexts: This semantic heterogeneity problem has been discussed in detail in [Sig91], [KCGS93], <ref> [HM93] </ref>. A promising approach to dealing with semantic heterogeneity is the proposal of Sciore, Siegel, and Rosenthal [SSR94]. The main idea behind their proposal is the notion of semantic values, obtained by introducing an explicit context information to each data object in the database.
Reference: [Hsi92] <author> Hsiao, D.K. </author> <title> Federated databases and systems: Part-one a tutorial on their data sharing. </title> <journal> VLDB Journal, </journal> <volume> 1 </volume> <pages> 127-179, </pages> <year> 1992. </year>
Reference-contexts: For surverys on MDBS, see [ACM90] (in particular, Sheth and Larson, and Litwin, Mark, and Roussopoulos), and Hsiao <ref> [Hsi92] </ref>. One of the fundamental requirements in a multi-database system is interoperability, which is the ability to uniformly share, interpret, and manipulate information in component databases in a MDBS. Almost all factors of heterogeneity in a MDBS pose challenges for interoperability.
Reference: [KCGS93] <author> Kim, W., Choi, I., Gala, S.K., and Scheevel, M. </author> <title> On resolving schematic heterogeneity in multidatabase systems. Distributed and Parallel Databases, </title> <type> 1(3), </type> <year> 1993. </year>
Reference-contexts: This semantic heterogeneity problem has been discussed in detail in [Sig91], <ref> [KCGS93] </ref>, [HM93]. A promising approach to dealing with semantic heterogeneity is the proposal of Sciore, Siegel, and Rosenthal [SSR94]. The main idea behind their proposal is the notion of semantic values, obtained by introducing an explicit context information to each data object in the database.
Reference: [KGK + 95] <author> Kelley, W., Gala, S. K., Kim, W., Reyes, T.C., and Graham, B. </author> <title> Schema architecture of the UniSQL/M multidatabase system. </title> <booktitle> In Modern Database Systems. </booktitle> <year> 1995. </year>
Reference-contexts: Unlike SchemaSQL which can provide a `dynamic global schema', ad hoc queries that refer the data and schema components of the local databases in a single statement cannot be posed in their framework. UniSQL/M <ref> [KGK + 95] </ref> is a multidatabase system for managing a heterogeneous collection of relational database systems.
Reference: [KKS92] <author> Kifer, Michael, Kim, Won, and Sa-giv, Yehoshua. </author> <title> Querying object-oriented databases. </title> <booktitle> In Proc. ACM SIGMOD, </booktitle> <pages> pages 393-402, </pages> <year> 1992. </year>
Reference-contexts: Many object-oriented query languages, by virtue of treating the schema information as objects, are capable of powerful meta-data querying and manipulation. Some of these languages include XSQL (Kifer, Kim, and Sagiv <ref> [KKS92] </ref>), HOSQL (Ahmed et al. [ASD + 91]), and OSQL (Chomicki and Litwin [CL93]). XSQL ([KKS92]) has its logical foundations in F-logic ([KLW95]) and is capable of querying and restructuring object-oriented databases. <p> However, it is not suitable for the needs addressed in this paper as its syntax was not designed with interoperability as a main goal. Besides, the complex nature of this query language raises concerns about effective and efficient implementability, a concern not addressed in <ref> [KKS92] </ref>. The Pegasus Multi-database system ([ASD + 91]) uses a language called HOSQL as its data manipulation language. HOSQL is a functional object-oriented language that incorporates non-procedural statements to manipulate multiple databases.
Reference: [KLK91] <author> Krishnamurthy, R., Litwin, W., and Kent, W. </author> <title> Language features for interoperability of databases with schematic discrepancies. </title> <booktitle> In Proc. ACM SIGMOD, </booktitle> <year> 1991. </year>
Reference-contexts: We focus on syntactic issues here. We consider the problem of interoperability among a number of component relational databases storing semantically similar information in structurally dissimilar ways. As was pointed out in <ref> [KLK91] </ref>, the requirements for interoperability even in this case fall beyond the capabilities of conventional languages like SQL. <p> However, even though it is computationally complete, to our knowledge it does not directly support the kind of higher-order features in SchemaSQL. Krishnamurthy and Naqvi [KN88] and Krishna-murthy, Litwin, and Kent <ref> [KLK91] </ref> are early and influential proposals that demonstrated the power of using variables that uniformly range over data and meta-data, for schema browsing and interoperability.
Reference: [KLW95] <author> Kifer M., Lausen G., and Wu J. </author> <title> Logical foundations for object-oriented and frame-based languages. </title> <journal> Journal of ACM, </journal> <month> May </month> <year> 1995. </year>
Reference: [KN88] <author> Krishnamurthy, R. and Naqvi, S. </author> <title> Towards a real horn clause language. </title> <booktitle> In Proc. 14th VLDB Conf., </booktitle> <pages> pages 252-263, </pages> <year> 1988. </year>
Reference-contexts: The emerging standard for SQL3 ([SQL96, Bee93]) supports ADTs and oid's, and thus shares some features with higher-order languages. However, even though it is computationally complete, to our knowledge it does not directly support the kind of higher-order features in SchemaSQL. Krishnamurthy and Naqvi <ref> [KN88] </ref> and Krishna-murthy, Litwin, and Kent [KLK91] are early and influential proposals that demonstrated the power of using variables that uniformly range over data and meta-data, for schema browsing and interoperability.
Reference: [LBT92] <author> Lefebvre, A., Bernus, P., and Topor, R. </author> <title> Query transformation for accessing heterogeneous databases. </title> <booktitle> In Workshop on Deductive Databases in conjunction with JICSLP, </booktitle> <pages> pages 31-40, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: In other related work, [Ros92] proposes an interesting algebra and calculus that treats relation names at par with the values in a relation. However, its expressive power is limited in that attribute names, database names, and comprehensive aggregation capabilities are not supported. In <ref> [LBT92] </ref>, Lefebvre, Bernus, and Topor use F-logic ([KLW95]), to reconcile schematic discrepancies in a federation of relational databases.
Reference: [Lit89] <author> Litwin, W. MSQL: </author> <title> A multidatabase lan guage. </title> <journal> Information Science, </journal> <volume> 48(2), </volume> <year> 1989. </year>
Reference-contexts: Further, we also discuss the implementation of SchemaSQL on a platform of SQL servers. In <ref> [Lit89, GLRS93] </ref>, Litwin et al. propose a multi-database manipulation language called MSQL that is capable of expressing queries over multiple databases in a single statement. MSQL extends the traditional functions of SQL to the context of a federation of databases.
Reference: [LN90] <author> Lipton, Richard and Naughton, Jeffrey. </author> <title> Query size estimation by adaptive sampling. </title> <booktitle> In Proc. ACM PODS, </booktitle> <year> 1990. </year>
Reference-contexts: We should make use of works such as <ref> [LN90, LNS90] </ref> to determine which of the VIT's should be generated first so that the tightest bindings are passed for generating subsequent VITs. 7. If parallelism can be supported, SQL queries to multiple databases can be submitted in parallel.
Reference: [LNS90] <author> Lipton, Richard, Naughton, Jeffrey, and Schneider, Donovan. </author> <title> Practical selectivity estimation through adaptive sampling. </title> <booktitle> In Proc. ACM SIGMOD, </booktitle> <year> 1990. </year>
Reference-contexts: We should make use of works such as <ref> [LN90, LNS90] </ref> to determine which of the VIT's should be generated first so that the tightest bindings are passed for generating subsequent VITs. 7. If parallelism can be supported, SQL queries to multiple databases can be submitted in parallel.
Reference: [LSS93] <author> Lakshmanan, L.V.S., Sadri, F., and Sub-ramanian, I. N. </author> <title> On the logical foundations of schema integration and evolution in heterogeneous database systems. </title> <booktitle> In Proc. 3rd International Conference on Deductive and Object-Oriented Databases (DOOD '93). </booktitle> <publisher> Springer-Verlag, </publisher> <address> LNCS-760, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: They also demonstrate that the tabular algebra can serve as a foundation for OLAP. Restructuring views expressible in SchemaSQL can also be expressed in their algebra but they do not address aggregate computations. In <ref> [LSS96a, LSS93] </ref>, we proposed a logic-based query/restructuring language SchemaLog, for facilitating interoperability in multidatabase systems. SchemaLog admits a simple syntax and semantics, but allows for expressing powerful queries and programs in the context of schema browsing and interoperability.
Reference: [LSS96a] <author> Lakshmanan, L.V.S., Sadri, F., and Sub-ramanian, I. N. </author> <title> Logic and algebraic languages for interoperability in multidatabase systems. </title> <type> Technical report, </type> <institution> Concordia University, Montreal, </institution> <month> Feb </month> <year> 1996. </year> <note> Accepted to the Journal of Logic Programming. </note>
Reference-contexts: The following SchemaSQL statements perform the restructuring that yields univInfoB. create view univInfoB::salstats (dept, T.cat) as select D, T.D from univInfoA::stats T, univInfoA::stats-&gt; D, where D isa `dept' create view 4 The syntax of the type specification rules is based on the syntax of SchemaLog <ref> [LSS96a] </ref>. Page 9 univInfoB::timestats (prov, T.cat) as select P, T.P from univInfoA::stats T, univInfoA::stats-&gt; P, where P isa `prov' Note how the type information is used in the where clause to elegantly specify the range of the attribute variables. <p> They also demonstrate that the tabular algebra can serve as a foundation for OLAP. Restructuring views expressible in SchemaSQL can also be expressed in their algebra but they do not address aggregate computations. In <ref> [LSS96a, LSS93] </ref>, we proposed a logic-based query/restructuring language SchemaLog, for facilitating interoperability in multidatabase systems. SchemaLog admits a simple syntax and semantics, but allows for expressing powerful queries and programs in the context of schema browsing and interoperability. <p> SchemaLog admits a simple syntax and semantics, but allows for expressing powerful queries and programs in the context of schema browsing and interoperability. A formal account of SchemaLog's syntax and semantics can be found in <ref> [LSS96a] </ref>. SchemaLog can also express the complex forms of aggregation discussed in this paper. SchemaSQL has been to a large extent inspired by SchemaLog. Indeed, the logical underpinnings of SchemaSQL can be found in SchemaLog [LSS96b]. However, SchemaSQL is not obtained by simply "SQL-izing" SchemaLog.
Reference: [LSS96b] <author> Lakshmanan, L.V.S., Sadri, F., and Subra-manian, I. N. </author> <title> SchemaSQL a language for querying and restructuring multidatabase systems. </title> <type> Technical report, </type> <institution> Concordia University, Montreal, </institution> <year> 1996. </year> <note> In Preparation. </note>
Reference-contexts: In this paper we illustrate the semantics of SchemaSQL mainly via examples. A precise semantics of SchemaSQL, together with many more examples illustrating its powerful features can be found in <ref> [LSS96b] </ref>. 2 Syntax Our goal is to develop SchemaSQL as a principled extension of SQL. To this end, we briefly analyze the syntax of SQL, and then develop the syntax of SchemaSQL as a natural extension. <p> We illustrate these points with examples. The formal development of semantics can be found in <ref> [LSS96b] </ref>. Example 3.3 The query select T.category, avg (T.D) (Q3) from univ-B::salInfo-&gt; D, univ-B::salInfo T where D &lt;&gt; "category" group by T.category computes the average salary floor of each category of employees over all departments in univ-B. This captures horizontal aggregation. <p> The restructuring in this example corresponds to a many-to-one mapping from instantiations to output tuples. In the full paper <ref> [LSS96b] </ref>, we present additional examples to illustrate restructuring views that distribute values from one tuple into many relations, and vice-versa. <p> Due to the varying degrees of autonomy component databases enjoy in a multidatabase system, some or all of this information may not available. In <ref> [LSS96b] </ref> we describe a flexible architecture that makes use of as much of the available information as possible. In discussions here, we assume that the component database names as well as their schema information is available in the SchemaSQL server. <p> Our algorithm below considers SchemaSQL queries with a fixed output schema possibly with aggregation. A complete algorithm for the implementation of the full language, as well as novel query optimization strategies are discussed in <ref> [LSS96b] </ref>. In the following, we assume that the FST has the scheme FST (db-name, rel-name, attr-name). Also, we refer to the db-name, rel-name, and attr-name variables (defined in Definition 2.1) collectively as meta-variables. Algorithm 5.1 SchemaSQL Query Processing INPUT: A SchemaSQL query with a fixed output schema and aggregation. <p> More general kind of `block' aggregations can also be handled in a similar way details can be found in <ref> [LSS96b] </ref>, which also contains the proof of the follow ing theorem. Theorem 5.1 Algorithm 5.1 correctly computes an swers to SchemaSQL queries. <p> We propose techniques for intensionally specifying the semantic values as well as for algorithmically deriving the (intensional) semantic value specification of a restructured database, given the old specification and the SchemaSQL view definition. The following example illustrates our ideas. Details can be found in <ref> [LSS96b] </ref>. Example 6.1 Consider the database univInfoA having a single relation stats with scheme fcat, cs, math, ontario, quebecg. <p> The comparison is performed after (a) finding the type information using the specification, (b) finding the associated context information, and (c) applying the appropriate conversion functions. <ref> [LSS96b] </ref> has the details. 7 Comparison with Related Work In this section, we compare and contrast our proposal against some of the related work for meta-data manipulation and multidatabase interoperability. <p> A formal account of SchemaLog's syntax and semantics can be found in [LSS96a]. SchemaLog can also express the complex forms of aggregation discussed in this paper. SchemaSQL has been to a large extent inspired by SchemaLog. Indeed, the logical underpinnings of SchemaSQL can be found in SchemaLog <ref> [LSS96b] </ref>. However, SchemaSQL is not obtained by simply "SQL-izing" SchemaLog. There are important differences between the two languages. (i) SchemaSQL has been designed to be as close as possible to SQL. In this vein, we have developed the syntax and semantics of SchemaSQL by extending that of SQL.
Reference: [MR95] <author> Missier, P. and Rusinkiewicz, Marek. </author> <title> Extending a multidatabase manipulation language to resolve schema and data conflicts. </title> <booktitle> In Proc. Sixth IFIP TC-2 Working Conference on Data Semantics (DS-6), </booktitle> <address> Atlanta, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: MSQL extends the traditional functions of SQL to the context of a federation of databases. The salient features of this language include the ability to retrieve and update relations in different databases, define multi-database views, and specify compatible and equivalent domains across different databases. <ref> [MR95] </ref> extends MSQL with features for accessing external functions (for resolving semantic heterogeneity) and for specifying a global schema against which the component databases could be mapped.
Reference: [Ros92] <author> Ross, Kenneth. </author> <title> Relations with relation names as arguments: Algebra and calculus. </title> <booktitle> In Proc. 11th ACM Symp. on PODS, </booktitle> <pages> pages 346-353, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: While XSQL, HOSQL, and OSQL have a SQL flavor, unlike SchemaSQL , they do not appear to be downward compatible with SQL syntax and semantics. In other related work, <ref> [Ros92] </ref> proposes an interesting algebra and calculus that treats relation names at par with the values in a relation. However, its expressive power is limited in that attribute names, database names, and comprehensive aggregation capabilities are not supported.
Reference: [Sig91] <editor> Semantic Issues in Multidatabase Systems. </editor> <booktitle> Sigmod Record, </booktitle> <volume> 20(4), </volume> <month> December, </month> <year> 1991. </year> <note> Special Issue Edited by Amit Sheth. </note>
Reference-contexts: This semantic heterogeneity problem has been discussed in detail in <ref> [Sig91] </ref>, [KCGS93], [HM93]. A promising approach to dealing with semantic heterogeneity is the proposal of Sciore, Siegel, and Rosenthal [SSR94]. The main idea behind their proposal is the notion of semantic values, obtained by introducing an explicit context information to each data object in the database.
Reference: [SQL96] <institution> SQL Standards Home Page. </institution> <note> SQL 3 articles and publications, 1996. URL: www.jcc.com/sql articles.html. </note>
Reference: [SSR94] <author> Sciore, E., Siegel, M., and Rosenthal, A. </author> <title> Using semantic values to facilitate interoperability among heterogeneous information systems. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 19(2) </volume> <pages> 254-290, </pages> <month> June </month> <year> 1994. </year> <pages> Page 12 </pages>
Reference-contexts: This semantic heterogeneity problem has been discussed in detail in [Sig91], [KCGS93], [HM93]. A promising approach to dealing with semantic heterogeneity is the proposal of Sciore, Siegel, and Rosenthal <ref> [SSR94] </ref>. The main idea behind their proposal is the notion of semantic values, obtained by introducing an explicit context information to each data object in the database. <p> In this section, we sketch how SchemaSQL can be extended with the wherewithal to tackle the semantic heterogeneity problem. We extend the proposal of <ref> [SSR94] </ref>, by associating the context information to relation names as well as attribute names, in addition to the values in a database. Also, in the SchemaSQL setting, there is a natural need for including the type information of an object as part of its context information.
References-found: 29

