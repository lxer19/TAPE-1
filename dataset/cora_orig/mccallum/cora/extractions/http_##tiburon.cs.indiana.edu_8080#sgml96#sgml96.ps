URL: http://tiburon.cs.indiana.edu:8080/sgml96/sgml96.ps
Refering-URL: http://www.cs.indiana.edu/~asengupt/
Root-URL: http://www.cs.indiana.edu
Email: 1  
Title: Standardizing the Querying Process with SGML The SQL DTD  
Author: Arijit Sengupta Arijit Sengupta Arijit Sengupta 
Keyword: Structured Query Language,Query processing,SGML Databases.  
Note: About the Authors  (1)  
Abstract: One of the most exciting applications of SGML which has emerged in the recent years is its use in document databases. The structural information embedded in SGML documents makes it possible to query SGML documents and extract information in an automatic manner; however, this querying process has not been standardized. As a result, different SGML database implementations use their own query language syntax, thus making the migration from one system to another a difficult process. In the relational database domains, however, the query language SQL (Structured Query Language) has been a standard for over ten years and is universally used in most relational database systems. Although originally designed for relational databases, SQL is quite powerful for specifying complex queries in a relatively easy-to-understand syntax. With a small set of extensions to take advantage of the hierarchical structure of SGML, SQL can be easily adapted for use with SGML document databases [TAG-496]. The powerful "generalized" nature of SGML makes it easy to implement SQL as an SGML DTD (Document Type Definition) , so that queries can be expressed as document instances of the SQL DTD. Current SGML authors and users can write queries expressed in this DTD without learning a different language or using a separate editor. Moreover, because of the portable nature of SGML, these queries can be used in any SGML database system and can be converted to regular SQL for use in a relational or Object-Relational/Object-Oriented database system, if necessary. Databases that support the SQL DTD can also store the queries without any extra effort, and subsequently query them for inferring optimization parameters. This paper presents a representative DTD for the SQL query language, with extensions for use with hierarchically structured documents. It also compares this language with languages proposed and implemented, including SDQL (Standard Document Query Language) the query language in the DSSSL standard [DSSSL95]. This paper explains the advantages of using this language as a query language in document database systems and the necessity for standardizing the querying process in document databases. Finally, it discusses some implementation issues and complexity measures. is a Ph.D. candidate in Computer Science at the Indiana University, Bloomington. He is also the Associate Instructor for the Information Systems sequence course in Computer Science and the system administrator for various SGML systems as well as other commercial and public-domain database systems in the Database Laboratory. His research is directed towards finding new methods for accessing the data from structured document databases, using query languages and interfaces.
Abstract-found: 1
Intro-found: 1
Reference: [ABIT93] <author> Serge Abiteboul, Sophie Cluet, Tova Milo. </author> <title> "Querying and Updating the File". </title> <booktitle> Proceedings, 19th Intl. Conference on Very Large Databases, </booktitle> <pages> 73-84, </pages> <year> 1993 </year>
Reference-contexts: Language Implementation Implementations of document databases can be roughly grouped in two categories - (i) mapping approaches which map the SGML schema into an ObjectOriented or Object-Relational schema and convert the document accordingly (such as in <ref> [ABIT93] </ref>, [HOLST95]) and (ii) index-based approaches in which indices are built on top of the original documents to expedite searches (such as in [OT94]).
Reference: [ABIT95] <author> Serge Abiteboul, Richard Hull, Victor Vianu. </author> <title> "Foundations of Databases". </title> <address> Reading, Mass. </address> <publisher> Addison-Wesley, c1995 </publisher>
Reference-contexts: SQL is not a complete programming language, so certain queries are not possible to formulate using SQL. The queries that can be solved in SQL,however, constitute a core set that can be performed by a relational database engine in PTIME (polynomial time complexity) and LOGSPACE (logarithmic space complexity) <ref> [ABIT95] </ref>. This means that all the queries that one can formulate in SQL will never need an execution time greater than a polynomial of the input size and will never occupy temporary storage more than a logarithm of the input size. <p> Implementation Issues A problem with very general languages is implementation difficulty. In contrast, we can formally prove that all queries 11 written in SQL can be solved in PTIME (polynomial complexity for time) and LOGSPACE (logarithmic complexity for temporary space) <ref> [ABIT95] </ref>. Our current work [SENG96] 3 is aimed at showing that PTIME implementations of SQL queries for structured documents are possible using index-based approaches. (6.1) 6.1.
Reference: [DATE89] <author> C. J. Date. </author> <title> "A Guide to the SQL Standard" - second edition. </title> <publisher> Addison Wesley Publishing Company, </publisher> <year> 1989 </year>
Reference-contexts: This paper describes a DTD for writing SQL queries using SGML. The DTD is based on the SQL-86 standard [SQL86] and is constructed from the SQL syntax grammar described in <ref> [DATE89] </ref>. The DTD described here is not complete and is by no means an exact representative of the complete SQL query language, and only includes the relevant section of the query language for selecting documents or components of documents from a document database based on certain search conditions.
Reference: [DSSSL95] <author> ISO/IEC DIS 10179.2. </author> <title> "Document Style Semantics and Specification Language (DSSSL)". </title> <note> Working Draft, </note> <year> 1995. </year>
Reference-contexts: This makes it difficult for users of such systems to migrate from one system to the other. A standard method of information retrieval is thus necessary. The SDQL language in the DSSSL (Document Style Semantics and Specification Language) <ref> [DSSSL95] </ref> standard provides an answer, but because of its low-level nature, it is not very suitable as a simple query language for document databases. <p> Introduction SQL and SGML have a lot in common. SQL [SQL86] and SGML [SGML86] were both standardized in 1986, and since then both have undergone changes and extensions. The SGML standard have been quite stable, but other standards like Hytime [HYT94], DSSSL <ref> [DSSSL95] </ref> have been built on top of SGML in order to give more functionality to SGML. SQL, however, has been revised twice as SQL-89 and SQL-92, and another revision leading towards an objectoriented query language SQL3 is in the works. <p> Queries using this DTD are compared to the same queries using other languages like the standard SQL, the Pat Query language [OT94], the Metamorphosis query language [MM96], the SDQL (Standard Document Query Language) language in the DSSSL standard <ref> [DSSSL95] </ref> and the Sgrep query language [SGREP96]. (2.1) 2.1. What is SQL? SQL [SQL86] is nothing new for people acquainted with relational databases. It is the standard query language for all relational database systems that have a language interface for manipulating the internal data. <p> Although this makes these languages more expressive than languages like SQL, there is never any guarantee that all queries written in such a language will be solvable in a reasonable time. That is the reason why we like to avoid Turing-complete languages. The SDQL language in the DSSSL standard <ref> [DSSSL95] </ref> falls in a complete language category. <p> Open Text 5.0 and the Pat query language from Open Text corporation, Waterloo, Canada [OT94] 2. Sgrep 0.99 from Computer Science, Univ. of Helsinki [SGREP96] 3. Metamorphosis 2.13 from Ovidius corporation, Berlin, Germany [MM96] 4. SDQL in the DSSSL Standard <ref> [DSSSL95] </ref> 5. The SQL DTD The actual SQL queries are not reproduced here. Interested readers should see [TAG-496] for the queries in SQL or the SQL DTD query for an alternative. (4.1.1) 4.1.1. Find the books that have more than 200 pages and cost more than $20. Table 3. <p> Motivations for a standard query language Although SGML has been a standard for a decade now, there has been little attempt at developing standards for using SGML as a language for describing database schema and for querying the data in the database. The SDQL language in DSSSL <ref> [DSSSL95] </ref> does provide an answer. Although SDQL is well suited for manipulating formatting styles of the document, its level is too low to be of use as a query language.
Reference: [HOLST95] <author> Sebastian Holst. </author> <title> "Database Evolution: the View From Over Here (A Document-centric perspective)". </title> <booktitle> Proceedings of the SGML '95 Conference, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: Fortunately, a relatively small set of extensions to the core SQL language results in a language that is powerful enough for use with hierarchical document databases. Some recent research-oriented and commercial systems ([ABIT93]; <ref> [HOLST95] </ref>) have implemented SGML databases using a host ObjectOriented and Object-Relational database, and they use some of the features from the host SQL language for the purpose of query processing. Fortunately, for an SGML query processing system, it is not necessary to implement a complete objectoriented query language. <p> Language Implementation Implementations of document databases can be roughly grouped in two categories - (i) mapping approaches which map the SGML schema into an ObjectOriented or Object-Relational schema and convert the document accordingly (such as in [ABIT93], <ref> [HOLST95] </ref>) and (ii) index-based approaches in which indices are built on top of the original documents to expedite searches (such as in [OT94]).
Reference: [HYT94] <author> ISO/IEC 10744, in DeRose(1994): Steven J. Derose, David G. Durand. </author> <title> "Making Hypermedia Work: A User's Guide to HyTime". </title> <publisher> Kluwer Academic. </publisher> <year> 1994. </year>
Reference-contexts: Introduction SQL and SGML have a lot in common. SQL [SQL86] and SGML [SGML86] were both standardized in 1986, and since then both have undergone changes and extensions. The SGML standard have been quite stable, but other standards like Hytime <ref> [HYT94] </ref>, DSSSL [DSSSL95] have been built on top of SGML in order to give more functionality to SGML. SQL, however, has been revised twice as SQL-89 and SQL-92, and another revision leading towards an objectoriented query language SQL3 is in the works.
Reference: [JASIS96] <author> Arijit Sengupta and Andrew Dillon. </author> <title> "Extending SGML with database functions: A methodological overview." </title> <note> To appear in the Journal of the American Society for Information Science (JASIS) special issue on Structured Information/Standards for Document Architectures; August, </note> <year> 1996. </year>
Reference-contexts: Fortunately, for an SGML query processing system, it is not necessary to implement a complete objectoriented query language. We introduced a small set of extensions to the core SQL in [TAG-496], <ref> [JASIS96] </ref>. In these papers, we show how the core SQL with some relatively simple extensions can be used to perform rather complex queries for document databases. <p> We are only interested in the querying capabilities of SQL, using a few extensions described in [TAG-496] and <ref> [JASIS96] </ref>. The three main extensions are: 1. Addition of complex column expressions to specify complex paths from the SGML root to the node of interest, 2. Addition of incomplete path expressions specifying only a source and a target node, leaving the path resolution to the search engine, 3. <p> The concept of closure is maintained not only in the query language but also in the interface in which the queries are executed. We proposed an interface that we termed QBT (Query By Templates) based on this closure idea in <ref> [JASIS96] </ref>, in which the interface for specifying queries uses the same template that is used for displaying the outputs. Another use of closure is to enable complex queries by feeding the outputs of certain queries back as inputs of other queries, thus enabling the use of queries as subqueries. <p> Description of the DTD A preliminary version of the DTD for the query section only is given in the last section. This DTD implements all the extensions described in <ref> [JASIS96] </ref>. The complex selection using an external DTD could be implemented more effectively, but currently the DTD specifies only a system file name, which the processing application needs to load and process. <p> This visual approach is based on the Query By Example (QBE) language for relational databases. An implementation of this method for structured documents, which we call Query By Templates (QBT) <ref> [JASIS96] </ref>, is available online [QBT96]. (7) 7. Conclusion and Discussion In this paper, we have presented an elegant way for querying SGML databases. We have demonstrated here that not only is this method useful, but also reasonably simple to implement.
Reference: [MELT92] <author> Jim Melton and Alan R. Simon. </author> <title> "Understanding the New SQL: A Complete Guide". </title> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1992. </year>
Reference-contexts: query language stays within the domain of SGML - users do not have to learn a new language for writing their queries, and the implementers do not have to write a new parser for a new language. (3) The entire SQL-92 BNF (Backus-Naur Form) takes up more than 45 pages <ref> [MELT92] </ref> - of course most of it consists of interfaces for SQL with various programming languages, embedded SQL, triggers and other advanced features that are primarily targeted towards a relational database language.
Reference: [MM96] <author> Ovidius Corporation. </author> <note> "The Metamorphosis Manual". Available online at http://www.ovidius.com/mmmanual/toc.html. 1996 </note>
Reference-contexts: Queries using this DTD are compared to the same queries using other languages like the standard SQL, the Pat Query language [OT94], the Metamorphosis query language <ref> [MM96] </ref>, the SDQL (Standard Document Query Language) language in the DSSSL standard [DSSSL95] and the Sgrep query language [SGREP96]. (2.1) 2.1. What is SQL? SQL [SQL86] is nothing new for people acquainted with relational databases. <p> The systems considered in this paper are the following: 1. Open Text 5.0 and the Pat query language from Open Text corporation, Waterloo, Canada [OT94] 2. Sgrep 0.99 from Computer Science, Univ. of Helsinki [SGREP96] 3. Metamorphosis 2.13 from Ovidius corporation, Berlin, Germany <ref> [MM96] </ref> 4. SDQL in the DSSSL Standard [DSSSL95] 5. The SQL DTD The actual SQL queries are not reproduced here. Interested readers should see [TAG-496] for the queries in SQL or the SQL DTD query for an alternative. (4.1.1) 4.1.1.
Reference: [OT94] <author> Open Text Corporation. </author> <title> Open Text 5.0 Software and Reference Manuals. </title> <year> 1994. </year>
Reference-contexts: Queries using this DTD are compared to the same queries using other languages like the standard SQL, the Pat Query language <ref> [OT94] </ref>, the Metamorphosis query language [MM96], the SDQL (Standard Document Query Language) language in the DSSSL standard [DSSSL95] and the Sgrep query language [SGREP96]. (2.1) 2.1. What is SQL? SQL [SQL86] is nothing new for people acquainted with relational databases. <p> The systems considered in this paper are the following: 1. Open Text 5.0 and the Pat query language from Open Text corporation, Waterloo, Canada <ref> [OT94] </ref> 2. Sgrep 0.99 from Computer Science, Univ. of Helsinki [SGREP96] 3. Metamorphosis 2.13 from Ovidius corporation, Berlin, Germany [MM96] 4. SDQL in the DSSSL Standard [DSSSL95] 5. The SQL DTD The actual SQL queries are not reproduced here. <p> grouped in two categories - (i) mapping approaches which map the SGML schema into an ObjectOriented or Object-Relational schema and convert the document accordingly (such as in [ABIT93], [HOLST95]) and (ii) index-based approaches in which indices are built on top of the original documents to expedite searches (such as in <ref> [OT94] </ref>). Index-based approaches have the advantage of keeping the authoring separate from the database counterpart, since the original documents are kept intact and the indices can be rebuilt when the documents are updated. Although these updates are expensive, in most cases, the indices can be incrementally updated.
Reference: [QBT96] <author> Arijit Sengupta, Andrew Dillon and Shawn P. Morgan. </author> <title> An Implementation of QBT as the SGML Query Language. </title> <note> Demonstration available at http://blesmol.cs.indiana.edu:8080/projects/SGMLQuery. </note>
Reference-contexts: This visual approach is based on the Query By Example (QBE) language for relational databases. An implementation of this method for structured documents, which we call Query By Templates (QBT) [JASIS96], is available online <ref> [QBT96] </ref>. (7) 7. Conclusion and Discussion In this paper, we have presented an elegant way for querying SGML databases. We have demonstrated here that not only is this method useful, but also reasonably simple to implement.
Reference: [SENG96] <author> Arijit Sengupta and Dirk Van Gucht. </author> <title> A PTIME Query Language for Structured Document Databases. </title> <booktitle> Work In Progress, </booktitle> <month> August </month> <year> 1996 </year>
Reference-contexts: Implementation Issues A problem with very general languages is implementation difficulty. In contrast, we can formally prove that all queries 11 written in SQL can be solved in PTIME (polynomial complexity for time) and LOGSPACE (logarithmic complexity for temporary space) [ABIT95]. Our current work <ref> [SENG96] </ref> 3 is aimed at showing that PTIME implementations of SQL queries for structured documents are possible using index-based approaches. (6.1) 6.1. <p> The "join" operation, which requires the use of a variable (which is usually missing in the index-based approaches) is the first operation that we implement, and in <ref> [SENG96] </ref> we show that joins can be efficiently implemented using indices on the GI (s) used in the "join" operation. Implementations strategies for other first-order operations in SQL will be investigated subsequently. (6.2) 6.2.
Reference: [SGML86] <author> ISO 8879. </author> <title> "Information Processing - Text and Office Systems - Standard Generalized Markup Language (SGML)", </title> <year> 1986. </year>
Reference-contexts: With the DDL (Data Definition Language) and DML (Data Manipulation Language) properties added, this method has the possibility of leading to a standard way of accessing SGML document databases. (2) 2. Introduction SQL and SGML have a lot in common. SQL [SQL86] and SGML <ref> [SGML86] </ref> were both standardized in 1986, and since then both have undergone changes and extensions. The SGML standard have been quite stable, but other standards like Hytime [HYT94], DSSSL [DSSSL95] have been built on top of SGML in order to give more functionality to SGML.
Reference: [SGREP96] <author> Jani Jaakkola and Pekka Kilpelinen. </author> <note> "The Sgrep online manual". Available at http://www.cs.helsinki.fi/~jjaakkol/sgrepman.html. 1996. </note>
Reference-contexts: Queries using this DTD are compared to the same queries using other languages like the standard SQL, the Pat Query language [OT94], the Metamorphosis query language [MM96], the SDQL (Standard Document Query Language) language in the DSSSL standard [DSSSL95] and the Sgrep query language <ref> [SGREP96] </ref>. (2.1) 2.1. What is SQL? SQL [SQL86] is nothing new for people acquainted with relational databases. It is the standard query language for all relational database systems that have a language interface for manipulating the internal data. <p> The systems considered in this paper are the following: 1. Open Text 5.0 and the Pat query language from Open Text corporation, Waterloo, Canada [OT94] 2. Sgrep 0.99 from Computer Science, Univ. of Helsinki <ref> [SGREP96] </ref> 3. Metamorphosis 2.13 from Ovidius corporation, Berlin, Germany [MM96] 4. SDQL in the DSSSL Standard [DSSSL95] 5. The SQL DTD The actual SQL queries are not reproduced here. Interested readers should see [TAG-496] for the queries in SQL or the SQL DTD query for an alternative. (4.1.1) 4.1.1.
Reference: [SQL86] <author> ANSI X3.135-1986. </author> <title> "Information Technology - Database Languages - Structured Query Language (SQL)". </title> <institution> American National Standards Institute. </institution> <address> New York, </address> <year> 1986. </year>
Reference-contexts: For this purpose, we need something that is easier to use, that is less dependent on the document structure, and that involves less amount of learning from the users' point of view. This makes SQL an obvious choice as a query language for SGML document databases. SQL <ref> [SQL86] </ref> is very close to English, yet it can pose a complete set of solvable queries with various degrees of complexity. It is not very difficult to apply SQL in the SGML domain. <p> With the DDL (Data Definition Language) and DML (Data Manipulation Language) properties added, this method has the possibility of leading to a standard way of accessing SGML document databases. (2) 2. Introduction SQL and SGML have a lot in common. SQL <ref> [SQL86] </ref> and SGML [SGML86] were both standardized in 1986, and since then both have undergone changes and extensions. The SGML standard have been quite stable, but other standards like Hytime [HYT94], DSSSL [DSSSL95] have been built on top of SGML in order to give more functionality to SGML. <p> The core query language has not been modified much since the original SQL-86, and this core language is our primary area of interest in for accommodating with SGML. This paper describes a DTD for writing SQL queries using SGML. The DTD is based on the SQL-86 standard <ref> [SQL86] </ref> and is constructed from the SQL syntax grammar described in [DATE89]. <p> What is SQL? SQL <ref> [SQL86] </ref> is nothing new for people acquainted with relational databases. It is the standard query language for all relational database systems that have a language interface for manipulating the internal data. SQL is not a complete programming language, so certain queries are not possible to formulate using SQL.
Reference: [TAG-496] <author> Arijit Sengupta. </author> <title> "Demand more from your SGML database! Bringing SQL under the SGML limelight." </title> <note> in &lt;TAG&gt; The SGML Newsletter; 9(4); pages 1-7; April, 1996. </note> <institution> 1 Indiana University, Computer Science Dept. Lindley Hall 215 Bloomington, </institution> <address> IN 47405 USA Phone: </address> <month> 812 855 4318 Fax: </month> <title> 812 855 4829 Email: asengupt@indiana.edu WWW: http://www.cs.indiana.edu/hyplan/asengupt.html 2 Partially supported by US Dept. of Education award number P200A502367 and NSF Research and Infrastructure grant, award number NSF 13 CDA-9303189. 3 Work in progress - a copy of a preliminary version of this work can be obtained by contacting the author. </title> <type> 14 </type>
Reference-contexts: It is not very difficult to apply SQL in the SGML domain. The basic SQL can be augmented with a relatively small set of 1 extensions as we proposed in &lt;TAG&gt; <ref> [TAG-496] </ref>. The generalized nature of SGML, however, makes it very easy to avoid learning another language just to search SGML documents. This is achieved through the use of an SGML-ization of the SQL grammar, with an SQL DTD. <p> Fortunately, for an SGML query processing system, it is not necessary to implement a complete objectoriented query language. We introduced a small set of extensions to the core SQL in <ref> [TAG-496] </ref>, [JASIS96]. In these papers, we show how the core SQL with some relatively simple extensions can be used to perform rather complex queries for document databases. <p> We are only interested in the querying capabilities of SQL, using a few extensions described in <ref> [TAG-496] </ref> and [JASIS96]. The three main extensions are: 1. Addition of complex column expressions to specify complex paths from the SGML root to the node of interest, 2. Addition of incomplete path expressions specifying only a source and a target node, leaving the path resolution to the search engine, 3. <p> The SQL DTD by Example This section describes a sample scenario demonstrating how queries are formulated using the SQL DTD. This sample DTD is taken directly from <ref> [TAG-496] </ref>, with the addition of one "pages" attribute for the books, which is probably useless in normal circumstances but is included to demonstrate attribute access features of the SQL DTD. Please refer to the above article for the queries using the extended SQL in its native language form. <p> Comparison of SQL DTD with other query languages In this section, we will take the same six example queries stated in <ref> [TAG-496] </ref> and show the queries for these six examples using the query languages from the following systems. <p> Sgrep 0.99 from Computer Science, Univ. of Helsinki [SGREP96] 3. Metamorphosis 2.13 from Ovidius corporation, Berlin, Germany [MM96] 4. SDQL in the DSSSL Standard [DSSSL95] 5. The SQL DTD The actual SQL queries are not reproduced here. Interested readers should see <ref> [TAG-496] </ref> for the queries in SQL or the SQL DTD query for an alternative. (4.1.1) 4.1.1. Find the books that have more than 200 pages and cost more than $20. Table 3. Table showing the queries corresponding to Query 4.1.1.
References-found: 16

