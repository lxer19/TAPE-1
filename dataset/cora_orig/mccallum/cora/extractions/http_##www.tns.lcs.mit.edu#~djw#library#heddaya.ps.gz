URL: http://www.tns.lcs.mit.edu/~djw/library/heddaya.ps.gz
Refering-URL: http://www.tns.lcs.mit.edu/~djw/library/
Root-URL: 
Email: heddaya@cs.bu.edu  mirdad@cs.bu.edu  djy@cs.bu.edu  
Phone: Phone: (617) 353-8919 Fax: (617) 353-6457  
Title: Diffusion-based Caching along Routing Paths Position Statement  
Author: Abdelsalam Heddaya Sulaiman Mirdad David Yates 
Address: 111 Cummington Street Boston, MA 02215  
Affiliation: Boston University Computer Science Department  
Abstract: Caching for the Web can be beneficial in different ways: not only can it reduce network traffic and client response time, but it can also enable large scale server load balancing. In this paper, we present preliminary simulation data to characterize the performance of WebWave, a diffusion-based caching protocol for server load balancing that we have recently proposed. Initial results suggest that WebWave indeed achieves load balance, even under self-similar request load. Furthermore, the number of cache copies created by WebWave appears to be within acceptable levels. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. Alaettinoglu, I. Matta K. Dussa-Zieger, and A. Shankar. </author> <title> MaRS (Maryland Routing Simulator)|version 1.0|programmer's manual. </title> <type> Technical Report UMIACS-TR-91-107, </type> <institution> University of Maryland at College Park, </institution> <month> July </month> <year> 1991. </year>
Reference-contexts: In other words, we prohibit i from shifting load to child j, that originates from another child k. 1 2 WebWave Simulation For this performance study we used MaRS (Maryland Routing Simulator) <ref> [1] </ref>. MaRS is an event driven simulator designed to evaluate routing algorithms. In MaRS, a network consists of store-and-forward entities connected by links, routing algorithms and workload generators (static source-sink pairs). To evaluate the performance of WebWave, we adapted MaRS by introducing clients, servers, and documents.
Reference: [2] <author> V. Almeida, A. Bestavros, M. Crovella, and A. de Oliveira. </author> <title> Characterizing reference locality in the WWW. In Proc. </title> <booktitle> IEEE Int'l Conf. on Parallel and Distributed Information Systems, </booktitle> <address> Miami Beach, Florida, </address> <month> Dec. </month> <year> 1996. </year>
Reference-contexts: In particular, the resulting synthetic request trace has Zipf file popularity distribution and heavy-tailed file size distribution [10]. Furthermore, the load mimics empirically measured temporal and spatial locality properties, which are critical for the accurate evaluation of cache performance <ref> [2] </ref>. This means that the trace exhibits the following characteristics: * The fraction of requests for each file is inversely proportional to its rank by popularity. * File size distributions show heavy tails with parameter ff &lt; 2:0.
Reference: [3] <author> Martin F. Arlitt and Carey L. Williamson. </author> <title> Web server workload characterization: The search for invariants. </title> <booktitle> In Proceedings of the 1996 SIGMETRICS Conference on Measurement and Modeling of Computer Systems, </booktitle> <pages> pages 126-137, </pages> <year> 1996. </year>
Reference-contexts: The documents requested by a collection of clients are determined using a synthetic self-similar trace generated by SURGE [4], and explained in more detail later in this section. Each event in the trace file represents a document request. Client requests are scheduled using exponential inter-arrival times <ref> [3] </ref>. For each request, a client generates a request packet to the home server (document publisher). In our model, a client request can be intercepted and serviced by an intermediate WebWave server caching the requested document.
Reference: [4] <author> Paul Barford and Mark Crovella. </author> <title> Generating representative web requests for network and server performance evaluation. </title> <type> Technical Report BU-CS-97-06, </type> <institution> Boston Univ., Computer Science Dept., &lt;www.cs.bu.edu/techreports&gt;, </institution> <month> May </month> <year> 1997. </year>
Reference-contexts: Servers and communication links are taxed for both load gossip and the creation of new cache copies; additionally, request packets are charged 2 msec for passing through the filter. The documents requested by a collection of clients are determined using a synthetic self-similar trace generated by SURGE <ref> [4] </ref>, and explained in more detail later in this section. Each event in the trace file represents a document request. Client requests are scheduled using exponential inter-arrival times [3]. For each request, a client generates a request packet to the home server (document publisher). <p> To drive our simulation, we employ SURGE (Scalable URL Request Generator), a synthetic Web load generator designed and implemented by Barford and Crovella <ref> [4] </ref>. SURGE generates a sequence of file requests that satisfies the same statistical properties that characterize experimentally measured Web loads for a set of clients. In particular, the resulting synthetic request trace has Zipf file popularity distribution and heavy-tailed file size distribution [10].
Reference: [5] <author> T. Berners-Lee, R. Fielding, and H. Frystyk. </author> <title> Hypertext Transfer Protocol|HTTP 1.0. </title> <type> Technical Report Internet Draft, </type> <institution> Internet Engineering Task Force, </institution> <month> Feb. </month> <year> 1996. </year> <month> Expires Aug. </month> <year> 1996. </year>
Reference-contexts: This latter point deserves elaboration first. A caching system, regardless of its aim, can present a special difficulty to clients that use it: that of finding an appropriate cache copy to use. All the existing caching systems, such as Harvest/Squid [9] and HTTP proxies <ref> [5] </ref>, as well as research proposals [6, 7, 8, 11, 14], enable a client to find an appropriate cache copy by one of two methods: 1. A resource discovery protocol. 2. A directory lookup.
Reference: [6] <author> A. Bestavros. </author> <title> Speculative data dissemination and service to reduce server load, network traffic and service time for distributed information systems. </title> <booktitle> In Proc. 12th IEEE Intl. Conf. on Data Engineering, </booktitle> <address> New Orleans, Louisiana, </address> <month> Mar. </month> <year> 1996. </year> <month> 6 </month>
Reference-contexts: A caching system, regardless of its aim, can present a special difficulty to clients that use it: that of finding an appropriate cache copy to use. All the existing caching systems, such as Harvest/Squid [9] and HTTP proxies [5], as well as research proposals <ref> [6, 7, 8, 11, 14] </ref>, enable a client to find an appropriate cache copy by one of two methods: 1. A resource discovery protocol. 2. A directory lookup. In both cases, the client's request must experience a potentially significant added delay in order to perform what we call off-route communication.
Reference: [7] <author> M.A. </author> <title> Blaze. Caching in Large-scale Distributed File Systems. </title> <type> PhD thesis, </type> <institution> Princeton Univ., Dept. of Computer Science, </institution> <month> Jan. </month> <year> 1993. </year>
Reference-contexts: A caching system, regardless of its aim, can present a special difficulty to clients that use it: that of finding an appropriate cache copy to use. All the existing caching systems, such as Harvest/Squid [9] and HTTP proxies [5], as well as research proposals <ref> [6, 7, 8, 11, 14] </ref>, enable a client to find an appropriate cache copy by one of two methods: 1. A resource discovery protocol. 2. A directory lookup. In both cases, the client's request must experience a potentially significant added delay in order to perform what we call off-route communication.
Reference: [8] <author> R. Carter and M. Crovella. </author> <title> Dynamic server selection using bandwidth probing in wide-area networks. </title> <type> Technical Report BU-CS-96-007, </type> <institution> Boston Univ., Computer Science Dept., &lt;www.cs.bu.edu/techreports&gt;, </institution> <month> Mar. </month> <year> 1996. </year>
Reference-contexts: A caching system, regardless of its aim, can present a special difficulty to clients that use it: that of finding an appropriate cache copy to use. All the existing caching systems, such as Harvest/Squid [9] and HTTP proxies [5], as well as research proposals <ref> [6, 7, 8, 11, 14] </ref>, enable a client to find an appropriate cache copy by one of two methods: 1. A resource discovery protocol. 2. A directory lookup. In both cases, the client's request must experience a potentially significant added delay in order to perform what we call off-route communication.
Reference: [9] <author> A. Chankhunthod, P.B. Danszig, C. Neerdaels, M.F. Schwartz, and K.J. Worrell. </author> <title> A hierarchical Internet object cache. </title> <booktitle> In Proc. USENIX Annual Technical Conference, </booktitle> <address> San Diego, California, </address> <month> Jan. </month> <year> 1996. </year>
Reference-contexts: This latter point deserves elaboration first. A caching system, regardless of its aim, can present a special difficulty to clients that use it: that of finding an appropriate cache copy to use. All the existing caching systems, such as Harvest/Squid <ref> [9] </ref> and HTTP proxies [5], as well as research proposals [6, 7, 8, 11, 14], enable a client to find an appropriate cache copy by one of two methods: 1. A resource discovery protocol. 2. A directory lookup.
Reference: [10] <author> M.E. Crovella and A. Bestavros. </author> <title> Self-similarity in World-wide Web traffic: Evidence and possible causes. </title> <booktitle> In Proc. ACM SIGMETRICS Intl. Conf. on Measurement and Modeling of Computer Systems, </booktitle> <pages> pages 160-169, </pages> <month> May </month> <year> 1996. </year> <note> Accepted for publication in Transactions on Networking. </note>
Reference-contexts: SURGE generates a sequence of file requests that satisfies the same statistical properties that characterize experimentally measured Web loads for a set of clients. In particular, the resulting synthetic request trace has Zipf file popularity distribution and heavy-tailed file size distribution <ref> [10] </ref>. Furthermore, the load mimics empirically measured temporal and spatial locality properties, which are critical for the accurate evaluation of cache performance [2]. <p> This value of ff, which corresponds to a Hurst parameter value of 0.75, is within the range estimated in <ref> [10] </ref> as typical of Web loads recorded by a variety of empirical studies. The results in Figure 2 support the hypothesis of convergence for all intermediate servers but apparently not for the home server.
Reference: [11] <author> James Gwertzman. </author> <title> Autonomous replication in wide-area internetworks. </title> <type> Technical Report TR-17-95, </type> <institution> Harvard University, </institution> <month> April </month> <year> 1995. </year>
Reference-contexts: A caching system, regardless of its aim, can present a special difficulty to clients that use it: that of finding an appropriate cache copy to use. All the existing caching systems, such as Harvest/Squid [9] and HTTP proxies [5], as well as research proposals <ref> [6, 7, 8, 11, 14] </ref>, enable a client to find an appropriate cache copy by one of two methods: 1. A resource discovery protocol. 2. A directory lookup. In both cases, the client's request must experience a potentially significant added delay in order to perform what we call off-route communication.
Reference: [12] <author> A. Heddaya and S. Mirdad. </author> <title> Wave: Wide-area virtual environment for distributing published documents. </title> <booktitle> In Electronic Proc. ACM SIGCOMM'95 Workshop on Middleware, </booktitle> <address> Cambridge, Mass., </address> <month> Aug. </month> <year> 1995. </year> <month> &lt;www.acm.org/sigcomm/sigcomm95/workshop&gt;. </month>
Reference: [13] <author> A. Heddaya and S. Mirdad. Webwave: </author> <title> Globally load balanced fully distributed caching of hot published documents. </title> <booktitle> In Proc. 17th IEEE Intl. Conference on Distributed Computing Systems, </booktitle> <address> Baltimore, Maryland, USA, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: In contrast, we advocate the use of caching also for the purpose of deploying and harnessing additional computation and storage, in the network fabric itself. Our original concept|called WebWave [12]|and subsequent theoretical development of it <ref> [13] </ref>, calls for employing caching to distribute and balance load among servers that are embedded in the network itself. <p> Figure 1 shows that cache server utilizations converge under a file request load that is not self-similar. The synthetic load generator produces this type of load for a parameter value of ff = 2:0 in the heavy-tailed file size distribution. This data agrees with our previous results <ref> [13] </ref>, obtained under a much simpler simulator that assumes constant request rate, and that does not account for individual documents. Increasing the length of the path between client and home server, from three hops to seven, slows convergence considerably. <p> Consequently, more of these files tend to be diffused from the home server to its child and grandchild (Figure 3 right), but not further. 5 4 Discussion Diffusion-based caching, as employed in WebWave, presents specific advantages in terms of provably optimal load-balancing <ref> [13] </ref>. In this paper, we show preliminary detailed simulation results that support the theoretical analysis, not only in terms of the convergence of load-balance under exponential and self-similar request streams, but also with regard to the use of cache servers in the network itself.
Reference: [14] <author> D. Muntz and P. Honeyman. </author> <title> Multi-level caching in distributed file systems -or- your cache ain't nuthin' but trash. </title> <booktitle> In Proc. Winter USENIX Technical Conf., </booktitle> <address> San Francisco, CA, </address> <pages> pages 305-314. </pages> <publisher> USENIX, </publisher> <month> January </month> <year> 1992. </year>
Reference-contexts: A caching system, regardless of its aim, can present a special difficulty to clients that use it: that of finding an appropriate cache copy to use. All the existing caching systems, such as Harvest/Squid [9] and HTTP proxies [5], as well as research proposals <ref> [6, 7, 8, 11, 14] </ref>, enable a client to find an appropriate cache copy by one of two methods: 1. A resource discovery protocol. 2. A directory lookup. In both cases, the client's request must experience a potentially significant added delay in order to perform what we call off-route communication.
Reference: [15] <author> Kihong Park, Gi Tae Kim, and Mark E. Crovella. </author> <title> On the relationship between file sizes, transport protocols, and self-similar network traffic. </title> <booktitle> In Proc. 4th Intl. Conf. on Network Protocols, </booktitle> <pages> pages 171-180, </pages> <month> Oct. </month> <year> 1996. </year>
Reference-contexts: This means that the trace exhibits the following characteristics: * The fraction of requests for each file is inversely proportional to its rank by popularity. * File size distributions show heavy tails with parameter ff &lt; 2:0. As ff declines, traffic gener ated becomes increasingly self-similar <ref> [15] </ref>. * When each request in the stream is expressed as the number of requests since the same file was last requested before, the resulting stack distance distribution is lognormal. This causes the generated load to mimic the locality of reference observed in real traces. 2 and seven (bottom) servers.
Reference: [16] <author> D. Wessels and K. Claffy. </author> <title> Internet cache protocol (ICP), </title> <type> version 2. Technical Report Internet-Draft, </type> <institution> IETF Network Working Group, </institution> <month> Apr. </month> <year> 1997. </year> <note> &lt;ftp://ds.internic.net/internet-drafts&gt;. 7 </note>
Reference-contexts: That is, for a client request to discover a suitable cache copy, it must either be diverted away from its natural route to the home server (as in HTTP proxies), or wait until cache probe messages are exchanged (as in ICP <ref> [16] </ref>). Turning the home server into a cache directory server does not help, nor does assuming the existence of a scalable distributed name service. In either case, the cache directory lookup consumes multiple round-trip network delays just in the process of discovering a cache site.
References-found: 16

