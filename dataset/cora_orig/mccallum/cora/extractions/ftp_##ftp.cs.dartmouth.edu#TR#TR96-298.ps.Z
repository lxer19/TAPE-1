URL: ftp://ftp.cs.dartmouth.edu/TR/TR96-298.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/reports/abstracts/TR96-298/
Root-URL: http://www.cs.dartmouth.edu
Title: The Dark Side of Risk (What your mother never told you about Time Warp)  
Author: David M. Nicol Xiaowen Liu 
Date: November 4, 1996  
Address: Hanover, NH 03755  
Affiliation: Department of Computer Science Dartmouth College  
Note: PCS-TR96-298  This work was supported in part by by NSF grants CCR-9308667 and CCR-9625894, and DARPA Contract N66001-96-C-8530.  
Abstract: Dartmouth College Computer Science Technical Report Abstract This paper is a reminder of the danger of allowing "risk" when synchronizing a parallel discrete-event simulation: a simulation code that runs correctly on a serial machine may, when run in parallel, fail catastrophically. This can happen when Time Warp presents an "inconsistent" message to an LP, a message that makes absolutely no sense given the LP's state. Failure may result if the simulation modeler did not anticipate the possibility of this inconsistency. While the problem is not new, there has been little discussion of how to deal with it; furthermore the problem may not be evident to new users or potential users of parallel simulation. This paper shows how the problem may occur, and the damage it may cause. We show how one may eliminate inconsistencies due to lagging rollbacks and stale state, but then show that so long as risk is allowed it is still possible for an LP to be placed in a state that is inconsistent with model semantics, again making it vulnerable to failure. We finally show how simulation code can be tested to ensure safe execution under a risk-free protocol. Whether risky or risk-free, we conclude that under current practice the development of correct and safe parallel simulation code is not transparent to the modeler; certain protections must be included in model code or model testing that are not rigorously necessary if the simulation were executed only serially. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> College of Computing, Georgia Institute of Technology. MetaTeD|A Meta Language for Modeling Telecommunication Networks, </institution> <month> October </month> <year> 1996. </year>
Reference-contexts: The user code libraries in particular may not have been developed for use with optimistic parallel simulation in mind. A case in point is the TeD simulation language being developed at Georgia Tech for the simulation of telecommunication networks; TeD resides astride GTW <ref> [1] </ref>. Very explicit mechanisms are provided in that tool to link to potentially large blocks of ordinary C/C++ code; the language by design is a "meta-language" that allows certain simulation constructs to be embedded in a high level language.
Reference: [2] <author> ParaSoft Corporation. Insure++: </author> <title> Automatic runtime debugger. </title> <type> Technical report, </type> <month> January </month> <year> 1996. </year>
Reference-contexts: The ability for detecting memory access problems has gotten quite comprehensive, it is conceivable that most such problems could be caught using the sort of technology behind commercial 5 tools like Purify [11] and insure++ <ref> [2] </ref>. To develop that technology independently for a parallel simulation engine is a daunting task. A "catch-it-in-the-act" approach will also have to deal with bottomless recursion and infinite loops.
Reference: [3] <author> S. Das, R. Fujimoto, K. Panesar, D. Allison, and M. Hybinette. GTW: </author> <title> A Time Warp system for shared memory multiprocessors. </title> <booktitle> In 1994 Winter Simulation Conference Proceedings, </booktitle> <pages> pages 1332-1339, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: Both methods employ aggressiveness, but not risk. The most widely cited optimistic systems use risk, notably the Time Warp Operating System (TWOS) [6] and Georgia Time Warp (GTW) <ref> [3] </ref>. The TWOS effort ended some years ago; GTW typifies Time Warp simulators in current use. GTW is essentially a library whose classes and methods can be used in a C or C++ program to transform it into a simulation.
Reference: [4] <author> P. Dickens and P. Reynolds, Jr. </author> <title> SRADS with local rollback. </title> <booktitle> In Distributed Simulation, </booktitle> <volume> volume 22, </volume> <pages> pages 161-164. </pages> <booktitle> SCS Simulation Series, </booktitle> <month> Jan. </month> <year> 1990. </year>
Reference-contexts: That the two ideas could be separated was demonstrated by Reynolds with a variant on his SRADS protocol <ref> [4] </ref> the distinction was also used by Steinman in development of the SPEEDES system using the Breathing Time Buckets protocol [12]. Both methods employ aggressiveness, but not risk. The most widely cited optimistic systems use risk, notably the Time Warp Operating System (TWOS) [6] and Georgia Time Warp (GTW) [3].
Reference: [5] <author> David Flanagan. </author> <title> Java in a Nutshell. </title> <publisher> O'Reilly and Associates, </publisher> <address> Sebastopol, CA, </address> <year> 1996. </year>
Reference-contexts: At no time can the code be left to run on its own until "completion", because "completion" may never come. These are actually the same issues behind running Java <ref> [5] </ref> applets safely; a truly comprehensive solution might be based on using Java to express and execute LP code, or use some other interpreted language.
Reference: [6] <author> D. R. Jefferson, B. Beckman, F. Wieland, L. Blume, M. DiLorento, P. Hontalas, P. Reiher, K. Sturdevant, J. Tupman, J. Wedel, and H. Younger. </author> <title> The Time Warp Operating System. </title> <booktitle> 11th Symposium on Operating Systems Principles, </booktitle> <volume> 21(5) </volume> <pages> 77-93, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: Both methods employ aggressiveness, but not risk. The most widely cited optimistic systems use risk, notably the Time Warp Operating System (TWOS) <ref> [6] </ref> and Georgia Time Warp (GTW) [3]. The TWOS effort ended some years ago; GTW typifies Time Warp simulators in current use. GTW is essentially a library whose classes and methods can be used in a C or C++ program to transform it into a simulation.
Reference: [7] <author> L. Lamport. </author> <title> Time, clocks, and the ordering of events in distributed systems. </title> <journal> Communications of the ACM, </journal> <volume> 21(7) </volume> <pages> 558-565, </pages> <month> July </month> <year> 1978. </year>
Reference-contexts: As the message is processed we update the recipient's DV by merging it with the message's DV. For each component we save the most "up-to-date" of the two. This way of thinking about dependency is basically Lamport's idea of distributed clocks <ref> [7] </ref>. Within this conceptual framework we can identify situations where inconsistencies arise.
Reference: [8] <author> J. Larus and E. Schnarr. </author> <title> Eel:machine-independent executable editing. </title> <booktitle> In Proceedings of the ACM SIGPLAN PLDI Conference, </booktitle> <month> June </month> <year> 1995. </year>
Reference-contexts: That's the easy part. The harder part is to write code that modifies the user code binary, checking the stack for consistency with these declared constraints. This might be done using a tool such as EEL <ref> [8] </ref>, which can be taught how to recognize object code that is setting up a procedure call, and can then insert additional consistency checking code. Such a solution is highly dependent on the underlying hardware. The simulator ought to provide an option for risk-free operation.
Reference: [9] <author> V. Madisetti, J. Walrand, and D. Messerschmitt. WOLF: </author> <title> A rollback algorithm for optimistic distributed simulation systems. </title> <booktitle> In 1988 Winter Simulation Conference Proceedings, </booktitle> <pages> pages 296-305, </pages> <month> December </month> <year> 1988. </year>
Reference-contexts: This could be done heuristically by always processing anti-messages before other messages. Some schemes even proposed preemptive rollbacks 10 of all LPs within some "distance" of a temporal error without bothering to see if anti-messages would indeed trigger rollbacks there <ref> [9] </ref>. Our acknowledgments are the logical extension of such thinking. Second, waiting for acknowledgments before allowing an LP to send another message need not impact performance greatly. This is a matter of latency hiding.
Reference: [10] <author> P.F. Reynolds, Jr. </author> <title> Comparative analyses of parallel simulation protocols. </title> <booktitle> In Proceedings of the 1989 Winter Simulation Conference, </booktitle> <address> Washington, D.C., </address> <month> December </month> <year> 1989. </year>
Reference-contexts: 1 Introduction Reynolds has argued that synchronization protocols for parallel discrete-event simulation are characterized by a spectrum of attributes <ref> [10] </ref>. In particular, he noted that protocols broadly categorized as "optimistic" really entail two different aspects; aggressiveness means executing an event before it is certain to be correct to do so, and risk means sending a message that might not be correct.
Reference: [11] <author> Pure Software. </author> <title> Purify:fast detection of memory leaks and access errors. </title> <type> Technical report, </type> <month> January </month> <year> 1995. </year>
Reference-contexts: The ability for detecting memory access problems has gotten quite comprehensive, it is conceivable that most such problems could be caught using the sort of technology behind commercial 5 tools like Purify <ref> [11] </ref> and insure++ [2]. To develop that technology independently for a parallel simulation engine is a daunting task. A "catch-it-in-the-act" approach will also have to deal with bottomless recursion and infinite loops.
Reference: [12] <author> J.S. Steinman. SPEEDES: </author> <title> Synchronous parallel environment for emulation and discrete event simulation. </title> <booktitle> In Advances in Parallel and Distributed Simulation, </booktitle> <volume> volume 23, </volume> <pages> pages 95-103. </pages> <booktitle> SCS Simulation Series, </booktitle> <month> Jan. </month> <year> 1991. </year> <month> 15 </month>
Reference-contexts: That the two ideas could be separated was demonstrated by Reynolds with a variant on his SRADS protocol [4] the distinction was also used by Steinman in development of the SPEEDES system using the Breathing Time Buckets protocol <ref> [12] </ref>. Both methods employ aggressiveness, but not risk. The most widely cited optimistic systems use risk, notably the Time Warp Operating System (TWOS) [6] and Georgia Time Warp (GTW) [3]. The TWOS effort ended some years ago; GTW typifies Time Warp simulators in current use.
References-found: 12

