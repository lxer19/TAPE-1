URL: http://www.cs.cornell.edu/Info/People/chichao/ew98-1.ps
Refering-URL: http://www.cs.cornell.edu/Info/People/chichao/papers.htm
Root-URL: http://www.cs.brown.edu/
Title: Security versus Performance Tradeoffs in RPC Implementations for Safe Language Systems  
Author: ChiChao Chang, Grzegorz Czajkowski, Chris Hawblitzel, Deyu Hu, and Thorsten von Eicken 
Affiliation: Department of Computer Science Cornell University  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> B. Chun, A. Mainwaring, D. Culler. </author> <title> Virtual Network Transport Protocols for Myrinet . Hot Interconnects V, </title> <publisher> Stanford, </publisher> <address> CA, </address> <month> Aug </month> <year> 1997. </year>
Reference-contexts: User-level network interfaces such as VIA [2], U-Net [10], Fast Messages [8], NoW Active Messages <ref> [1] </ref>, or Shrimp VMMC [3] are removing the operating system from the critical communication path by allowing applications to access the network interface directly. As a result, the overhead of the network transport underlying RPC decreases by almost an order of magnitude.
Reference: [2] <institution> Compaq Computer Corp., Intel Corporation, Microsoft Corporation. Virtual Interface Architecture Specification, </institution> <note> Version 1.0 . http://www.viarch.org/. December 16, </note> <year> 1997. </year>
Reference-contexts: While the overheads of the RPC system itself are secondary, two ongoing developments are likely to change this and will cause the current RPC systems to become the bottleneck in communication: user-level network interfaces and safe languages. User-level network interfaces such as VIA <ref> [2] </ref>, U-Net [10], Fast Messages [8], NoW Active Messages [1], or Shrimp VMMC [3] are removing the operating system from the critical communication path by allowing applications to access the network interface directly.
Reference: [3] <author> Dubnicki, C., A. Bilas, Y. Chen, S. Damianakis, and K. Li. VMMC-2: </author> <title> Efficient Support for Reliable, Connection-Oriented Communication. Hot Interconnects V, </title> <publisher> Stanford, </publisher> <address> CA, </address> <month> Aug </month> <year> 1997. </year>
Reference-contexts: User-level network interfaces such as VIA [2], U-Net [10], Fast Messages [8], NoW Active Messages [1], or Shrimp VMMC <ref> [3] </ref> are removing the operating system from the critical communication path by allowing applications to access the network interface directly. As a result, the overhead of the network transport underlying RPC decreases by almost an order of magnitude.
Reference: [4] <author> C. Hawblitzel, C. Chang, G. Czajkowski, D. Hu, and T. von Eicken. </author> <booktitle> Implementing Multiple Protection Domains in Java . To appear in Proceedings of 1998 USENIX Annual Technical Conference, </booktitle> <month> June </month> <year> 1998. </year>
Reference: [5] <author> JavaSoft. </author> <title> Remote Method Invocation and Object Serialization Specification . Available at http://java.sun.com. </title>
Reference-contexts: This design is similar in many ways to capability-based systems such as Amoeba [7] and to RPC systems based on safe languages such as Java's Remote Method Invocation <ref> [5] </ref> and Modula-3's Secure Network Objects [9]. In particular, the J-Kernel design borrows the Java RMI's usage of Remote interfaces to serve as compile-time annotations of objects that implement remote services, and can use Java Object Serialization [5] for data marshalling. <p> to RPC systems based on safe languages such as Java's Remote Method Invocation <ref> [5] </ref> and Modula-3's Secure Network Objects [9]. In particular, the J-Kernel design borrows the Java RMI's usage of Remote interfaces to serve as compile-time annotations of objects that implement remote services, and can use Java Object Serialization [5] for data marshalling. An important difference is that the distributed J-Kernel uses the capability abstraction to represent a remote service regardless of its location. 3.
Reference: [6] <author> B. Lampson, M. Abadi, M. Burrows, and E.Wobber. </author> <title> Authentication in distributed systems: </title> <journal> Theory and Practice . ACM Transactions on Computer Systems, </journal> <volume> 10(4) </volume> <pages> 265-310, </pages> <month> Nov. </month> <year> 1992. </year>
Reference: [7] <author> S. J. Mullender, A. S. Tanenbaum, and R. van Renesse. </author> <booktitle> Using sparse capabilities in a distributed operating system . In Proceedings of the 6 th IEEE conference on Distributed Computing Systems, </booktitle> <month> June </month> <year> 1986. </year>
Reference-contexts: This design is similar in many ways to capability-based systems such as Amoeba <ref> [7] </ref> and to RPC systems based on safe languages such as Java's Remote Method Invocation [5] and Modula-3's Secure Network Objects [9].
Reference: [8] <author> Pakin, S., M. Lauria, and A. Chien. </author> <title> High Performance Messaging on Workstations: Illinois Fast Messages (FM) for Myrinet. </title> <booktitle> In Proceedings of Supercomputing 95, </booktitle> <address> San Diego, California, </address> <year> 1995. </year>
Reference-contexts: While the overheads of the RPC system itself are secondary, two ongoing developments are likely to change this and will cause the current RPC systems to become the bottleneck in communication: user-level network interfaces and safe languages. User-level network interfaces such as VIA [2], U-Net [10], Fast Messages <ref> [8] </ref>, NoW Active Messages [1], or Shrimp VMMC [3] are removing the operating system from the critical communication path by allowing applications to access the network interface directly. As a result, the overhead of the network transport underlying RPC decreases by almost an order of magnitude.
Reference: [9] <author> L. van Doorn, M. Abadi, M. Burrows, and E. </author> <title> Wobber. </title> <booktitle> Secure Network Objects . In Proceedings of the IEEE Security and Privacy Conference, IEEE, </booktitle> <address> Oakland, CA, V.S., </address> <year> 1996. </year>
Reference-contexts: This design is similar in many ways to capability-based systems such as Amoeba [7] and to RPC systems based on safe languages such as Java's Remote Method Invocation [5] and Modula-3's Secure Network Objects <ref> [9] </ref>. In particular, the J-Kernel design borrows the Java RMI's usage of Remote interfaces to serve as compile-time annotations of objects that implement remote services, and can use Java Object Serialization [5] for data marshalling.
Reference: [10] <author> T. von Eicken, A. Basu, V. Buch, and W. Vogels. U-Net: </author> <title> User-Level Network Interface for Parallel and Distributed Computing. </title> <booktitle> In Proceedings of the 15 th Annual Symposium on Operating System Principles, </booktitle> <address> p.40-53, Copper Mountain Resort, Colorado, </address> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: While the overheads of the RPC system itself are secondary, two ongoing developments are likely to change this and will cause the current RPC systems to become the bottleneck in communication: user-level network interfaces and safe languages. User-level network interfaces such as VIA [2], U-Net <ref> [10] </ref>, Fast Messages [8], NoW Active Messages [1], or Shrimp VMMC [3] are removing the operating system from the critical communication path by allowing applications to access the network interface directly. As a result, the overhead of the network transport underlying RPC decreases by almost an order of magnitude.
Reference: [11] <institution> W3C Consortium at http://www.w3.org. </institution>
Reference-contexts: The RPC subsystems can further encrypt entire outgoing bytestreams to attain complete secrecy using DES. 4. Applications The following is a brief description of applications we are currently developing using the RPC system in the distributed J-Kernel. Extensible HTTP Browser: We are currently integrating the J-Kernel technology into Amaya <ref> [11] </ref>, a Java-based web browser developed by W3C Consortium. Java applets running on browsers often interact with the server from which it originated using standard I/O streams based on HTTP and TCP protocols.
References-found: 11

