URL: ftp://zonker.uwaterloo.ca/pub/TRs/2746.ps.Z
Refering-URL: http://www.cs.umd.edu/users/akyurek/papers.html
Root-URL: 
Email: email akyurek@cs.umd.edu, salem@cs.umd.edu  
Phone: tel (301) 405-2708  
Title: Placing Replicated Data to Reduce Seek Delays  
Author: Sedat Akyurek Kenneth Salem 
Note: This work was supported by National Science Foundation Grant No: CCR-8908898 and in part by CESDIS. Also in the Proceedings of USENIX File System Conference,  
Address: College Park, Maryland 20742  College Park, Maryland 20742  
Affiliation: Department of Computer Science University of Maryland  Department of Computer Science and Institute for Advanced Computer Studies University of Maryland  
Date: August, 1991  May 1992.  
Pubnum: UMIACS-TR-91-121 CS-TR-2746  
Abstract-found: 0
Intro-found: 1
Reference: [Akyurek 91] <author> Akyurek, Sedat, Kenneth Salem, </author> <title> "Placing Replicated Data to Reduce Seek Delays," </title> <institution> Tech nical Report CS-TR-2746 (UMIACS-TR-91-121), Department of Computer Science, University of Maryland, College Park, </institution> <month> August </month> <year> 1991. </year>
Reference: [Bitton 87] <author> Bitton, </author> <title> Dina, </title> <booktitle> "Technology Trends in Mass-Storage Systems," Proceedings of the SIGMOD 1987 Annual Conference, </booktitle> <address> San Francisco, California, </address> <year> 1987. </year>
Reference-contexts: 1 Introduction Random access time is a major factor that degrades the performance of disks. As improvements in CPU and memory speeds continue to outpace improvements in disk speeds, the importance of reducing random access times increases <ref> [Bitton 87] </ref>. Typically, seek time constitutes nearly half of the random access time, the rest being rotational latency and channel contention [Bitton 88]. Average seek time can be reduced significantly by replicating some data on the disk and spreading the replicas across the disk's surface. <p> The problem of finding the optimal separation between the heads of multi-headed disks is similar to that of finding optimal locations for replicated data. In [Calder 84], optimum head separation is studied with independent and uniformly distributed cylinder accesses. In <ref> [Bitton 87] </ref>, the effect of disk shadowing in reducing the seek times is studied. Data are fully replicated on two or more disks, and disks are not synchronized.
Reference: [Bitton 88] <author> Bitton, Dina, Jim Gray, </author> <title> "Disk Shadowing," </title> <booktitle> Proceedings of the 14th VLDB Conference, </booktitle> <address> Los Angeles, California, </address> <year> 1988. </year>
Reference-contexts: As improvements in CPU and memory speeds continue to outpace improvements in disk speeds, the importance of reducing random access times increases [Bitton 87]. Typically, seek time constitutes nearly half of the random access time, the rest being rotational latency and channel contention <ref> [Bitton 88] </ref>. Average seek time can be reduced significantly by replicating some data on the disk and spreading the replicas across the disk's surface. To satisfy a request for replicated data, a suitable replica, e.g. the one nearest the disk head, can be retrieved.
Reference: [Calder 84] <author> Calderbank, A. R., E. G. Coffman, JR., L. Flatto, </author> <title> "Optimum Head Separation in a Disk System with Two Read/Write Heads," </title> <journal> JACM, Vol.31, </journal> <volume> No.4, </volume> <month> October </month> <year> 1984. </year>
Reference-contexts: Another related set of studies concerns the use of multi-headed disks for reducing seek delay <ref> [Calder 84, Manolo 91] </ref>. Models of multi-headed disks, both with heads a fixed distance apart [Calder 84] and heads moving independently [Manolo 91] have been considered. The problem of finding the optimal separation between the heads of multi-headed disks is similar to that of finding optimal locations for replicated data. <p> Another related set of studies concerns the use of multi-headed disks for reducing seek delay [Calder 84, Manolo 91]. Models of multi-headed disks, both with heads a fixed distance apart <ref> [Calder 84] </ref> and heads moving independently [Manolo 91] have been considered. The problem of finding the optimal separation between the heads of multi-headed disks is similar to that of finding optimal locations for replicated data. In [Calder 84], optimum head separation is studied with independent and uniformly distributed cylinder accesses. <p> Models of multi-headed disks, both with heads a fixed distance apart <ref> [Calder 84] </ref> and heads moving independently [Manolo 91] have been considered. The problem of finding the optimal separation between the heads of multi-headed disks is similar to that of finding optimal locations for replicated data. In [Calder 84], optimum head separation is studied with independent and uniformly distributed cylinder accesses. In [Bitton 87], the effect of disk shadowing in reducing the seek times is studied. Data are fully replicated on two or more disks, and disks are not synchronized.
Reference: [Carson 89] <author> Carson, Scott D., Paul F. Renolds, Jr., </author> <title> "Adaptive Disk Reorganization," </title> <type> Technical Report 2178, </type> <institution> Department of Computer Science, University of Maryland at College Park, </institution> <month> January </month> <year> 1989. </year>
Reference-contexts: A large group of studies have dealt with the placement of data on disk for optimizing seek times <ref> [Grossman 73, Wong 80, Carson 89] </ref>. In [Carson 89], an adaptive method for reorganizing data according to the changing access patterns is studied. This study suggests that adaptive reorganization of data can outperform static placement techniques. <p> A large group of studies have dealt with the placement of data on disk for optimizing seek times [Grossman 73, Wong 80, Carson 89]. In <ref> [Carson 89] </ref>, an adaptive method for reorganizing data according to the changing access patterns is studied. This study suggests that adaptive reorganization of data can outperform static placement techniques.
Reference: [Carson 91] <author> Carson, Scott D., Meenal Jobalia, </author> <title> "Precision Measurement of Disk Delay Parameters," </title> <type> Technical Report, </type> <institution> Department of Computer Science, University of Maryland at College Park, </institution> <note> in preparation. </note>
Reference-contexts: We have plotted the results in terms of seek time, in Figures 3a and 3b, for "zonker" and "ballast", respectively. Different disks have different seek time functions. We have used functions measured for our types of disks, as given in <ref> [Carson 91] </ref> and [Seltzer 90]. These are given in Table 2. Although the seek time reductions are not as big as the reductions in distance, they are significant. On ballast, the use of 500 replicas reduced the mean seek time by 24%.
Reference: [Geist 87] <author> Geist, Robert, Stephen Daniel, </author> <title> "Continuum of Disk Scheduling Algorithms," </title> <journal> ACM Trans actions on Computer Systems, Vol.5, </journal> <volume> No.1, </volume> <month> February </month> <year> 1987. </year> <month> 20 </month>
Reference-contexts: In [Carson 89], an adaptive method for reorganizing data according to the changing access patterns is studied. This study suggests that adaptive reorganization of data can outperform static placement techniques. There have also been many studies of disk head scheduling to reduce seek delay <ref> [Teorey 72, Hofri 80, Geist 87, Seltzer 90] </ref>. However, disk head scheduling is only effective when the disk queue lengths are large. In practice, disk queue lengths are generally too short to take advantage of scheduling [King 90].
Reference: [Grossman 73] <author> Grossman, David D., Harvey F. Silverman, </author> <title> "Placement of Records on a Secondary Storage Device to Minimize Access Time," </title> <journal> JACM, Vol.20, </journal> <volume> No.3, </volume> <month> July </month> <year> 1973. </year>
Reference-contexts: A large group of studies have dealt with the placement of data on disk for optimizing seek times <ref> [Grossman 73, Wong 80, Carson 89] </ref>. In [Carson 89], an adaptive method for reorganizing data according to the changing access patterns is studied. This study suggests that adaptive reorganization of data can outperform static placement techniques.
Reference: [Hofri 80] <author> Hofri, M., </author> <title> "Disk Sceduling: FCFS vs. SSTF Revisited," </title> <journal> Communications of the ACM, Vol.23, </journal> <volume> No.11, </volume> <year> 1980. </year>
Reference-contexts: In [Carson 89], an adaptive method for reorganizing data according to the changing access patterns is studied. This study suggests that adaptive reorganization of data can outperform static placement techniques. There have also been many studies of disk head scheduling to reduce seek delay <ref> [Teorey 72, Hofri 80, Geist 87, Seltzer 90] </ref>. However, disk head scheduling is only effective when the disk queue lengths are large. In practice, disk queue lengths are generally too short to take advantage of scheduling [King 90].
Reference: [King 90] <author> King, Richard P., </author> <title> "Disk Arm Movement in Anticipation of Future Requests," </title> <journal> ACM Trans actions on Computer Systems, Vol.8, </journal> <volume> No.3, </volume> <year> 1990. </year>
Reference-contexts: However, disk head scheduling is only effective when the disk queue lengths are large. In practice, disk queue lengths are generally too short to take advantage of scheduling <ref> [King 90] </ref>. In [King 90], King suggests that when the load on the disk is low, the disk head can be moved when it is idle, to a place in anticipation of the future requests to reduce seek distances. <p> However, disk head scheduling is only effective when the disk queue lengths are large. In practice, disk queue lengths are generally too short to take advantage of scheduling <ref> [King 90] </ref>. In [King 90], King suggests that when the load on the disk is low, the disk head can be moved when it is idle, to a place in anticipation of the future requests to reduce seek distances.
Reference: [Manolo 91] <author> Manolopoulos, Yannis, Athina Vakali, </author> <title> "Seek Distances in Disks with Two Independent Heads Per Surface," </title> <journal> Information Processing Letters, </journal> <month> January </month> <year> 1991. </year>
Reference-contexts: Another related set of studies concerns the use of multi-headed disks for reducing seek delay <ref> [Calder 84, Manolo 91] </ref>. Models of multi-headed disks, both with heads a fixed distance apart [Calder 84] and heads moving independently [Manolo 91] have been considered. The problem of finding the optimal separation between the heads of multi-headed disks is similar to that of finding optimal locations for replicated data. <p> Another related set of studies concerns the use of multi-headed disks for reducing seek delay [Calder 84, Manolo 91]. Models of multi-headed disks, both with heads a fixed distance apart [Calder 84] and heads moving independently <ref> [Manolo 91] </ref> have been considered. The problem of finding the optimal separation between the heads of multi-headed disks is similar to that of finding optimal locations for replicated data. In [Calder 84], optimum head separation is studied with independent and uniformly distributed cylinder accesses.
Reference: [Salem 91] <author> Salem, Kenneth, Daniel Barbara, Richard J. Lipton, </author> <title> "Probalistic Diagnosis of Hot Spots," </title> <type> Tecnical Report CS-TR-2636, </type> <institution> Department of Computer Science, University of Maryland, College Park, </institution> <month> March </month> <year> 1991. </year>
Reference-contexts: However, in many cases, we will only be interested in the values of f b for those blocks that are frequently requested, i.e. , those with large value of f b . Techniques such as those described in <ref> [Salem 91] </ref> can be used to measure the values of f b for frequently requested blocks without storing the entire distribution f b . 3 Simulations In this section we will present the results of trace-driven simulations we have used to determine the reduction in average seek distance that can be
Reference: [Seltzer 90] <author> Seltzer, Margo, Peter Chen, John Ousterhout, </author> <title> "Disk Scheduling Revisited," </title> <booktitle> Proceeding of the Winter 1990 USENIX Conference, </booktitle> <address> Washington, D.C., </address> <year> 1990. </year>
Reference-contexts: In [Carson 89], an adaptive method for reorganizing data according to the changing access patterns is studied. This study suggests that adaptive reorganization of data can outperform static placement techniques. There have also been many studies of disk head scheduling to reduce seek delay <ref> [Teorey 72, Hofri 80, Geist 87, Seltzer 90] </ref>. However, disk head scheduling is only effective when the disk queue lengths are large. In practice, disk queue lengths are generally too short to take advantage of scheduling [King 90]. <p> We have plotted the results in terms of seek time, in Figures 3a and 3b, for "zonker" and "ballast", respectively. Different disks have different seek time functions. We have used functions measured for our types of disks, as given in [Carson 91] and <ref> [Seltzer 90] </ref>. These are given in Table 2. Although the seek time reductions are not as big as the reductions in distance, they are significant. On ballast, the use of 500 replicas reduced the mean seek time by 24%.
Reference: [Solworth 90] <author> Solworth, Jon A., Cyril U. Orji, </author> <title> "Write-Only Disk Caches," </title> <booktitle> Proceedings of the SIGMOD 1990 International Conference, </booktitle> <address> Atlantic City, New Jersey, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: For example, the UNIX operating system buffers and delays updates. Thus, although the update rate does increase disk utilization and therefore, indirectly, read response times, the impact may not be severe. Other techniques, such as non-volatile buffers for updates and "write-only" disk caches <ref> [Solworth 90] </ref> can also be used to reduce the update penalty. When update performance is critical, seek time reductions from replication can be traded-off to reduce the update load, if necessary.
Reference: [Teorey 72] <author> Teorey, T. J., T. B. Pinkerton, </author> <title> "A Comparative Analysis of Disk Scheduling Policies," </title> <journal> Communications of the ACM, Vol.15, </journal> <volume> No.3, </volume> <year> 1972. </year>
Reference-contexts: In [Carson 89], an adaptive method for reorganizing data according to the changing access patterns is studied. This study suggests that adaptive reorganization of data can outperform static placement techniques. There have also been many studies of disk head scheduling to reduce seek delay <ref> [Teorey 72, Hofri 80, Geist 87, Seltzer 90] </ref>. However, disk head scheduling is only effective when the disk queue lengths are large. In practice, disk queue lengths are generally too short to take advantage of scheduling [King 90].
Reference: [Wong 80] <author> Wong, C. K., </author> <title> "Minimizing Expected Head Movement in One-Dimensional and Two Dimensional Mass Storage Systems," </title> <journal> Computing Surveys, Vol.12, No.2, </journal> <month> June </month> <year> 1980. </year> <month> 21 </month>
Reference-contexts: A large group of studies have dealt with the placement of data on disk for optimizing seek times <ref> [Grossman 73, Wong 80, Carson 89] </ref>. In [Carson 89], an adaptive method for reorganizing data according to the changing access patterns is studied. This study suggests that adaptive reorganization of data can outperform static placement techniques.
References-found: 16

