URL: http://www.cs.umd.edu/~rich/courses/cmsc818G-s98/papers/liu_deferred.ps
Refering-URL: http://www.cs.umd.edu/~rich/courses/cmsc818G-s98/resources.html
Root-URL: 
Title: Modified Rate-Monotonic Algorithm for Scheduling Periodic Jobs with Deferred Deadlines  
Author: Wei Kuan Shih, J. W. S. Liu and C. L. Liu 
Address: West Springfield Avenue  Urbana, Illinois 61801  
Affiliation: 1304  Department of Computer Science University of Illinois  
Abstract: The deadline of a request is the time instant at which its execution must complete. The deadline of the request in any period of a job with deferred deadline is some time instant after the end of the period. This paper describes a semi-static, priority-driven algorithm for scheduling periodic jobs with deferred deadlines: each job is assigned two priorities, the higher one for old requests and the lower one for the current request. This algorithm is called the modified rate-monotonic algorithm and is based on the well-known rate-monotonic algorithm. We show that the modified rate-monotonic algorithm is optimal when the deadline of every job is deferred by max (1, g - 1) periods or more, where g is the ratio between the longest period and the shortest period. When the deadline of each job is deferred by one period of the job, any set of n independent jobs whose total utilization is equal to or less than [1 + n (2 1/n - 1)] / 2 can be feasibly scheduled by this algorithm. This bound approaches 0.845 when n approaches infinity. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Liu, C. L. and J. W. Layland, </author> <title> ``Scheduling algorithms for multiprogramming in a hard real-time environment,'' </title> <journal> Journal of ACM, </journal> <volume> Vol. 20, No. 1, </volume> <pages> pp. 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: schedules of a set J of independent periodic jobs exist as long as the fraction of time all the jobs in J keep the processor busy is hhhhhhhhhhhhhhhhhhhhhhhhhhhhh Appeared in IEEE Transactions on Software Engineering, Vol. 19, No. 12, pp. 1171-1179, December 1993. 1 less than or equal to one <ref> [1] </ref>. A scheduling algorithm is optimal if it always finds a feasible schedule whenever one exists. Periodic jobs are often scheduled preemptively on uniprocessor systems using a class of algorithms known as priority-driven algorithms [1-6]. <p> It is known to be optimal. The latter assigns priorities statically to jobs (and, hence, to individual requests in them) on the basis of their periods; the shorter the period of a job, the higher its priority. It has been shown <ref> [1] </ref> that as long as the average fraction of time a set J of n independent jobs keeps the processor busy is less than or equal to (1)U (n ) = n ( 2 1/n - 1 ) (that is, 0.82 for n = 2 and ln 2 for large n <p> The total utilization U = i =1 n u i of the job set J is the fraction of time all the jobs in J keep the processor busy. It is well-known that feasible schedules of J exist as long as U 1 <ref> [1] </ref>. A set of job is said to be schedulable according to an algorithm if the algorithm always produces a feasible schedule. 3. Modified Rate-Monotonic Algorithm Again, the modified rate-monotonic algorithm, like the rate-monotonic algorithm, is preemptive and priority-driven. <p> Corollary 3: A schedulability bound for the modified rate-monotonic algorithm of a set of n jobs is (8) U M (n ,g) = min <ref> [1, [1 + U (n )] </ref> iiiiiiiiii + g [1 - U (n )] iiiiiiiiii ] Proof: From the proof the Theorem 3, we see that a set of n jobs is not schedulable according to the modified rate-monotonic algorithm if the total utilization is at least equal to (1 + <p> a a a a a a a a a a b b b b b b b b b b b b b b b b b n 0.6 1.0 g Schedulability bound of the modified rate-monotonic algorithm a Schedulability bound of the rate-monotonic algorithm for d i = 0 <ref> [1] </ref> b Schedulability bound of the rate-monotonic algorithm for d i = p i [6] 12 processor time. The current requests of A are assigned no processor time. <p> p A ,(i -1) pA,i i = n A , . . . 3, 2 i =2 n A (9d)(p A ,1 pA,i ) / p A ,i = 2 The total utilization U A of the subset A is ln 2 in the limit when n A approaches infinity <ref> [1] </ref>. <p> We note that in a rate-monotonic schedule S RM of J, all the requests in A are completed by the end of their periods of arrival <ref> [1] </ref>. In any interval of length t , for any t that is very large compared with p A ,1 , there are (1 - ln 2) t units of processor time left over after all the requests in A are completed. <p> time causing the old request of A 1 to miss its deadline kp A + p A ,1 . (This follows from the fact that in a rate-monotonic schedule of A, the first request of the job A 1 cannot be completed at the end of its period of arrival <ref> [1] </ref>.) The total utilization of the set J is only slightly larger than U w , and yet it cannot be feasibly scheduled according to the modified rate-monotonic algorithm. 6.
Reference: [2] <author> Dhall, S. K. and C. L. Liu, </author> <title> ``On a real-time scheduling problem,'' </title> <journal> Operations Research, </journal> <volume> Vol. 26, No. 1, </volume> <pages> pp. 127-140, </pages> <year> 1978. </year>
Reference: [3] <author> Leung, J. Y.-T. and J. Whitehead, </author> <title> ``On the complexity of fixed-priority scheduling of periodic, real-time jobs,'' </title> <journal> Performance Evaluation, </journal> <volume> Vol. 2, </volume> <pages> pp. 237-250, </pages> <year> 1982. </year>
Reference: [4] <author> Jeffay, K., </author> <title> ``Analysis of a synchronization and scheduling discipline for real-time tasks with preemption constraints,'' </title> <booktitle> Proceedings of the 10th IEEE Real-Time Systems Symposium, </booktitle> <pages> pp. 295-305, </pages> <month> December </month> <year> 1989. </year>
Reference: [5] <author> Lehoczky, J., L. Sha, and Y. Ding, </author> <title> ``The rate-monotonic scheduling algorithm: exact characterization and average case behavior,'' </title> <booktitle> Proceedings of the 10th IEEE Real-Time Systems Symposium, </booktitle> <pages> pp. 166-171, </pages> <month> December </month> <year> 1989. </year>
Reference: [6] <author> Lehoczky, J., </author> <title> ``Fixed-priority scheduling of task sets with arbitrary deadlines,'' </title> <booktitle> Proceedings of the 11th Real-Time Systems Symposium, </booktitle> <address> Orlando, Florida, </address> <month> December </month> <year> 1990. </year>
Reference-contexts: Because of its stable behavior under transient overload, it is often considered to be more suited for real-time applications than the earliest-deadline-first algorithm. In this paper, we consider periodic jobs with deferred deadlines <ref> [6] </ref>, that is, periodic jobs in which the deadline of a request is some time instant after the end of its arrival period. <p> Also shown are the values of the schedulability bounds of the rate-monotonic algorithm when the deadlines are not deferred and when the deadlines are deferred by one period. The latter can be found in <ref> [6] </ref>; it approaches 0.811 for large n . The value of U (n ) approaches ln 2 in the limit of large n , shown as the dashed horizontal line in this figure. <p> b b b b b b b b b b b b b n 0.6 1.0 g Schedulability bound of the modified rate-monotonic algorithm a Schedulability bound of the rate-monotonic algorithm for d i = 0 [1] b Schedulability bound of the rate-monotonic algorithm for d i = p i <ref> [6] </ref> 12 processor time. The current requests of A are assigned no processor time. Hence, the total amount of processor time assigned to the requests in B and D in this segment is at least equal to (t 0 - t -3 ) (1 - U (n )).
Reference: [7] <author> Stoughton, J. W. and R. R. Mielke, </author> <title> ``Strategies for concurrent processing of complex algorithms in data-driven architectures,'' </title> <type> NASA Contractor Report No. 181657, </type> <institution> Nasa Langley Research Center, </institution> <month> February </month> <year> 1988. </year>
Reference-contexts: These jobs allow us to characterize applications where the requests in each job arrive at a higher rate than the rate at which individual requests must be completed. For example in systems described in <ref> [7] </ref>, each request is required to complete by the end of the period following its arrival period. Other examples include statistical jobs [8] in which the execution of any request, if not completed within its arrival period, is allowed to continue until completion in some subsequent period.
Reference: [8] <author> Ellis, J. R., </author> <title> ``A new approach to ensuring deterministic processing in an integrated avionics software system,'' </title> <booktitle> Proceedings of the IEEE NAECON, </booktitle> <pages> pp. 756-764, </pages> <year> 1985. </year> <month> 17 </month>
Reference-contexts: For example in systems described in [7], each request is required to complete by the end of the period following its arrival period. Other examples include statistical jobs <ref> [8] </ref> in which the execution of any request, if not completed within its arrival period, is allowed to continue until completion in some subsequent period. Allowing the execution of a request to continue beyond the end of its arrival period is a way to handle a transient overload condition. <p> Scheduling Mixed Jobs In many systems, there are two classes of jobs: jobs whose requests must be completed by the end of their periods and jobs with deferred deadlines <ref> [8] </ref>. We call the former urgent jobs.
References-found: 8

