URL: http://www.cs.msu.edu/~assemnas/822_paper/Paper.ps.gz
Refering-URL: http://www.cs.msu.edu/~assemnas/822_paper/
Root-URL: http://www.cs.msu.edu
Title: Combining Software and Hardware to Enforce Cache Coherence in Multiprocessors  
Author: Nasser Assem Lionel M. Ni 
Note: Parallel Processing Computer Systems Term Paper Instructor: Professor  
Date: CPS 822 (Spring 1995):  May 4, 1995  
Affiliation: Department of Computer Science Michigan State University  
Abstract: Several mechanisms both hardware and software based have been proposed to solve the problem of cache inconsistency in large-scale shared memory systems. Currently, directory-based protocols, based on hardware, are the most used method for maintaining cache coherency. Their major drawbacks, namely lack of scalability and high memory requirement, resulted in the emergence of new extensions to the classical hardware protocols, the development of software based techniques, and a combination of them. In this paper, we present a survey of current software based techniques. We describe some of the extensions applied to directory based hardware techniques to ameliorate their performance. Addi-tionnaly, we show how some new hybrid techniques take advantage of both hardware and software cache coherence mechanisms, thus achieving better performance. Based on performance analysis and a comparative study of software and classical hardware-based schemes, we draw conclusions about how to choose the appropriate techniques in the design of multi-processor systems. Although advocating software based schemes, this survey does address the difficulties associated with them. The simplification in hardware and in protocols gained by adopting sotware mechanisms result only in a slight performance loss for software based schemes, a loss that becomes relatively smaller and negligible with larger memory latencies. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. V. Adve, V. S. Adve, M. D. Hill, and M. K. Vernon, </author> <title> "Comparison of hardware and software cache coherence schemes," </title> <booktitle> in Proceedings of the 18th Annual International Symposium on Computer Architecture, </booktitle> <pages> pp. 298-308, </pages> <year> 1991. </year>
Reference-contexts: However, few studies have addressed the issues associated with software based schemes. Many strategies have been proposed to solve this problem. Different cache consistency schemes were implemented in multiprocessor systems to enforce cache coherence. Unfortunately, the performance of such systems is affected by the cache coherence mechanism used <ref> [1] </ref>. Two major approaches have been used: hardware and software based schemes. Hardware based shemes maintain cache coherence by implementing control protocols in hardware. The hardware based schemes, such as snoopy coherence schemes and directory based schemes [2], have been the subject of exhaustive studies and evaluations. <p> Adve, V. Adve, M. Hill and M. Vernon in <ref> [1] </ref> used mean value analysis models to compare representative hardware and software cache coherence schemes for a large-scale shared-memory systems. The goal is to identify the workloads for which either of the schemes is significantly better.
Reference: [2] <author> D. Chaiken, C. Fields, K. Kwihara, and A. Agrawal, </author> <title> "Directory-based cache coherence in large-scale multiprocessor," </title> <journal> IEEE Computer, </journal> <volume> vol. 23, no. 6, </volume> <year> 1990. </year>
Reference-contexts: Two major approaches have been used: hardware and software based schemes. Hardware based shemes maintain cache coherence by implementing control protocols in hardware. The hardware based schemes, such as snoopy coherence schemes and directory based schemes <ref> [2] </ref>, have been the subject of exhaustive studies and evaluations. Snoopy coherence schemes can ensure that all processors use the most up-to-date copy of ach shared variable, but the shared bus can become a serious performance bottleneck.
Reference: [3] <author> H. Cheong and A. V. Veidenbaum, </author> <title> "Compiler-directed cache management in multiprocessors," </title> <journal> IEEE Computer, </journal> <volume> vol. 23, </volume> <pages> pp. 39-47, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Software-controlled cache coherence schemes have the advantage of simplified hardware and the reduction of inter-processor communication traffic. H. Cheong and A. Veidenbaum in <ref> [3] </ref> presented three software-based cache coherence protocols. These protocols rely on the intelligence of the compiler.
Reference: [4] <author> T. cker Chiueh, </author> <title> "A generational algorithm to multiprocessor cache coherence," </title> <booktitle> in Proceedings of the 1993 International Conference on Parallel Processing, </booktitle> <volume> vol. I, </volume> <pages> pp. 20-24, </pages> <year> 1993. </year>
Reference-contexts: Unfortunately these methods have several implementation and performance problems that prevent them from being practical implementation choices. T. Chiueh in <ref> [4] </ref> presented a generational cache coherence algorithm that 8 eliminates those drawbacks. Moreover, this algorithm can exploit inter-level temporal locality of parallel programs with significantly less hardware support.
Reference: [5] <author> F. Dahlgren, M. Dubois, and P. Stenstrom, </author> <title> "Combined performance gains of simple cache protocol extensions," </title> <booktitle> Annual International Symposium on Computer Architecture, </booktitle> <pages> pp. 187-197, </pages> <year> 1994. </year>
Reference-contexts: Two compiler optimizations are presented. They exploit high level sharing information to reduce the size of the directory. Finally Section 5 provides a comparison of hardware and software cache coherence schemes. 2 Extensions to Directory-Based Cache Coherence Protocols F. Dahlgren, M. Dubois and P. Stenstrom <ref> [5] </ref> considered three simple extensions to directory-based cache coherence protocols in shared-memory multiprocessors. These extensions are used mainly to reduce memory accesses penalties. These extensions are: * a hardware prefetching scheme, * a migratory sharing optimization, * a competitive-update mechanism.
Reference: [6] <author> D. J. Lilja and P.-C. Yew, </author> <title> "Improving memory utilization in cache coherence directories," </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> vol. 4, </volume> <pages> pp. 1130-1146, </pages> <month> Oct. </month> <year> 1993. </year>
Reference-contexts: However, they still allocate pointers to blocks that do not need them. D. J. Lilja and P. Yew in <ref> [6] </ref> presented two compiler optimizations that exploit the high-level sharing information available to the compiler to further reduce the size of a tagged directory by allocating pointers only when necessary. 4.1 Block Partitioning Blocks can be classified into three types: * "Shared-writable" blocks * "Private" blocks 9 * "Shared read-only" blocks
Reference: [7] <author> D. J. Lilja, </author> <title> "Cache coherence in large-scale shared-memory multiprocessors: Issues and comparisons," </title> <journal> ACM Computing Surveys, </journal> <volume> vol. 25, </volume> <pages> pp. 303-338, </pages> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: D. Lilja in <ref> [7] </ref> also surveyed current cache coherence mechanisms, identified several issues critical to their design, and compared their performance.
Reference: [8] <author> S. L. Scott and J. R. Goodman, </author> <title> "Performance of pruning-cache directories for large-scale multiprocessors," </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> vol. 4, </volume> <pages> pp. 520-534, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: As systems grow beyond a single bus, the bandwidth requirements of broadcast operations limit scalability, and hardware support to provide cache coherence without the use of broadcast can 4 become very expensive. S. Scott and J. Goodman in <ref> [8] </ref> presented an approach for maintaining coherence using approximate information held in special-purpose caches, called pruning-caches. In systems with a hierarchical topology and a multicast capability, the directory can be partitioned hierarchically, as follows: Let us assume the k-ary n-cube topology.
Reference: [9] <author> P. Stenstrom, </author> <title> "A survey of cache coherence schemes for multiprocessors," </title> <journal> IEEE Computer, </journal> <volume> vol. 23, </volume> <pages> pp. 12-24, </pages> <month> June </month> <year> 1990. </year> <month> 15 </month>
References-found: 9

