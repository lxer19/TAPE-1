URL: http://www.csc.ncsu.edu/eos/users/m/mfms/www/wads93.ps
Refering-URL: http://www.csc.ncsu.edu/eos/users/m/mfms/www/publications.html
Root-URL: http://www.csc.ncsu.edu
Title: Fast Algorithms for One-Dimensional Compaction with Jog Insertion  
Author: Matthias F.M. Stallmann Thomas A. Hughes 
Date: February, 1993  
Address: Raleigh, NC 27695-8206  D63/Bldg. 061, PO Box 12195  Triangle Park, NC 27709  
Affiliation: Department of Computer Science North Carolina State University  IBM Corporation Dept.  Research  
Abstract-found: 0
Intro-found: 1
Reference: [Boo91] <author> Heather D. Booth. </author> <title> Some Fast Algorithms on Graphs and Trees. </title> <type> PhD thesis, </type> <institution> Princeton University, </institution> <year> 1991. </year>
Reference-contexts: Data Structure. The required operations can be supported on red-black trees (see [CLR90] for a detailed discussion) with heterogeneous finger searching (see [TV88]), modified to allow numerical fields to be stored in difference form (see <ref> [Boo91] </ref>). The leftmost and rightmost paths of each tree, called the left path and right path, respectively, have been reversed and nodes are accessed from the leftmost or rightmost leaf instead of the root. Constraints are stored at the leaves, except for the leftmost and rightmost leaf. <p> We can implement gap pointers (for the time bound with precompacted input) as constraint nodes q for which I (q) is the union of all intervals of constraints in the gap. Details of the concatenate and split operations are somewhat involved. We refer the reader to Booth's thesis <ref> [Boo91] </ref>.
Reference: [CLR90] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Theorem 8. If the input wiring is precompacted the minimum channel height with jog insertion can be found in time O (n log (k G =n)). 4. Data Structure. The required operations can be supported on red-black trees (see <ref> [CLR90] </ref> for a detailed discussion) with heterogeneous finger searching (see [TV88]), modified to allow numerical fields to be stored in difference form (see [Boo91]). <p> For example, L F (p) = L F (q) + F (p), where q is the left child of p. From Theorem 15.1 in Cormen et al. <ref> [CLR90] </ref>, we know that these fields can be maintained during all structural changes without affecting the time bound.
Reference: [Col89] <author> R. Cole. </author> <title> On the dynamic finger conjecture for splay trees. Part II: Finger searching. </title> <type> Technical Report 471, </type> <institution> Courant Institute, Dept. of Computer Science, </institution> <address> 251 Mercer St., New York, N.Y. 10012, </address> <month> October </month> <year> 1989. </year>
Reference-contexts: Unfortunately, our time bound would require a variant of the as yet unproven "dynamic finger conjecture" (a result for the case where there are no insertions or deletions between accesses has been proven by Cole <ref> [Col89] </ref>). Our phase 2 algorithm would be more interesting if it found the global minimum number of jogs (and/or wire length).
Reference: [Deu85] <author> D.N. Deutsch. </author> <title> Compacted channel routing. </title> <booktitle> In International Conference on Computer-Aided Design, Digest of Technical Papers, </booktitle> <pages> pages 223-225, </pages> <year> 1985. </year>
Reference-contexts: The most difficult part of the generalization is figuring out how to calculate deletion time, dt (C), for a constraint. Phase 2 becomes considerably more complicated when wires have additional degrees of freedom. A number of extensions suggested by other researchers <ref> [Deu85, XK87] </ref> can easily be handled by our algorithms. Channel edges need not be straight lines. The bottom channel edge can be initialized to any shape that can be described by constraints and the shape of the top edge can be determined during phase 2.
Reference: [HSS90] <author> J.-M. Ho, M. Sarrafzadeh, and A. Suzuki. </author> <title> An exact algorithm for single-layer wire-length minimization. </title> <booktitle> In International Conference on Computer-Aided Design, Digest of Technical Papers, </booktitle> <pages> pages 424-427, </pages> <year> 1990. </year>
Reference-contexts: The introduction of non-horizontal wires in the input could be handled by a preprocessor that first removes all the "empty U's" (see <ref> [HSS90] </ref> for an O (n 2 ) algorithm).
Reference: [Hug92] <author> Thomas A. Hughes. </author> <title> Topological Routing Problems. </title> <type> PhD thesis, </type> <institution> North Carolina State University, Dept. of Electrical and Computer Engineering, </institution> <address> Raleigh, NC 27695-7911, </address> <year> 1992. </year>
Reference-contexts: Use of curvilinear wiring for compaction can lead to significant reductions in channel height. Our descriptions are therefore norm-independent wherever possible. Detailed proofs are omitted | we refer the reader to Hughes' thesis <ref> [Hug92] </ref>. The remainder of the paper is organized as follows. Section 2 gives the theoretical background which allows these algorithms to work correctly. Section 3 gives an overview of the phase 1 algorithms. Section 4 describes the required data structures. Section 5 gives the algorithm for phase 2. <p> We assume that f (z) = W i (z; t) is monotone in x for all i = 1; : : : ; n and t 2 I. The following lemma, whose proof is straightforward <ref> [Hug92] </ref>, draws a conclusion for the final compacted routing based on intermediate constraints. Lemma 1. <p> Our compaction algorithms differ from previous ones in two fundamental respects. First, our algorithms use an anticipatory contour, describing the lowest possible position of a subsequent wire rather than a contour based on the highest position of any current wire (see <ref> [Hug92] </ref> for a discussion of the advantages of using an anticipatory contour). Second, our algorithms take advantage of the fact that C k+1 differs only slightly from C k to maintain C k as a balanced search tree. <p> The contour in this case represents the lowest height to which a via can be compacted. Wires will actually be routed V W 2 units lower than the contour, but the overall channel height will still be correct (see <ref> [Hug92] </ref>).
Reference: [Len84] <author> T. Lengauer. </author> <title> On the solution of inequality systems relevant to IC-layout. </title> <journal> Journal of Algorithms, </journal> <volume> 5:408 - 421, </volume> <year> 1984. </year>
Reference-contexts: Figure 3 shows a via whose final position violates this rule | the via would be forced through an intermediate position that violates design rules. Without imposing design rules on intermediate positions, the compaction problem becomes NP-hard (see <ref> [Len84] </ref>). It is easy to see that violation of vertical constraints is also prevented. It is intuitively clear, but difficult to prove that the optimal routing under our restrictions will always have wires monotone in x.
Reference: [LNR88] <author> M. Lorenzetti, M. Nifong, and J. Rose. </author> <title> Channel routing for compaction. </title> <booktitle> In Proc. MCNC International Workshop on Placement and Routing, </booktitle> <month> May </month> <year> 1988. </year>
Reference-contexts: An even faster algorithm for this problem could exist. Computing the channel height without the routing is relevant in practice. Some channel routers and compactors create many alternate routings of a given channel and optimize only the one that has best estimated channel height (see 11 <ref> [LNR88] </ref>). An exact channel height computed quickly would significantly enhance such systems. Splay trees [ST85] actually yield a simpler and cleaner implementation of the data structure operations we need.
Reference: [Mal85] <author> F.M. Maley. </author> <title> Compaction with automatic jog introduction. </title> <booktitle> In Chapel Hill Conference on VLSI, </booktitle> <pages> pages 261-283, </pages> <year> 1985. </year>
Reference-contexts: It is not even clear whether global jog minimization is tractable in our situation. A key open question is how far the techniques used in our algorithm can be pushed to obtain efficient algorithms for more general compaction problems. Maley's compaction algorithms <ref> [Mal85, Mal87] </ref> are more general in that they allow input wires that are not monotone in x and permit modules in the layout. Run times for these algorithms have been improved to O (n 3 log n) in the worst case and O (n 2 ) on average [MN90].
Reference: [Mal87] <author> F.M. Maley. </author> <title> Single-Layer Wire Routing. </title> <type> PhD thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <year> 1987. </year>
Reference-contexts: It is not even clear whether global jog minimization is tractable in our situation. A key open question is how far the techniques used in our algorithm can be pushed to obtain efficient algorithms for more general compaction problems. Maley's compaction algorithms <ref> [Mal85, Mal87] </ref> are more general in that they allow input wires that are not monotone in x and permit modules in the layout. Run times for these algorithms have been improved to O (n 3 log n) in the worst case and O (n 2 ) on average [MN90].
Reference: [MN90] <author> K. Mehlhorn and S. Naher. </author> <title> A faster compaction algorithm with automatic jog insertion. </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits, </journal> <volume> 9(2):158 - 166, </volume> <year> 1990. </year>
Reference-contexts: Run times for these algorithms have been improved to O (n 3 log n) in the worst case and O (n 2 ) on average <ref> [MN90] </ref>. Our techniques appear to extend, albeit with slightly less efficient time bounds, to the case where modules exist, provided that all wires on the layer to be compacted emanate from the same side of a given module.
Reference: [PL88] <editor> Bryan Preas and Michael Lorenzetti, editors. </editor> <booktitle> Physical Design Automation of VLSI Sys--tems. </booktitle> <publisher> Benjamin Cummings, </publisher> <year> 1988. </year>
Reference-contexts: The relative vertical position of wires is not allowed to change during compaction. compacted are shown as thin solid lines while vertical wires on another layer are thick dashed lines. Dots represent vias. Relative vertical position must be maintained due to what are called vertical constraints (see e.g. <ref> [PL88] </ref>). The left part of net A, for example, must be above net B because the vertical wires of these nets share the same x-coordinate. The right part of net A must be below net B for the same reason.
Reference: [ST85] <author> D. D. Sleator and R. E. Tarjan. </author> <title> Self-adjusting binary search trees. </title> <journal> Journal of the ACM, </journal> <volume> 32(3):652 - 686, </volume> <year> 1985. </year>
Reference-contexts: Some channel routers and compactors create many alternate routings of a given channel and optimize only the one that has best estimated channel height (see 11 [LNR88]). An exact channel height computed quickly would significantly enhance such systems. Splay trees <ref> [ST85] </ref> actually yield a simpler and cleaner implementation of the data structure operations we need.
Reference: [TT91] <author> T. C. Tuan and K. H. Teo. </author> <title> On river routing with minimum number of jogs. </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits, </journal> <volume> 10(2):270 - 273, </volume> <year> 1991. </year>
Reference-contexts: Our phase 2 algorithm would be more interesting if it found the global minimum number of jogs (and/or wire length). Tuan and Teo <ref> [TT91] </ref> give an O (nh) dynamic programming algorithm, where h is the channel height, but only for the special case of river routing (the endpoints of wires are not allowed to move vertically and occur only at channel boundaries).
Reference: [TV88] <author> R. E. Tarjan and C. J. Van Wyk. </author> <title> An O(n log log n)-time algorithm for triangulating a simple polygon. </title> <journal> SIAM Journal on Computing, </journal> <volume> 17(1):143 - 178, </volume> <year> 1988. </year>
Reference-contexts: Theorem 8. If the input wiring is precompacted the minimum channel height with jog insertion can be found in time O (n log (k G =n)). 4. Data Structure. The required operations can be supported on red-black trees (see [CLR90] for a detailed discussion) with heterogeneous finger searching (see <ref> [TV88] </ref>), modified to allow numerical fields to be stored in difference form (see [Boo91]). The leftmost and rightmost paths of each tree, called the left path and right path, respectively, have been reversed and nodes are accessed from the leftmost or rightmost leaf instead of the root.
Reference: [vGJ87] <author> L.P.P.P. van Ginneken and J.A.G. Jess. </author> <title> Gridless routing of general floor plans. </title> <booktitle> In IC-CAD, </booktitle> <pages> pages 30-33, </pages> <year> 1987. </year>
Reference-contexts: The best previous time bounds are O (k G ) for phase 1 [XK87] and O (k G ) for phase 2 <ref> [vGJ87] </ref> (add n log t if the input is neither sorted by x-coordinate nor precom-pacted). Simple examples show that k G is in (nt) (see Figure 2). Our better bounds are achieved using a balanced tree with finger searching to maintain the minimum achievable height at each x-coordinate. <p> The ith wire is constrained to be between Top i+1 , the contour formed by the routing of wires n down to i + 1, and C i1 . The algorithm is essentially the same as that of van Ginneken and Jess <ref> [vGJ87] </ref>, which has an O (k G ) running time.
Reference: [XK87] <author> X.-M. Xiong and E. Kuh. Nutcracker: </author> <title> An efficient and intelligent channel spacer. </title> <booktitle> In 24th Design Automation Conference, </booktitle> <pages> pages 298-304, </pages> <year> 1987. </year> <title> 13 Fig. 1. An example showing two phases of compaction. Fig. 2. Number of greedy jogs is (nt). Fig. 3. Illegal intermediate position for a via. Fig. 4. An example showing two phases of compaction. Fig. 5. Updates to the contour after a new wire is added Fig. 6. Merging two consecutive constraints of the same height. Fig. 7. A red-black tree with heterogeneous finger searching. </title>
Reference-contexts: The best previous time bounds are O (k G ) for phase 1 <ref> [XK87] </ref> and O (k G ) for phase 2 [vGJ87] (add n log t if the input is neither sorted by x-coordinate nor precom-pacted). Simple examples show that k G is in (nt) (see Figure 2). <p> The most difficult part of the generalization is figuring out how to calculate deletion time, dt (C), for a constraint. Phase 2 becomes considerably more complicated when wires have additional degrees of freedom. A number of extensions suggested by other researchers <ref> [Deu85, XK87] </ref> can easily be handled by our algorithms. Channel edges need not be straight lines. The bottom channel edge can be initialized to any shape that can be described by constraints and the shape of the top edge can be determined during phase 2.
References-found: 17

