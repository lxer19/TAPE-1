URL: http://www.ri.cmu.edu/afs/cs/project/able/ftp/mse-software-submitted.ps
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/project/able/www/paper_abstracts/mse-computer97.html
Root-URL: 
Email: fgarlan,jetg@cs.cmu.edu  dpg@sei.cmu.edu  
Title: Agents of Change: Educating Future Leaders in Software Engineering  
Author: David Garlany James E. Tomaykoy David Gluchz 
Note: DRAFT: Submitted for Publication  
Address: Pittsburgh PA 15213  Pittsburgh PA 15213  
Affiliation: ySchool of Computer Science Carnegie Mellon University  zSoftware Engineering Institute Carnegie Mellon University  
Abstract: Most software engineering professional degree programs focus on solving today's problems with today's technologies. While those programs are needed to help practitioners cope with the changing landscape of software technology, they do not adequately address the need to cultivate future leaders in software engineering. In this paper we describe a Masters of Software Engineering program that is specifically oriented towards the education of "agents of change"| practitioners who will be able to proactively infuse new science and technology into the software engineering profession.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> David Garlan, Alan Brown, Daniel Jackson, Jim Tomayko, and Jeannette Wing. </author> <title> The cmu master of software engineering core curriculum. </title> <booktitle> In Proceedings of the 8th Conference on Software Engineering Education, </booktitle> <pages> pages 65-86, </pages> <address> New Orleans, Lousiana, March 1995. </address> <publisher> Springer-Verlag, LNCS 895. </publisher>
Reference-contexts: Additional details can be found in <ref> [1, 4, 5] </ref>, and on the MSE web site: //http://http://www.cs.cmu.edu/ MSE/. 4 Fall Spring Summer Studio Studio Studio Elective Electives Models Methods Analysis Management Architectures Elective 4. Analysis of Software Artifacts: This course focuses on the analysis of software development products including delivered code, specifications, designs, documentation, prototypes, test suites.
Reference: [2] <author> Donald A. Schon. </author> <title> The Reflective Practitioner: How Professionals Think in Action. </title> <publisher> Basic Books, Incorporated, </publisher> <year> 1983. </year>
Reference-contexts: The guiding principle of the studio experience is "reflective practice" <ref> [2, 3] </ref>. Students are required not only to complete a "real world" project, but are challenged to reflect on the rationale, motivation, and consequences of their decisions and actions. <p> It also provides training in software process management (including Personal Software Process). Students learn from case studies (such as the construction of the new Chicago Public Library), read excerpts from "What Engineers Know and How they Know It [7], and review literature on reflective practice <ref> [2, 3] </ref>. This is where the themes of reflective practice and the broader engineering context that pervade the Studio experience are first introduced. At the beginning of each semester there is kickoff meeting that outlines the Studio activities and expectations for that semester.
Reference: [3] <author> Donald A. Schon. </author> <title> Educating the Reflective Practitioner: Toward a New Design for Teaching and Learning in the Professions. </title> <publisher> Jossey-Bass Incorporated, </publisher> <year> 1987. </year>
Reference-contexts: The guiding principle of the studio experience is "reflective practice" <ref> [2, 3] </ref>. Students are required not only to complete a "real world" project, but are challenged to reflect on the rationale, motivation, and consequences of their decisions and actions. <p> It also provides training in software process management (including Personal Software Process). Students learn from case studies (such as the construction of the new Chicago Public Library), read excerpts from "What Engineers Know and How they Know It [7], and review literature on reflective practice <ref> [2, 3] </ref>. This is where the themes of reflective practice and the broader engineering context that pervade the Studio experience are first introduced. At the beginning of each semester there is kickoff meeting that outlines the Studio activities and expectations for that semester.
Reference: [4] <author> James E Tomayko. </author> <title> Teaching software development in a studio environment. SIGSCE Bulletin: </title> <booktitle> Papers of the 22nd SIGSCE Technical Symposium, </booktitle> <volume> 23(1) </volume> <pages> 300-303, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: Additional details can be found in <ref> [1, 4, 5] </ref>, and on the MSE web site: //http://http://www.cs.cmu.edu/ MSE/. 4 Fall Spring Summer Studio Studio Studio Elective Electives Models Methods Analysis Management Architectures Elective 4. Analysis of Software Artifacts: This course focuses on the analysis of software development products including delivered code, specifications, designs, documentation, prototypes, test suites.
Reference: [5] <author> James E Tomayko. </author> <title> Carnegie mellon's software development studio: A five-year retrospective. </title> <booktitle> In Proceedings of the Ninth Conference on Software Engineering Education, </booktitle> <pages> pages 119-129. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1996. </year>
Reference-contexts: Additional details can be found in <ref> [1, 4, 5] </ref>, and on the MSE web site: //http://http://www.cs.cmu.edu/ MSE/. 4 Fall Spring Summer Studio Studio Studio Elective Electives Models Methods Analysis Management Architectures Elective 4. Analysis of Software Artifacts: This course focuses on the analysis of software development products including delivered code, specifications, designs, documentation, prototypes, test suites.
Reference: [6] <author> James E. Tomayko et al. </author> <title> `continuous verification' in mission critical software development. </title> <booktitle> In Proceedings of the Hawaii International Conference on Systems and Software, </booktitle> <year> 1997. </year>
Reference-contexts: Two Studio teams implemented the software to move and position the robot, move and position its arm, and plan the work. TCAMS: The Tape Copy and Management System (TCAMS) produced the software to control a robotic tape mounting system (and associated computers) for the Air Force's B-2 test program <ref> [6] </ref>. 9 1. Team work aspects (a) professionalism (b) responsible participation (c) pulls weight (d) interaction with others (e) intra-team communication 2. Applying course material (a) metrics (b) techniques (c) extrapolation 3.
Reference: [7] <author> Walter G. Vincenti. </author> <title> What Engineers Know and How They Know It: Analytical Studies from Aeronautical History. </title> <publisher> Johns Hopkins University Press, </publisher> <year> 1990. </year> <month> 13 </month>
Reference-contexts: It also provides training in software process management (including Personal Software Process). Students learn from case studies (such as the construction of the new Chicago Public Library), read excerpts from "What Engineers Know and How they Know It <ref> [7] </ref>, and review literature on reflective practice [2, 3]. This is where the themes of reflective practice and the broader engineering context that pervade the Studio experience are first introduced. At the beginning of each semester there is kickoff meeting that outlines the Studio activities and expectations for that semester.
References-found: 7

