URL: http://www.cse.ogi.edu/~lingliu/tam/final-hicss98.ps
Refering-URL: http://www.cse.ogi.edu/~lingliu/tam/index.html
Root-URL: http://www.cse.ogi.edu
Email: flingliu,caltong@cse.ogi.edu  
Title: A Transactional Activity Model for Organizing Open-ended Cooperative Activities transaction models which focus more on
Author: Ling Liu and Calton Pu 
Note: ative activities. In contrast to each of the extended  
Address: P.O.Box 91000 Portland, Oregon 97291-1000 USA  
Affiliation: Dept. of Computer Science and Engineering Oregon Graduate Institut of Science and Technology  
Abstract: We propose a transactional activity model (TAM) for specification and management of open-ended cooper
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Ansari, L. Ness, M. Rusinkiewicz, and A. Sheth. </author> <title> Using flexible transactions to support multi-system telecommunication applications. </title> <booktitle> In Proceedings of the 18th International Conference on Very Large Data Bases, </booktitle> <pages> pages 65-76, </pages> <year> 1992. </year>
Reference-contexts: This example is an extended scenario of the workflow application for designing telephone circuit described in <ref> [1, 12] </ref>. Suppose the activity A:TeleConnect consists of four sub-activities A 1 :ClientRegister, A 2 :CreditCheck, B:AllocateCircuit, and A 3 :InstallNewCircuit. A is executed when a telephone company customer requests telephone service installation.
Reference: [2] <author> F. Bancilhon, W. Kim, and H. Korth. </author> <title> A model for cad transactions. </title> <booktitle> In Proceeding of the 11th International Conference on Very Large Databases, </booktitle> <pages> pages 25-33. </pages> <publisher> Morgan Kauffman, </publisher> <year> 1985. </year>
Reference-contexts: On the other hand, a number of extended transaction models (ETMs) and workflow systems [10, 11, 16, 17, 22, 20, 9] have been proposed to support diversified new application requirements. For example, Sagas [11] extend the traditional transaction model by including an automated compensation capability within sagas. Cooperative Transactions <ref> [2] </ref>, Split Transactions [20] and Transaction Groups [17] were proposed for capturing the interactions among transactions required in advanced applications. Many of these ETMs were targeted at a particular domain of applications, offering adequate correctness only for this domain [6]. <p> Many of these ETMs were targeted at a particular domain of applications, offering adequate correctness only for this domain [6]. Other ETMs capture only a subset of the spectrum of interactions found in any complex information systems [15]. Cooperation among sibling transactions is supported by Cooperative Transactions <ref> [2, 20, 17] </ref>, although the interactions among siblings are either restricted to leaf node transactions in order to support serializable split-transactions or limited to static and one-shot design of transaction groups.
Reference: [3] <author> R. Barga. </author> <title> A Reflective Framework for the Implementation of Extended Transactions. </title> <type> PhD thesis, </type> <institution> Department of Computer Science and Engineering, Oregon Graduate Institute, Expected, </institution> <year> 1997. </year>
Reference-contexts: Concretely, they have implemented several such models on Transarc Encina, a commercial TP monitor. The models implemented [4] include split and join transactions and cooperative groups, intended for applications that require cooperation. These models are precisely the ETMs of major interest to TAM. The Reflective Transaction Framework <ref> [3] </ref> also includes a systematic way to implement semantics-based concurrency control methods in on-line TP monitors. The basic idea is to explicitly codify the conflicts defined to be allowable by each semantics-based concur-rency control in a compatibility table. <p> Otherwise, the conflicting transaction are stopped. In TAM, the compatibility table for activities is derived by the system (see consult them when conflicts arise. We are currently working towards building a TAM adapter based on the micro-protocols developed by <ref> [4, 3, 23] </ref> on top of the Transarc Encina. Finally, we would like to mention that TAM development is a continuation and a careful combination of our earlier work on activity model [13] and split-transactions [20], and inspired by the recent work in [21].
Reference: [4] <author> R. Barga and C. Pu. </author> <title> A practical and modular implementation technique of extended transaction models. </title> <booktitle> In Proceedings of the 21st International Conference on Very Large Data Bases, </booktitle> <address> Zurich, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: TAM also supports the behavioral refinement and behavioral composition of activity patterns to increase the extensibility and reusability of activity patterns. The separation of activity specification from implementation is a key concept which allows reasoning about concurrency and recovery properties of TAM activities independently from their transaction implementation mechanisms <ref> [4, 12] </ref>. The reasoning capability has also been tested by using the TAM to study the new properties of activity split in the context of TAM. We discuss related work in Section 2. <p> However, full recovery of activities during execution is non-trivial and that is one of places where transaction software can help. Although not a direct implementation of TAM, Barga and Pu <ref> [4] </ref> have developed a method, called the Reflective Transaction Framework to implement extended transaction models by carefully extending online transaction processing (TP) monitors. Concretely, they have implemented several such models on Transarc Encina, a commercial TP monitor. The models implemented [4] include split and join transactions and cooperative groups, intended for <p> Although not a direct implementation of TAM, Barga and Pu <ref> [4] </ref> have developed a method, called the Reflective Transaction Framework to implement extended transaction models by carefully extending online transaction processing (TP) monitors. Concretely, they have implemented several such models on Transarc Encina, a commercial TP monitor. The models implemented [4] include split and join transactions and cooperative groups, intended for applications that require cooperation. These models are precisely the ETMs of major interest to TAM. The Reflective Transaction Framework [3] also includes a systematic way to implement semantics-based concurrency control methods in on-line TP monitors. <p> Otherwise, the conflicting transaction are stopped. In TAM, the compatibility table for activities is derived by the system (see consult them when conflicts arise. We are currently working towards building a TAM adapter based on the micro-protocols developed by <ref> [4, 3, 23] </ref> on top of the Transarc Encina. Finally, we would like to mention that TAM development is a continuation and a careful combination of our earlier work on activity model [13] and split-transactions [20], and inspired by the recent work in [21].
Reference: [5] <author> P. A. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in database ststems. </title> <publisher> Addison-Wesley, </publisher> <year> 1987. </year>
Reference-contexts: Since SACT activities in TAM can be viewed as traditional transactions or nested transactions, and will be mapped to the local transactions [18, 19, 9], each running on a remote server, the correctness criteria developed for conventional and extended transaction models <ref> [5, 6] </ref> can be applied. In this section, we only define the concept of histories of composite activities, and adapt the notation from [5] for histories of simple activities. 4.1 Activity History When a set of composite activities execute concurrently, their subactivities may be interleaved. <p> In this section, we only define the concept of histories of composite activities, and adapt the notation from <ref> [5] </ref> for histories of simple activities. 4.1 Activity History When a set of composite activities execute concurrently, their subactivities may be interleaved. We model such an execution by a structure called activity history.
Reference: [6] <author> P. Chrysanthis and K. Ramamritham. </author> <title> Synthesis of extended transaction models using acta. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 19(3) </volume> <pages> 450-491, </pages> <year> 1994. </year>
Reference-contexts: The effects of an activity on the objects that it accesses are captured by means of access sets of activities and the concept of delegation <ref> [6, 21] </ref>. TAM also supports the behavioral refinement and behavioral composition of activity patterns to increase the extensibility and reusability of activity patterns. <p> Cooperative Transactions [2], Split Transactions [20] and Transaction Groups [17] were proposed for capturing the interactions among transactions required in advanced applications. Many of these ETMs were targeted at a particular domain of applications, offering adequate correctness only for this domain <ref> [6] </ref>. Other ETMs capture only a subset of the spectrum of interactions found in any complex information systems [15]. <p> It should also be possible to enforce these specifications efficiently for concurrency control. Put differently, a transactional activity specification language must provide modeling primitives, similar to those in the ACTA framework <ref> [6] </ref>, and allow explicit specification of application-specific activity dependencies, while satisfying the basic requirement that it must not require complete histories to reason about the correct-ness of concurrent execution of activities. 3 The Transactional Activity Model 3.1 Activity Patterns Activities are executions of activity patterns. <p> Since SACT activities in TAM can be viewed as traditional transactions or nested transactions, and will be mapped to the local transactions [18, 19, 9], each running on a remote server, the correctness criteria developed for conventional and extended transaction models <ref> [5, 6] </ref> can be applied. In this section, we only define the concept of histories of composite activities, and adapt the notation from [5] for histories of simple activities. 4.1 Activity History When a set of composite activities execute concurrently, their subactivities may be interleaved.
Reference: [7] <author> U. Dayal, M. Hsu, and R. Ladin. </author> <title> Organizing long-running activities with triggers and transactions. </title> <booktitle> In Proceedings of the ACM SIGMOD, </booktitle> <year> 1991. </year>
Reference-contexts: In addition to our early proposal [13], other activity models have been proposed [8, 21] to support declarative specification of control flows within activities. Features of long running activities <ref> [8, 7] </ref> include an automatic compensation capability that offers some level of failure atomicity for the activity and the use of ECA-rules for monitoring activities. The cooperative model [21] achieves cooperation by controlled data exchange of the content of workspaces and controlled sharing of a common database among users.
Reference: [8] <author> U. Dayal, M. Hsu, and R. Ladin. </author> <title> A transactional model for long-running activities. </title> <booktitle> In Proceedings of the 17th Very Large Databases, </booktitle> <pages> pages 113-122, </pages> <year> 1991. </year>
Reference-contexts: Another feature supported by TAM is the promotion of enhanced intra-activity parallelism by allowing an activity to be modified dynamically through the invocation of system-supplied activity restructuring operations. In addition to our early proposal [13], other activity models have been proposed <ref> [8, 21] </ref> to support declarative specification of control flows within activities. Features of long running activities [8, 7] include an automatic compensation capability that offers some level of failure atomicity for the activity and the use of ECA-rules for monitoring activities. <p> In addition to our early proposal [13], other activity models have been proposed [8, 21] to support declarative specification of control flows within activities. Features of long running activities <ref> [8, 7] </ref> include an automatic compensation capability that offers some level of failure atomicity for the activity and the use of ECA-rules for monitoring activities. The cooperative model [21] achieves cooperation by controlled data exchange of the content of workspaces and controlled sharing of a common database among users.
Reference: [9] <author> A. Deacon, H. Schek, and G. Weikum. </author> <title> Semantic--based multilevel transaction management in federated systems. </title> <booktitle> In Proceedings of International Conference on Data Engineering, </booktitle> <pages> pages 452-461, </pages> <year> 1994. </year>
Reference-contexts: Hence, issues such as correctness specification and ensurance criteria for concurrent execution of activities and dynamic restructuring of activities have been left open in most of the previous activity models. On the other hand, a number of extended transaction models (ETMs) and workflow systems <ref> [10, 11, 16, 17, 22, 20, 9] </ref> have been proposed to support diversified new application requirements. For example, Sagas [11] extend the traditional transaction model by including an automated compensation capability within sagas. <p> A valid activity history produces correct results and does not violate the con sistency of objects. Since SACT activities in TAM can be viewed as traditional transactions or nested transactions, and will be mapped to the local transactions <ref> [18, 19, 9] </ref>, each running on a remote server, the correctness criteria developed for conventional and extended transaction models [5, 6] can be applied.
Reference: [10] <author> A. K. Elmagarmid. </author> <title> Database Transaction Models for Advanced Applications. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: Hence, issues such as correctness specification and ensurance criteria for concurrent execution of activities and dynamic restructuring of activities have been left open in most of the previous activity models. On the other hand, a number of extended transaction models (ETMs) and workflow systems <ref> [10, 11, 16, 17, 22, 20, 9] </ref> have been proposed to support diversified new application requirements. For example, Sagas [11] extend the traditional transaction model by including an automated compensation capability within sagas.
Reference: [11] <author> H. Garcia-Molina and K. Salem. Sagas. </author> <booktitle> In Proceedings of ACM SIGMOD Int. Conference on Management of Data, </booktitle> <pages> pages 462-473, </pages> <year> 1987. </year>
Reference-contexts: Hence, issues such as correctness specification and ensurance criteria for concurrent execution of activities and dynamic restructuring of activities have been left open in most of the previous activity models. On the other hand, a number of extended transaction models (ETMs) and workflow systems <ref> [10, 11, 16, 17, 22, 20, 9] </ref> have been proposed to support diversified new application requirements. For example, Sagas [11] extend the traditional transaction model by including an automated compensation capability within sagas. <p> On the other hand, a number of extended transaction models (ETMs) and workflow systems [10, 11, 16, 17, 22, 20, 9] have been proposed to support diversified new application requirements. For example, Sagas <ref> [11] </ref> extend the traditional transaction model by including an automated compensation capability within sagas. Cooperative Transactions [2], Split Transactions [20] and Transaction Groups [17] were proposed for capturing the interactions among transactions required in advanced applications. <p> In other words, the activity T may commit even if one of its component activities is aborted. Similar to the saga transactions <ref> [11] </ref>, the commit of a subactivity in TAM is independent of the commit of its parent activity. If an activity aborts, then all its children that are in begin state are aborted; and its committed children, however, are compensated for.
Reference: [12] <author> D. Georgakopoulos, M. Hornick, P. Krychniak, and F. Manola. </author> <title> Specification and management of extended transactions in a programmable transaction environment. </title> <booktitle> In Proceedings of the 1994 IEEE Conference on Data Engineering, </booktitle> <pages> pages 462-473, </pages> <month> Feb </month> <year> 1994. </year>
Reference-contexts: TAM also supports the behavioral refinement and behavioral composition of activity patterns to increase the extensibility and reusability of activity patterns. The separation of activity specification from implementation is a key concept which allows reasoning about concurrency and recovery properties of TAM activities independently from their transaction implementation mechanisms <ref> [4, 12] </ref>. The reasoning capability has also been tested by using the TAM to study the new properties of activity split in the context of TAM. We discuss related work in Section 2. <p> This example is an extended scenario of the workflow application for designing telephone circuit described in <ref> [1, 12] </ref>. Suppose the activity A:TeleConnect consists of four sub-activities A 1 :ClientRegister, A 2 :CreditCheck, B:AllocateCircuit, and A 3 :InstallNewCircuit. A is executed when a telephone company customer requests telephone service installation.
Reference: [13] <author> L. Liu and R. Meersman. </author> <title> Activity model: a declarative approach for capturing communication behavior in object-oriented databases. </title> <booktitle> In Proceeding of the 18th International Conference on Very Large Databases, </booktitle> <pages> pages 481-493, </pages> <address> Van-couver, Canada, </address> <year> 1992. </year> <note> Morgan Kauffman. The long version of this paper is published in ACM Transactions on Database Systems, Vol.21, No.3, </note> <year> 1996. </year>
Reference-contexts: In this paper, we develop a transactional activity model (TAM) for specification and management of open-ended cooperative activities. TAM is a refinement of the activity model proposed in <ref> [13] </ref> by adding transactional properties and by incorporating dynamic restructuring operations [20] into the activity execution. Our results in this paper are a significant advance over each one of the component technology we used. <p> Section 4 discusses issues related to ensuring correctness criteria. We outline the implementation framework in Section 5 and conclude the presentation in Section 6. 2 Related Work The development of TAM can be seen as an extension of the activity model proposed in <ref> [13] </ref> by adding transactional properties and incorporating dynamic restructuring operations [20] into the activity execution. Our early proposal [13] focused more on the scheduling of message exchanges within an execution of simple (flat) activities. In TAM, transactional properties are introduced for the hierarchical organization of activities. <p> the implementation framework in Section 5 and conclude the presentation in Section 6. 2 Related Work The development of TAM can be seen as an extension of the activity model proposed in <ref> [13] </ref> by adding transactional properties and incorporating dynamic restructuring operations [20] into the activity execution. Our early proposal [13] focused more on the scheduling of message exchanges within an execution of simple (flat) activities. In TAM, transactional properties are introduced for the hierarchical organization of activities. We also define the semantics of compensation and exception handling of activities, thus supporting failure recovery and correct cooperation among concurrent users. <p> Another feature supported by TAM is the promotion of enhanced intra-activity parallelism by allowing an activity to be modified dynamically through the invocation of system-supplied activity restructuring operations. In addition to our early proposal <ref> [13] </ref>, other activity models have been proposed [8, 21] to support declarative specification of control flows within activities. Features of long running activities [8, 7] include an automatic compensation capability that offers some level of failure atomicity for the activity and the use of ECA-rules for monitoring activities. <p> An activity pattern describes the communication protocol of a group of cooperating objects in accomplishing a task <ref> [13] </ref>. Given a universe of discourse (UoD), an activity model consists of a nonempty set of activity patterns, describing the intended communication behaviors of cooperating objects in the UoD. <p> We are currently working towards building a TAM adapter based on the micro-protocols developed by [4, 3, 23] on top of the Transarc Encina. Finally, we would like to mention that TAM development is a continuation and a careful combination of our earlier work on activity model <ref> [13] </ref> and split-transactions [20], and inspired by the recent work in [21]. Comparing with the work in [21], TAM provides a number of distinct features.
Reference: [14] <author> L. Liu and C. Pu. </author> <title> Methodical restructuring of complex workflow activities. </title> <booktitle> In Proceedings of the 14th International Conference on Data Engineering (ICDE'98), </booktitle> <address> Orlando, Florida, USA, </address> <month> February </month> <year> 1998. </year>
Reference-contexts: Hence, M is antisymmetric. 2 This proposition states that the correctness of a merged history is defined and guaranteed by assuming two input histories are valid. Due to the space restriction, we here omit examples that illustrate the concept of correctness of merged activity histories. Readers may refer to <ref> [14] </ref> for detail. 5 Implementation Issues The implementation of TAM is a subject of our ongoing research. In this section, we outline some of the major issues faced by implementors and some potential solutions. <p> Interested readers may refer to <ref> [14] </ref> for detail.. The concept of activity history and merged activity history are formally defined.
Reference: [15] <author> C. Mohan. </author> <title> Advanced Transaction Models Survey and Critique. </title> <booktitle> Tutorial presented at the ACM SIGMOD international conference, </booktitle> <year> 1994. </year>
Reference-contexts: Many of these ETMs were targeted at a particular domain of applications, offering adequate correctness only for this domain [6]. Other ETMs capture only a subset of the spectrum of interactions found in any complex information systems <ref> [15] </ref>. Cooperation among sibling transactions is supported by Cooperative Transactions [2, 20, 17], although the interactions among siblings are either restricted to leaf node transactions in order to support serializable split-transactions or limited to static and one-shot design of transaction groups.
Reference: [16] <author> C. Mohan, G. Alonso, R. Gunthor, and M. Ka-math. </author> <title> Exotica: </title> <journal> A research prespective on work-flow management systems. In IEEE Bulletin of the Technical Committee on Data Engineering, </journal> <pages> pages 19-26, </pages> <month> March </month> <year> 1995, </year> <note> Vol.18, No.1. </note>
Reference-contexts: Hence, issues such as correctness specification and ensurance criteria for concurrent execution of activities and dynamic restructuring of activities have been left open in most of the previous activity models. On the other hand, a number of extended transaction models (ETMs) and workflow systems <ref> [10, 11, 16, 17, 22, 20, 9] </ref> have been proposed to support diversified new application requirements. For example, Sagas [11] extend the traditional transaction model by including an automated compensation capability within sagas. <p> In this section, we outline some of the major issues faced by implementors and some potential solutions. A simple activity model contains elements similar to those found in a workflow system such as Exotica <ref> [16] </ref>, including reliable/recoverable queues and a state machine interpreter. However, full recovery of activities during execution is non-trivial and that is one of places where transaction software can help.
Reference: [17] <author> M. Nodine and S. Zdonik. </author> <title> Cooperative transaction hierarchies: a transaction model to support design applications. </title> <booktitle> In Proceedings of the 16th International Conference on Very Large Data Bases, </booktitle> <pages> pages 83-94, </pages> <year> 1990. </year>
Reference-contexts: Hence, issues such as correctness specification and ensurance criteria for concurrent execution of activities and dynamic restructuring of activities have been left open in most of the previous activity models. On the other hand, a number of extended transaction models (ETMs) and workflow systems <ref> [10, 11, 16, 17, 22, 20, 9] </ref> have been proposed to support diversified new application requirements. For example, Sagas [11] extend the traditional transaction model by including an automated compensation capability within sagas. <p> For example, Sagas [11] extend the traditional transaction model by including an automated compensation capability within sagas. Cooperative Transactions [2], Split Transactions [20] and Transaction Groups <ref> [17] </ref> were proposed for capturing the interactions among transactions required in advanced applications. Many of these ETMs were targeted at a particular domain of applications, offering adequate correctness only for this domain [6]. <p> Many of these ETMs were targeted at a particular domain of applications, offering adequate correctness only for this domain [6]. Other ETMs capture only a subset of the spectrum of interactions found in any complex information systems [15]. Cooperation among sibling transactions is supported by Cooperative Transactions <ref> [2, 20, 17] </ref>, although the interactions among siblings are either restricted to leaf node transactions in order to support serializable split-transactions or limited to static and one-shot design of transaction groups.
Reference: [18] <author> M. Ozsu, U. Dayal, and P. Valduriez, </author> <title> editors. Distributed Object Management, Edmonton, Canada, August 1992. </title> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: A valid activity history produces correct results and does not violate the con sistency of objects. Since SACT activities in TAM can be viewed as traditional transactions or nested transactions, and will be mapped to the local transactions <ref> [18, 19, 9] </ref>, each running on a remote server, the correctness criteria developed for conventional and extended transaction models [5, 6] can be applied.
Reference: [19] <author> C. Pu and S. Chen. </author> <title> Implementation of a prototype superdatabase. </title> <booktitle> In Proceedings of the Workshop on Experimental Distributed Systems, </booktitle> <address> Huntsville, Alabama, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: A valid activity history produces correct results and does not violate the con sistency of objects. Since SACT activities in TAM can be viewed as traditional transactions or nested transactions, and will be mapped to the local transactions <ref> [18, 19, 9] </ref>, each running on a remote server, the correctness criteria developed for conventional and extended transaction models [5, 6] can be applied.
Reference: [20] <author> C. Pu, G. Kaiser, and N. Hutchinson. </author> <title> Split-transactions for open-ended activities. </title> <booktitle> In Proceedings of the Fourteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 27-36, </pages> <address> Los Angeles, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Open-ended activities are characterized by long duration, flexible cooperation and dynamic development <ref> [20] </ref>. The need to support open-ended activities emerges from the increasing demands of advanced and complex applications, such as CAD/CAM, automated office workflows information systems, and software development environments. <p> In this paper, we develop a transactional activity model (TAM) for specification and management of open-ended cooperative activities. TAM is a refinement of the activity model proposed in [13] by adding transactional properties and by incorporating dynamic restructuring operations <ref> [20] </ref> into the activity execution. Our results in this paper are a significant advance over each one of the component technology we used. <p> We outline the implementation framework in Section 5 and conclude the presentation in Section 6. 2 Related Work The development of TAM can be seen as an extension of the activity model proposed in [13] by adding transactional properties and incorporating dynamic restructuring operations <ref> [20] </ref> into the activity execution. Our early proposal [13] focused more on the scheduling of message exchanges within an execution of simple (flat) activities. In TAM, transactional properties are introduced for the hierarchical organization of activities. <p> Hence, issues such as correctness specification and ensurance criteria for concurrent execution of activities and dynamic restructuring of activities have been left open in most of the previous activity models. On the other hand, a number of extended transaction models (ETMs) and workflow systems <ref> [10, 11, 16, 17, 22, 20, 9] </ref> have been proposed to support diversified new application requirements. For example, Sagas [11] extend the traditional transaction model by including an automated compensation capability within sagas. <p> For example, Sagas [11] extend the traditional transaction model by including an automated compensation capability within sagas. Cooperative Transactions [2], Split Transactions <ref> [20] </ref> and Transaction Groups [17] were proposed for capturing the interactions among transactions required in advanced applications. Many of these ETMs were targeted at a particular domain of applications, offering adequate correctness only for this domain [6]. <p> Many of these ETMs were targeted at a particular domain of applications, offering adequate correctness only for this domain [6]. Other ETMs capture only a subset of the spectrum of interactions found in any complex information systems [15]. Cooperation among sibling transactions is supported by Cooperative Transactions <ref> [2, 20, 17] </ref>, although the interactions among siblings are either restricted to leaf node transactions in order to support serializable split-transactions or limited to static and one-shot design of transaction groups. <p> Finally, we would like to mention that TAM development is a continuation and a careful combination of our earlier work on activity model [13] and split-transactions <ref> [20] </ref>, and inspired by the recent work in [21]. Comparing with the work in [21], TAM provides a number of distinct features.
Reference: [21] <author> M. Rusinkiewicz, W. Klas, T. Tesch, J. Wasch, and P.Muth. </author> <title> Towards a cooperative activity model the coopertive activity model. </title> <booktitle> In Proceedings of the 21st International Conference on Very Large Data Bases, </booktitle> <pages> pages 194-205, </pages> <year> 1995. </year>
Reference-contexts: The effects of an activity on the objects that it accesses are captured by means of access sets of activities and the concept of delegation <ref> [6, 21] </ref>. TAM also supports the behavioral refinement and behavioral composition of activity patterns to increase the extensibility and reusability of activity patterns. <p> Another feature supported by TAM is the promotion of enhanced intra-activity parallelism by allowing an activity to be modified dynamically through the invocation of system-supplied activity restructuring operations. In addition to our early proposal [13], other activity models have been proposed <ref> [8, 21] </ref> to support declarative specification of control flows within activities. Features of long running activities [8, 7] include an automatic compensation capability that offers some level of failure atomicity for the activity and the use of ECA-rules for monitoring activities. <p> Features of long running activities [8, 7] include an automatic compensation capability that offers some level of failure atomicity for the activity and the use of ECA-rules for monitoring activities. The cooperative model <ref> [21] </ref> achieves cooperation by controlled data exchange of the content of workspaces and controlled sharing of a common database among users. However, these models provide no or less sufficient high-level activity abstraction mechanisms for behavioral refinement and behavioral composition of activity patterns, including split and join of activities. <p> prefix of a valid activity history. 4.2 Correctness criteria of Merged Ac tivity Histories When two histories (H 1 , 1 ) and (H 2 , 2 ) belong to the same activity pattern ff and both activities have reached a breakpoint, we say that these two histories are mergable <ref> [21] </ref>. Definition 3 (a merged activity history) Let (H 1 , 1 ) and (H 2 , 2 ) be two correct histories (complete or incomplete) of pattern ff. <p> Finally, we would like to mention that TAM development is a continuation and a careful combination of our earlier work on activity model [13] and split-transactions [20], and inspired by the recent work in <ref> [21] </ref>. Comparing with the work in [21], TAM provides a number of distinct features. <p> Finally, we would like to mention that TAM development is a continuation and a careful combination of our earlier work on activity model [13] and split-transactions [20], and inspired by the recent work in <ref> [21] </ref>. Comparing with the work in [21], TAM provides a number of distinct features.
Reference: [22] <author> J. Wasch and A. Reuter. </author> <title> The contract model. </title> <booktitle> In Elmagarmid [10], </booktitle> <pages> pages 219-264, </pages> <note> Chapter 7, </note> <year> 1992. </year>
Reference-contexts: Hence, issues such as correctness specification and ensurance criteria for concurrent execution of activities and dynamic restructuring of activities have been left open in most of the previous activity models. On the other hand, a number of extended transaction models (ETMs) and workflow systems <ref> [10, 11, 16, 17, 22, 20, 9] </ref> have been proposed to support diversified new application requirements. For example, Sagas [11] extend the traditional transaction model by including an automated compensation capability within sagas.
Reference: [23] <author> T. Zhou, C. Pu, and L. Liu. </author> <title> Adaptable, efficient, and modular coordination of distributed extended transactions. </title> <booktitle> In Proceeding of the International Conference on Parallel and Distributed Databases, </booktitle> <year> 1996. </year>
Reference-contexts: Otherwise, the conflicting transaction are stopped. In TAM, the compatibility table for activities is derived by the system (see consult them when conflicts arise. We are currently working towards building a TAM adapter based on the micro-protocols developed by <ref> [4, 3, 23] </ref> on top of the Transarc Encina. Finally, we would like to mention that TAM development is a continuation and a careful combination of our earlier work on activity model [13] and split-transactions [20], and inspired by the recent work in [21].
References-found: 23

