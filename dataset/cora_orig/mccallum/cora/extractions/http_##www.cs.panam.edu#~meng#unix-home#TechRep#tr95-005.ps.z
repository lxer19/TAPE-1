URL: http://www.cs.panam.edu/~meng/unix-home/TechRep/tr95-005.ps.z
Refering-URL: http://www.cs.panam.edu/~meng/unix-home/TechRep/
Root-URL: http://www.cs.panam.edu
Title: Asynchronous Parallel Discrete Event Simulation  
Author: Yi-Bing Lin Paul A. Fishwick 
Address: Morristown, New Jersey  Gainesville, Florida  
Affiliation: Bell Communications Research  Department of Computer and Information Sciences University of Florida  
Abstract: Complex models may have model components distributed over a network and generally require significant execution times. The field of parallel and distributed simulation has grown over the past fifteen years to accommodate the need of simulation the complex models using a distributed versus sequential method. In particular, asynchronous parallel discrete event simulation (PDES) has been widely studied, and yet we envision greater acceptance of this methodology as more readers are exposed to PDES introductions that carefully integrate real-world applications. With this in mind, we present two key methodologies (conservative and optimistic) which have been adopted as solutions to PDES systems. We discuss PDES terminology and methodology under the umbrella of the personal communications services application. Keywords: [parallel algorithm, distributed simulation, synchronization, virtual time, network communications]. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Arvind, D., Bagrodia, R. and Lin, Y.-B., </author> <title> editor. </title> <booktitle> Proc. 8th Workshop on Parallel and Distributed Simulation. ACM, </booktitle> <year> 1994. </year>
Reference-contexts: The optimization techniques are general and apply to other simulation applications such as battlefield simulation, VLSI simulation, queueing network simulation and computer architecture simulation. However, these optimization techniques may need to be tailored for specific applications. Many studies have devoted to this issue (see <ref> [18, 41, 19, 1, 3] </ref> and references therein). The PCS example can be seen as being a member of a larger class of simulation model where one first discretizes the spatial domain into a grid, and then simulates moving entities from one grid cell to another.
Reference: [2] <author> Ayani, R. and Rajaei, H. </author> <title> Parallel simulation of a generalized cube multistage interconnection network. </title> <booktitle> Proc. 1990 SCS Multiconference on Distributed Simulation, </booktitle> <pages> pages 60-63, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: is classified as part of the synchronization mechanism. * An application mechanism represents a sub-model for a specific simulation application to be simulated by the LP (to be elaborated). 2.3 PDES Implementation Platforms PDES systems have been implemented in different parallel architectures such as BBN Butterfly [11, 25, 16], Sequent <ref> [2, 48, 44] </ref>, JPL Mark III [52], Simulated Stanford Dash Multiprocessor [47], Transputers [4, 50], CM-1/CM-5 [38], KSR [22], and iPSC/860 [21].
Reference: [3] <author> Bailey, M. and Lin, Y.-B., </author> <title> editor. </title> <booktitle> Proc. 9th Workshop on Parallel and Distributed Simulation. ACM, </booktitle> <year> 1995. </year>
Reference-contexts: The optimization techniques are general and apply to other simulation applications such as battlefield simulation, VLSI simulation, queueing network simulation and computer architecture simulation. However, these optimization techniques may need to be tailored for specific applications. Many studies have devoted to this issue (see <ref> [18, 41, 19, 1, 3] </ref> and references therein). The PCS example can be seen as being a member of a larger class of simulation model where one first discretizes the spatial domain into a grid, and then simulates moving entities from one grid cell to another.
Reference: [4] <author> Beazner, D., Lomow, G. and Unger, B. </author> <title> A parallel simulation environment based on Time Warp. </title> <note> To appear in International Journal in Computer Simulation, </note> <year> 1995. </year>
Reference-contexts: a sub-model for a specific simulation application to be simulated by the LP (to be elaborated). 2.3 PDES Implementation Platforms PDES systems have been implemented in different parallel architectures such as BBN Butterfly [11, 25, 16], Sequent [2, 48, 44], JPL Mark III [52], Simulated Stanford Dash Multiprocessor [47], Transputers <ref> [4, 50] </ref>, CM-1/CM-5 [38], KSR [22], and iPSC/860 [21].
Reference: [5] <author> Carothers, C., Fujimoto, R.M., Lin, Y.-B. and England, P. </author> <title> Distributed Simulation of PCS Networks Using Time Warp. </title> <booktitle> Proc. International Workshop on Modeling, Analysis and Simulation of Computer and Telecommunication Systems, </booktitle> <pages> pages 2-7, </pages> <year> 1994. </year>
Reference-contexts: in a sequential machine, or 2) one must model in a distributed fashion because of a constraint that a process (i.e., computation) must be distributed rather than localized to a single processor. 1 One author (Lin) has demonstrated various speedups possible on a distributed memory architecture for the PCS application <ref> [5, 6] </ref>. There is no question that PDES speeds up otherwise serial computations during a simulation. The second reason for PDES (distributed model constraint) is based on a situation where models for system components are stored in physically different locations. <p> PDES has also been implemented in workstations connected by a local area network <ref> [5] </ref> which is widely available in both the industrial and the academic environments. 3 Personal Communication Services We use personal communication service (PCS) network simulation to illustrate PDES functionality. A PCS network [9, 10] provides low-power and high-quality wireless access for PCS subscribers or portables. <p> Specifically, 5 * The size of the PCS network under study is usually large (e.g., thousands of cells). A typical sequential PCS simulation run takes over 20 hours, while the corresponding PCS PDES takes less than 3 hours using 8 processors <ref> [5] </ref>. * Another popular parallel approach, the parallel independent replicated simulation [23, 24, 33] (running multiple simulation replications concurrently) does not work for PCS simulation. <p> Note that the portable p 1 migrates to LP B when m 4 is sent. (In GIT/Bellcore's PCS implementation <ref> [5] </ref>, a message is part of a portable object, and sending a message automatically migrates the corresponding 13 (a) The PCS model. (b) The PCS PDES. portable object.) When LP B 's LVT advances to 16, it executes m 4 .
Reference: [6] <author> Carothers, C., Lin, Y.-B. and Fujimoto, </author> <title> R.M. A Re-dial Model for Personal Communications Services Network. </title> <note> To appear in 45th Vehicular Technology Conference, 1995. 34 </note>
Reference-contexts: in a sequential machine, or 2) one must model in a distributed fashion because of a constraint that a process (i.e., computation) must be distributed rather than localized to a single processor. 1 One author (Lin) has demonstrated various speedups possible on a distributed memory architecture for the PCS application <ref> [5, 6] </ref>. There is no question that PDES speeds up otherwise serial computations during a simulation. The second reason for PDES (distributed model constraint) is based on a situation where models for system components are stored in physically different locations.
Reference: [7] <author> Chandy, K.M. and Misra, J. </author> <title> Distributed Simulation: A Case Study in Design and Ver--ification of Distributed Programs. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> SE-5(5):440-452, </volume> <month> September </month> <year> 1979. </year>
Reference-contexts: Thus the simulation result is not correct. To solve this problem, the executions of the logical processes must be synchronized. The remainder of this paper describes two popular asynchronous synchronization mechanisms, the conservative and the optimistic methods. 14 4 Conservative Method The conservative simulation <ref> [7] </ref> is conservative in the sense that it does not execute an event before it ensures that the local causality rule is satisfied. The conservative simulation follows two rules: the input waiting rule and the output waiting rule. <p> Thus the PDES is in the deadlock situation. Two deadlock resolutions have been proposed: deadlock avoidance <ref> [7] </ref> and deadlock detection/recovery [8, 40]. It has been shown [15] that the cost of deadlock detection/recovery is much higher than deadlock avoidance. This article will focus on the deadlock avoidance mechanism.
Reference: [8] <author> Chandy, K.M. and Misra, J. </author> <title> Asynchronous Distributed Simulation via a Sequence of Parallel Computations. </title> <journal> Communications of the ACM, </journal> <volume> 24(11) </volume> <pages> 198-206, </pages> <month> April </month> <year> 1981. </year>
Reference-contexts: Thus the PDES is in the deadlock situation. Two deadlock resolutions have been proposed: deadlock avoidance [7] and deadlock detection/recovery <ref> [8, 40] </ref>. It has been shown [15] that the cost of deadlock detection/recovery is much higher than deadlock avoidance. This article will focus on the deadlock avoidance mechanism. In a PCS network, a portable is expected to reside in a cell for a period of time before it moves.
Reference: [9] <author> Cox, </author> <title> D.C. Personal communications A viewpoint. </title> <journal> IEEE Commun. Mag., </journal> <volume> 128(11) </volume> <pages> 8-20, </pages> <year> 1990. </year>
Reference-contexts: PDES has also been implemented in workstations connected by a local area network [5] which is widely available in both the industrial and the academic environments. 3 Personal Communication Services We use personal communication service (PCS) network simulation to illustrate PDES functionality. A PCS network <ref> [9, 10] </ref> provides low-power and high-quality wireless access for PCS subscribers or portables. The service area of a PCS network is populated with a number of radio ports. Every radio port covers a sub-area or cell.
Reference: [10] <author> Cox, </author> <title> D.C. A radio system proposal for widespread low-power tetherless communications. </title> <journal> IEEE Trans. Commun., </journal> <volume> 39(2) </volume> <pages> 324-335, </pages> <month> February </month> <year> 1991. </year>
Reference-contexts: PDES has also been implemented in workstations connected by a local area network [5] which is widely available in both the industrial and the academic environments. 3 Personal Communication Services We use personal communication service (PCS) network simulation to illustrate PDES functionality. A PCS network <ref> [9, 10] </ref> provides low-power and high-quality wireless access for PCS subscribers or portables. The service area of a PCS network is populated with a number of radio ports. Every radio port covers a sub-area or cell.
Reference: [11] <author> Ebling, M., Di Loreto, M., Presley, M., Wieland, F. and Jefferson, D. </author> <title> An Ant Foraging Model Implemented on the Time Warp Operating System. </title> <booktitle> Proc. 1991 SCS Multicon-ference on Distributed Simulation, </booktitle> <pages> pages 21-26, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: Thus the method is classified as part of the synchronization mechanism. * An application mechanism represents a sub-model for a specific simulation application to be simulated by the LP (to be elaborated). 2.3 PDES Implementation Platforms PDES systems have been implemented in different parallel architectures such as BBN Butterfly <ref> [11, 25, 16] </ref>, Sequent [2, 48, 44], JPL Mark III [52], Simulated Stanford Dash Multiprocessor [47], Transputers [4, 50], CM-1/CM-5 [38], KSR [22], and iPSC/860 [21].
Reference: [12] <author> Fishwick, </author> <title> P.A. A simulation environment for multimodeling. Discrete Event Dynamic Systems: </title> <journal> Theory and Applications, </journal> <volume> 3 </volume> <pages> 151-171, </pages> <year> 1993. </year>
Reference-contexts: The last model type (multimodel) permits the integration of basic model types to create a model composed of component models <ref> [14, 12] </ref> where each component model represents a level of abstraction for the system.
Reference: [13] <author> Fishwick, </author> <title> P.A. Simulation Model Design and Execution: Building Digital Worlds. </title> <publisher> Pren-tice Hall, </publisher> <year> 1995. </year>
Reference-contexts: These terms will be revisited in Section 3 when we assign the terms to the PCS application. The study of any physical system to be simulated begins with the creation of a model. Such a model can be in one of several types <ref> [13] </ref>: 1) conceptual, 2) declarative, 3) functional, 4) constraint, 5) spatial or 6) multimodel. One begins with a conceptual model which describes qualitative terms and class hierarchies for the system. <p> Such an environment should provides convenient tools to develop simulation application. Methods should also be provided to tailor general optimization techniques to fit a specific simulation application. We anticipate that these user-friendly environments can be constructed by the object-oriented models described in <ref> [13] </ref>.
Reference: [14] <author> Fishwick, P.A. and Zeigler, B. P. </author> <title> A Multimodel Methodology for Qualitative Model Engineering. </title> <journal> ACM Transactions on Modeling and Computer Simulation, </journal> <volume> 2(1) </volume> <pages> 52-81, </pages> <year> 1992. </year>
Reference-contexts: The last model type (multimodel) permits the integration of basic model types to create a model composed of component models <ref> [14, 12] </ref> where each component model represents a level of abstraction for the system.
Reference: [15] <author> Fujimoto, </author> <title> R.M. Performance Measurements of Distributed Simulation Strategies. </title> <booktitle> Proc. 1988 SCS Multiconference on Distributed Simulation, </booktitle> <pages> pages 14-20, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: Thus the PDES is in the deadlock situation. Two deadlock resolutions have been proposed: deadlock avoidance [7] and deadlock detection/recovery [8, 40]. It has been shown <ref> [15] </ref> that the cost of deadlock detection/recovery is much higher than deadlock avoidance. This article will focus on the deadlock avoidance mechanism. In a PCS network, a portable is expected to reside in a cell for a period of time before it moves. <p> Experimental studies have indicated that the larger the lookahead values, the better the performance of the conservative simulation <ref> [15] </ref>. Based on the techniques proposed in [34, 42, 51], we give three PCS examples for lookahead exploration. The first two examples assume single cell entrance and exit. The single entrance/exit PCS model has been used in modeling highway cellular phone systems [28].
Reference: [16] <author> Fujimoto, </author> <title> R.M. Time Warp on a Shared Memory Multiprocessor. </title> <booktitle> Proc. 1989 International Conference on Parallel Processing, Volume III:242-249, </booktitle> <month> August </month> <year> 1989. </year>
Reference-contexts: Thus the method is classified as part of the synchronization mechanism. * An application mechanism represents a sub-model for a specific simulation application to be simulated by the LP (to be elaborated). 2.3 PDES Implementation Platforms PDES systems have been implemented in different parallel architectures such as BBN Butterfly <ref> [11, 25, 16] </ref>, Sequent [2, 48, 44], JPL Mark III [52], Simulated Stanford Dash Multiprocessor [47], Transputers [4, 50], CM-1/CM-5 [38], KSR [22], and iPSC/860 [21].
Reference: [17] <author> Fujimoto, </author> <title> R.M. Optimistic Approaches to Parallel Discrete Event Simulation. </title> <journal> Transactions of the Society for Computer Simulation, </journal> <volume> 7(2) </volume> <pages> 153-191, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: To support rollback, data structures such as the state queue and the output queue are required (to be elaborated). Several strategies for cancelling incorrect computation were surveyed by Fujimoto <ref> [17] </ref>. Two popular cancellation strategies called aggressive cancellation [26] and lazy cancellation [20] are described in this section. 5.1 Cancellation Strategies Consider the example in Figure 10. For simplicity, assume that cell C has one radio channel (i.e., LP C .channelNo=1 in PDES).
Reference: [18] <author> Fujimoto, </author> <title> R.M. Parallel Discrete Event Simulation. </title> <journal> Communications of the ACM, </journal> <volume> 33(10) </volume> <pages> 31-53, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Our purpose is to introduce the basic technical concepts of distributed simulation of event-based models (so called discrete event models), and to tie these generic concepts to a specific application: personal communications services (PCS). Several introductory articles have been presented in the literature such as Fujimoto <ref> [18] </ref>, Nicol et al. [41] and Richter et al. [45]. These papers have helped to disseminate PDES methodology for a wide readership. Our approach is similar but stresses a single real world application for discussing the methodology of asynchronous parallel discrete event simulation (PDES). <p> This is called jump forward or lazy reevaluation <ref> [18] </ref>. In this case, LP C .ReceiveMessage () simply inserts m 5 in the input queue, and the pointer of the input queue points to m 5 . <p> The optimization techniques are general and apply to other simulation applications such as battlefield simulation, VLSI simulation, queueing network simulation and computer architecture simulation. However, these optimization techniques may need to be tailored for specific applications. Many studies have devoted to this issue (see <ref> [18, 41, 19, 1, 3] </ref> and references therein). The PCS example can be seen as being a member of a larger class of simulation model where one first discretizes the spatial domain into a grid, and then simulates moving entities from one grid cell to another.
Reference: [19] <author> Fujimoto, </author> <title> R.M. Parallel discrete event simulation: </title> <journal> Will the field survive? ORSA Journal on Computing, </journal> <volume> 5(3), </volume> <year> 1993. </year>
Reference-contexts: The optimization techniques are general and apply to other simulation applications such as battlefield simulation, VLSI simulation, queueing network simulation and computer architecture simulation. However, these optimization techniques may need to be tailored for specific applications. Many studies have devoted to this issue (see <ref> [18, 41, 19, 1, 3] </ref> and references therein). The PCS example can be seen as being a member of a larger class of simulation model where one first discretizes the spatial domain into a grid, and then simulates moving entities from one grid cell to another.
Reference: [20] <author> Gafni, A. </author> <title> Rollback Mechanisms for Optimistic Distributed Simulation. </title> <booktitle> Proc. 1988 SCS Multiconference on Distributed Simulation, </booktitle> <pages> pages 61-67, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: To support rollback, data structures such as the state queue and the output queue are required (to be elaborated). Several strategies for cancelling incorrect computation were surveyed by Fujimoto [17]. Two popular cancellation strategies called aggressive cancellation [26] and lazy cancellation <ref> [20] </ref> are described in this section. 5.1 Cancellation Strategies Consider the example in Figure 10. For simplicity, assume that cell C has one radio channel (i.e., LP C .channelNo=1 in PDES).
Reference: [21] <author> Gaujal, G., Greenberg, A.G. and Nicol, </author> <title> D.M. A sweep algorithm for massively parallel simulation of circuit-switched networks. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 18(4) </volume> <pages> 484-500, </pages> <year> 1993. </year>
Reference-contexts: be simulated by the LP (to be elaborated). 2.3 PDES Implementation Platforms PDES systems have been implemented in different parallel architectures such as BBN Butterfly [11, 25, 16], Sequent [2, 48, 44], JPL Mark III [52], Simulated Stanford Dash Multiprocessor [47], Transputers [4, 50], CM-1/CM-5 [38], KSR [22], and iPSC/860 <ref> [21] </ref>. PDES has also been implemented in workstations connected by a local area network [5] which is widely available in both the industrial and the academic environments. 3 Personal Communication Services We use personal communication service (PCS) network simulation to illustrate PDES functionality.
Reference: [22] <author> Ghosh, K., Panesar, K., Fujimoto, R.M. and Schwan, K. </author> <title> PORTS: A parallel, optimistic, real-time simulator. </title> <booktitle> Proc. 8th Workshop on Parallel and Distributed Simulation, </booktitle> <year> 1994. </year>
Reference-contexts: simulation application to be simulated by the LP (to be elaborated). 2.3 PDES Implementation Platforms PDES systems have been implemented in different parallel architectures such as BBN Butterfly [11, 25, 16], Sequent [2, 48, 44], JPL Mark III [52], Simulated Stanford Dash Multiprocessor [47], Transputers [4, 50], CM-1/CM-5 [38], KSR <ref> [22] </ref>, and iPSC/860 [21]. PDES has also been implemented in workstations connected by a local area network [5] which is widely available in both the industrial and the academic environments. 3 Personal Communication Services We use personal communication service (PCS) network simulation to illustrate PDES functionality.
Reference: [23] <author> Glynn, P.W. and Heidelberger, P. </author> <title> Analysis of Initial Transient Deletion for Parallel Steady-State Simulation. </title> <journal> SIAM Journal on Scientific and Statistical Computing, </journal> <volume> 13(4) </volume> <pages> 904-922, </pages> <year> 1992. </year>
Reference-contexts: A typical sequential PCS simulation run takes over 20 hours, while the corresponding PCS PDES takes less than 3 hours using 8 processors [5]. * Another popular parallel approach, the parallel independent replicated simulation <ref> [23, 24, 33] </ref> (running multiple simulation replications concurrently) does not work for PCS simulation. In most cases, the PCS designer only is interested in the behavior of the PCS network at the engineered workload (e.g., the workload at which the blocking probability is 1%).
Reference: [24] <author> Heidelberger, P. </author> <title> Discrete Event Simulations and Parallel Processing: Statistical Properties. </title> <journal> SIAM Journal on Scientific and Statistical Computing, </journal> <volume> 9(6) </volume> <pages> 1114-1132, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: A typical sequential PCS simulation run takes over 20 hours, while the corresponding PCS PDES takes less than 3 hours using 8 processors [5]. * Another popular parallel approach, the parallel independent replicated simulation <ref> [23, 24, 33] </ref> (running multiple simulation replications concurrently) does not work for PCS simulation. In most cases, the PCS designer only is interested in the behavior of the PCS network at the engineered workload (e.g., the workload at which the blocking probability is 1%).
Reference: [25] <author> Hontalas, P., Beckman, B., Diloreto, M., Blume, L., Reiher, P., Sturdevant, K., Warren, L., Wedel, J., Wieland, F. and Jefferson, D. </author> <title> Performance of the Colliding Pucks Simulation on the Time Warp Operating Systems (Part 1: Asynchronous Behavior & Sectoring). </title> <booktitle> Proc. 1989 SCS Multiconference on Distributed Simulation, </booktitle> <pages> pages 3-7, </pages> <month> March </month> <year> 1989. </year>
Reference-contexts: Thus the method is classified as part of the synchronization mechanism. * An application mechanism represents a sub-model for a specific simulation application to be simulated by the LP (to be elaborated). 2.3 PDES Implementation Platforms PDES systems have been implemented in different parallel architectures such as BBN Butterfly <ref> [11, 25, 16] </ref>, Sequent [2, 48, 44], JPL Mark III [52], Simulated Stanford Dash Multiprocessor [47], Transputers [4, 50], CM-1/CM-5 [38], KSR [22], and iPSC/860 [21].
Reference: [26] <author> Jefferson, D. </author> <title> Virtual Time. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 7(3) </volume> <pages> 404-425, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: The ComputeLookahead () method may implement the lookahead exploiting techniques described above. Then the new null message is sent to some or all output channels by invoking the SendMessage () method. 5 Optimistic Method The optimistic simulation simulation <ref> [26] </ref> is optimistic in the sense that it handles the arrival events aggressively. When a message m arrives at an LP, LP .ReceiveMessage () simply inserts m in the input queue (the optimistic simulation terminology for the FEL). <p> To support rollback, data structures such as the state queue and the output queue are required (to be elaborated). Several strategies for cancelling incorrect computation were surveyed by Fujimoto [17]. Two popular cancellation strategies called aggressive cancellation <ref> [26] </ref> and lazy cancellation [20] are described in this section. 5.1 Cancellation Strategies Consider the example in Figure 10. For simplicity, assume that cell C has one radio channel (i.e., LP C .channelNo=1 in PDES). <p> The anti-message m 2 of m 2 is saved in LP C 's output queue. The message m 2 is identical to m 2 except that it includes a destination field (in the original optimistic or Time Warp algorithm <ref> [26] </ref>, the sender and the destination are recorded in both the output message and the corresponding anti-message for flow control). <p> at (execution) time t is the minimum of the timestamps of the not-yet executed messages (these messages are either in the input queue or are in transit) in the optimistic simulation at time t. (Several other operational definition of GVT are given in [27, 32].) It has been pointed out <ref> [26] </ref> that at any given time t, a logical process cannot be rolled back to a timestamp earlier than the GVT at t. Therefore the storage for all messages with timestamps smaller than the GVT value can be reclaimed for other usage.
Reference: [27] <author> Jefferson, D. </author> <title> Virtual Time II: The Cancelback Protocol for Storage Management in Time Warp. </title> <booktitle> Proc. 9th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 75-90, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: The GVT at (execution) time t is the minimum of the timestamps of the not-yet executed messages (these messages are either in the input queue or are in transit) in the optimistic simulation at time t. (Several other operational definition of GVT are given in <ref> [27, 32] </ref>.) It has been pointed out [26] that at any given time t, a logical process cannot be rolled back to a timestamp earlier than the GVT at t. Therefore the storage for all messages with timestamps smaller than the GVT value can be reclaimed for other usage.
Reference: [28] <author> Kuek, S.S. and Wong, W.C. </author> <title> Ordered Dynamic Channel Assignment Scheme with Reassignment in Highway Microcells. </title> <journal> IEEE Trans. Veh. Technol., </journal> <volume> 41(3) </volume> <pages> 271-277, </pages> <year> 1992. </year>
Reference-contexts: Based on the techniques proposed in [34, 42, 51], we give three PCS examples for lookahead exploration. The first two examples assume single cell entrance and exit. The single entrance/exit PCS model has been used in modeling highway cellular phone systems <ref> [28] </ref>. The results can be easily generalized for multiple entrances and exits. The techniques introduced can be combined to exploit greater lookahead. 1.
Reference: [29] <author> Averill M. Law and David W. </author> <title> Kelton. Simulation Modeling & Analysis. </title> <publisher> McGraw Hill, </publisher> <year> 1991. </year> <note> Second edition. </note>
Reference-contexts: The next four model types reflect an orientation to system construction; a system may be constructed as a Petri net [43], queuing model <ref> [29] </ref> or as a cellular automaton [49] for instance. The last model type (multimodel) permits the integration of basic model types to create a model composed of component models [14, 12] where each component model represents a level of abstraction for the system.
Reference: [30] <author> Lin, Y.-B. </author> <title> Determining the Global Progress of Parallel Simulation. </title> <journal> Information Processing Letters, </journal> <volume> 50, </volume> <year> 1994. </year>
Reference-contexts: The process of reclaiming the storage for the obsolete elements is called fossil collection. The GVT computation is not trivial in a distributed system because it may be difficult to capture the messages in transit. Several GVT algorithms have been developed in the systems with the FIFO communication property <ref> [30] </ref> or without the FIFO communication property [46, 39]. In GIT/Bellcore PCS PDES (where eight workstations are connected by a local area network), all logical processes are frozen during GVT computation.
Reference: [31] <author> Lin, Y.-B. </author> <title> Determining the user locations for personal communications networks. </title> <journal> IEEE Trans. Veh. Technol., </journal> <volume> 43(3) </volume> <pages> 466-473, </pages> <year> 1994. </year>
Reference-contexts: Every port is allocated some number of channels. A portable resides at a cell for a period of time which is a random variable with some distribution (e.g., exponential <ref> [54, 53, 31] </ref>). Then the portable moves to a neighbor cell based on some routing function (e.g., equal routing probabilities for all neighbors). The call arrivals to a portable is a random process (e.g., Poisson), and is independent of the portable's movement.
Reference: [32] <author> Lin, Y.-B. </author> <title> Memory Management Algorithms for Parallel Simulation. </title> <journal> Information Sciences, </journal> <volume> 77(1) </volume> <pages> 119-140, </pages> <year> 1994. </year>
Reference-contexts: The GVT at (execution) time t is the minimum of the timestamps of the not-yet executed messages (these messages are either in the input queue or are in transit) in the optimistic simulation at time t. (Several other operational definition of GVT are given in <ref> [27, 32] </ref>.) It has been pointed out [26] that at any given time t, a logical process cannot be rolled back to a timestamp earlier than the GVT at t. Therefore the storage for all messages with timestamps smaller than the GVT value can be reclaimed for other usage.
Reference: [33] <author> Lin, Y.-B. </author> <title> Parallel Independent Replicated Simulation on A Network of Workstations. </title> <note> To appear in SIMULATION, </note> <year> 1995. </year>
Reference-contexts: A typical sequential PCS simulation run takes over 20 hours, while the corresponding PCS PDES takes less than 3 hours using 8 processors [5]. * Another popular parallel approach, the parallel independent replicated simulation <ref> [23, 24, 33] </ref> (running multiple simulation replications concurrently) does not work for PCS simulation. In most cases, the PCS designer only is interested in the behavior of the PCS network at the engineered workload (e.g., the workload at which the blocking probability is 1%).
Reference: [34] <author> Lin, Y.-B. and Lazowska, E.D. </author> <title> Exploiting Lookahead in Parallel Simulation. </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> 1(4) </volume> <pages> 457-469, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Experimental studies have indicated that the larger the lookahead values, the better the performance of the conservative simulation [15]. Based on the techniques proposed in <ref> [34, 42, 51] </ref>, we give three PCS examples for lookahead exploration. The first two examples assume single cell entrance and exit. The single entrance/exit PCS model has been used in modeling highway cellular phone systems [28]. The results can be easily generalized for multiple entrances and exits. <p> To compute the next lookahead value for an LP, it suffices to sample the next N portable residual times, and (1) is re-written as [51] = min t i The last two examples may require a large number of operations to generate a lookahead value. In <ref> [34] </ref>, O (1) algorithms have been proposed to generate the lookahead values. When the ExecuteMessage () method processes a null message in an LP, it invokes a method ComputeLookahead () to compute the timestamp of the output (null) messages.
Reference: [35] <author> Lin, Y.-B., Mohan, S. and Noerpel, A. </author> <title> Channel Assignment Strategies for Hand-off and Initial Access fora PCS Network. </title> <journal> IEEE Personal Communications Magazine, </journal> <volume> 1(3) </volume> <pages> 47-56, </pages> <year> 1994. </year>
Reference-contexts: When a portable moves from one cell to another while a call is in progress, the call requires a new channel (in the new cell) to continue. This procedure of changing channels is called handoff or automatic link transfer (ALT). Several handoff schemes have been proposed in the literature <ref> [35, 36, 37] </ref>. In this paper, we consider the simplest scheme called non-prioritized scheme. In this scheme, if no channel is available in the new cell, then the call will be dropped or forced terminated immediately.
Reference: [36] <author> Lin, Y.-B., Mohan, S. and Noerpel, A. </author> <title> Queueing Priority Channel Assignment Strate--gies for Handoff and Initial Access for a PCS Network. </title> <journal> IEEE Trans. Veh. Technol., </journal> <volume> 43(3) </volume> <pages> 704-712, </pages> <year> 1994. </year>
Reference-contexts: When a portable moves from one cell to another while a call is in progress, the call requires a new channel (in the new cell) to continue. This procedure of changing channels is called handoff or automatic link transfer (ALT). Several handoff schemes have been proposed in the literature <ref> [35, 36, 37] </ref>. In this paper, we consider the simplest scheme called non-prioritized scheme. In this scheme, if no channel is available in the new cell, then the call will be dropped or forced terminated immediately.
Reference: [37] <author> Lin, Y.-B., Noerpel, A. and Harasty, D. </author> <title> Sub-rating Channel Assignment Strategy for Hand-offs. </title> <booktitle> Proc. IEEE ICUPC, </booktitle> <year> 1994. </year>
Reference-contexts: When a portable moves from one cell to another while a call is in progress, the call requires a new channel (in the new cell) to continue. This procedure of changing channels is called handoff or automatic link transfer (ALT). Several handoff schemes have been proposed in the literature <ref> [35, 36, 37] </ref>. In this paper, we consider the simplest scheme called non-prioritized scheme. In this scheme, if no channel is available in the new cell, then the call will be dropped or forced terminated immediately.
Reference: [38] <author> Lubachevsky, B. </author> <title> Efficient Distributed Event-Driven Simulations of Multiple-Loop Networks. </title> <journal> Communications of the ACM, </journal> <volume> 21(2), </volume> <month> March </month> <year> 1989. </year>
Reference-contexts: a specific simulation application to be simulated by the LP (to be elaborated). 2.3 PDES Implementation Platforms PDES systems have been implemented in different parallel architectures such as BBN Butterfly [11, 25, 16], Sequent [2, 48, 44], JPL Mark III [52], Simulated Stanford Dash Multiprocessor [47], Transputers [4, 50], CM-1/CM-5 <ref> [38] </ref>, KSR [22], and iPSC/860 [21]. PDES has also been implemented in workstations connected by a local area network [5] which is widely available in both the industrial and the academic environments. 3 Personal Communication Services We use personal communication service (PCS) network simulation to illustrate PDES functionality.
Reference: [39] <author> Mattern, F. </author> <title> Efficient Distributed Snapshots and Global Virtual Time Algorithms for Non-FIFO Systems. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 18(4):423 - 434, </volume> <year> 1993. </year>
Reference-contexts: The GVT computation is not trivial in a distributed system because it may be difficult to capture the messages in transit. Several GVT algorithms have been developed in the systems with the FIFO communication property [30] or without the FIFO communication property <ref> [46, 39] </ref>. In GIT/Bellcore PCS PDES (where eight workstations are connected by a local area network), all logical processes are frozen during GVT computation. By utilizing the low level communication mechanism, all transient messages are guaranteed to arrive at their destinations before the GVT computation starts.
Reference: [40] <author> Misra, J. </author> <title> Distributed Discrete-Event Simulation. </title> <journal> Computing Surveys, </journal> <volume> 18(1) </volume> <pages> 39-65, </pages> <month> March </month> <year> 1986. </year>
Reference-contexts: Thus the PDES is in the deadlock situation. Two deadlock resolutions have been proposed: deadlock avoidance [7] and deadlock detection/recovery <ref> [8, 40] </ref>. It has been shown [15] that the cost of deadlock detection/recovery is much higher than deadlock avoidance. This article will focus on the deadlock avoidance mechanism. In a PCS network, a portable is expected to reside in a cell for a period of time before it moves.
Reference: [41] <author> D. M. Nicol and R. M. Fujimoto. </author> <title> Parallel simulation today. </title> <journal> Annals of Operations Research, </journal> <volume> 53 </volume> <pages> 249-286, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: Several introductory articles have been presented in the literature such as Fujimoto [18], Nicol et al. <ref> [41] </ref> and Richter et al. [45]. These papers have helped to disseminate PDES methodology for a wide readership. Our approach is similar but stresses a single real world application for discussing the methodology of asynchronous parallel discrete event simulation (PDES). <p> The optimization techniques are general and apply to other simulation applications such as battlefield simulation, VLSI simulation, queueing network simulation and computer architecture simulation. However, these optimization techniques may need to be tailored for specific applications. Many studies have devoted to this issue (see <ref> [18, 41, 19, 1, 3] </ref> and references therein). The PCS example can be seen as being a member of a larger class of simulation model where one first discretizes the spatial domain into a grid, and then simulates moving entities from one grid cell to another.
Reference: [42] <author> Nicol, </author> <title> D.M. Parallel Discrete-Event Simulation of FCFS Stochastic Queueing Networks. </title> <booktitle> Proc. ACM SIGPLAN Symposium on Parallel Programming: Experience with Applications, Languages and Systems, </booktitle> <pages> pages 124-137, </pages> <year> 1988. </year>
Reference-contexts: Experimental studies have indicated that the larger the lookahead values, the better the performance of the conservative simulation [15]. Based on the techniques proposed in <ref> [34, 42, 51] </ref>, we give three PCS examples for lookahead exploration. The first two examples assume single cell entrance and exit. The single entrance/exit PCS model has been used in modeling highway cellular phone systems [28]. The results can be easily generalized for multiple entrances and exits. <p> Lookahead Method 1 (FIFO): In a large scale PCS network, a cell may only cover a street, and the portables leave the cell in the order they move in (the FIFO property; see for the LP can be derived by a presampling technique proposed by Nicol <ref> [42] </ref>. The idea is to presample the residual times of the arrival portables. If the FEL is not empty, then the next departure time can be easily computed.
Reference: [43] <author> Peterson, J.L. </author> <title> Petri Net Theory and the Modeling of Systems. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1981. </year>
Reference-contexts: In many ways, the conceptual model "organizes" the definition of attributes, methods and general characteristics of each system component without going so far as to ascribe dynamics to components. The next four model types reflect an orientation to system construction; a system may be constructed as a Petri net <ref> [43] </ref>, queuing model [29] or as a cellular automaton [49] for instance. The last model type (multimodel) permits the integration of basic model types to create a model composed of component models [14, 12] where each component model represents a level of abstraction for the system.
Reference: [44] <author> Reed, D.A. and Malony, A. </author> <title> Parallel Discrete Event Simulation: The Chandy-Misra Approach. </title> <booktitle> Proc. 1988 SCS Multiconference on Distributed Simulation, </booktitle> <pages> pages 8-13, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: is classified as part of the synchronization mechanism. * An application mechanism represents a sub-model for a specific simulation application to be simulated by the LP (to be elaborated). 2.3 PDES Implementation Platforms PDES systems have been implemented in different parallel architectures such as BBN Butterfly [11, 25, 16], Sequent <ref> [2, 48, 44] </ref>, JPL Mark III [52], Simulated Stanford Dash Multiprocessor [47], Transputers [4, 50], CM-1/CM-5 [38], KSR [22], and iPSC/860 [21].
Reference: [45] <author> Richter, R. and Walrand, </author> <title> J.C. Distributes Simulation of Discrete Event Systems. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 77(1) </volume> <pages> 99-113, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: Several introductory articles have been presented in the literature such as Fujimoto [18], Nicol et al. [41] and Richter et al. <ref> [45] </ref>. These papers have helped to disseminate PDES methodology for a wide readership. Our approach is similar but stresses a single real world application for discussing the methodology of asynchronous parallel discrete event simulation (PDES).
Reference: [46] <author> Samadi, B. </author> <title> Distributed Simulation, Algorithms and Performance Analysis. </title> <type> PhD thesis, </type> <institution> Computer Science Department, University of California, </institution> <address> Los Angeles, </address> <year> 1985. </year>
Reference-contexts: The GVT computation is not trivial in a distributed system because it may be difficult to capture the messages in transit. Several GVT algorithms have been developed in the systems with the FIFO communication property [30] or without the FIFO communication property <ref> [46, 39] </ref>. In GIT/Bellcore PCS PDES (where eight workstations are connected by a local area network), all logical processes are frozen during GVT computation. By utilizing the low level communication mechanism, all transient messages are guaranteed to arrive at their destinations before the GVT computation starts.
Reference: [47] <author> Soule, L. and Gupta, A. </author> <title> An Evaluation of the Chandy-Misra-Bryant Algorithm for Digital Logic Simulation. </title> <journal> ACM Transactions on Modeling and Computer Simulation, </journal> <volume> 1(4) </volume> <pages> 308-347, </pages> <year> 1991. </year>
Reference-contexts: mechanism represents a sub-model for a specific simulation application to be simulated by the LP (to be elaborated). 2.3 PDES Implementation Platforms PDES systems have been implemented in different parallel architectures such as BBN Butterfly [11, 25, 16], Sequent [2, 48, 44], JPL Mark III [52], Simulated Stanford Dash Multiprocessor <ref> [47] </ref>, Transputers [4, 50], CM-1/CM-5 [38], KSR [22], and iPSC/860 [21].
Reference: [48] <author> Thomas, G.S. and Zahorjan, J. </author> <title> Parallel simulation of performance Petri Net: Extending the domain of parallel simulation. </title> <booktitle> Proc. 1991 Winter Simulation Conference, </booktitle> <pages> pages 564-573, </pages> <year> 1991. </year>
Reference-contexts: is classified as part of the synchronization mechanism. * An application mechanism represents a sub-model for a specific simulation application to be simulated by the LP (to be elaborated). 2.3 PDES Implementation Platforms PDES systems have been implemented in different parallel architectures such as BBN Butterfly [11, 25, 16], Sequent <ref> [2, 48, 44] </ref>, JPL Mark III [52], Simulated Stanford Dash Multiprocessor [47], Transputers [4, 50], CM-1/CM-5 [38], KSR [22], and iPSC/860 [21].
Reference: [49] <author> Toffoli, T. and Margolus, N. </author> <title> Cellular Automata Machines: A New Environment for Modeling. </title> <publisher> MIT Press, </publisher> <address> 2 edition, </address> <year> 1987. </year> <month> 37 </month>
Reference-contexts: The next four model types reflect an orientation to system construction; a system may be constructed as a Petri net [43], queuing model [29] or as a cellular automaton <ref> [49] </ref> for instance. The last model type (multimodel) permits the integration of basic model types to create a model composed of component models [14, 12] where each component model represents a level of abstraction for the system.
Reference: [50] <author> Turner, S. and Xu, M. </author> <title> Performance evaluation of the bounded Time Warp algorithm. </title> <booktitle> The 6th Workshop on Parallel and Distributed Simulation, </booktitle> <year> 1992. </year>
Reference-contexts: a sub-model for a specific simulation application to be simulated by the LP (to be elaborated). 2.3 PDES Implementation Platforms PDES systems have been implemented in different parallel architectures such as BBN Butterfly [11, 25, 16], Sequent [2, 48, 44], JPL Mark III [52], Simulated Stanford Dash Multiprocessor [47], Transputers <ref> [4, 50] </ref>, CM-1/CM-5 [38], KSR [22], and iPSC/860 [21].
Reference: [51] <author> Wagner, D.B. and Lazowska, E.D. </author> <title> Parallel Simulation of Queueing Networks: Limitations and Potentials. </title> <booktitle> Proc. 1989 ACM SIGMETRICS and Performance '89 Conference, </booktitle> <pages> pages 146-155, </pages> <year> 1989. </year>
Reference-contexts: Experimental studies have indicated that the larger the lookahead values, the better the performance of the conservative simulation [15]. Based on the techniques proposed in <ref> [34, 42, 51] </ref>, we give three PCS examples for lookahead exploration. The first two examples assume single cell entrance and exit. The single entrance/exit PCS model has been used in modeling highway cellular phone systems [28]. The results can be easily generalized for multiple entrances and exits. <p> In a PCS simulation, the total number N = S fi n of portables is an input parameter. To compute the next lookahead value for an LP, it suffices to sample the next N portable residual times, and (1) is re-written as <ref> [51] </ref> = min t i The last two examples may require a large number of operations to generate a lookahead value. In [34], O (1) algorithms have been proposed to generate the lookahead values.
Reference: [52] <author> Wieland, F., Hawley, L., Feinberg, A., Di Loreto, M., Blume, L., Reiher, P., Beckman, B., Hontalas, P., Bellenot, S. and Jefferson, D. </author> <title> Distributed Combat Simulation and Time Warp: The Model and Its Performance. </title> <booktitle> Proc. 1989 SCS Multiconference on Distributed Simulation, </booktitle> <pages> pages 14-20, </pages> <month> March </month> <year> 1989. </year>
Reference-contexts: synchronization mechanism. * An application mechanism represents a sub-model for a specific simulation application to be simulated by the LP (to be elaborated). 2.3 PDES Implementation Platforms PDES systems have been implemented in different parallel architectures such as BBN Butterfly [11, 25, 16], Sequent [2, 48, 44], JPL Mark III <ref> [52] </ref>, Simulated Stanford Dash Multiprocessor [47], Transputers [4, 50], CM-1/CM-5 [38], KSR [22], and iPSC/860 [21].
Reference: [53] <author> Wong, W.C. </author> <title> Dynamic allocation of packet reservation multiple access carriers. </title> <journal> IEEE Trans. Veh. Technol., </journal> <volume> 42(4), </volume> <year> 1993. </year>
Reference-contexts: Every port is allocated some number of channels. A portable resides at a cell for a period of time which is a random variable with some distribution (e.g., exponential <ref> [54, 53, 31] </ref>). Then the portable moves to a neighbor cell based on some routing function (e.g., equal routing probabilities for all neighbors). The call arrivals to a portable is a random process (e.g., Poisson), and is independent of the portable's movement.
Reference: [54] <author> Wong, W.C. </author> <title> Packet reservation multiple access in a metropolitan microcellular radio environment. </title> <journal> IEEE J. Select. Areas Commun., </journal> <volume> 11(6) </volume> <pages> 918-925, </pages> <year> 1993. </year> <month> 38 </month>
Reference-contexts: Every port is allocated some number of channels. A portable resides at a cell for a period of time which is a random variable with some distribution (e.g., exponential <ref> [54, 53, 31] </ref>). Then the portable moves to a neighbor cell based on some routing function (e.g., equal routing probabilities for all neighbors). The call arrivals to a portable is a random process (e.g., Poisson), and is independent of the portable's movement.
References-found: 54

