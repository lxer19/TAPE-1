URL: ftp://ftp.cs.brown.edu/pub/techreports/95/cs95-26.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-95-26.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> N. Chiba, K. Onoguchi, and T. Nishizeki. </author> <title> Drawing planar graphs nicely. </title> <journal> Acta Inform., </journal> <volume> 22 </volume> <pages> 187-201, </pages> <year> 1985. </year>
Reference-contexts: Tutte [38, 39], Thomassen [36, 37], and Chiba, Yamanouchi, and Nishizeki [2] have given combinatorial characterizations of convex and strictly-convex planar graphs. In [2] linear time algorithms are given for convex planarity testing and for constructing convex drawings with real coordinates. Chiba, Onoguchi, and Nishizeki <ref> [1] </ref> extend the results of [2] to construct "quasi convex" drawings for graphs that are not convex planar. Kant [25, 24] presents a linear time algorithm for constructing convex drawings with integer coordinates and quadratic area. <p> at the endpoints of the chord identifying s , and the other vertices at distinct points of the circular arc of s . 7 If is an R-node, a strictly-convex drawing of skeleton () is obtained by using the algorithm of Tutte [39] or the algorithm of Chiba et al. <ref> [1, 2] </ref>, with the poles of (i.e. the endpoints of e in skeleton ()) at the endpoints of the chord identifying s and the other external vertices at distinct points of the circular arc of s . Then e and e are removed from the drawing.
Reference: [2] <author> N. Chiba, T. Yamanouchi, and T. Nishizeki. </author> <title> Linear algorithms for convex drawings of planar graphs. </title> <editor> In J. A. Bondy and U. S. R. Murty, editors, </editor> <booktitle> Progress in Graph Theory, </booktitle> <pages> pages 153-173. </pages> <publisher> Academic Press, </publisher> <address> New York, NY, </address> <year> 1984. </year>
Reference-contexts: He shows that every triconnected planar graph is strictly-convex planar, and that a strictly-convex drawing can be constructed by solving a system of linear equations. Tutte [38, 39], Thomassen [36, 37], and Chiba, Yamanouchi, and Nishizeki <ref> [2] </ref> have given combinatorial characterizations of convex and strictly-convex planar graphs. In [2] linear time algorithms are given for convex planarity testing and for constructing convex drawings with real coordinates. Chiba, Onoguchi, and Nishizeki [1] extend the results of [2] to construct "quasi convex" drawings for graphs that are not convex <p> He shows that every triconnected planar graph is strictly-convex planar, and that a strictly-convex drawing can be constructed by solving a system of linear equations. Tutte [38, 39], Thomassen [36, 37], and Chiba, Yamanouchi, and Nishizeki <ref> [2] </ref> have given combinatorial characterizations of convex and strictly-convex planar graphs. In [2] linear time algorithms are given for convex planarity testing and for constructing convex drawings with real coordinates. Chiba, Onoguchi, and Nishizeki [1] extend the results of [2] to construct "quasi convex" drawings for graphs that are not convex planar. <p> Tutte [38, 39], Thomassen [36, 37], and Chiba, Yamanouchi, and Nishizeki <ref> [2] </ref> have given combinatorial characterizations of convex and strictly-convex planar graphs. In [2] linear time algorithms are given for convex planarity testing and for constructing convex drawings with real coordinates. Chiba, Onoguchi, and Nishizeki [1] extend the results of [2] to construct "quasi convex" drawings for graphs that are not convex planar. Kant [25, 24] presents a linear time algorithm for constructing convex drawings with integer coordinates and quadratic area. <p> In this paper, we present the following results on convex planarity: * We give a new combinatorial characterization of convex planar graphs and strictly-convex planar graphs. Our characterization appears to be simpler and more intuitive than the ones previously presented in the literature <ref> [2, 36, 37, 38, 39] </ref>. * We consider the problem of testing convex planarity in a semi-dynamic environment, where a graph is subject to on-line insertions of vertices and edges. <p> at the endpoints of the chord identifying s , and the other vertices at distinct points of the circular arc of s . 7 If is an R-node, a strictly-convex drawing of skeleton () is obtained by using the algorithm of Tutte [39] or the algorithm of Chiba et al. <ref> [1, 2] </ref>, with the poles of (i.e. the endpoints of e in skeleton ()) at the endpoints of the chord identifying s and the other external vertices at distinct points of the circular arc of s . Then e and e are removed from the drawing.
Reference: [3] <author> R. F. Cohen, G. Di Battista, R. Tamassia, and I. G. Tollis. </author> <title> Dynamic graph drawing: Trees, series-parallel digraphs, and planar st-digraphs. </title> <journal> SIAM J. Comput., </journal> <volume> 24(5), </volume> <year> 1995. </year>
Reference-contexts: Namely, there exists a sequence of insertions of vertices and edges on a planar graph G such that G alternatively gains or loses (strictly-) convex planarity after each insertion operation. Previous work on dynamic planarity testing and dynamic graph drawing is reported in <ref> [3, 4, 14, 15, 16, 17, 18, 19, 26, 41] </ref>. Besides their theoretical significance, our results are motivated by the development of advanced graph drawing systems. A variety of visualization applications require to automatically draw graphs.
Reference: [4] <author> R. F. Cohen, G. Di Battista, R. Tamassia, I. G. Tollis, and P. Bertolazzi. </author> <title> A framework for dynamic graph drawing. </title> <booktitle> In Proc. 8th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 261-270, </pages> <year> 1992. </year>
Reference-contexts: Namely, there exists a sequence of insertions of vertices and edges on a planar graph G such that G alternatively gains or loses (strictly-) convex planarity after each insertion operation. Previous work on dynamic planarity testing and dynamic graph drawing is reported in <ref> [3, 4, 14, 15, 16, 17, 18, 19, 26, 41] </ref>. Besides their theoretical significance, our results are motivated by the development of advanced graph drawing systems. A variety of visualization applications require to automatically draw graphs.
Reference: [5] <author> I. F. Cruz and P. Eades, </author> <title> editors. Special Issue on Graph Visualization, </title> <booktitle> volume 6(3) of J. Visual Languages and Computing. </booktitle> <year> 1995. </year>
Reference-contexts: For background on graph drawing, see <ref> [5, 9, 10, 13, 12, 34] </ref>. A drawing of a graph maps each vertex to a distinct point of the plane and each edge (u; v) to a simple Jordan curve with end-points u and v. A drawing is planar if no two edges intersect, except, possibly, at common end-points.
Reference: [6] <author> H. de Fraysseix, J. Pach, and R. Pollack. </author> <title> Small sets supporting Fary embeddings of planar graphs. </title> <booktitle> In Proc. 20th Annu. ACM Sympos. Theory Comput., </booktitle> <pages> pages 426-433, </pages> <year> 1988. </year>
Reference-contexts: A classical result independently established by Steinitz and Rademacher [33], Wagner [40], Fary [20], and Stein [32] shows that every planar graph has a planar straight-line drawing. A grid drawing is a drawing in which the vertices have integer coordinates. Independently, de Fraysseix, Pach, and Pollack <ref> [6, 7] </ref>, and Schnyder [29] have shown that every n-vertex planar graph has a planar straight-line grid drawing with O (n 2 ) area.
Reference: [7] <author> H. de Fraysseix, J. Pach, and R. Pollack. </author> <title> How to draw a planar graph on a grid. </title> <journal> Combinatorica, </journal> <volume> 10 </volume> <pages> 41-51, </pages> <year> 1990. </year>
Reference-contexts: A classical result independently established by Steinitz and Rademacher [33], Wagner [40], Fary [20], and Stein [32] shows that every planar graph has a planar straight-line drawing. A grid drawing is a drawing in which the vertices have integer coordinates. Independently, de Fraysseix, Pach, and Pollack <ref> [6, 7] </ref>, and Schnyder [29] have shown that every n-vertex planar graph has a planar straight-line grid drawing with O (n 2 ) area.
Reference: [8] <author> F. Dehne, H. Djidjev, and J.-R. Sack. </author> <title> An optimal PRAM algorithm for planar convex embedding. </title> <editor> In G. Di Battista, P. Eades, H. de Fraysseix, P. Rosenstiehl, and R. Tamassia, editors, </editor> <booktitle> Graph Drawing '93 (Proc. ALCOM Workshop on Graph Drawing), </booktitle> <pages> pages 75-77, </pages> <year> 1993. </year>
Reference-contexts: Kant [25, 24] presents a linear time algorithm for constructing convex drawings with integer coordinates and quadratic area. Finally, parallel algorithms for convex planarity testing and for constructing convex drawings have been given by Dehne, Djidjev and Sack <ref> [8] </ref> and by He and Kao [21]. In this paper, we present the following results on convex planarity: * We give a new combinatorial characterization of convex planar graphs and strictly-convex planar graphs.
Reference: [9] <author> G. Di Battista, P. Eades, H. de Fraysseix, P. Rosenstiehl, and R. Tamassia, </author> <title> editors. </title> <booktitle> Graph Drawing '93 (Proc. ALCOM Workshop on Graph Drawing). </booktitle> <year> 1993. </year>
Reference-contexts: For background on graph drawing, see <ref> [5, 9, 10, 13, 12, 34] </ref>. A drawing of a graph maps each vertex to a distinct point of the plane and each edge (u; v) to a simple Jordan curve with end-points u and v. A drawing is planar if no two edges intersect, except, possibly, at common end-points.
Reference: [10] <author> G. Di Battista, P. Eades, R. Tamassia, and I. G. Tollis. </author> <title> Algorithms for drawing graphs: an annotated bibliography. </title> <journal> Comput. Geom. Theory Appl., </journal> <volume> 4 </volume> <pages> 235-282, </pages> <year> 1994. </year>
Reference-contexts: For background on graph drawing, see <ref> [5, 9, 10, 13, 12, 34] </ref>. A drawing of a graph maps each vertex to a distinct point of the plane and each edge (u; v) to a simple Jordan curve with end-points u and v. A drawing is planar if no two edges intersect, except, possibly, at common end-points.
Reference: [11] <author> G. Di Battista, G. Liotta, and F. Vargiu. </author> <title> Diagram Server. J. Visual Languages and Computing (special issue on Graph Visualization, edited by I. </title> <editor> F. Cruz and P. Eades), </editor> <volume> 6(3), </volume> <year> 1995. </year>
Reference-contexts: Examples include programming environments (e.g., displaying entity-relationship diagrams and subroutine-call graphs), algorithms animation systems (e.g., representing data structures), and project planning systems (e.g., displaying pert diagrams and organization charts). Several graph drawing systems have been recently devised (see, for example, <ref> [11, 22] </ref>). Such systems usually have a library of graph drawing algorithms, each devised to take into account a specific set of aesthetic requirements. Thus, in graph drawing systems the problem of selecting, among a set of algorithms, 1 the one that provides the "best" visualization is of crucial importance.
Reference: [12] <author> G. Di Battista and R. Tamassia, </author> <title> editors. Special Issue on Geometric Representations of Graphs. </title> <journal> Comput. Geom. Theory Appl. </journal> <note> To appear. </note>
Reference-contexts: For background on graph drawing, see <ref> [5, 9, 10, 13, 12, 34] </ref>. A drawing of a graph maps each vertex to a distinct point of the plane and each edge (u; v) to a simple Jordan curve with end-points u and v. A drawing is planar if no two edges intersect, except, possibly, at common end-points.
Reference: [13] <author> G. Di Battista and R. Tamassia, editors. </author> <note> Special Issue on Graph Drawing. Algorithmica. To appear. </note>
Reference-contexts: For background on graph drawing, see <ref> [5, 9, 10, 13, 12, 34] </ref>. A drawing of a graph maps each vertex to a distinct point of the plane and each edge (u; v) to a simple Jordan curve with end-points u and v. A drawing is planar if no two edges intersect, except, possibly, at common end-points.
Reference: [14] <author> G. Di Battista and R. Tamassia. </author> <title> Incremental planarity testing. </title> <booktitle> In Proc. 30th Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 436-441, </pages> <year> 1989. </year>
Reference-contexts: Namely, there exists a sequence of insertions of vertices and edges on a planar graph G such that G alternatively gains or loses (strictly-) convex planarity after each insertion operation. Previous work on dynamic planarity testing and dynamic graph drawing is reported in <ref> [3, 4, 14, 15, 16, 17, 18, 19, 26, 41] </ref>. Besides their theoretical significance, our results are motivated by the development of advanced graph drawing systems. A variety of visualization applications require to automatically draw graphs. <p> As shown in [19], they can be modified to support ordered trees and expand/contract operations. In the description of time bounds we use standard concepts of amortized complexity [35]. In the rest of this section, the SPQR-tree presented in <ref> [14, 15, 16, 17] </ref> is described. Let G be a biconnected graph. A split pair of G is either a pair of adjacent vertices or a separation pair. In the former case the split pair is said trivial, in the latter non-trivial. <p> Namely, the triconnected components of a biconnected graph G are in one-to-one correspondence with the internal nodes of the SPQR-tree: the R-nodes correspond to triconnected graphs, the S-nodes to polygons, and the P-nodes to bonds. SPQR-trees of planar graphs were introduced in <ref> [14] </ref> and applied to the problem of on-line planarity testing. The SPQR-tree T of a planar graph with n vertices and m edges has m Q-nodes and O (n) S-, P-, and R-nodes.
Reference: [15] <author> G. Di Battista and R. Tamassia. </author> <title> On-line graph algorithms with SPQR-trees. </title> <booktitle> In Automata, Languages and Programming (Proc. 17th ICALP), volume 442 of Lecture Notes in Computer Science, </booktitle> <pages> pages 598-611, </pages> <year> 1990. </year>
Reference-contexts: Namely, there exists a sequence of insertions of vertices and edges on a planar graph G such that G alternatively gains or loses (strictly-) convex planarity after each insertion operation. Previous work on dynamic planarity testing and dynamic graph drawing is reported in <ref> [3, 4, 14, 15, 16, 17, 18, 19, 26, 41] </ref>. Besides their theoretical significance, our results are motivated by the development of advanced graph drawing systems. A variety of visualization applications require to automatically draw graphs. <p> As shown in [19], they can be modified to support ordered trees and expand/contract operations. In the description of time bounds we use standard concepts of amortized complexity [35]. In the rest of this section, the SPQR-tree presented in <ref> [14, 15, 16, 17] </ref> is described. Let G be a biconnected graph. A split pair of G is either a pair of adjacent vertices or a separation pair. In the former case the split pair is said trivial, in the latter non-trivial.
Reference: [16] <author> G. Di Battista and R. Tamassia. </author> <title> On-line maintenance of triconnected components with SPQR-trees. </title> <journal> Algorithmica, </journal> <note> to appear. Preprint: Technical Report CS-92-40, </note> <institution> Comput. Sci. Dept., Brown Univ. </institution> <year> (1992). </year> <month> 14 </month>
Reference-contexts: Namely, there exists a sequence of insertions of vertices and edges on a planar graph G such that G alternatively gains or loses (strictly-) convex planarity after each insertion operation. Previous work on dynamic planarity testing and dynamic graph drawing is reported in <ref> [3, 4, 14, 15, 16, 17, 18, 19, 26, 41] </ref>. Besides their theoretical significance, our results are motivated by the development of advanced graph drawing systems. A variety of visualization applications require to automatically draw graphs. <p> As shown in [19], they can be modified to support ordered trees and expand/contract operations. In the description of time bounds we use standard concepts of amortized complexity [35]. In the rest of this section, the SPQR-tree presented in <ref> [14, 15, 16, 17] </ref> is described. Let G be a biconnected graph. A split pair of G is either a pair of adjacent vertices or a separation pair. In the former case the split pair is said trivial, in the latter non-trivial.
Reference: [17] <author> G. Di Battista and R. Tamassia. </author> <title> On-line planarity testing. </title> <note> SIAM J. Comput., to appear. Preprint: Technical Report CS-92-39, </note> <institution> Comput. Sci. Dept., Brown Univ. </institution> <year> (1992). </year>
Reference-contexts: Namely, there exists a sequence of insertions of vertices and edges on a planar graph G such that G alternatively gains or loses (strictly-) convex planarity after each insertion operation. Previous work on dynamic planarity testing and dynamic graph drawing is reported in <ref> [3, 4, 14, 15, 16, 17, 18, 19, 26, 41] </ref>. Besides their theoretical significance, our results are motivated by the development of advanced graph drawing systems. A variety of visualization applications require to automatically draw graphs. <p> As shown in [19], they can be modified to support ordered trees and expand/contract operations. In the description of time bounds we use standard concepts of amortized complexity [35]. In the rest of this section, the SPQR-tree presented in <ref> [14, 15, 16, 17] </ref> is described. Let G be a biconnected graph. A split pair of G is either a pair of adjacent vertices or a separation pair. In the former case the split pair is said trivial, in the latter non-trivial. <p> The repertory of query and update operations extends the one given in <ref> [17] </ref>: Convex: Determine whether G is convex planar. StrictlyConvex: Determine whether G is strictly-convex planar. T est (v 1 ; v 2 ): Determine whether edge (v 1 ; v 2 ) can be added to G while preserving planarity. <p> M akeV ertex (v): Add an isolated vertex v. Note that graph G may be non-biconnected (and even non-connected). As shown in <ref> [17] </ref>, InsertEdge, InsertV ertex, AttachV ertex, and M akeV ertex form a complete repertory of update operations for planar graphs. In particular, let G be a planar graph with n vertices. <p> The data structure extends the one for on-line planarity testing given in <ref> [17] </ref>. <p> To analyze the time complexity of the query and update operations on G, we recall the following properties of the basic on-line planarity testing data structure <ref> [17] </ref>: 12 * Operations AttachV ertex and InsertV ertex take O (log n) worst-case time and require O (1) worst-case elementary skeleton operations. * Operation InsertEdge takes O (log n) amortized time and requires O (1) amortized elementary skeleton operations. * The number of biconnected components of G can be maintained
Reference: [18] <author> D. Eppstein, Z. Galil, G. Italiano, and T. Spencer. </author> <title> Separator based sparsification for dynamic planar graph algorithms. </title> <booktitle> In Proc. 25th Annu. ACM Sympos. Theory Comput., </booktitle> <pages> pages 208-217, </pages> <year> 1993. </year>
Reference-contexts: Namely, there exists a sequence of insertions of vertices and edges on a planar graph G such that G alternatively gains or loses (strictly-) convex planarity after each insertion operation. Previous work on dynamic planarity testing and dynamic graph drawing is reported in <ref> [3, 4, 14, 15, 16, 17, 18, 19, 26, 41] </ref>. Besides their theoretical significance, our results are motivated by the development of advanced graph drawing systems. A variety of visualization applications require to automatically draw graphs.
Reference: [19] <author> D. Eppstein, G. F. Italiano, R. Tamassia, R. E. Tarjan, J. Westbrook, and M. Yung. </author> <title> Maintenance of a minimum spanning forest in a dynamic planar graph. </title> <journal> J. Algorithms, </journal> <volume> 13 </volume> <pages> 33-54, </pages> <year> 1992. </year>
Reference-contexts: Namely, there exists a sequence of insertions of vertices and edges on a planar graph G such that G alternatively gains or loses (strictly-) convex planarity after each insertion operation. Previous work on dynamic planarity testing and dynamic graph drawing is reported in <ref> [3, 4, 14, 15, 16, 17, 18, 19, 26, 41] </ref>. Besides their theoretical significance, our results are motivated by the development of advanced graph drawing systems. A variety of visualization applications require to automatically draw graphs. <p> The dynamic trees of Sleator and Tarjan [30, 31] support link/cut operations and various queries (such as finding the lowest-common ancestor of two nodes) in logarithmic time. As shown in <ref> [19] </ref>, they can be modified to support ordered trees and expand/contract operations. In the description of time bounds we use standard concepts of amortized complexity [35]. In the rest of this section, the SPQR-tree presented in [14, 15, 16, 17] is described. Let G be a biconnected graph.
Reference: [20] <author> I. Fary. </author> <title> On straight lines representation of planar graphs. </title> <journal> Acta Sci. Math. Szeged., </journal> <volume> 11 </volume> <pages> 229-233, </pages> <year> 1948. </year>
Reference-contexts: 1 Introduction Planar straight-line drawings of graphs are especially interesting for their combinatorial and geometric properties. A classical result independently established by Steinitz and Rademacher [33], Wagner [40], Fary <ref> [20] </ref>, and Stein [32] shows that every planar graph has a planar straight-line drawing. A grid drawing is a drawing in which the vertices have integer coordinates.
Reference: [21] <author> X. He and M.-Y. Kao. </author> <title> Parallel construction of canonical ordering and convex drawing of triconnected planar graphs. </title> <booktitle> In Proc. 4th Annu. Internat. Sympos. Algorithms Comput. (ISAAC 93), volume 762 of Lecture Notes in Computer Science, </booktitle> <pages> pages 303-312. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Kant [25, 24] presents a linear time algorithm for constructing convex drawings with integer coordinates and quadratic area. Finally, parallel algorithms for convex planarity testing and for constructing convex drawings have been given by Dehne, Djidjev and Sack [8] and by He and Kao <ref> [21] </ref>. In this paper, we present the following results on convex planarity: * We give a new combinatorial characterization of convex planar graphs and strictly-convex planar graphs.
Reference: [22] <author> M. Himsolt. GraphEd: </author> <title> a graphical platform for the implementation of graph algorithms. </title> <editor> In R. Tamassia and I. G. Tollis, editors, </editor> <booktitle> Graph Drawing (Proc. GD '94), volume 894 of Lecture Notes in Computer Science, </booktitle> <pages> pages 182-193. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Examples include programming environments (e.g., displaying entity-relationship diagrams and subroutine-call graphs), algorithms animation systems (e.g., representing data structures), and project planning systems (e.g., displaying pert diagrams and organization charts). Several graph drawing systems have been recently devised (see, for example, <ref> [11, 22] </ref>). Such systems usually have a library of graph drawing algorithms, each devised to take into account a specific set of aesthetic requirements. Thus, in graph drawing systems the problem of selecting, among a set of algorithms, 1 the one that provides the "best" visualization is of crucial importance.
Reference: [23] <author> J. Hopcroft and R. E. Tarjan. </author> <title> Dividing a graph into triconnected components. </title> <journal> SIAM J. Comput., </journal> <volume> 2 </volume> <pages> 135-158, </pages> <year> 1973. </year>
Reference-contexts: It is possible to show that SPQR-trees of the same graph with respect to different reference edges are isomorphic and are obtained one from the other by selecting a different Q-node as the root. SPQR-trees are closely related to the classical decomposition of biconnected graphs into triconnected components <ref> [23] </ref>. Namely, the triconnected components of a biconnected graph G are in one-to-one correspondence with the internal nodes of the SPQR-tree: the R-nodes correspond to triconnected graphs, the S-nodes to polygons, and the P-nodes to bonds.
Reference: [24] <author> G. Kant. </author> <title> Drawing planar graphs using the canonical ordering. </title> <note> Algorithmica (special issue on Graph Drawing, </note> <author> edited by G. Di Battista and R. Tamassia). </author> <note> To appear. </note>
Reference-contexts: In [2] linear time algorithms are given for convex planarity testing and for constructing convex drawings with real coordinates. Chiba, Onoguchi, and Nishizeki [1] extend the results of [2] to construct "quasi convex" drawings for graphs that are not convex planar. Kant <ref> [25, 24] </ref> presents a linear time algorithm for constructing convex drawings with integer coordinates and quadratic area. Finally, parallel algorithms for convex planarity testing and for constructing convex drawings have been given by Dehne, Djidjev and Sack [8] and by He and Kao [21]. <p> The best algorithm for fully dy namic planarity testing performs query and update operations in amortized time O ( p * Characterize the area required by a strictly-convex drawing. Kant <ref> [25, 24] </ref> has shown that convex drawings with integer coordinates can be constructed with quadratic area. It is also known that drawing a cycle as a strictly-convex polygon with integer vertex coordinates requires cubic area [27]. The rest of this paper is organized as follows.
Reference: [25] <author> G. Kant. </author> <title> Drawing planar graphs using the lmc-ordering. </title> <booktitle> In Proc. 33th Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 101-110, </pages> <year> 1992. </year>
Reference-contexts: In [2] linear time algorithms are given for convex planarity testing and for constructing convex drawings with real coordinates. Chiba, Onoguchi, and Nishizeki [1] extend the results of [2] to construct "quasi convex" drawings for graphs that are not convex planar. Kant <ref> [25, 24] </ref> presents a linear time algorithm for constructing convex drawings with integer coordinates and quadratic area. Finally, parallel algorithms for convex planarity testing and for constructing convex drawings have been given by Dehne, Djidjev and Sack [8] and by He and Kao [21]. <p> The best algorithm for fully dy namic planarity testing performs query and update operations in amortized time O ( p * Characterize the area required by a strictly-convex drawing. Kant <ref> [25, 24] </ref> has shown that convex drawings with integer coordinates can be constructed with quadratic area. It is also known that drawing a cycle as a strictly-convex polygon with integer vertex coordinates requires cubic area [27]. The rest of this paper is organized as follows.
Reference: [26] <author> J. A. La Poutre. </author> <title> Alpha-algorithms for incremental planarity testing. </title> <booktitle> In Proc. 26th Annu. ACM Sympos. Theory Comput., </booktitle> <pages> pages 706-715, </pages> <year> 1994. </year>
Reference-contexts: Namely, there exists a sequence of insertions of vertices and edges on a planar graph G such that G alternatively gains or loses (strictly-) convex planarity after each insertion operation. Previous work on dynamic planarity testing and dynamic graph drawing is reported in <ref> [3, 4, 14, 15, 16, 17, 18, 19, 26, 41] </ref>. Besides their theoretical significance, our results are motivated by the development of advanced graph drawing systems. A variety of visualization applications require to automatically draw graphs. <p> For example, given a graph, the system may need to quickly determine whether a convex drawing algorithm can be applied. Open problems left by this work include: * Reduce the amortized time complexity of the various operations to O (ff (n)). La Poutre <ref> [26] </ref> has recently shown that on-line planarity testing can be done within this bound. * Develop a fully dynamic convex planarity testing algorithm.
Reference: [27] <author> Y. Lin and S. Skiena. </author> <title> Complexity aspects of visibility graphs. </title> <type> Technical Report 92/08, </type> <institution> SUNY Stony Brook, </institution> <year> 1992. </year>
Reference-contexts: Kant [25, 24] has shown that convex drawings with integer coordinates can be constructed with quadratic area. It is also known that drawing a cycle as a strictly-convex polygon with integer vertex coordinates requires cubic area <ref> [27] </ref>. The rest of this paper is organized as follows. Preliminary definitions are given in Section 2. Section 3 contains the combinatorial characterization. The on-line algorithm for convex planarity testing is presented in Section 4. 2 Preliminaries We assume familiarity with planar graphs and with graph connectivity [28].
Reference: [28] <author> T. Nishizeki and N. Chiba. </author> <title> Planar graphs: Theory and algorithms. </title> <journal> Annals of Discrete Mathematics, </journal> <volume> 32, </volume> <year> 1988. </year>
Reference-contexts: The rest of this paper is organized as follows. Preliminary definitions are given in Section 2. Section 3 contains the combinatorial characterization. The on-line algorithm for convex planarity testing is presented in Section 4. 2 Preliminaries We assume familiarity with planar graphs and with graph connectivity <ref> [28] </ref>.
Reference: [29] <author> W. Schnyder. </author> <title> Embedding planar graphs on the grid. </title> <booktitle> In Proc. 1st ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 138-148, </pages> <year> 1990. </year>
Reference-contexts: A grid drawing is a drawing in which the vertices have integer coordinates. Independently, de Fraysseix, Pach, and Pollack [6, 7], and Schnyder <ref> [29] </ref> have shown that every n-vertex planar graph has a planar straight-line grid drawing with O (n 2 ) area. An important class of planar straight-line drawings are convex drawings, in which all faces are drawn as convex polygons (see Fig. 1.a, Fig. 1.b and Fig. 2.a).
Reference: [30] <author> D. D. Sleator and R. E. Tarjan. </author> <title> A data structure for dynamic trees. </title> <journal> J. Comput. System Sci., </journal> <volume> 26(3) </volume> <pages> 362-381, </pages> <year> 1983. </year>
Reference-contexts: The dynamic trees of Sleator and Tarjan <ref> [30, 31] </ref> support link/cut operations and various queries (such as finding the lowest-common ancestor of two nodes) in logarithmic time. As shown in [19], they can be modified to support ordered trees and expand/contract operations. In the description of time bounds we use standard concepts of amortized complexity [35].
Reference: [31] <author> D. D. Sleator and R. E. Tarjan. </author> <title> Self-adjusting binary search trees. </title> <journal> J. ACM, </journal> <volume> 32(3) </volume> <pages> 652-686, </pages> <year> 1985. </year>
Reference-contexts: The dynamic trees of Sleator and Tarjan <ref> [30, 31] </ref> support link/cut operations and various queries (such as finding the lowest-common ancestor of two nodes) in logarithmic time. As shown in [19], they can be modified to support ordered trees and expand/contract operations. In the description of time bounds we use standard concepts of amortized complexity [35].
Reference: [32] <author> S. K. Stein. </author> <title> Convex maps. </title> <journal> Proc. Amer. Math. Soc., </journal> <volume> 2 </volume> <pages> 464-466, </pages> <year> 1951. </year>
Reference-contexts: 1 Introduction Planar straight-line drawings of graphs are especially interesting for their combinatorial and geometric properties. A classical result independently established by Steinitz and Rademacher [33], Wagner [40], Fary [20], and Stein <ref> [32] </ref> shows that every planar graph has a planar straight-line drawing. A grid drawing is a drawing in which the vertices have integer coordinates.
Reference: [33] <author> E. Steinitz and H. Rademacher. </author> <title> Vorlesungen uber die Theorie der Polyeder. </title> <publisher> Julius Springer, </publisher> <address> Berlin, Germany, </address> <year> 1934. </year> <month> 15 </month>
Reference-contexts: 1 Introduction Planar straight-line drawings of graphs are especially interesting for their combinatorial and geometric properties. A classical result independently established by Steinitz and Rademacher <ref> [33] </ref>, Wagner [40], Fary [20], and Stein [32] shows that every planar graph has a planar straight-line drawing. A grid drawing is a drawing in which the vertices have integer coordinates.
Reference: [34] <editor> R. Tamassia and I. G. Tollis, editors. </editor> <booktitle> Graph Drawing (Proc. GD '94), volume 894 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: For background on graph drawing, see <ref> [5, 9, 10, 13, 12, 34] </ref>. A drawing of a graph maps each vertex to a distinct point of the plane and each edge (u; v) to a simple Jordan curve with end-points u and v. A drawing is planar if no two edges intersect, except, possibly, at common end-points.
Reference: [35] <author> R. E. Tarjan. </author> <title> Amortized computational complexity. </title> <journal> SIAM J. Algebraic Discrete Methods, </journal> <volume> 6(2) </volume> <pages> 306-318, </pages> <year> 1985. </year>
Reference-contexts: As shown in [19], they can be modified to support ordered trees and expand/contract operations. In the description of time bounds we use standard concepts of amortized complexity <ref> [35] </ref>. In the rest of this section, the SPQR-tree presented in [14, 15, 16, 17] is described. Let G be a biconnected graph. A split pair of G is either a pair of adjacent vertices or a separation pair.
Reference: [36] <author> C. Thomassen. </author> <title> Planarity and duality of finite and infinite planar graphs. </title> <journal> J. Combin. Theory Ser. B, </journal> <volume> 29 </volume> <pages> 244-271, </pages> <year> 1980. </year>
Reference-contexts: Tutte [38, 39] considered strictly-convex drawings, in which faces are strictly-convex polygons (i.e. angles are not allowed). He shows that every triconnected planar graph is strictly-convex planar, and that a strictly-convex drawing can be constructed by solving a system of linear equations. Tutte [38, 39], Thomassen <ref> [36, 37] </ref>, and Chiba, Yamanouchi, and Nishizeki [2] have given combinatorial characterizations of convex and strictly-convex planar graphs. In [2] linear time algorithms are given for convex planarity testing and for constructing convex drawings with real coordinates. <p> In this paper, we present the following results on convex planarity: * We give a new combinatorial characterization of convex planar graphs and strictly-convex planar graphs. Our characterization appears to be simpler and more intuitive than the ones previously presented in the literature <ref> [2, 36, 37, 38, 39] </ref>. * We consider the problem of testing convex planarity in a semi-dynamic environment, where a graph is subject to on-line insertions of vertices and edges.
Reference: [37] <author> C. Thomassen. </author> <title> Plane representations of graphs. </title> <editor> In J. A. Bondy and U. S. R. Murty, editors, </editor> <booktitle> Progress in Graph Theory, </booktitle> <pages> pages 43-69. </pages> <publisher> Academic Press, </publisher> <address> New York, NY, </address> <year> 1984. </year>
Reference-contexts: Tutte [38, 39] considered strictly-convex drawings, in which faces are strictly-convex polygons (i.e. angles are not allowed). He shows that every triconnected planar graph is strictly-convex planar, and that a strictly-convex drawing can be constructed by solving a system of linear equations. Tutte [38, 39], Thomassen <ref> [36, 37] </ref>, and Chiba, Yamanouchi, and Nishizeki [2] have given combinatorial characterizations of convex and strictly-convex planar graphs. In [2] linear time algorithms are given for convex planarity testing and for constructing convex drawings with real coordinates. <p> In this paper, we present the following results on convex planarity: * We give a new combinatorial characterization of convex planar graphs and strictly-convex planar graphs. Our characterization appears to be simpler and more intuitive than the ones previously presented in the literature <ref> [2, 36, 37, 38, 39] </ref>. * We consider the problem of testing convex planarity in a semi-dynamic environment, where a graph is subject to on-line insertions of vertices and edges.
Reference: [38] <author> W. T. Tutte. </author> <title> Convex representations of graphs. </title> <journal> Proceedings London Mathematical Society, </journal> <volume> 10(3) </volume> <pages> 304-320, </pages> <year> 1960. </year>
Reference-contexts: Convex drawings of graphs have been extensively studied in graph theory. A graph is said to be convex planar if it admits a convex drawing. Tutte <ref> [38, 39] </ref> considered strictly-convex drawings, in which faces are strictly-convex polygons (i.e. angles are not allowed). He shows that every triconnected planar graph is strictly-convex planar, and that a strictly-convex drawing can be constructed by solving a system of linear equations. Tutte [38, 39], Thomassen [36, 37], and Chiba, Yamanouchi, and <p> Tutte <ref> [38, 39] </ref> considered strictly-convex drawings, in which faces are strictly-convex polygons (i.e. angles are not allowed). He shows that every triconnected planar graph is strictly-convex planar, and that a strictly-convex drawing can be constructed by solving a system of linear equations. Tutte [38, 39], Thomassen [36, 37], and Chiba, Yamanouchi, and Nishizeki [2] have given combinatorial characterizations of convex and strictly-convex planar graphs. In [2] linear time algorithms are given for convex planarity testing and for constructing convex drawings with real coordinates. <p> In this paper, we present the following results on convex planarity: * We give a new combinatorial characterization of convex planar graphs and strictly-convex planar graphs. Our characterization appears to be simpler and more intuitive than the ones previously presented in the literature <ref> [2, 36, 37, 38, 39] </ref>. * We consider the problem of testing convex planarity in a semi-dynamic environment, where a graph is subject to on-line insertions of vertices and edges.
Reference: [39] <author> W. T. Tutte. </author> <title> How to draw a graph. </title> <journal> Proceedings London Mathematical Society, </journal> <volume> 13(3) </volume> <pages> 743-768, </pages> <year> 1963. </year>
Reference-contexts: Convex drawings of graphs have been extensively studied in graph theory. A graph is said to be convex planar if it admits a convex drawing. Tutte <ref> [38, 39] </ref> considered strictly-convex drawings, in which faces are strictly-convex polygons (i.e. angles are not allowed). He shows that every triconnected planar graph is strictly-convex planar, and that a strictly-convex drawing can be constructed by solving a system of linear equations. Tutte [38, 39], Thomassen [36, 37], and Chiba, Yamanouchi, and <p> Tutte <ref> [38, 39] </ref> considered strictly-convex drawings, in which faces are strictly-convex polygons (i.e. angles are not allowed). He shows that every triconnected planar graph is strictly-convex planar, and that a strictly-convex drawing can be constructed by solving a system of linear equations. Tutte [38, 39], Thomassen [36, 37], and Chiba, Yamanouchi, and Nishizeki [2] have given combinatorial characterizations of convex and strictly-convex planar graphs. In [2] linear time algorithms are given for convex planarity testing and for constructing convex drawings with real coordinates. <p> In this paper, we present the following results on convex planarity: * We give a new combinatorial characterization of convex planar graphs and strictly-convex planar graphs. Our characterization appears to be simpler and more intuitive than the ones previously presented in the literature <ref> [2, 36, 37, 38, 39] </ref>. * We consider the problem of testing convex planarity in a semi-dynamic environment, where a graph is subject to on-line insertions of vertices and edges. <p> (i.e. the endpoints of e in skeleton ()) at the endpoints of the chord identifying s , and the other vertices at distinct points of the circular arc of s . 7 If is an R-node, a strictly-convex drawing of skeleton () is obtained by using the algorithm of Tutte <ref> [39] </ref> or the algorithm of Chiba et al. [1, 2], with the poles of (i.e. the endpoints of e in skeleton ()) at the endpoints of the chord identifying s and the other external vertices at distinct points of the circular arc of s .
Reference: [40] <author> K. Wagner. </author> <title> Bemerkungen zum vierfarbenproblem. </title> <journal> Jahresbericht der Deutschen Mathematiker-Vereinigung, </journal> <volume> 46 </volume> <pages> 26-32, </pages> <year> 1936. </year>
Reference-contexts: 1 Introduction Planar straight-line drawings of graphs are especially interesting for their combinatorial and geometric properties. A classical result independently established by Steinitz and Rademacher [33], Wagner <ref> [40] </ref>, Fary [20], and Stein [32] shows that every planar graph has a planar straight-line drawing. A grid drawing is a drawing in which the vertices have integer coordinates.
Reference: [41] <author> J. Westbrook. </author> <title> Fast incremental planarity testing. </title> <booktitle> In Automata, Languages and Programming (Proc. 19th ICALP), volume 623 of Lecture Notes in Computer Science, </booktitle> <pages> pages 342-353, </pages> <year> 1992. </year> <month> 16 </month>
Reference-contexts: Namely, there exists a sequence of insertions of vertices and edges on a planar graph G such that G alternatively gains or loses (strictly-) convex planarity after each insertion operation. Previous work on dynamic planarity testing and dynamic graph drawing is reported in <ref> [3, 4, 14, 15, 16, 17, 18, 19, 26, 41] </ref>. Besides their theoretical significance, our results are motivated by the development of advanced graph drawing systems. A variety of visualization applications require to automatically draw graphs.
References-found: 41

