URL: ftp://ftp.cs.columbia.edu/reports/reports-1991/cucs-008-91.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1991.html
Root-URL: http://www.cs.columbia.edu
Title: Multiple Snapshots  
Author: David Kurlander Steven Feiner 
Keyword: CR Categories: I.3.6 [Computer Graphics]: Methodology and Techniquesinteraction techniques; I.2.6 [Artificial Intelligence] Learningconcept learning; D.2.2 [Software Engineering]: Tools and Techniquesuser interfaces Additional Key Words and Phrases: constraints, empirical learning, graphical editing  
Address: University  
Affiliation: Microsoft Research  Columbia  
Abstract: 1 of 28 ACM Transactions on Graphics, October 1993, pp. 227-304. Columbia University Computer Science Technical Report CUCS-008-91. Inferring Constraints from Abstract Many graphics tasks, such as the manipulation of graphical objects, and the construction of user-interface widgets, can be facilitated by geometric constraints. However , the difficulty of specifying constraints by traditional methods forms a barrier to their widespread use. In order to make constraints easier to declare, we have developed a method of specifying constraints implicitly , through multiple examples. Snapshots are taken of an initial scene configuration, and one or more additional snapshots are taken after the scene has been edited into other valid configurations. The constraints that are satisfied in all the snapshots are then applied to the scene objects. We discuss an efficient algorithm for inferring constraints from multiple snapshots. The algorithm has been incorporated into the Chimera editor, and several examples of its use are discussed. 
Abstract-found: 1
Intro-found: 1
Reference: [Bier86] <author> Bier, Eric A., and Stone, Maureen C. Snap-Dragging. </author> <note> Proceedings of SIGGRAPH 86 (Dallas, Texas, August 18-22, 1986) In Computer Graphics 20, </note> <month> 4 (August </month> <year> 1986). </year> <pages> 233-240. </pages>
Reference-contexts: They are useful during object construction to position components relative to one another precisely, as well as during subsequent manipulation of the components. Several graphical techniques, such as grids, snap-dragging <ref> [Bier86] </ref> and automatic beautification [Pavlidis85] were developed to make the initial construction phase easier, since specifying constraints explicitly can be a complex task. However, when objects are to be manipulated frequently , permanent constraints have an advantage over these other techniques in that they need not be reapplied. <p> The difficulty inherent in understanding interactions among multiple constraints and debugging large constraint networks has been addressed by the snap-dragging interaction technique <ref> [Bier86] </ref> [Bier88] and by an automatic illustration beautif ier [Pavlidis85]. In snap-dragging, individual constraint solutions are isolated temporally from one another , so that their interaction cannot confuse the artist. <p> If we were to extend this algorithm to other less common affine transformations, then the vertices would need to be examined explicitly. FIGURE 8. Transformations and the geometric relationships that they maintain. Reprinted with permission from <ref> [Bier86] </ref>. 15 of 28 Inferring Constraints from Multiple Snapshots For every snapshot after the initial one, the f irst step fragments existing transformational groups into new ones, accounting for the transformations that have occurred since the last snapshot.
Reference: [Bier88] <author> Bier, Eric A. Snap-Dragging: </author> <title> Interactive Geometric Design in T wo and Three Dimensions. </title> <type> Ph.D. Thesis. </type> <institution> U.C. Berkeley. EECS Department. </institution> <month> April </month> <year> 1988. </year>
Reference-contexts: The difficulty inherent in understanding interactions among multiple constraints and debugging large constraint networks has been addressed by the snap-dragging interaction technique [Bier86] <ref> [Bier88] </ref> and by an automatic illustration beautif ier [Pavlidis85]. In snap-dragging, individual constraint solutions are isolated temporally from one another , so that their interaction cannot confuse the artist.
Reference: [Borning79] <author> Borning, Alan. </author> <note> ThingLab: A Constraint-Oriented Simulation Laboratory . Xerox PARC Tech Report, SSL-79-3. Revised version of Stanford PhD thesis. </note> <month> July </month> <year> 1979. </year>
Reference-contexts: Lee s problem domain and assumptions restricted the set of constraints such that there was never any ambiguity about which to select. In our domain the initial ambiguity is unavoidable, and we rely on multiple examples to converge to the desired constraint set. Systems like Sketchpad [Sutherland63a] and ThingLab <ref> [Borning79] </ref> make it easier to add lar ge numbers of constraints to a scene, by allowing users to define new classes of objects that include the constraints that operate on them as part of the definition.
Reference: [Borning86] <author> Borning, Alan. </author> <title> Graphically Defining New Building Blocks in ThingLab. </title> <booktitle> Human Computer Interaction 2, </booktitle> <volume> 4. </volume> <year> 1986. </year> <month> 269-295. </month> <title> Reprinted in Visual Programming Environments: Par 27 of 28 Inferring Constraints from Multiple Snapshots adigms and Systems. </title> <editor> Ephraim Glinert, ed. </editor> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA. </address> <year> 1990. </year> <pages> 450-469. </pages>
Reference-contexts: Because our technique is particularly useful in heavily constrained systems, we allow constraints in the browser to be filtered by type or object reference. One of Bornings ThingLab implementations allowed new types of constraints to be def ined and viewed graphically <ref> [Borning86] </ref>. Several systems permit users to define new classes of constraints by filling in cell equations in a spreadsheet [Lewis90] [Hudson90b] [Myers91]. The technique introduced here infers constraints from a fixed set of classes that have proven useful for graphical editing.
Reference: [Chyz85] <author> Chyz, George W. </author> <title> Constraint Management for Constructive Geometry. </title> <type> Masters Thesis. </type> <institution> MIT. Mechanical Engineering. </institution> <month> June </month> <year> 1985. </year>
Reference-contexts: of the scene, but this option is important for large scenes, and we plan to include it in the future. 26 of 28 Inferring Constraints from Multiple Snapshots One approach to reducing redundant constraints might involve using algorithms similar to those Chyz developed for maintaining complete and consistent constraint systems <ref> [Chyz85] </ref>. When a new constraint is added to the network, his algorithms determine which constraint must be eliminated to avoid overconstraining the system. These methods may allow us to reduce the set of constraints passed to the solver.
Reference: [Cohen82] <author> Cohen, Paul R., and Feigenbaum, Edward A. </author> <booktitle> The Handbook of Artificial Intelligence. </booktitle> <volume> vol. 3. </volume> <publisher> Kaufmann, Inc., </publisher> <address> Los Altos, CA. </address> <year> 1982. </year>
Reference-contexts: The inference mechanism determines constants in the constraint equations, but it does not synthesize new classes of equations. Our technique is an application of learning from multiple examples, also known as empirical learning. Several empirical learning systems are discussed in <ref> [Cohen82] </ref>. In contrast, generalizing from a single example is called explanation-based learning and is surveyed in [Ellman89]. Explanation-based learning requires a potentially large amount of domain knowledge to determine why one explanation is particularly likely.
Reference: [Ellman89] <author> Ellman, Thomas. </author> <title> Explanation-Based Learning: A Survey of Programs and Perspectives. </title> <journal> ACM Computing Surveys 21, </journal> <volume> 2. </volume> <month> June </month> <year> 1989. </year> <pages> 163-221. </pages>
Reference-contexts: Our technique is an application of learning from multiple examples, also known as empirical learning. Several empirical learning systems are discussed in [Cohen82]. In contrast, generalizing from a single example is called explanation-based learning and is surveyed in <ref> [Ellman89] </ref>. Explanation-based learning requires a potentially large amount of domain knowledge to determine why one explanation is particularly likely.
Reference: [Hudson90a] <author> Hudson, Scott E., and Mohamed, </author> <title> Shamim P . Interactive Specification of Flexible User Interface Displays. </title> <journal> ACM Transactions on Information Systems 8, </journal> <month> 3 (July </month> <year> 1990). </year> <pages> 269-288. </pages>
Reference-contexts: Nelson s Juno, a two-view graphical editor, provided a program view of constraints [Nelson85]. Peridot communicated constraints as English language fragments during confirmation, and Metamouse used buttons for confirming and prioritizing constraints. The OPUS interface editor represented constraints between interface components as arrows connecting hierarchical frames or drafting lines <ref> [Hudson90a] </ref>. Our technique never requires that its users work with individual, low-level constraints. In both the specification and debugging stages, they can think entirely in terms of acceptable conf igurations of the illustration.
Reference: [Hudson90b] <author> Hudson, Scott E. </author> <title> An Enhanced Spreadsheet Model for User Interface Specification. </title> <institution> University of Arizona, Department of Computer Science T echnical Report, </institution> <type> TR 90-33. </type> <month> October </month> <year> 1990. </year>
Reference-contexts: One of Bornings ThingLab implementations allowed new types of constraints to be def ined and viewed graphically [Borning86]. Several systems permit users to define new classes of constraints by filling in cell equations in a spreadsheet [Lewis90] <ref> [Hudson90b] </ref> [Myers91]. The technique introduced here infers constraints from a fixed set of classes that have proven useful for graphical editing. The inference mechanism determines constants in the constraint equations, but it does not synthesize new classes of equations.
Reference: [Kurlander90] <author> Kurlander, David and Feiner, Steven. </author> <title> A Visual Language for Browsing, Undoing, and Redoing Graphical Interface Commands. In Visual Languages and Visual Programming, </title> <editor> Shi-Kuo Chang, ed. </editor> <publisher> Plenum Press, </publisher> <address> New York. </address> <year> 1990. </year> <pages> 257-275. </pages>
Reference-contexts: Animating the constrained systems would provide an intuitive display of the set of constraints inferred, in the same visual language as the snapshot specif ication. We would like to provide an audit trail of snapshots by incorporating them into our graphical edit history representation <ref> [Kurlander90] </ref>. This will allow individual snapshots to be eliminated and the constraint network recalculated. It would be helpful to infer a few additional geometric relationships, such as the distance between a vertex and a line, or the angle between two arbitrary lines.
Reference: [Kurlander92] <author> Kurlander, David and Feiner, Steven. </author> <title> Interactive Constraint-Based Search and Replace. </title> <booktitle> CHI 92 Conference Proceedings (Monterey, </booktitle> <address> CA, </address> <month> May 3-7, </month> <year> 1992). </year> <journal> ACM, New Y ork. </journal> <pages> 609-618. </pages>
Reference-contexts: Peridots geometric inferencing component is limited to objects that can be represented geometrically as boxes aligned with the coordinate axes. The Chimera editor contains a constraint-based search and replace component, that infers general geometric constraints from a static scene according to user defined rules <ref> [Kurlander92] </ref>. However, a single example often contains insufficient information to infer all desired constraints. This paper describes another component of Chimera that uses multiple examples to support the constraint inferencing process. Maulsbys Metamouse [Maulsby89] induces graphical procedures by example, and infers constraints to be solved at every program step.
Reference: [Kurlander93] <author> Kurlander, David. </author> <title> Graphical Editing by Example. </title> <type> Ph.D. Thesis. </type> <institution> Columbia University. Computer Science. </institution> <month> July </month> <year> 1993. </year>
Reference-contexts: We have implemented this technique as part of Chimera, a multimodal editor with support for editing graphics, interfaces, and text <ref> [Kurlander93] </ref>. Constraints can be inferred on both graphical and interface primitives. Our initial experience suggests that the snapshot approach, like declarative constraint specification, has its own set of strengths and weaknesses. These will be discussed later in the paper.
Reference: [Lee83] <author> Lee, Kunwoo. </author> <title> Shape Optimization of Assemblies Using Geometric Properties. </title> <type> Ph.D. Thesis. </type> <institution> MIT. Mechanical Engineering. </institution> <month> December </month> <year> 1983. </year>
Reference-contexts: The first problem was addressed by Lee, who built a system to construct a set of constraint equations automatically for a database of geometric shapes <ref> [Lee83] </ref>. In doing so, he worked with a restricted class of mutually orthogonal constraints, and required that the geometric shapes be aligned with the coordinate axes. Lee s problem domain and assumptions restricted the set of constraints such that there was never any ambiguity about which to select.
Reference: [Lewis90] <author> Lewis, C. NoPumpG: </author> <title> Creating Interactive Graphics with Spreadsheet Machinery. </title> <editor> In E. Glinert, </editor> <title> Visual Programming Environments: </title> <publisher> Paradigms and Systems , IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA. </address> <year> 1990. </year> <pages> 526-546. </pages>
Reference-contexts: One of Bornings ThingLab implementations allowed new types of constraints to be def ined and viewed graphically [Borning86]. Several systems permit users to define new classes of constraints by filling in cell equations in a spreadsheet <ref> [Lewis90] </ref> [Hudson90b] [Myers91]. The technique introduced here infers constraints from a fixed set of classes that have proven useful for graphical editing. The inference mechanism determines constants in the constraint equations, but it does not synthesize new classes of equations.
Reference: [Maulsby89] <author> Maulsby, David L., Witten, Ian H., and Kittlitz, Kenneth A. Metamouse: </author> <title> Specifying Graphical Procedures by Example. </title> <booktitle> Proceedings of SIGGRAPH 89 (Boston, </booktitle> <address> MA, July 31-August 4, </address> <booktitle> 1989) In Computer Graphics 23, </booktitle> <month> 4 (July </month> <year> 1989). </year> <pages> 127-136. </pages>
Reference-contexts: However, a single example often contains insufficient information to infer all desired constraints. This paper describes another component of Chimera that uses multiple examples to support the constraint inferencing process. Maulsbys Metamouse <ref> [Maulsby89] </ref> induces graphical procedures by example, and infers constraints to be solved at every program step. To make the task more tractable, he considers only touch constraints in the vicinity of an iconic turtle that the user teaches to perform the desired task.
Reference: [Myers86] <author> Myers, Brad A., and Buxton, William. </author> <title> Creating Highly Interactive and Graphical User Interfaces by Demonstration. Proceedings of SIGGRAPH 86 (Dallas, T exas, August 18-22, </title> <booktitle> 1986) In Computer Graphics 20, </booktitle> <month> 4 (August </month> <year> 1986). </year> <pages> 249-268. </pages>
Reference: [Myers88] <author> Myers, Brad A. </author> <title> Creating User Interfaces by Demonstration. </title> <publisher> Academic Press, </publisher> <address> Boston, </address> <year> 1988. </year> <title> 28 of 28 Inferring Constraints from Multiple Snapshots </title>
Reference-contexts: Alternatively, we can adjust the slider , and the value of Ar gument 1 changes accordingly. Myers presents a similar example of parameterizing scrollbar behavior in <ref> [Myers88] </ref>. His method linearly interpolates between two different constrained configurations, which is a more powerful abstraction, particularly for defining the behavior of widgets. For example, in Peridot the slider height can be parameterized with respect to the bottom and top of the scrollbar .
Reference: [Myers91] <author> Myers, Brad A. </author> <title> Graphical Techniques in a Spreadsheet for Specifying User Interfaces. </title> <booktitle> CHI 91 Conference Proceedings (New Orleans, </booktitle> <address> LA, </address> <month> April 27- May 2, </month> <year> 1991) </year> <month> 243-249. </month>
Reference-contexts: One of Bornings ThingLab implementations allowed new types of constraints to be def ined and viewed graphically [Borning86]. Several systems permit users to define new classes of constraints by filling in cell equations in a spreadsheet [Lewis90] [Hudson90b] <ref> [Myers91] </ref>. The technique introduced here infers constraints from a fixed set of classes that have proven useful for graphical editing. The inference mechanism determines constants in the constraint equations, but it does not synthesize new classes of equations.
Reference: [Nelson85] <author> Nelson, Greg. Juno, </author> <title> A Constraint-Based Graphics System. </title> <booktitle> Proceedings of SIG-GRAPH 85 (San Francisco, </booktitle> <address> CA, </address> <month> July 22-26, </month> <booktitle> 1985) In Computer Graphics 19, </booktitle> <month> 3 (July </month> <year> 1985). </year> <pages> 235-243. </pages>
Reference-contexts: Suther-lands Sketchpad [Sutherland63a][Sutherland63b] connected constrained vertices together with lines accompanied by a symbol indicating the constraint. Nelson s Juno, a two-view graphical editor, provided a program view of constraints <ref> [Nelson85] </ref>. Peridot communicated constraints as English language fragments during confirmation, and Metamouse used buttons for confirming and prioritizing constraints. The OPUS interface editor represented constraints between interface components as arrows connecting hierarchical frames or drafting lines [Hudson90a]. Our technique never requires that its users work with individual, low-level constraints.
Reference: [Olsen90] <author> Olsen, Dan R., Jr., and Allan, Kirk. </author> <title> Creating Interactive T echniques by Symbolically Solving Geometric Constraints. </title> <booktitle> Proceedings of UIST 90 (Snowbird, </booktitle> <address> Utah, </address> <month> October 3-5, </month> <year> 1990) </year> <month> 102-107. </month>
Reference: [Pavlidis85] <author> Pavlidis, Theo and Van Wyk, Christopher J. </author> <title> An Automatic Beautifier for Drawings and Illustrations. </title> <booktitle> Proceedings of SIGGRAPH 85 (San Francisco, </booktitle> <address> CA, </address> <month> July 22-26, </month> <booktitle> 1985) In Computer Graphics 19, </booktitle> <month> 3 (July </month> <year> 1985). </year> <pages> 225-234. </pages>
Reference-contexts: They are useful during object construction to position components relative to one another precisely, as well as during subsequent manipulation of the components. Several graphical techniques, such as grids, snap-dragging [Bier86] and automatic beautification <ref> [Pavlidis85] </ref> were developed to make the initial construction phase easier, since specifying constraints explicitly can be a complex task. However, when objects are to be manipulated frequently , permanent constraints have an advantage over these other techniques in that they need not be reapplied. <p> The difficulty inherent in understanding interactions among multiple constraints and debugging large constraint networks has been addressed by the snap-dragging interaction technique [Bier86] [Bier88] and by an automatic illustration beautif ier <ref> [Pavlidis85] </ref>. In snap-dragging, individual constraint solutions are isolated temporally from one another , so that their interaction cannot confuse the artist. The automatic beautif ier infers a set of constraints suf ficient to neaten a drawing, but the constraints are solved once and discardedthey are isolated temporally from subsequent user-interaction.
Reference: [Press88] <author> Press, William H., Flannery, Brian P., Teukolsky, Saul A., and Vetterling, William T. </author> <title> Numerical Recipes in C: </title> <booktitle> The Art of Scientif ic Computing. </booktitle> <publisher> Cambridge University Press, </publisher> <address> Cam-bridge, </address> <year> 1988. </year>
Reference-contexts: Our constraint solver is implemented in C, but the inferencing mechanism is in LISP. The code runs on Sun workstations under OpenWindows. We use Levenberg-Marquadt iteration <ref> [Press88] </ref> to solve the constraint systems. This method uses gradient descent when far from a solution, but switches to the inverse Hessian method to converge quadratically when a solution is near . Levenberg-Marquadt is a least-squares method. <p> If the error functions and their partial derivatives are not mutually independent (which is the case with redundant constraints), the system cannot be solved using Gaussian elimination. Instead, we use singular value decomposition <ref> [Press88] </ref> to find a solution at this step. In looking for absolute and relative relations in the scene, it is important to build tolerances into the matching process.
Reference: [Sutherland63a] <author> Sutherland, Ivan E. </author> <title> Sketchpad, A Man-Machine Graphical Communication System. </title> <type> Ph.D. Thesis. </type> <institution> Electrical Engineering. </institution> <month> January </month> <year> 1963. </year>
Reference-contexts: Lee s problem domain and assumptions restricted the set of constraints such that there was never any ambiguity about which to select. In our domain the initial ambiguity is unavoidable, and we rely on multiple examples to converge to the desired constraint set. Systems like Sketchpad <ref> [Sutherland63a] </ref> and ThingLab [Borning79] make it easier to add lar ge numbers of constraints to a scene, by allowing users to define new classes of objects that include the constraints that operate on them as part of the definition.
Reference: [Sutherland63b] <author> Sutherland, Ivan E. </author> <title> Sketchpad: A Man-Machine Graphical Communication System. </title> <booktitle> AFIPS Conference Proceedings, Spring Joint Computer Conference. </booktitle> <year> 1963. </year> <pages> 329-346. </pages>
References-found: 24

