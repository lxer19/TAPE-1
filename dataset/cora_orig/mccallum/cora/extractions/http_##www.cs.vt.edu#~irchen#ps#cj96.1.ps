URL: http://www.cs.vt.edu/~irchen/ps/cj96.1.ps
Refering-URL: http://www.cs.vt.edu/~irchen/
Root-URL: http://www.cs.vt.edu
Title: Analysis of Replicated Data with Repair Dependency  
Author: Ing-Ray Chen and Ding-Chau Wang 
Keyword: Index Terms Data replication, pessimistic control algorithms, repairman models, availabil ity analysis, dynamic voting, distributed systems, stochastic Petri nets.  
Abstract: Pessimistic control algorithms for replicated data permit only one partition to perform update operations at any time so as to ensure mutual exclusion of the replicated data object. Existing availability modeling and analyses of pessimistic control algorithms for replicated data management are constrained to either site-failure-only or link-failure-only models, but not both, because of the large state space which needs to be considered. Moreover, the assumption of having an independent repairman for each link and each site has been made to reduce the complexity of analysis. In this paper, we remove these restrictions with the help of stochastic Petri nets. In addition to including both site and link failures/repairs events in our analysis, we investigate the effect of repair dependency which occurs when many sites and links may have to share the same repairman due to repair constraints. Four repairman models are examined in the paper: (a) independent repairman with one repairman assigned to each link and each node; (b) dependent repairman with FIFO servicing discipline; (c) dependent repairman with linear-order servicing discipline; and (d) dependent repairman with best-first servicing discipline. Using dynamic voting as a case study, we compare and contrast the resulting availabilities due to the use of these four different repairman models and give a physical interpretation of the differences. We show that ignoring concurrent site and link failures/repairs events or repair dependency can very unrealistically overestimate the availability of replicated data. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> N.R. Adam, </author> <title> "A new dynamic voting algorithm for distributed database systems." </title> <journal> IEEE Trans. Knowledge and Data Engineering, </journal> <volume> Vol. 6, No. 6, </volume> <month> June </month> <year> 1994, </year> <pages> pp. 470-478. </pages>
Reference-contexts: 1 Introduction Pessimistic control algorithms for replicated data permit only one partition to perform update operations at any given time so as to ensure mutual exclusion of the replicated data object. Over the past few years, various pessimistic algorithms based on voting (e.g., <ref> [1, 11] </ref>) and quorum consensus (e.g., [2, 3, 13, 16]) have been proposed in the literature and many recent works discuss how to distribute replicated data to improve the performance of the system [17, 18].
Reference: [2] <author> H.K. Chang and S.M. Yuan, </author> <title> "Performance characterization of the tree quorum algorithm," </title> <journal> IEEE Trans. Parallel and Distributed Systems, </journal> <volume> Vol. 6, No. 6, </volume> <month> June </month> <year> 1995, </year> <pages> pp. 658-662. </pages>
Reference-contexts: 1 Introduction Pessimistic control algorithms for replicated data permit only one partition to perform update operations at any given time so as to ensure mutual exclusion of the replicated data object. Over the past few years, various pessimistic algorithms based on voting (e.g., [1, 11]) and quorum consensus (e.g., <ref> [2, 3, 13, 16] </ref>) have been proposed in the literature and many recent works discuss how to distribute replicated data to improve the performance of the system [17, 18].
Reference: [3] <author> S.Y. Cheung, M.H. Ammar and M. Ahamad, </author> <title> "The grid protocol: a high performance scheme for maintaining replicated data," </title> <journal> IEEE Trans. Knowledge and Data Engineering, </journal> <volume> Vol. 4, No. 6, </volume> <month> Dec. </month> <year> 1992, </year> <pages> pp. 582-592. </pages>
Reference-contexts: 1 Introduction Pessimistic control algorithms for replicated data permit only one partition to perform update operations at any given time so as to ensure mutual exclusion of the replicated data object. Over the past few years, various pessimistic algorithms based on voting (e.g., [1, 11]) and quorum consensus (e.g., <ref> [2, 3, 13, 16] </ref>) have been proposed in the literature and many recent works discuss how to distribute replicated data to improve the performance of the system [17, 18].
Reference: [4] <author> I.R. Chen and D.C. Wang, </author> <title> "Analyzing dynamic voting using Petri nets," </title> <booktitle> 15th Symposium on Reliable Distributed Systems (SRDS'96), </booktitle> <address> Niagara Falls, Ontario, Canada, </address> <month> Oct. </month> <year> 1996, </year> <pages> pp. 44-53. </pages>
Reference-contexts: We pick dynamic voting as a case study simply because analytical results under site- or link-failures/repairs only models (but not both altogether) are available in [11], against which we can validate our Petri net models at the boundary conditions. We extend our previous work <ref> [4] </ref> in this paper by investigating various strategies for repairing failed sites and links and analyzing the effect of repair dependency on data availability. The rest of the paper is organized as follows. <p> The reader can refer to <ref> [4] </ref> for the case when the ratios are larger and also when the assumption of frequent updates is relaxed.
Reference: [5] <author> G. Ciardo, J.K. Muppala, and K.S. Trivedi, "SPNP: </author> <title> stochastic Petri net package," </title> <booktitle> Proc. 3rd Int. Workshop Petri Nets and Performance Models, </booktitle> <address> Kyoto, Japan, </address> <month> Dec. </month> <year> 1989, </year> <pages> pp. 142-151. </pages>
Reference-contexts: Finally, the SPN for the dependent repairman model with best-first consists of same four figures with Tables 1, 2, 3, 4 and 7; the number of states in this case is 3821. The time it takes to solve these models using SPNP <ref> [5] </ref> is in the order of few minutes on a SUN Ultra 1 machine. The site and system availability metrics considered in the case study were obtained by assigning proper "rewards" with states of the system [5]. <p> The time it takes to solve these models using SPNP <ref> [5] </ref> is in the order of few minutes on a SUN Ultra 1 machine. The site and system availability metrics considered in the case study were obtained by assigning proper "rewards" with states of the system [5]. The system availability metric, i.e., the steady-state probability that a major partition exists, was obtained by associating a reward rate of 1 with those states in which the enabling function f () is evaluated to TRUE and a reward rate of 0 otherwise.
Reference: [6] <author> G. Ciardo, J.K. Muppala, </author> <title> and K.S. Trivedi, "Analyzing concurrent and fault-tolerant software using stochastic reward nets," </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> Vol. 15, </volume> <year> 1992, </year> <pages> pp. 255-269. </pages>
Reference-contexts: A similar approach has been adopted in <ref> [6] </ref>. Specifically, Table 5 replaces Table 3 with each repair rate now becoming a function of the total number of failed sites and links that depends on the current state of the system.
Reference: [7] <author> J.B. Dugan and G. Ciardo, </author> <title> "Stochastic Petri net analysis of a replicated file system," </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> Vol. 15, No. 4, </volume> <month> April </month> <year> 1989, </year> <pages> pp. 394-401. </pages>
Reference-contexts: Moreover, an independent repairman associated with each link or site has always been assumed to reduce the complexity of analysis. Ironically, although pessimistic algorithms were designed to deal with network partitioning problems, these past works were content with availability analyses based on site-failure-only system models (e.g., <ref> [7] </ref>). The only exception is the work by Jajodia and Mutchler [11] who have considered the site and link models separately, but not altogether in one model. This paper removes these inadequate modeling restrictions with the help of stochastic Petri nets.
Reference: [8] <author> A. W. Fu, </author> <title> "Delay-optimal quorum consensus for distributed systems," </title> <journal> IEEE Trans. Parallel and Distributed Systems, </journal> <volume> Vol. 8, No. 1, </volume> <month> Jan. </month> <year> 1997, </year> <pages> pp. 59-69. </pages>
Reference-contexts: Some possible future research areas include (a) extending and applying the modeling techniques to analyzing other pessimistic algorithms such as those based on coteries <ref> [8, 14] </ref> and (b) developing modeling techniques to study the tradeoff between the reduction in data processing overheads (say due to the use of a more constrained quorum sets based on a hierarchical or tree structure) and the sacrifice in availability (due to the more constrained way of finding a quorum)
Reference: [9] <author> S. Jajodia and D. Mutchler, </author> <title> "A pessimistic consistency control algorithm fir replicated files which achieve high availability," </title> <journal> IEEE Trans. Soft. Eng. </journal> <volume> Vol. 15, No. 1, </volume> <month> Jan. </month> <year> 1989, </year> <pages> pp. 39-45. </pages>
Reference-contexts: A detailed description of the dynamic voting can be found in <ref> [9, 10, 11] </ref>.
Reference: [10] <author> S. Jajodia and D. Mutchler, </author> <title> "A hybrid replica control algorithm combining static and dynamic voting," </title> <journal> IEEE Trans. Knowledge and Data Engineering, </journal> <volume> Vol. 1, No. 4, </volume> <month> Dec. </month> <year> 1989, </year> <pages> pp. 459-469. </pages>
Reference-contexts: A detailed description of the dynamic voting can be found in <ref> [9, 10, 11] </ref>.
Reference: [11] <author> S. Jajodia and D. Mutchler, </author> <title> "Dynamic voting algorithms for maintaining the consistency of replicated database," </title> <journal> ACM Trans. Database Systems, </journal> <volume> Vol. 15, No. 2, </volume> <month> June </month> <year> 1990, </year> <pages> pp. 230-280. </pages>
Reference-contexts: 1 Introduction Pessimistic control algorithms for replicated data permit only one partition to perform update operations at any given time so as to ensure mutual exclusion of the replicated data object. Over the past few years, various pessimistic algorithms based on voting (e.g., <ref> [1, 11] </ref>) and quorum consensus (e.g., [2, 3, 13, 16]) have been proposed in the literature and many recent works discuss how to distribute replicated data to improve the performance of the system [17, 18]. <p> Ironically, although pessimistic algorithms were designed to deal with network partitioning problems, these past works were content with availability analyses based on site-failure-only system models (e.g., [7]). The only exception is the work by Jajodia and Mutchler <ref> [11] </ref> who have considered the site and link models separately, but not altogether in one model. This paper removes these inadequate modeling restrictions with the help of stochastic Petri nets. <p> We pick dynamic voting as a case study simply because analytical results under site- or link-failures/repairs only models (but not both altogether) are available in <ref> [11] </ref>, against which we can validate our Petri net models at the boundary conditions. We extend our previous work [4] in this paper by investigating various strategies for repairing failed sites and links and analyzing the effect of repair dependency on data availability. <p> Section 5 summarizes the paper and outlines some future research areas. 2 2 System Model and Assumptions We illustrate the key modeling techniques developed in this paper by an example pessimistic control algorithm called dynamic voting developed by Jajodia and Mutchler <ref> [11] </ref>. A detailed description of the dynamic voting can be found in [9, 10, 11]. <p> A detailed description of the dynamic voting can be found in <ref> [9, 10, 11] </ref>. <p> A termination protocol can be used to correctly terminate the execution of the update process if it is interrupted by failures. A possible terminal protocol can be found in <ref> [11] </ref> and is not described here. To simplify our presentation, this paper only considers update operations, although the SPN models developed in the paper can be easily applied to handle read operations. 2.2 Assumptions and Availability Metric We first state the system assumptions. <p> As for the availability evaluation of dynamic algorithms, we consider both the system and site availability metrics. The site availability is defined as the probability that an update arriving at an arbitrary site will succeed <ref> [11, 16] </ref>, while The traditional system availability metric is defined as the probability that a major partition exists. <p> While the repair-rate/failure-rate ratios can be arbitrarily large, in this paper we consider a range of ratio values from 1 to 20 so as to facilitate the comparison of our results with those published in <ref> [11] </ref> which had previously considered only either site- or link-failures, but not both. The reader can refer to [4] for the case when the ratios are larger and also when the assumption of frequent updates is relaxed. <p> The asymptotic case where only links are fallible as obtained in previous studies <ref> [11] </ref> is also shown for comparison reasons.
Reference: [12] <author> L. Kleinrock, </author> <title> Queueing Systems, Volume 1: Theory, </title> <publisher> John Wiley and Sons, </publisher> <year> 1975. </year>
Reference-contexts: downoc j + dwlink jk ) tocf i s tocr i s X #(downcc j + downoc j + dwlink jk ) tlinkf ij l tlinkr ij l X #(downcc j + downoc j + dwlink jk ) To model the FIFO repairman model, we note that by queueing theory <ref> [12] </ref> the performance characteristics (e.g., queueing delay) of a client under the FIFO service discipline for a single server whose service time is exponentially distributed would be the same as that under the processor sharing (PS) discipline where the processing power of the server is divided equally among all clients in
Reference: [13] <author> A. Kumar, </author> <title> "Hierarchical quorum consensus: A new algorithm for managing replicated data," </title> <journal> IEEE Trans. Computers, </journal> <volume> Vol. 40, No. 9, </volume> <month> Sept. </month> <year> 1991, </year> <pages> pp. 996-1004. </pages>
Reference-contexts: 1 Introduction Pessimistic control algorithms for replicated data permit only one partition to perform update operations at any given time so as to ensure mutual exclusion of the replicated data object. Over the past few years, various pessimistic algorithms based on voting (e.g., [1, 11]) and quorum consensus (e.g., <ref> [2, 3, 13, 16] </ref>) have been proposed in the literature and many recent works discuss how to distribute replicated data to improve the performance of the system [17, 18].
Reference: [14] <author> H. Garcia-Molina and D. Barbara, </author> <title> "How to assign votes in a distributed system," </title> <journal> JACM, </journal> <volume> Vol. 32, No. 4, </volume> <month> June </month> <year> 1985, </year> <pages> pp. 841-860. </pages>
Reference-contexts: Some possible future research areas include (a) extending and applying the modeling techniques to analyzing other pessimistic algorithms such as those based on coteries <ref> [8, 14] </ref> and (b) developing modeling techniques to study the tradeoff between the reduction in data processing overheads (say due to the use of a more constrained quorum sets based on a hierarchical or tree structure) and the sacrifice in availability (due to the more constrained way of finding a quorum)
Reference: [15] <author> W.H. Sanders and L.M. Malhis, </author> <title> "Dependability evaluation using composed SAN-based reward models," </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> Vol. 15, </volume> <year> 1992, </year> <pages> pp. 238-254. </pages>
Reference-contexts: For the 5-site ring, we explicitly include every site and every link in defining the SPN model. It may be possible to exploit the symmetric property of the 5-site ring and apply model reduction techniques <ref> [15] </ref> to define a smaller yet symmetric SPN model without losing the solution exactness. This aspect is not explored in this paper. 18 examined. For the independent repairman model, sites and links fail and repair independently of each other.
Reference: [16] <author> S. Rangarajan, S. Setia and S.K. Tripathi, </author> <title> "A fault-tolerant algorithm for replicated data management," </title> <journal> IEEE Trans. Parallel and Distributed Systems, </journal> <volume> Vol. 6, No. 12, </volume> <month> Dec. </month> <year> 1995, </year> <pages> pp. 1271-1282. </pages>
Reference-contexts: 1 Introduction Pessimistic control algorithms for replicated data permit only one partition to perform update operations at any given time so as to ensure mutual exclusion of the replicated data object. Over the past few years, various pessimistic algorithms based on voting (e.g., [1, 11]) and quorum consensus (e.g., <ref> [2, 3, 13, 16] </ref>) have been proposed in the literature and many recent works discuss how to distribute replicated data to improve the performance of the system [17, 18]. <p> As for the availability evaluation of dynamic algorithms, we consider both the system and site availability metrics. The site availability is defined as the probability that an update arriving at an arbitrary site will succeed <ref> [11, 16] </ref>, while The traditional system availability metric is defined as the probability that a major partition exists.
Reference: [17] <author> P. Triantafillou and D.J. Taylor, </author> <title> "The location-based paradigm for replication: Achieving efficiency and availability in distributed systems," </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> Vol. 21, No. 1, </volume> <month> Jan. </month> <year> 1995, </year> <pages> pp. 1-18. </pages>
Reference-contexts: Over the past few years, various pessimistic algorithms based on voting (e.g., [1, 11]) and quorum consensus (e.g., [2, 3, 13, 16]) have been proposed in the literature and many recent works discuss how to distribute replicated data to improve the performance of the system <ref> [17, 18] </ref>. These past works mainly emphasized the algorithmic aspects and correctness proofs of their approaches with little or inadequate availability modeling and analyses. To date, the availability analysis of these pessimistic fl Institute of Information Engineering, National Cheng Kung University, Tainan, Taiwan. Email: irchen@iie.ncku.edu.tw.
Reference: [18] <author> O. Wolfson and S. Jajodia, </author> <title> "An algorithm for dynamic data replication in distributed systems," </title> <journal> Information Processing Letters, </journal> <volume> Vol. 53, </volume> <year> 1995, </year> <pages> pp. 113-119. 28 </pages>
Reference-contexts: Over the past few years, various pessimistic algorithms based on voting (e.g., [1, 11]) and quorum consensus (e.g., [2, 3, 13, 16]) have been proposed in the literature and many recent works discuss how to distribute replicated data to improve the performance of the system <ref> [17, 18] </ref>. These past works mainly emphasized the algorithmic aspects and correctness proofs of their approaches with little or inadequate availability modeling and analyses. To date, the availability analysis of these pessimistic fl Institute of Information Engineering, National Cheng Kung University, Tainan, Taiwan. Email: irchen@iie.ncku.edu.tw.
References-found: 18

