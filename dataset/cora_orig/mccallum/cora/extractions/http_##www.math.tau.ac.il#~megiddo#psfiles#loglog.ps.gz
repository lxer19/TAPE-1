URL: http://www.math.tau.ac.il/~megiddo/psfiles/loglog.ps.gz
Refering-URL: http://www.math.tau.ac.il/~megiddo/pub.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A Deterministic Poly(log log N)-Time N-Processor Algorithm for Linear Programming in Fixed Dimension  
Author: Miklos Ajtai and Nimrod Megiddo 
Date: February 1992; revised November 1994  
Abstract: It is shown that for any fixed number of variables, the linear programming problems with n linear inequalities can be solved deterministically by n parallel processors in sub-logarithmic time. The parallel time bound (counting only the arithmetic operations) is O((log log n) d ) where d is the number of variables. In the one-dimensional case this bound is optimal. If we take into account the operations needed for processor allocation, the time bound is O((log log n) d+c ) where c is an absolute constant.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Ajtai, </author> <title> "Approximate Counting with Uniform Constant Depth Circuits," </title> <booktitle> in: Advances in Computational Complexity Theory, DIMACS Series in Discrete Mathematics and Theoretical Computer Science, </booktitle> <volume> Vol. 13, </volume> <editor> Jin-Yi Cai, Ed., </editor> <publisher> Amer. Math. Soc., </publisher> <year> 1993, </year> <pages> pp. 1-20. </pages>
Reference-contexts: programming problem with two variables in the form: (P 2 ) Minimize y subject to y a i x + b i (i 2 N + ) y a i x + b i (i 2 N ) where jN + j + jN j = n and f`; hg <ref> [1; 1] </ref>. Any two-variable linear programming problem can be reduced to this form in O (log log n) time with n processors. <p> We solved the linear programming problem by discarding an increasing proportion of the remaining constraints. In a typical step of the iteration we assume that the remaining n constraints are stored in an array of n cells R <ref> [1] </ref>; . . . ; R [n], and we discard at least n (1 1=s) (1 s n) of them. In order to continue with the algorithm, we need the remaining n=s constraints to be stored in an array whose size is essentially not larger than n=s. <p> In order to continue with the algorithm, we need the remaining n=s constraints to be stored in an array whose size is essentially not larger than n=s. More precisely, we need an algorithm for the following problem: Problem 6.1. Given an array R <ref> [1] </ref>; . . . ; R [n] and a subset H f1; 2; . . . ; ng such that jHj = n=s, move the contents of each R [i] (i 2 H) to some R [j (i)] so that j (i) n=s 1* and j (i) 6= j (i 0 <p> We associate the input nodes with the m processors. The value of the input will be 1 if there is an element of A at the processor, and 0 otherwise. Using the following theorem (see <ref> [ 1 ] </ref> ), we are able to count approximately the number of elements of A in a constant number of steps: Theorem 6.15. <p> We will also use the following easy proposition from <ref> [ 1 ] </ref> about mod p polynomials. Definition 6.16. Let p be a prime number and let K p be a field with p elements. Assume that f is a polynomial of degree k with coefficients in K p .
Reference: [2] <author> M. Ajtai, J. Komlos, W. L. Steiger, and E. Szemeredi, </author> <title> "Optimal parallel selection has complexity O(log log N )," J. </title> <journal> Comp. Sys. Sci. </journal> <month> 38 </month> <year> (1989) </year> <month> 125-133. </month>
Reference-contexts: It was shown by Ajtai, Komlos, Steiger, and Szemeredi <ref> [ 2 ] </ref> that selection 3 can be done in O (log log n) time in Valiant's parallel comparison tree model with n processors. The selection steps of our algorithm are implemented in this model. All the other steps can be implemented on a CRCW-PRAM.
Reference: [3] <author> N. Alon and N. Megiddo, </author> <title> "Parallel linear programming in fixed dimension almost surely in constant time," </title> <journal> J. </journal> <note> ACM 41 (1994) 422-434. </note>
Reference-contexts: Deng [ 5 ] gave an O (log n) algorithm with n= log n processors for the case d = 2. It was not known previously whether the problem can be solved in o (log n) time with n processors for any d &gt; 1. Alon and Megiddo <ref> [ 3 ] </ref> showed, however, that on a probabilistic CRCW-PRAM with n processors the problem can be solved by a Las Vegas algorithm almost surely in constant time.
Reference: [4] <author> K. L. Clarkson, </author> <title> "Linear programming in O(n fi 3 d 2 ) time," </title> <note> Information Processing Letters 22 (1986) 21-27. </note>
Reference-contexts: One important case is when the number of variables (the dimension) d is fixed while the number of inequalities n grows. Megiddo [ 11 ] showed that this problem can be solved in O (n) time for any fixed d. Clarkson <ref> [ 4 ] </ref> and Dyer [ 8 ] improved the dependence of the constant on d. The general search technique proposed in [ 11 ] provides poly-logarithmic algorithms with n processors for any fixed d (see [ 12 ] ).
Reference: [5] <author> X. Deng, </author> <title> "An optimal parallel algorithm for linear programming in the plane," </title> <note> Information Processing Letters 35 (1990) 213-217. </note>
Reference-contexts: Clarkson [ 4 ] and Dyer [ 8 ] improved the dependence of the constant on d. The general search technique proposed in [ 11 ] provides poly-logarithmic algorithms with n processors for any fixed d (see [ 12 ] ). Deng <ref> [ 5 ] </ref> gave an O (log n) algorithm with n= log n processors for the case d = 2. It was not known previously whether the problem can be solved in o (log n) time with n processors for any d &gt; 1. <p> The selection steps of our algorithm are implemented in this model. All the other steps can be implemented on a CRCW-PRAM. Deng <ref> [ 5 ] </ref> gave a parallel algorithm which runs in O (log n) time, using O (n= log n) processors.
Reference: [6] <author> D. Dobkin, R. J. Lipton, and S. Reiss, </author> <title> "Linear programming is log space hard for P," </title> <note> Information Processing Letters 8 (1979) 96-97. </note>
Reference-contexts: 1. Introduction The general linear programming problem is known to be P-complete <ref> [ 6 ] </ref> so it is interesting to investigate the parallel complexity of special cases. One important case is when the number of variables (the dimension) d is fixed while the number of inequalities n grows.
Reference: [7] <author> M. E. Dyer, </author> <title> "Linear time algorithms for two- and three-variable linear programs," </title> <journal> SIAM J. Comput. </journal> <month> 13 </month> <year> (1984) </year> <month> 31-45. </month>
Reference-contexts: Any two-variable linear programming problem can be reduced to this form in O (log log n) time with n processors. The algorithm proposed by Dyer <ref> [ 7 ] </ref> and Megiddo [ 10 ] provides a method of discarding 1=4 of the set of constraints with an effort of computing one median and two maxima in sets of at most n elements. <p> All the other steps can be implemented on a CRCW-PRAM. Deng [ 5 ] gave a parallel algorithm which runs in O (log n) time, using O (n= log n) processors. In fact, his algorithm applies the procedure of <ref> [ 7; 10 ] </ref> until the number of remaining constraints allows for computation of the entire convex hull in O (log n) time with O (n= log n) processors. Such an approach cannot yield an o (log n) time bound. <p> In order to satisfy the latter condition, we start the algorithm by running a constant number of iterations of the algorithm of <ref> [ 7; 10 ] </ref> , where 1=4 of the set of constraints is discarded in each iteration. This constant number is determined from t (n) = (p=n) 1=(c+1) &gt; 8, i.e., n=p &lt; 8 c1 and the number is log 3=4 8 c1 .
Reference: [8] <author> M. E. Dyer, </author> <title> "On a multidimensional search technique and its application to the Euclidean one-center problem," </title> <journal> SIAM J. Comput. </journal> <month> 15 </month> <year> (1986) </year> <month> 725-738. </month>
Reference-contexts: One important case is when the number of variables (the dimension) d is fixed while the number of inequalities n grows. Megiddo [ 11 ] showed that this problem can be solved in O (n) time for any fixed d. Clarkson [ 4 ] and Dyer <ref> [ 8 ] </ref> improved the dependence of the constant on d. The general search technique proposed in [ 11 ] provides poly-logarithmic algorithms with n processors for any fixed d (see [ 12 ] ).
Reference: [9] <author> O. Gabber and Z. Galil, </author> <title> "Explicit Construction of Linear-Sized Superconcentrators" J. </title> <institution> Comput. Sys. Sci. </institution> <month> 22 </month> <year> (1981) </year> <month> 407-420. </month>
Reference-contexts: Definition 2.1. A graph G = (V; E) is called an expander with expansion coefficient ff if for every S V such that jSj 1 2 jV j, we have jN 1 (S)j ffjSj. The work of Gabber and Galil <ref> [ 9 ] </ref> provides for every n = m 2 , m = 1; 2; :::, an explicit construction of a 6-regular graph which is a 1:03-expander. <p> As we have noted already an explicit construction for such a graph is given in <ref> [ 9 ] </ref> . In section 6 we describe how the construction can be carried out on a CRCW P RAM with n processors in a constant number of steps where each processor can perform arithmetic operations on numbers not greater than n. <p> We now describe how can we handle certain specific problems in this model. Expander graphs. The expander graphs that we use were constructed by Gabber and Galil and are described in <ref> [ 9 ] </ref> . If n = m 2 , then the vertices of the graph are ordered pairs of positive integers (i; j) where 0 i; j &lt; m. <p> Proof: The results of Gabber and Galil <ref> [ 9 ] </ref> imply that there is an integer d &gt; 1 and there is exists an explicit construction (for every m) of an m fi m symmetric matrix D with nonnegative integer entries such that: (i) d is an eigenvalue of D, and the only eigenvector with eigenvalue d is
Reference: [10] <author> N. Megiddo, </author> <title> "Linear-time algorithms for linear programming in R 3 and related problems," </title> <journal> SIAM J. Comput. </journal> <volume> 12 (1983) 759-776. </volume> <pages> 33 </pages>
Reference-contexts: Any two-variable linear programming problem can be reduced to this form in O (log log n) time with n processors. The algorithm proposed by Dyer [ 7 ] and Megiddo <ref> [ 10 ] </ref> provides a method of discarding 1=4 of the set of constraints with an effort of computing one median and two maxima in sets of at most n elements. <p> All the other steps can be implemented on a CRCW-PRAM. Deng [ 5 ] gave a parallel algorithm which runs in O (log n) time, using O (n= log n) processors. In fact, his algorithm applies the procedure of <ref> [ 7; 10 ] </ref> until the number of remaining constraints allows for computation of the entire convex hull in O (log n) time with O (n= log n) processors. Such an approach cannot yield an o (log n) time bound. <p> Since f + (x) and f + (x) f (x) are convex, we can test any value of x with at most three computations of a maximum in a set of cardinality n (see <ref> [ 10 ] </ref> ), and conclude with one of the following possibilities: (i) the problem has no feasible solution, (ii) x is an optimal solution, (iii) if x fl is an optimal solution, then x fl &gt; x, (iv) if x fl is an optimal solution, then x fl &lt; x. <p> In order to satisfy the latter condition, we start the algorithm by running a constant number of iterations of the algorithm of <ref> [ 7; 10 ] </ref> , where 1=4 of the set of constraints is discarded in each iteration. This constant number is determined from t (n) = (p=n) 1=(c+1) &gt; 8, i.e., n=p &lt; 8 c1 and the number is log 3=4 8 c1 .
Reference: [11] <author> N. Megiddo, </author> <title> "Linear programming in linear time when the dimension is fixed," </title> <journal> J. </journal> <note> ACM 31 (1984) 114-127. </note>
Reference-contexts: 1. Introduction The general linear programming problem is known to be P-complete [ 6 ] so it is interesting to investigate the parallel complexity of special cases. One important case is when the number of variables (the dimension) d is fixed while the number of inequalities n grows. Megiddo <ref> [ 11 ] </ref> showed that this problem can be solved in O (n) time for any fixed d. Clarkson [ 4 ] and Dyer [ 8 ] improved the dependence of the constant on d. The general search technique proposed in [ 11 ] provides poly-logarithmic algorithms with n processors for <p> Megiddo <ref> [ 11 ] </ref> showed that this problem can be solved in O (n) time for any fixed d. Clarkson [ 4 ] and Dyer [ 8 ] improved the dependence of the constant on d. The general search technique proposed in [ 11 ] provides poly-logarithmic algorithms with n processors for any fixed d (see [ 12 ] ). Deng [ 5 ] gave an O (log n) algorithm with n= log n processors for the case d = 2. <p> The testing algorithm that we use to select the required stripe is described in detail in <ref> [11; section 4, pp. 123-126] </ref>. <p> First, as explained in <ref> [ 11 ] </ref> , a linear programming algorithm for problems with d 1 variables can be used as an oracle for deciding the position of the set of optimal solutions, if any, relative to any given hyperplane. More precisely, it can be used to solve the following problem: Problem 5.1.
Reference: [12] <author> N. Megiddo, </author> <title> "Dynamic location problems," </title> <note> Annals of Operations Research 6 (1986) 313-319. </note>
Reference-contexts: Clarkson [ 4 ] and Dyer [ 8 ] improved the dependence of the constant on d. The general search technique proposed in [ 11 ] provides poly-logarithmic algorithms with n processors for any fixed d (see <ref> [ 12 ] </ref> ). Deng [ 5 ] gave an O (log n) algorithm with n= log n processors for the case d = 2. It was not known previously whether the problem can be solved in o (log n) time with n processors for any d &gt; 1.
Reference: [13] <author> R. M. Tanner, </author> <title> "Explicit concentrators from generalized N-gons," </title> <journal> SIAM J. Alg. Disc. Meth. </journal> <month> 5 </month> <year> (1984) </year> <month> 287-293. </month>
References-found: 13

