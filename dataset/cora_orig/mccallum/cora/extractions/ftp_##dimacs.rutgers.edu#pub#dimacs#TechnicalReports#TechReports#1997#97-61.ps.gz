URL: ftp://dimacs.rutgers.edu/pub/dimacs/TechnicalReports/TechReports/1997/97-61.ps.gz
Refering-URL: http://www.cs.rutgers.edu/~allender/publications/
Root-URL: http://www.cs.rutgers.edu
Email: allender@cs.rutgers.edu  arvind@imsc.ernet.in  meena@imsc.ernet.in  
Author: Eric Allender ; V Arvind Meena Mahajan 
Keyword: Arithmetic Complexity, Kleene Closure, and Formal Power Series  
Address: Piscataway, NJ 08855  C.I.T. Campus Chennai 600 113, India  C.I.T. Campus Chennai 600 113, India  Chennai, India.  
Affiliation: Department of Computer Science Rutgers University Hill Center, Busch Campus  The Institute of Mathematical Sciences  The Institute of Mathematical Sciences  scholar at The Institute of Mathematical Sciences,  
Note: by  2 Some of this work was performed while a visiting  Supported in part by NSF grant CCR-9509603. DIMACS is a partnership of Rutgers University, Princeton University, AT&T Labs, Bellcore, and Bell Labs. DIMACS is an NSF Science and Technology Center, funded under contract STC-91-19999; and also receives support from the New Jersey Commission on Science and Technology.  
Abstract: DIMACS Technical Report 97-61 September 1997 
Abstract-found: 1
Intro-found: 1
Reference: [AAD97] <author> M. Agrawal, E. Allender, and S. Datta, </author> <title> On TC 0 , AC 0 , and Arithmetic Circuits, </title> <booktitle> in Proc. 12th Annual IEEE Conference on Computational Complexity, </booktitle> <year> 1997, </year> <pages> pp. 134-148. </pages>
Reference-contexts: For instance, computing the determinant of integer matrices is complete for GapL (see [To91, Vi91, MV97]); and GapNC 1 was also shown to have natural complete sets in [CMTV96]. Another reason for interest in these classes was provided in <ref> [AAD97] </ref>: #AC 0 and GapAC 0 were shown to characterize TC 0 . <p> This completes the proof. Our initial interest when beginning this study was to see if the use of formal power series could aid in our understanding of the class GapAC 0 , which in turn provides an alternative characterization of threshold circuit classes <ref> [AAD97] </ref>.
Reference: [B89] <author> D.A. Barrington, </author> <title> Bounded-width polynomial size branching programs recognize exactly those languages in NC 1 , Journal of Computer and System Sciences 38 (1989), </title> <type> 150-164. </type>
Reference-contexts: The next observation is concerning the proof of Theorem 5.4. Recall from <ref> [B89] </ref> that a hard problem for NC 1 is the word problem over the nonsolvable group S 6 . 2 It is not hard to see from the proof of Theorem 5.4 that there is a finite language A fl , for a suitable , such that the word problem over <p> We show in this section that such a classification is possible, closely following the pattern of results relating the structure of finite monoids to the internal structure of NC 1 <ref> [B89, BT88] </ref>. We study the Kleene closure of finite languages in the setting of finite monoids. <p> Proof. Since A is a nonsolvable monoid, A contains a nontrivial nonsolvable group G with identity e 0 . 4 Since the word problem over G is NC 1 -complete <ref> [B89] </ref>, it suffices to show an AC 0 reduction from the word problem over G to an appropriate A F;r star closure problem. <p> To complete the proof, note that to check if z 2 T est, we can easily design an AC 0 circuit with oracle nodes that query the word problem W . The following corollary is an immediate consequence of the above theorem and the results of <ref> [B89, BT88] </ref>. Corollary 6.5 If A is a solvable monoid then the (A F;r ) fl closure problem is in ACC. Furthermore, if A is an aperiodic monoid then the (A F;r ) fl closure problem is in AC 0 .
Reference: [BT88] <author> D.A. Barrington and D. Therien, </author> <title> Finite monoids and the fine structure of NC 1 , Journal of the Association of Computing Machinery 35 (1988), </title> <type> 941-952. </type>
Reference-contexts: We show in this section that such a classification is possible, closely following the pattern of results relating the structure of finite monoids to the internal structure of NC 1 <ref> [B89, BT88] </ref>. We study the Kleene closure of finite languages in the setting of finite monoids. <p> To complete the proof, note that to check if z 2 T est, we can easily design an AC 0 circuit with oracle nodes that query the word problem W . The following corollary is an immediate consequence of the above theorem and the results of <ref> [B89, BT88] </ref>. Corollary 6.5 If A is a solvable monoid then the (A F;r ) fl closure problem is in ACC. Furthermore, if A is an aperiodic monoid then the (A F;r ) fl closure problem is in AC 0 .
Reference: [BCH86] <author> P.W. Beame, S.A. Cook and H. J. </author> <title> Hoover, Log-depth circuits for division and related problems, </title> <note> SIAM Journal on Computing 15 (1986) 994-1003. </note>
Reference-contexts: Both h (w) and H (jwj) are computable in GapL. (In fact, H (jwj) is computable in GapAC 0 .) To compute f (w), we need to divide h (w) by H (jwj) in a uniform way. It follows from the results of Beame, Cook and Hoover <ref> [BCH86] </ref> that there is a uniform NC 1 circuit which takes as input 3 n-bit numbers M; x; y, and if M is the product of the first n 2 primes, then it outputs the n-bit number b x y c.
Reference: [BC92] <author> M Ben-Or and R. Cleve, </author> <title> Computing algebraic formulas using a constant number of registers, </title> <note> SIAM Journal on Computing 21 (1992) 54-58. </note>
Reference-contexts: GapNC 1 under AC 0 reductions. (c) (for all r &gt; 1) computing the rth root of the formal power series A is hard for GapNC 1 under (nonuniform) NC 1 reductions. - 10 - Proof. (a) As is pointed out in [CMTV96][Theorem 3.2], it follows from the construction of <ref> [BC92] </ref> that every function in GapNC 1 can be reduced to the problem of finding the (1,1) entry of the result of multiplying together a sequence of 3-by-3 integer matrices, and this problem is in turn reducible to taking the difference of two functions in width-six #BP.
Reference: [BR84] <author> J. Berstel and C. Reutenauer, </author> <title> Rational Series and Their Languages, </title> <booktitle> EATCS Monographs on Theoretical Computer Science 12, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1984. </year>
Reference-contexts: subclasses of NC 1 and classes of regular sets ([MPT91]), might it be possible to say something useful about these classes by investigating formal power series corresponding to regular sets? The characteristic function of any regular set is given by a "rational" formal power series over the integers. (See, e.g., <ref> [SS78, BR84] </ref>.) Thus the following result indicates that by considering only regular sets, it might be possible to study at least the class GapNC 1 . Theorem 5.3 Let g be an invertible rational formal power series over the integers. <p> that computing the coefficient of a word w in a series can be performed by multiplying together O (jwj) k-by-k integer matrices, where k depends on the series, but does not depend on w. (For these and other basic facts about formal power series, please consult a text such as <ref> [SS78, BR84] </ref>.) It is observed in [CMTV96] that all functions that can be reduced to iterated multiplication of O (1)-by-O (1) matrices are in GapNC 1 . This completes the proof.
Reference: [Gin75] <author> S. Ginsburg, </author> <title> Algebraic and Automata-Theoretic Properties of Formal Languages, </title> <publisher> North Holland, </publisher> <address> Amsterdam, </address> <year> 1975. </year>
Reference-contexts: 1 Introduction Studying the complexity of languages viewed as formal power series over appropriate algebras has been a well-established paradigm in formal language theory; see, for instance, the texts by Salomaa and Soittola, and by Ginsburg <ref> [SS78, Gin75] </ref>. In [Li92], Li examined the complexity classes FP, #P and GapP in a similar framework. A formal power series is said to be computable in a complexity class C if the coefficient of any string in the series can be computed within C.
Reference: [Li92] <author> L. Li, </author> <title> Formal Power Series: An Algebraic Approach to the GapP and #P Functions, </title> <booktitle> Proc. 7th Structure in Complexity Theory Conference (1992) pp. </booktitle> <pages> 144-154. </pages>
Reference-contexts: 1 Introduction Studying the complexity of languages viewed as formal power series over appropriate algebras has been a well-established paradigm in formal language theory; see, for instance, the texts by Salomaa and Soittola, and by Ginsburg [SS78, Gin75]. In <ref> [Li92] </ref>, Li examined the complexity classes FP, #P and GapP in a similar framework. A formal power series is said to be computable in a complexity class C if the coefficient of any string in the series can be computed within C. <p> We note that to capture the hardness of GapL, determinants of matrices having a special structure suffice. The special structure we consider is that of extended lower triangular (elt) matrices, which arose in <ref> [Li92] </ref> in the context of inverting formal power series. It is thus useful in proving the results of Sections 4 and 5. A matrix M is said to be elt if A i;j = 0 whenever j &gt; i + 1. <p> Proof. We prove the theorem for the permanent of elt matrices. The result for determinant follows from the many-one equivalence of permanent and determinant for elt matrices (this equivalence is implicit in Lemma 4.7 of <ref> [Li92] </ref> where only the reduction from permanent to determinant is claimed). <p> To simplify the statement of the results that follow, we will consider for the moment only those f with f (*) = 1. Lemma 4.1 (Lemmas 4.2, 4.6, 4.7 and Theorem 4.8 in <ref> [Li92] </ref>) Let g be a formal power series with g (*) = 1. <p> Such an f is not in GL at all. (For example, consider g given by g (*) = g (a) = 1, and g (w) = 0 otherwise.) We show some upper bounds on the complexity of computing f in such cases. - 5 - Lemma 4.3 (Lemma 5.5 in <ref> [Li92] </ref>) Let f be a formal power series, and let g = f r for some positive integer r.
Reference: [CMTV96] <author> H. Caussinus, P. McKenzie, D. Therien, and H. Vollmer. </author> <title> Nondeterministic NC 1 computation. </title> <booktitle> In Proceedings, 11th Annual IEEE Conference on Computational Complexity, </booktitle> <pages> pages 12-21, </pages> <year> 1996. </year>
Reference-contexts: Why do we care about these arithmetic circuit classes? One reason is because they characterize natural and important problems. For instance, computing the determinant of integer matrices is complete for GapL (see [To91, Vi91, MV97]); and GapNC 1 was also shown to have natural complete sets in <ref> [CMTV96] </ref>. Another reason for interest in these classes was provided in [AAD97]: #AC 0 and GapAC 0 were shown to characterize TC 0 . <p> word w in a series can be performed by multiplying together O (jwj) k-by-k integer matrices, where k depends on the series, but does not depend on w. (For these and other basic facts about formal power series, please consult a text such as [SS78, BR84].) It is observed in <ref> [CMTV96] </ref> that all functions that can be reduced to iterated multiplication of O (1)-by-O (1) matrices are in GapNC 1 . This completes the proof.
Reference: [MV97] <author> M. Mahajan and V Vinay. </author> <title> Determinant: Combinatorics, Algorithms, and Complexity. submitted for publication. Preliminary version in Proc. </title> <booktitle> Eighth Annual ACM-SIAM Symposium on Discrete Algorithms SODA 97, </booktitle> <pages> 730-738. </pages>
Reference-contexts: Why do we care about these arithmetic circuit classes? One reason is because they characterize natural and important problems. For instance, computing the determinant of integer matrices is complete for GapL (see <ref> [To91, Vi91, MV97] </ref>); and GapNC 1 was also shown to have natural complete sets in [CMTV96]. Another reason for interest in these classes was provided in [AAD97]: #AC 0 and GapAC 0 were shown to characterize TC 0 . <p> Then the coefficients of the polynomial det (B) are computable in GapL. Proof Sketch. To show that the determinant over integers can be computed in GapL, the determinant problem is reduced to counting paths in a DAG <ref> [To91, Vi91, MV97] </ref>. An easy modification of the DAG construction allows us to generalize this to polynomials where the - 3 - coefficients are given explicitly: the contributions to different monomials are maintained in different nodes. The DAG width expands by a factor of n 2 .
Reference: [MPT91] <author> P. McKenzie, P. Peladeau, and D. Therien. </author> <title> NC 1 : The automata-theoretic viewpoint. </title> <journal> Computational Complexity, </journal> <volume> 1 </volume> <pages> 330-359, </pages> <year> 1991. </year> <month> - 15 </month> - 
Reference: [Mo75] <author> B. Monien, </author> <title> About the deterministic simulation of nondeterministic (log n)-tape bounded Turing machines. </title> <booktitle> In Proc. 2nd GI Conference, Lecture Notes in Computer Science 33, </booktitle> <year> 1975, </year> <pages> pp. 118-126. </pages>
Reference-contexts: Theorem 5.5 Let C be any class of languages closed under AC 0 reducibility and contained in NLOG. Then C is closed under the Kleene * operation if and only if NLOG = C. (This may be seen as a slight generalization of a result in <ref> [Mo75] </ref>, where a result of this form is proved for C= DLOG.) Proof. One direction is immediate since NLOG is closed under the * operation.
Reference: [RA97] <author> K. Reinhardt and E. Allender. </author> <title> Making Nondeterminism Unambiguous. </title> <booktitle> to appear in Proc. 38th IEEE Conference on Foundations of Computer Science 97. </booktitle>
Reference-contexts: It turns out that formal power se ries which are characteristic functions of LogDCFL languages are invertible in GapLogCFL. For LogCFL languages, the same inclusion holds in a non-uniform setting; we do not know how to make it uniform, as it relies on the disambiguating construction of <ref> [RA97] </ref>. It is open if there is a corresponding hardness result. * Finally, for formal power series which are characteristic functions of (deterministic) context-sensitive languages, the inverses and roots can be computed in DSPACE (n) and NSPACE (n) respectively.
Reference: [SS78] <author> A. Salomaa, M. Soittola, </author> <title> Automata-Theoretic Aspects of Formal Power Series, </title> <publisher> Springer-Verlag, </publisher> <year> 1978. </year>
Reference-contexts: 1 Introduction Studying the complexity of languages viewed as formal power series over appropriate algebras has been a well-established paradigm in formal language theory; see, for instance, the texts by Salomaa and Soittola, and by Ginsburg <ref> [SS78, Gin75] </ref>. In [Li92], Li examined the complexity classes FP, #P and GapP in a similar framework. A formal power series is said to be computable in a complexity class C if the coefficient of any string in the series can be computed within C. <p> subclasses of NC 1 and classes of regular sets ([MPT91]), might it be possible to say something useful about these classes by investigating formal power series corresponding to regular sets? The characteristic function of any regular set is given by a "rational" formal power series over the integers. (See, e.g., <ref> [SS78, BR84] </ref>.) Thus the following result indicates that by considering only regular sets, it might be possible to study at least the class GapNC 1 . Theorem 5.3 Let g be an invertible rational formal power series over the integers. <p> that computing the coefficient of a word w in a series can be performed by multiplying together O (jwj) k-by-k integer matrices, where k depends on the series, but does not depend on w. (For these and other basic facts about formal power series, please consult a text such as <ref> [SS78, BR84] </ref>.) It is observed in [CMTV96] that all functions that can be reduced to iterated multiplication of O (1)-by-O (1) matrices are in GapNC 1 . This completes the proof.
Reference: [To91] <author> S. </author> <title> Toda. Counting Problems Computationally Equivalent to the Determinant, </title> <type> manuscript. </type>
Reference-contexts: Why do we care about these arithmetic circuit classes? One reason is because they characterize natural and important problems. For instance, computing the determinant of integer matrices is complete for GapL (see <ref> [To91, Vi91, MV97] </ref>); and GapNC 1 was also shown to have natural complete sets in [CMTV96]. Another reason for interest in these classes was provided in [AAD97]: #AC 0 and GapAC 0 were shown to characterize TC 0 . <p> Then the coefficients of the polynomial det (B) are computable in GapL. Proof Sketch. To show that the determinant over integers can be computed in GapL, the determinant problem is reduced to counting paths in a DAG <ref> [To91, Vi91, MV97] </ref>. An easy modification of the DAG construction allows us to generalize this to polynomials where the - 3 - coefficients are given explicitly: the contributions to different monomials are maintained in different nodes. The DAG width expands by a factor of n 2 .
Reference: [Ven92] <author> H. Venkateswaran. </author> <title> Circuit definitions of nondeterministic complexity classes. </title> <journal> SIAM Journal on Computing, </journal> <volume> 21 </volume> <pages> 655-670, </pages> <year> 1992. </year>
Reference-contexts: The well-known complexity classes NLOG and LogCFL also can be characterized in terms of classes of circuits <ref> [Ven92] </ref>. Of particular interest to us here are the classes of functions that result from "arithmetizing" the classes AC 0 , NC 1 , NLOG, and LogCFL by replacing each AND (OR) gate by a multiplication (addition) gate over the natural numbers.
Reference: [Vi91] <author> V Vinay. </author> <title> Semi-unboundedness and complexity classes, </title> <type> doctoral dissertation, </type> <institution> Indian Institute of Science, Bangalore, </institution> <month> July </month> <year> 1991. </year>
Reference-contexts: Why do we care about these arithmetic circuit classes? One reason is because they characterize natural and important problems. For instance, computing the determinant of integer matrices is complete for GapL (see <ref> [To91, Vi91, MV97] </ref>); and GapNC 1 was also shown to have natural complete sets in [CMTV96]. Another reason for interest in these classes was provided in [AAD97]: #AC 0 and GapAC 0 were shown to characterize TC 0 . <p> Then the coefficients of the polynomial det (B) are computable in GapL. Proof Sketch. To show that the determinant over integers can be computed in GapL, the determinant problem is reduced to counting paths in a DAG <ref> [To91, Vi91, MV97] </ref>. An easy modification of the DAG construction allows us to generalize this to polynomials where the - 3 - coefficients are given explicitly: the contributions to different monomials are maintained in different nodes. The DAG width expands by a factor of n 2 .
References-found: 17

