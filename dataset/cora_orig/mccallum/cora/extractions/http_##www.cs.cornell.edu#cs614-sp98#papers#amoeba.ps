URL: http://www.cs.cornell.edu/cs614-sp98/papers/amoeba.ps
Refering-URL: http://www.cs.cornell.edu/cs614-sp98/Readings.html
Root-URL: http://www.cs.brown.edu/
Email: Internet: ast@cs.vu.nl, cogito@cs.vu.nl, sater@cs.vu.nl, gregor@cs.vu.nl  Internet: sape@cwi.nl, jack@cwi.nl, guido@cwi.nl  
Title: Experiences with the Amoeba Distributed Operating System  
Author: Andrew S. Tanenbaum Robbert van Renesse Hans van Staveren Gregory J. Sharp Sape J. Mullender Jack Jansen Guido van Rossum 
Keyword: Computing Reviews categories: C.2.4, D.4 Keywords: Operating systems, Distributed systems, Distributed operating systems, Computer networks, Experience Descriptors: Network operating systems, Distributed applications, Distributed systems, Measurements General terms: Design, Experimentation, Performance  
Note: 333333333333333 (N.W.O.) under grant 125-30-10.  
Address: 1081 HV Amsterdam, The Netherlands  Kruislaan 413 1098 SJ Amsterdam, The Netherlands  
Affiliation: Dept. of Mathematics and Computer Science Vrije Universiteit De Boelelaan 1081  Centrum voor Wiskunde en Informatica  
Abstract: The Amoeba distributed operating system has been in development and use for over eight years now. In this paper we describe the present system and our experience with itwhat we did right, but also what we did wrong. Among the things done right were basing the system on objects, using a single uniform mechanism (capabilities) for naming and protecting them in a location independent way, and designing a completely new, and very fast file system. Among the things done wrong were having threads not be pre-emptable, initially building our own homebrew window system, and not having a multicast facility at the outset. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Accetta, M., Baron, R., Bolosky W., Golub, D., Rashid, R., Tevanian, A., and Young, M. </author> <title> Mach: A New Kernel Foundation for UNIX Development. </title> <booktitle> Proceedings of the Summer Usenix Conference , Atlanta, </booktitle> <address> GA, </address> <month> July </month> <year> 1986. </year>
Reference-contexts: We are researching the problems of authentication in very large systems spanning multiple organizations and national boundaries. COMPARISON WITH OTHER SYSTEMS Amoeba is not the only distributed system in the world. Other well-known ones include Mach <ref> [1] </ref>, Chorus [21], V [6], and Sprite [18]. Although a comprehensive comparison of Amoeba with these would no doubt be very interesting, it is beyond the scope of this paper. Nevertheless, we would like to make a few general remarks.
Reference: [2] <author> Baalbergen, E.H, Verstoep, K., and Tanenbaum, </author> <title> A.S. On the Design of the Amoeba Configuration Manager. </title> <booktitle> Proc. 2nd Int'l Workshop on Software Config. Mgmt., ACM, </booktitle> <year> 1989. </year>
Reference-contexts: When multiple yaccs are running in the same directory, they all write to the same file, thus producing gibberish. All of these problems have been dealt with by one means or another, as described in <ref> [2] </ref>. The parallel compilations are directed by a new version of make , called amake . Amake does not use traditional makefiles. Instead, the user tells it which source files are needed, but not their dependencies.
Reference: [3] <author> Bal, H.E., Van Renesse, R., and Tanenbaum, </author> <title> A.S. Implementing Distributed Algorithms using Remote Procedure Call. </title> <booktitle> Proc. Nat. Comp. Conf. , AFIPS, </booktitle> <year> 1987. </year> <pages> pp. 499-505. </pages>
Reference-contexts: The Traveling Salesman Problem In addition to various experiments with the UNIX software, we have also tried programming some applications in parallel. Typical applications are the traveling salesman problem [13] and alpha-beta search [14] We briefly describe these below. More details can be found in <ref> [3] </ref>. In the traveling salesman problem, the computer is given a starting location and a list of cities to be visited. The idea is to find the shortest path that visits each city exactly once, and then return to the starting place.
Reference: [4] <author> Bal, H.E., and Tanenbaum, </author> <title> A.S. Distributed Programming with Shared Data, </title> <booktitle> IEEE Conf. on Computer Languages , IEEE, </booktitle> <year> 1988, </year> <pages> pp. 82-91. - 27 </pages> - 
Reference-contexts: That is, we have become much more interested in using the processor pool to achieve large speedups on a single problem. To program these parallel applications, we are currently engaged in implementing a language called Orca <ref> [4] </ref>. Orca is based on the concept of globally shared objects. Programmers can define operations on shared objects, and the compiler and run time system take care of all the details of making sure they are carried out correctly.
Reference: [5] <author> Birrell, A.D., and Nelson, B.J. </author> <title> Implementing Remote Procedure Calls, </title> <journal> ACM Trans. Com-put. Systems 2, </journal> <month> (Feb. </month> <pages> 1984) pp. 39-59. </pages>
Reference-contexts: From the user's perspective, the function of the operating system is to create an environment in which objects can be created and manipulated in a protected way. This object-based model visible to the users is implemented using remote procedure call <ref> [5] </ref> Associated with each object is a server process that manages the object. When a user process wants to perform an operation on an object, it sends a request message to the server that manages the object. <p> Different data representations in client and server also have to be handled. All of these steps must be carefully designed and coded, lest they introduce unacceptable overhead. To hide the marshalling and message passing from the users, Amoeba uses stub routines <ref> [5] </ref>. For example, one of the file system stubs might start with: int read3file (file3cap, offset, nbytes, buffer, bytes3read) capability3t *file3cap; long offset; long *nbytes; char *buffer; long *bytes3read; This call reads nbytes starting at offset from the file identified by file3cap into buffer. <p> Latency and throughput for some systems reported in the literature. The RPC numbers for the other systems listed in Fig. 6. are taken from the following publications: Cedar <ref> [5] </ref>, x-Kernel [19], Sprite [18], V [6], Topaz [22], and Mach [19]. The numbers shown here cannot be compared without knowing about the systems from which they were taken, as the speed of the hardware on which the tests were made varies by about a factor of 3.
Reference: [6] <author> Cheriton, </author> <title> D.R. The V Distributed System. </title> <journal> Comm. ACM 31, </journal> <month> (March </month> <year> 1988), </year> <pages> pp. 314-333. </pages>
Reference-contexts: Latency and throughput for some systems reported in the literature. The RPC numbers for the other systems listed in Fig. 6. are taken from the following publications: Cedar [5], x-Kernel [19], Sprite [18], V <ref> [6] </ref>, Topaz [22], and Mach [19]. The numbers shown here cannot be compared without knowing about the systems from which they were taken, as the speed of the hardware on which the tests were made varies by about a factor of 3. <p> We are researching the problems of authentication in very large systems spanning multiple organizations and national boundaries. COMPARISON WITH OTHER SYSTEMS Amoeba is not the only distributed system in the world. Other well-known ones include Mach [1], Chorus [21], V <ref> [6] </ref>, and Sprite [18]. Although a comprehensive comparison of Amoeba with these would no doubt be very interesting, it is beyond the scope of this paper. Nevertheless, we would like to make a few general remarks.
Reference: [7] <author> Dalal, Y.K. </author> <title> Broadcast Protocols in Packet Switched Computer Networks. </title> <type> Ph.D. Thesis, </type> <institution> Stanford Univ., </institution> <year> 1977. </year>
Reference-contexts: The server responds to this broadcast with its address, which is then used and also cached for future RPCs. This strategy is undesirable with a wide-area network. Although broadcast can be simulated using a minimum spanning tree <ref> [7] </ref> it is expensive and inefficient. Furthermore, not every service should be available worldwide. For example, a laser printer server in the physics building at a university in California may not be of much use to clients in New York.
Reference: [8] <author> Dennis, J., and Van Horn, E. </author> <title> Programming Semantics for Multiprogrammed Computation. </title> <journal> Commun. ACM 9, </journal> <month> (March </month> <year> 1966), </year> <pages> pp. 143-155. </pages>
Reference-contexts: For a file object, for example, typical operations are reading, writing, appending, and deleting. The list of allowed operations is defined by the person who designs the object and who writes the code to implement it. Both hardware and software objects exist. Associated with each object is a capability <ref> [8] </ref> a kind of ticket or key that allows the holder of the capability to perform some (not necessarily all) operations on that object. A user process might, for example, have a capability for a file that permitted it to read the file, but not to modify it.
Reference: [9] <author> Evans, A., Kantrowitz, W., and Weiss, E. </author> <title> A User Authentication Scheme Not Requiring Secrecy in the Computer. </title> <journal> Commun. ACM 17, </journal> <month> (Aug. </month> <year> 1974), </year> <pages> pp. 437-442. </pages>
Reference-contexts: Such functions are known <ref> [9] </ref>. When a capability arrives at a server, the server uses the object field to index into its tables to locate the information about the object. It then checks to see if all the rights bits are on.
Reference: [10] <author> Feldman, </author> <title> S.I. MakeA Program for Maintaining Computer Programs. </title> <journal> Software Practice and Experience 9, </journal> <note> (April 1979) pp. 255-265. </note>
Reference-contexts: Parallel Make As shown in Figure 1, the hardware on which Amoeba runs contains a processor pool with several dozen 68020 and 68030 processors. One obvious application for these processors in a UNIX environment is a parallel version of make <ref> [10] </ref>. The idea here is that when make - 15 - discovers that multiple compilations are needed, they are run in parallel on different processors. Although this idea sounds simple, there are several potential problems.
Reference: [11] <author> Johnson, </author> <title> S.C. Yacc Yet Another Compiler Compiler. </title> <type> Bell Labs Technical Report, </type> <institution> Bell Labs, </institution> <address> Murray Hill, NJ, </address> <year> 1978. </year>
Reference-contexts: For example, since it expects commands to be run sequentially, rather than in parallel, it does not keep track of how many processes it has forked off, which may exceed various system limits. Finally, there are programs, such as yacc <ref> [11] </ref> that write their output on fixed name files, such as y.tab.c. When multiple yaccs are running in the same directory, they all write to the same file, thus producing gibberish. All of these problems have been dealt with by one means or another, as described in [2].
Reference: [12] <author> Kaashoek, M.F., Tanenbaum, A.S., Flynn Hummel, S., and Bal, </author> <title> H.E. An Efficient Reliable Broadcast Protocol. </title> <journal> Operating Systems Review , vol. </journal> <volume> 23, </volume> <month> (Oct </month> <year> 1989), </year> <pages> pp. 5-19. </pages>
Reference-contexts: A higher-level protocol has been devised to implement 100% reliable multicasting on unreliable networks at essentially the same price as RPC (two messages per reliable broadcast). This protocol is described in <ref> [12] </ref>. There are many applications (e.g., replicated data bases of various kinds) for which reliable broadcasting makes life much simpler. Amoeba 5.0 will use this replication facility to support fault tolerance.
Reference: [13] <author> Lawler, E.L., and Wood, D.E. </author> <title> Branch and Bound Methods A Survey. </title> <note> Operations Research 14, </note> <month> (July </month> <year> 1966), </year> <pages> pp. 699-719. </pages>
Reference-contexts: The Traveling Salesman Problem In addition to various experiments with the UNIX software, we have also tried programming some applications in parallel. Typical applications are the traveling salesman problem <ref> [13] </ref> and alpha-beta search [14] We briefly describe these below. More details can be found in [3]. In the traveling salesman problem, the computer is given a starting location and a list of cities to be visited.
Reference: [14] <author> Marsland, T.A., and Campbell, M. </author> <title> Parallel Search of Strongly Ordered Game Trees. </title> <journal> Computing Surveys 14, </journal> <month> (Dec. </month> <year> 1982), </year> <pages> pp. 533-551. </pages>
Reference-contexts: The Traveling Salesman Problem In addition to various experiments with the UNIX software, we have also tried programming some applications in parallel. Typical applications are the traveling salesman problem [13] and alpha-beta search <ref> [14] </ref> We briefly describe these below. More details can be found in [3]. In the traveling salesman problem, the computer is given a starting location and a list of cities to be visited.
Reference: [15] <author> Mullender, S.J., van Rossum, G., Tanenbaum, A.S., van Renesse, R., van Staveren, J.M. </author> <title> Amoeba A Distributed Operating System for the 1990s. </title> <booktitle> IEEE Computer 23, </booktitle> <month> (May </month> <year> 1990), </year> <pages> pp. 44-53. </pages>
Reference-contexts: INTRODUCTION The Amoeba project is a research effort aimed at understanding how to connect multiple computers together in a seamless way <ref> [15, 16, 26, 28, 32] </ref> The basic idea is to provide the users with the illusion of a single powerful timesharing system, when, in fact, the system is implemented on a collection of machines, potentially distributed among several countries.
Reference: [16] <author> Mullender, S.J., and Tanenbaum, </author> <title> A.S. The Design of a Capability-Based Distributed Operating System. </title> <journal> Computer Journal 29, </journal> <month> (Aug. </month> <year> 1986), </year> <pages> pp. 289-299. </pages>
Reference-contexts: INTRODUCTION The Amoeba project is a research effort aimed at understanding how to connect multiple computers together in a seamless way <ref> [15, 16, 26, 28, 32] </ref> The basic idea is to provide the users with the illusion of a single powerful timesharing system, when, in fact, the system is implemented on a collection of machines, potentially distributed among several countries.
Reference: [17] <author> Mullender, S.J., and Tanenbaum, </author> <title> A.S. A Distributed File Service Based on Optimistic Concurrency Control. </title> <booktitle> Proc. Tenth Symp. Operating System Principles , (Dec. </booktitle> <year> 1985), </year> <pages> pp. 51-62. </pages>
Reference-contexts: The File Server As far as the system is concerned, a file server is just another user process. Consequently, a variety of file servers have been written for Amoeba in the course of its existence. The first one, FUSS (Free University Storage System) <ref> [17] </ref> was designed as an experiment in managing concurrent access using optimistic concurrency control. The current one, the bullet server was designed for extremely high performance [29, 31, 32]. It is this one that we will describe below.
Reference: [18] <author> Ousterhout, J.K., Cherenson, A.R., Douglis, F., Nelson, M.N., and Welch, B.B. </author> <title> The Sprite Network Operating System. </title> <booktitle> IEEE Computer 21, </booktitle> <month> (Feb. </month> <year> 1988), </year> <pages> pp. 23-26. </pages>
Reference-contexts: Latency and throughput for some systems reported in the literature. The RPC numbers for the other systems listed in Fig. 6. are taken from the following publications: Cedar [5], x-Kernel [19], Sprite <ref> [18] </ref>, V [6], Topaz [22], and Mach [19]. The numbers shown here cannot be compared without knowing about the systems from which they were taken, as the speed of the hardware on which the tests were made varies by about a factor of 3. <p> We are researching the problems of authentication in very large systems spanning multiple organizations and national boundaries. COMPARISON WITH OTHER SYSTEMS Amoeba is not the only distributed system in the world. Other well-known ones include Mach [1], Chorus [21], V [6], and Sprite <ref> [18] </ref>. Although a comprehensive comparison of Amoeba with these would no doubt be very interesting, it is beyond the scope of this paper. Nevertheless, we would like to make a few general remarks.
Reference: [19] <author> Peterson, L., Hutchinson, N., O'Malley, S., and Rao, H. </author> <title> The x-kernel: A Platform for Accessing Internet Resources. </title> <booktitle> IEEE Computer 23 (May 1990), </booktitle> <pages> pp. 23-33. </pages>
Reference-contexts: Latency and throughput for some systems reported in the literature. The RPC numbers for the other systems listed in Fig. 6. are taken from the following publications: Cedar [5], x-Kernel <ref> [19] </ref>, Sprite [18], V [6], Topaz [22], and Mach [19]. The numbers shown here cannot be compared without knowing about the systems from which they were taken, as the speed of the hardware on which the tests were made varies by about a factor of 3. <p> Latency and throughput for some systems reported in the literature. The RPC numbers for the other systems listed in Fig. 6. are taken from the following publications: Cedar [5], x-Kernel <ref> [19] </ref>, Sprite [18], V [6], Topaz [22], and Mach [19]. The numbers shown here cannot be compared without knowing about the systems from which they were taken, as the speed of the hardware on which the tests were made varies by about a factor of 3. <p> When only a single CPU is used at each end, the null RPC time increases to 4.8 msec and the throughput drops to 313 kbytes/sec. The null RPC time for Mach was obtained from a paper published in May 1990 <ref> [19] </ref> and applies to Mach 2.5, in which the networking code is in the kernel. The Mach RPC performance is worse than any of the other systems by more than a factor of 3 and is ten times slower than Amoeba.
Reference: [20] <author> Pu, C., Noe, J.D., Proudfoot, A. </author> <title> Regeneration of Replicated Objects: A Technique and its - 28 - Eden Implementation. </title> <booktitle> Proc. 2nd Int'l Conf. on Data Eng. </booktitle> , <month> (Feb. </month> <year> 1986), </year> <pages> pp. 175-187. </pages>
Reference-contexts: Thus when a process looks up an object, it can retrieve the entire set of capabilities for all the copies. If one of the objects is unavailable, the other ones can be tried. The technique is similar to the one Eden used <ref> [20] </ref>. In addition, when a new object is installed in a directory, an option is available to have the directory server itself request copies to be made, and then store all the capabilities, thus freeing the user from this administration.
Reference: [21] <author> Rozier. M, Abrossimov. V, Armand. F, Boule. I, Gien. M, Guillemont. M, Hermann. F, Kaiser. C, Langlois. S, Leonard, P., and Neuhauser. W. </author> <title> CHORUS Distributed Operating System. </title> <booktitle> Computing Systems 1 (Fall 1988), </booktitle> <pages> pp. 299-328. </pages>
Reference-contexts: We are researching the problems of authentication in very large systems spanning multiple organizations and national boundaries. COMPARISON WITH OTHER SYSTEMS Amoeba is not the only distributed system in the world. Other well-known ones include Mach [1], Chorus <ref> [21] </ref>, V [6], and Sprite [18]. Although a comprehensive comparison of Amoeba with these would no doubt be very interesting, it is beyond the scope of this paper. Nevertheless, we would like to make a few general remarks.
Reference: [22] <author> Schroeder, M.D., and, Burrows, M. </author> <title> Performance of the Firefly RPC. </title> <booktitle> Proc. Twelfth ACM Symp. of Oper. Syst. Prin., ACM, </booktitle> <month> (Dec. </month> <year> 1989), </year> <pages> pp. 83-90. </pages>
Reference-contexts: Latency and throughput for some systems reported in the literature. The RPC numbers for the other systems listed in Fig. 6. are taken from the following publications: Cedar [5], x-Kernel [19], Sprite [18], V [6], Topaz <ref> [22] </ref>, and Mach [19]. The numbers shown here cannot be compared without knowing about the systems from which they were taken, as the speed of the hardware on which the tests were made varies by about a factor of 3.
Reference: [23] <author> Steiner, J.G., Neuman, C., and Schiller, J.I. </author> <title> Kerberos An Authentication Service for Open Network Systems. </title> <booktitle> Proceedings of the Usenix Winter Conference , USENIX Assoc., </booktitle> <year> (1988), </year> <pages> pp. 191-201. </pages>
Reference-contexts: This version uses one-way ciphers and, with caching of argument/result pairs, can be made to run virtually as fast as the current Amoeba. The other version makes no assumptions about the security of the underlying network or the operating system. Like MIT's Kerberos <ref> [23] </ref> it uses a trusted authentication server for key establishement and encrypts all network traffic. We intend to install both versions and investigate the effects on performance of the system. We are researching the problems of authentication in very large systems spanning multiple organizations and national boundaries.
Reference: [24] <author> Stonebraker, M. </author> <title> Operating System Support for Database Management. </title> <journal> Commun. ACM 24, </journal> <month> (July </month> <year> 1981), </year> <pages> pp. 412-418. </pages>
Reference-contexts: This situation can be contrasted - 9 - with a system like UNIX, in which there is a single file system that all applications must use, no matter how inappropriate it may be. In <ref> [24] </ref> for example, the numerous problems that UNIX creates for database systems are described at great length. In the following sections we will discuss the Amoeba memory server, process server, file server, and directory server, as examples of typical Amoeba servers. Many others exist as well.
Reference: [25] <author> Tanenbaum, </author> <title> A.S. A UNIX Clone with Source Code for Operating Systems Courses. Operating Syst. </title> <journal> Rev. </journal> <volume> 21, </volume> <month> (Jan. </month> <year> 1987), </year> <pages> pp. 20-29. </pages>
Reference-contexts: For such an environment, one needs editors, compilers, and numerous other standard software. It was decided that the easiest way to obtain this software was to emulate UNIX and then to run UNIX and MINIX <ref> [25] </ref> compilers and other utilities on top of it. <p> These improvements are discussed below. One area where little improvement is needed is portability. Amoeba started out on the 680x0 CPUs, and has been easily moved to the VAX, NS 32016 and Intel 80386. The Amoeba RPC protocol has also been implemented as part of MINIX <ref> [25] </ref> and as such is in widespread use around the world. - 21 - Objects and Capabilities On the whole, the basic ideas of an object-based system has worked well. It has given us a framework which makes it easy to think about the system.
Reference: [26] <author> Tanenbaum, A.S., Mullender, S.J., and Van Renesse, R. </author> <title> Using Sparse Capabilities in a Distributed Operating System. </title> <booktitle> Proc. Sixth International Conf. on Distr. Computer Systems, IEEE, </booktitle> <year> 1986. </year>
Reference-contexts: INTRODUCTION The Amoeba project is a research effort aimed at understanding how to connect multiple computers together in a seamless way <ref> [15, 16, 26, 28, 32] </ref> The basic idea is to provide the users with the illusion of a single powerful timesharing system, when, in fact, the system is implemented on a collection of machines, potentially distributed among several countries. <p> Security An intruder capable of tapping the network on which Amoeba runs can discover capabilities and do considerable damage. In a production environment some form of link encryption is needed to guarantee better security. Although some thought has been given to a security mechanism <ref> [26] </ref> it was not implemented in Amoeba 4.0. Two potential security systems have been designed for Amoeba 5.0. The first version can only be used in friendly environments where the network and operating system kernels can be assumed secure.
Reference: [27] <author> Tanenbaum, A.S., and Van Renesse, R. </author> <title> A Critique of the Remote Procedure Call Paradigm. </title> <booktitle> Proc. Euteco '88 (1988), </booktitle> <pages> pp. 775-783. </pages>
Reference-contexts: The combination of sending a request message, blocking, and accepting a reply message forms the remote procedure call, which can be encapsulated using stub routines, to make the entire remote operation look like a local procedure call (although see <ref> [27] </ref>). The structure of a capability is shown in Fig. 2. It is 128 bits long and contains four fields. The first field is the server port, and is used to identify the (server) process that manages the object. <p> Third, all the fields of the new 256-bit capability will be aligned at 32-bit boundaries, which potentially may give better performance. Remote Procedure Call For the most part, RPC communication is satisfactory, but sometimes it gives problems <ref> [27] </ref>. In particular, RPC is inherently master-slave and point-to-point. Sometimes both of these issues lead to problems.
Reference: [28] <author> Tanenbaum, A.S., and Van Renesse, R. </author> <title> Distributed Operating Systems. </title> <journal> Computing Surveys 17, </journal> <month> (Dec. </month> <year> 1985), </year> <pages> pp. 419-470. </pages>
Reference-contexts: INTRODUCTION The Amoeba project is a research effort aimed at understanding how to connect multiple computers together in a seamless way <ref> [15, 16, 26, 28, 32] </ref> The basic idea is to provide the users with the illusion of a single powerful timesharing system, when, in fact, the system is implemented on a collection of machines, potentially distributed among several countries.
Reference: [29] <author> Van Renesse, R. Tanenbaum, A.S., and Wilschut, A. </author> <title> The Design of a High-Performance File Server. </title> <booktitle> Proc. Ninth Int'l Conf. on Distr. Comp. Systems, IEEE, </booktitle> <year> (1989a), </year> <pages> pp. 22-27. </pages>
Reference-contexts: The first one, FUSS (Free University Storage System) [17] was designed as an experiment in managing concurrent access using optimistic concurrency control. The current one, the bullet server was designed for extremely high performance <ref> [29, 31, 32] </ref>. It is this one that we will describe below. The decrease in the cost of disk and RAM memories over the past decade has allowed us to use a radically different design from that used in UNIX and most other operating systems.
Reference: [30] <author> Van Renesse, R., Tanenbaum, A.S., Van Staveren, H., and Hall, J. </author> <title> Connecting RPC-Based Distributed Systems Using Wide-Area Networks. </title> <booktitle> Proc. Seventh Int'l Conf. on Distr. Comp. Systems , IEEE, </booktitle> <year> (1987), </year> <pages> pp. 28-34. </pages>
Reference-contexts: The key problem here is that wide-area networks are slow and unreliable, and furthermore use protocols such as X.25, TCP/IP, and OSI, in any event, not RPC. The primary goal of the wide-area - 13 - networking in Amoeba has been to achieve transparency without sacrificing performance <ref> [30] </ref>. In particular, it is undesirable that the fast local RPC be slowed down due to the existence of wide-area communication. We believe this goal has been achieved. The Amoeba world is divided up into domains , each domain being an interconnected collection of local area networks.
Reference: [31] <author> Van Renesse, R., Van Staveren, H., and Tanenbaum, </author> <title> A.S. Performance of the Amoeba Distributed Operating System. </title> <journal> SoftwarePractice and Experience 19, (March 1989b) pp. </journal> <pages> 223-234. </pages>
Reference-contexts: The first one, FUSS (Free University Storage System) [17] was designed as an experiment in managing concurrent access using optimistic concurrency control. The current one, the bullet server was designed for extremely high performance <ref> [29, 31, 32] </ref>. It is this one that we will describe below. The decrease in the cost of disk and RAM memories over the past decade has allowed us to use a radically different design from that used in UNIX and most other operating systems.
Reference: [32] <author> Van Renesse, R., Van Staveren, H., and Tanenbaum, </author> <title> A.S. Performance of the World's Fastest Distributed Operating System. </title> <booktitle> Operating Systems Review 22, </booktitle> <month> (Oct. </month> <year> 1988), </year> <pages> pp. 25-34. </pages>
Reference-contexts: INTRODUCTION The Amoeba project is a research effort aimed at understanding how to connect multiple computers together in a seamless way <ref> [15, 16, 26, 28, 32] </ref> The basic idea is to provide the users with the illusion of a single powerful timesharing system, when, in fact, the system is implemented on a collection of machines, potentially distributed among several countries. <p> The first one, FUSS (Free University Storage System) [17] was designed as an experiment in managing concurrent access using optimistic concurrency control. The current one, the bullet server was designed for extremely high performance <ref> [29, 31, 32] </ref>. It is this one that we will describe below. The decrease in the cost of disk and RAM memories over the past decade has allowed us to use a radically different design from that used in UNIX and most other operating systems. <p> Running the system on a faster CPU (but the same network) definitely improves performance, although not linearly with CPU MIPS because at some point the network saturates (although none of the systems quoted here even come close to saturating it). As an example, in an earlier paper <ref> [32] </ref> we reported a null RPC time of 1.4 msec, but this was for Sun 3/50s. The current figure of 1.1 msec is for the faster Sun 3/60s.
Reference: [33] <author> Van Rossum, G. </author> <title> AILA Class-Oriented Stub Generator for Amoeba. </title> <booktitle> Proc. of the Workshop on Experience with Distributed Systems , (J. </booktitle> <editor> Nehmer, ed.), </editor> <publisher> Springer Verlag, </publisher> <address> 1990 (in preparation). </address> - <month> 29 </month> - 
Reference-contexts: AIL (Amoeba Interface Language) is a language in which the extra information for the generation of efficient stubs can be specified, so that the AIL compiler can produce stub routines automatically <ref> [33] </ref>.
Reference: [34] <author> Welch, B.B. and Ousterhout, J.K. </author> <title> Pseudo Devices: User-Level Extensions to the Sprite File System. </title> <booktitle> Proc. Summer USENIX Conf., </booktitle> <pages> pp. 37-49, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: Sprite does not support RPC at the user level, but a close equivalent is the time to send a null message from one user process to another and get a reply, which is 4.3 msec. The user-to-user bandwidth is 170 kbytes/sec <ref> [34] </ref>. V uses a clever technique to improve the performance for short RPCs: the entire message is put in the CPU registers by the user process and taken out by the kernel for transmission.
References-found: 34

