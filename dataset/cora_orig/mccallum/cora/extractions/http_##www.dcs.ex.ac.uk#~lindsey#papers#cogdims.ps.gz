URL: http://www.dcs.ex.ac.uk/~lindsey/papers/cogdims.ps.gz
Refering-URL: http://www.dcs.ex.ac.uk/~lindsey/CompWork/index.htm
Root-URL: http://www.dcs.ex.ac.uk
Title: Cognitive Dimensions of PrologSpace  
Author: Lindsey Ford 
Keyword: Visual programming, cognitive dimensions, Prolog.  
Note: Submitted to PPIG96  
Address: Exeter EX4 4PT, UK  
Affiliation: Department of Computer Science, University of Exeter  
Email: lindsey@dcs.ex.ac.uk  
Web: http://www.dcs.ex.ac.uk/~lindsey  
Abstract: We evaluate a new visual programming system PrologSpace. The system addresses classic issues of visual interfaces: layout, shape, colour, and iconography; and those of particular concern to visual programming: multiple views (visual abstractions), synchronised views, integration of visual and textual dimensions, visual debugging, cognitive dimensions, and the problems of scale. We describe the system and examine its cognitive dimensions. We conclude that PrologSpace has a set of cognitive dimensions that seems to enhance Prolog programming and that the system provides potential for teaching Prolog.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W Citrin and J Gurka. </author> <title> Use of iconic representations for software visualization and browsing. </title> <booktitle> In Proceedings of the HCI'95 Conference. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1995. </year>
Reference-contexts: It may be worthwhile extending these differentiations to denote other characteristics. The mathematical system procedures could be denoted, for example. Or procedural icons in ProcWindow could indicate whether a procedure contains cut, fail, assert, retract, input/output, and recursive goals <ref> [1] </ref>. Finally we should like to make VisualProlog and PrologSpace available to the community (both are currently prototypes and some work needs to be done to provide them as products). 7 Acknowledgements My thanks to the University of Exeter for granting me a sabbatical period to undertake this work.
Reference: [2] <author> B Curtis, S Sheppard, E Kruesi-Bailey, and D Boehm-Davis. </author> <title> Experimental evaluation of software documentation formats. </title> <journal> Journal of Systems and Software, </journal> <volume> 9(2) </volume> <pages> 167-207, </pages> <year> 1989. </year> <month> 13 </month>
Reference-contexts: Finally we draw some conclusions. 1 2 A yardstick: The Rocket Program The Rocket program was used by Green and Petre in their comparative study [7] and was earlier used by Curtis et al <ref> [2] </ref> in a study of flowcharts and related notations. It is a small and simple program but which nevertheless is suitable for assessing important aspects of programming systems.
Reference: [3] <editor> M Eisenstadt and M Brayshaw. </editor> <title> The transparent Prolog machine (TPM): an execution model and graphical debugger for logic programming. </title> <journal> Journal of logic programming, </journal> <volume> 5(4) </volume> <pages> 277-342, </pages> <year> 1988. </year>
Reference-contexts: The ExecutionWindow shows an execution tree which is dynamically updated as the programmer steps forwards or backwards through an execution. The visual semantics of this pane bear some similarity to those of TPM <ref> [3] </ref> and are presented later. The bottom pane, ProcWindow, shows in summary form (name and arity) all the procedures in the program. PrologSpace distinguishes three groups of procedure: root, sub, and unknown. Root procedures are not called by any other procedures. Sub procedures are lower level procedures.
Reference: [4] <author> L Ford. </author> <note> Interacting in PrologSpace. Research Report Submitted to CHI'96, </note> <institution> Department of Computer Science, University of Exeter, Exeter, UK., </institution> <year> 1995. </year>
Reference-contexts: The environment enables: * program text to be consulted/reconsulted/saved to/from file, * generation of 3D visual program scenes suitable for interaction in VRML on World Wide Web <ref> [4] </ref>, * visual navigation (top-down and bottom-up), * mixed textual and visual development and editing, * execution, * visual debugging with four leash modes and a single step forward/backward facility, * access to Prolog's familiar command line interpreter which programmers can toggle forwards and backwards from if they wish, * auditing
Reference: [5] <author> L Ford. </author> <title> A visual dimension to Prolog. </title> <note> in preparation, Research Report, </note> <institution> Department of Computer Science, University of Exeter, Exeter, UK., </institution> <year> 1996. </year>
Reference-contexts: 1 Introduction PrologSpace is a visual programming system built on top of VisualProlog (a version of Prolog that provides support for X windows, widget creation and management, 3D graphics and animation, and audio <ref> [5] </ref>). PrologSpace provides all the power of VisualProlog to the application developer. We have chosen to evaluate PrologSpace using the Cognitive Dimensions framework introduced by Green and Petre [7].
Reference: [6] <author> J Good. </author> <title> The `right' tool for the task: an investigation of external representations, program abstractions and task requirements. </title> <booktitle> In Proceedings of ESP'96. </booktitle> <year> 1996. </year>
Reference-contexts: diffuseness of PrologSpace in absolute terms is largely compensated for by its terser notation (in expressing control logic) and environmental mechanisms for navigation. 6 Future Directions Although PrologSpace provides useful functionality as it stands future enhancements could tackle problems associated with static and dynamic representations of control and data flow <ref> [6, 10] </ref>. A key feature of PrologSpace is the visual semantics of icons.
Reference: [7] <author> T R G Green and M Petre. </author> <title> Cognitive dimensions as discussion tools for programming language design. </title> <type> Technical report, </type> <institution> MRC Applied Psychology Unit, </institution> <address> Chaucer Road, Cambridge, UK, </address> <year> 1995. </year>
Reference-contexts: PrologSpace provides all the power of VisualProlog to the application developer. We have chosen to evaluate PrologSpace using the Cognitive Dimensions framework introduced by Green and Petre <ref> [7] </ref>. Cognitive Dimensions are: a small set of terms describing the structure of the artifact, which are mutually orthogonal (in principle) and which are derived by seeking generalised statements of how that structure determines the pattern of user activity ... <p> In the next section we provide a description of a `yardstick' program, following that is an overview of PrologSpace, then there is the evaluation. Finally we draw some conclusions. 1 2 A yardstick: The Rocket Program The Rocket program was used by Green and Petre in their comparative study <ref> [7] </ref> and was earlier used by Curtis et al [2] in a study of flowcharts and related notations. It is a small and simple program but which nevertheless is suitable for assessing important aspects of programming systems. <p> On selecting any disjunction graphic in DefWindow the other part of the disjunction is shown and the text below the disjunction shape is changed to reflect whether the first or second choice is being displayed. An important cognitive dimension to the programmer is side-by-side viewing <ref> [7] </ref>; a programmer may wish to have more than one procedure's definition shown in DefWindow, for example. PrologSpace allows this. <p> The evaluation was undertaken by the author with not a user or observer in sight. 4.1 Closeness of Mapping This concerns the mapping between "system mechanisms and user goals on the one hand, and system displays and user perceptions and interpretation on the other" <ref> [7] </ref>. Programming is regarded as a mapping between a problem statement and primitives of the language in which the solution will be expressed. <p> We then have a smaller text edit on variable names. The total elapsed time for the modification, by the author, was 280 seconds. As with other visual programming systems its performance was poor compared to textual ones <ref> [7] </ref>. When we repeated the experiment with a pure textual version of Prolog we accomplished the modification in just 120 seconds. The reason for this improvement is that in Prolog we have only to really consider algorithm viscosity whereas the editing task for PrologSpace involves the addition of layout viscosity.
Reference: [8] <author> A M J Hutchings. </author> <title> Edinburgh Prolog User's Manual. </title> <type> Technical report, </type> <institution> AI Applications Institute, University of Edinburgh, UK., </institution> <year> 1990. </year>
Reference-contexts: Procedures classified as unknown in ProcWindow indicate where further development is required. Navigation and debugging of incomplete and/or incorrect programs is possible during development. 3.5 Program Debugging Through the menu bar the programmer can invoke a program execution and employ any of several leashing levels for debugging purposes <ref> [8] </ref>. The execution is allowed to flow to completion by PrologSpace, which saves the trace information. A dynamic visualization of the trace occurs in ExecutionWindow as the programmer single-steps forwards or backwards. Figure 5 shows the window which provides a visualization of the Procedure Box Model.
Reference: [9] <author> F J Lukey. </author> <title> Comprehending and debugging computer programs. </title> <editor> In M J Coombs and J L Alty, editors, </editor> <booktitle> Computing skills and the user interface, </booktitle> <pages> pages 201-219. </pages> <publisher> Academic Press, </publisher> <year> 1981. </year>
Reference-contexts: It is also arguable whether recursion falls in this bracket. Hard mental operations occur when textually scanning a Prolog clause containing permutations of parentheses, disjunctions, `not' symbols, and the if-then-else symbols (-&gt;). These are places where the programmer needs many `mental fingers' in order to understand the control logic <ref> [9] </ref>.
Reference: [10] <author> P Mulholland. </author> <title> Prolog without tears: an evaluation of a non Byrd Box model for students. </title> <booktitle> In PPIG-7, Abstracts of Papers, </booktitle> <pages> pages 27-34. </pages> <year> 1995. </year>
Reference-contexts: PrologSpace's visual debugging facility provides explicit representation of the control flows but not the data flows. Importantly it does contain a basis for providing the visualizations needed for novices, as identified by Mulholland <ref> [10] </ref>. A further problem of hidden dependencies is that it makes a programmer reluctant to remove 'apparently redundant software does it have hidden dependencies? A program can thus accumulate 9 `fossil' procedures and data. <p> diffuseness of PrologSpace in absolute terms is largely compensated for by its terser notation (in expressing control logic) and environmental mechanisms for navigation. 6 Future Directions Although PrologSpace provides useful functionality as it stands future enhancements could tackle problems associated with static and dynamic representations of control and data flow <ref> [6, 10] </ref>. A key feature of PrologSpace is the visual semantics of icons.
Reference: [11] <author> B A Price, R M Baecker, </author> <title> and I S Small. A principled taxonomy of software visualization. </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 4(3) </volume> <pages> 211-266, </pages> <year> 1993. </year> <month> 14 </month>
Reference-contexts: They are discussion tools, intended to raise the level of discourse. End-user programming languages are classic examples of cognitive artifacts.[7] Green and Petre have used Cognitive Dimensions to evaluate textual languages and two prominent visual programming languages, namely LabView and Prograph. Both these languages are also examined elsewhere <ref> [11] </ref>. The value of Cognitive Dimensions is that Visual Programming system designers are in a position to use common language. Thus one can appreciate Prograph's excellent progressive evaluation but its poor viscosity, and LabView's good visibility but poor secondary notation.
References-found: 11

