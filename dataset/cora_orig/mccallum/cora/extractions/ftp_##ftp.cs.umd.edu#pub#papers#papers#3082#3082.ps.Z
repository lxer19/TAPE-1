URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3082/3082.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Title: A SERVER OF DISTRIBUTED DISK PAGES USING A CONFIGURABLE SOFTWARE BUS  
Author: Charles Falkenberg, Paul Hagger and Steve Kelley 
Note: With oversight by Office of Naval Research, this research is supported by ARPA/SISTO in conjunction with the Domain Specific Software Architectures project.  
Address: College Park, MD 20742  
Affiliation: Institute for Advanced Computer Studies and The Department of Computer Science University of Maryland  
Abstract: As network latency drops below disk latency, access time to a remote disk will begin to approach local disk access time. The performance of I/O may then be improved by spreading disk pages across several remote disk servers and accessing disk pages in parallel. To research this we have prototyped a data page server called a Page File. This persistent data type provides a set of methods to access disk pages stored on a cluster of remote machines acting as disk servers. The goal is to improve the throughput of database management system or other I/O intensive application by accessing pages from remote disks and incurring disk latency in parallel. This report describes the conceptual foundation and the methods of access for our prototype. 
Abstract-found: 1
Intro-found: 1
Reference: [PuJa91] <institution> An environment for developing fault tolerant software. </institution> <note> J. </note> <author> Purtilo and P. </author> <title> Jalote. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 17, </volume> <year> (1991), </year> <pages> pp. 153-159. </pages>
Reference: [Purt9X] <institution> The Polylith Software Bus. </institution> <note> J. Purtilo. To appear, ACM Transactions on Programming Languages and Systems. </note>
Reference-contexts: Our prototype exploits the parallelism available when pages are accessed on multiple remote disks simultaneously. In addition, we hope to increase the available disk space and minimize disk contention. Network communication in the prototype is based upon software bus organization using the Polylith software interconnection system <ref> [Purt9X] </ref>. Software bus organization provides a single communication interface for applications, written in different languages and distributed across a network of diverse computers and operating systems. Because of these benefits, the prototype we built on the Polylith system may be easily reconfigured for purposes of experimentation.
Reference: [Rous9X] <author> ADMS: </author> <title> A Testbed for Incremental Access Methods, </title> <editor> N. Roussopoulos, N. Economou, and A. Stamenas, </editor> <title> To appear, </title> <journal> IEEE Trans. on Knowledge and Data Engineering. </journal>
Reference-contexts: Because of these benefits, the prototype we built on the Polylith system may be easily reconfigured for purposes of experimentation. The access methods have been tailored to meet the needs of the database management system ADMS <ref> [Rous9X] </ref>. ADMS utilizes incremental access methods and caching to improve the performance of large distributed databases. The access methods of our prototype are designed to fulfill the I/O requirements of ADMS. Existing I/O access methods can easily be replaced by the methods of our prototype.

References-found: 3

