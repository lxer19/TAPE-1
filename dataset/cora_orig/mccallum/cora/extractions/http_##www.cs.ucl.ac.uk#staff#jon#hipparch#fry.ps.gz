URL: http://www.cs.ucl.ac.uk/staff/jon/hipparch/fry.ps.gz
Refering-URL: http://www.cs.ucl.ac.uk/staff/jon/hipparch/program.html
Root-URL: http://www.cs.ucl.ac.uk
Title: Application Level Active Networking  
Author: Michael Fry Atanu Ghosh 
Abstract: In this paper we describe and discuss an Application Level Active Network system. This system has all the benefits of proposed Active Networks, including rapid and transparent deployment of new network services. However our system is also free of the problems of router-level Active Network deployment, such as concerns over safety and resource management. We describe our overall architecture and its components. We then describe and discuss an implementation of the architecture in Java. We present a number of applications that have been implemented on the architecture, and indicate the benefits of our approach. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Scott Alexander, Marianne Shaw, Scott M. Nettles, and Jonathan M. Smith, </author> <title> "Active Bridging", </title> <booktitle> SIGCOMM Vol 27 Number 4, </booktitle> <pages> pp 101-111. </pages> <month> October 97. </month>
Reference: [2] <author> A. Ghosh and M. Fry, "JavaRadio: </author> <title> an application level active network", </title> <booktitle> Third International Workshop on High Performance Protocol Architectures(HIPPARCH '97), </booktitle> <month> June 97. </month>
Reference-contexts: This partitioning was intended so not only proxylets but other entities would be able to share the same code. For example a lot of code is currently shared between the audio transcoder proxylet which has been written and our audio tool YAAT <ref> [2] </ref>. We had intended to extract this shared code and place it on a protocol server. <p> We have performed a number of experiments with the infrastructure that we have in place, using different applications or application services. 5.1 WWW streaming audio We have previously reported on an audio transcoder which takes audio samples from a WWW server transmitted using HTTP/TCP and converts to a RTP stream <ref> [2] </ref>. We decided to try to seamlessly integrate this work into a WWW browser and WWW server interaction. A key challenge was to make the system transparent to both server and browser. The solution lay in the creation and use of a webcache proxylet. <p> The tool started can either be one of the standard tools such as vat [9], or rat [10], or yaat: our own Java audio tool which we had written as part of our previous experiments <ref> [2] </ref>. However this solution is not totally flexible or transparent, since it requires the client's local environment to be configured to start an audio tool. <p> We now present results that indicate the impact of our approach on bandwidth and latency. 6.1.1 Streaming throughput We have previously reported results for our audio transcoder <ref> [2] </ref>. These are reiterated here.
Reference: [3] <author> Ken Arnold and James Gosling, </author> <title> The Java Programming Language. </title> <address> Reading, Massachusetts: </address> <publisher> Addison Wesley, </publisher> <year> 1996. </year>
Reference: [4] <author> David Tennenhouse, </author> <title> D.J. Wetherall Towards an Active Network Architecture. </title> <journal> Computer Communication Review, </journal> <volume> Vol. 26, No. 2, </volume> <month> April </month> <year> 1996, </year> <pages> pp. 5-18. </pages>
Reference-contexts: 1 Introduction Currently the deployment of new communication services is limited by the slowness of standardi-sation processes and the inflexibility of the communications infrastructure. Recently an approach to overcoming these problems has been proposed in the form of Active Networks (AN) <ref> [4] </ref>. AN researchers are currently proposing the deployment of protocol elements at the network router level. We believe this approach to be unrealistic. It is most unlikely that a network provider will permit the deployment of protocol code from third parties at this level.
Reference: [5] <author> Tim Berners-Lee, </author> <title> The world-wide web initiative. </title> <booktitle> Proceedings of the International Networking Conference (INET), </booktitle> <address> (San Francisco, California), </address> <pages> pp. </pages> <institution> DBC-2 - DBC-4, Internet Society, </institution> <month> Aug. </month> <year> 1993. </year>
Reference-contexts: This would introduce intolerable security and safety issues, and could have a serious impact on the level of service experienced by the multiple network flows sharing the router. We propose an Application Level Active Network (ALAN) system. Such a system consists of regular clients and servers, such as WWW <ref> [5] </ref> browsers and servers, located on the Internet or Intranet. Communication between servers and clients is enhanced by Dynamic Proxy Servers (DPS) that are located at optimal points of the end-to-end path between the server and the client. It is possible to download protocol entities onto the DPS infrastructure.
Reference: [6] <author> H. Schulzrinne, S. Casner, R. Frederick, V. Jacobson, </author> <title> RFC 1889 RTP: A Transport Protocol for Real-Time Applications, </title> <type> 01/25/1996. </type>
Reference: [7] <author> V. Kumar, "MBone: </author> <title> Interactive Multimedia On The Internet". </title> <publisher> Macmillan Publishing (Simon & Schuster), </publisher> <year> 1995. </year>
Reference-contexts: The compression and decompression 8 stages are totally transparent to the WWW browser and WWW server. For congested links this compression enhances the performance of HTTP connections. 5.3 Multicast reflector At the time of writing Australia is not connected to the global Mbone <ref> [7] </ref>. During the recent Internet Engineering Task Force (IETF) meeting in Los Angeles we wanted to view some of the sessions. We had been generously allowed to have an account on an ISI machine at MIT on which we occasionally run a DPS.
Reference: [8] <author> M. Handley, V. Jacobson, </author> <title> RFC 2327 SDP: Session Description Protocol, </title> <type> 04/14/1998. </type>
Reference-contexts: We had been generously allowed to have an account on an ISI machine at MIT on which we occasionally run a DPS. In order to demonstrate the simplicity of our proxylet infrastructure a simple Java application, SAP, was written which could receive and process session description protocol (SDP <ref> [8] </ref>) packets. These SDP packets describe multicast sessions such as the IETF sessions which were taking place. We required a mechanism to join multicast sessions. A simple reflector proxylet was written which would join a multicast group.
Reference: [9] <author> Stephen Casner and Stephen Deering, </author> <title> "First IETF Internet audiocast," </title> <journal> ACM Computer Communication Review, </journal> <volume> vol. 22, </volume> <pages> pp. 92-97, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: It can send back a new content type "audio/yaat". If the WWW browser has previously been correctly configured this will cause an RTP compliant audio tool to be started. The tool started can either be one of the standard tools such as vat <ref> [9] </ref>, or rat [10], or yaat: our own Java audio tool which we had written as part of our previous experiments [2]. However this solution is not totally flexible or transparent, since it requires the client's local environment to be configured to start an audio tool.
Reference: [10] <author> V.Hardman, A.Sasse, </author> <title> I.Kouvelas Successful Multi-party Audio Communication over the Internet, </title> <journal> Communications of the ACM, </journal> <note> 1997. [11] &lt;URL:http://jeeves.javasoft.com/&gt; </note>
Reference-contexts: It can send back a new content type "audio/yaat". If the WWW browser has previously been correctly configured this will cause an RTP compliant audio tool to be started. The tool started can either be one of the standard tools such as vat [9], or rat <ref> [10] </ref>, or yaat: our own Java audio tool which we had written as part of our previous experiments [2]. However this solution is not totally flexible or transparent, since it requires the client's local environment to be configured to start an audio tool.
Reference: [12] <author> M. Handley, </author> <note> SDR Manual page. 14 </note>
Reference-contexts: The program to parse the SDP packets took a little longer but was not strictly necessary as a simple plugin could have been written for an existing tool such SDR <ref> [12] </ref>, to start the reflector pair. 5.4 Tcpbridge We have often made the observation that the path chosen through the network by routing protocols is not always the one offering the least latency.
References-found: 11

