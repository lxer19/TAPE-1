URL: ftp://www.cs.rutgers.edu/pub/technical-reports/cap-tr-13.ps.Z
Refering-URL: http://www.cs.rutgers.edu/pub/technical-reports/
Root-URL: 
Email: Email: liew@cs.rutgers.edu, lou@cs.rutgers.edu  
Phone: Phone: (908)932-5229  
Title: Constrained REDO: An Alternative to REPLAY  Area/subarea: Case Based Reasoning/Design  
Author: C. W. Liew L. I. Steinberg 
Date: January 26, 1993  
Address: New Brunswick NJ 08903  
Affiliation: Department of Computer Science Rutgers University  
Abstract: Design optimization problems and VLSI microprocessor design in particular, are complex problems with some characteristics that make them very different from the problems that AI researchers have traditionally studied. Case based reasoning is a valuable tool that can be used to make these problems tractable. Traditional case based methods with their use of REPLAY based techniques are unsuitable because they rely on the use of design records and decision trees. CONSTRAINED-REDO is a new technique that does not use design records but instead relies on an analysis of the solution and the propagation of information through constraints. These constraints are not on the design decisions but only refer to the mapping between the problem specification and the solution. The technique has been tested in a real-world domain, that of VLSI microprocessor design. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> J. A. Kolodner, ed., </editor> <booktitle> Proceedings of the 1988 DARPA Case-Based Reasoning Workshop. </booktitle> <month> May </month> <year> 1988. </year>
Reference-contexts: Each case in the database consists of a description of the problem and the problem solving steps executed to solve that problem. Much case based research has focussed on the storage and or retrieval of cases (see <ref> [ 1 ] </ref> ) and the re-use of the problem solving steps directly or some perturbation of them [ 2, 3, 4, 5 ] .
Reference: [2] <author> K. J. Hammond, </author> <title> "Planning and goal interactions: The use of past solutions in present situations," </title> <booktitle> Proceedings of AAAI-83, </booktitle> <year> 1983. </year>
Reference-contexts: Much case based research has focussed on the storage and or retrieval of cases (see [ 1 ] ) and the re-use of the problem solving steps directly or some perturbation of them <ref> [ 2, 3, 4, 5 ] </ref> . In this paper, we focus on REPLAY 1 , i.e., the technique of replaying as much of the decisions that have been saved in a decision tree as is applicable. <p> REPLAY techniques form the bulk of the use of case based reasoning either by replaying decisions verbatim, e.g., BOGART [ 3 ] and PRIAR [ 6, 4, 5 ] and ARGO [ 7 ] , or by instantiating the prototype, e.g., CHEF <ref> [ 2 ] </ref> , KRITIK [ 8 ] and BRAINSTORMER [ 9 ] .
Reference: [3] <author> J. Mostow, M. Barley, and T. Weinrich, </author> <title> "Automated reuse of design plans in bogart," </title> <booktitle> in Artificial Intelligence in Engineering Design, Volume II, </booktitle> <publisher> Academic Press, </publisher> <year> 1992. </year>
Reference-contexts: Much case based research has focussed on the storage and or retrieval of cases (see [ 1 ] ) and the re-use of the problem solving steps directly or some perturbation of them <ref> [ 2, 3, 4, 5 ] </ref> . In this paper, we focus on REPLAY 1 , i.e., the technique of replaying as much of the decisions that have been saved in a decision tree as is applicable. <p> This technique is central to case based reasoning because how the prototypes are used determines the amount and type of information that should be saved with each case. REPLAY techniques form the bulk of the use of case based reasoning either by replaying decisions verbatim, e.g., BOGART <ref> [ 3 ] </ref> and PRIAR [ 6, 4, 5 ] and ARGO [ 7 ] , or by instantiating the prototype, e.g., CHEF [ 2 ] , KRITIK [ 8 ] and BRAINSTORMER [ 9 ] . <p> In this section, we compare CONSTRAINED-REDO and REPLAY along several dimensions. These observations are gleaned from our experience in developing both a REPLAY based system (BOGART <ref> [ 3 ] </ref> ) and a CONSTRAINED-REDO based system (FAD [ 16 ] ) in almost identical problem domains. 5.1 Storage Overhead CONSTRAINED-REDO only analyses the generated solution and not the decisions that led to the solution.
Reference: [4] <author> S. Kambhampati, </author> <title> "Mapping and retrieval during plan reuse: A validation structure based approach," </title> <booktitle> in Proceedings of AAAI-90, </booktitle> <year> 1990. </year>
Reference-contexts: Much case based research has focussed on the storage and or retrieval of cases (see [ 1 ] ) and the re-use of the problem solving steps directly or some perturbation of them <ref> [ 2, 3, 4, 5 ] </ref> . In this paper, we focus on REPLAY 1 , i.e., the technique of replaying as much of the decisions that have been saved in a decision tree as is applicable. <p> REPLAY techniques form the bulk of the use of case based reasoning either by replaying decisions verbatim, e.g., BOGART [ 3 ] and PRIAR <ref> [ 6, 4, 5 ] </ref> and ARGO [ 7 ] , or by instantiating the prototype, e.g., CHEF [ 2 ] , KRITIK [ 8 ] and BRAINSTORMER [ 9 ] .
Reference: [5] <author> S. Kambhampati, </author> <title> "A theory of plan modification," </title> <booktitle> in Proceedings of AAAI-90, </booktitle> <year> 1990. </year>
Reference-contexts: Much case based research has focussed on the storage and or retrieval of cases (see [ 1 ] ) and the re-use of the problem solving steps directly or some perturbation of them <ref> [ 2, 3, 4, 5 ] </ref> . In this paper, we focus on REPLAY 1 , i.e., the technique of replaying as much of the decisions that have been saved in a decision tree as is applicable. <p> REPLAY techniques form the bulk of the use of case based reasoning either by replaying decisions verbatim, e.g., BOGART [ 3 ] and PRIAR <ref> [ 6, 4, 5 ] </ref> and ARGO [ 7 ] , or by instantiating the prototype, e.g., CHEF [ 2 ] , KRITIK [ 8 ] and BRAINSTORMER [ 9 ] .
Reference: [6] <author> S. Kambhampati, </author> <title> Flexible Reuse and Modification in Hierarchical Planning: A Validation Structure Based Approach. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Maryland, </institution> <month> Oct. </month> <year> 1989. </year> <note> available as CAR-TR-469, CS-TR-2334. </note>
Reference-contexts: REPLAY techniques form the bulk of the use of case based reasoning either by replaying decisions verbatim, e.g., BOGART [ 3 ] and PRIAR <ref> [ 6, 4, 5 ] </ref> and ARGO [ 7 ] , or by instantiating the prototype, e.g., CHEF [ 2 ] , KRITIK [ 8 ] and BRAINSTORMER [ 9 ] .
Reference: [7] <author> M. Huhns and R. D. Acosta, "Argo: </author> <title> An analogical reasoning system for solving design problems," </title> <type> Tech. Rep. </type> <institution> AI/CAD-092-87, Microelectronics and Computer Technology Corporation, 3500 West Balcones Center Drive, </institution> <address> Austin TX 78759, </address> <month> Mar. </month> <year> 1987. </year> <month> 12 </month>
Reference-contexts: REPLAY techniques form the bulk of the use of case based reasoning either by replaying decisions verbatim, e.g., BOGART [ 3 ] and PRIAR [ 6, 4, 5 ] and ARGO <ref> [ 7 ] </ref> , or by instantiating the prototype, e.g., CHEF [ 2 ] , KRITIK [ 8 ] and BRAINSTORMER [ 9 ] .
Reference: [8] <author> A. K. Goel, </author> <title> "Representation of design functions in experience-based design," </title> <booktitle> in Proceedings of the IFIP TC5/WG5.2 Working Conference on Intelligent Computer Aided Design (D. </booktitle> <editor> Brown, M. Waldron, and H. Yoshikawa, eds.), </editor> <year> 1991. </year>
Reference-contexts: REPLAY techniques form the bulk of the use of case based reasoning either by replaying decisions verbatim, e.g., BOGART [ 3 ] and PRIAR [ 6, 4, 5 ] and ARGO [ 7 ] , or by instantiating the prototype, e.g., CHEF [ 2 ] , KRITIK <ref> [ 8 ] </ref> and BRAINSTORMER [ 9 ] .
Reference: [9] <author> E. K. Jones, </author> <title> "Model-based case adaptation," </title> <booktitle> in Proceedings of AAAI-92, </booktitle> <year> 1992. </year>
Reference-contexts: form the bulk of the use of case based reasoning either by replaying decisions verbatim, e.g., BOGART [ 3 ] and PRIAR [ 6, 4, 5 ] and ARGO [ 7 ] , or by instantiating the prototype, e.g., CHEF [ 2 ] , KRITIK [ 8 ] and BRAINSTORMER <ref> [ 9 ] </ref> .
Reference: [10] <author> C. Tong and D. </author> <title> Sriram, </title> <editor> eds., </editor> <booktitle> Artificial Intelligence Approaches to Engineering Design, </booktitle> <volume> vol. 1. </volume> <publisher> Academic Press, </publisher> <year> 1992. </year>
Reference-contexts: we discuss the limitations and applicability of CONSTRAINED-REDO and how case based reasoning might be extended by what we have learned. 2 Design Optimization Problems Design is a complex problem domain that has been used by many AI researchers to evaluate their hypotheses (see the volumes by Tong & Sriram <ref> [ 10, 11, 12 ] </ref> for descriptions of many design systems that use AI). Optimization is a very basic part of many design problems.
Reference: [11] <author> C. Tong and D. </author> <title> Sriram, </title> <editor> eds., </editor> <booktitle> Artificial Intelligence Approaches to Engineering Design, </booktitle> <volume> vol. 2. </volume> <publisher> Academic Press, </publisher> <year> 1992. </year>
Reference-contexts: we discuss the limitations and applicability of CONSTRAINED-REDO and how case based reasoning might be extended by what we have learned. 2 Design Optimization Problems Design is a complex problem domain that has been used by many AI researchers to evaluate their hypotheses (see the volumes by Tong & Sriram <ref> [ 10, 11, 12 ] </ref> for descriptions of many design systems that use AI). Optimization is a very basic part of many design problems.
Reference: [12] <author> C. Tong and D. </author> <title> Sriram, </title> <editor> eds., </editor> <booktitle> Artificial Intelligence Approaches to Engineering Design, </booktitle> <volume> vol. 3. </volume> <publisher> Academic Press, </publisher> <year> 1992. </year>
Reference-contexts: we discuss the limitations and applicability of CONSTRAINED-REDO and how case based reasoning might be extended by what we have learned. 2 Design Optimization Problems Design is a complex problem domain that has been used by many AI researchers to evaluate their hypotheses (see the volumes by Tong & Sriram <ref> [ 10, 11, 12 ] </ref> for descriptions of many design systems that use AI). Optimization is a very basic part of many design problems.
Reference: [13] <author> A. Howe, J. Dixon, P. Cohen, and M. Simmons, "Dominic: </author> <title> A domain independent program for mechanical engineering design," </title> <booktitle> in Proceedings First International Conference on Application of Artifical Intelligence to Engineering Problems, </booktitle> <year> 1986. </year>
Reference-contexts: In the next few sections, we describe our CONSTRAINED-REDO technique and show why it is better than using REPLAY. 3 CONSTRAINED-REDO The problem solving model that we use for iterative design is very similar to that developed by Dixon et. al., <ref> [ 13, 14 ] </ref> . The design system generates a complete solution, analyses the solution and then iterates by modifying either the parameters that control the system or by selecting a different problem solving strategy.
Reference: [14] <author> M. F. Orelup, J. R. Dixon, P. R. Cohen, and M. K. Simmons, "Dominic II: </author> <title> Meta-Level Control in Iterative Redesign," </title> <booktitle> in Proceedings of AAAI-88, </booktitle> <year> 1988. </year>
Reference-contexts: In the next few sections, we describe our CONSTRAINED-REDO technique and show why it is better than using REPLAY. 3 CONSTRAINED-REDO The problem solving model that we use for iterative design is very similar to that developed by Dixon et. al., <ref> [ 13, 14 ] </ref> . The design system generates a complete solution, analyses the solution and then iterates by modifying either the parameters that control the system or by selecting a different problem solving strategy.
Reference: [15] <author> C. Liew, L. Steinberg, and C. Tong, </author> <title> "Use of feedback to control redesign," </title> <booktitle> in Proceedings of the IFIP TC5/WG5.2 Working Conference on Intelligent Computer Aided Design (D. </booktitle> <editor> Brown, M. Waldron, and H. Yoshikawa, eds.), </editor> <year> 1991. </year>
Reference-contexts: We have extended and modified the model by extending the feedback between iterations to provide for more than just modification of parameters or selection of strategies (see <ref> [ 15 ] </ref> ). The key to making the iterative design model viable is the ability to efficiently analyse information from the previous iteration, determine where the faults lie and then guide the problem solver on the next solution so as to correct the faults.
Reference: [16] <author> C. W. Liew, </author> <title> "Feedback directed modification of designs," </title> <booktitle> in Proceedings of 6th IEEE Conference on AI Applications, </booktitle> <year> 1990. </year> <note> Also available as Technical Report LCSR-TR 135, </note> <institution> Department of Computer Science, Rutgers University. </institution>
Reference-contexts: For example, if the constraint description language is restricted, then the number of ways that information can be specified is similarly restricted. 5 4 Experimental Results The CONSTRAINED-REDO technique has been implemented on several systems in a variety of domains including digital filter design <ref> [ 16 ] </ref> and the generation of plans for the machining of metal parts [ 17, 18 ] . In this paper we describe our experiments with the FAD/DAA system. DAA [ 19, 20 ] is a non-iterative VLSI microprocessor design system developed by Ted Kowalski at AT&T Bell Laboratories. <p> In this section, we compare CONSTRAINED-REDO and REPLAY along several dimensions. These observations are gleaned from our experience in developing both a REPLAY based system (BOGART [ 3 ] ) and a CONSTRAINED-REDO based system (FAD <ref> [ 16 ] </ref> ) in almost identical problem domains. 5.1 Storage Overhead CONSTRAINED-REDO only analyses the generated solution and not the decisions that led to the solution.
Reference: [17] <author> C. C. Hayes, </author> <title> "A model of planning for plan efficiency: Taking advantage of operator overlap," </title> <booktitle> in Proceedings of IJCAI-89, </booktitle> <year> 1989. </year> <month> 13 </month>
Reference-contexts: restricted, then the number of ways that information can be specified is similarly restricted. 5 4 Experimental Results The CONSTRAINED-REDO technique has been implemented on several systems in a variety of domains including digital filter design [ 16 ] and the generation of plans for the machining of metal parts <ref> [ 17, 18 ] </ref> . In this paper we describe our experiments with the FAD/DAA system. DAA [ 19, 20 ] is a non-iterative VLSI microprocessor design system developed by Ted Kowalski at AT&T Bell Laboratories. <p> It would be very difficult to modify DAA to (1) record all design decisions and their rationale and (2) reuse decision trees. On the other hand, it only took about 100 lines of code to add CONSTRAINED-REDO to the system. We have also observed this result when modifying MACHINIST <ref> [ 17 ] </ref> . 6 Advantages and Limitations The major advantage of CONSTRAINED-REDO is that it does not require either decision trees or problem solving traces. This both eliminates the overhead involved in saving design records and makes it easier to add CONSTRAINED-REDO to existing design systems.
Reference: [18] <author> C. C. Hayes, </author> <title> "Using process planning knowledge to make design sugges-tions concurrently," </title> <booktitle> in Proceedings of the ASME Winter Annual Meeting, </booktitle> <year> 1989. </year>
Reference-contexts: restricted, then the number of ways that information can be specified is similarly restricted. 5 4 Experimental Results The CONSTRAINED-REDO technique has been implemented on several systems in a variety of domains including digital filter design [ 16 ] and the generation of plans for the machining of metal parts <ref> [ 17, 18 ] </ref> . In this paper we describe our experiments with the FAD/DAA system. DAA [ 19, 20 ] is a non-iterative VLSI microprocessor design system developed by Ted Kowalski at AT&T Bell Laboratories.
Reference: [19] <author> T. J. Kowalski and D. E. Thomas, </author> <title> "The VLSI design automation assistant: first steps," </title> <booktitle> in 26th IEEE Computer Society International Conference, </booktitle> <pages> pp. 126-130, </pages> <year> 1983. </year>
Reference-contexts: In this paper we describe our experiments with the FAD/DAA system. DAA <ref> [ 19, 20 ] </ref> is a non-iterative VLSI microprocessor design system developed by Ted Kowalski at AT&T Bell Laboratories. FAD is an experimental system to investigate the benefits and costs of using feedback in an iterative design paradigm.
Reference: [20] <author> M. McFarland S.J. and T. Kowalski, </author> <title> "Incorporating bottom-up design into hardware synthesis," </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> vol. 9, </volume> <pages> pp. 938-950, </pages> <month> Sept. </month> <year> 1990. </year>
Reference-contexts: In this paper we describe our experiments with the FAD/DAA system. DAA <ref> [ 19, 20 ] </ref> is a non-iterative VLSI microprocessor design system developed by Ted Kowalski at AT&T Bell Laboratories. FAD is an experimental system to investigate the benefits and costs of using feedback in an iterative design paradigm.
Reference: [21] <author> J. de Kleer and B. Williams, </author> <title> "Back to backtracking: Controlling the ATMS," </title> <booktitle> in Proceedings of AAAI-86, </booktitle> <year> 1986. </year>
Reference-contexts: From then on, CONSTRAINED-REDO can be used to improve incrementally, pieces of the solution. 5.3 Credit/Blame Assignment One of the advantages of REPLAY techniques is that they can use the decision trees to determine credit and blame by using methods such as dependency directed backtracking <ref> [ 21 ] </ref> or truth maintenance [ 22 ] . Dependency directed backtracking relies on being able to use the decision tree to localise the faults (constraint violations) to a small subset of decisions.
Reference: [22] <author> J. de Kleer, </author> <title> "An assumption-based TMS," </title> <journal> Artificial Intelligence, </journal> <volume> vol. 28, </volume> <month> Mar. </month> <year> 1986. </year> <month> 14 </month>
Reference-contexts: then on, CONSTRAINED-REDO can be used to improve incrementally, pieces of the solution. 5.3 Credit/Blame Assignment One of the advantages of REPLAY techniques is that they can use the decision trees to determine credit and blame by using methods such as dependency directed backtracking [ 21 ] or truth maintenance <ref> [ 22 ] </ref> . Dependency directed backtracking relies on being able to use the decision tree to localise the faults (constraint violations) to a small subset of decisions. In design optimization, we are not looking to find a correct solution but rather a good solution.
References-found: 22

