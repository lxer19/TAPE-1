URL: http://www.cs.cmu.edu/~pebbles/papers/pebblesarch.ps
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/project/pebbles/www/index.html
Root-URL: 
Email: bam@cs.cmu.edu  
Title: An Implementation Architecture to Support SingleDisplay Groupware  
Author: Brad A. Myers and Herb Stiel 
Keyword: Single Display Groupware, Pebbles, Amulet, Toolkit, ComputerSupported Cooperative Work (CSCW), Personal Digital Assistants PDAs), PalmPilot, Model-View-Controller (MVC).  
Web: http://www.cs.cmu.edu/~pebbles  
Address: Pittsburgh, PA 15213  
Affiliation: Human Computer Interaction Institute School of Computer Science Carnegie Mellon University  
Abstract: SingleDisplay Groupware (SDG) applications use a single display shared by multiple people. This kind of interaction has proven very useful for children, who often share a co m-puter for games and educational software, and also for co-located meetings, where multiple people are in the same room discussing, annotating and editing a design or pre s-entation which is shown on a computer screen. We have developed a number of SDG applications that use multiple 3Com PalmPilots to emulate a PCs mice and keyboard. All users can take turns sharing a single cursor to use e x-isting applications like PowerPoint. We have also created other new applications where all users have their own independent cursors. This paper describes the implementation of the Pebbles Remote Commander that supports connec t-ing multiple PalmPilots to a PC, and then the architectural additions to the Amulet toolkit that make it easy for pr o-grammers to develop applications with multiple input streams from multiple users. Amulet supports shared or independent editing, and shared or independent undo streams. The implementation differs from other Computer-Supported Cooperative Work (CSCW) architectures in that others have one Model and multiple Views and Controllers (one for each user), whereas we have one Model and one View, and multiple Controllers. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Baecker, R.M., et al. </author> <title> The User-centered Iterative Design of Collaborative Writing Software, </title> <booktitle> in Proceedings INTERCHI'93: Human Factors in Computing Systems. 1993. </booktitle> <address> Amsterdam, The Netherlands: </address> <pages> pp. 399-405. </pages>
Reference-contexts: Ho w-ever, as shown in Figure 4, we wanted to explore multiple users editing the same string at the same time. This raises similar issues to multi-screen multiuser text editors, such as SASSE <ref> [1] </ref>. The original Amulet single-user text object had a built-in ability to show a cursor. All of the text editing operations, such as inserting a character and deleting the previous word, operate with respect to this cursor.
Reference: 2. <author> Berlage, T. and Genau, A. </author> <title> A Framework for Shared Applic a-tions with a Replicated Architecture, </title> <booktitle> in Proceedings UIST'93: ACM SIGGRAPH Symposium on User Interface Software and Technology. 1993. </booktitle> <address> Atlanta, GA: </address> <pages> pp. 249-257. </pages>
Reference-contexts: Groupkit is e x-ploring techniques for presenting the pop-up menus and other interactions from users on other computers in a way that will be less disturbing [7]. The GINA system <ref> [2] </ref> studied how to distribute command objects to support multiuser undo on multiple machines. editing a drawing. Brad has the yellow oval selected while Herb is growing the blue rectangle. Bonnie and Albert are both editing the text string, while Robert is drawing some freehand letters. <p> This design for Undo is similar to that used in GINA <ref> [2] </ref>. An Implementation Architecture to Support SingleDisplay Groupware - 9 - **Submitted for Publication** Independent Undo Histories A different design gives each user an independent undo history.
Reference: 3. <author> Bier, E.A. and Freeman, S. MMM: </author> <title> A User Interface Arch i-tecture for Shared Editors on a Single Screen, </title> <booktitle> in Proceedings UIST'91: ACM SIGGRAPH Symposium on User Interface Sof t-ware and Technology. 1991. </booktitle> <address> Hilton Head, SC: </address> <pages> pp. 79-86. </pages>
Reference-contexts: The architectural issues discussed in this paper would also be useful if multiple regular mice and keyboards were attached to a PC. RELATED WORK MMM <ref> [3] </ref> (Multi-Device, MultiUser, Multi-Editor) was one of the first Single Display Groupware (SDG) enviro n-ments to explore multiple mice on a single display. MMM only supported editing of text and rectangles, and only su p-ported up to three mice. <p> Each user also picks a particular shape which will be used to identify that users pointing cursor, selected objects, and text editing cursor. Unlike other systems that assign each user a color (e.g., <ref> [3, 19] </ref> ), we assign each user a shape because in a drawing editor, users can create objects of any color. For example, if the blue user was creating a red circle, it would be confusing. <p> For example, if the blue user was creating a red circle, it would be confusing. All active users are shown along the bottom of the window, which corresponds to MMMs home areas <ref> [3] </ref>, but we also show each users state in their cursor to reduce conf u-sion and eye movements. The cursor shows the current drawing mode, line color and fill color. At the left of the window are the conventional drawing and color palettes. <p> The palettes in MMM <ref> [3] </ref> did not show any state and showed each users current modes only in the home areas. The Tivoli project [17] mentioned this problem with palettes, but apparently provided no feedback as to the users modes.
Reference: 4. <author> Bricker, L., </author> <title> Cooperatively Controlled Objects in Support of Collaboration. </title> <type> PhD Thesis, </type> <institution> Department of Computer Science and Engineering University of Washington, </institution> <address> 1998, Seattle, WA. </address>
Reference-contexts: Another study showed that children stay more focused on their tasks when each child has their own mouse and they simultaneously manipulate the same object together <ref> [4] </ref>. <p> In this case, any user can operate the Interactor and the input events from all users sent to the same Interactor. This might be useful for situations where the designer wants the inputs from all users to be mixed together, possibly for c o-operatively controlled objects <ref> [4] </ref>. The default value for the UserID field for all Interactors is the special value Am_ONE_AT_A_TIME. This means that any user can start the Interactor, but once that Interactor is running, only that same user can provide input to it.
Reference: 5. <author> Dewan, P. and Choudhary, R. </author> <title> Flexible User Interface Co u-pling in a Collaborative System, </title> <booktitle> in Proceedings SIGCHI'91: Human Factors in Computing Systems. 1991. </booktitle> <volume> N.O., </volume> <pages> LA: pp. 41-48. </pages>
Reference-contexts: gene r An Implementation Architecture to Support SingleDisplay Groupware - 3 - **Submitted for Publication** ally found to be too limited [20], and most multi-computer systems provide different views for each user, or else use a relaxed WYSIWIS style where, for example, the menus and other widgets are not shared <ref> [5] </ref>. Thus, these systems avoid the issues that need to be addressed by Pebbles. There are many CSCW toolkits for multi-display group-ware. For example, Rendezvous [8] provides for multiple users, each with their own display supported by a single server.
Reference: 6. <author> Elrod, S., et al. LiveBoard: </author> <title> A Large Interactive Display Su p-porting Group Meetings, Presentations and Remote Collaboration, </title> <booktitle> in Proceedings SIGCHI'92: Human Factors in Computing Systems. 1992. </booktitle> <address> Monterey, CA: </address> <pages> pp. 599-607. </pages>
Reference-contexts: In Pebbles, the View and Controllers are separated, and neither keeps track of the multiple users state since instead independent instances of the predefined Controller objects are used, and multiple Controllers share the same View objects. The Xerox Liveboard <ref> [6] </ref> originally supported multiple cu r-sors operating at the same time, but when produced commercially, it only supported one person with one cursor at a time. The Tivoli system [17] supports up to three pe o-ple using pens simultaneously on the original version of the LiveBoard.
Reference: 7. <author> Gutwin, C. and Greenberg, S. </author> <title> Design for Individuals, Design for Groups: Tradeoffs between Power and Workspace Awar e-ness, </title> <note> in Submitted for Publication. </note> <year> 1998. </year>
Reference-contexts: Groupkit [19] is a multiuser toolkit in tcl/tk which supports a distributed architecture and also uses a multiple View and Controller mechanism. Groupkit is e x-ploring techniques for presenting the pop-up menus and other interactions from users on other computers in a way that will be less disturbing <ref> [7] </ref>. The GINA system [2] studied how to distribute command objects to support multiuser undo on multiple machines. editing a drawing. Brad has the yellow oval selected while Herb is growing the blue rectangle. Bonnie and Albert are both editing the text string, while Robert is drawing some freehand letters.
Reference: 8. <author> Hill, R.D., et al., </author> <title> The Rendezvous Architecture and Language for Constructing Multiuser Applications. </title> <journal> ACM Transactions on Computer-Human Interaction, 1994. </journal> <volume> 1 (2): </volume> <pages> pp. 81-125. </pages>
Reference-contexts: Thus, these systems avoid the issues that need to be addressed by Pebbles. There are many CSCW toolkits for multi-display group-ware. For example, Rendezvous <ref> [8] </ref> provides for multiple users, each with their own display supported by a single server. The software architecture replicates the View and Controller parts, and uses constraints to keep them sy n-chronized.
Reference: 9. <author> Krasner, G.E. and Pope, S.T., </author> <title> A Description of the Model-View-Controller User Interface Paradigm in the Smalltalk-80 system. </title> <journal> Journal of Object Oriented Programming , 1988. </journal> <volume> 1 (3): </volume> <pages> pp. 26-49. </pages>
Reference-contexts: Altern a-tively, each user can have a separate undo history over the same set of operations and objects. Using the Model-View-Controller terminology <ref> [9] </ref>, most previous multiuser systems have had a single model (or multiple models with some kind of synchronization mech a-nism) and multiple View-Controller pairs. For example, this is the design for GroupKit [19]. <p> To make a graphical object respond to input, the progra m-mer simply attaches an instance of the appropriate type of Interactor to the graphics. The graphical object itself does not handle input events. In the Model-View-Controller idea from Smalltalk <ref> [9] </ref>, Interactors are the Controller. Most previous systems, including the original Smalltalk i m-plementation, had the View and Controller tightly linked, so that the Controller would have to be re-implemented whe never the View was changed, and vice versa.
Reference: 10. <author> Linton, M.A., Vlissides, J.M., and Calder, P.R., </author> <title> Composing user interfaces with InterViews. </title> <journal> IEEE Computer , 1989. </journal> <volume> 22 (2): </volume> <pages> pp. 8-22. </pages>
Reference-contexts: Most previous systems, including the original Smalltalk i m-plementation, had the View and Controller tightly linked, so that the Controller would have to be re-implemented whe never the View was changed, and vice versa. Indeed, many later systems such as Andrew [16] and InterViews <ref> [10] </ref> combined the View and Controller and called both the View. In contrast, Amulets Interactors are independent of graphics, and can be reused in many different contexts. Internally, each Interactor operates similarly.
Reference: 11. <author> Manke, S., Finke, M., and Waibel, A. NPen++: </author> <title> A Writer I n-dependent, Large Vocabulary OnLine Cursive Handwriting Recognition System, </title> <booktitle> in Proceedings of the International Co n-ference on Document Analysis and Recognition. 1995. </booktitle> <address> Montreal, Canada: </address> <publisher> IEEE Computer Society. </publisher>
Reference-contexts: We want to see which of these will be effective if used with PalmPilots and a single PC display implemented using the architecture described here. Another planned project is joint work with Alex Waibel to use his NPen++ handwriting recognizer <ref> [11] </ref> with the PalmPilot. NPen++ is much more accurate than previous attempts (like the Apple Newton), but is currently too large to run on the PalmPilot.
Reference: 12. <author> Myers, B.A. and Kosbie, D. </author> <title> Reusable Hierarchical Command Objects, </title> <booktitle> in Proceedings CHI'96: Human Factors in Computing Systems. 1996. </booktitle> <address> Vancouver, BC, Canada: </address> <pages> pp. 260-267. </pages>
Reference-contexts: Further studies of these issues are planned. Command Objects Rather than using a call-back procedure as in other too l-kits, Amulet allocates a command object and calls its Do method <ref> [12] </ref>. Amulets commands also provide slots and methods to handle undo, selective undo and repeat, and enabling and disabling the command (graying it out). <p> Any previous command, including scrolling and selection operations, can be selectively u n-done, repeated on the same object, or repeated on a new selection <ref> [12] </ref>. The Selective-Undo method has an assoc i-ated method which checks to see whether the command can still be executed. For example, if an operation changes the color of an item, the Selective-Undo-Allowed method will check to make sure that the object is still visible. <p> Unlike regular undo which pops items off the undo history, Selective Undo always adds the inverse of the command to the top of the history <ref> [12] </ref>. For example, if Herb performs Undo-by-User, it will add a new command to the top of the history (as number 37) that will be labeled Undo Move. The action of this command will be to move the object back where it was before command 34 was executed. <p> For example, one user might change the color of an object, then a different user might delete the object, and the first user then could try to undo the change color. Even though the Undo method is different from the Sele c-tive Undo method for performing the operation <ref> [12] </ref>, it turns out that the regular undo method can be performed whenever the selective undo method can be performed. Therefore, the Selective-Undo- Allowed method that checks to make sure the Selective Undo is possible, can be reused to check whether the regular Undo is possible in the current state.
Reference: 13. <author> Myers, B.A., et al. </author> , <title> The Amulet Environment: New Models for Effective User Interface Software Development . IEEE Transactions on Software Engineering, </title> <booktitle> 1997. </booktitle> <volume> 23 (6): </volume> <pages> pp. 347-365. </pages>
Reference-contexts: This research is being performed as part of the Pebbles and Amulet projects. Pebbles stands for: P almPilots for E ntry of B oth B ytes and L ocations from E xternal S ources. Amulet <ref> [13] </ref> stands for A utomatic M anufacture of U sable and L earnable E ditors and T oolkits, and is a C++ toolkit into which the multiuser architecture has been integrated. <p> Hopefully, multiuser applications will be designed with very few modal dialogs. SEPARATING EVENT HANDLING Interactors and Widgets The low level event handling described above is completely hidden from programmers using Amulet. Instead, pr o-grammers use high-level input handler objects called Interactors <ref> [13] </ref>. Each Interactor object type implements a particular kind of interactive behavior, such as moving an object with the mouse, or selecting one of a set of objects. <p> allocates a set of Interactors for each user so each user can create and edit graphical objects at the same time. 1 There are many options and optimizations that make this mechanism much more flexible and efficient, including multiple priorities for Inte r-actors, separating the handling of independent windows, etc. <ref> [13] </ref> An Implementation Architecture to Support SingleDisplay Groupware - 7 - **Submitted for Publication** Text Editing The default behavior for text editing would be for only a single user to be able to edit a text string at a time.
Reference: 14. <author> Myers, B.A., Stiel, H., and Gargiulo, R., </author> <title> Collaboration Using Multiple PDAs Connected to a PC, </title> <note> 1998. Submitted for Publ i-cation. </note>
Reference-contexts: PebblesDraw is a shared whiteboard application we built that allows all of the users to send input simultaneously while sharing the same PC display. A previous paper <ref> [14] </ref> describes the overall design and user interface of the Pebbles applications. The current paper discusses the implementation architecture that makes it all possible. <p> The cursor shows the current drawing mode, line color and fill color. At the left of the window are the conventional drawing and color palettes. At the right is a button panel that contains the most co m-mon commands. The details of the design of PebblesDraw are covered elsewhere <ref> [14] </ref>. multiple people PalmPilots. PEBBLES devices for Pebbles [14]. The PalmPilot (http://palmpilot.3com.com/) is a small inexpensive handheld Personal Digital Assistant (see Figure 3) formerly sold by USRobotics (which was bought by 3Com) and also now sold by IBM as the WorkPad (see http://www.pc.ibm.com/us/workpad/). <p> At the left of the window are the conventional drawing and color palettes. At the right is a button panel that contains the most co m-mon commands. The details of the design of PebblesDraw are covered elsewhere <ref> [14] </ref>. multiple people PalmPilots. PEBBLES devices for Pebbles [14]. The PalmPilot (http://palmpilot.3com.com/) is a small inexpensive handheld Personal Digital Assistant (see Figure 3) formerly sold by USRobotics (which was bought by 3Com) and also now sold by IBM as the WorkPad (see http://www.pc.ibm.com/us/workpad/). <p> A feature of the Remote Commander not shown in Figure 3 is an on-screen keyboard for entering the special characters such as F1 and ESC. The full design of the user interface for the Remote Commander is described elsewhere <ref> [14] </ref>. The input is sent to the PC through the serial cable. Each event on the PalmPilot causes Remote Commander to send a one byte event type code to the PC, possibly followed by event data.
Reference: 15. <author> Nunamaker, </author> <title> e.a., Electronic Meeting Systems to Support Group Work. </title> <journal> CACM, 1991. </journal> <volume> 34 (7): </volume> <pages> pp. 40-61. </pages>
Reference-contexts: With standard setups, they will have to awkwardly swap places with the person at the PC. Also, there are times when it will be productive for multiple people to provide input at the same time, such as during brainstorming <ref> [15, 20] </ref> . <p> Of course, we want to explore using this architecture to i m-plement many new applications. The CSCW literature contains a number of interesting programs designed for multiple computers, such as Electronic Brainstorming and Structured Idea Generation Process from Univ. of Ar i-zona <ref> [15] </ref> and Xerox PARCs Cognoter [20]. We want to see which of these will be effective if used with PalmPilots and a single PC display implemented using the architecture described here. Another planned project is joint work with Alex Waibel to use his NPen++ handwriting recognizer [11] with the PalmPilot.
Reference: 16. <editor> Palay, A.J., et al. </editor> <title> The Andrew Toolkit - An Overview, </title> <booktitle> in Proceedings Winter Usenix Technical Conference. 1988. Dallas, Tex: </booktitle> <pages> pp. 9-21. </pages>
Reference-contexts: Most previous systems, including the original Smalltalk i m-plementation, had the View and Controller tightly linked, so that the Controller would have to be re-implemented whe never the View was changed, and vice versa. Indeed, many later systems such as Andrew <ref> [16] </ref> and InterViews [10] combined the View and Controller and called both the View. In contrast, Amulets Interactors are independent of graphics, and can be reused in many different contexts. Internally, each Interactor operates similarly.
Reference: 17. <author> Pederson, E., et al. Tivoli: </author> <title> An Electronic Whiteboard for I n-formal Workgroup Meetings, </title> <booktitle> in Proceedings INTERCHI'93: Human Factors in Computing Systems. 1993. </booktitle> <address> Amsterdam, The Netherlands: </address> <pages> pp. 391-398. </pages>
Reference-contexts: The Xerox Liveboard [6] originally supported multiple cu r-sors operating at the same time, but when produced commercially, it only supported one person with one cursor at a time. The Tivoli system <ref> [17] </ref> supports up to three pe o-ple using pens simultaneously on the original version of the LiveBoard. However, the LiveBoard applications do not seem to have been created using a general multiuser arch i-tecture as in Amulet. The term Single Display Groupware was coined by Ste wart et. al. [21]. <p> The palettes in MMM [3] did not show any state and showed each users current modes only in the home areas. The Tivoli project <ref> [17] </ref> mentioned this problem with palettes, but apparently provided no feedback as to the users modes.
Reference: 18. <author> Rekimoto, J. </author> <title> A Multiple Device Approach for Supporting Whiteboard-based Interactions, </title> <booktitle> in Proceedings SIGCHI'98: Human Factors in Computing Systems. 1998. </booktitle> <address> Los Angeles, CA: </address> <pages> pp. 344-351. </pages>
Reference-contexts: Stewart explicitly decided not to support standard widgets and interaction techniques, and instead uses a tools model because it seemed easier for children, and because it avoided many of the issues that needed to be addressed in Amulet. The M-Pad system <ref> [18] </ref> supports multiple users collabora t-ing with PalmPilots and a large whiteboard, which is similar to our PebblesDraw, but there does not seem to be unde r-lying architectural support in their toolkit, and they do not deal with conventional widgets. Most CSCW tools support multiple display groupware. <p> An interesting research question is then how to augment the communication path to support the high-level semantic input from the PalmPilots. For e x-ample, we might include facilities like M-Pad that uses palettes on the PalmPilot to set parameters of objects on the large screen <ref> [18] </ref>. Of course, we want to explore using this architecture to i m-plement many new applications. The CSCW literature contains a number of interesting programs designed for multiple computers, such as Electronic Brainstorming and Structured Idea Generation Process from Univ. of Ar i-zona [15] and Xerox PARCs Cognoter [20].
Reference: 19. <author> Roseman, M. and Greenberg, S., </author> <title> Building Real Time Groupware with GroupKit, A Groupware Toolkit . ACM Tran s-actions on Computer Human Interaction, </title> <booktitle> 1996. </booktitle> <volume> 3 (1): </volume> <pages> pp. 66-106. </pages>
Reference-contexts: Using the Model-View-Controller terminology [9], most previous multiuser systems have had a single model (or multiple models with some kind of synchronization mech a-nism) and multiple View-Controller pairs. For example, this is the design for GroupKit <ref> [19] </ref>. In contrast, our system has a single Model and a single View, but multiple Controllers sharing that one View and Model. MOTIVATION Most ComputerSupported Cooperative Work (CSCW) a p-plications deal with multiple people collaborating, each with their own computer. <p> There are many CSCW toolkits for multi-display group-ware. For example, Rendezvous [8] provides for multiple users, each with their own display supported by a single server. The software architecture replicates the View and Controller parts, and uses constraints to keep them sy n-chronized. Groupkit <ref> [19] </ref> is a multiuser toolkit in tcl/tk which supports a distributed architecture and also uses a multiple View and Controller mechanism. Groupkit is e x-ploring techniques for presenting the pop-up menus and other interactions from users on other computers in a way that will be less disturbing [7]. <p> Each user also picks a particular shape which will be used to identify that users pointing cursor, selected objects, and text editing cursor. Unlike other systems that assign each user a color (e.g., <ref> [3, 19] </ref> ), we assign each user a shape because in a drawing editor, users can create objects of any color. For example, if the blue user was creating a red circle, it would be confusing.
Reference: 20. <author> Stefik, M., et al., </author> <title> Beyond the Chalkboard: Computer Support for Collaboration and Problem Solving in Meetings . Communications of the ACM, </title> <booktitle> 1987. </booktitle> <volume> 30 (1): </volume> <pages> pp. 32-47. </pages>
Reference-contexts: With standard setups, they will have to awkwardly swap places with the person at the PC. Also, there are times when it will be productive for multiple people to provide input at the same time, such as during brainstorming <ref> [15, 20] </ref> . <p> Pebbles is most closely related to the form of multi-display groupware called tightly-coupled WYSIWIS (what you see is what I see) systems. However, these systems were gene r An Implementation Architecture to Support SingleDisplay Groupware - 3 - **Submitted for Publication** ally found to be too limited <ref> [20] </ref>, and most multi-computer systems provide different views for each user, or else use a relaxed WYSIWIS style where, for example, the menus and other widgets are not shared [5]. Thus, these systems avoid the issues that need to be addressed by Pebbles. <p> Of course, we want to explore using this architecture to i m-plement many new applications. The CSCW literature contains a number of interesting programs designed for multiple computers, such as Electronic Brainstorming and Structured Idea Generation Process from Univ. of Ar i-zona [15] and Xerox PARCs Cognoter <ref> [20] </ref>. We want to see which of these will be effective if used with PalmPilots and a single PC display implemented using the architecture described here. Another planned project is joint work with Alex Waibel to use his NPen++ handwriting recognizer [11] with the PalmPilot.
Reference: 21. <author> Stewart, J., et al. </author> <title> When Two Hands Are Better Than One: Enhancing Collaboration Using Single Display Groupware, </title> <booktitle> in Adjunct Proceedings of SIGCHI'98: Human Factors in Computer Systems. 1998. </booktitle> <address> Los Angeles, CA: </address> <pages> pp. 287-288. </pages>
Reference-contexts: Why would multiple people want to provide input to the same computer using separate input devices? The first example is kids collaborating around games and educational software. Background studies have shown that children often argue and fight about who will control a single mouse <ref> [21] </ref>, but when using separate mice, the children exhibited enhanced collaborative behavior. Another study showed that children stay more focused on their tasks when each child has their own mouse and they simultaneously manipulate the same object together [4]. <p> However, the LiveBoard applications do not seem to have been created using a general multiuser arch i-tecture as in Amulet. The term Single Display Groupware was coined by Ste wart et. al. <ref> [21] </ref>. Stewarts KidPad [21] is a SDG environment for kids, where multiple mice are connected to a Unix computer. <p> However, the LiveBoard applications do not seem to have been created using a general multiuser arch i-tecture as in Amulet. The term Single Display Groupware was coined by Ste wart et. al. <ref> [21] </ref>. Stewarts KidPad [21] is a SDG environment for kids, where multiple mice are connected to a Unix computer.
References-found: 21

