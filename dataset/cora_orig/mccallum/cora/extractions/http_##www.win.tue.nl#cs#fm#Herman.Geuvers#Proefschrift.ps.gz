URL: http://www.win.tue.nl/cs/fm/Herman.Geuvers/Proefschrift.ps.gz
Refering-URL: http://www.win.tue.nl/cs/fm/Herman.Geuvers/
Root-URL: http://www.win.tue.nl
Title: Logics and Type Systems een wetenschappelijke proeve op het  des namiddags te 3.30 uur precies door  
Author: gebied van de proefschrift ter verkrijging van de graad van doctor volgens besluit van het College van Decanen in het openbaar te verdedigen Jan Herman Geuvers geboren mei te Deventer 
Date: 14 september 1993,  
Address: dinsdag  
Affiliation: wiskunde en informatica  aan de Katholieke Universiteit Nijmegen,  op  druk: Universiteitsdrukkerij Nijmegen  
Abstract-found: 0
Intro-found: 1
Reference: [Avron et al. 1987] <author> A. Avron, F. Honsell and I. Mason, </author> <title> Using typed lambda calculus to implement formal systems on a machine, </title> <type> Report 87-31, </type> <institution> LFCS Edingurgh, UK. </institution>
Reference: [Barendregt 1984] <author> H.P. Barendregt, </author> <title> The lambda calculus: its syntax and semantics, revised edition. </title> <booktitle> Studies in Logic and the Foundations of Mathematics, </booktitle> <publisher> North Holland. </publisher>
Reference-contexts: But first of all we give a proof of postponement of j-reduction in T, a well-known property of fij-reduction in fl. Postponement of j-reduction We prove the postponement of j-reduction for a set of pseudoterms T by an argument similar to the one used in <ref> [Barendregt 1984] </ref> (Chapter 15) for the untyped lambda calculus. <p> In untyped lambda calculus, if M i fij M 1 and M i fij M 2 , a common reduct of M 1 and M 2 can be found using complete developments. (See <ref> [Barendregt 1984] </ref>.) Here one has to do something more, namely reduce the domains: Consider again M := x:A:(y:B:y)x, M 1 := x:A:x and M 2 := y:B:y.
Reference: [Barendregt 1992] <author> H.P. Barendregt, </author> <title> Typed lambda calculi. </title> <booktitle> In Handbook of Logic in Computer Science, </booktitle> <editor> eds. Abramski et al., </editor> <publisher> Oxford Univ. Press. </publisher>
Reference-contexts: It is also implicit in the work of Berardi ([Berardi 1988]), who describes various examples of Pure Type Systems without insisting on a general definition. Both have been inspired by the notion of the `cube of typed lambda calculi', (see <ref> [Barendregt 1992] </ref>), a first important step towards the notion of PTS. The first coherent study of the meta theory is [Geuvers and Nederhof 1991], which has strongly benefit-ted from suggestions in [Terlouw 1989a]. The main meta-theoretic results of [Geuvers and Nederhof 1991] can also be found in [Barendregt 1992]. <p> lambda calculi', (see <ref> [Barendregt 1992] </ref>), a first important step towards the notion of PTS. The first coherent study of the meta theory is [Geuvers and Nederhof 1991], which has strongly benefit-ted from suggestions in [Terlouw 1989a]. The main meta-theoretic results of [Geuvers and Nederhof 1991] can also be found in [Barendregt 1992]. In what follows we give a slight extension of the notion of PTS, with j-equality, to be able to use it also for our study of the Church-Rosser property (CR) for fij-reduction for the Calculus of Constructions with fij-conversion rule. <p> That is, s 0 : s; s 00 : s 2 A ) s 0 j s 00 ; 1 ; s 0 1 & s 2 j s 0 In <ref> [Barendregt 1992] </ref>, the notion of functional is called `singly-sorted' and the notion of injective is called `singly-occupied'. In [van Benthem Jutting et. al. 1992] there are more definitions of subclasses of Pure Type Systems that are of interest. <p> One only has to distinguish cases according to the sorts that specific subterms are terms or elements of. 4.3. Examples of Pure Type Systems and morphisms 4.3.1. The cube of typed lambda calculi We first treat the so called `cube of typed lambda calculi', as presented by Baren-dregt in <ref> [Barendregt 1992] </ref>. The cube includes well-known systems like the simply typed and polymorphically typed lambda calculus. To show that the two representations of these systems are in fact the same requires some technical but not difficult work. 4.3.1. Definition (Barendregt). <p> a term of a type (e.g. x:oe:x : oe!oe) and (2; ?) means that we can abstract over a kind to define a term of a type (e.g. 82 Pure Type Systems Ch. 4 ff: ? :x:ff:x : ff: ? :ff!ff.) An extensive explanation of these dependencies is given in <ref> [Barendregt 1992] </ref>. As we have already pointed out, the PTS format is not always the most practical if one wants to study a specific system by itself. It is however very convenient if one wants to compare different systems. <p> Proof. By induction on the derivation.fi Similar Propositions hold for PRED and PRED2. They demistify these PTSs enough to be able to verify the stated correspondences. As was noticed by <ref> [Barendregt 1992] </ref>, it is also possible to describe a PTS that corresponds to the subsystem PRED f of PRED (Definition 2.3.7). 4.3.7. Definition. <p> For A a well-typed term of the cube we have A 2 Kind , h (A) = ?; A 2 Type ) h (A) 2 Var 2 ; A 2 Constr , h (A) 2 Var 2 ; A 2 Obj , h (A) 2 Var ? : In <ref> [Barendregt 1992] </ref>, mappings on (subsets of the) well-typed terms of the cube are often defined on a specific subset of the pseudoterms T, and the case distinction in the definition is then made according to the level of terms. <p> This notion of `level' is very close to our notion of `heart', and in fact all the mappings in <ref> [Barendregt 1992] </ref> can be defined similarly by using case distinctions according to the heart of subterms. We try to refrain from defining mappings on the pseudoterms, and instead define mappings only on the well-typed terms as much as possible, because we feel that this is more intuitive.
Reference: [Barendsen 1989] <author> E. Barendsen, </author> <title> Representation of logic, data types and recursive functions in typed lambda calculi, </title> <type> Master's thesis, </type> <institution> University of Nijmegen, Netherlands, </institution> <month> March </month> <year> 1989. </year>
Reference: [Barendsen and Geuvers 1989] <author> E. Barendsen and H. </author> <title> Geuvers, P is conservative over first order predicate logic, </title> <type> Manuscript, </type> <institution> Faculty of Mathematics and Computer Science, University of Nijmegen, Netherlands, </institution>
Reference-contexts: This was explained to us by [Berardi 1990a] and we shall discuss these reasons briefly later. The embedding of PRED into P is complete, as was shown independently by [Berardi 1988] and <ref> [Barendsen and Geuvers 1989] </ref>. We shall give the proof of the latter, which uses a method developped by [Swaen 1989] to show completeness of the formulas-as-types embedding of full first order pedicate logic into Martin-Lof's intuitionistic theory of types. <p> We now give the technical details of the proof of completeness of H : PRED ! P. In <ref> [Barendsen and Geuvers 1989] </ref> this proof appears in a slightly different form. The proof uses techniques developped in [Swaen 1989] to show completeness of the formulas-as-types embedding from first order predicate logic into 146 The Calculus of Constructions Ch. 6 Martin-Lof's intuitionistic theory of types.
Reference: [van Benthem Jutting 1977] <editor> L.S. van Benthem Jutting, </editor> <title> Checking Landau's "Grundlagen" in the Automath system, </title> <type> Ph.D. thesis, </type> <institution> Eindhoven University of Technology, Netherlands, </institution> <year> 1977. </year>
Reference: [van Benthem Jutting 199+] <editor> L.S. van Benthem Jutting, </editor> <title> Typing in Pure Type Systems. </title> <note> To appear in Information and Computation. </note>
Reference-contexts: The general proof for all PTSs is given in <ref> [van Benthem Jutting 199+] </ref>). Both proofs use CR in an essential way, i.e. where the Key Lemma doesn't seem to suffice. The Calculus of Constructions is a relatively `simple' system for which we can prove Strengthening without having to rely on CR. <p> For that reason and because the proof is not ours, we omit it here and refer to <ref> [van Benthem Jutting 199+] </ref> for details (which is the original source.) The idea of using the above Sublemma to prove that (streng) is a derived rule, first appeared in [Luo 1989], who used it for the system ECC. <p> We think that, using the work of <ref> [van Benthem Jutting 199+] </ref>, who gives an analysis of typing in PTSs, these results can be extended to arbitrary normalizing type systems. The most interesting extension, however, is the one to non-normalizing type systems like ?. First because the proof given here relies very heavily on the normalization.
Reference: [van Benthem Jutting et. al. 1992] <author> L.S. van Benthem Jutting, J. McKinna and R.Pollack, </author> <title> Checking Algorithms for Pure Type Systems, </title> <type> Manuscript. </type>
Reference-contexts: That is, s 0 : s; s 00 : s 2 A ) s 0 j s 00 ; 1 ; s 0 1 & s 2 j s 0 In [Barendregt 1992], the notion of functional is called `singly-sorted' and the notion of injective is called `singly-occupied'. In <ref> [van Benthem Jutting et. al. 1992] </ref> there are more definitions of subclasses of Pure Type Systems that are of interest. One of the purposes of that article is to find different sets of rules that generate the same set of derivable judgements, but have easier operational properties. <p> This is especially important for proving the completeness of type checking algorithms. We shall say something more about this in Chapter 6.1. For now we want to describe two of the subclasses of Pure Type Systems that are defined in <ref> [van Benthem Jutting et. al. 1992] </ref>, because they have some importance later in the text. 4.2.8. Definition. 1. A PTS (S; A; R) is full if 8s 1 ; s 2 2 S9s 3 2 S [(s 1 ; s 2 ; s 3 ) 2 R]: 2.
Reference: [Berardi 1988] <author> S. Berardi, </author> <title> Towards a mathematical analysis of the Coquand-Huet calculus of constructions and the other systems in Barendregt's cube. </title> <institution> Dept. Computer Science, Carnegie-Mellon University and Dipartimento Matematica, Universita di Torino, Italy. </institution>
Reference-contexts: By induction on derivations or the structure of terms, using the Lemma.fi We shall go into more details about the Calculus of Constructions and other systems of the cube later, in Chapter 6.1. 4.3.2. Logics as Pure Type Systems Other interesting example of PTSs were given by <ref> [Berardi 1988] </ref>, who defined logical systems as PTSs. In Chapter 3.1 we encountered the typed lambda calculi flPRED (Definition 3.2.1), flPRED2 and flPRED! (Definition 3.2.19) that correspond directly to the logical systems PRED, PRED2 and PRED!, as defined in 2.2.6. <p> This was explained to us by [Berardi 1990a] and we shall discuss these reasons briefly later. The embedding of PRED into P is complete, as was shown independently by <ref> [Berardi 1988] </ref> and [Barendsen and Geuvers 1989]. We shall give the proof of the latter, which uses a method developped by [Swaen 1989] to show completeness of the formulas-as-types embedding of full first order pedicate logic into Martin-Lof's intuitionistic theory of types.
Reference: [Berardi 1989] <author> S. Berardi, </author> <title> Talk given at the `Jumelage meeting on typed lambda calculus', </title> <publisher> Edinburgh, </publisher> <month> September </month> <year> 1989. </year> <note> 191 192 Bibliography </note>
Reference-contexts: CC is conservative over !. This was proved independently by [Paulin 1989] and <ref> [Berardi 1989] </ref>; we give the proof in paragraph 6.5.3. It is quite similar to the proof of conserva-tivity of PREDn over PROPn that we gave in Chapter 2.1. As already pointed out, the formulas-as-types embedding from higher order predicate logic in CC is not complete. <p> In CC, take M j z:(9x:A:P x):y:(A!'):y (px), with p as in Remark 6.5.1. fi Even without using empty domains the embedding is not complete, as was first independently shown by <ref> [Berardi 1989] </ref> and [Geuvers 1989].
Reference: [Berardi 1990] <author> S. Berardi, </author> <title> Type dependence and constructive mathematics, </title> <type> Ph.D. thesis, </type> <institution> Universita di Torino, Italy. </institution>
Reference-contexts: We shall refer to it as CC. The systems of the cube are usually presented as follows. ! - P! (= CC) 2 - P2 ! - P! where an arrow denotes inclusion of one system in another. Remember that we also defined the logic cube (Definition 4.3.5), following <ref> [Berardi 1990] </ref> as follows. <p> The proof uses techniques developped in [Swaen 1989] to show completeness of the formulas-as-types embedding from first order predicate logic into 146 The Calculus of Constructions Ch. 6 Martin-Lof's intuitionistic theory of types. A different proof of the same result can be found in <ref> [Berardi 1990] </ref>. <p> This mapping will go from a system in the right plane to the adjacent system in the left plane and is the identity on terms that are already well-typed in the left plane. Hence the conservativity. The proof is originally independently due to [Paulin 1989] and <ref> [Berardi 1990] </ref>. The first described the mapping from P! to ! in the first place to use it for program extraction; the second described the collection of four mappings (which is a straightforward generalisation of the mapping from P! to !) to give a conservativity proof. <p> The mappings are very much related to similar mappings one can define from predicate logic to proposition logic to prove conservativity of the first over the second. 6.5.23. Definition ([Paulin 1989] and <ref> [Berardi 1990] </ref>). Let S 2 be a system of the right plane and S 1 the adjacent system in the left plane.
Reference: [Berardi 1990a] <author> S. </author> <title> Berardi, </title> <type> Private Communication. </type>
Reference-contexts: Therefore we shall use the more correct terminology of `(in)completeness of the embedding' here. For the embedding into P2 the question is still open, although there are reasons to believe that the embedding is not complete. This was explained to us by <ref> [Berardi 1990a] </ref> and we shall discuss these reasons briefly later. The embedding of PRED into P is complete, as was shown independently by [Berardi 1988] and [Barendsen and Geuvers 1989]. <p> Although we have no proof, there are reasons to believe that the embedding H from PRED2 into P2 is also incomplete if we do not allow empty domains in the logic. These reasons were provided by <ref> [Berardi 1990a] </ref> who suggests a proof of incompleteness. To understand the idea, we think it is best to look at an extension of PRED2 with polymorphic sets. 6.5.4. Definition. <p> We don't have a definite answer to this, but we do have reasons to believe that the extension is not conservative. The idea comes from <ref> [Berardi 1990a] </ref>. Look at the context := A:Set; a; a 0 :A; z:a 6= A a 0 ; which describes a similarity type in the logic.
Reference: [Berardi 199+] <author> S. Berardi, </author> <title> Encoding of data types in Pure Construction Calculus: a semantic justification. </title> <booktitle> To appear in the Proceedings of the second BRA meeting on Logical Frameworks, </booktitle> <address> Edinburgh, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: This follows from a recent result by Berardi, which we shall discuss here only for what concerns the implications for the formulas-as-types embedding. For details and proofs we refer to <ref> [Berardi 199+] </ref>. The point is that for purposes of deriving programs from proofs, it doesn't seem to make sense to declare a theory in the context. Instead one uses the definable impredicative data types and inductive predicates on them, as is done in the examples of 6.4.3. <p> EXT ! 9x:Nat:Sx = Nat x (see the second proof of Proposition 6.5.3) and Ind Nat &(Z 6= Nat SZ) ! x; y:Nat:(Sx = Nat Sy)!(x = Nat y) (see Example 6.4.2.)) First we have to consider only the strongest version of inductive data types, called parametric data types in <ref> [Berardi 199+] </ref>. <p> For example Nat fi Nat and 2 Nat fi List of the Examples in 6.4.3 are inductive predicates.) In <ref> [Berardi 199+] </ref> all this is defined in set-theoretic terms and then translated into CC. Following [Berardi 199+], we do not denote this translation explicitly (but there are no ambiguities about this.) The main result of [Berardi 199+] is now saying that for ' a proposition in the set Pos, if ` <p> For example Nat fi Nat and 2 Nat fi List of the Examples in 6.4.3 are inductive predicates.) In <ref> [Berardi 199+] </ref> all this is defined in set-theoretic terms and then translated into CC. Following [Berardi 199+], we do not denote this translation explicitly (but there are no ambiguities about this.) The main result of [Berardi 199+] is now saying that for ' a proposition in the set Pos, if ` M :' in CC for some term M , and is satisfied in the model <p> Nat and 2 Nat fi List of the Examples in 6.4.3 are inductive predicates.) In <ref> [Berardi 199+] </ref> all this is defined in set-theoretic terms and then translated into CC. Following [Berardi 199+], we do not denote this translation explicitly (but there are no ambiguities about this.) The main result of [Berardi 199+] is now saying that for ' a proposition in the set Pos, if ` M :' in CC for some term M , and is satisfied in the model PER, then ' is provable in Set theory. <p> Here PER is some model based on the interpretation of propositions of CC as partial equivalence relations on fl (the set of untyped lambda terms.) The model-construction is in <ref> [Berardi 199+] </ref>; we will not go into it here but state the important facts that for all parametric data type D, the interpretation of Ind D in PER is not empty, which means that z:Ind D is satisfied. <p> ; a:Ind Nat ; b:Z 6= Nat SZ ` P : '; where D 1 ; : : : ; D n are the parametric data types that occur in '. (We omit the mapping H for reasons of readability.) In view of the proof of the original result in <ref> [Berardi 199+] </ref>, we have a strong feeling that this adapted completeness of the formulas-as-types embedding from PRED! p into CC holds. However, it is not as general as the original result; one would like to allow more assumptions then just those stating the parametricity of the data types.
Reference: [Bohm and Berarducci 1985] <author> C. Bohm and A. Berarducci, </author> <title> Automatic synthesis of typed fl-programs on term algebras Theor. </title> <journal> Comput. Science, </journal> <volume> 39, </volume> <pages> pp 135-154. </pages>
Reference-contexts: We feel this is necessary for a good understanding of CC. For this purpose it doesn't matter if we consider the versions that we called F and F! or the PTS fi -versions that we called 2 and !. Details of the encoding can be found in <ref> [Bohm and Berarducci 1985] </ref> and [Girard et al. 1989]. We just treat three examples. 6.4.1. Examples. 1.
Reference: [Boyer and Moore 1988] <author> R.S. Boyer and J.S. Moore, </author> <title> A Computational Logic Handbook . Academic Press, </title> <address> Boston. </address>
Reference: [de Bruijn 1974] <author> N.G. de Bruijn, </author> <title> Some extensions of AUTOMATH: The AUT-4 family, </title> <type> Internal Report, </type> <institution> University of Technology, Eindhoven, Netherlands. </institution>
Reference: [de Bruijn 1980] <author> N.G. de Bruijn, </author> <title> A survey of the project Automath, In To H.B. Curry: Essays on Combinatory Logic, Lambda Calculus and Formalism, </title> <editor> eds. J.P. Seldin, J.R. Hindley, </editor> <publisher> Academic Press, </publisher> <address> New York, </address> <pages> pp 580-606. </pages>
Reference: [CC-documentation] <institution> The Calculus of Constructions, </institution> <note> documentation and users guide, version 4.10, Technical report, INRIA, </note> <month> August </month> <year> 1989. </year>
Reference: [Church 1940] <author> A. Church, </author> <title> A formulation of the simple theory of types J. </title> <journal> Symbolic Logic, </journal> <volume> 5, </volume> <pages> pp 56-68. </pages>
Reference: [Constable et.al. 1986] <author> R.L. Constable et.al., </author> <title> Implementing Mathematics with the Nuprl Proof Development System. </title> <publisher> Prentice-Hall. </publisher>
Reference: [Coquand 1985] <author> Th. Coquand, </author> <title> Une theorie des constructions, </title> <institution> These de troisieme cycle, Universite Paris VII, France, </institution> <month> January </month> <year> 1985. </year>
Reference-contexts: The system P is very close to LF, due to [Harper et al. 1987] (see Definition 3.3.6), in fact LF is the PTS fij variant of P. The system P! is the Calculus of Constructions, due to <ref> [Coquand 1985] </ref>. (See also [Coquand and Huet 1988].) The system P2 was defined under the same name by [Longo and Moggi 1988]. <p> We want to state two of the most important properties of CC. 6.3.7. Theorem. CC is strongly normalizing. (All fi-reduction sequences starting from an M 2 Term (CC) are finite.) Proof. A detailed proof is given in Chapter 7.1. fi A first proof of normalization can be found in <ref> [Coquand 1985] </ref>, but the proof contained a bug as was remarked by Jutting. Coquand repaired his own proof in [Coquand 1986] and together with Gallier he gave a (different) proof of strong normalization in [Coquand and Gallier 1990]. <p> The proof is prooftheoretically hard beacuse it depends on normalization. Note therefore that type checking in the restricted calculus is much easier, due to the `easy' normalization proof. Some hints towards a proof can be found in [Coquand and Huet 1988] and more details in <ref> [Coquand 1985] </ref> and especially in [Martin-Lof 1971]. See also [Harper and Pollack 1991] for an exposition on the decidability of typing for an extended version of CC, which also describes an algorithm for computing a type. 6.4. <p> Although the main concern of this Chapter is the Calculus of Constructions, we also look at the embedding into the other systems. In fact there are other ways of interpreting PRED! in CC, but the one we describe here is what the inventor (s) of CC aim at (see <ref> [Coquand 1985] </ref> and [Coquand and Huet 1988]), and which is sometimes called the `canonical embedding' of higher order predicate logic into CC.
Reference: [Coquand 1986] <author> Th. Coquand, </author> <title> An analysis of Girard's paradox, </title> <booktitle> Proceedings of the first symposium on Logic in Computer Science, </booktitle> <address> Cambridge Mass., </address> <publisher> IEEE, </publisher> <pages> pp 227-236. </pages>
Reference-contexts: For U the proof is in [Girard 1972]. A good explanation of it and a discussion of applications of the proof to other type systems can be found in <ref> [Coquand 1986] </ref>. This fact has become known as Girard's paradox, especially in its application to the system ?. The proof for U is in [Coquand 199+]. <p> A detailed proof is given in Chapter 7.1. fi A first proof of normalization can be found in [Coquand 1985], but the proof contained a bug as was remarked by Jutting. Coquand repaired his own proof in <ref> [Coquand 1986] </ref> and together with Gallier he gave a (different) proof of strong normalization in [Coquand and Gallier 1990]. There are various other versions of (strong) normalization proofs for CC in the literature.
Reference: [Coquand 1986a] <author> Th. Coquand, </author> <title> A Calculus of Constructions, </title> <type> Manuscript, </type> <institution> INRIA, France. </institution>
Reference: [Coquand 1990] <author> Th. Coquand, </author> <title> Metamathematical investigations of a calculus of constructions. </title> <booktitle> In Logic and Computer Science, </booktitle> <editor> ed. P.G. Odifreddi, </editor> <booktitle> APIC series, </booktitle> <volume> vol. 31, </volume> <publisher> Academic Press, </publisher> <pages> pp 91-122. Bibliography 193 </pages>
Reference-contexts: into CC is not complete (CC proves more propositions than PRED!), one may wonder whether there are propositions that CC can not prove, or to pose the question differently, is CC consistent? That this is the case can be shown quite easily by giving a two-point model for CC. (See <ref> [Coquand 1990] </ref>.) The type ? is interpreted as f;; f;gg (or f0; 1g in the language of ZF) and if ` M : A, the interpretation of M is in the set A. This model is also called the `proof-irrelevance' model (e.g. in [Coquand 1990]) because in the model all proofs <p> giving a two-point model for CC. (See <ref> [Coquand 1990] </ref>.) The type ? is interpreted as f;; f;gg (or f0; 1g in the language of ZF) and if ` M : A, the interpretation of M is in the set A. This model is also called the `proof-irrelevance' model (e.g. in [Coquand 1990]) because in the model all proofs of a proposition are mapped to the same element 0. <p> So the consistency of CC follows from the consistency of higher order propositional logic and the conservativity of CC over !. (Proposition 6.5.21.) It is not so easy to construct the model 156 The Calculus of Constructions Ch. 6 immediately for CC, a problem that is solved in <ref> [Coquand 1990] </ref> by describing the model for a variant of CC. Here we use the mapping [] from CC to ! for this purpose. Before constructing the model we want to recall some properties of ! that will be used. They have already been stated in Proposition 4.3.4. <p> In [Seldin 1990] one can find a detailed proof of the consistency of a context that represents Peano Arithmetic in a system that is a slight extension of CC. Coquand shows in <ref> [Coquand 1990] </ref> by a normalization argument that the context INF = A:?; a:A; f:A!A; R:A!A! ? is consistent. When contexts become larger, a consistency proof by the normalization argument can of course get very involved. <p> (<ref> [Coquand 1990] </ref>), showing that CC with classical logic and a derivation rule for a strong version of disjoint sum yields proof irrelevance. Let's also state this result, but not by adding a derivation rule but by adding an axiom, which really amounts to the same as the rule used in [Coquand 1990]. (Using the result by Reynolds that polymorphism is not set-theoretic, Berardi has proved that in CC, classical logic with a stronger form of definite descriptions (replacing the 9! by 9) implies PI. See [LEGO-examples] for details.) 6.6.7. Proposition ([Coquand 1990]). `Classical logic' with `disjunction property for classical proofs' implies <p> In <ref> [Coquand 1990] </ref> it is proved by using the fact that if in one can construct A : ?, E : A!?, * : ?!A and a proof of 8ff: ? :ff $ E (*ff), then proves ?. 6.7.
Reference: [Coquand 1991] <author> Th. Coquand, </author> <title> An algorithm for testing conversion in type theory. </title> <editor> In Huet and Plotkin (eds.), </editor> <title> Logical Frameworks, </title> <publisher> Cambridge Univ. Press. </publisher>
Reference: [Coquand 199+] <author> Th. Coquand, </author> <title> A new paradox in type theory, </title> <booktitle> to appear in Proceedings of the 9th International Congress of Logic, Methodology and Philosophy of Science, </booktitle> <address> Uppsala, Sweden 1991. </address>
Reference-contexts: A good explanation of it and a discussion of applications of the proof to other type systems can be found in [Coquand 1986]. This fact has become known as Girard's paradox, especially in its application to the system ?. The proof for U is in <ref> [Coquand 199+] </ref>. It internalises Reynold's argument that there are no set-theoretic models of the polymorphic lambda calculus. fi Using the meta-theory for Pure Type Systems, it is easy to see that in an inconsistent system there are terms that have no normal form.
Reference: [Coquand and Gallier 1990] <author> Th. Coquand and J. Gallier, </author> <title> A proof of strong normalization for the Theory of Constructions using a Kripke-like interpretation, </title> <booktitle> Informal Proceedings of the BRA-Logical Frameworks meeting, Antibes 1990, </booktitle> <pages> pp 479-497 </pages>
Reference-contexts: Coquand repaired his own proof in [Coquand 1986] and together with Gallier he gave a (different) proof of strong normalization in <ref> [Coquand and Gallier 1990] </ref>. There are various other versions of (strong) normalization proofs for CC in the literature.
Reference: [Coquand and Herbelin 1992] <author> Th. Coquand and H. Herbelin, </author> <title> An Application of A-translation to the existence of families of looping combinators in inconsistent Type Systems, </title> <note> to appear in Journal of Functional Programming. </note>
Reference-contexts: One could say that a PTS is inconsistent if all closed types of a specific sort that is intended to be the sort of all formulas, are inhabited by a closed term, but that is not always satisfying. In <ref> [Coquand and Herbelin 1992] </ref>, a restriction is made to so called logical PTSs: systems that have two specific sorts Prop and Type with the oproperties that Prop : Type is an axiom, (Type; Prop) is a rule, the system is functional and there are no sorts of type Prop. <p> See for example <ref> [Coquand and Herbelin 1992] </ref>.) 8.2. Semantical version of the systems In fact the Confluence property (Conjecture 8.1.4) is the one that justifies the use of Pure Type Systems with (conv fij ) in the first place.
Reference: [Coquand and Huet 1988] <author> Th. Coquand and G. Huet, </author> <title> The calculus of constructions, </title> <journal> Information and Computation, </journal> <volume> 76, </volume> <pages> pp 95-120. </pages>
Reference-contexts: The system P is very close to LF, due to [Harper et al. 1987] (see Definition 3.3.6), in fact LF is the PTS fij variant of P. The system P! is the Calculus of Constructions, due to [Coquand 1985]. (See also <ref> [Coquand and Huet 1988] </ref>.) The system P2 was defined under the same name by [Longo and Moggi 1988]. <p> In the proof of Chapter 7.1 this becomes also clear: The whole problem of SN for CC is reduced to the problem of SN for erased terms in F! (in which case we have only the 0-redexes left.) In <ref> [Coquand and Huet 1988] </ref>, a version of CC is discussed in which the conversion rule is restricted to performing fi P and fi ! -reductions. There it is called the restricted Calculus of Constructions. 6.3.8. Definition. <p> If such a term A exists, it can be computed effectively. The proof is prooftheoretically hard beacuse it depends on normalization. Note therefore that type checking in the restricted calculus is much easier, due to the `easy' normalization proof. Some hints towards a proof can be found in <ref> [Coquand and Huet 1988] </ref> and more details in [Coquand 1985] and especially in [Martin-Lof 1971]. See also [Harper and Pollack 1991] for an exposition on the decidability of typing for an extended version of CC, which also describes an algorithm for computing a type. 6.4. <p> There is however also the possibility to restrict the conversion rule of CC, such that only some convertible propositions are identified. (A system like this is described in <ref> [Coquand and Huet 1988] </ref>.) It should be clear that in any of the two approaches the distinction between domains, objects and proofs is blurred: propositions may contain proofs and there is no a priori distinction between domains and propositions. <p> In fact there are other ways of interpreting PRED! in CC, but the one we describe here is what the inventor (s) of CC aim at (see [Coquand 1985] and <ref> [Coquand and Huet 1988] </ref>), and which is sometimes called the `canonical embedding' of higher order predicate logic into CC.
Reference: [Coquand and Huet 1985] <author> Th. Coquand and G. Huet, </author> <title> Constructions: a higher order proof system for mechanizing mathematics. </title> <booktitle> Proceedings of EUROCAL '85, </booktitle> <address> Linz, </address> <publisher> LNCS 203. </publisher>
Reference: [Coquand and Mohring 1990] <author> Th. Coquand and Ch. </author> <title> Paulin-Mohring Inductively defined types, </title> <editor> In P. Martin-Lof and G. Mints editors. </editor> <booktitle> COLOG-88 : International conference on computer logic, </booktitle> <publisher> LNCS 417. </publisher>
Reference: [Curry and Feys 1958] <author> H.B. Curry and R. </author> <title> Feys, </title> <booktitle> Combinatory Logic, </booktitle> <volume> Vol. </volume> <publisher> 1 . North-Holland. </publisher>
Reference: [van Daalen 1973] <author> D. van Daalen, </author> <title> A description of AUTOMATH and some aspects of its language theory, </title> <editor> In P. Braffort, ed. </editor> <booktitle> Proceedings of the symposium on APL, </booktitle> <address> Paris. </address>
Reference: [van Daalen 1980] <author> D. van Daalen, </author> <title> The language theory of AUTOMATH, </title> <type> Ph.D. thesis, </type> <institution> Eindhoven Technological University, </institution> <address> The Netherlands, </address> <month> Februari </month> <year> 1980. </year>
Reference: [van Dalen 1983] <author> D. van Dalen, </author> <title> Logic and Structure, second edition. </title> <publisher> Springer Verlag. </publisher>
Reference: [Dowek et al. 1991] <author> G. Dowek, A. Felty, H. Herbelin, G. Huet, Ch. Paulin-Mohring, B. Werner, </author> <title> The Coq proof assistant version 5.6, user's guide. </title> <institution> INRIA Rocquencourt - CNRS ENS Lyon. </institution> <address> 194 Bibliography </address>
Reference: [Gallier 1990] <author> J. Gallier, </author> <title> On Girard's "Candidats de Reductibilite". </title> <booktitle> In Logic and Computer Science, </booktitle> <editor> ed. P.G. Odifreddi, </editor> <booktitle> APIC series, </booktitle> <volume> vol. 31, </volume> <publisher> Academic Press, </publisher> <pages> pp 123-204. </pages>
Reference-contexts: A detailed explanation of the method can be found in <ref> [Gallier 1990] </ref>. The proof of strong normalization in Chapter 7.1 is given by defining a reduction preserving Sec. 6.3 Some more meta-theory for CC 133 mapping from CC to F!. Then SN for CC follows from SN for F!.
Reference: [Gardner 1992] <author> P. Gardner, </author> <title> Representing logics in type theory, </title> <type> Ph.D. thesis, </type> <institution> University of Edinburgh, UK, </institution> <month> January </month> <year> 1992. </year>
Reference: [Geuvers 1988] <author> H. </author> <title> Geuvers, The interpretation of logics in type systems, </title> <type> Master's thesis, </type> <institution> University of Nijmegen, Netherlands, </institution> <month> August </month> <year> 1988. </year>
Reference: [Geuvers 1989] <author> J.H. </author> <title> Geuvers, Talk given at the `Jumelage meeting on typed lambda calculus', </title> <publisher> Edinburgh, </publisher> <month> September </month> <year> 1989. </year>
Reference-contexts: In CC, take M j z:(9x:A:P x):y:(A!'):y (px), with p as in Remark 6.5.1. fi Even without using empty domains the embedding is not complete, as was first independently shown by [Berardi 1989] and <ref> [Geuvers 1989] </ref>.
Reference: [Geuvers 1990] <author> J.H. </author> <title> Geuvers, Type systems for higher order predicate logic, </title> <type> Manuscript, </type> <institution> University of Nijmegen, Netherlands, </institution> <month> May </month> <year> 1990. </year>
Reference: [Geuvers and Nederhof 1991] <author> J.H. Geuvers and M.J. Nederhof, </author> <title> A modular proof of strong normalisation for the calculus of constructions. </title> <journal> Journal of Functional Programming, </journal> <volume> vol 1 (2), </volume> <pages> pp 155-189. </pages>
Reference-contexts: We give a list of examples of systems in the form of a PTS and then give a detailed study of the meta theory. The notion of a PTS first appears explicitly in <ref> [Geuvers and Nederhof 1991] </ref> under the name GTS (Generalised Type System), where it is used to describe the so called `cube of typed lambda calculi' of Barendregt and its meta theory. <p> Both have been inspired by the notion of the `cube of typed lambda calculi', (see [Barendregt 1992]), a first important step towards the notion of PTS. The first coherent study of the meta theory is <ref> [Geuvers and Nederhof 1991] </ref>, which has strongly benefit-ted from suggestions in [Terlouw 1989a]. The main meta-theoretic results of [Geuvers and Nederhof 1991] can also be found in [Barendregt 1992]. <p> The first coherent study of the meta theory is <ref> [Geuvers and Nederhof 1991] </ref>, which has strongly benefit-ted from suggestions in [Terlouw 1989a]. The main meta-theoretic results of [Geuvers and Nederhof 1991] can also be found in [Barendregt 1992]. <p> This `Key Lemma' will do the job in almost all cases where we used CR in the study of the meta theory of PTSs with only fi-conversion in <ref> [Geuvers and Nederhof 1991] </ref>. One important case is missing, which is Subject Reduction for j (SR for j), saying that if ` M : A and M i j N, then ` N : A. <p> It seems that the proof can't be done without having first established a proof of Strengthening: 1 ; x:A; 2 ` M : B ) In <ref> [Geuvers and Nederhof 1991] </ref> there is a proof of this rule for a certain subclass of PTSs. The general proof for all PTSs is given in [van Benthem Jutting 199+]). Both proofs use CR in an essential way, i.e. where the Key Lemma doesn't seem to suffice. <p> study the collection of pseudoterms T in a bit more detail and prove a very weak form of Church-Rosser property for fij-reduction on T, just enough to handle most of the cases where we used CR of fi-reduction in the meta theory of PTS fi (as it was given in <ref> [Geuvers and Nederhof 1991] </ref>.) We now want to give some examples of type systems that fit in the PTS framework and also say something about mappings between PTSs. The framework yields a nice tool for describing a specific class of mappings between type systems that we call PTS-morphisms. <p> Meta theory of Pure Type Systems In this section we want to treat the meta theory for our different notions of Pure Type System. For the PTS fi s, most of the results that are listed here have already been treated in <ref> [Geuvers and Nederhof 1991] </ref>. A lot of the proofs in that paper can immediately be extended to the cases for PTS fij and PTS s fij , but not all. The essential problem is that the Church-Rosser property for fij-reduction does not hold for T (the set of pseudoterms). <p> The author and Nederhof used it (in the joint paper <ref> [Geuvers and Nederhof 1991] </ref>) to give the proof for functional PTS fi s. (For this case the situation is easier because we have Uniqueness of Types.) We shortly repeat that proof here. Proof. of the Sublemma for functional PTS fi s. <p> Therefore we shall look into this matter again in detail when we study the Calculus of Constructions with fij-conversion. Let us remark here that the following Lemmas are not true if we drop the restriction to injective systems; a counterexample can be found in <ref> [Geuvers and Nederhof 1991] </ref>. 4.4.37. Classification Lemma for injective systems. For s; s 0 sorts, s 6j s 0 , s-Term " s 0 Term=;; s-Elt " s 0 -Elt = ;: Proof. <p> This may look problematic but in practice it isn't. For example for the Calculus of Constructions, the strong normalization proof in <ref> [Geuvers and Nederhof 1991] </ref> for the system with (conv fi ) can quite easily be adapted to a proof of strong normalization for the system with (conv fij ). We conjecture here the general theorem that, if a PTS fi is (strongly) normalizing, then the PTS fij is. <p> The proof we give here is a generalisation of the proof of SN fi for CC fi , given in <ref> [Geuvers and Nederhof 1991] </ref>. <p> Obtaining SN fij for CC from SN fij for F! We define a reduction preserving mapping from CC fij to F! fij . The mapping is the same as the one in <ref> [Geuvers and Nederhof 1991] </ref>, where it was defined as a mapping from CC fi to F! fi to prove the strong normalization property for CC fi . <p> The problem with the extension to CC fij is that we don't have all the meta theory for CC fij that was used in <ref> [Geuvers and Nederhof 1991] </ref> for the CC fi case. In the following we verify that the whole argument can still go through. <p> kinds and sorts of CC to types and kinds and sorts of F! fij such that ` CC fij M : A ) o () ` F! fij [[M ]] : o (A): In order to get a feeling for the mappings [[]] and o we give some heuristics (following <ref> [Geuvers and Nederhof 1991] </ref>.) The idea of the mappings in [Harper et al. 1987] is to replace redexes that use type dependency by !-redexes. <p> Lemma. For M 2 Term (CC fij ), M not an object, ` CC fij M : A ) o () ` F ! fij o (M ) : ae (A): Proof. The proof is the same as in <ref> [Geuvers and Nederhof 1991] </ref> for CC fi , so by induction on the derivation. <p> Lemma. ` CC fij M : A ) o () ` F ! fij [[M ]] : o (A) Proof. By induction on the structure of terms as in <ref> [Geuvers and Nederhof 1991] </ref>, using Lemma 7.3.13 and the Stripping Lemma 4.4.27. We treat the cases for M being a -abstraction, a -abstraction or an applicatioin. -abstr. Say M j u:B:C and note that A can only be ? or 2.
Reference: [Geuvers 1992] <author> J.H. </author> <title> Geuvers, The Church-Rosser property for fij-reduction in typed lambda calculi. </title> <booktitle> In Proceedings of the seventh annual symposium on Logic in Computer Science, </booktitle> <address> Santa Cruz, </address> <publisher> Cal., IEEE, </publisher> <pages> pp 453-460. </pages>
Reference-contexts: The way out is suggested in the work of Salvesen ([Salvesen1991]) on proving CR for fij-reduction for LF. The trick is to first add Strengthening as a rule to the system. (This was also suggested in <ref> [Geuvers 1992] </ref> as an alternative; as things stand it is not an alternative method but the only possible one.) Many problems then vanish: The addition of a rule (strengthening) does not complicate the known meta theory and allows to prove SR for j for the extended PTS notion. <p> At the end of this section we shall make some comments on this and also on the proof, which we believe has some deficits. In giving the proof we roughly follow <ref> [Geuvers 1992] </ref>. In fact the proof we give here is an expanded and updated version of the one that was given in there. We have changed the order of the lemmas a bit to stress which properties are general and which ones are specific properties of functional normalizing PTSs. 5.2.
Reference: [Geuvers 199+] <author> J.H. </author> <title> Geuvers, The Calculus of Constructions and higher order logic, </title> <note> to appear in The Curry-Howard isomorphism, </note> <institution> 8eme volume des cahiers du Centre de Logique de l'Universite Catholique de Louvain, eds. M. Crabbe and Ph. de Groote. </institution>
Reference: [Girard 1971] <author> J.-Y. Girard, </author> <title> Une extension de l'interpretation fonctionnelle de Godel a l'analyse et son application a l'elimination des coupures dans l'analyse et la theorie des types. </title> <booktitle> Proceedings of the Second Scandinavian Logic Symposium, </booktitle> <editor> ed. J.E. Fenstad, </editor> <publisher> North-Holland. </publisher>
Reference-contexts: S = Prop; Type; Type 0 ; A = Prop : Type; Type : Type 0 ; R = (Type; Type); (Type 0 ; Type) (Prop; Prop); (Type; Prop) The system U is defined by extending U with the rule (Type 0 ; Prop). In <ref> [Girard 1971] </ref> these systems are discussed as logics. They are obtained by extending PRED! with polymorphic domains (system U ) and with quantification over all domains (together with the polymorphic domains, this forms the system U ).
Reference: [Girard 1972] <author> J.-Y. Girard, </author> <title> Interpretation fonctionelle et elimination des coupures dans l'arithmetique d'ordre superieur. </title> <type> Ph.D. thesis, </type> <institution> Universite Paris VII, France. </institution>
Reference-contexts: Theorem. Both U and U are inconsistent, i.e. in both systems there is a term M with ` M : ?(j ff:Prop:ff) Proof. For U the proof is in <ref> [Girard 1972] </ref>. A good explanation of it and a discussion of applications of the proof to other type systems can be found in [Coquand 1986]. This fact has become known as Girard's paradox, especially in its application to the system ?. The proof for U is in [Coquand 199+].
Reference: [Girard 1986] <author> J.-Y. Girard, </author> <title> The system F of variable types, fifteen years later. </title> <journal> TCS 45, </journal> <pages> pp 159-192. </pages>
Reference: [Girard et al. 1989] <author> J.-Y. Girard, Y. Lafont and P. Taylor, </author> <title> Proofs and types, Camb. </title> <booktitle> Tracts in Theoretical Computer Science 7, </booktitle> <publisher> Cambridge University Press. </publisher>
Reference-contexts: There are various other versions of (strong) normalization proofs for CC in the literature. All of them use a higher order variant of the `candidat de reducibilite' method as developped by Girard for proving strong normalisation for his system F and F!. (See <ref> [Girard et al. 1989] </ref> for the proof for system F.) The idea is to define a kind of realisability model in which propositions are interpreted as sets of lambda terms (the realisers). A detailed explanation of the method can be found in [Gallier 1990]. <p> For this purpose it doesn't matter if we consider the versions that we called F and F! or the PTS fi -versions that we called 2 and !. Details of the encoding can be found in [Bohm and Berarducci 1985] and <ref> [Girard et al. 1989] </ref>. We just treat three examples. 6.4.1. Examples. 1. <p> In this way we avoid the need to define the so called `candi-dats de reducibilite' as typed sets, as is done for example in <ref> [Girard et al. 1989] </ref>.
Reference: [Gordon et al. 1976] <author> M.J. Gordon, A.J. Milner, </author> <title> A.P. </title> <publisher> Wadsworth, Edinburgh LCF , LNCS 89. Bibliography 195 </publisher>
Reference: [Gordon 1988] <author> M.J. Gordon, </author> <title> HOL: a proof generating system for higher-order logic. VLSI specification, Verification and Synthesis, </title> <editor> Eds. G. Birtwistle and P.A. Subrahmanyam, </editor> <publisher> Kluwer, Dordrecht, </publisher> <pages> pp 73-128. </pages>
Reference: [Harper et al. 1987] <author> R. Harper, F. Honsell and G. Plotkin, </author> <title> A framework for defining logics. </title> <booktitle> Proceedings Second Symposium on Logic in Computer Science, </booktitle> <address> (Ithaca, N.Y.), </address> <publisher> IEEE, </publisher> <address> Washington DC, </address> <pages> pp 194-204. </pages>
Reference-contexts: This situation only occurs in the presence of the rule (?; 2). In that case there is no other syntax for the systems which is essentially more convenient then the PTS format. The system P is very close to LF, due to <ref> [Harper et al. 1987] </ref> (see Definition 3.3.6), in fact LF is the PTS fij variant of P. The system P! is the Calculus of Constructions, due to [Coquand 1985]. (See also [Coquand and Huet 1988].) The system P2 was defined under the same name by [Longo and Moggi 1988]. <p> In the following we verify that the whole argument can still go through. The original intuition of the mapping is due to <ref> [Harper et al. 1987] </ref> who define a fij-reduction preserving mapping from LF to ! to prove the strong normalization of LF. The map [[]] that will be used can be seen as a higher order version of the map defined by [Harper et al. 1987], although things get quite a bit <p> The original intuition of the mapping is due to <ref> [Harper et al. 1987] </ref> who define a fij-reduction preserving mapping from LF to ! to prove the strong normalization of LF. The map [[]] that will be used can be seen as a higher order version of the map defined by [Harper et al. 1987], although things get quite a bit more complicated here. It's also possible to restrict the map [[]] to Term (P2), to derive the result 2 j= SN fij ) P2 j= SN fij . <p> sorts of F! fij such that ` CC fij M : A ) o () ` F! fij [[M ]] : o (A): In order to get a feeling for the mappings [[]] and o we give some heuristics (following [Geuvers and Nederhof 1991].) The idea of the mappings in <ref> [Harper et al. 1987] </ref> is to replace redexes that use type dependency by !-redexes.
Reference: [Harper and Pollack 1991] <author> R. Harper and R. Pollack, </author> <title> Type checking with universes, </title> <journal> TCS 89, </journal> <pages> pp 107-136. </pages>
Reference-contexts: Note therefore that type checking in the restricted calculus is much easier, due to the `easy' normalization proof. Some hints towards a proof can be found in [Coquand and Huet 1988] and more details in [Coquand 1985] and especially in [Martin-Lof 1971]. See also <ref> [Harper and Pollack 1991] </ref> for an exposition on the decidability of typing for an extended version of CC, which also describes an algorithm for computing a type. 6.4.
Reference: [Heyting 1934] <author> A. Heyting, </author> <title> Mathematische Grundlagenforschung. </title> <publisher> Intuitionismus. Beweistheorie, Springer, </publisher> <address> Berlin. </address> <note> Reprinted 1974. </note>
Reference: [Howard 1980] <author> W.A. Howard, </author> <title> The formulas-as-types notion of construction. In To H.B. Curry: Essays on Combinatory Logic, Lambda Calculus and Formalism, </title> <editor> eds. J.P. Seldin, J.R. Hindley, </editor> <publisher> Academic Press, </publisher> <address> New York, </address> <pages> pp 479-490. </pages>
Reference: [Hyland and Pitts 1988] <author> M. Hyland and A. Pitts, </author> <title> The theory of constructions: categorical semantics and topos-theoretic models. </title> <booktitle> In Categories in computer science and logic, Proc. of the AMS Research Conference, Boulder, </booktitle> <editor> Col., eds. J.W. </editor> <title> Gray and A.S. Scedrov, </title> <journal> Contemporary Math., </journal> <volume> vol 92, </volume> <publisher> AMS, </publisher> <pages> pp 137-199. </pages>
Reference: [Kolmogorov 1932] <author> A.N. </author> <title> Kolmogorov, </title> <journal> Zur Deutung der Intuitionistischen Logik, Math. Z. </journal> <volume> 35, </volume> <pages> pp 58-65. </pages>
Reference: [Krivine and Parigot 1990] <author> J.-L. Krivine and M. Parigot, </author> <title> Programming with proofs, </title> <journal> J. Inf. Process. Cybern. </journal> <volume> EIK 26 3, </volume> <pages> pp 149-167. </pages>
Reference: [Lambek and Scott 1986] <author> J. Lambek and P.J. Scott, </author> <title> Introduction to higher order Categorical Logic, </title> <booktitle> Cambridge studies in advanced mathematics 7, Camb. </booktitle> <address> Univ.Press. </address>
Reference: [Lauchli 1970] <author> H. Lauchli, </author> <title> An abstract notion of realizability for which intuitionistic predicate calculus is complete. In Intuitionism and Proof Theory, </title> <booktitle> Proceedings of the Summer School Conference at Buffalo, </booktitle> <publisher> New York, </publisher> <editor> eds. G. Myhill, A. Kino and R. Vesley, </editor> <publisher> North-Holland, </publisher> <pages> pp 227-234. </pages>
Reference: [Longo and Moggi 1988] <author> G. Longo and E. Moggi, </author> <title> Constructive Natural Deduction and its "Modest" Interpretation. </title> <type> Report CMU-CS-88-131. </type>
Reference-contexts: The system P! is the Calculus of Constructions, due to [Coquand 1985]. (See also [Coquand and Huet 1988].) The system P2 was defined under the same name by <ref> [Longo and Moggi 1988] </ref>. Usually the eight systems of the cube are presented in a picture as follows ! - P! 2 - P2 ! - P! where an arrow denotes inclusion of one system in another. <p> The same holds for the system P2: From <ref> [Longo and Moggi 1988] </ref> it becomes clear that the intention of the system is the formulas-as-types embedding of PRED2 into it in the way we have described it by the mapping H.
Reference: [LEGO-examples] <author> R. Pollack et al., </author> <title> Examples of proofs formalised in LEGO, </title> <publisher> Edinburgh. 196 Bibliography </publisher>
Reference-contexts: See <ref> [LEGO-examples] </ref> for details.) 6.6.7. Proposition ([Coquand 1990]). `Classical logic' with `disjunction property for classical proofs' implies proof irrelevance in CC.
Reference: [Lob 1976] <author> M. Lob, </author> <title> Embedding first order predicate logic in fragments of intuitionistic logic, </title> <journal> J. Symbolic Logic vol 41, </journal> <pages> 4 pp. 705-719. </pages>
Reference: [Luo 1989] <author> Z. Luo, </author> <title> ECC: An extended Calculus of Constructions. </title> <booktitle> Proc. of the fourth ann. symp. on Logic in Comp. Science, Asilomar, Cal. IEEE, </booktitle> <pages> pp 386-395. </pages>
Reference-contexts: For that reason and because the proof is not ours, we omit it here and refer to [van Benthem Jutting 199+] for details (which is the original source.) The idea of using the above Sublemma to prove that (streng) is a derived rule, first appeared in <ref> [Luo 1989] </ref>, who used it for the system ECC.
Reference: [Luo and Pollack 1992] <author> Z. Luo, R. Pollack, </author> <title> Lego proof development system: User's Manual, </title> <institution> Dept. of Computer Science, University of Edinburgh, </institution> <month> April </month> <year> 1992. </year>
Reference: [Martin-Lof 1971] <author> P. Martin-Lof, </author> <title> A theory of types, </title> <type> manuscript, </type> <month> October </month> <year> 1971. </year>
Reference-contexts: Note therefore that type checking in the restricted calculus is much easier, due to the `easy' normalization proof. Some hints towards a proof can be found in [Coquand and Huet 1988] and more details in [Coquand 1985] and especially in <ref> [Martin-Lof 1971] </ref>. See also [Harper and Pollack 1991] for an exposition on the decidability of typing for an extended version of CC, which also describes an algorithm for computing a type. 6.4.
Reference: [Martin-Lof 1975] <author> P. Martin-Lof, </author> <title> An intuitionistic theory of types: predicative part. </title> <booktitle> Logic Colloquium '73, North-Holland 1975, </booktitle> <pages> pp 73-118. </pages>
Reference: [Martin-Lof 1982] <author> P. Martin-Lof, </author> <title> Constructive mathematics and computer programming. </title> <booktitle> Sixth International Congress for Logic, Methodology, and Philosophy of Science VI, 1979, North-Holland 1982, </booktitle> <pages> pp 153-175. </pages>
Reference: [Martin-Lof 1984] <author> P. Martin-Lof, </author> <title> Intuitionistic Type Theory, Studies in Proof theory, </title> <publisher> Bibliopolis, Napoli. </publisher>
Reference-contexts: First we show that if one allows empty domains in the logic, the incompleteness is quite easy. 6.5.1. Remark. In CC, the existential quantifier has a first projection, similar to Martin-Lof's understanding of the existential quantifier as a strong -type. (See e.g. <ref> [Martin-Lof 1984] </ref>.) Remember that 9x:A:' j ff: ? :(x:A:'!ff)!ff in PRED!. Now, in CC there is a projection function p : (9x:A:')!A for A; ':?.
Reference: [Mendler 1987] <author> N.P. Mendler, </author> <title> Inductive types and type constraints in second-order lambda calculus. </title> <booktitle> Proceedings of the Second Symposium of Logic in Computer Science. </booktitle> <address> Ithaca, N.Y., </address> <publisher> IEEE, </publisher> <pages> pp 30-36. </pages>
Reference: [Mitchell 1986] <author> J. Mitchell, </author> <title> A type-inference approach to reduction properties and semantics of polymorphic expressions. </title> <booktitle> In Proceedings of 1986 ACM Symposium on LISP and Functional Programming, </booktitle> <publisher> ACM New York, </publisher> <pages> pp 308-319, </pages>
Reference-contexts: This makes the exposition more perspicious and clearly points out where the proof is essentially complex (in proof-theoretical terms.) This idea of proving strong normalization (reducing the problem to the set of underlying type-free terms) is applied to the polymorphic lambda calculus in <ref> [Mitchell 1986] </ref> (see also [Scedrov 1990]). 7.3.18. Proposition. F! fij j= SN fij ! : Proof.
Reference: [Mohring 1986] <author> Ch. Mohring, </author> <title> Algorithm development in the calculus of constructions. </title> <booktitle> In Proceedings of the first symposium on Logic in Computer Science, </booktitle> <address> Cambridge, Mass. </address> <publisher> IEEE, </publisher> <pages> pp 84-91. </pages>
Reference: [Nederpelt 1973] <author> R.P. </author> <title> Nederpelt, Strong normalization in a typed lambda calculus with lambda structured types. </title> <type> Ph.D. thesis, </type> <institution> Eindhoven Technological University, </institution> <address> The Netherlands, </address> <month> June </month> <year> 1973. </year>
Reference-contexts: to the number of fi-reduction steps to normal form in X, then we can also compute an effective bound to the number of fij-reduction steps in # # j X.) fi Sec. 4.4 Meta theory of Pure Type Systems 97 The Key Lemma for fij-reduction on T The counterexample of <ref> [Nederpelt 1973] </ref> shows that, if one tries to prove CR fij , there is a problem in the types of the -abstracted variables. We call these types domains. 4.4.10. Definition. Let M 2 T.
Reference: [Nordstrom et al. 1990] <author> B. Nordstrom, K. Petersson, J.M. Smith, </author> <title> Programming in Martin-Lof 's Type Theory. </title> <publisher> Oxford University Press. </publisher>
Reference: [Paulin 1989] <author> Ch. Paulin-Mohring, </author> <title> Extraction des programmes dans le calcul des constructions, </title> <institution> These, Universite Paris VII, </institution> <address> France. Bibliography 197 </address>
Reference-contexts: higher order constructive logic in which one can represent specifications as formulas (about data types.) From a proof of the formula the constructive content can then be extracted as a program (more precisely a lambda term typable in !.) A lot of work on this subject has been done in <ref> [Paulin 1989] </ref>; we shall say a little bit more about this in paragraph 6.7. 6.4.2. Example. <p> CC is conservative over !. This was proved independently by <ref> [Paulin 1989] </ref> and [Berardi 1989]; we give the proof in paragraph 6.5.3. It is quite similar to the proof of conserva-tivity of PREDn over PROPn that we gave in Chapter 2.1. As already pointed out, the formulas-as-types embedding from higher order predicate logic in CC is not complete. <p> This mapping will go from a system in the right plane to the adjacent system in the left plane and is the identity on terms that are already well-typed in the left plane. Hence the conservativity. The proof is originally independently due to <ref> [Paulin 1989] </ref> and [Berardi 1990]. The first described the mapping from P! to ! in the first place to use it for program extraction; the second described the collection of four mappings (which is a straightforward generalisation of the mapping from P! to !) to give a conservativity proof. <p> Instead one uses the definable impredicative data types and inductive predicates on them, as is done in the examples of 6.4.3. This is not the place to discuss in detail the topic of extracting programs from proofs in CC, for which we refer to <ref> [Paulin 1989] </ref>, but to get some flavor we treat the first example of 6.4.3. Roughly, the program extracted from the proof is the !-term obtained by the mapping [], as defined in Definition 6.5.23. <p> Of course it is not irrelevant what we substitute for a, but the general picture should be clear: From the proof of the specification one can obtain the program that satisfies the specification. In <ref> [Paulin 1989] </ref> it is also Sec. 6.7 Formulas about data-types in CC 161 shown how to extract from the proof the logical content which is a proof that the extracted program satisfies the specification. Some parts of the proof have computational content while others don't. <p> Some parts of the proof have computational content while others don't. Therefore, to mechanize the extraction proces, in <ref> [Paulin 1989] </ref> the type ? is divided in Prop, Data and Spec, the first consisting of the propositions with purely logical content, the second consisting of the propositions with purely computaional content and the third consisting of propositions containing both logical and computaional content.
Reference: [Paulson 1987] <author> L.C. Paulson, </author> <title> Logic and Computation. </title> <booktitle> Cambridge Tracts in Theoretical Computer Science 2, </booktitle> <publisher> Cambridge University Press. </publisher>
Reference: [Parigot 1992] <author> M. Parigot, </author> <title> Recursive programming with proofs. </title> <booktitle> Theor. Comp. Science 94, </booktitle> <pages> pp 335-356. </pages>
Reference: [Pollack 1989] <author> R. Pollack, </author> <title> Talk given at the `Jumelage meeting on typed lambda calculus', </title> <publisher> Edinburgh, </publisher> <month> September </month> <year> 1989. </year>
Reference: [Pottinger 1989] <author> G. Pottinger, </author> <title> Definite descriptions and excluded middle in the theory of constructions, TYPES network, </title> <month> November </month> <year> 1989. </year>
Reference-contexts: An example is given by the axiom of definite descriptions that makes a generic statement about all domains. It is described in <ref> [Pottinger 1989] </ref> as follows DD := 8ff: ? :8P :ff! ? :8z:(9!x:ff:P x):P (ffP z); Sec. 6.6 Consistency of (contexts of) CC 159 where 9!x:ff:P x := (9x:ff:P x)&(8x; y:ff:P x!P y!(x = ff y)) and is a term of type 8ff: ? :8P :ff! ? :(9!x:ff:P x)!ff. (One can take <p> Because of the treatment of domains and propositions at the same level, principles about (proofs of) propositions have unwanted applications to the domains. The proof of Proposition 6.6.6 in <ref> [Pottinger 1989] </ref> uses an adapted form of a proof by Coquand ([Coquand 1990]), showing that CC with classical logic and a derivation rule for a strong version of disjoint sum yields proof irrelevance.
Reference: [Prawitz 1965] <author> D. Prawitz, </author> <title> Natural Deduction, </title> <publisher> Almqvist and Wiksell, </publisher> <address> Stockholm. </address>
Reference: [Reynolds 1974] <author> J.C. Reynolds, </author> <title> Towards a theory of type structure. </title> <booktitle> Proceedings, Colloque sur la Programmation, </booktitle> <volume> LNCS 19, </volume> <pages> pp 408-425. </pages>
Reference: [Ruys 1991] <author> M. Ruys, </author> <title> P! is not conservative over P2, </title> <type> Master's thesis, </type> <institution> University of Nijmegen, Netherlands, </institution> <month> November </month> <year> 1991. </year>
Reference-contexts: of Corollary 2.4.27, saying that PROP! is conservative over PROP2 and of the fact that PROP! and PROP2 are isomorphic to, respectively, ! and 2 via the formulas-as-types embedding. (See paragraph 4.3.1 and especially Proposition 4.3.4.) The third was verfied in detail by 152 The Calculus of Constructions Ch. 6 <ref> [Ruys 1991] </ref>, following an idea from Berardi. The idea is to look at a context in P2 that represents Arithmetic. Then with P2 is as strong as second order Arithmetic and with P! is as strong as higher order Arithmetic.
Reference: [Salvesen 1989] <author> A. Salvesen, </author> <title> The Church-Rosser Theorem for LF with j reduction. </title> <booktitle> Notes of a talk presented at the BRA-Logical Frameworks meeting, Antibes 1990. </booktitle>
Reference: [Salvesen1991] <author> A. Salvesen, </author> <title> The Church-Rosser property for fij-reduction, </title> <type> manuscript. </type>
Reference: [Scedrov 1990] <author> A. Scedrov, </author> <title> A guide to polymorphic types. </title> <booktitle> In Logic and Computer Science, </booktitle> <editor> ed. P.G. Odifreddi, </editor> <booktitle> APIC series, </booktitle> <volume> vol. 31, </volume> <publisher> Academic Press, </publisher> <pages> pp 387-420. </pages>
Reference-contexts: This makes the exposition more perspicious and clearly points out where the proof is essentially complex (in proof-theoretical terms.) This idea of proving strong normalization (reducing the problem to the set of underlying type-free terms) is applied to the polymorphic lambda calculus in [Mitchell 1986] (see also <ref> [Scedrov 1990] </ref>). 7.3.18. Proposition. F! fij j= SN fij ! : Proof. We only have to consider the constructors, because an infinite fij ! - reduction in a term of F! fij will always be due to an infinite fij ! -reduction in a subterm that is a constructor.
Reference: [Seldin 1990] <author> J. Seldin, </author> <title> Excluded middle without definite descriptions in the theory of constructions, TYPES network, </title> <month> September </month> <year> 1990. </year>
Reference-contexts: Contexts of this kind are called strongly consistent in <ref> [Seldin 1990] </ref>. 158 The Calculus of Constructions Ch. 6 6.6.5. Proposition ([Seldin 1990]). Strongly consistent contexts of CC are consistent. Proof. <p> These kind of contexts have to be handled by a normalization argument: Assuming the inconsistency of HA , show that a proof of ? in HA can not be in normal form, and so there is no such proof. In <ref> [Seldin 1990] </ref> one can find a detailed proof of the consistency of a context that represents Peano Arithmetic in a system that is a slight extension of CC. Coquand shows in [Coquand 1990] by a normalization argument that the context INF = A:?; a:A; f:A!A; R:A!A! ? is consistent.
Reference: [Schutte 1977] <author> K. Schutte, </author> <title> Proof Theory, Grundlehren der mathematischen Wissenschaften 225, </title> <publisher> Springer-Verlag. </publisher>
Reference: [Smorynski 1973] <author> C. Smorynski, </author> <title> Applications of Kripke models, in Metamathematical Investigation of Intuitionistic Arithmetic and Analysis, </title> <editor> ed. A. Troelstra, </editor> <volume> LNM 344, </volume> <pages> pp 324-391. </pages>
Reference: [Streicher 1988] <author> T. Streicher, </author> <title> Correctness and completeness of a categorical semantics of the calculus of constructions, </title> <type> Ph.D. Thesis, </type> <institution> Passau University, </institution> <address> Germany. 198 Bibliography </address>
Reference: [Streicher 1991] <author> T. Streicher, </author> <title> Independence of the induction principle and the axiom of choice in the pure calculus of constructions, </title> <journal> TCS 103(2), </journal> <pages> pp 395 - 409. </pages>
Reference-contexts: Semantics is then a very helpful tool for showing consistency and in general to show the non-derivability of a formula from a specific set of assumptions. Of course one has to use more interesting models then the one of 6.6.2 to establish this. In <ref> [Streicher 1991] </ref> there are some examples of this technique using realisability semantics. Knowing that a certain context is consistent is of course not enough to use it safely for doing proofs.
Reference: [Swaen 1989] <institution> Weak and strong sum-elimination in intuitionistic type theory, </institution> <type> Ph.D. thesis, </type> <institution> Faculty of Mathematics and Computer Science, University of Amsterdam, Netherlands, </institution> <month> September </month> <year> 1989. </year>
Reference-contexts: The embedding of PRED into P is complete, as was shown independently by [Berardi 1988] and [Barendsen and Geuvers 1989]. We shall give the proof of the latter, which uses a method developped by <ref> [Swaen 1989] </ref> to show completeness of the formulas-as-types embedding of full first order pedicate logic into Martin-Lof's intuitionistic theory of types. Although the completeness of the embedding into P is quite non-trivial, the result is not very interesting from a practical point of view. <p> We now give the technical details of the proof of completeness of H : PRED ! P. In [Barendsen and Geuvers 1989] this proof appears in a slightly different form. The proof uses techniques developped in <ref> [Swaen 1989] </ref> to show completeness of the formulas-as-types embedding from first order predicate logic into 146 The Calculus of Constructions Ch. 6 Martin-Lof's intuitionistic theory of types. A different proof of the same result can be found in [Berardi 1990].
Reference: [Tait 1965] <author> W.W. Tait, </author> <title> Infinitely long terms of transfinite type. In Formal Systems and Recursive Functions, </title> <editor> eds. J.N. Crossley and M.A.E. Dummett, </editor> <publisher> North-Holland. </publisher>
Reference: [Tait 1975] <author> W.W. Tait, </author> <title> A realizability interpretation of the theory of species. </title> <booktitle> In Proceedings of Logic Colloquium, </booktitle> <editor> ed. R. Parikh, </editor> <volume> LNM 453, </volume> <pages> pp 240-251. </pages>
Reference: [Takeuti 1975] <author> G. Takeuti, </author> <title> Proof Theory, </title> <booktitle> Studies in Logic, </booktitle> <volume> vol. 81, </volume> <publisher> North-Holland. </publisher>
Reference: [Terlouw 1989a] <author> J. Terlouw, </author> <title> Een nadere bewijstheoretische analyse van GSTT's (incl. appendix), </title> <type> Manuscript, </type> <institution> Faculty of Mathematics and Computer Science, University of Nijmegen, Netherlands, </institution> <month> March, April </month> <year> 1989. </year> <note> (In Dutch) </note>
Reference-contexts: Both have been inspired by the notion of the `cube of typed lambda calculi', (see [Barendregt 1992]), a first important step towards the notion of PTS. The first coherent study of the meta theory is [Geuvers and Nederhof 1991], which has strongly benefit-ted from suggestions in <ref> [Terlouw 1989a] </ref>. The main meta-theoretic results of [Geuvers and Nederhof 1991] can also be found in [Barendregt 1992].
Reference: [Terlouw 1989b] <author> J. Terlouw, </author> <title> Sterke normaliszatie in C a la Tait, </title> <booktitle> Notes of atalk held at the Intercity Seminar on Typed Lambda Calculus, </booktitle> <address> Nijmegen, Netherlands, </address> <month> April </month> <year> 1989. </year> <note> (In Dutch) </note>
Reference-contexts: A notion very similar to that of PTS occurs already in the work of Ter-louw ([Terlouw 1989a] and <ref> [Terlouw 1989b] </ref>), who describes (in Dutch) what he calls a `Generalised System for Terms and Types'. It is also implicit in the work of Berardi ([Berardi 1988]), who describes various examples of Pure Type Systems without insisting on a general definition.
Reference: [Tonino anf Fujita 1992] <author> H. Tonino and K.-E. Fujita, </author> <title> On the adequacy of representing higher order intuitionistic logic as a pure type system, </title> <journal> Annals of Pure and Applied Logic 57, </journal> <pages> pp 251-276. </pages>
Reference: [Troelstra and Van Dalen 1988] <author> A. Troelstra and D. van Dalen, </author> <title> Constructivism in mathematics, an introduction, </title> <booktitle> Volume I/II , Studies in logic and the foundations of mathematics, </booktitle> <volume> vol 121 and volume 123, </volume> <publisher> North-Holland. </publisher>
Reference: [Verschuren 1990] <author> E. Verschuren, </author> <title> Conservativity in Barendregt's cube, </title> <type> Master's thesis, </type> <institution> University of Nijmegen, Netherlands, </institution> <month> December </month> <year> 1990. </year>
Reference-contexts: On the other hand in P! one can derive from that is consistent in P2. Hence the non-conservativity. fi We first prove the Proposition about conservativity of systems over systems in the lower plane. The Proposition was also proved in <ref> [Verschuren 1990] </ref> in a slightly different way. 6.5.22. Proposition. Let S 1 be a system of the lower plane and S 2 be any system of the cube such that S 1 S 2 .

References-found: 98

