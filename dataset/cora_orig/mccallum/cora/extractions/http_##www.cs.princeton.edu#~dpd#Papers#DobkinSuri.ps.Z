URL: http://www.cs.princeton.edu/~dpd/Papers/DobkinSuri.ps.Z
Refering-URL: http://www.cs.princeton.edu/~dpd/Research.html
Root-URL: http://www.cs.princeton.edu
Title: Maintenance of Geometric Extrema  
Author: David Dobkin Subhash Suri 
Keyword: VLSI masking, and optimization.  
Date: January 2, 1990  
Address: Princeton, NJ 08544  445 South Street Morristown, N.J. 07960  
Affiliation: Department of Computer Science Princeton University  Bell Communications Research  
Abstract: Let S be a set, f : S fi S ! R + a bivariate function, and f(x; S) the maximum value of f(x; y) over all elements y 2 S. We say that f is decomposable with respect to the maximum if f(x; S) = maxff(x; S 1 ); f(x; S 2 ); . . .; f(x; S k )g for any decomposition S = [ i=k i=1 S i . Computing the maximum (minimum) value of a decomposable function is inherent in many problems of computational geometry and robotics. In this paper, we present a general technique for updating the maximum (minimum) value of a decomposable function as elements are inserted into and deleted from the set S. Our result holds for a semi-online model of dynamization: when an element is inserted, we are told how long it will stay. Applications of this technique include efficient algorithms for dynamically computing the diameter or closest pair of a set of points, minimum separation among a set of rectangles, smallest distance between a set of points and a set of hyperplanes, and largest or smallest area (perimeter) rectangles determined by a set of points. These problems are fundamental to application areas such as robotics, 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Aggarwal and S. Suri, </author> <title> Fast algorithms for computing the largest empty rectangle, </title> <booktitle> (extended abstract) Proc. of 3rd Annual Symposium on Computational Geometry, </booktitle> <pages> 278-290, </pages> <year> 1987. </year>
Reference-contexts: In the static case, the best algorithm for computing the largest empty rectangle takes O (n log 2 n) time (see Aggarwal and Suri <ref> [1] </ref>).
Reference: [2] <author> J. Bentley and J. Saxe, </author> <title> Decomposable searching problems I. Static-to-dynamic transformation, </title> <journal> J. of Algorithms, </journal> <volume> 1, </volume> <pages> 301-358, </pages> <year> 1980. </year>
Reference-contexts: But let us first review some of the previous work on dynamic algorithms. 1.1 Previous Results A systematic study of dynamization in the realm of computational geometry was enunciated by Bentley and Saxe <ref> [2] </ref>. They focused on the important class of problems, called decomposable search problems, and showed that under mild assumptions one can convert a static data structure into a semi-dynamic one, allowing insertions but no deletions, with a logarithmic increase in cost.
Reference: [3] <author> J. Bentley and M. Shamos, </author> <title> Divide-and-conquer in multidimensional space, </title> <booktitle> Proc. of Eighth ACM Symposium on Theory of Computing, </booktitle> <pages> 220-230, </pages> <year> 1976. </year>
Reference-contexts: 1 ; s 2 2 S such that f (s 1 ; s 2 ) = min ff (x; y) j x 6= yg: The closest pair of n points in E d can be computed in time O (n log n) for any fixed dimension d (Bentley and Shamos <ref> [3] </ref>), which is optimal in the worst case. We present algo rithms for maintaining the closest pair in sublinear time in all dimensions. The function f is clearly decomposable with respect to the minimum.
Reference: [4] <author> B. Chazelle, </author> <title> How to search in history, </title> <journal> Information and Control, </journal> <volume> 64, </volume> <pages> 77-99, </pages> <year> 1985. </year>
Reference-contexts: This proves the proposition for d = 2. In three dimensions, the furthest-point Voronoi diagram of n points can be constructed and preprocessed in O (n 2 ) time, after which point-location queries can be answered in time 11 O (log 2 n) (see e.g. Chazelle <ref> [4] </ref>, Edelsbrunner [10] and Seidel [19]). We balance the cost of constructing a Voronoi diagram against the cost of searching it by partitioning S into p n= log n subsets of size p n log n each. <p> Chazelle <ref> [4] </ref>). Thus, we only need to describe our data structure for the "primal" case: a set of points and the hyperplane queries. We use known results on neighbor-searching in E d . <p> This proves the proposition for the dimension d = 2. In three dimensions, we use a similar result of Chazelle <ref> [4] </ref>: A set S of n points in E 3 can be preprocessed in time O (n 3 ) so that, given a plane h, the point of S closest to h can be determined in time O (log 2 n).
Reference: [5] <author> B. Chazelle, R. Drysdale and D. T. Lee, </author> <title> Computing the largest empty rectangle, </title> <journal> SIAM J. of Computing, </journal> <volume> 15, </volume> <pages> 300-315, </pages> <year> 1986. </year>
Reference-contexts: The function f is decomposable with respect to the maximum (as well as the minimum). In order to obtain a data structure with required (P; Q)-computability features, we utilize a result of Chazelle, Drysdale and Lee <ref> [5] </ref>, concerning the LL-diagram of a set of points. Let S = fp 1 ; p 2 ; . . . ; p n g be a set of n points in the plane. <p> 2 ); . . .; V (p n )g, where V (p i ) = fp 2 Z (S) j f (p; p i ) f (p; p j ) for all j = 1; 2; . . .; ng: (The LL-diagram in the original paper of Chazelle et al. <ref> [5] </ref> is defined for a region somewhat larger than Z (S); however, we find the above definition more convenient for our application.) Observe that only the maximal points of S can have nonempty regions in the LL-diagram of S; recall that a point p is maximal if no other point in <p> Chazelle et al. <ref> [5] </ref> prove the following result. Proposition 10 ([5]) The LL-diagram of a set of n points can be computed in O (n log n) time. We introduce some notation. <p> To restore the invariant for F 1 , we need to compute the largest empty rectangle determined by two points both in F 1 . This can be accomplished in O (n log 3 n) time by an easy modification of the static-case algorithm of Chazelle, Drysdale and Lee <ref> [5] </ref>. Thus, the amortized cost of maintaining the invariant at the first level also is O (n 2=3 log 3 n).
Reference: [6] <author> B. Chazelle and J. Friedman, </author> <title> A deterministic view of random sampling and its use in geometry, </title> <booktitle> Proc. of 29th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pp. 539-549, </pages> <year> 1988. </year>
Reference-contexts: This proves the proposition for d = 3. In dimensions d 4, the best bounds for constructing and searching Voronoi diagrams are given by Chazelle and Friedman <ref> [6] </ref>. They show that n hyperplanes in d dimensions can be preprocessed in O (n d (d+3)=2+2 = log n) time, following which a point-location query can be answered in O (log n) time. <p> To obtain our bounds, we partition the set S into (n= log n) 2=3 subsets of size n 1=3 log 2=3 n each. For dimensions d 4, the data structure of Chazelle and Friedman <ref> [6] </ref> achieves the preprocessing and query costs O (n d (d+3)=2+2 ) and O (log n), respectively. To obtain the bounds stated in the proposition, we balance the preprocessing and query costs by splitting S into n 12fi d subsets of size n 2fi d each. This completes the proof.
Reference: [7] <author> B. Chazelle and L. Guibas, </author> <title> Fractional Cascading: I and II, </title> <journal> Algorithmica, </journal> <volume> 1, </volume> <pages> 133-191, </pages> <year> 1986. </year>
Reference-contexts: This allows each of these binary searches to be performed in constant time, after the first binary search has been conducted at the full cost of O (log n) (see Chazelle and Guibas <ref> [7] </ref> for details). This completes the proof. Theorem 1 and Proposition 8 imply the following result.
Reference: [8] <author> R. Cole, M. Sharir and C. Yap, </author> <title> On k-hulls and related problems, </title> <journal> SIAM J. of Computing, </journal> <volume> 16, </volume> <pages> 61-77, </pages> <year> 1987. </year>
Reference-contexts: The current best solution for the latter in E 2 is an O (n 1:41 ) time algorithm due to Cole, Sharir and Yap <ref> [8] </ref>. We develop dynamic algorithms of sublinear time complexity for the generalized problem in all dimensions.
Reference: [9] <author> R. Cole and C. Yap, </author> <title> Geometric retrieval problems, </title> <journal> Information and Control, </journal> <volume> 63, </volume> <pages> 39-57, </pages> <year> 1984. </year>
Reference-contexts: Chazelle [4]). Thus, we only need to describe our data structure for the "primal" case: a set of points and the hyperplane queries. We use known results on neighbor-searching in E d . In two dimensions, we use the following result obtained independently by Cole and Yap <ref> [9] </ref> and Lee and Ching [15]: A set S of n points in E 2 can be preprocessed in time O (n 2 ) so that, given a query line `, the point of S closest to ` can be determined in time O (log n). <p> We balance the preprocessing and query costs by partitioning S into p subsets of p n log n points each. We then preprocess each of the subsets to construct the data structure of <ref> [9] </ref> or [15].
Reference: [10] <author> H. Edelsbrunner, </author> <title> Algorithms in Combinatorial Geometry, </title> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: This proves the proposition for d = 2. In three dimensions, the furthest-point Voronoi diagram of n points can be constructed and preprocessed in O (n 2 ) time, after which point-location queries can be answered in time 11 O (log 2 n) (see e.g. Chazelle [4], Edelsbrunner <ref> [10] </ref> and Seidel [19]). We balance the cost of constructing a Voronoi diagram against the cost of searching it by partitioning S into p n= log n subsets of size p n log n each. We construct the Voronoi diagram of each of the subsets and preprocess it for point-location. <p> Given a set S of n points in two or three dimensions, the convex hull of S can be preprocessed in time O (n log n), following which an extremal query can be answered in time O (log n) (see e.g. Edelsbrunner <ref> [10] </ref>). Thus, Theorem 7 leads to the following results.
Reference: [11] <author> H. Edelsbrunner, L. Guibas and J. Stolfi, </author> <title> Optimal point location in monotone subdivision, </title> <journal> SIAM J. of Computing, </journal> <volume> 15, </volume> <pages> 317-340, </pages> <year> 1986. </year>
Reference-contexts: In two dimensions, the furthest-point Voronoi diagram of n points can be computed and preprocessed in O (n log n) time, following which a point-location query can be answered in time O (log n) (see e.g. Edelsbrunner, Guibas and Stolfi <ref> [11] </ref> and Lee [14]). This proves the proposition for d = 2. In three dimensions, the furthest-point Voronoi diagram of n points can be constructed and preprocessed in O (n 2 ) time, after which point-location queries can be answered in time 11 O (log 2 n) (see e.g.
Reference: [12] <author> H. Edelsbrunner and M. Overmars, </author> <title> Batched dynamic solutions to decomposable searching problems, </title> <journal> J. of Algorithms, </journal> <volume> 6, </volume> <pages> 515-542, </pages> <year> 1985. </year>
Reference-contexts: First, Theorem 7 offers a uniform bound for decomposable search problems with deletions. Second, our method works for semi-online sequences rather than o*ine. Third, our method may be easier to implement than, for instance, the method of Edelsbrunner and Overmars <ref> [12] </ref>, which uses a more complicated segment-tree based approach. 19 4.2 Non-decomposable Problems We consider the problem of computing the largest empty rectangle determined by a set of points. The problem is as follows.
Reference: [13] <author> H. Gabow and R. Tarjan, </author> <title> A linear-time algorithm for a special case of disjoint set union, </title> <journal> J. of Computer and System Sciences, </journal> <volume> 30, </volume> <pages> 209-221, </pages> <year> 1985. </year>
Reference-contexts: In the paper, we will focus exclusively on the first definition of the semi-online model, although all our results hold for the second version as well. We point out that our semi-online model is similar to a model used by Gabow and Tarjan <ref> [13] </ref> where they obtain a linear-time algorithm for the disjoint set union problem under the assumption that the sequence of "unions" is known in advance but "finds" are online.
Reference: [14] <author> D. T. Lee, </author> <title> Two dimensional Voronoi diagram in the L p metric, </title> <journal> J. ACM, </journal> <volume> 27, </volume> <pages> 604-618, </pages> <year> 1980. </year>
Reference-contexts: In two dimensions, the furthest-point Voronoi diagram of n points can be computed and preprocessed in O (n log n) time, following which a point-location query can be answered in time O (log n) (see e.g. Edelsbrunner, Guibas and Stolfi [11] and Lee <ref> [14] </ref>). This proves the proposition for d = 2. In three dimensions, the furthest-point Voronoi diagram of n points can be constructed and preprocessed in O (n 2 ) time, after which point-location queries can be answered in time 11 O (log 2 n) (see e.g.
Reference: [15] <author> D. T. Lee and Y. Ching, </author> <title> The power of geometric duality revisited, </title> <journal> Information Pro--cessing Letters, </journal> <volume> 21, </volume> <pages> 117-122, </pages> <year> 1985. </year>
Reference-contexts: We use known results on neighbor-searching in E d . In two dimensions, we use the following result obtained independently by Cole and Yap [9] and Lee and Ching <ref> [15] </ref>: A set S of n points in E 2 can be preprocessed in time O (n 2 ) so that, given a query line `, the point of S closest to ` can be determined in time O (log n). <p> We balance the preprocessing and query costs by partitioning S into p subsets of p n log n points each. We then preprocess each of the subsets to construct the data structure of [9] or <ref> [15] </ref>. The total cost of preprocessing is O ( n ( n log n) 2 ) = O (n 3=2 log 1=2 n): To answer the query "which point of S is closest to the line `?," we search the p structures, at the cost of O (log n) each.
Reference: [16] <author> M. Overmars, </author> <title> Dynamization of order decomposable set problems, </title> <journal> J. of Algorithms, </journal> <volume> 2, </volume> <month> 245-260 </month> <year> 1981. </year>
Reference-contexts: They developed efficient algorithms for dynamically computing convex hulls, maximal elements and intersection of halfspaces. But even these extended techniques do not seem to apply to geometric maximization (minimization) problems such as diameter and closest pair. In <ref> [16] </ref>, Overmars considered order decomposable set problems, a class of problems especially amenable to divide-and-conquer. Among the problems considered by him is the closest-pair problem in two dimensions. He obtained an O (n) time algorithm for updating the closest-pair after each insertion or deletion. <p> n log 2 n) for dimension d = 3; C (n) = O (n 1fi d log 2 n) for dimensions d 4; where fi d = 1 : To contrast Theorem 2 with previous results, we note that the online version of the two-dimensional case was considered by Overmars <ref> [16] </ref>), and he obtained O (n) bound on the update time per insert or delete. A comparison of our bounds with the best static-case time bounds is presented in the table of results given in the introduction.
Reference: [17] <author> M. Overmars and J. van Leeuwen, </author> <title> Maintenance of Configurations in the Plane, </title> <journal> J. of Computer and System Science, </journal> <volume> 23, </volume> <pages> 166-204, </pages> <year> 1981. </year>
Reference-contexts: Bentley and Saxe, however, were mainly interested in data structures for query-answering (i.e., univariate functions), and consequently their scheme is not amenable to the kind of problems we are interested in, namely, the pairwise maxima in a set. Overmars and van Leeuwen <ref> [17] </ref> extended the basic approach of Bentley and Saxe to dy-namize problems related to configurations rather than just points. They developed efficient algorithms for dynamically computing convex hulls, maximal elements and intersection of halfspaces.
Reference: [18] <author> F. Preparata and M. Shamos, </author> <title> Computational Geometry, </title> <publisher> Springer Verlag, </publisher> <address> New York, NY, </address> <year> 1985. </year>
Reference: [19] <author> R. Seidel, </author> <title> A convex hull algorithm optimal for points in even dimensions, </title> <type> Report 81-14, </type> <institution> Computer Science, University of British Columbia, Vancouver, </institution> <year> 1981. </year>
Reference-contexts: In three dimensions, the furthest-point Voronoi diagram of n points can be constructed and preprocessed in O (n 2 ) time, after which point-location queries can be answered in time 11 O (log 2 n) (see e.g. Chazelle [4], Edelsbrunner [10] and Seidel <ref> [19] </ref>). We balance the cost of constructing a Voronoi diagram against the cost of searching it by partitioning S into p n= log n subsets of size p n log n each. We construct the Voronoi diagram of each of the subsets and preprocess it for point-location.
Reference: [20] <author> A. C. Yao, </author> <title> On constructing minimum spanning trees in k-dimensional space and related problems, </title> <journal> SIAM J. of Computing, </journal> <volume> 11, </volume> <pages> 721-736, </pages> <year> 1982. </year> <month> 24 </month>
References-found: 20

