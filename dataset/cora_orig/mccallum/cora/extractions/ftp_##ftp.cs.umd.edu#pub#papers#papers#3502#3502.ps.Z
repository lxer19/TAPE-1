URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3502/3502.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Title: Understanding and Predicting the Process of Software Maintenance Releases  
Author: Victor Basili, Lionel Briand, Steven Condon, Yong-Mi Kim, Walclio L. Melo and Jon D. Valett sue s 
Keyword: Key words: software maintenance, measurement, experience factory, case studies, quality improvement and goal/question/metric paradigms.  
Date: March 1996.  
Note: CS-TR-3502 1 UMIACS-TR-95-79  To appear in the Proc. of the 18th Intl Conf. on S/W Eng., Berlin, Germany,  1 Introduction 1 1 Is  Authors are listed in alphabetical order.  
Abstract: Technical Report, University of Maryland, Computer Science Dept., College Park, MD 20770 USA. Aug. 1995. Abstract One of the major concerns of any maintenance organization is to understand and estimate the cost of maintenance releases of software systems. Planning the next release so as to maximize the increase in functionality and the improvement in quality are vital to successful maintenance management. The objective of this paper is to present the results of a case study in which an incremental approach was used to better understand the effort distribution of releases and build a predictive effort model for software maintenance releases. This study was conducted in the Flight Dynamics Division (FDD) of NASA Goddard Space Flight Center (GSFC). This organization is representative of many other software maintenance organizations. Over one hundred software systems totaling about 4.5 million lines of code, are maintained by this organization. Many of these systems are maintained for many years and regularly produce new releases. This paper presents three main results: 1) a predictive effort model developed for the FDDs software maintenance release process, 2) measurement-based lessons learned about the maintenance process in the FDD, 3) a set of lessons learned about the establishment of a measurement-based software maintenance improvement program. In addition, this study provides insights and guidelines to obtain similar results in other maintenance organizations. Software maintenance is generally recognized to consume the majority of resources in many software organizations [Abran & Nguyenkim, 1991; Harrison & Cook, 1990]. As a result, planning releases so as to maximize functionality and quality within the boundaries of resource constraints (such as, budget, personnel, and time to market) is vital to the success of an organization. The software maintenance process is, however, still poorly understood and loosely managed worldwide. As described in [Haziza et al., 1992], numerous factors can affect software * V. Basili, Y.-M. Kim and W. Melo are with the University of Maryland, Institute for Advanced Computer Studies and Computer Science Dept., A. V. Williams Bldg., College Park, MD 20742 USA. S. Condon is with Computer Sciences Corporation, 10110 Aerospace Rd., Lanham-Seabrook, MD 20706 USA. L. Briand is with the CRIM, Montreal, Canada. J. Valett is with NASA Goddard Space Flight Center, Software Engineering Branch, Greenbelt, MD 20771 USA. E-mails: -basili | kimy | melo-@cs.umd.edu., lbriand@crim.ca, steven_condon@cscmail.csc.com, jon.valett@gsfc.nasa.gov 
Abstract-found: 1
Intro-found: 1
Reference: [Abran & Nguyenkim 1991] <author> Abran, A. and Nguyenkim, H. </author> <title> Analysis of Maintenance Work Categories Through Measurement, </title> <booktitle> Proc. Conf. on Software Maintenance 1991, </booktitle> <address> Sorrento, Italy, </address> <pages> pp. 104113. </pages>
Reference: [Basili & Rombach 1988] <author> Basili, V. R. and D. Rombach. </author> <title> "The TAME Project: Towards Improvement-Oriented Software Environments," </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> 14 (6), </volume> <month> June </month> <year> 1988, </year> <pages> pp. 758-773. </pages>
Reference: [Briand et al 1994] <author> Briand, L., V. R. Basili, Y.-M. Kim and D. Squier. </author> <title> A Change Analysis Process to Characterize Software Maintenance Projects, </title> <booktitle> Proc. Intl. Conf. on Software Maintenance, </booktitle> <address> Victoria, </address> <publisher> B. </publisher> <address> C., Canada, </address> <pages> pp. 3849. </pages>
Reference: [Briand et al 1995] <author> Briand, L., W. Melo, C. Seaman, and V. Basili. </author> <title> "Characterizing and Assessing a Large-Scale Software Maintenance Organization," </title> <booktitle> Proc. 17th Intl. Conf. on Software Engineering, </booktitle> <address> Seattle, WA, </address> <pages> pp. 133-143. </pages>
Reference: [Haziza et al 1992] <author> Haziza, M.., J. F. Voidrot, E. Minor, L. Pofelski and S. Blazy. </author> <title> "Software Maintenance: An Analysis of Industrial Needs and Constraints," </title> <booktitle> Proc. Conf. on Software Maintenance 1992, </booktitle> <address> Orlando, Florida, </address> <pages> pp. 18-26. </pages>
Reference: [Harrison & Cook 1990] <author> Harrison, W. and C. Cook. </author> <title> Insights on Improving the Maintenance Process Through Software Measurement, </title> <booktitle> Proc. Conf. on Software Maintenance 1990, </booktitle> <address> San Diego, CA, </address> <pages> pp. 3745. </pages>
Reference: [Hinkle et al 1995] <author> Hinkle, D. E., W. Wiersma and S. G. Jurs. </author> <booktitle> Applied Statistics for the Behavioral Sciences, </booktitle> <address> Boston: Houghton Mifflin, </address> <year> 1995. </year>
Reference: [McGarry et al 1994] <author> McGarry, F., G. Page, V. R. Basili, and M. Zelkowitz. </author> <title> A n Overview of the Software Engineering Laboratory, </title> <address> SEL-94-005, </address> <month> December </month> <year> 1994. </year>
Reference: [Paulk, et al., 1993] <author> Paulk, M., B. Curtis, M-B Chrissis, C. Weber. </author> <title> Capability Maturity Model, Version 1.1, </title> <journal> IEEE Software, </journal> <month> July </month> <year> 1993, </year> <pages> pp. 18-27. </pages>
Reference-contexts: However, methods that help software maintainers change large software systems on schedule and within budget are scarce. Methods currently available for improving software processes, such as the Software Engineering Institute Capability Maturity Model (SEI CMM) <ref> [Paulk, et al., 1993] </ref>, have not been validated thoroughly. Even though a few methods have been demonstrated to be useful for software development (e.g., QIP [Basili & Rombach, 1988]) they have only recently begun to be applied to software maintenance [Valett et al., 1994].
Reference: [Pigoski & Nelson 1994] <author> Pigoski, T. M. and L. E. Nelson. </author> <title> Software Maintenance Metrics: </title>
References-found: 10

