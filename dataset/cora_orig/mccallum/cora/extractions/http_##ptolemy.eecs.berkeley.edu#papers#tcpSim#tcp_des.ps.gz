URL: http://ptolemy.eecs.berkeley.edu/papers/tcpSim/tcp_des.ps.gz
Refering-URL: http://ptolemy.eecs.berkeley.edu/papers/tcpSim/
Root-URL: http://www.cs.berkeley.edu
Email: (dor@fokus.gmd.de)  
Title: A TCP Simulator with PTOLEMY  
Author: Dorgham Sisalem 
Date: June 9, 1995  
Address: Berlin  
Affiliation: GMD-Fokus  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> S. Keshav, </author> <title> "REAL: A network simulator," </title> <type> Tech. Rep. 88/472, </type> <institution> Department of Computer science, UC Berkeley, </institution> <year> 1988. </year>
Reference-contexts: 1 Introduction Even though lots of TCP simulators and TCP traffic sources are already implemented in different programming languages, e.g., REAL <ref> [1] </ref>, the x-Kernel [2], tcplib [3] , we have decided to implement our own simulator. Building a simulator with PTOLEMY [4] would not just ease the integration and handling of the simulator as a TCP traffic source in general, but would add a very useful galaxy to PTOLEMY as well.
Reference: [2] <author> N. C. Hutchinson and L. L. Peterson, </author> <title> "The x-Kernel: An architecture for implementing network protocols," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 17, </volume> <pages> pp. 64-76, </pages> <month> Jan. </month> <year> 1991. </year> <month> 9 </month>
Reference-contexts: 1 Introduction Even though lots of TCP simulators and TCP traffic sources are already implemented in different programming languages, e.g., REAL [1], the x-Kernel <ref> [2] </ref>, tcplib [3] , we have decided to implement our own simulator. Building a simulator with PTOLEMY [4] would not just ease the integration and handling of the simulator as a TCP traffic source in general, but would add a very useful galaxy to PTOLEMY as well.
Reference: [3] <author> P. B. Danzig and S. Jamin, "tcplib: </author> <title> A library of TCP internetwork traffic characteristics," </title> <type> Tech. Rep. </type> <institution> USC-CS-91-495, Computer Science Department, University of Southern California, </institution> <address> Los Angeles, California, </address> <year> 1991. </year>
Reference-contexts: 1 Introduction Even though lots of TCP simulators and TCP traffic sources are already implemented in different programming languages, e.g., REAL [1], the x-Kernel [2], tcplib <ref> [3] </ref> , we have decided to implement our own simulator. Building a simulator with PTOLEMY [4] would not just ease the integration and handling of the simulator as a TCP traffic source in general, but would add a very useful galaxy to PTOLEMY as well.
Reference: [4] <author> A. Y. Lao, </author> <title> "Heterogeneous cell-relay network simulation and performance analysis with PTOLEMY," </title> <type> Tech. Rep. </type> <institution> UCB/ERL M94/8, Electronics Research Laboratory, UC Berkeley, </institution> <year> 1993. </year>
Reference-contexts: 1 Introduction Even though lots of TCP simulators and TCP traffic sources are already implemented in different programming languages, e.g., REAL [1], the x-Kernel [2], tcplib [3] , we have decided to implement our own simulator. Building a simulator with PTOLEMY <ref> [4] </ref> would not just ease the integration and handling of the simulator as a TCP traffic source in general, but would add a very useful galaxy to PTOLEMY as well. For this reason two versions of a 4.3BSD Tahoe based TCP simulator were implemented 1 .
Reference: [5] <author> V. Jacobson, </author> <title> "Congestion avoidance and control," </title> <journal> ACM Computer Communication Review, </journal> <volume> vol. 18, </volume> <pages> pp. 314-329, </pages> <month> Aug. </month> <year> 1988. </year> <booktitle> Proceedings of the Sigcomm '88 Symposium in Stanford, </booktitle> <address> CA, </address> <month> August, </month> <year> 1988. </year>
Reference-contexts: For this reason two versions of a 4.3BSD Tahoe based TCP simulator were implemented 1 . The basic version provides the user with the usual TCP-window based control mechanism, as well as the slow start, congestion avoidance and round trip estimation algorithms suggested by Jacobson <ref> [5] </ref>. In the enhanced version of the simulator the fast retransmission algorithm was implemented as well. It will be shown that with this enhancement the throughput and performance of the protocol increases considerably since the number of retransmitted packets decreases. <p> The relation between the congestion avoidance and the slow start will be explained when discussing the retransmission scheme used in TCP. 5. Exponential backoff and round trip estimation: Jacobson described in <ref> [5] </ref> a method, in which the round trip time (RTT) estimation is based on calculating both the mean and the variance of the measured RTT. To simplify the calculation Jacobson suggested that only the mean deviation should be used instead of the the standard deviation.
Reference: [6] <author> S. Shenker, L. Zhang, and D. D. Clark, </author> <title> "Some observations on the dynamics of a congestion control algorithm," </title> <journal> ACM Computer Communication Review, </journal> <pages> pp. 30-39, </pages> <month> Oct. </month> <year> 1990. </year>
Reference-contexts: It will be shown that with this enhancement the throughput and performance of the protocol increases considerably since the number of retransmitted packets decreases. To verify the simulator and to compare the two versions a network configuration has been chosen that has already been used in another study <ref> [6] </ref>. Whereas the results obtained from both simulators show a great similarity to the ones reached in [6], the basic version shows a reduced efficiency. 2 A Brief History of TCP Before moving to the actual simulator implementation and the description of its different features this section summarizes the basic development <p> To verify the simulator and to compare the two versions a network configuration has been chosen that has already been used in another study <ref> [6] </ref>. Whereas the results obtained from both simulators show a great similarity to the ones reached in [6], the basic version shows a reduced efficiency. 2 A Brief History of TCP Before moving to the actual simulator implementation and the description of its different features this section summarizes the basic development of TCP. 1. 4.2BSD (1983): The first widely available release of TCP/IP based on RFC 793 [7]. <p> Here, a network model has been chosen that has already been tested in another study <ref> [6] </ref>. This reduced the verification requirements to a simple comparison between the results obtained in [6] and the ones obtained when using the simulator to build up the same configuration. 6.1 Network Simulator The chosen topology is fairly straightforward as can be seen from Fig. 3. <p> Here, a network model has been chosen that has already been tested in another study <ref> [6] </ref>. This reduced the verification requirements to a simple comparison between the results obtained in [6] and the ones obtained when using the simulator to build up the same configuration. 6.1 Network Simulator The chosen topology is fairly straightforward as can be seen from Fig. 3. A bottleneck switch with a 20 packet buffer is connected to the source and the receiver. <p> to have a maximum window size of 50 packets, with a constant packet length of 500 bytes. 7 6.2 Simulation Results As can be seen from Fig. 4 the graph showing the length of the switch buffer obtained with the enhanced version shows a great resemblance to that presented in <ref> [6] </ref>. A typical cycle consists of a short phase of exponential growth and a longer period in which the congestion avoidance algorithm is used to increase the congestion window. The exponential phase can't unfortunately be shown clear enough as is was too short.
Reference: [7] <author> J. Postel, </author> <title> "Transmission control protocol," Request for Comments (Standard) STD 7, </title> <type> RFC 793, </type> <institution> Internet Engineering Task Force, </institution> <month> Sept. </month> <year> 1981. </year>
Reference-contexts: [6], the basic version shows a reduced efficiency. 2 A Brief History of TCP Before moving to the actual simulator implementation and the description of its different features this section summarizes the basic development of TCP. 1. 4.2BSD (1983): The first widely available release of TCP/IP based on RFC 793 <ref> [7] </ref>. 2. 4.3BSD Tahoe (1988): The version implemented here. The main protocol improvements introduced were slow start and congestion avoidance algorithms. 3. 4.3BSD Reno (1990): This implementation increased the efficiency of the protocol through a better implementation.
Reference: [8] <author> V. Jacobson, </author> <title> "Berkeley TCP evolution from 4.3-Tahoe to 4.3-Reno," </title> <booktitle> in Proceedings of the Eighteenth Internet Engineering Task Force, </booktitle> <institution> (University of British Columbia, </institution> <address> Vancouver), </address> <pages> pp. 363-366, </pages> <month> Sept. </month> <year> 1990. </year>
Reference-contexts: invoking slow 1 The source code of the simulator and some usage example can be obtained as a compressed tar file from ftp://ftp.fokus.gmd.de/pub/step/tools. 1 start on idle links and a better accounting for the variance of the round trip time in the round trip time estimation, for more information see <ref> [8] </ref>. 4. 4.4BSD (1993): To allow TCP to perform well over the so called long fat pipes, i.e., links with large bandwidth-delay products, a few new options had to be included.
Reference: [9] <author> D. Borman, R. Braden, and V. Jacobson, </author> <title> "TCP extensions for high performance," Request for Comments (Proposed Standard) RFC 1323, </title> <institution> Internet Engineering Task Force, </institution> <month> May </month> <year> 1992. </year> <note> (Obsoletes RFC1185). </note>
Reference-contexts: These options allow for window size scaling, protection against sequence number wrap up and a better round trip time estimation, as described in RFC 1323 <ref> [9] </ref>. 5. 4.3BSD Vegas (1994): Here an improved round trip time estimation algorithm is used and the congestion avoidance and slow start mechanisms were modified [10]. 3 4.3BSD Tahoe TCP Congestion Control Algorithm The Reno TCP release was mainly intended to improve the performance of the hosts.
Reference: [10] <author> L. S. Brakmo and S. W. O'Malley, </author> <title> "TCP Vegas: New techniques for congestion detection and avoidance," </title> <booktitle> in SIGCOMM Symposium on Communications Architectures and Protocols, </booktitle> <address> (London, United Kingdom), </address> <pages> pp. 34-35, </pages> <publisher> ACM, </publisher> <month> Aug. </month> <year> 1994. </year> <month> 10 </month>
Reference-contexts: These options allow for window size scaling, protection against sequence number wrap up and a better round trip time estimation, as described in RFC 1323 [9]. 5. 4.3BSD Vegas (1994): Here an improved round trip time estimation algorithm is used and the congestion avoidance and slow start mechanisms were modified <ref> [10] </ref>. 3 4.3BSD Tahoe TCP Congestion Control Algorithm The Reno TCP release was mainly intended to improve the performance of the hosts. This was done without altering the protocol or adding any new algorithms to the Tahoe version.
Reference: [11] <author> D. Sisalem, </author> <title> "Rate based congestion control and its effects on TCP over ATM," </title> <institution> diplomarbeit, Technical University of Berlin, </institution> <month> June </month> <year> 1995. </year>
Reference-contexts: As window sizes and sequence numbers are represented as integers in the simulator these options are already implicitly contained in the implementation. The improved round trip time estimation introduced in RFC 1323 is on the other hand discussed in Appendix 1 of <ref> [11] </ref>. With Vegas the behavior of the sending host has been altered in order to improve the overall performance. These changes are however still under discussion and are not included in what can be called a typical TCP implementation.
Reference: [12] <author> W. R. Stevens, </author> <title> TCP/IP illustrated: </title> <booktitle> the protocols, </booktitle> <volume> vol. </volume> <pages> 1. </pages> <address> Reading, Massachusetts: </address> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: In what remains of this section the implemented algorithms are briefly described. For more detailed information, see <ref> [12] </ref>. 1. Sliding window: On the arrival of a data packet at the receiver, an acknowledgment for the last correctly received byte, is generated. The acknowledgment also contains information about the amount of data the source could still transmit without congesting the receiver, the so called advertised window.
Reference: [13] <author> P. Karn and C. Partridge, </author> <title> "Improving round-trip time estimates in reliable transport protocols," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 9, </volume> <pages> pp. 365-373, </pages> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: As this would introduce a certain error to the estimation of the round trip time, Karn <ref> [13] </ref> specifies that when the acknowledgment for a retransmitted packet arrives the RTT estimators should not be updated. 6.
Reference: [14] <author> S. Floyd, </author> <title> "Simulator tests." </title> <note> submitted for publication, </note> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: The effects of introducing the fast retransmission algorithm were already investigated in various other studies, see <ref> [14] </ref>, so there is no need to go much deeper into this subject. Still, a simple comparison between the two versions of the simulator should not just restate what we already know, but also confirm the correctness of the implementation.
Reference: [15] <author> S. Le*er, K. McKusick, M. Karels, and J. S. Quarterman, </author> <title> The Design and Implementation of the 4.3BSD UNIX Operating System. </title> <address> Massachusetts: </address> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1989. </year>
References-found: 15

