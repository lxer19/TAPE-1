URL: http://rakaposhi.eas.asu.edu/gen-spectrum.ps
Refering-URL: http://rakaposhi.eas.asu.edu/yochan.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: email: rao@asuvax.asu.edu  
Title: Formalizing a Spectrum of Plan Generalizations Based on Modal Truth Criteria  
Author: Subbarao Kambhampati 
Note: Submitted to AIPS-94 (2nd Intl. Planning Conference) Content Areas: Learning, Explanation-based Generalization Submitted also to Canadian AI Conference, 1994 This research is supported in part by National Science Foundation under grant IRI-9210997, and ARPA/Rome Laboratory planning initiative under grant F30602-93-C-0039.  
Address: Tempe, AZ 85287  
Affiliation: Department of Computer Science and Engineering Arizona State University  
Abstract: Plan generalizations are of considerable importance in improving planning performance through reuse. In this paper, we provide a unified framework for analytic (non-inductive) plan generalization based on explanation of plan correctness with respect to modal truth criteria. Within this framework, we explore a large spectrum of generalizations based on the type of constraints on the plan that are being relaxed (ordering, binding, initial state specification), the strength and type of truth criteria used for explaining correctness and the number of explanations used as a basis for generalization. Apart from the straightforward precondition and order generalizations, the spectrum also includes such novel ones as possible correctness generalizations and disjunctive generalizations. In each case, we characterize the cost of producing the generalization, and the storage and usage advantages provided by it during plan reuse. Although there has been previous work on plan generalizations, this is the first time that a complete spectrum of generalizations are characterized within a single unified framework, facilitating a comparative analysis of their costs and benefits. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Chapman. </author> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32:333--377, </volume> <year> 1987. </year>
Reference-contexts: We start with the flexible partial order plan representation, and formalize explanation based plan generalization in terms of proofs of correctness with respect to modal truth criteria (which have been originally proposed for formalizing plan generation <ref> [1] </ref>). Specifically, the correctness of a given plan is first explained with respect to a truth criterion. This proof, called validation structure of the plan, is used as a basis for generalization. <p> The subset of this representation where all three formulas can be represented as conjunctions of function-less first order literals, and all the variables have infinite domains, is called the TWEAK representation (c.f. <ref> [1, 12] </ref>). As an illustration of this plan representation, consider the blocks world problem of stacking four blocks A; B; C and D, which are initially all on table and clear, into two stacks On (A; B) and On (C; D). <p> The modal operators ``2'' and ``3'' are used to denote the necessary and possible truth of a statement over all the completions of a plan (see <ref> [1] </ref>). The correctness of a popi plan is defined in terms of its completions. A completion is said to be correct if it can be executed in a state matching the effects of t I to produce a state matching the preconditions of t G . <p> literal of s 00 , such that 3 (D C), then there exists some step w 2 T (called a white-knight step) such that 2 (s 00 w s) and w has an effect E w such that 2 [(D C) ) (E w C)] MTC2 is equivalent to Chapman's <ref> [1] </ref> necessary and sufficient truth criterion for TWEAK plans. (Note that the part in bold lettering, called the white-knight clause, is the only difference between MTC1 and MTC2.) The explanation of correctness of a plan with respect to MTC2 can also be represented in the form of validation links that are <p> generalizations may provide more compact generalizations (and thus tradeoff instantiation cost to storage cost) 6 Conclusions and Related Work The main contribution of this paper is a unified approach for plan generalization based on the modal truth criteria, which have been originally proposed as a way of formalizing generative planning <ref> [1, 6] </ref>. The approach can be summarized as follows: 1. Compute the explanation of correctness of a (popi ) plan with respect to the given truth criterion. Represent the explanation in terms of a validation structure 2.
Reference: [2] <author> S.A. Chien. </author> <title> An Explanation-Based Learning Approach to Incremental Planning. </title> <type> PhD thesis, TR. UIUCDCS-R-90-1646 (Ph.D. Thesis). </type> <institution> Dept. of Computer Science, University of Illinois, Urbana, IL, </institution> <year> 1990. </year>
Reference-contexts: An important approach for plan generalization is the so-called explanation-based generalization (EBG) [14]. Much of the previous work on EBG of plans concentrated on inflexible plan representations, and was limited to straight forward precondition and order generalization <ref> [14, 18, 10, 2, 17, 19, 3] </ref> This paper aims to unify and extend the previous work on plan-generalizations. <p> We have also characterized the spectrum of tradeoffs offered by the various generalizations, including the costs of producing and using them. Although this paper is not the first to explore generalizations of popi plans (see <ref> [2] </ref> and [10]), it subsumes and unifies previous work by providing a larger set of generalizations for popi plans with interesting storage, retrieval and instantiation tradeoffs. In this paper we avoided the issue of whether partial order or total order planning provides the best framework for plan reuse.
Reference: [3] <author> B. Fade and P. Regnier. </author> <title> Temporal optimization of linear plans of action: A strategy based on a complete method for the determination of parallelism. </title> <type> Technical report, </type> <institution> IRIR-Laboratorie Langages et Systemes Informatiques, Universite Paul Sabatier, France, </institution> <year> 1990. </year>
Reference-contexts: An important approach for plan generalization is the so-called explanation-based generalization (EBG) [14]. Much of the previous work on EBG of plans concentrated on inflexible plan representations, and was limited to straight forward precondition and order generalization <ref> [14, 18, 10, 2, 17, 19, 3] </ref> This paper aims to unify and extend the previous work on plan-generalizations. <p> In this sense, it subsumes the plan order optimization algorithms described in [19] and <ref> [3] </ref>. 6 3.3 Combining order generalization and precondition generalization Given a plan P : hT; O; Bi and a validation structure V, there may typically be more than one way of specializing (adding constraints to) B and O to make V a validation structure of P.
Reference: [4] <author> R. Fikes, P. Hart, and N. Nilsson. </author> <title> Learning and executing generalized robot plans. </title> <journal> Artificial Intelligence, </journal> <volume> 3(4):251--288, </volume> <year> 1972. </year> <month> 13 </month>
Reference-contexts: Such a process can, for example, take a totally ordered totally instantiated plan, such as one generated by strips <ref> [4] </ref> or prodigy [15] and generalize it by first removing unnecessary orderings and then generalizing the variable bindings. As an example, suppose we started with a completion of the 4BS plan with t 1 t 2 . <p> An important issue is the cost of using each type of generalization during planning. The necessary correctness generalizations of popi plans developed in this paper can be used during planning either as (nonlinear) macro-operators <ref> [4] </ref> or as generalized plans to be reused [9]. In the former case, the stored plans can be instantiated even in cases where only some parts of the plan are applicable. In particular, the validation structure can be used to edit the macro operator (c.f. [4]) and find sub-parts of it <p> planning either as (nonlinear) macro-operators <ref> [4] </ref> or as generalized plans to be reused [9]. In the former case, the stored plans can be instantiated even in cases where only some parts of the plan are applicable. In particular, the validation structure can be used to edit the macro operator (c.f. [4]) and find sub-parts of it that are applicable in the current situation [9]. The cost of instantiating a macro-operator depends on the number of preconditions that need to be checked.
Reference: [5] <author> E. Fink and Q. Yang. </author> <title> A Spectrum of Plan Justifications. </title> <booktitle> In Working Notes of the AAAI Spring Symposium on Foundations of Automatic Planning: Classical Approach and Beyond, </booktitle> <month> March </month> <year> 1993 </year>
Reference-contexts: Both types of planners can benefit from storing and reusing generalized plans discussed in this paper. In [8], we discuss the orthogonal issue of relative merits of basing reuse in a partial order vs. total order planning framework. Fink and Yang <ref> [5] </ref> focus on a closely related notion of plan minimization (removing unnecessary sets of steps from the plan, without affecting its correctness), and discuss a different, explanation independent, notion of justification (especially of plan steps) to aid this minimization.
Reference: [6] <author> S. Kambhampati. </author> <title> Characterizing multi-contributor causal structures for planning. </title> <booktitle> In Proceedings of 1st Intl. Conf. </booktitle> <institution> on AI Planning Systems, </institution> <note> 1992 (Extended version to appear in Artificial Intelligence, Fall 94). </note>
Reference-contexts: generalizations may provide more compact generalizations (and thus tradeoff instantiation cost to storage cost) 6 Conclusions and Related Work The main contribution of this paper is a unified approach for plan generalization based on the modal truth criteria, which have been originally proposed as a way of formalizing generative planning <ref> [1, 6] </ref>. The approach can be summarized as follows: 1. Compute the explanation of correctness of a (popi ) plan with respect to the given truth criterion. Represent the explanation in terms of a validation structure 2. <p> An interesting avenue of future investigation would involve first minimizing the plan, and then generalizing it. However, the utility of such an approach depends on the likeliness of getting a non-minimal plan to begin with. In <ref> [6] </ref>, we discuss a more general notion of validation structure, that allows multiple supports for each condition, and explore notions of justification with respect to it. Such generalized validation structures may become necessary to represent proofs of correctness of plans with expressive actions that facilitate synergistic effects.
Reference: [7] <author> S. Kambhampati. </author> <title> Utility tradeoffs in incremental plan modification and reuse. </title> <booktitle> In Working Notes of the 1992 AAAI Spring Symposium on Computational Considerations in Supporting Incremental Modification and Reuse, </booktitle> <month> March, </month> <year> 1992. </year>
Reference-contexts: We believe that the systematic comparative analysis of plan generalizations facilitated by this work, is of critical importance in designing plan reuse frameworks with favorable computational tradeoffs <ref> [7] </ref>. The paper is organized as follows: Section 1.1 reviews the plan representation and notions of plan correctness. Section 2 discusses truth criteria and how they are used to build explanations of correctness of plans.
Reference: [8] <author> S. Kambhampati and J. Chen. </author> <title> Relative utility of basing ebg based plan reuse in partial ordering vs. total ordering planning. </title> <note> Submitted to AAAI-93, </note> <year> 1993. </year>
Reference-contexts: In this paper we avoided the issue of whether partial order or total order planning provides the best framework for plan reuse. Both types of planners can benefit from storing and reusing generalized plans discussed in this paper. In <ref> [8] </ref>, we discuss the orthogonal issue of relative merits of basing reuse in a partial order vs. total order planning framework.
Reference: [9] <author> S. Kambhampati and J.A. Hendler. </author> <title> A validation structure based theory of plan modification and reuse. </title> <booktitle> Artificial Intelligence, </booktitle> <pages> 55(2-3), </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: An important issue is the cost of using each type of generalization during planning. The necessary correctness generalizations of popi plans developed in this paper can be used during planning either as (nonlinear) macro-operators [4] or as generalized plans to be reused <ref> [9] </ref>. In the former case, the stored plans can be instantiated even in cases where only some parts of the plan are applicable. In particular, the validation structure can be used to edit the macro operator (c.f. [4]) and find sub-parts of it that are applicable in the current situation [9]. <p> <ref> [9] </ref>. In the former case, the stored plans can be instantiated even in cases where only some parts of the plan are applicable. In particular, the validation structure can be used to edit the macro operator (c.f. [4]) and find sub-parts of it that are applicable in the current situation [9]. The cost of instantiating a macro-operator depends on the number of preconditions that need to be checked. It is thus typically costlier to instantiate generalizations with disjunctive sets of preconditions (such as the ones described in Sections 3.3 and 4.1). <p> It is thus typically costlier to instantiate generalizations with disjunctive sets of preconditions (such as the ones described in Sections 3.3 and 4.1). In addition to being used as macro operators, the stored plans can also be instantiated in new situations through plan refinement and modification <ref> [9] </ref>. This latter process involves using the modal truth criterion to establish additional propositions within the context of the retrieved plan. This option is particularly relevant in the case of possible correctness generalizations, since these generalizations cannot be instantiated as macro operators.
Reference: [10] <author> S. Kambhampati and S. Kedar. </author> <title> Explanation based generalization of partially ordered plans. </title> <booktitle> In Proceedings of 9th AAAI, </booktitle> <year> 1991. </year>
Reference-contexts: An important approach for plan generalization is the so-called explanation-based generalization (EBG) [14]. Much of the previous work on EBG of plans concentrated on inflexible plan representations, and was limited to straight forward precondition and order generalization <ref> [14, 18, 10, 2, 17, 19, 3] </ref> This paper aims to unify and extend the previous work on plan-generalizations. <p> the preconditions of t G are on (p; q); on (r; s) and the effects of t I are clear (p); clear (q); on (p; table); clear (r); clear (s) and on (r; table). 1 We shall use the superscript ``s'' to distinguish entities corresponding to the schematized plan. 2 <ref> [10] </ref> contains a more elaborate description of this process. 3 Note that the construction of initial explanation itself causes an important form of relaxation of the initial state specification by removing from consideration any part of the initial state that are not explicitly used to support any validation. 5 Since there <p> Including the cost of initial explanation construction, the complexity of precondition generalization can be shown to be O (n 3 ) <ref> [10] </ref>. 3.2 Explanation-based Order Generalization Just as precondition generalization eliminates any initial state conditions ( effects of t I ), and variable bindings that are not required to make the plan correct according to the given validation structure, we can also eliminate any orderings that are redundant. <p> We have also characterized the spectrum of tradeoffs offered by the various generalizations, including the costs of producing and using them. Although this paper is not the first to explore generalizations of popi plans (see [2] and <ref> [10] </ref>), it subsumes and unifies previous work by providing a larger set of generalizations for popi plans with interesting storage, retrieval and instantiation tradeoffs. In this paper we avoided the issue of whether partial order or total order planning provides the best framework for plan reuse.
Reference: [11] <author> S. Kambhampati and S. Kedar. </author> <title> A Unified framework for Explanation based generalization of partially ordered and Partially Instantiated plans Artificial Intelligence, </title> <note> to appear in Fall 1994. </note>
Reference-contexts: As long as the initial state of a given planning problem satisfies these constraints, the generalized plan can be used in that situation to successfully achieve the generalized goals <ref> [11] </ref>. 3 For the case of 4BS plan, the precondition generalization algorithm will produce a plan 4BS p : hft I ; t 1 : puton (p; q); t 2 : puton (r; s); t G g; ft I t 1 t G ; t I t 2 t G g; <p> In <ref> [11] </ref> we describe an O (n 3 ) algorithm for doing this, that is a straightforward adaptation of precondition generalization scheme discussed in Section 3.1. 5 Tradeoffs between the spectrum of generalizations Table 1 summarizes the comparative costs of producing, and modes of reusing each of the generalizations discussed in the
Reference: [12] <author> S. Kambhampati and D.S. Nau. </author> <title> On the Nature and Role of Modal Truth Criteria in Planning Tech. </title> <type> Report. </type> <institution> ISR-TR-93-30, Inst. for Systems Research, University of Maryland, </institution> <month> March, </month> <year> 1993. </year>
Reference-contexts: The subset of this representation where all three formulas can be represented as conjunctions of function-less first order literals, and all the variables have infinite domains, is called the TWEAK representation (c.f. <ref> [1, 12] </ref>). As an illustration of this plan representation, consider the blocks world problem of stacking four blocks A; B; C and D, which are initially all on table and clear, into two stacks On (A; B) and On (C; D). <p> Since such a mechanism allows a stored plan to be used in a much larger set of situations, it improves storage and retrieval, and provides an interesting memory vs. planning tradeoff. Unfortunately, unlike necessary correctness, checking possible correctness is NP-hard even for plans in TWEAK representations <ref> [12] </ref>. Even more importantly, the resulting preconditions could be highly disjunctive and thus the match cost might outweigh their expected savings [15]. One compromise would be to look for necessary or sufficient conditions for possible correctness which will be easier to compute and match against. <p> These include the generality of the truth criterion used as the basis for generalization; the particular constraints on the popi plan that are 7 Strictly speaking, possible truth conditional on executability; see <ref> [12] </ref> 8 In other words, even if its preconditions for possible correctness, as described above, hold in that situation. there may not be any completion of the plan that will work in a given situation, 10 1 i 6 * i P Precond-gen-MTC2 (P) Weakest-precond (P) Disjunctive-ord-prec-gen (P) Ord-prec-gen (P) Order-gen
Reference: [13] <author> D. McAllester and D. Rosenblitt. </author> <title> Systematic nonlinear planning. </title> <booktitle> In Proceedings of 9th AAAI, </booktitle> <year> 1991. </year>
Reference-contexts: In particular, there are essentially two types of ordering and binding constraints that P has to satisfy so as to maintain V as its validation structure <ref> [13] </ref>: Causal constraints: For each validation v : hE; t s ; C; t d i 2 V, (t s t d ) 2 O, and (E C) 2 B.
Reference: [14] <author> T. M. Mitchell, R. M. Keller, and S. T. Kedar-Cabelli. </author> <title> Explanation-based learning: A unifying view. </title> <journal> Machine Learning, </journal> <volume> 1(1):47 -- 80, </volume> <year> 1986. </year>
Reference-contexts: Generalized plans are of particular utility in plan reuse as storing and reusing generalized plans as against specific plans allows for storage compactions, and retrieval efficiency. An important approach for plan generalization is the so-called explanation-based generalization (EBG) <ref> [14] </ref>. Much of the previous work on EBG of plans concentrated on inflexible plan representations, and was limited to straight forward precondition and order generalization [14, 18, 10, 2, 17, 19, 3] This paper aims to unify and extend the previous work on plan-generalizations. <p> An important approach for plan generalization is the so-called explanation-based generalization (EBG) [14]. Much of the previous work on EBG of plans concentrated on inflexible plan representations, and was limited to straight forward precondition and order generalization <ref> [14, 18, 10, 2, 17, 19, 3] </ref> This paper aims to unify and extend the previous work on plan-generalizations.
Reference: [15] <author> S. Minton. </author> <title> Quantitative results concerning the utility of explanation-based learning. </title> <journal> In Artificial Intelligence, </journal> <volume> volume 42, </volume> <pages> pages 363--392, </pages> <year> 1990. </year>
Reference-contexts: Such a process can, for example, take a totally ordered totally instantiated plan, such as one generated by strips [4] or prodigy <ref> [15] </ref> and generalize it by first removing unnecessary orderings and then generalizing the variable bindings. As an example, suppose we started with a completion of the 4BS plan with t 1 t 2 . <p> Unfortunately, unlike necessary correctness, checking possible correctness is NP-hard even for plans in TWEAK representations [12]. Even more importantly, the resulting preconditions could be highly disjunctive and thus the match cost might outweigh their expected savings <ref> [15] </ref>. One compromise would be to look for necessary or sufficient conditions for possible correctness which will be easier to compute and match against. Since 2P 3P , the generalized preconditions for necessary correctness (see Section 3.1 already provide a set of sufficient conditions for possible correctness.
Reference: [16] <author> S. Minton, M. Drummond, J. Bresina and A. Philips. </author> <title> Total Order vs. Partial Order Planning: </title> <booktitle> Factors Influencing Performance In Proc. </booktitle> <address> KR-92, </address> <year> 1992. </year>
Reference-contexts: It is however possible to come up with tractable sufficient truth criteria <ref> [16] </ref> 5 The fact that MTC1 cannot explain the correctness of some partially ordered plans is not as limiting as it may seem.
Reference: [17] <author> R. J. Mooney. </author> <title> Generalizing the order of operators in macro-operators. </title> <booktitle> In Proceedings of the 5th International Conference on Machine Learning, </booktitle> <pages> pages 270--283, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: An important approach for plan generalization is the so-called explanation-based generalization (EBG) [14]. Much of the previous work on EBG of plans concentrated on inflexible plan representations, and was limited to straight forward precondition and order generalization <ref> [14, 18, 10, 2, 17, 19, 3] </ref> This paper aims to unify and extend the previous work on plan-generalizations. <p> This process is identical to the generalization algorithm proposed in <ref> [17] </ref>. Computing all the consistent B O combinations for a given plan P and validation structure V is costlier than sequential generalization; Mooney's algorithm takes O (n 5 ) in the length of the plan [17]. 7 4 Extending the generalization framework 4.1 Utilizing more general truth criteria It is possible <p> This process is identical to the generalization algorithm proposed in <ref> [17] </ref>. Computing all the consistent B O combinations for a given plan P and validation structure V is costlier than sequential generalization; Mooney's algorithm takes O (n 5 ) in the length of the plan [17]. 7 4 Extending the generalization framework 4.1 Utilizing more general truth criteria It is possible to use truth criteria more general than MTC1, as a basis for explanation construction and generalization. <p> generalizations offer a corresponding spectrum of tradeoffs for plan reuse; these can be summarized as follows: 11 Type of Generalization Cost Usage Precondition Generalization with MTC1 O (n 3 ) M,A Order Generalization O (n 3 ) M,A Precondition generalization with MTC2 O (n 4 ) M,A Disjunctive order generalization <ref> [17] </ref> O (n 5 ) M,A Precondition Generalization via multiple explanations (Weakest preconditions w.r.t. Tweak MTC) O (n 5 ) M,A weakest preconditions for poss. corr. NP-hard A necessary preconditions for poss. corr. O (n 3 ) A Table 1: Comparison between generalization algorithms.
Reference: [18] <author> R. J. Mooney and S. W. Bennett. </author> <title> A domain independent explanation-based generalizer. </title> <booktitle> In Proceedings of the Fifth National Conference on Artificial Intelligence, pages 551--555, </booktitle> <address> Philadelphia, PA, 1986. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: An important approach for plan generalization is the so-called explanation-based generalization (EBG) [14]. Much of the previous work on EBG of plans concentrated on inflexible plan representations, and was limited to straight forward precondition and order generalization <ref> [14, 18, 10, 2, 17, 19, 3] </ref> This paper aims to unify and extend the previous work on plan-generalizations.
Reference: [19] <author> M. M. Veloso, M. A. Perez, and J. G. Carbonell. </author> <title> Nonlinear planning with parallel resource allocation. In Proceedings of the Workshop on Innovative Approaches to Planning, Scheduling and Control, </title> <booktitle> pages 207--212, </booktitle> <month> November </month> <year> 1990. </year> <month> 14 </month>
Reference-contexts: An important approach for plan generalization is the so-called explanation-based generalization (EBG) [14]. Much of the previous work on EBG of plans concentrated on inflexible plan representations, and was limited to straight forward precondition and order generalization <ref> [14, 18, 10, 2, 17, 19, 3] </ref> This paper aims to unify and extend the previous work on plan-generalizations. <p> In this sense, it subsumes the plan order optimization algorithms described in <ref> [19] </ref> and [3]. 6 3.3 Combining order generalization and precondition generalization Given a plan P : hT; O; Bi and a validation structure V, there may typically be more than one way of specializing (adding constraints to) B and O to make V a validation structure of P.
References-found: 19

