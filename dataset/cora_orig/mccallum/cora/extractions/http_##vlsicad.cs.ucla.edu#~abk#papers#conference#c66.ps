URL: http://vlsicad.cs.ucla.edu/~abk/papers/conference/c66.ps
Refering-URL: http://vlsicad.cs.ucla.edu/~abk/publications.html
Root-URL: http://www.cs.ucla.edu
Title: PARTITIONING-BASED STANDARD-CELL GLOBAL PLACEMENT WITH AN EXACT OBJECTIVE  
Author: Dennis J.-H. Huang and Andrew B. Kahng yzfl 
Address: Los Angeles, CA 90095-1596 USA  San Jose, CA 95134 USA  
Affiliation: UCLA Computer Science Dept.,  Cadence Design Systems, Inc.,  
Abstract: We present a new top-down quadrisection-based global placer for standard-cell layout. The key contribution is a new general gain update scheme for partitioning that can exactly capture detailed placement objectives on a per-net basis. We use this gain update scheme, along with an efficient multilevel partitioner, as the basis for a new quadrisection-based placer called QUAD. Even though QUAD is a global placer, it can achieve significant improvements in wirelength and congestion distribution over GOR-DIAN-L/DOMINO [SDJ91] [DJS94] (a leading quadratic placer with linear wirelength objective and detailed placement improvement). QUAD can be easily extended to capture various practical considerations; our timing-driven placement can obtain wirelength savings (as well as small cycle time improvements) versus the SPEED [RE95]. 
Abstract-found: 1
Intro-found: 1
Reference: [AHK96] <author> C. J. Alpert, L. W. Hagen, and A. B. Kahng. </author> <title> "A Hybrid Multilevel/Genetic Approach for Circuit Partitioning." </title> <booktitle> In Proc. ACM/SIGDA Physical Design Workshop, </booktitle> <pages> pp. 100-105, </pages> <year> 1996. </year>
Reference-contexts: The basic multilevel algorithm consists of two phases, bottom-up matching (or clustering) and top-down partitioning. Given a netlist N 0 , the matching phase of [Alp96] <ref> [AHK96] </ref> uses a matching-based clustering scheme for each level of the netlist. A clustering of N 0 is used to in duce the coarser netlist N 1 , then a clustering of N 1 in-duces N 2 , etc. until the most coarsened netlist N m is constructed. <p> A similar approach can be applied to multi-way partitioning. ML is efficient (an untuned implementation performs 4-way partitioning of a 25; 000-cell design in 32 CPU seconds on a SUN Ultra 1 (140 MHz)), and yields excellent results when compared against the best known methods from the literature [Alp96] <ref> [AHK96] </ref>. 4.2. Net Vector Computation During each stage of quadrisection, only the cells located in the current partition are movable; cells outside the current partition are fixed. We first compute the center coordinates of the four quadrants in the current partition.
Reference: [Alp96] <author> C. J. Alpert. </author> <title> Multi-way Graph and Hypergraph Partitioning. </title> <type> PhD thesis, </type> <institution> University of California, </institution> <address> Los Angeles, </address> <year> 1996. </year>
Reference-contexts: We also illustrate how to efficiently compute the four configurations using bit operations. We emphasize that this gain update scheme can be used within almost any iterative partitioning approach, including k-way FM, 2-phase FM [BCL87], CLIP-FM [DD96a] and multi level FM <ref> [Alp96] </ref>. 4. <p> The basic multilevel algorithm consists of two phases, bottom-up matching (or clustering) and top-down partitioning. Given a netlist N 0 , the matching phase of <ref> [Alp96] </ref> [AHK96] uses a matching-based clustering scheme for each level of the netlist. A clustering of N 0 is used to in duce the coarser netlist N 1 , then a clustering of N 1 in-duces N 2 , etc. until the most coarsened netlist N m is constructed. <p> A similar approach can be applied to multi-way partitioning. ML is efficient (an untuned implementation performs 4-way partitioning of a 25; 000-cell design in 32 CPU seconds on a SUN Ultra 1 (140 MHz)), and yields excellent results when compared against the best known methods from the literature <ref> [Alp96] </ref> [AHK96]. 4.2. Net Vector Computation During each stage of quadrisection, only the cells located in the current partition are movable; cells outside the current partition are fixed. We first compute the center coordinates of the four quadrants in the current partition.
Reference: [BCL87] <author> T. Bui, S. Chaudhuri, T. Leighton, and M. Sipser. </author> <title> "Graph Bisection Algorithms with Good Average Case Behavior." </title> <journal> Combinatorica, </journal> <volume> 7(2) </volume> <pages> 171-191, </pages> <year> 1987. </year>
Reference-contexts: We also illustrate how to efficiently compute the four configurations using bit operations. We emphasize that this gain update scheme can be used within almost any iterative partitioning approach, including k-way FM, 2-phase FM <ref> [BCL87] </ref>, CLIP-FM [DD96a] and multi level FM [Alp96]. 4.
Reference: [Bre76] <author> M. A. Breuer. </author> <title> "Min-cut Placement." </title> <journal> Design Automation and Fault-Tolerant Computing, </journal> <volume> 1(4) </volume> <pages> 343-362, </pages> <year> 1976. </year>
Reference-contexts: Each sub-hypergraph is assigned to a partition; when each subhy-pergraph has only one cell, then each cell will have been mapped to a unique (non-overlapping) position on the chip. Early approaches which use a min-cut partitioning objective are due to such authors as Breuer <ref> [Bre76] </ref> [Bre77] or Lauther [Lau79]. Most modern partitioning-based placers use some form of KL-FM partitioning heuristic, also with the minimum net-cut objective.
Reference: [Bre77] <author> M. A. Breuer. </author> <title> "A Class of Min-cut Placement Algorithm for the Placement of Standard Cells." </title> <booktitle> In Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 284-290, </pages> <year> 1977. </year>
Reference-contexts: Each sub-hypergraph is assigned to a partition; when each subhy-pergraph has only one cell, then each cell will have been mapped to a unique (non-overlapping) position on the chip. Early approaches which use a min-cut partitioning objective are due to such authors as Breuer [Bre76] <ref> [Bre77] </ref> or Lauther [Lau79]. Most modern partitioning-based placers use some form of KL-FM partitioning heuristic, also with the minimum net-cut objective.
Reference: [DD96a] <author> S. Dutt and W. Deng. </author> <title> "VLSI Circuit Partitioning by Cluster-Removal Using Iterative Improvement Techniques." </title> <booktitle> In Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pp. 194-200, </pages> <year> 1996. </year>
Reference-contexts: We also illustrate how to efficiently compute the four configurations using bit operations. We emphasize that this gain update scheme can be used within almost any iterative partitioning approach, including k-way FM, 2-phase FM [BCL87], CLIP-FM <ref> [DD96a] </ref> and multi level FM [Alp96]. 4. <p> During the partitioning phase, a 2-way FM-based partitioning algorithm (e.g., LIFO FM [HHK95] or CLIP-FM [DD96b] <ref> [DD96a] </ref>) is applied at each level of the netlist.
Reference: [DD96b] <author> S. Dutt and W. Deng. </author> <title> "VLSI Circuit Partitioning by Cluster-Removal Using Iterative Improvement Max Intrinsic Timing--Case Measure Path Delay TW7.0 QUAD fract Delay 10.6 17.9 18.1 MSTx100 349 347 struct Delay 40.0 78.8 79.3 MSTx100 5130 5103 avq s Delay 37.3 61.4 60.9 MSTx100 46763 47153 Table 7. Comparison of timing-driven QUAD and TimberWolf7.0. Techniques." </title> <booktitle> In Proc. ACM/SIGDA Physical Design Workshop, </booktitle> <pages> pp. 92-99, </pages> <year> 1996. </year> <note> Also see corresponding Technical Report, </note> <institution> Dept. of Electrical Engineering, U. Minnesota. </institution>
Reference-contexts: During the partitioning phase, a 2-way FM-based partitioning algorithm (e.g., LIFO FM [HHK95] or CLIP-FM <ref> [DD96b] </ref> [DD96a]) is applied at each level of the netlist.
Reference: [DJA94] <author> K. Doll, F. M. Johannes, and K. J. Antreich. </author> <title> "Iterative Placement Improvement by Network Flow Methods." </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 13 </volume> <pages> 1189-1200, </pages> <year> 1994. </year>
Reference-contexts: The results are shown in Table 3. QUAD w/o CO averages 10% greater wirelength but can require as little as 17% of the runtime of QUAD for large benchmarks. Our second experiment compares our quadrisection results with GORDIAN-L [SDJ91] and the post-processing detailed placer DOMINO <ref> [DJA94] </ref> on 18 benchmarks with 100% area utilization (results for GORDIAN-L/DOMINO were provided by Guenter Stenz [Ste97] at TU Munich). Note that GORDIAN-L is a global quadratic placement tool, while DOMINO is a detailed placer; QUAD should be considered as a global placer.
Reference: [DJS94] <author> K. Doll, F. M. Johannes, and G. Sigl. </author> <title> "Iterative Placement Improvement by Network Flow Methods." </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> 13(10) </volume> <pages> 1189-1199, </pages> <year> 1994. </year>
Reference-contexts: In this section, we first review the traditional (KL-FM) iterative partitioning approach, along with its gain update scheme. We then review several partitioning-based placement techniques in the literature, centering on the issue of terminal propagation. We will omit discussion of local-improvement techniques (e.g, simulated annealing [SS93] [SS95] and DOMINO <ref> [DJS94] </ref>). 2.1. Gain Update in Iterative Partitioning Iterative improvement heuristics for netlist partitioning typically start with an initial solution and make a series of passes. Each pass iteratively determines the move of one or more cells which achieves the best possible gain in the partitioning objective.
Reference: [DK85] <author> A. E. Dunlop and B. W. Kernighan. </author> <title> "A Procedure for Placement of Standard Cell VLSI Circuits." </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 4(1) </volume> <pages> 92-98, </pages> <year> 1985. </year>
Reference-contexts: Nets connecting to external IO pads or other cells in another (higher-level) partition must also be considered. Dunlop and Kernighan <ref> [DK85] </ref> proposed the terminal propagation technique which adds to the current netlist dummy cells that are fixed in the appropriate partitions. For quadrisection, the terminal propagation technique is shown in Figure 1.
Reference: [FM82] <author> C. M. Fiduccia and R. M. Mattheyses. </author> <title> "A Linear Time Heuristic for Improving Network Partitions." </title> <booktitle> In Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 175-181, </pages> <year> 1982. </year>
Reference-contexts: Computing gains in the KL heuristic is expensive; O (n 2 ) swaps are evaluated before every move, resulting in a complexity per pass of O (n 2 log n) (assuming a sorted list of costs). The method of Fiduccia and Mattheyses (FM) <ref> [FM82] </ref> reduces the time per pass to linear in the size of the netlist (i.e., O (p), where p is the total number of pins) by adopting a single-cell move structure, and a gain bucket data structure that allows constant-time selection of the highest-gain cell and fast gain updates after each <p> Net vector entries for quadrisection with different horizontal and vertical weights (wire costs). We next observe that our partitioning algorithm will use the same FM gain bucket data structure as in <ref> [FM82] </ref>. However, our gain computation is different from that of previous works. There are k (k 1) gain buckets for k-way parti tioning. We let fl j (v) denote the gain for moving cell v to partition j.
Reference: [HHK95] <author> L. W. Hagen, D. J.-H. Huang, and A. B. Kahng. </author> <title> "On Implementation Choices for Iterative Improvement Partitioning Algorithms." </title> <booktitle> In Proceedings European Design Automation Conf., </booktitle> <pages> pp. 144-149, </pages> <year> 1995. </year>
Reference-contexts: A clustering of N 0 is used to in duce the coarser netlist N 1 , then a clustering of N 1 in-duces N 2 , etc. until the most coarsened netlist N m is constructed. During the partitioning phase, a 2-way FM-based partitioning algorithm (e.g., LIFO FM <ref> [HHK95] </ref> or CLIP-FM [DD96b] [DD96a]) is applied at each level of the netlist.
Reference: [KL70] <author> B. W. Kernighan and S. Lin. </author> <title> "An Efficient Heuristic Procedure for Partitioning Graphs." </title> <journal> Bell Syst. Tech. J., </journal> <volume> 49(2) </volume> <pages> 291-307, </pages> <year> 1970. </year>
Reference-contexts: The process terminates when a local minimum is reached, i.e., the current pass does not improve the objective. Computing and updating gain data is the heart of the iterative improvement approach. The prototype iterative heuristic is that of Kernighan and Lin (KL) <ref> [KL70] </ref>, which uses a pair-swap move structure. During each pass, every cell is moved exactly once between two partitions. At the beginning of the pass, all cells are "unlocked", i.e., free to be swapped. Iteratively, the pair of unlocked cells with highest gain is swapped.
Reference: [KSJ91] <author> J. M. Kleinhans, G. Sigl, F. M. Johannes, and K. J. Antreich. "GORDIAN: </author> <title> VLSI Placement by Quadratic Programming and Slicing Optimization." </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 10(3) </volume> <pages> 356-365, </pages> <year> 1991. </year>
Reference-contexts: V e [conf id 2 ]) 26. b ! gain [to] + = gain; 27. endfor 28. endfor 29. for j = 0 to k 1 do 30. c j (e) = af terSize [j] 31.endfor the fixed IO pads. (Quadratic placement approaches such as PROUD [TKH88] [TK91] and GORDIAN <ref> [KSJ91] </ref> will degrade when there are no fixed pads to anchor the placement and spread out the locations of the core cells.) Second, our placer does not require terminal propagation, but still considers the exact connectivity from external blocks, as well as its exact impact on placement objectives such as MST
Reference: [Lau79] <author> U. Lauther. </author> <title> "A Min-cut Placement Algorithm for General Cell Assemblies Based on a Graph Representation." </title> <booktitle> In Proceedings of the 16th Design Automation Conference, </booktitle> <pages> pp. 1-10, </pages> <year> 1979. </year>
Reference-contexts: Each sub-hypergraph is assigned to a partition; when each subhy-pergraph has only one cell, then each cell will have been mapped to a unique (non-overlapping) position on the chip. Early approaches which use a min-cut partitioning objective are due to such authors as Breuer [Bre76] [Bre77] or Lauther <ref> [Lau79] </ref>. Most modern partitioning-based placers use some form of KL-FM partitioning heuristic, also with the minimum net-cut objective.
Reference: [Len90] <author> T. Lengauer. </author> <title> Combinatorial Algorithms for Integrated Circuit Layout. </title> <address> Wiley-Teubner, </address> <year> 1990. </year>
Reference-contexts: This paper describes a new placement tool for the standard-cell methodology; we assume a row-based layout with uniform module heights and variable module widths, with instance sizes of up to several tens of thousands of cells being of greatest interest. For overviews of (standard-cell) placement, see, e.g., Lengauer <ref> [Len90] </ref> or Shahookar and Mazumder [SM91]. A VLSI circuit netlist consists of a set of modules (cells) connected by signal nets.
Reference: [RE95] <author> B. M. Riess and G. G. Ettelt. </author> <title> "SPEED: Fast and Efficient Timing Driven Placement." </title> <booktitle> In Proceedings of the IEEE International Symposium on Circuits and Systems, </booktitle> <pages> pp. 377-380, </pages> <year> 1995. </year>
Reference-contexts: Half perimeter cost comparison of GORDIAN-L, DOMINO and QUAD. plementations update net cost vectors according to various schemes, e.g., based on timing analysis that is interleaved with the partitioning. Table 6 shows results comparing our timing-driven placement results with those of SPEED <ref> [RE95] </ref>. Here, "Delay" (a sort of "cycle time") is the maximum path delay between any pair of sequentially adjacent storage elements (flip-flops). Path delays are computed using pin parasitics and cell intrinsic delays from the timing-PROUD library data, along with a centroid-star net model and Elmore delay for the interconnect. <p> Path delays are computed using pin parasitics and cell intrinsic delays from the timing-PROUD library data, along with a centroid-star net model and Elmore delay for the interconnect. This is the same delay evaluation (with the same interconnect parasitics) used in <ref> [RE95] </ref>, except that we apply factors of 1/2 in the Elmore delay expressions that were not applied in [RE95]. We see that timing-driven QUAD ("Timing-QUAD") outperforms SPEED by an average of 3% in terms of delay while maintaining an average of 4:7% less MST cost. <p> This is the same delay evaluation (with the same interconnect parasitics) used in <ref> [RE95] </ref>, except that we apply factors of 1/2 in the Elmore delay expressions that were not applied in [RE95]. We see that timing-driven QUAD ("Timing-QUAD") outperforms SPEED by an average of 3% in terms of delay while maintaining an average of 4:7% less MST cost.
Reference: [San89] <author> L. A. Sanchis. </author> <title> "Multiple-Way Network Partitioning." </title> <journal> IEEE Transactions on Computers, </journal> <volume> 38(1) </volume> <pages> 62-81, </pages> <year> 1989. </year>
Reference-contexts: The hypergraph is partitioned among the upper-right, upper-left, lower-right and lower-left quadrants of the layout. Minimize P e2E cost (e), where cost (e) is the MST routing cost based on the cell distribution of a net e. As noted above, Sanchis <ref> [San89] </ref> developed a multi-way gain computation with lookahead for net-cut cost; she also developed gain computation schemes for absorption cost and quadratic cost in [San93]. Here, we propose to use the net vector concept to unify the gain computation for various objectives.
Reference: [San93] <author> L. A. Sanchis. </author> <title> "Multiple-Way Network Partitioning with Different Cost Functions." </title> <journal> IEEE Transactions on Computers, </journal> <volume> 42(22) </volume> <pages> 1500-1504, </pages> <year> 1993. </year>
Reference-contexts: As noted above, Sanchis [San89] developed a multi-way gain computation with lookahead for net-cut cost; she also developed gain computation schemes for absorption cost and quadratic cost in <ref> [San93] </ref>. Here, we propose to use the net vector concept to unify the gain computation for various objectives. Examples of net vectors with different values corresponding to different objectives are shown in Table 1 for 4-way partitioning.
Reference: [SDJ91] <author> G. Sigl, K. Doll, and F. M. Johannes. </author> <title> "Analytical Placement: A Linear or a Quadratic Objective Function?" In Proceedings of the ACM/IEEE Design Automation Conference, </title> <journal> pp. </journal> <pages> 427-432, </pages> <year> 1991. </year>
Reference-contexts: All test cases were placed with 100% area utilization. The results are shown in Table 3. QUAD w/o CO averages 10% greater wirelength but can require as little as 17% of the runtime of QUAD for large benchmarks. Our second experiment compares our quadrisection results with GORDIAN-L <ref> [SDJ91] </ref> and the post-processing detailed placer DOMINO [DJA94] on 18 benchmarks with 100% area utilization (results for GORDIAN-L/DOMINO were provided by Guenter Stenz [Ste97] at TU Munich). Note that GORDIAN-L is a global quadratic placement tool, while DOMINO is a detailed placer; QUAD should be considered as a global placer.
Reference: [SK87a] <author> P. R. Suaris and G. Kedem. "Quadrisection: </author> <title> A New Approach to Standard Cell Layout." </title> <booktitle> In Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pp. 474-477, </pages> <year> 1987. </year>
Reference-contexts: The placement problem is essentially two-dimensional, in that we assign cells to locations in a planar layout. However, min-cut bisection adopts a one-dimensional approach, partitioning the netlist along a single cut line at each step. Suaris and Kedem [SK87b] <ref> [SK87a] </ref> [SK88] [SK89] use quadrisection to divide the chip, yielding a truly two-dimensional placement procedure and results that are superior to those of top-down bipartitioning placement. Their quadrisection algorithm uses an extension of the FM heuristic which also runs in linear time per pass.
Reference: [SK87b] <author> P. R. Suaris and G. Kedem. </author> <title> "Standard Cell Placement by Quadrisection." </title> <booktitle> In Proceedings IEEE Intl. Conf. Computer Design, </booktitle> <pages> pp. 612-615, </pages> <year> 1987. </year>
Reference-contexts: The placement problem is essentially two-dimensional, in that we assign cells to locations in a planar layout. However, min-cut bisection adopts a one-dimensional approach, partitioning the netlist along a single cut line at each step. Suaris and Kedem <ref> [SK87b] </ref> [SK87a] [SK88] [SK89] use quadrisection to divide the chip, yielding a truly two-dimensional placement procedure and results that are superior to those of top-down bipartitioning placement. Their quadrisection algorithm uses an extension of the FM heuristic which also runs in linear time per pass.
Reference: [SK88] <author> P. R. Suaris and G. Kedem. </author> <title> "An Algorithm for Quadrisection and Its Application to Standard Cell Placement." </title> <journal> IEEE Transactions on Circuits and Systems, </journal> <volume> 35(3) </volume> <pages> 294-303, </pages> <year> 1988. </year>
Reference-contexts: The placement problem is essentially two-dimensional, in that we assign cells to locations in a planar layout. However, min-cut bisection adopts a one-dimensional approach, partitioning the netlist along a single cut line at each step. Suaris and Kedem [SK87b] [SK87a] <ref> [SK88] </ref> [SK89] use quadrisection to divide the chip, yielding a truly two-dimensional placement procedure and results that are superior to those of top-down bipartitioning placement. Their quadrisection algorithm uses an extension of the FM heuristic which also runs in linear time per pass.
Reference: [SK89] <author> P. R. Suaris and G. Kedem. </author> <title> "A Quadrisection-based Combined Place and Route Scheme for Standard Cells." </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 8(3) </volume> <pages> 234-244, </pages> <year> 1989. </year>
Reference-contexts: The placement problem is essentially two-dimensional, in that we assign cells to locations in a planar layout. However, min-cut bisection adopts a one-dimensional approach, partitioning the netlist along a single cut line at each step. Suaris and Kedem [SK87b] [SK87a] [SK88] <ref> [SK89] </ref> use quadrisection to divide the chip, yielding a truly two-dimensional placement procedure and results that are superior to those of top-down bipartitioning placement. Their quadrisection algorithm uses an extension of the FM heuristic which also runs in linear time per pass.
Reference: [SM91] <author> K. Shahookar and P. Mazumder. </author> <title> "VLSI Cell Placement Techniques." </title> <journal> Computing Surveys, </journal> <volume> 23(2) </volume> <pages> 143-220, </pages> <year> 1991. </year>
Reference-contexts: For overviews of (standard-cell) placement, see, e.g., Lengauer [Len90] or Shahookar and Mazumder <ref> [SM91] </ref>. A VLSI circuit netlist consists of a set of modules (cells) connected by signal nets.
Reference: [SS93] <author> W-J. Sun and C. Sechen. </author> <title> "Efficient and Effective Placements for Very Large Circuits." </title> <booktitle> In Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pp. 170-177, </pages> <year> 1993. </year>
Reference-contexts: In this section, we first review the traditional (KL-FM) iterative partitioning approach, along with its gain update scheme. We then review several partitioning-based placement techniques in the literature, centering on the issue of terminal propagation. We will omit discussion of local-improvement techniques (e.g, simulated annealing <ref> [SS93] </ref> [SS95] and DOMINO [DJS94]). 2.1. Gain Update in Iterative Partitioning Iterative improvement heuristics for netlist partitioning typically start with an initial solution and make a series of passes. Each pass iteratively determines the move of one or more cells which achieves the best possible gain in the partitioning objective. <p> The numbers in parentheses are the configura tion ids. * Net-cut Cost: Minimize P e2E cost (e), where cost (e) = 1 if net e distributes cells in more than one partition; cost (e) = 0 otherwise. * Absorption Cost <ref> [SS93] </ref>: Minimize P e2E cost (e), where cost (e) = k 1, if net e distributes cells in ex actly k partitions. * Quadratic Cost: Minimize P e2E cost (e), where cost (e) = k (k1) 2 , if net e distributes cells in exactly k partitions. * Sum-of-degrees Cost: Minimize
Reference: [SS95] <author> W. Swartz and C. Sechen. </author> <title> "Timing Driven Placement for Large Standard Cell Circuits." </title> <booktitle> In Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 211-215, </pages> <year> 1995. </year>
Reference-contexts: In this section, we first review the traditional (KL-FM) iterative partitioning approach, along with its gain update scheme. We then review several partitioning-based placement techniques in the literature, centering on the issue of terminal propagation. We will omit discussion of local-improvement techniques (e.g, simulated annealing [SS93] <ref> [SS95] </ref> and DOMINO [DJS94]). 2.1. Gain Update in Iterative Partitioning Iterative improvement heuristics for netlist partitioning typically start with an initial solution and make a series of passes. Each pass iteratively determines the move of one or more cells which achieves the best possible gain in the partitioning objective.
Reference: [Ste97] <author> G. Stenz. </author> <year> 1997. </year> <type> Personal communication. </type>
Reference-contexts: Our second experiment compares our quadrisection results with GORDIAN-L [SDJ91] and the post-processing detailed placer DOMINO [DJA94] on 18 benchmarks with 100% area utilization (results for GORDIAN-L/DOMINO were provided by Guenter Stenz <ref> [Ste97] </ref> at TU Munich). Note that GORDIAN-L is a global quadratic placement tool, while DOMINO is a detailed placer; QUAD should be considered as a global placer. The MST wirelength results are shown in Table 4. QUAD outperforms GORDIAN-L on 15 benchmarks, and performs about 1% worse on three benchmarks.
Reference: [Swa96] <author> W. Swartz, </author> <year> 1996. </year> <type> Personal communication. </type>
Reference-contexts: We see that timing-driven QUAD ("Timing-QUAD") outperforms SPEED by an average of 3% in terms of delay while maintaining an average of 4:7% less MST cost. We have also compared Timing-QUAD with the Tim-berWolf simulated annealing based timing-driven placement package (results obtained from Swartz <ref> [Swa96] </ref>) on the three test cases fract, struct and avq small using the same technology parameters as in the previous experiment. For each test case, TimberWolf uses different IO locations, number of rows and row locations. Thus, comparisons with Tim-berWolf involve completely different QUAD results from those of Table 6.
Reference: [TK91] <author> R.-S. Tsay and E. S. Kuh. </author> <title> "A Unified Approach to Partitioning and Placement." </title> <journal> IEEE Transactions on Circuits and Systems, </journal> <volume> 38(5) </volume> <pages> 521-533, </pages> <year> 1991. </year>
Reference-contexts: id 0 ] V e [conf id 2 ]) 26. b ! gain [to] + = gain; 27. endfor 28. endfor 29. for j = 0 to k 1 do 30. c j (e) = af terSize [j] 31.endfor the fixed IO pads. (Quadratic placement approaches such as PROUD [TKH88] <ref> [TK91] </ref> and GORDIAN [KSJ91] will degrade when there are no fixed pads to anchor the placement and spread out the locations of the core cells.) Second, our placer does not require terminal propagation, but still considers the exact connectivity from external blocks, as well as its exact impact on placement objectives <p> EXPERIMENTAL RESULTS Our experiments were run on a Sun Ultra 1 (140 Mhz) with 192 MB RAM, and all runtimes reported (mm:ss) are for this machine. Our versions of the test cases were imported in PROUD <ref> [TK91] </ref> or timingPROUD format generated by colleagues at TU Munich (&lt;http://www.regent.e-technik.tu-muenchen.de/&gt;), and have up to 25; 000 cells. iterations of the second level of quadrisection. pins in the current partition. are partitioned in the second level of quadri section.
Reference: [TKH88] <author> R.-S. Tsay, E. S. Kuh, and C.-P. Hsu. </author> <month> "PROUD: </month>
Reference-contexts: [conf id 0 ] V e [conf id 2 ]) 26. b ! gain [to] + = gain; 27. endfor 28. endfor 29. for j = 0 to k 1 do 30. c j (e) = af terSize [j] 31.endfor the fixed IO pads. (Quadratic placement approaches such as PROUD <ref> [TKH88] </ref> [TK91] and GORDIAN [KSJ91] will degrade when there are no fixed pads to anchor the placement and spread out the locations of the core cells.) Second, our placer does not require terminal propagation, but still considers the exact connectivity from external blocks, as well as its exact impact on placement
References-found: 31

