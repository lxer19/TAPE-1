URL: http://www.cs.man.ac.uk/~tessaris/DL/docs/TechRep/DFKI/RR-93-10.ps.gz
Refering-URL: http://www.cs.man.ac.uk/~tessaris/DL/papers.html
Root-URL: http://www.cs.man.ac.uk
Email: e-mail: buchheit@dfki.uni-sb.de  e-mail: fdonini,aschaerfg@assi.ing.uniroma1.it  
Title: Decidable Reasoning in Terminological Knowledge Representation Systems  
Author: Martin Buchheit Francesco M. Donini, Andrea Schaerf 
Note: The research was partly done while the first author was visiting the  
Address: Stuhlsatzenhausweg 3, D-6600 Saarbrucken, Germany  "la Sapienza", Via Salaria 113, I-00198 Roma, Italy  
Affiliation: German Research Center for Artificial Intelligence (DFKI)  Dipartimento di Informatica e Sistemistica Universita di Roma  Dipartimento di Informatica e Sistemistica, Universita di Roma "La Sapienza".  
Abstract: Terminological Knowledge Representation Systems (TKRS) are tools for designing and using knowledge bases that make use of terminological languages (or concept languages). We analyze from a theoretical point of view a TKRS whose capabilities go beyond the ones of presently available TKRS. The new features studied, all of practical interest, can be summarized in three main points. First, we consider a highly expressive terminological language, called ALCN R, including general complements of concepts, number restrictions and role conjunction. Second, we allow to express inclusion statements between general concepts, and terminological cycles as a particular case. Third, we prove the decidability of a number of desirable TKRS-deduction services (like satisfiability-, subsumption- and instance checking) through a sound, complete and terminating calculus for reasoning in ALCN R-knowledge bases. Our calculus extends the general technique of constraint systems and can be easily turned into a procedure using exponential space. As a byproduct of the proof, we get also the result that inclusion statements in ALCN R can be simulated by terminological cycles, if descriptive semantics is adopted. 
Abstract-found: 1
Intro-found: 1
Reference: [Abr74] <author> J.R. </author> <title> Abrial. Data semantics. </title> <editor> In J.W. Klimbie and K.L. Kof-feman, editors, </editor> <booktitle> Data Base Management, </booktitle> <pages> pages 1-59. </pages> <publisher> North-Holland, </publisher> <year> 1974. </year>
Reference-contexts: This characteristic, which the mentioned proposals inherit from the seminal TKRS kl-one [BS85], is shared also by several proposals of Database models such as Abrial's <ref> [Abr74] </ref>, candide [BGN89], and taxis [MBW80]. Retrieving information in actual Knowledge Bases (KBs) built up using one of these systems is a deductive process involving both the schema (TBox) and its instantiation (ABox).
Reference: [Baa90a] <author> Franz Baader. </author> <title> Augmenting concept languages by transitive closure of roles: An alternative to terminological cycles. </title> <type> Technical Report RR-90-13, </type> <institution> Deutsches Forschungszentrum fur Kunstliche Intelligenz, </institution> <address> Postfach 2080, D-6750 Kaiserslautern, Germany, </address> <year> 1990. </year>
Reference-contexts: In [DLNS92] the complexity of instance checking has been analyzed, but only KBs without a TBox are treated. Instance checking has also been analyzed in [Vil91], but addressing only that part of the problem which can be performed as parsing. Previous theoretical work on cycles was done in <ref> [Baa90b, Baa90a, BBH + 90, Neb90a, Neb91, Sch91] </ref>, but considering KBs formed by the TBox alone. <p> In particular, we first consider previously proposed reasoning techniques that deal with inclusions and terminological cycles, then we discuss the relation between inclusions and terminological cycles. 24 5.1 Reasoning Techniques As mentioned in the introduction, there is work done by Baader et. al. [BBH + 90], Baader <ref> [Baa90b, Baa90a] </ref>, Nebel [Neb90b, Neb91] and Schild [Sch91]. In [Neb90b] the language T F , containing concept conjunction, universal quantification and number restrictions, and TBoxes containing (possibly cyclic) concept definitions, role definitions and disjointness axioms (stating that two primitive concepts are disjoint) are considered. <p> This problem, called the universal satisfiability problem, is shown to be equivalent to checking the satisfiability of an ALC-TBox (see Proposition 5.1 in the sequel). In <ref> [Baa90a] </ref>, an extension of ALC, called ALC reg , is introduced, which supports a constructor to express the transitive closure of roles. By means of transitive closure of roles it is possible to replace cyclic definitions of the form A v D with equivalent acyclic ones. <p> Since the problem of concept satisfiability w.r.t. a TBox is trivially harder than checking the satisfiability of a TBox, this paper extends the result given in [BBH + 90]. The technique exploited in [BBH + 90] and <ref> [Baa90a] </ref> is based on the notion 25 of concept tree. A concept tree is generated starting from a concept C in order to check its satisfiability (or universal satisfiability). <p> In [Sch91] some results more general than those in <ref> [Baa90a] </ref> are obtained by considering languages more expressive than ALC reg and dealing with the concept satisfiability problem in such languages. The results in [Sch91] are obtained by establishing a correspondence between concept languages and Propositional Dynamic Logics (PDL), and reducing the given problem to a satisfiability problem in PDL. <p> in [Hol90], [BH91] and [DLNS92]. 5.2 Inclusions versus Concept Definitions Now we compare the expressive power of TBoxes defined as a set of inclusions (as done in this paper) and TBoxes defined as a set of (possibly cyclic) concept definitions of the form A _ D and A : Unlike <ref> [Baa90a] </ref> and [Sch91], we consider reasoning problems dealing with TBox and ABox together. Moreover, we use the descriptive semantics for the concept definitions, as we do for the inclusions. The result we have obtained is that inclusion statements and concept definitions actually have the same expressive power. <p> As pointed out in <ref> [Baa90a] </ref> for ALC, an interpretation satisfies a TBox T iff it satisfies the equation C T = &gt;. This result easily extends to ALCN R, as stated in the following proposition. <p> In fact, realizing that the inclusions A v 8P 1 .A; . . . ; A v 8P n .A simulate a transitive closure on the roles P 1 ; . . . ; P n , one can recognize similarities with the proofs given by Schild [Sch91] and Baader <ref> [Baa90a] </ref>. The difference is that their proofs rely on the notion of connected model (Baader uses the equivalent notion of rooted model). In contrast, the models we obtain are not connected, when the individuals in the knowledge base are not.
Reference: [Baa90b] <author> Franz Baader. </author> <title> Terminological cycles in KL-ONE-based KR-languages. </title> <type> Technical Report RR-90-01, </type> <institution> Deutsches Forschungszentrum fur Kunstliche Intelligenz, </institution> <address> Postfach 2080, D-6750 Kaiserslautern, Germany, </address> <year> 1990. </year>
Reference-contexts: In [DLNS92] the complexity of instance checking has been analyzed, but only KBs without a TBox are treated. Instance checking has also been analyzed in [Vil91], but addressing only that part of the problem which can be performed as parsing. Previous theoretical work on cycles was done in <ref> [Baa90b, Baa90a, BBH + 90, Neb90a, Neb91, Sch91] </ref>, but considering KBs formed by the TBox alone. <p> In particular, we first consider previously proposed reasoning techniques that deal with inclusions and terminological cycles, then we discuss the relation between inclusions and terminological cycles. 24 5.1 Reasoning Techniques As mentioned in the introduction, there is work done by Baader et. al. [BBH + 90], Baader <ref> [Baa90b, Baa90a] </ref>, Nebel [Neb90b, Neb91] and Schild [Sch91]. In [Neb90b] the language T F , containing concept conjunction, universal quantification and number restrictions, and TBoxes containing (possibly cyclic) concept definitions, role definitions and disjointness axioms (stating that two primitive concepts are disjoint) are considered. <p> Nebel shows that subsumption of T F -concepts w.r.t. TBoxes is decidable. However, the argument he uses is not constructive. He shows that it is sufficient to consider finite interpretations of a size bounded by the size of the TBox in order to decide subsumption. In <ref> [Baa90b] </ref> the effect of the three types of semantics|descriptive, greatest fixed-point and least-fixed-point semantics|for the language F L 0 , containing concept conjunction and universal quantification, is described with the help of finite automata. Baader reduces subsumption of F L 0 -concepts w.r.t. <p> TBoxes containing (possibly cyclic) equivalences of the form A : (which he calls terminological axioms) to decision problems for finite automata. In particular, he shows that subsumption w.r.t. descriptive semantics can be decided in polynomial space using Buchi automata. Using results from <ref> [Baa90b] </ref>, in [Neb91] a characterization of the above subsumption problem w.r.t. descriptive semantics is given with the help of deterministic automata (whereas Buchi automata are nondeterministic). This also yields a PSPACE-algorithm for deciding subsumption. In [BBH + 90] the attention is restricted to the language ALC.
Reference: [BBH + 90] <author> Franz Baader, Hans-Jurgen Burckert, Bernhard Hollunder, Werner Nutt, and Jorg H. Siekmann. </author> <title> Concept logics. </title> <editor> In John W. Lloyd, editor, </editor> <booktitle> Computational Logics, Symposium Proceedings, </booktitle> <pages> pages 177-201. </pages> <publisher> Springer Verlag, </publisher> <year> 1990. </year> <month> 30 </month>
Reference-contexts: In [DLNS92] the complexity of instance checking has been analyzed, but only KBs without a TBox are treated. Instance checking has also been analyzed in [Vil91], but addressing only that part of the problem which can be performed as parsing. Previous theoretical work on cycles was done in <ref> [Baa90b, Baa90a, BBH + 90, Neb90a, Neb91, Sch91] </ref>, but considering KBs formed by the TBox alone. <p> In particular, we first consider previously proposed reasoning techniques that deal with inclusions and terminological cycles, then we discuss the relation between inclusions and terminological cycles. 24 5.1 Reasoning Techniques As mentioned in the introduction, there is work done by Baader et. al. <ref> [BBH + 90] </ref>, Baader [Baa90b, Baa90a], Nebel [Neb90b, Neb91] and Schild [Sch91]. In [Neb90b] the language T F , containing concept conjunction, universal quantification and number restrictions, and TBoxes containing (possibly cyclic) concept definitions, role definitions and disjointness axioms (stating that two primitive concepts are disjoint) are considered. <p> Using results from [Baa90b], in [Neb91] a characterization of the above subsumption problem w.r.t. descriptive semantics is given with the help of deterministic automata (whereas Buchi automata are nondeterministic). This also yields a PSPACE-algorithm for deciding subsumption. In <ref> [BBH + 90] </ref> the attention is restricted to the language ALC. In particular, that paper considers the problem of checking the satisfiability of a single equation of the form C = &gt;, where C is an ALC-concept. <p> Since the problem of concept satisfiability w.r.t. a TBox is trivially harder than checking the satisfiability of a TBox, this paper extends the result given in <ref> [BBH + 90] </ref>. The technique exploited in [BBH + 90] and [Baa90a] is based on the notion 25 of concept tree. A concept tree is generated starting from a concept C in order to check its satisfiability (or universal satisfiability). <p> Since the problem of concept satisfiability w.r.t. a TBox is trivially harder than checking the satisfiability of a TBox, this paper extends the result given in <ref> [BBH + 90] </ref>. The technique exploited in [BBH + 90] and [Baa90a] is based on the notion 25 of concept tree. A concept tree is generated starting from a concept C in order to check its satisfiability (or universal satisfiability).
Reference: [BBMAR89] <author> Alexander Borgida, Ronald J. Brachman, Deborah L. McGuin--ness, and Lori Alperin Resnick. </author> <title> CLASSIC: A structural data model for objects. </title> <booktitle> In ACM SIGMOD, </booktitle> <year> 1989. </year>
Reference-contexts: 1 Introduction A general characteristic of many proposed Terminological Knowledge Representation Systems (TKRSs) such as kripton [BPL85], nikl [KBR86], back [QK90], loom [MB87], classic <ref> [BBMAR89] </ref>, KRIS [BH91], and others (see [Ric91, WS92]), is that they are made up of two different components.
Reference: [BGN89] <author> H.W. Beck, S.K. Gala, and S.B. Navathe. </author> <title> Classification as a query processing technique in the CANDIDE semantic data model. </title> <booktitle> In Fifth IEEE International Conference on Data Engineering, </booktitle> <address> Los Angeles, </address> <year> 1989. </year>
Reference-contexts: This characteristic, which the mentioned proposals inherit from the seminal TKRS kl-one [BS85], is shared also by several proposals of Database models such as Abrial's [Abr74], candide <ref> [BGN89] </ref>, and taxis [MBW80]. Retrieving information in actual Knowledge Bases (KBs) built up using one of these systems is a deductive process involving both the schema (TBox) and its instantiation (ABox).
Reference: [BH91] <author> Franz Baader and Bernhard Hollunder. </author> <title> A terminological knowledge representation system with complete inference algorithm. </title> <booktitle> In Proc. of the Workshop on Processing Declarative Knowledge, PDK-91, Lecture Notes in Artificial Intelligence. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1991. </year>
Reference-contexts: 1 Introduction A general characteristic of many proposed Terminological Knowledge Representation Systems (TKRSs) such as kripton [BPL85], nikl [KBR86], back [QK90], loom [MB87], classic [BBMAR89], KRIS <ref> [BH91] </ref>, and others (see [Ric91, WS92]), is that they are made up of two different components. <p> On the other hand, the constraint system technique, even though it was conceived for TBox-reasoning, can be easily extended to ABox-reasoning, as also shown in [Hol90], <ref> [BH91] </ref> and [DLNS92]. 5.2 Inclusions versus Concept Definitions Now we compare the expressive power of TBoxes defined as a set of inclusions (as done in this paper) and TBoxes defined as a set of (possibly cyclic) concept definitions of the form A _ D and A : Unlike [Baa90a] and [Sch91],
Reference: [BHN + 92] <author> Franz Baader, Bernhard Hollunder, Bernhard Nebel, Hans-Jurgen Profitlich, and Enrico Franconi. </author> <title> An empirical analysis of optimization techniques for terminological representation systems, or making KRIS get a move on. </title> <booktitle> In Proc. of the 3rd Int. Conf. on Principles of Knowledge Representation and Reasoning KR-92. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: First of all, a complete procedure working in exponential space can be easily devised from the calculus provided in Section 4. From this procedure, one can build more efficient (but still complete) ones by applying standard optimization techniques such as those described in <ref> [BHN + 92] </ref>. Such procedure might work well in practical cases, despite their worst case intractability. Secondly, a complete procedure (possibly optimized) offers a benchmark for comparing incomplete procedures, not only in terms of performance, but also in terms of missed inferences.
Reference: [BL84] <author> Ronald J. Brachman and Hector J. Levesque. </author> <title> The tractability of subsumption in frame-based description languages. </title> <booktitle> In Proc. of the 4th Nat. Conf. on Artificial Intelligence AAAI-84, </booktitle> <year> 1984. </year>
Reference-contexts: Recent research on the computational complexity of subsumption had an influence in many TKRSs on the choice for incomplete procedures. The research started with <ref> [BL84] </ref>, which analyzed complexity of subsumption between pure concept expressions, abstracting from KBs (we call this problem in the sequel as pure subsumption). The motivation for focusing on such a small problem was that pure subsumption is a fundamental inference in any TKRS.
Reference: [BPL85] <author> Ronald J. Brachman, Victoria Pigman Gilbert, and Hector J. Levesque. </author> <title> An essential hybrid reasoning system: Knowledge and symbol level accounts in KRYPTON. </title> <booktitle> In Proc. of the Int. Joint Conf. on Artificial Intelligence, </booktitle> <pages> pages 532-539, </pages> <address> Los An-geles, </address> <institution> Cal., </institution> <year> 1985. </year>
Reference-contexts: 1 Introduction A general characteristic of many proposed Terminological Knowledge Representation Systems (TKRSs) such as kripton <ref> [BPL85] </ref>, nikl [KBR86], back [QK90], loom [MB87], classic [BBMAR89], KRIS [BH91], and others (see [Ric91, WS92]), is that they are made up of two different components.
Reference: [BS85] <author> Ronald J. Brachman and James G. Schmolze. </author> <title> An overview of the KL-ONE knowledge representation system. </title> <journal> Cognitive Science, </journal> <volume> 9(2) </volume> <pages> 171-216, </pages> <year> 1985. </year>
Reference-contexts: This characteristic, which the mentioned proposals inherit from the seminal TKRS kl-one <ref> [BS85] </ref>, is shared also by several proposals of Database models such as Abrial's [Abr74], candide [BGN89], and taxis [MBW80]. Retrieving information in actual Knowledge Bases (KBs) built up using one of these systems is a deductive process involving both the schema (TBox) and its instantiation (ABox).
Reference: [DHL + 92] <author> Francesco M. Donini, Bernhard Hollunder, Maurizio Lenzerini, Alberto Marchetti Spaccamela, Daniele Nardi, and Werner Nutt. </author> <title> The complexity of existential quantification in concept languages. </title> <journal> Artificial Intelligence, </journal> <volume> 53(2-3):309-328, </volume> <year> 1992. </year>
Reference-contexts: It turned out that pure subsumption is tractable (i.e. worst-case polynomial-time solvable) for simple languages, and intractable (e.g. NP-hard, coNP-hard or PSPACE-hard) for slight extensions of such languages, as subsequent research definitely confirmed <ref> [Neb88, DLNN91a, DLNN91b, SSS91, DHL + 92] </ref>. Also, beyond computational complexity, pure subsump-tion was proved undecidable in the two TKRS kl-one [SS89] and nikl [Pat89].
Reference: [DLNN91a] <author> Francesco M. Donini, Maurizio Lenzerini, Daniele Nardi, and Werner Nutt. </author> <title> The complexity of concept languages. </title> <editor> In James Allen, Richard Fikes, and Erik Sandewall, editors, </editor> <booktitle> Proc. of the 31 2nd Int. Conf. on Principles of Knowledge Representation and Reasoning KR-91, </booktitle> <pages> pages 151-162. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference-contexts: It turned out that pure subsumption is tractable (i.e. worst-case polynomial-time solvable) for simple languages, and intractable (e.g. NP-hard, coNP-hard or PSPACE-hard) for slight extensions of such languages, as subsequent research definitely confirmed <ref> [Neb88, DLNN91a, DLNN91b, SSS91, DHL + 92] </ref>. Also, beyond computational complexity, pure subsump-tion was proved undecidable in the two TKRS kl-one [SS89] and nikl [Pat89]. <p> Moreover, the system allows one to express inclusion statements between general concepts and, as a particular case, terminological cycles. We prove decidability by means of a suitable calculus, which is developed extending the quite well established framework of constraint systems (see <ref> [DLNN91a, SSS91] </ref>), thus exploiting a uniform approach to reasoning in TKRSs. Moreover, our calculus can easily be turned into a decision procedure. The paper is organized as follows. In Section 2 we introduce the language, and we give it a Tarski-style extensional semantics, which is the most commonly used. <p> Then, in Subsection 3.2, we prove the termination of the calculus. This will be sufficient to assess the decidability of all problems 1-4, thanks to the relationships between the four problems. 3.1 The calculus and its correctness Our method makes use of the notion of constraint system <ref> [DLNN91a, SSS91, DLNS91] </ref>, and is based on a tableau-like calculus [Fit90] that tries to build a model for the logical formula corresponding to a KB. Consider an alphabet of variable symbols V (disjoint from the other alphabets defined so far). <p> Concepts are assumed to be simple, i.e. the only complements they contain are of the form :A, where A is a primitive concept. Arbitrary ALCN R-concepts can be rewritten into equivalent simple concepts in linear time <ref> [DLNN91a] </ref>. A constraint system is a finite nonempty set of constraints. <p> Trace rules have been defined in <ref> [DLNN91a] </ref> for deciding satisfiability and pure subsumption between ALCN R-concepts. Algorithms that generate all complete constraint systems derivable from a constraint system while keeping only one trace in memory at a time have been given (for sublanguages of ALCN R) in [SSS91, HN90, HNSS90].
Reference: [DLNN91b] <author> Francesco M. Donini, Maurizio Lenzerini, Daniele Nardi, and Werner Nutt. </author> <title> Tractable concept languages. </title> <booktitle> In Proc. of the 12th Int. Joint Conf. on Artificial Intelligence IJCAI-91, </booktitle> <address> Sydney, </address> <year> 1991. </year>
Reference-contexts: It turned out that pure subsumption is tractable (i.e. worst-case polynomial-time solvable) for simple languages, and intractable (e.g. NP-hard, coNP-hard or PSPACE-hard) for slight extensions of such languages, as subsequent research definitely confirmed <ref> [Neb88, DLNN91a, DLNN91b, SSS91, DHL + 92] </ref>. Also, beyond computational complexity, pure subsump-tion was proved undecidable in the two TKRS kl-one [SS89] and nikl [Pat89].
Reference: [DLNS91] <author> Francesco M. Donini, Maurizio Lenzerini, Daniele Nardi, and Andrea Schaerf. </author> <title> A hybrid system integrating datalog and concept languages. </title> <booktitle> In Proc. of the 2nd Italian Conf. on Artificial Intelligence, number 549 in Lecture Notes in Artificial Intelligence. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1991. </year> <note> An extended version appeared also in the Working Notes of the AAAI Fall Symposium "Principles of Hybrid Reasoning", </note> <year> 1991. </year>
Reference-contexts: Then, in Subsection 3.2, we prove the termination of the calculus. This will be sufficient to assess the decidability of all problems 1-4, thanks to the relationships between the four problems. 3.1 The calculus and its correctness Our method makes use of the notion of constraint system <ref> [DLNN91a, SSS91, DLNS91] </ref>, and is based on a tableau-like calculus [Fit90] that tries to build a model for the logical formula corresponding to a KB. Consider an alphabet of variable symbols V (disjoint from the other alphabets defined so far).
Reference: [DLNS92] <author> Francesco M. Donini, Maurizio Lenzerini, Daniele Nardi, and Andrea Schaerf. </author> <title> From subsumption to instance checking. </title> <type> Technical Report 15.92, </type> <institution> Dipartimento di Informatica e Sistemistica, Universita di Roma "La Sapienza", </institution> <year> 1992. </year>
Reference-contexts: Previous theoretical results do not deal with the problems 1-4 in their full generality. For example, the problems are studied in [Neb90a, Chapter 4], but only incomplete procedures are given, and cycles are not considered. In <ref> [DLNS92] </ref> the complexity of instance checking has been analyzed, but only KBs without a TBox are treated. Instance checking has also been analyzed in [Vil91], but addressing only that part of the problem which can be performed as parsing. <p> On the other hand, the constraint system technique, even though it was conceived for TBox-reasoning, can be easily extended to ABox-reasoning, as also shown in [Hol90], [BH91] and <ref> [DLNS92] </ref>. 5.2 Inclusions versus Concept Definitions Now we compare the expressive power of TBoxes defined as a set of inclusions (as done in this paper) and TBoxes defined as a set of (possibly cyclic) concept definitions of the form A _ D and A : Unlike [Baa90a] and [Sch91], we consider
Reference: [Fit90] <author> Melvin Fitting. </author> <title> First-Order Logic and Automated Theorem Proving. </title> <publisher> Springer Verlag, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: This will be sufficient to assess the decidability of all problems 1-4, thanks to the relationships between the four problems. 3.1 The calculus and its correctness Our method makes use of the notion of constraint system [DLNN91a, SSS91, DLNS91], and is based on a tableau-like calculus <ref> [Fit90] </ref> that tries to build a model for the logical formula corresponding to a KB. Consider an alphabet of variable symbols V (disjoint from the other alphabets defined so far). The elements of V are denoted by the letters x; y; z; w.
Reference: [Har84] <author> David Harel. </author> <title> Dynamic logic. </title> <booktitle> In Handbook of Philosophical Logic, </booktitle> <volume> volume 2, </volume> <pages> pages 497-640. </pages> <address> D. </address> <publisher> Reidel, Dordrecht, Holland, </publisher> <year> 1984. </year>
Reference-contexts: This property has been extensively studied in modal logics [HC84] and dynamic logics <ref> [Har84] </ref>. In particular a technique, called filtration, has been developed both to prove the finite model property and to build a finite model for a satisfiable formula.
Reference: [HC84] <author> George E. Hughes and M. J. Cresswell. </author> <title> A Companion to Modal Logic. </title> <publisher> Methuen, </publisher> <address> London, </address> <year> 1984. </year>
Reference-contexts: Notice that, since the domain of the canonical interpretation I S is always finite, we have also implicitly proved that ALCN R-knowledge bases have the finite model property, i.e. any satisfiable knowledge base has a finite model. This property has been extensively studied in modal logics <ref> [HC84] </ref> and dynamic logics [Har84]. In particular a technique, called filtration, has been developed both to prove the finite model property and to build a finite model for a satisfiable formula.
Reference: [HKNP92] <author> Jochen Heinson, Daniel Kudenko, Bernhard Nebel, and Hans-Jurgen Profitlich. </author> <title> An empirical analysis of terminological representation systems. </title> <booktitle> In Proc. of the 10th Nat. Conf. on Artificial Intelligence AAAI-92, </booktitle> <pages> pages 767-773. </pages> <publisher> AAAI Press/The MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: Once completeness is abandoned for this basic subproblem, completeness of overall reasoning procedures is not an issue anymore; but other issues arise, such as how to compare incomplete procedures <ref> [HKNP92] </ref>, and how to judge a procedure "complete enough" [Mac91].
Reference: [HN90] <author> Bernhard Hollunder and Werner Nutt. </author> <title> Subsumption Algorithms for Concept Languages. </title> <type> Technical Report RR-90-04, </type> <institution> Deutsches Forschungszentrum fur Kunstliche Intelligenz, </institution> <address> Post-fach 2080, D-6750 Kaiserslautern, Germany, </address> <year> 1990. </year> <month> 32 </month>
Reference-contexts: Trace rules have been defined in [DLNN91a] for deciding satisfiability and pure subsumption between ALCN R-concepts. Algorithms that generate all complete constraint systems derivable from a constraint system while keeping only one trace in memory at a time have been given (for sublanguages of ALCN R) in <ref> [SSS91, HN90, HNSS90] </ref>. Proposition 4.1 Let be an ALCN R-knowledge base, S its associated constraint system, and let n be the size of . Then: 1. The length of a trace rule derivation issuing from S is bounded by 2 n . 2.
Reference: [HNSS90] <author> Bernhard Hollunder, Werner Nutt, and Manfred Schmidt--Schau. </author> <title> Subsumption algorithms for concept description languages. </title> <booktitle> In Proc. of 9th the European Conf. on Artificial Intelligence ECAI-90, </booktitle> <pages> pages 348-353, </pages> <address> London, 1990. </address> <publisher> Pitman. </publisher>
Reference-contexts: Trace rules have been defined in [DLNN91a] for deciding satisfiability and pure subsumption between ALCN R-concepts. Algorithms that generate all complete constraint systems derivable from a constraint system while keeping only one trace in memory at a time have been given (for sublanguages of ALCN R) in <ref> [SSS91, HN90, HNSS90] </ref>. Proposition 4.1 Let be an ALCN R-knowledge base, S its associated constraint system, and let n be the size of . Then: 1. The length of a trace rule derivation issuing from S is bounded by 2 n . 2.
Reference: [Hol90] <author> Bernhard Hollunder. </author> <title> Hybrid inferences in KL-ONE-based knowledge representation systems. </title> <booktitle> In German Workshop on Artificial Intelligence. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1990. </year>
Reference-contexts: On the other hand, the constraint system technique, even though it was conceived for TBox-reasoning, can be easily extended to ABox-reasoning, as also shown in <ref> [Hol90] </ref>, [BH91] and [DLNS92]. 5.2 Inclusions versus Concept Definitions Now we compare the expressive power of TBoxes defined as a set of inclusions (as done in this paper) and TBoxes defined as a set of (possibly cyclic) concept definitions of the form A _ D and A : Unlike [Baa90a] and
Reference: [HU79] <author> John E. Hopcroft and Jeffrey D. Ullman. </author> <title> Introduction to Automata Theory, Languages, and Computation. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1979. </year>
Reference-contexts: Then from Savitch's theorem (see e.g. <ref> [HU79, Theorem 12.11] </ref>) it is well known that NSPACE (2 p (n) ) DSPACE (2 2p (n) ): Hence we can conclude with the main result of this section. Theorem 4.2 Satisfiability of an ALCN R-knowledge base can be decided with exponential space.
Reference: [KBR86] <author> Thomas S. Kaczmarek, Raymond Bates, and Gabriel Robins. </author> <title> Recent developments in NIKL. </title> <booktitle> In Proc. of the 5th Nat. Conf. on Artificial Intelligence AAAI-86, </booktitle> <pages> pages 978-985, </pages> <year> 1986. </year>
Reference-contexts: 1 Introduction A general characteristic of many proposed Terminological Knowledge Representation Systems (TKRSs) such as kripton [BPL85], nikl <ref> [KBR86] </ref>, back [QK90], loom [MB87], classic [BBMAR89], KRIS [BH91], and others (see [Ric91, WS92]), is that they are made up of two different components.
Reference: [Lev84] <author> Hector J. Levesque. </author> <title> A fundamental tradeoff in knowledge representation and reasoning. </title> <type> Technical Report 658, </type> <institution> Fairchild, </institution> <year> 1984. </year> <note> Also available as FLAIR Technical Report No. 35. </note>
Reference-contexts: Note that extending the language results in enhancing its expressiveness, therefore the result of this research could be summarized as: The more a TKRS language is expressive, the higher is the computational complexity of reasoning in that language|as Levesque first noted <ref> [Lev84] </ref>. This result has been interpreted in two different ways, leading to two different TKRSs design philosophies: 1. `General-purpose languages for TKRSs are intractable, or even undecidable, and tractable languages are not expressive enough to be of practical interest'.
Reference: [Mac91] <author> Robert M. MacGregor. </author> <title> Inside the LOOM description classifier. </title> <journal> SIGART Bulletin, </journal> <volume> 2(3) </volume> <pages> 88-92, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: Once completeness is abandoned for this basic subproblem, completeness of overall reasoning procedures is not an issue anymore; but other issues arise, such as how to compare incomplete procedures [HKNP92], and how to judge a procedure "complete enough" <ref> [Mac91] </ref>. As a practical tool, inference rules can be used in such systems to achieve the expected behavior of the KB w.r.t. the information contained in it. 2. `A TKRS is (by definition) general-purpose, hence it must provide tractable and complete reasoning to a user'.
Reference: [Mac92] <author> Robert MacGregor. </author> <title> What's needed to make a description logic a good KR citizen. </title> <booktitle> In Working Notes of the AAAI Fall Symposium on Issue on Description Logics: Users meet Developers, </booktitle> <pages> pages 53-55, </pages> <year> 1992. </year>
Reference-contexts: In order to improve on such an answer, a theoretical analysis of the general problems 1-4 is to be done. But most importantly, theoretical analysis is needed for making terminological cycles (see [Neb90a, Chapter 5]) fully available in TKRSs. Such a feature is of undoubtable practical interest <ref> [Mac92] </ref>, yet present TKRSs can only approximate cycles, by using forward inference rules. Previous theoretical results do not deal with the problems 1-4 in their full generality. For example, the problems are studied in [Neb90a, Chapter 4], but only incomplete procedures are given, and cycles are not considered.
Reference: [MB87] <author> Robert MacGregor and R. Bates. </author> <title> The Loom knowledge representation language. </title> <type> Technical Report ISI/RS-87-188, </type> <institution> University of Southern California, Information Science Institute, Marina del Rey, Cal., </institution> <year> 1987. </year>
Reference-contexts: 1 Introduction A general characteristic of many proposed Terminological Knowledge Representation Systems (TKRSs) such as kripton [BPL85], nikl [KBR86], back [QK90], loom <ref> [MB87] </ref>, classic [BBMAR89], KRIS [BH91], and others (see [Ric91, WS92]), is that they are made up of two different components.
Reference: [MB92] <author> Robert MacGregor and David Brill. </author> <title> Recognition algorithms for the Loom classifier. </title> <booktitle> In Proc. of the 10th Nat. Conf. on Artificial Intelligence AAAI-92, </booktitle> <pages> pages 774-779. </pages> <publisher> AAAI Press/The MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: Following this interpretation, in several TKRSs (such as nikl, loom and back) incomplete procedures for pure sub 4 sumption are considered satisfactory (e.g. see <ref> [MB92] </ref> for loom). Once completeness is abandoned for this basic subproblem, completeness of overall reasoning procedures is not an issue anymore; but other issues arise, such as how to compare incomplete procedures [HKNP92], and how to judge a procedure "complete enough" [Mac91].
Reference: [MBW80] <author> J. Mylopoulos, P.A. Bernstein, and E. Wong. </author> <title> A language facility for designing database-intensive applications. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 5(2) </volume> <pages> 185-207, </pages> <month> June </month> <year> 1980. </year>
Reference-contexts: This characteristic, which the mentioned proposals inherit from the seminal TKRS kl-one [BS85], is shared also by several proposals of Database models such as Abrial's [Abr74], candide [BGN89], and taxis <ref> [MBW80] </ref>. Retrieving information in actual Knowledge Bases (KBs) built up using one of these systems is a deductive process involving both the schema (TBox) and its instantiation (ABox). In fact, the TBox is not just a set of constraints on possible ABoxes, but contains intensional information about classes.
Reference: [McA92] <author> David McAllester. </author> <type> Unpublished manuscript. </type> <year> 1992. </year> <month> 33 </month>
Reference-contexts: A lower bound of the complexity of KB-satisfiability in obtained exploiting previous results about the language ALC, which is a sublanguage of ALCN R that does not include number restrictions and role conjunction. We know from McAllester <ref> [McA92] </ref>, and (independently) from an observation of Werner Nutt [Nut92] that KB-satisfiability in ALC-knowledge bases is EXPTIME-hard (and hence it is hard for ALCN R-knowledge bases, too). Hence, we do not expect to find any algorithm solving the problem in polynomial space, unless PSPACE=EXPTIME.
Reference: [McG92] <author> Deborah L. McGuinness. </author> <title> Making description logic based knowledge representation systems more usable. </title> <booktitle> In Working Notes of the AAAI Fall Sysmposium on Issue on Description Logics: Users meet Developers, </booktitle> <pages> pages 56-58, </pages> <year> 1992. </year>
Reference-contexts: The gap between what is expressible in the TKRS language and what is needed to be expressed for the application is then filled by the user, by a (sort of) programming with inference rules. Of course, the usual problems present in program development and debugging arise <ref> [McG92] </ref>. What is common to both approaches is that a user must cope with incomplete reasoning.
Reference: [Neb88] <author> Bernhard Nebel. </author> <title> Computational complexity of terminological reasoning in BACK. </title> <journal> Artificial Intelligence, </journal> <volume> 34(3) </volume> <pages> 371-383, </pages> <year> 1988. </year>
Reference-contexts: It turned out that pure subsumption is tractable (i.e. worst-case polynomial-time solvable) for simple languages, and intractable (e.g. NP-hard, coNP-hard or PSPACE-hard) for slight extensions of such languages, as subsequent research definitely confirmed <ref> [Neb88, DLNN91a, DLNN91b, SSS91, DHL + 92] </ref>. Also, beyond computational complexity, pure subsump-tion was proved undecidable in the two TKRS kl-one [SS89] and nikl [Pat89].
Reference: [Neb90a] <author> Bernhard Nebel. </author> <title> Reasoning and Revision in Hybrid Representation Systems. </title> <booktitle> Number 422 in Lecture Notes in Artificial Intelligence. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1990. </year>
Reference-contexts: In order to improve on such an answer, a theoretical analysis of the general problems 1-4 is to be done. But most importantly, theoretical analysis is needed for making terminological cycles (see <ref> [Neb90a, Chapter 5] </ref>) fully available in TKRSs. Such a feature is of undoubtable practical interest [Mac92], yet present TKRSs can only approximate cycles, by using forward inference rules. Previous theoretical results do not deal with the problems 1-4 in their full generality. <p> Such a feature is of undoubtable practical interest [Mac92], yet present TKRSs can only approximate cycles, by using forward inference rules. Previous theoretical results do not deal with the problems 1-4 in their full generality. For example, the problems are studied in <ref> [Neb90a, Chapter 4] </ref>, but only incomplete procedures are given, and cycles are not considered. In [DLNS92] the complexity of instance checking has been analyzed, but only KBs without a TBox are treated. <p> In [DLNS92] the complexity of instance checking has been analyzed, but only KBs without a TBox are treated. Instance checking has also been analyzed in [Vil91], but addressing only that part of the problem which can be performed as parsing. Previous theoretical work on cycles was done in <ref> [Baa90b, Baa90a, BBH + 90, Neb90a, Neb91, Sch91] </ref>, but considering KBs formed by the TBox alone. <p> Previous theoretical work on cycles was done in [Baa90b, Baa90a, BBH + 90, Neb90a, Neb91, Sch91], but considering KBs formed by the TBox alone. Moreover, these approaches do not deal with number restrictions (except 5 for <ref> [Neb90a, Section 5.3.5] </ref>), which are a basic feature already provided by TKRSs, and the techniques used do not seem easily extensible to reasoning with ABoxes. We compare in detail several of these works with ours in Section 5. <p> We first turn our attention to the intensional component of a knowledge base, i.e. the TBox. As we said before, the intensional level specifies the properties of the concepts of interest in a particular application. Syntactically, such properties are expressed in terms of so-called inclusion statements (see <ref> [Neb90a, Chapter 3] </ref>). An inclusion statement (or simply inclusion) has the form C v D where C and D are two arbitrary concepts. Intuitively, the statement specifies that every instance of C is also an instance of D. <p> A TBox is a finite set of inclusions. An interpretation I is a model for a TBox T if I satisfies all inclusions in T . Many TKRSs provide the user with mechanisms for stating concept definitions (e.g. <ref> [Neb90a, Section 3.2] </ref>) of the form A : = D (interpreted as set equality), or A _ D (primitive concept definition, interpreted as set inclusion), with the restrictions that the left-hand side concept A must be a concept name 1 , that for each concept name at most one definition is
Reference: [Neb90b] <author> Bernhard Nebel. </author> <title> Terminological reasoning is inherently intractable. </title> <journal> Artificial Intelligence, </journal> <volume> 43 </volume> <pages> 235-249, </pages> <year> 1990. </year>
Reference-contexts: In particular, we first consider previously proposed reasoning techniques that deal with inclusions and terminological cycles, then we discuss the relation between inclusions and terminological cycles. 24 5.1 Reasoning Techniques As mentioned in the introduction, there is work done by Baader et. al. [BBH + 90], Baader [Baa90b, Baa90a], Nebel <ref> [Neb90b, Neb91] </ref> and Schild [Sch91]. In [Neb90b] the language T F , containing concept conjunction, universal quantification and number restrictions, and TBoxes containing (possibly cyclic) concept definitions, role definitions and disjointness axioms (stating that two primitive concepts are disjoint) are considered. Nebel shows that subsumption of T F -concepts w.r.t. <p> In <ref> [Neb90b] </ref> the language T F , containing concept conjunction, universal quantification and number restrictions, and TBoxes containing (possibly cyclic) concept definitions, role definitions and disjointness axioms (stating that two primitive concepts are disjoint) are considered. Nebel shows that subsumption of T F -concepts w.r.t. TBoxes is decidable.
Reference: [Neb91] <author> Bernhard Nebel. </author> <title> Terminological cycles: Semantics and computational properties. </title> <editor> In John F. Sowa, editor, </editor> <booktitle> Principles of Semantic Networks, </booktitle> <pages> pages 331-361. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference-contexts: In [DLNS92] the complexity of instance checking has been analyzed, but only KBs without a TBox are treated. Instance checking has also been analyzed in [Vil91], but addressing only that part of the problem which can be performed as parsing. Previous theoretical work on cycles was done in <ref> [Baa90b, Baa90a, BBH + 90, Neb90a, Neb91, Sch91] </ref>, but considering KBs formed by the TBox alone. <p> However, in our setting this distinction is not necessary, since we do not use concept definitions. 8 As shown in <ref> [Neb91] </ref>, there are at least three types of semantics for ter-minological cycles, namely the least fixed point, the greatest fixed point, and the descriptive semantics. However, fixed point semantics apply only to fixed point statements like A : = D (where D is a "function" of A, i.e. <p> In particular, we first consider previously proposed reasoning techniques that deal with inclusions and terminological cycles, then we discuss the relation between inclusions and terminological cycles. 24 5.1 Reasoning Techniques As mentioned in the introduction, there is work done by Baader et. al. [BBH + 90], Baader [Baa90b, Baa90a], Nebel <ref> [Neb90b, Neb91] </ref> and Schild [Sch91]. In [Neb90b] the language T F , containing concept conjunction, universal quantification and number restrictions, and TBoxes containing (possibly cyclic) concept definitions, role definitions and disjointness axioms (stating that two primitive concepts are disjoint) are considered. Nebel shows that subsumption of T F -concepts w.r.t. <p> TBoxes containing (possibly cyclic) equivalences of the form A : (which he calls terminological axioms) to decision problems for finite automata. In particular, he shows that subsumption w.r.t. descriptive semantics can be decided in polynomial space using Buchi automata. Using results from [Baa90b], in <ref> [Neb91] </ref> a characterization of the above subsumption problem w.r.t. descriptive semantics is given with the help of deterministic automata (whereas Buchi automata are nondeterministic). This also yields a PSPACE-algorithm for deciding subsumption. In [BBH + 90] the attention is restricted to the language ALC.
Reference: [Nut92] <author> Werner Nutt. </author> <type> Personal communication, </type> <year> 1992. </year>
Reference-contexts: A lower bound of the complexity of KB-satisfiability in obtained exploiting previous results about the language ALC, which is a sublanguage of ALCN R that does not include number restrictions and role conjunction. We know from McAllester [McA92], and (independently) from an observation of Werner Nutt <ref> [Nut92] </ref> that KB-satisfiability in ALC-knowledge bases is EXPTIME-hard (and hence it is hard for ALCN R-knowledge bases, too). Hence, we do not expect to find any algorithm solving the problem in polynomial space, unless PSPACE=EXPTIME. Nevertheless, the algorithm outlined above may require double exponential time.
Reference: [Pat84] <author> Peter F. Patel-Schneider. </author> <title> Small can be beautiful in knowledge representation. </title> <booktitle> In Proc. of the IEEE Workshop on Knowledge-Based Systems, </booktitle> <year> 1984. </year> <note> An extended version appeared as Fairchild Tech. Rep. 660 and FLAIR Tech. Rep. 37, </note> <month> October </month> <year> 1984. </year>
Reference-contexts: Following this line, other TKRSs (such as kripton and classic) provide limited tractable languages for expressing concepts, following the "small-can-be-beautiful" approach (see <ref> [Pat84] </ref>). The gap between what is expressible in the TKRS language and what is needed to be expressed for the application is then filled by the user, by a (sort of) programming with inference rules. Of course, the usual problems present in program development and debugging arise [McG92].
Reference: [Pat89] <author> Peter F. Patel-Schneider. </author> <title> Undecidability of subsumption in NIKL. </title> <journal> Artificial Intelligence, </journal> <volume> 39 </volume> <pages> 263-272, </pages> <year> 1989. </year>
Reference-contexts: NP-hard, coNP-hard or PSPACE-hard) for slight extensions of such languages, as subsequent research definitely confirmed [Neb88, DLNN91a, DLNN91b, SSS91, DHL + 92]. Also, beyond computational complexity, pure subsump-tion was proved undecidable in the two TKRS kl-one [SS89] and nikl <ref> [Pat89] </ref>. Note that extending the language results in enhancing its expressiveness, therefore the result of this research could be summarized as: The more a TKRS language is expressive, the higher is the computational complexity of reasoning in that language|as Levesque first noted [Lev84].
Reference: [QK90] <author> Joachim Quantz and Carsten Kindermann. </author> <title> Implementation of the BACK system version 4. </title> <type> Technical Report KIT-Report 78, </type> <institution> FB Informatik, Technische Universitat Berlin, </institution> <address> Berlin, Germany, </address> <year> 1990. </year>
Reference-contexts: 1 Introduction A general characteristic of many proposed Terminological Knowledge Representation Systems (TKRSs) such as kripton [BPL85], nikl [KBR86], back <ref> [QK90] </ref>, loom [MB87], classic [BBMAR89], KRIS [BH91], and others (see [Ric91, WS92]), is that they are made up of two different components.
Reference: [Ric91] <author> Charles Rich, </author> <title> editor. </title> <journal> SIGART bulletin. Special issue on implemented knowledge representation and reasoning systems. </journal> <volume> (2)3, </volume> <month> June </month> <year> 1991. </year>
Reference-contexts: 1 Introduction A general characteristic of many proposed Terminological Knowledge Representation Systems (TKRSs) such as kripton [BPL85], nikl [KBR86], back [QK90], loom [MB87], classic [BBMAR89], KRIS [BH91], and others (see <ref> [Ric91, WS92] </ref>), is that they are made up of two different components.
Reference: [Sch91] <author> Klaus Schild. </author> <title> A correspondence theory for terminological logics: Preliminary report. </title> <booktitle> In Proc. of the 12th Int. Joint Conf. on Artificial Intelligence IJCAI-91, </booktitle> <address> Sydney, </address> <year> 1991. </year> <month> 34 </month>
Reference-contexts: In [DLNS92] the complexity of instance checking has been analyzed, but only KBs without a TBox are treated. Instance checking has also been analyzed in [Vil91], but addressing only that part of the problem which can be performed as parsing. Previous theoretical work on cycles was done in <ref> [Baa90b, Baa90a, BBH + 90, Neb90a, Neb91, Sch91] </ref>, but considering KBs formed by the TBox alone. <p> consider previously proposed reasoning techniques that deal with inclusions and terminological cycles, then we discuss the relation between inclusions and terminological cycles. 24 5.1 Reasoning Techniques As mentioned in the introduction, there is work done by Baader et. al. [BBH + 90], Baader [Baa90b, Baa90a], Nebel [Neb90b, Neb91] and Schild <ref> [Sch91] </ref>. In [Neb90b] the language T F , containing concept conjunction, universal quantification and number restrictions, and TBoxes containing (possibly cyclic) concept definitions, role definitions and disjointness axioms (stating that two primitive concepts are disjoint) are considered. Nebel shows that subsumption of T F -concepts w.r.t. TBoxes is decidable. <p> In <ref> [Sch91] </ref> some results more general than those in [Baa90a] are obtained by considering languages more expressive than ALC reg and dealing with the concept satisfiability problem in such languages. The results in [Sch91] are obtained by establishing a correspondence between concept languages and Propositional Dynamic Logics (PDL), and reducing the given <p> In <ref> [Sch91] </ref> some results more general than those in [Baa90a] are obtained by considering languages more expressive than ALC reg and dealing with the concept satisfiability problem in such languages. The results in [Sch91] are obtained by establishing a correspondence between concept languages and Propositional Dynamic Logics (PDL), and reducing the given problem to a satisfiability problem in PDL. Such an approach allows Schild to find several new results exploiting known results in the PDL framework. <p> [BH91] and [DLNS92]. 5.2 Inclusions versus Concept Definitions Now we compare the expressive power of TBoxes defined as a set of inclusions (as done in this paper) and TBoxes defined as a set of (possibly cyclic) concept definitions of the form A _ D and A : Unlike [Baa90a] and <ref> [Sch91] </ref>, we consider reasoning problems dealing with TBox and ABox together. Moreover, we use the descriptive semantics for the concept definitions, as we do for the inclusions. The result we have obtained is that inclusion statements and concept definitions actually have the same expressive power. <p> In fact, realizing that the inclusions A v 8P 1 .A; . . . ; A v 8P n .A simulate a transitive closure on the roles P 1 ; . . . ; P n , one can recognize similarities with the proofs given by Schild <ref> [Sch91] </ref> and Baader [Baa90a]. The difference is that their proofs rely on the notion of connected model (Baader uses the equivalent notion of rooted model). In contrast, the models we obtain are not connected, when the individuals in the knowledge base are not.
Reference: [SS89] <author> Manfred Schmidt-Schau. </author> <title> Subsumption in KL-ONE is unde-cidable. </title> <editor> In Ron J. Brachman, Hector J. Levesque, and Ray Re-iter, editors, </editor> <booktitle> Proc. of the 1st Int. Conf. on Principles of Knowledge Representation and Reasoning KR-89. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1989. </year>
Reference-contexts: NP-hard, coNP-hard or PSPACE-hard) for slight extensions of such languages, as subsequent research definitely confirmed [Neb88, DLNN91a, DLNN91b, SSS91, DHL + 92]. Also, beyond computational complexity, pure subsump-tion was proved undecidable in the two TKRS kl-one <ref> [SS89] </ref> and nikl [Pat89]. Note that extending the language results in enhancing its expressiveness, therefore the result of this research could be summarized as: The more a TKRS language is expressive, the higher is the computational complexity of reasoning in that language|as Levesque first noted [Lev84].
Reference: [SSS91] <author> Manfred Schmidt-Schau and Gert Smolka. </author> <title> Attributive concept descriptions with complements. </title> <journal> Artificial Intelligence, </journal> <volume> 48(1) </volume> <pages> 1-26, </pages> <year> 1991. </year>
Reference-contexts: It turned out that pure subsumption is tractable (i.e. worst-case polynomial-time solvable) for simple languages, and intractable (e.g. NP-hard, coNP-hard or PSPACE-hard) for slight extensions of such languages, as subsequent research definitely confirmed <ref> [Neb88, DLNN91a, DLNN91b, SSS91, DHL + 92] </ref>. Also, beyond computational complexity, pure subsump-tion was proved undecidable in the two TKRS kl-one [SS89] and nikl [Pat89]. <p> Moreover, the system allows one to express inclusion statements between general concepts and, as a particular case, terminological cycles. We prove decidability by means of a suitable calculus, which is developed extending the quite well established framework of constraint systems (see <ref> [DLNN91a, SSS91] </ref>), thus exploiting a uniform approach to reasoning in TKRSs. Moreover, our calculus can easily be turned into a decision procedure. The paper is organized as follows. In Section 2 we introduce the language, and we give it a Tarski-style extensional semantics, which is the most commonly used. <p> Then, in Subsection 3.2, we prove the termination of the calculus. This will be sufficient to assess the decidability of all problems 1-4, thanks to the relationships between the four problems. 3.1 The calculus and its correctness Our method makes use of the notion of constraint system <ref> [DLNN91a, SSS91, DLNS91] </ref>, and is based on a tableau-like calculus [Fit90] that tries to build a model for the logical formula corresponding to a KB. Consider an alphabet of variable symbols V (disjoint from the other alphabets defined so far). <p> Trace rules have been defined in [DLNN91a] for deciding satisfiability and pure subsumption between ALCN R-concepts. Algorithms that generate all complete constraint systems derivable from a constraint system while keeping only one trace in memory at a time have been given (for sublanguages of ALCN R) in <ref> [SSS91, HN90, HNSS90] </ref>. Proposition 4.1 Let be an ALCN R-knowledge base, S its associated constraint system, and let n be the size of . Then: 1. The length of a trace rule derivation issuing from S is bounded by 2 n . 2.
Reference: [Vil91] <author> Marc Vilain. </author> <title> Deduction as parsing: Tractable classification in the KL-ONE framework. </title> <booktitle> In Proc. of the 9th Nat. Conf. on Artificial Intelligence AAAI-91, </booktitle> <pages> pages 464-470, </pages> <year> 1991. </year>
Reference-contexts: For example, the problems are studied in [Neb90a, Chapter 4], but only incomplete procedures are given, and cycles are not considered. In [DLNS92] the complexity of instance checking has been analyzed, but only KBs without a TBox are treated. Instance checking has also been analyzed in <ref> [Vil91] </ref>, but addressing only that part of the problem which can be performed as parsing. Previous theoretical work on cycles was done in [Baa90b, Baa90a, BBH + 90, Neb90a, Neb91, Sch91], but considering KBs formed by the TBox alone.
Reference: [Wan80] <author> Mitchell Wand. </author> <title> Induction, Recursion, and Programming. </title> <publisher> North-Holland, </publisher> <year> 1980. </year>
Reference-contexts: 1 .A) I S 0 ; . . . ; A I S 0 (8P n .A) I S 0 , every 1-successor of s is in A I S 0 ; 3. the successor relation is closed under the 1-successor relation From the Fundamental Theorem on Induction (e.g. cfr. <ref> [Wan80, page 41] </ref> we conclude that every object s of I S 0 is in A I S 0 . This proves that Equation 1 holds.
Reference: [WS92] <author> William A. Woods and James G. Schmolze. </author> <title> The KL-ONE family. </title> <editor> In F.W. Lehmann, editor, </editor> <booktitle> Semantic Networks in Artificial Intelligence, </booktitle> <pages> pages 133-178. </pages> <publisher> Pergamon Press, </publisher> <year> 1992. </year> <note> Published as a special issue of Computers & Mathematics with Applications, Volume 23, Number 2-9. 35 </note>
Reference-contexts: 1 Introduction A general characteristic of many proposed Terminological Knowledge Representation Systems (TKRSs) such as kripton [BPL85], nikl [KBR86], back [QK90], loom [MB87], classic [BBMAR89], KRIS [BH91], and others (see <ref> [Ric91, WS92] </ref>), is that they are made up of two different components.
References-found: 48

