URL: ftp://ftp.cs.columbia.edu/reports/reports-1995/cucs-012-95.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1995.html
Root-URL: http://www.cs.columbia.edu
Title: Interfacing Oz with the PCTE OMS  
Author: Wenke Lee Gail E. Kaiser 
Keyword: object management system (OMS), software engineering environment, environment framework, software process, process-centered environment, concurrency control  
Address: 500 West 120th Street New York, NY 10027  
Affiliation: Columbia University Department of Computer Science  
Pubnum: TR CUCS-012-95  
Email: fwenke, kaiserg@cs.columbia.edu  
Phone: (212)939-7086 Fax: (212)666-0140  
Date: January 23, 1996  
Abstract: This paper details our experiment interfacing Oz with the Object Management System (OMS) of PCTE. Oz is a process-centered multi-user software development environment. PCTE is a specification which defines a language independent interface providing support mechanisms for software engineering environments (SEE) populated with CASE tools. Oz is, in theory, a SEE that can be built (or extended) using the services provided by PCTE. Oz historically has had a native OMS component whereas the PCTE OMS is an open data repository with an API for external software tools. Our experiment focused on changing Oz to use the PCTE OMS. This paper describes how several Oz components were changed in order to make the Oz server interface with the PCTE OMS. The resulting system of our experiment is an environment that has process control and integration services provided by Oz, data integration services provided by PCTE, and tool integration services provided by both. We discusses in depth the concurrency control problems that arise in such an environment and their solutions. The PCTE implementation used in our experiment is the Emeraude PCTE V 12.5.1 supplied by Transtar Software Incorporation. keywords:
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Israel Ben-Shaul and Gail E. Kaiser. </author> <title> A Paradigm for Decentralized Process Modeling. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1995. </year> <month> 28 </month>
Reference-contexts: A SEE that has built-in support for process integration is called a process-centered environment. Oz is a process-centered, multi-user and multi-server environment. It supports process coordinations among Oz subenvironments. The architecture of Oz <ref> [1] </ref> is founded on componentization, with the emphasis that each Oz component provides distinct services (some of the major components are the Rule Processor, the Transaction Manager, OMS and the Activity Manager), and with particular concern for the capability to replace a component with minimal effects on other components while still <p> The second set of functions was the concurrency control functions, which were expanded to incorporate PCTE activities [5] into Pern transactions. Since these OMS functions were not isolated in a single component, several Oz components <ref> [1] </ref>, namely OMS, Rule Processor and Pern were modified. It is our experience that the fixed semantic assumptions about the OMS are somewhat independent of the fixed syntactic assumptions in that even if we have eliminated the fixed syntactic assumptions in Oz, we may still find fixed semantic assumptions. <p> The user processes on that host actually communicate with the object server on another host.) 3 Oz Overview 3.1 The Architecture of Oz Oz is a process-centered software development environment that supports cooperation among groups of engineers at different sites who follow a range of software development specific processes (work-flows) <ref> [1] </ref>. It facilitates both data sharing and process coordination. The architecture of an Oz environment is based on the client/server model. An Oz server can support multiple Oz clients sharing the same process and accessing the same objectbase.
Reference: [2] <author> Ramez Elmasri and Shamkant B. Navathe. </author> <title> Fundamentals of Database Systems, 2nd Edition. </title> <publisher> The Benjamin/Cummings Publishing Company, Inc., </publisher> <address> Redwood City, CA, </address> <year> 1994. </year>
Reference-contexts: However, even if we are in a "perfect world" where all PCTE activities use the transaction model in accessing the PCTE objectbase, there can still be a "Incorrect Summary Problem" (also known as the "Inconsistent Analysis Problem") <ref> [2] </ref>. To see how this can happen, suppose that we have two rules rule A and rule B and they are chained together (from rule A to rule B by an atomicity chain). The activities of rule A and rule B are shown in figure 4.
Reference: [3] <institution> European Computer Manufacturers Association. ECMA PCTE C Programming Language Binding, </institution> <year> 1991. </year>
Reference-contexts: For example, the data model validating functions and the cache management functions remain unchanged. There were two main sets of Oz functions that were rewritten in our experiment. The first set of functions was the object storage and retrieval functions, which were changed to use the PCTE OMS API <ref> [3] </ref>. The second set of functions was the concurrency control functions, which were expanded to incorporate PCTE activities [5] into Pern transactions. Since these OMS functions were not isolated in a single component, several Oz components [1], namely OMS, Rule Processor and Pern were modified.
Reference: [4] <author> James C. Ferrans, David W. Hurst, Michael A. Sennett, Burton M. Covnot, Wenguang Ji, Peter Kajka, and Wei Ouyang. Hyperweb: </author> <title> A framework for hypermedia-based environments. </title> <editor> In Her-bert Weber, editor, </editor> <booktitle> 5th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 149-158, </pages> <address> Tyson's Corner VA, </address> <month> December </month> <year> 1992. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 17(5), </volume> <month> December </month> <year> 1992. </year>
Reference-contexts: It is evident from this result that file I/O is the bulk of tool execution time and this performance hit is inevitable when Unix tools operate on PCTE objects. 8 Related Work HyperWeb <ref> [4] </ref> is a framework that supports the construction of hypermedia-based software development environments. In Hyperweb, software artifacts are stored in the PCTE OMS. <p> The server coordinates tool activities among clients through message passing. HyperWeb is very similar to Oz in using the PCTE OMS for data integration. Both have the client/server architecture where the server is responsible for communicating with the PCTE OMS. Also inferred from the HyperWeb paper <ref> [4] </ref> is that the server and clients run outside of the PCTE environment.
Reference: [5] <author> GIE Emeraude. </author> <title> Emeraude PCTE Environment Guide, </title> <year> 1994. </year>
Reference-contexts: The first set of functions was the object storage and retrieval functions, which were changed to use the PCTE OMS API [3]. The second set of functions was the concurrency control functions, which were expanded to incorporate PCTE activities <ref> [5] </ref> into Pern transactions. Since these OMS functions were not isolated in a single component, several Oz components [1], namely OMS, Rule Processor and Pern were modified. <p> For control integration, PCTE provides message and notification facilities. The Emeraude PCTE environment is a distributed software engineering development environment <ref> [5] </ref>. It typically consists of a network of hosts, which are workstations that allow users to access the Emeraude PCTE environment. 2.1 The PCTE OMS Model The main interest of this experiment is the OMS services provided by PCTE.
Reference: [6] <author> Mark A. Gisi and Gail E. Kaiser. </author> <title> Extending a tool integration language. </title> <editor> In Mark Dowson, editor, </editor> <booktitle> 1st International Conference on the Software Process: Manufacturing Complex Systems, </booktitle> <pages> pages 218-227, </pages> <address> Redondo Beach CA, October 1991. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: A tool envelope represents the implementation of an activity. Since the activity of a rule is always executed by Oz client, tool envelopes are invoked by Oz clients. Tool envelopes are written in SEL, an extended Unix shell language <ref> [6] </ref>. SEL allows the tool integrator to use a standard Unix shell language to write code to wrap around the call to the tool. It also requires the explicit declaration of all object attributes, along with the corresponding types, that are input or output variables of an envelope.
Reference: [7] <author> George T. Heineman. </author> <title> A transaction manager component for cooperative transaction models. </title> <editor> In Ann Gawman, W. Morven Gentleman, Evelyn Kidd, Perke Larson, and Jacob Slonim, editors, </editor> <booktitle> 1993 Center for Advanced Studies Conference (CASCON), </booktitle> <volume> volume II, </volume> <pages> pages 910-918, </pages> <address> Toronto ON, Canada, </address> <month> October </month> <year> 1993. </year> <institution> IBM Canada Ltd. Laboratory and National Research Council Canada. </institution>
Reference-contexts: The Oz OMS also provides an ad hoc query processor and a set of object manipulation functions. 3.2 Pern Transaction Model and Its Architecture Pern, which is currently used as the transaction manager for Oz, supports a cooperative transaction model <ref> [7] </ref>. It uses a project-specific lock compatibility matrix to check for lock conflicts. In the case of a lock conflict, Pern checks the project-specific coordination model to take the appropriate actions (for example, suspend or abort).
Reference: [8] <author> George T. Heineman and Gail E. Kaiser. </author> <title> An architecture for integrating concurrency control into environment frameworks. </title> <booktitle> In 17th International Conference on Software Engineering, </booktitle> <pages> pages 305-313, </pages> <address> Seattle WA, April 1995. </address> <publisher> ACM Press. </publisher>
Reference-contexts: Forward chaining through "atomicity chains" is performed mandatorily to propagate data changes to preserve the atomic nature of a transaction. Forward chaining through "automation chains" is for the purpose of automating sequences of activities, not necessary atomically. * The transaction manager is a separate component called Pern <ref> [8] </ref>, which interfaces to the rest of Oz (or another environment framework) through application-specific mediator code. Because multiple clients can access the same objectbase, conflicts may arise among user activities and concurrency control is thus in order. Oz follows the traditional solution of associating tasks with transactions. <p> In the case of a lock conflict, Pern checks the project-specific coordination model to take the appropriate actions (for example, suspend or abort). Pern may act as an external concurrency control (ECC) component in a variety of software engineering environments (SDEs) <ref> [8] </ref>. Pern has no fixed assumptions about how a task is structured (e.g., a task corresponds to a rule chain in Oz). It also uses external lock tables and a generic recovery mechanism so that it does not require the knowledge of the OMS in use.
Reference: [9] <institution> Programming Systems Lab. </institution> <note> Darkover 1.0 manual. Technical Report CUCS-023-95e, </note> <institution> Columbia University Department of Computer Science, </institution> <year> 1995. </year>
Reference-contexts: The native OMS has evolved into a component called Darkover. References to objects in Oz have been changed to function calls to the Darkover API <ref> [9] </ref>. This change is intended to eliminate all fixed syntactic assumptions.
Reference: [10] <author> Fred Long and Ed Morris. </author> <title> An overview of PCTE: A basis for a portable common tool environment. </title> <type> Technical Report CMU/SEI-93-TR-1, </type> <institution> ESC-TR-93-175, Software Engineering Institute, Carnegie Mellon University, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: On the other hand, a commonly recognized limitation of PCTE is the lack for the sort of hight level control integration capabilities (it only has low level ones similar to the basic Unix mechanisms) on which much of process integration support is built <ref> [10] </ref>. It is very common that given any single framework there is strong support for some forms of integration but also weak support for other forms. Thus to remedy weak support for a certain form of integration, it is often necessary to add additional support from another framework.
Reference: [11] <author> Peiwei Mi and Walt Scacchi. </author> <title> Process integration in case environments. </title> <journal> IEEE Software, </journal> <volume> 9(2) </volume> <pages> 45-53, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Process integration normally uses a software process model to explicitly represent the software development activities, it guides and coordinates development activities and integrates tools and data in the environment. Process integration is at a higher level than tool and data integration <ref> [11] </ref>. In fact, the invocation chain of tools to perform routine development tasks in an environment implicitly defines the conditions and orders of tools. Similarly, the production and consumption of software artifacts normally has a partial order during a software life cycle.
Reference: [12] <institution> Reference Model for Frameworks of Software Engineering Environments: </institution> <note> Edition 3 of Technical Report ECMA TR/55, August 1993. NIST Special Publication 500-211. Available as /pub/isee/sp.500-211.ps via anonymous ftp from nemo.ncsl.nist.gov. </note>
Reference-contexts: The commonly accepted solution for the development of environments that facilitates CASE tools integration is to use an Open Software Integration Platform, known as an Environment Framework. A widely supported framework is based on the Reference Model for Software Engineering Frameworks developed by ECMA and NIST <ref> [12] </ref>. This model suggests that a framework should support at least three main sets of services, namely, User Interface Services, Communications Services and Object Management Services, which correspond to these three dimensions of tool integration: presentation, control, and data.
Reference: [13] <author> H. Oliver. </author> <title> Adding control integration to PCTE. </title> <booktitle> In Software Development Environments and CASE Technology, European Symposium, </booktitle> <pages> pages 69-80, </pages> <address> Berlin, Germany, June 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Also inferred from the HyperWeb paper [4] is that the server and clients run outside of the PCTE environment. There was no discussion on concurrency control and process integration. 26 The SoftBench with PCTE experiment <ref> [13] </ref> attempted to add the Broadcast Message Services (BMS) on top of PCTE, thus providing a higher level of control integration than what was provided by PCTE. SoftBench is an environment framework for integrated tools. <p> It best served the assumption that SoftBench tools can be modified to run within PCTE (as PCTE processes). The SoftBench experiment had not used the PCTE support for concurrency and integrity control and activities <ref> [13] </ref>. 9 Conclusion Our experiment has successfully enabled Oz to interface with the PCTE OMS. The resulting system is an environment where software tools can be integrated by sharing the same Oz process and the same PCTE objectbase.
Reference: [14] <author> Ian Thomas. </author> <title> PCTE interfaces: Supporting tools in software-engineering environments. </title> <journal> IEEE Software, </journal> <volume> 6(6) </volume> <pages> 15-23, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: These processes are not objects because they are purely dynamic. PCTE provides facilities that are similar to Unix to manage the start, stop, suspension, communication and synchronization of PCTE processes <ref> [14] </ref>.
Reference: [15] <author> Ian Thomas and Brian A. Nejmeh. </author> <title> Definitions of tool integration for environments. </title> <journal> IEEE Software, </journal> <volume> 9(2) </volume> <pages> 29-35, </pages> <month> March </month> <year> 1992. </year> <month> 29 </month>
Reference-contexts: 1 Introduction The goal of a software engineering environment is to provide support for software engineering activities. Support is more effective if the environment is integrated if all its components function as a single, consistent, coherent and integral unit <ref> [15] </ref>. There are several key aspects of integration: tool, data and process. Tool integration provides a development tool set and an invocation mechanism to control its use within an environment.
References-found: 15

