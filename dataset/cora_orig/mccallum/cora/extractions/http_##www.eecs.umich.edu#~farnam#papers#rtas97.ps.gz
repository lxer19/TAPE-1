URL: http://www.eecs.umich.edu/~farnam/papers/rtas97.ps.gz
Refering-URL: http://www.eecs.umich.edu/~farnam/papers/pubs.html
Root-URL: http://www.cs.umich.edu
Email: fmonicab,farnamg@eecs.umich.edu fheitmeyer,labawg@itd.nrl.navy.mil  
Title: A Flexible, Extensible Simulation Environment for Testing Real-Time Specifications  
Author: Monica Brockmeyer Constance Heitmeyer Farnam Jahanian Bruce Labaw 
Keyword: Index terms: simulation, specification, symbolic execution, monitoring and assertion checking, formal methods.  
Address: Ann Arbor, MI 48109-2122 Washington, DC 20375  
Affiliation: Department of Electrical Engineering Center for High Assurance and Computer Science Computer Systems University of Michigan Naval Research Laboratory  
Abstract: This paper describes MTSim, an extensible, customizable simulation platform for the Modechart toolset (MT) [5]. MTSim provides support for "plugging in" user-defined viewers useful in simulating system behavior in different ways, including application-specific ways. MTSim also supports full user participation in the generation of simulations by allowing users to inject events into the execution trace. Moreover, MTSim provides monitoring and assertion checking of execution traces and the invocation of user-specified handlers upon assertion violation. This paper also introduces a MTSim component called WebSim, a suite of simulation tools for MT, and an an application-specific component of MTSim, which displays the cockpit of an F-18 aircraft and models its bomb release function. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Boehm. </author> <title> Software Engineering Economics. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1981. </year>
Reference: [2] <author> M. Brockmeyer, F. Jahanian, C. Heitmeyer, and B. Labaw. </author> <title> An approach to monitoring and assertion-checking distributed real-time systems. </title> <booktitle> In Workshop on Parallel and Distributed Real-Time Systems, </booktitle> <month> April </month> <year> 1996. </year>
Reference-contexts: Other studies have demonstrated that errors in the requirements specification are the most frequent cause of software errors fl This work is supported in part by the Naval Research Laboratory under Grant N00014-94-P2015. and the most expensive to correct <ref> [2] </ref>. To effectively detect errors in specifications of practical systems, specification languages and verification techniques must be complemented with software tools that are robust, flexible, and integrated [7].
Reference: [3] <author> P. C. Clements, C. L. Heitmeyer, B. G. Labaw, and A. T. Rose. </author> <title> MT: A toolset for specifying and analyzing real-time systems. </title> <booktitle> In Proc. IEEE Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1993. </year>
Reference-contexts: The controller might then use the GenerateEvent method to indicate when the transition should actually occur. 5.2 The WebSim Monitor The WebSim Monitor (Figure 4) performs monitoring and assertion-checking capabilities. The basic framework for performing monitoring and assertion-checking on Modechart specifications is found in <ref> [3] </ref>. Monitoring and assertion-checking can be used to detect an undesirable behavior or violation of a de sign assumption as an execution trace is generated.
Reference: [4] <institution> Century Computing. </institution> <note> TAE Plus Users Guide, Version 5.3. </note> <institution> Century Computing, Inc, </institution> <month> September </month> <year> 1993. </year>
Reference: [5] <author> D. Craigen, S. Gerhart, and T. Ralston. </author> <title> An international survey of industrial applications of formal methods. </title> <type> Technical Report NRL-9581, </type> <institution> Naval Research Laboratory, </institution> <address> Washington, DC, </address> <year> 1993. </year>
Reference-contexts: These client tools include WebSim, a tool for testing and simulating Modechart specifications, as well as an application-specific interface for modeling the behavior of an F-18 cockpit. MTSim has been developed within the context of the Modechart toolset (MT) <ref> [5] </ref>, a collection of integrated tools developed by researchers at the Naval Research Laboratory and the University of Texas. MT supports the formal specification of real-time behavior in the graphical Modechart language [17] and analysis via completeness and consistency checking, simulation, and formal verification.
Reference: [6] <author> D.A. Gabel. </author> <title> Technology 1994: </title> <journal> Software engineering. IEEE Spectrum, </journal> <volume> 31(1) </volume> <pages> 38-41, </pages> <month> january </month> <year> 1994. </year>
Reference-contexts: And finally, we wanted to evaluate how easily existing software could be incorporated into the MTSim framework. The F-18 cockpit simulation interface was developed by NRL researchers as an interface to the SCR* Toolset [11] and was implemented in Motif using Century Computing's TAE+ interface builder tool <ref> [6] </ref>. The purpose of this simulation interface was to mimic the physical system represented by the formal specification. In this case, the interface supports simulation of the bomb release mechanism of a navy attack aircraft, such as the F-18.
Reference: [7] <author> C. Ghezzi, D. Mandrioli, and A. Morzenti. </author> <title> TRIO, a logic language for executable specification of real-time software. </title> <journal> Journal of System Software, </journal> <volume> 12, </volume> <year> 1990. </year>
Reference-contexts: To effectively detect errors in specifications of practical systems, specification languages and verification techniques must be complemented with software tools that are robust, flexible, and integrated <ref> [7] </ref>. Among the tools effective for testing and debugging specifications early in the design process are simulators, which allow the user to generate and examine symbolic executions of the system under development. Simulation is even more effective if based on a formal specification. <p> Section 6 discusses future work. 2 Related Work This section reviews various formal methods for developing real-time systems with a particular emphasis on tool support. Several researchers have noted the need for tool support for these approaches, e.g. <ref> [7, 13] </ref>. The STATEMATE system [10], which has been widely employed in industry, has many capabilities not found in research prototypes, e.g., version management and support for splitting specifications into multiple documents. The STATEMATE user can invoke a variety of static queries about the system specification.
Reference: [8] <author> D. Harel et al. STATEMATE: </author> <title> A working environment for the development of complex reactive systems. </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> SE-16, </volume> <month> April </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Several studies have shown that the cost of detecting and removing software errors increases significantly as the development process moves from requirements specification toward implementation <ref> [8] </ref>. In fact, the cost of removing an error from a system specification is often an order of magnitude smaller than the cost of removing it from a system that is undergoing integration testing.
Reference: [9] <author> C. Heitmeyer, A. Bull, C. Gasarch, and B. Labaw. SCR*: </author> <title> A toolset for specifying and analyzing requirements. </title> <booktitle> In COMPASS:95, </booktitle> <year> 1995. </year>
Reference-contexts: The semantics of Cabernet is defined by TRIO <ref> [9] </ref>, a language developed specifically to support executable specifications and simulation. The Software Cost Reduction (SCR) toolset, SCR*, supports specification and analysis of requirements in the tabular SCR notation [11]. The tools provide completeness and consistency checking [14], specification editing, simulation, and mechanical verification.
Reference: [10] <author> C. Heitmeyer, B. Labaw, and D. Kiskis. </author> <title> Consistency checking of scr-style requirements specifications. </title> <booktitle> In International Symposium on Requirements Engineering, </booktitle> <address> York, England, </address> <month> March </month> <year> 1995. </year>
Reference-contexts: Section 6 discusses future work. 2 Related Work This section reviews various formal methods for developing real-time systems with a particular emphasis on tool support. Several researchers have noted the need for tool support for these approaches, e.g. [7, 13]. The STATEMATE system <ref> [10] </ref>, which has been widely employed in industry, has many capabilities not found in research prototypes, e.g., version management and support for splitting specifications into multiple documents. The STATEMATE user can invoke a variety of static queries about the system specification.
Reference: [11] <author> C. Heitmeyer and D. Mandrioli, </author> <title> editors. Formal Methods for Real-Time Computing. </title> <publisher> John Wiley and Sons, </publisher> <year> 1996. </year>
Reference-contexts: The semantics of Cabernet is defined by TRIO [9], a language developed specifically to support executable specifications and simulation. The Software Cost Reduction (SCR) toolset, SCR*, supports specification and analysis of requirements in the tabular SCR notation <ref> [11] </ref>. The tools provide completeness and consistency checking [14], specification editing, simulation, and mechanical verification. <p> In this way, the MTSim API manages invocation of hander objects automatically in response to the violation of the assertion. 5.3 Generic Viewers: WebSim Displays We are currently working on three types of displays. The first, a simple logging facility is depicted in Figure 5 <ref> [11] </ref>. The second display provides an "animated" view of the simulation behavior. This Animator client is depicted in Figure 6. It displays the execution of a specification graphically by displaying the original Modechart specification. <p> And finally, we wanted to evaluate how easily existing software could be incorporated into the MTSim framework. The F-18 cockpit simulation interface was developed by NRL researchers as an interface to the SCR* Toolset <ref> [11] </ref> and was implemented in Motif using Century Computing's TAE+ interface builder tool [6]. The purpose of this simulation interface was to mimic the physical system represented by the formal specification.
Reference: [12] <author> Constance L. Heitmeyer, Ralph D. Jeffords, and Bruce G. Labaw. </author> <title> Automated consistency checking of requirements specifications. </title> <journal> ACM Trans. on Software Eng. and Methodology, </journal> <volume> 5(3) </volume> <pages> 231-261, </pages> <month> July </month> <year> 1996. </year> <title> [13] iLogix Corporation. </title> <booktitle> The languages of STATEMATE. </booktitle> <address> i-Logix, </address> <publisher> Inc., </publisher> <year> 1991. </year>
Reference-contexts: MT supports the formal specification of real-time behavior in the graphical Modechart language [17] and analysis via completeness and consistency checking, simulation, and formal verification. Because our approach to simulation can be applied to other formal languages and tools, we hope to explore explore simulation based on, e.g., SCR <ref> [12, 14] </ref> specifications within the MTSim framework. MTSim contains three major components: the server, the client application programmer interface (API), and a collection of clients. The MTSim Server, which is responsible for simulating a Modechart specification, generates execution traces that satisfy Mod-echart semantics.
Reference: [14] <author> F. Jahanian and A. K. Mok. Modechart: </author> <title> A specification language for real-time systems. </title> <journal> IEEE Trans. Software Engineering, </journal> <month> 20(10), December </month> <year> 1994. </year>
Reference-contexts: MT supports the formal specification of real-time behavior in the graphical Modechart language [17] and analysis via completeness and consistency checking, simulation, and formal verification. Because our approach to simulation can be applied to other formal languages and tools, we hope to explore explore simulation based on, e.g., SCR <ref> [12, 14] </ref> specifications within the MTSim framework. MTSim contains three major components: the server, the client application programmer interface (API), and a collection of clients. The MTSim Server, which is responsible for simulating a Modechart specification, generates execution traces that satisfy Mod-echart semantics. <p> The semantics of Cabernet is defined by TRIO [9], a language developed specifically to support executable specifications and simulation. The Software Cost Reduction (SCR) toolset, SCR*, supports specification and analysis of requirements in the tabular SCR notation [11]. The tools provide completeness and consistency checking <ref> [14] </ref>, specification editing, simulation, and mechanical verification. The SCR notation may be used to specify the required system functions as well as the required system timing and accuracy. 3 MTSim Architecture and Design The approach to the implementation of MTSim was motivated by the design goals described in the Introduction.
Reference: [15] <author> D. Mandrioli, A. Morzenti, M. Pezze, P. SanPietro, and S. Silva. </author> <title> A Petri net and logic approach to the specification and verification of real time systems. </title> <editor> In C. Heitmeyer and D. Mandrioli, editors, </editor> <title> Formal Methods for Real-Time Computing, chapter 6. </title> <publisher> John Wiley and sons, </publisher> <year> 1996. </year>
References-found: 14

