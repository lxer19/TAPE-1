URL: http://www.cs.toronto.edu/~avigal/npt.ps
Refering-URL: http://www.cs.toronto.edu/~avigal/publications.html
Root-URL: http://www.cs.toronto.edu
Title: New Perspectives in Temporal Databases  
Author: Avigdor Gal, Opher Etzion 
Keyword: Temporal Databases, Decision Support Systems, Decision Analysis Systems  
Address: Haifa, 32000, Israel  
Affiliation: Technion Israel Institute of Technology Faculty of Industrial and Management Engineering  
Email: E-mail: favigal,ieretzng@ie.technion.ac.il  
Phone: Fax: 972-4-235194  
Date: September 18, 1995  
Abstract: The research of temporal databases has focused mainly on query languages that incorporate time into conventional query languages and on structural aspects of the temporal representation. Yet, the combination of time and databases has a potential to be more powerful than the current capabilities it supports. In this paper we show the power gained by three extensions to temporal database modeling: the support of simultaneous values, a unified approach to past and future and the enrichment of an update model for temporal databases. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. Abbod, K. Brown, H. </author> <title> Noble Providing Time-Related Constraints for Conventional Database Systems, </title> <booktitle> Proceedings of the 13th International Conference on VLDB, Brighton, </booktitle> <pages> pp. 167-175, </pages> <year> 1987. </year>
Reference-contexts: For example, the query: "what were the possible disorders of Dan Cohen in December 12, 1993 at 11:30pm?" results in an answer that consists of the state-elements (s14), (s15) and (s16). All the state-elements have <ref> [Dec 12, 1993, 11:15pm, 1] </ref> as their t v . Both single-element queries and subset queries may generate more than one state-element as a result of a retrieval operation. In this case, any aggregation operation such as sum, average and count can be operated on the selected subset. <p> t d , t v , status) Semantics: set-obj-status (ff, sval, o d , o v , s) j create-se (ff, p, sval, o 0 d , o 0 v , s) j p=object-status ^ o 0 d = now if o d =nil o d otherwise ^ v = <ref> [now; 1] </ref> F R (ff:Object-Status) if o v =nil o v F R (ff:Object-Status) otherwise o 0 d is default to now and o 0 v is default to the temporal element in [now, 1] which is non-frozen. <p> p=object-status ^ o 0 d = now if o d =nil o d otherwise ^ v = [now; 1] F R (ff:Object-Status) if o v =nil o v F R (ff:Object-Status) otherwise o 0 d is default to now and o 0 v is default to the temporal element in <ref> [now, 1] </ref> which is non-frozen. Both values are used to determine the object's life span. unfreeze-obj-status Unfreezes the variable Object-Status. <p> Syntax: unfreeze-obj-status (obj-id, status-value, t d , t v ) Semantics: unfreeze-obj-status (ff, sval, o d , o v ) j unfreeze-var (ff, object-status, sval, o d , o v ) Kill-obj changes the object status to Disabled in an interval of type <ref> [t s , 1] </ref>. <p> Syntax: kill-obj (obj-id, t d , t v ) Semantics: kill-obj (ff, o d , o v ) j o 0 ae <ref> [now; 1] </ref> F R (ff:Object-Status) if o v =nil [t s (o v ); 1] F R (ff:Object-Status) otherwise v - [t s (o 0 v ), 1] 6= ;) ! abort create-se (ff, p, sval, o 0 d , o 0 v , s) j p=object-status ^ sval="disabled" ^ o <p> Syntax: kill-obj (obj-id, t d , t v ) Semantics: kill-obj (ff, o d , o v ) j o 0 ae [now; 1] F R (ff:Object-Status) if o v =nil <ref> [t s (o v ); 1] </ref> F R (ff:Object-Status) otherwise v - [t s (o 0 v ), 1] 6= ;) ! abort create-se (ff, p, sval, o 0 d , o 0 v , s) j p=object-status ^ sval="disabled" ^ o 0 d := now if o d =nil o <p> Syntax: kill-obj (obj-id, t d , t v ) Semantics: kill-obj (ff, o d , o v ) j o 0 ae [now; 1] F R (ff:Object-Status) if o v =nil [t s (o v ); 1] F R (ff:Object-Status) otherwise v - <ref> [t s (o 0 v ), 1] </ref> 6= ;) ! abort create-se (ff, p, sval, o 0 d , o 0 v , s) j p=object-status ^ sval="disabled" ^ o 0 d := now if o d =nil o d otherwise ^ s="frozen" o 0 d receives a default value of <p> create-se (ff, p, sval, o 0 d , o 0 v , s) j p=object-status ^ sval="disabled" ^ o 0 d := now if o d =nil o d otherwise ^ s="frozen" o 0 d receives a default value of now and o 0 v receives a default value of <ref> [now, 1] </ref>. If the object status is frozen in the interval of the kill operation, the operation is aborted. 4.2 Update operations This section defines the update operations that are available to the user using the primitives defined above. <p> This distinction is very important in decision analysis and auditing systems. An object can be either temporarily suspended by the delete operation or permanently removed from the active domain by the kill operation. Although a delete operation can be operated with an interval of the type <ref> [t, 1] </ref>, the object can be resumed at any time. <p> During the '80s, many works concentrated on extending the relational model to include the time concept. A survey of algebras is introduced in [20]. Some other works in this area are <ref> [1] </ref>, [27], [24] and [29]. A book [28] that covers theory, design and implementation issues in temporal databases has been published recently. 5.1 Time perspectives Most temporal data models emphasize the difference between past information and future information. <p> Others (e.g., [19]) expanded the modify operation to include meta-data, thus allowing scheme evolution in time, as well as data evolution. Some studies ([18]; [26]; <ref> [1] </ref>; [22]) distinguished a modification from a correction. While applying a modification to a data is carried out when the situation in the real world has changed, applying a correction to a data is carried out because an error in the existing data has been detected.
Reference: [2] <author> M. Adiba, </author> <title> N.B. Quang Historical Multi-Media Databases, </title> <booktitle> Proceedings of the International Conference on VLDB, </booktitle> <pages> pp. 63-70, </pages> <year> 1986. </year>
Reference: [3] <author> G. </author> <title> Ariav ATemporally Oriented Data Model, </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 11(4), </volume> <pages> pp. </pages> <month> 499-527 , Dec </month> <year> 1986. </year>
Reference-contexts: The approach suggested by some researchers can be modelled using the PREFER min t x clause in the query language. Many other models (such as <ref> [3] </ref>; [25] and [31]) also enforce a single value for each time point. As a result, a mechanism to handle simultaneous values is either disabled or applied in an unnatural manner.
Reference: [4] <author> M. Ben-Ari, Z. Manna, A. </author> <title> Pnueli The Temporal Logic of Branching Time, </title> <booktitle> Proc. ACM Conference on Principles of Programming Languages, </booktitle> <pages> pp. 164-176, </pages> <year> 1981. </year>
Reference-contexts: In this case, any aggregation operation such as sum, average and count can be operated on the selected subset. In addition, queries can apply quantified predicates to a selected subset, to implement modal queries, as in the branching temporal logic <ref> [4] </ref>. in this section. While current single-element queries are supported by all database types, rollback single element queries are exclusively supported by the temporal database types.
Reference: [5] <author> J.A. Bubenko Jr. </author> <title> The Temporal Dimension in Information Modeling, in: Architecture and Models in Data Base Management Systems, </title> <publisher> North-Holland Pub. Co., The Netherlands, </publisher> <pages> pp. 93-118, </pages> <year> 1977. </year>
Reference-contexts: It is worth noting that all the update operations add new state-elements to the database; there are no physical deletion or modification of existing data. 5 Related work Embedding time as a database primitive began in the '70s [13]; [30]; <ref> [5] </ref>; [7]. During the '80s, many works concentrated on extending the relational model to include the time concept. A survey of algebras is introduced in [20]. Some other works in this area are [1], [27], [24] and [29].
Reference: [6] <author> P.P.S. </author> <title> Chen The Entity-Relationship Model- Toward a Unified View of Data, </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 1(1), </volume> <pages> pp. 9-36, </pages> <month> Mar </month> <year> 1976. </year>
Reference: [7] <author> V. Deantonellis et al. </author> <title> Extending the Entity-Relationship Approach to Take into Account Historical Aspects of Systems, </title> <booktitle> Proceedings of the International Conference on the E-R Approach to Systems Analysis and Design, </booktitle> <publisher> North Holland, </publisher> <year> 1979. </year>
Reference-contexts: It is worth noting that all the update operations add new state-elements to the database; there are no physical deletion or modification of existing data. 5 Related work Embedding time as a database primitive began in the '70s [13]; [30]; [5]; <ref> [7] </ref>. During the '80s, many works concentrated on extending the relational model to include the time concept. A survey of algebras is introduced in [20]. Some other works in this area are [1], [27], [24] and [29].
Reference: [8] <author> R. Elmasri, G. </author> <title> Wuu ATemporal Model and Query Language for ER Databases, </title> <booktitle> Proc International Conference on Data Engineering, </booktitle> <pages> pp. 76-83, </pages> <month> Feb </month> <year> 1990. </year>
Reference-contexts: If there is no such object, the modify operation aborts. If there is more then one possible object, the user is prompt to decide which object is the required one. As argued by some researchers (e.g., <ref> [8] </ref>), the modification of an object value in a temporal database makes a temporal change while keeping the earlier historical values of the object rather than actually replacing the previous object value as in non-temporal databases. <p> For example, according to some researchers (e.g., <ref> [8] </ref>) the basic difference between updates in temporal databases and non-temporal databases is that modification of an attribute value will make a temporal change while keeping the earlier historical values of the attribute rather than actually replacing the previous attribute value.
Reference: [9] <author> O. Etzion, A. Gal, A. </author> <title> Segev Temporal Support in Active Databases, </title> <booktitle> Proceedings of the Workshop on Information Technologies & Systems (WITS), </booktitle> <pages> pp. 245-254, </pages> <month> Dec </month> <year> 1992. </year>
Reference-contexts: The update language in <ref> [9] </ref> includes six update operations. The basic three operations, insert, modify and delete along with freeze and unfreeze which controls the ability to change values, and revise which takes on the semantics of correction in other models. This paper extends the update abilities given in [9] and gives them an accurate <p> The update language in <ref> [9] </ref> includes six update operations. The basic three operations, insert, modify and delete along with freeze and unfreeze which controls the ability to change values, and revise which takes on the semantics of correction in other models. This paper extends the update abilities given in [9] and gives them an accurate semantics. 6 Conclusion In this paper we have discussed the ideas, implementation and implications of several features that extend the power and usability of temporal databases.
Reference: [10] <author> O. Etzion, A. Gal, A. </author> <title> Segev Temporal Active Databases, </title> <booktitle> Proceedings of the International Workshop on an Infrastructure for Temporal Database, </booktitle> <month> June </month> <year> 1993. </year> <month> 27 </month>
Reference-contexts: A basic set of these time types consists of: Transaction Time (t x ) The commit time of the transaction which updated a data-item. Decision Time (t d ) The time at which a data-item's value was decided in the database's domain of discourse <ref> [10] </ref>. For example, if a decision regarding a patient's disorder was decided at 10:03pm on December 12, 1993, and committed by the database at 10:06pm on December 12, 1993, t d would be 10:03pm on December 12, 1993, and t x would be 10:06pm on December 12, 1993. <p> In particular, our approach provides tools that can improve the application modeling capabilities in medical systems. Currently, we study the potential and the implementation principles of the combination of active databases and temporal databases. A preliminary report of this research is presented in <ref> [10] </ref>. Future research will deal with the formalization of a temporal transaction model and on various implementation issues, including application of this architecture using WORM (Write-Once-Read-Many) storage devices. Acknowledgments This study is a continuation of work that has been done with Arie Segev.
Reference: [11] <author> O. Etzion, A. Gal, A. </author> <booktitle> Segev Retroactive and Proactive Processing. Proceedings of Research Issues in Data Engineering Active Database Systems, </booktitle> <month> Feb </month> <year> 1994. </year>
Reference-contexts: A representation schema and a modification of temporal retrieval languages to support simultaneous values was presented. The concept of a unified time-line, i.e. uniform treatment of past and future enables to issue retroactive or proactive modifications, which may also be important for various applications <ref> [11] </ref>. An extended set of update operations enables to express additional semantics about temporal data.
Reference: [12] <author> S. </author> <title> Ferg - Modelling the Time Dimension in an Entity-Relationship Diagram, </title> <booktitle> Proceedings of the 4th International Conference on E-R Approach, in: P.P.S. Chen(ed.), E-R Approach, </booktitle> <publisher> Elsevier Science Publishers B.V. North-Holland, </publisher> <pages> pp. 280-286, </pages> <year> 1985. </year>
Reference: [13] <author> N. Findler, </author> <title> D.Chen On the Problems of Time Retrieval, Temporal Relations, Causality and Coexistence, </title> <booktitle> Proceedings of the International Conference on Artificial Intelligence, </booktitle> <institution> Imperial College, </institution> <month> Sep </month> <year> 1971. </year>
Reference-contexts: It is worth noting that all the update operations add new state-elements to the database; there are no physical deletion or modification of existing data. 5 Related work Embedding time as a database primitive began in the '70s <ref> [13] </ref>; [30]; [5]; [7]. During the '80s, many works concentrated on extending the relational model to include the time concept. A survey of algebras is introduced in [20]. Some other works in this area are [1], [27], [24] and [29].
Reference: [14] <author> S.K. </author> <title> Gadia The Role of Temporal Elements in Temporal Databases, </title> <journal> Data Engineering Bulletin, </journal> <volume> 7, </volume> <pages> pp. 197-203, </pages> <year> 1988. </year>
Reference-contexts: Valid Time (t v ) The time-points in which the decision maker believes that the data-item reflects a value of an attribute of the object in the "real world". The valid time is expressed using a temporal element <ref> [14] </ref> which is a time-point or an interval [t s , t e ] or a collection of intervals and time-points. <p> Some other works in this area are [1], [27], [24] and [29]. A book [28] that covers theory, design and implementation issues in temporal databases has been published recently. 5.1 Time perspectives Most temporal data models emphasize the difference between past information and future information. For example, in <ref> [14] </ref> the available time is [0, now] where now represents a floating time point. As we show in Section 1, this separation limits the usability of temporal database and it is redundant.
Reference: [15] <author> C.S. Jensen, R. </author> <title> Snodgrass Specialized Temporal Relations, </title> <type> Technical Report R 91-26, </type> <institution> Aalborg University, Denmark, </institution> <month> June </month> <year> 1991. </year>
Reference-contexts: Single-element queries: queries that return no more than one state-element for each variable at each time point. For example, the query "what is Dan Cohen's social security number?" results in "12345678" (following Following <ref> [15] </ref>, single-element queries can be further classified into two classes: Current queries: queries that are applied to the current state of the database. In conventional databases current single-element queries are the only possible retrieval type since only the current state of each variable is stored.
Reference: [16] <author> M. Kifer, W. Kim, Y. </author> <title> Sagiv Querying Object-Oriented Databases, </title> <booktitle> Proc. ACM SIGMOD 1992, </booktitle> <pages> pp. 393-402, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: Contrary to that, the D3 default is used in retrieval time and can be overridden. As a high-level language we use a combination of two query languages. XSQL <ref> [16] </ref>, a query language proposed as an object-oriented query language, is the basis to the described query language . This language is convenient in dealing with complex objects; however it lacks temporal capabilities. We add temporal functionality as presented in TQUEL [27].
Reference: [17] <author> M.R. </author> <title> Klopprogge TERM: An Approach to Include the Time Dimension in the Entity-Relationship Model, </title> <booktitle> Proceedings of the Second International Conference on E-R Approach, </booktitle> <pages> pp. 477-512, </pages> <year> 1981. </year>
Reference: [18] <author> M.R. Klopprogge, </author> <title> P.C. Lockmann - Modelling Information Preserving Databases; Consequences of the Concept of Time, </title> <booktitle> Proceedings of the International Conference of VLDB, </booktitle> <address> Florance, Italy, </address> <year> 1983. </year>
Reference: [19] <author> E. </author> <title> McKenzie An Algebraic Language for Query and Update of Temporal Databases, </title> <type> PhD. </type> <institution> Diss., Computer Science Department, University of North Carolina in Chapel Hill, </institution> <month> Sep </month> <year> 1988. </year>
Reference-contexts: Others (e.g., <ref> [19] </ref>) expanded the modify operation to include meta-data, thus allowing scheme evolution in time, as well as data evolution. Some studies ([18]; [26]; [1]; [22]) distinguished a modification from a correction.
Reference: [20] <author> E. McKenzie, R. </author> <title> Snodgrass An Evaluation of Relational Algebras Incorporating the Time Dimension in Databases, </title> <booktitle> Computer Survey, </booktitle> <volume> 23(4), </volume> <pages> pp. 501-543, </pages> <month> Dec </month> <year> 1991. </year>
Reference-contexts: During the '80s, many works concentrated on extending the relational model to include the time concept. A survey of algebras is introduced in <ref> [20] </ref>. Some other works in this area are [1], [27], [24] and [29]. A book [28] that covers theory, design and implementation issues in temporal databases has been published recently. 5.1 Time perspectives Most temporal data models emphasize the difference between past information and future information.
Reference: [21] <author> D. </author> <title> Plexousakis AnOntology and a Possible-Worlds Semantics for Telos, </title> <institution> University of Toronto Technical Report KRR-TR-90-7, </institution> <month> Sep </month> <year> 1990. </year>
Reference-contexts: Most of the temporal models have proposed a special symbol to designate an unknown ending time point of the valid time. A refined categories of that symbol was introduced in [31]: 1 This value is believed to hold at all times (also known as UR|UnRestricted in <ref> [21] </ref>). 1 represents the user belief that the value of the variable will never be modified. 24 UC (Until Change) This value is believed to hold as long as no other value is inferred to hold. now This value is true until now; there is no information about the future.
Reference: [22] <author> E. Rose, A. </author> <title> Segev - TOODM-a Temporal, Object-Oriented Data Model with Temporal Constraints, </title> <booktitle> Proc. International Conference on the Entity-Relationship Approach, </booktitle> <address> San Mateo, California, </address> <pages> pp. 205-229, </pages> <year> 1991. </year>
Reference-contexts: The PREFER clause is the tool for choosing among different alternatives. This clause is used as a tool for selecting among simultaneous values. Both single-element queries and subset queries handle information about the past, present and future in a unified manner, unlike data models such as TOODM <ref> [22] </ref>, where there are different operators defined for past information (e.g., always in the past [p-now]), different operators defined for past and present information (e.g., always in the past & present [p+now]), different operators defined for future information (e.g., always in the future [f-now]) and different operators defined for future and <p> Others (e.g., [19]) expanded the modify operation to include meta-data, thus allowing scheme evolution in time, as well as data evolution. Some studies ([18]; [26]; [1]; <ref> [22] </ref>) distinguished a modification from a correction. While applying a modification to a data is carried out when the situation in the real world has changed, applying a correction to a data is carried out because an error in the existing data has been detected.
Reference: [23] <author> A. Segev, </author> <title> A.Shoshani Logical Modeling of Temporal Data, </title> <booktitle> Proc. ACM SIGMOD 87, </booktitle> <pages> pp. </pages> <month> 454-466 , May </month> <year> 1987. </year>
Reference-contexts: Otherwise, the starting point is floating, thus, it can be some formula that involves now (a similar idea was suggested in <ref> [23] </ref>). As for the third decision, if the ending point is fixed, it can be either an explicit time point or 1 to suggest that this value is valid infinitely. <p> In <ref> [23] </ref>, a moving window ,i.e., an interval with fixed length that advances with now, was proposed. In a moving window [t s , t e ] t e = now and t s is some function of now. This type of valid time can be used for moving averages.
Reference: [24] <author> A. Segev, A. </author> <title> Shoshani The Representation of a Temporal Data model in the Relational Environment, </title> <booktitle> An Invited Paper to the 4th International Conference on Statistical and Scientific Database Management, </booktitle> <address> LBL-25461, </address> <month> Aug </month> <year> 1988. </year>
Reference-contexts: During the '80s, many works concentrated on extending the relational model to include the time concept. A survey of algebras is introduced in [20]. Some other works in this area are [1], [27], <ref> [24] </ref> and [29]. A book [28] that covers theory, design and implementation issues in temporal databases has been published recently. 5.1 Time perspectives Most temporal data models emphasize the difference between past information and future information.
Reference: [25] <author> A. Shoshani, K. </author> <title> Kawagoe Temporal Data Management, </title> <booktitle> Proc VLDB 86, </booktitle> <pages> pp. </pages> <month> 79-88 , Aug </month> <year> 1986. </year>
Reference-contexts: The approach suggested by some researchers can be modelled using the PREFER min t x clause in the query language. Many other models (such as [3]; <ref> [25] </ref> and [31]) also enforce a single value for each time point. As a result, a mechanism to handle simultaneous values is either disabled or applied in an unnatural manner.
Reference: [26] <author> R. Snodgrass, I. </author> <title> Ahn Temporal Databases, </title> <booktitle> IEEE Computer 19, </booktitle> <pages> pp. 35-42, </pages> <month> Sep </month> <year> 1986. </year>
Reference-contexts: Sections 3 and 4 discusses new perspectives of retrieval and update operations in temporal databases. The related work in the temporal data models area is presented in Section 5. 2 The structure of the temporal database 2.1 Time types As argued in <ref> [26] </ref>, several types of time are required to be associated with each data-item in order to maintain temporal capabilities in a database. A basic set of these time types consists of: Transaction Time (t x ) The commit time of the transaction which updated a data-item. <p> Others (e.g., [19]) expanded the modify operation to include meta-data, thus allowing scheme evolution in time, as well as data evolution. Some studies ([18]; <ref> [26] </ref>; [1]; [22]) distinguished a modification from a correction. While applying a modification to a data is carried out when the situation in the real world has changed, applying a correction to a data is carried out because an error in the existing data has been detected.
Reference: [27] <author> R. </author> <title> Snodgrass The Temporal Query Language TQUEL, </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 12(2), </volume> <pages> pp. 247-298, </pages> <month> June </month> <year> 1987. </year> <month> 28 </month>
Reference-contexts: For example, the query "what are the possible disorders of Dan Cohen?" asked in December 12, 1993 at 11:30pm, scans the state-elements (s11)-(s16) and chooses those with the latest t d , i.e., (s14), (s15) and (s16). The defaults D1 and D2 are equivalent to TQUEL conventions <ref> [27] </ref>. However, in TQUEL, there is an update preference relation that prefers values that were inserted earlier to the database. This preference is irreversible since the information about later updates, in time points where there exists an earlier value, is not kept by the database. <p> XSQL [16], a query language proposed as an object-oriented query language, is the basis to the described query language . This language is convenient in dealing with complex objects; however it lacks temporal capabilities. We add temporal functionality as presented in TQUEL <ref> [27] </ref>. The basic elements of the proposed language are: SELECT : Syntax: SELECT ff 1 .Property-Name 1 ,[,... ff n .Property-Name n ], Semantics: ff designates an object. Each ff.Property-Name i designates a variable associated with the set of state-elements that should be selected. Example: SELECT x.Disorder. <p> During the '80s, many works concentrated on extending the relational model to include the time concept. A survey of algebras is introduced in [20]. Some other works in this area are [1], <ref> [27] </ref>, [24] and [29]. A book [28] that covers theory, design and implementation issues in temporal databases has been published recently. 5.1 Time perspectives Most temporal data models emphasize the difference between past information and future information. <p> Most of the research in this area used limited update protocols. For example, Figure 13 presents the update logic as proposed in <ref> [27] </ref>. Let SI = &lt; [ts 1 ; te 1 ]; : : : ; [ts n ; te n ] &gt; be a sequence of intervals for which there are values v 1 ; : : : ; v n defined for a data-item ff.
Reference: [28] <author> A.U. Tansel, J. Clifford, S. Gadia, S. Jajodia, A. Segev, R. </author> <title> Snodgrass Temporal Databases, </title> <publisher> The Benjamin/Commings Publishing Company, Inc., </publisher> <address> Redwood City, CA., </address> <year> 1993. </year>
Reference-contexts: During the '80s, many works concentrated on extending the relational model to include the time concept. A survey of algebras is introduced in [20]. Some other works in this area are [1], [27], [24] and [29]. A book <ref> [28] </ref> that covers theory, design and implementation issues in temporal databases has been published recently. 5.1 Time perspectives Most temporal data models emphasize the difference between past information and future information. For example, in [14] the available time is [0, now] where now represents a floating time point.
Reference: [29] <author> A. Tuzhilin, J. </author> <title> Clifford A temporal Relational Algebra as a Basis for Temporal Relational Completeness, </title> <booktitle> Proceedings of the 16th International Conference on VLDB, </booktitle> <pages> pp. 13-23, </pages> <year> 1990. </year>
Reference-contexts: During the '80s, many works concentrated on extending the relational model to include the time concept. A survey of algebras is introduced in [20]. Some other works in this area are [1], [27], [24] and <ref> [29] </ref>. A book [28] that covers theory, design and implementation issues in temporal databases has been published recently. 5.1 Time perspectives Most temporal data models emphasize the difference between past information and future information.
Reference: [30] <author> G. </author> <title> Wiederhold How to Write a Schema for a Time Oriented Medical Record Data Bank, </title> <publisher> Stanford, </publisher> <year> 1973. </year>
Reference-contexts: It is worth noting that all the update operations add new state-elements to the database; there are no physical deletion or modification of existing data. 5 Related work Embedding time as a database primitive began in the '70s [13]; <ref> [30] </ref>; [5]; [7]. During the '80s, many works concentrated on extending the relational model to include the time concept. A survey of algebras is introduced in [20]. Some other works in this area are [1], [27], [24] and [29].
Reference: [31] <author> G. Wiederhold, S. Jajodia, W. </author> <title> Litwin Dealing with Granularity of Time in Temporal Databases, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> 498, </volume> <editor> (R. Anderson et al. eds.), </editor> <publisher> Springer-Verlag, </publisher> <pages> pp. 124-140, </pages> <year> 1991. </year>
Reference-contexts: As we show in Section 1, this separation limits the usability of temporal database and it is redundant. Most of the temporal models have proposed a special symbol to designate an unknown ending time point of the valid time. A refined categories of that symbol was introduced in <ref> [31] </ref>: 1 This value is believed to hold at all times (also known as UR|UnRestricted in [21]). 1 represents the user belief that the value of the variable will never be modified. 24 UC (Until Change) This value is believed to hold as long as no other value is inferred to <p> The approach suggested by some researchers can be modelled using the PREFER min t x clause in the query language. Many other models (such as [3]; [25] and <ref> [31] </ref>) also enforce a single value for each time point. As a result, a mechanism to handle simultaneous values is either disabled or applied in an unnatural manner.
Reference: [32] <author> G.T.J. Wuu - SERQL: </author> <title> An er Query Language Supporting Temporal Data Retrieval , The Proceedings of the 10th International Pheonix Conference on Computers and Communications, </title> <month> Mar </month> <year> 1991. </year> <month> 29 </month>
References-found: 32

