URL: ftp://ftp.cs.rutgers.edu/pub/kudenko/papers/aaai97a.ps.Z
Refering-URL: http://athos.rutgers.edu/~kudenko/papers.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: dvitps ERROR: aaai97.dvi aramis.rutgers.edu Certain fonts that you requested in your dvi file could  
Note: not be found on the system. In order to print your document, other fonts that are installed were substituted for these missing fonts. Below is a list of the substitutions that were made. /usr/local/lib/fonts/gf/cmtt8.300pk substituted for cmtt8.225pk /usr/local/lib/fonts/gf/cmtt8.300pk substituted for cmtt8.263pk  
Abstract-found: 0
Intro-found: 1
Reference: <editor> Baader, F., and Hollunder, B. </editor> <year> 1992. </year> <title> A terminological knowledge representation system with complete inference algorithm. </title> <booktitle> In Proceedings of Int. Workshop PDK'91, </booktitle> <pages> 67-86. </pages>
Reference-contexts: For example, Table 1 gives some basic concept-formation operators and their semantics over a domain of individuals . Although many further operators in addition to this small set have been studied (e.g., CLASSIC (Borgida et al. 1989), KRIS <ref> (Baader & Hollunder 1992) </ref>, and others), for this paper we will only need to focus on this core set of well-explored operators. DLs support a range of reasoning tasks.
Reference: <author> Borgida, A., and Patel-Schneider, P. </author> <year> 1994. </year> <title> A semantics and complete algorithm for subsumption in the classic description logic. </title> <journal> Journal of Artificial Intelligence Research 1. </journal>
Reference-contexts: Representing Suffix Trees in DLs Representing a suffix tree in a DL is fairly straightforward, given that the "topology" of a concept expression using roles is already often depicted in tree form, as "description graphs" <ref> (Borgida & Patel-Schneider 1994) </ref>. The task is simply to generate the appropriate expression whose description graph is identical to the given suffix tree, with nodes of the tree labeled by the primitive concept NODE (which is introduced solely for this purpose).
Reference: <author> Borgida, A.; Brachman, R.; McGuinness, D.; and L.Resnick. </author> <year> 1989. </year> <title> Classic: A structural data model for objects. </title> <booktitle> In Proceedings of SIGMOD-89. </booktitle>
Reference-contexts: New concepts are defined using these building blocks together with combination operators such as conjunction. For example, Table 1 gives some basic concept-formation operators and their semantics over a domain of individuals . Although many further operators in addition to this small set have been studied (e.g., CLASSIC <ref> (Borgida et al. 1989) </ref>, KRIS (Baader & Hollunder 1992), and others), for this paper we will only need to focus on this core set of well-explored operators. DLs support a range of reasoning tasks. <p> Further, traditional DL reasoning tasks should have common-sense meanings for the represented sequences. Approaches such as Isbell's (Isbell 1993) for representing sequences in the Classic DL <ref> (Borgida et al. 1989) </ref> therefore do not meet our goals, in that such an approach requires the addition of new sequence-specific operators to a DL, resulting in an extended language for which well-defined semantics and tractable algorithms are difficult to develop or even don't exist at all.
Reference: <author> Cohen, W., and Hirsh, H. </author> <year> 1994. </year> <title> Learning the classic description logic: Theoretical and experimental results. </title> <booktitle> In Principles of knowledge representation and reasoning : proceedings of the third international conference (KR '92). </booktitle>
Reference-contexts: Also relevant is the task of computing the least common sub-sumer of two terms (Cohen, Borgida, & Hirsh 1992), an operation that forms the basis for one approach to machine learning on DLs <ref> (Cohen & Hirsh 1994) </ref>: a concept expression C is a least common subsumer (LCS) of two concept expressions C 1 and C 2 iff C subsumes both C 1 and C 2 and there is no other C 0 6= C that also subsumes C 1 and C 2 and is <p> (r) ) y 2 I (D)g ATLEAST I ((ATLEAST n r)) = fx 2 : jfy : hx; yi 2 I (r)gj ng ATMOST I ((ATMOST n r)) = fx 2 : jfy : hx; yi 2 I (r)gj ng THING I (THING) = Table 1: Description Logic Constructors (from <ref> (Cohen & Hirsh 1994) </ref>) also be represented using the DL. Such a representation should maintain a wide range of information about a sequence and support various reasoning tasks over sequences while still preserving well-understood DL se mantics and algorithms. <p> Lemma 4 If S is a substring of S 1 and S 2 then N orm (LCS (DL (S 1 ); DL (S 2 ))) v DL (S). Because of the above property, LCS can be used to perform inductive learning over strings using existing LCS-based learning algorithms <ref> (Cohen & Hirsh 1994) </ref>. <p> Our DL representation also supports the meaningful application of the LCS operation to represented strings. This makes it possible to apply LCS-based DL learning algorithms <ref> (Cohen & Hirsh 1994) </ref> to sequences. We are currently also exploring suffix-tree-based feature-generation methods to create Boolean features for propositional learning algorithms.
Reference: <author> Cohen, W.; Borgida, A.; and Hirsh, H. </author> <year> 1992. </year> <title> Computing least common subsumers in description logics. </title> <booktitle> In Proceedings of the Tenth National Conference on Artificial Intelligence. </booktitle>
Reference-contexts: Also relevant is the task of computing the least common sub-sumer of two terms <ref> (Cohen, Borgida, & Hirsh 1992) </ref>, an operation that forms the basis for one approach to machine learning on DLs (Cohen & Hirsh 1994): a concept expression C is a least common subsumer (LCS) of two concept expressions C 1 and C 2 iff C subsumes both C 1 and C 2 <p> For most common DLs (such as the one given in Table 1) the least common subsumer of two expressions is always unique <ref> (Cohen, Borgida, & Hirsh 1992) </ref>.
Reference: <author> Cohen, W. </author> <year> 1995. </year> <title> Text categorization and relational learning. </title> <booktitle> In Proceedings of the Twelfth International Conference on Machine Learning. </booktitle>
Reference-contexts: Indeed, our original motivation for this work was to find a way to represent strings in DLs so that existing DL learning approaches can be applied (similar to the way Cohen explored ways to represent strings in Horn-clause form to enable the use of inductive logic programming on strings <ref> (Cohen 1995) </ref>). Note furthermore that the conjunction of two DL expressions for pattern trees T 1 and T 2 results in an expression corresponding to a pattern tree that contains all paths from the root to a leaf in either tree.
Reference: <author> Devanbu, P. </author> <year> 1993. </year> <title> Translating description logics into information server queries. </title> <booktitle> In Second International Conference on Information and Knowledge Management. </booktitle>
Reference: <author> Isbell, C. </author> <year> 1993. </year> <note> Sequenced classic. Research Note, </note> <institution> AT&T Bell Laboratories. </institution>
Reference-contexts: Such a representation should maintain a wide range of information about a sequence and support various reasoning tasks over sequences while still preserving well-understood DL se mantics and algorithms. Further, traditional DL reasoning tasks should have common-sense meanings for the represented sequences. Approaches such as Isbell's <ref> (Isbell 1993) </ref> for representing sequences in the Classic DL (Borgida et al. 1989) therefore do not meet our goals, in that such an approach requires the addition of new sequence-specific operators to a DL, resulting in an extended language for which well-defined semantics and tractable algorithms are difficult to develop or
Reference: <author> Kobsa, A. </author> <year> 1991. </year> <title> Reification in SB-ONE. </title> <booktitle> In International Workshop on Terminological Logics. </booktitle>
Reference-contexts: It would also be desirable for elements of a string to be representable as concepts themselves | for example, to have concepts representing each step in a plan. This would call for extensions to a description logic in which roles could be identified with concepts (similarly to Meta-SB-ONE <ref> (Kobsa 1991) </ref>). Such an extension would also allow the introduction of hierarchies over characters for strings, e.g., the "D" character to denote a "change of direction" action in a plan (i.e., turn left or right). Our DL representation also supports the meaningful application of the LCS operation to represented strings.
Reference: <author> McCreight, E. </author> <year> 1976. </year> <title> A space economical suffix tree construction algorithm. </title> <journal> J. Assoc. Comput. </journal> <volume> Mach 23 </volume> <pages> 262-272. </pages>
Reference: <author> Nebel, B. </author> <year> 1990. </year> <title> Reasoning and revision in hybrid representation systems. </title> <publisher> Berlin: Springer-Verlag. </publisher>
Reference-contexts: However, although re searchers in knowledge representation have accorded much study to how to conceptualize domains using description logics (DLs) | developing a well-defined semantics, thoroughly analyzed reasoning algorithms <ref> (Nebel 1990) </ref>, and many real applications ((Devanbu 1993) and many more) | as yet no direct way has We thank Alex Borgida, William Cohen, and Martin Farach for many helpful discussions concerning this work. Copyright c fl1997, American Association for Artificial Intelligence (www.aaai.org).
References-found: 11

