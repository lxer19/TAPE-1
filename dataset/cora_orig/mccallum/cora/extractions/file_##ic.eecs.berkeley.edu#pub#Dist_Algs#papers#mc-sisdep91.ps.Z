URL: file://ic.eecs.berkeley.edu/pub/Dist_Algs/papers/mc-sisdep91.ps.Z
Refering-URL: http://www-cad.eecs.berkeley.edu/Respep/Research/dist-sim/publications.html
Root-URL: 
Title: Massively Parallel Computation for Three-Dimensional Monte Carlo Semiconductor Device Simulation  
Author: Henry Sheng, Roberto Guerrieri and Alberto Sangiovanni-Vincentelli 
Address: Berkeley, CA 94720, U.S.A.  Italy  
Affiliation: Department of Electrical Engineering and Computer Sciences University of California,  Dipartimento di Elettronica e Informatica Universita di Bologna,  
Abstract: This work presents a study of the applicability of a massively parallel computing paradigm to Monte Carlo techniques for device simulation. A unique mapping of Monte Carlo to SIMD fine-grained parallelism has been developed, decoupling the problem into separate computational domains. For MOSFET simulation, this novel mapping allows estimated speeds of over 200,000 scatterings processed per second on a 65,536 processor Connection Machine, nearly a factor of six over the fastest known to date.
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> F. Venturi, et. al. </editor> <booktitle> IEEE Transactions on Computer-Aided Design, </booktitle> <month> April, </month> <year> 1989. </year>
Reference-contexts: However, its computational complexity is so high today that its practical use is out of the question. Attempts at coarse-grained parallelism and vectorization have been performed previously <ref> [1] </ref>,[2],[3]. For the simulation of MOSFET's, speeds of 15,000-30,000 scattering events processed per second on a single processor CRAY-XMP are reported [1]. Though good for two-dimensional simulation, the computational speeds attained are not satisfactory due to the complexity of three-dimensional Monte Carlo. We propose the use of massive data-level parallelism to solve this problem. <p> In Table 1, a comparison among different communication relays is reported. Here, the overhead associated with communications across VP sets is small. 3 Description of the Simulator Our simulator addresses the problem of static-field Monte Carlo. We have included the scattering mechanisms used in <ref> [1] </ref>, while the electric field is provided by a 3D drift-diffusion simulator running on the CM [5]. 3.1 Algorithmic Mapping In a parallel computing environment, the execution time stems from two sources: computational cost and communications cost. In a massively parallel paradigm, the latter cost becomes significant, if not dominant.
Reference: [2] <author> W. R. Martin and F. B. </author> <title> Brown. </title> <journal> The International Journal of Supercomputer Applications, </journal> <volume> Volume 1, Number 2. </volume>
Reference: [3] <author> D. Cheng, et. </author> <title> al. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <month> September, </month> <year> 1988. </year>
Reference: [4] <author> D. Hillis. </author> <title> The Connection Machine, </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1985. </year>
Reference-contexts: We propose the use of massive data-level parallelism to solve this problem. Specifically, we present an approach, implemented on the Connection Machine 1 , that significantly improves the CPU times required by three-dimensional Monte Carlo simulation on other architectures. 2 Computational Model The Connection Machine <ref> [4] </ref> is a massively parallel SIMD computing system. The CM is based a data directed computational model. In this model, the processing units and the memory are associated together in one unit, rather than as separate entities. Thus, the potential bandwidth is increased significantly. A fully-configured system contains 65,536 processors. <p> In generalized communications, the data is routed along the edges of the hypercube. For an n-dimensional cube, no two points are more than distance n apart (for a full CM, n=12). Conflicts in routing are resolved through the hardware router <ref> [4] </ref>. In near-neighbor communications, data is transferred between neighbors. Since all processors communicate in the same direction, there are no routing conflicts. Furthermore, the distance to the destination is minimum, not requiring any intermediate routing of data. In Table 1, a comparison among different communication relays is reported.
Reference: [5] <author> D. Webber, E. Tomacruz, R. Guerrieri, T. Toyabe, A. </author> <title> Sangiovanni-Vincentelli, </title> <booktitle> Proc. of NUPAD 1990. </booktitle>
Reference-contexts: Here, the overhead associated with communications across VP sets is small. 3 Description of the Simulator Our simulator addresses the problem of static-field Monte Carlo. We have included the scattering mechanisms used in [1], while the electric field is provided by a 3D drift-diffusion simulator running on the CM <ref> [5] </ref>. 3.1 Algorithmic Mapping In a parallel computing environment, the execution time stems from two sources: computational cost and communications cost. In a massively parallel paradigm, the latter cost becomes significant, if not dominant.
Reference: [6] <author> J. Hennessy and D. Patterson. </author> <title> Computer Architecture: A Quantitative Approach. </title> <publisher> Morgan-Kaufmann, </publisher> <year> 1990. </year>
Reference: [7] <author> C. Jacoboni and P. Lugli. </author> <title> The Monte Carlo Method for Semiconductor Device Simulation. </title> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: As presented earlier, the overhead of communications between the two domains is small, since this amounts to communications between VP sets (Table 1). 3.2 Computation of the flight time The usual technique used to compute the flight time is based on an improved self-scattering approach <ref> [7] </ref>. While easy to implement, this technique suffers the problem of finding a reasonable definition of the self-scattering term, which should be physically correct and at the same time computationally efficient.
Reference: [8] <editor> D. Douglas, et. al. </editor> <title> The Architecture of the CM-2 Data Processor, </title> <institution> Thinking Machines Corporation Technical Report HA88-1. </institution>
Reference: [9] <author> D. Hillis and G. </author> <title> Steele. </title> <journal> Communications of the ACM, </journal> <month> December, </month> <year> 1986. </year>
Reference: [10] <author> C. Stanfill. </author> <title> Communications Architecture in the Connection Machine System, </title> <institution> Thinking Machines Corporation Technical Report HA87-3. </institution>
Reference-contexts: Also, multiple VP sets can be implemented, where each VP set can be composed of a different number of virtual processors (the Virtual Processor Ratio, or VPR). The CM communications architecture is configured in a hypercube network <ref> [10] </ref>. There are two mechanisms of data routing in the Connection Machine: generalized and near-neighbor. In generalized communications, the data is routed along the edges of the hypercube. For an n-dimensional cube, no two points are more than distance n apart (for a full CM, n=12).
Reference: [11] <author> E. Sangiorgi, B. Ricco, and F. </author> <title> Venturi, </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <month> February, </month> <year> 1988. </year>
Reference-contexts: In fact, an efficient definition of the self-scattering term requires a good knowledge of the highest energy reached by any particle at each location. However, since this is a result of the simulation, difficult trade-offs are required <ref> [11] </ref>, [12]. An estimate of , the scattering probability must be made. If this is too small, the flight must be repeated, increasing each time, until it is large enough. Overestimation of will result in excessively short flight times, leading to computational inefficiency.
Reference: [12] <author> C. </author> <title> Moglestue, </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <month> April, </month> <year> 1986. </year>
Reference-contexts: In fact, an efficient definition of the self-scattering term requires a good knowledge of the highest energy reached by any particle at each location. However, since this is a result of the simulation, difficult trade-offs are required [11], <ref> [12] </ref>. An estimate of , the scattering probability must be made. If this is too small, the flight must be repeated, increasing each time, until it is large enough. Overestimation of will result in excessively short flight times, leading to computational inefficiency.
References-found: 12

