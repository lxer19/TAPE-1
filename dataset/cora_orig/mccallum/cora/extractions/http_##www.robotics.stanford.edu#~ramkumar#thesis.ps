URL: http://www.robotics.stanford.edu/~ramkumar/thesis.ps
Refering-URL: http://www.robotics.stanford.edu/~ramkumar/
Root-URL: http://www.robotics.stanford.edu
Title: TRACINGS AND THEIR CONVOLUTION: THEORY AND APPLICATIONS  
Author: G.D. Ramkumar 
Degree: a dissertation submitted to the department of computer science and the committee on graduate studies of stanford university in partial fulfillment of the requirements for the degree of doctor of philosophy By  
Date: March 1998  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> P. K. Agarwal. </author> <title> Partitioning arrangements of lines: I. An efficient deterministic algorithm. </title> <journal> Discrete Comput. Geom., </journal> <volume> 5 </volume> <pages> 449-483, </pages> <year> 1990. </year>
Reference-contexts: A closed curve, however, is not a set of points as was defined by the boundary operation. It is a continuous map : <ref> [0; 1] </ref> ! E 2 , so that at any point, there is a direction of traversal that is given. This direction of traversal is essential information in the proof of the theorem.
Reference: [2] <author> P. K. Agarwal. </author> <title> Partitioning arrangements of lines: II. </title> <journal> Applications. Discrete Comput. Geom., </journal> <volume> 5 </volume> <pages> 533-573, </pages> <year> 1990. </year>
Reference-contexts: Hive graphs allow efficient queries of the form | a) in which interval, if any, is angle in a hive graph h? and b) which intervals does a given interval <ref> [ 1 ; 2 ] </ref> intersect with in a hive graph h. For each move of ^ P , with say slope , the algorithm makes queries of the form | which intervals is angle in the hive graph h Q . <p> In order to find turns of the convolution we make queries of type b) as follows. For each turn of ^ P with slope set <ref> [ 1 ; 2 ] </ref> query the interval [ 1 ; 2 ] versus the hive graph h Q . The responses constitute convolution turns of the form "turn of ^ P + turn of ^ Q". <p> In order to find turns of the convolution we make queries of type b) as follows. For each turn of ^ P with slope set <ref> [ 1 ; 2 ] </ref> query the interval [ 1 ; 2 ] versus the hive graph h Q . The responses constitute convolution turns of the form "turn of ^ P + turn of ^ Q". This query could have been performed vice-versa (turn of ^ P versus hive graph of Q) with the same result. <p> For this latter problem, Guibas, Overmars, and Sharir [69] gave a randomized O (n 4=3+* ) solution using partitioning techniques (what has since become known as cuttings; derandomization tools developed later can also be applied). Agarwal <ref> [2] </ref> adapted this technique to the red-blue version of the problem, lowering the running time to O (n 4=3 log n+k) for reporting and obtained a method for counting in time O (n 4=3 log n) as well, at the cost of increasing the space requirement to fi (n 4=3 ). <p> Some of the algorithms described above are essentially combinatorial [25, 99, 6, 43], and work as well if the line segments are replaced by x-monotone algebraic arcs of bounded degree. Others <ref> [34, 37, 2] </ref> make a more essential use of the affine structure of the input and cannot be so adapted. <p> The spurious intersections generated by the spanning trees cause a total running time of O ((n r p p General case in linear space. In order to solve the general red-blue intersection problem in linear space, the cuttings technique of <ref> [69, 2] </ref> can be applied, but the running time becomes O (n 4=3+* + k). The * term can be made as small as desired, but at the cost of a increased hidden constant in the space bounds.
Reference: [3] <author> P. K. Agarwal, M. de Berg, J. Matousek, and O. Schwarzkopf. </author> <title> Constructing levels in arrangements and higher order Voronoi diagrams. </title> <booktitle> In Proc. 10th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 67-75, </pages> <year> 1994. </year>
Reference: [4] <author> P. K. Agarwal, D. Eppstein, and J. Matousek. </author> <title> Dynamic half-space reporting, geometric optimization, and minimum spanning trees. </title> <booktitle> In Proc. 33rd Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 80-89, </pages> <year> 1992. </year>
Reference: [5] <author> P. K. Agarwal and J. Matousek. </author> <title> Ray shooting and parametric search. </title> <journal> SIAM J. Comput., </journal> <volume> 22(4) </volume> <pages> 794-806, </pages> <year> 1993. </year>
Reference: [6] <author> P. K. Agarwal and M. Sharir. </author> <title> Red-blue intersection detection algorithms, with applications to motion planning and collision detection. </title> <booktitle> In Proc. 4th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 70-80, </pages> <year> 1988. </year> <note> 115 116 BIBLIOGRAPHY </note>
Reference-contexts: This condition often pertains in situations where the purple intersection problem itself arises (e.g., in the overlay of line arrangements, or of simply-connected planar subdivisions though in the latter case the disjoint methods above apply). Under the hypothesis of connectedness, Agarwal and Sharir <ref> [6] </ref> looked at the problem of detecting a single purple intersection. <p> Using the recent randomized algorithm of Chazelle et al. [37] to compute a single-face, a purple intersection is detected in time O (nff (n) log n), where ff (n) is the slowly growing inverse of Ackermann's function. Some of the algorithms described above are essentially combinatorial <ref> [25, 99, 6, 43] </ref>, and work as well if the line segments are replaced by x-monotone algebraic arcs of bounded degree. Others [34, 37, 2] make a more essential use of the affine structure of the input and cannot be so adapted. <p> Using HeapSweep, we obtain a O ((n 4=3 + k)ff (n) log 3 n) algorithm to report all intersections in the general case, with a linear space cost that has a small implied constant. This can be done by preprocessing the input to identify connected subsets of segments (see <ref> [69, 6] </ref>), on which it is then possible to use the variation of HeapSweep for known components mentioned above. Details are omitted. j-level.
Reference: [7] <author> P. K. Agarwal and M. Sharir. </author> <title> Red-blue intersection detection algorithms, with applications t o motion planning and collision detection. </title> <journal> SIAM J. Comput., </journal> <volume> 19(2) </volume> <pages> 297-321, </pages> <year> 1990. </year>
Reference: [8] <author> Pankaj K. Agarwal, H. Edelsbrunner, O. Schwarzkopf, and E. Welzl. </author> <title> Euclidean minimum spanning trees and bichromatic closest pairs. </title> <journal> Discrete Comput. Geom., </journal> <volume> 6(5) </volume> <pages> 407-422, </pages> <year> 1991. </year>
Reference-contexts: and at least n p ` vertical segments adding up to a minimum total length of at least (m + n) p ` of any set of interconnecting paths (this can be seen from the fact that the interconnecting paths form a minimum spanning tree on the cycles | see <ref> [8] </ref> for lower bounds on the path length of minimum spanning trees). Figure 2.14 shows an example of a spanning tree that connects the cycles in this configuration.
Reference: [9] <author> A. V. Aho, J. E. Hopcroft, and J. D. Ullman. </author> <title> Data Structures and Algorithms. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1983. </year>
Reference-contexts: We define the cost of the regularization to be the total number of intersections (`cuts') between segments of R and the selected threads. To analyze this cost, we use a lemma reminiscent of the classical analysis of the Union-Find <ref> [9] </ref> algorithm: Lemma 4.4. Let T be a tree and denote the left (resp. right) child of a node by`(-) (resp. r (-)). Each node is given a (possibly negative) integer weight w -.
Reference: [10] <author> C. Aragon and R. Seidel. </author> <title> Randomized search trees. </title> <booktitle> In Proc. 30th Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 540-545, </pages> <year> 1989. </year>
Reference-contexts: If each object in a set is given two numbers, a rank and a priority, there is a unique binary tree which is both a search tree on the ranks and a heap on the priorities. Such a tree is well-known and called a treap - Aragon and Seidel <ref> [10] </ref> used it to create their popular randomized search tree data structure, which is a treap on objects with a given rank and a randomly assigned priority. The randomization guarantees that this structure is balanced with high probability.
Reference: [11] <author> E. M. Arkin, L. P. Chew, D. P. Huttenlocher, K. Kedem, and J. S. B. Mitchell. </author> <title> An efficiently computable metric for comparing polygonal shapes. </title> <journal> IEEE Trans. Pattern Anal. Mach. Intell., </journal> <volume> 13(3) </volume> <pages> 209-216, </pages> <year> 1991. </year>
Reference: [12] <author> B. Aronov and M. Sharir. </author> <title> Triangles in space or building (and analyzing) castles in the air. </title> <journal> Combinatorica, </journal> <volume> 10(2) </volume> <pages> 137-173, </pages> <year> 1990. </year>
Reference: [13] <author> B. Aronov and M. Sharir. </author> <title> On translational motion planning in 3-space. </title> <booktitle> In Proc. 10th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1994. </year>
Reference: [14] <author> M. J. Atallah. </author> <title> Some dynamic computational geometry problems. </title> <journal> Comput. Math. Appl., </journal> <volume> 11 </volume> <pages> 1171-1181, </pages> <year> 1985. </year>
Reference: [15] <author> F. Aurenhammer. </author> <title> A new duality result concerning Voronoi diagrams. </title> <journal> Discrete Com-put. Geom., </journal> <volume> 5 </volume> <pages> 243-254, </pages> <year> 1990. </year>
Reference-contexts: The notion of geometric duality was first developed in the algorithmic context by Chazelle, Guibas and Lee [38], and is an essential tool for algorithmic design in computational geometry <ref> [96, 15, 16, 50] </ref> Most of the results in this thesis have appeared as publications. Part of Chapter 1 appeared in the 12th Symposium on Computational Geometry [115]. Part of Chapter 3 appeared in the 2nd Workshop on Algorithmic Foundations of Robotics [23].
Reference: [16] <author> C. Bajaj and M. Li. </author> <title> On the duality of intersections and closest points. </title> <booktitle> In Proc. 21st Allerton Conf. Commun. Control Comput., </booktitle> <pages> pages 459-461, </pages> <year> 1983. </year> <note> BIBLIOGRAPHY 117 </note>
Reference-contexts: The notion of geometric duality was first developed in the algorithmic context by Chazelle, Guibas and Lee [38], and is an essential tool for algorithmic design in computational geometry <ref> [96, 15, 16, 50] </ref> Most of the results in this thesis have appeared as publications. Part of Chapter 1 appeared in the 12th Symposium on Computational Geometry [115]. Part of Chapter 3 appeared in the 2nd Workshop on Algorithmic Foundations of Robotics [23].
Reference: [17] <author> Chanderjit L. Bajaj and Myung-Soo Kim. </author> <title> Generation of configuration space obstacles: The case of moving algebraic curves. </title> <journal> Algorithmica, </journal> <volume> 4 </volume> <pages> 157-172, </pages> <year> 1989. </year>
Reference-contexts: Before this thesis almost nothing was known about the convolution operation for tracings in dimensions higher than two, except in the special case of convex bodies, where it is equivalent to the Minkowski sum; this case for 3-D polyhedral objects has been treated in <ref> [71, 17, 87, 119] </ref>. Unfortunately, the convex case is too special to suggest the proper extension of the concept of a tracing to three and higher dimensions.
Reference: [18] <author> J. Basch, L. Guibas, C. Silverstein, and L. Zhang. </author> <title> A practical evaluation of kinetic data structures. </title> <booktitle> In Proc. 13th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 388-390, </pages> <year> 1997. </year>
Reference-contexts: We will call such monochromatic intersection events processed by the algorithm internal to the corresponding kinetic queue. What makes the implementation of a kinetic queue challenging is the need to minimize the number of internal events processed. Kinetic data structures have received much attention recently in literature <ref> [20, 18, 19] </ref>.
Reference: [19] <author> J. Basch, L. Guibas, and L. Zhang. </author> <title> Proximity problems on moving points. </title> <booktitle> In Proc. 13th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 344-351, </pages> <year> 1997. </year>
Reference-contexts: We will call such monochromatic intersection events processed by the algorithm internal to the corresponding kinetic queue. What makes the implementation of a kinetic queue challenging is the need to minimize the number of internal events processed. Kinetic data structures have received much attention recently in literature <ref> [20, 18, 19] </ref>.
Reference: [20] <author> J. Basch, L. J. Guibas, and J. Hershberger. </author> <title> Data structure for mobile data. </title> <booktitle> In Proc. 8th ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 747-756, </pages> <month> January </month> <year> 1997. </year>
Reference-contexts: We will call such monochromatic intersection events processed by the algorithm internal to the corresponding kinetic queue. What makes the implementation of a kinetic queue challenging is the need to minimize the number of internal events processed. Kinetic data structures have received much attention recently in literature <ref> [20, 18, 19] </ref>. <p> However, no satisfactory bounds are known on the number of internal events needed to maintain such a structure during the sweep [22]. Instead, we describe two different implementations of kinetic queues <ref> [21, 20] </ref>, in which the number of internal events is within a log factor of the total number of objects present in the queue. We do not prove the correctness and running time of the kinetic queue implementations in this thesis; instead, we refer the reader to [21, 20]. <p> of kinetic queues <ref> [21, 20] </ref>, in which the number of internal events is within a log factor of the total number of objects present in the queue. We do not prove the correctness and running time of the kinetic queue implementations in this thesis; instead, we refer the reader to [21, 20]. The first implementation, called a heater, is randomized. The second, called a kinetic tournament, is deterministic. To define a heater, we proceed as follows. <p> The main results is as below: Lemma 4.2. <ref> [20] </ref> Let H be a kinetic tournament sweeping over s segments in the plane. The worst-case cost of the sweep is O (t Q sff (s) log s). 4.3.2 Economical polygon regularization Analyzing the complexity of Merge and Split operations requires some background.
Reference: [21] <author> J. Basch, L. J. Guibas, and G. D. Ramkumar. </author> <title> Reporting red-blue intersections between two sets of connected line segments. </title> <booktitle> In Proc. 4th Annu. European Sympos. Algorithms, volume 1136 of Lecture Notes Comput. Sci., </booktitle> <pages> pages 302-319. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Part of Chapter 1 appeared in the 12th Symposium on Computational Geometry [115]. Part of Chapter 3 appeared in the 2nd Workshop on Algorithmic Foundations of Robotics [23]. Part of Chapter 4 appeared in the 4th European Symposium on Algorithms <ref> [21] </ref>. An application for assembly planning is described in [118]. 18 CHAPTER 1. INTRODUCTION 1.3 Thesis overview In the second chapter of this thesis, we focus on the convolution of simple polygons in the plane. <p> However, no satisfactory bounds are known on the number of internal events needed to maintain such a structure during the sweep [22]. Instead, we describe two different implementations of kinetic queues <ref> [21, 20] </ref>, in which the number of internal events is within a log factor of the total number of objects present in the queue. We do not prove the correctness and running time of the kinetic queue implementations in this thesis; instead, we refer the reader to [21, 20]. <p> of kinetic queues <ref> [21, 20] </ref>, in which the number of internal events is within a log factor of the total number of objects present in the queue. We do not prove the correctness and running time of the kinetic queue implementations in this thesis; instead, we refer the reader to [21, 20]. The first implementation, called a heater, is randomized. The second, called a kinetic tournament, is deterministic. To define a heater, we proceed as follows. <p> However, when it moves from position 2 to 3 passing the intersection between parent-child pair b and d, a rotation is performed that swaps the priorities of b and d but otherwise preserves the inorder sequence. Lemma 4.1. <ref> [21] </ref> Let H be a heater sweeping over s segments in the plane. Denote by C (H) the number of intersections that cause an update of H. Then E [C (H)] = O (sff (s) log s). <p> We first examine the expected time complexity of the sweep of a set of segments by one heater. Then we perform a similar analysis for a tournament tree. Finally, we show how economical 96 CHAPTER 4. COMPUTATION OF POLYHEDRAL CONVOLUTION polygon regularization <ref> [21] </ref> can be used to chop all segments in pieces so as to reduce the analysis of the HeapSweep algorithm to that of a set of independent kinetic queues. <p> For clarity, the worst case update time of the main event queue Q is denoted by t Q (it is clear that this quantity is O (log n)). 4.3.1 Time bounds for kinetic queues Analysis of two Kinetic Queue implementations has been done in <ref> [21] </ref>. The main results is as below: Lemma 4.2. [20] Let H be a kinetic tournament sweeping over s segments in the plane.
Reference: [22] <author> J. Basch, L. J. Guibas, and G.D. Ramkumar. </author> <title> Sweeping lines and line segments with a heap. </title> <booktitle> In Proc. 13th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 469-471, </pages> <year> 1997. </year>
Reference-contexts: However, no satisfactory bounds are known on the number of internal events needed to maintain such a structure during the sweep <ref> [22] </ref>. Instead, we describe two different implementations of kinetic queues [21, 20], in which the number of internal events is within a log factor of the total number of objects present in the queue.
Reference: [23] <author> J. Basch, L.J. Guibas, G.D. Ramkumar, and L. Ramshaw. </author> <title> Polyhedral tracings and their convolution. </title> <booktitle> In Proc. 2nd Workshop on Algorithmic Foundations of Robotics, </booktitle> <year> 1996. </year>
Reference-contexts: Part of Chapter 1 appeared in the 12th Symposium on Computational Geometry [115]. Part of Chapter 3 appeared in the 2nd Workshop on Algorithmic Foundations of Robotics <ref> [23] </ref>. Part of Chapter 4 appeared in the 4th European Symposium on Algorithms [21]. An application for assembly planning is described in [118]. 18 CHAPTER 1. INTRODUCTION 1.3 Thesis overview In the second chapter of this thesis, we focus on the convolution of simple polygons in the plane. <p> At least, it seems that a better balancing of the query time and update time could be achieved with a redundant counter where the "2" is replaced by a base dependent on n. A theory of polyhedral tracings and their convolution is discussed in the next chapter <ref> [23] </ref>. An interesting question for polyhedral tracings is whether the relationship between the convolution and the Minkowski sum explored in this chapter can be extended to three dimensions, and whether a similar algorithm can be formulated to compute the outer face of the Minkowski sum.
Reference: [24] <author> J. Basch and L. Ramshaw. </author> <title> Orienting transverse fiber products. </title> <type> Manuscript. </type>
Reference-contexts: in Figures 2.1 and Figure 2.2. 2.1.1 Fiber product representation of the convolution A convenient way to visualize the convolution is to depict it as the fiber product FP (P; Q) defined as follows (we use the term fiber product informally here; for a precise and more detailed exposition, see <ref> [24] </ref>). Lay out the perimeter of P on the horizontal axis and the perimeter of Q on the vertical axis, and plot all pairs of boundary points that produce a state in the convolution (note that this representation collapses information about matching states in turns). <p> simply related to that of M B and M R ; for instance, the fiber product can have any number of components even if M B and M R are connected, (2) deriving a consistent local orientation rule for M Q is a non-trivial problem which is fully addressed in <ref> [24] </ref>. In this thesis, we limit ourselves to showing that the convolution operation for polyhedral tracing representations gives a consistent orientation rule, i.e. that the resulting object represents a manifold with consistent location and whisker maps.
Reference: [25] <author> J. L. Bentley and T. A. Ottmann. </author> <title> Algorithms for reporting and counting geometric intersections. </title> <journal> IEEE Trans. Comput., </journal> <volume> C-28:643-647, </volume> <year> 1979. </year>
Reference-contexts: COMPUTATION OF POLYHEDRAL CONVOLUTION The case where each input set is disjoint has been extensively studied. In the early days of computational geometry, Bentley and Ottmann <ref> [25] </ref> introduced their well-known line sweep algorithm, which reports all purple intersections in time O ((n+k) log n). Mairson and Stolfi [99] were the first to find an asymptotically optimal algorithm running in O (n log n+k) time. <p> Using the recent randomized algorithm of Chazelle et al. [37] to compute a single-face, a purple intersection is detected in time O (nff (n) log n), where ff (n) is the slowly growing inverse of Ackermann's function. Some of the algorithms described above are essentially combinatorial <ref> [25, 99, 6, 43] </ref>, and work as well if the line segments are replaced by x-monotone algebraic arcs of bounded degree. Others [34, 37, 2] make a more essential use of the affine structure of the input and cannot be so adapted.
Reference: [26] <author> Jules Bloomenthal and Ken Shoemake. </author> <title> Convolution surfaces. </title> <journal> Computer Graphics, </journal> <volume> 25(4) </volume> <pages> 251-256, </pages> <year> 1991. </year> <note> 118 BIBLIOGRAPHY </note>
Reference: [27] <author> E. Brisson. </author> <title> Representing geometric structures in d dimensions: Topology and order. </title> <booktitle> In Proc. 5th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 218-227, </pages> <year> 1989. </year>
Reference-contexts: Sometimes, as in the case of the polygon described above, only the boundary of the set is thus decomposed; this is the boundary description of the set. In three dimensions, several boundary descriptions have been proposed <ref> [73, 27] </ref>. Let us consider the two-dimensional case: it is easy to compute the boundary description 3 of the Minkowski sum of two convex polygons, given their respective boundary descriptions. <p> In this thesis, we generalized the theory of tracings to three dimensions. It remains to develop a theory of tracings for higher dimensions. There is scope for augmenting e.g. the cell tuple representation of higher-dimensional complexes <ref> [27] </ref> to create higher-dimensional tracings. However, the computational side is very challenging. For instance, in order to compute efficiently the convolution of two four-dimensional tracings, we would have to solve the following bichromatic problem: given a red and a blue family of triangles in space, compute all bichromatic edges.
Reference: [28] <author> K. Q. Brown. </author> <title> Comments on "Algorithms for reporting and counting geometric intersections". </title> <journal> IEEE Trans. Comput., </journal> <volume> C-30:147-148, </volume> <year> 1981. </year>
Reference: [29] <author> J. Canny. </author> <title> The Complexity of Robot Motion Planning. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1987. </year>
Reference-contexts: The scheme is doubly exponential in d. In the general setting, Canny <ref> [29] </ref> has since devised a more efficient method (called the road map method) that is only singly exponential in the dimension of the space.
Reference: [30] <author> T. M. Chan. </author> <title> A simple trapezoid sweep algorithm for reporting red/blue segme nt intersections. </title> <booktitle> In Proc. 6th Canad. Conf. Comput. Geom., </booktitle> <pages> pages 263-268, </pages> <year> 1994. </year>
Reference-contexts: RELATED WORK 17 reduces to the problem of computing the overlay of two convex subdivisions of the plane. Since the result of Guibas and Seidel [71], a few interesting methods were found with practical improvements <ref> [30, 61] </ref>. In Computer Aided Design, a popular representation of solids is via their Constructive Solid Geometry (or CSG) representation.
Reference: [31] <author> B. Chazelle. </author> <title> Filtering search: a new approach to query-answering. </title> <journal> SIAM J. Comput., </journal> <volume> 15 </volume> <pages> 703-724, </pages> <year> 1986. </year>
Reference-contexts: COMPUTATION OF POLYHEDRAL CONVOLUTION Guibas [54] or Mairson and Stolfi [99], which relax the horizontal ordering of the sweep. The bounds we obtained also give hope that a filtering search technique <ref> [31] </ref> coupled with geometric partitioning could achieve an optimal O (n log n + k) running time (in a sense, HeapSweep is an instance of filtering search as it detects more intersections than necessary but not too many more).
Reference: [32] <author> B. Chazelle. </author> <title> Reporting and counting segment intersections. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 32 </volume> <pages> 156-182, </pages> <year> 1986. </year>
Reference: [33] <author> B. Chazelle. </author> <title> An optimal algorithm for intersecting three-dimensional convex polyhedra. </title> <journal> SIAM J. Comput., </journal> <volume> 21(4) </volume> <pages> 671-696, </pages> <year> 1992. </year>
Reference: [34] <author> B. Chazelle and H. Edelsbrunner. </author> <title> An optimal algorithm for intersecting line segments in the plane. </title> <journal> J. ACM, </journal> <volume> 39 </volume> <pages> 1-54, </pages> <year> 1992. </year>
Reference-contexts: The same optimal time bound for reporting purple intersections was achieved later by several different methods <ref> [34, 36, 43, 113] </ref>. Especially worthy of mention among these is the hereditary segment tree data structure of Chazelle, Edelsbrunner, Guibas, and Sharir [36], which can also be used to count all purple intersections in O (n log n) time. <p> Some of the algorithms described above are essentially combinatorial [25, 99, 6, 43], and work as well if the line segments are replaced by x-monotone algebraic arcs of bounded degree. Others <ref> [34, 37, 2] </ref> make a more essential use of the affine structure of the input and cannot be so adapted.
Reference: [35] <author> B. Chazelle, H. Edelsbrunner, M. Grigni, L. Guibas, J. Hershberger, M. Sharir, and J. Snoeyink. </author> <title> Ray shooting in polygons using geodesic triangulations. </title> <booktitle> In Proc. 18th Internat. Colloq. Automata Lang. Program., volume 510 of Lecture Notes in Computer Science, </booktitle> <pages> pages 661-673. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: The key idea is to detect self-intersections and to excise the loops thus formed in the convolution. To detect self-intersections, we provide a novel scheme for performing ray-shooting against a dynamic polygonal line, using the geodesic triangulation structure of <ref> [35] </ref>. Our scheme relies on dividing the polygonal line into blocks of contiguous segments and storing a geodesic triangulation for each block. Ray-shooting queries are answered in amortized time O (log 2 k), where k is the size of the polygonal line. <p> We describe the algorithm in more detail below and show that it correctly computes the outer boundary of a cycle. We then show how the geodesic triangulation data structure of <ref> [35] </ref> can be adapted for efficient dynamic ray-shooting towards a growing simple polygonal chain. and the middle and right pictures show excised clockwise and counterclockwise loops in dotted lines. 2.2.1 Description of the algorithm The algorithm works as follows: start from an outer vertex and grow the chain one edge at <p> In this section we present a method to do this that uses multiple copies of a static ray-shooting data structure. A geodesic triangulation based ray-shooting data structure for a simple polygon in the plane was presented in <ref> [35] </ref>. The data structure is computed in linear time and supports ray-shooting queries in O (log k) time where k is the size of the polygon.
Reference: [36] <author> B. Chazelle, H. Edelsbrunner, L. Guibas, and M. Sharir. </author> <title> Algorithms for bichromatic line segment problems and polyhedral terrains. </title> <journal> Algorithmica, </journal> <volume> 11 </volume> <pages> 116-132, </pages> <year> 1994. </year> <note> BIBLIOGRAPHY 119 </note>
Reference-contexts: The same optimal time bound for reporting purple intersections was achieved later by several different methods <ref> [34, 36, 43, 113] </ref>. Especially worthy of mention among these is the hereditary segment tree data structure of Chazelle, Edelsbrunner, Guibas, and Sharir [36], which can also be used to count all purple intersections in O (n log n) time. <p> The same optimal time bound for reporting purple intersections was achieved later by several different methods [34, 36, 43, 113]. Especially worthy of mention among these is the hereditary segment tree data structure of Chazelle, Edelsbrunner, Guibas, and Sharir <ref> [36] </ref>, which can also be used to count all purple intersections in O (n log n) time. Thus, in the disjoint case, asymptotically optimal and practical algorithms are known. <p> There doesn't seem to be any hope of adapting HeapSweep to solve the counting problem efficiently. The hereditary segment-tree approach <ref> [36] </ref> used to obtain an optimal algorithm for counting purple intersections in the disjoint case cannot be adapted either, since segment tree nodes may have a disconnected set of segments.
Reference: [37] <author> B. Chazelle, H. Edelsbrunner, L. Guibas, M. Sharir, and J. Snoeyink. </author> <title> Computing a face in an arrangement of line segments and related problems. </title> <journal> SIAM J. Comput., </journal> <volume> 22 </volume> <pages> 1286-1302, </pages> <year> 1993. </year>
Reference-contexts: We use an algorithm presented in [71] to compute the convolution of planar polygonal tracings in optimal time O (m + n + k). The outer face of the Minkowski sum can be computed by applying the general algorithm of <ref> [37] </ref> to compute a single face in an arrangement of k line segments in time O (kff (k) log k). It is shown in [78] that the complexity of a single face in the Minkowski sum can in fact be fi (mnff (mn)) in the worst case. <p> If the blue and red segment sets are connected, the set of purple intersections is non-empty iff the boundaries of F and F 0 intersect, and this can be tested via a Bentley-Ottmann sweep. Using the recent randomized algorithm of Chazelle et al. <ref> [37] </ref> to compute a single-face, a purple intersection is detected in time O (nff (n) log n), where ff (n) is the slowly growing inverse of Ackermann's function. <p> Some of the algorithms described above are essentially combinatorial [25, 99, 6, 43], and work as well if the line segments are replaced by x-monotone algebraic arcs of bounded degree. Others <ref> [34, 37, 2] </ref> make a more essential use of the affine structure of the input and cannot be so adapted.
Reference: [38] <author> B. Chazelle, L. J. Guibas, and D. T. Lee. </author> <title> The power of geometric duality. </title> <journal> BIT, </journal> <volume> 25 </volume> <pages> 76-90, </pages> <year> 1985. </year>
Reference-contexts: Indeed, the extended boundary representation of polygons by Guibas et al. [70] has a well-defined geometric dual in the two-sided projective plane. The notion of geometric duality was first developed in the algorithmic context by Chazelle, Guibas and Lee <ref> [38] </ref>, and is an essential tool for algorithmic design in computational geometry [96, 15, 16, 50] Most of the results in this thesis have appeared as publications. Part of Chapter 1 appeared in the 12th Symposium on Computational Geometry [115].
Reference: [39] <author> B. Chazelle and E. Welzl. </author> <title> Quasi-optimal range searching in spaces of finite VC-dimension. </title> <journal> Discrete Comput. Geom., </journal> <volume> 4 </volume> <pages> 467-489, </pages> <year> 1989. </year>
Reference: [40] <author> S. W. Cheng and R. Janardan. </author> <title> Space-efficient ray shooting and intersection searching: algorithms, </title> <booktitle> dynamization and applications. In Proc. 2nd ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 7-16, </pages> <year> 1991. </year>
Reference: [41] <author> L. P. Chew and K. Kedem. </author> <title> A convex polygon among polygonal obstacles: Placement and high-clearance motion. </title> <journal> Comput. Geom. Theory Appl., </journal> <volume> 3 </volume> <pages> 59-89, </pages> <year> 1993. </year>
Reference: [42] <author> K. L. Clarkson. </author> <title> Randomized geometric algorithms. </title> <editor> In D.-Z. Du and F. K. Hwang, editors, </editor> <booktitle> Computing in Euclidean Geometry, volume 1 of Lecture Notes Series on Computing, </booktitle> <pages> pages 117-162. </pages> <publisher> World Scientific, </publisher> <address> Singapore, </address> <year> 1992. </year>
Reference: [43] <author> K. L. Clarkson and P. W. Shor. </author> <title> Applications of random sampling in computational geometry, II. </title> <journal> Discrete Comput. Geom., </journal> <volume> 4 </volume> <pages> 387-421, </pages> <year> 1989. </year>
Reference-contexts: The same optimal time bound for reporting purple intersections was achieved later by several different methods <ref> [34, 36, 43, 113] </ref>. Especially worthy of mention among these is the hereditary segment tree data structure of Chazelle, Edelsbrunner, Guibas, and Sharir [36], which can also be used to count all purple intersections in O (n log n) time. <p> Using the recent randomized algorithm of Chazelle et al. [37] to compute a single-face, a purple intersection is detected in time O (nff (n) log n), where ff (n) is the slowly growing inverse of Ackermann's function. Some of the algorithms described above are essentially combinatorial <ref> [25, 99, 6, 43] </ref>, and work as well if the line segments are replaced by x-monotone algebraic arcs of bounded degree. Others [34, 37, 2] make a more essential use of the affine structure of the input and cannot be so adapted.
Reference: [44] <author> R. Cole, M. Sharir, and C. K. Yap. </author> <title> On k-hulls and related problems. </title> <journal> SIAM J. Comput., </journal> <volume> 16 </volume> <pages> 61-77, </pages> <year> 1987. </year>
Reference-contexts: This generalizes the results of Edelsbrunner and Welzl [57], who computed the j-level of an arrangement of line segments in O ((n + k) log 2 n) time using a line sweep technique that can be retroactively be seen as a precursor of HeapSweep. Cole, Sharir, and Yap <ref> [44] </ref> improved these bounds to O ((n + k) log 2 j). Both methods mentioned above use the data structure of Overmars and van Leeu-ven [111] for dynamic maintenance of a convex hull with insertions and deletion at a cost of O (log 2 n) per operation.
Reference: [45] <author> G.E. Collins. </author> <title> Quantifier elimination for real closed fields by cylindrical algebraic decomposition. </title> <booktitle> In Lecture notes in computer science, </booktitle> <volume> volume 33, </volume> <pages> pages 135-183. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1975. </year>
Reference-contexts: INTRODUCTION 1.2 Related work In a series of three papers known as the Piano Movers series [122, 123, 124], Schwartz and Sharir introduced the idea of configuration spaces in motion planning. In [123], they adapted a general method of Collins <ref> [45] </ref> to obtain a cell decomposition (called a cylindrical decomposition) of the free space of a robot with arbitrary degrees of freedom, based on the decomposition of arrangements of algebraic surfaces in d dimensions. The scheme is doubly exponential in d.
Reference: [46] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1990. </year> <note> 120 BIBLIOGRAPHY </note>
Reference: [47] <author> M. de Berg. </author> <type> Personal communication. </type> <year> 1996. </year>
Reference-contexts: Mark de Berg pointed out that this data structure can also be used in HeapSweep, replacing the kinetic queue and giving an improved O ((n + k) log 3 n) algorithm for reporting the k purple intersections between n red and blue line segments <ref> [47] </ref>. 4.6. CONCLUSION 109 4.6 Conclusion We have presented a new algorithm, HeapSweep, to report all purple intersections between red and blue possibly intersecting line segments on the plane. HeapSweep is a variation of the line sweep method that stores only a partial ordering of segments on the sweep line.
Reference: [48] <author> M. de Berg, K. Dobrindt, and O. Schwarzkopf. </author> <title> On lazy randomized incremental construction. </title> <booktitle> In Proc. 26th Annu. ACM Sympos. Theory Comput., </booktitle> <pages> pages 105-114, </pages> <year> 1994. </year>
Reference: [49] <author> M. de Berg and O. Schwarzkopf. </author> <title> Cuttings and applications. </title> <type> Report RUU-CS-92-26, </type> <institution> Dept. Comput. Sci., Utrecht Univ., </institution> <address> Utrecht, Netherlands, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: in these time bounds is unlikely, as the general case falls within a class of problems at least as hard as Hopcroft's problem of detecting an incidence between a set of n points and a set of n lines; the fastest known algorithm for Hopcroft's problem is due to Matousek <ref> [49, 102] </ref>, and runs in O (n 4=3 2 O (log fl n) ) 4.1. INTERSECTION PROBLEMS 89 time. For a certain general class of algorithms, a lower bound of (n 4=3 ) for this problem was recently given by Erickson [59].
Reference: [50] <author> O. Devillers, S. Meiser, and M. Teillaud. </author> <title> The space of spheres, a geometric tool to unify duality results on Voronoi diagrams. </title> <booktitle> In Proc. 4th Canad. Conf. Comput. Geom., </booktitle> <pages> pages 263-268, </pages> <year> 1992. </year>
Reference-contexts: The notion of geometric duality was first developed in the algorithmic context by Chazelle, Guibas and Lee [38], and is an essential tool for algorithmic design in computational geometry <ref> [96, 15, 16, 50] </ref> Most of the results in this thesis have appeared as publications. Part of Chapter 1 appeared in the 12th Symposium on Computational Geometry [115]. Part of Chapter 3 appeared in the 2nd Workshop on Algorithmic Foundations of Robotics [23].
Reference: [51] <author> D. Dobkin, J. Hershberger, D. Kirkpatrick, and S. Suri. </author> <title> Implicitly searching convolutions and computing depth of collision. </title> <booktitle> In Proc. 1st Annu. SIGAL Internat. Sym-pos. Algorithms, volume 450 of Lecture Notes in Computer Science, </booktitle> <pages> pages 165-180. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference: [52] <author> D. Dobkin, J. Hershberger, D. Kirkpatrick, and S. Suri. </author> <title> Computing the intersection-depth of polyhedra. </title> <journal> Algorithmica, </journal> <volume> 9 </volume> <pages> 518-33, </pages> <year> 1993. </year>
Reference: [53] <author> H. Edelsbrunner. </author> <title> Algebraic decomposition of non-convex polyhedra. </title> <type> Technical report, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <month> 95. </month>
Reference: [54] <author> H. Edelsbrunner and L. J. Guibas. </author> <title> Topologically sweeping an arrangement. </title> <journal> J. Com-put. Syst. Sci., </journal> <volume> 38 </volume> <pages> 165-194, </pages> <year> 1989. </year> <note> Corrigendum in 42 (1991), 249-251. </note>
Reference-contexts: In order to reduce this overhead, it would be nice to integrate our technique, which relaxes the vertical ordering of the sweep line, with the methods of Edelsbrunner and 110 CHAPTER 4. COMPUTATION OF POLYHEDRAL CONVOLUTION Guibas <ref> [54] </ref> or Mairson and Stolfi [99], which relax the horizontal ordering of the sweep.
Reference: [55] <author> H. Edelsbrunner, L. J. Guibas, and M. Sharir. </author> <title> The complexity and construction of many faces in arrangements o f lines and of segments. </title> <journal> Discrete Comput. Geom., </journal> <volume> 5 </volume> <pages> 161-196, </pages> <year> 1990. </year>
Reference: [56] <author> H. Edelsbrunner and E. P. Mucke. </author> <title> Simulation of simplicity: a technique to cope with degenerate cases in geometric algorithms. </title> <journal> ACM Trans. Graph., </journal> <volume> 9 </volume> <pages> 66-104, </pages> <year> 1990. </year> <note> BIBLIOGRAPHY 121 </note>
Reference-contexts: COMPUTATION OF POLYHEDRAL CONVOLUTION 4.2 The HeapSweep algorithm We assume that the input is non-degenerate, i.e. that all end segment points and intersections occur at distinct x values. Standard perturbation techniques can be used to guarantee that this is always the case <ref> [56] </ref>. In the traditional Bentley-Ottmann line sweep, a balanced search tree is used to represent the state of the sweep line. This search tree stores the exact top-to-bottom ordering of the line segments intersecting the sweep line.
Reference: [57] <author> H. Edelsbrunner and E. Welzl. </author> <title> Constructing belts in two-dimensional arrangements with applications. </title> <journal> SIAM J. Comput., </journal> <volume> 15 </volume> <pages> 271-284, </pages> <year> 1986. </year>
Reference-contexts: This generalizes the results of Edelsbrunner and Welzl <ref> [57] </ref>, who computed the j-level of an arrangement of line segments in O ((n + k) log 2 n) time using a line sweep technique that can be retroactively be seen as a precursor of HeapSweep.
Reference: [58] <author> Herbert Edelsbrunner. </author> <title> Algebraic decompositions of non-convex polyhedra. </title> <booktitle> In Proc. 36th Annu. IEEE Sympos. </booktitle> <institution> Found. Comput. Sci., </institution> <note> page To appear, </note> <year> 1995. </year>
Reference-contexts: These operations can be expressed as algebraic sums of characteristic functions. To compute the convolution of two solids represented in CSG, we can use the bilinearity of the convolution, and obtain readily a CSG representation of the convolution. Moreover, Edelsbrunner <ref> [58] </ref> shows how to convert the boundary representation of a polytope into its CSG representation, or, more precisely, how to represent the characteristic function of a polytope given by its boundary as an algebraic sum of characteristic functions of a linear number of convex polytopes.
Reference: [59] <author> Jeff Erickson. </author> <title> New lower bounds for Hopcroft's problem. </title> <booktitle> In Proc. 11th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 127-137, </pages> <year> 1995. </year>
Reference-contexts: INTERSECTION PROBLEMS 89 time. For a certain general class of algorithms, a lower bound of (n 4=3 ) for this problem was recently given by Erickson <ref> [59] </ref>. Given this situation, we were motivated to seek additional conditions which make easier the task of reporting the purple intersections. A natural condition is that of connectedness for each of the monochromatic inputs, as introduced above.
Reference: [60] <author> R. C. Evans, G. Koppelman, and V. T. Rajan. </author> <title> Shaping geometric objects by cumulative translational sweeps. </title> <journal> IBM J. Res. Develop., </journal> <volume> 31 </volume> <pages> 343-360, </pages> <year> 1987. </year>
Reference: [61] <author> Ulrich Finke and Klaus Hinrichs. </author> <title> Overlaying simply connected planar subdivisions in linear time. </title> <booktitle> In Proc. 11th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 119-126, </pages> <year> 1995. </year>
Reference-contexts: RELATED WORK 17 reduces to the problem of computing the overlay of two convex subdivisions of the plane. Since the result of Guibas and Seidel [71], a few interesting methods were found with practical improvements <ref> [30, 61] </ref>. In Computer Aided Design, a popular representation of solids is via their Constructive Solid Geometry (or CSG) representation.
Reference: [62] <author> P. K. Ghosh and S. P. Mudur. </author> <title> A computational theoretic framework for Minkowski addition and decomposition of boundary represented regions. </title> <type> Report ??, National Centre Softw. Develop. </type> <institution> Comput. Tech., Tata Inst. Fund. Res., Bombay, India, </institution> <year> 1985. </year>
Reference: [63] <author> Pijush K. Ghosh. </author> <title> Vision, Geometry, </title> <journal> and Minkowski Operators, </journal> <volume> volume 119. </volume> <year> 1991. </year>
Reference: [64] <author> M. T. Goodrich and R. Tamassia. </author> <title> Dynamic ray shooting and shortest paths via balanced geodesic triangulations. </title> <booktitle> In Proc. 9th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 318-327, </pages> <year> 1993. </year>
Reference-contexts: Ray-shooting queries are answered in amortized time O (log 2 k), where k is the size of the polygonal line. The problem of dynamic ray-shooting has been studied in a more general setting in <ref> [64] </ref>, where the authors obtain a worst-case time bound of O (log 2 n) for ray-shooting against a dynamic planar subdivision of size n. Our technique works only for polygonal lines, but it is simpler and 2.1. CONVOLUTION AND MINKOWSKI SUM 21 sufficient for our needs.
Reference: [65] <author> P. K. Gosh. </author> <title> A solution of polygon containment spatial planning and other related problems using Minkowski operators. Comput. Vision Graph. </title> <journal> Image Process., </journal> <volume> 49 </volume> <pages> 1-35, </pages> <year> 1990. </year>
Reference: [66] <author> R. H. Graham, D. E. Knuth, and O. Patashnik. </author> <title> Concrete Mathematics. </title> <publisher> Addison Wesley, </publisher> <year> 1989. </year> <note> 122 BIBLIOGRAPHY </note>
Reference: [67] <author> P. Gritzmann and B. Sturmfels. </author> <title> Minkowski addition of polytopes: Computational complexity and applications. </title> <journal> SIAM J. Discrete Math., </journal> <volume> 6 </volume> <pages> 246-269, </pages> <year> 1993. </year>
Reference-contexts: The simple polygon case is harder, first, because we have to consider all mn pairs of vertices to get new vertices of the obvious type; and, second, because there can be many more additional vertices (Figure 1.3). In the general case: Lemma 1.6. <ref> [67] </ref> Let P; Q be two simple polytopes in E d with m and n vertices respectively. Their Minkowski sum is of size fi (m d n d ) in the worst case. <p> Minkowski sums have been studied extensively in mathematical literature. Risler [117] studied the problem of placing curved polygons using Minkowski sums. Minkowski addition of polytopes was studied by Gritzmann and Sturmfels <ref> [67] </ref>. Kaul, et al. [85, 84] studied the computation of Minkowski sums in two and three dimensions using line and plane sweep methods. As we have seen above, the computation of the Minkowski sum of convex polyhedra 1.2.
Reference: [68] <author> Peter Gritzmann and Alexander Hufnagel. </author> <title> A polynomial time algorithm for Minkowski reconstruction. </title> <booktitle> In Proc. 11th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 1-9, </pages> <year> 1995. </year>
Reference: [69] <author> L. Guibas, M. Overmars, and M. Sharir. </author> <title> Intersecting line segments, ray shooting, and other applications of geometric partitioning techniques. </title> <booktitle> In Proc. 1st Scand. Workshop Algorithm Theory, volume 318 of Lecture Notes in Computer Science, </booktitle> <pages> pages 64-73. </pages> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: For certain inputs k 0 can be (n 2 ), while the desired output can be much smaller. This version of the problem seems to be of about the same difficulty as counting all segment intersections in a given family. For this latter problem, Guibas, Overmars, and Sharir <ref> [69] </ref> gave a randomized O (n 4=3+* ) solution using partitioning techniques (what has since become known as cuttings; derandomization tools developed later can also be applied). <p> The spurious intersections generated by the spanning trees cause a total running time of O ((n r p p General case in linear space. In order to solve the general red-blue intersection problem in linear space, the cuttings technique of <ref> [69, 2] </ref> can be applied, but the running time becomes O (n 4=3+* + k). The * term can be made as small as desired, but at the cost of a increased hidden constant in the space bounds. <p> Using HeapSweep, we obtain a O ((n 4=3 + k)ff (n) log 3 n) algorithm to report all intersections in the general case, with a linear space cost that has a small implied constant. This can be done by preprocessing the input to identify connected subsets of segments (see <ref> [69, 6] </ref>), on which it is then possible to use the variation of HeapSweep for known components mentioned above. Details are omitted. j-level.
Reference: [70] <author> L. J. Guibas, L. Ramshaw, and J. Stolfi. </author> <title> A kinetic framework for computational geometry. </title> <booktitle> In Proc. 24th Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 100-111, </pages> <year> 1983. </year>
Reference-contexts: The Minkowski sum has to be computed between all pairs of cells, and this introduces a quadratic cost in the computation. In order to address this problem, Guibas, Ramshaw and Stolfi <ref> [70] </ref> define an operation called convolution between polygon boundaries. More precisely, they define a class of objects called tracings, that includes boundaries of polygons, and show that this class equipped with the convolution operation has a rich algebraic structure that is also well suited for computational purposes. <p> The boundary is the same in all cases. In computational geometry, this distinction has never been made, although it is a natural one. When it comes to represent paintings, the situation worsens (Figure 1.4). In 1983, Guibas, Ramshaw, and Stolfi <ref> [70] </ref> introduced an extended boundary representation for polygons that can represent any 2-dimensional painting. Imagine that a car follows a certain trajectory in the plane, with, at every instant, a specific position and an orientation (a unit vector tangent to the trajectory). A pair (position, orientation) is called a state. <p> Tracings were introduced in <ref> [70] </ref> to augment the standard boundary representation of planar shapes via polygons or closed curves with certain additional information, to make them closed. <p> Historically, the ideas were discovered in the following sequence. Guibas, Ramshaw, and Stolfi <ref> [70] </ref> first formulated the convolution as an operation directly defined on boundaries. So as to make the definition independent of the representation, they defined a tracing as a multi-set of states. <p> The notion of convolution is closely related to that of geometric duality [131]. Indeed, the extended boundary representation of polygons by Guibas et al. <ref> [70] </ref> has a well-defined geometric dual in the two-sided projective plane. <p> We show how the structure of the convolution can be represented using a two-dimensional diagram called the fiber product, and propose a new algorithm to compute the outer face of the Minkowski sum from the convolution. In the third chapter, we extend the work of Guibas et al <ref> [70] </ref> to three-dimensions: we introduce a boundary representation of three-dimensional paintings, called polyhedral tracings that is well suited for computational purposes, and define the convolution operation based on this representation. <p> Section 2.4 concludes the chapter. 2.1 Convolution and Minkowski sum We recall briefly some terms introduced in the kinetic framework <ref> [70] </ref>. A state is a pair consisting of a position _s in the plane and a direction ~s. A move is a set of states with constant direction and position varying along a line segment parallel to the direction. <p> The winding number of a point with respect to a tracing has the traditional meaning. A detailed exposition of the meanings of these terms was presented in Chapter 1 (also <ref> [70] </ref>). Given a simple polygon P we denote as ^ P the tracing corresponding to a counterclockwise traversal of its boundary with the car always moving forward. Let P; Q be two simple polygons with corresponding tracings ^ P and ^ Q. <p> This alternative method is convenient and more efficient: it avoids the need to radix sort the moves and turns after finding them. 2.2. OUTER BOUNDARY OF A CONVOLUTION CYCLE 29 In the kinetic framework paper of <ref> [70] </ref> the authors show how to consistently assign positive and negative signs to the moves and turns of a tracing. We recall below the rules used to assign these signs. <p> To help motivate the extension of tracings to three dimensions, we briefly recall the kinetic framework for Computational Geometry in two dimensions <ref> [70] </ref>. The authors of [70] augment the standard boundary representation of planar shapes via polygons or closed curves with certain additional information, to make them into closed tracings. <p> To help motivate the extension of tracings to three dimensions, we briefly recall the kinetic framework for Computational Geometry in two dimensions <ref> [70] </ref>. The authors of [70] augment the standard boundary representation of planar shapes via polygons or closed curves with certain additional information, to make them into closed tracings. <p> A tracing in addition specifies the direction the car is facing at each point, and that direction must be along the tangent to the curve whenever the latter is defined. The combination of (location, direction) is called a state in <ref> [70] </ref>. The direction of the car is the crucial new component that allows the definition of the convolution operation and gives it its desirable properties. The convolution is defined as a fiber product in [70], by matching states from the two factor tracings with the same direction, and then assembling those <p> The combination of (location, direction) is called a state in <ref> [70] </ref>. The direction of the car is the crucial new component that allows the definition of the convolution operation and gives it its desirable properties. The convolution is defined as a fiber product in [70], by matching states from the two factor tracings with the same direction, and then assembling those into a tracing. <p> Disregarding the topology of tracings, and viewing them as bags of states as in <ref> [70] </ref>, we define a convolution operation exactly like in two dimensions: any two points x 2 M B ; y 2 M R define a state in the convolution only if their whiskers match. <p> POLYHEDRAL TRACINGS 65 Therefore, there is no need to explicitly represent edges in the tracing. This convention mirrors a similar one used for turns in two dimensions <ref> [70] </ref>. It get its full relevance from the open/closed interpretation of tracings. Indeed, with this choice, an edge adjacent to two closed faces is closed (i.e. the painting has the same value on the edge as in the polyhedron interior). An edge adjacent to two open faces is open. <p> We return to this issue in the next chapter, where we will address it in greater detail. Based on the fundamental theorem as described for convolutions of tracings in <ref> [70] </ref> and for convolutions of paintings in [121], we conclude that the winding number with respect to the convolution gives useful information with respect to the Minkowski sum of the inverted robot and the obstacle. Given two tracings their convolution corresponds to the painting convolution of the two corresponding paintings. <p> Conjecture 1 stated that the convolution satisfies the fundamental theorem that relates it to the intersection of the corresponding polyhedral paintings. The fundamental theorem of convolutions was proved for planar tracings in <ref> [70] </ref>. Proving the theorem for higher dimensions remains an important open problem. 114 CHAPTER 5. CONCLUSION In the case of a robot allowed only to translate in space, the notion of C-obstacle (the Minkowski difference between the obstacle and the robot) was advantageously replaced by the convolution.
Reference: [71] <author> L. J. Guibas and R. Seidel. </author> <title> Computing convolutions by reciprocal search. </title> <journal> Discrete Comput. Geom., </journal> <volume> 2 </volume> <pages> 175-193, </pages> <year> 1987. </year>
Reference-contexts: This solves the 3-dimensional problem for convex sets (but note that the complexity of the resulting polyhedron can be quadratic): Theorem 1.5. <ref> [71] </ref> Let P; Q be two convex polyhedra in E 3 represented by their boundaries with a total of n features. If their Minkowski sum has k features, it can be computed in 1.1. BACKGROUND 7 (c) Their Minkowski sum. optimal time fi (n + k). <p> This object is called the convolution for the following reason: Lemma 1.20. The painting corresponding to the convolution of two tracings is equal to the convolution of their two corresponding paintings. Moreover, we have an algorithmic result for non-convex polygons: Theorem 1.21. <ref> [71] </ref> The convolution of two tracings of total size n can be computed in O (n + k), where k is the size of the convolution. <p> As we have seen above, the computation of the Minkowski sum of convex polyhedra 1.2. RELATED WORK 17 reduces to the problem of computing the overlay of two convex subdivisions of the plane. Since the result of Guibas and Seidel <ref> [71] </ref>, a few interesting methods were found with practical improvements [30, 61]. In Computer Aided Design, a popular representation of solids is via their Constructive Solid Geometry (or CSG) representation. <p> PLANAR MINKOWSKI SUM OUTER FACE COMPUTATION Planar tracings were introduced as generalizations of ordinary polygons by Guibas, Ramshaw, and Stolfi <ref> [71] </ref> as part of the kinetic framework for computational geometry. Along with the notion of tracings they introduced the convolution operation that takes two tracings as inputs and produces a new tracing. <p> Note that the convolution is always of size O (mn), while the Minkowski sum can be of size fi (m 2 n 2 ) (Figure 1.3). We use an algorithm presented in <ref> [71] </ref> to compute the convolution of planar polygonal tracings in optimal time O (m + n + k). <p> CONVOLUTION AND MINKOWSKI SUM 27 contains two cycles and each cycle contributes to the outer face of the Minkowski sum. 28 CHAPTER 2. PLANAR MINKOWSKI SUM OUTER FACE COMPUTATION 2.1.3 Computing the convolution Guibas and Seidel <ref> [71] </ref> show how to compute the convolution of two simple polygonal tracings ^ P and ^ Q in optimal time O (m+n+k), where m; n; and k are the sizes of ^ P ; ^ Q; and ^ P fl ^ Q respectively. <p> Before this thesis almost nothing was known about the convolution operation for tracings in dimensions higher than two, except in the special case of convex bodies, where it is equivalent to the Minkowski sum; this case for 3-D polyhedral objects has been treated in <ref> [71, 17, 87, 119] </ref>. Unfortunately, the convex case is too special to suggest the proper extension of the concept of a tracing to three and higher dimensions. <p> This issue was discussed at length by Guibas and Seidel <ref> [71] </ref> for two-dimensional convolutions, and it is not surprising that it arises again in three dimensions. <p> In the case where R and B are convex tracings, i.e. when each whisker value appears only once per tracing, this problem has already been optimally solved <ref> [71] </ref> in optimal O (n + k) time. The difficulty with general tracings is that their whisker maps can multiply cover S 2 | they are effectively Riemann surfaces over S 2 .
Reference: [72] <author> L. J. Guibas, M. Sharir, and S. Sifrony. </author> <title> On the general motion planning problem with two degrees of freedom. </title> <journal> Discrete Comput. Geom., </journal> <volume> 4 </volume> <pages> 491-521, </pages> <year> 1989. </year>
Reference-contexts: The number of independent placements is fi (m 2 n 2 ). So the Minkowski difference P Q has O (m 2 n 2 ) separate components. 1.1. BACKGROUND 9 complement, general results on the complexity of a single face in an arrangement of line segments <ref> [72] </ref> show that the worst-case complexity of a face is O ((m + n)ff (m + n)), where ff is the inverse of Ackermann's function. This bound is tight [78]. 1.1.3 Paintings and their convolution The set of polyhedral sets is closed under the Minkowski sum operator. <p> It can be verified that the spanning tree is of the required length O ((m + n) p and find the outer face by a single face computation among a set of line segments using the method of <ref> [72] </ref>. This variant algorithm takes only time O ((k + m + n) log (m + n)ff (m + n)).
Reference: [73] <author> L. J. Guibas and J. Stolfi. </author> <title> Primitives for the manipulation of general subdivisions and the computation of Voronoi diagrams. </title> <journal> ACM Trans. Graph., </journal> <volume> 4 </volume> <pages> 74-123, </pages> <year> 1985. </year>
Reference-contexts: Sometimes, as in the case of the polygon described above, only the boundary of the set is thus decomposed; this is the boundary description of the set. In three dimensions, several boundary descriptions have been proposed <ref> [73, 27] </ref>. Let us consider the two-dimensional case: it is easy to compute the boundary description 3 of the Minkowski sum of two convex polygons, given their respective boundary descriptions. <p> We describe a data structure for representing polyhedral tracings based on the half-edge data structure of Muller and Preparata [106] augmented with a sign. The notation used in this presentation was originally presented for quad-edge structures of <ref> [73] </ref>. We give a set of rules to derive the representation of the convolution from the representations of two input polyhedral tracings. <p> We present a formal definition of polyhedral tracings later in this chapter. We begin with a discussion of a boundary data structure called the half-edge structure [106] that we use to represent polyhedral tracings. 3.2.3 Half-edge structures A half-edge structure [106] (recast in the postfix notations of <ref> [73] </ref>) is an algebra (V; E; F; Lnext; Org; Lface; Sym), where V (resp. <p> tracings and discuss how to represent them. 3.2.4 Polyhedral tracings: Formal definition A polyhedral tracing is a tracing such that its manifold can be decomposed into interior disjoint simply connected subsets of three types: vertex domains, edge domains and face domains, with connectivity properties similar to a subdivision defined in <ref> [73] </ref>, and such that (Figure 3.3): 1. On a face domain, the whisker map is constant and the location map is a bijection whose range is a simple polygon, 2.
Reference: [74] <author> Leonidas J. Guibas, Donald E. Knuth, and Micha Sharir. </author> <title> Randomized incremental construction of Delaunay and Voronoi diagrams. </title> <journal> Algorithmica, </journal> <volume> 7 </volume> <pages> 381-413, </pages> <year> 1992. </year>
Reference: [75] <author> D. Halperin, M. H. Overmars, and M. Sharir. </author> <title> Efficient motion planning for an L-shaped object. </title> <journal> SIAM J. Comput., </journal> <volume> 21 </volume> <pages> 1-23, </pages> <year> 1992. </year>
Reference-contexts: Given the high complexity of the previous general methods, a number of specialized algorithms were developed for special types of robots: a rod translating and rotating in the plane [122, 97, 130], an L-shaped polygon <ref> [75] </ref> and a general polygon in the plane [122]. The restriction of the problem to one of these robots limits the dimension of the configuration space, and the structure of the free space is easier to understand. The Minkowski sum is a natural operation that appears in many different contexts.
Reference: [76] <author> D. Halperin and M. Sharir. </author> <title> Arrangements and their applications in robotics: Recent developments. </title> <editor> In K. Goldbergs, D. Halperin, J.-C. Latombe, and R. Wilson, editors, </editor> <booktitle> BIBLIOGRAPHY 123 Proc. Workshop on Algorithmic Foundations of Robotics. </booktitle> <editor> A. K. Peters, </editor> <address> Boston, MA, </address> <year> 1995. </year>
Reference: [77] <author> D. Halperin and R. H. Wilson. </author> <title> Assembly partitioning along simple paths: the case of multiple translations. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom., </booktitle> <pages> pages 1585-1592, </pages> <year> 1995. </year>
Reference: [78] <author> Sariel Har-Peled, Timothy M. Chan, Boris Aronov, Dan Halperin, and Jack Snoeyink. </author> <title> The complexity of a single face of a Minkowski sum. </title> <booktitle> In Proc. 7th Canad. Conf. Comput. Geom., </booktitle> <pages> pages 91-96, </pages> <year> 1995. </year>
Reference-contexts: BACKGROUND 9 complement, general results on the complexity of a single face in an arrangement of line segments [72] show that the worst-case complexity of a face is O ((m + n)ff (m + n)), where ff is the inverse of Ackermann's function. This bound is tight <ref> [78] </ref>. 1.1.3 Paintings and their convolution The set of polyhedral sets is closed under the Minkowski sum operator. We therefore have a semi-group, but that's the only algebraic structure we can obtain with this operator. <p> The outer face of the Minkowski sum can be computed by applying the general algorithm of [37] to compute a single face in an arrangement of k line segments in time O (kff (k) log k). It is shown in <ref> [78] </ref> that the complexity of a single face in the Minkowski sum can in fact be fi (mnff (mn)) in the worst case. <p> CONVOLUTION AND MINKOWSKI SUM 25 the Introduction (Figure 1.3). Notice that in this case most of the vertices of the Minkowski sum are due to holes. In fact the outer boundary is O (m + n) in size. It was shown in <ref> [78] </ref> that the outer face of the Minkowski sum is O (mnff (mn)) in the worst case; they also show an example that achieves this bound tightly. The above suggests that it makes sense to compute only the outer face of the Minkowski sum instead of the entire structure.
Reference: [79] <author> S. Hart and M. Sharir. </author> <title> Nonlinearity of Davenport-Schinzel sequences and of generalized path compression schemes. </title> <journal> Combinatorica, </journal> <volume> 6 </volume> <pages> 151-177, </pages> <year> 1986. </year>
Reference: [80] <author> J. Hershberger. </author> <title> Finding the upper envelope of n line segments in O(n log n) time. </title> <journal> Inform. Process. Lett., </journal> <volume> 33 </volume> <pages> 169-174, </pages> <year> 1989. </year>
Reference: [81] <author> J. E. Hopcroft, J. T. Schwartz, and M. Sharir. </author> <title> On the complexity of motion planning for multiple independent objects: P-space hardness of the "Warehouseman's Problem". </title> <journal> Internat. J. Robot. Res., </journal> <volume> 3(4) </volume> <pages> 76-88, </pages> <year> 1984. </year>
Reference-contexts: In the case where the number of degrees of freedom is not fixed, the motion planning problem has been shown to be PSPACE-complete <ref> [81, 82] </ref>, so that the exponential dependence in d is likely to be unavoidable.
Reference: [82] <author> J. E. Hopcroft, J. T. Schwartz, and M. Sharir. </author> <title> Planning, Geometry, and Complexity of Robot Motion. </title> <publisher> Ablex Publishing, </publisher> <address> Norwood, NJ, </address> <year> 1987. </year>
Reference-contexts: In the case where the number of degrees of freedom is not fixed, the motion planning problem has been shown to be PSPACE-complete <ref> [81, 82] </ref>, so that the exponential dependence in d is likely to be unavoidable.
Reference: [83] <author> Y. B. Karasik and M. Sharir. </author> <title> The power of geometric duality and Minkowski sums in optical computational geometry. </title> <booktitle> In Proc. 9th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 379-388, </pages> <year> 1993. </year>
Reference: [84] <author> A. Kaul and M. A. O'Connor. </author> <title> Computing minkowski sums of regular polyhedra. </title> <type> Report RC 18891 (82557) 5/12/93, </type> <institution> IBM T.J. Watson Research Center, </institution> <address> Yorktown Heights, NY 10598, </address> <year> 1992. </year> <note> 124 BIBLIOGRAPHY </note>
Reference-contexts: Minkowski sums have been studied extensively in mathematical literature. Risler [117] studied the problem of placing curved polygons using Minkowski sums. Minkowski addition of polytopes was studied by Gritzmann and Sturmfels [67]. Kaul, et al. <ref> [85, 84] </ref> studied the computation of Minkowski sums in two and three dimensions using line and plane sweep methods. As we have seen above, the computation of the Minkowski sum of convex polyhedra 1.2.
Reference: [85] <author> A. Kaul, M. A. O'Connor, and V. Srinivasan. </author> <title> Computing Minkowski sums of regular polygons. </title> <booktitle> In Proc. 3rd Canad. Conf. Comput. Geom., </booktitle> <pages> pages 74-77, </pages> <year> 1991. </year>
Reference-contexts: Minkowski sums have been studied extensively in mathematical literature. Risler [117] studied the problem of placing curved polygons using Minkowski sums. Minkowski addition of polytopes was studied by Gritzmann and Sturmfels [67]. Kaul, et al. <ref> [85, 84] </ref> studied the computation of Minkowski sums in two and three dimensions using line and plane sweep methods. As we have seen above, the computation of the Minkowski sum of convex polyhedra 1.2.
Reference: [86] <author> A. Kaul, M. A. O'Connor, and V. Srinivasan. </author> <title> Computing Minkowski sums of regular polygons. </title> <type> Report RC 18523 (80982) 11/13/93, </type> <institution> IBM T.J. Watson Research Center, </institution> <address> Yorktown Heights, NY 10598, </address> <year> 1992. </year>
Reference: [87] <author> A. Kaul and J. Rossignac. </author> <title> Solid-interpolating deformations: construction and animation of PIPs. </title> <journal> Comput. & Graphics, </journal> <volume> 16 </volume> <pages> 107-116, </pages> <year> 1992. </year>
Reference-contexts: Before this thesis almost nothing was known about the convolution operation for tracings in dimensions higher than two, except in the special case of convex bodies, where it is equivalent to the Minkowski sum; this case for 3-D polyhedral objects has been treated in <ref> [71, 17, 87, 119] </ref>. Unfortunately, the convex case is too special to suggest the proper extension of the concept of a tracing to three and higher dimensions.
Reference: [88] <author> S. Khanna, R. Motwani, and R. Wilson. </author> <title> On certificates and lookahead in dynamic graph problems. </title> <booktitle> In Proc. 7th ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 7-16, </pages> <year> 1996. </year>
Reference: [89] <author> D. E. Knuth. </author> <title> Fundamental Algorithms, </title> <booktitle> volume 1 of The Art of Computer Programming. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1968. </year>
Reference: [90] <author> D. E. Knuth. </author> <title> Fundamental Algorithms, </title> <booktitle> volume 1 of The Art of Computer Programming. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, 2nd edition, </address> <year> 1973. </year>
Reference: [91] <author> S.S Krishnan and A.C. Sanderson. </author> <title> Path-planning algorithms for assembly sequence planning. </title> <booktitle> In Proceedings of the SPIE, </booktitle> <volume> volume 1571, </volume> <pages> pages 428-439, </pages> <year> 1991. </year>
Reference-contexts: INTRODUCTION called a direction cone. This application arises in the context of automatic assembly of products [118] consisting of polyhedral parts. Assembly of parts using path planning algorithms was considered in <ref> [91] </ref>, assembly of toleranced parts was studied in [94].
Reference: [92] <author> Serge Lang. </author> <title> Differential Manifolds. </title> <publisher> Addison-Wesley, </publisher> <year> 1972. </year>
Reference-contexts: tracings, the convolution domain is defined to be that subset of M B fi M R satisfying: M Q = f (x; y) 2 M B fi M R j _ b (y) = _r (x)g: This is an instance of a general categorical construction known as a fiber product <ref> [92] </ref> applied to the two whisker maps _ b and _r. Under mild assumptions (transversality) on the pair ( _ b; _r), the fiber product M Q is an oriented manifold of the same dimension as M B and M R , which 3.2.
Reference: [93] <author> J.-C. Latombe. </author> <title> Robot Motion Planning. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1991. </year>
Reference-contexts: One of the key application areas that is a source of research problems in geometry is Robotics. For a robot R to move between an initial position and a goal, it is necessary to devise a motion plan that avoids collision between the robot and obstacles in the workspace <ref> [93] </ref>. The robot may be allowed to translate or rotate or has different types of joints imposing sliding or rotating constraints. The set of possible placements of the robot is a manifold whose dimension is the number of degrees of freedom of the robot. <p> This composition concept, except for the advantageous multi-linear structure of the convolution, is familiar in robotics, where it appears under the names of Minkowski sum or configuration 48 49 space obstacle <ref> [98, 93] </ref>. In two dimensions, a closed curve is normally defined via a continuous map from the unit circle to the plane.
Reference: [94] <author> JC. Latombe and R.H. Wilson. </author> <title> Assembly sequencing with toleranced parts. </title> <booktitle> In 3 rd ACM Symposium on Solid Modeling and Applications, </booktitle> <address> Salt Lake City, </address> <year> 1995. </year>
Reference-contexts: INTRODUCTION called a direction cone. This application arises in the context of automatic assembly of products [118] consisting of polyhedral parts. Assembly of parts using path planning algorithms was considered in [91], assembly of toleranced parts was studied in <ref> [94] </ref>. Schweikard et al. [126] considered assembly sequences of polyhedra. 1.1 Background In the rest of this thesis, we use the following notation: the d-dimensional Euclidian space is denoted by E d , or by E if the dimension is clear from the context.
Reference: [95] <author> J.-P. Laumond. </author> <title> Obstacle growing in a nonpolygonal world. </title> <journal> Inform. Process. Lett., </journal> <volume> 25 </volume> <pages> 41-50, </pages> <year> 1987. </year> <note> BIBLIOGRAPHY 125 </note>
Reference: [96] <author> D. T. Lee and Y. T. Ching. </author> <title> The power of geometric duality revisited. </title> <journal> Inform. Process. Lett., </journal> <volume> 21 </volume> <pages> 117-122, </pages> <year> 1985. </year>
Reference-contexts: The notion of geometric duality was first developed in the algorithmic context by Chazelle, Guibas and Lee [38], and is an essential tool for algorithmic design in computational geometry <ref> [96, 15, 16, 50] </ref> Most of the results in this thesis have appeared as publications. Part of Chapter 1 appeared in the 12th Symposium on Computational Geometry [115]. Part of Chapter 3 appeared in the 2nd Workshop on Algorithmic Foundations of Robotics [23].
Reference: [97] <author> D. Leven and M. Sharir. </author> <title> An efficient and simple motion planning algorithm for a ladder moving in two-dimensional space amidst polygonal barriers. </title> <booktitle> In Proc. 1st Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 221-227, </pages> <year> 1985. </year>
Reference-contexts: Given the high complexity of the previous general methods, a number of specialized algorithms were developed for special types of robots: a rod translating and rotating in the plane <ref> [122, 97, 130] </ref>, an L-shaped polygon [75] and a general polygon in the plane [122]. The restriction of the problem to one of these robots limits the dimension of the configuration space, and the structure of the free space is easier to understand.
Reference: [98] <author> T. Lozano-Perez. </author> <title> Spatial planning: A configuration space approach. </title> <journal> IEEE Trans. Comput., </journal> <volume> C-32:108-120, </volume> <year> 1983. </year>
Reference-contexts: The fifth chapter concludes this thesis with a summary and possible applications and extensions of this work. Chapter 2 Planar Minkowski sum outer face computation Minkowski sums arise commonly in robotics under the name of configuration space obstacles <ref> [98] </ref>, when the robot motion is restricted to translation. If an obstacle and a robot are modeled by two polygons P and Q, the Minkowski difference P Q is the set of placements of Q with respect to P that cause the two polygons to intersect (Figure 1.1). <p> This composition concept, except for the advantageous multi-linear structure of the convolution, is familiar in robotics, where it appears under the names of Minkowski sum or configuration 48 49 space obstacle <ref> [98, 93] </ref>. In two dimensions, a closed curve is normally defined via a continuous map from the unit circle to the plane.
Reference: [99] <author> H. G. Mairson and J. Stolfi. </author> <title> Reporting and counting intersections between two sets of line segments. </title> <editor> In R. A. Earnshaw, editor, </editor> <booktitle> Theoretical Foundations of Computer Graphics and CAD, volume F40 of NATO ASI, </booktitle> <pages> pages 307-325. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, West Germany, </address> <year> 1988. </year>
Reference-contexts: COMPUTATION OF POLYHEDRAL CONVOLUTION The case where each input set is disjoint has been extensively studied. In the early days of computational geometry, Bentley and Ottmann [25] introduced their well-known line sweep algorithm, which reports all purple intersections in time O ((n+k) log n). Mairson and Stolfi <ref> [99] </ref> were the first to find an asymptotically optimal algorithm running in O (n log n+k) time. <p> Using the recent randomized algorithm of Chazelle et al. [37] to compute a single-face, a purple intersection is detected in time O (nff (n) log n), where ff (n) is the slowly growing inverse of Ackermann's function. Some of the algorithms described above are essentially combinatorial <ref> [25, 99, 6, 43] </ref>, and work as well if the line segments are replaced by x-monotone algebraic arcs of bounded degree. Others [34, 37, 2] make a more essential use of the affine structure of the input and cannot be so adapted. <p> In order to reduce this overhead, it would be nice to integrate our technique, which relaxes the vertical ordering of the sweep line, with the methods of Edelsbrunner and 110 CHAPTER 4. COMPUTATION OF POLYHEDRAL CONVOLUTION Guibas [54] or Mairson and Stolfi <ref> [99] </ref>, which relax the horizontal ordering of the sweep.
Reference: [100] <author> J. Matousek. </author> <title> Spanning trees with low crossing number. </title> <journal> Informatique Theorique et Applications, </journal> <volume> 25(2) </volume> <pages> 103-123, </pages> <year> 1991. </year>
Reference-contexts: If one point from each component is given, it is possible to compute a spanning tree between 108 CHAPTER 4. COMPUTATION OF POLYHEDRAL CONVOLUTION these points <ref> [100] </ref> that has low stabbing number, and thus provide connected input to HeapSweep. The spurious intersections generated by the spanning trees cause a total running time of O ((n r p p General case in linear space.
Reference: [101] <author> J. Matousek. </author> <title> Geometric range searching. </title> <type> Tech. Report B-93-09, </type> <institution> Fachbereich Mathe-matik und Informatik, Free Univ. </institution> <address> Berlin, </address> <year> 1993. </year>
Reference: [102] <author> J. Matousek. </author> <title> Range searching with efficient hierarchical cuttings. </title> <journal> Discrete Comput. Geom., </journal> <volume> 10(2) </volume> <pages> 157-182, </pages> <year> 1993. </year>
Reference-contexts: in these time bounds is unlikely, as the general case falls within a class of problems at least as hard as Hopcroft's problem of detecting an incidence between a set of n points and a set of n lines; the fastest known algorithm for Hopcroft's problem is due to Matousek <ref> [49, 102] </ref>, and runs in O (n 4=3 2 O (log fl n) ) 4.1. INTERSECTION PROBLEMS 89 time. For a certain general class of algorithms, a lower bound of (n 4=3 ) for this problem was recently given by Erickson [59]. <p> Would a connectedness hypothesis allow us to get a better running time than what could be achieved using general cutting techniques <ref> [102] </ref>? In Chapter 3, we proved that the convolution of polyhedral tracings has well defined and balanced structure. Conjecture 1 stated that the convolution satisfies the fundamental theorem that relates it to the intersection of the corresponding polyhedral paintings.
Reference: [103] <author> E. M. McCreight. </author> <title> Priority search trees. </title> <journal> SIAM J. Comput., </journal> <volume> 14 </volume> <pages> 257-276, </pages> <year> 1985. </year>
Reference: [104] <author> K. Mehlhorn and S. Naher. </author> <title> Implementation of a sweep line algorithm for the straight line segment intersection problem. </title> <type> Report MPI-I-94-160, </type> <institution> Max-Planck-Institut Inform., Saarbrucken, Germany, </institution> <year> 1994. </year>
Reference: [105] <author> David M. Mount and Ruth Silverman. </author> <title> Combinatorial and Computational Aspects of Minkowski Decompositions, </title> <booktitle> volume 119. </booktitle> <year> 1991. </year> <note> 126 BIBLIOGRAPHY </note>
Reference: [106] <author> D. E. Muller and F. P. Preparata. </author> <title> Finding the intersection of two convex polyhedra. </title> <journal> Theoret. Comput. Sci., </journal> <volume> 7 </volume> <pages> 217-236, </pages> <year> 1978. </year>
Reference-contexts: We describe a data structure for representing polyhedral tracings based on the half-edge data structure of Muller and Preparata <ref> [106] </ref> augmented with a sign. The notation used in this presentation was originally presented for quad-edge structures of [73]. We give a set of rules to derive the representation of the convolution from the representations of two input polyhedral tracings. <p> Polyhedral tracings have in fact just the right expressiveness to allow us to represent the convolution of general non-convex polyhedra. We present a formal definition of polyhedral tracings later in this chapter. We begin with a discussion of a boundary data structure called the half-edge structure <ref> [106] </ref> that we use to represent polyhedral tracings. 3.2.3 Half-edge structures A half-edge structure [106] (recast in the postfix notations of [73]) is an algebra (V; E; F; Lnext; Org; Lface; Sym), where V (resp. <p> We present a formal definition of polyhedral tracings later in this chapter. We begin with a discussion of a boundary data structure called the half-edge structure <ref> [106] </ref> that we use to represent polyhedral tracings. 3.2.3 Half-edge structures A half-edge structure [106] (recast in the postfix notations of [73]) is an algebra (V; E; F; Lnext; Org; Lface; Sym), where V (resp.
Reference: [107] <author> K. Mulmuley. </author> <title> On levels in arrangements and Voronoi diagrams. </title> <journal> Discrete Comput. Geom., </journal> <volume> 6 </volume> <pages> 307-338, </pages> <year> 1991. </year>
Reference: [108] <author> K. Mulmuley. </author> <title> Computational Geometry: An Introduction Through Randomized Algorithms. </title> <publisher> Prentice Hall, </publisher> <address> New York, </address> <year> 1993. </year>
Reference: [109] <author> T. Ottmann and D. Wood. </author> <title> Dynamical sets of points. Comput. Vision Graph. </title> <journal> Image Process., </journal> <volume> 27 </volume> <pages> 157-166, </pages> <year> 1984. </year>
Reference: [110] <author> M. Overmars, H. Schipper, and M. Sharir. </author> <title> Storing line segments in partition trees. </title> <journal> BIT, </journal> <volume> 30 </volume> <pages> 385-403, </pages> <year> 1990. </year>
Reference: [111] <author> M. H. Overmars and J. van Leeuwen. </author> <title> Maintenance of configurations in the plane. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 23 </volume> <pages> 166-204, </pages> <year> 1981. </year>
Reference-contexts: Cole, Sharir, and Yap [44] improved these bounds to O ((n + k) log 2 j). Both methods mentioned above use the data structure of Overmars and van Leeu-ven <ref> [111] </ref> for dynamic maintenance of a convex hull with insertions and deletion at a cost of O (log 2 n) per operation.
Reference: [112] <author> J. Pach and M. Sharir. </author> <title> On vertical visibility in arrangements of segments and the queue size in the Bentley-Ottman line sweeping algorithm. </title> <journal> SIAM J. Comput., </journal> <volume> 20 </volume> <pages> 460-470, </pages> <year> 1991. </year>
Reference: [113] <author> Larry Palazzi and Jack Snoeyink. </author> <title> Counting and reporting red/blue segment intersections. </title> <booktitle> In Proc. 3rd Workshop Algorithms Data Struct., volume 709 of Lecture Notes in Computer Science, </booktitle> <pages> pages 530-540, </pages> <year> 1993. </year>
Reference-contexts: The same optimal time bound for reporting purple intersections was achieved later by several different methods <ref> [34, 36, 43, 113] </ref>. Especially worthy of mention among these is the hereditary segment tree data structure of Chazelle, Edelsbrunner, Guibas, and Sharir [36], which can also be used to count all purple intersections in O (n log n) time.
Reference: [114] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: An Introduction. </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1985. </year>
Reference-contexts: Introduction Computational Geometry is the study of the representation and manipulation of geometric objects in the computer <ref> [114, 127] </ref>. Discrete geometric computations are made possible using combinatorial descriptions of objects. The identification of relevant combinatorial structures, geometric predicates, and the design of algorithms that use these descriptions and predicates form the core of this discipline. <p> There is one drawback to this approach: the space used can be quadratic. We omit some details of this implementation here. To avoid the quadratic space cost, several variants can be imagined. For instance, it is possible to maintain an interval tree <ref> [114] </ref> of all red faces that intersect with the sweep line, and query this tree with the position of a blue vertex when sweeping over one.
Reference: [115] <author> G. D. Ramkumar. </author> <title> An algorithm to compute the Minkowski sum outer-face of two simple polygons. </title> <booktitle> In Proc. 12th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 234-241, </pages> <year> 1996. </year> <note> BIBLIOGRAPHY 127 </note>
Reference-contexts: Part of Chapter 1 appeared in the 12th Symposium on Computational Geometry <ref> [115] </ref>. Part of Chapter 3 appeared in the 2nd Workshop on Algorithmic Foundations of Robotics [23]. Part of Chapter 4 appeared in the 4th European Symposium on Algorithms [21]. An application for assembly planning is described in [118]. 18 CHAPTER 1.
Reference: [116] <author> G. D. Ramkumar. </author> <title> Algorithm to compute the minkowski sum outer-face of two simple polygons. </title> <booktitle> In Proc. 12th Annu. ACM Sympos. Comput. Geometry, </booktitle> <year> 1996. </year>
Reference: [117] <author> Jean-Jacques Risler. </author> <title> Placement of curved polygons. </title> <type> Report LMENS - 91 -2, </type> <institution> Labora-toire de Mathematiques,Ecole Normale Superieure, UA 762 du CNRS, </institution> <year> 1991. </year>
Reference-contexts: The Minkowski sum is a natural operation that appears in many different contexts. In Graphics, the weighted Minkowski sum provides a way to morph two shapes into an intermediate `interpolating' shape [120]. Minkowski sums have been studied extensively in mathematical literature. Risler <ref> [117] </ref> studied the problem of placing curved polygons using Minkowski sums. Minkowski addition of polytopes was studied by Gritzmann and Sturmfels [67]. Kaul, et al. [85, 84] studied the computation of Minkowski sums in two and three dimensions using line and plane sweep methods.
Reference: [118] <author> Bruce Romney, Cyprien Godard, Michael Goldwasser, and G. Ramkumar. </author> <title> An efficient system for geometric assembly sequence generation and evaluation. </title> <booktitle> In Proceedings of the ACME International Computers in Engineering, </booktitle> <pages> pages 699-712, </pages> <year> 1995. </year>
Reference-contexts: The convolution computation arises in the following specific application: projecting the convolution of two polyhedral tracings onto the sphere of directions; such an overlay is 4 CHAPTER 1. INTRODUCTION called a direction cone. This application arises in the context of automatic assembly of products <ref> [118] </ref> consisting of polyhedral parts. Assembly of parts using path planning algorithms was considered in [91], assembly of toleranced parts was studied in [94]. <p> Part of Chapter 1 appeared in the 12th Symposium on Computational Geometry [115]. Part of Chapter 3 appeared in the 2nd Workshop on Algorithmic Foundations of Robotics [23]. Part of Chapter 4 appeared in the 4th European Symposium on Algorithms [21]. An application for assembly planning is described in <ref> [118] </ref>. 18 CHAPTER 1. INTRODUCTION 1.3 Thesis overview In the second chapter of this thesis, we focus on the convolution of simple polygons in the plane.
Reference: [119] <author> J. Rossignac and A. Kaul. Agrels and bips: </author> <title> Metamorphosis as a bezier curve in the space of polyhedra. </title> <booktitle> In Eurographics '94 Proceedings, </booktitle> <volume> volume 13, </volume> <pages> pages 179-184, </pages> <year> 1994. </year>
Reference-contexts: Before this thesis almost nothing was known about the convolution operation for tracings in dimensions higher than two, except in the special case of convex bodies, where it is equivalent to the Minkowski sum; this case for 3-D polyhedral objects has been treated in <ref> [71, 17, 87, 119] </ref>. Unfortunately, the convex case is too special to suggest the proper extension of the concept of a tracing to three and higher dimensions.
Reference: [120] <author> G. Sapiro, R. Kimmel, D. Shaked, B. B. Kimia, and A. M. Bruckstein. </author> <title> Implementing continuous-scale morphology via curve evolution. </title> <type> Technical Report CIS 9302, </type> <institution> Technion IIT, Haifa, Israel, </institution> <month> January </month> <year> 1993. </year>
Reference-contexts: The Minkowski sum is a natural operation that appears in many different contexts. In Graphics, the weighted Minkowski sum provides a way to morph two shapes into an intermediate `interpolating' shape <ref> [120] </ref>. Minkowski sums have been studied extensively in mathematical literature. Risler [117] studied the problem of placing curved polygons using Minkowski sums. Minkowski addition of polytopes was studied by Gritzmann and Sturmfels [67].
Reference: [121] <author> Pierre Schapira. </author> <title> Operations on constructible functions. </title> <journal> Journal of Pure and Applied Algebra, </journal> <volume> 72 </volume> <pages> 83-93, </pages> <year> 1991. </year>
Reference-contexts: The second chapter of this thesis presents a novel way in which the two-dimensional convolution can be used to compute important parts of the Minkowski sum. Schapira <ref> [121] </ref> generalizes the idea of convolution to sets in spaces of arbitrary dimensions. He casts the operation as an algebraic operation on multi-sets. His work spells out the structure of the convolution, and clarifies its relation with the notion of free space for a translating robot. <p> INTRODUCTION Definition 1.9. A standard decomposition of a painting F is a finite family (C i ; ff i ) i such that for all i; C i is a compact contractible set, and F = i Theorem 1.10. <ref> [121] </ref> Given a painting F and a standard decomposition (C i ; ff i ), the quan tity P i ff i is called the integral of F and denoted R F . It is independent of the decomposition. Example 1.11. <p> Hence we have: c d = 2 c d1 ; and c 1 = 2 for the 0-dimensional sphere which is made of two points. This example shows that some natural paintings (d-spheres for odd d) can have a 0 integral even when they are not empty. Lemma 1.12. <ref> [121] </ref> The integral of the characteristic function of a closed set is its Euler-Poincare characteristic, i.e. the alternating sum of the number of elements of each dimension in a cell decomposition of the set. <p> Paintings or arbitrary dimension were studied by Schapira <ref> [121] </ref> under the name of constructible functions. Using results from sheaf theory, Schapira was able to define a convolution operation on constructible functions and to show how it corresponds to the convolution of tracings discussed above. <p> The painting convolution of two paintings ; is then defined with respect to this integral R ( fl )(p) = q (q) (p q); and it relates to intersection problems in the following way <ref> [121] </ref>: Theorem 3.1. If ; are indicators of closed sets B; R, then the value of fl at a point p 2 E 3 is the Euler-Poincare characteristic of the intersection of B with R reflected through the origin and translated by p. <p> We return to this issue in the next chapter, where we will address it in greater detail. Based on the fundamental theorem as described for convolutions of tracings in [70] and for convolutions of paintings in <ref> [121] </ref>, we conclude that the winding number with respect to the convolution gives useful information with respect to the Minkowski sum of the inverted robot and the obstacle. Given two tracings their convolution corresponds to the painting convolution of the two corresponding paintings.
Reference: [122] <author> J. T. Schwartz and M. Sharir. </author> <title> On the "piano movers" problem I: the case of a two-dimensional rigid polygonal body moving amidst polygonal barriers. </title> <journal> Commun. Pure Appl. Math., </journal> <volume> 36 </volume> <pages> 345-398, </pages> <year> 1983. </year>
Reference-contexts: We presented here this theory in a more restricted framework. 16 CHAPTER 1. INTRODUCTION 1.2 Related work In a series of three papers known as the Piano Movers series <ref> [122, 123, 124] </ref>, Schwartz and Sharir introduced the idea of configuration spaces in motion planning. <p> Given the high complexity of the previous general methods, a number of specialized algorithms were developed for special types of robots: a rod translating and rotating in the plane <ref> [122, 97, 130] </ref>, an L-shaped polygon [75] and a general polygon in the plane [122]. The restriction of the problem to one of these robots limits the dimension of the configuration space, and the structure of the free space is easier to understand. <p> Given the high complexity of the previous general methods, a number of specialized algorithms were developed for special types of robots: a rod translating and rotating in the plane [122, 97, 130], an L-shaped polygon [75] and a general polygon in the plane <ref> [122] </ref>. The restriction of the problem to one of these robots limits the dimension of the configuration space, and the structure of the free space is easier to understand. The Minkowski sum is a natural operation that appears in many different contexts.
Reference: [123] <author> J. T. Schwartz and M. Sharir. </author> <title> On the "piano movers" problem II: general techniques for computing topological properties of real algebraic manifolds. </title> <journal> Adv. Appl. Math., </journal> <volume> 4 </volume> <pages> 298-351, </pages> <year> 1983. </year>
Reference-contexts: We presented here this theory in a more restricted framework. 16 CHAPTER 1. INTRODUCTION 1.2 Related work In a series of three papers known as the Piano Movers series <ref> [122, 123, 124] </ref>, Schwartz and Sharir introduced the idea of configuration spaces in motion planning. <p> We presented here this theory in a more restricted framework. 16 CHAPTER 1. INTRODUCTION 1.2 Related work In a series of three papers known as the Piano Movers series [122, 123, 124], Schwartz and Sharir introduced the idea of configuration spaces in motion planning. In <ref> [123] </ref>, they adapted a general method of Collins [45] to obtain a cell decomposition (called a cylindrical decomposition) of the free space of a robot with arbitrary degrees of freedom, based on the decomposition of arrangements of algebraic surfaces in d dimensions. The scheme is doubly exponential in d.
Reference: [124] <author> J. T. Schwartz and M. Sharir. </author> <title> On the "piano movers" problem V: the case of a rod moving i n three-dimensional space amidst polyhedral obstacles. </title> <journal> Commun. Pure Appl. Math., </journal> <volume> 37 </volume> <pages> 815-848, </pages> <year> 1984. </year> <note> 128 BIBLIOGRAPHY </note>
Reference-contexts: We presented here this theory in a more restricted framework. 16 CHAPTER 1. INTRODUCTION 1.2 Related work In a series of three papers known as the Piano Movers series <ref> [122, 123, 124] </ref>, Schwartz and Sharir introduced the idea of configuration spaces in motion planning.
Reference: [125] <author> Otfried Schwarzkopf. </author> <title> Computing convolutions on mesh-like structures. </title> <publisher> pages ??-?? IEEE Computer Society, </publisher> <year> 1993. </year>
Reference: [126] <author> A. Schweikard and R.H. Wilson. </author> <title> Assembly sequences for polyhedra. </title> <journal> Algorithmica, </journal> <volume> 13(6) </volume> <pages> 539-552, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: INTRODUCTION called a direction cone. This application arises in the context of automatic assembly of products [118] consisting of polyhedral parts. Assembly of parts using path planning algorithms was considered in [91], assembly of toleranced parts was studied in [94]. Schweikard et al. <ref> [126] </ref> considered assembly sequences of polyhedra. 1.1 Background In the rest of this thesis, we use the following notation: the d-dimensional Euclidian space is denoted by E d , or by E if the dimension is clear from the context. The d-dimensional sphere is denoted by S d .
Reference: [127] <author> M. I. Shamos. </author> <title> Computational Geometry. </title> <type> Ph.D. thesis, </type> <institution> Dept. Comput. Sci., Yale Univ., </institution> <address> New Haven, CT, </address> <year> 1978. </year>
Reference-contexts: Introduction Computational Geometry is the study of the representation and manipulation of geometric objects in the computer <ref> [114, 127] </ref>. Discrete geometric computations are made possible using combinatorial descriptions of objects. The identification of relevant combinatorial structures, geometric predicates, and the design of algorithms that use these descriptions and predicates form the core of this discipline.
Reference: [128] <author> M. Sharir. </author> <title> On k-sets in arrangements of curves and surfaces. </title> <journal> Discrete Comput. Geom., </journal> <volume> 6 </volume> <pages> 593-613, </pages> <year> 1991. </year>
Reference: [129] <author> M. Sharir and P. K. Agarwal. </author> <title> Davenport-Schinzel Sequences and Their Geometric Applications. </title> <publisher> Cambridge University Press, </publisher> <address> New York, </address> <year> 1995. </year>
Reference-contexts: When considering x-monotone arcs such that any pair intersects at most s times, it is common to encounter the function s (n), which denotes the almost-linear maximum length of an (n; s) Davenport-Schinzel sequence; for more material on Davenport-Schinzel sequences the reader is referred to <ref> [129] </ref>. Our contribution is HeapSweep: an efficient algorithm to compute the intersections between two sets of line segments both of which are connected as a point set on the plane. 90 CHAPTER 4.
Reference: [130] <author> S. Sifrony and M. Sharir. </author> <title> A new efficient motion-planning algorithm for a rod in two-dimensional polygonal space. </title> <journal> Algorithmica, </journal> <volume> 2 </volume> <pages> 367-402, </pages> <year> 1987. </year>
Reference-contexts: Given the high complexity of the previous general methods, a number of specialized algorithms were developed for special types of robots: a rod translating and rotating in the plane <ref> [122, 97, 130] </ref>, an L-shaped polygon [75] and a general polygon in the plane [122]. The restriction of the problem to one of these robots limits the dimension of the configuration space, and the structure of the free space is easier to understand.
Reference: [131] <author> J. Stolfi. </author> <title> Oriented Projective Geometry: A Framework for Geometric Computations. </title> <publisher> Academic Press, </publisher> <address> New York, NY, </address> <year> 1991. </year>
Reference-contexts: The notion of convolution is closely related to that of geometric duality <ref> [131] </ref>. Indeed, the extended boundary representation of polygons by Guibas et al. [70] has a well-defined geometric dual in the two-sided projective plane.
Reference: [132] <author> R. H. Wilson and A. Schweikard. </author> <title> Assembling polyhedra with single translations. </title> <type> Technical Report STAN-CS-91-1387, </type> <institution> Dept. Comput. Sci., Stanford Univ., Stanford, </institution> <address> CA, </address> <month> October </month> <year> 1991. </year>
References-found: 132

