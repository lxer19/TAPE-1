URL: http://www.cs.umn.edu/Users/dept/users/CS8199/oz/UsersManual.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/CS8199/oz/
Root-URL: http://www.cs.umn.edu
Title: DFKI Oz Documentation Series DFKI Oz User's Manual  
Author: Michael Mehl Tobias Muller Konstantin Popov Ralf Scheidhauer 
Date: May 19, 1995  
Address: Stuhlsatzenhausweg 3, D-66123 Saarbrucken, Germany  
Affiliation: Programming Systems Lab German Research Center for Artificial Intelligence (DFKI)  
Abstract-found: 0
Intro-found: 1
Reference: <institution> References </institution>
Reference: [1] <author> Martin Henz. </author> <title> The Oz notation. DFKI Oz documentation series, </title> <booktitle> German Research Center for Artificial Intelligence (DFKI), Stuhlsatzenhausweg 3, D-66123 Saarbrucken, </booktitle> <address> Germany, </address> <year> 1994. </year>
Reference-contexts: If you use incorrect syntax or forget to declare variables, the compiler will complain and pop up an error message, trying to describe and locate the problem as exactly as possible. The compiler accepts the following kind of input (besides programs as described in <ref> [1] </ref>): * compiler directives to feed files or set switches * directives for file insertion and conditional compilation The input to the compiler has the following form: hcomp-diri fl hprogram-texti 3.1 Compiler Directives Compiler directives are used to customize several system parameters, for example you can modify the verbosity of the <p> Moreover, Oz Browser normally outperforms the underlying Unix communication engine, Tcl/Tk process and X11 server, so that additional delays may occur. During the generation of the graph's textual representation Oz Browser uses the (syntactic) term constructor precedences as defined in the Oz Notation <ref> [1] </ref>, and uses round parentheses to override them. DRAFT May 19, 1995 4.2 Browsed Information 21 Oz Browser tries to produce the most compact printing layout for compound terms. Namely, it packs in one row as many subterms as possible, where usual minimal subterm indentation is assumed. <p> The procedure Show is useful for debugging. No cycle detection is implemented, but the print depth is limited (see System.getPrintDepth, System.setPrintDepth). The output of a variable might be appropriately annotated: If the variable is contrained to a finite domain of integers (see <ref> [1] </ref> or [5]) or if there are actors waiting for the variable to get further constrained. -showBuiltins The list of all builtins is displayed in the buffer *Oz Emulator*, together with some statistics about the hashtable containing the builtins. -showError +VS - The virtual string VS , followed by a newline, <p> The string S may use the syntax of the first 8 lines in Section 3.3 in <ref> [1] </ref>. <p> Note also that creating and modifying records with Adjoin, AdjoinAt and AdjoinList may be slower since data structures may have to be constructed at runtime. 6.8 Objects The object oriented extensions are compiled to the kernel syntax in a preprocessing step as explained in <ref> [1] </ref>. Both the compiler and emulator provide low level support for objects, such that the most common operations on objects perform efficient. As a rule of thumb you can expect that attribute access (@t) and assignment (s&lt;-t) perform approximately as efficient as an arithmetical operation like X+Y for example.
Reference: [2] <author> Martin Henz and Martin Muller. </author> <title> Programming in Oz. DFKI Oz documentation series, </title> <booktitle> German Research Center for Artificial Intelligence (DFKI), Stuhlsatzen-hausweg 3, D-66123 Saarbrucken, </booktitle> <address> Germany, </address> <year> 1994. </year>
Reference-contexts: introductions to Oz are <ref> [9, 2] </ref>. Architecture. The main components of DFKI Oz are a programming interface based on the GNU Emacs editor, an incremental compiler, an emulator executing the byte code produced by the compiler, a graphical user interface manager based on Tcl/Tk, and a concurrent output tool called browser (see Figure 1.1). <p> It does not make sense to optimize inefficient algorithms and inadequate data structures. Note that techniques developed for logic programming languages like Prolog apply to Oz as well (see [6]), but Oz provides a lot of alternatives too (see for example <ref> [2] </ref>). Note also that if you want to speed up your programs, you should try to find out, which parts of them really need to be revised: we often made the experience, that performance holes were located at totally different places than we suspected them to be.
Reference: [3] <author> Martin Henz, Martin Muller, Christian Schulte, and Jorg Wurtz. </author> <title> The Oz standard modules. DFKI Oz documentation series, </title> <institution> German Research Center for Artificial Intelligence (DFKI), Stuhlsatzenhausweg 3, D-66123 Saarbrucken, Ger-many, </institution> <year> 1994. </year>
Reference-contexts: For example (setq oz-want-font-lock nil) will switch off fontification. The following lists all the user customizable variables with their default values. oz-want-font [ t ] If its value is non-nil fontification in all Oz buffers will take place. oz-indent-chars <ref> [ 3 ] </ref> Number of blanks to add when indenting an expression with respect to the containing block. font-lock-comment-face [ 'italic ] font-lock-string-face [ 'underline ] font-lock-keyword-face [ 'bold ] These variables determine the font in which comments/strings/keywords are displayed. <p> For instance, if a proper record with label r has not any atomic features, it would be shown as r (?). Chunks, i.e. classes, objects, procedures and cells <ref> [3] </ref>, are considered by the Oz Browser as records with a special representation: * their subtrees under the Proc and Cell features are not shown; * the label ChunkLabel is replaced by a label which reflects the type and possibly the print name of the procedure or cell. <p> OZ Term OZ termType (OZ Term t) Returns an atom describing the type of t. The following types are returned: variable, int, float, atom, name, tuple, procedure, cell, record (see also Value.type in <ref> [3] </ref>). Conversion These functions are used to convert from Oz values to standard C data structures and vice versa. If an error occurs during the conversion a warning is printed. char *OZ atomToC (OZ Term t) Converts Oz atom t to a C string.
Reference: [4] <author> Michael Mehl. </author> <title> Window programming in DFKI Oz. DFKI Oz documentation series, </title> <booktitle> German Research Center for Artificial Intelligence (DFKI), Stuhlsatzen-hausweg 3, D-66123 Saarbrucken, </booktitle> <address> Germany, </address> <year> 1994. </year>
Reference-contexts: The interface substitutes Oz for the low-level Tcl (an event-driven script language) exploiting concurrency, objects and first-class procedures. Nevertheless, one can freely integrate Tcl/Tk scripts if desired. The Tcl/Tk interface is described in <ref> [4] </ref>. Interoperability. DFKI Oz comes with powerful interoperability features. High-level socket functionality is provided through predefined classes, making it straight DRAFT May 19, 1995 3 forward to connect applications written in other languages, possibly running on different computers. Starting and controlling external processes is supported. <p> Browser is written in Oz itself 1 and constitutes a nontrivial example of concurrent programming in Oz. Its source code is shipped with the Oz distribution. Browser has a graphical user interface which is built using the DFKI Oz Tcl/Tk interface <ref> [4] </ref>. Hopefully, it is mainly "self-explaining" and its use is quite straightforward. Browser can be easily used in an Oz application as an "embedded" viewing tool. The browser's widget can be placed in any window and used for browsing of an application's output. <p> We call the first of them stand-alone application browsers, and the second embedded application browsers. Note that by describing of the second ones your knowledge in Tcl/Tk programming and window programming in DFKI Oz <ref> [4] </ref> is assumed. 4.4.1 Creation of Stand-Alone Application Browsers A stand-alone application browser is created as follows: declare BO in BO = -New Browse.browserClass init (standAlone: True % may be omitted == False areMenus: True % may be omitted == False areButtons: False) % may be omitted == False )- The
Reference: [5] <author> Tobias Muller, Konstantin Popow, Christian Schulte, and Jorg Wurtz. </author> <title> Constraint programming in Oz. DFKI Oz documentation series, </title> <booktitle> German Research Center for Artificial Intelligence (DFKI), </booktitle> <address> Stuhlsatzenhausweg 3, D-66123 Saar-brucken, Germany, </address> <year> 1994. </year>
Reference-contexts: The procedure Show is useful for debugging. No cycle detection is implemented, but the print depth is limited (see System.getPrintDepth, System.setPrintDepth). The output of a variable might be appropriately annotated: If the variable is contrained to a finite domain of integers (see [1] or <ref> [5] </ref>) or if there are actors waiting for the variable to get further constrained. -showBuiltins The list of all builtins is displayed in the buffer *Oz Emulator*, together with some statistics about the hashtable containing the builtins. -showError +VS - The virtual string VS , followed by a newline, is displayed
Reference: [6] <author> Richard A. O'Keefe. </author> <title> The Craft of Prolog. </title> <publisher> MIT-Press, </publisher> <year> 1990. </year>
Reference-contexts: It does not make sense to optimize inefficient algorithms and inadequate data structures. Note that techniques developed for logic programming languages like Prolog apply to Oz as well (see <ref> [6] </ref>), but Oz provides a lot of alternatives too (see for example [2]). <p> 6 EFFICIENCY ISSUES proc -Len L N case L of nil then N = 0 [] H|R then N = -Len R- + 1 end is not tail recursive, since N = -Len R-+1 expands to local N1 in -Len R N1 end Applying the technique of accumulator passing (cf. <ref> [6] </ref>) leads to local LenHelp in proc -LenHelp L Acu N case L of nil then N=Acu [] H|R then -LenHelp R Acu+1 N end proc -Len L N- -LenHelp L 0 N- end end % local which now is tail recursive and thus runs faster. 6.6 Modules Calling a procedure
Reference: [7] <author> Christian Schulte. </author> <title> Open programming in DFKI Oz. DFKI Oz documentation series, </title> <booktitle> German Research Center for Artificial Intelligence (DFKI), Stuhlsatzen-hausweg 3, D-66123 Saarbrucken, </booktitle> <address> Germany, </address> <year> 1994. </year>
Reference-contexts: For instance, the unary procedure Test would be shown as &lt;P/1 Test&gt;, and a nested ternary procedure simply as &lt;P/3&gt;. These records can be proper or not depending on whether they have adjoined components or not; Virtual strings <ref> [7] </ref> are shown in readable form, i.e. by enclosed in quotes ASCII strings, if the Oz Browser option Virtual strings is selected. This option is set via the corresponding entry of the View menu. Note that browsing of virtual strings is not monotonic.
Reference: [8] <author> Gert Smolka. </author> <title> The definition of Kernel Oz. DFKI Oz documentation series, </title> <booktitle> German Research Center for Artificial Intelligence (DFKI), Stuhlsatzenhausweg 3, D-66123 Saarbrucken, </booktitle> <address> Germany, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: Due to the properties of the Kernel Oz 3 , the constraint on the blackboard can be only a conjunction of the following types of formulae (see <ref> [8] </ref> for precise details): * Equations of the form x : = y, where x and y are distinct variables. * Equations of the form x : = s, where s is either a primitive value, tuple l (x 1 ; : : : ; x n ) or record l <p> Additionally, extended format for print names can be switched on via turning off the entry Names & Procs short of the View menu. 5 recall that record features are literals <ref> [8] </ref>, i.e. atoms or (Oz) names. 6 The string [101 108 108 111] is a string of the ascii codes for the characters e, l, l and o respectively. 7 Oz Browser tries to find out the maximum of meaningful information about names of procedures, cells, etc. <p> Of course, reflection can take place only once for a constraint being browsed; that is, browsing is not concurrent in this case. 8 Of course, this transformation is not the reflection in sense of The Definition of Kernel Oz <ref> [8] </ref>. May 19, 1995 DRAFT 24 4 BROWSER All objects of mentioned above types are replaced with atoms by reflection. Note that many new atoms are created that way, which can be considered as a garbage.

References-found: 9

