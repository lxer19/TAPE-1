URL: http://www.cse.psu.edu/~catuscia/papers/Embedding/infocomp.ps.gz
Refering-URL: http://www.cse.psu.edu/~catuscia/publications.html
Root-URL: http://www.cse.psu.edu
Email: email: wsinfdb@tuewsd.win.tue.nl  email:  
Phone: 2  
Title: Embedding as a tool for Language Comparison  
Author: Frank S. de Boer and Catuscia Palamidessi 
Web: catuscia@.di.unipi.it  
Address: P.O. Box 513, 5600 MB Eindhoven, The Netherlands  Viale Benedetto XV, 3, 16132 Genova, Italy  
Affiliation: 1 Technische Universiteit Eindhoven,  Dipartimento di Informatica e Scienze dell'Informazione, Universita di Genova,  
Abstract: Note: This work was developed during the stay of Catuscia Palamidessi at the Centre for Mathematics and Computer Science, with the support of the Italian CNR (Consiglio Nazionale delle Ricerche) and the ESPRIT project 3020 (Integration). The research of Frank S. de Boer was partially supported by the Dutch REX (Research and Education in Concurrent Systems) project. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Baeten, J.C.M. , Bergstra, J.A., and Klop, J.W. </author> <year> (1987), </year> <title> On the consistency of Koomen's fair abstraction rule, </title> <booktitle> Theoretical Computer Science 51 (1,2), </booktitle> <pages> 129-176. </pages>
Reference-contexts: Bergstra and Klop (1986) provide a detailed classification of various ACP sublanguages, showing the contribute of each operator to enlarge the set of expressible graphs. However, universality is achieved for ACP o by considering a more abstract notion of equivalence called weak bisimulation congruence <ref> (Baeten, Bergstra, and Klop, 1987) </ref>, and for MEIJE and SCCS with unguarded recursion up to strong bisimulation (de Simone, 1985), This last result does not contradict the results of Baeten, Bergstra, and Klop (1987) and Vaandrager (1992), because unguarded recursion induces an infinitely branching, possibly not recursive, operational semantics.
Reference: <author> Bergstra, J.A., and Klop, J.W. </author> <year> (1986), </year> <title> Process algebra: specification and verification in bisimulation semantics, </title> <booktitle> in "Mathematics and Computer Science II", </booktitle> <publisher> CWI Monographs, North-Holland, </publisher> <pages> 61-94. </pages>
Reference: <author> Boug e, L. </author> <year> (1987), </year> <title> On the existence of generic broadcast algorithms in networks of Communicating Sequential processes, </title> <booktitle> in "Proceedings, Second International Workshop on Distributed Algorithms" Technical Report RUU-CS-87-10, </booktitle> <institution> Dept. of Computer science, University of Utrecht. </institution>
Reference: <author> Boug e, L. </author> <year> (1988a), </year> <title> On the existence of symmetric algorithms to find leaders in networks of communicating sequential processes, </title> <journal> Acta Informatica 25, </journal> <pages> 179-201. </pages>

Reference: <author> Felleisen, M. </author> <year> (1990), </year> <title> On the expressive power of programming languages, </title> <booktitle> in "Proceedings, European Symposium on Programming", </booktitle> <editor> (N. Jones, Ed.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 432, </volume> <publisher> Springer-Verlag, </publisher> <pages> pp. 134 - 151. </pages>
Reference-contexts: The various approaches agree in considering a language L more expressive than L 0 if the constructs of L 0 can be translated in L without requiring a "global reorganization of the entire program" <ref> (Felleisen, 1990) </ref>, i.e., compositionally. Of course, the translation should allow to retrieve the meaning of the original program. In this respect, Felleisen (1990) argues that a basic requirement is the preservation of the (successful) termination.
Reference: <author> Gabbrielli, M., and Levi, G. </author> <year> (1990), </year> <title> Unfolding and fixpoint semantics for concurrent constraint logic programs, </title> <booktitle> in "Proceedings, Second Int. Conf. on Algebraic and Logic Programming", </booktitle> <editor> (H. Kirchner and W. Wechler, Eds.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 463, </volume> <publisher> Springer-Verlag, </publisher> <pages> pp. 204-216. </pages>
Reference-contexts: For instance, when the constraint system is the set of equations on the Herbrand universe, CC A [T corresponds to Atomic Herbrand (Saraswat, 1989), to ccH <ref> (Gabbrielli and levi, 1990) </ref> and to the language of Gaifman, Maher, and Shapiro (1989), which is a refined version of Flat CP (Shapiro, 1989).
Reference: <author> Gaifman, H., Maher, M.J., and Shapiro, E. </author> <year> (1989), </year> <title> Reactive behaviour semantics for concurrent constraint logic programs. </title> <booktitle> in "Proceedings, North American Conference on Logic Programming", </booktitle> <editor> (E. Lusk and R. Overbeck, Eds.), </editor> <booktitle> Series in Logic Programming, </booktitle> <publisher> The MIT Press. </publisher>
Reference: <author> Gerth, R., Codish, M., Lichtenstein, Y., and Shapiro, E. </author> <year> (1988), </year> <title> Fully abstract denotational semantics for Concurrent Prolog, </title> <booktitle> in "Proceedings, Third IEEE Symposium on Logic in Computer Science" , IEEE Computer Society Press, </booktitle> <address> New York, </address> <pages> pp. 320-335. </pages>
Reference: <author> Herlihy, </author> <title> M.P. (1988), Impossibility and universality results for wait-free synchronization, </title> <booktitle> in "Proceedings, Sixth Annual ACM Symposium on Principles of Distributed Computing", </booktitle> <pages> pp. 276-290. </pages>
Reference-contexts: This closure property gives rise to an observable distinction that cannot be hidden by the decoder, when P1,P2 and P3 are required. 1.5 Related work The expressiveness of various communication and synchronization constructs have been investigated on the basis of some specific analysis of the operational properties <ref> (Herlihy, 1988) </ref>. Bouge (1988a) has presented separation results for three CSP dialects which closely correspond to the languages we study: CSP with input and output guards, CSP with input guards, and CSP with no communication primitives in the guards.
Reference: <author> Landin, P.J. </author> <year> (1966), </year> <title> The next 700 programming languages, </title> <journal> Communications of the ACM, </journal> <volume> 3 (9), </volume> <pages> 157-166. </pages>
Reference: <author> Maher, M.J. </author> <year> (1987), </year> <title> Logic semantics for a class of committed-choice programs, </title> <booktitle> in "Proceedings, Fourth International Conference on Logic Programming", </booktitle> <editor> (J.-L. Lassez, Ed.), </editor> <booktitle> Series in Logic Programming, </booktitle> <publisher> The MIT Press, </publisher> <pages> pp. 858-876. </pages>
Reference: <author> McAllester, M., Panangaden, P., and Shanbhogue, V. </author> <year> (1988), </year> <title> Nonexpressibility of fairness and signaling, </title> <booktitle> in "Proceedings, IEEE Foundations of Computer Science", </booktitle> <editor> Panangaden, P., and Shanbhogue, V. </editor> <year> (1992), </year> <journal> Information and Computation, </journal> <volume> 98 (1), </volume> <pages> 99-131. </pages>
Reference: <author> Panangaden, P., and Stark, E.W. </author> <year> (1988), </year> <title> Computations, residuals, and the power of indeterminacy, </title> <booktitle> in "Proceedings, Fifteenth International Colloquium on Automata, Languages and Programming", (T. Lepisto and A. </booktitle>
Reference: <editor> Salomaa, Eds.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 317, </volume> <publisher> Springer-Verlag, </publisher> <pages> pp. 439-454. </pages>
Reference: <author> Parrow, J. </author> <year> (1989), </year> <title> The expressive power of parallelism, </title> <booktitle> in "Proceedings, PARLE 89", Lecture Notes in Computer Science, </booktitle> <volume> Vol. 366, </volume> <publisher> Springer-Verlag, </publisher> <pages> pp. 389-405. </pages>
Reference: <author> Paterson, M.S., and Hewitt, C.E. </author> <year> (1970), </year> <title> Comparative schematology, </title> <booktitle> in "Proceedings, ACM Conference on Concurrent Systems and Parallel Computation", </booktitle> <pages> pp. 119-127. </pages>
Reference: <author> Reynolds, J.C. </author> <year> (1970), </year> <title> GEDANKEN a symple typeless language based on the principle of completeness and the reference concept, </title> <journal> Communications of the ACM, </journal> <volume> 5 (13), </volume> <pages> 308-319. </pages>
Reference: <author> Reynolds, J.C. </author> <year> (1981), </year> <title> The essence of Algol, in Algorithmic Languages, </title> <editor> (J.W. de Bakker and van Vliet, Eds.), </editor> <publisher> North-Holland, Amsterdam, </publisher> <pages> pp. 345-372. </pages>
Reference: <editor> Saraswat, </editor> <address> V.A. </address> <year> (1989), </year> <title> Concurrent Constraint Programming, </title> <type> PhD thesis, </type> <institution> Carnegie-Mellon University, </institution> <month> January </month> <year> 1989, </year> <note> Published by The MIT Press, </note> <institution> U.S.A., </institution> <year> 1992. </year>
Reference-contexts: This class can be seen as a particular instance of the cc paradigm <ref> (Saraswat, 1989) </ref>, and it includes a large number of flat concurrent logic languages. For instance, when the constraint system is the set of equations on the Herbrand universe, CC A [T corresponds to Atomic Herbrand (Saraswat, 1989), to ccH (Gabbrielli and levi, 1990) and to the language of Gaifman, Maher, and <p> This class can be seen as a particular instance of the cc paradigm <ref> (Saraswat, 1989) </ref>, and it includes a large number of flat concurrent logic languages. For instance, when the constraint system is the set of equations on the Herbrand universe, CC A [T corresponds to Atomic Herbrand (Saraswat, 1989), to ccH (Gabbrielli and levi, 1990) and to the language of Gaifman, Maher, and Shapiro (1989), which is a refined version of Flat CP (Shapiro, 1989). The language CC A corresponds to Eventual Herbrand (Saraswat, 1989) and to Flat GHC in its earlier version (Ueda, 1987). 1.3 Technical results <p> set of equations on the Herbrand universe, CC A [T corresponds to Atomic Herbrand <ref> (Saraswat, 1989) </ref>, to ccH (Gabbrielli and levi, 1990) and to the language of Gaifman, Maher, and Shapiro (1989), which is a refined version of Flat CP (Shapiro, 1989). The language CC A corresponds to Eventual Herbrand (Saraswat, 1989) and to Flat GHC in its earlier version (Ueda, 1987). 1.3 Technical results We show that the definition of modular embedding "makes sense" by proving that CC ; cannot embed CC A (Flat GHC) and that CC A cannot embed CC A [T (Flat CP) (separation results).
Reference: <author> Saraswat, V.A., and Rinard, M. </author> <year> (1990), </year> <title> Concurrent constraint programming, </title> <booktitle> in "Proceedings, Seventeenth ACM Symposium on Principles of Programming Languages", </booktitle> <address> New York, </address> <pages> pp. 232-245. </pages> <address> 23 Shapiro, E.Y. </address> <year> (1989), </year> <title> The family of concurrent logic programming languages, </title> <journal> ACM Computing Surveys, </journal> <volume> 21 (3), </volume> <pages> 412-510. </pages>
Reference: <author> Shapiro, E.Y. </author> <year> (1991), </year> <title> Separating concurrent languages with categories of language embeddings, </title> <booktitle> in "Proceedings, 23 rd Annual ACM Symposium on Theory of Computing", </booktitle> <pages> pp. 198-208. </pages>
Reference-contexts: The third notion (fully abstract embedding) requires the compiler to preserve the non-equivalence of statements with respect to the fully abstract semantics. This notion of embedding has been applied to show various positive and negative results in <ref> (Shapiro, 1991) </ref> and (Shapiro, 1992). 1.6 Plan of the paper This paper is organized as follows. Next section introduces the class CC G and its standard semantics, specified via a transition system. In Section 3 this transition system is enriched so to derive a compositional semantics based on linear sequences.
Reference: <author> Shapiro, E.Y. </author> <year> (1992), </year> <title> Embeddings among concurrent programming languages, </title> <booktitle> in "Proceedings, CONCUR 92", </booktitle> <editor> (W.R. Cleaveland, Ed.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 630, </volume> <publisher> Springer-Verlag, </publisher> <pages> pp. 486-503. </pages>
Reference-contexts: The third notion (fully abstract embedding) requires the compiler to preserve the non-equivalence of statements with respect to the fully abstract semantics. This notion of embedding has been applied to show various positive and negative results in (Shapiro, 1991) and <ref> (Shapiro, 1992) </ref>. 1.6 Plan of the paper This paper is organized as follows. Next section introduces the class CC G and its standard semantics, specified via a transition system. In Section 3 this transition system is enriched so to derive a compositional semantics based on linear sequences.
Reference: <author> Stark, E.W. </author> <year> (1990), </year> <title> On the relations computed by a class of concurrent automata, </title> <booktitle> in "Proceedings, Seventeenth ACM Symposium on Principles of Programming Languages", </booktitle> <address> New York, </address> <pages> pp. 329-340. </pages>
Reference: <author> Steele, G.L.Jr., and Sussman, G.J. </author> <year> (1976), </year> <title> Lambda: The ultimate imperative, </title> <type> Technical Report Memo 353, </type> <institution> MIT AI Lab. </institution>
Reference: <author> Ueda, K. </author> <year> (1987), </year> <title> Guarded Horn Clauses, in "Concurrent Prolog: Collected Papers", </title> <editor> (E. Y. Shapiro, Ed.), </editor> <booktitle> Series in Logic Programming, </booktitle> <publisher> The MIT Press. </publisher>
Reference-contexts: The language CC A corresponds to Eventual Herbrand (Saraswat, 1989) and to Flat GHC in its earlier version <ref> (Ueda, 1987) </ref>. 1.3 Technical results We show that the definition of modular embedding "makes sense" by proving that CC ; cannot embed CC A (Flat GHC) and that CC A cannot embed CC A [T (Flat CP) (separation results).
Reference: <author> Vaandrager, F. </author> <year> (1992), </year> <title> Expressiveness results for process algebras, </title> <booktitle> in "Proceedings, REX Workshop on `Semantics: Foundations and Applications' " Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag. </publisher>
References-found: 26

