URL: http://www.ai.mit.edu/people/max/webPub/aaai93.ps.gz
Refering-URL: http://www.ai.mit.edu/people/max/pub.html
Root-URL: 
Email: sugiura@btl.cl.nec.co.jp  
Title: Comprehensibility Improvement of Tabular Knowledge Bases  
Author: Atsushi Sugiuray Maximilian Riesenhuberz Yoshiyuki Kosekiy Johann Wolfgang Goethe-Univ. Robert-Mayer-Strasse - 
Address: 4-1-1 Miyazaki Miyamae-ku Kawasaki 216 JAPAN  60054 Fed. Rep. of GERMANY  
Affiliation: yC&C Systems Res. Lab. NEC Corp.  zInst. of Theoretical Physics  Frankfurt am Main  
Abstract: This paper discusses the important issue of knowledge base comprehensibility and describes a technique for comprehensibility improvement. Comprehensibility is often measured by simplicity of concept description. Even in the simplest form, however, there will be a number of different DNF (Disjunctive Normal Form) descriptions possible to represent the same concept, and each of these will have a different degree of comprehensibility. In other words, simplification does not necessarily guarantee improved comprehensibility. In this paper, the authors introduce three new comprehensibility criteria, similarity, continuity, and conformity, for use with tabular knowledge bases. In addition, they propose an algorithm to convert a decision table with poor comprehensibility to one with high comprehensibility, while preserving logical equivalency. In experiments, the algorithm generated either the same or similar tables to those generated by humans. 
Abstract-found: 1
Intro-found: 1
Reference: [Cragun 1987] <author> Cragun,B.J. </author> <year> 1987. </year> <title> A decision-table-based processor for checking completeness and consistency in rule-based expert systems. </title> <booktitle> International Journals of Man-Machine Studies 26(5) </booktitle> <pages> 3-19. </pages>
Reference-contexts: Introduction Two major requirements for knowledge base are that it contain only correct knowledge and that it be comprehensible. Several techniques have been reported regarding the verification of correctness, including the completeness and consistency checking <ref> [Cragun 1987, Nguyen et al. 1985] </ref>. However, little work has been reported concerning the maintenance or improvement of comprehensibility. Comprehensibility is critical, because it strongly affects efficiency of construction and maintenance of knowledge bases. <p> Bonding-area Paper Leather Plas tic mal Indus trial Large Small Bond-A !- !_ !_ ! ! ! !- Bond-B !- !_ !_ !_ !- !_ !- Bond-B ! !- !_ ! ! !- !_ Bond-B ! !- !_ !- !_ !_ !- Bond-C !_ !_ ! !- !_ ! !- <ref> [Cragun 1987, Koseki, Nakakuki, & Tanaka 1991] </ref>. A decision table represents a set of concept functions, expressed in DNF. This construct enables the handling of disjunctive concepts which have multiple-value attributes. Each concept function consists of a number of disjuncts, called cubes.
Reference: [Hong, Cain, & Ostapko 1974] <author> Hong,S.J.; Cain,R.G.; and Ostapko,D.L. </author> <year> 1974. </year> <title> MINI:A Heuristic Approach for Logic Minimization. </title> <journal> IBM Journal of Research and Development :443-458. </journal>
Reference-contexts: In addition, the authors describe an algorithm to convert a decision table with poor comprehensibility to one with high comprehensibility, while preserving logical equivalency. This conversion is accomplished by using MINI-like logic minimization techniques <ref> [Hong, Cain, & Ostapko 1974] </ref>, and it involves as well the use of a number of different heuristics. <p> Table conversion is accomplished by the techniques used in logic minimization algorithm MINI: disjoint sharp operation, Expansion, and Reduction <ref> [Hong, Cain, & Ostapko 1974] </ref>. In these operations, attributes are required to be ordered, and this order affects concept function forms in a resultant table. <p> To reduce this to a modest amount of computational time, it uses disjoint sharp operation F # fl G, where F and G are lists of cubes (details are shown in <ref> [Hong, Cain, & Ostapko 1974] </ref>). In the modification, the following feature of the # fl operation is utilized: U # fl G with generates more !-s in the attribute placed in the earlier position of , where U is universe.
Reference: [Coulon & Kayser 1978] <author> Coulon,D.; and Kayser,D. </author> <year> 1978. </year> <title> Learning criterion and inductive behavior. </title> <booktitle> Pattern Recognition 10(1) </booktitle> <pages> 19-25. </pages>
Reference-contexts: However, the actual work of modifying knowledge descriptions so as to improve the comprehensibility can prove to be a serious burden for the knowledge engineers who must manage knowledge bases. Purpose of this research is to automate such tasks. In past work <ref> [Michalski, Carbonell, & Michell 1983, Coulon & Kayser 1978] </ref>, the one and only method to improve the comprehensibility of a knowledge base was to simplify the concept descriptions in it. <p> The second criteria employs general rules to facilitate the comparison of different concepts, whereas the last two require some background knowledge, which is characteristics of attributes and their values. Table Size Preference criteria for human comprehensibility are commonly based on the knowledge description length (for example, <ref> [Michalski, Carbonell, & Michell 1983, Coulon & Kayser 1978] </ref>). Some inductive learning algorithms [Michalski, Carbonell, & Michell 1983, Quinlan 1986] reduce the knowledge base size to obtain simple knowledge expressions. As the conventional criteria, the authors define table size as one of the comprehensibility factors.
Reference: [Koseki, Nakakuki, & Tanaka 1991] <author> Koseki,Y.; Nakakuki,Y.; and Tanaka,M. </author> <year> 1991. </year> <title> DT:A Classification Problem Solver with Tabular-Knowledge acquisition. </title> <booktitle> Proceedings of Third International Conference on Tools for Artificial Intelligence 156-163. </booktitle> <editor> [Michalski, Carbonell, & Michell 1983] Michalski,R.S.; Carbonell,J.G.; and Michell,T.M. </editor> <year> 1983. </year> <title> A Theory and Methodology of Inductive Leaning, Machine Learning: An Artificial Intelle-gence Approach Chapter 4, </title> <publisher> Tioga Press, Palo Alto, </publisher> <pages> 83-134. </pages>
Reference-contexts: Bonding-area Paper Leather Plas tic mal Indus trial Large Small Bond-A !- !_ !_ ! ! ! !- Bond-B !- !_ !_ !_ !- !_ !- Bond-B ! !- !_ ! ! !- !_ Bond-B ! !- !_ !- !_ !_ !- Bond-C !_ !_ ! !- !_ ! !- <ref> [Cragun 1987, Koseki, Nakakuki, & Tanaka 1991] </ref>. A decision table represents a set of concept functions, expressed in DNF. This construct enables the handling of disjunctive concepts which have multiple-value attributes. Each concept function consists of a number of disjuncts, called cubes. <p> Conclusion This paper presented new comprehensibility criteria regarding concept function forms, and an algorithm for automatically producing comprehensible forms of concept functions. This algorithm is implemented on an expert-system shell DT, which handles classification problems on the decision table <ref> [Koseki, Nakakuki, & Tanaka 1991] </ref>; its usefulness has been demonstrated in several real problems. Since the concept functions on decision table format can be easily converted to the one on production rule format, this algorithm can be applied to the knowledge bases constructed by production rules.
Reference: [Nguyen et al. 1985] <author> Nguyen,T.A.; Perkins,W.A.; Laf-fey,T.J.; and Pecora,D. </author> <title> 1985 Checking an Expert Systems Knowledge Base for Consistency and Completeness. </title> <booktitle> Proceedings of the Ninth International Joint Conference on Artificial Intelligence 375-378. </booktitle>
Reference-contexts: Introduction Two major requirements for knowledge base are that it contain only correct knowledge and that it be comprehensible. Several techniques have been reported regarding the verification of correctness, including the completeness and consistency checking <ref> [Cragun 1987, Nguyen et al. 1985] </ref>. However, little work has been reported concerning the maintenance or improvement of comprehensibility. Comprehensibility is critical, because it strongly affects efficiency of construction and maintenance of knowledge bases.
Reference: [Nu~nez 1991] <author> Nu~nez,M. </author> <year> 1991. </year> <title> The Use of Background Knowledge in Decision Tree Induction, </title> <booktitle> Machine Learning 6(3) </booktitle> <pages> 231-250. </pages>
Reference-contexts: From another viewpoint, most induction algorithms generate decision trees, not decision tables. Generated decision trees may have a minimum number of nodes and leaves. However, this does not mean a minimum number of cubes. EG2 <ref> [Nu~nez 1991] </ref> uses background knowledge, which is IS-A hierarchy of values, to simplify the decision tree and to obtain a more comprehensible knowledge expression. However, EG2 requires much background knowledge for such simplification.
Reference: [Quinlan 1986] <author> Quinlan,J.R. </author> <year> 1986. </year> <title> Induction of Decision Trees. </title> <booktitle> Machine Learning 1(1) </booktitle> <pages> 81-106. </pages>
Reference-contexts: Table Size Preference criteria for human comprehensibility are commonly based on the knowledge description length (for example, [Michalski, Carbonell, & Michell 1983, Coulon & Kayser 1978]). Some inductive learning algorithms <ref> [Michalski, Carbonell, & Michell 1983, Quinlan 1986] </ref> reduce the knowledge base size to obtain simple knowledge expressions. As the conventional criteria, the authors define table size as one of the comprehensibility factors. <p> The resultant table can be obtained in 90 seconds (80 seconds by MINI). This time is not too long and actually much shorter than the time required for modification by a knowledge engineer. Related Work Inductive learning algorithms, like ID3 <ref> [Quinlan 1986] </ref>, can also improve the comprehensibility of concept functions. However, the produced concept functions are often incomprehensible, because of the lack of background knowledge and the comprehensibility criteria; they only use the description length criteria implicitly. From another viewpoint, most induction algorithms generate decision trees, not decision tables.
References-found: 7

