URL: http://www.wi.leidenuniv.nl/home/joost/icann95.ps.gz
Refering-URL: http://www.wi.leidenuniv.nl/home/joost/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: E-mail: markov@cs.ruu.nl  
Title: Robot Motion Planning in Unknown Environments using Neural Networks 1  
Author: Arno J. Knobbe, Joost N. Kok, Mark H. Overmars 
Address: P.O.Box 80.089, 3508 TB Utrecht, The Netherlands,  
Affiliation: Department of Computer Science, Utrecht University,  
Abstract: We present two approaches to the motion planning problem for car-like robots using an extended Kohonen Self-Organizing Map (SOM). No prior knowledge about the positions of obstacles is assumed. We incrementally build a path from the starting point of the robot towards the goal, using the SOM as a situation-action map. The first approach uses a trial and error strategy to train the SOM. This method is simple but is not always able to escape from dead-end situations. As an improvement a new training-algorithm is proposed that uses edge detection on the visible objects to generate possible motions. Backtracking is used to choose from different possibilities. Experiments show that this new method realizes a considerable increase in performance and speed.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Heikkonen, P. Koikkalainen, E. Oja. </author> <title> From situations to actions: motion behavior learning by self-organization. </title> <booktitle> Proceedings of the ICANN 1993, </booktitle> <pages> 262-267. </pages>
Reference-contexts: Many approaches to this problem have been proposed [3]. Recently, neural network techniques have been applied in various ways to solve motion planning and related problems in robotics <ref> [1, 4, 5, 6, 7] </ref>. In particular, the Kohonen Self-Organizing Map (SOM) [2] has been used to create a map of the free space of an environment [5, 7]. <p> A SOM will be trained to combine these two steps in one single computation. 2 Learning Situations We use the SOM as a self-organizing, adaptive look-up table of situations <ref> [1, 4] </ref>, where each unit u in the SOM has a codebook-vector w u (input-vector) as well as a datastructure o u (output-value). <p> For symmetrical robots, considering the mirrored situations as well reduces the overall error (fi's) as expected. 3 Method 1: Trial and Error This section describes an on-line, unsupervised training approach to the motion planning problem. It was proposed by Heikkonen et al. <ref> [1] </ref> as a simple trial and error scheme which learns to avoid obstacles. In the original paper no specific shape or restrictions on motions were assumed. We have tested the approach for a rectangular car-like robot. It turned out that, contrary to the claims made in [1], the method is only <p> by Heikkonen et al. <ref> [1] </ref> as a simple trial and error scheme which learns to avoid obstacles. In the original paper no specific shape or restrictions on motions were assumed. We have tested the approach for a rectangular car-like robot. It turned out that, contrary to the claims made in [1], the method is only successful in simple environments. The robot moves in an unknown environment, controlled by the SOM. <p> The algorithm has been implemented, and a number of experiments in different simulated environments were performed. We asume sensory data to be noise-free. A SOM of 10 fi 10 units arranged in a rectangular lattice was used in accordance with <ref> [1] </ref>. The system was capable of learning simple problems involving convex obstacles with sufficient free space between them. Also, the system could generalise between different environments as long as the encountered obstacles were similar. Typical runs after being trained took approximately 30 seconds. <p> The training of the output-value is incorrect in situations with multiple options. If two similar situations with different actions are trained to the same unit, then the resulting action will probably not be correct. (In fact <ref> [1] </ref> describes training both the actual and mirrored situation-action pair, which may lead to erroneous results in symmetric situations with asymmetric actions). 5. Learning from mistakes leads to conservative solutions. The robot tends to stay in open spaces, avoiding denser parts of the environment. 6. <p> If planning should be on-line then having to backtrack less often will be preferable because the actual time needed to move the robot will dominate the time needed for planning. 5 Conclusion We have proposed a new approach to motion planning using neural networks, which improves the algorithm described in <ref> [1] </ref>. The new algorithm has a number of advantages, most important of which are: backtracking from dead-end situations, a separate training-phase which guarantees correct training, applicability in both on-line planning and off-line planning, and a considerable improvement in efficiency.
Reference: [2] <author> T. Kohonen. </author> <title> Self-organization and associative memory. </title> <publisher> Springer, </publisher> <year> 1989. </year>
Reference-contexts: Many approaches to this problem have been proposed [3]. Recently, neural network techniques have been applied in various ways to solve motion planning and related problems in robotics [1, 4, 5, 6, 7]. In particular, the Kohonen Self-Organizing Map (SOM) <ref> [2] </ref> has been used to create a map of the free space of an environment [5, 7]. Many known techniques require complete knowledge about position and shape of every obstacle and are therefore not applicable in situations where such prior information is lacking.
Reference: [3] <author> J. Latombe. </author> <title> Robot motion planning. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year>
Reference-contexts: Many approaches to this problem have been proposed <ref> [3] </ref>. Recently, neural network techniques have been applied in various ways to solve motion planning and related problems in robotics [1, 4, 5, 6, 7]. In particular, the Kohonen Self-Organizing Map (SOM) [2] has been used to create a map of the free space of an environment [5, 7]. <p> The only type of sensing we require is that the robot is able to determine the distance to the first obstacle in a number of directions, defining the visible area, plus the direction to the goal. In this paper we consider a special class of robots called car-like robots <ref> [3] </ref>. These are robots that have non-holonomic constraints: they can only move forward or backward while making a curve with a bounded radius, in the same way as real cars. Car-like robots are particularly interesting for our approach because of their restricted set of motions. <p> The algorithm is slow, both during training and testing, because only tiny fixed steps are made and only part of the time is spent on training. It turns out that the method behaves worse than a simple potential field approach without backtracking <ref> [3] </ref>. Hence, it is not very practical. 4 Method 2: Edge Detection We propose a new method of assigning the appropriate actions to the set of prototype situations stored in the SOM. <p> By finding a set of motions instead of a single motion, we hope to overcome the problems of traditional reflexive methods such as potential field methods <ref> [3] </ref>. We start by positioning the robot at random configurations in a (simulated) training-environment and use the associated situations to train the SOM, as explained in Section 2. After training we consider each prototype situation w u and compute a large number of motions in w u .
Reference: [4] <author> H. Ritter, Th. Martinez, K. Schulten. </author> <title> Neural computation and self-organizing maps: an introduction. </title> <publisher> Addison-Wesley Publishing Comp., </publisher> <year> 1992. </year>
Reference-contexts: Many approaches to this problem have been proposed [3]. Recently, neural network techniques have been applied in various ways to solve motion planning and related problems in robotics <ref> [1, 4, 5, 6, 7] </ref>. In particular, the Kohonen Self-Organizing Map (SOM) [2] has been used to create a map of the free space of an environment [5, 7]. <p> A SOM will be trained to combine these two steps in one single computation. 2 Learning Situations We use the SOM as a self-organizing, adaptive look-up table of situations <ref> [1, 4] </ref>, where each unit u in the SOM has a codebook-vector w u (input-vector) as well as a datastructure o u (output-value).
Reference: [5] <author> J. Vleugels, J. Kok, M. Overmars. </author> <title> A Self-Organizing Neural Network for Robot Motion Planning. </title> <booktitle> Proceedings of the ICANN 1993, </booktitle> <pages> 281-284. </pages>
Reference-contexts: Many approaches to this problem have been proposed [3]. Recently, neural network techniques have been applied in various ways to solve motion planning and related problems in robotics <ref> [1, 4, 5, 6, 7] </ref>. In particular, the Kohonen Self-Organizing Map (SOM) [2] has been used to create a map of the free space of an environment [5, 7]. <p> Recently, neural network techniques have been applied in various ways to solve motion planning and related problems in robotics [1, 4, 5, 6, 7]. In particular, the Kohonen Self-Organizing Map (SOM) [2] has been used to create a map of the free space of an environment <ref> [5, 7] </ref>. Many known techniques require complete knowledge about position and shape of every obstacle and are therefore not applicable in situations where such prior information is lacking. We describe a new approach to solve the motion planning problem in R 2 , with only locally acquired information about obstacles.
Reference: [6] <author> J. Tani, N. Fukumura. </author> <title> Learning goal-directed sensory-based navigation of a mobile robot. </title> <booktitle> Neural networks, </booktitle> <volume> Vol 7, No 3, </volume> <pages> 553-563, </pages> <year> 1994. </year>
Reference-contexts: Many approaches to this problem have been proposed [3]. Recently, neural network techniques have been applied in various ways to solve motion planning and related problems in robotics <ref> [1, 4, 5, 6, 7] </ref>. In particular, the Kohonen Self-Organizing Map (SOM) [2] has been used to create a map of the free space of an environment [5, 7]. <p> Hence, sensing the visible area in the forward direction is sufficient. In the simplified case of a point-robot with unlimited motions, the interesting motions can be determined directly by considering local maxima in distances to the first obstacle <ref> [6] </ref>. <p> So for each situation we get a set of a few (typically 3) possible motions. The notion of reporting motions between edges corresponds to using local maxima as described in <ref> [6] </ref>, only generalised to the case of car-like polygonal robots. Finding a path is now done by searching the environment in a depth first manner, guided by the SOM.
Reference: [7] <author> U. Zimmer, E. von Puttkamer. </author> <title> Realtime-learning on an autonomous mobile robot with neural networks. </title> <booktitle> Proceedings Euromicro '94. </booktitle>
Reference-contexts: Many approaches to this problem have been proposed [3]. Recently, neural network techniques have been applied in various ways to solve motion planning and related problems in robotics <ref> [1, 4, 5, 6, 7] </ref>. In particular, the Kohonen Self-Organizing Map (SOM) [2] has been used to create a map of the free space of an environment [5, 7]. <p> Recently, neural network techniques have been applied in various ways to solve motion planning and related problems in robotics [1, 4, 5, 6, 7]. In particular, the Kohonen Self-Organizing Map (SOM) [2] has been used to create a map of the free space of an environment <ref> [5, 7] </ref>. Many known techniques require complete knowledge about position and shape of every obstacle and are therefore not applicable in situations where such prior information is lacking. We describe a new approach to solve the motion planning problem in R 2 , with only locally acquired information about obstacles.
References-found: 7

