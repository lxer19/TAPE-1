URL: http://www.cs.concordia.ca/~faculty/gregb/home/PS/ooaf-doc-frameworks-paper.ps.gz
Refering-URL: http://www.cs.concordia.ca/~faculty/gregb/home/paper.html
Root-URL: http://www.cs.concordia.ca
Email: Email: gregb@cs.concordia.ca  
Title: Documenting Frameworks to Assist Application Developers large learning curve faced by the first-time user of
Author: Greg Butler and Pierre Denommee 
Note: The  is that it should be as simple as possible to understand and customize.  
Address: Montreal, Quebec, H3G 1M8 Canada  
Affiliation: Department of Computer Science Concordia University  
Abstract: A framework is a collection of abstract classes that provides an infrastructure common to a family of applications. The design of the framework fixes certain roles and responsibilities amongst the classes, as well as standard protocols for their collaboration. The variability within the family of applications is factored into so-called "hotspots" [16], and the framework provides simple mechanisms to customize each hotspot. Customizing is typically done by subclassing an existing class of the framework and overriding a small number of methods. Sometimes, however, the framework insists that the customization preserves a protocol of collaboration between several subclasses, so customization requires the parallel development of these subclasses and certain of their methods. A framework exists to support the development of a family of applications. Reuse involves an application developer, or team of application developers, customizing the framework to construct one concrete application. Typically a framework is developed by expert designers who have a deep knowledge of the application domain and long experience of software design. On the other hand, a typical application developer who reuses the framework is less experienced and less knowledgeable of the domain. This is the situation desired by organizations since they wish to leverage the expertise of their core software designers. However, a framework is not an easy thing to understand when one first uses it: the design is very abstract, to factor out commonality; the design is incomplete, requiring additional subclasses to create an application; the design provides flexibility for several hotspots, not all of which are needed in the application at hand; and the collaborations and the resulting dependencies between classes can be indirect and obscure. 
Abstract-found: 1
Intro-found: 0
Reference: [1] <author> Ackermann, P. </author> <title> Developing Object-Oriented Multimedia Software. </title> <publisher> dpunkt Publishing, </publisher> <address> Heidelberg, </address> <year> 1996. </year>
Reference: [2] <author> Arango, G., Schoen, E., and Pettengill, R. </author> <title> A process for consolidating and reusing design knowledge. </title> <booktitle> In Proceedings of 15th International Conference on Software Engineering. </booktitle> <publisher> IEEE Computer Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1993, </year> <pages> pp. 231-242. 8 </pages>
Reference: [3] <author> Beck, K. and Johnson, R. </author> <title> Patterns generate architectures. In Object-Oriented Program--ming. </title> <editor> M. Tokoro and R. Pareschi (eds), </editor> <publisher> LNCS 821, Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1994, </year> <pages> pp. 139-149. </pages>
Reference: [4] <author> Buhr, R.J.A. and Casselman, </author> <title> R.S. Architectures with pictures. </title> <booktitle> In Proceedings of OOP-SLA'92. ACM/SIGPLAN, </booktitle> <address> New York, </address> <year> 1992, </year> <pages> pp. 466-483. </pages>
Reference: [5] <author> Cotter, S. </author> <title> with Potel, </title> <editor> M. </editor> <booktitle> Inside Taligent Technology. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1995. </year>
Reference: [6] <author> Gamma, E., Helm, R., Johnson, R., and Vlissides, J. </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1994. </year>
Reference: [7] <author> Helm, R., Holland, I.M., and Gangopadhyay, D. </author> <title> Contracts: specifying behavioral compositions in object-oriented systems. </title> <booktitle> In Proceedings of OOPSLA'90. ACM/SIGPLAN, </booktitle> <address> New York, </address> <year> 1990, </year> <pages> pp. 169-180. </pages>
Reference: [8] <author> Holland, </author> <title> I.M. Specifying reusable components with contracts. </title> <booktitle> In ECOOP'92. LCNS 615, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1992, </year> <pages> pp. 287-308. </pages>
Reference: [9] <author> Jacobson, I., Christorson, M., Jonsson, P. and Overgaard, G. </author> <title> Object-Oriented Software Engineering: A Use Case Driven Approach. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1992. </year>
Reference: [10] <author> Johnson, R. </author> <title> Documenting frameworks using patterns. </title> <booktitle> In Proceedings of OOPSLA'92. ACM/SIGPLAN, </booktitle> <address> New York, </address> <year> 1992, </year> <pages> pp. 63-76. </pages>
Reference: [11] <author> Lajoie, R. and Keller, R.K. </author> <title> Design and reuse in object-oriented frameworks: Patterns, contracts, and motifs in concert. In Object-Oriented Technology for Database and Software Systems. V.S. </title> <editor> Alagar and R. Missaoui (eds). </editor> <publisher> World Scientific Publishing, </publisher> <address> Singa-pore, </address> <year> 1995, </year> <pages> pp. 295-312. </pages>
Reference: [12] <author> Lewis, T. </author> <title> Object-Oriented Application Frameworks. </title> <publisher> Manning Publications, </publisher> <address> Greenwich, CT, </address> <year> 1995. </year>
Reference: [13] <author> Linn, M.C. and Clancy, M.J. </author> <title> The case for case studies in programming problems. </title> <journal> Comm. of ACM 35, </journal> <month> 3 (Mar. </month> <year> 1992) </year> <month> 121-132. </month>
Reference: [14] <author> Meusel, M., Czarnecki, K. and Kopf, W. </author> <title> A model for structuring user documentation of object-oriented frameworks using patterns and hypertext. </title> <booktitle> Proceedings of ECOOP'97. LCNS 1241, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1997, </year> <pages> pp. 496-510. </pages>
Reference: [15] <author> Meyer, B. </author> <title> Applying design by contract. </title> <booktitle> IEEE Computer 25, </booktitle> <address> 10 (Oct. </address> <year> 1992) </year> <month> 40-51. </month>
Reference: [16] <author> Pree, W. </author> <title> Design Patterns for Object-Oriented Software Development. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1995. </year>
Reference: [17] <author> Schappert, A., Sommerlad, P. and Pree, W. </author> <title> Automated framework development. </title> <booktitle> Symposium on Software Reusability (SSR'95), ACM Software Engineering Notes (Aug. </booktitle> <year> 1995) </year> <month> 123-127. </month>
Reference: [18] <author> Sparks, S., Benner, K., and Faris, C. </author> <title> Managing object-oriented framework reuse. </title> <booktitle> IEEE Computer 29, </booktitle> <month> 9 (Sep. </month> <year> 1996) </year> <month> 52-61. 10 </month>
References-found: 18

