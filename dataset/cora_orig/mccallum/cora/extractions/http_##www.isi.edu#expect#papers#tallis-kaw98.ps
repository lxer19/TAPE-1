URL: http://www.isi.edu/expect/papers/tallis-kaw98.ps
Refering-URL: http://www.isi.edu/expect/papers/papers-expect.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: tallis@isi.edu  
Title: A Script-Based Approach to Modifying Knowledge-Based Systems  
Author: Marcelo Tallis 
Note: In Proceedings of the 9th Banff Knowledge Acquisition for Knowledge-Based Systems Workshop (KAW-98), April 1998,  
Address: 4676 Admiralty Way, Marina del Rey, CA 90292, USA,  Banff, Alberta, Canada  
Affiliation: Department of Computer Science and Information Sciences Institute University of Southern California  
Abstract: Modifying knowledge-based systems (KBSs) is a complex activity. One of its difficulties is that several related portions of the KBS might have to be changed in order to maintain the coherence of the system. However, it is difficult for users to figure out what has to be changed and how. This paper presents a novel approach for building knowledge acquisition (KA) tools that overcomes some of the limitations of current approaches. In this approach, knowledge of prototypical procedures for modifying KBSs is used to guide users in changing all related portions of a KBS. These procedures, which we call knowledge acquisition scripts (or KA Scripts), capture how related portions of a KBS can be changed coordinately. By using KA scripts, a KA tool would be able to relate individual changes in different parts of a KBS, enabling the analysis of each individual change from the perspective of the overall modification. The paper also describes the implementation of ETM: a script-based tool that builds on the EXPECT framework for building KBSs ( [ Gil, 1994 ] ), discusses how we have addressed some important issues of this approach, and describes a preliminary empirical evaluation of ETM that shows that KA Scripts allow users to perform KBSs modification tasks more efficiently.
Abstract-found: 1
Intro-found: 1
Reference: [ Davis, 1979 ] <author> Randall Davis. </author> <title> Interactive transfer of expertise: Acquisition of new inference rules. </title> <journal> Artificial Intelligence, </journal> <volume> 12(2) </volume> <pages> 121-157, </pages> <year> 1979. </year>
Reference-contexts: These techniques have been used in knowledge base refinement (e.g., TEIRESIAS <ref> [ Davis, 1979 ] </ref> , theory revision (e.g., EITHER [ Ourston and Mooney, 1994 ] , FOCL [ Pazzani and Brunk, 1991 ] ), apprenticeship systems (e.g., ODYSSEUS [ Wilkins, 1990 ] and NeoDIS-CIPLE [ Tecuci, 1992 ] ), and Validation & Verification (e.g., [ O'Keefe and O'Leary, 1993 ] ).
Reference: [ Gil and Melz, 1996 ] <author> Yolanda Gil and Eric Melz. </author> <title> Explicit representations of problem-solving strategies to support knowledge acquisition. </title> <booktitle> In Proceedings of the Thirteenth National Conference on Artificial Intelligence, </booktitle> <address> Portland, OR, </address> <month> August </month> <year> 1996. </year>
Reference: [ Gil and Tallis, 1995 ] <author> Yolanda Gil and Marcelo Tallis. </author> <title> Transaction-Based Knowledge Acquisition: Complex Modifications Made Easier. </title> <booktitle> In Proceedings of the Ninth Knowledge-Acquisition for Knowledge-Based Systems Workshop, </booktitle> <address> Banff, Alberta, Canada, </address> <year> 1995. </year>
Reference-contexts: This approach is being implemented in a KA tool called ETM, a KA tool for modifying KBSs that builds on the EXPECT framework. ETM has been subject to some preliminary evaluations that have shown promising results. In a previous paper ( <ref> [ Gil and Tallis, 1995 ] </ref> ) we introduced the concept of a script-based knowledge acquisition tool and demonstrated it with an initial, simplified prototype. This paper presents recent findings from our work in designing and implementing ETM, a script-based KA tool.
Reference: [ Gil and Tallis, 1997 ] <author> Yolanda Gil and Marcelo Tallis. </author> <title> A script-based approach to modifying knowledge-based systems. </title> <booktitle> In Proceedings of the Fourteenth National Conference on Artificial Intelligence, </booktitle> <address> Providence, RI, </address> <month> July </month> <year> 1997. </year>
Reference-contexts: It discusses the research issues that we face and the right and wrong design decisions that we made. Additionally, it presents the results of our preliminary evaluation of 2 ETM. This paper adds to <ref> [ Gil and Tallis, 1997 ] </ref> the discussion regarding research issues and lessons learned from our experience in building ETM. It also contains a more comprehensive description of ETM. The remainder of this paper is organized as follows.
Reference: [ Gil, 1994 ] <author> Yolanda Gil. </author> <title> Knowledge refinement in a reflective architecture. </title> <booktitle> In Proceedings of the Twelfth National Conference on Artificial Intelligence, </booktitle> <address> Seattle, WA, </address> <year> 1994. </year>
Reference-contexts: There is another class of KA tools which provide support for a wider range of KBSs and modifications (e.g., <ref> [ Gil, 1994, Yost, 1993 ] </ref> ). These tools are independent of the method and do not restrict the type of modifications that can be done. The trade-off for this gain in flexibility is that they provide a weaker support. <p> These tools are independent of the method and do not restrict the type of modifications that can be done. The trade-off for this gain in flexibility is that they provide a weaker support. In EXPECT ( <ref> [ Gil, 1994, Swartout and Gil, 1995 ] </ref> ), the expectations for guiding KBS modification are based on the understanding of the interactions among KBS components. Based in this understanding, EXPECT is able to suggest changes to the KBS that might fix inconsistencies introduced by prior modifications. <p> We have built a script-based KA tool called ETM. ETM is a tool for supporting modifications of EXPECT KBSs which was also built integrated to the EXPECT system ( <ref> [ Swartout and Gil, 1995, Gil, 1994 ] </ref> ). 5 EXPECT: a KBS Framework and Baseline KA tool EXPECT is an environment for building and modifying knowledge-based systems. EXPECT provides three key capabilities: a KBS representation framework, a problem solving environment, and a KA tool.
Reference: [ Johnson and Feather, 1991 ] <author> W. Lewis Johnson and Martin S. Feather. </author> <title> Using evolution transformations to construct specifications. </title> <booktitle> In Automating Software Design, </booktitle> <pages> pages 65-92. </pages> <publisher> AAAI Press, </publisher> <year> 1991. </year>
Reference-contexts: Another example of a script-based KBSE tool is the Knowledge-based Software Assistant (KBSA) and its successor ARIES ( <ref> [ Johnson and Feather, 1991, Johnson et al., 1992 ] </ref> ). The purpose of these tools is to provide integrated support for requirements analysis and specifications development.
Reference: [ Johnson et al., 1992 ] <author> W. Lewis Johnson, Martin S. Father, and David R. Harris. </author> <title> Representation and presentation of requirements knowledge. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 18(10) </volume> <pages> 853-869, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: Another example of a script-based KBSE tool is the Knowledge-based Software Assistant (KBSA) and its successor ARIES ( <ref> [ Johnson and Feather, 1991, Johnson et al., 1992 ] </ref> ). The purpose of these tools is to provide integrated support for requirements analysis and specifications development.
Reference: [ MacGregor, 1991 ] <author> R. MacGregor. </author> <title> The evolving technology of classification-based knowledge representation systems. </title> <editor> In J. Sowa, editor, </editor> <booktitle> Principles of Semantic Networks: Explorations in the Representation of Knowledge. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1991. </year>
Reference-contexts: EXPECT's knowledge bases contain factual domain knowledge and problem solving knowledge. The factual domain knowledge represents concepts, instances, relations, and the constraints among them. It is represented in Loom <ref> [ MacGregor, 1991 ] </ref> , a knowledge representation system from the KL-ONE family. Problem solving knowledge is represented in methods which are procedural descriptions for achieving goals.
Reference: [ Marcus and McDermott, 1989 ] <author> S. Marcus and J. McDermott. </author> <title> SALT: A knowledge acquisition language for propose-and-revise systems. </title> <journal> Artificial Intelligence, </journal> <volume> 39(1) </volume> <pages> 1-37, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: For instance, SALT ( <ref> [ Marcus and McDermott, 1989 ] </ref> ) is a KA tool tailored to the propose-and-revise problem-solving method for solving system-configuration problems. SALT only supports the acquisition of the domain-dependent knowledge used by propose-and-revise such as procedures that propose initial values to different configuration parameters.
Reference: [ O'Keefe and O'Leary, 1993 ] <author> Robert M. O'Keefe and Daniel E. O'Leary. </author> <title> Expert System Verification and Validation: A Survey and Tutorial. </title> <journal> Artificial Intelligence Review, </journal> <volume> 7 </volume> <pages> 3-42, </pages> <year> 1993. </year>
Reference-contexts: in knowledge base refinement (e.g., TEIRESIAS [ Davis, 1979 ] , theory revision (e.g., EITHER [ Ourston and Mooney, 1994 ] , FOCL [ Pazzani and Brunk, 1991 ] ), apprenticeship systems (e.g., ODYSSEUS [ Wilkins, 1990 ] and NeoDIS-CIPLE [ Tecuci, 1992 ] ), and Validation & Verification (e.g., <ref> [ O'Keefe and O'Leary, 1993 ] </ref> ). However, none of them uses a concept similar to our scripts or even considers the context in which errors were produced. This is because the purpose of those techniques is different than ours.
Reference: [ Ourston and Mooney, 1994 ] <author> Dirk Ourston and Raymond J. Mooney. </author> <title> Theory refinement combining analytical and empirical methods. </title> <journal> Artificial Intelligence, </journal> <volume> 66 </volume> <pages> 311-344, </pages> <year> 1994. </year>
Reference-contexts: These techniques have been used in knowledge base refinement (e.g., TEIRESIAS [ Davis, 1979 ] , theory revision (e.g., EITHER <ref> [ Ourston and Mooney, 1994 ] </ref> , FOCL [ Pazzani and Brunk, 1991 ] ), apprenticeship systems (e.g., ODYSSEUS [ Wilkins, 1990 ] and NeoDIS-CIPLE [ Tecuci, 1992 ] ), and Validation & Verification (e.g., [ O'Keefe and O'Leary, 1993 ] ).
Reference: [ Pazzani and Brunk, 1991 ] <author> Michael J. Pazzani and Clifford A. Brunk. </author> <title> Detecting and correcting errors in rule-based expert systems: an integration of empirical and explanation-based learning. </title> <journal> Knowledge acquisition, </journal> <volume> 3(2) </volume> <pages> 157-173, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: These techniques have been used in knowledge base refinement (e.g., TEIRESIAS [ Davis, 1979 ] , theory revision (e.g., EITHER [ Ourston and Mooney, 1994 ] , FOCL <ref> [ Pazzani and Brunk, 1991 ] </ref> ), apprenticeship systems (e.g., ODYSSEUS [ Wilkins, 1990 ] and NeoDIS-CIPLE [ Tecuci, 1992 ] ), and Validation & Verification (e.g., [ O'Keefe and O'Leary, 1993 ] ).
Reference: [ Puerta et al., 1992 ] <author> A. R. Puerta, J. W. Egar, S. W. Tu, and M. </author> <title> A Musen. A multiple-method knowledge-acquisition shell for the automatic generation of knowledge-acquisition tools. </title> <journal> Knowledge Acquisition, </journal> <volume> 4(2) </volume> <pages> 171-196, </pages> <year> 1992. </year>
Reference: [ Runkel and Birmingham, 1993 ] <author> J. T. Runkel and W. P. </author> <title> Birmingham. Knowledge acquisition in the small: Building knowledge-acquisition tools from pieces. </title> <journal> Knowledge acquisition, </journal> <volume> 5(2) </volume> <pages> 221-243, </pages> <year> 1993. </year>
Reference: [ Swartout and Gil, 1995 ] <author> Bill Swartout and Yolanda Gil. </author> <title> EXPECT: Explicit Representations for Flexible Acquisition. </title> <booktitle> In Proceedings of the Ninth Knowledge-Acquisition for Knowledge-Based Systems Workshop, </booktitle> <address> Banff, Alberta, Canada, </address> <year> 1995. </year>
Reference-contexts: These tools are independent of the method and do not restrict the type of modifications that can be done. The trade-off for this gain in flexibility is that they provide a weaker support. In EXPECT ( <ref> [ Gil, 1994, Swartout and Gil, 1995 ] </ref> ), the expectations for guiding KBS modification are based on the understanding of the interactions among KBS components. Based in this understanding, EXPECT is able to suggest changes to the KBS that might fix inconsistencies introduced by prior modifications. <p> We have built a script-based KA tool called ETM. ETM is a tool for supporting modifications of EXPECT KBSs which was also built integrated to the EXPECT system ( <ref> [ Swartout and Gil, 1995, Gil, 1994 ] </ref> ). 5 EXPECT: a KBS Framework and Baseline KA tool EXPECT is an environment for building and modifying knowledge-based systems. EXPECT provides three key capabilities: a KBS representation framework, a problem solving environment, and a KA tool.
Reference: [ Tecuci, 1992 ] <author> G. D. </author> <title> Tecuci. Automating knowledge acquisition as extending, updating, and improving a knowledge base. </title> <journal> IEEE transactions on Systems, Man, and Cybernetics, </journal> <volume> 22(6) </volume> <pages> 1444-1460, </pages> <year> 1992. </year>
Reference-contexts: These techniques have been used in knowledge base refinement (e.g., TEIRESIAS [ Davis, 1979 ] , theory revision (e.g., EITHER [ Ourston and Mooney, 1994 ] , FOCL [ Pazzani and Brunk, 1991 ] ), apprenticeship systems (e.g., ODYSSEUS [ Wilkins, 1990 ] and NeoDIS-CIPLE <ref> [ Tecuci, 1992 ] </ref> ), and Validation & Verification (e.g., [ O'Keefe and O'Leary, 1993 ] ). However, none of them uses a concept similar to our scripts or even considers the context in which errors were produced. This is because the purpose of those techniques is different than ours.
Reference: [ Waters, 1985 ] <author> R. Waters. </author> <title> The programmer`s apprentice: A session with kbemacs. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 11(11) </volume> <pages> 1296-1320, </pages> <month> November </month> <year> 1985. </year>
Reference-contexts: In the case of ETM, the errors to be corrected were introduced during the modification process. Hence, ETM can rely on knowledge about this process in correcting these errors. Some knowledge-based software engineering (KBSE) tools have incorporated a concept similar to our KA Scripts. KBEmacs ( <ref> [ Waters, 1985 ] </ref> ) is a knowledge-based program editor that permits the construction of a program by combining algorithmic fragments (called cliches) from a library.
Reference: [ Wilkins, 1990 ] <author> David C. Wilkins. </author> <title> Knowledge base refinement as improving an incorrect and incomplete domain theory. </title> <booktitle> In Machine Learning: An Artificial Intelligence Approach, </booktitle> <volume> volume 3, </volume> <pages> pages 493-513. </pages> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1990. </year>
Reference-contexts: These techniques have been used in knowledge base refinement (e.g., TEIRESIAS [ Davis, 1979 ] , theory revision (e.g., EITHER [ Ourston and Mooney, 1994 ] , FOCL [ Pazzani and Brunk, 1991 ] ), apprenticeship systems (e.g., ODYSSEUS <ref> [ Wilkins, 1990 ] </ref> and NeoDIS-CIPLE [ Tecuci, 1992 ] ), and Validation & Verification (e.g., [ O'Keefe and O'Leary, 1993 ] ). However, none of them uses a concept similar to our scripts or even considers the context in which errors were produced.
Reference: [ Yost, 1993 ] <author> Gregg R. Yost. </author> <title> Acquiring knowledge in soar. </title> <journal> IEEE Expert, </journal> <volume> 8(3) </volume> <pages> 26-34, </pages> <month> June </month> <year> 1993. </year> <month> 20 </month>
Reference-contexts: There is another class of KA tools which provide support for a wider range of KBSs and modifications (e.g., <ref> [ Gil, 1994, Yost, 1993 ] </ref> ). These tools are independent of the method and do not restrict the type of modifications that can be done. The trade-off for this gain in flexibility is that they provide a weaker support.
References-found: 19

