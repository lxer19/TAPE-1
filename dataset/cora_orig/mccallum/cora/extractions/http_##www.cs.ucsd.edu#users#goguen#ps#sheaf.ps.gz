URL: http://www.cs.ucsd.edu/users/goguen/ps/sheaf.ps.gz
Refering-URL: http://www.cs.ucsd.edu/users/goguen/pubs/
Root-URL: http://www.cs.ucsd.edu
Title: Sheaf Semantics for Concurrent Interacting Objects  
Author: Joseph A. Goguen 
Address: San Diego  
Affiliation: Dept. of Computer Science Engineering University of California at  
Abstract: This paper uses concepts from sheaf theory to explicate phenomena in concurrent systems, including object, inheritance, deadlock, and non-interference, as used in computer security. The approach is very general, and applies not only to concurrent object oriented systems, but also to systems of differential equations, electrical circuits, hardware description languges, and much more. Time can be discrete or continuous, linear or branching, and distribution is allowed over space as well as time. Concepts from category theory help to achieve this generality: objects are modeled by sheaves; inheritance by sheaf morphisms; systems by diagrams; and interconnections by diagrams of diagrams. In addition, behaviour is given by limit, and the result of interconnection by colimit. The approach is illustrated with many examples, including a semantics for a simple concurrent object-based programming language. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Gul Agha. </author> <title> Actors: A Model of Concurrent Computation in Distributed Systems. </title> <publisher> MIT, </publisher> <year> 1986. </year>
Reference-contexts: Petri nets have been used as models for linear logic (e.g., [35]), and set theoretic models have been given for Hewitt's actor approach <ref> [1] </ref>. Moreover, CCS expressions have been used as models for temporal logic. One person's syntax is another person's semantics. fl Thanks also to the Programming Research Group, Oxford University.
Reference: [2] <author> Michael Barr and Charles Wells. </author> <title> Toposes, Triples and Theories. </title> <publisher> Springer, </publisher> <year> 1984. </year> <editor> Grundlehren der mathematischen Wissenschafter, </editor> <volume> Volume 278. </volume>
Reference-contexts: The theory of topoi, originally developed by Lawvere and Tierney (see [33], [26], <ref> [2] </ref>) is perhaps the most exciting development in this respect. An interesting topic for future research is to see what the theory of topoi can tell us about concurrency.
Reference: [3] <author> Michael Barr and Charles Wells. </author> <title> Category Theory for Computing Science. </title> <publisher> Prentice-Hall, </publisher> <year> 1990. </year>
Reference-contexts: The former can be found many places, including [32], which requires some mathematical sophistication, and [26], which may be especially recommended because it discusses sheaves, though in a different formulation from ours, and because it begins rather gently. An introduction to category theory for computing scientists is <ref> [3] </ref>. Some underlying intuitions for basic categorical concepts are given in [16], and an overview of the Computing Science categorical literature is given in [39]. A basic introduction to concurrency using CSP is [30].
Reference: [4] <author> Jon Barwise and John Perry. </author> <title> Situations and Attitudes. </title> <publisher> MIT, </publisher> <address> 1983. </address> <publisher> Bradford Books. </publisher>
Reference-contexts: This definition is general enough to apply to data dependency analysis for compilers of concurrent languages onto distributed systems, and to the flow of information in natural language conversation, along the lines suggested by situation semantics <ref> [4] </ref> and the work of Dretske [6].
Reference: [5] <author> Jan Bergstra and Jan Willem Klop. </author> <title> Process algebra for synchronous communication. </title> <journal> Information and Control, </journal> <volume> 60 </volume> <pages> 190-137, </pages> <year> 1984. </year>
Reference-contexts: 1 Introduction Many popular formalisms for concurrent systems are syntactic (or "formal") in the sense that they represent systems by expressions, and then reason about systems by manipulating the corresponding expressions. For example, Milner's CCS [36], Hoare's CSP [30] and Bergstra's ACP <ref> [5] </ref> provide process algebras, which represent systems by expressions in which the primitives for process combination are implicitly defined by sets of equations; a quite different formal approach to concurrency is Girard's linear logic [12].
Reference: [6] <author> Fred Dretske. </author> <title> Knowledge and the Flow of Information. </title> <publisher> MIT, </publisher> <address> 1981. </address> <publisher> Bradford Books. </publisher> <pages> 27 </pages>
Reference-contexts: This definition is general enough to apply to data dependency analysis for compilers of concurrent languages onto distributed systems, and to the flow of information in natural language conversation, along the lines suggested by situation semantics [4] and the work of Dretske <ref> [6] </ref>. Indeed, it seems possible that sheaf theory could help in providing a natural semantics for situation theory. 5 Conclusions Our sheaf approach provides a semantic, i.e., model theoretic, foundation for concurrent distributed computing by (possibly active) objects, without commitment to any particular notation or conceptualisation for concurrency.
Reference: [7] <author> Hans-Dieter Ehrich, Joseph Goguen, and Amilcar Sernadas. </author> <title> A categorial theory of objects as observed processes. </title> <editor> In J.W. de Bakker, Willem P. de Roever, and Gregorz Rozenberg, editors, </editor> <booktitle> Foundations of Object Oriented Languages, </booktitle> <pages> pages 203-228. </pages> <publisher> Springer, </publisher> <year> 1991. </year> <booktitle> Lecture Notes in Computer Science, Volune 489; Proceedings, REX/FOOL Workshop, </booktitle> <address> Noordwijk-erhout, the Netherlands, </address> <month> May/June </month> <year> 1990. </year>
Reference-contexts: Also, it seems that the semantics of the functional and object oriented language foops [22, 25] and of the Rewrite Rule Machine (see [19] and [17]) can be developed in a similar way, and I hope these will be discussed in future papers. See <ref> [7] </ref> for some other applications of sheaf theory to concurrent systems. 23 4.1 Deadlock It is important that many real systems should be deadlock free, in the sense that they do not get into dead states.
Reference: [8] <author> Hans-Dieter Ehrich and Amilcar Sernadas. </author> <title> Algebraic implementation of objects over objects. </title> <editor> In J.W. de Bakker, Jan Willem deRoever, and Gregorz Rozenberg, editors, </editor> <booktitle> Proceedings, REX Workshop on Stepwise Refinement of Distributed Systems: Models, Formalisms, Correctness, </booktitle> <pages> pages 239-266. </pages> <publisher> Springer, </publisher> <year> 1990. </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Volume 430. </volume>
Reference-contexts: Thanks also to Hans-Dieter Ehrich, Amilcar Sernadas, Jose Fiadeiro, Felix Costa, Tom Maibaum and others in the esprit sponsored iscore project (e.g., see <ref> [8, 9, 10] </ref>) for reawakening my interest in this area, and for their encouraging comments.
Reference: [9] <author> Hans-Dieter Ehrich, Amilcar Sernadas, and Christina Sernadas. </author> <title> Objects, object types, and object identification. </title> <editor> In Hartmut Ehrig et al., editors, </editor> <booktitle> Categorical Methods in Computer Science with Aspects from Topology, </booktitle> <pages> pages 142-156. </pages> <publisher> Springer, </publisher> <year> 1989. </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Volume 393. </volume>
Reference-contexts: Thanks also to Hans-Dieter Ehrich, Amilcar Sernadas, Jose Fiadeiro, Felix Costa, Tom Maibaum and others in the esprit sponsored iscore project (e.g., see <ref> [8, 9, 10] </ref>) for reawakening my interest in this area, and for their encouraging comments.
Reference: [10] <author> Hans-Dieter Ehrich, Amilcar Sernadas, and Christina Sernadas. </author> <title> From data types to object types. </title> <journal> Journal of Information Processing and Cyberntics, </journal> 26(1/2):33-48, 1990. 
Reference-contexts: Thanks also to Hans-Dieter Ehrich, Amilcar Sernadas, Jose Fiadeiro, Felix Costa, Tom Maibaum and others in the esprit sponsored iscore project (e.g., see <ref> [8, 9, 10] </ref>) for reawakening my interest in this area, and for their encouraging comments.
Reference: [11] <author> Gian Luigi Ferrari. </author> <title> Unifying Models of Concurrency. </title> <type> PhD thesis, </type> <institution> University of Pisa, </institution> <year> 1990. </year>
Reference-contexts: A definition of deadlock is also given, which again seems more general than anything in the literature. Category theory has by now been used in many studies of concurrency; for example, see <ref> [45, 35, 11] </ref>. But as far as I know, only Monteiro and Pereira [37] have previously studied concurrency using sheaves; however, their approach does not seem to be closely related to the present paper.
Reference: [12] <author> Jean-Yves Girard. </author> <title> Linear logic. </title> <journal> Theoretical Computer Science, </journal> <volume> 46 </volume> <pages> 1-102, </pages> <year> 1986. </year>
Reference-contexts: For example, Milner's CCS [36], Hoare's CSP [30] and Bergstra's ACP [5] provide process algebras, which represent systems by expressions in which the primitives for process combination are implicitly defined by sets of equations; a quite different formal approach to concurrency is Girard's linear logic <ref> [12] </ref>. What we call semantic, or model theoretic, approaches, provide complete sets of possible behaviours for systems.
Reference: [13] <author> Joseph Goguen. </author> <title> Mathematical representation of hierarchically organized systems. </title> <editor> In E. At-tinger, editor, </editor> <booktitle> Global Systems Dynamics, </booktitle> <pages> pages 112-128. </pages> <editor> S. Karger, </editor> <year> 1971. </year>
Reference-contexts: In particular, Lilius [34] has shown how to model Petri nets in our sheaf theoretic framework. This paper builds on a much earlier paper [15] which used sheaf theory as part of a research programme on "Categorical General Systems Theory" <ref> [13, 14, 18] </ref>. My interest in this area was revived by the desire to give a semantics for foops (a Functional Object Oriented Programming System) [22, 25] and for the Rewrite Rule Machine, a multi-grain hierarchical massively parallel graph rewriting machine (see [19] and [17]). <p> The first concerns the behaviour of multi-object systems, through diagrams and their limits, while the second concerns "glueing together" behaviour over domains. 3.3 Interconnection The principles that objects are sheaves, systems are diagrams, and behaviour is limit are all taken from some earlier work in categorical General System Theory <ref> [13, 14, 18] </ref>. Another principle from this work is that interconnecting systems corresponds to taking colimits in the category of systems, where sharing is indicated by inclusion maps from shared parts into the systems that share them. The papers [13, 14, 18] develop some very general results in this setting, including <p> all taken from some earlier work in categorical General System Theory <ref> [13, 14, 18] </ref>. Another principle from this work is that interconnecting systems corresponds to taking colimits in the category of systems, where sharing is indicated by inclusion maps from shared parts into the systems that share them. The papers [13, 14, 18] develop some very general results in this setting, including the so-called Interconnection and Behaviour Theorems, which are given below 5 . <p> 1 and hF 2 ; 2 i : D 1 ! D 2 is a morphism hF 1 ; F 2 ; (F 1 ffi 2 ); 1 i : D 0 ! D 2 . 2 5 Actually, the results given here are somewhat more general than those in <ref> [13, 14, 18] </ref>, because the restriction to so-called interconnection morphisms has been removed. 6 In particular, the objects of S need not be sheaves or presheaves. 16 Here the operation ";" on natural transformations is their vertical composition, whereas "ffi" is their horizontal composition; e.g., see [32]. <p> We may summarise the above discussion in the following principle, from <ref> [13, 14, 18] </ref> (see also [16]): INTERCONNECTION IS COLIMIT. 17 @ @R @ @R @ @I O 1 O 2 O 2 O 3 ' $ ' $ We will soon need the following result about limits: Proposition 30: Given a complete category S, then "limit of" is a functor Lim <p> In addition, behaviour is given by limit, and the result of interconnection by colimit. Although we have not done so here, it is possible to iterate these constructions to obtain hierarchical systems of arbitrary depth; see <ref> [13, 14, 18] </ref>.
Reference: [14] <author> Joseph Goguen. </author> <title> Categorical foundations for general systems theory. </title> <editor> In F. Pichler and R. Trappl, editors, </editor> <booktitle> Advances in Cybernetics and Systems Research, </booktitle> <pages> pages 121-130. </pages> <publisher> Tran-scripta Books, </publisher> <year> 1973. </year>
Reference-contexts: In particular, Lilius [34] has shown how to model Petri nets in our sheaf theoretic framework. This paper builds on a much earlier paper [15] which used sheaf theory as part of a research programme on "Categorical General Systems Theory" <ref> [13, 14, 18] </ref>. My interest in this area was revived by the desire to give a semantics for foops (a Functional Object Oriented Programming System) [22, 25] and for the Rewrite Rule Machine, a multi-grain hierarchical massively parallel graph rewriting machine (see [19] and [17]). <p> The first concerns the behaviour of multi-object systems, through diagrams and their limits, while the second concerns "glueing together" behaviour over domains. 3.3 Interconnection The principles that objects are sheaves, systems are diagrams, and behaviour is limit are all taken from some earlier work in categorical General System Theory <ref> [13, 14, 18] </ref>. Another principle from this work is that interconnecting systems corresponds to taking colimits in the category of systems, where sharing is indicated by inclusion maps from shared parts into the systems that share them. The papers [13, 14, 18] develop some very general results in this setting, including <p> all taken from some earlier work in categorical General System Theory <ref> [13, 14, 18] </ref>. Another principle from this work is that interconnecting systems corresponds to taking colimits in the category of systems, where sharing is indicated by inclusion maps from shared parts into the systems that share them. The papers [13, 14, 18] develop some very general results in this setting, including the so-called Interconnection and Behaviour Theorems, which are given below 5 . <p> 1 and hF 2 ; 2 i : D 1 ! D 2 is a morphism hF 1 ; F 2 ; (F 1 ffi 2 ); 1 i : D 0 ! D 2 . 2 5 Actually, the results given here are somewhat more general than those in <ref> [13, 14, 18] </ref>, because the restriction to so-called interconnection morphisms has been removed. 6 In particular, the objects of S need not be sheaves or presheaves. 16 Here the operation ";" on natural transformations is their vertical composition, whereas "ffi" is their horizontal composition; e.g., see [32]. <p> We may summarise the above discussion in the following principle, from <ref> [13, 14, 18] </ref> (see also [16]): INTERCONNECTION IS COLIMIT. 17 @ @R @ @R @ @I O 1 O 2 O 2 O 3 ' $ ' $ We will soon need the following result about limits: Proposition 30: Given a complete category S, then "limit of" is a functor Lim <p> In addition, behaviour is given by limit, and the result of interconnection by colimit. Although we have not done so here, it is possible to iterate these constructions to obtain hierarchical systems of arbitrary depth; see <ref> [13, 14, 18] </ref>.
Reference: [15] <author> Joseph Goguen. </author> <title> Objects. </title> <journal> International Journal of General Systems, </journal> <volume> 1(4) </volume> <pages> 237-243, </pages> <year> 1975. </year>
Reference-contexts: It may be worth emphasising that true concurrency can be modeled, and that we are not at all dependent upon interleaving. In particular, Lilius [34] has shown how to model Petri nets in our sheaf theoretic framework. This paper builds on a much earlier paper <ref> [15] </ref> which used sheaf theory as part of a research programme on "Categorical General Systems Theory" [13, 14, 18]. <p> This would involve a 3-dimensional space 3 , say embedded in 4-dimensional Euclidean space. See <ref> [15] </ref> for further examples along similar lines. We now return to discrete time. Example 15: (Networks): Networks are usually built from sites and links 4 . Clearly the sites can be regarded as objects, and for many purposes it is also convenient to regard the links as objects.
Reference: [16] <author> Joseph Goguen. </author> <title> A categorical manifesto. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 1(1) </volume> <pages> 49-67, </pages> <month> March </month> <year> 1991. </year> <note> Also, </note> <institution> Programming Research Group Technical Monograph PRG-72, University of Oxford, </institution> <month> March </month> <year> 1989. </year>
Reference-contexts: An introduction to category theory for computing scientists is [3]. Some underlying intuitions for basic categorical concepts are given in <ref> [16] </ref>, and an overview of the Computing Science categorical literature is given in [39]. A basic introduction to concurrency using CSP is [30]. <p> We may summarise the above discussion in the following principle, from [13, 14, 18] (see also <ref> [16] </ref>): INTERCONNECTION IS COLIMIT. 17 @ @R @ @R @ @I O 1 O 2 O 2 O 3 ' $ ' $ We will soon need the following result about limits: Proposition 30: Given a complete category S, then "limit of" is a functor Lim : Dgm (S) op !
Reference: [17] <author> Joseph Goguen. </author> <title> Semantic specifications for the rewrite rule machine. </title> <editor> In Aki Yonezawa and Takayasu Ito, editors, </editor> <booktitle> Concurrency: Theory, Language and Architecture, </booktitle> <pages> pages 216-234, </pages> <year> 1991. </year> <booktitle> Proceedings of a U.K.-Japan Workshop; Springer, Lecture Notes in Computer Science, </booktitle> <volume> Volume 491. </volume>
Reference-contexts: My interest in this area was revived by the desire to give a semantics for foops (a Functional Object Oriented Programming System) [22, 25] and for the Rewrite Rule Machine, a multi-grain hierarchical massively parallel graph rewriting machine (see [19] and <ref> [17] </ref>). <p> For example, it is easy to add more language constructs, such as loops. Another interesting feature to add would be abort. Also, it seems that the semantics of the functional and object oriented language foops [22, 25] and of the Rewrite Rule Machine (see [19] and <ref> [17] </ref>) can be developed in a similar way, and I hope these will be discussed in future papers.
Reference: [18] <author> Joseph Goguen and Susanna Ginali. </author> <title> A categorical approach to general systems theory. </title> <editor> In George Klir, editor, </editor> <booktitle> Applied General Systems Research, </booktitle> <pages> pages 257-270. </pages> <publisher> Plenum, </publisher> <year> 1978. </year>
Reference-contexts: In particular, Lilius [34] has shown how to model Petri nets in our sheaf theoretic framework. This paper builds on a much earlier paper [15] which used sheaf theory as part of a research programme on "Categorical General Systems Theory" <ref> [13, 14, 18] </ref>. My interest in this area was revived by the desire to give a semantics for foops (a Functional Object Oriented Programming System) [22, 25] and for the Rewrite Rule Machine, a multi-grain hierarchical massively parallel graph rewriting machine (see [19] and [17]). <p> The first concerns the behaviour of multi-object systems, through diagrams and their limits, while the second concerns "glueing together" behaviour over domains. 3.3 Interconnection The principles that objects are sheaves, systems are diagrams, and behaviour is limit are all taken from some earlier work in categorical General System Theory <ref> [13, 14, 18] </ref>. Another principle from this work is that interconnecting systems corresponds to taking colimits in the category of systems, where sharing is indicated by inclusion maps from shared parts into the systems that share them. The papers [13, 14, 18] develop some very general results in this setting, including <p> all taken from some earlier work in categorical General System Theory <ref> [13, 14, 18] </ref>. Another principle from this work is that interconnecting systems corresponds to taking colimits in the category of systems, where sharing is indicated by inclusion maps from shared parts into the systems that share them. The papers [13, 14, 18] develop some very general results in this setting, including the so-called Interconnection and Behaviour Theorems, which are given below 5 . <p> 1 and hF 2 ; 2 i : D 1 ! D 2 is a morphism hF 1 ; F 2 ; (F 1 ffi 2 ); 1 i : D 0 ! D 2 . 2 5 Actually, the results given here are somewhat more general than those in <ref> [13, 14, 18] </ref>, because the restriction to so-called interconnection morphisms has been removed. 6 In particular, the objects of S need not be sheaves or presheaves. 16 Here the operation ";" on natural transformations is their vertical composition, whereas "ffi" is their horizontal composition; e.g., see [32]. <p> We may summarise the above discussion in the following principle, from <ref> [13, 14, 18] </ref> (see also [16]): INTERCONNECTION IS COLIMIT. 17 @ @R @ @R @ @I O 1 O 2 O 2 O 3 ' $ ' $ We will soon need the following result about limits: Proposition 30: Given a complete category S, then "limit of" is a functor Lim <p> In addition, behaviour is given by limit, and the result of interconnection by colimit. Although we have not done so here, it is possible to iterate these constructions to obtain hierarchical systems of arbitrary depth; see <ref> [13, 14, 18] </ref>.
Reference: [19] <author> Joseph Goguen, Sany Leinwand, Jose Meseguer, and Timothy Winkler. </author> <title> The Rewrite Rule Machine, 1988. </title> <type> Technical Report Technical Monograph PRG-76, </type> <institution> Programming Research Group, Oxford University, </institution> <year> 1989. </year>
Reference-contexts: My interest in this area was revived by the desire to give a semantics for foops (a Functional Object Oriented Programming System) [22, 25] and for the Rewrite Rule Machine, a multi-grain hierarchical massively parallel graph rewriting machine (see <ref> [19] </ref> and [17]). <p> For example, it is easy to add more language constructs, such as loops. Another interesting feature to add would be abort. Also, it seems that the semantics of the functional and object oriented language foops [22, 25] and of the Rewrite Rule Machine (see <ref> [19] </ref> and [17]) can be developed in a similar way, and I hope these will be discussed in future papers.
Reference: [20] <author> Joseph Goguen and Jose Meseguer. </author> <title> Security policies and security models. </title> <editor> In Marvin Schafer and Dorothy D. Denning, editors, </editor> <booktitle> Proceedings, 1982 Symposium on Security and Privacy, </booktitle> <pages> pages 11-22. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1982. </year> <month> 28 </month>
Reference-contexts: Some of the definitions may also be surprising for their generality, including a notion of security that gen-eralises the Goguen-Meseguer non-interference approach <ref> [20, 21] </ref>; indeed, this seems to be the most general such definition in the literature, and it applies, for example, to the security of real time distributed concurrent (possibly object oriented) databases. A definition of deadlock is also given, which again seems more general than anything in the literature. <p> For example, we don't want an electronic bank robber to be able to discover which are the largest accounts, and then withdraw funds from them. It is now rather well recognised that "noninterference" assertions can be used to express security properties of (monolithic) sequential systems <ref> [20, 21] </ref>. An active research topic is the extension of such assertions to more general classes of system. <p> Yet the variety of examples may be surprising. Moreover, one example illustrates an important class of applications, namely the semantics of concurrent, distributed object oriented systems. Some of the definitions may also be surprising for their generality, including a notion of security that generalises the Goguen-Meseguer non-interference approach <ref> [20, 21] </ref> from sequential systems to (for example) real time distributed concurrent object oriented databases. A very general definition of deadlock is also given. It is interesting that these concepts are so easily stated in a purely semantic form.
Reference: [21] <author> Joseph Goguen and Jose Meseguer. </author> <title> Unwinding and inference control. </title> <editor> In Dorothy D. Denning and Jonathan K. Millen, editors, </editor> <booktitle> Proceedings, 1984 Symposium on Security and Privacy, </booktitle> <pages> pages 75-86. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1984. </year>
Reference-contexts: Some of the definitions may also be surprising for their generality, including a notion of security that gen-eralises the Goguen-Meseguer non-interference approach <ref> [20, 21] </ref>; indeed, this seems to be the most general such definition in the literature, and it applies, for example, to the security of real time distributed concurrent (possibly object oriented) databases. A definition of deadlock is also given, which again seems more general than anything in the literature. <p> For example, we don't want an electronic bank robber to be able to discover which are the largest accounts, and then withdraw funds from them. It is now rather well recognised that "noninterference" assertions can be used to express security properties of (monolithic) sequential systems <ref> [20, 21] </ref>. An active research topic is the extension of such assertions to more general classes of system. <p> Yet the variety of examples may be surprising. Moreover, one example illustrates an important class of applications, namely the semantics of concurrent, distributed object oriented systems. Some of the definitions may also be surprising for their generality, including a notion of security that generalises the Goguen-Meseguer non-interference approach <ref> [20, 21] </ref> from sequential systems to (for example) real time distributed concurrent object oriented databases. A very general definition of deadlock is also given. It is interesting that these concepts are so easily stated in a purely semantic form.
Reference: [22] <author> Joseph Goguen and Jose Meseguer. </author> <title> Unifying functional, object-oriented and relational programming, with logical semantics. </title> <editor> In Bruce Shriver and Peter Wegner, editors, </editor> <booktitle> Research Directions in Object-Oriented Programming, </booktitle> <pages> pages 417-477. </pages> <publisher> MIT, </publisher> <year> 1987. </year> <journal> Preliminary version in SIGPLAN Notices, </journal> <volume> Volume 21, Number 10, </volume> <pages> pages 153-162, </pages> <month> October </month> <year> 1986. </year>
Reference-contexts: This paper builds on a much earlier paper [15] which used sheaf theory as part of a research programme on "Categorical General Systems Theory" [13, 14, 18]. My interest in this area was revived by the desire to give a semantics for foops (a Functional Object Oriented Programming System) <ref> [22, 25] </ref> and for the Rewrite Rule Machine, a multi-grain hierarchical massively parallel graph rewriting machine (see [19] and [17]). <p> But seems clear that the same techniques will extend to much more complex languages. For example, it is easy to add more language constructs, such as loops. Another interesting feature to add would be abort. Also, it seems that the semantics of the functional and object oriented language foops <ref> [22, 25] </ref> and of the Rewrite Rule Machine (see [19] and [17]) can be developed in a similar way, and I hope these will be discussed in future papers.
Reference: [23] <author> Joseph Goguen and Jose Meseguer. </author> <title> Order-sorted algebra I: Equational deduction for multiple inheritance, overloading, exceptions and partial operations. </title> <type> Technical Report SRI-CSL-89-10, </type> <institution> SRI International, Computer Science Lab, </institution> <month> July </month> <year> 1989. </year> <note> Originally given as lecture at Seminar on Types, Carnegie-Mellon University, June 1983; many draft versions exist. </note>
Reference-contexts: This ADJ diagram is therefore augmented to indicate subsort relationships with "hooked" arrows. (See <ref> [23] </ref> for details of order sorted algebra.) 20 are operations on programs, := is assignment, skip is the instruction that does nothing, and ,! indicates a subsort relation (based on order-sorted algebra [23]). <p> This ADJ diagram is therefore augmented to indicate subsort relationships with "hooked" arrows. (See <ref> [23] </ref> for details of order sorted algebra.) 20 are operations on programs, := is assignment, skip is the instruction that does nothing, and ,! indicates a subsort relation (based on order-sorted algebra [23]). We also assume that the sorts Uid, Var and Nat are populated by a countably infinite number of mutually disjoint constants. Typical elements of sort Uid are Tom, Dick and Harry, and of Var are X; Y; Z, while the elements of sort Nat are of course 0,1,2,... . <p> Unless otherwise indicated, variables w; w 0 ; w 1 , etc. range over jj fl . Our language is the algebra T of all -terms, constructed just like the order sorted term algebra in <ref> [23] </ref>, except that in order to simplify the transition rules to be given below, we will use reverse Polish (i.e., Polish postfix, or Lukasiewicz) notation for the terms of sort Pgm, which will represent programs.
Reference: [24] <author> Joseph Goguen, James Thatcher, and Eric Wagner. </author> <title> An initial algebra approach to the specification, correctness and implementation of abstract data types. </title> <type> Technical Report RC 6487, </type> <institution> IBM T.J. Watson Research Center, </institution> <month> October </month> <year> 1976. </year> <title> In Current Trends in Programming Methodology, IV, </title> <editor> Raymond Yeh, editor, </editor> <publisher> Prentice-Hall, </publisher> <year> 1978, </year> <pages> pages 80-149. </pages>
Reference-contexts: deterministic automata, it can happen that there is more than one such h 0 , but for non-deterministic automata, there can be multiple h 0 having the same input components. 2 1 This name was suggested by Cliff Jones for a kind of diagram introduced by Goguen, Thatcher, and Wagner <ref> [24] </ref> in their study of abstract data types. (The reason for the name "ADJ" is that the set fGoguen, Thatcher, Wagner, Wrightg called itself ADJ at that time.) 2 A many sorted signature consists of a set S of sorts and a family of sets w;s of operation symbols, one for <p> An operation symbol 2 w;s is interpreted as an operation A : A w ! A s , where A w = A s 1 fi ::: fi A s n when w = s 1 :::s n . See <ref> [24] </ref> for more details. 8 We can also model electrical components, using the real time base I (R + ).
Reference: [25] <author> Joseph Goguen and David Wolfram. </author> <title> On types and FOOPS. </title> <editor> In William Kent Robert Meers-man and Samit Khosla, editors, </editor> <title> Object Oriented Databases: Analysis, </title> <booktitle> Design and Construction, </booktitle> <pages> pages 1-22. </pages> <publisher> North Holland, </publisher> <year> 1991. </year> <booktitle> Proceedings, IFIP TC2 Conference, </booktitle> <address> Windermere, UK, </address> <month> 2-6 July </month> <year> 1990. </year>
Reference-contexts: This paper builds on a much earlier paper [15] which used sheaf theory as part of a research programme on "Categorical General Systems Theory" [13, 14, 18]. My interest in this area was revived by the desire to give a semantics for foops (a Functional Object Oriented Programming System) <ref> [22, 25] </ref> and for the Rewrite Rule Machine, a multi-grain hierarchical massively parallel graph rewriting machine (see [19] and [17]). <p> But seems clear that the same techniques will extend to much more complex languages. For example, it is easy to add more language constructs, such as loops. Another interesting feature to add would be abort. Also, it seems that the semantics of the functional and object oriented language foops <ref> [22, 25] </ref> and of the Rewrite Rule Machine (see [19] and [17]) can be developed in a similar way, and I hope these will be discussed in future papers.
Reference: [26] <author> Robert Goldblatt. </author> <title> Topoi, the Categorial Analysis of Logic. </title> <publisher> North-Holland, </publisher> <year> 1979. </year>
Reference-contexts: Prerequisites and Notation Basic category theory and some intuition for concurrency are needed to read this paper. The former can be found many places, including [32], which requires some mathematical sophistication, and <ref> [26] </ref>, which may be especially recommended because it discusses sheaves, though in a different formulation from ours, and because it begins rather gently. An introduction to category theory for computing scientists is [3]. <p> Proposition 19: If C is a structure category, then its forgetful functor U preserves products, and more generally, all limits. Proof: It is well known that right adjoints preserve limits; e.g., see [32] or <ref> [26] </ref>. 2 This means that the underlying set of a product object in C can be taken to be the product of the underlying sets of the component objects; for example, we can get a product of two vector spaces by giving a vector space structure to the product of their <p> When the structure category C is Set, it is well known (e.g., <ref> [32, 26] </ref>) that L (I) is (a construction for) the limit of the diagram S (I) in which each node n is labelled by S n (I) and each edge e : n ! n 0 is labelled by ' e : S n (I) ! S n 0 (I). (One <p> Proposition 26: Any diagram S of presheaves with values in a structure category C has a limit, and in fact, for each U 2 T , n n Proof: This follows directly from a well known result about limits in functor categories that is proved, for example, in [32] and <ref> [26] </ref>, using the assumption that the structure category has limits. 2 This motivates our fourth main principle, that BEHAVIOUR IS LIMIT. Proposition 26 and our assumption that C has limits imply that every system has a behaviour object L. <p> The theory of topoi, originally developed by Lawvere and Tierney (see [33], <ref> [26] </ref>, [2]) is perhaps the most exciting development in this respect. An interesting topic for future research is to see what the theory of topoi can tell us about concurrency.
Reference: [27] <author> Michael J.C. Gordon. </author> <title> Why higher-order logic is a good formalism for specifying and verifying hardware. </title> <editor> In George Milne and P.A. Subrahmanyam, editors, </editor> <title> Formal Aspects of VLSI Design. </title> <publisher> North-Holland, </publisher> <year> 1986. </year>
Reference-contexts: For example, Gordon <ref> [27] </ref> has used higher order relations to study digital circuits. But the point does seem worth a bit of emphasis. 19 It is interesting to look at so-called "internal choice" and "external choice" in the context of limits of diagram of sheaves.
Reference: [28] <author> John Gray. </author> <title> Sheaves with values in a category. </title> <journal> Topology, </journal> <volume> 3(1) </volume> <pages> 1-18, </pages> <year> 1965. </year>
Reference-contexts: Sheaf theory developed in mathematics for studying relationships between local and global phenomena, and has been applied in algebraic geometry, differential geometry, analysis, and even logic. It has also been given an abstract form using category theory <ref> [29, 28] </ref>, which among other things provides some general results about limits that are used in this paper. From the point of view of concurrency theory, it seems suggestive to think of sheaves as a generalisation of trace models.
Reference: [29] <author> Alexandre Grothendieck. </author> <title> Categories fibrees et descente. </title> <institution> In Rev^etements etales et groupe fon-damental, Seminaire de Geometrie Algebraique du Bois-Marie 1960/61, Expose VI. Institut des Hautes Etudes Scientifiques, </institution> <year> 1963. </year> <booktitle> Reprinted in Lecture Notes in Mathematics, </booktitle> <volume> Volume 224, </volume> <publisher> Springer, </publisher> <year> 1971, </year> <pages> pages 145-94. </pages>
Reference-contexts: Sheaf theory developed in mathematics for studying relationships between local and global phenomena, and has been applied in algebraic geometry, differential geometry, analysis, and even logic. It has also been given an abstract form using category theory <ref> [29, 28] </ref>, which among other things provides some general results about limits that are used in this paper. From the point of view of concurrency theory, it seems suggestive to think of sheaves as a generalisation of trace models.
Reference: [30] <author> C.A.R. Hoare. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice-Hall, </publisher> <year> 1985. </year>
Reference-contexts: 1 Introduction Many popular formalisms for concurrent systems are syntactic (or "formal") in the sense that they represent systems by expressions, and then reason about systems by manipulating the corresponding expressions. For example, Milner's CCS [36], Hoare's CSP <ref> [30] </ref> and Bergstra's ACP [5] provide process algebras, which represent systems by expressions in which the primitives for process combination are implicitly defined by sets of equations; a quite different formal approach to concurrency is Girard's linear logic [12]. <p> Moreover, they are closer to our physical intuition, can often describe examples in simple and natural ways, and integrate easily with such additional considerations as data structure, objects and constraints. Trace models, as used in CSP <ref> [30] </ref> and other process algebras, are a prototypical example. From this point of view, Petri nets [40], (labelled) transition systems [45], and synchronisation trees [36] can also be seen as syntactic. <p> For example, transition systems and synchronisation trees have been used as semantics for CCS and CSP; also, CSP has a "preferred" model, based on failures and refusals <ref> [30] </ref>. Petri nets have been used as models for linear logic (e.g., [35]), and set theoretic models have been given for Hewitt's actor approach [1]. Moreover, CCS expressions have been used as models for temporal logic. <p> An introduction to category theory for computing scientists is [3]. Some underlying intuitions for basic categorical concepts are given in [16], and an overview of the Computing Science categorical literature is given in [39]. A basic introduction to concurrency using CSP is <ref> [30] </ref>. We will use semicolon (";") to denote composition of functions, so that (f ; g)(x) = g (f (x)); more generally, we let semicolon denote composition in any category, and we let 1 A denote the identity morphism at the object A.
Reference: [31] <author> Jeremy Jacob. </author> <title> A security framework. </title> <booktitle> In Proceedings, 1989 Computer Security Foundations Workshop, </booktitle> <pages> pages 98-111. </pages> <address> MITRE, 1988. Franconia, New Hampshire. </address>
Reference-contexts: An active research topic is the extension of such assertions to more general classes of system. Definition 43 below extends non-interference to a much wider class of system, such as distributed object oriented databases, and appears to be more general than anything else in the literature. (But see <ref> [31, 38] </ref> for two other very general approaches.) First, we need some auxiliary material: Definition 41: Let ' : O ! O 0 be a morphism of set valued presheaves.
Reference: [32] <author> Saunders Mac Lane. </author> <title> Categories for the Working Mathematician. </title> <publisher> Springer, </publisher> <year> 1971. </year>
Reference-contexts: Prerequisites and Notation Basic category theory and some intuition for concurrency are needed to read this paper. The former can be found many places, including <ref> [32] </ref>, which requires some mathematical sophistication, and [26], which may be especially recommended because it discusses sheaves, though in a different formulation from ours, and because it begins rather gently. An introduction to category theory for computing scientists is [3]. <p> Proposition 19: If C is a structure category, then its forgetful functor U preserves products, and more generally, all limits. Proof: It is well known that right adjoints preserve limits; e.g., see <ref> [32] </ref> or [26]. 2 This means that the underlying set of a product object in C can be taken to be the product of the underlying sets of the component objects; for example, we can get a product of two vector spaces by giving a vector space structure to the product <p> When the structure category C is Set, it is well known (e.g., <ref> [32, 26] </ref>) that L (I) is (a construction for) the limit of the diagram S (I) in which each node n is labelled by S n (I) and each edge e : n ! n 0 is labelled by ' e : S n (I) ! S n 0 (I). (One <p> morphisms: 15 Proposition 26: Any diagram S of presheaves with values in a structure category C has a limit, and in fact, for each U 2 T , n n Proof: This follows directly from a well known result about limits in functor categories that is proved, for example, in <ref> [32] </ref> and [26], using the assumption that the structure category has limits. 2 This motivates our fourth main principle, that BEHAVIOUR IS LIMIT. Proposition 26 and our assumption that C has limits imply that every system has a behaviour object L. <p> general than those in [13, 14, 18], because the restriction to so-called interconnection morphisms has been removed. 6 In particular, the objects of S need not be sheaves or presheaves. 16 Here the operation ";" on natural transformations is their vertical composition, whereas "ffi" is their horizontal composition; e.g., see <ref> [32] </ref>. <p> S F : [B 0 ! S] ! [B 1 ! S] has a right adjoint, because any functor B 0 ! S has a right Kan extension along any functor R : B 0 ! B 1 by the Kan Extension Theorem (see Theorem 1 on page 233 of <ref> [32] </ref>) because S is assumed complete. 2 Taking colimits in the category Dgm (S) corresponds to interconnecting systems.
Reference: [33] <author> F. William Lawvere. </author> <title> Introduction. </title> <editor> In F. William Lawvere, C. Maurer, and Gavin Wraith, editors, </editor> <booktitle> Model Theory and Topoi, </booktitle> <pages> pages 3-14. </pages> <publisher> Springer, </publisher> <year> 1975. </year> <booktitle> Lecture Notes in Mathematics, </booktitle> <volume> Volume 445. </volume>
Reference-contexts: Sheaf theory has been used in mathematics to study relationships between local and global phenomena, for example, in algebraic geometry, differential geometry, and even logic; the subject has also been developed in an abstract form using category theory. The theory of topoi, originally developed by Lawvere and Tierney (see <ref> [33] </ref>, [26], [2]) is perhaps the most exciting development in this respect. An interesting topic for future research is to see what the theory of topoi can tell us about concurrency.
Reference: [34] <author> Johan Lilius. </author> <title> Sheaf semantics for Petri nets. </title> <type> Technical report, </type> <institution> Helsinki University of Technology, </institution> <year> 1991. </year>
Reference-contexts: It may be worth emphasising that true concurrency can be modeled, and that we are not at all dependent upon interleaving. In particular, Lilius <ref> [34] </ref> has shown how to model Petri nets in our sheaf theoretic framework. This paper builds on a much earlier paper [15] which used sheaf theory as part of a research programme on "Categorical General Systems Theory" [13, 14, 18].
Reference: [35] <author> Jose Meseguer and Ugo Montanari. </author> <title> Petri nets are monoids: A new algebraic foundation for net theory. </title> <booktitle> In Proceedings, Symposium on Logic in Computer Science. IEEE Computer Society, </booktitle> <year> 1988. </year> <note> Full version in Report SRI-CSL-88-3, </note> <institution> Computer Science Laboratory, SRI International, </institution> <note> January 1988; submitted to Information and Computation. 29 </note>
Reference-contexts: For example, transition systems and synchronisation trees have been used as semantics for CCS and CSP; also, CSP has a "preferred" model, based on failures and refusals [30]. Petri nets have been used as models for linear logic (e.g., <ref> [35] </ref>), and set theoretic models have been given for Hewitt's actor approach [1]. Moreover, CCS expressions have been used as models for temporal logic. One person's syntax is another person's semantics. fl Thanks also to the Programming Research Group, Oxford University. <p> A definition of deadlock is also given, which again seems more general than anything in the literature. Category theory has by now been used in many studies of concurrency; for example, see <ref> [45, 35, 11] </ref>. But as far as I know, only Monteiro and Pereira [37] have previously studied concurrency using sheaves; however, their approach does not seem to be closely related to the present paper.
Reference: [36] <author> Robin Milner. </author> <title> A Calculus of Communicating Systems. </title> <publisher> Springer, </publisher> <year> 1980. </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Volume 92. </volume>
Reference-contexts: 1 Introduction Many popular formalisms for concurrent systems are syntactic (or "formal") in the sense that they represent systems by expressions, and then reason about systems by manipulating the corresponding expressions. For example, Milner's CCS <ref> [36] </ref>, Hoare's CSP [30] and Bergstra's ACP [5] provide process algebras, which represent systems by expressions in which the primitives for process combination are implicitly defined by sets of equations; a quite different formal approach to concurrency is Girard's linear logic [12]. <p> Trace models, as used in CSP [30] and other process algebras, are a prototypical example. From this point of view, Petri nets [40], (labelled) transition systems [45], and synchronisation trees <ref> [36] </ref> can also be seen as syntactic. Actually, things are not quite so simple, because the approaches that we have lumped together as "syntactic" really have varying degrees of semantics.
Reference: [37] <author> Luis Monteiro and Fernando Pereira. </author> <title> A sheaf-theoretic model of concurrency. </title> <type> Technical Report CSLI-86-62, </type> <institution> Center for the Study of Language and Information, Stanford University, </institution> <month> October </month> <year> 1986. </year>
Reference-contexts: A definition of deadlock is also given, which again seems more general than anything in the literature. Category theory has by now been used in many studies of concurrency; for example, see [45, 35, 11]. But as far as I know, only Monteiro and Pereira <ref> [37] </ref> have previously studied concurrency using sheaves; however, their approach does not seem to be closely related to the present paper. Prerequisites and Notation Basic category theory and some intuition for concurrency are needed to read this paper.
Reference: [38] <author> Colin O'Halloran. </author> <title> A calculus of information flow. </title> <type> Technical report, </type> <institution> Royal Signals and Radar Establishment, Malvern, </institution> <year> 1990. </year>
Reference-contexts: An active research topic is the extension of such assertions to more general classes of system. Definition 43 below extends non-interference to a much wider class of system, such as distributed object oriented databases, and appears to be more general than anything else in the literature. (But see <ref> [31, 38] </ref> for two other very general approaches.) First, we need some auxiliary material: Definition 41: Let ' : O ! O 0 be a morphism of set valued presheaves.
Reference: [39] <author> Benjamin C. Pierce. </author> <title> A taste of category theory for computer scientists. </title> <type> Technical Report CMU-CS-90-113, </type> <institution> Carnegie-Mellon University, </institution> <year> 1990. </year>
Reference-contexts: An introduction to category theory for computing scientists is [3]. Some underlying intuitions for basic categorical concepts are given in [16], and an overview of the Computing Science categorical literature is given in <ref> [39] </ref>. A basic introduction to concurrency using CSP is [30].
Reference: [40] <author> W. Reisig. </author> <title> Petri Nets: An Introduction. </title> <publisher> Springer, </publisher> <year> 1986. </year> <note> EATCS Monographs on Theoretical Computer Science. </note>
Reference-contexts: Trace models, as used in CSP [30] and other process algebras, are a prototypical example. From this point of view, Petri nets <ref> [40] </ref>, (labelled) transition systems [45], and synchronisation trees [36] can also be seen as syntactic. Actually, things are not quite so simple, because the approaches that we have lumped together as "syntactic" really have varying degrees of semantics.
Reference: [41] <author> Susan Leigh Star. </author> <title> The structure of ill-structured solutions: heterogeneous problem-solving, boundary objects and distributed artificial intelligence. </title> <editor> In Michael Huhns and Les Gasser, editors, </editor> <booktitle> Distributed Artificial Intelligence, </booktitle> <volume> volume 3, </volume> <pages> pages 37-54. </pages> <publisher> Morgan Kauffmann, </publisher> <year> 1988. </year>
Reference-contexts: What is called "overriding" in object oriented programming can probably be handled in this way. (These ideas were inspired by work of Leigh Star <ref> [41] </ref> on "boundary objects" in the sociology of science.) Example 24: Now let us consider the system that in traditional notation would be described by the following diagram, ffi H H A C ^ where ^; _ label AND and OR gates, respectively, corresponds to the following diagram in the category
Reference: [42] <author> Victoria Stavridou, Joseph Goguen, Steven Eker, and Serge Aloneftis. FUNNEL: </author> <title> A CHDL with formal semantics. </title> <booktitle> In Proceedings, Advanced Research Workshop on Correct Hardware Design Methodologies, </booktitle> <pages> pages 117-144. </pages> <publisher> IEEE, </publisher> <address> 1991. Turin. </address>
Reference-contexts: Having such a semantic approach can be a significant help when designing a new language; for example, a sheaf theoretic approach helped with the design of funnel, a hardware description language <ref> [42] </ref>. The approach is declarative and constraint based , and does not require distinguishing inputs and outputs.
Reference: [43] <author> Andrzej Tarlecki, Rod Burstall, and Joseph Goguen. </author> <title> Some fundamental algebraic tools for the semantics of computation, part 3: Indexed categories. </title> <journal> Theoretical Computer Science, </journal> <volume> 91 </volume> <pages> 239-264, </pages> <year> 1991. </year> <note> Also, Monograph PRG-77, </note> <month> August </month> <year> 1989, </year> <title> Programming Research Group, </title> <publisher> Oxford University. </publisher>
Reference-contexts: Noting that P is a (strict) indexed category (in the sense of <ref> [43] </ref>), and that Dgm (S) = Flat (P ) (again, see [43] for this notation), we can use Theorem 2 of [43] to show the (finite) cocompleteness of Flat (P ) by checking the hypotheses of that theorem: 1. <p> Noting that P is a (strict) indexed category (in the sense of <ref> [43] </ref>), and that Dgm (S) = Flat (P ) (again, see [43] for this notation), we can use Theorem 2 of [43] to show the (finite) cocompleteness of Flat (P ) by checking the hypotheses of that theorem: 1. Cat is cocomplete. 2. [B ! S] op is (finitely) cocomplete for any category B because S is assumed (finitely) complete. 3. <p> Noting that P is a (strict) indexed category (in the sense of <ref> [43] </ref>), and that Dgm (S) = Flat (P ) (again, see [43] for this notation), we can use Theorem 2 of [43] to show the (finite) cocompleteness of Flat (P ) by checking the hypotheses of that theorem: 1. Cat is cocomplete. 2. [B ! S] op is (finitely) cocomplete for any category B because S is assumed (finitely) complete. 3.
Reference: [44] <author> B.R. Tennison. </author> <title> Sheaf Theory. Cambridge, </title> <booktitle> 1975. London Mathematical Society Lecture Notes Series, </booktitle> <pages> 20. </pages>
Reference-contexts: This is called the sheaf condition. 2 It seems worth noting at this point that every presheaf is contained in a least sheaf, called its enveloping sheaf; more precisely, there is a left adjoint to the inclusion functor of sheaves into presheaves, called the sheafification functor; see <ref> [44] </ref> for some further details. 11 3 System, Behaviour and Interconnection The previous section presented objects as coherent collections of possible observations. This section considers systems of such objects, and in particular, it considers how their joint behaviour is determined by the behaviours of their components.
Reference: [45] <author> Glynn Winskel. </author> <title> A compositional proof system on a category of labelled transition systems. </title> <journal> Information and Computation, </journal> <volume> 87 </volume> <pages> 2-57, </pages> <year> 1990. </year>
Reference-contexts: Trace models, as used in CSP [30] and other process algebras, are a prototypical example. From this point of view, Petri nets [40], (labelled) transition systems <ref> [45] </ref>, and synchronisation trees [36] can also be seen as syntactic. Actually, things are not quite so simple, because the approaches that we have lumped together as "syntactic" really have varying degrees of semantics. <p> A definition of deadlock is also given, which again seems more general than anything in the literature. Category theory has by now been used in many studies of concurrency; for example, see <ref> [45, 35, 11] </ref>. But as far as I know, only Monteiro and Pereira [37] have previously studied concurrency using sheaves; however, their approach does not seem to be closely related to the present paper.
Reference: [46] <author> Kosaku Yosida. </author> <title> Functional Analysis. </title> <publisher> Springer, </publisher> <year> 1968. </year> <note> Second Edition. 30 </note>
Reference-contexts: a more sophisticated structure category: because the differential equations involved are linear, the spaces of solutions are vector spaces; and because they also have a topological structure, we could let C be the category of topological vector spaces; an even better choice would be the category of Banach spaces (See <ref> [46] </ref> for information on functional analysis, including Banach spaces, and Section 2.2 below for an approach to handling such additional structure.) 2 In much the same way, we could look at an object of solutions to some partial differential equation on a smooth manifold, for example, describing the flow of heat
References-found: 46

