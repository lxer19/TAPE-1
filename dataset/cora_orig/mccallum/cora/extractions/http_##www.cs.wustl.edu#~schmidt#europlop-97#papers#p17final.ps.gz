URL: http://www.cs.wustl.edu/~schmidt/europlop-97/papers/p17final.ps.gz
Refering-URL: http://www.cs.wustl.edu/~schmidt/europlop-97/workshops.html
Root-URL: 
Email: email: -bjorne, li-@nada.kth.se  
Phone: Phone: +46-8-790 6277 Fax: +46-8-790 0930  
Author: Bjrn Eiderbck and Jiarong Li 
Address: S-100 44 Stockholm, Sweden  
Affiliation: IPLab, NADA, KTH  
Date: June 6 1997.  
Note: Undertaker FINAL DRAFT SUBMISSION EPLOP-97,  
Abstract: In this paper we will describe the pattern Undertaker aimed at handling dangling references to objects which not are recognized as garbage by the environments ordinary reclamation facilities. The context of the work is an environment which comprises a garbage collector, as Smalltalk or Java, but we believe that this pattern more generally could be applicable to environments without such services, as C++. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Eiderbck 1993 Eiderbck, B. and Hgglund, P. </author> <title> MultiGossip a General Distribution Package in Smalltalk, </title> <booktitle> in Proc. of the First International Conference on Multi-Media Modelling, </booktitle> <address> Singapore, Nov 9-12, </address> <year> 1993, </year> <pages> pp. 293-307. </pages>
Reference-contexts: 1 Introduction This particular work was originally driven by efforts to utilizing the VisualWorks (ParcPlace 1992, ParcPlace-Digitalk 1995a) Smalltalk environment with distribution facilities <ref> (Eiderbck 1993) </ref>. The development of a distributed applications is well known to be a difficult task. The debugging, modification maintenance of such applications are even harder. <p> Throughout the paper we assume that the readers are familiar with the patterns in the book Design Patterns: Elements of Reusable Object-Oriented Software (Gamma et al 1995). 1.1 Background We have developed a distribution package, MultiGossip (MG) <ref> (Eiderbck 1993) </ref>, on top of VisualWorks. The package is completely written in Smalltalk and our aim is to provide programmers with seamless and reflexive distribution mechanisms for all kinds of objects. A particular goal was to enable experimentation of Computer Supported Cooperative Work (CSCW) applications. <p> This approach is used in MultiGossip <ref> (Eiderbck 1993) </ref> to both control the system as such, e.g. in browsers aimed at controlling connections, and in more mundane services as transparently managing objects situated in files.
Reference: <author> Buschmann et al 1996 Buschmann, F., Meunier, R., Rohnert, H., Sommerlad, P. and Stal, M. </author> <title> Pattern - Oriented Software Architecture A System of Patterns, </title> <publisher> Wiley, </publisher> <year> 1996. </year>
Reference-contexts: In languages with no reclamation facility built into the environment it would certainly be straight forward to incorporate the Undertaker pattern by first adding an idiom such as the counted pointerdescribed in <ref> (Buschmann et al 1996) </ref>to the environment. 4 Future Work This work has taken place as an effort to solve a particular problem within a specific domain, i.e. within VisualWorks.
Reference: <author> Gamma et al 1995 Gamma, E., Helm, R., Johnson, R. and Vlissides, J. </author> <title> De sign Patterns: Elements of Reusable Object-Oriented Software, </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: Throughout the paper we assume that the readers are familiar with the patterns in the book Design Patterns: Elements of Reusable Object-Oriented Software <ref> (Gamma et al 1995) </ref>. 1.1 Background We have developed a distribution package, MultiGossip (MG) (Eiderbck 1993), on top of VisualWorks. The package is completely written in Smalltalk and our aim is to provide programmers with seamless and reflexive distribution mechanisms for all kinds of objects. <p> the pattern description we demonstrate how we can use the above described features of a weak array, i.e. weak pointers and information to subscribers upon object reclamation, in combination with an extended value holder (ParcPlace-Digitalk 1995a) and a new change manager, see the implementation discussion of the observer pattern in <ref> (Gamma et al 1995) </ref>. 2 The Undertaker Pattern Name Undertaker Intent Provide publishers with facilities to reclaim references to subscribers that have ceased to exist without informing the publisher. Enable reuse of components that not are constructed with the possibility to sur vive while any of its subscribers disappears.
Reference: <author> Lewis 1995 Lewis, S. </author> <title> The Art and Science of Smalltalk, </title> <publisher> Prentice Hall, </publisher> <year> 1995. </year> <institution> ParcPlace 1992 ParcPlace Systems Inc. ParcPlace VisualWorks"Smalltalk 80, ver. 1.0, 1992. ParcPlace-Digitalk 1995a ParcPlace-Digitalk Inc. VisualWorks"Smalltalk-80, ver. 2.5, 1995. ParcPlace-Digitalk 1995b ParcPlace-Digitalk Inc. VisualWave, ver. 1.0, 1995. ParcPlace-Digitalk 1995c ParcPlace-Digitalk Inc. VisualSmalltalk Enterprise, ver. 3.1, </institution> <year> 1995. </year>
Reference-contexts: Brighter colored smoother arrows and comments are used to specifically emphasize the publisher, the concrete subscribers and the receiver. Especially note that the visual component is explicitly dependent on the publisherthrough a model-view relation inherited from the Model-View-Controller concept <ref> (Lewis 1995, Buschmann et al 1996) </ref>and that typically an appli cation is implicitly dependent on the publisherthrough an instance of ChangeManager.
References-found: 4

