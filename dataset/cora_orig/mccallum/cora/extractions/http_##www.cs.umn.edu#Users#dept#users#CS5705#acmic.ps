URL: http://www.cs.umn.edu/Users/dept/users/CS5705/acmic.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/CS5705/
Root-URL: http://www.cs.umn.edu
Email: fcandan; vsg@cs.umd.edu  
Title: An Algebra and Calculus for Multidatabases with Integrity Constraints  
Author: Kasim S. Candan and V.S. Subrahmanian 
Address: College Park, Maryland 20742.  
Affiliation: Department of Computer Science Institute for Advanced Computer Studies Institute for Systems Research University of Maryland  
Abstract: Litwin et. al. have developed a language called MSQL for query multidatabases. Subsequently, Grant, Litwin, Roussopolous and Sellis have developed a calculus and algebra associated with MSQL that facilitates querying and interoperation in a multidatabase environment. In this paper, we build upon their framework by assuming that a set of integrity constraints must be satisfied. Even though each individual database in a multidatabase may satisfy the integrity constraints, the entire multidatabase itself may not satisfy the constraints. We propose three new data retrieval notions based on whether the constraint semantics is "naive", "skeptical" or makes "choices." We propose a semantics for these operations, and develop an algebra and calculus based on these operators. We prove that the algebra can be embedded within the calculus however, the calculus is strictly more powerful than the algebra. We study various algebraic properties linking the newly defined operators together and show how these algebraic properties can be used for query optimization. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Agrawal, R. Cochrane and B. Lindsay. </author> <title> (1991) On Maintaining Priorities in a Production Rule System, </title> <booktitle> Proc. </booktitle> <address> VLDB-91, pps 479-487. </address>
Reference-contexts: Naive Join 1 n (D R ; D 1 ; E 1 ; D 2 ; E 2 ) E 2 [D 2 ] j= e ^ ! F 0 t <ref> [1] </ref> = u [1] ^ : : : ^ t [n] = u [n] ^ t [n + 1] = v [1] ^ : : : ^ t [n + m] = v [m]) Here, n is the number of attributes in tuple u and m is the number of attributes <p> Naive Join 1 n (D R ; D 1 ; E 1 ; D 2 ; E 2 ) E 2 [D 2 ] j= e ^ ! F 0 t <ref> [1] </ref> = u [1] ^ : : : ^ t [n] = u [n] ^ t [n + 1] = v [1] ^ : : : ^ t [n + m] = v [m]) Here, n is the number of attributes in tuple u and m is the number of attributes in tuple v. <p> 1 n (D R ; D 1 ; E 1 ; D 2 ; E 2 ) E 2 [D 2 ] j= e ^ ! F 0 t <ref> [1] </ref> = u [1] ^ : : : ^ t [n] = u [n] ^ t [n + 1] = v [1] ^ : : : ^ t [n + m] = v [m]) Here, n is the number of attributes in tuple u and m is the number of attributes in tuple v. 6. <p> ] j= e ^ 8 c*C K ( :notsatisfy 1 (a; c) ) ^ 8 b 8 c*C K [ ( E 1 [D 1 ] j= f ^ b = f 1 g ^ notsatisfy 2 (a; b; c) ) ! a = b ] ! F 0 t <ref> [1] </ref> = u [1] ^ : : : ^ t [n] = u [n] ^ satisfy 1 (t; c) ^ :(9j)(9k)(9l)(F 1 fD D 1 ; ;g (k) ^ F 2 fD D 2 ; ;g (l) ^ j [n + 1] = k [l] ^ : : : ^ j <p> ^ 8 c*C K ( :notsatisfy 1 (a; c) ) ^ 8 b 8 c*C K [ ( E 1 [D 1 ] j= f ^ b = f 1 g ^ notsatisfy 2 (a; b; c) ) ! a = b ] ! F 0 t <ref> [1] </ref> = u [1] ^ : : : ^ t [n] = u [n] ^ satisfy 1 (t; c) ^ :(9j)(9k)(9l)(F 1 fD D 1 ; ;g (k) ^ F 2 fD D 2 ; ;g (l) ^ j [n + 1] = k [l] ^ : : : ^ j [n + m] <p> E 2 ; C K ) E 2 [D 2 ] j= e ^ 8 b 8 c*C K [ ( E 1 [D 1 ] j= f ^ b = f 1 g ^ notsatisfy 2 (a; b; c) ) ! chosen (a; c) ] ! F 0 t <ref> [1] </ref> = u [1] ^ : : : ^ t [n] = u [n] ^ (chosen (t; c) _ :(9j)(9k)(9l)(F 1 fD D 1 ; ;g (k) ^ F 2 fD D 2 ; ;g (l) ^ j [n + 1] = k [l] ^ : : : ^ j [n <p> C K ) E 2 [D 2 ] j= e ^ 8 b 8 c*C K [ ( E 1 [D 1 ] j= f ^ b = f 1 g ^ notsatisfy 2 (a; b; c) ) ! chosen (a; c) ] ! F 0 t <ref> [1] </ref> = u [1] ^ : : : ^ t [n] = u [n] ^ (chosen (t; c) _ :(9j)(9k)(9l)(F 1 fD D 1 ; ;g (k) ^ F 2 fD D 2 ; ;g (l) ^ j [n + 1] = k [l] ^ : : : ^ j [n + m] = <p> Instead, we are using choice mechanisms to resolve conflicts that arise in querying multidatabases. Conflict resolution has also been studied in the context of active databases and production rule systems by many researchers <ref> [15, 2, 1] </ref>. Most of these study what to do when multiple active/production rules with conflicting heads requesting that an atom be both added and deleted, fire simultaneously.
Reference: [2] <author> S. Ceri and J. Widom. </author> <title> (1990) Deriving Production Rules for Constraint Maintenance, </title> <booktitle> Proc. 16th Intl. Conf. on Very Large Data Bases, </booktitle> <address> Brisbane, pps 566-577. </address>
Reference-contexts: Instead, we are using choice mechanisms to resolve conflicts that arise in querying multidatabases. Conflict resolution has also been studied in the context of active databases and production rule systems by many researchers <ref> [15, 2, 1] </ref>. Most of these study what to do when multiple active/production rules with conflicting heads requesting that an atom be both added and deleted, fire simultaneously.
Reference: [3] <author> J. Grant, W. Litwin, N. Roussopoulos and T. Sellis. </author> <title> (1991) An Algebra and Calculus for Relational Multidatabase Systems, </title> <booktitle> Proc. First International Workshop on Interoperability in Multi-database Systems, </booktitle> <publisher> IEEE Computer Society Press (1991) 118-124. </publisher>
Reference-contexts: Various aspects of integrating multiple relational databases have been studied by a number of authors. Litwin et. al. [9] were one of the first to develop a formal language, called MSQL, for querying multidatabases. Grant, et. al. <ref> [3] </ref> have extended these ideas and developed an algebra and calculus based on MSQL that can be used to query a multidatabase. <p> In this section, we will quickly review and relate our work with existing methods in this field. First and foremost, our work extends work by Grant, Litwin, Roussopolous and Sellis <ref> [3] </ref> who developed a calculus and algebra based on a query language called called MSQL (due to Litwin et. al. [9]) that extends SQL and which can be used to query multiple relational databases. <p> These methods to deal with inconsistencies in the presence of integrity constraints distinguish our work from that presented in <ref> [3] </ref>. Our work too builds upon SQL, and thus enjoys the ease of expression present in SQL. 40 Litwin and Abdellatif [8] develop methods to query multidatabases in their approach, they define a tuple-calculus based query language in which they can query multiple databases. As in the case of [3], they <p> in <ref> [3] </ref>. Our work too builds upon SQL, and thus enjoys the ease of expression present in SQL. 40 Litwin and Abdellatif [8] develop methods to query multidatabases in their approach, they define a tuple-calculus based query language in which they can query multiple databases. As in the case of [3], they do not deal with violations of integrity constraints which is the main focus of our paper.
Reference: [4] <author> M. Garey and D.S. Johnson. </author> <title> (1979) Computers and Intractability: A Guide to the Theory of NP-Completeness. </title>
Reference-contexts: The following is the formal definition for the M CAS for the choice operator. Definition 7.7 (M CAS Choice) M CAS for the Choice Select operator is any "maximal independent set" <ref> [4] </ref> of the resulting graph (follows directly from the definition of the "maximal independent set").
Reference: [5] <author> A. Gupta, Y. Sagiv, J. Ullman and J. Widom. </author> <title> (1994) Constraint Checking with Partial Information, </title> <booktitle> Proc. 1994 ACM Symp. on Principles of Database Systems, </booktitle> <address> pps 45-55. </address>
Reference-contexts: Following the notation of Gupta, et. al. <ref> [5] </ref>, we express integrity constraints in the form A 1 & : : : & A n ! panic: Intuitively, this constraint says that we should panic if all the conditions A 1 ; : : :; A n are satisfied simultaneously.
Reference: [6] <author> Y. Ioannidis and T. Sellis. </author> <title> (1989) Conflict Resolution of Rules Assigning Values to Virtual Attributes, </title> <booktitle> Proc. ACM SIGMOD Symp. on Management of Data. </booktitle>
Reference: [7] <author> R. Krishnamurthy, W. Litwin and W. Kent. </author> <title> (1991) Language Features for Interoperability of Databases with Schematic Discrepancies, </title> <booktitle> Proc. 1991 ACM SIGMOD Conf. on Management of Data, </booktitle> <address> pps 40-49. </address>
Reference-contexts: Conversely, they can "group" sets of databases (e.g. a Michelin database, a Gault Milan database, and a Baedekar database may all be grouped together as "Travel" databases) which we cannot do in our current framework. Krishnamurthy, Litwin and Kent <ref> [7] </ref> define criteria that a language that a language that integrates multiple databases must satisfy. They show how to handle schematic discrepancies.
Reference: [8] <author> W. Litwin and A. Abdellatif. </author> <title> (1986) Multidatabase Interoperability, </title> <booktitle> IEEE Computer, </booktitle> <month> Dec. </month> <year> 1986, </year> <month> pps 10-18. </month>
Reference-contexts: These methods to deal with inconsistencies in the presence of integrity constraints distinguish our work from that presented in [3]. Our work too builds upon SQL, and thus enjoys the ease of expression present in SQL. 40 Litwin and Abdellatif <ref> [8] </ref> develop methods to query multidatabases in their approach, they define a tuple-calculus based query language in which they can query multiple databases. As in the case of [3], they do not deal with violations of integrity constraints which is the main focus of our paper.
Reference: [9] <author> W. Litwin, A. Abdellatif, A. Zeroual, B. Nicolas and Ph. Vigier. </author> <year> (1989) </year> <month> MSQL: </month> <title> A Multidatabase Language, </title> <journal> Information Sciences, </journal> <volume> 49, </volume> <year> 1989. </year>
Reference-contexts: In this paper, we study the problem of integrating a set of relational databases when integrity constraints are present. Various aspects of integrating multiple relational databases have been studied by a number of authors. Litwin et. al. <ref> [9] </ref> were one of the first to develop a formal language, called MSQL, for querying multidatabases. Grant, et. al. [3] have extended these ideas and developed an algebra and calculus based on MSQL that can be used to query a multidatabase. <p> First and foremost, our work extends work by Grant, Litwin, Roussopolous and Sellis [3] who developed a calculus and algebra based on a query language called called MSQL (due to Litwin et. al. <ref> [9] </ref>) that extends SQL and which can be used to query multiple relational databases. This approach has the advantage that it extends, in a simple and easy to use way, the existing standard database query language, viz. SQL.
Reference: [10] <author> D. Sacca and C. Zaniolo. </author> <title> (1990) Stable Models and Non-Determinism in Logic Programs with Negation, </title> <booktitle> Proc. 9th ACM Symp. on Principles of Database Systems. </booktitle>
Reference-contexts: The truth value of this predicate not only depends on its attributes but also depends on the other tuples in the relation. The notion of a choice predicate is due to Zaniolo and his co-workers <ref> [10, 14] </ref> and was originally used for characterizing the semantics of nonmonotonic negation in deductive databases. In contrast, our use of this construct is to enable the resolution of inconsistencies in a multidatabase setting. <p> It is instructive to note that this survey does not specify what to do when integrity constraints are violated. We should mention that the idea behind CHOICE SELECT and CHOICE JOIN was motivated, in part, by work by Zaniolo <ref> [14, 10] </ref> and his colleagues on nondeterministic choices in logic programming languages. The idea in their work was that in logic database languages, one may often wish to express the fact that one out of several possible ways of satisfying an atom is nondeterministically selected.
Reference: [11] <author> A. Sheth and J. Larson. </author> <title> (1990) Federated Database Systems for Managing Distributed, Heterogeneous and Autonomous Databases, </title> <journal> ACM Computing Surveys, </journal> <volume> 22, 3, </volume> <pages> pps 183-236. </pages>
Reference-contexts: In contrast, our focus is on how to proceed when integrity constraints are violated. A good survey of database integration schemes using the federated approach is content in Sheth and Larson <ref> [11] </ref>. It is instructive to note that this survey does not specify what to do when integrity constraints are violated.
Reference: [12] <author> S. Spaccapietra and C. Parent. </author> <title> (1994) View Integration: A Step Forward in Solving Structural Conflicts, </title> <journal> IEEE Trans. on Knowledge and Data Engineering, </journal> <volume> 6, 2, </volume> <pages> pps 258-274. </pages>
Reference-contexts: They define a query language that takes such schematic mismatches into account when handling queries. In a similar vein, Spaccapietra and Parent <ref> [12] </ref> structural conflicts that arise when multiple databases contain similar, but structurally different data. They show how data across multiple databases can be "linked" or "tied together" based on common attribute values (even though the attribute names may be different across different databases).
Reference: [13] <author> J. D. Ullman. </author> <booktitle> (1988) Database and Knowledge-Base Systems, </booktitle> <volume> Vol. 1, </volume> <publisher> Computer Science Press. </publisher> <pages> 42 </pages>
Reference-contexts: the form: fxjF fd 1 ; d 2 g (x)g where d 1 ; d 2 2 D fl , x is the only free tuple variable in the formula F , and there are no free constraint variables. 5.3 Safe ICBM-Calculus As in the case of standard database calculis <ref> [13] </ref>, we define the notion of safe ICBM Calculus expressions to obey the following limitations: 1. (8x) is not used at all (notice that here x is a tuple variable) 2. if the _ operator connects two formulas F 1 and F 2 , then these formulas each have only one
Reference: [14] <author> C. Zaniolo. </author> <title> (1988) Design and Implementation of a Logic-based Language for Data-Intensive Applications, </title> <booktitle> Proc. of the International Conference on Logic Programming (eds. </booktitle> <editor> K. Bowen and R. Kowalski), </editor> <address> pps 1666-1687, </address> <publisher> MIT Press. </publisher>
Reference-contexts: The truth value of this predicate not only depends on its attributes but also depends on the other tuples in the relation. The notion of a choice predicate is due to Zaniolo and his co-workers <ref> [10, 14] </ref> and was originally used for characterizing the semantics of nonmonotonic negation in deductive databases. In contrast, our use of this construct is to enable the resolution of inconsistencies in a multidatabase setting. <p> It is instructive to note that this survey does not specify what to do when integrity constraints are violated. We should mention that the idea behind CHOICE SELECT and CHOICE JOIN was motivated, in part, by work by Zaniolo <ref> [14, 10] </ref> and his colleagues on nondeterministic choices in logic programming languages. The idea in their work was that in logic database languages, one may often wish to express the fact that one out of several possible ways of satisfying an atom is nondeterministically selected.
Reference: [15] <author> C. Zaniolo. </author> <title> (1993) A Unified Semantics for Active and Deductive Databases, in "Rules in Database Systems," </title> <editor> (N. Paton, ed.), </editor> <publisher> Springer Verlag, </publisher> <year> 1994. </year> <month> 43 </month>
Reference-contexts: Instead, we are using choice mechanisms to resolve conflicts that arise in querying multidatabases. Conflict resolution has also been studied in the context of active databases and production rule systems by many researchers <ref> [15, 2, 1] </ref>. Most of these study what to do when multiple active/production rules with conflicting heads requesting that an atom be both added and deleted, fire simultaneously.
References-found: 15

