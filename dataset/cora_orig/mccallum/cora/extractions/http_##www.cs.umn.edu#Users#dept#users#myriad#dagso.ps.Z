URL: http://www.cs.umn.edu/Users/dept/users/myriad/dagso.ps.Z
Refering-URL: http://www.cs.umn.edu/Users/dept/users/myriad/
Root-URL: http://www.cs.umn.edu
Phone: 2  
Title: Concurrency Control in Federated Databases: A Dynamic Approach  
Author: San-Yih Hwang Jiandong Huang Jaideep Srivastava 
Address: 200 Union St. SE, Minneapolis, MN 55455.  3660 Technology Drive, Minneapolis, MN 55418.  
Affiliation: 1 Computer Science Department, University of Minnesota,  Sensor and System Development Center, Honeywell,  
Abstract: The concurrency control problem in a federated database system (FDBS) is especially difficult due to the inherent heterogeneity and autonomy of participating local database systems. A number of FDBS concurrency control algorithms have been proposed. However, each algorithm has the drawbacks of low concurrency, global deadlocks or high system resource wastage. In this paper we propose a new protocol, called Dynamic Adjustment of Global Serialization Order (DAGSO), which provides high concurrency and is able to reduce system resource wastage due to early detection and abortion of eventually non-globally serializable transactions. The protocol is proved to be correct for achieving global serializability and free from global deadlocks. This paper also compares, using a detailed simulation model, the global transaction throughput of DAGSO with Top Down, Bottom Up, and Site Graph approaches proposed in the literature. The results show that DAGSO performs the best in most local system operating regions and range of global transaction behavior. 
Abstract-found: 1
Intro-found: 1
Reference: [Batr92] <author> R. K. Batra, M. Rusinkiewicz, and D. Georgakopoulos, </author> <title> A Decentralized Deadlock-free Concurrency Control Method for Multidatabase Transactions, </title> <type> GTE Technical Report , 1992. </type>
Reference-contexts: The objective of transaction management in the FDBS is to guarantee serializable execution of local and global transactions 3 . Several solutions have been proposed for achieving serializable execution [Brei88] [Pu88] [Elma90] [Geor91] [Mehr92b] <ref> [Batr92] </ref>. Each proposed approach, although has its strengths, has some shortcomings. Most of them suffer low concurrency, possibility of global deadlocks, or wasteful resource consumption. The main problem for these 3 Serializability [Eswa76] is a well accepted, but strict correctness criterion for database transaction management. <p> In [Elma90] , <ref> [Batr92] </ref>, and some schemes proposed in [Mehr92b], the global order of a transaction is decided when the transaction starts and is enforced throughout its lifetime. In [Pu88] and [Geor91], a transaction is validated (to match the global orders of other committed transactions) only at the end of its execution. <p> The condition for successful validation is that the local serialization orders follow the global order. By the traditional timestamp ordering approach [Bern87], or the global timestamp approach proposed for federated concurrency control <ref> [Batr92] </ref>, a global transaction aborts if any of the local serialization orders do not match the global timestamp order. However, some transactions need not abort, since the validation condition is sufficient but not necessary. Consider global transactions G1 and G2, each having subtransactions executing at Site 1 and Site 2.
Reference: [Bern87] <author> P.A. Bernstein, V. Hadzilacos, and N. Goodman, </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison Wesley, </publisher> <address> Reading, MA, </address> <year> 1987. </year>
Reference-contexts: Finally, section 6 summarizes this work and points out future extensions. 2. Related Work In this section, we describe the concurrency control problems in the FDBS environment and review the related work. Unless otherwise noted, we refer to serializability as conflict serializability as defined in <ref> [Bern87] </ref>. Definition 2.1. <p> For some local concurrency control mechanisms, e.g. 2-phase locking (2PL), timestamp ordering, and optimistic validation <ref> [Bern87] </ref>, the local serialization order of global transactions in a local execution can be determined by considering the times when global subtransactions reach their serialization points [Leu90]. <p> In case the types of local concurrency control mechanisms are not known to the FDBS, or the local concurrency control employs some mechanism, e.g. serialization graph testing approach <ref> [Bern87] </ref>, such that the serialization order of a transaction cannot be decided in its life time, a ticketing approach can be applied to get the local serialization order [Geor91]. The ticketing approach forces each global subtransaction executing at a site to read and increment a common data item called ticket. <p> Dynamic adjustment of global serialization order A global subtransaction is validated by comparing the local serialization orders with the global order. The condition for successful validation is that the local serialization orders follow the global order. By the traditional timestamp ordering approach <ref> [Bern87] </ref>, or the global timestamp approach proposed for federated concurrency control [Batr92], a global transaction aborts if any of the local serialization orders do not match the global timestamp order. However, some transactions need not abort, since the validation condition is sufficient but not necessary.
Reference: [Brei88] <author> Y. Breitbart and A. Silberschatz, </author> <title> Multidatabase Update Issues, </title> <booktitle> Proc. of the ACM SIGMOD Intl Conference on Management of Data, </booktitle> <year> 1988. </year>
Reference-contexts: The objective of transaction management in the FDBS is to guarantee serializable execution of local and global transactions 3 . Several solutions have been proposed for achieving serializable execution <ref> [Brei88] </ref> [Pu88] [Elma90] [Geor91] [Mehr92b] [Batr92]. Each proposed approach, although has its strengths, has some shortcomings. Most of them suffer low concurrency, possibility of global deadlocks, or wasteful resource consumption. The main problem for these 3 Serializability [Eswa76] is a well accepted, but strict correctness criterion for database transaction management. <p> This approach is deadlock-free and incurs less computation overhead. However, it suffers low concurrency for some local concurrency control mechanisms (e.g. 2PL). One approach that does not use the local serialization order concept is Site Graph <ref> [Brei88] </ref>. Site Graph is a pessimistic approach, which assumes conflicts exist between every pair of global transactions executed simultaneously at the same site. The approach maintains an acyclic Site Graph, whose nodes are all the participating sites.
Reference: [Du89] <author> W. Du and A. Elmagarmid, </author> <title> Quasi Serializability: A Correctness Criterion for Global Concurrency Control in Interbase, </title> <booktitle> Proc. of the 15th Intl. Conf. on Very Large Data Bases, </booktitle> <address> Amsterdam, </address> <month> Aug. </month> <year> 1989. </year>
Reference-contexts: The main problem for these 3 Serializability [Eswa76] is a well accepted, but strict correctness criterion for database transaction management. A number of weaker correctness criteria for FDBS environment, which model different application scenarios, have been proposed <ref> [Du89] </ref> [Rusi90] [Pu91] [GaMo91] [Mehr92a].
Reference: [Elma90] <author> A.K. Elmagarmid and W. Du, </author> <title> A Paradigm for Concurrency Control in Heterogeneous Distributed Database Systems, </title> <booktitle> Proc. of the 6th Int. Conf. on Data Engineering, </booktitle> <month> Feb. </month> <year> 1990. </year>
Reference-contexts: The objective of transaction management in the FDBS is to guarantee serializable execution of local and global transactions 3 . Several solutions have been proposed for achieving serializable execution [Brei88] [Pu88] <ref> [Elma90] </ref> [Geor91] [Mehr92b] [Batr92]. Each proposed approach, although has its strengths, has some shortcomings. Most of them suffer low concurrency, possibility of global deadlocks, or wasteful resource consumption. The main problem for these 3 Serializability [Eswa76] is a well accepted, but strict correctness criterion for database transaction management. <p> In <ref> [Elma90] </ref> , [Batr92], and some schemes proposed in [Mehr92b], the global order of a transaction is decided when the transaction starts and is enforced throughout its lifetime. <p> Therefore, no matter what types of concurrency control protocols are used in local DBMS's, a local serialization order of global transactions on the execution at each site can be obtained. A number of FDBS concurrency control algorithms based on local serialization order have been proposed, e.g. [Pu88], <ref> [Elma90] </ref> and [Geor91]. The approaches described in [Pu88] and [Geor91] are of type Bottom Up. In this approach, all operations of a global transaction are submitted to the local DBMS's for execution without suspension. A global transaction can be validated when all its subtransactions complete (but do not commit yet). <p> This optimistic approach may provide high concurrency, but has the drawback of late abortion (occurs when a transaction fails to pass the validation phase at its end), which causes a waste of resources (CPU, I/O, and network), in addition to global deadlocks. In <ref> [Elma90] </ref> a Top Down approach is described which assigns a particular order of global transactions beforehand. <p> The serialization order of global transactions in the execution at each local DBMS then follows the global order. Thus, DAGSO is comparable to the Top Down approach <ref> [Elma90] </ref> since the global serialization order is defined before transaction execution. With the predefined global ordering mechanism, the task of global concurrency control is to monitor the local serialization order of global subtransactions executing at each local DBMS and to match it with the global serialization order.
Reference: [Eswa76] <author> K.P.Eswaran, J. N. Gray, R. A. Lorie and I. L. Traiger, </author> <title> "The Notions of Consistency and Predicate Locks in a Database Systems," </title> <journal> Comm. ACM, </journal> <volume> Vol. 19, No. 11, </volume> <month> Nov. </month> <year> 1976. </year>
Reference-contexts: Several solutions have been proposed for achieving serializable execution [Brei88] [Pu88] [Elma90] [Geor91] [Mehr92b] [Batr92]. Each proposed approach, although has its strengths, has some shortcomings. Most of them suffer low concurrency, possibility of global deadlocks, or wasteful resource consumption. The main problem for these 3 Serializability <ref> [Eswa76] </ref> is a well accepted, but strict correctness criterion for database transaction management. A number of weaker correctness criteria for FDBS environment, which model different application scenarios, have been proposed [Du89] [Rusi90] [Pu91] [GaMo91] [Mehr92a].
Reference: [GaMo91] <author> H. Garcia-Molina, </author> <title> Global Consistency Constraints Considered Harmful in Heterogeneous Database Systems, </title> <booktitle> The 1st Intl. Workshop on Interoperability in Multidatabase Systems, </booktitle> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: The main problem for these 3 Serializability [Eswa76] is a well accepted, but strict correctness criterion for database transaction management. A number of weaker correctness criteria for FDBS environment, which model different application scenarios, have been proposed [Du89] [Rusi90] [Pu91] <ref> [GaMo91] </ref> [Mehr92a].
Reference: [Geor91] <author> D. Georgakopoulos, M. Rusinkiewicz and A Sheth, </author> <title> On Serializability of Multidatabase Transactions Through Forced Local Conflicts, </title> <booktitle> Proc. of the 7th Int. Conf. on Data Engineering, </booktitle> <month> Feb. </month> <year> 1991. </year>
Reference-contexts: The objective of transaction management in the FDBS is to guarantee serializable execution of local and global transactions 3 . Several solutions have been proposed for achieving serializable execution [Brei88] [Pu88] [Elma90] <ref> [Geor91] </ref> [Mehr92b] [Batr92]. Each proposed approach, although has its strengths, has some shortcomings. Most of them suffer low concurrency, possibility of global deadlocks, or wasteful resource consumption. The main problem for these 3 Serializability [Eswa76] is a well accepted, but strict correctness criterion for database transaction management. <p> In [Elma90] , [Batr92], and some schemes proposed in [Mehr92b], the global order of a transaction is decided when the transaction starts and is enforced throughout its lifetime. In [Pu88] and <ref> [Geor91] </ref>, a transaction is validated (to match the global orders of other committed transactions) only at the end of its execution. While the former approach may limit the degree of concurrency, the later approach may cause wastage of resources. <p> concurrency control mechanisms are not known to the FDBS, or the local concurrency control employs some mechanism, e.g. serialization graph testing approach [Bern87], such that the serialization order of a transaction cannot be decided in its life time, a ticketing approach can be applied to get the local serialization order <ref> [Geor91] </ref>. The ticketing approach forces each global subtransaction executing at a site to read and increment a common data item called ticket. The local serialization order of a subtransaction is the ticket value it reads. <p> Therefore, no matter what types of concurrency control protocols are used in local DBMS's, a local serialization order of global transactions on the execution at each site can be obtained. A number of FDBS concurrency control algorithms based on local serialization order have been proposed, e.g. [Pu88], [Elma90] and <ref> [Geor91] </ref>. The approaches described in [Pu88] and [Geor91] are of type Bottom Up. In this approach, all operations of a global transaction are submitted to the local DBMS's for execution without suspension. A global transaction can be validated when all its subtransactions complete (but do not commit yet). <p> A number of FDBS concurrency control algorithms based on local serialization order have been proposed, e.g. [Pu88], [Elma90] and <ref> [Geor91] </ref>. The approaches described in [Pu88] and [Geor91] are of type Bottom Up. In this approach, all operations of a global transaction are submitted to the local DBMS's for execution without suspension. A global transaction can be validated when all its subtransactions complete (but do not commit yet).
Reference: [Hwan92] <author> S.Y. Hwang, J. Srivastava and J. Li, </author> <title> Transaction Recovery in Federated Autonomous Databases, </title> <note> to appear in Journal of Parallel and Distributed Databases, 1993, also available as Dept. </note> <institution> Computer Sci., Univ. Minnesota, Minneapolis, MN, </institution> <type> Tech. Rep TR 92-15, </type> <month> Mar. </month> <year> 1992. </year>
Reference-contexts: A local DBMS cannot distinguish between local and global transactions. Each local DBMS provides a visible prepared-to-commit state for its transactions. This assumption is made to focus our study on the concurrency control aspect. We consider recovery issues in <ref> [Hwan92] </ref>. Intersite communication is reliable. Network partition problem is not our concern in this paper. 4. Dynamic Concurrency Control In this section, we present our global concurrency control protocol, called Dynamic Adjustment of Global Serialization Order (DAGSO).
Reference: [Hwan93] <author> S.Y. Hwang, J. Huang, and J. Srivastava, </author> <title> "Concurrency Control in Federated Databases: A Dynamic Approach", </title> <institution> Dept. Computer Sci., Univ. Minnesota, Minneapolis, MN, </institution> <type> Tech. Rep TR 92-66, </type> <month> April, </month> <year> 1993. </year>
Reference-contexts: This section provides formal proofs of these properties and analyzes its computational complexity. Due to space limitation, we do not present proofs of Lemma 1, 2 and 3. The reader is referred to <ref> [Hwan93] </ref> for details. Lemma 1. For each arc (Gi, Gj, s) in VirtGlobalSG, the global order of Gi is less than that of Gj at any time. Theorem 1. The algorithm can achieve global serializability. <p> However, notice that Theorem 3 is a worst case analysis. We have conducted experiments whose results show that most validation requests do not perform graph cycle detection and only take constant time <ref> [Hwan93] </ref>. 5. Performance Evaluation The performance of a global concurrency control algorithm can be affected by a number of factors. In the previous section, we analyzed DAGSO and other three algorithms with respect to computational complexity. <p> Thus, DAGSO validation does not incur much overhead at run time. In addition, the dynamic global order adjustment significantly reduces unnecessary aborts. Due to space limitation, these experimental results are not included in this paper. Interested readers are referred to [Huan93] and <ref> [Hwan93] </ref>. 6. Conclusion A number of FDBS concurrency control algorithms have been proposed recently for ensuring global serializability. Even though each algorithm has its unique characteristics and strength, it also exhibits some drawbacks, like low concurrency, global deadlock, or high wastage of system resources.
Reference: [Huan93] <author> J. Huang, S.Y. Hwang and J. Srivastava, </author> <title> Concurrency Control in Federated Database Systems: A Performance Study, </title> <institution> Dept. Computer Sci., Univ. Minnesota, Minneapolis, MN, </institution> <type> Tech. Rep TR 93-15, </type> <month> Feb. </month> <year> 1993. </year>
Reference-contexts: To further investigate the DAGSO algorithm, we have conducted a comprehensive performance study. In this section, we demonstrate some of the performance results. For more data and detailed performance analysis, the reader is referred to <ref> [Huan93] </ref>. 5.1 Simulation Model We have developed a detailed simulation model for studying a variety of global concurrency control algorithms and performance tradeoffs. We briefly describe the model in the following. The simulation model includes global and local transaction models as well as system models. <p> Thus, DAGSO validation does not incur much overhead at run time. In addition, the dynamic global order adjustment significantly reduces unnecessary aborts. Due to space limitation, these experimental results are not included in this paper. Interested readers are referred to <ref> [Huan93] </ref> and [Hwan93]. 6. Conclusion A number of FDBS concurrency control algorithms have been proposed recently for ensuring global serializability. Even though each algorithm has its unique characteristics and strength, it also exhibits some drawbacks, like low concurrency, global deadlock, or high wastage of system resources.
Reference: [Kung81] <author> H.T.Kung and J.T.Robinson, </author> <title> "On Optimistic Methods for Concurrency Control," </title> <journal> ACM TODS, </journal> <volume> Vol. 6, No. 2, </volume> <month> June, </month> <year> 1981. </year>
Reference-contexts: Optimistic concurrency control To increase the degree of concurrency, DAGSO employs an optimistic approach <ref> [Kung81] </ref>. A global transaction starts on obtaining its global order, and each of its subtransactions is submitted to the local DBMS without suspension. To this extent, DAGSO is comparable to the Bottom Up approach, having the advantage of high concurrency.
Reference: [Leu90] <author> Y. Leu and A.K. Elmagarmid, </author> <title> A Hierarchical Approach to Concurrency Control for Multidatabases, </title> <booktitle> Proc. of the 2nd Intl. Symposium on Databases in Parallel and Distributed Systems, </booktitle> <month> June </month> <year> 1990. </year>
Reference-contexts: For some local concurrency control mechanisms, e.g. 2-phase locking (2PL), timestamp ordering, and optimistic validation [Bern87], the local serialization order of global transactions in a local execution can be determined by considering the times when global subtransactions reach their serialization points <ref> [Leu90] </ref>. A transaction is said to reach its serialization point (or to be serialized) if the dependency relationship between it and every other conflicting transaction can be decided.
Reference: [Mehr92a] <author> S. Mehrotra, R. Rastogi, H. F. Korth and A. </author> <title> Silberschatz "Relaxing Serializability in Multidatabase System," </title> <booktitle> Proc. of the 2nd Int'l. Workshop on Research Issues on Data Engineering: Transaction and Query Processing, </booktitle> <month> Feb. </month> <year> 1992. </year>
Reference-contexts: The main problem for these 3 Serializability [Eswa76] is a well accepted, but strict correctness criterion for database transaction management. A number of weaker correctness criteria for FDBS environment, which model different application scenarios, have been proposed [Du89] [Rusi90] [Pu91] [GaMo91] <ref> [Mehr92a] </ref>. While the suitability of these weaker correctness criteria on the FDBS environment needs further investigation, we use serializability as the correctness criterion in this paper. approaches is that the global serialization order of a global transaction is decided either at the beginning or at the end of its execution.
Reference: [Mehr92b] <author> S. Mehrotra, R. Rastogi, H. F. Korth and A. </author> <title> Silberschatz "The Concurrency Control Problem in Multidatabases: Characteristics and Solutions, </title> <booktitle> Proc. of the ACM SIGMOD Conference, </booktitle> <year> 1992. </year>
Reference-contexts: The objective of transaction management in the FDBS is to guarantee serializable execution of local and global transactions 3 . Several solutions have been proposed for achieving serializable execution [Brei88] [Pu88] [Elma90] [Geor91] <ref> [Mehr92b] </ref> [Batr92]. Each proposed approach, although has its strengths, has some shortcomings. Most of them suffer low concurrency, possibility of global deadlocks, or wasteful resource consumption. The main problem for these 3 Serializability [Eswa76] is a well accepted, but strict correctness criterion for database transaction management. <p> In [Elma90] , [Batr92], and some schemes proposed in <ref> [Mehr92b] </ref>, the global order of a transaction is decided when the transaction starts and is enforced throughout its lifetime. In [Pu88] and [Geor91], a transaction is validated (to match the global orders of other committed transactions) only at the end of its execution.
Reference: [Pu88] <author> C. Pu, </author> <title> Superdatabases for Composition of Heterogeneous Databases, </title> <booktitle> Proc. of the 4th Intl. Conf. on Data Engineering, </booktitle> <month> Feb. </month> <year> 1988. </year>
Reference-contexts: The objective of transaction management in the FDBS is to guarantee serializable execution of local and global transactions 3 . Several solutions have been proposed for achieving serializable execution [Brei88] <ref> [Pu88] </ref> [Elma90] [Geor91] [Mehr92b] [Batr92]. Each proposed approach, although has its strengths, has some shortcomings. Most of them suffer low concurrency, possibility of global deadlocks, or wasteful resource consumption. The main problem for these 3 Serializability [Eswa76] is a well accepted, but strict correctness criterion for database transaction management. <p> In [Elma90] , [Batr92], and some schemes proposed in [Mehr92b], the global order of a transaction is decided when the transaction starts and is enforced throughout its lifetime. In <ref> [Pu88] </ref> and [Geor91], a transaction is validated (to match the global orders of other committed transactions) only at the end of its execution. While the former approach may limit the degree of concurrency, the later approach may cause wastage of resources. <p> Therefore, no matter what types of concurrency control protocols are used in local DBMS's, a local serialization order of global transactions on the execution at each site can be obtained. A number of FDBS concurrency control algorithms based on local serialization order have been proposed, e.g. <ref> [Pu88] </ref>, [Elma90] and [Geor91]. The approaches described in [Pu88] and [Geor91] are of type Bottom Up. In this approach, all operations of a global transaction are submitted to the local DBMS's for execution without suspension. <p> A number of FDBS concurrency control algorithms based on local serialization order have been proposed, e.g. <ref> [Pu88] </ref>, [Elma90] and [Geor91]. The approaches described in [Pu88] and [Geor91] are of type Bottom Up. In this approach, all operations of a global transaction are submitted to the local DBMS's for execution without suspension. A global transaction can be validated when all its subtransactions complete (but do not commit yet). <p> Global Timeout is an approach that employs global timeout mechanism. Since our simulation model uses strict 2PL at each local DBMS and uses 2PC protocol between client and GTA's for commitment, global serializability is guaranteed without any further control <ref> [Pu88] </ref>. Global Timeout uses timeout to resolve global deadlocks. We first investigate the throughput of global transactions in a system without resource contention. Each global transaction is assumed to access two sites.
Reference: [Pu91] <author> C. Pu and A. Leff, </author> <title> Replica Control in Distributed Systems: An Asynchronous Approach, </title> <booktitle> Proc. of the ACM SIGMOD Intl Conference on Management of Data, </booktitle> <year> 1991. </year>
Reference-contexts: The main problem for these 3 Serializability [Eswa76] is a well accepted, but strict correctness criterion for database transaction management. A number of weaker correctness criteria for FDBS environment, which model different application scenarios, have been proposed [Du89] [Rusi90] <ref> [Pu91] </ref> [GaMo91] [Mehr92a].
Reference: [Rusi90] <author> M. Rusinkiewicz, A. Elmagarmid, Y. Leu, and W. Litwin, </author> <title> Extending the Transaction Model to Capture More Meaning, </title> <booktitle> SIGMOD record, </booktitle> <address> Vol.19, No.1, </address> <month> March, </month> <year> 1990. </year>
Reference-contexts: The main problem for these 3 Serializability [Eswa76] is a well accepted, but strict correctness criterion for database transaction management. A number of weaker correctness criteria for FDBS environment, which model different application scenarios, have been proposed [Du89] <ref> [Rusi90] </ref> [Pu91] [GaMo91] [Mehr92a].
Reference: [SES92] <author> SES/workbench Reference Manual, </author> <title> Release 2.1, Scientific and Engineering Software, Inc., 4301 Westbank Drive, Building A, </title> <address> Austin, TX 78746, </address> <month> February, </month> <year> 1992. </year>
Reference-contexts: Besides, global timeout is employed for those global concurrency control algorithms such as Bottom Up that do not prevent global deadlocks. Our performance model has been implemented on a simulation testbed using the SES/workbench simulation tool <ref> [SES92] </ref>. Table 5-1 summarizes the parameters used for describing the federated database system model. The table also shows the parameter value range varied during the experiments. Table 5-2 presents the global and local transaction model parameters and their default settings. Most of the parameters are self-explanatory.
Reference: [Shet90] <author> A.P. Sheth and J.A. Larson, </author> <title> "Federated Database Systems for Managing Distributed, Heterogenous, and Autonomous Databases," </title> <journal> ACM Computing Surveys, Vol.22, </journal> <volume> No.3, </volume> <month> Sept. </month> <year> 1990. </year>
Reference-contexts: Autonomy dictates that a participating local DBMS should not be modified by the FDBS, and a local DBMS has the right to decide the types of internal information provided to the FDBS and execute queries and transactions according its own rule <ref> [Shet90] </ref>. Due to autonomy, there are two types of transactions in the entire FDBS environment, namely local transactions and global transactions. A local transaction, which accesses data controlled by a single DBMS, is submitted to and executed by a local DBMS without the control of the FDBS.
References-found: 20

