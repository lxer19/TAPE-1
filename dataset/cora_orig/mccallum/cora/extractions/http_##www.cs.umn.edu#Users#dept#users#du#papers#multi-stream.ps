URL: http://www.cs.umn.edu/Users/dept/users/du/papers/multi-stream.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/du/papers/
Root-URL: http://www.cs.umn.edu
Title: An Effective Data Placement Scheme to Serve Popular Video On-Demand  
Author: Sangyup Shim, Harish Vedavyasa, and David H.C. Du 
Keyword: Multimedia, Video on Demand, data allocation, scheduling  
Address: Minneapolis  
Affiliation: Department of Computer Science University of Minnesota  
Abstract: In this paper, we propose an effective data placement scheme which allocates video data on the disk such that it maximizes concurrent streams that can be supported from the disk. If each user request is served by a separate stream, the number of requests that can be supported is limited due to access constraint on storage. In order to maximize the number of concurrent accesses, requests for a video are accumulated over a predetermined interval, called cycle time, and served together by a stream. A stream is created at every cycle time, and is dedicated to serve a popular video. Each stream retrieves the entire video block by block from the disk and lasts for the duration of the video. Each video stream serves a group of users accumulated over one cycle time. For a popular movie, many video streams are created and this idea is called multi-streaming. These streams are offset by cycle time. Multi-streaming generates a predictable data retrieval pattern. This paper proposes an effective data placement scheme to exploit data retrieval pattern to place data as close as possible on a disk, thus minimizing disk overhead. When a large number of video streams are supported for a popular movie, cycle time becomes small. With small cycle time, VCR functions such as fast-forward can be easily supported by moving from the current stream and the next stream. This paper also introduces what factors of storage are critical for good performance of the multi-streaming scheme. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D.P. Anderson, Y. Osawa, and R. Govindan, </author> <title> A File System for Continuous Media. </title> <journal> ACM Transactions on Computer Systems, </journal> <month> Nov. </month> <year> 1992. </year>
Reference: [2] <author> F. Arman, R. Depommier, A. Hsu, and M. Chiu, </author> <title> Content-based Browsing of Video Sequences, </title> <booktitle> Proc. ACM Multimedia 1994 pp. </booktitle> <pages> 97-103. </pages>
Reference: [3] <author> A. Dan, D. Sitaram, and P. Shahabuddin, </author> <title> Scheduling Policies for an On-Demand Video Server with Batching, </title> <booktitle> Proc. ACM Multimedia 1994. </booktitle> <pages> pp. 15-23. </pages>
Reference-contexts: This clustering of requests occurs during a predetermined period. A stream fetches video frames that can be multicast to many users whose requests are clustered. As a result, the bottleneck on the number of users comes not from the disk but from the network. In <ref> [3] </ref>, a scheme which satisfies requests for a popular movie with regularly created, dedicated streams is mentioned. However [3] does not mention how this scheme can be implemented. This paper shows an effective way to implement this idea. <p> As a result, the bottleneck on the number of users comes not from the disk but from the network. In <ref> [3] </ref>, a scheme which satisfies requests for a popular movie with regularly created, dedicated streams is mentioned. However [3] does not mention how this scheme can be implemented. This paper shows an effective way to implement this idea. The overhead of a video server generally include seek and latency time for disks, and cpu time for processing and sending video frames to end users. <p> Since video requests can be highly skewed towards popular movies <ref> [3] </ref>[4], a video server needs to allocate resources to the popular movies with maximum utilization and minimum cost while serving large number of users. In [3], the idea of creating multiple streams to give an upper bound on delay time for initiating the video stream to the user has been mentioned.
Reference: [4] <author> Y. Doganat and A. Tantawi, </author> <title> Making a Cost-Effective Video Server, </title> <booktitle> IEEE Multimedia 1994. </booktitle> <pages> pp. 22-30. </pages>
Reference-contexts: A video server requires a lot of resources and has to support many users. A video server should guarantee continuous display of video without jitters by allocating enough network bandwidth, memory, and storage resources. A cost effective system <ref> [4] </ref> should allocate video data with minimum storage and processing costs. The ratio between cost and performance should be carefully balanced while designing a cost-effective video server. Since video requests can be highly skewed towards popular movies [3][4], a video server needs to allocate resources to the popular movies with maximum
Reference: [5] <author> D. </author> <title> Essex, Big, Fast IDE Drives, </title> <journal> BYTE Magazine Sept. </journal> <year> 1994, </year> <pages> pp. 151-156. </pages>
Reference-contexts: This method may use more disks to store many movies than the group allocation method. However it is easy to replace the movie with a new one when the demand for the stored movie falls. 4 Simulation The disk parameters used is IBM 0662 Model A10 <ref> [5] </ref>. Table 2 shows the disk parameters used in the simulation. We assume that the video file contains a fixed size video frames of 32KBytes with 30 frames per second playback rate. The movie length of 90 minutes and block size (X) of 16 frames are used in the simulation.
Reference: [6] <author> J. Hsieh, M. Lin, J. Liu, D. Du, T. Ruwart, </author> <title> Performance of A Mass Storage System for Video-On-Demand, </title> <institution> Technical Report of Computer Science Dept., University of Minne-sota, </institution> <year> 1994. </year> <note> To appear in IEEE INFOCOM 95, </note> <month> April </month> <year> 1995. </year>
Reference: [7] <author> J. Liu, D. Du, J. Schnepf, </author> <title> Supporting Random Access on the Retrieval of Digital Continuous Media, </title> <note> To appear in Journal of Computer communication: Special Issue on Multimedia storage and Databases, </note> <month> Feb. </month> <year> 1995. </year>
Reference: [8] <author> D. Jadav, C. Srinilta, and A. Choudhary, </author> <title> Techniques for Scheduling I/O in a High Performance Multimedia-on-Demand Server, </title> <institution> CASE Center Research Report No. 9503 at Syra-cuse University, </institution> <month> February </month> <year> 1995. </year>
Reference-contexts: Since requests for popular videos are delayed for a predetermined period of time, accumulated requests can be served by multicasting the same video frame to many users. As a result, a server can satisfy many requests for a popular video as if they are one. In <ref> [8] </ref>, a model for parallel retrieval of striped data from multiple disks is proposed for designing a high performance multimedia server. Data access patterns from users are exploited to cache portions of data in memory. <p> One notable difference is that the data retrieval pattern is system generated, whereas data access pattern in <ref> [8] </ref> is user generated. 3 Multi-streaming Scheme 3.1 General Description The best way to understand the multi-streaming scheme is through an example of a movie theater. A movie theater typically shows a popular movie every three hours using one screen.
Reference: [9] <author> P. Rangan, H. Vin, and S. Ramanathan, </author> <title> Designing an On-Demand Multimedia Service, </title> <journal> IEEE Communication Magazine, </journal> <volume> Vol. 30, </volume> <month> July </month> <year> 1992, </year> <pages> pp. 155-162. </pages>
Reference: [10] <author> C. Ruemmler and J. Wilkes, </author> <title> An Introduction to Disk Drive Modeling, </title> <journal> IEEE Computer Vol.27, </journal> <volume> No.3, </volume> <month> March </month> <year> 1994, </year> <pages> pp. 17-28. </pages>
Reference-contexts: video frame sec number of hot movies supported. movie cycle time of multi-stream scheduling sec number of buffers allocated for each stream. frame number of frames to be fetched as a block. frame number of all concurrent streams on a disk streams/disk disk seek time function to move x cylinders <ref> [10] </ref>, worst case sec size of a smallest cylinder bytes number of play back frames per second frames/sec time to transfer one block of X frames sec skew factor in latency maximum number of seeks in a subcycle T movie t wl R dt T display N hot C time K
Reference: [11] <author> Y. Tonomura and S. Abe, </author> <title> Content Oriented Visual Interface Using Video Icons for Visual Database Systems, </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> vol. 1, </volume> <year> 1990, </year> <pages> pp. 183-198 </pages>
Reference: [12] <institution> The MPEG standard, Frequently Asked Questions. </institution>
Reference-contexts: A user can browse through the sequence of video frames to choose a particular video frame. In order to support a cost-effective browsing, the entire movie is divided into small segments of time intervals. The first I-frames (MPEG-2) <ref> [12] </ref> of each segment are stored in a dedicated storage. Browsing these representative frames is similar to the rush browser in which frames of equally divided time intervals are displayed [2][11]. The resolution of these representative frames can be lowered as far as the quality would not drop significantly.
References-found: 12

