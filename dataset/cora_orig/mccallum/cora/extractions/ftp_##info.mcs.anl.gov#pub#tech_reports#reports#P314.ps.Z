URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/P314.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/abstracts/abstracts92.htm
Root-URL: http://www.mcs.anl.gov
Title: THE EFFICIENT PARALLEL ITERATIVE SOLUTION OF LARGE SPARSE LINEAR SYSTEMS  
Phone: 60439  
Author: Mark T. Jones and Paul E. Plassmann 
Keyword: Key words: graph coloring heuristics, iterative methods, parallel algorithms, preconditioned conjugate gradients, sparse matrices  
Note: AMS(MOS) subject classifications: 65F10, 65F50, 65Y05, 68R10  
Date: June 1992  
Address: 9700 South Cass Avenue Argonne, Illinois  Preprint MCS-P314-0692  
Affiliation: ARGONNE NATIONAL LABORATORY  Mathematics and Computer Science Division  
Abstract: The development of efficient, general-purpose software for the iterative solution of sparse linear systems on a parallel MIMD computer requires an interesting combination of expertise. Parallel graph heuristics, convergence analysis, and basic linear algebra implementation issues must all be considered. In this paper, we discuss how we have incorporated recent results in these areas into a general-purpose iterative solver. First, we consider two recently developed parallel graph coloring heuristics. We show how the method proposed by Luby, based on determining maximal independent sets, can be modified to run in an asynchronous manner and give an expected running time bound for this modified heuristic. In addition, a number of graph reduction heuristics are described that are used in our implementation to improve the individual processor performance. The effect of these various graph reductions on the solution of sparse triangular systems is categorized. Finally, we discuss the performance of this solver from the perspective of two large-scale applications: a piezoelectric crystal finite-element modeling problem, and a nonlinear optimization problem to determine the minimum energy configuration of a three-dimensional, layered superconductor model. fl This paper is based on a talk presented by the second author at the IMA Workshop on Sparse Matrix Computations: Graph Theory Issues and Algorithms, October 14-18, 1991. This work was supported by the Applied Mathematical Sciences subprogram of the Office of Energy Research, U.S. Department of Energy, under Contract W-31-109-Eng-38. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F. L. Alvarado, A. Pothen, and R. Schreiber, </author> <title> Highly parallel sparse triangular solution, </title> <type> Tech. Rep. </type> <institution> CS-92-09, The Pennsylvania State University, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: An implementation based on this approach and computational results are given in [10]. Partitioned inverse One can determine a product decomposition of L; for example, L = i=1 where the nonzero structure, S, of the product elements satisfy S (L i ) = S (L 1 i ) <ref> [1, 2] </ref>. The inversion of L can be performed with matrix products once the partitioned inverse is formed. We note that this can always done with a pointwise coloring, where is the number of colors used.
Reference: [2] <author> F. L. Alvarado and R. Schreiber, </author> <title> Optimal parallel solution of sparse triangular systems, </title> <journal> SIAM Journal on Scientific and Statistical Computing, </journal> <note> (to appear). </note>
Reference-contexts: An implementation based on this approach and computational results are given in [10]. Partitioned inverse One can determine a product decomposition of L; for example, L = i=1 where the nonzero structure, S, of the product elements satisfy S (L i ) = S (L 1 i ) <ref> [1, 2] </ref>. The inversion of L can be performed with matrix products once the partitioned inverse is formed. We note that this can always done with a pointwise coloring, where is the number of colors used.
Reference: [3] <author> D. Br elaz, </author> <title> New methods to color the vertices of a graph, </title> <journal> Comm. ACM, </journal> <volume> 22 (1979), </volume> <pages> pp. 251-256. </pages>
Reference-contexts: These sequential heuristics are based a greedy heuristic that colors vertices in an order determined by a cost function. Choices for the cost function that are particularly effective are the saturation degree order (choose the most constrained vertex <ref> [3] </ref>) or the incidence degree order (choose the vertex adjacent to the maximum number of previously colored vertices [4]). Unfortunately, these heuristics do not parallelize well, because they essentially represent a breadth-first search of the graph. A different approach was suggested by Luby [14].
Reference: [4] <author> T. F. Coleman and J. J. Mor e, </author> <title> Estimation of sparse Jacobian matrices and graph coloring problems, </title> <journal> SIAM Journal on Numerical Analysis, </journal> <volume> 20 (1983), </volume> <pages> pp. 187-209. </pages>
Reference-contexts: For graphs arising from a number of applications, it has been demonstrated that these heuristics are often able to find colorings that are within one or two of an optimal coloring <ref> [4, 10] </ref>. These sequential heuristics are based a greedy heuristic that colors vertices in an order determined by a cost function. <p> Choices for the cost function that are particularly effective are the saturation degree order (choose the most constrained vertex [3]) or the incidence degree order (choose the vertex adjacent to the maximum number of previously colored vertices <ref> [4] </ref>). Unfortunately, these heuristics do not parallelize well, because they essentially represent a breadth-first search of the graph. A different approach was suggested by Luby [14].
Reference: [5] <author> M. R. Garey and D. S. Johnson, </author> <title> Computers and Intractability, </title> <editor> W. H. </editor> <publisher> Freeman, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: We denote the minimum possible value for s, the chromatic number of G, by O (G). The question as to whether a general graph G is s-colorable is NP-complete <ref> [5] </ref>. It is known that unless P = N P , there does not exist a polynomial approximation scheme for solving the graph coloring problem [5]. <p> The question as to whether a general graph G is s-colorable is NP-complete <ref> [5] </ref>. It is known that unless P = N P , there does not exist a polynomial approximation scheme for solving the graph coloring problem [5]. In fact, the best polynomial time heuristic known [8] can theoretically guarantee a coloring of only size c (n= log n) O (G), where c is some constant.
Reference: [6] <author> J. L. Gustafson, G. R. Montry, and R. E. Benner, </author> <title> Development of parallel methods for a 1024-processor hypercube, </title> <journal> SIAM Journal on Scientific and Statistical Computing, </journal> <volume> 9 (1988), </volume> <pages> pp. 609-638. </pages>
Reference-contexts: Consider an implementation of any of the standard general-purpose iterative methods [7, 15]: consistently ordered SOR, SSOR accelerated by conjugate gradients (CG), or CG preconditioned with an incomplete matrix factorization. It is evident that the major obstacle to a scalable implementation <ref> [6] </ref> is the inversion of sparse triangular systems with a structure based on the structure of the linear system. For example, the parallelism inherent in computing and applying an incomplete Cholesky preconditioner is limited by the solution of the triangular systems generated by the incomplete Cholesky factors [20].
Reference: [7] <author> L. A. Hageman and D. M. Young, </author> <title> Applied Iterative Methods, </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1981. </year>
Reference-contexts: In this paper we present several possible graph reductions that can be employed to greatly improve the performance of an implementation on high-performance RISC processors. Consider an implementation of any of the standard general-purpose iterative methods <ref> [7, 15] </ref>: consistently ordered SOR, SSOR accelerated by conjugate gradients (CG), or CG preconditioned with an incomplete matrix factorization. It is evident that the major obstacle to a scalable implementation [6] is the inversion of sparse triangular systems with a structure based on the structure of the linear system.
Reference: [8] <author> D. S. Johnson, </author> <title> Worst case behavior of graph coloring algorithms, </title> <booktitle> in Proceedings 5th Southeastern Conference on Combinatorics, Graph Theory, and Computing, </booktitle> <publisher> Utilitas Mathematica Publishing, </publisher> <address> Winnipeg, </address> <year> 1974, </year> <pages> pp. 513-527. </pages>
Reference-contexts: The question as to whether a general graph G is s-colorable is NP-complete [5]. It is known that unless P = N P , there does not exist a polynomial approximation scheme for solving the graph coloring problem [5]. In fact, the best polynomial time heuristic known <ref> [8] </ref> can theoretically guarantee a coloring of only size c (n= log n) O (G), where c is some constant. Given these pessimistic theoretical results, it is quite surprising that, for certain classes of graphs, there exist a number of sequential graph coloring heuristics that are very effective in practice.
Reference: [9] <author> M. T. Jones and M. L. Patrick, </author> <title> The Lanczos algorithm for the generalized symmetric eigenproblem on shared-memory architectures, </title> <type> Preprint MCS-P182-1090, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, Argonne, Ill., </institution> <year> 1990. </year>
Reference-contexts: We use a shifted, inverted variant of the Lanczos algorithm to solve this eigenproblem [16]. This method has been shown to be very efficient for the parallel solution of the vibration problem <ref> [9] </ref>. Again, the major computational task is the solution of large sparse systems of linear equations. The three-dimensional finite element grid needed to model the crystals is much more refined in the length and width directions than it is in the thickness direction.
Reference: [10] <author> M. T. Jones and P. E. Plassmann, </author> <title> Scalable iterative solution of sparse linear systems, </title> <type> Preprint MCS-P277-1191, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, Argonne, Ill., </institution> <year> 1991. </year> <title> [11] , The effect of many-color orderings on the convergence of iterative methods, </title> <type> Preprint MCS-P292-0292, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, Argonne, Ill., </institution> <year> 1992. </year> <title> [12] , Solution of large, sparse systems of linear equations in massively parallel applications, </title> <type> Preprint MCS-P313-0692, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, Argonne, Ill., </institution> <year> 1992. </year> <title> [13] , A parallel graph coloring heuristic, </title> <journal> SIAM Journal on Scientific and Statistical Computing, </journal> <note> (to appear). </note>
Reference-contexts: To determine this ordering, we use a recently developed parallel heuristic. However, if many colors are used, a straightforward parallel implementation, as is described in <ref> [10] </ref>, suffers poor processor performance on a high-performance processor such as the Intel i860. In this paper we present several possible graph reductions that can be employed to greatly improve the performance of an implementation on high-performance RISC processors. <p> For graphs arising from a number of applications, it has been demonstrated that these heuristics are often able to find colorings that are within one or two of an optimal coloring <ref> [4, 10] </ref>. These sequential heuristics are based a greedy heuristic that colors vertices in an order determined by a cost function. <p> An implementation based on this approach and computational results are given in <ref> [10] </ref>. Partitioned inverse One can determine a product decomposition of L; for example, L = i=1 where the nonzero structure, S, of the product elements satisfy S (L i ) = S (L 1 i ) [1, 2].
Reference: [14] <author> M. Luby, </author> <title> A simple parallel algorithm for the maximal independent set problem, </title> <journal> SIAM Journal on Computing, </journal> <volume> 4 (1986), </volume> <pages> pp. 1036-1053. </pages>
Reference-contexts: For general graphs, the computation of the chromatic number is an NP-hard problem. However, recent theoretical and experimental work has demonstrated scalable heuristics for determining coloring that are close to optimal for practical problems <ref> [14, 13] </ref>. In x2 we review these heuristics and demonstrate that they have equivalent expected running times for bounded degree graphs. We note that this bound on the number of communication steps assumes that only vector operations are performed during the triangular systems solves. <p> We review two parallel heuristics based on Monte Carlo steps for which expected running times are known: a synchronous PRAM heuristic developed by Luby <ref> [14] </ref>, and a recent asynchronous heuristic presented by Jones and Plassmann [13]. The interesting aspect of the asynchronous method is that it combines aspects of sequential greedy graph coloring heuristics with a Monte Carlo step to determine independent sets. <p> Unfortunately, these heuristics do not parallelize well, because they essentially represent a breadth-first search of the graph. A different approach was suggested by Luby <ref> [14] </ref>. His observation was that if one can determine a maximal independent set efficiently in parallel, then a partition of the vertices of the graph into maximal independent sets yields a coloring. Luby's algorithm for determining an independent set, I, is based on the following Monte Carlo rule. <p> For each vertex v 2 V 0 determine a distinct, random number ae (v). 2. v 2 I , ae (v) &gt; ae (w); 8 w 2 adj (v). In the Monte Carlo algorithm described by Luby <ref> [14] </ref>, this initial independent set is augmented to obtain a maximal independent set. The approach is the following. After the initial independent set is found, the set of vertices adjacent to a vertex in I, the neighbor set N (I), is determined.
Reference: [15] <author> T. A. Manteuffel, </author> <title> An incomplete factorization technique for positive definite linear systems, </title> <journal> Mathematics of Computation, </journal> <volume> 34 (1980), </volume> <pages> pp. 473-497. </pages>
Reference-contexts: In this paper we present several possible graph reductions that can be employed to greatly improve the performance of an implementation on high-performance RISC processors. Consider an implementation of any of the standard general-purpose iterative methods <ref> [7, 15] </ref>: consistently ordered SOR, SSOR accelerated by conjugate gradients (CG), or CG preconditioned with an incomplete matrix factorization. It is evident that the major obstacle to a scalable implementation [6] is the inversion of sparse triangular systems with a structure based on the structure of the linear system. <p> If the incomplete factorization fails (a negative diagonal element created during the factorization), a small multiple of the identity is added to diagonal, and the factorization is restarted. This process is repeated until a successful factorization is obtained <ref> [15] </ref>. The average number of conjugate gradient iterations required to solve one nonlinear iteration of the thermal equilibrium problem for the crystal model to a relative accuracy of 10 7 is approximately 700.
Reference: [16] <author> B. Nour-Omid, B. N. Parlett, T. Ericsson, and P. S. Jensen, </author> <title> How to implement the spectral transformation, </title> <journal> Mathematics of Computation, </journal> <volume> 48 (1987), </volume> <pages> pp. 663-673. </pages>
Reference-contexts: We use a shifted, inverted variant of the Lanczos algorithm to solve this eigenproblem <ref> [16] </ref>. This method has been shown to be very efficient for the parallel solution of the vibration problem [9]. Again, the major computational task is the solution of large sparse systems of linear equations.
Reference: [17] <author> A. Pothen, H. Simon, and K.-P. Liou, </author> <title> Partitioning sparse matrices with eigenvectors of graphs, </title> <journal> SIAM Journal on Matrix Analysis, </journal> <volume> 11 (1990), </volume> <pages> pp. 430-452. </pages>
Reference-contexts: When the determination of a partition is not straightforward, a partitioning heuristic would have to be used. Some possibilities exist; for example, recent advances in the automatic partitioning of three-dimensional domains [21] or in spectral dissection methods <ref> [17] </ref> could be employed. However, 2 the parallel graph partitioning problem deserves much additional research. First, we briefly review the graph coloring problem. Let G = (V; E) be a symmetric graph with vertex set V , with jV j = n, and edge set E.
Reference: [18] <author> R. Schreiber. </author> <title> Private communication, </title> <year> 1991. </year>
Reference-contexts: The inversion of L can be performed with matrix products once the partitioned inverse is formed. We note that this can always done with a pointwise coloring, where is the number of colors used. It has been observed by Robert Schreiber <ref> [18] </ref> that the partitioned inverse approach can reduce the steps in pointwise coloring approach by a factor of two. Suppose two colors are used. We write the pointwise system as L = D 1;1 0 # where D 1;1 and D 2;2 are diagonal.
Reference: [19] <author> R. Schreiber and W.-P. Tang, </author> <title> Vectorizing the conjugate gradient method. </title> <type> Unpublished manuscript, </type> <institution> Department of Computer Science, Stanford University, </institution> <year> 1982. </year>
Reference-contexts: For example, the parallelism inherent in computing and applying an incomplete Cholesky preconditioner is limited by the solution of the triangular systems generated by the incomplete Cholesky factors [20]. It was noted by Schreiber and Tang <ref> [19] </ref> that if the nonzero structure of the triangular factors is identical to that of the original matrix, the minimum number of major parallel steps possible in the solution of the triangular system is given by the chromatic number of the symmetric adjacency graph representing those nonzeros. <p> First, we note that the adjacency structure of the vertices at the same geometric node (i.e., the nonzero structure of the associated variables) are identical, and we call such vertices identical vertices. It was noted by Schreiber and Tang <ref> [19] </ref> that a coloring of the graph corresponding to the geometric nodes results in a system with small dense blocks, of order the number of degrees of freedom per node, along the diagonal.
Reference: [20] <author> H. A. van der Vorst, </author> <title> High performance preconditioning, </title> <journal> SIAM Journal on Scientific and Statistical Computing, </journal> <volume> 10 (1989), </volume> <pages> pp. 1174-1185. </pages>
Reference-contexts: For example, the parallelism inherent in computing and applying an incomplete Cholesky preconditioner is limited by the solution of the triangular systems generated by the incomplete Cholesky factors <ref> [20] </ref>.
Reference: [21] <author> S. Vavasis, </author> <title> Automatic domain partitioning in three dimensions, </title> <journal> SIAM Journal on Scientific and Statistical Computing, </journal> <volume> 12 (1991), </volume> <pages> pp. 950-970. 16 </pages>
Reference-contexts: When the determination of a partition is not straightforward, a partitioning heuristic would have to be used. Some possibilities exist; for example, recent advances in the automatic partitioning of three-dimensional domains <ref> [21] </ref> or in spectral dissection methods [17] could be employed. However, 2 the parallel graph partitioning problem deserves much additional research. First, we briefly review the graph coloring problem.
References-found: 18

