URL: http://www.cs.purdue.edu/homes/spa/papers/bdst.ps
Refering-URL: http://www.cs.purdue.edu/homes/spa/publications.html
Root-URL: http://www.cs.purdue.edu
Email: louchard@ulb.ac.be spa@cs.purdue.edu jtang@amc.com  
Title: AVERAGE PROFILE OF THE GENERALIZED DIGITAL SEARCH TREE AND THE GENERALIZED LEMPEL-ZIV ALGORITHM  
Author: Guy Louchard Wojciech Szpankowski Jing Tang 
Keyword: Index Terms: Generalized Lempel-Ziv parsing scheme, generalized digital search trees, average redundancy, partial differential functional equations, singularity analysis, asymptotic expansions, depoissonization, Mellin transform.  
Note: This research was partially supported by NSF Grants NCR-9206315 and NATO Collaborative Grant CRG.950060. This author was additionally supported by NSF Grants NCR-9415491 and CCR-9201078.  
Address: 5020 NE 148th Ave. B-1050 Brussels W. Lafayette, IN 47907 Redmond, WA 98052 Belgium U.S.A. U.S.A.  
Affiliation: Dept. d'Informatique Dept. of Computer Science Applied Microsystems Co. Universite Libre de Bruxelles Purdue University  
Date: January 21, 1997  
Abstract: The goal of this research is threefold: (i) to analyze generalized digital search trees, (ii) to derive the average profile (i.e., phrase length) of a generalization of the well known parsing algorithm due to Lempel and Ziv, and (iii) to provide analytical tools to analyze asymptotically certain partial differential functional equations often arising in the analysis of digital trees. In the generalized Lempel-Ziv parsing scheme, one partitions a sequence of symbols from a finite alphabet into phrases such that the new phrase is the shortest substring seen in the past by at most b 1 phrases (b = 1 corresponds to the original Lempel-Ziv scheme). Such a scheme can be analyzed through a generalized digital search tree in which every node is capable of storing up to b strings. In this paper, we investigate the depth of a randomly selected node in such a tree and the length of a randomly selected phrase in the generalized Lempel-Ziv scheme. These findings and some recent results allow us to compute the average redundancy of the generalized Lempel-Ziv code and compare it to the ordinary Lempel-Ziv code leading to an optimal value of b. Analytical techniques of (precise) analysis of algorithms are used to establish most of these conclusions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Aldous and P. Shields, </author> <title> A Diffusion Limit for a Class of Random-Growing Binary Trees, </title> <journal> Probab. Th. Rel. Fields, </journal> <volume> 79, </volume> <month> 509-542 </month> <year> (1988). </year> <month> 34 </month>
Reference-contexts: The details of such a construction can be found in [8, 20, 27]. Now, we briefly discuss the Lempel-Ziv model. We recall that now we deal with a single sequence of fixed length n which is partitioned according to the Lempel-Ziv algorithm. As already discussed in <ref> [1, 24, 15] </ref>, digital trees can be also used to construct the Lempel-Ziv parsing. Indeed, let us first append the string with b empty phrases that are stored in the root of the associated b-digital search tree. <p> For the original Lempel-Ziv parsing algorithm (b = 1) mostly only first-order asymptotics (e.g., leading terms in almost sure convergence) have been analyzed, with an exception of the work by Aldous and Shields <ref> [1] </ref>, and recent works of Louchard and Szpankowski [24], and Jacquet and Szpankowski [14] (see also [28, 37]). Finally, Gilbert and Kadota [11] analyzed numerically the number of possible messages composed of m parsed phrases, as well as the length of a phrase in the digital tree model.
Reference: [2] <author> P. Billingsley, </author> <title> Convergence of Probability Measures, </title> <publisher> John Wiley & Sons, </publisher> <address> New York (1968). </address>
Reference-contexts: i=1 D m (i) (digital tree model) takes place: M n = maxfm : L m = m X D m (i) ng which immediately implies PrfM n &gt; mg = PrfL m ng : (20) The above relationship is known as the renewal equation, and from Theorem 17.3 of <ref> [2] </ref> we conclude the central limit theorem for M n knowing it holds for L m . The latter is easier to handle but far from trivial, and the reader is referred to [14] for details.
Reference: [3] <author> T.M. Cover and J.A. Thomas, </author> <title> Elements of Information Theory, </title> <publisher> John Wiley&Sons, </publisher> <address> New York (1991). </address>
Reference-contexts: Such a new phrase is coded by giving the location of the prefix (that occurred before as a phrase) and the value of the last symbol, that is, the Lempel-Ziv code consists of pairs (pointer; symbol) (details can be found in any text book; e.g., <ref> [3, 34] </ref>). For example, the sequence ababbababaaaaaaaaac is parsed into (a)(b)(ab)(ba)(bab)(aa)(aaa)(aaaa)(c) and its code becomes: 0a0b1b2a4b1a6a7a0c (e.g., the pair 6a indicates that this phrase consists of the sixth phrase as a prefix that occurred before appended by a). Observe that there is no need for a separator between phrases.
Reference: [4] <author> B. Davies, </author> <title> Integral Transforms and Their Applications, </title> <publisher> Springer-Verlag, </publisher> <address> New York (1985). </address>
Reference: [5] <author> G. Doetsch, </author> <title> Handbuch der Laplace Transformation, </title> <publisher> Verlag Birkhauser, </publisher> <address> Basel (1950). </address>
Reference-contexts: It is known (cf. <ref> [5, 16] </ref>) that as long as arg (z) belongs to some cone around the real axis, the Mellin transform F (s) of a function f (x) of a real argument and its corresponding function of a complex argument is the same.
Reference: [6] <author> P. Flajolet and R. Sedgewick, </author> <title> Digital Search Trees Revisited, </title> <journal> SIAM J. Computing, </journal> <volume> 15, </volume> <month> 748-767 </month> <year> (1986). </year>
Reference-contexts: Let us have a closer look at the digital tree model (cf. [24] for a more detailed description). To justify its name we shall show how the Lempel-Ziv parsing (of m strings) can be constructed by building an associated digital search tree (cf. <ref> [6, 20, 27] </ref>). In this case, we consider an extension of digital search trees called b-digital search tree, or (for short) b-DST (cf. [8, 27]) which is built from a fixed number, say m, of strings. <p> If p = q = 0:5, the Bernoulli model is called symmetric, otherwise it is asymmetric. Actually, digital trees appear in a variety of computer and communications applications including searching, sorting, dynamic hashing, codes, conflict resolution protocols for multi-access communications, and data compression (cf. <ref> [6, 8, 20, 27, 24, 25, 15, 37] </ref>). Thus, better understanding of their behavior is desirable and could lead to some algorithmic improvements. <p> We should mention that similar numerical problems can be encountered in other analyses (cf. [18]). Digital search trees for b = 1 have been analyzed in the past in the case of a fixed number of independent strings (cf. <ref> [6, 14, 19, 20, 21, 22, 29, 30, 31, 36, 37] </ref>). Much less is known about b-digital search trees. As mentioned above, the first non-trivial analysis of the size of such trees for the symmetric Bernoulli model was proposed by Flajolet and Richmond [8]. <p> 1) + O (s + 1), hence the Laurent expansion of X (s) at s = 1 is 1 1 2h 2 h 1 fl 1 s + 1 20 In order to derive the asymptotic expansion of e X (z) for large z we use well-known argu- ments (cf. <ref> [6, 9, 14, 24, 27] </ref>) of the inverse Mellin transform, that is, e X (z) = 2i 2 +i1 2 i1 (The evaluation of this integral is quite standard (e.g., see [27]): we extend the line of integration to a big rectangle right to the integration line, and observe that bottom
Reference: [7] <author> P. Flajolet and A. Odlyzko, </author> <title> Singularity Analysis of Generating Functions, </title> <journal> SIAM J. Disc. Methods, </journal> <volume> 3, </volume> <month> 216-240 </month> <year> (1990). </year>
Reference-contexts: To take the full advantage of this new model, however, we shall postulate that z is a complex variable. After "depoissonization" (cf. Section 3.2) we expect that B m (u) ~ e B (u; m). In the next section, we use the Mellin transform [9], singularity analysis <ref> [7] </ref>, and the depoissonization lemma [16, 32] to solve the above equation, and to prove the following main result. Below, we write log for natural logarithm. <p> Finally, applying the singularity analysis of Flajolet and Odlyzko <ref> [7] </ref>, after somewhat tedious algebra we prove formula (15) of Theorem 2 (i). 4.2 Exact and Limiting Distribution We need another approach to establish exact and asymptotic distributions in the symmetric case since as shown above Var D m = O (1).
Reference: [8] <author> P. Flajolet and B. Richmond, </author> <title> Generalized Digital Trees and Their Difference-Differential Equations, Random Structures & Algorithms, </title> <type> 3, </type> <month> 305-320 </month> <year> (1992). </year>
Reference-contexts: To justify its name we shall show how the Lempel-Ziv parsing (of m strings) can be constructed by building an associated digital search tree (cf. [6, 20, 27]). In this case, we consider an extension of digital search trees called b-digital search tree, or (for short) b-DST (cf. <ref> [8, 27] </ref>) which is built from a fixed number, say m, of strings. Hereafter, we consider only the binary alphabet = f0; 1g, but an extension to any finite alphabet is straightforward. <p> The details of such a construction can be found in <ref> [8, 20, 27] </ref>. Now, we briefly discuss the Lempel-Ziv model. We recall that now we deal with a single sequence of fixed length n which is partitioned according to the Lempel-Ziv algorithm. As already discussed in [1, 24, 15], digital trees can be also used to construct the Lempel-Ziv parsing. <p> If p = q = 0:5, the Bernoulli model is called symmetric, otherwise it is asymmetric. Actually, digital trees appear in a variety of computer and communications applications including searching, sorting, dynamic hashing, codes, conflict resolution protocols for multi-access communications, and data compression (cf. <ref> [6, 8, 20, 27, 24, 25, 15, 37] </ref>). Thus, better understanding of their behavior is desirable and could lead to some algorithmic improvements. <p> We believe our contribution is also of a methodological nature: We establish our results in a consistent manner by a technique that belongs to the toolkit of the analytical analysis of algorithms. More precisely, it was already observed by Flajolet and Richmond <ref> [8] </ref> that b-digital trees are harder to analyze than ordinary (b = 1) digital search trees. The difficulty boils down ultimately to a solution of the following general recurrence in x n : Let x 1 ; : : : ; x b be given. <p> The above recurrence can be solved exactly for b = 1 (cf. e.g., [36]), but attempts at extensions to b &gt; 1 have partially failed. Flajolet and Richmond <ref> [8] </ref> (cf. also [12]) used a new technique to solve this recurrence for p = 1=2 (i.e., symmetric Bernoulli model). Unfortunately, this technique seems to be restricted to the symmetric Bernoulli model since some sums involved in the asymmetric Bernoulli model (i.e., p 6= 1=2) cease to be harmonic sums. <p> Much less is known about b-digital search trees. As mentioned above, the first non-trivial analysis of the size of such trees for the symmetric Bernoulli model was proposed by Flajolet and Richmond <ref> [8] </ref>. The variance of the size and the internal path length | still for the symmetric model | was discussed by Hubalek [12]. To the best of our knowledge, b-DST have not yet been analyzed for the asymmetric Bernoulli model. In a companion paper, one of us (cf. <p> In [23] Louchard also evaluates the average number of nodes in a b-digital search tree, thus directly extending the Flajolet and Richmond result <ref> [8] </ref> to the asymmetric Bernoulli model. <p> Unfortunately, for b &gt; 1 the recurrence becomes too complicated and no exact solution 7 is known. This was already noted by Flajolet and Richmond <ref> [8] </ref> who developed a special technique to deal with such recurrences for b &gt; 1. Unfortunately again, the technique of [8] was designed for the symmetric Bernoulli model, and becomes very intricate for the asymmetric Bernoulli models (due to the fact that some sums occurring in the solution of (4) cease <p> Unfortunately, for b &gt; 1 the recurrence becomes too complicated and no exact solution 7 is known. This was already noted by Flajolet and Richmond <ref> [8] </ref> who developed a special technique to deal with such recurrences for b &gt; 1. Unfortunately again, the technique of [8] was designed for the symmetric Bernoulli model, and becomes very intricate for the asymmetric Bernoulli models (due to the fact that some sums occurring in the solution of (4) cease to become harmonic sums in the asymmetric case). <p> We use the Flajolet and Richmond <ref> [8] </ref> technique to establish an asymptotic distribution in this case (cf. Section 4.1). Using a probabilistic approach we also establish the exact distribution of D m (cf. Section 4.2). Both results are summarized in Theorem 2 below. Before we present our findings, we must introduce some additional notation. <p> More precisely, if S m is the size of a b-DST built from m strings, then M 0 n = S M n 1 (since we count only non-root nodes). But, according to Flajolet 14 and Richmond <ref> [8] </ref> (symmetric case), and Louchard [23] (asymmetric case): ES m = m (q 0 (b) + ffi 2 (m; b)) + O (1) where q 0 (b) is a constant that can be computed explicitly. For example, Flajolet and Rich mond [8] proved that q 0 (b) = log 2 0 <p> But, according to Flajolet 14 and Richmond <ref> [8] </ref> (symmetric case), and Louchard [23] (asymmetric case): ES m = m (q 0 (b) + ffi 2 (m; b)) + O (1) where q 0 (b) is a constant that can be computed explicitly. For example, Flajolet and Rich mond [8] proved that q 0 (b) = log 2 0 1 + t b dt where, as in (12), Q (t) = Q 1 j=0 (1 + t2 j ). In particular, q 0 (1) = 1, and the authors of [8] computed q 0 (2) = 0:5747, q 0 (3) <p> For example, Flajolet and Rich mond <ref> [8] </ref> proved that q 0 (b) = log 2 0 1 + t b dt where, as in (12), Q (t) = Q 1 j=0 (1 + t2 j ). In particular, q 0 (1) = 1, and the authors of [8] computed q 0 (2) = 0:5747, q 0 (3) = 0:4069, and so on. For large b one derives that q 0 (b) ~ 1=(b log 2). In summary, EM 0 n ~ x n (q 0 (b) + ffi 2 (n; b)). <p> Then fl (n) = k=0 n ! Proof: Let a sequence fg n g 1 n=0 be such that e F (z) = P 1 z n n! , that is (cf. <ref> [8] </ref>), g n = k=0 n ! Define now, for some fixed N 2, the function e F N (z) = P N1 z n n! . <p> But, in the symmetric case h 2 = h 2 1 = log 2, and therefore from (8) we deduce that Var D m = O (1). Our goal is to compute it precisely. In this case, an extension of a Flajolet and Richmond technique <ref> [8] </ref> works fine, and we apply it in this subsection. We follow Hubalek [12] to derive our results. We omit most detailed calculations, and the reader is referred to [8, 12]. <p> Our goal is to compute it precisely. In this case, an extension of a Flajolet and Richmond technique [8] works fine, and we apply it in this subsection. We follow Hubalek [12] to derive our results. We omit most detailed calculations, and the reader is referred to <ref> [8, 12] </ref>. First of all, we observe that our differential functional equation (6) becomes in this case @ b The coefficients of e B (u; z) can be computed by solving a linear recurrence of type (1). <p> Un fortunately, there is no easy way to solve such a recurrence unless b = 1 (cf. [20, 36]). To circumvent this difficulty, Flajolet and Richmond <ref> [8] </ref> reduced it to a certain functional equation on an ordinary generating function that is easier to solve. We proceed along this path. 29 Let e B (u; z) = k=0 g k (u) z k P 1 k=0 g k (u)z k . <p> We also define an ordinary gen erating function of B k (u) as F (u; z) = P 1 k=0 B k (u)z k . Observe that B n (u) = P n n hence as in <ref> [8] </ref> we obtain F (u; z) = 1 z z Indeed, 1 G u; 1 z = m=0 (1 z) m+1 = m=0 1 X j z j 1 X z n k=0 n ! Certainly, (59) further implies that F (n) 1 G (n) z where f (k) u (z; <p> From (61) and (62) we immediately obtain L 1 (z)(1 + z) b = z b+1 + 2z b L 1 ( 2 L 2 (z)(1 + z) b = 4z b L 1 ( 2 z ): Iterating these equations we easily find (cf. <ref> [8, 12] </ref>) L 1 (z) = k=0 2 ) b ) (2 ( z 2 ) (1 + z b 2 k+1 ; (63) 1 X (2z b )(2 ( z 2 k ) b ) (1 + z)(1 + z 2 k ) z The next step is to transform
Reference: [9] <author> P. Flajolet, X. Gourdon, P. Dumas, </author> <title> Mellin Transforms and Asymptotics: Harmonic Sums, </title> <journal> Theoretical Computer Science, </journal> <volume> 144, </volume> <pages> 3-58, </pages> <year> (1995). </year>
Reference-contexts: To take the full advantage of this new model, however, we shall postulate that z is a complex variable. After "depoissonization" (cf. Section 3.2) we expect that B m (u) ~ e B (u; m). In the next section, we use the Mellin transform <ref> [9] </ref>, singularity analysis [7], and the depoissonization lemma [16, 32] to solve the above equation, and to prove the following main result. Below, we write log for natural logarithm. <p> 2 (N; N + 1) we have F (s) = M [ e F (z) e F N (z); s]: (The above is true since a polynomial in z such as e F N (z) can only shift the fundamental strip of the Mellin transform but cannot change its value; <ref> [9] </ref>.) As s ! N , due to the assumed factorization F (s) = (s)fl (s), we have F (s) = s + N N ! thus, by the inverse Mellin transform, we have e F (z) e F N (z) = N ! But 1 X g n n! z <p> 1) + O (s + 1), hence the Laurent expansion of X (s) at s = 1 is 1 1 2h 2 h 1 fl 1 s + 1 20 In order to derive the asymptotic expansion of e X (z) for large z we use well-known argu- ments (cf. <ref> [6, 9, 14, 24, 27] </ref>) of the inverse Mellin transform, that is, e X (z) = 2i 2 +i1 2 i1 (The evaluation of this integral is quite standard (e.g., see [27]): we extend the line of integration to a big rectangle right to the integration line, and observe that bottom <p> ) (2 ( z 2 ) (1 + z b 2 k+1 ; (63) 1 X (2z b )(2 ( z 2 k ) b ) (1 + z)(1 + z 2 k ) z The next step is to transform the above sums (63)-(64) into certain harmonic sums (cf. <ref> [9] </ref>). For this, we set z = 1=t and define Q (t) = Q 1 2 k ). <p> t b = 2 k=0 2 k+1 t ) Q ( 2 k+1 t b : (66) Both sums are of the form P k0 k f ( k x) for some function f () and sequences k ; k , that is, they are the so-called harmonic sums (cf. <ref> [9] </ref>). It is well known that the Mellin transform of such a sum is F (s) P k (cf. [9]). <p> are of the form P k0 k f ( k x) for some function f () and sequences k ; k , that is, they are the so-called harmonic sums (cf. <ref> [9] </ref>). It is well known that the Mellin transform of such a sum is F (s) P k (cf. [9]). <p> tL 1 ( 1 Q b ( t ; s = 1 2 s I (s) ; " t ) 2 ) # 2 1s where I (s) = 0 Q b (t) J (s) ; (67) 1 Z (t) s1 dt (68) with H being the Hankel contour (cf. <ref> [9, 12] </ref>). The rest is easy. Applying standard arguments of the inverse Mellin transform we can derive asymptotic expansions of L 1 ( 1 t ) and L 2 ( 1 t ) as t ! 0.
Reference: [10] <author> P. Flamant, </author> <title> Sur une Equation Differentielle Fonctionelle Lineaire, </title> <institution> Rendiconti del Circolo Math-ematico di Palermo, XLVIII, </institution> <month> 135|208 </month> <year> (1924). </year>
Reference-contexts: In order to accomplish this, we use some other techniques such as analytical poissonization and depoissonization, singularity analysis, and Mellin transforms. 5 In passing, we should mention that differential functional equations such as (2) were discussed already in 1924 by Flamant <ref> [10] </ref> who provided an iterative solution. Our approach is completely different, and we present an asymptotic solution as z ! 1 (which suffices to obtain an asymptotic solution of the original recurrence).
Reference: [11] <author> E. Gilbert and T. Kadota, </author> <title> The Lempel-Ziv Algorithm and Message Complexity, </title> <journal> IEEE Trans. Information Theory, </journal> <volume> 38, </volume> <month> 1839-1842 </month> <year> (1992). </year>
Reference-contexts: Finally, Gilbert and Kadota <ref> [11] </ref> analyzed numerically the number of possible messages composed of m parsed phrases, as well as the length of a phrase in the digital tree model.
Reference: [12] <author> F. Hubalek, </author> <title> Beitrage zur Analyse Verallgemeinerter Digitaler Suchbaume, </title> <publisher> Ph. </publisher> <address> D. </address> <institution> Technische Universitat Wien (1994). </institution>
Reference-contexts: The above recurrence can be solved exactly for b = 1 (cf. e.g., [36]), but attempts at extensions to b &gt; 1 have partially failed. Flajolet and Richmond [8] (cf. also <ref> [12] </ref>) used a new technique to solve this recurrence for p = 1=2 (i.e., symmetric Bernoulli model). Unfortunately, this technique seems to be restricted to the symmetric Bernoulli model since some sums involved in the asymmetric Bernoulli model (i.e., p 6= 1=2) cease to be harmonic sums. <p> As mentioned above, the first non-trivial analysis of the size of such trees for the symmetric Bernoulli model was proposed by Flajolet and Richmond [8]. The variance of the size and the internal path length | still for the symmetric model | was discussed by Hubalek <ref> [12] </ref>. To the best of our knowledge, b-DST have not yet been analyzed for the asymmetric Bernoulli model. In a companion paper, one of us (cf. <p> More precisely: as in Hubalek <ref> [12] </ref> with k = 2ki=L for k = 1; 2; : : : [ffi 2 1 X I ( k )I ( k ) ; where () is Euler's Gamma function, and I ( k ) = k Z 1 Z 1 Q b (t)t k dt ; where I (s) <p> An intuitive explanation for different behavior in the symmetric case is given in [24], but this follows basically from the fact that Var D m = O (1). We should also point out that numerical values of J 0 (0) and J 00 (0) can be found in Hubalek <ref> [12] </ref>. 2.2 Lempel-Ziv Model The situation is similar, but not the same, in the Lempel-Ziv model in which a sequence of fixed length n is parsed into random number of phrases. Let M n denote the number of full phrases produced by the algorithm (the last incomplete phrase is ignored). <p> Our goal is to compute it precisely. In this case, an extension of a Flajolet and Richmond technique [8] works fine, and we apply it in this subsection. We follow Hubalek <ref> [12] </ref> to derive our results. We omit most detailed calculations, and the reader is referred to [8, 12]. <p> Our goal is to compute it precisely. In this case, an extension of a Flajolet and Richmond technique [8] works fine, and we apply it in this subsection. We follow Hubalek [12] to derive our results. We omit most detailed calculations, and the reader is referred to <ref> [8, 12] </ref>. First of all, we observe that our differential functional equation (6) becomes in this case @ b The coefficients of e B (u; z) can be computed by solving a linear recurrence of type (1). <p> From (61) and (62) we immediately obtain L 1 (z)(1 + z) b = z b+1 + 2z b L 1 ( 2 L 2 (z)(1 + z) b = 4z b L 1 ( 2 z ): Iterating these equations we easily find (cf. <ref> [8, 12] </ref>) L 1 (z) = k=0 2 ) b ) (2 ( z 2 ) (1 + z b 2 k+1 ; (63) 1 X (2z b )(2 ( z 2 k ) b ) (1 + z)(1 + z 2 k ) z The next step is to transform <p> tL 1 ( 1 Q b ( t ; s = 1 2 s I (s) ; " t ) 2 ) # 2 1s where I (s) = 0 Q b (t) J (s) ; (67) 1 Z (t) s1 dt (68) with H being the Hankel contour (cf. <ref> [9, 12] </ref>). The rest is easy. Applying standard arguments of the inverse Mellin transform we can derive asymptotic expansions of L 1 ( 1 t ) and L 2 ( 1 t ) as t ! 0.
Reference: [13] <author> K. Hummelsheim and C. Kleiner, </author> <title> Project in CS 543: Analysis of a Data Compression Algorithm, </title> <institution> Purdue University, Department of Computer Science (1996). </institution>
Reference-contexts: alphabet we obtain r n (1) = log 2 n log 2 n ; 1:98 + ffi (n) + O log log n r n (3) = log 2 n log 2 n ; 1:71 + ffi (n) + O log log n Furthermore, some recent preliminary experimental results (cf. <ref> [13] </ref>) carried out on structured ASCII files indicate that a practical saving can be achieved for b &gt; 1, and this is particularly true for large alphabets (e.g., image), as already seen in Section 1. We should point out that these experimental findings are very sensitive to implementation issues.
Reference: [14] <author> P. Jacquet and W. Szpankowski, </author> <title> Analysis of Digital Tries with Markovian Dependency, </title> <journal> IEEE Trans. Information Theory, </journal> <volume> 37, </volume> <month> 1470-1475 </month> <year> (1991). </year>
Reference-contexts: We should mention that similar numerical problems can be encountered in other analyses (cf. [18]). Digital search trees for b = 1 have been analyzed in the past in the case of a fixed number of independent strings (cf. <ref> [6, 14, 19, 20, 21, 22, 29, 30, 31, 36, 37] </ref>). Much less is known about b-digital search trees. As mentioned above, the first non-trivial analysis of the size of such trees for the symmetric Bernoulli model was proposed by Flajolet and Richmond [8]. <p> For the original Lempel-Ziv parsing algorithm (b = 1) mostly only first-order asymptotics (e.g., leading terms in almost sure convergence) have been analyzed, with an exception of the work by Aldous and Shields [1], and recent works of Louchard and Szpankowski [24], and Jacquet and Szpankowski <ref> [14] </ref> (see also [28, 37]). Finally, Gilbert and Kadota [11] analyzed numerically the number of possible messages composed of m parsed phrases, as well as the length of a phrase in the digital tree model. <p> Naturally, the number of nodes in such a tree is O ((n=b)= log 2 (n=b)). To estimate the probabilities appearing in (19) one seeks the limiting distribution of M n . This is a difficult problem even for b = 1, and only recently Jacquet and Szpankowski <ref> [14] </ref> "cracked" it down by showing that M n appropriately normalized weakly converges to the standard normal distribution. The case b &gt; 1 is still unsolved until now, however, the technique of [14] can handle this case, too. <p> This is a difficult problem even for b = 1, and only recently Jacquet and Szpankowski <ref> [14] </ref> "cracked" it down by showing that M n appropriately normalized weakly converges to the standard normal distribution. The case b &gt; 1 is still unsolved until now, however, the technique of [14] can handle this case, too. To see this, we first reduce the problem to another one on the digital tree model. <p> The latter is easier to handle but far from trivial, and the reader is referred to <ref> [14] </ref> for details. One finds a similar situation for the case b &gt; 1, thus a central limit theorem for the internal path length L m should hold. <p> The exponential generating function L (z; u) = P 1 m! of the probability generating function of L m satisfies the following partial-functional differential equation @ b L (z; u) The arguments from <ref> [14] </ref> can be extended to b &gt; 1, after some tedious labor, and one can solve asymptotically the above equation. We formulate our conclusions in a form of a fact that follows from [14] but without providing any detailed derivation. Fact 1 Consider the asymmetric Bernoulli model. <p> of L m satisfies the following partial-functional differential equation @ b L (z; u) The arguments from <ref> [14] </ref> can be extended to b &gt; 1, after some tedious labor, and one can solve asymptotically the above equation. We formulate our conclusions in a form of a fact that follows from [14] but without providing any detailed derivation. Fact 1 Consider the asymmetric Bernoulli model. <p> 1) + O (s + 1), hence the Laurent expansion of X (s) at s = 1 is 1 1 2h 2 h 1 fl 1 s + 1 20 In order to derive the asymptotic expansion of e X (z) for large z we use well-known argu- ments (cf. <ref> [6, 9, 14, 24, 27] </ref>) of the inverse Mellin transform, that is, e X (z) = 2i 2 +i1 2 i1 (The evaluation of this integral is quite standard (e.g., see [27]): we extend the line of integration to a big rectangle right to the integration line, and observe that bottom <p> We first use Mellin transform technique to derive asymptotics of e B (z; u) z for z ! 1 in a cone S , then depoissonize this result by Lemma 4. In fact, we follow the footsteps of Jacquet and Szpankowski <ref> [14] </ref>. We start with taking the Mellin transform to (56). <p> Summing up, e B (u; z) = h (s 0 (u)) X u 1 (s k (u)) b !(u; s k (u))z s k (u) +O (1) : We now set u = e t for complex t in the vicinity of zero. Similar algebra to the ones in <ref> [14, 24] </ref> leads to the following for t ! 0: s 0 (t) = 1 h 1 fft 2 + O (t 3 ) ; (58) h 1 + O (t 2 ) ; h (s 0 (t)) 1 + O (t) ; The rest is a matter of depoissonization. <p> m (e t= m ) = 0 t 2 + e t m 1s 0 (t) k6=0 h (s k (t)) 1 = e 2 @ 1 + O @ k6=0 h (s k (t)) 1 1 = e 2 1 + O 1 log m since , as in <ref> [14] </ref>, we prove that (cf. [38]) X 1 (s k (t)) b !(u; s k (t))m s 0 (t)s k (t) = O (t) = O 1 log m for t = t = m = O (1= log m)).
Reference: [15] <author> P. Jacquet and W. Szpankowski, </author> <title> Asymptotic Behavior of the Lempel-Ziv Parsing Scheme and Digital Search Trees, </title> <journal> Theoretical Computer Science, </journal> <volume> 144, </volume> <month> 161-197 </month> <year> (1995). </year>
Reference-contexts: Our goal is to investigate the probabilistic behavior of a typical phrase length, that is, the length of a randomly selected phrase. As already observed in Louchard and Szpankowski [24] (cf. <ref> [15] </ref>), the Lempel-Ziv algorithm can be modeled in two ways, namely as a digital tree model or a Lempel-Ziv model. In the former, one constructs the Lempel-Ziv sequence from m (probabilistically) independent strings (of possibly infinite lengths). <p> In the Lempel-Ziv model there is only one sequence of fixed length, say n, and one partitions the sequences according to the Lempel-Ziv algorithm as described above. Clearly, these models are related as already observed in <ref> [15, 24] </ref>. We shall study both models in this paper. Let us have a closer look at the digital tree model (cf. [24] for a more detailed description). <p> The details of such a construction can be found in [8, 20, 27]. Now, we briefly discuss the Lempel-Ziv model. We recall that now we deal with a single sequence of fixed length n which is partitioned according to the Lempel-Ziv algorithm. As already discussed in <ref> [1, 24, 15] </ref>, digital trees can be also used to construct the Lempel-Ziv parsing. Indeed, let us first append the string with b empty phrases that are stored in the root of the associated b-digital search tree. <p> If p = q = 0:5, the Bernoulli model is called symmetric, otherwise it is asymmetric. Actually, digital trees appear in a variety of computer and communications applications including searching, sorting, dynamic hashing, codes, conflict resolution protocols for multi-access communications, and data compression (cf. <ref> [6, 8, 20, 27, 24, 25, 15, 37] </ref>). Thus, better understanding of their behavior is desirable and could lead to some algorithmic improvements. <p> Observe that s 0 = 1. Actually, s k were studied quite intensively in the past, and the following is well-known (e.g., see <ref> [15] </ref> for further references): Lemma 3 For all integers k, let s k be solutions of 1 p s q s = 0. (i) Then, 1 &lt;(s k ) 0 where 0 is a positive solution of 1 + q s = p s . (ii) If &lt;(s k ) = <p> h 2 h 3 log m + 2 k6=0 h (s k ) 1 h 1 m 1s k log m + O (1) : If &lt;(s k ) = 1 for all k, then by Lemma 3 one can prove that h (s k ) = h 1 (cf. <ref> [15] </ref>). If &lt;(s k ) &gt; 1, then m 1s k log m = o (1). Therefore, Var D m = h 2 h 2 h 3 log m + O (1).
Reference: [16] <author> P. Jacquet and W. Szpankowski, </author> <title> Analytical Depoissonization Lemma and Its Applications, </title> <institution> Pur-due University, </institution> <month> CSD-TR-96-62 </month> <year> (1996). </year>
Reference-contexts: After "depoissonization" (cf. Section 3.2) we expect that B m (u) ~ e B (u; m). In the next section, we use the Mellin transform [9], singularity analysis [7], and the depoissonization lemma <ref> [16, 32] </ref> to solve the above equation, and to prove the following main result. Below, we write log for natural logarithm. Theorem 1 (Asymmetric Bernoulli Model) (i) Let D m be the typical depth in a b-digital tree built over m statistically independent strings under the asymmetric Bernoulli model. <p> It is known (cf. <ref> [5, 16] </ref>) that as long as arg (z) belongs to some cone around the real axis, the Mellin transform F (s) of a function f (x) of a real argument and its corresponding function of a complex argument is the same. <p> This lemma basically says that mED m ~ e X (m) and mED m (D m 1) ~ f W (m) under some weak conditions that are easy to verify in our case. The reader is referred to <ref> [16, 32] </ref> for more details about depoissonization lemma. For completeness, however, we review some depoissonization results that are useful for our problem. <p> How can we infer asymptotics of g n from e G (z)? One possible answer is given in the depoissonization lemma below (cf. <ref> [16, 32] </ref>): Lemma 4 (Depoissonization Lemma) (i) Let e G (z) be the Poisson transform of a sequence g n that is assumed to be an entire function of z. <p> We use induction over the so-called increasing domains defined as follows (cf. <ref> [16, 27] </ref>): For all positive integers m 1 and constants ~; ffi &gt; 0, let F m = fz = e i# : 2 [~ffi; ~-m ]; 0 # &lt; 2g where maxfp; qg - &lt; 1 and ffi minfp; qg.
Reference: [17] <author> P. Jacquet and W. Szpankowski, </author> <title> Towards Analytical Information Theory: Entropy Computations, </title> <institution> Purdue University, </institution> <month> CSD-TR-96-085 </month> <year> (1996). </year>
Reference-contexts: e jzj (pff+q cos ) + e jzj (qff+p cos ) + e jzj cos : Let us now define 1 &gt; ff &gt; cos such that the following three inequalities are simultaneously fulfilled: jzj b e jzj (pff+q cos ) 3 e ffjzj ; 1 Recently, Jacquet and Szpankowski <ref> [17] </ref> proved that if e G (z) has a polynomial growth in a cone, then condition (O) is automatically satisfied outside the cone. 23 jzj b e jzj (qff+p cos ) 3 e ffjzj ; jzj b+1 e jzj cos 3 e ffjzj : Then, for z 2 F m+1 we
Reference: [18] <author> S. Janson and W. Szpankowski, </author> <title> Analysis of an Asymmetric Leader Election Algorithm, </title> <institution> Purdue University, </institution> <month> CSD-TR-96-049 </month> <year> (1996). </year>
Reference-contexts: We propose here a method to evaluate numerically such constants (cf. Section 3.3) that is of its own interest and can be applied to other problems. We should mention that similar numerical problems can be encountered in other analyses (cf. <ref> [18] </ref>). Digital search trees for b = 1 have been analyzed in the past in the case of a fixed number of independent strings (cf. [6, 14, 19, 20, 21, 22, 29, 30, 31, 36, 37]). Much less is known about b-digital search trees.
Reference: [19] <author> P. Kirschenhofer, H. Prodinger and W. Szpankowski, </author> <title> Digital Search Trees Again Revisited: The Internal Path Length Perspective, </title> <journal> SIAM J. Computing, </journal> <volume> 23, </volume> <month> 598-616 </month> <year> (1994). </year>
Reference-contexts: We should mention that similar numerical problems can be encountered in other analyses (cf. [18]). Digital search trees for b = 1 have been analyzed in the past in the case of a fixed number of independent strings (cf. <ref> [6, 14, 19, 20, 21, 22, 29, 30, 31, 36, 37] </ref>). Much less is known about b-digital search trees. As mentioned above, the first non-trivial analysis of the size of such trees for the symmetric Bernoulli model was proposed by Flajolet and Richmond [8].
Reference: [20] <author> D. Knuth, </author> <title> The Art of Computer Programming. Sorting and Searching. </title> <journal> Vol. </journal> <volume> 3., </volume> <publisher> Addison-Wesley (1973). </publisher>
Reference-contexts: Let us have a closer look at the digital tree model (cf. [24] for a more detailed description). To justify its name we shall show how the Lempel-Ziv parsing (of m strings) can be constructed by building an associated digital search tree (cf. <ref> [6, 20, 27] </ref>). In this case, we consider an extension of digital search trees called b-digital search tree, or (for short) b-DST (cf. [8, 27]) which is built from a fixed number, say m, of strings. <p> The details of such a construction can be found in <ref> [8, 20, 27] </ref>. Now, we briefly discuss the Lempel-Ziv model. We recall that now we deal with a single sequence of fixed length n which is partitioned according to the Lempel-Ziv algorithm. As already discussed in [1, 24, 15], digital trees can be also used to construct the Lempel-Ziv parsing. <p> If p = q = 0:5, the Bernoulli model is called symmetric, otherwise it is asymmetric. Actually, digital trees appear in a variety of computer and communications applications including searching, sorting, dynamic hashing, codes, conflict resolution protocols for multi-access communications, and data compression (cf. <ref> [6, 8, 20, 27, 24, 25, 15, 37] </ref>). Thus, better understanding of their behavior is desirable and could lead to some algorithmic improvements. <p> We should mention that similar numerical problems can be encountered in other analyses (cf. [18]). Digital search trees for b = 1 have been analyzed in the past in the case of a fixed number of independent strings (cf. <ref> [6, 14, 19, 20, 21, 22, 29, 30, 31, 36, 37] </ref>). Much less is known about b-digital search trees. As mentioned above, the first non-trivial analysis of the size of such trees for the symmetric Bernoulli model was proposed by Flajolet and Richmond [8]. <p> Un fortunately, there is no easy way to solve such a recurrence unless b = 1 (cf. <ref> [20, 36] </ref>). To circumvent this difficulty, Flajolet and Richmond [8] reduced it to a certain functional equation on an ordinary generating function that is easier to solve.
Reference: [21] <author> A. Konheim and D.J. Newman, </author> <title> A Note on Growing Binary Trees, </title> <journal> Discrete Mathematics, </journal> <volume> 4, </volume> <month> 57-63 </month> <year> (1973). </year>
Reference-contexts: We should mention that similar numerical problems can be encountered in other analyses (cf. [18]). Digital search trees for b = 1 have been analyzed in the past in the case of a fixed number of independent strings (cf. <ref> [6, 14, 19, 20, 21, 22, 29, 30, 31, 36, 37] </ref>). Much less is known about b-digital search trees. As mentioned above, the first non-trivial analysis of the size of such trees for the symmetric Bernoulli model was proposed by Flajolet and Richmond [8].
Reference: [22] <author> G. Louchard, </author> <title> Exact and Asymptotic Distributions in Digital and Binary Search Trees, </title> <journal> RAIRO Theoretical Inform. Applications, </journal> <volume> 21, </volume> <month> 479-495 </month> <year> (1987). </year>
Reference-contexts: We should mention that similar numerical problems can be encountered in other analyses (cf. [18]). Digital search trees for b = 1 have been analyzed in the past in the case of a fixed number of independent strings (cf. <ref> [6, 14, 19, 20, 21, 22, 29, 30, 31, 36, 37] </ref>). Much less is known about b-digital search trees. As mentioned above, the first non-trivial analysis of the size of such trees for the symmetric Bernoulli model was proposed by Flajolet and Richmond [8]. <p> These expressions are the b -equivalent of Q 1 (t) (cf. (12) of Section 2), and function jR i j used in <ref> [22, 24] </ref> (cf. (30) of [24]) parametrized by s. Clearly R (i; s) decreases exponentially with i and H (s) is uniformly bounded, which justify our choice k = j + O (1) for asymptotic analysis.
Reference: [23] <author> G. Louchard, </author> <title> Digital Search Trees Revisited, </title> <journal> Cahiers du CERO, </journal> <volume> 36, </volume> <month> 259-27 </month> <year> (1995). </year> <month> 35 </month>
Reference-contexts: The variance of the size and the internal path length | still for the symmetric model | was discussed by Hubalek [12]. To the best of our knowledge, b-DST have not yet been analyzed for the asymmetric Bernoulli model. In a companion paper, one of us (cf. Louchard <ref> [23] </ref>) presents an alternative probabilistic approach to obtain some of our results, namely, the limiting distribution (without the rate of convergence) but not the large deviation results and precise evaluation of the moments (see Section 4.2 for the derivation of the asymptotic distribution in the symmetric case using this approach). <p> In <ref> [23] </ref> Louchard also evaluates the average number of nodes in a b-digital search tree, thus directly extending the Flajolet and Richmond result [8] to the asymmetric Bernoulli model. <p> More precisely, if S m is the size of a b-DST built from m strings, then M 0 n = S M n 1 (since we count only non-root nodes). But, according to Flajolet 14 and Richmond [8] (symmetric case), and Louchard <ref> [23] </ref> (asymmetric case): ES m = m (q 0 (b) + ffi 2 (m; b)) + O (1) where q 0 (b) is a constant that can be computed explicitly.
Reference: [24] <author> G. Louchard and W. Szpankowski, </author> <title> Average Profile and Limiting Distribution for a Phrase Size in the Lempel-Ziv Parsing Algorithm, </title> <journal> IEEE Information Theory, </journal> <volume> 41, </volume> <month> 478-488 </month> <year> (1995). </year>
Reference-contexts: Our goal is to investigate the probabilistic behavior of a typical phrase length, that is, the length of a randomly selected phrase. As already observed in Louchard and Szpankowski <ref> [24] </ref> (cf. [15]), the Lempel-Ziv algorithm can be modeled in two ways, namely as a digital tree model or a Lempel-Ziv model. In the former, one constructs the Lempel-Ziv sequence from m (probabilistically) independent strings (of possibly infinite lengths). <p> In the Lempel-Ziv model there is only one sequence of fixed length, say n, and one partitions the sequences according to the Lempel-Ziv algorithm as described above. Clearly, these models are related as already observed in <ref> [15, 24] </ref>. We shall study both models in this paper. Let us have a closer look at the digital tree model (cf. [24] for a more detailed description). <p> Clearly, these models are related as already observed in [15, 24]. We shall study both models in this paper. Let us have a closer look at the digital tree model (cf. <ref> [24] </ref> for a more detailed description). To justify its name we shall show how the Lempel-Ziv parsing (of m strings) can be constructed by building an associated digital search tree (cf. [6, 20, 27]). <p> The details of such a construction can be found in [8, 20, 27]. Now, we briefly discuss the Lempel-Ziv model. We recall that now we deal with a single sequence of fixed length n which is partitioned according to the Lempel-Ziv algorithm. As already discussed in <ref> [1, 24, 15] </ref>, digital trees can be also used to construct the Lempel-Ziv parsing. Indeed, let us first append the string with b empty phrases that are stored in the root of the associated b-digital search tree. <p> If p = q = 0:5, the Bernoulli model is called symmetric, otherwise it is asymmetric. Actually, digital trees appear in a variety of computer and communications applications including searching, sorting, dynamic hashing, codes, conflict resolution protocols for multi-access communications, and data compression (cf. <ref> [6, 8, 20, 27, 24, 25, 15, 37] </ref>). Thus, better understanding of their behavior is desirable and could lead to some algorithmic improvements. <p> In particular, we prove that the depth appropriately normalized is asymptotically normally distributed in the asymmetric Bernoulli model. 4 The Lempel-Ziv model is somewhat more intricate since there is some unpleasant depen-dency between consecutive phrases. Fortunately, Louchard and Szpankowski <ref> [24] </ref> proved that this dependency is not too strong (cf. equation (24) in Section 2 of this paper), and one can infer the probabilistic behavior of the length of a randomly selected phrase from the depth of a randomly selected node in a b-DST built from a fixed number of nodes <p> For the original Lempel-Ziv parsing algorithm (b = 1) mostly only first-order asymptotics (e.g., leading terms in almost sure convergence) have been analyzed, with an exception of the work by Aldous and Shields [1], and recent works of Louchard and Szpankowski <ref> [24] </ref>, and Jacquet and Szpankowski [14] (see also [28, 37]). Finally, Gilbert and Kadota [11] analyzed numerically the number of possible messages composed of m parsed phrases, as well as the length of a phrase in the digital tree model. <p> In a variety of applications, one is interested in the typical depth D m defined as the depth of a randomly selected string, that is, PrfD m = kg = 1 m X P fD m (i) = kg : (3) As argued in Louchard and Szpankowski <ref> [24] </ref>, the depth D m is closely related to the length of a randomly selected phrase in the generalized Lempel-Ziv parsing scheme. We denote it by D LZ n where n is the length of the string to be parsed. <p> for m 0: B m+b (u) = b + u i=0 m ! with initial conditions B i (u) = i for i = 0; 1; : : : ; b 1 : (5) For b = 1 the above recurrence can be solved exactly as discussed in [35] (cf. <ref> [24] </ref>). Unfortunately, for b &gt; 1 the recurrence becomes too complicated and no exact solution 7 is known. This was already noted by Flajolet and Richmond [8] who developed a special technique to deal with such recurrences for b &gt; 1. <p> In passing it should be noted that the "asymptotic distribution" established in part (iii) above resembles a "mixture" of double exponential distributions (i.e., e 2 x ), as in the case b = 1. An intuitive explanation for different behavior in the symmetric case is given in <ref> [24] </ref>, but this follows basically from the fact that Var D m = O (1). <p> By the typical phrase length D LZ n we mean the length of a randomly selected phrase (i.e., conditioned on M n each phrase has probability 1=M n of being selected). The typical depth D LZ n in the Lempel-Ziv model can be estimated as follows (cf. <ref> [24] </ref>): PrfD LZ n = kg = m=m L PrfD LZ n = kjM n = mgPrfM n = mg (19) where m L and m U are lower and upper bounds for the number of phrases. <p> Clearly, this restriction affects the depth of a randomly selected phrase. A mathematical form of this dependency is actually written down in (20). We can use exactly the same arguments as in Louchard and Szpankowski <ref> [24] </ref> (cf. Section III-B of [24]) to show that for b &gt; 1 the following holds PrfD LZ n = kjM n = mg = 1 + O (log n)=n PrfD m = kg (24) as long as k = O (ED m ) = O (log m). <p> Clearly, this restriction affects the depth of a randomly selected phrase. A mathematical form of this dependency is actually written down in (20). We can use exactly the same arguments as in Louchard and Szpankowski <ref> [24] </ref> (cf. Section III-B of [24]) to show that for b &gt; 1 the following holds PrfD LZ n = kjM n = mg = 1 + O (log n)=n PrfD m = kg (24) as long as k = O (ED m ) = O (log m). <p> This would particularly imply (using Fact 1 (ii)) that for complex # Ee #D LZ n ~ Ee #D bnh 1 = log nc : asymptotically as n ! 1 (cf. <ref> [24] </ref> for details). In summary, the second main result concerning the Lempel-Ziv model is presented below (for simplicity we formulate it only for the asymmetric case). Theorem 3 Consider the asymmetric Bernoulli model. <p> 1) + O (s + 1), hence the Laurent expansion of X (s) at s = 1 is 1 1 2h 2 h 1 fl 1 s + 1 20 In order to derive the asymptotic expansion of e X (z) for large z we use well-known argu- ments (cf. <ref> [6, 9, 14, 24, 27] </ref>) of the inverse Mellin transform, that is, e X (z) = 2i 2 +i1 2 i1 (The evaluation of this integral is quite standard (e.g., see [27]): we extend the line of integration to a big rectangle right to the integration line, and observe that bottom <p> Summing up, e B (u; z) = h (s 0 (u)) X u 1 (s k (u)) b !(u; s k (u))z s k (u) +O (1) : We now set u = e t for complex t in the vicinity of zero. Similar algebra to the ones in <ref> [14, 24] </ref> leads to the following for t ! 0: s 0 (t) = 1 h 1 fft 2 + O (t 3 ) ; (58) h 1 + O (t 2 ) ; h (s 0 (t)) 1 + O (t) ; The rest is a matter of depoissonization. <p> These expressions are the b -equivalent of Q 1 (t) (cf. (12) of Section 2), and function jR i j used in <ref> [22, 24] </ref> (cf. (30) of [24]) parametrized by s. Clearly R (i; s) decreases exponentially with i and H (s) is uniformly bounded, which justify our choice k = j + O (1) for asymptotic analysis. <p> These expressions are the b -equivalent of Q 1 (t) (cf. (12) of Section 2), and function jR i j used in [22, 24] (cf. (30) of <ref> [24] </ref>) parametrized by s. Clearly R (i; s) decreases exponentially with i and H (s) is uniformly bounded, which justify our choice k = j + O (1) for asymptotic analysis.
Reference: [25] <author> G. Louchard and W. Szpankowski, </author> <title> Generalized Lempel-Ziv Parsing Scheme and its Preliminary Analysis of the Average Profile, </title> <booktitle> Proc. Data Compression Conference, </booktitle> <pages> 262-271, </pages> <address> Snowbird (1995). </address>
Reference-contexts: It is known that the original Lempel-Ziv scheme does not cope very well with sequences containing a long string of repeated symbols. To somewhat remedy this situation, Louchard and Szpankowski <ref> [25] </ref> introduced a generalization of the Lempel-Ziv parsing scheme: It parses a sequence into phrases such that the next phrase is the shortest phrase seen in the past by at most b1 phrases (b = 1 corresponds to the original Lempel-Ziv algorithm). <p> If p = q = 0:5, the Bernoulli model is called symmetric, otherwise it is asymmetric. Actually, digital trees appear in a variety of computer and communications applications including searching, sorting, dynamic hashing, codes, conflict resolution protocols for multi-access communications, and data compression (cf. <ref> [6, 8, 20, 27, 24, 25, 15, 37] </ref>). Thus, better understanding of their behavior is desirable and could lead to some algorithmic improvements.
Reference: [26] <author> G. Louchard and W. Szpankowski, </author> <title> On the Average Redundancy Rate of the Lempel-Ziv Code, </title> <journal> IEEE Information Theory, </journal> <volume> 43, </volume> <month> 2-8 </month> <year> (1997). </year>
Reference-contexts: In addition, using another recent finding of Louchard and Szpankowski <ref> [26] </ref> (concerning redundancy of the ordinary Lempel-Ziv code, i.e., for b = 1) we are able to compute the average redundancy of the generalized Lempel-Ziv code. <p> It is not difficult to see (especially, if one considers the associated digital tree, as discussed in Section 1) that E i=1 n : Thus, ` n = EM n log M 0 n + log 2 EM 0 n . But, as in <ref> [26] </ref> we notice that EM n log M 0 n = n + O (1= log n). To estimate EM n we observe that it is related to the internal path length in the associated digital tree, and EL m = mED m (cf. (20)). As in Louchard and Szpankowski [26], <p> <ref> [26] </ref> we notice that EM n log M 0 n = n + O (1= log n). To estimate EM n we observe that it is related to the internal path length in the associated digital tree, and EL m = mED m (cf. (20)). As in Louchard and Szpankowski [26], we conclude that EM n ~ x n where x n is a solution of EL x n = n, that is: nh 1 log log n + log n log 2 n : Here A is h 1 times the fi (1) term in (7) of Theorem 1 (i), <p> For large b one derives that q 0 (b) ~ 1=(b log 2). In summary, EM 0 n ~ x n (q 0 (b) + ffi 2 (n; b)). Putting everything together, and using the approach from <ref> [26] </ref>, we finally arrive at the following formula for the average redundancy of the generalized Lempel-Ziv code r n (b) = h 1 2h 1 + (b; p) + H b1 + q 0 (b) log 2 + log q 0 (b) ffi (n; b) + O log log n where
Reference: [27] <author> H. Mahmoud, </author> <title> Evolution of Random Search Trees, </title> <publisher> John Wiley & Sons, </publisher> <address> New York (1992). </address>
Reference-contexts: Let us have a closer look at the digital tree model (cf. [24] for a more detailed description). To justify its name we shall show how the Lempel-Ziv parsing (of m strings) can be constructed by building an associated digital search tree (cf. <ref> [6, 20, 27] </ref>). In this case, we consider an extension of digital search trees called b-digital search tree, or (for short) b-DST (cf. [8, 27]) which is built from a fixed number, say m, of strings. <p> To justify its name we shall show how the Lempel-Ziv parsing (of m strings) can be constructed by building an associated digital search tree (cf. [6, 20, 27]). In this case, we consider an extension of digital search trees called b-digital search tree, or (for short) b-DST (cf. <ref> [8, 27] </ref>) which is built from a fixed number, say m, of strings. Hereafter, we consider only the binary alphabet = f0; 1g, but an extension to any finite alphabet is straightforward. <p> The details of such a construction can be found in <ref> [8, 20, 27] </ref>. Now, we briefly discuss the Lempel-Ziv model. We recall that now we deal with a single sequence of fixed length n which is partitioned according to the Lempel-Ziv algorithm. As already discussed in [1, 24, 15], digital trees can be also used to construct the Lempel-Ziv parsing. <p> If p = q = 0:5, the Bernoulli model is called symmetric, otherwise it is asymmetric. Actually, digital trees appear in a variety of computer and communications applications including searching, sorting, dynamic hashing, codes, conflict resolution protocols for multi-access communications, and data compression (cf. <ref> [6, 8, 20, 27, 24, 25, 15, 37] </ref>). Thus, better understanding of their behavior is desirable and could lead to some algorithmic improvements. <p> 1) + O (s + 1), hence the Laurent expansion of X (s) at s = 1 is 1 1 2h 2 h 1 fl 1 s + 1 20 In order to derive the asymptotic expansion of e X (z) for large z we use well-known argu- ments (cf. <ref> [6, 9, 14, 24, 27] </ref>) of the inverse Mellin transform, that is, e X (z) = 2i 2 +i1 2 i1 (The evaluation of this integral is quite standard (e.g., see [27]): we extend the line of integration to a big rectangle right to the integration line, and observe that bottom <p> order to derive the asymptotic expansion of e X (z) for large z we use well-known argu- ments (cf. [6, 9, 14, 24, 27]) of the inverse Mellin transform, that is, e X (z) = 2i 2 +i1 2 i1 (The evaluation of this integral is quite standard (e.g., see <ref> [27] </ref>): we extend the line of integration to a big rectangle right to the integration line, and observe that bottom and top lines contribute negligibly because the Gamma function decreases exponentially with the increase in the magnitude of the imaginary part, and the right side positioned at, say d, contributes x <p> We use induction over the so-called increasing domains defined as follows (cf. <ref> [16, 27] </ref>): For all positive integers m 1 and constants ~; ffi &gt; 0, let F m = fz = e i# : 2 [~ffi; ~-m ]; 0 # &lt; 2g where maxfp; qg - &lt; 1 and ffi minfp; qg.
Reference: [28] <author> D. Ornstein and B. Weiss, </author> <title> Entropy and Data Compression Schemes, </title> <journal> IEEE Information Theory, </journal> <volume> 39, </volume> <month> 78-83 </month> <year> (1993). </year>
Reference-contexts: For the original Lempel-Ziv parsing algorithm (b = 1) mostly only first-order asymptotics (e.g., leading terms in almost sure convergence) have been analyzed, with an exception of the work by Aldous and Shields [1], and recent works of Louchard and Szpankowski [24], and Jacquet and Szpankowski [14] (see also <ref> [28, 37] </ref>). Finally, Gilbert and Kadota [11] analyzed numerically the number of possible messages composed of m parsed phrases, as well as the length of a phrase in the digital tree model.
Reference: [29] <author> B. Pittel, </author> <title> Asymptotic Growth of a Class of random Trees, </title> <journal> Ann. Probab., </journal> <volume> 13, </volume> <month> 414 - 427 </month> <year> (1985). </year>
Reference-contexts: We should mention that similar numerical problems can be encountered in other analyses (cf. [18]). Digital search trees for b = 1 have been analyzed in the past in the case of a fixed number of independent strings (cf. <ref> [6, 14, 19, 20, 21, 22, 29, 30, 31, 36, 37] </ref>). Much less is known about b-digital search trees. As mentioned above, the first non-trivial analysis of the size of such trees for the symmetric Bernoulli model was proposed by Flajolet and Richmond [8].
Reference: [30] <author> H. Prodinger, </author> <title> Approximate Counting via Euler Transform, </title> <journal> Math. Slovaka, </journal> <volume> 44, </volume> <month> 569-574 </month> <year> (1994). </year>
Reference-contexts: We should mention that similar numerical problems can be encountered in other analyses (cf. [18]). Digital search trees for b = 1 have been analyzed in the past in the case of a fixed number of independent strings (cf. <ref> [6, 14, 19, 20, 21, 22, 29, 30, 31, 36, 37] </ref>). Much less is known about b-digital search trees. As mentioned above, the first non-trivial analysis of the size of such trees for the symmetric Bernoulli model was proposed by Flajolet and Richmond [8].
Reference: [31] <author> H. Prodinger, </author> <title> Digital Search Trees and Basic Hypergeometric Functions, </title> <journal> EATCS Bulletin, </journal> <volume> 56, </volume> <month> 112-115 </month> <year> (1995). </year>
Reference-contexts: We should mention that similar numerical problems can be encountered in other analyses (cf. [18]). Digital search trees for b = 1 have been analyzed in the past in the case of a fixed number of independent strings (cf. <ref> [6, 14, 19, 20, 21, 22, 29, 30, 31, 36, 37] </ref>). Much less is known about b-digital search trees. As mentioned above, the first non-trivial analysis of the size of such trees for the symmetric Bernoulli model was proposed by Flajolet and Richmond [8].
Reference: [32] <author> B. Rais, P. Jacquet and W. Szpankowski, </author> <title> A Limiting Distribution for the Depth in PATRICIA Tries, </title> <journal> SIAM J. Discrete Mathematics, </journal> <volume> 6, </volume> <month> 197-213 </month> <year> (1993). </year>
Reference-contexts: After "depoissonization" (cf. Section 3.2) we expect that B m (u) ~ e B (u; m). In the next section, we use the Mellin transform [9], singularity analysis [7], and the depoissonization lemma <ref> [16, 32] </ref> to solve the above equation, and to prove the following main result. Below, we write log for natural logarithm. Theorem 1 (Asymmetric Bernoulli Model) (i) Let D m be the typical depth in a b-digital tree built over m statistically independent strings under the asymmetric Bernoulli model. <p> This lemma basically says that mED m ~ e X (m) and mED m (D m 1) ~ f W (m) under some weak conditions that are easy to verify in our case. The reader is referred to <ref> [16, 32] </ref> for more details about depoissonization lemma. For completeness, however, we review some depoissonization results that are useful for our problem. <p> How can we infer asymptotics of g n from e G (z)? One possible answer is given in the depoissonization lemma below (cf. <ref> [16, 32] </ref>): Lemma 4 (Depoissonization Lemma) (i) Let e G (z) be the Poisson transform of a sequence g n that is assumed to be an entire function of z.
Reference: [33] <author> S. Savari, </author> <title> Redundancy of the Lempel-Ziv Incremental Parsing Rule, </title> <journal> IEEE Trans. Information Theory, </journal> <volume> 43, </volume> <year> (1997). </year>
Reference: [34] <author> J. Storer, </author> <title> Data Compression: Methods and Theory, </title> <publisher> Computer Science Press, </publisher> <address> Rockville, MD (1988). </address>
Reference-contexts: Such a new phrase is coded by giving the location of the prefix (that occurred before as a phrase) and the value of the last symbol, that is, the Lempel-Ziv code consists of pairs (pointer; symbol) (details can be found in any text book; e.g., <ref> [3, 34] </ref>). For example, the sequence ababbababaaaaaaaaac is parsed into (a)(b)(ab)(ba)(bab)(aa)(aaa)(aaaa)(c) and its code becomes: 0a0b1b2a4b1a6a7a0c (e.g., the pair 6a indicates that this phrase consists of the sixth phrase as a prefix that occurred before appended by a). Observe that there is no need for a separator between phrases.
Reference: [35] <author> W. Szpankowski, </author> <title> The Evaluation of an Alternating Sum with Applications to the Analysis of Some Data Structures, </title> <journal> Information Processing Letters, </journal> <volume> 28, </volume> <month> 13-19 </month> <year> (1988). </year>
Reference-contexts: following recurrence for m 0: B m+b (u) = b + u i=0 m ! with initial conditions B i (u) = i for i = 0; 1; : : : ; b 1 : (5) For b = 1 the above recurrence can be solved exactly as discussed in <ref> [35] </ref> (cf. [24]). Unfortunately, for b &gt; 1 the recurrence becomes too complicated and no exact solution 7 is known. This was already noted by Flajolet and Richmond [8] who developed a special technique to deal with such recurrences for b &gt; 1.
Reference: [36] <author> W. Szpankowski, </author> <title> A Characterization of Digital search Trees From the Successful Search Viewpoint, </title> <journal> Theoretical Computer Science, </journal> <volume> 85, </volume> <month> 117-134 </month> <year> (1991). </year>
Reference-contexts: The above recurrence can be solved exactly for b = 1 (cf. e.g., <ref> [36] </ref>), but attempts at extensions to b &gt; 1 have partially failed. Flajolet and Richmond [8] (cf. also [12]) used a new technique to solve this recurrence for p = 1=2 (i.e., symmetric Bernoulli model). <p> We should mention that similar numerical problems can be encountered in other analyses (cf. [18]). Digital search trees for b = 1 have been analyzed in the past in the case of a fixed number of independent strings (cf. <ref> [6, 14, 19, 20, 21, 22, 29, 30, 31, 36, 37] </ref>). Much less is known about b-digital search trees. As mentioned above, the first non-trivial analysis of the size of such trees for the symmetric Bernoulli model was proposed by Flajolet and Richmond [8]. <p> Thus, Theorem 1 is also proved for b = 1. Actually, in this case we may also conclude from <ref> [36] </ref> that (1; p) = k=1 1 p k+1 q k+1 : In Table 1 we present numerical values of (b; p) and ED m 1 h 1 log m as a function of b. <p> Un fortunately, there is no easy way to solve such a recurrence unless b = 1 (cf. <ref> [20, 36] </ref>). To circumvent this difficulty, Flajolet and Richmond [8] reduced it to a certain functional equation on an ordinary generating function that is easier to solve.
Reference: [37] <author> W. Szpankowski, </author> <title> A Generalized Suffix Tree and Its (Un)Expected Asymptotic Behaviors, </title> <journal> SIAM J. Computing, </journal> <volume> 22, </volume> <pages> 1176-1198, </pages> <year> (1993). </year>
Reference-contexts: If p = q = 0:5, the Bernoulli model is called symmetric, otherwise it is asymmetric. Actually, digital trees appear in a variety of computer and communications applications including searching, sorting, dynamic hashing, codes, conflict resolution protocols for multi-access communications, and data compression (cf. <ref> [6, 8, 20, 27, 24, 25, 15, 37] </ref>). Thus, better understanding of their behavior is desirable and could lead to some algorithmic improvements. <p> We should mention that similar numerical problems can be encountered in other analyses (cf. [18]). Digital search trees for b = 1 have been analyzed in the past in the case of a fixed number of independent strings (cf. <ref> [6, 14, 19, 20, 21, 22, 29, 30, 31, 36, 37] </ref>). Much less is known about b-digital search trees. As mentioned above, the first non-trivial analysis of the size of such trees for the symmetric Bernoulli model was proposed by Flajolet and Richmond [8]. <p> For the original Lempel-Ziv parsing algorithm (b = 1) mostly only first-order asymptotics (e.g., leading terms in almost sure convergence) have been analyzed, with an exception of the work by Aldous and Shields [1], and recent works of Louchard and Szpankowski [24], and Jacquet and Szpankowski [14] (see also <ref> [28, 37] </ref>). Finally, Gilbert and Kadota [11] analyzed numerically the number of possible messages composed of m parsed phrases, as well as the length of a phrase in the digital tree model.
Reference: [38] <author> J. Tang, </author> <title> Probabilistic Analysis of Digital Search Trees, </title> <type> Ph.D. Thesis, </type> <institution> Purdue University (1996). </institution>
Reference-contexts: Finally, observe that f m+b = 0 for m = 1; 2; :::; b and f i &gt; 0 for i &gt; 2b, hence (b; p) = n=b+2 b X (i + 1)b! = n=2b+1 b X (i + 1)b! : After a long and tedious algebra (cf. <ref> [38] </ref>) we can prove that A = H b + b (1 + b) 1 , hence b fl 0 (1) = H b1 + (b; p) as presented in Theorem 1, and this completes the proof of part (i) of Theorem 1 for b &gt; 1. <p> = 0 t 2 + e t m 1s 0 (t) k6=0 h (s k (t)) 1 = e 2 @ 1 + O @ k6=0 h (s k (t)) 1 1 = e 2 1 + O 1 log m since , as in [14], we prove that (cf. <ref> [38] </ref>) X 1 (s k (t)) b !(u; s k (t))m s 0 (t)s k (t) = O (t) = O 1 log m for t = t = m = O (1= log m)).
Reference: [39] <author> A. Wyner and J. Ziv, </author> <title> Some Asymptotic Properties of the Entropy of a Stationary Ergodic Data Source with Applications to Data Compression, </title> <journal> IEEE Trans. Information Theory, </journal> <volume> 35, </volume> <month> 1250-1258 </month> <year> (1989). </year>
Reference: [40] <author> J. Ziv and A. Lempel, </author> <title> A Universal Algorithm for Sequential Data Compression, </title> <journal> IEEE Trans. Information Theory, </journal> <volume> 23, 3, </volume> <month> 337-343 </month> <year> (1977). </year>
Reference: [41] <author> J. Ziv and A. Lempel, </author> <title> Compression of Individual Sequences via Variable-Rate Coding, </title> <journal> IEEE Trans. Information Theory, </journal> <volume> 24, </volume> <month> 530-536 </month> <year> (1978). </year> <month> 36 </month>
Reference-contexts: 1. INTRODUCTION The heart of several universal data compression schemes is the parsing algorithm due to Lempel and Ziv <ref> [41] </ref> (e.g., it is used in the UNIX compress command and in a CCITT standard for data compression for modems).
References-found: 41

