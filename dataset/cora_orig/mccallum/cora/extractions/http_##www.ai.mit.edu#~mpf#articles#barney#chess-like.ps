URL: http://www.ai.mit.edu/~mpf/articles/barney/chess-like.ps
Refering-URL: 
Root-URL: 
Email: E-mail: bdp@cl.cam.ac.uk  
Title: Symmetric Chess-Like Games have implemented a game generator that generates games from a wide but
Author: Barney Pell 
Address: Cambridge, UK  
Affiliation: University of Cambridge  
Note: METAGAME in  I  
Abstract: An earlier version of this paper appears in: H.J. van den Herik and L.V. Allis, editors, Heuristic Programming in Artificial Intelligence 3 The Third Computer Olympiad. Ellis Horwood, 1992. Abstract 
Abstract-found: 1
Intro-found: 1
Reference: [Abr90] <author> Bruce Abramson. Expected-outcome: </author> <title> A general model of static evaluation. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 12(2), </volume> <month> February </month> <year> 1990. </year> <month> 25 </month>
Reference: [Bel69] <author> R.C. Bell. </author> <title> Board and Table Games from Many Civilizations. </title> <publisher> Oxford University Press, </publisher> <year> 1969. </year>
Reference: [Dic71] <author> Anthony Dickins. </author> <title> A Guide to Fairy Chess. </title> <publisher> Dover, </publisher> <year> 1971. </year>
Reference: [Don92] <author> Ch. Donninger. </author> <title> The relation of mobility, strategy and the mean dead rabbit in chess. </title> <editor> In H.J. van den Herik and L.V. Allis, editors, </editor> <booktitle> Heuristic Programming in Artificial Intelligence 3 The Third Computer Olympiad. </booktitle> <publisher> Ellis Horwood, </publisher> <year> 1992. </year>
Reference: [Eps89] <author> Susan Epstein. </author> <title> The Intelligent Novice Learning to Play Better. </title> <editor> In D.N.L. Levy and D.F. Beal, editors, </editor> <booktitle> Heuristic Programming in Artificial Intelligence The First Computer Olympiad. </booktitle> <publisher> Ellis Horwood, </publisher> <year> 1989. </year>
Reference: [Har87] <author> D. Hartmann. </author> <title> How to Extract Relevant Knowledge from Grand Master Games, part 1. </title> <journal> ICCA-Journal, </journal> <volume> 10(1), </volume> <month> March </month> <year> 1987. </year>
Reference: [Pel92] <author> Barney Pell. Metagame: </author> <title> A New Challenge for Games and Learning. </title> <editor> In H.J. van den Herik and L.V. Allis, editors, </editor> <booktitle> Heuristic Programming in Artificial Intelligence 3 The Third Computer Olympiad. </booktitle> <publisher> Ellis Horwood, </publisher> <year> 1992. </year> <note> Also appears as University of Cambridge Computer Laboratory Technical Report No. 276. </note>
Reference: [Pel93a] <author> Barney Pell. </author> <title> Metagame Realized: A Player to Beat. </title> <editor> In D.N.L. Levy and D.F. Beal, editors, </editor> <booktitle> Heuristic Programming in Artificial Intelligence 4 The Fourth Computer Olympiad. </booktitle> <publisher> Ellis Horwood, </publisher> <year> 1993. </year> <note> In preparation. </note>
Reference-contexts: While it is true that playing Metagame well raises some difficult issues, it is a straightforward process to build a program to play it legally (see <ref> [Pel93a] </ref>). Since the representation of any game produced by a generator is basically a definition of the legal moves of the game, a conversion program can be written which takes a new game and produces a legal move generator for it. <p> Examples of these might be using expected outcome ([Abr90]), mobility ([Don92, Har87]) or material as features in an evaluation function to conduct a minimax search (see <ref> [Pel93a] </ref>). Thus it is easy to create some obvious baseline programs to play Metagame. From that point, any programs which actually do anything more clever are likely to defeat these simple programs.
Reference: [Pel93b] <author> Barney Pell. </author> <title> Strategy Generation and Evaluation for Meta Game-Playing. </title> <type> PhD thesis, </type> <institution> Computer Laboratory, University of Cam-bridge, </institution> <year> 1993. </year> <month> Forthcoming. </month>
Reference-contexts: cylindrical board allows pieces to move from one side to the other with a direct leap. 4.4 Consistency Checking Deciding whether a generated game can possibly be won generally requires a level of analysis beyond that implemented in the generator (in fact, the general problem is NP-Complete, as proved in <ref> [Pel93b] </ref>). However, the current generator does perform a simple analysis to avoid some of the common problems which would otherwise produce a high proportion of trivial games. <p> Thus, we developed a class of new games, and a generator for it, to highlight these issues and 25 More details on this type of analysis are found in <ref> [Pel93b] </ref>. 19 provide a test bed for addressing them. In this section we provide an example game actually produced by the generator, and a quick analysis of this game performed by the author. We then draw two conclusions from this example.
References-found: 9

