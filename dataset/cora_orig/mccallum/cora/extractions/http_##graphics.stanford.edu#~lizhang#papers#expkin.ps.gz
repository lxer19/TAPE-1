URL: http://graphics.stanford.edu/~lizhang/papers/expkin.ps.gz
Refering-URL: http://graphics.stanford.edu/~lizhang/interests.html
Root-URL: http://www.cs.stanford.edu
Title: A Practical Evaluation of Kinetic Data Structures  
Author: Julien Basch Leonidas J. Guibas Craig D. Silverstein Li Zhang 
Address: Stanford, CA 94305  
Affiliation: Computer Science Department Stanford University  
Abstract-found: 0
Intro-found: 1
Reference: [Ata85] <author> M. J. Atallah. </author> <title> Some dynamic computational geometry problems. </title> <journal> Comput. Math. Appl., </journal> <volume> 11 </volume> <pages> 1171-1181, </pages> <year> 1985. </year>
Reference-contexts: Kinetic data structures by contrast gain their efficiency by exploiting the continuity or coherence in the way the system state changes. Second, unlike Atallah's dynamic computational geometry framework <ref> [Ata85] </ref>, which was introduced to estimate the maximum number of combinatorial changes in a geometric configuration under predetermined motions in a certain class, the KDS framework is fully on-line and allows each object to change its motion at will, due to interactions with other moving objects, the environment, etc.
Reference: [BDIZ] <author> J. Basch, H. Devarajan, P. Indyk, and L. Zhang. </author> <title> Combinatorial geometry of randomly moving particles. </title> <note> Submitted to SoCG 97. </note>
Reference-contexts: Nevertheless, delaunay is attractive due to its ease of implementation. It should be possible to prove the results we obtained in this paper with a probabilistic analysis. A companion paper <ref> [BDIZ] </ref> gives a number of results in this direction. 6 Conclusion In this paper, we reported the implementation of and experimentation with several kinetic data structures for two archetypical configuration functions: the closest pair and the convex hull for 10 points moving in the plane. <p> For the closest pair, we can maintain the L 1 Delaunay triangulation [CD85] with a kinetic tournament on its edges (a provably efficient solution [Che93], although non-local). These alternative data structures can be evaluated both in the theoretical framework of [BGH97], in a probabilistic setting <ref> [BDIZ] </ref>, and in the experimental framework of this paper. The most fundamental kinetic structure of all|the kinetic tournament|also has two competitors that might be good in practice due to improved locality: a heap [BGR], and a heater [BGR96]; experimentation is needed to compare these alternatives.
Reference: [BGH97] <author> J. Basch, L. J. Guibas, and J. Hershberger. </author> <title> Data structures for mobile data. </title> <note> In SODA, page to appear, </note> <year> 1997. </year>
Reference-contexts: 1 Introduction In many applications of computational geometry to modeling objects and processes in the physical world, the participating objects are in a state of continuous change. Motion is the most ubiquitous kind of continuous transformation but others, such as shape deformation, are also possible. In a recent paper <ref> [BGH97] </ref>, Basch, Guibas, and Hershberger proposed the framework of kinetic data structures (KDSs) as a way to maintain desirable information about the state of a geometric system in continuous motion or change. <p> The purpose of this paper is to study and validate the use of the kinetic data structures proposed in <ref> [BGH97] </ref> in practice. The implementation and experimental evaluation of such structures brings to light several important issues which were not addressed in the original paper. For instance, KDSs implement the continuous maintenance of the function of interest through a discrete-event simulation. <p> The calculation of the event times poses numerical difficulties which raise questions about the integrity of the structure if nearby events should happen out of order, or if the time of an event changes when recalculated. Also, the algorithmic measures for evaluating the quality of KDSs in <ref> [BGH97] </ref> are all worst-case measures, which may not reflect behavior under ordinary motions which occur in practice. It may well be that simple data structures do better in such situations. In order to study these issues, we have compared the KDSs of [BGH97] with simpler variants under various common data/motion distributions, <p> measures for evaluating the quality of KDSs in <ref> [BGH97] </ref> are all worst-case measures, which may not reflect behavior under ordinary motions which occur in practice. It may well be that simple data structures do better in such situations. In order to study these issues, we have compared the KDSs of [BGH97] with simpler variants under various common data/motion distributions, each meant to generate a different amount of fl Support was provided in part by National Science Foundation grant CCR-9623851 and by US Army MURI grant 5-23542-A. 1 change in the combinatorial state of the various data structures. <p> These variants include a KDS for Delaunay triangulation [GMR91]. While these alternative data structures have inferior worst-case performance, there are no results stating how they compare when using less artificial point distributions. From analyzing the data obtained, we conclude that the KDSs of <ref> [BGH97] </ref>, with some simple modifications proposed in this paper, perform remarkably well. Compared to the alternatives, they perform their task using less complicated root-finding primitives and process fewer events in almost all cases studied. This advantage is particularly pronounced when frequent motion changes are involved. <p> This advantage is particularly pronounced when frequent motion changes are involved. The paper is organized as follows. In Section 2 we review the kinetic setting and the kinetic data structures described in <ref> [BGH97] </ref>. In Section 3, we describe a number of alternative data structures for moving points. In section 4, we describe the specific way in which floating point errors affect kinetic data structures and propose some remedies. We present and discuss experimental results in Section 5. <p> Efficiency, as defined above, means that the the worst case ratio C K (k; n)=C F (k; n) is polylogarithmic in n, or at most O (n * ). Note that in this definition of efficiency, as originally proposed in <ref> [BGH97] </ref>, we are comparing two worst-case scenarios, even though these may arise for very different configurations of moving points. The last of the four conditions above, called the locality condition, is important when points change their motion law, something we call a flight plan update. <p> When a point changes motion, all certificates dependent on that point much be updated. The locality condition ensures the efficiency of this operation. 2.2 Three Kinetic Data Structures In this section we present the kinetic data structures developed in <ref> [BGH97] </ref> and implemented in this paper. Maximum: Given n points moving on a vertical line, we wish to maintain the identity of the maximum point. This can be done with a kinetic tournament as follows: Divide the set of points into two (approximately) equal subsets. <p> Note that these events can happen at any (or each) level of the recursive hull construction, but only collinearity events at the top level are external. The KDS described above is not local, since a single point can be a member of many certificates, as described in <ref> [BGH97] </ref>. It is possible to make the KDS local by using a slightly modified list of certificates, but we have chosen to implement only the simpler version described above. <p> There are about quadratically many internal events in the worst case, and each event can be processed by rescheduling O (log n) events. 3 Alternative Data Structures for Moving Points The data structures described in <ref> [BGH97] </ref> are not the only one possible to handle the stated problems for moving points. <p> Besides taking longer to solve than the linear or quadratic tests of the structures of <ref> [BGH97] </ref>, these Delaunay polynomials suffer more from floating point errors (see Section 4). 1 Though it is somewhere between quadratic and cubic. 5 (Iu) x (p) &lt; x (Rightmost (Parents u (p))) (Id) x (p) &lt; x (Rightmost (Parents d (p))) (IId) d (p) &lt; d (Leftmost (Cands (p))) (IIu) u <p> Nevertheless, its simplicity makes it an appealing data structure, particularly if the flight plans are fixed or the number of points is small. 3.4 Modified Closest Pair KDS The closest pair KDS proposed in <ref> [BGH97] </ref> maintains more structure than is necessary. In particular, it keeps an exact linear ordering of the x-projections of the points in order to certify the validity of the cone structure, and events generated by such certificates do not always modify the cone structure (Figure 3.4). <p> The various criteria we considered are summarized in Table 2. The alternative algorithms were chosen to contrast with the kinetic data structures in <ref> [BGH97] </ref>: delaunay is general purpose, while brute-ch is highly non-local. The point distributions were chosen because the size of the static convex hull for these distributions ranges from O (log n) to O (n). <p> This is, once again, because the savings translate entirely to a reduced number of degree 1 equations, which are much less expensive than degree 2 equations. 5.5 Discussion The results above indicate that the kinetic data structures from <ref> [BGH97] </ref> are very competitive with alternative data structures for moving points, but the advantages are not exactly the theoretical advantages discussed in that paper. Locality, though an important theoretical concern, does not seem to be an issue for the distributions we studied, except for brute-ch which is flagrantly nonlocal. <p> For the closest pair, we can maintain the L 1 Delaunay triangulation [CD85] with a kinetic tournament on its edges (a provably efficient solution [Che93], although non-local). These alternative data structures can be evaluated both in the theoretical framework of <ref> [BGH97] </ref>, in a probabilistic setting [BDIZ], and in the experimental framework of this paper. The most fundamental kinetic structure of all|the kinetic tournament|also has two competitors that might be good in practice due to improved locality: a heap [BGR], and a heater [BGR96]; experimentation is needed to compare these alternatives.
Reference: [BGR] <author> J. Basch, L. J. Guibas, and G.D. Ramkumar. </author> <title> Sweeping over lines and line segments with a heap. </title> <note> Submitted to SoCG 97. </note>
Reference-contexts: The most fundamental kinetic structure of all|the kinetic tournament|also has two competitors that might be good in practice due to improved locality: a heap <ref> [BGR] </ref>, and a heater [BGR96]; experimentation is needed to compare these alternatives. Our handling of precision problems is not ideal, and needs theoretical justification. Many open questions remain.
Reference: [BGR96] <author> J. Basch, L.J. Guibas, and G.D. Ramkumar. </author> <title> Reporting red-blue intersections between connected sets of lines segments. </title> <editor> In J. Diaz and M. Serna, editors, </editor> <booktitle> Algorithms | ESA '96, </booktitle> <volume> LNCS 1136, </volume> <pages> pages 302-319, </pages> <month> sep </month> <year> 1996. </year> <month> 11 </month>
Reference-contexts: The most fundamental kinetic structure of all|the kinetic tournament|also has two competitors that might be good in practice due to improved locality: a heap [BGR], and a heater <ref> [BGR96] </ref>; experimentation is needed to compare these alternatives. Our handling of precision problems is not ideal, and needs theoretical justification. Many open questions remain.
Reference: [CD85] <author> L. P. Chew and R. L. Drysdale, III. </author> <title> Voronoi diagrams based on convex distance functions. </title> <booktitle> In Proc. 1st Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 235-244, </pages> <year> 1985. </year>
Reference-contexts: For instance, for the convex hull, it is enough to maintain any triangulation, not just the Delau-nay triangulation. This is desirable since arbitrary triangulations require only degree 2 equations to maintain. For the closest pair, we can maintain the L 1 Delaunay triangulation <ref> [CD85] </ref> with a kinetic tournament on its edges (a provably efficient solution [Che93], although non-local). These alternative data structures can be evaluated both in the theoretical framework of [BGH97], in a probabilistic setting [BDIZ], and in the experimental framework of this paper.
Reference: [Che93] <author> L. P. Chew. </author> <title> Near-quadratic bounds for the L 1 Voronoi diagram of moving points. </title> <booktitle> In Proc. 5th Canad. Conf. Comput. Geom., </booktitle> <pages> pages 364-369, </pages> <address> Waterloo, Canada, </address> <year> 1993. </year>
Reference-contexts: This is desirable since arbitrary triangulations require only degree 2 equations to maintain. For the closest pair, we can maintain the L 1 Delaunay triangulation [CD85] with a kinetic tournament on its edges (a provably efficient solution <ref> [Che93] </ref>, although non-local). These alternative data structures can be evaluated both in the theoretical framework of [BGH97], in a probabilistic setting [BDIZ], and in the experimental framework of this paper.
Reference: [CT92] <author> Y.-J. Chiang and R. Tamassia. </author> <title> Dynamic algorithms in computational geometry. </title> <journal> Proc. IEEE, </journal> <volume> 80(9) </volume> <pages> 1412-1434, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: There are two notable and novel aspects of the kinetic data structure framework. First, while extensive work has been done on dynamic data structures in computational geometry <ref> [CT92] </ref>, this is all focussed on handling insertions/deletions of objects rather than continuous change. Kinetic data structures by contrast gain their efficiency by exploiting the continuity or coherence in the way the system state changes.
Reference: [GMR91] <author> L. Guibas, J. S. B. Mitchell, and T. Roos. </author> <title> Voronoi diagrams of moving points in the plane. </title> <booktitle> In Proc. 17th Internat. Workshop Graph-Theoret. Concepts Comput. Sci., volume 570 of Lecture Notes in Computer Science, </booktitle> <pages> pages 113-125. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: These variants include a KDS for Delaunay triangulation <ref> [GMR91] </ref>. While these alternative data structures have inferior worst-case performance, there are no results stating how they compare when using less artificial point distributions. From analyzing the data obtained, we conclude that the KDSs of [BGH97], with some simple modifications proposed in this paper, perform remarkably well. <p> That is, its set of edges, together with the cocircularity test that certifies their "local Delaunayhood", is a correct certificate structure <ref> [GMR91] </ref>. Because of this property, there is a simple kinetic data structure for the Delaunay triangulation which has no internal events.
Reference: [Gui] <author> L. Guibas. </author> <note> Unpublished. </note>
Reference-contexts: Under this improved definition of efficiency, only a few extremely simple problems have known good algorithms <ref> [Gui] </ref>. No kinetic data structures for convex hull or closest pair has been proved efficient with respect to this measure|this worst-case competitive ratio can be extremely high. Yet, we might hope that with ordinary motions the situation is much better.

References-found: 10

