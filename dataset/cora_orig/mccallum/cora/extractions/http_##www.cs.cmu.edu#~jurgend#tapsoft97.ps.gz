URL: http://www.cs.cmu.edu/~jurgend/tapsoft97.ps.gz
Refering-URL: http://www.cs.cmu.edu/~jurgend/cv.html
Root-URL: 
Email: michael@cs.tu-berlin.de  jurgend@cs.cmu.edu  
Title: Modal Characterization of Weak Bisimulation for Higherorder Processes Extended Abstract  
Author: Michael Baldamus Jurgen Dingel 
Address: Pittsburgh  
Affiliation: Berlin University of Technology  Carnegie Mellon University,  
Abstract: Context bisimulation [12, 1] has become an important notion of behavioural equivalence for higherorder processes. Weak forms of context bisimulation are particularly interesting, because of their high level of abstraction. We present a modal logic for this setting and provide a characterization of a variant of weak context bisimulation on secondorder processes. We show how the logic permits compositional reasoning. In comparison to previous work by Amadio and Dam [2] on the strong case, our modal logic supports derived operators through a complete duality and thus constitutes an appealing extension of HennessyMilner logic.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R.M. Amadio. </author> <title> On the Reduction of CHOCSBisimulation to calculus Bisimulation. </title> <journal> In Concurrency Theory, </journal> <volume> LNCS 715, </volume> <pages> pages 112126. </pages> <publisher> Springer, </publisher> <year> 1993. </year> <booktitle> Proceedings CONCUR. </booktitle>
Reference: [2] <author> R.M. Amadio and M. Dam. </author> <title> Reasoning about Higherorder Processes. </title> <editor> In P.D. Mosses, M. Nielsens, and M.I. Schwartzbach, editors, </editor> <booktitle> Theory and Practice of Software Development, LNCS 915, pages 202216. Springer, 1995. Proceedings TAPSOFT. </booktitle>
Reference-contexts: Not surprisingly, this additional expressive power complicates the theory significantly. Certain higherorder calculi have received continued attention. One of them is Thomsen's Plain CHOCS [15], which features a static treatment of the restriction operator and a bisimulationbased semantics. In <ref> [2] </ref>, Amadio and Dam address the lack of specification formalisms for Plain CHOCS and propose a modal logic which extends HennessyMilner logic and characterizes strong context bisimulation (called CHOCS bisimulation in [2]). Moreover, they present a sound and complete infinitary proof system for the subcalculus without restriction. <p> In <ref> [2] </ref>, Amadio and Dam address the lack of specification formalisms for Plain CHOCS and propose a modal logic which extends HennessyMilner logic and characterizes strong context bisimulation (called CHOCS bisimulation in [2]). Moreover, they present a sound and complete infinitary proof system for the subcalculus without restriction. Strong forms of bisimulation are often too finegrained and, as wellknown from the firstorder setting, weak forms are more useful because they better capture the observable behaviour of processes. <p> However, this higher level of abstraction in general also makes weak notions of bisimulation less tractable. The presence of higherorder processes aggravates this problem. This paper picks up the thread initiated by <ref> [2] </ref>, considers a variant of weak context bisimulation (bisimulation for short), and presents what constitutes, to our knowledge, the first logical characterization of weak context bisimulation. We propose a modal logic that, in contrast to the one used in [2], supports full negation. Another significant difference is of prooftechnical nature. <p> This paper picks up the thread initiated by <ref> [2] </ref>, considers a variant of weak context bisimulation (bisimulation for short), and presents what constitutes, to our knowledge, the first logical characterization of weak context bisimulation. We propose a modal logic that, in contrast to the one used in [2], supports full negation. Another significant difference is of prooftechnical nature. We introduce a new notion of context bisimu-lation, which we call existential bisimulation. The proof of the characterization result rests on the equivalence of bisimulation and existential bisimulation. <p> It is an open question how congruence of analogous approximations in the weak case could be established. Acknowledgment. We would like to thank Rainer Glas for discussions which helped us to find the right formulation of Definition 3.1 (1). 2 Preliminaries We adopt the process calculus used in <ref> [2] </ref> and briefly review its syntax and operational semantics before we define weak transitions and our weak variant of bisimulation. <p> The empty sum represents the process that cannot do anything and is denoted by 0. As in <ref> [15, 2] </ref>, our calculus does not contain any data. Note, however, that they could easily be added. We use abstraction, which we denote by P [u] rather than u.P . <p> Definition 2.1. A binary relation R on P is a (weak late context) bisimulation if P R Q implies: Whenever P ! P 0 then, for some Q 0 , Q b symmetrically. We denote by the union of all bisimulations. This notion differs from the one used in <ref> [2] </ref> only in that the matching transition by Q may be weak. Moreover, this transition must not contain any trailing t move, so is what is called a delay bisimulation [6]. <p> Approximating Existential Bisimulation For the proof of the characterization theorem in <ref> [2] </ref>, Amadio and Dam show that strong bisimulation s can be obtained as the limit of a descending chain of equivalence relations s k where k is a natural number. We will transfer this idea to our setting and also generalize the approximation from natural numbers to ordinals. <p> We use the standard abbreviations: &gt; V In contrast to <ref> [2] </ref>, the logic features the dualities familiar from HennessyMilner logic. We define [b] :hbi: and [] :hi: . Realization The logic allows two kinds of modal judgments. <p> Note that [] is equivalent to Amadio and Dam's implication operator ) in <ref> [2] </ref>. Example 4.1. Consider the following process expressions. <p> The nonstandard cases are once again those situations where a function (al) meets some formula of the form hi . They can be dealt with in practically the same way as we have done it in the successor case. fl The proof of the corresponding result in <ref> [2] </ref> for the strong case hinges on s and s k being congruences. It is important to note that our proof does not rely on this kind of requirement. Finally, we can state and prove the actual characterization. <p> Note that both P 1 P 2 and P 2 exhibit invisible transitions and that this example consequently could not have been expressed in the strong setting used in <ref> [2] </ref>. 6 Conclusion and Further work We have given what constitutes, to our knowledge, the first logical characterization of a weak variant of context bisimulation on secondorder processes. The characterization hinges on a novel notion of observable equivalence on higherorder processes called existential bisimulation.
Reference: [3] <author> M. Baldamus and J. Dingel. </author> <title> Modal Characterization of Weak Bisimulation for Higher order Processes. </title> <type> Report 9627, </type> <institution> Berlin University of Technology, Computer Science Department, </institution> <year> 1996. </year> <title> Retrievable via the Hypatia electronic library. </title>
Reference-contexts: At the same time, an easily proved lemma is is 9 ( 9 * 9 c ) fl , so we have indeed 9 . fl The full proof of Theorem 3.5 is presented in our technical report <ref> [3] </ref>. Approximating Existential Bisimulation For the proof of the characterization theorem in [2], Amadio and Dam show that strong bisimulation s can be obtained as the limit of a descending chain of equivalence relations s k where k is a natural number. <p> Finally, P ORD 9 Q if P 9 Q for every 2 ORD. Proposition 3.7. ORD 9 = 9 . Proof. Similar to the proof of the corresponding approximation result for weak bisim-ulation on CCS in [9]. For details see <ref> [3] </ref>. fl Note that, by the proof of Theorem 3.5, 9 is a congruence because is one [4].
Reference: [4] <author> M. Baldamus and T. Frauenstein. </author> <title> Congruence Proofs for Weak Bisimulation Equivalences on Higherorder Process Calculi. </title> <type> Report 9521, </type> <institution> Berlin University of Technology, Computer Science Department, </institution> <year> 1995. </year>
Reference-contexts: P 0 [R=x] 9 Q 0 [R=x], so P 0 ffi 9 Q 0 , so 9 is a bisimulation, so 9 . The problem is that proving congruence of weak bisimulation on higherorder processes is inherently difficult <ref> [12, 5, 4] </ref>, and even more so in the case of existential bisimulation. To solve this problem we use a variation of a method that was originally developed by Howe to prove congruence of applicative bisimulation in functional computational frameworks [8]. <p> To solve this problem we use a variation of a method that was originally developed by Howe to prove congruence of applicative bisimulation in functional computational frameworks [8]. Howe's method has already been adapted to prove congruence of standard forms of weak bisimulation on !order processes <ref> [5, 4] </ref>. We need to give the following definition: A constructor co has the form f , c?x, c!, , j or -c. Constructors may be applied to families of expressions, co ( e P ), where the result is defined according to the grammar. <p> Proposition 3.7. ORD 9 = 9 . Proof. Similar to the proof of the corresponding approximation result for weak bisim-ulation on CCS in [9]. For details see [3]. fl Note that, by the proof of Theorem 3.5, 9 is a congruence because is one <ref> [4] </ref>. However, it is still an open question whether 9 is a congruence for every . 4 Modal Characterization of Bisimilarity Modal Formulas Properties of process expressions are expressed using modal formulae generated by the grammar below.
Reference: [5] <author> W. Ferreira, M. Hennessy, and A. Jeffrey. </author> <title> A Theory of Weak Bisimulation for Core CML. </title> <booktitle> In Functional Programming, pages 201212. </booktitle> <publisher> ACM Press, </publisher> <year> 1996. </year> <booktitle> Conference proceedings. </booktitle>
Reference-contexts: Such a communication scheme is called late which makes is a late bisimulation. For a conceptual discussion and practical ap plication of this combination, see <ref> [13, 5] </ref>. We do not know whether the results of this paper could be obtained for classically weak and/or nonlate, that is, early forms of bisimulation. 3 Existential Bisimulation We now introduce a new notion of bisimulation on higherorder processes called existential bisimulation. <p> P 0 [R=x] 9 Q 0 [R=x], so P 0 ffi 9 Q 0 , so 9 is a bisimulation, so 9 . The problem is that proving congruence of weak bisimulation on higherorder processes is inherently difficult <ref> [12, 5, 4] </ref>, and even more so in the case of existential bisimulation. To solve this problem we use a variation of a method that was originally developed by Howe to prove congruence of applicative bisimulation in functional computational frameworks [8]. <p> To solve this problem we use a variation of a method that was originally developed by Howe to prove congruence of applicative bisimulation in functional computational frameworks [8]. Howe's method has already been adapted to prove congruence of standard forms of weak bisimulation on !order processes <ref> [5, 4] </ref>. We need to give the following definition: A constructor co has the form f , c?x, c!, , j or -c. Constructors may be applied to families of expressions, co ( e P ), where the result is defined according to the grammar.
Reference: [6] <author> R.J. van Glabeek. </author> <title> The Linear Time Branching Time Spectrum II. </title> <booktitle> In CONCUR, </booktitle> <volume> LNCS 715, </volume> <pages> pages 6681. </pages> <publisher> Springer, </publisher> <year> 1993. </year> <note> Proceedings. </note>
Reference-contexts: We denote by the union of all bisimulations. This notion differs from the one used in [2] only in that the matching transition by Q may be weak. Moreover, this transition must not contain any trailing t move, so is what is called a delay bisimulation <ref> [6] </ref>. Also, considering the derivation of a communication transition, note that the receiver does not know the identity of the process transmitted until the (?!)rule is applied. Such a communication scheme is called late which makes is a late bisimulation.
Reference: [7] <author> M. Hennessy and R. Milner. </author> <title> Algebraic laws for nondeterminism and concurrency. </title> <journal> Journal of the ACM, </journal> <volume> 32:137161, </volume> <year> 1985. </year>
Reference-contexts: 1 Introduction Firstorder process calculi like CCS have long been known as a tractable tool for the description of concurrent processes. Modal (temporal) logic on the other hand has proved itself to be a powerful specification and verification device for such systems. HennessyMilner logic <ref> [7] </ref>, for instance, provides an adequate logical match to CCS, and thus complements its algebraic nature very nicely. However, firstorder process calculi are limited in the sense that they assume a fixed interconnection structure between the processes involved.
Reference: [8] <author> D. Howe. </author> <title> Equality in Lazy Computation Systems. </title> <booktitle> In Logic in Computer Science, pages 198203, 1989. Proceedings LICS. </booktitle>
Reference-contexts: To solve this problem we use a variation of a method that was originally developed by Howe to prove congruence of applicative bisimulation in functional computational frameworks <ref> [8] </ref>. Howe's method has already been adapted to prove congruence of standard forms of weak bisimulation on !order processes [5, 4]. We need to give the following definition: A constructor co has the form f , c?x, c!, , j or -c.
Reference: [9] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <address> PrenticeHall, </address> <year> 1989. </year>
Reference-contexts: Finally, P ORD 9 Q if P 9 Q for every 2 ORD. Proposition 3.7. ORD 9 = 9 . Proof. Similar to the proof of the corresponding approximation result for weak bisim-ulation on CCS in <ref> [9] </ref>. For details see [3]. fl Note that, by the proof of Theorem 3.5, 9 is a congruence because is one [4]. <p> L = Proof. By transfinite induction on , following the lines of the proof of Proposition 10.6 in <ref> [9] </ref>. Only the cases where a function (al) meets some formula of the form hi are new.
Reference: [10] <author> R. Milner, J. Parrow, and D. Walker. </author> <title> A Calculus of Mobile Processes, (Parts I and II). Information and Computation, </title> <address> (100):177, </address> <year> 1992. </year>
Reference-contexts: However, firstorder process calculi are limited in the sense that they assume a fixed interconnection structure between the processes involved. Recently, namepassing and higherorder calculi have been proposed to remedy this obvious deficiency <ref> [10, 15] </ref>. They allow the communication of processes and functions, and thus support a powerful abstraction technique which is similar to the one found in higherorder programming languages and caters for systems with changing interconnection structure. Not surprisingly, this additional expressive power complicates the theory significantly.
Reference: [11] <author> J.C. Mitchell. </author> <title> Type Systems for Programming Languages. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <pages> pages 365458. </pages> <address> NorthHolland, </address> <year> 1990. </year>
Reference-contexts: The latter notion forms the basis of our modal characterization of . In the study of higherorder functional languages such as the typed calculus it proved extremely useful to compare functions by means of logical relations <ref> [11] </ref>. In this setting, two functions are related if whenever they are applied to related arguments they yield related results. From this perspective, existential bisimulation appears to be a hybrid between the standard notion of bisimulation on the one hand and the concept of logical relations on the other.
Reference: [12] <author> D. Sangiorgi. </author> <title> Expressing Mobility in Process Algebras: Firstorder and Higherorder Paradigms. </title> <institution> Cst9993, Department of Computer Science, University of Edinburgh, </institution> <year> 1993. </year>
Reference-contexts: Before we introduce existential bisimulation formally, we would like to point out that an entirely different route to modal logic for higherorder process may be possible by using Sangiorgi's results about the fully abstract translation of higherorder into calculus processes <ref> [12] </ref>. Satisfaction of modal formulas in such a framework would be defined wrt. calculus processes and their transitions. Note, however, that any characterization result obtained using this approach would, therefore, be significantly less direct than ours. <p> P 0 [R=x] 9 Q 0 [R=x], so P 0 ffi 9 Q 0 , so 9 is a bisimulation, so 9 . The problem is that proving congruence of weak bisimulation on higherorder processes is inherently difficult <ref> [12, 5, 4] </ref>, and even more so in the case of existential bisimulation. To solve this problem we use a variation of a method that was originally developed by Howe to prove congruence of applicative bisimulation in functional computational frameworks [8]. <p> The results of this paper rest on the notion of existential bisimulation. There is some hope that this new notion may also be fruitfully applied to other higherorder calculi. The most promising candidates seem to be !order calculi like Sangiorgi's HO <ref> [12] </ref>. In this setting, context bisimulation also serves as the notion of observational equivalence.
Reference: [13] <author> D. Sangiorgi. </author> <title> Bisimulation in Higherorder Calculi. </title> <type> Report RR2508, </type> <institution> INRIASophia Antipolis, </institution> <year> 1995. </year> <note> To appear in Information and Computation. </note>
Reference-contexts: Such a communication scheme is called late which makes is a late bisimulation. For a conceptual discussion and practical ap plication of this combination, see <ref> [13, 5] </ref>. We do not know whether the results of this paper could be obtained for classically weak and/or nonlate, that is, early forms of bisimulation. 3 Existential Bisimulation We now introduce a new notion of bisimulation on higherorder processes called existential bisimulation.
Reference: [14] <author> C. Stirling. </author> <title> Modal Logics for Communicating Systems. </title> <booktitle> Theoretical Computer Science, </booktitle> <address> (49):311347, </address> <year> 1987. </year>
Reference-contexts: Additionally, the rules for parallel composition seem to require a congruence property our setting does not offer. Alternatively, we tried to find a complete axiomatization along the lines of <ref> [14] </ref>. However, a straightforward adaption of the results in [14] is encumbered by the more complex modalities. The results of this paper rest on the notion of existential bisimulation. There is some hope that this new notion may also be fruitfully applied to other higherorder calculi. <p> Additionally, the rules for parallel composition seem to require a congruence property our setting does not offer. Alternatively, we tried to find a complete axiomatization along the lines of <ref> [14] </ref>. However, a straightforward adaption of the results in [14] is encumbered by the more complex modalities. The results of this paper rest on the notion of existential bisimulation. There is some hope that this new notion may also be fruitfully applied to other higherorder calculi. The most promising candidates seem to be !order calculi like Sangiorgi's HO [12].
Reference: [15] <author> B. Thomsen. </author> <title> Plain CHOCS A Second Generation Calculus for Higherorder Processes. </title> <journal> Acta Informatica, </journal> <volume> (30):159, </volume> <year> 1993. </year>
Reference-contexts: However, firstorder process calculi are limited in the sense that they assume a fixed interconnection structure between the processes involved. Recently, namepassing and higherorder calculi have been proposed to remedy this obvious deficiency <ref> [10, 15] </ref>. They allow the communication of processes and functions, and thus support a powerful abstraction technique which is similar to the one found in higherorder programming languages and caters for systems with changing interconnection structure. Not surprisingly, this additional expressive power complicates the theory significantly. <p> Not surprisingly, this additional expressive power complicates the theory significantly. Certain higherorder calculi have received continued attention. One of them is Thomsen's Plain CHOCS <ref> [15] </ref>, which features a static treatment of the restriction operator and a bisimulationbased semantics. In [2], Amadio and Dam address the lack of specification formalisms for Plain CHOCS and propose a modal logic which extends HennessyMilner logic and characterizes strong context bisimulation (called CHOCS bisimulation in [2]). <p> The empty sum represents the process that cannot do anything and is denoted by 0. As in <ref> [15, 2] </ref>, our calculus does not contain any data. Note, however, that they could easily be added. We use abstraction, which we denote by P [u] rather than u.P .
References-found: 15

