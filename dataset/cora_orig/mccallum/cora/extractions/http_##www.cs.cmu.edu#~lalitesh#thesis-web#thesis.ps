URL: http://www.cs.cmu.edu/~lalitesh/thesis-web/thesis.ps
Refering-URL: http://www.cs.cmu.edu/~lalitesh/synergy.html
Root-URL: 
Title: Synergy A Language and Framework for Robot Design  
Author: By Lalitesh K Katragadda 
Degree: Submitted in partial fulfillment of the requirements for the degree of Doctor of Philosophy in  
Date: December 1997  
Address: Pittsburgh, PA 15213  
Affiliation: Robotics  The Robotics Institute Carnegie Mellon University  
Abstract-found: 0
Intro-found: 1
Reference: <institution> Design Environment 6.7 </institution>
Reference: [Hobbs95] <author> Hobbs, J., </author> <title> Viper: A software environment for designing lunar rovers, </title> <type> internal report, </type> <address> Matra-Marconi, London, </address> <year> 1995 </year>
Reference-contexts: Environments for Robot Design 2.1 A robot design environment is software that facilitates the designer to compose, evaluate, optimize, and integrate hardware and software into functional robots. Application Specific Design Software 2.1.1 Current developments in robot design software exhibit some properties of the ideal. One example is Viper <ref> [Hobbs95] </ref>, an automated wheeled rover configuration environment for planetary explorers. This software sizes wheels and motors given payload and soil terrain conditions. It automatically generates simulations, driving off the lander, generating power profiles for driving and steering. Configuration decisions like switching from four to six wheels are triggered by heuristics.
Reference: [Farritor96] <author> Farritor,S., </author> <title> Dubowsky,S.,On the design of rapidly deployable field robotic systems, </title> <booktitle> Proceedings, ASME design engineering conference, </booktitle> <address> Aug 1996, CA </address>
Reference-contexts: However, the specific nature of such existing environments, significant use of custom analysis and simulation, high costs ($billions), millions of man years of history and precludes adaptation of the underlying software or techniques. Example environments include those used for cars and planes <ref> [Farritor96] </ref>. A new generation of resource effective design environments is beginning to emerge. A spacecraft project design center [JPL97] allows design teams to specify problems, investigate solutions, configure, simulate and generate development programs of entire spacecraft missions in a few days. <p> Some applications used evolution to sift through vast design spaces and find optimal, innovative configurations to perform tasks of locomotion. These include modular evolution of geometric configurations and gaits of mobile robots to traverse a specified terrain <ref> [Farritor96] </ref>, and evolution of complex neural net controlled mechanisms [Sims94]. This software has not been used to design real world robots due to their inability to represent robots completely and restriction of the component set that can be used in the design software.
Reference: [Stewart93] <author> Stewart,D.B., Volpe,R.A., Khosla,P.K., </author> <title> Design of Dynamically Reconfigurable Real-time Software using Port-Based Objects, </title> <institution> Robotics Institute, Carnegie Mellon University, CMU-RI-TR-93-11 </institution>
Reference-contexts: Extensive application of manipulators has motivated extensive research into design software. One such environment assists designers of reconfigurable modular manipulator from configuration to functioning prototypes. This environment generates design from a task description [Morrow95], composes task control software from an iconic description (Onika [Gertz93] and auto-configures control code <ref> [Stewart93] </ref> to shield Background 10 the designer from rewriting code to adapt to changes in manipulator configuration. This environment enables a working prototype in less than a day after task specification.
Reference: [Gertz93] <author> Gertz,M.W., Khosla,.K.,Onika: </author> <title> A Multilevel Human-Machine Interface for Real-Time Sensor-Based Robotics Systems, </title> <booktitle> Proceedings, SPACE 1994 </booktitle>
Reference-contexts: Extensive application of manipulators has motivated extensive research into design software. One such environment assists designers of reconfigurable modular manipulator from configuration to functioning prototypes. This environment generates design from a task description [Morrow95], composes task control software from an iconic description (Onika <ref> [Gertz93] </ref> and auto-configures control code [Stewart93] to shield Background 10 the designer from rewriting code to adapt to changes in manipulator configuration. This environment enables a working prototype in less than a day after task specification.
Reference: [Morrow95] <author> Morrow,J.D., Khosla,P.K., </author> <title> Sensorimotor skills for Robotic assembly skills, </title> <booktitle> IEEE conference on Robotics and Automation, </booktitle> <address> ICRA, </address> <year> 1995 </year>
Reference-contexts: Extensive application of manipulators has motivated extensive research into design software. One such environment assists designers of reconfigurable modular manipulator from configuration to functioning prototypes. This environment generates design from a task description <ref> [Morrow95] </ref>, composes task control software from an iconic description (Onika [Gertz93] and auto-configures control code [Stewart93] to shield Background 10 the designer from rewriting code to adapt to changes in manipulator configuration. This environment enables a working prototype in less than a day after task specification.
Reference: [Taylor92] <author> Taylor,M., </author> <title> Coverdale on Management, </title> <publisher> Butterworth-Heinemann, Oxford, </publisher> <address> England, </address> <year> 1992 </year>
Reference: [Kelly95] <author> Kelly,A., </author> <title> An Intelligent Predictive Control Approach to the High Speed Cross Country Autonomous Navigation Problem, </title> <type> Ph.D. Thesis, </type> <institution> Robotics Institute, </institution> <address> CMU, Pittsburgh, </address> <month> May </month> <year> 1995 </year>
Reference-contexts: Such implementations are created for sizing component parameters, tracking progress and making decisions. Extensive research is emerging to formalize and parameterize robot functionalities like navigation <ref> [Kelly95] </ref>, locomotion [Apostol97], system engineering [Coulter94] and machine elements [Kannapan89]. The existing design software is unable to use this research without re-coding it; in addition design environments for robots are usually custom developed, slowing down the design team, inhibiting transfer and reuse of expertise.
Reference: [Coulter94] <author> Coulter, </author> <title> R.C., A Systems Engineering Approach to Electro-Mechanical Reconfiguration for High Mobility Autonomy, </title> <type> Technical Report, </type> <institution> Robotics Institute, Carnegie Mellon University, CMU-RI-TR-94-27, </institution> <year> 1994 </year>
Reference-contexts: Such implementations are created for sizing component parameters, tracking progress and making decisions. Extensive research is emerging to formalize and parameterize robot functionalities like navigation [Kelly95], locomotion [Apostol97], system engineering <ref> [Coulter94] </ref> and machine elements [Kannapan89]. The existing design software is unable to use this research without re-coding it; in addition design environments for robots are usually custom developed, slowing down the design team, inhibiting transfer and reuse of expertise.
Reference: [Apostol97] <author> Apostolopoulos,D., </author> <title> Analytic Configuration of Wheeled Robotic Locomotion, </title> <type> Ph.D. Thesis, </type> <institution> 1997, Robotics Institute, Carnegie Mellon </institution>
Reference-contexts: Such implementations are created for sizing component parameters, tracking progress and making decisions. Extensive research is emerging to formalize and parameterize robot functionalities like navigation [Kelly95], locomotion <ref> [Apostol97] </ref>, system engineering [Coulter94] and machine elements [Kannapan89]. The existing design software is unable to use this research without re-coding it; in addition design environments for robots are usually custom developed, slowing down the design team, inhibiting transfer and reuse of expertise.
Reference: [Kannapan87] <author> Kannapan,S.M., Marshek,K.M., </author> <title> A Parametric Approach to Machine and Machine Element Design, </title> <type> Technical Report, </type> <institution> Mechanical Systems and Design, University of Texas at Austin, </institution> <note> 198, 1987 References 74 </note>
Reference: [Kannapan89] <author> Kannapan,S.M., Marshek,K.M., </author> <title> An Algebraic and Predicate Logic Approach to Representation and Reasoning in Machine Design, </title> <type> Technical Report, </type> <institution> Mechanical Systems and Design, University of Texas at Austin, </institution> <month> 212, </month> <year> 1989 </year>
Reference-contexts: Such implementations are created for sizing component parameters, tracking progress and making decisions. Extensive research is emerging to formalize and parameterize robot functionalities like navigation [Kelly95], locomotion [Apostol97], system engineering [Coulter94] and machine elements <ref> [Kannapan89] </ref>. The existing design software is unable to use this research without re-coding it; in addition design environments for robots are usually custom developed, slowing down the design team, inhibiting transfer and reuse of expertise.
Reference: [JPL97] <institution> Jet Propulsion Laboratory, Project Design Center, </institution> <year> 1997, </year> <month> pdc.jpl.nasa.gov </month>
Reference-contexts: Example environments include those used for cars and planes [Farritor96]. A new generation of resource effective design environments is beginning to emerge. A spacecraft project design center <ref> [JPL97] </ref> allows design teams to specify problems, investigate solutions, configure, simulate and generate development programs of entire spacecraft missions in a few days. Such effectiveness is made possible by drawing on NASAs extensive aerospace database, a well defined design process and integrated software that makes use of it.
Reference: [Excel95] <institution> Microsoft Corporation, </institution> <note> Excel for Windows 95, Version 7.0, www.microsoft.com/products/business.htm,1995 </note>
Reference: [MSProject95] <author> Microsoft Corporation, </author> <title> Microsoft Project for Windows 95, </title> <note> Version 4.1, www.microsoft.com/products/business.htm, 1995 </note>
Reference-contexts: However, this environment can be fully used only in a narrow domain of robots, namely rigid linked, modular manipulators with predefined interfaces. General Robot Design Software 2.1.2 The design environments for most robots are assembled from CAD packages, simulators, spreadsheets [Excel95][Wolfram97], schedulers <ref> [MSProject95] </ref>, and compiled languages [Prata92]. Such implementations are created for sizing component parameters, tracking progress and making decisions. Extensive research is emerging to formalize and parameterize robot functionalities like navigation [Kelly95], locomotion [Apostol97], system engineering [Coulter94] and machine elements [Kannapan89].
Reference: [Wolfram97] <institution> Wolfram Research Inc., </institution> <note> Mathematica 3.0 Professional Version, www.wri.com, 1997 </note>
Reference: [Prata92] <author> Prata,S., </author> <title> The Waite groups C++ Primer Plus, </title> <publisher> Galgotia Publications, </publisher> <address> New Delhi, India, </address> <booktitle> 1992 VLSI design tools 6.7.1 </booktitle>
Reference-contexts: However, this environment can be fully used only in a narrow domain of robots, namely rigid linked, modular manipulators with predefined interfaces. General Robot Design Software 2.1.2 The design environments for most robots are assembled from CAD packages, simulators, spreadsheets [Excel95][Wolfram97], schedulers [MSProject95], and compiled languages <ref> [Prata92] </ref>. Such implementations are created for sizing component parameters, tracking progress and making decisions. Extensive research is emerging to formalize and parameterize robot functionalities like navigation [Kelly95], locomotion [Apostol97], system engineering [Coulter94] and machine elements [Kannapan89].
Reference: [Boddu95] <author> Boddu,J., </author> <title> UltraSparc development cycle, </title> <type> internal report, </type> <institution> Sun Microsystems, Mountain View, </institution> <year> 1995 </year>
Reference-contexts: VLSI Chip Design 2.1.3.1 Eighteen months from its concept, the UltraSparc, a 166 MHZ, 3.7 million transistor was released on its second prototype iteration, where its first iteration had booted up UNIX on the first attempt <ref> [Boddu95] </ref>. These remarkable results are due to advanced design software. Using this software, VLSI chip designers verify their concepts using block [SES94] and architectural simulators [SUN94]. The chip functions are then described in a high level language - Verilog [CadLang94] or VHDL.
Reference: [SES94] <author> Scientific Engineering Solutions Inc., </author> <title> Modules for functional block simulation, </title> <address> San Jose, </address> <year> 1994 </year>
Reference-contexts: These remarkable results are due to advanced design software. Using this software, VLSI chip designers verify their concepts using block <ref> [SES94] </ref> and architectural simulators [SUN94]. The chip functions are then described in a high level language - Verilog [CadLang94] or VHDL. Simulators [CadSim94] validate and optimize the functionality, while verifying constraints [ViewLogic94] for timing delay, heat, etc.
Reference: [SUN94] <author> Sun Microsystems, </author> <title> SAS (Sparc Architectural Simulator), </title> <address> Mountain View, </address> <year> 1994 </year>
Reference-contexts: These remarkable results are due to advanced design software. Using this software, VLSI chip designers verify their concepts using block [SES94] and architectural simulators <ref> [SUN94] </ref>. The chip functions are then described in a high level language - Verilog [CadLang94] or VHDL. Simulators [CadSim94] validate and optimize the functionality, while verifying constraints [ViewLogic94] for timing delay, heat, etc.
Reference: [CadLang94] <institution> Cadence Design Systems Inc., </institution> <month> Verilog-XL, </month> <title> language for VLSI design, </title> <address> San Jose, </address> <year> 1994 </year>
Reference-contexts: These remarkable results are due to advanced design software. Using this software, VLSI chip designers verify their concepts using block [SES94] and architectural simulators [SUN94]. The chip functions are then described in a high level language - Verilog <ref> [CadLang94] </ref> or VHDL. Simulators [CadSim94] validate and optimize the functionality, while verifying constraints [ViewLogic94] for timing delay, heat, etc. A synthesizer [Synopsis94] generates a net-list which is then transformed into chip design by a layout tool and manufacturer-specific [TI94] rule databases.
Reference: [CadSim94] <author> Cadence Design Systems Inc., </author> <title> Verilog static analysis and dynamic simulators, </title> <address> San Jose, </address> <year> 1994 </year>
Reference-contexts: These remarkable results are due to advanced design software. Using this software, VLSI chip designers verify their concepts using block [SES94] and architectural simulators [SUN94]. The chip functions are then described in a high level language - Verilog [CadLang94] or VHDL. Simulators <ref> [CadSim94] </ref> validate and optimize the functionality, while verifying constraints [ViewLogic94] for timing delay, heat, etc. A synthesizer [Synopsis94] generates a net-list which is then transformed into chip design by a layout tool and manufacturer-specific [TI94] rule databases.
Reference: [Synopsis94] <author> Synopsis Inc., </author> <title> Synthesizer for VLSI net-list generation, </title> <address> San Jose, </address> <year> 1994 </year>
Reference-contexts: The chip functions are then described in a high level language - Verilog [CadLang94] or VHDL. Simulators [CadSim94] validate and optimize the functionality, while verifying constraints [ViewLogic94] for timing delay, heat, etc. A synthesizer <ref> [Synopsis94] </ref> generates a net-list which is then transformed into chip design by a layout tool and manufacturer-specific [TI94] rule databases. The resulting prototype is tested for functionality by automated test software [Sunrise94], benchmarked for performance, functionality and iterated, usually once.
Reference: [ViewLogic94] <author> ViewLogic Inc., </author> <title> Motive - timing analysis tool, </title> <address> San Jose, </address> <year> 1994 </year>
Reference-contexts: Using this software, VLSI chip designers verify their concepts using block [SES94] and architectural simulators [SUN94]. The chip functions are then described in a high level language - Verilog [CadLang94] or VHDL. Simulators [CadSim94] validate and optimize the functionality, while verifying constraints <ref> [ViewLogic94] </ref> for timing delay, heat, etc. A synthesizer [Synopsis94] generates a net-list which is then transformed into chip design by a layout tool and manufacturer-specific [TI94] rule databases. The resulting prototype is tested for functionality by automated test software [Sunrise94], benchmarked for performance, functionality and iterated, usually once.
Reference: [TI94] <author> Texas Instruments, </author> <title> Chip manufacturing support & software (static Design Rule Checking), </title> <address> Houston, </address> <year> 1994 </year>
Reference-contexts: Simulators [CadSim94] validate and optimize the functionality, while verifying constraints [ViewLogic94] for timing delay, heat, etc. A synthesizer [Synopsis94] generates a net-list which is then transformed into chip design by a layout tool and manufacturer-specific <ref> [TI94] </ref> rule databases. The resulting prototype is tested for functionality by automated test software [Sunrise94], benchmarked for performance, functionality and iterated, usually once. VLSI chips differ from robots significantly by being mostly uni-dimensional in electronics and being composed of a small set of similar sized components.
Reference: [Sunrise94] <author> Sunrise Inc., </author> <title> ATPG (Automatic Test Pattern Generator), San Jose, 1994 Language to Represent Robot Design 6.8 </title>
Reference-contexts: Simulators [CadSim94] validate and optimize the functionality, while verifying constraints [ViewLogic94] for timing delay, heat, etc. A synthesizer [Synopsis94] generates a net-list which is then transformed into chip design by a layout tool and manufacturer-specific [TI94] rule databases. The resulting prototype is tested for functionality by automated test software <ref> [Sunrise94] </ref>, benchmarked for performance, functionality and iterated, usually once. VLSI chips differ from robots significantly by being mostly uni-dimensional in electronics and being composed of a small set of similar sized components.
Reference: [PTC97] <institution> Parametric Technology Corporation, </institution> <note> Pro/ENGINEER Release 18.0, www.ptc.com, 1997 </note>
Reference-contexts: Design theory suggests several facets of representing complex machines like robots, and methodology for using such representations to facilitate problem solving. Current Robot Design Languages 2.2.1 Roboticists have traditionally made use of existing machine representation languages for designing robots. Solid model CAD (e.g. ProE <ref> [PTC97] </ref>, IDEAS [SDRC97]) software is commonly used to design the mechanism. These designs are represented as an assembly of parametric models with embedded manufacturing and material information. PCB CAD layout [PADS97] tools are used to design the electronics and interconnections.
Reference: [SDRC97] <institution> Structural Dynamics Research Corporation, I-DEAS Master Series 5, </institution> <year> 1997, </year> <note> www.sdrc.com </note>
Reference-contexts: Design theory suggests several facets of representing complex machines like robots, and methodology for using such representations to facilitate problem solving. Current Robot Design Languages 2.2.1 Roboticists have traditionally made use of existing machine representation languages for designing robots. Solid model CAD (e.g. ProE [PTC97], IDEAS <ref> [SDRC97] </ref>) software is commonly used to design the mechanism. These designs are represented as an assembly of parametric models with embedded manufacturing and material information. PCB CAD layout [PADS97] tools are used to design the electronics and interconnections. Spreadsheets are used to capture parametric relationships and track the design.
Reference: [Dassault97] <institution> Dassault Systems, CATIA CADAM, </institution> <note> Version 4, www.catia.com, 1997 </note>
Reference: [Autodesk97] <author> Autodesk Inc., </author> <note> AutoCAD Release 14, www.autodesk.com, 1997 </note>
Reference: [PADS97] <institution> PowerPCB - PCB Layout and autorouting software, </institution> <note> www.pads.com, 1997 </note>
Reference-contexts: Solid model CAD (e.g. ProE [PTC97], IDEAS [SDRC97]) software is commonly used to design the mechanism. These designs are represented as an assembly of parametric models with embedded manufacturing and material information. PCB CAD layout <ref> [PADS97] </ref> tools are used to design the electronics and interconnections. Spreadsheets are used to capture parametric relationships and track the design. Simulation software extends the CAD representations by querying the designer for additional information it needs; e.g.
Reference: [SubramaniE93] <author> Subrahmanian,E., </author> <title> Shared Memory in Design: Theory and Practice, </title> <type> Technical Report, </type> <institution> Carnegie Mellon University, EDRC 05-72-93, </institution> <year> 1993 </year>
Reference: [Schaefer84] <author> Schaefer,M.J., Rehak,D.R., Fenves,S.J., </author> <title> Introduction to Relational Databases using Structural Engineering examples, </title> <journal> Journal of Technical topics in Civil Engineering, ASCE, </journal> <volume> volume 110, no. 1, </volume> <pages> pp. 1-18, </pages> <note> May 1984 References 75 </note>
Reference: [Craig88] <editor> Craig,J.J., </editor> <booktitle> Issues in the design of Off-line programming systems, International symposium of Robotics Research, </booktitle> <publisher> MIT Press, </publisher> <year> 1988 </year>
Reference: [Rinderle87] <author> Rinderle,J.R., </author> <title> Function and Form Relationships: A Basis for Preliminary Design, </title> <booktitle> NSF workshop on Design Process, </booktitle> <address> Waldron, </address> <year> 1987 </year>
Reference: [Cutkosky89] <author> Cutkosky,M.R., Brown,D.R., Tenenbaum,J.M., </author> <title> Extending Concurrent Product and Process Design toward Earlier Design Stages, Concurrent Product and Process design, </title> <journal> ASME, DE, </journal> <volume> volume 21, PED-vol. 36, </volume> <year> 1989 </year>
Reference: [Hardwick89] <author> Hardwick,M., Spooner,D.L., </author> <title> The ROSE Data Manager: Using Object Technology to Support Interactive Engineering Applications, </title> <journal> IEEE transactions on knowledge and data engineering, </journal> <volume> Volume 1, Number 2, </volume> <month> June, </month> <year> 1989 </year>
Reference: [Serrano87] <author> Serrano,D., Gossard,D., </author> <title> Constraint Management in Conceptual Design, </title> <booktitle> 2nd International Conference of the applications of Artificial Intelligence in Engineering, </booktitle> <address> Boston, </address> <month> August, </month> <year> 1987 </year>
Reference: [Pressman] <author> Pressman,R.S., </author> <title> Software Engineering, a practitioners approach, 3rd Edition, </title> <publisher> McGraw-Hill International Editions, </publisher> <address> New York </address>
Reference: [DeMarco79] <author> DeMarco,T., </author> <title> Structured Analysis and System Specification, </title> <publisher> Prentice Hall, </publisher> <year> 1979 </year>
Reference: [Coad86] <author> Coad,P., Yourdon,E., </author> <title> Object-Oriented Analysis, </title> <address> Addision-Wesley, </address> <year> 1986 </year>
Reference: [Dahl72] <author> Dahl,O., Dijkstra,E., Hoare,C., </author> <title> Structured Programming, </title> <publisher> Academic Press, </publisher> <year> 1972 </year>
Reference: [Booch86] <author> Booch,G., </author> <title> Object Oriented Development, </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> vol. SE-12, no. 2, </volume> <pages> pp 211-221, </pages> <month> Feb </month> <year> 1986 </year>
Reference: [Tremblay76] <author> Tremblay,J.P., Soreson,P.G., </author> <title> An Introduction to Data Structures with Applications, </title> <publisher> McGraw-Hill, </publisher> <year> 1976 </year>
Reference: [Newell62] <author> Newell,A., </author> <title> Some problems of the basic organization in problem solving programs, </title> <booktitle> Proceedings 2nd conference on Self-Organizing Systems, </booktitle> <publisher> Spartan Books, </publisher> <year> 1962 </year>
Reference: [Craig93] <author> Craig,I.D., </author> <title> A new interpretation of the Blackboard Architecture, </title> <type> Research Report 254, </type> <institution> Department of Computer Science, University of Warwick, UK, </institution> <year> 1993 </year>
Reference: [Petrie97] <institution> Petrie,C., ProcessLink Coordination of Distributed Engineering, Center for Design Research, cdr.stanford.edu/ProcessLink/, Stanford, </institution> <year> 1997 </year>
Reference-contexts: Extensions (e.g. Craig) of this metaphor allow non-traditional behavior of agents like self-scheduling and information deletion. Examples of its use include SHARE <ref> [Petrie97] </ref> and [Baya97] which allow distributed teams of designers and software agents to co-operatively design complex systems. These frameworks have not been implemented for robot design problems and most implementations are structured for human agents to be the primary sources of knowledge and design.
Reference: [Baya97] <author> Baya,V., Baudin,C., Das,A., Maboqunje,A., DEDAL, </author> <title> Using device models to Facilitate Retrieval and Indexing of Multimedia Design Information, </title> <institution> Center for Design Research, cdr.stanford.edu/GCDK/dedal/, Stanford, </institution> <year> 1997 </year>
Reference-contexts: Extensions (e.g. Craig) of this metaphor allow non-traditional behavior of agents like self-scheduling and information deletion. Examples of its use include SHARE [Petrie97] and <ref> [Baya97] </ref> which allow distributed teams of designers and software agents to co-operatively design complex systems. These frameworks have not been implemented for robot design problems and most implementations are structured for human agents to be the primary sources of knowledge and design.
Reference: [Atkinson91] <author> Atkinson,C., </author> <title> Object-Oriented Reuse, Concurrency and Distribution; An ADA-based approach, </title> <publisher> ACM press, </publisher> <address> Addison-Wesely, New York, NY, </address> <year> 1991 </year>
Reference: [Cargill92] <author> Cargill,T., </author> <title> C++ Programming Style, </title> <publisher> Addison Wesley, </publisher> <address> Reading, Massachusetts, </address> <note> 1992 References 76 Robot Simulation 6.9 </note>
Reference: [Deneb97] <author> Deneb Robotics Inc., </author> <title> ULTRAGRIP - The simulation and analysis tool for a variety of Robotic applications, </title> <note> www.deneb.com, 1997 </note>
Reference-contexts: Spreadsheets are used to capture parametric relationships and track the design. Simulation software extends the CAD representations by querying the designer for additional information it needs; e.g. Finite Element Analysis modules [Algor97] asks for structural boundary conditions, Telegrip <ref> [Deneb97] </ref> has facilities to incorporate geometric environments, information on sensing and control. However this information is not readily visible, accessible and usable by designers and other software. Although, many robot CAD designs exist, they do not embed robot/component functionality, rendering them ineffective for reuse in robot development.
Reference: [RobCad] <institution> RobCad robot simulation and design package, Israel, </institution> <year> 1996 </year>
Reference-contexts: Background 13 Preliminary Robot Simulations 2.3.1 General mechanical modeling and simulation environments like TeleGrip and RobCad <ref> [RobCad] </ref> are often used to generate the first visual look at robot operation. They sometimes incorporate mechanical modeling and closing sense-plan-actuation loops. Capabilities to simulate physical collision, contact, and friction transitions are not present.
Reference: [SILMA89] <author> SILMA Inc., </author> <note> The CimStation Users Manual, Version 4.0, Sunnyvale, </note> <year> 1989 </year>
Reference-contexts: There is a lack of simulators that can predict the performance of a robot in without significant custom work for a particular design. Static analysis tools enable detailed understanding of the robot components at selected performance points in dimensions like material stress, EMF fields and thermal loads. Limited simulation <ref> [SILMA89] </ref> of robots with well defined structure (like manipulators) has been automated. There is no software, static or dynamic to generate a comprehensive robot simulation from its description.
Reference: [Naher93] <author> Naher,S., </author> <title> LEDA (Library of Efficient Data types & Algorithms) Version 3.5, </title> <institution> www.mpi-sb.mpg.de/LEDA/, Max Planck Institute for Information, </institution> <year> 1997 </year>
Reference-contexts: There is void in dynamic robot simulators in many dimensions like perception and thermal. dynamic Custom Robot Simulations 2.3.2 Most robot designers create custom simulations to understand behavior that is not modeled by existing simulators. These simulations are hand coded using existing libraries <ref> [Naher93] </ref> and graphics [SENSE8-93] utilities. Usually these simulations are not comprehensive, leading to consistent appearance of unanticipated behaviors in the robot prototype. Ambler:[Thomas90] This simulator modeled the perceive, think, act cycle of walking behavior for the Ambler, Mars walker.
Reference: [Keffer94] <author> Keffer,T., </author> <title> Tools.h++ Introduction and Reference Manual, </title> <type> Version 6, </type> <institution> Rogue Wave Software Inc., Corvallis, Oregon, </institution> <year> 1994 </year>
Reference: [SENSE8-93] <author> SENSE8 Corporation, </author> <title> World ToolKit Reference Manual, Version 2.0, </title> <address> Sausalito, CA, </address> <year> 1993 </year>
Reference-contexts: There is void in dynamic robot simulators in many dimensions like perception and thermal. dynamic Custom Robot Simulations 2.3.2 Most robot designers create custom simulations to understand behavior that is not modeled by existing simulators. These simulations are hand coded using existing libraries [Naher93] and graphics <ref> [SENSE8-93] </ref> utilities. Usually these simulations are not comprehensive, leading to consistent appearance of unanticipated behaviors in the robot prototype. Ambler:[Thomas90] This simulator modeled the perceive, think, act cycle of walking behavior for the Ambler, Mars walker.
Reference: [Keller92] <author> Keller,P., </author> <title> A toolkit for kinematic and graphic simulation of mobile robots on natural, fractal terrain, </title> <type> tech report, </type> <institution> Field Robotics Center, Robotics Institute, Carnegie Mellon University,1992 </institution>
Reference: [Thomas90] <author> Thomas,H., Wettergreen,D., Thorpe,C., and Hoffman,R., </author> <title> Simulation of the Ambler Environment, </title> <booktitle> in proceedings of the 23rd Pittsburgh conference on modeling and simulation, </booktitle> <address> Pittsburgh, </address> <month> May </month> <year> 1990 </year>
Reference: [Hoffman94] <author> Hoffman,R., and Simmons,R., </author> <title> Simulation of Autonomous Robotic Excavation, </title> <booktitle> in Proceedings of the ASCE Specialty Conference on Robotics for Challenging Environments, </booktitle> <address> Albuquerque, New Mexico, </address> <month> February </month> <year> 1994 </year>
Reference-contexts: Dante-II, a volcano walker relied on a kinematic stick simulation [Katragadda94] of walking behavior to envision walking strategies and select between two configurations. Autonomous excavation research used a kinematic simulator <ref> [Hoffman94] </ref> incorporating true 3D geometric models of terrain integrated with a laser scanner model, visualization and testing control software. These simulators have proved useful and even vital in the robot development process.
Reference: [Katragadda95] <author> Katragadda,L.K., </author> <title> A constraint based Dante walking simulator for evaluating walking strategies, and configurations, </title> <type> TRIWG Report, </type> <institution> Robotics Institute, Carnegie Mellon University, </institution> <year> 1995 </year>
Reference-contexts: A user controlled control module closes the actuation loop, generating visuals, and metrics of expected performance. This simulator is used for designing control strategies for desired tasks, training operators, and marketing. Planetary robots like the unmanned ground vehicle [Hebert96], Ratler <ref> [Katragadda95] </ref> and Nomad [Murphy97] model four wheeled rovers as a single rigid body to generate metrics of expected behavior, for use in local navigation loops, evaluating suitability of the sensor configuration and optimizing parameters for the same.
Reference: [Katragadda94] <author> Katragadda,L.K., Kelly,A., Hebert,M., </author> <title> Autonomous navigation of a lunar relevant rover using predictive simulation, and active stereo perception, </title> <type> TRIWG annual report, </type> <institution> Carnegie Mellon University, </institution> <month> Sep </month> <year> 1994 </year>
Reference-contexts: Dante-II, a volcano walker relied on a kinematic stick simulation <ref> [Katragadda94] </ref> of walking behavior to envision walking strategies and select between two configurations. Autonomous excavation research used a kinematic simulator [Hoffman94] incorporating true 3D geometric models of terrain integrated with a laser scanner model, visualization and testing control software.
Reference: [Kuester95] <author> Kuester,S., Lane,J.C., </author> <title> Interface Design Issues of the Ranger Telerobotics Flight Experiment, </title> <booktitle> SAE 25th International Conference on Environmental Systems, </booktitle> <address> San Diego, </address> <month> July </month> <year> 1995 </year>
Reference: [Piguet95] <author> Piguet, L., Fong, T., Hine, B., Hontalas, P., and Nygren, E., VEVI: </author> <title> A Virtual Reality Tool for Robotic Planetary Explorations, Virtual Reality World, </title> <publisher> Stuttgart, </publisher> <address> Germany, </address> <month> Feb </month> <year> 1995 </year>
Reference-contexts: They sometimes incorporate mechanical modeling and closing sense-plan-actuation loops. Capabilities to simulate physical collision, contact, and friction transitions are not present. Simulators like Vevi <ref> [Piguet95] </ref> can be used to quickly simulate robot kinematics and also enhance remote teleoperation of by providing awareness of robot and surroundings, for control of diverse tasks like underwater exploration of Antarctica. These simulators however do not completely model all physical interactions of the robot.
Reference: [Hebert96] <author> Hebert,M., Thorpe,C., Stentz,T., </author> <title> Intelligent Unmanned Ground Vehicles: </title> <publisher> Research at Carnegie Mellon University, Kluwer Academic Publishers, </publisher> <year> 1996 </year>
Reference-contexts: A user controlled control module closes the actuation loop, generating visuals, and metrics of expected performance. This simulator is used for designing control strategies for desired tasks, training operators, and marketing. Planetary robots like the unmanned ground vehicle <ref> [Hebert96] </ref>, Ratler [Katragadda95] and Nomad [Murphy97] model four wheeled rovers as a single rigid body to generate metrics of expected behavior, for use in local navigation loops, evaluating suitability of the sensor configuration and optimizing parameters for the same.
Reference: [Pearce95] <author> Pearce,H., Tong,D., Pratt,D., Finco,J., </author> <title> The role of simulations in (Boeing) 777 FSEU development, The Boeing Company, </title> <booktitle> AIAA-95-0995-CP, 1995 Modeling methodology and simulation techniques 6.9.1 </booktitle>
Reference: [Kane85] <author> Kane,T.R., Levinson,D.A., </author> <title> Dynamics: Theory And Applications, </title> <publisher> McGraw-Hill, </publisher> <address> USA, </address> <year> 1985 </year>
Reference-contexts: Dynamic simulators are evolving from automated generation of equations to purely numerical forms. Popular mechanism simulators like Adams [MDI97] generate dynamics equations <ref> [Kane85] </ref>, where these equations depend on the changing constraints (e.g. a different set of equations has to be generated for the same robot with three wheels on the ground vs. four wheels on the ground).
Reference: [MDI97] <institution> Mechanical Dynamics Inc, </institution> <note> ADAMS Full Simulation, 1997, www.adams.com References 77 </note>
Reference-contexts: Component based Dynamic Simulators 2.3.3.1 Dynamic simulators emulate and chart robot behavior as a function of time, taking into account varying environment and past state of the robot. Dynamic simulators are evolving from automated generation of equations to purely numerical forms. Popular mechanism simulators like Adams <ref> [MDI97] </ref> generate dynamics equations [Kane85], where these equations depend on the changing constraints (e.g. a different set of equations has to be generated for the same robot with three wheels on the ground vs. four wheels on the ground).
Reference: [Baraff94] <author> Baraff,D., </author> <title> Fast Contact Force Computation for Nonpenetrating Rigid Bodies, </title> <booktitle> SIGGRAPH 94, Computer Graphics Proceedings, Annual Conference Series, </booktitle> <year> 1994 </year>
Reference-contexts: Similar approaches also exist for other dimensions, but they all have limited use due to restrictions. Purely numerical simulators treat the components, constraints and machine state as a series of linear programming problems. These include Coriolis <ref> [Baraff94] </ref> - a simulator for mechanisms of interconnected rigid bodies and complete mechanical behavior a set of rigid bodies, and SPICE [Nagel75] - a simulator for circuits of interconnected components. Similar approaches have been developed for other dimensions like thermal analysis [Thomas80].
Reference: [Baraff93] <author> Baraff,D., </author> <title> Non-penetrating Rigid Body Simulation, </title> <booktitle> Chapter 2, Eurographics 93 State of the Art Reports, </booktitle> <address> Barcelona, </address> <month> September, </month> <year> 1993 </year>
Reference: [Bekker55] <author> Bekker,M.G., </author> <title> Theory of Land Locomotion, The mechanics of vehicle mobility, </title> <publisher> The University of Michigan Press, </publisher> <address> Ann Arbor, USA, </address> <year> 1955 </year>
Reference: [Bekker60] <author> Bekker,M.G., </author> <title> Off-The-Road Locomotion, </title> <booktitle> Research and Development in Terramechanics, </booktitle> <publisher> The University of Michigan Press, </publisher> <address> Ann Arbor, USA, </address> <year> 1960 </year>
Reference: [Nagel75] <author> Nagel,L.W., </author> <title> SPICE2: A Computer Program to Simulate Semiconductor Circuits, </title> <type> PhD dissertation, </type> <institution> College of Engineering, University of California, Berkeley, ERL-M520, </institution> <year> 1975 </year>
Reference-contexts: Purely numerical simulators treat the components, constraints and machine state as a series of linear programming problems. These include Coriolis [Baraff94] - a simulator for mechanisms of interconnected rigid bodies and complete mechanical behavior a set of rigid bodies, and SPICE <ref> [Nagel75] </ref> - a simulator for circuits of interconnected components. Similar approaches have been developed for other dimensions like thermal analysis [Thomas80]. Since all relationships are treated numerically, these approaches allow reconfiguration in real-time and are the most exible for use in robot simulation.
Reference: [Foley90] <author> Foley, van Dam, Feiner, Huges, </author> <title> Computer Graphics: </title> <booktitle> principles and practice, 2nd Edition, </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1990 </year>
Reference: [Ling92] <author> Ling,R., Steinberg,L., </author> <title> (Thermal) Model generation from Physical Principles: </title>
References-found: 74

