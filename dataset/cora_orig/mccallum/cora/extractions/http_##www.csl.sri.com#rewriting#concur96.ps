URL: http://www.csl.sri.com/rewriting/concur96.ps
Refering-URL: http://www.csl.sri.com/rewriting/
Root-URL: 
Title: Rewriting Logic as a Semantic Framework for Concurrency: a Progress Report  
Author: Jose Meseguer 
Note: Table of Contents  
Address: Menlo Park, CA 94025  
Affiliation: SRI International,  
Abstract: This paper surveys the work of many researchers on rewriting logic since it was first introduced in 1990. The main emphasis is on the use of rewriting logic as a semantic framework for concurrency. The goal in this regard is to express as faithfully as possible a very wide range of concurrency models, each on its own terms, avoiding any encodings or translations. Bringing very different models under a common semantic framework makes easier to understand what different models have in common and how they differ, to find deep connections between them, and to reason across their different formalisms. It becomes also much easier to achieve in a rigorous way the integration and interoperation of different models and languages whose combination offers attractive advantages. The logic and model theory of rewriting logic are also summarized, a number of current research directions are surveyed, and some concluding remarks about future directions are made. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Peter Aczel. </author> <title> A general Church-Rosser theorem. </title> <type> Manuscript, </type> <institution> University of Manch ester, </institution> <year> 1978. </year>
Reference-contexts: Laneve and Montanari then go on to consider the general case of orthogonal, left-normal combinatory reduction systems as formalized by Aczel <ref> [1] </ref>, that contain the lambda calculus as a special case. They show that such systems exactly correspond to rewrite theories R whose equational part E consists of explicit substitution equations.
Reference: 2. <author> G. Agha. </author> <title> Actors. </title> <publisher> MIT Press, </publisher> <year> 1986. </year>
Reference-contexts: In rewriting logic, this travelling is accounted for in a very abstract way by the structural laws of associativity, commutativity, and identity. The above two rules illustrate the asynchronous message passing communication between objects typical of Actor systems <ref> [3, 2] </ref>.
Reference: 3. <author> G. Agha and C. Hewitt. </author> <title> Concurrent programming using actors. </title> <editor> In A. Yonezawa and M. Tokoro, editors, </editor> <booktitle> Object-Oriented Concurrent Programming, </booktitle> <pages> pages 37-53. </pages> <publisher> MIT Press, </publisher> <year> 1988. </year>
Reference-contexts: In rewriting logic, this travelling is accounted for in a very abstract way by the structural laws of associativity, commutativity, and identity. The above two rules illustrate the asynchronous message passing communication between objects typical of Actor systems <ref> [3, 2] </ref>.
Reference: 4. <author> R. Alur, C. Courcoubetis, N. Halbwachs, T. A. Henzinger, P.-H. Ho, X. Nicollin, A. Olivero, J. Sifakis, and S. Yovine. </author> <title> The algorithmic analysis of hybrid systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 138 </volume> <pages> 3-34, </pages> <year> 1995. </year>
Reference-contexts: Other real-time models such as timed transition systems [41] and hybrid automata <ref> [5, 4] </ref> have similar straightforward formulations within standard rewriting logic [88].
Reference: 5. <author> R. Alur, C. Courcoubetis, T. A. Henzinger, and P.-H. Ho. </author> <title> Hybrid automata: an algorithmic approach to the specification and verification of hybrid systems. In R.L. </title> <editor> Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <booktitle> Workshop on Theory of Hybrid Systems, </booktitle> <pages> pages 209-229. </pages> <publisher> Springer LNCS 739, </publisher> <year> 1993. </year>
Reference-contexts: Other real-time models such as timed transition systems [41] and hybrid automata <ref> [5, 4] </ref> have similar straightforward formulations within standard rewriting logic [88].
Reference: 6. <author> Rajeev Alur and David Dill. </author> <title> The theory of timed automata. </title> <editor> In J.W. de Bakker, G. Huizing, W. P. de Roever, and G. Rozenberg, editors, </editor> <booktitle> Real-Time: Theory in Practice, volume 600 of Lecture Notes in Computer Science, </booktitle> <year> 1991. </year>
Reference-contexts: A number of frequently used models of real-time computation have a very natural and direct expression in standard rewriting logic. One of the models that Olveczky and I consider in [88] is timed automata. Omitting details about initial states and acceptance conditions, a timed automaton (see, e. g., <ref> [6] </ref>) consists of a finite alphabet , a finite set S of states, a finite set C of clocks, a set (C) of clock constraints, and a set E S fi S fi fi 2 C fi (C) of transitions.
Reference: 7. <author> J.-P. Ban^atre and D. Le Metayer. </author> <title> The Gamma model and its discipline of pro gramming. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 15 </volume> <pages> 55-77, </pages> <year> 1990. </year>
Reference-contexts: Applications of rewriting logic to Petri net algebraic specification have been developed by Battiston, Crespi, De Cindio, and Mauri [8], and also by Bettaz and Maouche [12, 13]. 4.5 Gamma and the Chemical Abstract Machine The Gamma language of Ban^atre and Le Metayer <ref> [7] </ref>, and Berry and Boudol's chemical abstract machine, or cham [66, 10], share the metaphor of viewing a certain kind of distributed state as a "solution" in which many "molecules" float. Concurrent transitions are then viewed as "reactions" that can occur simultaneously in many points of the solution.
Reference: 8. <author> E. Battiston, V. Crespi, F. De Cindio, and G. Mauri. </author> <title> Semantic frameworks for a class of modular algebraic nets. </title> <editor> In M. Nivat, C. Rattray, T. Russ, and G. Scollo, editors, </editor> <booktitle> Proc. of the 3rd International AMAST Conference, Workshops in Computing. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: For the case of Engelfriet et al.'s higher level Petri nets, called POPs [35, 36], this was pointed out in [75]. Applications of rewriting logic to Petri net algebraic specification have been developed by Battiston, Crespi, De Cindio, and Mauri <ref> [8] </ref>, and also by Bettaz and Maouche [12, 13]. 4.5 Gamma and the Chemical Abstract Machine The Gamma language of Ban^atre and Le Metayer [7], and Berry and Boudol's chemical abstract machine, or cham [66, 10], share the metaphor of viewing a certain kind of distributed state as a "solution" in
Reference: 9. <author> M. Bauderon and B. Courcelle. </author> <title> Graph expressions and graph rewriting. </title> <journal> Math. Systems Theory, </journal> <volume> 20 </volume> <pages> 83-127, </pages> <year> 1987. </year>
Reference-contexts: However, for our purposes the most convenient axiomatizations are those in which labelled graphs are axiomatized equationally as an algebraic data type in such a way that graph rewriting becomes rewriting modulo the equations axiomatizing the type. Axiomatizations in this spirit include those of Bauderon and Courcelle <ref> [9] </ref>, Corradini and Montanari [26], and Raoult and Voisin [90].
Reference: 10. <author> Gerard Berry and Gerard Boudol. </author> <title> The chemical abstract machine. </title> <journal> Theoretical Computer Science, </journal> <volume> 96(1) </volume> <pages> 217-248, </pages> <year> 1992. </year>
Reference-contexts: logic to Petri net algebraic specification have been developed by Battiston, Crespi, De Cindio, and Mauri [8], and also by Bettaz and Maouche [12, 13]. 4.5 Gamma and the Chemical Abstract Machine The Gamma language of Ban^atre and Le Metayer [7], and Berry and Boudol's chemical abstract machine, or cham <ref> [66, 10] </ref>, share the metaphor of viewing a certain kind of distributed state as a "solution" in which many "molecules" float. Concurrent transitions are then viewed as "reactions" that can occur simultaneously in many points of the solution.
Reference: 11. <author> E. Best and R. Devillers. </author> <title> Sequential and concurrent behavior in Petri net theory. </title> <journal> Theoretical Computer Science, </journal> <volume> 55 </volume> <pages> 87-136, </pages> <year> 1989. </year>
Reference-contexts: In this way, the finite concurrent computations of a net N are formalized as arrows in the category T N . Specifically, they exactly correspond to the commutative processes of N in the sense of Best and Devillers <ref> [11] </ref>.
Reference: 12. <author> M. Bettaz and M. Maouche. </author> <title> How to specify nondeterminism and true concur rency with algebraic term nets. </title> <editor> In M. Bidoit and C. Choppy, editors, </editor> <booktitle> Recent Trends in Data Type Specification, </booktitle> <pages> pages 164-180. </pages> <publisher> Springer LNCS 655, </publisher> <year> 1993. </year>
Reference-contexts: For the case of Engelfriet et al.'s higher level Petri nets, called POPs [35, 36], this was pointed out in [75]. Applications of rewriting logic to Petri net algebraic specification have been developed by Battiston, Crespi, De Cindio, and Mauri [8], and also by Bettaz and Maouche <ref> [12, 13] </ref>. 4.5 Gamma and the Chemical Abstract Machine The Gamma language of Ban^atre and Le Metayer [7], and Berry and Boudol's chemical abstract machine, or cham [66, 10], share the metaphor of viewing a certain kind of distributed state as a "solution" in which many "molecules" float.
Reference: 13. <author> M. Bettaz and M. Maouche. </author> <title> Modeling of object based systems with hidden sorted ECATNets. </title> <booktitle> In Proc. of MASCOTS'95, </booktitle> <address> Durham, </address> <publisher> North Carolina, </publisher> <pages> pages 307-311. </pages> <publisher> IEEE, </publisher> <year> 1995. </year>
Reference-contexts: For the case of Engelfriet et al.'s higher level Petri nets, called POPs [35, 36], this was pointed out in [75]. Applications of rewriting logic to Petri net algebraic specification have been developed by Battiston, Crespi, De Cindio, and Mauri [8], and also by Bettaz and Maouche <ref> [12, 13] </ref>. 4.5 Gamma and the Chemical Abstract Machine The Gamma language of Ban^atre and Le Metayer [7], and Berry and Boudol's chemical abstract machine, or cham [66, 10], share the metaphor of viewing a certain kind of distributed state as a "solution" in which many "molecules" float.
Reference: 14. <author> P. Borovansky. </author> <title> Implementation of higher-order unification based on calculus of explicit substitutions. </title> <editor> In M. Bartosek, J. Staudek, and J. Wiedermann, editors, </editor> <booktitle> Proc. SOFTSEM'95, </booktitle> <pages> pages 363-368. </pages> <publisher> Springer LNCS 1012, </publisher> <year> 1995. </year>
Reference-contexts: This group and their collaborators have developed a very impressive collection of examples and case studies in areas such as logic programming languages, constraint solving, higher-order substitution, equational theorem-proving and other such computational systems <ref> [46, 103, 49, 14, 18] </ref>. A nice feature of rewriting logic, namely its natural way of dealing with concurrency and interaction, is exploited by Viry to treat input-output for ELAN within the logic itself [101]. <p> Additional quite impressive evidence is also provided by research based on the ELAN language <ref> [46, 103, 49, 14, 18] </ref>, that stresses the logical framework applications of rewriting logic. There is also a very fruitful relationship between rewriting logic and the theory of reasoning theories proposed by Giunchiglia, Pecchiari and Talcott [39].
Reference: 15. <author> P. Borovansky, C. Kirchner, and H. Kirchner. </author> <title> Controlling rewriting by rewriting. </title> <booktitle> To appear in Proc. 1 st Intl. Workshop on Rewriting Logic and its Applications, </booktitle> <address> ENTCS, </address> <publisher> North Holland, </publisher> <year> 1996. </year>
Reference-contexts: This general idea of expressing strategies with rewrite rules has also been adopted by the most recent work on ELAN <ref> [15] </ref>, and by the Maude system [22]. 6.6 Avoiding the Frame Problem Since rewriting logic is a logic of change whose subject matter is precisely the dynamic changes in context within a system, all the insoluble problems and absurdities that one runs into when trying to formalize change with essentially static
Reference: 16. <author> P. Borovansky, C. Kirchner, H. Kirchner, P.-E. Moreau, and M. Vittek. </author> <title> ELAN: A logical framework based on computational systems. </title> <booktitle> To appear in Proc. 1 st Intl. Workshop on Rewriting Logic and its Applications, </booktitle> <address> ENTCS, </address> <publisher> North Holland, </publisher> <year> 1996. </year>
Reference-contexts: Several research groups have developed language tools to support formal reasoning and executable specification in rewriting logic. The ELAN language developed at INRIA Lorraine by Borovansky, C. Kirchner, H. Kirchner, P.-E. Moreau and Vittek <ref> [46, 103, 16] </ref> has as modules computational systems, consisting of a rewrite theory and a strategy to guide the rewriting process.
Reference: 17. <author> G. Boudol. </author> <title> Computational semantics of term rewriting systems. </title> <editor> In Maurice Nivat and John Reynolds, editors, </editor> <booktitle> Algebraic Methods in Semantics, </booktitle> <pages> pages 169-236. </pages> <publisher> Cambridge University Press, </publisher> <year> 1985. </year>
Reference-contexts: lambda calculus, Laneve and Montanari [53] first clarify the exact relationship between the equivalence of rewrites obtained by the equations identifying proof terms in the free model T R (X ) of a rewrite theory R, and Boudol's notion of permutation equivalence for term rewriting systems using the residual calculus <ref> [17] </ref>. The theory R is assumed to have its equational part E empty (syntactic rewriting) and to be such that the rewrite rules are left-linear (no repeated variable occurrences in lefthand sides or rules) and have nonvariable lefthand sides that contain all the variables in their corresponding righthand sides.
Reference: 18. <author> C. Castro. </author> <title> An approach to solving binary CSP using computational systems. </title> <booktitle> To appear in Proc. 1 st Intl. Workshop on Rewriting Logic and its Applications, </booktitle> <address> ENTCS, </address> <publisher> North Holland, </publisher> <year> 1996. </year>
Reference-contexts: This group and their collaborators have developed a very impressive collection of examples and case studies in areas such as logic programming languages, constraint solving, higher-order substitution, equational theorem-proving and other such computational systems <ref> [46, 103, 49, 14, 18] </ref>. A nice feature of rewriting logic, namely its natural way of dealing with concurrency and interaction, is exploited by Viry to treat input-output for ELAN within the logic itself [101]. <p> Additional quite impressive evidence is also provided by research based on the ELAN language <ref> [46, 103, 49, 14, 18] </ref>, that stresses the logical framework applications of rewriting logic. There is also a very fruitful relationship between rewriting logic and the theory of reasoning theories proposed by Giunchiglia, Pecchiari and Talcott [39].
Reference: 19. <author> K. Mani Chandy and Jayadev Misra. </author> <title> Parallel Program Design: A Foundation. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: More recently, Pita and Mart-Oliet [89] have carried out a thorough case study on the application of Maude to the executable specification of a database model for broadcast telecommunication networks. 4.8 Unity UNITY <ref> [19] </ref> is an elegant and important theory of concurrent programming with an associated logic to reason about the behavior of concurrent programs that has been developed by K. Many Chandy and Jayadev Misra.
Reference: 20. <author> A. Chien. </author> <title> Concurrent Aggregates. </title> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: They of course are like "magic," in that they give a declarative specification but do not prescribe any particular mechanism. A concrete implementation using for example locks on attributes, or concurrent aggregates <ref> [20] </ref>, can then be judged correct relative to such a specification. The above axioms are one way of illustrating how algebraic laws can axioma-tize coherent simultaneous access to elements of a distributed state.
Reference: 21. <author> A. Ciampolini, E. Lamma, P. Mello, and C. Stefanelli. </author> <title> Distributed logic objects: a fragment of rewriting logic and its implementation. </title> <booktitle> To appear in Proc. 1 st Intl. Workshop on Rewriting Logic and its Applications, </booktitle> <address> ENTCS, </address> <publisher> North Holland, </publisher> <year> 1996. </year>
Reference-contexts: Ciampolini, Lamma, Mello, and Stefanelli at the University of Bologna, have designed a parallel programming language called Distributed Logic Objects (DLO) that corresponds to an adequate subset of objec-oriented rewrite theories <ref> [21] </ref>. They have developed a number of implementation techniques for efficiently executing DLO in multicomputers.
Reference: 22. <author> Manuel G. Clavel, Steven Eker, Patrick Lincoln, and Jose Meseguer. </author> <booktitle> Principles of Maude. To appear in Proc. 1 st Intl. Workshop on Rewriting Logic and its Applications, </booktitle> <address> ENTCS, </address> <publisher> North Holland, </publisher> <year> 1996. </year>
Reference-contexts: In our group at SRI, Manuel Clavel, Steven Eker, Patrick Lincoln and I are working on the implementation of an interpreter for Maude <ref> [83, 76, 22] </ref>. Maude is based on a typed version of rewriting logic that is order-sorted and supports sort constraints [79]. It has functional modules, that are Church-Rosser and terminating equational theories, system modules, that specify general rewrite theories, and object-oriented modules, that provide syntactic sugar for object-oriented rewrite theories. <p> We have also shown that rewriting logic is reflective in this precise sense. This opens up very interesting possibilities for rewiting logic languages that will be exploited in Maude <ref> [22] </ref>, ELAN [48], and Cafe. Reflection is closely connected with the topic of strategies that is of outmost importance in rewriting logic to control the rewriting process. <p> This general idea of expressing strategies with rewrite rules has also been adopted by the most recent work on ELAN [15], and by the Maude system <ref> [22] </ref>. 6.6 Avoiding the Frame Problem Since rewriting logic is a logic of change whose subject matter is precisely the dynamic changes in context within a system, all the insoluble problems and absurdities that one runs into when trying to formalize change with essentially static logics|the so-called frame problem|do not cause
Reference: 23. <author> Manuel G. Clavel and Jose Meseguer. </author> <title> Axiomatizing reflective logics and lan guages. </title> <editor> In Gregor Kiczales, editor, </editor> <booktitle> Proceedings of Reflection'96, </booktitle> <address> San Francisco, California, </address> <month> April </month> <year> 1996, </year> <pages> pages 263-288. </pages> <note> Xerox PARC, </note> <year> 1996. </year>
Reference-contexts: Reflection is a very useful property in computing systems and therefore very desirable in a computational logic. Manuel Clavel and I <ref> [23] </ref> have given general axioms centered around the notion of a universal theory that a logic should satisfy to properly be called reflective. We have also shown that rewriting logic is reflective in this precise sense. <p> Reflection is closely connected with the topic of strategies that is of outmost importance in rewriting logic to control the rewriting process. Clavel and I have proposed the notion of an internal strategy language for a general logic, and have advocated it for rewriting logic <ref> [23] </ref> as a way of being able to reason formally within the logic about the semantics of strategies.
Reference: 24. <author> A. Corradini and F. Gadducci. </author> <title> CPO models for infinite term rewriting. </title> <booktitle> In Proc. AMAST'95, </booktitle> <pages> pages 368-384. </pages> <publisher> Springer LNCS 936, </publisher> <year> 1995. </year>
Reference-contexts: Her ideas and results are very elegant; they are discussed in [99]. Yet another, quite interesting approach has been taken by Corradini and Gadducci <ref> [24] </ref>. They consider rewrite theories with empty set of equations and interpret them in continuos cpo algebra models in such a way that not only the terms, but also the proof terms, become endowed with an approximation ordering.
Reference: 25. <author> A. Corradini, F. Gadducci, and U. Montanari. </author> <title> Relating two categorical models of term rewriting. </title> <editor> In J. Hsiang, editor, </editor> <booktitle> Proc. Rewriting Techniques and Applications, Kaiserslautern, </booktitle> <pages> pages 225-240, </pages> <year> 1995. </year>
Reference-contexts: This point of view has been further generalized and exploited in Pisa to provide very useful connections with other concurrency theory models. Corra-dini, Gadducci and Montanari <ref> [25] </ref> provide a uniform construction for L R and for a sesqui-category model, similar to L R but satisfying fewer equations, that has been proposed by Stell [98].
Reference: 26. <author> Andrea Corradini and Ugo Montanari. </author> <title> An algebra of graphs and graph rewriting. </title> <editor> In D.H. Pitt et al., editor, </editor> <booktitle> Category Theory and Computer Science, </booktitle> <pages> pages 236-260. </pages> <publisher> Springer LNCS 530, </publisher> <year> 1991. </year>
Reference-contexts: Axiomatizations in this spirit include those of Bauderon and Courcelle [9], Corradini and Montanari <ref> [26] </ref>, and Raoult and Voisin [90]. Taking an object-oriented point of view allows a particularly simple axiomatization of graph rewriting in rewriting logic, similar in some respects|although with some notable differences|to the algebraic axiomatization of Raoult and Voisin [90] where graph rewriting is also understood as multiset rewriting.
Reference: 27. <author> B. Courcelle. </author> <title> Graph rewriting: an algebraic and logic approach. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <volume> Vol. B, </volume> <pages> pages 193-242. </pages> <publisher> North-Holland, </publisher> <year> 1990. </year>
Reference-contexts: Grouping them in a class Node, they have the form ha : Node j val : v; links : li An object with this information is essentially what is called a hyperedge in the terminology of graph grammars <ref> [27] </ref>, except that hyperedge labels are defined as unstructured atomic elements that cannot be further analyzed, whereas we allow them to be structured data on which a graph rewrite rule can also impose patterns.
Reference: 28. <author> P. Degano, J. Meseguer, and U. Montanari. </author> <title> Axiomatizing net computations and processes. </title> <booktitle> In Proc. LICS'89, </booktitle> <pages> pages 175-185. </pages> <publisher> IEEE, </publisher> <year> 1989. </year>
Reference-contexts: This result, showing that the equational theory of true concurrency provided by rewriting logic agrees with more traditional notions of true concurrency in the case of Petri nets, has been proved by Degano, Meseguer and Montanari <ref> [28, 29] </ref> using an earlier categorical model of Petri net computations denoted T [N ] [80] that is in fact identical to T N .
Reference: 29. <author> P. Degano, J. Meseguer, and U. Montanari. </author> <title> Axiomatizing the algebra of net com putations and processes. </title> <note> To appear in Acta Informatica, </note> <year> 1996. </year>
Reference-contexts: This result, showing that the equational theory of true concurrency provided by rewriting logic agrees with more traditional notions of true concurrency in the case of Petri nets, has been proved by Degano, Meseguer and Montanari <ref> [28, 29] </ref> using an earlier categorical model of Petri net computations denoted T [N ] [80] that is in fact identical to T N .
Reference: 30. <author> G. Denker and M. Gogolla. </author> <title> Translating TROLL light concepts to Maude. </title> <editor> In H. Ehrig and F. Orejas, editors, </editor> <title> Recent Trends in Data Type Specification, </title> <booktitle> volume 785 of LNCS, </booktitle> <pages> pages 173-187. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Denker and Gogolla <ref> [30] </ref> have used Maude to give semantics to the TROLL light object-oriented database specification language; this work has the advantage of providing a formal link between rewriting logic and the algebraic approach to information systems proposed by the IS-CORE Group [92, 44].
Reference: 31. <author> N. Dershowitz and J.-P. Jouannaud. </author> <title> Rewrite systems. </title> <editor> In J. van Leeuwen, edi tor, </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <volume> Vol. B, </volume> <pages> pages 243-320. </pages> <publisher> North-Holland, </publisher> <year> 1990. </year>
Reference-contexts: Of course, standard term rewriting is obtained as the particular case in which the set of equations E is empty. Techniques for rewriting modulo equations have been studied extensively <ref> [31] </ref> and can be used to implement rewriting modulo many equational theories of interest.
Reference: 32. <author> R. Diaconescu. </author> <title> Hidden sorted rewriting logic. </title> <booktitle> To appear in Proc. 1 st Intl. Work shop on Rewriting Logic and its Applications, </booktitle> <address> ENTCS, </address> <publisher> North Holland, </publisher> <year> 1996. </year>
Reference-contexts: A similar notion has also been proposed and used by Lechner Lengauer and Wirsing in [58]. Yet another recent development that seems promising for reasoning about behavioral satisfaction and that may provide more flexible ways of refining rewriting logic specifications is Diaconescu's notion of hidden sorted rewriting logic <ref> [32] </ref>. Viry has developed a very useful program transformation techniques for rewrite theories using completion methods [102]. His key notion is that of coherence between the equational part E and the rules R of a rewrite theory.
Reference: 33. <editor> H. Ehrig, H.-J. Kreowski, and G. Rozenberg, editors. </editor> <title> Graph Grammars and their Application to Computer Science. </title> <publisher> Springer LNCS 532, </publisher> <year> 1991. </year>
Reference-contexts: This case is usually called term graph rewriting and has been studied extensively (see [97] for a representative collection of papers). However, graph rewriting is a very general model and can express many other computations besides functional ones. The theory of graph grammars and graph transformations (see <ref> [33, 94] </ref> for recent conferences) considers graph rewriting in this more general sense. Different mathematical axiomatizations of graph rewriting have been proposed in the literature. The categorical approach using double or single pushouts has been studied quite extensively [33, 94]. <p> The theory of graph grammars and graph transformations (see <ref> [33, 94] </ref> for recent conferences) considers graph rewriting in this more general sense. Different mathematical axiomatizations of graph rewriting have been proposed in the literature. The categorical approach using double or single pushouts has been studied quite extensively [33, 94]. However, for our purposes the most convenient axiomatizations are those in which labelled graphs are axiomatized equationally as an algebraic data type in such a way that graph rewriting becomes rewriting modulo the equations axiomatizing the type.
Reference: 34. <author> Steven Eker. </author> <title> Fast matching in combination of regular equational theories. </title> <booktitle> To ap pear in Proc. 1 st Intl. Workshop on Rewriting Logic and its Applications, </booktitle> <address> ENTCS, </address> <publisher> North Holland, </publisher> <year> 1996. </year>
Reference-contexts: These modules can be combined by module composition operations in the OBJ style. Its rewrite engine is highly modular and extensible, so that new matching algorithms for rewriting modulo different equational theories can easily be added and can be efficiently combined with those of other theories <ref> [34] </ref>. In addition, Maude supports reflective rewriting logic computations, and has flexible evaluation strategies. 5.2 Parallel Programming Languages Since in general rewriting can take place modulo an arbitrary set of structural axioms E, which could be undecidable, some restrictions are necessary in order to use rewriting logic for parallel programming.
Reference: 35. <author> J. Engelfriet, G. Leih, and G. Rozenberg. </author> <title> Parallel object-based systems and Petri nets, I and II. </title> <type> Technical Report 90-04,90-05, </type> <institution> Dept. of Computer Science, University of Leiden, </institution> <month> February </month> <year> 1990. </year>
Reference-contexts: Rewriting logic offers a very natural framework for giving semantics to different kinds of algebraic Petri nets of this kind. For the case of Engelfriet et al.'s higher level Petri nets, called POPs <ref> [35, 36] </ref>, this was pointed out in [75].
Reference: 36. <author> J. Engelfriet, G. Leih, and G. Rozenberg. </author> <title> Net-based description of parallel object-based systems, </title> <editor> or POTs and POPs. In J. W. de Bakker, W. P. de Roever, and G. Rozenberg, editors, </editor> <booktitle> Foundations of Object-Oriented Languages, Noordwi-jkerhout, The Netherlands, May/June 1990, </booktitle> <pages> pages 229-273. </pages> <publisher> Springer LNCS 489, </publisher> <year> 1991. </year>
Reference-contexts: Rewriting logic offers a very natural framework for giving semantics to different kinds of algebraic Petri nets of this kind. For the case of Engelfriet et al.'s higher level Petri nets, called POPs <ref> [35, 36] </ref>, this was pointed out in [75].
Reference: 37. <author> K. Futatsugi and T. Sawada. </author> <title> Cafe as an extensible specification environment. </title> <booktitle> To appear in Proc. of the Kunming International CASE Symposium, </booktitle> <address> Kunming, China, </address> <month> November, </month> <year> 1994. </year>
Reference-contexts: Futatsugi and Sawada at Japan Advanced Institute of Science and Technology (JAIST) in Kanazawa are in a very mature stage of development of their Cafe language <ref> [37] </ref>, which is also based on rewriting logic, contains OBJ as its functional sublanguage, and supports object-oriented specifications.
Reference: 38. <author> F. Gadducci and U. Montanari. </author> <title> Enriched categories as models of computation. </title> <booktitle> In Proc. 5 th Italian Conference on Theoretical Computer Science, </booktitle> <address> Ravello, </address> <year> 1995. </year>
Reference-contexts: In both of them the representation exactly characterizes the legal CCS computations [68]. Another rewriting specification of CCS in a double category model that is a natural generalization of the 2-category models of rewriting logic has been proposed by Gadducci and Montanari <ref> [38] </ref> and is discussed in Section 6.1. LOTOS [42] is a specification language combining the two formalisms of algebraic data types and (an extension of) CCS.
Reference: 39. <author> F. Giunchiglia, C.L. Pecchiari, and C. Talcott. </author> <title> Reasonig theories: towards an architecture for open mechanized reasoning systems. </title> <type> Technical Report 9409-15, IRST, </type> <institution> University of Trento, </institution> <month> November </month> <year> 1994. </year>
Reference-contexts: There is also a very fruitful relationship between rewriting logic and the theory of reasoning theories proposed by Giunchiglia, Pecchiari and Talcott <ref> [39] </ref>. Reasoning theories provide a logic-independent architecture for combining and interoperating different mechanized formal systems. They are closely related to rewrite theories and there are fruitful synergies between both concepts that Carolyn Talcott and I are currently investigating [82].
Reference: 40. <author> Joseph Goguen and Jose Meseguer. </author> <title> Order-sorted algebra I: Equational deduction for multiple inheritance, overloading, exceptions and partial operations. </title> <journal> Theoretical Computer Science, </journal> <volume> 105 </volume> <pages> 217-273, </pages> <year> 1992. </year> <note> Originally given as lecture at Seminar on Types, Carnegie-Mellon University, June 1983; several draft and technical report versions were circulated since 1985. </note>
Reference-contexts: The more or less ad-hoc solutions adopted to deal with this typically do not survive well the passage to subclasses in which more attributes and more methods may have been introduced. Using an order-sorted type structure <ref> [40] </ref>, class inheritance can be naturally supported in rewriting logic; and message redefinition in subclasses can be described by appropriate composition operations between rewrite theories [76]. I used these ideas in [77] to show how the inheritance anomaly can be resolved by adopting a declarative programming style with rewrite rules.
Reference: 41. <author> T.A. Henzinger, Z. Manna, and A. Pnueli. </author> <title> Timed transition systems. </title> <editor> In J.W. de Bakker, G. Huizing, W. P. de Roever, and G. Rozenberg, editors, </editor> <booktitle> Real-Time: Theory in Practice, volume 600 of Lecture Notes in Computer Science, </booktitle> <year> 1991. </year>
Reference-contexts: Other real-time models such as timed transition systems <ref> [41] </ref> and hybrid automata [5, 4] have similar straightforward formulations within standard rewriting logic [88].
Reference: 42. <author> ISO. </author> <title> IS8807 : Information Processing Systems Open System Interconnection - LOTOS A formal description technique based on the temporal ordering of observational behavior. ISO, </title> <month> February </month> <year> 1989. </year>
Reference-contexts: Another rewriting specification of CCS in a double category model that is a natural generalization of the 2-category models of rewriting logic has been proposed by Gadducci and Montanari [38] and is discussed in Section 6.1. LOTOS <ref> [42] </ref> is a specification language combining the two formalisms of algebraic data types and (an extension of) CCS. It is pointed out in [78] that writing an executable specification of LOTOS in rewriting logic that could be used as a LOTOS interpreter is both very natural and straightforward.
Reference: 43. <author> R. Jagannathan. </author> <title> Dataflow models. </title> <editor> In E.Y. Zoyama, editor, </editor> <booktitle> Parallel and Dis tributed Computing Handbook, </booktitle> <pages> pages 223-238. </pages> <address> McGraw Hill, </address> <year> 1996. </year>
Reference-contexts: Li hB : RcNode j rc : n 1i hA : RcNode j rc : 0; links : nili ! null The case of cyclic graphs could be handled with other techniques such as mark-and-sweep that can also be specificed by adequate rules. 4.11 Dataflow The dataflow model of computation <ref> [43] </ref> has been thoroughly investigated both at the level of parallel functional languages, and in terms of parallel architectures directly supporting the dataflow model. In fact, it is one of the contending models of parallel computing and parallel architecture. The model is very intuitive.
Reference: 44. <editor> R. Junglclaus, G. Saake, T. Hartmann, and C. Sernadas, editors. </editor> <booktitle> Object-oriented specification of information systems: the TROLL language. </booktitle> <address> Technische Univer-sitat Braunschweig, Information-Berichte 91-04, </address> <year> 1991. </year>
Reference-contexts: Denker and Gogolla [30] have used Maude to give semantics to the TROLL light object-oriented database specification language; this work has the advantage of providing a formal link between rewriting logic and the algebraic approach to information systems proposed by the IS-CORE Group <ref> [92, 44] </ref>.
Reference: 45. <author> G.M. Kelly and R. </author> <title> Street. Review of the elements of 2-categories. </title> <editor> In G.M. Kelly, editor, </editor> <booktitle> Category Seminar, </booktitle> <address> Sydney 1972/73, </address> <pages> pages 75-103. </pages> <note> Springer Lecture Notes in Mathematics No. 420, </note> <year> 1974. </year>
Reference-contexts: As pointed out in [74], this situation generalizes very naturally to the case of rewriting logic, where models are algebraic structures on categories instead than on sets. That is, the ground on which they exist is the 2-category <ref> [67, 45] </ref> Cat, instead of the category Set. Intuitively, C is a 2-category when the morphisms C (A; B) between two objects form not just a set, but a category, and the two arrow compositions fit together in a coherent way. <p> More recently, Gadducci and Montanari have proposed another generalization of L R to a double category <ref> [45] </ref>, in which one composes vertically and horizontally square "tiles" instead of just cells. Their model is particularly perspicuous for dealing with context conditions required for a rewriting, such as those arising in structural operational semantics presentations.
Reference: 46. <author> C. Kirchner, H. Kirchner, and M. Vittek. </author> <title> Designing constraint logic program ming languages using computational systems. </title> <editor> In V. Saraswat and P. van Hen-tryck, editors, </editor> <booktitle> Principles and Practice of Constraint Programming: The Newport Papers, </booktitle> <pages> pages 133-160. </pages> <publisher> MIT Press, </publisher> <year> 1995. </year>
Reference-contexts: Several research groups have developed language tools to support formal reasoning and executable specification in rewriting logic. The ELAN language developed at INRIA Lorraine by Borovansky, C. Kirchner, H. Kirchner, P.-E. Moreau and Vittek <ref> [46, 103, 16] </ref> has as modules computational systems, consisting of a rewrite theory and a strategy to guide the rewriting process. <p> This group and their collaborators have developed a very impressive collection of examples and case studies in areas such as logic programming languages, constraint solving, higher-order substitution, equational theorem-proving and other such computational systems <ref> [46, 103, 49, 14, 18] </ref>. A nice feature of rewriting logic, namely its natural way of dealing with concurrency and interaction, is exploited by Viry to treat input-output for ELAN within the logic itself [101]. <p> Additional quite impressive evidence is also provided by research based on the ELAN language <ref> [46, 103, 49, 14, 18] </ref>, that stresses the logical framework applications of rewriting logic. There is also a very fruitful relationship between rewriting logic and the theory of reasoning theories proposed by Giunchiglia, Pecchiari and Talcott [39].
Reference: 47. <author> C. Kirchner and P. Viry. </author> <title> Implementing parallel rewriting. </title> <editor> In B. Fronhofer and G. Wrightson, editors, </editor> <booktitle> Parallelization in Inference Systems, </booktitle> <pages> pages 123-138. </pages> <publisher> Springer LNAI 590, </publisher> <year> 1992. </year>
Reference-contexts: At INRIA Lorraine, Viry and C. Kirchner <ref> [47] </ref> have studied parallel implementation techniques for rewriting on loosely coupled parallel machines and have experimented with their techniques through a particular implementation in a transputer-based machine. Their approach addresses the case called term rewriting in the above classification, and provides new implementation techniques for this case on multicomputers.
Reference: 48. <author> H. Kirchner and P.-E. Moreau. </author> <title> Computational reflection and extension in ELAN. </title> <booktitle> To appear in Proc. 1 st Intl. Workshop on Rewriting Logic and its Applications, </booktitle> <address> ENTCS, </address> <publisher> North Holland, </publisher> <year> 1996. </year>
Reference-contexts: We have also shown that rewriting logic is reflective in this precise sense. This opens up very interesting possibilities for rewiting logic languages that will be exploited in Maude [22], ELAN <ref> [48] </ref>, and Cafe. Reflection is closely connected with the topic of strategies that is of outmost importance in rewriting logic to control the rewriting process.
Reference: 49. <author> H. Kirchner and P.-E. Moreau. </author> <title> Prototyping completion with constraints using computational systems. </title> <editor> In J. Hsiang, editor, </editor> <booktitle> Proc. Rewriting Techniques and Applications, </booktitle> <address> Kaiserslautern, </address> <year> 1995. </year>
Reference-contexts: This group and their collaborators have developed a very impressive collection of examples and case studies in areas such as logic programming languages, constraint solving, higher-order substitution, equational theorem-proving and other such computational systems <ref> [46, 103, 49, 14, 18] </ref>. A nice feature of rewriting logic, namely its natural way of dealing with concurrency and interaction, is exploited by Viry to treat input-output for ELAN within the logic itself [101]. <p> Additional quite impressive evidence is also provided by research based on the ELAN language <ref> [46, 103, 49, 14, 18] </ref>, that stresses the logical framework applications of rewriting logic. There is also a very fruitful relationship between rewriting logic and the theory of reasoning theories proposed by Giunchiglia, Pecchiari and Talcott [39].
Reference: 50. <author> P. Kosiuczenko and M. Wirsing. </author> <title> Timed rewriting logic, </title> <booktitle> 1995. Working material for the 1995 Marktoberdorf International Summer School "Logic of Computation". </booktitle>
Reference-contexts: dataflow case, the inputs from an external environment can be formalized by means of nondeterministic rewrite rules involving input nodes. 4.13 Real-Time Systems The first important research contribution exploring the application of rewriting logic to real-time specification has been the work of Kosiuczenko and Wirsing on timed rewriting logic (TRL) <ref> [50] </ref>, an extension of rewriting logic where the rewrite relation is labeled with time stamps. Axioms in TRL are sequents of the form t r ! t 0 . Their intuitive meaning is that t evolves to t 0 in time r.
Reference: 51. <author> C. Landauer. </author> <title> Discrete event systems in rewriting logic. </title> <booktitle> To appear in Proc. 1 st Intl. Workshop on Rewriting Logic and its Applications, </booktitle> <address> ENTCS, </address> <publisher> North Holland, </publisher> <year> 1996. </year>
Reference-contexts: From a different, (co-)algebraic, perspective, Reichel has found rewriting logic useful in his final coalgebra semantics for objects [91]. The benefits of rewriting logic for execution of, and formal reasoning about, object-oriented discrete event simulations is another application area currently being investigated by Landauer <ref> [51] </ref>. Another area where rewriting logic has proved useful is in the specification and programming of object-oriented databases.
Reference: 52. <author> C. Laneve and U. Montanari. </author> <title> Axiomatizing permutation equivalence in the calculus. </title> <editor> In H. Kirchner and G. Levi, editors, </editor> <booktitle> Proc. Third Int. Conf. on Algebraic and Logic Programming, Volterra, </booktitle> <address> Italy, </address> <month> September </month> <year> 1992, </year> <booktitle> volume 632 of LNCS, </booktitle> <pages> pages 350-363. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: The natural inclusion of the lambda calculus within rewriting logic using explicit substitution was pointed out in [75]. An illuminating investigation of parallel computations in the lambda calculus using rewriting logic has been carried out by Laneve and Montanari <ref> [52, 53] </ref>.
Reference: 53. <author> C. Laneve and U. Montanari. </author> <title> Axiomatizing permutation equivalence. </title> <note> Mathemat ical Structures in Computer Science, 1994. To appear. </note>
Reference-contexts: The natural inclusion of the lambda calculus within rewriting logic using explicit substitution was pointed out in [75]. An illuminating investigation of parallel computations in the lambda calculus using rewriting logic has been carried out by Laneve and Montanari <ref> [52, 53] </ref>. <p> An illuminating investigation of parallel computations in the lambda calculus using rewriting logic has been carried out by Laneve and Montanari [52, 53]. Before addressing the case of the lambda calculus, Laneve and Montanari <ref> [53] </ref> first clarify the exact relationship between the equivalence of rewrites obtained by the equations identifying proof terms in the free model T R (X ) of a rewrite theory R, and Boudol's notion of permutation equivalence for term rewriting systems using the residual calculus [17].
Reference: 54. <author> F. William Lawvere. </author> <title> Functorial semantics of algebraic theories. </title> <booktitle> Proceedings, National Academy of Sciences, </booktitle> <volume> 50 </volume> <pages> 869-873, </pages> <year> 1963. </year> <title> Summary of Ph.D. </title> <type> Thesis, </type> <institution> Columbia University. </institution>
Reference-contexts: rewriting chosen in Simple Maude has also in their experience particularly good features for efficient implementation. 6 Other Developments and Research Directions I include here several research developments that are more topical and can give the reader a more comprehensive view of the entire research program. 6.1 2-Category Models Lawvere <ref> [54] </ref> made the seminal discovery that, given an equational theory T = (; E) and a -algebra A satisfying E, the assignment to each E-equivalence class [t (x 1 ; : : : ; x n )] of its associated functional interpretation in A, A [t] : A n ! A
Reference: 55. <author> U. Lechner. </author> <title> Object-oriented specification of distributed systems in the -calculus and Maude. </title> <booktitle> To appear in Proc. 1 st Intl. Workshop on Rewriting Logic and its Applications, </booktitle> <address> ENTCS, </address> <publisher> North Holland, </publisher> <year> 1996. </year>
Reference-contexts: Narciso Mart-Oliet and I are currently studying how these two levels can be best integrated within a unified wide-spectrum approach to the specification, prototyping, and declarative programming of concurrent systems; Ulrike Lechner has independently proposed a two-level integration of this kind as well <ref> [56, 55] </ref>. 3 Models We first sketch the construction of initial and free models for a rewrite theory R = (; E; L; R). <p> Modal or temporal logics seem good candidates for this more abstract level of specification. Lechner and Lengauer [56] and more recently Lechner <ref> [55] </ref> have proposed the modal -calculus as that more abstract level of specification. Modal -calculus specifications can then be refined into more specific ones until reaching a rewriting logic specification. Mart-Oliet and I are also investigating an adequate modal logic for similar purposes.
Reference: 56. <author> U. Lechner and C. Lengauer. </author> <title> Modal -Maude. To appear in Object Orientation with Parallelism and Persistence, </title> <editor> B. Freitag, C.B. Jones, C. Lengauer and H.-J. Schek, editors, </editor> <publisher> Kluwer, </publisher> <year> 1996. </year>
Reference-contexts: Narciso Mart-Oliet and I are currently studying how these two levels can be best integrated within a unified wide-spectrum approach to the specification, prototyping, and declarative programming of concurrent systems; Ulrike Lechner has independently proposed a two-level integration of this kind as well <ref> [56, 55] </ref>. 3 Models We first sketch the construction of initial and free models for a rewrite theory R = (; E; L; R). <p> Modal or temporal logics seem good candidates for this more abstract level of specification. Lechner and Lengauer <ref> [56] </ref> and more recently Lechner [55] have proposed the modal -calculus as that more abstract level of specification. Modal -calculus specifications can then be refined into more specific ones until reaching a rewriting logic specification. Mart-Oliet and I are also investigating an adequate modal logic for similar purposes.
Reference: 57. <author> U. Lechner, C. Lengauer, F. Nickl, and M. Wirsing. </author> <title> How to overcome the inher itance anomaly. </title> <note> To appear in Proc.ECOOP'96 , Springer LNCS, </note> <year> 1996. </year>
Reference-contexts: I used these ideas in [77] to show how the inheritance anomaly can be resolved by adopting a declarative programming style with rewrite rules. A more recent paper by Lechner, Lengauer, Nickl and Wirsing <ref> [57] </ref> proposes additional rewriting logic techniques to give a somewhat different solution to this problem. Object interaction need not be asynchronous. In systems different from Actor systems it may involve events in which several objects, with or without the prompting of messages, synchronously participate in a local transition. <p> This can be accomplished through a number of subobjects under an object, to which many tasks of the object can be delegated in parallel. For Maude, this idea of "objects within objects" was suggested in [76] and is also used in <ref> [57] </ref>.
Reference: 58. <author> U. Lechner, C. Lengauer, and M. Wirsing. </author> <title> An object-oriented airport. </title> <editor> In E. Astesiano, G. Reggio, and A. Tarlecki, editors, </editor> <title> Recent Trends in Data Type Specification, </title> <address> Santa Margherita, Italy, </address> <month> May/June </month> <year> 1994, </year> <pages> pages 351-367. </pages> <publisher> Springer LNCS 906, </publisher> <year> 1995. </year>
Reference-contexts: Besides the work already cited, a number of other authors have developed various object-oriented applications of rewriting logic. For example, Lechner, Lengauer, and Wirsing have carried out an ambitious case study investigating the expressiveness of rewriting logic and Maude for object-oriented specification and have explored refinement concepts in <ref> [58] </ref>; and Wirsing Nickl and Lech-ner [106] have proposed the rewriting logic-based OOSpectrum formalism for formal object-oriented specifications. <p> A similar notion has also been proposed and used by Lechner Lengauer and Wirsing in <ref> [58] </ref>. Yet another recent development that seems promising for reasoning about behavioral satisfaction and that may provide more flexible ways of refining rewriting logic specifications is Diaconescu's notion of hidden sorted rewriting logic [32]. Viry has developed a very useful program transformation techniques for rewrite theories using completion methods [102].
Reference: 59. <author> J. Levy. </author> <title> A higher order unification algorithm for bi-rewriting systems. </title> <editor> In J. Agust and P. Garca, editors, </editor> <booktitle> Segundo Congreso Programacion Declarativa, </booktitle> <pages> pages 291-305, </pages> <address> Blanes, Spain, </address> <month> September </month> <year> 1993. </year> <month> CSIC. </month>
Reference-contexts: Reasoning theories provide a logic-independent architecture for combining and interoperating different mechanized formal systems. They are closely related to rewrite theories and there are fruitful synergies between both concepts that Carolyn Talcott and I are currently investigating [82]. The work of Levy and Agust <ref> [60, 59, 61] </ref> and the more recent work of Schor-lemmer [95] explores the relationships between rewriting logic and their general bi-rewriting approach to automated deduction. 6.5 Reflection and Strategies Intuitively, a logic is reflective if it can represent its metalevel at the object level in a sound and coherent way.
Reference: 60. <author> J. Levy and J. Agust. Bi-rewriting, </author> <title> a term rewriting technique for monotonic order relations. </title> <editor> In C. Kirchner, editor, </editor> <booktitle> Proc. Fifth Int. Conf. on Rewriting Techniques and Applications, </booktitle> <address> Montreal, Canada, </address> <month> June </month> <year> 1993, </year> <booktitle> volume 690 of LNCS, </booktitle> <pages> pages 17-31. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Reasoning theories provide a logic-independent architecture for combining and interoperating different mechanized formal systems. They are closely related to rewrite theories and there are fruitful synergies between both concepts that Carolyn Talcott and I are currently investigating [82]. The work of Levy and Agust <ref> [60, 59, 61] </ref> and the more recent work of Schor-lemmer [95] explores the relationships between rewriting logic and their general bi-rewriting approach to automated deduction. 6.5 Reflection and Strategies Intuitively, a logic is reflective if it can represent its metalevel at the object level in a sound and coherent way.
Reference: 61. <author> J.-J. Levy. </author> <title> Optimal reductions in the lambda calculus. </title> <editor> In J. P. Seldin and J. R. Hindley, editors, </editor> <booktitle> To H.B. Curry: Essays on Combinatory Logic, Lambda Calculus and Formalism, </booktitle> <pages> pages 159-191. </pages> <publisher> Academic Press, </publisher> <year> 1980. </year>
Reference-contexts: Reasoning theories provide a logic-independent architecture for combining and interoperating different mechanized formal systems. They are closely related to rewrite theories and there are fruitful synergies between both concepts that Carolyn Talcott and I are currently investigating [82]. The work of Levy and Agust <ref> [60, 59, 61] </ref> and the more recent work of Schor-lemmer [95] explores the relationships between rewriting logic and their general bi-rewriting approach to automated deduction. 6.5 Reflection and Strategies Intuitively, a logic is reflective if it can represent its metalevel at the object level in a sound and coherent way.
Reference: 62. <author> Patrick Lincoln, Narciso Mart-Oliet, and Jose Meseguer. </author> <title> Specification, trans formation, and programming of concurrent systems in rewriting logic. In G.E. Blelloch, </title> <editor> K.M. Chandy, and S. Jagannathan, editors, </editor> <booktitle> Specification of Parallel Algorithms, </booktitle> <pages> pages 309-339. </pages> <booktitle> DIMACS Series, </booktitle> <volume> Vol. 18, </volume> <publisher> American Mathematical Society, </publisher> <year> 1994. </year>
Reference-contexts: In rewriting logic, this travelling is accounted for in a very abstract way by the structural laws of associativity, commutativity, and identity. The above two rules illustrate the asynchronous message passing communication between objects typical of Actor systems [3, 2]. Generalizing slightly the Actor case, the Simple Maude language <ref> [62] </ref> adopts the following general form of conditional rules for asynchronous message passing interaction between objects (y) (M ) hO : F j attsi ! (hO : F 0 j atts 0 i) hQ 1 : D 1 j atts 00 1 i : : : hQ p : D p <p> However, in cases where the synchronization and communication demands become quite high, it may be better to consider such synchronous rules as higher level executable specifications of the desired behavior, and to implement them at a lower level by asynchronous message passing. The paper <ref> [62] </ref> shows that, under quite general assumptions, it is indeed possible to transform synchronous rules of the form (z) into simpler Actor-like rules of the form (y). Besides the work already cited, a number of other authors have developed various object-oriented applications of rewriting logic. <p> Graph rewrite rules are then a special case of synchronous object-oriented rewrite rules (z) that do not involve any messages and that rewrite configurations that are graphs into other configurations that are also graphs. We illustrate these ideas with an example borrowed from <ref> [62] </ref>, namely a single graph rewrite rule accomplishing the clustering of a two-dimensional image into its set of connected components. <p> As explained in <ref> [62, 63] </ref>, rules with this additional property, since they allow efficient data mapping at compile time and do not require any garbage collection, can be implemented in parallel very efficiently. They typically express highly regular parallel computing problems. <p> The second, smaller subset gives rise to Simple Maude <ref> [62] </ref>, a sublanguage meant to be used as a machine-independent parallel programming language. Program transformation techniques can then support passage from general rewrite theories to Maude modules and from them to modules in Simple Maude. Figure 3 summarizes the three levels involved. <p> Lincoln, Mart-Oliet and I have studied several program transformation techniques, including coherence completion, to pass from rewrite theories to theories implementable in Maude, and from Maude specifications to efficient parallel programs in Simple Maude <ref> [62] </ref>. 6.4 Rewriting Logic as a Logical Framework Rewriting logic is like a coin with two inseparable sides: one computational and another logical. A proof term is a concurrent computation and viceversa.
Reference: 63. <author> Patrick Lincoln, Narciso Mart-Oliet, Jose Meseguer, and Livio Ricciulli. </author> <title> Com piling rewriting onto SIMD and MIMD/SIMD machines. </title> <booktitle> In Proceedings of PARLE'94, 6th International Conference on Parallel Architectures and Languages Europe, </booktitle> <pages> pages 37-48. </pages> <publisher> Springer LNCS 817, </publisher> <year> 1994. </year>
Reference-contexts: As explained in <ref> [62, 63] </ref>, rules with this additional property, since they allow efficient data mapping at compile time and do not require any garbage collection, can be implemented in parallel very efficiently. They typically express highly regular parallel computing problems. <p> Patrick Lincoln, Livio Ricciulli and I have developed parallel compilation techniquies and a prototype Simple Maude compiler <ref> [63] </ref> that generates parallel code for the Rewrite Rule Machine that we are developing at SRI [64].
Reference: 64. <author> Patrick Lincoln, Jose Meseguer, and Livio Ricciulli. </author> <title> The Rewrite Rule Machine Node Architecture and its Performance. </title> <booktitle> In Proceedings of CONPAR'94, </booktitle> <address> Linz, Austria, </address> <month> September </month> <year> 1994, </year> <pages> pages 509-520. </pages> <publisher> Springer LNCS 854, </publisher> <year> 1994. </year>
Reference-contexts: Patrick Lincoln, Livio Ricciulli and I have developed parallel compilation techniquies and a prototype Simple Maude compiler [63] that generates parallel code for the Rewrite Rule Machine that we are developing at SRI <ref> [64] </ref>.
Reference: 65. <author> R.P. Lippmann. </author> <title> An introduction to computing with neural nets. </title> <journal> IEEE ASSP Magazine, </journal> <pages> pages 4-22, </pages> <month> April </month> <year> 1987. </year>
Reference-contexts: Variants in which the FIFO buffer is bounded, as well as the tagged case can be handled with similar firing rules. 4.12 Neural Networks Artificial neural networks <ref> [65] </ref> are another important model of parallel computation. They are particularly well-suited for providing massively parallel solutions to pattern recognition problems.
Reference: 66. <author> The Chemical Abstract Machine. Gerard Berry and Gerard Boudol. </author> <booktitle> In Proc. POPL'90, </booktitle> <pages> pages 81-94. </pages> <publisher> ACM, </publisher> <year> 1990. </year>
Reference-contexts: logic to Petri net algebraic specification have been developed by Battiston, Crespi, De Cindio, and Mauri [8], and also by Bettaz and Maouche [12, 13]. 4.5 Gamma and the Chemical Abstract Machine The Gamma language of Ban^atre and Le Metayer [7], and Berry and Boudol's chemical abstract machine, or cham <ref> [66, 10] </ref>, share the metaphor of viewing a certain kind of distributed state as a "solution" in which many "molecules" float. Concurrent transitions are then viewed as "reactions" that can occur simultaneously in many points of the solution.
Reference: 67. <author> Saunders MacLane. </author> <title> Categories for the working mathematician. </title> <publisher> Springer-Verlag, </publisher> <year> 1971. </year>
Reference-contexts: following universal property: Given an R-system S, each function F : X ! jSj extends uniquely to an R-homomorphism F " : T R (X) ! S. 4 Note that we use diagrammatic order for the horizontal , ff fl fi, and vertical , fl; ffi, composition of natural transformations <ref> [67] </ref>. 4 Rewriting Logic as a Semantic Framework for Concurrency Regarding the computational uses of rewriting logic, an obvious question to ask is how general and natural rewriting logic is as a semantic framework in which to express different languages and models of computation. <p> As pointed out in [74], this situation generalizes very naturally to the case of rewriting logic, where models are algebraic structures on categories instead than on sets. That is, the ground on which they exist is the 2-category <ref> [67, 45] </ref> Cat, instead of the category Set. Intuitively, C is a 2-category when the morphisms C (A; B) between two objects form not just a set, but a category, and the two arrow compositions fit together in a coherent way.
Reference: 68. <author> Narciso Mart-Oliet and Jose Meseguer. </author> <title> Rewriting logic as a logical and seman tic framework. </title> <type> Technical Report SRI-CSL-93-05, </type> <institution> SRI International, Computer Science Laboratory, </institution> <month> August </month> <year> 1993. </year> <note> To appear in D. </note> <editor> Gabbay, ed., </editor> <booktitle> Handbook of Philosophical Logic, </booktitle> <publisher> Oxford University Press. </publisher>
Reference-contexts: In this way, a seamless integration of parallel functional programming within the more general framework of rewriting logic is naturally achieved. More abstractly, such an integration can be viewed as a conservative embedding of equational logic within rewriting logic <ref> [68] </ref>. For first-order functional programs the above remarks make clear how they can be regarded as a special case of rewriting logic. However, for higher-order functions, since their formalization is somewhat different, more has to be said. The key observation is that rewriting logic allows rewriting modulo equational axioms. <p> See [75] for some more discussion. 4.6 CCS, LOTOS and the -Calculus Kokichi Futatsugi, Timothy Winkler and I [78], and in a different later version Narciso Mart-Oliet and I <ref> [68] </ref>, have shown two different ways in which Milner's CCS can be naturally represented in rewriting logic. One representation essentially treats the transitions as rewrite rules, with some syntactic care to record in the term the actions that have been performed. <p> The other representation considers the operational semantics rules of CCS as the rewrite rules of a rewrite theory and provides a more declarative account. In both of them the representation exactly characterizes the legal CCS computations <ref> [68] </ref>. Another rewriting specification of CCS in a double category model that is a natural generalization of the 2-category models of rewriting logic has been proposed by Gadducci and Montanari [38] and is discussed in Section 6.1. <p> Doing justice to this logical side is beyond the scope of this paper, but good evidence, including a good number of examples of logic representations can be found in two joint papers with Mart-Oliet <ref> [68, 69] </ref>. Additional quite impressive evidence is also provided by research based on the ELAN language [46, 103, 49, 14, 18], that stresses the logical framework applications of rewriting logic.
Reference: 69. <author> Narciso Mart-Oliet and Jose Meseguer. </author> <title> General logics and logical frameworks. </title> <editor> In D. Gabbay, editor, </editor> <booktitle> What is a Logical System?, </booktitle> <pages> pages 355-392. </pages> <publisher> Oxford University Press, </publisher> <year> 1994. </year>
Reference-contexts: Doing justice to this logical side is beyond the scope of this paper, but good evidence, including a good number of examples of logic representations can be found in two joint papers with Mart-Oliet <ref> [68, 69] </ref>. Additional quite impressive evidence is also provided by research based on the ELAN language [46, 103, 49, 14, 18], that stresses the logical framework applications of rewriting logic.
Reference: 70. <author> Narciso Mart-Oliet and Jose Meseguer. </author> <title> Action and change in rewriting logic. </title> <editor> In R. Pareschi and B. Fronhoefer, editors, </editor> <booktitle> Theoretical Approaches to Dynamic Worlds in Artificial Intelligence and Computer Science. </booktitle> <year> 1996. </year> <note> To be published by Kluwer Academic Publisher. </note>
Reference-contexts: Mart-Oliet and I have explained the advantages of rewriting logic for formally representing change, have illustrated those advantages with many examples, and have shown how other logical approaches to dynamic change can be subsumed within rewriting logic <ref> [70] </ref>. 6.7 Nondeterminism A poset is a poor man's category. Therefore, the different algebraic powerset models of nondeterminism can be understood as categories. In this way, as explained in [75], many models of nondeterminism can be viewed as restricted instances of models of rewrite theories.
Reference: 71. <author> Satoshi Matsuoka and Akinori Yonezawa. </author> <title> Analysis of inheritance anomaly in object-oriented concurrent programming languages. </title> <editor> In Gul Agha, Peter Weg-ner, and Akinori Yonezawa, editors, </editor> <booktitle> Research Directions in Concurrent Object-Oriented Programming, </booktitle> <pages> pages 107-150. </pages> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: In two very fine papers [100, 99] she then uses rewriting logic to reason formally about the behavior of actors, including their infinite fair computations. An important problem in concurrent object-oriented programming to which rewriting logic has been successfully applied is the so-called inheritance anomaly <ref> [71] </ref>, that is, the serious difficulties often encountered when trying to integrate object-oriented inheritance and concurrency in a programming language.
Reference: 72. <author> Jose Meseguer. </author> <title> A logical theory of concurrent objects. </title> <booktitle> In ECOOP-OOPSLA'90 Conference on Object-Oriented Programming, </booktitle> <address> Ottawa, Canada, </address> <month> October </month> <year> 1990, </year> <pages> pages 101-115. </pages> <publisher> ACM, </publisher> <year> 1990. </year>
Reference-contexts: The above representation of objects is the one adopted in the Maude language <ref> [72, 83, 76] </ref>. It assumes, as it is common in many object-oriented systems, that each object has a unique name, different from that of all other objects.
Reference: 73. <author> Jose Meseguer. </author> <title> Rewriting as a unified model of concurrency. </title> <booktitle> In Proceedings of the Concur'90 Conference, </booktitle> <address> Amsterdam, </address> <month> August </month> <year> 1990, </year> <pages> pages 384-400. </pages> <publisher> Springer LNCS 458, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction Since the first conference paper on rewriting logic in CONCUR'90 <ref> [73] </ref>, dozens of authors in Europe, the US, Japan, and Northern Africa have vigorously advanced the rewriting logic research program in over sixty papers. By a serendipitous coincidence, the first international workshop on rewriting logic will take place in Asilomar, California, the week after CONCUR'96.
Reference: 74. <author> Jose Meseguer. </author> <title> Rewriting as a unified model of concurrency. </title> <type> Technical Report SRI-CSL-90-02, </type> <institution> SRI International, Computer Science Laboratory, </institution> <month> February </month> <year> 1990. </year> <note> Revised June 1990. </note>
Reference-contexts: Section 4 explains how different models of concurrent computation can be naturally represented in rewriting logic. Some of these model representations were known from earlier work <ref> [74, 75] </ref>; they are briefly reviewed here in an updated form. Others, such as the treatment of simultaneous access to objects, graph rewriting, dataflow, neural networks, and real-time systems are new and are therefore discussed in greater detail. <p> As pointed out in <ref> [74] </ref>, this situation generalizes very naturally to the case of rewriting logic, where models are algebraic structures on categories instead than on sets. That is, the ground on which they exist is the 2-category [67, 45] Cat, instead of the category Set. <p> The horizontal composition of proofs m n 1 ([v 1 ];:::;[v n ]) [t 0 ] [fi]([ff 1 ];:::;[ff n ]) 7 7 is then given by the proof term [t (ff=x); fi (v=x)] : [t (u=x)] ! [t 0 (v=x)]. The point is that, as mentioned in <ref> [74] </ref>, L R does for R-systems what in the Set case L T does for T -algebras. <p> An approach to refinement of rewrite theories by means of maps R ! Q that can be best understood as 2-functors L R ! L Q between the corresponding Lawvere theories was proposed in <ref> [74] </ref>. A similar notion has also been proposed and used by Lechner Lengauer and Wirsing in [58]. Yet another recent development that seems promising for reasoning about behavioral satisfaction and that may provide more flexible ways of refining rewriting logic specifications is Diaconescu's notion of hidden sorted rewriting logic [32].
Reference: 75. <author> Jose Meseguer. </author> <title> Conditional rewriting logic as a unified model of concurrency. </title> <journal> Theoretical Computer Science, </journal> <volume> 96(1) </volume> <pages> 73-155, </pages> <year> 1992. </year>
Reference-contexts: Section 4 explains how different models of concurrent computation can be naturally represented in rewriting logic. Some of these model representations were known from earlier work <ref> [74, 75] </ref>; they are briefly reviewed here in an updated form. Others, such as the treatment of simultaneous access to objects, graph rewriting, dataflow, neural networks, and real-time systems are new and are therefore discussed in greater detail. <p> However, all the ideas presented here have been extended to conditional rules in <ref> [75] </ref> with very general rules of the form r : [t] ! [t 0 ] if [u 1 ] ! [v 1 ] ^ : : : ^ [u k ] ! [v k ]: This increases considerably the expressive power of rewrite theories. <p> Lemma 1. <ref> [75] </ref> For each rewrite rule r : [t (x 1 ; : : : ; x n )] ! [t 0 (x 1 ; : : : ; x n )] in R, the family of morphisms fr ([w]) : [t (w=x)] ! [t 0 (w=x)] j [w] 2 T ;E <p> This defines a category R-Sys in the obvious way. A detailed proof of the following theorem on the existence of initial and free R-systems for the more general case of conditional rewrite theories is given in <ref> [75] </ref>, where the soundness and completeness of rewriting logic for R-system models is also proved. Theorem 3. T R is an initial object in the category R-Sys. <p> In fact, in several formalizations congruence modulo substitution exactly corresponds to alpha-conversion equivalence between lambda terms. The natural inclusion of the lambda calculus within rewriting logic using explicit substitution was pointed out in <ref> [75] </ref>. An illuminating investigation of parallel computations in the lambda calculus using rewriting logic has been carried out by Laneve and Montanari [52, 53]. <p> Algebraically they are axiomatized by an associative and commutative multiset union operation with identity the empty multiset and with constants the places. A transition t in a place-transition net is simply a labelled rewrite rule t : M ! M 0 between two multiset markings <ref> [75] </ref>. Therefore, we can view a net N as a rewrite theory N with the above algebraic axiomatization for its markings and with one rewrite rule per transition, so that firing of a transition exactly corresponds to rewriting modulo associativity, commutativity and identity with the corresponding rewrite rule. <p> Rewriting logic offers a very natural framework for giving semantics to different kinds of algebraic Petri nets of this kind. For the case of Engelfriet et al.'s higher level Petri nets, called POPs [35, 36], this was pointed out in <ref> [75] </ref>. <p> See <ref> [75] </ref> for some more discussion. 4.6 CCS, LOTOS and the -Calculus Kokichi Futatsugi, Timothy Winkler and I [78], and in a different later version Narciso Mart-Oliet and I [68], have shown two different ways in which Milner's CCS can be naturally represented in rewriting logic. <p> Many Chandy and Jayadev Misra. As shown in <ref> [75] </ref> the rewriting logic approach to object-oriented systems yields UNITY's model of computation as a special case in a direct way. The details are given in [75], but the basic idea is straightforward. <p> Many Chandy and Jayadev Misra. As shown in <ref> [75] </ref> the rewriting logic approach to object-oriented systems yields UNITY's model of computation as a special case in a direct way. The details are given in [75], but the basic idea is straightforward. <p> Therefore, the different algebraic powerset models of nondeterminism can be understood as categories. In this way, as explained in <ref> [75] </ref>, many models of nondeterminism can be viewed as restricted instances of models of rewrite theories.
Reference: 76. <author> Jose Meseguer. </author> <title> A logical theory of concurrent objects and its realization in the Maude language. </title> <editor> In Gul Agha, Peter Wegner, and Akinori Yonezawa, editors, </editor> <booktitle> Research Directions in Concurrent Object-Oriented Programming, </booktitle> <pages> pages 314-390. </pages> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: The above representation of objects is the one adopted in the Maude language <ref> [72, 83, 76] </ref>. It assumes, as it is common in many object-oriented systems, that each object has a unique name, different from that of all other objects. <p> In 5 Note that rewrite rules for natural number addition have also been applied. fact, by giving appropriate rewrite rules for the creation and deletion of objects <ref> [76] </ref>, it is not hard to ensure that this property is preserved by the rules of an object-oriented system. However, rewriting logic as such is neutral about the treatment of object identity and many other such matters. <p> Using an order-sorted type structure [40], class inheritance can be naturally supported in rewriting logic; and message redefinition in subclasses can be described by appropriate composition operations between rewrite theories <ref> [76] </ref>. I used these ideas in [77] to show how the inheritance anomaly can be resolved by adopting a declarative programming style with rewrite rules. A more recent paper by Lechner, Lengauer, Nickl and Wirsing [57] proposes additional rewriting logic techniques to give a somewhat different solution to this problem. <p> Inter- and intra-object concurrency can be combined to maximize overall concurrency. This can be accomplished through a number of subobjects under an object, to which many tasks of the object can be delegated in parallel. For Maude, this idea of "objects within objects" was suggested in <ref> [76] </ref> and is also used in [57]. <p> This can be accomplished by making the notion of reading or writing local to particular attributes within an object. This is related to the notational convention in object-oriented Maude specifications <ref> [83, 76] </ref> of not mentioning in a given rule those attributes of an object that are not relevant for that rule. <p> As usual for object-oriented systems, the rule must also satisfy the additional requirement of never leading to a situation where two objects have the same name. Several simple solutions in the style described in <ref> [76] </ref> are possible for this. For example, we may assume that, when rules can create new nodes, the values stored in the nodes are actually pairs (v; n) consisting of the actual value v and a natural number n. <p> In our group at SRI, Manuel Clavel, Steven Eker, Patrick Lincoln and I are working on the implementation of an interpreter for Maude <ref> [83, 76, 22] </ref>. Maude is based on a typed version of rewriting logic that is order-sorted and supports sort constraints [79]. It has functional modules, that are Church-Rosser and terminating equational theories, system modules, that specify general rewrite theories, and object-oriented modules, that provide syntactic sugar for object-oriented rewrite theories.
Reference: 77. <author> Jose Meseguer. </author> <title> Solving the inheritance anomaly in concurrent object-oriented programming. </title> <editor> In Oscar M. Nierstrasz, editor, </editor> <booktitle> Proc. ECOOP'93, </booktitle> <pages> pages 220-246. </pages> <publisher> Springer LNCS 707, </publisher> <year> 1993. </year>
Reference-contexts: Using an order-sorted type structure [40], class inheritance can be naturally supported in rewriting logic; and message redefinition in subclasses can be described by appropriate composition operations between rewrite theories [76]. I used these ideas in <ref> [77] </ref> to show how the inheritance anomaly can be resolved by adopting a declarative programming style with rewrite rules. A more recent paper by Lechner, Lengauer, Nickl and Wirsing [57] proposes additional rewriting logic techniques to give a somewhat different solution to this problem. Object interaction need not be asynchronous.
Reference: 78. <author> Jose Meseguer, Kokichi Futatsugi, and Timothy Winkler. </author> <title> Using rewriting logic to specify, program, integrate, and reuse open concurrent systems of cooperating agents. </title> <booktitle> In Proceedings of the 1992 International Symposium on New Models for Software Architecture, </booktitle> <address> Tokyo, Japan, </address> <month> November </month> <year> 1992, </year> <pages> pages 61-106. </pages> <institution> Research Institute of Software Engineering, </institution> <year> 1992. </year>
Reference-contexts: See [75] for some more discussion. 4.6 CCS, LOTOS and the -Calculus Kokichi Futatsugi, Timothy Winkler and I <ref> [78] </ref>, and in a different later version Narciso Mart-Oliet and I [68], have shown two different ways in which Milner's CCS can be naturally represented in rewriting logic. <p> LOTOS [42] is a specification language combining the two formalisms of algebraic data types and (an extension of) CCS. It is pointed out in <ref> [78] </ref> that writing an executable specification of LOTOS in rewriting logic that could be used as a LOTOS interpreter is both very natural and straightforward. In fact, an interpreter of this kind has been written by Futatsugi and his collaborators with very good results [86].
Reference: 79. <author> Jose Meseguer and Joseph Goguen. </author> <title> Order-sorted algebra solves the constructor selector, multiple representation and coercion problems. </title> <journal> Information and Computation, </journal> <volume> 103(1) </volume> <pages> 114-158, </pages> <year> 1993. </year>
Reference-contexts: In our group at SRI, Manuel Clavel, Steven Eker, Patrick Lincoln and I are working on the implementation of an interpreter for Maude [83, 76, 22]. Maude is based on a typed version of rewriting logic that is order-sorted and supports sort constraints <ref> [79] </ref>. It has functional modules, that are Church-Rosser and terminating equational theories, system modules, that specify general rewrite theories, and object-oriented modules, that provide syntactic sugar for object-oriented rewrite theories. These modules can be combined by module composition operations in the OBJ style.
Reference: 80. <author> Jose Meseguer and Ugo Montanari. </author> <title> Petri nets are monoids. </title> <journal> Information and Computation, </journal> <volume> 88 </volume> <pages> 105-155, </pages> <year> 1990. </year>
Reference-contexts: result, showing that the equational theory of true concurrency provided by rewriting logic agrees with more traditional notions of true concurrency in the case of Petri nets, has been proved by Degano, Meseguer and Montanari [28, 29] using an earlier categorical model of Petri net computations denoted T [N ] <ref> [80] </ref> that is in fact identical to T N . Since Petri nets are in some ways a very simple concurrency model, in practice it is often convenient to specify systems at a higher level, yet using the same basic properties of Petri nets.
Reference: 81. <author> Jose Meseguer and Xiaolei Qian. </author> <title> A logical semantics for object-oriented databases. </title> <booktitle> In Proc. International SIGMOD Conference on Management of Data, </booktitle> <pages> pages 89-98. </pages> <publisher> ACM, </publisher> <year> 1993. </year>
Reference-contexts: The benefits of rewriting logic for execution of, and formal reasoning about, object-oriented discrete event simulations is another application area currently being investigated by Landauer [51]. Another area where rewriting logic has proved useful is in the specification and programming of object-oriented databases. Meseguer and Quian <ref> [81] </ref> have shown how the equational approach to object-oriented databases and bulk data types taken by other database researchers can be extended thanks to the use of rewrite rules to deal with the dynamic aspect of database updates, so that a formal executable specification of all the aspects of an object-oriented
Reference: 82. <author> Jose Meseguer and Carolyn Talcott. </author> <title> Reasoning theories and rewriting logic. </title> <type> Manuscript, </type> <institution> Stanford University, </institution> <month> June </month> <year> 1996. </year>
Reference-contexts: Reasoning theories provide a logic-independent architecture for combining and interoperating different mechanized formal systems. They are closely related to rewrite theories and there are fruitful synergies between both concepts that Carolyn Talcott and I are currently investigating <ref> [82] </ref>.
Reference: 83. <author> Jose Meseguer and Timothy Winkler. </author> <title> Parallel programming in Maude. </title> <editor> In J.-P. Ban^atre and D. Le Metayer, editors, </editor> <booktitle> Research Directions in High-level Parallel Programming Languages, </booktitle> <pages> pages 253-293. </pages> <publisher> Springer LNCS 574, </publisher> <year> 1992. </year> <note> Also Technical Report SRI-CSL-91-08, </note> <institution> SRI International, Computer Science Laboratory, </institution> <month> November </month> <year> 1991. </year>
Reference-contexts: The above representation of objects is the one adopted in the Maude language <ref> [72, 83, 76] </ref>. It assumes, as it is common in many object-oriented systems, that each object has a unique name, different from that of all other objects. <p> This can be accomplished by making the notion of reading or writing local to particular attributes within an object. This is related to the notational convention in object-oriented Maude specifications <ref> [83, 76] </ref> of not mentioning in a given rule those attributes of an object that are not relevant for that rule. <p> In our group at SRI, Manuel Clavel, Steven Eker, Patrick Lincoln and I are working on the implementation of an interpreter for Maude <ref> [83, 76, 22] </ref>. Maude is based on a typed version of rewriting logic that is order-sorted and supports sort constraints [79]. It has functional modules, that are Church-Rosser and terminating equational theories, system modules, that specify general rewrite theories, and object-oriented modules, that provide syntactic sugar for object-oriented rewrite theories.
Reference: 84. <author> Robin Milner. </author> <title> Functions as processes. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 2(2) </volume> <pages> 119-141, </pages> <year> 1992. </year>
Reference-contexts: More recently, Viry [101] has given a very natural specification of the calculus in rewriting logic. The realization that the operational semantics of the -calculus can be naturally described using rewrite rules modulo the associativity and commutativity of a multiset union operator goes back to Milner <ref> [84] </ref>. However, as in the case of rewriting logic specifications of the lambda calculus discussed in Section 4.1, binding operators become an extra feature that should be accounted for.
Reference: 85. <author> U. Montanari and F. Rossi. </author> <title> Contextual nets. </title> <journal> Acta Informatica, </journal> <volume> 32 </volume> <pages> 545-596, </pages> <year> 1995. </year>
Reference-contexts: The slightly more general formulation x = fx j 0g where x ranges over elements in the multiset, allows this, and yields as a special case the place/transition version of the contextual nets with positive contexts model of computation with shared reads proposed by Montanari and Rossi <ref> [85] </ref>.
Reference: 86. <author> K. Ohmaki, K. Futatsugi, and K. Takahashi. </author> <title> A basic LOTOS simulator in OBJ. </title> <booktitle> In Proceedings of the International Conference of Information Technology Commemorating the 30th Anniversary of the Information Processing Society of Japan (InfoJapan'90), </booktitle> <pages> pages 497-504. </pages> <address> IPSJ, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: It is pointed out in [78] that writing an executable specification of LOTOS in rewriting logic that could be used as a LOTOS interpreter is both very natural and straightforward. In fact, an interpreter of this kind has been written by Futatsugi and his collaborators with very good results <ref> [86] </ref>.
Reference: 87. <author> Peter Csaba Olveczky, Piotr Kosiuczenko, and Martin Wirsing. </author> <title> An object oriented algebraic steam-boiler control specification. </title> <editor> In Jean-Raymond Abrial, Egon Borger, and Hans Langmaack, editors, </editor> <title> The Steam-Boiler Case Study Book. </title> <publisher> Springer-Verlag, </publisher> <year> 1996. </year> <note> To appear. </note>
Reference-contexts: TRL has been shown well-suited for giving object-oriented specifications of complex hybrid systems such as the steam-boiler <ref> [87] </ref>. In fact, rewriting logic object-oriented specifications in the Maude language have a natural extension to TRL object-oriented specifications in Timed Maude [87]. <p> TRL has been shown well-suited for giving object-oriented specifications of complex hybrid systems such as the steam-boiler <ref> [87] </ref>. In fact, rewriting logic object-oriented specifications in the Maude language have a natural extension to TRL object-oriented specifications in Timed Maude [87]. Although it is in some sense possible to regard rewriting logic as a subcase of TRL in which all rules take zero time, Peter Olveczky and I are currently investigating a different alternative, namely, the suitability of standard rewriting logic for directly specifying real-time systems.
Reference: 88. <author> Peter Csaba Olveczky and Jose Meseguer. </author> <title> Specifying real-time systems in rewrit ing logic. </title> <note> Paper in preparation. </note>
Reference-contexts: A number of frequently used models of real-time computation have a very natural and direct expression in standard rewriting logic. One of the models that Olveczky and I consider in <ref> [88] </ref> is timed automata. <p> Other real-time models such as timed transition systems [41] and hybrid automata [5, 4] have similar straightforward formulations within standard rewriting logic <ref> [88] </ref>.
Reference: 89. <author> Isabel Pita and Narciso Mart-Oliet. </author> <title> A Maude specification of an object ori ented database model for telecomunication networks. </title> <booktitle> To appear in Proc. 1 st Intl. Workshop on Rewriting Logic and its Applications, </booktitle> <address> ENTCS, </address> <publisher> North Holland, </publisher> <year> 1996. </year>
Reference-contexts: More recently, Pita and Mart-Oliet <ref> [89] </ref> have carried out a thorough case study on the application of Maude to the executable specification of a database model for broadcast telecommunication networks. 4.8 Unity UNITY [19] is an elegant and important theory of concurrent programming with an associated logic to reason about the behavior of concurrent programs that
Reference: 90. <author> J.-C. Raoult and F. Voisin. </author> <title> Set-theoretic graph rewriting. </title> <editor> In H.-J. Schneider and H. Ehrig, editors, </editor> <booktitle> Graph Transformations in Computer Science, </booktitle> <pages> pages 312-325. </pages> <publisher> Springer LNCS 776, </publisher> <year> 1994. </year>
Reference-contexts: Axiomatizations in this spirit include those of Bauderon and Courcelle [9], Corradini and Montanari [26], and Raoult and Voisin <ref> [90] </ref>. Taking an object-oriented point of view allows a particularly simple axiomatization of graph rewriting in rewriting logic, similar in some respects|although with some notable differences|to the algebraic axiomatization of Raoult and Voisin [90] where graph rewriting is also understood as multiset rewriting. <p> this spirit include those of Bauderon and Courcelle [9], Corradini and Montanari [26], and Raoult and Voisin <ref> [90] </ref>. Taking an object-oriented point of view allows a particularly simple axiomatization of graph rewriting in rewriting logic, similar in some respects|although with some notable differences|to the algebraic axiomatization of Raoult and Voisin [90] where graph rewriting is also understood as multiset rewriting. <p> It has the great advantage of making the matching of a graph rewrite rule completely local and context independent, which it is not the case in either the pushout constructions, or in the formulation of Raoult and Voisin <ref> [90] </ref>. By contrast, a context-dependent rule in which one needs to check that no dangling pointers are created in the rest of the graph by the elimination of a node may require a global search in an arbitrarily big context graph before each rewrite step.
Reference: 91. <author> H. Reichel. </author> <title> An approach to object semantics based on terminal co-algebras. </title> <note> To appear in Mathematical Structures in Computer Science, </note> <year> 1995. </year> <title> Presented at Dagstuhl Seminar on Specification and Semantics, </title> <address> Schloss Dagstuhl, Germany, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: From a different, (co-)algebraic, perspective, Reichel has found rewriting logic useful in his final coalgebra semantics for objects <ref> [91] </ref>. The benefits of rewriting logic for execution of, and formal reasoning about, object-oriented discrete event simulations is another application area currently being investigated by Landauer [51]. Another area where rewriting logic has proved useful is in the specification and programming of object-oriented databases.
Reference: 92. <editor> G. Saake and A. Sernadas, editors. </editor> <booktitle> Information Systems|Correctness and Reusability. </booktitle> <institution> Technische Universitat Braunschweig, </institution> <address> Information-Berichte 91-03, </address> <year> 1991. </year>
Reference-contexts: Denker and Gogolla [30] have used Maude to give semantics to the TROLL light object-oriented database specification language; this work has the advantage of providing a formal link between rewriting logic and the algebraic approach to information systems proposed by the IS-CORE Group <ref> [92, 44] </ref>.
Reference: 93. <author> Vladimiro Sassone, Jose Meseguer, and Ugo Montanari. </author> <title> Inductive completion of monoidal categories and infinite net computations. </title> <note> Submitted for publication. </note>
Reference-contexts: Sassone, Montanari and I have studied in detail this more abstract notion of infinite computation in the particular case when R is the rewrite theory of a Petri net <ref> [93] </ref>. However, the techniques that we have developed, based on the notion of completion by filtered colimits of a category, should extend naturally to the case of rewrite theories.
Reference: 94. <editor> H.-J. Schneider and H. Ehrig, editors. </editor> <booktitle> Graph Transformations in Computer Sci ence. </booktitle> <publisher> Springer LNCS 776, </publisher> <year> 1994. </year>
Reference-contexts: This case is usually called term graph rewriting and has been studied extensively (see [97] for a representative collection of papers). However, graph rewriting is a very general model and can express many other computations besides functional ones. The theory of graph grammars and graph transformations (see <ref> [33, 94] </ref> for recent conferences) considers graph rewriting in this more general sense. Different mathematical axiomatizations of graph rewriting have been proposed in the literature. The categorical approach using double or single pushouts has been studied quite extensively [33, 94]. <p> The theory of graph grammars and graph transformations (see <ref> [33, 94] </ref> for recent conferences) considers graph rewriting in this more general sense. Different mathematical axiomatizations of graph rewriting have been proposed in the literature. The categorical approach using double or single pushouts has been studied quite extensively [33, 94]. However, for our purposes the most convenient axiomatizations are those in which labelled graphs are axiomatized equationally as an algebraic data type in such a way that graph rewriting becomes rewriting modulo the equations axiomatizing the type.
Reference: 95. <author> M. Schorlemmer. </author> <title> Bi-rewriting rewriting logic. </title> <booktitle> To appear in Proc. 1 st Intl. Work shop on Rewriting Logic and its Applications, </booktitle> <address> ENTCS, </address> <publisher> North Holland, </publisher> <year> 1996. </year>
Reference-contexts: They are closely related to rewrite theories and there are fruitful synergies between both concepts that Carolyn Talcott and I are currently investigating [82]. The work of Levy and Agust [60, 59, 61] and the more recent work of Schor-lemmer <ref> [95] </ref> explores the relationships between rewriting logic and their general bi-rewriting approach to automated deduction. 6.5 Reflection and Strategies Intuitively, a logic is reflective if it can represent its metalevel at the object level in a sound and coherent way.
Reference: 96. <author> Wolfgang Schreiner. </author> <title> Parallel functional programming: an annotated bibliography. </title> <type> Technical report, </type> <institution> Research Institute for Symbolic Computation, Johannes Kepler University, Linz, Austria, </institution> <year> 1993. </year>
Reference-contexts: As a consequence, models hitherto quite distant from each other can be naturally unified and interrelated within a common framework. 4.1 Parallel Functional Programming Parallel functional programming is an important model of parallel computation. A lot of research has been devoted to parallel implementations of functional languages <ref> [96] </ref> and also to parallel dataflow and reduction architectures supporting them.
Reference: 97. <author> M. R. Sleep, M. J. Plasmeijer, and M. C. J. D. vanEekelen, </author> <title> editors. Term Graph Rewriting. </title> <publisher> Wiley, </publisher> <year> 1993. </year>
Reference-contexts: On the one hand, efficient implementations of functional languages often represent expressions as directed acyclic graphs rather than as trees, so that at the implementation level the rewriting taking place is graph rewriting. This case is usually called term graph rewriting and has been studied extensively (see <ref> [97] </ref> for a representative collection of papers). However, graph rewriting is a very general model and can express many other computations besides functional ones. The theory of graph grammars and graph transformations (see [33, 94] for recent conferences) considers graph rewriting in this more general sense.
Reference: 98. <author> J.G. Stell. </author> <title> Modelling term rewriting systems by sesqui-categories. </title> <type> Technical Report TR94-02, </type> <institution> Keele University, </institution> <year> 1994. </year> <note> Also in shorter form in Proc. C.A.E.N., </note> <year> 1994, </year> <pages> pp. 121-127. </pages>
Reference-contexts: Corra-dini, Gadducci and Montanari [25] provide a uniform construction for L R and for a sesqui-category model, similar to L R but satisfying fewer equations, that has been proposed by Stell <ref> [98] </ref>.

References-found: 98

