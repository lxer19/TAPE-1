URL: http://www.cam.sri.com/tr/crc058/paper.ps.Z
Refering-URL: http://www.cam.sri.com/tr/ABSTRACTS.html
Root-URL: 
Phone: 2  
Title: Linking Notations and Theories in a Proof Tool  
Author: Rachel Cardell-Oliver and Roger Hale 
Address: Wivenhoe Park, Colchester CO4 3SQ, Essex, England  23 Millers Yard, Mill Lane, Cambridge CB2 1RQ, England  
Affiliation: 1 University of Essex, Department of Computer Science,  SRI International, Cambridge Research Centre,  
Web: URL: http://www.cam.sri.com/tr/crc058/paper.ps.Z1995  
Abstract: The formal development of non-trivial, real-time systems can be made more manageable by using several complementary formal methods for different aspects of the development. In this paper we show how sound interfaces between different methods can be defined formally in the HOL theorem proving system and how we have used such links to solve a variety of problems. Our motivation for linking theories is pragmatic. In a number of case studies different theories have been linked in order to make specification and verification more manageable and even to make it feasible. This paper offers a formal framework for defining and implementing links between theories. Because both object language and meta language are visible in the HOL system, and the system itself can communicate with other systems, it is possible to define explicitly and formally links of different "weight".
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Boulton, R.J., Gordon, A. D. Harrison,J. R. Herbert,J. M. J. and Van Tassel, J.: </author> <title> Experience with embedding hardware description languages in HOL. Theorem Provers in Circuit Design: Theory, </title> <booktitle> Practice and Experience Proceedings of the IFIP TC10/WG 10.2 International Conference, IFIP Transactions A-10, </booktitle> <publisher> North-Holland (1992) 129-156 </publisher>
Reference-contexts: Linking theories using a general purpose proof tool such as HOL enforces a discipline on the ways in which notations and theories can be linked together and helps to expose exactly what sort of link is being made. Boulton et al. <ref> [1] </ref> have used the terms "deep" and "shallow" embedding to classify different methods for mechanizing hardware description languages in HOL. A theory is deeply embedded in HOL if its syntax and semantics are both defined in the HOL object logic.
Reference: 2. <editor> Bowen, J. (ed).: </editor> <title> Towards Verified Systems, </title> <publisher> Elsevier (1994) </publisher>
Reference-contexts: Linking TTS theories in HOL significantly increased the size of system which could be formally specified and verified [9, 3, 4]. The problem of defining sound interfaces between formal theories has been considered by many authors, for example, in projects such as Esprit ProCos and DTI Safemos <ref> [2] </ref>. Both these projects were primarily concerned with linking theories at different levels of abstraction from requirements to hardware, whereas our work emphasises linking complementary theories for the same problem (for example, diagrams and program notation).
Reference: 3. <author> Cardell-Oliver, R.: </author> <title> HTTDs and HOL, Formal Development of Reactive Systems (Lewerentz and Lindner eds.), </title> <publisher> LNCS 891, Springer Verlag (1995) 261-276 </publisher>
Reference-contexts: In this paper we show how sound interfaces between different methods can be defined formally in the HOL theorem proving system [7] and how we have used such links to solve a variety of problems. Our motivation for linking theories is pragmatic. In a number of case studies <ref> [9, 3, 4, 5] </ref> different theories have been linked in order to make specification and verification more manageable and even to make it feasible. Our approach is characterised by the following assumptions. A formal method is viewed as an activity whose goal is to construct specifications and perform verification proofs. <p> manage the development of a large or complex specification we have found it necessary to use a hierarchical specification language to hide details, to reuse parts of a specification, to mix notations such as programs and diagrams and to perform a variety of well-formedness checks as the specification is developed <ref> [3, 4] </ref>. Links between different specification theories should be both explicit and executable so that translations can be performed automatically and correctly. The goal of formal verification is to prove that a design satisfies or refines its requirements. <p> Different verification theories need to be linked in order to increase proof automation, to reduce the execution time for proofs, and to support user interaction for proof exploration and proof construction at a high level of abstraction <ref> [9, 3, 4] </ref>. 3 Linking Theories in the HOL System The HOL system is a proof assistant for classical higher order logic [6], a foundational logic which can be used to define and link many different theories for specification and verification. <p> The controllers for these motors can turn the motor on to push or pull, or off, and can detect the current position of their effectors. A generic, reusable specification has been written for motors as a higher order function, MOT, in the object logic <ref> [3] </ref>. The function maps variables which hold the position and state of the motor, starting and finishing position constants, and the conditions for starting and stopping the motor onto sets of timed transitions in the theory of TTDs a diagram notation for TTSs. <p> of timed transition systems provides the foundation for proving this proposition. 4.3 Well Formed Specifications Link for: Specification Theories Linked: ML-HTTDs and HOL-TTDs Link Depth: Semantics Implementation Level: Meta In the production cell case study we encountered problems simply writing down the specification correctly and maintaining correctness after making modifications <ref> [3] </ref>. As a result, a hierarchical interface for TTDs was developed. A specification is represented in the interface by ML data structures which describe the vertices, edges and labels and interface variables of a hierarchical graphical diagram for each process. <p> However, it is not clear that using external decision procedures would have significantly simplified the non-trivial verification examples we have, so far, examined <ref> [3] </ref>. Because there were no large arithmetic or propositional goals to be proved in our examples the automatic deductive proof methods already available in HOL for proving such goals were adequate. The state space of our TTS specifications was too large for model checking. <p> It is an open question whether we could develop general methods to reduce arbitrary HOL TTS specifications into a form suitable for model checking. Instead, we are concentrating on automating deductive proof methods for TTSs in HOL <ref> [3, 4] </ref>. 5 Discussion We have shown how linking theories can solve a wide range of problems which arise in non-trivial specification and verification, from the management of large specifications to efficient and automatic verification proof methods. <p> Linking TTS theories in HOL significantly increased the size of system which could be formally specified and verified <ref> [9, 3, 4] </ref>. The problem of defining sound interfaces between formal theories has been considered by many authors, for example, in projects such as Esprit ProCos and DTI Safemos [2].
Reference: 4. <author> Cardell-Oliver, R. and Southon, C.: </author> <title> Using Animation for Formal Proof, </title> <booktitle> In prepa-ration (1995) </booktitle>
Reference-contexts: In this paper we show how sound interfaces between different methods can be defined formally in the HOL theorem proving system [7] and how we have used such links to solve a variety of problems. Our motivation for linking theories is pragmatic. In a number of case studies <ref> [9, 3, 4, 5] </ref> different theories have been linked in order to make specification and verification more manageable and even to make it feasible. Our approach is characterised by the following assumptions. A formal method is viewed as an activity whose goal is to construct specifications and perform verification proofs. <p> manage the development of a large or complex specification we have found it necessary to use a hierarchical specification language to hide details, to reuse parts of a specification, to mix notations such as programs and diagrams and to perform a variety of well-formedness checks as the specification is developed <ref> [3, 4] </ref>. Links between different specification theories should be both explicit and executable so that translations can be performed automatically and correctly. The goal of formal verification is to prove that a design satisfies or refines its requirements. <p> Different verification theories need to be linked in order to increase proof automation, to reduce the execution time for proofs, and to support user interaction for proof exploration and proof construction at a high level of abstraction <ref> [9, 3, 4] </ref>. 3 Linking Theories in the HOL System The HOL system is a proof assistant for classical higher order logic [6], a foundational logic which can be used to define and link many different theories for specification and verification. <p> This has been done via an operational semantics for TTStext defined in HOL together with special ML programs for performing the animation <ref> [4] </ref>. <p> For example, we have used two different proof procedures for the verification of bounded response (3 n Q) properties of specifications: one is based on Henzinger's single step rules adapted for timed transition diagrams [12, 9] and the other on animation of TTStext specifications by symbolic execution <ref> [4] </ref>. There is a large difference in the performance of these two proof methods for different classes of specification. <p> There are proof rules for verifying bounded response properties (3 n Q) in each theory. The proof rules for the TTStext theory are given by an inductive definition of a satisfaction relation between TTStext programs and 3 n Q requirements in terms of the A definition <ref> [4] </ref>. The definition captured by these rules can be proved sound with respect to the standard temporal logic definition of 3 n Q. In the TTD theory there are sound single step rules for verifying 3 n Q properties for TTDs using transition invariants. <p> It is an open question whether we could develop general methods to reduce arbitrary HOL TTS specifications into a form suitable for model checking. Instead, we are concentrating on automating deductive proof methods for TTSs in HOL <ref> [3, 4] </ref>. 5 Discussion We have shown how linking theories can solve a wide range of problems which arise in non-trivial specification and verification, from the management of large specifications to efficient and automatic verification proof methods. <p> Linking TTS theories in HOL significantly increased the size of system which could be formally specified and verified <ref> [9, 3, 4] </ref>. The problem of defining sound interfaces between formal theories has been considered by many authors, for example, in projects such as Esprit ProCos and DTI Safemos [2].
Reference: 5. <author> Cardell-Oliver, R.: </author> <title> Proof Exploration Diagrams, </title> <note> Unpublished Research Note, </note> <month> (January </month> <year> 1994) </year>
Reference-contexts: In this paper we show how sound interfaces between different methods can be defined formally in the HOL theorem proving system [7] and how we have used such links to solve a variety of problems. Our motivation for linking theories is pragmatic. In a number of case studies <ref> [9, 3, 4, 5] </ref> different theories have been linked in order to make specification and verification more manageable and even to make it feasible. Our approach is characterised by the following assumptions. A formal method is viewed as an activity whose goal is to construct specifications and perform verification proofs. <p> methods which will be used many times. 4.8 Proof Exploration Link for: Verification Theories Linked: HTTDs and TTD Proof Goals and Methods Link Depth: Syntax Implementation Level: System A graphical language for proof exploration has been investigated to support the type of reasoning a human does before building a proof <ref> [5] </ref>. For example, humans postulate system invariants, evaluate the conditions true after certain execution sequences and so on. A link between theories to support this type of high level user interaction would accept input from a graphical interface based on the interface already defined for constructing specifications.
Reference: 6. <author> Church, </author> <title> A: A Formulation of the Simple Theory of Types. </title> <note> Journal of Symbolic Logic 5 (1940) </note>
Reference-contexts: to increase proof automation, to reduce the execution time for proofs, and to support user interaction for proof exploration and proof construction at a high level of abstraction [9, 3, 4]. 3 Linking Theories in the HOL System The HOL system is a proof assistant for classical higher order logic <ref> [6] </ref>, a foundational logic which can be used to define and link many different theories for specification and verification. A HOL user interacts with the system using the meta-language ML to create or destruct terms in the object logic, make definitions, postulate theorems and prove them [7].
Reference: 7. <author> Gordon, M.J.C., Melham, T.F: </author> <title> Introduction to the HOL System, </title> <publisher> Cambridge University Press (1994) </publisher>
Reference-contexts: In this paper we show how sound interfaces between different methods can be defined formally in the HOL theorem proving system <ref> [7] </ref> and how we have used such links to solve a variety of problems. Our motivation for linking theories is pragmatic. <p> A HOL user interacts with the system using the meta-language ML to create or destruct terms in the object logic, make definitions, postulate theorems and prove them <ref> [7] </ref>. HOL users usually keep a file of the ML commands which created a theory as well as any ML programs used to support the theory such as special proof procedures.
Reference: 8. <author> Hale, R.W.S: </author> <title> Programming in Temporal Logic Technical Report 173, </title> <institution> University of Cambridge, Computer Laboratory, </institution> <address> UK (1989) </address>
Reference-contexts: Link for: Specification Theories Linked: RTTL and ITL Link Depth: Syntax Implementation Level: System This example links two theories which differ not only in their syntax but in their semantic model: the model for TTDs is timed state sequences representing interleaving concurrency whereas the model for the Tempura programming language <ref> [15, 8] </ref> is state sequences representing true concurrency. Is it ever sensible to link two notations whose semantic models differ? Yes. Animation provides fast feed back about the correctness of a specification, before a developer wastes time verifying properties of a specification which may not correctly capture his design.
Reference: 9. <author> Hale, R.W.S., Cardell-Oliver, R. M., Herbert, J. M. J: </author> <title> An Embedding of Timed Transition Systems in HOL, The Journal of Formal Methods in System Design, </title> <note> 3(1&2) Kluwer (1993), 151-174 (also published in Reference [2]) </note>
Reference-contexts: In this paper we show how sound interfaces between different methods can be defined formally in the HOL theorem proving system [7] and how we have used such links to solve a variety of problems. Our motivation for linking theories is pragmatic. In a number of case studies <ref> [9, 3, 4, 5] </ref> different theories have been linked in order to make specification and verification more manageable and even to make it feasible. Our approach is characterised by the following assumptions. A formal method is viewed as an activity whose goal is to construct specifications and perform verification proofs. <p> Then, for each of the problems identified in Section 2, Section 4 describes a solution based on linking theories. Examples are taken from our ongoing work with the theory of timed transition systems (TTSs) in HOL <ref> [12, 9] </ref>, but the methods are generally applicable. A discussion of results and related work is contained in Section 5. <p> Different verification theories need to be linked in order to increase proof automation, to reduce the execution time for proofs, and to support user interaction for proof exploration and proof construction at a high level of abstraction <ref> [9, 3, 4] </ref>. 3 Linking Theories in the HOL System The HOL system is a proof assistant for classical higher order logic [6], a foundational logic which can be used to define and link many different theories for specification and verification. <p> For example, we have used two different proof procedures for the verification of bounded response (3 n Q) properties of specifications: one is based on Henzinger's single step rules adapted for timed transition diagrams <ref> [12, 9] </ref> and the other on animation of TTStext specifications by symbolic execution [4]. There is a large difference in the performance of these two proof methods for different classes of specification. <p> Linking TTS theories in HOL significantly increased the size of system which could be formally specified and verified <ref> [9, 3, 4] </ref>. The problem of defining sound interfaces between formal theories has been considered by many authors, for example, in projects such as Esprit ProCos and DTI Safemos [2].
Reference: 10. <author> Harrison, J: </author> <title> Binary Decision Diagrams as a HOL Derived Rule, Higher Order Logic Theorem Proving and Its Applications, </title> <booktitle> 7th International Workshop, </booktitle> <address> Valletta, Malta, </address> <month> September, </month> <year> 1994. </year> <note> LNCS 859, Springer-Verlag (1994), 254-268 </note>
Reference-contexts: Certain classes of problem can be solved very efficiently with purpose-built proof tools, e.g. BDD-based tautology checkers and model checkers for temporal logics. A purpose-built BDD checker should be at least an order of magnitude faster than one implemented as a derived inference rule in HOL <ref> [10] </ref> (though the speedup is approximately a constant factor). The PVS theorem prover makes considerable use of special purpose decision procedures alongside HOL-style deductive machinery.
Reference: 11. <author> Harrison, J: </author> <title> Metatheory and Reflection in Theorem Proving: A Survey and Cri-tique, </title> <type> Technical Report CRC-053, </type> <institution> SRI International, Cambridge Computer Science Research Centre (1995) </institution>
Reference: 12. <author> Henzinger, T. A., Manna, Z. and Pnueli, </author> <title> A: Temporal proof methodologies for realtime systems, </title> <booktitle> Proceedings of the 18th Symposium on Principles of Programming Languages, </booktitle> <publisher> ACM Press (1991) </publisher>
Reference-contexts: Then, for each of the problems identified in Section 2, Section 4 describes a solution based on linking theories. Examples are taken from our ongoing work with the theory of timed transition systems (TTSs) in HOL <ref> [12, 9] </ref>, but the methods are generally applicable. A discussion of results and related work is contained in Section 5. <p> For example, we have used two different proof procedures for the verification of bounded response (3 n Q) properties of specifications: one is based on Henzinger's single step rules adapted for timed transition diagrams <ref> [12, 9] </ref> and the other on animation of TTStext specifications by symbolic execution [4]. There is a large difference in the performance of these two proof methods for different classes of specification. <p> The HOL theorem prover was used to link theories in Safemos, but mechanical support for links was not used in most of the ProCos work. A variety of complementary notations have been proposed for timed transition systems <ref> [12, 13] </ref>. In our HOL TTS tool we have both extended these notations and made explicit the links between them.
Reference: 13. <author> Kesten, Y. and Pnueli, A.: </author> <title> Timed and Hybrid Statecharts and their Textual Representation. </title> <publisher> LNCS 571, Springer Verlag (1992) </publisher>
Reference-contexts: The HOL theorem prover was used to link theories in Safemos, but mechanical support for links was not used in most of the ProCos work. A variety of complementary notations have been proposed for timed transition systems <ref> [12, 13] </ref>. In our HOL TTS tool we have both extended these notations and made explicit the links between them.
Reference: 14. <author> Lewerentz, C. and Lindner, </author> <title> T (eds): Formal Development of Reactive Systems, </title> <publisher> LNCS 891, Springer Verlag (1995) </publisher>
Reference-contexts: are linked, whether the link involves the semantic models of its theories or only their syntax, and how the link is implemented. 4.1 Specification Reuse Link for: Specification Theories Linked: TTDs and HOL Link Depth: Syntax Implementation Level: Object Six of the eight controller components of a robot-based production cell <ref> [14] </ref> are driven by similar motors. The controllers for these motors can turn the motor on to push or pull, or off, and can detect the current position of their effectors. <p> For example, the state space for our production cell specification is in the order of 10 24 states (we don't know how many of these are reachable) whereas other specifications of the same problem, for example using CSL to generate finite state automata, have fewer than 10 8 reachable states <ref> [14] </ref>. It is an open question whether we could develop general methods to reduce arbitrary HOL TTS specifications into a form suitable for model checking.
Reference: 15. <author> Moszkowski, B: </author> <title> Executing Temporal Logic Programs, </title> <publisher> Cambridge University Press (1986) </publisher>
Reference-contexts: Link for: Specification Theories Linked: RTTL and ITL Link Depth: Syntax Implementation Level: System This example links two theories which differ not only in their syntax but in their semantic model: the model for TTDs is timed state sequences representing interleaving concurrency whereas the model for the Tempura programming language <ref> [15, 8] </ref> is state sequences representing true concurrency. Is it ever sensible to link two notations whose semantic models differ? Yes. Animation provides fast feed back about the correctness of a specification, before a developer wastes time verifying properties of a specification which may not correctly capture his design.
Reference: 16. <author> Muller, O. and Nipkow, T.: </author> <title> Combining Model Checking and Deduction for I/OAutomata, </title> <booktitle> Proceedings of the Workshop on Tools and Algorithms for the Construction and Analysis of Systems, </booktitle> <address> Aarhus, </address> <year> (1995) </year>
Reference-contexts: Muller and Nipkow propose a proof method implemented in a HOL-like theorem prover in which a (possibly infinite state) specification is first refined to a simpler form by logical deduction and then a model checking procedure is used to complete the proof <ref> [16] </ref>. However, it is not clear that using external decision procedures would have significantly simplified the non-trivial verification examples we have, so far, examined [3].
Reference: 17. <author> Skakkebaek, J.U. and Shankar, N. </author> <title> Towards a Duration Calculus Proof Assistant in PVS, LNCS 863, Springer Verlag (1994) 660-679 This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: A number of authors have mechanized theories in HOL and in other theorem proving tools, thus linking the new theory and the theorem prover logic. See <ref> [17] </ref>, for example, for an embedding of the duration calculus in PVS and further references. The aim of such mechanizations is to hide the underlying logic and proof theory so that a user feels he is working entirely within the embedded theory.
References-found: 17

