URL: ftp://ftp.eecs.umich.edu/people/aprakash/distsim/simsymp91.ps.Z
Refering-URL: http://www.eecs.umich.edu/~aprakash/csrg_pub.html
Root-URL: http://www.cs.umich.edu
Email: email: aprakash@zip.eecs.umich.edu  
Title: Filter: An Algorithm for Reducing Cascaded Rollbacks in Optimistic Distributed Simulations  
Author: Atul Prakash Rajalakshmi Subramanian 
Address: Ann Arbor, MI 48109-2122.  
Affiliation: Department of Electrical Engineering and Computer Science University of Michigan,  
Abstract: We describe a new algorithm, called Filter, that limits the propagation of erroneous computations in optimistic discrete-event distributed simulations. In the proposed algorithm, each message carries a bounded amount of dependency information that describes the assumptions made in the generation of the message, and, in addition, processes keep track of straggler events that have occurred in the system. This knowledge is used by processes to "filter" out messages that depend on a preempted state by discarding them upon receipt. We describe the algorithm and its use in conjunction with time-warp, suggest several ways of reducing its potential overhead by adjusting the extent of filtering, and point out several interesting performance tradeoffs that we are currently exploring. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R.E. Bryant. </author> <title> Simulation on a distributed system. </title> <booktitle> In Proc. of COMPSAC, </booktitle> <year> 1979. </year>
Reference-contexts: In this paper, we consider those class of techniques where a single simulation program is run on multiple processors by decomposing the program into concurrently running logical processes <ref> [1, 2, 6] </ref>. Each process maintains its own logical clock, running asynchronously with other processes. In order to ensure that each process executes events in the correct sequence, there are two broad classes of simulation algorithms, conservative and optimistic. <p> Each process maintains its own logical clock, running asynchronously with other processes. In order to ensure that each process executes events in the correct sequence, there are two broad classes of simulation algorithms, conservative and optimistic. Some of the conservative algorithms include the null message scheme <ref> [1, 2] </ref> and deadlock detection and recovery scheme [3], an hierarchical scheme [9], and conservative time windows [7]. Most well known optimistic algorithm is time-warp [6]. A survey of many of the distributed simulation algorithms can be found in [5].
Reference: [2] <author> K.M. Chandy and J. Misra. </author> <title> Distributed simulation: A case study in design and verification of distributed programs. </title> <journal> IEEETSE, </journal> <year> 1979. </year>
Reference-contexts: In this paper, we consider those class of techniques where a single simulation program is run on multiple processors by decomposing the program into concurrently running logical processes <ref> [1, 2, 6] </ref>. Each process maintains its own logical clock, running asynchronously with other processes. In order to ensure that each process executes events in the correct sequence, there are two broad classes of simulation algorithms, conservative and optimistic. <p> Each process maintains its own logical clock, running asynchronously with other processes. In order to ensure that each process executes events in the correct sequence, there are two broad classes of simulation algorithms, conservative and optimistic. Some of the conservative algorithms include the null message scheme <ref> [1, 2] </ref> and deadlock detection and recovery scheme [3], an hierarchical scheme [9], and conservative time windows [7]. Most well known optimistic algorithm is time-warp [6]. A survey of many of the distributed simulation algorithms can be found in [5].
Reference: [3] <author> K.M. Chandy and J. Misra. </author> <title> Asynchronous distributed simulation via a sequence of parallel computations. </title> <journal> CACM, </journal> <volume> 24(11) </volume> <pages> 198-206, </pages> <month> April </month> <year> 1981. </year>
Reference-contexts: In order to ensure that each process executes events in the correct sequence, there are two broad classes of simulation algorithms, conservative and optimistic. Some of the conservative algorithms include the null message scheme [1, 2] and deadlock detection and recovery scheme <ref> [3] </ref>, an hierarchical scheme [9], and conservative time windows [7]. Most well known optimistic algorithm is time-warp [6]. A survey of many of the distributed simulation algorithms can be found in [5]. In this paper, we are concerned with reducing overheads of optimistic algorithms for distributed simulations.
Reference: [4] <author> K.M. Chandy and R. Sherman. </author> <title> The conditional event approach to distributed simulation. </title> <booktitle> Proceedings of the SCS Multiconference on Distributed Simulation, </booktitle> <volume> 21(2) </volume> <pages> 95-99, </pages> <month> March </month> <year> 1989. </year>
Reference-contexts: So, in the proposed algorithm, acceptance of a message for processing is conditional upon its assumptions being consistent with the current knowledge about the straggler events in the system. A conservative algorithm based on conditional knowledge has been proposed by Chandy and Sherman <ref> [4] </ref>. In our algorithm, we are using conditional knowledge to improve performance of optimistic algorithms. The proposed algorithm is quite general, being applicable to all simulations for which time-warp is applicable. For simplicity of treatment, we make the following assumptions in this paper: 1.
Reference: [5] <author> Richard M. Fujimoto. </author> <title> Parallel discrete event simulation. </title> <journal> Communications of the ACM, </journal> <volume> 33(10) </volume> <pages> 30-53, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Some of the conservative algorithms include the null message scheme [1, 2] and deadlock detection and recovery scheme [3], an hierarchical scheme [9], and conservative time windows [7]. Most well known optimistic algorithm is time-warp [6]. A survey of many of the distributed simulation algorithms can be found in <ref> [5] </ref>. In this paper, we are concerned with reducing overheads of optimistic algorithms for distributed simulations. In the well known time-warp method [6], a causality error occurs whenever a message is received that contains a time-stamp smaller than that of the last processed message. <p> Mechanisms have been proposed to prevent the spread of erroneous computation using schemes such as Wolf [8] and optimistic time-windows [10]. These approaches can however also impede the progress of correct computations by unnecessary freezing of correct computations, since they cannot distinguish bad computations from good ones <ref> [5] </ref>. In this paper, we propose an alternative approach, using conditional messages, that is able to distinguish between bad computations from good ones and only prevent bad computations from spreading.
Reference: [6] <author> David R. Jefferson. </author> <title> Virtual time. </title> <journal> ACM Trans. on Programming Languages and Systems, </journal> <volume> 7(3) </volume> <pages> 404-425, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: In this paper, we consider those class of techniques where a single simulation program is run on multiple processors by decomposing the program into concurrently running logical processes <ref> [1, 2, 6] </ref>. Each process maintains its own logical clock, running asynchronously with other processes. In order to ensure that each process executes events in the correct sequence, there are two broad classes of simulation algorithms, conservative and optimistic. <p> Some of the conservative algorithms include the null message scheme [1, 2] and deadlock detection and recovery scheme [3], an hierarchical scheme [9], and conservative time windows [7]. Most well known optimistic algorithm is time-warp <ref> [6] </ref>. A survey of many of the distributed simulation algorithms can be found in [5]. In this paper, we are concerned with reducing overheads of optimistic algorithms for distributed simulations. In the well known time-warp method [6], a causality error occurs whenever a message is received that contains a time-stamp smaller <p> Most well known optimistic algorithm is time-warp <ref> [6] </ref>. A survey of many of the distributed simulation algorithms can be found in [5]. In this paper, we are concerned with reducing overheads of optimistic algorithms for distributed simulations. In the well known time-warp method [6], a causality error occurs whenever a message is received that contains a time-stamp smaller than that of the last processed message. The event message causing the rollback is called a straggler. <p> system are therefore of the format &lt;channel id, s, d, t, assum list&gt; where channel id is the channel on which message is sent, s is the sequence number, d is the data in message, t is the time-stamp 1 of the 1 time-stamp refers to the virtual receive time <ref> [6] </ref>, i.e. the message, and assum list is the message's assumption list. Whenever a message is accepted for processing, the process updates its assumption list to include the assumptions of the message. <p> There is a contradiction if virtual time at which a message is supposed to be received at the destination. Virtual send times <ref> [6] </ref> are not directly used in Filter, but may be added to messages if needed by the underlying time-warp implementation. s a &lt; s r , but t a &gt; t r .
Reference: [7] <author> B.D. Lubachevsky. </author> <title> Efficient distributed event-driven simulations of multiple-loop networks. </title> <journal> Communications of the ACM, </journal> <volume> 32 </volume> <pages> 111-123, </pages> <month> Jan-uary </month> <year> 1989. </year>
Reference-contexts: Some of the conservative algorithms include the null message scheme [1, 2] and deadlock detection and recovery scheme [3], an hierarchical scheme [9], and conservative time windows <ref> [7] </ref>. Most well known optimistic algorithm is time-warp [6]. A survey of many of the distributed simulation algorithms can be found in [5]. In this paper, we are concerned with reducing overheads of optimistic algorithms for distributed simulations.
Reference: [8] <author> V. Madisetti, J. Walrand, and D. Messerschmitt. WOLF: </author> <title> a rollback algorithm for optimistic distributed simulation systems. </title> <booktitle> In 1988 Simulation Conference Proceedings, </booktitle> <pages> pages 296-305, </pages> <month> December </month> <year> 1988. </year>
Reference-contexts: Rollbacks are generally expensive, and a major cause of degradation in potential performance of time-warp algorithms. Mechanisms have been proposed to prevent the spread of erroneous computation using schemes such as Wolf <ref> [8] </ref> and optimistic time-windows [10]. These approaches can however also impede the progress of correct computations by unnecessary freezing of correct computations, since they cannot distinguish bad computations from good ones [5].
Reference: [9] <author> Atul Prakash and C.V. Ramamoorthy. </author> <title> Hierarchical distributed simulations. </title> <booktitle> In Proc. of the Eighth International Conference on Distributed Computing, </booktitle> <address> San Jose, </address> <pages> pages 341-348, </pages> <year> 1988. </year>
Reference-contexts: In order to ensure that each process executes events in the correct sequence, there are two broad classes of simulation algorithms, conservative and optimistic. Some of the conservative algorithms include the null message scheme [1, 2] and deadlock detection and recovery scheme [3], an hierarchical scheme <ref> [9] </ref>, and conservative time windows [7]. Most well known optimistic algorithm is time-warp [6]. A survey of many of the distributed simulation algorithms can be found in [5]. In this paper, we are concerned with reducing overheads of optimistic algorithms for distributed simulations.
Reference: [10] <author> L.M. Sokol, </author> <title> D.P. Briscoe, and A.P. Wieland. MTW: A strategy for scheduling discrete simulation events for concurrent execution. </title> <booktitle> In Proc. of the SCS Multiconference on Distributed Simulation, </booktitle> <pages> pages 34-42, </pages> <month> July </month> <year> 1988. </year>
Reference-contexts: Rollbacks are generally expensive, and a major cause of degradation in potential performance of time-warp algorithms. Mechanisms have been proposed to prevent the spread of erroneous computation using schemes such as Wolf [8] and optimistic time-windows <ref> [10] </ref>. These approaches can however also impede the progress of correct computations by unnecessary freezing of correct computations, since they cannot distinguish bad computations from good ones [5].
References-found: 10

