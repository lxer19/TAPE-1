URL: http://www.cs.cornell.edu/Info/Projects/PREDATOR/papers/vldbjournal98.ps
Refering-URL: http://www.cs.cornell.edu/Info/Projects/PREDATOR/docs.html
Root-URL: 
Title: Enhanced Abstract Data Types in Object-Relational Databases  
Author: Praveen Seshadri 
Keyword: Key words: Object-relational database Extensibility Database types Query optimization  
Address: Ithaca, NY 14853, USA.  
Affiliation: Computer Science Department, Cornell University,  
Note: The VLDB Journal manuscript No. (will be inserted by the editor)  
Email: e-mail: praveen@cs.cornell.edu  
Date: Received April 15, 1998 Revised June 15, 1998  
Abstract: The explosion in complex multi-media content makes it crucial for database systems to support such data efficiently. This paper argues that the "black-box" ADTs used in current object-relational systems inhibit their performance, thereby limiting their use in emerging applications. Instead, the next generation of object-relational database systems should be based on Enhanced Abstract Data Type (E-ADT) technology. An E-ADT can expose the semantics of its methods to the database system, thereby permitting advanced query optimizations. Fundamental architectural changes are required to build a database system with E-ADTs; the added functionality should not compromise the modularity of data types and the extensibility of the type system. The implementation issues have been explored through the development of E-ADTs in Predator. Initial performance results demonstrate an order of magnitude in performance improvements. 
Abstract-found: 1
Intro-found: 1
Reference: [AF95] <author> Karl Aberer and Gisela Fischer. </author> <title> Semantic query optimization for methods in object oriented database systems. </title> <booktitle> In Proceedings of the Eleventh IEEE Conference on Data Engineering, </booktitle> <address> Taipei, Taiwan, </address> <pages> pages 70-79, </pages> <year> 1995. </year>
Reference-contexts: There is a notion of a common object algebra, and every complex type expands (or "reveals") its methods into expressions in the common algebra. In contrast, E-ADTs can use individual algebras to represent query plans for their expressions, since there is no notion of a global query optimizer. In <ref> [AF95] </ref>, the actual method code was analyzed to determine the "meaning" of the method, which was then used in query optimization. We believe that this approach is not viable; most complex data types will be developed in some imperative programming language like C++ or Java.
Reference: [Bla96] <author> Jose Blakeley. </author> <title> Data Access for the Masses through OLE-DB. </title> <booktitle> In Proceedings of ACM SIGMOD '96 International Conference on Management of Data, </booktitle> <address> Montreal, Canada, </address> <pages> pages 161-172, </pages> <year> 1996. </year>
Reference-contexts: However, we surmise that there are certain heterogeneous database problems that could benefit from the E-ADT approach. Several distributed object broker architectures like CORBA and OLE have recently emerged. The capabilities of distributed objects are described using a common low-level interface. The OLE-DB standard <ref> [Bla96] </ref> supports the notion of a component database system with well-defined interfaces between different modular components. However, there is a distinction between exporting query capabilities, and exposing query optimization semantics. Other Related Work: Rule-based query optimiz-ers have received much attention recently [GM93,CZ96].
Reference: [Cat94] <author> R.G.G. Cattell. </author> <title> The Object Database Standard:ODMB-93. </title> <address> Morgan-Kaufman, </address> <year> 1994. </year>
Reference-contexts: Much of the work in object-oriented query optimization has focused on issues like path expressions [CD92] and not on method expressions, although [CD92] recognizes that methods can be very expensive and merit further attention. While the OQL query language <ref> [Cat94] </ref> for OO databases does permit a method to have several implementations, it does not suggest a mechanism for choosing between these implementations. We direct readers to [GM88] for an excellent survey of work on query optimization for complex data types in OO-DBMSs.
Reference: [CCH + 95] <author> M. Carey, W. Cody, L. Haas, W. Niblack, M. Arya, R. Fagin, M. Flickner, D. Lee, D. Petkovic, P. Schwarz, J. Thomas, M. Tork-Roth, J. Williams, and E. Wimmers. </author> <title> Querying Multimedia Data From Multiple Repositories By Content: The Garlic Project. </title> <booktitle> Proceedings of the IFIP Working Conference on Visual Database Systems, </booktitle> <address> Lausanne, Switzerland, </address> <month> March </month> <year> 1995. </year>
Reference: [CD92] <author> S. Cluet and C. Delobel. </author> <title> A General Framework for the Optimization of Object-Oriented Queries. </title> <booktitle> In Proceedings of ACM SIGMOD '92 International Conference on Management of Data, </booktitle> <address> San Diego, CA, </address> <pages> pages 383-392, </pages> <year> 1992. </year>
Reference-contexts: Object-Oriented Databases: Early work on semantic data models incorporated domain semantics into relational query optimization. More recently, the OO-DBMS community has been exploring techniques to optimize queries involving complex objects. Much of the work in object-oriented query optimization has focused on issues like path expressions <ref> [CD92] </ref> and not on method expressions, although [CD92] recognizes that methods can be very expensive and merit further attention. While the OQL query language [Cat94] for OO databases does permit a method to have several implementations, it does not suggest a mechanism for choosing between these implementations. <p> More recently, the OO-DBMS community has been exploring techniques to optimize queries involving complex objects. Much of the work in object-oriented query optimization has focused on issues like path expressions <ref> [CD92] </ref> and not on method expressions, although [CD92] recognizes that methods can be very expensive and merit further attention. While the OQL query language [Cat94] for OO databases does permit a method to have several implementations, it does not suggest a mechanism for choosing between these implementations.
Reference: [CDF + 94] <author> M.J. Carey, D.J. DeWitt, M.J. Franklin, N.E. Hall, M. McAuliffe, J.F. Naughton, D.T. Schuh, M.H. Solomon, C.K. Tan, O. Tsatalos, S. White, and M.J. Zwilling. </author> <title> Shoring up persistent objects. </title> <booktitle> In Proceedings of ACM SIGMOD '94 International Conference on Management of Data, </booktitle> <address> Minneapolis, MN, </address> <pages> pages 526-541, </pages> <year> 1994. </year>
Reference-contexts: Praveen Seshadri: Enhanced Abstract Data Types in Object-Relational Databases 5 A simplified high-level picture of the server is shown in database utilities that all E-ADTs can use. An important component of the utility layer is the SHORE Storage Manager <ref> [CDF + 94] </ref> library, which provides facilities for persistent storage, concurrency control, recovery and buffer management. The core of the system is a main-memory table in which E-ADTs are registered.
Reference: [CDY95] <author> Surajit Chaudhuri, Umeshwar Dayal, and Tak Yan. </author> <title> Join Queries with External Text Sources: Execution and Optimization Techniques. </title> <booktitle> In Proceedings of ACM SIGMOD '95 International Conference on Management of Data, </booktitle> <address> San Jose, CA, </address> <pages> pages 410-422, </pages> <year> 1995. </year>
Reference-contexts: Praveen Seshadri: Enhanced Abstract Data Types in Object-Relational Databases 11 Since E-ADT expressions are expensive, where should they be placed in the SQL query evaluation plan? Expensive function placement has traditionally been studied purely in a tuple-at-a-time execution context [Hel95,CS96], with caching of function results (an exception to this is <ref> [CDY95] </ref>). The assumption has been that every ADT function has a fixed cost specified in the system catalogs. This assumption is not valid when ADT expressions are being optimized.
Reference: [CS93] <author> Surajit Chaudhuri and Kyuseok Shim. </author> <title> Query Optimization in the Presence of Foreign Functions. </title> <booktitle> In Proceedings of the Nineteenth International Conference on Very Large Databases (VLDB), Dublin, Ireland, </booktitle> <pages> pages 526-541, </pages> <year> 1993. </year>
Reference-contexts: In fact, we can make the interesting case that the E-ADT paradigm provides an excellent argument in favor of optimizer toolkits in general, and rule-based optimizer toolkits [GM93,KD98] in particular! Since the DBMS has several mini-optimizers, one in each E-ADT, a toolkit for optimizer generation is needed. <ref> [CS93] </ref> suggests that queries involving "foreign" relations can be optimized by specifying the semantics of the foreign relations through high-level rules. The rules are syntactic, and cost-based optimization is performed after an exhaustive application of the rules.
Reference: [CS96] <author> Surajit Chaudhuri and Kyuseok Shim. </author> <title> Optimization of Queries with User-Defined Predicates. </title> <booktitle> In Proceedings of the Twenty Second International Conference on Very Large Databases (VLDB), Bombay, India, </booktitle> <pages> pages 87-98, </pages> <month> September </month> <year> 1996. </year>
Reference: [CZ96] <author> Mitch Cherniak and Stanley Zdonik. </author> <title> Rule Languages and Internal Algebras for Rule-Based Op-timizers. </title> <booktitle> In Proceedings of ACM SIGMOD '96 International Conference on Management of Data, </booktitle> <address> Montreal, Canada, </address> <year> 1996. </year>
Reference: [DKL + 94] <author> D.J. DeWitt, N. Kabra, J. Luo, J.M. Patel, and J. Yu. </author> <title> Client-Server Paradise. </title> <booktitle> In Proceedings of the Twentieth International Conference on Very Large Databases (VLDB), </booktitle> <address> Santiago, Chile, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: The Clip method is then applied with the intermediate result image as its input. This input image is decompressed to a main-memory form, it is clipped to the desired dimensions, and the resulting image is compressed and written out to disk. Current OR-DBMSs like Illustra [Ill94] and Paradise <ref> [DKL + 94] </ref> use essentially this approach with some individual modifications; we mention these variations at length in Section 5. still-images, still-graphics, animation, full-motion video, audio, seismic data, and music. <p> For example, with the popular JPEG compression technique, the entire image needs to be retrieved sequentially. There are other compression techniques and variants of JPEG that allow a selective portion of the image to be retrieved and decompressed. <ref> [DKL + 94] </ref> discusses these issues in more detail. 2.2 Optimization Categories To summarize our motivation, the blackbox ADT approach used in existing OR-DBMSs violates a basic principle of database systems: queries should be declarative. The textual representation of an expression should not specify an evaluation plan. <p> To make the cost formulas meaningful, meta-information would need to be maintained for each ADT. These extensions basically require that Illustra adopt much of the E-ADT paradigm. The Paradise System: Among current research systems, the Paradise client-server DBMS <ref> [DKL + 94] </ref> is developing ADT extensions for the parallel execution of methods on spatial, geographic, and scientific data. This work concentrates on issues of scalable parallelism and the use of tertiary storage for large ADTs.
Reference: [GM88] <author> G. Graefe and D. Maier. </author> <title> Query Optimization in Object-Oriented Database Systems: The REVELATION Project, </title> <booktitle> volume 334 of Advances in Object-Oriented Database Systems, Lecture Notes in Computer Science, </booktitle> <publisher> chapter . Springer-Verlag, </publisher> <year> 1988. </year> <editor> Editor: </editor> <publisher> K.R. Dittrich. </publisher>
Reference-contexts: While the OQL query language [Cat94] for OO databases does permit a method to have several implementations, it does not suggest a mechanism for choosing between these implementations. We direct readers to <ref> [GM88] </ref> for an excellent survey of work on query optimization for complex data types in OO-DBMSs. Most closely related to E-ADTs is the REVELATION project [GM88] which correctly identifies that the semantics of methods should be revealed to the query optimizer. <p> We direct readers to <ref> [GM88] </ref> for an excellent survey of work on query optimization for complex data types in OO-DBMSs. Most closely related to E-ADTs is the REVELATION project [GM88] which correctly identifies that the semantics of methods should be revealed to the query optimizer. There is a notion of a common object algebra, and every complex type expands (or "reveals") its methods into expressions in the common algebra.
Reference: [GM93] <author> G. Graefe and W. J. McKenna. </author> <title> The Volcano optimizer generator: Extensibility and efficient search. </title> <booktitle> In Proceedings of the Ninth IEEE Conference on Data Engineering, </booktitle> <address> Taipei, Taiwan, </address> <year> 1993. </year>
Reference: [Gut77] <author> J. Guttag. </author> <title> Abstract Data Types and the Development of Data Structures. </title> <journal> Communications of the ACM, </journal> <month> June </month> <year> 1977. </year>
Reference-contexts: We should note that method transformations of the kind suggested in this paper are common in the functional programming community. The pipelining optimiza tions are similar to the use of lazy evaluation [Jon87]. While the early work on ADTs <ref> [Gut77] </ref> did emphasize the equational theory of the methods, this aspect was not carried into the use of ADTs in database systems. Our work corrects this oversight, and focuses on optimizations based on statistics and costs in a database environment.
Reference: [Hel95] <author> Joseph M. Hellerstein. </author> <title> Optimization and Execution Techniques for Queries With Expensive Methods. </title> <type> PhD thesis, </type> <institution> University of Wisconsin, </institution> <month> August </month> <year> 1995. </year> <title> 12 Praveen Seshadri: Enhanced Abstract Data Types in Object-Relational Databases </title>
Reference-contexts: The Postgres project explored issues dealing with the storage and indexed retrieval of ADTs. It also stressed that functions associated with ADTs could be expensive, and that special relational optimization techniques are necessary when such functions are present <ref> [Hel95] </ref>. The basic ADT approach described in Section 2 corresponds closely to Illustra's support for ADTs. The results of every ADT method are written to disk, and no inter-method optimizations are considered [Ols96]. While Illustra does have a rule engine, it is not used to apply optimization rules.
Reference: [Ill94] <institution> Illustra Information Technologies, Inc, </institution> <address> 1111 Broadway, Suite 2000, Oakland, CA 94607. </address> <note> Illus-tra User's Guide, </note> <month> June </month> <year> 1994. </year>
Reference-contexts: The Clip method is then applied with the intermediate result image as its input. This input image is decompressed to a main-memory form, it is clipped to the desired dimensions, and the resulting image is compressed and written out to disk. Current OR-DBMSs like Illustra <ref> [Ill94] </ref> and Paradise [DKL + 94] use essentially this approach with some individual modifications; we mention these variations at length in Section 5. still-images, still-graphics, animation, full-motion video, audio, seismic data, and music. <p> This led to the development of the Postgres research DBMS [SRH90] and its commercial version, Illustra <ref> [Ill94] </ref>. The Postgres project explored issues dealing with the storage and indexed retrieval of ADTs. It also stressed that functions associated with ADTs could be expensive, and that special relational optimization techniques are necessary when such functions are present [Hel95].
Reference: [Jon87] <editor> S.L. Peyton Jones. </editor> <booktitle> The Implementation of Functional Programming Languages. </booktitle> <publisher> Prentice Hall, </publisher> <year> 1987. </year>
Reference-contexts: The rules are syntactic, and cost-based optimization is performed after an exhaustive application of the rules. We should note that method transformations of the kind suggested in this paper are common in the functional programming community. The pipelining optimiza tions are similar to the use of lazy evaluation <ref> [Jon87] </ref>. While the early work on ADTs [Gut77] did emphasize the equational theory of the methods, this aspect was not carried into the use of ADTs in database systems. Our work corrects this oversight, and focuses on optimizations based on statistics and costs in a database environment.
Reference: [KD98] <author> Navin Kabra and David J. DeWitt. </author> <title> Opt++: An Object Oriented Design for Extensible Database Query Optimization. </title> <note> Submitted for publication to VLDB Journal, </note> <year> 1998. </year>
Reference: [LRO96] <author> A.Y. Levy, A. Rajaraman, and J. Ordille. </author> <title> Querying Heterogeneous Information Sources using SOurce Descriptions. </title> <booktitle> In Proceedings of the Twenty Second International Conference on Very Large Databases (VLDB), </booktitle> <address> Bombay, India, </address> <year> 1996. </year>
Reference: [LV91] <author> R.S.G. Lanzelotte and P. Valduriez. </author> <title> Extending the Search Strategy in a Query Optimizer. </title> <booktitle> In Proceedings of the Seventeenth International Conference on Very Large Databases, </booktitle> <pages> pages 363-373, </pages> <year> 1991. </year>
Reference: [LZ74] <author> B. Liskov and S. Zilles. </author> <title> Programming with Abstract Data Types. </title> <journal> In SIGPLAN Notices, </journal> <month> April </month> <year> 1974. </year>
Reference: [MDZ93] <author> Gail Mitchell, Umeshwar Dayal, and Stanley Zdonik. </author> <title> Control of an Extensible Query Optimizer: A Planning-Based Approach. </title> <booktitle> In Proceedings of the Nineteenth International Conference on Very Large Databases (VLDB), Dublin, Ireland, </booktitle> <pages> pages 517-528, </pages> <year> 1993. </year>
Reference-contexts: On the other hand, conventional rule-based optimizer proposals do not have such notions of optimization locality. The closest in spirit are the "region" architecture for query optimizers proposed in <ref> [MDZ93] </ref>, the "module" architecture proposed in [SS90], and other research on extensible search strategies [RH87,LV91]. Our work differs in that it is focused on complex data type expressions, rather than relational expressions.
Reference: [Ols96] <author> Mike Olson, </author> <year> 1996. </year> <type> Personal Communication. </type>
Reference-contexts: The basic ADT approach described in Section 2 corresponds closely to Illustra's support for ADTs. The results of every ADT method are written to disk, and no inter-method optimizations are considered <ref> [Ols96] </ref>. While Illustra does have a rule engine, it is not used to apply optimization rules. Currently, Illustra's technology has been integrated with the Informix Universal Server and extended to exploit parallelism. Several modifications are being made to improve the evaluation of ADT expressions [Ols96]. <p> and no inter-method optimizations are considered <ref> [Ols96] </ref>. While Illustra does have a rule engine, it is not used to apply optimization rules. Currently, Illustra's technology has been integrated with the Informix Universal Server and extended to exploit parallelism. Several modifications are being made to improve the evaluation of ADT expressions [Ols96]. The main improvements allow functions to retain the results in main-memory, or to present an iterator interface that helps pipelined execution as well as parallel execution. Transformational and Constraint optimizations are not supported. Illustra did provide a slightly declarative semantics to ADT expressions.
Reference: [PGH96] <author> Y. Papakonstantinou, A. Gupta, and L. Haas. </author> <title> Capabilities-based Query Rewriting in Mediator Systems. </title> <booktitle> In Proceedings of the Parallel and Distributed Information Systems (PDIS) Conference, </booktitle> <pages> pages 170-181, </pages> <year> 1996. </year>
Reference: [RH87] <author> A. Rosenthal and P. Helman. </author> <title> Understanding and Extending Transformation-Based Optimiz-ers. </title> <journal> Database Engineering, </journal> <volume> 9(4) </volume> <pages> 44-51, </pages> <month> December </month> <year> 1987. </year>
Reference: [Ses97] <author> Praveen Seshadri. </author> <title> Predator: Design and Implementation, 1997. Documentation accompnaying code release. </title>
Reference-contexts: Some existing OR-DBMS systems already support this fea ture. 3 E-ADTs in Predator Predator implements an architectural framework in which E-ADT optimizations may be applied. While the low-level implementation details are described in <ref> [Ses97] </ref>, this paper describes the high-level system design. Current OR-DBMSs do not perform such optimizations; further, they lack the framework to do so. Fig. 1. Predator Type System Architecture Predator is a client-server OR-DBMS in which the server maintains a loosely-coupled collection of E-ADTs.
Reference: [SLVZ95] <author> Bharati Subramaniam, Theodore Leung, Scott Vandenberg, and Stanley Zdonik. </author> <title> The AQUA Approach to Querying Lists and Trees in Object-Oriented Databases. </title> <booktitle> In Proceedings of the Eleventh IEEE Conference on Data Engineering, </booktitle> <address> Taipei, Taiwan, </address> <month> March </month> <year> 1995. </year>
Reference-contexts: Instead of breaking a query into many components with local query optimization on each E-ADT expression, these approaches try to find a global solution. This requires that the entire query be modeled in an integrated framework. AQUA <ref> [SLVZ95] </ref> is an algebraic frameworks proposed for this purpose, while CPL/Kleisli [Won94] is a framework based on comprehensions as a query language and monadic operations. These are all frameworks for collection types (like sets, bags, lists, and arrays).
Reference: [SRG83] <author> M. Stonebraker, B. Rubenstein, and A. Guttman. </author> <title> Application of Abstract Data Types and Abstract Indices to CAD Data Bases. </title> <booktitle> In Proceedings of the Engineering Applications Stream of Database Week, </booktitle> <address> San Jose, CA, </address> <month> May </month> <year> 1983. </year>
Reference-contexts: Praveen Seshadri: Enhanced Abstract Data Types in Object-Relational Databases 9 5 Related Work Postgres, Illustra, and Informix: The issue of support for ADTs in relational database systems was first explored in <ref> [SRG83] </ref> and [Sto86]. This led to the development of the Postgres research DBMS [SRH90] and its commercial version, Illustra [Ill94]. The Postgres project explored issues dealing with the storage and indexed retrieval of ADTs.
Reference: [SRH90] <author> Michael Stonebraker, Lawrence Rowe, and Michael Hirohama. </author> <title> The Implementation of POSTGRES. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 2(1) </volume> <pages> 125-142, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: The basic technology used is that of Abstract Data Types (ADTs), which was adapted from programming language concepts [Gut77,LZ74] to databases in the 1980s [SRG83,Sto86] in the Postgres <ref> [SRH90] </ref> system. Object-oriented database systems and persistent programming languages also developed similar ideas, but we will focus here on object-relational database systems. The OR-DBMS maintains a table of ADTs, and new ADTs may be added by a database developer. <p> Praveen Seshadri: Enhanced Abstract Data Types in Object-Relational Databases 9 5 Related Work Postgres, Illustra, and Informix: The issue of support for ADTs in relational database systems was first explored in [SRG83] and [Sto86]. This led to the development of the Postgres research DBMS <ref> [SRH90] </ref> and its commercial version, Illustra [Ill94]. The Postgres project explored issues dealing with the storage and indexed retrieval of ADTs. It also stressed that functions associated with ADTs could be expensive, and that special relational optimization techniques are necessary when such functions are present [Hel95].
Reference: [SS90] <author> Edward Sciore and John Sieg. </author> <title> A Modular Query Optimizer Generator. </title> <booktitle> In Proceedings of the Sixth IEEE Conference on Data Engineering, </booktitle> <pages> pages 146-153, </pages> <year> 1990. </year>
Reference-contexts: On the other hand, conventional rule-based optimizer proposals do not have such notions of optimization locality. The closest in spirit are the "region" architecture for query optimizers proposed in [MDZ93], the "module" architecture proposed in <ref> [SS90] </ref>, and other research on extensible search strategies [RH87,LV91]. Our work differs in that it is focused on complex data type expressions, rather than relational expressions.
Reference: [Sto86] <author> Michael Stonebraker. </author> <title> Inclusion of New Types in Relational Data Base Systems. </title> <booktitle> In Proceedings of the Second IEEE Conference on Data Engineering, </booktitle> <pages> pages 262-269, </pages> <year> 1986. </year>
Reference-contexts: Praveen Seshadri: Enhanced Abstract Data Types in Object-Relational Databases 9 5 Related Work Postgres, Illustra, and Informix: The issue of support for ADTs in relational database systems was first explored in [SRG83] and <ref> [Sto86] </ref>. This led to the development of the Postgres research DBMS [SRH90] and its commercial version, Illustra [Ill94]. The Postgres project explored issues dealing with the storage and indexed retrieval of ADTs.
Reference: [TRS97] <author> M. Tork-Roth and P. Schwarz. </author> <title> Don't scrap it, wrap it! A Wrapper Architecture for Legacy Data Sources. </title> <booktitle> In Proceedings of the Twenty Third International Conference on Very Large Databases (VLDB), </booktitle> <address> Athens, Greece, </address> <pages> pages 266-275, </pages> <month> August </month> <year> 1997. </year>
Reference: [Won94] <author> Limsoon Wong. </author> <title> Querying Nested Collections. </title> <type> PhD thesis, </type> <institution> U.Pennsylvania, </institution> <year> 1994. </year>
Reference-contexts: Instead of breaking a query into many components with local query optimization on each E-ADT expression, these approaches try to find a global solution. This requires that the entire query be modeled in an integrated framework. AQUA [SLVZ95] is an algebraic frameworks proposed for this purpose, while CPL/Kleisli <ref> [Won94] </ref> is a framework based on comprehensions as a query language and monadic operations. These are all frameworks for collection types (like sets, bags, lists, and arrays). However, many important complex data types including multi-media types do not fall in this category.
References-found: 33

