URL: ftp://ftp.research.microsoft.com/pub/tr/tr-98-32.ps
Refering-URL: http://www.research.microsoft.com/sn/Millennium/Coign.html
Root-URL: http://www.research.microsoft.com
Title: A Guided Tour of the Coign Automatic Distributed Partitioning System  
Author: Galen C. Hunt Michael L. Scott 
Note: Submitted for Publication  
Address: One Microsoft Way Redmond, WA 98052  
Date: July 1998  
Affiliation: Microsoft Research  Department of Computer Science University of Rochester  Microsoft Research Microsoft Corporation  
Abstract: Technical Report MSR-TR-98-32 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Amza, Cristiana, Alan L. Cox, Sandhya Dwarkadas, Pete Keleher, Honghui Lu, Ramak-rishnan Rajamony, Weimin Yu, and Willy Zwaenepoel. TreadMarks: </author> <title> Shared Memory Computing on Networks of Workstations. </title> <booktitle> In Computer, </booktitle> <volume> 29(2) </volume> <pages> 18-28, </pages> <month> February </month> <year> 1996. </year>
Reference-contexts: To enable other, potentially better distributions, either the non-distributable interfaces in Picture It! must be replaced with distributed IDL interfaces, or Coign must be extended to support transparent migration of shared memory regions; in es sence leveraging the features of a software distributed shared memory (DSM) system <ref> [1, 15] </ref>. distribution of the Octarine word processor. In this sce nario, Octarine loaded and displayed the first page of a 35-page, text-only document. Only two components of 458 are located on the server.
Reference: [2] <author> Arnold, Thomas R., II,. </author> <title> Software Testing with Visual Test 4.0. </title> <publisher> IDG Books Worldwide, </publisher> <address> Foster City, CA, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: For our simple example, we start Picture It!, load a file for preview, and exit the application. For more advanced profiling, scenarios can be driven by an automated testing tool, such as Visual Test <ref> [2] </ref>. During profiling, the Coign instrumentation maintains running summaries of the intercomponent communication within the application. Coign quantifies every inter-component function call through a COM interface. The instrumentation measures the number of bytes that would have to be transferred between machines if the two communicating components were distributed.
Reference: [3] <author> Dahlhaus, E., D. S. Johnson, C. H. Papadimi-triou, P. D. Seymour, and M. Yannakakis. </author> <title> The Complexity of Multiterminal Cuts. </title> <journal> In SIAM Journal on Computing, </journal> <volume> 23(4) </volume> <pages> 864-894, </pages> <month> August </month> <year> 1994. </year>
Reference-contexts: IDAP runs the instrumented application under control of a test facility with the VisualAge system. After the application execution, the programmer either manually partitions the components or invokes an automatic graph-partitioning algorithm. The algorithm used is an approximation algorithm capable of multi-way cuts for two or more hosts <ref> [3] </ref>. After choosing a distribution, VisualAge generates a new version of the application. IDAP supports distributed partitioning only for statically allocated components. Although initially based on Smalltalk, the distributable components are large-grain components, not the fine-grained objects native to Small-talk.
Reference: [4] <author> Ford, Lester R., Jr. and D. R. Fulkerson. </author> <title> Flows in Networks. </title> <publisher> Princeton University Press, </publisher> <address> Princeton, NJ, </address> <year> 1962. </year>
Reference-contexts: ICOPS was the first system to use scenario-based profiling to gather statistics for distributed partitioning; the first system to support multiple distributions per application based on host-processor load; and the first system to use a maximum-flow-minimum-cut (MAX-FLOW/MIN-CUT) algorithm <ref> [4] </ref> to choose distributions. ICOPS was used to automatically distribute HUGS, a two dimensional drafting program developed at Brown University. HUGS consisted of seven modules. Three of theseconsisting of 20 procedures in allcould be located on either the client or the server. ICOPS was never intended for shrinkwrapped, commercial applications.
Reference: [5] <author> Hunt, Galen C. </author> <title> Automatic Distributed Partitioning of Component Applications. </title> <type> Ph.D. Dissertation, </type> <institution> Department of Computer Science. University of Rochester, </institution> <month> July </month> <year> 1998. </year>
Reference-contexts: Nonetheless, programmers resist repartitioning the application because it often requires extensive modifications to source code and program structure. In this paper, we present a guided tour of Coign <ref> [5] </ref>, an automatic distributed partitioning system (ADPS) that promises to significantly ease the development of component-based distributed applications. Given an application built with COM components, Coign uses inexpensive scenario-based profiling on a single computer to quantify intercomponent communication costs for both single-machine and multi-machine distributions.
Reference: [6] <institution> International Business Machine, Inc. VisualAge Generator. Version 3.0, </institution> <address> Raleigh. NC, </address> <month> September </month> <year> 1997. </year>
Reference-contexts: Kimelmans team has tested their system on a number of real Smalltalk applications, but in each case, the application had far fewer than 100 components [7]. The latest version of IDAP generates C++ code for connecting CORBA components, but still does not support dynamic component instantiation <ref> [6] </ref>. Moreover, the use of CORBA restricts IDAP to a distribution granularity of whole processes because CORBA does not support loading multiple component servers into the same address space. The IDAP programmer must be vary aware of distribution choices.
Reference: [7] <author> Kimelman, Doug, Tova Roth, Hayden Lindsey, and Sandy Thomas. </author> <title> A Tool for Partitioning Distributed Object Applications Based on Communication Dynamics and Visual Feedback. </title> <booktitle> In Proceedings of the Advanced Technology Workshop, Third USENIX Conference on Object-Oriented Technologies and Systems. </booktitle> <address> Portland, OR, </address> <month> June </month> <year> 1997. </year>
Reference-contexts: ICOPS gave the application the luxury of location transparency, but still required the programmer or user to explicitly select a distribution based on machine load. 2.2. IDAP Kimelman et al. <ref> [7] </ref> describe the Intelligent Dynamic Application Partitioning (IDAP) system, an ADPS for Smalltalk applications. IDAP is an add-on to IBMs VisualAge Generator. Using VisualAge Generators visual builder, a programmer designs an application by instantiating and connecting components in a graphical environment. The builder emits code for the created application. <p> Although initially based on Smalltalk, the distributable components are large-grain components, not the fine-grained objects native to Small-talk. Kimelmans team has tested their system on a number of real Smalltalk applications, but in each case, the application had far fewer than 100 components <ref> [7] </ref>. The latest version of IDAP generates C++ code for connecting CORBA components, but still does not support dynamic component instantiation [6]. Moreover, the use of CORBA restricts IDAP to a distribution granularity of whole processes because CORBA does not support loading multiple component servers into the same address space.
Reference: [8] <author> Michel, Janet and Andries van Dam. ([SHUL HQFHflZLWKfl'LVWULEXWHGfl3URFHVVLQJflRQflD +RVW6DWHOOLWHfl*UDSKLFVfl6"VWHP. </author> <booktitle> In Proceedings of the ACM SIGGRAPH, </booktitle> <pages> pp. 190-195. </pages> <address> Philadelphia, PA, </address> <month> July </month> <year> 1976. </year>
Reference-contexts: We describe Coigns architecture in Section 4. Section 5 contains an experimental evaluation of Coigns effectiveness in distributing three applications. Finally, in Section 6 we conclude and discuss future work. 2 2. Related Work 2.1. ICOPS The idea of an ADPS is not new. The Interconnected Processor System (ICOPS) <ref> [8, 14, 16] </ref> supported distributed application partitioning in the 1970s. Under the direction of Andries van Dam, ICOPS pioneered the use of compiler-generated stubs for inter-process communication.
Reference: [9] <author> Microsoft Corporation. </author> <title> Microsoft Open Database Connectivity Software Development Kit. Version 2.0. </title> <publisher> Microsoft Press, </publisher> <year> 1994. </year>
Reference-contexts: As shipped, Benefits can be distributed as either a 2-tier or a 3-tier clientserver application. In the 2-tier scenario, the Visual Basic front-end and the busi ness-logic components are located on the client while the database is located on the server and accessed through ODBC <ref> [9] </ref>. In the 3-tier scenario, the Visual Basic front end is located on the client, the business-logic compo nents are located on the middle tier, and the database is located on the server. Coign cannot analyze proprietary connections between the ODBC driver and the database server.

Reference: [11] <author> Microsoft Corporation. </author> <title> Overview of the Corporate Benefits System. In Microsoft Developer Network, </title> <month> January </month> <year> 1997. </year>
Reference-contexts: Octarine manipulates three major types of documents: word-processing documents, sheet-music documents, and table documents. Fragments of any of the three document types can be combined into a single document. Octarine is composed of approximately 120,000 lines of C and 500 lines of x86-assembly source code. The Corporate Benefits Sample <ref> [11] </ref> is an application distributed by Microsoft Corporation to demonstrate the use of COM for creating clientserver applications. The Corporate Benefits Sample provides windows for modifying, querying, and creating graphical reports on a database of corporate employees and their benefits.
Reference: [12] <author> Microsoft Corporation. </author> <title> Picture It! Version 2.0, </title> <address> Redmond, WA, </address> <month> September </month> <year> 1997. </year>
Reference-contexts: A Guided Tour To solidify the concept of an ADPS, we describe a detailed example of Coigns usage to automatically distribute an existing COM application. The application used in this example is a preliminary version of a future release of Microsoft Picture It! <ref> [12] </ref>. (The original, un-instrumented version of Picture It! application is designed to run on a single computerit provides no explicit support for distribution.) 3.1. <p> For our experiments, we use a suite of three applications built from COM components: Microsoft Picture It!, Octarine, and the Corporate Benefits Sample. We believe that these applications represent a wide class of COM applications. Microsoft Picture It! <ref> [12] </ref> is a consumer application for manipulating digitized photographs. Picture It! includes tools for selecting a subset of an image, applying a set of transforms to the subset, and inserting the transformed subset into another image.
Reference: [13] <author> Microsoft Corporation. </author> <title> MIDL Programmer's Guide and Reference. Windows Platform SDK, </title> <address> Redmond, WA, </address> <month> April </month> <year> 1998. </year>
Reference-contexts: The current Coign runtime contains two interface informers. The first interface informer operates during scenario-based profiling. The profiling interface informer uses format strings generated by the MIDL compiler <ref> [13] </ref> and interface marshalling code to analyze all function call parameters and precisely measure intercomponent communication. Profiling currently adds up to 85% to execution run time. Most of this overhead is incurred by the interface informer. The second interface informer is used after profiling to produce the distributed application.
Reference: [14] <author> Stabler, George M. </author> <title> A System for Interconnected Processing. </title> <type> Ph.D. Dissertation, </type> <institution> Department of Applied Mathematics. Brown University, Providence, RI, </institution> <month> October </month> <year> 1974. </year>
Reference-contexts: We describe Coigns architecture in Section 4. Section 5 contains an experimental evaluation of Coigns effectiveness in distributing three applications. Finally, in Section 6 we conclude and discuss future work. 2 2. Related Work 2.1. ICOPS The idea of an ADPS is not new. The Interconnected Processor System (ICOPS) <ref> [8, 14, 16] </ref> supported distributed application partitioning in the 1970s. Under the direction of Andries van Dam, ICOPS pioneered the use of compiler-generated stubs for inter-process communication.
Reference: [15] <author> Stets, Robert, Sandhya Dwarkadas, Nikolaos Hardavellas, Galen Hunt, Leonidas Kontothanas-sis, Srivinasan Parthasarathy, and Michael Scott. Cashmere-2L: </author> <title> Software Coherent Shared Memory on a Clustered Remote-Write Network. </title> <booktitle> In Proceedings of the Sixteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pp. 170-183. </pages> <address> Saint Malo, France, </address> <month> October </month> <year> 1997. </year> <note> [16] van Dam, </note> <author> Andries, George M. Stabler, and Rich-ard J. Harrington. </author> <title> Intelligent Satellites for Interactive Graphics. </title> <booktitle> In Proceedings of the IEEE, </booktitle> <volume> 62(4) </volume> <pages> 483-492, </pages> <month> April </month> <year> 1974. </year>
Reference-contexts: To enable other, potentially better distributions, either the non-distributable interfaces in Picture It! must be replaced with distributed IDL interfaces, or Coign must be extended to support transparent migration of shared memory regions; in es sence leveraging the features of a software distributed shared memory (DSM) system <ref> [1, 15] </ref>. distribution of the Octarine word processor. In this sce nario, Octarine loaded and displayed the first page of a 35-page, text-only document. Only two components of 458 are located on the server.
References-found: 14

