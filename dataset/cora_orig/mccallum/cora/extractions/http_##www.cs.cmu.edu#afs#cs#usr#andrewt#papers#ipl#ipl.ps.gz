URL: http://www.cs.cmu.edu/afs/cs/usr/andrewt/papers/ipl/ipl.ps.gz
Refering-URL: http://www.cs.cmu.edu/~andrewt/papers.html
Root-URL: 
Title: Lower Bounds for Two Call Control Problems  
Author: Andrew Tomkins 
Keyword: Algorithms, Call Control, Scheduling  
Date: October 28, 1995  
Abstract: We present lower bounds for two call control scheduling problems. For the problem of scheduling infinite-duration calls deterministically without pre-emption on a linear array of processors, in which the goal is to use as many edges as possible, we show a 2 + 1 4:2 lower bound on the competitive ratio (where is the golden ratio). For the problem of scheduling infinite-duration calls on an edge of capacity 1 with randomization but no pre-emption, such that calls have bandwidth between 1=B and 1, we show a (log B)=2 lower bound. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Awerbuch, Y. Bartal, A. Fiat, and A. Rosen. </author> <title> Competitive non-preemptive call control. </title> <booktitle> In Symposium on Discrete Algorithms, </booktitle> <year> 1994. </year>
Reference-contexts: We show that no algorithm in this model can achieve a competitive ratio better than 2 + 1. Additionally we consider an algorithm of Awerbuch, Bartal, Fiat and Rosen <ref> [1] </ref> for scheduling on n-node trees with randomization but no pre-emption. The goal is to maximize the total benefit. Edges are unit capacity, and calls are parametrized by start point, end point, duration (between 1 and T ), bandwidth (between 1=B and 1), and benefit (between 1 and F ). <p> We give a lower bound of (log B)=2 on a single edge, which can be cascaded with the other lower bounds to match the upper bound (to within a constant). The authors of <ref> [1] </ref> have a similar bound using different techniques [2], which is expected to appear in the journal version of their paper. The problem we solve may also be phrased as follows: let S be a set of identical items. <p> An algorithm must accept or reject requests of the form "Give me k items from S." The goal of the algorithm is to accept as many requests as possible. The techniques of <ref> [1] </ref> show how to design such an algorithm; we show that the competitive ratio of any algorithm is at least (log jSj)=2. 2 Scheduling on a Linear Array We present the lower bound for scheduling on an n-node linear array. <p> Thanks also to the authors of <ref> [1] </ref> for helpful discussions of the status of the bandwidth lower bound and to Baruch Schieber for helpful comments on an earlier draft of the pre-emptive lower bound. Finally, thanks to an anonymous referee for several helpful suggestions, clarifications and simplifications.
Reference: [2] <author> Y. Bartal. </author> <type> Personal communication, </type> <year> 1995. </year>
Reference-contexts: We give a lower bound of (log B)=2 on a single edge, which can be cascaded with the other lower bounds to match the upper bound (to within a constant). The authors of [1] have a similar bound using different techniques <ref> [2] </ref>, which is expected to appear in the journal version of their paper. The problem we solve may also be phrased as follows: let S be a set of identical items.
Reference: [3] <author> S. Baruah, G. Koren, D. Mao, B. Mishra, A. Raghunathan, L. Rosier, D. Sasha, and F. Wang. </author> <title> On the competitiveness of on-line real-time task scheduling. </title> <booktitle> In Proc. IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 106-115, </pages> <year> 1991. </year>
Reference-contexts: Thus, this model favors calls between distant processors on the line. They show that, with respect to this benefit measure, the competitive ratio of their algorithm is 2 + 1 4:2, where is the golden ratio, 1+ p 2 . They also adapt a lower bound of <ref> [3] </ref> to show fl andrewt@cs.cmu.edu 1 that no algorithm can achieve a competitive ratio better than 4. We show that no algorithm in this model can achieve a competitive ratio better than 2 + 1.
Reference: [4] <author> J. Garay, I. Gopal, S. Kutten, Y. Mansour, and M. Yung. </author> <title> Efficient on-line call control algorithms. </title> <booktitle> In 2nd Annual Israel Conference of Computing and Systems, </booktitle> <address> Netania, Israel, </address> <year> 1993. </year>
Reference-contexts: Algorithms are evaluated using the competitive ratio, defined by Sleator and Tarjan [5] to be the maximum over all input sequences of the benefit attained by the optimal solution divided by the benefit attained by the algorithm. Garay, Gopal, Kutten, Mansour, and Yung <ref> [4] </ref> study call admission for linear array networks of processors. They define various models depending on whether calls may be pre-empted, whether algorithms may use randomization, and how much benefit algorithms accrue for scheduling a particular call.
Reference: [5] <author> D. Sleator and R. Tarjan. </author> <title> Amortized efficiency of list update and paging rules. </title> <journal> Communications of the ACM, </journal> <volume> 28(2) </volume> <pages> 202-208, </pages> <year> 1985. </year>
Reference-contexts: A call admission algorithm must accept or reject each call in an on-line manner, i.e., before seeing any future calls. Algorithms are evaluated using the competitive ratio, defined by Sleator and Tarjan <ref> [5] </ref> to be the maximum over all input sequences of the benefit attained by the optimal solution divided by the benefit attained by the algorithm. Garay, Gopal, Kutten, Mansour, and Yung [4] study call admission for linear array networks of processors.
Reference: [6] <author> Andrew Yao. </author> <title> Towards a unified measure of complexity. </title> <booktitle> In Proceedings of the 18th Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 222-227, </pages> <year> 1977. </year>
Reference-contexts: Theorem 2 No algorithm for scheduling in this model can attain competitive ratio better than (log B)=2. Proof: We show the lower bound using an application of Yao's minimax theorem <ref> [6] </ref>. We wish to show that there will be a difficult sequence for any randomized algorithm. Instead, by applying the minimax theorem, we show that there exists a distribution over a set of request sequences such that any deterministic algorithm will have low expected competitive ratio.
References-found: 6

