URL: http://www.csc.ncsu.edu/eos/users/r/rhee/WWW/thesis/bala_thesis.ps
Refering-URL: http://www.csc.ncsu.edu/eos/users/r/rhee/WWW/
Root-URL: http://www.csc.ncsu.edu
Note: Contents  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> S. Armstrong, A. Freier, and K. Marzullo, </author> <title> "Multicast Transport Protocol," Internet Request for Comments RFC 1301, </title> <month> February </month> <year> 1992. </year>
Reference: [2] <author> K. P. Birman, </author> <title> "The Process Group Approach to Reliable Distributed Computing," </title> <journal> Communications of the ACM, </journal> <volume> Vol. 36, No. 12, </volume> <month> December </month> <year> 1993. </year>
Reference: [3] <author> K. P. Birman and T. Clark, </author> <title> "Performance of the Isis Distributed Computing Toolkit," </title> <institution> Cornell University's Computer Science Department Technical Report 94-1432, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: We examine several protocols in each category with an emphasis on their congestion control techniques. Unstructured protocols do not impose any topological structure on the members of the multicast group, and Pingali et al.[37] further classify them into sender-based <ref> [46, 3, 38, 9, 27, 39] </ref> and receiver-based protocols [17, 41]. In sender-based protocols, every receiver sends ACKs or NACKs directly to the sender, and the sender retransmits lost packets reported in NACKs.
Reference: [4] <author> C. Bormann, J. Ott, H. C. Gehrcke, T. Kerschat, N. Seifert, "MTP-2: </author> <title> Towards Achieving the S.E.R.O. Properties for Multicast Transport," </title> <booktitle> Proceedings of ICCCN, </booktitle> <address> San Francisco, </address> <month> September </month> <year> 1994. </year> <month> 96 </month>
Reference: [5] <author> B. Braden, D. Clark, J. Crowcroft, B. Davie, S. Deering, D. Estrin, S. Floyd, V. Jacobson, G. Minshall, C. Partridge, L. Peterson, K. K. Ra-makrishnan, S. Shenker, J. Wroclawski, L. Zhang, </author> <title> "Recommendations on Queue Management and Congestion Avoidance in the Internet," </title> <type> Internet Draft, </type> <month> March </month> <year> 1997. </year>
Reference-contexts: This congestion control mechanism encourages the fair sharing of a congested link among multiple competing TCP flows. A data flow is said to be TCP-compatible or TCP-like 3 if it behaves like a flow produced by TCP under congestion <ref> [5] </ref>. At steady state, a TCP-compatible flow uses no more bandwidth than a conforming TCP connection running under comparable conditions. Many Internet-based multimedia and collaborative applications use mul-ticast. Unfortunately most multicast schemes do not employ a congestion control or avoidance mechanism. <p> Furthermore, as Floyd pointed out in [13], extra delays up to a few seconds can be tolerated because network links where a single flow can create severe transient congestion are likely to employ an appropriate queue management mechanism such as random early detection (RED) <ref> [16, 5] </ref>. We have observed through a small-scale experiment that the delay in our protocol is well within this range; more details are given in Chapter 4 (also refer to Figure 4.2). 3.3.11 Window Update Acknowledgments Each receiver periodically sends information about its window size to its parents.
Reference: [6] <author> L. S. Brakmo, S. W. O'Malley, and L. L. Peterson, </author> <title> "TCP Vegas: New Techniques for Congestion Detection and Avoidance," </title> <booktitle> Proceedings of ACM SIGCOMM, </booktitle> <pages> pp. 24-35, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: We have modified the congestion control procedures 6 (e.g., slow start, retransmissions and congestion avoidance) of TCP-Vegas <ref> [6] </ref> to use RTD instead of RTT. Use of retransmission window. Many previously proposed protocols assume that there is always extra bandwidth available for retransmission, and that lost packets can be retransmitted without being subjected to congestion control. <p> We call this linear increase period the congestion avoidance period. Since slow start increases cwnd exponentially, this process itself can cause congestion. MTCP adopts the slow start mechanisms of TCP-Vegas <ref> [6] </ref> to detect congestion even during slow start. For this, the sender and SAs maintain two variables for each child: * baseRTD which is the minimum of the RTD's seen so far and 38 * mRTD which is the currently measured RTD.
Reference: [7] <author> S. Y. Cheung and M. H. Ammar, </author> <title> "Using Destination Set Grouping to Improve the Performance of Window-Controlled Multipoint Connections," </title> <type> Technical Report GIT-CC-94-32, </type> <institution> Georgia Institute of Technology, Atlanta, </institution> <month> August </month> <year> 1994. </year>
Reference: [8] <author> D-M. Chiu and R. Jain, </author> <title> "Analysis of the Increase and Decrease Algorithms for Congestion Avoidance in Computer Networks," </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> Vol. 17, </volume> <pages> pp. </pages> <address> 1- 14, </address> <year> 1989. </year>
Reference: [9] <author> J. R. Cooperstock and S. Kotsopoulos, </author> <title> "Why Use a Fishing Line When You have a Net? An Adaptive Multicast Data Distribution Protocol," </title> <booktitle> 97 Proceedings of USENIX Technical Conference, </booktitle> <month> January </month> <year> 1996. </year>
Reference-contexts: We examine several protocols in each category with an emphasis on their congestion control techniques. Unstructured protocols do not impose any topological structure on the members of the multicast group, and Pingali et al.[37] further classify them into sender-based <ref> [46, 3, 38, 9, 27, 39] </ref> and receiver-based protocols [17, 41]. In sender-based protocols, every receiver sends ACKs or NACKs directly to the sender, and the sender retransmits lost packets reported in NACKs.
Reference: [10] <author> S. Deering, </author> <title> "Multicast Routing in a Datagram Internetwork," </title> <type> Ph.D. Thesis, </type> <institution> Stanford University, </institution> <month> December </month> <year> 1991. </year>
Reference-contexts: The internal nodes are called sender's agents (SA). Each member is identified by an unique identifier. * A sender multicasts data packets using services of an IP-Multicast routing technology <ref> [10] </ref> to all receivers. The maximum size of a data packet is fixed and is called the segment size. When the sender sends a data packet it sets a retransmission timer for each packet based on its slowest child. <p> This window is different from the receive window of RMTP [35] which simply records received and missing packets. 22 3.2 Network Architecture and Assumptions Our congestion control mechanism assumes the following model: IP Multicast: A sender transmits data packets to the multicast group using services of an IP-multicast routing technology <ref> [10] </ref>. Each data packet is identified by a sequence number. The sender starts sending only after every receiver has joined the multicast group.
Reference: [11] <author> D. DeLucia and K. Obraczka, </author> <title> "Multicast Feedback Suppression Using Representatives," </title> <booktitle> Proceedings of IEEE INFOCOM, </booktitle> <month> April </month> <year> 1997. </year>
Reference-contexts: So the congestion is completely neglected until the buffers of sender's children fill up. The fact that TMTP continues to transmit at a fixed rate despite the congestion blocks TCP-compatible flows which reduce their rates at the 13 first indication of congestion. Hybrid protocols <ref> [19, 11] </ref> combine the packet recovery techniques used in structured and unstructured protocols. As in receiver-based protocols, a receiver can multicast NACKs suppressing other NACKs, while other receivers may respond to the NACKs by retransmitting lost packets. <p> In addition, a small number of representative receivers multicast their feedback immediately without any delay or suppression. The sender uses this feedback to control its transmission rate. DeLucia and Obraczka <ref> [11] </ref> have proposed a hybrid congestion control technique in which the size of the representative set is fixed, but the actual nodes in the set change over time based on the congestion status of receivers. <p> 32519.713105 32708.982590 29141.292466 40 33289.117717 32690.826650 29146.216258 r1 36572.692362 38705.680500 41868.614648 r3 41638.933544 43337.385080 49837.922372 r5 40843.667808 44891.033201 41925.383689 FI 0.990634 0.977849 0.967931 Table 4.1: Throughput at nodes which MTCP and TCP share and fairness index 69 Experimental Scenario We extend the topology used by Dante DeLucia and Katia Obraczka <ref> [11] </ref> for use in the experiment. The topologies were generated using Georgia Institute of Technology's Internetwork Topology Models (GT-ITM) tool. GT-ITM generates topologies that are an approximation to the Internet [51]. The extended network topology is shown in Figure 4.14.
Reference: [12] <author> D. Dolev and D. Malki, </author> <title> "The Transis Approach to High Availability Cluster Communication," </title> <journal> Communications of the ACM, </journal> <month> April </month> <year> 1996. </year>
Reference-contexts: However the protocol assumes that the end-to-end delay variation is bounded and a priori known to all receivers. Structured protocols impose a logical structure among group members. Two commonly studied structures are rings and trees. In ring protocols <ref> [12, 48] </ref>, a logical ring of group members is formed. Typically, a token is passed around the ring and only the process with the token may send feedback to the sender. Transis [12] implements a static sliding window algorithm that regulates the flow of data. <p> Two commonly studied structures are rings and trees. In ring protocols [12, 48], a logical ring of group members is formed. Typically, a token is passed around the ring and only the process with the token may send feedback to the sender. Transis <ref> [12] </ref> implements a static sliding window algorithm that regulates the flow of data. Although the system later evolved to include a hierarchical ring, no flow and congestion control scheme was developed for the hierarchical ring. RMP [48] supports TCP-like congestion control based 11 on both ACKs and NACKs.
Reference: [13] <author> S. Floyd, </author> <title> "Requirements for Congestion Control for Reliable Multicast," </title> <booktitle> The Reliable Multicast Research Group Meeting in Cannes, </booktitle> <month> September </month> <year> 1997. </year>
Reference-contexts: However, unless congestion is reported directly to the sender (an approach that can 43 lead to ACK implosion), this extra delay is unavoidable. Furthermore, as Floyd pointed out in <ref> [13] </ref>, extra delays up to a few seconds can be tolerated because network links where a single flow can create severe transient congestion are likely to employ an appropriate queue management mechanism such as random early detection (RED) [16, 5].
Reference: [14] <author> S. Floyd and K. </author> <month> Fall, </month> <title> "Router Mechanisms to Support End-to-End Congestion Control," </title> <institution> Lawrence Berkeley Laboratory Technical Report, </institution> <month> February </month> <year> 1997. </year>
Reference-contexts: Furthermore, the fact that non-TCP compatible flows are insensitive to existing congestion conditions (possibly caused by their traffic) increases the chances of simultaneous congestion collapses 1 in various parts of the Internet <ref> [14] </ref>. Because of the far-reaching negative impacts of non-TCP compatible multicast traffic, it is highly unlikely that transport protocols for large-scale reliable multicast will become successful or widely accepted unless they employ TCP-like congestion control mechanisms. <p> The values are calculated based on the TCP-responsiveness formula <ref> [14] </ref>: RT T q 3 fl B p where, RT T is the round-trip time B is the segment size in bytes T is the throughput specified in bytes/sec p is the loss rate.
Reference: [15] <author> K. Fall and S. Floyd, </author> <title> "Simulation-based Comparisons of Tahoe, Reno, and SACK TCP," </title> <journal> Computer Communications Review, </journal> <month> July </month> <year> 1996. </year> <month> 98 </month>
Reference: [16] <author> S. Floyd and V. Jacobson, </author> <title> "Random Early Detection Gateways for Congestion Avoidance," </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> Vol. 1 No. 4, </volume> <pages> pp. 397-413, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: Furthermore, as Floyd pointed out in [13], extra delays up to a few seconds can be tolerated because network links where a single flow can create severe transient congestion are likely to employ an appropriate queue management mechanism such as random early detection (RED) <ref> [16, 5] </ref>. We have observed through a small-scale experiment that the delay in our protocol is well within this range; more details are given in Chapter 4 (also refer to Figure 4.2). 3.3.11 Window Update Acknowledgments Each receiver periodically sends information about its window size to its parents.
Reference: [17] <author> S. Floyd, V. Jacobson, S. McCanne, C. G. Liu, L. Zhang, </author> <title> "A Reliable Multicast Framework for Light-weight Sessions and Application Level Framing," </title> <booktitle> Proceedings of ACM SIGCOMM Conference, </booktitle> <pages> pp. 342-356, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: We examine several protocols in each category with an emphasis on their congestion control techniques. Unstructured protocols do not impose any topological structure on the members of the multicast group, and Pingali et al.[37] further classify them into sender-based [46, 3, 38, 9, 27, 39] and receiver-based protocols <ref> [17, 41] </ref>. In sender-based protocols, every receiver sends ACKs or NACKs directly to the sender, and the sender retransmits lost packets reported in NACKs. <p> Assuming that a small set of bottleneck links always causes the majority of the congestion problem, the protocol solves the feedback implosion problem, as well as other problems associated with SRM <ref> [17] </ref> (such as the RTT estimation problem). The scalability and utility of the protocol highly depend on this basic assumption, namely, that the representative set is always small. <p> This is possible because SAs receive acknowledgments for the packet they sent (i.e., a closed loop system). To the best of our knowledge, this technique is unique to MTCP in that most other protocols <ref> [35, 50, 48, 17] </ref> multicast repair packets regardless of the bandwidth available in the network. 37 3.3.7 Slow Start Slow start is an algorithm used by TCP [23] to find the available bandwidth of the connection. Slow start is invoked when network states are perturbed or unknown.
Reference: [18] <author> M. Grossglauser, </author> <title> "Optimal Deterministic Timeouts for Reliable Scalable Multicast," </title> <booktitle> Proceedings of the IEEE INFOCOM'96, </booktitle> <address> San Francisco, CA, </address> <pages> pp. 1425-1432, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: This approach requires O (n 2 ) RTT estimations by every receiver, thus imposing limits that does not require global information. Grossglauser <ref> [18] </ref> propose a distributed deterministic timeout estimation protocol that does not require global information. However the protocol assumes that the end-to-end delay variation is bounded and a priori known to all receivers. Structured protocols impose a logical structure among group members. Two commonly studied structures are rings and trees.
Reference: [19] <author> M. Handley, </author> <title> "A Congestion Control Architecture for Bulk Data Transfer," </title> <booktitle> The Reliable Multicast Research Group Meeting in Cannes, </booktitle> <month> September </month> <year> 1997. </year>
Reference-contexts: So the congestion is completely neglected until the buffers of sender's children fill up. The fact that TMTP continues to transmit at a fixed rate despite the congestion blocks TCP-compatible flows which reduce their rates at the 13 first indication of congestion. Hybrid protocols <ref> [19, 11] </ref> combine the packet recovery techniques used in structured and unstructured protocols. As in receiver-based protocols, a receiver can multicast NACKs suppressing other NACKs, while other receivers may respond to the NACKs by retransmitting lost packets. <p> This assumption may not be realistic, however, since it is possible that several group members be independently and simultaneously congested although they do not share the same congested links. The protocol 14 provides no safeguard against this situation. Handley <ref> [19] </ref> has proposed a hybrid congestion control architecture. This technique, though still at the stage of work-in-progress, roughly works as follows. A small set of representative receivers is selected based on their loss characteristics, and each representative forms a subgroup along with receivers that share similar loss characteristics. <p> For each subgroup, one relay receiver is chosen to receive data from the sender and play them out at a slower rate suitable for the receivers in the subgroup. The idea of representatives is similar to that in <ref> [19] </ref>, but the subgroup idea is new and promising. However, the overhead, complexity, and efficacy of dynamic subgroup formations have yet to be explored, justified or proven.
Reference: [20] <author> M. Hofmann, </author> <title> "A Generic Concept for Large-Scale Multicast," B.Plattner(ed.), Broadband Communications, </title> <booktitle> Proceedings of International Zurich Seminar on Digital Communications (IZS '96), </booktitle> <publisher> LNCS, No.1044, Springer Verlag, </publisher> <month> February </month> <year> 1996. </year> <month> 99 </month>
Reference-contexts: The sender multicasts data to all receivers, and the latter send positive and negative acknowledgments (ACKs and NACKs respectively) to their parents in the tree. Internal nodes, called sender's agents (SAs), are responsible for handling feedback generated by their children and for retransmitting lost packets. Several tree-based protocols <ref> [22, 35, 50, 20] </ref> have been proposed in the literature, but, to the best of our knowledge, they do not incorporate 5 scalable TCP-like congestion control mechanisms that respond to congestion within a TCP time-scale. <p> In RMP, since NACKs are also multicast to suppress other NACKs, the protocol suffers from problems similar to those arising in receiver-based protocols. In a tree protocol <ref> [22, 35, 50, 20] </ref>, a logical tree structure is imposed on the multicast group, with internal nodes acting as representative receivers for the group. While the sender multicasts data to the entire group, a receiver sends feedback only to its parent. <p> Since the maximum degree of each node is limited to a small constant, each node, including the sender, receives only a small amount of feedback within a round trip time. Below, we discuss the congestion control schemes of RMTP [35] and TMTP [50], since the LBRM [22], LGC <ref> [20] </ref>, and LORAX [29] tree protocols do not incorporate (or do not give much detail about) a congestion control scheme. The main problem with RMTP is that it does not provide end-to-end feedback. The sender only gets feedback from its own children (called designated receivers (DR)) about their receiving status. <p> However, their analysis does not consider the effect of congestion control. Although tree-based protocols such as RMTP [35] and TMTP [50] incorporate congestion control schemes, these schemes suffer from the problems mentioned in Chapter 2. Hofmann <ref> [20, 21] </ref> also proposes to use a tree structure for feedback control, and provides a detailed description of how to construct such a tree, but does not provide many details on congestion control. Our TCP-like congestion control protocol takes advantage of a hierarchical tree structure imposed on the group members. <p> This is a logical tree and is not related to the routing tree used by IP-multicast. The sender multicasts data to all receivers, and the latter send feedback to their parents in the tree. Since much work exists on how to construct a tree dynamically, (e.g., <ref> [20, 21] </ref>) we omit the details on tree construction. The basic requirement from the tree construction protocol is that every node knows its parent and its children after the tree construction. Single Source Tree: We assume there is only one sender.
Reference: [21] <author> M. Hofmann, </author> <title> "Adding Scalability to Transport Level Multicast," </title> <booktitle> Proceedings of Third COST 237 Workshop Multimedia Telecommunications and Applications, </booktitle> <publisher> (Springer Verlag), </publisher> <address> Barcelona, Spain, </address> <month> November 25 - 27, </month> <year> 1996. </year>
Reference-contexts: However, their analysis does not consider the effect of congestion control. Although tree-based protocols such as RMTP [35] and TMTP [50] incorporate congestion control schemes, these schemes suffer from the problems mentioned in Chapter 2. Hofmann <ref> [20, 21] </ref> also proposes to use a tree structure for feedback control, and provides a detailed description of how to construct such a tree, but does not provide many details on congestion control. Our TCP-like congestion control protocol takes advantage of a hierarchical tree structure imposed on the group members. <p> This is a logical tree and is not related to the routing tree used by IP-multicast. The sender multicasts data to all receivers, and the latter send feedback to their parents in the tree. Since much work exists on how to construct a tree dynamically, (e.g., <ref> [20, 21] </ref>) we omit the details on tree construction. The basic requirement from the tree construction protocol is that every node knows its parent and its children after the tree construction. Single Source Tree: We assume there is only one sender.
Reference: [22] <author> H. W. Holbrook, S. K. Singhal and D. R. Cheriton, </author> <title> "Log-Based Receiver-Reliable Multicast for Distributed Interactive Simulation," </title> <booktitle> Proceedings of ACM SIGCOMM, </booktitle> <pages> pp. 328-341, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: The sender multicasts data to all receivers, and the latter send positive and negative acknowledgments (ACKs and NACKs respectively) to their parents in the tree. Internal nodes, called sender's agents (SAs), are responsible for handling feedback generated by their children and for retransmitting lost packets. Several tree-based protocols <ref> [22, 35, 50, 20] </ref> have been proposed in the literature, but, to the best of our knowledge, they do not incorporate 5 scalable TCP-like congestion control mechanisms that respond to congestion within a TCP time-scale. <p> In RMP, since NACKs are also multicast to suppress other NACKs, the protocol suffers from problems similar to those arising in receiver-based protocols. In a tree protocol <ref> [22, 35, 50, 20] </ref>, a logical tree structure is imposed on the multicast group, with internal nodes acting as representative receivers for the group. While the sender multicasts data to the entire group, a receiver sends feedback only to its parent. <p> Since the maximum degree of each node is limited to a small constant, each node, including the sender, receives only a small amount of feedback within a round trip time. Below, we discuss the congestion control schemes of RMTP [35] and TMTP [50], since the LBRM <ref> [22] </ref>, LGC [20], and LORAX [29] tree protocols do not incorporate (or do not give much detail about) a congestion control scheme. The main problem with RMTP is that it does not provide end-to-end feedback. <p> In this chapter we describe in detail the Multicast Transmission Control Protocol (MTCP), a new scalable, responsive congestion control scheme for reliable multicast based on a tree-structured protocol. Tree-structured protocols are not new and have been studied by many researchers <ref> [29, 35, 22, 50, 17 20] </ref>. However little work has been done on TCP-like congestion control for these protocols. Instead, most previous work focuses on the issues of error recovery and feedback implosion.
Reference: [23] <author> V. Jacobson, </author> <title> "Congestion Avoidance and Control," </title> <booktitle> Proceedings of ACM SIGCOMM, </booktitle> <pages> pp. 314-329, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: As these values can change over time because of routing and network traffic changes, MTCP needs to track these changes and modify its timeout values accordingly. We use the RTT estimator used in TCP <ref> [23] </ref>. RTD and RTT variance estimation provides a means for determining the value of the retransmission timer. This estimation is based on the average measured length of the RTD/RTT and the deviation in time. <p> It has been observed that when network paths become congested, the variance on packet latency becomes very high compared to the average [24]. It is hoped that by continually estimating the variance and adjusting the average, an accurate timeout period can be calculated to eliminate spurious retransmissions <ref> [23] </ref>. <p> To the best of our knowledge, this technique is unique to MTCP in that most other protocols [35, 50, 48, 17] multicast repair packets regardless of the bandwidth available in the network. 37 3.3.7 Slow Start Slow start is an algorithm used by TCP <ref> [23] </ref> to find the available bandwidth of the connection. Slow start is invoked when network states are perturbed or unknown. Network states are perturbed when there is congestion. To estimate the available bandwidth during a start up, the sender and SAs maintain a variable called (cwnd). <p> remains the same and one half of cwnd is saved in ssThresh and we remain in congestion avoidance. ssThresh = cwnd &gt;> 2; ssflag = 0; 90 Appendix B The Fast RTD/RTT Mean and Variance Estimation Calculations Fast RTD/RTT estimators described in this section were first described by Van Jacobson <ref> [23] </ref>. They follow directly from the formulas described in Section 3.3.4. To compute the estimators quickly, we use integer arithmetic. We choose both the gain terms g A and g D to be 0.125 = 1 8 .
Reference: [24] <author> R. Jain, </author> <title> "A Delay-based Approach for Congestion Avoidance in Interconnected Heterogeneous Computer Networks," </title> <journal> Computer Communication Reviews, </journal> <volume> vol. 19, </volume> <pages> pp. 56-71, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: This estimation is based on the average measured length of the RTD/RTT and the deviation in time. It has been observed that when network paths become congested, the variance on packet latency becomes very high compared to the average <ref> [24] </ref>. It is hoped that by continually estimating the variance and adjusting the average, an accurate timeout period can be calculated to eliminate spurious retransmissions [23].
Reference: [25] <author> R. Jain, </author> <title> "Congestion Control in Computer Networks: Issues and Trends," </title> <journal> IEEE Network Magazine, </journal> <pages> pp. 24-30, </pages> <month> May </month> <year> 1990. </year>
Reference: [26] <author> R. K. Jain, D. W. Chiu, W. R. Hawe, </author> <title> "A Quantitative Measure of Fairness and Discrimination for Resource Allocation in Shared Computer Systems," </title> <address> DEC TR-301, </address> <month> September 26, </month> <year> 1984. </year> <month> 100 </month>
Reference: [27] <author> A. Koifman and S. Zabele, </author> <title> "A Reliable Adaptive Multicast Protocol," </title> <booktitle> Proceedings of IEEE INFOCOM'96, </booktitle> <address> San Francisco, CA, </address> <pages> pp. 1442-1451, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: We examine several protocols in each category with an emphasis on their congestion control techniques. Unstructured protocols do not impose any topological structure on the members of the multicast group, and Pingali et al.[37] further classify them into sender-based <ref> [46, 3, 38, 9, 27, 39] </ref> and receiver-based protocols [17, 41]. In sender-based protocols, every receiver sends ACKs or NACKs directly to the sender, and the sender retransmits lost packets reported in NACKs.
Reference: [28] <author> B. N. Levine and J. J. Garcia-Luna-Aceves, </author> <title> "A Comparison of Known Classes of Reliable Multicast Protocols," </title> <booktitle> Proceedings of IEEE International Conference on Network Protocols, </booktitle> <month> October </month> <year> 1996. </year>
Reference-contexts: Tree-structured protocols are not new and have been studied by many researchers [29, 35, 22, 50, 17 20]. However little work has been done on TCP-like congestion control for these protocols. Instead, most previous work focuses on the issues of error recovery and feedback implosion. Levine and Garcia-Luna-Aceves <ref> [29, 28] </ref> analytically show that tree-based protocols can achieve higher throughput than any other class of protocols, and that their hierarchical structure is the key to reducing the processing load at each member of the multicast group. However, their analysis does not consider the effect of congestion control.
Reference: [29] <author> B. N. Levine, D. B. Lavo and J. J. Garcia-Luna-Aceves, </author> <title> "The Case for Reliable Concurrent Multicasting Using Shared Ack Trees," </title> <booktitle> ACM Multimedia 1996, </booktitle> <pages> pp. 365-376. </pages>
Reference-contexts: Below, we discuss the congestion control schemes of RMTP [35] and TMTP [50], since the LBRM [22], LGC [20], and LORAX <ref> [29] </ref> tree protocols do not incorporate (or do not give much detail about) a congestion control scheme. The main problem with RMTP is that it does not provide end-to-end feedback. The sender only gets feedback from its own children (called designated receivers (DR)) about their receiving status. <p> In this chapter we describe in detail the Multicast Transmission Control Protocol (MTCP), a new scalable, responsive congestion control scheme for reliable multicast based on a tree-structured protocol. Tree-structured protocols are not new and have been studied by many researchers <ref> [29, 35, 22, 50, 17 20] </ref>. However little work has been done on TCP-like congestion control for these protocols. Instead, most previous work focuses on the issues of error recovery and feedback implosion. <p> Tree-structured protocols are not new and have been studied by many researchers [29, 35, 22, 50, 17 20]. However little work has been done on TCP-like congestion control for these protocols. Instead, most previous work focuses on the issues of error recovery and feedback implosion. Levine and Garcia-Luna-Aceves <ref> [29, 28] </ref> analytically show that tree-based protocols can achieve higher throughput than any other class of protocols, and that their hierarchical structure is the key to reducing the processing load at each member of the multicast group. However, their analysis does not consider the effect of congestion control.
Reference: [30] <author> S. McCanne, V. Jacobson, and M. Vetterli, </author> <title> "Recevier-driven Layered Multicast," </title> <booktitle> ACM SIGCOMM, </booktitle> <address> Stanford, CA, </address> <pages> pp. </pages> <address> 117- 130, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: In addition, since the group structure is essentially two-level, it is not clear whether the protocol is scalable to very large numbers of receivers. Other types of protocols that do not fall within the above categories include receiver-driven layered multicast protocols <ref> [30, 47, 45] </ref>. These protocols implement congestion control by encoding the transmitted data into multiple layers and transmitting each layer to a different multicast group. By joining and leaving different multicast groups, each receiver can control its own receiving rate.
Reference: [31] <author> S. McCanne, </author> <title> "ns - LBNL network simulator," </title> <note> Available from http://www-mash.cs.berkeley.edu/ns/ns.html </note>
Reference: [32] <author> K. Fall and K. Varadhan, </author> <note> "ns Notes and Documentation," Available from http://www-mash.cs.berkeley.edu/ns/ns-documentation.html </note>
Reference: [33] <author> T. Montgomery, </author> <title> "A Loss Tolerant Rate Controller for Reliable Multi-cast," </title> <type> Technical Report NASA-IVV-97-011, </type> <month> August </month> <year> 1997. </year> <month> 101 </month>
Reference: [34] <author> K. Obraczka, </author> <title> "Multicast Transport Mechanisms: A Survey and Taxonomy," </title> <note> submitted to IEEE Communications Magazine. </note>
Reference: [35] <author> S. Paul, K. K. Sabnani, J. C. Lin And S. Bhattacharyya, </author> <title> "Reliable Mul-ticast Transport Protocol(RMTP)," </title> <booktitle> Proceedings of IEEE INFOCOM, </booktitle> <year> 1996. </year>
Reference-contexts: The sender multicasts data to all receivers, and the latter send positive and negative acknowledgments (ACKs and NACKs respectively) to their parents in the tree. Internal nodes, called sender's agents (SAs), are responsible for handling feedback generated by their children and for retransmitting lost packets. Several tree-based protocols <ref> [22, 35, 50, 20] </ref> have been proposed in the literature, but, to the best of our knowledge, they do not incorporate 5 scalable TCP-like congestion control mechanisms that respond to congestion within a TCP time-scale. <p> In RMP, since NACKs are also multicast to suppress other NACKs, the protocol suffers from problems similar to those arising in receiver-based protocols. In a tree protocol <ref> [22, 35, 50, 20] </ref>, a logical tree structure is imposed on the multicast group, with internal nodes acting as representative receivers for the group. While the sender multicasts data to the entire group, a receiver sends feedback only to its parent. <p> Since the maximum degree of each node is limited to a small constant, each node, including the sender, receives only a small amount of feedback within a round trip time. Below, we discuss the congestion control schemes of RMTP <ref> [35] </ref> and TMTP [50], since the LBRM [22], LGC [20], and LORAX [29] tree protocols do not incorporate (or do not give much detail about) a congestion control scheme. The main problem with RMTP is that it does not provide end-to-end feedback. <p> In this chapter we describe in detail the Multicast Transmission Control Protocol (MTCP), a new scalable, responsive congestion control scheme for reliable multicast based on a tree-structured protocol. Tree-structured protocols are not new and have been studied by many researchers <ref> [29, 35, 22, 50, 17 20] </ref>. However little work has been done on TCP-like congestion control for these protocols. Instead, most previous work focuses on the issues of error recovery and feedback implosion. <p> However, their analysis does not consider the effect of congestion control. Although tree-based protocols such as RMTP <ref> [35] </ref> and TMTP [50] incorporate congestion control schemes, these schemes suffer from the problems mentioned in Chapter 2. <p> the amount of available bandwidth between the sender and the SA's children. 1 Second, each SA sends to its parent a congestion summary consisting of the minimum of its window size and the window sizes reported by its children. 1 This window is different from the receive window of RMTP <ref> [35] </ref> which simply records received and missing packets. 22 3.2 Network Architecture and Assumptions Our congestion control mechanism assumes the following model: IP Multicast: A sender transmits data packets to the multicast group using services of an IP-multicast routing technology [10]. Each data packet is identified by a sequence number. <p> This is possible because SAs receive acknowledgments for the packet they sent (i.e., a closed loop system). To the best of our knowledge, this technique is unique to MTCP in that most other protocols <ref> [35, 50, 48, 17] </ref> multicast repair packets regardless of the bandwidth available in the network. 37 3.3.7 Slow Start Slow start is an algorithm used by TCP [23] to find the available bandwidth of the connection. Slow start is invoked when network states are perturbed or unknown.
Reference: [36] <author> V. Paxson, </author> <title> "End-to-End Routing Behavior in the Internet," </title> <booktitle> Proceedings of ACM SIGCOMM Conference, </booktitle> <year> 1996. </year>
Reference-contexts: Some Internet studies <ref> [49, 36] </ref> however, reveal that almost every experiment trace includes one or more extremely long bursts of packet loss lasting from a few seconds up to a few minutes. During these long loss bursts, no packets are received.
Reference: [37] <author> S. Pingali, D. Towsley and J. F. </author> <title> Kurose "A Comparison of Sender-Initiated and Receiver-Initiated Reliable Multicast Protocols," </title> <booktitle> Proceedings of ACM Sigmetrics, </booktitle> <year> 1994. </year>
Reference: [38] <author> R. Van Renesse, K. Birman, and S. Maffeis, "Horus: </author> <title> A flexible group communication system," </title> <journal> Communications of the ACM, </journal> <volume> Vol. 39, No. 9, </volume> <pages> pp. 64-70, </pages> <month> April </month> <year> 1996. </year>
Reference-contexts: We examine several protocols in each category with an emphasis on their congestion control techniques. Unstructured protocols do not impose any topological structure on the members of the multicast group, and Pingali et al.[37] further classify them into sender-based <ref> [46, 3, 38, 9, 27, 39] </ref> and receiver-based protocols [17, 41]. In sender-based protocols, every receiver sends ACKs or NACKs directly to the sender, and the sender retransmits lost packets reported in NACKs.
Reference: [39] <author> I. Rhee, S. Y. Cheung, P. W. Hutto and V. S. Sunderam, </author> <title> "Group Communication Support for Distributed Multimedia and CSCW Systems," </title> <booktitle> Proceedings of 17th IEEE International Conference on Distributed Computing Systems, </booktitle> <month> June </month> <year> 1997. </year> <month> 102 </month>
Reference-contexts: We examine several protocols in each category with an emphasis on their congestion control techniques. Unstructured protocols do not impose any topological structure on the members of the multicast group, and Pingali et al.[37] further classify them into sender-based <ref> [46, 3, 38, 9, 27, 39] </ref> and receiver-based protocols [17, 41]. In sender-based protocols, every receiver sends ACKs or NACKs directly to the sender, and the sender retransmits lost packets reported in NACKs.
Reference: [40] <author> I. Rhee, N. Balaguru, G. N. Rouskas, "MTCP: </author> <title> Scalable TCP-like Congestion Control for Reliable Multicast," </title> <note> Submitted to SIGCOMM, </note> <year> 1998. </year>
Reference: [41] <author> B. Sabata, M. J. Brown, and B. A. Denny, </author> <title> "Transport Protocol for Reliable Multicast: </title> <booktitle> TRM," Proceedings of the IASTED International Conference on Networks, </booktitle> <pages> pp. 143-145, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: We examine several protocols in each category with an emphasis on their congestion control techniques. Unstructured protocols do not impose any topological structure on the members of the multicast group, and Pingali et al.[37] further classify them into sender-based [46, 3, 38, 9, 27, 39] and receiver-based protocols <ref> [17, 41] </ref>. In sender-based protocols, every receiver sends ACKs or NACKs directly to the sender, and the sender retransmits lost packets reported in NACKs.
Reference: [42] <author> T. Sano, N. Yamanouchi, T. Shiroshita and O. Takahashi, </author> <title> "Flow and Congestion Control for Bulk Reliable Multicast Protocols -toward coexistence with TCP-," </title> <note> Submitted to INFOCOM, </note> <year> 1998. </year>
Reference: [43] <author> W. </author> <title> Stevens, </title> <journal> TCP/IP Illustrated, </journal> <volume> Volume 1, </volume> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1994. </year>
Reference: [44] <author> K. Thompson, G. J. Miller, and R. Wilder, </author> <title> "Wide-area Internet Traffic Patterns and Characteristics," </title> <journal> IEEE Network Magazine , 11(6)10-23, </journal> <month> November/December </month> <year> 1997. </year>
Reference-contexts: By employing a logical multi-level tree, using hierarchical congestion status reports, and locally retransmitting repair packets, MTCP has the potential to scale to a large number of receivers. Compatibility with TCP traffic is an important requirement since (a) TCP is the most commonly used transmission protocol in the Internet <ref> [44] </ref>, and (b) the utility of TCP depends on all other network flows being no more aggressive than TCP congestion control (i.e., multiplicative decrease of the congestion window on congestion occurrence and linear increase at steady state). Non-TCP-compatible flows can easily lock out TCP traffic and monopolize the available bandwidth.
Reference: [45] <author> T. Turletti, J. C. Bolot and I. Wakeman, </author> <title> "Scalable Feedback Control for Multicast Video Distribution in the Internet," </title> <booktitle> Proceedings of ACM SIGCOMM, </booktitle> <month> August </month> <year> 1994. </year> <month> 103 </month>
Reference-contexts: In addition, since the group structure is essentially two-level, it is not clear whether the protocol is scalable to very large numbers of receivers. Other types of protocols that do not fall within the above categories include receiver-driven layered multicast protocols <ref> [30, 47, 45] </ref>. These protocols implement congestion control by encoding the transmitted data into multiple layers and transmitting each layer to a different multicast group. By joining and leaving different multicast groups, each receiver can control its own receiving rate.
Reference: [46] <author> Alfred C. Weaver, </author> <title> "Xpress Transport Protocol Version 4," </title> <institution> University of Virginia. </institution>
Reference-contexts: We examine several protocols in each category with an emphasis on their congestion control techniques. Unstructured protocols do not impose any topological structure on the members of the multicast group, and Pingali et al.[37] further classify them into sender-based <ref> [46, 3, 38, 9, 27, 39] </ref> and receiver-based protocols [17, 41]. In sender-based protocols, every receiver sends ACKs or NACKs directly to the sender, and the sender retransmits lost packets reported in NACKs.
Reference: [47] <author> L. Vicisano, L. Rizzo and J. Crowcroft, </author> <title> "TCP-like congestion control for layered multicast data transfer," </title> <note> submitted to INFOCOM 1998, </note> <month> August </month> <year> 1997. </year>
Reference-contexts: In addition, since the group structure is essentially two-level, it is not clear whether the protocol is scalable to very large numbers of receivers. Other types of protocols that do not fall within the above categories include receiver-driven layered multicast protocols <ref> [30, 47, 45] </ref>. These protocols implement congestion control by encoding the transmitted data into multiple layers and transmitting each layer to a different multicast group. By joining and leaving different multicast groups, each receiver can control its own receiving rate. <p> By joining and leaving different multicast groups, each receiver can control its own receiving rate. Initially, the layering technique was proposed for con 15 tinuous multimedia data streams which can tolerate some loss. Recently the technique was applied to reliable bulk data multicast by Vicisano, Rizzo and Crowcroft <ref> [47] </ref>.
Reference: [48] <author> B. Whetten, T. Montgomery, and S. Kaplan, </author> <title> "A high performance totally ordered multicast protocol," Theory and Practice in Distributed Systems, </title> <publisher> Springer Verlag, </publisher> <address> LCNS 938. </address>
Reference-contexts: However the protocol assumes that the end-to-end delay variation is bounded and a priori known to all receivers. Structured protocols impose a logical structure among group members. Two commonly studied structures are rings and trees. In ring protocols <ref> [12, 48] </ref>, a logical ring of group members is formed. Typically, a token is passed around the ring and only the process with the token may send feedback to the sender. Transis [12] implements a static sliding window algorithm that regulates the flow of data. <p> Transis [12] implements a static sliding window algorithm that regulates the flow of data. Although the system later evolved to include a hierarchical ring, no flow and congestion control scheme was developed for the hierarchical ring. RMP <ref> [48] </ref> supports TCP-like congestion control based 11 on both ACKs and NACKs. However, since only the token holder can send an ACK, it is unclear how the ACKs are used for purposes of congestion control when there is a large number of nodes in the ring. <p> This is possible because SAs receive acknowledgments for the packet they sent (i.e., a closed loop system). To the best of our knowledge, this technique is unique to MTCP in that most other protocols <ref> [35, 50, 48, 17] </ref> multicast repair packets regardless of the bandwidth available in the network. 37 3.3.7 Slow Start Slow start is an algorithm used by TCP [23] to find the available bandwidth of the connection. Slow start is invoked when network states are perturbed or unknown.
Reference: [49] <author> M. Yajnik, J. Kurose and D. Towsley. </author> <title> "Packet Loss Correlation in the MBONE Multicast Network," </title> <type> UMASS CMPSCI Technical Report Number 96-32. </type>
Reference-contexts: Some Internet studies <ref> [49, 36] </ref> however, reveal that almost every experiment trace includes one or more extremely long bursts of packet loss lasting from a few seconds up to a few minutes. During these long loss bursts, no packets are received.
Reference: [50] <author> R. Yavatkar, J. Griffioen, and M. Sudan, </author> <title> "A Reliable Dissemination Protocol for Interactive Collaborative Applications," </title> <booktitle> Proceedings of ACM Multimedia, </booktitle> <year> 1996. </year>
Reference-contexts: The sender multicasts data to all receivers, and the latter send positive and negative acknowledgments (ACKs and NACKs respectively) to their parents in the tree. Internal nodes, called sender's agents (SAs), are responsible for handling feedback generated by their children and for retransmitting lost packets. Several tree-based protocols <ref> [22, 35, 50, 20] </ref> have been proposed in the literature, but, to the best of our knowledge, they do not incorporate 5 scalable TCP-like congestion control mechanisms that respond to congestion within a TCP time-scale. <p> In RMP, since NACKs are also multicast to suppress other NACKs, the protocol suffers from problems similar to those arising in receiver-based protocols. In a tree protocol <ref> [22, 35, 50, 20] </ref>, a logical tree structure is imposed on the multicast group, with internal nodes acting as representative receivers for the group. While the sender multicasts data to the entire group, a receiver sends feedback only to its parent. <p> Since the maximum degree of each node is limited to a small constant, each node, including the sender, receives only a small amount of feedback within a round trip time. Below, we discuss the congestion control schemes of RMTP [35] and TMTP <ref> [50] </ref>, since the LBRM [22], LGC [20], and LORAX [29] tree protocols do not incorporate (or do not give much detail about) a congestion control scheme. The main problem with RMTP is that it does not provide end-to-end feedback. <p> In this chapter we describe in detail the Multicast Transmission Control Protocol (MTCP), a new scalable, responsive congestion control scheme for reliable multicast based on a tree-structured protocol. Tree-structured protocols are not new and have been studied by many researchers <ref> [29, 35, 22, 50, 17 20] </ref>. However little work has been done on TCP-like congestion control for these protocols. Instead, most previous work focuses on the issues of error recovery and feedback implosion. <p> However, their analysis does not consider the effect of congestion control. Although tree-based protocols such as RMTP [35] and TMTP <ref> [50] </ref> incorporate congestion control schemes, these schemes suffer from the problems mentioned in Chapter 2. Hofmann [20, 21] also proposes to use a tree structure for feedback control, and provides a detailed description of how to construct such a tree, but does not provide many details on congestion control. <p> This is possible because SAs receive acknowledgments for the packet they sent (i.e., a closed loop system). To the best of our knowledge, this technique is unique to MTCP in that most other protocols <ref> [35, 50, 48, 17] </ref> multicast repair packets regardless of the bandwidth available in the network. 37 3.3.7 Slow Start Slow start is an algorithm used by TCP [23] to find the available bandwidth of the connection. Slow start is invoked when network states are perturbed or unknown.
Reference: [51] <author> E. Zegura, K. Calvert, and S. Bhallacharjee, </author> <title> "How to model an inter-network," </title> <booktitle> Proceedings of the IEEE INFOCOM'96, </booktitle> <address> San Franscisco, CA, </address> <month> April </month> <year> 1997. </year>
Reference-contexts: The topologies were generated using Georgia Institute of Technology's Internetwork Topology Models (GT-ITM) tool. GT-ITM generates topologies that are an approximation to the Internet <ref> [51] </ref>. The extended network topology is shown in Figure 4.14. The MTCPs nodes are arranged in a logical tree as show in Figure 4.15. The queuing discipline at the routers is DropTail and the queue limit at the routers are 20.
References-found: 51

