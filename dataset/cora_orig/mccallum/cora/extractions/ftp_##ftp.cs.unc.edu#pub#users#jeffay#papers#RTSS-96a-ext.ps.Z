URL: ftp://ftp.cs.unc.edu/pub/users/jeffay/papers/RTSS-96a-ext.ps.Z
Refering-URL: http://www.cs.unc.edu/Research/dirt/abstracts/RTSS-96a-abs.html
Root-URL: http://www.cs.unc.edu
Email: (stoica@cs.odu.edu).  (wahab@cs.odu.edu).  (jeffay@cs.unc.edu).  (sanjoy@cs.uvm.edu).  (johannes@cs.wisc.edu).  (plaxton@cs.utexas.edu).  
Phone: 461.  
Title: A Proportional Share Resource Allocation Algorithm For Real-Time, Time-Shared Systems  
Author: Ion Stoica Hussein Abdel-Wahab Kevin Jeffay Sanjoy K. Baruah Johannes E. Gehrke C. Greg Plaxton k 
Web: ARP-93-00365  
Note: Supported by NSF grant CCR 95-9313857.  Supported by grant from the IBM Intel corps and NSF grant CCR 95-10156. Dpt.  Supported by NSF under Research Initiation Award CCR-9596282.  k Supported by NSF grant CCR-9504145, and the Texas Advanced Research Program under grant No.  
Address: Norfolk, VA 23529-0162  Norfolk, VA 23529-0162  Chapel Hill, Chapel Hill, NC 27599-3175,  Vermont, Burlignton, VT 05405,  Madison, WI 53706-1685  Austin, Austin, TX 78712-1188  
Affiliation: Dept. of CS, Old Dominion Univ.,  Dept. of CS, Old Dominion Univ.,  of CS, Univ. of North Carolina at  Dept. of CS, Univ. of  -Dpt. of CS, Univ. of Wisconsin-Madison,  Dpt. of CS, Univ. of Texas at  
Abstract: We propose and analyze a proportional share resource allocation algorithm for realizing real-time performance in time-shared operating systems. In a proportional share system, processes are assigned a weight which determines a share (percentage) of the resource they are to receive. The resource is then allocated in discrete-sized time quanta in such a manner that each process makes progress at a precise, uniform rate. Proportional share allocation algorithms are of interest because (1) they provide a natural means of seamlessly integrating real- and non-real-time processing requirements in a general purpose operating system, (2) they are easy to implement (and in particular, easier than more traditional forms of real-time support such as periodic tasks), (3) they provide a simple and effective means of precisely controlling the real-time performance of a process including uniform, predictable degradation in times of system overload, and (4) they provide a natural mean of policing processes so that process that use more of a resource than they request have no ill-effect on well-behaved processes. We present our algorithm and its analysis in the context of an idealized system in which a resource is assumed to be granted in arbitrarily small intervals of time and show that our algorithm guarantees that the difference between the service time that a process should receive in the idealized system and the service time it actually receives in the real system is bounded by the size q of a time quantum. This demonstrates that our algorithm is capable of guaranteeing real-time response times to processes. Moreover, we also show that these bound are the best obtainable in a proportion share system and hence that our algorithm provides optimal performance. Lastly, the algorithm provides support for dynamic operations, such as processes joining or leaving the competition, and for both fractional and non-uniform time quanta. As a proof of concept we have implemented a prototype of a CPU scheduler under FreeBSD operating systems. The experimental results shows that our implementation perform within the theoretical bounds and hence supports real-time execution in a general purpose operating system. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. K. Baruah, J. E. Gehrke and C. G. Plaxton, </author> <title> "Fast Scheduling of Periodic Tasks on Multiple Resources", </title> <booktitle> Proc. of the 9th International Parallel Processing Symposium, </booktitle> <month> April </month> <year> 1995, </year> <pages> pp. 280-288. </pages>
Reference-contexts: It is worth to mention that unlike other previous approximations [5], ours maintains the same tight bounds for the client lag. Besides the class of fair queuing algorithms, recently, a significant number of other proportional share algorithms have been developed <ref> [1, 9, 12, 15] </ref>. Although none of them guarantees constant lag bounds in a dynamic system, we note that the PD algorithm of Baruah, Gehrke, and Plaxton [1] achieves constant lag bounds in a static system (i.e., a system in which the number of clients does not change). <p> Besides the class of fair queuing algorithms, recently, a significant number of other proportional share algorithms have been developed [1, 9, 12, 15]. Although none of them guarantees constant lag bounds in a dynamic system, we note that the PD algorithm of Baruah, Gehrke, and Plaxton <ref> [1] </ref> achieves constant lag bounds in a static system (i.e., a system in which the number of clients does not change). The idea to apply fair queueing algorithms to processor scheduling was first suggested by Parekh in [11].
Reference: [2] <author> S. K. Baruah, J. E. Gehrke and C. G. Plaxton, </author> <title> "Fair On-Line Scheduling of a Dynamic Set of Tasks on a Single Resource", </title> <type> Technical Report UTCS-TR-96-03, </type> <institution> Department of Computer Science, University of Texas at Austin. </institution> <month> February </month> <year> 1996. </year>
Reference-contexts: The original problem was stated in terms of selecting a union chairman every year, such that the accumulated number of chairmen from each state (of the union) to be proportional to its weight. As shown in <ref> [2] </ref>, Tijdeman's results can be easily applied to solve the proportional share allocation problem. In the general setting, the resource is allocated in fixed time quanta, while the clients' shares may change at the beginning of every time quantum. In this way dynamic operation can be easily accommodated. <p> We note that two similar algorithms were independently developed (in parallel to our original work [13]) by Bennett and Zhang in the context of allocating bandwidth in communication networks [3], and by Baruah, Gehrke and Plaxton in the context of processor scheduling for fixed time quanta <ref> [2] </ref>. 3 In addition to introducing the concept of virtual eligible time (which was also independently introduced in [2] and [3]) our work makes several unique key contributions. <p> work [13]) by Bennett and Zhang in the context of allocating bandwidth in communication networks [3], and by Baruah, Gehrke and Plaxton in the context of processor scheduling for fixed time quanta <ref> [2] </ref>. 3 In addition to introducing the concept of virtual eligible time (which was also independently introduced in [2] and [3]) our work makes several unique key contributions. First, to our best knowledge, we are the first to analyze the general case when the size of the request is "decoupled" from the size of a time quantum.
Reference: [3] <author> J. C. R. Bennett and H. Zhang, </author> <title> "WF 2 Q : Worst-case Fair Queueing", </title> <address> INFOCOM'96, San-Francisco, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: We note that this translates into an O (1) bound for the positive lag. However, as shown in <ref> [3, 13, 17] </ref>, the bound for the negative lag can be as large as O (n), where n represents the number of active sessions 2 In their work PFQ is known as Packet-by-Packet Generalized Processor Sharing (PGPS for short). 5 (clients) in the system. <p> We note that two similar algorithms were independently developed (in parallel to our original work [13]) by Bennett and Zhang in the context of allocating bandwidth in communication networks <ref> [3] </ref>, and by Baruah, Gehrke and Plaxton in the context of processor scheduling for fixed time quanta [2]. 3 In addition to introducing the concept of virtual eligible time (which was also independently introduced in [2] and [3]) our work makes several unique key contributions. <p> by Bennett and Zhang in the context of allocating bandwidth in communication networks <ref> [3] </ref>, and by Baruah, Gehrke and Plaxton in the context of processor scheduling for fixed time quanta [2]. 3 In addition to introducing the concept of virtual eligible time (which was also independently introduced in [2] and [3]) our work makes several unique key contributions. First, to our best knowledge, we are the first to analyze the general case when the size of the request is "decoupled" from the size of a time quantum.
Reference: [4] <author> A. Demers, S. Keshav, and S. Shenkar, </author> <title> "Analysis and Simulation of a Fair Queueing Algorithm", </title> <journal> Journal of Inter-networking Research & Experience, </journal> <month> October </month> <year> 1990, </year> <pages> pp. 3-12. </pages>
Reference-contexts: Due to quantization, in a system in which the resource is allocated in discrete time quanta it is not possible for a client to always receive exactly the service time it is entitled to. The difference between 1 A similar model was used by Demers et al <ref> [4] </ref> in studying fair-queuing algorithms in communication networks. 4 the service time that a client should receive at a time t, and the service time it actually receives is called service time lag (or simply lag). <p> Recently, the proportional share allocation problem has received a great deal of attention in the context of various resources, such as communication bandwidth and processor time. Our algorithm is closely related to weighted fair queueing algorithms previously developed for bandwidth allocation in communication networks <ref> [4, 5, 10] </ref>, and general purpose proportional share algorithms, such stride scheduling [16, 17]. Demers, Keshav, and Shenker were the first to apply the notion of fairness to a fluid-flow system that models an idealized communication switch in which sessions are serviced in arbitrarily small increments [4]. <p> Demers, Keshav, and Shenker were the first to apply the notion of fairness to a fluid-flow system that models an idealized communication switch in which sessions are serviced in arbitrarily small increments <ref> [4] </ref>. Since in practice a packet transmission cannot be preempted, the authors proposed an algorithm, called Packet Fair Queueing (PFQ), in which the packets are serviced in the order in which they would finish in the corresponding fluid-flow system (i.e., in the increasing order of their virtual deadlines). <p> Similar to stride scheduling [16, 17], the EEVDF algorithm does not assume that a client will always use all the service time it has requested. This is an important feature that differentiates it from the weighted fair queueing algorithms used for allocating bandwidth in communication networks <ref> [4, 5, 10] </ref>, which assume that the length of a packet (and therefore the service time) is known when the packet 9 arrives.
Reference: [5] <author> S. J. Golestani, </author> <title> "A Self-Clocked Fair Queueing Scheme for Broadband Applications", </title> <booktitle> Proc. of IEEE INFOCOM'94, </booktitle> <month> April </month> <year> 1994, </year> <pages> pp. 636-646. </pages>
Reference-contexts: Recently, the proportional share allocation problem has received a great deal of attention in the context of various resources, such as communication bandwidth and processor time. Our algorithm is closely related to weighted fair queueing algorithms previously developed for bandwidth allocation in communication networks <ref> [4, 5, 10] </ref>, and general purpose proportional share algorithms, such stride scheduling [16, 17]. Demers, Keshav, and Shenker were the first to apply the notion of fairness to a fluid-flow system that models an idealized communication switch in which sessions are serviced in arbitrarily small increments [4]. <p> As a solution, Golestani has proposed a new algorithm, called Self-Clocked Fair Queueing (SCFQ), in which the virtual time is updated when the client joins/leaves the competition in the real system, and not in the idealized one <ref> [5] </ref>. Although this scheme can be more efficiently implemented, this does not come for free: the lag bounds increase to within a factor of two of the ones guaranteed by PFQ. <p> This simplifies the implementation and eliminates the need of keeping an event queue. It is worth to mention that unlike other previous approximations <ref> [5] </ref>, ours maintains the same tight bounds for the client lag. Besides the class of fair queuing algorithms, recently, a significant number of other proportional share algorithms have been developed [1, 9, 12, 15]. <p> Similar to stride scheduling [16, 17], the EEVDF algorithm does not assume that a client will always use all the service time it has requested. This is an important feature that differentiates it from the weighted fair queueing algorithms used for allocating bandwidth in communication networks <ref> [4, 5, 10] </ref>, which assume that the length of a packet (and therefore the service time) is known when the packet 9 arrives.
Reference: [6] <author> P. Goyal, X. Guo and H. M. Vin, </author> <title> "A Hierarchical CPU Scheduler for Multimedia Operating Systems", </title> <booktitle> to appear in Proc. of the 2nd OSDI Symp., </booktitle> <month> October </month> <year> 1996. </year>
Reference-contexts: Moreover, stride scheduling provides support for both uniform and non-uniform quanta. Goyal, Guo and Vin have proposed a new algorithm, called Start-time Fair Queueing (SFQ), for hierarchically partitioning of a CPU among various application classes <ref> [6] </ref>. While this algorithm supports both uniform and non-uniform quanta, the delay bound (and implicitly the lag) increases linearly with the number of clients. However, we note that when the number of clients is small, in terms of delay, this algorithm can be superior to classical fair queueing algorithms.
Reference: [7] <author> S. J. Le*er, M. K. McKusick, M. J. Karels and J. S. Quarterman. </author> <title> "The Design and Implementation of the 4.3BSD UNIX Operating System," </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: The scheduler time slice (quantum), and the duration of any client's request were set to 10 ms. Excepting the CPU scheduler, we did not alter the FreeBSD kernel. 11 Our scheduler coexists with the original FreeBSD scheduler <ref> [7] </ref>. All the processes that request proportional share or reservation services are assigned a reserved (user-level) priority, and are handled by our scheduler. All the other processes are scheduled by the regular FreeBSD scheduler.
Reference: [8] <author> C. L. Liu and J. W. Layland, </author> <title> "Scheduling Algorithms for Multiprogramming in a Hard-Real-Time Environment", </title> <journal> Journal of the ACM, </journal> <volume> Vol. 20, No. 1, </volume> <month> January </month> <year> 1973, </year> <pages> pp. 46-61. </pages>
Reference-contexts: In this way a client could trade between the allocation accuracy and scheduling overhead. To clarify the ideas we briefly point out the similarities and differences between our model and the well-known problem of scheduling periodic tasks in a real-time system <ref> [8] </ref>. A periodic task is characterized by a fixed interval of time between two consecutive events, called the period and denoted by T , and by the maximum service time r required to process an event.
Reference: [9] <author> U. Maheshwari, </author> <title> "Charged-based Proportional Scheduling", </title> <type> Technical Memorandum MIT/LCS/TM-529, </type> <institution> Laboratory for CS, MIT, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: It is worth to mention that unlike other previous approximations [5], ours maintains the same tight bounds for the client lag. Besides the class of fair queuing algorithms, recently, a significant number of other proportional share algorithms have been developed <ref> [1, 9, 12, 15] </ref>. Although none of them guarantees constant lag bounds in a dynamic system, we note that the PD algorithm of Baruah, Gehrke, and Plaxton [1] achieves constant lag bounds in a static system (i.e., a system in which the number of clients does not change).
Reference: [10] <author> A. K. Parekh and R. G. Gallager, </author> <title> "A Generalized Processor Sharing Approach To Flow Control in Integrated Services Networks-The Single Node Case", </title> <journal> ACM/IEEE Transactions on Netwrking, </journal> <volume> Vol. 1, No. 3, </volume> <year> 1992, </year> <pages> pp. 344-357. </pages>
Reference-contexts: Recently, the proportional share allocation problem has received a great deal of attention in the context of various resources, such as communication bandwidth and processor time. Our algorithm is closely related to weighted fair queueing algorithms previously developed for bandwidth allocation in communication networks <ref> [4, 5, 10] </ref>, and general purpose proportional share algorithms, such stride scheduling [16, 17]. Demers, Keshav, and Shenker were the first to apply the notion of fairness to a fluid-flow system that models an idealized communication switch in which sessions are serviced in arbitrarily small increments [4]. <p> By using the concept of virtual time, previously introduced by Zhang [18], Parekh and Gallager have analyzed the PFQ 2 algorithm when the input traffic stream conforms to the leaky-bucket constraints <ref> [10, 11] </ref>. In particular, they shown that no packet is serviced T max latter than it would have been serviced in the fluid-flow system, where T max represents the time to transmit a packet of maximum size. <p> First, to our best knowledge, we are the first to analyze the general case when the size of the request is "decoupled" from the size of a time quantum. Besides generalizing previous results (e.g., <ref> [10] </ref>), our analyze can be easily extended to preemptive systems, as well. For example, by taking time quanta to be arbitrarily small, we can derive lag bounds for a fully preemptive system. <p> In this way our model provides integrated support for both event driven applications, such as continuous media and interactive applications, and for conventional batch-applications. We formulate our scheduling algorithm in terms of the behavior of an ideal, fluid-flow system that executes clients in a virtual-time time domain <ref> [18, 10] </ref>. 6 Abstractly, the virtual fluid-flow system executes each client for w i real-time time units during each virtual-time time unit. <p> Similar to stride scheduling [16, 17], the EEVDF algorithm does not assume that a client will always use all the service time it has requested. This is an important feature that differentiates it from the weighted fair queueing algorithms used for allocating bandwidth in communication networks <ref> [4, 5, 10] </ref>, which assume that the length of a packet (and therefore the service time) is known when the packet 9 arrives. <p> In fact, this is the solution proposed by Parekh and Gallager <ref> [10] </ref> to implement their Generalized Processor Sharing algorithm. 12 lags, leave the competition. In (a) clients are allowed to leave only after their lags become zero; in (b) clients are allowed to leave immediately. <p> The following theorem gives the upper bound for the maximum delay of fulfilling a request in an S-system. We note that this result is similar to the one obtained by Parekh and Gallager <ref> [10] </ref> for their Generalized Processor Sharing algorithm, i.e., in a communication network a packet is guaranteed not to miss its deadline by more than the time required to send a packet of maximum length.
Reference: [11] <author> A. K. Parekh, </author> <title> "A Generalized Processor Sharing Approach To Flow Control in Integrated Services Networks", </title> <type> Ph.D Thesis, </type> <institution> Department of EE and CS, MIT, </institution> <year> 1992. </year>
Reference-contexts: By using the concept of virtual time, previously introduced by Zhang [18], Parekh and Gallager have analyzed the PFQ 2 algorithm when the input traffic stream conforms to the leaky-bucket constraints <ref> [10, 11] </ref>. In particular, they shown that no packet is serviced T max latter than it would have been serviced in the fluid-flow system, where T max represents the time to transmit a packet of maximum size. <p> The idea to apply fair queueing algorithms to processor scheduling was first suggested by Parekh in <ref> [11] </ref>.
Reference: [12] <author> I. Stoica, H. Abdel-Wahab, </author> <title> "A new approach to implement proportional share resource allocation", </title> <type> Technical Report TR-95-05, </type> <institution> CS Dpt., ODU, </institution> <month> April </month> <year> 1995, </year> <pages> pp. </pages> <note> 17 (also available at http://www.cs.odu.edu/~stoica/pubs.html) </note>
Reference-contexts: It is worth to mention that unlike other previous approximations [5], ours maintains the same tight bounds for the client lag. Besides the class of fair queuing algorithms, recently, a significant number of other proportional share algorithms have been developed <ref> [1, 9, 12, 15] </ref>. Although none of them guarantees constant lag bounds in a dynamic system, we note that the PD algorithm of Baruah, Gehrke, and Plaxton [1] achieves constant lag bounds in a static system (i.e., a system in which the number of clients does not change).
Reference: [13] <author> I. Stoica, H. Abdel-Wahab, </author> <title> "Earliest Eligible Virtual Deadline First: A Flexible and Accurate Mechanism for Proportional Share Resource Allocation", </title> <type> Technical Report TR-95-22, </type> <institution> CS Dpt., ODU, </institution> <month> November </month> <year> 1995, </year> <pages> pp. </pages> <note> 37 (also available at http://www.cs.odu.edu/~stoica/pubs.html) </note>
Reference-contexts: We note that this translates into an O (1) bound for the positive lag. However, as shown in <ref> [3, 13, 17] </ref>, the bound for the negative lag can be as large as O (n), where n represents the number of active sessions 2 In their work PFQ is known as Packet-by-Packet Generalized Processor Sharing (PGPS for short). 5 (clients) in the system. <p> In contrast to the above algorithms, by making use of both virtual eligible times and virtual deadlines, EEVDF achieves constant lag bounds, while providing full support for dynamic operations. We note that two similar algorithms were independently developed (in parallel to our original work <ref> [13] </ref>) by Bennett and Zhang in the context of allocating bandwidth in communication networks [3], and by Baruah, Gehrke and Plaxton in the context of processor scheduling for fixed time quanta [2]. 3 In addition to introducing the concept of virtual eligible time (which was also independently introduced in [2] and <p> In short, a gain for one client translates into a loss for the other active clients. Similarly, when a client with positive lag leaves, this translates into a gain for the remaining clients. Now, the question is how to distribute this loss/gain among the remaining clients. In <ref> [13] </ref> this question was answered by distributing it in proportion to the clients' weights. In the remaining of this section we show that the same answer is obtained by approaching the problem from a different angle. <p> In this way, we have reduced the first case to the second 9 Note that having this two operation, changing the client weight can be easily implemented as a leave followed by a re-join operation <ref> [13] </ref>. 10 However, note that in a system in which a client always uses its entire service time, then we can compute in advance, at the time when the last request is issued, the virtual-time when the client will leave the competition. <p> Mainly, this is because we need to implement an event queue which has to trade between the timer granularity and the overhead. As we have shown in <ref> [13] </ref> all the basic operation required to implement the EEVDF algorithm, i.e., inserting and deleting a request, and finding the eligible request with the earliest deadline can be implemented in O (log n), where n represents the number of active clients. <p> Corollary If no request of client k is larger than a time quantum, then at any time t its lag is bounded as follows: q &lt; lag k (t) &lt; q: Finally, we note that according to the following simple lemma (the proof can be found in <ref> [13] </ref>) the bounds given in the above corollary are optimal, i.e., they hold for any proportional share algorithm.
Reference: [14] <author> R. </author> <title> Tijdeman, "The Chairmain Assignment Problem", </title> <journal> Discrete Mathematics, </journal> <volume> vol. 32, </volume> <year> 1980, </year> <pages> pp. 323-330. </pages>
Reference-contexts: Together, these properties indicate that our algorithm will provide real-time response guarantees to clients and that with respect to the class of proportional share algorithms, these guarantees are the best possible. 3 Related Work Tijdeman was one of the first to formulate and analyze the proportional share allocation problem <ref> [14] </ref>. The original problem was stated in terms of selecting a union chairman every year, such that the accumulated number of chairmen from each state (of the union) to be proportional to its weight.
Reference: [15] <author> C. A. Waldspurger and W. E. Weihl. </author> <title> "Lottery Scheduling: Flexible Proportional-Share Resource Management," </title> <booktitle> Proc. of the First Symposium on Operating System Design and Implementation, </booktitle> <month> November </month> <year> 1994, </year> <pages> pp. 1-12. </pages>
Reference-contexts: It is worth to mention that unlike other previous approximations [5], ours maintains the same tight bounds for the client lag. Besides the class of fair queuing algorithms, recently, a significant number of other proportional share algorithms have been developed <ref> [1, 9, 12, 15] </ref>. Although none of them guarantees constant lag bounds in a dynamic system, we note that the PD algorithm of Baruah, Gehrke, and Plaxton [1] achieves constant lag bounds in a static system (i.e., a system in which the number of clients does not change).
Reference: [16] <author> C. A. Waldspurger and W. E. Weihl. </author> <title> "Stride Scheduling: Deterministic Proportional Share Resource Menagement," </title> <type> Technical Memorandum, </type> <institution> MIT/LCS/TM-528, Laboratory for CS, MIT, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: Our algorithm is closely related to weighted fair queueing algorithms previously developed for bandwidth allocation in communication networks [4, 5, 10], and general purpose proportional share algorithms, such stride scheduling <ref> [16, 17] </ref>. Demers, Keshav, and Shenker were the first to apply the notion of fairness to a fluid-flow system that models an idealized communication switch in which sessions are serviced in arbitrarily small increments [4]. <p> Finally, we note that all the dynamic operations, such as a client leaving or joining the competition, can be implemented in O (log n) time in both PFQ and SCFQ. Recently, Waldspurger and Weihl have developed a new proportional share allocation algorithm, called stride scheduling <ref> [16, 17] </ref>, which can be viewed as a cross-application of fair queueing to the domain of processor scheduling. Stride scheduling relies on the concept of global pass (which is similar to virtual time) to measure the work progress in the system. <p> The only previous known algorithms that 3 This can be viewed as a direct extension to the dynamic case of the Tijdeman's work. 6 address this problem are lottery and stride scheduling <ref> [16, 17] </ref>. However, the lag bounds guaranteed by stride scheduling are as large as O (n), where n represents the number of active clients (being a randomized algorithm, lottery does not guarantee any tight bounds). In comparison, EEVDF guarantees optimal lag bounds of one time quantum. <p> The idea to apply fair queueing algorithms to processor scheduling was first suggested by Parekh in [11]. Waldspurger and Weihl were the first to actually develop and implement such an algorithm (stride scheduling) for processor scheduling <ref> [16, 17] </ref>. 4 Finally, to our best knowledge we are the first to implement and to test with a proportional share scheduler which guarantees constant lag bounds. 4 The EEVDF Algorithm In order to obtain access to the resource, a client must issue a request in which it specifies the duration <p> Next, from Eq. (5) and (4) it follows that S i (t 1 ; t 2 ) = (V (t 2 ) V (t 1 ))w i : (6) 6 We note that Waldspurger and Weihl <ref> [16, 17] </ref> use a similar concept (denoted global pass) in their stride scheduling. 8 To better interpret the above equation consider a much simpler model in which the number of active clients is constant and the sum of their weights is one ( P i2A w i = 1), i.e., the <p> With this, the Earliest Eligible Virtual Deadline First (EEVDF) algorithm can be simply stated as follows: EEVDF Algorithm. A new quantum is allocated to the client which has the eligible request with the earliest virtual deadline. Similar to stride scheduling <ref> [16, 17] </ref>, the EEVDF algorithm does not assume that a client will always use all the service time it has requested.
Reference: [17] <author> C. A. Waldspurger. </author> <title> "Lottery and Stride Scheduling: Flexible Proportional-Share Resource Management," </title> <type> PhD Thesis, Technical Report, </type> <institution> MIT/LCS/TR-667, Laboratory for CS, MIT, </institution> <month> September </month> <year> 1995. </year>
Reference-contexts: Our algorithm is closely related to weighted fair queueing algorithms previously developed for bandwidth allocation in communication networks [4, 5, 10], and general purpose proportional share algorithms, such stride scheduling <ref> [16, 17] </ref>. Demers, Keshav, and Shenker were the first to apply the notion of fairness to a fluid-flow system that models an idealized communication switch in which sessions are serviced in arbitrarily small increments [4]. <p> We note that this translates into an O (1) bound for the positive lag. However, as shown in <ref> [3, 13, 17] </ref>, the bound for the negative lag can be as large as O (n), where n represents the number of active sessions 2 In their work PFQ is known as Packet-by-Packet Generalized Processor Sharing (PGPS for short). 5 (clients) in the system. <p> Finally, we note that all the dynamic operations, such as a client leaving or joining the competition, can be implemented in O (log n) time in both PFQ and SCFQ. Recently, Waldspurger and Weihl have developed a new proportional share allocation algorithm, called stride scheduling <ref> [16, 17] </ref>, which can be viewed as a cross-application of fair queueing to the domain of processor scheduling. Stride scheduling relies on the concept of global pass (which is similar to virtual time) to measure the work progress in the system. <p> The only previous known algorithms that 3 This can be viewed as a direct extension to the dynamic case of the Tijdeman's work. 6 address this problem are lottery and stride scheduling <ref> [16, 17] </ref>. However, the lag bounds guaranteed by stride scheduling are as large as O (n), where n represents the number of active clients (being a randomized algorithm, lottery does not guarantee any tight bounds). In comparison, EEVDF guarantees optimal lag bounds of one time quantum. <p> The idea to apply fair queueing algorithms to processor scheduling was first suggested by Parekh in [11]. Waldspurger and Weihl were the first to actually develop and implement such an algorithm (stride scheduling) for processor scheduling <ref> [16, 17] </ref>. 4 Finally, to our best knowledge we are the first to implement and to test with a proportional share scheduler which guarantees constant lag bounds. 4 The EEVDF Algorithm In order to obtain access to the resource, a client must issue a request in which it specifies the duration <p> Next, from Eq. (5) and (4) it follows that S i (t 1 ; t 2 ) = (V (t 2 ) V (t 1 ))w i : (6) 6 We note that Waldspurger and Weihl <ref> [16, 17] </ref> use a similar concept (denoted global pass) in their stride scheduling. 8 To better interpret the above equation consider a much simpler model in which the number of active clients is constant and the sum of their weights is one ( P i2A w i = 1), i.e., the <p> With this, the Earliest Eligible Virtual Deadline First (EEVDF) algorithm can be simply stated as follows: EEVDF Algorithm. A new quantum is allocated to the client which has the eligible request with the earliest virtual deadline. Similar to stride scheduling <ref> [16, 17] </ref>, the EEVDF algorithm does not assume that a client will always use all the service time it has requested.
Reference: [18] <author> L. Zhang, "VirtualClock: </author> <title> A New Traffic Control Algorithm for Packet-Switched Networks", </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 9, no. 2, </volume> <month> May </month> <year> 1991, </year> <pages> pp. 101-124. 20 </pages>
Reference-contexts: By using the concept of virtual time, previously introduced by Zhang <ref> [18] </ref>, Parekh and Gallager have analyzed the PFQ 2 algorithm when the input traffic stream conforms to the leaky-bucket constraints [10, 11]. <p> In this way our model provides integrated support for both event driven applications, such as continuous media and interactive applications, and for conventional batch-applications. We formulate our scheduling algorithm in terms of the behavior of an ideal, fluid-flow system that executes clients in a virtual-time time domain <ref> [18, 10] </ref>. 6 Abstractly, the virtual fluid-flow system executes each client for w i real-time time units during each virtual-time time unit.
References-found: 18

