URL: http://www.cs.uoregon.edu/~fickas/icse-workshop/stuurman.ps
Refering-URL: http://www.cs.uoregon.edu/~fickas/icse-workshop/
Root-URL: http://www.cs.uoregon.edu
Title: Evolving Software Architectures: A Position Paper  
Author: Sylvia Stuurman 
Date: March 5, 1997  
Affiliation: Delft University of Technology  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> R. Allen and D. Garlan. </author> <title> Beyond definition and use: Architectural interconnection. </title> <booktitle> In Proceedings of the ACM Interface Definition Language Workshop, </booktitle> <month> January </month> <year> 1994. </year>
Reference: [2] <author> L.F. Bic, M. Fukuda, </author> <title> and M.B. Dillencourt. Distributed computing using autonomous objects. </title> <journal> IEEE Computer, </journal> <volume> 29(8) </volume> <pages> 55-61, </pages> <month> August </month> <year> 1996. </year>
Reference: [3] <author> M. </author> <title> Boasson. </title> <journal> Control systems software. IEEE Transactions on Automatic Control, </journal> <volume> 38(7) </volume> <pages> 1094-1107, </pages> <month> July </month> <year> 1993. </year>
Reference: [4] <author> F. Buschmann, R. Meunier, H. Rohnert, P. Sommerlad, and M. Stal. </author> <title> A System of Patterns, Pattern-oriented Software Architecture. </title> <publisher> John Wiley and Sons, </publisher> <year> 1996. </year>
Reference: [5] <author> D. Garlan, R. Allen, and J. Ockerbloom. </author> <title> Exploiting style in architectural design environments. </title> <booktitle> In Proceedings of the Second ACM SIGSOFT Symposium on Foundations of Software Engineering, </booktitle> <month> December </month> <year> 1994. </year>
Reference: [6] <author> D. Garlan and M. Shaw. </author> <title> Charasteristics of higher-level languages for software architecture. </title> <type> Technical Report CMU-CS-94-210, </type> <institution> School of Computer Science, Carnegie Mellon University Pittsburgh, </institution> <year> 1994. </year>
Reference: [7] <author> D.C. Luckham and J. Vera. </author> <title> An event-based architecture definition language. </title> <journal> IEEE Transansactions on Software Engineering, </journal> <volume> 21(9) </volume> <pages> 717-734, </pages> <month> September </month> <year> 1995. </year>
Reference: [8] <author> J. Magee and J. Kramer. </author> <title> Dynamic structure in software architectures. </title> <booktitle> In Fourth SIGSOFT Symposium on the Foundation of Software Engineering, </booktitle> <year> 1996. </year>
Reference: [9] <author> N. Medvidovic, R.N. Taylor, and E.J. Whitehead. </author> <title> Formal modeling of software architectures at multiple levels of abstraction. </title> <booktitle> In Proceedings og the California Software Symposium, </booktitle> <pages> pages 28-40, </pages> <year> 1996. </year> <month> 4 </month>
Reference: [10] <author> J.A. Stankovic. </author> <title> Real-time and embedded systems. Group Report of the Real-Time Wor--king Group of the IEEE Technical Committee on Real-Time Systems, </title> <note> at http://www-ccs.cs.umass.edu/sdcr/rt.ps, 1996. </note>
Reference-contexts: In several systems, changes in software as an answer to changes of the requirements should be applicable during execution. According to Stankovic in <ref> [10] </ref>, on-line change capabilities will especially be needed in the field of real-time and embedded systems. The recently emerged field of software architecture addresses the design of the overall system structure. In our opinion, design for change should start at this level.
Reference: [11] <author> B. Witt, F.T. Baker, </author> <title> and E.W. Merritt. Software Architecture and Design: Principles, Models and Methods. </title> <publisher> Van Nostrand Reinhold, </publisher> <address> New York, </address> <year> 1994. </year> <month> 5 </month>
Reference-contexts: In our opinion, design for change should start at this level. Software architectures are typically described as a composition of high-level connected components ([5]). The term has often been used to indicate structures representing the development view of a system, i.e. the high-level structure of the code (in <ref> [11] </ref> for instance, the term software architecture is always used with this meaning). In recent years, software architectures more and more describe the high-level design of the software system as it is seen during execution, with connections representing "interact" relationships as opposed to "implements" relationships ([1]).
References-found: 11

