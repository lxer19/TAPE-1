URL: ftp://softlib.rice.edu/pub/CRPC-TRs/reports/CRPC-TR94491.ps.gz
Refering-URL: http://www.crpc.rice.edu/CRPC/softlib/TRs_online.html
Root-URL: 
Title: The ADIFOR 2.0 System for the Automatic Differentiation of Fortran 77 Programs  
Author: Christian Bischof Alan Carle Peyvand Khademi Andrew Mauer 
Keyword: Key words. Automatic differentiation, ADIFOR, derivative, gradient, Jacobian, chain rule, source transformation and optimization, ADIntrinsics, ParaScope, SparsLinC.  
Address: Preprint ANL-MCS-P481-1194  
Affiliation: Argonne  
Pubnum: CRPC Technical Report CRPC-TR94491  
Abstract: Automatic Differentiation is a technique for augmenting computer programs with statements for the computation of derivatives based on the chain rule of differential calculus. The ADIFOR 2.0 system provides automatic differentiation of Fortran 77 programs for first-order derivatives. The ADIFOR 2.0 system consists of three main components: The ADIFOR 2.0 preprocessor, the ADIntrinsics Fortran 77 exception-handling system, and the SparsLinC library. The combination of these tools provides the ability to deal with arbitrary Fortran 77 syntax, to handle codes containing single- and double-precision real-or complex-valued data, to fully support and easily customize the translation of Fortran 77 intrinsics, and to transparently exploit sparsity in derivative computations. ADIFOR 2.0 has been successfully applied to a 60,000-line code, which we believe to be a new record in automatic differentiation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Proceedings of the 5th AIAA/NASA/USAF/ISSMO symposium on multidisciplinary analysis and optimization, Panama City, Florida, American Association of Aeronautics and Aerospace Engineers, </institution> <year> 1994. </year>
Reference-contexts: A collection of articles related to this subject can be found, for example, in <ref> [1, 33] </ref>. For purposes of illustration, assume that we have a code for the computation of a function f and f : x 2 R n 7! y 2 R m , and we wish to compute the derivatives of y with respect to x.
Reference: [2] <author> Vikram Adve, Alan Carle, Elana Granston, Seema Hiranandani, Ken Kennedy, Charles Koelbel, Ulrich Kremer, John Mellor-Crummey, Scott Warren, and Chau-Wen Tseng. </author> <title> Requirements for data-parallel programming environments. </title> <journal> IEEE Transactions on Parallel & Distributed Technology, </journal> <volume> 2(3) </volume> <pages> 48-58, </pages> <year> 1994. </year>
Reference-contexts: Moreover, one is able to "logically retarget" techniques developed in the compiler community to reason about Fortran programs and generate efficient derivative code. ADIFOR employs compiler infrastructure provided in the ParaScope programming environment [26], which was developed primarily for the semi-automatic parallelization of Fortran programs, and the D system <ref> [2] </ref>, a collection of tools for programming in the Fortran D data 12 parallel language.
Reference: [3] <author> B. M. Averick, R. G. Carter, J. J. More, and G. L. Xue. </author> <title> The MINPACK-2 test problem collection. </title> <type> Preprint ANL-MCS-P153-0692, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, </institution> <year> 1992. </year>
Reference-contexts: Hence, the gradients rf i are sparse, even though the final gradient rf is dense. Partially separable functions play a key role in large-scale optimization (for example, all minimization examples in <ref> [3] </ref> belong to that class), and, in particular, any function with a sparse Hessian is a partially separable one [47]. If the sparsity pattern of J is known, coloring techniques together with the seed matrix mechanism can be employed advantageously to compute a compressed Jacobian matrix efficiently [4]. <p> In addition to ease of use, SparsLinC can result in significant performance improvement. For example, we computed gradients for problems from the MINPACK-2 optimization test set <ref> [3] </ref> where the function was partially separable but was not specified in partially separable form (13). The four codes were * DGL2: 2-D Ginzburg-Landau model for homogeneous superconductors, * DMSA: minimal surface area problem, * DSSC: steady-state combustion model, and * DEPT: elastic-plastic torsion problem.
Reference: [4] <author> Brett Averick, Jorge More, Christian Bischof, Alan Carle, and Andreas Griewank. </author> <title> Computing large sparse Jacobian matrices using automatic differentiation. </title> <journal> SIAM Journal on Scientific Computing, </journal> <volume> 15(2) </volume> <pages> 285-294, </pages> <year> 1994. </year>
Reference-contexts: aeronautical multidisciplinary design optimization [5, 68], aeronautical computational fluid dynamics [9, 13, 27, 41, 56, 57], weather modeling [19, 25, 61, 62], groundwater contaminant transport [18, 69], aquifer modeling [30, 50], structural engineering [29], statistics [23], mechanical system design [49], power networks [52], reactor modeling [60], and large-scale numerical optimization <ref> [4, 14, 64] </ref>. The largest of these codes was 25,000 lines long and described 3-D turbulent flow over an airplane wing. <p> The seed matrix mechanism allows for flexible use of ADIFOR-generated code. For example, it can be employed to compute compressed versions of large sparse Jacobians <ref> [4] </ref>, to chain derivatives generated by programs running on different platforms [9, 27], or to decrease turnaround time for derivative computations through a parallel stripmining approach [13]. 3 The ADIFOR 2.0 System The ADIFOR 2.0 system has three major components: ADIFOR 2.0 preprocessor: The ADIFOR 2.0 preprocessor parses the code, performs <p> If the sparsity pattern of J is known, coloring techniques together with the seed matrix mechanism can be employed advantageously to compute a compressed Jacobian matrix efficiently <ref> [4] </ref>.
Reference: [5] <author> J.-F. Barthelemy and L. Hall. </author> <title> Automatic differentiation as a tool in engineering design. </title> <booktitle> In Proceedings of the 4th AIAA/USAF/NASA/OAI Symp. on Multidisciplinary Analysis and Optimization, </booktitle> <pages> AIAA 92-4743, pages 424-432. </pages> <institution> American Institute of Aeronautics and Astronautics, </institution> <year> 1992. </year>
Reference-contexts: Two major revisions of the system were subsequently completed; the June 1993 version is called ADIFOR 1.0. ADIFOR 1.0 was successfully employed in very different areas of science of engineering: aeronautical multidisciplinary design optimization <ref> [5, 68] </ref>, aeronautical computational fluid dynamics [9, 13, 27, 41, 56, 57], weather modeling [19, 25, 61, 62], groundwater contaminant transport [18, 69], aquifer modeling [30, 50], structural engineering [29], statistics [23], mechanical system design [49], power networks [52], reactor modeling [60], and large-scale numerical optimization [4, 14, 64].
Reference: [6] <author> Christian Bischof, Alan Carle, George Corliss, Andreas Griewank, and Paul Hovland. ADIFOR: </author> <title> Generating derivative codes from Fortran programs. </title> <journal> Scientific Programming, </journal> <volume> 1(1) </volume> <pages> 11-29, </pages> <year> 1992. </year>
Reference-contexts: The ADIFOR project began in the summer of 1991. A prototype version of ADIFOR was operational and in use in late 1991 and is described in <ref> [6] </ref>. Two major revisions of the system were subsequently completed; the June 1993 version is called ADIFOR 1.0.
Reference: [7] <author> Christian Bischof, Alan Carle, and Peyvand Khademi. </author> <title> Fortran 77 interface specification to the SparsLinC library. </title> <type> Technical Report ANL/MCS-TM-196, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, </institution> <year> 1994. </year>
Reference-contexts: the AD FLAVOR = sparse option, ADIFOR allocates an integer, instead of a vector, for each derivative object, and generates calls to the SparsLinC library to perform the vector linear combinations, for example, call sspg2q (g y (1),y1bar,g x (i),xibar,g y (1)) The Fortran interface of SparsLinC is described in <ref> [7] </ref>. The routines needed for initialization or extraction of data, as well as examples of the use of SparsLinC in the context of ADIFOR 2.0, are provided in [8]. In addition to ease of use, SparsLinC can result in significant performance improvement.
Reference: [8] <author> Christian Bischof, Alan Carle, Peyvand Khademi, Andrew Mauer, and Paul Hovland. </author> <title> ADIFOR 2.0 user's guide. </title> <type> Technical Report ANL/MCS-TM-192, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, </institution> <year> 1994. </year> <month> 27 </month>
Reference-contexts: As an example, if we are interested only in computing one directional derivative, then by simply setting some of ADIFOR's variables (details are described in <ref> [8] </ref>), the ADIFOR 2.0 preprocessor generates the simpler code shown in 3.2 The ADIntrinsics System Automatic differentiation is based on the application of the chain rule. <p> To illustrate the workings of the ADIntrinsics system, we demonstrate the expansion of the template call AD INTRINSIC FIRST MAX S. A more detailed description can be found in <ref> [8] </ref>. The translation of an AD INTRINSIC call into Fortran 77 is governed by a template file. The template file provided as a default for max is shown in Figure 12. <p> The routines needed for initialization or extraction of data, as well as examples of the use of SparsLinC in the context of ADIFOR 2.0, are provided in <ref> [8] </ref>. In addition to ease of use, SparsLinC can result in significant performance improvement. For example, we computed gradients for problems from the MINPACK-2 optimization test set [3] where the function was partially separable but was not specified in partially separable form (13).
Reference: [9] <author> Christian Bischof, George Corliss, Larry Green, Andreas Griewank, Kara Haigler, and Perry Newman. </author> <title> Automatic differentiation of advanced CFD codes for multidisciplinary design. </title> <journal> Journal on Computing Systems in Engineering, </journal> <volume> 3(6) </volume> <pages> 625-638, </pages> <year> 1992. </year>
Reference-contexts: Two major revisions of the system were subsequently completed; the June 1993 version is called ADIFOR 1.0. ADIFOR 1.0 was successfully employed in very different areas of science of engineering: aeronautical multidisciplinary design optimization [5, 68], aeronautical computational fluid dynamics <ref> [9, 13, 27, 41, 56, 57] </ref>, weather modeling [19, 25, 61, 62], groundwater contaminant transport [18, 69], aquifer modeling [30, 50], structural engineering [29], statistics [23], mechanical system design [49], power networks [52], reactor modeling [60], and large-scale numerical optimization [4, 14, 64]. <p> The seed matrix mechanism allows for flexible use of ADIFOR-generated code. For example, it can be employed to compute compressed versions of large sparse Jacobians [4], to chain derivatives generated by programs running on different platforms <ref> [9, 27] </ref>, or to decrease turnaround time for derivative computations through a parallel stripmining approach [13]. 3 The ADIFOR 2.0 System The ADIFOR 2.0 system has three major components: ADIFOR 2.0 preprocessor: The ADIFOR 2.0 preprocessor parses the code, performs certain code normalizations, determines which variables have to be augmented with
Reference: [10] <author> Christian Bischof, George Corliss, and Andreas Griewank. </author> <title> ADIFOR exception handling. </title> <type> Technical Report ANL/MCS-TM-159, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, </institution> <year> 1991. </year>
Reference-contexts: At the point of nondifferentiability, both partials are set to 0.5, and no warning is generated. This "tie value" constitutes a subgradient. The rationale for choosing default values for the different intrinsics is provided in <ref> [10] </ref> and [17].
Reference: [11] <author> Christian Bischof, George Corliss, and Andreas Griewank. </author> <title> Hybrid evaluation of second derivatives in ADIFOR. </title> <type> Technical Report ANL/MCS-TM-166, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, </institution> <year> 1992. </year>
Reference-contexts: While automatic differentiation can easily be extended to arbitrary-order derivatives (see, for example, the ADOL-C [45] system), it is not clear which approach, or combination of approaches, results in the most efficient code. Some of these issues are discussed in <ref> [11] </ref> and [12]. We are also working on decreasing the complexity of computing first-order derivatives. While ADIFOR-generated code usually beats finite differences, it is usually not yet a match for a derivative code carefully derived by hand, in particular with respect to adjoint codes.
Reference: [12] <author> Christian Bischof, George Corliss, and Andreas Griewank. </author> <title> Computing second- and higher-order derivatives through univariate Taylor series. </title> <journal> Optimization Methods and Software, </journal> <volume> 2 </volume> <pages> 211-232, </pages> <year> 1993. </year>
Reference-contexts: rx (i) = d (i), we compute the directional derivative d y fl d = lim y (x + h fl d) y (x) : (7) Forward mode code is easy to generate, logically preserves parallelizable or vectorizable structures within the original code, and is readily generalized to higher-order derivatives <ref> [12] </ref> x . <p> While automatic differentiation can easily be extended to arbitrary-order derivatives (see, for example, the ADOL-C [45] system), it is not clear which approach, or combination of approaches, results in the most efficient code. Some of these issues are discussed in [11] and <ref> [12] </ref>. We are also working on decreasing the complexity of computing first-order derivatives. While ADIFOR-generated code usually beats finite differences, it is usually not yet a match for a derivative code carefully derived by hand, in particular with respect to adjoint codes.
Reference: [13] <author> Christian Bischof, Larry Green, Kitty Haigler, and Tim Knauff. </author> <title> Parallel calculation of sensitivity derivatives for aircraft design using automatic differentiation. </title> <booktitle> In Proceedings of the 5th AIAA/NASA/USAF/ISSMO Symposium on Multidisciplinary Analysis and Optimization, </booktitle> <pages> AIAA 94-4261, pages 73-84. </pages> <institution> American Institute of Aeronautics and Astronautics, </institution> <year> 1994. </year>
Reference-contexts: Two major revisions of the system were subsequently completed; the June 1993 version is called ADIFOR 1.0. ADIFOR 1.0 was successfully employed in very different areas of science of engineering: aeronautical multidisciplinary design optimization [5, 68], aeronautical computational fluid dynamics <ref> [9, 13, 27, 41, 56, 57] </ref>, weather modeling [19, 25, 61, 62], groundwater contaminant transport [18, 69], aquifer modeling [30, 50], structural engineering [29], statistics [23], mechanical system design [49], power networks [52], reactor modeling [60], and large-scale numerical optimization [4, 14, 64]. <p> For example, it can be employed to compute compressed versions of large sparse Jacobians [4], to chain derivatives generated by programs running on different platforms [9, 27], or to decrease turnaround time for derivative computations through a parallel stripmining approach <ref> [13] </ref>. 3 The ADIFOR 2.0 System The ADIFOR 2.0 system has three major components: ADIFOR 2.0 preprocessor: The ADIFOR 2.0 preprocessor parses the code, performs certain code normalizations, determines which variables have to be augmented with derivative objects, and generates derivative code with templates at call sites of Fortran 77 intrinsics
Reference: [14] <author> Christian Bischof and Andreas Griewank. </author> <title> Computational differentiation and multidisciplinary design. </title> <editor> In H. Engl and J. McLaughlin, editors, </editor> <booktitle> Inverse Problems and Optimal Design in Industry, </booktitle> <pages> pages 187-211, </pages> <address> Stuttgart, 1994. </address> <publisher> Teubner Verlag. </publisher>
Reference-contexts: aeronautical multidisciplinary design optimization [5, 68], aeronautical computational fluid dynamics [9, 13, 27, 41, 56, 57], weather modeling [19, 25, 61, 62], groundwater contaminant transport [18, 69], aquifer modeling [30, 50], structural engineering [29], statistics [23], mechanical system design [49], power networks [52], reactor modeling [60], and large-scale numerical optimization <ref> [4, 14, 64] </ref>. The largest of these codes was 25,000 lines long and described 3-D turbulent flow over an airplane wing.
Reference: [15] <author> Christian Bischof and Paul Hovland. </author> <title> Using ADIFOR to compute dense and sparse Jacobians. </title> <type> Technical Report ANL/MCS-TM-158, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, </institution> <year> 1991. </year>
Reference-contexts: We also see that, from a user's perspective, the ADIFOR-generated code provides the directional derivative computation possibilities associated with the forward mode of automatic differentiation <ref> [15] </ref>. Instead of simply producing code to compute the Jacobian J , ADIFOR produces code to compute J fl S, where the "seed matrix" S is initialized by the user.
Reference: [16] <author> Christian Bischof and Andrew Mauer. </author> <title> ADIC a tool for the automatic differentiation of C programs. </title> <note> In Preparation. </note>
Reference-contexts: Black-box tools in this sense are GRESS [51], PADRE-2 [58] and Odyssee [65, 66] for Fortran programs and ADOL-C [45] and ADIC <ref> [16] </ref> for C programs. AMC [37], on the other hand, is a tool that supports, in an interactive fashion, the generation of reverse mode code. GRESS, PADRE-2, and ADOL-C implement both the forward and reverse mode.
Reference: [17] <author> Christian Bischof, Gordon Pusch, and Alan Carle. </author> <title> On automatic differentiation of codes with complex arithmetic with respect ot real variables. </title> <type> Technical Report ANL/MCS-TM-188, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, </institution> <year> 1994. </year>
Reference-contexts: At the point of nondifferentiability, both partials are set to 0.5, and no warning is generated. This "tie value" constitutes a subgradient. The rationale for choosing default values for the different intrinsics is provided in [10] and <ref> [17] </ref>.
Reference: [18] <author> Christian Bischof, Greg Whiffen, Christine Shoemaker, Alan Carle, and Aaron Ross. </author> <title> Application of automatic differentiation to groundwater transport models. </title> <editor> In Alexander Peters et al., editor, </editor> <booktitle> Computational Methods in Water Resources X, </booktitle> <pages> pages 173-182, </pages> <address> Dordrecht, 1994. </address> <publisher> Kluwer Academic Publishers. </publisher>
Reference-contexts: ADIFOR 1.0 was successfully employed in very different areas of science of engineering: aeronautical multidisciplinary design optimization [5, 68], aeronautical computational fluid dynamics [9, 13, 27, 41, 56, 57], weather modeling [19, 25, 61, 62], groundwater contaminant transport <ref> [18, 69] </ref>, aquifer modeling [30, 50], structural engineering [29], statistics [23], mechanical system design [49], power networks [52], reactor modeling [60], and large-scale numerical optimization [4, 14, 64]. The largest of these codes was 25,000 lines long and described 3-D turbulent flow over an airplane wing.
Reference: [19] <author> Christian H. Bischof. </author> <title> Automatic differentiation, tangent linear models and pseudo-adjoints. </title> <type> Preprint MCS-P472-1094, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, </institution> <year> 1994. </year>
Reference-contexts: Two major revisions of the system were subsequently completed; the June 1993 version is called ADIFOR 1.0. ADIFOR 1.0 was successfully employed in very different areas of science of engineering: aeronautical multidisciplinary design optimization [5, 68], aeronautical computational fluid dynamics [9, 13, 27, 41, 56, 57], weather modeling <ref> [19, 25, 61, 62] </ref>, groundwater contaminant transport [18, 69], aquifer modeling [30, 50], structural engineering [29], statistics [23], mechanical system design [49], power networks [52], reactor modeling [60], and large-scale numerical optimization [4, 14, 64]. <p> As the small example in Figures 4 and 5 suggests, adjoint mode generation requires rather radical code restructuring and advanced analysis capabilities to avoid tracing of unneeded quantities. We are also investigating higher-level hybrid-mode approaches such as "pseudo-adjoints" <ref> [19] </ref> and the exploitation of parallel derivative codes from serial simulation codes by exploiting chain rule associativity. To understand the latter idea, consider the situation shown in Figure 14: G cannot start before F has been computed, and H has to wait for the completion of G.
Reference: [20] <author> Christian H. Bischof and Moe El-Khadiri. </author> <title> Extending compile-time reverse mode and exploiting partial separability in ADIFOR. </title> <type> Technical Report ANL/MCS-TM-163, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, </institution> <year> 1992. </year>
Reference-contexts: If the sparsity pattern of J is known, coloring techniques together with the seed matrix mechanism can be employed advantageously to compute a compressed Jacobian matrix efficiently [4]. The computation of the gradient of a partially separable function can be reduced to the problem of computing a sparse Jacobian <ref> [20] </ref> by realizing that the gradient of f can easily be obtained by summing the rows of the sparse Jacobian d G , where G (x) = B f 1 (x) f np (x) C The compressed Jacobian approach works well for sparse Jacobians under the following assumptions: * The sparsity
Reference: [21] <author> Ali Bouaricha and Jorge More. </author> <title> Environment for large-scale optimization. </title> <type> Preprint MCS-P488-0195, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, </institution> <year> 1995. </year> <month> 28 </month>
Reference-contexts: position to develop, for example, a novel kind of large-scale optimization environment for nonlinear equations, where the user need supply code only for "the function," and automatic differentiation provides both the derivative values and the location of the nonzeros of the Jacobian for a sparse solver, without any user intervention <ref> [21] </ref>. 24 4 Conclusions and Future Work The use of ADIFOR in various application domains has demonstrated that automatic differentation * is applicable to arbitrary codes, * provides reliable derivatives, and * can result in considerable speedups with respect to divided-difference approximations.
Reference: [22] <author> Kathy E. Brenan, Stephen L. Campbell, and Linda R. Petzold. </author> <title> Numerical Solution of Initial-Value Problems in Differential-Algebraic Equations. </title> <publisher> North-Holland, </publisher> <address> New York, </address> <year> 1989. </year>
Reference-contexts: Main Street, Houston, TX 77251-1892, carle@cs.rice.edu. 1 in numerical computing. Examples are methods for minimization or the solution of nonlinear systems of equations [31, 59], or the numerical solution of stiff ordinary differential equations [24], partial differential equations [70], and differential-algebraic equations <ref> [22] </ref>. During the past decade, large computer models have become common, as a consequence of the tremendous expansion of computational capabilities. For such models, the computation of derivatives becomes even more important, as it may be the most compute-intensive part of the overall computation. We mention three examples.
Reference: [23] <author> Barry W. Brown, F. Martin Spears, Lawrence B. Levy, James Lovato, and Kathy Russell. </author> <title> Algorithm LLDRLF: Log-likelihood and some derivatives for Log-F models. </title> <type> Technical report, </type> <institution> Dept. of Biomathe-matics, The University of Texas M.D. Anderson Cancer Center, Houston, </institution> <year> 1994. </year>
Reference-contexts: ADIFOR 1.0 was successfully employed in very different areas of science of engineering: aeronautical multidisciplinary design optimization [5, 68], aeronautical computational fluid dynamics [9, 13, 27, 41, 56, 57], weather modeling [19, 25, 61, 62], groundwater contaminant transport [18, 69], aquifer modeling [30, 50], structural engineering [29], statistics <ref> [23] </ref>, mechanical system design [49], power networks [52], reactor modeling [60], and large-scale numerical optimization [4, 14, 64]. The largest of these codes was 25,000 lines long and described 3-D turbulent flow over an airplane wing.
Reference: [24] <author> John C. Butcher. </author> <title> The Numerical Analysis of Ordinary Differential Equations (Runge-Kutta and General Linear Methods). </title> <publisher> John Wiley and Sons, </publisher> <address> New York, </address> <year> 1987. </year>
Reference-contexts: Main Street, Houston, TX 77251-1892, carle@cs.rice.edu. 1 in numerical computing. Examples are methods for minimization or the solution of nonlinear systems of equations [31, 59], or the numerical solution of stiff ordinary differential equations <ref> [24] </ref>, partial differential equations [70], and differential-algebraic equations [22]. During the past decade, large computer models have become common, as a consequence of the tremendous expansion of computational capabilities.
Reference: [25] <author> Daewon W. Byun, Robert Dennis, Dongming Hwang, Jr. Carlie Coats, and M. Talat Odman. </author> <title> Computational modelling issues in next generation air quality models. </title> <booktitle> In Proceedings of IMACS'94, </booktitle> <address> Atlanta, Georgia, </address> <year> 1994. </year>
Reference-contexts: Two major revisions of the system were subsequently completed; the June 1993 version is called ADIFOR 1.0. ADIFOR 1.0 was successfully employed in very different areas of science of engineering: aeronautical multidisciplinary design optimization [5, 68], aeronautical computational fluid dynamics [9, 13, 27, 41, 56, 57], weather modeling <ref> [19, 25, 61, 62] </ref>, groundwater contaminant transport [18, 69], aquifer modeling [30, 50], structural engineering [29], statistics [23], mechanical system design [49], power networks [52], reactor modeling [60], and large-scale numerical optimization [4, 14, 64].
Reference: [26] <author> D. Callahan, K. Cooper, R. T. Hood, K. Kennedy, and L. M. Torczon. </author> <title> ParaScope: A parallel programming environment. </title> <journal> International Journal of Supercomputer Applications, </journal> <volume> 2(4) </volume> <pages> 84-99, </pages> <month> December </month> <year> 1988. </year>
Reference-contexts: Moreover, one is able to "logically retarget" techniques developed in the compiler community to reason about Fortran programs and generate efficient derivative code. ADIFOR employs compiler infrastructure provided in the ParaScope programming environment <ref> [26] </ref>, which was developed primarily for the semi-automatic parallelization of Fortran programs, and the D system [2], a collection of tools for programming in the Fortran D data 12 parallel language.
Reference: [27] <author> Alan Carle, Lawrence Green, Christian Bischof, and Perry Newman. </author> <title> Applications of automatic differentiation in CFD. </title> <booktitle> In Proceedings of the 25th AIAA Fluid Dynamics Conference, </booktitle> <institution> AIAA Paper 94-2197. American Institute of Aeronautics and Astronautics, </institution> <year> 1994. </year>
Reference-contexts: Two major revisions of the system were subsequently completed; the June 1993 version is called ADIFOR 1.0. ADIFOR 1.0 was successfully employed in very different areas of science of engineering: aeronautical multidisciplinary design optimization [5, 68], aeronautical computational fluid dynamics <ref> [9, 13, 27, 41, 56, 57] </ref>, weather modeling [19, 25, 61, 62], groundwater contaminant transport [18, 69], aquifer modeling [30, 50], structural engineering [29], statistics [23], mechanical system design [49], power networks [52], reactor modeling [60], and large-scale numerical optimization [4, 14, 64]. <p> The seed matrix mechanism allows for flexible use of ADIFOR-generated code. For example, it can be employed to compute compressed versions of large sparse Jacobians [4], to chain derivatives generated by programs running on different platforms <ref> [9, 27] </ref>, or to decrease turnaround time for derivative computations through a parallel stripmining approach [13]. 3 The ADIFOR 2.0 System The ADIFOR 2.0 system has three major components: ADIFOR 2.0 preprocessor: The ADIFOR 2.0 preprocessor parses the code, performs certain code normalizations, determines which variables have to be augmented with
Reference: [28] <author> Bruce W. Char. </author> <title> Computer algebra as a toolbox for program generation and manipulation. </title> <editor> In Andreas Griewank and George F. Corliss, editors, </editor> <title> Automatic Differentiation of Algorithms: Theory, </title> <booktitle> Implementation, and Application, </booktitle> <pages> pages 53-60. </pages> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1991. </year>
Reference-contexts: In addition, for every binary operator (except + or -), the string describing the derivative expression in essence doubles, leading to a combinatorial explosion effect (although some efficiency can be recouped by back-end optimization techniques <ref> [28, 40] </ref>). Therefore, differentiation using a symbolic manipulator still requires considerable human effort to break down an existing computer code into pieces digestible by a symbolic manipulator and to assemble the resulting pieces into a usable derivative code.
Reference: [29] <author> Shirish Chinchalkar. </author> <title> The application of automatic differentiation to problems in engineering analysis. </title> <booktitle> Computer Methods in Applied Mechanics and Engineering, </booktitle> <volume> 118 </volume> <pages> 197-207, </pages> <year> 1994. </year>
Reference-contexts: ADIFOR 1.0 was successfully employed in very different areas of science of engineering: aeronautical multidisciplinary design optimization [5, 68], aeronautical computational fluid dynamics [9, 13, 27, 41, 56, 57], weather modeling [19, 25, 61, 62], groundwater contaminant transport [18, 69], aquifer modeling [30, 50], structural engineering <ref> [29] </ref>, statistics [23], mechanical system design [49], power networks [52], reactor modeling [60], and large-scale numerical optimization [4, 14, 64]. The largest of these codes was 25,000 lines long and described 3-D turbulent flow over an airplane wing.
Reference: [30] <author> George F. Corliss, Christian Bischof, Andreas Griewank, Steven Wright, and Thomas Robey. </author> <title> Automatic differentiation for PDE's unsaturated flow case study. </title> <editor> In Robert Vichnevetski, Doyle Knight, and Gerard Richter, editors, </editor> <booktitle> Advances in Computer Methods for Partial Differential Equations - VII, </booktitle> <pages> pages 150-156, </pages> <address> New Brunswick, </address> <year> 1992. </year> <pages> IMACS. </pages>
Reference-contexts: ADIFOR 1.0 was successfully employed in very different areas of science of engineering: aeronautical multidisciplinary design optimization [5, 68], aeronautical computational fluid dynamics [9, 13, 27, 41, 56, 57], weather modeling [19, 25, 61, 62], groundwater contaminant transport [18, 69], aquifer modeling <ref> [30, 50] </ref>, structural engineering [29], statistics [23], mechanical system design [49], power networks [52], reactor modeling [60], and large-scale numerical optimization [4, 14, 64]. The largest of these codes was 25,000 lines long and described 3-D turbulent flow over an airplane wing.
Reference: [31] <author> John Dennis and R. Schnabel. </author> <title> Numerical Methods for Unconstrained Optimization and Nonlinear Equations. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1983. </year>
Reference-contexts: Cass Avenue, Argonne, IL 60439-4844, fbischof,khademi,mauerg@mcs.anl.gov. z Center for Research on Parallel Computation, Rice University, 6100 S. Main Street, Houston, TX 77251-1892, carle@cs.rice.edu. 1 in numerical computing. Examples are methods for minimization or the solution of nonlinear systems of equations <ref> [31, 59] </ref>, or the numerical solution of stiff ordinary differential equations [24], partial differential equations [70], and differential-algebraic equations [22]. During the past decade, large computer models have become common, as a consequence of the tremendous expansion of computational capabilities.
Reference: [32] <author> I. S. Duff, A. M. Erisman, and J. K. Reid. </author> <title> Direct Methods for Sparse Matrices. </title> <publisher> Oxford Press, </publisher> <address> London, </address> <year> 1987. </year>
Reference-contexts: In the numerical Linear algebra literature, the latter two data structures are usually referred to as the "single-subscript" and "compressed sub script" representation of a sparse vector (see, for example, <ref> [32, 36] </ref>). Efficient Memory Allocation Scheme: SparsLinC employs a "bucket" memory allocation scheme, which in effect provides a buffered memory allocation mechanism, supporting the dynamic nature of the sparse vectors while avoiding the need for system calls most of the time.
Reference: [33] <author> H. Engl and J. McLaughlin. </author> <title> Proceedings of the symposium on inverse problems and optimal design in industry, </title> <publisher> Teubner Verlag, Stuttgart, </publisher> <year> 1994. </year>
Reference-contexts: The solution process usually employs some variant of Newton's method. A collection of articles related to this subject can be found, for example, in <ref> [33] </ref>. (Multidisciplinary) Design Optimization: Here one tries to find the optimal setting of input parameters of a computer model with respect to a cost function that quantifies the quality of the overall design. <p> A collection of articles related to this subject can be found, for example, in <ref> [1, 33] </ref>. For purposes of illustration, assume that we have a code for the computation of a function f and f : x 2 R n 7! y 2 R m , and we wish to compute the derivatives of y with respect to x.
Reference: [34] <author> Ian Foster, Robert Olson, and Steven Tuecke. </author> <title> Programming in Fortran M. </title> <type> Technical Report ANL-93/26, Rev. 1, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, </institution> <month> October </month> <year> 1993. </year>
Reference-contexts: We are also investigating the extension of automatic differentiation to parallel communication mechanisms, including MPI [48] and PVM [35], parallel languages such as HPF [55] and Fortran-M <ref> [34] </ref>, and languages such as C++ and Fortran 90.
Reference: [35] <author> A. Geist, A. Beguelin, J. Dongarra, W. Jiang, R. Manchek, and V. Sunderam. </author> <title> PVM Parallel Virtual Machine: A Users' Guide and Tutorial for Network Parallel Computing. </title> <publisher> MIT Press, </publisher> <address> Cambridge, </address> <year> 1994. </year> <month> 29 </month>
Reference-contexts: We are also investigating the extension of automatic differentiation to parallel communication mechanisms, including MPI [48] and PVM <ref> [35] </ref>, parallel languages such as HPF [55] and Fortran-M [34], and languages such as C++ and Fortran 90.
Reference: [36] <author> Alan George and Joseph Liu. </author> <title> Computer Solution of Large Sparse Positive Definite Systems. </title> <publisher> Prentice--Hall, </publisher> <address> Englewood Cliffs, </address> <year> 1981. </year>
Reference-contexts: In the numerical Linear algebra literature, the latter two data structures are usually referred to as the "single-subscript" and "compressed sub script" representation of a sparse vector (see, for example, <ref> [32, 36] </ref>). Efficient Memory Allocation Scheme: SparsLinC employs a "bucket" memory allocation scheme, which in effect provides a buffered memory allocation mechanism, supporting the dynamic nature of the sparse vectors while avoiding the need for system calls most of the time.
Reference: [37] <author> Ralf Giering. </author> <title> Adjoint model compiler, </title> <note> manual version 0.2, AMC version 2.04. Technical report, </note> <institution> Max-Planck Institut fur Meteorolgie, </institution> <month> August </month> <year> 1992. </year>
Reference-contexts: Black-box tools in this sense are GRESS [51], PADRE-2 [58] and Odyssee [65, 66] for Fortran programs and ADOL-C [45] and ADIC [16] for C programs. AMC <ref> [37] </ref>, on the other hand, is a tool that supports, in an interactive fashion, the generation of reverse mode code. GRESS, PADRE-2, and ADOL-C implement both the forward and reverse mode.
Reference: [38] <author> Phillip E. Gill, Walter Murray, and Margaret H. Wright. </author> <title> Practical Optimization. </title> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1981. </year>
Reference-contexts: At the very best, approach (2), for example, results in a derivative approximation that has half the significant digits of f . These issues, as well as sensible ways of choosing the stepsize, are discussed, for example, in <ref> [38] </ref>. Symbolic Differentiation: Symbolic manipulators like Maple, Macsyma, or Reduce provide powerful capabilities for manipulating algebraic expressions but are, in general, unable to deal with constructs such as branches, loops, or subroutines that are inherent in computer codes.
Reference: [39] <author> David Goldberg. </author> <title> What every computer scientist should know about floating-point arithmetic. </title> <journal> ACM Computing Surveys, </journal> <volume> 23(1) </volume> <pages> 5-48, </pages> <year> 1991. </year>
Reference-contexts: A small step size h is needed to minimize the truncation error resulting from the omission of higher-order terms in (1), but the resulting subtraction of two almost equal floating-point numbers may lead to significant cancellation error (see, for example <ref> [39] </ref>). At the very best, approach (2), for example, results in a derivative approximation that has half the significant digits of f . These issues, as well as sensible ways of choosing the stepsize, are discussed, for example, in [38].
Reference: [40] <author> Victor V. Goldman, J. Molenkamp, and J. A. van Hulzen. </author> <title> Efficient numerical program generation and computer algebra environments. </title> <editor> In Andreas Griewank and George F. Corliss, editors, </editor> <title> Automatic Differentiation of Algorithms: Theory, </title> <booktitle> Implementation, and Application, </booktitle> <pages> pages 74-83. </pages> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1991. </year>
Reference-contexts: In addition, for every binary operator (except + or -), the string describing the derivative expression in essence doubles, leading to a combinatorial explosion effect (although some efficiency can be recouped by back-end optimization techniques <ref> [28, 40] </ref>). Therefore, differentiation using a symbolic manipulator still requires considerable human effort to break down an existing computer code into pieces digestible by a symbolic manipulator and to assemble the resulting pieces into a usable derivative code.
Reference: [41] <author> Lawrence Green, Perry Newman, and Kara Haigler. </author> <title> Sensitivity derivatives for advanced CFD algorithm and viscous modeling parameters via automatic differentiation. </title> <booktitle> In Proceedings of the 11th AIAA Computational Fluid Dynamics Conference, </booktitle> <institution> AIAA Paper 93-3321. American Institute of Aeronautics and Astronautics, </institution> <year> 1993. </year>
Reference-contexts: Two major revisions of the system were subsequently completed; the June 1993 version is called ADIFOR 1.0. ADIFOR 1.0 was successfully employed in very different areas of science of engineering: aeronautical multidisciplinary design optimization [5, 68], aeronautical computational fluid dynamics <ref> [9, 13, 27, 41, 56, 57] </ref>, weather modeling [19, 25, 61, 62], groundwater contaminant transport [18, 69], aquifer modeling [30, 50], structural engineering [29], statistics [23], mechanical system design [49], power networks [52], reactor modeling [60], and large-scale numerical optimization [4, 14, 64].
Reference: [42] <author> Andreas Griewank. </author> <title> The chain rule revisited in scientific computing. </title> <type> Preprint MCS-P227-0491, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, </institution> <year> 1991. </year>
Reference-contexts: Automatic Differentiation: Automatic differentiation techniques rely on the fact that every function, no matter how complicated, is executed on a computer as a (potentially very long) sequence of elementary operations such as additions, multiplications, and elementary functions such as sin and cos (see, for example, <ref> [42, 63] </ref>. By applying the chain rule @ f (g (t)) fi t=t 0 @s fi fi @t fi fi over and over again to the composition of those elementary operations, one can compute, in a completely mechanical fashion, derivatives of f that are correct up to machine precision [46].
Reference: [43] <author> Andreas Griewank. </author> <title> Achieving logarithmic growth of temporal and spatial complexity in reverse automatic differentiation. </title> <journal> Optimization Methods and Software, </journal> <volume> 1(1) </volume> <pages> 35-54, </pages> <year> 1992. </year>
Reference-contexts: It imposes certain restrictions on the Fortran input and on the Fortran runtime environment (e.g., the support of "automatic arrays"). The potential storage explosion associated with applying the reverse mode to highly nonlinear 10 codes has not been addressed in Odyssee yet, but the snapshotting approach suggested in <ref> [43] </ref> has great potential. ADIFOR and, more recently, ADIC employ a hybrid forward/reverse mode scheme, and the basic approach taken in ADIFOR 2.0 is unchanged from that of previous versions of ADIFOR.
Reference: [44] <author> Andreas Griewank and George Corliss. </author> <title> Automatic Differentiation of Algorithms. </title> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1991. </year>
Reference-contexts: (i) 3 y (2) 3 y (2) endif enddo 2 Automatic Differentiation as a Source Transformation and the ADIFOR Approach The fact that the chain rule can be applied in a mechanical fashion has been rediscovered several times since the 1960s (see, for example, the papers in Part I of <ref> [44] </ref> and the references therein). Traditionally, two approaches to AD have been developed: the so-called forward and reverse modes. These modes are distinguished by how the chain rule is used to propagate derivatives through the computation.
Reference: [45] <author> Andreas Griewank, David Juedes, and Jay Srinivasan. ADOL-C, </author> <title> a package for the automatic differentiation of algorithms written in C/C++. </title> <type> Preprint MCS-P180-1190, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, </institution> <year> 1990. </year>
Reference-contexts: Black-box tools in this sense are GRESS [51], PADRE-2 [58] and Odyssee [65, 66] for Fortran programs and ADOL-C <ref> [45] </ref> and ADIC [16] for C programs. AMC [37], on the other hand, is a tool that supports, in an interactive fashion, the generation of reverse mode code. GRESS, PADRE-2, and ADOL-C implement both the forward and reverse mode. <p> However, much remains to be done. We are working on extending the capabilities of ADIFOR to directly compute second-order derivatives. While automatic differentiation can easily be extended to arbitrary-order derivatives (see, for example, the ADOL-C <ref> [45] </ref> system), it is not clear which approach, or combination of approaches, results in the most efficient code. Some of these issues are discussed in [11] and [12]. We are also working on decreasing the complexity of computing first-order derivatives.
Reference: [46] <author> Andreas Griewank and Shawn Reese. </author> <title> On the calculation of Jacobian matrices by the Markowitz rule. </title> <editor> In Andreas Griewank and George F. Corliss, editors, </editor> <title> Automatic Differentiation of Algorithms: Theory, </title> <booktitle> Implementation, and Application, </booktitle> <pages> pages 126-135. </pages> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1991. </year>
Reference-contexts: By applying the chain rule @ f (g (t)) fi t=t 0 @s fi fi @t fi fi over and over again to the composition of those elementary operations, one can compute, in a completely mechanical fashion, derivatives of f that are correct up to machine precision <ref> [46] </ref>. The techniques of automatic differentiation are directly applicable to computer programs of arbitrary length containing branches, loops, and subroutines. We also note that, unlike handcoding or symbolically assisted approaches, automatic differentiation enables derivatives to be updated easily when the original code changes. <p> Let s denote the adjoint of a particular variable s. As a consequence of the chain rule it can be shown (see, for example, <ref> [46] </ref>) that the statement s = f (v; w) in the original code implies that code of the form v + = @ v w + = @ w (8) should be generated in the reverse mode code.
Reference: [47] <author> Andreas Griewank and Philippe L. Toint. </author> <title> On the unconstrained optimization of partially separable objective functions. </title> <editor> In M. J. D. Powell, editor, </editor> <booktitle> Nonlinear Optimization 1981, </booktitle> <pages> pages 301-312, </pages> <address> London, 1981. </address> <publisher> Academic Press. </publisher>
Reference-contexts: This situation arises, for example, in the computation of large sparse Jacobians, J := d F , or gradients of so-called partially separable functions <ref> [47] </ref>, which are functions f that can be represented in the form f (x) = i=1 where each of the component functions f i has limited support. Hence, the gradients rf i are sparse, even though the final gradient rf is dense. <p> Partially separable functions play a key role in large-scale optimization (for example, all minimization examples in [3] belong to that class), and, in particular, any function with a sparse Hessian is a partially separable one <ref> [47] </ref>. If the sparsity pattern of J is known, coloring techniques together with the seed matrix mechanism can be employed advantageously to compute a compressed Jacobian matrix efficiently [4].
Reference: [48] <author> William Gropp, Ewing Lusk, and Anthony Skjellum. </author> <title> Using MPI Portable Parallel Programming with the Message Passing Interface. </title> <publisher> MIT Press, </publisher> <address> Cambridge, </address> <year> 1994. </year>
Reference-contexts: We are also investigating the extension of automatic differentiation to parallel communication mechanisms, including MPI <ref> [48] </ref> and PVM [35], parallel languages such as HPF [55] and Fortran-M [34], and languages such as C++ and Fortran 90.
Reference: [49] <author> Uli Hauermann. </author> <title> Automatische Differentiation zur Rekursiven Bestimmung von Partiellen Ableitungen. </title> <institution> STUD-102, Institut B fur Mechanik, Universitat Stuttgart, </institution> <year> 1993. </year> <month> 30 </month>
Reference-contexts: was successfully employed in very different areas of science of engineering: aeronautical multidisciplinary design optimization [5, 68], aeronautical computational fluid dynamics [9, 13, 27, 41, 56, 57], weather modeling [19, 25, 61, 62], groundwater contaminant transport [18, 69], aquifer modeling [30, 50], structural engineering [29], statistics [23], mechanical system design <ref> [49] </ref>, power networks [52], reactor modeling [60], and large-scale numerical optimization [4, 14, 64]. The largest of these codes was 25,000 lines long and described 3-D turbulent flow over an airplane wing.
Reference: [50] <author> M. Heidari and S. Ranjithan. </author> <title> A hybrid optimization approach to the estimation of distributed param-eters in two dimensional confined aquifers under steady state conditions. </title> <type> Draft manuscript, </type> <year> 1994. </year>
Reference-contexts: ADIFOR 1.0 was successfully employed in very different areas of science of engineering: aeronautical multidisciplinary design optimization [5, 68], aeronautical computational fluid dynamics [9, 13, 27, 41, 56, 57], weather modeling [19, 25, 61, 62], groundwater contaminant transport [18, 69], aquifer modeling <ref> [30, 50] </ref>, structural engineering [29], statistics [23], mechanical system design [49], power networks [52], reactor modeling [60], and large-scale numerical optimization [4, 14, 64]. The largest of these codes was 25,000 lines long and described 3-D turbulent flow over an airplane wing.
Reference: [51] <author> Jim E. Horwedel. GRESS: </author> <title> A preprocessor for sensitivity studies on Fortran programs. </title> <editor> In Andreas Griewank and George F. Corliss, editors, </editor> <title> Automatic Differentiation of Algorithms: Theory, </title> <booktitle> Implementation, and Application, </booktitle> <pages> pages 243-250. </pages> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1991. </year>
Reference-contexts: Black-box tools in this sense are GRESS <ref> [51] </ref>, PADRE-2 [58] and Odyssee [65, 66] for Fortran programs and ADOL-C [45] and ADIC [16] for C programs. AMC [37], on the other hand, is a tool that supports, in an interactive fashion, the generation of reverse mode code.
Reference: [52] <author> Amin Ibsais and Venkataramana Ajjarapu. </author> <title> The application of automatic differentiation in the continuation power flow. </title> <booktitle> In Proc. 26th North American Power Symposium, Part I, Manhattan, Kansas, </booktitle> <pages> pages 329-337, </pages> <year> 1994. </year>
Reference-contexts: in very different areas of science of engineering: aeronautical multidisciplinary design optimization [5, 68], aeronautical computational fluid dynamics [9, 13, 27, 41, 56, 57], weather modeling [19, 25, 61, 62], groundwater contaminant transport [18, 69], aquifer modeling [30, 50], structural engineering [29], statistics [23], mechanical system design [49], power networks <ref> [52] </ref>, reactor modeling [60], and large-scale numerical optimization [4, 14, 64]. The largest of these codes was 25,000 lines long and described 3-D turbulent flow over an airplane wing.
Reference: [53] <author> W. Johnson. </author> <title> Camrad/ja a comprehensive analytical model of rotorcraft aerodynamics and dynamics - johnson aeronautics version. </title> <type> Technical report, </type> <institution> Johnson Aeronautics, </institution> <year> 1988. </year>
Reference-contexts: The relationship among these components is shown pictorially in Figure 8, and they are described in detail in the following subsections. We point out beforehand that the new ADIFOR 2.0 preprocessor and ADIntrinsics system have correctly handled the 60,000-line CAMRAD helicopter hover code <ref> [53] </ref> at NASA Langley. Researchers at Langley have verified the derivatives, and we believe this to be a new record in automatic differentiation. 3.1 The ADIFOR 2.0 Preprocessor ADIFOR takes a source transformation approach to automatic differentiation.
Reference: [54] <author> David Juedes. </author> <title> A taxonomy of automatic differentiation tools. </title> <editor> In Andreas Griewank and George Corliss, editors, </editor> <booktitle> Proceedings of the Workshop on Automatic Differentiation of Algorithms: Theory, Implementation, and Application, </booktitle> <pages> pages 315-330, </pages> <address> Philadelphia, </address> <year> 1991. </year> <note> SIAM. </note>
Reference-contexts: This is particularly advantageous for gradients, since then m = 1. 2.3 The ADIFOR Approach There have been various implementations of automatic differentiation; an extensive survey can be found in <ref> [54] </ref>. <p> That is, in order to augment a given code with derivative computation, we rewrite it, using the principle outlined in the preceding section, generating a new Fortran code that, when compiled and executed, computes derivatives. Compared with implementing automatic differentiation with operator overloading (see, for example, <ref> [54] </ref>) a source translation approach allows one to view the problem of generating derivative code in a context that is larger than one arithmetic operation, and is the conceptual key to the development of hybrid modes like the one employed in ADIFOR.
Reference: [55] <author> C. Koelbel, D. Loveman, R. Schreiber, G. Steele, Jr., and M. Zosel. </author> <title> The High Performance Fortran Handbook. </title> <publisher> MIT Press, </publisher> <address> Cambridge, </address> <year> 1994. </year>
Reference-contexts: We are also investigating the extension of automatic differentiation to parallel communication mechanisms, including MPI [48] and PVM [35], parallel languages such as HPF <ref> [55] </ref> and Fortran-M [34], and languages such as C++ and Fortran 90.
Reference: [56] <author> V. Korivi, L. Sherman, A. Taylor, G. Hou, L. Green, and P. Newman. </author> <title> First- and second-order aerodynamic sensitivity derivatives via automatic differentiation with incremental iterative methods. </title> <booktitle> In Proceedings of the 5th AIAA/NASA/USAF/ISSMO Symposium on Multidisciplinary Analysis and Optimization, </booktitle> <pages> AIAA 94-4262, pages 87-120. </pages> <institution> American Institute of Aeronautics and Astronautics, </institution> <year> 1994. </year>
Reference-contexts: Two major revisions of the system were subsequently completed; the June 1993 version is called ADIFOR 1.0. ADIFOR 1.0 was successfully employed in very different areas of science of engineering: aeronautical multidisciplinary design optimization [5, 68], aeronautical computational fluid dynamics <ref> [9, 13, 27, 41, 56, 57] </ref>, weather modeling [19, 25, 61, 62], groundwater contaminant transport [18, 69], aquifer modeling [30, 50], structural engineering [29], statistics [23], mechanical system design [49], power networks [52], reactor modeling [60], and large-scale numerical optimization [4, 14, 64].
Reference: [57] <author> V. Korivi, A. Taylor, and P. Newman. </author> <title> Aerodynamic optimization studies using a 3-D supersonic Euler code with efficient calculation of sensitivity derivatives. </title> <booktitle> In Proceedings of the 5th AIAA/NASA/USAF/ISSMO Symposium on Multidisciplinary Analysis and Optimization, </booktitle> <pages> AIAA 94-4270, pages 170-194. </pages> <institution> American Institute of Aeronautics and Astronautics, </institution> <year> 1994. </year>
Reference-contexts: Two major revisions of the system were subsequently completed; the June 1993 version is called ADIFOR 1.0. ADIFOR 1.0 was successfully employed in very different areas of science of engineering: aeronautical multidisciplinary design optimization [5, 68], aeronautical computational fluid dynamics <ref> [9, 13, 27, 41, 56, 57] </ref>, weather modeling [19, 25, 61, 62], groundwater contaminant transport [18, 69], aquifer modeling [30, 50], structural engineering [29], statistics [23], mechanical system design [49], power networks [52], reactor modeling [60], and large-scale numerical optimization [4, 14, 64].
Reference: [58] <author> Koichi Kubota. PADRE2, </author> <title> a FORTRAN precompiler yielding error estimates and second derivatives. </title> <editor> In Andreas Griewank and George F. Corliss, editors, </editor> <title> Automatic Differentiation of Algorithms: Theory, </title> <booktitle> Implementation, and Application, </booktitle> <pages> pages 251-262. </pages> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1991. </year>
Reference-contexts: Black-box tools in this sense are GRESS [51], PADRE-2 <ref> [58] </ref> and Odyssee [65, 66] for Fortran programs and ADOL-C [45] and ADIC [16] for C programs. AMC [37], on the other hand, is a tool that supports, in an interactive fashion, the generation of reverse mode code. GRESS, PADRE-2, and ADOL-C implement both the forward and reverse mode.
Reference: [59] <author> Jorge J. More and Stephen J. Wright. </author> <title> Optimization Software Guide. </title> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1993. </year>
Reference-contexts: Cass Avenue, Argonne, IL 60439-4844, fbischof,khademi,mauerg@mcs.anl.gov. z Center for Research on Parallel Computation, Rice University, 6100 S. Main Street, Houston, TX 77251-1892, carle@cs.rice.edu. 1 in numerical computing. Examples are methods for minimization or the solution of nonlinear systems of equations <ref> [31, 59] </ref>, or the numerical solution of stiff ordinary differential equations [24], partial differential equations [70], and differential-algebraic equations [22]. During the past decade, large computer models have become common, as a consequence of the tremendous expansion of computational capabilities.
Reference: [60] <author> Douglas Muir. </author> <title> Description of covariance data in ENDF-6 format. </title> <editor> In C. L. Dunford, editor, </editor> <booktitle> Proc. on Nuclear Data Evaluation Methodology. World Scientific, </booktitle> <year> 1993. </year>
Reference-contexts: areas of science of engineering: aeronautical multidisciplinary design optimization [5, 68], aeronautical computational fluid dynamics [9, 13, 27, 41, 56, 57], weather modeling [19, 25, 61, 62], groundwater contaminant transport [18, 69], aquifer modeling [30, 50], structural engineering [29], statistics [23], mechanical system design [49], power networks [52], reactor modeling <ref> [60] </ref>, and large-scale numerical optimization [4, 14, 64]. The largest of these codes was 25,000 lines long and described 3-D turbulent flow over an airplane wing.
Reference: [61] <author> Seon Ki Park and Kelvin Droegemeier. </author> <title> Effect of a microphysical parameterization on the evolution of linear perturbations in a convective cloud model. </title> <booktitle> In Preprints, Conference on Cloud Physics, </booktitle> <month> January </month> <year> 1995, </year> <title> Dallas, Texas. </title> <publisher> American Meteorological Society. </publisher>
Reference-contexts: Two major revisions of the system were subsequently completed; the June 1993 version is called ADIFOR 1.0. ADIFOR 1.0 was successfully employed in very different areas of science of engineering: aeronautical multidisciplinary design optimization [5, 68], aeronautical computational fluid dynamics [9, 13, 27, 41, 56, 57], weather modeling <ref> [19, 25, 61, 62] </ref>, groundwater contaminant transport [18, 69], aquifer modeling [30, 50], structural engineering [29], statistics [23], mechanical system design [49], power networks [52], reactor modeling [60], and large-scale numerical optimization [4, 14, 64].
Reference: [62] <author> Seon Ki Park, Kelvin Droegemeier, Christian Bischof, and Tim Knauff. </author> <title> Sensitivity analysis of numerically-simulated convective storms using direct and adjoint methods. </title> <booktitle> In Preprints, 10th Conference on Numerical Weather Prediction, Portland, Oregon, </booktitle> <pages> pages 457-459. </pages> <publisher> American Meterological Society, </publisher> <year> 1994. </year> <month> 31 </month>
Reference-contexts: Two major revisions of the system were subsequently completed; the June 1993 version is called ADIFOR 1.0. ADIFOR 1.0 was successfully employed in very different areas of science of engineering: aeronautical multidisciplinary design optimization [5, 68], aeronautical computational fluid dynamics [9, 13, 27, 41, 56, 57], weather modeling <ref> [19, 25, 61, 62] </ref>, groundwater contaminant transport [18, 69], aquifer modeling [30, 50], structural engineering [29], statistics [23], mechanical system design [49], power networks [52], reactor modeling [60], and large-scale numerical optimization [4, 14, 64].
Reference: [63] <author> Louis B. Rall. </author> <title> Automatic Differentiation: Techniques and Applications, </title> <booktitle> volume 120 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1981. </year>
Reference-contexts: Automatic Differentiation: Automatic differentiation techniques rely on the fact that every function, no matter how complicated, is executed on a computer as a (potentially very long) sequence of elementary operations such as additions, multiplications, and elementary functions such as sin and cos (see, for example, <ref> [42, 63] </ref>. By applying the chain rule @ f (g (t)) fi t=t 0 @s fi fi @t fi fi over and over again to the composition of those elementary operations, one can compute, in a completely mechanical fashion, derivatives of f that are correct up to machine precision [46].
Reference: [64] <author> Marcela Rosemblun. </author> <title> Automatic differentiation: Overview and application to systems of parametrized nonlinear equations. </title> <type> Technical Report CRPC-TR92267, </type> <institution> Center for Research in Parallel Computation, Rice University, </institution> <year> 1992. </year>
Reference-contexts: aeronautical multidisciplinary design optimization [5, 68], aeronautical computational fluid dynamics [9, 13, 27, 41, 56, 57], weather modeling [19, 25, 61, 62], groundwater contaminant transport [18, 69], aquifer modeling [30, 50], structural engineering [29], statistics [23], mechanical system design [49], power networks [52], reactor modeling [60], and large-scale numerical optimization <ref> [4, 14, 64] </ref>. The largest of these codes was 25,000 lines long and described 3-D turbulent flow over an airplane wing.
Reference: [65] <author> Nicole Rostaing, Stephane Dalmas, and Andre Galligo. </author> <title> Automatic differentiation in Odysee. </title> <address> Tellus, 45a(5):558-568, </address> <month> October </month> <year> 1993. </year>
Reference-contexts: Black-box tools in this sense are GRESS [51], PADRE-2 [58] and Odyssee <ref> [65, 66] </ref> for Fortran programs and ADOL-C [45] and ADIC [16] for C programs. AMC [37], on the other hand, is a tool that supports, in an interactive fashion, the generation of reverse mode code. GRESS, PADRE-2, and ADOL-C implement both the forward and reverse mode. <p> By applying the rules of automatic differentiation, these tools rewrite the original code, inserting statements for the computation of first-order derivatives. Odyssee is the only tool that generates full reverse mode code, and it has been used successfully for the adjoint generation of weather models <ref> [65, 66] </ref>. It imposes certain restrictions on the Fortran input and on the Fortran runtime environment (e.g., the support of "automatic arrays").
Reference: [66] <author> Nicole Rostaing-Schmidt and Eric Hassold. </author> <title> Basic functional representation of programs for automatic differentiation in the Odyssee system. </title> <editor> In Francois-Xavier Le Dimet, editor, </editor> <booktitle> High-Performance Computing in the Geosciences, </booktitle> <address> Dordrecht, 1994. </address> <publisher> Kluwer Academic Publishers. </publisher>
Reference-contexts: Black-box tools in this sense are GRESS [51], PADRE-2 [58] and Odyssee <ref> [65, 66] </ref> for Fortran programs and ADOL-C [45] and ADIC [16] for C programs. AMC [37], on the other hand, is a tool that supports, in an interactive fashion, the generation of reverse mode code. GRESS, PADRE-2, and ADOL-C implement both the forward and reverse mode. <p> By applying the rules of automatic differentiation, these tools rewrite the original code, inserting statements for the computation of first-order derivatives. Odyssee is the only tool that generates full reverse mode code, and it has been used successfully for the adjoint generation of weather models <ref> [65, 66] </ref>. It imposes certain restrictions on the Fortran input and on the Fortran runtime environment (e.g., the support of "automatic arrays").
Reference: [67] <author> Edgar Soulie. </author> <title> User's experience with Fortran compilers for least squares problems. </title> <editor> In Andreas Griewank and George F. Corliss, editors, </editor> <title> Automatic Differentiation of Algorithms: Theory, </title> <booktitle> Implementation, and Application, </booktitle> <pages> pages 297-306. </pages> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1991. </year>
Reference-contexts: The interpretation overhead associated with using this trace for the purposes of automatic differentiation and its potentially very large size can be a serious computational bottleneck <ref> [67] </ref>. ADIFOR, Odyssee, and ADIC take a "source transformation" approach to automatic differentiation. By applying the rules of automatic differentiation, these tools rewrite the original code, inserting statements for the computation of first-order derivatives.
Reference: [68] <author> E. R. Unger and L. E. Hall. </author> <title> The use of automatic differentiation in an aircraft design problem. </title> <booktitle> In Proceedings of the 5th AIAA/NASA/USAF/ISSMO Symposium on Multidisciplinary Analysis and Optimization, </booktitle> <pages> AIAA 94-4260, pages 64-73. </pages> <institution> American Institute of Aeronautics and Astronautics, </institution> <year> 1994. </year>
Reference-contexts: Two major revisions of the system were subsequently completed; the June 1993 version is called ADIFOR 1.0. ADIFOR 1.0 was successfully employed in very different areas of science of engineering: aeronautical multidisciplinary design optimization <ref> [5, 68] </ref>, aeronautical computational fluid dynamics [9, 13, 27, 41, 56, 57], weather modeling [19, 25, 61, 62], groundwater contaminant transport [18, 69], aquifer modeling [30, 50], structural engineering [29], statistics [23], mechanical system design [49], power networks [52], reactor modeling [60], and large-scale numerical optimization [4, 14, 64].
Reference: [69] <author> Gregory Whiffen, Christine Shoemaker, Christian Bischof, Aaron Ross, and Alan Carle. </author> <title> Application of automatic differentiation to groundwater transport codes. </title> <type> Preprint MCS-P441-0594, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, </institution> <year> 1994. </year>
Reference-contexts: ADIFOR 1.0 was successfully employed in very different areas of science of engineering: aeronautical multidisciplinary design optimization [5, 68], aeronautical computational fluid dynamics [9, 13, 27, 41, 56, 57], weather modeling [19, 25, 61, 62], groundwater contaminant transport <ref> [18, 69] </ref>, aquifer modeling [30, 50], structural engineering [29], statistics [23], mechanical system design [49], power networks [52], reactor modeling [60], and large-scale numerical optimization [4, 14, 64]. The largest of these codes was 25,000 lines long and described 3-D turbulent flow over an airplane wing.
Reference: [70] <author> Erich Zauderer. </author> <title> Partial Differential Equations of Applied Mathematics. </title> <publisher> John Wiley & Sons, </publisher> <address> Somerset, </address> <year> 1989. </year>
Reference-contexts: Main Street, Houston, TX 77251-1892, carle@cs.rice.edu. 1 in numerical computing. Examples are methods for minimization or the solution of nonlinear systems of equations [31, 59], or the numerical solution of stiff ordinary differential equations [24], partial differential equations <ref> [70] </ref>, and differential-algebraic equations [22]. During the past decade, large computer models have become common, as a consequence of the tremendous expansion of computational capabilities. For such models, the computation of derivatives becomes even more important, as it may be the most compute-intensive part of the overall computation.
References-found: 70

