URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3418/3418.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Title: Improved Approximation Algorithms for Uniform Connectivity Problems  
Author: Samir Khuller Balaji Raghavachari 
Abstract: The problem of finding minimum weight spanning subgraphs with a given connectivity requirement is considered. The problem is NP-hard when the connectivity requirement is greater than one. Polynomial time approximation algorithms for various weighted and unweighted connectivity problems are given. The following results are presented: 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Aggarwal, N. Garg, </author> <title> A scaling technique for better network design, </title> <booktitle> Proc. 5th Annual ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pp. 233-240, </pages> <year> (1994). </year>
Reference-contexts: 1 Introduction Connectivity is fundamental to the study of graphs and graph algorithms. Recently, many approximation algorithms for finding subgraphs that meet given connectivity requirements have been developed <ref> [1, 11, 14, 15, 19, 21, 22] </ref>. These results provide practical approximation algorithms for NP-hard network design problems, via an increased understanding of connectivity properties. In this paper we focus on uniform k-connectivity problems. The term connectivity refers to both edge and vertex connectivities, unless specified.
Reference: [2] <author> B. Bollobas, </author> <title> Extremal graph theory, </title> <publisher> Academic Press, </publisher> <address> London, </address> <year> (1978). </year>
Reference-contexts: This follows from the following two facts. Any minimal k-connected subgraph contains at most k (n k) edges <ref> [2] </ref>. In any k-connected graph, the degree of each vertex is at least k, thus implying a lower bound of kn=2 on the number of edges in any optimal solution. <p> Since the degree of any vertex must be at least k in a k-connected graph, any solution to the above problem must have at least dkn=2e edges. Any minimally k-edge-connected graph has at most k (n k) edges <ref> [2] </ref>, and this provides a 2-approximation algorithm. Khuller and Vishkin [19] provided the 3 first approximation algorithm for k = 2 with a performance ratio less than 2. Their algorithm is based on depth-first search and has a performance guarantee of 3=2.
Reference: [3] <author> J. Cheriyan, M.-Y. Kao and R. Thurimella, </author> <title> Algorithms for parallel k-vertex connectivity and sparse certificates, </title> <journal> SIAM J. Comput., </journal> <volume> 22 (1), </volume> <pages> pp. 157-174, </pages> <year> (1993). </year>
Reference-contexts: Efficient algorithms for finding k-connected subgraphs with at most k (n 1) edges were given by Nagamochi and Ibaraki [20] and Cheriyan, Kao and Thurimella <ref> [3] </ref>. We observe that such approximation algorithms do not exploit any structural properties of an optimal solution, other than the trivial lower bound on the degree of each vertex. <p> The vertex connectivity bound was subsequently improved to 1.5 by Garg, Santosh and Singla [13]. By combining the biconnectivity algorithm [19], and the sparse certificate algorithm <ref> [3] </ref> one can easily obtain a factor of 2 1=k for the k-edge-connectivity problem, but this approaches 2 as k increases. <p> We give an algorithm and a lower bounding method that yields an approximation ratio of about 1:85 for the k-edge-connectivity problem. At a high level, the structure of our algorithm is based on the method of <ref> [3] </ref>, but it uses depth first search to obtain a better solution in each phase. Our algorithm is quite straight-forward, but proving a performance ratio of less than 2 for the algorithm requires a subtle analysis of the structure of any optimal solution. <p> In this section we provide the first algorithm for unweighted k-edge-connectivity with an approximation factor strictly less than 2 for all values of k. The structure of our algorithm is similar to the one used by Cheriyan, Kao and Thurimella <ref> [3] </ref>, where the connectivity of the solution is increased in stages. The main idea behind the algorithm for finding a sparse k-edge-connected subgraph is to repeatedly find and delete a maximal spanning forest from the graph G. <p> The main idea behind the algorithm for finding a sparse k-edge-connected subgraph is to repeatedly find and delete a maximal spanning forest from the graph G. After this is repeated k times, the deleted edges form a k-edge-connected spanning subgraph of G <ref> [3, 20] </ref>. 3.1 The algorithm We first describe our algorithm for even values of k. The algorithm works in phases. It starts with an empty subgraph S. In each phase the edge connectivity of S is increased by 2. <p> We then show that adding back edges as we do in our algorithm increases the connectivity by 1 more. The following lemma is easily established from the sparse certificate proofs of <ref> [3, 20] </ref>. We provide its proof for the sake of completeness. Lemma 3.1 Let G = (V; E) be a graph which is at least -edge-connected. Let S be a ( 1)- edge-connected spanning subgraph of G, and let F be a maximal spanning forest in GS.
Reference: [4] <author> N. Christofides. </author> <title> Worst-case analysis of a new heuristic for the traveling salesman problem. </title> <type> Report 388, </type> <institution> Graduate School of Industrial Administration, Carnegie Mellon University, </institution> <year> 1975. </year>
Reference-contexts: For k = 2, it is easy to show that the TSP algorithm of "doubling" the minimum spanning tree has a performance guarantee of 2. Frederickson and JaJa [9] proved that Christofides' algorithm <ref> [4] </ref> (for the TSP problem) has a performance guarantee of 1.5 for the minimum-weight biconnectivity problem as well. The analysis for the biconnectivity algorithm is more complicated since the relationship between the weight of a minimum-weight matching and the weight of an optimal biconnected subgraph is not obvious.
Reference: [5] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest, </author> <title> Introduction to Algorithms, </title> <publisher> The MIT Press, </publisher> <year> 1989. </year>
Reference-contexts: It is easy to identify such an edge during the execution of depth-first-search (similar information is maintained during the computation of biconnected components in a graph <ref> [5] </ref>). This step ensures that u and v are 2i-edge-connected in S. Therefore after all edges of F i have been scanned, S is 2i-edge-connected.
Reference: [6] <author> J. Edmonds, </author> <title> Matroid intersection, </title> <journal> Annals of Discrete Math., </journal> <volume> No. 4, </volume> <pages> pp. 185-204, </pages> <year> (1979). </year>
Reference-contexts: The performance guarantee for general k is 2H (k), where H (k) = P k the kth Harmonic number. On a related problem in directed graphs, Frank and Tardos [7] extended a technique discovered by Edmonds <ref> [6] </ref> and showed that the following problem can be solved in polynomial time. The input is a directed graph D with nonnegative weights on the edges, a root vertex r and an integer .
Reference: [7] <author> A. Frank and E. Tardos, </author> <title> An application of submodular flows, </title> <journal> Linear Algebra and its Applications, </journal> <volume> 114/115, </volume> <pages> pp. 320-348, </pages> <year> (1989). </year>
Reference-contexts: The performance guarantee for general k is 2H (k), where H (k) = P k the kth Harmonic number. On a related problem in directed graphs, Frank and Tardos <ref> [7] </ref> extended a technique discovered by Edmonds [6] and showed that the following problem can be solved in polynomial time. The input is a directed graph D with nonnegative weights on the edges, a root vertex r and an integer . <p> His algorithm for solving the above problem of Frank and Tardos runs in O ( 2 n 2 m) time, where D has n vertices and m edges. 4.1 Basic technique We give an algorithm for undirected graphs that uses the algorithm of Frank and Tardos <ref> [7] </ref> as a subroutine. The algorithm finds an approximately minimum-weight subgraph that has openly disjoint paths to a set of "root" vertices. This algorithm is used by all our vertex connectivity algorithms.
Reference: [8] <author> G. N. Frederickson and J. JaJa, </author> <title> Approximation algorithms for several graph augmentation problems, </title> <journal> SIAM J. Comput., </journal> <volume> 10 (2), </volume> <pages> pp. 270-283, </pages> <year> (1981). </year>
Reference-contexts: The best known algorithm to find a k-vertex-connected subgraph is due to Ravi and Williamson [21] that achieves a factor of 2H (k), where H (k) is the kth Harmonic number (H (k) = 1 + 1 2 : : : + 1 Frederickson and JaJa <ref> [8] </ref> considered the problem of computing a minimum-weight bicon-nected spanning subgraph. They gave an approximation algorithm for a more general graph augmentation problem and used it to obtain a 3-approximation algorithm for the biconnectiv-ity problem. For k = 2, Ravi and Williamson's algorithm also achieves a ratio of 3.
Reference: [9] <author> G. N. Frederickson and J. JaJa, </author> <title> On the relationship between the biconnectivity augmentation and traveling salesman problems, </title> <journal> Theoret. Comput. Sci., </journal> <volume> 19 (2), </volume> <pages> pp. 189-201, </pages> <year> (1982). </year>
Reference-contexts: Not much more is known about the k-vertex-connectivity problem for the special case when the weights satisfy the triangle inequality. For k = 2, it is easy to show that the TSP algorithm of "doubling" the minimum spanning tree has a performance guarantee of 2. Frederickson and JaJa <ref> [9] </ref> proved that Christofides' algorithm [4] (for the TSP problem) has a performance guarantee of 1.5 for the minimum-weight biconnectivity problem as well. <p> We describe an algorithm that finds a k-vertex-connected subgraph whose weight is within a factor 2+2 (k1)=n of a minimum-weight k-vertex-connected subgraph in G. Previously, an algorithm achieving a factor of 1:5 for the case k = 2 was given by Frederickson and JaJa <ref> [9] </ref>. Many algorithms for graphs satisfying triangle inequality are based on simple ideas for shortcutting. For example, taking two copies of a minimum spanning tree and then shortcutting it suitably yields a 2-approximation for 2-connectivity.
Reference: [10] <author> H. N. Gabow, </author> <title> A representation for crossing set families with applications to sub-modular flow problems, </title> <booktitle> Proc. 4th Annual ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pp. 202-211, </pages> <year> (1993). </year>
Reference-contexts: The problem is to find a minimum-weight directed subgraph H of D, such that for each vertex v there are openly disjoint paths from r to v in the subgraph H. Gabow <ref> [10] </ref> introduced techniques for representing crossing set families based on separators, and showed that this representation scheme can be used to speed up several algorithms.
Reference: [11] <author> H. N. Gabow, M. X. Goemans and D. P. Williamson, </author> <title> An efficient approximation algorithm for the survivable network design problem, </title> <booktitle> Proc. 3rd Integer Programming and Combinatorial Optimization Conference, </booktitle> <pages> pp. 57-74, </pages> <year> (1993). </year>
Reference-contexts: 1 Introduction Connectivity is fundamental to the study of graphs and graph algorithms. Recently, many approximation algorithms for finding subgraphs that meet given connectivity requirements have been developed <ref> [1, 11, 14, 15, 19, 21, 22] </ref>. These results provide practical approximation algorithms for NP-hard network design problems, via an increased understanding of connectivity properties. In this paper we focus on uniform k-connectivity problems. The term connectivity refers to both edge and vertex connectivities, unless specified.
Reference: [12] <author> M. R. Garey and D. S. Johnson, </author> <title> Computers and intractability: A guide to the theory of NP-completeness, </title> <publisher> Freeman, </publisher> <address> San Francisco, </address> <year> 1979. </year>
Reference-contexts: The input is an integer k, a k-connected graph G = (V; E) and a weight function w on the edges of G. The goal is to find a minimum-weight k-connected subgraph of G. The problem is known to be NP-hard <ref> [12] </ref> even when the weights are all identical (i.e., the unweighted case). We present improved approximation algorithms for unweighted and weighted connectivity problems. The practical motivation to study this problem is the following. Let G denote all feasible links of a proposed communications network.
Reference: [13] <author> N. Garg, V. Santosh and A. Singla, </author> <title> Improved approximation algorithms for bicon-nected subgraphs via better lower bounding techniques, </title> <booktitle> Proc. 4th Annual ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pp. 103-111, </pages> <year> (1993). </year>
Reference-contexts: The vertex connectivity bound was subsequently improved to 1.5 by Garg, Santosh and Singla <ref> [13] </ref>. By combining the biconnectivity algorithm [19], and the sparse certificate algorithm [3] one can easily obtain a factor of 2 1=k for the k-edge-connectivity problem, but this approaches 2 as k increases.
Reference: [14] <author> M. X. Goemans, A. V. Goldberg, S. Plotkin, D. Shmoys, E. Tardos and D. P. Williamson, </author> <title> Improved approximation algorithms for network design problems, </title> <booktitle> Proc. 5th Annual ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pp. 223-232, </pages> <year> (1994). </year>
Reference-contexts: 1 Introduction Connectivity is fundamental to the study of graphs and graph algorithms. Recently, many approximation algorithms for finding subgraphs that meet given connectivity requirements have been developed <ref> [1, 11, 14, 15, 19, 21, 22] </ref>. These results provide practical approximation algorithms for NP-hard network design problems, via an increased understanding of connectivity properties. In this paper we focus on uniform k-connectivity problems. The term connectivity refers to both edge and vertex connectivities, unless specified.
Reference: [15] <author> M. X. Goemans and D. P. Williamson, </author> <title> A general approximation technique for constrained forest problems, </title> <booktitle> Proc. 3rd Annual ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pp. 307-316, </pages> <year> (1992). </year> <month> 12 </month>
Reference-contexts: 1 Introduction Connectivity is fundamental to the study of graphs and graph algorithms. Recently, many approximation algorithms for finding subgraphs that meet given connectivity requirements have been developed <ref> [1, 11, 14, 15, 19, 21, 22] </ref>. These results provide practical approximation algorithms for NP-hard network design problems, via an increased understanding of connectivity properties. In this paper we focus on uniform k-connectivity problems. The term connectivity refers to both edge and vertex connectivities, unless specified.
Reference: [16] <author> M. Grotschel, C. Monma and M. Stoer, </author> <title> Design of survivable networks, </title> <booktitle> Handbook in Operations Research and Management Science, Volume on Networks, </booktitle> <year> 1993. </year>
Reference-contexts: The problem of finding low-cost fault-tolerant networks naturally leads to the minimum-weight k-connected spanning subgraph problem. Further applications and the importance of this problem are discussed by Grotschel, Monma and Stoer <ref> [16] </ref>. 1.1 Our results Unweighted Connectivity Results: For this problem the previous best approximation factor was 2. This follows from the following two facts. Any minimal k-connected subgraph contains at most k (n k) edges [2].
Reference: [17] <author> D. Karger, </author> <title> Random sampling in cut, flow, and network design problems, </title> <booktitle> Proc. 26th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pp. 648-657, </pages> <year> (1994). </year>
Reference-contexts: The vertex connectivity bound was subsequently improved to 1.5 by Garg, Santosh and Singla [13]. By combining the biconnectivity algorithm [19], and the sparse certificate algorithm [3] one can easily obtain a factor of 2 1=k for the k-edge-connectivity problem, but this approaches 2 as k increases. Recently, Karger <ref> [17] </ref> has given an algorithm with a factor of 1 + O ( p using randomized rounding of the fractional solution obtained from the corresponding linear program, together with the idea of finding maximal forests. This algorithm is useful when k log n.
Reference: [18] <author> S. Khuller and R. Thurimella, </author> <title> Approximation algorithms for graph augmentation, </title> <journal> J. Algorithms, </journal> <volume> 14 (2), </volume> <pages> pp. 214-225, </pages> <year> (1993). </year>
Reference: [19] <author> S. Khuller and U. Vishkin, </author> <title> Biconnectivity approximations and graph carvings, </title> <journal> J. Assoc. Comput. Mach., </journal> <volume> 41 (2), </volume> <pages> pp. 214-235, </pages> <year> (1994). </year>
Reference-contexts: 1 Introduction Connectivity is fundamental to the study of graphs and graph algorithms. Recently, many approximation algorithms for finding subgraphs that meet given connectivity requirements have been developed <ref> [1, 11, 14, 15, 19, 21, 22] </ref>. These results provide practical approximation algorithms for NP-hard network design problems, via an increased understanding of connectivity properties. In this paper we focus on uniform k-connectivity problems. The term connectivity refers to both edge and vertex connectivities, unless specified. <p> Any algorithm which obtains a solution that is provably better than 2 must exploit the structure of the problem and prove better lower bounds on an optimal solution. Previously, algorithms that obtained factors less than 2 were known only for the case k = 2; Khuller and Vishkin <ref> [19] </ref> gave an approximation algorithm that achieved a factor of 1.5 for the edge-connectivity case, and 1.66 for the vertex connectivity case. The vertex connectivity bound was subsequently improved to 1.5 by Garg, Santosh and Singla [13]. By combining the biconnectivity algorithm [19], and the sparse certificate algorithm [3] one can <p> the case k = 2; Khuller and Vishkin <ref> [19] </ref> gave an approximation algorithm that achieved a factor of 1.5 for the edge-connectivity case, and 1.66 for the vertex connectivity case. The vertex connectivity bound was subsequently improved to 1.5 by Garg, Santosh and Singla [13]. By combining the biconnectivity algorithm [19], and the sparse certificate algorithm [3] one can easily obtain a factor of 2 1=k for the k-edge-connectivity problem, but this approaches 2 as k increases. <p> Weighted Connectivity Results: Here each edge of the input graph G has a nonnegative weight. For the k-edge-connected subgraph problem, an approximation factor of 2 was achieved by Khuller and Vishkin <ref> [19] </ref>. Approximation algorithms with constant performance ratios (for all k) are not known for the 2 k-vertex-connected subgraph problem. <p> Since the degree of any vertex must be at least k in a k-connected graph, any solution to the above problem must have at least dkn=2e edges. Any minimally k-edge-connected graph has at most k (n k) edges [2], and this provides a 2-approximation algorithm. Khuller and Vishkin <ref> [19] </ref> provided the 3 first approximation algorithm for k = 2 with a performance ratio less than 2. Their algorithm is based on depth-first search and has a performance guarantee of 3=2. A simple generalization of their algorithm has a performance guarantee of 2 1=k for all k. <p> Can this be improved further? 2. Can we obtain an approximation factor of 2 for the weighted k-vertex-connectivity prob lem even when the edge weights do not satisfy triangle inequality? For the edge connec tivity case, a factor 2 approximation is known <ref> [19] </ref>. Can this be improved further? Acknowledgements: We thank Randeep Bhatia, Hal Gabow, Kazuo Iwano, Michal Penn, Ramki Thurimella and Neal Young for useful discussions related to the problems and techniques discussed in this paper. 11
Reference: [20] <author> H. Nagamochi and T. Ibaraki, </author> <title> Linear time algorithms for finding a sparse k-connected spanning subgraph of a k-connected graph, </title> <journal> Algorithmica, </journal> <volume> 7 (5/6), </volume> <pages> pp. 583-596, </pages> <year> (1992). </year>
Reference-contexts: In any k-connected graph, the degree of each vertex is at least k, thus implying a lower bound of kn=2 on the number of edges in any optimal solution. Efficient algorithms for finding k-connected subgraphs with at most k (n 1) edges were given by Nagamochi and Ibaraki <ref> [20] </ref> and Cheriyan, Kao and Thurimella [3]. We observe that such approximation algorithms do not exploit any structural properties of an optimal solution, other than the trivial lower bound on the degree of each vertex. <p> The main idea behind the algorithm for finding a sparse k-edge-connected subgraph is to repeatedly find and delete a maximal spanning forest from the graph G. After this is repeated k times, the deleted edges form a k-edge-connected spanning subgraph of G <ref> [3, 20] </ref>. 3.1 The algorithm We first describe our algorithm for even values of k. The algorithm works in phases. It starts with an empty subgraph S. In each phase the edge connectivity of S is increased by 2. <p> We then show that adding back edges as we do in our algorithm increases the connectivity by 1 more. The following lemma is easily established from the sparse certificate proofs of <ref> [3, 20] </ref>. We provide its proof for the sake of completeness. Lemma 3.1 Let G = (V; E) be a graph which is at least -edge-connected. Let S be a ( 1)- edge-connected spanning subgraph of G, and let F be a maximal spanning forest in GS.
Reference: [21] <author> R. Ravi and D. P. Williamson, </author> <title> An approximation algorithm for minimum-cost vertex-connectivity problems, </title> <booktitle> Proc. 6th Annual ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pp. 332-341, </pages> <year> (1995). </year>
Reference-contexts: 1 Introduction Connectivity is fundamental to the study of graphs and graph algorithms. Recently, many approximation algorithms for finding subgraphs that meet given connectivity requirements have been developed <ref> [1, 11, 14, 15, 19, 21, 22] </ref>. These results provide practical approximation algorithms for NP-hard network design problems, via an increased understanding of connectivity properties. In this paper we focus on uniform k-connectivity problems. The term connectivity refers to both edge and vertex connectivities, unless specified. <p> Approximation algorithms with constant performance ratios (for all k) are not known for the 2 k-vertex-connected subgraph problem. The best known algorithm to find a k-vertex-connected subgraph is due to Ravi and Williamson <ref> [21] </ref> that achieves a factor of 2H (k), where H (k) is the kth Harmonic number (H (k) = 1 + 1 2 : : : + 1 Frederickson and JaJa [8] considered the problem of computing a minimum-weight bicon-nected spanning subgraph. <p> For example, the ratio is 1:66 for k = 3, 1:75 for k = 4, and 1:733 for k = 5. 4 Weighted Vertex Connectivity Recently, Ravi and Williamson <ref> [21] </ref> gave an algorithm that finds an approximation to a minimum-weight k-vertex-connected subgraph. Their algorithm works for all k, and its performance ratio is 3 for the biconnectivity problem (k = 2). <p> In other words, one can obtain a subgraph with half the required connectivity, paying at most twice the optimal cost (of twice the connectivity). A similar result (with a slightly better approximation ratio) can be derived from the work of Ravi and Williamson <ref> [21] </ref> by running their algorithm for =2 phases. Theorem 4.3 The vertex connectivity of S is at least d=2e. Proof. We give a proof by contradiction.
Reference: [22] <author> D. P. Williamson, M. X. Goemans, M. Mihail and V. V. Vazirani, </author> <title> A primal-dual approximation algorithm for generalized Steiner network problems, </title> <booktitle> Proc. 25th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pp. 708-717, </pages> <year> (1993). </year> <month> 13 </month>
Reference-contexts: 1 Introduction Connectivity is fundamental to the study of graphs and graph algorithms. Recently, many approximation algorithms for finding subgraphs that meet given connectivity requirements have been developed <ref> [1, 11, 14, 15, 19, 21, 22] </ref>. These results provide practical approximation algorithms for NP-hard network design problems, via an increased understanding of connectivity properties. In this paper we focus on uniform k-connectivity problems. The term connectivity refers to both edge and vertex connectivities, unless specified.
References-found: 22

