URL: ftp://cs.pitt.edu/ft/kalyan-pruhs1.ps.gz
Refering-URL: http://www.cs.pitt.edu/~mosse/research/theory-rt-ft.html
Root-URL: 
Title: Randomized Algorithms for Real-time Scheduling with Fault-tolerance (Preliminary Version)  
Author: Bala Kalyanasundaram Kirk Pruhs 
Abstract: We investigate randomized on-line algorithms for real-time scheduling, and establish bounds on the optimal competitive ratio as function of the importance ratio , and the ratio of longest job length to shortest job length. We show that the competitive ratio of every deterministic algorithm is (min(= log ; = log)). In contrast, we give a fi(min(ln ; ln )) bound on the optimal randomized competitive ratio. For the uniform value density case, we present a randomized on-line algorithm that is 2-competitive, and show that no randomized on-line algorithm can be better than 3 2 - competitive. We also consider the effect of processor faults. We give a randomized on-line algorithm that tolerates any number of processor faults, and has a competitive ratio of O(log log m= log log m), where m is the number of processors. We show that no randomized on-line algorithm can have a lower competitive ratio.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Baruah, G. Koren, D. Mao, B. Mishra, A. Raghunathan, L. Rosier, D. Shasha, and F. Wang, </author> <title> "On the competitiveness of on-line real-time task scheduling", </title> <journal> Journal of Real-Time Systems, </journal> <volume> 4, </volume> <pages> 124-144, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction 1.1 Problem Statement We consider randomized algorithms for on-line real-time scheduling in a multi-processor system that may experience processor faults. We model this problem in the standard way (e.g. <ref> [1, 2, 3, 4, 6] </ref>). The setting is a collection P = fP 1 ; . . .P m g of processors that see over time a collection J = fJ 1 ; . . . J n g of jobs. <p> We define the value density v i of J i to be b i x i We assume that 8i d i = r i + x i , since it was shown in <ref> [1, 2, 4] </ref> that this represents the worst case for on-line algorithms. We assume that the on-line algorithm is allowed to abandon a job J at any point in time if a more desirable job comes along. <p> We denote this ratio by . Another useful parameter will be fl = min (; ). An important special case, called the uniform value density case, of this problem is when = 1 <ref> [1, 2, 6] </ref>, In this case, under the assumption that running a job that will eventually be abandoned is not useful, the multiplicative inverse of the competitive ratio indicates the fraction of time that the processors were doing useful work. 1.2 Previous Results We first survey prior work that assumed fault-free <p> In the case that = 1 (the uniform density case), or that = 1, the optimal competitive ratio for deterministic algorithms is 4. A 4-competitive algorithm for the case = 1 is given in [2, 6], and the matching lower bound is given in 2 <ref> [1, 2, 6] </ref>. Tight bounds for the case = 1 are given in [6]. In [1, 2, 4] it was shown that no deterministic algorithm can have a competitive ratio less than (1 + p ) 2 . <p> A 4-competitive algorithm for the case = 1 is given in [2, 6], and the matching lower bound is given in 2 [1, 2, 6]. Tight bounds for the case = 1 are given in [6]. In <ref> [1, 2, 4] </ref> it was shown that no deterministic algorithm can have a competitive ratio less than (1 + p ) 2 . In [4] a deterministic algorithm with this competitive ratio is given under the assumption that is known in advance. <p> Additional results can be found in [6] for the case that all jobs of the same length have the same benefit, and the function that maps lengths to benefits has some nice properties, e.g. is convex. In <ref> [1] </ref> a deterministic 2-competitive algorithm is given for the uniform density case when m = 2. They also show that this bound is tight for deterministic algorithms. <p> We also show that no randomized algorithm can be better than 3=2-competitive when either = 1 or = 1. In section 3, we show that for m = 1 the competitive ratio of every deterministic algorithm is (fl= log fl). Note that the () bounds from <ref> [1, 2] </ref> do not imply this result because the required in their construction is much too large. The deterministic 4-competitive algorithms from [1, 6] can be shown to be O (fl)-competitive (we omit the proof in this version). <p> In section 3, we show that for m = 1 the competitive ratio of every deterministic algorithm is (fl= log fl). Note that the () bounds from [1, 2] do not imply this result because the required in their construction is much too large. The deterministic 4-competitive algorithms from <ref> [1, 6] </ref> can be shown to be O (fl)-competitive (we omit the proof in this version). We present a randomized algorithm combine that has a competitive ratio of 2e ln fl + O (1). The algorithm combine assumes that and are known in advance. <p> These results more fully reveal the symmetric role of and that was hinted at in previous papers. 2 Faultless Uniform Value Density Case 2.1 Upper Bounds The algorithm half-greedy was motivated by the two processor algorithm given in <ref> [1] </ref>. Algorithm half-greedy: We first give the deterministic version of half-greedy. Let k = bm=2c. At any point in time we will classify up to k processors as primary, and up to k processors as secondary. The classification of a processor may change over time.
Reference: [2] <author> S. Baruah, G. Koren, B. Mishra, A. Raghunathan, L. Rosier, and D. Shasha, </author> <title> "On-line scheduling in the presence of overload", </title> <booktitle> IEEE FOCS, </booktitle> <pages> 101-110, </pages> <year> 1991. </year> <month> 9 </month>
Reference-contexts: 1 Introduction 1.1 Problem Statement We consider randomized algorithms for on-line real-time scheduling in a multi-processor system that may experience processor faults. We model this problem in the standard way (e.g. <ref> [1, 2, 3, 4, 6] </ref>). The setting is a collection P = fP 1 ; . . .P m g of processors that see over time a collection J = fJ 1 ; . . . J n g of jobs. <p> We define the value density v i of J i to be b i x i We assume that 8i d i = r i + x i , since it was shown in <ref> [1, 2, 4] </ref> that this represents the worst case for on-line algorithms. We assume that the on-line algorithm is allowed to abandon a job J at any point in time if a more desirable job comes along. <p> We denote this ratio by . Another useful parameter will be fl = min (; ). An important special case, called the uniform value density case, of this problem is when = 1 <ref> [1, 2, 6] </ref>, In this case, under the assumption that running a job that will eventually be abandoned is not useful, the multiplicative inverse of the competitive ratio indicates the fraction of time that the processors were doing useful work. 1.2 Previous Results We first survey prior work that assumed fault-free <p> In the case that = 1 (the uniform density case), or that = 1, the optimal competitive ratio for deterministic algorithms is 4. A 4-competitive algorithm for the case = 1 is given in <ref> [2, 6] </ref>, and the matching lower bound is given in 2 [1, 2, 6]. Tight bounds for the case = 1 are given in [6]. In [1, 2, 4] it was shown that no deterministic algorithm can have a competitive ratio less than (1 + p ) 2 . <p> In the case that = 1 (the uniform density case), or that = 1, the optimal competitive ratio for deterministic algorithms is 4. A 4-competitive algorithm for the case = 1 is given in [2, 6], and the matching lower bound is given in 2 <ref> [1, 2, 6] </ref>. Tight bounds for the case = 1 are given in [6]. In [1, 2, 4] it was shown that no deterministic algorithm can have a competitive ratio less than (1 + p ) 2 . <p> A 4-competitive algorithm for the case = 1 is given in [2, 6], and the matching lower bound is given in 2 [1, 2, 6]. Tight bounds for the case = 1 are given in [6]. In <ref> [1, 2, 4] </ref> it was shown that no deterministic algorithm can have a competitive ratio less than (1 + p ) 2 . In [4] a deterministic algorithm with this competitive ratio is given under the assumption that is known in advance. <p> We also show that no randomized algorithm can be better than 3=2-competitive when either = 1 or = 1. In section 3, we show that for m = 1 the competitive ratio of every deterministic algorithm is (fl= log fl). Note that the () bounds from <ref> [1, 2] </ref> do not imply this result because the required in their construction is much too large. The deterministic 4-competitive algorithms from [1, 6] can be shown to be O (fl)-competitive (we omit the proof in this version).
Reference: [3] <author> B. Kalyanasundaram, and K. Pruhs, </author> <title> "Fault-tolerant scheduling", </title> <booktitle> STOC, </booktitle> <pages> 115-124, </pages> <year> 1994. </year>
Reference-contexts: 1 Introduction 1.1 Problem Statement We consider randomized algorithms for on-line real-time scheduling in a multi-processor system that may experience processor faults. We model this problem in the standard way (e.g. <ref> [1, 2, 3, 4, 6] </ref>). The setting is a collection P = fP 1 ; . . .P m g of processors that see over time a collection J = fJ 1 ; . . . J n g of jobs. <p> Under these assumptions, [5] presents a randomized algorithm that is O (log 1+* )-competitive. need not be known in advance. Even if is known in advance, they gave an (log ) lower bound on the competitive ratio of any randomized algorithm. In <ref> [3] </ref> fault-tolerant scheduling of jobs without deadlines is studied. 1.3 Summary of Results This paper extends previous results on on-line real-time scheduling in three ways. It examines the joint effect of and on the competitive ratio, it considers randomized algorithms, and it determines the effect of faults.
Reference: [4] <author> G. Koren, and D. Shasha, </author> <title> "D over :An optimal on-line scheduling algorithm for overloaded real-time systems", </title> <booktitle> IEEE Real-time Systems Symposium, </booktitle> <pages> 290-299, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction 1.1 Problem Statement We consider randomized algorithms for on-line real-time scheduling in a multi-processor system that may experience processor faults. We model this problem in the standard way (e.g. <ref> [1, 2, 3, 4, 6] </ref>). The setting is a collection P = fP 1 ; . . .P m g of processors that see over time a collection J = fJ 1 ; . . . J n g of jobs. <p> We define the value density v i of J i to be b i x i We assume that 8i d i = r i + x i , since it was shown in <ref> [1, 2, 4] </ref> that this represents the worst case for on-line algorithms. We assume that the on-line algorithm is allowed to abandon a job J at any point in time if a more desirable job comes along. <p> A 4-competitive algorithm for the case = 1 is given in [2, 6], and the matching lower bound is given in 2 [1, 2, 6]. Tight bounds for the case = 1 are given in [6]. In <ref> [1, 2, 4] </ref> it was shown that no deterministic algorithm can have a competitive ratio less than (1 + p ) 2 . In [4] a deterministic algorithm with this competitive ratio is given under the assumption that is known in advance. <p> Tight bounds for the case = 1 are given in [6]. In [1, 2, 4] it was shown that no deterministic algorithm can have a competitive ratio less than (1 + p ) 2 . In <ref> [4] </ref> a deterministic algorithm with this competitive ratio is given under the assumption that is known in advance.
Reference: [5] <author> R. Lipton, and A. Tomkins, </author> <title> "Online interval scheduling", </title> <booktitle> SODA, </booktitle> <pages> 302-311, </pages> <year> 1994. </year>
Reference-contexts: In [1] a deterministic 2-competitive algorithm is given for the uniform density case when m = 2. They also show that this bound is tight for deterministic algorithms. In <ref> [5] </ref> a variant of the uniform density case, in which a processor may not abandon a job once it has begun that job, is studied. Under these assumptions, [5] presents a randomized algorithm that is O (log 1+* )-competitive. need not be known in advance. <p> They also show that this bound is tight for deterministic algorithms. In <ref> [5] </ref> a variant of the uniform density case, in which a processor may not abandon a job once it has begun that job, is studied. Under these assumptions, [5] presents a randomized algorithm that is O (log 1+* )-competitive. need not be known in advance. Even if is known in advance, they gave an (log ) lower bound on the competitive ratio of any randomized algorithm.
Reference: [6] <author> G. Woeginger, </author> <title> "On-line scheduling of jobs with fixed start and end time", </title> <note> to appear, Theoretical Computer Science. 10 </note>
Reference-contexts: 1 Introduction 1.1 Problem Statement We consider randomized algorithms for on-line real-time scheduling in a multi-processor system that may experience processor faults. We model this problem in the standard way (e.g. <ref> [1, 2, 3, 4, 6] </ref>). The setting is a collection P = fP 1 ; . . .P m g of processors that see over time a collection J = fJ 1 ; . . . J n g of jobs. <p> We denote this ratio by . Another useful parameter will be fl = min (; ). An important special case, called the uniform value density case, of this problem is when = 1 <ref> [1, 2, 6] </ref>, In this case, under the assumption that running a job that will eventually be abandoned is not useful, the multiplicative inverse of the competitive ratio indicates the fraction of time that the processors were doing useful work. 1.2 Previous Results We first survey prior work that assumed fault-free <p> In the case that = 1 (the uniform density case), or that = 1, the optimal competitive ratio for deterministic algorithms is 4. A 4-competitive algorithm for the case = 1 is given in <ref> [2, 6] </ref>, and the matching lower bound is given in 2 [1, 2, 6]. Tight bounds for the case = 1 are given in [6]. In [1, 2, 4] it was shown that no deterministic algorithm can have a competitive ratio less than (1 + p ) 2 . <p> In the case that = 1 (the uniform density case), or that = 1, the optimal competitive ratio for deterministic algorithms is 4. A 4-competitive algorithm for the case = 1 is given in [2, 6], and the matching lower bound is given in 2 <ref> [1, 2, 6] </ref>. Tight bounds for the case = 1 are given in [6]. In [1, 2, 4] it was shown that no deterministic algorithm can have a competitive ratio less than (1 + p ) 2 . <p> A 4-competitive algorithm for the case = 1 is given in [2, 6], and the matching lower bound is given in 2 [1, 2, 6]. Tight bounds for the case = 1 are given in <ref> [6] </ref>. In [1, 2, 4] it was shown that no deterministic algorithm can have a competitive ratio less than (1 + p ) 2 . In [4] a deterministic algorithm with this competitive ratio is given under the assumption that is known in advance. Additional results can be found in [6] <p> <ref> [6] </ref>. In [1, 2, 4] it was shown that no deterministic algorithm can have a competitive ratio less than (1 + p ) 2 . In [4] a deterministic algorithm with this competitive ratio is given under the assumption that is known in advance. Additional results can be found in [6] for the case that all jobs of the same length have the same benefit, and the function that maps lengths to benefits has some nice properties, e.g. is convex. In [1] a deterministic 2-competitive algorithm is given for the uniform density case when m = 2. <p> In section 3, we show that for m = 1 the competitive ratio of every deterministic algorithm is (fl= log fl). Note that the () bounds from [1, 2] do not imply this result because the required in their construction is much too large. The deterministic 4-competitive algorithms from <ref> [1, 6] </ref> can be shown to be O (fl)-competitive (we omit the proof in this version). We present a randomized algorithm combine that has a competitive ratio of 2e ln fl + O (1). The algorithm combine assumes that and are known in advance.
References-found: 6

