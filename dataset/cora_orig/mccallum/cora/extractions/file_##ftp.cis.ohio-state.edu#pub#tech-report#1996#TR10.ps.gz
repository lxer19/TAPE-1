URL: file://ftp.cis.ohio-state.edu/pub/tech-report/1996/TR10.ps.gz
Refering-URL: ftp://ftp.cis.ohio-state.edu/pub/tech-report/TRList.html
Root-URL: 
Email: -law, yagel-@cis.ohio-state.edu  
Title: The Active-Ray Approach to Rendering on Distributed Memory Multiprocessors  
Author: Asish Law and Roni Yagel 
Keyword: parallel rendering, distributed systems, CRAY T3D, ray tracing, volume rendering.  
Address: 2036 Neil Avenue, Columbus, OH 43210-1277 USA  
Affiliation: Department of Computer and Information Science The Ohio State University  
Abstract: Object dataow is a popular approach used in parallel rendering. The data representing the 3D scene is statically distributed among processors and objects are fetched and cached only on demand. Most previous methods were implemented on shared memory architectures and exploited only object-space coherency to reduce cache misses. In this paper, we propose an efficient model for object dataow on distributed memory machines. The Active Ray Tracing algorithm is introduced and its ray-stacking mechanism is used to support latency hiding by postponing computation on inactive rays. We also optimize memory usage by letting objects migrate and replicate at different processors rather than the common static assignments. Our cache-only-memory approach uses a distributed-directory scheme to trace the location of objects at other nodes. A mechanism to minimize network congestion was implemented which optimizes channel utilization. Unlike previous methods, our approach can benefit from temporal coherence and effectively eliminates communication costs in successive frames. We implemented a volume ray casting instance of the algorithm on the Cray T3D and achieved higher efficiency and scalability than existing algorithms. We achieve interactive frame rates of 20Hz for 128 3 volume, and 3Hz for 256 3 volume on 128 processors. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> M.B. Amin, A. Grama, and V. Singh, </author> <title> Fast Volume Rendering Using an Efficient, Scalable Parallel Formulation of the Shear-Warp Algorithm, </title> <booktitle> Proceedings 1995 Parallel Rendering Symposium, ACM Pres, </booktitle> <address> Atlanta GA, </address> <month> October </month> <year> 1995, </year> <pages> pp. 15-22. </pages>
Reference-contexts: The graphs in Figure 5 demonstrate the excellent speedup achieved with our algorithm. The fastest known algorithms achieve 75% speedup on 16 processors [16] or 50% and 30% on 64 processors and 128 processors <ref> [1] </ref>, respectively. Our implementation surpasses these as well as all other recently reported algorithms.
Reference: 2. <author> D. Badouel, K. Bouatouch, T. Priol. </author> <title> Ray Tracing on Distributed Memory Parallel Computers: Strategies for Distributing Computations and Data, </title> <booktitle> in SIGGRAPH 90 Parallel Algorithms and Architecture for 3D Image Generation Course Notes, </booktitle> <pages> pp. 185-198. </pages>
Reference: 3. <author> H. Burkhardt III, S. Frank, B. Knobe, and J. Rothnie. </author> <title> Overview of the KSR1 Computer System, </title> <type> Technical Report KSR-TR-9202001, </type> <institution> Kendall Square Research, </institution> <address> Boston, Febru ary 1992. </address>
Reference: 4. <author> J.G. Cleary, B. Wyvill, G.M. Birtwistle, R. Vatti. </author> <title> Multiprocessor Ray Tracing, </title> <type> Research Report 83/128/17, </type> <institution> University of Calgary, </institution> <month> October </month> <year> 1983. </year>
Reference: 5. <author> B. Corrie, P. Mackerras. </author> <title> Parallel Volume Rendering and Data Coherence, </title> <booktitle> Proceedings of Parallel Rendering Sympo sium, </booktitle> <month> October </month> <year> 1993, </year> <pages> pp. 23-26. </pages>
Reference: 6. <author> T. von Eicken, D.E. Culler, S.C. Goldstein, K.E. Schauser. </author> <title> Active Messages: a Mechanism for Integrated Communication and Computation, </title> <booktitle> Proceedings of the 19th International Symposium on Computer Architecture, </booktitle> <address> Gold Coast, Australia, </address> <month> May </month> <year> 1992, </year> <pages> pp. 256-266. </pages>
Reference-contexts: DINV: Upon receiving this message, the processor puts back the cell at the end of the LRU list. The different types of messages described above are handled similarly to polling-based Active Messages <ref> [6] </ref>. While proceeding from one ray to the next in the stack, buffers are polled to check for any pending messages using non-blocking probes. The messages, if any, are received and appropriate action taken immediately. Home nodes forward the requests for cells to the appropriate nodes.
Reference: 7. <author> M. Dippe, J. Swensen. </author> <title> An Adaptive Subdivision Algorithm and Parallel Architecture for Realistic Image Synthesis. </title> <booktitle> Computer Graphics 18(3) </booktitle> <pages> 149-158, </pages> <month> July </month> <year> 1984. </year>
Reference: 8. <author> J.D. Foley, A. van Dam, S.K. Feiner, and J.F. Hughes, </author> <title> Computer Graphics, Principles and Practice, second edition, </title> <publisher> Addision Wesley, </publisher> <year> 1992. </year>
Reference-contexts: If the ray that passes through does not intersect any object, is set to some background intensity. If that ray intersects some object O, then is assigned the intensity of Os surface at the intersection point. This is typically computed by some rendition of the Phong Illumination Equation <ref> [8] </ref>: (1) where: coordinates of the 3D point that we illuminate. ambient light intensity. diffuse color of object. number of light sources. ambient, diffuse, specular, and transmis sion coefficients. light-source i occlusion factor. light-source i attenuation factor. light-source i intensity. surface normal at . direction to light-source i from . half-way
Reference: 9. <author> N. Green, M. Kass, and G. Miller, </author> <title> Hierarchical Z-Buffer Visibility, </title> <booktitle> Proceedings of SIGGRAPH93, </booktitle> <pages> pp. 231-240. </pages>
Reference-contexts: Such animations have prevalent applications in the field of realistic rendering, science and medicine. For example, medical data obtained from MRI (Magnetic Resonance Imaging) act as good sources for volume visualization [13]. In another example, realistic rendering of architectural models may involve the processing of millions of polygons <ref> [9] </ref>. Due to the enormity of the data and consequently, the time taken to generate each image, it often becomes infeasible to employ a uniprocessor for the task of rendering numerous animation frames.
Reference: 10. <author> S.A. Green, </author> <title> D.J. Paddon. Exploiting Coherence for Multiprocessor Ray Tracing, </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 9(6) </volume> <pages> 12-26, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: Discussion Object-dataow approaches are known to take advantage of object space coherency to reduce the number of misses <ref> [10] </ref>. For sufficient local memory sizes, this helps to reduce the amount of communication between processors compared with ray-dataow approaches. The hit ratio can further be increased if frame-to-frame coherence is also exploited. The hit ratio directly effects the overheads incurred by the system.
Reference: 11. <author> E. Hagersten, S. Haridi, D.H.D. Warren. </author> <title> The Cache-Coherence Protocol of the Data Diffusion Machine, </title> <editor> Michel Dubois and Shreekant Thakkar, eds, </editor> <title> Cache and Interconnect Architectures in Multiprocessors. </title> <publisher> Kluwer Academic Publish ers, </publisher> <year> 1990. </year>
Reference: 12. <author> T. Joe, J.L. Hennessy. </author> <title> Evaluating the Memory Overhead Required for COMA Architectures, </title> <booktitle> IEEE Computer, </booktitle> <month> Sep tember </month> <year> 1994, </year> <pages> pp. 82-93. </pages>
Reference: 13. <author> A. Kaufman. ed., </author> <title> Volume Visualization, </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1991. </year>
Reference-contexts: Such animations have prevalent applications in the field of realistic rendering, science and medicine. For example, medical data obtained from MRI (Magnetic Resonance Imaging) act as good sources for volume visualization <ref> [13] </ref>. In another example, realistic rendering of architectural models may involve the processing of millions of polygons [9]. Due to the enormity of the data and consequently, the time taken to generate each image, it often becomes infeasible to employ a uniprocessor for the task of rendering numerous animation frames.
Reference: 14. <author> H. Kobayashi, H. Kubota, S. Horiguchi, T. Nakamura. </author> <title> Effective Parallel Processing for Synthesizing Continuous Images, </title> <booktitle> in New Advances in Computer Graphics, Proceed ings of CGI 89, </booktitle> <pages> pp. 343-352. </pages>
Reference: 15. <author> H. Kobayashi, S. Nishimura, H. Kubota, T. Nakamura, Y. Shegei. </author> <title> Load Balancing Strategies for a Parallel Ray-Tracing System Based on Constant Subdivision, </title> <booktitle> The Visual Computer, </booktitle> <year> 1988, </year> <pages> pp. 197-209. </pages>
Reference: 16. <author> P. Lacroute, </author> <title> Real-Time Volume Rendering on Shared Memory Multiprocessors Using the Shear-Warp Factorization, </title> <booktitle> Proceedings 1995 Parallel Rendering Symposium, ACM Pres, </booktitle> <address> Atlanta GA, </address> <month> October </month> <year> 1995, </year> <pages> pp. 15-22. </pages>
Reference-contexts: The graphs in Figure 5 demonstrate the excellent speedup achieved with our algorithm. The fastest known algorithms achieve 75% speedup on 16 processors <ref> [16] </ref> or 50% and 30% on 64 processors and 128 processors [1], respectively. Our implementation surpasses these as well as all other recently reported algorithms.
Reference: 17. <author> A. Law and R. Yagel. CellFlow: </author> <title> A Parallel Rendering Scheme for Distributed Memory Architectures, </title> <booktitle> Proceedings International Symposium on Parallel and Distributed Processing Techniques and Applications, </booktitle> <address> Athens, Georgia, </address> <month> November </month> <year> 1995. </year> <pages> pp. 3-12. </pages>
Reference-contexts: The processors in the middle of the linear array tend to spend almost double the time for rendering than the processors on the periphery of the array. We resort to a static block-cyclic screen distribution to attain considerable load-balancing among processors. Results <ref> [17] </ref> show that the amount of computational and communicational load balancing increases with increasing cyclicity for various scenes. 5.2 Network Congestion Network congestion is reduced by forwarding the cell request to the processor closest to the requesting processor containing a copy of the requested cell.
Reference: 18. <author> M. Levoy. </author> <title> Display of Surfaces from Volume Data, </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 8(5) </volume> <pages> 29-37, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: Each voxel is characterized by its position in the 3D grid, and may have associated with it a color and opacity. Some sources of such voxel-based volumes are MRI, confocal microscopy, 3D simulated data, and synthetic 3D models. During rendering <ref> [18] </ref>, rays are cast into the object space through the screen pixels. For each ray, the scene objects are intersected with the ray. In the case of volume rendering, the volume is sampled at regular intervals along the ray.
Reference: 19. <author> J. Nieh, and M. Levoy, </author> <title> Volume Rendering on Scalable Shared-Memory MIMD Architecture, </title> <booktitle> Proceedings of 1992 Workshop on Volume Visualization, </booktitle> <address> Boston, MA, </address> <pages> pp. 17-24. </pages>
Reference: 20. <author> P. Stenstrom, T. Joe, and A. Gupta. </author> <title> Comparative Performance Evaluation of Cache-Coherent NUMA and COMA Architectures, </title> <booktitle> Proceedings of the 19th Annual International Symposium on Computer Architecture, </booktitle> <volume> 20(2) </volume> <pages> 80-91, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: Although the memory management mechanism in our algorithm resembles COMA (Cache Only Memory Architecture) machines [3][11], it does not use their hierarchical organization but rather relies on a at arrangement, thus making it more suitable for implementation on any underlying topology, similar to <ref> [20] </ref>. The paper is organized as follows: in the next section, we give a brief introduction to 3D rendering, and look at different approaches taken to parallelize it. In Section 3, we describe in detail our object-migration parallel 3D rendering algorithm.
References-found: 20

