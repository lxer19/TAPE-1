URL: http://www.cis.ohio-state.edu/~hartman/PUBLIC/papers/pragmatic-compressed.ps.gz
Refering-URL: http://www.cis.ohio-state.edu/~hartman/publications.html
Root-URL: 
Email: hartman@cs.utexas.edu  
Title: Pragmatic, Empirical Program Understanding  
Author: John Hartman 
Address: 8413 Cockney Dr. Austin, TX 78748  
Affiliation: Software Understanding  
Abstract: We present a practical method for automatic control concept recognition in large, unstructured imperative programs. Control concepts are abstract notions about interactions between control flow, data flow, and computation, eg. "read-process loop". They are recognized by comparing a language independent abstract program representation against standard implementation plans. Recognition is efficient and scalable. As an example of the method's applications, we describe how recognized control concepts are used to perform Cobol restructuring with quality not possible with existing syntactic methods. We also describe an experiment demonstrating the method's use for empirical studies of programs and planfulness at the conceptual level. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Brenda S. Baker. </author> <title> An algorithm for structuring flowgraphs. </title> <journal> Journal of the ACM, </journal> <volume> 24(1), </volume> <month> Jan-uary </month> <year> 1977. </year>
Reference: [2] <author> Victor Basili and Harlan Mills. </author> <title> Understanding and documenting programs. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 8(3), </volume> <month> May </month> <year> 1982. </year>
Reference: [3] <author> C. Bohm and G. Jacopini. </author> <title> Flow diagrams, Tur-ing machines and languages with only two formation rules. </title> <journal> Communications of the ACM, </journal> <volume> 9 </volume> <pages> 366-371, </pages> <month> May </month> <year> 1966. </year>
Reference: [4] <author> Eric Bush. </author> <title> The automatic restructuring of Cobol. </title> <booktitle> In Proceedings of the Conference on Software Maintenance, </booktitle> <pages> pages 35-41. </pages> <publisher> IEEE, IEEE Computer Society Press, </publisher> <month> November 11-13 </month> <year> 1985. </year>
Reference: [5] <author> R. Emmett Carlyle. </author> <title> Can AI save COBOL? Datamation, </title> <month> September 15 </month> <year> 1985. </year>
Reference: [6] <author> Federal Software Management Support Center. </author> <title> Parallel test and evaluation of a COBOL restructuring tool. </title> <type> Technical report, U.S. </type> <institution> General Services Administration, </institution> <month> September </month> <year> 1987. </year>
Reference: [7] <author> E.W. Dijsktra. </author> <title> GO TO Statement considered harmful. </title> <journal> Communications of the ACM, </journal> <volume> 11(3) </volume> <pages> 147-148, </pages> <month> March </month> <year> 1968. </year>
Reference: [8] <author> John Hartman. </author> <title> Automatic control understanding for natural programs. </title> <type> Ph.D. Thesis AI 91-161, </type> <institution> Artificial Intelligence Laboratory, Dept. of Computer Sciences, The University of Texas at Austin, Austin, </institution> <address> TX 78712-1188., </address> <month> May </month> <year> 1991. </year> <title> To order send $20 to: AI Lab Publications, </title> <type> (512) 471-7316, Phuong Hai Pham, </type> <institution> phuong@cs.utexas.edu. </institution>
Reference-contexts: In practice it produces program parts that are small and correspond with control plans. Note particularly that proper decomposition is a priori decomposition performed once, before recognition, 1 This paper is similar to [9], but doesn't emphasize decomposition. See <ref> [8] </ref> for a complete description of the method and its implementation, evaluation, applications and implications. using simple, knowledge-free analysis. Because it is linear and total, the number of sub-hmodels, and therefore the number of stimp comparisons to cover a program, grows linearly with program size. loop in PAYDAY.
Reference: [9] <author> John Hartman. </author> <title> Understanding natural programs using proper decomposition. </title> <booktitle> In 13TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING ICSE-13. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> May 13-16 </month> <year> 1991. </year>
Reference-contexts: In practice it produces program parts that are small and correspond with control plans. Note particularly that proper decomposition is a priori decomposition performed once, before recognition, 1 This paper is similar to <ref> [9] </ref>, but doesn't emphasize decomposition. See [8] for a complete description of the method and its implementation, evaluation, applications and implications. using simple, knowledge-free analysis.
Reference: [10] <author> Philip A. Hausler, Mark G. Pleszkoch, Richard C. Linger, and Alan R. Hevner. </author> <title> Using function abstraction to understand program behavior. </title> <journal> IEEE Software, </journal> <pages> pages 55-83, </pages> <month> Jan-uary </month> <year> 1990. </year>
Reference: [11] <author> IBM. </author> <title> Cobol structuring facility Re-Engineering concepts. </title> <type> Technical Report SC34-4079-0, </type> <month> January </month> <year> 1986. </year>
Reference: [12] <author> S. Letovsky and E. Soloway. </author> <title> Delocalized plans and program comprehension. </title> <journal> IEEE Software, </journal> <volume> 3(3) </volume> <pages> 41-49, </pages> <year> 1986. </year>
Reference: [13] <author> Richard C. Linger, Harlan D. Mills, and Bernard I. </author> <title> Witt. STRUCTURED PROGRAMMING: THEORY AND PRACTICE. </title> <publisher> Addison-Wesley, </publisher> <year> 1979. </year>
Reference: [14] <author> Bobbie Ann Fredsall Othmer. </author> <title> RESTRUCTURING COBOL PROGRAMS TO IMPROVE READABILITY. </title> <type> PhD thesis, </type> <institution> Rutgers University, </institution> <year> 1981. </year>
Reference: [15] <author> Michael R. Paige. </author> <title> On partitioning program graphs. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 3(6), </volume> <month> November </month> <year> 1977. </year>
Reference: [16] <author> Lyle Ramshaw. </author> <title> Eliminating GOTO's while preserving program structure. </title> <journal> Journal of the ACM, </journal> <volume> 35(4), </volume> <month> October </month> <year> 1988. </year>
Reference: [17] <author> Charles Rich. </author> <title> Inspection methods in programming. </title> <type> Technical Report MIT/AI/TR-604, </type> <institution> MIT Artificial Intelligence Laboratory, </institution> <month> June </month> <year> 1981. </year> <type> PhD Thesis. </type>
Reference: [18] <author> Frank Rubin. </author> <title> "GOTO considered harmful" considered harmful. </title> <journal> Communications of the ACM, </journal> <volume> 30(3) </volume> <pages> 197-196, </pages> <month> March </month> <year> 1987. </year> <note> ACM Forum, and correspondence in 30:5, 30:6, 30:7, 30:8, 30:10, 30:11. </note>
Reference: [19] <author> Elliot Soloway, Kate Ehrlich, and Jeffrey Bonar. </author> <title> Cognitive strategies and looping concepts: An empirical study. </title> <journal> Communications of the ACM, </journal> <volume> 26(11), </volume> <month> November </month> <year> 1983. </year>
Reference: [20] <author> Elliot Soloway, Jeanne Pinto, Stan Letovsky, David Littman, and Robin Lampert. </author> <title> Designing documentation to compensate for delo-calized plans. </title> <journal> Communications of the ACM, </journal> <volume> 31(11) </volume> <pages> 1259-1267, </pages> <month> November </month> <year> 1988. </year>
Reference: [21] <author> Richard C. Waters. </author> <title> A method for automatically analyzing programs. </title> <booktitle> In International Joint Conference on Artificial Intelligence, </booktitle> <year> 1979. </year>
Reference: [22] <author> Mark Weiser. </author> <title> Program slicing. </title> <booktitle> In 5th Int. Conf. on Software Engineering, </booktitle> <month> March </month> <year> 1981. </year>
References-found: 22

