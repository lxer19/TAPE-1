URL: http://www.cs.umd.edu/projects/hermes/publications/postscripts/folding.ps
Refering-URL: http://www.cs.umd.edu/projects/hermes/publications/abstracts/folding.html
Root-URL: 
Email: sibel@cs.umd.edu  qian@csl.sri.com  
Title: Using Views to Answer Queries with Contraction and Relaxation Options  
Author: Sibel Adal Xiaolei Qian 
Affiliation: Department of Computer Science University of Maryland  Computer Science Laboratory SRI International  
Abstract: In this paper, we address the problem of deciding if and how a user query can be answered using a set of pre-defined views. The views may correspond to materialized views, cached results or queries that can be posed to external information sources. Even though some views may have overlapping data definitions, they may correspond to data from different information systems. We develop an algorithm that takes as input a conjunctive user query and a set of conjunctive view definitions to generate as output all possible foldings of it, i.e ways of rewriting the query using these views. Our algorithm provides the following options (when both queries and views may contain built-in predicates): (1) foldings that provide the same answers as the original query, i.e. equivalent foldings, (2) foldings that provide a subset of the answers to the original query, i.e. contracted foldings, (3) foldings as in 1 and 2 above for relaxations of the query. Similarly, foldings may use views partially or they may consist of views only. In addition, we explore the completeness properties of our algorithm and prove that it generates all possible foldings for different cases. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abiteboul, R. Hull, and V. Vianu. </author> <title> Foundations of Databases. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: Query containment is a special case of query folding. To determine whether a query is contained in another query, we could try to determine instead whether the second query can be answered using a view defined by the first query. It is shown to be undecidable for relational queries <ref> [1] </ref> and Datalog queries [18]. The problem is NP-complete for conjunctive queries [4], unions of conjunctive queries [17], and conjunctive queries under functional dependencies [2, 3].
Reference: [2] <author> A. V. Aho, Y. Sagiv, and J. D. Ullman. </author> <title> Efficient optimization of a class of relational expressions. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 4(4) </volume> <pages> 435-454, </pages> <month> December </month> <year> 1979. </year> <title> 1 Notice that these statements are more general than the site descriptions in [12]. </title> <type> 21 </type>
Reference-contexts: It is shown to be undecidable for relational queries [1] and Datalog queries [18]. The problem is NP-complete for conjunctive queries [4], unions of conjunctive queries [17], and conjunctive queries under functional dependencies <ref> [2, 3] </ref>. Query containment is p 2 -complete for conjunctive queries with built-in predicates [21], and NP-complete for the subclasses of such queries called the left and right semiinterval queries [11].
Reference: [3] <author> A. V. Aho, Y. Sagiv, and J. D. Ullman. </author> <title> Equivalence of relational expressions. </title> <journal> SIAM Journal of Computing, </journal> <volume> 8(2) </volume> <pages> 218-246, </pages> <year> 1979. </year>
Reference-contexts: It is shown to be undecidable for relational queries [1] and Datalog queries [18]. The problem is NP-complete for conjunctive queries [4], unions of conjunctive queries [17], and conjunctive queries under functional dependencies <ref> [2, 3] </ref>. Query containment is p 2 -complete for conjunctive queries with built-in predicates [21], and NP-complete for the subclasses of such queries called the left and right semiinterval queries [11].
Reference: [4] <author> A. K. Chandra and P. M. Merlin. </author> <title> Optimal implementation of conjunctive queries in relational databases. </title> <booktitle> In Proceedings of the Ninth ACM Symposium on Theory of Computing, </booktitle> <pages> pages 77-90, </pages> <year> 1977. </year>
Reference-contexts: It is shown to be undecidable for relational queries [1] and Datalog queries [18]. The problem is NP-complete for conjunctive queries <ref> [4] </ref>, unions of conjunctive queries [17], and conjunctive queries under functional dependencies [2, 3]. Query containment is p 2 -complete for conjunctive queries with built-in predicates [21], and NP-complete for the subclasses of such queries called the left and right semiinterval queries [11].
Reference: [5] <author> S. Chaudhuri, R. Krishnamurthy, S. Potamianos, and K. Shim. </author> <title> Optimizing queries with materialized views. </title> <booktitle> In Proceedings of the Eleventh International Conference on Data Engineering, </booktitle> <pages> pages 190-200, </pages> <year> 1995. </year>
Reference-contexts: In any case, views may provide the answers faster than a database or they may be the only way to access some information requested by the user as in the case of non-proprietary data sources. Most of the research in this area <ref> [5, 22, 13] </ref> has concentrated on generating equivalent queries, i.e. queries that provide the same answers as the user query, but access views instead of the requested tables. <p> We also show the utility and completeness of our algorithm for checking containment. Folding algorithms for conjunctive queries and views with built-in predicates have been developed in <ref> [5, 19, 22] </ref>. The algorithms employed all use exhaustive search strategies that are exponential-time in complexity, and do not guarantee to find all foldings. The algorithms in [19, 22] compute only foldings that depend solely on the views. <p> This is referred to as the safety condition in <ref> [5] </ref>. Most of the algorithms proposed in the past (e.g., [14]) first generate rewritings and then select the executable ones, generally with the help of containment checks which introduces an extra component of complexity to the problem. <p> Query folding has obvious applications in centralized databases. For example, databases often maintain materialized views. A query then can be answered by accessing views instead of base relations if the query can be folded using the views <ref> [5] </ref>. In multiple query answering, the result of a query can be used to at least partially answer another query if the second query can be folded using the first one. Query folding is even more important in a distributed environment.
Reference: [6] <author> S. Chaudhuri and M. Y. Vardi. </author> <title> Optimization of real conjunctive queries. </title> <booktitle> In Proceedings of the Twelfth ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 59-70, </pages> <year> 1993. </year>
Reference-contexts: The complexity of query containment is also studied for conjunctive queries under functional and inclusion dependencies [9] and more general constraints [7], and under the bag semantics <ref> [6, 8] </ref>. Query folding is recently shown to be NP-complete for conjunctive queries and views [13], and for conjunctive queries and views with binding patterns [16]. The problem is p 2 -complete for conjunctive queries and views with built-in predicates [13].
Reference: [7] <author> G. Dong and J. Su. </author> <title> Conjunctive query containment with respect to views and constraints. </title> <journal> Information Processing Letters, </journal> <year> 1995. </year>
Reference-contexts: The complexity of query containment is also studied for conjunctive queries under functional and inclusion dependencies [9] and more general constraints <ref> [7] </ref>, and under the bag semantics [6, 8]. Query folding is recently shown to be NP-complete for conjunctive queries and views [13], and for conjunctive queries and views with binding patterns [16]. The problem is p 2 -complete for conjunctive queries and views with built-in predicates [13].
Reference: [8] <author> Y. E. Ioannidis and R. Ramakrishnan. </author> <title> Containment of conjunctive queries: Beyond relations as sets. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 20(3) </volume> <pages> 288-324, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: The complexity of query containment is also studied for conjunctive queries under functional and inclusion dependencies [9] and more general constraints [7], and under the bag semantics <ref> [6, 8] </ref>. Query folding is recently shown to be NP-complete for conjunctive queries and views [13], and for conjunctive queries and views with binding patterns [16]. The problem is p 2 -complete for conjunctive queries and views with built-in predicates [13].
Reference: [9] <author> D. S. Johnson and A. Klug. </author> <title> Testing containment of conjunctive queries under functional and inclusion dependencies. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 28(1) </volume> <pages> 167-189, </pages> <month> February </month> <year> 1984. </year>
Reference-contexts: Query containment is p 2 -complete for conjunctive queries with built-in predicates [21], and NP-complete for the subclasses of such queries called the left and right semiinterval queries [11]. The complexity of query containment is also studied for conjunctive queries under functional and inclusion dependencies <ref> [9] </ref> and more general constraints [7], and under the bag semantics [6, 8]. Query folding is recently shown to be NP-complete for conjunctive queries and views [13], and for conjunctive queries and views with binding patterns [16].
Reference: [10] <author> A. M. Keller and J. Basu. </author> <title> A predicate-based caching scheme for client-server database architectures. </title> <booktitle> In Proceedings of the International Conference on Parallel and Distributed Information Systems, </booktitle> <year> 1994. </year>
Reference-contexts: Query folding is even more important in a distributed environment. In client-server applications, views and queries might be cached at the client site. Client queries can be answered more efficiently if they can be folded using the cached data <ref> [10] </ref>. In the situation of a disconnected network, a query can still be answered at least partially if it can be folded using views and queries maintained at available sites.
Reference: [11] <author> A. Klug. </author> <title> On conjunctive queries containing inequalities. </title> <journal> Journal of the ACM, </journal> <volume> 35(1) </volume> <pages> 146-160, </pages> <month> January </month> <year> 1988. </year>
Reference-contexts: The problem is NP-complete for conjunctive queries [4], unions of conjunctive queries [17], and conjunctive queries under functional dependencies [2, 3]. Query containment is p 2 -complete for conjunctive queries with built-in predicates [21], and NP-complete for the subclasses of such queries called the left and right semiinterval queries <ref> [11] </ref>. The complexity of query containment is also studied for conjunctive queries under functional and inclusion dependencies [9] and more general constraints [7], and under the bag semantics [6, 8].
Reference: [12] <author> A. Levy, D. Srivastava, and T. Kirk. </author> <title> Data model and query evaluation in global information systems. </title> <journal> Journal of Intelligent Information Systems, </journal> <year> 1995. </year>
Reference-contexts: In a federated environment containing multiple heterogeneous, autonomous, and legacy data sources, a data source might be capable of answering only limited kinds of queries <ref> [12] </ref>.
Reference: [13] <author> A. Y. Levy, A. O. Mendelzon, Y. Sagiv, and D. Srivastava. </author> <title> Answering queries using views. </title> <booktitle> In Proceedings of the Fourteenth ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 95-104, </pages> <year> 1995. </year>
Reference-contexts: In any case, views may provide the answers faster than a database or they may be the only way to access some information requested by the user as in the case of non-proprietary data sources. Most of the research in this area <ref> [5, 22, 13] </ref> has concentrated on generating equivalent queries, i.e. queries that provide the same answers as the user query, but access views instead of the requested tables. <p> The complexity of query containment is also studied for conjunctive queries under functional and inclusion dependencies [9] and more general constraints [7], and under the bag semantics [6, 8]. Query folding is recently shown to be NP-complete for conjunctive queries and views <ref> [13] </ref>, and for conjunctive queries and views with binding patterns [16]. The problem is p 2 -complete for conjunctive queries and views with built-in predicates [13]. Our work differs from the previous work in three significant ways. <p> Query folding is recently shown to be NP-complete for conjunctive queries and views <ref> [13] </ref>, and for conjunctive queries and views with binding patterns [16]. The problem is p 2 -complete for conjunctive queries and views with built-in predicates [13]. Our work differs from the previous work in three significant ways. First of all, we put a special emphasis on completeness of our algorithm which is more general than any of the existing algorithms both in its scope and the range of its output. <p> The reason for such a split was illustrated by Levy, Mendelzon, Sagiv and Srivastava in <ref> [13] </ref>. <p> Moreover, this check is accomplished in terms of a containment mapping to the output of our algorithm. This complements the results in <ref> [13] </ref> and provides an algorithm for the case when a query is contained in another without the existence of a containment mapping.
Reference: [14] <author> A. Y. Levy, A. Rajaraman, and J. J. Ordille. </author> <title> Query processing in the information manifold. </title> <type> Technical report, </type> <institution> AT&T Bell Laboratories, </institution> <year> 1996. </year>
Reference-contexts: F30602-93-C-0241 (Order Nr. A716). modifications allow the user to access a set of sources that are relevant to his/her query. Contractions were addressed in <ref> [14] </ref>. Relaxations in the context of query folding have not been addressed yet. In this paper, we present an algorithm that attacks the query folding problem in its most general form. It generates all possible foldings when both views and queries may or may not contain built-in predicates. <p> This is referred to as the safety condition in [5]. Most of the algorithms proposed in the past (e.g., <ref> [14] </ref>) first generate rewritings and then select the executable ones, generally with the help of containment checks which introduces an extra component of complexity to the problem. <p> This is a significant gain over approaches that use simple cartesian products instead of unification as in <ref> [14] </ref>. This improvement in efficiency is independent of the gain resulting from the use of skolem terms in rewrite rules. 3.3.3 Rewriting Construction Let L be the label obtained in the previous step. Notice that L has as attribute columns all the variables in Q.
Reference: [15] <author> X. Qian. </author> <title> Query folding. </title> <booktitle> In Proceedings of the Twelfth International Conference on Data Enginnering, </booktitle> <year> 1996. </year>
Reference-contexts: In this paper, we use a special marking technique which allows us to prune many rewritings that will not lead to foldings (i.e. will not be executable). This technique was first introduced in <ref> [15] </ref> when no built-in predicates were present. In this 2 paper, we generalize this technique to address novel problems posed by the existence of built-in predicates and the generation of relaxed foldings. Finally, we address the possibility of relaxing a user query to fit to the available information. <p> First, we will pre-process the views to generate rewrite rules that will be used to derive the rewritings of a user query. The skolemization process that will be described in section 3.1 was first introduced in <ref> [15] </ref>. Here we generalize the same concept for views with non-empty constraints. The skolemization contributes greatly to the efficiency of the algorithm by helping prune many rewritings that will never lead to foldings in much earlier steps.
Reference: [16] <author> A. Rajaraman, Y. Sagiv, and J. D. Ullman. </author> <title> Answering queries using templates with binding patterns. </title> <booktitle> In Proceedings of the Fourteenth ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 105-112, </pages> <year> 1995. </year>
Reference-contexts: Query folding is recently shown to be NP-complete for conjunctive queries and views [13], and for conjunctive queries and views with binding patterns <ref> [16] </ref>. The problem is p 2 -complete for conjunctive queries and views with built-in predicates [13]. Our work differs from the previous work in three significant ways.
Reference: [17] <author> Y. Sagiv and M. Yannakakis. </author> <title> Equivalences among relational expressions with the union and difference operators. </title> <journal> Journal of the ACM, </journal> <volume> 27(4) </volume> <pages> 633-655, </pages> <month> October </month> <year> 1980. </year>
Reference-contexts: It is shown to be undecidable for relational queries [1] and Datalog queries [18]. The problem is NP-complete for conjunctive queries [4], unions of conjunctive queries <ref> [17] </ref>, and conjunctive queries under functional dependencies [2, 3]. Query containment is p 2 -complete for conjunctive queries with built-in predicates [21], and NP-complete for the subclasses of such queries called the left and right semiinterval queries [11].
Reference: [18] <author> O. Shmueli. </author> <title> Decidability and expressiveness aspects of logic queries. </title> <booktitle> In Proceedings of the Sixth ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 237-249, </pages> <year> 1987. </year> <month> 22 </month>
Reference-contexts: To determine whether a query is contained in another query, we could try to determine instead whether the second query can be answered using a view defined by the first query. It is shown to be undecidable for relational queries [1] and Datalog queries <ref> [18] </ref>. The problem is NP-complete for conjunctive queries [4], unions of conjunctive queries [17], and conjunctive queries under functional dependencies [2, 3].
Reference: [19] <author> O. G. Tsatalos, M. H. Solomon, and Y. E. Ioannidis. </author> <title> The GMAP: A versatile tool for physical data independence. </title> <booktitle> In Proceedings of the Twentieth International Conference on Very Large Data Bases, </booktitle> <pages> pages 367-378. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1994. </year>
Reference-contexts: We also show the utility and completeness of our algorithm for checking containment. Folding algorithms for conjunctive queries and views with built-in predicates have been developed in <ref> [5, 19, 22] </ref>. The algorithms employed all use exhaustive search strategies that are exponential-time in complexity, and do not guarantee to find all foldings. The algorithms in [19, 22] compute only foldings that depend solely on the views. <p> Folding algorithms for conjunctive queries and views with built-in predicates have been developed in [5, 19, 22]. The algorithms employed all use exhaustive search strategies that are exponential-time in complexity, and do not guarantee to find all foldings. The algorithms in <ref> [19, 22] </ref> compute only foldings that depend solely on the views. When such complete foldings do not exist, partial foldings that are contained in the original query or depend partially on the views could be very useful in practice, especially in the distributed environment.
Reference: [20] <author> J. D. Ullman. </author> <booktitle> Principles of Database and Knowledge Base Systems, </booktitle> <volume> volume 2. </volume> <publisher> Computer Science Press, </publisher> <year> 1989. </year>
Reference-contexts: It is well-known <ref> [20, pp. 889-890] </ref> that having a containment mapping from Q 2 to Q 1 is sufficient for Q 1 Q 2 . It is also necessary when Q 2 does not contain BIPs. If Q 2 contains BIPs, then (1) and (2) above are still necessary but (3) is not. <p> Then the strongest simplification of this constraint with respect to the variable Y is given as X Z. The strongest simplification is very easy to compute. Given a conjunction C of BILs, we simply compute all the possible inequalities C + implied by C using the algorithm given in <ref> [20, pp. 892] </ref>. Then, we remove from C + all those BILs that contain one of the terms that we want to get rid of.
Reference: [21] <author> R. van der Meyden. </author> <title> The complexity of querying indefinite data about linearly ordered domains. </title> <booktitle> In Proceedings of the Eleventh ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 331-345, </pages> <year> 1992. </year>
Reference-contexts: It is shown to be undecidable for relational queries [1] and Datalog queries [18]. The problem is NP-complete for conjunctive queries [4], unions of conjunctive queries [17], and conjunctive queries under functional dependencies [2, 3]. Query containment is p 2 -complete for conjunctive queries with built-in predicates <ref> [21] </ref>, and NP-complete for the subclasses of such queries called the left and right semiinterval queries [11]. The complexity of query containment is also studied for conjunctive queries under functional and inclusion dependencies [9] and more general constraints [7], and under the bag semantics [6, 8].
Reference: [22] <author> H. Z. Yang and P. A. Larson. </author> <title> Query transformation for PSJ-queries. </title> <booktitle> In Proceedings of the Thirteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 245-254. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1987. </year> <month> 23 </month>
Reference-contexts: In any case, views may provide the answers faster than a database or they may be the only way to access some information requested by the user as in the case of non-proprietary data sources. Most of the research in this area <ref> [5, 22, 13] </ref> has concentrated on generating equivalent queries, i.e. queries that provide the same answers as the user query, but access views instead of the requested tables. <p> We also show the utility and completeness of our algorithm for checking containment. Folding algorithms for conjunctive queries and views with built-in predicates have been developed in <ref> [5, 19, 22] </ref>. The algorithms employed all use exhaustive search strategies that are exponential-time in complexity, and do not guarantee to find all foldings. The algorithms in [19, 22] compute only foldings that depend solely on the views. <p> Folding algorithms for conjunctive queries and views with built-in predicates have been developed in [5, 19, 22]. The algorithms employed all use exhaustive search strategies that are exponential-time in complexity, and do not guarantee to find all foldings. The algorithms in <ref> [19, 22] </ref> compute only foldings that depend solely on the views. When such complete foldings do not exist, partial foldings that are contained in the original query or depend partially on the views could be very useful in practice, especially in the distributed environment.
References-found: 22

