URL: http://www.cs.ucsd.edu/~wgg/Abstracts/jcabanis.thesis.ps.gz
Refering-URL: http://www.cs.ucsd.edu/~wgg/Abstracts/jcabanis.thesis.html
Root-URL: http://www.cs.ucsd.edu
Title: Lessons Learned from Applying HCI Techniques to the Redesign of a User Interface  
Degree: A thesis submitted in partial satisfaction of the requirements for the degree Master of Science in Computer Science by Jenny Lynne Cabaniss Committee in charge: Professor William G. Griswold, Chairperson Professor Paul R. Kube Professor Ramamohan Paturi  
Date: 1997  
Affiliation: UNIVERSITY OF CALIFORNIA, SAN DIEGO  
Abstract-found: 0
Intro-found: 1
Reference: [Belady and Lehman, 1976] <author> Belady, L. A. and Lehman, M. M. </author> <year> (1976). </year> <title> A model of large program development. </title> <journal> IBM Systems Journal, </journal> <volume> 15(3) </volume> <pages> 225-253. </pages>
Reference-contexts: The subjects participated in this study on a voluntary basis and neither received monetary compensation. For the study, we had the team of programmers working together. This technique, known as constructive interaction [Miyake, 1986] <ref> [Belady and Lehman, 1976] </ref>, is used in our study because it provides a natural way for programmers to discuss the problem they are solving, enabling us to observe how programmers address problems and their solutions by studying the programmers' dialogue. 54 V.A.2 Setup We conducted the study in a laboratory setting
Reference: [Bowdidge, 1995] <author> Bowdidge, R. W. </author> <year> (1995). </year> <title> Supporting the Restructuring of Data Abstractions through Manipulation of a Program Visualization. </title> <type> PhD thesis, </type> <institution> University of California, San Diego, Department of Computer Science & Engineering. </institution> <note> Technical Report CS95-457. </note>
Reference-contexts: III.C.4 Problems with the Trimming Capabilities Users seem pleased with the layout of the information in the main portion of the star diagram window. Much research has already been devoted to this window [Chen, 1996] <ref> [Bowdidge, 1995] </ref>. But there are still some problems with the operations on the star diagram. Use of Language. In Chen's tool, there is esoteric language in the star diagram window.
Reference: [Brown, 1988] <author> Brown, C. M. </author> <year> (1988). </year> <title> Human-Copmuter Interface Design Guidelines. </title> <publisher> Ablex Publishing Corporation, </publisher> <address> Norwood, New Jersey. </address>
Reference-contexts: If there is no consistency between activities, the user must create a more complex view of the system, or try to remember the multiple models needed to work with the system <ref> [Brown, 1988, page 9] </ref>. When trying to implement a consistent interface, it is important to make sure that consistency is correctly applied to the interface [Brown, 1988, pages 21-24]. Aspects of the system that behave similarly should look similar. <p> When trying to implement a consistent interface, it is important to make sure that consistency is correctly applied to the interface <ref> [Brown, 1988, pages 21-24] </ref>. Aspects of the system that behave similarly should look similar. By having similar aspects of the system look and react similarly, the user can make assumptions about newly encountered functionality in the system or simply improve the user's recall regarding infrequently used features. <p> There should be conceptual integrity amongst all windows in an interface. Similar functionality amongst windows should be consistently placed. For example, if all windows have a Dismiss, it should be in the same place in all windows <ref> [Brown, 1988, page 32] </ref>. The interface should also have a consistent way for users to interact with all windows of the tool. If some windows use pull-down menus, then all windows should use pull-down menus. <p> There should be consistent use of language between interacting windows. If the user chooses an option from one window, the following window should have a title with a similar name to the option selected. This helps reassure users that the window being displayed is correct based on their selection <ref> [Brown, 1988, page 101] </ref>. Also, all windows should use the same word choice for the same functionality. It is distracting to use different words such as Dismiss, Exit, and Cancel in different windows, when they all mean the same thing. <p> Many times users are not aware that status information is available and will not actively search for it. 10 II.D Language When deciding on word choice one should follow general principles of conciseness, clarity, and consistency <ref> [Brown, 1988, pages 21-24] </ref>. A designer should also avoid the use of technical jargon because it can confuse or intimidate users. The designer should look at the audience of a user interface to determine what types of terms will be clear and meaningful. <p> Even though tiling is useful, we had to be careful not to create windows with too much information in them. A user can comprehend only a certain amount 34 of information at one time and a window with too much functionality becomes cluttered and incomprehensible <ref> [Brown, 1988, page 37] </ref>. We did not create windows with more than four tiled sub-windows. There has also been a visibility trade-off with the use of tiling. Although tiling helps a large window and its sub-windows become more visible, it interferes with the ability to see other windows.
Reference: [Carroll, 1991] <author> Carroll, J. </author> <year> (1991). </year> <title> Design Interaction: Psychology at the Human-Computer Interface. </title> <publisher> Ambridge University Press, </publisher> <address> New York, New York. </address>
Reference-contexts: Users brings a certain amount of knowledge to their interactions with the interface. It is important for the developer of the tool to look at the common knowledge of the user-community. II.E User Scenarios Scenarios are personalized, fictional stories with characters, and events <ref> [Carroll, 1991, page 81] </ref>. They are extremely useful in helping the developer anticipate how users will interact with the tool. They help designers understand the ramifications that certain design decisions will have on user interaction with the tool. <p> It is important to examine different scenarios to get a variety of viewpoints of a system. Scenarios can bring out new requirements of the system and see possible problem spots in the interface [Preece, 1994, page 462] <ref> [Carroll, 1991, pages 293-295] </ref>. Common Scenarios. It is important to include especially common scenarios. When interface designers recognize common scenarios, they can streamline them, helping to lessen the user's frustration and mistakes and increase productivity. Unusual scenarios can have slightly more complicated interactions. <p> It is important, however, to not create a system that is based solely on a list of standard scenarios. Users continually surprise developers and use a tool in unanticipated ways. If a tool is only usable with a certain set of scenarios, it would be very limiting <ref> [Carroll, 1991, pages 293-295] </ref>. 11 II.F The Engineering Model and User Model HCI methodology recognizes two distinct models of a given system, the engineering model and the user model [Norman, 1986]. The engineering model represents the way in which the system engineer conceptualizes and realizes the tool.
Reference: [Chen, 1996] <author> Chen, M. I. </author> <year> (1996). </year> <title> A tool for planning the restructuring of data abstractions in large systems. </title> <type> Masters Thesis, </type> <institution> University of California, San Diego, Department of Computer Science and Engineering. </institution> <note> Technical Report CS96-472. </note>
Reference-contexts: This added complexity, in part, motivated the interface re-design. I.B Problems with the Interface Design Chen's C Star Diagram restructuring planning tool is a working prototype. Although there is much useful functionality in the tool, user studies <ref> [Chen, 1996] </ref> revealed many problems with the interface's design. The interface has problems with consistency, visibility, the use of esoteric language, and poor work-flow scenarios. The C Star Diagram restructuring planning tool interface has problems with consistency across windows. <p> Our challenge has been to resolve these conflicts. 1 Button names are in bold font to distinguish them from the regular text. 5 I.C Our New Design After looking at the user study conducted by Chen <ref> [Chen, 1996] </ref>, we see that the existing interface design has some shortcomings and the users can benefit from an improved interface design. When designing a user interface, one tries to follow general user interface design principles. But following these guidelines is not enough to create a good interface. <p> We describe the C Star Diagram restructuring planning tool and its original interface. We examine some of the problems seen with the interface based on personal observation and the user studies conducted by Chen <ref> [Chen, 1996] </ref>. We also look at the added elision functionality introduced by Nguyen [Nguyen, 1997] and the effect this has had on the interface design. III.A Description of the Star Diagram The Original Star Diagram Restructuring Tool. <p> Also, for very large programs, transformations can be too time consuming. The C Star Diagram restructuring planning tool. To make the tool useful with large programs, Chen modified the star diagram by removing the meaning-preserving restructuring capabilities and turned it into a planning restructuring tool <ref> [Chen, 1996] </ref> [Griswold et al., 1996]. By replacing the tool's transformational capabilities with a plan-recording capability, Chen minimized the computation-intensive activities of the tool, allowing it to be used on larger programs with better performance. <p> By explaining the problems observed with the interface in terms of HCI principles, we hope to improve the interface design. III.C Problems with the Interface Design Chen's user studies of the C Star Diagram restructuring planning tool revealed many problems with the interface <ref> [Chen, 1996] </ref>. Three groups of participants were used to see the variant interactions users have with the tool. Each experiment had a group of two users working together to encapsulate the Objects variable in the C program, Omega. <p> III.C.4 Problems with the Trimming Capabilities Users seem pleased with the layout of the information in the main portion of the star diagram window. Much research has already been devoted to this window <ref> [Chen, 1996] </ref> [Bowdidge, 1995]. But there are still some problems with the operations on the star diagram. Use of Language. In Chen's tool, there is esoteric language in the star diagram window. <p> As part of our iterative development process, we conducted informal user studies prior to the formal user study. We used Chen's user study format <ref> [Chen, 1996] </ref> for our study because it was inexpensive to use an existing experiment. Also, by using Chen's user study format, we are better able to compare our results with Chen's results. It is important to note that these results are qualitative. <p> V.A.3 Instructions To observe the differences between Chen's star diagram interface design and our interface design, we provide the same setup and instructions as were given in Chen's user studies <ref> [Chen, 1996] </ref>. This was also done to determine how our interface design has improved user understanding of and interaction with the tool. We first had the subjects sign a standard consent form.
Reference: [Griswold et al., 1996] <author> Griswold, W. G., Chen, M. I., Bowdidge, R. W., and Mor-genthaler, J. D. </author> <year> (1996). </year> <title> Tool support for planning the restructuring of data abstractions in large systems. </title> <booktitle> In ACM SIGSOFT '96 Symposium on the Foundations of Software Engineering. </booktitle>
Reference-contexts: Bowdidge's tool is useful for planning and carrying out small restructuring tasks, but has problems when dealing with large systems. Examination of star 14 diagrams for large C programs reveals that viewing a star diagram for widely used variables in a large program is problematic <ref> [Griswold et al., 1996] </ref> because the star diagram can be quite large, compromising comprehension. Also, for very large programs, transformations can be too time consuming. The C Star Diagram restructuring planning tool. <p> Also, for very large programs, transformations can be too time consuming. The C Star Diagram restructuring planning tool. To make the tool useful with large programs, Chen modified the star diagram by removing the meaning-preserving restructuring capabilities and turned it into a planning restructuring tool [Chen, 1996] <ref> [Griswold et al., 1996] </ref>. By replacing the tool's transformational capabilities with a plan-recording capability, Chen minimized the computation-intensive activities of the tool, allowing it to be used on larger programs with better performance. <p> Horizontal elision removes nodes from the right-hand side of the screen after a certain depth, leaving the function and file nodes. In one of Bowdidge's and Chen's user studies <ref> [Griswold et al., 1996] </ref>, it was observed that users work from left to right in the star diagram, and much of the time the nodes on the right-hand side of the screen can temporarily be removed. <p> The experimenter had to intervene and correct the documentation in order to allow the experiment to 1 Although this design satisfies the minimal requirements of the instructions, it is not necessarily the best design <ref> [Griswold et al., 1996] </ref>. 61 continue. Once the correct trim functionality was explained the subjects were able to continue with their restructuring planning. Once they had figured out how to annotate and then trim an arm, they were able to work through the star arms very quickly.
Reference: [Lawrence, 1989] <author> Lawrence, B. </author> <year> (1989). </year> <title> Omega [A complex, rogue-like game of dungeon exploration written and freely distributed by Lawrence Brothers.]. </title> <note> Copyright 1989. Available from Lawrence Brothers at brothers@paul.rutgers.edu. </note>
Reference-contexts: After filling out these questionnaires, they were allowed to discuss in free format their experience with the tool. 55 We gave the programmers an adventure program, Omega, written in roughly 31,000 lines of C. Omega is a rogue-like game of dungeon exploration written and freely distributed by Lawrence Brothers <ref> [Lawrence, 1989] </ref>. We asked the subjects to perform data encapsulation on the global variable Objects. This modification requires examining all the functions in which the Objects variable is used and performing several global changes.
Reference: [MacLennan, 1987] <author> MacLennan, B. J. </author> <year> (1987). </year> <title> Principles of Programming Languages: Design, Evaluation, and Implementation. </title> <publisher> Holt, Rinehart, and Winston, </publisher> <address> New York, 2nd edition. </address>
Reference-contexts: Although consistency is a crucial principle in any interface design, it is important to remember that creating a system where everything looks similar can lead to confusion. Functions that behave similarly should look similar, while functions that behave differently should look different <ref> [MacLennan, 1987] </ref>. II.C Visibility It is important to give users enough information about their current task that they can make an informed decision about how to proceed. This has been called the Answer-Question Paradigm [Owen, 1986].
Reference: [Miyake, 1986] <author> Miyake, N. </author> <year> (1986). </year> <title> Constructive interaction and the iterative process of understanding. </title> <journal> Cognitive Science, </journal> <volume> 10(2) </volume> <pages> 151-177. </pages>
Reference-contexts: The subjects participated in this study on a voluntary basis and neither received monetary compensation. For the study, we had the team of programmers working together. This technique, known as constructive interaction <ref> [Miyake, 1986] </ref> [Belady and Lehman, 1976], is used in our study because it provides a natural way for programmers to discuss the problem they are solving, enabling us to observe how programmers address problems and their solutions by studying the programmers' dialogue. 54 V.A.2 Setup We conducted the study in a
Reference: [Nguyen, 1997] <author> Nguyen, V. B. </author> <year> (1997). </year> <title> Impact of adding customizability on software architecture: A case study. </title> <type> Masters Thesis, </type> <institution> University of California, </institution> <address> San 74 75 Diego, </address> <institution> Department of Computer Science and Engineering. </institution> <note> Technical Report CS97-523. </note>
Reference-contexts: With very large systems, it is impossible to see a complete star diagram on a single screen. Nguyen created an advanced elision capability that can temporarily remove irrelevant or extraneous information from the graphical view of the program <ref> [Nguyen, 1997] </ref>. This capability allows users to customize the star diagram display and disregard certain aspects of the system representations based on the user's specific task. This added complexity, in part, motivated the interface re-design. <p> We describe the C Star Diagram restructuring planning tool and its original interface. We examine some of the problems seen with the interface based on personal observation and the user studies conducted by Chen [Chen, 1996]. We also look at the added elision functionality introduced by Nguyen <ref> [Nguyen, 1997] </ref> and the effect this has had on the interface design. III.A Description of the Star Diagram The Original Star Diagram Restructuring Tool. Bowdidge's star diagram is a graphical tool to assist in understanding and restructuring C programs [Bow-didge, 1995]. <p> Nguyen has continued to enhance the C Star Diagram restructuring planning tool's capability for displaying large programs by creating a more advanced way for users to remove extraneous nodes from a star diagram <ref> [Nguyen, 1997] </ref>. Users can now elide a node based on the kind of node it is or a user specified string. <p> This functionality is kept in the text window because it indirectly acts on the text window by using the text selections from this window. It was also kept in the text window because the selection process has become more complex with Nguyen's addition functionality <ref> [Nguyen, 1997] </ref>. Star Diagrams can now be created based on the types of variables. We had to change the interface to allow the user to select a variable to be part of a root set based on its name or its type. <p> For infrequently used tasks, such as the fonts window, we kept them as pop-up windows. Star Diagram Window Tiling. The star diagram uses tiling. With the introduction of more advanced elision capabilities <ref> [Nguyen, 1997] </ref> a floating window was initially created to handle these elision capabilities. Often, this elision window gets hidden or takes up prime screen real estate. To fix this problem we added the elision panel to the side panel of the star diagram window.
Reference: [Norman, 1986] <author> Norman, D. A. </author> <year> (1986). </year> <title> Cognitive engineering. </title> <editor> In Norman, D. A. and Draper, S. W., editors, </editor> <title> User Centered System Design: New Perspectives on Human-Computer Interaction, chapter 3. </title> <publisher> Lawrence Erlbaum Associates, Inc. </publisher>
Reference-contexts: If a tool is only usable with a certain set of scenarios, it would be very limiting [Carroll, 1991, pages 293-295]. 11 II.F The Engineering Model and User Model HCI methodology recognizes two distinct models of a given system, the engineering model and the user model <ref> [Norman, 1986] </ref>. The engineering model represents the way in which the system engineer conceptualizes and realizes the tool. The user model represents the way in which a user conceptualizes the tool.
Reference: [Ousterhout, 1994] <author> Ousterhout, J. </author> <year> (1994). </year> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA. </address>
Reference-contexts: The tool is useful, but it has been observed that the tool has user interaction problems. Chen's interface is an example of an engineering model. The tool provides useful functionality, but is difficult to understand for users not familiar with the interface. The interface is implemented in Tcl/Tk <ref> [Ousterhout, 1994] </ref>. One of the driving factors in creating this interface was the ease of implementation based on the intrinsic properties of Tcl/Tk. For example, there are places in the interface where design decisions were based on the way that Tk handles events such as selecting and unselecting items.
Reference: [Owen, 1986] <author> Owen, D. </author> <year> (1986). </year> <title> Answers first, then questions. </title> <editor> In Norman, D. A. and Draper, S. W., editors, </editor> <title> User Centered System Design: New Perspectives on Human-Computer Interaction, chapter 17. </title> <publisher> Lawrence Erlbaum Associates, Inc. </publisher>
Reference-contexts: Functions that behave similarly should look similar, while functions that behave differently should look different [MacLennan, 1987]. II.C Visibility It is important to give users enough information about their current task that they can make an informed decision about how to proceed. This has been called the Answer-Question Paradigm <ref> [Owen, 1986] </ref>. It addresses issues of (1) when information is presented, (2) what type of information is presented (3) how it is represented. This paradigm relies on the fact that recognition is more powerful than recall [Preece, 1994, pages 118-119].
Reference: [Preece, 1994] <author> Preece, J. </author> <year> (1994). </year> <title> Human Computer Interaction. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Menlo Park, California. </address>
Reference-contexts: This has been called the Answer-Question Paradigm [Owen, 1986]. It addresses issues of (1) when information is presented, (2) what type of information is presented (3) how it is represented. This paradigm relies on the fact that recognition is more powerful than recall <ref> [Preece, 1994, pages 118-119] </ref>. The user should receive suggestions from the tool as to what their next activity can be. The information should not be too intrusive and interfere with a user's activities, but it should also be easily obtained if the user needs it. Status Information. <p> It is important to examine different scenarios to get a variety of viewpoints of a system. Scenarios can bring out new requirements of the system and see possible problem spots in the interface <ref> [Preece, 1994, page 462] </ref> [Carroll, 1991, pages 293-295]. Common Scenarios. It is important to include especially common scenarios. When interface designers recognize common scenarios, they can streamline them, helping to lessen the user's frustration and mistakes and increase productivity. Unusual scenarios can have slightly more complicated interactions.
References-found: 14

