URL: ftp://ftp.cs.wisc.edu/math-prog/tech-reports/97-12.ps
Refering-URL: http://www.cs.wisc.edu/math-prog/tech-reports/
Root-URL: 
Title: Interfaces to PATH 3.0: Design, Implementation and Usage  
Author: Michael C. Ferris Todd S. Munson 
Note: PATH 2.9 to the new version.  
Date: May 5, 1998  
Abstract: Several new interfaces have recently been developed requiring PATH to solve a mixed complementarity problem. To overcome the necessity of maintaining a different version of PATH for each interface, the code was reorganized using object-oriented design techniques. At the same time, robustness issues were considered and enhancements made to the algorithm. In this paper, we document the external interfaces to the PATH code and describe some of the new utilities using PATH. We then discuss the enhancements made and compare the results obtained from 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. C. Billups. </author> <title> Algorithms for Complementarity Problems and Generalized Equations. </title> <type> PhD thesis, </type> <institution> University of Wisconsin-Madison, Madison, Wis-consin, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: Two significant changes were previously made to the code described in [12, 13] for improved reliability. One was the introduction of a crashing technique [14] to quickly identify an active set from the user-supplied starting point. The other was the addition of a proximal perturbation scheme <ref> [1, 2] </ref> to overcome problems with a singular basis matrix. The new implementation has further improved numerical properties and restarts when a stationary point of the merit function is found. These changes have led to a more effective version of the code. <p> CPLIB [16], a suite of routines giving a solver access to problem-specific information, including function and Jacobian evaluations, facilitates the linkage of PATH and other solvers <ref> [1, 4, 7, 35] </ref> to GAMS. The GAMS/MCP interface to PATH [16] remains essentially unchanged. However, several new uses of the code from within GAMS were 9 made possible because of the added flexibility provided by the object-oriented design, the reuse of memory, and access to the workspace.
Reference: [2] <author> S. C. Billups. </author> <title> Improving the robustness of complementarity solvers using proximal perturbations. </title> <type> Technical report, </type> <institution> Center for Computational Mathematics, University of Colorado, </institution> <address> Denver, Colorado, </address> <year> 1997. </year>
Reference-contexts: Two significant changes were previously made to the code described in [12, 13] for improved reliability. One was the introduction of a crashing technique [14] to quickly identify an active set from the user-supplied starting point. The other was the addition of a proximal perturbation scheme <ref> [1, 2] </ref> to overcome problems with a singular basis matrix. The new implementation has further improved numerical properties and restarts when a stationary point of the merit function is found. These changes have led to a more effective version of the code.
Reference: [3] <author> S. C. Billups, S. P. Dirkse, and M. C. Ferris. </author> <title> A comparison of large scale mixed complementarity problem solvers. </title> <journal> Computational Optimization and Applications, </journal> <volume> 7 </volume> <pages> 3-25, </pages> <year> 1997. </year>
Reference-contexts: We do not compare PATH 3.0 to other codes since this was carried out in <ref> [3] </ref>. 16 Restart Number Parameter Values 1 crash method none nms initial reference factor 2 proximal perturbation 1e-2*initial residual 2 crash method none proximal perturbation 0 3 crash method pnewton crash nbchange limit 10 nms initial reference factor 2 nms searchtype line Table 7: Restart Definitions Code Meaning B A Backtracking <p> Table 8: Step Type Codes 17 However, the results of <ref> [3] </ref> seem to indicate that PATH was the most robust and efficient code at that time. The problems are available online (as GAMS files) as documented in [11], along with some recent additions. The computations were carried out on a Sun UltraSparc 300 MHz processor with 256MB RAM.
Reference: [4] <author> S. C. Billups and M. C. Ferris. QPCOMP: </author> <title> A quadratic program based solver for mixed complementarity problems. </title> <journal> Mathematical Programming, </journal> <volume> 76 </volume> <pages> 533-562, </pages> <year> 1997. </year>
Reference-contexts: CPLIB [16], a suite of routines giving a solver access to problem-specific information, including function and Jacobian evaluations, facilitates the linkage of PATH and other solvers <ref> [1, 4, 7, 35] </ref> to GAMS. The GAMS/MCP interface to PATH [16] remains essentially unchanged. However, several new uses of the code from within GAMS were 9 made possible because of the added flexibility provided by the object-oriented design, the reuse of memory, and access to the workspace.
Reference: [5] <author> C. Bischof, A. Carle, P. Khademi, A. Mauer, and P. Hovland. </author> <title> ADI-FOR 2.0 user's guide. </title> <institution> Mathematics and Computer Science Division Report ANL/MCS-TM-192, Argonne National Laboratory, Argonne, Illinois, </institution> <year> 1995. </year>
Reference-contexts: The PATH solver is hooked up to NEOS via a suite of interface routines [21]. When a user submits an MCP problem to NEOS, the user specifies FORTRAN functions initpt (), xbounds (), and fcn (), along with an integer to represent n. The interface uses ADIFOR <ref> [5] </ref> to compute the Jacobian for the FORTRAN function representing the problem. The sparse structure and number of nonzeros in the Jacobian are also generated.
Reference: [6] <author> A. Brooke, D. Kendrick, and A. Meeraus. </author> <title> GAMS: A User's Guide. </title> <publisher> The Scientific Press, </publisher> <address> South San Francisco, CA, </address> <year> 1988. </year>
Reference-contexts: Some of the interfaces now supported include fl This material is based on research supported by National Science Foundation Grant CCR-9619765 and GAMS Corporation. y Computer Sciences Department, University of Wisconsin - Madison, 1210 West Dayton Street, Madison, Wisconsin 53706 (ferris,tmunson@cs.wisc.edu) 1 links to AMPL [23], GAMS <ref> [6] </ref>, MATLAB, and NEOS [9], as well as a callable subroutine library version. To further broaden the user base, implementations for some of the interfaces presented are available online at http://www.cs.wisc.edu/cpnet/path.html and the PATH library can be freely obtained by contacting one of the authors. <p> across the Internet as a subroutine in a manner similar to that outlined in Section 3.2. 3.4 GAMS The major users of PATH continue to be economists, many of whom use the code [13] for solving MCP models generated with the MPSGE preprocessor [36, 37] of the GAMS modeling language <ref> [6] </ref>. CPLIB [16], a suite of routines giving a solver access to problem-specific information, including function and Jacobian evaluations, facilitates the linkage of PATH and other solvers [1, 4, 7, 35] to GAMS. The GAMS/MCP interface to PATH [16] remains essentially unchanged. <p> The termination criterion for both codes is identical, requiring the norm of the residual in the normal map to be less than 10 6 . We do not report results for GAMSLIB <ref> [6] </ref>, since both algorithms solve all of the problems in the suite on defaults. The results displayed in Tables 9 and 10 indicate that PATH 3.0 is significantly more robust than PATH 2.9.
Reference: [7] <author> Chunhui Chen and O. L. Mangasarian. </author> <title> A class of smoothing functions for nonlinear and mixed complementarity problems. </title> <journal> Computational Optimization and Applications, </journal> <volume> 5 </volume> <pages> 97-138, </pages> <year> 1996. </year>
Reference-contexts: CPLIB [16], a suite of routines giving a solver access to problem-specific information, including function and Jacobian evaluations, facilitates the linkage of PATH and other solvers <ref> [1, 4, 7, 35] </ref> to GAMS. The GAMS/MCP interface to PATH [16] remains essentially unchanged. However, several new uses of the code from within GAMS were 9 made possible because of the added flexibility provided by the object-oriented design, the reuse of memory, and access to the workspace.
Reference: [8] <author> R. W. Cottle and G. B. Dantzig. </author> <title> Complementary pivot theory of mathematical programming. </title> <journal> Linear Algebra and Its Applications, </journal> <volume> 1 </volume> <pages> 103-125, </pages> <year> 1968. </year>
Reference-contexts: When the PATH implementation was rewritten, the names of several options were changed. We give a list of the user-available options along with their defaults and meaning in Table 6. In particular, PATH can emulate Lemke's method <ref> [8, 29] </ref> for LCP with the following options: crash_method none; major_iteration_limit 1; lemke_start first; nms no; If instead, PATH is to imitate the Josephy Newton method [28] for NCP with an Armijo style linesearch on the normal map residual, then the options to use are: crash_method none; lemke_start always; nms_initial_reference_factor 1; <p> The determination is made such that t increases and stability is preserved. If the code is forced to use a ray start at each iteration (lemke start always), then the code carries out Lemke's method, which is known <ref> [8] </ref> not to cycle. However, by default, we use a regular start to guarantee that the generated path emanates from the current iterate. Under appropriate conditions, this guarantees a decrease in the nonlinear residual. However, it is then possible for the pivot sequence in the linear model to cycle.
Reference: [9] <author> J. Czyzyk, M. P. Mesnier, and J. J. </author> <title> More. The Network-Enabled Optimization Server. </title> <type> Preprint MCS-P615-0996, </type> <institution> Argonne National Laboratory, Argonne, Illinois, </institution> <year> 1996. </year> <month> 21 </month>
Reference-contexts: of the interfaces now supported include fl This material is based on research supported by National Science Foundation Grant CCR-9619765 and GAMS Corporation. y Computer Sciences Department, University of Wisconsin - Madison, 1210 West Dayton Street, Madison, Wisconsin 53706 (ferris,tmunson@cs.wisc.edu) 1 links to AMPL [23], GAMS [6], MATLAB, and NEOS <ref> [9] </ref>, as well as a callable subroutine library version. To further broaden the user base, implementations for some of the interfaces presented are available online at http://www.cs.wisc.edu/cpnet/path.html and the PATH library can be freely obtained by contacting one of the authors. <p> FORTRAN interface is almost identical: subroutine pathmain (n, nnz, status, z, F, l, u) integer function funceval (n, z, F) integer function jaceval (n, nnz, z, col, len, row, data) The PATH libraries for certain machine architectures are now freely available by contacting one of the authors. 3.3 NEOS NEOS <ref> [9] </ref> enables users to submit optimization problems across the Internet to the NEOS server. The server contacts a client, transmits the problem information to the client, which then attempts to solve the problem. Results are sent back to the original submitter.
Reference: [10] <author> S. P. Dirkse. </author> <title> Robust Solution of Mixed Complementarity Problems. </title> <type> PhD thesis, </type> <institution> Computer Sciences Department, University of Wisconsin, Madison, Wisconsin, </institution> <year> 1994. </year> <note> Available from ftp://ftp.cs.wisc.edu/math-prog/tech-reports/. </note>
Reference-contexts: The objective of the linear model solver is to construct a path from a given complementary triple (^z; ^w; ^v) to a solution (z; w; v). The algorithm used to solve the linear problem is identical to that given in <ref> [10] </ref>; however, artificial variables are incorporated into the model. <p> This path is used by the nonlinear code for the implementation of pathsearching. 4.3 Pathsearching An interpolating pathsearch that preserves stability replaces the pathsearch found in PATH 2.9. Instead of only using breakpoints, as outlined in <ref> [10] </ref>, we allow points between the breakpoints to be used. The EXPAND rules enforce a minimum stepsize. Therefore, some steps, and the first in particular, can be quite small. The breakpoint method has the undesirable property that a very small step may be taken in the backtrack.
Reference: [11] <author> S. P. Dirkse and M. C. Ferris. MCPLIB: </author> <title> A collection of nonlinear mixed complementarity problems. </title> <journal> Optimization Methods and Software, </journal> <volume> 5 </volume> <pages> 319-345, </pages> <year> 1995. </year>
Reference-contexts: Table 8 explains the meaning of each code letter. 5 Computational Results In this section we compare the results obtained from PATH 2.9 and PATH 3.0 using their standard default options on the problems comprising MCPLIB <ref> [11] </ref>. <p> Table 8: Step Type Codes 17 However, the results of [3] seem to indicate that PATH was the most robust and efficient code at that time. The problems are available online (as GAMS files) as documented in <ref> [11] </ref>, along with some recent additions. The computations were carried out on a Sun UltraSparc 300 MHz processor with 256MB RAM.
Reference: [12] <author> S. P. Dirkse and M. C. Ferris. </author> <title> The PATH solver: A non-monotone stabilization scheme for mixed complementarity problems. </title> <journal> Optimization Methods and Software, </journal> <volume> 5 </volume> <pages> 123-156, </pages> <year> 1995. </year>
Reference-contexts: 1 Introduction The PATH solver <ref> [12] </ref> for mixed complementarity problems (MCPs) was introduced in 1995 and has since become the standard against which new MCP solvers are compared. However, the main user group for PATH continues to be economists using the MPSGE preprocessor [36]. <p> To further broaden the user base, implementations for some of the interfaces presented are available online at http://www.cs.wisc.edu/cpnet/path.html and the PATH library can be freely obtained by contacting one of the authors. Two significant changes were previously made to the code described in <ref> [12, 13] </ref> for improved reliability. One was the introduction of a crashing technique [14] to quickly identify an active set from the user-supplied starting point. The other was the addition of a proximal perturbation scheme [1, 2] to overcome problems with a singular basis matrix. <p> MCP (F ,B), if and only if exactly one of the following holds for each i 2 f1; : : : ; ng: l i z i u i and F i (z) = 0 z i = u i and F i (z) &lt; 0: The core PATH algorithm <ref> [12] </ref> uses a nonsmooth Newton method [34] to find a zero of the normal map [33] associated with the MCP. The normal map for the MCP is given by F ((x)) + x (x) where (x) represents the projection of x onto B in the Euclidean norm. <p> A proof of convergence and rate of convergence results can be found in [32]. The enhancements described in this paper do not change the basic properties of the algorithm; they only modify the implementation. Hence, the theory already developed <ref> [32, 12] </ref> still applies. 2 Component Interfaces Object-oriented design techniques were used to completely restructure the PATH code. The basic premise is to encapsulate data and functions together into ob 2 jects. The implementation for each of the objects is hidden from the user.
Reference: [13] <author> S. P. Dirkse and M. C. Ferris. </author> <title> A pathsearch damped Newton method for computing general equilibria. </title> <journal> Annals of Operations Research, </journal> <year> 1996. </year>
Reference-contexts: To further broaden the user base, implementations for some of the interfaces presented are available online at http://www.cs.wisc.edu/cpnet/path.html and the PATH library can be freely obtained by contacting one of the authors. Two significant changes were previously made to the code described in <ref> [12, 13] </ref> for improved reliability. One was the introduction of a crashing technique [14] to quickly identify an active set from the user-supplied starting point. The other was the addition of a proximal perturbation scheme [1, 2] to overcome problems with a singular basis matrix. <p> The normal map for the MCP is given by F ((x)) + x (x) where (x) represents the projection of x onto B in the Euclidean norm. It is well known that if x is a zero of the normal map, then (x) solves the MCP. A non-monotone pathsearch <ref> [13, 20] </ref> using the residual of the normal map kF ((x)) + x (x)k as a merit function is used to improve robustness. A proof of convergence and rate of convergence results can be found in [32]. <p> involves generating a new C interface using ADOL-C [27] and allowing the PATH solver to be called across the Internet as a subroutine in a manner similar to that outlined in Section 3.2. 3.4 GAMS The major users of PATH continue to be economists, many of whom use the code <ref> [13] </ref> for solving MCP models generated with the MPSGE preprocessor [36, 37] of the GAMS modeling language [6]. CPLIB [16], a suite of routines giving a solver access to problem-specific information, including function and Jacobian evaluations, facilitates the linkage of PATH and other solvers [1, 4, 7, 35] to GAMS.
Reference: [14] <author> S. P. Dirkse and M. C. Ferris. </author> <title> Crash techniques for large-scale complementarity problems. </title> <editor> In M. C. Ferris and J. S. Pang, editors, </editor> <title> Complementarity and Variational Problems: </title> <booktitle> State of the Art, </booktitle> <address> Philadelphia, Pennsylvania, 1997. </address> <publisher> SIAM Publications. </publisher>
Reference-contexts: Two significant changes were previously made to the code described in [12, 13] for improved reliability. One was the introduction of a crashing technique <ref> [14] </ref> to quickly identify an active set from the user-supplied starting point. The other was the addition of a proximal perturbation scheme [1, 2] to overcome problems with a singular basis matrix.
Reference: [15] <author> S. P. Dirkse and M. C. Ferris. </author> <title> Modeling and solution environments for MPEC: GAMS & MATLAB. </title> <editor> In M. Fukushima and L. Qi, editors, </editor> <title> Non-smooth, Piecewise Smooth, Semismooth and Smoothing Methods. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1998, </year> <month> forthcoming. </month>
Reference-contexts: Users who repeatedly invoke the algorithm can directly allocate required workspaces and reuse that workspace from one PATH solve to the next. This is a key point for applications solving a sequence of MCP's, as is done in <ref> [15] </ref>. The argument lists for the aforementioned routines can be found in the online version of the PATH header files. These component interfaces have been successfully used to construct links to the GAMS and AMPL modeling languages. We have also developed MATLAB and NEOS hookups using the same library. <p> Two examples are the GAMS/CNS interface, and the bundle method for solving MPEC, which uses PATH as a subroutine to solve MCP subproblems. The latter usage is described in <ref> [15] </ref>. Recently, GAMS added the constrained nonlinear system, CNS, model type to their language. The constrained nonlinear system is defined by a set of bounds, B and a function F : B ! &lt; n .
Reference: [16] <author> S. P. Dirkse, M. C. Ferris, P. V. Preckel, and T. Rutherford. </author> <title> The GAMS callable program library for variational and complementarity solvers. </title> <type> Mathematical Programming Technical Report 94-07, </type> <institution> Computer Sciences Department, University of Wisconsin, Madison, Wisconsin, </institution> <year> 1994. </year>
Reference-contexts: CPLIB <ref> [16] </ref>, a suite of routines giving a solver access to problem-specific information, including function and Jacobian evaluations, facilitates the linkage of PATH and other solvers [1, 4, 7, 35] to GAMS. The GAMS/MCP interface to PATH [16] remains essentially unchanged. <p> CPLIB <ref> [16] </ref>, a suite of routines giving a solver access to problem-specific information, including function and Jacobian evaluations, facilitates the linkage of PATH and other solvers [1, 4, 7, 35] to GAMS. The GAMS/MCP interface to PATH [16] remains essentially unchanged. However, several new uses of the code from within GAMS were 9 made possible because of the added flexibility provided by the object-oriented design, the reuse of memory, and access to the workspace.
Reference: [17] <author> A. Drud. CONOPT: </author> <title> A GRG code for large sparse dynamic nonlinear optimization problems. </title> <journal> Mathematical Programming, </journal> <volume> 31 </volume> <pages> 153-191, </pages> <year> 1985. </year>
Reference-contexts: The most popular approach in GAMS to solving this problem has been to set up a dummy objective function and solve min 0 subject to F (x) = 0; x 2 B: (1) The new CNS model type allows solvers such as CONOPT <ref> [17] </ref> and MINOS [31] to set up alternative internal models to solve (1) such as min kF (x)k 2 subject to x 2 B: (2) Our work internally reformulates the CNS model as an MCP. One choice would be to solve the Karush-Kuhn-Tucker conditions of (2) as an MCP.
Reference: [18] <author> S. K. Eldersveld and M. A. Saunders. </author> <title> A block-LU update for large-scale linear programming. </title> <journal> SIAM Journal on Matrix Analysis, </journal> <volume> 13 </volume> <pages> 191-201, </pages> <year> 1992. </year>
Reference-contexts: A future basis object for the MATLAB implementation will use mexCall-MATLAB () to invoke the MATLAB LU routine, along with an update procedure provided via the Schur-Complement described in <ref> [18] </ref>. 4.2 The Linear Model Let M 2 &lt; nfin , q 2 &lt; n , and B = [l; u] be given. (z; w; v) solves the linear mixed complementarity problem defined by M , q, and B if and only if it satisfies the following constrained system of equations:
Reference: [19] <author> M. C. Ferris, R. Fourer, and D. M. Gay. </author> <title> Expressing complementarity problems and communicating them to solvers. </title> <type> Mathematical Programming Technical Report 98-02, </type> <institution> Computer Sciences Department, University of Wisconsin, Madison, Wisconsin, </institution> <year> 1998. </year>
Reference-contexts: However, the problem specific interface routines were modified to construct (3) and the Jacobian of G from the GAMS provided routines for CNS (F , B). 3.5 AMPL New syntax for expressing complementarity relationships has been added to the AMPL modeling language <ref> [19] </ref>. In order to test this syntax, the PATH solver has been hooked up to AMPL [23] using the AMPL library routines described in [24]. These routines allow easy implementation of the PATH problem-specific routines outlined in Section 2.2.
Reference: [20] <author> M. C. Ferris and S. Lucidi. </author> <title> Nonmonotone stabilization methods for nonlinear equations. </title> <journal> Journal of Optimization Theory and Applications, </journal> <volume> 81 </volume> <pages> 53-71, </pages> <year> 1994. </year>
Reference-contexts: The normal map for the MCP is given by F ((x)) + x (x) where (x) represents the projection of x onto B in the Euclidean norm. It is well known that if x is a zero of the normal map, then (x) solves the MCP. A non-monotone pathsearch <ref> [13, 20] </ref> using the residual of the normal map kF ((x)) + x (x)k as a merit function is used to improve robustness. A proof of convergence and rate of convergence results can be found in [32].
Reference: [21] <author> M. C. Ferris, M. P. Mesnier, and J. </author> <title> More. NEOS and condor: Solving nonlinear optimization problems over the Internet. </title> <type> Mathematical Programming Technical Report 96-08, </type> <institution> Computer Sciences Department, University of Wisconsin, Madison, Wisconsin, </institution> <note> 1996 (Revised 1998). Also available as 22 MCS-P616-1096, </note> <institution> Mathematics and Computer Science Division, Argonne National Laboratory. </institution>
Reference-contexts: The server contacts a client, transmits the problem information to the client, which then attempts to solve the problem. Results are sent back to the original submitter. The PATH solver is hooked up to NEOS via a suite of interface routines <ref> [21] </ref>. When a user submits an MCP problem to NEOS, the user specifies FORTRAN functions initpt (), xbounds (), and fcn (), along with an integer to represent n. The interface uses ADIFOR [5] to compute the Jacobian for the FORTRAN function representing the problem.
Reference: [22] <author> R. Fletcher and S. P. J. Matthews. </author> <title> Stable modifications of explicit LU factors for simplex updates. </title> <journal> Mathematical Programming, </journal> <volume> 30 </volume> <pages> 267-284, </pages> <year> 1984. </year>
Reference-contexts: One package uses a FORTRAN version of LUSOL [25] (based on a Markovitz factorization and Bartels-Golub updates). These routines are a key component of the MINOS [31] nonlinear programming package. The second is a dense matrix implementation, written in C that uses the Fletcher-Matthews <ref> [22] </ref> updating procedure. A freely distributed version of the PATH library contains the dense factorization. A library without any factorization software is also available. In this case, the user can obtain source code for MINOS from Stanford University and incorporate the appropriate object code into the library.
Reference: [23] <author> R. Fourer, D.M. Gay, and B.W. Kernighan. AMPL: </author> <title> A Modeling Language for Mathematical Programming. </title> <publisher> Duxbury Press, </publisher> <year> 1993. </year>
Reference-contexts: Some of the interfaces now supported include fl This material is based on research supported by National Science Foundation Grant CCR-9619765 and GAMS Corporation. y Computer Sciences Department, University of Wisconsin - Madison, 1210 West Dayton Street, Madison, Wisconsin 53706 (ferris,tmunson@cs.wisc.edu) 1 links to AMPL <ref> [23] </ref>, GAMS [6], MATLAB, and NEOS [9], as well as a callable subroutine library version. To further broaden the user base, implementations for some of the interfaces presented are available online at http://www.cs.wisc.edu/cpnet/path.html and the PATH library can be freely obtained by contacting one of the authors. <p> In order to test this syntax, the PATH solver has been hooked up to AMPL <ref> [23] </ref> using the AMPL library routines described in [24]. These routines allow easy implementation of the PATH problem-specific routines outlined in Section 2.2.
Reference: [24] <author> D. M. Gay. </author> <title> Hooking your solver to AMPL. </title> <type> Technical report, </type> <institution> Bell Laboratories, </institution> <address> Murray Hill, New Jersey, </address> <year> 1997. </year> <note> Revised 1994, </note> <year> 1997. </year>
Reference-contexts: In order to test this syntax, the PATH solver has been hooked up to AMPL [23] using the AMPL library routines described in <ref> [24] </ref>. These routines allow easy implementation of the PATH problem-specific routines outlined in Section 2.2. The AMPL interface routines exploit the fact that a function evaluation may have already been carried out (thus providing partial derivative information) when a call to the Jacobian evaluator is made.
Reference: [25] <author> P. E. Gill, W. Murray, M. A. Saunders, and M. H. Wright. </author> <title> Maintaining LU factors of a general sparse matrix. </title> <journal> Linear Algebra and Its Applications, </journal> 88/89:239-270, 1987. 
Reference-contexts: The choice of which package to use is done at link time without making any modifications to the code PATH code. One package uses a FORTRAN version of LUSOL <ref> [25] </ref> (based on a Markovitz factorization and Bartels-Golub updates). These routines are a key component of the MINOS [31] nonlinear programming package. The second is a dense matrix implementation, written in C that uses the Fletcher-Matthews [22] updating procedure. <p> The technique relies upon the factorization to tell the linearly dependent columns of M Z;Z . LUSOL <ref> [25] </ref> and our dense factorization provide this information (see section 4.1). Some of the variables may be nonbasic, but not at their bounds. For such variables, the corresponding artificial will be basic.
Reference: [26] <author> P. E. Gill, W. Murray, M. A. Saunders, and M. H. Wright. </author> <title> A practical anti-cycling procedure for linearly constrained optimization. </title> <journal> Mathematical Programming, </journal> <volume> 45 </volume> <pages> 437-474, </pages> <year> 1989. </year>
Reference-contexts: that an inverse exists, we rearrange the rows and columns to obtain the following matrix, which is easily shown to be invertible because M 1 Z;Z is known to exist: ^ H = 6 4 I V;V M V;Z M Z;Z 7 5 We use a modified version of EXPAND <ref> [26] </ref> to perform the ratio test. Vari ables are prioritized as follows: 1. t leaving at its upper bound. 2. Any artificial variable. 14 3. Any z, w, or v variable.
Reference: [27] <author> A. Griewank, D. Juedes, and J. Utke. ADOL-C: </author> <title> A package for the automatic differentiation of algorithms written in C/C++. </title> <journal> ACM Transactions on Mathematical Software, </journal> <year> 1996. </year>
Reference-contexts: All these routines are linked with the PATH library to produce an executable that is run on one of the machines in the Condor pool [30] available at Wisconsin. Current work involves generating a new C interface using ADOL-C <ref> [27] </ref> and allowing the PATH solver to be called across the Internet as a subroutine in a manner similar to that outlined in Section 3.2. 3.4 GAMS The major users of PATH continue to be economists, many of whom use the code [13] for solving MCP models generated with the MPSGE
Reference: [28] <author> N. H. Josephy. </author> <title> Newton's method for generalized equations. </title> <type> Technical Summary Report 1965, </type> <institution> Mathematics Research Center, University of Wisconsin, Madison, Wisconsin, </institution> <year> 1979. </year>
Reference-contexts: In particular, PATH can emulate Lemke's method [8, 29] for LCP with the following options: crash_method none; major_iteration_limit 1; lemke_start first; nms no; If instead, PATH is to imitate the Josephy Newton method <ref> [28] </ref> for NCP with an Armijo style linesearch on the normal map residual, then the options to use are: crash_method none; lemke_start always; nms_initial_reference_factor 1; nms_memory size 1; nms_mstep_frequency 1; nms_searchtype line; Note that nms memory size 1 and nms initial reference factor 1 turn off the non-monotone linesearch, while nms
Reference: [29] <author> C. E. Lemke and J. T. Howson. </author> <title> Equilibrium points of bimatrix games. </title> <journal> SIAM Journal on Applied Mathematics, </journal> <volume> 12 </volume> <pages> 413-423, </pages> <year> 1964. </year>
Reference-contexts: When the PATH implementation was rewritten, the names of several options were changed. We give a list of the user-available options along with their defaults and meaning in Table 6. In particular, PATH can emulate Lemke's method <ref> [8, 29] </ref> for LCP with the following options: crash_method none; major_iteration_limit 1; lemke_start first; nms no; If instead, PATH is to imitate the Josephy Newton method [28] for NCP with an Armijo style linesearch on the normal map residual, then the options to use are: crash_method none; lemke_start always; nms_initial_reference_factor 1;
Reference: [30] <author> M. J. Litzkow, M. Livny, and M. W. </author> <title> Mutka. Condor: A hunter of idle workstations. </title> <booktitle> In Proceedings of the 8th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 104-111, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: All these routines are linked with the PATH library to produce an executable that is run on one of the machines in the Condor pool <ref> [30] </ref> available at Wisconsin.
Reference: [31] <author> B. A. Murtagh and M. A. Saunders. </author> <title> MINOS 5.0 user's guide. </title> <type> Technical Report SOL 83.20, </type> <institution> Stanford University, Stanford, California, </institution> <year> 1983. </year>
Reference-contexts: The most popular approach in GAMS to solving this problem has been to set up a dummy objective function and solve min 0 subject to F (x) = 0; x 2 B: (1) The new CNS model type allows solvers such as CONOPT [17] and MINOS <ref> [31] </ref> to set up alternative internal models to solve (1) such as min kF (x)k 2 subject to x 2 B: (2) Our work internally reformulates the CNS model as an MCP. One choice would be to solve the Karush-Kuhn-Tucker conditions of (2) as an MCP. <p> The choice of which package to use is done at link time without making any modifications to the code PATH code. One package uses a FORTRAN version of LUSOL [25] (based on a Markovitz factorization and Bartels-Golub updates). These routines are a key component of the MINOS <ref> [31] </ref> nonlinear programming package. The second is a dense matrix implementation, written in C that uses the Fletcher-Matthews [22] updating procedure. A freely distributed version of the PATH library contains the dense factorization. A library without any factorization software is also available.
Reference: [32] <author> D. Ralph. </author> <title> Global convergence of damped Newton's method for nons-mooth equations, via the path search. </title> <journal> Mathematics of Operations Research, </journal> <volume> 19 </volume> <pages> 352-389, </pages> <year> 1994. </year>
Reference-contexts: A non-monotone pathsearch [13, 20] using the residual of the normal map kF ((x)) + x (x)k as a merit function is used to improve robustness. A proof of convergence and rate of convergence results can be found in <ref> [32] </ref>. The enhancements described in this paper do not change the basic properties of the algorithm; they only modify the implementation. Hence, the theory already developed [32, 12] still applies. 2 Component Interfaces Object-oriented design techniques were used to completely restructure the PATH code. <p> A proof of convergence and rate of convergence results can be found in [32]. The enhancements described in this paper do not change the basic properties of the algorithm; they only modify the implementation. Hence, the theory already developed <ref> [32, 12] </ref> still applies. 2 Component Interfaces Object-oriented design techniques were used to completely restructure the PATH code. The basic premise is to encapsulate data and functions together into ob 2 jects. The implementation for each of the objects is hidden from the user.
Reference: [33] <author> S. M. Robinson. </author> <title> Normal maps induced by linear transformations. </title> <journal> Mathematics of Operations Research, </journal> <volume> 17 </volume> <pages> 691-714, </pages> <year> 1992. </year>
Reference-contexts: i 2 f1; : : : ; ng: l i z i u i and F i (z) = 0 z i = u i and F i (z) &lt; 0: The core PATH algorithm [12] uses a nonsmooth Newton method [34] to find a zero of the normal map <ref> [33] </ref> associated with the MCP. The normal map for the MCP is given by F ((x)) + x (x) where (x) represents the projection of x onto B in the Euclidean norm.
Reference: [34] <author> S. M. Robinson. </author> <title> Newton's method for a class of nonsmooth functions. Set Valued Analysis, </title> <booktitle> 2 </booktitle> <pages> 291-305, </pages> <year> 1994. </year>
Reference-contexts: if exactly one of the following holds for each i 2 f1; : : : ; ng: l i z i u i and F i (z) = 0 z i = u i and F i (z) &lt; 0: The core PATH algorithm [12] uses a nonsmooth Newton method <ref> [34] </ref> to find a zero of the normal map [33] associated with the MCP. The normal map for the MCP is given by F ((x)) + x (x) where (x) represents the projection of x onto B in the Euclidean norm.
Reference: [35] <author> T. F. Rutherford. MILES: </author> <title> A mixed inequality and nonlinear equation solver. </title> <type> Working Paper, </type> <institution> Department of Economics, University of Colorado, Boulder, </institution> <year> 1993. </year> <month> 23 </month>
Reference-contexts: CPLIB [16], a suite of routines giving a solver access to problem-specific information, including function and Jacobian evaluations, facilitates the linkage of PATH and other solvers <ref> [1, 4, 7, 35] </ref> to GAMS. The GAMS/MCP interface to PATH [16] remains essentially unchanged. However, several new uses of the code from within GAMS were 9 made possible because of the added flexibility provided by the object-oriented design, the reuse of memory, and access to the workspace.
Reference: [36] <author> T. F. Rutherford. </author> <title> Extensions of GAMS for complementarity problems arising in applied economic analysis. </title> <journal> Journal of Economic Dynamics and Control, </journal> <volume> 19 </volume> <pages> 1299-1324, </pages> <year> 1995. </year>
Reference-contexts: 1 Introduction The PATH solver [12] for mixed complementarity problems (MCPs) was introduced in 1995 and has since become the standard against which new MCP solvers are compared. However, the main user group for PATH continues to be economists using the MPSGE preprocessor <ref> [36] </ref>. While developing the new PATH implementation, we had two goals: to make the solver accessible to a broad audience and to improve the effectiveness of the code on large, complex problems. Therefore, this paper is split into two main parts, each discussing one of these issues. <p> allowing the PATH solver to be called across the Internet as a subroutine in a manner similar to that outlined in Section 3.2. 3.4 GAMS The major users of PATH continue to be economists, many of whom use the code [13] for solving MCP models generated with the MPSGE preprocessor <ref> [36, 37] </ref> of the GAMS modeling language [6]. CPLIB [16], a suite of routines giving a solver access to problem-specific information, including function and Jacobian evaluations, facilitates the linkage of PATH and other solvers [1, 4, 7, 35] to GAMS. The GAMS/MCP interface to PATH [16] remains essentially unchanged.
Reference: [37] <author> T. F. Rutherford. </author> <title> Applied general equilibrium modeling with MPSGE as a GAMS subsystem: An overview of the modeling framework and syntax. Computational Economics, </title> <publisher> forthcoming, </publisher> <year> 1997. </year> <month> 24 </month>
Reference-contexts: allowing the PATH solver to be called across the Internet as a subroutine in a manner similar to that outlined in Section 3.2. 3.4 GAMS The major users of PATH continue to be economists, many of whom use the code [13] for solving MCP models generated with the MPSGE preprocessor <ref> [36, 37] </ref> of the GAMS modeling language [6]. CPLIB [16], a suite of routines giving a solver access to problem-specific information, including function and Jacobian evaluations, facilitates the linkage of PATH and other solvers [1, 4, 7, 35] to GAMS. The GAMS/MCP interface to PATH [16] remains essentially unchanged.
References-found: 37

