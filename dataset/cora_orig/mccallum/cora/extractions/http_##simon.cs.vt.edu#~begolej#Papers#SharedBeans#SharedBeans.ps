URL: http://simon.cs.vt.edu/~begolej/Papers/SharedBeans/SharedBeans.ps
Refering-URL: http://simon.cs.vt.edu/~begolej/Papers/SharedBeans/
Root-URL: http://www.cs.vt.edu
Email: fbegolej, isenhour, shafferg@cs.vt.edu  
Title: JavaBeans as a Framework for Collaborative Software  
Author: James "Bo" Begole Philip L. Isenhour Clifford A. Shaffer 
Keyword: Computer-supported cooperative work, groupware, component frameworks, Java, JavaBeans.  
Date: August 18, 1998  
Address: VA 24061  
Affiliation: Department of Computer Science Virginia Tech Blacksburg,  
Abstract: We describe the use of a popular component architecture, JavaBeans, as a framework for developing synchronous collaborative software. We first describe the class of collaboration-unaware components (components originally designed for single users) that can be effectively shared under this framework. We then describe a simple extension to JavaBeans that supports development of efficient collaboration-aware components. A collaborative version of the HotJava browser bean illustrates how significant software components may be shared with little or no implementation ef fort.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Burridge. </author> <title> Java TM Shared Data Toolkit User Guide. User guide, Sun Microsystems, </title> <publisher> Inc., </publisher> <address> Mountain View, CA, </address> <month> Apr. </month> <year> 1998. </year>
Reference-contexts: When a PropertyChangeEvent is generated, Sieve packages it in a message that is sent to the corresponding replicas. These messages are sent in the same order to each replica using a communications package specifically designed for collaborative software, called Java Shared Data Toolkit (JSDT) <ref> [1] </ref>. When such a message is received, the local replica of the changed component is found, and the changed property is set to the new value. Late-comers are brought up to date by replaying the record of property changes.
Reference: [2] <author> P. Isenhour, J. B. Begole, W. S. Heagy, and C. A. Shaffer. </author> <title> Sieve: A Java-Based Collaborative Visualization Environment. </title> <booktitle> In IEEE Visualization '97 Late Breaking Hot Topics Proceeding, </booktitle> <pages> pages 13-16, </pages> <month> Oct.22-24 </month> <year> 1997. </year>
Reference-contexts: Properties such as the "document String," may be edited directly on the browser bean or in the lower-left "Properties" window. <ref> [2] </ref> (Figure 1), listens for property changes from each bean component. When a PropertyChangeEvent is generated, Sieve packages it in a message that is sent to the corresponding replicas.
Reference: [3] <author> A. Karsenty and M. Beaudouin-Lafon. </author> <title> An Algorithm for Distributed Group-ware Applications. </title> <booktitle> In Proceedings of the 13th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 195-202, </pages> <address> Pittsburgh, PA, May 1993. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: To resolve this, we use the strategy described by Karsenty and Beaudouin-Lafon <ref> [3] </ref>, where potentially conflicting operations mask, commute or are order-specific. Typically, property changes are maskable. That is, when two operations occur in sequence, the result is the same as when only the last change is applied. Examples of typical maskable properties are color, length, position, and size.
Reference: [4] <author> C. Sun and C. S. Ellis. </author> <title> Operational transformation in real-time group editors: Issues algorithms, and achievements. </title> <booktitle> In Proceedings of the ACM conference on Computer-Supported Cooperative Work (CSCW'98), </booktitle> <month> Nov. </month> <year> 1998. </year> <note> in press. </note>
Reference-contexts: This can be trivially implemented by not applying the change locally until the corresponding message returns. More efficient algorithms are known, such as the distributed operational transformation algorithms described by Sun and Ellis <ref> [4] </ref>. 3.2 Collaboration Unaware and Aware Components Many useful collaboration-unaware components may be quickly developed and shared with our approach. For example, we implemented a collaborative wrapper for the HotJava Bean component that consists of less than 100 lines of code.
Reference: [5] <author> JavaBeans TM 1.01, </author> <title> last access: </title> <journal> Aug. </journal> <volume> 18, </volume> <year> 1998. </year> <note> &lt;http://splash.javasoft.- com/beans/docs/beans.101.pdf&gt;. 6 </note>
Reference-contexts: The purpose of this paper is to describe programming features of the language that make the development task especially convenient. 2 JavaBeans and Bound Properties We begin with some terminology. In JavaBeans, a bean is simply a component that conforms to the bean specification <ref> [5] </ref>. Beans communicate with each other through the use of properties, which are "named attribute [s] associated with a bean that can be read or written by calling appropriate methods on the bean [5]." Typically, a bean exposes its state through its public properties. <p> In JavaBeans, a bean is simply a component that conforms to the bean specification <ref> [5] </ref>. Beans communicate with each other through the use of properties, which are "named attribute [s] associated with a bean that can be read or written by calling appropriate methods on the bean [5]." Typically, a bean exposes its state through its public properties. A property is declared by matched get and set methods. For example, an object can expose a property named background by simply providing methods named getBackground and setBackground, with appropriately typed return values and parameters.
References-found: 5

