URL: ftp://ftp.cs.man.ac.uk/pub/TR/UMCS-98-6-1-fuchs.ps.Z
Refering-URL: ftp://ftp.cs.man.ac.uk/pub/TR/UMCS-98-6-1.html
Root-URL: http://www.cs.man.ac.uk
Email: schwitter-@ifi.unizh.ch  
Title: Attempto Controlled English Not Just Another Logic Specification Language  
Author: Norbert E. Fuchs, Uta Schwertel, Rolf Schwitter 
Web: http://www.ifi.unizh.ch/~fuchs/  
Address: -fuchs, uschwert,  
Affiliation: Department of Computer Science, University of Zurich  
Abstract-found: 0
Intro-found: 1
Reference: [Balzer 85] <author> R. M. Balzer, </author> <title> A 15 Year Perspective on Automatic Programming, </title> <journal> IEEE Transactions Software Engineering, </journal> <volume> 11(11), pp.1257-1268, </volume> <year> 1985 </year>
Reference-contexts: Similar observations were made earlier by <ref> [Balzer 85] </ref>. Deville develops logic programs from primarily formal specifications [Deville 90]. Interestingly, he states the specified relation itself in natural language. Traditionally, specifications have been expressed in natural language.
Reference: [Le Charlier & Flener 98] <author> B. Le Charlier, P. Flener, </author> <title> Specifications Are Necessarily Informal, or: The Ultimate Myths of Formal Methods, </title> <journal> Journal of Systems and Software, Special Issue on Formal Methods Technology Transfer 40(3), </journal> <pages> pp. 275-296, </pages> <month> March </month> <year> 1998 </year>
Reference-contexts: 1 Introduction Specifications are a set of precisely stated properties or constraints which a software system must satisfy to solve a problem. Specifications describe the interface between the problem domain and the software system [Jackson 95], i.e. they define the purpose of the software system and its correct use <ref> [Le Charlier & Flener 98] </ref>. In which language should we express these specifications? Formal specification languages often logic languages or languages based on logic have been advocated because they have an unambiguous syntax and a clean semantics, and promise substantial improvements of the software development process [cf. www.comlab.ox.ac.uk/archive/formal-methods]. <p> It seems that we are stuck between the over-exibility of natural language and the potential incomprehensibility of formal languages. While some authors claim that specifications need to be expressed in natural language and that formal specifications are a contradiction in terms <ref> [Le Charlier & Flener 98] </ref>, we are convinced that the advantages of natural and formal specification languages should be and can be combined. The solution lies in the insight that natural language can be used very precisely.
Reference: [CLAW 96] <editor> Proceedings CLAW 96, </editor> <booktitle> First International Workshop on Controlled Language Applications, </booktitle> <institution> Centre for Computational Linguistics, Katholieke Universiteit Leuven, Belgium, </institution> <month> March </month> <year> 1996 </year>
Reference-contexts: The solution lies in the insight that natural language can be used very precisely. Examples are legal language and the so-called controlled languages used for technical documentation and machine translation <ref> [CLAW 96] </ref>. However, all these languages are usually ad hoc defined and rely on rather liberal rules of style and on conventions to be enforced by humans.
Reference: [Covington 94] <author> M. A. Covington, GULP 3.1: </author> <title> An Extension of Prolog for Unification-Based Grammars, </title> <institution> Research Report AI-1994-06, Artificial Intelligence Center, University of Georgia, </institution> <year> 1994 </year>
Reference-contexts: However, notwithstanding its natural character ACE is indeed a formal specification language as we will show next. 3 From ACE to Discourse Representation Structures ACE specifications are analysed and processed deterministically by a unification-based phrase structure grammar enhanced by linearised feature structures written in GULP <ref> [Covington 94] </ref>. Unification-based grammars are declarative statements of well-formedness conditions and do not pin down a parsing strategy in advance. Prolog's built in top-down recursive-descendent parser would use strict chronological back-tracking to search a proof for an ACE sentence.
Reference: [Deville 90] <author> Y. Deville, </author> <title> Logic Programming, Systematic Program Development, </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1990 </year>
Reference-contexts: Similar observations were made earlier by [Balzer 85]. Deville develops logic programs from primarily formal specifications <ref> [Deville 90] </ref>. Interestingly, he states the specified relation itself in natural language. Traditionally, specifications have been expressed in natural language. Natural language as the prototypical means of human communication needs not to be learned, is easy to use and to understand.
Reference: [Fuchs 92] <author> N. E. Fuchs, </author> <title> Specifications Are (Preferably) Executable, </title> <journal> Software Engineering Journal, </journal> <volume> 7, </volume> <month> 5 (September </month> <year> 1992), </year> <pages> pp. 323-334, </pages> <year> 1992 </year>
Reference-contexts: In particular, formal specification languages offer support for the automatic analysis of specifications such as consistency verification, and the option to validate specifications through execution <ref> [Fuchs 92] </ref>.
Reference: [Fuchs et al. 98] <author> N. E. Fuchs, U. Schwertel, R. Schwitter, </author> <title> Attempto Controlled English (ACE), Language Manual, </title> <type> Version 2.0, </type> <institution> Institut fr Informatik, Universitt Zrich, </institution> <year> 1998 </year>
Reference-contexts: Taking these languages as a lead we have defined the specification language Attempto Controlled English (ACE) a subset of standard English with a domain-specific vocabulary, a restricted grammar, and a small set of construction and interpretation rules <ref> [Schwitter 98; Fuchs et al. 98] </ref>. ACE allows users to express specifications precisely, and in the terms of the application domain. ACE specifications are computer-processable and can be unambiguously translated into a logic language.
Reference: [Hall 90] <author> A. Hall, </author> <title> Seven Myths of Formal Methods, </title> <journal> IEEE Software, </journal> <volume> 7, 5, </volume> <pages> pp. 11-19, </pages> <year> 1990 </year>
Reference-contexts: shown that formal specification languages suffer from major shortcomings they are hard to understand and difficult to relate to the application domain, and need to be accompanied by a description in natural language that "explains what the specification means in real-world terms and why the specification says what it does" <ref> [Hall 90] </ref>. Similar observations were made earlier by [Balzer 85]. Deville develops logic programs from primarily formal specifications [Deville 90]. Interestingly, he states the specified relation itself in natural language. Traditionally, specifications have been expressed in natural language.
Reference: [Jackson 95] <author> M. Jackson, </author> <title> Software Requirements & Specifications: A Lexicon of Practice, </title> <booktitle> Principles and Prejudices, </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1995 </year>
Reference-contexts: 1 Introduction Specifications are a set of precisely stated properties or constraints which a software system must satisfy to solve a problem. Specifications describe the interface between the problem domain and the software system <ref> [Jackson 95] </ref>, i.e. they define the purpose of the software system and its correct use [Le Charlier & Flener 98].
Reference: [Kamp & Reyle 93] <author> H. Kamp, U. Reyle, </author> <title> From Discourse to Logic, Introduction to Modeltheoretic Semantics of Natural Language, Formal Logic and Discourse Representation Theory, </title> <booktitle> Studies in Linguistics and Philosophy 42, </booktitle> <publisher> Kluwer, </publisher> <year> 1993 </year>
Reference-contexts: But if the two sentences are treated as separate propositions as predicate logic does then their variables cannot be under the scope of the same quantifiers. We solve this problem by employing discourse representation theory that resolves anaphoric references in a systematic way combining the two propositions into one <ref> [Kamp & Reyle 93] </ref>. In our case, ACE sentences are translated into Discourse Representation Theory with Eventualities (DRT-E). DRT-E is a structured form of predicate logic that represents a multisentential specification discourse in a single logical unit called a discourse representation structure (DRS).
Reference: [Macias & Pulman 95] <author> B. Macias, S. G. Pulman, </author> <title> A Method for Controlling the Production of Specifications in Natural Language, </title> <journal> The Computer Journal, </journal> <volume> vol. 38, no. 4, </volume> <pages> pp. 310-318, </pages> <year> 1995 </year>
Reference-contexts: Ma-cias and Pulman, however, developed a system to write natural language specifications which resembles ours with the important difference that their system restricts only the form of composite sentences, but leaves the form of the constituent simple sentences completely free <ref> [Macias & Pulman 95] </ref>. As a consequence, the thorny problem of ambiguity remains and has to be resolved by the users post factum. Extended Abstracts of LOPSTR'98, Eighth International Workshop on Logic-Based Program Synthesis and Transformation, 15-19 June 1998, Manchester, UK.
Reference: [Meyer 85] <author> B. Meyer, </author> <title> On Formalism in Specifications, </title> <journal> IEEE Software, </journal> <volume> vol. 2, no.1, </volume> <pages> pp. 6-26, </pages> <year> 1985 </year>
Reference-contexts: Enhanced by appropriate domain-specific notations, natural language can be used to express any problem. Nevertheless, again experience has shown that uncontrolled use of natural language can lead to ambiguous, imprecise and unclear specifications with possibly disastrous consequences for the subsequent software development <ref> [Meyer 85] </ref>. It seems that we are stuck between the over-exibility of natural language and the potential incomprehensibility of formal languages.
Reference: [Reyle & Gabbay 94] <author> U. Reyle, D. M. Gabbay, </author> <title> Direct Deductive Computation on Discourse Representation Structures, </title> <journal> Linguistics and Philosophy, </journal> <volume> 17, August 94, </volume> <pages> pp. 343-390, </pages> <year> 1994 </year>
Reference-contexts: During the translation existentially quantified discourse referents are replaced by Skolem constants or Skolem functions. Conjunctive consequences of an if-then DRS lead to sets of Prolog clauses, one clause for each conjunct. 4 Deductions from Discourse Representation Structures On the basis of a proposal by <ref> [Reyle & Gabbay 94] </ref> we have developed a correct and complete theo rem prover for discourse representation structures. To prove that a discourse representation structure is logically implied by a discourse representation structure the theorem prover proceeds in a goal-directed way without any human intervention.
Reference: [Schwitter 98] <author> R. Schwitter, Kontrolliertes Englisch fr Anforderungsspezifikationen, Dissertation, Universitt Zrich, </author> <year> 1998 </year>
Reference-contexts: Taking these languages as a lead we have defined the specification language Attempto Controlled English (ACE) a subset of standard English with a domain-specific vocabulary, a restricted grammar, and a small set of construction and interpretation rules <ref> [Schwitter 98; Fuchs et al. 98] </ref>. ACE allows users to express specifications precisely, and in the terms of the application domain. ACE specifications are computer-processable and can be unambiguously translated into a logic language.
Reference: [Wing 90] <author> J. M. Wing, </author> <title> A Specifiers's Introduction to Formal Methods, </title> <journal> IEEE Computer, </journal> <volume> 23, 9, </volume> <pages> pp. 8-24, </pages> <year> 1990 </year>
Reference-contexts: Abduction investigates under which conditions we can derive particular consequences from the logic specification In other words, we try to find an explanation for the phenomenon Executing the Specification Model-oriented logic specifications build a behavioural model of the future program <ref> [Wing 90] </ref>, and one might be interested in executing this model to demonstrate its behaviour, be it for validation, or for prototyping. Formally, this form of execution is based on the reflexivity of the deduction relation. The derivation succeeds trivially.
References-found: 15

