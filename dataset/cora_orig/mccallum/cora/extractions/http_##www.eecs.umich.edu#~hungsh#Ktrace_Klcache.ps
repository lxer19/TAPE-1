URL: http://www.eecs.umich.edu/~hungsh/Ktrace_Klcache.ps
Refering-URL: http://www.eecs.umich.edu/~hungsh/research_summary.html
Root-URL: http://www.eecs.umich.edu
Title: Design of Trace-Driven Simulation Tools for the KSR1 Massively Parallel Processor System 1 1.0 Introduction
Note: K-LCache also assumes that no subpage written by a processor is accessed by any other  It does, however, check that this assumption is  
Abstract: The KSR1 shared-memory multiprocessor is a Cache-Only-Memory-Architecture (COMA) system, on which interprocessor communication takes the form of subpage transfers among hardware-managed coherent local caches. The interprocessor communications are transparent to the users since they are done automatically at the hardware level. Therefore, unlike message-passing programming, shared-memory programming usually does not control interprocessor communications explicitly by communication instructions. And the implicit communications, i.e. the coherence traffic among local caches, are often invisible to the users and too complicated to analyze without automatic tools. To solve this problem, we have developed a scheme to acquire the communication patterns of parallel programs by simulating the behavior of the local caches on the KSR1. A tool, K-Trace, was developed to instrument a parallel application code at the assembly code level and generate a memory reference and synchronization point trace for each processor in parallel. K-trace is based on in-line tracing, a method which has been broadly used on code instrumentation. The development of K-trace was complicated by the nature of assembly language programming on the KSR1 and by the availability of only incomplete documentation. Another tool, K-LCache, driven by the traces, simulates the local caches in parallel and produces the communication patterns. Since we are primarily interested in analyzing the coherence communication traffic in a trace, the actual size and associativity of local caches on the KSR1 are not important in the simulation. K-LCache assumes that a local cache is infinite sized and fully associative. With this simplifying assumption, accurate information on coherence traffic can be obtained. Moreover, memory references to different virtual addresses can be simulated independently in K-LCache. By partitioning a trace into disjoint sub-traces that contain different ranges of referenced addresses, a simulation can be divided into sub-simulations that simulate corresponding ranges of addresses. With this approach, the simulation can be executed by smaller scale simulators run in parallel to reduce simulation time and allow larger or more simulations in a deadline-oriented project. 
Abstract-found: 1
Intro-found: 1
Reference: [ChJV 93] <author> A. Chatterjee, J. Jin, and J. Volakis, </author> <title> Application of edge-based finite elements and ABCs to 3-D scattering, </title> <journal> IEEE Transactions on Antennas and Propagation, </journal> <year> 1993. </year>
Reference-contexts: FEM-ATS is an application code developed at the University of Michigan that models backscatter radiation <ref> [ChJV 93] </ref>. It determines the frequency response obtained from broadcasting a pulse of electromagnetic radiation at a solid object, where the object and the surrounding space is modeled as a collection of finite elements.
Reference: [KSR 92] <institution> Kendall Square Research, KSR1 Principles of Operation, </institution> <year> 1992. </year>
Reference-contexts: These state changes are also shown in Figure 2-2. 2.3 Interprocessor Communication in the KSR1 In the KSR1, processors communicate with the memory system via two primary logical interfaces <ref> [KSR 92] </ref>: EO I Pwrite Pread Nread, RQP Nwrite Pread Nread, RSP Nwrite Pwrite Nwrite Pwrite Nread, R Pread Nread, R Pwrite Nwrite Pread Nread, R Subpage States I = invalid C = Copy EO = Exclusive Owner NO = Non-exclusive Owner Notation N = Network P = Processor R = <p> The KSR company documented this feature as remote instruction execution, which arises when a second jump or taken branch is in a delay slot <ref> [KSR 92] </ref>. For example, the program shown in Figure 3-5 executes the instruction at the following addresses: Design of Trace-Driven Simulation Tools for the KSR1 Massively Parallel Processor System 17 000, 008, 010, 100, 018, 020, and so on.
Reference: [MeEi 91] <author> U. Meier and R. Eigenmann, </author> <title> Parallelization and performance of conjugate gradient algorithms on the Cedar hierarchical memory multiprocessor, </title> <booktitle> in Proc. of the 3rd ACM Sigplan Symp. on Principles and Practice of Parallel Programming, </booktitle> <address> Williamsburg, VA, </address> <month> April </month> <year> 1991. </year>
Reference-contexts: The discretization of the Maxwell equations leads to a system of complex linear equations which is solved using a diagonal-preconditioned symmetric biconjugate gradient method. A description of the parallelization of the conjugate gradient algorithm for the Cedar multiprocessor system, developed at the University of Illinois, can be found in <ref> [MeEi 91] </ref>. An analysis of communication for the algorithm on the KSR1 can be found in [WBHAD 93]. The symmetric biconjugate gradient method iteratively refines an approximate solution of the given linear system until convergence.
Reference: [SuAb 92] <author> R. A. Sugumar and S. G. Abraham, </author> <title> Efficient Simulation of Caches under Optimal Replacement with Applications to Miss Characterization, </title> <institution> CSE-TR-143-92, The University of Michigan, </institution> <year> 1992. </year>
Reference-contexts: In this study, we focus on data access because it is the major source of communication. Data access appears as local cache miss in the KSR1. Five types of local cache misses can be identified (detailed discussion of types 1-4 can be found in <ref> [SuAb 92] </ref>: 1. Compulsory misses: data items downloaded from disk, which happen when a cache block is accessed by a program for the first time. 2. Capacity misses: misses due to the limited cache size.
Reference: [WBHAD 93] <author> D. Windheiser, E. L. Boyd, E. Hao, S. G. Abraham, E. S. Davidson, </author> <title> KSR1 Multiprocessor: Analysis of Latency Hiding Techniques in a Sparse Solver, </title> <booktitle> PRoc. 7th Intl Parallel Processing Symposium, </booktitle> <address> Newport Beach, CA, </address> <month> April, </month> <year> 1993. </year>
Reference-contexts: Design of Trace-Driven Simulation Tools for the KSR1 Massively Parallel Processor System 3 2.0 Overview of the KSR1 Memory Architecture Sections 2.0 to 2.2 are mostly extracted from <ref> [WBHAD 93] </ref>. The Kendall Square Research KSR1 is a scalable shared-memory MPP system. As shown in Figure 2-1, the memory system of the KSR1 is built as a group of ALLCACHE engines, connected in a fat tree hierarchy of rings. <p> A description of the parallelization of the conjugate gradient algorithm for the Cedar multiprocessor system, developed at the University of Illinois, can be found in [MeEi 91]. An analysis of communication for the algorithm on the KSR1 can be found in <ref> [WBHAD 93] </ref>. The symmetric biconjugate gradient method iteratively refines an approximate solution of the given linear system until convergence. Figure 5-1 shows the central routine of the method in terms of vector and matrix operations. The program is composed by about 30 Fortran source files.
References-found: 5

