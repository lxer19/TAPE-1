URL: http://www.cs.umass.edu/~gao/jpdc96.ps
Refering-URL: http://www.cs.umass.edu/~gao/
Root-URL: 
Title: Toward Efficient Scheduling of Evolving Computations on Rings of Processors Running Head. Efficient Evolving Computations
Author: Li-Xin Gao Arnold L. Rosenberg 
Keyword: T tree (n; p)  
Note: (2 n 1) p (2 cos(=p)) n (1 o(1))  
Address: Amherst, Mass. 01003, USA  
Affiliation: Department of Computer Science University of Massachusetts  
Pubnum: 2  
Email: fgao, rsnbrgg@cs.umass.edu  
Date: 2  
Abstract: We study a simple, low-overhead policy for scheduling dynamically evolving computations in which tasks that spawn produce precisely two offspring, on rings of processors. Such computations include, for instance, tree-structured branching computations. We believe that our policy yields good parallel speedup on large classes of these computations, but we have not yet been able to verify this. In the current paper, we adduce evidence that the policy works well on computations that end up being large and "bushy," by showing (a) that it balances loads well as long as tasks keep spawning, and (b) that it yields asymptotically optimal parallel speedup when the evolving computations end up having the structure of complete binary trees or of two-dimensional pyramidal meshes. Specifically, we show that a p-processor ring can execute a computation that evolves into the height-n complete binary tree (which has 2 n 1 nodes) in time ? A portion of this paper was presented at the 6th IEEE Symp. on Parallel and Distributed Processing, 1994, under the title "On balancing computational load on rings of processors." 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R.P. </author> <title> Brent (1974): The parallel evaluation of general arithmetic expressions. </title> <editor> J. </editor> <booktitle> ACM 21, </booktitle> <pages> 201-206. </pages>
Reference-contexts: The problem of balancing computational loads so as to approach this goal has received considerable attention since the advent of (even the promise of) parallel computers (cf. <ref> [1] </ref>). In this paper, we describe a simple, low-overhead policy which we believe balances and schedules loads well for a variety of dynamically evolving computations, on parallel architectures whose underlying structure is a ring of identical processors.
Reference: [2] <author> T. Cormen, C.E. Leiserson, </author> <title> R.L. Rivest (1990): Introduction to Algorithms. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Mass. </address>
Reference-contexts: We derive the more perspicuous bound (3.2) on W i (n) by gauging the actual workshares' deviations from the ideal workshare. In what follows, ! is a primitive pth root of unity, and 9 F p (!) is the order-p DFT (Discrete Fourier Transform <ref> [2] </ref>, p. 786) matrix 6 F p (!) = B B B B B 1 1 1 1 1 1 ! 2 ! 4 ! 6 ! 2 (p1) . . . . . . . . . 1 ! p1 ! 2 (p1) ! 3 (p1) ! (p1) 2 C
Reference: [3] <author> G. </author> <title> Even (1991): Construction of Small Probability Spaces for Deterministic Simulation (in Hebrew). M.Sc. </title> <type> Thesis, </type> <institution> The Technion. </institution>
Reference-contexts: W i (n) in terms of !: W i (n) = p 4 (2 n 1) + j=1 5 = p 4 2 n + j=1 3 (3.4) 6 The authors discovered after completing this paper that essentially the same analysis appears, with different motivation, in the unpublished Master's thesis <ref> [3] </ref>. 10 the second equality following since P p1 j=0 fl j = 0 for any pth root of unity fl (since the sum is invariant under multiplication by fl 6= 0).
Reference: [4] <author> L.-X. Gao, D.E. Gregory, A.L. Rosenberg, P.R. </author> <title> Cohen (1996): Efficient scheduling of branching computations on rings of processors: an empirical study. </title> <publisher> Typescript, Univ. Mas-sachusetts. </publisher>
Reference-contexts: We are in the process of studying our scheduling policy, together with some refinements, empirically, to determine its behavior on a much broader class of dynamically evolving computations <ref> [4] </ref>. We present the current results separately, since we believe that our techniques of analysis here may apply in other arenas. 2 The Formal Setting 2.1 Our Load-Balancing Problem The Architecture. We focus on rings of identical processors (PEs, for short).
Reference: [5] <author> R.M. Karp and Y. </author> <title> Zhang (1988): Randomized parallel algorithms for backtrack search and branch-and-bound computation. </title> <editor> J. </editor> <booktitle> ACM 40, </booktitle> <pages> 765-789. </pages>
Reference-contexts: The challenge of balancing loads on such architectures is their large diameters and small bisection-bandwidths, which preclude certain provably effective balancing-via-randomizing policies <ref> [5, 6, 7, 8] </ref>. While we have not yet been able to delimit the class of computations that our policy works well on, we report here on a first step toward this end.
Reference: [6] <author> R. Luling and B. </author> <title> Monien (1993): A dynamic, distributed load-balancing algorithm with provable good performance. </title> <booktitle> 5th ACM Symp. on Parallel Algorithms and Architectures, </booktitle> <pages> 164-172. </pages>
Reference-contexts: The challenge of balancing loads on such architectures is their large diameters and small bisection-bandwidths, which preclude certain provably effective balancing-via-randomizing policies <ref> [5, 6, 7, 8] </ref>. While we have not yet been able to delimit the class of computations that our policy works well on, we report here on a first step toward this end.
Reference: [7] <author> A.G. </author> <title> Ranade (1994): Optimal speedup for backtrack search on a butterfly network. </title> <journal> Math. Syst. Theory 27, </journal> <pages> 85-101. </pages>
Reference-contexts: The challenge of balancing loads on such architectures is their large diameters and small bisection-bandwidths, which preclude certain provably effective balancing-via-randomizing policies <ref> [5, 6, 7, 8] </ref>. While we have not yet been able to delimit the class of computations that our policy works well on, we report here on a first step toward this end.
Reference: [8] <author> L. Rudolph, M. Slivkin, E. </author> <title> Upfal (1991): A simple load balancing scheme for task allocation in parallel machines. </title> <booktitle> 3rd ACM Symp. on Parallel Algorithms and Architectures, </booktitle> <pages> 237-244. 15 </pages>
Reference-contexts: The challenge of balancing loads on such architectures is their large diameters and small bisection-bandwidths, which preclude certain provably effective balancing-via-randomizing policies <ref> [5, 6, 7, 8] </ref>. While we have not yet been able to delimit the class of computations that our policy works well on, we report here on a first step toward this end.
References-found: 8

