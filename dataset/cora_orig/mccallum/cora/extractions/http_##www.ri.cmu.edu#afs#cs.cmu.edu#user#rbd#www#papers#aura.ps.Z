URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/rbd/www/papers/aura.ps.Z
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/rbd/www/bib-interactiveperformance.html
Root-URL: 
Email: -dannenberg, eli-@cs.cmu.edu  
Title: A Flexible Real-Time Software Synthesis System realm of potential to reality. High Level Languages lead
Author: Roger B. Dannenberg and Eli Brandt 
Keyword: availability of device drivers. computer interfaces, and compact, portable hardware  Dynamic Instantiation: software synthesis languages  
Note: in the form of laptop computers. At present, software Flexibility is one of the main attractions of software moved from the  to run on different operating systems. In addition to systems.  
Address: Pittsburgh, PA 15213 USA  
Affiliation: Carnegie Mellon University  
Abstract: Aura is a new sound synthesis system designed for portability and flexibility. Aura is designed to be used with W, a real-time object system. W provides asynchronous, priority-based scheduling, supporting a mix of control, signal, and user interface processing. Important features of Aura are its design for efficient synthesis, dynamic instantiation, and synthesis reconfiguration. performance computer graphics rendering for Software sound synthesis offers many benefits, animation in multimedia performances. [Dannenberg including the flexibility to use a variety of 93] This requires hardware support and the algorithms, integration with control software and synthesis is limited by processor speed (and in many synthesis, so our goal is not so much to build a systems poor real-time operating system behavior specific synthesis engine (as in some commercial and noisy audio interfaces). Faster machines, ventures) but to build a flexible platform or improvements in operating systems, and digital audio architecture that can be readily modified or extended interfaces can solve all these problems. to meet the needs of research and composition. Announcements of various commercial software synthesis systems in the press indicate that we have 2. Design Decisions sometimes less efficient code than assembler. Given We are interested in using software synthesis for real-the special nature of digital signal processing, we time experimental music performance. To this end, imagine that special-purpose code generators could we have designed, prototyped, and are implementing also do a better job than general purpose compilers. Aura, a complete software synthesis and control However, in keeping with our requirements, we system. Our goal has several implications for our restrict ourselves to the use of a compiler (C++) to design, so we will describe some of our requirements insure portability across different machine types. before describing the design. Without this portability, one could argue that a better 1.1. Requirements approach would be to use DSP chips. Software portability is crucial to our work. We want We use floating point computation throughout. On to amortize our effort over at least a few generations some current architectures, integer operations would of hardware and operating system changes. Systems be faster, but the trend is toward machines that are such as the CMU Midi Toolkit and Csound illustrate optimized for fast floating point computation. Also, the long life typical of comparable software systems. considering the goal of flexibility, we believe that Furthermore, it is very uncertain what hardware/OS floating point is the only reasonable choice. combination will deliver the performance we are looking for. Therefore, we must have the flexibility going back to Music V have created instances of raw computing speed required for sound synthesis, instruments, but this can be a problem for real-time we are interested in systems that respond with low operating system) and systems that provide high 1. Introduction
Abstract-found: 1
Intro-found: 1
Reference: [Dannenberg 91] <author> Dannenberg, R. B., D. Rubine, T. Neuendorffer. </author> <title> The Resource-Instance Model of Music Representation. </title> <editor> In B. Alphonse and B. Pennycook (editor), </editor> <booktitle> ICMC Montreal 1991 Proceedings, </booktitle> <pages> pages 428-432. </pages> <booktitle> International Computer Music Association, </booktitle> <address> San Francisco, </address> <year> 1991. </year>
Reference-contexts: As a special case, the ``sum'' sound object class supports an arbitrary number of connected objects. For example, each instance of a note is attached to a sum object which outputs the sum of its inputs to audio output, reverb, or whatever. <ref> [Dannenberg 91] </ref> 4.3. Primitives A key to efficiency is to build upon efficient signal processing primitives, where most of the processing takes place.
Reference: [Dannenberg 92] <author> Dannenberg, R. B. </author> <title> Real-Time Software Synthesis on Superscalar Architectures. </title> <booktitle> In Proceedings of the 1992 ICMC, </booktitle> <pages> pages 174-177. </pages> <booktitle> International Computer Music Association, </booktitle> <address> San Francisco, </address> <year> 1992. </year>
Reference-contexts: We considered a purer would be satisfactory. However, in our experience it functional programming model as in Nyquist is very convenient to consider control to be a more <ref> [Dannenberg 92] </ref>, but the functional programming ``soft'' real-time task subject to occasional delays of model does not seem well suited to interactive many milliseconds. With MIDI, a delayed message control and flexible reconfiguration. <p> Primitives A key to efficiency is to build upon efficient signal processing primitives, where most of the processing takes place. We have performed extensive benchmarks in order to understand what factors are important in achieving efficient software sound synthesis. <ref> [Dannenberg 92] </ref> From our study, we learned that mixed sample rate computation is Figure 2: Sound objects and their important, so we provide two sample rates: an audio interconnection rate and a control rate (corresponding to the sample block rate.) Additional sample rates can be supported A to input I of
Reference: [Dannenberg 93] <author> Dannenberg, R. B. </author> <title> Software Support for Interactive Multimedia Performance. </title> <journal> Interface Journal of New Music Research 22(3) </journal> <pages> 213-228, </pages> <month> August, </month> <year> 1993. </year>
Reference: [Dannenberg 95] <author> Dannenberg, R. B. and D. Rubine. </author> <title> Toward Modular, Portable, </title> <booktitle> Real-Time Software. In Proceedings of the 1995 International Computer Music Conference, </booktitle> <pages> pages 65-72. </pages> <booktitle> International Computer Music Association, </booktitle> <year> 1995. </year>
Reference-contexts: Software synthesis mentioned offers some approach to our problems, systems have traditionally used synchronous control none offers a very complete solution. in which control information is computed between 4. The Architecture each block of audio samples. The problem with this Our system is based on W <ref> [Dannenberg 95] </ref>, a real-scheme is that long-running control computations can time programming environment that supports delay audio computation, causing buffer overflow multiple zones of objects that communicate via and a corresponding pop on the output. messages.
Reference: [Eckel 95] <author> Eckel, G., M. R. Iturbide. </author> <title> The Development of GiST, a Granular Synthesis Toolkit Based on an Extension of the FOF Generator. </title> <booktitle> In Proceedings of the 1995 International Computer Music Conference, </booktitle> <pages> pages 296-302. </pages> <booktitle> International Computer Music Association, </booktitle> <year> 1995. </year>
Reference: [Freed 94] <author> Freed, A. </author> <title> Codevelopment of User Interface, Control, and Digital Signal Processing with the HTM Environment. </title> <booktitle> In Proceedings of the International Conference on Signal Processing Applications and Technology. </booktitle> <year> 1994. </year>
Reference: [Lansky 87] <author> Lansky, P. </author> <month> CMIX. </month> <institution> Princeton Univ., </institution> <year> 1987. </year>
Reference-contexts: In addition, we feel that a software synthesis and control, so we designed our system to synthesis system can offer better support for control, support control as well as signal processing. Our timing, and dynamic reconfiguration. Other relevant experience with MIDI control systems [Dannenberg systems include Cmix <ref> [Lansky 87] </ref> (a non-real-time 93] indicates that control can take substantial system) and Kyma [Scaletti 89] (which uses DSP amounts of computation, and this has important chips for synthesis). While each of the systems implications for the architecture.
Reference: [Lindemann 91] <author> Lindemann, E., F. Dechelle, B. Smith, and M. Starkier. </author> <title> The Architecture of the IRCAM Musical Workstation. </title> <journal> Computer Music Journal 15(3) </journal> <pages> 41-49, </pages> <month> Fall, </month> <year> 1991. </year>
Reference-contexts: It uses driven, and computation takes place a block at a time, synchronous control at the sample block rate and has where a block is some fixed number of contiguous uninterpolated control signals. The IMW software samples. Our intended block size is approximately 32 <ref> [Lindemann 91, Puckette 91] </ref> is more oriented samples, but this number can be changed easily. Any toward complex interactive control. It also uses object that processes audio is called a sound object.
Reference: [Puckette 91] <author> Puckette, M. </author> <title> Combining Event and Signal Processing in the MAX Graphical Programming Environment. </title> <journal> Computer Music Journal 15(3) </journal> <pages> 68-77, </pages> <month> Fall, </month> <year> 1991. </year>
Reference-contexts: It uses driven, and computation takes place a block at a time, synchronous control at the sample block rate and has where a block is some fixed number of contiguous uninterpolated control signals. The IMW software samples. Our intended block size is approximately 32 <ref> [Lindemann 91, Puckette 91] </ref> is more oriented samples, but this number can be changed easily. Any toward complex interactive control. It also uses object that processes audio is called a sound object.
Reference: [Scaletti 89] <author> Scaletti, C. </author> <title> The Kyma/Platypus Computer Music Workstation. </title> <journal> Computer Music Journal 13(2) </journal> <pages> 23-38, </pages> <month> Summer, </month> <year> 1989. </year>
Reference-contexts: Our timing, and dynamic reconfiguration. Other relevant experience with MIDI control systems [Dannenberg systems include Cmix [Lansky 87] (a non-real-time 93] indicates that control can take substantial system) and Kyma <ref> [Scaletti 89] </ref> (which uses DSP amounts of computation, and this has important chips for synthesis). While each of the systems implications for the architecture.
Reference: [Thompson 95] <author> Thompson, N. and R. B. Dannenberg. </author> <title> Optimizing Software Synthesis Performance. </title> <booktitle> In Proceedings of the 1995 International Computer Music Conference, </booktitle> <pages> pages 235-6. </pages> <booktitle> International Computer Music Association, </booktitle> <year> 1995. </year>
Reference-contexts: commercial synthesizers) A problem with all of these systems is that their can be used to limit the number of instances. synthesis architectures make design choices that cost Asynchronous control: One of the great promises of anywhere from 20 to 100% in computation time software synthesis is tight integration between <ref> [Thompson 95] </ref>. In addition, we feel that a software synthesis and control, so we designed our system to synthesis system can offer better support for control, support control as well as signal processing. Our timing, and dynamic reconfiguration.
Reference: [Vercoe 90] <author> Vercoe, B. and D. Ellis. </author> <title> Real-Time CSOUND: Software Synthesis with Sensing and Control. </title> <editor> In S. Arnold and G. Hair (editor), </editor> <booktitle> ICMC Glasgow 1990 Proceedings, </booktitle> <pages> pages 209-211. </pages> <booktitle> International Computer Music Association, </booktitle> <year> 1990. </year> <month> 5 </month>
References-found: 12

