URL: http://www.cs.utoronto.ca/~cogrobo/reiterkr98.ps.Z
Refering-URL: http://www.cs.utoronto.ca/~cogrobo/
Root-URL: 
Email: reiter@cs.toronto.edu  
Title: Sequential, Temporal GOLOG  
Author: Ray Reiter 
Address: Toronto, Canada, M5S 1A4  
Affiliation: Department of Computer Science University of Toronto  
Abstract: We extend the ontology and foundational axioms of the sequential situation calculus to include time. When combined with a view of actions with durations as processes that are initiated and terminated by instantaneous actions, this explicit representation of time yields a very rich account of interleaving concurrency in the situation calculus. Based upon this axiomatization, we extend the semantics and interpreter for the situation calculus-based programming language GOLOG to the temporal domain, and illustrate the resulting increased functionality of the language via a GOLOG program describing the temporal behaviour of a coffee delivery robot. Among other features, this program illustrates how, in the GOLOG framework, one can repre sent concurrent processes with explicit time.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Gelfond, V. Lifschitz, and A. Rabinov. </author> <title> What are the limitations of the situation calculus? In Working Notes, </title> <booktitle> AAAI Spring Symposium Series on the Logical Formalization of Commonsense Reasoning, </booktitle> <pages> pages 59-69, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction The situation calculus [15] has long been the formalism of choice in artificial intelligence for theoretical investigations of properties of actions (e.g. <ref> [12, 1, 4] </ref>), but until recently, it has not been taken seriously as a specification or implementation language for practical problems in dynamic world modeling.
Reference: [2] <author> G. De Giacomo, Y. Lesperance, and H.J. Levesque. </author> <title> Reasoning about concurrent execution, prioritized interrupts, </title> <booktitle> and exogenous actions in the situation calculus. In Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 1221-1226, </pages> <address> Nagoya, Japan, </address> <year> 1997. </year>
Reference-contexts: Exceptions to this are the situation calculus-based programming languages GOLOG and CONGOLOG <ref> [11, 2] </ref>, and some of their applications to planning [10, 20], robotics [7, 5, 3] and agent programming [8, 6]. <p> Finally, we illustrated the resulting increased functionality of the language with a GOLOG program describing the temporal behavior of a coffee delivery robot, including the concurrent processes of delivering coffee while singing a song. CONGOLOG <ref> [2] </ref> is a much richer language than GOLOG, that includes facilities for interleaving concurrent execution, prioritized interrupts and exogenous actions.
Reference: [3] <author> G. De Giacomo, R. Reiter, and M. Soutchanski. </author> <title> Execution monitoring of high-level robot programs. In A.G. </title> <editor> Cohn and L.K. Schubert, editors, </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proceedings of the Sixth International Conference (KR'98). </booktitle> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA, </address> <year> 1998. </year>
Reference-contexts: Exceptions to this are the situation calculus-based programming languages GOLOG and CONGOLOG [11, 2], and some of their applications to planning [10, 20], robotics <ref> [7, 5, 3] </ref> and agent programming [8, 6]. <p> Frequently, it will be impossible to meet the exact times in such a schedule, for example, if the robot is unexpectedly delayed in traveling to the coffee machine. One approach we are exploring is to have the robot monitor its own execution, using the situation calculus-based execution monitor of <ref> [3] </ref>, recomputing what remains of the schedule after it has determined (by sensing its internal clock) the actual occurrence times of its actions.
Reference: [4] <author> S. Hanks and D. McDermott. </author> <title> Default reasoning, non-monotonic logics, and the frame problem. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence (AAAI'86), </booktitle> <pages> pages 328-333, </pages> <year> 1986. </year>
Reference-contexts: 1 Introduction The situation calculus [15] has long been the formalism of choice in artificial intelligence for theoretical investigations of properties of actions (e.g. <ref> [12, 1, 4] </ref>), but until recently, it has not been taken seriously as a specification or implementation language for practical problems in dynamic world modeling.
Reference: [5] <author> M. Jenkin, Y. Lesperance, H.J. Levesque, F. Lin, J. Lloyd, D. Marcu, R. Reiter, R.B. Scherl, and K. Tam. </author> <title> A logical approach to portable high-level robot programming. </title> <booktitle> In Proceedings of the Tenth Australian Joint Conference on Artificial Intelligence (AI'97), </booktitle> <address> Perth, Australia, </address> <year> 1997. </year> <type> Invited paper. </type>
Reference-contexts: Exceptions to this are the situation calculus-based programming languages GOLOG and CONGOLOG [11, 2], and some of their applications to planning [10, 20], robotics <ref> [7, 5, 3] </ref> and agent programming [8, 6].
Reference: [6] <author> Y. Lesperance, H. Levesque, F. Lin, D. Marcu, R. Re-iter, and R. Scherl. </author> <title> Foundations of a logical approach to agent programming. </title> <editor> In M. Wooldridge, J.P. Muller, and M. Tambe, editors, </editor> <booktitle> Intelligent Agents Vol. II Proc. 1995 Workshop on Agent Theories, Architectures, and Languages (ATAL-95), </booktitle> <pages> pages 331-346. </pages> <editor> Springer-Verlag, </editor> <booktitle> Lecture Notes in Art. Intell., </booktitle> <year> 1996. </year>
Reference-contexts: Exceptions to this are the situation calculus-based programming languages GOLOG and CONGOLOG [11, 2], and some of their applications to planning [10, 20], robotics [7, 5, 3] and agent programming <ref> [8, 6] </ref>. The perspective being pursued by the Cognitive Robotics Group at the University of Toronto is to reduce the "traditional" reliance on planning for eliciting interesting robot behaviors, and instead provide the robot with programs written in a suitable high-level language [9], in our case, GOLOG or CONGOLOG.
Reference: [7] <author> Y. Lesperance, H.J. Levesque, F. Lin, D. Marcu, R. Reiter, and R. Scherl. </author> <title> A logical approach to high-level robot programming a progress report. In Control of the Physical World by Intelligent Systems, </title> <booktitle> Working Notes of the 1994 AAAI Fall Symp., </booktitle> <year> 1994. </year>
Reference-contexts: Exceptions to this are the situation calculus-based programming languages GOLOG and CONGOLOG [11, 2], and some of their applications to planning [10, 20], robotics <ref> [7, 5, 3] </ref> and agent programming [8, 6].
Reference: [8] <author> Y. Lesperance, H.J. Levesque, and R. Reiter. </author> <title> A situation calculus approach to modeling and programming agents. </title> <editor> In A. Rao and M. Wooldridge, editors, </editor> <title> Foundations and Theories of Rational Agency, </title> <note> 1997. In press. </note>
Reference-contexts: Exceptions to this are the situation calculus-based programming languages GOLOG and CONGOLOG [11, 2], and some of their applications to planning [10, 20], robotics [7, 5, 3] and agent programming <ref> [8, 6] </ref>. The perspective being pursued by the Cognitive Robotics Group at the University of Toronto is to reduce the "traditional" reliance on planning for eliciting interesting robot behaviors, and instead provide the robot with programs written in a suitable high-level language [9], in our case, GOLOG or CONGOLOG.
Reference: [9] <author> H. L. Levesque and R. Reiter. </author> <title> High-level robotic control: beyond planning. Position paper. </title> <booktitle> AAAI 1998 Spring Symposium: Integrating Robotics Research: Taking the Next Big Leap. </booktitle> <address> Stanford University, March 23-25, </address> <year> 1998. </year> <note> http://www.cs.toronto.edu/~cogrobo/. </note>
Reference-contexts: The perspective being pursued by the Cognitive Robotics Group at the University of Toronto is to reduce the "traditional" reliance on planning for eliciting interesting robot behaviors, and instead provide the robot with programs written in a suitable high-level language <ref> [9] </ref>, in our case, GOLOG or CONGOLOG. Such programming languages must be very expressive, providing a range of primitives for describing agent behaviors in complex worlds, for example, sensing actions, time, inter-agent communication, beliefs, goals, intentions, etc.
Reference: [10] <author> H.J. Levesque. </author> <booktitle> What is planning in the presence of sensing? In Proceedings of the National Conference on Artificial Intelligence (AAAI'96), </booktitle> <pages> pages 1139-1146, </pages> <year> 1996. </year>
Reference-contexts: Exceptions to this are the situation calculus-based programming languages GOLOG and CONGOLOG [11, 2], and some of their applications to planning <ref> [10, 20] </ref>, robotics [7, 5, 3] and agent programming [8, 6].
Reference: [11] <author> H.J. Levesque, R. Reiter, Y. Lesperance, F. Lin, and R. Scherl. GOLOG: </author> <title> a logic programming language for dynamic domains. </title> <journal> J. of Logic Programming, Special Issue on Actions, </journal> <volume> 31(1-3):59-83, </volume> <year> 1997. </year>
Reference-contexts: Exceptions to this are the situation calculus-based programming languages GOLOG and CONGOLOG <ref> [11, 2] </ref>, and some of their applications to planning [10, 20], robotics [7, 5, 3] and agent programming [8, 6]. <p> To captures formally this intuitive concept of the executable situations, we introduce the abbreviation: executable (s) def In addition to the above domain independent axioms, one must specify other axioms when formalizing an application domain (details in <ref> [11] </ref>): * Action precondition axioms, one for each primitive action, characterizing the relation P oss. * Successor state axioms, one for each fluent. These capture the causal laws of the domain, together with a solution to the frame problem [21]. <p> This is any finite set of sentences mentioning no situation term, or only the situation term S 0 . 3 GOLOG GOLOG <ref> [11] </ref> is a situation calculus-based logic programming language for defining complex actions us induction for lists: If the empty list has property P and if, whenever list s has property P so does cons (a; s), then all lists have property P . 3 But see [13, 16, 17] for possible <p> Nondeterministically pick a value for x, and for that value of x, do the action ff. 7. Nondeterministic repetition: ff fl . Do ff a nonde terministic number of times. 8. Procedures, including recursion. The semantics of GOLOG programs is defined by macro-expansion, using a ternary relation Do (see <ref> [11] </ref> for a full description). <p> This means that to execute program, one must prove, using the situation calculus axiomatization of some background domain, the situation calculus formula (9s)Do (program; S 0 ; s). Any binding for s obtained by a constructive proof of this sentence is an execution trace of program. In <ref> [11] </ref> a GOLOG interpreter was given, written in Prolog. We present a variant of this here because we shall be suitably modifying it to accommodate time, and because we shall be presenting an example of a corresponding temporal GOLOG program.
Reference: [12] <author> V. Lifschitz. </author> <title> Toward a metatheory of action. </title> <editor> In J. Allen, R. Fikes, and E. Sandewall, editors, </editor> <booktitle> Proceedings of the Second International Conference on Principles of Knowledge Representation and Reasoning (KR'91), </booktitle> <pages> pages 376-386, </pages> <address> Los Altos, CA, 1991. </address> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA. </address>
Reference-contexts: 1 Introduction The situation calculus [15] has long been the formalism of choice in artificial intelligence for theoretical investigations of properties of actions (e.g. <ref> [12, 1, 4] </ref>), but until recently, it has not been taken seriously as a specification or implementation language for practical problems in dynamic world modeling.
Reference: [13] <author> F. Lin and R. Reiter. </author> <title> State constraints revisited. </title> <journal> J. of Logic and Computation, special issue on actions and processes, </journal> <volume> 4 </volume> <pages> 655-678, </pages> <year> 1994. </year>
Reference-contexts: To characterize the domain of situations, various foundational axioms have been proposed for the situation calculus <ref> [22, 13, 18] </ref>. <p> . 3 GOLOG GOLOG [11] is a situation calculus-based logic programming language for defining complex actions us induction for lists: If the empty list has property P and if, whenever list s has property P so does cons (a; s), then all lists have property P . 3 But see <ref> [13, 16, 17] </ref> for possible ways to do this, while preserving the successor state axiom approach. ing a repertoire of user specified primitive actions. GOLOG provides the usual kinds of imperative programming language control structures as well as three flavours of nondeterministic choice: 1.
Reference: [14] <author> J.W. Lloyd. </author> <title> Foundations of Logic Programming. </title> <publisher> Springer Verlag, </publisher> <address> second edition, </address> <year> 1987. </year>
Reference-contexts: Since such test conditions can be arbitrary first order formulas, the holds predicate first converts them to Prolog executable form using the Lloyd-Topor transformations <ref> [14] </ref>. 4 Interleaving Concurrency in the Situation Calculus The possibility of concurrent execution of actions leads to many difficult formal and conceptual problems, quite independently of the underlying knowledge representation language. For example, what can one mean by the concurrent action fwalk (A; B); chewGumg? Intuitively, both actions have durations.
Reference: [15] <author> J. McCarthy. </author> <title> Situations, actions and causal laws. </title> <type> Technical report, </type> <institution> Stanford University, </institution> <year> 1963. </year> <note> Reprinted in Semantic Information Processing (M. </note> <editor> Minsky ed.), </editor> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1968, </year> <pages> pp. 410-417. </pages>
Reference-contexts: 1 Introduction The situation calculus <ref> [15] </ref> has long been the formalism of choice in artificial intelligence for theoretical investigations of properties of actions (e.g. [12, 1, 4]), but until recently, it has not been taken seriously as a specification or implementation language for practical problems in dynamic world modeling.
Reference: [16] <author> Sheila A. McIlraith. </author> <title> Towards a Formal Account of Diagnostic Problem Solving. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Toronto, Toronto, </institution> <address> Ontario, Canada, </address> <year> 1997. </year>
Reference-contexts: . 3 GOLOG GOLOG [11] is a situation calculus-based logic programming language for defining complex actions us induction for lists: If the empty list has property P and if, whenever list s has property P so does cons (a; s), then all lists have property P . 3 But see <ref> [13, 16, 17] </ref> for possible ways to do this, while preserving the successor state axiom approach. ing a repertoire of user specified primitive actions. GOLOG provides the usual kinds of imperative programming language control structures as well as three flavours of nondeterministic choice: 1.
Reference: [17] <author> J.A. Pinto. </author> <title> Temporal Reasoning in the Situation Calculus. </title> <type> PhD thesis, </type> <institution> University of Toronto, Department of Computer Science, </institution> <year> 1994. </year>
Reference-contexts: Specifically, we extend the ontology and foundational axioms of the sequential situation calculus of [19] to include time. By pursuing an idea first proposed for the situation calculus by Pinto <ref> [17] </ref> and Ternovskaia [24], we show how one can view actions with durations as processes that are initiated and terminated by instantaneous actions. This conceptual shift, when coupled with an explicit representation for time, provides a rich account of interleaving concurrency in the situation calculus. <p> . 3 GOLOG GOLOG [11] is a situation calculus-based logic programming language for defining complex actions us induction for lists: If the empty list has property P and if, whenever list s has property P so does cons (a; s), then all lists have property P . 3 But see <ref> [13, 16, 17] </ref> for possible ways to do this, while preserving the successor state axiom approach. ing a repertoire of user specified primitive actions. GOLOG provides the usual kinds of imperative programming language control structures as well as three flavours of nondeterministic choice: 1. <p> the third, but the first and third do not overlap; do they all occur concurrently? A representational device in the situation calculus for overcoming these problems is to conceive of such actions as processes, represented by relational fluents, and to introduce durationless (instantaneous) actions that initiate and terminate these processes <ref> [17, 24] </ref>. <p> Accordingly, we want to treat the situation do (startF alling (t); do (cutString (t); S 0 )) as an executable situation. There are many advantages to using interleaving instead of true concurrency, whenever this is possible. For example, the precondition interaction problem <ref> [17] </ref> cannot arise in this case, neither can the possibility of infinitely many action co-occurrences [23].
Reference: [18] <author> Javier Pinto. </author> <title> Occurrences and Narratives as Constraints in the Branching Structure of the Situation Calculus. </title> <note> Submitted to the Journal of Logic and Computation URL = ftp://lyrcc.ing.puc.cl/pub/jpinto/jlc.ps.gz. </note>
Reference-contexts: To characterize the domain of situations, various foundational axioms have been proposed for the situation calculus <ref> [22, 13, 18] </ref>.
Reference: [19] <author> F. Pirri and R. Reiter. </author> <title> Some contributions to the metatheory of the situation calculus. </title> <note> 1998. Submitted for publication. http://www.cs.toronto.edu/~cogrobo/. </note>
Reference-contexts: The purpose of this paper is to extend the functionality of these languages by endowing them with the ability to represent time explicitly. Specifically, we extend the ontology and foundational axioms of the sequential situation calculus of <ref> [19] </ref> to include time. By pursuing an idea first proposed for the situation calculus by Pinto [17] and Ternovskaia [24], we show how one can view actions with durations as processes that are initiated and terminated by instantaneous actions. <p> To characterize the domain of situations, various foundational axioms have been proposed for the situation calculus [22, 13, 18]. The following set of axioms modifies these earlier proposals, and appears to be the simplest appropriate formulation of foundational axioms for the situation calculus <ref> [19] </ref>: (8P ):P (S 0 ) ^ (8a; s)[P (s) P (do (a; s))] (1) :s &lt; S 0 ; (3) The first is a second order induction axiom. The next is a unique names axiom for situations.
Reference: [20] <author> R. Reiter. </author> <title> Knowledge in Action: Logical Foundations for Describing and Implementing Dynamical Systems. </title> <note> In preparation. Draft available at http://www.cs.toronto.edu/~cogrobo/. </note>
Reference-contexts: Exceptions to this are the situation calculus-based programming languages GOLOG and CONGOLOG [11, 2], and some of their applications to planning <ref> [10, 20] </ref>, robotics [7, 5, 3] and agent programming [8, 6].
Reference: [21] <author> R. Reiter. </author> <title> The frame problem in the situation calculus: a simple solution (sometimes) and a completeness result for goal regression. </title> <editor> In Vladimir Lifschitz, editor, </editor> <booktitle> Artificial Intelligence and Mathematical Theory of Computation: Papers in Honor of John McCarthy, </booktitle> <pages> pages 359-380. </pages> <publisher> Academic Press, </publisher> <address> San Diego, CA, </address> <year> 1991. </year>
Reference-contexts: These capture the causal laws of the domain, together with a solution to the frame problem <ref> [21] </ref>. The solution to the frame problem embodied in these axioms applies only when all the primitive actions of the application domain are deterministic. Moreover, [21] does not treat state constraints, and therefore, does not address the ramification or qualification problems. 3 * Unique names axioms for the primitive actions. * <p> These capture the causal laws of the domain, together with a solution to the frame problem <ref> [21] </ref>. The solution to the frame problem embodied in these axioms applies only when all the primitive actions of the application domain are deterministic. Moreover, [21] does not treat state constraints, and therefore, does not address the ramification or qualification problems. 3 * Unique names axioms for the primitive actions. * Axioms describing the initial situation what is true initially, before any actions have occurred.
Reference: [22] <author> R. Reiter. </author> <title> Proving properties of states in the situation calculus. </title> <journal> Artificial Intelligence, </journal> <volume> 64 </volume> <pages> 337-351, </pages> <year> 1993. </year>
Reference-contexts: To characterize the domain of situations, various foundational axioms have been proposed for the situation calculus <ref> [22, 13, 18] </ref>.
Reference: [23] <author> R. Reiter. </author> <title> Natural actions, concurrency and continuous time in the situation calculus. In L.C. </title> <editor> Aiello, J. Doyle, and S.C. Shapiro, editors, </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proceedings of the Fifth International Conference (KR'96), </booktitle> <pages> pages 2-13. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Fran-cisco, CA, </address> <year> 1996. </year>
Reference-contexts: This means that we provide for concurrent execution of instantaneous actions, but unlike the true concurrency treated in <ref> [23] </ref>, we are here giving an interleaving account of con-currency. There are many reasons for allowing two or more interleaved actions to have the same occurrence times. One is we can often give an interleaving account of action co-occurrences without introducing the more complex formal machinery of [23]. <p> concurrency treated in <ref> [23] </ref>, we are here giving an interleaving account of con-currency. There are many reasons for allowing two or more interleaved actions to have the same occurrence times. One is we can often give an interleaving account of action co-occurrences without introducing the more complex formal machinery of [23]. Another is that often an action occurrence serves as an enabling condition for the simultaneous occurrence of another action. For example, cutting a weighted string at time t enables the action startF alling (t). <p> There are many advantages to using interleaving instead of true concurrency, whenever this is possible. For example, the precondition interaction problem [17] cannot arise in this case, neither can the possibility of infinitely many action co-occurrences <ref> [23] </ref>. <p> The development given above of these foundational axioms has many similarities to that given by Reiter in <ref> [23] </ref> for the concurrent, temporal situation calculus. The principal difference is that [23] treats true concurrency, where concurrent actions are sets of primitive instanta-neous actions. It is possible to obtain the foundational axioms for the sequential, temporal situation calculus from those of [23] by requiring that all concurrent actions be singleton <p> The development given above of these foundational axioms has many similarities to that given by Reiter in <ref> [23] </ref> for the concurrent, temporal situation calculus. The principal difference is that [23] treats true concurrency, where concurrent actions are sets of primitive instanta-neous actions. It is possible to obtain the foundational axioms for the sequential, temporal situation calculus from those of [23] by requiring that all concurrent actions be singleton sets, and identifying the primitive action A with the "concurrent" action fAg, <p> many similarities to that given by Reiter in <ref> [23] </ref> for the concurrent, temporal situation calculus. The principal difference is that [23] treats true concurrency, where concurrent actions are sets of primitive instanta-neous actions. It is possible to obtain the foundational axioms for the sequential, temporal situation calculus from those of [23] by requiring that all concurrent actions be singleton sets, and identifying the primitive action A with the "concurrent" action fAg, but the above approach, where we started from scratch, seemed to us conceptually more attractive. 6 Sequential, Temporal GOLOG With the above axioms for the sequential, temporal situation calculus in
Reference: [24] <author> E. Ternovskaia. </author> <title> Interval situation calculus. </title> <booktitle> In Proc. of ECAI'94 Workshop W5 on Logic and Change, </booktitle> <pages> pages 153-164, </pages> <address> Amsterdam, </address> <month> August 8-12, </month> <year> 1994. </year>
Reference-contexts: Specifically, we extend the ontology and foundational axioms of the sequential situation calculus of [19] to include time. By pursuing an idea first proposed for the situation calculus by Pinto [17] and Ternovskaia <ref> [24] </ref>, we show how one can view actions with durations as processes that are initiated and terminated by instantaneous actions. This conceptual shift, when coupled with an explicit representation for time, provides a rich account of interleaving concurrency in the situation calculus. <p> the third, but the first and third do not overlap; do they all occur concurrently? A representational device in the situation calculus for overcoming these problems is to conceive of such actions as processes, represented by relational fluents, and to introduce durationless (instantaneous) actions that initiate and terminate these processes <ref> [17, 24] </ref>.
References-found: 24

