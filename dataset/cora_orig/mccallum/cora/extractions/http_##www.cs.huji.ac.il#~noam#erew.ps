URL: http://www.cs.huji.ac.il/~noam/erew.ps
Refering-URL: http://www.cs.huji.ac.il/~noam/papers.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: noam@cs.huji.ac.il  zivi@cs.huji.ac.il  
Title: Pointer Jumping Requires Concurrent Read yields a boolean function which can be computed in O(log
Author: Noam Nisan Ziv Bar-Yossef 
Note: This  
Address: Jerusalem 91904, Israel  Jerusalem 91904, Israel  
Affiliation: Department of Computer Science The Hebrew University of Jerusalem  Department of Computer Science The Hebrew University of Jerusalem  
Abstract: We consider the well known problem of determining the k'th vertex reached by chasing pointers in a directed graph of out-degree 1. The famous pointer doubling technique provides an O(log k) parallel time algorithm on a Concurrent-Read Exclusive-Write (CREW) PRAM. We prove that this problem requires (k) steps on an Exclusive-Read Exclusive-Write (EREW) PRAM, for every k c log n, where n is the number of vertices and c is a constant.
Abstract-found: 1
Intro-found: 1
Reference: [CDR86] <author> S. Cook, C. Dwork, and R. Reischuk. </author> <title> Upper and lower time bounds for parallel random access machines without simultaneous writes. </title> <journal> SIAM J. Comput., </journal> <volume> 15:8798, </volume> <year> 1986. </year>
Reference-contexts: When attempting to provide lower bounds for PRAMs, the computational power of each processor is usually not limited the so-called ideal PRAM. Upper bounds, of course, utilize only realistic processing power at each processor. See [KR88] for further details. A well known result due to Cook, Dwork, and Reischuk <ref> [CDR86] </ref>, shows that write-concurrency provides true additional power: the OR function on n bits requires (log n) time on a CREW PRAM, but can be done in O (1) time on a CRCW PRAM. The lower bounds holds for any number of processors or memory cells.
Reference: [FW90] <author> F. Fich and A. Wigderson. </author> <title> Toward understanding exclusive read. </title> <journal> SIAM J. Comput., </journal> <volume> 19:718727, </volume> <year> 1990. </year>
Reference-contexts: Fich and Wigderson <ref> [FW90] </ref> attempted separating EREW from CREW PRAMs for boolean functions, but their lower bound only held for a weaker variant of EREW PRAM called an EROW (Owner-Write). They left the general question open.
Reference: [GNR89] <author> E. Gafni, J. Naor, and P. Ragde. </author> <title> On separating the EREW and CROW models. </title> <type> Theoret. </type> <institution> Com-put. Sci., 68:343346, </institution> <year> 1989. </year>
Reference-contexts: It should be noted, though, that such a large gap can not be shown for boolean function since it is known ([Sim83]) that for boolean function the gap between CREW and EREW PRAMs can not be more than exponential. Two partial results have been proved: Gafni, Naor, and Ragde <ref> [GNR89] </ref> exhibited a function on a full domain (but still a huge domain) which exhibits the gap as opposed to the function above which is on a partial domain. (Again, this sheds no light on the case of boolean function).
Reference: [KR88] <author> R. Karp and V. Ramachandran. </author> <title> A survey of parallel algorithms for shared-memory machines, 1988. Handbook of Theoret. </title> <journal> Comput. Sci., Volume A. </journal>
Reference-contexts: Thus, O (log k) steps are necessary to reach s k . This basic technique is very often employed in various list manipulation algorithms, as well as in many tree and graph algorithms which have list substructures in them. See <ref> [KR88] </ref> for a survey and references. Let us analyze the memory access requirements from such a pointer doubling step. Fix some i, and consider the memory location holding s [i]. It is clear that only a single processor writes into this cell. <p> In these cases even concurrent read access is not needed. Much work has been done in this special case to fine-tune this algorithm as to improve its efficiency (see <ref> [KR88] </ref> for references). Our main theorem (stated below) shows that the general problem does indeed require concurrent read access, and that otherwise a lower bound of (k) can be proved. 1.2 EREW vs. <p> When attempting to provide lower bounds for PRAMs, the computational power of each processor is usually not limited the so-called ideal PRAM. Upper bounds, of course, utilize only realistic processing power at each processor. See <ref> [KR88] </ref> for further details. A well known result due to Cook, Dwork, and Reischuk [CDR86], shows that write-concurrency provides true additional power: the OR function on n bits requires (log n) time on a CREW PRAM, but can be done in O (1) time on a CRCW PRAM.
Reference: [Sim83] <author> H. U. Simon. </author> <title> A tight (log log n) bound on the time for parallel RAM's to compute nondegenerate boolean functions. </title> <booktitle> FCT'83, Lecture notes in Comp. Sci. </booktitle> <volume> 158, </volume> <year> 1983. </year>
Reference: [Sni85] <author> M. Snir. </author> <title> On parallel searching. </title> <journal> SIAM J. Comput., </journal> <volume> 14:688708, </volume> <year> 1985. </year>
Reference-contexts: It should be noted that any function can be computed on any PRAM in O (log n) time if the number of processors is not bounded so the lower bound is tight. A natural question is whether read-concurrency provides true additional power. Snir <ref> [Sni85] </ref> proves that given inputs y and a sorted list x 1 &lt; x 2 &lt; ::: &lt; x n , finding the minimum i such that x i &gt; y requires ( p log n) time on a EREW PRAM, but can be done in O (1) time on a
References-found: 6

