URL: ftp://ftp.cs.kun.nl/pub/SoftwEng.InfSyst/articles/Edo.ps.Z
Refering-URL: http://www.sci.kun.nl/afdis/publist.html
Root-URL: 
Email: E-mail: pvb@cs.kun.nl  
Title: Experiences with EDO: an Evolutionary Database Optimizer  
Author: Patrick van Bommel 
Address: Toernooiveld, NL-6525 ED Nijmegen, The Netherlands,  
Affiliation: Dept. of Information Systems, Faculty of Mathematics and Computing Science, University of Nijmegen,  
Date: December 13, 1994  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. Amikam. </author> <title> On the automatic generation of optimal internal schemata. </title> <journal> Information Systems, </journal> <volume> 10(1) </volume> <pages> 37-45, </pages> <year> 1985. </year>
Reference-contexts: However, for a large and complex conceptual data model the enumeration of all possible internal representations is far from attractive. For this reason existing tools and techniques for database design based on conceptual modelling usually avoid exhaustive search (see e.g. <ref> [1] </ref>, [10], [13], [20], [22]). However, a general and flexible (time/space-driven) mechanism for walking through the solution space of alternative internal representations is 2 Sec. 2 Framework for database mappings not found in the literature. <p> In order to interrelate the values of the conflicting criteria Space and Time, we use the parameters shown in figure 3. parameter explanation fi 2 <ref> [0; 1] </ref> weight coefficient for storage space fl s the average cost of storage media fl t the average cost of response time Using the parameters from figure 3, the fitness (quality) of a given internal representation is defined by: Fitness = 1 fi fi fl s fi Space +(1 fi) <p> The fitness of internal representations is estimated on the basis of profiles, characterizing the environment in which the database under development will operate. Compared to existing tools and techniques for database design based on conceptual mod-elling (see e.g. <ref> [1] </ref>, [10], [13], [20], [22]), our tool has several interesting features. The internal representations manipulated by EDO are expressed in terms of the conceptual model under consideration. As a consequence, it is easily checked that the result of mutating a preliminary internal representation is still implementing the same conceptual model.
Reference: [2] <author> P. van Bommel. </author> <title> A Randomised Schema Mutator for Evolutionary Database Optimi-sation. </title> <journal> The Australian Computer Journal, </journal> <volume> 25(2) </volume> <pages> 61-69, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: In this way a walk through the solution space of alternative internal representations is performed. For a general introduction into this kind of evolution in the context of formal (technical) systems, we refer to [21] and [11]. The underlying theoretical foundations of EDO are found in [5], [6], [7], <ref> [2] </ref> and [8]. Compared to traditional database normalization (see e.g. [24]), this approach has several advantages. For example, a walk through the solution space of alternative internal representations can be guided on the basis of the expected quality (Time and Space) of the internal representations found as yet. <p> The corresponding predicator in destination node n is unique for fact type f and is denoted as Hook (f ). These notions anchor and hook facilitate the transformation of internal representations into new internal representations. Two basic transformations are used ([8], <ref> [2] </ref>): 1. Promote (p), promoting the anchor p in node m by swapping edge hm; ni to hn; mi. 2. Move (p; q), moving Fact (p) with all its descendants to Node (q). Predicators p and q should belong to the same subtype hierarchy. <p> For generation and mutation, the number of (re)construction steps is linear in the number of predicators. In each step a simple and rather cheap assignation is made (see <ref> [2] </ref>). On the other hand, fitness evaluation requires a number of multiplications which is at least quadratic in the number of predicators (see the basic cost model in appendix B).
Reference: [3] <author> P. van Bommel. </author> <title> Database Design Modifications based on Conceptual Modelling. </title> <editor> In H. Jaakkola, H. Kangassalo, T. Kitahashi, and A. Markus, editors, </editor> <booktitle> Information Mod-elling and Knowledge Bases V: Principles and Formal Techniques, </booktitle> <pages> pages 275-286, </pages> <address> Am-sterdam, The Netherlands, 1994. </address> <publisher> IOS Press. </publisher>
Reference-contexts: The numbers on the plane-axis correspond to values of j. More details about these planes are found in <ref> [3] </ref>. As a consequence, the left figure in the Evolution Screen shows in which parts of the solution space S the search process is performed. For instance, the pool resulting from the first iteration of the evolver, denoted as Gen (1), is shown in the first column of graph plane/age.
Reference: [4] <author> P. van Bommel. </author> <title> Implementation Selection for Object-Role Models. In T.A. </title> <editor> Halpin and R. Meersman, editors, </editor> <booktitle> Proceedings of the First International Conference on Object-Role Modelling (ORM-1), </booktitle> <pages> pages 103-112, </pages> <address> Magnetic Island, Australia, </address> <month> July </month> <year> 1994. </year>
Reference-contexts: The connection with the underlying conceptual model thus remains invariant. Also, the problem of selecting an appropriate set of indexes can be embedded in the framework of mutations in a natural way (see e.g. <ref> [4] </ref>). The organisation of the paper is as follows. In section 2 we summarize the underlying framework for database mappings. The next sections show how basic search strategies, such as random search and hill climbing, can be considered within this framework.
Reference: [5] <author> P. van Bommel, A.H.M. ter Hofstede, and Th.P. van der Weide. </author> <title> Semantics and verification of object-role models. </title> <journal> Information Systems, </journal> <volume> 16(5) </volume> <pages> 471-495, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: In this way a walk through the solution space of alternative internal representations is performed. For a general introduction into this kind of evolution in the context of formal (technical) systems, we refer to [21] and [11]. The underlying theoretical foundations of EDO are found in <ref> [5] </ref>, [6], [7], [2] and [8]. Compared to traditional database normalization (see e.g. [24]), this approach has several advantages. <p> These are treated in [6]. 2.1 Conceptual data models In this section we discuss conceptual data models. We focus on data modelling techniques with an underlying object-role structure (e.g. NIAM [17], [18] and the Binary Relationship Model [16], [23]). A formal definition of these models is found in <ref> [5] </ref>. The basic notions are summarized as follows. An object-role data model consists of an information structure I and a set of constraints C on the possible populations of the information structure. An information structure consists of the following components: * P is a set of predicators. <p> Furthermore, constraints are used for specifying more advanced integrity rules. In section 2.5 two basic kinds of constraints are discussed in more detail. For other constraints we refer to <ref> [5] </ref>. <p> The meaning of a uniqueness constraint is similar to the notion of a key (see e.g. <ref> [5] </ref>, [24]). As a consequence, presence or absence of a uniqueness constraint will not cause an internal representation to be illegal. However, a special situation occurs if the hook of a fact type is unique. Then the subtable corresponding to that fact type is flat rather than nested.
Reference: [6] <author> P. van Bommel, Gy. Kovacs, and A. Micsik. </author> <title> Transformation of database populations and operations from the conceptual to the internal level. </title> <journal> Information Systems, </journal> <volume> 19(2) </volume> <pages> 175-191, </pages> <year> 1994. </year>
Reference-contexts: In this way a walk through the solution space of alternative internal representations is performed. For a general introduction into this kind of evolution in the context of formal (technical) systems, we refer to [21] and [11]. The underlying theoretical foundations of EDO are found in [5], <ref> [6] </ref>, [7], [2] and [8]. Compared to traditional database normalization (see e.g. [24]), this approach has several advantages. For example, a walk through the solution space of alternative internal representations can be guided on the basis of the expected quality (Time and Space) of the internal representations found as yet. <p> We focus on the structure of data models. Some related aspects, 3 Sec. 2 Framework for database mappings such as transformation of populations and operations, are beyond the scope of this paper. These are treated in <ref> [6] </ref>. 2.1 Conceptual data models In this section we discuss conceptual data models. We focus on data modelling techniques with an underlying object-role structure (e.g. NIAM [17], [18] and the Binary Relationship Model [16], [23]). A formal definition of these models is found in [5]. <p> average time needed for processing a single storage unit, the average cost of the storage media to be used, and the average cost of response time. 2.3 The evolutionary approach to database design A conceptual data model may have a very large number of alternative internal representations (see e.g. [7], <ref> [6] </ref>). As a consequence, the enumeration of all possible internal representations is far from attractive. Therefore, we adopt the transformational approach and apply data structure transformations in so-called evolutionary design strategies (see e.g. [19], [21]). In this section we describe how such strategies can be used for database design. <p> Our internal representations are expressed in terms of the conceptual model at hand. Details about these internal representations are found in [7] and <ref> [6] </ref>. The basic notions are summarized in section 2.4. 2.4 Internal representations of object-role models In this section we discuss a mechanism for representing object-role information structures internally.
Reference: [7] <author> P. van Bommel and Th.P. van der Weide. </author> <title> Reducing the search space for conceptual schema transformation. </title> <journal> Data & Knowledge Engineering, </journal> <volume> 8 </volume> <pages> 269-292, </pages> <year> 1992. </year>
Reference-contexts: The aim of internal representations is to implement a given conceptual model in an efficient way. Obviously, one and the same conceptual data model may have a very large number of alternative internal representations (see e.g. <ref> [7] </ref>). Each internal representation has two important properties. The first property is the average response time, the second property is the storage space needed for storing the database. Several problems are involved in these properties. <p> In this way a walk through the solution space of alternative internal representations is performed. For a general introduction into this kind of evolution in the context of formal (technical) systems, we refer to [21] and [11]. The underlying theoretical foundations of EDO are found in [5], [6], <ref> [7] </ref>, [2] and [8]. Compared to traditional database normalization (see e.g. [24]), this approach has several advantages. For example, a walk through the solution space of alternative internal representations can be guided on the basis of the expected quality (Time and Space) of the internal representations found as yet. <p> the average time needed for processing a single storage unit, the average cost of the storage media to be used, and the average cost of response time. 2.3 The evolutionary approach to database design A conceptual data model may have a very large number of alternative internal representations (see e.g. <ref> [7] </ref>, [6]). As a consequence, the enumeration of all possible internal representations is far from attractive. Therefore, we adopt the transformational approach and apply data structure transformations in so-called evolutionary design strategies (see e.g. [19], [21]). In this section we describe how such strategies can be used for database design. <p> The process can be started from an initially generated (set of) internal representation (s). Figure 1 illustrates this view of the database design process. The initial generation may be guided by techniques discussed in <ref> [7] </ref>. In figure 1 each small circle represents an internal representation for the conceptual data model under consideration. The search process for an appropriate internal representation is based on evolution operators. Obviously, these operators depend on the specification language used for the internal representations. <p> Our internal representations are expressed in terms of the conceptual model at hand. Details about these internal representations are found in <ref> [7] </ref> and [6]. The basic notions are summarized in section 2.4. 2.4 Internal representations of object-role models In this section we discuss a mechanism for representing object-role information structures internally. <p> Figure 14 in appendix A gives an example internal representation for the information structure from figure 12. In <ref> [7] </ref> it was shown that the following property can be derived from the wellformedness conditions discussed above, in combination with the operator Fact: Each edge e = hm; ni with `(e) = f and Base (m) 2 A has jm " f j = jn " f j = 1 The <p> These guidance conditions may be expressed in terms of structural properties of the internal representations at hand (e.g. size and depth), or in terms of constraint translations (e.g. involving null values and redundancy). Examples are given in <ref> [7] </ref>, where candidates with undesirable properties are excluded from the generation process. Another example involves the evolution of simple internal representations, where each fact type is taken separately, into more complex internal representations where fact types are joined together. <p> These constraints are of vital importance for the conceptual information structure, since they are used for identification purposes ([5],[18]). Furthermore, these constraints are important for internal representations, because several basic properties of these representations can be derived from them (see e.g. <ref> [7] </ref>). 2.5.2 Total role constraints First we consider total role constraints. A total role constraint for predicator p expresses that each instance of Base (p) must occur in at least one instance of Fact (p). For an internal representation containing predicator p this has the following consequences: 1. <p> However, a special situation occurs if the hook of a fact type is unique. Then the subtable corresponding to that fact type is flat rather than nested. More details and several examples are found in <ref> [7] </ref>. 2.6 Fitness of internal representations The profiles discussed in section 2.2 can be used to compute the expected average response time Time and the expected storage space requirements Space for a given internal representation. <p> There are several possibilities to overcome the problem of local optima. The first possibility is to start searching from different parts of the solution space. The Generator mentioned in section 2.7 is EDO's facility that can be used for this purpose. Techniques discussed in <ref> [7] </ref> may be used here. The second possibility is to perform a few random steps between two sequences of hill climbing steps. The Evolver (section 2.7) is EDO's facility that can be used for this purpose.
Reference: [8] <author> P. van Bommel and Th.P. van der Weide. </author> <title> Towards Database Optimization by Evolution. In A.K. </title> <editor> Majumdar and N. Prakash, editors, </editor> <booktitle> Proceedings of the International Conference on Information Systems and Management of Data (CISMOD 92), </booktitle> <pages> pages 273-287, </pages> <address> Bangalore, India, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: For a general introduction into this kind of evolution in the context of formal (technical) systems, we refer to [21] and [11]. The underlying theoretical foundations of EDO are found in [5], [6], [7], [2] and <ref> [8] </ref>. Compared to traditional database normalization (see e.g. [24]), this approach has several advantages. For example, a walk through the solution space of alternative internal representations can be guided on the basis of the expected quality (Time and Space) of the internal representations found as yet.
Reference: [9] <author> O.M.F. De Troyer, R. Meersman, and F. Ponsaert. </author> <title> RIDL User Guide. Research report, International Centre for Information Analysis Services, Control Data Belgium, </title> <publisher> Inc., </publisher> <address> Brussels, Belgium, </address> <year> 1984. </year>
Reference-contexts: Each path characterizes a class of conceptual retrieval operations in terms of object types and roles from the information structure. More details about path-based operations for conceptual information structures are found in <ref> [9] </ref> and [14]. * The data profile contains a quantification of the database contents. Figure 13 in appendix A shows an example data profile, specifying the relative number of instances for each object type in the information structure from figure 12.
Reference: [10] <author> O.M.F. De Troyer, R. Meersman, and P. Verlinden. </author> <title> RIDL* on the CRIS Case: A Workbench for NIAM. </title> <editor> In T.W. Olle, A.A. Verrijn-Stuart, and L. Bhabuta, editors, </editor> <booktitle> 20 Computerized Assistance during the Information Systems Life Cycle, </booktitle> <pages> pages 375-459, </pages> <address> Amsterdam, The Netherlands, </address> <year> 1988. </year> <month> North-Holland/IFIP. </month>
Reference-contexts: However, for a large and complex conceptual data model the enumeration of all possible internal representations is far from attractive. For this reason existing tools and techniques for database design based on conceptual modelling usually avoid exhaustive search (see e.g. [1], <ref> [10] </ref>, [13], [20], [22]). However, a general and flexible (time/space-driven) mechanism for walking through the solution space of alternative internal representations is 2 Sec. 2 Framework for database mappings not found in the literature. <p> The fitness of internal representations is estimated on the basis of profiles, characterizing the environment in which the database under development will operate. Compared to existing tools and techniques for database design based on conceptual mod-elling (see e.g. [1], <ref> [10] </ref>, [13], [20], [22]), our tool has several interesting features. The internal representations manipulated by EDO are expressed in terms of the conceptual model under consideration. As a consequence, it is easily checked that the result of mutating a preliminary internal representation is still implementing the same conceptual model.
Reference: [11] <author> D.E. Goldberg. </author> <title> Genetic algorithms in search, optimization, and machine learning. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1989. </year>
Reference-contexts: Then these preliminary internal representations can be automatically modified into more desirable ones. In this way a walk through the solution space of alternative internal representations is performed. For a general introduction into this kind of evolution in the context of formal (technical) systems, we refer to [21] and <ref> [11] </ref>. The underlying theoretical foundations of EDO are found in [5], [6], [7], [2] and [8]. Compared to traditional database normalization (see e.g. [24]), this approach has several advantages. <p> It is stressed here that the aim of this paper is to show how these basic strategies can be applied to database design. The prototype EDO is currently being extended with more powerful techniques (such as Simulated Annealing [19] and Genetic Algorithms <ref> [11] </ref>). This will be discussed in section 5, containing conclusions and directions for future research. <p> As a result, the formula given above is in accordance with the fact that usually the bottle-neck in the performance of evolutionary search algorithms is fitness evaluation, rather than the actual evolution mechanism (see e.g. <ref> [11] </ref>, [21]). 3.2 Initial generation Before a random search strategy is activated we first generate an initial pool of internal representations, using the Generator introduced in section 2.7. After completing the generation process, the system gives the Status Report shown in figure 5. <p> As a consequence, the line indicated by Steps = 60 reflects a proper convex Pareto-Optimal front as one would expect in a multicriteria optimization problem with conflicting objectives (see also <ref> [11] </ref>). 5 Conclusions and future research In this paper we introduced the prototype for evolutionary database design EDO. For a given conceptual data model, this interactive tool allows a database designer to generate preliminary internal representations and to make these representations evolve into more desirable ones.
Reference: [12] <editor> J.J. van Griethuysen, editor. </editor> <title> Concepts and Terminology for the Conceptual Schema and the Information Base. </title> <publisher> Publ. nr. </publisher> <address> ISO/TC97/SC5-N695, </address> <year> 1982. </year>
Reference-contexts: We first give a short explanation of the problem area. The aim of conceptual data models is to specify the object types to be handled by an information system, without considering the efficiency of the resulting system (see e.g. <ref> [12] </ref>). The aim of internal representations is to implement a given conceptual model in an efficient way. Obviously, one and the same conceptual data model may have a very large number of alternative internal representations (see e.g. [7]). Each internal representation has two important properties.
Reference: [13] <author> T.A. Halpin. WISE: </author> <title> a Workbench for Information System Engineering. </title> <editor> In V.-P. Tahvanainen and K. Lyytinen, editors, </editor> <title> Next Generation CASE Tools, </title> <booktitle> volume 3 of Studies in Computer and Communication Systems, </booktitle> <pages> pages 38-49. </pages> <publisher> IOS Press, </publisher> <year> 1992. </year>
Reference-contexts: However, for a large and complex conceptual data model the enumeration of all possible internal representations is far from attractive. For this reason existing tools and techniques for database design based on conceptual modelling usually avoid exhaustive search (see e.g. [1], [10], <ref> [13] </ref>, [20], [22]). However, a general and flexible (time/space-driven) mechanism for walking through the solution space of alternative internal representations is 2 Sec. 2 Framework for database mappings not found in the literature. <p> The fitness of internal representations is estimated on the basis of profiles, characterizing the environment in which the database under development will operate. Compared to existing tools and techniques for database design based on conceptual mod-elling (see e.g. [1], [10], <ref> [13] </ref>, [20], [22]), our tool has several interesting features. The internal representations manipulated by EDO are expressed in terms of the conceptual model under consideration. As a consequence, it is easily checked that the result of mutating a preliminary internal representation is still implementing the same conceptual model.
Reference: [14] <author> A.H.M. ter Hofstede, H.A. Proper, and Th.P. van der Weide. </author> <title> Formal definition of a conceptual language for the description and manipulation of information models. </title> <journal> Information Systems, </journal> <volume> 18(7) </volume> <pages> 489-523, </pages> <year> 1993. </year>
Reference-contexts: Each path characterizes a class of conceptual retrieval operations in terms of object types and roles from the information structure. More details about path-based operations for conceptual information structures are found in [9] and <ref> [14] </ref>. * The data profile contains a quantification of the database contents. Figure 13 in appendix A shows an example data profile, specifying the relative number of instances for each object type in the information structure from figure 12.
Reference: [15] <author> A.H.M. ter Hofstede and Th.P. van der Weide. </author> <title> Expressiveness in conceptual data modelling. </title> <journal> Data & Knowledge Engineering, </journal> <volume> 10(1) </volume> <pages> 65-100, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: Furthermore, constraints are used for specifying more advanced integrity rules. In section 2.5 two basic kinds of constraints are discussed in more detail. For other constraints we refer to [5]. Advanced modelling constructs, such as set types, sequence types, schema types and generalization hierarchies are treated in <ref> [15] </ref>. 4 Sec. 2 Framework for database mappings 2.2 Profiles In order to characterize the environment in which the database under development will operate, the following profiles are used: * The access profile contains information about the (retrieval and update) operations to be performed.
Reference: [16] <author> I. Kobayashi. </author> <title> Classification and transformations of binary relationship relation schemata. </title> <journal> Information Systems, </journal> <volume> 11(2) </volume> <pages> 109-122, </pages> <year> 1986. </year>
Reference-contexts: These are treated in [6]. 2.1 Conceptual data models In this section we discuss conceptual data models. We focus on data modelling techniques with an underlying object-role structure (e.g. NIAM [17], [18] and the Binary Relationship Model <ref> [16] </ref>, [23]). A formal definition of these models is found in [5]. The basic notions are summarized as follows. An object-role data model consists of an information structure I and a set of constraints C on the possible populations of the information structure.
Reference: [17] <author> C.M.R. Leung and G.M. Nijssen. </author> <title> Relational database design using the NIAM conceptual schema. </title> <journal> Information Systems, </journal> <volume> 13(2) </volume> <pages> 219-227, </pages> <year> 1988. </year>
Reference-contexts: These are treated in [6]. 2.1 Conceptual data models In this section we discuss conceptual data models. We focus on data modelling techniques with an underlying object-role structure (e.g. NIAM <ref> [17] </ref>, [18] and the Binary Relationship Model [16], [23]). A formal definition of these models is found in [5]. The basic notions are summarized as follows. An object-role data model consists of an information structure I and a set of constraints C on the possible populations of the information structure. <p> Another example involves the evolution of simple internal representations, where each fact type is taken separately, into more complex internal representations where fact types are joined together. In this way specific Normal Forms may be constructed stepwise (e.g. the Optimal Normal Form <ref> [17] </ref>, [18]), such that partly normalized representations are yielded as intermediate solutions. Finally, guidance conditions may also be expressed in terms of storage requirements and average response time of the internal representations, for instance in hill climbing strategies. This will be discussed in later sections.
Reference: [18] <author> G.M. Nijssen and T.A. Halpin. </author> <title> Conceptual Schema and Relational Database Design: a fact oriented approach. </title> <publisher> Prentice-Hall, </publisher> <address> Sydney, Australia, </address> <year> 1989. </year>
Reference-contexts: These are treated in [6]. 2.1 Conceptual data models In this section we discuss conceptual data models. We focus on data modelling techniques with an underlying object-role structure (e.g. NIAM [17], <ref> [18] </ref> and the Binary Relationship Model [16], [23]). A formal definition of these models is found in [5]. The basic notions are summarized as follows. An object-role data model consists of an information structure I and a set of constraints C on the possible populations of the information structure. <p> Another example involves the evolution of simple internal representations, where each fact type is taken separately, into more complex internal representations where fact types are joined together. In this way specific Normal Forms may be constructed stepwise (e.g. the Optimal Normal Form [17], <ref> [18] </ref>), such that partly normalized representations are yielded as intermediate solutions. Finally, guidance conditions may also be expressed in terms of storage requirements and average response time of the internal representations, for instance in hill climbing strategies. This will be discussed in later sections.
Reference: [19] <author> C.R. Reeves, </author> <title> editor. Modern heuristic techniques for combinatorial problems. </title> <publisher> Blackwell Scientific Publications, Oxford, </publisher> <address> United Kingdom, </address> <year> 1993. </year>
Reference-contexts: It is stressed here that the aim of this paper is to show how these basic strategies can be applied to database design. The prototype EDO is currently being extended with more powerful techniques (such as Simulated Annealing <ref> [19] </ref> and Genetic Algorithms [11]). This will be discussed in section 5, containing conclusions and directions for future research. <p> As a consequence, the enumeration of all possible internal representations is far from attractive. Therefore, we adopt the transformational approach and apply data structure transformations in so-called evolutionary design strategies (see e.g. <ref> [19] </ref>, [21]). In this section we describe how such strategies can be used for database design. In each step of the database design process, a preliminary internal representation is modified into a (more desirable) internal representation. The process can be started from an initially generated (set of) internal representation (s). <p> Such probabilistic replacement mechanisms are applied in e.g. Simulated Annealing and Genetic Algorithms ([11], <ref> [19] </ref> and [21]). The latest version of EDO also supports the so-called Steepest Ascent strategy (see also section 4.1), while the Simulated Annealing approach is curently being implemented.
Reference: [20] <author> N. Rishe. </author> <title> A file structure for semantic databases. </title> <journal> Information Systems, </journal> <volume> 16(4) </volume> <pages> 375-385, </pages> <year> 1991. </year>
Reference-contexts: However, for a large and complex conceptual data model the enumeration of all possible internal representations is far from attractive. For this reason existing tools and techniques for database design based on conceptual modelling usually avoid exhaustive search (see e.g. [1], [10], [13], <ref> [20] </ref>, [22]). However, a general and flexible (time/space-driven) mechanism for walking through the solution space of alternative internal representations is 2 Sec. 2 Framework for database mappings not found in the literature. <p> The fitness of internal representations is estimated on the basis of profiles, characterizing the environment in which the database under development will operate. Compared to existing tools and techniques for database design based on conceptual mod-elling (see e.g. [1], [10], [13], <ref> [20] </ref>, [22]), our tool has several interesting features. The internal representations manipulated by EDO are expressed in terms of the conceptual model under consideration. As a consequence, it is easily checked that the result of mutating a preliminary internal representation is still implementing the same conceptual model.
Reference: [21] <editor> H.P. Schwefel. </editor> <title> Numerical Optimization of Computer Models. </title> <publisher> John Wiley and Sons, </publisher> <address> New York, </address> <year> 1981. </year>
Reference-contexts: Then these preliminary internal representations can be automatically modified into more desirable ones. In this way a walk through the solution space of alternative internal representations is performed. For a general introduction into this kind of evolution in the context of formal (technical) systems, we refer to <ref> [21] </ref> and [11]. The underlying theoretical foundations of EDO are found in [5], [6], [7], [2] and [8]. Compared to traditional database normalization (see e.g. [24]), this approach has several advantages. <p> As a consequence, the enumeration of all possible internal representations is far from attractive. Therefore, we adopt the transformational approach and apply data structure transformations in so-called evolutionary design strategies (see e.g. [19], <ref> [21] </ref>). In this section we describe how such strategies can be used for database design. In each step of the database design process, a preliminary internal representation is modified into a (more desirable) internal representation. The process can be started from an initially generated (set of) internal representation (s). <p> As a result, the formula given above is in accordance with the fact that usually the bottle-neck in the performance of evolutionary search algorithms is fitness evaluation, rather than the actual evolution mechanism (see e.g. [11], <ref> [21] </ref>). 3.2 Initial generation Before a random search strategy is activated we first generate an initial pool of internal representations, using the Generator introduced in section 2.7. After completing the generation process, the system gives the Status Report shown in figure 5. <p> The Pool Inspector gives more detailed information about the current pool, while the Evolution Inspector gives more information about the evolution process which resulted in the current pool. 4 Hill climbing 4.1 Hill climbing strategy In this section we consider the possibility of hill climbing (see e.g. <ref> [21] </ref>) through the solution space of alternative internal representations. <p> Such probabilistic replacement mechanisms are applied in e.g. Simulated Annealing and Genetic Algorithms ([11], [19] and <ref> [21] </ref>). The latest version of EDO also supports the so-called Steepest Ascent strategy (see also section 4.1), while the Simulated Annealing approach is curently being implemented.
Reference: [22] <author> P. Shoval and M. Even-Chaime. </author> <title> ADDS: A system for automatic database schema design based on the binary-relationship model. </title> <journal> Data & Knowledge Engineering, </journal> <volume> 3(2) </volume> <pages> 123-144, </pages> <year> 1987. </year>
Reference-contexts: However, for a large and complex conceptual data model the enumeration of all possible internal representations is far from attractive. For this reason existing tools and techniques for database design based on conceptual modelling usually avoid exhaustive search (see e.g. [1], [10], [13], [20], <ref> [22] </ref>). However, a general and flexible (time/space-driven) mechanism for walking through the solution space of alternative internal representations is 2 Sec. 2 Framework for database mappings not found in the literature. <p> The fitness of internal representations is estimated on the basis of profiles, characterizing the environment in which the database under development will operate. Compared to existing tools and techniques for database design based on conceptual mod-elling (see e.g. [1], [10], [13], [20], <ref> [22] </ref>), our tool has several interesting features. The internal representations manipulated by EDO are expressed in terms of the conceptual model under consideration. As a consequence, it is easily checked that the result of mutating a preliminary internal representation is still implementing the same conceptual model.
Reference: [23] <author> P. Shoval and S. Zohn. </author> <title> Binary-Relationship integration methodology. </title> <journal> Data & Knowledge Engineering, </journal> <volume> 6(3) </volume> <pages> 225-250, </pages> <year> 1991. </year>
Reference-contexts: These are treated in [6]. 2.1 Conceptual data models In this section we discuss conceptual data models. We focus on data modelling techniques with an underlying object-role structure (e.g. NIAM [17], [18] and the Binary Relationship Model [16], <ref> [23] </ref>). A formal definition of these models is found in [5]. The basic notions are summarized as follows. An object-role data model consists of an information structure I and a set of constraints C on the possible populations of the information structure.
Reference: [24] <author> J.D. Ullman. </author> <title> Principles of Database and Knowledge-base Systems, volume I. </title> <publisher> Computer Science Press, </publisher> <address> Rockville, Maryland, </address> <year> 1989. </year> <month> 21 </month>
Reference-contexts: For a general introduction into this kind of evolution in the context of formal (technical) systems, we refer to [21] and [11]. The underlying theoretical foundations of EDO are found in [5], [6], [7], [2] and [8]. Compared to traditional database normalization (see e.g. <ref> [24] </ref>), this approach has several advantages. For example, a walk through the solution space of alternative internal representations can be guided on the basis of the expected quality (Time and Space) of the internal representations found as yet. <p> The meaning of a uniqueness constraint is similar to the notion of a key (see e.g. [5], <ref> [24] </ref>). As a consequence, presence or absence of a uniqueness constraint will not cause an internal representation to be illegal. However, a special situation occurs if the hook of a fact type is unique. Then the subtable corresponding to that fact type is flat rather than nested.
References-found: 24

