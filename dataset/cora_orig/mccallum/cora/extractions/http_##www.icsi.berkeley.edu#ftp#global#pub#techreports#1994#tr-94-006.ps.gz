URL: http://www.icsi.berkeley.edu/ftp/global/pub/techreports/1994/tr-94-006.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/ftp/global/pub/techreports/1994/
Root-URL: http://www.icsi.berkeley.edu
Email: email: becker@informatik.uni-frankfurt.de  email: &lt;name&gt;@informatik.uni-frankfurt.de  
Title: On Variable Ordering of Ordered Functional Decision Diagrams  
Author: Bernd Becker Rolf Drechsler Michael Theobald 
Note: This work was supported by DFG grant Be 1176/4-1.  
Address: CA 94707;  20 Informatik, J.W.Goethe-Universitat, D-60054 Frankfurt;  
Affiliation: Fachbereich 20 Informatik, J.W.Goethe-Universitat, D-60054 Frankfurt, and International Computer Science Institute, Berkeley,  Fachbereich  
Pubnum: TR-94-006  
Abstract: In this paper methods for finding good variable orderings for ordered functional decision diagrams (OFDDs) are investigated. We present an algorithm for exact minimization of OFDDs that is applicable for functions up to n = 14 variables. We present an upper bound for the size of OFDDs representing tree-like circuits. Various methods for dynamic variable ordering based on the exchange of variables are presented. Experimental results are given to show the efficiency of our approaches. 
Abstract-found: 1
Intro-found: 1
Reference: [Ake78] <author> S.B. Akers. </author> <title> Binary decision diagrams. </title> <journal> IEEE Trans. on Comp., </journal> <volume> C-27:509-516, </volume> <year> 1978. </year>
Reference-contexts: From Lemma 1 and Definition 3 we conclude: Lemma 2 Reduced OFDDs are a canonical representation for Boolean functions. The size of an OFDD can be further reduced, if complemented edges (CEs) are used <ref> [Ake78, BRB90, BDT93] </ref>. Then a node represents a function and the complement of the function at the same time. The representation is further canonical. Experiments show that CEs reduce the OFDD-size by 10 % on average.
Reference: [BBK89] <author> F. Brglez, D. Bryan, and K. Kozminski. </author> <title> Combinational profiles of sequential benchmark circuits. </title> <booktitle> In Int'l Symp. Circ. and Systems, </booktitle> <pages> pages 1929-1934, </pages> <year> 1989. </year>
Reference-contexts: Various methods for dynamic variable ordering are presented. We performed experimental results that show that OFDDs are often more succinct than OBDDs. We compare our heuristics with the heuristics presented in [SKR93]. We constructed OFDDs for some of the ISCAS89 <ref> [BBK89] </ref> and some of the MCNC91 benchmarks. Thus, we show for the first time that OFDDs are also applicable for representation of large circuits. The paper is structured as follows: In Section 2 OFDDs are defined. <p> The results including a comparison with the optimal OFDD size size min for the arithmetical benchmarks are given in Figure 5. Since sifting guaranteed the best results we also applied it to larger examples, i.e. ISCAS89 benchmarks <ref> [BBK89] </ref>. We started with the initial ordering and a node limit of 70000 nodes. The dynamic reordering was performed when no more nodes were available. The results in comparison to OBDDs that are also constructed using sifting [Rud93] are presented in Figure 6.
Reference: [BD93a] <author> B. Becker and R. Drechsler. </author> <title> On the computational power of functional decision diagrams. 20. Workshop uber Komplexitatstheorie, Datenstrukturen und effiziente Algorithmen, </title> <address> Berlin, </address> <year> 1993. </year>
Reference-contexts: Thus, in many applications Reed-Muller expansions (RMEs) are used. In this paper we focus on a special class of restricted RMEs, called ordered functional decision diagrams (OFDDs). OFDDs are also applied to problems in logic synthesis, e.g. technology mapping [SKR92] and design for testability [BD93b]. In <ref> [BD93a] </ref> it has been proven that the size of an OFDD representing a Boolean function largely depends on the chosen variable ordering, i.e. the size of an OFDD varies from linear to exponential. <p> The core of the data structures is a decision diagram (DD), which is a directed acyclic graph with some additional properties. We start with general definitions. Then we introduce further restrictions. Based on these definitions it is possible to generalize the data structure to more powerful ones (see <ref> [BD93a] </ref>). Definition 1 A decision diagram (DD) over X n := fx 1 ; x 2 ; : : : ; x n g is a rooted directed acyclic graph G = (V; E) with vertex set V containing two types of vertices, non-terminal and terminal vertices. <p> Example 1 In Figure 1 an OFDD for the function f = x 1 x 2 + x 3 is shown. A dot on an edge symbolizes a CE. 3 Ordering Methods The size of an OFDD largely depends on the chosen variable ordering <ref> [BD93a] </ref>, i.e. the size of an OFDD varies from linear to exponential. In this section ordering methods are presented. 2 3.1 Exact Minimization We start with an algorithm for determining the ordering minimizing the overall size of an OFDD.
Reference: [BD93b] <author> B. Becker and R. Drechsler. </author> <title> Testability of circuits derived from functional decision diagrams. </title> <type> Technical report, </type> <institution> Universitat Frankfurt, 13/93, Fachbereich Informatik, </institution> <year> 1993. </year>
Reference-contexts: Thus, in many applications Reed-Muller expansions (RMEs) are used. In this paper we focus on a special class of restricted RMEs, called ordered functional decision diagrams (OFDDs). OFDDs are also applied to problems in logic synthesis, e.g. technology mapping [SKR92] and design for testability <ref> [BD93b] </ref>. In [BD93a] it has been proven that the size of an OFDD representing a Boolean function largely depends on the chosen variable ordering, i.e. the size of an OFDD varies from linear to exponential.
Reference: [BDT93] <author> B. Becker, R. Drechsler, and M. Theobald. </author> <title> On the implementation of a package for efficient representation and manipulation of functional decision diagrams. </title> <booktitle> IFIP WG 10.5 Workshop on Applications of the Reed-Muller Expansion in Circuit Design, </booktitle> <address> Hamburg, </address> <year> 1993. </year>
Reference-contexts: The most popular data structures are ordered binary decision diagrams (OBDDs), that were introduced by Bryant [Bry86] and in the meantime are used for the solution of numerous tasks in design automation [Bry92]. In recent years synthesis based on AND/EXOR realizations gains more and more interst <ref> [Ber68, Sau92, BDT93] </ref>, since AND/EXOR based graphs often allow more succinct representation for classes of Boolean functions than OBDDs [BDW93]. Thus, in many applications Reed-Muller expansions (RMEs) are used. In this paper we focus on a special class of restricted RMEs, called ordered functional decision diagrams (OFDDs). <p> Since we want to work with small representations of Boolean functions, we define methods to reduce decision diagrams. For this we introduce two reduction types, that can be combined <ref> [BDT93] </ref>. Type 1: Identify two nodes v, v 0 in the DD, where the sub-DDs rooted by v, v 0 are isomorphic. <p> From Lemma 1 and Definition 3 we conclude: Lemma 2 Reduced OFDDs are a canonical representation for Boolean functions. The size of an OFDD can be further reduced, if complemented edges (CEs) are used <ref> [Ake78, BRB90, BDT93] </ref>. Then a node represents a function and the complement of the function at the same time. The representation is further canonical. Experiments show that CEs reduce the OFDD-size by 10 % on average. <p> The general case for the exchange of variable i and an adjacent variable j is shown in Figure 2. All other cases can be reduced to this one. The exchange is performed very fast in our OFDD-package <ref> [BDT93] </ref>, since only edges must be redirected. In contrast to the method presented in [FMK91] our approach also uses CEs. One disadvantage of the method presented above is that it might easily be captured by local minima.
Reference: [BDW93] <author> B. Becker, R. Drechsler, and R. Werchner. </author> <title> On the relation between bdds and fdds. </title> <type> Technical report, </type> <institution> Universitat Frankfurt, 12/93, Fachbereich Informatik, </institution> <year> 1993. </year>
Reference-contexts: In recent years synthesis based on AND/EXOR realizations gains more and more interst [Ber68, Sau92, BDT93], since AND/EXOR based graphs often allow more succinct representation for classes of Boolean functions than OBDDs <ref> [BDW93] </ref>. Thus, in many applications Reed-Muller expansions (RMEs) are used. In this paper we focus on a special class of restricted RMEs, called ordered functional decision diagrams (OFDDs). OFDDs are also applied to problems in logic synthesis, e.g. technology mapping [SKR92] and design for testability [BD93b]. <p> x i @ @ $ exchange var f dd (F; m) f dof recompute number of saved nodes for needed permutations of m variables perform best exchange of m variables; g while (optimization possible); g 3.3 Dynamic Variable Ordering For general circuits such polynomial upper bounds can not be given <ref> [BDW93] </ref>. In the following we present methods that are based on the exchange of adjacent variables. (Similar methods have been applied to OBDDs in [FMK91, ISY91, Rud93].) The size is optimized without a complete reconstruction of the OFDD. Only local transformations for the two variables are performed.
Reference: [Ber68] <author> E. R. Berlekamp. </author> <title> Algebraic Coding Theory. </title> <publisher> McGraw-Hill Book Company, </publisher> <year> 1968. </year>
Reference-contexts: The most popular data structures are ordered binary decision diagrams (OBDDs), that were introduced by Bryant [Bry86] and in the meantime are used for the solution of numerous tasks in design automation [Bry92]. In recent years synthesis based on AND/EXOR realizations gains more and more interst <ref> [Ber68, Sau92, BDT93] </ref>, since AND/EXOR based graphs often allow more succinct representation for classes of Boolean functions than OBDDs [BDW93]. Thus, in many applications Reed-Muller expansions (RMEs) are used. In this paper we focus on a special class of restricted RMEs, called ordered functional decision diagrams (OFDDs).
Reference: [BHMS84] <author> R.K. Brayton, G.D. Hachtel, C. McMullen, and A.L. Sangiovanni-Vincentelli. </author> <title> Logic Minimization Algorithms for VLSI Synthesis. </title> <publisher> Cluwer Academic Publishers, </publisher> <year> 1984. </year>
Reference-contexts: z9sym z4 sqr6 rd53 radd mlp4 life f51m dist adr4 addm4 add6 nodes minimal OBDD size minimal OFDD size 10050 150 - 4 Experimental Results In this section we present experimental results concerning the algorithms presented in Section 3. 4.1 Exact Minimization We performed exact minimization of arithmetical benchmark circuits <ref> [BHMS84] </ref>, since AND/EXOR based data structures are especially applicable to these types of circuits. The results are presented in Figure 4, where the minimal OFDDs are also compared with the minimal OBDDs.
Reference: [BRB90] <author> K.S. Brace, R.L. Rudell, and R.E. Bryant. </author> <title> Efficient implementation of a BDD package. </title> <booktitle> In Design Automation Conf., </booktitle> <pages> pages 40-45, </pages> <year> 1990. </year>
Reference-contexts: From Lemma 1 and Definition 3 we conclude: Lemma 2 Reduced OFDDs are a canonical representation for Boolean functions. The size of an OFDD can be further reduced, if complemented edges (CEs) are used <ref> [Ake78, BRB90, BDT93] </ref>. Then a node represents a function and the complement of the function at the same time. The representation is further canonical. Experiments show that CEs reduce the OFDD-size by 10 % on average.
Reference: [Bry86] <author> R.E. Bryant. </author> <title> Graph based algorithms for Boolean function manipulation. </title> <journal> IEEE Trans. on Comp., </journal> <volume> 8 </volume> <pages> 677-691, </pages> <year> 1986. </year>
Reference-contexts: 1 Introduction Graph based data structures are often used in CAD systems for efficient representation and manipulation of Boolean functions. The most popular data structures are ordered binary decision diagrams (OBDDs), that were introduced by Bryant <ref> [Bry86] </ref> and in the meantime are used for the solution of numerous tasks in design automation [Bry92]. In recent years synthesis based on AND/EXOR realizations gains more and more interst [Ber68, Sau92, BDT93], since AND/EXOR based graphs often allow more succinct representation for classes of Boolean functions than OBDDs [BDW93]. <p> A careful analysis of the proofs in <ref> [Bry86, SW92, GM92] </ref> shows that the following lemma is valid for DDs: Lemma 1 The reduction of a free DD G is uniquely determined and can be computed in linear time in the size of G. Until now we have not defined how DDs can be related to Boolean functions.
Reference: [Bry92] <author> R.E. Bryant. </author> <title> Symbolic boolean manipulation with ordered binary-decision diagrams. </title> <journal> ACM, Comp. Surveys, </journal> <volume> 24 </volume> <pages> 293-318, </pages> <year> 1992. </year>
Reference-contexts: The most popular data structures are ordered binary decision diagrams (OBDDs), that were introduced by Bryant [Bry86] and in the meantime are used for the solution of numerous tasks in design automation <ref> [Bry92] </ref>. In recent years synthesis based on AND/EXOR realizations gains more and more interst [Ber68, Sau92, BDT93], since AND/EXOR based graphs often allow more succinct representation for classes of Boolean functions than OBDDs [BDW93]. Thus, in many applications Reed-Muller expansions (RMEs) are used.
Reference: [DST + 93] <author> R. Drechsler, A. Sarabi, M. Theobald, B. Becker, and M.A. Perkowski. </author> <title> Efficient representation and manipulation of switching functions based on ordered kronecker functional decision diagrams. </title> <type> Technical report, </type> <institution> J.W.Goethe-University, Frankfurt 14/93, </institution> <month> October, </month> <year> 1993. </year>
Reference-contexts: Since OFDDs are more succinct than OBDDs at least for some classes of functions they might partially be an alternative data structure. It is also possible to mix OBDDs and OFDDs level by level. This hybrid approach is currently implemented and first results can be found in <ref> [DST + 93] </ref>. 5 name size min m = 2 m = 3 m = 4 sift add6 23 58 59 57 45 addm4 132 133 132 132 132 adr4 15 15 15 15 15 dist 159 172 172 171 159 f51m 35 35 35 35 35 life 24 38 25
Reference: [FMK91] <author> M. Fujita, Y. Matsunga, and T. Kakuda. </author> <title> On variable ordering of binary decision diagrams for the application of multi-level synthesis. </title> <booktitle> In European Conf. on Design Automation, </booktitle> <pages> pages 50-54, </pages> <year> 1991. </year>
Reference-contexts: In the following we present methods that are based on the exchange of adjacent variables. (Similar methods have been applied to OBDDs in <ref> [FMK91, ISY91, Rud93] </ref>.) The size is optimized without a complete reconstruction of the OFDD. Only local transformations for the two variables are performed. This is due to the observation that OFDDs are a canonical form. <p> All other cases can be reduced to this one. The exchange is performed very fast in our OFDD-package [BDT93], since only edges must be redirected. In contrast to the method presented in <ref> [FMK91] </ref> our approach also uses CEs. One disadvantage of the method presented above is that it might easily be captured by local minima. But this method can be extended to the exchange of adjacent m variables (m &gt; 2).
Reference: [FS87] <author> Steven J. Friedman and Kenneth J. Supowit. </author> <title> Finding the optimal variable ordering for binary decision diagrams. </title> <booktitle> In Design Automation Conf., </booktitle> <pages> pages 348-356, </pages> <year> 1987. </year>
Reference-contexts: In this paper we present an algorithm for exact minimization of OFDDs based on the ideas presented in <ref> [FS87] </ref> and [ISY91], where similar algorithms were applied to OBDDs. We prove that tree-like circuits can be represented efficiently using OFDDs. A method for exchanging adjacent variables (including complemented edges) is introduced that is the basic operation for dynamic variable ordering. Various methods for dynamic variable ordering are presented. <p> In this section ordering methods are presented. 2 3.1 Exact Minimization We start with an algorithm for determining the ordering minimizing the overall size of an OFDD. The algorithms presented in <ref> [FS87] </ref> and [ISY91] can directly be applied, since reduced OFDDs fulfill all needed prerequisites, i.e. the number of nodes at level i are constant if the ordering of the variables in the upper and the lower part are changed. But the corresponding algorithm has exponential worst case behavior.
Reference: [GM92] <author> J. Gergov and C. Meinel. </author> <title> Efficient analysis and manipulation of obdds can be extended to read-once-only branching programs. In WG'92, </title> <publisher> LNCS, </publisher> <year> 1992. </year>
Reference-contexts: A careful analysis of the proofs in <ref> [Bry86, SW92, GM92] </ref> shows that the following lemma is valid for DDs: Lemma 1 The reduction of a free DD G is uniquely determined and can be computed in linear time in the size of G. Until now we have not defined how DDs can be related to Boolean functions.
Reference: [ISY91] <author> N. Ishiura, H. Sawada, and S. Yajima. </author> <title> Minimization of binary decision diagrams based on exchange of variables. </title> <booktitle> In Proceedings of ICCAD, </booktitle> <pages> pages 472-475, </pages> <year> 1991. </year>
Reference-contexts: In this paper we present an algorithm for exact minimization of OFDDs based on the ideas presented in [FS87] and <ref> [ISY91] </ref>, where similar algorithms were applied to OBDDs. We prove that tree-like circuits can be represented efficiently using OFDDs. A method for exchanging adjacent variables (including complemented edges) is introduced that is the basic operation for dynamic variable ordering. Various methods for dynamic variable ordering are presented. <p> In this section ordering methods are presented. 2 3.1 Exact Minimization We start with an algorithm for determining the ordering minimizing the overall size of an OFDD. The algorithms presented in [FS87] and <ref> [ISY91] </ref> can directly be applied, since reduced OFDDs fulfill all needed prerequisites, i.e. the number of nodes at level i are constant if the ordering of the variables in the upper and the lower part are changed. But the corresponding algorithm has exponential worst case behavior. <p> In the following we present methods that are based on the exchange of adjacent variables. (Similar methods have been applied to OBDDs in <ref> [FMK91, ISY91, Rud93] </ref>.) The size is optimized without a complete reconstruction of the OFDD. Only local transformations for the two variables are performed. This is due to the observation that OFDDs are a canonical form. <p> One disadvantage of the method presented above is that it might easily be captured by local minima. But this method can be extended to the exchange of adjacent m variables (m &gt; 2). Then, it is more time consuming but leads to better results, analogously to OBDDs <ref> [ISY91] </ref>. For this we construct a cyclic exchange of variables based on transpositions that visits all permutations of m variables. For m = 3 the sequence can be chosen as abc ! bac ! bca ! cba ! cab ! acb: This can directly be extented to arbitrary m [RND77].
Reference: [RND77] <author> E.M. Reingold, J. Nievergelt, and N. Deo. </author> <title> Combinatorial Algorithms Theory and Practice. </title> <publisher> Prentice-Hall, Inc., </publisher> <year> 1977. </year>
Reference-contexts: For this we construct a cyclic exchange of variables based on transpositions that visits all permutations of m variables. For m = 3 the sequence can be chosen as abc ! bac ! bca ! cba ! cab ! acb: This can directly be extented to arbitrary m <ref> [RND77] </ref>. The corresponding algorithm is shown in Figure 3. The experimental results in Section 4 show the results of this method for increasing m. This method is also called window permutation [Rud93]. Finally, we present the sifting algorithm [Rud93] for OFDDs.
Reference: [Rud93] <author> Richard Rudell. </author> <title> Dynamic variable ordering for ordered binary decision diagrams. </title> <booktitle> In Int'l Workshop on Logic Synth., </booktitle> <pages> pages 3a:1-12, </pages> <year> 1993. </year>
Reference-contexts: In the following we present methods that are based on the exchange of adjacent variables. (Similar methods have been applied to OBDDs in <ref> [FMK91, ISY91, Rud93] </ref>.) The size is optimized without a complete reconstruction of the OFDD. Only local transformations for the two variables are performed. This is due to the observation that OFDDs are a canonical form. <p> The corresponding algorithm is shown in Figure 3. The experimental results in Section 4 show the results of this method for increasing m. This method is also called window permutation <ref> [Rud93] </ref>. Finally, we present the sifting algorithm [Rud93] for OFDDs. There one variable is exchanged while all others are left stable. The variable is positioned at the location minimizing the overall size of the OFDD. <p> The corresponding algorithm is shown in Figure 3. The experimental results in Section 4 show the results of this method for increasing m. This method is also called window permutation <ref> [Rud93] </ref>. Finally, we present the sifting algorithm [Rud93] for OFDDs. There one variable is exchanged while all others are left stable. The variable is positioned at the location minimizing the overall size of the OFDD. <p> ISCAS89 benchmarks [BBK89]. We started with the initial ordering and a node limit of 70000 nodes. The dynamic reordering was performed when no more nodes were available. The results in comparison to OBDDs that are also constructed using sifting <ref> [Rud93] </ref> are presented in Figure 6. Finally, we compared the results obtained by our sifting method with the heuristics presented in [SKR93] for some of the MCNC91 benchmarks. We compared sifting with the best results obtained in [SKR93], where an other reduction method was used.
Reference: [Sau92] <author> J. Saul. </author> <title> Logic synthesis for arithmetic circuits using the reed-muller representation. </title> <booktitle> In Proceedings of EDAC'92, </booktitle> <pages> pages 109-113, </pages> <year> 1992. </year> <month> 7 </month>
Reference-contexts: The most popular data structures are ordered binary decision diagrams (OBDDs), that were introduced by Bryant [Bry86] and in the meantime are used for the solution of numerous tasks in design automation [Bry92]. In recent years synthesis based on AND/EXOR realizations gains more and more interst <ref> [Ber68, Sau92, BDT93] </ref>, since AND/EXOR based graphs often allow more succinct representation for classes of Boolean functions than OBDDs [BDW93]. Thus, in many applications Reed-Muller expansions (RMEs) are used. In this paper we focus on a special class of restricted RMEs, called ordered functional decision diagrams (OFDDs).
Reference: [SKR92] <author> E. Schubert, U. Kebschull, and W. Rosenstiel. </author> <title> FDD based technology mapping for FPGA. </title> <booktitle> In Pro--ceedings of EUROASIC, </booktitle> <pages> pages 14-18, </pages> <year> 1992. </year>
Reference-contexts: Thus, in many applications Reed-Muller expansions (RMEs) are used. In this paper we focus on a special class of restricted RMEs, called ordered functional decision diagrams (OFDDs). OFDDs are also applied to problems in logic synthesis, e.g. technology mapping <ref> [SKR92] </ref> and design for testability [BD93b]. In [BD93a] it has been proven that the size of an OFDD representing a Boolean function largely depends on the chosen variable ordering, i.e. the size of an OFDD varies from linear to exponential.
Reference: [SKR93] <author> E. Schubert, U. Kebschull, and W. Rosenstiel. </author> <title> Some optimizations for functional decision diagrams. </title> <booktitle> IFIP WG 10.5 Workshop on Applications of the Reed-Muller Expansion in Circuit Design, </booktitle> <address> Hamburg, </address> <year> 1993. </year>
Reference-contexts: Various methods for dynamic variable ordering are presented. We performed experimental results that show that OFDDs are often more succinct than OBDDs. We compare our heuristics with the heuristics presented in <ref> [SKR93] </ref>. We constructed OFDDs for some of the ISCAS89 [BBK89] and some of the MCNC91 benchmarks. Thus, we show for the first time that OFDDs are also applicable for representation of large circuits. The paper is structured as follows: In Section 2 OFDDs are defined. <p> The dynamic reordering was performed when no more nodes were available. The results in comparison to OBDDs that are also constructed using sifting [Rud93] are presented in Figure 6. Finally, we compared the results obtained by our sifting method with the heuristics presented in <ref> [SKR93] </ref> for some of the MCNC91 benchmarks. We compared sifting with the best results obtained in [SKR93], where an other reduction method was used. The corresponding OFDD-sizes are shown in Figure 7. 5 Conclusions In this paper ordering methods for OFDDs have been presented. <p> The results in comparison to OBDDs that are also constructed using sifting [Rud93] are presented in Figure 6. Finally, we compared the results obtained by our sifting method with the heuristics presented in <ref> [SKR93] </ref> for some of the MCNC91 benchmarks. We compared sifting with the best results obtained in [SKR93], where an other reduction method was used. The corresponding OFDD-sizes are shown in Figure 7. 5 Conclusions In this paper ordering methods for OFDDs have been presented. We succeeded in minimizing OFDDs for up to n = 14 variables. <p> 107 radd 15 27 27 26 20 rd53 13 13 13 13 13 sqr6 50 50 50 50 50 z4 13 13 13 13 13 z9sym 26 26 26 26 26 name OBDD OFDD s27 9 9 s344 103 115 s382 121 122 s1423 2725 2044 s1494 385 386 name <ref> [SKR93] </ref> sift b12 292 61 cordic 233 41 cps 4922 1293 rd53 34 13 rd84 86 29 t481 54 20 Z5xp1 54 45 6
Reference: [SW92] <author> D. Sieling and I. Wegener. </author> <title> Reduction of BDDs in linear time. </title> <type> Technical report, </type> <institution> Universitat Dortmund, </institution> <year> 1992. </year>
Reference-contexts: A careful analysis of the proofs in <ref> [Bry86, SW92, GM92] </ref> shows that the following lemma is valid for DDs: Lemma 1 The reduction of a free DD G is uniquely determined and can be computed in linear time in the size of G. Until now we have not defined how DDs can be related to Boolean functions.
References-found: 22

