URL: http://www.cs.utexas.edu/users/plaxton/ps/1997/ipl.ps
Refering-URL: http://www.cs.utexas.edu/users/plaxton/html/abc.html
Root-URL: 
Email: E-mail: sanjoy@cs.uvm.edu.  E-mail: johannes@cs.wisc.edu.  E-mail: plaxton@cs.utexas.edu.  E-mail: stoica@cs.odu.edu.  E-mail: wahab@cs.odu.edu.  E-mail: jeffay@cs.unc.edu.  
Title: Fair On-Line Scheduling of a Dynamic Set of Tasks on a Single Resource  
Author: Sanjoy K. Baruah Johannes E. Gehrke C. Greg Plaxton Ion Stoica Hussein Abdel-Wahab Kevin Jeffay 
Note: Preprint submitted to Elsevier Science  
Address: Vermont, Burlington, VT 05405.  1210 West Dayton Street, Madison, WI 53706-1685.  Austin, Austin, TX 78712-1188.  Norfolk, VA 23529-0162.  Norfolk, VA 23529-0162.  Chapel Hill, Chapel Hill, NC 27599-3175.  
Affiliation: Department of Computer Science, University of  Computer Sciences Department, University of Wisconsin-Madison,  Department of Computer Science, University of Texas at  Department of Computer Science, Old Dominion University,  Department of Computer Science, Old Dominion University,  Department of Computer Science, University of North Carolina at  
Abstract: Consider a set of "tasks" competing for the use of a single "resource", where: (i) only one task is allowed to use the resource at a time, (ii) the resource is scheduled in unit-time intervals, (iii) each task requires a specific fraction of the resource capacity over an extended period, and (iv) tasks arrive and depart at any time. We refer to such a task system as an instance of the single-resource scheduling problem. The problem of designing a "fair" scheduling algorithm for such task systems has recently received a great deal of attention in the literature. This paper makes two main contributions. First, we point out that Tijdeman's work on the so-called "chairman 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. K. Baruah, N. K. Cohen, C. G. Plaxton, and D. A. Varvel. </author> <title> Proportionate progress: A notion of fairness in resource allocation. </title> <journal> Algorithmica, </journal> <volume> 15 </volume> <pages> 600-625, </pages> <year> 1996. </year>
Reference-contexts: The best we can hope to do is to assign the resource to X in either bw tc or dw te of the first t slots, for all t. A schedule that simultaneously provides such proportionate progress to all tasks is said to be P-fair <ref> [1] </ref>. More generally, a schedule for which the number of allocations to any task is at all times within an additive of ? Related results appear in the conference paper [14] as well as the technical reports [2,12]. 1 Supported by the National Science Foundation under Research Initiation Award No. <p> The weight of task x at slot t, denoted w (x; t), is r (x; t) f (t). Note that 0 w (x; t) 1, and that the sum of the task weights at any given slot also lies in the real interval <ref> [0; 1] </ref>. In applications, r (x; t) will typically be less than 1, and should be interpreted as the fraction of the resource that task x would ideally like to receive during slot t. <p> A schedule or scheduling algorithm that achieves a lag bound of &lt; 1 is said to be P-fair <ref> [1] </ref>. Note that P-fairness is a very strong fairness property: A schedule S is P-fair if and only if for all tasks x and slots t, either A (S; x; t) = bW (x; t)c or A (S; x; t) = dW (x; t)e.
Reference: [2] <author> S. K. Baruah, J. E. Gehrke, and C. G. Plaxton. </author> <title> Fast scheduling of periodic tasks on multiple resources. </title> <type> Technical Report TR-95-02, </type> <institution> Department of Computer Science, University of Texas at Austin, </institution> <month> February </month> <year> 1995. </year>
Reference: [3] <author> S. K. Baruah, J. E. Gehrke, and C. G. Plaxton. </author> <title> Fast scheduling of periodic tasks on multiple resources. </title> <booktitle> In Proceedings of the 9th International Parallel Processing Symposium, </booktitle> <pages> pages 280-288, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: Using standard algorithmic techniques (see, for example, the implementation of Algorithm PD in <ref> [3] </ref>) these bounds can be improved to obtain the following result. (Although no implementation details are provided in [15], we attribute the result to Tijdeman since these 7 details are straightforward.) Theorem 2 (Tijdeman) Problem A can be solved by an on-line algorithm with lag bound 1 1=(2n 2), preprocessing cost
Reference: [4] <author> J. Bennett and H. Zhang. </author> <title> WF 2 Q: Worst-case fair queueing. </title> <booktitle> In Proceedings of IEEE INFOCOM '96, </booktitle> <pages> pages 120-128, </pages> <month> March </month> <year> 1996. </year>
Reference: [5] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference: [6] <author> R. L. Cruz. </author> <title> A calculus for network delay, Part I: Network elements in isolation. </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> 37 </volume> <pages> 114-131, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: In the context of scheduling network traffic in packet-based networks, Demers, Keshav, and Shenker [7] have proposed the Packet Fair Queueing algorithm (PFQ). Parekh and Gallager [10,11] have analyzed the behavior of PFQ when the traffic conforms to the (; ) model <ref> [6] </ref>, and shown that any task X receives the resource for at least bw tc of the first t slots; it has been shown, however [4,12,16], that X may in fact receive the resource for w t + fi (n) of the first t slots, where n denotes the number of
Reference: [7] <author> A. Demers, S. Keshav, and S. Shenker. </author> <title> Analysis and simulation of a fair queueing algorithm. </title> <journal> Journal of Internetworking Research and Experience, </journal> <pages> pages 3-26, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: In the context of scheduling network traffic in packet-based networks, Demers, Keshav, and Shenker <ref> [7] </ref> have proposed the Packet Fair Queueing algorithm (PFQ).
Reference: [8] <author> U. Maheshwari. </author> <title> Charge-based proportional scheduling. </title> <type> Technical Memorandum, </type> <institution> MIT/LCS/TM-529, Laboratory for Computer Science, Massachusetts Institute of Technology, </institution> <month> July </month> <year> 1995. </year>
Reference: [9] <author> E. M. McCreight. </author> <title> Priority search trees. </title> <journal> SIAM Journal on Computing, </journal> <volume> 14 </volume> <pages> 257-276, </pages> <year> 1985. </year>
Reference: [10] <author> A. K. Parekh and R. G. Gallager. </author> <title> A generalized processor sharing approach to flow control in integrated services networks: The single node case. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> 1(3) </volume> <pages> 344-357, </pages> <month> June </month> <year> 1993. </year>
Reference: [11] <author> A. K. Parekh and R. G. Gallager. </author> <title> A generalized processor sharing approach to flow control in integrated services networks: The multiple node case. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> 2(2) </volume> <pages> 137-150, </pages> <month> April </month> <year> 1994. </year>
Reference: [12] <author> I. Stoica and H. Abdel-Wahab. </author> <title> Earliest eligible virtual deadline first: A flexible and accurate mechanism for proportional share resource allocation. </title> <type> Technical Report TR-95-22, </type> <institution> Department of Computer Science, Old Dominion University, </institution> <month> November </month> <year> 1995. </year>
Reference: [13] <author> I. Stoica and H. Abdel-Wahab. </author> <title> A new approach to implement proportional share resource allocation. </title> <type> Technical Report TR-95-05, </type> <institution> Department of Computer Science, Old Dominion University, </institution> <month> April </month> <year> 1995. </year>
Reference: [14] <author> I. Stoica, H. Abdel-Wahab, K. Jeffay, S. K. Baruah, J. E. Gehrke, and C. G. Plaxton. </author> <title> A proportional share resource allocation algorithm for real-time, time-shared systems. </title> <booktitle> In Proceedings of the 17th Annual IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 288-299, </pages> <month> December </month> <year> 1996. </year>
Reference-contexts: A schedule that simultaneously provides such proportionate progress to all tasks is said to be P-fair [1]. More generally, a schedule for which the number of allocations to any task is at all times within an additive of ? Related results appear in the conference paper <ref> [14] </ref> as well as the technical reports [2,12]. 1 Supported by the National Science Foundation under Research Initiation Award No. CCR 9596282. 2 Supported by the National Science Foundation under Grant No. CCR-9504145, and the Texas Advanced Research Program under Grant No.
Reference: [15] <author> R. </author> <title> Tijdeman. The chairman assignment problem. </title> <journal> Discrete Mathematics, </journal> <volume> 32 </volume> <pages> 323-330, </pages> <year> 1980. </year>
Reference-contexts: Thus, none of the algorithms presented in the aforementioned papers achieves a constant lag bound (i.e., independent of n, the number of tasks), let alone P-fairness. In this paper, we extend a result of Tijdeman <ref> [15] </ref> to obtain a simple P-fair algorithm for scheduling a dynamic set of tasks on a single resource. When the cumulative request of all tasks of a resource exceeds the capacity of the resource, at least two different strategies are possible. <p> In Section 2, we define some basic terminology and formulate several variants of the single-resource scheduling problem. In Section 3, we discuss certain consequences of Tijdeman's work on the so-called "chairman assignment problem" <ref> [15] </ref>, including an efficient on-line scheduling algorithm for the static version of the single-resource scheduling problem. In Section 4, we state our main result, an efficient on-line scheduling algorithm for a dynamic version of the single-resource scheduling problem. <p> also applies to Problem A, (ii) any upper bound on the complexity of Problem C or D also applies to Problems A and B, and (iii) any upper bound on the complexity of Problem E also applies to Problems A, B, C, and D. 3 Previous Results Work of Tijdeman <ref> [15] </ref> on the so-called "chairman assignment problem" has direct implications for the problems considered in this paper. Lemma 1 (Tijdeman) There exists a schedule with lag bound 1 1=(2n 2) for any instance of Problem D (hence also for Problems A and B). <p> Furthermore, there exists a schedule with lag bound &lt; 1 for any instance of Problem E (hence also for Problem C). 6 The following scheme is implicit in <ref> [15] </ref>, and underlies a number of scheduling algorithms for Problems A through E. Tijdeman's Scheme. We wish to generate a schedule for a given instance of Problem A, B, C, D, or E, subject to a given lag bound L that is known to be achievable by Lemma 1. <p> On the other hand, for instances of Problem A, it is easy to compute task deadlines on-line; because the task requests are constant and the set of tasks is static, w (x; t) does not depend on t. Tijdeman <ref> [15] </ref> gives the following on-line algorithm for Problem A with L = (; 1 1=(2n 2)), and where we write w (x) to denote w (x; t). Algorithm A. <p> Note that Algorithm A remains correct if we replace the deadline t + fl with fl ("slack"). (In fact, the algorithm given in <ref> [15] </ref> makes use of fl instead of t + fl.) A naive implementation of Algorithm A leads to a preprocessing cost of O (n) and a per-slot cost of O (n). <p> Using standard algorithmic techniques (see, for example, the implementation of Algorithm PD in [3]) these bounds can be improved to obtain the following result. (Although no implementation details are provided in <ref> [15] </ref>, we attribute the result to Tijdeman since these 7 details are straightforward.) Theorem 2 (Tijdeman) Problem A can be solved by an on-line algorithm with lag bound 1 1=(2n 2), preprocessing cost O (n), and per-slot cost O (log n). 4 Our Results In this paper we show that Tijdeman's
Reference: [16] <author> C. A. Waldspurger. </author> <title> Lottery and Stride Scheduling: Flexible Proportional-Share Resource Management. </title> <type> PhD thesis, </type> <institution> Laboratory for Computer Science, Massachusetts Institute of Technology, </institution> <month> September </month> <year> 1995. </year>
Reference: [17] <author> C. A. Waldspurger and W. E. Weihl. </author> <title> Lottery scheduling: Flexible proportional-share resource management. </title> <booktitle> In Proceedings of the First Symposium on Operating System Design and Implementation, </booktitle> <pages> pages 1-12, </pages> <month> November </month> <year> 1994. </year>
Reference: [18] <author> C. A. Waldspurger and W. E. Weihl. </author> <title> Stride scheduling: Deterministic proportional-share resource management. </title> <type> Technical Memorandum, </type> <institution> MIT/LCS/TM-528, Laboratory for Computer Science, Massachusetts Institute of Technology, </institution> <month> July </month> <year> 1995. </year> <month> 14 </month>
References-found: 18

