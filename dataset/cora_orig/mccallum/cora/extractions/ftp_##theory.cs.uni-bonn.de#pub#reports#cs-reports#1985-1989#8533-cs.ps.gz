URL: ftp://theory.cs.uni-bonn.de/pub/reports/cs-reports/1985-1989/8533-cs.ps.gz
Refering-URL: http://cs.uni-bonn.de/info5/publications/CS-1985-1989-en.html
Root-URL: http://cs.uni-bonn.de
Email: dahlhaus@cs.su.oz.au  marek@icsi.berkeley.edu  
Title: An Efficient Parallel Algorithm for the Minimal Elimination Ordering (MEO) of an Arbitrary Graph problem
Author: Elias Dahlhaus Marek Karpinski and 
Note: The MEO  An Extended Abstract has appeared in [DK 89]. present address:  Research partially supported by the Leibniz Center for Research in Computer Science, by the DFG Grant KA 673/4-1, and by the SERC Grant GR-E 68297.  
Address: D-5300 Bonn 1  D-5300 Bonn 1  Berkeley, California  Sydney, NSW 2006, Australia  
Affiliation: Dept. of Computer Science, University of Bonn  Department of Computer Science, University of Bonn,  International Computer Science Institute  Basser Department of Computer Science, University of  
Abstract: We design the first efficient parallel algorithm for computing the min imal elimination ordering (MEO) of an arbitrary graph. The algorithm works in O(log 3 n) parallel time and O(nm) processors on a CREW PRAM, for an n-vertex, m-edge graph, and is optimal up to a polylogarithmic factor with respect to the best sequential algorithm of Rose, Tarjan and Lueker ([RTL 76]). 
Abstract-found: 1
Intro-found: 1
Reference: [AA 87] <author> Aggarwal, A., Anderson, R., </author> <title> A Random NC Algorithm for Depth First Search, </title> <booktitle> Proc. 19 th ACM STOC (1987), </booktitle> <pages> pp. 325-334. </pages>
Reference: [Bu 74] <author> Bunemann, P., </author> <title> A Characterization on Digid Circuit Graphs, </title> <booktitle> Discrete Mathematics 9 (1974), </booktitle> <pages> pp. 205-212. </pages>
Reference-contexts: following statements are equivalent: (i) G = (V; E) is chordal. (ii) G = (V; E) has a perfect elimination erdering &lt;, i.e. if x &lt; y, x &lt; z and xy, xz 2 E, then yz 2 E. (iii) G = (V; E) is the vertex intersection graph ([Ga74], <ref> [Bu 74] </ref>) of a collection S G of subtrees of some tree T . <p> We compute the clique tree for the chordal extension. It consists of the set of cliques of the chordal extension as vertex set and has the property that, for each vertex x of the given graph, the set of cliques containing x forms a subtree <ref> [Bu 74, Ga74] </ref>. Note that each edge of the clique tree corresponds to the cut of those vertices of the chordal extension which are in both incident cliques.
Reference: [Co 86] <author> Cole, R., </author> <title> Parallel Merge Sort, </title> <booktitle> 27 th FOCS (1986), </booktitle> <pages> pp. 511-516. </pages>
Reference-contexts: Theorem 1 (i) (see [SV 82]) The connected components and a spanning tree of any graph can be computed in O (log n) CRCW-time and O (n+m) processors and therefore in O (log 2 n) CREW time using O (n + m) processors. (ii) (see <ref> [Co 86] </ref>) n numbers can be sorted in O (log n) CREW-time and O (n) processors. 4 Let T = (V T ; E T ) be a tree with a root r.
Reference: [Co 85] <author> Cook, S.A., </author> <title> A Taxonomy of Problems with Fast Parallel Algorithms, </title> <booktitle> Information and Control 64 (1985), </booktitle> <pages> pp. 2-22. </pages>
Reference-contexts: Given a set A, we define #A to be the cardinality of A. The computation models are the concurrent-read concurrent-write parallel random access machine (CRCW PRAM) and the concurrent read exclusive write parallel random access machine (CREW-PRAM) (cf. e. g. [FW 78], <ref> [Co 85] </ref>, [KR 88]). Note that each CREW-PRAM working in T time using P processors is also a CRCW-PRAM working in the same time bounds.
Reference: [CSV 82] <author> Chandra, A., Stockmeyer, L., Vishkin, U., </author> <title> A Complexity Theory for Un bounded Fan-In Parallelism, </title> <booktitle> 23 th FOCS (1982), </booktitle> <pages> pp. 1-13. </pages>
Reference: [DK 86] <author> Dahlhaus, E., Karpinski, M., </author> <title> The Matching Problem for Strongly Chordal Graphs is in NC, </title> <note> Research Report No. </note> <institution> 855-CS, University of Bonn (Dec. </institution> <year> 1986). </year>
Reference-contexts: Their sequential algorithm works in O (nm) time and O (n + m) storage ([RTL 76]). There are efficient parallel algorithms to recognize chordal graphs and to compute the perfect elimination ordering for chordal graphs ([Ed 87], [NNS 87], <ref> [DK 86] </ref>, [DK 87], [Kl 88]). In this paper we give a parallel solution to the MEO Problem by designing an algorithm computing an MEO for any given graph which works in O (log 3 n) parallel time and O (nm) processors on a CRCW PRAM.
Reference: [DK 87] <author> Dahlhaus, E., Karpinski, M., </author> <title> Fast Parallel Computation of Perfect and Strongly Perfect Elimination Schemes, </title> <note> Research Report No. 8513-CS, University of Bonn (Nov. 1987), submitted for publication. </note>
Reference-contexts: Their sequential algorithm works in O (nm) time and O (n + m) storage ([RTL 76]). There are efficient parallel algorithms to recognize chordal graphs and to compute the perfect elimination ordering for chordal graphs ([Ed 87], [NNS 87], [DK 86], <ref> [DK 87] </ref>, [Kl 88]). In this paper we give a parallel solution to the MEO Problem by designing an algorithm computing an MEO for any given graph which works in O (log 3 n) parallel time and O (nm) processors on a CRCW PRAM.
Reference: [DK 88a] <author> Dahlhaus, E., Karpinski, M., </author> <title> Fast Parallel Decomposition by Clique Separators, </title> <note> Research Report No. 8525-CS, University of Bonn (May 1988). </note>
Reference-contexts: Elimination orderings also arise in Gaussian elimination on sparse symmetric matrices ([Ro 73], [RTL 76]). The minimal elimination problem (MEO) for arbitrary graphs (cf. [Ro 73], [RTL 76], [Ta 85], <ref> [DK 88a] </ref>, [No 88]) is the following. Let G = (V; E) be any graph and &lt; be an ordering on V given as an enumeration of V . <p> The MEO algorithm of this paper directly entails recent results on existence of NC-algorithms for Clique Separator Decomposition ([DK 88b], <ref> [DK 88a] </ref>, [DKN 89]) and for the first time provides a parallel technique of computing the minimal fill-in (cf. [Ta 85]) for arbitrary graphs, and combining our algorithm with the Cholesky factorization algorithm of Gilbert and Hafsteinsson ([GH 88]), an efficient parallel algorithm for the Gaussian elimination on sparse symmetric matrices <p> Putting all the results together, we get: Theorem 19 An MEO and a minimal chordal extension can be computed in O (log 3 n) CREW-time by O (nm) processors. 5 Applications We summarize some applications of our parallel MEO algorithm. We refer to [Ro 73], [Ta 85], [Kl 88], <ref> [DK 88a] </ref>, [GH 88] for fundamentals. One application is symmetric sparse Gaussian elimination. The problem is to compute, for any symmetric matrix with nonzero entries on the diagonal, a Gaussian elimination scheme such that the set of entries becoming nonzero is minimized with respect to inclusion [OCF 76, Ro 73].
Reference: [DK 88b] <author> Dahlhaus, E., Karpinski, M., </author> <title> Efficient Parallel Algorithm for Clique Separator Decomposition, </title> <note> Research Report No. </note> <institution> 8531-CS, University of Bonn (Nov. </institution> <year> 1988). </year>
Reference: [DK 89] <author> Dahlhaus, E., Karpinski, M., </author> <title> An efficient Parallel Algorithm for the Minimal Elimination Ordering (MEO) of an Arbitrary Graph (Extended Abstract), </title> <booktitle> Proc. 30 th FOCS (1989), </booktitle> <pages> pp. 454-459. </pages>
Reference: [DKN 89] <author> Dahlhaus, E., Karpinski, M. Novick, M., </author> <title> Fast parallel algorithms for the clique separator decomposition, </title> <booktitle> 1 st ACM-SIAM Symposium on Discrete Algorithms (1990), </booktitle> <pages> pp. 244-251. </pages>
Reference-contexts: The MEO algorithm of this paper directly entails recent results on existence of NC-algorithms for Clique Separator Decomposition ([DK 88b], [DK 88a], <ref> [DKN 89] </ref>) and for the first time provides a parallel technique of computing the minimal fill-in (cf. [Ta 85]) for arbitrary graphs, and combining our algorithm with the Cholesky factorization algorithm of Gilbert and Hafsteinsson ([GH 88]), an efficient parallel algorithm for the Gaussian elimination on sparse symmetric matrices (cf. [Ro
Reference: [Di 76] <author> Dirac, </author> <title> G.A., On Rigid Circuit Graphs, </title> <type> Abh. </type> <institution> Math. Sem. der Univ. </institution> <address> Hamburg 25 (1961), </address> <pages> pp. 71-76. </pages>
Reference-contexts: For vertices v; w of a graph G a v-w-cut is an inclusion minimal v and w separating set of vertices. A cut of G is a v-w-cut of some two vertices v and w of G. For chordal graphs we know the following about cuts <ref> [Di 76] </ref>: Theorem 12 Each cut c of a chordal graph G = (V; E) is complete. Moreover, it is the intersection of two maximal cliques (and therefore the intersection of the neighborhood of two nonadjacent vertices in different connected components of Gj V nc ).
Reference: [Di 87] <author> Diestel, R., </author> <title> Simplicial Decomposition of Graphs | Some Uniqueness Results, </title> <journal> Journal of Combinatorial Theory, Ser. </journal> <volume> B 42 (1987), </volume> <pages> pp. 133-145. </pages>
Reference: [Ed 87] <author> Edenbrandt, A., </author> <title> Chordal Graph Recognition is in NC, </title> <booktitle> Information Processing Letters 24 (1987), </booktitle> <pages> pp. 239-241. </pages>
Reference: [FW 78] <author> Fortune, S., Wyllie, S., </author> <title> Parallelism in Random Access Machines, </title> <booktitle> Proc. 10 th ACM-STOC (1978), </booktitle> <pages> pp. 114-118. </pages>
Reference-contexts: Given a set A, we define #A to be the cardinality of A. The computation models are the concurrent-read concurrent-write parallel random access machine (CRCW PRAM) and the concurrent read exclusive write parallel random access machine (CREW-PRAM) (cf. e. g. <ref> [FW 78] </ref>, [Co 85], [KR 88]). Note that each CREW-PRAM working in T time using P processors is also a CRCW-PRAM working in the same time bounds.
Reference: [Ga 72] <author> Gavril, F., </author> <title> Algorithms for Minimum Coloring, Maximum Clique, Minimum Coloring by Cliques, and Maximum Independent Sets of a Chordal Graph, </title> <journal> SIAM J. Comput. </journal> <year> (1972), </year> <pages> pp. 180-187. </pages>
Reference: [Ga74] <author> F. Gavril, </author> <title> The Intersection Graphs of Subtrees in Trees Are Exactely the Chordal Graphs, </title> <journal> Journal of Cobinatorial Theory Series B, </journal> <volume> vol. 16(1974), </volume> <pages> S. 47-56. </pages>
Reference-contexts: Chordal graphs can be characterized as follows (cf. <ref> [Ga74] </ref>, [Ta 85]): Theorem 3 The following statements are equivalent: (i) G = (V; E) is chordal. (ii) G = (V; E) has a perfect elimination erdering &lt;, i.e. if x &lt; y, x &lt; z and xy, xz 2 E, then yz 2 E. (iii) G = (V; E) is <p> We compute the clique tree for the chordal extension. It consists of the set of cliques of the chordal extension as vertex set and has the property that, for each vertex x of the given graph, the set of cliques containing x forms a subtree <ref> [Bu 74, Ga74] </ref>. Note that each edge of the clique tree corresponds to the cut of those vertices of the chordal extension which are in both incident cliques.
Reference: [GM 87] <author> Gazit, H., Miller, G.L., </author> <title> An Improved Algorithm for BFS of a Directed Graph, </title> <type> manuscript, </type> <institution> USC (1987). </institution>
Reference: [GH 88] <author> Gilbert, J., Hafsteinsson, H., </author> <title> Parallel Solution of Sparse Linear Systems, </title> <booktitle> SWAT 88 (1988), </booktitle> <volume> LNCS 318, </volume> <pages> pp. 145-153. </pages>
Reference-contexts: We refer to [Ro 73], [Ta 85], [Kl 88], [DK 88a], <ref> [GH 88] </ref> for fundamentals. One application is symmetric sparse Gaussian elimination. The problem is to compute, for any symmetric matrix with nonzero entries on the diagonal, a Gaussian elimination scheme such that the set of entries becoming nonzero is minimized with respect to inclusion [OCF 76, Ro 73].
Reference: [GRE 84] <author> Gilbert, J., Rose D., Edenbrandt, A., </author> <title> A Separator Theorem for Chordal Graphs, </title> <booktitle> SIAM J. for Algebraic and Discrete Methods 15 (1984), </booktitle> <pages> pp. 306-313. </pages>
Reference: [Go 80] <author> Golumbic, </author> <title> M.C., Algorithmic Graph Theory and Perfect Graphs, </title> <publisher> Academic Press, </publisher> <address> N.Y., </address> <year> 1980. </year>
Reference: [HL 88] <author> Ho, C.W., Lee, R.C.T. </author> <title> Efficient Parallel Algorithms for Finding Maximal Cliques, Clique Trees and Minimum Coloring on Chordal Graphs, </title> <booktitle> Information Processing Letters 28 (1988), </booktitle> <pages> pp. 301-309. </pages>
Reference: [KR 88] <author> R. Karp, V. Ramachandran, </author> <title> A Survey of Parallel Algorithms for Shared-Memory Machines, </title> <note> Research Report No. UCB/CSD 88/407, </note> <institution> University of California, </institution> <note> Berkeley (1988); to appear in: Handbook of Theoretical Computer Science, North Holland (1989). </note>
Reference-contexts: Given a set A, we define #A to be the cardinality of A. The computation models are the concurrent-read concurrent-write parallel random access machine (CRCW PRAM) and the concurrent read exclusive write parallel random access machine (CREW-PRAM) (cf. e. g. [FW 78], [Co 85], <ref> [KR 88] </ref>). Note that each CREW-PRAM working in T time using P processors is also a CRCW-PRAM working in the same time bounds.
Reference: [Kl] <author> Klein, Ph., </author> <type> personal communication. </type>
Reference-contexts: The computation of a good end segment satisfying above requirements consists of the computation of connected components and spanning trees, neighborhoods of initial segments, and of common neighborhoods. Therefore we get the same time and processor bound as in the procedure NONE of the perfect elimination algorithm of Klein <ref> [Kl] </ref>. <p> Is it possible to modify our algorithm to work in O (log 2 n) parallel time and in the same number of processors on a CRCW PRAM (P. Klein asked this question in <ref> [Kl] </ref>)? The recursive structure of any such MEO algorithm working in a `shallow' O (log 2 n) parallel time would be of its own interest! 3.
Reference: [Kl 88] <author> Klein, Ph., </author> <title> Efficient Parallel Algorithms on Chordal Graphs, </title> <booktitle> Proc. 29 th IEEE FOCS (1988). </booktitle> <pages> 44 </pages>
Reference-contexts: Their sequential algorithm works in O (nm) time and O (n + m) storage ([RTL 76]). There are efficient parallel algorithms to recognize chordal graphs and to compute the perfect elimination ordering for chordal graphs ([Ed 87], [NNS 87], [DK 86], [DK 87], <ref> [Kl 88] </ref>). In this paper we give a parallel solution to the MEO Problem by designing an algorithm computing an MEO for any given graph which works in O (log 3 n) parallel time and O (nm) processors on a CRCW PRAM. <p> Putting all the results together, we get: Theorem 19 An MEO and a minimal chordal extension can be computed in O (log 3 n) CREW-time by O (nm) processors. 5 Applications We summarize some applications of our parallel MEO algorithm. We refer to [Ro 73], [Ta 85], <ref> [Kl 88] </ref>, [DK 88a], [GH 88] for fundamentals. One application is symmetric sparse Gaussian elimination. <p> Note that each edge of the clique tree corresponds to the cut of those vertices of the chordal extension which are in both incident cliques. A clique tree for the chordal extension can be computed from the MEO in O (log n) CREW-time using O (n 2 ) processors <ref> [Kl 88] </ref>. To compute the components, we unify those cliques of the chordal extension to one component which are not separable by an edge of the clique tree corresponding to a cut of the chordal extension which is also complete in the given graph. <p> Klein asked this question in [Kl])? The recursive structure of any such MEO algorithm working in a `shallow' O (log 2 n) parallel time would be of its own interest! 3. The Breadth-First Search (BFS) algorithm of Theorem 20 uses the chordal `parent-richest neighbors' method of <ref> [Kl 88] </ref> applied to an MEO of an input graph.
Reference: [LF 80] <author> R. Ladner, M. Fischer, </author> <title> Parallel Prefix Computation, </title> <journal> Journal of the ACM 27 (1980), </journal> <volume> S. </volume> <pages> 831-838. </pages>
Reference: [NNS 87] <author> Naor, J., Naor, M., Schaffer, A., </author> <title> Fast Parallel Algorithms for Chordal Graphs, </title> <booktitle> Proc. 19 th ACM STOC (1987), </booktitle> <pages> pp. 355-364. </pages>
Reference-contexts: Their sequential algorithm works in O (nm) time and O (n + m) storage ([RTL 76]). There are efficient parallel algorithms to recognize chordal graphs and to compute the perfect elimination ordering for chordal graphs ([Ed 87], <ref> [NNS 87] </ref>, [DK 86], [DK 87], [Kl 88]). In this paper we give a parallel solution to the MEO Problem by designing an algorithm computing an MEO for any given graph which works in O (log 3 n) parallel time and O (nm) processors on a CRCW PRAM. <p> Lemma 3 G is chordal iff for v 1 ; v 2 2 W 0 , N 0 (v 1 ) and N 0 (v 2 ) are comparable with respect to inclusion (compare also <ref> [NNS 87] </ref>). Proof ")": Suppose w 1 2 N 0 (v 1 ) n N 0 (v 2 ) and w 2 2 N 0 (v 2 ) n N 0 (v 1 ).
Reference: [No 88] <author> Novick, </author> <title> M.B., NC Algorithms for the Clique Separator Decomposition, </title> <institution> Cornell University, </institution> <type> manuscript (Nov. </type> <year> 1988). </year>
Reference-contexts: Elimination orderings also arise in Gaussian elimination on sparse symmetric matrices ([Ro 73], [RTL 76]). The minimal elimination problem (MEO) for arbitrary graphs (cf. [Ro 73], [RTL 76], [Ta 85], [DK 88a], <ref> [No 88] </ref>) is the following. Let G = (V; E) be any graph and &lt; be an ordering on V given as an enumeration of V .
Reference: [OCF 76] <author> Ohtsuki, T., Cheung, L.K., Fujisawa, T., </author> <title> Minimal Triangulation of a Graph and Optimal Pivoting Order in a Sparse Matrix, </title> <journal> J. Math. Analysis and Applications 54 (1976), </journal> <pages> pp. 622-633. </pages>
Reference-contexts: One application is symmetric sparse Gaussian elimination. The problem is to compute, for any symmetric matrix with nonzero entries on the diagonal, a Gaussian elimination scheme such that the set of entries becoming nonzero is minimized with respect to inclusion <ref> [OCF 76, Ro 73] </ref>. We call such an elimination scheme a sparse Gaussian elimination. To compute a sparse Gaussian elimination, we proceed as follows.
Reference: [Ro 70] <author> Rose, </author> <title> D.J., Triangulated Graphs and the Elimination Process, </title> <journal> J. Math. Appl. </journal> <volume> 32 (1970), </volume> <pages> pp. 597-609. </pages>
Reference: [Ro 73] <author> Rose, </author> <title> D.J., A Graph Theoretic Study of the Numerical Solution of Sparse Positive Definit Systems of Linear Equations, </title> <editor> in: R. Read (ed.), </editor> <title> Graph Theory and Computing, </title> <publisher> Academic Press, </publisher> <address> New York (1973), </address> <pages> pp. 183-217. </pages>
Reference-contexts: elimination orderings is used in a number of combinatorial optimization and database applications, as well as in scheduling and general divide-and-conquer techniques (<ref> [Ro 73] </ref>, [Ta 85]). Elimination orderings also arise in Gaussian elimination on sparse symmetric matrices ([Ro 73], [RTL 76]). The minimal elimination problem (MEO) for arbitrary graphs (cf. [Ro 73], [RTL 76], [Ta 85], [DK 88a], [No 88]) is the following. Let G = (V; E) be any graph and &lt; be an ordering on V given as an enumeration of V . <p> [DKN 89]) and for the first time provides a parallel technique of computing the minimal fill-in (cf. [Ta 85]) for arbitrary graphs, and combining our algorithm with the Cholesky factorization algorithm of Gilbert and Hafsteinsson ([GH 88]), an efficient parallel algorithm for the Gaussian elimination on sparse symmetric matrices (cf. <ref> [Ro 73] </ref>). The paper is organized as follows. In Section 1, the notational and fundamental concepts of this paper are introduced. Section 2 describes the global strategy which is a divide-and-conquer strategy. <p> Putting all the results together, we get: Theorem 19 An MEO and a minimal chordal extension can be computed in O (log 3 n) CREW-time by O (nm) processors. 5 Applications We summarize some applications of our parallel MEO algorithm. We refer to <ref> [Ro 73] </ref>, [Ta 85], [Kl 88], [DK 88a], [GH 88] for fundamentals. One application is symmetric sparse Gaussian elimination. <p> One application is symmetric sparse Gaussian elimination. The problem is to compute, for any symmetric matrix with nonzero entries on the diagonal, a Gaussian elimination scheme such that the set of entries becoming nonzero is minimized with respect to inclusion <ref> [OCF 76, Ro 73] </ref>. We call such an elimination scheme a sparse Gaussian elimination. To compute a sparse Gaussian elimination, we proceed as follows. <p> To compute a sparse Gaussian elimination, we proceed as follows. For any symmetric matrix A = (a i;j ) n i;j=1 , we consider the corresponding graph G A = (V A ; E A ) = (f1; : : : ; ng; fijja i;j 6= 0g. By <ref> [Ro 73] </ref>, the problem to compute a sparse Gaussian elimination for A is equivalent to the problem of the computation of an MEO for G A . Therefore we get immediately.
Reference: [RTL 76] <author> Rose, D., Tarjan, R.E., Lueker, G., </author> <title> Algorithmic Aspects of Vertex Elimination on Graphs, </title> <journal> SIAM J. Comput. </journal> <volume> 5, </volume> <pages> pp. 266-283. </pages>
Reference-contexts: 0 Introduction The theory of elimination orderings is used in a number of combinatorial optimization and database applications, as well as in scheduling and general divide-and-conquer techniques ([Ro 73], [Ta 85]). Elimination orderings also arise in Gaussian elimination on sparse symmetric matrices ([Ro 73], <ref> [RTL 76] </ref>). The minimal elimination problem (MEO) for arbitrary graphs (cf. [Ro 73], [RTL 76], [Ta 85], [DK 88a], [No 88]) is the following. Let G = (V; E) be any graph and &lt; be an ordering on V given as an enumeration of V . <p> Elimination orderings also arise in Gaussian elimination on sparse symmetric matrices ([Ro 73], <ref> [RTL 76] </ref>). The minimal elimination problem (MEO) for arbitrary graphs (cf. [Ro 73], [RTL 76], [Ta 85], [DK 88a], [No 88]) is the following. Let G = (V; E) be any graph and &lt; be an ordering on V given as an enumeration of V .
Reference: [Sa 76] <author> Savage, </author> <title> J.E., The Complexity of Computing, </title> <publisher> Wiley, </publisher> <address> N.Y. </address> <year> (1976). </year>
Reference: [SV 82] <author> Shiloach, Y., Vishkin, U., </author> <title> An O(log n) Parallel Connectivity Algorithm, </title> <booktitle> Journal of Algorithms 3 (1982), </booktitle> <pages> pp. 57-67. </pages>
Reference-contexts: In general, n is the number of vertices of G = (V; E), and m is the number of edges. We assume that the reader is familiar with the following results in parallel compu tation. Theorem 1 (i) (see <ref> [SV 82] </ref>) The connected components and a spanning tree of any graph can be computed in O (log n) CRCW-time and O (n+m) processors and therefore in O (log 2 n) CREW time using O (n + m) processors. (ii) (see [Co 86]) n numbers can be sorted in O (log <p> Note that all V j 1 ;:::;j q 0 are pairwise disjoint. The last step 5 is bounded by O (n + m) processors and a CRCW-time of O (log n) <ref> [SV 82] </ref>. Since the number of cuts is bounded by n, the overall complexity of computing D c , for all cuts c simultaneously, is bounded by nm.
Reference: [Ta 85] <author> Tarjan, R.E., </author> <title> Decomposition by Clique Separators, </title> <booktitle> Discrete Mathematics 55 (1985), </booktitle> <pages> pp. 221-232. </pages>
Reference-contexts: 0 Introduction The theory of elimination orderings is used in a number of combinatorial optimization and database applications, as well as in scheduling and general divide-and-conquer techniques ([Ro 73], <ref> [Ta 85] </ref>). Elimination orderings also arise in Gaussian elimination on sparse symmetric matrices ([Ro 73], [RTL 76]). The minimal elimination problem (MEO) for arbitrary graphs (cf. [Ro 73], [RTL 76], [Ta 85], [DK 88a], [No 88]) is the following. <p> in a number of combinatorial optimization and database applications, as well as in scheduling and general divide-and-conquer techniques ([Ro 73], <ref> [Ta 85] </ref>). Elimination orderings also arise in Gaussian elimination on sparse symmetric matrices ([Ro 73], [RTL 76]). The minimal elimination problem (MEO) for arbitrary graphs (cf. [Ro 73], [RTL 76], [Ta 85], [DK 88a], [No 88]) is the following. Let G = (V; E) be any graph and &lt; be an ordering on V given as an enumeration of V . <p> The set F &lt; = E &lt; n E is called the fill-in of &lt; <ref> [Ta 85] </ref>. The problem is to compute, for any given graph G = (V; E), an ordering &lt; on V such that E &lt; is (inclusion) minimal. We call such an ordering a minimal elimination ordering (MEO) of G ([RTL 76], [Ta 85]). <p> &lt; n E is called the fill-in of &lt; <ref> [Ta 85] </ref>. The problem is to compute, for any given graph G = (V; E), an ordering &lt; on V such that E &lt; is (inclusion) minimal. We call such an ordering a minimal elimination ordering (MEO) of G ([RTL 76], [Ta 85]). An MEO algorithm is an algorithm computing for an arbitrary input graph G = (V; E) an ordering on V such that E &lt; is (inclusion) minimal. MEO Algorithm (I/O) Input: A graph G = (V; E). <p> The MEO algorithm of this paper directly entails recent results on existence of NC-algorithms for Clique Separator Decomposition ([DK 88b], [DK 88a], [DKN 89]) and for the first time provides a parallel technique of computing the minimal fill-in (cf. <ref> [Ta 85] </ref>) for arbitrary graphs, and combining our algorithm with the Cholesky factorization algorithm of Gilbert and Hafsteinsson ([GH 88]), an efficient parallel algorithm for the Gaussian elimination on sparse symmetric matrices (cf. [Ro 73]). The paper is organized as follows. <p> Chordal graphs can be characterized as follows (cf. [Ga74], <ref> [Ta 85] </ref>): Theorem 3 The following statements are equivalent: (i) G = (V; E) is chordal. (ii) G = (V; E) has a perfect elimination erdering &lt;, i.e. if x &lt; y, x &lt; z and xy, xz 2 E, then yz 2 E. (iii) G = (V; E) is the <p> Let x; y 2 V 0 , x 0 ; y 0 2 V i , and xx 0 ; yy 0 2 E. Then xy belongs to the chordal extension of any ordering &lt;, having V 0 as an endsegment. Proof: We use the following result in <ref> [Ta 85] </ref>: Lemma 2 Given an arbitrary graph G = (V; E) and an ordering &lt; on V , the Fill-In F &lt; of G under ordering &lt; is the set of edges defined as follows (cf. [Ta 85]): F &lt; = f vw j v 6= w; vw 62 E; <p> Proof: We use the following result in <ref> [Ta 85] </ref>: Lemma 2 Given an arbitrary graph G = (V; E) and an ordering &lt; on V , the Fill-In F &lt; of G under ordering &lt; is the set of edges defined as follows (cf. [Ta 85]): F &lt; = f vw j v 6= w; vw 62 E; 9 p a path p = v 1 v 2 : : : v k in G such that v 1 = v; v k = w; and v i &lt; minfv; wg for i = 2; <p> Putting all the results together, we get: Theorem 19 An MEO and a minimal chordal extension can be computed in O (log 3 n) CREW-time by O (nm) processors. 5 Applications We summarize some applications of our parallel MEO algorithm. We refer to [Ro 73], <ref> [Ta 85] </ref>, [Kl 88], [DK 88a], [GH 88] for fundamentals. One application is symmetric sparse Gaussian elimination. <p> Sequentially, 41 this problem can be solved in O (nm) time <ref> [Ta 85] </ref>. He computed the cuts of the chordal extension of an MEO and selected those cuts of the chordal extension which are also complete in the original graph. It is not difficult to parallelize this procedure in O (log n) CREW-time using O (nm) processors.
Reference: [TV 85] <author> R. Tarjan, U. Vishkin, </author> <title> An Efficient Parallel Biconnectivity Algorithm, </title> <booktitle> SIAM-Journal on Computing 14 (1985), </booktitle> <pages> pp. 862-873. </pages>
Reference-contexts: The preorder OE is defined as follows: For x; y 2 V T , x OE y iff l fl (x) is a subsequence of l fl (y) or l fl (x) is lexicographically smaller than l fl (y). Theorem 2 (see for example <ref> [TV 85] </ref>) A preorder can be computed in O (log n) CREW-time and O (n) processors.
Reference: [TY 84] <author> Tarjan, R.E., Yannakakis, M., </author> <title> Simple Linear Time Algorithms to Test Chordality of Graphs, Test Acycliticy of Graphs, Test Acycliticy of Hyper-graphs, and Selectively Reduce Hypergraphs, </title> <journal> SIAM J. Comput. </journal> <year> (1984), </year> <pages> pp. 556-579. </pages>
Reference: [TY 85] <author> Tarjan, R.E., Yannakakis, M., </author> <title> Simple Linear Time Algorithms to Test Chordality of Graphs, Test Acycliticy of Graphs, Test Acycliticy of Hyper-graphs, and Selectively Reduce Hypergraphs, Addendum, </title> <journal> SIAM J. Comput. </journal> <volume> 14 (1985), </volume> <pages> pp. 254-255. </pages>
Reference: [Ya 81] <author> Yannakakis, M., </author> <title> Computing the Minimum Fill-In is NP-Complete, </title> <journal> SIAM J. Algebraic Discrete Math. </journal> <volume> 2 (1981), </volume> <pages> pp. 77-79. 45 </pages>
Reference-contexts: F &lt; is the smallest set F such that 1. E F and 2. if xy 2 F , xz 2 F , x &lt; y, and x &lt; z, then yz 2 F . Theorem 5 <ref> [Ya 81] </ref> The computation of an ordering &lt; such that its chordal extension is minimal by cardinality, is NP-complete.
References-found: 39

