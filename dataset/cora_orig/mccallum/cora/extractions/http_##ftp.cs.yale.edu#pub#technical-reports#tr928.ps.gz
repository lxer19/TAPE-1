URL: http://ftp.cs.yale.edu/pub/technical-reports/tr928.ps.gz
Refering-URL: http://ftp.cs.yale.edu/pub/technical-reports/
Root-URL: http://www.cs.yale.edu
Title: Ars Magna The Abstract Robot Simulator Manual Version 1.0  
Author: Sean P. Engelson Niklas Bertani YALEU/DCS/TR-XXX 
Note: This work was partially supported by the Defense Advanced Research Projects Agency, contract number DAAA15-87-K-0001, administered by the Ballistic Research Laboratory. The first author is supported by a fellowship from the Fannie and John Hertz Foundation  
Date: October 1992  
Affiliation: Yale University Department of Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Philip E. Agre. </author> <title> The Dynamic Structure of Everyday Life. </title> <type> PhD thesis, </type> <institution> MIT Artificial Intelligence Laboratory, </institution> <year> 1988. </year>
Reference-contexts: While we hope that the simulator will be generally useful, our design was also influenced by recent work in reactive planning, particularly Firby's RAP system [4] and McDermott's RPL language [7], as well as Agre's work on deictic representation <ref> [1] </ref>. 1 Abstract Realistic Simulation of Mobile robots for Analyzing Goal-achievement, N avigation and Adaptation 1 2 CHAPTER 1. INTRODUCTION 1.1 Simulated Domains When designing an environment for experimentation in planning, there are a number of issues of that must be addressed. <p> an index (starting at 0) through the function robot-camera: robot-camera robot index 3.4.1 Designators The purpose of designators in the system is to provide a sort of indexical naming of objects in the system based on the notion of `effective designators' developed in [7] (see also `deictic representation' discussed in <ref> [1] </ref>). A designator provides a handle on an object or place (its denotation) that the system can use to control the robot, relative to the designator's denotation. In the simulator there are two distinct types of designators, local and non-local. <p> Thus, if the world changes between-times, problems may (reasonably) occur. The parameters are Lisp special variables; they are listed below with default values given in brackets. Robot Movement Max-Speed* <ref> [ 1 ] </ref> Maximum speed (in grid-cell units per tick) the robot can move. Setting this higher than 1 can cause strange effects (due to skipping over grid cells). Max-Turn-Angle* [ /8 ] Maximum speed (in radians per tick) the robot can turn. <p> Prob-Lose-Track* [ 0.01 ] Probability that a track will be randomly lost on any given tick. Prob-Lose-False-Track* [ 0.4 ] Probability that a track on a false designator will be randomly lost on any given tick. Higher than the above, since a false designator isn't real. False-Desig-Drift-Dist* <ref> [ 1 ] </ref> Maximum distance that the perceived distance of a false designator will drift in a tick, while tracking. False-Desig-Drift-Ang* [ 0.2 ] Maximum angle that the perceived distance of a false designator will drift in a tick, while tracking. <p> Camera-Insert-Miss-Prob* [ 0.05 ] Probability that an camera insertion will miss, also losing the designator. Camera-Insert-Lose-Desig-Prob* [ 0.1 ] Probability that an insertion will lose the designator even when the insertion succeeds. Camera-Move-Delay* [ 2 ] Time it takes to move a camera (for insertion). Camera-Align-Delay* <ref> [ 1 ] </ref> Time it takes to turn a camera. Camera-Desig-Delay* [ 4 ] Time it takes to acquire or start tracking a desig nator. Sensor Error Type-False-Pos* [ 0.01 ] Chance of sensing a (random) place type when at a non-typed location.
Reference: [2] <author> Badr Al-Badr and Steve Hanks. </author> <title> Critiquing the Tileworld: Agent architectures, planning benchmarks, and experimental methodology. </title> <journal> AI Magazine, </journal> <note> 1991. submitted. </note>
Reference-contexts: Lately, however, attention has turned to planning for more realistic domains, such as mobile robotics, in which micro-world simplifying assumptions do not hold. This shift of focus, however, introduces a new problem of validation and comparison of different planning theories and systems <ref> [2] </ref>. The major difficulty is in coming up with a domain for planning problems that is at the same time realistically complex and simple enough to run controlled experiments in. As an attempt at dealing with these problems, we have developed the Ars Magna 1 robot simulator. <p> Several of these have been identified by Al-Badr and Hanks in their critique of the Tileworld domain <ref> [2] </ref>. The analysis below is abstracted, to some extent, from their discussion. They identify the following current research problems in planning: exogenous events, the time cost of planning, richness of world models, sensing and effecting, measuring plan quality, and multiple agents. <p> Various parameters of the system may be adjusted via `knobs', allowing for controlled experimentation. The Tileworld is, however, fairly simple and controlled, as well as completely observable (the robot is omniscient), as Al-Badr and Hanks point out in <ref> [2] </ref>, and hence it is hard to say whether it supports addressing fundamental issues of world complexity, incomplete knowledge and prediction, and real-time planning. Seaworld Another simulator built as a testbed for AI system experimentation is Vere and Bick-more's Seaworld [11]. <p> Setting this higher than 1 can cause strange effects (due to skipping over grid cells). Max-Turn-Angle* [ /8 ] Maximum speed (in radians per tick) the robot can turn. Min-Turn-Angle* [ 0.05 ] Minimum speed the robot can turn (due to friction and stuff). Braking* <ref> [ 2 ] </ref> Number of ticks it takes for the robot to come to a stop. Currently, this is implemented as a simple delay then instantaneous stop. <p> Robot-Turn-Max-Error* [ 0.01 ] Percent noise in angle turned, similar to motion-noise* 26 27 Robot-Align-Error-Prob* [ 0.1 ] Probability that an align operation will `suc ceed' even if the wrong place type is specified. Robot-Move-Delay* [ 5 ] Delay before a move command starts executing (in ertia, friction). Robot-Turn-Delay* <ref> [ 2 ] </ref> Delay before a turn command starts executing (in ertia, friction). Robot-Align-Delay* [ 4 ] Extra delay for an align operation to start (sensing, computation). Cameras Camera-Angle-Max-Error* [ 0.02 ] Max error (in radians) possible in the estimate of the angle of a designator. <p> Camera-Insert-Miss-Prob* [ 0.05 ] Probability that an camera insertion will miss, also losing the designator. Camera-Insert-Lose-Desig-Prob* [ 0.1 ] Probability that an insertion will lose the designator even when the insertion succeeds. Camera-Move-Delay* <ref> [ 2 ] </ref> Time it takes to move a camera (for insertion). Camera-Align-Delay* [ 1 ] Time it takes to turn a camera. Camera-Desig-Delay* [ 4 ] Time it takes to acquire or start tracking a desig nator. <p> This is tested independently for each designator on the object. Hand-Insert-Miss-Prob* [ 0.05 ] Probability that a hand insertion operation will miss its destination. Hand-Insert-Lose-Desig-Prob* [ 0.1 ] Probability than a missed hand insertion will result in a designator being lost. Hand-Move-Delay* <ref> [ 2 ] </ref> Time it takes to move the hand. Hand-Grasp-Delay* [ 4 ] Additional time it takes to perform a grasping op eration. Storage Bins Bin-Close-Jam-Prob* [ 0.01 ] Probability that a storage bin will jam on closure, if there is anything in the bin to jam it. <p> Note that bin jamming is an independent event; the fact that the bin is jammed now says nothing about it being jammed next tick. Bin-Delay* <ref> [ 2 ] </ref> Time it takes to open or close a storage bin.
Reference: [3] <author> Sean P. Engelson and Drew V. McDermott. </author> <title> Image signatures for place recognition and map construction. </title> <booktitle> In Proceedings of SPIE Symposium on Intelligent Robotic Systems, Sensor Fusion IV, </booktitle> <year> 1991. </year>
Reference-contexts: The other form of camera sensing is the view. A view is a list of numbers, samples of the substance parameters of the visible (occluding) surfaces in the camera's field of view. The view is thus an abstraction of the notion of image signature developed in <ref> [3] </ref> for place recognition. Views can be compared and matched for place recognition. Object manipulation is done using one of a set of hands (really arms with grippers), each of which has a limited strength.
Reference: [4] <author> R. James Firby. </author> <title> Adaptive Execution in Complex Dynamic Worlds. </title> <type> PhD thesis, </type> <institution> Yale University, </institution> <month> January </month> <year> 1989. </year> <type> Technical Report 672. </type>
Reference-contexts: The world is also extensible to allow for new experimental designs that were not thought of originally. While we hope that the simulator will be generally useful, our design was also influenced by recent work in reactive planning, particularly Firby's RAP system <ref> [4] </ref> and McDermott's RPL language [7], as well as Agre's work on deictic representation [1]. 1 Abstract Realistic Simulation of Mobile robots for Analyzing Goal-achievement, N avigation and Adaptation 1 2 CHAPTER 1. <p> Robot-Move-Delay* [ 5 ] Delay before a move command starts executing (in ertia, friction). Robot-Turn-Delay* [ 2 ] Delay before a turn command starts executing (in ertia, friction). Robot-Align-Delay* <ref> [ 4 ] </ref> Extra delay for an align operation to start (sensing, computation). Cameras Camera-Angle-Max-Error* [ 0.02 ] Max error (in radians) possible in the estimate of the angle of a designator. <p> Camera-Insert-Lose-Desig-Prob* [ 0.1 ] Probability that an insertion will lose the designator even when the insertion succeeds. Camera-Move-Delay* [ 2 ] Time it takes to move a camera (for insertion). Camera-Align-Delay* [ 1 ] Time it takes to turn a camera. Camera-Desig-Delay* <ref> [ 4 ] </ref> Time it takes to acquire or start tracking a desig nator. Sensor Error Type-False-Pos* [ 0.01 ] Chance of sensing a (random) place type when at a non-typed location. Type-False-Neg* [ 0.05 ] Chance of not sensing the current place type when one exists. <p> Hand-Insert-Miss-Prob* [ 0.05 ] Probability that a hand insertion operation will miss its destination. Hand-Insert-Lose-Desig-Prob* [ 0.1 ] Probability than a missed hand insertion will result in a designator being lost. Hand-Move-Delay* [ 2 ] Time it takes to move the hand. Hand-Grasp-Delay* <ref> [ 4 ] </ref> Additional time it takes to perform a grasping op eration. Storage Bins Bin-Close-Jam-Prob* [ 0.01 ] Probability that a storage bin will jam on closure, if there is anything in the bin to jam it.
Reference: [5] <author> R. James Firby and Steve Hanks. </author> <title> The simulator manual. </title> <type> Technical Report YALEU/DCS/TR-563, </type> <institution> Yale University Department of Computer Science, </institution> <year> 1987. </year>
Reference-contexts: Experimentation appears to consist primarily of `anecdote analysis'|seeing if what the agent does in a few particular scenarios makes sense. Also, like the Tileworld, action and perception are error-free, finessing a crucial issue in real-world systems. Truckworld The Truckworld domain developed by Firby and Hanks <ref> [5] </ref> probably satisfies most of our criteria reasonably well. The simulator provides for exogenous events via update methods that can change objects after each robot action. <p> Also used to govern size of random odometric intervals returned. Robot-Turn-Max-Error* [ 0.01 ] Percent noise in angle turned, similar to motion-noise* 26 27 Robot-Align-Error-Prob* [ 0.1 ] Probability that an align operation will `suc ceed' even if the wrong place type is specified. Robot-Move-Delay* <ref> [ 5 ] </ref> Delay before a move command starts executing (in ertia, friction). Robot-Turn-Delay* [ 2 ] Delay before a turn command starts executing (in ertia, friction). Robot-Align-Delay* [ 4 ] Extra delay for an align operation to start (sensing, computation).
Reference: [6] <author> Drew McDermott. </author> <title> Revised NISP manual. </title> <type> Technical Report #642, </type> <institution> Yale University Department of Computer Science, </institution> <year> 1988. </year>
Reference-contexts: Time in the simulator runs asynchronously to `thinking' time; calls to robot commands return immediately, after queuing events in the simulator's time stream. Chapter 3 Robot Programming 3.1 General Notes Ars Magna is written in Nisp <ref> [6] </ref>, a portable macro package with compile-time typing. Nisp code looks mostly like regular Common Lisp code, with some exceptions 1 . As far as this manual is concerned, the relevant differences are: * Variables may be declared when bound.
Reference: [7] <author> Drew McDermott. </author> <title> A reactive plan language. </title> <type> Technical Report 864, </type> <institution> Yale University Department of Computer Science, </institution> <year> 1991. </year>
Reference-contexts: The world is also extensible to allow for new experimental designs that were not thought of originally. While we hope that the simulator will be generally useful, our design was also influenced by recent work in reactive planning, particularly Firby's RAP system [4] and McDermott's RPL language <ref> [7] </ref>, as well as Agre's work on deictic representation [1]. 1 Abstract Realistic Simulation of Mobile robots for Analyzing Goal-achievement, N avigation and Adaptation 1 2 CHAPTER 1. <p> All simulator symbols are external in the ARS package, except where otherwise noted. 3.1.1 Continuation-passing Since the simulator's execution is asynchronously parallel to the robot's program, some mechanism must be used to return values and signal errors. In particular, a robot 1 This discussion is modified from that in <ref> [7] </ref>. 10 3.1. GENERAL NOTES 11 command (say, "move forward 2 meters") may cause an error (say, "path obstructed") long after the command is issued and the robot program has moved on. <p> are ordered, and can be accessed by an index (starting at 0) through the function robot-camera: robot-camera robot index 3.4.1 Designators The purpose of designators in the system is to provide a sort of indexical naming of objects in the system based on the notion of `effective designators' developed in <ref> [7] </ref> (see also `deictic representation' discussed in [1]). A designator provides a handle on an object or place (its denotation) that the system can use to control the robot, relative to the designator's denotation. In the simulator there are two distinct types of designators, local and non-local.
Reference: [8] <author> Martha E. Pollack and Marc Ringuette. </author> <title> Introducing the Tileworld: Experimentally evaluating agent architectures. </title> <booktitle> In Proc. National Conference on Artificial Intelligence, </booktitle> <year> 1990. </year>
Reference-contexts: Rather, we discuss some systems with similar goals as Ars Magna in terms of the criteria set 1.3. SOME OTHER DOMAINS 5 out above. Tileworld One recent effort whose goals are similar to ours is Pollack and Ringuette's Tileworld simulator <ref> [8] </ref>. The tileworld domain is a game played on a grid, where the robot's objective is to push square `tiles' into polyomino-shaped `holes'. Holes have limited capacity, entailing reasoning about limited resources. Further, tiles, holes, and obstacles can randomly appear and disappear, providing some uncertainty in the world.
Reference: [9] <author> Robert W. Scheifler et al. </author> <title> CLX Common LISP X Interface, </title> <publisher> 1988,1989. </publisher>
Reference: [10] <author> A.L. Samuel. </author> <title> Some studies in machine learning using the game of checkers. </title> <booktitle> In Computers and thought. </booktitle> <publisher> McGraw-Hill, </publisher> <year> 1963. </year> <note> Also in IBM Journal of Research and Development (1959). </note>
Reference-contexts: In the early days of AI, game-like domains were seen as desirable objects of study, due to their simplicity <ref> [10] </ref>. Recently, though, as many fundamental issues of planning have become better understood, this same domain simplicity has become a liability, in that the new frontier is dealing with complexity itself.
Reference: [11] <author> Steven Vere and Timothy Bickmore. </author> <title> A basic agent. </title> <journal> Computational Intelligence, </journal> <volume> 6(1), </volume> <month> Feb </month> <year> 1990. </year> <month> 40 </month>
Reference-contexts: Seaworld Another simulator built as a testbed for AI system experimentation is Vere and Bick-more's Seaworld <ref> [11] </ref>. The simulator was developed for use in testing their integrated AI agent, whose goal was to explore issues of integrating AI techniques for planning, natural language comprehension/generation, knowledge representation, and episodic memory. The agent controls a robotic submarine which receives natural language commands over a simulated `radio link'.
References-found: 11

