URL: http://wwwipd.ira.uka.de/~prechelt/Biblio/fnr_announce97.ps.gz
Refering-URL: 
Root-URL: 
Email: prechelt@ira.uka.de  
Keyword: Lutz Prechelt  
Address: Germany  
Affiliation: Universitat Karlsruhe,  
Web: http://www.iicm.edu/jucs root  
Note: Appeared in J. of Universal Computer Science 3(9), Sept. 1997  Announcement of the  
Abstract: Why We Need an Explicit Forum for Negative Results Forum for Negative Results (FNR) Abstract: Current Computer Science (CS) research is primarily focused on solving engineering problems. Often though, promising attempts for solving a particular problem fail for non-avoidable reasons. This is what I call a negative result: something that should have worked does not. Due to the current CS publication climate such negative results today are usually camouflaged as positive results by non-evaluating or mis-evaluating the research or by redefining the problem to fit the solution. Such publication behavior hampers progress in CS by suppressing some valuable insights, producing spurious understanding, and misleading further research efforts. Specific examples given below illustrate and back up these claims. This paper is the announcement of a (partial) remedy: a permanent publication forum explicitly for negative CS research results, called the Forum for Negative Results, FNR. FNR will be a regular part of J.UCS. Key Words: FNR, forum, negative results, failures, research culture, progress. Category: A.m, K.7.m, K.4.m, I.2.7 speech recognition, I.2.6 learning, C.1.3 data flow architectures, B.6.3 verification. 
Abstract-found: 1
Intro-found: 1
Reference: [ Brooks 1996 ] <author> Fred P. Brooks. </author> <title> The computer scientist as toolsmith II. </title> <journal> Communications of the ACM, </journal> <volume> 39(3) </volume> <pages> 61-68, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: Note that the discrimination between problem-solving research and research for understanding is not a sharp one, it is only a matter of emphasis; see also the article of Fred Brooks in the March 1996 issue of CACM <ref> [ Brooks 1996 ] </ref> and the responses in the July issue.
Reference: [ Dennis 1980 ] <author> Jack B. Dennis. </author> <title> Data flow supercomputers. </title> <journal> IEEE Computer, </journal> <volume> 13 </volume> <pages> 48-56, </pages> <month> November </month> <year> 1980. </year>
Reference-contexts: Implicit control flow replaces the program counter. Programming be-comes simpler and increasing numbers of transistors per chip can be utilized by increasing the number of basic execution units. Instruction-level parallelism is the most general kind of parallelism and thus will be more efficient than explicit parallelism with explicit synchronization <ref> [ Dennis 1980 ] </ref> . Result: Operational prototypes of static dataflow computers were built in the mid-1970s. For most program domains, their parallelism was limited severely by the inability to execute loop iterations or recursive calls in parallel. <p> and several years after the first prototypes became operational and the lack of instruction-level parallelism became apparent, one of the principal dataflow researchers still wrote: "What are the prospects for data flow supercomputers? [. . . ] A machine with up to 512 processing elements or cell blocks seems feasible." <ref> [ Dennis 1980 ] </ref> Effect: Instead of working towards hybrid von-Neumann/dataflow architectures, the dataflow community went on to building dynamic dataflow machines [ Hwang and Briggs 1984 ] , which increased the amount of available parallelism but (predictably) suffered from its large token tagging, tag comparing, and data duplication overhead and
Reference: [ Fenton et al. 1994 ] <author> Norman Fenton, Shari Lawrence Pfleeger, and Robert L. Glass. </author> <title> Science and substance: A challenge to the software engineering community. </title> <journal> IEEE Software, </journal> <volume> 11(4) </volume> <pages> 86-95, </pages> <month> July </month> <year> 1994. </year>
Reference: [ Hwang and Briggs 1984 ] <author> Kai Hwang and Faye A. Briggs. </author> <title> Computer Architecture and Parallel Processing. </title> <publisher> McGraw-Hill, </publisher> <year> 1984. </year>
Reference-contexts: researchers still wrote: "What are the prospects for data flow supercomputers? [. . . ] A machine with up to 512 processing elements or cell blocks seems feasible." [ Dennis 1980 ] Effect: Instead of working towards hybrid von-Neumann/dataflow architectures, the dataflow community went on to building dynamic dataflow machines <ref> [ Hwang and Briggs 1984 ] </ref> , which increased the amount of available parallelism but (predictably) suffered from its large token tagging, tag comparing, and data duplication overhead and was never able to keep up with von Neumann processors of similar cost. <p> The claimed advantages were only partially supported by performance analysis and simulation experiments. Operational statistics are not available from existing prototype data flow machines. Therefore, some of the claimed advantages are still subject to further verification." <ref> [ Hwang and Briggs 1984, p. 745 ] </ref> CS research history features several other examples of similar nature, such as most areas of Artificial Intelligence (e.g. automatic program verification, pattern recognition, symbolic AI, neural network learning, fuzzy logic) computer integrated manufacturing (CIM), object-oriented methods, and others.
Reference: [ Iannucci 1990 ] <author> Robert A. </author> <title> Iannucci. Parallel Machines: Parallel Machine Languages: The Emergence of Hybrid Dataflow Computer Architectures. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1990. </year>
Reference-contexts: Insight: The insight at this point should have been that entirely replacing von Neumann style computing with dataflow computing might be the wrong idea. The next goal should have been understanding what combination of aspects of both paradigms would be most efficient <ref> [ Iannucci 1990 ] </ref> .
Reference: [ Prechelt 1996 ] <author> Lutz Prechelt. </author> <title> A quantitative study of experimental evaluations of neural network learning algorithms: </title> <booktitle> Current research practice. Neural Networks, </booktitle> <volume> 9(3) </volume> <pages> 457-462, </pages> <month> April </month> <year> 1996. </year>
Reference: [ Salzberg 1997 ] <author> Steven L. Salzberg. </author> <title> On comparing classifiers: Pitfalls to avoid and a recommended approach. Data Mining and Knowledge Discovery, </title> <type> 1(3), </type> <year> 1997. </year>
Reference-contexts: It shows how the suppression of negative results can lead to spurious positive results. The example is not concrete, because it is impossible to find all the participants, but is quite realistic. It is discussed in similar form by Salzberg <ref> [ Salzberg 1997 ] </ref> . Problem: Many researchers are trying to improve current neural network learning algorithms, e.g., for pattern classification tasks. Let us say that 20 different researchers are all trying to improve the same algorithm A.
Reference: [ Tichy et al. 1995 ] <author> Walter F. Tichy, Paul Lukowicz, Lutz Prechelt, and Ernst A. Heinz. </author> <title> Experimental evaluation in computer science: A quantitative study. </title> <journal> Journal of Systems and Software, </journal> <volume> 28(1) </volume> <pages> 9-18, </pages> <month> January </month> <year> 1995. </year> <note> Also as TR 17/94 (August 1994), </note> <institution> Fakultat fur Informatik, Universitat Karlsruhe, Germany, ftp.ira.uka.de. </institution>
Reference-contexts: Looking at actual CS research contributions, a large majority of them makes claims that clearly belong to engineering problem-solving; a study conducted in 1994 found about 75 percent of all articles in a random CS article sample to be of this type <ref> [ Tichy et al. 1995 ] </ref> . Thus, our emphasis in non-theoretical CS as a whole is quite clearly on engineering (which is not necessarily harmful) and our judgement of what constitutes good research is consequently biased (which is harmful).
References-found: 8

