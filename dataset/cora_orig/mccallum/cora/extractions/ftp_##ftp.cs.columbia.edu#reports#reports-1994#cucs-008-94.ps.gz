URL: ftp://ftp.cs.columbia.edu/reports/reports-1994/cucs-008-94.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1994.html
Root-URL: http://www.cs.columbia.edu
Title: Incremental Process Support for Code Reengineering (Experience Report)  
Author: George T. Heineman Gail E. Kaiser fl, George T. Heineman and Gail E. Kaiser 
Keyword: Key words: Process Centered Environments, Componentization  
Note: c  
Address: 500 West 120th Street New York, NY 10027  
Affiliation: Columbia University Department of Computer Science  
Email: heineman@cs.columbia.edu  
Phone: (212)-939-7085  
Web: CUCS-008-94  
Abstract: Reengineering a large code base can be a monumental task, and the situation becomes even worse if the code is concomitantly being modified. For the past two years, we have been using the Marvel process centered environment (PCE) for all of our software development and are currently using it to develop the Oz PCE (Marvel's successor). Towards this effort, we are reengineering Oz's code base to isolate the process engine, transaction manager, and object management system as separate components that can be mixed and matched in arbitrary systems. In this paper, we show how a PCE can guide and assist teams of users in carrying out code reengineering while allowing them to continue their normal code development. The key features to this approach are its incremental nature and the ability of the PCE to automate most of the tasks necessary to maintain the consistency of the code base. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Sergio Bandinelli and Alfonso Fuggetta. </author> <title> Computational reflection in software process modeling: the SLANG approach. </title> <booktitle> In 15th International Conference on Software Engineering, </booktitle> <pages> pages 144-154. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> May </month> <year> 1993. </year>
Reference-contexts: Major exceptions include Arcadia [8], which uses an imperative notation called appl/a [13] based on Ada, hfsp [9], which uses an extension of attribute grammars, and Melmac [3], Slang <ref> [1] </ref>, and Process Weaver [4], which use a form of Petri nets. Important examples of rule-based PCEs include Grapple [7] and Merlin [11].
Reference: [2] <author> Israel Z. Ben-Shaul, Gail E. Kaiser, and George T. Heineman. </author> <title> An architecture for multi-user software development environments. </title> <journal> Computing Systems, The Journal of the USENIX Association, </journal> <volume> 6(2) </volume> <pages> 65-103, </pages> <month> Spring </month> <year> 1993. </year>
Reference-contexts: This ansi modification is a necessary first step towards our ultimate goal of componentizing a conventionally modular code base, and it provides insights into how PCEs can provide an incremental approach to reengineering. 2 Marvel PCE The goal of the Marvel project <ref> [2, 6] </ref> is to develop a process centered environment that guides and assists teams of users collaborating on software development efforts. The behavior of the PCE is tailored by a process administrator who provides the schema, process model, and tool envelopes for a specific project.
Reference: [3] <author> Wolfgang Deiters and Volker Gruhn. </author> <title> Managing software processes in the environment melmac. </title> <editor> In Richard N. Taylor, editor, </editor> <booktitle> 4th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 193-205, </pages> <address> Irvine CA, </address> <month> December </month> <year> 1990. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 15(6), </volume> <month> December </month> <year> 1990. </year>
Reference-contexts: Major exceptions include Arcadia [8], which uses an imperative notation called appl/a [13] based on Ada, hfsp [9], which uses an extension of attribute grammars, and Melmac <ref> [3] </ref>, Slang [1], and Process Weaver [4], which use a form of Petri nets. Important examples of rule-based PCEs include Grapple [7] and Merlin [11].
Reference: [4] <author> Christer Fernstrom. </author> <title> PROCESS WEAVER: Adding process support to UNIX. </title> <booktitle> In 2nd International Conference on the Software Process: Continuous Software Process Improvement, </booktitle> <pages> pages 12-26, </pages> <address> Berlin, Germany, February 1993. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Major exceptions include Arcadia [8], which uses an imperative notation called appl/a [13] based on Ada, hfsp [9], which uses an extension of attribute grammars, and Melmac [3], Slang [1], and Process Weaver <ref> [4] </ref>, which use a form of Petri nets. Important examples of rule-based PCEs include Grapple [7] and Merlin [11].
Reference: [5] <author> Mark A. Gisi and Gail E. Kaiser. </author> <title> Extending a tool integration language. </title> <editor> In Mark Dowson, editor, </editor> <booktitle> 1st International Conference on the Software Process: Manufacturing Complex Systems, </booktitle> <pages> pages 218-227, </pages> <address> Redondo Beach CA, October 1991. </address> <publisher> IEEE Computer Society Press. </publisher> <pages> 14 </pages>
Reference-contexts: Afterwards, one of its effects is asserted, according to a status code returned by the activity, and Marvel forward chains to any other rules that are implications of this effect. Conventional file-oriented tools are integrated into a Marvel process "as is" through envelopes written in sel <ref> [5] </ref>. The msl specification of the rule activity indicates the 5 input and output arguments for an envelope; an implicit status code returned from the envelope selects the actual effect from among those given in the rule.
Reference: [6] <author> George T. Heineman, Gail E. Kaiser, Naser S. Barghouti, and Israel Z. Ben--Shaul. </author> <title> Rule chaining in Marvel: Dynamic binding of parameters. </title> <journal> IEEE Expert, </journal> <volume> 7(6) </volume> <pages> 26-32, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: This ansi modification is a necessary first step towards our ultimate goal of componentizing a conventionally modular code base, and it provides insights into how PCEs can provide an incremental approach to reengineering. 2 Marvel PCE The goal of the Marvel project <ref> [2, 6] </ref> is to develop a process centered environment that guides and assists teams of users collaborating on software development efforts. The behavior of the PCE is tailored by a process administrator who provides the schema, process model, and tool envelopes for a specific project.
Reference: [7] <author> Karen E. Huff and Victor R. Lesser. </author> <title> A plan-based intelligent assistant that supports the software development process. </title> <editor> In Peter Henderson, editor, </editor> <booktitle> ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, </booktitle> <pages> pages 97-106, </pages> <address> Boston MA, </address> <month> November </month> <year> 1988. </year> <note> ACM Press. Special issue of Software Engineering Notes, 13(5). </note>
Reference-contexts: Major exceptions include Arcadia [8], which uses an imperative notation called appl/a [13] based on Ada, hfsp [9], which uses an extension of attribute grammars, and Melmac [3], Slang [1], and Process Weaver [4], which use a form of Petri nets. Important examples of rule-based PCEs include Grapple <ref> [7] </ref> and Merlin [11].
Reference: [8] <author> R. Kadia. </author> <title> Issues encountered in building a flexible software development environment. </title> <editor> In Herbert Weber, editor, </editor> <booktitle> 5th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 169-180, </pages> <address> Tyson's Corner VA, </address> <month> December </month> <year> 1992. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 17(5), </volume> <month> December </month> <year> 1992. </year>
Reference-contexts: Major exceptions include Arcadia <ref> [8] </ref>, which uses an imperative notation called appl/a [13] based on Ada, hfsp [9], which uses an extension of attribute grammars, and Melmac [3], Slang [1], and Process Weaver [4], which use a form of Petri nets. Important examples of rule-based PCEs include Grapple [7] and Merlin [11].
Reference: [9] <author> Takuya Katayama. </author> <title> A hierarchical and functional software process description and its enaction. </title> <booktitle> In 11th International Conference on Software Engineering, </booktitle> <pages> pages 343-352, </pages> <address> Pittsburgh PA, May 1989. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Major exceptions include Arcadia [8], which uses an imperative notation called appl/a [13] based on Ada, hfsp <ref> [9] </ref>, which uses an extension of attribute grammars, and Melmac [3], Slang [1], and Process Weaver [4], which use a form of Petri nets. Important examples of rule-based PCEs include Grapple [7] and Merlin [11].
Reference: [10] <author> Brian W. Kernighan and Dennis M. Ritchie. </author> <title> The C Programming Language. </title> <address> Englewood Cliffs NJ, </address> <year> 1978. </year>
Reference-contexts: The behavior of the PCE is tailored by a process administrator who provides the schema, process model, and tool envelopes for a specific project. The administrator loads these specifications (written in Marvel's process modeling language, msl, and 2 k&r refers to c code conforming to the original c manual <ref> [10] </ref>. 4 enveloping language, sel) into the Marvel PCE, creating a Marvel environment instance that supports the data management, process management, and tool integration requirements of the project. The average Marvel user follows the process in the environment instance, but is not involved in defining it.
Reference: [11] <author> Wilhelm Schafer, Burkhard Peuschel, and Stefan Wolf. </author> <title> A knowledge-based software development environment supporting cooperative work. </title> <journal> International Journal on Software Engineering & Knowledge Engineering, </journal> <volume> 2(1) </volume> <pages> 79-106, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Important examples of rule-based PCEs include Grapple [7] and Merlin <ref> [11] </ref>.
Reference: [12] <author> Michael H. Sokolsky and Gail E. Kaiser. </author> <title> A framework for immigrating existing software into new software development environments. </title> <journal> Software Engineering Journal, </journal> <volume> 6(6) </volume> <pages> 435-453, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: Links are typed, allowing references between arbitrary objects as defined in the data schema. The C/Marvel process mentioned earlier, for example, included 40 classes and 47 tool envelopes. Existing source code can be immigrated from the file system into a Marvel objectbase using the Marvelizer utility <ref> [12] </ref>; when we "bootstrapped" the system to create the first Marvel-3.x environment instance, we used Marvelizer to migrate the Marvel 3.0 source code into the Marvel-3.x objectbase. The administrator defines the process (or workflow) by creating process steps corresponding to the individual software development tasks.
Reference: [13] <author> S.M. Sutton, Jr. APPL/A: </author> <title> A Prototype Language for Software-Process Programming. </title> <type> PhD thesis, </type> <institution> University of Colorado, </institution> <month> August </month> <year> 1990. </year>
Reference-contexts: Major exceptions include Arcadia [8], which uses an imperative notation called appl/a <ref> [13] </ref> based on Ada, hfsp [9], which uses an extension of attribute grammars, and Melmac [3], Slang [1], and Process Weaver [4], which use a form of Petri nets. Important examples of rule-based PCEs include Grapple [7] and Merlin [11].
Reference: [14] <author> Walter F. Tichy. </author> <title> Smart recompilation. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 8(3) </volume> <pages> 273-291, </pages> <month> July </month> <year> 1986. </year> <month> 15 </month>
Reference-contexts: The process can then use this information intelligently; for example, whenever a change occurs to a public function declaration in an hfile, only the cfile objects that actually use that particular function need to be updated (a simple form of smart recompilation <ref> [14] </ref>). One question to be answered is whether the overhead required by a PCE such as ours can be validated. There are several problems, however, when we attempt to address this question.
References-found: 14

