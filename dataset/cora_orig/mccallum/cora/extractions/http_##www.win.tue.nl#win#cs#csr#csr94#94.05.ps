URL: http://www.win.tue.nl/win/cs/csr/csr94/94.05.ps
Refering-URL: http://www.win.tue.nl/win/cs/csr/csr94.html
Root-URL: http://www.win.tue.nl
Email: wsinjh@win.tue.nl  
Keyword: Formal verification, Protocol verification, Real-time, Fault-tolerance, Broadcast.  synchronous asynchronous  
Affiliation: Department of Mathematics and Computing Science, Eindhoven University of Technology,  
Address: Netherlands.  P.O.Box 513, 5600 MB Eindhoven, The Netherlands  
Note: c Real-Time Systems, 1-27 Kluwer Academic Publishers, Boston. Manufactured in The  
Abstract: We apply a formal method based on assertions to specify and verify an atomic broadcast protocol. The protocol is implemented by replicating a server process on all processors in a network. We show that the verification of the protocol can be done compositionally by using specifications in which timing is expressed by local clock values. First the requirements of the protocol are formally described. Next the underlying communication mechanism, the assumptions about local clocks, and the failure assumptions are axiomatized. Also the server process is represented by a formal specification. Then we verify that parallel execution of the server processes leads to the desired properties by proving that the conjunction of all server specifications and the axioms about the system implies the requirements of the protocol. Embedded computing systems are usually composed of hardware and software components which can fail. Component failures might lead to unanticipated behaviour and service unavailability. To achieve high availability of a service despite failures, a key idea is to implement the service by a group of server processes running on distinct processors (Cristian 1990). Replication of service state information among group members enables the group to provide the service even when some of its members fail, since the remaining members have enough information about the service state to continue the service. To maintain the consistency of these replicated global states, any state update must be broadcast to all correct servers such that they all observe the same sequence of state updates. This requires a communication service which can be used by the client processes to deliver updates to their peers. We refer to such a communication service as (also called reliable broadcast). There are two sets of atomic broadcast protocols: protocols, such as the protocols described by Babaoglu and Drumond (1985), Cristian et al. (1985 and 1989), and Cristian (1990), and protocols, as presented by Birman and Joseph (1987) and Chang and Maxemchuck (1984). Synchronous atomic broadcast protocols assume that the underlying communication delays between correct processors are bounded. Given this assumption, local clocks of correct processors can be synchronized, see e.g. (Cristian, Aghili, and Strong, 1986 and 1993). Then, following Cristian et al. (1985, 1989), the properties of synchronous atomic broadcast protocols are described in terms of local clocks: atomic broadcast
Abstract-found: 1
Intro-found: 1
Reference: <institution> 27 </institution>
References-found: 1

