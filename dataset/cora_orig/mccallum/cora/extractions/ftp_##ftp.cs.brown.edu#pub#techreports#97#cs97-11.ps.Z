URL: ftp://ftp.cs.brown.edu/pub/techreports/97/cs97-11.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-97-11.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> N. Amenta. </author> <note> Directory of computational geometry software. http://www. geom.umn.edu/software/cglist/. </note>
Reference-contexts: 1 Introduction The development of checkers for geometric structures is justified by the expectation that it is easier to evaluate the quality of the output than the correctness of the algorithm producing it, and is further motivated by the increasing availability of geometric software on the Internet (see, e.g., <ref> [1] </ref>), and by the emerging client-server distributed models of geometric computing over the Web (see, e.g., [2]). Mehlhorn et al. [19] identify three fundamental features of a good checker: correctness, simplicity, and efficiency. In this paper, we consider checkers for subdivisions in two and higher dimensions. <p> Hence, also a local convexity test corresponds to an orientation test. We use the notation jp 1 ; p 2 ; p 3 ; p 4 j to denote the determinant whose i-th row is <ref> [x i ; y i ; z i ; 1] </ref> (i = 1; : : : ; 4); jp 1 ; p 2 ; p 3 j is the determinant whose i-th row is [x i ; y i ; 1] (i = 1; : : : ; 4) . (highlighted <p> 2 ; p 3 ; p 4 j to denote the determinant whose i-th row is [x i ; y i ; z i ; 1] (i = 1; : : : ; 4); jp 1 ; p 2 ; p 3 j is the determinant whose i-th row is <ref> [x i ; y i ; 1] </ref> (i = 1; : : : ; 4) . (highlighted in the picture) corresponds to the orientation test jp 1 ; p 2 ; p 3 ; p 4 j. <p> input is not the boundary of a convex polytope. 15 Algorithm T-check polytope r 0 foreach vertex v 2 do d (v) 0 foreach edge e 2 do if e is not locally convex then return false else if e is a seam edge then let w [0] and w <ref> [1] </ref> be the two endpoints of e for i 0; 1 do u w [(i + 1) mod 2] then return false else if d (v) = 0 then d (v) 1 p (v) u else f d (v) = 1 g d (v) 2 if v is a right-2-seam vertex
Reference: [2] <author> G. Barequet, S. S. Bridgeman, C. A. Duncan, M. T. Goodrich, and R. Tamas-sia. </author> <title> Classic computational geometry with GeomNet. </title> <booktitle> In Proc. Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1997. </year>
Reference-contexts: it is easier to evaluate the quality of the output than the correctness of the algorithm producing it, and is further motivated by the increasing availability of geometric software on the Internet (see, e.g., [1]), and by the emerging client-server distributed models of geometric computing over the Web (see, e.g., <ref> [2] </ref>). Mehlhorn et al. [19] identify three fundamental features of a good checker: correctness, simplicity, and efficiency. In this paper, we consider checkers for subdivisions in two and higher dimensions. In particular, we consider two-dimensional planar subdivisions and convex polytopes in a fixed dimension d.
Reference: [3] <author> J. L. Bentley and T. A. Ottmann. </author> <title> Algorithms for reporting and counting geometric intersections. </title> <journal> IEEE Trans. Comput., </journal> <volume> C-28:643-647, </volume> <year> 1979. </year>
Reference-contexts: Testing the simplicity of a polygon with k vertices can be done in O (k log k) by a simple optimal-degree sweep-line algorithm <ref> [3] </ref> or in O (k)- time as an application of the more elaborate triangulation algorithm by Chazelle [6]. This discussion can be summarized as follows.
Reference: [4] <author> M. Blum and S. Kannan. </author> <title> Designing programs that check their work. </title> <journal> J. ACM, </journal> <volume> 42(1) </volume> <pages> 269-291, </pages> <month> Jan. </month> <year> 1995. </year>
Reference-contexts: Namely, no certificate C is available to the checker, which must perform the verification using only geometric graph . A checker that operates within the No-Certificate Scenario is called an N-checker. 2 The Arbitrary-Certificate Scenario follows the program checking paradigm pioneered by Blum and Kannan <ref> [4] </ref>. On the negative side, it requires that the algorithms constructing the subdivision be modified to produce the specified certificate. On the positive side, A-checkers are often faster and simpler to implement than other types of checkers, and their correctness is usually easily established.
Reference: [5] <author> C. Burnikel. </author> <title> Exact Computation of Voronoi Diagrams and Line Segment Intersections. </title> <type> Ph.D thesis, </type> <institution> Universitat des Saarlandes, </institution> <month> Mar. </month> <year> 1996. </year>
Reference-contexts: Specifically, our contributions can be summarized as follows. 1. As an additional measure of effectiveness for a checker, we adopt the notion of degree <ref> [16, 17, 5] </ref>, which takes into account the number of bits required by the checker to carry out error-free computations. A good checker should have degree no higher than the problem at hand allows. <p> N-checkers are studied in Section 5. Finally open problems are given in Section 6. 2 Preliminaries We start with definitions for geometric graphs, ordered graphs, and planarity. We then recall the notion of degree of geometric algorithms, introduced in [16, 17] (a related concept is defined in <ref> [5] </ref>). Finally, we present 4 lower bounds on the degree of checkers for convex polytopes and planar subdivisions. 2.1 Geometric graphs, ordered graphs, and planarity A d-dimensional geometric graph is a graph drawn with straight-line edges in d-dimensional space, i.e., a graph whose vertices have d-dimensional coordinates.
Reference: [6] <author> B. Chazelle. </author> <title> Triangulating a simple polygon in linear time. </title> <journal> Discrete Comput. Geom., </journal> <volume> 6 </volume> <pages> 485-524, </pages> <year> 1991. </year>
Reference-contexts: Testing the simplicity of a polygon with k vertices can be done in O (k log k) by a simple optimal-degree sweep-line algorithm [3] or in O (k)- time as an application of the more elaborate triangulation algorithm by Chazelle <ref> [6] </ref>. This discussion can be summarized as follows. Lemma 11 A connected geometric graph with ordering is planar (and thus induces a planar subdivision) if and only if: 1. ordering is planar; and 2. all the circuits induced by are simple polygons.
Reference: [7] <author> G. Di Battista, R. Tamassia, and L. Vismara. </author> <title> On-line convex planarity testing. </title> <booktitle> In Proc. Graph-Theoretic Concepts in Computer Science, Lecture Notes Comput. </booktitle> <publisher> Sci. Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Lemma 13 Let G be the underlying graph of a convex planar subdivision. Then the number (G) of topologically distinct planar orderings of G is O (2 n ), where n is the number of vertices of G. Proof: The proof is based on the results of <ref> [7, 8] </ref>, where the SPQR-trees of planar graphs that admit a planar straight-line drawing with convex faces are characterized. - By combining Theorem 14, Lemma 12, Lemma 13, and Theorem 12 we obtain the following.
Reference: [8] <author> G. Di Battista, R. Tamassia, and L. Vismara. </author> <title> On-line convex planarity testing. </title> <type> Technical Report CS-95-26, </type> <institution> Dept. Computer Science, Brown Univ., </institution> <year> 1995. </year> <note> ftp: //ftp.cs.brown.edu/pub/techreports/95/cs95-26.ps.Z. </note>
Reference-contexts: Lemma 13 Let G be the underlying graph of a convex planar subdivision. Then the number (G) of topologically distinct planar orderings of G is O (2 n ), where n is the number of vertices of G. Proof: The proof is based on the results of <ref> [7, 8] </ref>, where the SPQR-trees of planar graphs that admit a planar straight-line drawing with convex faces are characterized. - By combining Theorem 14, Lemma 12, Lemma 13, and Theorem 12 we obtain the following.
Reference: [9] <author> G. Di Battista and L. Vismara. </author> <title> Angles of planar triangular graphs. </title> <journal> SIAM J. Discrete Math., </journal> <volume> 9(3) </volume> <pages> 349-359, </pages> <year> 1996. </year>
Reference-contexts: Lemma 8 also provides an alternative and shorter proof of a result of <ref> [9] </ref> (Lemma 4.5), as the following corollary shows. Corollary 1 Let be a connected two-dimensional geometric graph. If the ordering of is planar, all the internal circuits induced by are triangles, and the outer circuit induced by is a convex polygon, then is planar and induces a triangulation.
Reference: [10] <author> I. Fary. </author> <title> On straight lines representation of planar graphs. </title> <journal> Acta Sci. Math. Szeged., </journal> <volume> 11 </volume> <pages> 229-233, </pages> <year> 1948. </year>
Reference-contexts: A two-dimensional geometric graph is planar if it has no crossing edges, i.e., any two edges of intersect only at a common vertex. For every planar graph G, there exists a planar geometric graph with underlying graph G, i.e., every planar graph admits a planar straight-line drawing (see, e.g., <ref> [10] </ref>). However, a geometric graph with an underlying planar graph is not necessarily planar. A planar geometric graph determines a planar subdivision S, i.e., a partition of the plane into regions called faces. Planar subdivision S is said to be induced by .
Reference: [11] <author> S. Gottschalk, M. C. Lin, and D. Manocha. OBB-tree: </author> <title> A hierarchical structure for rapid interference detection. Comput. Graph., </title> <booktitle> 1996. Proc. SIGGRAPH '96. </booktitle>
Reference-contexts: The No-Certificate Scenario is likely to occur in various application contexts, such as CAD models, where 3D subdivisions are often represented with no topological information <ref> [11] </ref>). Also, the availability of N-checkers is important when one tries to incorporate in a program modules developed by others, whose source code may be difficult to understand or modify.
Reference: [12] <author> F. Harary. </author> <title> Graph Theory. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1972. </year>
Reference-contexts: We show that there exists a much simpler solution to the problem of testing in linear time whether an ordering of a connected graph G is planar. Our algorithm follows from basic results in planarity theory <ref> [12] </ref>. Namely, we determine the circuits induced by and check whether their number C is equal to E V + 2, where V and E are the number of vertices and edges of G, respectively. Clearly, this takes linear time.
Reference: [13] <author> J. Hopcroft and R. E. Tarjan. </author> <title> Efficient planarity testing. </title> <journal> J. ACM, </journal> <volume> 21(4) </volume> <pages> 549-568, </pages> <year> 1974. </year>
Reference-contexts: The resulting augmented graph G fl is planar if and only if the ordering is planar. Thus, the planarity of can be checked by running a planarity-testing algorithm (e.g., <ref> [13] </ref>) on G fl . Besides its theoretical interest, however, this algorithm may be not be the most suited for practical applications, since the implementation of a linear-time planarity testing algorithm is complex and requires sophisticated data structures.
Reference: [14] <author> D. G. Kirkpatrick. </author> <title> Establishing order in planar subdivisions. </title> <journal> Discrete Comput. Geom., </journal> <volume> 3 </volume> <pages> 267-280, </pages> <year> 1988. </year>
Reference-contexts: Extending the above results on T-checkers, we present linear-time optimal-degree N-checkers for triangulations and convex subdivisions. This solves significant special cases of an open problem mentioned by Kirkpatrick <ref> [14] </ref> on the existence of an o (n log n) algorithm to verify the planarity of a geometric graph. 5. As a further application, we give linear-time optimal-degree N-checkers for Delaunay triangulations, locally-minimum-weight triangulations and Delaunay diagrams. <p> A building block of such a T-checker is an algorithm that tests whether an ordering of a graph G is planar. A linear-time algorithm for answering the question was given by Kirkpatrick in <ref> [14] </ref>. His algorithm considers the circuits induced by and adds to G a new vertex v c for each induced circuit c and a new edge (v c ; w) for each vertex w of c. <p> Our N-checkers compute the ordering of the input geometric graph and then use one of the T-checkers presented in Section 4. Theorem 14 <ref> [14] </ref> Let be a geometric graph with n vertices such that its underlying graph G is planar and has (G) distinct planar orderings. There exists an algorithm that either computes the ordering of in O (n+log (G)) time or fails. If it fails, then the ordering of is not planar. <p> There exists an algorithm that either computes the ordering of in O (n+log (G)) time or fails. If it fails, then the ordering of is not planar. By a detailed analysis of the algorithm presented in <ref> [14] </ref> we obtain: Lemma 12 The algorithm of Theorem 14 has degree 2. Our N-checker for planar triangulations exploits Theorem 14, Lemma 12, and the fact that the underlying graph G of a triangulation has (G) = 2. Let be a geometric graph with n vertices.
Reference: [15] <author> C. Levcopoulos and A. Lingas. </author> <title> On approximation behavior of the greedy triangulation for convex polygons. </title> <journal> Algorithmica, </journal> <volume> 2 </volume> <pages> 175-193, </pages> <year> 1987. </year>
Reference-contexts: Locally minimum-weight triangulations have been extensively studied for their relationship to minimum-weight triangulations (see, e.g., <ref> [15] </ref>). Theorem 17 There exists an optimal N-checker for locally minimum-weight triangulations that runs in linear time and has degree 2. The optimal time complexity of the N-checkers of Theorems 15, 16, and 17 relies on the fact that (G) = 2 for the underlying graph of a triangulation.
Reference: [16] <author> G. Liotta, F. P. Preparata, and R. Tamassia. </author> <title> Robust proximity queries: an illustration of degree-driven algorithm design. </title> <note> SIAM J. Comput. to appear. 25 </note>
Reference-contexts: Specifically, our contributions can be summarized as follows. 1. As an additional measure of effectiveness for a checker, we adopt the notion of degree <ref> [16, 17, 5] </ref>, which takes into account the number of bits required by the checker to carry out error-free computations. A good checker should have degree no higher than the problem at hand allows. <p> N-checkers are studied in Section 5. Finally open problems are given in Section 6. 2 Preliminaries We start with definitions for geometric graphs, ordered graphs, and planarity. We then recall the notion of degree of geometric algorithms, introduced in <ref> [16, 17] </ref> (a related concept is defined in [5]). <p> The arithmetic de-gree of a monomial is the sum of the arithmetic degrees of its variables. An algorithm has degree d if its test computations involve the evaluation of multivariate polynomials of arithmetic degree at most d <ref> [16, 17] </ref>. A problem has degree d if any algorithm that solves has degree at least d. Theorem 1 [16, 17] The degree of the problem of evaluating a predicate expressed by a polynomial P is the maximum arithmetic degree of the irreducible factors of P that change sign over their <p> An algorithm has degree d if its test computations involve the evaluation of multivariate polynomials of arithmetic degree at most d <ref> [16, 17] </ref>. A problem has degree d if any algorithm that solves has degree at least d. Theorem 1 [16, 17] The degree of the problem of evaluating a predicate expressed by a polynomial P is the maximum arithmetic degree of the irreducible factors of P that change sign over their domain. <p> Clearly, this can be done in linear time. Also, the above in-circle test can be executed with a degree 4 algorithm (see, e.g. <ref> [16, 17] </ref>). - A locally minimum-weight triangulation is a triangulation such that for every edge shared by two triangles 4 (a; b; c) and 4 (a; b; d), edge bd is the shortest diagonal of the quadrilateral with vertices a; b; c; d.
Reference: [17] <author> G. Liotta, F. P. Preparata, and R. Tamassia. </author> <title> Robust proximity queries: an illustration of degree-driven algorithm design. </title> <booktitle> In Proc. Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1997. </year>
Reference-contexts: Specifically, our contributions can be summarized as follows. 1. As an additional measure of effectiveness for a checker, we adopt the notion of degree <ref> [16, 17, 5] </ref>, which takes into account the number of bits required by the checker to carry out error-free computations. A good checker should have degree no higher than the problem at hand allows. <p> N-checkers are studied in Section 5. Finally open problems are given in Section 6. 2 Preliminaries We start with definitions for geometric graphs, ordered graphs, and planarity. We then recall the notion of degree of geometric algorithms, introduced in <ref> [16, 17] </ref> (a related concept is defined in [5]). <p> The arithmetic de-gree of a monomial is the sum of the arithmetic degrees of its variables. An algorithm has degree d if its test computations involve the evaluation of multivariate polynomials of arithmetic degree at most d <ref> [16, 17] </ref>. A problem has degree d if any algorithm that solves has degree at least d. Theorem 1 [16, 17] The degree of the problem of evaluating a predicate expressed by a polynomial P is the maximum arithmetic degree of the irreducible factors of P that change sign over their <p> An algorithm has degree d if its test computations involve the evaluation of multivariate polynomials of arithmetic degree at most d <ref> [16, 17] </ref>. A problem has degree d if any algorithm that solves has degree at least d. Theorem 1 [16, 17] The degree of the problem of evaluating a predicate expressed by a polynomial P is the maximum arithmetic degree of the irreducible factors of P that change sign over their domain. <p> Clearly, this can be done in linear time. Also, the above in-circle test can be executed with a degree 4 algorithm (see, e.g. <ref> [16, 17] </ref>). - A locally minimum-weight triangulation is a triangulation such that for every edge shared by two triangles 4 (a; b; c) and 4 (a; b; d), edge bd is the shortest diagonal of the quadrilateral with vertices a; b; c; d.
Reference: [18] <author> K. Mehlhorn and S. Naher. </author> <title> Checking Geometric Structures, </title> <month> Dec. </month> <year> 1996. </year> <note> Manual. </note>
Reference-contexts: As a further application, we give linear-time optimal-degree N-checkers for Delaunay triangulations, locally-minimum-weight triangulations and Delaunay diagrams. Near the completion of our investigations, we became aware of two ongoing projects on the design of T-checkers for planar subdivisions, including triangulations and convex subdivisions. A manual <ref> [18] </ref> describing the functionality of C++ functions that implement T-checkers for Delaunay triangulations, Voronoi diagrams and convex planar subdivisions is available from Mehlhorn's Web page. A manuscript in progress [20] contains characterizations of triangulations and convex planar subdivisions similar to those of the present paper. <p> Any minor overlaps of independently obtained results are largely offset by the fact that the respective proof techniques are different, and that our checkers work also within the No-Certificate Scenario, while maintaining the same efficiency as the T-checkers of <ref> [20, 18] </ref>. The rest of this paper is organized as follows. Preliminaries and lower bounds on the degree of the problems studied in this paper are given in Section 2. Our T-checker for convex polytopes is presented in Section 3.
Reference: [19] <author> K. Mehlhorn, S. Naher, T. Schilz, S. Schirra, M. Seel, R. Seidel, and C. Uhrig. </author> <title> Checking geometric programs or verification of geometric structures. </title> <booktitle> In Proc. 12th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 159-165, </pages> <year> 1996. </year>
Reference-contexts: Mehlhorn et al. <ref> [19] </ref> identify three fundamental features of a good checker: correctness, simplicity, and efficiency. In this paper, we consider checkers for subdivisions in two and higher dimensions. In particular, we consider two-dimensional planar subdivisions and convex polytopes in a fixed dimension d. <p> On the positive side, A-checkers are often faster and simpler to implement than other types of checkers, and their correctness is usually easily established. Sullivan et al. [21] show A-checkers for planar convex hull, sorting, and shortest path algorithms. A-checkers for d-dimensional convex hulls are also discussed in <ref> [19] </ref>. The Topology-Certificate Scenario requires a natural type of certificate, which many algorithms for constructing subdivisions are likely to produce by default. Mehlhorn et al. [19] present a T-checker for certifying the convexity of a d-dimensional polytope and mention T-checkers for several other geometric structures, including Delaunay triangulations and Voronoi diagrams. <p> Sullivan et al. [21] show A-checkers for planar convex hull, sorting, and shortest path algorithms. A-checkers for d-dimensional convex hulls are also discussed in <ref> [19] </ref>. The Topology-Certificate Scenario requires a natural type of certificate, which many algorithms for constructing subdivisions are likely to produce by default. Mehlhorn et al. [19] present a T-checker for certifying the convexity of a d-dimensional polytope and mention T-checkers for several other geometric structures, including Delaunay triangulations and Voronoi diagrams. <p> We give lower bounds on the degree of checkers for planar subdivisions and convex polytopes, and present optimal-degree checkers. 2. We present a new T-checker for convex polytopes that is simpler than the one given in <ref> [19] </ref>. Our T-checker works in any dimension and recursively reduces the verification of a d-dimensional polytope to the verification of an associated (d 1)-dimensional polytope. The T-checker is optimal with respect to both the time complexity and the degree. <p> We call negative the half-space that contains the facets adjacent to f . The core of , denoted by (), is the interior of the convex polytope () obtained as the intersection of all negative half-spaces defined by the facets of . Mehlhorn et al. <ref> [19] </ref> have proved results equivalent to those stated in the theorems and lemmas that follow. Lemma 1 [19] Let be a locally convex polygon and let q be any point of (). Every ray emanating from q intersects the same number of edges and/or vertices of . 9 Theorem 5 [19] <p> The core of , denoted by (), is the interior of the convex polytope () obtained as the intersection of all negative half-spaces defined by the facets of . Mehlhorn et al. <ref> [19] </ref> have proved results equivalent to those stated in the theorems and lemmas that follow. Lemma 1 [19] Let be a locally convex polygon and let q be any point of (). Every ray emanating from q intersects the same number of edges and/or vertices of . 9 Theorem 5 [19] A locally convex polygon is globally convex if and only if a ray emanating from a point <p> <ref> [19] </ref> have proved results equivalent to those stated in the theorems and lemmas that follow. Lemma 1 [19] Let be a locally convex polygon and let q be any point of (). Every ray emanating from q intersects the same number of edges and/or vertices of . 9 Theorem 5 [19] A locally convex polygon is globally convex if and only if a ray emanating from a point of () intersects at a single edge or at a single vertex. Lemma 2 [19] Let be a locally convex polyhedron and let q be any point of (). <p> Every ray emanating from q intersects the same number of edges and/or vertices of . 9 Theorem 5 <ref> [19] </ref> A locally convex polygon is globally convex if and only if a ray emanating from a point of () intersects at a single edge or at a single vertex. Lemma 2 [19] Let be a locally convex polyhedron and let q be any point of (). Every ray emanating from q and intersecting only at facets intersects the same number of facets of . Theorem 6 [19] A locally convex polyhedron is the boundary of a convex polytope if and only if <p> Lemma 2 <ref> [19] </ref> Let be a locally convex polyhedron and let q be any point of (). Every ray emanating from q and intersecting only at facets intersects the same number of facets of . Theorem 6 [19] A locally convex polyhedron is the boundary of a convex polytope if and only if any ray emanating from a point of () and intersecting a facet of does not have any other intersection with . Based on Theorem 6, Mehlhorn et al. [19] check whether a locally convex polyhedron <p> Theorem 6 <ref> [19] </ref> A locally convex polyhedron is the boundary of a convex polytope if and only if any ray emanating from a point of () and intersecting a facet of does not have any other intersection with . Based on Theorem 6, Mehlhorn et al. [19] check whether a locally convex polyhedron is the boundary of a convex polytope by first computing a point q of () and a ray r emanating from from q and passing through the centroid of an arbitrarily chosen facet, and then checking that no other facet is intersected by r. <p> There exists a T-checker that verifies whether is the boundary of a convex polytope in O (n)-time and with optimal-degree 3. Furthermore, the T-checker evaluates at most 3n 6 predicates of degree 3. 17 We observe that the checker for convex polytopes given by Mehlhorn et al. <ref> [19] </ref> evaluates in the worst case 6n 15 predicates of degree 3. Namely, their checker verifies first the local convexity condition at each edge. This implies executing 3n 6 orientation tests of degree 3.
Reference: [20] <author> K. Mehlhorn, S. Naher, T. Schilz, S. Schirra, M. Seel, R. Seidel, and C. Uhrig. </author> <title> Checking geometric programs or verification of geometric structures. </title> <type> Manuscript, </type> <year> 1997. </year>
Reference-contexts: A manual [18] describing the functionality of C++ functions that implement T-checkers for Delaunay triangulations, Voronoi diagrams and convex planar subdivisions is available from Mehlhorn's Web page. A manuscript in progress <ref> [20] </ref> contains characterizations of triangulations and convex planar subdivisions similar to those of the present paper. There is therefore an undeniable shared objective between our research and that of Mehlhorn et al. <p> Any minor overlaps of independently obtained results are largely offset by the fact that the respective proof techniques are different, and that our checkers work also within the No-Certificate Scenario, while maintaining the same efficiency as the T-checkers of <ref> [20, 18] </ref>. The rest of this paper is organized as follows. Preliminaries and lower bounds on the degree of the problems studied in this paper are given in Section 2. Our T-checker for convex polytopes is presented in Section 3.
Reference: [21] <author> G. F. Sullivan, D. S. Wilson, and G. M. </author> <title> Masson. Certification of computational results. </title> <journal> IEEE Trans. Comput., </journal> <volume> 44(7) </volume> <pages> 833-847, </pages> <year> 1995. </year> <month> 26 </month>
Reference-contexts: It has been shown that there exists an A-checker using certificate C for verifying that a polygon is the convex hull S of the points of a set P in linear time O (jGj + jP j) (see, e.g., <ref> [21] </ref>). Topology-Certificate Scenario: In this intermediate scenario, the checker has available a certificate C that describes the (claimed) topology of the subdivision S. A checker that operates within the Topology-Certificate Scenario is called a T-checker. <p> On the negative side, it requires that the algorithms constructing the subdivision be modified to produce the specified certificate. On the positive side, A-checkers are often faster and simpler to implement than other types of checkers, and their correctness is usually easily established. Sullivan et al. <ref> [21] </ref> show A-checkers for planar convex hull, sorting, and shortest path algorithms. A-checkers for d-dimensional convex hulls are also discussed in [19]. The Topology-Certificate Scenario requires a natural type of certificate, which many algorithms for constructing subdivisions are likely to produce by default.
References-found: 21

