URL: ftp://ftp.cs.arizona.edu/ftol/papers/isads93.ps
Refering-URL: http://www.cs.arizona.edu/cactus/public.html
Root-URL: http://www.cs.arizona.edu
Title: Modularity in the Design and Implementation of Consul  
Author: Shivakant Mishra, Larry L. Peterson, and Richard D. Schlichting 
Address: Tucson, AZ 85721, USA  
Affiliation: Department of Computer Science The University of Arizona  
Abstract: Many applications constructed as Autonomous Decentralized Systems require high dependability, often leading to the use of distributed architectures and their associated fault-tolerance techniques. Consul is a system designed to support the use of such techniques in the construction of fault-tolerant distributed systems structured according to the state machine approach. Here, the way in which modularity has been used in the design and implementation of Consul is described. Our approach makes it easy to configure a system customized to the needs of a specific application, as well as facilitating the development of the individual components that make up Consul. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Mishra, </author> <title> Consul: A Communication Substrate for Fault-tolerant Distributed Programs. </title> <type> PhD thesis, </type> <institution> Dept of Computer Science, Univ. of Arizona, </institution> <address> Tucson, AZ, </address> <year> 1991. </year>
Reference-contexts: To achieve high dependability, the software for a distributed system must be implemented as a fault-tolerant distributed program that can continue executing despite processor or network failures. Recently, we have designed and implemented a system called Consul <ref> [1, 2] </ref> that provides support for constructing such programs using the fl Current address: Dept. of Computer Science and Engineering, University of California San Diego, La Jolla, CA 92093, USA state machine approach [3]. <p> This is done by first, reading a checkpoint stored by the replica during execution, and then using an automatic replay of messages stored in Psync's context graph to process missing commands. Further details on all of these protocols can be found in <ref> [1] </ref>. 3 Implementation Modularity Consul is made up of approximately 10,000 lines of C code, of which 3,500 is Psync. Its implementation platform is the x-kernel, an operating system kernel designed explicitly for experimenting with communication protocols [12]. <p> Such a strategy avoids many of the ad-hoc structuring and control paths that often accompany a monolithic system. Moreover, the implementation retains this modularity by using the configuration and communication support provided by the x-kernel. Our experience, both with Consul directly <ref> [1] </ref> and with other systems built using the x-kernel model [14, 15], is that this modularization comes with little or no performance penalty. Despite our positive experience with modularization in this context, there were, in fact, a number of difficulties that made the process less straightforward than it might appear.
Reference: [2] <author> S. Mishra, L. L. Peterson, and R. D. Schlichting, </author> <title> Consul: A communication substrate for fault-tolerant distributed programs, </title> <type> Tech. Rep. TR 91-32, </type> <institution> Dept of Computer Science, Univ. of Arizona, </institution> <address> Tucson, AZ, </address> <year> 1991. </year>
Reference-contexts: To achieve high dependability, the software for a distributed system must be implemented as a fault-tolerant distributed program that can continue executing despite processor or network failures. Recently, we have designed and implemented a system called Consul <ref> [1, 2] </ref> that provides support for constructing such programs using the fl Current address: Dept. of Computer Science and Engineering, University of California San Diego, La Jolla, CA 92093, USA state machine approach [3].
Reference: [3] <author> F. Schneider, </author> <title> Implementing fault-tolerant services using the state machine approach: A tutorial, </title> <journal> ACM Comp. Surveys, </journal> <volume> vol. 22, </volume> <pages> pp. 299-319, </pages> <month> Dec </month> <year> 1990. </year>
Reference-contexts: Recently, we have designed and implemented a system called Consul [1, 2] that provides support for constructing such programs using the fl Current address: Dept. of Computer Science and Engineering, University of California San Diego, La Jolla, CA 92093, USA state machine approach <ref> [3] </ref>. It does this by providing various fault-tolerant services such as group-oriented multicast, membership, and recovery, which simplify the problems associated with consistently ordering events and dealing with failures in this approach. These services are realized using protocols as the fundamental modules of the system. <p> Finally, Section 4 offers some conclusions. 2 Design Modularity As already noted, Consul is a collection of protocols that form a communication substrate upon which fault-tolerant distributed systems can be built using the state machine approach <ref> [3] </ref>. In this approach, a system is structured as a collection of generic services that are implemented by multiple processes for fault-tolerance.
Reference: [4] <author> D. Powell, D. Seaton, G. Bonn, P. Verissimo, and F. Wae-selynk, </author> <title> The Delta-4 approach to dependability in open distributed computing systems, </title> <booktitle> in Proc. 18th Symp. on Fault-Tolerant Comp., </booktitle> <address> (Tokyo), </address> <month> Jun </month> <year> 1988. </year>
Reference-contexts: Messages may be lost or delivered out-of-order, but it is assumed that they are never corrupted. Furthermore, processors are assumed to suffer fail-silent semantics <ref> [4] </ref>, i.e., they fail by crashing without making any incorrect state transitions. Finally, Consul assumes that stable storage is available to each processor, and that data written to stable storage survives processor crashes [5].
Reference: [5] <author> B. Lampson, </author> <title> Atomic transactions, </title> <booktitle> in Distributed SystemsArchitecture and Implementation, </booktitle> <pages> pp. 246-265, </pages> <address> Berlin: </address> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference-contexts: Furthermore, processors are assumed to suffer fail-silent semantics [4], i.e., they fail by crashing without making any incorrect state transitions. Finally, Consul assumes that stable storage is available to each processor, and that data written to stable storage survives processor crashes <ref> [5] </ref>. In keeping with our emphasis on modularity, the fault-tolerant services supported by Consul are implemented independently of one another as individual protocols rather than together in one monolithic system. Figure 1 illustrates the detailed architecture of a typical protocol configuration in Consul.
Reference: [6] <author> F. Cristian, </author> <title> Understanding fault-tolerant distributed systems, </title> <journal> CACM, </journal> <volume> vol. 34, </volume> <pages> pp. 56-78, </pages> <month> Feb </month> <year> 1991. </year>
Reference-contexts: Figure 1 illustrates the detailed architecture of a typical protocol configuration in Consul. In this figure, the rectangles are protocols, with an arrow from protocol P 1 to protocol P 2 indicating that P 1 depends on the correct functioning of P 2 to ensure its own correctness <ref> [6] </ref>. The stable store protocol at the base of the substrate provides a storage facility that survives processor crashes. The (re)start and divider protocols are configuration protocols, i.e., they aid the user in building a system according to the requirements of the application.
Reference: [7] <author> L. L. Peterson, N. C. Buchholz, and R. D. Schlichting, </author> <title> Preserving and using context information in interprocess communication, </title> <journal> ACM Trans. on Comp. Systems, </journal> <volume> vol. 7, </volume> <pages> pp. 217-246, </pages> <month> Aug </month> <year> 1989. </year>
Reference-contexts: The divider protocol is a demultiplexing protocol that directs messages in the sys tem to the appropriate protocols. The specific functions of these two protocols and the dispatch protocol are described further in Section 3. Psync is the main communication mechanism in Consul <ref> [7] </ref>. It provides a group-oriented interprocess communication mechanism in the form of a multicast facility that maintains the partial order of messages exchanged in the system. Specifically, it supports a conversation abstraction through which a collection of processes such as the state machine replicas exchange messages.
Reference: [8] <author> K. Birman, A. Schiper, and P. Stephenson, </author> <title> Lightweight causal and atomic group multicast, </title> <journal> ACM Trans. on Comp. Systems, </journal> <volume> vol. 9, </volume> <pages> pp. 272-314, </pages> <month> Aug </month> <year> 1991. </year>
Reference-contexts: Fundamentally, each process sends a message in the context of those messages it has already sent or received, a relation that defines a partial ordering on the messages exchanged through the conversation. This partial order, which has also been called causal order <ref> [8] </ref>, is maintained explicitly by Psync in the form of a directed acyclic graph called a context graph. At any given time during execution, each participant has a view of the context graph, which is the subgraph corresponding to those messages it has sent or received up to that point.
Reference: [9] <author> F. Cristian, H. Aghili, R. Strong, and D. Dolev, </author> <title> Atomic broadcast: From simple message diffusion to Byzantine agreement, </title> <booktitle> in Proc. 15th Symp. on Fault-Tolerant Comp., </booktitle> <address> (Ann Arbor, MI), </address> <pages> pp. 200-206, </pages> <month> Jun </month> <year> 1985. </year>
Reference-contexts: At this point, two other kinds of orderings have been constructed. One is a consistent total order; when combined with the atomic message delivery guarantees of Psync, this gives the effect of an atomic broadcast <ref> [9] </ref>. The other is a semantic dependent order; this takes advantage of the commutativity of the commands encoded in messages to provide an ordering that is less restrictive than total ordering, yet still strong enough to preserve the correctness of the application [10].
Reference: [10] <author> S. Mishra, L. L. Peterson, and R. D. Schlichting, </author> <title> Implementing replicated objects using Psync, </title> <booktitle> in Proc. 8th Symp. on Reliable Distributed Systems, (Seattle, Washing-ton), </booktitle> <pages> pp. 42-52, </pages> <month> Oct </month> <year> 1989. </year>
Reference-contexts: The other is a semantic dependent order; this takes advantage of the commutativity of the commands encoded in messages to provide an ordering that is less restrictive than total ordering, yet still strong enough to preserve the correctness of the application <ref> [10] </ref>. The failure detection and membership protocols deal with replica failures and recoveries, and together comprise Consul's membership service [11]. The failure detection protocol is used to monitor replicas for failures.
Reference: [11] <author> S. Mishra, L. L. Peterson, and R. D. Schlichting, </author> <title> A membership protocol based on partial order, in Dependable Computing for Critical Applications 2 (J. </title> <editor> F. Meyer and R. D. Schlichting, </editor> <booktitle> eds.), </booktitle> <pages> pp. 309-331, </pages> <address> Vienna: </address> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: The failure detection and membership protocols deal with replica failures and recoveries, and together comprise Consul's membership service <ref> [11] </ref>. The failure detection protocol is used to monitor replicas for failures. It does this based on message traffic, i.e., if no message is received from some replica in a given interval of time, its failure is suspected. <p> The MT message, which is 12 bytes long, is schematically depicted in Figure 3. Here, mode indicates the type of the mem bership message and p addr indicates the address of the replica. As described in <ref> [11] </ref>, there are five types of membership messages: &lt;P is down&gt;, &lt;P is up&gt;, &lt;Ack, P is down&gt;, &lt;Nack, P is down&gt; and &lt;Ack, P is up&gt;.
Reference: [12] <author> N. C. Hutchinson and L. L. Peterson, </author> <title> The x-kernel: An architecture for implementing network protocols, </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> vol. 17, </volume> <pages> pp. 64-76, </pages> <month> Jan </month> <year> 1991. </year>
Reference-contexts: Further details on all of these protocols can be found in [1]. 3 Implementation Modularity Consul is made up of approximately 10,000 lines of C code, of which 3,500 is Psync. Its implementation platform is the x-kernel, an operating system kernel designed explicitly for experimenting with communication protocols <ref> [12] </ref>. The version of the x-kernel currently being used executes standalone on Sun-3 workstations, with a port to a version running on the Mach microkernel in progress. <p> Here, we first give an operational overview of the x-kernel derived from <ref> [12] </ref> and then describe how it has been used to construct a modular implementation of Consul. 3.1 Overview of the x-kernel The x-kernel is an operating system kernel explicitly designed to support the rapid implementation of efficient network protocols by providing a uniform protocol interface and an implementation support library.
Reference: [13] <author> S. Ahuja, N. Carriero, and D. Gelernter, </author> <title> Linda and friends, </title> <journal> IEEE Computer, </journal> <volume> vol. 19, </volume> <pages> pp. 26-34, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: Two small prototype applications have been constructed, a replicated directory object and a replicated word search game; following the completion of the Mach port, Consul will also be used to implement a replicated tuple space for a fault-tolerant version of the Linda coordination language <ref> [13] </ref>.
Reference: [14] <author> N. C. Hutchinson, L. L. Peterson, S. O'Malley, and M. Ab-bott, </author> <title> RPC in the x-kernel: Evaluating new design techniques, </title> <booktitle> in Proc. 12th ACM Symp. on Op. Systems Principles, </booktitle> <address> (Litchfield Park, AZ), </address> <pages> pp. 91-101, </pages> <month> Dec </month> <year> 1989. </year>
Reference-contexts: Moreover, the implementation retains this modularity by using the configuration and communication support provided by the x-kernel. Our experience, both with Consul directly [1] and with other systems built using the x-kernel model <ref> [14, 15] </ref>, is that this modularization comes with little or no performance penalty. Despite our positive experience with modularization in this context, there were, in fact, a number of difficulties that made the process less straightforward than it might appear. Many of these were caused by indirect dependencies between protocols.
Reference: [15] <author> S. W. O'Malley and L. L. Peterson, </author> <title> A dynamic network architecture, </title> <journal> ACM Trans. Computer Systems, </journal> <volume> vol. 10, </volume> <pages> pp. 110-143, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: Moreover, the implementation retains this modularity by using the configuration and communication support provided by the x-kernel. Our experience, both with Consul directly [1] and with other systems built using the x-kernel model <ref> [14, 15] </ref>, is that this modularization comes with little or no performance penalty. Despite our positive experience with modularization in this context, there were, in fact, a number of difficulties that made the process less straightforward than it might appear. Many of these were caused by indirect dependencies between protocols.
Reference: [16] <author> M. Hiltunen and R. D. Schlichting, </author> <title> Modularizing fault-tolerant protocols, </title> <booktitle> in Proc. Fifth SIGOPS European Workshop, </booktitle> <address> (Le Mont Saint-Michel, France), </address> <month> Sept </month> <year> 1992. </year>
Reference-contexts: Our current research in this area is concentrating on identifying and characterizing the dependencies that exist between protocols used for building fault-tolerant distributed systems. As part of this effort, we are also working on developing a new model for this type of protocol that we hope will facilitate modularization <ref> [16] </ref>. This new model is based on further refining protocols into their orthogonal properties and then realizing these properties within a standard software framework. Acknowledgments This work has been supported in part by NSF Grant CCR-9003161, ONR Grant N00014-91J-1015, and DARPA Contract DABT63-91-0030.
References-found: 16

