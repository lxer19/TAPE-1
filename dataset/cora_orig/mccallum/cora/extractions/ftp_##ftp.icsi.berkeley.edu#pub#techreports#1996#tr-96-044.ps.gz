URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1996/tr-96-044.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1996.html
Root-URL: http://www.icsi.berkeley.edu
Title: MMM: A WWW-Based Method Management System for Using Software Modules Remotely  
Author: Oliver Gunther Rudolf Muller Peter Schmidt Hemant Bhargava Ramayya Krishnan 
Note: MMM, a prototype implementation.  
Abstract: The World Wide Web has been highly successful as a tool for the distributed publishing and sharing of online documents among large dispersed groups. This raises the question whether the distributed authoring and execution of software modules can be supported in a similar manner. We study this problem by first developing the requirements of a group of developers and users of statistical software at a German national research laboratory. We then propose an information system design that meets these requirements and report on 
Abstract-found: 1
Intro-found: 1
Reference: [BCL + 94] <author> T. Berners-Lee, R. Cailliau, A. Luotonen, H.F. Nielsen, and A. </author> <title> Secret. The WorldWide Web. </title> <journal> Communications of the ACM, </journal> <volume> 37(8) </volume> <pages> 76-82, </pages> <year> 1994. </year>
Reference-contexts: 1 Introduction The World Wide Web (WWW) <ref> [BCL + 94] </ref>, a distributed hypermedia information system on the Internet, demonstrates successfully how current technology can support the sharing of information among large dispersed groups.
Reference: [Bec96] <author> P. Becker. </author> <title> An embeddable and extendable language for large-scale programming on the Internet. </title> <booktitle> In Proceedings of the 16th International Conference on Distributed Computing Systems (ICDCS'96), </booktitle> <year> 1996. </year>
Reference-contexts: However, we expect that parts of the MMM functionality that are currently implemented in Ypsilon can soon be replaced by ORB implementations following standards like CORBA or COM/OLE. Another enhanced system for Internet access to software modules has recently been presented by Becker <ref> [Bec96] </ref>. Other than MMM, however, the system follows a functional design. Values are filtered through stateless services that encapsulate solvers for combinatorial optimization algorithms. The system lets a user state computational plans in the system's own scripting language.
Reference: [Ber96] <author> P. Bernstein. </author> <title> Middleware: A model for distributed system services. </title> <journal> Communications of the ACM, </journal> <volume> 39(2) </volume> <pages> 86-98, </pages> <year> 1996. </year>
Reference-contexts: The resulting system, called MMM (Method ManageMent system), is a collection of mid-dleware services <ref> [Ber96] </ref> that facilitate WWW-based interaction between software users and developers. While statistical computing has been our main application focus so far, the basic technologies presented in this paper apply to the distributed authoring and utilization of software modules in general. The rest of the paper is organized as follows. <p> Services thus have a local, dynamic repository of their interface. In the case of services for executing software modules, the rules for updating this repository are mostly provided by the software authors. The MMM broker can be considered as a middleware between user agent and services <ref> [Ber96] </ref>. Like an object request broker (ORB), it provides transparent access to a distributed system of services. It maintains a dynamic collection of interfaces to these services, consisting of the set of acceptable messages for each service. <p> As discussed above, there is considerable overlap between the MMM concepts and middleware architectures, in particular object request brokers <ref> [Ber96] </ref>. While these technologies tend to be strong in providing reliable services in distributed computing (e.g., by enforcing transaction management), they do not emphasize support for publishing as much as MMM does. Interface definition languages support only imperative, object-oriented languages (e.g. C ++).
Reference: [BKC + 96] <author> H.K. Bhargava, R. Krishnan, M. Casey, D. Kaplan, S. Roehrig, and R. Muller. </author> <title> Model management in electronic markets for decision technologies: A software agent approach. </title> <type> SFB Discussion Paper, </type> <institution> Sonderforschungsbereich 373, Humboldt-Universitat zu Berlin, </institution> <year> 1996. </year>
Reference-contexts: We believe that the results of the MMM project could guide the creation of a new generation of electronic markets for scientific software, as they are currently investigated for decision support technologies <ref> [BKM95a, BKC + 96] </ref>. Rather than buying expensive licenses for REFERENCES 18 comprehensive software environments, consumers will be able to use software modules installed on some other computer in the Internet, paying just a relatively small usage fee.
Reference: [BKM95a] <author> H.K. Bhargava, A.S. King, and D.S. McQuay. DecisionNet: </author> <title> An architecture for modeling and decision support over the World Wide Web. </title> <editor> In T. X. Bui, editor, </editor> <booktitle> Proceedings of the Third International Society for Decision Support Systems Conference, </booktitle> <volume> Vol. II, </volume> <pages> pages 541-550, </pages> <address> Hong Kong, </address> <year> 1995. </year> <booktitle> International Society for DSS. </booktitle>
Reference-contexts: We believe that the results of the MMM project could guide the creation of a new generation of electronic markets for scientific software, as they are currently investigated for decision support technologies <ref> [BKM95a, BKC + 96] </ref>. Rather than buying expensive licenses for REFERENCES 18 comprehensive software environments, consumers will be able to use software modules installed on some other computer in the Internet, paying just a relatively small usage fee.
Reference: [BKM95b] <author> H.K. Bhargava, R. Krishnan, and R. Muller. </author> <title> On parameterized transaction models for agents in electronic markets for decision technologies. </title> <editor> In S. Ram and M. Jarke, editors, </editor> <booktitle> Proceedings of the Fifth Workshop on Information Technologies and Systems, </booktitle> <address> Amsterdam, Holland, </address> <month> December </month> <year> 1995, 1995. </year> <note> REFERENCES 19 </note>
Reference-contexts: Semantic correctness is a more complex issue, especially because interactions with a module are often only feasible in a specific order. While not yet supported by our execution services, parameterized transaction models would allow such more complex interface definitions <ref> [BKM95b] </ref>. At this point, however, checking in a new software module is still a complex process that requires a certain familiarity with the system. Interoperability: This requirement is met by the data translation services and by the fact that we require each module to have a functional interface. <p> MMM services implement all types of services discussed in Section 3. Each service accepts a set of message models, where different messages initiate different operations at the service. These operations may change the state of the service, which defines in turn which messages are acceptable next <ref> [BKM95b] </ref>. For example, at the beginning of each interaction with a service, an authentication operation has to be performed. Only after valid authentication, other messages become acceptable, such as a request for meta-information, or an execution request to the method base. <p> The function that relates state to messages that start the execution of a module is therefore not hard-coded but parameterized by the signature of the function. This is a simple example for parameterized transaction models for agents in electronic markets <ref> [BKM95b] </ref>. In summary, our services implement the concept of acceptable messages in the sense that a service has explicit knowledge about which messages it may accept next. Services thus have a local, dynamic repository of their interface.
Reference: [BKM96a] <author> H.K. Bhargava, R. Krishnan, and R. Muller. </author> <title> Decision support on demand: Emerging electronic markets for decision technologies. Decision Support Systems, </title> <note> 1996. to appear. </note>
Reference-contexts: Values are filtered through stateless services that encapsulate solvers for combinatorial optimization algorithms. The system lets a user state computational plans in the system's own scripting language. From the electronic commerce point of view, Bhargava et al. have surveyed emerging electronic markets for accessing software modules <ref> [BKM96a] </ref> and investigated business transactions [BKM96b]. We believe that the results of the MMM project could guide the creation of a new generation of electronic markets for scientific software, as they are currently investigated for decision support technologies [BKM95a, BKC + 96].
Reference: [BKM96b] <author> H.K. Bhargava, R. Krishnan, and R. Muller. </author> <title> Electronic commerce in decision technologies: A business cycle analysis. </title> <type> SFB Discussion Paper, </type> <institution> Sonderforschungsbereich 373, Humboldt-Universitat zu Berlin, </institution> <year> 1996. </year>
Reference-contexts: The system lets a user state computational plans in the system's own scripting language. From the electronic commerce point of view, Bhargava et al. have surveyed emerging electronic markets for accessing software modules [BKM96a] and investigated business transactions <ref> [BKM96b] </ref>. We believe that the results of the MMM project could guide the creation of a new generation of electronic markets for scientific software, as they are currently investigated for decision support technologies [BKM95a, BKC + 96].
Reference: [Bol86] <author> T. P. Bollerslev. </author> <title> Generalized autoregressive conditional heteroscedasticity. </title> <journal> Journal of Econometrics, </journal> <volume> 31 </volume> <pages> 307-327, </pages> <year> 1986. </year>
Reference-contexts: This estimation uses the Matlab implementation of a function that estimates a feed-forward neural network using Levenberg-Marquardt Approximation [LT96]. Fig. 2 lists parts of the Matlab script. 3. Based on the result of the last computation, perform an analysis of the conditional second moments using GARCH models <ref> [Bol86] </ref>. An XploRe macro is available to perform this computation (Fig. 3). What kind of computing infrastructure does all this require? On the one hand, the three software modules shown in Fig. 1-3 have to be executable on some set of networked computers.
Reference: [HKT95] <editor> W. Hardle, S. Klinke, and B. A. Turlach, editors. XploRe: </editor> <title> An interactive statistical computing environment. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1995. </year>
Reference-contexts: Statistical methods are implemented using either specialized scientific computing software, such as Gauss, Mathematica, Matlab, SAS, S Plus, and SPSS, or software developed in-house at the center, such as XploRe <ref> [HKT95] </ref>. In reflection of the corresponding programming paradigm, the software modules are often referred to as scripts.
Reference: [HS92] <author> M. Holocher and D. Solte. </author> <title> AMBAS an adaptive method base shell. </title> <editor> In J. C. Petrie Jr., editor, </editor> <title> Enterprise Integration Modeling, </title> <booktitle> Proc. </booktitle> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: The original focus of Ypsilon was the implementation of algorithm libraries for project scheduling 4 THE IMPLEMENTATION OF MMM 13 [MS95]. Its design was influenced by the ASCEND modeling language [Pie89, KMP93] and by the adaptive method base shell AMBAS <ref> [HS92] </ref>.
Reference: [JB95] <author> M. Jeusfeld and T. X. Bui. </author> <title> Interoperable decision support system components on the Internet. </title> <editor> In S. Ram and M. Jarke, editors, </editor> <booktitle> Proceedings of the Fifth Workshop on Information Technologies and Systems, </booktitle> <address> Amsterdam, Holland, </address> <month> December </month> <year> 1995, </year> <pages> pages 56-67. </pages> <institution> RWTH Aachen, Fachgruppe Informatik, </institution> <year> 1995. </year>
Reference-contexts: If the same channel is used to send messages of different types, i.e., instances of different Ypsilon classes, the type information defines the type of the message. This enables the implementation of generic communication services. Jeusfeld and Bui <ref> [JB95] </ref> have proposed a similar type of data representation as a basis for interoperable decision support system components on the Internet. 4 THE IMPLEMENTATION OF MMM 14 4.1.3 Standardized Encapsulation of Services A function model is a special kind of Ypsilon model that encapsulates an (external) function as a C++ class.
Reference: [KMP93] <author> R. Krishnan, R. Muller, and P. Piela. </author> <title> Modeling project scheduling models in ASCEND. </title> <type> Working paper, </type> <institution> Carnegie Mellon University, </institution> <year> 1993. </year>
Reference-contexts: It provides an infrastructure to encapsulate services into objects implemented in C++. The original focus of Ypsilon was the implementation of algorithm libraries for project scheduling 4 THE IMPLEMENTATION OF MMM 13 [MS95]. Its design was influenced by the ASCEND modeling language <ref> [Pie89, KMP93] </ref> and by the adaptive method base shell AMBAS [HS92].
Reference: [LT96] <author> H. Lutkepohl and R. Tschernig. </author> <title> Nichtparametrische Verfahren zur Analyse und Prog-nose von Finanzmarktdaten. </title> <editor> In G. Bol, G. Nakhaeizadeh, and K.-H. Vollmer, editors, </editor> <publisher> Finanzmarktanalyse und -prognose mit innovativen quantitativen Verfahren. Physica-Verlag, </publisher> <address> Heidelberg, </address> <year> 1996. </year>
Reference-contexts: Compute the time series of estimated residuals of the time series of the Deutsche Bank returns. This estimation uses the Matlab implementation of a function that estimates a feed-forward neural network using Levenberg-Marquardt Approximation <ref> [LT96] </ref>. Fig. 2 lists parts of the Matlab script. 3. Based on the result of the last computation, perform an analysis of the conditional second moments using GARCH models [Bol86]. An XploRe macro is available to perform this computation (Fig. 3).
Reference: [McC94] <author> Rob McCool. </author> <title> The Common Gateway Interface. </title> <note> http://hoohoo.ncsa.uiuc.edu/cgi/overview.html, 1994. </note>
Reference-contexts: They concern the question of distributed management of software modules in general. A brief comparison with related approaches confirms that MMM offers some functionalities that are not available elsewhere. The first milestone towards enabling access to computational services on the Web was the Common Gateway Interface (CGI) <ref> [McC94] </ref>. CGI defines a standard of passing data from a Web browser to an application program. While thousands of CGI applications are now available on the Web (including many with scientific software), each of them represents a singular solution.
Reference: [MM94] <author> D. Moller and R. Muller. </author> <title> A concept for the representation of data and algorithms. </title> <editor> In N. Dean and G. Shannon, editors, </editor> <booktitle> Computational Support for Discrete Mathematics, DIMACS Workshop March 12-14, 1992. AMS, </booktitle> <year> 1994. </year>
Reference-contexts: We use this scenario to motivate the requirements for a distributed information system that supports collaboration and resource sharing in similar environments. In Sections 3 and 4, respectively, we describe the design and realization of MMM. This includes a brief overview of the Ypsilon software development environment <ref> [MM94] </ref>, which we based our implementation on. Section 5 surveys some related work and gives an outlook on future research. 2 Collaborative Statistical Computing 2.1 Background The German National Research Center SFB 373 conducts research on the development, adaption, and application of statistical methods for empirical economics. <p> Finally, we describe the implementation of the agents and their communication protocol. For a more detailed description of Ypsilon we refer the reader to <ref> [MM94] </ref>. 4.1 The Software Development Environment: Ypsilon Ypsilon was developed as a toolbox for model-based software development and rapid prototyping. It provides an infrastructure to encapsulate services into objects implemented in C++.
Reference: [MS95] <author> R. Muller and D. Solte. </author> <title> How to make OR results available: a proposal for project scheduling. </title> <editor> In W. Gaul, F. J. Radermacher, and D. Solte, editors, </editor> <title> Data, Expert Knowledge and Decisions, </title> <journal> volume 55 of Annals of Operations Research, </journal> <pages> pages 439 - 452. </pages> <publisher> J.C. Baltzer Science Publishers, </publisher> <year> 1995. </year>
Reference-contexts: It provides an infrastructure to encapsulate services into objects implemented in C++. The original focus of Ypsilon was the implementation of algorithm libraries for project scheduling 4 THE IMPLEMENTATION OF MMM 13 <ref> [MS95] </ref>. Its design was influenced by the ASCEND modeling language [Pie89, KMP93] and by the adaptive method base shell AMBAS [HS92].
Reference: [OHE96] <author> R. Orfali, D. Harkey, and J. Edwards. </author> <title> The Essential Distributed Objects Survival Guide. </title> <publisher> John Wiley & Sons, Inc., </publisher> <address> New York, </address> <year> 1996. </year>
Reference-contexts: Interface definition languages support only imperative, object-oriented languages (e.g. C ++). So it may be a while before the intergalactic object bus <ref> [OHE96] </ref> will stop at our type of statistical computing services. However, we expect that parts of the MMM functionality that are currently implemented in Ypsilon can soon be replaced by ORB implementations following standards like CORBA or COM/OLE.
Reference: [Pie89] <author> P. Piela. </author> <title> ASCEND, An Object Oriented Computer Environment for Modeling and Analysis. </title> <type> PhD thesis, </type> <institution> Department of Chemical Engineering, Carnegie Mellon University, Pittsburgh, </institution> <year> 1989. </year> <note> REFERENCES 20 </note>
Reference-contexts: It provides an infrastructure to encapsulate services into objects implemented in C++. The original focus of Ypsilon was the implementation of algorithm libraries for project scheduling 4 THE IMPLEMENTATION OF MMM 13 [MS95]. Its design was influenced by the ASCEND modeling language <ref> [Pie89, KMP93] </ref> and by the adaptive method base shell AMBAS [HS92].
Reference: [Sch94] <author> D. C. Schmidt. </author> <title> The ADAPTIVE Communication Environment: Object-Oriented Network Programming Components for Developing Client/Server Applications. </title> <booktitle> In Proceedings of the 12 th Annual Sun Users Group Conference, </booktitle> <pages> pages 214-225, </pages> <address> San Fran-cisco, CA, </address> <month> June </month> <year> 1994. </year> <month> SUG. </month>
Reference-contexts: They implement the protocol layer of MMM by using functionalities of the ACE library <ref> [Sch94] </ref>, which contains C++ wrapper classes for interprocess communication. The ACE library runs on a broad variety of operating systems. MmmFClient is a function model that encapsulates the communication with servers via Internet stream sockets. As a function model, it contains the fields input and output, both of type GCData.
Reference: [SKKH96] <author> S. Schmelzer, T. Kotter, S. Klinke, and W. Hardle. </author> <title> A new generation of a statistical computing environment on the net. </title> <editor> In A. Prat, editor, </editor> <booktitle> Proceedings in Computational Statistics: 12th COMPSTAT Symposium held in Barcelona, </booktitle> <address> Spain, </address> <year> 1996, </year> <pages> pages 135-148. </pages> <publisher> Physica-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: At this point, real-valued vectors and matrices are the most common data types by far. Alphanumeric data (e.g. for representing names or dates of observations) as well as complex types (such as records) are only gradually becoming more popular <ref> [SKKH96] </ref>. Data sets are usually represented and exchanged as formatted ASCII strings. Formatting details, such as separators or use of parentheses, vary between systems. Database services maintain data sets for the users of the system.
Reference: [SUN95] <institution> SUN Microsystems Inc. JAVA Home Page. </institution> <note> http://java.sun.com, 1995. </note>
Reference-contexts: While thousands of CGI applications are now available on the Web (including many with scientific software), each of them represents a singular solution. There is no support to connect several such services into a pipeline, as is required, for example, in the case study presented above. Java applets <ref> [SUN95] </ref> also lack comfortable support for this kind of interoperability. Due to security considerations, browsers prevent Java applets that were downloaded from some site A to download other applets from some other site B.
Reference: [TLPH95] <author> W. Tichy, P. Lukowicz, L. Prechelt, and E. A. Heinz. </author> <title> Experimental evaluation in computer science: A quantitative study. </title> <journal> Journal of Systems and Software, </journal> <volume> 28(1) </volume> <pages> 9-18, </pages> <year> 1995. </year>
Reference-contexts: We also believe that technologies like MMM will have a major impact on the verification and benchmarking of software, both in practice and in research. At this point, only a small percentage of all experiments published in the computer science literature are ever verified <ref> [TLPH95] </ref>. Once every published paper includes a URL (Uniform Resource Locator), i.e., an Internet address that points to an implementation, other people will be able to test the experimental results with their own data via the Web. This would substantially increase transparency and credibility of our discipline as a whole.
References-found: 23

