URL: ftp://ftp.cs.brown.edu/pub/techreports/93/cs93-13.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-93-13.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> R. Barbuti, R. Giacobazzi, and G. Levi. </author> <title> A General Framework for Semantics-based Bottom-up Abstract Interpretation of Logic Programs. </title> <note> (To appear in ACM Transactions on Programming Languages and Systems). </note>
Reference: [2] <author> P. Bigot, S. Debray, and K. Marriott. </author> <title> Understanding Finiteness Analysis Using Abstract Interpretation. </title> <booktitle> In Proceedings of the International Joint Conference and Symposium on Logic Programming (JICSLP-92), </booktitle> <address> Washington, DC, </address> <month> November </month> <year> 1992. </year>
Reference: [3] <author> A. Bossi, M. Gabbrielli, G Levi, and M-C. Meo. </author> <title> Contribution to the Semantics of Open Logic Programs. </title> <booktitle> In Proc. of Int. Conf. on Fifth Generation Computer Systems, </booktitle> <address> Tokyo, </address> <month> June </month> <year> 1992. </year>
Reference: [4] <author> M. Bruynooghe. </author> <title> A Practical Framework for the Abstract Interpretation of Logic Programs. </title> <journal> Journal of Logic Programming, </journal> <volume> 10 </volume> <pages> 91-124, </pages> <year> 1991. </year>
Reference: [5] <author> M. Codish, M. Falaschi, and K. Marriott. </author> <title> Suspension Analysis for Concurrent Logic Programs. </title> <booktitle> In Eighth International Conference on Logic Programming (ICLP-91), </booktitle> <address> Paris (France), </address> <month> June </month> <year> 1991. </year>
Reference: [6] <author> M. Codish, A. Mulkers, M. Bruynooghe, M. Garcia de la Banda, and M. Hermenegildo. </author> <title> Improving Abstract Interpretations by Combining Domains. </title> <booktitle> In Proceedings of the ACM Symposium on Partial Evaluation and Semantics-Based Program Manipulation (PEPM93), </booktitle> <address> Copenhagen, Denmark, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: It is based on the notions of queries and open operations, i.e. operations which are parametrized by tests providing information not necessarily maintained in the domain. The consistency of the open product has been charactized formally and we have shown how the idea of refinements, developed independently by <ref> [6] </ref>, is naturally formalized in this framework. The two contributions have been implemented in a system modelled along the theory and organized in a number of abstract data types.
Reference: [7] <author> P. Codognet and G. </author> <title> File. Computations, Abstractions and Constraints in Logic Programs. </title> <booktitle> In Proceedings of the Fourth International Conference on Programming Languages (ICCL'92), </booktitle> <address> Oakland, CA, </address> <month> April </month> <year> 1992. </year>
Reference: [8] <author> A. Cortesi and G. </author> <title> File. Abstract Interpretation of Logic Programs: an Abstract Domain for Groundness, Sharing, Freeness, and Compoundness Analysis. </title> <booktitle> In Proc. </booktitle> <editor> ACM-PEPM'91, P. Hudak and N. Jones (eds.), </editor> <booktitle> SIGPLAN NOTICES vol.26, </booktitle> <address> n.11, </address> <year> 1991, 1991. </year>
Reference: [9] <author> A. Cortesi, G. File, and W. Winsborough. </author> <title> Prop revisited: Propositional formulas as abstract domain for groundness analysis. </title> <booktitle> In Proc. Sixth Annual IEEE Symposium on Logic in Computer Science (LICS'91), </booktitle> <pages> pages 322-327, </pages> <year> 1991. </year>
Reference: [10] <author> A. Cortesi, G. File, and W. Winsborough. </author> <title> Comparison of Abstract Interpretations. </title> <booktitle> In Proc. 19th International; Colloquium on Automata, Languages and Programming (ICALP'92), </booktitle> <year> 1992. </year> <month> 54 </month>
Reference: [11] <author> P Cousot and R. Cousot. </author> <title> Abstract Interpretation: A Unified Lattice Model for Static Analysis of Programs by Construction or Approximation of Fixpoints. </title> <booktitle> In Conf. Record of Fourth ACM Symposium on Programming Languages (POPL'77), </booktitle> <pages> pages 238-252, </pages> <address> Los Angeles, CA, </address> <year> 1977. </year>
Reference: [12] <author> P Cousot and R. Cousot. </author> <title> Systematic Design of Program Analysis Frameworks. </title> <booktitle> In Conf. Record of Sixth ACM Symposium on Programming Languages (POPL'79), </booktitle> <pages> pages 269-282, </pages> <address> San Antonio, Tx, </address> <year> 1979. </year>
Reference: [13] <author> P. Cousot and R. Cousot. </author> <title> Abstract Interpretation and Application to Logic Programs. </title> <journal> Journal of Logic Programming, </journal> <pages> 13(2-3), </pages> <year> 1992. </year>
Reference: [14] <author> S. Debray. </author> <title> On the complexity of dataflow analysis of logic programs. </title> <booktitle> In Proc. 19th ICALP, </booktitle> <address> Vienna, Austria, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: This granularity is appropriate for multiple specializations [41]. A finer granularity would be obtained by using the algorithms presented in <ref> [14, 39, 18] </ref>. 5.1.3 The Implementation The above theoretical ideas have been integrated in a system organized around a number of abstract data types (ADT): * an ADT for the pattern domain; * an ADT for the &lt;-domain; * an ADT for each of the open domains.
Reference: [15] <author> S. Debray and P. Mishra. </author> <title> Denotational and operational semantics for prolog. </title> <journal> Journal of Logic Programming, </journal> <volume> 5(1) </volume> <pages> 61-91, </pages> <year> 1988. </year>
Reference: [16] <author> A. Deutsch. </author> <title> A Storeless Model of Aliasing and its Abstraction Using Finite Representations of Right-Regular Equivalence Relations. </title> <booktitle> In Fourth IEEE International Conference on Computer Languages (ICCL'92), </booktitle> <address> San Francisco, CA, </address> <month> April </month> <year> 1992. </year>
Reference-contexts: The times of the analyses with Pat (Prop) are reasonable, yet they are substantially slower (about 22 times) than Prop. This indicates clearly a tradeoff between efficiency and accuracy in this case. For completeness, we also consider the use of Pat (Prop) for online analysis (see <ref> [16] </ref> for a definition of on-line analysis and a comparison with usual global analysis approaches) where a general analysis of some components is performed once and specialized for the input patterns encountered during subsequent analysis.
Reference: [17] <author> M. Dincbas, H. Simonis, and P. Van Hentenryck. </author> <title> Solving Large Combinatorial Problems in Logic Programming. </title> <journal> Journal of Logic Programming, </journal> <volume> 8(1-2):75-93, </volume> <year> 1990. </year>
Reference-contexts: The program uses, in various ways, the nondeterminism of Prolog. We use two versions of the program; one of them (i.e. 42 cs1) assumes that the data are ground while the other one (i.e. cs) assumes that the data are ground lists. The program disj is taken from <ref> [17] </ref> and is the generate and test equivalent of a constraint program used to solve a disjunctive scheduling problem. This is also a program using the nondeterminism of Prolog. Once again, we use two versions of the program with the same distinction as for the cutting stock example.
Reference: [18] <author> N. Heintze and J. Jaffar. </author> <title> An Engine for Logic Program Analysis. </title> <booktitle> In IEEE 7th Annual Symposium on Logic in Computer Science, </booktitle> <year> 1992. </year>
Reference-contexts: This granularity is appropriate for multiple specializations [41]. A finer granularity would be obtained by using the algorithms presented in <ref> [14, 39, 18] </ref>. 5.1.3 The Implementation The above theoretical ideas have been integrated in a system organized around a number of abstract data types (ADT): * an ADT for the pattern domain; * an ADT for the &lt;-domain; * an ADT for each of the open domains.
Reference: [19] <author> M. Hermenegildo and K. Muthukumar. </author> <title> Combined determination of sharing and freeness of program variables through abstract interpretation. </title> <booktitle> In Eighth International Conference on Logic Programming (ICLP-91), </booktitle> <address> Paris (France), </address> <month> June </month> <year> 1991. </year>
Reference: [20] <author> M. Hermenegildo, R. Warren, and S. Debray. </author> <title> Global Flow Analysis as a Practical Compilation Tool. </title> <journal> Journal of Logic Programming, </journal> <volume> 13(4) </volume> <pages> 349-367, </pages> <year> 1992. </year>
Reference-contexts: The gain produced by structural information has also been measured by several authors (e.g. <ref> [20, 26] </ref>). We will not repeat those results here. Rather we show that even for very accurate domains such as Prop, preserving structural information improves accuracy on practical programs.
Reference: [21] <author> D. Jacobs and A. Langen. </author> <title> Accurate and Efficient Approximation of Variable Aliasing in Logic Programs. </title> <booktitle> In Proceedings of the North-American Conference on Logic Programming (NACLP-89), </booktitle> <address> Cleveland, Ohio, </address> <month> October </month> <year> 1989. </year>
Reference: [22] <author> N.D. Jones and H. Sondergaard. </author> <title> A Semantics-Based Framework for the Abstract Interpretation of Prolog, </title> <address> pages 123-142. </address> <publisher> Ellis Horwood, </publisher> <year> 1987. </year>
Reference: [23] <author> B. Le Charlier, K. Musumbu, and P. Van Hentenryck. </author> <title> A Generic Abstract Interpretation Algorithm and Its Complexity Analysis (Extended Abstract). </title> <booktitle> In Eighth International Conference on Logic Programming (ICLP-91), </booktitle> <address> Paris (France), </address> <month> June </month> <year> 1991. </year>
Reference: [24] <author> B. Le Charlier and P. Van Hentenryck. </author> <title> Experimental Evaluation of a Generic Abstract Interpretation Algorithm for Prolog. </title> <journal> ACM Transactions on Programming Languages and Systems. </journal> <note> To appear. An extended abstract appeared in the Proceedings of Fourth IEEE International Conference on Computer Languages (ICCL'92), </note> <institution> San Francisco, </institution> <address> CA, </address> <month> April </month> <year> 1992. </year> <month> 55 </month>
Reference-contexts: We also use the traditional concatenation and quicksort programs, say append (with input modes (var,var,ground)) and qsort (difference lists). 5.1.2 The Fixpoint Algorithm As mentioned previously, our contributions are independent from the fixpoint algorithm used for the analysis. The experimental results described here make use of the algorithm GAIA <ref> [24] </ref> which associates with each predicate p in the program a set of tuples (fi in ; p; fi out ) where fi in and fi out represent respectively the input and abstract substitutions. This granularity is appropriate for multiple specializations [41]. <p> 1.28 read 10.95 209 938 11.04 200 861 1.01 0.96 0.92 Mean 1.50 1.26 1.27 Table 17: The Importance of Open Structural Operations: Efficiency Results 5.7 On the Overhead of The Approach In this section, we study the overhead of our approach compared to a direct implementation of our domain <ref> [24] </ref>. <p> In the following we use C to denote OPAT (OPropOModeOPS) and S to denote OPAT (OModeOPS). The improvements occur only in programs using difference lists or structures, i.e. press, peep, and qsort, since the accuracy of OPAT (OModeOPS) is optimal or close to optimal on all other programs <ref> [24] </ref>. The efficiency results indicate that C is about 5.6 slower than S. This time can certainly be reduced by caching the queries to OProp, since the groundness queries in OProp are rather time-consuming.
Reference: [25] <author> B. Le Charlier and P. Van Hentenryck. </author> <title> A Universal Top-Down Fixpoint Algorithm. </title> <type> Technical Report CS-92-25, </type> <institution> CS Department, Brown University, </institution> <year> 1992. </year>
Reference: [26] <author> B. Le Charlier and P. Van Hentenryck. </author> <title> Reexecution in Abstract Interpretation of Prolog. </title> <booktitle> In Proceedings of the International Joint Conference and Symposium on Logic Programming (JICSLP-92), </booktitle> <address> Washington, DC, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: The gain produced by structural information has also been measured by several authors (e.g. <ref> [20, 26] </ref>). We will not repeat those results here. Rather we show that even for very accurate domains such as Prop, preserving structural information improves accuracy on practical programs.
Reference: [27] <author> B. Le Charlier and P. Van Hentenryck. </author> <title> Groundness Analysis for Prolog: Implementation and Evaluation of the Domain Prop. </title> <booktitle> In Proceedings of the ACM Symposium on Partial Evaluation and Semantics-Based Program Manipulation (PEPM93), </booktitle> <address> Copenhagen, Denmark, </address> <month> June </month> <year> 1993. </year>
Reference: [28] <author> K. Marriott and H. Sondergaard. </author> <title> Bottom-up Abstract Interpretation of Logic Programs. </title> <booktitle> In Proc. Fifth International Conference on Logic Programming, </booktitle> <pages> pages 733-748, </pages> <address> Seattle, WA, </address> <month> August </month> <year> 1988. </year>
Reference: [29] <author> K. Marriott and H. Sondergaard. </author> <title> Notes for a Tutorial on Abstract Interpretation of Logic Programs. </title> <booktitle> North American Conference on Logic Programming, </booktitle> <address> Cleveland, Ohio, </address> <year> 1989. </year>
Reference: [30] <author> K. Marriott and H. Sondergaard. </author> <title> Semantics-based Dataflow Analysis of Logic Programs. </title> <booktitle> In Information Processing-89, </booktitle> <pages> pages 601-606, </pages> <address> San Francisco, CA, </address> <year> 1989. </year>
Reference: [31] <author> C. Mellish. </author> <title> The Automatic Generation of Mode Declarations for Prolog Programs. </title> <type> Technical Report DAI Report 163, </type> <institution> Department of Artificial Intelligence, University of Edinburgh, </institution> <year> 1981. </year>
Reference: [32] <author> A. Mulkers, W. Winsborough, and M. Bruynooghe. </author> <title> Analysis of Shared Data Structures for Compile-Time Garbage Collection in Logic Programs. </title> <booktitle> In Seventh International Conference on Logic Programming (ICLP-90), </booktitle> <address> Jerusalem, Israel, </address> <month> June </month> <year> 1990. </year>
Reference: [33] <author> K. Musumbu. </author> <title> Interpretation Abstraite de Programmes Prolog. </title> <type> PhD thesis, </type> <institution> University of Namur (Belgium), </institution> <month> September </month> <year> 1990. </year>
Reference: [34] <author> K. Muthukumar and M. Hermenegildo. </author> <title> Determination of Variable Dependence Information Through Abstract Interpretation. </title> <booktitle> In Proceedings of the North American Conference on Logic Programming (NACLP-89), </booktitle> <address> Cleveland, Ohio, </address> <month> October </month> <year> 1989. </year>
Reference: [35] <author> U. Nilsson. </author> <title> Systematic Semantic Approximations of Logic Programs. </title> <booktitle> In Proceedings of PLILP 90, </booktitle> <pages> pages 293-306, </pages> <address> Linkoping, Sweeden, </address> <month> August </month> <year> 1990. </year>
Reference: [36] <author> H. Sondergaard. </author> <title> An Application of Abstract Interpretation of Logic Programs: Occur Check Reduction. </title> <booktitle> In Proc. of ESOP'86, </booktitle> <pages> pages 327-338, </pages> <address> Sarrbruecken (FRG), </address> <year> 1986. </year>
Reference: [37] <author> L. Sterling and E. Shapiro. </author> <title> The Art of Prolog: Advanced Programming Techniques. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Ma, </address> <year> 1986. </year>
Reference-contexts: The clauses containing assert and retract have been dropped in the one program containing them (i.e. Syntax error handling in the reader program). The program kalah is a program which plays the game of kalah. It is taken from <ref> [37] </ref> and implements an alpha-beta search procedure. The program press is an equation-solver program taken from [37] as well. We use two versions of this program, press1 and press2, the difference being that press2 has a procedure call repeated in the body of a procedure. <p> Syntax error handling in the reader program). The program kalah is a program which plays the game of kalah. It is taken from <ref> [37] </ref> and implements an alpha-beta search procedure. The program press is an equation-solver program taken from [37] as well. We use two versions of this program, press1 and press2, the difference being that press2 has a procedure call repeated in the body of a procedure. The program cs is a cutting-stock program taken from [38].
Reference: [38] <author> P. Van Hentenryck. </author> <title> Constraint Satisfaction in Logic Programming. Logic Programming Series, </title> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1989. </year>
Reference-contexts: The program press is an equation-solver program taken from [37] as well. We use two versions of this program, press1 and press2, the difference being that press2 has a procedure call repeated in the body of a procedure. The program cs is a cutting-stock program taken from <ref> [38] </ref>. It is a program used to generate a number of configurations representing various ways of cutting a wood board into small shelves. The program uses, in various ways, the nondeterminism of Prolog.
Reference: [39] <author> P. Van Hentenryck, O. Degimbe, B. Le Charlier, and L. Michel. </author> <title> Abstract Interpretation of Prolog Based on OLDT-Resolution. </title> <type> Technical Report No. </type> <institution> CS-93-05, CS Department, Brown University, </institution> <year> 1993. </year> <month> 56 </month>
Reference-contexts: This granularity is appropriate for multiple specializations [41]. A finer granularity would be obtained by using the algorithms presented in <ref> [14, 39, 18] </ref>. 5.1.3 The Implementation The above theoretical ideas have been integrated in a system organized around a number of abstract data types (ADT): * an ADT for the pattern domain; * an ADT for the &lt;-domain; * an ADT for each of the open domains.
Reference: [40] <author> P. Van Hentenryck, O. Degimbe, B. Le Charlier, and L. Michel. </author> <title> The impact of Granularity in Abstract Interpretation of Prolog. </title> <type> Technical report, </type> <institution> CS Department, Brown University, </institution> <year> 1993. </year> <month> Forthcoming. </month>
Reference: [41] <author> W. Winsborough. </author> <title> Multiple Specialization using Minimal-Function Graph Semantics. </title> <journal> Journal of Logic Programming, </journal> <volume> 13(4), </volume> <year> 1992. </year> <month> 57 </month>
Reference-contexts: This granularity is appropriate for multiple specializations <ref> [41] </ref>.
References-found: 41

