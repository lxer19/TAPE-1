URL: http://www.aber.ac.uk/~jjh/Java/patterns/patterns.ps
Refering-URL: http://www.aber.ac.uk/~jjh/Java/patterns/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Email: jjh@aber.ac.uk  
Phone: Tel: (01970) 625567  
Title: All you ever wanted to know about Patterns, but were afraid to ask!  
Author: John Hunt 
Web: http://www.aber.ac.uk/~jjh  
Address: Penglais, Aberystwyth, Ceredigion.  
Affiliation: Computer Science Department, University of Wales, Aberystwyth,  
Abstract: This paper provides an introduction to design patterns. Design patterns describe both the design of some thing as well as that thing. In the case of software, a design pattern often describes the software and how to use / apply that software in different situations. This paper attempts to present the motivation behind design patterns (often referred to as just patterns), what they are (and what they are not) and when they are useful. An example (coded in Java) is then included to illustrate the concept of a Pattern.
Abstract-found: 1
Intro-found: 1
Reference: [Alexander et al 1977] <author> C. Alexander, S. Ishikawa and M. Silverstein with M. Jacobson, I. Fiksdahl King and S. </author> <title> Angel, </title> <publisher> A Pattern Language , Oxford University Press, </publisher> <year> 1977. </year>
Reference-contexts: This paper attempts to provide these along with a brief consideration of the strengths and weaknesses of patterns. Historically, design patterns have their basis in the work of an architect who designed a language for encoding knowledge of the design and construction of buildings <ref> [Alexander et al 1977, Alexander 1979] </ref>. The knowledge is described in terms of patterns that capture both a recurring architectural arrangement and a rule for how and when to apply this knowledge. That is, they incorporate knowledge about the design as well as the basic design relations.
Reference: [Alexander 1979] <editor> C. Alexander, </editor> <publisher> The Timeless Way of Building , Oxford university Press, </publisher> <year> 1979. </year>
Reference-contexts: This paper attempts to provide these along with a brief consideration of the strengths and weaknesses of patterns. Historically, design patterns have their basis in the work of an architect who designed a language for encoding knowledge of the design and construction of buildings <ref> [Alexander et al 1977, Alexander 1979] </ref>. The knowledge is described in terms of patterns that capture both a recurring architectural arrangement and a rule for how and when to apply this knowledge. That is, they incorporate knowledge about the design as well as the basic design relations.
Reference: [Beck and Johnson 1994] <author> K. Beck and R. Johnson, </author> <title> Patterns Generate Architectures, </title> <booktitle> Proc. </booktitle> <pages> Eccop94 , pp. 139-149, </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The intention was thus to address many of the problems which reduce the reusability of software components and frameworks. 3. Design Patterns 3.1 What are design patterns? A design pattern captures expertise describing an architectural design to a recurring design problem in a particular context <ref> [Gamma et al 1993; Johnson 1992; Beck and Johnson 1994] </ref>. It also contains information on the applicability of a pattern, the trade offs, which must be made, and any consequences of the solution. Books are now appearing which present such design patterns for a range of applications.
Reference: [Birrer and Eggenschmiler 1993] <author> Andreas Birrer and Thomas Eggenschwiler, </author> <title> Frameworks in the Financial Engineering Domain: An Experience Report:, </title> <journal> ECOOP93 , pp. </journal> <pages> 21-35. </pages>
Reference-contexts: This work was picked up by a number of researchers working within the object oriented field. This then led to the exploration of how software frameworks can be documented using (software) design patterns (for example, [Johnson 1992] and <ref> [Birrer and Eggenschmiler 1993] </ref>). In particular Johnsons paper describes the form that these design patterns take and the problems encountered in applying them. Since 1995 and the publication of the Patterns book by the Gang of Four [Gamma et al , 1995], interest in patterns has mushroomed.
Reference: [Budinsky et al 1996] <author> F. J. Budinsky, M. A. Finnie, J. M. Vlissides and P. S. Yu, </author> <title> Automatic code generation from design patterns, </title> <journal> IBM Systems Journal , Vol. </journal> <volume> 35, No. 2, </volume> <year> 1996. </year>
Reference-contexts: However, there are potentially very many design patterns available to a designer. A number of these patterns may superficially appear to suit their requirements, even if the design patterns are available online (via some hyper text style browser <ref> [Budinsky et al 1996] </ref>) it is still necessary for the designer to search through them manually, attempting to identify the design which best matches their requirements. 5 In addition, once they have found the design that they feel best matches their needs, they must then consider how to apply it to <p> This solution may include multiple trade offs which are contradictory and which the designer must choose between, although some aspects of the system structure can be varied independently (although some attempts have been made to automate this process for example <ref> [Budinsky et al 1996] </ref>). 7. An Example Pattern: Mediator This pattern is based on that present in [Gamma et al 1995] on pages 273-282. The Java code was written specifically for this paper and is available on the web at HTTP: //www.aber.ac.uk/~jjh/Java/Mediator .
Reference: [Buschmann et al 1996] <author> F. Buschmann, R. Meunier, H. Rohnert, P. Sommerlad and M. Stal, </author> <title> Pattern Oriented Software Architecture - A System of Patterns , Wiley and Sons Ltd., </title> <address> ISBN 0-471-95869 7, </address> <year> 1996. </year>
Reference-contexts: There are also a series of conferences on Patterns referred to as PLoP (for P attern L anguage o f P rogram design). Two proceedings are available [Coplien and Schmidt 1995] and [Vlissides et al 1996]. Two further patterns books are <ref> [Buschmann et al 1996] </ref> (which represents the progression and evolution of the pattern approach into a system capable of describing and documenting large scale applications) and [Fowler 1997] which considers how patterns can be used for analysis to help build reusable object models.
Reference: [Coplien and Schmidt 1995] <author> J. O. Coplien and D. C. </author> <title> Schmidt (eds ), Pattern Languages of Program Design , Addison-Wesley, </title> <address> ISBN 0-201-60734-4, </address> <year> 1995. </year>
Reference-contexts: There are also a series of conferences on Patterns referred to as PLoP (for P attern L anguage o f P rogram design). Two proceedings are available <ref> [Coplien and Schmidt 1995] </ref> and [Vlissides et al 1996].
Reference: [Gamma et al 1993] <author> E. Gamma, R. Helm, R. Johnson and J. Vlissades, </author> <title> Design patterns: Abstraction and reuse of objectoriented design, </title> <booktitle> in ECOOP93 (Lecture Notes in Computer Science 707) , pp. </booktitle> <pages> 406-431, </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: The intention was thus to address many of the problems which reduce the reusability of software components and frameworks. 3. Design Patterns 3.1 What are design patterns? A design pattern captures expertise describing an architectural design to a recurring design problem in a particular context <ref> [Gamma et al 1993; Johnson 1992; Beck and Johnson 1994] </ref>. It also contains information on the applicability of a pattern, the trade offs, which must be made, and any consequences of the solution. Books are now appearing which present such design patterns for a range of applications.
Reference: [Gamma et al , 1995] <author> E. Gamma, R. Helm, R. Johnson and J. Vlissades, </author> <title> Design Patterns: Elements of Reusable ObjectOriented Software , Addison-Wesley, </title> <year> 1995. </year>
Reference-contexts: In particular Johnsons paper describes the form that these design patterns take and the problems encountered in applying them. Since 1995 and the publication of the Patterns book by the Gang of Four <ref> [Gamma et al , 1995] </ref>, interest in patterns has mushroomed. Patterns are now seen as a way of capturing expert and design knowledge associated with a system architecture to support design as well as software reuse. <p> A description of the program structure that the pattern will define. 4. A list of the participants needed to complete a pattern. 5. Consequences of using the pattern, both positive and negative. 6. Examples of the patterns usage. The pattern template used in <ref> [Gamma et al , 1995] </ref> provides a standard structure for the information which comprises a design pattern. This makes it easier to comprehend a design pattern as well as providing a concrete structure for those defining new patterns. Gammas book [Gamma et al , 1995] provides a detailed description of the <p> The pattern template used in <ref> [Gamma et al , 1995] </ref> provides a standard structure for the information which comprises a design pattern. This makes it easier to comprehend a design pattern as well as providing a concrete structure for those defining new patterns. Gammas book [Gamma et al , 1995] provides a detailed description of the template; only a summary of it is presented in Table 1. Table 1: The design pattern template Heading Usage Name The name of the pattern Intent This is a short statement indicating the purpose of the pattern.
Reference: [Fowler 1997] <author> M. Fowler, </author> <title> Analysis Patterns: Reusable Object Models , Addison-Wesley, </title> <type> ISBN 0-201 89542-0, </type> <year> 1997. </year>
Reference-contexts: Two proceedings are available [Coplien and Schmidt 1995] and [Vlissides et al 1996]. Two further patterns books are [Buschmann et al 1996] (which represents the progression and evolution of the pattern approach into a system capable of describing and documenting large scale applications) and <ref> [Fowler 1997] </ref> which considers how patterns can be used for analysis to help build reusable object models.
Reference: [Johnson 1992] <author> Ralph. E. Johnson, </author> <title> Documenting Frameworks with Patterns , Proc. </title> <journal> OOPSLA92, SIGPLAN Notices 27(10), </journal> <pages> pp. 63-76, </pages> <year> 1992. </year>
Reference-contexts: This work was picked up by a number of researchers working within the object oriented field. This then led to the exploration of how software frameworks can be documented using (software) design patterns (for example, <ref> [Johnson 1992] </ref> and [Birrer and Eggenschmiler 1993]). In particular Johnsons paper describes the form that these design patterns take and the problems encountered in applying them. Since 1995 and the publication of the Patterns book by the Gang of Four [Gamma et al , 1995], interest in patterns has mushroomed. <p> The intention was thus to address many of the problems which reduce the reusability of software components and frameworks. 3. Design Patterns 3.1 What are design patterns? A design pattern captures expertise describing an architectural design to a recurring design problem in a particular context <ref> [Gamma et al 1993; Johnson 1992; Beck and Johnson 1994] </ref>. It also contains information on the applicability of a pattern, the trade offs, which must be made, and any consequences of the solution. Books are now appearing which present such design patterns for a range of applications. <p> For example, the patterns associated with the HotDraw framework provide a pattern language for HotDraw. What is HotDraw? HotDraw is a drawing framework developed by Ralph Johnson at the University of Illinois at Urbana-Champaign <ref> [Johnson 1992] </ref>. It is a 4 reusable design for a drawing tool expressed as a set of classes. However, it is more than just a set of classes; it possesses the whole structure of a drawing tool, which only needs to be parameterized to create a new drawing tool. <p> What this means to you is that you get a working system much, much sooner and with a great deal less effort. HotDraw was first presented at the OOPSLA92 conference in a paper entitled Documenting Frameworks using Patterns by Ralph Johnson <ref> [Johnson 1992] </ref>. This paper is considers the problems associated with documenting complex reusable software systems using HotDraw as a concrete example. Included with the paper are a set of appendices which act as very useful guides on how to change the default drawing editor.
Reference: [Krasner and Pope 1988] <author> G. E. Krasner and S. T. Pope, </author> <title> A Cookbook for Using the Model-View Controller User Interface Paradigm in Smalltalk-80, </title> <type> JOOP 1(3), </type> <pages> pp. 26-49, </pages> <year> 1988. </year>
Reference: [Vlissides et al 1996] <author> J. M. Vlissides, J. O. Coplien and N. L. Kerth, </author> <title> Pattern Languages of Program Design 2 , Addison-Wesley, </title> <address> ISBN 0-201-89527-7, </address> <year> 1996. </year>
Reference-contexts: There are also a series of conferences on Patterns referred to as PLoP (for P attern L anguage o f P rogram design). Two proceedings are available [Coplien and Schmidt 1995] and <ref> [Vlissides et al 1996] </ref>.
References-found: 13

