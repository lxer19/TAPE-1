URL: ftp://theory.lcs.mit.edu/pub/tcryptol/96-04.ps
Refering-URL: http://theory.lcs.mit.edu/~tcryptol/1996/96-04.html
Root-URL: 
Email: (ivan@daimi.aau.dk) and  (cramer@cwi.nl)  
Title: Linear Zero-Knowledge A Note on Efficient Zero-Knowledge Proofs and Arguments  
Author: Ivan Damg-ard, Ronald Cramer, CWI 
Date: Mar. 12, 1996  
Address: BRICS  
Affiliation: Aarhus University,  
Abstract: We present a zero-knowledge proof system [19] for any NP language L, which allows showing that x 2 L with error probability less than 2 k using communication corresponding to O(jxj c ) + k bit commitments, where c is a constant depending only on L. The proof can be based on any bit commitment scheme with a particular set of properties. We suggest an efficient implementation based on factoring. We also present a 4-move perfect zero-knowledge interactive argument for any NP-language L. On input x 2 L, the communication complexity is O(jxj c ) max(k; l) bits, where l is the security parameter for the prover 1 . Again, the protocol can be based on any bit commitment scheme with a particular set of properties. We suggest efficient implementations based on discrete logarithms or factoring. We present an application of our techniques to multiparty computations, allowing for example t committed oblivious transfers with error probability 2 k to be done simultaneously using O(t+k) commitments. Results for general computations follow from this. As a function of the security parameters, our protocols have the smallest known asymptotic communication complexity among general proofs or arguments for NP. Moreover, the constants involved are small enough for the protocols to be practical in a realistic situation: both protocols are based on a Boolean formula containing and-, or- and not-operators which verifies an NP-witness of membership in L. Let n be the number of times this formula reads an input variable. Then the communication complexity of the protocols when using our concrete commitment schemes can be more precisely stated as at most 4n+k +1 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.Boyar, G.Brassard and R.Peralta: </author> <title> Subquadratic Zero-Knowledge, </title> <journal> Journal of the ACM, </journal> <month> November </month> <year> 1995. </year>
Reference: [2] <author> J.Boyar and R.Peralta: </author> <title> Short Discreet Proofs, </title> <booktitle> Proc. of EuroCrypt 96. </booktitle>
Reference: [3] <author> G.Brassard, D.Chaum and C.Crepeau: </author> <title> Minimum Disclosure Proofs of Knowledge, </title> <journal> JCSS, </journal> <volume> vol.37, </volume> <year> 1988. </year>
Reference-contexts: 1 Introduction Most known zero-knowledge interactive proofs or arguments for a general NP language (such as [12] and <ref> [3] </ref>) are built from a basic step allowing the prover to cheat with some constant probability, e.g. 1/2. In order to achieve a smaller error probability, the obvious method is to iterate this basic step k times to get error probability at most 2 k . <p> For such a commitment, V will run G, send the result to P , and possibly convince P 5 that the result was computed correctly. Unconditionally hiding commitment may in addition be trapdoor, or chameleon <ref> [3] </ref>. For a trapdoor commitment, the generator G outputs in addition a string T called the trapdoor information.
Reference: [4] <author> L.Babai, L.Fortnow, L.Levin and M.Szegedi: </author> <title> Checking Computations in Poly-logarithmic Time, </title> <booktitle> Proc. of STOC 91. </booktitle>
Reference-contexts: Boyar et al.[1] was the first to find a "sub-quadratic" zero-knowledge protocol for circuit satisfiabil-ity, and their results were later extended by Killian [15]. Killian obtained, using the probabilistically checkable proofs (PCP) of <ref> [4] </ref>, a zero-knowledge interactive proof that x is in NP language L using O (jxj c 1 ) + O (log c 2 (jxj)k ideal bit commitments and having error probability 2 k .
Reference: [5] <author> J. Benaloh and J. Leichter: </author> <title> Generalized Secret Sharing and Monotone Functions, </title> <booktitle> Proc. of Crypto 88, </booktitle> <publisher> Springer Verlag LNCS series, </publisher> <pages> 25-35. </pages>
Reference: [6] <author> D.Chaum, I.Damg-ard and J. van de Graaf: </author> <title> Multiparty Computations ensuring Privacy of each Party's Input and Correctness of the Result, </title> <booktitle> Proc. of Crypto 87. </booktitle>
Reference-contexts: The classical protocols for solving this problem in the broadcast model (where only broadcast and no private channels are available) can be found in [13, 20], with efficiency improvements e.g. in <ref> [6] </ref>. A much more substantial improvement can be obtained by using the commitment scheme from Section 6.1 to implement directly a fundamental primitive for multiparty 14 computation known as committed oblivious transfer. Committed oblivious transfer is sufficient to implement general multiparty computations, a concrete reduction can be found in [8]. <p> Using the method above together with e.g. the framework from <ref> [6] </ref>, we get Proposition 7.2 Under the q'th residuosity assumption, there is a protocol for doing secure p-party computation in a circuit of size n that requires communication corresponding to O (np 2 ) + O (pk) commitments.
Reference: [7] <author> R.Cramer, I.Damgaard, and B.Schoenmakers: </author> <title> Proofs of partial knowledge and simplified design of witness hiding protocols, </title> <booktitle> proc. of Crypto 94. </booktitle>
Reference-contexts: We then apply a technique derived from the "proofs of partial knowledge" introduced by Cramer et al. <ref> [7] </ref> (and independently in [18]). <p> Here, A 0 is to allowed to choose himself the challenge to be answered in each instance, however the challenge values must obey some constraints defined in terms of and a random value chosen by the verifier. The full proof of the theorem uses methods derived from <ref> [7] </ref> and can be found in Appendix A. This leads to the following protocol for showing that is satisfiable, with error probability at most 2 k : Protocol (P; V ) 1. Let b 1 ; ::; b m be a set of input bits that satisfy .
Reference: [8] <author> C.Crepeau, J. van de Graaf and A. Tapp: </author> <title> Committed Oblivious Transfer and Private Multiparty Computation, </title> <booktitle> Proc. of Crypto 95. </booktitle>
Reference-contexts: A much more substantial improvement can be obtained by using the commitment scheme from Section 6.1 to implement directly a fundamental primitive for multiparty 14 computation known as committed oblivious transfer. Committed oblivious transfer is sufficient to implement general multiparty computations, a concrete reduction can be found in <ref> [8] </ref>. We have the following: Proposition 7.1 Under the q'th residuosity assumption, there is a protocol for executing t committed oblivious transfers with error probability 2 k using communication corresponding to O (t + k) commitments. A committed oblivious transfer takes part between two parties A and B.
Reference: [9] <author> I.Damg-ard, O.Goldreich, T.Okamoto and A.Wigderson: </author> <title> Honest Verifier vs. Dishonest Verifier in Public Coin Zero-Knowledge Proofs, </title> <booktitle> Proc. of Crypto 95. </booktitle>
Reference-contexts: The problem that (P; V ) is only honest verifier zero-knowledge can be solved using a method due to Okamoto 9 <ref> [9] </ref>, namely to let the verifier's challenge be determined by a two party coin- flipping protocol: 1. The prover sends the first message of protocol (P; V ). 2.
Reference: [10] <author> U. Feige and A. Shamir: </author> <title> Witness Indistinguishable and Witness Hiding Protocols, </title> <booktitle> Proc. of STOC 90. </booktitle>
Reference-contexts: commitment containing a 0 (this is true of our concrete examples) 6 . ut Finally, for an unconditionally hiding trapdoor commmitment scheme, we will need that the the scheme has an efficient proof of knowledge of the trapdoor, i.e. there is a constant round witness hiding proof of knowledge (see <ref> [10] </ref>), with communication complexity linear in l, that V can use to demonstrate that he knows the trapdoor of the commitment scheme. This will be necessary to prove that our argument is perfect zero-knowledge. <p> And since computing from one witness any other one is as hard as computing the discrete log of g 1 base g 2 , it follows from <ref> [10] </ref> that the protocol is witness hiding, if discrete log is hard.
Reference: [11] <author> U. Feige and A. Shamir: </author> <title> Zero-Knowledg Proofs of Knowledge in Two Rounds, </title> <booktitle> Proc. of Crypto 89. </booktitle>
Reference-contexts: The verifier gives a witness hiding proof of knowledge of the trapdoor. 3. Protocol (P; V ) is executed using the commitment scheme instance just generated. 10 The idea is taken from <ref> [11] </ref>. The protocol as shown here has 6 moves, but this can be condensed to 4 moves in the same way as in [11]. <p> Protocol (P; V ) is executed using the commitment scheme instance just generated. 10 The idea is taken from <ref> [11] </ref>. The protocol as shown here has 6 moves, but this can be condensed to 4 moves in the same way as in [11]. The prover must compute the trapdoor information in order to cheat the commitment scheme, and the verifier's witness hiding proof does not help him to do that. Hence the soundness of (P; V ) is preserved.
Reference: [12] <author> O.Goldreich, S.Micali and A.Wigderson: </author> <title> Proofs that yield Nothing but their Validity and a Methodology of Cryptographic Protocol Design, </title> <booktitle> Proc. of FOCS 86. </booktitle>
Reference-contexts: 1 Introduction Most known zero-knowledge interactive proofs or arguments for a general NP language (such as <ref> [12] </ref> and [3]) are built from a basic step allowing the prover to cheat with some constant probability, e.g. 1/2. In order to achieve a smaller error probability, the obvious method is to iterate this basic step k times to get error probability at most 2 k .
Reference: [13] <author> O.Goldreich, S.Micali and A.Wigderson: </author> <title> How to play any mental game, </title> <booktitle> Proc. of FOCS 87. </booktitle>
Reference-contexts: The classical protocols for solving this problem in the broadcast model (where only broadcast and no private channels are available) can be found in <ref> [13, 20] </ref>, with efficiency improvements e.g. in [6]. A much more substantial improvement can be obtained by using the commitment scheme from Section 6.1 to implement directly a fundamental primitive for multiparty 14 computation known as committed oblivious transfer.
Reference: [14] <author> L.Guillou and J.J.Quisquater: </author> <title> A Practical Zero-Knowledge Protocol Fitted to Security Microprocessor Minimizing both Transmission and Memory, </title> <booktitle> Proc. of EuroCrypt 88. </booktitle>
Reference-contexts: We present examples of commitments with the properties we need and compute the concrete communication complexities that result. 6.1 An Unconditionally Binding Bit Commitment Scheme This scheme is based on the factoring problem, and is derived from the identification scheme of Goulliou and Quisquater <ref> [14] </ref>.
Reference: [15] <author> J.Killian: </author> <title> A note on Efficient Proofs and Arguments, </title> <booktitle> Proc. of STOC 92. </booktitle>
Reference-contexts: Several methods have been suggested for achieving the security amplification more efficiently than by the naive method. Boyar et al.[1] was the first to find a "sub-quadratic" zero-knowledge protocol for circuit satisfiabil-ity, and their results were later extended by Killian <ref> [15] </ref>. Killian obtained, using the probabilistically checkable proofs (PCP) of [4], a zero-knowledge interactive proof that x is in NP language L using O (jxj c 1 ) + O (log c 2 (jxj)k ideal bit commitments and having error probability 2 k . <p> NP with error probability 2 k and communication complexity corresponding to O (jxj c ) + k commitments; and in interactive arguments for NP with communication complexity O (jxj c ) max (k; l) bits (we count commitments for the proof and bits for the argument to facilitate comparison with <ref> [15, 16] </ref>). Comparing this to [15], [16] which were the best results so far, we see that for interactive proofs, the term depending on k has been reduced from O (log c jxj)k to k. <p> Comparing this to <ref> [15] </ref>, [16] which were the best results so far, we see that for interactive proofs, the term depending on k has been reduced from O (log c jxj)k to k. <p> By contrast, the PCP-based methods of <ref> [15] </ref>, [16] hardly have any practical relevance because of the elaborate reductions needed to build a PCP. Given a circuit C of size m, one can easily build a formula of size O (m) that is satisfiable precisely if C is. <p> Even if an extremely small PCP would exist, the protocol in <ref> [15] </ref> would use (m log c m) commitments to solve the same problem. To the best of our knowledge, our protocol is the first to acheive "linear zero-knowledge" in this sense. <p> Improved results for the communication complexity of general computations follow from this. Remark For the case of interactive proofs, we have, like <ref> [15] </ref>, ignored in the statement of results the communication needed to set up the commitment scheme 4 . This is reasonable, as the same commitment scheme can be reused in many proofs.
Reference: [16] <author> J.Killian: </author> <title> Efficient Interactive Arguments, </title> <booktitle> Proc. of Crypto 95. </booktitle>
Reference-contexts: Results were also given on interactive arguments, that used a similar technique, plus a collision intractable hash function. This result was further improved in <ref> [16] </ref>, resulting in an interactive argument with communication complexity O (l log (l)k) bits. <p> NP with error probability 2 k and communication complexity corresponding to O (jxj c ) + k commitments; and in interactive arguments for NP with communication complexity O (jxj c ) max (k; l) bits (we count commitments for the proof and bits for the argument to facilitate comparison with <ref> [15, 16] </ref>). Comparing this to [15], [16] which were the best results so far, we see that for interactive proofs, the term depending on k has been reduced from O (log c jxj)k to k. <p> Comparing this to [15], <ref> [16] </ref> which were the best results so far, we see that for interactive proofs, the term depending on k has been reduced from O (log c jxj)k to k. For arguments, our result is inferior to [16] when viewed as a function of jxj, but superior as a function of the <p> Comparing this to [15], <ref> [16] </ref> which were the best results so far, we see that for interactive proofs, the term depending on k has been reduced from O (log c jxj)k to k. For arguments, our result is inferior to [16] when viewed as a function of jxj, but superior as a function of the security parameters k and l. Note that our interactive argument has no need for a collision-intractable hash function, we only need commitments with the right properties. <p> Note that our interactive argument has no need for a collision-intractable hash function, we only need commitments with the right properties. Hence our cryptographic assumption is potentially weaker than the ones needed in 3 <ref> [16] </ref> 3 . The constants involved in our communication complexities are small enough for the protocols to be practical in a realistic situation: let n be the number of times the formula reads an input variable. <p> By contrast, the PCP-based methods of [15], <ref> [16] </ref> hardly have any practical relevance because of the elaborate reductions needed to build a PCP. Given a circuit C of size m, one can easily build a formula of size O (m) that is satisfiable precisely if C is. <p> To the best of our knowledge, our protocol is the first to acheive "linear zero-knowledge" in this sense. For arguments, we get O (m 2 ) bits using l = k = m, where <ref> [16] </ref> would be O (m 2 log m). As a further application of our techniques, we show a connection to mul-tiparty computations, allowing for example t committed oblivious transfers with error probability 2 k to be done simultaneously using O (t + k) commitments.
Reference: [17] <author> T.Okamoto: </author> <title> Provably Secure and Practical Identification Schemes and Corresponding Signature Schemes, </title> <booktitle> Proc. of Crypto 92. </booktitle>
Reference-contexts: For concreteness, we think here of this group as a subgroup of Z fl p , where p is a prime, and q divides p 1. But any group of order q would do, e.g. on an elliptic curve. The scheme is derived from the identification scheme of Okamoto <ref> [17] </ref>. To generate the public key of the scheme, choose an l-bit prime p, such that the prime q divides p 1 (this is easily done by picking q first of length slightly smaller than l and then searching for p).
Reference: [18] <author> A.De Santis, G Di Crescenzo, G. Persiano and M.Yung: </author> <title> On Monotone Formula Closure of SKZ, </title> <booktitle> Proc. of FOCS 94. </booktitle>
Reference-contexts: We then apply a technique derived from the "proofs of partial knowledge" introduced by Cramer et al. [7] (and independently in <ref> [18] </ref>).
Reference: [19] <author> S.Goldwasser, S.Micali and C.Rackoff: </author> <title> The Knowledge Complexity of Interactive Proof Systems, </title> <publisher> SIAM J.Computing, </publisher> <address> Vol.18, pp.186-208, </address> <year> 1989. </year>
Reference-contexts: In this extended abstract, there will not be enough space for a full formal statement. For definitions of interactive poof systems and zero-knowledge, please refer to <ref> [19] </ref>. We will think of a bit commitment scheme as defined by a probabilistic polynomial time algorithm G called a key generator. It takes as input 1 l , where l is a security parameter. <p> For interactive proofs, we will need commitments that are unconditionally binding: b is uniquely determined from c (r; b); and computationally hiding: the distributions of c (r; 1) and of c (r; 0), where r is random, are computationally indistinguishable (refer to <ref> [19] </ref> for details). For such a commitment, P will run G, send the result to V , and possibly convince V that the result was computed correctly. <p> After choosing the public key, P should convince V in zero-knowledge that w does not have a q'th root. This is easily done using a variant of the protocol from <ref> [19] </ref> for quadratic non-residuosity note that it is easy for P to test if a number y has a q'th root by testing if y (n)=q mod n = 1.
Reference: [20] <author> A. Yao: </author> <title> How to generate and exchange secrets, </title> <booktitle> Proc. of FOCS 86. </booktitle> <pages> 17 </pages>
Reference-contexts: The classical protocols for solving this problem in the broadcast model (where only broadcast and no private channels are available) can be found in <ref> [13, 20] </ref>, with efficiency improvements e.g. in [6]. A much more substantial improvement can be obtained by using the commitment scheme from Section 6.1 to implement directly a fundamental primitive for multiparty 14 computation known as committed oblivious transfer.
References-found: 20

