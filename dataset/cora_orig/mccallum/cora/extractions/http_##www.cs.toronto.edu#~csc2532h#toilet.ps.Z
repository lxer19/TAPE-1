URL: http://www.cs.toronto.edu/~csc2532h/toilet.ps.Z
Refering-URL: http://www.cs.toronto.edu/~csc2532h/
Root-URL: http://www.cs.toronto.edu
Email: email: tgk@cs.toronto.edu  
Title: Reasoning about Physical Systems with the Situation Calculus  
Author: Todd G. Kelley 
Address: Toronto, Canada M5S 1A4  
Affiliation: Department of Computer Science University of Toronto  
Abstract: I use the results of (Reiter 1996) to show how the situation calculus can be used to reason about a physical system with continuously varying parameters and concurrent actions. The situation calculus model of a toilet is discussed as an example that is well understood, yet interesting. We present a PROLOG technology simulator for situation calculus models, and describe how to translate a situation calculus axiom into its PROLOG equivalent. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Levesque, H. J.; Reiter, R.; Lesperance, Y.; Lin, F.; and Scherl, R. </author> <year> 1996. </year> <title> GOLOG: A logic programming language for dynamic domains. </title> <journal> Journal of Logic Programming, </journal> <note> Special Issue on Reasoning about Action and Change. To appear. </note>
Reference-contexts: These axioms include unique names axioms for situations, a definition for &lt;, a coherency criterion for concurrent actions, and an induction axiom. Axiomatizing Application Domains Levesque et al. <ref> (Levesque et al. 1996) </ref> list the general types of axioms required to formalize an application domain in the situation calculus.
Reference: <author> Lin, F., and Reiter, R. </author> <year> 1994. </year> <title> State constraints revisited. </title> <journal> Journal of Logic and Computation 4(5) </journal> <pages> 655-678. </pages>
Reference-contexts: * The predicate symbol &lt;, where s &lt; s 0 means that s 0 is reachable from s through the execution of a sequence of possible actions (simple or concurrent). * The foundational axioms for the concurrent situation calculus, provided in (Reiter 1996), which are generalizations of those provided in <ref> (Lin & Reiter 1994) </ref> and (Reiter 1993) for the nonconcurrent situation calculus. These axioms include unique names axioms for situations, a definition for &lt;, a coherency criterion for concurrent actions, and an induction axiom.
Reference: <author> McCarthy, J., and Hayes, P. </author> <year> 1969. </year> <title> Some philosophical problems from the standpoint of artificial intelligence. </title>
Reference-contexts: Inspired by Rieger (Rieger 1985), I have used this situation calculus to model toilet behavior. The toilet seems to be a good example because it is simple enough to be understood by everyone, but complicated enough to be interesting. Situation calculus The instantiation of McCarthy's <ref> (McCarthy & Hayes 1969) </ref> situation calculus language used in this paper is due to Reiter (Reiter 1996), largely influenced by Pinto's (Pinto 1994) work on concurrency and continuous processes.
Reference: <editor> In Meltzer, B., and Michie, D., eds., </editor> <booktitle> Machine Intelligence 4. </booktitle> <address> Edinburgh, Scotland: </address> <publisher> Edinburgh University Press. </publisher> <pages> 463-502. </pages>
Reference: <author> Pinto, J. A. </author> <year> 1994. </year> <title> Temporal Reasoning in the Situation Calculus. </title> <type> Ph.D. Dissertation, </type> <institution> University of Toronto, Toronto, </institution> <address> Ontario, Canada. </address>
Reference-contexts: Situation calculus The instantiation of McCarthy's (McCarthy & Hayes 1969) situation calculus language used in this paper is due to Reiter (Reiter 1996), largely influenced by Pinto's <ref> (Pinto 1994) </ref> work on concurrency and continuous processes. The Language The language used in this paper consists of the following ontology: * a sort situation, and a distinguished situation con stant symbol S 0 : * a sort time ranging over the reals. * a sort action of simple actions. <p> Actions can cancel out the effects of others: As previously pointed out, when push handle and close plug occur in the same concurrent action, the effect of push handle takes precedence over the effect of close plug. This phenomenon is closely related to the Precondition Interaction Problem of <ref> (Pinto 1994) </ref>, but it is not the same. In particular, successor state axioms|not precondition axioms|are the proper place to deal with it. Consider another example: a ball that is caught just as it bounces.
Reference: <author> Reiter, R. </author> <year> 1991. </year> <title> The frame problem in the situation calculus: a simple solution (sometimes) and a completeness result for goal regression. </title> <editor> In Lifschitz, V., ed., </editor> <booktitle> Artificial Intelligence and Mathematical Theory of Computation: Papers in Honor of John McCarthy. </booktitle> <address> San Diego, CA: </address> <publisher> Academic Press. </publisher> <pages> 359-380. </pages>
Reference-contexts: In other words, the effect of a push handle (t) action supersedes the effect of a simultaneous close plug (t) action. Due to its excessive size, the successor state axiom for flow bowl channel (s) is omitted. State Constraints Reiter's solution to the frame problem <ref> (Reiter 1991) </ref> relies on the assumption that there are no state constraints. The problem with state constraints is that they can lead to indirect effects which violate the Completeness Assumption on which the solution depends.
Reference: <author> Reiter, R. </author> <year> 1993. </year> <title> Proving properties of states in the situation calculus. </title> <booktitle> Artificial Intelligence 64 </booktitle> <pages> 337-351. </pages>
Reference-contexts: where s &lt; s 0 means that s 0 is reachable from s through the execution of a sequence of possible actions (simple or concurrent). * The foundational axioms for the concurrent situation calculus, provided in (Reiter 1996), which are generalizations of those provided in (Lin & Reiter 1994) and <ref> (Reiter 1993) </ref> for the nonconcurrent situation calculus. These axioms include unique names axioms for situations, a definition for &lt;, a coherency criterion for concurrent actions, and an induction axiom.
Reference: <author> Reiter, R. </author> <year> 1996. </year> <title> Natural actions, concurrency and continuous time in the situation calcu lus. In COMMON SENSE '96: </title> <booktitle> the third symposium on logical formalizations of commonsense reasoning. </booktitle>
Reference-contexts: Introduction The situation calculus, in its latest form, can handle qualitative reasoning about physical systems, including continuous parameters and concurrent actions. Reiter <ref> (Reiter 1996) </ref> has provided a firm theoretical foundation for modeling physical systems and simulating their behavior. Inspired by Rieger (Rieger 1985), I have used this situation calculus to model toilet behavior. <p> The toilet seems to be a good example because it is simple enough to be understood by everyone, but complicated enough to be interesting. Situation calculus The instantiation of McCarthy's (McCarthy & Hayes 1969) situation calculus language used in this paper is due to Reiter <ref> (Reiter 1996) </ref>, largely influenced by Pinto's (Pinto 1994) work on concurrency and continuous processes. <p> situation s (and similarly for any concurrent action c). * The predicate symbol &lt;, where s &lt; s 0 means that s 0 is reachable from s through the execution of a sequence of possible actions (simple or concurrent). * The foundational axioms for the concurrent situation calculus, provided in <ref> (Reiter 1996) </ref>, which are generalizations of those provided in (Lin & Reiter 1994) and (Reiter 1993) for the nonconcurrent situation calculus. These axioms include unique names axioms for situations, a definition for &lt;, a coherency criterion for concurrent actions, and an induction axiom. <p> A legal situation is consistent with the laws of Nature, in that a natural action must occur at the time dictated by natural laws governing the behavior of the system, unless the action is prevented from occurring by an earlier natural action. Reiter <ref> (Reiter 1996) </ref> defines the legal (S) predicate to formalize this principle: legal (s) j S 0 s ^ (8a; c; s 0 ):natural (a) ^ P oss (a; s 0 ) ^ do (c; s 0 ) s ^ a =2 c oe time (c) &lt; time (a):(18) Here, is the <p> The legal predicate is instrumental in the implementation of a simulator, as will become clear. A domain of discourse in which all actions are natural is said to comply with Reiter's <ref> (Reiter 1996) </ref> Natural World Condition (N W C). This condition assures a deterministic simulation. Another concept crucial to the implementation of a simulator is the notion of Reiter's (Reiter 1996) Least Natural Time Points: lntp (s; t) j (9a)[natural (a) ^ P oss (a; s) ^ time (a) = t ^ <p> A domain of discourse in which all actions are natural is said to comply with Reiter's <ref> (Reiter 1996) </ref> Natural World Condition (N W C). This condition assures a deterministic simulation. Another concept crucial to the implementation of a simulator is the notion of Reiter's (Reiter 1996) Least Natural Time Points: lntp (s; t) j (9a)[natural (a) ^ P oss (a; s) ^ time (a) = t ^ (8a 0 )[natural (a 0 ) ^ P oss (a 0 ; s) oe time (a 0 ) t]: (19) Informally, the least natural time point is the <p> The Least Natural Time Point Condition (LN T P C) is the following: (8s):(9a)[natural (a) ^ P oss (a; s)] oe (9t)lntp (s; t): (20) Reiter <ref> (Reiter 1996) </ref> puts this all together and proves: LN T P C ^ N W C oe legal (do (c; s)) j legal (s) ^ P oss (c; s) ^ (8a)[a 2 c j P oss (a; s) ^ lntp (s; time (a))]:(21) Formula 21 is the engine for the simulator. <p> a successor state) is: do ([tank_become_full (2*qtb/(qst*qtb-qst^2)), close_supply (2*qtb/(qst*qtb-qst^2))], do ([bowl_become_full ( (-((2*qsb+qbc)*qtb-qbc*qst))/ (qbc*qsb-qsb^2)*qst))], do ([bowl_become_empty ((-(3*qtb-qst))/ ((qsb-qbc)*qtb+(qbc-qsb)*qst))], do ([close_plug (2/(qtb-qst)), tank_become_empty (2/(qtb-qst))], do ([begin_siphon (0), open_supply (0), release_handle (0)], do ([push_handle (0)],s0))))))))) Discussion This paper has uncovered three issues of interest: Situations can have zero duration: ln Reiter's paper <ref> (Reiter 1996) </ref>, he imposes the global constraint, start (s) &lt; start (do (c; s)); which states that no situation has zero duration. <p> Both cowboys are dead in do ([shoot1 (0); shoot2 (0)]; S 0 ), but do (shoot1 (0); do (shoot2 (0); s0)) is not even a legal situation. Acknowledgements I thank Ray Reiter for his comments on an earlier version of this paper. Ray's paper <ref> (Reiter 1996) </ref> provides a theoretical foundation for this one. I have also benefited from discussions with Javier Pinto.
Reference: <author> Rieger, C. </author> <year> 1985. </year> <title> An organization of knowledge for problem solving and language comprehension. </title> <editor> In Brachman, R. J., and Levesque, H. J., eds., </editor> <booktitle> Readings in Knowledge Representation. </booktitle> <address> Los Altos, CA: </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Introduction The situation calculus, in its latest form, can handle qualitative reasoning about physical systems, including continuous parameters and concurrent actions. Reiter (Reiter 1996) has provided a firm theoretical foundation for modeling physical systems and simulating their behavior. Inspired by Rieger <ref> (Rieger 1985) </ref>, I have used this situation calculus to model toilet behavior. The toilet seems to be a good example because it is simple enough to be understood by everyone, but complicated enough to be interesting.
References-found: 9

