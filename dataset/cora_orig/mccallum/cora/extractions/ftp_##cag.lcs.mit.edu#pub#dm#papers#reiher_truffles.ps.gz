URL: ftp://cag.lcs.mit.edu/pub/dm/papers/reiher:truffles.ps.gz
Refering-URL: http://www.pdos.lcs.mit.edu/~dm/
Root-URL: 
Title: TRUFFLES A SECURE SERVICE FOR WIDESPREAD FILE SHARING  
Author: Peter Reiher Thomas Page, Jr. Gerald Popek Jeff Cook Stephen Crocker 
Address: Los Angeles, CA  Los Angeles, CA  Glenwood, MD  
Affiliation: UCLA  Trusted Information Systems  Trusted Information Systems  
Abstract: Truffles is a system meant to address some of the major issues that still make it difficult to share files between users at different sites. In particular, it addresses the problems associated with secure file sharing, and the problems of high administrative overhead. Truffles will combine facilities of the Ficus file system and TIS/PEM, a privacy enhanced mail system, to make file sharing considerably easier. Truffles must deal with several important security problems, including secure transport of data, authentication of the users sharing files, handling of different administrative domains, and permitting system administrators to control, flexibly, yet easily, what sorts of sharing are done. This paper describes these problems and the solutions Truffles will use. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Satyanarayanan, M. </author> <title> A Survey of Distributed File Systems, </title> <booktitle> Annual Review of Computer Science, </booktitle> <year> 1990. </year>
Reference-contexts: Some tools more specialized for file handling exist, such as ftp, telnet, and NFS <ref> [1] </ref>. Generally, however, these tools have significant disadvantages. None of them handle security issues well. Telnet and ftp also do not use the sameuser interface that normal local operations use, and do not easilypermit users to mix local and remote operations.
Reference: 2. <author> Guy, R., Heidemann, J., Mak, W., Page, T., Popek, G., andRothmeier, D., </author> <booktitle> Implementation of the Ficus Replicated File System,Proceedings of the Summer USENIX Conference, </booktitle> <year> 1990. </year>
Reference-contexts: Further, since all operations have to fetch their data across the network, these systems can be slow and/or expensive. The Ficus file system has solved the problems of poor availability and performance by replicating files for users <ref> [2] </ref>. Since users at different sites have local versions of their shared files, they are not as affected by failures, and they get substantially the performance of local access. But Ficus only works well in shared administrative domains, and does nothing to address the security concerns. <p> THE FICUS FILE SYSTEM Ficus is a distributed file system designed to run on networks of Unixsystems, ranging from portable units and workstations to large fileservers <ref> [2] </ref>. Ficus provides high availability for read and update, utilizingan optimistic one copy availability policy. One copy availability permits access to a file even if a majority, quorum, or token are unavailable, as long as a single copy can be accessed.
Reference: 3. <author> Linn, J. </author> <title> Privacy Enhancement for Internet Electronic Mail: Part I Message Encryption and Authentication, </title> <type> DEC Technical Report, </type> <year> 1992. </year>
Reference-contexts: More complete description of the Truffles architecture requires furtherunderstanding of its major components, TIS/PEM and the Ficus file system. PEM AND TIS/PEM Privacy enhanced mail (PEM) is an Internet standard that adds certain simple security services (like message authentication, sender authentication, and message confidentiality) to regular electronic mail. (See <ref> [3] </ref>, [4], [5], and [6] for details of PEMs design.) PEM authentication is done via public key cryptography. A hash of themessage to be sent is encrypted with the senders private key.
Reference: 4. <author> Kent, S. </author> <title> Privacy Enhancement for Internet Electronic Mail: Part II Certificate-Based Key Management, </title> <type> BBN Communications Technical Report, </type> <year> 1992. </year>
Reference-contexts: PEM AND TIS/PEM Privacy enhanced mail (PEM) is an Internet standard that adds certain simple security services (like message authentication, sender authentication, and message confidentiality) to regular electronic mail. (See [3], <ref> [4] </ref>, [5], and [6] for details of PEMs design.) PEM authentication is done via public key cryptography. A hash of themessage to be sent is encrypted with the senders private key.
Reference: 5. <author> Balenson, D. </author> <title> Privacy Enhancement for Internet Electronic Mail: Part III Algorithms, Modes, and Identifiers, </title> <note> Trusted Information Systems Technical Report, </note> <year> 1992. </year>
Reference-contexts: PEM AND TIS/PEM Privacy enhanced mail (PEM) is an Internet standard that adds certain simple security services (like message authentication, sender authentication, and message confidentiality) to regular electronic mail. (See [3], [4], <ref> [5] </ref>, and [6] for details of PEMs design.) PEM authentication is done via public key cryptography. A hash of themessage to be sent is encrypted with the senders private key.
Reference: 6. <author> Kaliski, B. </author> <title> Privacy Enhancement for Internet Electronic Mail: Part IV Key Certification and Related Services, RSA Data Security, Inc. </title> <type> Technical Report, </type> <year> 1992. </year>
Reference-contexts: PEM AND TIS/PEM Privacy enhanced mail (PEM) is an Internet standard that adds certain simple security services (like message authentication, sender authentication, and message confidentiality) to regular electronic mail. (See [3], [4], [5], and <ref> [6] </ref> for details of PEMs design.) PEM authentication is done via public key cryptography. A hash of themessage to be sent is encrypted with the senders private key.
Reference: 7. <author> Galvin, J. and Balenson, D. </author> <title> Security Aspects of a UNIX PEM Implemenatation, </title> <booktitle> Proceedings of the UNIX Security Symposium III, </booktitle> <year> 1992. </year>
Reference-contexts: The Internet Policy Registration Authority (IPRA) is at the highest level of this hierarchy. This authority willbe managed by the Internet Society. TIS/PEM is a reference implementation of the PEM standard, developed by Trusted Information Systems <ref> [7] </ref>. It isUNIX based, and runs on a variety of platforms. Figure 4 showsa view of TIS/PEM. The PEM library serves as the primary entry pointto the system by electronic mail or other services.
Reference: 8. <author> Page, T., Popek, G., and Guy, R., </author> <title> Stackable Layers: An ObjectOriented Approach to Distributed File System Architecture,IEEE Workshop on Object Orientation in Operating Systems, </title> <year> 1990. </year>
Reference-contexts: This modular architecture permits replication toco-exist with other independently implemented extended filing features. In addition to running on top of stackable file systems, Ficus is built using stackable layers <ref> [8] </ref>. The stackable layers approach to file system design permits adding functionality to an existing file system merely by writing the new functionality intoa new layer of code. This code is placed on top of the existing layers,providing a compatible interface to users, while simultaneously makingthe new functionality available.
Reference: 9. <author> Rifkin, A., Forbes, M., Hamilton, R., Sabrio, M., Suryakanta, S. andYueh, K. </author> <title> RFS Architectural O v e r v i e w , P r o c e e d i n g s o f t h e S u m m e r USENIXConference, </title> <year> 1986. </year>
Reference-contexts: There is a similar problem when the system maps from a UID to a login name, as itdoes when a user wants to display the ownership of a file. This problem has been recognized before in other distributed file services,such as RFS <ref> [9] </ref>. Their solution was to map UIDs from remote machinesto UIDs on local machines.
Reference: 10. <author> Sandberg, R., Goldberg, D., Kleiman, S., Walsh, D., and Lyon, </author> <title> B.,Design and Implementation of the Sun Network Filesystem, </title> <booktitle> UsenixConference Proceedings, </booktitle> <month> Summer </month> <year> 1985. </year>
Reference-contexts: Part of the ongoing Truffles research is to examine what sharing policiesare most important, and the best way of implementing them. RELATED WORK Truffles is basically a system for sharing files across machine boundaries.The primary related work is other file services with the same goal.One obvious effort is NFS <ref> [10] </ref>. In fact, the early version of Trufflesuses a modified version of NFS as a transport layer. However, NFS has certain limitationsthat Truffles does not have. Setting up an NFS relationship is a heavyweightoperation, requiring substantial system administrator intervention on bothsides.
Reference: 11. <author> Callaghan, B. and Lyon, T. </author> <booktitle> The Automounter, Proceedings ofthe Winter Usenix Conference, </booktitle> <year> 1989. </year>
Reference-contexts: Also, NFS currently provides little security (though its securitywill be improved in the near future). In its original version, NFS did not provide any form of replication service. A subsequent version has provideda form of replication through automounting, but this replication methoddoes not automatically propagate updates <ref> [11] </ref>, making it more suitable forread-only files (like manual pages) than more general file usage. NFS lacks a protocol for automatically setting up the sharing relationship, as well. Other related systems include the Andrew File System and RFS.
Reference: 12. <author> Satyanarayanan, M., </author> <title> Integrating Security In a Large DistributedSystem, </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> Vol. 7, No. 3, </volume> <month> August </month> <year> 1989. </year>
Reference-contexts: NFS lacks a protocol for automatically setting up the sharing relationship, as well. Other related systems include the Andrew File System and RFS. The AndrewFile System <ref> [12] </ref> is meant to work in a rather different environment than Truffles. The Andrew File System consists of a distributed collection of servers (known as Vice) servicing a much larger numbers of workstations, each of which runs software known as Virtue.
Reference: 13. <author> Popek, G. and Walker, B., </author> <title> The LOCUS Distributed SystemArchitecture, </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1985. </year>
Reference-contexts: The Locus Operating System supported replicated files with automaticupdate and recovery mechanisms <ref> [13] </ref>. However, Locus ran in a single administrative domain, with all sites in close cooperation. While possible for a relatively small set of machines, this solution cannot apply to the broader case of sharing files with arbitrary users at other sites.
Reference: 14. <author> Steiner, J., Neuman, C., and Schiller, J., </author> <title> Kerberos: An AuthenticationService for Open Network Systems, </title> <booktitle> Usenix Conference Proceedings, </booktitle> <address> Winter1988. </address>
Reference-contexts: Also, since Locus typically ran within a local area network, rather than across long haul lines, and since a single administrative authority controlled the entire system, the security issues that Truffles deals with were not considerations in the Locus system. Kerberos <ref> [14] </ref> offers an authentication service that has some overlap withTIS/PEM. Kerberos is specifically designed to authenticate variousentities to each other securely. In a Kerberos system, a Kerberos serverstores a database of authentication information.
Reference: 15. <author> Champine, G., Geer, D., and Ruh, W. </author> <title> Project Athena as a Distributed Computer System,IEEE Computer, </title> <month> Sept. </month> <year> 1990. </year>
References-found: 15

