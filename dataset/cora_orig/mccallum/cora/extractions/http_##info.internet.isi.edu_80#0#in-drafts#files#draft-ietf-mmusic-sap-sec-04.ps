URL: http://info.internet.isi.edu:80/0/in-drafts/files/draft-ietf-mmusic-sap-sec-04.ps
Refering-URL: http://info.internet.isi.edu:80/in-drafts/id-abstracts.html
Root-URL: http://www.isi.edu
Author: Peter Kirstein draft-ietf-mmusic-sap-sec-.txt&gt; Goli Montasser-Kohsari 
Keyword: SAP Security Using Public Key Algorithms  
Address: College London  
Affiliation: University  
Date: March 12th 1998  March 12th 1998 Edmund Whelan Expires: September 12th 1998  
Note: Internet Draft SAP Security  Kirstein et al. Page [1] Internet Engineering Task Force MMUSIC WG Internet Draft  Status of this Memo This document is an Internet-Draft. Internet-Drafts are working documents of the Internet Engineering Task Force (IETF), its areas, and its working groups. Note that other groups may also distribute working documents as Internet-Drafts. Distribution of this document is unlimited.  
Abstract: Internet-Drafts are draft documents valid for a maximum of six months and may be updated, replaced, or obsoleted by other documents at any time. It is inappropriate to use Internet-Drafts as reference material or to cite them other than as ``work in progress.'' To learn the current status of any Internet-Draft, please check the ``1id-abstracts.txt'' listing contained in the Internet-Drafts Shadow Directories on ftp.is.co.za (Africa), ftp.nordu.net (Europe), munnari.oz.au (Pacific Rim), ds.internic.net (US East Coast), or ftp.isi.edu (US West Coast). Abstract The Session Announcement Protocol (SAP) has been specified in such a way that authentication and privacy can be assured. However the algorithms and mechanisms to achieve such security are not prescribed in the current draft. This document extends the SAP protocol, by describing specific algorithms and formats of authentication and encryption formats based on PGP and PKCS#7 standards. It is a companion document to draft-ietf-mmusic-sap. This document is a product of the Multiparty Multimedia Session Control (MMUSIC) working group of the Internet Engineering Task Force Comments are solicited and should be addressed to the working group's mailing list at confctrl@isi.edu and/or the authors. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M.Handley `SAP: </author> <title> Session Announcement Protocol'' INTERNET-DRAFT, </title> <journal> draft-ietf-mmusic-sap-00.txt, </journal> <volume> 11/27/1996. </volume>
Reference-contexts: 1. Introduction An Mbone session directory is used to advertise multimedia conferences, and to communicate the session addresses (whether multicast or unicast) and conference-tool-specific information necessary for participation. Such sessions are announced using the Session Announcement Protocol (SAP) described in a companion draft <ref> [1] </ref>. The SAP protocol allows for the incorporation of authentication of the announcement originator, and for privacy of the session details; however neither the choice of authentication algorithms used, nor the mechanisms for encrypting the SDP Session Description, are detailed in the draft. <p> In order to minimise schedule conflicts; it is desirable to keep the time of a conference known, even if all other details are concealed. Three types of announcement are supported: unsecured, authenticated and authenticated and encrypted. The unsecured type is described in the SAP specification <ref> [1] </ref> and so only the latter two types are described below. 2.2 Symmetric and Asymmetric Encryption The simplest versions of encryption are symmetric ones; here the encryption key can be calculated from the decryption key and vice versa. In most cases the encryption key and decryption key are the same. <p> If it matches, then this is considered adequate proof that the message was not altered, and that it came from the originator who owns the public key used to check the signature. Each Session announcement contains a message ID hash [4]. The specifications for SAP announcements <ref> [1] </ref> states that such announcements may be repeated frequently, but that if any change is made in the announcement, a different message ID must be used; as a result, a different message ID hash will be appended to the message. <p> The basic symmetric system is contained in SAP <ref> [1] </ref>. To improve efficiency, it would be possible to use symmetric encryption with a pre-distributed Key Identifier (KeyID). However, because of the potential weakening of the security by the use of KeyIDs, and the consequent need to use more secure symmetric algorithms, we do not recommend this technique. <p> Page [9] 3. Secured SAP Packet Formats Both Authentication and Privacy can be achieved using PGP [2] or PKCS#7 [3] format packets. Implementers MUST support PGP format with support for PKCS#7 being OPTIONAL. In Section 3.1 we discuss the generic packet format defined in SAP <ref> [1] </ref>. In Section 3.2 we consider the formats of the Authentication Header, and in Section 3.3 that of the encrypted payload. It would be possible to define our own versions of the packets for this application. <p> an additional advantage in this approach; it will be possible to send session announcements by the encrypted Session Invitation Protocol or by electronic mail using PGP or S-MIME, and reuse much of the same code as with SAP. 3.1 Secured SAP Packet Format The SAP data packets as defined in <ref> [1] </ref> has the following format: 1 2 3 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | V=2 | MT |E|C| Header Length | 16 bit Message ID Hash | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Originating Source | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Authentication Header (Optional) | | . . . . . . . . | | 32 bit Timeout Field (Optional) | <p> | | 32 bit Timeout Field (Optional) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Privacy Header (Optional) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Text Payload (possibly encrypted) | | . . . . . . . . | Notes: Version Number, V: This is a 3-bit field and has the value 2 for this version of SAP <ref> [1] </ref> Message Type, MT: This defines the contents of the payload and can be Internet Draft SAP Security March 12th 1998 Kirstein et al.
Reference: [2] <author> D.Atkins, </author> '' <title> PGP Message Exchange Formats'' , RFC 1991, </title> <month> August </month> <year> 1996. </year>
Reference-contexts: This document describes the format of the authentication header for SAP data packets that use security services based on PGP <ref> [2] </ref> or PKCS#7 [3]. The SAP document also provides for the confidentiality services required for the SDP payload [4], which describes the conference setup parameters. This document describes how both symmetric and hybrid symmetric/public key encryption algorithms should be used to provide private announcements. <p> Consequently, the messages are generally secured using a symmetric algorithm and a session key which is different each time. This session key is then encrypted and distributed using public key algorithms. Two complete systems, which can achieve both authentication and confidentiality using particular PKCS systems, are PGP <ref> [2] </ref> and PKCS#7 [3]; similar mechanisms are used, but different encryption algorithms and formats are used. The differences between the algorithm and format details for these two systems are elaborated in Sections 3.2 and 3.3. <p> As detailed later implementers MUST support PGP formats with support for PKCS#7 being OPTIONAL. 2.3 Authenticated Announcements In order to send authenticated announcements it is possible to use the algorithms of either PGP <ref> [2] </ref> or the PKCS#7 [3] systems. The resulting format will be substantially different; the exact details are given in Sections 3.2 and 3.3. For each format, the announcement originator calculates Internet Draft SAP Security March 12th 1998 Kirstein et al. Page [6] a message digest of the announcement. <p> Internet Draft SAP Security March 12th 1998 Kirstein et al. Page [9] 3. Secured SAP Packet Formats Both Authentication and Privacy can be achieved using PGP <ref> [2] </ref> or PKCS#7 [3] format packets. Implementers MUST support PGP format with support for PKCS#7 being OPTIONAL. In Section 3.1 we discuss the generic packet format defined in SAP [1]. In Section 3.2 we consider the formats of the Authentication Header, and in Section 3.3 that of the encrypted payload. <p> In the PKCS#7 cases (when the Authentication Type is 2 or 4) this is unnecessary and SHOULD be set to zero. 3.2.2 PGP Format Implementations MUST support this format. The generic description of the PGP packets is presented in <ref> [2] </ref>. For PGP the basic Format Specific Authentication Subheader comprises a digital signature packet as described in [2]. This involves the use of a hash code, or message digest algorithm, and a public key encryption algorithm. <p> The generic description of the PGP packets is presented in <ref> [2] </ref>. For PGP the basic Format Specific Authentication Subheader comprises a digital signature packet as described in [2]. This involves the use of a hash code, or message digest algorithm, and a public key encryption algorithm. The hash is taken of the text payload together with the signature classification (1 byte) and signature time stamp (4 bytes) fields as described in [2]. <p> digital signature packet as described in <ref> [2] </ref>. This involves the use of a hash code, or message digest algorithm, and a public key encryption algorithm. The hash is taken of the text payload together with the signature classification (1 byte) and signature time stamp (4 bytes) fields as described in [2]. For the case when the Authentication type is 1 the Subheader contains a Digital Signature Packet only with the hexadecimal signature classification being &lt;00&gt; or &lt;01&gt;. The only Message Digest Algorithm is 1 (MD5) and the Public Key Cryptosystem (PKC) is 1, this being the RSA system. <p> In the case of Signature Packet (c) the signature classification now takes the hexadecimal values &lt;10&gt; to &lt;13&gt;. These packets are all detailed in <ref> [2] </ref>. 3.2.3 PKCS#7 Format Support for this format is OPTIONAL. The Format Specific Authentication Subheader will, in the PKCS#7 case, have an ASN.1 ContentInfo type with the ContentType being signedData. <p> These are detailed in <ref> [2] </ref>. The Public Key Cryptosystem is 1, this being defined as the RSA system, and the only supported symmetric encryption algorithm is the IDEA algorithm, corresponding to the Conventional encryption type byte value of 1. Internet Draft SAP Security March 12th 1998 Kirstein et al. <p> Internet Draft SAP Security March 12th 1998 Kirstein et al. Page [15] 3.3.3.2 PKCS#7 Format Privacy Header If the Type is 2 then the Format Specific Privacy Header is composed of a PKCS#7 ContentInfo type with the ContentType being envelopedData. These are detailed in <ref> [2] </ref>. In this case the Text Payload, which has been symmetrically encrypted with the algorithm specified in the contentEncryptionAlgorithm field, is effectively the encryptedContent part of the structure. There will be only one recipientInfo structure corresponding to the group certificate, which has been previously distributed.
Reference: [3] <author> PKCS#7, </author> <title> Cryptographic Message Syntax Standard, </title> <institution> RSA Laboratories, </institution> <note> Version 1.5, </note> <month> November </month> <year> 1993 </year>
Reference-contexts: This document describes the format of the authentication header for SAP data packets that use security services based on PGP [2] or PKCS#7 <ref> [3] </ref>. The SAP document also provides for the confidentiality services required for the SDP payload [4], which describes the conference setup parameters. This document describes how both symmetric and hybrid symmetric/public key encryption algorithms should be used to provide private announcements. Much of this document is concerned with security considerations. <p> This session key is then encrypted and distributed using public key algorithms. Two complete systems, which can achieve both authentication and confidentiality using particular PKCS systems, are PGP [2] and PKCS#7 <ref> [3] </ref>; similar mechanisms are used, but different encryption algorithms and formats are used. The differences between the algorithm and format details for these two systems are elaborated in Sections 3.2 and 3.3. <p> As detailed later implementers MUST support PGP formats with support for PKCS#7 being OPTIONAL. 2.3 Authenticated Announcements In order to send authenticated announcements it is possible to use the algorithms of either PGP [2] or the PKCS#7 <ref> [3] </ref> systems. The resulting format will be substantially different; the exact details are given in Sections 3.2 and 3.3. For each format, the announcement originator calculates Internet Draft SAP Security March 12th 1998 Kirstein et al. Page [6] a message digest of the announcement. <p> Internet Draft SAP Security March 12th 1998 Kirstein et al. Page [9] 3. Secured SAP Packet Formats Both Authentication and Privacy can be achieved using PGP [2] or PKCS#7 <ref> [3] </ref> format packets. Implementers MUST support PGP format with support for PKCS#7 being OPTIONAL. In Section 3.1 we discuss the generic packet format defined in SAP [1]. In Section 3.2 we consider the formats of the Authentication Header, and in Section 3.3 that of the encrypted payload. <p> Thus inclusion of it within the SignedData type would be duplication and increase the packet length unnecessarily. The full specification for this ASN.1 type is available in <ref> [3] </ref>. There will only be one signerInfo and related fields corresponding to the originator of the SAP announcement. Although it would be possible to transfer the relevant information is a single signerInfo type rather than the complete ContentInfo it is considered preferable to use the latter for two reasons.
Reference: [4] <author> M.Handley, V. Jacobson, ``SDP: </author> <title> Session Description Protocol'', </title> <type> INTERNET-DRAFT, </type> <institution> draft-ietf-mmusic-sdp-02.txt, </institution> <year> 11/27/1996. </year>
Reference-contexts: This document describes the format of the authentication header for SAP data packets that use security services based on PGP [2] or PKCS#7 [3]. The SAP document also provides for the confidentiality services required for the SDP payload <ref> [4] </ref>, which describes the conference setup parameters. This document describes how both symmetric and hybrid symmetric/public key encryption algorithms should be used to provide private announcements. Much of this document is concerned with security considerations. <p> If it matches, then this is considered adequate proof that the message was not altered, and that it came from the originator who owns the public key used to check the signature. Each Session announcement contains a message ID hash <ref> [4] </ref>. The specifications for SAP announcements [1] states that such announcements may be repeated frequently, but that if any change is made in the announcement, a different message ID must be used; as a result, a different message ID hash will be appended to the message. <p> Page [10] 0 Session Descriptor Announcement Packet in which case the payload is an SDP session description as described in <ref> [4] </ref> 1 Session Description Deletion Packet in which case the payload is a single SDP line containing the origin field of the announcement to be deleted Encryption Bit, E: -. <p> Privacy Header: This is present when the text payload has been encrypted using hybrid encryption. Text Payload: When there is no encryption, the encryption bit is not set and this format is as defined in the SDP <ref> [4] </ref> draft. However, when encryption has been used the payload is encrypted and the format is discussed in Section 3.3. 3.2 Authentication Header 3.2.1 Generic Format The generic format of the Authentication Header is given below. <p> This contains the SigningTime in addition to the content type and message digest of the payload, which are included automatically. 3.3 Encrypted Payload Format 3.3.1 Generic Format The format of the Encrypted Payload depends on the type of encryption used to encrypt the SDP text payload <ref> [4] </ref>. If no encryption has been used only the Text payload is present. If encryption has been used then the encryption bit in the main SAP header is set and the payload is encrypted either symmetrically or using hybrid encryption.
Reference: [5] <author> R. Housley , W. Ford , T. </author> <title> Polk Internet Public Key Infrastructure INTERNET DRAFT, </title> <month> draft-ietf-pkix-ipki-part1-03.txt December </month> <year> 1996. </year>
Reference-contexts: Since subsequent announcements will modify caches of future conferences, it is possible otherwise to spoof an original announcement, and thereby cause a Denial of Service attack - Confidentiality of Conference Details for Session Announcement Internet Draft SAP Security March 12th 1998 Kirstein et al. Page <ref> [5] </ref> Here it is at least necessary to hide the details of the addresses and media formats used. In order to minimise schedule conflicts; it is desirable to keep the time of a conference known, even if all other details are concealed. <p> Only if the full public key information and a Certificate Authority infrastructure are accessible can the originator be identified <ref> [5] </ref>. 2.4 Authenticated and Encrypted Announcements 2.4.1 Introduction When it is desired to make private announcements, it is necessary to encrypt the setup details of the conference.
Reference: [6] <institution> National Bureau of Standards, Data Encryption Standard, Federal Information Processing Standards Publication 46, </institution> <month> January </month> <year> 1977 </year>
Reference-contexts: The resulting format will be substantially different; the exact details are given in Sections 3.2 and 3.3. For each format, the announcement originator calculates Internet Draft SAP Security March 12th 1998 Kirstein et al. Page <ref> [6] </ref> a message digest of the announcement. The originators secret key is used to encrypt the message digest, together with an electronic timestamp, thus forming a digital signature. <p> The normal way of providing such encryption is to use only a symmetric encryption algorithm such as the Data Encryption Standard (DES <ref> [6] </ref>) to encrypt such a session using a Session Encryption Key (SEK); this algorithm is used because other systems, such as the asymmetric RSA system [10], are too computation-intensive for large amounts of data - though they are economic for smaller amounts. <p> When this process takes place out of band, it is not described further in this document. Many symmetric encryption algorithms, e.g. DES <ref> [6] </ref> are known to be easy to break; with such algorithms, it is undesirable to reuse the SEK many times. For this reason, and to improve Internet Draft SAP Security March 12th 1998 Kirstein et al. <p> The last byte of the encrypted payload indicates how many padding bytes were added. The data following the Timeout field is decrypted using the algorithm specified above. Further details on the encryption algorithms are given in <ref> [6, 12, 13] </ref>. 3.3.3 Hybrid Encryption If a combination of asymmetric and symmetric encryption has been used then the part of the SAP packet following the timeout field has the following structure. <p> There will be only one recipientInfo structure corresponding to the group certificate, which has been previously distributed. The contentType in the EncryptedContentInfo structure is "Data". 3.3.4 Supported Algorithms 3.3.4.1 Symmetric Encryption If symmetric encryption alone is used then DES <ref> [6] </ref> MUST be supported. 3.3.4.2 Hybrid Encryption 3.3.4.2.1 PGP Format Content Encryption the IDEA symmetric encryption algorithm with a key length of 128 bits MUST be supported. Digest Algorithm the MD5 [18] Message Digest Algorithm MUST be supported.
Reference: [7] <author> P. Deutsch, </author> <title> ``GZIP file format specification version 4.3'', </title> <booktitle> RFC 1952, </booktitle> <month> May </month> <year> 1996. </year>
Reference-contexts: Many symmetric encryption algorithms, e.g. DES [6] are known to be easy to break; with such algorithms, it is undesirable to reuse the SEK many times. For this reason, and to improve Internet Draft SAP Security March 12th 1998 Kirstein et al. Page <ref> [7] </ref> security, a set of SEKs may be distributed out-of-band; the recipients may then try to decrypt the announcement by trying each of these SEKs in turn. <p> If this is set, the text payload has been encrypted Compression Bit, C: If this is set the payload has been compressed using the gzip compression utility <ref> [7] </ref> Header length: This is an 8 bit unsigned quantity giving the number of 32 bit words following the main SAP header that contains the authentication data.
Reference: [8] <author> D. Mills, </author> <title> ``Network Time Protocol version 2 specification and implementation", </title> <booktitle> RFC1119, 1st Sept 1989. </booktitle>
Reference-contexts: Internet Draft SAP Security March 12th 1998 Kirstein et al. Page <ref> [8] </ref> 2.4.4 Encrypting Announcements We will now provide some more detail. If the payload is to be compressed, this is performed prior to encryption as the probability that ciphertext can be appreciably compressed is small. When an announcement is to be encrypted, the payload is encrypted using symmetric encryption. <p> Page [11] stating when the session should be timed out. The digital signature in the authentication header encompasses the timeout so that a session cannot be maliciously deleted by modifying its timeout in an announcing proxy. The value is an unsigned quantity giving the NTP time <ref> [8] </ref> in seconds at which time the session is timed out. It is in network byte order and MUST be present when encryption has been used. Privacy Header: This is present when the text payload has been encrypted using hybrid encryption.
Reference: [9] <institution> X.208 Specification of Abstract Syntax Notation One (ASN.1) ITU-T Recommendations 1988 </institution>
Reference-contexts: In most cases however, the only stateful proxy will be local to (and known to) the sender, and an additional (local-area) protocol involving a handshake for such session modifications can be used to avoid this problem. Internet Draft SAP Security March 12th 1998 Kirstein et al. Page <ref> [9] </ref> 3. Secured SAP Packet Formats Both Authentication and Privacy can be achieved using PGP [2] or PKCS#7 [3] format packets. Implementers MUST support PGP format with support for PKCS#7 being OPTIONAL. In Section 3.1 we discuss the generic packet format defined in SAP [1].
Reference: [10] <institution> PKCS #1 RSA Encryption Standard RSA Laboratories, </institution> <note> Version 1.5, </note> <month> November </month> <year> 1993 </year>
Reference-contexts: Some Public Key algorithms (e.g. RSA <ref> [10] </ref>) can be used for both digital signatures and encryption whereas others (e.g. DSA) can only be used for digital signatures. Most practical implementations of public key cryptography use a combination of symmetric and asymmetric algorithms. <p> The normal way of providing such encryption is to use only a symmetric encryption algorithm such as the Data Encryption Standard (DES [6]) to encrypt such a session using a Session Encryption Key (SEK); this algorithm is used because other systems, such as the asymmetric RSA system <ref> [10] </ref>, are too computation-intensive for large amounts of data - though they are economic for smaller amounts. <p> Page <ref> [10] </ref> 0 Session Descriptor Announcement Packet in which case the payload is an SDP session description as described in [4] 1 Session Description Deletion Packet in which case the payload is a single SDP line containing the origin field of the announcement to be deleted Encryption Bit, E: -. <p> Digest Algorithm the MD5 [18] Message Digest Algorithm MUST be supported. Digest Encryption Algorithm the asymmetric rsaEncryption algorithm <ref> [10] </ref> MUST be supported with key sizes from 512 bits to 1024 bits. Key encryption Algorithm - the asymmetric rsaEncryption algorithm [10] MUST be supported with key sizes from 512 bits to 1024 bits. 3.3.4.2.2 PKCS#7 Format In order to maintain wide interoperability the algorithms supported here follow [23] where fuller <p> Digest Algorithm the MD5 [18] Message Digest Algorithm MUST be supported. Digest Encryption Algorithm the asymmetric rsaEncryption algorithm <ref> [10] </ref> MUST be supported with key sizes from 512 bits to 1024 bits. Key encryption Algorithm - the asymmetric rsaEncryption algorithm [10] MUST be supported with key sizes from 512 bits to 1024 bits. 3.3.4.2.2 PKCS#7 Format In order to maintain wide interoperability the algorithms supported here follow [23] where fuller details can be found. KeyEncryptionAlgorithmIdentifier Sending and receiving agents MUST support Diffie-Hellman defined in [21]. Receiving agents SHOULD support rsaEncryption [10]. <p> <ref> [10] </ref> MUST be supported with key sizes from 512 bits to 1024 bits. 3.3.4.2.2 PKCS#7 Format In order to maintain wide interoperability the algorithms supported here follow [23] where fuller details can be found. KeyEncryptionAlgorithmIdentifier Sending and receiving agents MUST support Diffie-Hellman defined in [21]. Receiving agents SHOULD support rsaEncryption [10]. Incoming encrypted messages contain symmetric keys which are to be decrypted with a user's private key. The size of the private key is determined during key generation. Sending agents SHOULD support rsaEncryption. <p> Internet Draft SAP Security March 12th 1998 Kirstein et al. Page [16] SignatureAlgorithmIdentifier Sending and receiving agents MUST support id-dsa defined in [22]. The algorithm parameters MUST be absent (not encoded as NULL). Receiving agents SHOULD support rsaEncryption, defined in <ref> [10] </ref>. Receiving agents SHOULD support verification of signatures using RSA public key sizes from 512 bits to 1024 bits. Sending agents SHOULD support rsaEncryption. Outgoing messages are signed with a user's private key. The size of the private key is determined during key generation.
Reference: [11] <author> H. Schulzrinne, </author> <title> ``RTP Profile for Audio and Video Conferences with Minimal Control'' RFC 1890, </title> <month> January </month> <year> 1996 </year>
Reference-contexts: This is because these fields are encrypted and the proxy is not trusted with the decryption key. Under such circumstances, SAP includes an additional 32-bit timestamp field Internet Draft SAP Security March 12th 1998 Kirstein et al. Page <ref> [11] </ref> stating when the session should be timed out. The digital signature in the authentication header encompasses the timeout so that a session cannot be maliciously deleted by modifying its timeout in an announcing proxy.
Reference: [12] <author> P. Metzger, P. Karn, W. Simpson, </author> <title> The ESP Information Triple DES-CBC Transformation, </title> <address> 10/02/1995 RFC850 </address>
Reference-contexts: This defines the format of the Authentication Subheader and can be: 1 PGP Format 2 PKCS#7 Format 3 PGP Format with the Certificate included. Internet Draft SAP Security March 12th 1998 Kirstein et al. Page <ref> [12] </ref> 4 PKCS#7 with the Certificate include Signature Length: This gives the length of the Signature. This is necessary for the case when the Authentication Type is 3 to allow the beginning of the PGP Certificate Packet to be found. <p> The last byte of the encrypted payload indicates how many padding bytes were added. The data following the Timeout field is decrypted using the algorithm specified above. Further details on the encryption algorithms are given in <ref> [6, 12, 13] </ref>. 3.3.3 Hybrid Encryption If a combination of asymmetric and symmetric encryption has been used then the part of the SAP packet following the timeout field has the following structure.
Reference: [13] <author> ANSI X3.92-1981. </author> <title> American National Standards Data Encryption Algorithm. </title> <institution> American National Standards Institute, </institution> <note> Approved 30 December 19990 </note>
Reference-contexts: If the Authentication Type is 2 there are no certificates or certificate revocation lists whereas if the authentication type is 4 the originator's X.509 certificate is added in the certificate field of this type. Internet Draft SAP Security March 12th 1998 Kirstein et al. Page <ref> [13] </ref> In addition, for both type 2 and 4, use is made of the ability in PKCS#7 to authenticate various attributes as specified in PKCS#9 [16]. The authenticatedAttributes field of the SignerInfo type is used, the authenticated attribute being the SigningTime. This is a mandatory field in this specification. <p> The last byte of the encrypted payload indicates how many padding bytes were added. The data following the Timeout field is decrypted using the algorithm specified above. Further details on the encryption algorithms are given in <ref> [6, 12, 13] </ref>. 3.3.3 Hybrid Encryption If a combination of asymmetric and symmetric encryption has been used then the part of the SAP packet following the timeout field has the following structure.
Reference: [14] <institution> For details of ENTRUST see http://www.entrust.com/ </institution>
Reference-contexts: Both PGP and PKCS#7 already have complete implementations and, by using their formats, several application tool kits are already available (e.g. Entrust <ref> [14] </ref>, Secude [15]). In addition, these formats also have complete infrastructures defined around them. For these reasons, we have chosen to retain enough compatibility to ease the eventual implementation, while simplifying the formats as far as possible within such a constraint. <p> This 31-bit field should contain a genuinely random number. Internet Draft SAP Security March 12th 1998 Kirstein et al. Page <ref> [14] </ref> Padding Bit, P: This bit indicates that the payload was padded prior to encryption. The last byte of the encrypted payload indicates how many padding bytes were added. The data following the Timeout field is decrypted using the algorithm specified above.
Reference: [15] <institution> For details of SECUDE see http://www.darmstadt.gmd.de/secude/ </institution>
Reference-contexts: Both PGP and PKCS#7 already have complete implementations and, by using their formats, several application tool kits are already available (e.g. Entrust [14], Secude <ref> [15] </ref>). In addition, these formats also have complete infrastructures defined around them. For these reasons, we have chosen to retain enough compatibility to ease the eventual implementation, while simplifying the formats as far as possible within such a constraint. <p> The Public Key Cryptosystem is 1, this being defined as the RSA system, and the only supported symmetric encryption algorithm is the IDEA algorithm, corresponding to the Conventional encryption type byte value of 1. Internet Draft SAP Security March 12th 1998 Kirstein et al. Page <ref> [15] </ref> 3.3.3.2 PKCS#7 Format Privacy Header If the Type is 2 then the Format Specific Privacy Header is composed of a PKCS#7 ContentInfo type with the ContentType being envelopedData. These are detailed in [2].
Reference: [16] <institution> PKCS#9 Selected Attribute Types, RSA Laboratories, </institution> <note> Version 1.1, November 1993 Internet Draft SAP Security March 12th 1998 Kirstein et al. Page [18] </note>
Reference-contexts: Internet Draft SAP Security March 12th 1998 Kirstein et al. Page [13] In addition, for both type 2 and 4, use is made of the ability in PKCS#7 to authenticate various attributes as specified in PKCS#9 <ref> [16] </ref>. The authenticatedAttributes field of the SignerInfo type is used, the authenticated attribute being the SigningTime. This is a mandatory field in this specification. <p> Sending agents SHOULD support rsaEncryption. If an agent supports rsaEncryption, then it MUST support encryption of symmetric keys with RSA public keys at key sizes from 512 bits to 1024 bits. Internet Draft SAP Security March 12th 1998 Kirstein et al. Page <ref> [16] </ref> SignatureAlgorithmIdentifier Sending and receiving agents MUST support id-dsa defined in [22]. The algorithm parameters MUST be absent (not encoded as NULL). Receiving agents SHOULD support rsaEncryption, defined in [10]. Receiving agents SHOULD support verification of signatures using RSA public key sizes from 512 bits to 1024 bits.
Reference: [17] <author> W. Tuchman, </author> <title> Hellman Presents No Shortcut Solutions to DES IEEE Spectrum, </title> <editor> v. </editor> <volume> 16, </volume> <editor> n. </editor> <volume> 7, </volume> <month> July </month> <year> 1979, </year> <pages> pp 40-41 </pages>
Reference-contexts: Sending agents SHOULD support rsaEncryption. Outgoing messages are signed with a user's private key. The size of the private key is determined during key generation. ContentEncryptionAlgorithmIdentifier Receiving agents MUST support encryption and decryption with DES EDE3 CBC <ref> [17] </ref>. Receiving agents SHOULD support encryption and decryption using the RC2 [20] or a compatible algorithm at a key size of 40 bits. DigestAlgorithmIdentifier Receiving agents MUST support SHA-1 [19]. Receiving agents SHOULD support MD5 [18]. Sending agents SHOULD use SHA-1. 4 Changes from Previous Draft Section 2.2 rewritten. <p> Support for PGP is now specified as MANDATORY with support for PKCS#7 being OPTIONAL. Internet Draft SAP Security March 12th 1998 Kirstein et al. Page <ref> [17] </ref>
Reference: [18] <institution> The MD5 Message Digest Algorithm RFC 1321 </institution>
Reference-contexts: Digest Algorithm the MD5 <ref> [18] </ref> Message Digest Algorithm MUST be supported. Digest Encryption Algorithm the asymmetric rsaEncryption algorithm [10] MUST be supported with key sizes from 512 bits to 1024 bits. <p> ContentEncryptionAlgorithmIdentifier Receiving agents MUST support encryption and decryption with DES EDE3 CBC [17]. Receiving agents SHOULD support encryption and decryption using the RC2 [20] or a compatible algorithm at a key size of 40 bits. DigestAlgorithmIdentifier Receiving agents MUST support SHA-1 [19]. Receiving agents SHOULD support MD5 <ref> [18] </ref>. Sending agents SHOULD use SHA-1. 4 Changes from Previous Draft Section 2.2 rewritten. Other minor changes in text.
Reference: [19] <institution> NIST FIPS PUB 180-1 Secure Hash Standard National Institute of Standards and Technology, U.S. Department of Commerce, </institution> <note> DRAFT, 31 </note>
Reference-contexts: ContentEncryptionAlgorithmIdentifier Receiving agents MUST support encryption and decryption with DES EDE3 CBC [17]. Receiving agents SHOULD support encryption and decryption using the RC2 [20] or a compatible algorithm at a key size of 40 bits. DigestAlgorithmIdentifier Receiving agents MUST support SHA-1 <ref> [19] </ref>. Receiving agents SHOULD support MD5 [18]. Sending agents SHOULD use SHA-1. 4 Changes from Previous Draft Section 2.2 rewritten. Other minor changes in text.
Reference: [20] <institution> Description of the RC2 Encryption Algorithm, Internet Draft draft-rivest-rc2desc. </institution>
Reference-contexts: Sending agents SHOULD support rsaEncryption. Outgoing messages are signed with a user's private key. The size of the private key is determined during key generation. ContentEncryptionAlgorithmIdentifier Receiving agents MUST support encryption and decryption with DES EDE3 CBC [17]. Receiving agents SHOULD support encryption and decryption using the RC2 <ref> [20] </ref> or a compatible algorithm at a key size of 40 bits. DigestAlgorithmIdentifier Receiving agents MUST support SHA-1 [19]. Receiving agents SHOULD support MD5 [18]. Sending agents SHOULD use SHA-1. 4 Changes from Previous Draft Section 2.2 rewritten. Other minor changes in text.
Reference: [21] <institution> ANSI X9.42 </institution>
Reference-contexts: KeyEncryptionAlgorithmIdentifier Sending and receiving agents MUST support Diffie-Hellman defined in <ref> [21] </ref>. Receiving agents SHOULD support rsaEncryption [10]. Incoming encrypted messages contain symmetric keys which are to be decrypted with a user's private key. The size of the private key is determined during key generation. Sending agents SHOULD support rsaEncryption.
Reference: [22] <institution> Public Key Cryptography for the Financial Services Industry: Certificate Management. ANSI X9.57-1997x ,Working Draft, </institution> <month> June </month> <year> 1996 </year>
Reference-contexts: If an agent supports rsaEncryption, then it MUST support encryption of symmetric keys with RSA public keys at key sizes from 512 bits to 1024 bits. Internet Draft SAP Security March 12th 1998 Kirstein et al. Page [16] SignatureAlgorithmIdentifier Sending and receiving agents MUST support id-dsa defined in <ref> [22] </ref>. The algorithm parameters MUST be absent (not encoded as NULL). Receiving agents SHOULD support rsaEncryption, defined in [10]. Receiving agents SHOULD support verification of signatures using RSA public key sizes from 512 bits to 1024 bits. Sending agents SHOULD support rsaEncryption.

References-found: 22

