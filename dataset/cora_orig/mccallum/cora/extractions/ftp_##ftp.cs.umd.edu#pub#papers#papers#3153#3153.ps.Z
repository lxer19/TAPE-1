URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3153/3153.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Title: RECONFIGURATION OF HIERARCHICAL TUPLE-SPACES: EXPERIMENTS WITH LINDA-POLYLITH  
Author: Gilberto Matos James Purtilo 
Note: This research is supported by the National Science Foundation under contract NSF CCR-9021222.  
Address: College Park, MD 20742  
Affiliation: Computer Science Department and Institute for Advanced Computer Studies University of Maryland  
Abstract: A hierarchical tuple-space model is proposed for dealing with issues of complexity faced by programmers who build and manage programs in distributed networks. We present our research on a Linda-style approach to both configuration and reconfiguration. After presenting the model used in our work, we describe an experimental implementation of a programming system based upon the model. 
Abstract-found: 1
Intro-found: 1
Reference: [CG89a] <author> Carriero, N., Gelerntner, D. </author> <title> Linda in Context. </title> <journal> Communications of the ACM, (April 1989), </journal> <volume> vol. 32, no. </volume> <pages> 4. </pages>
Reference-contexts: The communication in Linda consists of tuples, 1 which are messages of data without any address information. When a tuple is matched by a request for receiving a tuple, then the communication is effectively performed. Syntax of Linda can be found in detail in <ref> [CG89a] </ref>. In short, Linda consists of four primitives and some derived commands. Three main commands handle the communication and one command covers the creation of processes. <p> Linda. void main () int philo (int i) - int i,num=5; - int num; out ("NUMBER",num); rd ("NUMBER",?num); for (i=0;i&lt;num;i++) for (;;)- out ("FORK",i); work (); eval (philo (i)); in ("TICK"); if (i&gt;0) out ("TICK"); in ("FORK",i); - in ("FORK",(i+1)"%num); eat (); out ("TICK"); out ("FORK",i); out ("FORK",(i+1)"%num); - from <ref> [CG89a] </ref>. Linda gives complete dynamic reconfiguration capabilities. Every process executes some function and "dies" when the function is computed, and any process can initialize the creation of a new process.
Reference: [CG89b] <author> Carriero, N., Gelerntner, D. </author> <title> How to Write Parallel Programs: A Guide to the Perplexed. </title> <journal> ACM Computing Surveys, (September 1989), </journal> <volume> vol. 21, no. </volume> <pages> 3. </pages>
Reference-contexts: There are several types of dataflows in the application, which are interesting to us because of the different methods for adding or deleting some processes which access them. The authors of <ref> [CG89b] </ref> claim that parallel programs can be done using a small number of process types which communicate through the tuple space. Our idea is that the number of communication patterns should also be limited.

References-found: 2

