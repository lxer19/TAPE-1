URL: http://www.cs.cmu.edu/afs/cs/project/rtmach/public/papers/mmcn98.ps
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/user/raj/www/recent-papers.html
Root-URL: 
Email: -raj+, kjuvva, amolano, shui-@cs.cmu.edu  
Title: Resource Kernels: A Resource-Centric Approach to Real-Time and Multimedia Systems  
Author: Raj Rajkumar, Kanaka Juvva, Anastasio Molano and Shuichi Oikawa 
Address: Pittsburgh, PA 15213  
Affiliation: Real-Time and Multimedia Laboratory 1 Department of Computer Science Carnegie Mellon University  
Abstract: We consider the problem of OS resource management for real-time and multimedia systems where multiple activities with different timing constraints must be scheduled concurrently. Time on a particular resource is shared among its users and must be globally managed in real-time and multimedia systems. A resource kernel is meant for use in such systems and is defined to be one which provides timely, guaranteed and protected access to system resources. The resource kernel allows applications to specify only their resource demands leaving the kernel to satisfy those demands using hidden resource management schemes. This separation of resource specification from resource management allows OS-subsystem-specific customization by extending, optimizing or even replacing resource management schemes. As a result, this resource-centric approach can be implemented with any of several different resource management schemes. We identify the specific goals of a resource kernel: applications must be able to explicitly state their timeliness requirements; the kernel must enforce maximum resource usage by applications; the kernel must support high utilization of system resources; and an application must be able to access different system resources simultaneously. Since the same application consumes a different amount of time on different platforms, the resource kernel must allow such resource consumption times to be portable across platforms, and to be automatically calibrated. Our resource management scheme is based on resource reservation [25] and satisfies these goals. The scheme is not only simple but captures a wide range of solutions developed by the real-time systems community over several years. One potentially serious problem that any resource management scheme must address is that of allowing access to multiple resources simultaneously and in timely fashion, a problem which is known to be NP-complete [5]. We show that this problem of simultaneous access to multiple resources can be practically addressed by resource decoupling and resolving critical resource dependencies immediately. Finally, we demonstrate our resource kernel's functionality and flexibility in the context of multimedia applications which need processor cycles and/or disk bandwidth. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Abbott and H. Garcia-Molina. </author> <title> Scheduling Real-Time Transactions with Disk Resident Data X Server. </title> <type> Technical Report CS-TR-207-89, </type> <institution> Department of Computer Science, Princeton University, </institution> <month> February, </month> <year> 1989. </year>
Reference-contexts: This problem has not been studied extensively partly because the multiple resource problem with deadlines is known to be NP-complete [5]. Some exceptions can be found in <ref> [1, 20, 21] </ref> but their resource specification models and metrics are very different from the ones we study.
Reference: [2] <author> Baker, T. P. </author> <title> A Stack-Based Resource Allocation Policy for Real-Time Processes. </title> <booktitle> IEEE Real-Time Systems Symposium , Dec., </booktitle> <year> 1990. </year>
Reference-contexts: this proven trend by identifying, designing, implementing and evaluating significant kernel extensions to the Liu and Layland work along multiple dimensions: using arbitrary deadlines [16, 17] to obtain fine-grained control timeliness of concurrent activities, applying the priority inheritance solutions explicitly to the unbounded priority inversion problem when activities share resources <ref> [2, 31, 34] </ref>, dealing with new resource types such as disk scheduling, a problem which has not been studied in depth in the Liu and Layland model, and combining the scheduling of multiple resources into a single common framework observing that the problem of scheduling multiple resources with deadlines is known
Reference: [3] <author> Baker, T. </author> <title> Stack-Based Scheduling of Realtime Processes. </title> <journal> Journal of Real-Time Systems 3(1):67--100, </journal> <month> March </month> <year> 1991. </year>
Reference-contexts: However, it is imperative that unbounded priority inversion be eliminated, as in the use of semaphores in a priority-driven system [31, 35]. Such durations of priority inversion must be bounded and if possible minimized. Priority inheritance protocols have also been extended to dynamic priority algorithms <ref> [3, 9] </ref>. In resource kernels, we use priority inheritance in the form of reserve propagation [26] where a blocking thread inherits the scheduling priority of a higher priority reserved thread for the duration of the blocking.
Reference: [4] <author> J. C. R. Bennett and H. Zhang. </author> <title> WF 2 Q: Worst-case Fair-Weighted Fair-Queueing. </title> <booktitle> In Proceedings of INFOCOM 96. </booktitle> <month> March, </month> <year> 1996. </year>
Reference-contexts: The implementation of the resource management scheme can use, among other things, fixed priority schemes such as rate-monotonic scheduling [18] and deadline-monotonic scheduling [17], dynamic priority schemes such as earliest-deadline-first [18], or processor sharing schemes such as PGPS, virtual clocks or WF 2 Q <ref> [4] </ref>. We demonstrate two very different schemes for CPU and disk bandwidth management even though each uses the same resource specification model. Resource composability: We show that multiple resource types can be guaranteed at the same time with acceptable performance levels.
Reference: [5] <author> J. Blazewicz, W. Cellary, R. Slowinski and J. Weglarz. </author> <title> Scheduling under Resource Constraints -- Deterministic Models. </title> <journal> In Annals of Operations Research, </journal> <volume> Volume 7. </volume> <publisher> Baltzer Science Publishers, </publisher> <year> 1986. </year>
Reference-contexts: The primary difference that we see is that our work advances system capabilities to include non-traditional resources such as disk bandwidth that can be used in conjunction with processor scheduling. Finally, Blazewicz et al. <ref> [5] </ref> have shown that the problem of scheduling activities which need multiple resources simultaneously and have timeliness constraints is NP-complete. In our work, we therefore strive for practical and acceptable alternatives which can guarantee access to different resource types. 1.2. <p> resource types such as disk scheduling, a problem which has not been studied in depth in the Liu and Layland model, and combining the scheduling of multiple resources into a single common framework observing that the problem of scheduling multiple resources with deadlines is known to be an NP-complete problem <ref> [5] </ref>. 2.3. <p> On the processor side, fixed priority algorithms allow a mix of tasks with different periodicity, and hence the disk subsystem must do too. This problem has not been studied extensively partly because the multiple resource problem with deadlines is known to be NP-complete <ref> [5] </ref>. Some exceptions can be found in [1, 20, 21] but their resource specification models and metrics are very different from the ones we study. <p> Each of these reservations need to satisfy their associated deadlines given by the parameter D. However, it is known that the problem of scheduling concurrent tasks on multiple resources with timeliness constraints is NP-complete <ref> [5] </ref>. As a result, one faces the dilemma of finding a practical acceptable solution, since finding an optimal solution to the problem is very impractical. We address this problem next. 5.2.
Reference: [6] <author> S. J. Daigle and J. K. Strosnider. </author> <title> Disk Scheduling for Multimedia Data Streams. </title> <booktitle> Proceedings of the SPIE Conference on High-Speed Networking and Multimedia Networking , 1994. </booktitle>
Reference-contexts: Some exceptions can be found in [1, 20, 21] but their resource specification models and metrics are very different from the ones we study. The closest scheduling model to ours is found in <ref> [6] </ref> but its approach is one of using fixed priority scheduling, minimizing blocking through the use of "chunking" and using a static task set. Also, only simulation studies were carried out.
Reference: [7] <author> D. R. Engler, M. F. Kaashoek and J. O. Toole, Jr. Exokernel: </author> <title> An Operating System Architecture for Application-Level Resource Management. </title> <booktitle> ACM Symposium on Operating System Principles , December, </booktitle> <year> 1995. </year>
Reference-contexts: We now compare our approach with two related approaches, and summarize our research contributions. 6.1. Resource Kernels and Related Approaches We now compare the resource kernel notions with the approaches used by operating systems such as Nemesis [29] and Exokernel <ref> [7] </ref>. Nemesis and our resource kernel approach adopt a similar model of resource specification and allocation, based on the so-called -C, T- model originally proposed by Liu and Layland [18]. Nemesis implicitly assumes a deadline of T before which the C units of time must be available.
Reference: [8] <author> K. Jeffay, D. L. Stone and F. D. Smith. </author> <title> Kernel Support for Live Digital Audio and Video. </title> <booktitle> In Proceedings of the Second International Workshop on Network and Ope rating System Support for Digital Audio and Video, </booktitle> <pages> pages 10-21. </pages> <month> November, </month> <year> 1991. </year>
Reference-contexts: A range of implicit timeliness constraints need to be satisfied in this scenario. For example, audio has stringent jitter requirements, and video has high bandwidth requirements <ref> [8] </ref>. Disk accesses for compilation should take lower precedence over disk accesses for recording a live telecast.
Reference: [9] <author> K. Jeffay. </author> <title> Scheduling Sporadic Tasks with Shared Resources in Hard-Real-Time Systems. </title> <booktitle> In Proceedings of the 13th IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 89-99. </pages> <publisher> IEEE, </publisher> <month> December, </month> <year> 1992. </year>
Reference-contexts: 1. Motivation for Resource Kernels Example real-time systems include aircraft fighters such as F-22 and the Joint Strike fighter [19], beverage bottling plants, autonomous vehicles, live monitoring systems, etc. These systems are typically built using timeline based approaches, production/consumption rates <ref> [9] </ref> or priority-based schemes, where the resource demands are mapped to specific time slots or priority levels, often in ad hoc fashion. This mapping of resources to currently available scheduling mechanisms introduces many problems. <p> However, it is imperative that unbounded priority inversion be eliminated, as in the use of semaphores in a priority-driven system [31, 35]. Such durations of priority inversion must be bounded and if possible minimized. Priority inheritance protocols have also been extended to dynamic priority algorithms <ref> [3, 9] </ref>. In resource kernels, we use priority inheritance in the form of reserve propagation [26] where a blocking thread inherits the scheduling priority of a higher priority reserved thread for the duration of the blocking.
Reference: [10] <author> Joseph, M. and Pandya. </author> <title> Finding Response Times in a Real-Time System. </title> <journal> The Computer Journal (British Computing Society) 29(5) </journal> <pages> 390-395, </pages> <month> October, </month> <year> 1986. </year>
Reference-contexts: tasks using fixed priority scheduling is as follows [14]: "i, 1 i n, ( | | min i j=1 t T j In algorithmic form, the completion time CT i of a reser vation t i with a resource allocation can be computed as fol lows using a recurrence relation <ref> [10, 39] </ref>. 1. Let w 0 2. Compute w i k+1 := C j ( ) . j=1 i 3. If w i k+1 &gt; D i , CT i := . Skip to Step 6. 4. If w i i , CT i := w k i .
Reference: [11] <author> Khanna, S., Sebree, M., and Zolnowsky, J. </author> <title> Real-Time Scheduling in SunOS 5.0. </title> <booktitle> The Proceedings of USENIX 92 Winter :375-390, </booktitle> <year> 1992. </year>
Reference-contexts: Basic priority inheritance [33] is used on synchronization primitives such as mutexes and semaphores to avoid the unbounded priority inversion problem when tasks share logical resources. For example, Solaris <ref> [11] </ref>, OS/2, Windows, Windows NT, AIX, HP/UX all support the fixed priority scheduling policy. The Java virtual machine specification also does. Priority inheritance on semaphores is supported in all these OSs (except Windows NT).
Reference: [12] <author> Klein, M. H., Ralya, T., Pollak, B., Obenza, R. and Harbour, M. </author> <note> G. </note>
Reference-contexts: In addition, there must exist means for the resource demands of an application to be automatically calibrated. G6. Upward compatibility with fielded operating systems. A large host of commercial and proprietary real-time operating systems and real-time systems exist. Many of these systems employ a fixed priority scheduling policy <ref> [12] </ref> to support provide real-time behavior, and the rate-monotonic [18] or deadline-monotonic [17] priority assignment algorithm is frequently used to assign fixed priorities to tasks.
References-found: 12

