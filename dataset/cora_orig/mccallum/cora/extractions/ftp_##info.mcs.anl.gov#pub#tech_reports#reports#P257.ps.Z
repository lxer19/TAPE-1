URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/P257.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/abstracts/abstracts91.htm
Root-URL: http://www.mcs.anl.gov
Email: Email: gropp@mcs.anl.gov  
Title: PARALLEL COMPUTING AND DOMAIN DECOMPOSITION  
Author: WILLIAM GROPP 
Address: Argonne, IL 60439  
Affiliation: Mathematics and Computer Science Division Argonne National Laboratory  
Abstract: Domain decomposition techniques appear a natural way to make good use of parallel computers. In particular, these techniques divide a computation into a local part, which may be done without any interprocessor communication, and a part that involves communication between neighboring and distant processors. This paper discusses some of the issues in designing and implementing a parallel domain decomposition algorithm. A framework for evaluating the cost of parallelism is introduced and applied to answering questions such as which and how many processors should solve global problems and what impact load balancing has on the choice of domain decomposition algorithm. The sources of performance bottlenecks are discussed. This analysis suggests that domain decomposition techniques will be effective on high-performance parallel processors and on networks of workstations. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. E. Bjorstad, J. Braekhus, and A. Hvidsten, </author> <title> Parallel substructuring algorithms in structural analysis, direct and iterative methods, </title> <booktitle> in Fourth International Symposium on Domain Decomposition Methods, </booktitle> <editor> R. Glowinski, Y. A. Kuznetsov, G. Meurant, J. Periaux, and O. B. Widlund, eds., </editor> <address> Philadelphia, 1991, </address> <publisher> SIAM, </publisher> <pages> pp. 321-340. </pages>
Reference-contexts: For a more detailed examination of the time complexities of domain decomposition algorithms, see [6, 15]. For a sampling of results about parallel domain decomposition methods, see <ref> [1, 3, 7, 8, 9, 10, 11, 14, 16] </ref>. 2. Structure of Parallel Domain Decomposition Methods. Domain decomposition methods seem ideally suited for parallel computers. In their simplest form, each domain may be solved on a separate processor, yielding an apparently perfectly parallel algorithm.
Reference: [2] <author> T. Chan and R. Schreiber, </author> <title> Parallel networks for multigrid algorithms: Architecture and complexity, </title> <journal> SIAM J. Sci. Statist. Comput., </journal> <volume> 6 (1985), </volume> <pages> pp. 698-711. </pages>
Reference-contexts: on a single processor to be more efficient is for T serial &lt; T parallel communication : For example, if multigrid (V cycle) is used instead of banded Gaussian elimination, each half-cycle requires log (n) communication steps, with the i th step sending data a distance of 2 i (see <ref> [2] </ref> for a discussion of the time complexity of parallel multigrid).
Reference: [3] <author> L. Cowsar and M. F. Wheeler, </author> <title> Parallel domain decomposition method for mixed finite elements for elliptic partial differential equations, </title> <booktitle> in Fourth International Symposium on Domain Decomposition Methods, </booktitle> <editor> R. Glowinski, Y. A. Kuznetsov, G. Meurant, J. Periaux, and O. B. Widlund, eds., </editor> <address> Philadelphia, 1991, </address> <publisher> SIAM, </publisher> <pages> pp. 358-372. </pages>
Reference-contexts: For a more detailed examination of the time complexities of domain decomposition algorithms, see [6, 15]. For a sampling of results about parallel domain decomposition methods, see <ref> [1, 3, 7, 8, 9, 10, 11, 14, 16] </ref>. 2. Structure of Parallel Domain Decomposition Methods. Domain decomposition methods seem ideally suited for parallel computers. In their simplest form, each domain may be solved on a separate processor, yielding an apparently perfectly parallel algorithm.
Reference: [4] <author> J. Dongarra and L. Johnsson, </author> <title> Solving banded systems on a parallel processor, </title> <booktitle> Parallel Computing, 5 (1987), </booktitle> <pages> pp. 219-246. </pages>
Reference-contexts: The cost for this is T parallel &gt; n 3 =p + 2 (p 1) n 2 r ; where important load-imbalance effects have been ignored. (See <ref> [4, 12] </ref> and references there for a detailed discussion of the time complexity of parallel banded Gaussian elimlination. The time here is for only the solve and does not include the cost of factorization.) Fig. 5. Comparison of serial and parallel banded Gaussian elimination.
Reference: [5] <author> M. Dryja and O. B. Widlund, </author> <title> An additive variant of the Schwarz alternating method for the case of many subregions, </title> <type> Tech. Rep. TR 339, </type> <institution> NYU, Courant Institute, </institution> <month> December </month> <year> 1987. </year>
Reference-contexts: The cost has two components: balancing the work and sharing the results of the cross-point grid solution. An example of a method that allows the overlap of the solution of the cross-point problem and other work are the additive methods, such as the additive Schwarz method <ref> [5] </ref>. These methods allow all of the subproblems to be solved in parallel, seemingly avoiding any coordination overhead.

Reference: [11] <author> M. Haghoo and W. Proskurowski, </author> <title> Parallel efficiency of a domain decomposition method, in Second International Symposium on Domain Decomposition Methods, </title> <editor> T. F. Chan, R. Glowinski, J. Periaux, and O. Widlund, eds., </editor> <address> Philadelphia, 1989, </address> <publisher> SIAM, </publisher> <pages> pp. 269-281. </pages>
Reference-contexts: For a more detailed examination of the time complexities of domain decomposition algorithms, see [6, 15]. For a sampling of results about parallel domain decomposition methods, see <ref> [1, 3, 7, 8, 9, 10, 11, 14, 16] </ref>. 2. Structure of Parallel Domain Decomposition Methods. Domain decomposition methods seem ideally suited for parallel computers. In their simplest form, each domain may be solved on a separate processor, yielding an apparently perfectly parallel algorithm.
Reference: [12] <author> L. Johnsson, </author> <title> Solving narrow banded systems on ensemble architectures, </title> <journal> ACM Trans. Math. Softw., </journal> <volume> 11 (1985), </volume> <pages> pp. 271-288. </pages>
Reference-contexts: The cost for this is T parallel &gt; n 3 =p + 2 (p 1) n 2 r ; where important load-imbalance effects have been ignored. (See <ref> [4, 12] </ref> and references there for a detailed discussion of the time complexity of parallel banded Gaussian elimlination. The time here is for only the solve and does not include the cost of factorization.) Fig. 5. Comparison of serial and parallel banded Gaussian elimination.
Reference: [13] <author> H. Jordan, </author> <title> Interpreting parallel processor performance measurements, </title> <journal> SIAM J. Sci. Statist. Comput., </journal> <volume> 8 (1987), </volume> <pages> pp. </pages> <month> s220-s226. </month>
Reference-contexts: For a bus-oriented shared-memory computer, the cost is roughly rn ; where k is the maximum number of simultaneous requests on the bus <ref> [13] </ref>. It is convenient to express the times s and r relative to the cost to do a single floating-point operation (f ), and we will do so throughout this paper.
Reference: [14] <author> D. E. Keyes, </author> <title> Domain decomposition methods for the parallel computation of reacting flows, </title> <journal> Comput. Phys. Comp., </journal> <volume> 53 (1989), </volume> <pages> pp. 181-200. </pages>
Reference-contexts: For a more detailed examination of the time complexities of domain decomposition algorithms, see [6, 15]. For a sampling of results about parallel domain decomposition methods, see <ref> [1, 3, 7, 8, 9, 10, 11, 14, 16] </ref>. 2. Structure of Parallel Domain Decomposition Methods. Domain decomposition methods seem ideally suited for parallel computers. In their simplest form, each domain may be solved on a separate processor, yielding an apparently perfectly parallel algorithm.
Reference: [15] <author> D. E. Keyes and W. D. Gropp, </author> <title> A comparison of domain decomposition techniques for elliptic partial differential equations and their parallel implementation, </title> <journal> SIAM J. Sci. Stat. Comp., </journal> <volume> 8 (1987), </volume> <pages> pp. </pages> <month> s166-s202. </month> <title> [16] , Domain decomposition techniques for the parallel solution of nonsymmetric systems of elliptic boundary value problems, </title> <journal> Appl. Num. Math., </journal> <volume> 6 (1990), </volume> <pages> pp. 281-301. </pages>
Reference-contexts: Second, the costs of interprocessor communication and load balancing are important and can effectively guide the design and implementation of domain decomposition algorithms. For a more detailed examination of the time complexities of domain decomposition algorithms, see <ref> [6, 15] </ref>. For a sampling of results about parallel domain decomposition methods, see [1, 3, 7, 8, 9, 10, 11, 14, 16]. 2. Structure of Parallel Domain Decomposition Methods. Domain decomposition methods seem ideally suited for parallel computers.
Reference: [17] <author> P. H. Worley, </author> <title> Information requirements and the implications for parallel computation, </title> <type> Tech. Rep. </type> <institution> STAN-CS-88-1212, Computer Science Department, Stanford University, </institution> <month> June </month> <year> 1988. </year>
Reference-contexts: Unavoidable Overhead. It is natural to ask whether an efficient, perfectly parallel algorithm for solving partial differential equations (PDEs) numerically exist. Unfortunately, there is no such algorithm. Worley <ref> [17] </ref> has shown that perfectly parallel algorithms for PDEs do not exist and that, for a given accuracy, there is a lower bound on the time it will take to achieve this accuracy.
References-found: 11

