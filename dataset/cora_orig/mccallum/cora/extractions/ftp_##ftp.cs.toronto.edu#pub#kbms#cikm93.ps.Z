URL: ftp://ftp.cs.toronto.edu/pub/kbms/cikm93.ps.Z
Refering-URL: ftp://ftp.cs.toronto.edu/pub/kbms/readme.html
Root-URL: 
Email: e-mail:thodoros@cs.toronto.edu  
Title: Storage Management for Knowledge Bases  
Author: Thodoros Topaloglou 
Address: Toronto, Ontario, M5S 1A4  
Affiliation: Department of Computer Science University of Toronto  
Abstract: Secondary memory storage plays a major role in making large knowledge bases usable. This paper presents such a storage architecture for knowledge bases. In particular, the Controlled Decomposition Model, a flexible storage model which takes into account the numerous and expressive features of the knowledge representation model is defined. Second, the indexing problem for the knowledge base context is examined and the Temporal Join Index is proposed. An implementation technique for temporal indices, based on a spatial access method, is presented. Finally, an analytical and experimental performance study is conducted to account the performance limits of the proposed methods. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.F. Allen. </author> <title> Maintaining Knowledge about Temporal Intervals. </title> <journal> CACM, </journal> <volume> 26(11) </volume> <pages> 832-843, </pages> <year> 1983. </year>
Reference-contexts: Two novel aspect of Telos are the treatment of attributes as first-class citizens and the provision of special representational and inferential capabilities for temporal knowledge. Structural and assertional knowledge is organized along in-stantiation, generalization and aggregation dimensions. Telos adopts Allen's <ref> [1] </ref> interval-based time framework for representing possible histories of generic events (historical time) and activities, as well as the system's knowledge of these histories (belief time). An example Telos knowledge base, in the form of a semantic network is shown on figure 1.
Reference: [2] <author> E. Bertino and W. Kim. </author> <title> Indexing Techniques for Queries on Nested Objects. </title> <journal> IEEE Transactions on Knowledge & Data Engineering, </journal> <volume> 1(2) </volume> <pages> 196-214, </pages> <year> 1989. </year>
Reference-contexts: Selections on nested-attributes or path queries are very common in Telos. In object-oriented databases, three different indexing methods were proposed for the very same problem <ref> [2] </ref>: the nested index, the path index and the multi-index. The role of time in attribute relationships make all the above indexing methods inapplicable in Telos case. Figure 5b shows the way in which identifiers of company instances are connected to identifiers of employees. <p> The product m fi r fi d quantifies the degree of sharing in <ref> [2] </ref>. Without restriction of generality, we assume that multivaluedness is caused only by the time, i.e. m=1. The index access operations make use of the indices defined in section 5.
Reference: [3] <author> Alexandros Biliris. </author> <title> The Performance of Three Database Storage Structures for Managing Large Objects. </title> <booktitle> In Proc. of ACM/SIGMOD, </booktitle> <year> 1992. </year>
Reference-contexts: So far, we attach an index to frequently queried attributes with substantial domain cardinality, e.g., name and salary. For the implementation of the physical layer we can utilize an existing database storage kernel (EXODUS [4], DASDBS [27] and EOS <ref> [3] </ref> are considered as candidates). 5 Temporal Indices 5.1 The Temporal Join Index Given two classes C1 and C2 and a time-dependent attribute, attr, of C1 which takes as values instances of C2, a temporal join index relation (TJI hereafter) is defined as: T J I = fhoid (r); oid (s);
Reference: [4] <author> M. Carey, D. DeWitt, J. Richardson, and E. Shekita. </author> <title> Object and File Management in the EXODUS Extensible Database System. </title> <booktitle> In Proc. of 12th VLDB, </booktitle> <pages> 91-100, </pages> <year> 1986. </year>
Reference-contexts: So far, we attach an index to frequently queried attributes with substantial domain cardinality, e.g., name and salary. For the implementation of the physical layer we can utilize an existing database storage kernel (EXODUS <ref> [4] </ref>, DASDBS [27] and EOS [3] are considered as candidates). 5 Temporal Indices 5.1 The Temporal Join Index Given two classes C1 and C2 and a time-dependent attribute, attr, of C1 which takes as values instances of C2, a temporal join index relation (TJI hereafter) is defined as: T J I
Reference: [5] <author> A. Chan, S. Danberg, S. Fox, W.-T. Lin, A. Nori, and D. Ries. </author> <title> Storage and Access Structures to Support a Semantic Data Model. </title> <booktitle> In Proc. of 8th VLDB, </booktitle> <pages> 308-316, </pages> <year> 1982. </year>
Reference-contexts: Both of them influence the way in which instances of classes are stored and indexed in the presence of IsA hierarchies. Some solutions to this problem have been proposed in the fields of object-oriented databases [18], and semantic data models [26], <ref> [5] </ref>. The aggregation relationships suggest the way that the components of objects are structured together. Two techniques have been proposed for the implementation of aggregation in object-oriented databases: The use of object identifiers (OIDs) [15], [33], [16], [22] and the use of nested structures [27], [9], [8].
Reference: [6] <author> V. Chaudhri, V. Hadzilacos, and J. Mylopoulos. </author> <title> Concurrency Control for Knowledge Bases. </title> <booktitle> In Proc. of KRR-92, </booktitle> <year> 1992. </year>
Reference-contexts: The Telos/KBMS approach reforms all the issues starting from the storage manager and the cost model and going to query processing and optimization [31], concurrency control <ref> [6] </ref>, and integrity enforcement [28]. As for future research, there exist a number of issues which demand further work. In storage management, the adoption of a physical storage kernel can give us a more precise clue of the record placement problem and the potential clustering policies.
Reference: [7] <author> G.P. Copeland and S.N. Khoshafian. </author> <title> A Decomposition Storage Model. </title> <booktitle> In Proc. of ACM/SIGMOD, </booktitle> <pages> 268-279, </pages> <year> 1985. </year>
Reference-contexts: It is a flexible combination of the direct (nary) storage model (NSM) and the decomposition storage model (DSM) <ref> [7] </ref>, [33]. The DSM has been proposed as an implementation technique for relational and complex object databases. It is based on the principle of vertical partitioning, i.e. for each attribute of a class it defines a separate relation. <p> The following equations show the required storage of NSM and DSM respectively. rds (NSM) = k=0 rds (DSM) = p 0 (v + i + t)N + 2c 0 (2i + t)N (2) Note that equations 1 and 2 modify the formulas for NSM and DSM storage of <ref> [7] </ref>, taking into account attributes defined over IsA hierarchies. In CDM, the degree of decomposition depends on (a) the average enumber of attributes with complex domains (parameter c 0 ) and (b) the average number of attributes that are introduced at the subclasses (parameter l). <p> We considered IsA trees up to height of 4. The storage cost of the CDM and the NSM is computed relatively to the NSM cost. These results obtained verify the claim of <ref> [7] </ref> that DSM requires 2 to 4 times more data storage than NSM. After a large number of experiments we found that CDM needs in average 65% of the required space of DSM. 6.2 Update Cost Among the design criteria for the CDM is its performance on updates.
Reference: [8] <author> P. Dadam, K. Kuspert, F. Anderson, H. Blanken, R. Erbe, J. Gunauer, V. Lum, P. Pistor, G. </author> <month> Walch. </month>
Reference-contexts: The aggregation relationships suggest the way that the components of objects are structured together. Two techniques have been proposed for the implementation of aggregation in object-oriented databases: The use of object identifiers (OIDs) [15], [33], [16], [22] and the use of nested structures [27], [9], <ref> [8] </ref>. The access patterns with regards the temporal knowledge, stored in a knowledge base, define additional requirements for the logical and physical organization of the knowledge base storage. Deductive rules and integrity constraints define logical connections between parts of the knowledge base.
References-found: 8

