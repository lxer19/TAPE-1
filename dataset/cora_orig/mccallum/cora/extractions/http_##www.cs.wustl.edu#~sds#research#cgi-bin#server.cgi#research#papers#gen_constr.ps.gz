URL: http://www.cs.wustl.edu/~sds/research/cgi-bin/server.cgi/research/papers/gen_constr.ps.gz
Refering-URL: http://www.cs.wustl.edu/~sds/research/type.html
Root-URL: 
Title: Genetic Algorithms and General Constraints  
Author: Stephen D. Scott, Ashok Samal and Trent Bills 
Address: Lincoln, Nebraska, USA 68588-0115  
Affiliation: Department of Computer Science and Engineering University of Nebraska-Lincoln  
Abstract: Genetic algorithms, while robust solution space searching methods, do not perform well when faced with general constraints. In some applications, for example the Traveling Salesperson Problem, problem-specific operators and codings can be developed. However, general constraints are still problematic. Described here are general methods to find an optimal or near-optimal solution to a problem while violating few if any constraints. We start by defining a function which measures the validity of a string. Validity measures how well a string satisfies the constraints. A method to approximate validity is also given. The structure of genetic algorithm is modified to incorporate the validity of strings. Preliminary experiments are performed and the results show that this theory has promise. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> James C. Bean. </author> <title> Genetics and random keys for sequencing and optimization. </title> <institution> Department of Industrial and Operations Engineering, Univiersity of Michigan, Ann Arbor, Michigan, </institution> <month> June </month> <year> 1992. </year>
Reference-contexts: It uses floating point genes and crossover as follows: given two strings X 1 = hv 1 ; : : : ; v q i and X 2 = hy 1 ; : : : ; y q i, use a binary search to find a value a 2 <ref> [0; 1] </ref> such that the following offspring are feasible: X 1 = hv 1 ; : : : ; v k ; y k+1 a + v k+1 (1 a); : : : ; y q a + v q (1 a)i X 2 = hy 1 ; : : : <p> This technique has been applied to the TSP by Bean <ref> [1] </ref> with the use of random keys. A tour is represented by a list of random numbers, e.g. (0.50 0.23 0.79 0.43). This string is decoded into a valid tour before evaluation.
Reference: [2] <author> David E. Goldberg. </author> <title> Genetic Algorithms in Search, Optimization, and Machine Learning. </title> <publisher> Addison-Wesley Publishing Company, Inc., </publisher> <address> Reading, Massachusetts, </address> <year> 1989. </year>
Reference-contexts: The core GA operators|reproduction, crossover, inversion and mutation|involve only random number generation, copying, and partial string exchange. Thus, GAs are simple to implement and difficult to trick <ref> [2] </ref>. In many cases, however, the simplicity of the operators causes some problems. A typical GA searches the whole solution space for an optimal solution. When constraints are applied to the domain, only a subspace of the entire search space is valid. <p> Each approach is briefly described below. 2.1 Problem-Specific Operators Problem-specific operators use special crossover and mutation operators to ensure that only valid strings are generated. This type of method has been applied to the TSP by Goldberg and Lingle <ref> [2] </ref> with their partially matched crossover (PMX) operator. In PMX, the genes of the two mating chromosomes (permutations of the cities in the tour) are combined in such a way so that the two offspring are also permutations of the cities and thus valid strings. <p> Similar operations also occur in order crossover (OX), cycle crossover (CX), and other specialized crossover operators <ref> [2] </ref>. With the GENOCOP system [4, 3], Michalewicz and Attia optimize functions in numeric domains subject to linear constraints.
Reference: [3] <author> Zbigniew Michalewicz. </author> <title> Genetic Algorithms + Data Structures = Evolution Programs. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: Similar operations also occur in order crossover (OX), cycle crossover (CX), and other specialized crossover operators [2]. With the GENOCOP system <ref> [4, 3] </ref>, Michalewicz and Attia optimize functions in numeric domains subject to linear constraints.
Reference: [4] <author> Zbigniew Michalewicz and Naguib F. Attia. GENOCOP: </author> <title> a hybrid nonlinear optimization tool. </title> <editor> Avaliable from zbyszek@mosaic.uncc.edu (Zbigniew Michalewicz), </editor> <year> 1992. </year>
Reference-contexts: Similar operations also occur in order crossover (OX), cycle crossover (CX), and other specialized crossover operators [2]. With the GENOCOP system <ref> [4, 3] </ref>, Michalewicz and Attia optimize functions in numeric domains subject to linear constraints. <p> So far fi = 0:5 seems to be the most logical choice. 6 Implementation and Results A preliminary implementation incorporating the ideas presented in the previous sections has been completed. Early results show promise. Several test cases given in <ref> [4] </ref> have been tried. In this section we discuss in detail the performance of one test case and summarize the others. The steps performed are as follows. First a population of size 100,000 is generated and each member's validity is evaluated using g (C; S). <p> Then the z j s and z j s are calculated using Equations 1 and 2. The GA is run normally except that h fl (S) is used as the evaluation function rather than f (S). 6.1 Sample Test Case This is test case #1 in <ref> [4] </ref>. <p> After 2000 generations, 92% of the population was completely valid and the remaining strings violated only one constraint. 6.2 Summary of Other Test Cases Our other test cases are #5 and #7 in <ref> [4] </ref>. While these results are not optimal, they are promising. The average validity of the population increases dramatically during the GA runs, as does the percentage of completely valid strings in the populations. We also obtained better results when weighting different kinds of constraints differently (see Section 3).
Reference: [5] <author> Jon T. Richardson, Mark R. Palmer, Gunar Liepins, and Mike Hilliard. </author> <title> Some guidelines for genetic algorithms with penalty functions. </title> <booktitle> In Proceedings of the First International Conference on Genetic Algorithms, </booktitle> <pages> pages 191-197, </pages> <year> 1989. </year> <month> 10 </month>
Reference-contexts: Possible 2 reactions to constraint violations include discarding the violator, coercing it to a valid value, and degrading its fitness. However, these methods either require checking each new offspring against the constraints (which could be very expensive) or are very domain-specific (e.g. require derivative information). Richardson et al. <ref> [5] </ref> have given several hypotheses regarding the nature of the penalty functions. No specific approaches to design general purpose penalty functions are given. 3 Constraints A constraint is any form of restriction on points in the solution space.
References-found: 5

