URL: ftp://ftp.cse.cuhk.edu.hk/pub/techreports/94/tr-94-17.ps.gz
Refering-URL: ftp://ftp.cs.cuhk.hk/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: email: bmtong@cs.cuhk.hk, lhf@cs.cuhk.hk  
Title: Implementation of a Data-Parallel Concurrent Constraint Programming System  
Author: Bo-Ming Tong and Ho-Fung Leung 
Keyword: Data-Parallelism, Finite Domain Constraint, Concurrent Constraint Programming  
Address: Shatin, New Territories Hong Kong  
Affiliation: Department of Computer Science The Chinese University of Hong Kong  
Note: Proceedings of PASCO'94 c 1994 by World Scientific Publishing Company  
Abstract: In [12], we proposed Firebird, a new concurrent constraint programming language [9] which supports both concurrency and data-parallelism. Committed-choice indeterminism and don't know nondeterminism are integrated, but in a manner different from the Andorra Model [16]. Instead of nondeterminate clauses, finite domain variables form the basis of don't know nondeterminism in Firebird. After a domain variable is labeled, all possible values in its domain are attempted in an or-parallel manner. A data-parallel implementation of Firebird has been built. The aim of this paper is to present: 1, the scheduler and 2, the parallel backtracking scheme of Firebird, which are not described in [12]. Our concurrent process scheduler uses simple data-parallel algorithms for process resumption and deadlock detection. On the other hand, when the number of processor elements is not enough for exploiting or-parallelism, the system resorts to parallel backtracking automatically. We present the data structures necessary for maintaining a vector trail stack and methods for restoring all process queues to their original states upon backtracking. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. At-Kaci. </author> <title> Warren's Abstract Machine: A Tutorial Reconstruction. </title> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: If the set is empty, the original goal can be discarded because it is meaningless to ex ecute a goal with an empty mask. 2.3 Data-Parallel Abstract Ma chine The Data-Parallel Abstract Machine (DPAM) 1 is the basis of the implementation of Firebird. The knowledge of WAM <ref> [1] </ref> is assumed. 2.3.1 Hardware We assume that the implementation platform consists of a sequential front end called the host computer and a data-parallel back end called the processor element array. <p> An n-ary goal or tell constraint is compiled to a procedure which takes n input arguments, which are stored in general purpose vector registers p1 to pn. The mask bit vector defines the set of physical partitions in which the procedure is applicable. In WAM <ref> [1] </ref>, failure is like a fault or an exception. When a failure occurs execution continues 386 PASCO'94: First International Symposium on Parallel Symbolic Computation directly at the next clause. <p> In synchronous backtracking, a physical partition will be idle after all its alternatives have been attempted. As a result, even if we exploit or-parallelism in partitions with enough processor elements, such partitions will still have to wait for those partitions using backtracking. Like WAM <ref> [1] </ref>, a choice point is freed before the last possible value is attempted (since only one choice is left, the system may `commit' to that choice). <p> They can be accessed at any time via hb. The consumed heap space can be reclaimed when the choice point is freed. 4.2 Trailing The trailing scheme of WAM <ref> [1] </ref> is extended for use in a data-parallel context. The trail stack resides in the vector memory of the processor element array. Each entry in the trail is composed of a &lt;mask, address, old value&gt; triplet. The scalar tr points to the top of the trail stack.

Reference: [3] <author> J. Barklund and H. Millroth. </author> <title> Providing iteration and concurrency in logic programs through bounded quantifications. </title> <booktitle> In Proceedings of the International Conference on Fifth Generation Computer Systems, </booktitle> <pages> pages 817-824, </pages> <publisher> ICOT, </publisher> <address> Japan, </address> <year> 1992. </year>
Reference-contexts: They attack the problem of scheduling and-parallel processes in a language without constraints. Barklund and Millroth <ref> [3] </ref> propose a scheme called Bounded Quantifications to compile recursive constructs in Prolog to iterative ones suitable for data-parallel execution. An abstract machine and its performance results on a Connection Machine simulator are presented in [2].
Reference: [4] <author> J. Crammond. </author> <title> The abstract machine and implementation of Parallel Parlog. </title> <type> Technical report, </type> <institution> Department of Computing, Imperial College, </institution> <address> London, </address> <month> July </month> <year> 1990. </year>
Reference-contexts: See Figure 6 for an example of the above algorithm at work. Method 2 The traditional scheme using no hash queues can be used. Instead of a process-id, the head of each suspension list node contains the pointer to a scalar hanger <ref> [4] </ref> residing on the host. The hanger will point to the process structure. When a process is resumed the hanger will be zeroed to prevent the process from being resumed more than once. <p> The falsely resumed physical partitions will execute the process alongside with the others without any additional cost. If these physical partitions commit we actually save execution time. Otherwise, they will just re-suspend. Unlike Parallel Parlog <ref> [4] </ref>, we do not make any distinction between single-suspension and multi-suspension because 1. The Parallel Parlog scheme improves the efficiency of single-suspension, but for finite domain constraints, multi-suspension is more the rule than the exception.
Reference: [5] <author> D. Diaz and P. Codognet. </author> <title> A minimal extension of the WAM for clp(FD). </title> <booktitle> In Logic Programming: Proceedings of the Tenth International Conference, </booktitle> <pages> pages 774-790, </pages> <address> Bu-dapest, Hungary, 1993. </address> <publisher> The MIT Press. </publisher>
Reference-contexts: Smith [10] describes a data or-parallel logic programming language MultiLog and its implementation on a variety of architectures. 2 Firebird: A Review In this section, we shall give a brief review of [12]. The reader is referred to <ref> [15, 5] </ref> for an introduction to the use of finite domain constraints in logic programming. 2.1 The Firebird Computation Model In Firebird, the notions of committed-choice indeterminism and don't know nondeterminism are integrated using the Firebird Computation Model. <p> We do not trail the whole bit vector as in <ref> [5] </ref>, but create a new bit vector on the top of the heap, modify the bit vector pointer field of the domain variable and trail the modification of the pointer instead.
Reference: [6] <author> S. Kliger and E. Shapiro. </author> <title> From decision trees to decision graphs. </title> <booktitle> In Proceedings of the 1990 North American Conference on Logic Programming, </booktitle> <pages> pages 97-116, </pages> <address> Austin, 1990. </address> <publisher> ALP, The MIT Press. </publisher>
Reference-contexts: The compiler employs the decision graph <ref> [6] </ref> technique to compile a Firebird program to DPAM code. The instruction set is designed in such a way that the same compiler can be used for both sequential and data-parallel implementations.
Reference: [7] <author> M. Nilsson and H. Tanaka. </author> <title> A flat GHC implementation for supercomputers. </title> <booktitle> In Logic Programming: Proceedings of the Fifth International Conference and Symposium, </booktitle> <pages> pages 1337-1350, </pages> <address> Seatle, 1988. </address> <publisher> ALP, IEEE, The MIT Press. </publisher>
Reference-contexts: This problem has not been solved in [12]. In this paper, we propose to use backtracking. Methods are needed for restoring the heap and the process queues maintained by the concurrent process scheduler to their original states upon backtracking. 1.2 Related Work Nilsson and Tanaka <ref> [7, 8] </ref> describe implementations of the committed-choice, flat concurrent logic programming Fleng on a vector supercomputer and a data-parallel computer. They attack the problem of scheduling and-parallel processes in a language without constraints.
Reference: [8] <author> M. Nilsson and H. Tanaka. </author> <title> Massively parallel implementation of flat GHC on the Connection Machine. </title> <booktitle> In Proceedings of the International Conference on Fifth Generation Computer Systems, </booktitle> <pages> pages 1031-1040, </pages> <address> Japan, 1988. </address> <publisher> ICOT. </publisher>
Reference-contexts: This problem has not been solved in [12]. In this paper, we propose to use backtracking. Methods are needed for restoring the heap and the process queues maintained by the concurrent process scheduler to their original states upon backtracking. 1.2 Related Work Nilsson and Tanaka <ref> [7, 8] </ref> describe implementations of the committed-choice, flat concurrent logic programming Fleng on a vector supercomputer and a data-parallel computer. They attack the problem of scheduling and-parallel processes in a language without constraints.
Reference: [9] <author> V. A. Saraswat. </author> <title> A somewhat logical formulation of CLP synchronisation primitives. </title> <booktitle> In Logic Programming: Proceedings of the Fifth International Conference and Symposium, </booktitle> <pages> pages 1298-1314, </pages> <address> Seatle, 1988. </address> <publisher> ALP, IEEE, The MIT Press. </publisher>
Reference-contexts: 1 Introduction The aim of this paper is to describe the design of: 1, a concurrent process scheduler and 2, a parallel backtracking scheme for the data-parallel execution of a concurrent constraint programming language <ref> [9] </ref>. In our last paper [12], we presented, to the best of our knowledge, the first data-parallel concurrent constraint programming system. We found that finite domain constraint languages can be implemented efficiently on massively parallel SIMD computer systems. A new language called Firebird has been designed.
Reference: [10] <author> D. A. Smith. MultiLog: </author> <title> Data or-parallel logic programming. </title> <booktitle> In Logic Programming: Proceedings of the Tenth International Conference, </booktitle> <pages> pages 314-331, </pages> <address> Budapest, Hungary, 1993. </address> <publisher> The MIT Press. </publisher>
Reference-contexts: Barklund and Millroth [3] propose a scheme called Bounded Quantifications to compile recursive constructs in Prolog to iterative ones suitable for data-parallel execution. An abstract machine and its performance results on a Connection Machine simulator are presented in [2]. Smith <ref> [10] </ref> describes a data or-parallel logic programming language MultiLog and its implementation on a variety of architectures. 2 Firebird: A Review In this section, we shall give a brief review of [12]. <p> If the data-parallel computer has N processor elements and a choice point with 5 alternatives is created, N 5 processor elements will be allocated to each alternative. Since a processor-id is associated with each processor element, each processor element can compute which alternative it should take autonomously. Compared to <ref> [10] </ref>, our model has the advantage that interprocessor communication is not necessary. 2.2.3 Masks Consider the following example. p ([H|T]) :- H &gt; 0 | q (H), p (T).
Reference: [11] <author> B. M. Tong. </author> <title> Data-parallel concurrent constraint programming. M. </title> <type> Phil. thesis, </type> <institution> Department of Computer Science, The Chinese University of Hong Kong, Hong Kong, </institution> <year> 1994. </year>
Reference-contexts: When a process suspended after the last choice point is resumed it is removed from the suspension queue. 5 Results Due to lack of space, we present only the execution time of our implementation in Table 2. A detailed performance evaluation can be found in <ref> [11] </ref>. DL is the number of deadlocks, P the number of partitions (measured at the end of execution), and BT the number of backtrack-ings. Results are given in seconds, excluding any input/output time. Performance of CHIP version 3.2 on DECstation 3100 is included for comparison.
Reference: [12] <author> B. M. Tong and H. F. Leung. </author> <title> Concurrent constraint logic programming on Massively parallel SIMD computers. </title> <booktitle> In Logic Programming: Proceedings of the 1993 International Symposium, </booktitle> <pages> pages 388-402, </pages> <address> Vancou-ver, Canada, 1993. </address> <publisher> The MIT Press. </publisher>
Reference-contexts: 1 Introduction The aim of this paper is to describe the design of: 1, a concurrent process scheduler and 2, a parallel backtracking scheme for the data-parallel execution of a concurrent constraint programming language [9]. In our last paper <ref> [12] </ref>, we presented, to the best of our knowledge, the first data-parallel concurrent constraint programming system. We found that finite domain constraint languages can be implemented efficiently on massively parallel SIMD computer systems. A new language called Firebird has been designed. <p> In a nondeterministic derivation step, a choice point based on one of the domain variables in the system is set up and all possible values in its domain are attempted in an or-parallel manner. In <ref> [12] </ref>, we also described the data-parallel execution model of Firebird. PASCO'94: First International Symposium on Parallel Symbolic Computation 383 1.1 Motivation 1. In our last paper [12], the concurrent process scheduler is not described. <p> In <ref> [12] </ref>, we also described the data-parallel execution model of Firebird. PASCO'94: First International Symposium on Parallel Symbolic Computation 383 1.1 Motivation 1. In our last paper [12], the concurrent process scheduler is not described. However, some simple data-parallel algorithms for the resumption of processes and deadlock detection are necessary for the data-parallel implementation. These problems will be discussed in this paper. 2. Many real-world problems are combinatorial in nature. <p> These problems will be discussed in this paper. 2. Many real-world problems are combinatorial in nature. Even thousands of processor elements may be depleted when or-parallelism is exploited. This problem has not been solved in <ref> [12] </ref>. In this paper, we propose to use backtracking. <p> An abstract machine and its performance results on a Connection Machine simulator are presented in [2]. Smith [10] describes a data or-parallel logic programming language MultiLog and its implementation on a variety of architectures. 2 Firebird: A Review In this section, we shall give a brief review of <ref> [12] </ref>. The reader is referred to [15, 5] for an introduction to the use of finite domain constraints in logic programming. 2.1 The Firebird Computation Model In Firebird, the notions of committed-choice indeterminism and don't know nondeterminism are integrated using the Firebird Computation Model. <p> The knowledge of WAM [1] is assumed. 2.3.1 Hardware We assume that the implementation platform consists of a sequential front end called the host computer and a data-parallel back end called the processor element array. The host computer is responsible for dispatching instructions and 1 Also known previously in <ref> [12] </ref> as the Firebird Abstract Machine. PASCO'94: First International Symposium on Parallel Symbolic Computation 385 broadcasting data to the processor element array. Memory is distributed over the processor element array and each processor element has its own local memory.
Reference: [13] <author> K. Ueda. </author> <title> Guarded horn clauses. </title> <editor> In E. Wada, editor, </editor> <booktitle> Logic Programming '85 | Proceedings of the 4th Conference, Lecture Notes in Computer Science 221, </booktitle> <pages> pages 168-179, </pages> <address> Tokyo, July 1985. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: A new language called Firebird has been designed. Its syntax is similar to mainstream logic programming languages, fl Present address: Department of Computer Science, University of Arizona, Tucson, AZ 85721, U.S.A. email: bmtong@cs.arizona.edu in particular, flat GHC <ref> [13] </ref>. The most distinguishing semantic feature of this language is that committed-choice indeterminism is integrated with don't know nondeterminism by adopting the notion of domain-variable-based choice points. In an indeterministic derivation step, execution consists of guard tests, commitment and spawning in the same manner as committed-choice concurrent constraint programming languages.
Reference: [14] <author> P. Van Hentenryck. </author> <title> Constraint Satisfaction in Logic Programming. </title> <publisher> MIT Press, </publisher> <year> 1989. </year>
Reference-contexts: In a nondeterministic derivation step, a choice point based on one of the domain variables in the system is set up and all possible values in its domain are attempted in an or-parallel manner. The domain variable is said to be labeled <ref> [14] </ref> and each or-parallel branch is called a partition.
Reference: [15] <author> P. Van Hentenryck, V. A. Saraswat, and Y. Deville. </author> <title> Design, implementation and evaluation of the constraint language cc(FD). </title> <type> Technical Report CS-93-02, </type> <institution> Department of Computer Science, Brown University, Providence, </institution> <year> 1993. </year>
Reference-contexts: Smith [10] describes a data or-parallel logic programming language MultiLog and its implementation on a variety of architectures. 2 Firebird: A Review In this section, we shall give a brief review of [12]. The reader is referred to <ref> [15, 5] </ref> for an introduction to the use of finite domain constraints in logic programming. 2.1 The Firebird Computation Model In Firebird, the notions of committed-choice indeterminism and don't know nondeterminism are integrated using the Firebird Computation Model.
Reference: [16] <author> D. H. D. Warren. </author> <title> The extended Andorra model with implicit control. </title> <booktitle> Presented at ICLP '90 Workshop on Parallel Logic Programming, </booktitle> <address> Jerusalem, </address> <year> 1990. </year>
References-found: 15

