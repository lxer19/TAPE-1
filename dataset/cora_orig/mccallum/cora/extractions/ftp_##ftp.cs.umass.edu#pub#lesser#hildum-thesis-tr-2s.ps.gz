URL: ftp://ftp.cs.umass.edu/pub/lesser/hildum-thesis-tr-2s.ps.gz
Refering-URL: http://dis.cs.umass.edu/publications.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: EMAIL: hildum@cs.umass.edu  
Title: FLEXIBILITY IN A KNOWLEDGE-BASED SYSTEM FOR SOLVING DYNAMIC RESOURCE-CONSTRAINED SCHEDULING PROBLEMS  
Author: David W. Hildum 
Address: Amherst MA 01003-4610  
Affiliation: Department of Computer Science University of Massachusetts  
Abstract: UMass CMPSCI Technical Report 94-77 September 1994 This research was sponsored, in part, by gifts from Texas Instruments, Inc., the National Science Foundation, under CER Grant DCR-8500332 and contracts CDA-8922572 and IRI-9208920, and the Office of Naval Research, under a Defense Advanced Research Projects Agency Grant (contract N00014-92-J-1698). Machine resources were supported by the Office of Naval Research, under a University Research Initiative Grant (contract N00014-86-K-0764). The content of this dissertation does not necessarily reflect the position or the policy of the Government and no official endorsement should be inferred. 
Abstract-found: 1
Intro-found: 1
Reference: [ Adams et al., 1988 ] <author> Joseph Adams, Egon Balas, and Daniel Zawack. </author> <title> The shifting bottleneck procedure for job shop scheduling. </title> <journal> Management Science, </journal> <volume> 34(3) </volume> <pages> 391-401, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: Further work involving the introduction of another level into the hierarchy to take responsibility for the dependability and reliability of schedules during execution is planned. 2.1.5 Other Operations Research Approaches An interesting alternative approach for solving RCSPs is presented in <ref> [ Adams et al., 1988 ] </ref> , where the RCSP is divided into individual resource subproblems, instead of job or activity subproblems. A schedule is produced by sequentially solving a single-machine scheduling subproblem for each resource, and interleaving a re-optimization process after each machine is scheduled.
Reference: [ Babi c, 1987 ] <author> Obrad Babi c. </author> <title> Optimization of refuelling truck fleets at an airport. </title> <journal> Transportation Research, </journal> <volume> 21B(6):479-487, </volume> <month> December </month> <year> 1987. </year>
Reference-contexts: Truck Optimization Formulation The focus in Babi c's work is to determine both the minimal number of fuel trucks required to perform the required refueling operations for a set of aircraft, and the minimal travel distance for those fuel trucks such that no flight is delayed by the refueling process <ref> [ Babi c, 1987 ] </ref> . An ILP formulation with a bi-criterial objective function is defined, and a branch-and-bound technique is used to produce an optimal solution.
Reference: [ Bellman et al., 1982 ] <author> R. Bellman, A. Esogbue, and I. Nabeshima. </author> <title> Mathematical Aspects of Scheduling and Applications. </title> <publisher> Pergamon Press, </publisher> <address> Oxford England, </address> <year> 1982. </year>
Reference: [ Blackboard Technology Group, 1992 ] <institution> Blackboard Technology Group. </institution> <note> GBB Reference: Version 2.1. </note> <institution> Amherst MA, </institution> <month> September </month> <year> 1992. </year>
Reference-contexts: reservation, and processing a resource failure. 4.1 Implementation Details DSS is a blackboard system [ Erman et al., 1980 ] , implemented in Common Lisp [ Steele, 1990 ] and the Common Lisp Object System (CLOS) [ Keene, 1989 ] , and using the Generic Blackboard System (GBB TM ) <ref> [ Blackboard Technology Group, 1992 ] </ref> . 1 The blackboard architecture provides an effective means for representing, organizing, and manipulating the various components that constitute a knowledge-based scheduling system. Multi-dimensional structured blackboard spaces are used to store the various units manipulated by a problem-solving process.
Reference: [ Boctor, 1990 ] <author> Fayez F. Boctor. </author> <title> Some efficient multi-heuristic procedures for resource-constrained project scheduling. </title> <journal> European Journal of Operational Research, </journal> <volume> 49(1) </volume> <pages> 3-13, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Multiple heuristic approaches run into the same problems as simple heuristic approaches when it comes to trying to characterize the best heuristic combination to use for solving a given RCSP. The experiments in <ref> [ Boctor, 1990 ] </ref> do show, however, that the inclusion of certain heuristics can result in the more frequent development of near-optimal, and occasionally optimal, schedules.
Reference: [ Brazile and Swigger, 1988 ] <author> Robert P. Brazile and Kathleen M. Swigger. GATES: </author> <title> An airline gate assignment and tracking expert system. </title> <journal> IEEE Expert, </journal> <volume> 3(2) </volume> <pages> 33-39, </pages> <month> Summer </month> <year> 1988. </year>
Reference-contexts: GATES: Brazile and Swigger's Gate Assignment Program The GATES program is an expert system designed to perform the airport gate assignment task <ref> [ Brazile and Swigger, 1988 ] </ref> . It has been used successfully to produce gate assignments for Trans World Airlines (TWA) at New York's John F. Kennedy Airport.
Reference: [ Carver and Lesser, 1992 ] <author> Norman Carver and Victor Lesser. </author> <title> The evolution of blackboard control architectures. </title> <type> CMPSCI Technical Report 92-71, </type> <institution> Department of Computer Science, University of Massachusetts, Amherst, </institution> <month> October </month> <year> 1992. </year>
Reference: [ Chiang et al., 1990 ] <author> Whay-Yu Chiang, Mark S. Fox, </author> <title> and Peng Si Ow. Factory model and test data descriptions: OPIS experiments. </title> <type> Technical Report CMU-RI-TR-90-05, </type> <institution> Center for Integrated Manufacturing and Decision Systems, The Robotics Institute, Carnegie Mellon University, </institution> <address> Pittsburgh PA, </address> <month> March </month> <year> 1990. </year>
Reference-contexts: Our experiences with this particular domain are discussed further in Section 5.6. 34 1.5.2.2 A Simplified Job-Shop Scheduling Domain The job-shop scheduling domain that we have implemented is a test domain described in <ref> [ Chiang et al., 1990 ] </ref> which was used for evaluating the OPIS system [ Smith et al., 1986a, Ow, 1986, Ow and Smith, 1988 ] . The (simplified) shop produces three kinds of turbine propeller blades (two of each kind). <p> In the following chapter, we present the results of a number of experiments designed to illustrate the performance benefits and generic capabilities of the DSS scheduling approach. In a comparison against ISIS and the initial OPIS system using the common benchmarking data presented in <ref> [ Chiang et al., 1990 ] </ref> , we demonstrate better performance by DSS in terms of producing lower average tardiness costs, and lower percentages of tardy orders. <p> A collection of benchmarking data for this application, consisting of 22 order sets organized into 18 different categories, is defined in <ref> [ Chiang et al., 1990 ] </ref> . 4 Each category corresponds to a group of parameter settings that define the product mix, priority class, order lead time, order release pattern (daily, weekly, or at exponentially distributed intervals), and batch size (orders are released periodically to the system) for for a set <p> We now present a description of the four experiments we have designed, executed, and evaluated, to achieve these contributions. * Comparisons with Common Benchmarks. In this experiment, we make use of the experimental data developed for the evaluation of the initial OPIS system <ref> [ Chiang et al., 1990 ] </ref> , to place the performance of DSS (using DSS (MPH)) within the context of a number of important knowledge-based scheduling systems. * Dispatch Scheduling. <p> Referring back to Figure 5.1, the five bottleneck work areas are WA2, WA3, WA4, WA5, and WA6, as stated in <ref> [ Chiang et al., 1990, page 2 ] </ref> . These work areas contain a total of six machines responsible for handling the second operation in the process routing for any turbine blade. They were classified as bottlenecks based on the OPIS benchmark data order sets. <p> The factory model for this benchmark system is described in <ref> [ Chiang et al., 1990 ] </ref> . Compared to the AGSS domain as implemented in ARM, this domain is quite straightforward. A.2.1 The Turbine Component Plant Job-Shop Scheduling Domain TCP implements a standard job-shop for producing turbine blades. Figure A.27 presents the job-shop model for the domain.
Reference: [ Christofides et al., 1987 ] <author> Nicos Christofides, R. Alvarez-Valdes, and J.M. Tamarit. </author> <title> Project scheduling with resource constraints: A branch and bound approach. </title> <journal> European Journal of Operational Research, </journal> <volume> 29(3) </volume> <pages> 262-273, </pages> <month> June </month> <year> 1987. </year>
Reference-contexts: In addition, the common problem associated with branch-and-bounds approaches, that is, of large, unpredictable variances in the processing time for similar problems was observed. While extensive computational results were obtained, the problem sets were still limited in comparison with practical-sized real-world problems. Another branch-and-bound approach is presented in <ref> [ Christofides et al., 1987 ] </ref> . Each node in the tree represents a partial precedence-feasible and resource-feasible schedule that includes the initial activities, and their successors, up to a certain point in time.
Reference: [ Coffman, 1976 ] <author> E.G. Coffman, Jr., </author> <title> editor. Computer and Job-Shop Scheduling Theory. </title> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1976. </year>
Reference: [ Corkill et al., 1982 ] <author> Daniel D. Corkill, Victor R. Lesser, and Eva Hudlick a. </author> <title> Unifying data-directed and goal-directed control: An example and experiments. </title> <booktitle> In Proceedings, Second National Conference on Artificial Intelligence, </booktitle> <pages> pages 143-147, </pages> <address> Pittsburgh PA, </address> <month> August </month> <year> 1982. </year> <booktitle> American Association for Artificial Intelligence (AAAI). </booktitle>
Reference-contexts: By linking these service goals together according to overlaps in their allowances and sets of potentially satisfying resources, DSS is able to construct a high-level view of the current level of resource contention that exists within the environment at any particular time <ref> [ Corkill et al., 1982 ] </ref> . As scheduling decisions are made, the allowances and sets of potentially satisfying resources for these service goals change, which impacts the degree to which they are linked to each other.
Reference: [ Davis and Heidorn, 1971 ] <author> Edward W. Davis and George E. Heidorn. </author> <title> An algorithm for optimal project scheduling under multiple resource constraints. </title> <booktitle> Management Science, </booktitle> <address> 17(12):B803-B816, </address> <month> August </month> <year> 1971. </year> <month> 240 </month>
Reference-contexts: Backtracking is used to avoid the need for generating multiple branches, and four different lower bounds were considered for pruning the developing tree. Computational results indicated success in solving small problems, especially those with loose resource constraints. 2.1.2.2 Enumeration Approaches The bounded enumeration approach described in <ref> [ Davis and Heidorn, 1971 ] </ref> shares some similarities with standard branch-and-bound methods. <p> In this work, eight single heuristics were applied to a set of single-project, multiple-resource problems, and the results (based on minimized project duration) were compared to optimal schedules produced using the bounded enumeration approach presented in <ref> [ Davis and Heidorn, 1971 ] </ref> .
Reference: [ Davis and Patterson, 1975 ] <author> Edward W. Davis and James H. Patterson. </author> <title> A comparison of heuristic and optimum solutions in resource-constrained project scheduling. </title> <journal> Management Science, </journal> <volume> 21(8) </volume> <pages> 944-955, </pages> <month> April </month> <year> 1975. </year>
Reference-contexts: most part, however, with the exception of a few specific cases, it has not 51 proven possible to establish a definitive classification for matching a particular class of RCSP with a particular scheduling heuristic. 2.1.3.1 Single Heuristic Approaches A comparison of some standard heuristics for solving RCSPs was undertaken in <ref> [ Davis and Patterson, 1975 ] </ref> . In this work, eight single heuristics were applied to a set of single-project, multiple-resource problems, and the results (based on minimized project duration) were compared to optimal schedules produced using the bounded enumeration approach presented in [ Davis and Heidorn, 1971 ] . <p> The DSS (MPH) heuristic performs an in-depth analysis of both existing and anticipated scheduling conditions, and rewards this extra effort by producing better quality schedules, and efficiently responding to dynamic environments. The following heuristics from the project scheduling literature, specifically the work of <ref> [ Davis and Patterson, 1975 ] </ref> , provide us with the means to compare the behavior of DSS (MPH) with some classical heuristic approaches. <p> Whenever the critical path of an aggregate's child subproblems changes, the rating of its corresponding service goal must be updated. The rating of a non-aggregate service goal does not change. 3 Some of the heuristics in <ref> [ Davis and Patterson, 1975 ] </ref> require finding solutions to small integer programs, a capability that has not been provided to DSS. 138 * Minimum Job Slack (DSS (MINSLK)) DSS (MINSLK) ! min ( LFT ij max ( EST ij ; flCURRENTTIMEfl ) d ij ) The DSS (MINSLK) heuristic gives <p> Previous work 178 on classical, heuristic-based approaches for solving related job-shop and factory scheduling problems has led to the observation that no single scheduling strategy is appropriate for all problems <ref> [ Davis and Patterson, 1975 ] </ref> . While one heuristic may work well in a particular situation, it may perform abysmally in another. Quite simply, different situations call for different strategies.
Reference: [ Davis, 1973 ] <author> Edward W. Davis. </author> <title> Project scheduling under resource constraintshistorical review and categorization of procedures. </title> <journal> AIIE Transactions, </journal> <volume> 5(4) </volume> <pages> 297-313, </pages> <month> December </month> <year> 1973. </year>
Reference-contexts: Finally, we survey some other relevant artificial intelligence (AI) approaches, focusing on three important knowledge-based scheduling systems that have helped influence the design and development of DSS. General surveys of the issues involved in the solution of RCSPs can be found in <ref> [ Davis, 1973, Graves, 1981, Willis, 1985 ] </ref> .
Reference: [ Dechter and Pearl, 1988 ] <author> Rina Dechter and Judea Pearl. </author> <title> Network-based heuristics for constraint-satisfaction problems. </title> <journal> Artificial Intelligence, </journal> <volume> 34(1) </volume> <pages> 1-38, </pages> <month> January </month> <year> 1988. </year>
Reference-contexts: state of problem solving. 1.4.3.3.2 Variable-Ordering and Value-Ordering Heuristics Previous work in solving constraint-satisfaction problems has represented constraint networks using graph structures, where the nodes represent the variables in the problem, and the arcs connect these variables to the sets of possible values that may be used for their satisfaction <ref> [ Dechter and Pearl, 1988 ] </ref> . The solution process proceeds by alternately selecting a variable to initialize, assigning it a value, and propagating the constraints imposed by the assignment.
Reference: [ Erman et al., 1980 ] <author> Lee D. Erman, Frederick Hayes-Roth, Victor R. Lesser, and D. Raj Reddy. </author> <title> The Hearsay-II speech-understanding system: Integrating knowledge to resolve uncertainty. </title> <journal> Computing Surveys, </journal> <volume> 12(2) </volume> <pages> 213-253, </pages> <month> June </month> <year> 1980. </year>
Reference-contexts: DSS is implemented as an agenda-based blackboard system <ref> [ Erman et al., 1980 ] </ref> . It maintains a blackboard structure upon which the developing schedule is constructed and the sets of orders and resources are stored. A set of generic domain-independent knowledge sources is provided for making the assorted variable-ordering and value-ordering scheduling decisions. <p> We then describe the various resource reservation-securing knowledge sources implemented within DSS. The remaining sections describe the processes of re-securing a reservation (following a cancellation), refining a reservation, and processing a resource failure. 4.1 Implementation Details DSS is a blackboard system <ref> [ Erman et al., 1980 ] </ref> , implemented in Common Lisp [ Steele, 1990 ] and the Common Lisp Object System (CLOS) [ Keene, 1989 ] , and using the Generic Blackboard System (GBB TM ) [ Blackboard Technology Group, 1992 ] . 1 The blackboard architecture provides an effective means
Reference: [ Field and Harrison, 1988 ] <author> Anthony J. Field and Peter G. Harrison. </author> <title> Functional Programming. </title> <publisher> Addison-Wesley, </publisher> <address> Reading MA, </address> <year> 1988. </year>
Reference-contexts: We now discuss both of these methods for preserving scheduling flexibility. 1.4.3.2.1 Least-Commitment Decision Making The least-commitment decision-making approach is similar to the lazy evaluation technique employed in some programming languages <ref> [ Field and Harrison, 1988 ] </ref> . A lazy evaluation approach allows the evaluation of certain expressions to be postponed until absolutely necessary, thereby putting off potentially time-intensive tasks until later to focus instead on more important or immediate work.
Reference: [ Fisher, 1988 ] <author> Marsha J. Fisher. </author> <title> Airport gate system is ready for arrival. </title> <journal> Datamation, </journal> <volume> 34(13) </volume> <pages> 21-25, </pages> <month> 1 July </month> <year> 1988. </year>
Reference-contexts: Texas Air produces gate assignments for all Eastern and Continental Airlines flights at Houston and Miami International Airports using a system called GATEKEEPER <ref> [ Fisher, 1988 ] </ref> . We discuss below two additional expert systems that have been developed for solving the gate-assignment problem.
Reference: [ Fox and Kempf, 1985 ] <author> B.R. Fox and K.G. Kempf. </author> <title> Complexity, uncertainty and opportunistic scheduling. </title> <booktitle> In Proceedings, Second Conference on Artificial Intelligence Applications, </booktitle> <pages> pages 487-492, </pages> <address> Miami Beach FL, </address> <month> December </month> <year> 1985. </year> <institution> Institute of Electrical and Electronics Engineers (IEEE). </institution>
Reference: [ Fox and Smith, 1984 ] <author> Mark S. Fox and Stephen F. Smith. </author> <title> ISISa knowledge-based system for factory scheduling. </title> <journal> Expert Systems, </journal> <volume> 1(1) </volume> <pages> 25-49, </pages> <month> July </month> <year> 1984. </year>
Reference: [ Fox et al., 1982 ] <author> Mark S. Fox, Brad P. Allen, and Gary A. Strohm. </author> <title> Job-shop scheduling: An investigation in constraint-directed reasoning. </title> <booktitle> In Proceedings, Second National Conference on Artificial Intelligence, </booktitle> <pages> pages 155-158, </pages> <address> Pittsburgh PA, </address> <month> August </month> <year> 1982. </year> <booktitle> American Association for Artificial Intelligence (AAAI). </booktitle>
Reference: [ Fox, 1983 ] <author> Mark S. Fox. </author> <title> Constraint-Directed Search: A Case Study of Job-Shop Scheduling. </title> <type> PhD thesis, </type> <institution> Computer Science Department, Carnegie Mellon University, </institution> <address> Pittsburgh PA, </address> <month> December </month> <year> 1983. </year>
Reference-contexts: The degree of pliancy exhibited by a scheduler in reacting to unforeseen events is a measure of flexibility that is increasingly important when operating within dynamic environments. Unlike other systems that intentionally compact their developing schedules throughout the scheduling process <ref> [ Fox, 1983, Smith et al., 1990, Sadeh, 1991 ] </ref> , leaving very little room for dealing easily with future conflicts, DSS provides for such contingencies while still managing to produce quality schedules. <p> This capability is absolutely necessary within dynamic scheduling environments to guide the scheduler and minimize the need for backtracking and constraint relaxation. Existing systems tend to rely on a narrow consultation of perspectives on the current problem <ref> [ Fox, 1983, Smith et al., 1990, Sadeh, 1991 ] </ref> , thus limiting their ability to fully comprehend the current state of problem solving and react accordingly. Accommodation of Additional Domain Complexities Many real-world scheduling problems introduce additional complexities to the class of canonical RCSPs. <p> benchmark data designed for testing the OPIS system [ Ow, 1986, Ow and Smith, 1988, Chiang et al., 1990 ] , we have been able to compare (favorably) the scheduling performance of DSS with results from a version of OPIS (OPIS 0) [ Smith et al., 1986a ] , ISIS <ref> [ Fox, 1983 ] </ref> , and a modified version of the COVERT dispatch rule [ Vepsaleinen, 1984 ] in a simplified job-shop domain. These experiments confirm the improvements in reduced tardiness that are achieved by the scheduling approach implemented in DSS.
Reference: [ French, 1982 ] <author> Simon French. </author> <title> Sequencing and Scheduling: An Introduction to the Mathematics of the Job-Shop. </title> <publisher> Ellis Horwood, </publisher> <address> Chichester England, </address> <year> 1982. </year>
Reference-contexts: The scheduling phase combines the classical OR problems of sequencing and timetabling, that is, determining an ordering for a collection of activities, and assigning specific start and finish times to each activity in a sequence <ref> [ French, 1982, Noronha and Sarma, 1991 ] </ref> . The planning phase is often treated as a lookup process where the sequences of required activities for different classes of jobs are prescribed by the domain.
Reference: [ Garey and Johnson, 1979 ] <author> Michael R. Garey and David S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. W.H. </title> <publisher> Freeman, </publisher> <address> New York, </address> <year> 1979. </year>
Reference: [ Garey et al., 1978 ] <author> M.R. Garey, R.L. Graham, and D.S. Johnson. </author> <title> Performance guarantees for scheduling algorithms. </title> <journal> Operations Research, </journal> <volume> 26(1) </volume> <pages> 3-21, </pages> <month> January-February </month> <year> 1978. </year>
Reference-contexts: A survey of scheduling rules, ranging from simple priority rules to more complex heuristics, is presented in [ Panwalkar and Iskander, 1977 ] . Upper bounds (assuming a minimizing objective) on the quality of a number of approximate heuristic solutions to RCSPs are presented in <ref> [ Garey et al., 1978 ] </ref> .
Reference: [ Gosling, 1982 ] <author> Geoffrey D. Gosling. </author> <title> An aircraft gate assignment computer program user guide. </title> <institution> Research Report UCB-ITS-RR-82-8, Institute of Transportation Studies, University of California, Berkeley, </institution> <month> June </month> <year> 1982. </year> <month> 241 </month>
Reference-contexts: We discuss below two additional expert systems that have been developed for solving the gate-assignment problem. GAP: Gosling's Gate Assignment Program Gosling's Gate Assignment Program (GAP) is an expert system designed to assign an airport's arriving and departing flight aircraft to the set of available gates <ref> [ Gosling, 1990, Gosling, 1982 ] </ref> . The process of assigning a flight to a gate is constrained by the kinds of aircraft the gate can accommodate, the existing assignments of aircraft to neighboring gates, and considerations involving the time required for transferring both passengers and baggage between gates.
Reference: [ Gosling, 1990 ] <author> Geoffrey D. Gosling. </author> <title> Design of an expert system for aircraft gate assignment. </title> <journal> Transportation Research, </journal> <volume> 24A(1):59-69, </volume> <month> January </month> <year> 1990. </year>
Reference-contexts: We discuss below two additional expert systems that have been developed for solving the gate-assignment problem. GAP: Gosling's Gate Assignment Program Gosling's Gate Assignment Program (GAP) is an expert system designed to assign an airport's arriving and departing flight aircraft to the set of available gates <ref> [ Gosling, 1990, Gosling, 1982 ] </ref> . The process of assigning a flight to a gate is constrained by the kinds of aircraft the gate can accommodate, the existing assignments of aircraft to neighboring gates, and considerations involving the time required for transferring both passengers and baggage between gates.
Reference: [ Graves, 1981 ] <author> Stephen C. Graves. </author> <title> A review of production scheduling. </title> <journal> Operations Research, </journal> <volume> 29(4) </volume> <pages> 646-675, </pages> <month> July-August </month> <year> 1981. </year>
Reference-contexts: Finally, we survey some other relevant artificial intelligence (AI) approaches, focusing on three important knowledge-based scheduling systems that have helped influence the design and development of DSS. General surveys of the issues involved in the solution of RCSPs can be found in <ref> [ Davis, 1973, Graves, 1981, Willis, 1985 ] </ref> .
Reference: [ Hamzawi, 1986 ] <author> Salah G Hamzawi. </author> <title> Management and planning of airport gate capacity: A microcomputer-based gate assignment simulation model. </title> <journal> Transportation Planning and Technology, </journal> <volume> 11(3) </volume> <pages> 189-202, </pages> <month> December </month> <year> 1986. </year>
Reference-contexts: Further permutations can be performed on the completed schedule to achieve the desired load balancing and satisfy gate preferences. Hamzawi's Gate Assignment Program Hamzawi describes a computer program for assigning gates to flights that has been successfully tested at a number of Canadian airports <ref> [ Hamzawi, 1986 ] </ref> . Flights are processed in order of their arrival time, with preference among identical arrivals given to those flights 54 using larger aircraft.
Reference: [ Haralick and Elliott, 1980 ] <author> Robert M. Haralick and Gordon L. Elliott. </author> <title> Increasing tree search efficiency for constraint satisfaction problems. </title> <journal> Artificial Intelligence, </journal> <volume> 14(3) </volume> <pages> 263-313, </pages> <month> October </month> <year> 1980. </year>
Reference-contexts: This ordering, which 25 is achieved through a periodic analysis of the search space, organizes the solution process so that the variables that are most heavily constrained, that is, the variables with the fewest possible satisfying values, are handled as early as possible in the scheduling process <ref> [ Haralick and Elliott, 1980 ] </ref> . Each value-to-variable assignment acts to further constrain the remaining satisfaction possibilities for the outstanding (uninitialized) variables. By making assignments as early as possible to those variables having the fewest possibilities for satisfaction, the need for costly backtracking is lessened.
Reference: [ Held and Karp, 1962 ] <author> Michael Held and Richard M. Karp. </author> <title> A dynamic programming approach to sequencing problems. </title> <journal> Journal of the Society for Industrial and Applied Mathematics, </journal> <volume> 10(1) </volume> <pages> 196-210, </pages> <month> March </month> <year> 1962. </year>
Reference-contexts: Scheduling for a set of K jobs is thus achieved by first developing an optimal schedule for a set of K 1 jobs, and then optimally scheduling the remaining job. An early dynamic programming algorithm for solving simple sequencing problems is described in <ref> [ Held and Karp, 1962 ] </ref> .
Reference: [ Keene, 1989 ] <author> Sonya E. Keene. </author> <title> Object-Oriented Programming in Common Lisp: A Programmer's Guide to CLOS. </title> <publisher> Addison-Wesley, </publisher> <address> Reading MA, </address> <year> 1989. </year>
Reference-contexts: remaining sections describe the processes of re-securing a reservation (following a cancellation), refining a reservation, and processing a resource failure. 4.1 Implementation Details DSS is a blackboard system [ Erman et al., 1980 ] , implemented in Common Lisp [ Steele, 1990 ] and the Common Lisp Object System (CLOS) <ref> [ Keene, 1989 ] </ref> , and using the Generic Blackboard System (GBB TM ) [ Blackboard Technology Group, 1992 ] . 1 The blackboard architecture provides an effective means for representing, organizing, and manipulating the various components that constitute a knowledge-based scheduling system.
Reference: [ Kelley and Walker, 1959 ] <author> James E. Kelley, Jr. and Morgan R. Walker. </author> <title> Critical-path planning and scheduling. </title> <booktitle> In Proceedings, Eastern Joint Computer Conference, </booktitle> <pages> pages 160-173, </pages> <address> Boston MA, </address> <month> December </month> <year> 1959. </year> <booktitle> Joint Computer Conference. </booktitle>
Reference-contexts: Any secured resource reservation that is within the bounds of the allowance is guaranteed not to introduce any conflicts with the rest of the schedule or incur any delay for its order. The calculation of these time bounds is performed using a Critical Path Analysis <ref> [ Kelley and Walker, 1959 ] </ref> , which involves a forward pass through the network to determine the absolute earliest starting time for each resource-requiring task, and a backward pass to determine the absolute latest finishing time, again, for each resource-requiring task.
Reference: [ Kurtulus and Davis, 1982 ] <author> I. Kurtulus and E.W. Davis. </author> <title> Multi-project scheduling: Categorization of heuristic rules performance. </title> <journal> Management Science, </journal> <volume> 28(2) </volume> <pages> 161-172, </pages> <month> February </month> <year> 1982. </year>
Reference-contexts: While this study was applied to small problems, it suggests that heuristics that consider various kinds of time, and the degree of resource usage, generally produce better (near-optimal) results. An attempt to classify individual RCSPs for the purpose of identifying appropriate scheduling heuristics for their solution is described in <ref> [ Kurtulus and Davis, 1982 ] </ref> . Two metrics were defined for characterizing RCSPs according to average resource load (ARLF) and average resource utilization (AUF). <p> The results of Kurtulus and Davis were later tested in a heuristic scheduling system designed to solve RCSPs in the Japanese housing construction industry [ Tsubakitani and Deckro, 1990 ] . The analysis described in <ref> [ Kurtulus and Davis, 1982 ] </ref> suggested the use of the SASP heuristic for solving the housing construction RCSPs. The SASP heuristic and the scheduler within which it was implemented (MPM) were tested against two other heuristic scheduling systems. MPM produced schedules containing shorter makespans in both comparisons.
Reference: [ Lawler and Wood, 1966 ] <author> E.L. Lawler and D.E. Wood. </author> <title> Branch-and-bound methods: A survey. </title> <journal> Operations Research, </journal> <volume> 14(4) </volume> <pages> 699-719, </pages> <month> July-August </month> <year> 1966. </year>
Reference-contexts: A general survey of branch-and-bound approaches is provided in <ref> [ Lawler and Wood, 1966 ] </ref> . The branch-and-bound approach described in [ Stinson et al., 1978 ] generates the tree by progressively scheduling activities forward from the start of the schedule.
Reference: [ Lawrence and Morton, 1993 ] <author> Stephen R. Lawrence and Thomas E. Morton. </author> <title> Resource-constrained multi-project scheduling with tardy costs: Comparing myopic, bottleneck, and resource pricing heuristics. </title> <journal> European Journal of Operational Research, </journal> <volume> 64(2) </volume> <pages> 168-187, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: It is designed to handle as many as fifty simultaneous projects, each containing as many as 100 activities over a 400-day planning horizon. Each activity can require up to fifty resources. Experimental results suggest that MPM can produce `good' solutions for multi-project scheduling problems. Recent work presented in <ref> [ Lawrence and Morton, 1993 ] </ref> describes a single-heuristic approach to solving RCSPs that attempts to minimize weighted tardiness through the use of a combination of project-related, activity-related, and resource-related metrics.
Reference: [ Mangoubi and Mathaisel, 1985 ] <author> R.S. Mangoubi and Dennis F.X. Mathaisel. </author> <title> Optimizing gate assignments at airport terminals. </title> <journal> Transportation Science, </journal> <volume> 19(2) </volume> <pages> 173-188, </pages> <month> May </month> <year> 1985. </year>
Reference-contexts: Two such systems are described below. Mangoubi and Mathaisel's Gate Assignment Optimization Formulation Mangoubi and Mathaisel have developed an ILP formulation for assigning aircraft to gates that is optimal in terms of minimizing the required passenger travel distance to and from gates <ref> [ Mangoubi and Mathaisel, 1985 ] </ref> . 3 In studies using the actual flight schedule for an average day at Canada's Toronto International Airport, the existing assignment policy was shown to produce travel distances that were 32% higher than the minimum distances produced by the integer program formulation. <p> Mangoubi and Mathaisel's Heuristic for Optimizing Gate Assignments Mangoubi and Mathaisel's heuristic approach for constructing near-optimal gate assignments involves the application of a single heuristic to a set of flights <ref> [ Mangoubi and Mathaisel, 1985 ] </ref> . The objective is to minimize the total walking distance required by the gate assignments for a set of flights. A single gate-assignment heuristic assigns whichever available gate introduces the shortest amount of walking distance for the passengers on a flight.
Reference: [ Martin-Martin and Mary, 1986 ] <author> T. Martin-Martin and D. Mary. </author> <title> CARPPA model: Optimization of aircraft positionning and staff regulation for Orly-West airport. </title> <booktitle> In Proceedings, 26th Annual AGIFORS Symposium, </booktitle> <pages> pages 7-16, </pages> <address> Bowness-on-Windermere England, </address> <month> October </month> <year> 1986. </year> <booktitle> Airline Group of the International Federation of Operational Research Societies (AGIFORS). </booktitle>
Reference-contexts: In the context of this earlier work, the heuristic method is presented as a means of quickly producing near-optimal solutions for larger-scale problems. Martin-Martin and Mary's CARPPA Model for Gate Assignment The CARPPA Model implements an heuristic approach for producing gate assignments for Air Inter at France's Orly-West Airport <ref> [ Martin-Martin and Mary, 1986 ] </ref> . The CARPPA Model operates by assigning gates to a set of flights prioritized by arrival time and aircraft size. The primary objective is to produce feasible gate assignments for all flights.
Reference: [ McKay et al., 1988 ] <author> Kenneth N. McKay, Frank R. Safayeni, and John A. Buzacott. </author> <title> Job-shop scheduling theory: What is relevant? Interfaces, </title> <booktitle> 18(4) </booktitle> <pages> 84-90, </pages> <month> July-August </month> <year> 1988. </year> <month> 242 </month>
Reference: [ Neiman et al., 1994 ] <author> Daniel E. Neiman, David W. Hildum, Victor R. Lesser, and Tuomas W. Sandholm. </author> <title> Exploiting meta-level information in a distributed scheduling system. </title> <booktitle> In Proceedings, Twelfth National Conference on Artificial Intelligence, </booktitle> <volume> volume 1, </volume> <pages> pages 394-400, </pages> <address> Seattle WA, </address> <month> August </month> <year> 1994. </year> <booktitle> American Association for Artificial Intelligence (AAAI). </booktitle>
Reference-contexts: If its own resources are in short supply, it is more likely to loan out resources for only the time requested, if at all. A distributed version of DSS has already been constructed, using a distributed version of the AGSS domain <ref> [ Neiman et al., 1994 ] </ref> . The scheduling agents in this domain correspond to the various airlines operating out of a particular airport. Each airline is given its own supply of resources, but may be occasionally forced to request the loan of a resource from another airline.
Reference: [ Niland, 1970 ] <author> Powell Niland. </author> <title> Production Planning, Scheduling, and Inventory Control: A Text and Cases. </title> <publisher> Macmillan, </publisher> <address> New York, </address> <year> 1970. </year>
Reference: [ Norbis and Smith, 1988 ] <author> Mario I. Norbis and J. MacGregor Smith. </author> <title> A multiobjective, multilevel heuristic for dynamic resource constrained scheduling problems. </title> <journal> European Journal of Operational Research, </journal> <volume> 33(1) </volume> <pages> 30-41, </pages> <month> January </month> <year> 1988. </year>
Reference-contexts: Much of the recent work on solving RCSPs using standard OR techniques centers on multi-objective approaches. The work described in <ref> [ Norbis and Smith, 1988 ] </ref> , for example, involves an heuristic method for developing near-optimal schedules that satisfy a set of specific scheduling objectives. A series of levels is defined for representing consecutive orderings of the set of all task-level subproblems for a particular RCSP. <p> The objective itself becomes a moving target, to which a problem solver must adapt. Only recently has the dynamic nature of the problem-solving process been addressed within the field of OR <ref> [ Norbis and Smith, 1988 ] </ref> . The approach implemented in DSS accounts for the dynamic nature of the problem by allowing the environment to force changes in the state of problem solving throughout the entire decision-making process.
Reference: [ Noronha and Sarma, 1991 ] <author> S.J. Noronha and V.V.S. Sarma. </author> <title> Knowledge-based approaches for scheduling problems: A survey. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 3(2) </volume> <pages> 160-171, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: The scheduling phase combines the classical OR problems of sequencing and timetabling, that is, determining an ordering for a collection of activities, and assigning specific start and finish times to each activity in a sequence <ref> [ French, 1982, Noronha and Sarma, 1991 ] </ref> . The planning phase is often treated as a lookup process where the sequences of required activities for different classes of jobs are prescribed by the domain. <p> General surveys of the issues involved in the solution of RCSPs can be found in [ Davis, 1973, Graves, 1981, Willis, 1985 ] . Discussions of a number of different AI approaches to solving the problem can be found in <ref> [ Noronha and Sarma, 1991, Smith, 1991 ] </ref> . 2.1 Operations Research Approaches As mentioned in Chapter 1, the class of RCSPs has been extensively studied within the field of operations research. It is, therefore, a relatively well-understood class of problems.
Reference: [ Ow and Smith, 1986 ] <author> Peng Si Ow and Stephen F. Smith. </author> <title> Towards an opportunistic scheduling system. </title> <booktitle> In Proceedings, Nineteenth Hawaii International Conference on System Sciences, </booktitle> <pages> pages 345-353, </pages> <address> Honolulu, </address> <month> January </month> <year> 1986. </year>
Reference: [ Ow and Smith, 1988 ] <author> Peng Si Ow and Stephen F. Smith. </author> <title> Viewing scheduling as an opportunistic problem-solving process. </title> <journal> Annals of Operations Research, </journal> <volume> 12 </volume> <pages> 85-108, </pages> <year> 1988. </year>
Reference-contexts: It is based on an application used in the evaluation of the initial OPIS system <ref> [ Ow, 1986, Ow and Smith, 1988 ] </ref> . The objectives for this job-shop RCSP include the minimization of the average tardiness cost per order, the minimization of the average work-in-process time per order, and the minimization of the total number of setup operations required for all secured resources. <p> In addition, the percentage of tardy orders produced by DSS (MPH) across all of the order set categories ranged between 9.17 and 62.5, with an average of 29.57. The percentage of tardy orders produced by OPIS 0 ranged fairly evenly between 20 and 67 <ref> [ Ow and Smith, 1988, page 104 ] </ref> . These are very important results for confirming the success of the least-commitment DSSscheduling approach in maintaining flexibility through the preservation of slack time in its developing schedules, to provide attractive scheduling options for solving outstanding subproblems. <p> Regardless of the heuristic being used, the flexibility afforded by the basic least-commitment DSS scheduling approach, and the resulting benefits, are clearly evident. 6 Data from the OPIS, ISIS, and COVERT comparison experiments has been extrapolated from the graphs presented in <ref> [ Ow and Smith, 1988 ] </ref> . <p> Process Plan for the TURNAROUND FLIGHT PROCESSING Service Type. 213 Figure A.26. Specifications for the TURNAROUND FLIGHT PROCESSING Service Type. 214 A.2 TCP: The Turbine Component Plant Job-Shop Scheduling System The TCP application system implements the job-shop scheduling domain used in the evaluation of the initial OPIS system <ref> [ Ow, 1986, Ow and Smith, 1988 ] </ref> . The factory model for this benchmark system is described in [ Chiang et al., 1990 ] . Compared to the AGSS domain as implemented in ARM, this domain is quite straightforward.
Reference: [ Ow et al., 1988 ] <author> Peng Si Ow, Stephen F. Smith, and Alfred Thiriez. </author> <title> Reactive plan revision. </title> <booktitle> In Proceedings, Seventh National Conference on Artificial Intelligence, </booktitle> <volume> volume 1, </volume> <pages> pages 77-82, </pages> <address> Saint Paul MN, </address> <month> August </month> <year> 1988. </year> <booktitle> American Association for Artificial Intelligence (AAAI). </booktitle>
Reference: [ Ow, 1986 ] <author> Peng Si Ow. </author> <title> Experiments in knowledge-based scheduling. </title> <type> Technical report, </type> <institution> The Robotics Institute, Carnegie Mellon University, </institution> <address> Pittsburgh PA, </address> <month> April </month> <year> 1986. </year> <month> Forthcoming. </month>
Reference-contexts: It is based on an application used in the evaluation of the initial OPIS system <ref> [ Ow, 1986, Ow and Smith, 1988 ] </ref> . The objectives for this job-shop RCSP include the minimization of the average tardiness cost per order, the minimization of the average work-in-process time per order, and the minimization of the total number of setup operations required for all secured resources. <p> Each order belongs to one of six priority classes, indicating the importance of meeting its due date. Tardiness penalties are determined according to these priority classes. A detailed summary of the experiments for which this benchmark data was developed can be found in <ref> [ Ow, 1986 ] </ref> . <p> Process Plan for the TURNAROUND FLIGHT PROCESSING Service Type. 213 Figure A.26. Specifications for the TURNAROUND FLIGHT PROCESSING Service Type. 214 A.2 TCP: The Turbine Component Plant Job-Shop Scheduling System The TCP application system implements the job-shop scheduling domain used in the evaluation of the initial OPIS system <ref> [ Ow, 1986, Ow and Smith, 1988 ] </ref> . The factory model for this benchmark system is described in [ Chiang et al., 1990 ] . Compared to the AGSS domain as implemented in ARM, this domain is quite straightforward.
Reference: [ Panwalkar and Iskander, 1977 ] <editor> S.S. Panwalkar and Wafik Iskander. </editor> <title> A survey of scheduling rules. </title> <journal> Operations Research, </journal> <volume> 25(1) </volume> <pages> 45-61, </pages> <month> January-February </month> <year> 1977. </year>
Reference-contexts: A multiple-attribute heuristic performs a more extensive analysis of the current state of problem solving, and can therefore act to prevent such problems from developing. A survey of scheduling rules, ranging from simple priority rules to more complex heuristics, is presented in <ref> [ Panwalkar and Iskander, 1977 ] </ref> . Upper bounds (assuming a minimizing objective) on the quality of a number of approximate heuristic solutions to RCSPs are presented in [ Garey et al., 1978 ] .
Reference: [ Papadimitriou and Steiglitz, 1982 ] <author> Christos H. Papadimitriou and Kenneth Steiglitz. </author> <title> Combinatorial Optimization: Algorithms and Complexity. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs NJ, </address> <year> 1982. </year>
Reference-contexts: Our formulation is based on a similar model presented in [ Pritsker et al., 1969 ] . It also refers back to our discussion of dynamic RCSPs in Section 1.3. Another formulation for a tighter-constrained version of the RCSP can be found in <ref> [ Papadimitriou and Steiglitz, 1982 ] </ref> . Integer linear programming is a classical technique for finding optimal solutions to sets of multiple-variable, integer-constrained, linear equations, of which the RCSP is a typical example.
Reference: [ Patterson, 1984 ] <author> James H. Patterson. </author> <title> A comparison of exact approaches for solving the multiple constrained resource, project scheduling problem. </title> <journal> Management Science, </journal> <volume> 30(7) </volume> <pages> 854-867, </pages> <month> July </month> <year> 1984. </year>
Reference-contexts: The procedure can still result in the creation of a very large number of feasible subset schedules. Again, the applicability of this approach to large scale, practical-sized problems remains questionable. A comparison of three specific enumeration-based optimizing approaches (including the work of Davis and Heidorn) can be found in <ref> [ Patterson, 1984 ] </ref> . 2.1.2.3 Dynamic Programming Approaches Dynamic programming approaches to solving RCSPs make use of the fact that an optimal solution can be incrementally developed by first constructing an optimal schedule for any two jobs, and then optimally extending that schedule to include another job, until all of
Reference: [ Pease, 1978 ] <author> Marshall C. Pease, III. ACS.1: </author> <title> An experimental automated command support system. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> SMC-8(10):725-735, </volume> <month> October </month> <year> 1978. </year>
Reference-contexts: These model-resource units are secured and released by DSS throughout the scheduling process. They are indexed by transitional time and state pairs that represent their expected behavior at any point in time. DSS model-resource units are similar to the resource models used in ACS.1 <ref> [ Pease, 1978 ] </ref> , a knowledge-based planning and scheduling system designed to assist in the development and execution of operational plans. Additionally, the time and state pairs used to represent the scheduled activities for model resources in DSS are similar to the scroll tables employed by ACS.1. <p> The second pass starts with the final set of non-aggregate task nodes and the due date, and moves backward through the network, calculating the latest possible 4 The DSS process plan template is similar to the ACS.1 process model <ref> [ Pease, 1978 ] </ref> . 95 finishing time for each task based on the latest LST among all immediately succeeding tasks, and considering any further constraints on its finishing time. The LST for a task is determined by subtracting its expected duration from its LFT.
Reference: [ Pritsker et al., 1969 ] <author> A. Alan B. Pritsker, Lawrence J. Watters, and Philip M. Wolfe. </author> <title> Multi-project scheduling with limited resources: A zero-one programming approach. </title> <journal> Management Science, </journal> <volume> 16(1) </volume> <pages> 93-108, </pages> <month> September </month> <year> 1969. </year> <month> 243 </month>
Reference-contexts: Our formulation is based on a similar model presented in <ref> [ Pritsker et al., 1969 ] </ref> . It also refers back to our discussion of dynamic RCSPs in Section 1.3. Another formulation for a tighter-constrained version of the RCSP can be found in [ Papadimitriou and Steiglitz, 1982 ] . <p> 8 : q=EFT ij x ijq if jfk : r ijk &gt; 0gj 1 k2fk:r ijk &gt;0g q=min (EFT k ijq otherwise i = 1; 2; : : : ; I ; t = ECT i ; ECT i + 1; : : : ; LCT The formulation presented in <ref> [ Pritsker et al., 1969 ] </ref> is efficient in terms of limiting the number of variables and constraints it requires for a given RCSP. It reportedly further benefits from increased sequencing constraints, longer task durations, and the closeness of the scheduling horizon (LCT ) to the optimal schedule completion time.
Reference: [ Riccio and Ron, 1985 ] <author> Lawrence A. Riccio and Nathan Ron. </author> <title> Computer-generated system aids airline's passenger flow and routing of aircraft. </title> <journal> Industrial Engineering, </journal> <volume> 17(9) </volume> <pages> 52-56, </pages> <month> September </month> <year> 1985. </year>
Reference-contexts: Pan American World Airways uses an heuristic-based system to assist in the scheduling of gate assignments at New York's John F. Kennedy Airport <ref> [ Riccio and Ron, 1985 ] </ref> . Texas Instruments has developed the Gate Assignment Display System (GADS), an expert system which has been used by United Airlines to assign gates to flights at O'Hare Airport in Chicago and Stapleton Airport in Denver [ Shifrin, 1988 ] .
Reference: [ Rickel, 1988 ] <author> Jeff Rickel. </author> <title> Issues in the design of scheduling systems. </title> <editor> In Michael D. Oliff, editor, </editor> <booktitle> Expert Systems and Intelligent Manufacturing, </booktitle> <pages> pages 70-89. </pages> <publisher> Elsevier, </publisher> <address> New York, </address> <year> 1988. </year>
Reference: [ Sadeh and Fox, 1990 ] <author> Norman Sadeh and Mark S. Fox. </author> <title> Variable and value ordering heuristics for activity-based job-shop scheduling. </title> <booktitle> In Proceedings, Fourth International Conference on Expert Systems in Production and Operations Management, </booktitle> <pages> pages 134-144, </pages> <address> Hilton Head SC, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: The solution process completes when all variables have been assigned values, or an infeasible situation is recognized. The heuristics designed for informing variable and value selection phases are called variable-ordering and value-ordering heuristics <ref> [ Sadeh and Fox, 1990 ] </ref> . The amount of backtracking required as part of the solution process may be lessened by means of an informed ordering of the variable and value selection phases.
Reference: [ Sadeh et al., 1993 ] <author> Norman Sadeh, Shinichi Otsuka, and Robert Schnelbach. </author> <title> Predictive and reactive scheduling with the Micro-Boss production scheduling and control system. </title> <booktitle> In Proceedings, IJCAI-93 Workshop on Knowledge-Based Production Planning, Scheduling and Control, </booktitle> <address> Chambery France, </address> <month> August </month> <year> 1993. </year> <booktitle> International Joint Conferences on Artificial Intelligence (IJCAI). </booktitle>
Reference: [ Sadeh, 1991 ] <author> Norman Sadeh. </author> <title> Look-Ahead Techniques for Micro-Opportunistic Job Shop Scheduling. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh PA, </address> <month> March </month> <year> 1991. </year>
Reference-contexts: The finer the granularity, as indicated by the scope of the subproblems, the quicker the scheduler is able to react to the changing environment. A fine-grained representation of the subproblems thus produces more frequent opportunities for re-adjustment of the current scheduling strategy <ref> [ Sadeh, 1991 ] </ref> . A fine-grained approach to handling our simplified AGSS problem would address each individual ground-servicing operation as a separate subproblem, thereby breaking up all flights into their individual resource-requesting components. <p> into finely grained, individual subproblems provides the basis for implementing a reactive, operation-based scheduling approach that provides maximum flexibility for responding to dynamic environments The power of such a representation has been previously demonstrated, in terms of minimizing the number of search states generated in the course of problem solving <ref> [ Sadeh, 1991 ] </ref> . But the power of this approach in the context of reactive scheduling has not been explored. <p> The degree of pliancy exhibited by a scheduler in reacting to unforeseen events is a measure of flexibility that is increasingly important when operating within dynamic environments. Unlike other systems that intentionally compact their developing schedules throughout the scheduling process <ref> [ Fox, 1983, Smith et al., 1990, Sadeh, 1991 ] </ref> , leaving very little room for dealing easily with future conflicts, DSS provides for such contingencies while still managing to produce quality schedules. <p> This capability is absolutely necessary within dynamic scheduling environments to guide the scheduler and minimize the need for backtracking and constraint relaxation. Existing systems tend to rely on a narrow consultation of perspectives on the current problem <ref> [ Fox, 1983, Smith et al., 1990, Sadeh, 1991 ] </ref> , thus limiting their ability to fully comprehend the current state of problem solving and react accordingly. Accommodation of Additional Domain Complexities Many real-world scheduling problems introduce additional complexities to the class of canonical RCSPs. <p> 4 Finally, Norman Sadeh's MICRO-BOSS (Micro-Bottleneck Scheduling System) exhibited an opportunistic, activity-based scheduling approach that helped achieve a finer degree of opportunism, thereby allowing for the rapid shifting of attention from one location to another within a developing schedule, thereby allowing potential conflicts to be resolved as early as possible <ref> [ Sadeh, 1991 ] </ref> . In the following sections, we describe the development of these three approaches in greater detail, and discuss their major contributions to the field of knowledge-based scheduling. 2.2.2.1 Scheduling as Constraint-Directed Search ISIS was the first generic, knowledge-based system for solving RCSPs.
Reference: [ Schr oder, 1972 ] <author> Helmut Schr oder. </author> <title> The assignment of aircraft to gate positions. </title> <booktitle> In Proceedings, 12th Annual AGIFORS Symposium, </booktitle> <pages> pages 301-318, </pages> <address> Nathanya Israel, </address> <month> October </month> <year> 1972. </year> <booktitle> Airline Group of the International Federation of Operational Research Societies (AGIFORS). </booktitle>
Reference-contexts: suggesting that there is a clear benefit to applying a wide range of scheduling perspectives in the process of determining the urgency of each individual activity. 2.1.3.3 AGSS Domain Applications Schr oder's Heuristic Approach to Gate Assignment An early heuristic approach for producing gate assignments for aircraft is presented in <ref> [ Schr oder, 1972 ] </ref> . Schr oder describes a gate-assignment program developed by Lufthansa in 1972 for use at the (then newly constructed) Frankfurt Airport.
Reference: [ Shifrin, 1988 ] <author> Carole A. Shifrin. </author> <title> Gate assignment expert system reduces delays at United's hubs. </title> <booktitle> Aviation Week & Space Technology, </booktitle> <pages> pages 148-149, </pages> <month> 25 January </month> <year> 1988. </year>
Reference-contexts: Kennedy Airport [ Riccio and Ron, 1985 ] . Texas Instruments has developed the Gate Assignment Display System (GADS), an expert system which has been used by United Airlines to assign gates to flights at O'Hare Airport in Chicago and Stapleton Airport in Denver <ref> [ Shifrin, 1988 ] </ref> . Texas Air produces gate assignments for all Eastern and Continental Airlines flights at Houston and Miami International Airports using a system called GATEKEEPER [ Fisher, 1988 ] . We discuss below two additional expert systems that have been developed for solving the gate-assignment problem.
Reference: [ Simon, 1981 ] <author> Herbert A. Simon. </author> <booktitle> Sciences of the Artificial. </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge MA, </address> <note> second edition, </note> <year> 1981. </year>
Reference: [ Smith and Ow, 1985 ] <author> Stephen F. Smith and Peng Si Ow. </author> <title> The use of multiple problem decompositions in time constrained planning tasks. </title> <booktitle> In Proceedings, Ninth International Joint Conference on Artificial Intelligence, </booktitle> <volume> volume 2, </volume> <pages> pages 1013-1015, </pages> <address> Los Angeles CA, </address> <month> August </month> <year> 1985. </year> <booktitle> International Joint Conferences on Artificial Intelligence (IJCAI). </booktitle>
Reference-contexts: Smith, et al, have defined and experimented with what they call order-based and resource-based perspectives <ref> [ Smith and Ow, 1985 ] </ref> . Within the process plan template for a job, sequencing constraints provide an order-based perspective used by the scheduler to ensure that the sequencing of tasks within a process plan of that type is legal.
Reference: [ Smith et al., 1986a ] <author> Stephen F. Smith, Mark S. Fox, </author> <title> and Peng Si Ow. Constructing and maintaining detailed production plans: Investigations into the development of knowledge-based factory scheduling systems. </title> <journal> AI Magazine, </journal> <volume> 7(4) </volume> <pages> 45-61, </pages> <month> Fall </month> <year> 1986. </year>
Reference-contexts: At any decision-making point, the extent of the information brought to bear on the analysis of the problem and the formulation of its solution defines a particular perspective on the problem that may be used to solve it <ref> [ Smith et al., 1986a, Smith et al., 1986b ] </ref> . This degree of perspective provides an indication of how well a problem may be expected to be solved, based on the nature of the information considered in the solution process. <p> with Common Benchmarks 37 Using a set of benchmark data designed for testing the OPIS system [ Ow, 1986, Ow and Smith, 1988, Chiang et al., 1990 ] , we have been able to compare (favorably) the scheduling performance of DSS with results from a version of OPIS (OPIS 0) <ref> [ Smith et al., 1986a ] </ref> , ISIS [ Fox, 1983 ] , and a modified version of the COVERT dispatch rule [ Vepsaleinen, 1984 ] in a simplified job-shop domain. These experiments confirm the improvements in reduced tardiness that are achieved by the scheduling approach implemented in DSS. <p> Decisions regarding the selection of resources and reservations simply attempt to satisfy the constraints relating to the order (to properly sequence the operations and meet the due date). Potential constraints on the resources (minimizing set and travel times), and among operations (the availability of required 4 See <ref> [ Smith et al., 1986a ] </ref> for a discussion of issues concerning both the ISIS and OPIS systems. 60 resources), are (at best) only partially addressed by the heuristics used to select resources and reservations.
Reference: [ Smith et al., 1986b ] <author> Stephen F. Smith, Peng Si Ow, Claude Le Pape, Bruce McLaren, and Nicola Muscettola. </author> <title> Integrating multiple scheduling perspectives to generate detailed production plans. </title> <booktitle> In Proceedings, Conference on AI in Manufacturing, </booktitle> <pages> pages 2/123-2/137, </pages> <address> Long Beach CA, </address> <month> September </month> <year> 1986. </year> <journal> Society of Manufacturing Engineers (SME). </journal> <volume> 244 </volume>
Reference-contexts: Determining task sequences and securing resources in any kind of scheduling problem requires a scheduler to reason about the conflicts that arise in the attempt to satisfy the various constraints among the resources, tasks and orders in the domain <ref> [ Smith et al., 1986b ] </ref> . These conflicts arise when the satisfaction of a particular constraint or constraints affects the ability to satisfy other constraints. 1.4.3.3.1 Consulting Multiple Scheduling Perspectives The process of solving an RCSP comprises two separate planning and scheduling phases. <p> At any decision-making point, the extent of the information brought to bear on the analysis of the problem and the formulation of its solution defines a particular perspective on the problem that may be used to solve it <ref> [ Smith et al., 1986a, Smith et al., 1986b ] </ref> . This degree of perspective provides an indication of how well a problem may be expected to be solved, based on the nature of the information considered in the solution process.
Reference: [ Smith et al., 1990 ] <author> Stephen F. Smith, Peng Si Ow, Nicola Muscettola, Jean-Yves Potvin, and Dirk C. Matthys. </author> <title> An integrated framework for generating and revising factory schedules. </title> <journal> Journal of the Operational Research Society, </journal> <volume> 41(6) </volume> <pages> 539-552, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: The degree of pliancy exhibited by a scheduler in reacting to unforeseen events is a measure of flexibility that is increasingly important when operating within dynamic environments. Unlike other systems that intentionally compact their developing schedules throughout the scheduling process <ref> [ Fox, 1983, Smith et al., 1990, Sadeh, 1991 ] </ref> , leaving very little room for dealing easily with future conflicts, DSS provides for such contingencies while still managing to produce quality schedules. <p> This capability is absolutely necessary within dynamic scheduling environments to guide the scheduler and minimize the need for backtracking and constraint relaxation. Existing systems tend to rely on a narrow consultation of perspectives on the current problem <ref> [ Fox, 1983, Smith et al., 1990, Sadeh, 1991 ] </ref> , thus limiting their ability to fully comprehend the current state of problem solving and react accordingly. Accommodation of Additional Domain Complexities Many real-world scheduling problems introduce additional complexities to the class of canonical RCSPs.
Reference: [ Smith, 1987 ] <author> Stephen F. Smith. </author> <title> A constraint-based framework for reactive management of factory schedules. </title> <booktitle> In Proceedings, International Conference on Expert Systems and the Leading Edge in Production Planning and Control, </booktitle> <pages> pages 349-366, </pages> <address> Charleston SC, </address> <month> May </month> <year> 1987. </year>
Reference: [ Smith, 1991 ] <author> Stephen F. Smith. </author> <title> Knowledge-based production management: Approaches, results and prospects. </title> <type> Technical Report CMU-RI-TR-91-21, </type> <institution> Center for Integrated Manufacturing Decision Systems, The Robotics Institute, Carnegie Mellon University, </institution> <address> Pittsburgh PA, </address> <month> December </month> <year> 1991. </year>
Reference-contexts: General surveys of the issues involved in the solution of RCSPs can be found in [ Davis, 1973, Graves, 1981, Willis, 1985 ] . Discussions of a number of different AI approaches to solving the problem can be found in <ref> [ Noronha and Sarma, 1991, Smith, 1991 ] </ref> . 2.1 Operations Research Approaches As mentioned in Chapter 1, the class of RCSPs has been extensively studied within the field of operations research. It is, therefore, a relatively well-understood class of problems.
Reference: [ Speranza and Vercellis, 1993 ] <author> M. Grazia Speranza and Carlo Vercellis. </author> <title> Hierarchical models for multi-project planning and scheduling. </title> <journal> European Journal of Operational Research, </journal> <volume> 64(2) </volume> <pages> 312-325, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: These developments force specific alterations to the existing schedule and constraints, whereupon the multi-level problem-solving mechanism is re-invoked to repair the schedule. Schedule repair time is kept to a reasonable fraction of the original schedule generation time. A more recent multiple-objective hierarchical approach is described in <ref> [ Speranza and Vercellis, 1993 ] </ref> . Here the goal is to model the multiple objectives of the planning and scheduling portions of real-world RCSPs.
Reference: [ Steele, 1990 ] <author> Guy L. Steele, Jr. </author> <title> Common Lisp: The Language. </title> <publisher> Digital Press, </publisher> <address> Bedford MA, </address> <note> second edition, </note> <year> 1990. </year>
Reference-contexts: The remaining sections describe the processes of re-securing a reservation (following a cancellation), refining a reservation, and processing a resource failure. 4.1 Implementation Details DSS is a blackboard system [ Erman et al., 1980 ] , implemented in Common Lisp <ref> [ Steele, 1990 ] </ref> and the Common Lisp Object System (CLOS) [ Keene, 1989 ] , and using the Generic Blackboard System (GBB TM ) [ Blackboard Technology Group, 1992 ] . 1 The blackboard architecture provides an effective means for representing, organizing, and manipulating the various components that constitute a
Reference: [ Stefik, 1980 ] <author> Mark J. Stefik. </author> <title> Planning With Constraints. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Stanford University, Stanford CA, </institution> <month> January </month> <year> 1980. </year>
Reference-contexts: The first is a least-commitment approach to problem solving that attempts to minimize the introduction of constraints at every decision-making step <ref> [ Stefik, 1980 ] </ref> . The second is an equally conservative, worst-case reservation policy for handling the assignment of mobile resources under conditions of uncertainty. A least-commitment approach can be implemented within a scheduling process by incorporating flexibility, in the form of slack time, into the developing order schedules.
Reference: [ Stinson et al., 1978 ] <author> Joel P. Stinson, Edward W. Davis, and Basheer M. Khumawala. </author> <title> Multiple resource-constrained scheduling using branch and bound. </title> <journal> AIIE Transactions, </journal> <volume> 10(3) </volume> <pages> 252-259, </pages> <month> September </month> <year> 1978. </year>
Reference-contexts: A general survey of branch-and-bound approaches is provided in [ Lawler and Wood, 1966 ] . The branch-and-bound approach described in <ref> [ Stinson et al., 1978 ] </ref> generates the tree by progressively scheduling activities forward from the start of the schedule. Each node is expanded by creating a new node for each possible combination of activities that could be scheduled according to both the precedence and resource constraints.
Reference: [ Tsubakitani and Deckro, 1990 ] <author> Shigeru Tsubakitani and Richard F. Deckro. </author> <title> A heuristic for multi-project scheduling with limited resources in the housing industry. </title> <journal> European Journal of Operational Research, </journal> <volume> 49(1) </volume> <pages> 80-91, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: The results of Kurtulus and Davis were later tested in a heuristic scheduling system designed to solve RCSPs in the Japanese housing construction industry <ref> [ Tsubakitani and Deckro, 1990 ] </ref> . The analysis described in [ Kurtulus and Davis, 1982 ] suggested the use of the SASP heuristic for solving the housing construction RCSPs. The SASP heuristic and the scheduler within which it was implemented (MPM) were tested against two other heuristic scheduling systems.
Reference: [ Vepsaleinen, 1984 ] <author> Ari Vepsaleinen. </author> <title> State Dependent Priority Rules for Scheduling. </title> <type> PhD thesis, </type> <institution> Graduate School of Industrial Administration, Carnegie Mellon University, </institution> <address> Pittsburgh PA, </address> <month> April </month> <year> 1984. </year>
Reference-contexts: 1988, Chiang et al., 1990 ] , we have been able to compare (favorably) the scheduling performance of DSS with results from a version of OPIS (OPIS 0) [ Smith et al., 1986a ] , ISIS [ Fox, 1983 ] , and a modified version of the COVERT dispatch rule <ref> [ Vepsaleinen, 1984 ] </ref> in a simplified job-shop domain. These experiments confirm the improvements in reduced tardiness that are achieved by the scheduling approach implemented in DSS.
Reference: [ Weiss and Kulikowski, 1984 ] <author> Sholom M. Weiss and Casimir A. </author> <title> Kulikowski. A Practical Guide to Designing Expert Systems. </title> <publisher> Rowman and Alanheld, </publisher> <address> Totowa NJ, </address> <year> 1984. </year>
Reference-contexts: Updates to the knowledge base reflect the particular actions specified by the rule. The process finishes successfully when the working memory contains a solution to the overall problem. Considerable work has been devoted to the development of expert systems <ref> [ Weiss and Kulikowski, 1984 ] </ref> , but for the purposes of this discussion, we classify them simply as structured heuristic problem solvers.
Reference: [ Westbrook et al., 1992 ] <author> David L. Westbrook, Scott D. Anderson, David M. Hart, and Paul R. Cohen. </author> <title> Common lisp instrumentation package: User manual. </title> <type> CMPSCI Technical Report 94-26, </type> <institution> Department of Computer Science, University of Massachusetts, Amherst, </institution> <year> 1992. </year>
Reference-contexts: Both the collection and filtering of data for the metrics described in Section 5.2 and the definition and running of the experiments involving DSS described within this section were accomplished using the Common Lisp Instrumentation Package (CLIP) <ref> [ Westbrook et al., 1992 ] </ref> . 5.6.1 Comparison with Common Benchmarks In the following experiments, TCP was run in a batch scheduling mode, with the entire set of unchanging orders known from the outset. There were no surprise orders and no resource failures.
Reference: [ Willis, 1985 ] <author> R.J. Willis. </author> <title> Critical path analysis and resource constrained project scheduling theory and practice. </title> <journal> European Journal of Operational Research, </journal> <volume> 21(2) </volume> <pages> 149-155, </pages> <month> August </month> <year> 1985. </year>
Reference-contexts: Finally, we survey some other relevant artificial intelligence (AI) approaches, focusing on three important knowledge-based scheduling systems that have helped influence the design and development of DSS. General surveys of the issues involved in the solution of RCSPs can be found in <ref> [ Davis, 1973, Graves, 1981, Willis, 1985 ] </ref> .
References-found: 75

