URL: ftp://theory.lcs.mit.edu/pub/tds/TR-557.ps.Z
Refering-URL: http://theory.lcs.mit.edu/tds/reflist.html
Root-URL: 
Title: A Process Algebraic View of I/O Automata  
Author: by Roberto Segala Nancy A. Lynch Campbell L. Searle 
Degree: Submitted to the Department of Electrical Engineering and Computer Science in partial fulfillment of the requirements for the degree of Master of Science in Electrical Engineering and Computer Science at the  Signature of Author  Certified by  Professor of Computer Science Thesis Supervisor Accepted by  Chairman, Departmental Committee on Graduate Students  
Note: Diploma in  c Massachusetts Institute of Technology  
Date: (1991)  (1991)  June 1992  1992  September 8, 1994  
Address: Pisa Italy  
Affiliation: B.S., Computer Science University of  Computer Science Scuola Normale Superiore Pisa  MASSACHUSETTS INSTITUTE OF TECHNOLOGY  Department of Electrical Engineering and Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [ABV92] <author> L. Aceto, B. Bloom, and F. Vaandrager. </author> <title> Turning SOS rules into equations. </title> <booktitle> In Proceedings of the Seventh Annual Symposium on Logic in Computer Science, </booktitle> <year> 1992. </year>
Reference-contexts: The completeness result is achieved through a special notion of normal form where the parallel operator is present. In general (see <ref> [ABV92] </ref>) the normal form contains only a 0 process, a prefixing operator and a nondeterministic choice operator. In DIOA the parallel operator cannot be eliminated in general from expressions of the form knil. The transition rules of DIOA, in fact, do not fit the format of [ABV92]. <p> In general (see <ref> [ABV92] </ref>) the normal form contains only a 0 process, a prefixing operator and a nondeterministic choice operator. In DIOA the parallel operator cannot be eliminated in general from expressions of the form knil. The transition rules of DIOA, in fact, do not fit the format of [ABV92]. Once the normal form is identified, the completeness result is proven just for expressions in normal form and it is extended to general expressions by showing that each recursion-free expression with a finite interface has a provably equivalent one in normal form.
Reference: [BIM90] <author> B. Bloom, S. Istrail, and A.R. Meyer. </author> <title> Bisimulation can't be traced. </title> <type> Technical Report 90-1150, </type> <institution> Department of Computer Science, Cornell University, </institution> <address> Ithaca, New York, </address> <month> August </month> <year> 1990. </year>
Reference: [BV88] <author> J.C.M. Baeten and F.W. Vaandrager. </author> <title> Specification and verification of a circuit in ACP. </title> <type> Technical report, </type> <institution> Department of Mathematics and Computer Science, Amster-dam, </institution> <month> October </month> <year> 1988. </year>
Reference-contexts: The completeness result is then stated by Proposition 5.4.9. 78 Chapter 6 Example Specifications and Verifications In this chapter we show some example specifications and verifications within DIOA. We specify a simple circuit that is reported in [Jos92] and a more complicated one that is reported in <ref> [BV88] </ref>. <p> The circuit is derived from Kaldewaij [Kal87] and was already specified and verified by means of ACP by Baeten and Vaandrager <ref> [BV88] </ref>. The main problem encountered in [BV88] is the absence of a distinction between input and output actions in a process. They had to introduce an operator to describe the "no output blocking" property of I/O automata and another operator r to limit the traces of a process. <p> The circuit is derived from Kaldewaij [Kal87] and was already specified and verified by means of ACP by Baeten and Vaandrager <ref> [BV88] </ref>. The main problem encountered in [BV88] is the absence of a distinction between input and output actions in a process. They had to introduce an operator to describe the "no output blocking" property of I/O automata and another operator r to limit the traces of a process. <p> In the rest of this section we will use actions to represent a change of voltage level (from HI to LOW or vice versa) in the signals. In this way, instead of having a pair of actions for each port (a "; a #) as in <ref> [BV88] </ref>, we have a single action a corresponding to a change of voltage level. We start by specifying an AND port. 85 Specification 6.3.1 (AND port) The following set of equations specify an AND port. <p> The initial state is S. We now propose an implementation in which we assume instantaneous communication between the components. This is a simplification of the implementation given in <ref> [BV88] </ref>. The implementation is the following process M . M = t fc;dg (a : d : C 1 bda ka : c : C 1 ac b ) In the following we will let H = fc; dg.
Reference: [BW90] <author> J.C.M. Baeten and W.P Weijland. </author> <title> Process Algebra. </title> <booktitle> Cambridge Tracts in Theoretical Computer Science 18, </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1990. </year>
Reference: [De 84] <editor> R. De Simone. Calculabilite et expressivite dans l'algebra de processus paralleles MEIJE, </editor> <year> 1984. </year> <institution> These de 3 e cycle, Univ. </institution> <address> Paris 7. </address>
Reference: [De 85a] <author> R. De Nicola. </author> <title> Testing Equivalences and Fully Abstract Models for Communicating Processes. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Edinburgh, </institution> <year> 1985. </year>
Reference-contexts: Some relations that seem very closed to the preorder relations of I/O automata and that deserve further investigation are the testing preorders of De Nicola and Hennessy <ref> [DH84, De 85a, Hen88] </ref>. Although the above topics are quite important, we believe that one of the most important topics is to give a strong foundation to the commonly used verification methods.
Reference: [De 85b] <author> R. De Simone. </author> <title> Higher-level synchronising devices in MEIJE-SCCS. </title> <journal> Theoretical Computer Science, </journal> <volume> 37 </volume> <pages> 245-267, </pages> <year> 1985. </year>
Reference: [De 87] <author> R. De Nicola. </author> <title> Extensional equivalences for transition systems. </title> <journal> Acta Informatica, </journal> <volume> 24 </volume> <pages> 211-237, </pages> <year> 1987. </year>
Reference: [DH84] <author> R. De Nicola and M. Hennessy. </author> <title> Testing equivalences for processes. </title> <journal> Theoretical Com--puter Science, </journal> <volume> 34 </volume> <pages> 83-133, </pages> <year> 1984. </year>
Reference-contexts: Some relations that seem very closed to the preorder relations of I/O automata and that deserve further investigation are the testing preorders of De Nicola and Hennessy <ref> [DH84, De 85a, Hen88] </ref>. Although the above topics are quite important, we believe that one of the most important topics is to give a strong foundation to the commonly used verification methods.
Reference: [DH87] <author> R. De Nicola and M. Hennessy. </author> <title> CCS without t 's. </title> <publisher> LNCS, </publisher> <pages> 249 136-152, </pages> <year> 1987. </year>
Reference: [Fra86] <author> Nissim Francez. </author> <title> Fairness. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1986. </year>
Reference: [Gla90] <author> R.J. van Glabbeek. </author> <title> The linear time branching time spectrum. </title> <editor> In J.C.M. Baeten and J.W. Klop, editors, </editor> <booktitle> Proceedings CONCUR 90, Amsterdam, volume 458 of Lecture Notes in Computer Science, </booktitle> <pages> pages 278-297. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference: [GV89] <author> J.F. Groote and F. Vaandrager. </author> <title> Structured operational semantics and bisimulation as a congruence (extended abstract). </title> <editor> In G. Ausiello, M. Dezani-Ciancaglini, and S. Ronchi Della Rocca, editors, </editor> <booktitle> Proceedings 16 th ICALP, Stresa, volume 372 of Lecture Notes in Computer Science, </booktitle> <pages> pages 423-438. </pages> <publisher> Springer-Verlag, </publisher> <year> 1989. </year> <note> Full version to appear in Information and Computation. </note>
Reference: [Hen88] <author> M. Hennessy. </author> <title> Algebraic Theory of Processes. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1988. </year>
Reference-contexts: Some relations that seem very closed to the preorder relations of I/O automata and that deserve further investigation are the testing preorders of De Nicola and Hennessy <ref> [DH84, De 85a, Hen88] </ref>. Although the above topics are quite important, we believe that one of the most important topics is to give a strong foundation to the commonly used verification methods.
Reference: [Hoa85] <author> C.A.R. Hoare. </author> <title> Communicating Sequential Processes. </title> <booktitle> Prentice-Hall International, </booktitle> <address> En-glewood Cliffs, </address> <year> 1985. </year>
Reference: [Jon85] <author> B. Jonsson. </author> <title> A model and proof system for asynchronous networks. </title> <booktitle> In Proceedings of the 4 th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <address> Minaki, Ontario, Canada, </address> <pages> pages 49-58, </pages> <year> 1985. </year>
Reference: [Jon87] <author> B. Jonsson. </author> <title> Compositional Verification of Distributed Systems. </title> <type> PhD thesis, </type> <institution> Department of Computer Systems, Uppsala University, </institution> <year> 1987. </year> <note> DoCS 87/09. </note>
Reference: [Jos92] <author> M.B. Josephs. </author> <title> Receptive process theory. </title> <journal> Acta Informatica, </journal> <volume> 29 </volume> <pages> 17-31, </pages> <year> 1992. </year>
Reference-contexts: The completeness result is then stated by Proposition 5.4.9. 78 Chapter 6 Example Specifications and Verifications In this chapter we show some example specifications and verifications within DIOA. We specify a simple circuit that is reported in <ref> [Jos92] </ref> and a more complicated one that is reported in [BV88]. <p> In I/O automata the distinction between A and B is given by fair traces: in fact a is a fair trace of A but not a fair trace of B according to the I/O automata semantics. Also in receptive process theory <ref> [Jos92] </ref> the problem is solved since a is a divergence of A but not a divergence of B. The use of divergences, however, leads to A 6v B + a : nil while the quiescent and fair preorders lead to A v B +a:nil. <p> This topic could be the subject of further research. 6.2 A simple circuit In this section we use DIOA and the quiescent preorder to specify and verify a simple circuit that is reported in <ref> [Jos92] </ref>. We start by specifying some simple devices. A majority element is a device having three input ports and an output one. The voltage level of the output port is that of the majority of the inputs.
Reference: [Kal87] <author> A. Kaldewaij. </author> <title> The translation of processes into circuits. </title> <booktitle> In Proceedings PARLE Conference, </booktitle> <volume> LNCS 258, </volume> <pages> pages 195-212, </pages> <year> 1987. </year> <month> 109 </month>
Reference-contexts: The last step is a direct consequence of the definition of I. We can now apply the recursive substitutivity axiom and conclude. 6.3 Handshaking protocol In this section we use DIOA to specify and verify a circuit realizing the handshaking protocol. The circuit is derived from Kaldewaij <ref> [Kal87] </ref> and was already specified and verified by means of ACP by Baeten and Vaandrager [BV88]. The main problem encountered in [BV88] is the absence of a distinction between input and output actions in a process.
Reference: [LT87] <author> N.A. Lynch and M.R. Tuttle. </author> <title> Hierarchical correctness proofs for distributed algo-rithms. </title> <booktitle> In Proceedings of the 6 th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 137-151, </pages> <address> Vancouver, Canada, </address> <month> August </month> <year> 1987. </year> <note> A full version is available as MIT Technical Report MIT/LCS/TR-387. </note>
Reference-contexts: DIOA is directly related to I/O automata of Lynch and Tuttle <ref> [LT87] </ref>, which have been successfully used for the verification of algorithms in distributed environments. We have found a set of sound laws for the quiescent preorder over DIOA that are complete for recursion-free processes. <p> For example, in Chapter 6 we have given an informal description of how and when the quiescent preorder could be thought as an implementation relation; in <ref> [LT87] </ref> Nancy Lynch and Mark Tuttle give an informal understanding of how the fair preorder can be used as an implementation relation; in Chapter 6 we have given an example of a property that could be required of a system and is not detected by the fair preorder.
Reference: [Mil89] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <booktitle> Prentice-Hall International, </booktitle> <address> Englewood Cliffs, </address> <year> 1989. </year>
Reference: [Par81] <author> D.M.R. Park. </author> <title> Concurrency and automata on infinite sequences. </title> <editor> In P. Deussen, editor, </editor> <booktitle> 5 th GI Conference, volume 104 of Lecture Notes in Computer Science, </booktitle> <pages> pages 167-183. </pages> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference: [Plo81] <author> G.D. Plotkin. </author> <title> A structural approach to operational semantics. </title> <type> Technical Report DAIMI FN-19, </type> <institution> Computer science Department, Aarhus University, </institution> <year> 1981. </year>
Reference: [Seg91] <author> R. Segala. </author> <title> Algebre di processi come automi con input e output, 1991. </title> <institution> Tesi di laurea, Universita di Pisa, Italy. </institution>
Reference: [Sta84] <author> E.W. Stark. </author> <title> Foundations of a theory of specification for Distributed Systems. </title> <type> PhD thesis, </type> <institution> Department of Electrical Engineering and Computer Science, Massachusetts Institute of Technology, </institution> <month> August </month> <year> 1984. </year> <note> Available as Technical Report MIT/LCS/TR-342. </note>
Reference: [Vaa91] <author> F.W. Vaandrager. </author> <title> On the relationship between process algebra and Input/Output automata. </title> <booktitle> In Proceedings of the Sixth Annual Symposium on Logic in Computer Science, </booktitle> <year> 1991. </year> <month> 110 </month>
References-found: 26

