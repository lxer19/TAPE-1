URL: http://charm.cs.uiuc.edu/version2/papers/ProjectionsIPPS93.ps
Refering-URL: http://charm.cs.uiuc.edu/version2/papers/ProjectionsIPPS93.html
Root-URL: http://www.cs.uiuc.edu
Email: email: sinha@cs.uiuc.edu email: kale@cs.uiuc.edu  
Title: Projections: A Preliminary Performance Tool for Charm  
Author: Amitabh B. Sinha Laxmikant V. Kale 
Address: Urbana, IL 61801 Urbana, IL 61801  
Affiliation: Department of Computer Science Department of Computer Science University of Illinois University of Illinois  
Abstract: The advent and acceptance of massively parallel machines has made it increasingly important to have tools to analyze the performance of programs running on these machines. Current day performance tools suffer from two drawbacks: they are not scalable and they lose specific information about the user program in their attempt for generality. In this paper, we present Projections, a scalable performance tool, for Charm that can provide program-specific information to help the users better understand the behavior of their programs. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. A. Geist, M. T. Heath, B. W. Peyton, and P. H. Worley. Picl: </author> <title> a portable instrumented communication library, c reference manual. </title> <type> Technical Report ORNL/TM-11130, </type> <institution> Oak Ridge National Laboratory, </institution> <year> 1990. </year>
Reference: [2] <author> Michael T. Heath and Jennifer A. Etheridge. </author> <title> Visualizing the performance of parallel programs. </title> <journal> IEEE Software, </journal> <pages> pages 29-39, </pages> <month> Sept. </month> <year> 1991. </year>
Reference-contexts: In this section, we examine Paragraph and Upshot, two general-purpose performance tools. ParaGraph <ref> [2] </ref> aims to provide the user with a dynamic depiction of the behavior of the parallel program by offering a re-enactment of the program's trace through many different views.
Reference: [3] <author> Virginia Herrarte and Rusty Lusk. </author> <title> Studying parallel program behaviour with upshot. User Manual for Upshot. </title>
Reference-contexts: Trace data for ParaGraph can be generated by instrumenting the user program with primitives from PICL (Portable Instrumentation Communication Library)[1]. Upshot <ref> [3] </ref> displays the logfile information as a time-line for each processor. A time-line for a processor contains either (or both) an event trace of the program on that processor or a trace of states of the program on that processor.
Reference: [4] <author> L. V. Kale. </author> <title> The Chare Kernel Parallel Programming System Programming System. </title> <booktitle> In International Conference on Parallel Processing, </booktitle> <month> August </month> <year> 1990. </year>
Reference-contexts: The user can then identify and remedy the segments of the program responsible for poor performance. However a performance tool can achieve specificity only at the loss of generality; therefore it is important that a specific performance tool should be usable in conjunction with existing general-purpose tools. Charm <ref> [4, 5] </ref> is a portable parallel programming language for MIMD machines. The system is described briefly in Section 2. In this paper, we will describe a performance feedback tool called Projections for Charm.
Reference: [5] <author> L. V. Kale, et al. </author> <title> The Chare Kernel Programming Language Manual. </title> <type> Internal report. </type>
Reference-contexts: The user can then identify and remedy the segments of the program responsible for poor performance. However a performance tool can achieve specificity only at the loss of generality; therefore it is important that a specific performance tool should be usable in conjunction with existing general-purpose tools. Charm <ref> [4, 5] </ref> is a portable parallel programming language for MIMD machines. The system is described briefly in Section 2. In this paper, we will describe a performance feedback tool called Projections for Charm.
Reference: [6] <author> J. D. C. Little, K. G. Murty, D. W. Sweeney, and C. Karel. </author> <title> An algorithm for the traveling salesman problem. </title> <journal> Operations Research, </journal> <volume> 11 </volume> <pages> 972-989, </pages> <year> 1963. </year>
Reference-contexts: Every pair of cities i and j has a cost C ij associated with them. We have implemented the branch&bound scheme proposed by Little, et. al. <ref> [6] </ref>. In Little's approach, one starts with an initial partial solution, a cost function (C), and an infinite upper bound. A partial solution comprises a set of edges (pairs of cities) that have been included in the circuit, and a set of edges that have been excluded from the circuit.
Reference: [7] <author> A. D. Malony, D. A. Reed, J. W. Arendt, R. A. Aydt, D. Grabas, and B. K. Totty. </author> <title> An integrated performance data collection, analysis, and visualization system. </title> <booktitle> In Proceedings of the Fourth Conference on Hypercube Concurrent Computers and Applications. Association for Computing Machinery, </booktitle> <year> 1989. </year>
Reference-contexts: Hence we can, with the same trace information, provide access to general purpose tools such as Upshot and very specific tools such as Projections. These other general purpose tools do not provide the views that our performance tool does, and vice versa, so they complement each other. Pablo <ref> [7, 8] </ref> is a portable, scalable, and extensible performance environment being developed at the University of Illinois, Urbana. Pablo consists of two components: software instrumentation and performance data analysis. The latter consists of performance data transformation modules that can be graphically interconnected to form an acyclic, directed data analysis graph.
Reference: [8] <author> D. A. Reed, R. D. Olson, R. A. Aydt, T. M. Madhyastha, T. Birkett, D. W. Jensen, B. A. A. Nazief, and B. K. Totty. </author> <title> Scalable performance environments for parallel systems. </title> <type> Technical report, </type> <institution> University of Illinois, Urbana, </institution> <year> 1991. </year>
Reference-contexts: Hence we can, with the same trace information, provide access to general purpose tools such as Upshot and very specific tools such as Projections. These other general purpose tools do not provide the views that our performance tool does, and vice versa, so they complement each other. Pablo <ref> [7, 8] </ref> is a portable, scalable, and extensible performance environment being developed at the University of Illinois, Urbana. Pablo consists of two components: software instrumentation and performance data analysis. The latter consists of performance data transformation modules that can be graphically interconnected to form an acyclic, directed data analysis graph.
Reference: [9] <author> Edward W. Reingold, Jurg Nievergelt, and Nars-ingh Deo. </author> <title> Combinatorial Algorithms: Theory and Practice. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1977. </year>
Reference-contexts: The analysis is carried out with overviews for this example, even though more detailed information can be (and was) obtained using the in-depth views, it hasn't been used here, because of space limitations. However, overviews are sufficient for the analysis we will present. The Traveling Salesman Problem (TSP) <ref> [9] </ref> is a typical example of an optimization problem solved using branch&bound techniques. In this problem, a salesman must visit n cities, returning to the starting point, and is required to minimize the total cost of the trip.
Reference: [10] <author> W. Shu and L. V. Kale. </author> <title> A dynamic load balancing strategy for small-grained processes. </title> <booktitle> In Supercomputing, </booktitle> <month> November </month> <year> 1989. </year>
Reference-contexts: We term as useful messages all new-chare messages with cost less than the cost of the best solution, and as useless messages all new-chare messages with cost greater than the cost of the best solution. The TSP application was executed on 16 processors of an NCUBE/2 with the ACWN <ref> [10] </ref> (adaptive contracting within neighborhoods) load balancing strategy. The execution with ACWN took about 29 seconds with a total of 7131 partial solutions being generated. The optimal solution was found at 14.4 seconds. processing over stages for the ACWN.
Reference: [11] <author> A. B. Sinha and L. V. Kale. </author> <title> A load balancing strategy for prioritized execution of tasks. </title> <booktitle> In International Parallel Processing Symposium, </booktitle> <month> April </month> <year> 1993. </year>
Reference-contexts: This suggests that the load balancing strategy being used with this application did not balance the priorities of new chare messages while balancing their loads. So we ran the TSP application on 16 processors with another load balancing strategy called the Manager strategy <ref> [11] </ref>, which balances both load and priorities across processors. The execution with the Manager strategy took 21 seconds, and a total of 5785 partial solutions were generated. The optimal solution was found at 9.6 seconds.
References-found: 11

