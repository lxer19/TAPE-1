URL: ftp://theory.lcs.mit.edu/pub/cilk/frigo-ms-thesis.ps.gz
Refering-URL: http://theory.lcs.mit.edu/~cilk/abstracts/frigo-ms-thesis.html
Root-URL: 
Title: The weakest reasonable memory model  
Degree: by Matteo Frigo Laurea, Universit a di Padova (1992) Dottorato di Ricerca, Universit a di Padova (1996) Submitted to the Department of Electrical Engineering and Computer Science in partial fulfillment of the requirements for the degree of Master of Science at the  c Matteo Frigo, MCMXCVII. All rights reserved. The author hereby grants to MIT permission to reproduce and distribute publicly paper and electronic copies of this thesis document in whole or in part, and to grant others the right to do so. Author  Certified by Charles E. Leiserson Professor of Computer Science and Engineering Thesis Supervisor Accepted by PUT NAME HERE Chairman, Departmental Committee on Graduate Students  
Date: October 1997  January 28, 1998  
Affiliation: MASSACHUSETTS INSTITUTE OF TECHNOLOGY  Department of Electrical Engineering and Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [Adve and Gharachorloo 1995] <author> ADVE, S. AND GHARACHORLOO, K. </author> <year> 1995. </year> <title> Shared memory consistency models: A tutorial. </title> <type> Technical Report 9512 (Sept.), </type> <institution> Rice University. </institution> <note> Also available at http://www-ece.rice.edu/ece/faculty/Adve/ publications/models tutorial.ps. </note>
Reference-contexts: For example, processor consistency by Goodman [1989] is a model where every processor can have an independent view of memory, and release consistency by Gharachorloo et al. [1990] is a model where the memory becomes consistent only when certain synchronizing operations are performed. See <ref> [Adve and Gharachorloo 1995] </ref> for a good tutorial on this subject. In this thesis, we try to establish limits to this process of relaxation of sequential 4 consistency.
Reference: [Adve and Hill 1990] <author> ADVE, S. V. AND HILL, M. D. </author> <year> 1990. </year> <title> Weak orderinga new definition. </title> <booktitle> In Proceedings of the 17th Annual International Symposium on Computer Architecture (Seattle, </booktitle> <address> Washington, </address> <month> May </month> <year> 1990), </year> <pages> pp. 214. </pages>
Reference-contexts: On the other hand, the assumption of location consistency/coherence is often implicit in all memory models [Adve and Ghara-chorloo 1995] (except for the model in Gao and Sarkar [1994] and dag consistency). But, by their definitions alone, PC and LC are incomparable. Some memory models (like weak ordering) <ref> [Dubois et al. 1986; Adve and Hill 1990] </ref> distinguish between ordinary and synchronizing memory accesses. For completeness, we now briefly sketch how to extend our model to account for this case. First, the two kinds of memory operations must be distinguished.
Reference: [Arvind et al. 1996] <author> ARVIND, MAESSEN, J. W., NIKHIL, R. S., AND STOY, J. </author> <year> 1996. </year> <title> Lambda-S: an implicitly parallel lambda-calculus with letrec, synchronization and side-effects. </title> <type> Technical report (Nov), </type> <institution> MIT Laboratory for Computer Science. </institution> <note> Computation Structures Group Memo 393, also available at http://www.csg.lcs.mit. edu:8001/pubs/csgmemo.html. </note>
Reference: [Bellman 1957] <author> BELLMAN, R. </author> <year> 1957. </year> <title> Dynamic Programming. </title> <publisher> Princeton University Press. </publisher>
Reference: [Bershad et al. 1993] <author> BERSHAD, B. N., ZEKAUSKAS, M. J., AND SAWDON, W. A. </author> <year> 1993. </year> <title> The Midway distributed shared memory system. </title> <booktitle> In Digest of Papers from the Thirty-Eighth IEEE Computer Society International Conference (Spring COMPCON) (San Francisco, </booktitle> <address> California, </address> <month> Feb. </month> <year> 1993), </year> <pages> pp. 528537. </pages>
Reference-contexts: Coherence is usually assumed when memory models are defined in processor-centric terms. On the other hand, X-consistency is the canonical form of the names of memory models 19 (e.g., sequential consistency [Lamport 1979], processor consistency [Goodman 1989], re-lease consistency [Gharachorloo et al. 1990], entry consistency <ref> [Bershad et al. 1993] </ref>, scope consistency [Iftode et al. 1996]). I see no reason to use two separate names. Coherence is a legitimate memory model, and should be called X-consistency, for some X. Since its distinguishing feature is that consistency occurs on a per-location basis, we call it location consistency.
Reference: [Blumofe 1995] <author> BLUMOFE, R. D. </author> <year> 1995. </year> <title> Executing Multithreaded Programs Efficiently. </title> <type> Ph. D. thesis, </type> <institution> Department of Electrical Engineering and Computer Science, Massachusetts Institute of Technology. </institution>
Reference-contexts: Definition 23 says that if the memory model allows an observer function for a prefix, then the function must be extensible to the entire dag. 1 Such is indeed the case with multithreaded languages, such as Cilk <ref> [Blumofe 1995; Joerg 1996] </ref>, where the adversary corresponds to the programmer. 31 A simple (almost trivial) consequence of constructibility is given by the next theorem. Theorem 24 A constructible memory model is complete.
Reference: [Blumofe et al. 1996a] <author> BLUMOFE, R. D., FRIGO, M., JOERG, C. F., LEISERSON, C. E., AND RANDALL, K. H. </author> <year> 1996a. </year> <title> An analysis of dag-consistent distributed shared-memory algorithms. </title> <booktitle> In Proceedings of the Eighth Annual ACM Symposium on Parallel Algorithms and Architectures (SPAA) (Padua, </booktitle> <address> Italy, </address> <month> June </month> <year> 1996), </year> <pages> pp. 297308. </pages>
Reference-contexts: The first, proposed by Gao and Sarkar [1994], is a model that they called location consistency and we shall call GS-location consistency. The other model is dag consistency, which was introduced by the Cilk group of the MIT Laboratory for Computer Science (including myself) <ref> [Blumofe et al. 1996b; Blumofe et al. 1996a] </ref>. In this thesis, we show that neither model obeys the five properties I regard as 5 necessary. GS-location consistency does not confine nondeterminism, and dag consistency is not constructible. <p> In the dag consistency papers, we introduced the BACKER algorithm for maintaining dag consistency [Blumofe et al. 1996b]. (Another algorithm, DAGGER, appears in [Joerg 1996].) We investigated the performance of BACKER both empirically and theoretically <ref> [Blumofe et al. 1996a] </ref>. Indeed, to the best of my knowledge, BACKER is the only coherence algorithm for which there is any kind of theoretical performance guarantee. The fact that dag consistency is not constructible in no way implies that these results are wrong. <p> If one wants all the properties of NN-dag consistency, location consistency is implied in every implementation. Furthermore, as shown by Luchangco [1997], BACKER indeed maintains location consistency, and all the results from <ref> [Blumofe et al. 1996b; Blumofe et al. 1996a] </ref> apply to location consistency directly. This evidence provides a strong rationale for concluding that location consistency is the weakest reasonable memory model. There is one caveat to the previous argument. <p> Indeed, Gao and Sarkar's model appears to be a kind of dag consistency, as we shall see in the Section 2.4.3 below. 2.4.3 Dag consistency In the past, with other people from the MIT Laboratory for Computer science, I proposed dag consistency <ref> [Blumofe et al. 1996b; Blumofe et al. 1996a] </ref> as a very relaxed memory model for the Cilk [Blumofe et al. 1995] system of parallel computing. Indeed, we published two different models, both called dag consistency. Unfortunately, both turned out to be unreasonable. We now discuss these two models. <p> For any three nodes u; v; w 2 V , satisfying u v w, if v writes some location l 2 M and w reads l, then w does not receive a value written by u. The second definition of dag consistency appeared in <ref> [Blumofe et al. 1996a] </ref>. 4 Definition 12 The shared memory M of a multithreaded computation G = (V; E) is dag consistent if there exists a function : M fi V 7! V such that the following conditions hold. 12.1. <p> Unfortunately, there are certain anomalies in Definition 11, and thus in GS-location consistency. We shall explain these anomalies in detail in Chapter 3. For now, we just say that Definition 11 does not confine nondeterminism. Historically, we proposed Definition 12 <ref> [Blumofe et al. 1996a] </ref> to solve these anomalies. Explanation of Definition 12 Unlike Definition 11, Definition 12 in not readily expressible in terms of the last writer function. It introduces an observer function explicitly, however. Properties 12.1 and 12.4 are indeed the defining properties of observer functions. <p> Let's recapitulate what we know about them, starting from bottom up. WW is the original dag-consistent model [Blumofe et al. 1996b; Joerg 1996]. We argued in Section 3.4 that WW does not confine nondeterminism. WN is the dag-consistent model of <ref> [Blumofe et al. 1996a] </ref>. We proved in Section 4.4 that it is not constructible. 49 NW is a strange model. I introduced it because of symmetry reasons, but I do not know what it means. <p> also suggest that location consistency is the model of choice. 1 I have the feeling that every constructible model must be definable in terms of topological sorts and last writers, but this statement is rather mystical at this point. 50 The BACKER coherence algorithm has been proven fast both analytically <ref> [Blumofe et al. 1996a] </ref> and empirically [Blumofe et al. 1996b]. Indeed, BACKER is the only coherence algorithm for which there is any kind of performance guarantee. We now know, thanks to Luchangco [1997], that BACKER maintains location consistency.
Reference: [Blumofe et al. 1996b] <author> BLUMOFE, R. D., FRIGO, M., JOERG, C. F., LEISERSON, C. E., AND RANDALL, K. H. </author> <year> 1996b. </year> <title> Dag-consistent distributed shared memory. </title> <booktitle> In Proceedings of the 10th International Parallel Processing Symposium (Honolulu, Hawaii, </booktitle> <month> April </month> <year> 1996). </year> <month> 55 </month>
Reference-contexts: The first, proposed by Gao and Sarkar [1994], is a model that they called location consistency and we shall call GS-location consistency. The other model is dag consistency, which was introduced by the Cilk group of the MIT Laboratory for Computer Science (including myself) <ref> [Blumofe et al. 1996b; Blumofe et al. 1996a] </ref>. In this thesis, we show that neither model obeys the five properties I regard as 5 necessary. GS-location consistency does not confine nondeterminism, and dag consistency is not constructible. <p> Dag consistency seems to capture a lot of the intuition that Cilk programmers have about the shared memory. In the dag consistency papers, we introduced the BACKER algorithm for maintaining dag consistency <ref> [Blumofe et al. 1996b] </ref>. (Another algorithm, DAGGER, appears in [Joerg 1996].) We investigated the performance of BACKER both empirically and theoretically [Blumofe et al. 1996a]. Indeed, to the best of my knowledge, BACKER is the only coherence algorithm for which there is any kind of theoretical performance guarantee. <p> If one wants all the properties of NN-dag consistency, location consistency is implied in every implementation. Furthermore, as shown by Luchangco [1997], BACKER indeed maintains location consistency, and all the results from <ref> [Blumofe et al. 1996b; Blumofe et al. 1996a] </ref> apply to location consistency directly. This evidence provides a strong rationale for concluding that location consistency is the weakest reasonable memory model. There is one caveat to the previous argument. <p> Indeed, Gao and Sarkar's model appears to be a kind of dag consistency, as we shall see in the Section 2.4.3 below. 2.4.3 Dag consistency In the past, with other people from the MIT Laboratory for Computer science, I proposed dag consistency <ref> [Blumofe et al. 1996b; Blumofe et al. 1996a] </ref> as a very relaxed memory model for the Cilk [Blumofe et al. 1995] system of parallel computing. Indeed, we published two different models, both called dag consistency. Unfortunately, both turned out to be unreasonable. We now discuss these two models. <p> We now discuss these two models. First, we give the two definitions, and explain what they mean. Then, we restate both definitions in terms of computations and observer functions. The first definition of dag consistency appeared in Joerg's thesis [Joerg 1996] and in <ref> [Blumofe et al. 1996b] </ref>. 3 Definition 11 The shared memory M of a multithreaded computation G = (V; E) is dag consistent if the following two conditions hold. 11.1. <p> As it can be seen, the set of most recent writes 4 Again, we adapted the definition to our notations, for consistency. 21 contains precisely those elements that could be seen by a node according to Definition 11. Historically, we did not realize this equivalence when we published <ref> [Blumofe et al. 1996b] </ref>, although we were aware of Gao and Sarkar's work. The equivalence of Definition 11 and GS-location consistency is also pointed out in [Gao and Sarkar 1997]. Unfortunately, there are certain anomalies in Definition 11, and thus in GS-location consistency. <p> We do not know where exactly WN fl and NW fl lie in the diagram. 40 4.1 Dag-consistent memory models In Section 2.4.3 we introduced two memory models: WW and WN. We remarked that these models are equivalent to the two dag consistency models of <ref> [Joerg 1996; Blumofe et al. 1996b] </ref> and [Blumofe et al. 1996b], respectively. We also observed that the definitions of WW and WN are very similar. <p> We remarked that these models are equivalent to the two dag consistency models of [Joerg 1996; Blumofe et al. 1996b] and <ref> [Blumofe et al. 1996b] </ref>, respectively. We also observed that the definitions of WW and WN are very similar. <p> We have a few candidates for the weakest reasonable memory models, but most of them are inadequate for one reason or another. Let's recapitulate what we know about them, starting from bottom up. WW is the original dag-consistent model <ref> [Blumofe et al. 1996b; Joerg 1996] </ref>. We argued in Section 3.4 that WW does not confine nondeterminism. WN is the dag-consistent model of [Blumofe et al. 1996a]. We proved in Section 4.4 that it is not constructible. 49 NW is a strange model. <p> the model of choice. 1 I have the feeling that every constructible model must be definable in terms of topological sorts and last writers, but this statement is rather mystical at this point. 50 The BACKER coherence algorithm has been proven fast both analytically [Blumofe et al. 1996a] and empirically <ref> [Blumofe et al. 1996b] </ref>. Indeed, BACKER is the only coherence algorithm for which there is any kind of performance guarantee. We now know, thanks to Luchangco [1997], that BACKER maintains location consistency. <p> Gao and Sarkar think that it is important to do research in the design and implementation of (more) scalable cache consistency protocols for shared-memory multiprocessor. The previous work on the BACKER algorithm <ref> [Blumofe et al. 1996b; Blumofe et al. 1996b] </ref> already resulted into a scalable cache consistency protocol, which is also provably efficient. Nonetheless, many open research questions still remain in this area. I will now try to formulate the issues I think are most interesting.
Reference: [Blumofe et al. 1995] <author> BLUMOFE, R. D., JOERG, C. F., KUSZMAUL, B. C., LEISERSON, C. E., RANDALL, K. H., AND ZHOU, Y. </author> <year> 1995. </year> <title> Cilk: An efficient multithreaded runtime system. </title> <booktitle> In Proceedings of the Fifth ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming (PPoPP) (Santa Barbara, </booktitle> <address> California, </address> <month> July </month> <year> 1995), </year> <pages> pp. </pages> <year> 207216. </year>
Reference-contexts: GS-location consistency does not confine nondeterminism, and dag consistency is not constructible. Discovering that dag consistency is not constructible was surprising, because dag consistency has been quite a useful model in practice. Students and other users of the Cilk system <ref> [Blumofe et al. 1995] </ref> have written correct dag-consistent programs without even knowing they were using dag consistency. Dag consistency seems to capture a lot of the intuition that Cilk programmers have about the shared memory. <p> In either case, when the recursion is completely unfolded, we end up with a set of nodes representing all the instructions that the machine executed, and a set of dependencies among those nodes. We now show another example of computation. Cilk <ref> [Blumofe et al. 1995] </ref> is a multi-threaded language and runtime system. The execution of a Cilk program generates many threads that obey certain control dependencies. The graph of threads and of their dependencies is called a multithreaded computation. A multithreaded computation is a computation, according to our definition. <p> kind of dag consistency, as we shall see in the Section 2.4.3 below. 2.4.3 Dag consistency In the past, with other people from the MIT Laboratory for Computer science, I proposed dag consistency [Blumofe et al. 1996b; Blumofe et al. 1996a] as a very relaxed memory model for the Cilk <ref> [Blumofe et al. 1995] </ref> system of parallel computing. Indeed, we published two different models, both called dag consistency. Unfortunately, both turned out to be unreasonable. We now discuss these two models. First, we give the two definitions, and explain what they mean.
Reference: [Boethius 512] <author> BOETHIUS, A. M. S. </author> <type> 512. </type> <institution> Contra Eutychen et Nestorium. </institution>
Reference-contexts: An example of the bad things that happen when concepts are misnamed comes from the uncountable number of books that have been written to clarify the confusion between Aristotle's first and second kind of substance. (See, for example, <ref> [Boethius 512] </ref>. The issue is now out of fashion, which is another way to solve it.) Unfortunately, it is not always possible to choose names that reflect both current and future understanding.
Reference: [Dubois et al. 1986] <author> DUBOIS, M., SCHEURICH, C., AND BRIGGS, F. A. </author> <year> 1986. </year> <title> Memory access buffering in multiprocessors. </title> <booktitle> In Proceedings of the 13th Annual International Symposium on Computer Architecture (June 1986), </booktitle> <pages> pp. 434442. </pages>
Reference-contexts: On the contrary, I believe that processor-centric memory models are too difficult to reason about. They are too difficult even to define properly. Consider, for example, the complicated definition of performing a memory request in [Gharachorloo et al. 1990] quoting <ref> [Dubois et al. 1986; Scheurich and Dubois 1987] </ref>. A LOAD by P i is considered performed with respect to P k at a point in time when the issuing of a STORE to the same address by P k cannot affect the value returned by the LOAD. <p> On the other hand, the assumption of location consistency/coherence is often implicit in all memory models [Adve and Ghara-chorloo 1995] (except for the model in Gao and Sarkar [1994] and dag consistency). But, by their definitions alone, PC and LC are incomparable. Some memory models (like weak ordering) <ref> [Dubois et al. 1986; Adve and Hill 1990] </ref> distinguish between ordinary and synchronizing memory accesses. For completeness, we now briefly sketch how to extend our model to account for this case. First, the two kinds of memory operations must be distinguished.
Reference: [Gao and Sarkar 1994] <author> GAO, G. R. AND SARKAR, V. </author> <year> 1994. </year> <title> Location consistency: Stepping beyond the barriers of memory coherence and serializability. </title> <type> Technical Report 78 (Dec.), </type> <institution> McGill University, School of Computer Science, Advanced Compilers, Architectures, and Parallel Systems (ACAPS) Laboratory. </institution> <note> Revised December 31, 1994. Available at ftp://ftp-acaps.cs.mcgill.ca. </note>
Reference-contexts: Second, Gao and Sarkar's model appears to have anomalies that are undesirable for a programmer, and I think it should not be adopted. (See Section 3.4.) I want to point out that the above remarks do not alter the significance of the technical content of <ref> [Gao and Sarkar 1994] </ref>. Indeed, that paper contains many ideas that I strongly support. Gao and Sarkar are also looking for a very relaxed memory model, and define the model in terms of a graph of dependencies (although with a processor-centric flavor).
Reference: [Gao and Sarkar 1997] <author> GAO, G. R. AND SARKAR, V. </author> <year> 1997. </year> <title> On the importance of an end-to-end view of memory consistency in future computer systems. </title> <booktitle> In Proceedings of the 1997 International Symposium on High Performance Computing (Fukuoka, </booktitle> <address> Japan, </address> <month> Nov. </month> <year> 1997). </year> <note> To appear. </note>
Reference-contexts: Computation-centric models can be used to understand abstract properties of memory models, as we will see in Chapter 3. The computation-centric view is also supported by Gao and Sarkar, who, in a recent paper <ref> [Gao and Sarkar 1997] </ref>, use an end-to-end argument to suggest that memory models should be defined in terms of a partial order. <p> Historically, we did not realize this equivalence when we published [Blumofe et al. 1996b], although we were aware of Gao and Sarkar's work. The equivalence of Definition 11 and GS-location consistency is also pointed out in <ref> [Gao and Sarkar 1997] </ref>. Unfortunately, there are certain anomalies in Definition 11, and thus in GS-location consistency. We shall explain these anomalies in detail in Chapter 3. For now, we just say that Definition 11 does not confine nondeterminism.
Reference: [Gharachorloo et al. 1990] <author> GHARACHORLOO, K., LENOSKI, D., LAUDON, J., GIBBONS, P., GUPTA, A., AND HENNESSY, J. </author> <year> 1990. </year> <title> Memory consistency and event ordering in scalable shared-memory multiprocessors. </title> <booktitle> In Proceedings of the 17th Annual International Symposium on Computer Architecture (Seattle, </booktitle> <address> Washington, </address> <month> June </month> <year> 1990), </year> <pages> pp. 1526. </pages>
Reference-contexts: On the contrary, I believe that processor-centric memory models are too difficult to reason about. They are too difficult even to define properly. Consider, for example, the complicated definition of performing a memory request in <ref> [Gharachorloo et al. 1990] </ref> quoting [Dubois et al. 1986; Scheurich and Dubois 1987]. <p> Coherence is usually assumed when memory models are defined in processor-centric terms. On the other hand, X-consistency is the canonical form of the names of memory models 19 (e.g., sequential consistency [Lamport 1979], processor consistency [Goodman 1989], re-lease consistency <ref> [Gharachorloo et al. 1990] </ref>, entry consistency [Bershad et al. 1993], scope consistency [Iftode et al. 1996]). I see no reason to use two separate names. Coherence is a legitimate memory model, and should be called X-consistency, for some X.
Reference: [Goodman 1989] <author> GOODMAN, J. R. </author> <year> 1989. </year> <title> Cache consistency and sequential consistency. </title> <type> Technical Report 61 (March), </type> <institution> IEEE Scalable Coherent Interface (SCI) Working Group. </institution>
Reference-contexts: Coherence is usually assumed when memory models are defined in processor-centric terms. On the other hand, X-consistency is the canonical form of the names of memory models 19 (e.g., sequential consistency [Lamport 1979], processor consistency <ref> [Goodman 1989] </ref>, re-lease consistency [Gharachorloo et al. 1990], entry consistency [Bershad et al. 1993], scope consistency [Iftode et al. 1996]). I see no reason to use two separate names. Coherence is a legitimate memory model, and should be called X-consistency, for some X. <p> For completeness, we now suggest how to give computation-centric definitions of processor consistency and other models from the literature. These models are presented here, but not further discussed in the rest of the thesis. The following definition of processor consistency appeared in <ref> [Goodman 1989] </ref>. A multiprocessor is said to be processor consistent if the result of any execu tion is the same as if the operations of each individual processor appear in the sequential order specified by its program. The first thing to notice is that the definition is very ambiguous.
Reference: [Halstead 1997] <author> HALSTEAD, R. H., JR. </author> <year> 1997. </year> <type> Personal communication. </type>
Reference-contexts: In this case, the instruction z 1 might be executed. The point is that we cannot tell a priori what the computation is. Of course, one can construct many examples like this. A particularly beautiful one was shown to me by Bert Halstead <ref> [Halstead 1997] </ref>.
Reference: [Hennessy and Patterson 1996] <author> HENNESSY, J. L. AND PATTERSON, D. A. </author> <year> 1996. </year> <title> Computer Architecture: a Quantitative Approach (second ed.). </title> <publisher> Morgan Kaufmann, </publisher> <address> San Francisco, CA. </address>
Reference-contexts: In location consistency every memory location is serialized, but different locations may be serialized independently. Why should we care at all about weak memory models, once we have sequential consistency? Unfortunately, strong models have a price. It is generally believed <ref> [Hennessy and Patterson 1996] </ref> that a sequential consistency model imposes major inefficiencies in an implementation. Consequently, many researchers have tried to relax the requirements of sequential consistency in exchange for better performance and ease of implementation.
Reference: [Iftode et al. 1996] <author> IFTODE, L., SINGH, J. P., AND LI, K. </author> <year> 1996. </year> <title> Scope consistency: A bridge between release consistency and entry consistency. </title> <booktitle> In Proceedings of the Eighth Annual ACM Symposium on Parallel Algorithms and Architectures (SPAA) (Padua, </booktitle> <address> Italy, </address> <month> June </month> <year> 1996), </year> <pages> pp. 277287. 56 </pages>
Reference-contexts: On the other hand, X-consistency is the canonical form of the names of memory models 19 (e.g., sequential consistency [Lamport 1979], processor consistency [Goodman 1989], re-lease consistency [Gharachorloo et al. 1990], entry consistency [Bershad et al. 1993], scope consistency <ref> [Iftode et al. 1996] </ref>). I see no reason to use two separate names. Coherence is a legitimate memory model, and should be called X-consistency, for some X. Since its distinguishing feature is that consistency occurs on a per-location basis, we call it location consistency.
Reference: [Joerg 1996] <author> JOERG, C. F. </author> <year> 1996. </year> <title> The Cilk System for Parallel Multithreaded Com--puting. </title> <type> Ph. D. thesis, </type> <institution> Department of Electrical Engineering and Computer Science, Massachusetts Institute of Technology. </institution>
Reference-contexts: Dag consistency seems to capture a lot of the intuition that Cilk programmers have about the shared memory. In the dag consistency papers, we introduced the BACKER algorithm for maintaining dag consistency [Blumofe et al. 1996b]. (Another algorithm, DAGGER, appears in <ref> [Joerg 1996] </ref>.) We investigated the performance of BACKER both empirically and theoretically [Blumofe et al. 1996a]. Indeed, to the best of my knowledge, BACKER is the only coherence algorithm for which there is any kind of theoretical performance guarantee. <p> Unfortunately, both turned out to be unreasonable. We now discuss these two models. First, we give the two definitions, and explain what they mean. Then, we restate both definitions in terms of computations and observer functions. The first definition of dag consistency appeared in Joerg's thesis <ref> [Joerg 1996] </ref> and in [Blumofe et al. 1996b]. 3 Definition 11 The shared memory M of a multithreaded computation G = (V; E) is dag consistent if the following two conditions hold. 11.1. <p> Definition 23 says that if the memory model allows an observer function for a prefix, then the function must be extensible to the entire dag. 1 Such is indeed the case with multithreaded languages, such as Cilk <ref> [Blumofe 1995; Joerg 1996] </ref>, where the adversary corresponds to the programmer. 31 A simple (almost trivial) consequence of constructibility is given by the next theorem. Theorem 24 A constructible memory model is complete. <p> We do not know where exactly WN fl and NW fl lie in the diagram. 40 4.1 Dag-consistent memory models In Section 2.4.3 we introduced two memory models: WW and WN. We remarked that these models are equivalent to the two dag consistency models of <ref> [Joerg 1996; Blumofe et al. 1996b] </ref> and [Blumofe et al. 1996b], respectively. We also observed that the definitions of WW and WN are very similar. <p> We have a few candidates for the weakest reasonable memory models, but most of them are inadequate for one reason or another. Let's recapitulate what we know about them, starting from bottom up. WW is the original dag-consistent model <ref> [Blumofe et al. 1996b; Joerg 1996] </ref>. We argued in Section 3.4 that WW does not confine nondeterminism. WN is the dag-consistent model of [Blumofe et al. 1996a]. We proved in Section 4.4 that it is not constructible. 49 NW is a strange model.
Reference: [Lamport 1979] <author> LAMPORT, L. </author> <year> 1979. </year> <title> How to make a multiprocessor computer that correctly executes multiprocess programs. </title> <journal> IEEE Transactions on Computers C-28, </journal> <volume> 9 (Sept.), </volume> <pages> 690691. </pages>
Reference-contexts: The operational behavior of the machine, however, is precisely what the the definition is supposed to specify. It comes as no surprise, if this is the case, that things quickly become very complicated. On the contrary, Lamport's definition of sequential consistency <ref> [Lamport 1979] </ref> is often cited, with good reasons, for its clarity and precision: [A system is sequentially consistent if] the result of any execution is the same as if the operations of all the processors were executed in some sequential order, and the operations of each individual processor appear in this <p> We then consider location consistency and dag consistency. Finally, for completeness, we also suggest how other models could be defined, although they are not relevant to the later results of this thesis. 2.4.1 Sequential consistency Sequential consistency <ref> [Lamport 1979] </ref> is generally considered to be the strongest memory model. It is not the strongest in an absolute sense, just the strongest reasonable. There exist in principle stronger models, but they are too strong for practical use. 2 We now give a computation-centric definition of sequential consistency. <p> Coherence is usually assumed when memory models are defined in processor-centric terms. On the other hand, X-consistency is the canonical form of the names of memory models 19 (e.g., sequential consistency <ref> [Lamport 1979] </ref>, processor consistency [Goodman 1989], re-lease consistency [Gharachorloo et al. 1990], entry consistency [Bershad et al. 1993], scope consistency [Iftode et al. 1996]). I see no reason to use two separate names. Coherence is a legitimate memory model, and should be called X-consistency, for some X.
Reference: [Leiserson et al. 1997] <author> LEISERSON, C. E., M ULLER, S., AND RANDALL, K. H. </author> <year> 1997. </year> <type> Personal communication. </type>
Reference: [Luchangco 1997] <author> LUCHANGCO, V. </author> <year> 1997. </year> <title> Precedence-based memory models. </title> <booktitle> In Eleventh International Workshop on Distributed Algorithms (WDAG97) (1997). </booktitle>
Reference: [Merali 1996] <author> MERALI, S. </author> <year> 1996. </year> <title> Designing and implementing memory consistency models for shared-memory multiprocessors. </title> <type> Master's thesis, </type> <institution> McGill University, Montreal, Canada. </institution>
Reference-contexts: On the idea that weaker is simpler I have the feeling that it is not really possible to implement anything less than location consistency. For example, BACKER keeps multiple incoherent copies of objects, and yet it supports location consistency. I have studied the protocol for GS-location consistency by Merali <ref> [Merali 1996] </ref>. It is an efficient protocol that, among other things, is supposed to prove that GS-location consistency is a good idea, because it can be implemented efficiently. I suspect that the protocol actually supports location consistency, however.
Reference: [Scheurich and Dubois 1987] <author> SCHEURICH, C. AND DUBOIS, M. </author> <year> 1987. </year> <title> Correct memory operation of cache-based multiprocessors. </title> <booktitle> In Proceedings of the 14th Annual International Symposium on Computer Architecture (Pittsburgh, </booktitle> <address> PA, </address> <month> June </month> <year> 1987), </year> <pages> pp. 234243. </pages>
Reference-contexts: On the contrary, I believe that processor-centric memory models are too difficult to reason about. They are too difficult even to define properly. Consider, for example, the complicated definition of performing a memory request in [Gharachorloo et al. 1990] quoting <ref> [Dubois et al. 1986; Scheurich and Dubois 1987] </ref>. A LOAD by P i is considered performed with respect to P k at a point in time when the issuing of a STORE to the same address by P k cannot affect the value returned by the LOAD.
References-found: 24

