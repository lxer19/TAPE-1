URL: http://www.cs.unc.edu/~dm/UNC/PHYSICS/Papers/baraff94.ps.gz
Refering-URL: http://www.cs.unc.edu/~hirota/290/papers.html
Root-URL: http://www.cs.unc.edu
Title: Nonpenetrating Rigid Bodies to be considerably faster, simpler, and more reliable than previous approaches to
Author: David Baraff 
Address: Pittsburgh, PA 15213  
Affiliation: Robotics Institute Carnegie Mellon University  
Note: SIGGRAPH 94, Orlando, July 24-29 COMPUTER GRAPHICS Proceedings, Annual Conference Series, 1994 Fast Contact Force Computation for  both systems with and without friction, the algorithm has proven  
Abstract: A new algorithm for computing contact forces between solid objects with friction is presented. The algorithm allows a mix of contact points with static and dynamic friction. In contrast to previous approaches, the problem of computing contact forces is not transformed into an optimization problem. Because of this, the need for sophisticated optimization software packages is eliminated. For 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Baraff. </author> <title> Analytical methods for dynamic simulation of non-penetrating rigid bodies. </title> <booktitle> In Computer Graphics (Proc. SIGGRAPH), </booktitle> <volume> volume 23, </volume> <pages> pages 223-232. </pages> <publisher> ACM, </publisher> <month> July </month> <year> 1989. </year>
Reference: [2] <author> D. Baraff. </author> <title> Curved surfaces and coherence for non-penetrating rigid body simulation. </title> <booktitle> In Computer Graphics (Proc. SIG-GRAPH), </booktitle> <volume> volume 24, </volume> <pages> pages 19-28. </pages> <publisher> ACM, </publisher> <month> August </month> <year> 1990. </year>
Reference: [3] <author> D. Baraff. </author> <title> Issues in computing contact forces for non-penetrating rigid bodies. </title> <journal> Algorithmica, </journal> <volume> 10 </volume> <pages> 292-352, </pages> <year> 1993. </year>
Reference-contexts: These methods are simpler, reliable, and faster than previous methods used for either systems with friction, or systems without friction. Our other goal is to extend and improve previous algorithms for computing contact forces with friction <ref> [3] </ref>. We present a simple, fast algorithm for computing contact forces with friction. The restriction of our algorithm to the frictionless case is equivalent to an algorithm described in Cottle and Dantzig [4] (but attributed to Dantzig) for This is an electronic reprint. <p> Background and Motivation Lotstedt [10] represents the first attempt to compute friction forces in an analytical setting, by using quadratic programming to compute friction forces based on a simplification of the Coulomb friction model. Baraff <ref> [3] </ref> also proposed analytical methods for dealing with friction forces and presents algorithms that deal with dynamic friction (also known as sliding friction) and static friction (also known as dry friction). <p> Another consequence of A losing symmetry and definiteness is that all the theorems in this paper which require A to be symmetric and PSD fail to hold. Remarkably, this turns out to be a fortunate development. Previously, Baraff <ref> [3] </ref> presented an algorithm for computing friction forces and impulses for systems with dynamic friction but no static friction; the intent was to treat the problem of nonexistence of a solution .
Reference: [4] <author> R.W. Cottle and G.B. Dantzig. </author> <title> Complementary pivot theory of mathematical programming. </title> <journal> Linear Algebra and its Applications, </journal> <volume> 1 </volume> <pages> 103-125, </pages> <year> 1968. </year>
Reference-contexts: Our other goal is to extend and improve previous algorithms for computing contact forces with friction [3]. We present a simple, fast algorithm for computing contact forces with friction. The restriction of our algorithm to the frictionless case is equivalent to an algorithm described in Cottle and Dantzig <ref> [4] </ref> (but attributed to Dantzig) for This is an electronic reprint. Permission is granted to copy part or all of this paper for noncommercial use provided that the title and this copyright notice appear. This electronic reprint is c fl1994 by CMU.
Reference: [5] <author> R.W. Cottle, J.S. Pang, and R.E. Stone. </author> <title> The Linear Complementarity Problem. </title> <publisher> Academic-Press, Inc., </publisher> <year> 1992. </year>
Reference-contexts: Baraff's method for computing either regular or impulsive forces for systems with dynamic friction involved using Lemke's algorithm <ref> [5] </ref> for solving LCP's. It is noted that Lemke's algorithm can terminate by encountering an "unbounded ray." The algorithm we have just presented for static friction requires absolutely no modifications to handle dynamic friction in this manner. <p> When degeneracy occurs, it is possible that some number of size zero steps are taken. Cottle <ref> [5, section 4.2, pages 248-251] </ref> proves that the frictionless algorithm cannot loop due to degeneracy. Proving that a nondegenerate problem never takes steps of size zero is relatively straightforward. We need to show that whenever i 2 C moves to NC, a i immediately increases.
Reference: [6] <author> P. Gill, S. Hammarling, W. Murray, M. Saunders, and M. Wright. </author> <title> User's guide for LSSOL: A Fortran package for constrained linear least-squares and convex quadratic programming. </title> <type> Technical Report Sol 86-1, </type> <institution> Systems Optimization Laboratory, Department of Operations Research, Stanford University, </institution> <year> 1986. </year>
Reference-contexts: terms of speed and, especially, 23 SIGGRAPH 94, Orlando, July 24-29 COMPUTER GRAPHICS Proceedings, Annual Conference Series, 1994 simplicity. 1 Previous simulation systems for frictionless contact that we know of have used either heuristic solution methods based on linear programming [11], quadratic programming algorithms [7], or constrained linear least-squares algorithms <ref> [6] </ref>. In all cases the numerical software required is sufficiently complicated that either public-domain or commercially available software packages are required. The problems with this are: * Serious implementations of linear programming codes are much less common than serious implementations for solving linear systems.
Reference: [7] <author> P. Gill, W. Murray, M. Saunders, and M. Wright. </author> <title> User's guide for QPSOL: A Fortran package for quadratic programming. </title> <type> Technical Report Sol 84-6, </type> <institution> Systems Optimization Laboratory, Department of Operations Research, Stanford University, </institution> <year> 1984. </year>
Reference-contexts: large-scale optimization software packages, both in terms of speed and, especially, 23 SIGGRAPH 94, Orlando, July 24-29 COMPUTER GRAPHICS Proceedings, Annual Conference Series, 1994 simplicity. 1 Previous simulation systems for frictionless contact that we know of have used either heuristic solution methods based on linear programming [11], quadratic programming algorithms <ref> [7] </ref>, or constrained linear least-squares algorithms [6]. In all cases the numerical software required is sufficiently complicated that either public-domain or commercially available software packages are required. The problems with this are: * Serious implementations of linear programming codes are much less common than serious implementations for solving linear systems.
Reference: [8] <author> P. Gill, W. Murray, M. Saunders, and M. Wright. </author> <title> User's guide for NPSOL: A Fortran package for nonlinear programming. </title> <type> Technical Report Sol 86-2, </type> <institution> Systems Optimization Laboratory, Department of Operations Research, Stanford University, </institution> <year> 1986. </year>
Reference: [9] <author> P.E. Gill, W. Murray, M.A. Saunders, and H.W. Wright. </author> <title> Maintaining LU factors of a general sparse matrix. </title> <journal> Linear Algebra and its Applications, </journal> 88/89:239-270, 1987. 
Reference: [10] <author> P. Lotstedt. </author> <title> Numerical simulation of time-dependent contact friction problems in rigid body mechanics. </title> <journal> SIAM Journal of Scientific Statistical Computing, </journal> <volume> 5(2) </volume> <pages> 370-393, </pages> <year> 1984. </year>
Reference-contexts: We strongly believe that using our algorithms, interactive simulations with contact and friction are practical. We support this claim by demonstrating the first known system for interactive simulations involving contact and a correct model of Coulomb friction. 2. Background and Motivation Lotstedt <ref> [10] </ref> represents the first attempt to compute friction forces in an analytical setting, by using quadratic programming to compute friction forces based on a simplification of the Coulomb friction model.
Reference: [11] <author> R.E. Marsten. </author> <title> The design of the XMP linear programming library. </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> 7(4) </volume> <pages> 481-497, </pages> <year> 1981. </year>
Reference-contexts: with the use of large-scale optimization software packages, both in terms of speed and, especially, 23 SIGGRAPH 94, Orlando, July 24-29 COMPUTER GRAPHICS Proceedings, Annual Conference Series, 1994 simplicity. 1 Previous simulation systems for frictionless contact that we know of have used either heuristic solution methods based on linear programming <ref> [11] </ref>, quadratic programming algorithms [7], or constrained linear least-squares algorithms [6]. In all cases the numerical software required is sufficiently complicated that either public-domain or commercially available software packages are required.
Reference: [12] <author> B. Murtagh and M. Saunders. </author> <title> MINOS 5.1 User's guide. </title> <type> Technical Report Sol 83-20R, </type> <institution> Systems Optimization Laboratory, Department of Operations Research, Stanford University, </institution> <year> 1987. </year>
Reference-contexts: Serious implementations for quadratic pro gramming are even rarer. * A fair amount of mathematical and coding sophistication is required to interface the numerical software package with the simulation software. In some cases, the effort required for an efficient interface was prohibitively high <ref> [12] </ref>. * The packages obtained contained a large number of adjustable parameters such as numerical tolerances, iteration limits, etc.
Reference: [13] <author> M. Saunders. </author> <type> Personal communication. </type> <month> September </month> <year> 1993. </year> <booktitle> 32 SIGGRAPH 94, Orlando, July 24-29 COMPUTER GRAPHICS Proceedings, Annual Conference Series, 1994 (c)(f)(b)(e)(a)(d) Figure 1: Time-lapse simulation sequence of a blockfeeder. 33 SIGGRAPH 94, Orlando, July 24-29 COMPUTER GRAPHICS Proceedings, Annual Conference Series, 1994 (c)(f)(b)(e)(a)(d) Figure 2: Time-lapse simulation sequence of a double-action jack. </booktitle> <pages> 34 </pages>
Reference-contexts: Unfortunately, the coding effort for LUSOL is large. One of the authors of the LUSOL package was kind enough to provide us with a modified version of the software <ref> [13] </ref> that treats A as a dense matrix and computes a factorization LA = U (where L is no longer triangular). In the dense case, an updated factorization is obtained in O (n 2 ) time when A is altered. The modified version contains a reasonably small amount of code.
References-found: 13

