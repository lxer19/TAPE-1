URL: http://www2.cs.cornell.edu/zeno/Papers/mash/mash-nossdav97.ps.gz
Refering-URL: http://www2.cs.cornell.edu/zeno/Papers/
Root-URL: http://www.cs.brown.edu/
Title: Toward a Common Infrastructure for Multimedia-Networking Middleware  
Author: Steven McCanne, Eric Brewer, Randy Katz, Lawrence Rowe, Elan Amir, Yatin Chawathe, Alan Coopersmith, Ketan Mayer-Patel, Suchitra Raman, Angela Schuett, David Simpson, Andrew Swan, Teck-Lee Tung, David Wu Brian Smith 
Affiliation: University of California, Berkeley  Cornell University  
Abstract: Real-time multimedia streams like audio and video are now integral data types in modern programming environments. Although a great deal of research has investigated effective and efficient programming support for manipulating such streams and although the design of digital media middleware is fairly well understood, no widely available or commonly accepted programming model exists within the research community. We believe this lack of common practice impedes our collective progress because it prevents disparate research groups from easily leveraging each other's work. In this paper, we propose a solution to this problem that combines the best features of a number of existing multimedia toolkits Berkeley's Continuous Media Toolkit, MIT's VuSystem, and the LBL/UCB MBone tools into a fine-grained, extensible, and high-performance toolkit. We describe the convergence of these three toolkits into a common programming infrastructure and argue that the availability and acceptance of our mid-dleware could potentially facilitate and accelerate breakthroughs in multimedia networking. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> AMIR, E., MCCANNE, S., AND VETTERLI, M. </author> <title> A layered DCT coder for Internet video. </title> <booktitle> In Proceedings of the IEEE International Conference on Image Processing (Lausanne, </booktitle> <address> Switzerland, </address> <month> Sept. </month> <year> 1996), </year> <pages> pp. 1316. </pages>
Reference-contexts: This library would be assembled incrementally as individual research efforts each contribute to and extend the framework. In particular, one could imagine the following wide array of system building blocks at one's fingertips: * video compression modules like the layered video work from Berkeley <ref> [18, 31, 30, 1] </ref>; * audio compression modules like the robust-audio codec from UCL [6]; * reliable-multicast protocol modules, e.g., based on SRM [4] that can be customized for the application at hand e.g., shared whiteboards [15], webcast tools [11], or floor-control applications [14]; * primitives for archive and playback of
Reference: [2] <author> AMIR, E., MCCANNE, S., AND ZHANG, H. </author> <title> An application-level video gateway. </title> <booktitle> In Proceedings of ACM Multimedia '95 (San Francisco, </booktitle> <address> CA, </address> <month> Nov. </month> <year> 1995), </year> <booktitle> ACM, </booktitle> <pages> pp. 255265. </pages>
Reference-contexts: Once we implement code to orchestrate streams in this fashion, we can further encapsulate this function in the VideoAgent class. These video streams are not useful unless we do something with their decoded output. In a video gateway <ref> [2] </ref>, we might re-encode the output in another format at a different rate for bandwidth adaptation, whereas in a conferencing application [17], we must display the decoded streams to the user. Another example is a bank of objects connected to timers selecting channels from a broadband cable. <p> Because RLM operates on coarse time scales, we implemented it entirely in OTcl. And further, because our network simulator ns [16] and mash share the same OTcl/C++ framework, the RLM code can move seamlessly from its simulation environment into production use. We have also developed video gateways or proxies <ref> [2] </ref>, which carry out rate-adaptation as an alternative approach for dealing with receiver bandwidth heterogeneity. Another area that we are tackling is the design of scalable multicast control protocols. We drive this design process with real applications and application-level protocols for collaborative floor-control and adaptive, intra-session distributed bandwidth allocation.
Reference: [3] <author> CRAIGHILL, E., FONG, M., SKINNER, K., LANG, R., AND GRUENEFELDT, K. SCOOT: </author> <title> An object-oriented toolkit for multimedia collaboration. </title> <booktitle> In Proceedings of ACM Multimedia '94 (Oct. 1994), ACM, </booktitle> <pages> pp. 4149. </pages>
Reference-contexts: This work has led to a solid understanding of many multimedia-system abstractions like cross-media synchronization [10, 27], modular and extensible manipulation of streams <ref> [20, 24, 12, 3] </ref>, network bandwidth and delay adaptation [27], and scalable multimedia-networking protocols [19, 4] While the multimedia-networking research community still faces significant challenges, we believe that research on multimedia toolkits has matured to the degree that the particular arrangement of multimedia-system components into a middleware architecture is perhaps less
Reference: [4] <author> FLOYD, S., JACOBSON, V., MCCANNE, S., LIU, C.-G., AND ZHANG, L. </author> <title> A reliable multicast framework for lightweight sessions and application level framing. </title> <booktitle> In Proceedings of SIGCOMM '95 (Boston, </booktitle> <address> MA, </address> <month> Sept. </month> <year> 1995), </year> <booktitle> ACM, </booktitle> <pages> pp. 342356. </pages>
Reference-contexts: This work has led to a solid understanding of many multimedia-system abstractions like cross-media synchronization [10, 27], modular and extensible manipulation of streams [20, 24, 12, 3], network bandwidth and delay adaptation [27], and scalable multimedia-networking protocols <ref> [19, 4] </ref> While the multimedia-networking research community still faces significant challenges, we believe that research on multimedia toolkits has matured to the degree that the particular arrangement of multimedia-system components into a middleware architecture is perhaps less of a research problem and more of an engineering art. <p> In particular, one could imagine the following wide array of system building blocks at one's fingertips: * video compression modules like the layered video work from Berkeley [18, 31, 30, 1]; * audio compression modules like the robust-audio codec from UCL [6]; * reliable-multicast protocol modules, e.g., based on SRM <ref> [4] </ref> that can be customized for the application at hand e.g., shared whiteboards [15], webcast tools [11], or floor-control applications [14]; * primitives for archive and playback of collaborative sessions, e.g., modules from the MBone VCR [7]; * multicast address-allocation modules for dynamically creating lightweight sessions [8]; * building blocks for <p> Our toolkit contains a large and growing number of fine-grained building blocks including: RTP packet recorders, RTP packet players, audio/video device interface modules, audio/video software-based codecs, simple video effects processors, support for the LBL Conference Bus [17], a set of objects that orchestrate the Scalable Reliable Multicast protocol framework <ref> [4] </ref>, many and varied user interface elements, network and encryption objects, RTP session objects a packet buffer model, a class interface to the ghostscript postscript interpreter, video and image rendering/dithering objects, Netscape plugin modules, and so forth.
Reference: [5] <author> HANDLEY, M., AND JACOBSON, V. SDP: </author> <title> Session description protocol, </title> <month> Nov. </month> <year> 1995. </year> <title> Internet Draft (work in progress). </title>
Reference-contexts: at hand e.g., shared whiteboards [15], webcast tools [11], or floor-control applications [14]; * primitives for archive and playback of collaborative sessions, e.g., modules from the MBone VCR [7]; * multicast address-allocation modules for dynamically creating lightweight sessions [8]; * building blocks for session advertisement and explicit session invitation protocols <ref> [5] </ref>; * building blocks for special-effects processing of video, audio signal processing algorithms like echo cancelation; and so forth. Unfortunately, all of the above systems are currently implemented in custom and often ad hoc environments with little opportunity to make them interoperate.
Reference: [6] <author> HARDMAN, V., SASSE, M. A., HANDLEY, M., AND WAT-SON, A. </author> <title> Reliable audio for use over the Internet. </title> <booktitle> In Proceedings of INET '95 (Honolulu, Hawaii, </booktitle> <month> June </month> <year> 1995). </year>
Reference-contexts: In particular, one could imagine the following wide array of system building blocks at one's fingertips: * video compression modules like the layered video work from Berkeley [18, 31, 30, 1]; * audio compression modules like the robust-audio codec from UCL <ref> [6] </ref>; * reliable-multicast protocol modules, e.g., based on SRM [4] that can be customized for the application at hand e.g., shared whiteboards [15], webcast tools [11], or floor-control applications [14]; * primitives for archive and playback of collaborative sessions, e.g., modules from the MBone VCR [7]; * multicast address-allocation modules for <p> Unfortunately, all of the above systems are currently implemented in custom and often ad hoc environments with little opportunity to make them interoperate. For example, porting UCL's robust audio codec <ref> [6] </ref> to the LBL vat application [9] would require substantial code modifications. Our programming framework builds on our six or so years of collective experiences developing the Continuous Media Toolkit (CMT) and the LBNL/UCB MBone tools software architecture (as it appears in vic [17] and vat [9]).
Reference: [7] <author> HOLFELDER, W. </author> <booktitle> MBone VCR video conference recording on the MBone. In Proceedings of ACM Multimedia '95 (San Francisco, </booktitle> <address> CA, </address> <month> Nov. </month> <year> 1995), </year> <note> ACM, pp. 237238,545 546. </note>
Reference-contexts: the robust-audio codec from UCL [6]; * reliable-multicast protocol modules, e.g., based on SRM [4] that can be customized for the application at hand e.g., shared whiteboards [15], webcast tools [11], or floor-control applications [14]; * primitives for archive and playback of collaborative sessions, e.g., modules from the MBone VCR <ref> [7] </ref>; * multicast address-allocation modules for dynamically creating lightweight sessions [8]; * building blocks for session advertisement and explicit session invitation protocols [5]; * building blocks for special-effects processing of video, audio signal processing algorithms like echo cancelation; and so forth.
Reference: [8] <author> JACOBSON, V. </author> <title> SIGCOMM '94 Tutorial: Multimedia conferencing on the Internet, </title> <month> Aug. </month> <year> 1994. </year>
Reference-contexts: e.g., based on SRM [4] that can be customized for the application at hand e.g., shared whiteboards [15], webcast tools [11], or floor-control applications [14]; * primitives for archive and playback of collaborative sessions, e.g., modules from the MBone VCR [7]; * multicast address-allocation modules for dynamically creating lightweight sessions <ref> [8] </ref>; * building blocks for session advertisement and explicit session invitation protocols [5]; * building blocks for special-effects processing of video, audio signal processing algorithms like echo cancelation; and so forth.
Reference: [9] <author> JACOBSON, V., AND MCCANNE, S. </author> <title> Visual Audio Tool. </title> <institution> Lawrence Berkeley Laboratory. </institution> <note> Software on-line 3 . 3 ftp://ftp.ee.lbl.gov/conferencing/vat </note>
Reference-contexts: Unfortunately, all of the above systems are currently implemented in custom and often ad hoc environments with little opportunity to make them interoperate. For example, porting UCL's robust audio codec [6] to the LBL vat application <ref> [9] </ref> would require substantial code modifications. Our programming framework builds on our six or so years of collective experiences developing the Continuous Media Toolkit (CMT) and the LBNL/UCB MBone tools software architecture (as it appears in vic [17] and vat [9]). <p> UCL's robust audio codec [6] to the LBL vat application <ref> [9] </ref> would require substantial code modifications. Our programming framework builds on our six or so years of collective experiences developing the Continuous Media Toolkit (CMT) and the LBNL/UCB MBone tools software architecture (as it appears in vic [17] and vat [9]). In addition, we have closely examined and borrowed novel architectural concepts and code from the VuSystem developed at MIT.
Reference: [10] <author> KOUVELAS, I., HARDMAN, V., AND WATSON, A. </author> <title> Lip synchronisation for use over the Internet: Analysis and implementation. </title> <booktitle> In Proceedings of GLOBECOM '96 (London, </booktitle> <address> UK, </address> <month> Nov. </month> <year> 1996). </year>
Reference-contexts: To complement these technological developments, the research community has experimented with and devel oped programming environments, toolkits, and protocols for manipulating digital media within computer systems and across communication networks. This work has led to a solid understanding of many multimedia-system abstractions like cross-media synchronization <ref> [10, 27] </ref>, modular and extensible manipulation of streams [20, 24, 12, 3], network bandwidth and delay adaptation [27], and scalable multimedia-networking protocols [19, 4] While the multimedia-networking research community still faces significant challenges, we believe that research on multimedia toolkits has matured to the degree that the particular arrangement of multimedia-system
Reference: [11] <author> LIAO, T. WebCanal: </author> <title> a multicast Web application. </title> <booktitle> In Proceedings of the 6th International WWW Conference (Santa Clara, </booktitle> <address> CA, </address> <month> Apr. </month> <year> 1997). </year>
Reference-contexts: * video compression modules like the layered video work from Berkeley [18, 31, 30, 1]; * audio compression modules like the robust-audio codec from UCL [6]; * reliable-multicast protocol modules, e.g., based on SRM [4] that can be customized for the application at hand e.g., shared whiteboards [15], webcast tools <ref> [11] </ref>, or floor-control applications [14]; * primitives for archive and playback of collaborative sessions, e.g., modules from the MBone VCR [7]; * multicast address-allocation modules for dynamically creating lightweight sessions [8]; * building blocks for session advertisement and explicit session invitation protocols [5]; * building blocks for special-effects processing of video, <p> Another area that we are tackling is the design of scalable multicast control protocols. We drive this design process with real applications and application-level protocols for collaborative floor-control and adaptive, intra-session distributed bandwidth allocation. We are designing information dissemination models and building webcast-like applications <ref> [11] </ref>.
Reference: [12] <author> LINDBLAD, C. J., AND TENNENHOUSE, D. L. </author> <title> The VuSystem: A programming system for compute-intensive multimedia. </title> <journal> IEEE Journal on Selected Areas in Communications 14, </journal> <month> 7 (Sept. </month> <year> 1996), </year> <month> 12981313. </month>
Reference-contexts: This work has led to a solid understanding of many multimedia-system abstractions like cross-media synchronization [10, 27], modular and extensible manipulation of streams <ref> [20, 24, 12, 3] </ref>, network bandwidth and delay adaptation [27], and scalable multimedia-networking protocols [19, 4] While the multimedia-networking research community still faces significant challenges, we believe that research on multimedia toolkits has matured to the degree that the particular arrangement of multimedia-system components into a middleware architecture is perhaps less
Reference: [13] <author> LINTON, M., CALDER, P. R., AND VLISSIDES, J. M. InterViews: </author> <title> A C++ graphical interface toolkit. </title> <type> Tech. Rep. </type> <institution> CSL-TR-88-358, Stanford University, </institution> <address> Palo Alto, CA, </address> <month> July </month> <year> 1988. </year>
Reference-contexts: Back then, Tcl/Tk did not exist and we instead used the Interviews C++ structured graphics library <ref> [13] </ref> to build the user-interface. In time, we developed the companion video tool vic, and mirrored vat's software architecture in vic, but we implemented the user-interface with Tcl/Tk rather than Interviews.
Reference: [14] <author> MALPANI, R. </author> <title> Floor control for large-scale Mbone seminars. </title> <institution> Computer science department, University of Califor-nia, Berkeley, </institution> <month> May </month> <year> 1997. </year>
Reference-contexts: like the layered video work from Berkeley [18, 31, 30, 1]; * audio compression modules like the robust-audio codec from UCL [6]; * reliable-multicast protocol modules, e.g., based on SRM [4] that can be customized for the application at hand e.g., shared whiteboards [15], webcast tools [11], or floor-control applications <ref> [14] </ref>; * primitives for archive and playback of collaborative sessions, e.g., modules from the MBone VCR [7]; * multicast address-allocation modules for dynamically creating lightweight sessions [8]; * building blocks for session advertisement and explicit session invitation protocols [5]; * building blocks for special-effects processing of video, audio signal processing algorithms
Reference: [15] <author> MCCANNE, S. </author> <title> A distributed whiteboard for network conferencing, </title> <month> May </month> <year> 1992. </year> <title> U.C. Berkeley CS268 Computer Networks term project and paper. </title>
Reference-contexts: at one's fingertips: * video compression modules like the layered video work from Berkeley [18, 31, 30, 1]; * audio compression modules like the robust-audio codec from UCL [6]; * reliable-multicast protocol modules, e.g., based on SRM [4] that can be customized for the application at hand e.g., shared whiteboards <ref> [15] </ref>, webcast tools [11], or floor-control applications [14]; * primitives for archive and playback of collaborative sessions, e.g., modules from the MBone VCR [7]; * multicast address-allocation modules for dynamically creating lightweight sessions [8]; * building blocks for session advertisement and explicit session invitation protocols [5]; * building blocks for special-effects
Reference: [16] <author> MCCANNE, S., AND FLOYD, S. </author> <title> The LBNL Network Simulator. </title> <institution> Lawrence Berkeley Laboratory. </institution> <note> Software on-line 4 </note> . 
Reference-contexts: Because RLM operates on coarse time scales, we implemented it entirely in OTcl. And further, because our network simulator ns <ref> [16] </ref> and mash share the same OTcl/C++ framework, the RLM code can move seamlessly from its simulation environment into production use. We have also developed video gateways or proxies [2], which carry out rate-adaptation as an alternative approach for dealing with receiver bandwidth heterogeneity.
Reference: [17] <author> MCCANNE, S., AND JACOBSON, V. </author> <title> vic: a flexible framework for packet video. </title> <booktitle> In Proceedings of ACM Multimedia '95 (San Francisco, </booktitle> <address> CA, </address> <month> Nov. </month> <year> 1995), </year> <booktitle> ACM, </booktitle> <pages> pp. 511522. </pages>
Reference-contexts: Our programming framework builds on our six or so years of collective experiences developing the Continuous Media Toolkit (CMT) and the LBNL/UCB MBone tools software architecture (as it appears in vic <ref> [17] </ref> and vat [9]). In addition, we have closely examined and borrowed novel architectural concepts and code from the VuSystem developed at MIT. <p> Hence, the Tcl scripts are often hard to manage and difficult to re-use. Another oversight was our initial perspective that the best level of design granularity was that of composable tools coordinated across a multipoint interprocess communication abstraction called a Conference Bus <ref> [17] </ref>. While a good building block, the Conference Bus is only part of the story. <p> Our toolkit contains a large and growing number of fine-grained building blocks including: RTP packet recorders, RTP packet players, audio/video device interface modules, audio/video software-based codecs, simple video effects processors, support for the LBL Conference Bus <ref> [17] </ref>, a set of objects that orchestrate the Scalable Reliable Multicast protocol framework [4], many and varied user interface elements, network and encryption objects, RTP session objects a packet buffer model, a class interface to the ghostscript postscript interpreter, video and image rendering/dithering objects, Netscape plugin modules, and so forth. <p> These video streams are not useful unless we do something with their decoded output. In a video gateway [2], we might re-encode the output in another format at a different rate for bandwidth adaptation, whereas in a conferencing application <ref> [17] </ref>, we must display the decoded streams to the user. Another example is a bank of objects connected to timers selecting channels from a broadband cable.
Reference: [18] <author> MCCANNE, S., VETTERLI, M., AND JACOBSON, V. </author> <title> Low-complexity video coding for receiver-driven layered multi-cast. </title> <note> Accepted for publication in IEEE Journal on Selected Areas in Communications (1997). </note>
Reference-contexts: This library would be assembled incrementally as individual research efforts each contribute to and extend the framework. In particular, one could imagine the following wide array of system building blocks at one's fingertips: * video compression modules like the layered video work from Berkeley <ref> [18, 31, 30, 1] </ref>; * audio compression modules like the robust-audio codec from UCL [6]; * reliable-multicast protocol modules, e.g., based on SRM [4] that can be customized for the application at hand e.g., shared whiteboards [15], webcast tools [11], or floor-control applications [14]; * primitives for archive and playback of
Reference: [19] <author> MCCANNE, S. R. </author> <title> Scalable Compression and Transmission of Internet Multicast Video. </title> <type> PhD thesis, </type> <institution> University of California, Berkeley, </institution> <month> Dec. </month> <year> 1996. </year>
Reference-contexts: This work has led to a solid understanding of many multimedia-system abstractions like cross-media synchronization [10, 27], modular and extensible manipulation of streams [20, 24, 12, 3], network bandwidth and delay adaptation [27], and scalable multimedia-networking protocols <ref> [19, 4] </ref> While the multimedia-networking research community still faces significant challenges, we believe that research on multimedia toolkits has matured to the degree that the particular arrangement of multimedia-system components into a middleware architecture is perhaps less of a research problem and more of an engineering art. <p> We continue to refine audio and video compression algorithms and protocols and are implementing layered codecs in combination with the Receiver-driven Layered Multicast (RLM) protocol <ref> [19] </ref> to deliver real-time video streams to heterogenous receivers. Because RLM operates on coarse time scales, we implemented it entirely in OTcl. And further, because our network simulator ns [16] and mash share the same OTcl/C++ framework, the RLM code can move seamlessly from its simulation environment into production use.
Reference: [20] <author> MINES, R. F., FRIESEN, J. A., AND YANG, C. L. DAVE: </author> <title> A plug and play model for distributed multimedia application development. </title> <booktitle> In Proceedings of ACM Multimedia '94 (Oct. 1994), ACM, </booktitle> <pages> pp. 5966. </pages>
Reference-contexts: This work has led to a solid understanding of many multimedia-system abstractions like cross-media synchronization [10, 27], modular and extensible manipulation of streams <ref> [20, 24, 12, 3] </ref>, network bandwidth and delay adaptation [27], and scalable multimedia-networking protocols [19, 4] While the multimedia-networking research community still faces significant challenges, we believe that research on multimedia toolkits has matured to the degree that the particular arrangement of multimedia-system components into a middleware architecture is perhaps less
Reference: [21] <author> OUSTERHOUT, J. K. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Finally, we outline how the mash kernel is arranged into a set of extensible objects, all linked into the Tool Command Language Tcl <ref> [21] </ref>, and how these objects are used to build arbitrarily rich applications and environments. 2 Background CMT, VuSystem, and the MBone tools, though each developed independently, all converged on the same basic architecture, which is split into low-overhead control functionality implemented in a scripting language like Tcl and performance-critical data handling
Reference: [22] <author> PERHAM, M., SMITH, B. C., JANOSI, T., AND LAM, I. Redesigning Tcl-DP. </author> <booktitle> In Proceedings of the Tcl/Tk Workshop (Boston, </booktitle> <address> MA, </address> <month> July </month> <year> 1997). </year>
Reference-contexts: CMT began as an architecture for playing prerecorded multimedia data over local area networks [26]. In addition to the development of the core architecture, several important technologies have been spun-off from the CMT project. These include Tcl-DP <ref> [28, 22] </ref>, an extension to Tcl/Tk that facilitates distributed programming, and the Berkeley MPEG player [25]. CMT adopted a VuSystem Architecture based on Tcl/Tk early in its development, allowing objects to be mixed and matched into arbitrary applications.
Reference: [23] <author> RAMAN, S., AND TUNG, T.-L. </author> <title> Mediaboard using the Scalable, Reliable Multicast toolkit, </title> <month> Dec. </month> <year> 1996. </year> <title> U.C. Berkeley term project and paper. </title>
Reference-contexts: We close our discussion of mash applications with a brief outline of some of the tools we are developing as part of our research in scalable and heterogeneous multimedia networking. First off, we are building a next-generation whiteboard called mediaboard <ref> [23] </ref> to further explore reliable multicast protocol issues and to develop an active objects architecture for large-scale multipoint networked animations.
Reference: [24] <author> ROWE, L., ET AL. </author> <title> Continuous Media Toolkit (CMT). </title> <institution> University of California, Berkeley. </institution> <note> Software on-line 5 </note> . 
Reference-contexts: This work has led to a solid understanding of many multimedia-system abstractions like cross-media synchronization [10, 27], modular and extensible manipulation of streams <ref> [20, 24, 12, 3] </ref>, network bandwidth and delay adaptation [27], and scalable multimedia-networking protocols [19, 4] While the multimedia-networking research community still faces significant challenges, we believe that research on multimedia toolkits has matured to the degree that the particular arrangement of multimedia-system components into a middleware architecture is perhaps less <p> At the same time, a clear-cut advantage of the MBone tools is that they are robust, widely deployed, readily available, and conform to widely-accepted Internet standards. Consequently, our ultimate architecture should allow us to integrate this existing code base. 2.2 Continuous Media Toolkit The Berkeley Continuous Media Toolkit (CMT) <ref> [24, 29] </ref> project started on the same time frame as the Mbone tools. CMT began as an architecture for playing prerecorded multimedia data over local area networks [26]. In addition to the development of the core architecture, several important technologies have been spun-off from the CMT project.
Reference: [25] <author> ROWE, L. A., PATEL, K. D., SMITH, B. C., AND LIU, K. </author> <title> MPEG video in software: Representation, transmission, and 4 http://www-nrg.ee.lbl.gov/ns/ 5 http://www.bmrc.berkeley.edu/cmt/ playback. In High Speed Network and Multimedia Computing, </title> <booktitle> Symp. </booktitle> <institution> on Elec. Imaging Sci. & Tech. </institution> <address> (San Jose, CA, </address> <month> Feb. </month> <year> 1994). </year>
Reference-contexts: In addition to the development of the core architecture, several important technologies have been spun-off from the CMT project. These include Tcl-DP [28, 22], an extension to Tcl/Tk that facilitates distributed programming, and the Berkeley MPEG player <ref> [25] </ref>. CMT adopted a VuSystem Architecture based on Tcl/Tk early in its development, allowing objects to be mixed and matched into arbitrary applications. CMT objects are implemented in C, and as described above, composed with Tcl.
Reference: [26] <author> ROWE, L. A., AND SMITH, B. C. </author> <title> A continuous media player. </title> <booktitle> In Proceedings of the Third International Workshop on Network and OS Support for Digital Audio and Video (San Diego, </booktitle> <address> CA, </address> <month> Nov. </month> <year> 1992), </year> <note> ACM. </note>
Reference-contexts: CMT began as an architecture for playing prerecorded multimedia data over local area networks <ref> [26] </ref>. In addition to the development of the core architecture, several important technologies have been spun-off from the CMT project. These include Tcl-DP [28, 22], an extension to Tcl/Tk that facilitates distributed programming, and the Berkeley MPEG player [25].
Reference: [27] <author> SCHULZRINNE, H., CASNER, S., FREDERICK, R., AND JACOBSON, V. RTP: </author> <title> A Transport Protocol for Real-Time Applications. </title> <institution> Internet Engineering Task Force, Audio-Video Transport Working Group, </institution> <month> Jan. </month> <year> 1996. </year> <month> RFC-1889. </month>
Reference-contexts: To complement these technological developments, the research community has experimented with and devel oped programming environments, toolkits, and protocols for manipulating digital media within computer systems and across communication networks. This work has led to a solid understanding of many multimedia-system abstractions like cross-media synchronization <ref> [10, 27] </ref>, modular and extensible manipulation of streams [20, 24, 12, 3], network bandwidth and delay adaptation [27], and scalable multimedia-networking protocols [19, 4] While the multimedia-networking research community still faces significant challenges, we believe that research on multimedia toolkits has matured to the degree that the particular arrangement of multimedia-system <p> This work has led to a solid understanding of many multimedia-system abstractions like cross-media synchronization [10, 27], modular and extensible manipulation of streams [20, 24, 12, 3], network bandwidth and delay adaptation <ref> [27] </ref>, and scalable multimedia-networking protocols [19, 4] While the multimedia-networking research community still faces significant challenges, we believe that research on multimedia toolkits has matured to the degree that the particular arrangement of multimedia-system components into a middleware architecture is perhaps less of a research problem and more of an engineering
Reference: [28] <author> SMITH, B., ROWE, L. A., AND YEN, S. </author> <title> Tcl distributed programming. </title> <booktitle> In Proceedings of the Tcl/Tk Workshop (Berkeley, </booktitle> <address> CA, </address> <month> June </month> <year> 1993). </year>
Reference-contexts: CMT began as an architecture for playing prerecorded multimedia data over local area networks [26]. In addition to the development of the core architecture, several important technologies have been spun-off from the CMT project. These include Tcl-DP <ref> [28, 22] </ref>, an extension to Tcl/Tk that facilitates distributed programming, and the Berkeley MPEG player [25]. CMT adopted a VuSystem Architecture based on Tcl/Tk early in its development, allowing objects to be mixed and matched into arbitrary applications.
Reference: [29] <author> SMITH, B. C. </author> <title> Implementation Techniques for Continuous Media Systems and Applications. </title> <type> PhD thesis, </type> <institution> University of California, Berkeley, </institution> <month> Dec. </month> <year> 1994. </year>
Reference-contexts: At the same time, a clear-cut advantage of the MBone tools is that they are robust, widely deployed, readily available, and conform to widely-accepted Internet standards. Consequently, our ultimate architecture should allow us to integrate this existing code base. 2.2 Continuous Media Toolkit The Berkeley Continuous Media Toolkit (CMT) <ref> [24, 29] </ref> project started on the same time frame as the Mbone tools. CMT began as an architecture for playing prerecorded multimedia data over local area networks [26]. In addition to the development of the core architecture, several important technologies have been spun-off from the CMT project.
Reference: [30] <author> TAN, W., CHANG, E., AND ZAKHOR, A. </author> <title> Real time software implementation of scalable video codec. </title> <booktitle> In Proceedings of the IEEE International Conference on Image Processing (Lausanne, </booktitle> <address> Switzerland, </address> <month> Sept. </month> <year> 1996). </year>
Reference-contexts: This library would be assembled incrementally as individual research efforts each contribute to and extend the framework. In particular, one could imagine the following wide array of system building blocks at one's fingertips: * video compression modules like the layered video work from Berkeley <ref> [18, 31, 30, 1] </ref>; * audio compression modules like the robust-audio codec from UCL [6]; * reliable-multicast protocol modules, e.g., based on SRM [4] that can be customized for the application at hand e.g., shared whiteboards [15], webcast tools [11], or floor-control applications [14]; * primitives for archive and playback of
Reference: [31] <author> TAUBMAN, D., AND ZAKHOR, A. </author> <title> Multi-rate 3-D subband coding of video. </title> <booktitle> IEEE Transactions on Image Processing 3, </booktitle> <address> 5 (Sept. </address> <year> 1994), </year> <month> 572588. </month>
Reference-contexts: This library would be assembled incrementally as individual research efforts each contribute to and extend the framework. In particular, one could imagine the following wide array of system building blocks at one's fingertips: * video compression modules like the layered video work from Berkeley <ref> [18, 31, 30, 1] </ref>; * audio compression modules like the robust-audio codec from UCL [6]; * reliable-multicast protocol modules, e.g., based on SRM [4] that can be customized for the application at hand e.g., shared whiteboards [15], webcast tools [11], or floor-control applications [14]; * primitives for archive and playback of
Reference: [32] <author> WETHERALL, D., AND LINDBLAD, C. J. </author> <title> Extending Tcl for dynamic object-oriented programming. </title> <booktitle> In Proceedings of the Tcl/Tk Workshop (Ontario, </booktitle> <address> Canada, </address> <month> July </month> <year> 1995). </year>
Reference-contexts: For example, the decoder objects invoke dithering routines and manipulate X windows rather than simply decoding video to uncompressed form and passing the result to a generic downstream object. 2.3 VuSystem The VuSystem is a similar multimedia toolkit built on top of an object-oriented Tcl extension called OTcl <ref> [32] </ref>. C++ classes implement multimedia objects that produce, consume, or filter real-time media streams and a Tcl shadow object mirrors each C++ object. Methods invoked on the Tcl shadow object are dispatched to the C++ object. <p> This prototype allows us to immediately exploit MBone tools' code base and robust implementation. (2) We retrofitted the VuSystem's elegant object model by adopting Wetherall's OTcl package <ref> [32] </ref> and built a number of high level abstractions called macro-objects out of the fine-grained objects from the prototype toolkit. (3) Lastly, we plan to merge the mash and CMT toolkits into a single infrastructure by developing an OTcl scaffolding layer.
References-found: 32

