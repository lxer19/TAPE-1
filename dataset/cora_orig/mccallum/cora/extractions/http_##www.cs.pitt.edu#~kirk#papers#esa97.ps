URL: http://www.cs.pitt.edu/~kirk/papers/esa97.ps
Refering-URL: http://www.cs.pitt.edu/~kirk/papers/index.html
Root-URL: 
Title: Fault-Tolerant Real-Time Scheduling  log log m on the competitive ratio for interval scheduling with  
Author: Bala Kalyanasundaram Kirk Pruhs 
Keyword: lower bound of log log log m  
Note: logm  permanent faults.  
Date: October 31, 1997  
Abstract: We use competitive analysis to study how to best use redundancy to achieve fault- tolerance in online real-time scheduling. We show that the optimal way to use spatial redundancy depends on a complex interaction of the benefits, execution times, release times, and latest start times of the jobs. We give a randomized online algorithm whose log log m ) for transient faults. Here n is the number of jobs, m is the number of processors, is the ratio of maximum value density of a job to the minimum value density of a job, and the ratio of the longest possible execution time to the shortest possible execution time. We show that this bound is close to optimal by giving an ( log loglog m ( logm log log m ) 2 ) lower bound on the competitive ratio of any randomized algorithm. In the case of permanent faults, there is a randomized online algorithm that has a competitive ratio of O(log log logm loglog m ). We also show a competitive ratio is O(log log log 2 n log m
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Baruah, J. Harita, and N. Sharma, </author> <title> "On-line scheduling to maximize task comple-tions", </title> <booktitle> IEEE Real-time Systems Symposium, </booktitle> <year> 1994. </year>
Reference-contexts: E-Mail: kalyan@cs.pitt.edu y Department of Computer Science, University of Pittsburgh, Pittsburgh, PA 15260. E-Mail: kirk@cs.pitt.edu 1 1.1 Problem Statement We adopt best-effort firm real-time scheduling, a standard model of real-time computation <ref> [1, 2, 5, 7, 8, 11] </ref>, as our model of real-time computation. The setting is a collection P 1 ; : : : P m of unit speed processors. The scheduler sees over time a collection J 1 ; : : : J n of jobs. <p> In [6] a randomized algorithm is given with competitive ratio O (min (log ; log )), and this is shown to be optimal. In <ref> [1] </ref>, a nonconstant deterministic lower bound for the case that fl = 1 is given. For nonpreemptive scheduling with = 1, there is an O (log )-competitive randomized algorithm and this is optimal [3, 9]. Faults completely change the nature of these scheduling problems. <p> One Round Problem: We assume that the length of each job is in the range <ref> [1; 2] </ref>, and that the benefit of each job is 1. All jobs are released before time 1. <p> In preparation for our analysis of P1R we need to define the notions of early jobs and late processors. Let P be a collection of processors with latest wake-up times in the range [a; b] <ref> [0; 1] </ref>, and let J be a set of jobs that are agreeable over [a; b]. Assume that each processor in P runs P1R (J ) after each of its wake-up times in [a; b]. <p> Furthermore, by the definition of g, P (i; j) = ( 1 xc ). Theorem 10 Let P be a collection of processors with latest wake-up times in the range [a; b] <ref> [0; 1] </ref>, and let J be a set of jobs that are agreeable over [a; b]. <p> The set fJ 1 ; J 2 g of jobs is not agreeable during the interval <ref> [0; 1] </ref>. 2.2.3 Time Trees To handle nonagreeable jobs we need to introduce the notion of time trees. <p> Lemma 23 In the above Cut-Off Game at least `=4 choices for b are weak. Proof: We claim that for all i, and for all x i, if exactly i distinct values of b in the range <ref> [1; x] </ref> are good, then P x1 ` . The proof is by induction on i. The base case, 19 i = 0, follows trivially. Now assume that the statement holds for all k &lt; i. To reach a contradiction, assume that the statement is not true for i. <p> The base case, 19 i = 0, follows trivially. Now assume that the statement holds for all k &lt; i. To reach a contradiction, assume that the statement is not true for i. Let x be the minimum value for which there are i good b 2 <ref> [1; x] </ref> , but P x1 ` . Let these i values of b be b 1 ; : : :; b i and assume b 1 &lt; b 2 &lt; : : : &lt; b i . Note that b i = x by the minimality assumption on x. <p> Note that b i = x by the minimality assumption on x. Therefore p x1 j=1 p j &lt; 2i ` . By induction, 8k 2 <ref> [1; i 1] </ref> j=0 2k (1) Consider the problem of maximizing W x = W b i = j=0 subject to the constraints in equation 1 and p x1 &lt; 2i ` . <p> Therefore, W x k=1 ` x1 X 2 c j1 ` c 1 3c x The last inequality follows because c &gt; 3. Therefore x is bad, which is a contradiction. Now consider x = `. We can now conclude that at least ` 2 of the b 2 <ref> [1; `] </ref> are bad. A simple counting argument shows that at least ` 4 of these bad b's are also weak.
Reference: [2] <author> S. Baruah, G. Koren, D. Mao, B. Mishra, A. Raghunathan, L. Rosier, D. Shasha, and F. Wang, </author> <title> "On the competitiveness of on-line real-time task scheduling", </title> <journal> Journal of Real-Time Systems, </journal> <volume> 4, </volume> <pages> 124-144, </pages> <year> 1992. </year>
Reference-contexts: E-Mail: kalyan@cs.pitt.edu y Department of Computer Science, University of Pittsburgh, Pittsburgh, PA 15260. E-Mail: kirk@cs.pitt.edu 1 1.1 Problem Statement We adopt best-effort firm real-time scheduling, a standard model of real-time computation <ref> [1, 2, 5, 7, 8, 11] </ref>, as our model of real-time computation. The setting is a collection P 1 ; : : : P m of unit speed processors. The scheduler sees over time a collection J 1 ; : : : J n of jobs. <p> Let fl be the ratio of the largest benefit of a job to the minimum benefit of a job. There are 4-competitive algorithms for the cases = 1 or = 1, and this is optimal for deterministic algorithms <ref> [2, 11] </ref>. The optimal competitive ratio is fi () [2, 7]. In [2] a 2-competitive algorithm for interval scheduling is given for the case = 1 and m = 2. This immediately yields a 2-competitive randomized algorithm for interval scheduling for = 1 and m = 1. <p> Let fl be the ratio of the largest benefit of a job to the minimum benefit of a job. There are 4-competitive algorithms for the cases = 1 or = 1, and this is optimal for deterministic algorithms [2, 11]. The optimal competitive ratio is fi () <ref> [2, 7] </ref>. In [2] a 2-competitive algorithm for interval scheduling is given for the case = 1 and m = 2. This immediately yields a 2-competitive randomized algorithm for interval scheduling for = 1 and m = 1. <p> There are 4-competitive algorithms for the cases = 1 or = 1, and this is optimal for deterministic algorithms [2, 11]. The optimal competitive ratio is fi () [2, 7]. In <ref> [2] </ref> a 2-competitive algorithm for interval scheduling is given for the case = 1 and m = 2. This immediately yields a 2-competitive randomized algorithm for interval scheduling for = 1 and m = 1. A 3=2 lower bound on the competitive ratio for this case is given in [6]. <p> One Round Problem: We assume that the length of each job is in the range <ref> [1; 2] </ref>, and that the benefit of each job is 1. All jobs are released before time 1.
Reference: [3] <author> S. Goldman, J. Parwatikar, S. Suri, </author> <title> "On-line scheduling with hard deadlines", </title> <booktitle> Workshop on Algorithms and Data Structures, </booktitle> <pages> 258-271, </pages> <year> 1997. </year>
Reference-contexts: In [1], a nonconstant deterministic lower bound for the case that fl = 1 is given. For nonpreemptive scheduling with = 1, there is an O (log )-competitive randomized algorithm and this is optimal <ref> [3, 9] </ref>. Faults completely change the nature of these scheduling problems. There seems to be little research that uses competitive analysis to study fault-tolerance.
Reference: [4] <author> B. Kalyanasundaram, and K. Pruhs, </author> <title> "Fault-tolerant scheduling", </title> <booktitle> ACM Symposium on Theory of Computing, </booktitle> <pages> 115-124, </pages> <year> 1994. </year>
Reference-contexts: This is in contrast to fault-tolerant scheduling of nonreal-time jobs, where it is known that the best way for an online scheduler to use redundancy is to devote an equal number of processors to each equal valued job <ref> [4] </ref>. These results also show that for real-time scheduling it is the case that transient faults are significantly more damaging than permanent faults to the performance of the online scheduler. For scheduling jobs without deadlines, it was known that transient and permanent faults are essentially equally damaging [4]. 1.3 Previous Results <p> equal valued job <ref> [4] </ref>. These results also show that for real-time scheduling it is the case that transient faults are significantly more damaging than permanent faults to the performance of the online scheduler. For scheduling jobs without deadlines, it was known that transient and permanent faults are essentially equally damaging [4]. 1.3 Previous Results We first survey results for online best-effort firm real-time scheduling without faults. All of the following results are for a single processor with preemption unless stated otherwise. Let fl be the ratio of the largest benefit of a job to the minimum benefit of a job. <p> For nonpreemptive scheduling with = 1, there is an O (log )-competitive randomized algorithm and this is optimal [3, 9]. Faults completely change the nature of these scheduling problems. There seems to be little research that uses competitive analysis to study fault-tolerance. In <ref> [4] </ref> fault-tolerant scheduling of jobs without deadlines is studied, and optimal deterministic and randomized algorithms are given for online problems involving minimizing the make-span and minimizing the average flow time.
Reference: [5] <author> B. Kalyanasundaram and K. </author> <title> Pruhs "Speed is as powerful as clairvoyance", </title> <booktitle> IEEE Foundations of Computer Science, </booktitle> <pages> 214-223, </pages> <year> 1995. </year>
Reference-contexts: E-Mail: kalyan@cs.pitt.edu y Department of Computer Science, University of Pittsburgh, Pittsburgh, PA 15260. E-Mail: kirk@cs.pitt.edu 1 1.1 Problem Statement We adopt best-effort firm real-time scheduling, a standard model of real-time computation <ref> [1, 2, 5, 7, 8, 11] </ref>, as our model of real-time computation. The setting is a collection P 1 ; : : : P m of unit speed processors. The scheduler sees over time a collection J 1 ; : : : J n of jobs.
Reference: [6] <author> B. Kalyanasundaram and K. </author> <title> Pruhs "Randomized algorithms for real-time scheduling with fault-tolerance", </title> <type> Technical report, </type> <institution> Computer Science Deptartment, University of Pittsburgh, </institution> <year> 1994. </year>
Reference-contexts: This immediately yields a 2-competitive randomized algorithm for interval scheduling for = 1 and m = 1. A 3=2 lower bound on the competitive ratio for this case is given in <ref> [6] </ref>. In [8] a deterministic algorithm for multiple processors is given with competitive ratio O (log ) for large m, and this is shown to be optimal. In [6] a randomized algorithm is given with competitive ratio O (min (log ; log )), and this is shown to be optimal. <p> A 3=2 lower bound on the competitive ratio for this case is given in <ref> [6] </ref>. In [8] a deterministic algorithm for multiple processors is given with competitive ratio O (log ) for large m, and this is shown to be optimal. In [6] a randomized algorithm is given with competitive ratio O (min (log ; log )), and this is shown to be optimal. In [1], a nonconstant deterministic lower bound for the case that fl = 1 is given.
Reference: [7] <author> G. Koren, and D. Shasha, </author> <title> "D over :An optimal on-line scheduling algorithm for over-loaded real-time systems", </title> <booktitle> IEEE Real-time Systems Symposium, </booktitle> <pages> 290-299, </pages> <year> 1992. </year>
Reference-contexts: E-Mail: kalyan@cs.pitt.edu y Department of Computer Science, University of Pittsburgh, Pittsburgh, PA 15260. E-Mail: kirk@cs.pitt.edu 1 1.1 Problem Statement We adopt best-effort firm real-time scheduling, a standard model of real-time computation <ref> [1, 2, 5, 7, 8, 11] </ref>, as our model of real-time computation. The setting is a collection P 1 ; : : : P m of unit speed processors. The scheduler sees over time a collection J 1 ; : : : J n of jobs. <p> Let fl be the ratio of the largest benefit of a job to the minimum benefit of a job. There are 4-competitive algorithms for the cases = 1 or = 1, and this is optimal for deterministic algorithms [2, 11]. The optimal competitive ratio is fi () <ref> [2, 7] </ref>. In [2] a 2-competitive algorithm for interval scheduling is given for the case = 1 and m = 2. This immediately yields a 2-competitive randomized algorithm for interval scheduling for = 1 and m = 1.
Reference: [8] <author> G. Koren and D. Shasha, "MOCA: </author> <title> A multiprocessor on-line competitive algorithm for real-time systems scheduling", </title> <journal> Theoretical Computer Science, </journal> <volume> 128, </volume> <pages> 75-97, </pages> <year> 1994. </year>
Reference-contexts: E-Mail: kalyan@cs.pitt.edu y Department of Computer Science, University of Pittsburgh, Pittsburgh, PA 15260. E-Mail: kirk@cs.pitt.edu 1 1.1 Problem Statement We adopt best-effort firm real-time scheduling, a standard model of real-time computation <ref> [1, 2, 5, 7, 8, 11] </ref>, as our model of real-time computation. The setting is a collection P 1 ; : : : P m of unit speed processors. The scheduler sees over time a collection J 1 ; : : : J n of jobs. <p> This immediately yields a 2-competitive randomized algorithm for interval scheduling for = 1 and m = 1. A 3=2 lower bound on the competitive ratio for this case is given in [6]. In <ref> [8] </ref> a deterministic algorithm for multiple processors is given with competitive ratio O (log ) for large m, and this is shown to be optimal. In [6] a randomized algorithm is given with competitive ratio O (min (log ; log )), and this is shown to be optimal.
Reference: [9] <author> R. Lipton, and A. Tomkins, </author> <title> "Online interval scheduling", </title> <booktitle> ACM/SIAM Symposium on Discrete Algorithms, </booktitle> <pages> 302-311, </pages> <year> 1994. </year>
Reference-contexts: In [1], a nonconstant deterministic lower bound for the case that fl = 1 is given. For nonpreemptive scheduling with = 1, there is an O (log )-competitive randomized algorithm and this is optimal <ref> [3, 9] </ref>. Faults completely change the nature of these scheduling problems. There seems to be little research that uses competitive analysis to study fault-tolerance.
Reference: [10] <author> J. </author> <title> Vytopil, Formal techniques in real-time and fault-tolerant systems, </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1993. </year>
Reference: [11] <author> G. Woeginger, </author> <title> "On-line scheduling of jobs with fixed start and end time", </title> <journal> Theoretical Computer Science, </journal> <volume> 130, </volume> <pages> 5-16, </pages> <address> 1994.. </address> <month> 22 </month>
Reference-contexts: E-Mail: kalyan@cs.pitt.edu y Department of Computer Science, University of Pittsburgh, Pittsburgh, PA 15260. E-Mail: kirk@cs.pitt.edu 1 1.1 Problem Statement We adopt best-effort firm real-time scheduling, a standard model of real-time computation <ref> [1, 2, 5, 7, 8, 11] </ref>, as our model of real-time computation. The setting is a collection P 1 ; : : : P m of unit speed processors. The scheduler sees over time a collection J 1 ; : : : J n of jobs. <p> Let fl be the ratio of the largest benefit of a job to the minimum benefit of a job. There are 4-competitive algorithms for the cases = 1 or = 1, and this is optimal for deterministic algorithms <ref> [2, 11] </ref>. The optimal competitive ratio is fi () [2, 7]. In [2] a 2-competitive algorithm for interval scheduling is given for the case = 1 and m = 2. This immediately yields a 2-competitive randomized algorithm for interval scheduling for = 1 and m = 1.
References-found: 11

