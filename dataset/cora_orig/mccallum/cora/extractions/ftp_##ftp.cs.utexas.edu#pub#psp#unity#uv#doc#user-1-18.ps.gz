URL: ftp://ftp.cs.utexas.edu/pub/psp/unity/uv/doc/user-1-18.ps.gz
Refering-URL: http://www.cs.utexas.edu/users/markus/uv/uv.html
Root-URL: 
Email: markus@cs.utexas.edu  
Title: The UV System User Interface Manual Revision 1.18  
Author: Markus Kaltenbach 
Note: Contents  
Date: February 16, 1995 revised: October 30, 1995  
Address: Austin  
Affiliation: The University of Texas at  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [BBR90] <author> K. S. Brace, R. E. Bryant, and R. L. Rudell. </author> <title> Efficient implementation of a BDD package. </title> <booktitle> In Proceedings of the 27th ACM/IEEE Design Automation Conference, </booktitle> <year> 1990. </year>
Reference-contexts: The BDD hashtable (also called the unique table, <ref> [BBR90] </ref>) consist of a certain number of slots and uses chaining as collision resolution method. Whenever a BDD node has to be built, the BDD hash table is searched in order to find the specified node in case it already exists. <p> Chaining the average number of collision list elements examined during a find operation. The UV system employs two different caches to increase its performance: the first is used for caching results of a basic construction operation (if-then-else, <ref> [BBR90] </ref>) and is therefore called ITE-cache, the second is used for caching results of a frequently needed quantification operation (and-exists-normalize, [Kal95]) and is hence named AEN-cache.
Reference: [Bry86] <author> R. E. Bryant. </author> <title> Graph-based algorithms for Boolean function manipulation. </title> <journal> IEEE Transactions on Computing, </journal> <volume> (6), </volume> <year> 1986. </year>
Reference-contexts: Some information about the different invariants associated with a program can be obtained by displaying the program information dialog of that program (cf. section 4.5). 3.5 Data Representation The UV system employs a symbolic representation of programs, properties, and formulae based on binary decision diagrams (BDDs) <ref> [Bry86] </ref>. It is well known, that this form of representation works very well for many practical applications, but also, that one has to be aware of certain factors greatly influencing its performance.
Reference: [CM88] <author> M. Chandy and J. Misra. </author> <title> Parallel Program Design, A Foundation. </title> <publisher> Addison Wesley, </publisher> <year> 1988. </year>
Reference: [Hel92] <author> D. Heller. </author> <title> Motif Programming Manual, volume 6 of The Definitive Guides to the X Window System. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <year> 1992. </year> <month> 21 </month>
Reference: [Kal94] <author> M. Kaltenbach. </author> <title> Model checking for UNITY. </title> <type> Technical Report TR94--31, </type> <institution> The University of Texas at Austin, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: This manual describes the user interface of the UV system and provides some tutorial information on installing and running the system. The input language and general principles of the UV system are described in the user's guide <ref> [Kal94] </ref>, a presentation of the model checking algorithms and the way UNITY logic is used to make interactive model checking more efficient can be found in [Kal95]. 2 Getting Started The UV system combines a symbolic model checking algorithms with a graphical user interface to aid the program designer in effectively <p> The language of allowable inputs is generated by the nonterminal input, the following grammar rules, and some additional semantic restrictions that are described in <ref> [Kal94] </ref>. input ::= unit fl unit ::= program ; j property ; j in name : property ; property ::= constant expression j invariant expression j stable expression j transient expression j expression co expression j expression ensures expression j expression --&gt; expression j expression unless expression program ::= program name
Reference: [Kal95] <author> M. Kaltenbach. </author> <title> An interactive formal system for concurrent program design. </title> <type> PhD dissertation proposal, </type> <month> April </month> <year> 1995. </year>
Reference-contexts: The input language and general principles of the UV system are described in the user's guide [Kal94], a presentation of the model checking algorithms and the way UNITY logic is used to make interactive model checking more efficient can be found in <ref> [Kal95] </ref>. 2 Getting Started The UV system combines a symbolic model checking algorithms with a graphical user interface to aid the program designer in effectively managing the verification of UNITY programs. Due to its reliance on the graphical user interface the system requires a computer with appropriate graphical capabilities. <p> the property table for specific operations which include invoking the model checker on a property or displaying detailed information about a property in form of a special property information dialog (cf. section 4.6). 3.4 Invariants Finding suitably strong invariants is critical to efficient interactive model checking of UNITY programs (cf. <ref> [Kal95] </ref>). <p> The UV system employs two different caches to increase its performance: the first is used for caching results of a basic construction operation (if-then-else, [BBR90]) and is therefore called ITE-cache, the second is used for caching results of a frequently needed quantification operation (and-exists-normalize, <ref> [Kal95] </ref>) and is hence named AEN-cache.
Reference: [Mis95] <author> J. Misra. </author> <title> A logic for concurrent programming. </title> <journal> Journal of Computer and Software Engineering (to appear), </journal> <volume> 3(2), </volume> <year> 1995. </year> <month> 22 </month>
References-found: 7

