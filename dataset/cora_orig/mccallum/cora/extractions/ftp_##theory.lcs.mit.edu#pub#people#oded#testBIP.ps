URL: ftp://theory.lcs.mit.edu/pub/people/oded/testBIP.ps
Refering-URL: http://theory.lcs.mit.edu/~oded/test.html
Root-URL: 
Email: E-mail: oded@wisdom.weizmann.ac.il.  E-mail: danar@theory.lcs.mit.edu.  
Title: A Sublinear Bipartiteness Tester for Bounded Degree Graphs  
Author: Oded Goldreich Dana Ron 
Keyword: p Keywords: Approximation Algorithms, Graph Algorithms, Property Testing, Random Walks on Graphs, Expansion of Graphs.  
Note: On sabbatical leave at LCS,  Supported by a Bunting fellowship.  
Address: Rehovot, ISRAEL.  545 Technology Sq., Cambridge, MA 02139.  
Affiliation: Department of Computer Science, Weizmann Institute of Science,  MIT. Laboratory for Computer Science, MIT,  
Date: February 5, 1998  
Abstract: We present a sublinear-time algorithm for testing whether a bounded degree graph is bipartite or far from being bipartite. Graphs are represented by incidence lists of bounded length d, and the testing algorithm can perform queries of the form: who is the ith neighbor of vertex v. The tester should determine with high probability whether the graph is bipartite or *-far from bipartite for any given distance parameter *. Distance between graphs is defined to be the fraction of entries on which the graphs differ in their incidence-lists representation. Our testing algorithm has query complexity and running time poly((log N )=*) where N is the number of graph vertices. In previous work [GR96] we showed that ( N ) queries are necessary (for constant *), and hence the performance of our algorithm is tight (in its dependence on N ), up to polylogarithmic factors. In our analysis we use techniques that were previously applied to prove fast convergence of random walks on expander graphs. Here we use the counter-positive statement that slow convergence implies small cuts in the graph, and further show that these cuts have certain additional properties. This implication is applied in showing that for any graph, the graph vertices can be divided into disjoint subsets such that: (1) the total number of edges between the different subsets is small; and (2) each subset itself exhibits a certain mixing property that is useful in our analysis. p
Abstract-found: 1
Intro-found: 1
Reference: [ALM + 92] <author> S. Arora, C. Lund, R. Motwani, M. Sudan, and M. Szegedy. </author> <title> Proof verification and intractability of approximation problems. </title> <booktitle> In Proceedings of the Thirty-Third Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 14-23, </pages> <year> 1992. </year>
Reference-contexts: Testing algebraic properties (e.g., linearity or being a polynomial of low-degree) plays an important role in the settings of Program Testing (e.g., [BLR93, RS96, Rub94]) and Probabilistically-Checkable Proof systems (e.g., <ref> [BFL91, BFLS91, FGL + 91, AS92b, ALM + 92] </ref>). Recently, the applicability of property testing has been extended to the domain of combinatorial optimization and the context of approximation algorithms (rather than inapproximability results via PCP).
Reference: [AS92a] <author> N. Alon and J. H. Spencer. </author> <title> The Probabilistic Method. </title> <publisher> John Wiley & Sons, Inc., </publisher> <year> 1992. </year>
Reference-contexts: Since there are K 2 = (N ) such variables, the expected value of their sum is greater than 1. These random variables are not pairwise independent, nonetheless we can obtain a constant bound on the probability that the sum is 0 using Chebyshev's inequality (cf., <ref> [AS92a, Sec. 4.3] </ref>). The General Case. Unfortunately, we may not assume in general that for every (or even some) starting vertex, all (or even almost all) vertices are reached with probability fi (1=N ). <p> Thus, we would like to bound the probability that P i&lt;j i;j = 0. The difficulty is that the i;j 's are not pairwise independent. Yet, since the sum of the covariances of the dependent i;j 's is quite small, Chebyshev's Inequality is still very useful (cf., <ref> [AS92a, Sec. 4.3] </ref>). Details follow. For every i 6= j, Exp [ i;j ] = 2f0;1g v2S s;v (t) q By Chebyshev's inequality, Pr 4 i&lt;j 3 Var i&lt;j i;j h P i 2 &lt; h P i 2 2fl We now bound Var [ P i&lt;j i;j ].
Reference: [AS92b] <author> S. Arora and S. Safra. </author> <title> Probabilistic checkable proofs: A new characterization of NP. </title> <booktitle> In Proceedings of the Thirty-Third Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 1-13, </pages> <year> 1992. </year>
Reference-contexts: Testing algebraic properties (e.g., linearity or being a polynomial of low-degree) plays an important role in the settings of Program Testing (e.g., [BLR93, RS96, Rub94]) and Probabilistically-Checkable Proof systems (e.g., <ref> [BFL91, BFLS91, FGL + 91, AS92b, ALM + 92] </ref>). Recently, the applicability of property testing has been extended to the domain of combinatorial optimization and the context of approximation algorithms (rather than inapproximability results via PCP).
Reference: [BFL91] <author> L. Babai, L. Fortnow, and C. Lund. </author> <title> Non-deterministic exponential time has two-prover interactive protocols. </title> <journal> Computational Complexity, </journal> <volume> 1(1) </volume> <pages> 3-40, </pages> <year> 1991. </year>
Reference-contexts: Testing algebraic properties (e.g., linearity or being a polynomial of low-degree) plays an important role in the settings of Program Testing (e.g., [BLR93, RS96, Rub94]) and Probabilistically-Checkable Proof systems (e.g., <ref> [BFL91, BFLS91, FGL + 91, AS92b, ALM + 92] </ref>). Recently, the applicability of property testing has been extended to the domain of combinatorial optimization and the context of approximation algorithms (rather than inapproximability results via PCP).
Reference: [BFLS91] <author> L. Babai, L. Fortnow, L. Levin, and M. Szegedy. </author> <title> Checking computations in polylogarithmic time. </title> <booktitle> In Proceedings of the Twenty-Third Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 21-31, </pages> <year> 1991. </year>
Reference-contexts: Testing algebraic properties (e.g., linearity or being a polynomial of low-degree) plays an important role in the settings of Program Testing (e.g., [BLR93, RS96, Rub94]) and Probabilistically-Checkable Proof systems (e.g., <ref> [BFL91, BFLS91, FGL + 91, AS92b, ALM + 92] </ref>). Recently, the applicability of property testing has been extended to the domain of combinatorial optimization and the context of approximation algorithms (rather than inapproximability results via PCP).
Reference: [BLR93] <author> M. Blum, M. Luby, and R. Rubinfeld. </author> <title> Self-testing/correcting with applications to numerical problems. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 47 </volume> <pages> 549-595, </pages> <year> 1993. </year>
Reference-contexts: The same holds in applications where one encounters functions that either have the property or are far from having it. Testing algebraic properties (e.g., linearity or being a polynomial of low-degree) plays an important role in the settings of Program Testing (e.g., <ref> [BLR93, RS96, Rub94] </ref>) and Probabilistically-Checkable Proof systems (e.g., [BFL91, BFLS91, FGL + 91, AS92b, ALM + 92]). Recently, the applicability of property testing has been extended to the domain of combinatorial optimization and the context of approximation algorithms (rather than inapproximability results via PCP).
Reference: [FGL + 91] <author> U. Feige, S. Goldwasser, L. Lovasz, S. Safra, and M. Szegedy. </author> <title> Approximating clique is almost NP-complete. </title> <booktitle> In Proceedings of the Thirty-Second Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 2-12, </pages> <year> 1991. </year>
Reference-contexts: Testing algebraic properties (e.g., linearity or being a polynomial of low-degree) plays an important role in the settings of Program Testing (e.g., [BLR93, RS96, Rub94]) and Probabilistically-Checkable Proof systems (e.g., <ref> [BFL91, BFLS91, FGL + 91, AS92b, ALM + 92] </ref>). Recently, the applicability of property testing has been extended to the domain of combinatorial optimization and the context of approximation algorithms (rather than inapproximability results via PCP).
Reference: [GGR96] <author> O. Goldreich, S. Goldwasser, and D. Ron. </author> <title> Property testing and its connection to learning and approximation. </title> <booktitle> In Proceedings of the Thirty-Seventh Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 339-348, </pages> <year> 1996. </year>
Reference-contexts: 1 Introduction Property Testing as formulated in [RS96] and <ref> [GGR96] </ref> 1 is the study of the following family of tasks: Given oracle access to an unknown function, determine whether the function has a certain predefined property or is far from any function having that property. <p> Recently, the applicability of property testing has been extended to the domain of combinatorial optimization and the context of approximation algorithms (rather than inapproximability results via PCP). In particular, fast property testers for a variety of standard graph theoretic problems such as 3-Colorability, Max-CUT and edge-connectivity, have been presented <ref> [GGR96, GR96] </ref>, and applications to the standard notion of approximation have been suggested (e.g., to approximating max-CUT in dense graphs [GGR96]). The complexity and applicability of property testing depends very much on the representation of the objects being tested. <p> In particular, fast property testers for a variety of standard graph theoretic problems such as 3-Colorability, Max-CUT and edge-connectivity, have been presented [GGR96, GR96], and applications to the standard notion of approximation have been suggested (e.g., to approximating max-CUT in dense graphs <ref> [GGR96] </ref>). The complexity and applicability of property testing depends very much on the representation of the objects being tested. Two models, corresponding to the two standard representations of graphs, were suggested for testing graph properties. <p> Two models, corresponding to the two standard representations of graphs, were suggested for testing graph properties. In the first model, most appropriate to the study of dense graphs, graphs are represented by their adjacency-matrix (equivalently, adjacency predicate) <ref> [GGR96] </ref>. This means that the tester may make queries of the form are u and v adjacent in the graph. <p> A natural graph property exhibiting such a difference is bipartiteness. In the first model (adjacency-matrix representation), a simple algorithm of complexity independent of the size of the graph was shown to be a good tester of bipartiteness <ref> [GGR96] </ref>: Given a distance parameter *, the algorithm uniformly selects a set of ~ O (* 2 ) vertices and accepts if and only if the subgraph induced by these vertices is bipartite. <p> In this work we show that bipartiteness can be tested in the second model (incidence-lists representation) 1 In <ref> [GGR96] </ref> Property Testing was given a broader definition. Here we restrict ourselves to the special case of testing using queries under the uniform distribution as defined already in [RS96]. 1 in time ~ O (poly (1=*) p N ). <p> This result is quite tight in light of the above cited lower bound. Furthermore, it enriches the study of combinatorial property testing in two ways: 1. The graph testing algorithms presented in both <ref> [GGR96] </ref> and [GR96] have complexity bounded by a function of the distance parameter * (independent of the size of the graph). As shown in [GR96], such complexity can not be achieved for some natural properties. <p> We have demonstrated a natural problem for which property testing requires and can be done in time which is approximately the square root of the time required for deciding. 2. The graph testing algorithms presented in <ref> [GGR96] </ref> operate by uniformly selecting a small sample of vertices and inspecting the subgraph induced by them. This is certainly an important paradigm, but limited in scope to dense graphs and furthermore to cases where random subgraphs inherit properties of the graph.
Reference: [GR96] <author> O. Goldreich and D. Ron. </author> <title> Testing properties of bounded-dgree graphs. </title> <booktitle> In Proceedings of the Twenty-Eighth Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 339-348, </pages> <year> 1996. </year>
Reference-contexts: Recently, the applicability of property testing has been extended to the domain of combinatorial optimization and the context of approximation algorithms (rather than inapproximability results via PCP). In particular, fast property testers for a variety of standard graph theoretic problems such as 3-Colorability, Max-CUT and edge-connectivity, have been presented <ref> [GGR96, GR96] </ref>, and applications to the standard notion of approximation have been suggested (e.g., to approximating max-CUT in dense graphs [GGR96]). The complexity and applicability of property testing depends very much on the representation of the objects being tested. <p> In the second model, most appropriate to the study of bounded-degree graphs, graphs are represented by their incidence-lists <ref> [GR96] </ref>: That is, an N -vertex graph of degree bound d is represented by a function from f1; 2; ::::; N g fi f1; 2; :::; dg to f0; 1; 2; ::::; N g. <p> On the other hand, it was shown that in the second model (incidence-lists representation), ( p N ) queries are required for testing bipartiteness (for constant d and * such as d = 3 and * = 0:01) <ref> [GR96] </ref>. In this work we show that bipartiteness can be tested in the second model (incidence-lists representation) 1 In [GGR96] Property Testing was given a broader definition. <p> This result is quite tight in light of the above cited lower bound. Furthermore, it enriches the study of combinatorial property testing in two ways: 1. The graph testing algorithms presented in both [GGR96] and <ref> [GR96] </ref> have complexity bounded by a function of the distance parameter * (independent of the size of the graph). As shown in [GR96], such complexity can not be achieved for some natural properties. Our result demonstrates that property testing may have something to offer also in such a case. <p> Furthermore, it enriches the study of combinatorial property testing in two ways: 1. The graph testing algorithms presented in both [GGR96] and <ref> [GR96] </ref> have complexity bounded by a function of the distance parameter * (independent of the size of the graph). As shown in [GR96], such complexity can not be achieved for some natural properties. Our result demonstrates that property testing may have something to offer also in such a case. <p> This is certainly an important paradigm, but limited in scope to dense graphs and furthermore to cases where random subgraphs inherit properties of the graph. The algorithms in <ref> [GR96] </ref> operate by uniformly selecting a vertex and inspecting its close neighborhood. This paradigm seems restricted to bounded-degree graphs and to properties which are approximately local. The algorithm presented in this paper can be viewed as a combination of both paradigms. <p> whenever the algorithm rejects a graph it outputs a certificate to the non-bipartiteness of the graph in form of an odd-length cycle of length poly (* 1 log N ). 2 We note that, for sake of simplicity, this definition slightly differs from that discussed in the Introduction and in <ref> [GR96] </ref>. There, * is the fraction of entries that should be modified in the graph representation.
Reference: [Mih89] <author> M. Mihail. </author> <title> Conductance and convergence of Markov chains A combinatorial treatment of expanders. </title> <booktitle> In Proceedings 30th Annual Conference on Foundations of Computer Science, </booktitle> <pages> pages 526-531, </pages> <year> 1989. </year>
Reference-contexts: To prove the existence of such a good partition, we use combinatorial techniques that were previously applied to prove fast convergence of random walks on expanders <ref> [Mih89] </ref>. Whereas Mihail [Mih89] showed that if there are no small cuts in the graph then convergence must be rapid, we show that too slow of a convergence implies the existence of small cuts with certain additional properties needed for the rest of our analysis. <p> To prove the existence of such a good partition, we use combinatorial techniques that were previously applied to prove fast convergence of random walks on expanders <ref> [Mih89] </ref>. Whereas Mihail [Mih89] showed that if there are no small cuts in the graph then convergence must be rapid, we show that too slow of a convergence implies the existence of small cuts with certain additional properties needed for the rest of our analysis. <p> Namely, there is a significant fraction of vertices that are reached from s with probability that differs significantly from 1=N . In other words, the distribution on the ending vertices (when starting from s) is far from stationary. What we can show (using techniques of Mihail <ref> [Mih89] </ref>) is that this implies the existence of a small cut between some set of vertices S that are each reached from s with probability that is roughly 1= p jSj N and the rest of G. <p> Then at least half of the vertices s in H are useful with respect to M ` 2 4.3 Determining the Set S In the following lemma we adapt techniques used by Mihail <ref> [Mih89] </ref>. While Mihail showed that high expansion leads to fast convergence of random walks to the stationary distribution, we show that too slow of a convergence implies small cuts that have certain additional properties. <p> Firstly, we are interested in a small cut in H (while a small cut in M might involve auxiliary states). Secondly, we are interested in a cut that has the additional property stated in the lemma. Fortunately, we are able to adapt the specific analysis of Mihail <ref> [Mih89] </ref> to overcome both problems. Building on Mihail's formulation, we first restrict our attention to the states of M that correspond to vertices in H, where here we use the hypothesis that s is useful (see Definition 4.1).
Reference: [RS96] <author> R. Rubinfeld and M. Sudan. </author> <title> Robust characterization of polynomials with applications to program testing. </title> <journal> SIAM Journal on Computing, </journal> <volume> 25(2) </volume> <pages> 252-271, </pages> <year> 1996. </year>
Reference-contexts: 1 Introduction Property Testing as formulated in <ref> [RS96] </ref> and [GGR96] 1 is the study of the following family of tasks: Given oracle access to an unknown function, determine whether the function has a certain predefined property or is far from any function having that property. <p> The same holds in applications where one encounters functions that either have the property or are far from having it. Testing algebraic properties (e.g., linearity or being a polynomial of low-degree) plays an important role in the settings of Program Testing (e.g., <ref> [BLR93, RS96, Rub94] </ref>) and Probabilistically-Checkable Proof systems (e.g., [BFL91, BFLS91, FGL + 91, AS92b, ALM + 92]). Recently, the applicability of property testing has been extended to the domain of combinatorial optimization and the context of approximation algorithms (rather than inapproximability results via PCP). <p> In this work we show that bipartiteness can be tested in the second model (incidence-lists representation) 1 In [GGR96] Property Testing was given a broader definition. Here we restrict ourselves to the special case of testing using queries under the uniform distribution as defined already in <ref> [RS96] </ref>. 1 in time ~ O (poly (1=*) p N ). This result is quite tight in light of the above cited lower bound. Furthermore, it enriches the study of combinatorial property testing in two ways: 1.
Reference: [Rub94] <author> R. Rubinfeld. </author> <title> Robust functional equations and their applications to program testing. </title> <booktitle> In Proceedings of the Thirty-Fifth Annual Symposium on Foundations of Computer Science, </booktitle> <year> 1994. </year>
Reference-contexts: The same holds in applications where one encounters functions that either have the property or are far from having it. Testing algebraic properties (e.g., linearity or being a polynomial of low-degree) plays an important role in the settings of Program Testing (e.g., <ref> [BLR93, RS96, Rub94] </ref>) and Probabilistically-Checkable Proof systems (e.g., [BFL91, BFLS91, FGL + 91, AS92b, ALM + 92]). Recently, the applicability of property testing has been extended to the domain of combinatorial optimization and the context of approximation algorithms (rather than inapproximability results via PCP).
References-found: 12

