URL: ftp://rtcl.eecs.umich.edu/outgoing/ccchou/ICDCS95.ps.Z
Refering-URL: http://www.eecs.umich.edu/RTCL/harts/
Root-URL: http://www.cs.umich.edu
Email: Email: fccchou,kgshing@eecs.umich.edu  
Title: A Distributed Table-Driven Route Selection Scheme for Establishing Real-Time Video Channels  
Author: Chih-Che Chou and Kang G. Shin 
Address: Ann Arbor, MI 48109-2122  
Affiliation: Real-Time Computing Laboratory Department of Electrical Engineering and Computer Science The University of Michigan  
Abstract: To guarantee the delivery of real-time messages before their deadline, a real-time connection or channel must be established before the transmission of any real-time messages. During this channel-establishment phase, one must first select a route between the source and destination of this channel and then reserve sufficient resources along this route so that the worst-case end-to-end delay over the selected route may not exceed the user-specified delay bound. We propose a table-driven distributed route-selection scheme that is guaranteed to find a "qualified" route, if any, that meets the performance requirement of the requested channel without compromising any of the existing guarantees. The proposed scheme uses the Bellman-Ford shortest path algorithm to build real-time delay tables, and hence, can solve the route-selection problem by a simple table look-up. Several examples are presented to demonstrate the effectiveness of the proposed distributed route-selection scheme. 
Abstract-found: 1
Intro-found: 1
Reference: [2] <author> R. L. Cruz, </author> <title> A Calculus for Network Delay and a Note on Topologies of Interconnection Networks, </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <month> July </month> <year> 1987. </year>
Reference-contexts: The underlying network is an arbitrary point-to-point network. As in <ref> [2, 4, 6] </ref>, the generation of real-time messages is assumed to be governed by a linear-bounded arrival process that is characterized by three parameters: maximum message size S max (bytes), maximum message rate R max (messages/second), and maximum burst size B max (messages).
Reference: [3] <author> D. Ferrari and D. C. Verma, </author> <title> "A scheme for real-time channel establishment in wide-area networks," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. SAC-8, </volume> <pages> pp. 368-379, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: 1 Introduction An increasing number of applications such as interactive video and computer-integrated manufacturing require real-time networking services. Among the several real-time communication protocols proposed thus far to meet this requirement, the communication abstraction called the "real-time channel" <ref> [3] </ref> has received considerable attention due to its conceptual simplicity. A real-time channel is a unidirectional virtual circuit which, once established, is guaranteed to meet user-specified performance requirements as long as the user does not violate his "contract" terms [3]. <p> to meet this requirement, the communication abstraction called the "real-time channel" <ref> [3] </ref> has received considerable attention due to its conceptual simplicity. A real-time channel is a unidirectional virtual circuit which, once established, is guaranteed to meet user-specified performance requirements as long as the user does not violate his "contract" terms [3]. The work described in this paper was supported in part by the Office of Naval Research under Grant N00014-J-92-1080 and the National Science Foundation under Grant MIP-9203895. <p> During the channel-establishment phase the system has to select a route between the source and destination of the channel along which sufficient resources can be reserved to meet the user-specified delay and buffer requirements. Although several channel-establishment schemes have been proposed in the literature <ref> [3, 4] </ref>, very few of them have addressed explicitly the issue of selecting a route between the source and destination of a channel, despite its importance to channel establishment.
Reference: [4] <author> D. Kandlur, K. Shin, and D. Ferrari, </author> <title> "Real-time communication in multi-hop networks," </title> <booktitle> Proc. 11-th Int'l. Conf. on Dist. Comput. Syst., </booktitle> <pages> pp. 300-307, </pages> <year> 1991. </year> <title> (An improved version appeared in IEEE Trans. </title> <journal> Parallel and Distributed Systems, </journal> <volume> vol. 5, no. 10, </volume> <pages> pp. 1044-1056, </pages> <month> Oct. </month> <year> 1994.) </year>
Reference-contexts: During the channel-establishment phase the system has to select a route between the source and destination of the channel along which sufficient resources can be reserved to meet the user-specified delay and buffer requirements. Although several channel-establishment schemes have been proposed in the literature <ref> [3, 4] </ref>, very few of them have addressed explicitly the issue of selecting a route between the source and destination of a channel, despite its importance to channel establishment. <p> There are basically two approaches to the route-selection problem: centralized or distributed. Most existing channel-establishment schemes are centralized <ref> [4] </ref>. They simply assume the existence of a global network manager which maintains the information about all the established real-time channels, the topology and resource distribution & commitment of the underlying network, and can thus select an appropriate route for each real-time channel requested. <p> The underlying network is an arbitrary point-to-point network. As in <ref> [2, 4, 6] </ref>, the generation of real-time messages is assumed to be governed by a linear-bounded arrival process that is characterized by three parameters: maximum message size S max (bytes), maximum message rate R max (messages/second), and maximum burst size B max (messages). <p> Based on this message arrival model, the authors of <ref> [4] </ref> proposed a scheme to estimate the worst-case delay on each link and a run-time scheduling algorithm for real-time messages. By adding the worst-case delays of all links that a channel runs through, one can calculate the worst-case end-to-end delivery delay. <p> Besides the linear bounded model, we further assume 1 allowing jitters that the number of possible combinations of frame--generation rates and maximum-frame sizes is small, since we are only interested in standardized interactive video applications. Based on the link delay calculated with the delay-estimation method in <ref> [4] </ref> and the above assumptions, we will develop a scheme which builds real-time channel delay tables on each node so that a qualified route may be found by a simple table look-up. 3.1 Link-Delay Estimation Since real-time messages are given priority over non real-time ones, we will ignore the effects of <p> We will thus assess the delay of a link based only on real-time traffic. Since the algorithm in <ref> [4] </ref> will be used to estimate link delays, we will briefly introduce it first. The goal of the algorithm in [4] is to compute the minimum worst-case response time (MWRT) on a link of each candidate route for a new real-time channel to be added without compromising the performance guarantee of <p> We will thus assess the delay of a link based only on real-time traffic. Since the algorithm in <ref> [4] </ref> will be used to estimate link delays, we will briefly introduce it first. The goal of the algorithm in [4] is to compute the minimum worst-case response time (MWRT) on a link of each candidate route for a new real-time channel to be added without compromising the performance guarantee of any of the existing channels on the link. <p> Note that the inequality d i p i must hold for the algorithm in <ref> [4] </ref> to work correctly. <p> The algorithm statically assigns priority to each real-time channel (in ascending order of d values) to calculate the MWRT for M k+1 , but uses an Earliest-Due-Date (EDD) algorithm for run-time scheduling. The method in <ref> [4] </ref> does not include those channels pending for final confirmation in the calculation of MWRT for the new channel-establishment request, but we will treat pending channels differently in two situations. <p> In such a case, the authors of <ref> [4, 6] </ref> proposed that D d a should be divided evenly into hops parts by the destination node and distributed to all links along the path. <p> Note that one may also choose to divide D d a in proportion to each link's MWRT. However, since this method may make the link-delay deadline unnecessarily small over a link which has small MWRT we will adopt the method proposed in <ref> [4, 6] </ref>. The dif f will be included in the channel-establishment confirmation message (by procedure send reply (accept)) from the destination to source via the same path the corresponding request message had traveled (but in the opposite direction).
Reference: [5] <author> P. Pancha and M. E. Zarki, </author> <title> "A look at the MPEG video coding standard for variable bit rate video transmission," </title> <booktitle> INFOCOM, </booktitle> <year> 1992. </year>
Reference-contexts: For example, 30 frames per second is the frame rate for live interactive video and the MPEG Video Simulation Model Three (SM3) suggests 352 by 288 pixels per frame for achieving video tape quality <ref> [5] </ref>. Note that a standardized resolution implies a standardized maximum-frame size.
Reference: [6] <author> K. G. Shin and C.-C. Chou. </author> <title> A Distributed Route-Selection Scheme for Establishing Real-Time Channels. </title> <note> Submitted for publication. </note>
Reference-contexts: The first approach, on the other hand, could be very time-consuming for the complete search of all possible routes, and its operational overhead is proportional to K. Considering the advantages and disadvantages of these two approaches, we have developed in <ref> [6] </ref> an efficient scheme for selecting a route for each channel-establishment request. <p> The underlying network is an arbitrary point-to-point network. As in <ref> [2, 4, 6] </ref>, the generation of real-time messages is assumed to be governed by a linear-bounded arrival process that is characterized by three parameters: maximum message size S max (bytes), maximum message rate R max (messages/second), and maximum burst size B max (messages). <p> In such a case, the authors of <ref> [4, 6] </ref> proposed that D d a should be divided evenly into hops parts by the destination node and distributed to all links along the path. <p> Note that one may also choose to divide D d a in proportion to each link's MWRT. However, since this method may make the link-delay deadline unnecessarily small over a link which has small MWRT we will adopt the method proposed in <ref> [4, 6] </ref>. The dif f will be included in the channel-establishment confirmation message (by procedure send reply (accept)) from the destination to source via the same path the corresponding request message had traveled (but in the opposite direction).
Reference: [7] <author> K. G. Shin and C.-C. Chou, </author> <title> "A simple distributed loop-free routing strategy for computer communication networks," </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> vol. 4, no. 12, </volume> <pages> pp. 1308-1319, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: Determination of each channel's MWRT on a link will be referred to as link-delay estimation. 3.2 Building Real-Time Delay Tables Based on the above definition of link delay, we can apply the Bellman-Ford algorithm [1] and a loop-free version of the APARNET's previous routing strategy (APRS) <ref> [7] </ref> to build real-time delay tables on each node. <p> For every destination--neighbor pair, the information is kept in a 3-tuple form (destination; neighbor; delay). Other information may be needed for the loop-free APRS, but we will not discuss this issue here. (See <ref> [7] </ref> for a detailed account of this.) These 3-tuples are divided into groups based on the destination node. Within a group, they are listed in the ascending order of delay.
References-found: 6

