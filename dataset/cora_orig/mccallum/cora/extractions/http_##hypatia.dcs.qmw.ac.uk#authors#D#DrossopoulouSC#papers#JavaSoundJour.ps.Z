URL: http://hypatia.dcs.qmw.ac.uk/authors/D/DrossopoulouSC/papers/JavaSoundJour.ps.Z
Refering-URL: http://www.cl.cam.ac.uk/users/drs1004/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: @doc.ic.ac.uk  
Title: Is the Java Type System Sound?  
Author: Sophia Drossopoulou, Susan Eisenbach and Sarfraz Khurshid 
Address: email: sd and se  
Affiliation: Department of Computing Imperial College of Science, Technology and Medicine  
Abstract: A proof of the soundness of the Java type system is a first, necessary step towards demonstrating which Java programs won't compromise computer security. We consider a subset of Java describing primitive types, classes, inheritance, instance variables and methods, interfaces, shadowing, dynamic method binding, object creation, null, arrays and exception throwing and handling. We argue that for this subset the type system is sound, by proving that program execution preserves the types, up to subclasses/subinterfaces. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> M. Abadi and L. Cardelli. </author> <title> A Semantics of Object Types. </title> <booktitle> In LICS'94 Proceedings, </booktitle> <year> 1994. </year>
Reference: 2. <author> Ole Ageson, Stephen Freunds, and John C. Mitchell. </author> <title> Adding paraleterized types to Java. </title> <booktitle> In OOPSLA'97 Proceedings, </booktitle> <year> 1997. </year>
Reference-contexts: We aim to extend the language subset to describe a larger part of Java, and we also hope that our approach may serve as the basis for other studies on the language and its possible extensions <ref> [25, 3, 2] </ref>.
Reference: 3. <author> Joseph A. Bank, Barbara Liskov, and Andrew C. Myers. </author> <title> Parameterized Types and Java. </title> <booktitle> In POPL'97 Proceedings, </booktitle> <month> Jan-uary </month> <year> 1997. </year>
Reference-contexts: z is a one dimensional array of Phil, then the assignment z <ref> [3] </ref>:=aPhil is type-correct. However, if at run-time z happens to contain a reference to an array of FrPhil, i.e. (z) = i and ( i ) = [[:::]] FrPhil [] , then z [3]:=aPhil gets rewritten to i [3] := aPhil which is type incorrect. If evaluation of the right hand side, in that case aPhil, does not return a value of the appropriate type, then an exception is thrown. <p> Array access as described here adheres to the rules in ch. 15.12 of [16], which require full evaluation of the expression to the left of the brackets. Thus, with our operational semantics, the term a [(a := b)<ref> [3] </ref>] corresponds to the term a [b [3]]; a := b. The last six rules in figure 13 describe the creation of new objects or arrays, c.f. ch. 15.8-15.9 of [16]. Essentially, a new value of the appropriate array or class type is created, and its address is returned. <p> We aim to extend the language subset to describe a larger part of Java, and we also hope that our approach may serve as the basis for other studies on the language and its possible extensions <ref> [25, 3, 2] </ref>.
Reference: 4. <author> John Boyland and Giuseppe Castagna. </author> <title> Type-Safe Compilation of Covariant Specialization: A Practical Case. </title> <booktitle> In ECOOP'96 Proceedings, </booktitle> <month> July </month> <year> 1996. </year>
Reference: 5. <author> Kim B. Bruce, Luca Cardelli, and Benjamin Pierce. </author> <title> Comparing Object Encodings. </title> <booktitle> Theoretical Aspects of Computer Science, </booktitle> <year> 1997. </year> <note> to appear. </note>
Reference-contexts: Truth 0 ( 3 ) = t... Food Arrays carry their dimension and type information, and they consist of a sequence of values for the first dimension. For example, <ref> [[3; 5; 8; 11] </ref>] int [] mensional array of integers. 5.1 State, object operations, ground terms In this section we define operations on objects, arrays and states.
Reference: 6. <author> L. Cardelli. </author> <title> Program Fragments, Linking, </title> <booktitle> and Modulariza-tion. In POPL'97 Proceedings, </booktitle> <month> January </month> <year> 1997. </year>
Reference-contexts: This probably requires extensions to the definition of Java se . Finally, a most important issue requiring considerable innovation is dynamic linking. A starting point is <ref> [6] </ref>, presenting a formal description of traditional separate compilation and static linking in the style of Modula-2. 8. Acknowledgments We would like to acknowledge encouragement from our colleagues in the Department of Computing during the formulation of these ideas and financial support from the EPSRC (Grant Ref: GR/K73282).
Reference: 7. <author> Giuseppe Castagna. </author> <title> Parasitic Methods: Implementation of Multimethods for Java. </title> <type> Technical report, </type> <institution> C.N.R.S, </institution> <month> November </month> <year> 1996. </year>
Reference-contexts: introduction of the subsumption rule would make this type system non-deterministic although <ref> [7] </ref> develops a system for Java which has a subsumption rule, and in which the types of method call and field access are determined by using the minimal types of the expressions. 4.6 Extending the type rules to Java se After giving types to Java s terms, we also give types
Reference: 8. <author> Giuseppe Castagna, Giorgio Ghelli, and Giuseppe Longo. </author> <title> A calculus for overloaded functions with subtyping. </title> <journal> Information and Computation, </journal> <volume> 117(1) </volume> <pages> 115-135, </pages> <month> 15 February </month> <year> 1995. </year>
Reference-contexts: Truth 0 ( 3 ) = t... Food Arrays carry their dimension and type information, and they consist of a sequence of values for the first dimension. For example, <ref> [[3; 5; 8; 11] </ref>] int [] mensional array of integers. 5.1 State, object operations, ground terms In this section we define operations on objects, arrays and states.
Reference: 9. <author> William Cook. </author> <title> A Proposal for making Eiffel Type-safe. </title> <editor> In S. Cook, editor, </editor> <booktitle> ECOOP'87 Proceedings, </booktitle> <pages> pages 57-70. </pages> <publisher> Cam-bridge University Press, </publisher> <month> July </month> <year> 1989. </year>
Reference: 10. <author> Luis Damas and Robin Milner. </author> <title> Principal Type Schemes for Functional Languages. </title> <booktitle> In POPL'82 Proceedings, </booktitle> <year> 1982. </year>
Reference: 11. <author> Drew Dean. </author> <title> The Security of Static Typing with Dynamic Linking. </title> <booktitle> In Fourth ACM Conference on Computer and Communication Security, </booktitle> <year> 1997. </year>
Reference-contexts: Truth 0 ( 3 ) = t... Food Arrays carry their dimension and type information, and they consist of a sequence of values for the first dimension. For example, <ref> [[3; 5; 8; 11] </ref>] int [] mensional array of integers. 5.1 State, object operations, ground terms In this section we define operations on objects, arrays and states.
Reference: 12. <author> Drew Dean, Edward W. Felten, and Dan S. Wallach. </author> <title> Java Security: From HotJava to Netscape and Beyond. </title> <booktitle> In Proceedings of the 1996 IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 190-200, </pages> <month> May </month> <year> 1996. </year>
Reference: 13. <author> Sophia Drossopoulou and Susan Eisenbach. </author> <title> Is the Java type system sound? In Fourth International Workshop on Foundations of Object-Oriented Languages, </title> <month> January </month> <year> 1997. </year>
Reference-contexts: Acknowledgments We would like to acknowledge encouragement from our colleagues in the Department of Computing during the formulation of these ideas and financial support from the EPSRC (Grant Ref: GR/K73282). Earlier, less complete versions of this work have been presented at Fool4 <ref> [13] </ref> and Ecoop97 [14]. The account of exception handling, though, is entirely new. We are greatly indebted to many people, for valuable feedback: Peter Sellinger, David von Oheimb, Yao Feng, Guiseppe Castagna, the anonymous Tapos referee and particularly Don Syme.
Reference: 14. <author> Sophia Drossopoulou and Susan Eisenbach. </author> <title> Java is type safe | probably. </title> <booktitle> In Proceedings of the European Conference on Object-Oriented Programming, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: Acknowledgments We would like to acknowledge encouragement from our colleagues in the Department of Computing during the formulation of these ideas and financial support from the EPSRC (Grant Ref: GR/K73282). Earlier, less complete versions of this work have been presented at Fool4 [13] and Ecoop97 <ref> [14] </ref>. The account of exception handling, though, is entirely new. We are greatly indebted to many people, for valuable feedback: Peter Sellinger, David von Oheimb, Yao Feng, Guiseppe Castagna, the anonymous Tapos referee and particularly Don Syme.
Reference: 15. <editor> M. Gordon and T.F. Melhams, editors. </editor> <title> Introduction to HOL: </title>
Reference-contexts: The most significant omissions were uncovered by Don Syme in the work described in [31], where he applied part of the formal system presented here and validated it through application of Declare [29], a theorem prover related to Hol <ref> [15] </ref> and PVS but designed to support a simple "declarative" proof language. In the process he uncovered the flaws mentioned earlier in this paper. With the modifications he suggested, he was able to validate the subject reduction theorem using his theorem prover. <p> This result gives us greater confidence in the results of the paper, but it also underlines the importance of the use of theorem provers for such, rather large systems. Applications of theorem provers for programming language properties are also described in in <ref> [15, 29, 33] </ref> and it seems to us that further work is necessary in order to make these tools more task specific to reasoning about programming language properties.
References-found: 15

