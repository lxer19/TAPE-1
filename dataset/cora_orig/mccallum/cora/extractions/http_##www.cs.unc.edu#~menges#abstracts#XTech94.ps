URL: http://www.cs.unc.edu/~menges/abstracts/XTech94.ps
Refering-URL: http://www.cs.unc.edu/~menges/abstracts/
Root-URL: http://www.cs.unc.edu
Title: Constructing X Pseudo-Servers with the X Protocol Engine Library  
Author: John Menges 
Address: Chapel Hill.  
Affiliation: Computer Science at the University of North Carolina at  
Note: John Menges (menges@cs.unc.edu) is a graduate student in  This tutorial was given at the 8th Annual X Technical Conference, Boston MA  
Date: October, 1993  (Jan 1994)  
Abstract: This is a tutorial on building X Pseudo-Servers with the X Protocol Engine Library (XPEL), first introduced at the 1993 X Technical Conference [Men93]. XPEL is a C++ library for constructing X pseudo-servers (XPSes) based on the object-oriented X Protocol Engine Architecture (XPEA). Basic familiarity with the C++ programming language and the X architecture are assumed. This tutorial will begin by explaining what an XPS is and how one is used to add capabilities (typically window-sharing and tracking/replay functions) to the X Window System. The advantages and limitations of this approach to extending X will be discussed. Then a brief survey of XPS development to date will be given. I will argue that XPS development work has been hampered by the lack of a good architecture and supporting library for developing such systems. The X Protocol Engine Architecture (XPEA) and Library (XPEL) will then be introduced. The X Protocol Engine Architecture uses a model of inter-connected protocol manipulation filter objects like that sometimes used in the implementation of inter-process communication facilities [HP91] [MRA87] [PR85]. This allows the programmer to incrementally develop XPS software by piecing together filters from the XPEL library and filters of his own that he has derived from base classes in the library. XPEL is a class library consisting of about 60,000 lines of C++ source code. It provides support for XPS development in the form of an event scheduler, event handlers, a filter superclass, supplied filters, and a message class for each of the standard X protocol messages. 
Abstract-found: 1
Intro-found: 0
Reference: [HP91] <author> Norman C. Hutchinson and Larry L. Peterson. </author> <title> The x-Kernel: An Architecture for Implementing Network Protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(1) </volume> <pages> 64-76, </pages> <month> January </month> <year> 1991. </year>
Reference: [Men93] <author> John Menges. </author> <title> The X Engine Library: A C++ Library for Constructing X Pseudo-Servers. </title> <booktitle> In Proceedings of the Seventh Annual X Technical Conference, </booktitle> <pages> pages 129-141, </pages> <address> 103 Morris Street, Sebastopol, CA 95472, </address> <month> January </month> <year> 1993. </year> <institution> O'Reilly & Associates, Inc. </institution>
Reference: [MRA87] <author> Jeffrey C. Mogul, Richard F. Rashid, and Michael J. Accetta. </author> <title> The Packet Filter: An Efficient Mechanism for User-level Network Code. </title> <booktitle> In Proceedings of the Eleventh ACM Symposium on Operating System Principles, </booktitle> <pages> pages 39-51, </pages> <month> Novem-ber </month> <year> 1987. </year>
Reference: [Ous93] <author> John K. Ousterhout. </author> <title> An Introduction to Tcl and Tk. </title> <publisher> "Addison-Wesley Publishing", </publisher> <year> 1993. </year>
Reference: [PR85] <author> D. L. Presotto and D. M. Ritchie. </author> <title> Interprocess Communication in the Eighth Edition Unix System. </title> <booktitle> In Proceedings of the 1985 USENIX Association Summer Conference, </booktitle> <pages> pages 309-316, </pages> <month> June </month> <year> 1985. </year> <month> 3 </month>
References-found: 5

