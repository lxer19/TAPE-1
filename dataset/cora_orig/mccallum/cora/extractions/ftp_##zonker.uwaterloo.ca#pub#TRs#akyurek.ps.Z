URL: ftp://zonker.uwaterloo.ca/pub/TRs/akyurek.ps.Z
Refering-URL: http://www.cs.umd.edu/users/akyurek/papers.html
Root-URL: 
Title: Adaptive Disk Management  
Degree: Sedat Akyurek, Doctor of Philosophy, 1994 Dissertation directed by: Assistant Professor Kenneth Salem  
Affiliation: Department of Computer Science  
Note: Abstract Title of Dissertation:  
Abstract: The increases in the speeds of computers have not been matched by comparable increases in the speeds of disks. This has created a performance gap between disks and the CPU and the memory. The gap has been getting even wider in recent years. Because of the imbalance in the speeds of disks and the rest of the computer system, disks have become performance bottlenecks. The performance of disk systems needs to be improved to meet the demands of new applications with high I/O request rates and tighter response time restrictions. In this dissertation, we propose adaptive data management techniques to improve the performance of disk systems by reducing data access times. Seek time is a major component of the disk request service times, and reducing the seek times can significantly reduce the data access times. The techniques we propose in this dissertation aim to reduce the seek times on disks. Our techniques make use of some of the disk's free space, to replicate and rearrange frequently used data in order to reduce seek times. Adaptivity is one of the most important properties of our techniques. They base their decisions about which blocks to replicate and where to place replicas on data access distributions. Since data access patterns can change over time, our techniques monitor the data 
Abstract-found: 1
Intro-found: 1
Reference: [Bassiouni 86] <author> Bassiouni, M. A., </author> <title> "System and Program Models of Storag Allocation for Reducing Seek Delays," </title> <journal> The Computer Journal, </journal> <volume> Vol. 28, No. 1, </volume> <year> 1986. </year>
Reference: [Bitton 87] <author> Bitton, </author> <title> Dina, </title> <booktitle> "Technology Trends in Mass-Storage Systems," Proceedings of the SIGMOD 1987 Annual Conference, </booktitle> <address> San Fran-cisco, California, </address> <year> 1987. </year>
Reference: [Bitton 88] <author> Bitton, Dina, Jim Gray, </author> <title> "Disk Shadowing," </title> <booktitle> Proceedings of the 14th VLDB Conference, </booktitle> <address> Los Angeles, California, </address> <year> 1988. </year>
Reference: [Calder 84] <author> Calderbank, A. R., E. G. Coffman, JR., L. Flatto, </author> <title> "Optimum Head Separation in a Disk System with Two Read/Write Heads," </title> <journal> JACM, Vol.31, </journal> <volume> No.4, </volume> <month> October </month> <year> 1984. </year>
Reference: [Carson 89] <author> Carson, Scott D., Paul F. Renolds, Jr., </author> <title> "Adaptive Disk Reorganization," </title> <type> Technical Report 2178, </type> <institution> Department of Computer Science, University of Maryland at College Park, </institution> <month> January </month> <year> 1989. </year>
Reference: [Carson 92] <author> Carson, Scott D., Sanjeev Setia, </author> <title> "Optimal Write Batch Size in LFS Systems," </title> <booktitle> Proceedings of USENIX Filesystems Workshop, </booktitle> <address> Ann Arbor, Michigan, </address> <month> May </month> <year> 1992. </year> <month> 175 </month>
Reference: [English 92] <author> English, Robert M., Alexander A. Stepanov, " Loge: </author> <title> A Self--Organizing Disk Controller," </title> <booktitle> Proceedings of the Winter 1992 USENIX Conference, </booktitle> <address> San Francisco, CA, </address> <year> 1992. </year>
Reference: [Floyd 89] <author> Floyd, Richard A., Carla Schlatter Ellis, </author> <title> "Directory Reference Patterns in Hierarchical File Systems," </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> Vol. 1, No. 2, </volume> <month> June </month> <year> 1989. </year>
Reference: [Ford 91] <author> Ford, Daniel A., Stavros Christodoulakis, </author> <title> "Optimizing Random Retrievals from CLV format Optical Disks," </title> <booktitle> Proceedings of the 17th International Conference on Very Large Data Bases, </booktitle> <address> Barcelona, Spain, </address> <month> September, </month> <year> 1991. </year>
Reference: [Geist 87] <author> Geist, Robert, Stephen Daniel, </author> <title> "Continuum of Disk Scheduling Algorithms," </title> <journal> ACM Transactions on Computer Systems, Vol.5, </journal> <volume> No.1, </volume> <month> February </month> <year> 1987. </year>
Reference: [Grossman 73] <author> Grossman, David D., Harvey F. Silverman, </author> <title> "Placement of Records on a Secondary Storage Device to Minimize Access Time," </title> <journal> JACM, Vol.20, </journal> <volume> No.3, </volume> <month> July </month> <year> 1973. </year>
Reference: [Hofri 80] <author> Hofri, M., </author> <title> "Disk Sceduling: FCFS vs. SSTF Revisited," </title> <journal> Communications of the ACM, Vol.23, </journal> <volume> No.11, </volume> <year> 1980. </year>
Reference: [Jobalia 91] <author> Jobalia, Meenal, </author> <title> "Precision Measurement of Disk Delay Characteristics," </title> <type> Master's Thesis, </type> <institution> Electrical Engineering Department, University of Maryland at College Park, </institution> <year> 1991. </year> <month> 176 </month>
Reference-contexts: Seek times are non-linear functions of seek distance. We have plotted the results in terms of seek time, in Figures 3.3a and 3.3b, for "zonker" and "ballast", respectively. Different disks have different seek time functions. We have used functions measured for our types of disks, as given in <ref> [Jobalia 91] </ref> and [Seltzer 90]. These are given in Table 3.2. Although they are significant, the seek time reductions are not as large as the reductions in distance. On ballast, the use of 500 replicas reduced the mean seek time by 24%. <p> Specifications of the Fuji disk were given Table 5.2 in Chapter 5. Table 8.1 lists the specifications of the Toshiba disk. The seek time functions and other delay parameters for the disks are given in the Appendix. The seek time function for the Toshiba disk is borrowed from <ref> [Jobalia 91] </ref>, in which the disk delay parameters for this disk were measured and a precise seek time function was devised. We derived the 140 seek time function for the Fujitsu disk ourselves, using a methodology similar to that used in [Jobalia 91]. <p> time function for the Toshiba disk is borrowed from <ref> [Jobalia 91] </ref>, in which the disk delay parameters for this disk were measured and a precise seek time function was devised. We derived the 140 seek time function for the Fujitsu disk ourselves, using a methodology similar to that used in [Jobalia 91]. The Fujitsu disk is the disk from which the sakarya1 and sakarya2 traces used in Chapter 6 were gathered. It has a track buffer and supports read-ahead buffering. The Toshiba disk does not support read-ahead buffering. <p> The seek time function for the Quantum disk was provided by HP Labs together with the traces. The seek time function for the RA81 disk was derived from the manufacturer's specifications. Finally, the seek time function for the Toshiba disk was borrowed from <ref> [Jobalia 91] </ref>. 169 Disk Type Fujitsu M2266AS Disk Media Transfer Rate 2.5 MB/s Channel Transfer Rate 4.2 MB/s Controller Overhead 2 ms Track Switch Delay 1 ms Cylinder Switch Delay 3.5 ms seektime (d) = 8 &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; :
Reference: [King 90] <author> King, Richard P., </author> <title> "Disk Arm Movement in Anticipation of Future Requests," </title> <journal> ACM Transactions on Computer Systems, Vol.8, </journal> <volume> No.3, </volume> <year> 1990. </year>
Reference-contexts: Minimum, average and maximum daily mean values are reported. Times are in milliseconds, and distances are in cylinders. 112 6.5.2 Utilization of Idle Times Anticipatory disk head positioning is another technique that can be used to shorten seek times. It is argued in <ref> [King 90] </ref> that disks are idle most of the time, and that idle time can be used to reposition the disk head in anticipation of future requests. If the head can be moved closer to the next requested block, seek times can be reduced.
Reference: [Lo 90] <author> Lo, Sai-Lai, "Ivy: </author> <title> A Study on Replicating Data for Performance Improvement," </title> <type> Technical Report, </type> <institution> Hewlett-Packard Laboratories, Concurrent Computing Department, HPL-CSP-90-48, </institution> <month> De-cember </month> <year> 1990. </year>
Reference: [Manolo 91] <author> Manolopoulos, Yannis, Athina Vakali, </author> <title> "Seek Distances in Disks with Two Independent Heads Per Surface," </title> <journal> Information Processing Letters, </journal> <month> January </month> <year> 1991. </year>
Reference: [McKusick 84] <author> McKusick, Marshall K., W. N. Joy, S. J. Le*er, R. S. Fabry, </author> <title> "A Fast File System for UNIX," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> Vol. 2, No. 3, </volume> <month> August </month> <year> 1984. </year>
Reference-contexts: Serial placement preserves the original placement of the blocks. This means that any placement decision made 69 by the static data placement policy will not be destroyed by the rearrangement. For example, file systems generally allocate the blocks of a file close to each other <ref> [McKusick 84] </ref>. If the blocks of a file are selected for rearrangement, serial placement will place them in close proximity. This can be advantageous when accessing the file sequentially.
Reference: [McVoy 91] <author> McVoy, L.W., S.R. Kleiman, </author> <title> "Extent-like Performance from a UNIX File System," </title> <booktitle> USENIX Winter 1991 Conference Proceedings, </booktitle> <address> Dallas, TX, </address> <year> 1991. </year>
Reference-contexts: Under SunOS, however, the amount of memory used for buffer cache is not fixed. The amount of physical memory used for the buffer cache is determined dynamically. Potentially, all of the available memory can be used for the buffer cache <ref> [McVoy 91] </ref>. Sakarya was usually very lightly loaded. As a result, a large portion of the memory was available for the buffer cache most of the time. Sakarya acted as a file server in the Computer Science Department of the University of Maryland.
Reference: [Nelson 92] <author> Nelson, Bruce, Yu-Ping Cheng, </author> <title> "How and Why is SCSI Better than IPI for NFS," </title> <booktitle> Proceedings of the Winter 1992 USENIX Conference, </booktitle> <address> San Francisco, CA, </address> <year> 1992. </year>
Reference: [Ng 91] <author> Ng, Spencer W., </author> <title> "Improving Disk Performance Via Latency Reduction," </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. 40, No. 1, </volume> <month> Jan-uary </month> <year> 1991. </year> <month> 177 </month>
Reference: [Patt 94] <author> Patt, Yale N., </author> <title> "The I/O Subsystem: A Candidate for Improve--ment," </title> <journal> IEEE Computer Vol. </journal> <volume> 27, No. 3, </volume> <month> March, </month> <year> 1994. </year>
Reference: [Rosenblum 91] <author> Rosenblum, M., J. K. Ousterhout, </author> <title> "The Design and Implementation of a Log-Structured File System," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> Vol.10, </volume> <month> February </month> <year> 1992, </year> <pages> 26-52. </pages>
Reference: [Ruemmler 91] <author> Ruemmler, C., J. Wilkes, </author> <title> "Disk Shu*ing", </title> <institution> HPL-91-156, Hewlett-Packard Laboratories, </institution> <address> Palo Alto, CA, </address> <month> October, </month> <year> 1991. </year>
Reference-contexts: We did not attempt to systematically vary the length of the interval. Previous experiments we performed on our traces (in conjunction with other work) suggested that hot spots changed slowly over the course of the trace. The experiments presented in <ref> [Ruemmler 91] </ref> also suggest that longer monitoring intervals (daily or weekly) result in good performance. 4.3 Block Placement Placement of the selected blocks in the reserved cylinders is another important part of the block rearrangement technique.
Reference: [Ruemmler 94] <author> Ruemmler, C., J. Wilkes, </author> <title> "An Introduction to Disk Drive Mod-elling," </title> <journal> IEEE Computer Vol. </journal> <volume> 27, No. 3, </volume> <month> March, </month> <year> 1994. </year>
Reference: [Salem 92] <author> Salem, Kenneth, Daniel Barbara, Richard J. Lipton, </author> <title> "Probal-istic Diagnosis of Hot Spots," </title> <booktitle> Proceedings of Eighth International Conference on Data Engineering, </booktitle> <address> Tempe, Arizona, </address> <month> Febru-ary </month> <year> 1992. </year>
Reference-contexts: In general, H (i) and ~ H (i) will not be the same. There is a variety of other space-efficient monitoring techniques that could be used by the reference analyzer. <ref> [Salem 92] </ref> presents and compares several of these, including the two just described. In addition to these two techniques, we experimented with the random partitioning algorithm described in [Salem 92]. In our performance experiments we used a variant of LRU method to estimate hot blocks. <p> There is a variety of other space-efficient monitoring techniques that could be used by the reference analyzer. <ref> [Salem 92] </ref> presents and compares several of these, including the two just described. In addition to these two techniques, we experimented with the random partitioning algorithm described in [Salem 92]. In our performance experiments we used a variant of LRU method to estimate hot blocks. Under this method, when a fresh counter is needed, the least recently 67 used "cold" block is replaced. <p> Implementing the analyzer in a user-level process made the implementation easier and also gave us the flexibility to experiment with different methods for learning the access frequencies. 4 The hot block estimation algorithm we have used and several other space-efficient hot spot detection algorithms are presented in <ref> [Salem 92] </ref>. 134 7.4.2 Block Placement The Block arranger is also implemented as a user-level process. It receives a list of blocks and their access frequencies from the reference stream analyzer, at the end of each monitoring period.
Reference: [Seltzer 90] <author> Seltzer, Margo, Peter Chen, John Ousterhout, </author> <title> "Disk Scheduling Revisited," </title> <booktitle> Proceeding of the Winter 1990 USENIX Conference, </booktitle> <address> Washington, D.C., </address> <year> 1990. </year>
Reference-contexts: We have plotted the results in terms of seek time, in Figures 3.3a and 3.3b, for "zonker" and "ballast", respectively. Different disks have different seek time functions. We have used functions measured for our types of disks, as given in [Jobalia 91] and <ref> [Seltzer 90] </ref>. These are given in Table 3.2. Although they are significant, the seek time reductions are not as large as the reductions in distance. On ballast, the use of 500 replicas reduced the mean seek time by 24%. <p> Seek time (in milliseconds) is a function of seek distance. The seek time function for the Fujitsu M2266AS was derived by the authors using measurements taken on the disk. The function for the Fujitsu 2351 Eagle is borrowed from <ref> [Seltzer 90] </ref>. The seek time function for the Quantum disk was provided by HP Labs together with the traces. The seek time function for the RA81 disk was derived from the manufacturer's specifications.
Reference: [Seltzer 93] <editor> Seltzer, Margo, et al, </editor> <title> "An Implementation of a Log-Structured File System for UNIX," </title> <booktitle> Proceeding of the Winter 1993 USENIX Conference, </booktitle> <address> San Diego, California, </address> <year> 1993. </year>
Reference: [Schwet 90] <author> Schwetman, Herb, </author> <title> "CSIM Reference Manual," </title> <institution> Microelectronics and Computer Technology Corporation, </institution> <note> Technical Report ACA-ST-257-87. </note>
Reference-contexts: Time stamps have a resolution of 1 microsecond, 5 microseconds and 10 milliseconds, on traces from snake, sakarya and ballast, respectively. 79 5.2 Simulator Operations of the disks are modeled using a discrete-event simulator which is implemented using the CSIM simulation library <ref> [Schwet 90] </ref>. In addition to modeling the disks, the simulator also has components to simulate adaptive block rearrangement.
Reference: [Staelin 90] <author> Staelin, Carl, Hector Garcia-Molina, </author> <title> "Clustering Active Disk Data To Improve Disk Performance," </title> <type> Technical Report CS-TR-283-90, </type> <institution> Department of Computer Science, Princeton University, </institution> <month> September </month> <year> 1990. </year>
Reference: [Staelin 91] <author> Staelin, Carl, Hector Garcia-Molina, </author> <title> "Smart Filesystems," </title> <booktitle> Proceedings of the Winter 1991 USENIX Conference, </booktitle> <address> Dallas, TX, </address> <year> 1991. </year>
Reference: [Solworth 90] <author> Solworth, Jon A., Cyril U. Orji, </author> <title> "Write-Only Disk Caches," </title> <booktitle> Proceedings of the SIGMOD 1990 International Conference, </booktitle> <address> At-lantic City, New Jersey, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: For example, the UNIX operating system buffers and delays updates. Thus, although the update rate does increase disk utilization and therefore, indirectly, read response times, the impact may not be severe. Other techniques, such as non-volatile buffers for updates and "write-only" disk caches <ref> [Solworth 90] </ref>, can also be used to reduce the update penalty. When update performance is critical, seek time reductions from replication can be traded-off to reduce the update load, if necessary.
Reference: [Teorey 72] <author> Teorey, T. J., T. B. Pinkerton, </author> <title> "A Comparative Analysis of Disk Scheduling Policies," </title> <journal> Communications of the ACM, Vol.15, </journal> <volume> No.3, </volume> <year> 1972. </year>
Reference: [Trivedi 80] <author> Trivedi Kishor S., </author> <title> Probablity and Statistics with Reliability, Queuing, </title> <booktitle> and Computer Science Applications, </booktitle> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, NJ 07632. </address>
Reference: [Vong 90] <author> Vongsathorn, Paul, Scott D. Carson, </author> <title> "A System for Adaptive Disk Rearrangement," </title> <journal> Software-Practice and Experience, </journal> <volume> Vol. 20(3), </volume> <month> March </month> <year> 1990. </year>
Reference-contexts: The simulation results showed that expected seek times could be cut in half by rearranging about 2% to 3% of all the blocks on a disk. For some systems the reductions were even better. This performance is better than that reported in <ref> [Vong 90] </ref> for an adaptive technique that rearranges cylinders rather than blocks. That technique requires that all of the disk's cylinders be rearranged. One of the reasons that adaptive block rearrangement performed so well was its ability to pack frequently used blocks on the same cylinder (s). <p> Also, this approach makes it possible to use block rearrangement on any disk, without requiring a controller that supports block rearrangement. We have implemented block rearrangement in the disk device driver. Our design is similar to the one used in <ref> [Vong 90] </ref> to implement cylinder rearrangement. It is totally transparent to the rest of the operating system. As a result, no changes are needed to the file system, or to any other part of the operating system. A block diagram of our implementation is shown in Figure 7.1.
Reference: [White 89] <author> White, Robert M., </author> <title> Editor, Introduction to Magnetic Recording, </title> <publisher> IEEE Press, </publisher> <year> 1984. </year> <month> 179 </month>
Reference: [Wong 80] <author> Wong, C. K., </author> <title> "Minimizing Expected Head Movement in One--Dimensional and Two-Dimensional Mass Storage Systems," </title> <journal> Computing Surveys, Vol.12, No.2, </journal> <month> June </month> <year> 1980. </year> <month> 180 </month>
References-found: 36

