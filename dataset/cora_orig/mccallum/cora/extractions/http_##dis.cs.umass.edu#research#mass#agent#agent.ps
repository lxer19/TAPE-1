URL: http://dis.cs.umass.edu/research/mass/agent/agent.ps
Refering-URL: http://dis.cs.umass.edu/research/mass/documentations.html
Root-URL: 
Title: A Reusable Component Architecture for Agent Construction  
Author: Bryan Horling 
Date: May, 1998  
Affiliation: Department of Computer Science University of Massachusetts  
Abstract: A generic, component based architecture is proposed as a basis for designing the agents used within Multi-Agent Systems. The architecture, based on Sun's Java Beans, is explored, and both domain independent and applied component examples are described in detail. Designs for theoretical new components for the applied agent are also proposed and examined.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Frank M. Carrano. </author> <title> Data Abstraction and Problem Solving with C++. </title> <publisher> The Ben-jamin/Cummings Publishing Company, Inc., </publisher> <address> Redwood City, CA, </address> <year> 1995. </year>
Reference-contexts: Rather than regenerating this support code, it seems clear that some mechanism of reusing old code would be very useful, if it could be made appropriately domain independent. Code reuse and modularity are not new ideas in the field of computer science <ref> [1] </ref>. The mechanism which I have implemented, though, is a level of granularity above this. Instead of working with simple objects, agents using my framework are built up from reusable components.
Reference: [2] <author> Keith S. Decker. </author> <title> Task environment centered simulation. </title> <editor> In M. Prietula, K. Carley, and L. Gasser, editors, </editor> <title> Simulating Organizations: Computational Models of Institutions and Groups. </title> <publisher> AAAI Press/MIT Press, </publisher> <year> 1996. </year> <month> Forthcoming. </month>
Reference-contexts: It uses a PropertyChange event stream from State to watch for changes in the global TMS <ref> [2] </ref> task structure, which may or may not contain an execution schedule. If a schedule is found, it selects the first method from the list and sends it to the simulation controller to be executed.
Reference: [3] <author> Alden DeSoto. </author> <title> Using the beans development kit 1.0. </title> <note> http://www.javasoft.com, 1997. </note>
Reference-contexts: The framework which I have developed is written in Java [6], and builds upon Sun's Java Beans specification <ref> [4, 5, 3] </ref> by strengthening inter-component relationships and adding more control mechanisms. The Java Beans architecture was chosen as a starting point because of its clean yet powerful organization and integration mechanisms.
Reference: [4] <author> Graham Hamilton (Editor). </author> <title> Sun microsystems java beans api specification. </title> <note> http://java.sun.com/beans, 1997. </note>
Reference-contexts: The framework which I have developed is written in Java [6], and builds upon Sun's Java Beans specification <ref> [4, 5, 3] </ref> by strengthening inter-component relationships and adding more control mechanisms. The Java Beans architecture was chosen as a starting point because of its clean yet powerful organization and integration mechanisms.
Reference: [5] <author> Robert Englander. </author> <title> Developing Java Beans. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <year> 1997. </year>
Reference-contexts: The framework which I have developed is written in Java [6], and builds upon Sun's Java Beans specification <ref> [4, 5, 3] </ref> by strengthening inter-component relationships and adding more control mechanisms. The Java Beans architecture was chosen as a starting point because of its clean yet powerful organization and integration mechanisms.
Reference: [6] <author> David Flanagan. </author> <title> JAVA in a Nutshell. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <address> 2nd edition edition, </address> <year> 1997. </year>
Reference-contexts: Component technology is particularly applicable to experimental multi-agent systems because changes between agent variants can usually be isolated to certain functional areas; replaceable modular components can therefore provide an almost plug-and-play form of testbed. The framework which I have developed is written in Java <ref> [6] </ref>, and builds upon Sun's Java Beans specification [4, 5, 3] by strengthening inter-component relationships and adding more control mechanisms. The Java Beans architecture was chosen as a starting point because of its clean yet powerful organization and integration mechanisms.
Reference: [7] <author> Victor Lesser, Bryan Horling, Frank Klassner, Anita Raja, Thomas Wagner, and Shelley XQ. Zhang. </author> <title> BIG: A resource-bounded information gathering agent. </title> <booktitle> In Proceedings of the Fifteenth National Conference on Artificial Intelligence (AAAI-98), </booktitle> <month> July </month> <year> 1998. </year> <note> To appear. See also UMass CS Technical Reports 98-03 and 97-34. </note>
Reference-contexts: A recently emerging and exciting trend in the field of computing has been the combination and synthesis of existing technologies to solve difficult problems <ref> [7, 11] </ref>. On paper, this may not appear to be particularly hard, but in practice it may result in months of reimplementation because of incompatibilities between existing systems.
Reference: [8] <author> K. Sycara, K. Decker, and M. Williamson. </author> <title> Matchmaking and brokering. </title> <booktitle> In Proceedings of the Second International Conference on Multi-Agent Systems (ICMAS-96), </booktitle> <year> 1996. </year> <month> 15 </month>
Reference-contexts: Four identical agents were used to simulate an example of the multi-agent organization described by the Warren financial portfolio management system <ref> [8] </ref>. In our simulation, the initial behavior of each agent was governed by the subjective TMS task structures seeded to each agent (see section 5.6), which was used by the Design-to-Criteria scheduler to produce a sequence of actions aimed at satisfying a particular goal.
Reference: [9] <author> Regis Vincent, Bryan Horling, Tom Wagner, and Victor Lesser. </author> <title> Survivability simulator for multi-agent adaptive coordination. </title> <booktitle> In International Conference on Web-Based Modeling and Simulation, </booktitle> <address> San Diego, CA, 1998. </address> <publisher> SCS (eds). </publisher>
Reference-contexts: Future improvements and additions will be covered in the conclusion. 2 Motivation The motivation for the agent framework began with the creation of the Multi-Agent Survivability Simulator (Mass) <ref> [9] </ref>. Mass is a flexible execution environment which we designed to simulate the possible faulty or hostile conditions under which an agent might function.
Reference: [10] <author> Thomas Wagner, Alan Garvey, and Victor Lesser. </author> <title> Criteria-Directed Heuristic Task Scheduling. </title> <journal> International Journal of Approximate Reasoning, Special Issue on Scheduling, </journal> <note> 1998. To appear. Also available as UMASS CS TR-97-59. </note>
Reference-contexts: The Mass problem solving component, then, is responsible for receiving this task structure from the generator. Once the structure has been obtained, it is run through a design-to-criteria scheduling utility <ref> [10] </ref>, which attempts to produce a schedule satisfying the agent's execution criteria. The schedule is then incorporated into the task structure by the problem solver, and placed in State's property table.
Reference: [11] <author> Tom Wagner. </author> <title> Matchmaking: Jil meets tms. </title> <note> Version June, 13 1997. 16 </note>
Reference-contexts: A recently emerging and exciting trend in the field of computing has been the combination and synthesis of existing technologies to solve difficult problems <ref> [7, 11] </ref>. On paper, this may not appear to be particularly hard, but in practice it may result in months of reimplementation because of incompatibilities between existing systems.
References-found: 11

