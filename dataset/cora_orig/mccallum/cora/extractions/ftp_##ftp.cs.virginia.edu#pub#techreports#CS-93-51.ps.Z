URL: ftp://ftp.cs.virginia.edu/pub/techreports/CS-93-51.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: An Architecture-Independent Unified Approach to FPGA Routing  
Author: Michael J. Alexander and Gabriel Robins 
Address: Thornton Hall,  Charlottesville, VA 22903-2442  
Affiliation: Department of Computer Science,  University of Virginia,  
Abstract: Field-programmable gate arrays (FPGAs) are an inexpensive and flexible "low risk" design alternative to custom integrated circuits. While FPGA partitioning and technology mapping have been well-studied, FPGA routing has received much less attention. In this paper we propose a unified general framework for FPGA routing, which allows simultaneous optimization of multiple competing objectives under a smooth designer-controlled tradeoff. Our approach is based on a new and general multi-weighted graph formulation, enabling a good theoretical performance characterization, as well as an effective, practical implementation. Our router is architecture-independent, computationally efficient, and performs very well on industrial benchmarks. Finally, our multi-weighted graph formulation is quite general and is directly applicable to many other areas of combinatorial optimization.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. Barrera, J. Griffith, S. A. McKee, G. Robins, and T. Zhang, </author> <title> Toward a Steiner Engine: Enhanced Serial and Parallel Implementations of the Iterated 1-Steiner Algorithm, </title> <booktitle> in Proc. Great Lakes Symp. VLSI, </booktitle> <address> Kalamazoo, MI, </address> <month> March </month> <year> 1993, </year> <pages> pp. 90-94. </pages>
Reference-contexts: of known existing methods from the above two categories, for implementation purposes we chose two specific candidates, respectively: (a) for the geometry-based routing component, we selected the Iterated 1-Steiner routing method of [21], since it is known to have both excellent empirical performance [2] as well as an efficient implementation <ref> [1] </ref>; and (b) for the graph-based routing candidate, we chose to use the provably-good graph Steiner approximation scheme of [24], which can also be implemented efficiently [41]. Below we prove that our hybrid of these two methods inherits the best characteristics of its two component methods. <p> I1S always performs strictly better than 3 2 times optimal [32], and achieves almost 11% average improvement over MST cost. Efficient serial and parallel implementations of I1S were given in <ref> [1] </ref>, and it was shown in [2] that for typical nets, I1S has average performance of less than 0.25% from optimal, and produce optimal solutions up to 90% of the time. <p> We can speed up the Iterated 1-Steiner computation by efficiently adding an entire set of "independent" Steiner points in a single "batch" or "round" <ref> [1] </ref> [21] [20], as follows: given a pointset P in the Manhattan plane and a set of Steiner points S which was already added to P , two new candidate Steiner points x and y are independent with respect to each other only if: MST (P [ S; x) + MST
Reference: [2] <author> T. Barrera, J. Griffith, G. Robins, and T. Zhang, </author> <title> Narrowing the Gap: Near-Optimal Steiner Trees in Polynomial Time, </title> <booktitle> in Proc. IEEE Intl. ASIC Conf., </booktitle> <address> Rochester, NY, </address> <month> September </month> <year> 1993, </year> <pages> pp. 87-90. </pages>
Reference-contexts: our proposed framework can use any pair of known existing methods from the above two categories, for implementation purposes we chose two specific candidates, respectively: (a) for the geometry-based routing component, we selected the Iterated 1-Steiner routing method of [21], since it is known to have both excellent empirical performance <ref> [2] </ref> as well as an efficient implementation [1]; and (b) for the graph-based routing candidate, we chose to use the provably-good graph Steiner approximation scheme of [24], which can also be implemented efficiently [41]. <p> I1S always performs strictly better than 3 2 times optimal [32], and achieves almost 11% average improvement over MST cost. Efficient serial and parallel implementations of I1S were given in [1], and it was shown in <ref> [2] </ref> that for typical nets, I1S has average performance of less than 0.25% from optimal, and produce optimal solutions up to 90% of the time.
Reference: [3] <author> N. B. Bhat and D. D. Hill, </author> <title> Routable Technology Mapping for LUT FPGAs, </title> <booktitle> in Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <year> 1992, </year> <pages> pp. 95-98. </pages>
Reference-contexts: More recent work has addressed the issue of FPGA routability prediction during higher levels of the design cycle <ref> [3] </ref> [6] [35] [38]. Routability is the likelihood of a particular technology mapping and placement solution being feasible to route using the available interconnect resources. While technology mapping and routability have been studied extensively, less attention has been focused on the actual routing. <p> This is surprising, since researchers have already noted that feasibility in FPGA designs is constrained by routing resources more than by logic resources [38]. Moreover it was observed that FPGA performance is often limited by routing delays, rather than by logic block and gate delays <ref> [3] </ref>. Much of the research on FPGA routing has centered around the SEGA [28] detailed routing algorithm and its predecessor, CGE [4] [5]. Both of these methods are used to route symmetrical-array FPGAs, and allow critical nets to be given higher routing priority. <p> SEGA and CGE use a global router [33] which selects a sequence of channel edges for each connection, which are in turn used to assign edges to specific connections, giving higher priority to edges which least affect other connections. In the technology mapping research of <ref> [3] </ref>, Steiner routing is performed by a global router, with each net treated independently of preceding nets. Other research has adopted a more abstract model of FPGA routing connections to explore Steiner routing of FPGAs [29], or explored issues such as bend reduction in FPGA routing [39].
Reference: [4] <author> S. Brown, J. Rose, and Z. G. Vranesic, </author> <title> A Detailed Router for Field-Programmable Gate Arrays, </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 11 (1992), </volume> <pages> pp. 620-628. </pages>
Reference-contexts: Moreover it was observed that FPGA performance is often limited by routing delays, rather than by logic block and gate delays [3]. Much of the research on FPGA routing has centered around the SEGA [28] detailed routing algorithm and its predecessor, CGE <ref> [4] </ref> [5]. Both of these methods are used to route symmetrical-array FPGAs, and allow critical nets to be given higher routing priority. <p> First, some research adopts models which are too abstract and are thus not directly applicable to any existing FPGA parts [29]. Other works impose artificial global vs. local hierarchical routing dichotomies, resulting in very poor solutions even for 3-pin nets <ref> [4] </ref> [5] [28] [33]. Finally, some tools attempt to optimize a particular aspect of FPGA routing (e.g., bend minimization), but fail to unify this goal with other objectives, nor do they allow any tradeoff between competing objectives [39].
Reference: [5] <author> S. D. Brown, R. J. Francis, J. Rose, and Z. G. Vranesic, </author> <title> Field-Programmable Gate Arrays, </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1992. </year>
Reference-contexts: There are a number of commercially available FPGA technologies [37], but generally, an FPGA architecture consist of a symmetrical array of user configurable logic "blocks" or "cells" (each of which implements a portion of the design logic), and a set of interconnection resources used for routing <ref> [5] </ref>. <p> Moreover it was observed that FPGA performance is often limited by routing delays, rather than by logic block and gate delays [3]. Much of the research on FPGA routing has centered around the SEGA [28] detailed routing algorithm and its predecessor, CGE [4] <ref> [5] </ref>. Both of these methods are used to route symmetrical-array FPGAs, and allow critical nets to be given higher routing priority. <p> First, some research adopts models which are too abstract and are thus not directly applicable to any existing FPGA parts [29]. Other works impose artificial global vs. local hierarchical routing dichotomies, resulting in very poor solutions even for 3-pin nets [4] <ref> [5] </ref> [28] [33]. Finally, some tools attempt to optimize a particular aspect of FPGA routing (e.g., bend minimization), but fail to unify this goal with other objectives, nor do they allow any tradeoff between competing objectives [39]. <p> Section 7 establishes the efficacy of our implementation on industrial benchmark designs, and we conclude in Section 8 with future research directions. 2 A Typical FPGA Architecture A typical symmetrical-array FPGA <ref> [5] </ref> [42] consists of a rectangular array of logic blocks, separated by channels containing routing resources (i.e., channel edges, connection edges and switchboxes), as illustrated in Figure 1. <p> Each switchbox contains internal edges which can be programmed to connect channel edges on different sides of the switchbox, allowing routing paths to pass through the switchbox (either by going straight through, or by making a right-angle turn). Switchbox flexibility <ref> [5] </ref> is the fanout which the switchbox provides for each channel edge entering the switchbox. Note that in general, a switchbox allows interconnections from a given channel edge to only a subset of the channel edges on the other three sides [5], and this interconnection pattern need not be symmetric [42]. <p> Switchbox flexibility <ref> [5] </ref> is the fanout which the switchbox provides for each channel edge entering the switchbox. Note that in general, a switchbox allows interconnections from a given channel edge to only a subset of the channel edges on the other three sides [5], and this interconnection pattern need not be symmetric [42]. Connection edges are used to connect logic block pins to channel edges. Connection flexibility [5] is a measure of the number of channel edges to which a logic block pin can attach via connection edges. edges. <p> Note that in general, a switchbox allows interconnections from a given channel edge to only a subset of the channel edges on the other three sides <ref> [5] </ref>, and this interconnection pattern need not be symmetric [42]. Connection edges are used to connect logic block pins to channel edges. Connection flexibility [5] is a measure of the number of channel edges to which a logic block pin can attach via connection edges. edges. These edges are partitioned into groups, where a group is a set of edges of the same type which are related by physical proximity. <p> The code is available from the authors upon request. We have benchmarked our router on several industrial circuits, including the ones used in <ref> [5] </ref>. A common criteria 28 used to evaluate the quality of FPGA routing solutions is the maximum width of the channels (i.e., how many edges wide are they) required to successfully route all nets of a circuit [5]; this measure captures the amount of FPGA routing resources needed to route a <p> have benchmarked our router on several industrial circuits, including the ones used in <ref> [5] </ref>. A common criteria 28 used to evaluate the quality of FPGA routing solutions is the maximum width of the channels (i.e., how many edges wide are they) required to successfully route all nets of a circuit [5]; this measure captures the amount of FPGA routing resources needed to route a design. We have therefore compared the maximum channel width our router required to that required by CGE [5] Following the example of [5], we use a "connection flexibility" of 0.6 times the number of edges per channel <p> of the channels (i.e., how many edges wide are they) required to successfully route all nets of a circuit <ref> [5] </ref>; this measure captures the amount of FPGA routing resources needed to route a design. We have therefore compared the maximum channel width our router required to that required by CGE [5] Following the example of [5], we use a "connection flexibility" of 0.6 times the number of edges per channel (rounding this number to the nearest integer), and a switchbox flexibility of 6; these parameters are typical for current symmetrical-array FPGAs [42]. <p> many edges wide are they) required to successfully route all nets of a circuit <ref> [5] </ref>; this measure captures the amount of FPGA routing resources needed to route a design. We have therefore compared the maximum channel width our router required to that required by CGE [5] Following the example of [5], we use a "connection flexibility" of 0.6 times the number of edges per channel (rounding this number to the nearest integer), and a switchbox flexibility of 6; these parameters are typical for current symmetrical-array FPGAs [42]. <p> The switchbox interconnection options and connection-edge to logic block connections which we use are identical to those used by CGE <ref> [5] </ref>. Note that it is crucial to use identical FPGA interconnection specifications when comparing FPGA routers, since switchbox and connection flexibility dramatically affects routability [5]. We have tested out router on the five industrial benchmarks used in [5] (see Figure 19). <p> The switchbox interconnection options and connection-edge to logic block connections which we use are identical to those used by CGE <ref> [5] </ref>. Note that it is crucial to use identical FPGA interconnection specifications when comparing FPGA routers, since switchbox and connection flexibility dramatically affects routability [5]. We have tested out router on the five industrial benchmarks used in [5] (see Figure 19). Table 20 gives the comparison results of both CGE and our router for these benchmarks. <p> logic block connections which we use are identical to those used by CGE <ref> [5] </ref>. Note that it is crucial to use identical FPGA interconnection specifications when comparing FPGA routers, since switchbox and connection flexibility dramatically affects routability [5]. We have tested out router on the five industrial benchmarks used in [5] (see Figure 19). Table 20 gives the comparison results of both CGE and our router for these benchmarks. Note that in three of the five cases, our router is able to successfully route all nets using fewer edges per channel. <p> We have noted that our GB1S algorithm produces optimal routings for three-pin nets; Figure 22 shows a simple example of how our router finds the optimal solution for a three-pin net where others do not. Figure 22 (a) shows the routing produced by CGE <ref> [5] </ref> which uses nearly twice the number of resources as the optimal routing produced by our GB1S router, shown in (b). 8 Conclusion We proposed a unified general framework for FPGA routing, allowing the simultaneous optimization of multiple competing objectives under a smooth designer-controlled tradeoff.
Reference: [6] <author> P. K. Chan, M. D. F. Schlag, and J. Y. Zien, </author> <title> On Routability Prediction for Field-Programmable Gate Arrays, </title> <booktitle> in Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1993, </year> <pages> pp. 326-330. </pages>
Reference-contexts: More recent work has addressed the issue of FPGA routability prediction during higher levels of the design cycle [3] <ref> [6] </ref> [35] [38]. Routability is the likelihood of a particular technology mapping and placement solution being feasible to route using the available interconnect resources. While technology mapping and routability have been studied extensively, less attention has been focused on the actual routing.
Reference: [7] <author> K. C. Chen, J. Cong, Y. Ding, A. B. Kahng, and P. Trajmar, DAG-Map: </author> <title> Graph-Based FPGA Technology Mapping for Delay Optimization, </title> <booktitle> IEEE Design & Test of Computers, 9 (1992), </booktitle> <pages> pp. 7-20. </pages>
Reference-contexts: Partitioning and technology mapping in FPGAs has been extensively studied by e.g. <ref> [7] </ref> [10] [14] [23] [34], where a typical goal is to minimize the maximum input-to-output circuit depth (which reduces delay), while varying the total number of logic blocks used (which in turn affects placement and routing feasibility), or some tradeoff between these two goals.
Reference: [8] <author> J. P. Cohoon and D. S. Richards, </author> <title> Optimal Two-Terminal alpha-beta Wire Routing, INTEGRATION: </title> <journal> the VLSI Journal, </journal> <volume> 6 (1988), </volume> <pages> pp. 35-57. </pages>
Reference-contexts: Such a framework subsumes e.g., "alpha-beta" routing, which has been used for jog minimization in IC design <ref> [8] </ref> [16]. net is to be routed, nodes and edges representing the net pins and connection edges are added to the graph, as represented by the dotted lines in Figure 3 (b).
Reference: [9] <author> E. W. Dijkstra, </author> <title> A Note on Two Problems in Connection With Graphs, </title> <journal> Numerische Mathematik, </journal> <volume> 1 (1959), </volume> <pages> pp. 269-271. </pages>
Reference-contexts: Thus jGj = O (B S). During the execution of GI1S over an n-pin net, shortest path trees are computed from each of the net pins. Each shortest path computation can be performed in time linear in the size of the graph using, e.g., Dijkstra's algorithm <ref> [9] </ref>. This brings the total time used for this step to O (n jGj).
Reference: [10] <author> T. Gao, K. C. Chen, J. Cong, Y. Ding, and C. L. Liu, </author> <title> Placement and Placement Driven Technology Mapping for FPGA Synthesis, </title> <booktitle> in Proc. IEEE Intl. ASIC Conf., </booktitle> <address> Rochester, NY, </address> <month> Septem-ber </month> <year> 1993, </year> <pages> pp. 87-91. 32 </pages>
Reference-contexts: Partitioning and technology mapping in FPGAs has been extensively studied by e.g. [7] <ref> [10] </ref> [14] [23] [34], where a typical goal is to minimize the maximum input-to-output circuit depth (which reduces delay), while varying the total number of logic blocks used (which in turn affects placement and routing feasibility), or some tradeoff between these two goals.
Reference: [11] <author> M. Garey and D. S. Johnson, </author> <title> The Rectilinear Steiner Problem is NP-Complete, </title> <journal> SIAM J. Applied Math., </journal> <volume> 32 (1977), </volume> <pages> pp. 826-834. </pages>
Reference-contexts: However, a second major result establishes that despite this restriction on the solution space, the MRST problem remains NP-complete <ref> [11] </ref>, prompting a large number of heuristics, as surveyed in [19]. from the intersection of all the horizontal and vertical lines passing through all the points. In solving intractable problems, we often seek provably good heuristics having bounded worst-case error from optimal.
Reference: [12] <author> E. N. Gilbert and H. O. Pollak, </author> <title> Steiner Minimal Trees, </title> <journal> SIAM J. Applied Math., </journal> <volume> 16 (1968), </volume> <pages> pp. 1-29. </pages>
Reference-contexts: The cost of the MST over P [ S will decrease with each added point, and the construction terminates when there is no x with MST (P [ S; fxg) &gt; 0. Although a Steiner tree may contain at most n 2 Steiner points <ref> [12] </ref>, I1S may add more than n 2 Steiner points; therefore, at each step we eliminate any extraneous Steiner points having degree 2 or less in the MST. <p> Finally, since a Steiner tree over n points can have up to n 2 Steiner points <ref> [12] </ref>, the total time to route a single net is bounded above by O (n jGj [n 2 log n + jGj]). 15 The space used by the algorithm is dominated by storing the shortest path trees, one per net pin (and each Steiner node).
Reference: [13] <author> M. Hanan, </author> <title> On Steiner's Problem With Rectilinear Distance, </title> <journal> SIAM J. Applied Math., </journal> <volume> 14 (1966), </volume> <pages> pp. 255-265. </pages>
Reference-contexts: Research on the MRST problem has been guided by several fundamental results. First, Hanan <ref> [13] </ref> has shown that there always exists an MRST 9 with Steiner points chosen from the intersection of all the horizontal and vertical lines passing through all the points in P (see Figure 6); indeed this result generalizes to all higher dimensions [36]).
Reference: [14] <author> N. Hasan, G. Vijayan, and C. K. Wong, </author> <title> A Neighborhood Improvement Algorithm for Rectilinear Steiner Trees, </title> <booktitle> in Proc. IEEE Intl. Symp. Circuits and Systems, </booktitle> <address> New Orleans, LA, </address> <year> 1990. </year>
Reference-contexts: Partitioning and technology mapping in FPGAs has been extensively studied by e.g. [7] [10] <ref> [14] </ref> [23] [34], where a typical goal is to minimize the maximum input-to-output circuit depth (which reduces delay), while varying the total number of logic blocks used (which in turn affects placement and routing feasibility), or some tradeoff between these two goals. <p> This implies that any MST-based strategy which improves upon an initial MST topology will also enjoy a performance ratio of at most 3 2 , which has prompted a large number of Steiner tree heuristics that resemble classic MST construction methods <ref> [14] </ref> [15] [18] [26] [27], all producing Steiner trees with average cost 7% to 9% smaller than MST cost [31] [40]. Unfortunately, all MST-based MRST constructions were recently shown to have a worst-case performance ratio of exactly 3 2 [22].
Reference: [15] <author> J.-M. Ho, G. Vijayan, and C. K. Wong, </author> <title> New Algorithms for the Rectilinear Steiner Tree Problem, </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 9 (1990), </volume> <pages> pp. 185-193. </pages>
Reference-contexts: This implies that any MST-based strategy which improves upon an initial MST topology will also enjoy a performance ratio of at most 3 2 , which has prompted a large number of Steiner tree heuristics that resemble classic MST construction methods [14] <ref> [15] </ref> [18] [26] [27], all producing Steiner trees with average cost 7% to 9% smaller than MST cost [31] [40]. Unfortunately, all MST-based MRST constructions were recently shown to have a worst-case performance ratio of exactly 3 2 [22].
Reference: [16] <author> T. C. Hu and T. Shing, </author> <title> The ff-fi Routing, in VLSI Circuit Layout: Theory and Design, </title> <address> New York, 1985, </address> <publisher> IEEE Press, </publisher> <pages> pp. 139-143. </pages>
Reference-contexts: Such a framework subsumes e.g., "alpha-beta" routing, which has been used for jog minimization in IC design [8] <ref> [16] </ref>. net is to be routed, nodes and edges representing the net pins and connection edges are added to the graph, as represented by the dotted lines in Figure 3 (b).
Reference: [17] <author> F. K. Hwang, </author> <title> On Steiner Minimal Trees with Rectilinear Distance, </title> <journal> SIAM J. Applied Math., </journal> <volume> 30 (1976), </volume> <pages> pp. </pages> <month> 104-114. </month> <title> [18] , An O(n log n) Algorithm for Rectilinear Minimal Spanning Trees, </title> <journal> J. ACM, </journal> <volume> 26 (1979), </volume> <pages> pp. 177-182. </pages>
Reference-contexts: In solving intractable problems, we often seek provably good heuristics having bounded worst-case error from optimal. Thus, a third important result establishes that the rectilinear MST is a fairly good approximation to the MRST, with a worst-case performance ratio of MST=MRST 3 2 <ref> [17] </ref>.
Reference: [19] <author> F. K. Hwang, D. S. Richards, and P. Winter, </author> <title> The Steiner Tree Problem, </title> <publisher> North-Holland, </publisher> <year> 1992. </year>
Reference-contexts: However, a second major result establishes that despite this restriction on the solution space, the MRST problem remains NP-complete [11], prompting a large number of heuristics, as surveyed in <ref> [19] </ref>. from the intersection of all the horizontal and vertical lines passing through all the points. In solving intractable problems, we often seek provably good heuristics having bounded worst-case error from optimal.
Reference: [20] <author> A. B. Kahng and G. Robins, </author> <title> A New Family of Steiner Tree Heuristics With Good Performance: The Iterated 1-Steiner Approach, </title> <booktitle> in Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <address> Santa Clara, CA, </address> <month> November </month> <year> 1990, </year> <pages> pp. </pages> <month> 428-431. </month> <title> [21] , A New Class of Iterative Steiner Tree Heuristics With Good Performance, </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 11 (1992), </volume> <pages> pp. </pages> <month> 893-902. </month> <title> [22] , On Performance Bounds for a Class of Rectilinear Steiner Tree Heuristics in Arbitrary Dimension, </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 11 (1992), </volume> <pages> pp. 1462-1465. </pages>
Reference-contexts: Unfortunately, all MST-based MRST constructions were recently shown to have a worst-case performance ratio of exactly 3 2 [22]. This negative result has motivated research into alternate schemes for MRST approximation, with the best performing among these being the Iterated 1-Steiner (I1S) algorithm [21] <ref> [20] </ref>. I1S always performs strictly better than 3 2 times optimal [32], and achieves almost 11% average improvement over MST cost. <p> We can speed up the Iterated 1-Steiner computation by efficiently adding an entire set of "independent" Steiner points in a single "batch" or "round" [1] [21] <ref> [20] </ref>, as follows: given a pointset P in the Manhattan plane and a set of Steiner points S which was already added to P , two new candidate Steiner points x and y are independent with respect to each other only if: MST (P [ S; x) + MST (P [
Reference: [23] <author> K. Karplus, Xmap: </author> <title> a Technology Mapper for Table-lookup Field-Programmable Gate Arrays, </title> <booktitle> in Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1991, </year> <pages> pp. 240-243. </pages>
Reference-contexts: Partitioning and technology mapping in FPGAs has been extensively studied by e.g. [7] [10] [14] <ref> [23] </ref> [34], where a typical goal is to minimize the maximum input-to-output circuit depth (which reduces delay), while varying the total number of logic blocks used (which in turn affects placement and routing feasibility), or some tradeoff between these two goals.
Reference: [24] <author> L. Kou, G. Markowsky, and L. Berman, </author> <title> A Fast Algorithm for Steiner Trees, </title> <journal> Acta Informat-ica, </journal> <volume> 15 (1981), </volume> <pages> pp. 141-145. </pages>
Reference-contexts: for the geometry-based routing component, we selected the Iterated 1-Steiner routing method of [21], since it is known to have both excellent empirical performance [2] as well as an efficient implementation [1]; and (b) for the graph-based routing candidate, we chose to use the provably-good graph Steiner approximation scheme of <ref> [24] </ref>, which can also be implemented efficiently [41]. Below we prove that our hybrid of these two methods inherits the best characteristics of its two component methods. <p> In particular, we would like to hybridize the geometrical Iterated 1-Steiner routing method of [21], with the graph Steiner approximation scheme of <ref> [24] </ref>, referred to as the KMB algorithm. Therefore we first review each of these methods in turn. 5.1 Overview of the Iterated 1-Steiner Method We begin with some terminology. <p> As discussed above, in solving intractable problems, we ideally seek provably-good heuristics having bounded worst-case error from optimal. Indeed the algorithm of Kou, Markowsky and Berman <ref> [24] </ref> solves the GSMT problem in polynomial time, and is guaranteed to yield solutions never more than 2 (1 1 L ) times optimal, where L is the minimum number of leaves in of any optimal solution. <p> The resulting tree is an approximation to the GSMT that has cost no worse than 2 (1 1 L ) times optimal, where L is the minimum number of leaves in any optimal Steiner tree <ref> [24] </ref>. We denote the resulting tree as KMB and the cost of this tree as KMB. A formal description of the KMB method is given in Figure 10. <p> This means that the final overall tree cost can not exceed that of the initial KMB tree, which is known to be no worse than 2 (1 1 L ) times optimal, where L is the minimum number of leaves in any optimal Steiner tree <ref> [24] </ref>.
Reference: [25] <author> J. W. Lavinus and J. P. Cohoon, </author> <title> Routing a Multi-Terminal Critical Net: Steiner Tree Construction in the Presence of Obstacles, </title> <type> Tech. Rep. </type> <institution> CS-93-19, Department of Computer Science, University of Virginia, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: This means that the final overall tree cost can not exceed that of the initial KMB tree, which is known to be no worse than 2 (1 1 L ) times optimal, where L is the minimum number of leaves in any optimal Steiner tree [24]. Note that <ref> [25] </ref> have applied the Iterated 1-Steiner method to "escape graphs" in order to perform routing in the presence of obstacles; they also show a general performance bound of two times optimal, and note that 1-Steiner performs optimally for 3-pin nets in a graph. 5.4 Time and Space Complexity We can upper-bound <p> is not; for example, we will show a tighter upper bound of MST ( b G ( ~ d)) 3 2 i=1 d i MST (G i ) for metrical graphs over three nodes, which is of significance since most nets in typical VLSI designs contain 3 or less pins <ref> [25] </ref>. <p> Since many nets in VLSI design contain three pins or less <ref> [25] </ref>, we now derive a tighter upper bound for three pin nets where metricity holds. But first, we note the following Lemma: Lemma 6.4 If y z, then y y+z 2 .
Reference: [26] <author> J. H. Lee, N. K. Bose, and F. K. Hwang, </author> <title> Use of Steiner's Problem in Sub-Optimal Routing in Rectilinear Metric, </title> <journal> IEEE Trans. Circuits and Systems, </journal> <volume> 23 (1976), </volume> <pages> pp. 470-476. </pages>
Reference-contexts: This implies that any MST-based strategy which improves upon an initial MST topology will also enjoy a performance ratio of at most 3 2 , which has prompted a large number of Steiner tree heuristics that resemble classic MST construction methods [14] [15] [18] <ref> [26] </ref> [27], all producing Steiner trees with average cost 7% to 9% smaller than MST cost [31] [40]. Unfortunately, all MST-based MRST constructions were recently shown to have a worst-case performance ratio of exactly 3 2 [22].
Reference: [27] <author> K. W. Lee and C. Sechen, </author> <title> A New Global Router for Row-Based Layout, </title> <booktitle> in Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <address> Santa Clara, CA, </address> <month> November </month> <year> 1990, </year> <pages> pp. 180-183. </pages>
Reference-contexts: This implies that any MST-based strategy which improves upon an initial MST topology will also enjoy a performance ratio of at most 3 2 , which has prompted a large number of Steiner tree heuristics that resemble classic MST construction methods [14] [15] [18] [26] <ref> [27] </ref>, all producing Steiner trees with average cost 7% to 9% smaller than MST cost [31] [40]. Unfortunately, all MST-based MRST constructions were recently shown to have a worst-case performance ratio of exactly 3 2 [22].
Reference: [28] <author> G. G. Lemieux and S. D. Brown, </author> <title> A Detailed Routing Algorithm for Allocating Wire Segments in Field-Programmable Gate Arrays, </title> <booktitle> in Proc. ACM/SIGDA Physical Design Workshop, </booktitle> <address> Lake Arrowhead, CA, </address> <month> April </month> <year> 1993. </year> <month> 33 </month>
Reference-contexts: Moreover it was observed that FPGA performance is often limited by routing delays, rather than by logic block and gate delays [3]. Much of the research on FPGA routing has centered around the SEGA <ref> [28] </ref> detailed routing algorithm and its predecessor, CGE [4] [5]. Both of these methods are used to route symmetrical-array FPGAs, and allow critical nets to be given higher routing priority. <p> First, some research adopts models which are too abstract and are thus not directly applicable to any existing FPGA parts [29]. Other works impose artificial global vs. local hierarchical routing dichotomies, resulting in very poor solutions even for 3-pin nets [4] [5] <ref> [28] </ref> [33]. Finally, some tools attempt to optimize a particular aspect of FPGA routing (e.g., bend minimization), but fail to unify this goal with other objectives, nor do they allow any tradeoff between competing objectives [39].
Reference: [29] <author> F. D. Lewis and W. C. Pong, </author> <title> A Negative Reinforcement Method of PGA Routing, </title> <booktitle> in Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1993, </year> <pages> pp. 601-605. </pages>
Reference-contexts: In the technology mapping research of [3], Steiner routing is performed by a global router, with each net treated independently of preceding nets. Other research has adopted a more abstract model of FPGA routing connections to explore Steiner routing of FPGAs <ref> [29] </ref>, or explored issues such as bend reduction in FPGA routing [39]. We found that previous works on FPGA routing is lacking for several reasons. First, some research adopts models which are too abstract and are thus not directly applicable to any existing FPGA parts [29]. <p> explore Steiner routing of FPGAs <ref> [29] </ref>, or explored issues such as bend reduction in FPGA routing [39]. We found that previous works on FPGA routing is lacking for several reasons. First, some research adopts models which are too abstract and are thus not directly applicable to any existing FPGA parts [29]. Other works impose artificial global vs. local hierarchical routing dichotomies, resulting in very poor solutions even for 3-pin nets [4] [5] [28] [33].
Reference: [30] <author> A. Prim, </author> <title> Shortest Connecting Networks and Some Generalizations, </title> <institution> Bell Syst. Tech J., </institution> <month> 36 </month> <year> (1957), </year> <pages> pp. 1389-1401. </pages>
Reference-contexts: To compute the KMB savings of one Steiner candidate with respect to an n-pin net, we first form the complete graph over the n pins, with edge weights being shortest path lengths in the graph; then we can invoke any standard MST algorithm (e.g., Prim's algorithm <ref> [30] </ref>) which runs within time O (n 2 log n) or less. Expanding the resulting MST edges back into their original paths can take up to O (jGj) time.
Reference: [31] <author> D. Richards, </author> <title> Fast Heuristic Algorithms for Rectilinear Steiner Trees, </title> <journal> Algorithmica, </journal> <volume> 4 (1989), </volume> <pages> pp. 191-207. </pages>
Reference-contexts: initial MST topology will also enjoy a performance ratio of at most 3 2 , which has prompted a large number of Steiner tree heuristics that resemble classic MST construction methods [14] [15] [18] [26] [27], all producing Steiner trees with average cost 7% to 9% smaller than MST cost <ref> [31] </ref> [40]. Unfortunately, all MST-based MRST constructions were recently shown to have a worst-case performance ratio of exactly 3 2 [22]. This negative result has motivated research into alternate schemes for MRST approximation, with the best performing among these being the Iterated 1-Steiner (I1S) algorithm [21] [20].
Reference: [32] <author> G. Robins, </author> <title> On Optimal Interconnections, </title> <type> Ph.D. Dissertation, </type> <institution> CSD-TR-920024, Department of Computer Science, UCLA, </institution> <year> 1992. </year>
Reference-contexts: This negative result has motivated research into alternate schemes for MRST approximation, with the best performing among these being the Iterated 1-Steiner (I1S) algorithm [21] [20]. I1S always performs strictly better than 3 2 times optimal <ref> [32] </ref>, and achieves almost 11% average improvement over MST cost.
Reference: [33] <author> J. Rose, </author> <title> Parallel Global Routing for Standard Cells, </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 9 (1990), </volume> <pages> pp. 1085-1095. </pages>
Reference-contexts: Much of the research on FPGA routing has centered around the SEGA [28] detailed routing algorithm and its predecessor, CGE [4] [5]. Both of these methods are used to route symmetrical-array FPGAs, and allow critical nets to be given higher routing priority. SEGA and CGE use a global router <ref> [33] </ref> which selects a sequence of channel edges for each connection, which are in turn used to assign edges to specific connections, giving higher priority to edges which least affect other connections. <p> First, some research adopts models which are too abstract and are thus not directly applicable to any existing FPGA parts [29]. Other works impose artificial global vs. local hierarchical routing dichotomies, resulting in very poor solutions even for 3-pin nets [4] [5] [28] <ref> [33] </ref>. Finally, some tools attempt to optimize a particular aspect of FPGA routing (e.g., bend minimization), but fail to unify this goal with other objectives, nor do they allow any tradeoff between competing objectives [39].
Reference: [34] <author> K. Roy, B. Guan, and C. Sechen, </author> <title> FPGA MCM Partitioning and Placement, </title> <booktitle> in Proc. ACM/SIGDA Physical Design Workshop, </booktitle> <address> Lake Arrowhead, CA, </address> <month> April </month> <year> 1993, </year> <pages> pp. 211-212. </pages>
Reference-contexts: Partitioning and technology mapping in FPGAs has been extensively studied by e.g. [7] [10] [14] [23] <ref> [34] </ref>, where a typical goal is to minimize the maximum input-to-output circuit depth (which reduces delay), while varying the total number of logic blocks used (which in turn affects placement and routing feasibility), or some tradeoff between these two goals.
Reference: [35] <author> M. Schlag, J. Kong, and P. K. Chan, </author> <title> Routability-Driven Technology Mapping for LookUp Table-Based FPGAs, </title> <booktitle> in Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <year> 1992, </year> <pages> pp. 86-90. </pages>
Reference-contexts: For example, the Rmap algorithm <ref> [35] </ref> allows fl Corresponding author is Professor Gabriel Robins, Department of Computer Science, Thornton Hall, University of Virginia, Charlottesville, VA 22903-2442, Email: robins@cs.virginia.edu, phone: (804) 982-2207, FAX: (804) 982-2214. 1 the user to specify parameters that balance logic block utilization with the goal of producing routable designs during technology mapping; this <p> More recent work has addressed the issue of FPGA routability prediction during higher levels of the design cycle [3] [6] <ref> [35] </ref> [38]. Routability is the likelihood of a particular technology mapping and placement solution being feasible to route using the available interconnect resources. While technology mapping and routability have been studied extensively, less attention has been focused on the actual routing.
Reference: [36] <author> T. L. Snyder, </author> <title> On the Exact Location of Steiner Points in General Dimension, </title> <journal> SIAM J. Comput., </journal> <volume> 21 (1992), </volume> <pages> pp. 163-180. </pages>
Reference-contexts: First, Hanan [13] has shown that there always exists an MRST 9 with Steiner points chosen from the intersection of all the horizontal and vertical lines passing through all the points in P (see Figure 6); indeed this result generalizes to all higher dimensions <ref> [36] </ref>). However, a second major result establishes that despite this restriction on the solution space, the MRST problem remains NP-complete [11], prompting a large number of heuristics, as surveyed in [19]. from the intersection of all the horizontal and vertical lines passing through all the points.
Reference: [37] <author> S. Trimberger, </author> <title> Field-Programmable Gate Arrays, </title> <booktitle> IEEE Design & Test of Computers, 9 (1992), </booktitle> <pages> pp. 3-5. </pages>
Reference-contexts: 1 Introduction Field-programmable gate arrays (FPGAs) are an inexpensive and flexible design alternative to custom integrated circuits. FPGAs are reusable high density ASICs that can be easily (re)configured by the user [42], which has made them a popular "low risk" way to implement digital designs <ref> [37] </ref>. There are a number of commercially available FPGA technologies [37], but generally, an FPGA architecture consist of a symmetrical array of user configurable logic "blocks" or "cells" (each of which implements a portion of the design logic), and a set of interconnection resources used for routing [5]. <p> FPGAs are reusable high density ASICs that can be easily (re)configured by the user [42], which has made them a popular "low risk" way to implement digital designs <ref> [37] </ref>. There are a number of commercially available FPGA technologies [37], but generally, an FPGA architecture consist of a symmetrical array of user configurable logic "blocks" or "cells" (each of which implements a portion of the design logic), and a set of interconnection resources used for routing [5].
Reference: [38] <author> S. Trimberger and M. R. Chene, </author> <title> Placement-Based Partitioning for Lookup-Table-Based FP-GAs, </title> <booktitle> in Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <year> 1992, </year> <pages> pp. 91-94. </pages>
Reference-contexts: More recent work has addressed the issue of FPGA routability prediction during higher levels of the design cycle [3] [6] [35] <ref> [38] </ref>. Routability is the likelihood of a particular technology mapping and placement solution being feasible to route using the available interconnect resources. While technology mapping and routability have been studied extensively, less attention has been focused on the actual routing. <p> While technology mapping and routability have been studied extensively, less attention has been focused on the actual routing. This is surprising, since researchers have already noted that feasibility in FPGA designs is constrained by routing resources more than by logic resources <ref> [38] </ref>. Moreover it was observed that FPGA performance is often limited by routing delays, rather than by logic block and gate delays [3]. Much of the research on FPGA routing has centered around the SEGA [28] detailed routing algorithm and its predecessor, CGE [4] [5].
Reference: [39] <author> B. Tseng, J. Rose, and S. Brown, </author> <title> Improving FPGA Routing Architectures Using Architecture and CAD Interactions, </title> <booktitle> in Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <year> 1992, </year> <pages> pp. 99-104. </pages>
Reference-contexts: Other research has adopted a more abstract model of FPGA routing connections to explore Steiner routing of FPGAs [29], or explored issues such as bend reduction in FPGA routing <ref> [39] </ref>. We found that previous works on FPGA routing is lacking for several reasons. First, some research adopts models which are too abstract and are thus not directly applicable to any existing FPGA parts [29]. <p> Finally, some tools attempt to optimize a particular aspect of FPGA routing (e.g., bend minimization), but fail to unify this goal with other objectives, nor do they allow any tradeoff between competing objectives <ref> [39] </ref>. We propose the first unified general framework for FPGA routing, where multiple competing objectives can be optimized simultaneously under a smooth designer-controlled tradeoff. Our approach is based on a new and general multi-weighted graph formulation, and has the following advantages over previous work.
Reference: [40] <author> P. Winter, </author> <title> Steiner Problem in Networks: A Survey, Networks, </title> <booktitle> 17 (1987), </booktitle> <pages> pp. 129-167. </pages>
Reference-contexts: MST topology will also enjoy a performance ratio of at most 3 2 , which has prompted a large number of Steiner tree heuristics that resemble classic MST construction methods [14] [15] [18] [26] [27], all producing Steiner trees with average cost 7% to 9% smaller than MST cost [31] <ref> [40] </ref>. Unfortunately, all MST-based MRST constructions were recently shown to have a worst-case performance ratio of exactly 3 2 [22]. This negative result has motivated research into alternate schemes for MRST approximation, with the best performing among these being the Iterated 1-Steiner (I1S) algorithm [21] [20].
Reference: [41] <author> Y. F. Wu, P. Widmayer, and C. K. Wong, </author> <title> A Faster Approximation Algorithm for the Steiner Problem in Graphs, </title> <journal> Acta Informatica, </journal> <volume> 23 (1986), </volume> <pages> pp. 223-229. </pages>
Reference-contexts: the Iterated 1-Steiner routing method of [21], since it is known to have both excellent empirical performance [2] as well as an efficient implementation [1]; and (b) for the graph-based routing candidate, we chose to use the provably-good graph Steiner approximation scheme of [24], which can also be implemented efficiently <ref> [41] </ref>. Below we prove that our hybrid of these two methods inherits the best characteristics of its two component methods. <p> Therefore, we prefer to use the KMB method because of its efficiency and ease of implementation <ref> [41] </ref>. 5.3 A New Hybrid FPGA Routing Algorithm Our approach to FPGA routing is based on combining the geometric I1S heuristic with the KMB graph algorithm.
Reference: [42] <author> Xilinx, </author> <title> The Programmable Gate Array Data Book, </title> <publisher> Xilinx, Inc., </publisher> <address> San Jose, California, </address> <year> 1991. </year>
Reference-contexts: 1 Introduction Field-programmable gate arrays (FPGAs) are an inexpensive and flexible design alternative to custom integrated circuits. FPGAs are reusable high density ASICs that can be easily (re)configured by the user <ref> [42] </ref>, which has made them a popular "low risk" way to implement digital designs [37]. <p> Section 7 establishes the efficacy of our implementation on industrial benchmark designs, and we conclude in Section 8 with future research directions. 2 A Typical FPGA Architecture A typical symmetrical-array FPGA [5] <ref> [42] </ref> consists of a rectangular array of logic blocks, separated by channels containing routing resources (i.e., channel edges, connection edges and switchboxes), as illustrated in Figure 1. <p> Note that in general, a switchbox allows interconnections from a given channel edge to only a subset of the channel edges on the other three sides [5], and this interconnection pattern need not be symmetric <ref> [42] </ref>. Connection edges are used to connect logic block pins to channel edges. Connection flexibility [5] is a measure of the number of channel edges to which a logic block pin can attach via connection edges. edges. <p> width our router required to that required by CGE [5] Following the example of [5], we use a "connection flexibility" of 0.6 times the number of edges per channel (rounding this number to the nearest integer), and a switchbox flexibility of 6; these parameters are typical for current symmetrical-array FPGAs <ref> [42] </ref>. The switchbox interconnection options and connection-edge to logic block connections which we use are identical to those used by CGE [5]. Note that it is crucial to use identical FPGA interconnection specifications when comparing FPGA routers, since switchbox and connection flexibility dramatically affects routability [5]. <p> This indicates that our router is more thrifty in its utilization of the available resources than other routers, and can produce feasible routings where others cannot. FPGAs are available in several standard sizes, each with a fixed number of edges per channel <ref> [42] </ref>; clearly being able to successfully route system designs using fewer resources will allow smaller (and cheaper) standard-sized parts to be used, or may allow a system designs to be implemented using fewer fixed-size FPGAs when the design cannot fit on a single FPGA chip.
Reference: [43] <author> A. Z. Zelikovsky, </author> <title> The 11/6 Approximation Algorithm for the Steiner Problem on Networks, </title> <note> Information and Computation (to appear), (1992). 34 </note>
Reference-contexts: For example, the Steiner heuristic of <ref> [43] </ref> has a worst-case performance ratio of 11 6 ; however, the time complexity of this method, even though it is within polynomial time, is still rather excessive in practice.
References-found: 40

