URL: http://www.cs.ucsb.edu/TRs/techreports/TRCS98-11.ps
Refering-URL: http://www.cs.ucsb.edu/TRs/
Root-URL: http://www.cs.ucsb.edu
Email: mranga@snad.ncsl.nist.gov, andrey@snad.ncsl.nist.gov, acha@cs.ucsb.edu, schaal@snad.ncsl.nist.gov  
Title: Mobile Streams  
Author: M.Ranganathan, Laurent Andrey, Anurag Acharya, Virginie Schaal 
Address: 820 W. Diamond Ave  Gaithersburg, MD 20899, U.S.A. Santa-Barbara, CA 93106, U.S.A  
Affiliation: National Inst of Standards and Technology Department of Computer Science  University of California  
Abstract: A large class of distributed testing, control and collaborative applications are reactive or event driven in nature. Such applications can be structured as a set of handlers that react to events and that in turn can trigger other events. We have developed an application building toolkit that facilitates development of such applications. Our system is based on the concept of Mobile Streams. Applications developed in our system are dynamically extensible and reconfigurable and our system provides the application designer a means to control how the system can be extended and reconfigured. We describe our system model and implementation and compare our design to the design of other similar systems. 
Abstract-found: 1
Intro-found: 1
Reference: [ARS96] <author> A. Acharya, M.Ranganathan and Joel Saltz, </author> <title> Sumatra A language for Resource-aware mobile programs, in Mobile Object Systems, </title> <editor> J. Vitek and C.Tschudin (eds), </editor> <publisher> Springer Verlag Lecture Notes in Computer Science. </publisher>
Reference: [Ca95] <author> L. Cardelli, </author> <title> A Language with Distributed Scope, </title> <booktitle> proc 22 nd ACM SIGPLAN-SIGACT Symposium on the principles of Programming Languages, </booktitle> <month> (Jan </month> <year> 1995) </year>
Reference-contexts: Our work is also related to several other systems that offer mobility as a feature such as TACOMA [JVS95], Voyager 5 [OSVoy] , Aglets [V97] , Odyssey 6 [GMOd] ARA [P98] and MOLE [SBH96] and to earlier systems such as such as Emerald [JLHB88] and Obliq <ref> [Ca95] </ref>. Our main innovations in this work are resource control mechanisms and separation of naming and location from functionality features that we believe eases the task of building distributed systems. The other significant differences lie in the mobility model, the Agent naming scheme employed and the method of Inter-agent communication.
Reference: [Cr95] <author> C. Crowley, Tk-Replay: </author> <title> Record and Replay in Tk, </title> <booktitle> USENIX Third Annual Tcl/Tk Workshop, </booktitle> <year> 1995. </year>
Reference-contexts: The application may be sensitive to the order of input actions and hence, the input events must be replayed in the same order on each users copy of the application. Our system works by rebinding each Tk widget. The rebinding code (using the approach as taken by Tk Replay <ref> [Cr95] </ref>) visits all the widgets in the widget hierarchy and finds the tags bound to it. Then it finds each event that is bound to the tag and rebinds it. <p> Acknowledgements This work was supported by DARPA funding under the Intelligent Collaboration and Visualization (IC&V) project. We are indebted to Charles Crowley for making Tk Replay <ref> [Cr95] </ref> freely available, to Don Libes for making the Tcl Debugger [L93] freely available and to Silvio Tribel for making Tk Draw [T98] freely available. AGNI was developed at the National Inst of Standards and Technology - Information Technology Laboratory.
Reference: [G96] <author> R.S. </author> <title> Gray Agent Tcl: A Flexible and Secure Mobile-Agent System, </title> <booktitle> Proceedings of the Fourth Annual Tcl/Tk Workshop (1996). </booktitle>
Reference-contexts: AGNI supports mobility and dynamic reconfiguration MStreams may be moved around during computation and new Handlers may be attached to and detached from MStreams dynamically. In contrast to Agent Tcl <ref> [G96] </ref> and ARA [P98] which support migration at arbitrary points in the programs execution and therefore necessitate changes in the Tcl interpreter, all state changes such as MStream movements and new Handler registrations are deferred they are effected only at handler boundaries. <p> The other significant differences lie in the mobility model, the Agent naming scheme employed and the method of Inter-agent communication. Unlike some other systems <ref> [RASS97, G96, P98] </ref> that offer a thread-migration model of mobility, our system more closely resembles Aglets, Voyager, TACOMA, and Odyssey. In this section, we compare our system to three Tcl-based agent systems Agent Tcl, ARA and TACOMA and three JAVA-based systems Aglets , Odyssey and MOLE.
Reference: [GMOd] <institution> General Magic Corp., </institution> <note> http://www.genmagic.com/agents Odyssey web-page. </note>
Reference-contexts: Our work is also related to several other systems that offer mobility as a feature such as TACOMA [JVS95], Voyager 5 [OSVoy] , Aglets [V97] , Odyssey 6 <ref> [GMOd] </ref> ARA [P98] and MOLE [SBH96] and to earlier systems such as such as Emerald [JLHB88] and Obliq [Ca95]. Our main innovations in this work are resource control mechanisms and separation of naming and location from functionality features that we believe eases the task of building distributed systems.
Reference: [JVS95] <author> D.Johansen, R. van-Renesse, F.B.Schnieder, </author> <title> An introduction to the TACOMA Distributed System, </title> <type> Technical Report 95-23, </type> <institution> Dept of Computer Science, University of Tromso, Norway, </institution> <year> 1995. </year>
Reference-contexts: The design presented in this paper has been influenced mainly by our previous experience with designing and building the Sumatra system [RASS97]. Our work is also related to several other systems that offer mobility as a feature such as TACOMA <ref> [JVS95] </ref>, Voyager 5 [OSVoy] , Aglets [V97] , Odyssey 6 [GMOd] ARA [P98] and MOLE [SBH96] and to earlier systems such as such as Emerald [JLHB88] and Obliq [Ca95].
Reference: [JLHB88] <author> E. Jul, H. Levy, N. Hutchinson and A. Black, </author> <title> Fine-grained mobility in the Emerald System, </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol 6, </volume> <pages> N2, </pages> <month> Feb </month> <year> (1988). </year>
Reference-contexts: Our work is also related to several other systems that offer mobility as a feature such as TACOMA [JVS95], Voyager 5 [OSVoy] , Aglets [V97] , Odyssey 6 [GMOd] ARA [P98] and MOLE [SBH96] and to earlier systems such as such as Emerald <ref> [JLHB88] </ref> and Obliq [Ca95]. Our main innovations in this work are resource control mechanisms and separation of naming and location from functionality features that we believe eases the task of building distributed systems.
Reference: [JJSLBV97] <author> D. Johansen, K Jacobsen, N.P. Sudmann, K.J. Lauvset, K.P. Birman and W. Vogels, </author> <title> Using Software Design Patterns to build Distributed Environmental Monitoring Applications, </title> <institution> Cornell University, Department of Computer Science, TR97-1655, </institution> <month> Dec </month> <year> 1997, </year> <note> http://cs-tr.cs.cornell.edu/TR/CORNELLCS:TR97-1655 </note>
Reference: [L93] <author> D. Libes, </author> <title> A debugger for Tcl Tcl/Tk workshop, </title> <year> 1993. </year>
Reference-contexts: In our system, stdin and stdout are directed to the debugger console via MStreams as shown in Figure 9 below. The debugger itself was constructed using an almost unmodified version of a freely available Tcl debugger <ref> [L93] </ref>. 5. The Implementation of AGNI Each workstation that wishes to participate in the distributed system runs a copy of an Agent Daemon. Each Agent Daemon has a unique identifier. <p> Acknowledgements This work was supported by DARPA funding under the Intelligent Collaboration and Visualization (IC&V) project. We are indebted to Charles Crowley for making Tk Replay [Cr95] freely available, to Don Libes for making the Tcl Debugger <ref> [L93] </ref> freely available and to Silvio Tribel for making Tk Draw [T98] freely available. AGNI was developed at the National Inst of Standards and Technology - Information Technology Laboratory.
Reference: [RAS98] <author> M. Ranganathan, Anurag Acharya and Joel Saltz, </author> <title> Adaptive Data Combination over Wide-area netwoks, </title> <journal> International Conference On Distributed Computing Systems (ICDCS), </journal> <note> 1998 (To appear). </note>
Reference-contexts: An event-driven application is driven by asynchronous inputs that cause event-handlers to be invoked. A large class of distributed collaborative, testing, monitoring and control applications fit this paradigm - for example, conferencing and conference control applications, distributed control and testing applications [WM91], data combination <ref> [RAS98] </ref> and many others. In each case the notion of an event varies. In a collaborative system, events are user inputs; in a distributed monitoring and control system, events are changes in transducer inputs; in a distributed testing scenario, events are test outputs, timer alarms and so on.
Reference: [RASS97] <author> M. Ranganathan, Anurag Acharya, Shamik D.Sharma and Joel Saltz, </author> <title> Network-aware Mobile Programs, </title> <booktitle> USENIX 97. </booktitle>
Reference-contexts: Meta does not provide mobility and reconfiguration as our system does. The design presented in this paper has been influenced mainly by our previous experience with designing and building the Sumatra system <ref> [RASS97] </ref>. Our work is also related to several other systems that offer mobility as a feature such as TACOMA [JVS95], Voyager 5 [OSVoy] , Aglets [V97] , Odyssey 6 [GMOd] ARA [P98] and MOLE [SBH96] and to earlier systems such as such as Emerald [JLHB88] and Obliq [Ca95]. <p> The other significant differences lie in the mobility model, the Agent naming scheme employed and the method of Inter-agent communication. Unlike some other systems <ref> [RASS97, G96, P98] </ref> that offer a thread-migration model of mobility, our system more closely resembles Aglets, Voyager, TACOMA, and Odyssey. In this section, we compare our system to three Tcl-based agent systems Agent Tcl, ARA and TACOMA and three JAVA-based systems Aglets , Odyssey and MOLE.
Reference: [OSVoy] <institution> Voyager White Paper, </institution> <note> http://www.objectspace.com/voyager </note>
Reference-contexts: The design presented in this paper has been influenced mainly by our previous experience with designing and building the Sumatra system [RASS97]. Our work is also related to several other systems that offer mobility as a feature such as TACOMA [JVS95], Voyager 5 <ref> [OSVoy] </ref> , Aglets [V97] , Odyssey 6 [GMOd] ARA [P98] and MOLE [SBH96] and to earlier systems such as such as Emerald [JLHB88] and Obliq [Ca95]. <p> The Handler boundary is a motion-cum-consistency point. This could be a disadvantage if consistency entails heavy operations such as cache flushes or disk reads. The applications we have considered so far have not needed an on_move handler and we may add one if the need arises. Voyager <ref> [OSVoy] </ref> is a JAVA-based mobile agent system that resembles our system in some respects. Our model of a Stream with multiple Agents attached to the Stream is similar to Voyagers subspaces model. Voyager offers a federated directory service that is similar in function to AGNIs name resolution.
Reference: [P98] <author> H. Peine, </author> <title> Agents for Remote Access in Mobile Agents by W.R.Cockayne and Michael Zyada, </title> <publisher> Manning Publishers, </publisher> <address> ISBN 1-884777-36-8, </address> <year> (1998). </year>
Reference-contexts: AGNI supports mobility and dynamic reconfiguration MStreams may be moved around during computation and new Handlers may be attached to and detached from MStreams dynamically. In contrast to Agent Tcl [G96] and ARA <ref> [P98] </ref> which support migration at arbitrary points in the programs execution and therefore necessitate changes in the Tcl interpreter, all state changes such as MStream movements and new Handler registrations are deferred they are effected only at handler boundaries. <p> Our work is also related to several other systems that offer mobility as a feature such as TACOMA [JVS95], Voyager 5 [OSVoy] , Aglets [V97] , Odyssey 6 [GMOd] ARA <ref> [P98] </ref> and MOLE [SBH96] and to earlier systems such as such as Emerald [JLHB88] and Obliq [Ca95]. Our main innovations in this work are resource control mechanisms and separation of naming and location from functionality features that we believe eases the task of building distributed systems. <p> The other significant differences lie in the mobility model, the Agent naming scheme employed and the method of Inter-agent communication. Unlike some other systems <ref> [RASS97, G96, P98] </ref> that offer a thread-migration model of mobility, our system more closely resembles Aglets, Voyager, TACOMA, and Odyssey. In this section, we compare our system to three Tcl-based agent systems Agent Tcl, ARA and TACOMA and three JAVA-based systems Aglets , Odyssey and MOLE.
Reference: [SBH96] <author> Markus 6UD HU*fl-RDFKLPflBaumann and Fritz Hohl, </author> <title> Mole a Java-based mobile agent system, </title> <booktitle> in 2 nd . ECOOP Workshop on Mobile Object Systems. </booktitle> <address> Linz, Austria, </address> <year> 1996. </year> <note> [T98] http://www.inf-technik.tu-ilmenau.de/~silvio/research/soft.htm Tk-Draw web page. </note>
Reference-contexts: Our work is also related to several other systems that offer mobility as a feature such as TACOMA [JVS95], Voyager 5 [OSVoy] , Aglets [V97] , Odyssey 6 [GMOd] ARA [P98] and MOLE <ref> [SBH96] </ref> and to earlier systems such as such as Emerald [JLHB88] and Obliq [Ca95]. Our main innovations in this work are resource control mechanisms and separation of naming and location from functionality features that we believe eases the task of building distributed systems. <p> Making the continuation points explicit also has the advantage of being able to have the system reconfigure the application. MOLE <ref> [SBH96] </ref> is another JAVA-based mobile-agent system that uses a mobileserver model of mobility. MOLE agents communicate with each other either by establishing a session and then exchanging messages or by global events.
Reference: [V97] <author> B. Venners, </author> <title> Under the Hood: The architecture of Aglets, Java World, </title> <month> April </month> <year> 1997. </year>
Reference-contexts: The design presented in this paper has been influenced mainly by our previous experience with designing and building the Sumatra system [RASS97]. Our work is also related to several other systems that offer mobility as a feature such as TACOMA [JVS95], Voyager 5 [OSVoy] , Aglets <ref> [V97] </ref> , Odyssey 6 [GMOd] ARA [P98] and MOLE [SBH96] and to earlier systems such as such as Emerald [JLHB88] and Obliq [Ca95].
Reference: [WM91] <author> M. Wood and K. Marzullo, </author> <title> The Design and Implementation of Meta, in Reliable distributed computing with the ISIS toolkit by Kenneth Berman and Robert van Renesse, </title> <publisher> IEEE Computer Society Press, </publisher> <address> ISBN 0818653425,(1994). </address>
Reference-contexts: An event-driven application is driven by asynchronous inputs that cause event-handlers to be invoked. A large class of distributed collaborative, testing, monitoring and control applications fit this paradigm - for example, conferencing and conference control applications, distributed control and testing applications <ref> [WM91] </ref>, data combination [RAS98] and many others. In each case the notion of an event varies. <p> Related Work Our system design was motivated by considering the specific needs of distributed control, collaborative and testing applications that fit the event-driven paradigm. Our design was influenced by the design of the Meta toolkit <ref> [WM91] </ref> that also adopts the event-driven paradigm for control applications. Meta does not provide mobility and reconfiguration as our system does. The design presented in this paper has been influenced mainly by our previous experience with designing and building the Sumatra system [RASS97].
References-found: 16

