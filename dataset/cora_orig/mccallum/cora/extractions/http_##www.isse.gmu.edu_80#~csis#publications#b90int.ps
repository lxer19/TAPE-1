URL: http://www.isse.gmu.edu:80/~csis/publications/b90int.ps
Refering-URL: http://www.isse.gmu.edu:80/~csis/publication.html
Root-URL: 
Title: INTEGRITY MECHANISMS IN DATABASE MANAGEMENT SYSTEMS  
Author: Ravi Sandhu and Sushil Jajodia 
Date: October 1990, pages 526-540  
Address: D.C.,  Fairfax, VA 22030-4444  
Affiliation: Washington  Department of Information Systems and Systems Engineering George Mason University,  
Note: Proc. of the 13th NIST-NCSC National Computer Security Conference,  
Abstract: Our goal in this paper is to answer the following question: what mechanisms are required in a general-purpose multiuser database management system (DBMS) to facilitate the integrity objectives of information systems? We are particularly interested in relational DBMS's. Although existing commercial products fall far short of providing the requisite mechanisms, in principle they can be easily extended to incorporate these mechanisms. In a nutshell our conclusion is that realistic mechanisms do exist. Our principal contribution is to identify these mechanisms, fill in the gaps where none existed and point out where gaps still remain. We have also bridged the terminology and concepts of database and security specialists in a coherent manner. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Burns, R.K. </author> <title> "DBMS Integrity and Secrecy Control." </title> <booktitle> In [18], section A.7, </booktitle> <pages> pages 1-4 (1989). </pages>
Reference-contexts: The most important one has been succintly stated by Burns <ref> [1] </ref> as follows.
Reference: [2] <author> Clark, D.D. and Wilson, </author> <title> D.R. "A Comparison of Commercial and Military Computer Security Policies." </title> <booktitle> IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 184-194 (1987). </pages>
Reference-contexts: We are specifically interested in information systems used to control and account for an organization's assets. In such systems the primary goal is prevention of fraud and errors. The meaning of improper modification in this context has been given by Clark and Wilson <ref> [2] </ref> as follows. No user of the system, even if authorized, may be permitted to modify data items in such a way that assets or accounting records of the company are lost or corrupted. <p> The most important one has been succintly stated by Burns [1] as follows. A database management system (DBMS) provides the appropriate level of abstraction for the implementation of integrity controls as presented in the Clark and Wilson paper <ref> [2] </ref>. : : : It is clear that the domain of applicability of the Clark and Wilson model is not an operating system or a network or even an application system, it is fundamentally a DBMS. This is particularly true when we focus on mechanisms. <p> They apply equally well to any information system be it a manual paper-based system, a centralized batch system, an interactive and highly distributed system, etc. The nine integrity principles enumerated below are abstracted from the Clark and Wilson papers <ref> [2, 3, 4] </ref>, the NIST workshops [17, 18] and the broader security and database literature. 2 The reader has probably seen similar lists in the past. We believe the numerous discussions spurred by the Clark-Wilson papers call for a revised formulation of major principles. <p> We emphasize that these principles express what needs to be done rather than how it is going to be accomplished. The latter question is addressed in the next section. 1. Well-formed Transactions. Clark and Wilson <ref> [2] </ref> have defined this principle as follows: "The concept of the well-formed transaction is that a user should not manipulate data arbitrarily, but only in constrained ways that preserve or ensure the integrity of the data." This principle has also been called constrained change [4], i.e., data can only be modified <p> with respect to processes is more of an internal issue within the computer system, and its zealous application is most desirable (modulo the performance and cost penalties it imposes). 4 The closest concept that Clark and Wilson have to this principle is their Rule E4 which they summarize as follows <ref> [2, figure 1] </ref>: "Authorization lists changed only by the security officer." This notion of a central security officer as an authorization czar is inappropriate and unworkable.
Reference: [3] <author> Clark, D.D. and Wilson, </author> <title> D.R. "Comments on the Integrity Model." </title> <booktitle> In [17], section 9, </booktitle> <pages> pages 1-6 (1989). </pages>
Reference-contexts: Note their express qualification: "even if authorized." The word company in this quote reveals the authors' commercial bias but, as they have clarified <ref> [3] </ref>, these concepts apply equally well to any information system which controls assets|be it in the military, government or commercial sectors. <p> They apply equally well to any information system be it a manual paper-based system, a centralized batch system, an interactive and highly distributed system, etc. The nine integrity principles enumerated below are abstracted from the Clark and Wilson papers <ref> [2, 3, 4] </ref>, the NIST workshops [17, 18] and the broader security and database literature. 2 The reader has probably seen similar lists in the past. We believe the numerous discussions spurred by the Clark-Wilson papers call for a revised formulation of major principles.
Reference: [4] <author> Clark, D.D. and Wilson, </author> <title> D.R. "Evolution of a Model for Computer Integrity." </title> <booktitle> In [18], section A.2, </booktitle> <pages> pages 1-13 (1989). </pages>
Reference-contexts: They apply equally well to any information system be it a manual paper-based system, a centralized batch system, an interactive and highly distributed system, etc. The nine integrity principles enumerated below are abstracted from the Clark and Wilson papers <ref> [2, 3, 4] </ref>, the NIST workshops [17, 18] and the broader security and database literature. 2 The reader has probably seen similar lists in the past. We believe the numerous discussions spurred by the Clark-Wilson papers call for a revised formulation of major principles. <p> Well-formed Transactions. Clark and Wilson [2] have defined this principle as follows: "The concept of the well-formed transaction is that a user should not manipulate data arbitrarily, but only in constrained ways that preserve or ensure the integrity of the data." This principle has also been called constrained change <ref> [4] </ref>, i.e., data can only be modified by well-formed transactions rather than by arbitrary procedures. Moreover the well-formed transactions are known ("certified") to be individually correct with some (mostly qualitative) degree of assurance. 2. Authenticated Users. <p> This can only result in security being perceived as a drag on productivity and something to be bypassed whenever possible. 7. Reality Checks. This principle has been well motivated by Clark and Wilson <ref> [4] </ref> as follows: "A cross-check with the external reality is a central part of integrity control. : : : integrity is meaningful only in terms of the relation of the data to the external world." Or in more concrete terms: "If an internal inventory record does not correctly reflect the number <p> In this respect DBMSs have a significant advantage, since their powerful querying abilities can be used. The ability to reconstruct events has different meaning to different people. At one end of the spectrum, we have the requirements of Clark and Wilson <ref> [4] </ref>. They require only two things: 1. A complete history of each and every modification made to the value of an item. 2. With each change in value of an item, store the identity of the person making the change.
Reference: [5] <author> Codd, E.F. </author> <title> "Extending the Relational Database Model to Capture More Meaning." </title> <journal> ACM Transactions on Database Systems 4(4): </journal> <year> (1979). </year>
Reference-contexts: Consistency constraints are also often called integrity constraints or integrity rules in the database literature. Since we are using integrity in a wider sense we prefer the former term. The relational data model in particular imposes two consistency constraints <ref> [5, 6] </ref>. * Entity integrity stipulates that attributes in the primary key of a base relation cannot have null values. This amounts to requiring that each entity represented in the database must be uniquely identifiable. * Referential integrity is concerned with references from one entity to another.
Reference: [6] <author> Date, C.J. </author> <title> An Introduction to Database Systems. Volume I, </title> <publisher> Addison-Wesley, </publisher> <address> fourth edition (1986). </address>
Reference-contexts: We see no need to discard this 1 We should point out that our definition of integrity is considerably broader than the traditional use of this term in the database literature. For instance Date <ref> [6] </ref> says: "Security refers to the protection of data against unauthorized disclosure, alteration, or destruction; integrity refers to the accuracy or validity of data." The consensus view among security researchers is that integrity is one component of security and accuracy/validity is one component of integrity [9, 18, for instance]. c fl <p> Consistency constraints are also often called integrity constraints or integrity rules in the database literature. Since we are using integrity in a wider sense we prefer the former term. The relational data model in particular imposes two consistency constraints <ref> [5, 6] </ref>. * Entity integrity stipulates that attributes in the primary key of a base relation cannot have null values. This amounts to requiring that each entity represented in the database must be uniquely identifiable. * Referential integrity is concerned with references from one entity to another.
Reference: [7] <author> Denning, D.E. and Denning, P.J. </author> <title> "Data Security." </title> <journal> ACM Computing Surveys 11(3) </journal> <month> 227-249 </month> <year> (1979). </year>
Reference-contexts: Secondly a zealous application of least privilege is not a terribly efficient way to run an organization. It conveys an 2 The literature is too numerous to cite individually. For those unfamiliar with the "older" literature some useful staring points are <ref> [7, 9, 10, 13, 19] </ref>. impression of an enterprise enmeshed in red tape. 3 So practically users must be granted more privileges than are strictly required. We therefore should be able to accurately reconstruct essential elements of a system's history, so as to detect misuse of privileges. 6.
Reference: [8] <institution> Department of Defense National Computer Security Center. Department of Defense Trusted Computer Systems Evaluation Criteria. DoD 5200.28-STD (1985). </institution>
Reference-contexts: Moreover DBMS's have the wonderful ability to express and manipulate complex relationships. This comes in very handy when dealing with sophisticated integrity policies. The Operating System (OS) must clearly provide some core integrity and security mechanisms. In terms of the Orange Book <ref> [8] </ref> one would need at least a B1 system to enforce encapsulation of the DBMS, i.e., to ensure that all manipulation of the database can only be through the DBMS. <p> events that take place in the database, an audit trail must also provide support for auditing, i.e., an audit trail must have the capability "for an authorized and competent agent to access and evaluate accountability information by a secure means, within a reasonable amount of time and without undue difficulty" <ref> [8] </ref>. In this respect DBMSs have a significant advantage, since their powerful querying abilities can be used. The ability to reconstruct events has different meaning to different people. At one end of the spectrum, we have the requirements of Clark and Wilson [4]. They require only two things: 1.
Reference: [9] <author> Fernandez, E.B., Summers, R.C. and Wood, C. </author> <title> Database Security and Integrity. </title> <publisher> Addison-Wesley (1981). </publisher>
Reference-contexts: For instance Date [6] says: "Security refers to the protection of data against unauthorized disclosure, alteration, or destruction; integrity refers to the accuracy or validity of data." The consensus view among security researchers is that integrity is one component of security and accuracy/validity is one component of integrity <ref> [9, 18, for instance] </ref>. c fl Ravi Sandhu and Sushil Jajodia, 1990 standard viewpoint in the absence of some compelling demonstration of a superior one. <p> Secondly a zealous application of least privilege is not a terribly efficient way to run an organization. It conveys an 2 The literature is too numerous to cite individually. For those unfamiliar with the "older" literature some useful staring points are <ref> [7, 9, 10, 13, 19] </ref>. impression of an enterprise enmeshed in red tape. 3 So practically users must be granted more privileges than are strictly required. We therefore should be able to accurately reconstruct essential elements of a system's history, so as to detect misuse of privileges. 6.
Reference: [10] <author> Gray, J. </author> <booktitle> "Notes on Data Base Operating Systems." In Operating Systems|An Advanced Course, </booktitle> <editor> Bayer, R. et al (editors), </editor> <publisher> Springer-Verlag, </publisher> <pages> pages 393-481 (1978). </pages>
Reference-contexts: Secondly a zealous application of least privilege is not a terribly efficient way to run an organization. It conveys an 2 The literature is too numerous to cite individually. For those unfamiliar with the "older" literature some useful staring points are <ref> [7, 9, 10, 13, 19] </ref>. impression of an enterprise enmeshed in red tape. 3 So practically users must be granted more privileges than are strictly required. We therefore should be able to accurately reconstruct essential elements of a system's history, so as to detect misuse of privileges. 6. <p> Overall the required mechanisms are quite practical and well within the reach of today's technology. 3.1 Well-formed Transactions The concept of a well-formed transaction corresponds very well to the standard DBMS concept of a transaction <ref> [10, 11] </ref>. A transaction is defined as a sequence of primitive actions which satisfies the following properties. 1. Failure atomicity: either all or none of the updates of a transaction take effect. <p> As a result relational DBMS's typically confine their enforcement of consistency constraints to domain constraints and entity integrity. 3.2 Continuity of Operation The problem of maintaining continuity of operation in the face of natural disasters, hardware failures and other disruptive events has received considerable attention in both theory and practice <ref> [10] </ref>. The basic technique to deal with such situations is redundancy in various forms. Recovery mechanisms in DBMS's must also ensure that we arrive at a consistent state.
Reference: [11] <author> Gray, J. </author> <title> "Why Do Computers Stop and What Can Be Done About It?" IEEE Symposium on Reliability in Distributed Software and Database Systems, </title> <month> pages 3-12 </month> <year> (1986). </year>
Reference-contexts: Overall the required mechanisms are quite practical and well within the reach of today's technology. 3.1 Well-formed Transactions The concept of a well-formed transaction corresponds very well to the standard DBMS concept of a transaction <ref> [10, 11] </ref>. A transaction is defined as a sequence of primitive actions which satisfies the following properties. 1. Failure atomicity: either all or none of the updates of a transaction take effect.
Reference: [12] <author> Jajodia, S., Gadia, S.K., Bhargava, G. and Sibley, E. </author> <title> "Audit Trail Organization in Relational Databases." In Database Security III: Status and Prospects, Spooner, D.L. </title> <editor> and Landwehr, C.E. (editors), </editor> <publisher> North-Holland, </publisher> <pages> pages 269-281 (1990). </pages>
Reference-contexts: Some of these mechanisms are available in commercial products. Others are well established in the database literature. There are also some newer mechanisms which have been proposed more recently, e.g., transaction controls for separation of duties [21], the temporal model for audit data <ref> [12] </ref> and propagation constraints for dynamic authorization [20, 22]. Finally there are places where existing mechanisms and proposals need to be extended in novel ways. <p> The transaction what was the exact transaction that was initiated. 3. The data what was the result of the transaction, what were the database states before and after the transaction initiation. For this purpose a database activity model has been recently proposed <ref> [12] </ref> that imposes a uniform logical structure upon the past, present, and future data. There is never any loss of historical or current information in this model, thus the model provides a mechanism for complete reconstruction of every action taken on the database.
Reference: [13] <author> Linden, T.A. </author> <title> "Operating System Structures to Support Security and Reliable Software." </title> <journal> ACM Computing Surveys 8(4) </journal> <month> 409-445 </month> <year> (1976). </year>
Reference-contexts: Secondly a zealous application of least privilege is not a terribly efficient way to run an organization. It conveys an 2 The literature is too numerous to cite individually. For those unfamiliar with the "older" literature some useful staring points are <ref> [7, 9, 10, 13, 19] </ref>. impression of an enterprise enmeshed in red tape. 3 So practically users must be granted more privileges than are strictly required. We therefore should be able to accurately reconstruct essential elements of a system's history, so as to detect misuse of privileges. 6.
Reference: [14] <author> Moffett, J.D. and Sloman, </author> <title> M.S. "The Source of Authority for Commercial Access Control." </title> <booktitle> Computer 21(2) </booktitle> <month> 59-69 </month> <year> (1988). </year>
Reference-contexts: These situations cloud the classic distinction between discretionary and mandatory policies [16, 23]. The traditional concept of ownership as the basis for delegating authority also becomes less applicable in this context <ref> [14] </ref>. Finally we need the ability to delegate privileges without having the ability to exercise these privileges. Some mechanisms for this purpose have been recently proposed [14, 22]. <p> The traditional concept of ownership as the basis for delegating authority also becomes less applicable in this context [14]. Finally we need the ability to delegate privileges without having the ability to exercise these privileges. Some mechanisms for this purpose have been recently proposed <ref> [14, 22] </ref>. The complexity introduced by dynamic authorization has been recognized ever since researchers considered this problem, e.g., as stated in the following quote [19]. ": : : it is relatively easy to envison (and design) systems that statically express a particular protection intent.
Reference: [15] <author> Murray, </author> <title> W.H. "Data Integrity in a Business Data Processing System." </title> <booktitle> In [17]. </booktitle>
Reference-contexts: The principles have been applied in practise <ref> [15, 26, for instance] </ref> but with most of the mechanism built into application code. Providing these mechanisms in the DBMS is an essential prerequisite for their widespread use. Our mapping of principles to mechanisms is summarized in table 1. Some of these mechanisms are available in commercial products.
Reference: [16] <author> Murray, </author> <title> W.H. "On the Use of Mandatory." </title> <booktitle> In [17]. </booktitle>
Reference-contexts: For example, a department manger may be able to delegate substantial authority over departmental resources to project managers within his department and yet be prohibited to delegate this authority to project managers outside the department. These situations cloud the classic distinction between discretionary and mandatory policies <ref> [16, 23] </ref>. The traditional concept of ownership as the basis for delegating authority also becomes less applicable in this context [14]. Finally we need the ability to delegate privileges without having the ability to exercise these privileges. Some mechanisms for this purpose have been recently proposed [14, 22].
Reference: [17] <institution> Report of the Invitational Workshop on Integrity Policy in Computer Information Systems (WIPCIS), Katzke, S.W. and Ruthberg, Z.G. </institution> <note> (editors), NIST, Special Publication 500-160 (January 1989). </note>
Reference-contexts: They apply equally well to any information system be it a manual paper-based system, a centralized batch system, an interactive and highly distributed system, etc. The nine integrity principles enumerated below are abstracted from the Clark and Wilson papers [2, 3, 4], the NIST workshops <ref> [17, 18] </ref> and the broader security and database literature. 2 The reader has probably seen similar lists in the past. We believe the numerous discussions spurred by the Clark-Wilson papers call for a revised formulation of major principles.
Reference: [18] <institution> Report of the Invitational Workshop on Data Integrity, Ruthberg, Z.G. and Polk, W.T. </institution> <note> (editors), NIST, Special Publication 500-168 (September 1989). </note>
Reference-contexts: 1 INTRODUCTION Information integrity means different things to different people, and will probably continue to do so for some time. The recent NIST workshop, which set out to establish a consensus definition, instead arrived at the following conclusion <ref> [18, page 2.6] </ref>. <p> For instance Date [6] says: "Security refers to the protection of data against unauthorized disclosure, alteration, or destruction; integrity refers to the accuracy or validity of data." The consensus view among security researchers is that integrity is one component of security and accuracy/validity is one component of integrity <ref> [9, 18, for instance] </ref>. c fl Ravi Sandhu and Sushil Jajodia, 1990 standard viewpoint in the absence of some compelling demonstration of a superior one. <p> They apply equally well to any information system be it a manual paper-based system, a centralized batch system, an interactive and highly distributed system, etc. The nine integrity principles enumerated below are abstracted from the Clark and Wilson papers [2, 3, 4], the NIST workshops <ref> [17, 18] </ref> and the broader security and database literature. 2 The reader has probably seen similar lists in the past. We believe the numerous discussions spurred by the Clark-Wilson papers call for a revised formulation of major principles. <p> As a result their use is awkward at best. This fact was noted by the DBMS group at the 1989 NIST data integrity workshop who concluded their report with the following recommendation <ref> [18, section 4.3] </ref>. While the group was able to use existing DBMS features to implement separation of roles controls, we were, however, unable to use existing features in a way that would support easy maintenance and certification.
Reference: [19] <author> Saltzer, J.H. and Schroeder, </author> <title> M.D. </title> <booktitle> "The Protection of Information in Computer Systems." Proceedings of IEEE 63(9) </booktitle> <month> 1278-1308 </month> <year> (1975). </year>
Reference-contexts: Least Privilege. The notion of least privilege was one of the earliest principles to emerge in security research. It has classically been stated in terms of processes (executing programs) <ref> [19] </ref>, i.e., a process should have exactly those privileges needed to accomplish its assigned task, and none extra. <p> Secondly a zealous application of least privilege is not a terribly efficient way to run an organization. It conveys an 2 The literature is too numerous to cite individually. For those unfamiliar with the "older" literature some useful staring points are <ref> [7, 9, 10, 13, 19] </ref>. impression of an enterprise enmeshed in red tape. 3 So practically users must be granted more privileges than are strictly required. We therefore should be able to accurately reconstruct essential elements of a system's history, so as to detect misuse of privileges. 6. <p> cumbersome interfaces (such as requiring many keystrokes to effect simple changes in authorization), (iii) lack of tools for authorization review, or (iv) mismatched policy and mechanism (": : : the extent that the user's mental image of his protection goals matches the mechanism he must use, mistakes will be minimized." <ref> [19] </ref>). It is inevitable that these principles are fuzzy, abstract and high level. <p> Finally we need the ability to delegate privileges without having the ability to exercise these privileges. Some mechanisms for this purpose have been recently proposed [14, 22]. The complexity introduced by dynamic authorization has been recognized ever since researchers considered this problem, e.g., as stated in the following quote <ref> [19] </ref>. ": : : it is relatively easy to envison (and design) systems that statically express a particular protection intent. <p> The mechanisms should of course have fail-safe defaults <ref> [19] </ref>, e.g., access is not available unless explicitly granted or this default rule is explicitly changed to grant it automatically. DBMS's do offer a significant advantage in providing user friendly interfaces intrinsically for their main objective of data manipulation.
Reference: [20] <author> Sandhu, </author> <title> R.S. "The Schematic Protection Model: Its Definition and Analysis for Acyclic Attenuating Schemes." </title> <journal> Journal of ACM 35(2) </journal> <month> 404-432 </month> <year> (1988). </year>
Reference-contexts: Others are well established in the database literature. There are also some newer mechanisms which have been proposed more recently, e.g., transaction controls for separation of duties [21], the temporal model for audit data [12] and propagation constraints for dynamic authorization <ref> [20, 22] </ref>. Finally there are places where existing mechanisms and proposals need to be extended in novel ways. <p> But the need to change access authorizations dynamically : : : introduces much complexity into protection systems." This fact continues to be true in spite of substantial theoretical advances in the interim <ref> [20] </ref>. Existing products provide few facilities in this respect and their mechanisms tend to have an ad hoc flavor. 3.8 Reality Checks This principle inherently requires activity outside of the DBMS.
Reference: [21] <author> Sandhu, </author> <title> R.S. "Transaction Control Expressions for Separation of Duties." </title> <booktitle> 4th Aerospace Computer Security Applications Conference, </booktitle> <pages> pages 282-286 (1988). </pages>
Reference-contexts: Our mapping of principles to mechanisms is summarized in table 1. Some of these mechanisms are available in commercial products. Others are well established in the database literature. There are also some newer mechanisms which have been proposed more recently, e.g., transaction controls for separation of duties <ref> [21] </ref>, the temporal model for audit data [12] and propagation constraints for dynamic authorization [20, 22]. Finally there are places where existing mechanisms and proposals need to be extended in novel ways. <p> The crucial question is how do we specify and implement similar controls for separation of duties in a computerized environment? A mechanism for this purpose is described in <ref> [21] </ref>. This mechanism of transaction-control expressions is based on the following difference between vouchers and accounts. * The voucher is transient in that it comes into existence, has a relatively small sequence of steps applied to it and then disappears from the system (possibly leaving a record in some archive).
Reference: [22] <author> Sandhu, </author> <title> R.S. "Transformation of Access Rights." </title> <booktitle> IEEE Symposium on Security and Privacy, </booktitle> <month> 259-268 </month> <year> (1989). </year>
Reference-contexts: Others are well established in the database literature. There are also some newer mechanisms which have been proposed more recently, e.g., transaction controls for separation of duties [21], the temporal model for audit data [12] and propagation constraints for dynamic authorization <ref> [20, 22] </ref>. Finally there are places where existing mechanisms and proposals need to be extended in novel ways. <p> The traditional concept of ownership as the basis for delegating authority also becomes less applicable in this context [14]. Finally we need the ability to delegate privileges without having the ability to exercise these privileges. Some mechanisms for this purpose have been recently proposed <ref> [14, 22] </ref>. The complexity introduced by dynamic authorization has been recognized ever since researchers considered this problem, e.g., as stated in the following quote [19]. ": : : it is relatively easy to envison (and design) systems that statically express a particular protection intent.
Reference: [23] <author> Sandhu, </author> <title> R.S. "Mandatory Controls for Database Integrity." In Database Security III: Status and Prospects, Spooner, D.L. </title> <editor> and Landwehr, C.E. (editors), </editor> <publisher> North-Holland, </publisher> <pages> pages 143-150 (1990). </pages>
Reference-contexts: For example, a department manger may be able to delegate substantial authority over departmental resources to project managers within his department and yet be prohibited to delegate this authority to project managers outside the department. These situations cloud the classic distinction between discretionary and mandatory policies <ref> [16, 23] </ref>. The traditional concept of ownership as the basis for delegating authority also becomes less applicable in this context [14]. Finally we need the ability to delegate privileges without having the ability to exercise these privileges. Some mechanisms for this purpose have been recently proposed [14, 22].
Reference: [24] <author> Selinger, P.G. </author> <title> "Authorization and Views." In Distributed Data Bases, </title> <editor> Draffan, I.W and Poole, F. (editors), </editor> <publisher> Cambridge University Press, </publisher> <pages> pages 233-246 (1980). </pages>
Reference-contexts: As a result authorization to control updates is often less sophisticated than authorization for read access. In relational systems it is natural for obvious reasons to represent the access matrix by one or more relations <ref> [24] </ref>. At a coarse level we might control access by tuples of the following form user, transaction, relation meaning that the specified user can execute the specified transaction on the specified relation.
Reference: [25] <author> Snyder, L. </author> <title> "Formal Models of Capability-Based Protection Systems." </title> <journal> IEEE Transactions on Computers C-30(3):172-181 (1981). </journal>
Reference: [26] <author> Wimbrow, J.H. </author> <title> "A Large-Scale Interactive Administrative System." </title> <journal> IBM Sys. J. </journal> <volume> 10(4) </volume> <month> 260-282 </month> <year> (1971). </year>
Reference-contexts: The principles have been applied in practise <ref> [15, 26, for instance] </ref> but with most of the mechanism built into application code. Providing these mechanisms in the DBMS is an essential prerequisite for their widespread use. Our mapping of principles to mechanisms is summarized in table 1. Some of these mechanisms are available in commercial products.
References-found: 26

