URL: http://www.cs.berkeley.edu/~adj/cs294-1.s98/papers/Vanu_infocom98.ps
Refering-URL: http://www.cs.berkeley.edu/~adj/cs294-1.s98/plan.html
Root-URL: 
Title: Software Radios for Wireless Networking  
Author: Vanu G. Bose Alok B. Shah Motorola, Inc. Michael Ismert 
Affiliation: Laboratory for Computer Science Massachusetts Institute of Technology  Laboratory for Computer Science Massachusetts Institute of Technology  
Abstract: This paper describes a novel architecture for building software wireless network interfaces. These interfaces, implemented in user-level software, run on off-the-shelf PCs and replace all of the link and many of the physical layer functions typically implemented in dedicated hardware on a network interface card (NIC). They provide all of the processing needed to transform between wideband IF signals and network packets. Moving this functionality into user-level software has several advantages. Among other things, it makes it easy to implement protocols that adapt to different applications and environmental conditions. Our approach is compatible with the existing OSI protocol stack, but supports a finer granularity of layering. This finer granularity makes it possible for our NIC to dynamically change functions, such as modulation technique, that are fixed in other NICs. It also offers interfaces that facilitate interoperation with a variety of other systems, e.g., codecs. We also present a brief description of our architecture which allows these software NICs to be built, as well as a sample NIC that runs on a PentiumPro, designed to interoperate with a commercial 2.4 GHz ISM band frequency hopping spread spectrum radio. 
Abstract-found: 1
Intro-found: 1
Reference: [AP93] <author> Mark B. Abbott and Larry L. Peterson. </author> <title> Increasing Network Throughput by Integrating Protocol Layers. </title> <journal> ACM Transactions on Networking, </journal> <volume> 1(5) </volume> <pages> 600-610, </pages> <month> October </month> <year> 1993. </year>
Reference: [CT90] <author> David D. Clark and David L. Tennenhouse. </author> <title> Architectural Considerations for a New Generation of Protocols. </title> <booktitle> In ACM SIGCOMM '90, </booktitle> <pages> pages 200-208, </pages> <address> Philadelphia, PA, </address> <month> September </month> <year> 1990. </year>
Reference-contexts: While layering provides an excellent framework for modularity, it can lead to an inefficient implementation <ref> [CT90] </ref>. Since many software radio applications involve intensive data manipulation functions, the overhead of a layered implementation can be quite significant. In the short term, our engineering approach has been to group layers together where necessary, but to insure that the grouping still uses our interfaces at its edges.
Reference: [Ism98] <author> Michael Ismert. </author> <title> Making Commodity PCs Fit for Signal Processing. </title> <booktitle> In USENIX, </booktitle> <address> New Orleans, </address> <month> August </month> <year> 1998. </year> <note> IEEE. Submitted. </note>
Reference-contexts: The peak burst rates are 933 Mbits/sec for input and 790 Mbits/sec for output. Details on the implementation can be found in <ref> [Ism98] </ref>. Once the data is in memory, the software must process the data to produce a network frame. We have chosen to interact with the operating system at the IP layer; the interface to the kernel's network stack is through our SoftLink device driver.
Reference: [LM94] <author> Edward A. Lee and David G. Messerschmitt. </author> <title> Digital Communication. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> 2nd edition, </address> <year> 1994. </year>
Reference-contexts: The traditional link layer (e.g. the X.25 protocol) is preserved as the first sublayer entitled Link Framing , but the sublayer of channel coding is added. A channel code is designed specifically for one of three purposes: error detection, error correction or error prevention <ref> [LM94] </ref>. These are clearly link layer functions, as they are used to facilitate the appearance of transmission medium that is free from errors. The physical layer is concerned with transmitting bits over a communication channel.
Reference: [Ous90] <author> John Ousterhout. </author> <title> Why aren't operating systems getting faster as fast as hardware ? In USENIX, </title> <address> pages 247-256, </address> <month> June </month> <year> 1990. </year>
Reference-contexts: Conventional workstations have two I/O bottle necks which had to be overcome. First, the available I/O ports on today's workstations cannot handle the required data rates. Second, the path through the operating system between a device driver and the application is inefficient <ref> [Ous90] </ref>. To overcome these limitations, we developed a PCI-based I/O system which consists of two parts. The hardware component, the GuPPI (for General Purpose PCI I/O), physically connects the analog frontend to the workstation's I/O bus.
Reference: [RF 97] <institution> RF Micro Devices, Inc., </institution> <address> 7625 Thorndike Road, Greensboro, NC. </address> <note> 1997 Designer's Handbook, </note> <month> April </month> <year> 1997. </year>
Reference-contexts: The operating system support consists of a device driver for the GuPPI and several small additions to the virtual mem 1 For example the Rockwell 95x family of wideband receivers. 2 Constructed using evaluation boards from RF Micro Devices <ref> [RF 97] </ref>. ory system, all for the Linux kernel. The total size of the code is just under 1200 lines, with the virtual memory system additions representing just 200 of those.
Reference: [Sha97] <author> Alok B. Shah. </author> <title> Software-Based Implementation of a Frequency Hopping Two-Way Radio. </title> <type> Master's thesis, </type> <institution> MIT, </institution> <month> May </month> <year> 1997. </year>
Reference-contexts: (AD9713) which outputs the analog IF waveform. 4 Example Network Interface This section presents an implementation of a software NIC designed to be compatible with a commercial frequency hopping radio operating in the 2.4 GHz ISM band, employing FSK modulation and supporting a data rate of up to 625 kbps <ref> [Sha97] </ref> 3 .
Reference: [Sta97] <author> William F. Stasior. </author> <title> An Interactive Approach to the Identification and Extraction of Visual Events. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <month> July </month> <year> 1997. </year>
Reference: [Tan88] <author> Andrew S. Tanenbaum. </author> <title> Computer Networks. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ 07632, </address> <note> second edition, </note> <year> 1988. </year>
Reference-contexts: The software radio architecture presented in this paper consists of several well-defined processing layers, which can be used to completely specify a wireless communications system. The layering presented in section 2.1 is a refinement of the OSI layering model <ref> [Tan88] </ref>, which subdivides the existing Link and Physical layers. The signal processing involved in these layers can be naturally subdivided into a finer grain model, but has traditionally been lumped into one layer because of its implementation in dedicated hardware. For our purposes, however, this is too coarse. <p> Too many layers would result in a cumbersome programming model, so the layering must balance this cost against the flexibility to be gained. The layers were defined according to the design principles of the OSI model <ref> [Tan88] </ref>. the OSI model. The function of the link layer is to take the raw transmission facility and transform it into a line that appears to be free of transmission errors to the network layer.
Reference: [TB96] <author> David L. Tennenhouse and Vanu G. Bose. </author> <title> The SpectrumWare Approach to Wireless Signal Processing. </title> <journal> Wireless Network Journal, </journal> <volume> 2(1), </volume> <year> 1996. </year>
Reference-contexts: The GuPPI provides the ability to burst data between the analog frontend and main memory at near the maximum I/O bus rate. In order to accommodate the jitter in the availability of resources, we use memory to temporally decouple <ref> [TB96] </ref> the sample stream. FIFOs on the GuPPI, connected to the A/D and D/A converters, decouple the timing between the fixed rate domain of the analog fron-tend and the variable rate I/O bus without losing any samples.
Reference: [Wep95] <author> Jeffery A. Wepman. </author> <title> Analog-to-Digital Convertors and Their Applications in Radio Receivers. </title> <journal> IEEE Communications Magazine, </journal> <volume> 33(5) </volume> <pages> 39-45, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: The IF signal is digitized using a 12-bit converter from Analog Devices (AD9042) that is capable of digitizing signals at a maximum rate of 40 MSPS. This provides a maximum of a 20 MHz IF bandwidth. Currently, we use either direct or bandpass sampling <ref> [Wep95] </ref> of the IF band, the next generation will take the entire RF band down to a complex baseband signal. Wideband radio applications require that data be transferred into host memory at a very high rate.
References-found: 11

