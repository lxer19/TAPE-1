URL: http://www.cs.umd.edu/users/grh/incnear.ps
Refering-URL: http://www.cs.umd.edu/users/grh/
Root-URL: 
Title: Ranking in Spatial Databases  
Author: Gsli R. Hjaltason and Hanan Samet 
Date: Aug. 1995,  83-95  
Note: Proceedings of the 4th Symposium on Spatial Databases, Portland, Maine,  eds. Egenhofer and Herring, Lecture Notes in Computer Science 951, Springer-Verlag, Berlin, 1995, pp.  
Address: College Park, MD 20742, USA  
Affiliation: Computer Science Department, Center for Automation Research, and Institute for Advanced Computer Studies, University of Maryland,  
Abstract: An algorithm for ranking spatial objects according to increasing distance from a query object is introduced and analyzed. The algorithm makes use of a hierarchical spatial data structure. The intended application area is a database environment, where the spatial data structure serves as an index. The algorithm is incremental in the sense that objects are reported one by one, so that a query processor can use the algorithm in a pipelined fashion for complex queries involving proximity. It is well suited for k nearest neighbor queries, and has the property that k needs not be fixed in advance.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> W. G. Aref and H. Samet. </author> <title> Extending a DBMS with spatial operations. </title> <editor> In O. Gunther and H. J. Schek, editors, </editor> <booktitle> Advances in Spatial Databases 2nd Symposium, SSD'91, </booktitle> <pages> pages 299-318, </pages> <address> Berlin, </address> <year> 1991. </year> <note> Springer-Verlag. (also Lecture Notes in Computer Science 525). </note>
Reference-contexts: Thus the worst-case execution time is the same as for finding a total ranking, O (N log N ). 6 Conclusion The algorithm presented in this paper was designed to work in the SAND <ref> [1] </ref> spatial database environment, where a PMR quadtree is used as the underlying spatial index. However, the algorithm is not limited to a PMR quadtree. It should work (with minor modifications) for a wide class of spatial indices, that includes R-tree variants and k-d-b-trees.
Reference: 2. <author> W. G. Aref and H. Samet. </author> <title> Uniquely reporting spatial objects: yet another operation for comparing spatial data structures. </title> <booktitle> In Proceedings of the Fifth International Symposium on Spatial Data Handling, </booktitle> <pages> pages 178-189, </pages> <address> Charleston, South Carolina, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: For such queries we must have a post-processing step that removes duplicate answers. The process of removing duplicate may require a process as complex as sorting although, depending on the nature of the object, other methods may be applicable (e.g., <ref> [2] </ref>). The ordering provided by an index is useful for ranking the data based on its closeness to a particular value v of the attribute a. <p> Recall that for some representations, a spatial object may span several container blocks. The algorithm must thus guard against objects being reported more than once <ref> [2] </ref>. The test (i.e., the if statement) in line 13 ensures that objects that have already been reported are not put on the queue again. For this to work properly, blocks must be retrieved from the queue before spatial objects at the same distance.
Reference: 3. <author> S. Arya, D. M. Mount, N. S. Netanyahu, R. Silverman, and A. Wu. </author> <title> An optimal algorithm for approximate nearest neighbor searching. </title> <booktitle> In Proceedings of the Fifth Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 573-582, </pages> <address> Arlington, VA., </address> <month> January </month> <year> 1994. </year>
Reference-contexts: Finally, Chicago is reported to the query processor, which terminates the search and returns Chicago as the result of the query. 5 Analysis Our solution to the problem of finding the nearest object is not more efficient than other known methods <ref> [3, 7] </ref>. However, it is more general in several respects. <p> However, it is more general in several respects. Proc. of the 4th Symposium on Spatial Databases, Portland, Maine, August 1995 11 The algorithm presented in <ref> [3] </ref> only works with point data and relies on a specialized data structure to achieve optimality in execution time for approximate nearest neighbor queries. This structure is static and must be rebuilt if more points are introduced. In addition, it is not amenable to practical implementation.
Reference: 4. <author> D. Comer. </author> <title> The ubiquitous B-tree. </title> <journal> ACM Computing Surveys, </journal> <volume> 11(2) </volume> <pages> 121-137, </pages> <month> June </month> <year> 1979. </year>
Reference-contexts: The retrieval of the blocks that comprise the quadtree is facilitated using a number of different access structures [13]. The most common access structures are a tree having four sons at each level (see Fig. 1b) or a tree such as a B + -tree <ref> [4] </ref> that is based on finding an ordering on the blocks. An example of such an ordering is that achieved by interleaving the bits comprising the binary representations of the x and y coordinates of the upper-left corners of each block.
Reference: 5. <author> L. M. Goldschlager. </author> <title> Short algorithms for space-filling curves. </title> <journal> Software Practice and Experience, </journal> <volume> 11(1):99, </volume> <month> January </month> <year> 1981. </year>
Reference-contexts: An explicit ordering results from the use of a particular mapping from the higher dimensional space to a one-dimensional space. An example mapping is one that interleaves the individual bits in the binary representation of the locational attribute values. Such mappings result in what are known as space-filling curves <ref> [5] </ref> (e.g., Peano, Hilbert, Sierpinsky, etc.) although no curve has the property that all records that are close to each other in the multidimensional space formed by the ranges of the locational attribute values are also close to each other in the range of the mapping.
Reference: 6. <author> A. Guttman. R-trees: </author> <title> a dynamic index structure for spatial searching. </title> <booktitle> In Proceedings of the SIGMOD Conference, </booktitle> <pages> pages 47-57, </pages> <address> Boston, </address> <month> June </month> <year> 1984. </year>
Reference-contexts: Moreover, we assume a regular decomposition such as that provided by the PMR quadtree [9]. Of course, other representations (e.g., the R + -tree [15]) could also have been used as well as an implementation where the bounding boxes are not disjoint (e.g., an R-tree <ref> [6] </ref>). Our methods are equally applicable to these representations. 2 Data Structure As we mentioned earlier, our algorithm was developed for the PMR quadtree but can be adapted to many other hierarchical spatial data structures that make use of what we term container block. <p> Examples of such structures include Proc. of the 4th Symposium on Spatial Databases, Portland, Maine, August 1995 5 R-trees <ref> [6] </ref>, R + -trees [15], and k-d-b-trees [10]. The PMR quadtree uses a regular decomposition of space to index spatial objects. Each quadtree block is a square, or a hypercube in higher dimensions.
Reference: 7. <author> E. G. Hoel and H. Samet. </author> <title> Efficient processing of spatial queries in line segment databases. </title> <editor> In O. Gunther and H. J. Schek, editors, </editor> <booktitle> Advances in Spatial Databases 2nd Symposium, SSD'91, </booktitle> <pages> pages 237-256. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1991. </year> <note> (also Lecture Notes in Computer Science 525). </note>
Reference-contexts: This method could be very fast especially if o is in block b or one of the brothers of b. However, it may have to visit all of the blocks around the node <ref> [7] </ref>. Worse of all, if we need the next closest object, then we have to restart the search from the beginning rather than from where we last left off, making it unsuitable for ranking. <p> Finally, Chicago is reported to the query processor, which terminates the search and returns Chicago as the result of the query. 5 Analysis Our solution to the problem of finding the nearest object is not more efficient than other known methods <ref> [3, 7] </ref>. However, it is more general in several respects. <p> In contrast, our algorithm can be used for arbitrary data objects as well as a large class of spatial indices. Of course, its level of efficiency may depend on the type of spatial index used. The main advantage of our method compared to the one proposed in <ref> [7] </ref> is that the latter can not be efficiently used to find several of the nearest objects, only the nearest. Also, that method relies on a quadtree-like decomposition.
Reference: 8. <author> M. Lindenbaum and H. Samet. </author> <title> A probabilistic analysis of trie-based sorting of large collections of line segments. </title> <institution> Department of Computer Science CS-TR-3455, University of Maryland, College Park, MD, </institution> <month> April </month> <year> 1995. </year>
Reference-contexts: Suppose that there are N objects. For some object types (e.g., points, lines) it can be shown that under certain assumptions on the data distribution and the tree depth, the number of blocks in a PMR quadtree is proportional to N <ref> [8] </ref>. We also assume that the objects in question are already stored in a spatial index and ignore the cost of the preprocessing needed to build the index.
Reference: 9. <author> R. C. Nelson and H. Samet. </author> <title> A population analysis for hierarchical data structures. </title> <booktitle> In Proceedings of the SIGMOD Conference, </booktitle> <pages> pages 270-277, </pages> <address> San Francisco, </address> <month> May </month> <year> 1987. </year>
Reference-contexts: In order to be able to analyze its execution cost, we must have a concrete representation. We choose a representation that decomposes the objects so that the bounding boxes that contain them are disjoint. Moreover, we assume a regular decomposition such as that provided by the PMR quadtree <ref> [9] </ref>. Of course, other representations (e.g., the R + -tree [15]) could also have been used as well as an implementation where the bounding boxes are not disjoint (e.g., an R-tree [6]).
Reference: 10. <author> J. T. Robinson. </author> <title> The k-d-b-tree: a search structure for large multidimensional dynamic indexes. </title> <booktitle> In Proceedings of the SIGMOD Conference, </booktitle> <pages> pages 10-18, </pages> <address> Ann Arbor, MI, </address> <month> April </month> <year> 1981. </year>
Reference-contexts: Examples of such structures include Proc. of the 4th Symposium on Spatial Databases, Portland, Maine, August 1995 5 R-trees [6], R + -trees [15], and k-d-b-trees <ref> [10] </ref>. The PMR quadtree uses a regular decomposition of space to index spatial objects. Each quadtree block is a square, or a hypercube in higher dimensions.
Reference: 11. <author> N. Roussopoulos, S. Kelley, and F. Vincent. </author> <title> Nearest neighbor queries. </title> <booktitle> In Proceedings of the 1995 ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 71-79, </pages> <address> San Jose, CA, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: The main advantage of our method compared to the one proposed in [7] is that the latter can not be efficiently used to find several of the nearest objects, only the nearest. Also, that method relies on a quadtree-like decomposition. The algorithm presented in <ref> [11] </ref> is limited to points as query objects and the R-tree as spatial index, although it may possibly be extended to work for a wider class of query objects and spatial indices. The algorithm that we presented can be used to find the k nearest neighbors to a query object. <p> The algorithm that we presented can be used to find the k nearest neighbors to a query object. However, in our case, the k is not fixed a-priory. This is in contrast with the algorithm in <ref> [11] </ref> for finding k nearest neighbors. In particular, once it has computed the k nearest neighbors, if the k + 1 st nearest neighbor is desired, then the algorithm must be restarted anew. The analysis below, although incomplete, gives an indication of the worst-case behavior of the algorithm.
Reference: 12. <author> H. Samet. </author> <title> Neighbor finding techniques for images represented by quadtrees. </title> <journal> Computer Graphics and Image Processing, </journal> <volume> 18(1) </volume> <pages> 37-57, </pages> <month> January </month> <year> 1982. </year>
Reference-contexts: Depending on the nature of the distance metric that is employed, we may have to examine blocks that are not immediately adjacent to b. This technique is termed bottom-up because we are obtaining the neighbors using neighbor-finding techniques <ref> [12] </ref> that do not restart the search at the root of the tree. In the case of a pointer-based (i.e., a tree) quadtree representation, they have been shown to visit a constant number of blocks for each neighbor-finding operation.
Reference: 13. <author> H. Samet. </author> <title> Applications of Spatial Data Structures: Computer Graphics, Image Processing, and GIS. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference-contexts: The inherent definition of a quadtree is a representation that recursively decomposes space into congruent blocks until some condition is satisfied. The retrieval of the blocks that comprise the quadtree is facilitated using a number of different access structures <ref> [13] </ref>. The most common access structures are a tree having four sons at each level (see Fig. 1b) or a tree such as a B + -tree [4] that is based on finding an ordering on the blocks.
Reference: 14. <author> H. Samet. </author> <title> The Design and Analysis of Spatial Data Structures. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference-contexts: When the records are such that they also have an extent (e.g., non-point spatial objects), then the notion of a bucket is more meaningful. In particular, there are two possible Proc. of the 4th Symposium on Spatial Databases, Portland, Maine, August 1995 3 approaches <ref> [14] </ref>. The first approach finds a minimum bounding box for the object. These boxes may be subsequently aggregated by use of hierarchies. In such a case, the minimum bounding boxes may not necessarily be disjoint. The drawback is that an object is associated with just one bounding box.
Reference: 15. <author> M. Stonebraker, T. Sellis, and E. Hanson. </author> <title> An analysis of rule indexing implementations in data base systems. </title> <booktitle> In Proceedings of the First International Conference on Expert Database Systems, </booktitle> <pages> pages 353-364, </pages> <address> Charleston, SC, </address> <month> April </month> <year> 1986. </year>
Reference-contexts: We choose a representation that decomposes the objects so that the bounding boxes that contain them are disjoint. Moreover, we assume a regular decomposition such as that provided by the PMR quadtree [9]. Of course, other representations (e.g., the R + -tree <ref> [15] </ref>) could also have been used as well as an implementation where the bounding boxes are not disjoint (e.g., an R-tree [6]). <p> Examples of such structures include Proc. of the 4th Symposium on Spatial Databases, Portland, Maine, August 1995 5 R-trees [6], R + -trees <ref> [15] </ref>, and k-d-b-trees [10]. The PMR quadtree uses a regular decomposition of space to index spatial objects. Each quadtree block is a square, or a hypercube in higher dimensions.
References-found: 15

