URL: ftp://ic.eecs.berkeley.edu/pub/Papers_Talks/Analog_Group/PostScript/CICC93_malavasi.ps.Z
Refering-URL: http://www-cad.eecs.berkeley.edu:80/~charbon/publications/analog-group-publications.html
Root-URL: http://www.cs.berkeley.edu
Title: OPTIMUM STACKED LAYOUT FOR ANALOG CMOS ICs  
Author: Enrico Malavasi Davide Pandini Valentino Liberali 
Degree: Universit a di Padova, Italy Universit a  
Address: Pavia, Italy  
Affiliation: Dipartimento di Elettronica ed Informatica yDipartimento di Elettronica  di  
Abstract: A rigorous and efficient technique is presented for module generation in a maximally stacked layout paradigm for CMOS analog integrated circuits. Analog constraints on symmetry and matching provide a key for heuristics substantially reducing the computational complexity of robust graph algorithms. The solution found minimizes a cost function accounting for parasitic control and routability considerations. Combined with sensitivity analysis and automatic constraint generation, this algorithm provides a suitable performance-driven approach to analog layout module generation. Examples are reported showing the effectiveness of our approach. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. G. R. Degrauwe et al., </author> <title> Towards an Analog System Design Environment, </title> <journal> IEEE Journal of Solid State Circuits, </journal> <volume> 24:3, </volume> <pages> pp. 659-671, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: 1. INTRODUCTION In recent years, several approaches to the automatic synthesis of analog integrated circuits have been proposed <ref> [1, 2, 3] </ref>. Significant efforts have been made toward a consistent performance-driven methodology [4], such that the respect of high-level specifications is guaranteed in all design stages. However, a severe discontinuity is present between schematic definition and physical implementation.
Reference: [2] <author> S. W. Mehranfar, </author> <title> A Technology-Independent Approach to Custom Analog Cell Generation, </title> <journal> IEEE Journal of Solid State Circuits, </journal> <volume> 26:3, </volume> <pages> pp. 386-393, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: 1. INTRODUCTION In recent years, several approaches to the automatic synthesis of analog integrated circuits have been proposed <ref> [1, 2, 3] </ref>. Significant efforts have been made toward a consistent performance-driven methodology [4], such that the respect of high-level specifications is guaranteed in all design stages. However, a severe discontinuity is present between schematic definition and physical implementation.
Reference: [3] <author> J. M. Cohn, D. J. Garrod, R. A. Rutenbar and L. R. Carley, KOAN/ANAGRAM II: </author> <title> New Tools for Device-Level Analog Placement and Routing, </title> <journal> IEEE Journal of Solid State Circuits, </journal> <volume> 26:3, </volume> <pages> pp. 330-342, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: 1. INTRODUCTION In recent years, several approaches to the automatic synthesis of analog integrated circuits have been proposed <ref> [1, 2, 3] </ref>. Significant efforts have been made toward a consistent performance-driven methodology [4], such that the respect of high-level specifications is guaranteed in all design stages. However, a severe discontinuity is present between schematic definition and physical implementation. <p> Condition (2) is the covering condition, that each transistor must appear in a stack. Notice that in every circuit at least one trivial partition P 0 exists, where each chain has exactly one edge. This is often the starting configuration adopted by abutment-based placement tools <ref> [3, 10] </ref>. Stack generation follows a four-step procedure: Step 1 The circuit graph is split into k subgraphs G i ; i = 1; : : : ; k each containing only transistors with the same bulk bias node.
Reference: [4] <author> H. Chang et al., </author> <title> A Top-down, Constraint-Driven Design Methodology for Analog Integrated Circuits, </title> <booktitle> in Proc. CICC, </booktitle> <pages> pp. 841-846, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: 1. INTRODUCTION In recent years, several approaches to the automatic synthesis of analog integrated circuits have been proposed [1, 2, 3]. Significant efforts have been made toward a consistent performance-driven methodology <ref> [4] </ref>, such that the respect of high-level specifications is guaranteed in all design stages. However, a severe discontinuity is present between schematic definition and physical implementation. Most of the existing tools for high-level architectural selection and circuit sizing are based on numeric optimization [5, 6].
Reference: [5] <author> R. Harjani, R. A. Rutenbar and L. R. Carley, </author> <title> Analog Circuit Synthesis for Performance in OASYS, </title> <booktitle> in Proc. ICCAD, </booktitle> <pages> pp. 492-495, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: However, a severe discontinuity is present between schematic definition and physical implementation. Most of the existing tools for high-level architectural selection and circuit sizing are based on numeric optimization <ref> [5, 6] </ref>. Aim of these approachesis to produce schematics with transistor sizes and component values accounting for high-level performance and process specifications. Unfortunately, some performances such as phase margin and bandwidth are strongly influenced by circuit parasitics, which can be evaluated only after the layout is completed.
Reference: [6] <author> H. Y. Koh, C. H. Sequin and P. R. Gray, OPASYN: </author> <title> A compiler for CMOS operational amplifiers, </title> <journal> IEEE Trans. on CAD, </journal> <volume> 9:2, </volume> <pages> pp. 113-126, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: However, a severe discontinuity is present between schematic definition and physical implementation. Most of the existing tools for high-level architectural selection and circuit sizing are based on numeric optimization <ref> [5, 6] </ref>. Aim of these approachesis to produce schematics with transistor sizes and component values accounting for high-level performance and process specifications. Unfortunately, some performances such as phase margin and bandwidth are strongly influenced by circuit parasitics, which can be evaluated only after the layout is completed.
Reference: [7] <author> U. Gatti, F. Maloberti and V. Liberali, </author> <title> Full Stacked Layout of Analogue Cells, </title> <booktitle> in Proc. ISCAS, </booktitle> <pages> pp. 1123-1126, </pages> <year> 1989. </year>
Reference-contexts: Therefore, optimization cannot account for these performances unless considerations on layout are included. So far no methodology has been proposed to automatically account for layout in early stages of circuit design. In <ref> [7] </ref> a design style is proposed, aiming to a full-stacked layout paradigm with densely abutted transistor modules. Advantages of this style are small stray capacitances, easy characterization, improved routability and minimal area. In [8] a layout-driven performance optimization approach is described, suitable for operational amplifiers.
Reference: [8] <author> H. Onodera, H. Kanbara and K. Tamaru, </author> <title> Operational-Amplifier Compilation with Performance Optimization, </title> <journal> IEEE Journal of Solid State Circuits, </journal> <volume> 25:2, </volume> <pages> pp. 466-473, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: In [7] a design style is proposed, aiming to a full-stacked layout paradigm with densely abutted transistor modules. Advantages of this style are small stray capacitances, easy characterization, improved routability and minimal area. In <ref> [8] </ref> a layout-driven performance optimization approach is described, suitable for operational amplifiers. However, the designer is required to provide the detailed floor-plan of the layout, and the result relies heavily on the user's expertise.
Reference: [9] <author> U. Choudhury and A. Sangiovanni-Vincentelli, </author> <title> Constraint Generation for Routing Analog Circuits, </title> <booktitle> in Proc. DAC, </booktitle> <pages> pp. 561-566, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: The optimality criterion is the minimization of a cost function weighing area, critical junction capacitances and routing length. Parasitic criticality is computed with a sensitivity analysis of the electrical performances on the circuit. Bounds on all junction capacitances are defined by a constraint generator <ref> [9] </ref> based on high-level performance specifications. In our algorithm, transistors are split into modules following a set of rules based on a pattern recognition approach. Modules are then abutted to form stacks by a chaining algorithm, which partitions the circuit graph into chains corresponding to the transistor stacks. <p> These limits are used by the constraint generator PARCAR <ref> [9] </ref> to generate bounds C (b) for all capacitances, in such a way that C (min) (n j ) C (b) (n j ) C (max) (n j ), and all circuit specifications are met provided all capacitances are below their bounds.
Reference: [10] <author> E. Charbon, E. Malavasi, U. Choudhury, A. Casotto and A. Sangiovanni-Vincentelli, </author> <title> A Constraint-Driven Placement Methodology for Analog Integrated Circuits, </title> <booktitle> in Proc. CICC, </booktitle> <pages> pp. 2821-2824, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: Condition (2) is the covering condition, that each transistor must appear in a stack. Notice that in every circuit at least one trivial partition P 0 exists, where each chain has exactly one edge. This is often the starting configuration adopted by abutment-based placement tools <ref> [3, 10] </ref>. Stack generation follows a four-step procedure: Step 1 The circuit graph is split into k subgraphs G i ; i = 1; : : : ; k each containing only transistors with the same bulk bias node.
Reference: [11] <author> S. Wimer, R. Y. Pinter and J. A. Feldman, </author> <title> Optimal Chaining of CMOS Transistors in a Functional Cell, </title> <journal> IEEE Trans. on CAD, </journal> <volume> CAD-6:5, </volume> <pages> pp. 795-801, </pages> <month> September </month> <year> 1987. </year>
Reference-contexts: A lower bound applies, based on layout rules and user-specified minimum device width. Rules are not applied if the GCD is smaller than this bound. 4. THE CHAINING ALGORITHM Step 4 is implemented by an improved version of the chaining algorithm described in <ref> [11] </ref>. First all possible chains in the circuit are generated by a dynamic programming procedure. Then the problem of finding a chain partition is transformed into a clique problem [12, p.194] and solved with the Bron-Kerbosch algorithm [13]. <p> Since the non-overlapping condition (1) is necessary for mutual compatibility, every partition is a clique in G c . Every clique found is checked against the coverage condition (2) to determine whether it constitutes a legal partition. In <ref> [11] </ref> a pairing criterion was proposed to apply this algorithm to a layout paradigm, first described in [14], where n-type and p-type transistors are respectively aligned along parallel rows.
Reference: [12] <author> M. R. Garey and D. S. Johnson, </author> <title> Computers and Intractability, </title> <editor> W. H. </editor> <publisher> Freeman & Co., </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: THE CHAINING ALGORITHM Step 4 is implemented by an improved version of the chaining algorithm described in [11]. First all possible chains in the circuit are generated by a dynamic programming procedure. Then the problem of finding a chain partition is transformed into a clique problem <ref> [12, p.194] </ref> and solved with the Bron-Kerbosch algorithm [13]. Every chain is a node for a chain-graph G c , whose edges link two nodes if and only if the corresponding chains are mutually compatible, that is if they can coexist in the same partition.
Reference: [13] <author> C. Bron and J. Kerbosch, </author> <title> Algorithm 457 Finding all cliques of an undirected graph, </title> <journal> Comm. ACM, </journal> <volume> 16:9, </volume> <pages> pp. 575-577, </pages> <year> Sep.1973. </year>
Reference-contexts: First all possible chains in the circuit are generated by a dynamic programming procedure. Then the problem of finding a chain partition is transformed into a clique problem [12, p.194] and solved with the Bron-Kerbosch algorithm <ref> [13] </ref>. Every chain is a node for a chain-graph G c , whose edges link two nodes if and only if the corresponding chains are mutually compatible, that is if they can coexist in the same partition.
Reference: [14] <author> T. Uehara and W. M. vanCleemput, </author> <title> Optimal Layout of CMOS Functional Arrays, </title> <journal> IEEE Trans. on Computers, </journal> <volume> C-30:5, </volume> <pages> pp. 305-312, </pages> <month> May </month> <year> 1980. </year>
Reference-contexts: Every clique found is checked against the coverage condition (2) to determine whether it constitutes a legal partition. In [11] a pairing criterion was proposed to apply this algorithm to a layout paradigm, first described in <ref> [14] </ref>, where n-type and p-type transistors are respectively aligned along parallel rows. However, in analog circuits n-type and p-type transistors are not usually balanced in number and size as they are in standard CMOS logic gates.
Reference: [15] <author> N. Weste and K. Eshraghian, </author> <title> Principles of CMOS VLSI Design, </title> <publisher> Ad-dison Wesley, </publisher> <address> Reading, MA, </address> <year> 1985. </year>
Reference-contexts: THE COST FUNCTION The junction capacitance of the diffusion regions located on an end of a stack is generally larger than the capacitance of internal regions <ref> [15, pp.129ff.] </ref>. For each module width W we denote by C ext (W ) and C int (W ) the maximum values of junction capacitances for diffusion regions respectively in external and internal positions in the stack.
References-found: 15

