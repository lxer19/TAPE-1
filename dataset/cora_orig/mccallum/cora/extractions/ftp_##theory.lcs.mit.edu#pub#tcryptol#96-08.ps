URL: ftp://theory.lcs.mit.edu/pub/tcryptol/96-08.ps
Refering-URL: http://theory.lcs.mit.edu/~tcryptol/1996/96-08.html
Root-URL: 
Email: E-mail: naor@wisdom.weizmann.ac.il.  E-mail: yash@wisdom.weizmann.ac.il.  
Phone: 94-00032.  
Title: Access Control and Signatures via Quorum Secret Sharing  
Author: Moni Naor yz Avishai Wool yx 
Keyword: Quorum systems, replication, distributed computing, security, cryptography.  
Note: Incumbent of the Morris and Rose Goldman Career Development Chair, supported by a grant from the Israel Science Foundation administered by the Israeli Academy of Sciences and Humanities and BSF grant  
Address: Rehovot 76100, Israel.  
Affiliation: Department of Applied Mathematics and Computer Science, The Weizmann Institute,  
Date: May 16, 1996  
Abstract: We suggest a method of controlling the access to a secure database via quorum systems. A quorum system is a collection of sets (quorums) every two of which have a nonempty intersection. Quorum systems have been used for a number of applications in the area of distributed systems. We propose a separation between access servers which are protected and trustworthy, but may be outdated, and the data servers which may all be compromised. The main paradigm is that only the servers in a complete quorum can collectively grant (or revoke) access permission. The method we suggest ensures that after authorization is revoked, a cheating user Alice will not be able to access the data even if many access servers still consider her authorized, and even if the complete raw database is available to her. The method has a low overhead in terms of communication and computation. It can also be converted into a distributed system for issuing secure signatures. fl An extended abstract of this paper appeared in the 3rd ACM Conf. Computer and Communication Security, 1996 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Agrawal and A. El-Abbadi. </author> <title> An efficient and fault-tolerant solution for distributed mutual exclusion. </title> <journal> ACM Trans. Comp. Sys., </journal> <volume> 9(1) </volume> <pages> 1-20, </pages> <year> 1991. </year>
Reference-contexts: We apply some recent constructions suggested in <ref> [1, 26, 35, 38] </ref>. Secret sharing: Secret sharing (cf. [43]) was originally suggested for threshold access structures by Shamir and Blakely [42, 4]. It was extended to arbitrary access structures in [22]. <p> In other words, a strategy gives the frequency of picking quorum Q j . Definition 2.7 Let a quorum system Q = (Q 1 ; : : : ; Q m ) be given over a universe U . Then w 2 <ref> [0; 1] </ref> m is a strategy for Q if it is a probability distribution over the quorums Q j 2 Q, i.e., j=1 w j = 1. <p> The quorums in the HQS are all of size n 0:63 . The Tree quorum system of <ref> [1] </ref> can also be described as a ternary tree, with internal nodes which are 2-of-3 majority gates. However only two input lines of each internal majority gate are connected to lower level gates; the middle input line is directly labeled with a system element.
Reference: [2] <author> A. Beimel and B. Chor. </author> <title> Universally ideal secret sharing schemes. </title> <booktitle> In Advances in Cryptology - CRYPTO'92, </booktitle> <volume> LNCS 740, </volume> <pages> pages 183-195. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Secret sharing: Secret sharing (cf. [43]) was originally suggested for threshold access structures by Shamir and Blakely [42, 4]. It was extended to arbitrary access structures in [22]. The issue of efficiency (i.e., share sizes) of such schemes has been considered in several papers (cf. <ref> [6, 5, 2] </ref>). Schemes suggested in [3] for structures represented by monotone formulas turn out to be important for our quorum systems. The most general access structures for which efficient secret sharing schemes are known is that of span programs [24]. All our schemes fall into this category.
Reference: [3] <author> J. Benaloh and J. Leichter. </author> <title> Generalized secret sharing and monotone functions. </title> <booktitle> In Advances in Cryptology - CRYPTO'88, </booktitle> <volume> LNCS 403, </volume> <pages> pages 27-36. </pages> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: It was extended to arbitrary access structures in [22]. The issue of efficiency (i.e., share sizes) of such schemes has been considered in several papers (cf. [6, 5, 2]). Schemes suggested in <ref> [3] </ref> for structures represented by monotone formulas turn out to be important for our quorum systems. The most general access structures for which efficient secret sharing schemes are known is that of span programs [24]. All our schemes fall into this category. <p> F p (AndOr) exp (( p n)) when p &lt; 1 4 , and F p exp ((n 0:19 )) if p 0:38 (n 0:19 ). 6.4.2 The Scheme AndOr-SSS Since the AndOr system has a very simple description in terms of boolean functions, we can apply the scheme of <ref> [3] </ref>. The basic secret unit is a single bit. <p> A secret s is (recursively) split 20 over an OR gate by assigning each input a copy of s, and over an AND gate by assigning the inputs with random values s 1 ; s 2 such that s 1 s 2 = s. In <ref> [3] </ref> it is proved that this is an SSS for any monotone boolean function.
Reference: [4] <author> G. R. Blakely. </author> <title> Safeguarding cryptographic keys. </title> <booktitle> Proc. AFIPS, NCC, </booktitle> <volume> 48 </volume> <pages> 313-317, </pages> <year> 1979. </year>
Reference-contexts: We apply some recent constructions suggested in [1, 26, 35, 38]. Secret sharing: Secret sharing (cf. [43]) was originally suggested for threshold access structures by Shamir and Blakely <ref> [42, 4] </ref>. It was extended to arbitrary access structures in [22]. The issue of efficiency (i.e., share sizes) of such schemes has been considered in several papers (cf. [6, 5, 2]). Schemes suggested in [3] for structures represented by monotone formulas turn out to be important for our quorum systems.
Reference: [5] <author> C. Blundo, A. De Santis, L. Gargano, and U. Vaccaro. </author> <title> On the information rate of secret sharing schemes. </title> <booktitle> In Advances in Cryptology - CRYPTO'92, </booktitle> <volume> LNCS 740, </volume> <pages> pages 148-167. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Secret sharing: Secret sharing (cf. [43]) was originally suggested for threshold access structures by Shamir and Blakely [42, 4]. It was extended to arbitrary access structures in [22]. The issue of efficiency (i.e., share sizes) of such schemes has been considered in several papers (cf. <ref> [6, 5, 2] </ref>). Schemes suggested in [3] for structures represented by monotone formulas turn out to be important for our quorum systems. The most general access structures for which efficient secret sharing schemes are known is that of span programs [24]. All our schemes fall into this category.
Reference: [6] <author> E. F. Brickell and D. M. Davenport. </author> <title> On the classification of ideal secret sharing schemes. </title> <booktitle> In Advances in Cryptology - CRYPTO'89, </booktitle> <volume> LNCS 435, </volume> <pages> pages 278-285. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Secret sharing: Secret sharing (cf. [43]) was originally suggested for threshold access structures by Shamir and Blakely [42, 4]. It was extended to arbitrary access structures in [22]. The issue of efficiency (i.e., share sizes) of such schemes has been considered in several papers (cf. <ref> [6, 5, 2] </ref>). Schemes suggested in [3] for structures represented by monotone formulas turn out to be important for our quorum systems. The most general access structures for which efficient secret sharing schemes are known is that of span programs [24]. All our schemes fall into this category.
Reference: [7] <author> S. Y. Cheung, M. H. Ammar, and M. Ahamad. </author> <title> The grid protocol: A high performance scheme for maintaining replicated data. </title> <journal> IEEE Trans. Knowledge and Data Eng., </journal> <volume> 4(6) </volume> <pages> 582-592, </pages> <year> 1992. </year>
Reference-contexts: This family includes, among others, the CWlog system (see Figure 6), the grid of <ref> [7] </ref> and the triangular wall of [28]. The elements of a wall are logically arranged in rows of varying widths.
Reference: [8] <author> S. B. Davidson, H. Garcia-Molina, and D. Skeen. </author> <title> Consistency in partitioned networks. </title> <journal> ACM Computing Surveys, </journal> <volume> 17(3) </volume> <pages> 341-370, </pages> <year> 1985. </year>
Reference-contexts: In particular it is not clear whether any of the provably secure signature schemes may be implemented. 1.3 Tools Quorum systems: Quorum systems have been used in the study of distributed control and management problems such as mutual exclusion (cf. [13, 40]), data replication protocols (cf. <ref> [8, 19, 23] </ref>), name servers (cf. [34]) and selective dissemination of information (cf. [47]). We apply some recent constructions suggested in [1, 26, 35, 38]. Secret sharing: Secret sharing (cf. [43]) was originally suggested for threshold access structures by Shamir and Blakely [42, 4].
Reference: [9] <author> A. De Santis, Y. Desmet, Y. Frankel, and M. Yung. </author> <title> How to share a function securely. </title> <booktitle> In Proc. 26th ACM Symp. Theory of Computing, </booktitle> <pages> pages 522-533, </pages> <year> 1994. </year>
Reference-contexts: Therefore if we replace the k-of-n scheme 2 by our quorum secret sharing schemes, the protocol would then gain their efficiency, high availability and low load. A related line of research is that of group signatures [10] and function sharing <ref> [9] </ref>: for processors to share a function F means that only a group of k processors can evaluate F (x), and no information is transferred about F from the shares related to x. Hence, the issue of granularity is dealt with.
Reference: [10] <author> Y. Desmet and Y. Frankel. </author> <title> Shared generation of authenticators and signatures. </title> <booktitle> In Advances in Cryptology - CRYPTO'91, </booktitle> <volume> LNCS 576, </volume> <pages> pages 457-469. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Therefore if we replace the k-of-n scheme 2 by our quorum secret sharing schemes, the protocol would then gain their efficiency, high availability and low load. A related line of research is that of group signatures <ref> [10] </ref> and function sharing [9]: for processors to share a function F means that only a group of k processors can evaluate F (x), and no information is transferred about F from the shares related to x. Hence, the issue of granularity is dealt with. <p> Reconstruction: When Bob collects the shares s i from a set of servers A 2 A, he obtains the signature using the reconstruction function for set A, s = h A (fs i g i2A ). that unlike <ref> [10] </ref>, the faults we allow in the servers are all benign, and therefore our scheme has a high level of trust in them. A server in our scheme that "turns traitor" can generate a complete signature for any message. There are signature servers, which form the universe U .
Reference: [11] <author> C. Dwork and M. Naor. </author> <title> An efficient existentially unforgeable signature scheme and its applications. </title> <editor> In Yvo G. Desmedt, editor, </editor> <booktitle> Advances in Cryptology - CRYPTO'94, </booktitle> <volume> LNCS 839, </volume> <pages> pages 234-246. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: As a heuristic, it is possible to replace the pseudo-random function with a private-key encryption function, such as DES. Signatures: Digital signatures have been investigated extensively (cf. <ref> [17, 11] </ref> and the references therein). Our scheme can take any signature scheme and transform it into a distributed quorum based scheme, without altering its security. The notion of security we consider is that of existential unforgeability.
Reference: [12] <author> A. Fu. </author> <title> Enhancing Concurrency and Availability for Database Systems. </title> <type> PhD thesis, </type> <institution> Simon Fraser University, Burnaby, B.C., Canada, </institution> <year> 1990. </year> <month> 24 </month>
Reference-contexts: record is semantically secure.) * Instead of a quorum system as in definition 2.1, we can use it's standard generalization to a read/write system, i.e., a pair of set systems (R; W) such that R " W 6= ? for any sets R 2 R and W 2 W (cf., <ref> [19, 12] </ref>). With this formulation, the basic paradigm is that to gain access a user must obtain permission from a read-quorum R 2 R. To revoke a user's access, a write-quorum W 2 W must be informed.
Reference: [13] <author> H. Garcia-Molina and D. Barbara. </author> <title> How to assign votes in a distributed system. </title> <journal> J. ACM, </journal> <volume> 32(4) </volume> <pages> 841-860, </pages> <year> 1985. </year>
Reference-contexts: In particular it is not clear whether any of the provably secure signature schemes may be implemented. 1.3 Tools Quorum systems: Quorum systems have been used in the study of distributed control and management problems such as mutual exclusion (cf. <ref> [13, 40] </ref>), data replication protocols (cf. [8, 19, 23]), name servers (cf. [34]) and selective dissemination of information (cf. [47]). We apply some recent constructions suggested in [1, 26, 35, 38]. Secret sharing: Secret sharing (cf. [43]) was originally suggested for threshold access structures by Shamir and Blakely [42, 4].
Reference: [14] <author> O. Goldreich. </author> <title> Two remarks concerning the Goldwasser-Micali-Rivest signature scheme. </title> <editor> In A.M. Odlyzko, editor, </editor> <booktitle> Advances in Cryptology - CRYPTO'86, </booktitle> <volume> LNCS 263, </volume> <pages> pages 104-110. </pages> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: Note that every edge e 2 G (d) has a dual edge e fl 2 G fl (d) which crosses it. We call such e and e fl a dual pair of edges. 3 Note that using <ref> [14] </ref> we can convert any signature scheme into one where each message has a unique signature. 15 Definition 6.2 We identify an element in the Paths quorum system with a dual pair of edges e 2 G (d) and e fl 2 G fl (d).
Reference: [15] <author> O. Goldreich. </author> <title> Foundations of cryptography (fragments of a book). </title> <booktitle> Electronic Colloquium on Computational Complexity, </booktitle> <year> 1995. </year> <note> Electronic Publication: http://www.eccc.uni-trier.de /eccc/info/ECCC-Books/eccc-books.html. </note>
Reference-contexts: However, note that the files are opened at the user's request after seeing their encrypted versions. To the best of our knowledge, the common definition of security of encryption (semantic, see <ref> [15, 29] </ref>) does not allow us to conclude the following: if the keys for decrypting 50 out of the 100 files (say) are given, then nothing can be learned about the remaining 50 files.
Reference: [16] <author> O. Goldreich, S. Goldwasser, and S. Micali. </author> <title> How to construct random functions. </title> <journal> J. ACM, </journal> <volume> 33 </volume> <pages> 792-807, </pages> <year> 1986. </year>
Reference-contexts: The most general access structures for which efficient secret sharing schemes are known is that of span programs [24]. All our schemes fall into this category. Krawczyk [25] suggested the notion of computational secret sharing which we adopt for our purposes. Pseudo-random functions: Our constructions employ pseudo-random functions (cf. <ref> [16, 29] </ref>) for two purposes: encrypting the database and generating coin flips for the secret sharing schemes we use. As a heuristic, it is possible to replace the pseudo-random function with a private-key encryption function, such as DES. <p> Therefore we assume that Alice cannot masquerade as Bob and obtain access permission by this. The protocol ACP of figure 1 shows how to transform an SSS to an access control mechanism. We use the standard notion of a pseudo-random function (PRF), cf. <ref> [16, 29] </ref>. 3.2 The Notion of Security To specify the security of a cryptographic scheme we should describe (i) the type of attack assumed, i.e., the power of the adversary, and (ii) what is meant by breaking the system, i.e., what tasks the adversary can perform as a result of the
Reference: [17] <author> S. Goldwasser, S. Micali, and R. Rivest. </author> <title> A digital signature scheme secure against adaptive chosen-message attacks. </title> <journal> SIAM J. Computing, </journal> <volume> 17(2), </volume> <year> 1988. </year>
Reference-contexts: As a heuristic, it is possible to replace the pseudo-random function with a private-key encryption function, such as DES. Signatures: Digital signatures have been investigated extensively (cf. <ref> [17, 11] </ref> and the references therein). Our scheme can take any signature scheme and transform it into a distributed quorum based scheme, without altering its security. The notion of security we consider is that of existential unforgeability. <p> Our protocol can be based on any signature scheme, without altering the security properties of the scheme. Specifically, consider the "existentially unforgeable against adaptive chosen message attacks" definition of security, as defined by <ref> [17] </ref>. Let Sig (m) be a signa 14 ture scheme obeying this requirement 3 . Suppose that a user Alice was authorized to get signatures for a while and then this authorization was revoked.
Reference: [18] <author> L. Gong. </author> <title> Increasing availability and security of an authentication service. </title> <journal> IEEE J. Selected Areas Comm., </journal> <volume> 11(5) </volume> <pages> 657-662, </pages> <year> 1993. </year>
Reference-contexts: They too rely on a k-of-n threshold scheme, and do not separate between the data servers and the access servers. The issue of availability is addressed by Gong <ref> [18] </ref>, in the context of a secure authentication service. The suggested protocol uses a k-of-n threshold scheme, however in fact any secret sharing scheme could be used instead.
Reference: [19] <author> M. P. Herlihy. </author> <title> Replication Methods for Abstract Data Types. </title> <type> PhD thesis, </type> <institution> Massachusetts Institute of Technology, MIT/LCS/TR-319, </institution> <year> 1984. </year>
Reference-contexts: In particular it is not clear whether any of the provably secure signature schemes may be implemented. 1.3 Tools Quorum systems: Quorum systems have been used in the study of distributed control and management problems such as mutual exclusion (cf. [13, 40]), data replication protocols (cf. <ref> [8, 19, 23] </ref>), name servers (cf. [34]) and selective dissemination of information (cf. [47]). We apply some recent constructions suggested in [1, 26, 35, 38]. Secret sharing: Secret sharing (cf. [43]) was originally suggested for threshold access structures by Shamir and Blakely [42, 4]. <p> record is semantically secure.) * Instead of a quorum system as in definition 2.1, we can use it's standard generalization to a read/write system, i.e., a pair of set systems (R; W) such that R " W 6= ? for any sets R 2 R and W 2 W (cf., <ref> [19, 12] </ref>). With this formulation, the basic paradigm is that to gain access a user must obtain permission from a read-quorum R 2 R. To revoke a user's access, a write-quorum W 2 W must be informed.
Reference: [20] <author> M. P. Herlihy and J. D. Tygar. </author> <title> How to make replicated data secure. </title> <booktitle> In Advances in Cryptology - CRYPTO'87, </booktitle> <volume> LNCS 293, </volume> <pages> pages 379-391. </pages> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: We believe that the level of trust which we assume for the servers is reasonable in applications similar to the ones sketched above. However we consider decreasing this trust, without significant degradation of the protocol's advantages, to be a major open question. 1.2 Related Work Herlihy and Tygar <ref> [20] </ref> have suggested a scheme to protect quorum based replicated databases.
Reference: [21] <author> T. Ibaraki and T. Kameda. </author> <title> A theory of coteries: Mutual exclusion in distributed systems. </title> <journal> IEEE Trans. Par. Dist. Sys., </journal> <volume> 4(7) </volume> <pages> 779-794, </pages> <year> 1993. </year>
Reference-contexts: A coterie S is called dominated if there exists a coterie R such that R S. If no such coterie exists then S is non-dominated. Lemma 2.5 <ref> [21] </ref> Let S be a coterie and let A (S) be its access structure. Then S is non-dominated iff for all X U , either X 2 A (S) or U n X 2 A (S) (but not both). <p> However only two input lines of each internal majority gate are connected to lower level gates; the middle input line is directly labeled with a system element. Note that the standard description of this quorum system is via a binary tree; the description given here is from <ref> [21] </ref>. The smallest quorums in the Tree are of size log n. <p> Remark: The above scheme works for any quorum system having a description in the form of a tree of 2-of-3 majority gates, with the system elements labeling the input lines. In <ref> [33, 21, 27] </ref> it is shown that any maximal quorum system has such a description.
Reference: [22] <author> M. Ito, A. Saito, and T. Nishizeki. </author> <title> Secret sharing schemes realizing general access structure. </title> <booktitle> In Proc. IEEE Global Telecommunication Conf. </booktitle> <volume> (Globecomm 87), </volume> <pages> pages 99-102, </pages> <year> 1987. </year>
Reference-contexts: We apply some recent constructions suggested in [1, 26, 35, 38]. Secret sharing: Secret sharing (cf. [43]) was originally suggested for threshold access structures by Shamir and Blakely [42, 4]. It was extended to arbitrary access structures in <ref> [22] </ref>. The issue of efficiency (i.e., share sizes) of such schemes has been considered in several papers (cf. [6, 5, 2]). Schemes suggested in [3] for structures represented by monotone formulas turn out to be important for our quorum systems.
Reference: [23] <author> S. Jajodia and D. Mutchler. </author> <title> Dynamic voting algorithms for maintaining the consistency of a replicated database. </title> <journal> ACM Trans. Database Sys., </journal> <volume> 15(2) </volume> <pages> 230-280, </pages> <year> 1990. </year>
Reference-contexts: In particular it is not clear whether any of the provably secure signature schemes may be implemented. 1.3 Tools Quorum systems: Quorum systems have been used in the study of distributed control and management problems such as mutual exclusion (cf. [13, 40]), data replication protocols (cf. <ref> [8, 19, 23] </ref>), name servers (cf. [34]) and selective dissemination of information (cf. [47]). We apply some recent constructions suggested in [1, 26, 35, 38]. Secret sharing: Secret sharing (cf. [43]) was originally suggested for threshold access structures by Shamir and Blakely [42, 4].
Reference: [24] <author> M. Karchmer and A. Wigderson. </author> <title> On span programs. </title> <booktitle> In Proc. Structures in Complexity Theory, </booktitle> <pages> pages 102-111, </pages> <year> 1993. </year>
Reference-contexts: Schemes suggested in [3] for structures represented by monotone formulas turn out to be important for our quorum systems. The most general access structures for which efficient secret sharing schemes are known is that of span programs <ref> [24] </ref>. All our schemes fall into this category. Krawczyk [25] suggested the notion of computational secret sharing which we adopt for our purposes. Pseudo-random functions: Our constructions employ pseudo-random functions (cf. [16, 29]) for two purposes: encrypting the database and generating coin flips for the secret sharing schemes we use. <p> also achieves the highest availability possible for such a load, namely F p (Paths) = exp (( p The smallest quorums in the Paths system have cardinality O ( p 6.1.2 The Scheme Paths-SSS The scheme is based on the construction of Rudich for st connectivity that was generalized in <ref> [24] </ref> for span programs. The system elements in the Paths system are the edges of the grid, however we first assign intermediate values to the vertices, from which we compute the shares. The basic secret unit s is a single bit.
Reference: [25] <author> H. Krawczyk. </author> <title> Secret sharing made short. </title> <booktitle> In Advances in Cryptology - CRYPTO'93, </booktitle> <volume> LNCS 773, </volume> <pages> pages 136-146. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Schemes suggested in [3] for structures represented by monotone formulas turn out to be important for our quorum systems. The most general access structures for which efficient secret sharing schemes are known is that of span programs [24]. All our schemes fall into this category. Krawczyk <ref> [25] </ref> suggested the notion of computational secret sharing which we adopt for our purposes. Pseudo-random functions: Our constructions employ pseudo-random functions (cf. [16, 29]) for two purposes: encrypting the database and generating coin flips for the secret sharing schemes we use. <p> It seems that using Key ff (x) as the (short) seed for some other PRF whose (long) output then encrypts the data would yield an equally secure protocol (this is an adaptation of Krawczyk's <ref> [25] </ref> computational secret sharing). <p> This makes the protocol ridiculous if we make the assumptions of protocol ACP, namely that the key is as long as the data item itself, since the database size increases by a factor of n + 1. However if the key is much shorter than the data (cf. <ref> [25] </ref>), then this overhead can be tolerated. * The protocol is not flexible, in that it requires the number of servers n and their private functions E i to be fixed when the database is created.
Reference: [26] <author> A. Kumar. </author> <title> Hierarchical quorum consensus: A new algorithm for managing replicated data. </title> <journal> IEEE Trans. Comput., </journal> <volume> 40(9) </volume> <pages> 996-1004, </pages> <year> 1991. </year>
Reference-contexts: We apply some recent constructions suggested in <ref> [1, 26, 35, 38] </ref>. Secret sharing: Secret sharing (cf. [43]) was originally suggested for threshold access structures by Shamir and Blakely [42, 4]. It was extended to arbitrary access structures in [22]. <p> Hence P (jl r) = P (jl r). 6.2 The HQS and Tree Systems 6.2.1 The Systems The hierarchical quorum system (HQS) is due to <ref> [26] </ref>. In this system the elements are the leaves of a complete ternary tree, in which the internal nodes are 2-of-3 majority gates. In [36] the availability and load of the HQS are analyzed. It is shown that L (HQS) = n 0:37 .
Reference: [27] <author> D. E. Loeb. </author> <title> A new proof of Monjardet's median theorem, 1994. </title> <type> Manuscript, </type> <note> to appear in J. Comb. Theory, Series A. </note>
Reference-contexts: Remark: The above scheme works for any quorum system having a description in the form of a tree of 2-of-3 majority gates, with the system elements labeling the input lines. In <ref> [33, 21, 27] </ref> it is shown that any maximal quorum system has such a description.
Reference: [28] <author> L. Lovasz. </author> <title> Coverings and colorings of hypergraphs. </title> <booktitle> In Proc. 4th Southeastern Conf. Combinatorics, Graph Theory and Computing, </booktitle> <pages> pages 3-12, </pages> <year> 1973. </year> <month> 25 </month>
Reference-contexts: This family includes, among others, the CWlog system (see Figure 6), the grid of [7] and the triangular wall of <ref> [28] </ref>. The elements of a wall are logically arranged in rows of varying widths.
Reference: [29] <author> M. Luby. </author> <title> Pseudorandomenss and Cryptographic Applications. </title> <publisher> Princeton Universtity Press, </publisher> <address> Princeton, New Jersey, </address> <year> 1996. </year>
Reference-contexts: The most general access structures for which efficient secret sharing schemes are known is that of span programs [24]. All our schemes fall into this category. Krawczyk [25] suggested the notion of computational secret sharing which we adopt for our purposes. Pseudo-random functions: Our constructions employ pseudo-random functions (cf. <ref> [16, 29] </ref>) for two purposes: encrypting the database and generating coin flips for the secret sharing schemes we use. As a heuristic, it is possible to replace the pseudo-random function with a private-key encryption function, such as DES. <p> Therefore we assume that Alice cannot masquerade as Bob and obtain access permission by this. The protocol ACP of figure 1 shows how to transform an SSS to an access control mechanism. We use the standard notion of a pseudo-random function (PRF), cf. <ref> [16, 29] </ref>. 3.2 The Notion of Security To specify the security of a cryptographic scheme we should describe (i) the type of attack assumed, i.e., the power of the adversary, and (ii) what is meant by breaking the system, i.e., what tasks the adversary can perform as a result of the <p> However, note that the files are opened at the user's request after seeing their encrypted versions. To the best of our knowledge, the common definition of security of encryption (semantic, see <ref> [15, 29] </ref>) does not allow us to conclude the following: if the keys for decrypting 50 out of the 100 files (say) are given, then nothing can be learned about the remaining 50 files.
Reference: [30] <author> M. Maekawa. </author> <title> A p n algorithm for mutual exclusion in decentralized systems. </title> <journal> ACM Trans. Comp. Sys., </journal> <volume> 3(2) </volume> <pages> 145-159, </pages> <year> 1985. </year>
Reference-contexts: Note that not all quorum systems enjoy these properties. For instance, the majority system [45], i.e., the n+1 2 -of-n threshold system, has optimal availability but induces a high load and has large quorums. At the other extreme, the finite projective plane <ref> [30] </ref> has optimal load but very poor availability. We suggest using some recent constructions of quorum systems that have optimal performance according to the above criteria. We show how to convert secret sharing schemes for access structures corresponding to these quorum systems into solutions for our problems. <p> system (assuming that each processor becomes faulty independently with probability p). * We have found secret sharing schemes for many interesting quorum systems (falling into the category of span programs), however there are some for which it is not clear whether a good scheme exists, for example the projective plane <ref> [30] </ref>.
Reference: [31] <author> S. Micali and R. Sidney. </author> <title> A simple method for generating and sharing pseudo-random functions for applications to clipper-like key escrow systems. </title> <editor> In D. Coppersmith, editor, </editor> <booktitle> Advances in Cryptology - CRYPTO'95, </booktitle> <volume> LNCS 963, </volume> <pages> pages 185-196. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Our scheme can take any signature scheme and transform it into a distributed quorum based scheme, without altering its security. The notion of security we consider is that of existential unforgeability. However our transformation is 1 We have recently made some progress regarding this question. See also <ref> [31] </ref>. 3 independent of the basic signature scheme itself, so we can as easily create a quorum signature scheme out of heuristic signature schemes, such as RSA with MD5. 1.4 New Results In this work we propose a separation between the access servers and the data servers.
Reference: [32] <author> S. P. Miller, B. C. Neuman, J. L. Schiller, and J. H. Saltzer. </author> <title> Kerberos authentication and authorization system. Project Athena Technical Plan, Section E.2.1, </title> <publisher> MIT, </publisher> <year> 1988. </year>
Reference-contexts: If a quorum of access servers authorizes the gateway to honor Bob's request, the gateway sends the key to Bob, in one piece. This can be done since the gateway knows all the keys. The second variant of this protocol works in the "Kerberos model" <ref> [32] </ref>. Here again there are gateways which hold all the database keys. In addition, the access servers have a signature scheme 2 which the gateways can verify. In this variant, Bob requests permission from the access servers directly.
Reference: [33] <author> B. Monjardet. </author> <title> Characterisation des elements ipsoduaux du treillis distributif libre. </title> <editor> C. R. </editor> <publisher> Acad. </publisher> <address> Sc. Paris, </address> <booktitle> serie A, </booktitle> <volume> 274 </volume> <pages> 12-15, </pages> <year> 1972. </year>
Reference-contexts: Remark: The above scheme works for any quorum system having a description in the form of a tree of 2-of-3 majority gates, with the system elements labeling the input lines. In <ref> [33, 21, 27] </ref> it is shown that any maximal quorum system has such a description.
Reference: [34] <author> S. J. Mullender and P. M. B. Vitanyi. </author> <title> Distributed match-making. </title> <journal> Algorithmica, </journal> <volume> 3 </volume> <pages> 367-391, </pages> <year> 1988. </year>
Reference-contexts: it is not clear whether any of the provably secure signature schemes may be implemented. 1.3 Tools Quorum systems: Quorum systems have been used in the study of distributed control and management problems such as mutual exclusion (cf. [13, 40]), data replication protocols (cf. [8, 19, 23]), name servers (cf. <ref> [34] </ref>) and selective dissemination of information (cf. [47]). We apply some recent constructions suggested in [1, 26, 35, 38]. Secret sharing: Secret sharing (cf. [43]) was originally suggested for threshold access structures by Shamir and Blakely [42, 4]. It was extended to arbitrary access structures in [22].
Reference: [35] <author> M. Naor and A. Wool. </author> <title> The load, capacity and availability of quorum systems. </title> <booktitle> In Proc. 35th IEEE Symp. Foundations of Comp. Sci. (FOCS), </booktitle> <pages> pages 214-225, </pages> <year> 1994. </year> <note> To appear in SIAM J. Computing. </note>
Reference-contexts: We apply some recent constructions suggested in <ref> [1, 26, 35, 38] </ref>. Secret sharing: Secret sharing (cf. [43]) was originally suggested for threshold access structures by Shamir and Blakely [42, 4]. It was extended to arbitrary access structures in [22]. <p> For every element i 2 U , a strategy w of picking quorums induces the frequency of accessing element i, which we call the load on i. The system load, L (Q), is the load on the busiest element induced by the best possible strategy. Formally, following <ref> [35] </ref>: Definition 2.8 Let a strategy w be given for a quorum system Q = (Q 1 ; : : : ; Q m ) over a universe U . <p> All the schemes we present are extremely efficient, with blowup factors of at most 2 and linear time complexities both for the share generation and secret reconstruction operations. 6.1 The Paths System 6.1.1 The System The Paths system <ref> [35] </ref> is based on paths in the following grid. <p> A quorum in the system is the union of (elements identified with) the edges of a left-right path in G (d) and the edges of a top-bottom path in G fl (d). In <ref> [35] </ref> it is shown that the Paths system has an optimal load of L (Paths) = O (1= p also achieves the highest availability possible for such a load, namely F p (Paths) = exp (( p The smallest quorums in the Paths system have cardinality O ( p 6.1.2 The <p> Hence P (js) = P (js), and we are done. Proposition 6.8 For any crumbling wall CW, CW-SSS is a secret sharing scheme realizing the quorum access structure A (CW), with fi (CW-SSS) = 2. 6.4 The AndOr System 6.4.1 The System The AndOr system appears in <ref> [35] </ref>, and applies the analysis of AND/OR trees of [46]. Consider a complete rooted binary tree of height h, and identify the n = 2 h leaves of the tree with the system elements. <p> The gates alternate between AND and OR, level by level. The only difference between the two functions is that one function has an AND gate at the root while the other has an OR gate there. In <ref> [35] </ref> it is shown that this indeed is a quorum system, with quorums of size O ( p has an optimal load of L (AndOr) = O (1= p n).
Reference: [36] <author> M. Naor and A. Wool. </author> <title> The load, capacity and availability of quorum systems. </title> <type> Technical Report CS95-03, </type> <institution> The Weizmann Institute of Science, Rehovot, Israel, </institution> <year> 1995. </year>
Reference-contexts: Hence P (jl r) = P (jl r). 6.2 The HQS and Tree Systems 6.2.1 The Systems The hierarchical quorum system (HQS) is due to [26]. In this system the elements are the leaves of a complete ternary tree, in which the internal nodes are 2-of-3 majority gates. In <ref> [36] </ref> the availability and load of the HQS are analyzed. It is shown that L (HQS) = n 0:37 . <p> Note that the standard description of this quorum system is via a binary tree; the description given here is from [21]. The smallest quorums in the Tree are of size log n. In <ref> [37, 36] </ref> it is shown that the Tree has optimal availability and load among the quorum systems with logarithmic size quorums, namely F p (Tree) = O (n " ) for some constant "(p) &gt; 0, and L (Tree) = O ( 1 ): 6.2.2 The Schemes HQS-SSS and Tree-SSS The
Reference: [37] <author> D. Peleg and A. Wool. </author> <title> The availability of quorum systems. </title> <journal> Information and Computation, </journal> <volume> 123(2) </volume> <pages> 210-223, </pages> <year> 1995. </year>
Reference-contexts: We assume that the elements (servers) fail independently with a fixed 5 uniform probability p. We assume that the failures are transient, that the failures are crash failures (i.e., a failed element stops to function rather than functions incorrectly), and that they are detectable. Following <ref> [37] </ref> we define: Definition 2.6 For every quorum Q 2 Q let E Q be the event that Q is hit, i.e., at least one element i 2 Q has failed. <p> Note that the standard description of this quorum system is via a binary tree; the description given here is from [21]. The smallest quorums in the Tree are of size log n. In <ref> [37, 36] </ref> it is shown that the Tree has optimal availability and load among the quorum systems with logarithmic size quorums, namely F p (Tree) = O (n " ) for some constant "(p) &gt; 0, and L (Tree) = O ( 1 ): 6.2.2 The Schemes HQS-SSS and Tree-SSS The
Reference: [38] <author> D. Peleg and A. Wool. Crumbling walls: </author> <title> A class of practical and efficient quorum systems. </title> <booktitle> In Proc. 14th ACM Symp. Princip. Distributed Computing (PODC), </booktitle> <pages> pages 120-129, </pages> <address> Ottawa, Canada, </address> <year> 1995. </year> <note> To appear in Distributed Computing. </note>
Reference-contexts: We apply some recent constructions suggested in <ref> [1, 26, 35, 38] </ref>. Secret sharing: Secret sharing (cf. [43]) was originally suggested for threshold access structures by Shamir and Blakely [42, 4]. It was extended to arbitrary access structures in [22]. <p> bounds are shown for the of number times that an element can appear on input lines, so using our scheme on such a description could potentially cause a high blowup. 6.3 The Crumbling Wall System 6.3.1 The System The Crumbling Walls (CW) are a family of quorum systems due to <ref> [38] </ref>. This family includes, among others, the CWlog system (see Figure 6), the grid of [7] and the triangular wall of [28]. The elements of a wall are logically arranged in rows of varying widths. <p> A quorum in a wall is the union of one full row and a representative from every row below the full row. 18 Here we concentrate on walls in which the top row has width n 1 = 1 and every other row has width n i 2. In <ref> [38] </ref> it is shown that such walls are non-dominated coteries (recall Definition 2.4). In the CWlog system, the width of row i is n i = blg 2ic. In [39] it is shown that the CWlog system is essentially the only high availability wall.
Reference: [39] <author> D. Peleg and A. Wool. </author> <title> The availability of crumbling wall quorum systems. </title> <journal> Discrete Applied Math., </journal> <note> 1996. To appear. </note>
Reference-contexts: In [38] it is shown that such walls are non-dominated coteries (recall Definition 2.4). In the CWlog system, the width of row i is n i = blg 2ic. In <ref> [39] </ref> it is shown that the CWlog system is essentially the only high availability wall.
Reference: [40] <author> M. Raynal. </author> <title> Algorithms for Mutual Exclusion. </title> <publisher> MIT press, </publisher> <year> 1986. </year>
Reference-contexts: In particular it is not clear whether any of the provably secure signature schemes may be implemented. 1.3 Tools Quorum systems: Quorum systems have been used in the study of distributed control and management problems such as mutual exclusion (cf. <ref> [13, 40] </ref>), data replication protocols (cf. [8, 19, 23]), name servers (cf. [34]) and selective dissemination of information (cf. [47]). We apply some recent constructions suggested in [1, 26, 35, 38]. Secret sharing: Secret sharing (cf. [43]) was originally suggested for threshold access structures by Shamir and Blakely [42, 4].
Reference: [41] <author> M. K. Reiter and K. P. Birman. </author> <title> How to securely replicate services. </title> <journal> ACM Trans. Prog. Lang. Sys., </journal> <volume> 16(3) </volume> <pages> 986-1009, </pages> <year> 1994. </year>
Reference-contexts: Reiter and Birman <ref> [41] </ref> considered a database protection scheme in a scenario which is the reverse of ours, namely against servers being corrupted (rather then the users, as is the underlining assumption in our paper).
Reference: [42] <author> A. Shamir. </author> <title> How to share a secret. </title> <journal> Comm. ACM, </journal> <volume> 22(11) </volume> <pages> 612-613, </pages> <year> 1979. </year>
Reference-contexts: We apply some recent constructions suggested in [1, 26, 35, 38]. Secret sharing: Secret sharing (cf. [43]) was originally suggested for threshold access structures by Shamir and Blakely <ref> [42, 4] </ref>. It was extended to arbitrary access structures in [22]. The issue of efficiency (i.e., share sizes) of such schemes has been considered in several papers (cf. [6, 5, 2]). Schemes suggested in [3] for structures represented by monotone formulas turn out to be important for our quorum systems. <p> As such, it has an SSS, which is Shamir's scheme <ref> [42] </ref>. However a 2-of-3 majority gate is a very simple case of the general scheme. The underlying field is the GF (4) field, i.e., the basic secret unit is a pair of bits. The random polynomials of the scheme are simply lines (of degree 1).
Reference: [43] <author> G. J. Simmons. </author> <title> An introduction to shared secret and/or shared control schemes and their application. </title> <booktitle> In Contemporary Cryptology, The Science of Information Integrity, </booktitle> <pages> pages 441-497. </pages> <publisher> IEEE Press, </publisher> <year> 1992. </year> <month> 26 </month>
Reference-contexts: We apply some recent constructions suggested in [1, 26, 35, 38]. Secret sharing: Secret sharing (cf. <ref> [43] </ref>) was originally suggested for threshold access structures by Shamir and Blakely [42, 4]. It was extended to arbitrary access structures in [22]. The issue of efficiency (i.e., share sizes) of such schemes has been considered in several papers (cf. [6, 5, 2]).
Reference: [44] <author> B. Simons, J. L. Welch, and N. Lynch. </author> <title> An overview of clock synchronization. </title> <editor> In B. Simons and A. Spector, editors, </editor> <booktitle> Fault-Tolerant Distrib. Comp., </booktitle> <publisher> LNCS 448. Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Note that 12 the servers must all use the same time value otherwise the key cannot be reconstructed. However, maintaining synchronized clocks is a non-trivial and costly task (cf., <ref> [44] </ref>) which we prefer to avoid. Instead, in our modified protocol ACP 00 (see Figure 3) the user attaches a timestamp t to the request for item x, which is then used by the servers in the share generation.
Reference: [45] <author> R. H. Thomas. </author> <title> A majority concensus approach to concurrency control for multiple copy databases. </title> <journal> ACM Trans. Database Sys., </journal> <volume> 4(2) </volume> <pages> 180-209, </pages> <year> 1979. </year>
Reference-contexts: This ensures that privileges may be revoked, and that legitimate users may continue accessing the database (or obtaining signatures). * Small quorum sizes: to make the communication overhead small. Note that not all quorum systems enjoy these properties. For instance, the majority system <ref> [45] </ref>, i.e., the n+1 2 -of-n threshold system, has optimal availability but induces a high load and has large quorums. At the other extreme, the finite projective plane [30] has optimal load but very poor availability.
Reference: [46] <author> L. G. Valiant. </author> <title> Short monotone formulae for the majority function. </title> <journal> J. Algorithms, </journal> <volume> 5 </volume> <pages> 363-366, </pages> <year> 1984. </year>
Reference-contexts: Proposition 6.8 For any crumbling wall CW, CW-SSS is a secret sharing scheme realizing the quorum access structure A (CW), with fi (CW-SSS) = 2. 6.4 The AndOr System 6.4.1 The System The AndOr system appears in [35], and applies the analysis of AND/OR trees of <ref> [46] </ref>. Consider a complete rooted binary tree of height h, and identify the n = 2 h leaves of the tree with the system elements.
Reference: [47] <author> T. W. Yan and H. Garcia-Molina. </author> <title> Distributed selective dissemination of information. </title> <booktitle> In Proc. 3rd Inter. Conf. Par. Dist. Info. Sys., </booktitle> <pages> pages 89-98, </pages> <year> 1994. </year> <month> 27 </month>
Reference-contexts: the provably secure signature schemes may be implemented. 1.3 Tools Quorum systems: Quorum systems have been used in the study of distributed control and management problems such as mutual exclusion (cf. [13, 40]), data replication protocols (cf. [8, 19, 23]), name servers (cf. [34]) and selective dissemination of information (cf. <ref> [47] </ref>). We apply some recent constructions suggested in [1, 26, 35, 38]. Secret sharing: Secret sharing (cf. [43]) was originally suggested for threshold access structures by Shamir and Blakely [42, 4]. It was extended to arbitrary access structures in [22].
References-found: 47

