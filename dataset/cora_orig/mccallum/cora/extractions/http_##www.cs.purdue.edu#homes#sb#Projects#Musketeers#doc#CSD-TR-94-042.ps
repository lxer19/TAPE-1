URL: http://www.cs.purdue.edu/homes/sb/Projects/Musketeers/doc/CSD-TR-94-042.ps
Refering-URL: http://www.cs.purdue.edu/homes/sb/reports/LIST.html
Root-URL: http://www.cs.purdue.edu
Title: AN ANALYSIS OF THE PAGING ACTIVITY OF PARALLEL PROGRAMS Part I. Correlation of the Paging
Author: Kuei Yu Wang and Dan C. Marinescu 
Note: Work supported in part by CNPq Brazil Work supported in part by NSF under grants CCR-9119388 and BIR-9301210  
Date: June 1994  
Address: West Lafayette, IN 47908  
Affiliation: Computer Sciences Department Purdue University  
Pubnum: CSD-TR-94-042  
Abstract: In this paper we introduce a methodology for the analysis of the paging activity of parallel programs running on massively parallel systems. In the first part of this paper, we study the correlation of the paging activities of individual node programs in the SPMD execution mode and its effect on scheduling. The second part of the paper studies the load placed upon the I/O and the communication systems by the paging activity. The third part describes the tools for monitoring and analysis of the paging behavior of a parallel program. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M.J. Atallah, C. </author> <title> Lock, D.C. Marinescu, H.J. Siegel, and T.L. Casavant, "Models and Algorithms for Co-Scheduling Compute-Intensive Tasks on a Network of Workstations," </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> vol 16, </volume> <year> 1992, </year> <pages> pp. 319-327. </pages>
Reference-contexts: The scheduling strategy in which all node programs are activated at the same time, then suspended at the same time, activated again at the same time and so on, is called gang scheduling or co-scheduling, <ref> [1] </ref>. Obviously, gang scheduling can be used to hide the latency of page faults if and only if different node programs experience page faults at the same time. Therefore, we need to study the correlation of the paging activity of individual node programs.
Reference: [2] <author> R.F. Rashid. </author> <title> "Threads of a New System," In: UNIX Review, </title>
Reference-contexts: The machine dependent portion is a simple validate/invalidate interface which maintains the hardware address maps. The machine independent portion provides support for logical address maps, memory ranges within this map, and the interface to the backing storage from these ranges via the external memory management interface <ref> [2, 13, 14] </ref>. The Mach virtual memory system differs from the traditional UNIX virtual memory system by allowing the user to create a pager (external memory manager) to control the use of memory within portions of a process's address space.
Reference: [3] <author> J. Boykin, D. Kirschen, A. Langerman, and S. LoVerso. </author> <title> Programming Under Mach, </title> <publisher> Addison-Wesley Publishing Co., </publisher> <year> 1993. </year> <pages> 481 pages. </pages>
Reference-contexts: The data manager is entirely responsible for the contents of a memory object and its permanent storage if necessary. 13 Like all other objects in Mach system <ref> [3, 15] </ref>, each memory object will have a port associated with it, and may be manipulated by having messages sent to its port.
Reference: [4] <author> M.A. Cornea-Hasegan, D.C. Marinescu, and Z. Zhang, </author> <title> "Data Management for a Class of Iterative Computations on Distributed Memory MIMD Systems," </title> <journal> Concurrency: Practice and Experience, </journal> <volume> vol 6(3), </volume> <pages> pp. 205-229, </pages> <year> 1994. </year>
Reference-contexts: In this paper we report on the paging activity of parallel programs running under OSF/1 on an Intel Paragon XP/S supercomputer. The parallel programs we have profiled and analyzed are structural biology programs used for the determination of the 3-D atomic structure of large macromolecules like viruses <ref> [4, 11] </ref>. The more significant parameters describing the paging activity of a program running under OSF/1 are: page faults, copy-on-write, page-outs and page-ins. A page fault is an event detected by hardware during the address translation when a page entry in the page table of a task is invalid. <p> additional data before they can be used to improve the design of massively parallel systems and the mechanisms for resource sharing in such systems. 6.1 The applications We have concentrated our attention on a few applications in the area of computational biology we helped develop over the past few years <ref> [4, 11] </ref>. The programs we have studied are used for the 3-D atomic structure determination of large macromolecules like viruses.
Reference: [5] <author> E.P. George and G.M. Jenkins, </author> <title> "Time Series Analysis: Forecasting and Control," revised edition, </title> <publisher> Holden-Day, </publisher> <address> Oakland, California, </address> <year> 1976. </year>
Reference: [6] <author> D.B. Golub, </author> <title> R.P. Draves. "Moving the Default Memory Manager out of the Mach Kernel," </title> <booktitle> Proceedings of the Usenix Mach Symposium, </booktitle> <pages> pp. 177-188, </pages> <year> 1991. </year> <month> 36 </month>
Reference-contexts: Yet the Mach kernel provides standard virtual memory functionality including the allocation, deallocation, and copy of virtual memory. To allocate a new region of virtual memory, the kernel allocates a memory object and uses the default pager <ref> [6, 13] </ref> to manage the object. The default pager manages backing storage for memory objects created by the kernel in any of several ways: explicit allocation by user tasks vm allocate, shadow memory objects [13], and temporary memory objects for data being paged out.
Reference: [7] <author> R. Hofmann, R. Klar, N. Luttenberger, B. Mohr, and G. Werner, </author> <title> "An Approach to Monitoring and Modeling of Multiprocessor and Multiprocessor Systems," In: Performance and Distributed and Parallel Systems, </title> <editor> (T. Hasegawa, H. Takagi, Y. Takahashi, eds.), </editor> <publisher> Elsevier Science Publishers B.V. (North-Holland), IFIP, </publisher> <pages> pp. 91-110, </pages> <year> 1980. </year>
Reference: [8] <author> Intel Corporation, </author> <title> Paragon T M OSF/1 User's Guide, Inter Supercomputer Systems Division, </title> <institution> Beaverton, Oregon, </institution> <year> 1993. </year>
Reference: [9] <author> K. Loepere. </author> <title> "Mach 3 Kernel Interfaces," In: Open Software Foundation, </title> <institution> Carnegie Mellon University, </institution> <year> 1992. </year>
Reference-contexts: Figure 3 illustrates the actions taken during a page fault handling [17]. 15 3.4 OSF/1 Virtual Memory Statistics The OSF/1 Mach 3 <ref> [9] </ref> maintains statistics on the use of virtual memory since the time the kernel was booted for the processor on which that kernel is executing in the vm statistic structure.
Reference: [10] <author> A.D. Malony, D.A. Reed, </author> <title> and D.C. Rudolph, "Integrating Performance, Data Collection, Analysis and Visualization," In: Performance Instrumentation and Visualization, </title> <editor> (M. Simmons, R. Koskela, eds.), </editor> <publisher> Addison Wesley, </publisher> <pages> 289 pages, </pages> <year> 1990. </year>
Reference: [11] <author> D.C. Marinescu, J.R. Rice, M.A. Cornea-Hasegan, R.E. Lynch, and M.G. Rossmann, </author> <title> "Macromolecular Electron Density Averaging on Distributed Memory MIMD Systems," In: </title> <journal> Concurrency: Practice and Experience, </journal> <volume> vol 5(8), </volume> <year> 1993. </year> <pages> pp. 635-657. </pages>
Reference-contexts: In this paper we report on the paging activity of parallel programs running under OSF/1 on an Intel Paragon XP/S supercomputer. The parallel programs we have profiled and analyzed are structural biology programs used for the determination of the 3-D atomic structure of large macromolecules like viruses <ref> [4, 11] </ref>. The more significant parameters describing the paging activity of a program running under OSF/1 are: page faults, copy-on-write, page-outs and page-ins. A page fault is an event detected by hardware during the address translation when a page entry in the page table of a task is invalid. <p> additional data before they can be used to improve the design of massively parallel systems and the mechanisms for resource sharing in such systems. 6.1 The applications We have concentrated our attention on a few applications in the area of computational biology we helped develop over the past few years <ref> [4, 11] </ref>. The programs we have studied are used for the 3-D atomic structure determination of large macromolecules like viruses.
Reference: [12] <author> D.C. Marinescu, J.E. Lumpp, T.L. Casavant, and H.J. Siegel, </author> <title> "Models for Monitoring and Debugging Tools for Parallel and Distributed Software," In: </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> vol 9, </volume> <year> 1990, </year> <pages> pp. 171-184. </pages>
Reference-contexts: The system is currently running Paragon OSF/1, Release 1.0.4, Patch R1.1.6. We discuss briefly the intrusion due to our monitoring <ref> [12] </ref>. Table 2 shows the size of the original load module and of the load module of the instrumented programs. As we can see, the instrumented code is 5-11% larger than the original code. Table 3 presents the effects of instrumentation upon the execution time for the FFTsynth program.
Reference: [13] <author> R.F. Rashid, A. Tevanian, Jr., M. Young, D. Golub, R. Baron, D. Black, W.J. Bolosky, and J. Chew, </author> <title> "Machine-independent Virtual Management for Paged Uniprocessor and Multiprocessor Architectures," </title> <journal> IEEE Transactions on Computers. v.37, </journal> <volume> n.8, </volume> <pages> pp. 896-908, </pages> <year> 1988. </year>
Reference-contexts: The machine dependent portion is a simple validate/invalidate interface which maintains the hardware address maps. The machine independent portion provides support for logical address maps, memory ranges within this map, and the interface to the backing storage from these ranges via the external memory management interface <ref> [2, 13, 14] </ref>. The Mach virtual memory system differs from the traditional UNIX virtual memory system by allowing the user to create a pager (external memory manager) to control the use of memory within portions of a process's address space. <p> Yet the Mach kernel provides standard virtual memory functionality including the allocation, deallocation, and copy of virtual memory. To allocate a new region of virtual memory, the kernel allocates a memory object and uses the default pager <ref> [6, 13] </ref> to manage the object. The default pager manages backing storage for memory objects created by the kernel in any of several ways: explicit allocation by user tasks vm allocate, shadow memory objects [13], and temporary memory objects for data being paged out. <p> The default pager manages backing storage for memory objects created by the kernel in any of several ways: explicit allocation by user tasks vm allocate, shadow memory objects <ref> [13] </ref>, and temporary memory objects for data being paged out. Physical memory is not allocated until pages in this region are accessed. Copy-on-write sharing is used to perform virtual memory copying efficiently both during task creation (read/write sharing of memory through inheritance) and during message transfer.
Reference: [14] <author> R.F. Rashid, R. Baron, A. Forin, D. Golub, M. Jones, D. Julin, D. Orr, and R. Sanzi, </author> <title> "Mach: A Foundation for Open Systems," </title> <booktitle> In: Proceedings of the 2nd Workshop on Workstation Operating Systems (WWOS2), IEEE, </booktitle> <pages> pp. 109-113, </pages> <year> 1989. </year>
Reference-contexts: The machine dependent portion is a simple validate/invalidate interface which maintains the hardware address maps. The machine independent portion provides support for logical address maps, memory ranges within this map, and the interface to the backing storage from these ranges via the external memory management interface <ref> [2, 13, 14] </ref>. The Mach virtual memory system differs from the traditional UNIX virtual memory system by allowing the user to create a pager (external memory manager) to control the use of memory within portions of a process's address space.
Reference: [15] <author> A. Silberschatz, J.L. Peterson, and P.B. Galvin, </author> <title> "The Mach Operating System," </title> <booktitle> In: Operating Systems Concepts, Third Edition, Chapter 16, </booktitle> <pages> pp. 597-628, </pages> <publisher> Addison-Wesley Publishing Co. </publisher>
Reference-contexts: The data manager is entirely responsible for the contents of a memory object and its permanent storage if necessary. 13 Like all other objects in Mach system <ref> [3, 15] </ref>, each memory object will have a port associated with it, and may be manipulated by having messages sent to its port.
Reference: [16] <author> D. Wybranietz and D. Haban, </author> <title> "Monitoring and Measuring Distributed Systems," In: Performance Instrumentation and Visualization, </title> <editor> (M. Simmons, R. Koskela, eds.), </editor> <booktitle> 289 pages, </booktitle> <year> 1990. </year>

References-found: 16

