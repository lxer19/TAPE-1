URL: ftp://coast.cs.purdue.edu/pub/doc/kerberos/krb5-api.ps.Z
Refering-URL: http://www.cs.purdue.edu/coast/archive/data/categ25.html
Root-URL: http://www.cs.purdue.edu
Note: Section 1  
Abstract: Date: 9 April 1992 From: John Kohl, Clifford Neuman To: RFC readers Re: Kerberos Version 5 RFC, Revision #5 This is the fifth revision of version 5 of the Kerberos Protocol. At this point, the protocol is fixed. There have been some changes since version 4 (yes, we mistakenly thought it was fixed then). Readers should note the following changes: The V5 KDC should now listen on an officially assigned port, 88 (decimal). We are are requiring the use of the MD5 checksum to augment the integrity of the DES CBC encryption mode. This is a change from draft four which used CRC-32. We have also defined several new checksum methods for use in the KRB_SAFE exchange, and we have specified how they are to be applied to the data to be protected. For some checksums, the method for applying the checksums has changed. MIT's beta-test versions of Kerberos V5 code supports what is known as "specification zero" of the interoperability requirements (see section 9 for specification 1); it is a moving target. At some point the MIT code will conform to specification 1. Please send any comments about this draft to the mailing list krb-protocol@mit.edu. We thank you for your interest in Kerberos, and look forward to hearing your comments. Major changes since draft 4 This list doesn't include rewordings, typos & such. g The UDP port for the KDC has changed. It is now officially assigned. g A new method for deriving the key with which to encrypt checksums. g The list of keys that are considered weak has doubled in size. g A check for weak keys has been added to the string_to_key function. g New checksum methods have been added and some existing methods have changed. g Zero is now used as the initialization vector for DES CBC encryption. g A name type field has been added. g A section was added discussing the assignment of names. g An optional instance of the authorization data field was added to the authenticator. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> S. P. Miller, B. C. Neuman, J. I. Schiller, and J. H. Saltzer, </author> <title> Section E.2.1: Kerberos Authentication and Authorization System, M.I.T. Project Athena, </title> <address> Cambridge, Massachusetts (December 21, </address> <year> 1987). </year> <note> Section 11. - 51 - - -- Version 5 Revision 5 </note>
Reference-contexts: Realm ::= GeneralString PrincipalName ::= SEQUENCE - name-type [0] INTEGER, hhhhhhhhhhhhhhhhhh 20 See the discussion of the padata field in section 5.4.2 for details on why this can be useful. Section 5.2. - 20 - - -- Version 5 Revision 5 name-string <ref> [1] </ref> SEQUENCE OF GeneralString - Kerberos realms are encoded as GeneralStrings. Realms shall not contain a character with the code 0 (the ASCII NUL). <p> It further shall not include any separators. Example: The only valid format for UTC time 6 minutes, 27 seconds after 9 pm on 6 November 1985 is 19851106210627Z. HostAddress ::= SEQUENCE - addr-type [0] INTEGER, address <ref> [1] </ref> OCTET STRING - HostAddresses ::= SEQUENCE OF SEQUENCE - addr-type [0] INTEGER, address [1] OCTET STRING - The host adddress encodings consists of two fields: addr-type This field specifies the type of address that follows. <p> Example: The only valid format for UTC time 6 minutes, 27 seconds after 9 pm on 6 November 1985 is 19851106210627Z. HostAddress ::= SEQUENCE - addr-type [0] INTEGER, address <ref> [1] </ref> OCTET STRING - HostAddresses ::= SEQUENCE OF SEQUENCE - addr-type [0] INTEGER, address [1] OCTET STRING - The host adddress encodings consists of two fields: addr-type This field specifies the type of address that follows. Pre-defined values for this field are specified in section 8.1. address This field encodes a single address of type addr-type. The two forms differ slightly. <p> Pre-defined values for this field are specified in section 8.1. address This field encodes a single address of type addr-type. The two forms differ slightly. HostAddress contains exactly one address; HostAddresses contains a sequence of possibly many addresses. AuthorizationData ::= SEQUENCE OF SEQUENCE - ad-type [0] INTEGER, ad-data <ref> [1] </ref> OCTET STRING - ad-data This field contains authorization data to be interpreted according to the value of the corresponding ad-type field. ad-type This field specifies the format for the ad-data subfield. All negative values are reserved for local use. Non-negative values are reserved for registered use. <p> (7), renewable (8), initial (9), - KDCOptions ::= BIT STRING - reserved (0), forwardable (1), forwarded (2), proxiable (3), proxy (4), allow-postdate (5), postdated (6), unused7 (7), renewable (8), unused9 (9), renewable-ok (27), enc-tkt-in-skey (28), renew (30), validate (31) - LastReq ::= SEQUENCE OF SEQUENCE - lr-type [0] INTEGER, lr-value <ref> [1] </ref> KerberosTime - lr-type This field indicates how the following lr-value field is to be interpreted. Negative values indicate that the information pertains only to the responding server. Non-negative values pertain to all servers for the realm. <p> When a ticket or authenticator is included in a protocol message it is treated as an opaque object. 5.3.1. Tickets A ticket is a record that helps a client authenticate to a service. A Ticket contains the following information: Ticket ::= [APPLICATION 1] SEQUENCE - tkt-vno [0] INTEGER, realm <ref> [1] </ref> Realm, sname [2] PrincipalName, enc-part [3] EncryptedData - -- Encrypted part of ticket EncTicketPart ::= [APPLICATION 3] SEQUENCE - flags [0] TicketFlags, key [1] EncryptionKey, crealm [2] Realm, cname [3] PrincipalName, transited [4] TransitedEncoding, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, caddr [9] <p> A Ticket contains the following information: Ticket ::= [APPLICATION 1] SEQUENCE - tkt-vno [0] INTEGER, realm <ref> [1] </ref> Realm, sname [2] PrincipalName, enc-part [3] EncryptedData - -- Encrypted part of ticket EncTicketPart ::= [APPLICATION 3] SEQUENCE - flags [0] TicketFlags, key [1] EncryptionKey, crealm [2] Realm, cname [3] PrincipalName, transited [4] TransitedEncoding, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, caddr [9] HostAddresses OPTIONAL, authorization-data [10] AuthorizationData OPTIONAL - -- encoded Transited field TransitedEncoding ::= SEQUENCE - tr-type [0] INTEGER, -- must be a registered value <p> crealm [2] Realm, cname [3] PrincipalName, transited [4] TransitedEncoding, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, caddr [9] HostAddresses OPTIONAL, authorization-data [10] AuthorizationData OPTIONAL - -- encoded Transited field TransitedEncoding ::= SEQUENCE - tr-type [0] INTEGER, -- must be a registered value contents <ref> [1] </ref> OCTET STRING - The encoding of EncTicketPart is encrypted in the key shared by Kerberos and the end server (the server's secret key). See section 6 for the format of the ciphertext. tkt-vno This field specifies the version number for the ticket format. <p> The encoding is encrypted in the ticket's session key shared by the client and the server: -- Unencrypted authenticator Authenticator ::= [APPLICATION 2] SEQUENCE - authenticator-vno [0] INTEGER, crealm <ref> [1] </ref> Realm, cname [2] PrincipalName, cksum [3] Checksum OPTIONAL, cusec [4] INTEGER, ctime [5] KerberosTime, subkey [6] EncryptionKey OPTIONAL, seq-number [7] INTEGER OPTIONAL, authorization-data [8] AuthorizationData OPTIONAL - authenticator-vno This field specifies the version number for the format of the authenticator. <p> In either case, the message is sent from the client to the Authentication Server to request credentials for a service. The message fields are: AS-REQ ::= [APPLICATION 10] KDC-REQ TGS-REQ ::= [APPLICATION 12] KDC-REQ KDC-REQ ::= SEQUENCE - pvno <ref> [1] </ref> INTEGER, msg-type [2] INTEGER, padata [3] SEQUENCE OF PA-DATA OPTIONAL, req-body [4] KDC-REQ-BODY - PA-DATA ::= SEQUENCE - padata-type [1] INTEGER, padata-value [2] OCTET STRING, -- might be encoded AP-REQ - KDC-REQ-BODY ::= SEQUENCE - kdc-options [0] KDCOptions, cname [1] PrincipalName OPTIONAL, Section 5.4.1. - 27 - - -- Version <p> The message fields are: AS-REQ ::= [APPLICATION 10] KDC-REQ TGS-REQ ::= [APPLICATION 12] KDC-REQ KDC-REQ ::= SEQUENCE - pvno <ref> [1] </ref> INTEGER, msg-type [2] INTEGER, padata [3] SEQUENCE OF PA-DATA OPTIONAL, req-body [4] KDC-REQ-BODY - PA-DATA ::= SEQUENCE - padata-type [1] INTEGER, padata-value [2] OCTET STRING, -- might be encoded AP-REQ - KDC-REQ-BODY ::= SEQUENCE - kdc-options [0] KDCOptions, cname [1] PrincipalName OPTIONAL, Section 5.4.1. - 27 - - -- Version 5 Revision 5 -- Used only in AS-REQ realm [2] Realm, -- Server's realm -- Also client's in AS-REQ sname <p> TGS-REQ ::= [APPLICATION 12] KDC-REQ KDC-REQ ::= SEQUENCE - pvno <ref> [1] </ref> INTEGER, msg-type [2] INTEGER, padata [3] SEQUENCE OF PA-DATA OPTIONAL, req-body [4] KDC-REQ-BODY - PA-DATA ::= SEQUENCE - padata-type [1] INTEGER, padata-value [2] OCTET STRING, -- might be encoded AP-REQ - KDC-REQ-BODY ::= SEQUENCE - kdc-options [0] KDCOptions, cname [1] PrincipalName OPTIONAL, Section 5.4.1. - 27 - - -- Version 5 Revision 5 -- Used only in AS-REQ realm [2] Realm, -- Server's realm -- Also client's in AS-REQ sname [3] PrincipalName, from [4] KerberosTime OPTIONAL, till [5] KerberosTime, rtime [6] KerberosTime OPTIONAL, nonce [7] INTEGER, etype [8] SEQUENCE OF <p> If the time is ever reset backwards, there is a small, but finite, probability that a nonce will be reused. Section 5.4.2. - 31 - - -- Version 5 Revision 5 KDC-REP ::= SEQUENCE - pvno [0] INTEGER, msg-type <ref> [1] </ref> INTEGER, padata [2] PA-DATA OPTIONAL, crealm [3] Realm, cname [4] PrincipalName, ticket [5] Ticket, enc-part [6] EncryptedData - EncASRepPart ::= [APPLICATION 25 24 ] EncKDCRepPart EncTGSRepPart ::= [APPLICATION 26] EncKDCRepPart EncKDCRepPart ::= SEQUENCE - key [0] EncryptionKey, last-req [1] LastReq, nonce [2] INTEGER, key-expiration [3] KerberosTime OPTIONAL, flags [4] TicketFlags, <p> 5 Revision 5 KDC-REP ::= SEQUENCE - pvno [0] INTEGER, msg-type <ref> [1] </ref> INTEGER, padata [2] PA-DATA OPTIONAL, crealm [3] Realm, cname [4] PrincipalName, ticket [5] Ticket, enc-part [6] EncryptedData - EncASRepPart ::= [APPLICATION 25 24 ] EncKDCRepPart EncTGSRepPart ::= [APPLICATION 26] EncKDCRepPart EncKDCRepPart ::= SEQUENCE - key [0] EncryptionKey, last-req [1] LastReq, nonce [2] INTEGER, key-expiration [3] KerberosTime OPTIONAL, flags [4] TicketFlags, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, srealm [9] Realm, sname [10] PrincipalName, caddr [11] HostAddresses OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is either <p> The KRB_AP_REQ message is often referred to as the "authentication header". AP-REQ ::= [APPLICATION 14] SEQUENCE - pvno [0] INTEGER, msg-type <ref> [1] </ref> INTEGER, ap-options [2] APOptions, ticket [3] Ticket, authenticator [4] EncryptedData - APOptions ::= BIT STRING - reserved (0), use-session-key (1), mutual-required (2) - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_AP_REQ. <p> The message is sent in in response to an application request (KRB_AP_REQ) where the mutual authentication option has been selected in the ap-options field. AP-REP ::= [APPLICATION 15] SEQUENCE - pvno [0] INTEGER, msg-type <ref> [1] </ref> INTEGER, enc-part [2] EncryptedData - EncAPRepPart ::= [APPLICATION 27 26 ] SEQUENCE - ctime [0] KerberosTime, cusec [1] INTEGER, subkey [2] EncryptionKey OPTIONAL, seq-number [3] INTEGER OPTIONAL - The encoded EncAPRepPart is encrypted in the shared session key of the ticket. <p> AP-REP ::= [APPLICATION 15] SEQUENCE - pvno [0] INTEGER, msg-type <ref> [1] </ref> INTEGER, enc-part [2] EncryptedData - EncAPRepPart ::= [APPLICATION 27 26 ] SEQUENCE - ctime [0] KerberosTime, cusec [1] INTEGER, subkey [2] EncryptionKey OPTIONAL, seq-number [3] INTEGER OPTIONAL - The encoded EncAPRepPart is encrypted in the shared session key of the ticket. <p> KRB_SAFE definition The KRB_SAFE message contains user data along with a collision-proof checksum keyed with the session key. The message fields are: KRB-SAFE ::= [APPLICATION 20] SEQUENCE - pvno [0] INTEGER, msg-type <ref> [1] </ref> INTEGER, safe-body [2] KRB-SAFE-BODY, cksum [3] Checksum - KRB-SAFE-BODY ::= SEQUENCE - user-data [0] OCTET STRING, timestamp [1] KerberosTime OPTIONAL, usec [2] INTEGER OPTIONAL, seq-number [3] INTEGER OPTIONAL, s-address [4] HostAddress, r-address [5] HostAddress OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_SAFE. <p> The message fields are: KRB-SAFE ::= [APPLICATION 20] SEQUENCE - pvno [0] INTEGER, msg-type <ref> [1] </ref> INTEGER, safe-body [2] KRB-SAFE-BODY, cksum [3] Checksum - KRB-SAFE-BODY ::= SEQUENCE - user-data [0] OCTET STRING, timestamp [1] KerberosTime OPTIONAL, usec [2] INTEGER OPTIONAL, seq-number [3] INTEGER OPTIONAL, s-address [4] HostAddress, r-address [5] HostAddress OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_SAFE. safe-body This field is a placeholder for the body of the KRB-SAFE message. <p> It presumes that a session key has previously been exchanged (for example, by using the KRB_AP_REQ/KRB_AP_REP messages). 5.7.1. KRB_PRIV definition The KRB_PRIV message contains user data encrypted in the Session Key. The message fields are: KRB-PRIV ::= [APPLICATION 21] SEQUENCE - pvno [0] INTEGER, msg-type <ref> [1] </ref> INTEGER, enc-part [3] EncryptedData - EncKrbPrivPart ::= [APPLICATION 28 28 ] SEQUENCE - user-data [0] OCTET STRING, timestamp [1] KerberosTime OPTIONAL, usec [2] INTEGER OPTIONAL, seq-number [3] INTEGER OPTIONAL, s-address [4] HostAddress, -- sender's addr r-address [5] HostAddress OPTIONAL -- recip's addr - pvno and msg-type These fields are described <p> KRB_PRIV definition The KRB_PRIV message contains user data encrypted in the Session Key. The message fields are: KRB-PRIV ::= [APPLICATION 21] SEQUENCE - pvno [0] INTEGER, msg-type <ref> [1] </ref> INTEGER, enc-part [3] EncryptedData - EncKrbPrivPart ::= [APPLICATION 28 28 ] SEQUENCE - user-data [0] OCTET STRING, timestamp [1] KerberosTime OPTIONAL, usec [2] INTEGER OPTIONAL, seq-number [3] INTEGER OPTIONAL, s-address [4] HostAddress, -- sender's addr r-address [5] HostAddress OPTIONAL -- recip's addr - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_PRIV. hhhhhhhhhhhhhhhhhh 28 An application code in the encrypted part of a message <p> The message can be useful, however, for advising a user on the reason for some failure. 5.8.1. KRB_ERROR definition The KRB_ERROR message consists of the following fields: KRB-ERROR ::= [APPLICATION 30] SEQUENCE - pvno [0] INTEGER, msg-type <ref> [1] </ref> INTEGER, ctime [2] KerberosTime OPTIONAL, cusec [3] INTEGER OPTIONAL, stime [4] KerberosTime, susec [5] INTEGER, error-code [6] INTEGER, crealm [7] Realm OPTIONAL, cname [8] PrincipalName OPTIONAL, realm [9] Realm, -- Correct realm sname [10] PrincipalName, -- Correct name e-text [11] GeneralString OPTIONAL, e-data [12] OCTET STRING OPTIONAL - pvno and <p> If the error-code is KRB_AP_ERR_METHOD, then the e-data field will contain an encoding of the following sequence: METHOD-DATA ::= SEQUENCE - method-type [0] INTEGER, method-data <ref> [1] </ref> OCTET STRING OPTIONAL - method-type will indicate the required alternate method; method-data will contain any required additional information. 6. <p> The enc-part field which appears in the unencrypted part of messages in section 5 is a sequence consisting of an encryption type, an optional key version number, and the ciphertext. EncryptedData ::= SEQUENCE - etype [0] INTEGER, -- EncryptionType kvno <ref> [1] </ref> INTEGER OPTIONAL, cipher [2] OCTET STRING -- ciphertext - etype This field identifies which encryption algorithm was used to encipher the cipher. Detailed specifications for selected encryption types appear later in this section. kvno This field contains the version number of the key under which data is encrypted. <p> It is not a valid ASN.1 type. The tag bits and length must be removed from the confounder since the pur Section 6.1. - 39 - - -- Version 5 Revision 5 CipherText ::= ENCRYPTED SEQUENCE - confounder [0] UNTAGGED 31 OCTET STRING (conf_length) OPTIONAL, check <ref> [1] </ref> UNTAGGED OCTET STRING (checksum_length) OPTIONAL, msg-seq [2] MsgSequence, pad UNTAGGED OCTET STRING (pad_length) OPTIONAL - One generates a random confounder of the appropriate length, placing it in confounder; zeroes out check; calculates the appropriate checksum over confounder, check, and msg-seq, placing the result in check; adds the necessary padding; then <p> For example, DES, when used in cipher-block-chaining mode, requires an initialization vector. If required, the description for each encryption type must specify the source of such additional information. 6.2. Encryption Keys The sequence below shows the encoding of an encryption key: EncryptionKey ::= SEQUENCE - keytype [0] INTEGER, keyvalue <ref> [1] </ref> OCTET STRING - keytype This field specifies the type of encryption key that follows in the keyvalue field. <p> Checksums The following is the ASN.1 definition used for a checksum: Checksum ::= SEQUENCE - cksumtype [0] INTEGER, checksum <ref> [1] </ref> OCTET STRING - cksumtype This field indicates the algorithm used to generate the accompanying checksum. checksum This field contains the checksum itself, encoded as an octet string. Detailed specification of selected checksum types appear later in this section. Negative values for the checksum type are reserved for local use. <p> The format for the checksum is described in the following diagram: +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ | des-cbc (confounder + rsa-md4 (confounder+msg),key=var (key),iv=0) | +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ The format cannot be described in ASN.1, but for those who prefer an ASN.1-like notation: rsa-md4-des-checksum ::= ENCRYPTED UNTAGGED SEQUENCE - confounder [0] UNTAGGED OCTET STRING (8), check <ref> [1] </ref> UNTAGGED OCTET STRING (16) - 6.4.4. The RSA MD5 Checksum (rsa-md5) The RSA-MD5 checksum calculates a checksum using the RSA MD5 algorithm. [15]. The algorithm takes as input an input message of arbitrary length and produces as output a 128-bit (16 octet) checksum. <p> The format for the checksum is described in the following diagram: +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ | des-cbc (confounder + rsa-md5 (confounder+msg),key=var (key),iv=0) | +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ The format cannot be described in ASN.1, but for those who prefer an ASN.1-like notation: rsa-md5-des-checksum ::= ENCRYPTED UNTAGGED SEQUENCE - confounder [0] UNTAGGED OCTET STRING (8), check <ref> [1] </ref> UNTAGGED OCTET STRING (16) - 6.4.6. <p> The format for the checksum is described in the following diagram: +--+--+--+--+--+--+--+--+-----+-----+-----+-----+-----+-----+-----+-----+ | des-cbc (confounder + des-mac (conf+msg,iv=0,key),key=var (key),iv=0) | +--+--+--+--+--+--+--+--+-----+-----+-----+-----+-----+-----+-----+-----+ The format cannot be described in ASN.1, but for those who prefer an ASN.1-like notation: des-mac-checksum ::= ENCRYPTED UNTAGGED SEQUENCE - confounder [0] UNTAGGED OCTET STRING (8), check <ref> [1] </ref> UNTAGGED OCTET STRING (8) - The DES specifications identify some "weak" and "semi-weak" keys; those keys shall not be used for generating DES-MAC checksums for use in Kerberos, nor shall a key be used whose veriant is "weak" or "semi-weak". 6.4.7.
Reference: 2. <author> J. G. Steiner, B. C. Neuman, and J. I. Schiller, </author> <title> ``Kerberos: An Authentication Service for Open Network Systems,'' pp. </title> <booktitle> 191-202 in Usenix Conference Proceedings, </booktitle> <address> Dallas, Texas (February, </address> <year> 1988). </year>
Reference-contexts: Tickets A ticket is a record that helps a client authenticate to a service. A Ticket contains the following information: Ticket ::= [APPLICATION 1] SEQUENCE - tkt-vno [0] INTEGER, realm [1] Realm, sname <ref> [2] </ref> PrincipalName, enc-part [3] EncryptedData - -- Encrypted part of ticket EncTicketPart ::= [APPLICATION 3] SEQUENCE - flags [0] TicketFlags, key [1] EncryptionKey, crealm [2] Realm, cname [3] PrincipalName, transited [4] TransitedEncoding, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, caddr [9] HostAddresses OPTIONAL, authorization-data <p> A Ticket contains the following information: Ticket ::= [APPLICATION 1] SEQUENCE - tkt-vno [0] INTEGER, realm [1] Realm, sname <ref> [2] </ref> PrincipalName, enc-part [3] EncryptedData - -- Encrypted part of ticket EncTicketPart ::= [APPLICATION 3] SEQUENCE - flags [0] TicketFlags, key [1] EncryptionKey, crealm [2] Realm, cname [3] PrincipalName, transited [4] TransitedEncoding, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, caddr [9] HostAddresses OPTIONAL, authorization-data [10] AuthorizationData OPTIONAL - -- encoded Transited field TransitedEncoding ::= SEQUENCE - tr-type [0] INTEGER, -- must be a registered value contents [1] OCTET <p> The encoding is encrypted in the ticket's session key shared by the client and the server: -- Unencrypted authenticator Authenticator ::= [APPLICATION 2] SEQUENCE - authenticator-vno [0] INTEGER, crealm [1] Realm, cname <ref> [2] </ref> PrincipalName, cksum [3] Checksum OPTIONAL, cusec [4] INTEGER, ctime [5] KerberosTime, subkey [6] EncryptionKey OPTIONAL, seq-number [7] INTEGER OPTIONAL, authorization-data [8] AuthorizationData OPTIONAL - authenticator-vno This field specifies the version number for the format of the authenticator. <p> In either case, the message is sent from the client to the Authentication Server to request credentials for a service. The message fields are: AS-REQ ::= [APPLICATION 10] KDC-REQ TGS-REQ ::= [APPLICATION 12] KDC-REQ KDC-REQ ::= SEQUENCE - pvno [1] INTEGER, msg-type <ref> [2] </ref> INTEGER, padata [3] SEQUENCE OF PA-DATA OPTIONAL, req-body [4] KDC-REQ-BODY - PA-DATA ::= SEQUENCE - padata-type [1] INTEGER, padata-value [2] OCTET STRING, -- might be encoded AP-REQ - KDC-REQ-BODY ::= SEQUENCE - kdc-options [0] KDCOptions, cname [1] PrincipalName OPTIONAL, Section 5.4.1. - 27 - - -- Version 5 Revision 5 <p> The message fields are: AS-REQ ::= [APPLICATION 10] KDC-REQ TGS-REQ ::= [APPLICATION 12] KDC-REQ KDC-REQ ::= SEQUENCE - pvno [1] INTEGER, msg-type <ref> [2] </ref> INTEGER, padata [3] SEQUENCE OF PA-DATA OPTIONAL, req-body [4] KDC-REQ-BODY - PA-DATA ::= SEQUENCE - padata-type [1] INTEGER, padata-value [2] OCTET STRING, -- might be encoded AP-REQ - KDC-REQ-BODY ::= SEQUENCE - kdc-options [0] KDCOptions, cname [1] PrincipalName OPTIONAL, Section 5.4.1. - 27 - - -- Version 5 Revision 5 -- Used only in AS-REQ realm [2] Realm, -- Server's realm -- Also client's in AS-REQ sname [3] PrincipalName, from <p> OPTIONAL, req-body [4] KDC-REQ-BODY - PA-DATA ::= SEQUENCE - padata-type [1] INTEGER, padata-value <ref> [2] </ref> OCTET STRING, -- might be encoded AP-REQ - KDC-REQ-BODY ::= SEQUENCE - kdc-options [0] KDCOptions, cname [1] PrincipalName OPTIONAL, Section 5.4.1. - 27 - - -- Version 5 Revision 5 -- Used only in AS-REQ realm [2] Realm, -- Server's realm -- Also client's in AS-REQ sname [3] PrincipalName, from [4] KerberosTime OPTIONAL, till [5] KerberosTime, rtime [6] KerberosTime OPTIONAL, nonce [7] INTEGER, etype [8] SEQUENCE OF INTEGER, -- EncryptionType, -- in preference order addresses [9] HostAddresses OPTIONAL, enc-authorization-data [10] EncryptedData OPTIONAL, -- Encrypted AuthorizationData encoding additional-tickets <p> If the time is ever reset backwards, there is a small, but finite, probability that a nonce will be reused. Section 5.4.2. - 31 - - -- Version 5 Revision 5 KDC-REP ::= SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, padata <ref> [2] </ref> PA-DATA OPTIONAL, crealm [3] Realm, cname [4] PrincipalName, ticket [5] Ticket, enc-part [6] EncryptedData - EncASRepPart ::= [APPLICATION 25 24 ] EncKDCRepPart EncTGSRepPart ::= [APPLICATION 26] EncKDCRepPart EncKDCRepPart ::= SEQUENCE - key [0] EncryptionKey, last-req [1] LastReq, nonce [2] INTEGER, key-expiration [3] KerberosTime OPTIONAL, flags [4] TicketFlags, authtime [5] KerberosTime, <p> KDC-REP ::= SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, padata <ref> [2] </ref> PA-DATA OPTIONAL, crealm [3] Realm, cname [4] PrincipalName, ticket [5] Ticket, enc-part [6] EncryptedData - EncASRepPart ::= [APPLICATION 25 24 ] EncKDCRepPart EncTGSRepPart ::= [APPLICATION 26] EncKDCRepPart EncKDCRepPart ::= SEQUENCE - key [0] EncryptionKey, last-req [1] LastReq, nonce [2] INTEGER, key-expiration [3] KerberosTime OPTIONAL, flags [4] TicketFlags, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, srealm [9] Realm, sname [10] PrincipalName, caddr [11] HostAddresses OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is either KRB_AS_REP or KRB_TGS_REP. <p> The KRB_AP_REQ message is often referred to as the "authentication header". AP-REQ ::= [APPLICATION 14] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, ap-options <ref> [2] </ref> APOptions, ticket [3] Ticket, authenticator [4] EncryptedData - APOptions ::= BIT STRING - reserved (0), use-session-key (1), mutual-required (2) - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_AP_REQ. <p> The message is sent in in response to an application request (KRB_AP_REQ) where the mutual authentication option has been selected in the ap-options field. AP-REP ::= [APPLICATION 15] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, enc-part <ref> [2] </ref> EncryptedData - EncAPRepPart ::= [APPLICATION 27 26 ] SEQUENCE - ctime [0] KerberosTime, cusec [1] INTEGER, subkey [2] EncryptionKey OPTIONAL, seq-number [3] INTEGER OPTIONAL - The encoded EncAPRepPart is encrypted in the shared session key of the ticket. <p> AP-REP ::= [APPLICATION 15] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, enc-part <ref> [2] </ref> EncryptedData - EncAPRepPart ::= [APPLICATION 27 26 ] SEQUENCE - ctime [0] KerberosTime, cusec [1] INTEGER, subkey [2] EncryptionKey OPTIONAL, seq-number [3] INTEGER OPTIONAL - The encoded EncAPRepPart is encrypted in the shared session key of the ticket. <p> KRB_SAFE definition The KRB_SAFE message contains user data along with a collision-proof checksum keyed with the session key. The message fields are: KRB-SAFE ::= [APPLICATION 20] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, safe-body <ref> [2] </ref> KRB-SAFE-BODY, cksum [3] Checksum - KRB-SAFE-BODY ::= SEQUENCE - user-data [0] OCTET STRING, timestamp [1] KerberosTime OPTIONAL, usec [2] INTEGER OPTIONAL, seq-number [3] INTEGER OPTIONAL, s-address [4] HostAddress, r-address [5] HostAddress OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_SAFE. safe-body This field <p> The message fields are: KRB-SAFE ::= [APPLICATION 20] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, safe-body <ref> [2] </ref> KRB-SAFE-BODY, cksum [3] Checksum - KRB-SAFE-BODY ::= SEQUENCE - user-data [0] OCTET STRING, timestamp [1] KerberosTime OPTIONAL, usec [2] INTEGER OPTIONAL, seq-number [3] INTEGER OPTIONAL, s-address [4] HostAddress, r-address [5] HostAddress OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_SAFE. safe-body This field is a placeholder for the body of the KRB-SAFE message. <p> The message fields are: KRB-PRIV ::= [APPLICATION 21] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, enc-part [3] EncryptedData - EncKrbPrivPart ::= [APPLICATION 28 28 ] SEQUENCE - user-data [0] OCTET STRING, timestamp [1] KerberosTime OPTIONAL, usec <ref> [2] </ref> INTEGER OPTIONAL, seq-number [3] INTEGER OPTIONAL, s-address [4] HostAddress, -- sender's addr r-address [5] HostAddress OPTIONAL -- recip's addr - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_PRIV. hhhhhhhhhhhhhhhhhh 28 An application code in the encrypted part of a message provides an additional check <p> The message can be useful, however, for advising a user on the reason for some failure. 5.8.1. KRB_ERROR definition The KRB_ERROR message consists of the following fields: KRB-ERROR ::= [APPLICATION 30] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, ctime <ref> [2] </ref> KerberosTime OPTIONAL, cusec [3] INTEGER OPTIONAL, stime [4] KerberosTime, susec [5] INTEGER, error-code [6] INTEGER, crealm [7] Realm OPTIONAL, cname [8] PrincipalName OPTIONAL, realm [9] Realm, -- Correct realm sname [10] PrincipalName, -- Correct name e-text [11] GeneralString OPTIONAL, e-data [12] OCTET STRING OPTIONAL - pvno and msg-type These fields <p> The enc-part field which appears in the unencrypted part of messages in section 5 is a sequence consisting of an encryption type, an optional key version number, and the ciphertext. EncryptedData ::= SEQUENCE - etype [0] INTEGER, -- EncryptionType kvno [1] INTEGER OPTIONAL, cipher <ref> [2] </ref> OCTET STRING -- ciphertext - etype This field identifies which encryption algorithm was used to encipher the cipher. Detailed specifications for selected encryption types appear later in this section. kvno This field contains the version number of the key under which data is encrypted. <p> The tag bits and length must be removed from the confounder since the pur Section 6.1. - 39 - - -- Version 5 Revision 5 CipherText ::= ENCRYPTED SEQUENCE - confounder [0] UNTAGGED 31 OCTET STRING (conf_length) OPTIONAL, check [1] UNTAGGED OCTET STRING (checksum_length) OPTIONAL, msg-seq <ref> [2] </ref> MsgSequence, pad UNTAGGED OCTET STRING (pad_length) OPTIONAL - One generates a random confounder of the appropriate length, placing it in confounder; zeroes out check; calculates the appropriate checksum over confounder, check, and msg-seq, placing the result in check; adds the necessary padding; then encrypts using the specified encryption type and
Reference: 3. <author> Roger M. Needham and Michael D. Schroeder, </author> <title> ``Using Encryption for Authentication in Large Networks of Computers,'' </title> <journal> Communications of the ACM 21(12), </journal> <pages> pp. </pages> <month> 993-999 (December, </month> <year> 1978). </year>
Reference-contexts: Tickets A ticket is a record that helps a client authenticate to a service. A Ticket contains the following information: Ticket ::= [APPLICATION 1] SEQUENCE - tkt-vno [0] INTEGER, realm [1] Realm, sname [2] PrincipalName, enc-part <ref> [3] </ref> EncryptedData - -- Encrypted part of ticket EncTicketPart ::= [APPLICATION 3] SEQUENCE - flags [0] TicketFlags, key [1] EncryptionKey, crealm [2] Realm, cname [3] PrincipalName, transited [4] TransitedEncoding, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, caddr [9] HostAddresses OPTIONAL, authorization-data [10] AuthorizationData OPTIONAL <p> A Ticket contains the following information: Ticket ::= [APPLICATION 1] SEQUENCE - tkt-vno [0] INTEGER, realm [1] Realm, sname [2] PrincipalName, enc-part <ref> [3] </ref> EncryptedData - -- Encrypted part of ticket EncTicketPart ::= [APPLICATION 3] SEQUENCE - flags [0] TicketFlags, key [1] EncryptionKey, crealm [2] Realm, cname [3] PrincipalName, transited [4] TransitedEncoding, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, caddr [9] HostAddresses OPTIONAL, authorization-data [10] AuthorizationData OPTIONAL - -- encoded Transited field TransitedEncoding ::= SEQUENCE - tr-type [0] INTEGER, -- must be a registered value contents [1] OCTET STRING - The <p> The encoding is encrypted in the ticket's session key shared by the client and the server: -- Unencrypted authenticator Authenticator ::= [APPLICATION 2] SEQUENCE - authenticator-vno [0] INTEGER, crealm [1] Realm, cname [2] PrincipalName, cksum <ref> [3] </ref> Checksum OPTIONAL, cusec [4] INTEGER, ctime [5] KerberosTime, subkey [6] EncryptionKey OPTIONAL, seq-number [7] INTEGER OPTIONAL, authorization-data [8] AuthorizationData OPTIONAL - authenticator-vno This field specifies the version number for the format of the authenticator. <p> In either case, the message is sent from the client to the Authentication Server to request credentials for a service. The message fields are: AS-REQ ::= [APPLICATION 10] KDC-REQ TGS-REQ ::= [APPLICATION 12] KDC-REQ KDC-REQ ::= SEQUENCE - pvno [1] INTEGER, msg-type [2] INTEGER, padata <ref> [3] </ref> SEQUENCE OF PA-DATA OPTIONAL, req-body [4] KDC-REQ-BODY - PA-DATA ::= SEQUENCE - padata-type [1] INTEGER, padata-value [2] OCTET STRING, -- might be encoded AP-REQ - KDC-REQ-BODY ::= SEQUENCE - kdc-options [0] KDCOptions, cname [1] PrincipalName OPTIONAL, Section 5.4.1. - 27 - - -- Version 5 Revision 5 -- Used only <p> INTEGER, padata-value [2] OCTET STRING, -- might be encoded AP-REQ - KDC-REQ-BODY ::= SEQUENCE - kdc-options [0] KDCOptions, cname [1] PrincipalName OPTIONAL, Section 5.4.1. - 27 - - -- Version 5 Revision 5 -- Used only in AS-REQ realm [2] Realm, -- Server's realm -- Also client's in AS-REQ sname <ref> [3] </ref> PrincipalName, from [4] KerberosTime OPTIONAL, till [5] KerberosTime, rtime [6] KerberosTime OPTIONAL, nonce [7] INTEGER, etype [8] SEQUENCE OF INTEGER, -- EncryptionType, -- in preference order addresses [9] HostAddresses OPTIONAL, enc-authorization-data [10] EncryptedData OPTIONAL, -- Encrypted AuthorizationData encoding additional-tickets [11] SEQUENCE OF Ticket OPTIONAL - The fields in this message <p> If the time is ever reset backwards, there is a small, but finite, probability that a nonce will be reused. Section 5.4.2. - 31 - - -- Version 5 Revision 5 KDC-REP ::= SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, padata [2] PA-DATA OPTIONAL, crealm <ref> [3] </ref> Realm, cname [4] PrincipalName, ticket [5] Ticket, enc-part [6] EncryptedData - EncASRepPart ::= [APPLICATION 25 24 ] EncKDCRepPart EncTGSRepPart ::= [APPLICATION 26] EncKDCRepPart EncKDCRepPart ::= SEQUENCE - key [0] EncryptionKey, last-req [1] LastReq, nonce [2] INTEGER, key-expiration [3] KerberosTime OPTIONAL, flags [4] TicketFlags, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, <p> - pvno [0] INTEGER, msg-type [1] INTEGER, padata [2] PA-DATA OPTIONAL, crealm <ref> [3] </ref> Realm, cname [4] PrincipalName, ticket [5] Ticket, enc-part [6] EncryptedData - EncASRepPart ::= [APPLICATION 25 24 ] EncKDCRepPart EncTGSRepPart ::= [APPLICATION 26] EncKDCRepPart EncKDCRepPart ::= SEQUENCE - key [0] EncryptionKey, last-req [1] LastReq, nonce [2] INTEGER, key-expiration [3] KerberosTime OPTIONAL, flags [4] TicketFlags, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, srealm [9] Realm, sname [10] PrincipalName, caddr [11] HostAddresses OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is either KRB_AS_REP or KRB_TGS_REP. padata This field <p> The KRB_AP_REQ message is often referred to as the "authentication header". AP-REQ ::= [APPLICATION 14] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, ap-options [2] APOptions, ticket <ref> [3] </ref> Ticket, authenticator [4] EncryptedData - APOptions ::= BIT STRING - reserved (0), use-session-key (1), mutual-required (2) - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_AP_REQ. <p> AP-REP ::= [APPLICATION 15] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, enc-part [2] EncryptedData - EncAPRepPart ::= [APPLICATION 27 26 ] SEQUENCE - ctime [0] KerberosTime, cusec [1] INTEGER, subkey [2] EncryptionKey OPTIONAL, seq-number <ref> [3] </ref> INTEGER OPTIONAL - The encoded EncAPRepPart is encrypted in the shared session key of the ticket. <p> KRB_SAFE definition The KRB_SAFE message contains user data along with a collision-proof checksum keyed with the session key. The message fields are: KRB-SAFE ::= [APPLICATION 20] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, safe-body [2] KRB-SAFE-BODY, cksum <ref> [3] </ref> Checksum - KRB-SAFE-BODY ::= SEQUENCE - user-data [0] OCTET STRING, timestamp [1] KerberosTime OPTIONAL, usec [2] INTEGER OPTIONAL, seq-number [3] INTEGER OPTIONAL, s-address [4] HostAddress, r-address [5] HostAddress OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_SAFE. safe-body This field is a placeholder <p> The message fields are: KRB-SAFE ::= [APPLICATION 20] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, safe-body [2] KRB-SAFE-BODY, cksum <ref> [3] </ref> Checksum - KRB-SAFE-BODY ::= SEQUENCE - user-data [0] OCTET STRING, timestamp [1] KerberosTime OPTIONAL, usec [2] INTEGER OPTIONAL, seq-number [3] INTEGER OPTIONAL, s-address [4] HostAddress, r-address [5] HostAddress OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_SAFE. safe-body This field is a placeholder for the body of the KRB-SAFE message. <p> It presumes that a session key has previously been exchanged (for example, by using the KRB_AP_REQ/KRB_AP_REP messages). 5.7.1. KRB_PRIV definition The KRB_PRIV message contains user data encrypted in the Session Key. The message fields are: KRB-PRIV ::= [APPLICATION 21] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, enc-part <ref> [3] </ref> EncryptedData - EncKrbPrivPart ::= [APPLICATION 28 28 ] SEQUENCE - user-data [0] OCTET STRING, timestamp [1] KerberosTime OPTIONAL, usec [2] INTEGER OPTIONAL, seq-number [3] INTEGER OPTIONAL, s-address [4] HostAddress, -- sender's addr r-address [5] HostAddress OPTIONAL -- recip's addr - pvno and msg-type These fields are described above in section <p> The message fields are: KRB-PRIV ::= [APPLICATION 21] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, enc-part <ref> [3] </ref> EncryptedData - EncKrbPrivPart ::= [APPLICATION 28 28 ] SEQUENCE - user-data [0] OCTET STRING, timestamp [1] KerberosTime OPTIONAL, usec [2] INTEGER OPTIONAL, seq-number [3] INTEGER OPTIONAL, s-address [4] HostAddress, -- sender's addr r-address [5] HostAddress OPTIONAL -- recip's addr - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_PRIV. hhhhhhhhhhhhhhhhhh 28 An application code in the encrypted part of a message provides an additional check that the message was <p> The message can be useful, however, for advising a user on the reason for some failure. 5.8.1. KRB_ERROR definition The KRB_ERROR message consists of the following fields: KRB-ERROR ::= [APPLICATION 30] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, ctime [2] KerberosTime OPTIONAL, cusec <ref> [3] </ref> INTEGER OPTIONAL, stime [4] KerberosTime, susec [5] INTEGER, error-code [6] INTEGER, crealm [7] Realm OPTIONAL, cname [8] PrincipalName OPTIONAL, realm [9] Realm, -- Correct realm sname [10] PrincipalName, -- Correct name e-text [11] GeneralString OPTIONAL, e-data [12] OCTET STRING OPTIONAL - pvno and msg-type These fields are described above in
Reference: 4. <author> Dorothy E. Denning and Giovanni Maria Sacco, </author> <title> ``Timestamps in Key Distribution Protocols,'' </title> <journal> Communications of the ACM 24(8), </journal> <pages> pp. </pages> <month> 533-536 (August </month> <year> 1981). </year>
Reference-contexts: A Ticket contains the following information: Ticket ::= [APPLICATION 1] SEQUENCE - tkt-vno [0] INTEGER, realm [1] Realm, sname [2] PrincipalName, enc-part [3] EncryptedData - -- Encrypted part of ticket EncTicketPart ::= [APPLICATION 3] SEQUENCE - flags [0] TicketFlags, key [1] EncryptionKey, crealm [2] Realm, cname [3] PrincipalName, transited <ref> [4] </ref> TransitedEncoding, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, caddr [9] HostAddresses OPTIONAL, authorization-data [10] AuthorizationData OPTIONAL - -- encoded Transited field TransitedEncoding ::= SEQUENCE - tr-type [0] INTEGER, -- must be a registered value contents [1] OCTET STRING - The encoding of EncTicketPart <p> The encoding is encrypted in the ticket's session key shared by the client and the server: -- Unencrypted authenticator Authenticator ::= [APPLICATION 2] SEQUENCE - authenticator-vno [0] INTEGER, crealm [1] Realm, cname [2] PrincipalName, cksum [3] Checksum OPTIONAL, cusec <ref> [4] </ref> INTEGER, ctime [5] KerberosTime, subkey [6] EncryptionKey OPTIONAL, seq-number [7] INTEGER OPTIONAL, authorization-data [8] AuthorizationData OPTIONAL - authenticator-vno This field specifies the version number for the format of the authenticator. <p> The message fields are: AS-REQ ::= [APPLICATION 10] KDC-REQ TGS-REQ ::= [APPLICATION 12] KDC-REQ KDC-REQ ::= SEQUENCE - pvno [1] INTEGER, msg-type [2] INTEGER, padata [3] SEQUENCE OF PA-DATA OPTIONAL, req-body <ref> [4] </ref> KDC-REQ-BODY - PA-DATA ::= SEQUENCE - padata-type [1] INTEGER, padata-value [2] OCTET STRING, -- might be encoded AP-REQ - KDC-REQ-BODY ::= SEQUENCE - kdc-options [0] KDCOptions, cname [1] PrincipalName OPTIONAL, Section 5.4.1. - 27 - - -- Version 5 Revision 5 -- Used only in AS-REQ realm [2] Realm, -- <p> OCTET STRING, -- might be encoded AP-REQ - KDC-REQ-BODY ::= SEQUENCE - kdc-options [0] KDCOptions, cname [1] PrincipalName OPTIONAL, Section 5.4.1. - 27 - - -- Version 5 Revision 5 -- Used only in AS-REQ realm [2] Realm, -- Server's realm -- Also client's in AS-REQ sname [3] PrincipalName, from <ref> [4] </ref> KerberosTime OPTIONAL, till [5] KerberosTime, rtime [6] KerberosTime OPTIONAL, nonce [7] INTEGER, etype [8] SEQUENCE OF INTEGER, -- EncryptionType, -- in preference order addresses [9] HostAddresses OPTIONAL, enc-authorization-data [10] EncryptedData OPTIONAL, -- Encrypted AuthorizationData encoding additional-tickets [11] SEQUENCE OF Ticket OPTIONAL - The fields in this message are: pvno This <p> If the time is ever reset backwards, there is a small, but finite, probability that a nonce will be reused. Section 5.4.2. - 31 - - -- Version 5 Revision 5 KDC-REP ::= SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, padata [2] PA-DATA OPTIONAL, crealm [3] Realm, cname <ref> [4] </ref> PrincipalName, ticket [5] Ticket, enc-part [6] EncryptedData - EncASRepPart ::= [APPLICATION 25 24 ] EncKDCRepPart EncTGSRepPart ::= [APPLICATION 26] EncKDCRepPart EncKDCRepPart ::= SEQUENCE - key [0] EncryptionKey, last-req [1] LastReq, nonce [2] INTEGER, key-expiration [3] KerberosTime OPTIONAL, flags [4] TicketFlags, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, <p> msg-type [1] INTEGER, padata [2] PA-DATA OPTIONAL, crealm [3] Realm, cname <ref> [4] </ref> PrincipalName, ticket [5] Ticket, enc-part [6] EncryptedData - EncASRepPart ::= [APPLICATION 25 24 ] EncKDCRepPart EncTGSRepPart ::= [APPLICATION 26] EncKDCRepPart EncKDCRepPart ::= SEQUENCE - key [0] EncryptionKey, last-req [1] LastReq, nonce [2] INTEGER, key-expiration [3] KerberosTime OPTIONAL, flags [4] TicketFlags, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, srealm [9] Realm, sname [10] PrincipalName, caddr [11] HostAddresses OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is either KRB_AS_REP or KRB_TGS_REP. padata This field is described in detail <p> The KRB_AP_REQ message is often referred to as the "authentication header". AP-REQ ::= [APPLICATION 14] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, ap-options [2] APOptions, ticket [3] Ticket, authenticator <ref> [4] </ref> EncryptedData - APOptions ::= BIT STRING - reserved (0), use-session-key (1), mutual-required (2) - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_AP_REQ. <p> The message fields are: KRB-SAFE ::= [APPLICATION 20] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, safe-body [2] KRB-SAFE-BODY, cksum [3] Checksum - KRB-SAFE-BODY ::= SEQUENCE - user-data [0] OCTET STRING, timestamp [1] KerberosTime OPTIONAL, usec [2] INTEGER OPTIONAL, seq-number [3] INTEGER OPTIONAL, s-address <ref> [4] </ref> HostAddress, r-address [5] HostAddress OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_SAFE. safe-body This field is a placeholder for the body of the KRB-SAFE message. <p> The message fields are: KRB-PRIV ::= [APPLICATION 21] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, enc-part [3] EncryptedData - EncKrbPrivPart ::= [APPLICATION 28 28 ] SEQUENCE - user-data [0] OCTET STRING, timestamp [1] KerberosTime OPTIONAL, usec [2] INTEGER OPTIONAL, seq-number [3] INTEGER OPTIONAL, s-address <ref> [4] </ref> HostAddress, -- sender's addr r-address [5] HostAddress OPTIONAL -- recip's addr - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_PRIV. hhhhhhhhhhhhhhhhhh 28 An application code in the encrypted part of a message provides an additional check that the message was decrypted properly. <p> The message can be useful, however, for advising a user on the reason for some failure. 5.8.1. KRB_ERROR definition The KRB_ERROR message consists of the following fields: KRB-ERROR ::= [APPLICATION 30] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, ctime [2] KerberosTime OPTIONAL, cusec [3] INTEGER OPTIONAL, stime <ref> [4] </ref> KerberosTime, susec [5] INTEGER, error-code [6] INTEGER, crealm [7] Realm OPTIONAL, cname [8] PrincipalName OPTIONAL, realm [9] Realm, -- Correct realm sname [10] PrincipalName, -- Correct name e-text [11] GeneralString OPTIONAL, e-data [12] OCTET STRING OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is
Reference: 5. <author> John T. Kohl, </author> <title> ``The Evolution of the Kerberos Authentication Service,'' pp. </title> <booktitle> 295--313 in EurOpen Conference Proceedings, </booktitle> <address> Troms, Norway (May 1991). </address>
Reference-contexts: contains the following information: Ticket ::= [APPLICATION 1] SEQUENCE - tkt-vno [0] INTEGER, realm [1] Realm, sname [2] PrincipalName, enc-part [3] EncryptedData - -- Encrypted part of ticket EncTicketPart ::= [APPLICATION 3] SEQUENCE - flags [0] TicketFlags, key [1] EncryptionKey, crealm [2] Realm, cname [3] PrincipalName, transited [4] TransitedEncoding, authtime <ref> [5] </ref> KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, caddr [9] HostAddresses OPTIONAL, authorization-data [10] AuthorizationData OPTIONAL - -- encoded Transited field TransitedEncoding ::= SEQUENCE - tr-type [0] INTEGER, -- must be a registered value contents [1] OCTET STRING - The encoding of EncTicketPart is encrypted in <p> The encoding is encrypted in the ticket's session key shared by the client and the server: -- Unencrypted authenticator Authenticator ::= [APPLICATION 2] SEQUENCE - authenticator-vno [0] INTEGER, crealm [1] Realm, cname [2] PrincipalName, cksum [3] Checksum OPTIONAL, cusec [4] INTEGER, ctime <ref> [5] </ref> KerberosTime, subkey [6] EncryptionKey OPTIONAL, seq-number [7] INTEGER OPTIONAL, authorization-data [8] AuthorizationData OPTIONAL - authenticator-vno This field specifies the version number for the format of the authenticator. <p> be encoded AP-REQ - KDC-REQ-BODY ::= SEQUENCE - kdc-options [0] KDCOptions, cname [1] PrincipalName OPTIONAL, Section 5.4.1. - 27 - - -- Version 5 Revision 5 -- Used only in AS-REQ realm [2] Realm, -- Server's realm -- Also client's in AS-REQ sname [3] PrincipalName, from [4] KerberosTime OPTIONAL, till <ref> [5] </ref> KerberosTime, rtime [6] KerberosTime OPTIONAL, nonce [7] INTEGER, etype [8] SEQUENCE OF INTEGER, -- EncryptionType, -- in preference order addresses [9] HostAddresses OPTIONAL, enc-authorization-data [10] EncryptedData OPTIONAL, -- Encrypted AuthorizationData encoding additional-tickets [11] SEQUENCE OF Ticket OPTIONAL - The fields in this message are: pvno This field is included in <p> Section 5.4.2. - 31 - - -- Version 5 Revision 5 KDC-REP ::= SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, padata [2] PA-DATA OPTIONAL, crealm [3] Realm, cname [4] PrincipalName, ticket <ref> [5] </ref> Ticket, enc-part [6] EncryptedData - EncASRepPart ::= [APPLICATION 25 24 ] EncKDCRepPart EncTGSRepPart ::= [APPLICATION 26] EncKDCRepPart EncKDCRepPart ::= SEQUENCE - key [0] EncryptionKey, last-req [1] LastReq, nonce [2] INTEGER, key-expiration [3] KerberosTime OPTIONAL, flags [4] TicketFlags, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime <p> padata [2] PA-DATA OPTIONAL, crealm [3] Realm, cname [4] PrincipalName, ticket <ref> [5] </ref> Ticket, enc-part [6] EncryptedData - EncASRepPart ::= [APPLICATION 25 24 ] EncKDCRepPart EncTGSRepPart ::= [APPLICATION 26] EncKDCRepPart EncKDCRepPart ::= SEQUENCE - key [0] EncryptionKey, last-req [1] LastReq, nonce [2] INTEGER, key-expiration [3] KerberosTime OPTIONAL, flags [4] TicketFlags, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, srealm [9] Realm, sname [10] PrincipalName, caddr [11] HostAddresses OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is either KRB_AS_REP or KRB_TGS_REP. padata This field is described in detail above. <p> The message fields are: KRB-SAFE ::= [APPLICATION 20] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, safe-body [2] KRB-SAFE-BODY, cksum [3] Checksum - KRB-SAFE-BODY ::= SEQUENCE - user-data [0] OCTET STRING, timestamp [1] KerberosTime OPTIONAL, usec [2] INTEGER OPTIONAL, seq-number [3] INTEGER OPTIONAL, s-address [4] HostAddress, r-address <ref> [5] </ref> HostAddress OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_SAFE. safe-body This field is a placeholder for the body of the KRB-SAFE message. <p> message fields are: KRB-PRIV ::= [APPLICATION 21] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, enc-part [3] EncryptedData - EncKrbPrivPart ::= [APPLICATION 28 28 ] SEQUENCE - user-data [0] OCTET STRING, timestamp [1] KerberosTime OPTIONAL, usec [2] INTEGER OPTIONAL, seq-number [3] INTEGER OPTIONAL, s-address [4] HostAddress, -- sender's addr r-address <ref> [5] </ref> HostAddress OPTIONAL -- recip's addr - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_PRIV. hhhhhhhhhhhhhhhhhh 28 An application code in the encrypted part of a message provides an additional check that the message was decrypted properly. <p> KRB_ERROR definition The KRB_ERROR message consists of the following fields: KRB-ERROR ::= [APPLICATION 30] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, ctime [2] KerberosTime OPTIONAL, cusec [3] INTEGER OPTIONAL, stime [4] KerberosTime, susec <ref> [5] </ref> INTEGER, error-code [6] INTEGER, crealm [7] Realm OPTIONAL, cname [8] PrincipalName OPTIONAL, realm [9] Realm, -- Correct realm sname [10] PrincipalName, -- Correct name e-text [11] GeneralString OPTIONAL, e-data [12] OCTET STRING OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_ERROR. ctime This
Reference: 6. <author> Don Davis and Ralph Swick, </author> <title> ``Workstation Services and Kerberos Authentication at Project Athena,'' </title> <type> Technical Memorandum TM-424, </type> <institution> MIT Laboratory for Computer Science (February 1990). </institution>
Reference-contexts: If a subkey is present, the server either saves it for later use or uses it to help hhhhhhhhhhhhhhhhhh 9 This is used for user-to-user authentication as described in <ref> [6] </ref>. 10 Note that the rejection here is restricted to authenticators from the same principal to the same server. Other client principals communicating with the same server principal should not be have their authenticators rejected if the time and microsecond fields happen to match some other client's authenticator. <p> See section A.6 for pseudocode. hhhhhhhhhhhhhhhhhh 16 This allows easy implementation of user-to-user authentication <ref> [6] </ref>, which uses ticket-granting ticket session keys in lieu of secret server keys in situations where such secret keys could be easily compromised. Section 3.3.3. - 15 - - -- Version 5 Revision 5 3.3.3.1. <p> information: Ticket ::= [APPLICATION 1] SEQUENCE - tkt-vno [0] INTEGER, realm [1] Realm, sname [2] PrincipalName, enc-part [3] EncryptedData - -- Encrypted part of ticket EncTicketPart ::= [APPLICATION 3] SEQUENCE - flags [0] TicketFlags, key [1] EncryptionKey, crealm [2] Realm, cname [3] PrincipalName, transited [4] TransitedEncoding, authtime [5] KerberosTime, starttime <ref> [6] </ref> KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, caddr [9] HostAddresses OPTIONAL, authorization-data [10] AuthorizationData OPTIONAL - -- encoded Transited field TransitedEncoding ::= SEQUENCE - tr-type [0] INTEGER, -- must be a registered value contents [1] OCTET STRING - The encoding of EncTicketPart is encrypted in the key shared <p> The encoding is encrypted in the ticket's session key shared by the client and the server: -- Unencrypted authenticator Authenticator ::= [APPLICATION 2] SEQUENCE - authenticator-vno [0] INTEGER, crealm [1] Realm, cname [2] PrincipalName, cksum [3] Checksum OPTIONAL, cusec [4] INTEGER, ctime [5] KerberosTime, subkey <ref> [6] </ref> EncryptionKey OPTIONAL, seq-number [7] INTEGER OPTIONAL, authorization-data [8] AuthorizationData OPTIONAL - authenticator-vno This field specifies the version number for the format of the authenticator. <p> - KDC-REQ-BODY ::= SEQUENCE - kdc-options [0] KDCOptions, cname [1] PrincipalName OPTIONAL, Section 5.4.1. - 27 - - -- Version 5 Revision 5 -- Used only in AS-REQ realm [2] Realm, -- Server's realm -- Also client's in AS-REQ sname [3] PrincipalName, from [4] KerberosTime OPTIONAL, till [5] KerberosTime, rtime <ref> [6] </ref> KerberosTime OPTIONAL, nonce [7] INTEGER, etype [8] SEQUENCE OF INTEGER, -- EncryptionType, -- in preference order addresses [9] HostAddresses OPTIONAL, enc-authorization-data [10] EncryptedData OPTIONAL, -- Encrypted AuthorizationData encoding additional-tickets [11] SEQUENCE OF Ticket OPTIONAL - The fields in this message are: pvno This field is included in each message, and <p> Section 5.4.2. - 31 - - -- Version 5 Revision 5 KDC-REP ::= SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, padata [2] PA-DATA OPTIONAL, crealm [3] Realm, cname [4] PrincipalName, ticket [5] Ticket, enc-part <ref> [6] </ref> EncryptedData - EncASRepPart ::= [APPLICATION 25 24 ] EncKDCRepPart EncTGSRepPart ::= [APPLICATION 26] EncKDCRepPart EncKDCRepPart ::= SEQUENCE - key [0] EncryptionKey, last-req [1] LastReq, nonce [2] INTEGER, key-expiration [3] KerberosTime OPTIONAL, flags [4] TicketFlags, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, srealm [9] <p> OPTIONAL, crealm [3] Realm, cname [4] PrincipalName, ticket [5] Ticket, enc-part <ref> [6] </ref> EncryptedData - EncASRepPart ::= [APPLICATION 25 24 ] EncKDCRepPart EncTGSRepPart ::= [APPLICATION 26] EncKDCRepPart EncKDCRepPart ::= SEQUENCE - key [0] EncryptionKey, last-req [1] LastReq, nonce [2] INTEGER, key-expiration [3] KerberosTime OPTIONAL, flags [4] TicketFlags, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, srealm [9] Realm, sname [10] PrincipalName, caddr [11] HostAddresses OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is either KRB_AS_REP or KRB_TGS_REP. padata This field is described in detail above. <p> KRB_ERROR definition The KRB_ERROR message consists of the following fields: KRB-ERROR ::= [APPLICATION 30] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, ctime [2] KerberosTime OPTIONAL, cusec [3] INTEGER OPTIONAL, stime [4] KerberosTime, susec [5] INTEGER, error-code <ref> [6] </ref> INTEGER, crealm [7] Realm OPTIONAL, cname [8] PrincipalName OPTIONAL, realm [9] Realm, -- Correct realm sname [10] PrincipalName, -- Correct name e-text [11] GeneralString OPTIONAL, e-data [12] OCTET STRING OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_ERROR. ctime This field is described
Reference: 7. <author> P. J. Levine, M. R. Gretzinger, J. M. Diaz, W. E. Sommerfeld, and K. Raeburn, </author> <title> Section E.1: Service Management System, M.I.T. Project Athena, </title> <address> Cambridge, Massachusetts (1987). </address>
Reference-contexts: This field might be useful in conjunction with user registration procedures, for site-specific policy implementations (Project Athena currently uses it for their user registration process controlled by the system-wide database Section 4.2. - 19 - - -- Version 5 Revision 5 service, Moira. <ref> [7] </ref>), or to identify the "string to key" conversion algorithm used for a principal's key 20 . <p> 1] SEQUENCE - tkt-vno [0] INTEGER, realm [1] Realm, sname [2] PrincipalName, enc-part [3] EncryptedData - -- Encrypted part of ticket EncTicketPart ::= [APPLICATION 3] SEQUENCE - flags [0] TicketFlags, key [1] EncryptionKey, crealm [2] Realm, cname [3] PrincipalName, transited [4] TransitedEncoding, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime <ref> [7] </ref> KerberosTime, renew-till [8] KerberosTime OPTIONAL, caddr [9] HostAddresses OPTIONAL, authorization-data [10] AuthorizationData OPTIONAL - -- encoded Transited field TransitedEncoding ::= SEQUENCE - tr-type [0] INTEGER, -- must be a registered value contents [1] OCTET STRING - The encoding of EncTicketPart is encrypted in the key shared by Kerberos and the <p> The encoding is encrypted in the ticket's session key shared by the client and the server: -- Unencrypted authenticator Authenticator ::= [APPLICATION 2] SEQUENCE - authenticator-vno [0] INTEGER, crealm [1] Realm, cname [2] PrincipalName, cksum [3] Checksum OPTIONAL, cusec [4] INTEGER, ctime [5] KerberosTime, subkey [6] EncryptionKey OPTIONAL, seq-number <ref> [7] </ref> INTEGER OPTIONAL, authorization-data [8] AuthorizationData OPTIONAL - authenticator-vno This field specifies the version number for the format of the authenticator. <p> - kdc-options [0] KDCOptions, cname [1] PrincipalName OPTIONAL, Section 5.4.1. - 27 - - -- Version 5 Revision 5 -- Used only in AS-REQ realm [2] Realm, -- Server's realm -- Also client's in AS-REQ sname [3] PrincipalName, from [4] KerberosTime OPTIONAL, till [5] KerberosTime, rtime [6] KerberosTime OPTIONAL, nonce <ref> [7] </ref> INTEGER, etype [8] SEQUENCE OF INTEGER, -- EncryptionType, -- in preference order addresses [9] HostAddresses OPTIONAL, enc-authorization-data [10] EncryptedData OPTIONAL, -- Encrypted AuthorizationData encoding additional-tickets [11] SEQUENCE OF Ticket OPTIONAL - The fields in this message are: pvno This field is included in each message, and specifies the protocol version <p> cname [4] PrincipalName, ticket [5] Ticket, enc-part [6] EncryptedData - EncASRepPart ::= [APPLICATION 25 24 ] EncKDCRepPart EncTGSRepPart ::= [APPLICATION 26] EncKDCRepPart EncKDCRepPart ::= SEQUENCE - key [0] EncryptionKey, last-req [1] LastReq, nonce [2] INTEGER, key-expiration [3] KerberosTime OPTIONAL, flags [4] TicketFlags, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime <ref> [7] </ref> KerberosTime, renew-till [8] KerberosTime OPTIONAL, srealm [9] Realm, sname [10] PrincipalName, caddr [11] HostAddresses OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is either KRB_AS_REP or KRB_TGS_REP. padata This field is described in detail above. <p> KRB_ERROR definition The KRB_ERROR message consists of the following fields: KRB-ERROR ::= [APPLICATION 30] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, ctime [2] KerberosTime OPTIONAL, cusec [3] INTEGER OPTIONAL, stime [4] KerberosTime, susec [5] INTEGER, error-code [6] INTEGER, crealm <ref> [7] </ref> Realm OPTIONAL, cname [8] PrincipalName OPTIONAL, realm [9] Realm, -- Correct realm sname [10] PrincipalName, -- Correct name e-text [11] GeneralString OPTIONAL, e-data [12] OCTET STRING OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_ERROR. ctime This field is described above in section
Reference: 8. <author> CCITT, </author> <title> Recommendation X.509: The Directory Authentication Framework, </title> <month> December </month> <year> 1988. </year>
Reference-contexts: Specification of encryption and checksum techniques, and the fields related to them, appear in section 6. 5.1. ASN.1 Distinguished Encoding Representation All uses of ASN.1 in Kerberos shall use the Distinguished Encoding Representation of the data elements as described in the X.509 specification, section 8.7 <ref> [8] </ref>. 5.2. ASN.1 Base Definitions The following ASN.1 base definitions are used in the rest of this section. Note that since the underscore character (_) is not permitted in ASN.1 names, the hyphen (-) is used in its place for the purposes of ASN.1 names. <p> tkt-vno [0] INTEGER, realm [1] Realm, sname [2] PrincipalName, enc-part [3] EncryptedData - -- Encrypted part of ticket EncTicketPart ::= [APPLICATION 3] SEQUENCE - flags [0] TicketFlags, key [1] EncryptionKey, crealm [2] Realm, cname [3] PrincipalName, transited [4] TransitedEncoding, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till <ref> [8] </ref> KerberosTime OPTIONAL, caddr [9] HostAddresses OPTIONAL, authorization-data [10] AuthorizationData OPTIONAL - -- encoded Transited field TransitedEncoding ::= SEQUENCE - tr-type [0] INTEGER, -- must be a registered value contents [1] OCTET STRING - The encoding of EncTicketPart is encrypted in the key shared by Kerberos and the end server (the <p> encrypted in the ticket's session key shared by the client and the server: -- Unencrypted authenticator Authenticator ::= [APPLICATION 2] SEQUENCE - authenticator-vno [0] INTEGER, crealm [1] Realm, cname [2] PrincipalName, cksum [3] Checksum OPTIONAL, cusec [4] INTEGER, ctime [5] KerberosTime, subkey [6] EncryptionKey OPTIONAL, seq-number [7] INTEGER OPTIONAL, authorization-data <ref> [8] </ref> AuthorizationData OPTIONAL - authenticator-vno This field specifies the version number for the format of the authenticator. <p> KDCOptions, cname [1] PrincipalName OPTIONAL, Section 5.4.1. - 27 - - -- Version 5 Revision 5 -- Used only in AS-REQ realm [2] Realm, -- Server's realm -- Also client's in AS-REQ sname [3] PrincipalName, from [4] KerberosTime OPTIONAL, till [5] KerberosTime, rtime [6] KerberosTime OPTIONAL, nonce [7] INTEGER, etype <ref> [8] </ref> SEQUENCE OF INTEGER, -- EncryptionType, -- in preference order addresses [9] HostAddresses OPTIONAL, enc-authorization-data [10] EncryptedData OPTIONAL, -- Encrypted AuthorizationData encoding additional-tickets [11] SEQUENCE OF Ticket OPTIONAL - The fields in this message are: pvno This field is included in each message, and specifies the protocol version number. <p> ticket [5] Ticket, enc-part [6] EncryptedData - EncASRepPart ::= [APPLICATION 25 24 ] EncKDCRepPart EncTGSRepPart ::= [APPLICATION 26] EncKDCRepPart EncKDCRepPart ::= SEQUENCE - key [0] EncryptionKey, last-req [1] LastReq, nonce [2] INTEGER, key-expiration [3] KerberosTime OPTIONAL, flags [4] TicketFlags, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till <ref> [8] </ref> KerberosTime OPTIONAL, srealm [9] Realm, sname [10] PrincipalName, caddr [11] HostAddresses OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is either KRB_AS_REP or KRB_TGS_REP. padata This field is described in detail above. <p> KRB_ERROR definition The KRB_ERROR message consists of the following fields: KRB-ERROR ::= [APPLICATION 30] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, ctime [2] KerberosTime OPTIONAL, cusec [3] INTEGER OPTIONAL, stime [4] KerberosTime, susec [5] INTEGER, error-code [6] INTEGER, crealm [7] Realm OPTIONAL, cname <ref> [8] </ref> PrincipalName OPTIONAL, realm [9] Realm, -- Correct realm sname [10] PrincipalName, -- Correct name e-text [11] GeneralString OPTIONAL, e-data [12] OCTET STRING OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_ERROR. ctime This field is described above in section 5.4.1. cusec This field
Reference: 9. <author> B. Clifford Neuman, </author> <title> ``Proxy-Based Authorization and Accounting for Distributed Systems,'' </title> <type> Technical Report 91-02-01, </type> <institution> Department of Computer Science and Engineering, </institution> <address> University of Washington (March 1991). </address>
Reference-contexts: [1] Realm, sname [2] PrincipalName, enc-part [3] EncryptedData - -- Encrypted part of ticket EncTicketPart ::= [APPLICATION 3] SEQUENCE - flags [0] TicketFlags, key [1] EncryptionKey, crealm [2] Realm, cname [3] PrincipalName, transited [4] TransitedEncoding, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, caddr <ref> [9] </ref> HostAddresses OPTIONAL, authorization-data [10] AuthorizationData OPTIONAL - -- encoded Transited field TransitedEncoding ::= SEQUENCE - tr-type [0] INTEGER, -- must be a registered value contents [1] OCTET STRING - The encoding of EncTicketPart is encrypted in the key shared by Kerberos and the end server (the server's secret key). <p> It is interesting to note that if one specifies the authorization-data field of a proxy and leaves the host addresses blank, the resulting ticket and session key can be treated as a capability. See <ref> [9] </ref> for some suggested uses of this field. The authorization-data field is optional and does not have to be included in a ticket. 5.3.2. <p> -- Version 5 Revision 5 -- Used only in AS-REQ realm [2] Realm, -- Server's realm -- Also client's in AS-REQ sname [3] PrincipalName, from [4] KerberosTime OPTIONAL, till [5] KerberosTime, rtime [6] KerberosTime OPTIONAL, nonce [7] INTEGER, etype [8] SEQUENCE OF INTEGER, -- EncryptionType, -- in preference order addresses <ref> [9] </ref> HostAddresses OPTIONAL, enc-authorization-data [10] EncryptedData OPTIONAL, -- Encrypted AuthorizationData encoding additional-tickets [11] SEQUENCE OF Ticket OPTIONAL - The fields in this message are: pvno This field is included in each message, and specifies the protocol version number. <p> [6] EncryptedData - EncASRepPart ::= [APPLICATION 25 24 ] EncKDCRepPart EncTGSRepPart ::= [APPLICATION 26] EncKDCRepPart EncKDCRepPart ::= SEQUENCE - key [0] EncryptionKey, last-req [1] LastReq, nonce [2] INTEGER, key-expiration [3] KerberosTime OPTIONAL, flags [4] TicketFlags, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, srealm <ref> [9] </ref> Realm, sname [10] PrincipalName, caddr [11] HostAddresses OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is either KRB_AS_REP or KRB_TGS_REP. padata This field is described in detail above. <p> KRB_ERROR definition The KRB_ERROR message consists of the following fields: KRB-ERROR ::= [APPLICATION 30] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, ctime [2] KerberosTime OPTIONAL, cusec [3] INTEGER OPTIONAL, stime [4] KerberosTime, susec [5] INTEGER, error-code [6] INTEGER, crealm [7] Realm OPTIONAL, cname [8] PrincipalName OPTIONAL, realm <ref> [9] </ref> Realm, -- Correct realm sname [10] PrincipalName, -- Correct name e-text [11] GeneralString OPTIONAL, e-data [12] OCTET STRING OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_ERROR. ctime This field is described above in section 5.4.1. cusec This field is described above in
Reference: 10. <institution> National Bureau of Standards, U.S. Department of Commerce, ``Data Encryption Standard,'' Federal Information Processing Standards Publication 46, </institution> <address> Washington, DC (1977). </address>
Reference-contexts: PrincipalName, enc-part [3] EncryptedData - -- Encrypted part of ticket EncTicketPart ::= [APPLICATION 3] SEQUENCE - flags [0] TicketFlags, key [1] EncryptionKey, crealm [2] Realm, cname [3] PrincipalName, transited [4] TransitedEncoding, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, caddr [9] HostAddresses OPTIONAL, authorization-data <ref> [10] </ref> AuthorizationData OPTIONAL - -- encoded Transited field TransitedEncoding ::= SEQUENCE - tr-type [0] INTEGER, -- must be a registered value contents [1] OCTET STRING - The encoding of EncTicketPart is encrypted in the key shared by Kerberos and the end server (the server's secret key). <p> 5 -- Used only in AS-REQ realm [2] Realm, -- Server's realm -- Also client's in AS-REQ sname [3] PrincipalName, from [4] KerberosTime OPTIONAL, till [5] KerberosTime, rtime [6] KerberosTime OPTIONAL, nonce [7] INTEGER, etype [8] SEQUENCE OF INTEGER, -- EncryptionType, -- in preference order addresses [9] HostAddresses OPTIONAL, enc-authorization-data <ref> [10] </ref> EncryptedData OPTIONAL, -- Encrypted AuthorizationData encoding additional-tickets [11] SEQUENCE OF Ticket OPTIONAL - The fields in this message are: pvno This field is included in each message, and specifies the protocol version number. <p> EncASRepPart ::= [APPLICATION 25 24 ] EncKDCRepPart EncTGSRepPart ::= [APPLICATION 26] EncKDCRepPart EncKDCRepPart ::= SEQUENCE - key [0] EncryptionKey, last-req [1] LastReq, nonce [2] INTEGER, key-expiration [3] KerberosTime OPTIONAL, flags [4] TicketFlags, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, srealm [9] Realm, sname <ref> [10] </ref> PrincipalName, caddr [11] HostAddresses OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is either KRB_AS_REP or KRB_TGS_REP. padata This field is described in detail above. <p> message consists of the following fields: KRB-ERROR ::= [APPLICATION 30] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, ctime [2] KerberosTime OPTIONAL, cusec [3] INTEGER OPTIONAL, stime [4] KerberosTime, susec [5] INTEGER, error-code [6] INTEGER, crealm [7] Realm OPTIONAL, cname [8] PrincipalName OPTIONAL, realm [9] Realm, -- Correct realm sname <ref> [10] </ref> PrincipalName, -- Correct name e-text [11] GeneralString OPTIONAL, e-data [12] OCTET STRING OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_ERROR. ctime This field is described above in section 5.4.1. cusec This field is described above in section 5.5.2. hhhhhhhhhhhhhhhhhh 29 If supported <p> Encryption and Checksum Specifications The Kerberos protocols described in this document are designed to use stream encryption ciphers, which can be simulated using commonly available block encryption ciphers, such as the Data Encryption Standard, <ref> [10] </ref> in conjunction with block chaining and checksum methods [11]. Encryption is used to prove the identities of the network entities participating in message exchanges. The Key Distribution Center for each realm is trusted by all principals registered in that realm to store a secret key in confidence. <p> The ciphertext is simply the plain-text. The NULL Key is used by the null encryption system and is zero octets in length, with keytype zero (0). 6.3.2. DES in CBC mode with a CRC-32 checksum (des-cbc-crc) The des-cbc-crc encryption mode encrypts information under the Data Encryption Standard <ref> [10] </ref> using the cipher block chaining mode [11]. A CRC-32 checksum (described in ISO 3309 [13]) is applied to the confounder and message sequence (msg-seq) and placed in the cksum field. DES blocks are 8 bytes. <p> DES in CBC mode with an MD4 checksum (des-cbc-md4) The des-cbc-md4 encryption mode encrypts information under the Data Encryption Standard <ref> [10] </ref> using the cipher block chaining mode [11]. An MD4 checksum (described in [14]) is applied to the confounder and message sequence (msg-seq) and placed in the cksum field. DES blocks are 8 bytes. <p> The details of the encryption of this data are identical to those for the des-cbc-md5 encryption mode. 6.3.4. DES in CBC mode with an MD5 checksum (des-cbc-md5) The des-cbc-md5 encryption mode encrypts information under the Data Encryption Standard <ref> [10] </ref> using the cipher block chaining mode [11]. An MD5 checksum (described in [15].) is applied to the confounder and message sequence (msg-seq) and placed in the cksum field. DES blocks are 8 bytes.
Reference: 11. <institution> National Bureau of Standards, U.S. Department of Commerce, ``DES Modes of Operation,'' </institution> <note> Federal Information Processing Standards Publication 81, Springfield, VA (December 1980). </note>
Reference-contexts: Realm, -- Server's realm -- Also client's in AS-REQ sname [3] PrincipalName, from [4] KerberosTime OPTIONAL, till [5] KerberosTime, rtime [6] KerberosTime OPTIONAL, nonce [7] INTEGER, etype [8] SEQUENCE OF INTEGER, -- EncryptionType, -- in preference order addresses [9] HostAddresses OPTIONAL, enc-authorization-data [10] EncryptedData OPTIONAL, -- Encrypted AuthorizationData encoding additional-tickets <ref> [11] </ref> SEQUENCE OF Ticket OPTIONAL - The fields in this message are: pvno This field is included in each message, and specifies the protocol version number. This docu ment specifies protocol version 5. msg-type This field indicates the type of a protocol message. <p> 25 24 ] EncKDCRepPart EncTGSRepPart ::= [APPLICATION 26] EncKDCRepPart EncKDCRepPart ::= SEQUENCE - key [0] EncryptionKey, last-req [1] LastReq, nonce [2] INTEGER, key-expiration [3] KerberosTime OPTIONAL, flags [4] TicketFlags, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, srealm [9] Realm, sname [10] PrincipalName, caddr <ref> [11] </ref> HostAddresses OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is either KRB_AS_REP or KRB_TGS_REP. padata This field is described in detail above. <p> KRB-ERROR ::= [APPLICATION 30] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, ctime [2] KerberosTime OPTIONAL, cusec [3] INTEGER OPTIONAL, stime [4] KerberosTime, susec [5] INTEGER, error-code [6] INTEGER, crealm [7] Realm OPTIONAL, cname [8] PrincipalName OPTIONAL, realm [9] Realm, -- Correct realm sname [10] PrincipalName, -- Correct name e-text <ref> [11] </ref> GeneralString OPTIONAL, e-data [12] OCTET STRING OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_ERROR. ctime This field is described above in section 5.4.1. cusec This field is described above in section 5.5.2. hhhhhhhhhhhhhhhhhh 29 If supported by the encryption method in use, <p> Encryption and Checksum Specifications The Kerberos protocols described in this document are designed to use stream encryption ciphers, which can be simulated using commonly available block encryption ciphers, such as the Data Encryption Standard, [10] in conjunction with block chaining and checksum methods <ref> [11] </ref>. Encryption is used to prove the identities of the network entities participating in message exchanges. The Key Distribution Center for each realm is trusted by all principals registered in that realm to store a secret key in confidence. <p> The NULL Key is used by the null encryption system and is zero octets in length, with keytype zero (0). 6.3.2. DES in CBC mode with a CRC-32 checksum (des-cbc-crc) The des-cbc-crc encryption mode encrypts information under the Data Encryption Standard [10] using the cipher block chaining mode <ref> [11] </ref>. A CRC-32 checksum (described in ISO 3309 [13]) is applied to the confounder and message sequence (msg-seq) and placed in the cksum field. DES blocks are 8 bytes. <p> DES in CBC mode with an MD4 checksum (des-cbc-md4) The des-cbc-md4 encryption mode encrypts information under the Data Encryption Standard [10] using the cipher block chaining mode <ref> [11] </ref>. An MD4 checksum (described in [14]) is applied to the confounder and message sequence (msg-seq) and placed in the cksum field. DES blocks are 8 bytes. <p> The details of the encryption of this data are identical to those for the des-cbc-md5 encryption mode. 6.3.4. DES in CBC mode with an MD5 checksum (des-cbc-md5) The des-cbc-md5 encryption mode encrypts information under the Data Encryption Standard [10] using the cipher block chaining mode <ref> [11] </ref>. An MD5 checksum (described in [15].) is applied to the confounder and message sequence (msg-seq) and placed in the cksum field. DES blocks are 8 bytes.
Reference: 12. <author> Stuart G. Stubblebine and Virgil D. Gligor, </author> <title> ``On Message Integrity in Cryptographic Protocols,'' </title> <booktitle> in Proceedings of the IEEE Symposium on Research in Security and Privacy, </booktitle> <address> Oakland, California (May 1992). </address>
Reference-contexts: SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, ctime [2] KerberosTime OPTIONAL, cusec [3] INTEGER OPTIONAL, stime [4] KerberosTime, susec [5] INTEGER, error-code [6] INTEGER, crealm [7] Realm OPTIONAL, cname [8] PrincipalName OPTIONAL, realm [9] Realm, -- Correct realm sname [10] PrincipalName, -- Correct name e-text [11] GeneralString OPTIONAL, e-data <ref> [12] </ref> OCTET STRING OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_ERROR. ctime This field is described above in section 5.4.1. cusec This field is described above in section 5.5.2. hhhhhhhhhhhhhhhhhh 29 If supported by the encryption method in use, an initialization vector may <p> For an discussion of the integrity characteristics of the candidate encryption and checksum methods considered for Kerberos, the the reader is referred to <ref> [12] </ref>. 6.1. Encryption Specifications The following ASN.1 definition describes all encrypted messages. The enc-part field which appears in the unencrypted part of messages in section 5 is a sequence consisting of an encryption type, an optional key version number, and the ciphertext. <p> The details of the encryption of this data are identical to those for the des-cbc-md5 encryption mode. Note that, since the CRC-32 checksum is not collision-proof, an attacker could use a probabilistic chosen-plaintext attack to generate a valid message even if a confounder is used <ref> [12] </ref>. The use of collision-proof checksums is recommended for environments where such attacks represent a significant threat. The use of the CRC-32 as the checksum for ticket or authenticator is no longer mandated as an interoperability requirement for Kerberos Version 5 Specification 1 (See section 9.1 for specific details). 6.3.3. <p> The resulting checksum is four (4) octets in length. The CRC-32 is neither keyed nor collision-proof. The use of this checksum is not recommended. An attacker using a probabilistic chosen-plaintext attack as described in <ref> [12] </ref> might be able to generate an alternative message that satisfies the checksum. The use of collision-proof checksums is recommended for environments where such attacks represent a significant threat. 6.4.2. The RSA MD4 Checksum (rsa-md4) The RSA-MD4 checksum calculates a checksum using the RSA MD4 algorithm [14].
Reference: 13. <author> International Organization for Standardization, </author> <title> ``ISO Information Processing Systems Data Communication High-Level Data Link Control Procedure Frame Structure,'' </title> <note> IS 3309 (October 1984). 3rd Edition. </note>
Reference-contexts: DES in CBC mode with a CRC-32 checksum (des-cbc-crc) The des-cbc-crc encryption mode encrypts information under the Data Encryption Standard [10] using the cipher block chaining mode [11]. A CRC-32 checksum (described in ISO 3309 <ref> [13] </ref>) is applied to the confounder and message sequence (msg-seq) and placed in the cksum field. DES blocks are 8 bytes. As a result, the data to be encrypted (the concatenation of confounder, checksum, and message) must be padded to an 8 byte boundary before encryption. <p> For most keyed checksums, as well as for the encrypted forms of collision-proof checksums, Kerberos prepends a confounder before the checksum is calculated. 6.4.1. The CRC-32 Checksum (crc32) The CRC-32 checksum calculates a checksum based on a cyclic redundancy check as described in ISO 3309 <ref> [13] </ref>. The resulting checksum is four (4) octets in length. The CRC-32 is neither keyed nor collision-proof. The use of this checksum is not recommended. An attacker using a probabilistic chosen-plaintext attack as described in [12] might be able to generate an alternative message that satisfies the checksum.
Reference: 14. <author> R. Rivest, </author> <title> ``The MD4 Message Digest Algorithm,'' </title> <type> RFC 1320, </type> <institution> MIT Laboratory for Computer Science (April 1992). </institution>
Reference-contexts: DES in CBC mode with an MD4 checksum (des-cbc-md4) The des-cbc-md4 encryption mode encrypts information under the Data Encryption Standard [10] using the cipher block chaining mode [11]. An MD4 checksum (described in <ref> [14] </ref>) is applied to the confounder and message sequence (msg-seq) and placed in the cksum field. DES blocks are 8 bytes. As a result, the data to be encrypted (the concatenation of confounder, checksum, and message) must be padded to an 8 byte boundary before encryption. <p> The use of collision-proof checksums is recommended for environments where such attacks represent a significant threat. 6.4.2. The RSA MD4 Checksum (rsa-md4) The RSA-MD4 checksum calculates a checksum using the RSA MD4 algorithm <ref> [14] </ref>. The algorithm takes as input an input message of arbitrary length and produces as output a 128-bit (16 octet) checksum. RSA-MD4 is believed to be collision-proof. 6.4.3.
Reference: 15. <author> R. Rivest, </author> <title> ``The MD5 Message Digest Algorithm,'' </title> <type> RFC 1321, </type> <institution> MIT Laboratory for Computer Science (April 1992). </institution>
Reference-contexts: DES in CBC mode with an MD5 checksum (des-cbc-md5) The des-cbc-md5 encryption mode encrypts information under the Data Encryption Standard [10] using the cipher block chaining mode [11]. An MD5 checksum (described in <ref> [15] </ref>.) is applied to the confounder and message sequence (msg-seq) and placed in the cksum field. DES blocks are 8 bytes. As a result, the data to be encrypted (the concatenation of confounder, checksum, and message) must be padded to an 8 byte boundary before encryption. <p> The RSA MD5 Checksum (rsa-md5) The RSA-MD5 checksum calculates a checksum using the RSA MD5 algorithm. <ref> [15] </ref>. The algorithm takes as input an input message of arbitrary length and produces as output a 128-bit (16 octet) checksum.

Reference: 1. <author> Introduction ........................................................................................................................................ 1 1.1. </author> <title> Cross-Realm Operation ................................................................................................................. 3 1.2. Environmental assumptions ........................................................................................................... 3 1.3. Glossary of terms ............................................................................................................................ 4 </title>
Reference-contexts: Realm ::= GeneralString PrincipalName ::= SEQUENCE - name-type [0] INTEGER, hhhhhhhhhhhhhhhhhh 20 See the discussion of the padata field in section 5.4.2 for details on why this can be useful. Section 5.2. - 20 - - -- Version 5 Revision 5 name-string <ref> [1] </ref> SEQUENCE OF GeneralString - Kerberos realms are encoded as GeneralStrings. Realms shall not contain a character with the code 0 (the ASCII NUL). <p> It further shall not include any separators. Example: The only valid format for UTC time 6 minutes, 27 seconds after 9 pm on 6 November 1985 is 19851106210627Z. HostAddress ::= SEQUENCE - addr-type [0] INTEGER, address <ref> [1] </ref> OCTET STRING - HostAddresses ::= SEQUENCE OF SEQUENCE - addr-type [0] INTEGER, address [1] OCTET STRING - The host adddress encodings consists of two fields: addr-type This field specifies the type of address that follows. <p> Example: The only valid format for UTC time 6 minutes, 27 seconds after 9 pm on 6 November 1985 is 19851106210627Z. HostAddress ::= SEQUENCE - addr-type [0] INTEGER, address <ref> [1] </ref> OCTET STRING - HostAddresses ::= SEQUENCE OF SEQUENCE - addr-type [0] INTEGER, address [1] OCTET STRING - The host adddress encodings consists of two fields: addr-type This field specifies the type of address that follows. Pre-defined values for this field are specified in section 8.1. address This field encodes a single address of type addr-type. The two forms differ slightly. <p> Pre-defined values for this field are specified in section 8.1. address This field encodes a single address of type addr-type. The two forms differ slightly. HostAddress contains exactly one address; HostAddresses contains a sequence of possibly many addresses. AuthorizationData ::= SEQUENCE OF SEQUENCE - ad-type [0] INTEGER, ad-data <ref> [1] </ref> OCTET STRING - ad-data This field contains authorization data to be interpreted according to the value of the corresponding ad-type field. ad-type This field specifies the format for the ad-data subfield. All negative values are reserved for local use. Non-negative values are reserved for registered use. <p> (7), renewable (8), initial (9), - KDCOptions ::= BIT STRING - reserved (0), forwardable (1), forwarded (2), proxiable (3), proxy (4), allow-postdate (5), postdated (6), unused7 (7), renewable (8), unused9 (9), renewable-ok (27), enc-tkt-in-skey (28), renew (30), validate (31) - LastReq ::= SEQUENCE OF SEQUENCE - lr-type [0] INTEGER, lr-value <ref> [1] </ref> KerberosTime - lr-type This field indicates how the following lr-value field is to be interpreted. Negative values indicate that the information pertains only to the responding server. Non-negative values pertain to all servers for the realm. <p> When a ticket or authenticator is included in a protocol message it is treated as an opaque object. 5.3.1. Tickets A ticket is a record that helps a client authenticate to a service. A Ticket contains the following information: Ticket ::= [APPLICATION 1] SEQUENCE - tkt-vno [0] INTEGER, realm <ref> [1] </ref> Realm, sname [2] PrincipalName, enc-part [3] EncryptedData - -- Encrypted part of ticket EncTicketPart ::= [APPLICATION 3] SEQUENCE - flags [0] TicketFlags, key [1] EncryptionKey, crealm [2] Realm, cname [3] PrincipalName, transited [4] TransitedEncoding, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, caddr [9] <p> A Ticket contains the following information: Ticket ::= [APPLICATION 1] SEQUENCE - tkt-vno [0] INTEGER, realm <ref> [1] </ref> Realm, sname [2] PrincipalName, enc-part [3] EncryptedData - -- Encrypted part of ticket EncTicketPart ::= [APPLICATION 3] SEQUENCE - flags [0] TicketFlags, key [1] EncryptionKey, crealm [2] Realm, cname [3] PrincipalName, transited [4] TransitedEncoding, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, caddr [9] HostAddresses OPTIONAL, authorization-data [10] AuthorizationData OPTIONAL - -- encoded Transited field TransitedEncoding ::= SEQUENCE - tr-type [0] INTEGER, -- must be a registered value <p> crealm [2] Realm, cname [3] PrincipalName, transited [4] TransitedEncoding, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, caddr [9] HostAddresses OPTIONAL, authorization-data [10] AuthorizationData OPTIONAL - -- encoded Transited field TransitedEncoding ::= SEQUENCE - tr-type [0] INTEGER, -- must be a registered value contents <ref> [1] </ref> OCTET STRING - The encoding of EncTicketPart is encrypted in the key shared by Kerberos and the end server (the server's secret key). See section 6 for the format of the ciphertext. tkt-vno This field specifies the version number for the ticket format. <p> The encoding is encrypted in the ticket's session key shared by the client and the server: -- Unencrypted authenticator Authenticator ::= [APPLICATION 2] SEQUENCE - authenticator-vno [0] INTEGER, crealm <ref> [1] </ref> Realm, cname [2] PrincipalName, cksum [3] Checksum OPTIONAL, cusec [4] INTEGER, ctime [5] KerberosTime, subkey [6] EncryptionKey OPTIONAL, seq-number [7] INTEGER OPTIONAL, authorization-data [8] AuthorizationData OPTIONAL - authenticator-vno This field specifies the version number for the format of the authenticator. <p> In either case, the message is sent from the client to the Authentication Server to request credentials for a service. The message fields are: AS-REQ ::= [APPLICATION 10] KDC-REQ TGS-REQ ::= [APPLICATION 12] KDC-REQ KDC-REQ ::= SEQUENCE - pvno <ref> [1] </ref> INTEGER, msg-type [2] INTEGER, padata [3] SEQUENCE OF PA-DATA OPTIONAL, req-body [4] KDC-REQ-BODY - PA-DATA ::= SEQUENCE - padata-type [1] INTEGER, padata-value [2] OCTET STRING, -- might be encoded AP-REQ - KDC-REQ-BODY ::= SEQUENCE - kdc-options [0] KDCOptions, cname [1] PrincipalName OPTIONAL, Section 5.4.1. - 27 - - -- Version <p> The message fields are: AS-REQ ::= [APPLICATION 10] KDC-REQ TGS-REQ ::= [APPLICATION 12] KDC-REQ KDC-REQ ::= SEQUENCE - pvno <ref> [1] </ref> INTEGER, msg-type [2] INTEGER, padata [3] SEQUENCE OF PA-DATA OPTIONAL, req-body [4] KDC-REQ-BODY - PA-DATA ::= SEQUENCE - padata-type [1] INTEGER, padata-value [2] OCTET STRING, -- might be encoded AP-REQ - KDC-REQ-BODY ::= SEQUENCE - kdc-options [0] KDCOptions, cname [1] PrincipalName OPTIONAL, Section 5.4.1. - 27 - - -- Version 5 Revision 5 -- Used only in AS-REQ realm [2] Realm, -- Server's realm -- Also client's in AS-REQ sname <p> TGS-REQ ::= [APPLICATION 12] KDC-REQ KDC-REQ ::= SEQUENCE - pvno <ref> [1] </ref> INTEGER, msg-type [2] INTEGER, padata [3] SEQUENCE OF PA-DATA OPTIONAL, req-body [4] KDC-REQ-BODY - PA-DATA ::= SEQUENCE - padata-type [1] INTEGER, padata-value [2] OCTET STRING, -- might be encoded AP-REQ - KDC-REQ-BODY ::= SEQUENCE - kdc-options [0] KDCOptions, cname [1] PrincipalName OPTIONAL, Section 5.4.1. - 27 - - -- Version 5 Revision 5 -- Used only in AS-REQ realm [2] Realm, -- Server's realm -- Also client's in AS-REQ sname [3] PrincipalName, from [4] KerberosTime OPTIONAL, till [5] KerberosTime, rtime [6] KerberosTime OPTIONAL, nonce [7] INTEGER, etype [8] SEQUENCE OF <p> If the time is ever reset backwards, there is a small, but finite, probability that a nonce will be reused. Section 5.4.2. - 31 - - -- Version 5 Revision 5 KDC-REP ::= SEQUENCE - pvno [0] INTEGER, msg-type <ref> [1] </ref> INTEGER, padata [2] PA-DATA OPTIONAL, crealm [3] Realm, cname [4] PrincipalName, ticket [5] Ticket, enc-part [6] EncryptedData - EncASRepPart ::= [APPLICATION 25 24 ] EncKDCRepPart EncTGSRepPart ::= [APPLICATION 26] EncKDCRepPart EncKDCRepPart ::= SEQUENCE - key [0] EncryptionKey, last-req [1] LastReq, nonce [2] INTEGER, key-expiration [3] KerberosTime OPTIONAL, flags [4] TicketFlags, <p> 5 Revision 5 KDC-REP ::= SEQUENCE - pvno [0] INTEGER, msg-type <ref> [1] </ref> INTEGER, padata [2] PA-DATA OPTIONAL, crealm [3] Realm, cname [4] PrincipalName, ticket [5] Ticket, enc-part [6] EncryptedData - EncASRepPart ::= [APPLICATION 25 24 ] EncKDCRepPart EncTGSRepPart ::= [APPLICATION 26] EncKDCRepPart EncKDCRepPart ::= SEQUENCE - key [0] EncryptionKey, last-req [1] LastReq, nonce [2] INTEGER, key-expiration [3] KerberosTime OPTIONAL, flags [4] TicketFlags, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, srealm [9] Realm, sname [10] PrincipalName, caddr [11] HostAddresses OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is either <p> The KRB_AP_REQ message is often referred to as the "authentication header". AP-REQ ::= [APPLICATION 14] SEQUENCE - pvno [0] INTEGER, msg-type <ref> [1] </ref> INTEGER, ap-options [2] APOptions, ticket [3] Ticket, authenticator [4] EncryptedData - APOptions ::= BIT STRING - reserved (0), use-session-key (1), mutual-required (2) - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_AP_REQ. <p> The message is sent in in response to an application request (KRB_AP_REQ) where the mutual authentication option has been selected in the ap-options field. AP-REP ::= [APPLICATION 15] SEQUENCE - pvno [0] INTEGER, msg-type <ref> [1] </ref> INTEGER, enc-part [2] EncryptedData - EncAPRepPart ::= [APPLICATION 27 26 ] SEQUENCE - ctime [0] KerberosTime, cusec [1] INTEGER, subkey [2] EncryptionKey OPTIONAL, seq-number [3] INTEGER OPTIONAL - The encoded EncAPRepPart is encrypted in the shared session key of the ticket. <p> AP-REP ::= [APPLICATION 15] SEQUENCE - pvno [0] INTEGER, msg-type <ref> [1] </ref> INTEGER, enc-part [2] EncryptedData - EncAPRepPart ::= [APPLICATION 27 26 ] SEQUENCE - ctime [0] KerberosTime, cusec [1] INTEGER, subkey [2] EncryptionKey OPTIONAL, seq-number [3] INTEGER OPTIONAL - The encoded EncAPRepPart is encrypted in the shared session key of the ticket. <p> KRB_SAFE definition The KRB_SAFE message contains user data along with a collision-proof checksum keyed with the session key. The message fields are: KRB-SAFE ::= [APPLICATION 20] SEQUENCE - pvno [0] INTEGER, msg-type <ref> [1] </ref> INTEGER, safe-body [2] KRB-SAFE-BODY, cksum [3] Checksum - KRB-SAFE-BODY ::= SEQUENCE - user-data [0] OCTET STRING, timestamp [1] KerberosTime OPTIONAL, usec [2] INTEGER OPTIONAL, seq-number [3] INTEGER OPTIONAL, s-address [4] HostAddress, r-address [5] HostAddress OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_SAFE. <p> The message fields are: KRB-SAFE ::= [APPLICATION 20] SEQUENCE - pvno [0] INTEGER, msg-type <ref> [1] </ref> INTEGER, safe-body [2] KRB-SAFE-BODY, cksum [3] Checksum - KRB-SAFE-BODY ::= SEQUENCE - user-data [0] OCTET STRING, timestamp [1] KerberosTime OPTIONAL, usec [2] INTEGER OPTIONAL, seq-number [3] INTEGER OPTIONAL, s-address [4] HostAddress, r-address [5] HostAddress OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_SAFE. safe-body This field is a placeholder for the body of the KRB-SAFE message. <p> It presumes that a session key has previously been exchanged (for example, by using the KRB_AP_REQ/KRB_AP_REP messages). 5.7.1. KRB_PRIV definition The KRB_PRIV message contains user data encrypted in the Session Key. The message fields are: KRB-PRIV ::= [APPLICATION 21] SEQUENCE - pvno [0] INTEGER, msg-type <ref> [1] </ref> INTEGER, enc-part [3] EncryptedData - EncKrbPrivPart ::= [APPLICATION 28 28 ] SEQUENCE - user-data [0] OCTET STRING, timestamp [1] KerberosTime OPTIONAL, usec [2] INTEGER OPTIONAL, seq-number [3] INTEGER OPTIONAL, s-address [4] HostAddress, -- sender's addr r-address [5] HostAddress OPTIONAL -- recip's addr - pvno and msg-type These fields are described <p> KRB_PRIV definition The KRB_PRIV message contains user data encrypted in the Session Key. The message fields are: KRB-PRIV ::= [APPLICATION 21] SEQUENCE - pvno [0] INTEGER, msg-type <ref> [1] </ref> INTEGER, enc-part [3] EncryptedData - EncKrbPrivPart ::= [APPLICATION 28 28 ] SEQUENCE - user-data [0] OCTET STRING, timestamp [1] KerberosTime OPTIONAL, usec [2] INTEGER OPTIONAL, seq-number [3] INTEGER OPTIONAL, s-address [4] HostAddress, -- sender's addr r-address [5] HostAddress OPTIONAL -- recip's addr - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_PRIV. hhhhhhhhhhhhhhhhhh 28 An application code in the encrypted part of a message <p> The message can be useful, however, for advising a user on the reason for some failure. 5.8.1. KRB_ERROR definition The KRB_ERROR message consists of the following fields: KRB-ERROR ::= [APPLICATION 30] SEQUENCE - pvno [0] INTEGER, msg-type <ref> [1] </ref> INTEGER, ctime [2] KerberosTime OPTIONAL, cusec [3] INTEGER OPTIONAL, stime [4] KerberosTime, susec [5] INTEGER, error-code [6] INTEGER, crealm [7] Realm OPTIONAL, cname [8] PrincipalName OPTIONAL, realm [9] Realm, -- Correct realm sname [10] PrincipalName, -- Correct name e-text [11] GeneralString OPTIONAL, e-data [12] OCTET STRING OPTIONAL - pvno and <p> If the error-code is KRB_AP_ERR_METHOD, then the e-data field will contain an encoding of the following sequence: METHOD-DATA ::= SEQUENCE - method-type [0] INTEGER, method-data <ref> [1] </ref> OCTET STRING OPTIONAL - method-type will indicate the required alternate method; method-data will contain any required additional information. 6. <p> The enc-part field which appears in the unencrypted part of messages in section 5 is a sequence consisting of an encryption type, an optional key version number, and the ciphertext. EncryptedData ::= SEQUENCE - etype [0] INTEGER, -- EncryptionType kvno <ref> [1] </ref> INTEGER OPTIONAL, cipher [2] OCTET STRING -- ciphertext - etype This field identifies which encryption algorithm was used to encipher the cipher. Detailed specifications for selected encryption types appear later in this section. kvno This field contains the version number of the key under which data is encrypted. <p> It is not a valid ASN.1 type. The tag bits and length must be removed from the confounder since the pur Section 6.1. - 39 - - -- Version 5 Revision 5 CipherText ::= ENCRYPTED SEQUENCE - confounder [0] UNTAGGED 31 OCTET STRING (conf_length) OPTIONAL, check <ref> [1] </ref> UNTAGGED OCTET STRING (checksum_length) OPTIONAL, msg-seq [2] MsgSequence, pad UNTAGGED OCTET STRING (pad_length) OPTIONAL - One generates a random confounder of the appropriate length, placing it in confounder; zeroes out check; calculates the appropriate checksum over confounder, check, and msg-seq, placing the result in check; adds the necessary padding; then <p> For example, DES, when used in cipher-block-chaining mode, requires an initialization vector. If required, the description for each encryption type must specify the source of such additional information. 6.2. Encryption Keys The sequence below shows the encoding of an encryption key: EncryptionKey ::= SEQUENCE - keytype [0] INTEGER, keyvalue <ref> [1] </ref> OCTET STRING - keytype This field specifies the type of encryption key that follows in the keyvalue field. <p> Checksums The following is the ASN.1 definition used for a checksum: Checksum ::= SEQUENCE - cksumtype [0] INTEGER, checksum <ref> [1] </ref> OCTET STRING - cksumtype This field indicates the algorithm used to generate the accompanying checksum. checksum This field contains the checksum itself, encoded as an octet string. Detailed specification of selected checksum types appear later in this section. Negative values for the checksum type are reserved for local use. <p> The format for the checksum is described in the following diagram: +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ | des-cbc (confounder + rsa-md4 (confounder+msg),key=var (key),iv=0) | +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ The format cannot be described in ASN.1, but for those who prefer an ASN.1-like notation: rsa-md4-des-checksum ::= ENCRYPTED UNTAGGED SEQUENCE - confounder [0] UNTAGGED OCTET STRING (8), check <ref> [1] </ref> UNTAGGED OCTET STRING (16) - 6.4.4. The RSA MD5 Checksum (rsa-md5) The RSA-MD5 checksum calculates a checksum using the RSA MD5 algorithm. [15]. The algorithm takes as input an input message of arbitrary length and produces as output a 128-bit (16 octet) checksum. <p> The format for the checksum is described in the following diagram: +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ | des-cbc (confounder + rsa-md5 (confounder+msg),key=var (key),iv=0) | +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ The format cannot be described in ASN.1, but for those who prefer an ASN.1-like notation: rsa-md5-des-checksum ::= ENCRYPTED UNTAGGED SEQUENCE - confounder [0] UNTAGGED OCTET STRING (8), check <ref> [1] </ref> UNTAGGED OCTET STRING (16) - 6.4.6. <p> The format for the checksum is described in the following diagram: +--+--+--+--+--+--+--+--+-----+-----+-----+-----+-----+-----+-----+-----+ | des-cbc (confounder + des-mac (conf+msg,iv=0,key),key=var (key),iv=0) | +--+--+--+--+--+--+--+--+-----+-----+-----+-----+-----+-----+-----+-----+ The format cannot be described in ASN.1, but for those who prefer an ASN.1-like notation: des-mac-checksum ::= ENCRYPTED UNTAGGED SEQUENCE - confounder [0] UNTAGGED OCTET STRING (8), check <ref> [1] </ref> UNTAGGED OCTET STRING (8) - The DES specifications identify some "weak" and "semi-weak" keys; those keys shall not be used for generating DES-MAC checksums for use in Kerberos, nor shall a key be used whose veriant is "weak" or "semi-weak". 6.4.7.
Reference: 2. <institution> Ticket flag uses and requests ............................................................................................................ 5 2.1. </institution> <note> Initial tickets .................................................................................................................................... 5 2.2. Invalid tickets .................................................................................................................................. 5 2.3. Renewable tickets ........................................................................................................................... 6 2.4. Postdated tickets ............................................................................................................................. 6 2.5. Proxiable and proxy tickets ........................................................................................................... 6 2.6. Forwardable tickets ........................................................................................................................ 7 2.7. Other KDC options ......................................................................................................................... 7 </note>
Reference-contexts: Tickets A ticket is a record that helps a client authenticate to a service. A Ticket contains the following information: Ticket ::= [APPLICATION 1] SEQUENCE - tkt-vno [0] INTEGER, realm [1] Realm, sname <ref> [2] </ref> PrincipalName, enc-part [3] EncryptedData - -- Encrypted part of ticket EncTicketPart ::= [APPLICATION 3] SEQUENCE - flags [0] TicketFlags, key [1] EncryptionKey, crealm [2] Realm, cname [3] PrincipalName, transited [4] TransitedEncoding, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, caddr [9] HostAddresses OPTIONAL, authorization-data <p> A Ticket contains the following information: Ticket ::= [APPLICATION 1] SEQUENCE - tkt-vno [0] INTEGER, realm [1] Realm, sname <ref> [2] </ref> PrincipalName, enc-part [3] EncryptedData - -- Encrypted part of ticket EncTicketPart ::= [APPLICATION 3] SEQUENCE - flags [0] TicketFlags, key [1] EncryptionKey, crealm [2] Realm, cname [3] PrincipalName, transited [4] TransitedEncoding, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, caddr [9] HostAddresses OPTIONAL, authorization-data [10] AuthorizationData OPTIONAL - -- encoded Transited field TransitedEncoding ::= SEQUENCE - tr-type [0] INTEGER, -- must be a registered value contents [1] OCTET <p> The encoding is encrypted in the ticket's session key shared by the client and the server: -- Unencrypted authenticator Authenticator ::= [APPLICATION 2] SEQUENCE - authenticator-vno [0] INTEGER, crealm [1] Realm, cname <ref> [2] </ref> PrincipalName, cksum [3] Checksum OPTIONAL, cusec [4] INTEGER, ctime [5] KerberosTime, subkey [6] EncryptionKey OPTIONAL, seq-number [7] INTEGER OPTIONAL, authorization-data [8] AuthorizationData OPTIONAL - authenticator-vno This field specifies the version number for the format of the authenticator. <p> In either case, the message is sent from the client to the Authentication Server to request credentials for a service. The message fields are: AS-REQ ::= [APPLICATION 10] KDC-REQ TGS-REQ ::= [APPLICATION 12] KDC-REQ KDC-REQ ::= SEQUENCE - pvno [1] INTEGER, msg-type <ref> [2] </ref> INTEGER, padata [3] SEQUENCE OF PA-DATA OPTIONAL, req-body [4] KDC-REQ-BODY - PA-DATA ::= SEQUENCE - padata-type [1] INTEGER, padata-value [2] OCTET STRING, -- might be encoded AP-REQ - KDC-REQ-BODY ::= SEQUENCE - kdc-options [0] KDCOptions, cname [1] PrincipalName OPTIONAL, Section 5.4.1. - 27 - - -- Version 5 Revision 5 <p> The message fields are: AS-REQ ::= [APPLICATION 10] KDC-REQ TGS-REQ ::= [APPLICATION 12] KDC-REQ KDC-REQ ::= SEQUENCE - pvno [1] INTEGER, msg-type <ref> [2] </ref> INTEGER, padata [3] SEQUENCE OF PA-DATA OPTIONAL, req-body [4] KDC-REQ-BODY - PA-DATA ::= SEQUENCE - padata-type [1] INTEGER, padata-value [2] OCTET STRING, -- might be encoded AP-REQ - KDC-REQ-BODY ::= SEQUENCE - kdc-options [0] KDCOptions, cname [1] PrincipalName OPTIONAL, Section 5.4.1. - 27 - - -- Version 5 Revision 5 -- Used only in AS-REQ realm [2] Realm, -- Server's realm -- Also client's in AS-REQ sname [3] PrincipalName, from <p> OPTIONAL, req-body [4] KDC-REQ-BODY - PA-DATA ::= SEQUENCE - padata-type [1] INTEGER, padata-value <ref> [2] </ref> OCTET STRING, -- might be encoded AP-REQ - KDC-REQ-BODY ::= SEQUENCE - kdc-options [0] KDCOptions, cname [1] PrincipalName OPTIONAL, Section 5.4.1. - 27 - - -- Version 5 Revision 5 -- Used only in AS-REQ realm [2] Realm, -- Server's realm -- Also client's in AS-REQ sname [3] PrincipalName, from [4] KerberosTime OPTIONAL, till [5] KerberosTime, rtime [6] KerberosTime OPTIONAL, nonce [7] INTEGER, etype [8] SEQUENCE OF INTEGER, -- EncryptionType, -- in preference order addresses [9] HostAddresses OPTIONAL, enc-authorization-data [10] EncryptedData OPTIONAL, -- Encrypted AuthorizationData encoding additional-tickets <p> If the time is ever reset backwards, there is a small, but finite, probability that a nonce will be reused. Section 5.4.2. - 31 - - -- Version 5 Revision 5 KDC-REP ::= SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, padata <ref> [2] </ref> PA-DATA OPTIONAL, crealm [3] Realm, cname [4] PrincipalName, ticket [5] Ticket, enc-part [6] EncryptedData - EncASRepPart ::= [APPLICATION 25 24 ] EncKDCRepPart EncTGSRepPart ::= [APPLICATION 26] EncKDCRepPart EncKDCRepPart ::= SEQUENCE - key [0] EncryptionKey, last-req [1] LastReq, nonce [2] INTEGER, key-expiration [3] KerberosTime OPTIONAL, flags [4] TicketFlags, authtime [5] KerberosTime, <p> KDC-REP ::= SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, padata <ref> [2] </ref> PA-DATA OPTIONAL, crealm [3] Realm, cname [4] PrincipalName, ticket [5] Ticket, enc-part [6] EncryptedData - EncASRepPart ::= [APPLICATION 25 24 ] EncKDCRepPart EncTGSRepPart ::= [APPLICATION 26] EncKDCRepPart EncKDCRepPart ::= SEQUENCE - key [0] EncryptionKey, last-req [1] LastReq, nonce [2] INTEGER, key-expiration [3] KerberosTime OPTIONAL, flags [4] TicketFlags, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, srealm [9] Realm, sname [10] PrincipalName, caddr [11] HostAddresses OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is either KRB_AS_REP or KRB_TGS_REP. <p> The KRB_AP_REQ message is often referred to as the "authentication header". AP-REQ ::= [APPLICATION 14] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, ap-options <ref> [2] </ref> APOptions, ticket [3] Ticket, authenticator [4] EncryptedData - APOptions ::= BIT STRING - reserved (0), use-session-key (1), mutual-required (2) - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_AP_REQ. <p> The message is sent in in response to an application request (KRB_AP_REQ) where the mutual authentication option has been selected in the ap-options field. AP-REP ::= [APPLICATION 15] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, enc-part <ref> [2] </ref> EncryptedData - EncAPRepPart ::= [APPLICATION 27 26 ] SEQUENCE - ctime [0] KerberosTime, cusec [1] INTEGER, subkey [2] EncryptionKey OPTIONAL, seq-number [3] INTEGER OPTIONAL - The encoded EncAPRepPart is encrypted in the shared session key of the ticket. <p> AP-REP ::= [APPLICATION 15] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, enc-part <ref> [2] </ref> EncryptedData - EncAPRepPart ::= [APPLICATION 27 26 ] SEQUENCE - ctime [0] KerberosTime, cusec [1] INTEGER, subkey [2] EncryptionKey OPTIONAL, seq-number [3] INTEGER OPTIONAL - The encoded EncAPRepPart is encrypted in the shared session key of the ticket. <p> KRB_SAFE definition The KRB_SAFE message contains user data along with a collision-proof checksum keyed with the session key. The message fields are: KRB-SAFE ::= [APPLICATION 20] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, safe-body <ref> [2] </ref> KRB-SAFE-BODY, cksum [3] Checksum - KRB-SAFE-BODY ::= SEQUENCE - user-data [0] OCTET STRING, timestamp [1] KerberosTime OPTIONAL, usec [2] INTEGER OPTIONAL, seq-number [3] INTEGER OPTIONAL, s-address [4] HostAddress, r-address [5] HostAddress OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_SAFE. safe-body This field <p> The message fields are: KRB-SAFE ::= [APPLICATION 20] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, safe-body <ref> [2] </ref> KRB-SAFE-BODY, cksum [3] Checksum - KRB-SAFE-BODY ::= SEQUENCE - user-data [0] OCTET STRING, timestamp [1] KerberosTime OPTIONAL, usec [2] INTEGER OPTIONAL, seq-number [3] INTEGER OPTIONAL, s-address [4] HostAddress, r-address [5] HostAddress OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_SAFE. safe-body This field is a placeholder for the body of the KRB-SAFE message. <p> The message fields are: KRB-PRIV ::= [APPLICATION 21] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, enc-part [3] EncryptedData - EncKrbPrivPart ::= [APPLICATION 28 28 ] SEQUENCE - user-data [0] OCTET STRING, timestamp [1] KerberosTime OPTIONAL, usec <ref> [2] </ref> INTEGER OPTIONAL, seq-number [3] INTEGER OPTIONAL, s-address [4] HostAddress, -- sender's addr r-address [5] HostAddress OPTIONAL -- recip's addr - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_PRIV. hhhhhhhhhhhhhhhhhh 28 An application code in the encrypted part of a message provides an additional check <p> The message can be useful, however, for advising a user on the reason for some failure. 5.8.1. KRB_ERROR definition The KRB_ERROR message consists of the following fields: KRB-ERROR ::= [APPLICATION 30] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, ctime <ref> [2] </ref> KerberosTime OPTIONAL, cusec [3] INTEGER OPTIONAL, stime [4] KerberosTime, susec [5] INTEGER, error-code [6] INTEGER, crealm [7] Realm OPTIONAL, cname [8] PrincipalName OPTIONAL, realm [9] Realm, -- Correct realm sname [10] PrincipalName, -- Correct name e-text [11] GeneralString OPTIONAL, e-data [12] OCTET STRING OPTIONAL - pvno and msg-type These fields <p> The enc-part field which appears in the unencrypted part of messages in section 5 is a sequence consisting of an encryption type, an optional key version number, and the ciphertext. EncryptedData ::= SEQUENCE - etype [0] INTEGER, -- EncryptionType kvno [1] INTEGER OPTIONAL, cipher <ref> [2] </ref> OCTET STRING -- ciphertext - etype This field identifies which encryption algorithm was used to encipher the cipher. Detailed specifications for selected encryption types appear later in this section. kvno This field contains the version number of the key under which data is encrypted. <p> The tag bits and length must be removed from the confounder since the pur Section 6.1. - 39 - - -- Version 5 Revision 5 CipherText ::= ENCRYPTED SEQUENCE - confounder [0] UNTAGGED 31 OCTET STRING (conf_length) OPTIONAL, check [1] UNTAGGED OCTET STRING (checksum_length) OPTIONAL, msg-seq <ref> [2] </ref> MsgSequence, pad UNTAGGED OCTET STRING (pad_length) OPTIONAL - One generates a random confounder of the appropriate length, placing it in confounder; zeroes out check; calculates the appropriate checksum over confounder, check, and msg-seq, placing the result in check; adds the necessary padding; then encrypts using the specified encryption type and

Reference: 4. <author> The Kerberos Database ..................................................................................................................... 18 4.1. </author> <title> Database contents ........................................................................................................................... 19 4.2. Additional fields .............................................................................................................................. 19 4.3. Frequently Changing Fields ........................................................................................................... 20 4.4. Site Constants .................................................................................................................................. 20 </title>
Reference-contexts: A Ticket contains the following information: Ticket ::= [APPLICATION 1] SEQUENCE - tkt-vno [0] INTEGER, realm [1] Realm, sname [2] PrincipalName, enc-part [3] EncryptedData - -- Encrypted part of ticket EncTicketPart ::= [APPLICATION 3] SEQUENCE - flags [0] TicketFlags, key [1] EncryptionKey, crealm [2] Realm, cname [3] PrincipalName, transited <ref> [4] </ref> TransitedEncoding, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, caddr [9] HostAddresses OPTIONAL, authorization-data [10] AuthorizationData OPTIONAL - -- encoded Transited field TransitedEncoding ::= SEQUENCE - tr-type [0] INTEGER, -- must be a registered value contents [1] OCTET STRING - The encoding of EncTicketPart <p> The encoding is encrypted in the ticket's session key shared by the client and the server: -- Unencrypted authenticator Authenticator ::= [APPLICATION 2] SEQUENCE - authenticator-vno [0] INTEGER, crealm [1] Realm, cname [2] PrincipalName, cksum [3] Checksum OPTIONAL, cusec <ref> [4] </ref> INTEGER, ctime [5] KerberosTime, subkey [6] EncryptionKey OPTIONAL, seq-number [7] INTEGER OPTIONAL, authorization-data [8] AuthorizationData OPTIONAL - authenticator-vno This field specifies the version number for the format of the authenticator. <p> The message fields are: AS-REQ ::= [APPLICATION 10] KDC-REQ TGS-REQ ::= [APPLICATION 12] KDC-REQ KDC-REQ ::= SEQUENCE - pvno [1] INTEGER, msg-type [2] INTEGER, padata [3] SEQUENCE OF PA-DATA OPTIONAL, req-body <ref> [4] </ref> KDC-REQ-BODY - PA-DATA ::= SEQUENCE - padata-type [1] INTEGER, padata-value [2] OCTET STRING, -- might be encoded AP-REQ - KDC-REQ-BODY ::= SEQUENCE - kdc-options [0] KDCOptions, cname [1] PrincipalName OPTIONAL, Section 5.4.1. - 27 - - -- Version 5 Revision 5 -- Used only in AS-REQ realm [2] Realm, -- <p> OCTET STRING, -- might be encoded AP-REQ - KDC-REQ-BODY ::= SEQUENCE - kdc-options [0] KDCOptions, cname [1] PrincipalName OPTIONAL, Section 5.4.1. - 27 - - -- Version 5 Revision 5 -- Used only in AS-REQ realm [2] Realm, -- Server's realm -- Also client's in AS-REQ sname [3] PrincipalName, from <ref> [4] </ref> KerberosTime OPTIONAL, till [5] KerberosTime, rtime [6] KerberosTime OPTIONAL, nonce [7] INTEGER, etype [8] SEQUENCE OF INTEGER, -- EncryptionType, -- in preference order addresses [9] HostAddresses OPTIONAL, enc-authorization-data [10] EncryptedData OPTIONAL, -- Encrypted AuthorizationData encoding additional-tickets [11] SEQUENCE OF Ticket OPTIONAL - The fields in this message are: pvno This <p> If the time is ever reset backwards, there is a small, but finite, probability that a nonce will be reused. Section 5.4.2. - 31 - - -- Version 5 Revision 5 KDC-REP ::= SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, padata [2] PA-DATA OPTIONAL, crealm [3] Realm, cname <ref> [4] </ref> PrincipalName, ticket [5] Ticket, enc-part [6] EncryptedData - EncASRepPart ::= [APPLICATION 25 24 ] EncKDCRepPart EncTGSRepPart ::= [APPLICATION 26] EncKDCRepPart EncKDCRepPart ::= SEQUENCE - key [0] EncryptionKey, last-req [1] LastReq, nonce [2] INTEGER, key-expiration [3] KerberosTime OPTIONAL, flags [4] TicketFlags, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, <p> msg-type [1] INTEGER, padata [2] PA-DATA OPTIONAL, crealm [3] Realm, cname <ref> [4] </ref> PrincipalName, ticket [5] Ticket, enc-part [6] EncryptedData - EncASRepPart ::= [APPLICATION 25 24 ] EncKDCRepPart EncTGSRepPart ::= [APPLICATION 26] EncKDCRepPart EncKDCRepPart ::= SEQUENCE - key [0] EncryptionKey, last-req [1] LastReq, nonce [2] INTEGER, key-expiration [3] KerberosTime OPTIONAL, flags [4] TicketFlags, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, srealm [9] Realm, sname [10] PrincipalName, caddr [11] HostAddresses OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is either KRB_AS_REP or KRB_TGS_REP. padata This field is described in detail <p> The KRB_AP_REQ message is often referred to as the "authentication header". AP-REQ ::= [APPLICATION 14] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, ap-options [2] APOptions, ticket [3] Ticket, authenticator <ref> [4] </ref> EncryptedData - APOptions ::= BIT STRING - reserved (0), use-session-key (1), mutual-required (2) - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_AP_REQ. <p> The message fields are: KRB-SAFE ::= [APPLICATION 20] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, safe-body [2] KRB-SAFE-BODY, cksum [3] Checksum - KRB-SAFE-BODY ::= SEQUENCE - user-data [0] OCTET STRING, timestamp [1] KerberosTime OPTIONAL, usec [2] INTEGER OPTIONAL, seq-number [3] INTEGER OPTIONAL, s-address <ref> [4] </ref> HostAddress, r-address [5] HostAddress OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_SAFE. safe-body This field is a placeholder for the body of the KRB-SAFE message. <p> The message fields are: KRB-PRIV ::= [APPLICATION 21] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, enc-part [3] EncryptedData - EncKrbPrivPart ::= [APPLICATION 28 28 ] SEQUENCE - user-data [0] OCTET STRING, timestamp [1] KerberosTime OPTIONAL, usec [2] INTEGER OPTIONAL, seq-number [3] INTEGER OPTIONAL, s-address <ref> [4] </ref> HostAddress, -- sender's addr r-address [5] HostAddress OPTIONAL -- recip's addr - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_PRIV. hhhhhhhhhhhhhhhhhh 28 An application code in the encrypted part of a message provides an additional check that the message was decrypted properly. <p> The message can be useful, however, for advising a user on the reason for some failure. 5.8.1. KRB_ERROR definition The KRB_ERROR message consists of the following fields: KRB-ERROR ::= [APPLICATION 30] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, ctime [2] KerberosTime OPTIONAL, cusec [3] INTEGER OPTIONAL, stime <ref> [4] </ref> KerberosTime, susec [5] INTEGER, error-code [6] INTEGER, crealm [7] Realm OPTIONAL, cname [8] PrincipalName OPTIONAL, realm [9] Realm, -- Correct realm sname [10] PrincipalName, -- Correct name e-text [11] GeneralString OPTIONAL, e-data [12] OCTET STRING OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is


Reference: 7. <institution> Naming Constraints ........................................................................................................................... 45 7.1. </institution> <note> Realm Names ................................................................................................................................... 45 7.2. Principal Names .............................................................................................................................. 46 </note>
Reference-contexts: This field might be useful in conjunction with user registration procedures, for site-specific policy implementations (Project Athena currently uses it for their user registration process controlled by the system-wide database Section 4.2. - 19 - - -- Version 5 Revision 5 service, Moira. <ref> [7] </ref>), or to identify the "string to key" conversion algorithm used for a principal's key 20 . <p> 1] SEQUENCE - tkt-vno [0] INTEGER, realm [1] Realm, sname [2] PrincipalName, enc-part [3] EncryptedData - -- Encrypted part of ticket EncTicketPart ::= [APPLICATION 3] SEQUENCE - flags [0] TicketFlags, key [1] EncryptionKey, crealm [2] Realm, cname [3] PrincipalName, transited [4] TransitedEncoding, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime <ref> [7] </ref> KerberosTime, renew-till [8] KerberosTime OPTIONAL, caddr [9] HostAddresses OPTIONAL, authorization-data [10] AuthorizationData OPTIONAL - -- encoded Transited field TransitedEncoding ::= SEQUENCE - tr-type [0] INTEGER, -- must be a registered value contents [1] OCTET STRING - The encoding of EncTicketPart is encrypted in the key shared by Kerberos and the <p> The encoding is encrypted in the ticket's session key shared by the client and the server: -- Unencrypted authenticator Authenticator ::= [APPLICATION 2] SEQUENCE - authenticator-vno [0] INTEGER, crealm [1] Realm, cname [2] PrincipalName, cksum [3] Checksum OPTIONAL, cusec [4] INTEGER, ctime [5] KerberosTime, subkey [6] EncryptionKey OPTIONAL, seq-number <ref> [7] </ref> INTEGER OPTIONAL, authorization-data [8] AuthorizationData OPTIONAL - authenticator-vno This field specifies the version number for the format of the authenticator. <p> - kdc-options [0] KDCOptions, cname [1] PrincipalName OPTIONAL, Section 5.4.1. - 27 - - -- Version 5 Revision 5 -- Used only in AS-REQ realm [2] Realm, -- Server's realm -- Also client's in AS-REQ sname [3] PrincipalName, from [4] KerberosTime OPTIONAL, till [5] KerberosTime, rtime [6] KerberosTime OPTIONAL, nonce <ref> [7] </ref> INTEGER, etype [8] SEQUENCE OF INTEGER, -- EncryptionType, -- in preference order addresses [9] HostAddresses OPTIONAL, enc-authorization-data [10] EncryptedData OPTIONAL, -- Encrypted AuthorizationData encoding additional-tickets [11] SEQUENCE OF Ticket OPTIONAL - The fields in this message are: pvno This field is included in each message, and specifies the protocol version <p> cname [4] PrincipalName, ticket [5] Ticket, enc-part [6] EncryptedData - EncASRepPart ::= [APPLICATION 25 24 ] EncKDCRepPart EncTGSRepPart ::= [APPLICATION 26] EncKDCRepPart EncKDCRepPart ::= SEQUENCE - key [0] EncryptionKey, last-req [1] LastReq, nonce [2] INTEGER, key-expiration [3] KerberosTime OPTIONAL, flags [4] TicketFlags, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime <ref> [7] </ref> KerberosTime, renew-till [8] KerberosTime OPTIONAL, srealm [9] Realm, sname [10] PrincipalName, caddr [11] HostAddresses OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is either KRB_AS_REP or KRB_TGS_REP. padata This field is described in detail above. <p> KRB_ERROR definition The KRB_ERROR message consists of the following fields: KRB-ERROR ::= [APPLICATION 30] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, ctime [2] KerberosTime OPTIONAL, cusec [3] INTEGER OPTIONAL, stime [4] KerberosTime, susec [5] INTEGER, error-code [6] INTEGER, crealm <ref> [7] </ref> Realm OPTIONAL, cname [8] PrincipalName OPTIONAL, realm [9] Realm, -- Correct realm sname [10] PrincipalName, -- Correct name e-text [11] GeneralString OPTIONAL, e-data [12] OCTET STRING OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_ERROR. ctime This field is described above in section
Reference: 8. <editor> Constants and other defined values .................................................................................................. 46 8.1. </editor> <title> Host address types .......................................................................................................................... 46 8.2. KDC messages ................................................................................................................................. 47 8.2.1. IP transport ..................................................................................................................................... 47 8.2.2. OSI transport .................................................................................................................................. 47 8.2.3. Name of the TGS ........................................................................................................................... 47 8.3. Protocol constants and associated values ..................................................................................... 48 </title>
Reference-contexts: Specification of encryption and checksum techniques, and the fields related to them, appear in section 6. 5.1. ASN.1 Distinguished Encoding Representation All uses of ASN.1 in Kerberos shall use the Distinguished Encoding Representation of the data elements as described in the X.509 specification, section 8.7 <ref> [8] </ref>. 5.2. ASN.1 Base Definitions The following ASN.1 base definitions are used in the rest of this section. Note that since the underscore character (_) is not permitted in ASN.1 names, the hyphen (-) is used in its place for the purposes of ASN.1 names. <p> tkt-vno [0] INTEGER, realm [1] Realm, sname [2] PrincipalName, enc-part [3] EncryptedData - -- Encrypted part of ticket EncTicketPart ::= [APPLICATION 3] SEQUENCE - flags [0] TicketFlags, key [1] EncryptionKey, crealm [2] Realm, cname [3] PrincipalName, transited [4] TransitedEncoding, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till <ref> [8] </ref> KerberosTime OPTIONAL, caddr [9] HostAddresses OPTIONAL, authorization-data [10] AuthorizationData OPTIONAL - -- encoded Transited field TransitedEncoding ::= SEQUENCE - tr-type [0] INTEGER, -- must be a registered value contents [1] OCTET STRING - The encoding of EncTicketPart is encrypted in the key shared by Kerberos and the end server (the <p> encrypted in the ticket's session key shared by the client and the server: -- Unencrypted authenticator Authenticator ::= [APPLICATION 2] SEQUENCE - authenticator-vno [0] INTEGER, crealm [1] Realm, cname [2] PrincipalName, cksum [3] Checksum OPTIONAL, cusec [4] INTEGER, ctime [5] KerberosTime, subkey [6] EncryptionKey OPTIONAL, seq-number [7] INTEGER OPTIONAL, authorization-data <ref> [8] </ref> AuthorizationData OPTIONAL - authenticator-vno This field specifies the version number for the format of the authenticator. <p> KDCOptions, cname [1] PrincipalName OPTIONAL, Section 5.4.1. - 27 - - -- Version 5 Revision 5 -- Used only in AS-REQ realm [2] Realm, -- Server's realm -- Also client's in AS-REQ sname [3] PrincipalName, from [4] KerberosTime OPTIONAL, till [5] KerberosTime, rtime [6] KerberosTime OPTIONAL, nonce [7] INTEGER, etype <ref> [8] </ref> SEQUENCE OF INTEGER, -- EncryptionType, -- in preference order addresses [9] HostAddresses OPTIONAL, enc-authorization-data [10] EncryptedData OPTIONAL, -- Encrypted AuthorizationData encoding additional-tickets [11] SEQUENCE OF Ticket OPTIONAL - The fields in this message are: pvno This field is included in each message, and specifies the protocol version number. <p> ticket [5] Ticket, enc-part [6] EncryptedData - EncASRepPart ::= [APPLICATION 25 24 ] EncKDCRepPart EncTGSRepPart ::= [APPLICATION 26] EncKDCRepPart EncKDCRepPart ::= SEQUENCE - key [0] EncryptionKey, last-req [1] LastReq, nonce [2] INTEGER, key-expiration [3] KerberosTime OPTIONAL, flags [4] TicketFlags, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till <ref> [8] </ref> KerberosTime OPTIONAL, srealm [9] Realm, sname [10] PrincipalName, caddr [11] HostAddresses OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is either KRB_AS_REP or KRB_TGS_REP. padata This field is described in detail above. <p> KRB_ERROR definition The KRB_ERROR message consists of the following fields: KRB-ERROR ::= [APPLICATION 30] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, ctime [2] KerberosTime OPTIONAL, cusec [3] INTEGER OPTIONAL, stime [4] KerberosTime, susec [5] INTEGER, error-code [6] INTEGER, crealm [7] Realm OPTIONAL, cname <ref> [8] </ref> PrincipalName OPTIONAL, realm [9] Realm, -- Correct realm sname [10] PrincipalName, -- Correct name e-text [11] GeneralString OPTIONAL, e-data [12] OCTET STRING OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_ERROR. ctime This field is described above in section 5.4.1. cusec This field
Reference: 9. <institution> Interoperability requirements .......................................................................................................... 50 9.1. </institution> <note> Specification 1 .................................................................................................................................. 50 9.2. Recommended KDC values ........................................................................................................... 51 </note>
Reference-contexts: [1] Realm, sname [2] PrincipalName, enc-part [3] EncryptedData - -- Encrypted part of ticket EncTicketPart ::= [APPLICATION 3] SEQUENCE - flags [0] TicketFlags, key [1] EncryptionKey, crealm [2] Realm, cname [3] PrincipalName, transited [4] TransitedEncoding, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, caddr <ref> [9] </ref> HostAddresses OPTIONAL, authorization-data [10] AuthorizationData OPTIONAL - -- encoded Transited field TransitedEncoding ::= SEQUENCE - tr-type [0] INTEGER, -- must be a registered value contents [1] OCTET STRING - The encoding of EncTicketPart is encrypted in the key shared by Kerberos and the end server (the server's secret key). <p> It is interesting to note that if one specifies the authorization-data field of a proxy and leaves the host addresses blank, the resulting ticket and session key can be treated as a capability. See <ref> [9] </ref> for some suggested uses of this field. The authorization-data field is optional and does not have to be included in a ticket. 5.3.2. <p> -- Version 5 Revision 5 -- Used only in AS-REQ realm [2] Realm, -- Server's realm -- Also client's in AS-REQ sname [3] PrincipalName, from [4] KerberosTime OPTIONAL, till [5] KerberosTime, rtime [6] KerberosTime OPTIONAL, nonce [7] INTEGER, etype [8] SEQUENCE OF INTEGER, -- EncryptionType, -- in preference order addresses <ref> [9] </ref> HostAddresses OPTIONAL, enc-authorization-data [10] EncryptedData OPTIONAL, -- Encrypted AuthorizationData encoding additional-tickets [11] SEQUENCE OF Ticket OPTIONAL - The fields in this message are: pvno This field is included in each message, and specifies the protocol version number. <p> [6] EncryptedData - EncASRepPart ::= [APPLICATION 25 24 ] EncKDCRepPart EncTGSRepPart ::= [APPLICATION 26] EncKDCRepPart EncKDCRepPart ::= SEQUENCE - key [0] EncryptionKey, last-req [1] LastReq, nonce [2] INTEGER, key-expiration [3] KerberosTime OPTIONAL, flags [4] TicketFlags, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, srealm <ref> [9] </ref> Realm, sname [10] PrincipalName, caddr [11] HostAddresses OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is either KRB_AS_REP or KRB_TGS_REP. padata This field is described in detail above. <p> KRB_ERROR definition The KRB_ERROR message consists of the following fields: KRB-ERROR ::= [APPLICATION 30] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, ctime [2] KerberosTime OPTIONAL, cusec [3] INTEGER OPTIONAL, stime [4] KerberosTime, susec [5] INTEGER, error-code [6] INTEGER, crealm [7] Realm OPTIONAL, cname [8] PrincipalName OPTIONAL, realm <ref> [9] </ref> Realm, -- Correct realm sname [10] PrincipalName, -- Correct name e-text [11] GeneralString OPTIONAL, e-data [12] OCTET STRING OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_ERROR. ctime This field is described above in section 5.4.1. cusec This field is described above in
Reference: 10. <institution> Acknowledgments ............................................................................................................................ 51 </institution>
Reference-contexts: PrincipalName, enc-part [3] EncryptedData - -- Encrypted part of ticket EncTicketPart ::= [APPLICATION 3] SEQUENCE - flags [0] TicketFlags, key [1] EncryptionKey, crealm [2] Realm, cname [3] PrincipalName, transited [4] TransitedEncoding, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, caddr [9] HostAddresses OPTIONAL, authorization-data <ref> [10] </ref> AuthorizationData OPTIONAL - -- encoded Transited field TransitedEncoding ::= SEQUENCE - tr-type [0] INTEGER, -- must be a registered value contents [1] OCTET STRING - The encoding of EncTicketPart is encrypted in the key shared by Kerberos and the end server (the server's secret key). <p> 5 -- Used only in AS-REQ realm [2] Realm, -- Server's realm -- Also client's in AS-REQ sname [3] PrincipalName, from [4] KerberosTime OPTIONAL, till [5] KerberosTime, rtime [6] KerberosTime OPTIONAL, nonce [7] INTEGER, etype [8] SEQUENCE OF INTEGER, -- EncryptionType, -- in preference order addresses [9] HostAddresses OPTIONAL, enc-authorization-data <ref> [10] </ref> EncryptedData OPTIONAL, -- Encrypted AuthorizationData encoding additional-tickets [11] SEQUENCE OF Ticket OPTIONAL - The fields in this message are: pvno This field is included in each message, and specifies the protocol version number. <p> EncASRepPart ::= [APPLICATION 25 24 ] EncKDCRepPart EncTGSRepPart ::= [APPLICATION 26] EncKDCRepPart EncKDCRepPart ::= SEQUENCE - key [0] EncryptionKey, last-req [1] LastReq, nonce [2] INTEGER, key-expiration [3] KerberosTime OPTIONAL, flags [4] TicketFlags, authtime [5] KerberosTime, starttime [6] KerberosTime OPTIONAL, endtime [7] KerberosTime, renew-till [8] KerberosTime OPTIONAL, srealm [9] Realm, sname <ref> [10] </ref> PrincipalName, caddr [11] HostAddresses OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is either KRB_AS_REP or KRB_TGS_REP. padata This field is described in detail above. <p> message consists of the following fields: KRB-ERROR ::= [APPLICATION 30] SEQUENCE - pvno [0] INTEGER, msg-type [1] INTEGER, ctime [2] KerberosTime OPTIONAL, cusec [3] INTEGER OPTIONAL, stime [4] KerberosTime, susec [5] INTEGER, error-code [6] INTEGER, crealm [7] Realm OPTIONAL, cname [8] PrincipalName OPTIONAL, realm [9] Realm, -- Correct realm sname <ref> [10] </ref> PrincipalName, -- Correct name e-text [11] GeneralString OPTIONAL, e-data [12] OCTET STRING OPTIONAL - pvno and msg-type These fields are described above in section 5.4.1. msg-type is KRB_ERROR. ctime This field is described above in section 5.4.1. cusec This field is described above in section 5.5.2. hhhhhhhhhhhhhhhhhh 29 If supported <p> Encryption and Checksum Specifications The Kerberos protocols described in this document are designed to use stream encryption ciphers, which can be simulated using commonly available block encryption ciphers, such as the Data Encryption Standard, <ref> [10] </ref> in conjunction with block chaining and checksum methods [11]. Encryption is used to prove the identities of the network entities participating in message exchanges. The Key Distribution Center for each realm is trusted by all principals registered in that realm to store a secret key in confidence. <p> The ciphertext is simply the plain-text. The NULL Key is used by the null encryption system and is zero octets in length, with keytype zero (0). 6.3.2. DES in CBC mode with a CRC-32 checksum (des-cbc-crc) The des-cbc-crc encryption mode encrypts information under the Data Encryption Standard <ref> [10] </ref> using the cipher block chaining mode [11]. A CRC-32 checksum (described in ISO 3309 [13]) is applied to the confounder and message sequence (msg-seq) and placed in the cksum field. DES blocks are 8 bytes. <p> DES in CBC mode with an MD4 checksum (des-cbc-md4) The des-cbc-md4 encryption mode encrypts information under the Data Encryption Standard <ref> [10] </ref> using the cipher block chaining mode [11]. An MD4 checksum (described in [14]) is applied to the confounder and message sequence (msg-seq) and placed in the cksum field. DES blocks are 8 bytes. <p> The details of the encryption of this data are identical to those for the des-cbc-md5 encryption mode. 6.3.4. DES in CBC mode with an MD5 checksum (des-cbc-md5) The des-cbc-md5 encryption mode encrypts information under the Data Encryption Standard <ref> [10] </ref> using the cipher block chaining mode [11]. An MD5 checksum (described in [15].) is applied to the confounder and message sequence (msg-seq) and placed in the cksum field. DES blocks are 8 bytes.

References-found: 22

