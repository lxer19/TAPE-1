URL: ftp://ftp.win.tue.nl/pub/techreports/josb/choice.ps.Z
Refering-URL: http://www.win.tue.nl/cs/fm/misc/pubbaeten.html
Root-URL: http://www.win.tue.nl
Title: Delayed choice: an operator for joining Message Sequence Charts  
Author: J.C.M. Baeten and S. Mauw 
Address: P.O. Box 513, 5600 MB Eindhoven, The Netherlands.  
Affiliation: Dept. of Mathematics and Computing Science, Eindhoven University of Technology,  
Abstract: We study the extension of a simple process algebra with the delayed choice operator. It differs from the normal non-deterministic choice in that the moment of choice is delayed until all alternatives can be distinguished by their first action. An application is in joining Message Sequence Charts. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> L. Aceto, B. Bloom, and F.W. Vaandrager. </author> <title> Turning sos rules into equations. </title> <booktitle> In Proc. LICS92, </booktitle> <pages> pages 113-124. </pages> <address> Santa Cruz, </address> <publisher> IEEE Computer Society Press, </publisher> <year> 1992. </year>
Reference-contexts: Using a layering technique (see [7]) we can derive the so-called deduction graph. We started by formulating the axiomatic laws and afterwards came up with operational rules. This can also be done in reverse order: as <ref> [1] </ref> shows, there are heuristics on deriving a set of axiomatic laws on the basis of the operational rules. The auxiliary operators 1 and , needed for a finite axiomatization, arise by splitting up the operational rules into different cases. 3.3.
Reference: 2. <author> J.C.M. Baeten and J.A. Bergstra. </author> <title> Process algebra with partial choice. </title> <editor> In J. Parrow, editor, </editor> <booktitle> Proc. </booktitle> <address> CONCUR'94. Uppsala, </address> <publisher> LNCS, </publisher> <year> 1994. </year> <note> (to appear). </note>
Reference: 3. <author> J.C.M. Baeten, J.A. Bergstra, and J.W. Klop. </author> <title> Syntax and defining equations for an interrupt mechanism in process algebra. </title> <type> Fund. </type> <institution> Inf., IX(2):127-168, </institution> <year> 1986. </year>
Reference-contexts: DC15 x 1 (y + z) = x 1 y + x 1 z DC9 x (y + z) = (x y) z DC17 The unless operator that we have here has a filtering behavior very much like the unless operator used in the axiomatization of the priority operator in <ref> [3] </ref>; this is the reason we use the same name and notation.
Reference: 4. <author> J.C.M. Baeten and R.J. van Glabbeek. </author> <title> Merge and termination in process algebra. In 15 K.V. </title> <editor> Nori, editor, </editor> <booktitle> Proc. </booktitle> <volume> FST&TCS 7, </volume> <pages> pages 153-172. </pages> <address> Pune, </address> <publisher> Springer Verlag, </publisher> <year> 1987. </year> <note> LNCS 287. </note>
Reference-contexts: It is now easy to check that the conditions are met. 2 Thus we have that all operators are defined on G= $ - , the set of deduction graphs modulo $ - . Theorem 3.3.5 Soundness: G= $ - j= BPA " + DC. Proof By <ref> [4] </ref> we have G= $ - j= BPA " . For DC1, consider the relation that relates every closed term of the form x y to the term x 1 y + x y + y x (and vice versa) and moreover relates every term to itself. <p> Proof The operational conservativity follows since our operational rules are in panth format, and pure and well-founded (see [21]). Then we get equational conservativity since the axiomatization of BPA " is sound and complete (see <ref> [4] </ref>) and the axiomatization of DC is sound (Theorem 3.3.5). 2 Theorem 3.3.7 BPA " + DC is a complete axiomatization for G= $ - . Proof See [21]. In addition to the ingredients of the previous proof, all we need is the elimination theorem (Theorem 3.3.3). 2 3.4.
Reference: 5. <author> J.C.M. Baeten and W.P. Weijland. </author> <title> Process Algebra. </title> <booktitle> Cambridge Tracts in Theoretical Computer Science 18. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1990. </year>
Reference-contexts: We thank Michel Reniers for proof reading this document and Wim Hesselink for a conversation on angelic choice. 2. BASIC PROCESS ALGEBRA WITH THE EMPTY PROCESS The process algebra BPA " is an algebraic theory for the description of process behavior <ref> [5, 6] </ref>. This theory is parameterized by a set of unspecified constants A, which are called atomic actions. A process is built up from atomic actions, the special constants ffi and " and the operators and +. <p> Thus, on processes that contain only delayed choice, bisimulation semantics 14 and trace semantics coincide [11]. We leave the formalization of this statement as future work. The modular approach to process algebra in the style of <ref> [5, 6] </ref> makes it easy to extend the theory presented here with additional operators. Thus, it is straightforward to achieve extensions with parallel composition, synchronous communication, asynchronous communication, abstraction and other features.
Reference: 6. <author> J.A. Bergstra and J.W. Klop. </author> <title> Process algebra for synchronous communication. </title> <journal> I&C, </journal> 60(1/3):109-137, 1984. 
Reference-contexts: We thank Michel Reniers for proof reading this document and Wim Hesselink for a conversation on angelic choice. 2. BASIC PROCESS ALGEBRA WITH THE EMPTY PROCESS The process algebra BPA " is an algebraic theory for the description of process behavior <ref> [5, 6] </ref>. This theory is parameterized by a set of unspecified constants A, which are called atomic actions. A process is built up from atomic actions, the special constants ffi and " and the operators and +. <p> There is a complication with this, as in the reduction of , the operator 1 appears, and in the reduction of ax 1 ay, it is the other way around. The solution is to weigh these operators with the size of their arguments, as is done in <ref> [6] </ref>. <p> Thus, on processes that contain only delayed choice, bisimulation semantics 14 and trace semantics coincide [11]. We leave the formalization of this statement as future work. The modular approach to process algebra in the style of <ref> [5, 6] </ref> makes it easy to extend the theory presented here with additional operators. Thus, it is straightforward to achieve extensions with parallel composition, synchronous communication, asynchronous communication, abstraction and other features.
Reference: 7. <author> B. Bloom, S. Istrail, and A. R. Meyer. </author> <title> Bisimulation can't be traced: preliminary report. </title> <booktitle> In Proc. 15th ACM symposium on Principles of Programming Languages, </booktitle> <pages> pages 229-239. </pages> <address> San Diego, California, </address> <year> 1988. </year>
Reference-contexts: Expression y 6 a means that process y cannot execute action a. In Lemma 3.3.4 we prove correctness of this definition. The construction of the graph associated to a process is not as straightforward as in the case without negative premises. Using a layering technique (see <ref> [7] </ref>) we can derive the so-called deduction graph. We started by formulating the axiomatic laws and afterwards came up with operational rules. This can also be done in reverse order: as [1] shows, there are heuristics on deriving a set of axiomatic laws on the basis of the operational rules.
Reference: 8. <author> S.D. Brookes, C.A.R. Hoare, and W. Roscoe. </author> <title> A theory of communicating sequential processes. </title> <journal> Journal of the ACM, </journal> <volume> 31 </volume> <pages> 560-599, </pages> <year> 1984. </year>
Reference: 9. <author> P. D'Argenio. </author> <title> o -angelic choice for process algebra. </title> <type> Technical report, </type> <institution> LIFIA, Dpto. de Informatica, Fac. Cs. Exactas, UNLP, </institution> <year> 1994. </year>
Reference: 10. <author> J. de Man. </author> <title> Towards a formal semantics of Message Sequence Charts. </title> <editor> In O. Faergemand and A. Sarma, editors, </editor> <title> SDL'93 Using Objects, </title> <booktitle> Proceedings of the Sixth SDL Forum, </booktitle> <address> Darmstadt, 1993. </address> <publisher> Elsevier Science Publishers B.V. </publisher>
Reference: 11. <author> J. Engelfriet. </author> <title> Determinacy ! (observation equivalence = trace equivalence. </title> <journal> TCS, </journal> <volume> 36(1) </volume> <pages> 21-25, </pages> <year> 1985. </year>
Reference-contexts: We also proved some additional properties of this operator. If we replace in a process all choices by delayed choices we throw away all branching time information. Thus, on processes that contain only delayed choice, bisimulation semantics 14 and trace semantics coincide <ref> [11] </ref>. We leave the formalization of this statement as future work. The modular approach to process algebra in the style of [5, 6] makes it easy to extend the theory presented here with additional operators.
Reference: 12. <author> O. Haugen. </author> <title> MSC Structural concepts. </title> <booktitle> Experts Meeting SG10, </booktitle> <address> Turin, TD9006, ITU-TS, </address> <year> 1994. </year>
Reference: 13. <author> ITU-TS. </author> <title> ITU-TS Recommendation Z.120: Message Sequence Chart (MSC). </title> <address> ITU-TS, Geneva, </address> <year> 1994. </year>
Reference: 14. <author> S. Kamin and J.-J. Levy. </author> <title> Two generalizations of the recursive path ordering. </title> <type> Unpublished manuscript, </type> <year> 1980. </year>
Reference-contexts: a b = a ax 1 a = a (" + x) ax 1 b = ffi ax a = ffi ax b = ax 7 Lemma 3.3.1 The term rewrite system defined above is strongly normalizing Proof We do this by applying the method of the lexicographical path ordering <ref> [14, 15] </ref>. There is a complication with this, as in the reduction of , the operator 1 appears, and in the reduction of ax 1 ay, it is the other way around. The solution is to weigh these operators with the size of their arguments, as is done in [6].
Reference: 15. <author> J.W. Klop. </author> <title> Term rewriting systems. </title> <editor> In S. Abramsky, D. Gabbay, and T. Maibaum, editors, </editor> <booktitle> Handbook of Logic in Computer Science, </booktitle> <volume> volume II, </volume> <pages> pages 1-116. </pages> <publisher> Oxford University Press, </publisher> <year> 1992. </year>
Reference-contexts: a b = a ax 1 a = a (" + x) ax 1 b = ffi ax a = ffi ax b = ax 7 Lemma 3.3.1 The term rewrite system defined above is strongly normalizing Proof We do this by applying the method of the lexicographical path ordering <ref> [14, 15] </ref>. There is a complication with this, as in the reduction of , the operator 1 appears, and in the reduction of ax 1 ay, it is the other way around. The solution is to weigh these operators with the size of their arguments, as is done in [6]. <p> For more information on lexicographical path ordering, we refer to <ref> [15] </ref>. 2 Definition 3.3.2 Define the class B of basic terms over BPA " + DC as the smallest class satisfying 1. "; ffi 2 B, A ae B 3. s; t 2 B ) s + t 2 B Theorem 3.3.3 Let t be a closed BPA " + DC-term.
Reference: 16. <author> S. Mauw and M.A. Reniers. </author> <title> An algebraic semantics of Basic Message Sequence Charts. </title> <journal> The computer journal, </journal> <volume> 37(4), </volume> <year> 1994. </year> <note> (to appear). </note>
Reference-contexts: It describes the option that a, immediately after starting b, can cancel operation of b. It is clearly not the intention to have a non-deterministic choice between testing and cancellation. So these alternative scenarios are combined with the delayed choice operator. Using the techniques from <ref> [16] </ref> we calculate the semantics of these four Message Sequence Charts separately in a simplified notation.
Reference: 17. <author> S. Mauw and M.A. Reniers. </author> <title> An algebraic semantics of Message Sequence Charts. </title> <booktitle> Experts Meeting SG10, </booktitle> <address> Turin, TD9009, ITU-TS, </address> <year> 1994. </year> <type> Report CSN94/23, </type> <institution> Eindhoven University of Technology, </institution> <year> 1994. </year>
Reference: 18. <author> M.W. Mislove and F.J. Oles. </author> <title> A simple language supporting angelic nondetermin-ism and parallel composition. </title> <editor> In S. Brookes, M. Main, A. Melton, M. Mislove, and D. Schmidt, editors, </editor> <booktitle> Mathematical Foundations of Programming Semantics, 7th international conference, </booktitle> <pages> pages 77-101. </pages> <publisher> Springer Verlag, </publisher> <year> 1991. </year>
Reference: 19. <author> G.D. Plotkin. </author> <title> An operational semantics for CSP. </title> <booktitle> In Proceedings of the Conference on the Formal Description of Programming Concepts, </booktitle> <volume> volume 2, Garmisch, </volume> <year> 1983. </year>
Reference-contexts: The other operators have the same binding power. Brackets are associated to the left. We sometimes use xy to denote x y. Table 2 defines a structured operational semantics (S.O.S.) in the style of <ref> [19] </ref>. Predicate # expresses that a process has an option to terminate.
Reference: 20. <author> C. Verhoef. </author> <title> A congruence theorem for structured operational semantics with predicates and negative premises. </title> <editor> In J. Parrow, editor, </editor> <booktitle> Proc. </booktitle> <address> CONCUR'94. Uppsala, </address> <publisher> LNCS, </publisher> <year> 1994. </year> <note> (to appear). </note>
Reference-contexts: Structured Operational Semantics The rules in Table 4 define an operational semantics for the delayed choice operator. In the definition of the a ! predicate, we make use of so-called negative premises (see <ref> [20] </ref>). This means that a negation occurs in the condition of an S.O.S. rule. Expression y 6 a means that process y cannot execute action a. In Lemma 3.3.4 we prove correctness of this definition. <p> Proof The S.O.S. rules for BPA " and delayed choice satisfy the panth format of <ref> [20] </ref>. Thus, all we need to do is to provide a stratification for this term deduction system. This is easy: the rank of a step t a ! t 0 or a termination option t # is the number of symbols plus the number of symbols in t.
Reference: 21. <author> C. Verhoef. </author> <title> A general conservative extension theorem in process algebra. </title> <booktitle> In Proc. PROCOMET'94, IFIP 2 Working Conference. </booktitle> <address> San Miniato, </address> <publisher> North-Holland, </publisher> <year> 1994. </year> <note> (to appear), report CSN 93/38, </note> <institution> Eindhoven University of Technology 1993. </institution>
Reference-contexts: All other axioms are equally simple. 2 Theorem 3.3.6 BPA " + DC is a conservative extension of BPA " . Proof The operational conservativity follows since our operational rules are in panth format, and pure and well-founded (see <ref> [21] </ref>). Then we get equational conservativity since the axiomatization of BPA " is sound and complete (see [4]) and the axiomatization of DC is sound (Theorem 3.3.5). 2 Theorem 3.3.7 BPA " + DC is a complete axiomatization for G= $ - . Proof See [21]. <p> and pure and well-founded (see <ref> [21] </ref>). Then we get equational conservativity since the axiomatization of BPA " is sound and complete (see [4]) and the axiomatization of DC is sound (Theorem 3.3.5). 2 Theorem 3.3.7 BPA " + DC is a complete axiomatization for G= $ - . Proof See [21]. In addition to the ingredients of the previous proof, all we need is the elimination theorem (Theorem 3.3.3). 2 3.4. Properties The main property proven in this section is the commutativity and associativity of . This is not derivable from the axioms, but it holds for all closed terms.
References-found: 21

