URL: http://medusa.logistik.uni-bremen.de/Papers/fsp.ps
Refering-URL: http://www.ing.unlp.edu.ar/cetad/mos/memetic_home.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: The Application of a Parallel Genetic Algorithm to the n=m=P=C max Flowshop Problem  
Author: S. Stoppler and C. Bierwirth 
Affiliation: University of Bremen  
Abstract: Hard combinatorial problems in sequencing and scheduling led recently into further research of genetic algorithms. Canonical coding of the symmetric TSP can be modified into a coding of the n-job m-machine flowshop problem, which configurates the solution space in a different way. We show that well known genetic operators act intelligently on this coding scheme. They implecitely prefer a subset of solutions which contain the probably best solutions with respect to an objective. We conjecture that every new problem needs a determination of this necessary condition for a genetic algorithm to work, i. e. a proof by experiment. We implemented an asynchronous parallel genetic algorithm on a UNIX-based computer network. Computational results of the new heuristic are discussed. 
Abstract-found: 1
Intro-found: 1
Reference: [ABZ88] <author> J. Adams, E. Balas, D. Zawack, </author> <title> The Shifting Bottleneck Procedure for Job Shop Scheduling, </title> <booktitle> Management Science Vol. </booktitle> <volume> 34 No. </volume> <month> 3 </month> <year> (1988) </year> <month> 391-401 </month>
Reference-contexts: Altough its formulation seems similar to the general flowshop, the last defined graph does not represent all its constraints. The higher complexity-level results from different technological restrictions for the jobs. A graph definition, representing the general jobshop, can be found in <ref> [ABZ88] </ref>. It uses disjunctive links between operations on the same machine, to take respect to the constraints. Up to now we were not able to formulate syntactical rules for the graph, which make the canonical coding of the jobshop complete.
Reference: [BMS90] <author> C. Bierwirth, D. C. Mattfeld, S. Stoppler, </author> <title> Pseudo-Parallelity and Distributed Programming under UNIX System V , in: </title> <editor> M. Grauer, D. B. Pressmar (eds), </editor> <booktitle> Proceedings of Parallel and Distributed Optimization, </booktitle> <publisher> Springer Verlag, </publisher> <address> Heidelberg 1991 </address>
Reference-contexts: The computations were done in a relatively small network of four 386-er PC's (without mathematical coprocessor) under UNIX System V and TCP/IP. Therefore each machine handles 4 individual pseudo-parallel processes, while in the net four subpopulations run asynchronous parallel. For a technical description in detail see <ref> [BMS90] </ref>. The four PGA columns show the makespan of the "best of 20" solution, the average makespan, the mean deviation and the relative error of the average makespan measured from the theoretical lower bound LB.
Reference: [CleSm89] <author> G. A. Cleveland, S. F. </author> <title> Smith Using Genetic Algorithms to Schedule Flow Sop Releases Proc. </title> <booktitle> 3rd conference on Genetic Algorithms, </booktitle> <editor> D. Schaffer (ed.), </editor> <publisher> Morgan Kaufmann Publ., </publisher> <address> San Mateo (1989) 160-169 </address>
Reference-contexts: The effect of using heuristic-based operators for optimization of flowshop problems has been investigated by Cleveland and Smith, fl FB Wirtschaftswissenschaften, Postfach 330440, D-2800 Bremen 33, Earn:&lt;c13f@dhbrrz41.bitnet&gt; 1 see <ref> [CleSm89] </ref>. In opposing their approach we used some well known blind operators for reproduction. Heuristically based search is introduced afterwards by using an edge interchange mechanism which is similar to Lin's 2-opt algorithm.
Reference: [Dan77] <author> D. G. Dannenbring, </author> <title> An Evaluation of Flowshop Sequencing Heuristics, </title> <booktitle> Management Science Vol. </booktitle> <volume> 23 No. </volume> <month> 11 </month> <year> (1977) </year> <month> 1174-1182 </month>
Reference-contexts: Several heuristic methods, specially designed for this problem, are kwown from literature: Palmer (1965), Campbell, Dudek & Smith (1970) and Dannenbring (1977). A general survey and comparison of these methods can be found there <ref> [Dan77] </ref>. Since more general approaches to optimization, known by the keyword problem solving from nature, were developed in the 80's, a lot of work in their application to combinatorial problems has been done. The problem treated predominantely in literature is the famous travelling salesman problem (TSP). <p> But it is easily seen that the genetic algorithm approach can be transferred to other regular objective measures only by little modifications. To simplify our formulation of the problem we will make three assumptions, which are in common with other flowshop heuristics, see <ref> [Dan77] </ref>. Given the operation times t ij for j = 1; : : : n jobs on i = 1; : : : m machines, we assume 1. the ready times of all jobs to be 0.
Reference: [Dav85] <author> L. Davis, </author> <title> Job Shop Scheduling with Genetic Algorithms, </title> <booktitle> Proc. of an international conference on Genetic Algorithms and their Applications, </booktitle> <editor> J. J. Grefenstette (ed.), </editor> <publisher> Lawrence Erlbaum Associates (1985) </publisher>
Reference-contexts: The use of a genetic algorithm (GA) and the method of simulated annealing (SA) followed a breakthrough in tackling instances with up to 500 cities, see [MGK88] and [RTL86]. This progress led to an optimistic attitude towards more complex sequencing problems like the general jobshop, see <ref> [Dav85] </ref> and [Whit89]. But the known complex structure of its constraints (we are even unable to schedule optimally ten jobs on ten machines) still blurs the ideal access to the new heuristics. <p> It uses disjunctive links between operations on the same machine, to take respect to the constraints. Up to now we were not able to formulate syntactical rules for the graph, which make the canonical coding of the jobshop complete. Davis <ref> [Dav85] </ref> and other authors therefore used a decoder (as a repair function metioned above), that changes infeasible schedules into feasible ones. One problem of this method is to show, that the decoder is fair .
Reference: [Fre82] <author> S. </author> <title> French, Sequencing and Scheduling An Introduction to the Mathematics of the Job-Shop, </title> <publisher> Ellis Horwood Series, John Wiley & Sons, </publisher> <month> West-Sussex </month> <year> (1982) </year>
Reference-contexts: Although it is known, that in a more general flowshop for m &gt; 3 the best sequence is not necessarily the optimal solution, the restriction does not produce appreciably worse solutions, see <ref> [Fre82] </ref>. But it is much easier implemented for practical purpose. Indeed, in this formulation of our flowshop, labeled as n=m=P=C max with P for the permutation flowshop, becomes equivalent to an asymmetric TSP of size n + 1.
Reference: [Gold89] <author> D. E. Goldberg, </author> <title> Genetic Algorithms in Search, Optimization and Machine Learning, </title> <publisher> Ad-dison Wesley (1989) </publisher>
Reference-contexts: MPX works similar to OX, but uses an inversion in the receivers code, which is a change of direction for a subsequence of nodes. A detailed desription of PMX and OX can be found in <ref> [Gold89] </ref>, MPX was introduced in [Gor89]. On the left hand side a small table shows the number of implicit mutations, that each crossing-over produces in the example.
Reference: [Gor89] <author> M. Gorges-Schleuter, </author> <title> ASPARAGOS an Asynchronous Parallel Genetic Optimization Strategy, </title> <booktitle> Proc. 3rd conference on Genetic Algorithms, </booktitle> <editor> D. Schaffer (ed.), </editor> <publisher> Morgan Kauf-mann Publ., </publisher> <address> San Mateo (1989) 422-427 </address>
Reference-contexts: QUICK PAIRWISE EXCHANGE works like its brother but without checkout. It therefore gives much weaker solutions but is more adapted to the genetic optimization process. For a comparison with 2-OPT versus 2-QUICK see <ref> [Gor89] </ref>. 3 3 Genetic Representation of Scheduling Problems The first step to apply a GA to a special problem is to find a syntactically unique coding in such way, that every semantically valid numerical representation of the problem cannot leave this scheme. <p> We choose a ranking selection in our experiments, which assigns all solutions of a neighborhood a probability to be selected, according to the ranking of their fitness. It is easy to implement and at least as good, as an adaptive strategy, see <ref> [Gor89] </ref>. Notice, that the selection step of individuals depends on the population-structure only and does not need any problem specific data. Reproduction: During the phase of reproduction a new solution is obtained from the actual encoded hereditary characteristics of two parent solutions. <p> MPX works similar to OX, but uses an inversion in the receivers code, which is a change of direction for a subsequence of nodes. A detailed desription of PMX and OX can be found in [Gold89], MPX was introduced in <ref> [Gor89] </ref>. On the left hand side a small table shows the number of implicit mutations, that each crossing-over produces in the example. The TSP column counts the number of new undirected links in the offspring string only, whereas the FSP column counts all directed new links.
Reference: [Holl75] <author> J. H. Holland, </author> <booktitle> Adaption in Natural and Artificial Systems, </booktitle> <publisher> University of Michigan Press, </publisher> <address> Ann Arbor (1975) </address>
Reference-contexts: Various techniques for euclidean TSP's, like PMX, OX or MPX are known from literature and will be discussed in section 5. The crossing-over operator is the backbone of each GA, because it ultimately explains why it works at all. The theoretical foundation of genetic algorithms was proposed by Holland <ref> [Holl75] </ref> in his fundamental theorem. He showed that during a GA's runtime the instantiations on all positions of the coding scheme stabilizes within the population members. This is called the block-building feature.
Reference: [MGK88] <author> H. Muhlenbein, M.Gorges-Schleuter, O. Kramer, </author> <title> Evolution Algorithms in Combinatorical Optimization, </title> <note> Parallel Computing 7 (1988) 65-85 </note>
Reference-contexts: The problem treated predominantely in literature is the famous travelling salesman problem (TSP). The use of a genetic algorithm (GA) and the method of simulated annealing (SA) followed a breakthrough in tackling instances with up to 500 cities, see <ref> [MGK88] </ref> and [RTL86]. This progress led to an optimistic attitude towards more complex sequencing problems like the general jobshop, see [Dav85] and [Whit89].
Reference: [Mue89] <author> H. Muhlenbein, </author> <title> Parallel Genetic Algorithms, Population Genetics and Combinatorical Optimization, </title> <booktitle> Proc. 3rd conference on Genetic Algorithms, </booktitle> <editor> D. Schaffer (ed.), </editor> <publisher> Morgan Kauf-mann Publ., </publisher> <address> San Mateo (1989) 416-422 </address>
Reference-contexts: The resulting solution-space increases in cardinality by a factor two, flowshop problems are asymmetric TSP's. A general description of a PGA is given in section 4. Two important modifications compared to a GA, explored by Muhlenbein et al. see <ref> [Mue89] </ref> will be emphasized: The distributed selection, which has a major influence to the parallel perfomance, and the employment of a local-optimization method, which introduces heuristic-improvement into the reproduction.
Reference: [Mue90] <author> H. Muhlenbein, </author> <title> Parallel genetic algorithms and combinatorial optimization, </title> <institution> internal paper of Dept. of Electrical and Computer Engineering, Carnegie-Mellon University, </institution> <address> Pittsburgh (1990) </address>
Reference-contexts: A similiar analysis to ours has been done by Kirkpatrick for the non-geometric but symmetric TSP (randomly generated symmetric distance matrix) and Muhlenbein for the euclidean TSP, see <ref> [Mue90] </ref>, from where we took the TSP data in the tables 2 and 3. We report about this as well to demonstrate the higher complexity in the application of asymmetric TSP's to GA's.
Reference: [OgSm90] <author> F. A. Ogbu, D. K. Smith, </author> <title> The Application of the Simulated Annealing Algorithm to the Solution of the n=m=C max Flowshop Problem, </title> <journal> Computers Opns. Res. </journal> <volume> Vol. 17, No. </volume> <month> 3 </month> <year> (1990) </year> <month> 243-253 </month>
Reference-contexts: Heuristically based search is introduced afterwards by using an edge interchange mechanism which is similar to Lin's 2-opt algorithm. This method was also used by Ogbu and Smith for the application of the SA algorithm to the problem, see <ref> [OgSm90] </ref>. For larger sizes of n and m they achieved appreciable better solutions, than the standard heuristics mentioned above produce. We did not yet compare the PGA heuristic performance in flowshop optimization with others, we just intend to evaluate its behaviour under aspects coming from the problem itsself.
Reference: [Rech73] <author> I. Rechenberg, </author> <title> Evolutionsstrategie - Optimierung technischer Systeme nach Prinzipien der biologischen Information, </title> <publisher> Frommann Verlag, </publisher> <address> Stuttgart (1973) </address>
Reference-contexts: Our common understanding of evolution in natural systems is based on the assumption, that the space, inducted by the genetic codification of living beings, is configurated in a way, that the overlying fitness function is smooth, see <ref> [Rech73] </ref>. This postulate cannot be demonstrated exactly, we therefore call it the contiguous-hypothesis: Small modifications in the genetic code of living beings causes only small changes in their properties That is why evolution works slowly and cannot be effectively observed within generations of humans.
Reference: [RTL86] <author> Y. Rossier, M. Troyan, T. M. Liebling, </author> <title> Probabilistic Exchange Algorithms and Euclidean Traveling Salesman Problems, </title> <address> OR Spectrum 8 (1986) 151-164 </address>
Reference-contexts: The problem treated predominantely in literature is the famous travelling salesman problem (TSP). The use of a genetic algorithm (GA) and the method of simulated annealing (SA) followed a breakthrough in tackling instances with up to 500 cities, see [MGK88] and <ref> [RTL86] </ref>. This progress led to an optimistic attitude towards more complex sequencing problems like the general jobshop, see [Dav85] and [Whit89]. But the known complex structure of its constraints (we are even unable to schedule optimally ten jobs on ten machines) still blurs the ideal access to the new heuristics.
Reference: [Whit89] <author> D. Whitley, T. Starkweather, A. Fuquay, </author> <title> Scheduling Problems and Traveling Salesman: The Genetic Edge Recombination Operator Proc. </title> <booktitle> 3rd conference on Genetic Algorithms, </booktitle> <editor> D. Schaffer (ed.), </editor> <publisher> Morgan Kaufmann Publ., </publisher> <address> San Mateo (1989) 133-140 15 </address>
Reference-contexts: The use of a genetic algorithm (GA) and the method of simulated annealing (SA) followed a breakthrough in tackling instances with up to 500 cities, see [MGK88] and [RTL86]. This progress led to an optimistic attitude towards more complex sequencing problems like the general jobshop, see [Dav85] and <ref> [Whit89] </ref>. But the known complex structure of its constraints (we are even unable to schedule optimally ten jobs on ten machines) still blurs the ideal access to the new heuristics. <p> An aim of its design should be strictly oriented towards preventing a maximum of the directed edges of an asynchronous TSP solution. A promising approach to this subject lies in the principle of Whitley's Genetic-Edge-Recombination operator, see <ref> [Whit89] </ref>. 6 Computational Results In all our computations we used the same parameter setting for the PGA, given by: populationsize N = 16 individuals ordered in a ring neighborhoodsize overlapping 2 left + 2 right + global best crossing-over OX, crossover-stringlength between n 3 and n mutationrate no extra mutations selection
References-found: 16

