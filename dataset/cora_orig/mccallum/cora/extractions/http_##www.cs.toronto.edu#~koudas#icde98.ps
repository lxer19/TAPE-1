URL: http://www.cs.toronto.edu/~koudas/icde98.ps
Refering-URL: http://www.cs.toronto.edu/~koudas/publications.htm
Root-URL: http://www.cs.toronto.edu
Title: High Dimensional Similarity Joins: Algorithms and Performance Evaluation  
Author: Nick Koudas K. C. Sevcik 
Address: Toronto, Ontario, CANADA Toronto, Ontario, CANADA  
Affiliation: Department of Computer Science Department of Computer Science University of Toronto University of Toronto  
Abstract: In this paper, we study algorithms for finding relationships among points in multidimensional feature spaces, specifically algorithms for multidimensional joins. Like joins of conventional relations, correlations between multidimensional feature spaces can offer valuable information about the data sets involved. We present several algorithmic paradigms for solving the multidimensional join problem, and we discuss their features and limitations. We propose a generalization of the Size Separation Spatial Join algorithm, named Multidimensional Spatial Join (MSJ), to solve the multidimensional join problem. We evaluate MSJ along with several other specific algorithms, comparing their performance for various dimensionalities on both real and synthetic multidimensional data sets. Our experimental results indicate that MSJ, which is based on space filling curves, consistently yields good performance across a wide range of dimensionalities. 
Abstract-found: 1
Intro-found: 1
Reference: [Ben80] <author> Jon Louis Bentley. </author> <title> Multidimensional Divide-and-Conquer. </title> <journal> CACM, </journal> <volume> Vol. 23, No. 4, </volume> <pages> pages 214-229, </pages> <month> April </month> <year> 1980. </year>
Reference-contexts: The first one is an application of divide and conquer in multiple dimensions, and the second is a recently proposed indexing structure for the multidimensional join problem. Multidimensional Divide and Conquer Approach (MDC): Multidimensional Divide and Conquer (MDC) is an algorithmic paradigm introduced by Bentley <ref> [Ben80] </ref>, that can be directly applied to the problem at hand. To solve a problem in a multidimensional space, the underlying idea behind the MDC paradigm is to recursively divide the space a dimension at a time, and solve the problem in each resulting subspace. <p> Corresponding ranges in both files can be processed via the plane sweep algorithm. Figure 2b illustrates the two dimensional version of the algorithm. Generalizing this approach to d-dimensional spaces for data sets involving O (n) multidimensional points will give an O (n log d n) <ref> [Ben80] </ref> algorithm. Although it is conceptually appealing, the application of multidimensional divide and conquer to solve the multidimensional join problem leads to several problems when it is applied in practice. In the general case, the statistical characteristics of the two multidimensional data sets will be different.
Reference: [BKK96] <author> Stefan Berchtold, Daniel A. Keim, and Hans-Peter Kriegel. </author> <title> The X-tree: An Index Structure for High Dimensional Data. </title> <booktitle> Proceedings of VLDB, </booktitle> <pages> pages 28-30, </pages> <month> September </month> <year> 1996. </year>
Reference-contexts: A recent experimental study by Berch-told et al. <ref> [BKK96] </ref> showed that using the X-tree, a multidimensional indexing structure based on R-trees [Gut84], several multidimensional queries degenerate to linear search as dimensionality increases. An algorithm was proposed by Brinkhoff et al. [BKS93] for the two dimensional spatial join problem using R fl -trees [BKSS90].
Reference: [BKS93] <author> Thomas Brinkhoff, Hans-Peter Kriegel, and Bernhard Seeger. </author> <title> Efficient Processing of Spatial Joins using R-trees. </title> <booktitle> Proceedings of ACM SIGMOD, </booktitle> <pages> pages 237-246, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: A recent experimental study by Berch-told et al. [BKK96] showed that using the X-tree, a multidimensional indexing structure based on R-trees [Gut84], several multidimensional queries degenerate to linear search as dimensionality increases. An algorithm was proposed by Brinkhoff et al. <ref> [BKS93] </ref> for the two dimensional spatial join problem using R fl -trees [BKSS90]. Since the R-tree family is a popular family of indexing structures, we extended the algorithm of Brinkhoff et al. to multiple dimensions, and we report on its performance in subsequent sections. <p> A detailed description of Orenstein's algorithm is available elsewhere [KS97a]. 3.2 Algorithms That Use Preconstructed Indices The best known spatial join algorithm for R-trees is the one proposed by Brinkhoff et al. <ref> [BKS93] </ref>. We have extended it to apply to multidimensional point sets indexed with R fl -trees [BKSS90]. The R fl -tree join algorithm is based on an index sweeping process. When the indices have the same height, the algorithm proceeds top-down sweeping index blocks at the same level.
Reference: [BKSS90] <author> N. Beckmann, Hans-Peter Kriegel, Ralf Schnei-der, and Bernhard Seeger. </author> <title> The R* tree: An Efficient and Robust Access Method for Points and Rectangles. </title> <booktitle> Proceedings of ACM SIGMOD, </booktitle> <pages> pages 220-231, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: An algorithm was proposed by Brinkhoff et al. [BKS93] for the two dimensional spatial join problem using R fl -trees <ref> [BKSS90] </ref>. Since the R-tree family is a popular family of indexing structures, we extended the algorithm of Brinkhoff et al. to multiple dimensions, and we report on its performance in subsequent sections. <p> A detailed description of Orenstein's algorithm is available elsewhere [KS97a]. 3.2 Algorithms That Use Preconstructed Indices The best known spatial join algorithm for R-trees is the one proposed by Brinkhoff et al. [BKS93]. We have extended it to apply to multidimensional point sets indexed with R fl -trees <ref> [BKSS90] </ref>. The R fl -tree join algorithm is based on an index sweeping process. When the indices have the same height, the algorithm proceeds top-down sweeping index blocks at the same level.
Reference: [FRM94] <author> Christos Faloutsos, M. Ranganathan, and I. Manolopoulos. </author> <title> Fast Subsequence Matching in Time Series Databases. </title> <booktitle> Proceedings of ACM SIGMOD, </booktitle> <pages> pages 419-429, </pages> <month> May </month> <year> 1994. </year>
Reference: [Gut84] <author> A. Guttman. </author> <title> R-trees : A Dynamic Index Structure for Spatial Searching. </title> <booktitle> Proceedings of ACM SIGMOD, </booktitle> <pages> pages 47-57, </pages> <month> June </month> <year> 1984. </year>
Reference-contexts: A recent experimental study by Berch-told et al. [BKK96] showed that using the X-tree, a multidimensional indexing structure based on R-trees <ref> [Gut84] </ref>, several multidimensional queries degenerate to linear search as dimensionality increases. An algorithm was proposed by Brinkhoff et al. [BKS93] for the two dimensional spatial join problem using R fl -trees [BKSS90].
Reference: [KS97a] <author> Nick Koudas and K. C. Sevcik. </author> <title> High Dimensional Similarity Joins: Algorithms and Performance Evaluation. </title> <type> Technical Report TR-369, </type> <institution> University of Toronto, </institution> <month> December </month> <year> 1997. </year>
Reference-contexts: We form a d dimensional hypercube of side * around each point in both multidimensional spaces and proceed in the same way. An analysis of the replication induced by REPL as dimensionality increases is available elsewhere <ref> [KS97a] </ref>. There are two major drawbacks to approaches that introduce replication. The appropriate degree of partitioning of the data space is very difficult to choose unless precise statistical knowledge of the multidimensional data sets is available. <p> Then the algorithm proceeds to merge the two data sets using a stack per data set. At each step, the smaller ZV is selected and processed by comparing it to the ZV at the top of the stack. A detailed description of Orenstein's algorithm is available elsewhere <ref> [KS97a] </ref>. 3.2 Algorithms That Use Preconstructed Indices The best known spatial join algorithm for R-trees is the one proposed by Brinkhoff et al. [BKS93]. We have extended it to apply to multidimensional point sets indexed with R fl -trees [BKSS90]. <p> We keep the buffer pool size constant (2MB) for all experiments. We perform two series of experiments involving synthetic and real data sets. Additional experimental results are given elsewhere <ref> [KS97a] </ref>. For each series of Dimension D1:50,000 D2:84,640 3/4 1.6 MB 3.24 MB 12 5 MB 8.48 MB Table 1: Characteristics of Data Sets and Sizes as Dimensionality Increases experiments, we report two sets of results. In one, we keep * constant and increase the dimensionality of the data set.
Reference: [KS97b] <author> Nick Koudas and K. C. Sevcik. </author> <title> Size Separation Spatial Join. </title> <booktitle> Proceedings of ACM SIGMOD, </booktitle> <pages> pages 324-335, </pages> <month> May </month> <year> 1997. </year>
Reference-contexts: MSJ can use any number of dimensions to decompose the space without affecting its IO cost. 4 Multidimensional Spatial Join (MSJ) To perform the join of two multidimensional data sets, A and B, we may also use a generalization of the Size Separation Spatial Join algorithm (S 3 J) <ref> [KS97b] </ref>. The S 3 J algorithm makes use of space filling curves to order the points in a multidimensional space. <p> This transformation can be achieved by setting to one the (Ll)d least significant bits of H. Each level file is then sorted into non-decreasing order of Hilbert values. The decomposition of the multidimensional space achieved this way provides a flexible way to perform the multidimensional join <ref> [KS97b] </ref>. Each subpartition of a level file has to be matched against the corresponding subpartitions at the same level and each higher level file of the other data set.
Reference: [LR96] <author> Ming-Ling Lo and Chinya V. Ravishankar. </author> <title> Spatial hash-joins. </title> <booktitle> Proceedings of ACM SIGMOD, </booktitle> <pages> pages 247-258, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: Algorithms based on the replication approach for the two dimensional problem have been proposed by Patel and DeWitt [PD96] and Lo and Ravishankar <ref> [LR96] </ref>. Here, we explore possible generalizations of these algorithms to higher dimensions. The underlying idea for these algorithms is to divide the two dimensional space into a number of partitions and then proceed to join corresponding partition pairs.
Reference: [Mel91] <author> K. Melhorn. </author> <title> Data Structures and Algorithms: III, Multidimensional Searching and Computational Geometry. </title> <address> Sprieger-Verlag, New York-Heidelberg-Berlin, </address> <month> June </month> <year> 1991. </year>
Reference-contexts: The complexity of a d dimensional sweep involving O (n) points, to report k pairs of overlapping objects is O (n logn d1 + k) <ref> [Mel91] </ref>. Note that if two hypercubes of side 2ffi = * overlap, the points at their centers are not necessarily within distance * of each other.
Reference: [Ore89] <author> J. Orenstein. </author> <title> Redundancy in Spatial Database. </title> <booktitle> Proceedings of ACM SIGMOD, </booktitle> <pages> pages 294-305, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: The algorithm imposes a recursive binary splitting of the space up to a specific granularity. Each approximated entity is placed in a space division that fully encloses it. Orenstein <ref> [Ore89] </ref> presents an analysis of the implication of this decomposition scheme on range query performance, and, in subsequent work [Ore91], presents the performance of the multidimensional join algorithm. This algorithm can be applied to the multidimensional join problem that we address in this paper.
Reference: [Ore91] <author> Jack Orenstein. </author> <title> An algorithm for computing the overlay of k-dimensional spaces. </title> <booktitle> Symposium on Large Spatial Databases, </booktitle> <pages> pages 381-400, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: Orenstein's Algorithm (ZC): Orenstein proposed an algorithm, that we call ZC, to perform joins of multidimensional objects <ref> [Ore91] </ref>. Starting with multidimensional objects that are approximated by their minimum bounding hypercubes, the hypercubes are tested for intersections. For each pair of intersecting hypercubes, an object intersection test is performed. The algorithm is based on z-curves and their properties. <p> The algorithm imposes a recursive binary splitting of the space up to a specific granularity. Each approximated entity is placed in a space division that fully encloses it. Orenstein [Ore89] presents an analysis of the implication of this decomposition scheme on range query performance, and, in subsequent work <ref> [Ore91] </ref>, presents the performance of the multidimensional join algorithm. This algorithm can be applied to the multidimensional join problem that we address in this paper. In our context, each multidimensional point is approximated with a d dimensional hypercube of side *.
Reference: [PD96] <author> Jignesh M. Patel and David J. DeWitt. </author> <title> Partition Based Spatial-Merge Join. </title> <booktitle> Proceedings of ACM SIGMOD, </booktitle> <pages> pages 259-270, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: Algorithms based on the replication approach for the two dimensional problem have been proposed by Patel and DeWitt <ref> [PD96] </ref> and Lo and Ravishankar [LR96]. Here, we explore possible generalizations of these algorithms to higher dimensions. The underlying idea for these algorithms is to divide the two dimensional space into a number of partitions and then proceed to join corresponding partition pairs.
Reference: [PS85] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry. </title> <publisher> Springer-Verlag, </publisher> <address> New York-Heidelberg-Berlin, </address> <month> October </month> <year> 1985. </year>
Reference-contexts: The cost of each predicate evaluation increases linearly with the dimensionality of the data points. A faster algorithm for the predicate evaluation step is to use a generalization of the Plane Sweep technique in multiple dimensions <ref> [PS85] </ref>. This makes it possible to reduce the number of distance computations by evaluating the predicate only between pairs of multidimensional points for which the corresponding hypercubes intersect.
Reference: [Rob81] <author> J.T. Robinson. </author> <title> The K-D-B-Tree: A Search Structure for Large Multidimensional Dynamic Indexes. </title> <booktitle> Proceedings ACM SIGMOD, </booktitle> <pages> pages 10-18, </pages> <year> 1981. </year>
Reference-contexts: Then the algorithm proceeds to read the partitions corresponding to intervals of size 2* in dimension of sorted order of both files into main memory and building the *-KDB structure on them. The structure is a variant of KDB trees <ref> [Rob81] </ref>. It offers a space decomposition scheme that facilitates tree matching since the boundaries of space partitions are canonical.
Reference: [Sam90] <author> Hanan Samet. </author> <title> The Design and Analysis of Spatial Data Structures. </title> <publisher> Addison Wesley, </publisher> <month> June </month> <year> 1990. </year>
Reference-contexts: Although the problem of searching and indexing in more than one dimension has been studied extensively, no indexing structure is known that retains its indexing efficiency as dimensionality increases. A wide range of indexing structures have been proposed for the two dimensional indexing problem <ref> [Sam90] </ref>. Although conceptually most of these structures gen 200 600 1000 1400 2 4 6 8 10 12 14 16 18 20 R* tree Construction time (sec) Dimension "ConstructionCost" increases eralize to multiple dimensions, in practice their indexing efficiency degenerates rapidly as dimensionality increases.
Reference: [SSA97] <author> K. Shim, R. Srikant, and R. Agrawal. </author> <title> High-dimensional Similarity Joins. </title> <booktitle> Proc. of the International Conference on Data Engineering., </booktitle> <pages> pages 301-311, </pages> <month> April </month> <year> 1997. </year>
Reference-contexts: The *-KDB tree: A new indexing structure for the multidimensional join problem was proposed recently by Shim et al. <ref> [SSA97] </ref>. The *-KDB tree is intended to speed up the computation of hypercube intersections in main memory. Given two multidimensional data sets and a distance *, the algorithm proceeds by choosing a dimension and sorting the data sets on this dimension.
References-found: 17

