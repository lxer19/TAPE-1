URL: http://www.cs.man.ac.uk/~tessaris/DL/docs/TechRep/DFKI/RR-93-48.ps.Z
Refering-URL: http://www.cs.man.ac.uk/~tessaris/DL/papers.html
Root-URL: http://www.cs.man.ac.uk
Phone: Tel.: 49 (631) 205-3211 Stuhlsatzenhausweg 3  Tel.: 49 (681) 302-5252  
Title: Cardinality Restrictions on Concepts  
Author: f ur K unstliche Franz Baader Martin Buchheit Bernhard Hollunder f ur K unstliche Intelligenz 
Address: Postfach 20 80 67608 Kaiserslautern, FRG  66123 Saarbrucken, FRG  
Note: Deutsches Forschungszentrum  
Date: December 1993  
Affiliation: Deutsches Forschungszentrum  Intelligenz GmbH Research  GmbH  
Pubnum: Report RR-93-48  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> F. Baader. </author> <title> Augmenting concept languages by transitive closure of roles: An alternative to terminological cycles. </title> <booktitle> In Proceedings of the 12th International Joint Conference on Artificial Intelligence, </booktitle> <address> Sydney, Australia, </address> <year> 1991. </year>
Reference-contexts: On the other hand, a too severely restricted formalism may turn out to be too weak for certain applications. For this reason, several extensions of "core" concept languages have been investigated in the literature (see, e.g., <ref> [3, 9, 1] </ref>). In the present paper, we shall consider an extension that is motivated by the use of terminological systems for solving configuration tasks, which is an application domain that is currently gaining more and more importance (see, e.g., [11, 5, 10, 13, 8]).
Reference: [2] <editor> F. Baader, H.-J. Burckert, B. Hollunder, W. Nutt, and J. H. Siekmann. </editor> <title> Concept logics. </title> <booktitle> In Proceedings of the Symposium on Computational Logics, Brussel, </booktitle> <address> Belgium, </address> <year> 1990. </year>
Reference-contexts: Then we shall develop an algorithm that tests a knowledge base for consistency. This is sufficient since all the other interesting inference services can easily be reduced to this task [4]. The consistency algorithm combines the ideas developed in <ref> [2, 7] </ref> for handling inclusion axioms (in a language with number restrictions), and in [9] for handling qualifying number restrictions. 2 The terminological formalism The expressive power of a terminological system is determined by the constructs available for building concept descriptions, and by the way these descriptions can be used in <p> The effect of these restrictions is that terminological axioms are just macro definitions (introducing names for large descriptions), which can simply be expanded before starting the reasoning process. Unrestricted terminological axioms are a lot harder to handle algorithmically <ref> [12, 2, 7] </ref>, but they are very useful in expressing important constraints on admissible configurations (see Section 3 below).
Reference: [3] <author> F. Baader and P. Hanschke. </author> <title> A scheme for integrating concrete domains into concept languages. </title> <booktitle> In Proceedings of the 12th International Joint Conference on Artificial Intelligence, </booktitle> <address> Sydney, Australia, </address> <year> 1991. </year>
Reference-contexts: On the other hand, a too severely restricted formalism may turn out to be too weak for certain applications. For this reason, several extensions of "core" concept languages have been investigated in the literature (see, e.g., <ref> [3, 9, 1] </ref>). In the present paper, we shall consider an extension that is motivated by the use of terminological systems for solving configuration tasks, which is an application domain that is currently gaining more and more importance (see, e.g., [11, 5, 10, 13, 8]).
Reference: [4] <author> F. Baader and B. </author> <title> Hollunder. A terminological knowledge representation system with complete inference algorithms. </title> <editor> In M. Richter and H. Boley, editors, </editor> <booktitle> International Workshop on Processing Declarative Knowledge, </booktitle> <volume> volume 567. </volume> <publisher> Springer, </publisher> <year> 1991. </year>
Reference-contexts: In Section 3 we shortly sketch how these services can be utilized in a configuration application. Then we shall develop an algorithm that tests a knowledge base for consistency. This is sufficient since all the other interesting inference services can easily be reduced to this task <ref> [4] </ref>. <p> a KB, an individual a and a concept C, is a I 2 C I for all models I of the KB? Since the instance problem (and all the other inference problems such as sub-sumption and concept satisfiability) can be reduced to KB-consistency or inconsistency in linear time (see, e.g., <ref> [4] </ref>), it is sufficient to devise an algorithm for this problem. <p> This generalized KB is called consistent iff there is some i, 1 i l, such that hA i ; T i is consistent. Treatment of cardinality restrictions So far, all that has been said also applies to rule-based consistency algorithms for less expressive languages (see, e.g., <ref> [4] </ref>). Now we shall point out two new problems that are due to the presence of cardinality restrictions. <p> Negation normal forms can be computed in linear time by pushing negation signs into the descriptions (see, e.g., <ref> [4] </ref>). The expression C will denote the negation normal form of the concept :C. In addition, we assume that the TBox contains only restrictions of the form ( n C).
Reference: [5] <author> C. Bagnasco, P. Petrin, and L. Spampinato. </author> <title> Taxonomic reasoning in configuration tasks. </title> <type> Technical Report QR-91-1, </type> <institution> Quinary SpA, </institution> <year> 1991. </year>
Reference-contexts: In the present paper, we shall consider an extension that is motivated by the use of terminological systems for solving configuration tasks, which is an application domain that is currently gaining more and more importance (see, e.g., <ref> [11, 5, 10, 13, 8] </ref>). Technical domains such as configuration seem to be well suited for terminological systems since they usually rely on a large number of terminological conventions, which are in most cases precisely defined.
Reference: [6] <author> R. J. Brachman, R. J. Bobrow, P. R. Cohen, J. W. Klovstad, B. L. Webber, and W. A. Woods. </author> <title> Research in natural language understanding, </title> <type> annual report. Technical Report No. 4274. </type> <institution> Bolt, Beranek and Newman, </institution> <address> Cambridge, Mass., </address> <year> 1979. </year>
Reference-contexts: Technical domains such as configuration seem to be well suited for terminological systems since they usually rely on a large number of terminological conventions, which are in most cases precisely defined. In contrast, more traditional AI applications of terminological systems, such as natural language processing <ref> [6] </ref>, often rely on vague notions and incomplete knowledge, which require the representation of beliefs, as well as probabilistic and default information.
Reference: [7] <author> M. Buchheit, F. M. Donini, and A. Schaerf. </author> <title> Decidable reasoning in terminological knowledge representation systems. </title> <journal> Journal of Artificial Intelligence Research, </journal> <volume> 1 </volume> <pages> 109-138, </pages> <year> 1993. </year> <month> 19 </month>
Reference-contexts: Then we shall develop an algorithm that tests a knowledge base for consistency. This is sufficient since all the other interesting inference services can easily be reduced to this task [4]. The consistency algorithm combines the ideas developed in <ref> [2, 7] </ref> for handling inclusion axioms (in a language with number restrictions), and in [9] for handling qualifying number restrictions. 2 The terminological formalism The expressive power of a terminological system is determined by the constructs available for building concept descriptions, and by the way these descriptions can be used in <p> The effect of these restrictions is that terminological axioms are just macro definitions (introducing names for large descriptions), which can simply be expanded before starting the reasoning process. Unrestricted terminological axioms are a lot harder to handle algorithmically <ref> [12, 2, 7] </ref>, but they are very useful in expressing important constraints on admissible configurations (see Section 3 below). <p> Note that only new individuals can be blocked. Similar termination problems are already caused by terminological axioms of the form C : = D. For this reason, the idea of blocking is already present in <ref> [7] </ref>. The main difference between the two notions of blocking is that in [7] equality of sets is required whereas we are satisfied with set inclusion. It turns out that our notion of blocking facilitates the termination proof. In addition, termination can be shown for arbitrary sequences of rule applications. <p> Note that only new individuals can be blocked. Similar termination problems are already caused by terminological axioms of the form C : = D. For this reason, the idea of blocking is already present in <ref> [7] </ref>. The main difference between the two notions of blocking is that in [7] equality of sets is required whereas we are satisfied with set inclusion. It turns out that our notion of blocking facilitates the termination proof. In addition, termination can be shown for arbitrary sequences of rule applications. <p> It turns out that our notion of blocking facilitates the termination proof. In addition, termination can be shown for arbitrary sequences of rule applications. It no longer depends on the use of a specific strategy (as required in <ref> [7] </ref>).
Reference: [8] <author> M. Buchheit, R. Klein, and W. Nutt. </author> <title> Configuration as model construction: The constructive problem solving approach. </title> <booktitle> In Proceedings of the Third International Conference on Artificial Intelligence in Design, </booktitle> <address> AID'94, Lausanne, Switzerland, </address> <year> 1994. </year> <note> To appear. </note>
Reference-contexts: In the present paper, we shall consider an extension that is motivated by the use of terminological systems for solving configuration tasks, which is an application domain that is currently gaining more and more importance (see, e.g., <ref> [11, 5, 10, 13, 8] </ref>). Technical domains such as configuration seem to be well suited for terminological systems since they usually rely on a large number of terminological conventions, which are in most cases precisely defined. <p> It also makes sure that the integrity constraints expressed by the inclusion axioms and the cardinality restriction are satisfied (more information on this idea of configuration by model generation can be found in <ref> [8] </ref>). 8 4 The consistency algorithm The method for deciding consistency of a KB presented below is rule-based in the sense that it starts with the original KB (consisting of an ABox A 0 and a TBox T 0 ), and applies certain consistency preserving transformation rules to the ABox until
Reference: [9] <editor> B. Hollunder and F. Baader. </editor> <title> Qualifying number restrictions in concept languages. </title> <booktitle> In Proceedings of the 2nd International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <address> Cambridge, Mass., </address> <year> 1991. </year>
Reference-contexts: On the other hand, a too severely restricted formalism may turn out to be too weak for certain applications. For this reason, several extensions of "core" concept languages have been investigated in the literature (see, e.g., <ref> [3, 9, 1] </ref>). In the present paper, we shall consider an extension that is motivated by the use of terminological systems for solving configuration tasks, which is an application domain that is currently gaining more and more importance (see, e.g., [11, 5, 10, 13, 8]). <p> Such a restriction can, for example, express that an admissible PC may have at most 17 parts, by restricting the number of role-fillers of the has-part role to less or equal 17. If one allows for qualifying number restrictions <ref> [9] </ref> (which are not available in most systems), one can also express that the PC must have exactly one CPU and at most four 1MB memory chips, where CPU and 1MB-memory-chip may be complex concepts. But these cardinality restrictions are still localized to the fillers of one particular role. <p> This is sufficient since all the other interesting inference services can easily be reduced to this task [4]. The consistency algorithm combines the ideas developed in [2, 7] for handling inclusion axioms (in a language with number restrictions), and in <ref> [9] </ref> for handling qualifying number restrictions. 2 The terminological formalism The expressive power of a terminological system is determined by the constructs available for building concept descriptions, and by the way these descriptions can be used in the terminological (TBox) and the assertional (ABox) component of the system. <p> The description language ALCQ defined below coincides with the one introduced in <ref> [9] </ref>. The new expressivity lies in the TBox, where the usual terminological axioms are replaced by cardinality restrictions on concepts. <p> sure that at some stage of the transformation process each individual will either be asserted to be in C or its complement. (The choice is "don't know" nondeterministic, i.e., both cases have to be considered.) In a slightly modified way the idea of such a choose-rule was already presented in <ref> [9] </ref> since qualifying number-restriction of the form ( n R C) cause a similar problem. The second problem is that, due to the choose-rule, the transformation process need no longer terminate, unless one takes specific precautions to detect cyclic computations. <p> This is a contradiction, since 1 We assume that the negation sign does not contribute to the size of a concept term. Thus D has the same size as D (cf. <ref> [9] </ref>). 17 now either the ! -rule must be applicable, or A must contain a clash. (6.2) Now, assume that s is blocked in A. Let s 0 be the least (with respect to the ordering &lt;) individual name in I that blocks s.
Reference: [10] <author> R. Klein. </author> <title> Model representation and taxonomic reasoning in configuration problem solving. </title> <booktitle> In Proceedings of the German Workshop on Artificial Intelligence, </booktitle> <address> GWAI-91, </address> <year> 1991. </year>
Reference-contexts: In the present paper, we shall consider an extension that is motivated by the use of terminological systems for solving configuration tasks, which is an application domain that is currently gaining more and more importance (see, e.g., <ref> [11, 5, 10, 13, 8] </ref>). Technical domains such as configuration seem to be well suited for terminological systems since they usually rely on a large number of terminological conventions, which are in most cases precisely defined.
Reference: [11] <author> B. Owsnicki-Klewe. </author> <title> Configuration as a consistency maintenance task. </title> <booktitle> In Proceedings of the German Workshop on Artificial Intelligence, </booktitle> <address> GWAI-88, </address> <year> 1988. </year>
Reference-contexts: In the present paper, we shall consider an extension that is motivated by the use of terminological systems for solving configuration tasks, which is an application domain that is currently gaining more and more importance (see, e.g., <ref> [11, 5, 10, 13, 8] </ref>). Technical domains such as configuration seem to be well suited for terminological systems since they usually rely on a large number of terminological conventions, which are in most cases precisely defined.
Reference: [12] <author> K. Schild. </author> <title> Terminological cycles and the propositional -calculus. </title> <booktitle> In Proceedings of the 4th International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <address> Bonn, Germany, </address> <year> 1994. </year> <note> To appear. </note>
Reference-contexts: Such axioms are known to be algorithmically hard to handle <ref> [12] </ref>. In the following, we shall first formally introduce the terminological formalism considered in this paper, which contains both cardinality restrictions on concepts and qualifying number restrictions. Section 2 also defines the relevant reasoning services for terminological knowledge bases consisting of a terminological and an assertional component. <p> The effect of these restrictions is that terminological axioms are just macro definitions (introducing names for large descriptions), which can simply be expanded before starting the reasoning process. Unrestricted terminological axioms are a lot harder to handle algorithmically <ref> [12, 2, 7] </ref>, but they are very useful in expressing important constraints on admissible configurations (see Section 3 below).
Reference: [13] <author> J. R. Wright, E. S. Weixelbaum, K. Brown, G. T. Vesonder, S. R. Palmer, J. I. Berman, and H. H. Moore. </author> <title> A knowledge-based configurator that supports sales, </title> <journal> engineering, and manufacturing at AT&T network systems. AI Magazine, </journal> <volume> 14(3) </volume> <pages> 69-80, </pages> <year> 1993. </year>
Reference-contexts: In the present paper, we shall consider an extension that is motivated by the use of terminological systems for solving configuration tasks, which is an application domain that is currently gaining more and more importance (see, e.g., <ref> [11, 5, 10, 13, 8] </ref>). Technical domains such as configuration seem to be well suited for terminological systems since they usually rely on a large number of terminological conventions, which are in most cases precisely defined. <p> Configuration checking The instance test of a terminological system can be employed to check whether a computer configuration is admissible (this idea has, e.g., been used in an application of the classic system <ref> [13] </ref>). In the TBox, one defines a concept that describes admissible computer systems, and in the ABox one describes the actual configuration of a computer system.
References-found: 13

