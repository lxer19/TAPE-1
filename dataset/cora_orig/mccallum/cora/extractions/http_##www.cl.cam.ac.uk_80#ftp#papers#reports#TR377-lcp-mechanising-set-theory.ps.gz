URL: http://www.cl.cam.ac.uk:80/ftp/papers/reports/TR377-lcp-mechanising-set-theory.ps.gz
Refering-URL: http://www.cl.cam.ac.uk:80/ftp/papers/reports/
Root-URL: 
Email: email: lcp@cl.cam.ac.uk  email: kgrabcze@mat.uni.torun.pl  
Title: Mechanizing Set Theory Cardinal Arithmetic and the Axiom of Choice  
Author: Lawrence C. Paulson Krzysztof Grabczewski Nicholas Copernicus 
Keyword: Key words: Isabelle, cardinal arithmetic, Axiom of Choice, set theory, QED project  
Note: (Received Accepted in final form  
Address: Cambridge  Torun, Poland  
Affiliation: Computer Laboratory, University of  University,  
Abstract: Fairly deep results of Zermelo-Fraenkel (ZF) set theory have been mechanized using the proof assistant Isabelle. The results concern cardinal arithmetic and the Axiom of Choice (AC). A key result about cardinal multiplication is = , where is any infinite cardinal. Proving this result required developing theories of orders, order-isomorphisms, order types, ordinal arithmetic, cardinals, etc.; this covers most of Kunen, Set Theory, Chapter I. Furthermore, we have proved the equivalence of 7 formulations of the Well-ordering Theorem and 20 formulations of AC; this covers the first two chapters of Rubin and Rubin, Equivalents of the Axiom of Choice, and involves highly technical material. The definitions used in the proofs are largely faithful in style to the original mathematics. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> J. R. Abrial and G. Laffitte. </author> <title> Towards the mechanization of the proofs of some classical theorems of set theory. </title> <type> preprint, </type> <month> February </month> <year> 1993. </year>
Reference-contexts: We describe below machine proofs concerning cardinal arithmetic and the Axiom of Choice (AC). Paulson has mechanized most of the first chapter of Kunen [12] and a paper by Abrial and Laffitte <ref> [1] </ref>. Grabczewski has mechanized the first two chapters of Rubin and Rubin's famous monograph [24], proving equivalent eight forms of the Well-ordering Theorem and twenty forms of AC. We have conducted these proofs using an implementation of Zermelo-Frnkel (ZF) set theory in Isabelle. <p> The details are messy. Kunen assumes AC in the form of the Well-Ordering Theorem, perhaps to avoid those messy details, but Isabelle/ZF tackles this proof. Fortunately, Abrial and Laffitte describe the proof with the aim of mechanization <ref> [1] </ref>. Starting from AC they prove Hausdorff's Maximal Principle, Zorn's Lemma and the Well-Ordering Theorem. Paulson mechanized their proofs easily. There are under 180 tactic commands, which take about 140 seconds to execute. Abrial and Laffitte describe their research as a study about proofs.
Reference: 2. <author> Grzegorz Bancerek. </author> <title> Countable sets and Hessenberg's theorem. </title> <journal> Formalized Mathematics, </journal> <volume> 2 </volume> <pages> 499-503, </pages> <year> 1990. </year> <title> On the World Wide Web at http://math.uw.bialystok.pl/Form.Math/Vol2/dvi/card_4.dvi. </title>
Reference-contexts: Researchers have constructed computer proofs of results in logic [26], number theory [25], group theory [28], -calculus [10], etc. An especially wide variety of results have been mechanized using the Mizar Proof Checker, including the theorem = discussed below <ref> [2] </ref>. However, the problem of mechanizing mathematics is far from solved. The Boyer/Moore Theorem Prover [3, 4] has yielded the most impressive results [25, 26]. It has been successful because of its exceptionally strong support for recursive definitions and inductive reasoning.
Reference: 3. <author> Robert S. Boyer and J Strother Moore. </author> <title> A Computational Logic. </title> <publisher> Academic Press, </publisher> <year> 1979. </year>
Reference-contexts: An especially wide variety of results have been mechanized using the Mizar Proof Checker, including the theorem = discussed below [2]. However, the problem of mechanizing mathematics is far from solved. The Boyer/Moore Theorem Prover <ref> [3, 4] </ref> has yielded the most impressive results [25, 26]. It has been successful because of its exceptionally strong support for recursive definitions and inductive reasoning. But its lack of quantifiers forces mathematical statements to undergo serious contortions when they are formalized. <p> It employs user-supplied rules, typically about logical con nectives or set operators, to break down assertions. The simplifier employs user-supplied conditional equalities to rewrite a subgoal. It can make use of contextual information and handles commutative operators using a simple method borrowed from Boyer and Moore <ref> [3, page 104] </ref>. We have found these tools indispensable. But there is much room for improvement; mechanizing a page of text can take a week or more. We discuss some reasons for this below. A lengthier introduction to Isabelle and Isabelle/ZF appears elsewhere [18].
Reference: 4. <author> Robert S. Boyer and J Strother Moore. </author> <title> A Computational Logic Handbook. </title> <publisher> Academic Press, </publisher> <year> 1988. </year>
Reference-contexts: An especially wide variety of results have been mechanized using the Mizar Proof Checker, including the theorem = discussed below [2]. However, the problem of mechanizing mathematics is far from solved. The Boyer/Moore Theorem Prover <ref> [3, 4] </ref> has yielded the most impressive results [25, 26]. It has been successful because of its exceptionally strong support for recursive definitions and inductive reasoning. But its lack of quantifiers forces mathematical statements to undergo serious contortions when they are formalized.
Reference: 5. <author> Gilles Dowek et al. </author> <title> The Coq proof assistant user's guide. </title> <type> Technical Report 154, </type> <institution> INRIA-Rocquencourt, </institution> <year> 1993. </year> <note> Version 5.8. </note>
Reference-contexts: Most automated reasoning systems are first-order at best, while mathematics makes heavy use of higher-order notations. We have conducted our work in Isabelle [20], which provides for higher-order syntax. Other recent systems that have been used for mechanizing mathematics include IMPS [6], HOL [8] and Coq <ref> [5] </ref>. We describe below machine proofs concerning cardinal arithmetic and the Axiom of Choice (AC). Paulson has mechanized most of the first chapter of Kunen [12] and a paper by Abrial and Laffitte [1].
Reference: 6. <author> William M. Farmer, Joshua D. Guttman, and F. Javier Thayer. IMPS: </author> <title> An interactive mathematical proof system. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 11(2) </volume> <pages> 213-248, </pages> <year> 1993. </year>
Reference-contexts: Most automated reasoning systems are first-order at best, while mathematics makes heavy use of higher-order notations. We have conducted our work in Isabelle [20], which provides for higher-order syntax. Other recent systems that have been used for mechanizing mathematics include IMPS <ref> [6] </ref>, HOL [8] and Coq [5]. We describe below machine proofs concerning cardinal arithmetic and the Axiom of Choice (AC). Paulson has mechanized most of the first chapter of Kunen [12] and a paper by Abrial and Laffitte [1]. <p> When AC is finally invoked, the rule of existential elimination discharges this assumption. Their formal language resembles higher-order logic. Their paper is thus relevant to many proof assistants, such as HOL [8], IMPS <ref> [6] </ref> and Isabelle/HOL [20]. We have used it to define Isabelle/ZF's library of the main forms of AC. But this hardly exhausts the subject. Rather, it is merely the introduction to our next case study. 7. <p> There are obvious inclusions among these types: infinite cardinals are cardinals are ordinals, and all objects are sets. Isabelle's type system is of no help here. Other provers, such as IMPS <ref> [6] </ref> with its subtypes, might handle this aspect better. The proof of WO 6 =) WO 1 revealed another limitation of Isabelle: its inability to allow definitions and proofs to occur within the context of a lengthy inductive argument.
Reference: 7. <author> Martin Gardner. </author> <title> The Unexpected Hanging and Other Mathematical Diversions. </title> <publisher> University of Chicago Press, </publisher> <year> 1991. </year>
Reference-contexts: Gardner <ref> [7] </ref> describes a number of similar puzzles. Mechanizing the reverse induction mentioned above, and the construction from x of some y such that x [ (y fi y) y, is routine. All the difficulties lie in proving the claim (2). The two cases are complicated.
Reference: 8. <author> M. J. C. Gordon and T. F. Melham. </author> <title> Introduction to HOL: A Theorem Proving Environment for Higher Order Logic. </title> <publisher> Cambridge University Press, </publisher> <year> 1993. </year>
Reference-contexts: Most automated reasoning systems are first-order at best, while mathematics makes heavy use of higher-order notations. We have conducted our work in Isabelle [20], which provides for higher-order syntax. Other recent systems that have been used for mechanizing mathematics include IMPS [6], HOL <ref> [8] </ref> and Coq [5]. We describe below machine proofs concerning cardinal arithmetic and the Axiom of Choice (AC). Paulson has mechanized most of the first chapter of Kunen [12] and a paper by Abrial and Laffitte [1]. <p> When AC is finally invoked, the rule of existential elimination discharges this assumption. Their formal language resembles higher-order logic. Their paper is thus relevant to many proof assistants, such as HOL <ref> [8] </ref>, IMPS [6] and Isabelle/HOL [20]. We have used it to define Isabelle/ZF's library of the main forms of AC. But this hardly exhausts the subject. Rather, it is merely the introduction to our next case study. 7.
Reference: 9. <author> Paul R. Halmos. </author> <title> Naive Set Theory. </title> <publisher> Van Nostrand, </publisher> <year> 1960. </year>
Reference-contexts: Elementary texts <ref> [9, 27] </ref> never get far enough, while advanced texts such as Kunen [12] race through it. But Kunen's rapid treatment is nonetheless clear, and mentions all the essential elements. <p> AC.tex; 2/10/1996; 14:56; no v.; p.4 Mechanizing Set Theory 5 We could prove AfiA A, for all infinite sets A, by appealing to AC in the form of Zorn's Lemma; see Halmos <ref> [9, pages 97-8] </ref>. Then = would follow immediately. But we need to prove = without AC in order to use it in later proofs about equivalences of AC. In fact, the law A fi A A is known to be equivalent to the Axiom of Choice. <p> OVERVIEW OF KUNEN, CHAPTER I Kunen's first chapter is entitled, Foundations of Set Theory. Kunen remarks on page 1 that the chapter is merely a review for a reader who has already studied basic set theory. This explains why the chapter is so succinct, as compared say with Halmos <ref> [9] </ref>. The first four sections are largely expository. Section 5 introduces a few axioms while x6 describes the operations of Cartesian product, relations, functions, domain and range. Already, x6 goes beyond the large Isabelle/ZF theory described in earlier papers [18, 21]. <p> Expressing the set C in different forms, such as P (A) f0g or fB (x) j x 2 Ag, yields various equivalent assertions of AC. Isabelle/ZF follows Hal-mos <ref> [9] </ref> in expressing AC as the product of a family of non-empty sets is non-empty. It derives many equivalent formulations of AC. All this is done in a separate Isabelle theory of AC, which can be imported when necessary; most of Isabelle/ZF is developed without AC. <p> From (1) we can prove jIj I V [A] + This result allows V [A] + to serve as the bounding set for a least fixedpoint definition [19]. 2 Kunen gives straightforward inductive proofs of these first two properties. But Halmos <ref> [9, page 72] </ref> gives an argument that proves both with a single induction. 3 Lemma 10.10 says that multiplication of finite cardinals agrees with integer multiplication. 4 All Isabelle timings are on a Sun SPARCstation ELC. 5 The statement of Global Choice can be obtained by Skolemizing the trivial theorem 8c:c
Reference: 10. <author> Gerard Huet. </author> <title> Residual theory in -calculus: A formal development. </title> <journal> Journal of Functional Programming, </journal> <volume> 4(3) </volume> <pages> 371-394, </pages> <year> 1994. </year>
Reference-contexts: 1. Introduction A growing corpus of mathematics has been checked by machine. Researchers have constructed computer proofs of results in logic [26], number theory [25], group theory [28], -calculus <ref> [10] </ref>, etc. An especially wide variety of results have been mechanized using the Mizar Proof Checker, including the theorem = discussed below [2]. However, the problem of mechanizing mathematics is far from solved. The Boyer/Moore Theorem Prover [3, 4] has yielded the most impressive results [25, 26].
Reference: 11. <editor> L.S. van Benthem Jutting. </editor> <title> Checking Landau's Grundlagen in the AUTOMATH System. </title> <type> PhD thesis, </type> <institution> Eindhoven University of Technology, </institution> <year> 1977. </year> <note> AC.tex; 2/10/1996; 14:56; no v.; p.32 33 </note>
Reference-contexts: We have been careful to note passages that seem unusually hard to mechanize, and discuss some of them below. In conducting these proofs, particularly from Rubin and Rubin, we have tried to follow the footsteps of Jutting <ref> [11] </ref>. During the 1970s, Jutting mechanized a mathematics textbook using the AUTOMATH system [14]. He paid close attention to the text which described the construction of the real and complex numbers starting from the Peano axioms and listed any deviations from it. <p> No details are inessential in formal proof, and we can forsee that incompatible definitions will become a serious problem as larger and larger bodies of mathematics are formalized. Comparing the sizes of the formal and informal texts, Jutting <ref> [11, page 46] </ref> found that the ratio was constant. This may hold on average for a large piece of text, such as a chapter, but it does not hold on a line by line basis. Sometimes the text makes an intuitive observation that requires a huge effort to formalize.
Reference: 12. <author> Kenneth Kunen. </author> <title> Set Theory: An Introduction to Independence Proofs. </title> <publisher> North-Holland, </publisher> <year> 1980. </year>
Reference-contexts: Other recent systems that have been used for mechanizing mathematics include IMPS [6], HOL [8] and Coq [5]. We describe below machine proofs concerning cardinal arithmetic and the Axiom of Choice (AC). Paulson has mechanized most of the first chapter of Kunen <ref> [12] </ref> and a paper by Abrial and Laffitte [1]. Grabczewski has mechanized the first two chapters of Rubin and Rubin's famous monograph [24], proving equivalent eight forms of the Well-ordering Theorem and twenty forms of AC. <p> Elementary texts [9, 27] never get far enough, while advanced texts such as Kunen <ref> [12] </ref> race through it. But Kunen's rapid treatment is nonetheless clear, and mentions all the essential elements. <p> Elementary texts [9, 27] never get far enough, while advanced texts such as Kunen [12] race through it. But Kunen's rapid treatment is nonetheless clear, and mentions all the essential elements. The desired result (1) follows fairly easily from Kunen's Lemma 10.21 <ref> [12, page 30] </ref>: 8 ff&lt; jX ff j S This, in turn, relies on the Axiom of Choice and its consequence the Well ordering Theorem, which are discussed at length below. <p> A class relation is a binary predicate and has the Isabelle type i ) (i ) o). A class function is traditionally represented by its graph, a single-valued class predicate <ref> [12, page 25] </ref>; it is more easily formalized in Isabelle as a meta-level function, an object of type i ) i. See Paulson [18, x6] for an example involving the Replacement Axiom. <p> ORDER TYPES The ordinals may be viewed as representatives of the well-ordered sets. Every ordinal is well-ordered by the membership relation 2. What is more important, every well-ordered set is isomorphic to a unique ordinal, called its order type and written type (A; &lt;). Kunen <ref> [12, page 17] </ref> proves this by a direct construction. But to mechanize the result in Isabelle/ZF, it is easier to use well-founded recursion [21, x3.4]. <p> We also need the identity Ord (a) ==&gt; (UN b&lt;a++a. C (b)) = (UN b&lt;a. C (b) Un C (a++b)) These definitions of ordinal sum and product are traditional (see also Kunen <ref> [12, page 20] </ref>), but deriving the required properties from them proved to be extremely laborious. Recursive definitions [27, page 201] would have been much more direct. 8.2.2. New Notation To express the definitions conveniently required adding a let-construct to Isa-belle/ZF. <p> The main file containing the proof of WO 6 =) WO 1 holds over 130 tactic commands; it executes in about three minutes. 9. Conclusions We have mechanized parts of two advanced textbooks: most of Chapter I of Kunen <ref> [12] </ref> and the first two chapters of Rubin and Rubin [24]. Some of this material is fairly recent; the Rubins cite papers from the 1960s. In doing our proofs, we noted a number of difficulties.
Reference: 13. <author> Dale Miller. </author> <title> Unification under a mixed prefix. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 14(4) </volume> <pages> 321-358, </pages> <year> 1992. </year>
Reference-contexts: This is a standard example showing that Skolemization can be unsound in higher-order logic <ref> [13] </ref>. 6 Such figures can be regarded only as a rough guide. Many of the theorems properly belong in the main libraries. Small changes to searching commands can have a drastic effect on the run time.
Reference: 14. <editor> R. P. Nederpelt, J. H. Geuvers, and R. C. de Vrijer, editors. </editor> <booktitle> Selected Papers on Automath. </booktitle> <publisher> North-Holland, </publisher> <year> 1994. </year>
Reference-contexts: In conducting these proofs, particularly from Rubin and Rubin, we have tried to follow the footsteps of Jutting [11]. During the 1970s, Jutting mechanized a mathematics textbook using the AUTOMATH system <ref> [14] </ref>. He paid close attention to the text which described the construction of the real and complex numbers starting from the Peano axioms and listed any deviations from it. Compared with Jutting, we have worked in a more abstract field, and with source material containing larger gaps.
Reference: 15. <author> Philippe Noel. </author> <title> Experimenting with Isabelle in ZF set theory. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 10(1) </volume> <pages> 15-58, </pages> <year> 1993. </year>
Reference-contexts: Grabczewski has mechanized the first two chapters of Rubin and Rubin's famous monograph [24], proving equivalent eight forms of the Well-ordering Theorem and twenty forms of AC. We have conducted these proofs using an implementation of Zermelo-Frnkel (ZF) set theory in Isabelle. Compared with other Isabelle/ZF proofs <ref> [15, 18, 21] </ref> and other automated set theory proofs [23], these are deep, abstract and highly technical results. We have tried to reproduce the mathematics faithfully. This does not mean slavishly adhering to every detail of the text, but attempting to preserve its spirit. <p> It supports proofs in higher-order logic, various modal logics, linear logic, etc. Our work is based upon Isabelle's implementation of Zermelo-Frnkel (ZF) set theory, itself based upon an implementation of first-order logic. Isabelle/ZF arose from early work by Paulson [17] and No el <ref> [15] </ref>; it is described in detail elsewhere [18, 21]. There are two key ideas behind Isabelle: Expressions are typed -terms. Thus the syntax is higher-order, giving a uniform treatment of quantifiers, descriptions and other binding opera tors. In Isabelle/ZF, all sets have the same type.
Reference: 16. <author> Lawrence C. Paulson. </author> <title> Constructing recursion operators in intuitionistic type theory. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 2 </volume> <pages> 325-355, </pages> <year> 1986. </year>
Reference-contexts: If f is bijective then obviously f is an isomor-phism between the orders hA; &lt; A i and hB; &lt; B i; it follows that their order types are equal. Sum, product and inverse image are useful building blocks for well-orderings; this follows Paulson's earlier work <ref> [16] </ref> within Constructive Type Theory. 4.4. CARDINAL NUMBERS Kunen's x10. The Isabelle theory file extends some Isabelle theories (Order-Type and others) with constants, which stand for operators or predicates.
Reference: 17. <author> Lawrence C. Paulson. </author> <title> Isabelle: The next 700 theorem provers. </title> <editor> In P. Odifreddi, editor, </editor> <booktitle> Logic and Computer Science, </booktitle> <pages> pages 361-386. </pages> <publisher> Academic Press, </publisher> <year> 1990. </year>
Reference-contexts: It supports proofs in higher-order logic, various modal logics, linear logic, etc. Our work is based upon Isabelle's implementation of Zermelo-Frnkel (ZF) set theory, itself based upon an implementation of first-order logic. Isabelle/ZF arose from early work by Paulson <ref> [17] </ref> and No el [15]; it is described in detail elsewhere [18, 21]. There are two key ideas behind Isabelle: Expressions are typed -terms. Thus the syntax is higher-order, giving a uniform treatment of quantifiers, descriptions and other binding opera tors. In Isabelle/ZF, all sets have the same type.
Reference: 18. <author> Lawrence C. Paulson. </author> <title> Set theory for verification: I. From foundations to functions. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 11(3) </volume> <pages> 353-389, </pages> <year> 1993. </year>
Reference-contexts: Grabczewski has mechanized the first two chapters of Rubin and Rubin's famous monograph [24], proving equivalent eight forms of the Well-ordering Theorem and twenty forms of AC. We have conducted these proofs using an implementation of Zermelo-Frnkel (ZF) set theory in Isabelle. Compared with other Isabelle/ZF proofs <ref> [15, 18, 21] </ref> and other automated set theory proofs [23], these are deep, abstract and highly technical results. We have tried to reproduce the mathematics faithfully. This does not mean slavishly adhering to every detail of the text, but attempting to preserve its spirit. <p> Our work is based upon Isabelle's implementation of Zermelo-Frnkel (ZF) set theory, itself based upon an implementation of first-order logic. Isabelle/ZF arose from early work by Paulson [17] and No el [15]; it is described in detail elsewhere <ref> [18, 21] </ref>. There are two key ideas behind Isabelle: Expressions are typed -terms. Thus the syntax is higher-order, giving a uniform treatment of quantifiers, descriptions and other binding opera tors. In Isabelle/ZF, all sets have the same type. <p> We have found these tools indispensable. But there is much room for improvement; mechanizing a page of text can take a week or more. We discuss some reasons for this below. A lengthier introduction to Isabelle and Isabelle/ZF appears elsewhere <ref> [18] </ref>. The Isabelle documentation has been published as a book [20]. Figure 1 summarizes the Isabelle/ZF notation for set theory. Note. Application of the function f to the argument x is formally written f `x. In informal mathematics we use the more familiar f (x) for clarity. <p> But a set-theoretic function is just another set, and Isabelle allows the notation f (x) only if f is a meta-level function. This usually corresponds to subscripting in informal mathematics, for example f x . For the Isabelle/ZF development of functions, see Paulson <ref> [18, x7.5] </ref>. 3. The Cardinal Proofs: Motivation and Discussion The original reason for mechanizing the theory of cardinals was to generalize Paulson's treatment of recursive data structures in ZF. The original treatment [21] permitted only finite branching, as in n-ary trees. Countable branching required defining an uncountable ordinal. <p> The first four sections are largely expository. Section 5 introduces a few axioms while x6 describes the operations of Cartesian product, relations, functions, domain and range. Already, x6 goes beyond the large Isabelle/ZF theory described in earlier papers <ref> [18, 21] </ref>. That theory emphasized computational notions, such as recursive data structures, at the expense of traditional set theory. Now it was time to develop some of the missing material. Paul-son introduced some definitions about relations, orderings, well-orderings and order-isomorphisms, and proved the first two lemmas by well-founded induction. <p> Kunen's x8 and x13 address the legitimacy of introducing new notations in axiomatic set theory. His discussion is more precise and comprehensive than Paulson's defence of the notation of Isabelle/ZF <ref> [18, page 361] </ref>. AC.tex; 2/10/1996; 14:56; no v.; p.5 6 Lawrence C. Paulson and Krzysztof Grabczewski Kunen's x9 concerns classes and recursion. The main theorems of this section, justifying transfinite induction and recursion over the class of ordinals, were already in the Isabelle/ZF library [21, x3.2,x3.4]. <p> A class function is traditionally represented by its graph, a single-valued class predicate [12, page 25]; it is more easily formalized in Isabelle as a meta-level function, an object of type i ) i. See Paulson <ref> [18, x6] </ref> for an example involving the Replacement Axiom. <p> CARDINAL NUMBERS Kunen's x10. The Isabelle theory file extends some Isabelle theories (Order-Type and others) with constants, which stand for operators or predicates. The constants are defined essentially as follows: The least ordinal ff such that P (ff) is defined by a unique description <ref> [18, pages 366-7] </ref> and may be written LEAST ff : P (ff). AC.tex; 2/10/1996; 14:56; no v.; p.9 10 Lawrence C. Paulson and Krzysztof Grabczewski Two sets A and B are equipollent if there exists a bijection between them. Write A B or, in Isabelle, A eqpoll B. <p> The pattern-matching in the abstraction expands internally to the constant split, which takes apart ordered pairs <ref> [18, page 367] </ref>. Finally Un denotes union; note that max (ff; fi) = ff [ fi for ordinals ff and fi. <p> () well ord ( fi ; csquare rel ()) and theorem 3 is x &lt; y &lt; z &lt; hhx; yi; hz; zii 2 csquare rel () x z ^ y z There is not enough space to present the proofs, which comprise over sixty Isabelle tactic commands; see Paulson <ref> [18, x8] </ref> for demonstrations of Isabelle/ZF tactics. The nine proofs require a total of 43 seconds to run. 4 The first few theorems concern elementary properties of csquare rel ().
Reference: 19. <author> Lawrence C. Paulson. </author> <title> A fixedpoint approach to implementing (co)inductive definitions. </title> <editor> In Alan Bundy, editor, </editor> <booktitle> Automated Deduction CADE-12 International Conference, LNAI 814, </booktitle> <pages> pages 148-161. </pages> <publisher> Springer, </publisher> <year> 1994. </year>
Reference-contexts: Mechanizing these proofs did present a few challenges. Their proof of the Well-Ordering Theorem appears to contain an error; we used an alternative justification of their Property 6.4. The inductive definition involves fixedpoints and some non-trivial proofs, but Isabelle's inductive definition package <ref> [19] </ref> automates this process. Abrial and Laffitte envisaged the definition and related proofs to depend implicitly on its successor parameter. In Isabelle this parameter must be explicit in all definitions and proofs, and its assumed properties must be stated wherever they are needed. <p> For i 2 I let ff i be the least ff such that i 2 V [A] ff . From (1) we can prove jIj I V [A] + This result allows V [A] + to serve as the bounding set for a least fixedpoint definition <ref> [19] </ref>. 2 Kunen gives straightforward inductive proofs of these first two properties.
Reference: 20. <author> Lawrence C. Paulson. </author> <title> Isabelle: A Generic Theorem Prover. </title> <publisher> Springer, </publisher> <year> 1994. </year> <note> LNCS 828. </note>
Reference-contexts: But its lack of quantifiers forces mathematical statements to undergo serious contortions when they are formalized. Most automated reasoning systems are first-order at best, while mathematics makes heavy use of higher-order notations. We have conducted our work in Isabelle <ref> [20] </ref>, which provides for higher-order syntax. Other recent systems that have been used for mechanizing mathematics include IMPS [6], HOL [8] and Coq [5]. We describe below machine proofs concerning cardinal arithmetic and the Axiom of Choice (AC). <p> Section 6 introduces the Axiom of Choice and describes the mechanization of Abrial and Laffitte. Sections 7 and 8 are devoted to the mechanization of parts of Rubin and Rubin. Section 9 presents some conclusions. 2. Isabelle and ZF Set Theory Isabelle <ref> [20] </ref> is a generic proof assistant. It supports proofs in higher-order logic, various modal logics, linear logic, etc. Our work is based upon Isabelle's implementation of Zermelo-Frnkel (ZF) set theory, itself based upon an implementation of first-order logic. <p> But there is much room for improvement; mechanizing a page of text can take a week or more. We discuss some reasons for this below. A lengthier introduction to Isabelle and Isabelle/ZF appears elsewhere [18]. The Isabelle documentation has been published as a book <ref> [20] </ref>. Figure 1 summarizes the Isabelle/ZF notation for set theory. Note. Application of the function f to the argument x is formally written f `x. In informal mathematics we use the more familiar f (x) for clarity. <p> When AC is finally invoked, the rule of existential elimination discharges this assumption. Their formal language resembles higher-order logic. Their paper is thus relevant to many proof assistants, such as HOL [8], IMPS [6] and Isabelle/HOL <ref> [20] </ref>. We have used it to define Isabelle/ZF's library of the main forms of AC. But this hardly exhausts the subject. Rather, it is merely the introduction to our next case study. 7.
Reference: 21. <author> Lawrence C. Paulson. </author> <title> Set theory for verification: II. Induction and recursion. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 15(2) </volume> <pages> 167-215, </pages> <year> 1995. </year>
Reference-contexts: Grabczewski has mechanized the first two chapters of Rubin and Rubin's famous monograph [24], proving equivalent eight forms of the Well-ordering Theorem and twenty forms of AC. We have conducted these proofs using an implementation of Zermelo-Frnkel (ZF) set theory in Isabelle. Compared with other Isabelle/ZF proofs <ref> [15, 18, 21] </ref> and other automated set theory proofs [23], these are deep, abstract and highly technical results. We have tried to reproduce the mathematics faithfully. This does not mean slavishly adhering to every detail of the text, but attempting to preserve its spirit. <p> Our work is based upon Isabelle's implementation of Zermelo-Frnkel (ZF) set theory, itself based upon an implementation of first-order logic. Isabelle/ZF arose from early work by Paulson [17] and No el [15]; it is described in detail elsewhere <ref> [18, 21] </ref>. There are two key ideas behind Isabelle: Expressions are typed -terms. Thus the syntax is higher-order, giving a uniform treatment of quantifiers, descriptions and other binding opera tors. In Isabelle/ZF, all sets have the same type. <p> For the Isabelle/ZF development of functions, see Paulson [18, x7.5]. 3. The Cardinal Proofs: Motivation and Discussion The original reason for mechanizing the theory of cardinals was to generalize Paulson's treatment of recursive data structures in ZF. The original treatment <ref> [21] </ref> permitted only finite branching, as in n-ary trees. Countable branching required defining an uncountable ordinal. We are thus led to consider branching of any cardinality. 3.1. INFINITE BRANCHING TREES Let stand for an infinite cardinal and + for its successor cardinal. <p> The first four sections are largely expository. Section 5 introduces a few axioms while x6 describes the operations of Cartesian product, relations, functions, domain and range. Already, x6 goes beyond the large Isabelle/ZF theory described in earlier papers <ref> [18, 21] </ref>. That theory emphasized computational notions, such as recursive data structures, at the expense of traditional set theory. Now it was time to develop some of the missing material. Paul-son introduced some definitions about relations, orderings, well-orderings and order-isomorphisms, and proved the first two lemmas by well-founded induction. <p> Paul-son introduced some definitions about relations, orderings, well-orderings and order-isomorphisms, and proved the first two lemmas by well-founded induction. The main theorem required a surprising amount of further work; see x4.3 below. Kunen's x7 covers ordinals. Much of this material had already been formalized in Isabelle/ZF <ref> [21, x3.2] </ref>, but using a different definition of ordinal. A set A is transitive if A P (A): every element of A is a subset of A. <p> Our work required formalizing some material from x7 concerning order types and ordinal addition. We have also formalized ordinal multiplication. But we have ignored what Kunen calls A &lt;! because Isabelle/ZF provides list (A), the set of finite lists over A <ref> [21, x4.3] </ref> for the same purpose. Kunen's x8 and x13 address the legitimacy of introducing new notations in axiomatic set theory. His discussion is more precise and comprehensive than Paulson's defence of the notation of Isabelle/ZF [18, page 361]. AC.tex; 2/10/1996; 14:56; no v.; p.5 6 Lawrence C. <p> AC.tex; 2/10/1996; 14:56; no v.; p.5 6 Lawrence C. Paulson and Krzysztof Grabczewski Kunen's x9 concerns classes and recursion. The main theorems of this section, justifying transfinite induction and recursion over the class of ordinals, were already in the Isabelle/ZF library <ref> [21, x3.2,x3.4] </ref>. Kunen discusses here (and with some irony in x12) the difficulties of formalizing properties of classes. Variables in ZF range over only sets; classes are essentially predicates, so a theorem about classes must be formalized as a theorem scheme. Many statements about classes are easily expressed in Isabelle/ZF. <p> Isabelle/ZF's transfinite recursion operator <ref> [21, x3.4] </ref> satisfies an equation similar to Kunen's Theorem 9.3, expressed in terms of class functions. Isabelle/ZF does not overload set operators such as ", [, domain and list to apply to classes. Overloading is possible in Isabelle, but is probably not worth the trouble in this case. <p> Serious reasoning about classes might be easier in some other axiomatic framework, where classes formally exist. Kunen's x10 concerns cardinals. Some of these results presented great difficulties and form one of the main subjects of this paper. But the Schr oder-Bernstein Theorem was already formalized in Isabelle/ZF <ref> [21, x2.6] </ref>, and the first few lemmas were straightforward. An embarrassment was proving that the natural numbers are cardinals. This boils down to showing that if there is a bijection between an m-element set and an n-element set then m = n. Proving this obvious fact is most tiresome. <p> What is more important, every well-ordered set is isomorphic to a unique ordinal, called its order type and written type (A; &lt;). Kunen [12, page 17] proves this by a direct construction. But to mechanize the result in Isabelle/ZF, it is easier to use well-founded recursion <ref> [21, x3.4] </ref>. If hA; &lt;i is a well-ordering, define a function f on A by the recursion f (x) = ff (y) j y &lt; xg for all x 2 A. <p> Our source material contains few such proofs; we have spent much time re-discovering them. 4.3. COMBINING WELL-ORDERINGS Let A + B = (f0g fi A) [ (f1g fi B) stand for the disjoint sum of A and B, which is formalized in Isabelle/ZF <ref> [21, x4.1] </ref>. Let hA; &lt; A i and hB; &lt; B i be well-ordered sets. The order types of certain well-orderings of A + B and A fi B are of key importance. <p> Grabczewski's visit was made possible by the TEMPUS Project JEP 3340 Computer Aided Education. John Harrison, Paul Taylor and the referees pointed out errors. AC.tex; 2/10/1996; 14:56; no v.; p.31 32 Notes 1 To understand those details, refer to Paulson <ref> [21, x3.5] </ref>. For i 2 I let ff i be the least ff such that i 2 V [A] ff .
Reference: 22. <institution> The QED manifesto. </institution> <note> On the World Wide Web at http://www.mcs.anl.gov/home/lusk/qed/manifesto.html, 1995. </note>
Reference-contexts: We have relied upon Isabelle's reasoning tools (see x2 below) to fill some of the gaps for us. AC.tex; 2/10/1996; 14:56; no v.; p.1 2 Lawrence C. Paulson and Krzysztof Grabczewski We have done this work in the spirit of the QED Project <ref> [22] </ref>, which aims to build a computer system that effectively represents all important mathematical knowledge and techniques. Our results provide evidence, both positive and negative, regarding the feasibility of QED. On the positive side, we are able to mechanize difficult mathematics.
Reference: 23. <author> Art Quaife. </author> <title> Automated deduction in von Neumann-Bernays-Godel set theory. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 8(1) </volume> <pages> 91-147, </pages> <year> 1992. </year>
Reference-contexts: We have conducted these proofs using an implementation of Zermelo-Frnkel (ZF) set theory in Isabelle. Compared with other Isabelle/ZF proofs [15, 18, 21] and other automated set theory proofs <ref> [23] </ref>, these are deep, abstract and highly technical results. We have tried to reproduce the mathematics faithfully. This does not mean slavishly adhering to every detail of the text, but attempting to preserve its spirit.
Reference: 24. <author> Herman Rubin and Jean E. Rubin. </author> <title> Equivalents of the Axiom of Choice, II. </title> <publisher> North-Holland, </publisher> <year> 1985. </year>
Reference-contexts: We describe below machine proofs concerning cardinal arithmetic and the Axiom of Choice (AC). Paulson has mechanized most of the first chapter of Kunen [12] and a paper by Abrial and Laffitte [1]. Grabczewski has mechanized the first two chapters of Rubin and Rubin's famous monograph <ref> [24] </ref>, proving equivalent eight forms of the Well-ordering Theorem and twenty forms of AC. We have conducted these proofs using an implementation of Zermelo-Frnkel (ZF) set theory in Isabelle. <p> We have used it to define Isabelle/ZF's library of the main forms of AC. But this hardly exhausts the subject. Rather, it is merely the introduction to our next case study. 7. Rubin and Rubin's AC Proofs Herman and Jean Rubin's book Equivalents of the Axiom of Choice <ref> [24] </ref> is a compendium of hundreds of statements equivalent to the Axiom of Choice. Many of these statements were used originally as formulations of AC; others, of independent interest, were found to be equivalent to AC. Each chapter of the book focusses on a particular framework for formulating AC. <p> The definition of vv1 is a formal rendering of Rubin and Rubin: let fi be the &lt;-smallest such fl which satisfies the conditions. Then given fi , let fi be the &lt;-smallest such ffi which satisfies the conditions <ref> [24, page 3] </ref>. Unfolding the let-declarations yields nesting of the LEAST operator. To reason about this, the following theorem turned out to be useful: AC.tex; 2/10/1996; 14:56; no v.; p.27 28 Lawrence C. Paulson and Krzysztof Grabczewski NN (y) == m:nat. EX a. EX f. <p> The main file containing the proof of WO 6 =) WO 1 holds over 130 tactic commands; it executes in about three minutes. 9. Conclusions We have mechanized parts of two advanced textbooks: most of Chapter I of Kunen [12] and the first two chapters of Rubin and Rubin <ref> [24] </ref>. Some of this material is fairly recent; the Rubins cite papers from the 1960s. In doing our proofs, we noted a number of difficulties. Ideally, the mathematics should not have to conform to the machine: the machine should conform to the mathematics. <p> Small changes to searching commands can have a drastic effect on the run time. For comparison, the main ZF library (which includes the Kunen, Abrial and Laffitte proofs) contains 150 definitions and nearly 3300 tactic commands. 7 Rubin and Rubin <ref> [24, page 9] </ref> state this incorrectly. They quantify over B but leave X free in the definiens. 8 At least one of these, WO 1 =) AC 10 (n), is non-trivial.
Reference: 25. <author> David M. Russinoff. </author> <title> A mechanical proof of quadratic reciprocity. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 8(1) </volume> <pages> 3-22, </pages> <year> 1992. </year>
Reference-contexts: 1. Introduction A growing corpus of mathematics has been checked by machine. Researchers have constructed computer proofs of results in logic [26], number theory <ref> [25] </ref>, group theory [28], -calculus [10], etc. An especially wide variety of results have been mechanized using the Mizar Proof Checker, including the theorem = discussed below [2]. However, the problem of mechanizing mathematics is far from solved. <p> An especially wide variety of results have been mechanized using the Mizar Proof Checker, including the theorem = discussed below [2]. However, the problem of mechanizing mathematics is far from solved. The Boyer/Moore Theorem Prover [3, 4] has yielded the most impressive results <ref> [25, 26] </ref>. It has been successful because of its exceptionally strong support for recursive definitions and inductive reasoning. But its lack of quantifiers forces mathematical statements to undergo serious contortions when they are formalized. Most automated reasoning systems are first-order at best, while mathematics makes heavy use of higher-order notations.
Reference: 26. <author> N. Shankar. </author> <title> Metamathematics, Machines, and Godel's Proof. </title> <publisher> Cambridge University Press, </publisher> <year> 1994. </year>
Reference-contexts: 1. Introduction A growing corpus of mathematics has been checked by machine. Researchers have constructed computer proofs of results in logic <ref> [26] </ref>, number theory [25], group theory [28], -calculus [10], etc. An especially wide variety of results have been mechanized using the Mizar Proof Checker, including the theorem = discussed below [2]. However, the problem of mechanizing mathematics is far from solved. <p> An especially wide variety of results have been mechanized using the Mizar Proof Checker, including the theorem = discussed below [2]. However, the problem of mechanizing mathematics is far from solved. The Boyer/Moore Theorem Prover [3, 4] has yielded the most impressive results <ref> [25, 26] </ref>. It has been successful because of its exceptionally strong support for recursive definitions and inductive reasoning. But its lack of quantifiers forces mathematical statements to undergo serious contortions when they are formalized. Most automated reasoning systems are first-order at best, while mathematics makes heavy use of higher-order notations.
Reference: 27. <author> Patrick Suppes. </author> <title> Axiomatic Set Theory. </title> <publisher> Dover, </publisher> <year> 1972. </year>
Reference-contexts: Elementary texts <ref> [9, 27] </ref> never get far enough, while advanced texts such as Kunen [12] race through it. But Kunen's rapid treatment is nonetheless clear, and mentions all the essential elements. <p> This gives the central idea concisely; Suppes <ref> [27, pages 233-4] </ref> gives a much longer proof that is arguably less clear. However, the assertions Kunen makes are not trivial and Paulson needed two days and a half to mechanize the proof. 4.2. ORDER TYPES The ordinals may be viewed as representatives of the well-ordered sets. <p> We also need the identity Ord (a) ==&gt; (UN b&lt;a++a. C (b)) = (UN b&lt;a. C (b) Un C (a++b)) These definitions of ordinal sum and product are traditional (see also Kunen [12, page 20]), but deriving the required properties from them proved to be extremely laborious. Recursive definitions <ref> [27, page 201] </ref> would have been much more direct. 8.2.2. New Notation To express the definitions conveniently required adding a let-construct to Isa-belle/ZF. Fortunately, this construct was already available in Isabelle/HOL and could be taken verbatim.
Reference: 28. <author> Yuan Yu. </author> <title> Computer proofs in group theory. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 6(3) </volume> <pages> 251-286, </pages> <year> 1990. </year> <note> AC.tex; 2/10/1996; 14:56; no v.; p.33 </note>
Reference-contexts: 1. Introduction A growing corpus of mathematics has been checked by machine. Researchers have constructed computer proofs of results in logic [26], number theory [25], group theory <ref> [28] </ref>, -calculus [10], etc. An especially wide variety of results have been mechanized using the Mizar Proof Checker, including the theorem = discussed below [2]. However, the problem of mechanizing mathematics is far from solved. The Boyer/Moore Theorem Prover [3, 4] has yielded the most impressive results [25, 26].
References-found: 28

