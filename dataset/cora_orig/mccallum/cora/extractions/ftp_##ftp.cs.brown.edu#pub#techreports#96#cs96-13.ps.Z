URL: ftp://ftp.cs.brown.edu/pub/techreports/96/cs96-13.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-96-13.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> R.K. Ahuja, T.L. Magnanti, and J.B. Orlin. </author> <title> Network Flows: Theory, Algorithms, and Applications. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1993. </year>
Reference-contexts: This algorithm not only made a fundamental theoretical contribution to the topic of bend-minimum planar orthogonal drawings, but also has been found to have good performance in practice. Using Dial's implementation for the priority queue used in the Dijkstra's shortest-path algorithm <ref> [1] </ref>, Tamassia's algorithm can be implemented with O (n 2 ) time-complexity. Experimental studies [31, 62] have shown that Tamassia's algorithm in general constructs better drawings in practice than some other well-known algorithms of [18, 19, 101, 13, 87]. <p> Following Lemma is immediate from the definition of an augmenting path: Lemma 29 Each augmenting path of N contains at least one arc belonging to A. Research in the area of network flows has a rich tradition (see <ref> [1] </ref> for an extensive survey). A number of algorithms have been proposed for finding min-cost max-flows and 139 max-flows in flow networks. <p> See [105] or <ref> [1] </ref> for details. Fig 7.4 shows another well-known algorithm, which we call the Blockflow algorithm, that computes a max-flow f in a flow network N . <p> Algorithm PD was developed first by Ford and Fulkerson [46, 47]. This algorithm computes f in stages, where in each stage it computes a maximum flow in the admissible network of N (with respect to the flow already computed). See <ref> [1, 46, 47] </ref> for details. <p> Lemma 33, which follows directly from the discussion on the primal-dual algorithm in <ref> [1] </ref> states that c i+1 &gt; c i . Intuitively, this is so because after establishing the maximum flow f i in A i , there are no augmenting paths left in N with cost c i . 142 Lemma 33 c i+1 &gt; c i 0. <p> Let r be the total number of stages used by Algorithm PD. If we denote by T i , the time-complexity of stage i, then we have: Lemma 34 <ref> [1] </ref> Total time taken by Algorithm PD to compute a min-cost max flow in N is equal to P 1ir1 T i + O (m log n), where n and m denote the number of nodes and arcs respectively in N . 7.4 Bend-Minimization and Network Flow It is shown by
Reference: [2] <author> R. Arrathoon, </author> <title> editor. Optical Computing: Digital and Symbolic. </title> <publisher> Marcel Dekker, Inc., </publisher> <year> 1989. </year>
Reference-contexts: Namely, we study the angular resolution of straight-line drawings, defined as the smallest angle formed by two incident edges. Besides visualization applications (see, e.g., [29]), constructing drawing with large angular resolution is important in the design of wireless communications networks (see, e.g., <ref> [2] </ref>). The study of the angular resolution of drawings has attracted considerable interest in the last years. Formann, Hagerup, Haralambides, Kaufmann, Leighton, Simvonis, Welzl, and Woeginger [49] were the first to study the angular resolution of (generally nonplanar) straight-line drawings of various classes of graphs.
Reference: [3] <author> C. Batini, L. Furlani, and E. Nardelli. </author> <title> What is a good diagram? A pragmatic approach. </title> <booktitle> In Proc. 4th Internat. Conf. on the Entity Relationship Approach, </booktitle> <year> 1985. </year>
Reference-contexts: An extensive survey on the area of graph drawing is presented by Di Battista, Eades, Tamassia and Tollis in [30]. While it is difficult, perhaps impossible, to measure exactly, the "goodness" of a drawing, it has been found, see e.g. <ref> [3, 28] </ref>, that two criteria are considered important by the human designers: * Aesthetic criteria which are independent of the information being displayed, and are concerned with the "beauty" of the drawing.
Reference: [4] <author> C. Batini, M. Talamo, and R. Tamassia. </author> <title> Computer aided layout of entity-relationship diagrams. </title> <journal> Journal of Systems and Software, </journal> <volume> 4 </volume> <pages> 163-173, </pages> <year> 1984. </year>
Reference-contexts: Drawings of rectilinear graphs also find application in a variety of areas such as VLSI design [75, 109], architectural floor plan layout [77] and data base system design <ref> [4] </ref>. In fact a recent experimental study [62, 61] has shown that Tamassia's bend-minimization algorithm gives a more aesthetic drawing in practice then some other well known algorithms [18, 27, 19, 113].
Reference: [5] <author> P. Bertolazzi, R. F. Cohen, G. Di Battista, R. Tamassia, and I. G. Tollis. </author> <title> How to draw a series-parallel digraph. </title> <booktitle> In Proc. 3rd Scand. Workshop Algorithm Theory, volume 621 of Lecture Notes in Computer Science, </booktitle> <pages> pages 272-283. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Di Battista, Tamassia, and Tollis [36, 37] give algorithms for constructing upward planar drawings of planar st-digraphs, and investigate area bounds and symmetry display. Tamassia and Vitter [104] show that the above drawing algorithms can be efficiently parallelized. Upward planar drawings of series-parallel digraphs are studied in <ref> [5, 6] </ref>. Our proof techniques are based on a two-phase reduction from the known NP-complete problem not-all-equal-3-sat. In the first phase, we reduce not-all-equal-3-sat to an auxiliary undirected flow problem.
Reference: [6] <author> P. Bertolazzi, R. F. Cohen, G. Di Battista, R. Tamassia, and I. G. Tollis. </author> <title> How to draw a series-parallel digraph. </title> <journal> Internat. J. Comput. Geom. Appl., </journal> <volume> 4 </volume> <pages> 385-402, </pages> <year> 1994. </year>
Reference-contexts: Di Battista, Tamassia, and Tollis [36, 37] give algorithms for constructing upward planar drawings of planar st-digraphs, and investigate area bounds and symmetry display. Tamassia and Vitter [104] show that the above drawing algorithms can be efficiently parallelized. Upward planar drawings of series-parallel digraphs are studied in <ref> [5, 6] </ref>. Our proof techniques are based on a two-phase reduction from the known NP-complete problem not-all-equal-3-sat. In the first phase, we reduce not-all-equal-3-sat to an auxiliary undirected flow problem. <p> A series-parallel subgraph of G is either G itself, or a series-parallel subgraph of G 1 or G 2 . Associated with each series-parallel graph G is a binary tree called the SPQ-Tree <ref> [6] </ref> (also known as a decomposition tree or a parse tree) of G, denoted by SP Q (G). SP Q (G) has three type of nodes- S, P and Q. There is a one-to-one correspondence between the series-parallel subgraphs of G and the nodes of SP Q (G). <p> Sector (G) is computed from sector (G 1 ) and sector (G 2 ) by considering whether G is a series or a parallel composition of G 1 and G 2 . The study of area requirements of drawings of graphs has received a lot of attention (see, e.g., <ref> [6, 37, 53, 58] </ref>) and is motivated by the finite resolution of the current graph drawing technologies and circuit-area optimization criteria of VLSI layouts [12, 75, 109]. 84 Typical resolution rules are requirement of minimum unit distance between vertices, their placement on grid points of a unit-grid etc. <p> Fig 5.16 (e) shows the associated decomposition tree of the series-parallel graph shown in Fig 5.16 (d). T (G), therefore, maintains information about the structure of G in terms of its series-parallel subgraphs, and can be constructed in linear time <ref> [6] </ref>. A series-parallel angle graph is an angle graph with a series-parallel graph as its underlying graph. G 1 and G 2 ; (c) Parallel composition of G 1 and G 2 . <p> Proof: Assume that we are given the associated decomposition tree of G, since it can be constructed in O (n) time <ref> [6] </ref>. For testing whether G admits a drawing or not, first align the reference axis with an arbitrary edge of G and using this alignment, for each edge e of G, compute the angle between e and the reference axis. This takes O (n) time.
Reference: [7] <author> P. Bertolazzi and G. Di Battista. </author> <title> On upward drawing testing of triconnected digraphs. </title> <booktitle> In Proc. 7th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 272-280, </pages> <year> 1991. </year>
Reference-contexts: The upward planarity testing problem, i.e., the problem of testing whether a given directed graph (digraph, in short) admits an upward planar drawing, has intrigued researchers for many years. Polynomial-time algorithms are known for upward planarity testing of triconnected digraphs <ref> [7, 9] </ref>, bipartite digraphs [35], st-digraphs [36, 73], single-source multiple-sink digraphs [64, 10], and outerplanar digraphs [86]. However, despite the effort of many researchers, it was not previously known whether one can test a general digraph for upward planarity in polynomial time. <p> This characterization implies that upward planarity testing is in NP. Di Battista, Liu, and Rival [35] show that every planar bipartite digraph is upward planar. Papakostas [86] gives a polynomial-time algorithm for upward planarity testing of outerplanar digraphs. Bertolazzi, Di Battista, Liotta, and Mannino <ref> [7, 9] </ref> give a polynomial-time algorithm for testing upward planarity of triconnected digraphs and of digraphs with a fixed embedding. Concerning single-source digraphs, Thomassen [107] characterizes upward planarity in terms of forbidden circuits. <p> The 8 latter reduction is interesting in its own and provides new insights on the characteriza-tion by flow networks of the angles formed by the edges of upward planar drawings <ref> [7, 9] </ref>. Most of the results and techniques presented in this chapter can also be found in [57, 59]. The rest of this chapter is organized as follows. Preliminary definitions and results are provided in Section 2.2. <p> The angles of an embedded graph are the pairs of consecutive edges incident on the same vertex. Such angles are mapped to geometric angles in a straight-line drawing of the graph. The following definitions are from <ref> [7, 9] </ref>. <p> We paraphrase a result of <ref> [7, 9] </ref> in the following lemma: Lemma 1 An embedding of a digraph ~ G can be extended to an upward embedding if and only if it is bimodal and admits a consistent assignment of labels to its angles. 2.2.2 Tendrils and Wiggles We now define several graphs that will be
Reference: [8] <author> P. Bertolazzi, G. Di Battista, and G. Liotta. </author> <title> Parametric graph drawing. </title> <type> Technical Report 6/67, </type> <institution> IASI-CNR, Rome, Italy, </institution> <year> 1992. </year>
Reference-contexts: Also, the algorithms are usually decomposable into smaller units called methods, so that one can devise new algorithms using the methods of the existing algorithms <ref> [8, 34] </ref>. Because of these advantages, research in graph drawing has mainly concentrated on devising algorithms based on the algorithmic approach. This thesis also focuses on the algorithmic approach.
Reference: [9] <author> P. Bertolazzi, G. Di Battista, G. Liotta, and C. Mannino. </author> <title> Upward drawings of triconnected digraphs. </title> <journal> Algorithmica, </journal> <note> to appear. </note>
Reference-contexts: The upward planarity testing problem, i.e., the problem of testing whether a given directed graph (digraph, in short) admits an upward planar drawing, has intrigued researchers for many years. Polynomial-time algorithms are known for upward planarity testing of triconnected digraphs <ref> [7, 9] </ref>, bipartite digraphs [35], st-digraphs [36, 73], single-source multiple-sink digraphs [64, 10], and outerplanar digraphs [86]. However, despite the effort of many researchers, it was not previously known whether one can test a general digraph for upward planarity in polynomial time. <p> This characterization implies that upward planarity testing is in NP. Di Battista, Liu, and Rival [35] show that every planar bipartite digraph is upward planar. Papakostas [86] gives a polynomial-time algorithm for upward planarity testing of outerplanar digraphs. Bertolazzi, Di Battista, Liotta, and Mannino <ref> [7, 9] </ref> give a polynomial-time algorithm for testing upward planarity of triconnected digraphs and of digraphs with a fixed embedding. Concerning single-source digraphs, Thomassen [107] characterizes upward planarity in terms of forbidden circuits. <p> The 8 latter reduction is interesting in its own and provides new insights on the characteriza-tion by flow networks of the angles formed by the edges of upward planar drawings <ref> [7, 9] </ref>. Most of the results and techniques presented in this chapter can also be found in [57, 59]. The rest of this chapter is organized as follows. Preliminary definitions and results are provided in Section 2.2. <p> The angles of an embedded graph are the pairs of consecutive edges incident on the same vertex. Such angles are mapped to geometric angles in a straight-line drawing of the graph. The following definitions are from <ref> [7, 9] </ref>. <p> We paraphrase a result of <ref> [7, 9] </ref> in the following lemma: Lemma 1 An embedding of a digraph ~ G can be extended to an upward embedding if and only if it is bimodal and admits a consistent assignment of labels to its angles. 2.2.2 Tendrils and Wiggles We now define several graphs that will be
Reference: [10] <author> P. Bertolazzi, G. Di Battista, C. Mannino, and R. Tamassia. </author> <title> Optimal upward planarity testing of single-source digraphs. </title> <booktitle> In 1st Annual European Symposium on Algorithms (ESA '93), volume 726 of Lecture Notes in Computer Science, </booktitle> <pages> pages 37-48. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Polynomial-time algorithms are known for upward planarity testing of triconnected digraphs [7, 9], bipartite digraphs [35], st-digraphs [36, 73], single-source multiple-sink digraphs <ref> [64, 10] </ref>, and outerplanar digraphs [86]. However, despite the effort of many researchers, it was not previously known whether one can test a general digraph for upward planarity in polynomial time. <p> Concerning single-source digraphs, Thomassen [107] characterizes upward planarity in terms of forbidden circuits. Hutton and Lubiw [64] combine Thomassen's characterization with a decomposition scheme to test upward planarity of a single-source digraph in O (n 2 ) time. Bertolazzi, Di Battista, Mannino, and Tamassia <ref> [10] </ref> show that upward planarity testing of a single-source digraph can be done optimally in O (n) time. They also give a parallel algorithm that runs in O (log n) time on a CRCW PRAM with n log log n= log n processors.
Reference: [11] <author> S. Bhatt and S. Cosmadakis. </author> <title> The complexity of minimizing wire lengths in VLSI layouts. </title> <journal> Inform. Process. Lett., </journal> <volume> 25 </volume> <pages> 263-267, </pages> <year> 1987. </year>
Reference-contexts: In addition, it should be noted that producing the exact minimization of the area of the drawing of a tree is NP-hard under several drawing conventions <ref> [11, 15, 42] </ref>. Nevertheless, Crescenzi, Di Battista, and Piperno [21, 22] give O (N )-area planar straight-line upward grid drawings of AVL trees. They do not, however, give a general construction for other types of trees.
Reference: [12] <author> S. N. Bhatt and F. T. Leighton. </author> <title> A framework for solving VLSI graph layout problems. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 28 </volume> <pages> 300-343, </pages> <year> 1984. </year> <month> 154 </month>
Reference-contexts: This is motivated by the finite resolution of all of our current technologies for rendering a drawing, and also by circuit-area optimization criteria in VLSI layout <ref> [12, 75, 109] </ref>. In the following, we assume the existence of a resolution rule that implies a finite minimum area for the drawing of any graph. A typical resolution rule is to require grid drawings, where the vertices and bends of the edges have integer coordinates. <p> 109] Orthogonal Upward binary fi (N log log N ) (x 3.3) Orthogonal Table 3.1: Area-requirements for various types of planar grid drawings of a rooted tree with N nodes. because they improve the readability of the drawing, and, in the context of VLSI layouts, they simplify the design process <ref> [12, 75, 109] </ref>. An upward drawing of a directed graph is such that every edge is a curve monotonically nondecreasing in the vertical direction (when traversed along the direction of the edge). <p> The study of area requirements of drawings of graphs has received a lot of attention (see, e.g., [6, 37, 53, 58]) and is motivated by the finite resolution of the current graph drawing technologies and circuit-area optimization criteria of VLSI layouts <ref> [12, 75, 109] </ref>. 84 Typical resolution rules are requirement of minimum unit distance between vertices, their placement on grid points of a unit-grid etc.
Reference: [13] <author> T. Biedl and G. Kant. </author> <title> A better heuristic for orthogonal graph drawings. </title> <booktitle> In Proc. 2nd Annu. European Sympos. Algorithms (ESA '94), volume 855 of Lecture Notes in Computer Science, </booktitle> <pages> pages 24-35. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: From their results, the membership of rectilinear planarity testing in NP is easy to establish. Storer [97], Tamassia and Tollis [102], Liu, Marchioro, Morgana, Petreschi, and Simeone [79, 80, 81, 78], Even and Granot [45], and Biedl and Kant <ref> [68, 13] </ref> give various techniques for constructing planar orthogonal drawings with O (n) bends. Tamassia [99] gives an O (n 2 log n)-time algorithm that constructs a planar orthogonal drawing with the minimum number of bends for an embedded planar graph. <p> Biedl and Kant <ref> [13] </ref> give a linear time algorithm for constructing a planar orthogonal drawing of a planar degree 4 graph with at most 2n+2 bends and area n 2 . <p> Using Dial's implementation for the priority queue used in the Dijkstra's shortest-path algorithm [1], Tamassia's algorithm can be implemented with O (n 2 ) time-complexity. Experimental studies [31, 62] have shown that Tamassia's algorithm in general constructs better drawings in practice than some other well-known algorithms of <ref> [18, 19, 101, 13, 87] </ref>. The studies however indicate clearly that Tamassia's algorithm has a high running time in practice.
Reference: [14] <author> K. Booth and G. Lueker. </author> <title> Testing for the consecutive ones property interval graphs and graph planarity using PQ-tree algorithms. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 13 </volume> <pages> 335-379, </pages> <year> 1976. </year>
Reference-contexts: Hence, given a consistent bilayered angle graph, testing whether it is biplanar or not, is NP-hard. 2 Following corollary is immediate Corollary 8 The problem of testing whether a multilayered angle graph is multiplanar is NP-hard. 123 5.7 Discussion A (general) graph can be tested for planarity in linear time <ref> [14, 63] </ref>. Similarly, the equivalent multiplanarity problem for general graphs is also solvable in linear time: A multilayered (general) graph is multiplanar if and only if each subgraph consisting of the edges assigned to the same layer is planar [110].
Reference: [15] <author> F. J. Brandenburg. </author> <title> Nice drawings of graphs and trees are computationally hard. </title> <type> Technical Report MIP-8820, </type> <institution> Fakultat fur Mathematik und Informatik, Univ. Pas-sau, </institution> <year> 1988. </year>
Reference-contexts: Trees are very popular data-structures, making appearance in a number of applications. It is therefore no surprise that the problem of drawing trees has been studied quite extensively, and a number of results are available. See for example, <ref> [112, 89, 42, 98, 44, 84, 15, 109] </ref>. Also see [30] for a detailed bibliography. <p> In addition, it should be noted that producing the exact minimization of the area of the drawing of a tree is NP-hard under several drawing conventions <ref> [11, 15, 42] </ref>. Nevertheless, Crescenzi, Di Battista, and Piperno [21, 22] give O (N )-area planar straight-line upward grid drawings of AVL trees. They do not, however, give a general construction for other types of trees.
Reference: [16] <author> R. P. Brent and H. T. Kung. </author> <title> On the area of binary tree layouts. </title> <journal> Inform. Process. Lett., </journal> <volume> 11 </volume> <pages> 521-534, </pages> <year> 1980. </year>
Reference-contexts: However, Brent and Kung <ref> [16] </ref> show that if the leaves of an N -node complete binary tree are constrained to be on the convex hull of the drawing, 25 then the drawing needs (N log N ) area. <p> It is also interesting to observe that the upward requirement penalizes the area less than the requirement of placing the leaves on the same horizontal line, for which the (N log N ) area bound also applies <ref> [16] </ref>. We summarize the previous and current bounds on planar grid tree drawings in Table 3.1. Most of the results and techniques presented in this chapter can also be found in [53, 52]. 3.1 Preliminaries In this section we give definitions that will be used throughout the chapter. <p> ) [21, 22] Straight-Line complete binary Strictly-Upward general fi (N log N ) [21] Straight-Line Upward degree O (n ffi ), fi (N ) (x 3.2.2) Polyline ffi &lt; 1 Upward Ordered degree O (1) fi (N log N ) (x 3.2.3) Polyline Leaves-on-Hull binary fi (N log N ) <ref> [16] </ref> Orthogonal Non-Upward degree O (1) fi (N ) [75, 109] Orthogonal Upward binary fi (N log log N ) (x 3.3) Orthogonal Table 3.1: Area-requirements for various types of planar grid drawings of a rooted tree with N nodes. because they improve the readability of the drawing, and, in the
Reference: [17] <author> B. Chazelle. </author> <title> A theorem on polygon cutting with applications. </title> <booktitle> In Proc. 23rd Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 339-349, </pages> <year> 1982. </year>
Reference-contexts: Our algorithm uses a recursive-decomposition technique in which the tree is first decomposed into small trees called blocks, each with fi (log n) nodes, by recursively deleting the 1=3-2=3 separators (see Chazelle <ref> [17] </ref>) of the trees obtained during the course of recursion. Each block is then drawn suboptimally with height O (log n log n) and width O (log n) using a simple algorithm. <p> rooted at node v is the partial tree of T containing all the descendants of v.) A separator of a binary tree T is an edge of T whose removal divides T into two partial trees, each with at least N=3 nodes and at most 2N=3 nodes (e.g., see Chazelle <ref> [17] </ref>).
Reference: [18] <author> N. Chiba, T. Yamanouchi, and T. Nishizeki. </author> <title> Linear algorithms for convex drawings of planar graphs. </title> <editor> In J. A. Bondy and U. S. R. Murty, editors, </editor> <booktitle> Progress in Graph Theory, </booktitle> <pages> pages 153-173. </pages> <publisher> Academic Press, </publisher> <address> New York, NY, </address> <year> 1984. </year>
Reference-contexts: In fact a recent experimental study [62, 61] has shown that Tamassia's bend-minimization algorithm gives a more aesthetic drawing in practice then some other well known algorithms <ref> [18, 27, 19, 113] </ref>. The success of rectilinear angle graphs in drawing graphs raises the natural question whether it is possible to use general angle graphs for constructing high quality planar drawings. <p> Using Dial's implementation for the priority queue used in the Dijkstra's shortest-path algorithm [1], Tamassia's algorithm can be implemented with O (n 2 ) time-complexity. Experimental studies [31, 62] have shown that Tamassia's algorithm in general constructs better drawings in practice than some other well-known algorithms of <ref> [18, 19, 101, 13, 87] </ref>. The studies however indicate clearly that Tamassia's algorithm has a high running time in practice.
Reference: [19] <author> M. Chrobak and T. H. Payne. </author> <title> A linear time algorithm for drawing a planar graph on a grid. </title> <type> Technical Report UCR-CS-90-2, </type> <institution> Dept. of Math. and Comput. Sci., Univ. California Riverside, </institution> <year> 1990. </year>
Reference-contexts: In fact a recent experimental study [62, 61] has shown that Tamassia's bend-minimization algorithm gives a more aesthetic drawing in practice then some other well known algorithms <ref> [18, 27, 19, 113] </ref>. The success of rectilinear angle graphs in drawing graphs raises the natural question whether it is possible to use general angle graphs for constructing high quality planar drawings. <p> Using Dial's implementation for the priority queue used in the Dijkstra's shortest-path algorithm [1], Tamassia's algorithm can be implemented with O (n 2 ) time-complexity. Experimental studies [31, 62] have shown that Tamassia's algorithm in general constructs better drawings in practice than some other well-known algorithms of <ref> [18, 19, 101, 13, 87] </ref>. The studies however indicate clearly that Tamassia's algorithm has a high running time in practice.
Reference: [20] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1990. </year>
Reference-contexts: The implementation of Algorithm SAP that achieves the O (( + 1) m log n) upper bound of Lemma 30 uses Dijkstra's shortest path algorithm for non-negative edge weights (which has time-complexity O (m log n) when implemented using priority queues <ref> [20] </ref>), for computing p i . See [105] or [1] for details. Fig 7.4 shows another well-known algorithm, which we call the Blockflow algorithm, that computes a max-flow f in a flow network N .
Reference: [21] <author> P. Crescenzi, G. Di Battista, and A. Piperno. </author> <title> A note on optimal area algorithms for upward drawings of binary trees. </title> <journal> Comput. Geom. Theory Appl., </journal> <volume> 2 </volume> <pages> 187-200, </pages> <year> 1992. </year>
Reference-contexts: As for the area-requirement of upward planar grid drawings 3 of trees, the well-known algorithms of Reingold and Tilford [89], and Wetherell and Shannon [112] give drawings with area O (n 2 ), where n is the number of nodes in the tree. Crescenzi, Di Battista, and Piperno <ref> [21, 22] </ref> have given algorithms for constructing a straight-line upward planar grid drawing with area O (n log n) of a given general tree, and with area O (n) of a given complete binary or Fibonacci or AVL tree. <p> Thus, a natural question is whether O (N ) area is still achievable for planar upward drawings. Crescenzi, Di Battista, and Piperno <ref> [21] </ref> have recently provided a negative answer to this question for the case of strictly upward grid drawings, where the nodes have integer coordinates, and the parent of a node has y-coordinate strictly greater than the ones of its children. <p> Namely, they exhibit a family of binary trees that require (N log N ) area in any strictly upward planar grid drawing. This lower bound is tight within a constant factor: Shiloach [95] and Crescenzi, Di Battista, and Piperno <ref> [21] </ref> give linear-time algorithms that construct a strictly upward planar straight-line grid drawing of an N -node rooted tree with O (N log N ) area, O (N ) height, and O (log N ) width. <p> In addition, it should be noted that producing the exact minimization of the area of the drawing of a tree is NP-hard under several drawing conventions [11, 15, 42]. Nevertheless, Crescenzi, Di Battista, and Piperno <ref> [21, 22] </ref> give O (N )-area planar straight-line upward grid drawings of AVL trees. They do not, however, give a general construction for other types of trees. <p> A grid drawing is such that the vertices and bends along the edges have integer coordinates. Planar drawings, where edges do not intersect, are especially important 27 Drawing Tree Type Previous Bounds Our Bounds Upward general O (N log N ) <ref> [21, 95] </ref> Straight-Line Upward AVL, Fibonacci, fi (N ) [21, 22] Straight-Line complete binary Strictly-Upward general fi (N log N ) [21] Straight-Line Upward degree O (n ffi ), fi (N ) (x 3.2.2) Polyline ffi &lt; 1 Upward Ordered degree O (1) fi (N log N ) (x 3.2.3) Polyline <p> Planar drawings, where edges do not intersect, are especially important 27 Drawing Tree Type Previous Bounds Our Bounds Upward general O (N log N ) [21, 95] Straight-Line Upward AVL, Fibonacci, fi (N ) <ref> [21, 22] </ref> Straight-Line complete binary Strictly-Upward general fi (N log N ) [21] Straight-Line Upward degree O (n ffi ), fi (N ) (x 3.2.2) Polyline ffi &lt; 1 Upward Ordered degree O (1) fi (N log N ) (x 3.2.3) Polyline Leaves-on-Hull binary fi (N log N ) [16] Orthogonal <p> Planar drawings, where edges do not intersect, are especially important 27 Drawing Tree Type Previous Bounds Our Bounds Upward general O (N log N ) [21, 95] Straight-Line Upward AVL, Fibonacci, fi (N ) [21, 22] Straight-Line complete binary Strictly-Upward general fi (N log N ) <ref> [21] </ref> Straight-Line Upward degree O (n ffi ), fi (N ) (x 3.2.2) Polyline ffi &lt; 1 Upward Ordered degree O (1) fi (N log N ) (x 3.2.3) Polyline Leaves-on-Hull binary fi (N log N ) [16] Orthogonal Non-Upward degree O (1) fi (N ) [75, 109] Orthogonal Upward binary <p> The algorithm is a variation of the ones by Shiloach [95] and by Crescenzi, Di Battista, and Piperno <ref> [21] </ref>. We say that a node in a drawing is obstructed if the vertical line through v intersects the drawing below v. Lemma 12 Let T be a binary tree with N nodes. <p> In view of our results, the main open problem on this subject is determining the area requirement of planar upward straight-line drawings of rooted trees. There is still a gap between the trivial (N ) lower bound and the O (N log N ) upper bound <ref> [21, 95] </ref>. It would also be interesting to determine the total edge-length of our O (N ) area polyline drawings and extend our results to unbounded-degree trees.
Reference: [22] <author> P. Crescenzi and A. Piperno. </author> <title> Optimal-area upward drawings of AVL trees. </title> <editor> In R. Tamassia and I. G. Tollis, editors, </editor> <booktitle> Graph Drawing (Proc. GD '94), volume 894 of Lecture Notes in Computer Science, </booktitle> <pages> pages 307-317. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: As for the area-requirement of upward planar grid drawings 3 of trees, the well-known algorithms of Reingold and Tilford [89], and Wetherell and Shannon [112] give drawings with area O (n 2 ), where n is the number of nodes in the tree. Crescenzi, Di Battista, and Piperno <ref> [21, 22] </ref> have given algorithms for constructing a straight-line upward planar grid drawing with area O (n log n) of a given general tree, and with area O (n) of a given complete binary or Fibonacci or AVL tree. <p> In addition, it should be noted that producing the exact minimization of the area of the drawing of a tree is NP-hard under several drawing conventions [11, 15, 42]. Nevertheless, Crescenzi, Di Battista, and Piperno <ref> [21, 22] </ref> give O (N )-area planar straight-line upward grid drawings of AVL trees. They do not, however, give a general construction for other types of trees. <p> Planar drawings, where edges do not intersect, are especially important 27 Drawing Tree Type Previous Bounds Our Bounds Upward general O (N log N ) [21, 95] Straight-Line Upward AVL, Fibonacci, fi (N ) <ref> [21, 22] </ref> Straight-Line complete binary Strictly-Upward general fi (N log N ) [21] Straight-Line Upward degree O (n ffi ), fi (N ) (x 3.2.2) Polyline ffi &lt; 1 Upward Ordered degree O (1) fi (N log N ) (x 3.2.3) Polyline Leaves-on-Hull binary fi (N log N ) [16] Orthogonal
Reference: [23] <author> I. F. Cruz and A. Garg. </author> <title> Drawing graphs by example efficiently: Trees and planar acyclic digraphs. </title> <editor> In R. Tamassia and I. G. Tollis, editors, </editor> <booktitle> Graph Drawing (Proc. GD '94), volume 894 of Lecture Notes in Computer Science, </booktitle> <pages> pages 404-415. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: A current "hot" topic for research is to devise declarative approach based techniques with improved efficiency, more amenability to performance-analysis etc. (see for example, <ref> [23, 56] </ref>). The algorithmic approach takes a more pragmatic path. This approach emphasizes on developing algorithms for constructing drawings that satisfy only a fixed set of aesthetic criteria. These algorithms first formalize the aesthetic criteria under consideration as optimization goals, and then construct a drawing optimizing these goals. <p> A recent trend in the area of graph drawing is towards developing systems which allow the user to specify arbitrary constraints on the positioning of vertices and edges in the drawings. See for example, <ref> [23, 24, 41, 65] </ref>.
Reference: [24] <author> I. F. Cruz, R. Tamassia, and P. Van Hentenryk. </author> <title> A visual approach to graph drawing. </title> <booktitle> In Graph Drawing '93 (Proc. ALCOM Workshop on Graph Drawing), </booktitle> <address> Paris, France, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: A recent trend in the area of graph drawing is towards developing systems which allow the user to specify arbitrary constraints on the positioning of vertices and edges in the drawings. See for example, <ref> [23, 24, 41, 65] </ref>.
Reference: [25] <author> R. Davidson and D. Harel. </author> <title> Drawing graphs nicely using simulated annealing. </title> <journal> Commun. ACM. </journal> <note> To appear. </note>
Reference-contexts: A grid drawing is a polyline drawing in which each vertex and each bend is assigned integer coordinates. (c) Orthogonal drawing The current graph drawing techniques are, broadly speaking, based on two type of approaches: the algorithmic approach and the declarative approach. The declarative approach (see for example, <ref> [28, 25, 40, 66] </ref>. Also see [30] for a detailed bibliography) allows users to specify constraints such as clustering or aligning a set of vertices etc., so that the drawings constructed satisfy these constraints.
Reference: [26] <author> H. de Fraysseix, J. Pach, and R. Pollack. </author> <title> Small sets supporting Fary embeddings of planar graphs. </title> <booktitle> In Proc. 20th Annu. ACM Sympos. Theory Comput., </booktitle> <pages> pages 426-433, </pages> <year> 1988. </year>
Reference-contexts: Indeed, this consideration recently motivated the re-examination of straight-line drawings of planar directed graphs, because they require exponentially-large area [37], whereas several researchers have recently shown that planar graph drawings require only quadratic area, and that such drawings can be produced in linear time <ref> [26, 68, 94] </ref>. Moreover, some very nice work by Kant [68] shows that a number of other aesthetic criteria (such as convex faces) can be satisfied for a planar drawing while still keeping the area quadratic.
Reference: [27] <author> H. De Fraysseix, J. Pach, and R. Pollack. </author> <title> How to draw a planar graph on a grid. </title> <journal> Combinatorica, </journal> <volume> 10(1) </volume> <pages> 41-51, </pages> <year> 1990. </year>
Reference-contexts: In fact a recent experimental study [62, 61] has shown that Tamassia's bend-minimization algorithm gives a more aesthetic drawing in practice then some other well known algorithms <ref> [18, 27, 19, 113] </ref>. The success of rectilinear angle graphs in drawing graphs raises the natural question whether it is possible to use general angle graphs for constructing high quality planar drawings.
Reference: [28] <author> E. Dengler, M. Friedell, and J. Marks. </author> <title> Constraint-driven diagram layout. </title> <booktitle> In Proc. IEEE Sympos. on Visual Languages (VL '93), </booktitle> <pages> pages 330-335, </pages> <year> 1993. </year>
Reference-contexts: An extensive survey on the area of graph drawing is presented by Di Battista, Eades, Tamassia and Tollis in [30]. While it is difficult, perhaps impossible, to measure exactly, the "goodness" of a drawing, it has been found, see e.g. <ref> [3, 28] </ref>, that two criteria are considered important by the human designers: * Aesthetic criteria which are independent of the information being displayed, and are concerned with the "beauty" of the drawing. <p> A grid drawing is a polyline drawing in which each vertex and each bend is assigned integer coordinates. (c) Orthogonal drawing The current graph drawing techniques are, broadly speaking, based on two type of approaches: the algorithmic approach and the declarative approach. The declarative approach (see for example, <ref> [28, 25, 40, 66] </ref>. Also see [30] for a detailed bibliography) allows users to specify constraints such as clustering or aligning a set of vertices etc., so that the drawings constructed satisfy these constraints.
Reference: [29] <author> G. Di Battista, P. Eades, R. Tamassia, and I. G. Tollis. </author> <title> Algorithms for drawing graphs: an annotated bibliography. </title> <type> Preprint, </type> <institution> Dept. Comput. Sci., Brown Univ., Providence, RI, </institution> <month> November </month> <year> 1993. </year> <note> Preliminary version available via anonymous ftp from wilma.cs.brown.edu, gdbiblio.tex.Z and gdbiblio.ps.Z in /pub/papers/compgeo. </note>
Reference-contexts: In this chapter we investigate the problem of constructing planar straight-line drawings with with large angles between the edges. Namely, we study the angular resolution of straight-line drawings, defined as the smallest angle formed by two incident edges. Besides visualization applications (see, e.g., <ref> [29] </ref>), constructing drawing with large angular resolution is important in the design of wireless communications networks (see, e.g., [2]). The study of the angular resolution of drawings has attracted considerable interest in the last years. <p> Section 4.4 contains the tradeoff between area and angular resolution. The algorithms for constructing straight-line drawings with large angular resolution, of nested-star series-parallel, and maximal outerplanar graphs are described in Section 4.5. Our Conclusions are given in Section 4.6. 4.2 Definitions First, we review basic graph drawing terminology <ref> [29] </ref>. Various graphic standards have been proposed for the representation of graphs in the plane. Usually, vertices are represented by points, and each edge (u; v) is represented by a simple open Jordan curve joining the points associated with the vertices u and v.
Reference: [30] <author> G. Di Battista, P. Eades, R. Tamassia, and I. G. Tollis. </author> <title> Algorithms for drawing graphs: an annotated bibliography. </title> <journal> Comput. Geom. Theory Appl., </journal> <volume> 4 </volume> <pages> 235-282, </pages> <year> 1994. </year>
Reference-contexts: A good graph drawing utility is one that given as input, a graph containing the information intended to be conveyed to user, produces a good drawing of the graph. An extensive survey on the area of graph drawing is presented by Di Battista, Eades, Tamassia and Tollis in <ref> [30] </ref>. <p> Typical layout rules are, clustering or aligning "related" vertices, placing the most important vertex in the center of the drawing etc. To classify the different kind of graph drawings, various graphic standards have been proposed in literature <ref> [30] </ref>. Vertices of the graph are generally represented as symbols such as circles, dots, or boxes, etc., and edges are drawn as continuous curves joining their end points. <p> The declarative approach (see for example, [28, 25, 40, 66]. Also see <ref> [30] </ref> for a detailed bibliography) allows users to specify constraints such as clustering or aligning a set of vertices etc., so that the drawings constructed satisfy these constraints. The declarative approach provides a lot of flexibility in type of drawings that can be constructed using 2 them. <p> Trees are very popular data-structures, making appearance in a number of applications. It is therefore no surprise that the problem of drawing trees has been studied quite extensively, and a number of results are available. See for example, [112, 89, 42, 98, 44, 84, 15, 109]. Also see <ref> [30] </ref> for a detailed bibliography. As for the area-requirement of upward planar grid drawings 3 of trees, the well-known algorithms of Reingold and Tilford [89], and Wetherell and Shannon [112] give drawings with area O (n 2 ), where n is the number of nodes in the tree.
Reference: [31] <author> G. Di Battista, A. Garg, G. Liotta, R. Tamassia, E. Tassinari, and F. Vargiu. </author> <title> An experimental comparison of three graph drawing algorithms. </title> <booktitle> In Proc. 11th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1995. </year>
Reference-contexts: In Chapters 6 and 7, we study the problem of constructing orthogonal planar drawings with small number of bends. Such drawings are attractive for many reasons. They tend to give more aesthetically pleasing drawings in general <ref> [31, 62] </ref>. Minimizing bends is also important in VLSI layouts where bends act as "hot points" because of their higher current density. <p> This heuristic is very simple and also seems to give good drawings in practice <ref> [31, 62] </ref>. Central to the success of this heuristic is minimizing the number of bends in Step 2. Tamassia has given a very famous algorithm in [99] that constructs a bend-minimum planar orthogonal drawing of an embedded planar graph. <p> This algorithm however has a time-complexity of O (n 2 ), where n is the number of vertices in the graph. Experimental studies <ref> [31, 62] </ref> have also commented on its high running time in real-life situations. In Chapter 7, we present a new algorithm with time-complexity O (n 1:75 log n) for constructing a bend-minimum planar orthogonal drawing of an n-vertex embedded planar graph. <p> A planar drawing is one with no edge-crossings. A planar graph is one which admits a planar drawing. The desire to construct orthogonal drawings with small number of bends is motivated by many reasons. Drawings with fewer bends tend to give more aesthetically pleasing drawings <ref> [31, 62] </ref>. <p> to be one of the key factors in producing drawings that meet a number of other aesthetic criteria such as small total edge-length, good height-to-width ratio (also known as aspect ratio), small area etc., as demonstrated by an experimental study presented in the ACM symposium on computational geometry last year <ref> [31] </ref>. For improved readability of a drawing, it is important that the angles between edges be large in the drawing. <p> Using Dial's implementation for the priority queue used in the Dijkstra's shortest-path algorithm [1], Tamassia's algorithm can be implemented with O (n 2 ) time-complexity. Experimental studies <ref> [31, 62] </ref> have shown that Tamassia's algorithm in general constructs better drawings in practice than some other well-known algorithms of [18, 19, 101, 13, 87]. The studies however indicate clearly that Tamassia's algorithm has a high running time in practice.
Reference: [32] <author> G. Di Battista, G. Liotta, M. Strani, and F. Vargiu. </author> <title> Diagram Server. </title> <booktitle> In Advanced Visual Interfaces (Proceedings of AVI '92), volume 36 of World Scientific Series in Computer Science, </booktitle> <pages> pages 415-417, </pages> <year> 1992. </year>
Reference-contexts: Finally, because each angle is a multiple of 90 ffi , orthogonal planar drawings have very nice combinatorial properties leading to several simple algorithms for constructing them. Because of these advantages, many commercial packages, e.g. <ref> [32, 106] </ref>, are available that use orthogonal drawings for displaying graphs. However, it was not previously known whether one can test in polynomial time if a given graph admits a rectilinear planar drawing, i.e., an orthogonal planar drawing with no bends. <p> This is so because we can convert a graph with higher degree into a degree 4 graph by expanding each vertex with more than 4 edges incident on it, into a cycle. Many graph drawing systems are available that follow this approach, e.g., <ref> [32, 106] </ref>. Because of the importance of bend-minimum orthogonal drawings, researchers have 134 studied the problem extensively. We denote the number of vertices in a graph with n. Valiant [109] showed that every degree 4 graph admits a (nonplanar) drawing with at most 4n bends.
Reference: [33] <author> G. Di Battista, G. Liotta, and F. Vargiu. </author> <title> Spirality of orthogonal representations and optimal drawings of series-parallel graphs and 3-planar graphs. </title> <booktitle> In Proc. Workshop Algorithms Data Struct., volume 709 of Lecture Notes in Computer Science, </booktitle> <pages> pages 151-162. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: This problem is known in literature as the rectilinear planarity testing problem. Previously, polynomial time testing-algorithms were known only for special categories of graphs, namely, embedded planar graphs [99], series-parallel graphs <ref> [33] </ref>, and degree-3 graphs [33]. Borrowing from our techniques used for showing the NP-completeness of the upward planarity testing problem, in Chapter 6 we show that the rectilinear planarity testing problem for general graphs is also NP-complete, and hence a polynomial time algorithm is unlikely to exist. <p> This problem is known in literature as the rectilinear planarity testing problem. Previously, polynomial time testing-algorithms were known only for special categories of graphs, namely, embedded planar graphs [99], series-parallel graphs <ref> [33] </ref>, and degree-3 graphs [33]. Borrowing from our techniques used for showing the NP-completeness of the upward planarity testing problem, in Chapter 6 we show that the rectilinear planarity testing problem for general graphs is also NP-complete, and hence a polynomial time algorithm is unlikely to exist. <p> Tamassia [99] gives an O (n 2 log n)-time algorithm that constructs a planar orthogonal drawing with the minimum number of bends for an embedded planar graph. Di Battista, Liotta, and Vargiu <ref> [33] </ref> give polynomial time algorithms for minimizing bends in planar orthogonal drawings of series-parallel and cubic graphs. The latter two results show that rectilinear planarity testing can be done in polynomial time for a fixed embedding or for special classes of graphs. <p> In the second phase, we reduce this undirected flow problem to the rectilinear planarity testing of a special class of digraphs. The latter reduction is interesting in its own and provides new insights on the characterization by flow networks of the angles formed by the edges of orthogonal drawings <ref> [33, 99] </ref>. Most of the results and techniques presented in this chapter can also be found in [57, 59]. The rest of this chapter is organized as follows. Preliminary definitions and results are provided in Section 6.2. In Section 6.3 we describe the reduction from not-all-equal-3-sat to rectilinear planarity testing. <p> They also showed that even approximating the number of bends to within O (n 1* ) of the optimal, for any * &lt; 1 is NP-hard. Di Battista, Liotta and Vargiu <ref> [33] </ref> have given polynomial time algorithms for minimizing bends in planar orthogonal drawings of series-parallel and degree 3 graphs. An embedded planar graph is a planar graph equipped with an embedding. <p> linear programming, and hence has a time-complexity that is a high-degree polynomial in the number of edges and vertices in the graph. 152 * Characterize graphs for which rectilinear planarity testing can be done efficiently. * Notice that rectilinear planarity testing can be done in polynomial time for degree-3 graphs <ref> [33] </ref>.
Reference: [34] <author> G. Di Battista, G. Liotta, and F. Vargiu. </author> <title> Diagram Server. </title> <journal> J. Visual Languages and Computing, </journal> <volume> 6(3), </volume> <year> 1995. </year> <title> (special issue on Graph Visualization, edited by I. </title> <editor> F. Cruz and P. </editor> <publisher> Eades). </publisher>
Reference-contexts: Also, the algorithms are usually decomposable into smaller units called methods, so that one can devise new algorithms using the methods of the existing algorithms <ref> [8, 34] </ref>. Because of these advantages, research in graph drawing has mainly concentrated on devising algorithms based on the algorithmic approach. This thesis also focuses on the algorithmic approach.
Reference: [35] <author> G. Di Battista, W. P. Liu, and I. </author> <title> Rival. Bipartite graphs upward drawings and planarity. </title> <journal> Inform. Process. Lett., </journal> <volume> 36 </volume> <pages> 317-322, </pages> <year> 1990. </year>
Reference-contexts: The upward planarity testing problem, i.e., the problem of testing whether a given directed graph (digraph, in short) admits an upward planar drawing, has intrigued researchers for many years. Polynomial-time algorithms are known for upward planarity testing of triconnected digraphs [7, 9], bipartite digraphs <ref> [35] </ref>, st-digraphs [36, 73], single-source multiple-sink digraphs [64, 10], and outerplanar digraphs [86]. However, despite the effort of many researchers, it was not previously known whether one can test a general digraph for upward planarity in polynomial time. <p> A combinatorial characterization of upward planar digraphs is provided in [36, 73]: namely, a digraph is upward planar if and only if it is a spanning subgraph of a planar st-digraph. This characterization implies that upward planarity testing is in NP. Di Battista, Liu, and Rival <ref> [35] </ref> show that every planar bipartite digraph is upward planar. Papakostas [86] gives a polynomial-time algorithm for upward planarity testing of outerplanar digraphs. Bertolazzi, Di Battista, Liotta, and Mannino [7, 9] give a polynomial-time algorithm for testing upward planarity of triconnected digraphs and of digraphs with a fixed embedding.
Reference: [36] <author> G. Di Battista and R. Tamassia. </author> <title> Algorithms for plane representations of acyclic digraphs. </title> <journal> Theoret. Comput. Sci., </journal> <volume> 61 </volume> <pages> 175-198, </pages> <year> 1988. </year>
Reference-contexts: The upward planarity testing problem, i.e., the problem of testing whether a given directed graph (digraph, in short) admits an upward planar drawing, has intrigued researchers for many years. Polynomial-time algorithms are known for upward planarity testing of triconnected digraphs [7, 9], bipartite digraphs [35], st-digraphs <ref> [36, 73] </ref>, single-source multiple-sink digraphs [64, 10], and outerplanar digraphs [86]. However, despite the effort of many researchers, it was not previously known whether one can test a general digraph for upward planarity in polynomial time. <p> Further results on the interplay between upward planarity and ordered sets are surveyed by Rival [90, 91, 92]. Lempel, Even, and Cederbaum [76] relate the planarity of biconnected undirected graphs to the upward planarity of st-digraphs. A combinatorial characterization of upward planar digraphs is provided in <ref> [36, 73] </ref>: namely, a digraph is upward planar if and only if it is a spanning subgraph of a planar st-digraph. This characterization implies that upward planarity testing is in NP. Di Battista, Liu, and Rival [35] show that every planar bipartite digraph is upward planar. <p> They also give a parallel algorithm that runs in O (log n) time on a CRCW PRAM with n log log n= log n processors. Di Battista, Tamassia, and Tollis <ref> [36, 37] </ref> give algorithms for constructing upward planar drawings of planar st-digraphs, and investigate area bounds and symmetry display. Tamassia and Vitter [104] show that the above drawing algorithms can be efficiently parallelized. Upward planar drawings of series-parallel digraphs are studied in [5, 6].
Reference: [37] <author> G. Di Battista, R. Tamassia, and I. G. Tollis. </author> <title> Area requirement and symmetry display of planar upward drawings. </title> <journal> Discrete Comput. Geom., </journal> <volume> 7 </volume> <pages> 381-401, </pages> <year> 1992. </year>
Reference-contexts: They also give a parallel algorithm that runs in O (log n) time on a CRCW PRAM with n log log n= log n processors. Di Battista, Tamassia, and Tollis <ref> [36, 37] </ref> give algorithms for constructing upward planar drawings of planar st-digraphs, and investigate area bounds and symmetry display. Tamassia and Vitter [104] show that the above drawing algorithms can be efficiently parallelized. Upward planar drawings of series-parallel digraphs are studied in [5, 6]. <p> A typical resolution rule is to require grid drawings, where the vertices and bends of the edges have integer coordinates. Indeed, this consideration recently motivated the re-examination of straight-line drawings of planar directed graphs, because they require exponentially-large area <ref> [37] </ref>, whereas several researchers have recently shown that planar graph drawings require only quadratic area, and that such drawings can be produced in linear time [26, 68, 94]. <p> Sector (G) is computed from sector (G 1 ) and sector (G 2 ) by considering whether G is a series or a parallel composition of G 1 and G 2 . The study of area requirements of drawings of graphs has received a lot of attention (see, e.g., <ref> [6, 37, 53, 58] </ref>) and is motivated by the finite resolution of the current graph drawing technologies and circuit-area optimization criteria of VLSI layouts [12, 75, 109]. 84 Typical resolution rules are requirement of minimum unit distance between vertices, their placement on grid points of a unit-grid etc.
Reference: [38] <author> G. Di Battista and L. Vismara. </author> <title> Angles of planar triangular graphs. </title> <booktitle> In Proc. 25th Annu. ACM Sympos. Theory Comput. (STOC 93), </booktitle> <pages> pages 431-437, </pages> <year> 1993. </year>
Reference-contexts: He also considers polyline drawings (where edges are drawn as polygonal chains), and shows that a degree-d triconnected planar graph admits a planar polyline grid drawing with angular resolution (1=d). Di Battista and Vismara <ref> [38] </ref> provide a characterization of the angles in planar straight-line drawings of maximal planar graphs through a nonlinear system of inequalities. <p> Also see [72] for related results on drawing graphs on a hexagonal grid. Angles have been found to be useful in characterizing planar graphs. In a recent paper <ref> [38] </ref>, Dibattista and Vismara characterize many important constructions such as Delauny drawing, disc packing etc. of a triangulated graph using its angles. The study of angle graphs is also of theoretical interest in itself because they require an extensive use of plane geometry in their analysis. <p> Vijayan also gave some conjectures that relate the planarity of an angle graphs with the planarity of its biconnected components (see Conjectures 1 and 2 of Section 5.2). A characterization of planar angle 83 graphs with triangular faces by a set of non-linear equalities is given in <ref> [38] </ref>. [111] gives an O (n) time algorithm for testing a rectilinear angle graph for planarity and O (n 2 ) time algorithm for constructing a planar drawing if it is planar.
Reference: [39] <author> D. Dolev, F. T. Leighton, and H. Trickey. </author> <title> Planar embedding of planar graphs. </title> <editor> In F. P. Preparata, editor, </editor> <booktitle> Advances in Computing Research, </booktitle> <volume> volume 2, </volume> <pages> pages 147-161. </pages> <publisher> JAI Press, </publisher> <address> Greenwich, Conn., </address> <year> 1985. </year>
Reference-contexts: In a VLSI circuit even though typically many layers are available, some are preferable to others because of better electric properties <ref> [39] </ref>. Our NP-hardness result is important in this regard. 5.2 Planarity Testing of Angle Graphs We start this section by disproving the conjectures given in [110] by providing counterexamples to them. Some definitions first, most of which are from [110].
Reference: [40] <author> P. Eades. </author> <title> A heuristic for graph drawing. </title> <journal> Congr. Numer., </journal> <volume> 42 </volume> <pages> 149-160, </pages> <year> 1984. </year> <month> 156 </month>
Reference-contexts: A grid drawing is a polyline drawing in which each vertex and each bend is assigned integer coordinates. (c) Orthogonal drawing The current graph drawing techniques are, broadly speaking, based on two type of approaches: the algorithmic approach and the declarative approach. The declarative approach (see for example, <ref> [28, 25, 40, 66] </ref>. Also see [30] for a detailed bibliography) allows users to specify constraints such as clustering or aligning a set of vertices etc., so that the drawings constructed satisfy these constraints.
Reference: [41] <author> P. Eades and T. Lin. </author> <title> Algorithmic and declarative approaches to aesthetic layout. </title> <booktitle> In Graph Drawing '93 (Proc. ALCOM Workshop on Graph Drawing), </booktitle> <address> Paris, France, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: A recent trend in the area of graph drawing is towards developing systems which allow the user to specify arbitrary constraints on the positioning of vertices and edges in the drawings. See for example, <ref> [23, 24, 41, 65] </ref>.
Reference: [42] <author> P. Eades, T. Lin, and X. Lin. </author> <title> Two tree drawing conventions. </title> <type> Technical Report 174, </type> <institution> Department of Computer Science, University of Queensland, </institution> <year> 1990. </year> <note> to appear in Comput. Geom. Theory Appl. </note>
Reference-contexts: Trees are very popular data-structures, making appearance in a number of applications. It is therefore no surprise that the problem of drawing trees has been studied quite extensively, and a number of results are available. See for example, <ref> [112, 89, 42, 98, 44, 84, 15, 109] </ref>. Also see [30] for a detailed bibliography. <p> In addition, it should be noted that producing the exact minimization of the area of the drawing of a tree is NP-hard under several drawing conventions <ref> [11, 15, 42] </ref>. Nevertheless, Crescenzi, Di Battista, and Piperno [21, 22] give O (N )-area planar straight-line upward grid drawings of AVL trees. They do not, however, give a general construction for other types of trees.
Reference: [43] <author> P. Eades, T. Lin, and X. Lin. </author> <title> Minimum size h-v drawings. </title> <booktitle> In Advanced Visual Interfaces (Proceedings of AVI '92), volume 36 of World Scientific Series in Computer Science, </booktitle> <pages> pages 386-394, </pages> <year> 1992. </year>
Reference-contexts: Hence, hv-drawings are a special case of upward planar straight-line drawings. Eades, Lin, and Lin <ref> [43] </ref> show how to construct in O (N p N log N ) time a minimum-area hv-drawing of an N -node binary tree. However, they do not provide specific bounds on the area requirement of hv-drawings.
Reference: [44] <author> P. D. Eades. </author> <title> Drawing free trees. </title> <journal> Bulletin of the Institute for Combinatorics and its Applications, </journal> <volume> 5 </volume> <pages> 10-36, </pages> <year> 1992. </year>
Reference-contexts: Trees are very popular data-structures, making appearance in a number of applications. It is therefore no surprise that the problem of drawing trees has been studied quite extensively, and a number of results are available. See for example, <ref> [112, 89, 42, 98, 44, 84, 15, 109] </ref>. Also see [30] for a detailed bibliography.
Reference: [45] <author> S. Even and G. Granot. </author> <title> Rectilinear planar drawings with few bends in each edge. </title> <type> Technical Report 797, </type> <institution> Computer Science Dept., Technion, </institution> <year> 1994. </year>
Reference-contexts: Vijayan and Wigderson [111] study structural properties of rectilinear planar drawings. From their results, the membership of rectilinear planarity testing in NP is easy to establish. Storer [97], Tamassia and Tollis [102], Liu, Marchioro, Morgana, Petreschi, and Simeone [79, 80, 81, 78], Even and Granot <ref> [45] </ref>, and Biedl and Kant [68, 13] give various techniques for constructing planar orthogonal drawings with O (n) bends. Tamassia [99] gives an O (n 2 log n)-time algorithm that constructs a planar orthogonal drawing with the minimum number of bends for an embedded planar graph. <p> They also show that each degree 3 planar graph admits a planar orthogonal drawing with at most 0:5n bends and area 0:25n 2 . Even and Granot <ref> [45] </ref> show that each degree 4 planar graph admits a planar orthogonal drawing with O (n) bends such that each edge has at most 3 bends. Garg and Tamassia [59] showed that given a degree 4 planar graph G, it is NP-hard to construct a bend-minimum drawing of G.
Reference: [46] <author> L.R. Ford and D.R. Fulkerson. </author> <title> A primal-dual algorithm for the capacitated hitch-cock problem. </title> <journal> Naval Research Logistics Quarterly, </journal> <volume> 4 </volume> <pages> 47-54, </pages> <year> 1957. </year>
Reference-contexts: Algorithm PD was developed first by Ford and Fulkerson <ref> [46, 47] </ref>. This algorithm computes f in stages, where in each stage it computes a maximum flow in the admissible network of N (with respect to the flow already computed). See [1, 46, 47] for details. <p> Algorithm PD was developed first by Ford and Fulkerson [46, 47]. This algorithm computes f in stages, where in each stage it computes a maximum flow in the admissible network of N (with respect to the flow already computed). See <ref> [1, 46, 47] </ref> for details.
Reference: [47] <author> L.R. Ford and D.R. Fulkerson. </author> <title> Flows in Networks. </title> <publisher> Princeton University Press, </publisher> <address> Princeton, NJ, </address> <year> 1962. </year>
Reference-contexts: Algorithm PD was developed first by Ford and Fulkerson <ref> [46, 47] </ref>. This algorithm computes f in stages, where in each stage it computes a maximum flow in the admissible network of N (with respect to the flow already computed). See [1, 46, 47] for details. <p> Algorithm PD was developed first by Ford and Fulkerson [46, 47]. This algorithm computes f in stages, where in each stage it computes a maximum flow in the admissible network of N (with respect to the flow already computed). See <ref> [1, 46, 47] </ref> for details.
Reference: [48] <author> M. Formann, T. Hagerup, J. Haralambides, M. Kaufmann, F. T. Leighton, A. Simvonis, E. Welzl, and G. Woeginger. </author> <title> Drawing graphs in the plane with high resolution. </title> <journal> SIAM J. Comput., </journal> <volume> 22 </volume> <pages> 1035-1052, </pages> <year> 1993. </year>
Reference-contexts: A large angular resolution is also important in wireless communication where it is difficult to receive and send signals at a tight angle <ref> [48] </ref>. Degree of a graph is equal to the maximum number of edges incident on a vertex of the graph. Formann, Hagerup, Haralambides, Kaufmann, Leighton, Simvonis, Welzl, and Woeginger have shown in [48] that every degree-d planar graph admits a straight-line (nonplanar) drawing with angular resolution (1=d). <p> also important in wireless communication where it is difficult to receive and send signals at a tight angle <ref> [48] </ref>. Degree of a graph is equal to the maximum number of edges incident on a vertex of the graph. Formann, Hagerup, Haralambides, Kaufmann, Leighton, Simvonis, Welzl, and Woeginger have shown in [48] that every degree-d planar graph admits a straight-line (nonplanar) drawing with angular resolution (1=d). <p> Previous results on the angular resolution of (non upward) drawings of graphs appear in <ref> [48, 82] </ref>. 46 Chapter 4 Angular Resolution 4.1 Introduction Coping with the finite resolution of display devices and of the human eye is a fundamental problem in graph drawing. Namely, in visualization applications, it is important to construct drawings of graphs that avoid placing vertices and edges too close. <p> Maximizing angles is also important in other applications, such as optical communication where it is very difficult to transmit and receive signal at a very tight angle <ref> [48] </ref>. The notion of large angles between consecutive edges incident on a vertex is formalized by defining angular resolution of a graph [48, 58, 83]. <p> Maximizing angles is also important in other applications, such as optical communication where it is very difficult to transmit and receive signal at a very tight angle [48]. The notion of large angles between consecutive edges incident on a vertex is formalized by defining angular resolution of a graph <ref> [48, 58, 83] </ref>. The angular resolution of a straight line drawing of a graph is the smallest angle in the drawing between any two consecutive edges incident on the same vertex. For example, the angular resolution of the drawing shown in Fig. 5.1 (b) is 30 ffi .
Reference: [49] <author> M. Formann, T. Hagerup, J. Haralambides, M. Kaufmann, F. T. Leighton, A. Simvonis, E. Welzl, and G. Woeginger. </author> <title> Drawing graphs in the plane with high resolution. </title> <booktitle> In Proc. 31th Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 86-95, </pages> <year> 1990. </year>
Reference-contexts: Besides visualization applications (see, e.g., [29]), constructing drawing with large angular resolution is important in the design of wireless communications networks (see, e.g., [2]). The study of the angular resolution of drawings has attracted considerable interest in the last years. Formann, Hagerup, Haralambides, Kaufmann, Leighton, Simvonis, Welzl, and Woeginger <ref> [49] </ref> were the first to study the angular resolution of (generally nonplanar) straight-line drawings of various classes of graphs.
Reference: [50] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. </title> <editor> W. H. </editor> <publisher> Freeman, </publisher> <address> New York, NY, </address> <year> 1979. </year>
Reference-contexts: The reduction from not-all-equal-3-sat to the auxiliary flow problem is given in Section 2.3. Section 2.4 describes the reductions from the auxiliary flow problem to upward planarity testing. Conclusive remarks are given in Section 2.5. 2.2 Preliminaries We assume standard concepts and definitions on NP-completeness <ref> [50] </ref>. <p> We disprove the conjectures of [110] by providing counter examples to them. We then show that the problem of testing a consistent angle graph for planarity is NP-hard and hence unlikely to have an efficient algorithm. Our proof uses a reduction from the well-known 3-SAT problem <ref> [50] </ref> to the planarity testing problem, i.e., we show that given an instance T of the 3-SAT problem, we can construct in polynomial time an angle graph A (T) such that T admits a satisfying truth-assignment if and only if A (T) is planar. <p> Therefore, A does not admit any planar drawing. 2 5.2.1 NP-Hardness of Planarity Testing In this section, we show that the problem of testing whether a given consistent angle graph admits a planar drawing or not, is NP-hard. We reduce a well-known NP-hard problem, namely, the 3-SAT problem <ref> [50] </ref> given below, to the planarity testing problem: given a set X = fx 1 ; x 2 ; : : : ; x n g of variables and a set C = fc 1 ; c 2 ; : : :; c m g of clauses over X such that <p> In fact, we show something stronger, that even if we consider only consistent biplanar rectilinear angle graphs, the problem of testing them for biplanarity is NP-hard. We prove the NP-hardness of the biplanarity testing problem by reducing a well-known NP-hard problem, namely, the 3-SAT problem <ref> [50] </ref> given below, to the planarity testing problem: given a set X = fx 1 ; x 2 ; : : : ; x n g of variables and a set C = fc 1 ; c 2 ; : : :; c m g of clauses over X such that <p> The rest of this chapter is organized as follows. Preliminary definitions and results are provided in Section 6.2. In Section 6.3 we describe the reduction from not-all-equal-3-sat to rectilinear planarity testing. Conclusive remarks are given in Section 6.4. 6.2 Preliminaries We assume standard concepts and definitions on NP-completeness <ref> [50] </ref>.
Reference: [51] <author> A. Garg. </author> <title> On drawing angle graphs. </title> <editor> In R. Tamassia and I. G. Tollis, editors, </editor> <booktitle> Graph Drawing (Proc. GD '94), volume 894 of Lecture Notes in Computer Science, </booktitle> <pages> pages 84-95. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: A study of angle graphs can provide an invaluable insight into the use of plane geometry for graph drawing algorithms and stimulate research in this relatively unexplored area. Most of the results and techniques presented in this chapter can also be found in <ref> [51] </ref>. 5.1.1 Some Definitions Let A be an angle graph. The graph isomorphic to A if we drop the angle constraints is called the underlying graph of A. Let H be the underlying graph of A.
Reference: [52] <author> A. Garg, M. T. Goodrich, and R. Tamassia. </author> <title> Area-optimal upward tree drawings. Computational Geometry, </title> <journal> Theory and Appln. </journal> <note> To appear. </note>
Reference-contexts: We summarize the previous and current bounds on planar grid tree drawings in Table 3.1. Most of the results and techniques presented in this chapter can also be found in <ref> [53, 52] </ref>. 3.1 Preliminaries In this section we give definitions that will be used throughout the chapter.
Reference: [53] <author> A. Garg, M. T. Goodrich, and R. Tamassia. </author> <title> Area-efficient upward tree drawings. </title> <booktitle> In Proc. 9th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 359-368, </pages> <year> 1993. </year>
Reference-contexts: We summarize the previous and current bounds on planar grid tree drawings in Table 3.1. Most of the results and techniques presented in this chapter can also be found in <ref> [53, 52] </ref>. 3.1 Preliminaries In this section we give definitions that will be used throughout the chapter. <p> Sector (G) is computed from sector (G 1 ) and sector (G 2 ) by considering whether G is a series or a parallel composition of G 1 and G 2 . The study of area requirements of drawings of graphs has received a lot of attention (see, e.g., <ref> [6, 37, 53, 58] </ref>) and is motivated by the finite resolution of the current graph drawing technologies and circuit-area optimization criteria of VLSI layouts [12, 75, 109]. 84 Typical resolution rules are requirement of minimum unit distance between vertices, their placement on grid points of a unit-grid etc.
Reference: [54] <author> A. Garg and R. Tamassia. </author> <title> Upward planarity testing. Order. </title> <note> To appear. </note>
Reference-contexts: We can view upward and rectilinear planarity as derived from straight-line planarity by adding further constraints, which make the problem become apparently much more difficult. Previous results on upward planarity testing are summarized below (also see <ref> [54] </ref> for an extensive survey). In the rest of this section, we denote with n the number of vertices of the graph being considered. Combinatorial results on upward planarity of covering digraphs of lattices were first given in [74, 88].
Reference: [55] <author> A. Garg and R. Tamassia. </author> <title> Angular resolution of planar drawings. </title> <type> Technical report, </type> <institution> Brown Univ., Dept. of Computer Science, </institution> <year> 1993. </year> <month> 157 </month>
Reference-contexts: We believe that our results will stimulate further research in this direction. Most of the results and techniques presented in this chapter can also be found in <ref> [55, 58] </ref>. The rest of this chapter is organized as follows. Section 4.2 provides basic definitions. The upper bound on the angular resolution is shown in Section 4.3. Section 4.4 contains the tradeoff between area and angular resolution.
Reference: [56] <author> A. Garg and R. Tamassia. </author> <title> Advances in graph drawing. </title> <booktitle> In Algorithms and Com--plexity (Proc. CIAC' 94), volume 778 of Lecture Notes in Computer Science, </booktitle> <pages> pages 12-21. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: A current "hot" topic for research is to devise declarative approach based techniques with improved efficiency, more amenability to performance-analysis etc. (see for example, <ref> [23, 56] </ref>). The algorithmic approach takes a more pragmatic path. This approach emphasizes on developing algorithms for constructing drawings that satisfy only a fixed set of aesthetic criteria. These algorithms first formalize the aesthetic criteria under consideration as optimization goals, and then construct a drawing optimizing these goals.
Reference: [57] <author> A. Garg and R. Tamassia. </author> <title> On the computational complexity of upward and rectilinear planarity testing. </title> <type> Report CS-94-10, </type> <institution> Comput. Sci. Dept., Brown Univ., Providence, RI, </institution> <year> 1994. </year>
Reference-contexts: The 8 latter reduction is interesting in its own and provides new insights on the characteriza-tion by flow networks of the angles formed by the edges of upward planar drawings [7, 9]. Most of the results and techniques presented in this chapter can also be found in <ref> [57, 59] </ref>. The rest of this chapter is organized as follows. Preliminary definitions and results are provided in Section 2.2. The reduction from not-all-equal-3-sat to the auxiliary flow problem is given in Section 2.3. Section 2.4 describes the reductions from the auxiliary flow problem to upward planarity testing. <p> The latter reduction is interesting in its own and provides new insights on the characterization by flow networks of the angles formed by the edges of orthogonal drawings [33, 99]. Most of the results and techniques presented in this chapter can also be found in <ref> [57, 59] </ref>. The rest of this chapter is organized as follows. Preliminary definitions and results are provided in Section 6.2. In Section 6.3 we describe the reduction from not-all-equal-3-sat to rectilinear planarity testing.
Reference: [58] <author> A. Garg and R. Tamassia. </author> <title> Planar drawings and angular resolution: Algorithms and bounds. </title> <booktitle> In Proc. 2nd Annu. European Sympos. Algorithms (ESA '94), volume 855 of Lecture Notes in Computer Science, </booktitle> <pages> pages 12-23. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: They tend to give more aesthetically pleasing drawings in general [31, 62]. Minimizing bends is also important in VLSI layouts where bends act as "hot points" because of their higher current density. In view of the trade-off between the angular resolution of a drawing and its area-requirement <ref> [58, 83] </ref>, these drawings offer a good compromise: they have large angles (multiples of 90 ffi ), small area, and few bends (every degree 4 graph admits am orthogonal drawing with O (n 2 ) area and O (n) bends [109, 75]). <p> We believe that our results will stimulate further research in this direction. Most of the results and techniques presented in this chapter can also be found in <ref> [55, 58] </ref>. The rest of this chapter is organized as follows. Section 4.2 provides basic definitions. The upper bound on the angular resolution is shown in Section 4.3. Section 4.4 contains the tradeoff between area and angular resolution. <p> Maximizing angles is also important in other applications, such as optical communication where it is very difficult to transmit and receive signal at a very tight angle [48]. The notion of large angles between consecutive edges incident on a vertex is formalized by defining angular resolution of a graph <ref> [48, 58, 83] </ref>. The angular resolution of a straight line drawing of a graph is the smallest angle in the drawing between any two consecutive edges incident on the same vertex. For example, the angular resolution of the drawing shown in Fig. 5.1 (b) is 30 ffi . <p> The study of angle graphs is also of theoretical interest in itself because they require an extensive use of plane geometry in their analysis. Most of the known graph drawing algorithms use graph theoretic concepts such as orientation, coloring, flow etc. Recent results <ref> [58] </ref> however shows that plane geometry is a useful tool by successfully applying geometric techniques in deriving a number of results on planar drawings with large angular resolution. <p> Sector (G) is computed from sector (G 1 ) and sector (G 2 ) by considering whether G is a series or a parallel composition of G 1 and G 2 . The study of area requirements of drawings of graphs has received a lot of attention (see, e.g., <ref> [6, 37, 53, 58] </ref>) and is motivated by the finite resolution of the current graph drawing technologies and circuit-area optimization criteria of VLSI layouts [12, 75, 109]. 84 Typical resolution rules are requirement of minimum unit distance between vertices, their placement on grid points of a unit-grid etc. <p> Studies have shown that while some graphs do not admit any planar straight-line drawing (edges drawn as straight-lines) with optimal angular resolution, there are others who can be drawn with optimal angular resolution but only at the cost of having a large area <ref> [58, 83] </ref>.
Reference: [59] <author> A. Garg and R. Tamassia. </author> <title> On the computational complexity of upward and rectilinear planarity testing. </title> <editor> In R. Tamassia and I. G. Tollis, editors, </editor> <booktitle> Graph Drawing (Proc. GD '94), volume 894 of Lecture Notes in Computer Science, </booktitle> <pages> pages 286-297. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: The 8 latter reduction is interesting in its own and provides new insights on the characteriza-tion by flow networks of the angles formed by the edges of upward planar drawings [7, 9]. Most of the results and techniques presented in this chapter can also be found in <ref> [57, 59] </ref>. The rest of this chapter is organized as follows. Preliminary definitions and results are provided in Section 2.2. The reduction from not-all-equal-3-sat to the auxiliary flow problem is given in Section 2.3. Section 2.4 describes the reductions from the auxiliary flow problem to upward planarity testing. <p> The latter reduction is interesting in its own and provides new insights on the characterization by flow networks of the angles formed by the edges of orthogonal drawings [33, 99]. Most of the results and techniques presented in this chapter can also be found in <ref> [57, 59] </ref>. The rest of this chapter is organized as follows. Preliminary definitions and results are provided in Section 6.2. In Section 6.3 we describe the reduction from not-all-equal-3-sat to rectilinear planarity testing. <p> Even and Granot [45] show that each degree 4 planar graph admits a planar orthogonal drawing with O (n) bends such that each edge has at most 3 bends. Garg and Tamassia <ref> [59] </ref> showed that given a degree 4 planar graph G, it is NP-hard to construct a bend-minimum drawing of G. They also showed that even approximating the number of bends to within O (n 1* ) of the optimal, for any * &lt; 1 is NP-hard.
Reference: [60] <author> L. J. Guibas, J. Hershberger, D. Leven, M. Sharir, and R. E. Tarjan. </author> <title> Linear-time algorithms for visibility and shortest path problems inside triangulated simple polygons. </title> <journal> Algorithmica, </journal> <volume> 2 </volume> <pages> 209-233, </pages> <year> 1987. </year>
Reference-contexts: Tree S has 2N 1 nodes, height at most log 3=2 N , and can be constructed in O (N ) time (e.g., see Guibas et al. <ref> [60] </ref>). The algorithm for constructing a planar orthogonal upward grid drawing of an N - node binary tree T is outlined below (see Fig. 3.7): 1. Construct the separator tree S of T . 2.
Reference: [61] <author> M. Himsolt. </author> <title> Comparing and evaluating layout algorithms within graphed. </title> <type> Manuscript, </type> <institution> Fakultat fur Mathematik und Informatik, Univ. Passau, </institution> <year> 1994. </year>
Reference-contexts: Drawings of rectilinear graphs also find application in a variety of areas such as VLSI design [75, 109], architectural floor plan layout [77] and data base system design [4]. In fact a recent experimental study <ref> [62, 61] </ref> has shown that Tamassia's bend-minimization algorithm gives a more aesthetic drawing in practice then some other well known algorithms [18, 27, 19, 113].
Reference: [62] <author> M. Himsolt. </author> <title> Comparing and evaluating layout algorithms within GraphEd. </title> <journal> J. Visual Languages and Computing, </journal> <volume> 6(3), </volume> <year> 1995. </year> <title> (special issue on Graph Visualization, edited by I. </title> <editor> F. Cruz and P. </editor> <publisher> Eades). </publisher>
Reference-contexts: In Chapters 6 and 7, we study the problem of constructing orthogonal planar drawings with small number of bends. Such drawings are attractive for many reasons. They tend to give more aesthetically pleasing drawings in general <ref> [31, 62] </ref>. Minimizing bends is also important in VLSI layouts where bends act as "hot points" because of their higher current density. <p> This heuristic is very simple and also seems to give good drawings in practice <ref> [31, 62] </ref>. Central to the success of this heuristic is minimizing the number of bends in Step 2. Tamassia has given a very famous algorithm in [99] that constructs a bend-minimum planar orthogonal drawing of an embedded planar graph. <p> This algorithm however has a time-complexity of O (n 2 ), where n is the number of vertices in the graph. Experimental studies <ref> [31, 62] </ref> have also commented on its high running time in real-life situations. In Chapter 7, we present a new algorithm with time-complexity O (n 1:75 log n) for constructing a bend-minimum planar orthogonal drawing of an n-vertex embedded planar graph. <p> Drawings of rectilinear graphs also find application in a variety of areas such as VLSI design [75, 109], architectural floor plan layout [77] and data base system design [4]. In fact a recent experimental study <ref> [62, 61] </ref> has shown that Tamassia's bend-minimization algorithm gives a more aesthetic drawing in practice then some other well known algorithms [18, 27, 19, 113]. <p> A planar drawing is one with no edge-crossings. A planar graph is one which admits a planar drawing. The desire to construct orthogonal drawings with small number of bends is motivated by many reasons. Drawings with fewer bends tend to give more aesthetically pleasing drawings <ref> [31, 62] </ref>. <p> Using Dial's implementation for the priority queue used in the Dijkstra's shortest-path algorithm [1], Tamassia's algorithm can be implemented with O (n 2 ) time-complexity. Experimental studies <ref> [31, 62] </ref> have shown that Tamassia's algorithm in general constructs better drawings in practice than some other well-known algorithms of [18, 19, 101, 13, 87]. The studies however indicate clearly that Tamassia's algorithm has a high running time in practice.
Reference: [63] <author> J. Hopcroft and R. E. Tarjan. </author> <title> Efficient planarity testing. </title> <journal> J. ACM, </journal> <volume> 21(4) </volume> <pages> 549-568, </pages> <year> 1974. </year>
Reference-contexts: Hence, given a consistent bilayered angle graph, testing whether it is biplanar or not, is NP-hard. 2 Following corollary is immediate Corollary 8 The problem of testing whether a multilayered angle graph is multiplanar is NP-hard. 123 5.7 Discussion A (general) graph can be tested for planarity in linear time <ref> [14, 63] </ref>. Similarly, the equivalent multiplanarity problem for general graphs is also solvable in linear time: A multilayered (general) graph is multiplanar if and only if each subgraph consisting of the edges assigned to the same layer is planar [110].
Reference: [64] <author> M. D. Hutton and A. Lubiw. </author> <title> Upward planar drawing of single source acyclic digraphs. </title> <booktitle> In Proc. 2nd ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 203-211, </pages> <year> 1991. </year>
Reference-contexts: Polynomial-time algorithms are known for upward planarity testing of triconnected digraphs [7, 9], bipartite digraphs [35], st-digraphs [36, 73], single-source multiple-sink digraphs <ref> [64, 10] </ref>, and outerplanar digraphs [86]. However, despite the effort of many researchers, it was not previously known whether one can test a general digraph for upward planarity in polynomial time. <p> Bertolazzi, Di Battista, Liotta, and Mannino [7, 9] give a polynomial-time algorithm for testing upward planarity of triconnected digraphs and of digraphs with a fixed embedding. Concerning single-source digraphs, Thomassen [107] characterizes upward planarity in terms of forbidden circuits. Hutton and Lubiw <ref> [64] </ref> combine Thomassen's characterization with a decomposition scheme to test upward planarity of a single-source digraph in O (n 2 ) time. Bertolazzi, Di Battista, Mannino, and Tamassia [10] show that upward planarity testing of a single-source digraph can be done optimally in O (n) time.
Reference: [65] <author> T. Kamada. </author> <title> On Visualization of Abstract Objects and Relations. </title> <type> PhD thesis, </type> <institution> Department of Information Science, University of Tokyo, </institution> <year> 1988. </year>
Reference-contexts: A recent trend in the area of graph drawing is towards developing systems which allow the user to specify arbitrary constraints on the positioning of vertices and edges in the drawings. See for example, <ref> [23, 24, 41, 65] </ref>.
Reference: [66] <author> T. Kamada. </author> <title> Visualizing Abstract Objects and Relations. </title> <booktitle> World Scientific Series in Computer Science, </booktitle> <year> 1989. </year>
Reference-contexts: A grid drawing is a polyline drawing in which each vertex and each bend is assigned integer coordinates. (c) Orthogonal drawing The current graph drawing techniques are, broadly speaking, based on two type of approaches: the algorithmic approach and the declarative approach. The declarative approach (see for example, <ref> [28, 25, 40, 66] </ref>. Also see [30] for a detailed bibliography) allows users to specify constraints such as clustering or aligning a set of vertices etc., so that the drawings constructed satisfy these constraints.
Reference: [67] <author> G. Kant. </author> <title> Drawing planar graphs using the canonical ordering. </title> <journal> Algorithmica. </journal> <note> (special issue on Graph Drawing, </note> <author> edited by G. Di Battista and R. Tamassia, </author> <note> to appear). </note>
Reference-contexts: Tamassia, Tollis and Vitter [103] gave a parallel algorithm and lower bounds for the problem. Kant <ref> [67, 69] </ref> gives linear-time algorithms for constructing planar orthogonal drawings of triconnected degree 4 planar graphs with at most 1:5n + 3 bends and area at most n 2 , and of triconnected degree 3 planar graphs with at most 0:5n + 1 bends and area at most n 2 =4.
Reference: [68] <author> G. Kant. </author> <title> Drawing planar graphs using the lmc-ordering. </title> <booktitle> In Proc. 33th Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 101-110, </pages> <year> 1992. </year>
Reference-contexts: Using the NP-hardness result, we also show that given a triconnected planar graph, it is NP-hard to construct a planar straight-line drawing of the graph with maximum angular resolution, extending a similar NP-hardness result of <ref> [69, 68] </ref> that holds for biconnected planar graphs. This result also demonstrates the benefits of studying drawings of angle graphs. A multilayered angle graph is one whose edges are assigned to a set of layers available. <p> Indeed, this consideration recently motivated the re-examination of straight-line drawings of planar directed graphs, because they require exponentially-large area [37], whereas several researchers have recently shown that planar graph drawings require only quadratic area, and that such drawings can be produced in linear time <ref> [26, 68, 94] </ref>. Moreover, some very nice work by Kant [68] shows that a number of other aesthetic criteria (such as convex faces) can be satisfied for a planar drawing while still keeping the area quadratic. <p> Moreover, some very nice work by Kant <ref> [68] </ref> shows that a number of other aesthetic criteria (such as convex faces) can be satisfied for a planar drawing while still keeping the area quadratic. In this chapter we consider the problem of constructing area-efficient upward planar grid drawings of rooted trees. <p> This leads them to conjecture that the trivial (1=d) lower bound on the angular resolution may be achievable for planar straight-line drawings. Kant <ref> [68, 69] </ref> shows that testing whether a biconnected planar graph admits a planar straight-line drawing with angular resolution greater than or equal to a given constant 47 is NP-hard, thus providing further motivation to the study of asymptotic bounds. <p> Our result strengthens a previous result of Kant <ref> [68] </ref> in which he has shown that determining whether a biconnected planar graph has a planar straight-line drawing with angular resolution at least ff is NP-hard. <p> G (T) is constructed from H (T) by adding graphs called fans to it. fans are described by Kant <ref> [68, 69] </ref>. Fan F 6 consisting of 6 vertices is shown in Fig. 5.15 (a). <p> From their results, the membership of rectilinear planarity testing in NP is easy to establish. Storer [97], Tamassia and Tollis [102], Liu, Marchioro, Morgana, Petreschi, and Simeone [79, 80, 81, 78], Even and Granot [45], and Biedl and Kant <ref> [68, 13] </ref> give various techniques for constructing planar orthogonal drawings with O (n) bends. Tamassia [99] gives an O (n 2 log n)-time algorithm that constructs a planar orthogonal drawing with the minimum number of bends for an embedded planar graph.
Reference: [69] <author> G. Kant. </author> <title> Algorithms for Drawing Planar Graphs. </title> <type> PhD thesis, </type> <institution> Dept. Comput. Sci., Univ. </institution> <address> Utrecht, Utrecht, Netherlands, </address> <year> 1993. </year> <month> 158 </month>
Reference-contexts: Using the NP-hardness result, we also show that given a triconnected planar graph, it is NP-hard to construct a planar straight-line drawing of the graph with maximum angular resolution, extending a similar NP-hardness result of <ref> [69, 68] </ref> that holds for biconnected planar graphs. This result also demonstrates the benefits of studying drawings of angle graphs. A multilayered angle graph is one whose edges are assigned to a set of layers available. <p> This leads them to conjecture that the trivial (1=d) lower bound on the angular resolution may be achievable for planar straight-line drawings. Kant <ref> [68, 69] </ref> shows that testing whether a biconnected planar graph admits a planar straight-line drawing with angular resolution greater than or equal to a given constant 47 is NP-hard, thus providing further motivation to the study of asymptotic bounds. <p> Previously, only the trivial O (1=d) bound was known, and determining whether it is achievable was posed as an open problem in <ref> [83, 69] </ref>. In Section 4.4, we show a continuous trade-off between the area and the angular resolution of planar straight-line drawings. <p> G (T) is constructed from H (T) by adding graphs called fans to it. fans are described by Kant <ref> [68, 69] </ref>. Fan F 6 consisting of 6 vertices is shown in Fig. 5.15 (a). <p> Tamassia, Tollis and Vitter [103] gave a parallel algorithm and lower bounds for the problem. Kant <ref> [67, 69] </ref> gives linear-time algorithms for constructing planar orthogonal drawings of triconnected degree 4 planar graphs with at most 1:5n + 3 bends and area at most n 2 , and of triconnected degree 3 planar graphs with at most 0:5n + 1 bends and area at most n 2 =4.
Reference: [70] <author> G. Kant. </author> <title> A more compact visibility representation. </title> <booktitle> In Proc. 19th Internat. </booktitle> <institution> Work--shop Graph-Theoret. Concepts Comput. Sci. (WG'93), </institution> <year> 1993. </year>
Reference: [71] <author> G. Kant, G. Liotta, R. Tamassia, and I. Tollis. </author> <title> Area requirement of visibility representations of trees. </title> <booktitle> In Proc. 5th Canad. Conf. Comput. Geom., </booktitle> <pages> pages 192-197, </pages> <address> Waterloo, Canada, </address> <year> 1993. </year>
Reference-contexts: However, they do not provide specific bounds on the area requirement of hv-drawings. Related results on the area requirement of visibility representations of trees are given in <ref> [71] </ref>. 3.0.2 Our Results We show that, for any rooted bounded-degree tree T with N nodes, one can construct a planar upward grid drawing of T with O (N ) area in O (N ) time, and that such drawing can have width O (N ff ), for any prespecified constant
Reference: [72] <author> Goos Kant. </author> <title> Hexagonal grid drawings. </title> <booktitle> In Proc. 18th Internat. Workshop Graph-Theoret. </booktitle> <institution> Concepts Comput. Sci., </institution> <note> page ??, 1992. </note>
Reference-contexts: For example we use our result that testing an angle graph for planarity is NP-hard, to show that, given a triconnected planar graph G and an angle ff, determining whether G admits a planar straight line drawing with angular resolution at least ff is NP-hard. Also see <ref> [72] </ref> for related results on drawing graphs on a hexagonal grid. Angles have been found to be useful in characterizing planar graphs. In a recent paper [38], Dibattista and Vismara characterize many important constructions such as Delauny drawing, disc packing etc. of a triangulated graph using its angles.
Reference: [73] <author> D. Kelly. </author> <title> Fundamentals of planar ordered sets. </title> <journal> Discrete Math., </journal> <volume> 63 </volume> <pages> 197-216, </pages> <year> 1987. </year>
Reference-contexts: The upward planarity testing problem, i.e., the problem of testing whether a given directed graph (digraph, in short) admits an upward planar drawing, has intrigued researchers for many years. Polynomial-time algorithms are known for upward planarity testing of triconnected digraphs [7, 9], bipartite digraphs [35], st-digraphs <ref> [36, 73] </ref>, single-source multiple-sink digraphs [64, 10], and outerplanar digraphs [86]. However, despite the effort of many researchers, it was not previously known whether one can test a general digraph for upward planarity in polynomial time. <p> Further results on the interplay between upward planarity and ordered sets are surveyed by Rival [90, 91, 92]. Lempel, Even, and Cederbaum [76] relate the planarity of biconnected undirected graphs to the upward planarity of st-digraphs. A combinatorial characterization of upward planar digraphs is provided in <ref> [36, 73] </ref>: namely, a digraph is upward planar if and only if it is a spanning subgraph of a planar st-digraph. This characterization implies that upward planarity testing is in NP. Di Battista, Liu, and Rival [35] show that every planar bipartite digraph is upward planar.
Reference: [74] <author> D. Kelly and I. </author> <title> Rival. Planar lattices. </title> <journal> Canad. J. Math., </journal> <volume> 27(3) </volume> <pages> 636-665, </pages> <year> 1975. </year>
Reference-contexts: Previous results on upward planarity testing are summarized below (also see [54] for an extensive survey). In the rest of this section, we denote with n the number of vertices of the graph being considered. Combinatorial results on upward planarity of covering digraphs of lattices were first given in <ref> [74, 88] </ref>. Further results on the interplay between upward planarity and ordered sets are surveyed by Rival [90, 91, 92]. Lempel, Even, and Cederbaum [76] relate the planarity of biconnected undirected graphs to the upward planarity of st-digraphs.
Reference: [75] <author> C. E. Leiserson. </author> <title> Area-efficient graph layouts (for VLSI). </title> <booktitle> In Proc. 21st Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 270-281, </pages> <year> 1980. </year>
Reference-contexts: between the angular resolution of a drawing and its area-requirement [58, 83], these drawings offer a good compromise: they have large angles (multiples of 90 ffi ), small area, and few bends (every degree 4 graph admits am orthogonal drawing with O (n 2 ) area and O (n) bends <ref> [109, 75] </ref>). Finally, because each angle is a multiple of 90 ffi , orthogonal planar drawings have very nice combinatorial properties leading to several simple algorithms for constructing them. Because of these advantages, many commercial packages, e.g. [32, 106], are available that use orthogonal drawings for displaying graphs. <p> This is motivated by the finite resolution of all of our current technologies for rendering a drawing, and also by circuit-area optimization criteria in VLSI layout <ref> [12, 75, 109] </ref>. In the following, we assume the existence of a resolution rule that implies a finite minimum area for the drawing of any graph. A typical resolution rule is to require grid drawings, where the vertices and bends of the edges have integer coordinates. <p> The difficulty is that most of the known techniques for constructing planar upward grid drawings of trees require (N 2 ) area in the worst case [89, 98]. 3.0.1 Previous Work If we relax the upward requirement, however, then, as independently shown by Leis-erson <ref> [75] </ref> and Valiant [109], one can construct an O (N )-area planar orthogonal grid drawing of an N -node tree T , where the nodes are placed at integer grid points and the edges follow paths of the grid. <p> (N log N ) [21] Straight-Line Upward degree O (n ffi ), fi (N ) (x 3.2.2) Polyline ffi &lt; 1 Upward Ordered degree O (1) fi (N log N ) (x 3.2.3) Polyline Leaves-on-Hull binary fi (N log N ) [16] Orthogonal Non-Upward degree O (1) fi (N ) <ref> [75, 109] </ref> Orthogonal Upward binary fi (N log log N ) (x 3.3) Orthogonal Table 3.1: Area-requirements for various types of planar grid drawings of a rooted tree with N nodes. because they improve the readability of the drawing, and, in the context of VLSI layouts, they simplify the design process <p> 109] Orthogonal Upward binary fi (N log log N ) (x 3.3) Orthogonal Table 3.1: Area-requirements for various types of planar grid drawings of a rooted tree with N nodes. because they improve the readability of the drawing, and, in the context of VLSI layouts, they simplify the design process <ref> [12, 75, 109] </ref>. An upward drawing of a directed graph is such that every edge is a curve monotonically nondecreasing in the vertical direction (when traversed along the direction of the edge). <p> Similarly the algorithm by Tamassia and Tollis [101] that converts a visibility representation of a graph into a rectilinear planar drawing uses an orthogonal representation at an intermediate stage. Drawings of rectilinear graphs also find application in a variety of areas such as VLSI design <ref> [75, 109] </ref>, architectural floor plan layout [77] and data base system design [4]. In fact a recent experimental study [62, 61] has shown that Tamassia's bend-minimization algorithm gives a more aesthetic drawing in practice then some other well known algorithms [18, 27, 19, 113]. <p> The study of area requirements of drawings of graphs has received a lot of attention (see, e.g., [6, 37, 53, 58]) and is motivated by the finite resolution of the current graph drawing technologies and circuit-area optimization criteria of VLSI layouts <ref> [12, 75, 109] </ref>. 84 Typical resolution rules are requirement of minimum unit distance between vertices, their placement on grid points of a unit-grid etc. <p> Orthogonal drawings with small number of bends seem to provide a good compromise in the sense that they have large angles (multiples of 90 ffi ), small area, and few bends (every degree 4 graph admits am orthogonal drawing with O (n 2 ) area and O (n) bends <ref> [109, 75] </ref>). Minimization of bends is also important in VLSI layouts where bends act as "hot points" because of their higher current density. Finally we notice that even though orthogonal drawings are usually defined for degree 4 graphs, the results are useful for graphs with higher degree also.
Reference: [76] <author> A. Lempel, S. Even, and I. Cederbaum. </author> <title> An algorithm for planarity testing of graphs. In Theory of Graphs: </title> <booktitle> Internat. Symposium (Rome 1966), </booktitle> <pages> pages 215-232, </pages> <address> New York, 1967. </address> <publisher> Gordon and Breach. </publisher>
Reference-contexts: Combinatorial results on upward planarity of covering digraphs of lattices were first given in [74, 88]. Further results on the interplay between upward planarity and ordered sets are surveyed by Rival [90, 91, 92]. Lempel, Even, and Cederbaum <ref> [76] </ref> relate the planarity of biconnected undirected graphs to the upward planarity of st-digraphs. A combinatorial characterization of upward planar digraphs is provided in [36, 73]: namely, a digraph is upward planar if and only if it is a spanning subgraph of a planar st-digraph.
Reference: [77] <author> R. Liggett and E. Mitchell. </author> <title> Optimal space planning in practice. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 13 </volume> <pages> 277-288, </pages> <year> 1981. </year>
Reference-contexts: Drawings of rectilinear graphs also find application in a variety of areas such as VLSI design [75, 109], architectural floor plan layout <ref> [77] </ref> and data base system design [4]. In fact a recent experimental study [62, 61] has shown that Tamassia's bend-minimization algorithm gives a more aesthetic drawing in practice then some other well known algorithms [18, 27, 19, 113].
Reference: [78] <author> Y. Liu, P. Marchioro, and R. Petreschi. </author> <title> A single bend embedding algorithm for cubic graphs. </title> <type> Manuscript, </type> <year> 1994. </year>
Reference-contexts: Vijayan and Wigderson [111] study structural properties of rectilinear planar drawings. From their results, the membership of rectilinear planarity testing in NP is easy to establish. Storer [97], Tamassia and Tollis [102], Liu, Marchioro, Morgana, Petreschi, and Simeone <ref> [79, 80, 81, 78] </ref>, Even and Granot [45], and Biedl and Kant [68, 13] give various techniques for constructing planar orthogonal drawings with O (n) bends.
Reference: [79] <author> Y. Liu, P. Marchioro, R. Petreschi, and B. Simeone. </author> <title> Theoretical results on at most 1-bend embeddability of graphs. </title> <type> Technical report, </type> <institution> Dipartimento di Statistica, Univ. di Roma "La Sapienza", </institution> <year> 1990. </year>
Reference-contexts: Vijayan and Wigderson [111] study structural properties of rectilinear planar drawings. From their results, the membership of rectilinear planarity testing in NP is easy to establish. Storer [97], Tamassia and Tollis [102], Liu, Marchioro, Morgana, Petreschi, and Simeone <ref> [79, 80, 81, 78] </ref>, Even and Granot [45], and Biedl and Kant [68, 13] give various techniques for constructing planar orthogonal drawings with O (n) bends.
Reference: [80] <author> Y. Liu, A. Morgana, and B. Simeone. </author> <title> General theoretical results on rectilinear embeddability of graphs. </title> <journal> Acta Math. Appl. Sinica, </journal> <volume> 7 </volume> <pages> 187-192, </pages> <year> 1991. </year>
Reference-contexts: Vijayan and Wigderson [111] study structural properties of rectilinear planar drawings. From their results, the membership of rectilinear planarity testing in NP is easy to establish. Storer [97], Tamassia and Tollis [102], Liu, Marchioro, Morgana, Petreschi, and Simeone <ref> [79, 80, 81, 78] </ref>, Even and Granot [45], and Biedl and Kant [68, 13] give various techniques for constructing planar orthogonal drawings with O (n) bends.
Reference: [81] <author> Y. Liu, A. Morgana, and B. Simeone. </author> <title> A linear algorithm for 3-bend embeddings of planar graphs in the grid. </title> <type> Manuscript, </type> <year> 1993. </year>
Reference-contexts: Vijayan and Wigderson [111] study structural properties of rectilinear planar drawings. From their results, the membership of rectilinear planarity testing in NP is easy to establish. Storer [97], Tamassia and Tollis [102], Liu, Marchioro, Morgana, Petreschi, and Simeone <ref> [79, 80, 81, 78] </ref>, Even and Granot [45], and Biedl and Kant [68, 13] give various techniques for constructing planar orthogonal drawings with O (n) bends.
Reference: [82] <author> S. Malitz and A. Papakostas. </author> <title> On the angular resolution of planar graphs. </title> <booktitle> In Proc. 24th Annu. ACM Sympos. Theory Comput., </booktitle> <pages> pages 527-538, </pages> <year> 1992. </year>
Reference-contexts: Previous results on the angular resolution of (non upward) drawings of graphs appear in <ref> [48, 82] </ref>. 46 Chapter 4 Angular Resolution 4.1 Introduction Coping with the finite resolution of display devices and of the human eye is a fundamental problem in graph drawing. Namely, in visualization applications, it is important to construct drawings of graphs that avoid placing vertices and edges too close.
Reference: [83] <author> S. Malitz and A. Papakostas. </author> <title> On the angular resolution of planar graphs. </title> <journal> SIAM J. Discrete Math., </journal> <volume> 7 </volume> <pages> 172-183, </pages> <year> 1994. </year>
Reference-contexts: Degree of a graph is equal to the maximum number of edges incident on a vertex of the graph. Formann, Hagerup, Haralambides, Kaufmann, Leighton, Simvonis, Welzl, and Woeginger have shown in [48] that every degree-d planar graph admits a straight-line (nonplanar) drawing with angular resolution (1=d). Malitz and Papakostas <ref> [83] </ref> show that a degree-d planar graph admits a planar straight line drawing with angular resolution (1=7 d ) (notice that this bound is independent of the number of vertices in the graph). <p> They tend to give more aesthetically pleasing drawings in general [31, 62]. Minimizing bends is also important in VLSI layouts where bends act as "hot points" because of their higher current density. In view of the trade-off between the angular resolution of a drawing and its area-requirement <ref> [58, 83] </ref>, these drawings offer a good compromise: they have large angles (multiples of 90 ffi ), small area, and few bends (every degree 4 graph admits am orthogonal drawing with O (n 2 ) area and O (n) bends [109, 75]). <p> Malitz and Papakostas <ref> [83] </ref> make further progress on the above open problem by proving a lower bound on the angular resolution dependent only on the degree of the graph. <p> Previously, only the trivial O (1=d) bound was known, and determining whether it is achievable was posed as an open problem in <ref> [83, 69] </ref>. In Section 4.4, we show a continuous trade-off between the area and the angular resolution of planar straight-line drawings. <p> Vertices on the same circle are distributed such that the angle between any two edges incident on the same vertex is at least =(d 1). Previously, Malitz and Papakostas <ref> [83] </ref> showed that angular resolution =2 (d 1) can be achieved for 48 outerplanar graphs. No polynomial bounds in 1=d were known for series-parallel graphs and nested-star graphs. <p> Note that the family of graphs requiring angular resolution O ( p in any planar straight-line drawing are actually nested-star graphs. The significance of our result on nested-star graphs is motivated by the following observation: Malitz and Papakostas <ref> [83] </ref> show that a disk packing of a planar degree-d graph yields a planar straight-line drawing with angular resolution (1=7 d ), and they exhibit a family of nested-star graphs to prove that this exponential bound is the best that can be obtained with the disk packing method. <p> Thus, for these graphs the linear program of <ref> [83] </ref> is guaranteed to give an inconsistent drawing. First, we prove the following geometric lemma (see Fig. 4.1). Lemma 13 Let D be a point inside a triangle ABC. <p> The following corollary is immediate (this corollary is also proved independently in <ref> [83] </ref>). <p> Find matching upper and lower bounds for these graphs. 79 * Prove or disprove whether every planar graph has angular resolution that is a polynomial in its degree. Notice that the result of <ref> [83] </ref> shows that every planar graph has angular resolution that is exponential in its degree. * Find tighter lower bound for the area-requirement of straight-line drawings, with large angular resolution, of a planar graph. <p> Maximizing angles is also important in other applications, such as optical communication where it is very difficult to transmit and receive signal at a very tight angle [48]. The notion of large angles between consecutive edges incident on a vertex is formalized by defining angular resolution of a graph <ref> [48, 58, 83] </ref>. The angular resolution of a straight line drawing of a graph is the smallest angle in the drawing between any two consecutive edges incident on the same vertex. For example, the angular resolution of the drawing shown in Fig. 5.1 (b) is 30 ffi . <p> Studies have shown that while some graphs do not admit any planar straight-line drawing (edges drawn as straight-lines) with optimal angular resolution, there are others who can be drawn with optimal angular resolution but only at the cost of having a large area <ref> [58, 83] </ref>. <p> Notice that the result of <ref> [83] </ref> shows that every planar graph has angular resolution that is exponential in its degree. * Find tighter lower bound for the area-requirement of straight-line drawings, with large angular resolution, of a planar graph.
Reference: [84] <author> J. Manning and M. J. Atallah. </author> <title> Fast detection and display of symmetry in trees. </title> <journal> Congr. Numer., </journal> <volume> 64 </volume> <pages> 159-169, </pages> <year> 1988. </year>
Reference-contexts: Trees are very popular data-structures, making appearance in a number of applications. It is therefore no surprise that the problem of drawing trees has been studied quite extensively, and a number of results are available. See for example, <ref> [112, 89, 42, 98, 44, 84, 15, 109] </ref>. Also see [30] for a detailed bibliography.
Reference: [85] <author> K. Mehlhorn. </author> <title> Graph Algorithms and NP-Completeness, volume 2 of Data Structures and Algorithms. </title> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, West Germany, </address> <year> 1984. </year>
Reference-contexts: We also give a brief description of Algorithms SAP, BlockFlow and PD, which embody three well-known techniques for computing flows in flow networks. The notation followed is generally the one of <ref> [85] </ref>. A flow network N = (V; E; c; u), consists of a directed graph G = (V; E) with a node set V and an arc set E, a cost function c : E ! R + , and a capacity function u : E ! R + . <p> This algorithm computes f in phases, where in each phase it computes a blocking flow in the shallowest layered network of N (with respect to the flow already computed). See <ref> [85] </ref> for details about this algorithm. Lemma 31 summarizes some important results proved in [85]. Lemma 31 [85](chapter IV, Section 9) The following hold for each phase i: 1. Phase i, except when it is the last phase, increases the amount of flow in N by at least one. 2. <p> This algorithm computes f in phases, where in each phase it computes a blocking flow in the shallowest layered network of N (with respect to the flow already computed). See <ref> [85] </ref> for details about this algorithm. Lemma 31 summarizes some important results proved in [85]. Lemma 31 [85](chapter IV, Section 9) The following hold for each phase i: 1. Phase i, except when it is the last phase, increases the amount of flow in N by at least one. 2. <p> The implementation of Blockflow in which each stage i has time-complexity O (m i log n i ) uses dynamic weighted trees for computing blocking flows. See <ref> [85, 96] </ref> for details. Although Algorithm Blockflow computes a maximum flow, it can be used for computing a min-cost max-flow in a flow network.
Reference: [86] <author> A. Papakostas. </author> <title> Upward planarity testing of outerplanar dags. </title> <editor> In R. Tamassia and I. G. Tollis, editors, </editor> <booktitle> Graph Drawing (Proc. GD '94), volume 894 of Lecture Notes in Computer Science, </booktitle> <pages> pages 298-306. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year> <month> 159 </month>
Reference-contexts: Polynomial-time algorithms are known for upward planarity testing of triconnected digraphs [7, 9], bipartite digraphs [35], st-digraphs [36, 73], single-source multiple-sink digraphs [64, 10], and outerplanar digraphs <ref> [86] </ref>. However, despite the effort of many researchers, it was not previously known whether one can test a general digraph for upward planarity in polynomial time. <p> This characterization implies that upward planarity testing is in NP. Di Battista, Liu, and Rival [35] show that every planar bipartite digraph is upward planar. Papakostas <ref> [86] </ref> gives a polynomial-time algorithm for upward planarity testing of outerplanar digraphs. Bertolazzi, Di Battista, Liotta, and Mannino [7, 9] give a polynomial-time algorithm for testing upward planarity of triconnected digraphs and of digraphs with a fixed embedding.
Reference: [87] <author> A. Papakostas and I. G. Tollis. </author> <title> Improved algorithms and bounds for orthogonal drawings. </title> <editor> In R. Tamassia and I. G. Tollis, editors, </editor> <booktitle> Graph Drawing (Proc. GD '94), volume 894 of Lecture Notes in Computer Science, </booktitle> <pages> pages 40-51. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Biedl and Kant [13] give a linear time algorithm for constructing a planar orthogonal drawing of a planar degree 4 graph with at most 2n+2 bends and area n 2 . Papakostas and Tollis <ref> [87] </ref> show that each degree 4 planar graph admits a planar orthogonal drawing with at most 2n+4 bends and area 0:76n 2 . They also show that each degree 3 planar graph admits a planar orthogonal drawing with at most 0:5n bends and area 0:25n 2 . <p> Using Dial's implementation for the priority queue used in the Dijkstra's shortest-path algorithm [1], Tamassia's algorithm can be implemented with O (n 2 ) time-complexity. Experimental studies [31, 62] have shown that Tamassia's algorithm in general constructs better drawings in practice than some other well-known algorithms of <ref> [18, 19, 101, 13, 87] </ref>. The studies however indicate clearly that Tamassia's algorithm has a high running time in practice.
Reference: [88] <author> C. Platt. </author> <title> Planar lattices and planar graphs. </title> <journal> J. Combin. Theory Ser. B, </journal> <volume> 21 </volume> <pages> 30-39, </pages> <year> 1976. </year>
Reference-contexts: Previous results on upward planarity testing are summarized below (also see [54] for an extensive survey). In the rest of this section, we denote with n the number of vertices of the graph being considered. Combinatorial results on upward planarity of covering digraphs of lattices were first given in <ref> [74, 88] </ref>. Further results on the interplay between upward planarity and ordered sets are surveyed by Rival [90, 91, 92]. Lempel, Even, and Cederbaum [76] relate the planarity of biconnected undirected graphs to the upward planarity of st-digraphs.
Reference: [89] <author> E. Reingold and J. Tilford. </author> <title> Tidier drawing of trees. </title> <journal> IEEE Trans. Softw. Eng., </journal> <volume> SE-7(2):223-228, </volume> <year> 1981. </year>
Reference-contexts: Trees are very popular data-structures, making appearance in a number of applications. It is therefore no surprise that the problem of drawing trees has been studied quite extensively, and a number of results are available. See for example, <ref> [112, 89, 42, 98, 44, 84, 15, 109] </ref>. Also see [30] for a detailed bibliography. <p> See for example, [112, 89, 42, 98, 44, 84, 15, 109]. Also see [30] for a detailed bibliography. As for the area-requirement of upward planar grid drawings 3 of trees, the well-known algorithms of Reingold and Tilford <ref> [89] </ref>, and Wetherell and Shannon [112] give drawings with area O (n 2 ), where n is the number of nodes in the tree. <p> The difficulty is that most of the known techniques for constructing planar upward grid drawings of trees require (N 2 ) area in the worst case <ref> [89, 98] </ref>. 3.0.1 Previous Work If we relax the upward requirement, however, then, as independently shown by Leis-erson [75] and Valiant [109], one can construct an O (N )-area planar orthogonal grid drawing of an N -node tree T , where the nodes are placed at integer grid points and the
Reference: [90] <author> I. </author> <title> Rival. The diagram. </title> <editor> In I. Rival, editor, </editor> <booktitle> Graphs and Orders, </booktitle> <pages> pages 103-133. </pages> <publisher> Reidel Publishing, </publisher> <year> 1985. </year>
Reference-contexts: Combinatorial results on upward planarity of covering digraphs of lattices were first given in [74, 88]. Further results on the interplay between upward planarity and ordered sets are surveyed by Rival <ref> [90, 91, 92] </ref>. Lempel, Even, and Cederbaum [76] relate the planarity of biconnected undirected graphs to the upward planarity of st-digraphs.
Reference: [91] <author> I. </author> <title> Rival. Graphical data structures for ordered sets. </title> <editor> In I. Rival, editor, </editor> <booktitle> Algorithms and Order, </booktitle> <pages> pages 3-31. </pages> <publisher> Kluwer Academic Publishers, </publisher> <year> 1989. </year>
Reference-contexts: Combinatorial results on upward planarity of covering digraphs of lattices were first given in [74, 88]. Further results on the interplay between upward planarity and ordered sets are surveyed by Rival <ref> [90, 91, 92] </ref>. Lempel, Even, and Cederbaum [76] relate the planarity of biconnected undirected graphs to the upward planarity of st-digraphs.
Reference: [92] <author> I. </author> <title> Rival. Reading, drawing, and order. </title> <editor> In I. G. Rosenberg and G. Sabidussi, editors, </editor> <booktitle> Algebras and Orders, </booktitle> <pages> pages 359-404. </pages> <publisher> Kluwer Academic Publishers, </publisher> <year> 1993. </year>
Reference-contexts: Combinatorial results on upward planarity of covering digraphs of lattices were first given in [74, 88]. Further results on the interplay between upward planarity and ordered sets are surveyed by Rival <ref> [90, 91, 92] </ref>. Lempel, Even, and Cederbaum [76] relate the planarity of biconnected undirected graphs to the upward planarity of st-digraphs.
Reference: [93] <author> P. Rosenstiehl and R. E. Tarjan. </author> <title> Rectilinear planar layouts and bipolar orientations of planar graphs. </title> <journal> Discrete Comput. Geom., </journal> <volume> 1(4) </volume> <pages> 343-353, </pages> <year> 1986. </year>
Reference: [94] <author> W. Schnyder. </author> <title> Embedding planar graphs on the grid. </title> <booktitle> In Proc. 1st ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 138-148, </pages> <year> 1990. </year>
Reference-contexts: Indeed, this consideration recently motivated the re-examination of straight-line drawings of planar directed graphs, because they require exponentially-large area [37], whereas several researchers have recently shown that planar graph drawings require only quadratic area, and that such drawings can be produced in linear time <ref> [26, 68, 94] </ref>. Moreover, some very nice work by Kant [68] shows that a number of other aesthetic criteria (such as convex faces) can be satisfied for a planar drawing while still keeping the area quadratic.
Reference: [95] <author> Y. Shiloach. </author> <title> Arrangements of Planar Graphs on the Planar Lattice. </title> <type> PhD thesis, </type> <institution> Weizmann Institute of Science, </institution> <year> 1976. </year>
Reference-contexts: Namely, they exhibit a family of binary trees that require (N log N ) area in any strictly upward planar grid drawing. This lower bound is tight within a constant factor: Shiloach <ref> [95] </ref> and Crescenzi, Di Battista, and Piperno [21] give linear-time algorithms that construct a strictly upward planar straight-line grid drawing of an N -node rooted tree with O (N log N ) area, O (N ) height, and O (log N ) width. <p> A grid drawing is such that the vertices and bends along the edges have integer coordinates. Planar drawings, where edges do not intersect, are especially important 27 Drawing Tree Type Previous Bounds Our Bounds Upward general O (N log N ) <ref> [21, 95] </ref> Straight-Line Upward AVL, Fibonacci, fi (N ) [21, 22] Straight-Line complete binary Strictly-Upward general fi (N log N ) [21] Straight-Line Upward degree O (n ffi ), fi (N ) (x 3.2.2) Polyline ffi &lt; 1 Upward Ordered degree O (1) fi (N log N ) (x 3.2.3) Polyline <p> The algorithm is a variation of the ones by Shiloach <ref> [95] </ref> and by Crescenzi, Di Battista, and Piperno [21]. We say that a node in a drawing is obstructed if the vertical line through v intersects the drawing below v. Lemma 12 Let T be a binary tree with N nodes. <p> In view of our results, the main open problem on this subject is determining the area requirement of planar upward straight-line drawings of rooted trees. There is still a gap between the trivial (N ) lower bound and the O (N log N ) upper bound <ref> [21, 95] </ref>. It would also be interesting to determine the total edge-length of our O (N ) area polyline drawings and extend our results to unbounded-degree trees. <p> We also show that it is NP-hard to approximate the minimum number of bends in a 125 planar orthogonal drawing of an n-vertex graph with an O (n 1* ) error, for any * &gt; 0. Shiloach <ref> [95] </ref> and Valiant [109] show that any planar graph of degree at most 4 admits a planar orthogonal drawing. Vijayan and Wigderson [111] study structural properties of rectilinear planar drawings. From their results, the membership of rectilinear planarity testing in NP is easy to establish.
Reference: [96] <author> D.D. Sleator. </author> <title> An O(nm log n) Algorithm for Maximum Network Flow. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1980. </year>
Reference-contexts: The implementation of Blockflow in which each stage i has time-complexity O (m i log n i ) uses dynamic weighted trees for computing blocking flows. See <ref> [85, 96] </ref> for details. Although Algorithm Blockflow computes a maximum flow, it can be used for computing a min-cost max-flow in a flow network.
Reference: [97] <author> J. A. Storer. </author> <title> On minimal node-cost planar embeddings. </title> <journal> Networks, </journal> <volume> 14 </volume> <pages> 181-212, </pages> <year> 1984. </year>
Reference-contexts: Shiloach [95] and Valiant [109] show that any planar graph of degree at most 4 admits a planar orthogonal drawing. Vijayan and Wigderson [111] study structural properties of rectilinear planar drawings. From their results, the membership of rectilinear planarity testing in NP is easy to establish. Storer <ref> [97] </ref>, Tamassia and Tollis [102], Liu, Marchioro, Morgana, Petreschi, and Simeone [79, 80, 81, 78], Even and Granot [45], and Biedl and Kant [68, 13] give various techniques for constructing planar orthogonal drawings with O (n) bends. <p> We denote the number of vertices in a graph with n. Valiant [109] showed that every degree 4 graph admits a (nonplanar) drawing with at most 4n bends. As for the problem of constructing bend-minimum planar orthogonal drawings, Storer <ref> [97] </ref> gave a polynomial time algorithm for constructing a planar orthogonal drawing of a biconnected degree 4 planar graph with at most 2n+4 bends. <p> Tamassia [99] in 1987 gave an O (n 2 log n) algorithm that takes an embedded planar degree 4 graph G as input and constructs a planar orthogonal drawing of G with minimum number of bends, disproving the conjecture of Storer <ref> [97] </ref>, who suspected that the problem was NP-hard. This algorithm not only made a fundamental theoretical contribution to the topic of bend-minimum planar orthogonal drawings, but also has been found to have good performance in practice.
Reference: [98] <author> K. J. Supowit and E. M. Reingold. </author> <title> The complexity of drawing trees nicely. </title> <journal> Acta Inform., </journal> <volume> 18 </volume> <pages> 377-392, </pages> <year> 1983. </year>
Reference-contexts: Trees are very popular data-structures, making appearance in a number of applications. It is therefore no surprise that the problem of drawing trees has been studied quite extensively, and a number of results are available. See for example, <ref> [112, 89, 42, 98, 44, 84, 15, 109] </ref>. Also see [30] for a detailed bibliography. <p> The difficulty is that most of the known techniques for constructing planar upward grid drawings of trees require (N 2 ) area in the worst case <ref> [89, 98] </ref>. 3.0.1 Previous Work If we relax the upward requirement, however, then, as independently shown by Leis-erson [75] and Valiant [109], one can construct an O (N )-area planar orthogonal grid drawing of an N -node tree T , where the nodes are placed at integer grid points and the
Reference: [99] <author> R. Tamassia. </author> <title> On embedding a graph in the grid with the minimum number of bends. </title> <journal> SIAM J. Comput., </journal> <volume> 16(3) </volume> <pages> 421-444, </pages> <year> 1987. </year>
Reference-contexts: In addition, angle graphs seem to be useful as intermediate-stage products for constructing drawings of graphs, as demonstrated by their implicit use in the well-known algorithms of <ref> [99] </ref> and [102] for constructing planar orthogonal drawings. We give several new results on drawings of angle graphs. <p> This problem is known in literature as the rectilinear planarity testing problem. Previously, polynomial time testing-algorithms were known only for special categories of graphs, namely, embedded planar graphs <ref> [99] </ref>, series-parallel graphs [33], and degree-3 graphs [33]. Borrowing from our techniques used for showing the NP-completeness of the upward planarity testing problem, in Chapter 6 we show that the rectilinear planarity testing problem for general graphs is also NP-complete, and hence a polynomial time algorithm is unlikely to exist. <p> This heuristic is very simple and also seems to give good drawings in practice [31, 62]. Central to the success of this heuristic is minimizing the number of bends in Step 2. Tamassia has given a very famous algorithm in <ref> [99] </ref> that constructs a bend-minimum planar orthogonal drawing of an embedded planar graph. This algorithm uses a transformation to a minimum cost maximum flow problem on a related network such that, a minimum cost maximum flow on this network gives a bend-minimum planar orthogonal drawing of the embedded planar graph. <p> A rectilinear angle graph is an angle graph in which each angle is a multiple of 90 ffi . Many well known graph drawing algorithms, while drawing a graph, use rectilinear angle graphs in an intermediate stage. For example, Tamassia's bend-minimization algorithm <ref> [99] </ref> constructs a planar drawing of a planar orthogonal graph (each vertex has degree at most four) by first generating a rectilinear angle graph referred to as an orthogonal representation, and then drawing it. <p> Given a planar graph, <ref> [99] </ref> shows how to construct angle graphs whose angles are multiples of a preassigned angle, such that any planar drawing of this angle graph gives a planar drawing with minimum number of bends of the input graph. 5.1.3 Our Results We give several new results concerning drawing of angle graphs. <p> Another open problem of great theoretical and practical importance is applying the techniques of Tamassia's bend-minimization algorithm <ref> [99] </ref> to construct planar drawings of general planar graphs, not just orthogonal planar graphs. <p> Storer [97], Tamassia and Tollis [102], Liu, Marchioro, Morgana, Petreschi, and Simeone [79, 80, 81, 78], Even and Granot [45], and Biedl and Kant [68, 13] give various techniques for constructing planar orthogonal drawings with O (n) bends. Tamassia <ref> [99] </ref> gives an O (n 2 log n)-time algorithm that constructs a planar orthogonal drawing with the minimum number of bends for an embedded planar graph. Di Battista, Liotta, and Vargiu [33] give polynomial time algorithms for minimizing bends in planar orthogonal drawings of series-parallel and cubic graphs. <p> In the second phase, we reduce this undirected flow problem to the rectilinear planarity testing of a special class of digraphs. The latter reduction is interesting in its own and provides new insights on the characterization by flow networks of the angles formed by the edges of orthogonal drawings <ref> [33, 99] </ref>. Most of the results and techniques presented in this chapter can also be found in [57, 59]. The rest of this chapter is organized as follows. Preliminary definitions and results are provided in Section 6.2. In Section 6.3 we describe the reduction from not-all-equal-3-sat to rectilinear planarity testing. <p> The following lemma is an immediate consequence of the results in <ref> [99, 111] </ref>. <p> An embedded planar graph is a planar graph equipped with an embedding. The bend-minimization problem for embedded planar degree 4 graphs is stated as follows: Given an embedded planar degree 4 graph G, construct a planar orthogonal drawing of G with minimum number of bends. Tamassia <ref> [99] </ref> in 1987 gave an O (n 2 log n) algorithm that takes an embedded planar degree 4 graph G as input and constructs a planar orthogonal drawing of G with minimum number of bends, disproving the conjecture of Storer [97], who suspected that the problem was NP-hard. <p> An orthogonal planar drawing D (O), associated with O, is a planar drawing of G that preserves the angles of O (see Fig 7.1 (b)). A consistent orthogonal representation is one that admits an orthogonal planar drawing. The following important theorem which follow immediately from the results of <ref> [99] </ref> characterizes consistent orthogonal representations: Theorem 24 Let G be an embedded planar degree 4 graph. <p> taken by Algorithm PD to compute a min-cost max flow in N is equal to P 1ir1 T i + O (m log n), where n and m denote the number of nodes and arcs respectively in N . 7.4 Bend-Minimization and Network Flow It is shown by Tamassia in <ref> [99] </ref>, that the problem of constructing an orthogonal planar drawing with minimum bends of an embedded degree 4 planar graph, can be solved by solving a related min-cost max-flow problem. In this section, we give a brief description of the algorithm of [99], which we call the min-bend algorithm. <p> Network Flow It is shown by Tamassia in <ref> [99] </ref>, that the problem of constructing an orthogonal planar drawing with minimum bends of an embedded degree 4 planar graph, can be solved by solving a related min-cost max-flow problem. In this section, we give a brief description of the algorithm of [99], which we call the min-bend algorithm. Details can be found in [99]. Let G be an embedded degree 4 planar graph. The min-bend algorithm is shown in Fig 7.7. As shown in the figure, it consists of two phases, namely, the orthogonal-ization phase, and the find-length phase. <p> In this section, we give a brief description of the algorithm of <ref> [99] </ref>, which we call the min-bend algorithm. Details can be found in [99]. Let G be an embedded degree 4 planar graph. The min-bend algorithm is shown in Fig 7.7. As shown in the figure, it consists of two phases, namely, the orthogonal-ization phase, and the find-length phase. <p> Let z (s) be the sum of the capacities of the arcs of N (G) incident on s. Clearly the maximum flow in N (G) is at most z (s). Lemma 35 follows from Lemma 2 of <ref> [99] </ref>. Lemma 35 ([99], Lemma 2) N (G) admits a maximum flow of magnitude z (s). 145 Notice that because each source-node, node-face, and face-sink arc has cost 1, each maximum flow of N (G) has cost at least 3z (s). <p> Lemmas 36, 37, 38, 39, and 40 either paraphrase, or follow immediately from results proved in <ref> [99] </ref>. Lemma 36 ([99], Lemma 6) N (G) has O (n) nodes and arcs. Lemma 37 ([99], Theorem 2) A min-cost max-flow f of N (G) corresponds to a consistent orthogonal representation O (G) of G with minimum number of bends. <p> Therefore, from Lemma 40 it follows that the total time-complexity of Algorithm min-bend is O (M (N (G)+n). Hence, we can construct an orthogonal planar drawing of G with minimum bends in O (M (N (G)) + n) time. 2 The algorithm described in <ref> [99] </ref> uses an O (n 2 log n) algorithm for computing a min-cost max-flow in a network, resulting in a total time-complexity of O (n 2 log n) for min-bend. A faster algorithm for computing a min-cost max-flow in an integer network will give us a faster bend-minimization algorithm. <p> Our algorithm is faster than the previously known fastest algorithm <ref> [99] </ref> by a factor of n 0:25 = log n.
Reference: [100] <author> R. Tamassia. </author> <title> A dynamic data structure for planar graph embedding. </title> <editor> In T. Lep-isto and A. Salomaa, editors, </editor> <booktitle> Automata, Languages and Programming (Proc. 15th ICALP), volume 317 of Lecture Notes in Computer Science, </booktitle> <pages> pages 576-590. </pages> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: Next, for every face f of H (T), join the fans introduced in f , using their connectors, in a cyclic order as shown in Fig. 5.15 (c). For proving that G (T) is triconnected we use the following result of <ref> [100] </ref>. Two vertices u and v of G (T) are adjacent if there is an edge (u; v) in G (T). Theorem 17 (Tamassia [100]) Let G be a biconnected planar graph. <p> For proving that G (T) is triconnected we use the following result of <ref> [100] </ref>. Two vertices u and v of G (T) are adjacent if there is an edge (u; v) in G (T). Theorem 17 (Tamassia [100]) Let G be a biconnected planar graph.
Reference: [101] <author> R. Tamassia and I. G. Tollis. </author> <title> A unified approach to visibility representations of planar graphs. </title> <journal> Discrete Comput. Geom., </journal> <volume> 1(4) </volume> <pages> 321-341, </pages> <year> 1986. </year>
Reference-contexts: For example, Tamassia's bend-minimization algorithm [99] constructs a planar drawing of a planar orthogonal graph (each vertex has degree at most four) by first generating a rectilinear angle graph referred to as an orthogonal representation, and then drawing it. Similarly the algorithm by Tamassia and Tollis <ref> [101] </ref> that converts a visibility representation of a graph into a rectilinear planar drawing uses an orthogonal representation at an intermediate stage. <p> Using Dial's implementation for the priority queue used in the Dijkstra's shortest-path algorithm [1], Tamassia's algorithm can be implemented with O (n 2 ) time-complexity. Experimental studies [31, 62] have shown that Tamassia's algorithm in general constructs better drawings in practice than some other well-known algorithms of <ref> [18, 19, 101, 13, 87] </ref>. The studies however indicate clearly that Tamassia's algorithm has a high running time in practice.
Reference: [102] <author> R. Tamassia and I. G. Tollis. </author> <title> Planar grid embedding in linear time. </title> <journal> IEEE Trans. on Circuits and Systems, </journal> <volume> CAS-36(9):1230-1234, </volume> <year> 1989. </year> <month> 160 </month>
Reference-contexts: In addition, angle graphs seem to be useful as intermediate-stage products for constructing drawings of graphs, as demonstrated by their implicit use in the well-known algorithms of [99] and <ref> [102] </ref> for constructing planar orthogonal drawings. We give several new results on drawings of angle graphs. Using a gadget based approach, in which we use smaller graphs to construct a bigger graph, we have shown that it is NP-hard to determine whether a given angle graph admits a planar drawing. <p> Vijayan and Wigderson [111] study structural properties of rectilinear planar drawings. From their results, the membership of rectilinear planarity testing in NP is easy to establish. Storer [97], Tamassia and Tollis <ref> [102] </ref>, Liu, Marchioro, Morgana, Petreschi, and Simeone [79, 80, 81, 78], Even and Granot [45], and Biedl and Kant [68, 13] give various techniques for constructing planar orthogonal drawings with O (n) bends. <p> Since D has a unique embedding, we have that F also has a unique embedding. Every planar graph with vertices of degree at most 4 admits an orthogonal drawing with at most 4 bends per edge, which can be constructed in linear time (see, e.g., <ref> [102] </ref>). <p> As for the problem of constructing bend-minimum planar orthogonal drawings, Storer [97] gave a polynomial time algorithm for constructing a planar orthogonal drawing of a biconnected degree 4 planar graph with at most 2n+4 bends. Tamassia and Tollis <ref> [102] </ref> gave a linear time algorithm for constructing a planar orthogonal drawing of a biconnected degree 4 planar graph with at most 2n + 4 bends and area O (n 2 ). Tamassia, Tollis and Vitter [103] gave a parallel algorithm and lower bounds for the problem.
Reference: [103] <author> R. Tamassia, I. G. Tollis, and J. S. Vitter. </author> <title> Lower bounds and parallel algorithms for planar orthogonal grid drawings. </title> <booktitle> In Proc. IEEE Symposium on Parallel and Distributed Processing, </booktitle> <pages> pages 386-393, </pages> <year> 1991. </year>
Reference-contexts: Tamassia and Tollis [102] gave a linear time algorithm for constructing a planar orthogonal drawing of a biconnected degree 4 planar graph with at most 2n + 4 bends and area O (n 2 ). Tamassia, Tollis and Vitter <ref> [103] </ref> gave a parallel algorithm and lower bounds for the problem.
Reference: [104] <author> R. Tamassia and J. S. Vitter. </author> <title> Parallel transitive closure and point location in planar structures. </title> <journal> SIAM J. Comput., </journal> <volume> 20(4) </volume> <pages> 708-725, </pages> <year> 1991. </year>
Reference-contexts: Di Battista, Tamassia, and Tollis [36, 37] give algorithms for constructing upward planar drawings of planar st-digraphs, and investigate area bounds and symmetry display. Tamassia and Vitter <ref> [104] </ref> show that the above drawing algorithms can be efficiently parallelized. Upward planar drawings of series-parallel digraphs are studied in [5, 6]. Our proof techniques are based on a two-phase reduction from the known NP-complete problem not-all-equal-3-sat. In the first phase, we reduce not-all-equal-3-sat to an auxiliary undirected flow problem.
Reference: [105] <author> R. E. Tarjan. </author> <title> Data Structures and Network Algorithms, </title> <booktitle> volume 44 of CBMS-NSF Regional Conference Series in Applied Mathematics. Society for Industrial Applied Mathematics, </booktitle> <year> 1983. </year>
Reference-contexts: through p i ; Let F i be the total flow in N after establishing flow f in R i ; Let R i+1 be the residual network of N with respect to flow F i ; i i + 1; end Lemma 30 follows immediately from Theorem 8.13 of <ref> [105] </ref>. Lemma 30 ([105](Chapter 8, pp. 110)) Let N be a flow network with integer capacities, and consisting of n nodes and m arcs. Suppose N admits a max-flow with magnitude . <p> The implementation of Algorithm SAP that achieves the O (( + 1) m log n) upper bound of Lemma 30 uses Dijkstra's shortest path algorithm for non-negative edge weights (which has time-complexity O (m log n) when implemented using priority queues [20]), for computing p i . See <ref> [105] </ref> or [1] for details. Fig 7.4 shows another well-known algorithm, which we call the Blockflow algorithm, that computes a max-flow f in a flow network N .
Reference: [106] <institution> Teamwork. Cadre Technologies, Providence, RI. </institution>
Reference-contexts: Finally, because each angle is a multiple of 90 ffi , orthogonal planar drawings have very nice combinatorial properties leading to several simple algorithms for constructing them. Because of these advantages, many commercial packages, e.g. <ref> [32, 106] </ref>, are available that use orthogonal drawings for displaying graphs. However, it was not previously known whether one can test in polynomial time if a given graph admits a rectilinear planar drawing, i.e., an orthogonal planar drawing with no bends. <p> This is so because we can convert a graph with higher degree into a degree 4 graph by expanding each vertex with more than 4 edges incident on it, into a cycle. Many graph drawing systems are available that follow this approach, e.g., <ref> [32, 106] </ref>. Because of the importance of bend-minimum orthogonal drawings, researchers have 134 studied the problem extensively. We denote the number of vertices in a graph with n. Valiant [109] showed that every degree 4 graph admits a (nonplanar) drawing with at most 4n bends.
Reference: [107] <author> C. Thomassen. </author> <title> Planar acyclic oriented graphs. </title> <booktitle> Order, </booktitle> <volume> 5(4) </volume> <pages> 349-361, </pages> <year> 1989. </year>
Reference-contexts: Papakostas [86] gives a polynomial-time algorithm for upward planarity testing of outerplanar digraphs. Bertolazzi, Di Battista, Liotta, and Mannino [7, 9] give a polynomial-time algorithm for testing upward planarity of triconnected digraphs and of digraphs with a fixed embedding. Concerning single-source digraphs, Thomassen <ref> [107] </ref> characterizes upward planarity in terms of forbidden circuits. Hutton and Lubiw [64] combine Thomassen's characterization with a decomposition scheme to test upward planarity of a single-source digraph in O (n 2 ) time.
Reference: [108] <author> J. Valdes, R. E. Tarjan, and E. L. Lawler. </author> <title> The recognition of series-parallel digraphs. </title> <journal> SIAM J. Comput., </journal> <volume> 11(2) </volume> <pages> 298-313, </pages> <year> 1982. </year>
Reference-contexts: Notice that if G has no multiple edges, at most one child of a P node is a Q node. Given G, SP Q (G) can be constructed in linear time using the algorithm given in <ref> [108] </ref>. Corresponding S node when G is a series-composition of G 1 and G 2 ; (f ) Corresponding P node when G is a parallel-composition of G 1 and G 2 . <p> Proof: Let G 0 be a series-parallel graph with degree d and n vertices. Construct a compact SPQ-tree T (G) associated with G 0 , by first constructing SP Q (G 0 ) using the O (n)-time algorithm of <ref> [108] </ref>, and then compacting SP Q (G 0 ) in O (n) time using the compacting procedure described earlier. Let Delta E be an equilateral triangle. Construct Drawing D (G 0 ; Delta E ) using the recursive algorithm given above.
Reference: [109] <author> L. Valiant. </author> <title> Universality considerations in VLSI circuits. </title> <journal> IEEE Trans. Comput., </journal> <volume> C-30(2):135-140, </volume> <year> 1981. </year>
Reference-contexts: Trees are very popular data-structures, making appearance in a number of applications. It is therefore no surprise that the problem of drawing trees has been studied quite extensively, and a number of results are available. See for example, <ref> [112, 89, 42, 98, 44, 84, 15, 109] </ref>. Also see [30] for a detailed bibliography. <p> between the angular resolution of a drawing and its area-requirement [58, 83], these drawings offer a good compromise: they have large angles (multiples of 90 ffi ), small area, and few bends (every degree 4 graph admits am orthogonal drawing with O (n 2 ) area and O (n) bends <ref> [109, 75] </ref>). Finally, because each angle is a multiple of 90 ffi , orthogonal planar drawings have very nice combinatorial properties leading to several simple algorithms for constructing them. Because of these advantages, many commercial packages, e.g. [32, 106], are available that use orthogonal drawings for displaying graphs. <p> This is motivated by the finite resolution of all of our current technologies for rendering a drawing, and also by circuit-area optimization criteria in VLSI layout <ref> [12, 75, 109] </ref>. In the following, we assume the existence of a resolution rule that implies a finite minimum area for the drawing of any graph. A typical resolution rule is to require grid drawings, where the vertices and bends of the edges have integer coordinates. <p> The difficulty is that most of the known techniques for constructing planar upward grid drawings of trees require (N 2 ) area in the worst case [89, 98]. 3.0.1 Previous Work If we relax the upward requirement, however, then, as independently shown by Leis-erson [75] and Valiant <ref> [109] </ref>, one can construct an O (N )-area planar orthogonal grid drawing of an N -node tree T , where the nodes are placed at integer grid points and the edges follow paths of the grid. <p> (N log N ) [21] Straight-Line Upward degree O (n ffi ), fi (N ) (x 3.2.2) Polyline ffi &lt; 1 Upward Ordered degree O (1) fi (N log N ) (x 3.2.3) Polyline Leaves-on-Hull binary fi (N log N ) [16] Orthogonal Non-Upward degree O (1) fi (N ) <ref> [75, 109] </ref> Orthogonal Upward binary fi (N log log N ) (x 3.3) Orthogonal Table 3.1: Area-requirements for various types of planar grid drawings of a rooted tree with N nodes. because they improve the readability of the drawing, and, in the context of VLSI layouts, they simplify the design process <p> 109] Orthogonal Upward binary fi (N log log N ) (x 3.3) Orthogonal Table 3.1: Area-requirements for various types of planar grid drawings of a rooted tree with N nodes. because they improve the readability of the drawing, and, in the context of VLSI layouts, they simplify the design process <ref> [12, 75, 109] </ref>. An upward drawing of a directed graph is such that every edge is a curve monotonically nondecreasing in the vertical direction (when traversed along the direction of the edge). <p> Similarly the algorithm by Tamassia and Tollis [101] that converts a visibility representation of a graph into a rectilinear planar drawing uses an orthogonal representation at an intermediate stage. Drawings of rectilinear graphs also find application in a variety of areas such as VLSI design <ref> [75, 109] </ref>, architectural floor plan layout [77] and data base system design [4]. In fact a recent experimental study [62, 61] has shown that Tamassia's bend-minimization algorithm gives a more aesthetic drawing in practice then some other well known algorithms [18, 27, 19, 113]. <p> The study of area requirements of drawings of graphs has received a lot of attention (see, e.g., [6, 37, 53, 58]) and is motivated by the finite resolution of the current graph drawing technologies and circuit-area optimization criteria of VLSI layouts <ref> [12, 75, 109] </ref>. 84 Typical resolution rules are requirement of minimum unit distance between vertices, their placement on grid points of a unit-grid etc. <p> We have however shown both of these problems to be NP-hard for angle graphs. Also every graph can be drawn in quadratic area <ref> [109] </ref>, whereas we have shown that certain angle graphs require exponential area. Thus angle graphs are more "difficult" then general graphs in some sense, at least for the problems that we have studied. It may be interesting to do a further comparative study of angle graphs and general graphs. <p> We also show that it is NP-hard to approximate the minimum number of bends in a 125 planar orthogonal drawing of an n-vertex graph with an O (n 1* ) error, for any * &gt; 0. Shiloach [95] and Valiant <ref> [109] </ref> show that any planar graph of degree at most 4 admits a planar orthogonal drawing. Vijayan and Wigderson [111] study structural properties of rectilinear planar drawings. From their results, the membership of rectilinear planarity testing in NP is easy to establish. <p> Orthogonal drawings with small number of bends seem to provide a good compromise in the sense that they have large angles (multiples of 90 ffi ), small area, and few bends (every degree 4 graph admits am orthogonal drawing with O (n 2 ) area and O (n) bends <ref> [109, 75] </ref>). Minimization of bends is also important in VLSI layouts where bends act as "hot points" because of their higher current density. Finally we notice that even though orthogonal drawings are usually defined for degree 4 graphs, the results are useful for graphs with higher degree also. <p> Many graph drawing systems are available that follow this approach, e.g., [32, 106]. Because of the importance of bend-minimum orthogonal drawings, researchers have 134 studied the problem extensively. We denote the number of vertices in a graph with n. Valiant <ref> [109] </ref> showed that every degree 4 graph admits a (nonplanar) drawing with at most 4n bends.
Reference: [110] <author> G. Vijayan. </author> <title> Geometry of planar graphs with angles. </title> <booktitle> In Proc. 2nd Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 116-124, </pages> <year> 1986. </year>
Reference-contexts: G is triconnected if it does not have any separating pair. 5.1.2 Previous Work The pioneering work in the area of angle graphs was done by Vijayan in <ref> [110] </ref>. Vijayan gave a characterization of consistent angle graphs, using a set of linear equalities and inequalities. The ensuing linear program gives a high degree polynomial time algorithm for constructing drawing of an angle graph. <p> Some necessary conditions for an angle graph to be planar, as well as necessary and sufficient conditions for some special angle graphs such as angle cycles, angle graphs with convex faces, outer planar angle graphs and rectilinear angle graphs have also been described in <ref> [110] </ref>. Vijayan also gave some conjectures that relate the planarity of an angle graphs with the planarity of its biconnected components (see Conjectures 1 and 2 of Section 5.2). <p> We first study the planarity of angle graphs. We disprove the conjectures of <ref> [110] </ref> by providing counter examples to them. We then show that the problem of testing a consistent angle graph for planarity is NP-hard and hence unlikely to have an efficient algorithm. <p> In a VLSI circuit even though typically many layers are available, some are preferable to others because of better electric properties [39]. Our NP-hardness result is important in this regard. 5.2 Planarity Testing of Angle Graphs We start this section by disproving the conjectures given in <ref> [110] </ref> by providing counterexamples to them. Some definitions first, most of which are from [110]. Let A be an angle graph whose underlying graph G has an articulation vertex v. v is also an articulation vertex of A. <p> Our NP-hardness result is important in this regard. 5.2 Planarity Testing of Angle Graphs We start this section by disproving the conjectures given in <ref> [110] </ref> by providing counterexamples to them. Some definitions first, most of which are from [110]. Let A be an angle graph whose underlying graph G has an articulation vertex v. v is also an articulation vertex of A. A biconnected component of A is a biconnected component of G with angles specified. <p> We say that B 1 and B 2 interlace at u if the edges joining u to the vertices of B 1 and B 2 alternate between B 1 and B 2 at least four times (Fig 5.2 (a) shows an example given in <ref> [110] </ref>). We say that B 1 is directly forced inside B 2 if all the edge joining u to the vertices of B 1 are in the interior of the face of B 2 containing u (Fig 5.2 (b) shows an example given in [110]-B 2 is also directly forced inside <p> is forced inside B 2 if either B 1 is directly forced inside B 2 or there is another biconnected component B 3 of A such that B 3 is forced inside B 2 and B 1 is attached to B 3 (Fig 5.2 (c) shows an example given in <ref> [110] </ref>). Notice that from the definition of a subdivision (see Sec 5.1.1), the subdivision of a triangle is a polygon whose all but three angles are 180 ffi . Vijayan has made the following conjectures in [110]: Conjecture 1 (Vijayan [110]) An angle graph A that does not contain any angle-cycle <p> 1 is attached to B 3 (Fig 5.2 (c) shows an example given in <ref> [110] </ref>). Notice that from the definition of a subdivision (see Sec 5.1.1), the subdivision of a triangle is a polygon whose all but three angles are 180 ffi . Vijayan has made the following conjectures in [110]: Conjecture 1 (Vijayan [110]) An angle graph A that does not contain any angle-cycle which is a subdivision of a triangle is planar if and only if 1. <p> B 3 (Fig 5.2 (c) shows an example given in <ref> [110] </ref>). Notice that from the definition of a subdivision (see Sec 5.1.1), the subdivision of a triangle is a polygon whose all but three angles are 180 ffi . Vijayan has made the following conjectures in [110]: Conjecture 1 (Vijayan [110]) An angle graph A that does not contain any angle-cycle which is a subdivision of a triangle is planar if and only if 1. <p> A is consistent, 2. the faces of each biconnected component of A are consistent angle cycles, 85 inside B 2 , and B 2 directly forced inside B 1 , (c) B 1 is forced inside B 3 . These figures are taken from <ref> [110] </ref>. 3. no two biconnected components of A interlace at an articulation vertex of A, and 4. the forced-inside relation among the biconnected components of A is a partial order. Conjecture 2 (Vijayan [110]) The conditions stated in the Conjecture 1 are necessary and sufficient for angle graphs that do not <p> These figures are taken from <ref> [110] </ref>. 3. no two biconnected components of A interlace at an articulation vertex of A, and 4. the forced-inside relation among the biconnected components of A is a partial order. Conjecture 2 (Vijayan [110]) The conditions stated in the Conjecture 1 are necessary and sufficient for angle graphs that do not contain subdivisions of triangles and whose biconnected components have convex interior faces. We give a Theorem 15 disproves Conjecture 2 by giving a counter example to it. <p> Similarly, the equivalent multiplanarity problem for general graphs is also solvable in linear time: A multilayered (general) graph is multiplanar if and only if each subgraph consisting of the edges assigned to the same layer is planar <ref> [110] </ref>. We have however shown both of these problems to be NP-hard for angle graphs. Also every graph can be drawn in quadratic area [109], whereas we have shown that certain angle graphs require exponential area. <p> Study the trade-off between area, angular resolution and the number of bends. * Characterize angle graphs for which planarity testing can be done efficiently. * Find an efficient algorithm for testing an angle graph for consistency, i.e., testing whether it admits a drawing. The current best approach <ref> [110] </ref> is based on linear programming, and hence has a time-complexity that is a high-degree polynomial in the number of edges and vertices in the graph. 152 * Characterize graphs for which rectilinear planarity testing can be done efficiently. * Notice that rectilinear planarity testing can be done in polynomial time
Reference: [111] <author> G. Vijayan and A. Wigderson. </author> <title> Rectilinear graphs and their embeddings. </title> <journal> SIAM J. Comput., </journal> <volume> 14 </volume> <pages> 355-372, </pages> <year> 1985. </year>
Reference-contexts: Vijayan also gave some conjectures that relate the planarity of an angle graphs with the planarity of its biconnected components (see Conjectures 1 and 2 of Section 5.2). A characterization of planar angle 83 graphs with triangular faces by a set of non-linear equalities is given in [38]. <ref> [111] </ref> gives an O (n) time algorithm for testing a rectilinear angle graph for planarity and O (n 2 ) time algorithm for constructing a planar drawing if it is planar. <p> Again, we use a reduction from the 3-SAT problem, using a gadget based approach. Our result is in sharp contrast to the linear time complexity of testing a single-layered rectilinear graph for planarity <ref> [111] </ref>. Also interesting is the fact that the corresponding problem for general graphs is very simple: A graph is multiplanar if and only if each subgraph induced by the edges assigned to the same layer is planar. <p> Shiloach [95] and Valiant [109] show that any planar graph of degree at most 4 admits a planar orthogonal drawing. Vijayan and Wigderson <ref> [111] </ref> study structural properties of rectilinear planar drawings. From their results, the membership of rectilinear planarity testing in NP is easy to establish. <p> The following lemma is an immediate consequence of the results in <ref> [99, 111] </ref>.
Reference: [112] <author> C. Wetherell and A. Shannon. </author> <title> Tidy drawing of trees. </title> <journal> IEEE Trans. Softw. Eng., </journal> <volume> SE-5(5):514-520, </volume> <year> 1979. </year>
Reference-contexts: Trees are very popular data-structures, making appearance in a number of applications. It is therefore no surprise that the problem of drawing trees has been studied quite extensively, and a number of results are available. See for example, <ref> [112, 89, 42, 98, 44, 84, 15, 109] </ref>. Also see [30] for a detailed bibliography. <p> See for example, [112, 89, 42, 98, 44, 84, 15, 109]. Also see [30] for a detailed bibliography. As for the area-requirement of upward planar grid drawings 3 of trees, the well-known algorithms of Reingold and Tilford [89], and Wetherell and Shannon <ref> [112] </ref> give drawings with area O (n 2 ), where n is the number of nodes in the tree.
Reference: [113] <author> D. Woods. </author> <title> Drawing Planar Graphs. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Stanford University, </institution> <year> 1982. </year> <note> Technical Report STAN-CS-82-943. 161 </note>
Reference-contexts: In fact a recent experimental study [62, 61] has shown that Tamassia's bend-minimization algorithm gives a more aesthetic drawing in practice then some other well known algorithms <ref> [18, 27, 19, 113] </ref>. The success of rectilinear angle graphs in drawing graphs raises the natural question whether it is possible to use general angle graphs for constructing high quality planar drawings.
References-found: 113

