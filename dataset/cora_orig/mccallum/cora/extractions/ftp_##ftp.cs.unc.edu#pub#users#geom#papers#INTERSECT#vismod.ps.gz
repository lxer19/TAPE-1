URL: ftp://ftp.cs.unc.edu/pub/users/geom/papers/INTERSECT/vismod.ps.gz
Refering-URL: http://www.cs.unc.edu/Research/graphics/pubs.html
Root-URL: http://www.cs.unc.edu
Email: fkumar,krishnas,manocha,narkhedeg@cs.unc.edu  
Title: High Speed and High Fidelity Visualization of Complex CSG Models  
Author: Subodh Kumar Shankar Krishnan Dinesh Manocha Atul Narkhede 
Address: Chapel Hill NC 27599 USA  
Affiliation: Department of Computer Science University of North Carolina  
Abstract: We present a system for fast and accurate display of CSG (constructive solid geometry) models. Such models have as primitives, polyhedra and solids whose boundaries can be represented using rational spline surfaces. As a part of pre-processing, we compute the B-rep (boundary representation) from the CSG tree and represent the resulting solid using trimmed spline surfaces. No assumptions are made on the number of primitives or the degree of the primitives in the CSG tree. Given a trimmed spline model, we tessellate it into polygons as a function of the viewing parameters and render it using visibility culling and coherence between successive frames. The choice of a analytic representation of the model and the trimming curves is fundamental to the fast performance of the system. The system has been used to convert parts of a submarine storage and handling system model represented as more than 2; 000 CSG trees. The B-rep consists of more than 30; 000 trimmed spline surfaces and is displayed at interactive rates on the Pixel-Planes 5 graphics system. 
Abstract-found: 1
Intro-found: 1
Reference: [AES91] <author> S.S. Abi-Ezzi and L.A. Shirman. </author> <title> Tessellation of curved surfaces under highly varying transformations. </title> <booktitle> Proceedings of Eurographics'91, </booktitle> <pages> pages 385-97, </pages> <year> 1991. </year>
Reference-contexts: Most of the current simplification algorithms are restrictive and no efficient algorithms with guaranteed error bounds are known for general topologies [HG94]. Rendering Spline Surfaces: Many algorithms are known in the literature for tessellating spline surfaces and rendering the resulting polygons <ref> [AES91, RHD89, LC93, KML95, BR94] </ref>. In particular, Rockwood et. al. [RHD89] presented the first real time algorithm for rendering trimmed surfaces.
Reference: [BR94] <author> C.L. Bajaj and A. Royappa. </author> <title> Triangulation and display of rational parametric surfaces. </title> <booktitle> In Proceedings of Visualization'94, </booktitle> <pages> pages 69-76, </pages> <publisher> IEEE Computer Society, Los Alamitos, </publisher> <address> CA, </address> <year> 1994. </year>
Reference-contexts: Most of the current simplification algorithms are restrictive and no efficient algorithms with guaranteed error bounds are known for general topologies [HG94]. Rendering Spline Surfaces: Many algorithms are known in the literature for tessellating spline surfaces and rendering the resulting polygons <ref> [AES91, RHD89, LC93, KML95, BR94] </ref>. In particular, Rockwood et. al. [RHD89] presented the first real time algorithm for rendering trimmed surfaces.
Reference: [Coh83] <author> E. Cohen. </author> <title> Some mathematical tools for a modeler's workbench. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 3(7) </volume> <pages> 63-66, </pages> <year> 1983. </year>
Reference-contexts: The point closest to the required tessellant is chosen. 7 3 Model generation In this section, we describe the solid modeling system used for computing B-reps from CSG trees. Free-form surfaces have been used previously in modeling systems. The Alpha 1 <ref> [Coh83] </ref> and Geomod [Til83] modeling systems use NURBS to describe the B-rep. The primitives may correspond to polyhedra or solids whose boundaries can be represented in terms of rational spline surfaces.
Reference: [DLW93] <author> T. Derose, M. Lounsbery, and J. Warren. </author> <title> Multiresolution analysis for surfaces of arbitrary topology type. </title> <type> Technical Report TR 93-10-05, </type> <institution> Department of Computer Science, University of Washington, </institution> <year> 1993. </year>
Reference-contexts: Visualization of Large Data Sets: Current high-end graphics systems are not able to render polygonal representation of complex models described using millions of polygons at interactive frame rates. Many algorithms based on visibility preprocessing and multiresolu-tion modeling have been proposed for faster display of such models <ref> [Tel92, Fun93, SZL92, Tur92, RB92, HDD + 93, DLW93, GKM93] </ref>. However, visibility methods have been shown useful for densely occluded polyhedral environments only [Tel92]. Most of the current simplification algorithms are restrictive and no efficient algorithms with guaranteed error bounds are known for general topologies [HG94].
Reference: [Far93] <author> G. Farin. </author> <title> Curves and Surfaces for Computer Aided Geometric Design: A Practical Guide. </title> <publisher> Academic Press Inc., </publisher> <year> 1993. </year> <month> 21 </month>
Reference-contexts: n where V ij = hw ij x ij ; w ij y ij ; w ij z ij ; w ij i are the control points of the patch in homogeneous coordinates and B m i (s) = m ! s i (1 s) mi is the Bernstein polynomial <ref> [Far93] </ref>. The domain of the surface is defined on the unit square 0 s; t 1 in the (s; t) plane. <p> It encloses each surface by an axis-aligned bounding box, projects the bounding box along the X, Y and Z axes, sorts the resulting intervals and computes the overlapping bounding boxes. Each 9 Bezier surface is contained in the convex hull of its control points <ref> [Far93] </ref>. For each pair of overlapping bounding boxes, the algorithm checks whether the convex hulls of their control points intersect. This is reduced to a linear programming problem in three dimensions and solved using Seidel's incremental linear time algorithm [Sei90]. <p> The new edges between these solids correspond to pairs of intersecting surfaces between S 1 and S 2 (e.g. 1b and 7b). 4 Display System In this section, we describe the trimmed NURBS visualization system. This system subdivides NURBS into trimmed Bezier surfaces <ref> [KML95, Far93] </ref>, which allow more efficient display than general splines. Our algorithm tessellates the surfaces into triangles and renders these triangles using the standard graphics pipeline. Special attention is paid to the prevention of cracks between adjacent surfaces along the common boundaries and intersections curves.
Reference: [Fe89] <author> H. Fuchs and J. Poulton et. </author> <title> Pixel-planes 5: A heterogeneous multiprocessor graphics system using processor-enhanced memories. </title> <booktitle> In Proc. of ACM Siggraph, </booktitle> <pages> pages 79-88, </pages> <year> 1989. </year>
Reference-contexts: Its application to parts of a submarine storage and handling system composed of about 2; 000 CSG trees resulted in a B-rep consisting of more than 30; 000 trimmed surfaces, which can be rendered at interactive rates on Pixel-Planes 5 <ref> [Fe89] </ref> by our display system. 1.1 Prior Work There is a great deal of work in the modeling and rendering literature related to model conversion, displaying large data sets and multiresolution modeling.
Reference: [Fun93] <author> T. A. Funkhouser. </author> <title> Database and Display Algorithms for Interactive Visualization of Architecture Models. </title> <type> PhD thesis, </type> <institution> CS Division, UC Berkeley, </institution> <year> 1993. </year>
Reference-contexts: Visualization of Large Data Sets: Current high-end graphics systems are not able to render polygonal representation of complex models described using millions of polygons at interactive frame rates. Many algorithms based on visibility preprocessing and multiresolu-tion modeling have been proposed for faster display of such models <ref> [Tel92, Fun93, SZL92, Tur92, RB92, HDD + 93, DLW93, GKM93] </ref>. However, visibility methods have been shown useful for densely occluded polyhedral environments only [Tel92]. Most of the current simplification algorithms are restrictive and no efficient algorithms with guaranteed error bounds are known for general topologies [HG94].
Reference: [GKM93] <author> N. Greene, M. Kass, and G. Miller. </author> <title> Hierarchical z-buffer visibility. </title> <booktitle> In Proc. of ACM Siggraph, </booktitle> <pages> pages 231-238, </pages> <year> 1993. </year>
Reference-contexts: Visualization of Large Data Sets: Current high-end graphics systems are not able to render polygonal representation of complex models described using millions of polygons at interactive frame rates. Many algorithms based on visibility preprocessing and multiresolu-tion modeling have been proposed for faster display of such models <ref> [Tel92, Fun93, SZL92, Tur92, RB92, HDD + 93, DLW93, GKM93] </ref>. However, visibility methods have been shown useful for densely occluded polyhedral environments only [Tel92]. Most of the current simplification algorithms are restrictive and no efficient algorithms with guaranteed error bounds are known for general topologies [HG94].
Reference: [GMTF89] <author> J. Goldfeather, S. Molnar, G. Turk, and H. Fuchs. </author> <title> Near real-time csg rendering using tree normalization and geometric pruning. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 9(3) </volume> <pages> 20-28, </pages> <year> 1989. </year>
Reference-contexts: We categorize it into four types: Direct Rendering of CSG Models: Some graphics systems include capabilities to directly render CSG models <ref> [Kea94, GMTF89] </ref>. However, they either restrict the number of CSG operations or the degrees of the primitives or are not able to render complex models. Algorithms based on enhanced Z-buffer often require multiple rendering passes along with fast rasterizing systems for such primitives [RW90].
Reference: [HDD + 93] <author> H. Hoppe, T. Derose, T. Duchamp, J. Mcdonald, and W. Stuetzle. </author> <title> Mesh optimization. </title> <booktitle> In Proc. of ACM Siggraph, </booktitle> <pages> pages 19-26, </pages> <year> 1993. </year>
Reference-contexts: Visualization of Large Data Sets: Current high-end graphics systems are not able to render polygonal representation of complex models described using millions of polygons at interactive frame rates. Many algorithms based on visibility preprocessing and multiresolu-tion modeling have been proposed for faster display of such models <ref> [Tel92, Fun93, SZL92, Tur92, RB92, HDD + 93, DLW93, GKM93] </ref>. However, visibility methods have been shown useful for densely occluded polyhedral environments only [Tel92]. Most of the current simplification algorithms are restrictive and no efficient algorithms with guaranteed error bounds are known for general topologies [HG94].
Reference: [HG94] <author> P. Heckbert and M. </author> <title> Garland. Multiresolution modeling for fast rendering. </title> <booktitle> Proceedings of Graphics Interface, </booktitle> <year> 1994. </year>
Reference-contexts: However, visibility methods have been shown useful for densely occluded polyhedral environments only [Tel92]. Most of the current simplification algorithms are restrictive and no efficient algorithms with guaranteed error bounds are known for general topologies <ref> [HG94] </ref>. Rendering Spline Surfaces: Many algorithms are known in the literature for tessellating spline surfaces and rendering the resulting polygons [AES91, RHD89, LC93, KML95, BR94]. In particular, Rockwood et. al. [RHD89] presented the first real time algorithm for rendering trimmed surfaces.
Reference: [Hof89] <author> C.M. Hoffmann. </author> <title> Geometric and Solid Modeling. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, California, </address> <year> 1989. </year>
Reference-contexts: Splines also find application in modeling body parts for medical imaging and molecules for drug design, among other things. In addition, solid models composed of polyhedra, spheres, cones, tori, prisms, solids of revolution etc. are widely used in CAD/CAM, virtual reality, engineering simulation and animation <ref> [Hof89, RR92] </ref>. All these solids can also be easily represented in terms of rational spline surfaces. These solids and their Boolean combinations, i.e. union, intersection and difference, are used to generate large-scale models like those of fl Supported in part by Alfred P. <p> Other techniques and systems for direct rendering are based on ray-casting [KE89, Rot82] and are currently not fast enough. CSG to B-rep Conversion: There is considerable literature on computing B-reps from CSG solids defined using polyhedral primitives, as surveyed in <ref> [Hof89, RR92] </ref>. A number of techniques to improve the robustness of such systems have been proposed as well [Seg90]. However, no such robust algorithms and systems are known for solid models composed of curved or spline primitives [Hof89, RR92]. <p> on computing B-reps from CSG solids defined using polyhedral primitives, as surveyed in <ref> [Hof89, RR92] </ref>. A number of techniques to improve the robustness of such systems have been proposed as well [Seg90]. However, no such robust algorithms and systems are known for solid models composed of curved or spline primitives [Hof89, RR92]. The main problem lies in accurate, robust and efficient computation of the intersection of spline surfaces. <p> Surface intersection is an active area of research and some of the recent papers have proposed algorithms to compute all 2 components and piecewise linear or spline approximations to the intersection curves based on tracing methods <ref> [SN91, Hoh91, Hof89, KM94] </ref>. However, these representations are either inaccurate or inconsistent for Boolean operations on complex models. Therefore, some of the current solid modelers use polyhedral approximations of these primitives and compute the B-reps of the resulting solids in terms of polygons. <p> Currently our system handles primitives composed of tensor-product surfaces only, but can be easily extended to include solids defined using triangular surfaces. It makes the following set of assumptions for each Boolean operation: * All primitives are regularized solids <ref> [Hof89] </ref> and all Boolean operations result in regularized solids. That is, the closure of the interior of the solid corresponds to the original model. * The intersection between all pairs of overlapping surfaces is well-conditioned and there are no degeneracies. <p> However, the degree of the intersection curve can be as high as 4m 2 n 2 for two m fi n tensor-product surfaces and the curve cannot be exactly represented as a Bezier curve (for most cases) <ref> [Hof89] </ref>. Typical values of m and n are two or three and can be as high as ten or fifteen in practice. In addition, the intersection curve may consist of multiple components, closed loops, singularities etc., which add to its geometric complexity. <p> In addition, the intersection curve may consist of multiple components, closed loops, singularities etc., which add to its geometric complexity. A number of algorithms based on subdivision, lattice evaluation and marching <ref> [SN91, Hoh91, Hof89, KM94] </ref> are known. These algorithms compute piecewise linear or spline approximations of the intersection curve. However, when it comes to computing the B-reps of CSG models defined using a series of Boolean operations, these representations may not guarantee: 1. <p> A major problem in the application of our system to different models is numerical accuracy of computations and its impact on the robustness of the entire system. The problem of building robust solid modeling systems based on floating-point computation is fairly open and no good solutions are known <ref> [Hof89] </ref>. In our case, the algorithm uses *-tolerances at different parts of the overall algorithm.
Reference: [Hoh91] <author> M.E. Hohmeyer. </author> <title> A surface intersection algorithm based on loop detection. </title> <journal> International Journal of Computational Geometry and Applications, </journal> <volume> 1(4) </volume> <pages> 473-490, </pages> <year> 1991. </year> <note> Special issue on Solid Modeling. </note>
Reference-contexts: Surface intersection is an active area of research and some of the recent papers have proposed algorithms to compute all 2 components and piecewise linear or spline approximations to the intersection curves based on tracing methods <ref> [SN91, Hoh91, Hof89, KM94] </ref>. However, these representations are either inaccurate or inconsistent for Boolean operations on complex models. Therefore, some of the current solid modelers use polyhedral approximations of these primitives and compute the B-reps of the resulting solids in terms of polygons. <p> In addition, the intersection curve may consist of multiple components, closed loops, singularities etc., which add to its geometric complexity. A number of algorithms based on subdivision, lattice evaluation and marching <ref> [SN91, Hoh91, Hof89, KM94] </ref> are known. These algorithms compute piecewise linear or spline approximations of the intersection curve. However, when it comes to computing the B-reps of CSG models defined using a series of Boolean operations, these representations may not guarantee: 1.
Reference: [KE89] <author> G. Kedem and J.L. Ellis. </author> <booktitle> The ray-casting machine. In Parallel Processing for Computer Vision and Display, </booktitle> <pages> pages 378-401, </pages> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: Algorithms based on enhanced Z-buffer often require multiple rendering passes along with fast rasterizing systems for such primitives [RW90]. Other techniques and systems for direct rendering are based on ray-casting <ref> [KE89, Rot82] </ref> and are currently not fast enough. CSG to B-rep Conversion: There is considerable literature on computing B-reps from CSG solids defined using polyhedral primitives, as surveyed in [Hof89, RR92]. A number of techniques to improve the robustness of such systems have been proposed as well [Seg90].
Reference: [Kea94] <author> M. Kelley and K. Gould et. al. </author> <title> Hardware accelerated rendering of csg and transparency. </title> <booktitle> In Proc. of ACM Siggraph, </booktitle> <pages> pages 177-184, </pages> <year> 1994. </year>
Reference-contexts: We categorize it into four types: Direct Rendering of CSG Models: Some graphics systems include capabilities to directly render CSG models <ref> [Kea94, GMTF89] </ref>. However, they either restrict the number of CSG operations or the degrees of the primitives or are not able to render complex models. Algorithms based on enhanced Z-buffer often require multiple rendering passes along with fast rasterizing systems for such primitives [RW90].
Reference: [KM94] <author> S. Krishnan and D. Manocha. </author> <title> An efficient surface intersection algorithm based on the lower dimensional formulation. </title> <type> Technical Report TR94-062, </type> <institution> Department of Computer Science, University of North Carolina, </institution> <year> 1994. </year>
Reference-contexts: Surface intersection is an active area of research and some of the recent papers have proposed algorithms to compute all 2 components and piecewise linear or spline approximations to the intersection curves based on tracing methods <ref> [SN91, Hoh91, Hof89, KM94] </ref>. However, these representations are either inaccurate or inconsistent for Boolean operations on complex models. Therefore, some of the current solid modelers use polyhedral approximations of these primitives and compute the B-reps of the resulting solids in terms of polygons. <p> We use a recently developed algorithm for computing the intersection of rational parametric surfaces <ref> [KM94] </ref>. In this algorithm, we maintain an accurate analytic representation of the intersection curve 5 in the domain of the two surfaces. This can be used to obtain accurate trimming curves during the CSG operation. <p> In addition, the intersection curve may consist of multiple components, closed loops, singularities etc., which add to its geometric complexity. A number of algorithms based on subdivision, lattice evaluation and marching <ref> [SN91, Hoh91, Hof89, KM94] </ref> are known. These algorithms compute piecewise linear or spline approximations of the intersection curve. However, when it comes to computing the B-reps of CSG models defined using a series of Boolean operations, these representations may not guarantee: 1. <p> To compute its intersection with another trimmed or non-trimmed surface G (u; v), it initially treats each parameterization as a non-trimmed surface and computes all the components of the intersection curves in the domain 0 s; t; u; v 1 <ref> [KM94] </ref>. Let these components be denoted as c 1 ; c 2 ; : : : ; c p , as shown in Fig. 5. Let the corresponding components in the domain of G (u; v) be c 1 ; c 2 ; : : : ; c p . <p> If the number of intersections is odd, the point is inside the solid, otherwise it is outside. The intersection of rays with trimmed Bezier surfaces is computed using eigenvalue methods <ref> [KM94] </ref>. Checking whether the resulting point lies inside the trimmed domain is based on planar triangulation [Sei91]. The intersection curves between the boundaries of the two solids partition the surfaces into multiple regions.
Reference: [KM95] <author> S. Kumar and D. Manocha. </author> <title> Efficient rendering of trimmed nurbs surfaces. </title> <booktitle> Computer-Aided Design, </booktitle> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: The system makes use of algorithms for back-patch culling (an extension of back-face culling for polygons to Bezier patches), bounds for triangulation and coherence between successive frames for general NURBS models, presented in [KML95]. In this section, we extend and improve the algorithms presented in <ref> [KM95] </ref> to handle trimmed surfaces and B-reps of CSG models described in the previous section. Given a Bezier surface and the viewing parameters, the algorithm tessellates the domain into cells based on size criterion and an estimation of curvature of the surfaces. <p> To speed up the display process, the algorithm incrementally adds or deletes triangles as a function of the viewing parameters. The algorithm for trimmed surfaces traces the trimming curve on the grid of iso-parametric u and v lines in the parametric domain 12 <ref> [KM95] </ref>. In brief, the rendering algorithm for trimmed patches is as follows: 1. Create rectangular cells from the uniform tessellation of the surface based on T OL for the surface. 2. <p> The new set of crossings is used to either decompose the original triangulation of a region or merge the triangulations of two or more adjacent regions. This is quite like the algorithm in <ref> [KM95] </ref>, except we avoid the per-cell cost. The cost of our algorithm is dependent on the actual intersections of the cells with the curve segments.
Reference: [KML95] <author> S. Kumar, D. Manocha, and A. Lastra. </author> <title> Interactive display of large scale nurbs models. </title> <booktitle> In Proc. of ACM Interactive 3D Graphics Conference, </booktitle> <pages> pages 51-58, </pages> <year> 1995. </year>
Reference-contexts: Most of the current simplification algorithms are restrictive and no efficient algorithms with guaranteed error bounds are known for general topologies [HG94]. Rendering Spline Surfaces: Many algorithms are known in the literature for tessellating spline surfaces and rendering the resulting polygons <ref> [AES91, RHD89, LC93, KML95, BR94] </ref>. In particular, Rockwood et. al. [RHD89] presented the first real time algorithm for rendering trimmed surfaces. <p> However, it is not fast enough for complex models and its implementation as part of SGI's GL library can render surfaces 3 composed of at most a few hundred trimmed Bezier surfaces at interactive rates on an SGI Onyx <ref> [KML95] </ref>. 1.2 Overview Given a CSG model, our solid modeler represents each primitive as a collection of Bezier surfaces, performs accurate Boolean operations and represents the B-rep as a collection of trimmed Bezier surfaces. It represents the trimming curves as piecewise algebraic space curves along with bounding volumes. <p> The new edges between these solids correspond to pairs of intersecting surfaces between S 1 and S 2 (e.g. 1b and 7b). 4 Display System In this section, we describe the trimmed NURBS visualization system. This system subdivides NURBS into trimmed Bezier surfaces <ref> [KML95, Far93] </ref>, which allow more efficient display than general splines. Our algorithm tessellates the surfaces into triangles and renders these triangles using the standard graphics pipeline. Special attention is paid to the prevention of cracks between adjacent surfaces along the common boundaries and intersections curves. <p> The system makes use of algorithms for back-patch culling (an extension of back-face culling for polygons to Bezier patches), bounds for triangulation and coherence between successive frames for general NURBS models, presented in <ref> [KML95] </ref>. In this section, we extend and improve the algorithms presented in [KM95] to handle trimmed surfaces and B-reps of CSG models described in the previous section. <p> Our algorithm exploits this property by making use of the triangulation at the previous frame and computing a small number of extra triangles for the current frame. The incremental algorithm for decomposing the domain into cells divides some of them into rectangular subcells or merges adjacent cells into supercells <ref> [KML95] </ref>. These subcells or supercells are used as normal cells for successive frames. For trimmed surfaces this results in small changes in cell intersections and triangulation and we do not need to retrace each trimming curve or triangulate each region.
Reference: [LC93] <author> W.L. Luken and Fuhua Cheng. </author> <title> Rendering trimmed nurb surfaces. </title> <institution> Computer science research report 18669(81711), IBM Research Division, </institution> <year> 1993. </year> <month> 22 </month>
Reference-contexts: Most of the current simplification algorithms are restrictive and no efficient algorithms with guaranteed error bounds are known for general topologies [HG94]. Rendering Spline Surfaces: Many algorithms are known in the literature for tessellating spline surfaces and rendering the resulting polygons <ref> [AES91, RHD89, LC93, KML95, BR94] </ref>. In particular, Rockwood et. al. [RHD89] presented the first real time algorithm for rendering trimmed surfaces.
Reference: [RB92] <author> J.R. Rossignac and P. Borrel. </author> <title> Multi-resolution 3d approximations for rendering complex scenes. </title> <type> Technical Report RC 17697, </type> <institution> IBM T.J. Watson Research Center, </institution> <year> 1992. </year>
Reference-contexts: Visualization of Large Data Sets: Current high-end graphics systems are not able to render polygonal representation of complex models described using millions of polygons at interactive frame rates. Many algorithms based on visibility preprocessing and multiresolu-tion modeling have been proposed for faster display of such models <ref> [Tel92, Fun93, SZL92, Tur92, RB92, HDD + 93, DLW93, GKM93] </ref>. However, visibility methods have been shown useful for densely occluded polyhedral environments only [Tel92]. Most of the current simplification algorithms are restrictive and no efficient algorithms with guaranteed error bounds are known for general topologies [HG94].
Reference: [RHD89] <author> A. Rockwood, K. Heaton, and T. Davis. </author> <title> Real-time rendering of trimmed surfaces. </title> <booktitle> In Proceedings of ACM Siggraph, </booktitle> <pages> pages 107-17, </pages> <year> 1989. </year>
Reference-contexts: Most of the current simplification algorithms are restrictive and no efficient algorithms with guaranteed error bounds are known for general topologies [HG94]. Rendering Spline Surfaces: Many algorithms are known in the literature for tessellating spline surfaces and rendering the resulting polygons <ref> [AES91, RHD89, LC93, KML95, BR94] </ref>. In particular, Rockwood et. al. [RHD89] presented the first real time algorithm for rendering trimmed surfaces. <p> Rendering Spline Surfaces: Many algorithms are known in the literature for tessellating spline surfaces and rendering the resulting polygons [AES91, RHD89, LC93, KML95, BR94]. In particular, Rockwood et. al. <ref> [RHD89] </ref> presented the first real time algorithm for rendering trimmed surfaces. Given a NURBS model, Rockwood et. al. decompose it into a series of trimmed Bezier surfaces, split the trimmed surfaces into patches bounded by monotonic curve segments and triangulate the resulting patches. <p> We find the skeleton by starting with the polygon connecting all the points of inflection and do a naive 2 diagonal-based subdivision to eliminate non-essential points from this polygon. If we pick the points on the skeleton, no non-simple polygons are generated. Notice this is not much unlike Rockwood's <ref> [RHD89] </ref> monotone decomposition of trimming curves, except we avoid the overhead of actually doing the decomposition and dividing the patches. 4.3 Crack Prevention A trimming curve of a patch is a sequence of curves of intersection with neighboring patches. Each of these component curves are shared by two patches. <p> The rendering algorithm produces topologically correct triangulations. As we zoom in or out on a model, it produces varying levels of detail incrementally and no visual artifacts appear. The trimming algorithm also works for trimming curves represented as piecewise linear or spline curves. Compared to Rockwood et. al.'s algorithm <ref> [RHD89] </ref>, our trimming algorithm is faster by a factor of seven or eight on models consisting of about 200 surfaces on an SGI Onyx. It also produces fewer triangles. We used SGI's GL library implementation based on the [RHD89] algorithm for comparison. <p> Compared to Rockwood et. al.'s algorithm <ref> [RHD89] </ref>, our trimming algorithm is faster by a factor of seven or eight on models consisting of about 200 surfaces on an SGI Onyx. It also produces fewer triangles. We used SGI's GL library implementation based on the [RHD89] algorithm for comparison. We evaluated the performance of our system on parts of a submarine storage and handling system. The model was designed using Catia CAD system.
Reference: [Rot82] <author> S. Roth. </author> <title> Ray casting for modeling solids. </title> <journal> Computer Graphics and Image Processing, </journal> <volume> 18 </volume> <pages> 109-67, </pages> <year> 1982. </year>
Reference-contexts: Algorithms based on enhanced Z-buffer often require multiple rendering passes along with fast rasterizing systems for such primitives [RW90]. Other techniques and systems for direct rendering are based on ray-casting <ref> [KE89, Rot82] </ref> and are currently not fast enough. CSG to B-rep Conversion: There is considerable literature on computing B-reps from CSG solids defined using polyhedral primitives, as surveyed in [Hof89, RR92]. A number of techniques to improve the robustness of such systems have been proposed as well [Seg90].
Reference: [RR92] <author> A.A.G. Requicha and J.R. Rossignac. </author> <title> Solid modeling and beyond. </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pages 31-44, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Splines also find application in modeling body parts for medical imaging and molecules for drug design, among other things. In addition, solid models composed of polyhedra, spheres, cones, tori, prisms, solids of revolution etc. are widely used in CAD/CAM, virtual reality, engineering simulation and animation <ref> [Hof89, RR92] </ref>. All these solids can also be easily represented in terms of rational spline surfaces. These solids and their Boolean combinations, i.e. union, intersection and difference, are used to generate large-scale models like those of fl Supported in part by Alfred P. <p> Other techniques and systems for direct rendering are based on ray-casting [KE89, Rot82] and are currently not fast enough. CSG to B-rep Conversion: There is considerable literature on computing B-reps from CSG solids defined using polyhedral primitives, as surveyed in <ref> [Hof89, RR92] </ref>. A number of techniques to improve the robustness of such systems have been proposed as well [Seg90]. However, no such robust algorithms and systems are known for solid models composed of curved or spline primitives [Hof89, RR92]. <p> on computing B-reps from CSG solids defined using polyhedral primitives, as surveyed in <ref> [Hof89, RR92] </ref>. A number of techniques to improve the robustness of such systems have been proposed as well [Seg90]. However, no such robust algorithms and systems are known for solid models composed of curved or spline primitives [Hof89, RR92]. The main problem lies in accurate, robust and efficient computation of the intersection of spline surfaces.
Reference: [RW90] <author> J. Rossignac and J. Wu. </author> <title> Correct shading of regularized csg solids using a depth-interval buffer. </title> <booktitle> In Eurographics Workshop on Graphics Hardware, </booktitle> <year> 1990. </year>
Reference-contexts: However, they either restrict the number of CSG operations or the degrees of the primitives or are not able to render complex models. Algorithms based on enhanced Z-buffer often require multiple rendering passes along with fast rasterizing systems for such primitives <ref> [RW90] </ref>. Other techniques and systems for direct rendering are based on ray-casting [KE89, Rot82] and are currently not fast enough. CSG to B-rep Conversion: There is considerable literature on computing B-reps from CSG solids defined using polyhedral primitives, as surveyed in [Hof89, RR92].
Reference: [Seg90] <author> M. Segal. </author> <title> Using tolerances to guarantee valid polyhedral modeling results. </title> <booktitle> In Proceedings of ACM Siggraph, </booktitle> <pages> pages 105-114, </pages> <year> 1990. </year>
Reference-contexts: CSG to B-rep Conversion: There is considerable literature on computing B-reps from CSG solids defined using polyhedral primitives, as surveyed in [Hof89, RR92]. A number of techniques to improve the robustness of such systems have been proposed as well <ref> [Seg90] </ref>. However, no such robust algorithms and systems are known for solid models composed of curved or spline primitives [Hof89, RR92]. The main problem lies in accurate, robust and efficient computation of the intersection of spline surfaces.
Reference: [Sei90] <author> R. Seidel. </author> <title> Linear programming and convex hulls made easy. </title> <booktitle> In Proc. 6th Ann. ACM Conf. on Computational Geometry, </booktitle> <pages> pages 211-215, </pages> <address> Berkeley, California, </address> <year> 1990. </year>
Reference-contexts: For each pair of overlapping bounding boxes, the algorithm checks whether the convex hulls of their control points intersect. This is reduced to a linear programming problem in three dimensions and solved using Seidel's incremental linear time algorithm <ref> [Sei90] </ref>. Let F (s; t) be a trimmed surface and its trimmed subset in the domain 0 s; t 1 be bounded by curve segments t 1 ; t 2 ; : : : ; t k .
Reference: [Sei91] <author> R. Seidel. </author> <title> A simple and fast randomized algorithm for computing trapezoidal decompositions and for triangulating polygons. </title> <journal> Computational Geometry Theory & Applications, </journal> <volume> 1(1) </volume> <pages> 51-64, </pages> <year> 1991. </year>
Reference-contexts: Compute a dense linear approximation for each algebraic space curve and a polygonal approximation (P ) of the domain of F (s; t). Let Q be the corresponding polygonal approximation of the domain of G (u; v). Compute a triangulation of the domain (we use Seidel's triangulation algorithm <ref> [Sei91] </ref>). 2. Using a dense linear approximation of c i and c i , compute their maximal subsets that lie within P and Q. Approximations to the intersection points (with either P or Q) are computed between the resulting line segments. <p> If the number of intersections is odd, the point is inside the solid, otherwise it is outside. The intersection of rays with trimmed Bezier surfaces is computed using eigenvalue methods [KM94]. Checking whether the resulting point lies inside the trimmed domain is based on planar triangulation <ref> [Sei91] </ref>. The intersection curves between the boundaries of the two solids partition the surfaces into multiple regions. These regions have the property that all points in their interior are either inside or outside the other solid. <p> The trimming curve forms another polygonal chain offset from the staircase. Partition this region across cell edges. 5. What results is a set of planar straight line graphs (PSLGs). Triangulate each PSLG. (We use Siedel's algorithm <ref> [Sei91] </ref>.) To prevent cracks in the display, no additional points on the curve are introduced in the region partitioning step or the triangulation step. 1 This chain can be degenerate, e.g. it is null if a trimming curve is contained in a cell. 13 on the right shows a self intersecting
Reference: [SN91] <author> T.W. Sederberg and T. Nishita. </author> <title> Geometric hermite approximation of surface patch intersection curves. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 8 </volume> <pages> 97-114, </pages> <year> 1991. </year>
Reference-contexts: Surface intersection is an active area of research and some of the recent papers have proposed algorithms to compute all 2 components and piecewise linear or spline approximations to the intersection curves based on tracing methods <ref> [SN91, Hoh91, Hof89, KM94] </ref>. However, these representations are either inaccurate or inconsistent for Boolean operations on complex models. Therefore, some of the current solid modelers use polyhedral approximations of these primitives and compute the B-reps of the resulting solids in terms of polygons. <p> In addition, the intersection curve may consist of multiple components, closed loops, singularities etc., which add to its geometric complexity. A number of algorithms based on subdivision, lattice evaluation and marching <ref> [SN91, Hoh91, Hof89, KM94] </ref> are known. These algorithms compute piecewise linear or spline approximations of the intersection curve. However, when it comes to computing the B-reps of CSG models defined using a series of Boolean operations, these representations may not guarantee: 1.
Reference: [SZL92] <author> W.J. Schroeder, J.A. Zarge, and W.E. Lorensen. </author> <title> Decimation of triangle meshes. </title> <booktitle> In Proc. of ACM Siggraph, </booktitle> <pages> pages 65-70, </pages> <year> 1992. </year>
Reference-contexts: Visualization of Large Data Sets: Current high-end graphics systems are not able to render polygonal representation of complex models described using millions of polygons at interactive frame rates. Many algorithms based on visibility preprocessing and multiresolu-tion modeling have been proposed for faster display of such models <ref> [Tel92, Fun93, SZL92, Tur92, RB92, HDD + 93, DLW93, GKM93] </ref>. However, visibility methods have been shown useful for densely occluded polyhedral environments only [Tel92]. Most of the current simplification algorithms are restrictive and no efficient algorithms with guaranteed error bounds are known for general topologies [HG94].
Reference: [Tel92] <author> S. J. Teller. </author> <title> Visibility Computations in Densely Occluded Polyheral Environments. </title> <type> PhD thesis, </type> <institution> CS Division, UC Berkeley, </institution> <year> 1992. </year>
Reference-contexts: Visualization of Large Data Sets: Current high-end graphics systems are not able to render polygonal representation of complex models described using millions of polygons at interactive frame rates. Many algorithms based on visibility preprocessing and multiresolu-tion modeling have been proposed for faster display of such models <ref> [Tel92, Fun93, SZL92, Tur92, RB92, HDD + 93, DLW93, GKM93] </ref>. However, visibility methods have been shown useful for densely occluded polyhedral environments only [Tel92]. Most of the current simplification algorithms are restrictive and no efficient algorithms with guaranteed error bounds are known for general topologies [HG94]. <p> Many algorithms based on visibility preprocessing and multiresolu-tion modeling have been proposed for faster display of such models [Tel92, Fun93, SZL92, Tur92, RB92, HDD + 93, DLW93, GKM93]. However, visibility methods have been shown useful for densely occluded polyhedral environments only <ref> [Tel92] </ref>. Most of the current simplification algorithms are restrictive and no efficient algorithms with guaranteed error bounds are known for general topologies [HG94]. Rendering Spline Surfaces: Many algorithms are known in the literature for tessellating spline surfaces and rendering the resulting polygons [AES91, RHD89, LC93, KML95, BR94].
Reference: [Til83] <author> W. Tiller. </author> <title> Rational b-splines for curve and surface representation. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 3(6) </volume> <pages> 61-69, </pages> <year> 1983. </year>
Reference-contexts: The point closest to the required tessellant is chosen. 7 3 Model generation In this section, we describe the solid modeling system used for computing B-reps from CSG trees. Free-form surfaces have been used previously in modeling systems. The Alpha 1 [Coh83] and Geomod <ref> [Til83] </ref> modeling systems use NURBS to describe the B-rep. The primitives may correspond to polyhedra or solids whose boundaries can be represented in terms of rational spline surfaces.
Reference: [Tur92] <author> G. Turk. </author> <title> Re-tiling polygonal surfaces. </title> <booktitle> In Proc. of ACM Siggraph, </booktitle> <pages> pages 55-64, </pages> <year> 1992. </year>
Reference-contexts: Visualization of Large Data Sets: Current high-end graphics systems are not able to render polygonal representation of complex models described using millions of polygons at interactive frame rates. Many algorithms based on visibility preprocessing and multiresolu-tion modeling have been proposed for faster display of such models <ref> [Tel92, Fun93, SZL92, Tur92, RB92, HDD + 93, DLW93, GKM93] </ref>. However, visibility methods have been shown useful for densely occluded polyhedral environments only [Tel92]. Most of the current simplification algorithms are restrictive and no efficient algorithms with guaranteed error bounds are known for general topologies [HG94].
References-found: 32

