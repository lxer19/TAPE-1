URL: http://www.cs.huji.ac.il/~noam/hard.ps
Refering-URL: http://www.cs.huji.ac.il/~noam/papers.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Hardness vs. Randomness construction reveals an equivalence between the problem of proving lower bounds and
Author: Noam Nisan Avi Wigderson 
Note: This  
Address: Jerusalem, Israel  Jerusalem, Israel  
Affiliation: Institute of Computer Science Hebrew University of  Institute of Computer Science Hebrew University of  
Abstract: We present a simple new c onstruction of a pseudorandom bit generator, based on the constant depth generators of [N]. It stretches a short string of truly random bits into a long string that looks random to any algorithm from a complexity class C (eg P, NC, PSPACE, ...) using an arbitrary function that is hard for C. Our construction has many consequences. The most direct one is that efficient deterministic simulation of randomized algorithms is possible under much weaker assumptions than previously known. The efficiency of the simulations depends on the strength of the assumptions, and may achieve P =BPP. We believe that our results are very strong evidence that the gap between randomized and deterministic complexity is not large. Using the known lower bounds for constant depth circuits, our construction yields an unconditionally proven pseudorandom generator for constant depth circuits. As an application of this generator we characterize the power of NP with a random oracle. 
Abstract-found: 1
Intro-found: 1
Reference: [AW] <author> M. Ajtai and A. Wigderson, </author> <title> "Deterministic simulation of Probabilistic constant depth circuits", </title> <booktitle> 26th FOCS, </booktitle> <pages> pp. 11-19, </pages> <year> 1985. </year>
Reference-contexts: Under this assumption they obtain RNC e&gt;0 DSPACE (n e ). As our construction is parallel, we can obtain: Theorem 3: If PSPACE cannot be approximated by NC circuits then RNC DSPACE (n e ) Randomized Constant Depth Circuits Ajtai and Wigderson <ref> [AW] </ref> studied the simulation of probabilistic constant depth circuits, since for them lower bounds exist. They devised a complicated generator, based on the proof methods of the parity lower bound, that gav e the first nontrivial simulation result proven without any assumptions: RAC 0 e&gt;0 DSPACE (n e ).
Reference: [Ba] <author> L. Babai, </author> <title> "Trading group theory for randomness", </title> <booktitle> 17th STOC, </booktitle> <pages> pp. 421-429, </pages> <year> 1975. </year>
Reference-contexts: For a com plexity class C, define almost -C = -L :L C A for almost all oracles A-. Baker and Gill [BG] proved that almost -P = BPP, suggesting that BPP is the right probabilistic analog of P. Babai <ref> [Ba] </ref> introduced the class AM (Arthur-Merlin games) and proposed it as a probabilistic analog of NP. We justify this intuition, answering an open question of Babai and Sipser (see [BM]). Theorem 6: almost -NP = AM. <p> The class almost -C can be thought of as a natural probabilistic analogue of the class C. The following theorem is well known ([Ku], [BG]), and underscores the importance of BPP as the random analogue of P: Theorem: BPP=almost-P Babai <ref> [Ba] </ref> introduced the class AM. An AM Turing machine is a machine that may use both randomization and nondeterminism, but in this order only, first ip as many random bits as necessary and then use nondeterminism. <p> The randomization stage of the computation is called the "Arthur" stage and the second stage, the nondeterministic one is called the "Merlin" stage. For exact definitions as well as motivation refer to <ref> [Ba] </ref>, [BaM], also see [GS]. [BaM] and [GS] raised the question of whether AM=almost-NP? This would strengthen the feeling that AM is the probabilistic analogue of NP. Our results imply that this is indeed the case. Theorem 6: AM=almost-NP. Proof: We first show that AM almost -NP.
Reference: [BG] <author> C.H. Bennett and J. Gill, </author> <title> "Relative to a random oracle A, P A NP A Co -NP A with probability 1", </title> <journal> SIAM J. Comp. </journal> <volume> 10, </volume> <year> 1981. </year>
Reference-contexts: The only other complexity class for which pseudorandom generators are unconditionally proven to exist is Logspace [BNS]. Random Oracles The power of random oracles is an old subject of interest <ref> [BG, BGS] </ref>. For a com plexity class C, define almost -C = -L :L C A for almost all oracles A-. Baker and Gill [BG] proved that almost -P = BPP, suggesting that BPP is the right probabilistic analog of P. <p> Random Oracles The power of random oracles is an old subject of interest [BG, BGS]. For a com plexity class C, define almost -C = -L :L C A for almost all oracles A-. Baker and Gill <ref> [BG] </ref> proved that almost -P = BPP, suggesting that BPP is the right probabilistic analog of P. Babai [Ba] introduced the class AM (Arthur-Merlin games) and proposed it as a probabilistic analog of NP. We justify this intuition, answering an open question of Babai and Sipser (see [BM]). <p> The class almost -C can be thought of as a natural probabilistic analogue of the class C. The following theorem is well known ([Ku], <ref> [BG] </ref>), and underscores the importance of BPP as the random analogue of P: Theorem: BPP=almost-P Babai [Ba] introduced the class AM.
Reference: [BaM] <author> L. Babai and S. Moran, "Arthur Merlin games: </author> <title> a randomized proof system, and a hierarchy of complexity classes", </title> <journal> JCSS 36(2), </journal> <pages> pp. 254-276, </pages> <year> 1988. </year> <note> [BFNW]L. </note> <author> Babai, L. Fortnow, N. N isan and A. Wigderson, </author> <title> "BPP has weak subexponen-tial simulations unless EXPTIME has publishable proofs", </title> <booktitle> proceedings of struc tures in complexity theory, </booktitle> <year> 1991. </year>
Reference-contexts: The randomization stage of the computation is called the "Arthur" stage and the second stage, the nondeterministic one is called the "Merlin" stage. For exact definitions as well as motivation refer to [Ba], <ref> [BaM] </ref>, also see [GS]. [BaM] and [GS] raised the question of whether AM=almost-NP? This would strengthen the feeling that AM is the probabilistic analogue of NP. Our results imply that this is indeed the case. Theorem 6: AM=almost-NP. Proof: We first show that AM almost -NP. <p> The randomization stage of the computation is called the "Arthur" stage and the second stage, the nondeterministic one is called the "Merlin" stage. For exact definitions as well as motivation refer to [Ba], <ref> [BaM] </ref>, also see [GS]. [BaM] and [GS] raised the question of whether AM=almost-NP? This would strengthen the feeling that AM is the probabilistic analogue of NP. Our results imply that this is indeed the case. Theorem 6: AM=almost-NP. Proof: We first show that AM almost -NP.
Reference: [BH] <author> R. Boppana and R. </author> <title> Hirschfeld, "Pseudorandom generators and complexity classes", </title> <booktitle> In "Randomness and Computation", </booktitle> <volume> volume 5, </volume> <editor> Editor S. Micali, </editor> <booktitle> of Advances in Computing Research, </booktitle> <publisher> JAI Press, </publisher> <address> Greenwich, </address> <year> 1989, </year> <month> 1--26. </month>
Reference-contexts: Yao [Ya] shows how the closeness of approximation can be amplified by xor-ing multiple copies of f. A full proof of this lemma may be found in <ref> [BH] </ref>. Lemma 2.2 (Yao) : Let f 1 , . . . , f k all be (e, S )-hard.
Reference: [BM] <author> M. Blum and S. Micali, </author> <title> "How to generate cryptographically strong sequences of pseudo random bits", </title> <booktitle> 23rd FOCS, </booktitle> <pages> pp. 112-117, </pages> <year> 1982. </year>
Reference-contexts: Babai [Ba] introduced the class AM (Arthur-Merlin games) and proposed it as a probabilistic analog of NP. We justify this intuition, answering an open question of Babai and Sipser (see <ref> [BM] </ref>). Theorem 6: almost -NP = AM. The proof relies on a description of almost -NP as a probabilistic, exponential size, constant-depth circuit, and our generator. <p> Random Oracles The existence of our pseudorandom generator for constant depth circuits has implications concerning the power of random oracles for classes in the polynomial time hierarchy. Let C be any complexity class (e.g. P, NP, ...). As in <ref> [BM] </ref> we define the class almost -C to be the set of languages L such that: Pr =1 where A is an oracle chosen at random. The class almost -C can be thought of as a natural probabilistic analogue of the class C.
Reference: [BNS] <author> L. Babai, N. Nisan and M. Szegedy, </author> <title> "Multiparty protocols and logspace hard pseudorandom sequences", </title> <booktitle> 21st STOC, </booktitle> <pages> pp. 1-11, </pages> <year> 1989. </year>
Reference-contexts: The only other complexity class for which pseudorandom generators are unconditionally proven to exist is Logspace <ref> [BNS] </ref>. Random Oracles The power of random oracles is an old subject of interest [BG, BGS]. For a com plexity class C, define almost -C = -L :L C A for almost all oracles A-.
Reference: [CKS] <author> A. Chandra, D. Kozen and L. Stockmeyer, </author> <title> "Alternation", </title> <journal> J. ACM 28, </journal> <year> 1981. </year>
Reference-contexts: Since the generator "fools" this circuit, the simulation will accept with approximately the same probability that M accepts on a random oracle. Exactly the same technique suffices to show that for any computation in PH, the polynomial time hierarchy ([St], <ref> [CKS] </ref>), a random oracle can be substituted by an "Arthur" phase. Applying to this the fact that BPP S 2 P 2 (see next subsection) allows simulation of the "Arthur" phase by one more alternation and thus we get: Theorem 7: almost-PH = PH 3.5.
Reference: [FLS] <author> M. Furst, R.J. Lipton and L. Stockmeyer, </author> <title> "Pseudo random number generation and space complexity", </title> <journal> Information and Control, </journal> <volume> Vol. 64, </volume> <year> 1985. </year>
Reference: [GM] <author> S. Goldwasser and S. Micali, </author> <title> "Probabilistic Encryption", </title> <journal> JCSS Vol. </journal> <volume> 28, No. 2, </volume> <year> 1984. </year>
Reference-contexts: If G is not a pseudorandom generator then, wlog, for some circuit C, of size n, Pr C (G (x ))=1 &gt; 1 / n, where x is chosen uniformly in -0, 1-l , and y is chosen uniformly in -0, 1-n . We first show, as i n <ref> [GM] </ref> and in [Ya], that this implies that one of the bits of f A (x ) can be predicted from the previous ones.
Reference: [GS] <author> S. Goldwasser and M. Sipser, </author> <title> "Private coins vs. public coins in interactive proof systems", </title> <booktitle> 18th STOC, </booktitle> <pages> pp. 59-68, </pages> <year> 1986. </year>
Reference-contexts: The randomization stage of the computation is called the "Arthur" stage and the second stage, the nondeterministic one is called the "Merlin" stage. For exact definitions as well as motivation refer to [Ba], [BaM], also see <ref> [GS] </ref>. [BaM] and [GS] raised the question of whether AM=almost-NP? This would strengthen the feeling that AM is the probabilistic analogue of NP. Our results imply that this is indeed the case. Theorem 6: AM=almost-NP. Proof: We first show that AM almost -NP. <p> The randomization stage of the computation is called the "Arthur" stage and the second stage, the nondeterministic one is called the "Merlin" stage. For exact definitions as well as motivation refer to [Ba], [BaM], also see <ref> [GS] </ref>. [BaM] and [GS] raised the question of whether AM=almost-NP? This would strengthen the feeling that AM is the probabilistic analogue of NP. Our results imply that this is indeed the case. Theorem 6: AM=almost-NP. Proof: We first show that AM almost -NP.
Reference: [Ha] <author> J. Hastad, </author> <title> "Computational limitations for small depth circuits", </title> <type> Ph.D. thesis, </type> <address> M.I.T. </address> <publisher> press, </publisher> <year> 1986. </year> <month> - 20 </month> - 
Reference-contexts: They devised a complicated generator, based on the proof methods of the parity lower bound, that gav e the first nontrivial simulation result proven without any assumptions: RAC 0 e&gt;0 DSPACE (n e ). Our construction enables us to use directly the best parity lower bound <ref> [Ha] </ref> and obtain the stronger result: Theorem 5: RAC 0 c DSPACE ((logn ) c ) This result is not based on any unproven assumptions. The only other complexity class for which pseudorandom generators are unconditionally proven to exist is Logspace [BNS]. <p> These results appear also in a previous paper of ours [N] with more complete proofs and some exten sions. Our generator is based on the known lower bounds for constant depth circuits computing the parity function. We will use directly the strongest bounds known due to Has tad <ref> [Ha] </ref>. Theorem (Hastad): For any family -C n of circuits of depth d and size at most 2 n d +1 1 and for all large enough n: Pr C n (x )=parity (x ) -1 / 2 1 When x is chosen uniformly over all n-bit strings.
Reference: [HPV] <author> J. Hopcroft, W. Paul and L. Valiant, </author> <title> "On time versus space and related prob lems", </title> <booktitle> 16th FOCS, </booktitle> <year> 1975. </year>
Reference-contexts: explicitly construct certain strong expanders, he proved that either RP = P, or else some nontrivial space-efficient simulation of time-bounded Turing machines is possible. (A space simulation which is significantly better than the best unconditional bound of t (n ) / log t (n ) of Hopcroft, Paul and Valiant <ref> [HPV] </ref>). We use our generator to give a completely different proof of a slightly weaker relation, but using no unproven assumption. Note: Since this manuscript was originally written [BFNW] have strengthened some of the results appearing here. 2. <p> This simulation is significantly better than the best known simulation of time T in space T / logT due to Hopcroft, Paul and Valiant <ref> [HPV] </ref>. A result of a similar avor, giving a tradeoff b etween simulation of of randomness by determinism and of time by space, was proved using different methods by Sipser [Si2] under an unproven assumption regarding certain strong expanders.
Reference: [ILL] <author> R. Impagliazzo L. Levin and M. Luby, </author> <title> "Pseudorandom generators from any one way function", </title> <booktitle> 21st STOC, </booktitle> <year> 1989. </year>
Reference-contexts: This result gav e the first explicit hardness-randomness trade-off: if no poly-size circuit can invert the one-way permutation, then RP e&gt;0 DTIME (2 n e ). Yao's result was recently generalized by Impagli azzo, Levin and Luby <ref> [ILL] </ref> who succeeded in constructing a pseudorandom generator based on an arbitrary one-way function. In all these papers, the generator uses the one-way function f essentially as follows: &gt;From a random string X 0 (the seed), it computes a sequence Xi- by X i +1 =f (X i ). <p> This theorem should be contrasted with the result of Impagliazzo, Levin and Luby <ref> [ILL] </ref> showing the equivalence of proving the existence of one way functions and constructing pseudorandom generators which run in polynomial time. Our construction requires weaker assumptions but yields less efficient pseudorandom generators. <p> G =-G n - is a quick pseudorandom generator simply since f is in EXPTIME. This theorem should be contrasted with the known results regarding the conditions under which polynomial time computable pseudorandom generators exist. Impagliazzo, Levin and Luby <ref> [ILL] </ref> prove the following theorem: Theorem ([ILL]): The following are equivalent (for any 1&gt;e&gt;0): (1) There exists a 1-way function. (2) There exists a polynomial time computable pseudorandom generator G :n e fin.
Reference: [KLi] <author> R. M. Karp and R. Lipton, </author> <title> "Turing machines that take advice", </title> <journal> Enseign. Math. </journal> <volume> 28, </volume> <pages> pp. 191-209, </pages> <year> 1982. </year>
Reference-contexts: 1 (e, n ) is true for some e&gt;0 and all sufficiently large n then for some constants C &gt;1 and e&gt;0, and for every function T (n )=W (C n ), DTIME (T (n ))DSPACE (T 1-e (n )). - 18 - (This result is similar to results in <ref> [KLi] </ref> "translating" non-uniform upper bounds to uniform ones.) Lemma 3.3: If for every e&gt;0, Hypothesis H 1 (e, n ) is false for all sufficiently large n, then for every e&gt;0 and every c &gt;0, there exists a polynomial time generator that converts n e truly random bits to n bits
Reference: [KLu] <author> R.M. Karp and M. Luby, </author> <title> "Monte-Carlo algorithms for enumeration and reliabil ity problems", </title> <booktitle> 24th FOCS, </booktitle> <pages> pp. 56-64, </pages> <year> 1983. </year>
Reference-contexts: Clearly #DNF is #P complete. However, our results imply that: Corollary 3.1: Approx-#DNF DTIME (2 (logn) 14 ) Proof: Karp and Luby <ref> [KLu] </ref> give a probabilistic algorithm for Approx-#DNF that with high probability outputs a number which is within a factor of 2 of the the number of satisfying assignments. It is not difficult to see that this algorithm can be implemented by a random-AC 0 circuit of depth 4.
Reference: [Ku] <author> S. A. Kurtz, </author> <title> "A note on randomized polynomial time, </title> <journal> SIAM J. Comp., </journal> <volume> Vol. 16, No. 5, </volume> <year> 1987. </year>
Reference: [N] <author> N. Nisan. </author> <title> "Pseudo random bits for constant depth circuits", </title> <journal> Combinatorica, </journal> <volume> 11(1), </volume> <pages> pp. 63-70, </pages> <year> 1991. </year>
Reference-contexts: There is no known construction of pseudorandom generators for NC that is based on a general complexity assumption about NC. We propose here a new c onstruction of a generator, based on the constant depth generators of <ref> [N] </ref>, which avoids both problems. This generator does not run in polynomial time, but it can be computed sufficiently fast for our simulation purposes. <p> Since for this class lower bounds are known, we can use our construction to obtain pseudorandom generators for constant depth circuits that do not require any unproven assumption. These results appear also in a previous paper of ours <ref> [N] </ref> with more complete proofs and some exten sions. Our generator is based on the known lower bounds for constant depth circuits computing the parity function. We will use directly the strongest bounds known due to Has tad [Ha].
Reference: [RT] <author> J.H. Reif and J.D. Tygar, </author> <title> "To wards a theory of parallel randomized computa tion", </title> <institution> TR-07-84, Aiken computation lab., Harvard university, </institution> <year> 1984. </year>
Reference-contexts: The only known parallel pseudorandom generator <ref> [RT] </ref> is based on a very specific function. There is no known construction of pseudorandom generators for NC that is based on a general complexity assumption about NC. We propose here a new c onstruction of a generator, based on the constant depth generators of [N], which avoids both problems. <p> In [Ya], the same consequence is obtained assuming one-way permutations exist, an assumption which is stronger than NP Co -NP cannot be approximated by polynomial size circuits. Randomized Parallel Computation Reif and Tygar <ref> [RT] </ref> considered simulation of probabilistic parallel algorithms under intractability assumptions.
Reference: [Si1] <author> M. Sipser, </author> <title> "A complexity theoretic approach to randomness", </title> <booktitle> 15th STOC, </booktitle> <pages> 330-335, </pages> <year> 1983. </year>
Reference-contexts: We justify this intuition, answering an open question of Babai and Sipser (see [BM]). Theorem 6: almost -NP = AM. The proof relies on a description of almost -NP as a probabilistic, exponential size, constant-depth circuit, and our generator. A similar consideration, together with Sipser's result that BPP PH <ref> [Si1] </ref>, implies the surprising fact that random oracles do not help the polynomial time hierarchy. Theorem 7: almost PH= PH. BPP and the Polynomial Time Hierarchy In [Si1] Sipser showed that BPP is contained in the polynomial time hierarchy. <p> A similar consideration, together with Sipser's result that BPP PH <ref> [Si1] </ref>, implies the surprising fact that random oracles do not help the polynomial time hierarchy. Theorem 7: almost PH= PH. BPP and the Polynomial Time Hierarchy In [Si1] Sipser showed that BPP is contained in the polynomial time hierarchy. Gacs improved on this and showed that BPP is actually contained in S 2 P 2 . Using our generator, we giv e a completely different, simple proof of this fact. Time vs. Space and Randomness vs. <p> Applying to this the fact that BPP S 2 P 2 (see next subsection) allows simulation of the "Arthur" phase by one more alternation and thus we get: Theorem 7: almost-PH = PH 3.5. BPP and the Polynomial Time Hierarchy In <ref> [Si1] </ref> Sipser showed that BPP could be simulated in the polynomial time hierar chy. Gacs improved t his result and showed simulation is possible in S 2 P 2 . In this section we give a new simple proof of this fact.
Reference: [Si2] <author> M. Sipser, "Expanders, </author> <title> Randomness, or Time vs. Space", Structure in Complexity Theory, </title> <booktitle> Lecture notes in Computer Science, </booktitle> <volume> No. 223, </volume> <editor> Ed. G. Goos, J. </editor> <booktitle> Hart manis, </booktitle> <pages> pp. 325-329. </pages>
Reference-contexts: Gacs improved on this and showed that BPP is actually contained in S 2 P 2 . Using our generator, we giv e a completely different, simple proof of this fact. Time vs. Space and Randomness vs. Determinism - 5 - In <ref> [Si2] </ref> Sipser made the striking observation that efficient deterministic simulation of probabilistic algorithms is intimately related to efficient simulation of time by space (in a certain weak sense). <p> A result of a similar avor, giving a tradeoff b etween simulation of of randomness by determinism and of time by space, was proved using different methods by Sipser <ref> [Si2] </ref> under an unproven assumption regarding certain strong expanders. Consider the following function F: On input &lt;M, x, t &gt; the output is a representation of what Turing Machine M does on input x at time t.
Reference: [Sh] <author> A. Shamir, </author> <title> "On the generation of cryptographically strong pseudo-random sequences", </title> <booktitle> 8th ICALP, Lecture notes in Comp. Sci. </booktitle> <volume> 62, Springer-Verleg, </volume> <pages> pp. 544-550, </pages> <year> 1981. </year>
Reference-contexts: 1. Introduction The fundamental idea of trading hardness for randomness is due to Shamir <ref> [Sh] </ref>, who suggested that the RSA function can be used to construct good pseudo-random sequences.
Reference: [St] <author> L. Stockmeyer, </author> <title> "The polynomial time hierarchy", </title> <journal> Theor. Comp. Sci. </journal> <volume> 3, No. 1, </volume> <year> 1976. </year>
Reference: [Ya] <author> A.C. Yao, </author> <title> "Theory and applications of trapdoor functions", </title> <booktitle> 23rd FOCS, </booktitle> <pages> pp. 80-91, </pages> <year> 1982. </year>
Reference-contexts: These ideas were generalized by Yao <ref> [Ya] </ref>, who showed that any one-way permutation can be used to construct generators that fool every polynomial time computation. This result gav e the first explicit hardness-randomness trade-off: if no poly-size circuit can invert the one-way permutation, then RP e&gt;0 DTIME (2 n e ). <p> Since the assumptions required for our generator are so weak and natural, we believe that this work provides overwhelming evidence that the gap between deterministic and randomized complexity is not large. In <ref> [Ya] </ref>, the same consequence is obtained assuming one-way permutations exist, an assumption which is stronger than NP Co -NP cannot be approximated by polynomial size circuits. Randomized Parallel Computation Reif and Tygar [RT] considered simulation of probabilistic parallel algorithms under intractability assumptions. <p> This relaxation allows us to construct pseudorandom generators under much weaker conditions than the ones required for polynomial time pseudorandom generators, but our pseudorandom generators are as good for the purpose of simulating randomized algorithms as polynomial time ones. The following lemma is the natural gener alization of Yao's <ref> [Ya] </ref> lemma showing how to use pseudorandom generators to simulate randomized algorithms: Lemma 2.1: If there exists a quick pseudorandom generator G:l (n )fin then for any time constructible bound t =t (n ): RTIME (t )DTIME (2 O (l (t 2 )) ). <p> Definition: Let f :-0, 1-n fi-0, 1- be a boolean function. We say that f is (e, S )-hard if for any circuit C of size S, Pr &lt; e / 2, where x is chosen uniformly at random in -0, 1-n . Yao <ref> [Ya] </ref> shows how the closeness of approximation can be amplified by xor-ing multiple copies of f. A full proof of this lemma may be found in [BH]. Lemma 2.2 (Yao) : Let f 1 , . . . , f k all be (e, S )-hard. <p> We first show, as i n [GM] and in <ref> [Ya] </ref>, that this implies that one of the bits of f A (x ) can be predicted from the previous ones. <p> If this evaluates to 1 then D will return r i as the answer, otherwise it will return the complement of r i . As in <ref> [Ya] </ref> it can be shown that Pr 2 &gt; 1 where the probability is taken over all choices of x and of the random bits that D uses.
References-found: 24

