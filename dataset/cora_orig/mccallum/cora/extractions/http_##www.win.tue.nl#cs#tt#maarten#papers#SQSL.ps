URL: http://www.win.tue.nl/cs/tt/maarten/papers/SQSL.ps
Refering-URL: http://www.win.tue.nl/cs/tt/maarten/
Root-URL: http://www.win.tue.nl
Title: The Response Time Distribution in a Multi-Processor Database with Single Queue Static Locking 1 Poisson
Author: M.P. Bodlaender, S.A.E. Sassen, P.D.V. van der Stok and J. van der Wal 
Note: It is assumed that transactions arrive according to a  
Address: P.O.Box 513, NL-5600 MB Eindhoven The Netherlands  
Affiliation: Department of Mathematics and Computing Science Eindhoven University of Technology  
Abstract: A transaction scheduling mechanism is designed for a shared-memory, multi-processor database system. The scheduler used is a variant of static locking, adapted for real-time and more than one processor. The response time distribution is approximated by fitting a distribution to the first two moments. Simulation shows that this approximation gives excellent results. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M.P. Bodlaender, S.A.E. Sassen, P.D.V. van der Stok, and J. van der Wal. </author> <title> The response time distribution in a multi-processor database with single queue static locking. </title> <type> COSOR 95-40, </type> <institution> Eindhoven University of Technology, </institution> <year> 1995. </year>
Reference-contexts: Analysis of database schedulers [8, 3, 2, 5] has been restricted to throughput-analysis. The probability that a transaction meets its deadline cannot be derived from the throughput alone. In this paper we analyse the Single-Queue, Static-Locking (SQSL) scheduler, that schedules transactions in a multi-processor, shared-memory database. See <ref> [1] </ref> for an extended version. The SQSL scheduler is an adaptation of static locking, and is well suited for analysis. The SQSL scheduler does not use information about deadlines, and the real-time performance drops to zero when the system is overloaded.
Reference: [2] <author> L. Kleinrock and F. Mehovic. </author> <title> Poisson winner queues. </title> <booktitle> Performance Evaluation 14, </booktitle> <pages> 79-101, </pages> <year> 1992. </year>
Reference-contexts: Real-time databases combine the scheduling constraints from both databases and real-time systems. Scheduling mechanisms have to deal with database consistency and with transaction deadlines. New schedulers must be constructed, as real-time schedulers do not guarantee database consistency, and database schedulers often have poor real-time performance. Analysis of database schedulers <ref> [8, 3, 2, 5] </ref> has been restricted to throughput-analysis. The probability that a transaction meets its deadline cannot be derived from the throughput alone. In this paper we analyse the Single-Queue, Static-Locking (SQSL) scheduler, that schedules transactions in a multi-processor, shared-memory database. See [1] for an extended version.
Reference: [3] <author> R.J.T. Morris and W.S. Wong. </author> <title> Performance analysis of locking and occ algorithms. </title> <booktitle> Performance Evaluation 5, </booktitle> <pages> 105-118, </pages> <year> 1985. </year>
Reference-contexts: Real-time databases combine the scheduling constraints from both databases and real-time systems. Scheduling mechanisms have to deal with database consistency and with transaction deadlines. New schedulers must be constructed, as real-time schedulers do not guarantee database consistency, and database schedulers often have poor real-time performance. Analysis of database schedulers <ref> [8, 3, 2, 5] </ref> has been restricted to throughput-analysis. The probability that a transaction meets its deadline cannot be derived from the throughput alone. In this paper we analyse the Single-Queue, Static-Locking (SQSL) scheduler, that schedules transactions in a multi-processor, shared-memory database. See [1] for an extended version.
Reference: [4] <editor> R. Schassberger. Warteschlangen. </editor> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1973. </year>
Reference-contexts: ] = E [(S l + S m ) k ]: Based on these rules, the moments of S can be found using dynamic programming. 6 Fitting the moments Schassberger proved that each positive stochastic variable can be approximated arbitrarily well by a weighted sum of independent exponentially-distributed variables (see <ref> [4] </ref>). We used Schassberger's result to find a mixture of exponentially distributed variables that has the same moments of S. The way this mixture is chosen influences the quality of the approximation. Denote the stochastic variable corresponding to the chosen mixture by ^ S.
Reference: [5] <author> Y.C. Tay. </author> <title> Locking Performance in Centralized Databases. </title> <publisher> Academic Press, Inc., </publisher> <year> 1987. </year>
Reference-contexts: Real-time databases combine the scheduling constraints from both databases and real-time systems. Scheduling mechanisms have to deal with database consistency and with transaction deadlines. New schedulers must be constructed, as real-time schedulers do not guarantee database consistency, and database schedulers often have poor real-time performance. Analysis of database schedulers <ref> [8, 3, 2, 5] </ref> has been restricted to throughput-analysis. The probability that a transaction meets its deadline cannot be derived from the throughput alone. In this paper we analyse the Single-Queue, Static-Locking (SQSL) scheduler, that schedules transactions in a multi-processor, shared-memory database. See [1] for an extended version.
Reference: [6] <author> H.C. Tijms. </author> <title> Stochastic Models, an Algorithmic Approach. </title> <publisher> John Wiley & Sons, </publisher> <address> Chichester, </address> <year> 1994. </year>
Reference-contexts: Then P (S x), the probability that a transaction meets its deadline, is approximated by P ( ^ S x). We say the distribution of ^ S is fitted to the moments of S. We used the two-moment fit as described in <ref> [6] </ref>.
Reference: [7] <author> R.W. Wolff. </author> <title> Poisson arrivals see time averages. </title> <journal> Operations Research 30, </journal> <pages> pp. 223-231, </pages> <year> 1982. </year>
Reference-contexts: Let a (r;`)(i;j) be the probability that a transition to state (i; j) is caused by an arbitrary transaction t that sees state (r; `) on arrival. An expression for t's response time S is found by conditioning on state (r; `) and by using the PASTA <ref> [7] </ref> property: S = S [i;j] with probability P 5.2 Moments of the response time The moments of the response time are derived directly from the recursive relation. Two important rules are used to find E [S k ] for k 1: * Choice.
Reference: [8] <author> P.S. Yu, D.M. Dias, and S.S. Lavenberg. </author> <title> On the analytical modeling of database concurrency control. </title> <journal> Journal of the ACM pp. </journal> <pages> 831-872, </pages> <year> 1993. </year>
Reference-contexts: Real-time databases combine the scheduling constraints from both databases and real-time systems. Scheduling mechanisms have to deal with database consistency and with transaction deadlines. New schedulers must be constructed, as real-time schedulers do not guarantee database consistency, and database schedulers often have poor real-time performance. Analysis of database schedulers <ref> [8, 3, 2, 5] </ref> has been restricted to throughput-analysis. The probability that a transaction meets its deadline cannot be derived from the throughput alone. In this paper we analyse the Single-Queue, Static-Locking (SQSL) scheduler, that schedules transactions in a multi-processor, shared-memory database. See [1] for an extended version.
References-found: 8

