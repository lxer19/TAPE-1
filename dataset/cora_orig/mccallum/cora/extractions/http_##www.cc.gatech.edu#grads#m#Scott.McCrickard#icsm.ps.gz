URL: http://www.cc.gatech.edu/grads/m/Scott.McCrickard/icsm.ps.gz
Refering-URL: http://www.cs.gatech.edu/fac/Gregory.Abowd/html/architecture-evaluation-pubs.html
Root-URL: 
Email: fmccricks,abowdg@cc.gatech.edu  
Title: Assessing the impact of changes at the architectural level: A case study on graphical debuggers  
Author: D. Scott McCrickard Gregory D. Abowd 
Keyword: Software architecture, architectural recovery, impact analysis, scenario-based evaluation  
Address: Atlanta, GA 30332-0280  
Affiliation: College of Computing Georgia Institute of Technology  
Abstract: Understanding the high-level structure of a software system is useful for determining the impact of proposed changes. In this paper, we investigate techniques for recovering the high-level structure, or software architecture, for cases in which no trusted architectural description exists. We then demonstrate how a scenario-based approach to architectural evaluation can be used to document the impact of proposed changes on a software system. Architectural recovery and impact analysis are demonstrated using a case study comparing two graphical debuggers, xdbx and ups. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Gregory Abowd, Jonathan Engelsma, Luigi Guadagno, and Okokon Okon. </author> <title> Architectural analysis of object request brokers. </title> <journal> Object Magazine, </journal> <month> March </month> <year> 1996. </year> <note> In press. </note>
Reference: [2] <author> Evan Adams and Steven S. Muchnick. Dbxtool: </author> <title> A window-based symbolic debugger for sun workstations. </title> <journal> Software Practice and Experience, </journal> <volume> 16(7) </volume> <pages> 653-669, </pages> <year> 1986. </year>
Reference-contexts: The following scenarios echo two widely-accepted interface design strategies. * U1 Immediate availability of common commands: Commands that are frequently used should be accessible to the user with minimal effort. An analysis of de 6 bugger command usage <ref> [2] </ref> revealed several commands that were by far the most frequently used when debugging an executing program: stop at a given source line, stop in a particular function, execute the next source line, step into the next procedure to execute, continue the current execution, print a value, and redo the last
Reference: [3] <author> David Garlan and Mary Shaw. </author> <title> An introduction to software ar-chitecture. </title> <editor> In V. Ambriola and G. Tortora, editors, </editor> <booktitle> Advances in Software Engineering and Knowledge Engineering, </booktitle> <pages> pages 1-39. </pages> <publisher> World Scientific Publishing Company, </publisher> <year> 1993. </year>
Reference: [4] <author> John D. Gould. </author> <title> Some psychological evidence on how people de-bug computer programs. </title> <journal> International Journal of Man-Machine Studies, </journal> <volume> 7 </volume> <pages> 151-182, </pages> <year> 1975. </year>
Reference-contexts: Our SAAM evaluation should help users choose a debugger that will assist in the identification of certain classes of bugs. From existing literature on the debugging of programs <ref> [4] </ref>, [7], we gleaned three classes of errors that are common in many programming languages: assignment, memory, and termination errors. * D1 Assignment: This class of bugs results in an incorrect value assigned to a variable. These bugs occur when initialization statements are missing and when incorrect formulas are used.
Reference: [5] <author> Rick Kazman, Gregory Abowd, Len Bass, and Paul Clements. </author> <title> Scenario-based analysis of software architecture. </title> <journal> IEEE Software, </journal> <note> 1996. In press. </note>
Reference: [6] <author> Rick Kazman, Len Bass, Gregory Abowd, and Mike Webb. Saam: </author> <title> A method for analyzing the properties of software architectures. </title> <booktitle> In Proceedings of the 16th International Conference on Software Engineering, </booktitle> <pages> pages 81-90, </pages> <year> 1994. </year>
Reference: [7] <author> F. J. Lukey. </author> <title> Understanding and debugging programs. </title> <journal> International Journal of Man-Machine Studies, </journal> <volume> 12 </volume> <pages> 189-202, </pages> <year> 1980. </year>
Reference-contexts: Our SAAM evaluation should help users choose a debugger that will assist in the identification of certain classes of bugs. From existing literature on the debugging of programs [4], <ref> [7] </ref>, we gleaned three classes of errors that are common in many programming languages: assignment, memory, and termination errors. * D1 Assignment: This class of bugs results in an incorrect value assigned to a variable. These bugs occur when initialization statements are missing and when incorrect formulas are used.
Reference: [8] <author> Gail C. Murphy, David Notkin, and Kevin Sullivan. </author> <title> Software reflexion models: Bridging the gap between source and high-level models. </title> <booktitle> In Proceedings of the ACM SIGSOFT '95 Conference, </booktitle> <pages> pages 18-28, </pages> <year> 1995. </year>
Reference-contexts: To obtain the desired mapping we used reverse engineering tools. Reverse engineering explores methods for extracting information from software systems. Some reverse engineering tools can be used to derive high-level architectural information from the source code. Of particular interest is RMTool, the Reflexion Model Tool <ref> [8] </ref>. RMTool resolves differences between the user's high-level concept of a function call graph and the actual model resulting from calls in the code. To obtain an outline of the high-level model, we use RunView, a program understanding and debugging tool that we are developing here at Georgia Tech.
Reference: [9] <author> Dewayne E. Perry and Alexander L. Wolf. </author> <title> Foundations for the study of software architecture. </title> <booktitle> ACM SIGSOFT Software Engineering Notes, </booktitle> <volume> 17(4) </volume> <pages> 40-52, </pages> <month> October </month> <year> 1992. </year>
References-found: 9

