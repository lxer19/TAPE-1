URL: ftp://ftp.elis.rug.ac.be/pub/prolog/iclp94_workshop/ferenczi.ps.Z
Refering-URL: http://www.informatik.uni-trier.de/~ley/db/conf/iclp/iclp94-w1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: e-mail: Ferenczi@sunserv.kfki.hu  
Title: Search Tree Unification: Paradigm for Process-based Logic Programs (Extended Abstract)  
Author: Szabolcs Ferenczi 
Address: H-1525 Budapest, P.O.Box 49 HUNGARY  
Affiliation: KFKI-MSZKI Research Institute  
Abstract: The concept of search tree unification presented in this paper serves a basis for the declarative interpretation of process-based logic programs. Each logic process created explicitly from a sub-goal defines an own sub-search tree. Processes of the same logic program are not independent but rely on the partial result of each other, i.e. they communicate with each other. Therefore, sub-search trees are related along communication patterns. Explicit communications between processes determine links between different search trees. The equivalent declarative notion to executing a program consisting of different but related logic programs is unification of individual search trees. Search tree unification can give declarative meaning of process-based logic programs as well. Search tree unification is a higher abstraction that captures distributed logic programs in a declarative way.
Abstract-found: 1
Intro-found: 1
Reference: [App94] <institution> Applied Logic Laboratory, </institution> <address> Budapest, Hungary. </address> <note> CS-Prolog Professional, Version 1.1, </note> <year> 1994. </year>
Reference-contexts: Some languages support and implement distributed backtracking and some do not. In terms of search trees this means that the former will find potentially matching trees but the latter might not. 5 Future Work Search tree unification concepts will be implemented using second generation CS-Prolog called CS-Prolog Professional <ref> [App94] </ref>. An object-oriented concurrent programming model has been developed called Monads [Fer94] that will be merged with Prolog using the concepts of search tree unification presented here. 6 Acknowledgment The results presented in this paper were discovered during our work on CS-Prolog and some aspects are already published in [FF92].
Reference: [BC91] <author> Antonio Brogi and Paolo Ciancarini. </author> <title> The Concurrent Language, Shared Prolog. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 13(1) </volume> <pages> 99-123, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: Some representatives of Process-based Prolog languages are Delta Prolog [CMCP92], CS-Prolog [FF92] and PMS-Prolog [WJH92]. The roots of these languages reaches back to the middle eighties. Recent blackboard oriented languages like Shared Prolog <ref> [BC91] </ref> belong to process-based languages as well. Common problem of process-based logic languages is that only procedural meaning can be attached to a program expressed in these notations. However, both procedural and declarative readings are expected for a logic program no matter if it is a distributed one or not. <p> A subgoal call for a Prolog process, i.e. a hypothesis cannot contain unbound variable arguments. This is because otherwise all the problems of AND parallel execution would arise. Shared Prolog, for example, only allows atoms for clause heads describing processes <ref> [BC91] </ref> whereas CS Prolog allows bound variable arguments as well [FF92]. <p> CS-Prolog [FF92] and Shared Prolog <ref> [BC91] </ref>). CS-Prolog experiment clearly shows how can side effect prone database manipulation that only has procedural interpretation in sequential environment be equipped with declarative meaning in distributed environment if used as a communication means among concurrently evolving processes of resolution [FF92]. The communication scheme can be again synchronous or asynchronous.
Reference: [CMCP92] <author> J. C. Cunha, P. D. Medeiros, M. B. Carvalhosa, and L. M. Pereira. </author> <title> Delta Prolog: </title>
Reference-contexts: 1 Introduction A new paradigm of Process-based logic programming languages is emerging from a long standing and slowly background evolution. Some representatives of Process-based Prolog languages are Delta Prolog <ref> [CMCP92] </ref>, CS-Prolog [FF92] and PMS-Prolog [WJH92]. The roots of these languages reaches back to the middle eighties. Recent blackboard oriented languages like Shared Prolog [BC91] belong to process-based languages as well.
References-found: 3

