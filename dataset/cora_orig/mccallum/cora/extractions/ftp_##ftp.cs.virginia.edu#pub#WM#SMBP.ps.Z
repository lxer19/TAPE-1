URL: ftp://ftp.cs.virginia.edu/pub/WM/SMBP.ps.Z
Refering-URL: http://www.cs.virginia.edu/~wm/smc.html
Root-URL: http://www.cs.virginia.edu
Email: -mckee|klenke|cwoliver|msalinas|wright|wulf|jha-@virginia.edu  
Title: Smarter Memory Better Performance: Improving Effective Bandwidth for Streams  
Author: Sally A. McKee Assaji Aluwihare Robert H. Klenke Trevor C. Landon Christopher W. Oliver Maximo H. Salinas Kenneth L. Wright Wm. A. Wulf James H. Aylor 
Keyword: memory bandwidth, access ordering, vector processing, data prefetching, semi-custom VLSI  
Address: Charlottesville, VA 22903  
Affiliation: Department of Computer Science Department of Electrical Engineering University of Virginia  
Note: DRAFT DO NOT DISTRIBUTE  *current addresses: -landont|aluwiha-@ttc.com  
Abstract: Processor speeds are increasing so much faster than memory speeds that within a decade processors may spend most of their time waiting for data. The problem is already acute for computations that linearly traverse long streams of vector-like data. Although streaming computations lack the temporal locality of reference that makes caches effective, they have predictable access patterns. Since most modern DRAM components support modes that make it possible to perform some access sequences faster than others, the predictability of the stream accesses makes it possible to reorder them to get better memory performance. We describe a Stream Memory Controller system that does just that, combining compile-time detection of streams with execution-time selection of the access order and issue. The technique is practical to implement, exploiting existing compiler technology, and requiring only a modest amount of special-purpose hardware. We achieve near-optimal memory bandwidth for stream accesses relatively inexpensively. This complements more traditional cache-based schemes so that overall effective memory performance need not be a bottleneck. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M.E. Benitez and J. W. Davidson, </author> <title> Code Generation for Streaming: An Access/ Execute Mechanism, </title> <booktitle> Proc. Fourth International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <month> April </month> <year> 1991, </year> <pages> pages 132-141. </pages> <note> [2] i860 XP Microprocessor Data Book, </note> <institution> Intel Corporation, </institution> <year> 1991. </year>
Reference-contexts: Except for trivial differences, this is the same information needed by the streamed code shown in Figure 2 (b), which was generated by an experimental compiler built as part of the project <ref> [1] </ref>. At the point where the usual optimizer initializes a temporary to the base address, the streaming compiler emits code to initialize the FIFO control register the sin32i (stream in 32-bit integer) instruction in this case.
Reference: [3] <author> Epoch Users Manual 3.1, </author> <title> Cascade Design Automation, </title> <year> 1993. </year>
Reference: [4] <author> System-1076, </author> <title> Quicksim II Users Manual, </title> <institution> Mentor Graphics Corporation, </institution> <year> 1993. </year>
Reference: [5] <author> S.A. McKee, </author> <title> Maximizing Memory Bandwidth for Streamed Computations, </title> <type> Ph.D. thesis, </type> <institution> University of Virginia, </institution> <month> May </month> <year> 1995. </year> <title> Available through http:// www.cs.virginia.edu/techrep. Smarter Memory = Better Performance: Improving Effective Bandwidth for Streams DRAFT DO NOT DISTRIBUTE 16 </title>
Reference-contexts: More intelligent schemes are required to achieve good performance on computations involving streams with strides that do not hit all memory banks, and on multiprocessor systems in general <ref> [5] </ref>. Further details of the design, implementation, and testing of the initial SMC ASIC and daughterboard can be found in [6][7]. Smarter Memory = Better Performance: Improving Effective Bandwidth for Streams DRAFT DO NOT DISTRIBUTE 9 4. <p> Second, preliminary investigations indicate that the SMC concept can be effectively applied to shared-memory multiprocessor systems, although a more sophisticated ordering strategy is required to achieve uniformly high performance <ref> [5] </ref>. Particularly intriguing is the application of the SMC to distributed shared memory systems where the latency penalty for non-local accesses is especially high. Acknowledgments This work was supported in part by a grant from Intel and by NSF grants MIP-9114110 and MIP-9307626.
Reference: [6] <author> S.A. McKee, C.W. Oliver, Wm.A. Wulf, K.L. Wright, J.H. Aylor, </author> <title> Evaluation of Dynamic Access Ordering Hardware, </title> <booktitle> Proc. International Conference on Supercomputing, </booktitle> <address> Philadelphia, PA, </address> <month> April </month> <year> 1996. </year>
Reference: [7] <institution> The SMC web page, </institution> <note> http://www.cs.virginia.edu/~wm/smc.html. </note>

Reference: [1] <author> R. Quinnell, </author> <title> High-speed DRAMs, </title> <type> EDN, </type> <month> May 23, </month> <year> 1991. </year>
Reference-contexts: Except for trivial differences, this is the same information needed by the streamed code shown in Figure 2 (b), which was generated by an experimental compiler built as part of the project <ref> [1] </ref>. At the point where the usual optimizer initializes a temporary to the base address, the streaming compiler emits code to initialize the FIFO control register the sin32i (stream in 32-bit integer) instruction in this case.
Reference: [2] <author> Memory Catches Up, </author> <title> Special Report, </title> <journal> IEEE Spectrum, </journal> <volume> 29(10) </volume> <month> 34-53 October </month> <year> 1992. </year>
Reference-contexts: Intel i860 L63: lw $3,($10) addu $6,$6,$3 addu $10,$10,4 addu $11,$11,4 blt $11,$4,L63 sin32i $s1,$13,$9,4 mul $3,$s0,$s1 addu $6,$6,$3 addu $5,$5,1 blt $5,$9,L63 do 10, i=1, 1000 (a) MIPS (b) MIPS w/ streaming Smarter Memory = Better Performance: Improving Effective Bandwidth for Streams DRAFT DO NOT DISTRIBUTE 5 host processor <ref> [2] </ref>. Both versions of the SMC ASIC were designed using VHDL for state machine specification, Mentor Graphics Corporations Design Architect for schematic capture, and Cascade Design Automations Epoch tool for hardware synthesis [3][4].
Reference: [3] <author> M. Levy, </author> <title> Souped-Up Memories, </title> <type> EDN, </type> <month> January 4, </month> <year> 1996. </year>
References-found: 9

