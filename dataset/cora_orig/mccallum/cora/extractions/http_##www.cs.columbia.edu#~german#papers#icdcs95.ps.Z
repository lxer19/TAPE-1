URL: http://www.cs.columbia.edu/~german/papers/icdcs95.ps.Z
Refering-URL: http://www.cs.columbia.edu/~german/mbd.html
Root-URL: http://www.cs.columbia.edu
Title: Distributed Management by Delegation  German  
Author: Goldszmidt and Yechiam Yemini 
Address: New York City, NY 10027  
Affiliation: Computer Science Department, Columbia University  
Date: June 1995  
Note: In Proceedings of the 15th International Conference on Distributed Computing Systems,  
Abstract: This paper introduces a novel approach to distributed computing based on delegation-agents, and describes its applications to decentralize network management. Delegation agents are programs that can be dispatched to remote processes, dynamically linked and executed under local or remote control. Unlike scripted agents, delegation agent programs may be written in arbitrary languages, interpreted or compiled. They can thus be more broadly applied to handle such tasks as real-time monitoring, analysis and control of network resources. Distributed management by delegation (MbD) uses this to manage remote elements and domains. MbD provides a paradigm for distributed, flexible, scalable and robust network management that overcomes the key limitations of current centralized management schemes. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Ben-Artzi, A. Chadna, and U. Warrier. </author> <title> Network Management of TCP/IP Networks: Present and Future. </title> <journal> IEEE Network Magazine, </journal> <month> July </month> <year> 1990. </year>
Reference-contexts: This interaction paradigm concentrates most processing into a single manager client, which often interacts with a large number of rigid agent servers. Defining rigid agents limits network manageability. For example, there is a limit on how many variables can be polled by a central platform and how often <ref> [1] </ref>. If data analysis is only conducted at the platform, it will require data access and processing rates that do not scale up for large and complex networks. Because managers can only invoke agent services defined in general purpose interfaces, many management procedures require a large number of microman-agement interactions.
Reference: [2] <author> Jeffrey D. Case, Mark S. Fedor, Martin L. Schoff-stall, and James R. Davin. </author> <title> A Simple Network Management Protocol (SNMP). </title> <type> RFC 1157, </type> <month> May </month> <year> 1990. </year>
Reference-contexts: Management agents are responsible for monitoring and controlling their devices, and collecting data in Management Information Bases (mibs). Management applications use a protocol (primarly snmp <ref> [2] </ref>), to retrieve mib data, and to direct the agents (e.g., how to handle fault scenarios).
Reference: [3] <author> German Goldszmidt. </author> <title> Distributed Management by Delegation. </title> <type> PhD thesis, </type> <institution> Columbia University, </institution> <address> New York, NY, </address> <year> 1995. </year> <note> In preparation. </note>
Reference-contexts: A more detailed description of its design and implementation can be found in <ref> [3] </ref>. The delegation backplane layer of the elastic process runtime provides support for rdp to store and access DPs, ensure that DPs are legal, and integrate them into the executing process. <p> An extended presentation of the problems induced by this paradigm can be found in <ref> [3] </ref>. The following is a brief outline of some of these management barriers, using snmp as a representative protocol. The discussion, however, is equally valid for cmip [13]. snmp's minimal requirements resulted in the rapid and ubiquitous deployment of its agents.
Reference: [4] <author> German Goldszmidt, Shmuel Katz, and Shaula Yemini. </author> <title> High Level Language Debugging for Concurrent Programs. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 8(4) </volume> <pages> 311-336, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Delegation can also be used to add threads for debugging distributed applications <ref> [4] </ref>, or to replace functions as they are being developed. 2.3 Performance Implications As seen from the above examples, delegation accomplishes significant performance improvements in bandwidth and latency for distributed applications.
Reference: [5] <author> German Goldszmidt and Yechiam Yemini. </author> <title> Evaluating Management Decisions via Delegation. </title> <booktitle> In The Third International Symposium on Integrated Network Management, </booktitle> <address> San Francisco, CA, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: Applications can use MbD to flexibly control the granularity of their manager-agent interactions, avoiding micro-management. Developing effective technologies to support compression of real-time management information is a central problem of network management. A health function <ref> [5] </ref> provides such efficient compression by combining managed data into a single index of network state. Health functions cannot be included as part of a static mib design, as they may vary from site to site and over time.
Reference: [6] <author> John L. Hennessy and David A. Patterson. </author> <title> Computer Organization and Design The Hardware / Software Interface. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1994. </year>
Reference-contexts: Yet caching cannot properly support highly volatile distributed data. For instance, measurements from remote monitoring instruments change frequently making the cache inconsistent. Delegation supports an "inverse-caching" ap 1 Workstations have been improving their SPEC benchmarks performance by an average yearly factor of 1.54 between 1987 and 1992 <ref> [6] </ref>. proach, to move the applications closer to the location of their resources. Many factors contribute to the overall execution time of a distributed application. Thus a detailed model and analysis is complex and beyond the scope of this paper.
Reference: [7] <author> Donald Lewine. </author> <title> POSIX Programmer's Guide. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <year> 1991. </year>
Reference-contexts: The runtime protects concurrent accesses to critical regions, and traps and properly handles all asynchronous events and signals. For most of the operating system level services POSIX <ref> [7] </ref> semantics are assumed. main components, the Controller, Delegation Protocol, Repository, Translator, dpi-Manager, Name Service, IPC, and Scheduler. The Controller initializes the runtime environment, disposes of unused resources, and implements policies which are invariant for the lifetime of the process, such as for authentication or accounting.
Reference: [8] <author> Kraig Meyer, Mike Erlinger, Joe Betser, Carl Sunshine, German Goldszmidt, and Yechiam Yemini. </author> <title> Decentralizing Control and Intelligence in Network Management. </title> <booktitle> In The Fourth International Symposium on Integrated Network Management, </booktitle> <month> May </month> <year> 1995. </year>
Reference-contexts: Use of MbD enables devices to acquire autonomous management capabilities. For example, when communications are lost with managing entities, a device may activate management programs that provide it with pre-defined management instructions for autonomous operation. Several other examples of the application of MbD to management problems are described in <ref> [8] </ref>. 5 Related Work Remote evaluation, rev [11], allows a program expression to be transferred from a client computer to a server computer.
Reference: [9] <author> John K. Ousterhout. </author> <title> Tcl: An Embeddable Command Language. </title> <booktitle> In Proceedings of the 1990 Winter USENIX Conference, </booktitle> <year> 1990. </year>
Reference-contexts: These programs can include personal agents, coded in C or C++ possibly with embeded SQL, that transact with remote databases. They may also include real-time programs to analyze manufacturing line sensor data. Moreover, one could delegate the very interpreter of languages such as Tcl <ref> [9] </ref> or Telescript to a remote environment and then delegate and execute scripts. Delegated agents are particularly useful in supporting a new paradigm for automated distributed management of networked systems.
Reference: [10] <author> Doug Riecken. </author> <title> Intelligent Agents. </title> <journal> Communications of the ACM, </journal> <volume> 37(7) </volume> <pages> 18-21, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: These agent programs would search, transact and report to the user the results of their computations. Such personal intelligent agents have recently attracted great interest <ref> [10] </ref>. Dynamic extensibility of distributed applications is required in numerous other scenarios. For example, consider a distributed manufacturing line where sensors collect data that must be analyzed to control the real-time operations of robots and manufacturing processes. The sensor processes act as servers rigidly programmed to provide certain data reports.
Reference: [11] <author> James W. Stamos and David K. Gifford. </author> <title> Remote Evaluation. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 12(4) </volume> <pages> 537-565, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: For example, when communications are lost with managing entities, a device may activate management programs that provide it with pre-defined management instructions for autonomous operation. Several other examples of the application of MbD to management problems are described in [8]. 5 Related Work Remote evaluation, rev <ref> [11] </ref>, allows a program expression to be transferred from a client computer to a server computer.
Reference: [12] <author> James E. White. </author> <title> Telescript Technology: The Foundation for the Electronic Marketplace, 1994. General Magic White Paper. </title>
Reference-contexts: Perhaps the simplest form of delegation agents is 1 provided by scripts dispatched to a remote language interpreter. A remote execution mechanism permits an application to dispatch and sequentially execute a script at a remote interpreter. Such scripted agent mechanisms have been recently popularized by Tele-script <ref> [12] </ref>, a language to script network agents. Scripted agents, however, are limited in a number of ways. First, there are many applications, e.g., distributed real-time manufacturing control, where interpreted programs are inadequate. Second, servers are typically organized to support concurrent execution of services invoked by multiple clients. <p> Then, the caller is blocked until the completion of the invocation, and/or it can not exercise any control over it. Thus neither rpc nor rev are adequate mechanisms for distributed management. General Magic's "Remote Programming" <ref> [12] </ref> requires using a specialized language, Telescript to construct agents which are transferred to remote interpreters for execution. In contrast, delegation provides a language-independent approach for programming agents, allowing programmers to reuse existing code and tools. <p> Similar issues and problems apply to accounting and reliability. In contrast, delegation provides remote execution control over agents and enables them to have customized security services. Telescript agents can only "extend the functionality of communication services to which they have access, provided those services are implemented using Telescript technology" <ref> [12] </ref>. Remote delegation to elastic processes was designed to interact with other communication services, such as network management protocols. 6 Conclusions The traditional C/S interaction model enforces a rigid association of function with servers, that often results in an abnormal distribution of functionality between clients and servers.
Reference: [13] <author> Yechiam Yemini. </author> <title> The OSI Network Management Model. </title> <journal> IEEE Communications Magazine, </journal> <pages> pages 20-29, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: An extended presentation of the problems induced by this paradigm can be found in [3]. The following is a brief outline of some of these management barriers, using snmp as a representative protocol. The discussion, however, is equally valid for cmip <ref> [13] </ref>. snmp's minimal requirements resulted in the rapid and ubiquitous deployment of its agents. Despite its success in allowing remote data access, however, snmp has not yet provided the ability to really manage an internet.
References-found: 13

