URL: http://www.cs.jhu.edu/~sullivan/integrity.ps
Refering-URL: http://www.cs.jhu.edu/~sullivan/ftdownload.html
Root-URL: http://www.cs.jhu.edu
Title: Checking the Integrity of Trees  
Author: Jonathan D. Bright Gregory F. Sullivan Gerald M. Masson 
Address: 600 Mountain Avenue  Murray Hill, NJ 07974 Baltimore, MD 21218 Baltimore, MD 21218  
Affiliation: AT&T Bell Laboratories Computer Science Dept. Computer Science Dept.  Johns Hopkins Univ. Johns Hopkins Univ.  
Abstract: In this paper we describe a general technique for checking the integrity of data structures which can be corrupted by memory faults. Our approach is based on a recursive checksum technique. Basic methods of using checksums have been previously seen to be useful for detecting faults at the bit or word level; among our results will be their extension to the node level. The major contributions of our paper are threefold. First, we show how the recursive checksum procedure can be applied to tree data structures that are dynamically changing, whereas the previous work concentrated on trees that were static in their structure. This results in a asymptotic improvement in running time for applications where it is natural to model the underlying data as a tree. Second, we present a C ++ implementation of this scheme. Significantly, it is seen that our software can be used with existing applications which manipulate trees with only minor modification of the application programs. Finally, we have performed fault injection experiments which confirm the fault detection capability of our integrity checking approach. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Amato, N. M., Loui, M. C., </author> <title> "Checking Linked Data Structures," </title> <booktitle> Dig. 24th FTCS , 1994, </booktitle> <pages> pp. 164-173. </pages>
Reference-contexts: This recursive checksum procedure has been studied by researchers in other disciplines of computer science. For example, it is the basis of cryptographic authentication schemes. Also, a recursive checksum approach was proposed for checking memories in the theoretical computer science community [3]. This paper, and another recent paper <ref> [1] </ref>, show how fault detection for various data structures can be provided by a checker needing only a very small reliable memory. Typically, if the data structure being checked is of size n, the checkers needs a memory of only O (log n).
Reference: [2] <author> Anderson, T., and Lee, P., </author> <title> Fault Tolerance: Prin ciples and Practices, </title> <publisher> Prentice-Hall, </publisher> <year> 1981. </year>
Reference-contexts: It is also possible to detect and/or correct faults in the memory directly, using error detecting/correcting codes [6][14][21], fault tolerant data structures [8][9][18][19][20], and limited memory checkers [1][3]. We will discuss these last two techniques in the next section. At the hardware level, one can use triple-modular redundancy <ref> [2] </ref>, and also watchdog processors [12] to try to detect memory faults. In this paper, we discuss an approach based on the recursive use of checksums to detect faults in the memory.
Reference: [3] <author> Blum, M., Evans, W., Gemmell, P., Kannan, S., Naor, M., </author> <title> "Checking the Correctness of Memories," </title> <booktitle> Proc. FOCS, </booktitle> <year> 1991, </year> <pages> pp. 90-99. </pages>
Reference-contexts: This recursive checksum procedure has been studied by researchers in other disciplines of computer science. For example, it is the basis of cryptographic authentication schemes. Also, a recursive checksum approach was proposed for checking memories in the theoretical computer science community <ref> [3] </ref>. This paper, and another recent paper [1], show how fault detection for various data structures can be provided by a checker needing only a very small reliable memory. Typically, if the data structure being checked is of size n, the checkers needs a memory of only O (log n). <p> Typically, if the data structure being checked is of size n, the checkers needs a memory of only O (log n). Using the recursive checksum approach, it is demonstrated in <ref> [3] </ref> how a random access memory can be checked using a small memory, though the checker must perform O (log n) work each time an access on the memory is performed. Let us formalize an operation on a tree as follows. <p> Obviously, the better the checksum used is, the more effective fault detection will result from the recursive use of the checksum. In <ref> [3] </ref>, it was shown that in the case of a static tree, if the checksum employed had certain cryptographic properties, for example was a Universal One-Way Hash Function (UOWHF), then any number of faults a*icting the memory, even if the faults were caused by a malicious adversary, would almost certainly be
Reference: [4] <author> Bright, J., Sullivan, G., </author> <title> "Checking Mergeable Pri ority Queues," </title> <booktitle> Dig. 24th FTCS , 1994, </booktitle> <pages> pp. 144-153. </pages>
Reference: [5] <author> Blum, M., and Kannan, S., </author> <title> "Designing Programs that Check their Work", </title> <booktitle> Proc. 21st STOC, </booktitle> <year> 1989, </year> <pages> pp. 86-97. </pages>
Reference: [6] <author> Hecht, H., Hecht, M., Kime, C. R., Pradhan, D. K., Siewiorek, D., Sti*er, J. J., </author> <title> Fault Tolerant Computing: </title> <journal> Theory and Techniques, </journal> <volume> Vol. 1, </volume> <publisher> Prentice-Hall, </publisher> <year> 1986. </year>
Reference: [7] <author> Huang, K.-H., and Abraham, J., </author> <title> "Algorithm based Fault Tolerance for Matrix Operations," </title> <journal> IEEE TOC, pp. </journal> <volume> 518-529, vol. C-33, </volume> <month> June, </month> <year> 1984. </year>
Reference-contexts: There are a number of both hardware and software methods available to detect and/or compensate for memory based faults. In software, one can attempt to detect errors in the output of a program by using recovery blocks [13], program checkers [5][4], algorithm based fault tolerance methods <ref> [7] </ref>, and also certification trails [15][16][17]. It is also possible to detect and/or correct faults in the memory directly, using error detecting/correcting codes [6][14][21], fault tolerant data structures [8][9][18][19][20], and limited memory checkers [1][3]. We will discuss these last two techniques in the next section.
Reference: [8] <author> Kanawati, N. A., Kanawati, G. A., Abraham, J. A., </author> <title> "A Modular Robust Binary Tree," </title> <address> DCCA-4, </address> <month> January </month> <year> 1994. </year>
Reference: [9] <author> Kant, K., and Ravichandran, A., </author> <title> "Synthesiz ing Robust Data Structures An Introduction," </title> <journal> IEEE TOC, pp. </journal> <volume> 161-173, vol. 39, </volume> <month> Feb., </month> <year> 1990. </year>
Reference: [10] <author> Kurshan, R. P., </author> <title> Computer-Added Verification of Coordinating Processes. </title> <publisher> Princeton University Press, </publisher> <year> 1994. </year>
Reference: [11] <author> Manna, Z., Pnueli, A., </author> <title> The Temporal Logic of Re active and Concurrent Systems. </title> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference: [12] <author> Mahmood, A., McCluskey, E., </author> <title> "Concurrent Er ror Detection Using Watchdog Processors a Survey," </title> <journal> IEEE TOC, pp. </journal> <volume> 160-174, vol. 37, </volume> <month> Feb., </month> <year> 1988. </year>
Reference-contexts: We will discuss these last two techniques in the next section. At the hardware level, one can use triple-modular redundancy [2], and also watchdog processors <ref> [12] </ref> to try to detect memory faults. In this paper, we discuss an approach based on the recursive use of checksums to detect faults in the memory.
Reference: [13] <author> Randell, B., </author> <title> "System Structure for Software Fault Tolerance," </title> <journal> IEEE Trans. Soft. Eng., </journal> <volume> vol. 1, </volume> <pages> pp. 220-232, </pages> <year> 1975. </year>
Reference-contexts: There are a number of both hardware and software methods available to detect and/or compensate for memory based faults. In software, one can attempt to detect errors in the output of a program by using recovery blocks <ref> [13] </ref>, program checkers [5][4], algorithm based fault tolerance methods [7], and also certification trails [15][16][17]. It is also possible to detect and/or correct faults in the memory directly, using error detecting/correcting codes [6][14][21], fault tolerant data structures [8][9][18][19][20], and limited memory checkers [1][3].
Reference: [14] <author> Rao, T. R. N., Fujiwara, E., </author> <title> Error-Control Cod ing for Computer Systems. </title> <publisher> Prentice-Hall, </publisher> <year> 1989. </year>
Reference: [15] <author> Sullivan, G. F., and Masson, G. M., </author> <title> "Using Cer tification Trails to Achieve Software Fault Tolerance," </title> <booktitle> Dig. 20th FTCS , 1990 1990, </booktitle> <pages> pp. 423-431. </pages>
Reference: [16] <author> Sullivan, G. F., and Masson, G. M., </author> <title> "Certifica tion Trails for Data Structures," </title> <booktitle> Dig. 21th FTCS , 1991 pp. </booktitle> <pages> 240-247. </pages>
Reference: [17] <author> Sullivan, G.F., Wilson, D. S., and Masson, G. M., </author> <title> "Certification of Computational Results," </title> <journal> IEEE TOC, </journal> <note> to appear. </note>
Reference: [18] <author> Taylor, D. J., Morgan, D. E., Black, J. P., </author> <title> "Re dundancy in Data Structures: Improving Software Fault Tolerance," </title> <journal> IEEE Trans. Soft. Eng., pp. </journal> <volume> 585-594, vol. 6, </volume> <month> Nov. </month> <year> 1980. </year>
Reference: [19] <author> Taylor, D. J., Morgan, D. E., Black, J. P., </author> <title> "Re dundancy in Data Structures: Some Theoretical Results," </title> <journal> IEEE Trans. Soft. Eng., pp. </journal> <volume> 595-602, vol. 6, </volume> <month> Nov. </month> <year> 1980. </year>
Reference: [20] <author> Taylor, D., </author> <title> "Error Models for Robust Data Struc tures," </title> <booktitle> Dig. 20th FTCS, </booktitle> <year> 1990, </year> <pages> pp. 416-422. </pages>
Reference: [21] <author> Wakerly, J., </author> <title> Error Detecting Codes, Self-Checking Circuits and Applications. </title> <publisher> North Holland, </publisher> <year> 1978. </year>
References-found: 21

