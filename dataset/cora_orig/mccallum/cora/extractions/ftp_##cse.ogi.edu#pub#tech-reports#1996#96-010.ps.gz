URL: ftp://cse.ogi.edu/pub/tech-reports/1996/96-010.ps.gz
Refering-URL: ftp://cse.ogi.edu/pub/tech-reports/README.html
Root-URL: http://www.cse.ogi.edu
Title: CPU Management for UNIX-based MPEG Video Applications  
Author: Veronica Baiceanu 
Date: May 6, 1996  
Abstract: While continuous media applications are becoming increasingly popular, poor quality resulting from resource scarcity is a common problem. Resource management for distributed multimedia systems is an active topic of research, addressing both performance issues and quality guarantees. Insufficient operating systems support for multimedia computing is often mentioned as a major problem, even for real-time platforms. In particular, continuous media applications require specific scheduling mechanisms, appropriate for periodic tasks with deadline and jitter constraints. While many scheduling algorithms have been proposed and implemented, we notice that most of the studies assume operating systems with real-time capabilities. Most research ignores widespread time-sharing systems such as UNIX, which is known to perform poorly for multimedia, offering no support for hard guarantees. We evaluate the performance and quality of service guarantees enabled by the real-time features of recent versions of UNIX. While hard real-time guarantees cannot be provided, we argue that statistical guarantees are satisfactory, as a certain quality loss is usually tolerable. We propose a scheduling mechanism that approximates the rate-monotonic (RM) scheduling algorithm, and a test for granting admission to new applications. We have implemented our method on tasks simulating workloads derived from a real MPEG video player. Our experiments show that our mechanism provides better guarantees for computation deadlines and better performance than the UNIX standard scheduler. We discuss the reasons for guarantee violations and issues related to applying our method in real systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Andrew Campbell, Geoff Coulson, Francisco Garcia, David Hutchison, and Helmut Leopold. </author> <title> 21 Integrated Quality of Service for Multimedia Communications. </title> <booktitle> In IEEE INFOCOM 93, </booktitle> <year> 1993. </year>
Reference-contexts: The necessity of solving this "mapping problem" is widely recognized [10, 13] as the best means of allocating the correct amount of resources in the guaranteed approach. 2 Most of the effort for providing multimedia support, including guarantees, has focused on the network level <ref> [1] </ref>. However, many researchers notice the need for more operating system support for multimedia [19, 12]. In particular, multimedia applications require large disk and memory bandwidth, and impose scheduling constraints related to periodic arrival of data.
Reference: [2] <author> Shanwei Cen, Calton Pu, Richard Staehli, Crispin Cowan, and Jonathan Walpole. </author> <title> A Distributed Real-Time MPEG Video Audio Player. </title> <booktitle> In Proceedings of the 1995 International Workshop on Network and Operating System Support for Digital Audio and Video (NOSS-DAV'95), </booktitle> <pages> pages 151-162, </pages> <address> New Hampshire, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: The continuous transfer of massive amounts of data in real-time requires specific multimedia system design issues and forces tradeoffs between real-time performance and data accuracy. Thus, while many research efforts aim to enable satisfactory multimedia presentations, by providing adequate application and system support <ref> [2, 9, 3] </ref>, other efforts are directed towards characterizing and guaranteeing a certain quality of service (QoS) [17, 13]. 1 A possible definition of QoS is [20]: "QoS represents the set of those quantitative and qualitative characteristics of a distributed multimedia system necessary to achieve the required functionality of an application. <p> RM can be ameliorated through a technique that achieves jitter reduction, but usually decreases CPU utilization [7]. 7 2.3 Client-Site Architecture of an MPEG Player Our scheduling mechanism and admission tester will be analyzed by using tasks that simulate video processes from the client site of our distributed video player <ref> [2] </ref>. We will base our experiments on this player's architecture, as we found that it common for a distributed player, using compressed video streams. The MPEG compression standard [4] used in our player is also widely used. the player.
Reference: [3] <author> Sally Floyd, Van Jacobson, Ching-Gung Liu, Steven McCanne, and Lixia Zhang. </author> <title> A Reliable Multicast Framework for Light-weight Sessions and Application Level Framing. </title> <booktitle> In ACM SIGCOMM 95, </booktitle> <pages> pages 342-356, </pages> <year> 1995. </year>
Reference-contexts: The continuous transfer of massive amounts of data in real-time requires specific multimedia system design issues and forces tradeoffs between real-time performance and data accuracy. Thus, while many research efforts aim to enable satisfactory multimedia presentations, by providing adequate application and system support <ref> [2, 9, 3] </ref>, other efforts are directed towards characterizing and guaranteeing a certain quality of service (QoS) [17, 13]. 1 A possible definition of QoS is [20]: "QoS represents the set of those quantitative and qualitative characteristics of a distributed multimedia system necessary to achieve the required functionality of an application.
Reference: [4] <author> Didier Le Gall. </author> <title> MPEG: A Video Compression Standard for Multimedia Applications. </title> <journal> CACM, </journal> <volume> 34(4) </volume> <pages> 46-58, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: We will base our experiments on this player's architecture, as we found that it common for a distributed player, using compressed video streams. The MPEG compression standard <ref> [4] </ref> used in our player is also widely used. the player. The processes relevant for our considerations are the decoding process, and the display process. Buf1 holds the frames assembled from network packets.
Reference: [5] <author> Ching-Chih Han and Kang G. Shin. </author> <title> Scheduling MPEG-Compressed Video Streams with Firm Deadline Constraints. </title> <booktitle> In Proceedings of the ACM Multimedia'95, </booktitle> <pages> pages 411-422, </pages> <address> San Francisco, CA, </address> <year> 1995. </year>
Reference-contexts: Mercer et al. [10] have described a mechanism of reserving CPU for periodic tasks on microkernel architectures and have provided facilities for monitoring and policing in this environment. Han and Shin <ref> [5] </ref> have addressed the particular case of scheduling MPEG streams on the server and have described a scheduler and an admission tester for such streams based on the EDF algorithm. A common feature of all these approaches is that they are based on the RM or EDF scheduling algorithms. <p> Despite the diversity of CPU management issues proposed, we notice that their applicability on most of the platforms is limited. Usually, the mechanisms are implementing on real-time operating systems [10], or the studies are purely theoretical <ref> [5] </ref>. The lack of operating system support for resource reservation has impeded on end-to-end resource reservation attempts [12]. We also notice that the resource interplay that occurs at end-system level and between end-systems and network has been insufficiently studied in the context of reservations.
Reference: [6] <author> J. Lehoczky, L. Sha, and Y. Ding. </author> <title> The rate monotonic scheduling algorithm: exact characterization and average case behavior. </title> <booktitle> In Proc. IEEE 10th Real-Time Systems Symp., </booktitle> <pages> pages 166-171, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: While Liu and Layland have provided a schedulability test for the RM scheduling algorithm, their test is somewhat pessimistic a set of tasks might still be schedulable under RM even if it fails this test. Lehoczky et al. <ref> [6] </ref> have later provided the exact characterization of the RM scheduling algorithm. The term "exact" is used in the sense that if the Lehoczky et al. admission test fails, the set of tasks is guaranteed not to be schedulable under the RM mechanism. <p> Additional imprecision is introduced through context switch overhead, timer interrupt imprecision, non-preemptability in system calls and during I/O blocks. The admission tester we are studying uses the RM admission test described by Lehoczky et al. <ref> [6] </ref>, which assumes perfect preemptability of tasks. In this sense, our admission tester is optimistic: Some of the tasks it will accept should be rejected, even if we ignore the influence of non-real-time UNIX characteristics.
Reference: [7] <author> Kwei-Jay Lin and Ching-Shan Peng. </author> <title> Scheduling Algorithms for Real-Time Agent Systems. </title> <booktitle> In Proceedings of the Sixth International Workshop on Research Issues in Data Engineering (RIDE'96), </booktitle> <address> New Orleans, Louisiana, </address> <month> February </month> <year> 1996. </year>
Reference-contexts: The human eye is however sensitive to the non-uniformity in continuous data delivery, known as jitter. It has been shown that jitter is lower for tasks scheduled under RM than for tasks scheduled under EDF <ref> [7] </ref>. In addition, jitter for RM can be ameliorated through a technique that achieves jitter reduction, but usually decreases CPU utilization [7]. 7 2.3 Client-Site Architecture of an MPEG Player Our scheduling mechanism and admission tester will be analyzed by using tasks that simulate video processes from the client site of <p> It has been shown that jitter is lower for tasks scheduled under RM than for tasks scheduled under EDF <ref> [7] </ref>. In addition, jitter for RM can be ameliorated through a technique that achieves jitter reduction, but usually decreases CPU utilization [7]. 7 2.3 Client-Site Architecture of an MPEG Player Our scheduling mechanism and admission tester will be analyzed by using tasks that simulate video processes from the client site of our distributed video player [2].
Reference: [8] <author> C. L. Liu and J. W. Layland. </author> <title> Scheduling algorithms for multiprogramming in a hard real-time environment. </title> <journal> J. ACM, </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: In addition, it is one of the algorithms usually chosen for the study of continuous media scheduling. The RM scheduling algorithm was first characterized by Liu and Layland <ref> [8] </ref> under the following assumptions: * Tasks have periodic requests. * The only constraint on the deadlines is that the task must complete before its next request. * Tasks are independent the request of one task does not depend on the initiation or comple tion of another task. * The time <p> The five conditions required for RM and the assumption of having preemptive tasks hold for EDF as well. A measure of performance for these algorithms is the processor utilization factor the percentage of processor time spent in the execution of a task set <ref> [8] </ref>. Under RM, tasks are usually unschedulable for a processor utilization factor lower than for EDF. On the other hand, RM requires more context switching than EDF [19]. However, the priority recalculation required for EDF makes it much harder to implement than RM, and makes context switching more expensive.
Reference: [9] <author> Steven McCanne and Martin Vetterli. </author> <title> Joint Source/Channel Coding for Multicast Packet Video. </title> <booktitle> In Proceedings of the IEEE International Conference on Image Processing, </booktitle> <address> Washington, DC, </address> <year> 1995. </year>
Reference-contexts: The continuous transfer of massive amounts of data in real-time requires specific multimedia system design issues and forces tradeoffs between real-time performance and data accuracy. Thus, while many research efforts aim to enable satisfactory multimedia presentations, by providing adequate application and system support <ref> [2, 9, 3] </ref>, other efforts are directed towards characterizing and guaranteeing a certain quality of service (QoS) [17, 13]. 1 A possible definition of QoS is [20]: "QoS represents the set of those quantitative and qualitative characteristics of a distributed multimedia system necessary to achieve the required functionality of an application.
Reference: [10] <author> C. W. Mercer, S. Savage, and H. Tokuda. </author> <title> Processor Capacity Reserves: Operating System Support for Multimedia Applications. </title> <booktitle> In Proc. of the International Conference on Multimedia Computing and Systems, </booktitle> <pages> pages 90-99, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: In order to perform resource management, Staehli et al. [17] propose starting from application-level QoS specifications. This will require the translation from application-level parameters into low level resource requirements. The necessity of solving this "mapping problem" is widely recognized <ref> [10, 13] </ref> as the best means of allocating the correct amount of resources in the guaranteed approach. 2 Most of the effort for providing multimedia support, including guarantees, has focused on the network level [1]. However, many researchers notice the need for more operating system support for multimedia [19, 12]. <p> Ramakrishnan et al. [15] have addressed the problem of continuous media tasks coexisting with interactive and general-purpose tasks. Their scheduler and CPU admission tester offer performance guarantees for periodic tasks, while insuring satisfactory performance of interactive and general-purpose tasks. Mercer et al. <ref> [10] </ref> have described a mechanism of reserving CPU for periodic tasks on microkernel architectures and have provided facilities for monitoring and policing in this environment. <p> A common feature of all these approaches is that they are based on the RM or EDF scheduling algorithms. Despite the diversity of CPU management issues proposed, we notice that their applicability on most of the platforms is limited. Usually, the mechanisms are implementing on real-time operating systems <ref> [10] </ref>, or the studies are purely theoretical [5]. The lack of operating system support for resource reservation has impeded on end-to-end resource reservation attempts [12].
Reference: [11] <author> R. Nagarajan and C. Vogt. </author> <title> Performance of Multimedia Traffic over the Token Ring. </title> <type> Tech. report, </type> <address> IBM-ENC, Heidelberg, </address> <year> 1992. </year>
Reference-contexts: However, the priority recalculation required for EDF makes it much harder to implement than RM, and makes context switching more expensive. As mentioned, both the RM and EDF scheduling algorithms require preemptive scheduling. However, this condition is not satisfied on most of the existing platforms. Nagarajan and Vogt <ref> [11] </ref> have described an admission tester for the RM scheduling mechanism for nonpreemptable tasks. While using their test results in drastically reducing CPU utilization, we believe it is worth studying RM under nonpreemptive scheduling and our work addresses this aspect. <p> Notice that non-preemption at granularity lower than the time-slice does not mean that the operating system in not real-time. For instance, we could use the more restrictive admission test described by Nagarajan and Vogt <ref> [11] </ref> for nonpreemptable tasks. We will show that statistical guarantees can be offered under our scheduling mechanism, using the admission tester mentioned. We will analyze this for sets of tasks simulating tasks characteristic 10 to an MPEG video player client.
Reference: [12] <author> K. Nahrstedt and J.M. Smith. </author> <title> Design, Implementation and Experiences of the OMEGA Architecture. </title> <type> Tech. report, </type> <institution> University of Pennsylvania, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: However, many researchers notice the need for more operating system support for multimedia <ref> [19, 12] </ref>. In particular, multimedia applications require large disk and memory bandwidth, and impose scheduling constraints related to periodic arrival of data. <p> Usually, the mechanisms are implementing on real-time operating systems [10], or the studies are purely theoretical [5]. The lack of operating system support for resource reservation has impeded on end-to-end resource reservation attempts <ref> [12] </ref>. We also notice that the resource interplay that occurs at end-system level and between end-systems and network has been insufficiently studied in the context of reservations. Even though QoS-driven resource management is often mentioned as desirable, practical solutions are rarely described.
Reference: [13] <author> K. Nahrstedt and J.M. Smith. </author> <title> The QoS Broker. </title> <journal> IEEE Multimedia, </journal> <volume> 2(1) </volume> <pages> 53-67, </pages> <month> Spring </month> <year> 1995. </year>
Reference-contexts: Thus, while many research efforts aim to enable satisfactory multimedia presentations, by providing adequate application and system support [2, 9, 3], other efforts are directed towards characterizing and guaranteeing a certain quality of service (QoS) <ref> [17, 13] </ref>. 1 A possible definition of QoS is [20]: "QoS represents the set of those quantitative and qualitative characteristics of a distributed multimedia system necessary to achieve the required functionality of an application. <p> In order to perform resource management, Staehli et al. [17] propose starting from application-level QoS specifications. This will require the translation from application-level parameters into low level resource requirements. The necessity of solving this "mapping problem" is widely recognized <ref> [10, 13] </ref> as the best means of allocating the correct amount of resources in the guaranteed approach. 2 Most of the effort for providing multimedia support, including guarantees, has focused on the network level [1]. However, many researchers notice the need for more operating system support for multimedia [19, 12].
Reference: [14] <author> Jason Nieh, James G. Hanko, J. Duane Northcutt, and Gerard A. Wall. </author> <title> SVR4 UNIX Scheduler Unacceptable for Multimedia Applications. </title> <booktitle> In Proceedings of the 1993 International Workshop on Network and Operating Systems Support for Digital Audio and Video (NOSSDAV'93), </booktitle> <pages> pages 35-47, </pages> <address> Lancaster, U.K., </address> <month> November </month> <year> 1993. </year>
Reference-contexts: Real-time operating systems are based on schedulers that are priority-based, and are known not to provide adequate support for background computation. The recent versions of UNIX that support the facility of assigning real-time priorities to tasks will also exhibit the undesirable features of real-time systems. Nieh et al. <ref> [14] </ref> have shown that the time-sharing properties of the entire system can be compromised by using these real-time facilities for continuous media applications. As expected, the response time of background or interactive tasks can become extremely high, and even starvation can occur. <p> Real-time priorities do not degrade in time and all processes with real-time priorities will be prefered over the non-real-time ones. Processes with equal real-time priorities will be scheduled in round-robin fashion. It is often mentioned that using the real-time priority facility presents many risks <ref> [14] </ref>. A process with real-time priority can prevent all other lower priority or non-real-time processes from running, if it occupies 100% percent of the CPU. This implies that even the console will be frozen until that process will voluntarily give up the CPU. <p> For instance, the MPEG player we used for our experiments [Cen] becomes CPU bound when running a movie at 320x240 pixels resolution and 20 frames/second. Even if there is CPU available for non-real-time background or interactive tasks, their waiting time can be untolerably long <ref> [14] </ref>. We believe that an admission tester can prevent catastrophic or undesirable situations. By admitting only the video applications that can receive adequate service, our admission tester insures that admitted tasks do not impede on each other's performance.
Reference: [15] <author> K.K. Ramakrishnan, Lev Vaitzblit, Cary Gray, Uresh Vahalia, Dennis Ting, Percy Tzelnic, Steve Glaser, and Wayne Duso. </author> <title> Operating Systems Support for a Video-On-Demand File Service. </title> <booktitle> In Proceedings of the 1993 International Workshop on Network and Operating Systems Support for Digital Audio and Video (NOSSDAV'93), </booktitle> <pages> pages 225-236, </pages> <address> Lancaster, U.K., </address> <month> November </month> <year> 1993. </year> <month> 22 </month>
Reference-contexts: This is insufficient, as the data exhibit high variance. 8 Related Work Current research addresses diverse CPU management issues for continuous media applications. Ramakrishnan et al. <ref> [15] </ref> have addressed the problem of continuous media tasks coexisting with interactive and general-purpose tasks. Their scheduler and CPU admission tester offer performance guarantees for periodic tasks, while insuring satisfactory performance of interactive and general-purpose tasks.
Reference: [16] <author> A. Silberschatz and P. Galvin. </author> <title> Operating System Concepts. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mas--sachusetts, </address> <year> 1994. </year>
Reference-contexts: The existence of virtual memory or secondary storage makes real-time computing difficult, since page faults and disk accesses induce an unpredictable variation in servicing task requests. A nondeterministic behavior is also caused by an unpredictable dispatch latency, if tasks are non-preemptable in system calls or when blocking on I/O <ref> [16] </ref>. We should distinguish between hard real-time guarantees, when the completion time guaranteed has to be always satisfied, and soft real-time guarantees, when guarantee violations are acceptable, within certain statistical limits.
Reference: [17] <author> Richard Staehli, Jonathan Walpole, and David Maier. </author> <title> Quality of Service Specifications for Multimedia Presentations. </title> <journal> Multimedia Systems, </journal> 3(5/6):251-263, November 1995. 
Reference-contexts: Thus, while many research efforts aim to enable satisfactory multimedia presentations, by providing adequate application and system support [2, 9, 3], other efforts are directed towards characterizing and guaranteeing a certain quality of service (QoS) <ref> [17, 13] </ref>. 1 A possible definition of QoS is [20]: "QoS represents the set of those quantitative and qualitative characteristics of a distributed multimedia system necessary to achieve the required functionality of an application. <p> For both the adaptive and resource-reservation approaches, we notice that a certain amount of resource consumption has to be associated to a user-perceived quality. While user perception of quality is insufficiently described in litterature, Staehli et al. <ref> [17] </ref> have specified an architecture for describing QoS at the application level. Tradeoffs among different quality dimensions should be specified by the application through a QoS interface. For example, a loss of spatial resolution for digital video could be prefered to having a lower playback frame rate. <p> Tradeoffs among different quality dimensions should be specified by the application through a QoS interface. For example, a loss of spatial resolution for digital video could be prefered to having a lower playback frame rate. In order to perform resource management, Staehli et al. <ref> [17] </ref> propose starting from application-level QoS specifications. This will require the translation from application-level parameters into low level resource requirements.
Reference: [18] <author> John A. Stankovic. </author> <title> Misconceptions About Real-Time Computing. </title> <booktitle> IEEE Multimedia, </booktitle> <year> 1988. </year>
Reference-contexts: We notice that increase of CPU speed will benefit overall system performance, as more CPU will 4 be available for general-purpose and interactive tasks. Faster computing will never insure good real--time performance <ref> [18] </ref>, since a task will still miss its close deadline, if other unurgent computations occupy the CPU.
Reference: [19] <author> Ralf Steinmetz. </author> <title> Analyzing the Multimedia Operating System. </title> <booktitle> IEEE Multimedia, </booktitle> <year> 1995. </year>
Reference-contexts: However, many researchers notice the need for more operating system support for multimedia <ref> [19, 12] </ref>. In particular, multimedia applications require large disk and memory bandwidth, and impose scheduling constraints related to periodic arrival of data. <p> Under RM, tasks are usually unschedulable for a processor utilization factor lower than for EDF. On the other hand, RM requires more context switching than EDF <ref> [19] </ref>. However, the priority recalculation required for EDF makes it much harder to implement than RM, and makes context switching more expensive. As mentioned, both the RM and EDF scheduling algorithms require preemptive scheduling. However, this condition is not satisfied on most of the existing platforms.
Reference: [20] <author> Andreas Vogel, Brigitte Kerherve, Gregor von Bochmann, and Jan Gecsei. </author> <title> Distributed Multimedia and QoS: A Survey. </title> <booktitle> IEEE Multimedia, </booktitle> <month> May </month> <year> 1995. </year> <month> 23 </month>
Reference-contexts: Thus, while many research efforts aim to enable satisfactory multimedia presentations, by providing adequate application and system support [2, 9, 3], other efforts are directed towards characterizing and guaranteeing a certain quality of service (QoS) [17, 13]. 1 A possible definition of QoS is <ref> [20] </ref>: "QoS represents the set of those quantitative and qualitative characteristics of a distributed multimedia system necessary to achieve the required functionality of an application.
References-found: 20

