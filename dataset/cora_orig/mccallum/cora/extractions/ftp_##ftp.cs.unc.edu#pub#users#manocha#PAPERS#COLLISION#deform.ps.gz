URL: ftp://ftp.cs.unc.edu/pub/users/manocha/PAPERS/COLLISION/deform.ps.gz
Refering-URL: http://www.cs.unc.edu/Research/graphics/pubs.html
Root-URL: http://www.cs.unc.edu
Email: fhughesm,dimattia,lin,manochag@cs.unc.edu  
Title: Efficient and Accurate Interference Detection for Polynomial Deformation  
Author: Merlin Hughes Christopher DiMattia Ming C. Lin Dinesh Manocha 
Web: http://www.cs.unc.edu/geom/deform/index.html  
Address: Chapel Hill, NC 27599 USA  
Affiliation: Department of Computer Science University of North Carolina  
Abstract: We present efficient and accurate algorithms for interference detection among objects undergoing polynomial deformation. The scope of our algorithms include physically-based models undergoing dynamic simulation subject to non-penetration constraints, variational models, deformable models used in soft object animation, geometric models including polygonal meshes, parametric surfaces such as Bezier patches and B-splines, and solid models defined by such surfaces. Our algorithms use axis-aligned bounding boxes and convex hulls of the objects to identify the object pairs in close vicinity. They use subdivision, convex hull properties and linear programming to perform surface intersection tests and loop intersection tests. Frame-to-frame coherence is utilized to achieve incremental computations. The resulting algorithms have been implemented and work well in practice. In particular, we are able to compute all contacts accurately and at interactive speeds for flexible bodies undergoing second-order polynomial deformations. 
Abstract-found: 1
Intro-found: 1
Reference: [Baa84] <author> A. Baar. </author> <title> Global and local deformations of solid primitives. </title> <journal> ACM Computer Graphics, </journal> <volume> 18(3) </volume> <pages> 21-30, </pages> <year> 1984. </year>
Reference-contexts: Such deformations include those applied to the vertices of the polygonal models, free-form deformations (FFD) [TS86], extended free-form deformations (EFFD), animated free-form deformations (AFFD) [Coq90], direct manipulation of free-form deformations [HHK92], local and global deformations <ref> [Baa84] </ref> and hierarchical B-spline deformations [FB88]. A fundamental problem in these formulations is efficient and accurate collision detection between the boundaries of the objects. This includes interference checking between the boundaries of two objects and self-collision detection.
Reference: [Bar90] <author> D. Baraff. </author> <title> Curved surfaces and coherence for non-penetrating rigid body simulation. </title> <journal> ACM Computer Graphics, </journal> <volume> 24(4) </volume> <pages> 19-28, </pages> <year> 1990. </year>
Reference-contexts: In more general frameworks involving complex deformations and wrinkling situations, collision detection has been considered very challenging and time consuming [VT94, VCT95]. The problem of collision detection is also an integral part of physically-based modeling, robot motion planning, as well as computer simulated environments <ref> [Bar90, BB88, Hah88, HBZ90, MW88, Pen90, PW90, Stu87] </ref>. We present efficient and accurate collision detection algorithms for objects undergoing polynomial deformation. The underlying geometric models are composed of polygonal meshes, parametric surfaces and solids defined by such meshes, Bezier patches and B-spline surfaces. <p> There has been a considerable amount of literature on algorithms for animation and simulation environments with models composed of convex polytopes [MW88, GJK88]. More recently, in applications involving dynamic simulations and physical motion, geometric coherence has been utilized to devise algorithms based on local features <ref> [Bar90, LC91] </ref>. This has significantly improved the performance of colli sion detection algorithms in dynamic environments. <p> The major bottleneck in the intersection algorithms listed above is linear programming and surface subdivision. As the objects undergo polynomial deformation, the new control points are computed for each patch. In <ref> [Bar90] </ref>, Baraff has presented an algorithm to detect collisions between convex polytopes undergoing rigid motion using linear programming and coherence. In particular if two con vex polytopes do not overlap, there exists a separating plane overlapping with the face or edge of one of the poly-topes. <p> In particular if two con vex polytopes do not overlap, there exists a separating plane overlapping with the face or edge of one of the poly-topes. The particular face or edge is used as a witness and used in computing the separating plane at the next instance <ref> [Bar90] </ref>. Unfortunately, it is difficult to extend this approach to curved objects undergoing deformation. We do not compute the convex hull of the control points and therefore, no edge or face information is available to us.
Reference: [BB88] <author> R. Barzel and A. Barr. </author> <title> A modeling system based on dynamic constraints. </title> <journal> ACM Computer Graphics, </journal> <volume> 22(4) </volume> <pages> 31-39, </pages> <year> 1988. </year>
Reference-contexts: In more general frameworks involving complex deformations and wrinkling situations, collision detection has been considered very challenging and time consuming [VT94, VCT95]. The problem of collision detection is also an integral part of physically-based modeling, robot motion planning, as well as computer simulated environments <ref> [Bar90, BB88, Hah88, HBZ90, MW88, Pen90, PW90, Stu87] </ref>. We present efficient and accurate collision detection algorithms for objects undergoing polynomial deformation. The underlying geometric models are composed of polygonal meshes, parametric surfaces and solids defined by such meshes, Bezier patches and B-spline surfaces.
Reference: [BT95] <author> S. Bandi and D. Thalmann. </author> <title> An adaptive spatial subdivision of the object space for fast collision detection of animated rigid bodies. </title> <journal> Computer Graphics Forum, </journal> <volume> 14(3) </volume> <pages> 259-270, </pages> <year> 1995. </year>
Reference-contexts: More recently, Volino et. al. [VT94, VCT95] have presented efficient algorithms for self-collision detection on smoothly discretized surfaces undergoing complex deformations like wrinkling as well as adaptive spatial sub-division algorithms for animated rigid bodies <ref> [BT95] </ref>. 3 Background In this section, we review some of the techniques used in our collision detection algorithm presented in Section 4.
Reference: [BW92] <author> D. Baraff and A. Witkin. </author> <title> Dynamic simulation of non-penetrating flexible bodies. </title> <journal> ACM Computer Graphics, </journal> <volume> 26(2) </volume> <pages> 303-308, </pages> <year> 1992. </year>
Reference-contexts: Earlier, Lin and Manocha [LM93] presented efficient algorithms for curved models composed of spline surfaces and algebraic surfaces undergoing rigid motion. Other approaches for deformable motion are based on polygonal approximation of the model and checking the resulting polygons for collision <ref> [BW92] </ref>. However, such algorithms may not be accurate. It is possible that the actual surfaces collide with each other, but their polygonal approximations do not. <p> The routines for sweep-and-prune were found to be no less efficient for small numbers of objects than the N 2 algorithm. In particular, we tested the performance of the algorithm on polygonal models undergoing quadratic deformation, as described by Witkin and Welch [WW90], and used by Baraff and Witkin <ref> [BW92] </ref> for dynamic simulation of non-penetrating flexible bodies. 5.1 Quadratic Deformations The choice of the quadratic deformation model was motivated by its simplicity and powerful capabilities [TPBF87, TF88a, WW90, BW92]. It is reasonably fast in terms of computing the deformation and a representation of the boundary as Bezier patches. <p> the performance of the algorithm on polygonal models undergoing quadratic deformation, as described by Witkin and Welch [WW90], and used by Baraff and Witkin [BW92] for dynamic simulation of non-penetrating flexible bodies. 5.1 Quadratic Deformations The choice of the quadratic deformation model was motivated by its simplicity and powerful capabilities <ref> [TPBF87, TF88a, WW90, BW92] </ref>. It is reasonably fast in terms of computing the deformation and a representation of the boundary as Bezier patches. The model is that of space undergoing a quadratic transformation in each dimension.
Reference: [CLMP95] <author> J. Cohen, M. Lin, D. Manocha, and M. Ponamgi. I-collide: </author> <title> An interactive and exact collision detection system for large-scale environments. </title> <booktitle> In Proc. of ACM Interactive 3D Graphics Conference, </booktitle> <pages> pages 189-196, </pages> <year> 1995. </year>
Reference-contexts: This has significantly improved the performance of colli sion detection algorithms in dynamic environments. The idea of coherence has been generalized to large environments composed of hundreds and thousands of objects by Cohen et. al. <ref> [CLMP95] </ref> and the resulting I-COLLIDE system works very well for objects undergoing rigid motion. As for curved objects, Herzen et al [HBZ90] have described a general algorithm for time dependent parametric surfaces. It treats time as an extra dimension and also assumes bounds on derivatives. <p> We make use of the Sweep and Prune approach for sorting the bounding boxes <ref> [CLMP95] </ref>. This approach is based on projecting each bounding box onto the x, y and z axis and performing one-dimensional sort along each axis on the resulting intervals. A pair of bounding boxes overlap if and only if their intervals overlap in all three dimensions. <p> In practice M is typically a small number. Sweep and Prune algorithms have been used to compute overlaps between bounding boxes of thousands of moving objects at interactive rates <ref> [CLMP95] </ref>. 3.2 Hierarchical Sweep and Prune The sweep and prune technique has been extended to hierarchical models in [PML95]. Assume that we are given two hierarchical representations and the primitives at each leaf node correspond to elements which can be tested for collision.
Reference: [Coq90] <author> S. Coquillart. </author> <title> Extended free form deformation: a sculpting tool for 3d geometric modeling. </title> <journal> ACM Computer Graphics, </journal> <volume> 24(4) </volume> <pages> 187-193, </pages> <year> 1990. </year>
Reference-contexts: Also with U.S. Army Research Office. BW92], variational techniques [WW92b, TQ94], and local and global deformations applied directly to the geometric models. Such deformations include those applied to the vertices of the polygonal models, free-form deformations (FFD) [TS86], extended free-form deformations (EFFD), animated free-form deformations (AFFD) <ref> [Coq90] </ref>, direct manipulation of free-form deformations [HHK92], local and global deformations [Baa84] and hierarchical B-spline deformations [FB88]. A fundamental problem in these formulations is efficient and accurate collision detection between the boundaries of the objects. This includes interference checking between the boundaries of two objects and self-collision detection.
Reference: [CYTT92] <author> M. Carigan, Y. Yang, N. Magnetat Thalmann, and D. Thalmann. </author> <title> Dressing animated synthetic actors with complex deformable clothes. </title> <journal> ACM Computer Graphics, </journal> <volume> 26(2) </volume> <pages> 99-104, </pages> <year> 1992. </year>
Reference-contexts: It is possible that the actual surfaces collide with each other, but their polygonal approximations do not. In the animation literature, a number of algorithms for collision detection have been proposed for specific environments like cloth animation, dressing of synthetic actors, hair animation etc. <ref> [CYTT92, LND92, YT93, KAT93] </ref>.
Reference: [Duf92] <author> Tom Duff. </author> <title> Interval arithmetic and recursive subdivision for implicit functions and constructive solid geometry. </title> <journal> ACM Computer Graphics, </journal> <volume> 26(2) </volume> <pages> 131-139, </pages> <year> 1992. </year>
Reference-contexts: It treats time as an extra dimension and also assumes bounds on derivatives. The algorithm uses subdivision techniques in the higher dimensional space and can therefore be slow. A similar method using interval arithmetic has been presented for collision detection between implicitly defined models in <ref> [Duf92] </ref>. Duff has extended it to dynamic environments as well. However, for commonly used spline surfaces, computing and representing the implicit representations is expensive [Hof89]. Pentland and Williams, [PW90], proposed using implicit functions to represent shape and the property of the inside-outside functions for collision detection. <p> Pentland and Williams, [PW90], proposed using implicit functions to represent shape and the property of the inside-outside functions for collision detection. Besides its restriction to implicits, this algorithm has a drawback in terms of robustness as it uses point samples. A detailed explanation of these problems is given in <ref> [Duf92] </ref>. Algorithms based on interval arithmetic are useful, as they can handle a number of environments including objects undergoing deformable motion. However, their practical utility is not clear at the moment. They are currently restricted to objects whose motion can be expressed as a closed form function of time. <p> They are currently restricted to objects whose motion can be expressed as a closed form function of time. As we mentioned above, this is typically not the case in most applications. Furthermore, they are slow in practice. In particular, algorithms presented in <ref> [HBZ90, Duf92] </ref> converge very slowly to the solution and can take order of minutes to find precise contact. This has been improved by [ea93] by combining interval methods with Newton iteration to improve the convergence.
Reference: [ea93] <author> J. Snyder et. al. </author> <title> Interval methods for multi-point collisions between time dependent curved surfaces. </title> <booktitle> In Proceedings of ACM Siggraph, </booktitle> <pages> pages 321-334, </pages> <year> 1993. </year>
Reference-contexts: As we mentioned above, this is typically not the case in most applications. Furthermore, they are slow in practice. In particular, algorithms presented in [HBZ90, Duf92] converge very slowly to the solution and can take order of minutes to find precise contact. This has been improved by <ref> [ea93] </ref> by combining interval methods with Newton iteration to improve the convergence. However, the resulting algorithm requires on the order of thousands of iterations of interval arithmetic to compute the contact between time dependent parametric models, a few tens of seconds on a high end workstation.
Reference: [Far93] <author> G. Farin. </author> <title> Curves and Surfaces for Computer Aided Geometric Design: A Practical Guide. </title> <publisher> Academic Press Inc., </publisher> <year> 1993. </year>
Reference-contexts: The basis functions correspond to Bernstein polyno mials of the form B i;m (s) = i s i (1 s) mi for Bezier patches. The basis functions for B-spline surfaces are defined using knot sequences <ref> [Far93] </ref>. In this paper, we will assume that the basis functions for B-splines have at least C 1 continuity. Furthermore, the entire surface is contained in the convex hull of the control points, V i j [Far93]. <p> The basis functions for B-spline surfaces are defined using knot sequences <ref> [Far93] </ref>. In this paper, we will assume that the basis functions for B-splines have at least C 1 continuity. Furthermore, the entire surface is contained in the convex hull of the control points, V i j [Far93]. This is referred to as the convexity property of the control points. 3.5 Intersection of Bezier and B-spline Surfaces There are several conditions, some necessary and some sufficient, that can be used for interference detection between Bezier and B-spline patches.
Reference: [FB88] <author> D. Forsey and R.H. Bartels. </author> <title> Heirarchical b-spline refinement. </title> <booktitle> In Proc. of ACM Siggraph, </booktitle> <pages> pages 205-212, </pages> <year> 1988. </year>
Reference-contexts: Such deformations include those applied to the vertices of the polygonal models, free-form deformations (FFD) [TS86], extended free-form deformations (EFFD), animated free-form deformations (AFFD) [Coq90], direct manipulation of free-form deformations [HHK92], local and global deformations [Baa84] and hierarchical B-spline deformations <ref> [FB88] </ref>. A fundamental problem in these formulations is efficient and accurate collision detection between the boundaries of the objects. This includes interference checking between the boundaries of two objects and self-collision detection.
Reference: [GJK88] <author> E. G. Gilbert, D. W. Johnson, and S. S. Keerthi. </author> <title> A fast procedure for computing the distance between objects in three-dimensional space. </title> <journal> IEEE J. Robotics and Automation, </journal> <volume> vol RA-4:pp. </volume> <pages> 193-203, </pages> <year> 1988. </year>
Reference-contexts: Recursive subdivision is robust but computa-tionally expensive, and it often requires substantially more memory. As a result, the overall algorithms are slow. There has been a considerable amount of literature on algorithms for animation and simulation environments with models composed of convex polytopes <ref> [MW88, GJK88] </ref>. More recently, in applications involving dynamic simulations and physical motion, geometric coherence has been utilized to devise algorithms based on local features [Bar90, LC91]. This has significantly improved the performance of colli sion detection algorithms in dynamic environments.
Reference: [Hah88] <author> J. K. Hahn. </author> <title> Realistic animation of rigid bodies. </title> <journal> Computer Graphics, </journal> <volume> 22(4):pp. </volume> <pages> 299-308, </pages> <year> 1988. </year>
Reference-contexts: In more general frameworks involving complex deformations and wrinkling situations, collision detection has been considered very challenging and time consuming [VT94, VCT95]. The problem of collision detection is also an integral part of physically-based modeling, robot motion planning, as well as computer simulated environments <ref> [Bar90, BB88, Hah88, HBZ90, MW88, Pen90, PW90, Stu87] </ref>. We present efficient and accurate collision detection algorithms for objects undergoing polynomial deformation. The underlying geometric models are composed of polygonal meshes, parametric surfaces and solids defined by such meshes, Bezier patches and B-spline surfaces.
Reference: [HBZ90] <author> B. V. Herzen, A. H. Barr, and H. R. Zatz. </author> <title> Geometric collisions for time-dependent parametric surfaces. </title> <journal> Computer Graphics, </journal> <volume> 24(4) </volume> <pages> 39-48, </pages> <year> 1990. </year>
Reference-contexts: In more general frameworks involving complex deformations and wrinkling situations, collision detection has been considered very challenging and time consuming [VT94, VCT95]. The problem of collision detection is also an integral part of physically-based modeling, robot motion planning, as well as computer simulated environments <ref> [Bar90, BB88, Hah88, HBZ90, MW88, Pen90, PW90, Stu87] </ref>. We present efficient and accurate collision detection algorithms for objects undergoing polynomial deformation. The underlying geometric models are composed of polygonal meshes, parametric surfaces and solids defined by such meshes, Bezier patches and B-spline surfaces. <p> The idea of coherence has been generalized to large environments composed of hundreds and thousands of objects by Cohen et. al. [CLMP95] and the resulting I-COLLIDE system works very well for objects undergoing rigid motion. As for curved objects, Herzen et al <ref> [HBZ90] </ref> have described a general algorithm for time dependent parametric surfaces. It treats time as an extra dimension and also assumes bounds on derivatives. The algorithm uses subdivision techniques in the higher dimensional space and can therefore be slow. <p> They are currently restricted to objects whose motion can be expressed as a closed form function of time. As we mentioned above, this is typically not the case in most applications. Furthermore, they are slow in practice. In particular, algorithms presented in <ref> [HBZ90, Duf92] </ref> converge very slowly to the solution and can take order of minutes to find precise contact. This has been improved by [ea93] by combining interval methods with Newton iteration to improve the convergence.
Reference: [HHK92] <author> W. M. Hsu, J. F. Hughes, and H. Kaufmann. </author> <title> Direct manipulation of free-form deformations. </title> <journal> ACM Computer Graphics, </journal> <volume> 26(2) </volume> <pages> 177-184, </pages> <year> 1992. </year>
Reference-contexts: Army Research Office. BW92], variational techniques [WW92b, TQ94], and local and global deformations applied directly to the geometric models. Such deformations include those applied to the vertices of the polygonal models, free-form deformations (FFD) [TS86], extended free-form deformations (EFFD), animated free-form deformations (AFFD) [Coq90], direct manipulation of free-form deformations <ref> [HHK92] </ref>, local and global deformations [Baa84] and hierarchical B-spline deformations [FB88]. A fundamental problem in these formulations is efficient and accurate collision detection between the boundaries of the objects. This includes interference checking between the boundaries of two objects and self-collision detection.
Reference: [Hof89] <author> C.M. Hoffmann. </author> <title> Geometric and Solid Modeling. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, California, </address> <year> 1989. </year>
Reference-contexts: A similar method using interval arithmetic has been presented for collision detection between implicitly defined models in [Duf92]. Duff has extended it to dynamic environments as well. However, for commonly used spline surfaces, computing and representing the implicit representations is expensive <ref> [Hof89] </ref>. Pentland and Williams, [PW90], proposed using implicit functions to represent shape and the property of the inside-outside functions for collision detection. Besides its restriction to implicits, this algorithm has a drawback in terms of robustness as it uses point samples.
Reference: [Hoh91] <author> M.E. Hohmeyer. </author> <title> A surface intersection algorithm based on loop detection. </title> <journal> International Journal of Computational Geometry and Applications, </journal> <volume> 1(4) </volume> <pages> 473-490, </pages> <year> 1991. </year> <note> Special issue on Solid Modeling. </note>
Reference-contexts: The overlap between convex hulls is tested using linear programming. Other algorithms for interference detection test for intersection between the boundary curves of one patch with the other patch (and vice-versa). This test is combined with checks for closed loops between two patches <ref> [Hoh91] </ref>. All of these tests are implemented using subdivision based algorithms. The resulting algorithms are relatively simple to implement and serve as simple rejection tests for patches far away from each other. However, consider two patches which are only a small distance away from each other. <p> Rather we utilize the fact that either the intersection will be a closed loop intersection, or an edge-surface intersection <ref> [Hoh91] </ref>. Overlap of the pseudo-normal patches is a necessary condition for a closed loop intersection between two adjacent patches of a surface. Given two adjacent Bezier patches F 1 (s; t) and F 2 (s; t) (as shown in Fig. 5).
Reference: [KAT93] <author> T. Kurihara, K. Anjyo, and D. Thalmann. </author> <title> Hair animation with collision detection. </title> <booktitle> In Models and Techniques in Computer Animation, </booktitle> <pages> pages 128-38. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: It is possible that the actual surfaces collide with each other, but their polygonal approximations do not. In the animation literature, a number of algorithms for collision detection have been proposed for specific environments like cloth animation, dressing of synthetic actors, hair animation etc. <ref> [CYTT92, LND92, YT93, KAT93] </ref>.
Reference: [KM94] <author> S. Krishnan and D. Manocha. </author> <title> An efficient surface intersection algorithm based on the lower dimensional formulation. </title> <type> Technical Report TR94-062, </type> <institution> Department of Computer Science, University of North Car-olina, </institution> <year> 1994. </year>
Reference-contexts: However, consider two patches which are only a small distance away from each other. The subdivision algorithm would be applied a number of times to each patch. Not only is the resulting approach slow, it results in data proliferation. Other algorithms for surface intersection are based on tracing methods <ref> [MC91, KM94] </ref>. However, these algorithms require some pre-processing and are not fast enough for deformable models, where the control points are changing. 4 Our Algorithm In this section, we present the efficient and accurate collision detection algorithm for objects undergoing polynomial deformation.
Reference: [LC91] <author> M.C. Lin and John F. Canny. </author> <title> Efficient algorithms for incremental distance computation. </title> <booktitle> In IEEE Conference on Robotics and Automation, </booktitle> <year> 1991. </year>
Reference-contexts: There has been a considerable amount of literature on algorithms for animation and simulation environments with models composed of convex polytopes [MW88, GJK88]. More recently, in applications involving dynamic simulations and physical motion, geometric coherence has been utilized to devise algorithms based on local features <ref> [Bar90, LC91] </ref>. This has significantly improved the performance of colli sion detection algorithms in dynamic environments.
Reference: [LM93] <author> M.C. Lin and Dinesh Manocha. </author> <title> Interference detection between curved objects for computer animation. </title> <booktitle> In Models and Techniques in Computer Animation, </booktitle> <pages> pages 43-57. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: However, the resulting algorithm requires on the order of thousands of iterations of interval arithmetic to compute the contact between time dependent parametric models, a few tens of seconds on a high end workstation. Earlier, Lin and Manocha <ref> [LM93] </ref> presented efficient algorithms for curved models composed of spline surfaces and algebraic surfaces undergoing rigid motion. Other approaches for deformable motion are based on polygonal approximation of the model and checking the resulting polygons for collision [BW92]. However, such algorithms may not be accurate.
Reference: [LND92] <author> B. Lafleur, Magentat-Thalmann N., and Thalmann D. </author> <title> Cloth animation with self-collision detection. </title> <booktitle> Proceedings of IFIP WG5.10 Modeling in Computer Graphics, </booktitle> <pages> pages 179-185, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: It is possible that the actual surfaces collide with each other, but their polygonal approximations do not. In the animation literature, a number of algorithms for collision detection have been proposed for specific environments like cloth animation, dressing of synthetic actors, hair animation etc. <ref> [CYTT92, LND92, YT93, KAT93] </ref>.
Reference: [Man94a] <author> D. Manocha. </author> <title> Computing selected solutions of polynomial equations. </title> <booktitle> In Proceedings of International Symposium on Symbolic and Algebraic Computation, </booktitle> <pages> pages 1-8, </pages> <address> Oxford, England, 1994. </address> <publisher> ACM Press. </publisher>
Reference-contexts: The solutions are computed using resultants and eigenvalues <ref> [Man94b, Man94a] </ref>. This test is relatively slow.
Reference: [Man94b] <author> D. Manocha. </author> <title> Solving systems of polynomial equations. </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pages 46-55, </pages> <month> March </month> <year> 1994. </year> <note> Special Issue on Solid Modeling. </note>
Reference-contexts: The solutions are computed using resultants and eigenvalues <ref> [Man94b, Man94a] </ref>. This test is relatively slow.
Reference: [MC91] <author> D. Manocha and J.F. Canny. </author> <title> A new approach for surface intersection. </title> <journal> International Journal of Computational Geometry and Applications, </journal> <volume> 1(4) </volume> <pages> 491-516, </pages> <year> 1991. </year> <note> Special issue on Solid Modeling. </note>
Reference-contexts: However, consider two patches which are only a small distance away from each other. The subdivision algorithm would be applied a number of times to each patch. Not only is the resulting approach slow, it results in data proliferation. Other algorithms for surface intersection are based on tracing methods <ref> [MC91, KM94] </ref>. However, these algorithms require some pre-processing and are not fast enough for deformable models, where the control points are changing. 4 Our Algorithm In this section, we present the efficient and accurate collision detection algorithm for objects undergoing polynomial deformation.
Reference: [MW88] <author> M. Moore and J. Wilhelms. </author> <title> Collision detection and response for computer animation. </title> <journal> Computer Graphics, </journal> <volume> 22(4) </volume> <pages> 289-298, </pages> <year> 1988. </year> <title> Plate 1. Animation with Colliding Deformable Bodies. </title>
Reference-contexts: In more general frameworks involving complex deformations and wrinkling situations, collision detection has been considered very challenging and time consuming [VT94, VCT95]. The problem of collision detection is also an integral part of physically-based modeling, robot motion planning, as well as computer simulated environments <ref> [Bar90, BB88, Hah88, HBZ90, MW88, Pen90, PW90, Stu87] </ref>. We present efficient and accurate collision detection algorithms for objects undergoing polynomial deformation. The underlying geometric models are composed of polygonal meshes, parametric surfaces and solids defined by such meshes, Bezier patches and B-spline surfaces. <p> Recursive subdivision is robust but computa-tionally expensive, and it often requires substantially more memory. As a result, the overall algorithms are slow. There has been a considerable amount of literature on algorithms for animation and simulation environments with models composed of convex polytopes <ref> [MW88, GJK88] </ref>. More recently, in applications involving dynamic simulations and physical motion, geometric coherence has been utilized to devise algorithms based on local features [Bar90, LC91]. This has significantly improved the performance of colli sion detection algorithms in dynamic environments.
Reference: [NM95] <author> A. Narkhede and D. Manocha. </author> <title> Fast polygon triangulation based on seidel's algorithm. </title> <editor> In A. Paeth, editor, </editor> <booktitle> Graphics Gems V, </booktitle> <pages> pages 394-397, </pages> <publisher> Academic Press, </publisher> <year> 1995. </year>
Reference-contexts: Non-convex polygons are triangulated using the algorithm presented in <ref> [NM95] </ref>. Furthermore, these objects can be rendered without `cracks' appearing between adjacent faces, and are easily subdivided with no redundancy in the parameter space.
Reference: [Pen90] <author> A. Pentland. </author> <title> Computational complexity versus simulated environment. </title> <journal> Computer Graphics, </journal> <volume> 22(2) </volume> <pages> 185-192, </pages> <year> 1990. </year>
Reference-contexts: In more general frameworks involving complex deformations and wrinkling situations, collision detection has been considered very challenging and time consuming [VT94, VCT95]. The problem of collision detection is also an integral part of physically-based modeling, robot motion planning, as well as computer simulated environments <ref> [Bar90, BB88, Hah88, HBZ90, MW88, Pen90, PW90, Stu87] </ref>. We present efficient and accurate collision detection algorithms for objects undergoing polynomial deformation. The underlying geometric models are composed of polygonal meshes, parametric surfaces and solids defined by such meshes, Bezier patches and B-spline surfaces.
Reference: [PML95] <author> M. Ponamgi, D. Manocha, and M. Lin. </author> <title> Incremental algorithms for collision detection between general solid models. </title> <booktitle> In Proc. of ACM/Siggraph Symposium on Solid Modeling, </booktitle> <pages> pages 293-304, </pages> <year> 1995. </year>
Reference-contexts: In practice M is typically a small number. Sweep and Prune algorithms have been used to compute overlaps between bounding boxes of thousands of moving objects at interactive rates [CLMP95]. 3.2 Hierarchical Sweep and Prune The sweep and prune technique has been extended to hierarchical models in <ref> [PML95] </ref>. Assume that we are given two hierarchical representations and the primitives at each leaf node correspond to elements which can be tested for collision. We compute the smallest axis-aligned bounding volume for each leaf node. <p> The interval lists of lower levels are maintained for the duration of overlap between the parents. The level by level sorting of the bounding box hierarchies is tricky to manage both in terms of efficiency and memory usage for objects composed of thousands of primitives. Details are given in <ref> [PML95] </ref>. 3.3 Linear Programming Many algorithms for interference detection are reduced to checking whether the convex hulls of sets of points overlap. Such algorithms take O (n logn) time. We improve on this by reformulating the problem as a linear programming one.
Reference: [PS85] <author> F.P. Preparata and M. I. Shamos. </author> <title> Computational Geometry. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1985. </year>
Reference-contexts: However, the computation of convex hulls at each time step can be expensive and requires O (n logn) time <ref> [PS85] </ref>. Therefore, we check for overlaps between convex hulls by reducing the problem to one of linear programming and make use of fast randomized algorithms of linear complexity [Sei90].
Reference: [PW90] <author> A. Pentland and J. Williams. </author> <title> Good vibrations: Modal dynamics for graphics and animation. </title> <journal> Computer Graphics, </journal> <volume> 23(3) </volume> <pages> 185-192, </pages> <year> 1990. </year>
Reference-contexts: In more general frameworks involving complex deformations and wrinkling situations, collision detection has been considered very challenging and time consuming [VT94, VCT95]. The problem of collision detection is also an integral part of physically-based modeling, robot motion planning, as well as computer simulated environments <ref> [Bar90, BB88, Hah88, HBZ90, MW88, Pen90, PW90, Stu87] </ref>. We present efficient and accurate collision detection algorithms for objects undergoing polynomial deformation. The underlying geometric models are composed of polygonal meshes, parametric surfaces and solids defined by such meshes, Bezier patches and B-spline surfaces. <p> A similar method using interval arithmetic has been presented for collision detection between implicitly defined models in [Duf92]. Duff has extended it to dynamic environments as well. However, for commonly used spline surfaces, computing and representing the implicit representations is expensive [Hof89]. Pentland and Williams, <ref> [PW90] </ref>, proposed using implicit functions to represent shape and the property of the inside-outside functions for collision detection. Besides its restriction to implicits, this algorithm has a drawback in terms of robustness as it uses point samples. A detailed explanation of these problems is given in [Duf92].
Reference: [Sei90] <author> R. Seidel. </author> <title> Linear programming and convex hulls made easy. </title> <booktitle> In Proc. 6th Ann. ACM Conf. on Computational Geometry, </booktitle> <pages> pages 211-215, </pages> <address> Berkeley, Cal-ifornia, </address> <year> 1990. </year>
Reference-contexts: However, the computation of convex hulls at each time step can be expensive and requires O (n logn) time [PS85]. Therefore, we check for overlaps between convex hulls by reducing the problem to one of linear programming and make use of fast randomized algorithms of linear complexity <ref> [Sei90] </ref>. Results of these tests are then combined with subdivision methods, hierarchical sweep-and-prune and loop detection to check for interference between the boundary of two surfaces and singularity detection for self-collision detection. <p> In computational geometry literature, algorithms of linear complexity to solve the linear programming problem are well-known (given a fixed dimension). In our application, we make use of Seidel's randomized linear time algorithm <ref> [Sei90] </ref>. 3.4 Bezier and B-spline surfaces The algorithms described in this paper are applicable to polygonal surfaces or spline surfaces undergoing polynomial deformation. The resulting surfaces after the deformation are represented in terms of Bezier or B-spline surface patches. <p> The existence of a separating plane implies that this region is not a null set. We extend the randomized algorithm in <ref> [Sei90] </ref> to compute a point in this convex region. It corresponds to a separating plane, P, of the form ax + by + cz + d. At the next frame, we check whether P is a separating plane between the modified control points.
Reference: [Stu87] <author> D. Sturman. </author> <title> A discussion on the development of motion control systems. In SigGraph Course Notes: Computer Animation: 3-D Motion Specification and Control, number 10, </title> <year> 1987. </year>
Reference-contexts: In more general frameworks involving complex deformations and wrinkling situations, collision detection has been considered very challenging and time consuming [VT94, VCT95]. The problem of collision detection is also an integral part of physically-based modeling, robot motion planning, as well as computer simulated environments <ref> [Bar90, BB88, Hah88, HBZ90, MW88, Pen90, PW90, Stu87] </ref>. We present efficient and accurate collision detection algorithms for objects undergoing polynomial deformation. The underlying geometric models are composed of polygonal meshes, parametric surfaces and solids defined by such meshes, Bezier patches and B-spline surfaces.
Reference: [TPBF87] <author> D. Terzopoulos, J. Platt, A. Barr and K. Fleischer. </author> <title> Elastically deformable models. </title> <journal> Computer Graphics, </journal> <volume> 21(4) </volume> <pages> 205-214, </pages> <year> 1987. </year>
Reference-contexts: the performance of the algorithm on polygonal models undergoing quadratic deformation, as described by Witkin and Welch [WW90], and used by Baraff and Witkin [BW92] for dynamic simulation of non-penetrating flexible bodies. 5.1 Quadratic Deformations The choice of the quadratic deformation model was motivated by its simplicity and powerful capabilities <ref> [TPBF87, TF88a, WW90, BW92] </ref>. It is reasonably fast in terms of computing the deformation and a representation of the boundary as Bezier patches. The model is that of space undergoing a quadratic transformation in each dimension.
Reference: [TF88a] <author> D. Terzopoulos and K. Fleischer. </author> <title> Modeling inelastic deformation: Viscoelasticity, plasticity, fracture. </title> <journal> Computer Graphics, </journal> <volume> 22(4) </volume> <pages> 269-278, </pages> <year> 1988. </year>
Reference-contexts: the performance of the algorithm on polygonal models undergoing quadratic deformation, as described by Witkin and Welch [WW90], and used by Baraff and Witkin [BW92] for dynamic simulation of non-penetrating flexible bodies. 5.1 Quadratic Deformations The choice of the quadratic deformation model was motivated by its simplicity and powerful capabilities <ref> [TPBF87, TF88a, WW90, BW92] </ref>. It is reasonably fast in terms of computing the deformation and a representation of the boundary as Bezier patches. The model is that of space undergoing a quadratic transformation in each dimension.
Reference: [TQ94] <author> D. Terzopoulos and H. Qin. </author> <title> Dynamic nurbs with geometric constraints for interactive sculpting. </title> <journal> ACM Trans. on Computer Graphics, </journal> <volume> 13(2) </volume> <pages> 103-136, </pages> <year> 1994. </year>
Reference-contexts: Also with U.S. Army Research Office. BW92], variational techniques <ref> [WW92b, TQ94] </ref>, and local and global deformations applied directly to the geometric models.
Reference: [TS86] <author> Sederberg T.W and Parry S.R. </author> <title> Free-form deformation of solid geometric models. </title> <journal> ACM Computer Graphics, </journal> <volume> 20(4) </volume> <pages> 151-160, </pages> <year> 1986. </year>
Reference-contexts: Also with U.S. Army Research Office. BW92], variational techniques [WW92b, TQ94], and local and global deformations applied directly to the geometric models. Such deformations include those applied to the vertices of the polygonal models, free-form deformations (FFD) <ref> [TS86] </ref>, extended free-form deformations (EFFD), animated free-form deformations (AFFD) [Coq90], direct manipulation of free-form deformations [HHK92], local and global deformations [Baa84] and hierarchical B-spline deformations [FB88]. A fundamental problem in these formulations is efficient and accurate collision detection between the boundaries of the objects.
Reference: [VCT95] <author> P. Volino, M. Courchesne, and N. Magnetat Thal-mann. </author> <title> Versatile and efficient techniques for simulating cloth and other deformable objects. </title> <booktitle> ACM Computer Graphics (SIGGRAPH), </booktitle> <pages> pages 137-144, </pages> <year> 1995. </year>
Reference-contexts: In most cases collision detection has been handled in very simple ways, subject to geometrical optimization which exploits the simplicity of the situation. In more general frameworks involving complex deformations and wrinkling situations, collision detection has been considered very challenging and time consuming <ref> [VT94, VCT95] </ref>. The problem of collision detection is also an integral part of physically-based modeling, robot motion planning, as well as computer simulated environments [Bar90, BB88, Hah88, HBZ90, MW88, Pen90, PW90, Stu87]. We present efficient and accurate collision detection algorithms for objects undergoing polynomial deformation. <p> In the animation literature, a number of algorithms for collision detection have been proposed for specific environments like cloth animation, dressing of synthetic actors, hair animation etc. [CYTT92, LND92, YT93, KAT93]. More recently, Volino et. al. <ref> [VT94, VCT95] </ref> have presented efficient algorithms for self-collision detection on smoothly discretized surfaces undergoing complex deformations like wrinkling as well as adaptive spatial sub-division algorithms for animated rigid bodies [BT95]. 3 Background In this section, we review some of the techniques used in our collision detection algorithm presented in Section 4.
Reference: [VT94] <author> P. Volino and N. Magnetat Thalmann. </author> <title> Efficient self-collision detection on smoothly discretized surface animations using geometrical shape regularity. </title> <journal> Computer Graphics Forum (EuroGraphics Proc.), </journal> <volume> 13(3) </volume> <pages> 155-166, </pages> <year> 1994. </year>
Reference-contexts: In most cases collision detection has been handled in very simple ways, subject to geometrical optimization which exploits the simplicity of the situation. In more general frameworks involving complex deformations and wrinkling situations, collision detection has been considered very challenging and time consuming <ref> [VT94, VCT95] </ref>. The problem of collision detection is also an integral part of physically-based modeling, robot motion planning, as well as computer simulated environments [Bar90, BB88, Hah88, HBZ90, MW88, Pen90, PW90, Stu87]. We present efficient and accurate collision detection algorithms for objects undergoing polynomial deformation. <p> In the animation literature, a number of algorithms for collision detection have been proposed for specific environments like cloth animation, dressing of synthetic actors, hair animation etc. [CYTT92, LND92, YT93, KAT93]. More recently, Volino et. al. <ref> [VT94, VCT95] </ref> have presented efficient algorithms for self-collision detection on smoothly discretized surfaces undergoing complex deformations like wrinkling as well as adaptive spatial sub-division algorithms for animated rigid bodies [BT95]. 3 Background In this section, we review some of the techniques used in our collision detection algorithm presented in Section 4.
Reference: [WW90] <author> A. Witkin and W. Welch. </author> <title> Fast animation and control of non-rigid structures. </title> <journal> ACM Computer Graphics, </journal> <volume> 24 </volume> <pages> 243-252, </pages> <year> 1990. </year>
Reference-contexts: We utilize frame-to-frame coherence by making use of the geometric state at the previous time instance to perform incremental computations. The algorithms have been implemented and we demonstrate their performance on polygonal models undergoing second-order deformations based on the formulation in <ref> [WW90] </ref> (as shown in Plates 1 and 2). Our system can accurately compute all the contacts between the models at interactive rates. The rest of the paper is organized in the following manner. <p> The routines for sweep-and-prune were found to be no less efficient for small numbers of objects than the N 2 algorithm. In particular, we tested the performance of the algorithm on polygonal models undergoing quadratic deformation, as described by Witkin and Welch <ref> [WW90] </ref>, and used by Baraff and Witkin [BW92] for dynamic simulation of non-penetrating flexible bodies. 5.1 Quadratic Deformations The choice of the quadratic deformation model was motivated by its simplicity and powerful capabilities [TPBF87, TF88a, WW90, BW92]. <p> the performance of the algorithm on polygonal models undergoing quadratic deformation, as described by Witkin and Welch [WW90], and used by Baraff and Witkin [BW92] for dynamic simulation of non-penetrating flexible bodies. 5.1 Quadratic Deformations The choice of the quadratic deformation model was motivated by its simplicity and powerful capabilities <ref> [TPBF87, TF88a, WW90, BW92] </ref>. It is reasonably fast in terms of computing the deformation and a representation of the boundary as Bezier patches. The model is that of space undergoing a quadratic transformation in each dimension.
Reference: [WW92a] <author> A. Watt and M. Watt. </author> <title> Advanced Animation and Rendering Techniques. </title> <publisher> Addison Wesley, </publisher> <year> 1992. </year>
Reference-contexts: 1 Introduction Over the last few years a number of techniques have been developed for three-dimensional computer animation. These techniques produce animations directly from models, shape deformations and sets of equations specifying the dynamic behaviors of structures or machines. One major technique, soft object animation <ref> [WW92a] </ref>, intimately links the model and the animation of the data representing the model. Soft object animation is a set of techniques for animating a model with a deformation that varies with time.
Reference: [WW92b] <author> W. Welch and A. Witkin. </author> <title> Variational surface modeling. </title> <journal> ACM Computer Graphics, </journal> <volume> 26(2) </volume> <pages> 157-166, </pages> <year> 1992. </year>
Reference-contexts: Also with U.S. Army Research Office. BW92], variational techniques <ref> [WW92b, TQ94] </ref>, and local and global deformations applied directly to the geometric models.
Reference: [YT93] <author> Y. Yang and N. Magnetat Thalmann. </author> <title> An improved algorithm for collision detection in cloth animation with human body. </title> <journal> Computer Graphics and Applications (Pacific Graphics Procs), </journal> <pages> pages 237-251, </pages> <year> 1993. </year> <title> Plate 2a. Before Collision, No Overlap. Plate 2b. Bounding Box Overlap. Plate 2c. Collision Detected. </title>
Reference-contexts: It is possible that the actual surfaces collide with each other, but their polygonal approximations do not. In the animation literature, a number of algorithms for collision detection have been proposed for specific environments like cloth animation, dressing of synthetic actors, hair animation etc. <ref> [CYTT92, LND92, YT93, KAT93] </ref>.
References-found: 44

