URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/project/prodigy/Web/Mixed-init/Papers/final-ui.ps
Refering-URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/project/prodigy/Web/Mixed-init/paper-list.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fblythe,veloso,ledivalg@cs.cmu.edu  
Title: The PRODIGY User Interface  
Author: Jim Blythe, Manuela Veloso, and Luiz Edival de Souza 
Address: Pittsburgh, PA 15213 USA  
Affiliation: Computer Science Department Carnegie Mellon University  
Abstract: The PRODIGY user interface supports the process of both building and running a planning domain in PRODIGY. It was designed to be highly modular, requiring no changes to the code of the PRODIGY planner to run, and extensible, so that interfaces to other modules built on PRODIGY could easily be integrated into the interface. In this paper we describe how these goals were achieved. We demonstrate building a domain and animating the planning process. We describe extensions to the user interface to support planning by analogical reasoning and probabilistic planning with PRODIGY. 
Abstract-found: 1
Intro-found: 1
Reference: [ Blythe, 1995 ] <author> Jim Blythe. </author> <title> Planning under uncertainty. </title> <type> Technical report, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <year> 1995. </year>
Reference-contexts: The user can visualize the merging procedure, as it interleaves the multiple cases, marks the steps that are used after successful validation, and skips the ones that are no longer necessary or are invalid. 4.2 The probabilistic planner's user interface One extension of PRODIGY, discussed in <ref> [ Blythe, 1995 ] </ref> , reasons probabilistically about plans using Bayesian nets and Markov processes. Figure 7 shows part of 11 plan in a logistics domain with uncertainty. Square nodes are actions or events and round nodes are time-stamped propositions about the domain.
Reference: [ Carbonell et al., 1992 ] <author> Jaime G. Carbonell, Jim Blythe, Oren Etzioni, Yolanda Gil, Robert Joseph, Dan Kahn, Craig Knoblock, Steven Minton, Alicia Perez, Scott Reilly, Manuela Veloso, and Xuemei Wang. PRODIGY4.0: </author> <title> The manual and tutorial. </title> <type> Technical Report CMU-CS-92-150, </type> <institution> Department of Computer Science, Carnegie Mellon University, </institution> <month> June </month> <year> 1992. </year>
Reference-contexts: the process is faster than the alternative tracing method of printing a line of text to the lisp terminal. 3 2 Visualizing the planning algorithm One of the main goals underlying the design of the graphical user interface for PRODIGY4.0 was to provide a clear animation of the planning algorithm <ref> [ Carbonell et al., 1992 ] </ref> . In this section we first overview briefly the PRODIGY4.0's planning algorithm. 2 We then discuss several features in the user interface that enable the visualization of the running of algorithm. <p> The user can click on any of the fields in this operator definition when additional editing is needed. The figure shows the operator Drill-Hole-Drill-Press, from the process planning domain defined in [ Gil, 1991 ] . The tool supports the full operator syntax of PRODIGY <ref> [ Carbonell et al., 1992 ] </ref> , including constraint functions for variables, typed first-order logic expressions for preconditions including universal quantification, and conditional effects. Figure 5 illustrates the selection of a function to constrain the variable drill-bit-diameter.
Reference: [ Carbonell, 1986 ] <author> Jaime G. Carbonell. </author> <title> Derivational analogy: A theory of reconstructive problem solving and expertise acquisition. </title> <editor> In R. S. Michalski, J. G. Carbonell, and T. M. Mitchell, editors, </editor> <booktitle> Machine Learning, An Artificial Intelligence Approach, </booktitle> <volume> Volume II, </volume> <pages> pages 371-392. </pages> <publisher> Morgan Kaufman, </publisher> <year> 1986. </year>
Reference-contexts: The domain-dependent file overrides that function with routines that read from the state and draw in the window. 10 4.1 The interface for planning by analogical reasoning PRODIGY can plan by analogical reasoning following the derivational analogy approach <ref> [ Carbonell, 1986 ] </ref> . PRODIGY/ANALOGY is the module in PRODIGYthat retrieves and replays planning episodes from a library of planning cases also accumulated and maintained by the system [ Veloso, 1994 ] . This running mode can be selected from the interface.
Reference: [ Fink and Veloso, 1995 ] <author> Eugene Fink and Manuela Veloso. </author> <title> Formalizing the PRODIGY planning algorithm. </title> <booktitle> In Proceedings of the European Workshop on Planning, </booktitle> <month> September </month> <year> 1995. </year> <note> An earlier extended version is available as technical report CMU-CS-94-123, </note> <year> 1994. </year>
Reference-contexts: However it showed beneficial to capture PRODIGY4.0's behavior by separating the part of the plan resulting from applying operators, i.e. the head plan and the subgoaling structure, i.e. the tail plan <ref> [ Fink and Veloso, 1995 ] </ref> . A search node in PRODIGY4.0 can be seen then as being composed by the head and tail plans. The PRODIGY user interface captures this distinction as shown in Figure 2. It divides the planning window into the tail-plan and head-plan windows.
Reference: [ Gansner et al., 1988 ] <author> E. R. Gansner, S. C. North, and K. P. Vo. </author> <title> Dag a program to draw directed graphs. </title> <journal> Software Practice and Experience, </journal> <volume> 17(1) </volume> <pages> 1047-1062, </pages> <year> 1988. </year>
Reference-contexts: This allows problems to be loaded or planning to be initiated from either the terminal or the 2 interface. The user interface is implemented in Tcl/Tk, a scripting language which includes a set of Motif widgets, and makes use of Dag, a freely available preprocessor for drawing directed graphs <ref> [ Gansner et al., 1988 ] </ref> . For example, when the user clicks on view partial order, the UI sends a message to the planner to print the plan's partial order to a file, and runs Dag on that file when the planner replies that the task is completed.
Reference: [ Gil, 1991 ] <author> Yolanda Gil. </author> <title> A specification of process planning for PRODIGY. </title> <type> Technical Report CMU-CS-91-179, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <month> August </month> <year> 1991. </year>
Reference-contexts: The right side shows the operator as currently entered. The user can click on any of the fields in this operator definition when additional editing is needed. The figure shows the operator Drill-Hole-Drill-Press, from the process planning domain defined in <ref> [ Gil, 1991 ] </ref> . The tool supports the full operator syntax of PRODIGY [ Carbonell et al., 1992 ] , including constraint functions for variables, typed first-order logic expressions for preconditions including universal quantification, and conditional effects.
Reference: [ Joseph, 1992 ] <author> Robert L. Joseph. </author> <title> Graphical Knowledge Acquisition for Visually-Oriented Planning Domains. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <month> August </month> <year> 1992. </year> <note> Available as technical report CMU-CS-92-188. </note>
Reference-contexts: The development can be done in three different ways. The most obvious way to build the domain is to create the Lisp structures directly. This requires a complete knowledge of the system representation language. Another approach, embodied in a system called APPRENTICE <ref> [ Joseph, 1992 ] </ref> , was developed to produce the domain from a graphical specification. This method was shown to be successful for visually-oriented domains. We have implemented a form-based tool called Domain Builder in the PRODIGY user interface that allows interactive domain development within the planning system.
Reference: [ Paulokat and Wess, 1994 ] <author> Juergen Paulokat and Stefan Wess. </author> <title> Planning for ma-chining workpieces with a partial-order, nonlinear planner. </title> <booktitle> In Working notes of the AAAI Fall Symposium on Planning and Learning: On to Real Applications, </booktitle> <month> November </month> <year> 1994. </year>
Reference-contexts: The design of our user interface benefitted from and was inspired by other planning user interfaces, such as the ones from SIPE [ Wilkins et al., 1995 ] , CAPLAN <ref> [ Paulokat and Wess, 1994 ] </ref> , and O-PLAN [ Tate and Drabble, 1995 ] . 2.1 Overview of PRODIGY4.0's planning algorithm PRODIGY4.0 is a nonlinear planner that follows a means-ends analysis backward chaining search procedure reasoning about multiple goals and multiple alternative operators relevant to achieving the goals.
Reference: [ Stone et al., 1994 ] <author> Peter Stone, Manuela Veloso, and Jim Blythe. </author> <title> The need for different domain-independent heuristics. </title> <booktitle> In Proceedings of the Second International Conference on AI Planning Systems, </booktitle> <pages> pages 164-169, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: The head-plan is one of the possibly many linearizations of the partial order generated. Figure 1 shows the partial order window. Finally, the user can change the specific planning search mode, e.g. from eager to delayed step ordering commitments <ref> [ Stone et al., 1994 ] </ref> , can set a variety of different running parameters, and can select different display setups. 3 Building the Application Domain in PRODIGY To develop an application domain in PRODIGY, the user must specify an object type hierarchy, a set of predicates and a set of
Reference: [ Tate and Drabble, 1995 ] <editor> Austin Tate and Brian Drabble. O-plan's planworld viewers. </editor> <booktitle> In Proceedings of the Fourteenth UK Special Interest Group on Planning and Scheduling, Wivenhoe House Conference Centre, </booktitle> <publisher> Essex University, </publisher> <month> November </month> <year> 1995. </year>
Reference-contexts: The design of our user interface benefitted from and was inspired by other planning user interfaces, such as the ones from SIPE [ Wilkins et al., 1995 ] , CAPLAN [ Paulokat and Wess, 1994 ] , and O-PLAN <ref> [ Tate and Drabble, 1995 ] </ref> . 2.1 Overview of PRODIGY4.0's planning algorithm PRODIGY4.0 is a nonlinear planner that follows a means-ends analysis backward chaining search procedure reasoning about multiple goals and multiple alternative operators relevant to achieving the goals.
Reference: [ Veloso et al., 1995 ] <author> Manuela Veloso, Jaime Carbonell, M. Alicia Perez, Daniel Borrajo, Eugene Fink, and Jim Blythe. </author> <title> Integrating planning and learning: The PRODIGY architecture. </title> <journal> Journal of Experimental and Theoretical Artificial Intelligence, </journal> <volume> 7(1) </volume> <pages> 81-120, </pages> <year> 1995. </year>
Reference-contexts: 1 Introduction PRODIGY is a domain-independent planning and learning system that provides a base planning module and many capabilities implemented as integrated modules <ref> [ Veloso et al., 1995 ] </ref> . We recently developed a graphical user interface to PRODIGY that provides support for several of the tasks involved in developing and using a planning domain in PRODIGY. The PRODIGY user interface has a number of functions.
Reference: [ Veloso, 1994 ] <author> Manuela M. Veloso. </author> <title> Planning and Learning by Analogical Reasoning. </title> <publisher> Springer Verlag, </publisher> <month> December </month> <year> 1994. </year>
Reference-contexts: PRODIGY/ANALOGY is the module in PRODIGYthat retrieves and replays planning episodes from a library of planning cases also accumulated and maintained by the system <ref> [ Veloso, 1994 ] </ref> . This running mode can be selected from the interface. The user can solve problems and request that the planning episodes be stored. A new problem can then be solved by replaying and and merging possibly multiple past planning cases.
Reference: [ Wilkins et al., 1995 ] <author> David E. Wilkins, Karen L. Myers, John D. Lowrance, and Leonard P. Wesley. </author> <title> Planning and reacting in uncertain and dynamic environments. </title> <journal> Journal of Experimental and Theoretical AI, </journal> <volume> 7(1) </volume> <pages> 197-227, </pages> <year> 1995. </year> <month> 14 </month>
Reference-contexts: The design of our user interface benefitted from and was inspired by other planning user interfaces, such as the ones from SIPE <ref> [ Wilkins et al., 1995 ] </ref> , CAPLAN [ Paulokat and Wess, 1994 ] , and O-PLAN [ Tate and Drabble, 1995 ] . 2.1 Overview of PRODIGY4.0's planning algorithm PRODIGY4.0 is a nonlinear planner that follows a means-ends analysis backward chaining search procedure reasoning about multiple goals and multiple alternative
References-found: 13

