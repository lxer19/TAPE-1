URL: http://www.eecs.umich.edu/odyssey/Cobourn_thesis.ps
Refering-URL: http://www.eecs.umich.edu/odyssey/pubs.html
Root-URL: http://www.eecs.umich.edu
Title: Resource Management for CAD Frameworks  
Author: Thomas F. Cobourn 
Degree: A DISSERTATION SUBMITTED TO THE GRADUATE SCHOOL IN PARTIAL FULFILLMENT OF THE REQUIREMENTS for the degree of DOCTOR OF PHILOSOPHY in Electrical Engineering by  
Date: May, 1992  
Address: Pittsburgh, Pennsylvania  
Affiliation: CARNEGIE MELLON UNIVERSITY  Carnegie Mellon University  
Abstract-found: 0
Intro-found: 1
Reference: [1] <editor> A. Barr and E.A. Feigenbaum. </editor> <booktitle> The Handbook of Artificial Intelligence, </booktitle> <volume> Volume 1. </volume> <publisher> William Kaufmann, Inc., </publisher> <year> 1981. </year>
Reference-contexts: We have implemented a resource management system using a semantic data model based on frames containing attribute-value pairs called slots <ref> [1] </ref>.
Reference: [2] <author> A. Bredenfeld. </author> <title> Definition of Modeling Concepts for a Procedural Interface between VLSI-Design Tools and a Common Database. </title> <editor> F.J. Rammig and R. Waxman(editors), </editor> <booktitle> Electronic Design Automation Frameworks, </booktitle> <publisher> Elsevier Science Publishers, </publisher> <year> 1991. </year>
Reference: [3] <author> A. Rosenblatt and G.F. Watson. </author> <title> Concurrent Engineering. </title> <journal> IEEE Spectrum. </journal> <month> July, </month> <year> 1991. </year>
Reference-contexts: Chapter 2: Resource Management: Issues and Techniques Techniques 28 .... Resource Management for CAD Frameworks Another organization that is beginning to have an impact on resource level issues for open frameworks is the DARPA Initiative in Concurrent Engineering (DICE) <ref> [3] </ref>. DICEs mission is to develop, integrate, and disseminate technologies for concurrent engineering. The goal of DICE is different from that of CAD.
Reference: [4] <author> A. Sanders. </author> <title> How to get the best design tools working as one. </title> <month> June, </month> <year> 1990 </year> . 
Reference-contexts: Resource Management for CAD Frameworks The premier organization for ECAD framework activity is the CAD Framework Initiative (CFI). The CFI was formed in 1988 as an independent industry effort to promote standardization of CAD tool interfaces and their software environments <ref> [4] </ref>. The CFI charter is to gain a consensus from industry users, the academic community, and vendors, to develop guidelines for an industry-acceptable CAD framework implementation.
Reference: [5] <author> A.O. Deininger and C.V. Fernandez. </author> <title> Making Computer Behavior Consistent: The OSF/Motif Graphical User Interface. </title> <journal> Hewlett-Packard Journal. </journal> <month> June, </month> <year> 1990. </year>
Reference-contexts: The second is the OSF/Motif user interface environment <ref> [5] </ref>. Motif provides, among other things, a collection of user interface components such as menus, buttons, and scrollbars. Wide acceptance of the X Window System and Motif among ECAD tool and system developers has resulted in greater software portability and user interface consistency in recent CAD tools.
Reference: [6] <author> A.R. </author> <title> Newton. Electronic Design Interchange Format. </title> <booktitle> Proceedings of the Custom Integrated Circuit Conference. IEEE, </booktitle> <year> 1987. </year>
Reference-contexts: This spurred the development of data exchange standards to transform an O (n 2 ) proliferation of translators to O (n), as shown in Figure 2.4b. Examples of such standards -- both officially sanctioned and de facto -- include EDIF <ref> [6] </ref>, VHDL [35], and Verilog [25] for hardware description; CIF [13] and Magic [40] for layout; and PIF [90] for IC fabrication processes. <p> For example: list-of int <ref> [ 3 , 4 , 5 , 6 ] </ref> list-of string [ cyclops , hercules , minerva ] See Appendix C, Appendix D, and Appendix E for full-length examples of how Cyclops DDL is used.
Reference: [7] <author> American National Standards Institute. </author> <title> Interim Report from the Study Group on Database Management Systems. </title> <journal> SIGMOD Bulletin. </journal> <volume> 7(2), </volume> <year> 1973. </year>
Reference-contexts: The database community has long recognized the need for multiple abstractions, commonly called views, that give various user groups different ways to display and manipulate the same information. In their inuential report <ref> [7] </ref>, the ANSI/X3/SPARC group proposed a three-schema database architecture designed to separate user applications from the physical database.
Reference: [8] <author> B. Carver and A. Sanders. </author> <title> The CFI Procedural Interface. DEC Professional. </title> <month> November, </month> <year> 1990. </year>
Reference: [9] <author> B. Carver and T. Rhyne. </author> <title> CFI Demo Highlights CAD Vendor/User Cooperation. High Performance Systems. </title> <month> May, </month> <year> 1990. </year>
Reference: [10] <author> B.A. Myers. </author> <title> Tools for Creating User Interfaces: An Introduction and Survey. </title> <type> Technical Report CMU-CS-88-107, </type> <institution> Computer Science Department, Carnegie Mellon University, </institution> <month> January, </month> <year> 1988. </year>
Reference-contexts: Finally, the dialog layer expresses the presentation-dependent part of an application, usually via a user interface definition language, in terms of how application layer requests are mapped into user interface component behavior. UIMSs are classified by their handling of the dialog layer <ref> [10] </ref>, that is, how the programmer specifies what the user interface should look like. Successful approaches include event-driven, declarative, interactive layout, object-oriented, and data-driven [83]. Most of the advantages that a UIMS holds for generic software applies to CAD software as well.
Reference: [11] <author> B.W. Kernighan and D.M. Ritchie. </author> <title> The C Programming Language. </title> <publisher> Prentice-Hall, </publisher> <year> 1978. </year>
Reference-contexts: Most early CAD tools adopted the file based input/output behavior of C programs in a UNIX environment <ref> [11] </ref>: executed programs read one or more input files and write one or more output files. Eventually system integrators adopted conventional database technology to store design data.
Reference: [12] <author> C. Batini, M. Lenzerini, and S.B. Navathe. </author> <title> A Comparative Analysis of Methodologies for Database Schema Integration. </title> <journal> ACM Computing Surveys. </journal> <volume> 18(4), </volume> <month> December, </month> <year> 1986. </year>
Reference-contexts: The difficulties of schema integration are well known [87][97][89]. To the best of our knowledge, the only existing systems that attempt schema integration are research prototypes. (See <ref> [12] </ref> for a good survey and review.) An early project that developed a schema integration architecture was Multibase [46], a system for integrating access to pre-existing, heterogeneous, distributed databases.
Reference: [13] <author> C. Mead and L. Conway. </author> <title> Introduction to VLSI Systems. </title> <publisher> Addison-Wesley, </publisher> <year> 1980. </year>
Reference-contexts: Examples of such standards -- both officially sanctioned and de facto -- include EDIF [6], VHDL [35], and Verilog [25] for hardware description; CIF <ref> [13] </ref> and Magic [40] for layout; and PIF [90] for IC fabrication processes. Most early CAD tools adopted the file based input/output behavior of C programs in a UNIX environment [11]: executed programs read one or more input files and write one or more output files.
Reference: [14] <author> C.D. Peterson. </author> <title> Athena Widget Set - C Language Interface MIT X Consortium, 1989. 172 .... Resource Management for CAD Frameworks </title>
Reference-contexts: Motif, which contains a set of interaction devices called widgets, is quickly becoming just as popular as X, though it still faces competition from other widget sets such as Open Look [74] from AT&T and SUN, Athena <ref> [14] </ref> from MIT, and the object-oriented InterViews toolkit [58] from Stanford. Widget sets are a critical support tool for user interface development because implementing an entire user interface using only the X primitives requires a substantial amount of programming.
Reference: [15] <author> C.M. Eastman. </author> <title> Database Facilities for Engineering Design. </title> <booktitle> Proceedings of the IEEE. </booktitle> <volume> 69(10), </volume> <month> October, </month> <year> 1981. </year>
Reference-contexts: Eventually system integrators adopted conventional database technology to store design data. This was a significant development not only because there was a large quantity of information that needed to be reliably stored and accessed, but also because engineering design is characterized by an abundance of relationships between design entities <ref> [15] </ref>. Keeping all of this information in one place simplifies data management. <p> Typically a low level data model is used at the internal level and a high level data model is used at the conceptual and external levels. Eastman <ref> [15] </ref> identifies the need for multiple schemata in engineering design, where it is typical for diverse groups of specialists with varying information needs to be involved in the design of a single product.
Reference: [16] <author> CAD Framework Initiative. </author> <title> Framework Architecture Reference. </title> <month> November, </month> <year> 1991. </year> <note> draft proposal, Document 91, Version 0.87. </note>
Reference-contexts: Rather than creating entirely new standards, the CFI has to date encouraged the adoption of existing standards in electronic CAD, engineering CAD, and computing, as well as links to other standards bodies. The CFI framework model currently proposed by the Architecture TSC <ref> [16] </ref> is shown in manner as the Odyssey framework model does, it comes as no surprise that several CFI subcommittees are dealing with resource level issues. The Design Representation TSC is working to develop a procedural interface for ECAD data [22].
Reference: [17] <institution> CAD Framework Initiative. Fact Sheet. </institution> <month> June, </month> <year> 1990 </year> . 
Reference-contexts: The CFI charter is to gain a consensus from industry users, the academic community, and vendors, to develop guidelines for an industry-acceptable CAD framework implementation. The CFI contains seven technical subcommittees (TSCs): 10 Architecture, Systems Environment, Design Data Management, Design Methodology Management, Design Representation, Inter-Tool Communication, and User Interface <ref> [17] </ref>. Each subcommittee is responsible for generating proposals for standards in their area of expertise. These proposals go through a series of reviews and modifications until they are finally distributed to the CFI membership for comments and a corporate vote.
Reference: [18] <institution> CAD Framework Initiative. Inter-Tool Communication Architecture. </institution> <month> June, </month> <year> 1991. </year> <note> draft proposal, Document 55, Version 0.9. </note>
Reference-contexts: Operating systems provide communication primitives, but higher level facilities are needed to support distributed engineering design environments. Several CAD organizations, including ones at HP [60], Valid [99], Cadlab [100], the DoDs DICE concurrent engineering program [79], and most notably the CFIs Inter-Tool Communication (ITC) technical subcommittee <ref> [18] </ref>, have proposed the use of a new framework software module, called a message server, for coordinating the transfer of control information between CAD tools. The ITC-proposed message server uses an event handling paradigm closely modeled after the X Window System. <p> Resource Management for CAD Frameworks based X Window System that the approach became popular. The client/server paradigm has been used in several recent systems [100] [73] [60]; and various CFI subcommittees <ref> [18] </ref>, DICE projects [79][47], and commercial framework vendors are reportedly working on exploiting the client/server paradigm in their next generation CAD frameworks. <p> Recent systems bear greater resemblance to our own, due mostly to the generally recognized need for a framework message server, such as the one proposed by the CFI Inter-Tool Communication TSC <ref> [18] </ref>. The Nelsis framework [73] uses a client/server approach, but only for sharing meta data. Other systems that exploit the client/server paradigm do so in the same context as OCT/VEM/RPC -- to access a common design database.
Reference: [19] <author> CAD Framework Initiative. </author> <title> A Proposal to Adopt Standards for the CFI User Interface. </title> <month> July, </month> <year> 1990. </year> <note> TSC-approved draft proposal. </note>
Reference-contexts: See [86] for details. Chapter 2: Resource Management: Issues and Techniques Techniques Resource Management for CAD Frameworks.... 27 Two of the three remaining CFI TSCs are concerned with software environment issues. The User Interface TSC must choose a graphical window system and a user interface toolkit. Its recommendation <ref> [19] </ref> of the X Window System and OSF Motif toolkit and style guide are close to receiving approval. Although Figure 2.8 shows a UIMS module, the User Interface TSC has not yet published any documents describing it other than recommending a base widget set.
Reference: [20] <author> CAD Framework Initiative. </author> <title> Design Data Management Procedural Interface. </title> <month> February, </month> <year> 1992. </year> <note> straw proposal, Document DDM-91-G-1, Version 0.55. </note>
Reference-contexts: As their goal concerns solely the communication of design data, this group is firmly seated in the resource level. Other groups, however, straddle the resource and task levels. The Design Data Management TSC is chartered to develop procedural interfaces for meta data representation and storage management <ref> [20] </ref>. This subcommittee deals with the resource level issue of storing meta data, but also covers task level issues such as versioning, aggregation (i.e., collections), and concurrent access to data.
Reference: [21] <author> CAD Framework Initiative. </author> <title> Tool Encapsulation Specification. </title> <month> May, </month> <year> 1991. </year> <note> Draft Proposal, Document 51, Version 0.23. </note>
Reference-contexts: But their responsibilities also include the resource level issue of tool invocation, which is why the Design Methodology Management TSC is working on the CFIs tool encapsulation specification <ref> [21] </ref>. 10. During the final preparation of this document, we received news that the CFI had restructured the organization of its technical groups. There are now three Technical Committees (TCs): Computing Environment Services, Domain Independent Services, and Design Information.
Reference: [22] <editor> CAD Framework Initiative. </editor> <booktitle> The CFI DAC'90 Scalar Netlist Programming Interface Specification. </booktitle> <month> January, </month> <year> 1990. </year>
Reference-contexts: The Design Representation TSC is working to develop a procedural interface for ECAD data <ref> [22] </ref>. As their goal concerns solely the communication of design data, this group is firmly seated in the resource level. Other groups, however, straddle the resource and task levels. The Design Data Management TSC is chartered to develop procedural interfaces for meta data representation and storage management [20].
Reference: [23] <author> CAD Framework Initiative. </author> <title> Extension Language: Core Language Selection. </title> <month> March, </month> <year> 1991. </year> <note> Draft Proposal, Document Arch-91-G-1, Version 0.6. </note>
Reference-contexts: Most extension languages are built on top of a standard computing language. For example, all of the above examples are based on dialects of LISP. The CFI is proposing the use of Scheme as a base language <ref> [23] </ref>. An extension language that is quickly gaining widespread attention is Tcl [64].
Reference: [24] <author> CHI UIMS Tool Developer's Workshop. </author> <title> A Metamodel for the Runtime Architecture of an Interactive System. </title> <journal> SIGCHI Bulletin. </journal> <month> January, </month> <year> 1992. </year>
Reference-contexts: This introduces additional overhead that tool developers are reluctant to accept, especially with regard to existing tools. In our opinion, new UIMS techniques that provide exible boundaries between application and user interface, such as the Slinky UIMS model proposed in <ref> [24] </ref>, are needed to provide better support for ECAD applications. 2.2.5 Standards Development The importance of industry standards in each of the previous categories of resource level techniques is unquestionable. Accordingly standardization in and of itself is perhaps the most useful resource management technique of all.
Reference: [25] <author> D.E. Thomas and P. Moorby. </author> <title> The Verilog Hardware Description Language. </title> <publisher> Kluwer-Academic Publishers, </publisher> <year> 1991. </year>
Reference-contexts: This spurred the development of data exchange standards to transform an O (n 2 ) proliferation of translators to O (n), as shown in Figure 2.4b. Examples of such standards -- both officially sanctioned and de facto -- include EDIF [6], VHDL [35], and Verilog <ref> [25] </ref> for hardware description; CIF [13] and Magic [40] for layout; and PIF [90] for IC fabrication processes.
Reference: [26] <author> D.R. Rehak and H.C. Howard. </author> <title> Interfacing Expert Systems with Design Databases in Integrated CAD Systems. </title> <type> Technical Report EDRC-12-01-86, </type> <institution> Engineering Design Research Center, Carnegie Mellon University, </institution> <month> December, </month> <year> 1986. </year>
Reference-contexts: The language was designed such that a query can be automatically split into subqueries, each expressed in the local retrieval language of a particular database. The results of the subqueries are then collected and integrated into an answer to the original query. KADBASE <ref> [26] </ref>, a CAD environment for structural engineering, incorporated Multibase concepts to integrate expert systems with design databases. The problem with the Multibase approach is that the global schema must be carefully constructed from the local schemata.
Reference: [27] <author> D.S. Batory and W. Kim. </author> <title> Modeling Concepts for VLSI CAD Objects. </title> <journal> ACM Transactions on Database Systems. </journal> <volume> 10(3), </volume> <month> September, </month> <year> 1985. </year>
Reference: [28] <author> D.S. Harrison, P. Moore, </author> <title> R.L. Spickelmier, A.R. Newton. Data Management and Graphics Editing in the Berkeley Design Environment. </title> <booktitle> Proceedings of the International Conference on Computer-Aided Design. </booktitle> <year> 1986. </year>
Reference-contexts: Tools communicate with VEM via RPC 5 to access both VEM and OCT functionality, permitting use in a distributed, heterogeneous computing environment, as described in <ref> [28] </ref>. But the OCT/VEM/RPC system suffers from the classic drawbacks of common database design environments. Tools that were not programmed to use OCT are difficult to insert. Furthermore OCT does not provide a complete specification of how a chip design is stored. <p> OCT/VEM/RPC <ref> [28] </ref> pioneered the technique for CAD, but it was not until the huge success of the client/server 6. <p> The client/server paradigm has been used in several recent systems [100] [73] [60]; and various CFI subcommittees [18], DICE projects [79][47], and commercial framework vendors are reportedly working on exploiting the client/server paradigm in their next generation CAD frameworks. The OCT/VEM/RPC architecture is diagrammed in Figure 3.13, taken from <ref> [28] </ref>. (See Section 2.2.2 for a description of the system.) CAD tools, which may reside on remote hosts, communicate with VEM through RPC. RPC procedures that mimic the normal OCT library calls are provided to access an OCT database that stores design information for all applications.
Reference: [29] <author> David S. Harrison and A. Richard Newton and Rick L. Spickelmier and Timothy J. Barnes. </author> <title> Electronic CAD Frameworks. </title> <booktitle> Proceedings of the IEEE. </booktitle> <volume> 78(2) </volume> <pages> 393-417, </pages> <month> February, </month> <year> 1990. </year>
Reference-contexts: is permitted to view its portion of the design world as it sees fit rather than according to an industry standard view. 1.1 Tool Integration at the Resource Level CAD frameworks have traditionally been viewed as a collection of underlying facilities needed to support tool developers, system integrators, and designers <ref> [29] </ref>. But this user-oriented division of framework functionality often requires that aspects of tool, task, and methodology level issues be addressed simultaneously, a condition that makes a design system less exible and harder to modify. <p> CAD tools cannot be integrated unless they agree, at some level, on both the structure and meaning of design data. As the authors of <ref> [29] </ref> note: Chapter 2: Resource Management: Issues and Techniques Techniques 12 .... <p> The earliest approach to solving the data representation problem involved writing translators to and from the CAD tools to be integrated. This is depicted in Figure 2.4a (from <ref> [29] </ref>), where each arrow symbolizes a unidirectional translator program. But as the number of tools grew and representations evolved multiple versions to accommodate changes in technology, the organization of Figure 2.4a became unmanageable. <p> Eastman [15] identifies the need for multiple schemata in engineering design, where it is typical for diverse groups of specialists with varying information needs to be involved in the design of a single product. In <ref> [29] </ref> the same observation is made for ECAD using as an example the mask designers focus on layout geometry relationships versus the logic designers interest in gate types and connections.
Reference: [30] <author> E. Kantorowitz and O. Sudarsky. </author> <title> The Adaptable User Interface. </title> <journal> Communications of the ACM. </journal> <volume> 32(11), </volume> <month> November, </month> <year> 1989. </year> <title> Resource Management for CAD Frameworks.... </title> <type> 173 </type>
Reference-contexts: Furthermore, designers would be free to choose a UI technology that suits their personal preferences; a design site would not have to choose between Motif and Open Look -- they could have both. Eventually a UIMS may also support adaptable user interfaces, as described in <ref> [30] </ref>, that permit a user to switch dialog modes in the middle of a command. This directly addresses the difficulty in creating a CAD tool user interface that is appropriate for both the novice designer and the experienced designer.
Reference: [31] <author> E. Subrahmanian, A. Westerberg, and G. Podnar. </author> <title> A Shared Computational Environment for Concurrent Engineering. </title> <booktitle> Proceedings of the Second National Symposium on Concurrent Engineering. Concurrent Engineering Research Center, </booktitle> <address> Morgantown, WV, </address> <month> February, </month> <year> 1990. </year>
Reference-contexts: More research in fundamental areas such as distributed database systems [61] is needed to solve this class of problem. Perhaps ongoing work in shared information systems for large organizations, such as the ndim project <ref> [31] </ref> at Carnegie Mellons Engineering Design Research Center, could be interfaced to our architecture to provide support for the large-scale needs of companies that perform design. User Interface Server The user interface server does not play as critical a role as the data server in our resource management system.
Reference: [32] <author> EDA Systems, Inc. </author> <title> Developer's Reference for the Design Manager Server 1988. </title>
Reference-contexts: Another advantage of encapsulation is that it can be used to link a CAD tool to objects in a graphical user interface for tool control 8 . This technique was first used in CMUs Cadweld [36] and EDA Systems Design Manager Server <ref> [32] </ref>. Typically each encapsulated tool is represented visually by an icon. Through popup menus, buttons, or other user interface components, the designer can set the command-line arguments of a tool and initiate tool execution.
Reference: [33] <author> G. Kachel. </author> <title> A Multilayered Data Base System Architecture for Supporting Tool Integration. </title> <editor> F.J. Rammig and R. Waxman(editors), </editor> <booktitle> Electronic Design Automation Frameworks, </booktitle> <publisher> Elsevier Science Publishers, </publisher> <year> 1991. </year>
Reference-contexts: This may not always be the case when dealing with independently developed tools, whose local data schemata typically overlap. In ECAD, Cadlab has proposed an adaptation of the ANSI/X3/SPARC architecture called HIDE (High Level Database Language System) <ref> [33] </ref>. The conceptual level uses a structural object-oriented data model, i.e., the objects lack methods, while application views at the external level use a full object-oriented model. Support is provided for automatically translating queries and updates between external schemata and the conceptual schema.
Reference: [34] <institution> Honeywell. </institution> <note> EIS Update Newsletter. </note> <month> August, </month> <year> 1988 </year> . 
Reference-contexts: Resource level topics being investigated include transparent collocation of programs, 11 shared access to data, and tool encapsulation. The program of broadest scope is the Department of Defenses Engineering Information System (EIS) project <ref> [34] </ref>. The goal is to develop standards for and prototypes of a generic engineering information management system. The EIS program is divided into eight parts, many of which provide resource level framework support.
Reference: [35] <institution> IEEE Standard VHDL Language Reference Manual IEEE, </institution> <year> 1988. </year>
Reference-contexts: This spurred the development of data exchange standards to transform an O (n 2 ) proliferation of translators to O (n), as shown in Figure 2.4b. Examples of such standards -- both officially sanctioned and de facto -- include EDIF [6], VHDL <ref> [35] </ref>, and Verilog [25] for hardware description; CIF [13] and Magic [40] for layout; and PIF [90] for IC fabrication processes.
Reference: [36] <author> J. Daniell and S.W. </author> <title> Director. An Object Oriented Approach to CAD Tool Control. </title> <journal> IEEE Transactions on CAD of Integrated Circuits. </journal> <volume> 10(6), </volume> <month> June, </month> <year> 1991. </year>
Reference-contexts: Introduction Integrated circuit (IC) design has in the past been performed using CAD systems that can be characterized as design environments <ref> [36] </ref>. These tightly integrated tool suites contain CAD tools that were either developed to work with each other or patched together using custom translators and glue software. Design environments perform well but tend to be very fragile when modifications, such as the insertion of a new CAD tool, are necessary. <p> Another advantage of encapsulation is that it can be used to link a CAD tool to objects in a graphical user interface for tool control 8 . This technique was first used in CMUs Cadweld <ref> [36] </ref> and EDA Systems Design Manager Server [32]. Typically each encapsulated tool is represented visually by an icon. Through popup menus, buttons, or other user interface components, the designer can set the command-line arguments of a tool and initiate tool execution.
Reference: [37] <author> J. Gettys, R. Newman, and R.W. Scheier. </author> <title> Xlib - C Language X Interface Massachusetts Institute of Technology, </title> <note> 1989. Version 11, Release 4. </note>
Reference-contexts: With the idea that simplicity is the key to creating a usable UIMS, we decided against creating a new UIL language and instead incorporated Cyclops UIL into the X Window System resource specification <ref> [37] </ref>. Not to be confused with the word resource as used in Cyclops/Odyssey, X resources are properties that modify the size, color, font, and other basic characteristics of the windows in X applications. X resources are read by the X Server from a users .Xdefaults file.
Reference: [38] <author> J. Isaak. </author> <title> Standards - The History of POSIX: A Study in the Standards Process. </title> <journal> IEEE Computer. </journal> <volume> 23(7), </volume> <month> July, </month> <year> 1990. </year>
Reference-contexts: The first such tool that assists in constructing open frameworks is the operating system itself. Several operating systems are in common use, though UNIX derivatives such as DECs ULTRIX and IBMs AIX are the most popular for engineering applications [76]. Ongoing work to develop the IEEE POSIX <ref> [38] </ref> portable operating system interface standard should bring even more consistency, making it easier to port CAD tools to multiple platforms. Another important class of software that supports resource management at the operating system level involves inter-process and network communication. Two methods are popular.
Reference: [39] <author> J. Miller, K. Groning, G. Schulz, and C. White. </author> <title> The Object-Oriented Integration Methodology of the Cadlab Work Station Design Environment. </title> <booktitle> Proceedings of the 26th Design Automation Conference. </booktitle> <address> ACM/IEEE, </address> <year> 1989. </year>
Reference: [40] <author> J. Ousterhout. </author> <title> Magic Tutorial #2: </title> <institution> Basic Painting and Selection Computer Science Division, Electrical Engineering and Computer Sciences, University of California, Berkeley, </institution> <year> 1985. </year>
Reference-contexts: Examples of such standards -- both officially sanctioned and de facto -- include EDIF [6], VHDL [35], and Verilog [25] for hardware description; CIF [13] and Magic <ref> [40] </ref> for layout; and PIF [90] for IC fabrication processes. Most early CAD tools adopted the file based input/output behavior of C programs in a UNIX environment [11]: executed programs read one or more input files and write one or more output files.
Reference: [41] <author> J. Rosenberg, R. Hill, J. Miller, A. Schulert, and D. Shewmake. UIMSs: </author> <title> Threat or menace?. </title> <booktitle> Proceedings of CHI. ACM, </booktitle> <month> May, </month> <year> 1988. </year>
Reference-contexts: The sparsity of UIMSs for CAD is not without cause. There are doubts as to whether current UIMS technology can support direct manipulation interfaces that are rich in feedback <ref> [41] </ref>, which is the case for key ECAD tools like layout editors and schematic capture software. For example, the developer of a layout editor needs direct access to the underlying window system to create an efficient CAD tool.
Reference: [42] <author> J.B. Brockman and S.W. </author> <title> Director. The Hercules CAD Task Management System. </title> <booktitle> Proceedings of the International Conference on Computer-Aided Design. IEEE/ ACM, </booktitle> <month> November, </month> <year> 1991. </year>
Reference-contexts: Resource Management for CAD Frameworks system used in Odyssey <ref> [42] </ref> unifies many of the features of CAD data, process, and methodology management into a single, concise representation that significantly improves designer productivity. As shown in Figure 1.1, the task level can in turn be used to support a design process level that manages design methodology and planning activities [59]. <p> The designer invokes tasks in terms of familiar design concepts, shielded from the details of how those concepts are implemented. The advantages become more apparent when our resource management system is combined with a substantial task management system such as Hercules <ref> [42] </ref>. Public demonstrations of the Hercules/Cyclops combination have been ongoing since the fourth quarter of 1991.
Reference: [43] <author> J.K. Ousterhout. </author> <title> Corner Stitching: A Data-Structuring Technique for VLSI Tools. </title> <journal> IEEE Transactions on Computer-Aided Design of ICS and Systems. </journal> <volume> CAD-3(1), </volume> <month> January, </month> <year> 1984. </year>
Reference-contexts: More importantly, it allows data to be stored in different ways depending on the nature of the data and how it is used. For example, layout geometry can be stored in a corner-stitched representation <ref> [43] </ref> designed to be efficient for the operations performed by a layout editor, whereas device parameter Chapter 3: A New Approach to Resource Management Multi-Schema Design Environment Resource Management for CAD Frameworks.... 33 measurements can be stored in tables designed for efficient calculation of statistical information. (For instance, using S [82].)
Reference: [44] <author> J.L. Peterson and A. Silberschatz. </author> <title> Operating System Concepts. </title> <publisher> Addison-Wesley, </publisher> <year> 1985. </year>
Reference-contexts: For instance, a transistor frame might be annotated with the name of the circuit simulator input file that contains the parameter values of that transistor. Marking. Each frame and each slot in a frame has a binary semaphore <ref> [44] </ref> called a mark. Tools can use the mark to communicate the significance of specific frames or frame slots.
Reference: [45] <author> J.L. Sibert, W.D. Hurley, and T.W. Bleser. </author> <title> An Object-Oriented User Interface Management System. </title> <booktitle> Proceedings of the SIGGRAPH-86 Conference. ACM, </booktitle> <month> August, </month> <year> 1986. </year> <title> 174 .... Resource Management for CAD Frameworks </title>
Reference-contexts: This makes it easier to share data between the active entities in todays complex engineering design environments. Note that this is an example of the data-driven dialog layer approach, which has been used in generic UIMSs such as Serpent [51] and the George Washington UIMS <ref> [45] </ref>. The sparsity of UIMSs for CAD is not without cause. There are doubts as to whether current UIMS technology can support direct manipulation interfaces that are rich in feedback [41], which is the case for key ECAD tools like layout editors and schematic capture software.
Reference: [46] <author> J.M. Smith, P.A. Bernstein, U. Dayal, N. Goodman, T. Landers, K.W.T. Lin, and E. Wong. </author> <title> Multibase - integrating heterogeneous distributed database systems. </title> <booktitle> AFIPS Proceedings, National Computer Conference. </booktitle> <publisher> AFIPS Press, </publisher> <year> 1981. </year>
Reference-contexts: The difficulties of schema integration are well known [87][97][89]. To the best of our knowledge, the only existing systems that attempt schema integration are research prototypes. (See [12] for a good survey and review.) An early project that developed a schema integration architecture was Multibase <ref> [46] </ref>, a system for integrating access to pre-existing, heterogeneous, distributed databases. The main thrust of this work was to develop a single high level query language for all databases External Schema 1 External Schema N . . .
Reference: [47] <author> J.W. Lewis. </author> <title> An Approach to Applications Integration for Concurrent Engineering. </title> <booktitle> Proceedings of the Second National Symposium on Concurrent Engineering. </booktitle> <institution> Concurrent Engineering Research Center, West Virginia University, </institution> <month> February, </month> <year> 1990. </year>
Reference: [48] <author> Jay B. Brockman, Thomas F. Cobourn, Margarida F. Jacome, and Stephen W. </author> <title> Director. The Odyssey CAD Framework. </title> <journal> IEEE Design Automation Technical Committee Newsletter on Design Automation. </journal> <note> Spring, 1992. to appear. </note>
Reference-contexts: To deal more effectively with tool integration and other important issues such as task and methodology management, the Odyssey CAD Framework project <ref> [48] </ref> has developed a new framework model, shown in Figure 1.1, that consists of four levels of abstraction. Raw tools and data reside at the component level, the level at which designers invoke tools manually.
Reference: [49] <author> K.K. </author> <title> Low and S.W. Director. An Efficient Methodology for Building Macromodels of IC Fabrication Processes. </title> <journal> IEEE Transactions on Computer-Aided Design. </journal> <volume> 8(12), </volume> <month> December, </month> <year> 1989. </year>
Reference-contexts: A partitioning tool can be used to place cells on a chip to minimize the amount of wiring between cells, or it can be applied to clustering design variables based on their statistical correlation <ref> [49] </ref>. It would therefore be very advantageous to have a software architecture that allows you to easily switch a CAD tools user interface depending on the task being performed.
Reference: [50] <author> K.W. Fiduk, S. Kleinfeldt, M. Kosarchyn, and E.B. Perez. </author> <title> Design Methodology Management -- A CAD Framework Initiative Perspective. </title> <booktitle> Proceedings of the 27th Design Automation Conference. </booktitle> <address> ACM/IEEE, </address> <year> 1990. </year>
Reference: [51] <author> L.J. Bass, et al. Serpent: </author> <title> A User Interface Environment. </title> <booktitle> USENIX Conference Proceedings. </booktitle> <month> February, </month> <year> 1990. </year>
Reference-contexts: This makes it easier to share data between the active entities in todays complex engineering design environments. Note that this is an example of the data-driven dialog layer approach, which has been used in generic UIMSs such as Serpent <ref> [51] </ref> and the George Washington UIMS [45]. The sparsity of UIMSs for CAD is not without cause. <p> Frames are often used as the communication medium in data-driven user interface management systems. In UIMSs like Serpent <ref> [51] </ref>, a frame database must be constructed as part of the UIMS implementation. Our resource management system already provides frame services.
Reference: [52] <author> M. </author> <title> Chian. </title> <type> personal communication. </type> <month> April, </month> <title> 1992 . Harris Semiconductor, </title> <publisher> Inc. </publisher>
Reference-contexts: Chapter 5: Examples Schema Translation Resource Management for CAD Frameworks.... 87 to other encapsulation techniques. For example, a commercial framework vendor estimates that their integration product for SPICE-like circuit simulators requires a 1-3 person-month encapsulation effort [94]. The experience of one of their customers <ref> [52] </ref> confirmed this figure. Use of this integration product, however, encapsulates a CAD tool for a specific vendor framework. The encapsulation cannot be reused as is in other frameworks as can be done with Cyclops encapsulated tools.
Reference: [53] <author> M. Green. </author> <title> A Survey of Three Dialogue Models. </title> <journal> ACM Transactions on Graphics. </journal> <volume> 5(3), </volume> <month> July, </month> <year> 1986. </year>
Reference-contexts: A UIMS makes user interfaces easier to develop and modify by enforcing a separation of the user interface portion of a piece of software from its core functionality. A popular UIMS model is the Seeheim model <ref> [53] </ref>, shown in Figure 2.7. The application layer is where presentation-independent code resides. The presentation layer is typically a toolkit of widgets that control interaction with the end user.
Reference: [54] <author> M. Hardwick, W. Uejio, and D.L. Spooner. ROSE and CHIDE: </author> <title> user interface management system implementation as object-oriented database system application. </title> <booktitle> Computer-Aided Design. </booktitle> <volume> 22(8), </volume> <month> October, </month> <year> 1990. </year>
Reference-contexts: Unfortunately there are very few UIMS systems for CAD reported in the literature. The only one we are aware of is ROSE/CHIDE <ref> [54] </ref>, a research prototype developed at Rensselaer Polytechnic Institute. ROSE is a database system for interactive engineering applications that attempts to combine the best features of object-oriented and relational databases.
Reference: [55] <author> M. Santifaller. TCP/IP and NFS: </author> <title> Internetworking in a UNIX Environment. </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: Another important class of software that supports resource management at the operating system level involves inter-process and network communication. Two methods are popular. Both are designed to shield the programmer from the underlying message protocol layer, which is usually TCP/IP <ref> [55] </ref>. The oldest method, UNIX inter-process communication (IPC), consists of a library of C routines that create, read, and write sockets for datagram or stream communication [88]. The main characteristic of UNIX IPC is its similarity to UNIX file I/O, which makes it somewhat easier for UNIX programmers to use. <p> Chapter 2: Resource Management: Issues and Techniques Techniques Resource Management for CAD Frameworks.... 11 Unfortunately the library of routines is very primitive -- programming with IPC can be time-consuming and requires expertise to do it correctly. The second method is the remote procedure call (RPC) <ref> [55] </ref>. RPC allows a program to directly call procedures declared in other programs, as if the other programs were directly linked to the caller. This approach is at a higher level than IPC, and most implementations include mechanisms that automatically convert data (e.g., byte swapping) between different machine architectures. <p> This decision has stood the test of time as in recent years remote file systems such as RFS, NFS, and AFS have gained in popularity and are quickly becoming standard components of modern computing environments <ref> [55] </ref>. But not every design environment has these facilities, and in some cases (e.g., AFS) only disk servers are accessible, not personal machines. A second difference is that VEM provides a user interface, but not a user interface management system. VEM visualizes the database using a hard-coded user interface.
Reference: [56] <author> M.A. Breuer, W. Cheng, R. Gupta, I. Hardonag, E. Horowitz, and S.Y. Lin. Cbase 1.0: </author> <title> A CAD Database for VLSI Circuits Using Object Oriented Technology. </title> <booktitle> Proceedings of the International Conference on Computer-Aided Design. IEEE, </booktitle> <year> 1988. </year>
Reference: [57] <author> M.A. Ellis and B. Stroustrup. </author> <title> The Annotated C++ Reference Manual. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: Figure 3.5a illustrates the frame based data model. The example schema in Figure 3.5b describes the same information represented in Figure 2.2b. Notice that frame classes can inherit slots from one or more parent frame classes. Frames are essentially C++ objects <ref> [57] </ref> that only have data members (no function members). An additional feature, the ability to mark frames or individual frame slots, was added as a convenience for tools to communicate the special significance of certain slots or entire frame instances.
Reference: [58] <author> M.A. Linton, J.M. Vlissides, and P.R. Calder. </author> <title> Composing User Interfaces with InterViews. </title> <journal> IEEE Computer. </journal> <volume> 22(2), </volume> <month> February, </month> <year> 1989. </year>
Reference-contexts: Motif, which contains a set of interaction devices called widgets, is quickly becoming just as popular as X, though it still faces competition from other widget sets such as Open Look [74] from AT&T and SUN, Athena [14] from MIT, and the object-oriented InterViews toolkit <ref> [58] </ref> from Stanford. Widget sets are a critical support tool for user interface development because implementing an entire user interface using only the X primitives requires a substantial amount of programming. <p> Section 4.4.3 describes how these associations are made. 4.4.2 User Interface Toolkit The C++ user interface toolkit developed for the User Interface Server uses multiple inheritance to combine various classes in the InterViews Graphical User Interface Toolkit <ref> [58] </ref> with a special C++ class, CUIDevice, that adds the ability to communicate with Chapter 4: The Cyclops Resource Management System User Interface Server Resource Management for CAD Frameworks.... 71 Cyclops services. For example, the User Interface Servers CUIPushButton class inherits from both CUIDevice and the InterViews PushButton class.
Reference: [59] <author> M.F. Jacome and S.W. </author> <title> Director. Design Process Management for CAD Frameworks. </title> <booktitle> Proceedings of the 29th Design Automation Conference. ACM/ IEEE, </booktitle> <month> June, </month> <year> 1992. </year> <note> to appear. </note> <institution> Resource Management for CAD Frameworks.... </institution> <month> 175 </month>
Reference-contexts: As shown in Figure 1.1, the task level can in turn be used to support a design process level that manages design methodology and planning activities <ref> [59] </ref>. At this level, designers can concentrate exclusively on issues that concern the creative and exploratory aspects of design, resulting in even greater gains in productivity. 1.2 Dissertation Outline The remainder of this dissertation is organized as follows. <p> Public demonstrations of the Hercules/Cyclops combination have been ongoing since the fourth quarter of 1991. Together Hercules and Cyclops form the Odyssey CAD Frameworks Executive Subsystem, which will eventually be combined with the Minerva Design Process Management System <ref> [59] </ref>. 6.2.5 Software for a Resource Management System Finally our research produced working, advanced software for resource management. The major modules were the Data Server, the user interface server, the execution manager, and the client programming interface.
Reference: [60] <author> M.R. Cagan. </author> <title> The HP SoftBench Environment: An Architecture for a New Generation of Software Tools. </title> <journal> Hewlett-Packard Journal. </journal> <month> June, </month> <year> 1990. </year>
Reference-contexts: A procedural interface alone does not satisfy a frameworks inter-tool communication needs. Operating systems provide communication primitives, but higher level facilities are needed to support distributed engineering design environments. Several CAD organizations, including ones at HP <ref> [60] </ref>, Valid [99], Cadlab [100], the DoDs DICE concurrent engineering program [79], and most notably the CFIs Inter-Tool Communication (ITC) technical subcommittee [18], have proposed the use of a new framework software module, called a message server, for coordinating the transfer of control information between CAD tools. <p> Resource Management for CAD Frameworks based X Window System that the approach became popular. The client/server paradigm has been used in several recent systems [100] [73] <ref> [60] </ref>; and various CFI subcommittees [18], DICE projects [79][47], and commercial framework vendors are reportedly working on exploiting the client/server paradigm in their next generation CAD frameworks.
Reference: [61] <author> M.T. Ozsu and P. Valduriez. </author> <title> Distributed Database Systems: Where Are We Now?. </title> <booktitle> IEEE Computer. </booktitle> <month> August, </month> <year> 1991. </year>
Reference-contexts: A hierarchy of data servers might be used to buffer requests, but would probably cause more delays. In our opinion, there is a limit to the size of design organization that our architecture can support. More research in fundamental areas such as distributed database systems <ref> [61] </ref> is needed to solve this class of problem. Perhaps ongoing work in shared information systems for large organizations, such as the ndim project [31] at Carnegie Mellons Engineering Design Research Center, could be interfaced to our architecture to provide support for the large-scale needs of companies that perform design.
Reference: [62] <author> M.T. </author> <title> Trick. LASSIE: A Layout System for Behavioral Synthesis Tools. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <month> January, </month> <year> 1990. </year>
Reference: [63] <author> Meta-Software, Inc. </author> <note> HSPICE User's Manual H9007 1990. </note>
Reference-contexts: Resource Management for CAD Frameworks provides the server communication functions described in Section 4.3. The ToolShell class adds convenience functions for accessing the Client Interface. SimpleToolShell is a class for CAD tools that perform one function. HSpiceShell is an encapsulation of the HSPICE circuit simulator <ref> [63] </ref>. It adds code for handling operation requests in terms of the frame classes defined in the hspice data schema; for example, preprocessing of the netlist, device-model, and stimulus argument frames received with a run operation. It also contains code to read and write HSPICE-compatible data files. <p> for all tools in the framework. 3 We have not yet attempted to decrease this overhead, but we are optimistic that future revisions of the Cyclops Data Server and Execution Manager will bring some improvement. 5.1.2 Circuit Simulator We have encapsulated a popular commercial CAD tool, the HSPICE circuit simulator <ref> [63] </ref>, for insertion into the Cyclops Resource Management System. The encapsulation uses the hspice schema (see description in Appendix D), a simple data schema that closely mimics the HSPICE component level. A simulator frame represents the tool, while netlist and result-list frames represent the input and output files, respectively.
Reference: [64] <author> J.K. Ousterhout. </author> <title> Tcl: An Embeddable Command Language. </title> <booktitle> USENIX Conference Proceedings. </booktitle> <month> February, </month> <year> 1990. </year>
Reference-contexts: Most extension languages are built on top of a standard computing language. For example, all of the above examples are based on dialects of LISP. The CFI is proposing the use of Scheme as a base language [23]. An extension language that is quickly gaining widespread attention is Tcl <ref> [64] </ref>.
Reference: [65] <author> J.K. Ousterhout. </author> <title> An X11 Toolkit Based on the Tcl Language. </title> <booktitle> USENIX Conference Proceedings. </booktitle> <month> February, </month> <year> 1991. </year>
Reference-contexts: Tcl provides a simple command language whose only data type is a string, a parser for that language that is embedded in every tool as its argument handler, a collection of useful utility functions, and a library of Tcl-wrapped user interface widgets called Tk <ref> [65] </ref> that can be invoked just as any other tool in the system. <p> It is important to emphasize the uniqueness of this level of separation of tool from user interface in the CAD domain. Previous approaches have achieved code separation, notably the Tk user interface toolkit <ref> [65] </ref>. Yet the tool must still have knowledge of the widget that it is controlling. In our approach, the tool has no such knowledge. This makes it possible to port tools without modification between platforms with differing GUI support.
Reference: [66] <author> N. Johnson. AutoCAD: </author> <title> The Complete Reference. </title> <publisher> Osbourne McGraw-Hill, </publisher> <year> 1989. </year>
Reference-contexts: The language must be able to incorporate new functions that are registered by the tools that provide those functions. Extension languages have been used in commercial frameworks for several years; examples include Cadences Skill [95] and AutoCADs AutoLisp <ref> [66] </ref>. Most extension languages are built on top of a standard computing language. For example, all of the above examples are based on dialects of LISP. The CFI is proposing the use of Scheme as a base language [23].
Reference: [67] <author> N. Vidovic and D.P. Siewiorek. </author> <title> Integration Infrastructure: A Software Model for Integrated Environment for Concurrent Engineering. </title> <booktitle> Proceedings of the International Conference on Systems Engineering. IEEE, </booktitle> <month> August, </month> <year> 1990. </year>
Reference: [68] <author> N. Weste and K. Eshraghian. </author> <title> Principles of CMOS VLSI Design. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: For digital IC design, the commonly used levels are architecture, algorithmic, functional block, logic, circuit, and IC fabrication process. It is also generally recognized that there are three distinct views of each level: behavioral, structural, and physical <ref> [68] </ref>. level excluded) and provides examples of the intersection of each level and view.
Reference: [69] <institution> Objectivity/DB System Overview Objectivity, Inc., </institution> <year> 1991. </year>
Reference-contexts: Unfortunately multi-schema database technology is not yet widely available. For example, the commercial database Objectivity/DB <ref> [69] </ref> supports the distribution of data across multiple databases residing on different host platforms; but all of the databases must use a common data schema.
Reference: [70] <author> Open Software Foundation. </author> <title> The OSF/Motif Unified User Environment. </title> <year> 1989. </year>
Reference-contexts: Many hardware vendors now provide RPC facilities for their machines, making RPC the method of choice for creating networked applications. Graphical user interfaces for open frameworks have benefited tremendously by the computing communitys broad acceptance of the X Window System [85] and the Motif User Interface Environment <ref> [70] </ref>. X, which provides a window based library of graphics primitives, has become a de facto standard.
Reference: [71] <author> P. Feldmann. </author> <title> Statistical Integrated Circuit Design. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <month> February, </month> <year> 1991. </year>
Reference-contexts: Due to the broadness of the domain, ECAD tools are beginning to be used to serve more than one design function. For example a circuit simulator may be used directly by a designer to produce circuit analyses, or it may used by an automated program that creates regression models <ref> [71] </ref>. A partitioning tool can be used to place cells on a chip to minimize the amount of wiring between cells, or it can be applied to clustering design variables based on their statistical correlation [49].
Reference: [72] <author> P. Sutton. </author> <type> personal communication. </type> <month> April, </month> <institution> 1992 . Carnegie Mellon University. </institution>
Reference-contexts: For example, the commercial database Objectivity/DB [69] supports the distribution of data across multiple databases residing on different host platforms; but all of the databases must use a common data schema. Objectivity, Inc., has announced plans to introduce a multi-schema version by late 1992 <ref> [72] </ref>, but it appears that the release will contain no special support for coordinating the use of multiple schemata.
Reference: [73] <author> P. van der Wolf, G.W. Sloof, P. Bingley, and P. Dewilde. </author> <title> Meta Data Management in the NELSIS CAD Framework. </title> <booktitle> Proceedings of the 27th Design Automation Conference. </booktitle> <address> ACM/IEEE, </address> <year> 1990. </year>
Reference-contexts: Resource Management for CAD Frameworks based X Window System that the approach became popular. The client/server paradigm has been used in several recent systems [100] <ref> [73] </ref> [60]; and various CFI subcommittees [18], DICE projects [79][47], and commercial framework vendors are reportedly working on exploiting the client/server paradigm in their next generation CAD frameworks. <p> Recent systems bear greater resemblance to our own, due mostly to the generally recognized need for a framework message server, such as the one proposed by the CFI Inter-Tool Communication TSC [18]. The Nelsis framework <ref> [73] </ref> uses a client/server approach, but only for sharing meta data. Other systems that exploit the client/server paradigm do so in the same context as OCT/VEM/RPC -- to access a common design database.
Reference: [74] <author> P.D. Winston and A.K. Harden. </author> <title> OPEN LOOK Graphical User Interface. </title> <journal> XNextEvent: Newsletter of XUG. </journal> <volume> 1(2), </volume> <month> June, </month> <year> 1988. </year>
Reference-contexts: X, which provides a window based library of graphics primitives, has become a de facto standard. Motif, which contains a set of interaction devices called widgets, is quickly becoming just as popular as X, though it still faces competition from other widget sets such as Open Look <ref> [74] </ref> from AT&T and SUN, Athena [14] from MIT, and the object-oriented InterViews toolkit [58] from Stanford. Widget sets are a critical support tool for user interface development because implementing an entire user interface using only the X primitives requires a substantial amount of programming. <p> Portability is improved because an application is not tied to a specific user interface technology. Note that although most ECAD vendors have agreed to support OSF/Motif, popular versions of advanced non-CAD applications useful to designers (e.g., symbolic computation, information services, etc.) use Open Look <ref> [74] </ref>. Separation of a tool from its user interface makes it easier to develop tools that will function under any GUI facility.
Reference: [75] <author> P.P.S. Chen. </author> <title> The Entity-Relationship Model - Toward a Unified View of Data. </title> <journal> ACM Transactions on Database Systems. </journal> <volume> 1(1), </volume> <month> March, </month> <year> 1976. </year>
Reference-contexts: A data model provides a set of concepts that can be used to structure a database, whereas a data schema 3 uses those concepts to describe a specific structure. For example, Figure 2.2a shows the collection of concepts provided by a simplified entity-relationship data model <ref> [75] </ref>. This data model describes information in terms of entity objects connected by relation links. The entity can have any number of string-valued attributes. The relations can be 1-to-1, 1-to-many, or many-to-many. Figure 2.2b shows a data schema designed to store transistor device parameter information for a circuit designer.
Reference: [76] <author> R. </author> <title> Comerford. </title> <journal> Software (Technology 92). IEEE Spectrum. </journal> <volume> 29(1), </volume> <month> January, </month> <year> 1992. </year>
Reference-contexts: The first such tool that assists in constructing open frameworks is the operating system itself. Several operating systems are in common use, though UNIX derivatives such as DECs ULTRIX and IBMs AIX are the most popular for engineering applications <ref> [76] </ref>. Ongoing work to develop the IEEE POSIX [38] portable operating system interface standard should bring even more consistency, making it easier to port CAD tools to multiple platforms. Another important class of software that supports resource management at the operating system level involves inter-process and network communication.
Reference: [77] <author> R. Elmasri and S.B. Navathe. </author> <title> Fundamentals of Database Systems. </title> <publisher> Benjamin/ Cummings Publishing, </publisher> <year> 1989. </year> <title> 176 .... Resource Management for CAD Frameworks </title>
Reference-contexts: The challenge for 3. Note that the words model and schema are used very loosely in the literature, especially in fields outside of database theory. Since the distinction is critical to our work, we consistently use the terminology described above, taken from <ref> [77] </ref>.
Reference: [78] <author> R. Gupta, W.H. Cheng, R. Gupta, I. Hardonag, and M.A. Breuer. </author> <title> An Object-Oriented VLSI CAD Framework. </title> <booktitle> Computer. </booktitle> <month> May, </month> <year> 1989. </year>
Reference: [79] <author> R. Kannan, K.J. Cleetus, and Y.V. Reddy. </author> <title> The Local Concurrency Manager in Distributed Computing. </title> <booktitle> Proceedings of the Second National Symposium on Concurrent Engineering. </booktitle> <institution> Concurrent Engineering Research Center, West Virginia University, </institution> <month> February, </month> <year> 1990. </year>
Reference-contexts: A procedural interface alone does not satisfy a frameworks inter-tool communication needs. Operating systems provide communication primitives, but higher level facilities are needed to support distributed engineering design environments. Several CAD organizations, including ones at HP [60], Valid [99], Cadlab [100], the DoDs DICE concurrent engineering program <ref> [79] </ref>, and most notably the CFIs Inter-Tool Communication (ITC) technical subcommittee [18], have proposed the use of a new framework software module, called a message server, for coordinating the transfer of control information between CAD tools.
Reference: [80] <author> R. Lott and P. Sutton. </author> <title> Lott-Sutton Device Model Editor. </title> <institution> ECE Dept., Carnegie Mellon University. </institution> <note> 1991 . software from the SRC-CMU CAD Center. </note>
Reference-contexts: The Lott-Sutton CMOS Device Model Editor <ref> [80] </ref> was written for this purpose, and provides a simple example of a CAD tool that was designed with our resource management methodology in mind. Since the Cyclops User Interface Server was not yet available, the InterViews toolkit was chosen to provide the X window graphics.
Reference: [81] <author> R. Spickelmier. </author> <title> The OCT TOOLS Distribution 3.0. </title> <institution> Electronics Research Lab, U.C. Berkeley. </institution> <year> 1989 </year> . 
Reference-contexts: Many experimental frameworks have been based on object-oriented databases [39][78]. Commercial frameworks have been slower to follow because of their large investment in products based on older database technology or file-oriented input/output. One of the best known databases for VLSI design is OCT <ref> [81] </ref>, developed at U. C. Berkeley. OCTs main feature is a data model that permits the storage of multiple abstractions for any portion of a design. The basic unit in OCT is the cell.
Reference: [82] <author> R.A. Becker and J.M. Chambers. </author> <title> S: An Interactive Environment for Data Analysis and Graphics. </title> <publisher> Wadsworth, </publisher> <year> 1984. </year>
Reference-contexts: [43] designed to be efficient for the operations performed by a layout editor, whereas device parameter Chapter 3: A New Approach to Resource Management Multi-Schema Design Environment Resource Management for CAD Frameworks.... 33 measurements can be stored in tables designed for efficient calculation of statistical information. (For instance, using S <ref> [82] </ref>.) Note that the heterogeneous sources of data in Figure 3.1 must eventually be mapped into some common representation if information is to be communicated among the tools. (This is the meaning of the integration cloud in the figure.) So the amount of work required to integrate a tool into a
Reference: [83] <author> R.C. Seacord. </author> <title> User interface management systems and application portability. </title> <booktitle> IEEE Computer. </booktitle> <month> October, </month> <year> 1990. </year>
Reference-contexts: UIMSs are classified by their handling of the dialog layer [10], that is, how the programmer specifies what the user interface should look like. Successful approaches include event-driven, declarative, interactive layout, object-oriented, and data-driven <ref> [83] </ref>. Most of the advantages that a UIMS holds for generic software applies to CAD software as well. Since application code can express its user interface needs in very high level terms, CAD tool developers can concentrate on CAD algorithms rather than manipulating buttons and scrollbars.
Reference: [84] <author> R.K. Cavin III and J.L. </author> <title> Hilbert. Design of Integrated Circuits: Directions and Challenges. </title> <booktitle> Proceedings of the IEEE. </booktitle> <volume> 78(2), </volume> <month> February, </month> <year> 1990. </year>
Reference-contexts: In our opinion IC design will be best served by a heterogeneous collection of data storage mechanisms combined with new integration techniques that manage the differences between them. The authors of <ref> [84] </ref> also support this position: While object-oriented systems and an extensible data model may provide unifying structures for design data, we do not believe that the concept of a single integrated design database supporting all design tasks or tools is likely to come to fruition in the near future.
Reference: [85] <author> R.W. Scheier and J. Gettys. </author> <title> The X Window System. </title> <journal> ACM Transactions on Graphics. </journal> <volume> 5(2), </volume> <month> April, </month> <year> 1986. </year>
Reference-contexts: Many hardware vendors now provide RPC facilities for their machines, making RPC the method of choice for creating networked applications. Graphical user interfaces for open frameworks have benefited tremendously by the computing communitys broad acceptance of the X Window System <ref> [85] </ref> and the Motif User Interface Environment [70]. X, which provides a window based library of graphics primitives, has become a de facto standard. <p> This motivated the formation of several groups that set out to devise hardware independent user interface standards. (These groups will be discussed in Section 2.2.5.) Two of the results from their efforts have had a significant impact on ECAD. The first is the X Window System <ref> [85] </ref>, a server that manages a computer displays graphics output and mouse/keyboard input in terms of rectangular windows in which client applications perform drawing operations (e.g., line/text drawing, and color/pattern filling) and sense user events. The second is the OSF/Motif user interface environment [5].
Reference: [86] <author> S. Evanczuk. </author> <title> CFI Streamlines Technical Committees for Speedier Standards Delivery. </title> <journal> The Initiative. </journal> <volume> 1(1), </volume> <month> March, </month> <year> 1992. </year>
Reference-contexts: The issues are the same -- they have just been re-organized to better distinguish platform-independent system-level issues, generic application service issues, and domain-specific application service issues. See <ref> [86] </ref> for details. Chapter 2: Resource Management: Issues and Techniques Techniques Resource Management for CAD Frameworks.... 27 Two of the three remaining CFI TSCs are concerned with software environment issues. The User Interface TSC must choose a graphical window system and a user interface toolkit.
Reference: [87] <author> S. Navathe, R. Elmasri, and J. Larson. </author> <title> Integrating User Views in Database Design. </title> <booktitle> IEEE Computer. </booktitle> <month> January, </month> <year> 1986. </year>
Reference: [88] <author> S. Sechrest. </author> <title> An Introductory 4.3BSD Interprocess Communication Tutorial. </title> <type> Technical Report, </type> <institution> Computer Science Research Group, Department of Electrical Engineering and Computer Science, University of California, Berkeley, </institution> <year> 1986. </year>
Reference-contexts: Two methods are popular. Both are designed to shield the programmer from the underlying message protocol layer, which is usually TCP/IP [55]. The oldest method, UNIX inter-process communication (IPC), consists of a library of C routines that create, read, and write sockets for datagram or stream communication <ref> [88] </ref>. The main characteristic of UNIX IPC is its similarity to UNIX file I/O, which makes it somewhat easier for UNIX programmers to use.
Reference: [89] <author> S.A. Borkin. </author> <title> Data Model Equivalence. </title> <booktitle> Proceedings of the International Conference on Very Large Databases. IEEE, </booktitle> <year> 1978. </year>
Reference: [90] <author> S.G. Duvall. </author> <title> An Interchange Format for Process and Device Simulation. </title> <journal> IEEE Transactions on Computer-Aided Design. </journal> <volume> 7(7), </volume> <month> July, </month> <year> 1988. </year>
Reference-contexts: Examples of such standards -- both officially sanctioned and de facto -- include EDIF [6], VHDL [35], and Verilog [25] for hardware description; CIF [13] and Magic [40] for layout; and PIF <ref> [90] </ref> for IC fabrication processes. Most early CAD tools adopted the file based input/output behavior of C programs in a UNIX environment [11]: executed programs read one or more input files and write one or more output files. Eventually system integrators adopted conventional database technology to store design data.
Reference: [91] <author> S.J. Lefer, R.S. Fabry, W.N. Joy, P.Lapsley, S. Miller, and C. Torek. </author> <title> An Advanced 4.3BSD Interprocess Communication Tutorial. </title> <type> Technical Report, </type> <institution> Computer Systems Research Group, Department of Electrical Engineering and Computer Science, University of California, Berkeley, </institution> <year> 1986. </year>
Reference-contexts: This promotes the independent encapsulation of CAD tools, and allows tools to be more easily shared between frameworks that are customized for the needs of local designers. Problems associated with differences in software support in heterogeneous computing environments are resolved by applying the client/server model of distributed computing <ref> [91] </ref>. The result is a framework for design environments in addition to being a framework for design tools.
Reference: [92] <author> S.K. Card, T.P. Moran, and A. Newell. </author> <title> The Psychology of Human-Computer Interaction. </title> <publisher> Lawrence Erlbaum Associates, </publisher> <year> 1983. </year> <title> Resource Management for CAD Frameworks.... </title> <type> 177 </type>
Reference-contexts: There is no question that a good GUI improves designer productivity in highly interactive tasks such as layout, routing, and schematic drawing <ref> [92] </ref>. Unfortunately, due to historical circumstances similar to those faced in the data representation area, user interfaces for CAD were initially an impediment to the development of open frameworks because the graphics software of most tools were incompatible.
Reference: [93] <author> S.R. Nassif, A.J. Strojwas, </author> <title> and S.W. Director. FABRICSII: A Statistically-Based IC Fabrication Process Simulator. </title> <journal> IEEE Transactions on Computer-Aided Design. </journal> <volume> 3(1) </volume> <pages> 40-46, </pages> <month> January, </month> <year> 1984. </year>
Reference-contexts: For example, suppose the CAD tool FABRICS <ref> [93] </ref>, an IC fabrication process/device 8 simulator, has two user interfaces. The first is intended for designers to use in the context of a process simulation task with the context name psim, and the second is an abbreviated version for use in a model-building context called mbuild.
Reference: [94] <author> T. Najibi. </author> <type> personal communication. </type> <month> April, </month> <title> 1992 . Cadence Design Systems, </title> <publisher> Inc. </publisher>
Reference-contexts: If the same analysis is performed on a circuit with more internal nodes. Chapter 5: Examples Schema Translation Resource Management for CAD Frameworks.... 87 to other encapsulation techniques. For example, a commercial framework vendor estimates that their integration product for SPICE-like circuit simulators requires a 1-3 person-month encapsulation effort <ref> [94] </ref>. The experience of one of their customers [52] confirmed this figure. Use of this integration product, however, encapsulates a CAD tool for a specific vendor framework. The encapsulation cannot be reused as is in other frameworks as can be done with Cyclops encapsulated tools.
Reference: [95] <author> T.J. Barnes. </author> <title> SKILL: A CAD System Extension Language. </title> <booktitle> Proceedings of the 27th Design Automation Conference. </booktitle> <address> ACM/IEEE, </address> <year> 1990. </year>
Reference-contexts: The most important characteristic of an extension language is that it be extensible. The language must be able to incorporate new functions that are registered by the tools that provide those functions. Extension languages have been used in commercial frameworks for several years; examples include Cadences Skill <ref> [95] </ref> and AutoCADs AutoLisp [66]. Most extension languages are built on top of a standard computing language. For example, all of the above examples are based on dialects of LISP. The CFI is proposing the use of Scheme as a base language [23].
Reference: [96] <author> T.M. Atwood. </author> <title> The case for object-oriented databases. </title> <journal> IEEE Spectrum. </journal> <volume> 28(2), </volume> <month> February, </month> <year> 1991. </year>
Reference: [97] <author> U. Dayal and H.Y. Hwang. </author> <title> View Definition and Generalization for Database Integration in a Multidatabase System. </title> <journal> IEEE Transactions on Software Engineering. </journal> <volume> (6), </volume> <month> November, </month> <year> 1984. </year>
Reference: [98] <author> G.R. </author> <title> Pfaff (editor). User Interface Management Systems. </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: Specifically, greater separation of CAD tools from their user interfaces would make CAD software easier to develop, modify, and port. This has been recognized by the computer science community, and is the main objective of user interface management system (UIMS) research <ref> [98] </ref>. A UIMS is a tool that helps programmers create and manage the user interfaces for their application programs. A UIMS makes user interfaces easier to develop and modify by enforcing a separation of the user interface portion of a piece of software from its core functionality.
Reference: [99] <author> Valid Logic Systems, Inc. </author> <title> The Design Process Framework: An Architecture for Integration of Electronic Design. </title> <month> June, </month> <year> 1990. </year>
Reference-contexts: A procedural interface alone does not satisfy a frameworks inter-tool communication needs. Operating systems provide communication primitives, but higher level facilities are needed to support distributed engineering design environments. Several CAD organizations, including ones at HP [60], Valid <ref> [99] </ref>, Cadlab [100], the DoDs DICE concurrent engineering program [79], and most notably the CFIs Inter-Tool Communication (ITC) technical subcommittee [18], have proposed the use of a new framework software module, called a message server, for coordinating the transfer of control information between CAD tools.
Reference: [100] <author> W. Fox, et al. </author> <title> The Architecture of the Object Management System within the Cadlab Framework. </title> <editor> F.J. Rammig and R. Waxman(editors), </editor> <booktitle> Electronic Design Automation Frameworks, </booktitle> <publisher> Elsevier Science Publishers, </publisher> <year> 1991. </year>
Reference-contexts: A procedural interface alone does not satisfy a frameworks inter-tool communication needs. Operating systems provide communication primitives, but higher level facilities are needed to support distributed engineering design environments. Several CAD organizations, including ones at HP [60], Valid [99], Cadlab <ref> [100] </ref>, the DoDs DICE concurrent engineering program [79], and most notably the CFIs Inter-Tool Communication (ITC) technical subcommittee [18], have proposed the use of a new framework software module, called a message server, for coordinating the transfer of control information between CAD tools. <p> Resource Management for CAD Frameworks based X Window System that the approach became popular. The client/server paradigm has been used in several recent systems <ref> [100] </ref> [73] [60]; and various CFI subcommittees [18], DICE projects [79][47], and commercial framework vendors are reportedly working on exploiting the client/server paradigm in their next generation CAD frameworks.
Reference: [101] <author> W.S. Johnson and F. Taku. </author> <title> Integrating the CAD/CAE Environment. Electronic Component News. </title> <month> May, </month> <year> 1990. </year>
Reference-contexts: For example, an encapsulated circuit performance extractor that consumes time-domain analysis data in file format F1 will only work in conjunction with circuit simulators that produce their analyses in F1 format, unless special purpose translators are written and installed. This is why systems such as Cadweld and DECs Powerframe <ref> [101] </ref> framework are solely meta data management systems. They are not complete framework solutions. The procedural interface described in Section 2.2.2 is a type of encapsulation that does overcome these data communication problems, but at the expense of introducing unrealistic demands on data representation services, as previously discussed.
References-found: 101

