URL: http://www.cse.ucsc.edu/research/ccrg/CMPE255/upenn-active.ps
Refering-URL: http://www.cse.ucsc.edu/research/ccrg/CMPE255/
Root-URL: http://www.cse.ucsc.edu
Title: The SwitchWare Active Network Architecture  
Author: Carl A. Gunter, Scott M. Nettles, and Jonathan M. Smith 
Note: http:www.cis.upenn.edu/~fgunter,nettles,jmsg This work was supported by DARPA under Contract #N66001-96-C-852, with additional support from the Intel Corporation.  
Date: November 19, 1997  
Affiliation: University of Pennsylvania  
Abstract: Active networks must balance the flexibility of a programmable network infrastructure against the safety and security requirements inherent in sharing that infrastructure. Furthermore, this balance must be achieved while maintaining the usability of the network. The SwitchWare active network architecture is a novel approach to achieving this balance using three layers: active packets, which contain mobile programs that replace traditional packets; switchlets, which provide services on the network elements, and which can be dynamically loaded, and; a secure active router infrastructure, which forms a high integrity base upon which the security of the other layers depends. In addition to integrity-checking and cryptography-based authentication, security in our architecture depends heavily on verification techniques from programming languages, such as strong type checking. Active packets in the SwitchWare architecture are programs in a packet language called PLAN (a Programming Language for Active Networks) which serves as a glue language that is secure but lightweight because it greatly restricts potentially harmful actions packet evaluation might inflict. PLAN provides for resource-limited computation without the need for authentication; it handles the composition of network services as well as basic resource discovery, diagnostics, and error recovery. The switchlet layer is less restricted than PLAN, and provides facilities that can employ heavyweight security, such as authentication or program verification. Since switchlets can be called by PLAN on an as-needed basis, it provides an escape from PLAN's limitations, while still being secure. The flexibility/security trade-off between these two layers is a key part of our architecture. Our first extensive experiment with the switchlet layer was a prototype active network element used for active bridging, which conclusively demonstrated the value of on-the-fly programmability in a network element such as a switch, bridge or router. Enforcement of the security guarantees of our upper layers relies on a set of trust and integrity assumptions about the programming environment, which are often `swept under the rug'. In SwitchWare, these issues are addressed by a secure active router infrastructure called the Secure Active Network Environment (SANE). It ensures the integrity of the programming environment using chains of cryptography-based integrity checks starting at the network element's bootstrap. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. S. Alexander, W. A. Arbaugh, A. D. Keromytis, and J. M. Smith. </author> <title> A secure active network environment architecture. 1997. submitted to IEEE Network Magazine, for the special issue on active and programmable networks. </title>
Reference-contexts: Thus the security of the SwitchWare architecture as a whole, is grounded in this layer. 6.1 SANE To embody our secure active router infrastructure, we have designed the Secure Active Network Environment (SANE) <ref> [1] </ref>. SANE provides an architecture providing: a demonstrably minimal set of trust assumptions, the ability to securely bootstrap [5] the remainder of the system when the trust assumptions are met, and authentication and naming service for code that is loaded. <p> What has changed since then is that proposals have become crystallized in systems, and more efforts have begun. The papers on PLAN [11], the Active Bridge [2], and SANE <ref> [1] </ref> all contain extensive comparisons with related efforts. We will be glad to include whatever discussion of related work you suggest, but feel we can do this more effectively based on the issue contents.] A great deal of exciting work lies in front of us.
Reference: [2] <author> D. Scott Alexander, Marianne Shaw, Scott M. Nettles, and Jonathan M. Smith. </author> <title> Active bridging. </title> <booktitle> In Proceedings, 1997 SIGCOMM Conference. ACM, </booktitle> <year> 1997. </year>
Reference-contexts: Their greater flexibility provides an important trade-off with active packets since complex protocols and systems are implemented in SwitchWare with a mixture of PLAN and switchlets. As discussed in detail in Section 5, our most ambitious exploration of the switchlet layer to date is the Active Bridge <ref> [2] </ref>. In this experiment, we showed that a simple switchlet-based buffered repeater could be extended (over the network) with a learning bridge switchlet and then several different spanning tree switchlets. <p> However, switchlets are more general than PLAN service implementations, and, in fact, they are not required to provide PLAN-accessible interfaces (although they must do so if active packets are to invoke them directly). 5.1 The Active Bridge: A Case Study The Active Bridge <ref> [2] </ref> is a prototype constructed to study active networking at the switchlet layer. It is used to bridge 100 Mbps Ethernet LANs, with the additional `active' feature of automated recovery from failure of an implementation of a spanning-tree algorithm. <p> What has changed since then is that proposals have become crystallized in systems, and more efforts have begun. The papers on PLAN [11], the Active Bridge <ref> [2] </ref>, and SANE [1] all contain extensive comparisons with related efforts. We will be glad to include whatever discussion of related work you suggest, but feel we can do this more effectively based on the issue contents.] A great deal of exciting work lies in front of us.
Reference: [3] <author> ANEP: </author> <title> Active network encapsulation protocol. </title> <address> www.cis.upenn.edu/ switchware/ANEP. </address>
Reference: [4] <author> W. A. Arbaugh, A. D. Keromytis, D. J. Farber, and J. M. Smith. </author> <title> Automated recovery in a secure bootstrap process. </title> <booktitle> In Internet Society 1998 Symposium on Network and Distributed System Security, </booktitle> <month> March </month> <year> 1998. </year> <note> to appear. </note>
Reference-contexts: An illustration of the SANE in the context of the overall SwitchWare network element architecture is shown in Figure 4. The system assumes that the first 32 KB of the system BIOS is unmodified, that there is a protected key source, and, if automated recovery <ref> [4] </ref> is desired, a trusted source exists from which damaged components can be recovered. Under these assumptions, the secure bootstrap process proceeds, for each system level (e.g. <p> We believe that any active network elements based on commercial hardware will take this form; in fact it would be impractical to not allow field upgrades of a network element's components. SANE provides a remote recovery protocol <ref> [4] </ref> to cope with integrity check failures. Cryptography-protected proto-cols are used to securely communicate with a trusted source, from which an integrity-checked version of the failed component is obtained, such as a modified operating system or operating system boot block.
Reference: [5] <author> William A. Arbaugh, David J. Farber, and Jonathan M. Smith. </author> <title> A secure and reliable bootstrap architecture. </title> <booktitle> In IEEE Security and Privacy Conference, </booktitle> <pages> pages 65-71, </pages> <month> May </month> <year> 1997. </year>
Reference-contexts: SANE provides an architecture providing: a demonstrably minimal set of trust assumptions, the ability to securely bootstrap <ref> [5] </ref> the remainder of the system when the trust assumptions are met, and authentication and naming service for code that is loaded.
Reference: [6] <author> Matt Blaze, Joan Feigenbaum, and Jack Lacy. </author> <title> Decentralized trust management. </title> <booktitle> In Proceedings of the 17th Symposium on Security and Privacy, </booktitle> <pages> pages 164-173. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1996. </year>
Reference-contexts: Another line of inquiry involves languages for access control, such as the PolicyMaker system <ref> [6] </ref>, which provides a special-purpose language for expressing policies in terms of signatures of principals and delegation of trust. 3.3 When to Check Types Because types are a well understood and extremely effective form of mechanical verification, they play an important role in SwitchWare's safety and security model. <p> The same scheme is largely replicated to authenticate packets from remote systems when the system is in an operational state. A public-key infrastructure is an important part of SANE. The SANE architecture uses SPKI [7] and PolicyMaker <ref> [6] </ref> as a public-key infrastructure and as a specification mechanism for trust relationships in a distributed system, respectively. This public-key infrastructure can also be used by switchlets as a means of establishing shared secrets, enforcing privacy, etc.
Reference: [7] <author> Carl M. Ellison, Bill Frantz, Ron Rivest, and Brian M. Thomas. </author> <title> Simple Public Key Certificate. </title> <booktitle> Work in Progress, </booktitle> <month> April </month> <year> 1997. </year>
Reference-contexts: The same scheme is largely replicated to authenticate packets from remote systems when the system is in an operational state. A public-key infrastructure is an important part of SANE. The SANE architecture uses SPKI <ref> [7] </ref> and PolicyMaker [6] as a public-key infrastructure and as a specification mechanism for trust relationships in a distributed system, respectively. This public-key infrastructure can also be used by switchlets as a means of establishing shared secrets, enforcing privacy, etc.
Reference: [8] <author> D. C. Feldmeier, A. J. McAuley, J. M. Smith, D. S. Bakin, W. S. Marcus, and T. M. </author> <title> Raleigh. "protocol boosters". </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <note> Special Issue on Protocol Architectures for the 21st Century, 1998. to appear. </note>
Reference-contexts: Among the more interesting applications are flexible architectures for multicast, an example of which we described in the introduction, and network infrastructure support for booster protocols <ref> [8] </ref>, a design methodology that adds protocol functions as-needed, and is thus ideal for deployment on an active network infrastructure. A second major thrust is interoperability with other active networks research efforts.
Reference: [9] <author> James Gosling, Bill Joy, and Guy Steele. </author> <title> The Java Language Specification. </title> <publisher> Addison Wesley, </publisher> <year> 1996. </year>
Reference-contexts: The second of these is especially well illustrated in the design philosophy of Java <ref> [9] </ref>, which runs on a virtual machine [12] employing a dynamic `verifier' to enforce host security policies for the execution of the compiled bytecode of web applets. This technology is supported by advances in run-time systems (especially garbage collection) and the specification of programming languages (providing precise machine-independent semantic descriptions).
Reference: [10] <author> Carl A. Gunter. </author> <title> Semantics of Programming Languages: Structures and Techniques. </title> <booktitle> Foundations of Computing. </booktitle> <publisher> The MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: Now consider how PLAN meets its design goals. PLAN is closely modeled on the simply typed lambda calculus with extensions to support remote evaluation. This gives it very well understood semantic and type-theoretic foundations <ref> [10] </ref>, making it amenable to formal methods. Although we have not given these details, it only supports very simple data and control structures and thus it is easy to compile or interpret.
Reference: [11] <author> Michael Hicks, Pankaj Kakkar, Jonathan T. Moore, Carl A. Gunter, and Scott Nettles. </author> <title> PLAN: A Programming Language for Active Networks. </title> <note> Submitted to PLDI'98. Available at www.cis.upenn.edu/ ~switchware/ papers/ plan.ps. </note>
Reference-contexts: The discussion here offers only a taste of PLAN, for more details see the PLAN overview paper <ref> [11] </ref>, and our web site 2 , which includes a downloadable implementation of PLAN in Java, a language manual and user's guide, instructions for joining our PLAN-based active network (which uses IP tunneling to provide wide-area capabilities), and a page where users can enter PLAN programs and execute them on our <p> What has changed since then is that proposals have become crystallized in systems, and more efforts have begun. The papers on PLAN <ref> [11] </ref>, the Active Bridge [2], and SANE [1] all contain extensive comparisons with related efforts.
Reference: [12] <author> Tim Lindholm and Frank Yellin. </author> <title> The Java Virtual Machine Specification. </title> <publisher> Addison Wesley, </publisher> <year> 1996. </year>
Reference-contexts: The second of these is especially well illustrated in the design philosophy of Java [9], which runs on a virtual machine <ref> [12] </ref> employing a dynamic `verifier' to enforce host security policies for the execution of the compiled bytecode of web applets. This technology is supported by advances in run-time systems (especially garbage collection) and the specification of programming languages (providing precise machine-independent semantic descriptions).
Reference: [13] <author> George C. Necula. </author> <title> Proof-Carrying Code. </title> <booktitle> In Proceedings of the 24th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL '97). </booktitle> <publisher> ACM Press, </publisher> <year> 1997. </year>
Reference-contexts: Providing `liveness' and quality of service guarantees are further challenges that will require innovation. An example of the kind of ideas that will be needed can be found in the Proof Carrying Code (PCC) work of Necula and Lee <ref> [14, 13] </ref>. PCC is based on the observation that is often easier to check an answer than to produce it. For a mobile program, it is the creator of the program who knows the key reasons it is correct (or at least safe), not the host that receives the program.
Reference: [14] <author> George C. Necula and Peter Lee. </author> <title> Safe Kernel Extensions Without Run-Time Checking. </title> <booktitle> In Second Symposium on Operating System Design and Implementation (OSDI '96), </booktitle> <year> 1996. </year>
Reference-contexts: Providing `liveness' and quality of service guarantees are further challenges that will require innovation. An example of the kind of ideas that will be needed can be found in the Proof Carrying Code (PCC) work of Necula and Lee <ref> [14, 13] </ref>. PCC is based on the observation that is often easier to check an answer than to produce it. For a mobile program, it is the creator of the program who knows the key reasons it is correct (or at least safe), not the host that receives the program.
Reference: [15] <author> David L. Tennenhouse, Jonathan M. Smith, W. David Sincoskie, David J. Wetherall, and Gary J. Minden. </author> <title> A survey of active network research. </title> <journal> IEEE Communications Magazine, </journal> <volume> 35(1) </volume> <pages> 80-86, </pages> <month> January </month> <year> 1997. </year>
Reference-contexts: Active networks are an approach to providing a programmable network infrastructure based on such a programmable interoperability layer. Proposals exist <ref> [15] </ref> for accessing programmability on a per-user or per-packet basis. These ideas offer considerable power to programmers wishing to create advanced services or test new approaches to providing existing services. Consider, for example, the problem of negative acknowledgments (NACK's) in a multicast protocol. <p> This reflects our desire to improve usability by helping the programmer find errors, but improving safety and security by not trusting that the programmer was successful. 4 Active Packets Perhaps the most radical vision of active networks is the one in which active packets (called `capsules' in <ref> [15] </ref>) entirely replace traditional packets. Although we do not claim that Static and Dynamic Type Checking Designs for strongly typed programming languages always confront a need to balance between static type-checking, which is done at compile time, and dynamic type-checking, which is done at run time. <p> A comprehensive survey of active network research as of about one year ago <ref> [15] </ref> delineates some of the key differences in approach and research directions of the early efforts. What has changed since then is that proposals have become crystallized in systems, and more efforts have begun.
Reference: [16] <author> David J. Wetherall, John Guttag, and David L. Tennen-house. </author> <title> ANTS: A toolkit for building and dynamically deploying network protocols. </title> <booktitle> In IEEE OPENARCH, </booktitle> <month> April </month> <year> 1998. </year>
Reference-contexts: The previous discussion illustrates an important difference between the SwitchWare architecture and other proposals such as MIT's capsules. The capsules model is focused on per-packet execution; the follow-on work in the Active Network Transport System (ANTS) <ref> [16] </ref> loads functions as necessary to allow packets to execute. The BBN Smart Packets model 4 provides a very dense CISC-like language that is biased towards management tasks, which assumes that nodes are essentially stateless. The SwitchWare architecture, by contrast, layers packet execution and service loading.
References-found: 16

