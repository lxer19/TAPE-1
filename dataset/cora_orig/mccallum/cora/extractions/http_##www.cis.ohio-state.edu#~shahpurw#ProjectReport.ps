URL: http://www.cis.ohio-state.edu/~shahpurw/ProjectReport.ps
Refering-URL: http://www.cis.ohio-state.edu/~shahpurw/
Root-URL: http://www.cis.ohio-state.edu
Title: Measurement of SCSI disk Bandwidth under LINUX  
Author: Vijay Moorthy and Shabbir Shahpurwala 
Date: December 9, 1997  
Abstract-found: 0
Intro-found: 1
Reference: [1] <editor> Larry McVoy and Carl Staelin, lmbench: </editor> <booktitle> Portable Tools for Performance Analysis,Proceedings USENIX Winter Conference, </booktitle> <month> January </month> <year> 1996. </year>
Reference-contexts: 1 Introduction Benchmark suites like lmbench <ref> [1] </ref> are available today for measuring performance of a wide variety of UNIX machines. Amongst other things, these benchmarks measure disk bandwidth, that is, the maximum amount of data that a disk can transfer in unit time. Most flavours of UNIX offer two types of interfaces to a disk device. <p> || sg_hd-&gt;result ) - /* some error happened */ fprintf ( stderr, "read (generic) result = 0x%x cmd = 0x%x"n", sg_hd-&gt;result, o_buff [SCSI_OFF] ); fprintf ( stderr, "read (generic) sense " "%x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x"n", sg_hd-&gt;sense_buffer [0], sg_hd-&gt;sense_buffer <ref> [1] </ref>, sg_hd-&gt;sense_buffer [2], sg_hd-&gt;sense_buffer [3], sg_hd-&gt;sense_buffer [4], sg_hd-&gt;sense_buffer [5], sg_hd-&gt;sense_buffer [6], sg_hd-&gt;sense_buffer [7], sg_hd-&gt;sense_buffer [8], sg_hd-&gt;sense_buffer [9], sg_hd-&gt;sense_buffer [10], sg_hd-&gt;sense_buffer [11], sg_hd-&gt;sense_buffer [12], sg_hd-&gt;sense_buffer [13], sg_hd-&gt;sense_buffer [14], sg_hd-&gt;sense_buffer [15]); if (status &lt; 0) perror (""); - /* Look if we got what we expected to get */ if (status == SCSI_OFF
Reference: [2] <author> Michael K. Johnson, </author> <title> Writing Linux Device Drivers, </title> <note> available at http://www.cs.umbc.edu/ odysseas/linux/devices.html </note>
Reference-contexts: ) - /* some error happened */ fprintf ( stderr, "read (generic) result = 0x%x cmd = 0x%x"n", sg_hd-&gt;result, o_buff [SCSI_OFF] ); fprintf ( stderr, "read (generic) sense " "%x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x"n", sg_hd-&gt;sense_buffer [0], sg_hd-&gt;sense_buffer [1], sg_hd-&gt;sense_buffer <ref> [2] </ref>, sg_hd-&gt;sense_buffer [3], sg_hd-&gt;sense_buffer [4], sg_hd-&gt;sense_buffer [5], sg_hd-&gt;sense_buffer [6], sg_hd-&gt;sense_buffer [7], sg_hd-&gt;sense_buffer [8], sg_hd-&gt;sense_buffer [9], sg_hd-&gt;sense_buffer [10], sg_hd-&gt;sense_buffer [11], sg_hd-&gt;sense_buffer [12], sg_hd-&gt;sense_buffer [13], sg_hd-&gt;sense_buffer [14], sg_hd-&gt;sense_buffer [15]); if (status &lt; 0) perror (""); - /* Look if we got what we expected to get */ if (status == SCSI_OFF + out_size)
Reference: [3] <author> Rickard E. </author> <title> Faith , Writing a SCSI Device Driver, </title> <note> available at http://www.cs.umbc.edu/ odysseas/linux/scsi.html </note>
Reference-contexts: /* some error happened */ fprintf ( stderr, "read (generic) result = 0x%x cmd = 0x%x"n", sg_hd-&gt;result, o_buff [SCSI_OFF] ); fprintf ( stderr, "read (generic) sense " "%x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x"n", sg_hd-&gt;sense_buffer [0], sg_hd-&gt;sense_buffer [1], sg_hd-&gt;sense_buffer [2], sg_hd-&gt;sense_buffer <ref> [3] </ref>, sg_hd-&gt;sense_buffer [4], sg_hd-&gt;sense_buffer [5], sg_hd-&gt;sense_buffer [6], sg_hd-&gt;sense_buffer [7], sg_hd-&gt;sense_buffer [8], sg_hd-&gt;sense_buffer [9], sg_hd-&gt;sense_buffer [10], sg_hd-&gt;sense_buffer [11], sg_hd-&gt;sense_buffer [12], sg_hd-&gt;sense_buffer [13], sg_hd-&gt;sense_buffer [14], sg_hd-&gt;sense_buffer [15]); if (status &lt; 0) perror (""); - /* Look if we got what we expected to get */ if (status == SCSI_OFF + out_size) status =
Reference: [4] <author> Heiko Eifeldt, </author> <title> The Linux SCSI Programming How-To, </title> <note> available at http://sunsite.unc.edu/pub/Linux/docs/HOWTO/SCSI-Programming-HOWTO </note>
Reference-contexts: The program in Fig. 2 uses the SCSI generic driver to send a read command to a SCSI disk and times the access. It borrows code from example programs given in <ref> [4] </ref> . The SCSI-2 Specification [6] describes different read commands that may be sent to a direct access SCSI device. The READ 10 command allows explicit control to suppress disk caching, which might otherwise affect the accuracy of the timing. <p> error happened */ fprintf ( stderr, "read (generic) result = 0x%x cmd = 0x%x"n", sg_hd-&gt;result, o_buff [SCSI_OFF] ); fprintf ( stderr, "read (generic) sense " "%x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x"n", sg_hd-&gt;sense_buffer [0], sg_hd-&gt;sense_buffer [1], sg_hd-&gt;sense_buffer [2], sg_hd-&gt;sense_buffer [3], sg_hd-&gt;sense_buffer <ref> [4] </ref>, sg_hd-&gt;sense_buffer [5], sg_hd-&gt;sense_buffer [6], sg_hd-&gt;sense_buffer [7], sg_hd-&gt;sense_buffer [8], sg_hd-&gt;sense_buffer [9], sg_hd-&gt;sense_buffer [10], sg_hd-&gt;sense_buffer [11], sg_hd-&gt;sense_buffer [12], sg_hd-&gt;sense_buffer [13], sg_hd-&gt;sense_buffer [14], sg_hd-&gt;sense_buffer [15]); if (status &lt; 0) perror (""); - /* Look if we got what we expected to get */ if (status == SCSI_OFF + out_size) status = 0; /*
Reference: [5] <author> Drew Eckhardt, </author> <title> The Linux SCSI How-To, </title> <note> available at http://sunsite.unc.edu/pub/Linux/docs/HOWTO/SCSI-HOWTO </note>
Reference-contexts: */ fprintf ( stderr, "read (generic) result = 0x%x cmd = 0x%x"n", sg_hd-&gt;result, o_buff [SCSI_OFF] ); fprintf ( stderr, "read (generic) sense " "%x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x"n", sg_hd-&gt;sense_buffer [0], sg_hd-&gt;sense_buffer [1], sg_hd-&gt;sense_buffer [2], sg_hd-&gt;sense_buffer [3], sg_hd-&gt;sense_buffer [4], sg_hd-&gt;sense_buffer <ref> [5] </ref>, sg_hd-&gt;sense_buffer [6], sg_hd-&gt;sense_buffer [7], sg_hd-&gt;sense_buffer [8], sg_hd-&gt;sense_buffer [9], sg_hd-&gt;sense_buffer [10], sg_hd-&gt;sense_buffer [11], sg_hd-&gt;sense_buffer [12], sg_hd-&gt;sense_buffer [13], sg_hd-&gt;sense_buffer [14], sg_hd-&gt;sense_buffer [15]); if (status &lt; 0) perror (""); - /* Look if we got what we expected to get */ if (status == SCSI_OFF + out_size) status = 0; /* got them
Reference: [6] <author> ANSI, </author> <title> SCSI-2 Specification, </title> <note> available at http://scitexdv.com/SCSI2/ </note>
Reference-contexts: The low-level drivers are specific to each host adapter, or rather, to a family of host adapters such as the aic7xxx driver for Adaptec's host adapters. This driver provides basic functionality to initialize the adapter, queue scsi commands, and interact with the hardware directly using the SCSI protocol <ref> [6] </ref>. The SCSI interface maintains a list of loaded low level drivers and a list of detected host adapters. The list of drivers provides the corrrect routine to call when interfacing with a card of its type. The list of adapters contains port addresses and IRQ numbers of each card. <p> The program in Fig. 2 uses the SCSI generic driver to send a read command to a SCSI disk and times the access. It borrows code from example programs given in [4] . The SCSI-2 Specification <ref> [6] </ref> describes different read commands that may be sent to a direct access SCSI device. The READ 10 command allows explicit control to suppress disk caching, which might otherwise affect the accuracy of the timing. <p> ( stderr, "read (generic) result = 0x%x cmd = 0x%x"n", sg_hd-&gt;result, o_buff [SCSI_OFF] ); fprintf ( stderr, "read (generic) sense " "%x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x"n", sg_hd-&gt;sense_buffer [0], sg_hd-&gt;sense_buffer [1], sg_hd-&gt;sense_buffer [2], sg_hd-&gt;sense_buffer [3], sg_hd-&gt;sense_buffer [4], sg_hd-&gt;sense_buffer [5], sg_hd-&gt;sense_buffer <ref> [6] </ref>, sg_hd-&gt;sense_buffer [7], sg_hd-&gt;sense_buffer [8], sg_hd-&gt;sense_buffer [9], sg_hd-&gt;sense_buffer [10], sg_hd-&gt;sense_buffer [11], sg_hd-&gt;sense_buffer [12], sg_hd-&gt;sense_buffer [13], sg_hd-&gt;sense_buffer [14], sg_hd-&gt;sense_buffer [15]); if (status &lt; 0) perror (""); - /* Look if we got what we expected to get */ if (status == SCSI_OFF + out_size) status = 0; /* got them all */
Reference: [7] <author> Peter M. </author> <title> Ridge, The Book of SCSI, </title> <publisher> No Starch Press, </publisher> <year> 1995 </year> <month> 9 </month>
Reference-contexts: "read (generic) result = 0x%x cmd = 0x%x"n", sg_hd-&gt;result, o_buff [SCSI_OFF] ); fprintf ( stderr, "read (generic) sense " "%x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x"n", sg_hd-&gt;sense_buffer [0], sg_hd-&gt;sense_buffer [1], sg_hd-&gt;sense_buffer [2], sg_hd-&gt;sense_buffer [3], sg_hd-&gt;sense_buffer [4], sg_hd-&gt;sense_buffer [5], sg_hd-&gt;sense_buffer [6], sg_hd-&gt;sense_buffer <ref> [7] </ref>, sg_hd-&gt;sense_buffer [8], sg_hd-&gt;sense_buffer [9], sg_hd-&gt;sense_buffer [10], sg_hd-&gt;sense_buffer [11], sg_hd-&gt;sense_buffer [12], sg_hd-&gt;sense_buffer [13], sg_hd-&gt;sense_buffer [14], sg_hd-&gt;sense_buffer [15]); if (status &lt; 0) perror (""); - /* Look if we got what we expected to get */ if (status == SCSI_OFF + out_size) status = 0; /* got them all */ printf ("status
References-found: 7

