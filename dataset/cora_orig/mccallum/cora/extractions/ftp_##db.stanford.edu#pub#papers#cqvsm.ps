URL: ftp://db.stanford.edu/pub/papers/cqvsm.ps
Refering-URL: http://www.cs.toronto.edu/~mendel/dwbib.html
Root-URL: 
Email: huyn@cs.stanford.edu  
Title: Efficient View Self-Maintenance  
Author: Nam Huyn 
Affiliation: Stanford University  
Abstract: We consider the problem of maintaining a materialized view without accessing the base relations. More specifically, we would like to find a maximal test that guarantees that a view is self-maintainable (abbrev SM) under a given update to the base relations, i.e., can be maintained using only the view definition, its contents and the update. We observe that SM evaluation can be separated into a view-definition-time portion where a maximal test is generated solely based on the view definition, and an update-time portion where the test can be efficiently applied to the view and the update. We call such a maximal test a Complete Test for View Self-Maintainability (abbrev CTSM). This paper reports on some interesting new results for conjunctive-query views under insertion updates: 1) the CTSM's are extremely simple queries that look for certain tuples in the view to be maintained; 2) these CTSM's can be generated at view definition time using a very simple algorithm based on the concept of Minimal Z-Partition; 3) view self-maintenance can also be expressed as simple update queries over the view itself. 
Abstract-found: 1
Intro-found: 1
Reference: [Hu96a] <author> Huyn N.: </author> <title> Efficient View Self-Maintenance, </title> <type> Unpublished Technical Report, </type> <note> available as URL http://www-db. stanford.edu/pub/papers/cqvsm-tr.ps, </note> <year> 1996. </year>
Reference-contexts: This special case is important only because the technique used is applicable to the general case. We then present results for the general case. Due to space limitation, most proofs are omitted here. They can be found in <ref> [Hu96a] </ref>. 4.1 Important special case Consider the following view definition: Q : v ( U ; Z) :- r ( U ); S ( U ; Z): (3) Let the minimal Z-partition of S ( U ; Z) consist of groups g 1 ; . . . ; g n .
Reference: [Hu96b] <author> Huyn N.: </author> <title> Testing CQC : constraints under limited data access. </title> <note> Unpublished Tech nical Report, available as URL http:// www-db.stanford.edu/pub/papers/ cqcnclt-tr.ps, </note> <year> 1996. </year>
Reference: [TB88] <author> Tompa F. W. and Blakeley J. A.: </author> <title> Maintaining Materialized Views Without Accessing Base Data. </title> <booktitle> In Information Systems, </booktitle> <volume> 13(4), </volume> <pages> pp. 393-406, </pages> <year> 1988. </year>
Reference-contexts: Even though the view instance does not satisfy test T 2 , it remains self-maintainable. We call such maximal tests as T 1 in Example 1.1 Complete Tests for Self-Maintainability (abbreviated CTSM). The problem of finding CTSM's has been studied in <ref> [TB88] </ref> and more recently in [GB95] for views that are conjunctive queries with arithmetic comparisons (aka select-project-join queries) but with single occurrence of predicates (i.e., no self-joins). Results from [TB88] and [GB95] gave necessary and sufficient conditions for Conditionally autonomously Computable Updates (abbreviated CAU). <p> The problem of finding CTSM's has been studied in <ref> [TB88] </ref> and more recently in [GB95] for views that are conjunctive queries with arithmetic comparisons (aka select-project-join queries) but with single occurrence of predicates (i.e., no self-joins). Results from [TB88] and [GB95] gave necessary and sufficient conditions for Conditionally autonomously Computable Updates (abbreviated CAU). We would like to point out that the two notions SM and CAU are equivalent, even though [TB88] and [GB95] only explicitly mentioned that SM follows from CAU. The approach used in [TB88] and [GB95] has <p> Results from <ref> [TB88] </ref> and [GB95] gave necessary and sufficient conditions for Conditionally autonomously Computable Updates (abbreviated CAU). We would like to point out that the two notions SM and CAU are equivalent, even though [TB88] and [GB95] only explicitly mentioned that SM follows from CAU. The approach used in [TB88] and [GB95] has two main disadvantages: efficiency of determining SM evaluation is not well understood, and construction of the test and its execution are intermingled, forcing most of SM evaluation to be done at update <p> Results from <ref> [TB88] </ref> and [GB95] gave necessary and sufficient conditions for Conditionally autonomously Computable Updates (abbreviated CAU). We would like to point out that the two notions SM and CAU are equivalent, even though [TB88] and [GB95] only explicitly mentioned that SM follows from CAU. The approach used in [TB88] and [GB95] has two main disadvantages: efficiency of determining SM evaluation is not well understood, and construction of the test and its execution are intermingled, forcing most of SM evaluation to be done at update time. To date, efficient implementation of SM evaluation remains difficult. <p> The following more formally defines the SM notion. Definition 2.1 (Self-Maintainability): View V is self-maintainable under if Q (D ) is the same for every database instances D such that Q (D) = V . Proposition 2.1 SM and CAU are equivalent. Proof: <ref> [TB88] </ref> showed that CAU implies SM. Now, we show that SM implies CAU as well. SM says that Q (D ) is independent of D, provided that D is consistent with V . <p> To decide whether or not V is self-maintainable under a given insertion, the approach taken in <ref> [TB88, GB95] </ref> constructs a theory (that is, a set of first order sentences) about the base relations, and a set of tuples that could potentially be added to V .
References-found: 3

