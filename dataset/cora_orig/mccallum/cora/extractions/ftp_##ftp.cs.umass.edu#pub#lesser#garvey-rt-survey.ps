URL: ftp://ftp.cs.umass.edu/pub/lesser/garvey-rt-survey.ps
Refering-URL: http://dis.cs.umass.edu/~garvey/publications.html
Root-URL: 
Title: A Survey of Research in Deliberative Real-Time Artificial Intelligence 1  
Author: Alan Garvey and Victor Lesser 
Affiliation: Department of Computer Science University of Massachusetts  
Abstract: UMass Computer Science Technical Report 93-84 November 19, 1993 Abstract This paper surveys recent research in deliberative real-time artificial intelligence (AI). Major areas of study have been anytime algorithms, approximate processing, and large system architectures. We describe several systems in each of these areas, focusing both on progress within the field, and the costs, benefits and interactions among different problem and algorithm complexity limitations used in the surveyed work. 
Abstract-found: 1
Intro-found: 1
Reference: [ Agre and Chapman, 1987 ] <author> Philip E. Agre and David Chapman. Pengi: </author> <title> An implementation of a theory of activity. </title> <booktitle> In Proceedings of the Sixth National Conference on Artificial Intelligence, </booktitle> <pages> pages 268-272, </pages> <address> Seattle, WA, </address> <month> July </month> <year> 1987. </year>
Reference-contexts: A realization of this problem, along with a pressing desire to embed AI systems in larger applications (such as robots) led to the development of reactive AI systems <ref> [ Agre and Chapman, 1987, Brooks, 1986, Firby, 1987 ] </ref> . The goal of the reactive AI systems work (at least initially) was to investigate how close you could come to an intelligent agent with just hardwired reactions to the actual external environment. <p> Note that even in situations where accurate and complete information is available, uncertainty due to problem complexity may prevent static solutions (e.g., chess). Another real-time AI solution to the requirement for agents that respond dynamically to a changing environment has been to build reactive AI systems <ref> [ Agre and Chapman, 1987, Firby, 1987 ] </ref> that do not deliberate at all, but react directly to inputs. While this survey focuses on deliberative real-time AI, at some level of required reaction time, the only reasonable solution method is reactive.
Reference: [ Ash and Hayes-Roth, 1993 ] <author> David Ash and Barbara Hayes-Roth. </author> <title> A comparison of action-based hierarchies and decision trees for real-time performance. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 568-573, </pages> <address> Washington, D.C., </address> <month> July </month> <year> 1993. </year>
Reference-contexts: 1988, Horvitz, 1989, Horvitz et al., 1989, Horvitz and Rutledge, 1991 ] , Korf 's approach to real-time A* search [ Korf, 1990 ] , Collinot and Hayes-Roth's satisficing blackboard control loop [ Collinot and Hayes-Roth, 1990, Hayes-Roth and Collinot, 1991 ] , and Ash and Hayes-Roth's anytime diagnosis system <ref> [ Ash and Hayes-Roth, 1993 ] </ref> . 2.1 Dean and Boddy's work The focus of Dean and Boddy's work in this area has been on what they call deliberation scheduling applied to time-dependent planning problems. <p> To perform this task Guardian has an anytime diagnosis component <ref> [ Ash et al., 1993, Ash and Hayes-Roth, 1993 ] </ref> . This work defines action-based hierarchies, which are similar in structure to decision trees. Each node in a hierarchy is a collection of faults, with an associated action to take. <p> of this work include a separate input manager that filters and processes inputs [ Washington and Hayes-Roth, 1989 ] , a satisficing control cycle to bound the amount of time spent doing metalevel reasoning [ Collinot and Hayes-Roth, 1990, Hayes-Roth and Collinot, 1991 ] , and an anytime diagnosis component <ref> [ Ash and Hayes-Roth, 1993 ] </ref> . Figure 8 shows an overview of the agent architecture used by Guardian. 17 gular boxes represent concurrently executing processes. Information flow is indicated by the directional arrows. 18 In the Guardian medical monitoring application, large amounts of input data arrive at the system.
Reference: [ Ash et al., 1993 ] <author> D. Ash, G. Gold, A. Seiver, and B. Hayes-Roth. </author> <title> Guaranteeing real-time response with limited resources. </title> <journal> Artificial Intelligence in Medicine, </journal> <volume> 5 </volume> <pages> 49-66, </pages> <year> 1993. </year>
Reference-contexts: To perform this task Guardian has an anytime diagnosis component <ref> [ Ash et al., 1993, Ash and Hayes-Roth, 1993 ] </ref> . This work defines action-based hierarchies, which are similar in structure to decision trees. Each node in a hierarchy is a collection of faults, with an associated action to take.
Reference: [ Boddy and Dean, 1989 ] <author> Mark Boddy and Thomas Dean. </author> <title> Solving time-dependent planning problems. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <address> Detroit, MI, </address> <month> August </month> <year> 1989. </year> <month> 23 </month>
Reference: [ Boddy and Dean, 1993 ] <author> Mark Boddy and Thomas Dean. </author> <title> Deliberation scheduling for problem solving in time-constrained environments. </title> <journal> Artificial Intelligence, </journal> <note> 1993. To appear. </note>
Reference-contexts: An alternative is to take a more integrated approach where there is a single architecture and a range of responses are possible given the time criticality of the required response. Approaches in this area include flexible computation [ Horvitz and Rutledge, 1991 ] , deliberation scheduling <ref> [ Boddy and Dean, 1993 ] </ref> , compilation of anytime algorithms [ Zilberstein, 1993 ] and design-to-time real-time scheduling [ Garvey and Lesser, 1993 ] . Both of these approaches are known as deliberative, because they deliberate to determine how to act (rather than just reacting). <p> Given these assumptions, Dean and Boddy describe a pair of algorithms for finding optimal schedules [ Boddy, 1991 ] . (A slightly updated version of these algorithms can be found in a later paper <ref> [ Boddy and Dean, 1993 ] </ref> ). These algorithms primarily differ in their assumptions about the performance profiles. Note that similar, but slightly more general algorithms have been developed independently by Dey et al. [ Dey et al., 1993 ] .
Reference: [ Boddy, 1991 ] <author> Mark Boddy. </author> <title> Solving time-dependent problems: A decision-theoretic approach to planning in dynamic environments. </title> <type> Ph.D. </type> <institution> Dissertation CS-91-06, Department of Computer Science, Brown University, Providence, RI, </institution> <year> 1991. </year>
Reference-contexts: Values of responses are assumed to be independent of one another. 2 A schedule satisfies the 0/1 constraint if every optional task is either executed to completion or not executed at all. Given these assumptions, Dean and Boddy describe a pair of algorithms for finding optimal schedules <ref> [ Boddy, 1991 ] </ref> . (A slightly updated version of these algorithms can be found in a later paper [ Boddy and Dean, 1993 ] ). These algorithms primarily differ in their assumptions about the performance profiles. <p> Events may be sent to many internal modules; the only restriction is that the flow of events be acyclic. A second perspective describes what are known as event processing plans (EPPs). EPPs are particular paths of event flow 4 This heuristic is closely related to Boddy and Dean's <ref> [ Boddy, 1991 ] </ref> scheduling method that gives runtime to the anytime algorithm with the highest gradient in its expected performance profile.
Reference: [ Bonissone and Halverson, 1990 ] <author> Piero P. Bonissone and Peter C. Halverson. </author> <title> Time-constrained reasoning under uncertainty. </title> <journal> The Journal of Real-Time Systems, </journal> 2(1/2):25-45, 1990. 
Reference-contexts: Next work is described by Bonissone and Halverson on solving dynamic classification problems <ref> [ Bonissone and Halverson, 1990 ] </ref> and Etzioni [ Etzioni, 1991 ] on the usefulness of marginal utility in scheduling. <p> For another perspective on the problem of real-time scheduling of AI tasks see Stankovic et al. [ Stankovic et al., 1989 ] . 3.3 Time-constrained reasoning under uncertainty plans; on the right are four individual plans with different runtimes and expected values. The work of Bonissone and Halverson <ref> [ Bonissone and Halverson, 1990 ] </ref> looks at solving dynamic classification problems which are classification problems in which the rate of change of the environment is as fast as the time to do a diagnosismeaning that some of the data on which a diagnosis is based might have changed by the
Reference: [ Brooks, 1986 ] <author> Rodney A. Brooks. </author> <title> A robust layered control system for a mobile robot. </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> RA-2(1):14-23, </volume> <month> March </month> <year> 1986. </year>
Reference-contexts: A realization of this problem, along with a pressing desire to embed AI systems in larger applications (such as robots) led to the development of reactive AI systems <ref> [ Agre and Chapman, 1987, Brooks, 1986, Firby, 1987 ] </ref> . The goal of the reactive AI systems work (at least initially) was to investigate how close you could come to an intelligent agent with just hardwired reactions to the actual external environment. <p> Both the ABE/RT system and the real-time DVMT architecture as discussed in detail above fit into this category as well. Although we do not discuss it in detail here, Brooks' work on the subsumption architecture <ref> [ Brooks, 1986 ] </ref> (which is generally considered to be reactive) can be thought of as a layered architecture where the higher layers are deliberative and the lower layers are reactive, which makes it clear that the exact distinctions between reactive and deliberative are somewhat fuzzy and hard to define. 4.1
Reference: [ Chung et al., 1990 ] <author> J. Y. Chung, J. W. S. Liu, and K. J. Lin. </author> <title> Scheduling periodic jobs that allow imprecise results. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39 </volume> <pages> 1156-1173, </pages> <year> 1990. </year>
Reference: [ Collinot and Hayes-Roth, 1990 ] <author> Anne Collinot and Barbara Hayes-Roth. </author> <title> Real-time control of reasoning: Experiments with two control models. </title> <booktitle> In Proceedings of the Workshop on Innovative Approaches to Planning, Scheduling and Control, </booktitle> <pages> pages 263-270, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: particular problems, including Horvitz's work on using anytime algorithms in various parts of a decision-theoretic problem-solver [ Horvitz, 1988, Horvitz, 1989, Horvitz et al., 1989, Horvitz and Rutledge, 1991 ] , Korf 's approach to real-time A* search [ Korf, 1990 ] , Collinot and Hayes-Roth's satisficing blackboard control loop <ref> [ Collinot and Hayes-Roth, 1990, Hayes-Roth and Collinot, 1991 ] </ref> , and Ash and Hayes-Roth's anytime diagnosis system [ Ash and Hayes-Roth, 1993 ] . 2.1 Dean and Boddy's work The focus of Dean and Boddy's work in this area has been on what they call deliberation scheduling applied to time-dependent <p> This can take a long time, and will vary in duration depending on the number of actions being considered and the complexity of the control heuristics. Collinot and Hayes-Roth <ref> [ Collinot and Hayes-Roth, 1990, Hayes-Roth and Collinot, 1991 ] </ref> have devised a satisficing anytime control cycle to replace the standard cycle. <p> Real-time aspects of this work include a separate input manager that filters and processes inputs [ Washington and Hayes-Roth, 1989 ] , a satisficing control cycle to bound the amount of time spent doing metalevel reasoning <ref> [ Collinot and Hayes-Roth, 1990, Hayes-Roth and Collinot, 1991 ] </ref> , and an anytime diagnosis component [ Ash and Hayes-Roth, 1993 ] . Figure 8 shows an overview of the agent architecture used by Guardian. 17 gular boxes represent concurrently executing processes.
Reference: [ Cooper, 1990 ] <author> G. F. Cooper. </author> <title> The computational complexity of probabilistic inference using Bayesian belief networks. </title> <journal> Artificial Intelligence, </journal> <volume> 42(2/3):393, </volume> <year> 1990. </year>
Reference-contexts: Traditional decision theory has the desirable property that it finds provably optimal solutions to problems. Unfortunately the updating of beliefs using probabilistic inference is NP-Hard <ref> [ Cooper, 1990 ] </ref> , making traditional decision theory unsuitable for most real-time situations. Horvitz describes several approaches for approximating the probabilistic inference component of decision-theoretic problem solving. Many of these approximations have the characteristic of providing better answers as they are given additional runtime (i.e., they are flexible computations).
Reference: [ D'Ambrosio, 1989 ] <author> Bruce D'Ambrosio. </author> <title> Resource bounded-agents in an uncertain world. </title> <booktitle> In Proceedings of the Workshop on Real-Time Artificial Intelligence Problems, IJCAI-89, </booktitle> <address> Detroit, </address> <month> August </month> <year> 1989. </year>
Reference-contexts: VTM methods combine VLM results into tracks. VCM methods complete processing for a vehicle. The methodology is known as design-to-time because it advocates the use of all available time to generate the best solutions possible. It is a problem-solving method of the type described by D'Ambrosio <ref> [ D'Ambrosio, 1989 ] </ref> as those that given a time bound, dynamically construct and execute a problem solving procedure which will (probably) produce a reasonable answer within (approximately) the time available. Design-to-time can only be successful if the duration and quality associated with methods is fairly predictable.
Reference: [ Dean and Boddy, 1988 ] <author> T. Dean and M. Boddy. </author> <title> An analysis of time-dependent planning. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 49-54, </pages> <address> St. Paul, Minnesota, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: It is expected that the quality of the answer will increase as the anytime algorithm is given increasing runtime (up to some maximum quality). The term anytime algorithm was coined by Dean and Boddy in the late '80s <ref> [ Dean and Boddy, 1988 ] </ref> , but iterative refinement algorithms with anytime characteristics have been studied in many areas including numerical approximation, heuristic search, dynamic programming, Monte Carlo algorithms, and database query handling. <p> limitation include systems-oriented work on scheduling that incorporates resources [ Zhao et al., 1987 ] , compilation of anytime algorithms [ Zilberstein, 1993 ] , and design-to-time scheduling [ Garvey et al., 1993 ] . anytime algorithmsSome work in both systems-oriented [ Liu et al., 1991b ] and AI real-time <ref> [ Dean and Boddy, 1988, Russell and Zilberstein, 1991 ] </ref> assumes that many or all problems are to be solved using anytime algorithms (i.e., algorithms that always have an answer at hand and provide higher quality answers if they are given more time up to some maximum quality).
Reference: [ Dean and Wellman, 1991 ] <author> Thomas Dean and Michael Wellman. </author> <title> Planning and Control. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo, CA, </address> <year> 1991. </year>
Reference: [ Decker and Lesser, 1993 ] <author> Keith S. Decker and Victor R. Lesser. </author> <title> Quantitative modeling of complex computational task environments. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 217-224, </pages> <address> Washington, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: This work uses a model of computational tasks known as TMS <ref> [ Decker and Lesser, 1993 ] </ref> that models problems as consisting of independent task groups that contain possibly dependent tasks. <p> This corresponds to the situation where using a crude approximation for a task can have negative effects on the behavior of tasks that use the result of the approximated task. are the opposite of those of the facilitates relationship <ref> [ Decker and Lesser, 1993 ] </ref> . Associated with each facilitates/hinders relationship are a pair of parameters that define the power of the effect on the duration and quality of the affected method. <p> This tradeoff between schedule precision and scheduler runtime has a contract anytime algorithm character. This algorithm was developed and tested using TMS <ref> [ Decker and Lesser, 1993 ] </ref> , allowing it to be studied both analytically and in a simulation environment. More recent design-to-time research has focused on heuristic scheduling techniques and on the interface between a design-to-time scheduler and the application that it is embedded in.
Reference: [ Decker et al., 1990 ] <author> Keith S. Decker, Victor R. Lesser, and Robert C. Whitehair. </author> <title> Extending a blackboard architecture for approximate processing. </title> <journal> The Journal of Real-Time Systems, </journal> 2(1/2):47-79, 1990. 
Reference-contexts: This work describes several approximations for use in doing complex signal interpretation tasks. These approximations are categorized as approximate search strategies, data approximations and knowledge approximations. They examine the usefulness of these approximations in the Distributed Vehicle Monitoring Testbed (DVMT). Decker et al. <ref> [ Decker et al., 1990 ] </ref> describe extensions to a standard blackboard architecture to support approximate processing.
Reference: [ Decker et al., 1993 ] <author> Keith S. Decker, Alan J. Garvey, Marty A. Humphrey, and Victor R. Lesser. </author> <title> A real-time control architecture for an approximate processing blackboard system. </title> <journal> International Journal of Pattern Recognition and Artificial Intelligence, </journal> <volume> 7(2) </volume> <pages> 265-284, </pages> <year> 1993. </year>
Reference-contexts: Together these mechanisms allow DVMT approximations to be constructed that have significantly reduced durations and well-understood, fairly predictable effects on solution quality (for this work a combination of certainty of beliefs and likelihood of correctness.) Decker et al. <ref> [ Decker et al., 1993 ] </ref> provide additional features for the DVMT real-time blackboard application.
Reference: [ Dey et al., 1993 ] <author> J.K. Dey, James Kurose, and Don Towsley. </author> <title> On-line processor scheduling for a class of IRIS (increasing reward with increasing time) real-time tasks. </title> <type> CS Technical Report 93-09, </type> <institution> University of Massachusetts, </institution> <year> 1993. </year>
Reference-contexts: These algorithms primarily differ in their assumptions about the performance profiles. Note that similar, but slightly more general algorithms have been developed independently by Dey et al. <ref> [ Dey et al., 1993 ] </ref> . The first algorithm (known as DS-1), assumes only that the gain for a performance profile at any particular time is available. This algorithm schedules backwards from the latest deadline to the current time, in fixed increments of size ffi.
Reference: [ Etzioni, 1991 ] <author> Oren Etzioni. </author> <title> Embedding decision-analytic control in a learning architecture. </title> <journal> Artificial Intelligence, </journal> <volume> 49 </volume> <pages> 129-159, </pages> <year> 1991. </year> <month> 24 </month>
Reference-contexts: Next work is described by Bonissone and Halverson on solving dynamic classification problems [ Bonissone and Halverson, 1990 ] and Etzioni <ref> [ Etzioni, 1991 ] </ref> on the usefulness of marginal utility in scheduling. <p> This emphasis on doing as much as possible at design time recurs in real-time AI research (as in systems-oriented real-time research), especially in work that emphasizes actual applications. 15 3.4 Etzioni's marginal utility heuristic Etzioni <ref> [ Etzioni, 1991 ] </ref> looks at the control problem for a time-constrained agent in economic terms. When the use of a resource (such as time) for one action precludes that resource being used by another action, the executed action is said to have an opportunity cost.
Reference: [ Firby, 1987 ] <author> R. James Firby. </author> <title> An investigation into reactive planning in complex domains. </title> <booktitle> In Proceedings of the Sixth National Conference on Artificial Intelligence, </booktitle> <pages> pages 202-206, </pages> <address> Seattle, WA, </address> <month> July </month> <year> 1987. </year>
Reference-contexts: A realization of this problem, along with a pressing desire to embed AI systems in larger applications (such as robots) led to the development of reactive AI systems <ref> [ Agre and Chapman, 1987, Brooks, 1986, Firby, 1987 ] </ref> . The goal of the reactive AI systems work (at least initially) was to investigate how close you could come to an intelligent agent with just hardwired reactions to the actual external environment. <p> Note that even in situations where accurate and complete information is available, uncertainty due to problem complexity may prevent static solutions (e.g., chess). Another real-time AI solution to the requirement for agents that respond dynamically to a changing environment has been to build reactive AI systems <ref> [ Agre and Chapman, 1987, Firby, 1987 ] </ref> that do not deliberate at all, but react directly to inputs. While this survey focuses on deliberative real-time AI, at some level of required reaction time, the only reasonable solution method is reactive.
Reference: [ Garvey and Lesser, 1993 ] <author> Alan Garvey and Victor Lesser. </author> <title> Design-to-time real-time scheduling. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <volume> 23(6), </volume> <year> 1993. </year> <note> To appear. </note>
Reference-contexts: Approaches in this area include flexible computation [ Horvitz and Rutledge, 1991 ] , deliberation scheduling [ Boddy and Dean, 1993 ] , compilation of anytime algorithms [ Zilberstein, 1993 ] and design-to-time real-time scheduling <ref> [ Garvey and Lesser, 1993 ] </ref> . Both of these approaches are known as deliberative, because they deliberate to determine how to act (rather than just reacting). The second alternative is based on the use of approximate algorithms for solving problems. <p> properties (i.e., its discrete rather than linear performance characteristics.) This section first describes work by Lesser et al. on approximate processing [ Lesser et al., 1988, Decker et al., 1990, Decker et al., 1993 ] , then moves on to later work by Lesser and Garvey on design-to-time real-time scheduling <ref> [ Garvey et al., 1993, Garvey and Lesser, 1993 ] </ref> . Next work is described by Bonissone and Halverson on solving dynamic classification problems [ Bonissone and Halverson, 1990 ] and Etzioni [ Etzioni, 1991 ] on the usefulness of marginal utility in scheduling. <p> This allows the DVMT to achieve predictable real-time performance (including in hard deadline situations), although the issue of the cost of control is not completely addressed. 3.2 Design-to-time real-time scheduling Design-to-time <ref> [ Garvey et al., 1993, Garvey and Lesser, 1993 ] </ref> is a generalization of the approximate processing approach where the existence of multiple methods for many tasks is assumed and the problem is to design a solution to a problem that uses all available resources to maximize solution quality within the <p> Design-to-time can only be successful if the duration and quality associated with methods is fairly predictable. The predictability issue was investigated in detail <ref> [ Garvey and Lesser, 1993 ] </ref> with the result that the predictability necessary for execution times is based on a complex set of factors that include how heavy the agent's workload is (because in light workload situations it is often acceptable for methods to take longer than expected because slack time <p> enables relationships appear as requirements that low level data be processed before high level interpretations of that data are made, and the hinders relationships appear in the situation where fast, imprecise approximations of low level data processing can both increase the duration and decrease the precision of high level results <ref> [ Garvey and Lesser, 1993, Lesser and Corkill, 1983 ] </ref> . can schedule. The dark lines indicate subtask relationships. The thin gray lines represent enables constraints. The thick gray line represents a hinders constraint. <p> Even dynamic, runtime problem solvers have to make assumptions about the predictability of task information. One approach to this problem is to monitor the performance of tasks and adjust behavior when performance is not as expected <ref> [ Garvey and Lesser, 1993 ] </ref> . Anytime algorithms make assumptions about the accuracy of performance profile information, but, in general, they should perform better in unpredictable situations, because they always have an answer at hand.
Reference: [ Garvey et al., 1993 ] <author> Alan Garvey, Marty Humphrey, and Victor Lesser. </author> <title> Task interdependencies in design-to-time real-time scheduling. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 580-585, </pages> <address> Washington, D.C., </address> <month> July </month> <year> 1993. </year>
Reference-contexts: properties (i.e., its discrete rather than linear performance characteristics.) This section first describes work by Lesser et al. on approximate processing [ Lesser et al., 1988, Decker et al., 1990, Decker et al., 1993 ] , then moves on to later work by Lesser and Garvey on design-to-time real-time scheduling <ref> [ Garvey et al., 1993, Garvey and Lesser, 1993 ] </ref> . Next work is described by Bonissone and Halverson on solving dynamic classification problems [ Bonissone and Halverson, 1990 ] and Etzioni [ Etzioni, 1991 ] on the usefulness of marginal utility in scheduling. <p> This allows the DVMT to achieve predictable real-time performance (including in hard deadline situations), although the issue of the cost of control is not completely addressed. 3.2 Design-to-time real-time scheduling Design-to-time <ref> [ Garvey et al., 1993, Garvey and Lesser, 1993 ] </ref> is a generalization of the approximate processing approach where the existence of multiple methods for many tasks is assumed and the problem is to design a solution to a problem that uses all available resources to maximize solution quality within the <p> intermediate results can be shared among methods, so that when it is necessary to switch to a faster method the intermediate results generated by the previous method can be used, or * there exists a fast fall back method that quickly generates a minimally acceptable solution. 13 Garvey and Lesser <ref> [ Garvey et al., 1993 ] </ref> present an algorithm for finding optimal solutions to a particularly circumscribed design-to-time scheduling problem where: * The task/subtask relationship forms a tree, rather than a general directed acyclic graph. * Tasks quality functions are one of minimum (AND) or maximum (OR). * Enables relationships may <p> Examples of work that avoid this limitation include systems-oriented work on scheduling that incorporates resources [ Zhao et al., 1987 ] , compilation of anytime algorithms [ Zilberstein, 1993 ] , and design-to-time scheduling <ref> [ Garvey et al., 1993 ] </ref> . anytime algorithmsSome work in both systems-oriented [ Liu et al., 1991b ] and AI real-time [ Dean and Boddy, 1988, Russell and Zilberstein, 1991 ] assumes that many or all problems are to be solved using anytime algorithms (i.e., algorithms that always have an
Reference: [ Hayes-Roth and Collinot, 1991 ] <author> Barbara Hayes-Roth and Anne Collinot. </author> <title> Scalability of real-time reasoning in intelligent agents. </title> <type> Technical Report KSL 91-08, </type> <institution> Knowledge Systems Laboratory, Stanford University, </institution> <year> 1991. </year>
Reference-contexts: particular problems, including Horvitz's work on using anytime algorithms in various parts of a decision-theoretic problem-solver [ Horvitz, 1988, Horvitz, 1989, Horvitz et al., 1989, Horvitz and Rutledge, 1991 ] , Korf 's approach to real-time A* search [ Korf, 1990 ] , Collinot and Hayes-Roth's satisficing blackboard control loop <ref> [ Collinot and Hayes-Roth, 1990, Hayes-Roth and Collinot, 1991 ] </ref> , and Ash and Hayes-Roth's anytime diagnosis system [ Ash and Hayes-Roth, 1993 ] . 2.1 Dean and Boddy's work The focus of Dean and Boddy's work in this area has been on what they call deliberation scheduling applied to time-dependent <p> This can take a long time, and will vary in duration depending on the number of actions being considered and the complexity of the control heuristics. Collinot and Hayes-Roth <ref> [ Collinot and Hayes-Roth, 1990, Hayes-Roth and Collinot, 1991 ] </ref> have devised a satisficing anytime control cycle to replace the standard cycle. <p> Real-time aspects of this work include a separate input manager that filters and processes inputs [ Washington and Hayes-Roth, 1989 ] , a satisficing control cycle to bound the amount of time spent doing metalevel reasoning <ref> [ Collinot and Hayes-Roth, 1990, Hayes-Roth and Collinot, 1991 ] </ref> , and an anytime diagnosis component [ Ash and Hayes-Roth, 1993 ] . Figure 8 shows an overview of the agent architecture used by Guardian. 17 gular boxes represent concurrently executing processes.
Reference: [ Hayes-Roth et al., 1992 ] <author> B. Hayes-Roth, R. Washington, D. Ash, A. Collinot, A. Vina, and A. Seiver. Guardian: </author> <title> A prototype intensive-care monitoring agent. </title> <journal> Artificial Intelligence in Medicine, </journal> <volume> 4 </volume> <pages> 165-185, </pages> <year> 1992. </year>
Reference-contexts: This has the effect of limiting the kinds of applications to which the techniques can be applied. More recently, some work in real-time AI has avoided making this limiting assumption by explicitly taking real-time constraints into account in a real-time control component <ref> [ Hayes-Roth et al., 1992 ] </ref> or by explicitly reasoning about the expected value of control versus domain reasoning [ Horvitz and Breese, 1990, Ingrand and Georgeff, 1990, Russell and Wefald, 1991 ] . * predictability of tasksAll real-time work has to make some assumptions about the accuracy and completeness of
Reference: [ Hayes-Roth, 1990 ] <author> Barbara Hayes-Roth. </author> <title> Architectural foundations for real-time performance in intelligent agents. </title> <journal> The Journal of Real-Time Systems, </journal> 2(1/2):99-125, 1990. 
Reference-contexts: One approach is to have two or more very different, asynchronous subsystems (e.g., one highly reactive and one highly deliberative) and combine their responses, for example work on Phoenix [ Howe et al., 1990 ] , Guardian <ref> [ Hayes-Roth, 1990 ] </ref> and CIRCA [ Musliner et al., 1993 ] . An alternative is to take a more integrated approach where there is a single architecture and a range of responses are possible given the time criticality of the required response. <p> per move are tightly controlled, but the quality of the result depends crucially on the accuracy of the heuristics used to estimate distance from a goal state and the ability of limited depth search to recommend moves in the direction of a goal state. 2.3.3 Satisficing anytime blackboard control Guardian <ref> [ Hayes-Roth, 1990 ] </ref> is a medical monitoring application built in a blackboard architecture (BB*), and, as such, has an agenda-based control mechanism. However, the standard BB* control cycle is not well-suited to real-time performance.
Reference: [ Hendler and Agrawala, 1990 ] <author> James Hendler and Ashok Agrawala. </author> <title> Mission critical planning: </title> <booktitle> AI on the MARUTI real-time operating system. In Proceedings of the Workshop on Innovative Approaches to Planning, Scheduling and Control, </booktitle> <pages> pages 77-84, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: It is the responsibility of the AI component to generate TAP schedules to respond to the current problem-solving situation. In a sense the AI component is dynamically constructing simple reactive systems to satisfy system goals in the current problem solving situation. Hendler and Agrawala <ref> [ Hendler and Agrawala, 1990 ] </ref> have done similar work on combining a real-time reactive component with higher level AI planning, all implemented in the MARUTI real-time operating system. 5 Summary of research directions The dual goals of this survey have been to show the progress that is being made in
Reference: [ Ho et al., 1992 ] <author> Kevin I-J. Ho, Joseph Y-T. Leung, and W-D. Wei. </author> <title> Scheduling imprecise computation tasks with 0/1-constraint. </title> <type> Technical Report UNL-CSE-92-16, </type> <institution> University of Nebraska-Lincoln, </institution> <year> 1992. </year>
Reference: [ Horvitz and Breese, 1990 ] <author> Eric J. Horvitz and John S. Breese. </author> <title> Ideal partition of resources for metar-easoning. </title> <type> Technical report KSL-90-26, </type> <institution> Knowledge Systems Laboratory, Stanford University, </institution> <month> March </month> <year> 1990. </year>
Reference-contexts: Horvitz has also looked at the general problem of partitioning resources between metareasoning and base-level problem solving <ref> [ Horvitz and Breese, 1990 ] </ref> . In particular he examines how much time to devote to solution planning for utility-directed problems where both planning and base-level computation is carried out using anytime algorithms.
Reference: [ Horvitz and Rutledge, 1991 ] <author> Eric J. Horvitz and Geoffrey Rutledge. </author> <title> Time-dependent utility and action under uncertainty. </title> <booktitle> In Proceedings of the Sixth Conference on Uncertainty in Artificial Intelligence, </booktitle> <address> Los Angeles, CA, </address> <month> July </month> <year> 1991. </year>
Reference-contexts: An alternative is to take a more integrated approach where there is a single architecture and a range of responses are possible given the time criticality of the required response. Approaches in this area include flexible computation <ref> [ Horvitz and Rutledge, 1991 ] </ref> , deliberation scheduling [ Boddy and Dean, 1993 ] , compilation of anytime algorithms [ Zilberstein, 1993 ] and design-to-time real-time scheduling [ Garvey and Lesser, 1993 ] . <p> This is probably most useful at design-time. * default reasoning and compilationhaving canned solutions that may be indexed by specific problem attributes. These are expected to be useful mainly in extremely time-constrained situations. One example of this work in practice is described by Horvitz and Rutledge <ref> [ Horvitz and Rutledge, 1991 ] </ref> . An approach known as bounded conditioning is used to approximate the propagation of beliefs through a belief network. They describe experiments using this technique to compute probabilities in a belief network from a medical application.
Reference: [ Horvitz et al., 1989 ] <author> Eric J. Horvitz, Gregory F. Cooper, and David E. Heckerman. </author> <title> Reflection and action under scarce resources: Theoretical principles and empirical study. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 1121-1127, </pages> <address> Detroit, MI, </address> <month> August </month> <year> 1989. </year>
Reference: [ Horvitz, 1988 ] <author> Eric J. Horvitz. </author> <title> Reasoning under varying and uncertain resource constraints. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 111-116, </pages> <address> St. Paul, MN, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: algorithm * finding anytime algorithms to implement decision-theoretic reasoning about what action to perform next 7 * finding an optimum balance between time spent doing metareasoning and time spent solving actual problems As a simple example of how Horvitz assigns utilities to partial results, he considers the problem of sorting <ref> [ Horvitz, 1988 ] </ref> . Normally, sorting is not considered to be a real-time problem, but consider a sorting algorithm that is part of a larger algorithm that assigns priorities to items in a schedule and wants to order them by priority.
Reference: [ Horvitz, 1989 ] <author> Eric J. Horvitz. </author> <title> Reasoning about beliefs and actions under computational resource constraints. </title> <editor> In L. N. Kanal, T. S. Levitt, and J. F. Lemmer, editors, </editor> <booktitle> Uncertainty in Artificial Intelligence 3. </booktitle> <publisher> Elsevier Science Publishers, </publisher> <year> 1989. </year>
Reference: [ Howe et al., 1990 ] <author> Adele E. Howe, David M. Hart, and Paul R. Cohen. </author> <title> Addressing real-time constraints in the design of autonomous agents. </title> <journal> The Journal of Real-Time Systems, </journal> 2(1/2):81-97, 1990. <volume> 25 </volume>
Reference-contexts: One approach is to have two or more very different, asynchronous subsystems (e.g., one highly reactive and one highly deliberative) and combine their responses, for example work on Phoenix <ref> [ Howe et al., 1990 ] </ref> , Guardian [ Hayes-Roth, 1990 ] and CIRCA [ Musliner et al., 1993 ] . <p> Often these large systems combine fast-acting reactive components with more deliberative cognitive components. System architectures to be discussed include Guardian [ Hayes-Roth, 1990, Hayes-Roth et al., 1992, Washington and Hayes-Roth, 1989 ] , Phoenix <ref> [ Howe et al., 1990 ] </ref> , PRS [ Ingrand and Georgeff, 1990, Ingrand et al., 1992 ] and CIRCA [ Musliner et al., 1993 ] . Both the ABE/RT system and the real-time DVMT architecture as discussed in detail above fit into this category as well. <p> Guardian is a good example of a system that combines several of the techniques described in this paper (satisficing control, anytime algorithms, dynamic filtering) in appropriate components of the system to achieve overall real-time performance. 4.2 Real-time work in Phoenix The Phoenix project <ref> [ Howe et al., 1990 ] </ref> is investigating the design of autonomous agents. <p> While this survey focuses on deliberative real-time AI, at some level of required reaction time, the only reasonable solution method is reactive. Some work in deliberative real-time AI has looked at having a reactive component in an otherwise deliberative system <ref> [ Howe et al., 1990, Musliner et al., 1993 ] </ref> .
Reference: [ Ingrand and Georgeff, 1990 ] <author> F. F. Ingrand and M. P. Georgeff. </author> <title> Managing deliberation and reasoning in real-time AI systems. </title> <booktitle> In Proceedings of the Workshop on Innovative Approaches to Planning, Scheduling and Control, </booktitle> <pages> pages 284-291, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Often these large systems combine fast-acting reactive components with more deliberative cognitive components. System architectures to be discussed include Guardian [ Hayes-Roth, 1990, Hayes-Roth et al., 1992, Washington and Hayes-Roth, 1989 ] , Phoenix [ Howe et al., 1990 ] , PRS <ref> [ Ingrand and Georgeff, 1990, Ingrand et al., 1992 ] </ref> and CIRCA [ Musliner et al., 1993 ] . Both the ABE/RT system and the real-time DVMT architecture as discussed in detail above fit into this category as well. <p> The basic idea of having reactive and cognitive components within an agent architecture is one way that AI systems can work effectively in domains with soft real-time constraints. 4.3 PRS architecture The Procedural Reasoning System (PRS) <ref> [ Ingrand and Georgeff, 1990, Ingrand et al., 1992 ] </ref> is an architecture for embedded real-time systems that need to deliberate in real-time. <p> KAs are interruptible when external events cause changes to the database, thus allowing rapid response to changing environmental situations. Ingrand and Georgeff <ref> [ Ingrand and Georgeff, 1990 ] </ref> describe the results of experiments that look at the response time of a PRS system to external events (e.g., the time from when an event arrives at the system until the system has decided how to respond to it).
Reference: [ Ingrand et al., 1992 ] <author> Francois F. Ingrand, Michael P. Georgeff, and Anand S. Rao. </author> <title> An architecture for real-time reasoning and system control. </title> <journal> IEEE Expert, </journal> <pages> pages 34-44, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: Often these large systems combine fast-acting reactive components with more deliberative cognitive components. System architectures to be discussed include Guardian [ Hayes-Roth, 1990, Hayes-Roth et al., 1992, Washington and Hayes-Roth, 1989 ] , Phoenix [ Howe et al., 1990 ] , PRS <ref> [ Ingrand and Georgeff, 1990, Ingrand et al., 1992 ] </ref> and CIRCA [ Musliner et al., 1993 ] . Both the ABE/RT system and the real-time DVMT architecture as discussed in detail above fit into this category as well. <p> The basic idea of having reactive and cognitive components within an agent architecture is one way that AI systems can work effectively in domains with soft real-time constraints. 4.3 PRS architecture The Procedural Reasoning System (PRS) <ref> [ Ingrand and Georgeff, 1990, Ingrand et al., 1992 ] </ref> is an architecture for embedded real-time systems that need to deliberate in real-time.
Reference: [ Jensen et al., 1985 ] <author> E. Douglas Jensen, C. Douglass Locke, and Hideyuki Tokuda. </author> <title> A time-driven scheduling model for real-time operating systems. </title> <booktitle> In Proceedings of the 1985 Real-time Systems Symposium, </booktitle> <pages> pages 112-122, </pages> <month> December </month> <year> 1985. </year>
Reference-contexts: These are the actual values used in most of Zilberstein's compilation algorithms. Somewhat related to the idea of a performance profile is earlier systems-oriented work on scheduling non-anytime tasks where each task has a value function associated with finishing it by a particular time <ref> [ Jensen et al., 1985 ] </ref> . The goal in this work was to build a schedule that optimized value by finishing tasks at appropriate times. Anytime algorithms have the advantage of always having an answer at hand, so they can respond quickly to changing environmental situations.
Reference: [ Kenny and Lin, 1991 ] <author> Kevin B. Kenny and Kwei-Jay Lin. </author> <title> Building flexible real-time systems using the Flex language. </title> <journal> IEEE Computer, </journal> <volume> 24(5) </volume> <pages> 70-78, </pages> <month> May </month> <year> 1991. </year>
Reference: [ Korf, 1990 ] <author> Richard E. Korf. </author> <title> Depth-limited search for real-time problem solving. </title> <journal> The Journal of Real-Time Systems, </journal> 2(1/2):7-24, 1990. 
Reference-contexts: Next we discuss several projects that use anytime algorithms to solve particular problems, including Horvitz's work on using anytime algorithms in various parts of a decision-theoretic problem-solver [ Horvitz, 1988, Horvitz, 1989, Horvitz et al., 1989, Horvitz and Rutledge, 1991 ] , Korf 's approach to real-time A* search <ref> [ Korf, 1990 ] </ref> , Collinot and Hayes-Roth's satisficing blackboard control loop [ Collinot and Hayes-Roth, 1990, Hayes-Roth and Collinot, 1991 ] , and Ash and Hayes-Roth's anytime diagnosis system [ Ash and Hayes-Roth, 1993 ] . 2.1 Dean and Boddy's work The focus of Dean and Boddy's work in this <p> They avoid the metameta- problem by making what they call a meta-greedy assumption of just choosing the next single step with the highest utility (rather than considering 9 2.3.2 Real-time A* search RTA* <ref> [ Korf, 1990 ] </ref> is a real-time search algorithm that effectively solves normal state-space search problems using a contract anytime approach. The basic idea is to interleave moving down what appears to be the best path so far with refining the idea of what the best path is.
Reference: [ Lark et al., 1990 ] <author> Jay S. Lark, Lee D. Erman, Stephanie Forrest, Kim P. Gostelow, Frederick Hayes-Roth, and David M. Smith. </author> <title> Concepts, methods, and languages for building timely intelligent systems. </title> <journal> The Journal of Real-Time Systems, </journal> 2(1/2):127-148, 1990. 
Reference-contexts: Next work is described by Bonissone and Halverson on solving dynamic classification problems [ Bonissone and Halverson, 1990 ] and Etzioni [ Etzioni, 1991 ] on the usefulness of marginal utility in scheduling. Finally work on the ABE/RT 11 real-time system building tool is described <ref> [ Lark et al., 1990 ] </ref> . 3.1 Approximate processing Approximate processing is an approach to real-time problem solving in situations where satisficing answers are acceptable and some combination of data, knowledge, and control approximations are available. <p> In these situations the learning mechanism could be used at design-time to construct a system that performs adequately in real-time. 3.5 ABE/RT architecture ABE <ref> [ Lark et al., 1990 ] </ref> is essentially a CASE tool for building software applications with major AI components. ABE has several frameworks that support different ways of combining component modules to build applications. Often these component modules are themselves built in ABE, possibly using many different frameworks. <p> At the base are so-called black box modules that are built in regular programming languages (Common Lisp, C, etc: : : ). ABE has a real-time framework (ABE/RT) that allows users to build real-time applications (e.g., a prototype of the Pilot's Associate was built in the ABE/RT framework <ref> [ Lark et al., 1990 ] </ref> ). The ABE/RT framework differs from other ABE frameworks in that it requires information about the runtime of modules, not just their input/output behavior. ABE/RT allows modules to be viewed from three perspectives. One perspective describes the flow of events through the module.
Reference: [ Lesser and Corkill, 1983 ] <author> Victor R. Lesser and Daniel D. Corkill. </author> <title> The distributed vehicle monitoring testbed. </title> <journal> AI Magazine, </journal> <volume> 4(3) </volume> <pages> 63-109, </pages> <month> Fall </month> <year> 1983. </year>
Reference-contexts: enables relationships appear as requirements that low level data be processed before high level interpretations of that data are made, and the hinders relationships appear in the situation where fast, imprecise approximations of low level data processing can both increase the duration and decrease the precision of high level results <ref> [ Garvey and Lesser, 1993, Lesser and Corkill, 1983 ] </ref> . can schedule. The dark lines indicate subtask relationships. The thin gray lines represent enables constraints. The thick gray line represents a hinders constraint.
Reference: [ Lesser et al., 1988 ] <author> Victor R. Lesser, Jasmina Pavlin, and Edmund Durfee. </author> <title> Approximate processing in real-time problem solving. </title> <journal> AI Magazine, </journal> <volume> 9(1) </volume> <pages> 49-61, </pages> <month> Spring </month> <year> 1988. </year>
Reference-contexts: This approach was originally elucidated in the late '80s by Lesser <ref> [ Lesser et al., 1988 ] </ref> and termed approximate processing. sequences of computations). They argue that the resulting decision-theoretic metalevel exhibits anytime algorithm behavior. 10 necessary to identify a vehicle of type V 1 in a sensor interpretation application. for a sensor interpretation application. <p> One important aspect of approximate processing is having a representation that allows approximations to be interoperable (i.e., allows approximations to be mixed and matched, rather than each approximation having its own representation that is incompatible with the others). Initial work on approximate processing <ref> [ Lesser et al., 1988 ] </ref> focused on generating approximations in a disciplined way in an existing application. This work describes several approximations for use in doing complex signal interpretation tasks. These approximations are categorized as approximate search strategies, data approximations and knowledge approximations.
Reference: [ Leung et al., 1992 ] <author> Joseph Y-T. Leung, Vincent K.M. Yu, and W-D. Wei. </author> <title> Minimizing the weighted number of tardy task units. </title> <type> Technical report, </type> <institution> University of Nebraska-Lincoln, </institution> <year> 1992. </year>
Reference: [ Liu et al., 1991a ] <author> J. W. S. Liu, K. J. Lin, W. K. Shih, A. C. Yu, J. Y. Chung, and W. Zhao. </author> <title> Algorithms for scheduling imprecise computations. </title> <editor> In Andr'e M. van Tilborg and Gary M. Koob, editors, </editor> <title> Foundations of Real-Time Computing: Scheduling and Resource Management. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year>
Reference: [ Liu et al., 1991b ] <author> J. W. S. Liu, K. J. Lin, W. K. Shih, A. C. Yu, J. Y. Chung, and W. Zhao. </author> <title> Algorithms for scheduling imprecise computations. </title> <journal> IEEE Computer, </journal> <volume> 24(5) </volume> <pages> 58-68, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Examples of work that avoid this limitation include systems-oriented work on scheduling that incorporates resources [ Zhao et al., 1987 ] , compilation of anytime algorithms [ Zilberstein, 1993 ] , and design-to-time scheduling [ Garvey et al., 1993 ] . anytime algorithmsSome work in both systems-oriented <ref> [ Liu et al., 1991b ] </ref> and AI real-time [ Dean and Boddy, 1988, Russell and Zilberstein, 1991 ] assumes that many or all problems are to be solved using anytime algorithms (i.e., algorithms that always have an answer at hand and provide higher quality answers if they are given more
Reference: [ Marlin et al., 1990 ] <author> Chris Marlin, Wei Zhao, Graeme Doherty, and Andrew Bohonis. GARTL: </author> <title> A real-time programming language based on multi-version computation. </title> <booktitle> In Proceedings of the International Conference on Computer Languages, </booktitle> <pages> pages 107-115, </pages> <address> New Orleans, LA, </address> <month> March </month> <year> 1990. </year>
Reference: [ Musliner et al., 1993 ] <author> David J. Musliner, Edmund H. Durfee, and Kang G. Shin. </author> <title> CIRCA: A cooperative intelligent real-time control architecture. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <volume> 23(6), </volume> <year> 1993. </year> <note> To appear. </note>
Reference-contexts: One approach is to have two or more very different, asynchronous subsystems (e.g., one highly reactive and one highly deliberative) and combine their responses, for example work on Phoenix [ Howe et al., 1990 ] , Guardian [ Hayes-Roth, 1990 ] and CIRCA <ref> [ Musliner et al., 1993 ] </ref> . An alternative is to take a more integrated approach where there is a single architecture and a range of responses are possible given the time criticality of the required response. <p> System architectures to be discussed include Guardian [ Hayes-Roth, 1990, Hayes-Roth et al., 1992, Washington and Hayes-Roth, 1989 ] , Phoenix [ Howe et al., 1990 ] , PRS [ Ingrand and Georgeff, 1990, Ingrand et al., 1992 ] and CIRCA <ref> [ Musliner et al., 1993 ] </ref> . Both the ABE/RT system and the real-time DVMT architecture as discussed in detail above fit into this category as well. <p> At this time PRS cannot 19 guarantee to respond to events within a bounded time, because it does not completely ignore other incoming events. These results suggest that PRS might be useful, at least for soft real-time applications. 4.4 CIRCA architecture CIRCA <ref> [ Musliner et al., 1993 ] </ref> is an architecture intended to support applications that combine real-time and AI components. At a high level its is very similar to the Phoenix approach. <p> While this survey focuses on deliberative real-time AI, at some level of required reaction time, the only reasonable solution method is reactive. Some work in deliberative real-time AI has looked at having a reactive component in an otherwise deliberative system <ref> [ Howe et al., 1990, Musliner et al., 1993 ] </ref> .
Reference: [ Russell and Wefald, 1991 ] <author> Stuart Russell and Eric Wefald. </author> <title> Do the Right Thing: Studies in Limited Rationality. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1991. </year>
Reference-contexts: In general he is able to show that calculations concerning the partitioning of resources between metareasoning and base-level problem solving are quite simple in at least the situations he describes. (Of course, obtaining functions that have the characteristics he assumes may be much more difficult.) 3 3 Russell and Wefald <ref> [ Russell and Wefald, 1991 ] </ref> investigate similar problems (partitioning resources between metareasoning and base-level problem solving) without assuming the availability of anytime algorithms in either the metareasoning or base-level computations. <p> EPPs are particular paths of event flow 4 This heuristic is closely related to Boddy and Dean's [ Boddy, 1991 ] scheduling method that gives runtime to the anytime algorithm with the highest gradient in its expected performance profile. Both are what Russell calls meta-greedy algorithms <ref> [ Russell and Wefald, 1991 ] </ref> i.e., they choose the action appearing to have the highest immediate benefit. 16 through a module. Each EPP can be thought of as one of a set of methods for responding to a particular input event.
Reference: [ Russell and Zilberstein, 1991 ] <author> Stuart J. Russell and Shlomo Zilberstein. </author> <title> Composing real-time systems. </title> <booktitle> In Proceedings of the Twelfth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 212-217, </pages> <address> Sydney, Australia, </address> <month> August </month> <year> 1991. </year> <month> 26 </month>
Reference-contexts: Thus, they do not factor the cost of scheduling into their analysis (although any actual application would have to allow time for scheduling to occur). 2.2 Compilation of anytime algorithms The focus of Russell and Zilberstein work <ref> [ Russell and Zilberstein, 1991, Zilberstein, 1993 ] </ref> is based on structuring a computation as the combination of anytime algorithms, where the results of a set of anytime algorithms are inputs to another anytime algorithm. <p> Zilberstein <ref> [ Russell and Zilberstein, 1991, Zilberstein, 1993 ] </ref> describes several algorithms for compiling anytime algorithms. <p> This is similar to the effect of the quality of the inputs on performance profiles in Zilberstein's compilation of anytime algorithms <ref> [ Russell and Zilberstein, 1991 ] </ref> . An example of a TMS task structure that models a multi-agent sensor interpretation problem is shown in Figure 5. data for a particular vehicle at a particular location (point in time). VTM methods combine VLM results into tracks. <p> An area where progress is beginning to be made is in the integrating of anytime algorithm and multiple method approaches to create hybrid systems. For example, the compilation techniques of Zilberstein <ref> [ Russell and Zilberstein, 1991 ] </ref> can be used to compile programs consisting of both anytime and traditional algorithms (where the performance profile of a traditional algorithm is presumably a single step function). <p> limitation include systems-oriented work on scheduling that incorporates resources [ Zhao et al., 1987 ] , compilation of anytime algorithms [ Zilberstein, 1993 ] , and design-to-time scheduling [ Garvey et al., 1993 ] . anytime algorithmsSome work in both systems-oriented [ Liu et al., 1991b ] and AI real-time <ref> [ Dean and Boddy, 1988, Russell and Zilberstein, 1991 ] </ref> assumes that many or all problems are to be solved using anytime algorithms (i.e., algorithms that always have an answer at hand and provide higher quality answers if they are given more time up to some maximum quality).
Reference: [ Shih et al., 1991 ] <author> Wei-Kuan Shih, Jane W. S. Liu, and Jen-Yao Chung. </author> <title> Algorithms for scheduling imprecise computations with timing constraints. </title> <journal> SIAM Journal on Computing, </journal> <volume> 20(3) </volume> <pages> 537-552, </pages> <month> June </month> <year> 1991. </year>
Reference: [ Stankovic et al., 1989 ] <author> J. A. Stankovic, K. Ramamritham, and D. Niehaus. </author> <title> On using the Spring kernel to support real-time AI applications. </title> <booktitle> In Proceedings of the EuroMicro Workshop on Real-time Systems, </booktitle> <year> 1989. </year>
Reference-contexts: More recent design-to-time research has focused on heuristic scheduling techniques and on the interface between a design-to-time scheduler and the application that it is embedded in. For another perspective on the problem of real-time scheduling of AI tasks see Stankovic et al. <ref> [ Stankovic et al., 1989 ] </ref> . 3.3 Time-constrained reasoning under uncertainty plans; on the right are four individual plans with different runtimes and expected values.
Reference: [ Strosnider and Paul, 1993 ] <author> Jay K. Strosnider and C. J. Paul. </author> <title> A structured view of real-time problem solving. </title> <type> Technical report, </type> <institution> Carnegie Mellon University, Department of Electrical and Computer Engineering, </institution> <year> 1993. </year>
Reference-contexts: Many of them seem to take the form of a priori limitations in the kind of problems that can be represented 1 . This contrasts with a recent paper on real-time AI by Strosnider and Paul <ref> [ Strosnider and Paul, 1993 ] </ref> that categorizes these systems based on the approaches they use to make search more predictable.
Reference: [ Washington and Hayes-Roth, 1989 ] <author> Richard Washington and Barbara Hayes-Roth. </author> <title> Input data management in real-time AI systems. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 250-255, </pages> <address> Detroit, MI, </address> <month> August </month> <year> 1989. </year>
Reference-contexts: Real-time aspects of this work include a separate input manager that filters and processes inputs <ref> [ Washington and Hayes-Roth, 1989 ] </ref> , a satisficing control cycle to bound the amount of time spent doing metalevel reasoning [ Collinot and Hayes-Roth, 1990, Hayes-Roth and Collinot, 1991 ] , and an anytime diagnosis component [ Ash and Hayes-Roth, 1993 ] . <p> Filtering of this data is necessary, but this filtering needs to be dynamic and intelligent to avoid both overburdening the cognitive component with needless detail and not informing it of important new information. Washington and Hayes-Roth <ref> [ Washington and Hayes-Roth, 1989 ] </ref> describe how Guardian's cognitive component dynamically builds and modifies filters to perform this task as problem solving progresses. The input data is processed on a separate I/O processor that filters the data using the dynamically-defined filters as controlled by the cognitive component.
Reference: [ Zhao et al., 1987 ] <author> W. Zhao, K. Ramamritham, and J. A. Stankovic. </author> <title> Scheduling tasks with resource requirements in hard real-time systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> May </month> <year> 1987. </year>
Reference-contexts: Assumptions of task independence generally significantly reduce the complexity of solution algorithms, usually by allowing separate subproblems to be solved independently without worrying about interactions. Examples of work that avoid this limitation include systems-oriented work on scheduling that incorporates resources <ref> [ Zhao et al., 1987 ] </ref> , compilation of anytime algorithms [ Zilberstein, 1993 ] , and design-to-time scheduling [ Garvey et al., 1993 ] . anytime algorithmsSome work in both systems-oriented [ Liu et al., 1991b ] and AI real-time [ Dean and Boddy, 1988, Russell and Zilberstein, 1991 ]
Reference: [ Zilberstein and Russell, 1992a ] <author> Shlomo Zilberstein and Stuart J. Russell. </author> <title> Constructing utility-driven real-time systems using anytime algorithms. </title> <booktitle> In Proceedings of the IEEE Workshop on Imprecise and Approximate Computation, </booktitle> <pages> pages 6-10, </pages> <address> Phoenix, AZ, </address> <month> December </month> <year> 1992. </year>
Reference: [ Zilberstein and Russell, 1992b ] <author> Shlomo Zilberstein and Stuart J. Russell. </author> <title> Efficient resource-bounded reasoning in AT-RALPH. </title> <booktitle> In Proceedings of the First International Conference on AI Planning Systems, </booktitle> <address> College Park, Maryland, </address> <month> June </month> <year> 1992. </year>
Reference: [ Zilberstein, 1993 ] <author> Shlomo Zilberstein. </author> <title> Operational rationality through compilation of anytime algorithms. </title> <type> Ph.D. Dissertation, </type> <institution> Department of Computer Science, University of California at Berkeley, Berkeley, </institution> <address> CA, </address> <year> 1993. </year> <month> 27 </month>
Reference-contexts: Approaches in this area include flexible computation [ Horvitz and Rutledge, 1991 ] , deliberation scheduling [ Boddy and Dean, 1993 ] , compilation of anytime algorithms <ref> [ Zilberstein, 1993 ] </ref> and design-to-time real-time scheduling [ Garvey and Lesser, 1993 ] . Both of these approaches are known as deliberative, because they deliberate to determine how to act (rather than just reacting). The second alternative is based on the use of approximate algorithms for solving problems. <p> Figures 1, 2 and 3 and Table 1 provide a detailed example from Zilberstein <ref> [ Zilberstein, 1993 ] </ref> of what an anytime algorithm is and how performance profiles can be constructed. Figure 1 is a simple anytime algorithm for solving the Traveling Salesman Problem (TSP). <p> Thus, they do not factor the cost of scheduling into their analysis (although any actual application would have to allow time for scheduling to occur). 2.2 Compilation of anytime algorithms The focus of Russell and Zilberstein work <ref> [ Russell and Zilberstein, 1991, Zilberstein, 1993 ] </ref> is based on structuring a computation as the combination of anytime algorithms, where the results of a set of anytime algorithms are inputs to another anytime algorithm. <p> Zilberstein <ref> [ Russell and Zilberstein, 1991, Zilberstein, 1993 ] </ref> describes several algorithms for compiling anytime algorithms. <p> Local compilation involves optimizing the quality of an anytime algorithm by considering only the performance profiles of the anytime algorithms that produce its inputs. Local compilation is analogous to the KNAPSACK problem, which has known pseudo-polynomial time solutions <ref> [ Zilberstein, 1993 ] </ref> . Pseudo-polynomial time solutions are available for local compilation under the assumption that the tree has bounded degree, (i.e., the number of inputs to each anytime algorithm is bounded). <p> Examples of work that avoid this limitation include systems-oriented work on scheduling that incorporates resources [ Zhao et al., 1987 ] , compilation of anytime algorithms <ref> [ Zilberstein, 1993 ] </ref> , and design-to-time scheduling [ Garvey et al., 1993 ] . anytime algorithmsSome work in both systems-oriented [ Liu et al., 1991b ] and AI real-time [ Dean and Boddy, 1988, Russell and Zilberstein, 1991 ] assumes that many or all problems are to be solved using <p> It is probable that not all problems have anytime algorithm solutions. The expected advantages of anytime algorithms are that they respond gracefully to unpredictability and provide acceptable solutions quickly in time-constrained situations. One step in the direction of avoiding the construction problem is Zilberstein's work on compiling anytime algorithms <ref> [ Zilberstein, 1993 ] </ref> that shows how composite anytime algorithms can be constructed from simpler anytime algorithms. soft deadlinesSome of the work in real-time AI assumes that deadlines are soft (i.e., it is okay to finish work after a deadline), and that missing any particular deadline is not catastrophic (i.e., some
References-found: 56

