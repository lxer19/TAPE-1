URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1998/tr-98-023.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1998.html
Root-URL: http://www.icsi.berkeley.edu
Title: Efficient Dynamic Embeddings of Binary Trees into Hypercubes  
Phone: (510) 643-9153 FAX (510) 643-7684  
Author: Volker Heun Ernst W. Mayr 
Date: August 1998  
Address: I 1947 Center St. Suite 600 Berkeley, California 94704-1198  D-80290 Munchen, Germany  
Affiliation: INTERNATIONAL COMPUTER SCIENCE INSTITUTE  Institut fur Informatik der TU Munchen,  
Pubnum: TR-98-023  
Abstract: In this paper, a deterministic algorithm for dynamically embedding binary trees into hypercubes is presented. Because of a known lower bound, any such algorithm must use either randomization or migration, i.e., remapping of tree vertices, to obtain an embedding of trees into hypercubes with small dilation, load, and expansion simultaneously. Using migration of previously mapped tree vertices, the presented algorithm constructs a dynamic embedding which achieves dilation of at most 9, unit load, nearly optimal expansion, and constant edge- and node-congestion. This is the first dynamic embedding that achieves these bounds simultaneously. Moreover, the embedding can be computed efficiently on the hypercube itself. The amortized time for each spawning step is bounded by O(log 2 (L)), if in each step at most L new leaves are spawned. From this construction, a dynamic embedding of large binary trees into hypercubes is derived which achieves dilation of at most 6 and nearly optimal load. Similarly, this embedding can be constructed with nearly optimal load on the hypercube itself in amortized time O( log 2 (L=)) per spawning step, if in each step at most L new leaves are added. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. E. Batcher: </author> <title> Sorting Networks and Their Applications, </title> <booktitle> Proc. of the AFIPS Spring Joint Computer Conference, </booktitle> <volume> 32, </volume> <pages> 307-314, </pages> <year> 1968. </year>
Reference-contexts: If we recompute the a subtree of height ff log 4 (L), it is necessary to update the linearly stored Euler contour path. Note that spawning a new leaf corresponds to a insertion of three consecutive list vertices in the Euler contour path. Using Batcher's sort <ref> [1, 24] </ref>, the information about the newly spawned vertices can be easily routed within the subcube from the spawning parents to its corresponding list vertices in the Euler contour path in time O (log 2 (L)).
Reference: [2] <author> S. Bezrukov, B. Monien, W. Unger, G. Wechsung: </author> <title> Embedding Ladders and Caterpillars into the Hypercube, </title> <journal> Disc. Appl. Math. </journal> <volume> 82(1998), </volume> <pages> 19-27. </pages>
Reference-contexts: In general, the communication structure of a parallel algorithm can be very irregular. Embeddings of such irregular graphs, like binary trees, caterpillars, graphs with bounded treewidth, have also been studied in, e.g., <ref> [2, 5, 6, 14, 15, 16, 17, 18, 20, 23] </ref>. For arbitrary binary trees, one-to-one embeddings into their optimal hypercubes with constant dilation have been constructed in [5, 6, 17, 23].
Reference: [3] <author> S. Bhatt, J.-Y. Cai: </author> <title> Take a Walk, Grow a Tree, </title> <booktitle> Proc. of the 29th Symp. on Foundations of Computer Science, </booktitle> <pages> 469-478, </pages> <year> 1988. </year>
Reference-contexts: These embeddings achieve dilation 2, unit load, and unit congestion, while the running time is constant for each new level of leaves. A first challenge of dynamically embedding arbitrary binary trees into hypercubes was the work in <ref> [3, 4] </ref>. It presents a randomized algorithm for embedding binary trees into hypercubes with dilation O (loglog (n)) and, with 1 high probability, constant load.
Reference: [4] <author> S. Bhatt, J.-Y. Cai: </author> <title> Taking Random Walks to Grow Trees in Hypercubes, </title> <editor> J. </editor> <booktitle> ACM , 40(1993), </booktitle> <pages> 741-764. </pages>
Reference-contexts: These embeddings achieve dilation 2, unit load, and unit congestion, while the running time is constant for each new level of leaves. A first challenge of dynamically embedding arbitrary binary trees into hypercubes was the work in <ref> [3, 4] </ref>. It presents a randomized algorithm for embedding binary trees into hypercubes with dilation O (loglog (n)) and, with 1 high probability, constant load.
Reference: [5] <author> S. Bhatt, F. Chung, T. Leighton, A. Rosenberg: </author> <title> Optimal Simulations of Tree Machines, </title> <booktitle> Proc. of the 27th Symp. on Foundations of Computer Science, </booktitle> <pages> 274-282, </pages> <year> 1986. </year>
Reference-contexts: In general, the communication structure of a parallel algorithm can be very irregular. Embeddings of such irregular graphs, like binary trees, caterpillars, graphs with bounded treewidth, have also been studied in, e.g., <ref> [2, 5, 6, 14, 15, 16, 17, 18, 20, 23] </ref>. For arbitrary binary trees, one-to-one embeddings into their optimal hypercubes with constant dilation have been constructed in [5, 6, 17, 23]. <p> Embeddings of such irregular graphs, like binary trees, caterpillars, graphs with bounded treewidth, have also been studied in, e.g., [2, 5, 6, 14, 15, 16, 17, 18, 20, 23]. For arbitrary binary trees, one-to-one embeddings into their optimal hypercubes with constant dilation have been constructed in <ref> [5, 6, 17, 23] </ref>. The embedding given in [17] yields dilation 8 and constant node-congestion, which is the best known bound on the dilation. Furthermore, this embedding can be efficiently computed on the hypercube itself.
Reference: [6] <author> S. Bhatt, F. Chung, T. Leighton, A. Rosenberg: </author> <title> Efficient Embeddings of Trees in Hypercubes, </title> <journal> SIAM J. Comput., </journal> <volume> 21(1992), </volume> <pages> 151-162. </pages>
Reference-contexts: In general, the communication structure of a parallel algorithm can be very irregular. Embeddings of such irregular graphs, like binary trees, caterpillars, graphs with bounded treewidth, have also been studied in, e.g., <ref> [2, 5, 6, 14, 15, 16, 17, 18, 20, 23] </ref>. For arbitrary binary trees, one-to-one embeddings into their optimal hypercubes with constant dilation have been constructed in [5, 6, 17, 23]. <p> Embeddings of such irregular graphs, like binary trees, caterpillars, graphs with bounded treewidth, have also been studied in, e.g., [2, 5, 6, 14, 15, 16, 17, 18, 20, 23]. For arbitrary binary trees, one-to-one embeddings into their optimal hypercubes with constant dilation have been constructed in <ref> [5, 6, 17, 23] </ref>. The embedding given in [17] yields dilation 8 and constant node-congestion, which is the best known bound on the dilation. Furthermore, this embedding can be efficiently computed on the hypercube itself.
Reference: [7] <author> S. Bhatt, I. Ipsen: </author> <title> How to Embed Trees in Hypercubes, </title> <institution> Yale University Research Report RR-443, </institution> <year> 1985. </year>
Reference-contexts: Embeddings of graphs with a regular structure, like rings, (multidimensional) grids, complete trees, binomial trees, pyramids, X-trees, meshes of trees and so on, have been investigated by numerous researchers, see, e.g., <ref> [7, 8, 9, 10, 11, 25, 27, 28, 29] </ref>. In general, the communication structure of a parallel algorithm can be very irregular. <p> This conjecture is still open. In terms of lower bounds, a simple parity argument shows that the complete binary tree of size 2 d 1 cannot be a subgraph of the d-dimensional hypercube, see <ref> [7, 25, 29] </ref>. All these embeddings are constructed as static embeddings, which means that the whole information about the structure of the guest graph has to be known in advance.
Reference: [8] <author> M.Y. Chan: </author> <title> Embedding of d-Dimensional Grids into Optimal Hypercubes, </title> <booktitle> Proc. of the 1989 Symp. on Parallel Algorithms and Architectures, </booktitle> <pages> 52-57. </pages>
Reference-contexts: Embeddings of graphs with a regular structure, like rings, (multidimensional) grids, complete trees, binomial trees, pyramids, X-trees, meshes of trees and so on, have been investigated by numerous researchers, see, e.g., <ref> [7, 8, 9, 10, 11, 25, 27, 28, 29] </ref>. In general, the communication structure of a parallel algorithm can be very irregular.
Reference: [9] <author> M.Y. Chan: </author> <title> Embedding of Grids into Optimal Hypercubes, </title> <journal> SIAM J. Comput., </journal> <volume> 20(1991), </volume> <pages> 834-864. </pages>
Reference-contexts: Embeddings of graphs with a regular structure, like rings, (multidimensional) grids, complete trees, binomial trees, pyramids, X-trees, meshes of trees and so on, have been investigated by numerous researchers, see, e.g., <ref> [7, 8, 9, 10, 11, 25, 27, 28, 29] </ref>. In general, the communication structure of a parallel algorithm can be very irregular.
Reference: [10] <author> M. Chan, F. Chin, C. Chu, W. Mak: </author> <title> Dilation-5 Embedding of 3-Dimensional Grids into Hypercubes, </title> <journal> J. Parallel Distrib. Comput., </journal> <volume> 33(1996), </volume> <pages> 98-106. </pages>
Reference-contexts: Embeddings of graphs with a regular structure, like rings, (multidimensional) grids, complete trees, binomial trees, pyramids, X-trees, meshes of trees and so on, have been investigated by numerous researchers, see, e.g., <ref> [7, 8, 9, 10, 11, 25, 27, 28, 29] </ref>. In general, the communication structure of a parallel algorithm can be very irregular.
Reference: [11] <author> K. Efe: </author> <title> Embedding Mesh of Trees in the Hypercube, </title> <journal> J. Parallel Distrib. Comput., </journal> <volume> 11(1991), </volume> <pages> 222-230. </pages>
Reference-contexts: Embeddings of graphs with a regular structure, like rings, (multidimensional) grids, complete trees, binomial trees, pyramids, X-trees, meshes of trees and so on, have been investigated by numerous researchers, see, e.g., <ref> [7, 8, 9, 10, 11, 25, 27, 28, 29] </ref>. In general, the communication structure of a parallel algorithm can be very irregular.
Reference: [12] <author> T. Feder, E. Mayr: </author> <title> An Efficient Algorithm for Embedding Complete Binary Trees in the Hypercube, </title> <institution> Stanford University, </institution> <year> 1987. </year>
Reference-contexts: For arbitrary binary trees, it has been proved that dynamic embeddings cannot be constructed with high quality if neither randomization nor migration, i.e., remapping of tree vertices, is allowed [21, 22]. For embedding complete binary trees dynamically into optimal hypercubes, optimal deterministic algorithms have been presented in <ref> [12, 19] </ref>. These embeddings achieve dilation 2, unit load, and unit congestion, while the running time is constant for each new level of leaves. A first challenge of dynamically embedding arbitrary binary trees into hypercubes was the work in [3, 4].
Reference: [13] <author> C. Goldberg, D. West: </author> <title> Bisection of Circle Colorings, </title> <journal> SIAM J. Alg. Disc. Math., </journal> <volume> 6(1985), </volume> <pages> 93-106. </pages>
Reference: [14] <author> I. </author> <title> Havel: On Hamiltonian Circuits and Spanning Trees of Hypercubes (in Czech.), </title> <journal> Casopis. Pest. Mat., </journal> <volume> 109(1984), </volume> <pages> 145-152. </pages>
Reference-contexts: In general, the communication structure of a parallel algorithm can be very irregular. Embeddings of such irregular graphs, like binary trees, caterpillars, graphs with bounded treewidth, have also been studied in, e.g., <ref> [2, 5, 6, 14, 15, 16, 17, 18, 20, 23] </ref>. For arbitrary binary trees, one-to-one embeddings into their optimal hypercubes with constant dilation have been constructed in [5, 6, 17, 23]. <p> The embedding given in [17] yields dilation 8 and constant node-congestion, which is the best known bound on the dilation. Furthermore, this embedding can be efficiently computed on the hypercube itself. In <ref> [14] </ref>, Havel has conjectured that every binary tree has a one-to-one embedding into its optimal hypercube with dilation at most 2. This conjecture is still open.
Reference: [15] <author> I. Havel, P. Liebl: </author> <title> Embedding the Polytomic Tree into the n-Cube, </title> <journal> Casopis. Pest. Mat., </journal> <volume> 98(1973), </volume> <pages> 307-314. 31 </pages>
Reference-contexts: In general, the communication structure of a parallel algorithm can be very irregular. Embeddings of such irregular graphs, like binary trees, caterpillars, graphs with bounded treewidth, have also been studied in, e.g., <ref> [2, 5, 6, 14, 15, 16, 17, 18, 20, 23] </ref>. For arbitrary binary trees, one-to-one embeddings into their optimal hypercubes with constant dilation have been constructed in [5, 6, 17, 23].
Reference: [16] <editor> I. Havel, P. Liebl: One-Legged Caterpillars Span Hypercubes, J. </editor> <booktitle> Graph Theory, 10 (1986), </booktitle> <pages> 69-76. </pages>
Reference-contexts: In general, the communication structure of a parallel algorithm can be very irregular. Embeddings of such irregular graphs, like binary trees, caterpillars, graphs with bounded treewidth, have also been studied in, e.g., <ref> [2, 5, 6, 14, 15, 16, 17, 18, 20, 23] </ref>. For arbitrary binary trees, one-to-one embeddings into their optimal hypercubes with constant dilation have been constructed in [5, 6, 17, 23].
Reference: [17] <author> V. Heun, E. Mayr: </author> <title> A New Efficient Algorithm for Embedding an Arbitrary Binary Tree into Its Optimal Hypercube, </title> <journal> J. Algorithms, </journal> <volume> 20(1996), </volume> <pages> 375-199. </pages>
Reference-contexts: In general, the communication structure of a parallel algorithm can be very irregular. Embeddings of such irregular graphs, like binary trees, caterpillars, graphs with bounded treewidth, have also been studied in, e.g., <ref> [2, 5, 6, 14, 15, 16, 17, 18, 20, 23] </ref>. For arbitrary binary trees, one-to-one embeddings into their optimal hypercubes with constant dilation have been constructed in [5, 6, 17, 23]. <p> Embeddings of such irregular graphs, like binary trees, caterpillars, graphs with bounded treewidth, have also been studied in, e.g., [2, 5, 6, 14, 15, 16, 17, 18, 20, 23]. For arbitrary binary trees, one-to-one embeddings into their optimal hypercubes with constant dilation have been constructed in <ref> [5, 6, 17, 23] </ref>. The embedding given in [17] yields dilation 8 and constant node-congestion, which is the best known bound on the dilation. Furthermore, this embedding can be efficiently computed on the hypercube itself. <p> For arbitrary binary trees, one-to-one embeddings into their optimal hypercubes with constant dilation have been constructed in [5, 6, 17, 23]. The embedding given in <ref> [17] </ref> yields dilation 8 and constant node-congestion, which is the best known bound on the dilation. Furthermore, this embedding can be efficiently computed on the hypercube itself. In [14], Havel has conjectured that every binary tree has a one-to-one embedding into its optimal hypercube with dilation at most 2. <p> Thus, the average dilation of the embedding is at least 1 M M6 1 1 4 Review of the Static Embedding In this section, we review the main results stated in <ref> [17] </ref> which are needed for our construction of a dynamic embedding. The details of the embedding are slightly different from [17] in order to obtain a presentation more suitable for our purposes. 4 4.1 Definition of a (h; o; t )-Tree To construct our embedding, we use the data structure of <p> the average dilation of the embedding is at least 1 M M6 1 1 4 Review of the Static Embedding In this section, we review the main results stated in <ref> [17] </ref> which are needed for our construction of a dynamic embedding. The details of the embedding are slightly different from [17] in order to obtain a presentation more suitable for our purposes. 4 4.1 Definition of a (h; o; t )-Tree To construct our embedding, we use the data structure of a (h; o; t )-tree. <p> The number o can be chosen as 3. Using local modifications of the mapping, we can then reduce the dilation to 9. The dilation given here is greater than in <ref> [17] </ref>, where we achieve dilation 8, but it yields a simpler description for our dynamic embedding. Now, we are ready to describe the embedding of an arbitrary binary tree into a (h; o; t )-tree. The embedding proceeds in h=fi (log (n)) stages. <p> Using this lemma, a sophisticated analysis shows that the load of each (h; o; t )-tree node is bounded by its capacity. For more details on the bound of the dilation of the static embedding, we refer to <ref> [17] </ref>. However, based on Lemma 8, we will prove later that our dynamic embedding achieves dilation of at most 9. 4.4 Complexity of the Static Embedding As shown in [17], the partition of a forest of binary trees as stated in Lemma 8 can be computed efficiently on the hypercube. <p> For more details on the bound of the dilation of the static embedding, we refer to <ref> [17] </ref>. However, based on Lemma 8, we will prove later that our dynamic embedding achieves dilation of at most 9. 4.4 Complexity of the Static Embedding As shown in [17], the partition of a forest of binary trees as stated in Lemma 8 can be computed efficiently on the hypercube. Based on this efficient construction of the partition, efficient algorithms for embedding binary trees has been developed in [17]. 8 Theorem 9 ([17]) Let F =(V; E) be a forest <p> most 9. 4.4 Complexity of the Static Embedding As shown in <ref> [17] </ref>, the partition of a forest of binary trees as stated in Lemma 8 can be computed efficiently on the hypercube. Based on this efficient construction of the partition, efficient algorithms for embedding binary trees has been developed in [17]. 8 Theorem 9 ([17]) Let F =(V; E) be a forest of binary trees of size n. There exists a one-to-one embedding of F into its optimal hypercube with dilation at most 9 and constant node-congestion. <p> Using these notations, we are able to state the following theorem proved in <ref> [17] </ref>. Theorem 10 ([17]) Let F =(V; E) be a forest of binary trees of size n. There exists a one-to-one embedding of F into its optimal hypercube with dilation at most 9 and constant node-congestion. <p> Until now, we have specified the mapping of the vertices only. As mentioned earlier, it is necessary to specify also the paths connecting the images of endpoints of all edges to obtain a small node-congestion. For the details, we refer the reader to <ref> [17] </ref>, because the construction is the same as in the case of static embeddings. The choice of the paths is quite simple although its analysis is lengthy and tedious. Note that the expansion of this embedding is less than 2 and, therefore, optimal. <p> First, we determine the running time for our static embedding algorithm under the assumption that the considered tree is larger than the used hypercube. A closer inspection of the construction in <ref> [17] </ref> shows that the static embedding of a binary tree of size M on a hypercube of size N can be computed in time O (M=N log 3 (N )).
Reference: [18] <author> V. Heun, E. Mayr: </author> <title> Embedding Graphs with Bounded Treewidth into Optimal Hypercubes, </title> <booktitle> Proc. of the 13th Symp. on Theoretical Aspects of Computer Science, </booktitle> <volume> LNCS 1046, </volume> <pages> 157-168, </pages> <year> 1996. </year>
Reference-contexts: In general, the communication structure of a parallel algorithm can be very irregular. Embeddings of such irregular graphs, like binary trees, caterpillars, graphs with bounded treewidth, have also been studied in, e.g., <ref> [2, 5, 6, 14, 15, 16, 17, 18, 20, 23] </ref>. For arbitrary binary trees, one-to-one embeddings into their optimal hypercubes with constant dilation have been constructed in [5, 6, 17, 23].
Reference: [19] <author> V. Heun, E. Mayr: </author> <title> Optimal Dynamic Edge-Disjoint Embeddings of Complete Binary Trees into Hypercubes, </title> <booktitle> Proc. of the 4th Workshop on Parallel Systems and Algorithms, </booktitle> <pages> 195-209, </pages> <year> 1996. </year>
Reference-contexts: For arbitrary binary trees, it has been proved that dynamic embeddings cannot be constructed with high quality if neither randomization nor migration, i.e., remapping of tree vertices, is allowed [21, 22]. For embedding complete binary trees dynamically into optimal hypercubes, optimal deterministic algorithms have been presented in <ref> [12, 19] </ref>. These embeddings achieve dilation 2, unit load, and unit congestion, while the running time is constant for each new level of leaves. A first challenge of dynamically embedding arbitrary binary trees into hypercubes was the work in [3, 4].
Reference: [20] <author> V. Heun, E. Mayr: </author> <title> A General Method for Efficient Embeddings of Graphs into Optimal Hypercubes, </title> <booktitle> Proc. of the 2nd International Euro-Par Conference on Parallel Processing, </booktitle> <volume> Vol. I, LNCS 1123, </volume> <pages> 222-233, </pages> <year> 1996. </year>
Reference-contexts: In general, the communication structure of a parallel algorithm can be very irregular. Embeddings of such irregular graphs, like binary trees, caterpillars, graphs with bounded treewidth, have also been studied in, e.g., <ref> [2, 5, 6, 14, 15, 16, 17, 18, 20, 23] </ref>. For arbitrary binary trees, one-to-one embeddings into their optimal hypercubes with constant dilation have been constructed in [5, 6, 17, 23].
Reference: [21] <author> T. Leighton, M. Newman, A. Ranade, W. Schwabe: </author> <title> Dynamic Tree Embeddings in Butterflies and Hypercubes, </title> <booktitle> Proc. of the 1989 Symp. on Parallel Algorithms and Architectures, </booktitle> <pages> 224-234. </pages>
Reference-contexts: Moreover, it might be impossible to construct dynamic embeddings deterministically with high quality. For arbitrary binary trees, it has been proved that dynamic embeddings cannot be constructed with high quality if neither randomization nor migration, i.e., remapping of tree vertices, is allowed <ref> [21, 22] </ref>. For embedding complete binary trees dynamically into optimal hypercubes, optimal deterministic algorithms have been presented in [12, 19]. These embeddings achieve dilation 2, unit load, and unit congestion, while the running time is constant for each new level of leaves. <p> A first challenge of dynamically embedding arbitrary binary trees into hypercubes was the work in [3, 4]. It presents a randomized algorithm for embedding binary trees into hypercubes with dilation O (loglog (n)) and, with 1 high probability, constant load. This was improved in <ref> [21, 22] </ref>, where a randomized algorithm for embedding binary trees into hypercubes with dilation 8 and, with high probability, constant load was explored. The edge-congestion of the embedding is constant, whereas its node-congestion is fi (log (n)). <p> Remarkably, the quality of our dynamic embedding improves all previously known results and is the first algorithm which achieves nearly optimal values for all measures of the quality of an embedding. In particular, compared to <ref> [21, 22] </ref>, our extended construction yields a dynamic embedding with dilation of at most 6, constant node-congestion, and a small nearly optimal load. The remainder of this paper is organized as follows. First, we recall some basic definitions and notations which we will use later. <p> This was first proved in <ref> [21, 22] </ref> for embeddings with load greater than one: Theorem 1 ([21, 22]) Any deterministic algorithm for dynamically embedding binary trees of size M into a hypercube of size N M that achieves load cM=N and does not use migration must have average dilation ((log (N )) 1 In fact, the <p> Using the same technique as in <ref> [21, 22] </ref>, the following theorem concerning one-to-one embeddings into hypercubes can be proved.
Reference: [22] <author> T. Leighton, M. Newman, A. Ranade, W. Schwabe: </author> <title> Dynamic Tree Embeddings in Butterflies and Hypercubes, </title> <journal> SIAM J. Comput., </journal> <volume> 21(1992), </volume> <pages> 639-654. </pages>
Reference-contexts: Moreover, it might be impossible to construct dynamic embeddings deterministically with high quality. For arbitrary binary trees, it has been proved that dynamic embeddings cannot be constructed with high quality if neither randomization nor migration, i.e., remapping of tree vertices, is allowed <ref> [21, 22] </ref>. For embedding complete binary trees dynamically into optimal hypercubes, optimal deterministic algorithms have been presented in [12, 19]. These embeddings achieve dilation 2, unit load, and unit congestion, while the running time is constant for each new level of leaves. <p> A first challenge of dynamically embedding arbitrary binary trees into hypercubes was the work in [3, 4]. It presents a randomized algorithm for embedding binary trees into hypercubes with dilation O (loglog (n)) and, with 1 high probability, constant load. This was improved in <ref> [21, 22] </ref>, where a randomized algorithm for embedding binary trees into hypercubes with dilation 8 and, with high probability, constant load was explored. The edge-congestion of the embedding is constant, whereas its node-congestion is fi (log (n)). <p> Remarkably, the quality of our dynamic embedding improves all previously known results and is the first algorithm which achieves nearly optimal values for all measures of the quality of an embedding. In particular, compared to <ref> [21, 22] </ref>, our extended construction yields a dynamic embedding with dilation of at most 6, constant node-congestion, and a small nearly optimal load. The remainder of this paper is organized as follows. First, we recall some basic definitions and notations which we will use later. <p> This was first proved in <ref> [21, 22] </ref> for embeddings with load greater than one: Theorem 1 ([21, 22]) Any deterministic algorithm for dynamically embedding binary trees of size M into a hypercube of size N M that achieves load cM=N and does not use migration must have average dilation ((log (N )) 1 In fact, the <p> Using the same technique as in <ref> [21, 22] </ref>, the following theorem concerning one-to-one embeddings into hypercubes can be proved. <p> The algorithm can be implemented on the hypercube itself spending amortized time O (log 2 (L)) if in each step at most L new children are inserted. The necessity of the migration of tree vertices follows from a simple adaptation of a lower bound given in <ref> [22] </ref>. We also have demonstrated how our construction can be used to obtain dynamic em-beddings of large binary trees with high load. The dilation of the embedding decreases to 6 while the load is nearly optimal. Again, this embedding can be constructed on the used hypercube efficiently.
Reference: [23] <author> B. Monien, H. Sudborough: </author> <title> Simulating Binary Trees on Hypercubes, </title> <booktitle> Proc. of the 3rd Aegean Workshop on Computing , LNCS 319, </booktitle> <pages> 170-180, </pages> <year> 1988. </year>
Reference-contexts: In general, the communication structure of a parallel algorithm can be very irregular. Embeddings of such irregular graphs, like binary trees, caterpillars, graphs with bounded treewidth, have also been studied in, e.g., <ref> [2, 5, 6, 14, 15, 16, 17, 18, 20, 23] </ref>. For arbitrary binary trees, one-to-one embeddings into their optimal hypercubes with constant dilation have been constructed in [5, 6, 17, 23]. <p> Embeddings of such irregular graphs, like binary trees, caterpillars, graphs with bounded treewidth, have also been studied in, e.g., [2, 5, 6, 14, 15, 16, 17, 18, 20, 23]. For arbitrary binary trees, one-to-one embeddings into their optimal hypercubes with constant dilation have been constructed in <ref> [5, 6, 17, 23] </ref>. The embedding given in [17] yields dilation 8 and constant node-congestion, which is the best known bound on the dilation. Furthermore, this embedding can be efficiently computed on the hypercube itself.
Reference: [24] <author> D. Nassimi and S. Sahni: </author> <title> Parallel permutation and sorting algorithms and a new generalized connection network. </title> <journal> J. ACM, </journal> <volume> 29(1982), </volume> <pages> 642-667. </pages>
Reference-contexts: If we recompute the a subtree of height ff log 4 (L), it is necessary to update the linearly stored Euler contour path. Note that spawning a new leaf corresponds to a insertion of three consecutive list vertices in the Euler contour path. Using Batcher's sort <ref> [1, 24] </ref>, the information about the newly spawned vertices can be easily routed within the subcube from the spawning parents to its corresponding list vertices in the Euler contour path in time O (log 2 (L)).
Reference: [25] <author> Y. Saad, M. Schulz: </author> <title> Topological Properties of the Hypercube, </title> <institution> Yale University Research Report RR-389, </institution> <year> 1985. </year>
Reference-contexts: Embeddings of graphs with a regular structure, like rings, (multidimensional) grids, complete trees, binomial trees, pyramids, X-trees, meshes of trees and so on, have been investigated by numerous researchers, see, e.g., <ref> [7, 8, 9, 10, 11, 25, 27, 28, 29] </ref>. In general, the communication structure of a parallel algorithm can be very irregular. <p> This conjecture is still open. In terms of lower bounds, a simple parity argument shows that the complete binary tree of size 2 d 1 cannot be a subgraph of the d-dimensional hypercube, see <ref> [7, 25, 29] </ref>. All these embeddings are constructed as static embeddings, which means that the whole information about the structure of the guest graph has to be known in advance.
Reference: [26] <author> J. Schwartz: </author> <title> Ultracomputers. </title> <journal> ACM Trans. Program. Lang. Syst., </journal> <volume> 2(1980), </volume> <pages> 484-521. </pages>
Reference-contexts: Using Batcher's sort [1, 24], the information about the newly spawned vertices can be easily routed within the subcube from the spawning parents to its corresponding list vertices in the Euler contour path in time O (log 2 (L)). Using parallel prefix operations <ref> [26] </ref>, the modified Euler contour path can be restored linearly in time O (log (L)). Thus, the remapping after each spawning step can be done in time O (log 2 (L)).
Reference: [27] <author> X. Sheen, Q. Hu, W. Liang: </author> <title> Embedding k-ary Complete Trees into Hypercubes, </title> <journal> J. Parallel Distrib. Comput., </journal> <volume> 24(1995), </volume> <pages> 100-106. </pages>
Reference-contexts: Embeddings of graphs with a regular structure, like rings, (multidimensional) grids, complete trees, binomial trees, pyramids, X-trees, meshes of trees and so on, have been investigated by numerous researchers, see, e.g., <ref> [7, 8, 9, 10, 11, 25, 27, 28, 29] </ref>. In general, the communication structure of a parallel algorithm can be very irregular.
Reference: [28] <author> Q. Stout: </author> <title> Hypercubes and Pyramids, </title> <booktitle> Proc. of the NATO Advanced Research Workshop on Pyramidal Systems for Computer Vision 1986, </booktitle> <pages> 75-89. </pages>
Reference-contexts: Embeddings of graphs with a regular structure, like rings, (multidimensional) grids, complete trees, binomial trees, pyramids, X-trees, meshes of trees and so on, have been investigated by numerous researchers, see, e.g., <ref> [7, 8, 9, 10, 11, 25, 27, 28, 29] </ref>. In general, the communication structure of a parallel algorithm can be very irregular.
Reference: [29] <author> A. Wu: </author> <title> Embedding of Tree Networks into Hypercubes, </title> <journal> J. Parallel Distrib. Com-put., </journal> <volume> 2(1985), </volume> <pages> 238-249. 32 </pages>
Reference-contexts: Embeddings of graphs with a regular structure, like rings, (multidimensional) grids, complete trees, binomial trees, pyramids, X-trees, meshes of trees and so on, have been investigated by numerous researchers, see, e.g., <ref> [7, 8, 9, 10, 11, 25, 27, 28, 29] </ref>. In general, the communication structure of a parallel algorithm can be very irregular. <p> This conjecture is still open. In terms of lower bounds, a simple parity argument shows that the complete binary tree of size 2 d 1 cannot be a subgraph of the d-dimensional hypercube, see <ref> [7, 25, 29] </ref>. All these embeddings are constructed as static embeddings, which means that the whole information about the structure of the guest graph has to be known in advance.
References-found: 29

