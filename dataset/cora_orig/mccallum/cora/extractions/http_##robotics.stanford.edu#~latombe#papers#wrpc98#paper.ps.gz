URL: http://robotics.stanford.edu/~latombe/papers/wrpc98/paper.ps.gz
Refering-URL: http://robotics.stanford.edu/~dyhsu/publications.html
Root-URL: http://www.cs.stanford.edu
Title: 1 CAPTURING THE CONNECTIVITY OF HIGH-DIMENSIONAL GEOMETRIC SPACES BY PARALLELIZABLE RANDOM SAMPLING TECHNIQUES  
Author: David Hsu Lydia E. Kavraki Jean-Claude Latombe and Rajeev Motwani 
Address: Stanford, CA 94305, USA.  Houston, TX 77005, USA.  
Affiliation: Computer Science Department, Stanford University,  Computer Science Department, Rice University,  
Abstract: Applications such as robot programming, design for manufacturing, animation of digital actors, rationale drug design, and surgical planning, require computing paths in high-dimensional geometric spaces, a provably hard problem. Recently, a general path-planning approach based on a parallelizable random sampling scheme has emerged as an effective approach to solve this problem. In this approach, the path planner captures the connectivity of a space F by building a probabilistic roadmap, a network of simple paths connecting points picked at random in F . This paper combines results previously presented in separate papers. It describes a basic probabilistic roadmap planner that is easily parallelizable, and it analyzes the performance of this planner as a function of how well F satisfies geometric properties called *-goodness, expansiveness, and path clearance. While *-goodness allows us to study how well a probabilistic roadmap covers F , expansiveness and path clearance allow us to compare the connectivity of the roadmap to that of F . 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Akl. </author> <title> Parallel Computation: Models and Methods, </title> <publisher> Prentice Hall, </publisher> <address> Engle-wood Cliffs, NJ, </address> <year> 1997. </year>
Reference-contexts: Figure 1.2 shows several snapshots of a path computed by the planner in [21] for a digital actor; only the configurations in the first and last snapshots where given to the planner. 1.2 BASIC PROBABILISTIC ROADMAP PLANNER For simplification, we assume that the configuration space C is the Euclidean hyper-cube <ref> [0; 1] </ref> n . We say that two free configurations see each other if they can be connected by a straight-line path in the free space F . The basic PRM is a simplified version of the planner described in [20]. <p> The milestones are chosen at Step 1. The links between milestones are created at Step 2. Recall that dist (q) is a procedure that computes the Euclidean distance between the robot placed at q and the obstacles. Step 1 generates each milestone by picking successive configurations q in <ref> [0; 1] </ref> n , until one satisfies dist (q) &gt; 0. Every q is obtained by choosing each of its coordinates uniformly at random in [0; 1]. <p> Step 1 generates each milestone by picking successive configurations q in <ref> [0; 1] </ref> n , until one satisfies dist (q) &gt; 0. Every q is obtained by choosing each of its coordinates uniformly at random in [0; 1]. Step 2 checks the straight path between every two milestones for collision, by recursively decomposing it into two half segments and invoking dist at each segment endpoint. <p> Note that the selection and connections of milestones requires no interprocessor communication. However, some interpro-cessor communication is needed to compute the connected components of the resulting roadmap. The latter problem is well studied in the parallel processing literature and a discussion can be found in <ref> [1] </ref>. We simply note here that the computation of the roadmap components is far less expensive than the computation of the connections among the milestones and cannot significantly affect the overall scaling of our approach. As far as message passing architectures are concerned, several schemes are possible. <p> In the n-D version of this example, two hyper-cubes, each having volume W n , are connected by a hyper-parallelepipedic passage that has size w along k dimensions (k 2 <ref> [1; n 1] </ref>) and size W along the n k other dimensions. Each of the parameters *, ff, and fi is on the order of (w=W ) k . <p> While Theorem 4 suggests that the number of milestones increases as w n , Theorem 3 tells us that it only increases as w k , where k 2 <ref> [1; n 1] </ref> is the number of dimensions along which the passage is narrow. As another instance, consider the case where F is punctured by many holes uniformly distributed in a region of C (Figure 1.7). <p> Let designate the infimum of the Euclidean distance between t (u) and the boundary of F , when u spans the interval <ref> [0; 1] </ref>. Given any two configurations q = t (u) and q 0 = t (u 0 ) on t , let l (q; q 0 ) denote the path length ju u 0 j.
Reference: [2] <author> N. Amato, O.B. Bayazit, L.K. Dale, C. Jones, and D. Vallejo. OBPRM: </author> <title> An Obstacle-Based PRM for 3D Workspaces. </title> <booktitle> Proc. Workshop on Algorithmic Foundations of Robotics (WAFR), </booktitle> <address> Houston, TX, </address> <month> March </month> <year> 1998. </year> <month> 22 </month>
Reference-contexts: By first widening the narrow passages in F , this strategy allows the planner to find paths through such passages more efficiently than a single-step strategy. Another multi-stage strategy is proposed in <ref> [2] </ref> which allows milestones to be connected by multiple types of paths. "Difficult" regions of the free space tend to lie close to F 's boundary.
Reference: [3] <author> N. Amato, and Y. Wu. </author> <title> A Randomized Roadmap Method for Path and Manipulation Planning. </title> <booktitle> Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <address> Minneapolis, MN, </address> <pages> pp. 113-120, </pages> <year> 1996 </year>
Reference-contexts: Given any pair of query configurations, the planner tries to connect each query configuration to a milestone of R. It outputs a path if it connects the two configurations to milestones in the same connected component of R. A number of probabilistic roadmap planners (PRMs) have been proposed <ref> [3, 4, 5, 14, 12, 17, 20, 29, 32] </ref>. None of them is complete in the strongest sense, but most achieve some form of probabilistic completeness, i.e., if a path exists, the planner will find one with high probability after some amount of computation. <p> For that reason, a number of papers propose sampling strategies that are directly aimed at generating a greater density of milestones near the boundary of the free space. In <ref> [3] </ref>, when a configuration q is generated outside F , a number of rays are shot from q along random directions uniformly distributed in C. For each ray, a binary search is used to identify a point near the boundary of F .
Reference: [4] <author> J. Barraquand, L.E. Kavraki, J.C. Latombe, T.Y. Li, R. Motwani, and P. Raghavan. </author> <title> A Random Sampling Scheme for Path Planning. </title> <journal> Int. J. of Robotics Research, </journal> <volume> 16(6) </volume> <pages> 759-774, </pages> <year> 1997. </year>
Reference-contexts: Given any pair of query configurations, the planner tries to connect each query configuration to a milestone of R. It outputs a path if it connects the two configurations to milestones in the same connected component of R. A number of probabilistic roadmap planners (PRMs) have been proposed <ref> [3, 4, 5, 14, 12, 17, 20, 29, 32] </ref>. None of them is complete in the strongest sense, but most achieve some form of probabilistic completeness, i.e., if a path exists, the planner will find one with high probability after some amount of computation. <p> One can show that if a segment is short enough relative to the robot-obstacle distance computed at its two endpoints, the whole segment is guaranteed to be collision-free <ref> [4] </ref>. 1.2.2 Query Processing The query-processing algorithm is the following: Procedure query: 1. For i = fb; eg do: (a) If there exists a milestone m that sees q i then m i m, (b) Else i. <p> If s is chosen such that: s * 2 ; then roadmap generates a set of milestones that adequately covers F , with probability at least 1 . The proof of this theorem was established in <ref> [4, 19] </ref>. We reproduce it in Appendix A. Theorem 1 does not allow us to compute s since we do not know the value of *, except for simple spaces. Nevertheless, its significance is twofold.
Reference: [5] <author> J. Barraquand and J.C. Latombe. </author> <title> Robot Motion Planning: A Distributed Representation Approach. </title> <journal> Int. J. of Robotics Research, </journal> <volume> 10(6) </volume> <pages> 628-649, </pages> <year> 1991. </year>
Reference-contexts: Given any pair of query configurations, the planner tries to connect each query configuration to a milestone of R. It outputs a path if it connects the two configurations to milestones in the same connected component of R. A number of probabilistic roadmap planners (PRMs) have been proposed <ref> [3, 4, 5, 14, 12, 17, 20, 29, 32] </ref>. None of them is complete in the strongest sense, but most achieve some form of probabilistic completeness, i.e., if a path exists, the planner will find one with high probability after some amount of computation. <p> The planner in [14] generates clouds of milestones picked at random in small neighborhoods of previously generated milestones, expanding from the two query configurations, until two clouds meet (bi-directional search). The planner in <ref> [5] </ref> uses a partially random sampling uni-directional strategy. Starting at q b , it deterministically follows the steepest descent of a heuristic potential field U defined over C until it reaches a minimum of the potential.
Reference: [6] <author> J.F. Canny. </author> <title> The Complexity of Robot Motion Planning, </title> <publisher> MIT Press, </publisher> <address> Cam-bridge, MA, </address> <year> 1988. </year>
Reference-contexts: This result still holds for specific robots such as planar linkages consisting of links serially connected by revolute joints [16] and sets of rectangles executing axis-parallel translations in a rectangular workspace [10, 11]. Though general and complete algorithms have been proposed <ref> [6, 33] </ref>, their high complexity precludes any useful application. The dimension of C beyond which existing complete algorithms become practically useless is low, somewhere between 3 and 5.
Reference: [7] <author> H, Chang and T.Y. Li. </author> <title> Assembly Maintainability Study with Motion Planning, </title> <booktitle> Proc. IEEE Int. Conf. on Robotics and Automation, Nagoya. </booktitle> <pages> pp. 1012-1019, </pages> <year> 1995. </year>
Reference-contexts: This paper does not report on experimental results with implemented PRMs. Such results have been presented in several previous papers, with robots having from three to several dozen dofs. Complex practical applications of these planners include maintenance planning for aircraft engines <ref> [7] </ref>, design for man 4 ufacturing in the automotive industry [14], and graphic animation of human characters [21]. Figure 1.1 displays the CAD model of a car packaging; the path planner in [14] determines whether a subassembly designated by the user can be extracted without removing other parts.
Reference: [8] <author> D.P. Dobkin, J. Hershberger, D.G. Kirkpatrick, and S. Suri. </author> <title> Computing the Intersection Depth of Polyhedra. </title> <journal> Algorithmica, </journal> <volume> 9 </volume> <pages> 518-533, </pages> <year> 1993. </year>
Reference-contexts: This function admits several reasonably efficient implementations (e.g., <ref> [8, 9, 15, 22, 23, 24, 27, 30] </ref>). The planner samples C at random. Using dist, it retains the configurations in free space as milestones and, for every pair of milestones, it checks that a simple path between them (usually, the straight line segment in C) is collision-free. <p> The first stage 16 generates a roadmap R 0 in a dilated free space F 0 obtained by allowing some penetration distance of the robot into the obstacles <ref> [8, 24, 26, 27] </ref>. Dilating free space tend to increase its expansiveness, with the narrow channels benefiting much more than the already wide areas of the free space; hence, capturing the connectivity of R 0 is relatively easy.
Reference: [9] <author> E.G. Gilbert, D.W.Johhson, and S.S. Keerthi. </author> <title> A Fast Procedure for Computing the Distance Between Complex Robots in Three-Dimensional Space. </title> <journal> IEEE Tr. on Robotics and Automation, </journal> <volume> 4 </volume> <pages> 193-203, </pages> <year> 1988. </year>
Reference-contexts: This function admits several reasonably efficient implementations (e.g., <ref> [8, 9, 15, 22, 23, 24, 27, 30] </ref>). The planner samples C at random. Using dist, it retains the configurations in free space as milestones and, for every pair of milestones, it checks that a simple path between them (usually, the straight line segment in C) is collision-free.
Reference: [10] <author> J.E. Hopcroft, J.T. Schwartz, and M. Sharir. </author> <title> On the Complexity of Motion Planning for Multiple Independent Objects: PSPACE-Hardness of the `Warehouseman's Problem'. </title> <journal> Int. J. of Robotics Research, </journal> <volume> 3(4) </volume> <pages> 76-88, </pages> <year> 1984. </year>
Reference-contexts: There is strong evidence that solving it requires exponential time in the dimension n of C. This result still holds for specific robots such as planar linkages consisting of links serially connected by revolute joints [16] and sets of rectangles executing axis-parallel translations in a rectangular workspace <ref> [10, 11] </ref>. Though general and complete algorithms have been proposed [6, 33], their high complexity precludes any useful application. The dimension of C beyond which existing complete algorithms become practically useless is low, somewhere between 3 and 5.
Reference: [11] <author> J.E. Hopcroft and G.T. Wilfong. </author> <title> Reducing Multiple Object Motion Planning to Graph Searching. </title> <journal> SIAM J. on Computing, </journal> <volume> 15(3) </volume> <pages> 768-785, </pages> <year> 1986. </year>
Reference-contexts: There is strong evidence that solving it requires exponential time in the dimension n of C. This result still holds for specific robots such as planar linkages consisting of links serially connected by revolute joints [16] and sets of rectangles executing axis-parallel translations in a rectangular workspace <ref> [10, 11] </ref>. Though general and complete algorithms have been proposed [6, 33], their high complexity precludes any useful application. The dimension of C beyond which existing complete algorithms become practically useless is low, somewhere between 3 and 5.
Reference: [12] <author> T. Horsch, F. Schwarz, and H. Tolle. </author> <title> Motion Planning for Many Degrees of Freedom Random Reflections at C-Space Obstacles. </title> <booktitle> Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <address> San Diego, CA April 1994, </address> <pages> pp. 3318-3323. </pages>
Reference-contexts: Given any pair of query configurations, the planner tries to connect each query configuration to a milestone of R. It outputs a path if it connects the two configurations to milestones in the same connected component of R. A number of probabilistic roadmap planners (PRMs) have been proposed <ref> [3, 4, 5, 14, 12, 17, 20, 29, 32] </ref>. None of them is complete in the strongest sense, but most achieve some form of probabilistic completeness, i.e., if a path exists, the planner will find one with high probability after some amount of computation. <p> In [28] a single ray is shot from q along a random direction; the procedure then simulates a walk of the robot along this direction, until it is in free space. In <ref> [12] </ref> new milestones are created near F 's boundary to connect roadmap components that could not be connected by straight paths. A ray is shot from a milestone in one component along a direction picked at random.
Reference: [13] <author> D. Hsu, L.E. Kavraki, J.C. Latombe, R. Motwani, and S. Sorkin. </author> <title> On Finding Narrow Passages with Probabilistic Roadmap Planners. </title> <booktitle> Proc. Workshop on Algorithmic Foundations of Robotics (WAFR), </booktitle> <address> Houston, TX, </address> <month> March </month> <year> 1998. </year>
Reference-contexts: Milestones poorly connected to other milestones at the end of the first stage tend to lie in "difficult" regions of the free space, and experiments reported in [17, 20] show that adding a resampling stage to the strategy is very effective at improving roadmap connectedness. In <ref> [13] </ref> the first stage computes a roadmap R 0 in a space F 0 obtained by dilating F . The second stage "pushes" the links of R 0 that do not fully lie in F into F , by adding new milestones around those links. <p> All three references listed above observe that adding milestones near the free space boundary improves the planners' performance. The two-step strategy in <ref> [13] </ref> also produces milestone distributions that are denser near the free space boundary. Precomputing a roadmap is advantageous when multiple path-planning queries are made in the same free space. To deal with single-query cases, some planners build a new roadmap for each new query. <p> Hence, they do not significantly increase the odds of placing milestones in narrow passages, which are the regions where the milestone distribution needs to be the densest. The insights provided by the analysis of roadmap presented in this paper have recently led us to design a new two-stage strategy <ref> [13] </ref>. The first stage 16 generates a roadmap R 0 in a dilated free space F 0 obtained by allowing some penetration distance of the robot into the obstacles [8, 24, 26, 27].
Reference: [14] <author> D. Hsu, J.C. Latombe, and R. Motwani. </author> <title> Path Planning in Expansive Configuration Spaces. </title> <booktitle> Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <address> Albuquerque, NM, </address> <year> 1997, </year> <pages> pp. 2719-2726. </pages> <note> An extended version of this paper will appear in Int. J. of Computational Geometry and Applications. </note>
Reference-contexts: Given any pair of query configurations, the planner tries to connect each query configuration to a milestone of R. It outputs a path if it connects the two configurations to milestones in the same connected component of R. A number of probabilistic roadmap planners (PRMs) have been proposed <ref> [3, 4, 5, 14, 12, 17, 20, 29, 32] </ref>. None of them is complete in the strongest sense, but most achieve some form of probabilistic completeness, i.e., if a path exists, the planner will find one with high probability after some amount of computation. <p> This analysis shows that the probabilistic roadmap approach is efficient if the free space satisfies geometric properties called *-goodness [19], expansiveness <ref> [14] </ref>, and path clearance [17, 18]. Under these assumptions, the free space does not contain "narrow passages". Dealing with such passages is the main remaining issue in designing PRMs. In Section 1.6 we will briefly present ongoing efforts addressing this issue. <p> Such results have been presented in several previous papers, with robots having from three to several dozen dofs. Complex practical applications of these planners include maintenance planning for aircraft engines [7], design for man 4 ufacturing in the automotive industry <ref> [14] </ref>, and graphic animation of human characters [21]. Figure 1.1 displays the CAD model of a car packaging; the path planner in [14] determines whether a subassembly designated by the user can be extracted without removing other parts. <p> Complex practical applications of these planners include maintenance planning for aircraft engines [7], design for man 4 ufacturing in the automotive industry <ref> [14] </ref>, and graphic animation of human characters [21]. Figure 1.1 displays the CAD model of a car packaging; the path planner in [14] determines whether a subassembly designated by the user can be extracted without removing other parts. <p> To deal with single-query cases, some planners build a new roadmap for each new query. Knowing the query configurations q b and q e allows these planners to only sample the connected components of F that contain these configurations. The planner in <ref> [14] </ref> generates clouds of milestones picked at random in small neighborhoods of previously generated milestones, expanding from the two query configurations, until two clouds meet (bi-directional search). The planner in [5] uses a partially random sampling uni-directional strategy. <p> In [19] we dealt with this issue by allowing roadmap to invoke a complete planner to try to connect the components of a roadmap. However, running such a planner can be totally impractical. In <ref> [14] </ref> we eliminated its need by introducing the notion of an expansive free space. 1.5 ROADMAP CONNECTEDNESS 1.5.1 Expansive Free Space Let us now define precisely the kind of roadmap we would like roadmap to construct. Definition 3. Let F be an *-good free space. <p> The proof of this Theorem was established in <ref> [14] </ref> and is reproduced in Appendix C. Theorems 1 and 3 combined imply that with high probability, roadmap generates a roadmap that adequately represents F .
Reference: [15] <author> P. Jimenez, F. Thomas, and C. Torras. </author> <title> Collision Detection Algorithms for Motion Planning. Robot Motion Planning and Control, </title> <editor> J.P. Laumond (ed.), </editor> <booktitle> Lecture Notes in Control and Information Sciences, </booktitle> <volume> 229, </volume> <publisher> Springer, </publisher> <address> New York, NY, </address> <year> 1998, </year> <pages> pp. 305-343. </pages>
Reference-contexts: This function admits several reasonably efficient implementations (e.g., <ref> [8, 9, 15, 22, 23, 24, 27, 30] </ref>). The planner samples C at random. Using dist, it retains the configurations in free space as milestones and, for every pair of milestones, it checks that a simple path between them (usually, the straight line segment in C) is collision-free.
Reference: [16] <author> D.A. Joseph and W.H. Plantiga. </author> <title> On the Complexity of Reachability and Motion Planning Questions. </title> <booktitle> Proc. 1st ACM Symp. on Computational Geometry, </booktitle> <pages> pp. 62-66, </pages> <year> 1985. </year> <title> CAPTURING THE CONNECTIVITY OF HIGH-DIMENSIONAL GEOMETRIC SPACES 23 </title>
Reference-contexts: Path planning is a provably hard computational problem [31]. There is strong evidence that solving it requires exponential time in the dimension n of C. This result still holds for specific robots such as planar linkages consisting of links serially connected by revolute joints <ref> [16] </ref> and sets of rectangles executing axis-parallel translations in a rectangular workspace [10, 11]. Though general and complete algorithms have been proposed [6, 33], their high complexity precludes any useful application. The dimension of C beyond which existing complete algorithms become practically useless is low, somewhere between 3 and 5.
Reference: [17] <author> L. Kavraki. </author> <title> Random Networks in Configuration Space for Fast Path Planning. </title> <type> Ph.D. Thesis, Rep. </type> <institution> No. STAN-CS-TR-95-1535, Department of Computer Science, Stanford Univ., Stanford, </institution> <address> CA, </address> <year> 1995. </year>
Reference-contexts: Given any pair of query configurations, the planner tries to connect each query configuration to a milestone of R. It outputs a path if it connects the two configurations to milestones in the same connected component of R. A number of probabilistic roadmap planners (PRMs) have been proposed <ref> [3, 4, 5, 14, 12, 17, 20, 29, 32] </ref>. None of them is complete in the strongest sense, but most achieve some form of probabilistic completeness, i.e., if a path exists, the planner will find one with high probability after some amount of computation. <p> This analysis shows that the probabilistic roadmap approach is efficient if the free space satisfies geometric properties called *-goodness [19], expansiveness [14], and path clearance <ref> [17, 18] </ref>. Under these assumptions, the free space does not contain "narrow passages". Dealing with such passages is the main remaining issue in designing PRMs. In Section 1.6 we will briefly present ongoing efforts addressing this issue. This paper does not report on experimental results with implemented PRMs. <p> The first stage (similar to the above roadmap procedure) attempts to capture the connectivity of a free space F using no a priori knowledge, while the second 8 stage adds milestones in subsets of F chosen on the basis of the information revealed by the first stage. In <ref> [17] </ref> the second stage consists of adding new milestones in the neighborhoods of milestones that have been picked in the first stage and that see no or few other milestones. Several similar heuristics are discussed in [20]. <p> Several similar heuristics are discussed in [20]. Milestones poorly connected to other milestones at the end of the first stage tend to lie in "difficult" regions of the free space, and experiments reported in <ref> [17, 20] </ref> show that adding a resampling stage to the strategy is very effective at improving roadmap connectedness. In [13] the first stage computes a roadmap R 0 in a space F 0 obtained by dilating F . <p> A similar analysis for more complex strategies, such as those surveyed above, would be considerably more difficult. However, a noticeable attempt has been made in [19] to formally explain the improvements obtained with the two-stage strategies proposed in <ref> [17, 20] </ref>. 1.4 ROADMAP COVERAGE A first desirable property for a probabilistic roadmap is that it provides adequate coverage of the free space F . <p> The concept of *-goodness has been extended in [19] by including multi-link paths in the definition of the mutual visibility of two milestones. This extension makes it possible to formally explain the improvements empirically observed with the two-stage sampling strategies of <ref> [17, 20] </ref>. However, *-goodness and its extension are still too weak to guarantee that roadmap will construct a roadmap whose connectivity represents that of the free space. For example, the free space of Figure 1.4 is *-good for * 0:5. <p> The worst case happens when k = n 1, that is, when the passage is narrow along n 1 dimensions. 1.5.2 Path Clearance Assumption Another analysis of the basic PRM can be done by explicitly considering the "width" of the passages in F <ref> [17, 18] </ref>. Let q and q 0 be two configurations in the same component of F and t be a free path connecting them. Let ` be the Euclidean length of t and be its distance to F 's boundary. We call the clearance of the path. Theorem 4.
Reference: [18] <author> L. Kavraki, M. Kolountzakis, and J.C. Latombe. </author> <title> Analysis of Probabilistic Roadmaps for Path Planning. </title> <booktitle> Proc. IEEE Int. Conf. on Rob. and Aut., </booktitle> <address> Minneapolis, MN, </address> <pages> pp. 3020-3025, </pages> <year> 1996. </year>
Reference-contexts: This analysis shows that the probabilistic roadmap approach is efficient if the free space satisfies geometric properties called *-goodness [19], expansiveness [14], and path clearance <ref> [17, 18] </ref>. Under these assumptions, the free space does not contain "narrow passages". Dealing with such passages is the main remaining issue in designing PRMs. In Section 1.6 we will briefly present ongoing efforts addressing this issue. This paper does not report on experimental results with implemented PRMs. <p> The worst case happens when k = n 1, that is, when the passage is narrow along n 1 dimensions. 1.5.2 Path Clearance Assumption Another analysis of the basic PRM can be done by explicitly considering the "width" of the passages in F <ref> [17, 18] </ref>. Let q and q 0 be two configurations in the same component of F and t be a free path connecting them. Let ` be the Euclidean length of t and be its distance to F 's boundary. We call the clearance of the path. Theorem 4. <p> The proof of this theorem was given in <ref> [18] </ref> and is reproduced in Appendix C. Consistently with Theorem 3, it says that the probability that a roadmap fails to provide a path through a narrow passage decreases exponentially with the number of milestones. It also rightly suggests that the number of milestones may increase as (2=) n .
Reference: [19] <author> L. Kavraki, J.C. Latombe, R. Motwani, and P. Raghavan. </author> <title> Randomized Query Processing in Robot Motion Planning. </title> <booktitle> Proc. ACM SIGACT Symposium on the Theory of Computing (STOC), </booktitle> <address> Las Vegas, Nevada, </address> <year> 1995, </year> <pages> pp. 353-362. </pages>
Reference-contexts: This analysis shows that the probabilistic roadmap approach is efficient if the free space satisfies geometric properties called *-goodness <ref> [19] </ref>, expansiveness [14], and path clearance [17, 18]. Under these assumptions, the free space does not contain "narrow passages". Dealing with such passages is the main remaining issue in designing PRMs. In Section 1.6 we will briefly present ongoing efforts addressing this issue. <p> The following two sections give a formal analysis of the performance of the procedures roadmap and query. A similar analysis for more complex strategies, such as those surveyed above, would be considerably more difficult. However, a noticeable attempt has been made in <ref> [19] </ref> to formally explain the improvements obtained with the two-stage strategies proposed in [17, 20]. 1.4 ROADMAP COVERAGE A first desirable property for a probabilistic roadmap is that it provides adequate coverage of the free space F . <p> If s is chosen such that: s * 2 ; then roadmap generates a set of milestones that adequately covers F , with probability at least 1 . The proof of this theorem was established in <ref> [4, 19] </ref>. We reproduce it in Appendix A. Theorem 1 does not allow us to compute s since we do not know the value of *, except for simple spaces. Nevertheless, its significance is twofold. <p> The expected number of iterations is at most 2. In other words, the failure probability of query decreases exponentially with the number t of iterations at Step 1 (b)i. The proof of this theorem was es CAPTURING THE CONNECTIVITY OF HIGH-DIMENSIONAL GEOMETRIC SPACES 11 tablished in <ref> [19] </ref> and is reproduced in Appendix B. This proof assumes that Step 1 (b)i of query samples the visibility set V (q i ) of q i to find a configuration q that sees both q i and a milestone m. <p> Since V (q i ) is unknown, any implementation of query is only an approximation of the algorithm to which Theorem 2 applies strictly. The concept of *-goodness has been extended in <ref> [19] </ref> by including multi-link paths in the definition of the mutual visibility of two milestones. This extension makes it possible to formally explain the improvements empirically observed with the two-stage sampling strategies of [17, 20]. <p> For example, the free space of Figure 1.4 is *-good for * 0:5. But a roadmap of moderate size constructed by roadmap will most likely consist of two connected components. In <ref> [19] </ref> we dealt with this issue by allowing roadmap to invoke a complete planner to try to connect the components of a roadmap. However, running such a planner can be totally impractical.
Reference: [20] <author> L. Kavraki, P. Svestka, J.C. Latombe, and M. </author> <title> Overmars Probabilistic Roadmaps for Path Planning in High-Dimensional Configuration Spaces. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 12(4) </volume> <pages> 566-580, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: Given any pair of query configurations, the planner tries to connect each query configuration to a milestone of R. It outputs a path if it connects the two configurations to milestones in the same connected component of R. A number of probabilistic roadmap planners (PRMs) have been proposed <ref> [3, 4, 5, 14, 12, 17, 20, 29, 32] </ref>. None of them is complete in the strongest sense, but most achieve some form of probabilistic completeness, i.e., if a path exists, the planner will find one with high probability after some amount of computation. <p> We say that two free configurations see each other if they can be connected by a straight-line path in the free space F . The basic PRM is a simplified version of the planner described in <ref> [20] </ref>. It consists of two algorithms: roadmap, which precomputes a probabilistic roadmap, and query, which uses this roadmap to answer path-planning queries. <p> In [17] the second stage consists of adding new milestones in the neighborhoods of milestones that have been picked in the first stage and that see no or few other milestones. Several similar heuristics are discussed in <ref> [20] </ref>. Milestones poorly connected to other milestones at the end of the first stage tend to lie in "difficult" regions of the free space, and experiments reported in [17, 20] show that adding a resampling stage to the strategy is very effective at improving roadmap connectedness. <p> Several similar heuristics are discussed in [20]. Milestones poorly connected to other milestones at the end of the first stage tend to lie in "difficult" regions of the free space, and experiments reported in <ref> [17, 20] </ref> show that adding a resampling stage to the strategy is very effective at improving roadmap connectedness. In [13] the first stage computes a roadmap R 0 in a space F 0 obtained by dilating F . <p> A similar analysis for more complex strategies, such as those surveyed above, would be considerably more difficult. However, a noticeable attempt has been made in [19] to formally explain the improvements obtained with the two-stage strategies proposed in <ref> [17, 20] </ref>. 1.4 ROADMAP COVERAGE A first desirable property for a probabilistic roadmap is that it provides adequate coverage of the free space F . <p> The concept of *-goodness has been extended in [19] by including multi-link paths in the definition of the mutual visibility of two milestones. This extension makes it possible to formally explain the improvements empirically observed with the two-stage sampling strategies of <ref> [17, 20] </ref>. However, *-goodness and its extension are still too weak to guarantee that roadmap will construct a roadmap whose connectivity represents that of the free space. For example, the free space of Figure 1.4 is *-good for * 0:5.
Reference: [21] <author> Y. Koga, K. Kondo, J. Kuffner, and J.C. Latombe. </author> <title> Planning Motions with Intentions. </title> <booktitle> Proc. of SIGGRAPH'94, ACM, </booktitle> <pages> pp. 395-408, </pages> <year> 1994. </year>
Reference-contexts: Such results have been presented in several previous papers, with robots having from three to several dozen dofs. Complex practical applications of these planners include maintenance planning for aircraft engines [7], design for man 4 ufacturing in the automotive industry [14], and graphic animation of human characters <ref> [21] </ref>. Figure 1.1 displays the CAD model of a car packaging; the path planner in [14] determines whether a subassembly designated by the user can be extracted without removing other parts. Figure 1.2 shows several snapshots of a path computed by the planner in [21] for a digital actor; only the <p> and graphic animation of human characters <ref> [21] </ref>. Figure 1.1 displays the CAD model of a car packaging; the path planner in [14] determines whether a subassembly designated by the user can be extracted without removing other parts. Figure 1.2 shows several snapshots of a path computed by the planner in [21] for a digital actor; only the configurations in the first and last snapshots where given to the planner. 1.2 BASIC PROBABILISTIC ROADMAP PLANNER For simplification, we assume that the configuration space C is the Euclidean hyper-cube [0; 1] n .
Reference: [22] <author> M. Lin and J.F. Canny. </author> <title> A Fast Algorithm for Incremental Distance Computation. </title> <booktitle> Proc. of the IEEE Int. Conf. on Robotics and Automation, </booktitle> <address> Sacra-mento, CA, </address> <year> 1994, </year> <pages> pp. 602-608. </pages>
Reference-contexts: This function admits several reasonably efficient implementations (e.g., <ref> [8, 9, 15, 22, 23, 24, 27, 30] </ref>). The planner samples C at random. Using dist, it retains the configurations in free space as milestones and, for every pair of milestones, it checks that a simple path between them (usually, the straight line segment in C) is collision-free.
Reference: [23] <author> M. Lin, D. Manocha, J. Cohen, and S. Gottschalk. </author> <title> Collision detection: Algorithms and applications. Algorithmic Foundations of Robotics, </title> <editor> Goldberg et al. (Eds), A K Peters, </editor> <publisher> Ltd., </publisher> <year> 1995, </year> <pages> pp. 129-141. </pages>
Reference-contexts: This function admits several reasonably efficient implementations (e.g., <ref> [8, 9, 15, 22, 23, 24, 27, 30] </ref>). The planner samples C at random. Using dist, it retains the configurations in free space as milestones and, for every pair of milestones, it checks that a simple path between them (usually, the straight line segment in C) is collision-free.
Reference: [24] <author> B. Mirtich. V-Clip: </author> <title> Fast and Robust Polyhedral Collision Detection. </title> <type> Tech. Rep. </type> <institution> TR97-05, Mitsubishi El. Res. Lab., </institution> <address> Cambridge, MA, </address> <year> 1997. </year>
Reference-contexts: This function admits several reasonably efficient implementations (e.g., <ref> [8, 9, 15, 22, 23, 24, 27, 30] </ref>). The planner samples C at random. Using dist, it retains the configurations in free space as milestones and, for every pair of milestones, it checks that a simple path between them (usually, the straight line segment in C) is collision-free. <p> The first stage 16 generates a roadmap R 0 in a dilated free space F 0 obtained by allowing some penetration distance of the robot into the obstacles <ref> [8, 24, 26, 27] </ref>. Dilating free space tend to increase its expansiveness, with the narrow channels benefiting much more than the already wide areas of the free space; hence, capturing the connectivity of R 0 is relatively easy.
Reference: [25] <author> R. Motwani and P. Raghavan. </author> <title> Randomized Algorithms. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, UK, </address> <year> 1995 </year>
Reference-contexts: Thus: E [H] (F )(1 *) s (F )*=2: (1.A.1) Given a random variable X assuming only non-negative values, the Markov inequality <ref> [25] </ref>: Pr [X x] E [X]=x holds for all x 2 R + . Using this inequality and the relation (1.A.1), we get: Pr [H (*=2)(F )] : Hence, with probability 1, H is at most (*=2)(F ), in which case M provides adequate coverage of F . Appendix: B.
Reference: [26] <author> C.J. Ong. </author> <title> On the Quantification of Penetration between General Objects. </title> <journal> Int. J. of Robotics Research, </journal> <volume> 16(3) </volume> <pages> 400-409, </pages> <year> 1997. </year>
Reference-contexts: The first stage 16 generates a roadmap R 0 in a dilated free space F 0 obtained by allowing some penetration distance of the robot into the obstacles <ref> [8, 24, 26, 27] </ref>. Dilating free space tend to increase its expansiveness, with the narrow channels benefiting much more than the already wide areas of the free space; hence, capturing the connectivity of R 0 is relatively easy.
Reference: [27] <author> C.J. Ong and E.G. Gilbert. </author> <title> Growth Distances: New Measures for Object Separation and Penetration. </title> <journal> IEEE Tr. on Robotics and Automation, </journal> <volume> 12(6) </volume> <pages> 888-903, </pages> <year> 1996. </year>
Reference-contexts: This function admits several reasonably efficient implementations (e.g., <ref> [8, 9, 15, 22, 23, 24, 27, 30] </ref>). The planner samples C at random. Using dist, it retains the configurations in free space as milestones and, for every pair of milestones, it checks that a simple path between them (usually, the straight line segment in C) is collision-free. <p> The first stage 16 generates a roadmap R 0 in a dilated free space F 0 obtained by allowing some penetration distance of the robot into the obstacles <ref> [8, 24, 26, 27] </ref>. Dilating free space tend to increase its expansiveness, with the narrow channels benefiting much more than the already wide areas of the free space; hence, capturing the connectivity of R 0 is relatively easy.
Reference: [28] <author> M. Overmars. </author> <title> A random Approach to Motion Planning. </title> <type> Technical Report, </type> <institution> RUU-CS-92-32, Department of Computer Science, </institution> <address> P.O. Box 80.089, 3508 TB Utrecht, The Netherlands, </address> <year> 1992. </year>
Reference-contexts: In [3], when a configuration q is generated outside F , a number of rays are shot from q along random directions uniformly distributed in C. For each ray, a binary search is used to identify a point near the boundary of F . In <ref> [28] </ref> a single ray is shot from q along a random direction; the procedure then simulates a walk of the robot along this direction, until it is in free space. <p> In [12] new milestones are created near F 's boundary to connect roadmap components that could not be connected by straight paths. A ray is shot from a milestone in one component along a direction picked at random. Using a technique similar to <ref> [28] </ref>, a milestone is created where this ray encounters the free space boundary, and the ray is reflected in a random direction at this point to find another boundary point. All three references listed above observe that adding milestones near the free space boundary improves the planners' performance.
Reference: [29] <author> M. Overmars and P. Svestka. </author> <title> A Probabilistic Learning Approach to Motion Planning. Algorithmic Foundations of Robotics, </title> <editor> K. Goldberg et al. (eds.), A.K. Peters, </editor> <address> Wellesley, MA, </address> <year> 1995, </year> <pages> pp. 19-37. </pages>
Reference-contexts: Given any pair of query configurations, the planner tries to connect each query configuration to a milestone of R. It outputs a path if it connects the two configurations to milestones in the same connected component of R. A number of probabilistic roadmap planners (PRMs) have been proposed <ref> [3, 4, 5, 14, 12, 17, 20, 29, 32] </ref>. None of them is complete in the strongest sense, but most achieve some form of probabilistic completeness, i.e., if a path exists, the planner will find one with high probability after some amount of computation.
Reference: [30] <author> S. Quinlan. </author> <title> Efficient Distance Computation Between Non-Convex Objects. </title> <booktitle> Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <address> San Diego, CA, </address> <pages> pp. 3324-3330, </pages> <year> 1994. </year>
Reference-contexts: This function admits several reasonably efficient implementations (e.g., <ref> [8, 9, 15, 22, 23, 24, 27, 30] </ref>). The planner samples C at random. Using dist, it retains the configurations in free space as milestones and, for every pair of milestones, it checks that a simple path between them (usually, the straight line segment in C) is collision-free.
Reference: [31] <author> J. Reif. </author> <title> Complexity of the Mover's Problem and Generalizations. </title> <booktitle> Proc. IEEE Symp. on Foundations of Computer Science. IEEE, </booktitle> <pages> pp. 421-427, </pages> <year> 1979. </year> <month> 24 </month>
Reference-contexts: Such a path exists if and only if q b and q e lie in the same component of F . Path planning is a provably hard computational problem <ref> [31] </ref>. There is strong evidence that solving it requires exponential time in the dimension n of C. This result still holds for specific robots such as planar linkages consisting of links serially connected by revolute joints [16] and sets of rectangles executing axis-parallel translations in a rectangular workspace [10, 11].
Reference: [32] <author> P. Svestka and M. Overmars. </author> <title> Probabilistic Path Planning. Robot Motion Planning and Control, </title> <editor> J.P. Laumond (ed.), </editor> <booktitle> Lecture Notes in Control and Information Sciences, </booktitle> <volume> 229, </volume> <publisher> Springer, </publisher> <address> New York, NY, </address> <year> 1998, </year> <pages> pp. 255-304. </pages>
Reference-contexts: Given any pair of query configurations, the planner tries to connect each query configuration to a milestone of R. It outputs a path if it connects the two configurations to milestones in the same connected component of R. A number of probabilistic roadmap planners (PRMs) have been proposed <ref> [3, 4, 5, 14, 12, 17, 20, 29, 32] </ref>. None of them is complete in the strongest sense, but most achieve some form of probabilistic completeness, i.e., if a path exists, the planner will find one with high probability after some amount of computation. <p> Theorem 3 then tells us that the basic PRM can easily deal with such passages. CAPTURING THE CONNECTIVITY OF HIGH-DIMENSIONAL GEOMETRIC SPACES 15 Note that a variant of the path-clearance assumption that may yield a slightly tighter bound than Theorem 4 is the -complexity assumption proposed in <ref> [32] </ref>. On the other hand, Theorem 4 may be more easier to exploit than Theorem 3. For example, in many robotics applications, only those paths whose clearance is greater than some predefined threshold can be reliably executed.
Reference: [33] <author> Schwartz, J.T. and Sharir, M. </author> <year> 1983. </year> <title> On the `Piano Movers' Problem: II. General Techniques for Computing Topological Properties of Real Algebraic Manifolds. </title> <booktitle> Advances in Applied Mathematics. </booktitle> <volume> 4 </volume> <pages> 298-351. </pages>
Reference-contexts: This result still holds for specific robots such as planar linkages consisting of links serially connected by revolute joints [16] and sets of rectangles executing axis-parallel translations in a rectangular workspace [10, 11]. Though general and complete algorithms have been proposed <ref> [6, 33] </ref>, their high complexity precludes any useful application. The dimension of C beyond which existing complete algorithms become practically useless is low, somewhere between 3 and 5.
References-found: 33

