URL: ftp://rtcl.eecs.umich.edu/outgoing/sdawson/computer_journal.ps.gz
Refering-URL: http://www.eecs.umich.edu/~farnam/papers/pubs.html
Root-URL: http://www.cs.umich.edu
Email: fsdawson,farnamg@eecs.umich.edu  
Title: Probing and Fault Injection of Dependable Distributed Protocols a probing and fault injection tool, called
Author: Scott Dawson and Farnam Jahanian 
Note: To demonstrate the capabilities of this technique, the paper describes  (GMP) (Jahanian et al., 1993).  
Address: Ann Arbor, MI 48109-2122 U.S.A.  
Affiliation: Real-Time Computing Laboratory Electrical Engineering and Computer Science Department University of Michigan  
Abstract: Ensuring that a distributed system with strict dependability constraints meets its prescribed specification is a growing challenge that confronts software developers and system engineers. This paper presents a technique for probing and fault injection of fault-tolerant distributed protocols. The proposed technique, called script-driven probing and fault injection, can be used for studying the behavior of distributed systems and for detecting design and implementation errors of fault-tolerant protocols. The focus of this work is on fault injection techniques that can be used to demonstrate three aspects of a target protocol: i) detection of design or implementation errors, ii) identification of violations of protocol specifications, and iii) insight into design decisions made by the implementors. The emphasis of our approach is on experimental techniques intended to identify specific "problems" in a protocol or its implementation rather than the evaluation of system dependability through statistical metrics such as fault coverage. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Arlat, J., Aguera, M., Crouzet, Y., Fabre, J.-C., Martins, E., and Powell, D. </author> <year> (1990). </year> <title> Experimental evaluation of the fault tolerance of an atomic multicast system. </title> <journal> IEEE Trans. Reliability, </journal> <volume> 39(4) </volume> <pages> 455-467. </pages>
Reference-contexts: Most of the recent work in this area have focused on evaluating dependability of distributed protocol implementations through statistical metrics. For example, the work reported in <ref> (Arlat et al., 1990) </ref> calculates fault coverages of a communication network server by injecting physical faults, and it tests certain properties of an atomic mul-ticast protocol in the presence of faults. Other work can be characterized as probabilistic approaches to test generation (Echtle and Chen, 1991, Avresky et al., 1992).
Reference: <author> Avresky, D., Arlat, J., Laprie, J., and Crouzet, Y. </author> <year> (1992). </year> <title> Fault injection for the formal testing of fault tolerance. </title> <booktitle> In Proc. Int'l Symp. on Fault-Tolerant Computing, </booktitle> <pages> pages 345-354. </pages> <publisher> IEEE. </publisher>
Reference: <author> Babaoglu, O. and Marzullo, K. </author> <year> (1993). </year> <title> Consistent global states of distributed systems: Fundamental concepts and mechanism. </title> <editor> In Mullender, S., editor, </editor> <booktitle> Distributed Systems. </booktitle> <publisher> Addison Wesley. Second Edition. </publisher>
Reference-contexts: Past work on global snapshots or global predicate detection <ref> (Babaoglu and Marzullo, 1993) </ref> is closely related to this problem. Furthermore, we need to identify a minimal set of primitives for injecting faults given a certain failure model. ACKNOWLEDGMENT This work is supported by a grant from the U.S. Office of Naval Research, N0014-95-1-0261.
Reference: <author> Braden, R. </author> <year> (1989). </year> <title> RFC-1122: Requirements for internet hosts. Request for Comments. Network Information Center. </title>
Reference-contexts: Because TCP is designed to operate over links of different speeds and reliability, The Computer Journal, Vol. 38, No. 4, 1995 it is widely used on the Internet. TCP was originally defined in RFC-793 (Postel, 1981) and was updated in RFC-1122 <ref> (Braden, 1989) </ref>. In order to meet the TCP standard, an implementation must follow both RFCs. To test vendor TCP implementations, we modified an x-Kernel protocol stack to include a layer which incorporates the PFI tool described in Section 3. <p> If the sender sends more data than the receiver is willing to receive, the receiver may drop the data (unless the window has reopened). Probing of zero (offered) windows MUST be supported <ref> (Braden, 1989, Postel, 1981) </ref> because an ACK segment which reopens the window may be lost if it contains no data.
Reference: <author> Chillarege, R. and Bowen, N. S. </author> <year> (1989). </year> <title> Understanding large system failures | a fault injection experiment. </title> <booktitle> In Proc. Int'l Symp. on Fault-Tolerant Computing, </booktitle> <pages> pages 356-363. </pages>
Reference-contexts: Recent efforts have focused on software fault-injection by inserting faults into system memory to emulate errors <ref> (Chillarege and Bowen, 1989, Segall et al., 1988) </ref>. Others have emulated fault-injection into CPU components (Kanawati et al., 1992), typically by setting voltages on pins or wires.
Reference: <author> Choi, G., Iyer, R., and Carreno, V. </author> <year> (1990). </year> <title> Simulated fault injection: A methodology to evaluate fault tolerant microprocessor architectures. </title> <journal> IEEE Trans. Reliability, </journal> <volume> 39(4) </volume> <pages> 486-490. </pages>
Reference: <author> Comer, D. E. and Lin, J. C. </author> <year> (1994). </year> <title> Probing TCP implementations. </title> <booktitle> In Proc. Summer USENIX Conference. </booktitle>
Reference-contexts: Another closely related work is the active probing approach proposed in a recent paper by Comer and Lin <ref> (Comer and Lin, 1994) </ref> to study five TCP implementa The Computer Journal, Vol. 38, No. 4, 1995 Results Comments Proclaim forwarding When a proclaim was sent to a non leader machine, it was forwarded to the leader. <p> Using the NetMetrix protocol analyzer and monitor tools, trace data is gathered and analyzed to reveal characteristics of various TCP implementations. In addition to repeating TCP experiments similar to those reported in <ref> (Comer and Lin, 1994) </ref>, our approach allows other tests that are not possible with techniques that are based primarily on monitoring and gathering trace data. In particular, our approach differs from the active probing technique in four major aspects.
Reference: <author> Cristian, F. </author> <year> (1991). </year> <title> Reaching agreement on processor-group membership in synchronous distributed systems. </title> <journal> Distributed Computing, </journal> (4):175-187. 
Reference-contexts: A member may depart from a group due to a normal shutdown, such as a scheduled maintenance, or due to a failure. The group membership problem has been studied extensively in the past both for synchronous and asynchronous systems, e.g., <ref> (Cristian, 1991, Ricciardi and Birman, 1991, Mishra et al., 1990) </ref>. A detailed exposition of this problem is beyond the scope of this presentation. Informally, the strong group membership protocol, as described in (Jahanian et al., 1993), ensures that membership changes are seen in the same order by all members.
Reference: <author> Czeck, E. and Siewiorek, D. </author> <year> (1990). </year> <title> Effects of transient gate-level faults on program behaviour. </title> <booktitle> In Proc. Int'l Symp. on Fault-Tolerant Computing, </booktitle> <pages> pages 236-243. </pages> <publisher> IEEE. </publisher>
Reference: <author> Dawson, S. and Jahanian, F. </author> <year> (1995). </year> <title> Probing and fault injection of protocol implementations. </title> <booktitle> Proc. Int. Conf. on Distributed Computer Systems. </booktitle>
Reference-contexts: In this paper, we present a technique, called script-driven probing and fault injection <ref> (Dawson and Jahanian, 1995) </ref>, for studying the behavior of distributed systems and for testing the fault tolerance capabilities of distributed applications and communication protocols.
Reference: <author> Echtle, K. and Chen, Y. </author> <year> (1991). </year> <title> Evaluation of deterministic fault injection for fault-tolerant protocol testing. </title> <booktitle> In Proc. Int'l Symp. on Fault-Tolerant Computing, </booktitle> <pages> pages 418-425. </pages> <publisher> IEEE. </publisher>
Reference-contexts: For example, the work reported in (Arlat et al., 1990) calculates fault coverages of a communication network server by injecting physical faults, and it tests certain properties of an atomic mul-ticast protocol in the presence of faults. Other work can be characterized as probabilistic approaches to test generation <ref> (Echtle and Chen, 1991, Avresky et al., 1992) </ref>. The work reported in (Han et al., 1993) focuses on CPU and memory fault injection into a distributed real-time system; this approach also allows inducing communication faults with a given statistical distribution that is specified by the system implementor. <p> The tool is used mainly for emulating a wide-area network in a local network development environment and allows the user to specify delays on certain paths which the application is using. This work and that reported The Computer Journal, Vol. 38, No. 4, 1995 in <ref> (Echtle and Chen, 1991) </ref> are closest to the approach proposed here. Rather than estimating fault coverages for evaluating dependability of distributed systems, this work focuses on techniques for identifying violations of protocol specifications and for detecting design or implementations errors.
Reference: <author> Echtle, K. and Leu, M. </author> <year> (1992). </year> <title> The EFA fault injector for fault-tolerant distributed system testing. </title> <booktitle> In Workshop on Fault-Tolerant Parallel and Distributed Systems, </booktitle> <pages> pages 28-35. </pages> <publisher> IEEE. </publisher>
Reference: <author> Goswami, K. and Iyer, R. </author> <year> (1993). </year> <title> Simulation of software behaviour under hardware faults. </title> <booktitle> In Proc. Int'l Symp. on Fault-Tolerant Computing, </booktitle> <pages> pages 218-227. </pages> <publisher> IEEE. </publisher>
Reference: <author> Hadzilacos, V. and Toueg, S. </author> <year> (1993). </year> <title> Fault-tolerant broadcasts and related problems. </title> <editor> In Mullender, S., editor, </editor> <booktitle> Distributed Systems. </booktitle> <publisher> Addison Wesley. Second Edition. </publisher>
Reference-contexts: A formal treatment of these failure models is beyond the scope of this presentation <ref> (Hadzilacos and Toueg, 1993) </ref>. Scripts are at the heart of this approach. Scripts are instructions that are executed by the driver and the probe/fault injection (PFI ) layer to orchestrate the system computation into a particular state and to inject various kinds of faults into a system.
Reference: <author> Han, S., Rosenberg, H. A., and Shin, K. G. </author> <year> (1993). </year> <title> DOCTOR: An integrateD sOftware fault injeCTOn enviRonment. </title> <type> Technical Report CSE-TR-192-93, </type> <institution> The University of Michigan. </institution>
Reference-contexts: When the data from the first segment arrived at the receiver, the receiver ACKed the data from both segments. 4.2. Testing of GMP The objective of the experiments described in this subsection was to test the fault-tolerance capabilities of a prototype implementation of the strong group membership protocol <ref> (Jahanian et al., 1993) </ref> using the probe and fault injection technique presented earlier. In a distributed environment, a collection of processes (or processors) can be grouped together to provide a service. <p> A detailed exposition of this problem is beyond the scope of this presentation. Informally, the strong group membership protocol, as described in <ref> (Jahanian et al., 1993) </ref>, ensures that membership changes are seen in the same order by all members. In this protocol, a group of processors have a unique leader based on the processor id of each member. <p> Other work can be characterized as probabilistic approaches to test generation (Echtle and Chen, 1991, Avresky et al., 1992). The work reported in <ref> (Han et al., 1993) </ref> focuses on CPU and memory fault injection into a distributed real-time system; this approach also allows inducing communication faults with a given statistical distribution that is specified by the system implementor.
Reference: <author> Hutchinson, N. C. and Peterson, L. L. </author> <year> (1991). </year> <title> The x-Kernel: An architecture for implementing network protocols. </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> 17(1) </volume> <pages> 1-13. </pages>
Reference-contexts: APPROACH 2.1. Script-Driven Probing and Fault Injection The proposed approach views a distributed protocol as an abstraction through which a collection of participants communicate by exchanging a set of messages, in the same spirit as the x-Kernel <ref> (Hutchinson and Peterson, 1991) </ref>. In this model, we make no distinction between application-level protocols, interprocess communication protocols, network protocols, or device layer protocols.
Reference: <author> Ingham, D. B. and Parrington, G. D. </author> <year> (1994). </year> <title> Delayline: A wide-area network emulation tool. </title> <journal> Computing Systems, </journal> <volume> 7(3) </volume> <pages> 313-332. </pages>
Reference-contexts: The work reported in (Han et al., 1993) focuses on CPU and memory fault injection into a distributed real-time system; this approach also allows inducing communication faults with a given statistical distribution that is specified by the system implementor. The Delayline tool presented in <ref> (Ingham and Parrington, 1994) </ref> allows the user to introduce delays into user-level protocols. The tool is used mainly for emulating a wide-area network in a local network development environment and allows the user to specify delays on certain paths which the application is using.
Reference: <author> Jacobson, V. </author> <year> (1988). </year> <title> Congestion avoidance and control. </title> <booktitle> In Proc. of ACM SIGCOMM, </booktitle> <pages> pages 314-329. </pages>
Reference-contexts: The retransmission timeout value (RTO) for a TCP connection is calculated based on measured round trip time (RTT) from the time each packet is sent until the ACK for the packet is received. RFC-1122 specifies that a TCP must use Ja-cobson's algorithm <ref> (Jacobson, 1988) </ref> for computing the retransmission timeout coupled with Karn's algorithm (Karn and Partridge, 1987) for selecting the RTT measurements. Karn's algorithm ensures that ambiguous round-trip times will not corrupt the calculation of the smoothed round-trip time. We ran two variations on the same experiment.
Reference: <author> Jahanian, F., Rajkumar, R., and Fakhouri, S. </author> <year> (1993). </year> <title> Processor group membership protocols: Specification, </title> <booktitle> design and implementation. In Proceedings of the 12th Symposium on Reliable Distributed Systems, </booktitle> <pages> pages 2-11, </pages> <address> Princeton, New Jersey. </address>
Reference-contexts: When the data from the first segment arrived at the receiver, the receiver ACKed the data from both segments. 4.2. Testing of GMP The objective of the experiments described in this subsection was to test the fault-tolerance capabilities of a prototype implementation of the strong group membership protocol <ref> (Jahanian et al., 1993) </ref> using the probe and fault injection technique presented earlier. In a distributed environment, a collection of processes (or processors) can be grouped together to provide a service. <p> A detailed exposition of this problem is beyond the scope of this presentation. Informally, the strong group membership protocol, as described in <ref> (Jahanian et al., 1993) </ref>, ensures that membership changes are seen in the same order by all members. In this protocol, a group of processors have a unique leader based on the processor id of each member.
Reference: <author> Kanawati, G., Kanawati, N., and Abraham, J. </author> <year> (1992). </year> <title> FERRARI: A tool for the validation of system dependability properties. </title> <booktitle> In Proc. Int'l Symp. on Fault-Tolerant Computing, </booktitle> <pages> pages 336-344. </pages> <publisher> IEEE. </publisher>
Reference-contexts: Recent efforts have focused on software fault-injection by inserting faults into system memory to emulate errors (Chillarege and Bowen, 1989, Segall et al., 1988). Others have emulated fault-injection into CPU components <ref> (Kanawati et al., 1992) </ref>, typically by setting voltages on pins or wires. However, fault-injection and testing dependability of distributed systems has received very little attention until recently (Echtle and Chen, 1991, Echtle and Leu, 1992, Avresky et al., 1992, Han et al., 1993).
Reference: <author> Karn, P. and Partridge, C. </author> <year> (1987). </year> <title> Round trip time estimation. </title> <booktitle> In Proc. SIGCOMM 87, </booktitle> <address> Stowe, Vermont. </address>
Reference-contexts: RFC-1122 specifies that a TCP must use Ja-cobson's algorithm (Jacobson, 1988) for computing the retransmission timeout coupled with Karn's algorithm <ref> (Karn and Partridge, 1987) </ref> for selecting the RTT measurements. Karn's algorithm ensures that ambiguous round-trip times will not corrupt the calculation of the smoothed round-trip time. We ran two variations on the same experiment.
Reference: <author> McCanne, S. and Jacobson, V. </author> <year> (1993). </year> <title> The bsd packet filter: A new architecture for user-level packet capture. </title> <booktitle> In Winter USENIX Conference, </booktitle> <pages> pages 259-269. </pages>
Reference-contexts: The send script of the fault injection layer was set up to delay each outgoing ACK for 30 ACKs in a row. After doing this, the receive filter started dropping all incoming packets. Each incoming packet was logged. Approaches which depend on monitoring and filtering packets <ref> (McCanne and Jacobson, 1993, Comer and Lin, 1994) </ref> cannot perform tests like this one because they do not have the ability to manipulate messages. <p> Past work on packet filters, including the pioneering work on the CMU/Stanford Packet Filter (Mogul et al., 1987), a more recent work on BSD Packet Filter (BPF) which uses a register-based filter evaluator <ref> (McCanne and Jacobson, 1993) </ref>, and the Mach Packet Filter (MPF) (Yuhara et al., 1994) which is an extension of the BPF, are related to the work presented in this paper.
Reference: <author> Mishra, S., Peterson, L. L., and Schlichting, R. D. </author> <year> (1990). </year> <title> A membership protocol based on partial order. </title> <booktitle> In Second Working Conference on Dependable Computing for Critical Applications. </booktitle>
Reference: <author> Mogul, J., Rashid, R., and Accetta, M. </author> <year> (1987). </year> <title> The packet filter: An efficient mechanism for user-level network code. </title> <booktitle> In Proc. ACM Symp. on Operating Systems Principles, </booktitle> <pages> pages 39-51, </pages> <address> Austin, TX. </address> <publisher> ACM. </publisher>
Reference-contexts: To minimize data copying across kernel/user-space protection boundaries, a kernel agent, called a packet filter, is often used to discard unwanted packets as early as possible. Past work on packet filters, including the pioneering work on the CMU/Stanford Packet Filter <ref> (Mogul et al., 1987) </ref>, a more recent work on BSD Packet Filter (BPF) which uses a register-based filter evaluator (McCanne and Jacobson, 1993), and the Mach Packet Filter (MPF) (Yuhara et al., 1994) which is an extension of the BPF, are related to the work presented in this paper.
Reference: <author> Postel, J. </author> <year> (1981). </year> <title> RFC-793: Transmission control protocol. Request for Comments. Network Information Center. </title>
Reference-contexts: Because TCP is designed to operate over links of different speeds and reliability, The Computer Journal, Vol. 38, No. 4, 1995 it is widely used on the Internet. TCP was originally defined in RFC-793 <ref> (Postel, 1981) </ref> and was updated in RFC-1122 (Braden, 1989). In order to meet the TCP standard, an implementation must follow both RFCs. To test vendor TCP implementations, we modified an x-Kernel protocol stack to include a layer which incorporates the PFI tool described in Section 3.
Reference: <author> Ricciardi, A. M. and Birman, K. P. </author> <year> (1991). </year> <title> Using process groups to implement failure detection in asynchronous environments. </title> <booktitle> In Proceedings of the 11th ACM Symposium on Principles of Distributed Computing, </booktitle> <address> Montreal, Quebec. </address>
Reference-contexts: A member may depart from a group due to a normal shutdown, such as a scheduled maintenance, or due to a failure. The group membership problem has been studied extensively in the past both for synchronous and asynchronous systems, e.g., <ref> (Cristian, 1991, Ricciardi and Birman, 1991, Mishra et al., 1990) </ref>. A detailed exposition of this problem is beyond the scope of this presentation. Informally, the strong group membership protocol, as described in (Jahanian et al., 1993), ensures that membership changes are seen in the same order by all members.
Reference: <author> Segall, Z. et al. </author> <year> (1988). </year> <title> Fiat fault injection based automated testing environment. </title> <booktitle> In FTCS-18, </booktitle> <pages> pages 102-107. </pages>
Reference: <author> Yuhara, M., Bershad, B. N., Maeda, C., and Moss, </author> <note> J. </note>
Reference: <author> E. B. </author> <year> (1994). </year> <title> Efficient packet demultiplexing for multiple endpoints and large messages. </title> <booktitle> In Winter USENIX Conference. Second Edition. The Computer Journal, </booktitle> <volume> Vol. 38, No. 4, </volume> <year> 1995 </year>
References-found: 29

