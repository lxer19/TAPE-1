URL: ftp://publications.ai.mit.edu/ai-publications/1500-1999/AIM-1576.ps
Refering-URL: http://www.ai.mit.edu/people/shivers/citations.html
Root-URL: 
Email: shivers@ai.mit.edu  
Title: Supporting dynamic languages on the Java virtual machine  
Author: Olin Shivers 
Date: 1576 4/96  
Affiliation: MASSACHUSETTS INSTITUTE OF TECHNOLOGY ARTIFICIAL INTELLIGENCE LABORATORY  
Pubnum: A.I. Memo No.  
Abstract: In this note, I propose two extensions to the Java virtual machine (or VM) to allow dynamic languages such as Dylan, Scheme and Smalltalk to be efficiently implemented on the VM. These extensions do not affect the performance of pure Java programs on the machine. The first extension allows for efficient encoding of dynamic data; the This report also appeared in the proceedings of the Dynamics Objects Workshop, May, 1996. Copyright c fl Massachusetts Institute of Technology, 1996. This publication can be retrieved by anonymous ftp from publications.ai.mit.edu. This report describes research done at the Artificial Intelligence Laboratory of the Massachusetts Institute of Technology. Support for this research was provided in part by the Defense Advanced Research Projects Agency of the Department of Defense under Rome Laboratory contract F30602-94-C-0252 second allows for efficient encoding of language-specific computational elements.
Abstract-found: 1
Intro-found: 1
Reference: [ALIT] <editor> Peter Lee (editor). </editor> <booktitle> Topics in Advanced Language Implementation. </booktitle> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference: [Dylan] <author> Dylan: </author> <title> An Object-Oriented Dynamic Language. </title> <institution> Apple Computer, </institution> <year> 1992. </year>
Reference: [Fahlman96] <author> Scott E. Fahlman. </author> <title> Email to the java-vm@life-ai.mit.edu mail ing list, </title> <month> January 10, </month> <year> 1996. </year> <title> The java-vm mailing list is archived at the MIT AI Lab; this message can be located at http://wilson. ai.mit.edu/java-vm?37 </title>
Reference-contexts: The lesson here is that this holds as much for the Java VM in the nineties as it did for the VAX 11/780 in the eighties. 3.2 Writeable control store and trust boundaries Fahlman has made an interesting proposal <ref> [Fahlman96] </ref> to help open up the Java VM's instruction set in order to address this problem. The idea is to allow some of the opcode space in the VM's instruction set to be implemented by C routines that are dynamically linked into the VM.
Reference: [Java] <author> Java: </author> <title> Programming for the Internet. Sun Microsystems, </title> <note> 1995. http: //java.sun.com/ 8 </note>
Reference: [Scheme] <editor> J. Rees and W. Clinger (editors). </editor> <title> The revised 3 report on the algorith mic language Scheme. </title> <journal> SIGPLAN Notices 21(12):3779, </journal> <month> December </month> <year> 1986. </year>
References-found: 5

