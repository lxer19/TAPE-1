URL: http://www.santafe.edu/~evca/mecca.ps.Z
Refering-URL: http://www.santafe.edu/~evca/evabstracts.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: email: fwim,chaos,mmg@santafe.edu  
Title: Mechanisms of Emergent Computation in Cellular Automata  
Author: Wim Hordijk, James P. Crutchfield, Melanie Mitchell 
Address: 1399 Hyde Park Road, Santa Fe, 87501 NM, USA  
Affiliation: Santa Fe Institute,  
Abstract: We introduce a class of embedded-particle models for describing the emergent computational strategies observed in cellular automata (CAs) that were evolved for performing certain computational tasks. The models are evaluated by comparing their estimated performances with the actual performances of the CAs they model. The results show, via a close quantitative agreement, that the embedded-particle framework captures the main information processing mechanisms of the emergent computation that arise in these evolved CAs.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Crutchfield, J. P.: </author> <title> The calculi of emergence: Computation, dynamics, and induction. </title> <journal> Physica D 75 (1994) 11-54. </journal>
Reference-contexts: Crutchfield and Hanson developed a method for detecting and analyzing the "intrinsic" computational components in the CA's space-time behavior in terms of regular domains, embedded particles, and particle interactions [2, 7]. This method is part of their computational mechanics framework for understanding information processing embedded in physical systems <ref> [1] </ref>. Briefly, a regular domain is a homogeneous region of space-time in which the same "pattern" appears. More formally, the spatial patterns in a regular domain can be described by a regular language that is mapped onto itself by the CA rule .
Reference: 2. <author> Crutchfield, J. P., Hanson, J. E.: </author> <title> Turbulent pattern bases for cellular automata. </title> <journal> Physica D 69 (1993) 279-301. </journal>
Reference-contexts: In this paper we focus on how the behavior of evolved CAs implements the emergent computational strategies for performing these tasks. We develop a class of "embedded-particle" models to describe the computational strategies. To do this, we use the computational mechanics framework of Crutchfield and Hanson <ref> [2, 7] </ref>, in which a CA's information processing is described in terms of regular domains, embedded particles, and particle interactions. We then evaluate this class of models by comparing their computational performance to that of the CAs they model. <p> Crutchfield and Hanson developed a method for detecting and analyzing the "intrinsic" computational components in the CA's space-time behavior in terms of regular domains, embedded particles, and particle interactions <ref> [2, 7] </ref>. This method is part of their computational mechanics framework for understanding information processing embedded in physical systems [1]. Briefly, a regular domain is a homogeneous region of space-time in which the same "pattern" appears. <p> In this way, a new, filtered configuration of "domain" and "wall" values is generated based on the presence of regular domains in the original configuration. Doing this for the configuration at each time step results in a filtered space-time diagram as shown in figures 1 (b) and (d). (See <ref> [2] </ref> for details of transducer construction and use.) The regular domains of dens5 and sync5 are readily apparent in their space-time diagrams, being easily identified by eye. The identification and construction of domain minimal automata are not always so straightforward. <p> The identification and construction of domain minimal automata are not always so straightforward. Computational mechanics provides an algorithm, called *-machine reconstruction, for the recognition and identification of regular domains, including construction of their corresponding finite automaton representations, in spatio-temporal data <ref> [2, 4, 7] </ref>. Using computational mechanics, we can extract the relevant information about the domains, particles, and their interactions from the space-time diagrams of a given CA.
Reference: 3. <author> Crutchfield, J. P., Mitchell, M.: </author> <title> The evolution of emergent computation. </title> <booktitle> Proceedings of the National Academy of Sciences, </booktitle> <address> USA 92 23 (1995) 10742-10746. </address>
Reference-contexts: automata framework has provided a direct approach to studying how evolution (natural or artificial) can create dynamical systems that perform emergent computation; that is, how it can find dynamical systems in which the interaction of simple components with local information storage and communication gives rise to coordinated global information processing <ref> [3] </ref>. In [5, 6], we analyzed the evolutionary search process by which a genetic algorithm designed CAs to perform various tasks. In this paper we focus on how the behavior of evolved CAs implements the emergent computational strategies for performing these tasks. <p> To date we have used a genetic algorithm (GA) to evolve one-dimensional, binary-state r = 3 CAs to perform a density-classification task <ref> [3, 5] </ref> and a synchronization task [6]. For the density classification task, the goal is to find a CA that decides whether or not the IC contains a majority of 1s (i.e., has high density). Let 0 denote the density of 1s in the IC.
Reference: 4. <author> Crutchfield, J. P., Young, K.: </author> <title> Inferring statistical complexity. </title> <note> Physical Review Letters 63 (1989) 105-108. </note>
Reference-contexts: The identification and construction of domain minimal automata are not always so straightforward. Computational mechanics provides an algorithm, called *-machine reconstruction, for the recognition and identification of regular domains, including construction of their corresponding finite automaton representations, in spatio-temporal data <ref> [2, 4, 7] </ref>. Using computational mechanics, we can extract the relevant information about the domains, particles, and their interactions from the space-time diagrams of a given CA.
Reference: 5. <author> Das, R., Mitchell, M., Crutchfield, J. P.: </author> <title> A genetic algorithm discovers particle-based computation in cellular automata. Parallel Problem Solving from Nature|PPSN III, </title> <editor> Davidor, Y., Schwefel, H.-P., Manner, R., eds. </editor> <year> (1994) </year> <month> 244-353. </month>
Reference-contexts: In <ref> [5, 6] </ref>, we analyzed the evolutionary search process by which a genetic algorithm designed CAs to perform various tasks. In this paper we focus on how the behavior of evolved CAs implements the emergent computational strategies for performing these tasks. <p> To date we have used a genetic algorithm (GA) to evolve one-dimensional, binary-state r = 3 CAs to perform a density-classification task <ref> [3, 5] </ref> and a synchronization task [6]. For the density classification task, the goal is to find a CA that decides whether or not the IC contains a majority of 1s (i.e., has high density). Let 0 denote the density of 1s in the IC. <p> Each successive CA implemented an improved computational strategy for performing the task, reflected in the successive increases in performance. The evolutionary process that gave rise to these CAs is discussed in more detail in <ref> [5] </ref>. on the synchronization task (note that the first one, sync1 , had performance 0). These CAs were described in [6]. Table 2 shows the performance data for all ten CAs, including the standard deviations of the measured average performances.
Reference: 6. <author> Das, R., Crutchfield, J. P., Mitchell, M., Hanson, J. E.: </author> <title> Evolving globally synchronized cellular automata. </title> <booktitle> Proceedings of the Sixth International Conference on Genetic Algorithms, </booktitle> <editor> Eshelman, L. ed., </editor> <year> (1995) </year> <month> 336-343. </month>
Reference-contexts: In <ref> [5, 6] </ref>, we analyzed the evolutionary search process by which a genetic algorithm designed CAs to perform various tasks. In this paper we focus on how the behavior of evolved CAs implements the emergent computational strategies for performing these tasks. <p> To date we have used a genetic algorithm (GA) to evolve one-dimensional, binary-state r = 3 CAs to perform a density-classification task [3, 5] and a synchronization task <ref> [6] </ref>. For the density classification task, the goal is to find a CA that decides whether or not the IC contains a majority of 1s (i.e., has high density). Let 0 denote the density of 1s in the IC. <p> The evolutionary process that gave rise to these CAs is discussed in more detail in [5]. on the synchronization task (note that the first one, sync1 , had performance 0). These CAs were described in <ref> [6] </ref>. Table 2 shows the performance data for all ten CAs, including the standard deviations of the measured average performances. Recall that typical space-time behavior of dens5 and sync5 was shown in figures 1 (a) and (c), respectively.
Reference: 7. <author> Hanson, J. E., Crutchfield, J. P.: </author> <title> The attractor-basin portrait of a cellular automaton. </title> <journal> Journal of Statistical Physics 66 (5/6) (1992) 1415-1462. </journal>
Reference-contexts: In this paper we focus on how the behavior of evolved CAs implements the emergent computational strategies for performing these tasks. We develop a class of "embedded-particle" models to describe the computational strategies. To do this, we use the computational mechanics framework of Crutchfield and Hanson <ref> [2, 7] </ref>, in which a CA's information processing is described in terms of regular domains, embedded particles, and particle interactions. We then evaluate this class of models by comparing their computational performance to that of the CAs they model. <p> Crutchfield and Hanson developed a method for detecting and analyzing the "intrinsic" computational components in the CA's space-time behavior in terms of regular domains, embedded particles, and particle interactions <ref> [2, 7] </ref>. This method is part of their computational mechanics framework for understanding information processing embedded in physical systems [1]. Briefly, a regular domain is a homogeneous region of space-time in which the same "pattern" appears. <p> The identification and construction of domain minimal automata are not always so straightforward. Computational mechanics provides an algorithm, called *-machine reconstruction, for the recognition and identification of regular domains, including construction of their corresponding finite automaton representations, in spatio-temporal data <ref> [2, 4, 7] </ref>. Using computational mechanics, we can extract the relevant information about the domains, particles, and their interactions from the space-time diagrams of a given CA.
Reference: 8. <author> Hanson, J. E., Crutchfield, J. P.: </author> <title> Computational Mechanics of Cellular Automata: An Example. </title> <journal> Physica D 103 (1997) 169-189. </journal>
Reference-contexts: Including these transition paths in the set of allowed transitions, the transducer can recognize both regular domains and the particles. (A more detailed example of how to extend the transducer to incorporate the particles can be found in <ref> [8] </ref>.) Using this extended transducer, the condensation time t c is then defined as the first time step at which filtering the lattice does not generate any disallowed transitions. The occurrence of the condensation time is illustrated in figure 1 (a) for dens5 .
Reference: 9. <author> Wolfram, S.: </author> <title> Cellular Automata and Complexity. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
References-found: 9

