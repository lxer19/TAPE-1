URL: ftp://www.cs.rutgers.edu/pub/technical-reports/lcsr-tr-277.ps.Z
Refering-URL: http://www.cs.rutgers.edu/pub/technical-reports/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: EXPLAINING REASONING IN DESCRIPTION LOGICS  Written under the direction of  
Author: BY DEBORAH L. MCGUINNESS Alexander Borgida 
Degree: A dissertation submitted to the Graduate School|New Brunswick  in partial fulfillment of the requirements for the degree of Doctor of Philosophy  and approved by  
Date: October, 1996  
Note: Graduate Program in Computer Science  
Address: New Jersey  Brunswick, New Jersey  
Affiliation: Rutgers, The State University of  New  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Z. Ahmed and L. Wanger and P. Kochevar. </author> <title> An Intelligent Visualization System for Earth Science Data Analysis. </title> <journal> In Journal of Visual Languages and Computing, </journal> <volume> pp.307-320, </volume> <year> (1994) </year> <month> 5. </month>
Reference-contexts: Description Logics (DLs) form the basis of several recent knowledge-based systems (e.g., <ref> [130, 26, 45, 108, 119, 73, 76, 1, 47, 84, 86] </ref>), but do not currently offer such facilities. This is especially troublesome since DL reasoners perform a considerable variety of inference types, some of whose results have repeatedly proven, in practice, to be unexpected by developers. <p> At this point, I7 would be printed as follows: USER (42): (cl-print-ind @i7) I7 -&gt; Derived Information: Parents: D7 Ancestors: THING CLASSIC-THING Role Fillers and Restrictions: T <ref> [1 ; 1] </ref> -&gt; IndB =&gt; Primitive ancestors: F CLASSIC-THING 215 Role Restrictions: P![1 ; 1] Role Restrictions: R [1 ; 1] -&gt; IndB =&gt; Role Restrictions: P![1 ; 1] -&gt; IndC @i-I7 Next, we will need to generate fillers for I7's fillers such as IndB. <p> At this point, I7 would be printed as follows: USER (42): (cl-print-ind @i7) I7 -&gt; Derived Information: Parents: D7 Ancestors: THING CLASSIC-THING Role Fillers and Restrictions: T <ref> [1 ; 1] </ref> -&gt; IndB =&gt; Primitive ancestors: F CLASSIC-THING 215 Role Restrictions: P![1 ; 1] Role Restrictions: R [1 ; 1] -&gt; IndB =&gt; Role Restrictions: P![1 ; 1] -&gt; IndC @i-I7 Next, we will need to generate fillers for I7's fillers such as IndB. At this point, it is known that IndB has at-least 1 r-filler, but we don't have an identity for that filler. <p> We can print the current form of I7. USER (66): (cl-print-ind @i7) I7 -&gt; Derived Information: Parents: D7 Ancestors: THING CLASSIC-THING Role Fillers and Restrictions: Q [1 ; INF] -&gt; New-Ind1 =&gt; Role Restrictions: R <ref> [1 ; 1] </ref> -&gt; IndB =&gt; Role Restrictions: P![1 ; 1] -&gt; IndC T [1 ; 1] -&gt; IndB =&gt; Primitive ancestors: F CLASSIC-THING Role Restrictions: P![1 ; 1] Finally, if we close the remaining open roles, i.e., if we close q on I7 and close r on New-Ind1, then we <p> We can print the current form of I7. USER (66): (cl-print-ind @i7) I7 -&gt; Derived Information: Parents: D7 Ancestors: THING CLASSIC-THING Role Fillers and Restrictions: Q [1 ; INF] -&gt; New-Ind1 =&gt; Role Restrictions: R <ref> [1 ; 1] </ref> -&gt; IndB =&gt; Role Restrictions: P![1 ; 1] -&gt; IndC T [1 ; 1] -&gt; IndB =&gt; Primitive ancestors: F CLASSIC-THING Role Restrictions: P![1 ; 1] Finally, if we close the remaining open roles, i.e., if we close q on I7 and close r on New-Ind1, then we have succeeded at creating a counterexample which is closed with respect to the knowledge
Reference: [2] <author> H. Ait-Kaci, </author> <title> A lattice theoretic approach to computation based on a calculus of partially ordered type structures., </title> <type> PhD Thesis, </type> <institution> University of Pennsylvania, </institution> <year> 1984. </year>
Reference: [3] <author> H. Ait-Kaci and A. </author> <title> Podelski, "An overview of Life", Next Generation Information System Technology: </title> <booktitle> Proc. 1st Int. East/West Data Base Workshop, </booktitle> <publisher> Springer-Verlag LNCS 504, </publisher> <address> pp.42-58, </address> <year> 1990 </year>
Reference: [4] <author> T.W. Anwar, H. Beck and S. Navathe, </author> <title> "Knowledge mining by imprecise querying: a classification-based approach", </title> <booktitle> Proc. 8th Conference on Data Engineering', </booktitle> <address> Tempe, Arizona, </address> <month> February </month> <year> 1992, </year> <pages> 622-630. </pages>
Reference: [5] <author> Y. Arens, C.Y. Chee, C.N. Hsu, and C. Knoblock, </author> <title> "Retrieving and integrating data from multiple information systems", </title> <booktitle> Int. J. of Intelligent and Cooperative Information Systems 3(1), </booktitle> <year> 1994. </year>
Reference-contexts: Another task has been describing the integrated schema of a federated database, thereby hiding details from the user on where and how the information is obtained from the database <ref> [76, 75, 109, 11, 5] </ref>. Description Logics have also been used for modelling domain knowledge. Some projects find a deep background ontology extremely useful [96, 58, 86].
Reference: [6] <author> T. Arora, R. Ramakrishnan, W.G. Roth, P. Seshadri, and D. Srivastava. </author> <title> Explaining Program Executions in Deductive Systems. </title> <booktitle> Proceedings of the International Conference on Deductive and Object-Oriented Databases, </booktitle> <address> Phoenix, AZ, </address> <year> 1993, </year> <pages> pp 101-119. </pages>
Reference-contexts: Also, some evaluation strategies, e.g., bottom-up evaluation used in coral, do not enforce a fixed evaluation strategy thus making operational descriptions less informative. Two approaches to explanation in these systems are illustrated by the coral <ref> [6] </ref> and ldl [110] systems. coral explanations can be presented as derivation trees made up of tree fragments. Given a rule r that used facts f1 ... fn to infer a fact f, a tree fragment has a root f and children f1 ... fn. <p> Given a rule r that used facts f1 ... fn to infer a fact f, a tree fragment has a root f and children f1 ... fn. So, for example, we may know (from <ref> [6] </ref>) that anc bf (X,Y) :- m anc bf (X), edge bf (X,Y). If a fact like anc bf (4,2) was deduced, it would be the root of the tree fragment and 180 the children would be m anc bf (4) and edge bf (4,2).
Reference: [7] <institution> AT&T Bell Laboratories and University of Pittsburgh CLASSIC Knowledge Representation System Tutorial. </institution> <note> Available by anonymous ftp on pogo.isp.pitt.edu, in ftp/pub/classic-tutorial. </note>
Reference-contexts: As a result, we implemented a core explanation facility that has been in use for several years. We have interviewed help desk staff, users of classic, users of other dls, and knowledge engineers in order to gather data for refining and expanding our facility. We wrote a tutorial exercise <ref> [7] </ref> on classic's explanation facilities for use in a university course on knowledge representation and gathered student feedback. We also wrote two demonstration applications [91, 92, 7, 24] and presented this work and gathered feedback on numerous occasions. <p> We wrote a tutorial exercise [7] on classic's explanation facilities for use in a university course on knowledge representation and gathered student feedback. We also wrote two demonstration applications <ref> [91, 92, 7, 24] </ref> and presented this work and gathered feedback on numerous occasions. An explanation system has been implemented in the research version of classic [103, 16]. <p> We will introduce description logic constructors and reasoning by example, using the syntax and semantics of the classic knowledge representation system. Most of the examples are drawn from either our application used to configure stereo equipment [91, 92] or one used to match foods and wines <ref> [24, 7] </ref>. In this chapter, we will introduce the various aspects of a typical dl knowledge base, including: the different kinds of elements appearing in it, the operations that can be performed on it, and the new information that can be derived from it.
Reference: [8] <author> F. Baader and B. </author> <title> Hollunder. `KRIS : Knowledge Representation and Inference System. </title> <journal> in SIGART Bulletin 2(3), </journal> <year> 1991, </year> <pages> pp 8-14. </pages>
Reference-contexts: (which is very similar to the specification of the "core" description logic [101]). classic is an example of a description logic reasoner that determines relationships between descriptions by first "normalizing" descriptions, and then comparing their resulting canonical form. (This is in contrast to other kinds of description rea-soners, e.g., KRIS <ref> [8] </ref>, which use more standard theorem-proving techniques such as tableaux.) 1 Throughout the thesis, we sometimes refer to this simply as classic. 4 The first problem we consider that of of providing a declarative foundation for explanations is addressed with a proof theoretic representation of all inferences performed by classic. <p> In the final chapter, we review the ideas presented and support claims about the generality of our approach by showing how it can be extended to deal with a new concept constructor. 21 Chapter 2 Description Logics Description Logics, (e.g., back [120], classic [16], kris <ref> [8] </ref>, loom [82]) are a family of formalisms for representing and reasoning with knowledge, surveyed, among others, in [79, 127, 13].
Reference: [9] <editor> F. Baader, B. Hollunder, B. Nebel, H. </editor> <title> Profitlich. An Empirical Analysis of Optimization Techniques for Terminological Representation Systems or: Making kris get a move on. </title> <journal> In Applied Intelligence, </journal> <volume> 4(2), </volume> <year> 1994, </year> <pages> pp. 109-132. </pages> <booktitle> Also appears in the Proceedings of the Third International Conference on the Principles of Knowledge Representation and Reasoning, </booktitle> <address> Cambridge, Mass., </address> <month> October, </month> <year> 1992, </year> <pages> pp 270-281. </pages>
Reference: [10] <author> F. Baader, M. Lenzerini, W. Nutt, and P. F. Patel-Schneider, </author> <title> editors. </title> <booktitle> Working Notes of the 1994 Description Logic Workshop, </booktitle> <month> May </month> <year> 1994. </year>
Reference: [11] <author> J.M. Blanco, A. Illarramendi, A. Goni, </author> <title> "Building a Federated Relational Database System: An Approach using a Knowledge-Based System", </title> <journal> Int'l J. of Intelligent and Cooperative Information Systems, </journal> <volume> vol. 3, no. 4, </volume> <year> 1994, </year> <pages> pp. 415-455 220 </pages>
Reference-contexts: Another task has been describing the integrated schema of a federated database, thereby hiding details from the user on where and how the information is obtained from the database <ref> [76, 75, 109, 11, 5] </ref>. Description Logics have also been used for modelling domain knowledge. Some projects find a deep background ontology extremely useful [96, 58, 86].
Reference: [12] <author> A. Borgida. </author> <title> From Type Systems to Knowledge Representation: Natural Semantics Specifications for Description Logics. </title> <booktitle> In International Journal of Intelligent and Cooperative Information Systems, </booktitle> <address> pp.93-126, </address> <month> March </month> <year> 1992. </year>
Reference-contexts: In turn, the value restriction is incoherent because SMALL and BIG are disjoint. To do this, this thesis proposes that we rely on a proof-theoretic characterization of the deductions sanctioned by the language, such as the deductive system introduced in <ref> [12] </ref>. For example, we might use inference rules such as IF a concept has value restriction NOTHING on role ?R THEN the concept has at-most 0 fillers on ?R. Let us call this the incoherent-value-restriction rule. <p> We will refer to these relationships as "judgements". Judgements can be "proven" using a set of inference rules and some given statements. Kahn first used this approach in programming languages [71] and Borgida used the approach in description logics <ref> [12] </ref>. Subsumption judgements like C =) D can be proven using a set of inferences rules and some given statements the declarations of concept identifiers in a knowledge base KB. <p> In order to implement subsumption, one must determine D the subsumption rules to be incorporated into the system. 2 For some, one might choose a set of subsumption rules almost identical to those published in <ref> [12] </ref>, shown in Figure 8.1. (For a better understanding of how to determine such rules see [14].) An explanation designer will want to analyze the rules to determine the structural subsumption rules (i.e., those that deduce (some p C) =) (some r D) for any p, r, C, and D) and
Reference: [13] <author> A. Borgida. </author> <title> Description Logics in Data Management. </title> <journal> To appear in IEEE Trans. on Knowledge and Data Management. </journal> <note> An earlier version is Available as Rutgers Tech. Report DCS-TR-295. </note>
Reference-contexts: the generality of our approach by showing how it can be extended to deal with a new concept constructor. 21 Chapter 2 Description Logics Description Logics, (e.g., back [120], classic [16], kris [8], loom [82]) are a family of formalisms for representing and reasoning with knowledge, surveyed, among others, in <ref> [79, 127, 13] </ref>. They are well suited for representing data and knowledge concerning individual objects that may be grouped into classes (which description logics call concepts) and are interconnected by binary relationships (roles).
Reference: [14] <author> A. Borgida. </author> <title> Towards the Systematic Development of Description Logic Reasoners: clasp reconstructed. </title> <booktitle> In Principles of Knowledge Representation and Reasoning; Proceedings of the Third International Conference, </booktitle> <address> Cambridge, Mass., </address> <month> October </month> <year> 1992, </year> <month> pp.259-269. </month>
Reference-contexts: order to implement subsumption, one must determine D the subsumption rules to be incorporated into the system. 2 For some, one might choose a set of subsumption rules almost identical to those published in [12], shown in Figure 8.1. (For a better understanding of how to determine such rules see <ref> [14] </ref>.) An explanation designer will want to analyze the rules to determine the structural subsumption rules (i.e., those that deduce (some p C) =) (some r D) for any p, r, C, and D) and the normalization rules. 2 Note that the set of subsumption rules may be intentionally incomplete in
Reference: [15] <author> A. Borgida and R. J. Brachman. </author> <title> Customizable Classification Inference in the Pro-toDL Description Management System. </title> <booktitle> In Proceedings of the International Conference on Information and Knowledge Management, </booktitle> <address> Baltimore, MD, </address> <month> November </month> <year> 1992, </year> <month> pp.482-490. </month>
Reference: [16] <author> A. Borgida, R. J. Brachman, D.L McGuinness, and L. Alperin Resnick. </author> <title> CLASSIC: </title>
Reference-contexts: We also wrote two demonstration applications [91, 92, 7, 24] and presented this work and gathered feedback on numerous occasions. An explanation system has been implemented in the research version of classic <ref> [103, 16] </ref>. <p> In the final chapter, we review the ideas presented and support claims about the generality of our approach by showing how it can be extended to deal with a new concept constructor. 21 Chapter 2 Description Logics Description Logics, (e.g., back [120], classic <ref> [16] </ref>, kris [8], loom [82]) are a family of formalisms for representing and reasoning with knowledge, surveyed, among others, in [79, 127, 13].
References-found: 16

