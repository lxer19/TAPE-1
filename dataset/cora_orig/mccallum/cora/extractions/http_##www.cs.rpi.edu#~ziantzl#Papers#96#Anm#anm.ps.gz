URL: http://www.cs.rpi.edu/~ziantzl/Papers/96/Anm/anm.ps.gz
Refering-URL: http://www.cs.rpi.edu/~ziantzl/Papers/papers.html
Root-URL: http://www.cs.rpi.edu
Title: Parallel Structures and Dynamic Load Balancing for Adaptive Finite Element Computation  
Author: J. E. Flaherty, R. M. Loy, C. Ozturan M. S. Shephard, B. K. Szymanski, J. D. Teresco and L. H. Ziantz 
Address: Troy, NY 12180  
Affiliation: Scientific Computation Research Center (SCOREC) and Department of Computer Science Rensselaer Polytechnic Institute  
Abstract: An adaptive technique for a partial differential system automatically adjusts a computational mesh or varies the order of a numerical procedure to obtain a solution satisfying prescribed accuracy criteria in an optimal fashion. We describe data structures for distributed storage of finite element mesh data as well as software for mesh adaptation, load balancing, and solving compressible flow problems. Processor load imbalances are introduced at adaptive enrichment steps during the course of a parallel computation. To correct this, we have developed three dynamic load balancing procedures based, respectively, on load imbalance trees, moment of inertia, and octree traversal. Computational results on an IBM SP2 computer are presented for steady and transient solutions of the three-dimensional Euler equations of compressible flow.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. T. Barnard, PMRSB: </author> <title> parallel multilevel recursive spectral bisection, </title> <booktitle> in: Proc. Supercomputing 95, </booktitle> <address> San Diego (1995). </address>
Reference-contexts: Multilevel Recursive Spectral Bisection (MRSB) [2] has improved the efficiency of RSB, but its parallelization relies heavily on a shared memory architecture and is unlikely to be efficient in a true message passing environment <ref> [1] </ref>. Other enhancements to RSB [37,38,40] may make it more useful as a dynamic repartitioner, but serious doubts remain. Three dynamic load balancing schemes are available for use with PMDB data structures and mesh migration operators. Iterative Tree Balancing [30,34] (ITB) performs repeated local migrations to achieve balance.
Reference: [2] <author> S. T. Barnard and H. D. Simon, </author> <title> Fast multilevel implementation of recursive spectral bisection for partitioning unstructured problems, </title> <journal> Concurrency: Practice and Experience, </journal> <month> 6 </month> <year> (1994) </year> <month> 101-117. </month>
Reference-contexts: ORB and IRB are available as initial partitioning methods in PMDB while RSB is available in Chaco [23] and other packages. 8 A dynamic load balancing scheme that operates on distributed mesh data is essential for adaptive computation. Multilevel Recursive Spectral Bisection (MRSB) <ref> [2] </ref> has improved the efficiency of RSB, but its parallelization relies heavily on a shared memory architecture and is unlikely to be efficient in a true message passing environment [1]. Other enhancements to RSB [37,38,40] may make it more useful as a dynamic repartitioner, but serious doubts remain.
Reference: [3] <author> M. W. Beall and M. S. Shephard, </author> <title> A general topology-based mesh data structure, </title> <note> to appear Int. J. Numer. Meth. Engng. </note> <year> (1997). </year>
Reference-contexts: Tools developed at the Scientific Computation Research Center (SCOREC) at Rensselaer to facilitate the development and use of parallel adaptive finite element software are described in Section 2. An object-oriented, hierarchical mesh database is used to store and manipulate mesh data <ref> [3] </ref>. Meshes are created by an automatic finite octree procedure [35]. Parallel extensions to the mesh database allow operations to be performed on distributed data and provide for the dynamic migration of finite elements [7,30]. Parallel mesh enrichment routines are used for spatial refinement and coarsening (h-refinement) [34]. <p> The solution of a transient flow in a muzzle brake is shown as Example 3 in Section 4.4. In Section 5, we discuss results and present future research directions. 2 SCOREC Mesh Tools 2.1 SCOREC Mesh Database The SCOREC Mesh Database (MDB) <ref> [3] </ref> provides an object-oriented hierarchical representation of a finite element mesh. It also includes a set of operators to query and update the mesh data structure.
Reference: [4] <author> M. J. Berger and S. H. Bokhari, </author> <title> A partitioning strategy for nonuniform problems on multiprocessors, </title> <journal> IEEE Trans. Computers, </journal> <month> 36 </month> <year> (1987) </year> <month> 570-580. </month>
Reference-contexts: One measure of partition quality is the percentage of elements which require access to off-processor data during the computation. On a distributed-memory parallel computer, poor partition quality results in a higher communication cost during the finite element solution phase. Static partitioning methods based on coordinate <ref> [4] </ref>, inertial [20], and spectral [32] bisection are used to reduce communication cost when distributing initial meshes. A parallel version of the inertial partitioning method [34] may also be used for dynamic rebalancing. However, in an adaptive computation, global partitioning strategies can be costly relative to solution time. <p> Three static partitioning procedures are available in PMDB to distribute mesh data initially. Orthogonal Recursive Bisection (ORB) <ref> [4] </ref>, also called Recursive Coordinate Bisection, uses the coordinates of element centroids to partition the mesh.
Reference: [5] <author> K. S. Bey, A. Patra, and J. T. Oden, </author> <title> hp-version discontinuous Galerkin methods for hyperbolic conservation laws: a parallel adaptive strategy, </title> <journal> Int. J. Numer. Meth. </journal> <volume> Engng., </volume> <month> 38 </month> <year> (1995) </year> <month> 3889-3907. </month>
Reference: [6] <author> R. Biswas, K. D. Devine, and J. E. Flaherty, </author> <title> Parallel, adaptive finite element methods for conservation laws, </title> <journal> Appl. Numer. Math., </journal> <month> 14 </month> <year> (1994) </year> <month> 255-283. </month>
Reference: [7] <author> C. L. Bottasso, H. L. de Cougny, M. Dindar, J. E. Flaherty, C. Ozturan, Z. Rusak, and M. S. Shephard, </author> <title> Compressible aerodynamics using a parallel adaptive time-discontinuous Galerkin least-squares finite element method, </title> <booktitle> in: Proc. 12th AIAA Applied Aerodynamics Conference, </booktitle> <address> Colorado Springs, </address> <month> AIAA-94-1888 </month> <year> (1994). </year>
Reference: [8] <author> C. L. Bottasso, J. E. Flaherty, C. Ozturan, M. S. Shephard, B. K. Szymanski, J. D. Teresco, and L. H. Ziantz, </author> <title> The quality of partitions produced by an iterative load balancer, </title> <booktitle> in: Proc. Third Workshop on Languages, Compilers, and Runtime Systems, </booktitle> <address> Troy (1996) 265-277. </address>
Reference-contexts: We appraise the cost of interprocessor communication by two surface indices of partition quality <ref> [8] </ref>. The maximum local surface index (MLSI) measures the maximum percentage of element faces on the boundary of any processor, and the global surface index (GSI) measures the percentage of all faces on interprocessor boundaries. <p> With current technology, message startup is a significant component of communication cost; therefore, interprocessor connectivity (the number of processors with which each processor must exchange information during the solution phase) is as significant a factor in performance <ref> [8] </ref> as the number of boundary faces. Three static partitioning procedures are available in PMDB to distribute mesh data initially. Orthogonal Recursive Bisection (ORB) [4], also called Recursive Coordinate Bisection, uses the coordinates of element centroids to partition the mesh.
Reference: [9] <author> D. Callahan and K. Kennedy, </author> <title> Compiling programs for distributed-memory multiprocessors, </title> <editor> J. </editor> <booktitle> Supercomputing, </booktitle> <month> 2 </month> <year> (1988) </year> <month> 151-169. </month>
Reference-contexts: Here p o is the id of the owning processor and a o is the address of the entity on p o . This ownership information can be used to implement an owner-computes rule <ref> [9] </ref>, e.g. , during scalar product computation in an iterative linear solver. Since (p o ,a o ) functions as a global key for an entity, there is no need to generate and store a separate key 4 Fig. 2. Two-dimensional example of a distributed mesh.
Reference: [10] <author> K. Clark, J. E. Flaherty, and M. S. Shephard, </author> <title> Appl. Numer. Math., special ed. on Adaptive Methods for Partial Differential Equations, </title> <month> 14 </month> <year> (1994). </year>
Reference-contexts: During the solution process, portions of the discretized domain are spatially refined or coarsened (h-refinement), the method order is varied (p-refinement), and/or the mesh is moved to follow evolving phenomena (r-refinement), to concentrate or dilute the computational effort in areas needing more or less resolution <ref> [10] </ref>. Preprint submitted to Elsevier Preprint 25 March 1997 Parallel computation is essential for computationally demanding three-dim-ensional problems; however, it introduces complications such as the need to balance processor loading, coordinate interprocessor communication, and manage distributed data.
Reference: [11] <author> B. Cockburn and P.-A. Gremaud, </author> <title> Error estimates for finite element methods for scalar conservation laws, </title> <journal> SIAM J. Numer. Anal, </journal> <month> 33 </month> <year> (1996) </year> <month> 522-554. </month>
Reference: [12] <author> B. Cockburn, S.-Y. Lin, and C.-W. Shu, </author> <title> TVB Runge-Kutta local projection discontinuous Galerkin finite element method for conservation laws III: One-Dimensional systems, </title> <institution> J. Comput. Phys., </institution> <month> 84 </month> <year> (1989) </year> <month> 90-113. </month>
Reference: [13] <author> B. Cockburn and C.-W. Shu, </author> <title> TVB Runge-Kutta local projection discontinuous Galerkin finite element method for conservation laws II: General framework, </title> <journal> Math. Comp., </journal> <volume> 52 (1989) 411-435. </volume> <pages> 23 </pages>
Reference: [14] <author> G. Cybenko, </author> <title> Dynamic load balancing for distributed memory multiprocessors, </title> <journal> J. Par. Dist. Comput., </journal> <month> 7 </month> <year> (1989) </year> <month> 279-301. </month>
Reference: [15] <author> H. L. de Cougny, K. D. Devine, J. E. Flaherty, R. M. Loy, C. Ozturan, and M. S. Shephard, </author> <title> Load balancing for the parallel adaptive solution of partial differential equations, </title> <journal> Appl. Numer. Math., </journal> <month> 16 </month> <year> (1994) </year> <month> 157-182. </month>
Reference: [16] <author> K. D. Devine and J. E. Flaherty. </author> <title> Parallel adaptive hp-refinement techniques for conservation laws. </title> <journal> Appl. Numer. Math., </journal> <month> 20 </month> <year> (1996) </year> <month> 367-386. </month>
Reference: [17] <author> K. D. Devine, J. E. Flaherty, R. Loy, and S. Wheat, </author> <title> Parallel partitioning strategies for the adaptive solution of conservation laws, </title> <note> in: </note> <author> I. Babuska, J. E. Flaherty, W. D. Henshaw, J. E. Hopcroft, J. E. Oliger, and T. Tezduyar, eds., </author> <title> Modeling, Mesh Generation, and Adaptive Numerical Methods for Partial Differential Equations, </title> <journal> No. </journal> <volume> 75, </volume> <publisher> (Springer-Verlag, </publisher> <address> Berlin-Heidelberg, </address> <year> 1995) </year> <month> 215-242. </month>
Reference-contexts: Three dynamic load balancing schemes are available for use with PMDB data structures and mesh migration operators. Iterative Tree Balancing [30,34] (ITB) performs repeated local migrations to achieve balance. Parallel Sort Inertial Recursive Bisection [34] (PSIRB) uses IRB with a parallel sort. Octree Partitioning <ref> [17] </ref> (OCTPART) uses the octree structure underlying the mesh to achieve load balance. The measure of imbalance or "cost function" that reflects the computational load on each processor is generally chosen as the number of elements on a processor with h-refinement. <p> PMDB provides an element weighting scheme that can be used to address each of these needs. 3.1 Iterative Tree Balancing ITB follows Leiss and Reddy [26], Wheat [41], and Devine and Flaherty <ref> [17] </ref> in that lightly loaded processors request load from their most heavily loaded neighbors. However, instead of considering an immediate neighborhood of processors, the algorithm views the requests as forming a forest of trees (Figure 5b). <p> A partitioning of the initial mesh used in Example 3 (Section 4.4) distributed with PSIRB is shown on the left of Figure 15. This partition has an MLSI of 12.9% and a GSI of 3.2%. 3.3 Octree Partitioning Octree-based partitioning <ref> [17] </ref> employs automatic octree generation procedures [35] and uses tree topology to create a one-dimensional ordering of the octree nodes. The ordered list of nodes is divided into segments corresponding to nearly equal load. Members of any given segment tend to be spatially adjacent and, thus, form a good partition.
Reference: [18] <author> R. E. Dillon Jr., </author> <title> A parametric study of perforated muzzle brakes, </title> <type> ARDC Technical Report ARLCB-TR-84015, </type> <institution> Benet Weapons Laboratory, Watervliet, </institution> <year> 1984. </year>
Reference-contexts: This problem was motivated by flow studies in perforated muzzle brakes for large calibre guns <ref> [18] </ref>. We match flow conditions to those of shock tube studies of Dillon [18] and Nagamatsu et al. [29]. Our focus is on the quasisteady flow that exists behind the contact surface for a short time. <p> This problem was motivated by flow studies in perforated muzzle brakes for large calibre guns <ref> [18] </ref>. We match flow conditions to those of shock tube studies of Dillon [18] and Nagamatsu et al. [29]. Our focus is on the quasisteady flow that exists behind the contact surface for a short time. Using symmetry, the flow may be solved in one half of the domain bounded by a plane through the vent.
Reference: [19] <author> P. Diniz, S. Plimpton, B. Hendrickson, and R. Leland, </author> <title> Parallel algorithms for dynamically partitioning unstructured grids, </title> <booktitle> in: Proc. 7th SIAM Conference on Parallel Processing for Scientific Computing, </booktitle> <address> San Francisco (1995) 615-620. </address>
Reference: [20] <author> C. Farhat and M. Lesoinne, </author> <title> Automatic partitioning of unstructured meshes for the parallel solution of problems in computational mechanics, </title> <journal> Int. J. Numer. Meth. </journal> <volume> Engng., </volume> <month> 36 </month> <year> (1993) </year> <month> 745-764. </month>
Reference-contexts: One measure of partition quality is the percentage of elements which require access to off-processor data during the computation. On a distributed-memory parallel computer, poor partition quality results in a higher communication cost during the finite element solution phase. Static partitioning methods based on coordinate [4], inertial <ref> [20] </ref>, and spectral [32] bisection are used to reduce communication cost when distributing initial meshes. A parallel version of the inertial partitioning method [34] may also be used for dynamic rebalancing. However, in an adaptive computation, global partitioning strategies can be costly relative to solution time. <p> At each recursive step, the Cartesian coordinate of the longest dimension of the domain under consideration is bisected, elements are sorted according to the bisecting coordinate, and half of the elements are assigned to each subdomain. Inertial Recursive Bisection (IRB) <ref> [20] </ref>, proceeds likewise, but in a direction orthogonal to its principal axis of inertia. Recursive Spectral Bisection (RSB) [32] is generally considered to be among the best static mesh partitioning procedures. RSB is costly and may be too expensive for use in a large-scale three-dimensional adaptive computation.
Reference: [21] <author> C. Farhat, N. Maman, and G. W. Brown, </author> <title> Mesh partitioning for implicit computations via iterative domain decomposition: impact and optimization of the subdomain aspect ratio, </title> <journal> Int. J. Numer. Meth. </journal> <volume> Engng., </volume> <month> 38 </month> <year> (1995) </year> <month> 989-1000. </month>
Reference: [22] <author> MPI Forum, </author> <title> MPI: A Message Passing Interface Standard, </title> <institution> University of Tennessee, Knoxville, </institution> <note> first edition, </note> <year> 1994. </year>
Reference-contexts: For example, a finite element procedure can obtain scatter/gather maps of data for use in its communication phase. Fast traversal of entities on interprocessor boundaries is provided by following the interproces-sor boundary structure lists. All interprocessor communication is done using the Message Passing Interface (MPI) <ref> [22] </ref>. 2.4 Mesh Migration PMDB handles arbitrary multiple migration of elements between processors (Figure 4) to maintain a balanced computation. Any top-level entity can be marked for migration, although it is frequently the boundary elements that are migrated.
Reference: [23] <author> B. Hendrickson and R. Leland, </author> <title> The Chaco user's guide, version 1.0, </title> <type> Technical Report SAND93-2339, </type> <institution> Sandia National Laboratories, </institution> <address> Albuquerque, </address> <year> 1993. </year>
Reference-contexts: RSB is costly and may be too expensive for use in a large-scale three-dimensional adaptive computation. ORB and IRB are available as initial partitioning methods in PMDB while RSB is available in Chaco <ref> [23] </ref> and other packages. 8 A dynamic load balancing scheme that operates on distributed mesh data is essential for adaptive computation.
Reference: [24] <author> B. Hendrickson and R. Leland, </author> <title> Multidimensional spectral load balancing, </title> <type> Technical Report SAND93-0074, </type> <institution> Sandia National Laboratories, </institution> <address> Albuquerque, </address> <year> 1993. </year>
Reference: [25] <author> Y. F. Hu and R. J. Blake, </author> <title> An optimal dynamic load balancing algorithm, </title> <type> Preprint DL-P-95-011, </type> <institution> Daresbury Laboratory, Warrington, </institution> <year> 1995. </year>
Reference: [26] <author> E. Leiss and H. Reddy, </author> <title> Distributed load balancing: design and performance analysis, </title> <editor> W. M. </editor> <booktitle> Kuck Research Computation Laboratory, </booktitle> <month> 5 </month> <year> (1989) </year> <month> 205-270. </month>
Reference-contexts: PMDB provides an element weighting scheme that can be used to address each of these needs. 3.1 Iterative Tree Balancing ITB follows Leiss and Reddy <ref> [26] </ref>, Wheat [41], and Devine and Flaherty [17] in that lightly loaded processors request load from their most heavily loaded neighbors. However, instead of considering an immediate neighborhood of processors, the algorithm views the requests as forming a forest of trees (Figure 5b).
Reference: [27] <author> J. Maccoll, </author> <title> The conical shock wave formed by a cone moving at a high speed, </title> <journal> Proc. Royal Society of London, Series A, </journal> <note> CLIX (1937) 459-472. 24 </note>
Reference-contexts: This problem has a known analytical solution <ref> [27] </ref> that may be used to appraise accuracy. Using symmetry, we solve this problem in a box surrounding one quarter of the cone. The initial mesh contains 41,842 tetrahedral elements. The entire domain is initialized to a Mach 5 parallel flow toward the cone base.
Reference: [28] <author> T. Minyard, Y. Kallinderis, and K. Schulz, </author> <title> Parallel load balancing for dynamic execution environments, </title> <booktitle> in: Proc. 34th Aerospace Sciences Meeting and Exhibit, </booktitle> <address> Reno, </address> <month> AIAA-96-0295 </month> <year> (1996). </year>
Reference-contexts: The ordered list of nodes is divided into segments corresponding to nearly equal load. Members of any given segment tend to be spatially adjacent and, thus, form a good partition. Minyard et al. <ref> [28] </ref> also present an octree-based partitioning procedure that uses orthogonal coordinate bisection. The use of space-filling curves [31] is an alternative that also keeps neighboring elements of the ordering in close spatial proximity. <p> For a nearly balanced mesh, this approaches O (N=P ). Partitioning time does not grow with P as it would for a recursive algorithm. In terms of scalability, our algorithm is more advantageous than that of Minyard et al. <ref> [28] </ref> who store the global octree on each processor. This effectively pro 11 Fig. 7. Depth-first traversal for partitioning using OCTPART. duces a procedure having serial complexity since the partitioning is duplicated on all processors. <p> The coloring may be done using subphases where a processor first sends elements to higher-numbered processors and then sends them to lower-numbered ones. When three processors are involved, three sub-phases are necessary based on their relative order. Minyard et al. <ref> [28] </ref> perform processor boundary smoothing by a similar iterative method. They identify elements on interprocessor boundaries whose nodes are all shared by two processors. These correspond to Cases (ii), (iii), and (v). Patterns involving more than two processors (Case (i)) are not considered.
Reference: [29] <author> H. T. Nagamatsu, K. Y. Choi, R. E. Duffy, and G. C. Carofano, </author> <title> An experimental and numerical study of the flow through a vent hole in a perforated muzzle brake, </title> <type> ARDEC Technical Report ARCCB-TR-87016, </type> <institution> Benet Weapons Laboratory, Watervliet, </institution> <year> 1987. </year>
Reference-contexts: This problem was motivated by flow studies in perforated muzzle brakes for large calibre guns [18]. We match flow conditions to those of shock tube studies of Dillon [18] and Nagamatsu et al. <ref> [29] </ref>. Our focus is on the quasisteady flow that exists behind the contact surface for a short time. Using symmetry, the flow may be solved in one half of the domain bounded by a plane through the vent. The initial mesh (Figure 12) contains 45,093 tetrahedral elements. <p> Figure 16 shows the Mach number with velocity vectors in the vent region. Flow features compare favorably with experimental and numerical results of Nagamatsu et al. <ref> [29] </ref>. The flow accelerates as it enters the vent. A strong shock forms near the downwind vent-shock tube interface. A portion of the flow in the vent accelerates to supersonic conditions.
Reference: [30] <author> C. Ozturan, </author> <title> Distributed Environment and Load Balancing for Adaptive Unstructured Meshes, </title> <type> PhD thesis, </type> <institution> Computer Science Dept., Rensselaer Polytechnic Institute, Troy, </institution> <year> 1995. </year>
Reference-contexts: As a result, if each processor migrates to a small number of processors, such as its neighbors, the migration will scale with the number of processors <ref> [30] </ref>. 2.5 SCOREC Mesh Enrichment The SCOREC mesh enrichment [34] procedure performs spatial (h-) refinement and coarsening in parallel using error indicator information and enrichment threshold values. From this information, mesh edges are marked to be 6 Fig. 4. <p> However, instead of considering an immediate neighborhood of processors, the algorithm views the requests as forming a forest of trees (Figure 5b). Each tree is then linearized, and a logarithmic-time scan operation is used to compute load flows <ref> [30] </ref> to determine the amount of data to be migrated (Figure 5c). Layers of elements on interprocessor boundaries are moved from heavily loaded to lightly loaded processors to achieve balance within each tree (Figure 6) [30]. <p> tree is then linearized, and a logarithmic-time scan operation is used to compute load flows <ref> [30] </ref> to determine the amount of data to be migrated (Figure 5c). Layers of elements on interprocessor boundaries are moved from heavily loaded to lightly loaded processors to achieve balance within each tree (Figure 6) [30]. ITB is "diffusive", and a heavily loaded processor will distribute load to several lightly loaded neighbors. ITB may be iterated to achieve a global balance within a specified tolerance or be set to terminate after a fixed number of iterations.
Reference: [31] <author> A. Patra and J. T. Oden, </author> <title> Problem decomposition for adaptive hp finite element methods, </title> <journal> Comp. Sys. Engng., </journal> <volume> 6 (1995) 97. </volume>
Reference-contexts: Members of any given segment tend to be spatially adjacent and, thus, form a good partition. Minyard et al. [28] also present an octree-based partitioning procedure that uses orthogonal coordinate bisection. The use of space-filling curves <ref> [31] </ref> is an alternative that also keeps neighboring elements of the ordering in close spatial proximity. Initially, cost metrics of all subtrees of the octree are determined to indicate loading in specific spatial regions.
Reference: [32] <author> A. Pothen, H. Simon, and K.-P. Liou, </author> <title> Partitioning sparse matrices with eigenvectors of graphs, </title> <journal> SIAM J. Mat. Anal. Appl., </journal> <month> 11 </month> <year> (1990) </year> <month> 430-452. </month>
Reference-contexts: On a distributed-memory parallel computer, poor partition quality results in a higher communication cost during the finite element solution phase. Static partitioning methods based on coordinate [4], inertial [20], and spectral <ref> [32] </ref> bisection are used to reduce communication cost when distributing initial meshes. A parallel version of the inertial partitioning method [34] may also be used for dynamic rebalancing. However, in an adaptive computation, global partitioning strategies can be costly relative to solution time. <p> Inertial Recursive Bisection (IRB) [20], proceeds likewise, but in a direction orthogonal to its principal axis of inertia. Recursive Spectral Bisection (RSB) <ref> [32] </ref> is generally considered to be among the best static mesh partitioning procedures. RSB is costly and may be too expensive for use in a large-scale three-dimensional adaptive computation.
Reference: [33] <author> M. S. Shephard, S. Dey, and J. E. Flaherty, </author> <title> A straight forward structure to construct shape functions for variable p-order meshes, </title> <type> SCOREC Report # 6-1996, </type> <institution> Scientific Computation Research Center, Rensselaer Polytechnic Institute, Troy, </institution> <year> 1996. </year> <note> To appear Comp. Meth. in Appl. Mech. and Engng.. </note>
Reference-contexts: Fig. 1. MDB entity hierarchy, with links to a geometric modeler. 3 The full entity hierarchy allows the efficient deletion and creation of mesh entities during h-refinement and simplifies attachment of degrees of freedom to the mesh entities during p-refinement <ref> [33] </ref>. The database allows for the fast retrieval of adjacency information. Examples of available data include the list of faces bounding an element, and the edges sharing a common vertex.
Reference: [34] <author> M. S. Shephard, J. E. Flaherty, H. L. de Cougny, C. Ozturan, C. L. Bottasso, and M. W. Beall, </author> <title> Parallel automated adaptive procedures for unstructured meshes, </title> <booktitle> in: Parallel Computing in CFD, No. </booktitle> <address> R-807 (Agard, Neuilly-Sur-Seine, </address> <year> 1995) </year> <month> 6.1-6.49. </month>
Reference-contexts: Meshes are created by an automatic finite octree procedure [35]. Parallel extensions to the mesh database allow operations to be performed on distributed data and provide for the dynamic migration of finite elements [7,30]. Parallel mesh enrichment routines are used for spatial refinement and coarsening (h-refinement) <ref> [34] </ref>. Such reusable software libraries are essential to provide the ability to solve diverse problems, each of which presents its own challenges. <p> Static partitioning methods based on coordinate [4], inertial [20], and spectral [32] bisection are used to reduce communication cost when distributing initial meshes. A parallel version of the inertial partitioning method <ref> [34] </ref> may also be used for dynamic rebalancing. However, in an adaptive computation, global partitioning strategies can be costly relative to solution time. Thus, a number of iterative dynamic load balancing techniques that incrementally migrate data from heavily to lightly loaded processors have been developed [5,7,14,15,17,26,39,41]. <p> As a result, if each processor migrates to a small number of processors, such as its neighbors, the migration will scale with the number of processors [30]. 2.5 SCOREC Mesh Enrichment The SCOREC mesh enrichment <ref> [34] </ref> procedure performs spatial (h-) refinement and coarsening in parallel using error indicator information and enrichment threshold values. From this information, mesh edges are marked to be 6 Fig. 4. <p> Three dynamic load balancing schemes are available for use with PMDB data structures and mesh migration operators. Iterative Tree Balancing [30,34] (ITB) performs repeated local migrations to achieve balance. Parallel Sort Inertial Recursive Bisection <ref> [34] </ref> (PSIRB) uses IRB with a parallel sort. Octree Partitioning [17] (OCTPART) uses the octree structure underlying the mesh to achieve load balance.
Reference: [35] <author> M. S. Shephard and M. K. Georges, </author> <title> Automatic three-dimensional mesh generation by the Finite Octree technique, </title> <journal> Int. J. Numer. Meth. </journal> <volume> Engng., </volume> <month> 32 </month> <year> (1991) </year> <month> 709-749. </month>
Reference-contexts: An object-oriented, hierarchical mesh database is used to store and manipulate mesh data [3]. Meshes are created by an automatic finite octree procedure <ref> [35] </ref>. Parallel extensions to the mesh database allow operations to be performed on distributed data and provide for the dynamic migration of finite elements [7,30]. Parallel mesh enrichment routines are used for spatial refinement and coarsening (h-refinement) [34]. <p> All entities can have attached attributes such as solution and error indicator data. 2.2 SCOREC Finite Octree Automatic Mesh Generator Initial meshes are created using the SCOREC Finite Octree Automatic Mesh Generator <ref> [35] </ref>. Beginning with a geometric model of the domain obtained from CAD software, the mesh generator first discretizes the boundary and then recursively subdivides the domain into cubes called octants to create a variable level octree. The level of local subdivision is consistent with element size on the domain boundary. <p> A partitioning of the initial mesh used in Example 3 (Section 4.4) distributed with PSIRB is shown on the left of Figure 15. This partition has an MLSI of 12.9% and a GSI of 3.2%. 3.3 Octree Partitioning Octree-based partitioning [17] employs automatic octree generation procedures <ref> [35] </ref> and uses tree topology to create a one-dimensional ordering of the octree nodes. The ordered list of nodes is divided into segments corresponding to nearly equal load. Members of any given segment tend to be spatially adjacent and, thus, form a good partition.
Reference: [36] <author> H. D. Simon, </author> <title> Partitioning of unstructured problems for parallel processing, </title> <journal> Comp. Sys. </journal> <volume> Engng., </volume> <month> 2 </month> <year> (1991) </year> <month> 135-148. </month>
Reference: [37] <author> A. Sohn, R. Biswas, and H. D. Simon, </author> <title> Impact of load balancing on unstructured adaptive computations for distributed-memory multiprocessors, </title> <booktitle> in: Proc. Eighth IEEE Symposium on Parallel and Distributed Processing, </booktitle> <address> New Orleans (1996) 26-33. </address>
Reference: [38] <author> R. Van Driessche and D. Roose, </author> <title> An improved spectral bisection algorithm and its application to dynamic load balancing, </title> <booktitle> Parallel Computing, </booktitle> <month> 21 </month> <year> (1995) </year> <month> 29-48. </month>
Reference: [39] <author> V. Vidwans, Y. Kallinderis, and V. Venkatakrishnan, </author> <title> Parallel dynamic load-balancing algorithm for three-dimensional adaptive unstructured grids, </title> <journal> AIAA J., </journal> <month> 32 </month> <year> (1994) </year> <month> 497-505. </month>
Reference-contexts: Improvements in the slice-by-slice technique used by ITB for migration are necessary. Experiments with geometrical methods that use the spatial location of elements relative to the centroids of sending and receiving processors showed promise at reducing the number of processor interconnections. Vidwans et al. <ref> [39] </ref> presented divide-and-conquer load balancing methods that take advantage of the geometric information in a similar framework. Using inertial techniques in conjunction with the iterative methods should give results similar to geometrical methods while potentially costing less. Balancing methods must optimize the total of partitioning, redistribution, and computational costs.
Reference: [40] <author> C. H. Walshaw and M. Berzins, </author> <title> Dynamic load balancing for PDE solvers on adaptive unstructured meshes, </title> <journal> Concurrency: Practice and Experience, </journal> <month> 7 </month> <year> (1995) </year> <month> 17-28. </month>
Reference: [41] <author> S. R. Wheat, K. D. Devine, and A. B. MacCabe, </author> <title> Experience with automatic, dynamic load balancing and adaptive finite element computation, </title> <booktitle> in: Proc. 27th Hawaii International Conference on System Sciences, </booktitle> <month> Kihei </month> <year> (1994) </year> <month> 463-472. </month>
Reference-contexts: PMDB provides an element weighting scheme that can be used to address each of these needs. 3.1 Iterative Tree Balancing ITB follows Leiss and Reddy [26], Wheat <ref> [41] </ref>, and Devine and Flaherty [17] in that lightly loaded processors request load from their most heavily loaded neighbors. However, instead of considering an immediate neighborhood of processors, the algorithm views the requests as forming a forest of trees (Figure 5b).
Reference: [42] <author> R. D. Williams, </author> <title> Voxel databases: A paradigm for parallelism with spatial structure, </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 4 (1992) 619-636. 26 Fig. </volume> <month> 13. </month> <title> Density values for Example 2 at time t = 0:3. Shading indicates values of the density on each element. Fig. 14. Partitioning of the mesh for Example 2 using PSIRB at time t = 0:3. Shading indicates processor assignments. 27 Fig. 15. Initial meshes for Example 3 distributed onto 8 processors by PSIRB (left) and OCTPART (right). Shading indicates processor assignments. Fig. 16. Mach number with velocity vectors on the symmetry plane for Example 3. </title> <type> 28 </type>
Reference-contexts: Two-dimensional example of a distributed mesh. Arrows represent interpro--cessor pointers between boundary entities. Heavy edges and vertices indicate the unique owner of each shared boundary entity. by computing the centroid of the entity <ref> [42] </ref>. Global key generation can, thus, be replaced by the incremental and faster process of ownership regeneration of affected partition boundary entities (Section 2.4). Sets of entities on a partition boundary adjacent to a specific processor are organized as doubly linked lists (Figure 3 (a)) allowing constant-time insertion and deletion.
References-found: 42

