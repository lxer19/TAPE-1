URL: http://www.cs.columbia.edu/~cheng/ICCD97.ps.gz
Refering-URL: http://www.cs.columbia.edu/~cheng/Resume.html
Root-URL: http://www.cs.columbia.edu
Email: cheng@cs.columbia.edu  
Title: Synthesizing Iterative Functions into Delay-Insensitive Tree Circuits  
Author: Fu-Chiung Cheng 
Address: New York, NY 10027  
Affiliation: Columbia University Department of Computer Science  
Abstract: Speed, cost and correctness may be the most important factors in designing a digital system. This paper proposes a novel and general methodology to synthesize iterative functions into potentially high speed, low cost and very robust circuits, called delay-insensitive combinational tree iterative circuits. In particular, our methodology can be applied to synthesize binary addition and comparison into delay-insensitive adders and comparators. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F.-C. Cheng, S. H. Unger, M. Theobald, and W.-C. Cho. </author> <title> Delay-insensitive carry-lookahead adders. </title> <booktitle> In Proc. Int'l. Conf. VLSI Design. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1997. </year>
Reference-contexts: A detail CMOS implementation and complexity analysis of the DI adder shown in Figure 13 are given in our recent paper <ref> [1] </ref>. The logic complexity is proved to be Q (n), where n is the number of input. This proof can be extended to show that the logic complexity of DI circuits synthesized by our method is Q (n).
Reference: [2] <author> A. Davis and S. M. Nowick. </author> <title> Asynchronous circuit design: Motivation, background, and methods. </title> <editor> In G. Birtwistle and A. Davis, editors, </editor> <title> Asynchronous Digital Circuit Design, </title> <booktitle> Workshops in Computing, </booktitle> <pages> pages 1-49. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: 1. Introduction Renewed interests in asynchronous design have been increasing because asynchronous design may gracefully eliminate the problems due to the global clock <ref> [2, 4] </ref>. In an asynchronous system, its subsystems usually need their start and completion mechanisms or local clocks to synchronize with one anther. By replacing the global clock, asynchronous systems may have the following potential benefits: modularity, composability and reusability; low power consumption; average-case performance and easier technology migration.
Reference: [3] <author> J. C. Ebergen. </author> <title> From functional specification to a delay-insensitive circuit. </title> <type> Technical Report CS-89-44, </type> <institution> University of Waterloo, </institution> <month> Oct. </month> <year> 1989. </year>
Reference-contexts: By replacing the global clock, asynchronous systems may have the following potential benefits: modularity, composability and reusability; low power consumption; average-case performance and easier technology migration. Delay-insensitive (DI) circuits <ref> [3] </ref> are a subclass of asynchronous circuits. The defining property of DI circuits is that their correctness is insensitive to delays in both gate elements and connection wires. Thus, DI circuits may be the most robust circuits. The class of pure DI circuits is quite limited [7].
Reference: [4] <author> S. Hauck. </author> <title> Asynchronous design methodologies: An overview. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 83(1), </volume> <month> Jan. </month> <year> 1995. </year>
Reference-contexts: 1. Introduction Renewed interests in asynchronous design have been increasing because asynchronous design may gracefully eliminate the problems due to the global clock <ref> [2, 4] </ref>. In an asynchronous system, its subsystems usually need their start and completion mechanisms or local clocks to synchronize with one anther. By replacing the global clock, asynchronous systems may have the following potential benefits: modularity, composability and reusability; low power consumption; average-case performance and easier technology migration.
Reference: [5] <author> F. C. Hennie. </author> <title> Iterative Arrays of Logical Circuits. </title> <publisher> John Wiley & Sons, </publisher> <year> 1961. </year>
Reference-contexts: Iterative Circuits An iterative circuit is a circuit constructed through interconnecting a set of identical modules in a regular manner. Parallel binary adders and parallel binary comparators may be the most important examples whose functions can be realizable through iterative circuits. Material on this subject can be found in <ref> [5, 6, 13] </ref>. Iterative functions may be realized in a linear array of identical modules, shown in Figure 1. This circuit is called a linear iterative circuit.
Reference: [6] <author> Z. Kohavi. </author> <title> Switching and Finite Automata Theory. </title> <publisher> McGraw-Hill, </publisher> <year> 1978. </year>
Reference-contexts: Iterative Circuits An iterative circuit is a circuit constructed through interconnecting a set of identical modules in a regular manner. Parallel binary adders and parallel binary comparators may be the most important examples whose functions can be realizable through iterative circuits. Material on this subject can be found in <ref> [5, 6, 13] </ref>. Iterative functions may be realized in a linear array of identical modules, shown in Figure 1. This circuit is called a linear iterative circuit.
Reference: [7] <author> A. J. Martin. </author> <title> The limitations to delay-insensitivity in asynchronous circuits. </title> <editor> In W. J. Dally, editor, </editor> <booktitle> Sixth MIT Conference on Advanced Research in VLSI, </booktitle> <pages> pages 263-278. </pages> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Delay-insensitive (DI) circuits [3] are a subclass of asynchronous circuits. The defining property of DI circuits is that their correctness is insensitive to delays in both gate elements and connection wires. Thus, DI circuits may be the most robust circuits. The class of pure DI circuits is quite limited <ref> [7] </ref>. However, extending pure DI circuits with isochronic forks is sufficient to construct any circuit of interest. (Such circuits are sometimes called quasi-DI.) For this paper we assume isochronic forks.
Reference: [8] <author> A. J. Martin. </author> <title> Asynchronous datapaths and the design of an asynchronous adder. </title> <booktitle> Formal Methods in System Design, </booktitle> <volume> 1(1) </volume> <pages> 119-137, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: This proof can be extended to show that the logic complexity of DI circuits synthesized by our method is Q (n). The preliminary result shows that our 64-bit DI adders could be 5 times faster than DI ripple-carry adders presented in <ref> [8] </ref>. We are conducting SPICE simulation of average case performance. The delay-insensitive tree circuits synthesized by our methodology are suitable for VLSI implementation because of their regular structure and we believe our methodology can be applied in the design of high speed digital systems.
Reference: [9] <author> S. M. Nowick and D. L. Dill. </author> <title> Exact two-level minimization of hazard-free logic with multiple-input changes. </title> <booktitle> In Proc. International Conf. Computer-Aided Design (ICCAD). </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> Nov. </month> <year> 1992. </year>
Reference-contexts: The logic expressions of P i -cell and P z -cell are derived from the next state function and from outputs of the flow table, respectively. To implement the delay-insensitive P -module, hazard-free logic minimization <ref> [9] </ref> is used to guarantee no glitch can be generated in any P -module function. The delay-insensitive P -module for detecting even length 1-blocks is shown in Figure 9.
Reference: [10] <author> C. L. Seitz. </author> <title> System timing. </title> <editor> In C. A. Mead and L. A. Conway, editors, </editor> <title> Introduction to VLSI Systems, chapter 7. </title> <publisher> Addison-Wesley, </publisher> <year> 1980. </year>
Reference-contexts: In this example, the first three rows are constant rows. Step 4: Perform delay-insensitive encodings: To implement delay-insensitive circuits, the signals in the circuits must be encoded as delay-insensitive codes <ref> [10] </ref>. There are many possible delay-insensitive codes [14] that may be used. In our approach, one-hot code is used. One-hot encoded signals are applied to the flow table, state mappings and multiplication table.
Reference: [11] <author> S. H. Unger. </author> <title> Asynchronous Sequential Switching Circuits. </title> <publisher> Wiley-Interscience, John Wiley & Sons, Inc., </publisher> <address> New York, </address> <year> 1969. </year>
Reference-contexts: Delay-Insensitive Tree Circuits To synthesize an iterative function into a delay-insensitive iterative tree circuit, the iterative function is first specified by a flow table. A flow table is a two-dimensional array where columns correspond to the input states and rows correspond to the internal states <ref> [11] </ref>. The flow table which detects even length 1-blocks (EL1B detector) is shown in Figure 4. It produces the output 1 every time an even length 1-block is detected and the output 0 at all other times. <p> Synthesis Procedure We will use the even length 1-blocks detector to illustrate our methodology. The synthesis procedure consists of the following steps: Step 1: Perform state minimization: A flow table to be synthesized may be transformed into a reduced flow table by performing state minimization <ref> [11] </ref>. For example, states 1 and 2 of the flow table in Figure 4 can be merged to one state denoting that no input arrives yet or the previous input is 0. The reduced flow table is shown in Figure 5.
Reference: [12] <author> S. H. Unger. </author> <title> Tree realizations of iterative circuits. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 26(4) </volume> <pages> 365-393, </pages> <month> Apr. </month> <year> 1977. </year>
Reference-contexts: Tree Circuits for Arbitrary Iterative Functions Linear iterative circuits require n stage propagation delays for each computation. For high speed digital systems, this scheme is undesirable. Unger <ref> [12, 13] </ref> showed that any iterative function may be realized in a tree form where the propagation delay is proportional to the logarithm of n, the number of inputs, while the logic complexity is a linear function of n.
Reference: [13] <author> S. H. Unger. </author> <title> The Essence of Logic Circuits. </title> <publisher> IEEE Computer Society Press, </publisher> <address> New York, </address> <year> 1997. </year>
Reference-contexts: Iterative Circuits An iterative circuit is a circuit constructed through interconnecting a set of identical modules in a regular manner. Parallel binary adders and parallel binary comparators may be the most important examples whose functions can be realizable through iterative circuits. Material on this subject can be found in <ref> [5, 6, 13] </ref>. Iterative functions may be realized in a linear array of identical modules, shown in Figure 1. This circuit is called a linear iterative circuit. <p> Tree Circuits for Arbitrary Iterative Functions Linear iterative circuits require n stage propagation delays for each computation. For high speed digital systems, this scheme is undesirable. Unger <ref> [12, 13] </ref> showed that any iterative function may be realized in a tree form where the propagation delay is proportional to the logarithm of n, the number of inputs, while the logic complexity is a linear function of n.
Reference: [14] <author> T. Verhoeff. </author> <title> Delay-insensitive codesan overview. </title> <journal> Distributed Computing, </journal> <volume> 3(1) </volume> <pages> 1-8, </pages> <year> 1988. </year>
Reference-contexts: In this example, the first three rows are constant rows. Step 4: Perform delay-insensitive encodings: To implement delay-insensitive circuits, the signals in the circuits must be encoded as delay-insensitive codes [10]. There are many possible delay-insensitive codes <ref> [14] </ref> that may be used. In our approach, one-hot code is used. One-hot encoded signals are applied to the flow table, state mappings and multiplication table. For example, the state signals are encoded by the one-hot code, C 1 i C 2 i , shown in Figure 8 (a).
Reference: [15] <author> W. M. Waite. </author> <title> The production of completion signals by asynchronous, iterative networks. </title> <journal> IRE Transactions on Electronic Computers, </journal> <volume> 13(2) </volume> <pages> 83-86, </pages> <month> Apr. </month> <year> 1964. </year>
Reference-contexts: Step 7: Construct speed-up circuits: Waite pointed out that the constant columns in a flow table may be used to speed up linear iterative circuits <ref> [15] </ref>. By observing the reachability graph in Figure 6 (a), we find that the constant rows in a multiplication table are derived from the constant column (s) of the corresponding flow table and each constant row may be used to speed up the operations of iterative tree circuits.
References-found: 15

