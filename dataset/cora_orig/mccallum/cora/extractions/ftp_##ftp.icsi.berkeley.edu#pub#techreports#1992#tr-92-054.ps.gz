URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1992/tr-92-054.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1992.html
Root-URL: http://www.icsi.berkeley.edu
Title: Process Grammar Processor: An Architecture for a Parallel Parser  
Author: Massimo Marino AITech s.n.c., Vicolo S. Cosimo 
Address: I 1947 Center Street Suite 600 Berkeley, California 94704  1947 Center Street, Suite 600, Berkeley CA 94704-1105, and  2, 56125 Pisa, Italy.  
Affiliation: INTERNATIONAL COMPUTER SCIENCE INSTITUTE  International Computer Science Institute,  
Pubnum: TR-92-054  
Email: E-Mail: massimom@icnucevm.cnuce.cnr.it  
Phone: 1-510-642-4274 FAX 1-510-643-7684  
Date: August 1992  
Abstract: A parallel architecture of a parser for Natural Language is described. A serial architecture has been already realized [6] and is currently used in the Process Grammar Development Environment (PGDE) [8], a system for the construction and testing of Natural Language grammars and the generation of the corresponding parsers. The PGDE is built around the Process Grammar Processor (PGP) running a model of grammar suited for the generation of Natural Language applications. The grammar model, named Process Grammar (PG), is an extension of an augmented context-free phrase-structure grammar, and the parser is designed to use such a grammar model. A PG is a set of rules that are treated by the processor as static descriptors of dynamic processes that are scheduled and applied if the conditions for their execution hold: from this the name Process Grammar. In this report the PG model is extended in order to allow a more structured and modular construction of grammars, even of big dimensions, keeping separated parsing control, and syntactic and semantic specifications, partitioning a PG in clusters of rules, completely independent one from each other, carrying on their own dedicated recognition of specific parts of speech. The main steps of the serial PGP are realized in the parallel architecture as parallel processes that communicate between them the results of their computations using a message passing protocol. This allows the realization of some interesting parsing strategies and the implementation of parsing mechanisms extending the recognition 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Aho, A., V., and Ullman, J., D. </author> <year> (1972). </year> <title> The Theory of Parsing, Translation, and Compiling. Volume 1: Parsing. </title> <publisher> Prentice Hall. </publisher> <address> Englewood Cliffs, NJ. </address>
Reference: [2] <author> Dassow, J., and Paun, G. </author> <year> (1989). </year> <title> Regulated Rewriting in Formal Language Theory. </title> <journal> EATCS. </journal> <volume> Vol. 18. </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin. </address>
Reference-contexts: Some non-standard grammar models that restrict in some ways the rewriting actions for a rule have been studied <ref> [2] </ref>, such as matrix and programmed grammars, and cooperating grammar systems [7]. These restrictions usually provide the sequence of rules in a derivation, which rules should follow next, which rules must be chosen depending on the current derivation string.
Reference: [3] <author> Grishman, R. </author> <year> (1976). </year> <title> A Survey of Syntactic Analysis Procedures for Natural Language. </title> <journal> American Journal of Computational Linguistics. </journal> <volume> Microfiche 47. </volume> <pages> 2-96. </pages>
Reference-contexts: Both the extensions allow the implementation of parsing strategies and mechanisms useful in facing some phenomena occurring in Natural Languages, whose treatment can be realized by adding some control information to a set of rules without affecting the syntactic or semantic information that is kept separated. Following in part <ref> [3] </ref>, it is possible to classify parsing algorithms in three main classes, depending on the kind of the algorithm: * Serial-Serial : A serial algorithm that carries on one analysis at a time (with backtracking); * Serial-Parallel : A serial algorithm that carries on all possible analyses altogether (no backtracking); parallelism
Reference: [4] <author> Kay, M. </author> <year> (1980). </year> <title> Algorithm Schemata and Data Structures in Syntactic Processing. </title> <editor> In Grosz, B., J., et al. (Eds.), </editor> <booktitle> Readings in Natural Language Processing. </booktitle> <publisher> Morgan Kauf-mann, </publisher> <address> Los Altos, CA. 35-70. </address> <note> Also CSL-80-12, Xerox PARC, </note> <institution> Palo Alto, </institution> <address> CA. </address>
Reference: [5] <author> Marino, M. </author> <year> (1989). </year> <title> A Framework for the Development of Natural Language Grammars. </title> <booktitle> In Proceedings of First International Workshop on Parsing Technologies. </booktitle> <address> CMU, Pittsburgh, PA. </address> <pages> 350-360. </pages>
Reference-contexts: This mechanism, named message passing, makes possible to transmit a message, consisting of a feature structure or a set of feature structures, from the process environment of a fired rule, to another rule that will be fired next. For a more detailed discussion about message passing see <ref> [5] </ref>. Therefore, the message passing is asynchronous, and it can be used also whenever a rule pre-schedules another one, when a FS to be passed to the pre-scheduled rule is specified.
Reference: [6] <author> Marino, M. </author> <year> (1990). </year> <title> Bottom-Up Parsing Extending Context-Freeness in a Process Grammar Processor. </title> <booktitle> In Proceedings of 28th Annual Meeting of the ACL. </booktitle> <address> Pittsburgh, PA. </address>
Reference: [7] <author> Meersman, R., and Rozenberg, G. </author> <year> (1978). </year> <title> Cooperating Grammar Systems. </title> <editor> In Winkowski, J. (Ed.), </editor> <booktitle> Proceedings of 7th Mathematical Foundations of Computer Science. </booktitle> <pages> 364-373. </pages>
Reference-contexts: Some non-standard grammar models that restrict in some ways the rewriting actions for a rule have been studied [2], such as matrix and programmed grammars, and cooperating grammar systems <ref> [7] </ref>. These restrictions usually provide the sequence of rules in a derivation, which rules should follow next, which rules must be chosen depending on the current derivation string.
Reference: [8] <author> PGDE: </author> <title> Process Grammar Development Environment User Manual. </title> <address> AITech s.n.c., Pisa, Italy. </address>
Reference-contexts: There is a set of functions that can be used in the actions for handling this set of data; they are not described here, but a description of them is in <ref> [8] </ref>.
Reference: [9] <author> Shann, P. </author> <year> (1989). </year> <title> The Selection of a Parsing Strategy for an On-Line Machine Translation System in a Sublanguage Domain. A New Practical Comparison. </title> <booktitle> In Proceedings of First International Workshop on Parsing Technologies. </booktitle> <address> CMU, Pittsburgh, PA. </address> <pages> 264-276. </pages>
Reference: [10] <author> Slocum, J. </author> <year> (1981). </year> <title> A Practical Comparison of Parsing Strategies. </title> <booktitle> In Proceedings of 19th Annual Meeting of the ACL. </booktitle> <address> Stanford, CA. </address> <pages> 1-6. 41 </pages>
Reference: [11] <author> Wiren, M. </author> <year> (1987). </year> <title> A Comparison of Rule-Invocation Strategies in Context-Free Chart parsing. </title> <booktitle> In Proceedings of the 3rd Conference of the European Chapter of the ACL. Copenhagen, Denmark. </booktitle> <pages> 226-233. 42 </pages>
References-found: 11

