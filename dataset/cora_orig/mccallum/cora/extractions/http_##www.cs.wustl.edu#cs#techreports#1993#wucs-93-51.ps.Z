URL: http://www.cs.wustl.edu/cs/techreports/1993/wucs-93-51.ps.Z
Refering-URL: http://www.cs.wustl.edu/cs/cs/publications.html
Root-URL: 
Title: FrIL|A Fractal Intermediate Language  
Author: Ron Cytron David Shields 
Date: July 15, 1993  
Address: Campus Box 1045 St. Louis, Missouri 63130  P.O. Box 704 Yorktown Heights, NY 10598  
Affiliation: Washington University  IBM Research  
Abstract: This document describes the motivation, language description, and experience using FrIL, an intermediate language for a compiler's "middle-end". FrIL has successfully supported a two-semester compiler construction sequence, where the first semester included code generation from a C-like language and the second semester included advanced data flow analysis and program transformation.
Abstract-found: 1
Intro-found: 1
Reference: [App92] <author> Andrew W. Appel. </author> <title> Compiling with Continuations. </title> <publisher> Cambridge University Press, </publisher> <year> 1992. </year>
Reference-contexts: The IL should probably not be any particular programming language. Although persuasive arguments have been made in favor of adopting some programming languages (e.g., ML <ref> [App92] </ref>), as an IL, the storage model is often inappropriate. Moreover, an IL can demand a level of specificity from its front-ends that would be embarassing to require of humans (e.g., alias relations). 5. The IL should be sufficiently general to represent important aspects of multiple front-end languages. 6.
Reference: [ASU86] <author> A.V. Aho, R. Sethi, and J.D. Ullman. </author> <booktitle> Compilers: Principles, Techniques, and Tools. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1986. </year>
Reference-contexts: This front-end is useful for measuring statistics of real Fortran programs. The parser for this front-end is actually the PTran system at IBM Research. The program optimizations implemented to date include * Constant propagation [WZ91]. * Register allocation [CAC + 81]. * Dead code elimination <ref> [ASU86] </ref>. * Incremental may-alias accommodation [CG93]. A FrIL interpreter can execute a FrIL program, whose behavior is monitored by: construct 11 (Debug &lt;level&gt;) sets the interpreter trace level to nonnegative &lt;level&gt;. Level 0 produces no output; level 9 traces stack and storage activity.
Reference: [CAC + 81] <author> G. J. Chaitin, M. A. Auslander, A. K. Chandra, J. Cocke, M. E. Hopkins, and P. W. Markstein. </author> <title> Register allocation via coloring. </title> <journal> Computer Languages, </journal> <volume> 6(1) </volume> <pages> 47-57, </pages> <month> January </month> <year> 1981. </year>
Reference-contexts: This front-end is useful for measuring statistics of real Fortran programs. The parser for this front-end is actually the PTran system at IBM Research. The program optimizations implemented to date include * Constant propagation [WZ91]. * Register allocation <ref> [CAC + 81] </ref>. * Dead code elimination [ASU86]. * Incremental may-alias accommodation [CG93]. A FrIL interpreter can execute a FrIL program, whose behavior is monitored by: construct 11 (Debug &lt;level&gt;) sets the interpreter trace level to nonnegative &lt;level&gt;. Level 0 produces no output; level 9 traces stack and storage activity.
Reference: [CG93] <author> Ron Cytron and Reid Gershbein. </author> <title> Efficiently accommodating may-alias information in ssa form. </title> <booktitle> Proceedings of the ACM Conference on Programming Language Design and Implementation, </booktitle> <year> 1993. </year>
Reference-contexts: The parser for this front-end is actually the PTran system at IBM Research. The program optimizations implemented to date include * Constant propagation [WZ91]. * Register allocation [CAC + 81]. * Dead code elimination [ASU86]. * Incremental may-alias accommodation <ref> [CG93] </ref>. A FrIL interpreter can execute a FrIL program, whose behavior is monitored by: construct 11 (Debug &lt;level&gt;) sets the interpreter trace level to nonnegative &lt;level&gt;. Level 0 produces no output; level 9 traces stack and storage activity.
Reference: [WZ91] <author> M. N. Wegman and F. K. Zadeck. </author> <title> Constant propagation with conditional branches. </title> <journal> ACM Trans. on Programming Languages and Systems, </journal> <volume> 13(2) </volume> <pages> 181-210, </pages> <month> April </month> <year> 1991. </year> <month> 12 </month>
Reference-contexts: This front-end is useful for measuring statistics of real Fortran programs. The parser for this front-end is actually the PTran system at IBM Research. The program optimizations implemented to date include * Constant propagation <ref> [WZ91] </ref>. * Register allocation [CAC + 81]. * Dead code elimination [ASU86]. * Incremental may-alias accommodation [CG93]. A FrIL interpreter can execute a FrIL program, whose behavior is monitored by: construct 11 (Debug &lt;level&gt;) sets the interpreter trace level to nonnegative &lt;level&gt;.
References-found: 5

