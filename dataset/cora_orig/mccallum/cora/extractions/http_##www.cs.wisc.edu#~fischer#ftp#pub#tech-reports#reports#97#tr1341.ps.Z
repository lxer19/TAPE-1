URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/reports/97/tr1341.ps.Z
Refering-URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/reports/97/
Root-URL: http://www.cs.wisc.edu
Email: jalbert@acm.org, fyannis,raghug@cs.wisc.edu  
Title: Conjunctive Query Equivalence of Keyed Relational Schemas  
Author: Joseph Albert, Yannis Ioannidis, Raghu Ramakrishnan 
Address: 1210 W. Dayton St. Madison, WI 53706  
Affiliation: Computer Sciences Dept. University of Wisconsin  
Abstract: An abbreviated version of this paper is to appear in PODS'97 Abstract The notion of when two schemas are equivalent is fundamental to database design, schema integration, and data model translation. An important notion of schema equivalence, query equivalence was introduced in [2], and used to evaluate the correctness of schema transformations. The logically equivalent notion of calculous equivalence, as well as three progressively weaker notions of schema equivalence were introduced in 1984 by Hull [8, 9], who showed that two schemas with no dependencies are equivalent (under all four notions of equivalence) if and only if they are identical (up to renaming and re-ordering of attributes and relations). Hull also conjectured that the same result holds for schemas with primary keys. In this work, we resolve the conjecture in the affirmative for the case of query equivalence based on mappings using conjunctive relational queries with equality selections. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A.K. Arora and C.R. Carlson. </author> <title> The information preserving properties of relational database transformations. </title> <booktitle> In Proc. of the Int'l VLDB Conf., </booktitle> <year> 1979. </year>
Reference-contexts: In general, such an assumption is not possible in multidatabase schema integration. Moreover, closed-form characterizations of this form of equivalence are not available, although an algorithm to test for such equivalence is given in [5]. Similar notions of equivalence were defined in <ref> [1, 13] </ref>. Another notion of equivalence that has been proposed considers two schemas to be equivalent if there is a bijection between the set of database instances of one schema and the set of instances of the other [12, 14].
Reference: [2] <author> P. Atzeni, G. Aussiello, C. Batini, and M. Moscarini. </author> <title> Inclusion and equivalence between relational database schemes. </title> <journal> Theoretical Computer Science, </journal> <volume> 19 </volume> <pages> 267-285, </pages> <year> 1982. </year>
Reference-contexts: Moreover, if the domain of values available to store in a database is infinite, then all schemas are equivalent. The limitations of these notions of equivalence are overcome by the notion of query equivalence that was introduced in <ref> [2] </ref>, and studied by Hull, who also introduced three progressively less restrictive notions of equivalence, Z-generic equivalence, Z-internal equivalence, and absolute equivalence, and provided a rich foundation of theoretical results on schema equivalence [9]. <p> Definition: If S 1 L S 2 and S 2 L S 1 , then we say that the two schemas are L-equivalent, written S 1 L S 2 . The notions of L-dominance and L-equivalence were introduced in <ref> [2] </ref>. We sometimes write S 1 S 2 , or S 1 S 2 , when the particular language L is clear from the context. The following result is proved in [9].
Reference: [3] <author> C. Batini, M. Lenzerini, and S. B. Navathe. </author> <title> A comparative analysis of methodologies for database schema integration. </title> <journal> ACM Computing Surveys, </journal> <volume> 18(4) </volume> <pages> 323-364, </pages> <month> December </month> <year> 1986. </year>
Reference-contexts: Informally, two schemas are equivalent if either one can simulate the other in terms of their capacities to store database instances and support queries. An understanding of schema equivalence is important for schema integration in heterogeneous multidatabase systems, <ref> [3, 15] </ref>, where two schemas with dependencies describing the semantics of the data are given, and one would like to integrate the schemas.
Reference: [4] <author> C. Beeri, P. A. Bernstein, and N. Goodman. </author> <title> A sophisticate's introduction to database normalization theory. </title> <booktitle> In Proc. of the Int'l VLDB Conf., </booktitle> <pages> pages 113-124, </pages> <year> 1978. </year>
Reference-contexts: In particular, one would like to have a set of transformations for which all schemas equivalent to a given schema can be generated by applying some sequence of transformations from the set. The notion of schema equivalence also is important in database design <ref> [4, 7, 10, 16] </ref> where, given a schema proposed for some application, one may want to choose an equivalent schema that satisfies one or more desirable normal forms.
Reference: [5] <author> C. Beeri, A.O. Mendelzon, Y. Sagiv, and J.D. Ullman. </author> <title> Equivalence of relational database schemes. </title> <journal> SIAM Journal on Computing, </journal> <volume> 10(2) </volume> <pages> 352-370, </pages> <month> May </month> <year> 1981. </year>
Reference-contexts: Subsequently, a notion of schema equivalence was proposed in which two schemas, both 3 of which are decompositions of the same universal relation, are equivalent if the set of instances of the universal relation for which the decomposition is lossless is the same for both schemas <ref> [5, 11] </ref>. That is, either schema can represent the same set of universal instances. This notion of equivalence was used for database design, but has the limitation that it only applies to pairs of schemas both of which are projections of the same universal relation scheme. <p> In general, such an assumption is not possible in multidatabase schema integration. Moreover, closed-form characterizations of this form of equivalence are not available, although an algorithm to test for such equivalence is given in <ref> [5] </ref>. Similar notions of equivalence were defined in [1, 13]. Another notion of equivalence that has been proposed considers two schemas to be equivalent if there is a bijection between the set of database instances of one schema and the set of instances of the other [12, 14].
Reference: [6] <author> E. F. Codd. </author> <title> A relational model of data for large shared data banks. </title> <journal> Communications of the ACM, </journal> <year> 1970. </year> <month> 26 </month>
Reference-contexts: We assume that the reader is familiar with the relational model of data <ref> [6] </ref>. A domain is a countably infinite set of atomic values. A collection of attribute types over some domain D is a finite collection of disjoint subsets of D. Attribute types are also (countably) infinite.
Reference: [7] <author> E.F. Codd. </author> <title> Further normalization of the data base relational model. </title> <editor> In R. Rustin, editor, </editor> <booktitle> Data Base Systems, </booktitle> <pages> pages 33-64. </pages> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1972. </year>
Reference-contexts: In particular, one would like to have a set of transformations for which all schemas equivalent to a given schema can be generated by applying some sequence of transformations from the set. The notion of schema equivalence also is important in database design <ref> [4, 7, 10, 16] </ref> where, given a schema proposed for some application, one may want to choose an equivalent schema that satisfies one or more desirable normal forms. <p> Indeed, schema equivalence was first proposed in this context by Codd <ref> [7] </ref>, wherein two schemas are considered equivalent if they can support the same queries.
Reference: [8] <author> R. Hull. </author> <title> Relative information capacity of simple relational database schemata. </title> <booktitle> In Proc. of the ACM Conf. on Principles of Database Systems, </booktitle> <pages> pages 97-109, </pages> <address> Waterloo, </address> <month> April </month> <year> 1984. </year>
Reference: [9] <author> R. Hull. </author> <title> Relative information capacity of simple relational database schemata. </title> <journal> SIAM Journal on Computing, </journal> <volume> 15(3) </volume> <pages> 846-886, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: of these notions of equivalence are overcome by the notion of query equivalence that was introduced in [2], and studied by Hull, who also introduced three progressively less restrictive notions of equivalence, Z-generic equivalence, Z-internal equivalence, and absolute equivalence, and provided a rich foundation of theoretical results on schema equivalence <ref> [9] </ref>. Hull also showed that for relational schemas with no dependencies, all four notions of schema equivalence are logically equivalent, and that two relational schemas with no dependencies are equivalent if and only if they are identical, up to renaming and reordering of attributes and relations. <p> We resolve this conjecture in the affirmative for conjunctive query equivalence, where instance mappings are conjunctive relational algebra queries with equality selections. (Query equivalence in <ref> [9] </ref> uses the full relational algebra for such mappings.) Such a result demonstrates that two keyed schemas support the same conjunctive queries if 4 and only if there are identical, up to renaming and re-ordering of attributes and relations. <p> The notions of L-dominance and L-equivalence were introduced in [2]. We sometimes write S 1 S 2 , or S 1 S 2 , when the particular language L is clear from the context. The following result is proved in <ref> [9] </ref>. Theorem (Hull 1986) If L is the relational algebra, S 1 and S 2 are schemas with no dependencies, then S 1 L S 2 , if and only if S 1 and S 2 are identical up to renaming and re-ordering of attributes and relations. <p> The fact that the set of attributes of any relation in either schema forms a key is implicit. Thus, from the result of Hull <ref> [9] </ref> mentioned above, that states that equivalent unkeyed schemas are identical up to renaming of attributes and relations and reordering of attributes, we conclude that (S 1 ) and (S 2 ) must be identical, up to renaming of attributes and relations and re-ordering of attributes.
Reference: [10] <author> T.-W. Ling, F.W. Tompa, and T. Kameda. </author> <title> An improved third normal form for relational databases. </title> <journal> ACM TODS, </journal> <volume> 6(2), </volume> <year> 1981. </year>
Reference-contexts: In particular, one would like to have a set of transformations for which all schemas equivalent to a given schema can be generated by applying some sequence of transformations from the set. The notion of schema equivalence also is important in database design <ref> [4, 7, 10, 16] </ref> where, given a schema proposed for some application, one may want to choose an equivalent schema that satisfies one or more desirable normal forms.
Reference: [11] <author> D. Maier, A.O. Mendelzon, F. Sadri, and J.D. Ullman. </author> <title> Adequacy of decompositions of relational databases. </title> <journal> J. of Computer and System Sciences, </journal> <volume> 21(3) </volume> <pages> 368-379, </pages> <month> December </month> <year> 1980. </year>
Reference-contexts: Subsequently, a notion of schema equivalence was proposed in which two schemas, both 3 of which are decompositions of the same universal relation, are equivalent if the set of instances of the universal relation for which the decomposition is lossless is the same for both schemas <ref> [5, 11] </ref>. That is, either schema can represent the same set of universal instances. This notion of equivalence was used for database design, but has the limitation that it only applies to pairs of schemas both of which are projections of the same universal relation scheme.
Reference: [12] <author> R. J. Miller, Y. E. Ioannidis, and R. Ramakrishnan. </author> <title> The use of information capacity in schema integration and translation. </title> <booktitle> In Proc. of the Int'l VLDB Conf., </booktitle> <address> Dublin, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: Similar notions of equivalence were defined in [1, 13]. Another notion of equivalence that has been proposed considers two schemas to be equivalent if there is a bijection between the set of database instances of one schema and the set of instances of the other <ref> [12, 14] </ref>. However, this simply means that the set of instances of one schema has the same cardinality as the set of instances of the other schema. Moreover, if the domain of values available to store in a database is infinite, then all schemas are equivalent.
Reference: [13] <author> J. Rissanen. </author> <title> On equivalences of database schemes. </title> <booktitle> In Proc. of the ACM Conf. on Principles of Database Systems, </booktitle> <address> Los Angeles, CA, </address> <month> March </month> <year> 1982. </year>
Reference-contexts: In general, such an assumption is not possible in multidatabase schema integration. Moreover, closed-form characterizations of this form of equivalence are not available, although an algorithm to test for such equivalence is given in [5]. Similar notions of equivalence were defined in <ref> [1, 13] </ref>. Another notion of equivalence that has been proposed considers two schemas to be equivalent if there is a bijection between the set of database instances of one schema and the set of instances of the other [12, 14].
Reference: [14] <author> A. Rosenthal and D. Reiner. </author> <title> Theoretically sound transformations for practical database design. </title> <editor> In Salvatore T. March, editor, </editor> <booktitle> Proc. of the Int'l Conf. on the Entity-Relationship Approach, </booktitle> <pages> pages 115-131, </pages> <address> NYC, NY, 1987. </address> <publisher> Elsevier Science Publishers B. V. (North-Holland). </publisher>
Reference-contexts: Similar notions of equivalence were defined in [1, 13]. Another notion of equivalence that has been proposed considers two schemas to be equivalent if there is a bijection between the set of database instances of one schema and the set of instances of the other <ref> [12, 14] </ref>. However, this simply means that the set of instances of one schema has the same cardinality as the set of instances of the other schema. Moreover, if the domain of values available to store in a database is infinite, then all schemas are equivalent.
Reference: [15] <author> A. P. Sheth and J. A. Larson. </author> <title> Federated database systems for managing distributed, heterogeneous, and autonomous databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(3) </volume> <pages> 183-236, </pages> <year> 1990. </year>
Reference-contexts: Informally, two schemas are equivalent if either one can simulate the other in terms of their capacities to store database instances and support queries. An understanding of schema equivalence is important for schema integration in heterogeneous multidatabase systems, <ref> [3, 15] </ref>, where two schemas with dependencies describing the semantics of the data are given, and one would like to integrate the schemas.
Reference: [16] <author> C. Zaniolo. </author> <title> A new normal form for the design of relational database schemata. </title> <journal> ACM TODS, </journal> <volume> 7(3) </volume> <pages> 489-499, </pages> <year> 1982. </year>
Reference-contexts: In particular, one would like to have a set of transformations for which all schemas equivalent to a given schema can be generated by applying some sequence of transformations from the set. The notion of schema equivalence also is important in database design <ref> [4, 7, 10, 16] </ref> where, given a schema proposed for some application, one may want to choose an equivalent schema that satisfies one or more desirable normal forms.
References-found: 16

