URL: http://www.cs.wustl.edu/~suri/psdir/tiling.ps
Refering-URL: http://www.cs.wustl.edu/~suri/research.html
Root-URL: http://www.cs.wustl.edu
Title: Rectangular Tiling in Multi-Dimensional Arrays  
Author: Adam Smith Subhash Suri 
Abstract: We study the following tiling problem in d dimensions: given a d-dimensional rectangular array of non-negative numbers and an integer p, partition the array into at most p rectangular subarrays so that the maximum weight of any subarray is minimized; the weight of a subarray is the sum of its elements. The rectangular tiling problem is motivated by applications in data mining, data partitioning, and video compression. Recently, Khanna, Muthukrishnan, and Paterson [SODA '98], showed that the tiling problem is NP-Complete and gave a 2:5-approximation algorithm for d = 2. In this paper, we extend their result to multidimensional arrays, and give an algorithm with approximation ratio ( d+3 2 ), for d 2. The algorithm can be implemented to run in worst-case time O(N + p log N ) time, where N is the size of the array, and the constant is of the order d!. We also obtain a similar algorithm for the dual tiling problem, where the goal is to compute a tiling of weight at most W using as few tiles as possible. Our algorithm yields an approximation factor (2d + 1). We implemented our algorithm and ran simulation tests on multidimensional arrays with random data. In our limited experiments, the algorithm always produced approximations close to two. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Agrawal, T. Imielinski and A. Swami. </author> <title> Database Mining: a performance perspective. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 21(4), </volume> <pages> pp. 671-696, </pages> <year> 1992. </year>
Reference: [2] <author> S. Khanna, S. Muthukrishnan and M. Paterson. </author> <title> On Approximating Rectangular Tiling and Packing. </title> <booktitle> Proc. 9th Symposium on Discrete Algorithms, </booktitle> <pages> pp. 384-393, </pages> <year> 1998. </year>
Reference-contexts: The rectangular tiling problems were introduced by Khanna, Muthukrishnan, and Paterson <ref> [2] </ref>. They describe a variety of application scenarios for the rectangular tiling and packing problems, and we refer the reader to their paper for more details about these applications. Briefly speaking, the rectangular tiling problem can be used to construct so-called "equi-depth" histograms in multi-attribute databases. <p> The rectangular tiling can also be thought of as a variant of the voting district problem|partition a set (array) into p most uniform subsets. The references [5, 6] provide additional links to work on database query optimizations using histograms. It was shown in <ref> [2] </ref> that both primal and dual tiling problems are NP-Complete even for dimension d = 2. In fact they show that it is not possible to approximate the tiling problem to a ratio better then 1:25. The main contribution of Khanna et al. [2] lies in a simple greedy heuristic that <p> It was shown in <ref> [2] </ref> that both primal and dual tiling problems are NP-Complete even for dimension d = 2. In fact they show that it is not possible to approximate the tiling problem to a ratio better then 1:25. The main contribution of Khanna et al. [2] lies in a simple greedy heuristic that gives constant approximation bounds for the tiling and the dual tiling problems in two dimensions (d = 2). <p> The algorithms run in near-linear time. In the case of dual tiling, an improved approximation ratio is possible, albeit only with impractically high running time <ref> [2] </ref>. 1 2 In this paper, we generalize the results of [2] to d dimensions, for d 2, where d is considered a constant. Our main result is an ( d+3 2 )-approximation algorithm for the rectangular tiling problem, which matches the 5=2-approximation bound of [2] for d = 2. <p> The algorithms run in near-linear time. In the case of dual tiling, an improved approximation ratio is possible, albeit only with impractically high running time <ref> [2] </ref>. 1 2 In this paper, we generalize the results of [2] to d dimensions, for d 2, where d is considered a constant. Our main result is an ( d+3 2 )-approximation algorithm for the rectangular tiling problem, which matches the 5=2-approximation bound of [2] for d = 2. <p> with impractically high running time <ref> [2] </ref>. 1 2 In this paper, we generalize the results of [2] to d dimensions, for d 2, where d is considered a constant. Our main result is an ( d+3 2 )-approximation algorithm for the rectangular tiling problem, which matches the 5=2-approximation bound of [2] for d = 2. Our algorithm follows the basic strategy of Khanna et al., but works by recursively solving the lower-dimensional subproblems instead of a flat end-game case analysis. <p> We also obtain a similar algorithm for the dual tiling problem, where the goal is to compute a tiling of weight at most W using as few tiles as possible. Our algorithm yields an approximation factor (2d + 1), which generalizes the 5-approximation bound of <ref> [2] </ref> in two dimensions. We implemented our algorithm and ran simulation tests on multidimensional arrays with random data. In our limited experiments, the algorithm always produced approximations close to two. 2 Coarse Partitioning Consider a d-dimensional array A, whose elements are nonnegative real numbers. <p> Given an array A and a positive integer p, the rectangular tiling problem is to find a minimum weight tiling of A using at most p tiles (subarrays), where p is an input parameter. The problem is NP-Complete, as shown in <ref> [2] </ref>, even for d = 2. So, we will focus on approximation algorithms. We say that an algorithm achieves fi-approximation for the rectangular tiling problem if it produces a tiling of weight at most fi times the optimal weight. <p> In the two-dimensional case, Khanna et al. <ref> [2] </ref> were able to use a simple case analysis to tile the medium tiles. We present a simple recursive method for tiling medium tiles, which avoid the case analysis, and admits a simple analysis. 3 3 Fine Partitioning The procedure Fine-Tile tiles each non-heavy sub-array independently. <p> Let us assume, following Khanna et al. <ref> [2] </ref>, an oracle that returns the total weight of any subarray in O (2 d ) time, given the two opposite corners of the subarray's main diagonal. Now, the total number of heavy cuts made during the algorithm is clearly no more than p. <p> Nevertheless the results show that the greedy algorithm tends to produce approximation ratio of about 2. 6 Discussion and Future Work We have shown that a slight modification of the greedy algorithm in <ref> [2] </ref> solves the rectangular tiling, and its dual counterpart, in multi-dimensional arrays. While the algorithm itself is a simple, and natural, extension of the algorithm in [2], we believe that our main contribution lies in our analysis of the algorithm. <p> to produce approximation ratio of about 2. 6 Discussion and Future Work We have shown that a slight modification of the greedy algorithm in <ref> [2] </ref> solves the rectangular tiling, and its dual counterpart, in multi-dimensional arrays. While the algorithm itself is a simple, and natural, extension of the algorithm in [2], we believe that our main contribution lies in our analysis of the algorithm. The analysis uses some geometric tools, such as arrangements induced by hyperplanes, and various combinatorial facts associated with the cell populations in the arrangements.
Reference: [3] <author> H. Hardy, J. E. Littlewood and G. Polya. </author> <title> Inequalities. </title> <publisher> Cambridge University Press, </publisher> <year> 1988. </year>
Reference: [4] <institution> High Performance Fortran Home Page. </institution> <note> http://www.crpc.rice.edu/HPFF/home.html </note>
Reference-contexts: 1 Introduction Applications in data mining, data partitioning, and video compression by block matching often require partitioning an array into multiple subarrays of near-uniform size. High performance computing languages, for instance, allow programmers to map multidimensional data onto a logical set of processors, for the purpose of load-balancing. (See <ref> [4] </ref> and [9] for examples of such programming language environments.) If a system has p processors and data is stored in a d-dimensional array, where each array entry represents the work load, then the load balancing problem can be formulated as a rectangular tiling problem. fl Research supported by NSF grants
Reference: [5] <author> H. V. Jagdish, N. Koudas, S. Muthukrishnan, V. Poos-ala, K. Sevcik, and T. Suel. </author> <title> Optimal Histograms with Quality Guarantees. </title> <booktitle> Proc. 24th VLDB Conference, </booktitle> <year> 1998. </year>
Reference-contexts: Recently, however, there has been interest in capturing joint frequency distributions, which leads to histograms over multiple numerical attributes. The rectangular tiling can also be thought of as a variant of the voting district problem|partition a set (array) into p most uniform subsets. The references <ref> [5, 6] </ref> provide additional links to work on database query optimizations using histograms. It was shown in [2] that both primal and dual tiling problems are NP-Complete even for dimension d = 2.
Reference: [6] <author> R. P. Kooi. </author> <title> The optimization of queries in relational databases. </title> <type> Ph.D. Thesis, </type> <institution> Case Western Reserve University, </institution> <year> 1980. </year>
Reference-contexts: Recently, however, there has been interest in capturing joint frequency distributions, which leads to histograms over multiple numerical attributes. The rectangular tiling can also be thought of as a variant of the voting district problem|partition a set (array) into p most uniform subsets. The references <ref> [5, 6] </ref> provide additional links to work on database query optimizations using histograms. It was shown in [2] that both primal and dual tiling problems are NP-Complete even for dimension d = 2.
Reference: [7] <author> J. S. B. Mitchell. </author> <title> Guillotine Subdivisions Approximate Polygonal Subdivisions: A Simple New Method for the Geometric k-MST Problem. </title> <booktitle> Proc. 7th Symposium on Discrete Algorithms, </booktitle> <pages> pp. 402-408, </pages> <year> 1996. </year>
Reference-contexts: It remains an interesting open problem if an approximation ratio independent of d is possible for general d. We note that our algorithm only generates hierar 9 chical tilings, also known as Guillotine Subdivisions <ref> [7] </ref>. Such tilings can be computed optimally by dynamic programming in fi (N 2 ) time. The dynamic programming algorithm is an order of magnitude slower than the greedy algorithm, and it is not known if the former achieves a better ratio in the worst-case than the greedy algorithm.
Reference: [8] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: An Introduction. </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1985. </year>
Reference: [9] <author> H. Zima, H. bast and M. Gerndt. </author> <title> Superb: A tool for semi-automatic MIMD/AIMD parallelization. </title> <booktitle> Parallel Computing, </booktitle> <pages> pp. 1-18, </pages> <year> 1986. </year>
Reference-contexts: High performance computing languages, for instance, allow programmers to map multidimensional data onto a logical set of processors, for the purpose of load-balancing. (See [4] and <ref> [9] </ref> for examples of such programming language environments.) If a system has p processors and data is stored in a d-dimensional array, where each array entry represents the work load, then the load balancing problem can be formulated as a rectangular tiling problem. fl Research supported by NSF grants 9628190 and
References-found: 9

