URL: http://www.cs.cornell.edu/Info/People/kguo/papers/icdcs97_dlwg.ps
Refering-URL: http://www.cs.cornell.edu/Info/People/kguo/home.html
Root-URL: 
Email: kguo@cs.cornell.edu ler@di.fc.ul.pt  
Title: Dynamic Light-Weight Groups  
Author: Katherine Guo Lu s Rodrigues 
Address: Ithaca, NY, 14853 1700 Lisbon, Portugal  
Affiliation: Department of Computer Science Departamento de Inform atica Cornell University Faculdade Ci encias, University of Lisboa  
Abstract: This paper discusses the Light-Weight Group protocols in dynamic environments, where mappings cannot be defined a priori and may change over time. We show that it is possible to establish mappings that promote sharing and, at the same time, minimize interference. These mappings can be established in an automated manner, using heuristics applied locally at each node. Experiments using an implementation in the Horus system show that significant performance improvements can be achieved with this approach. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. Transis: </author> <title> A communication sub-system for high availability. </title> <booktitle> In Proc. 22nd Annual International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 76-84, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Moreover, these previous approaches avoid the problem of finding the most appropriate mapping in a fully automated way by placing the burden on the user to locate and provide a priori knowledge of possible sources of interference. Some systems <ref> [1] </ref> do have all groups in the system sharing some resources, such as a failure detector or an underlying ordered channel. Although these systems are implementing a static form of a Light-Weight Group Service, they do not address the problem of minimizing interference.
Reference: [2] <author> K. Birman and T. Joseph. </author> <title> Exploiting replication in distributed systems. </title> <editor> In Sape Mullender, editor, </editor> <booktitle> Distributed Systems, </booktitle> <pages> pages 319-366. </pages> <publisher> ACM Press Frontier Series, </publisher> <year> 1989. </year>
Reference-contexts: 1 Introduction Virtually synchronous group communication <ref> [2, 3, 11] </ref> has proven to be a powerful paradigm for developing distributed applications. This paradigm allows processes to be organized in groups within which messages are exchanged to achieve a common goal.
Reference: [3] <author> K. Birman and R. van Renesse, </author> <title> editors. Reliable Distributed Computing With the ISIS Toolkit. Number ISBN 0-8186-5342-6. </title> <publisher> IEEE CS Press, </publisher> <month> March </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Virtually synchronous group communication <ref> [2, 3, 11] </ref> has proven to be a powerful paradigm for developing distributed applications. This paradigm allows processes to be organized in groups within which messages are exchanged to achieve a common goal.
Reference: [4] <author> D. Comer. </author> <title> Internetworking with TCP/IP (3rd Edition). </title> <publisher> Pren-tice Hall, </publisher> <year> 1995. </year>
Reference-contexts: Today's technology rarely results in message losses due to bit errors, but losses due to congestion are still common. With Quality of Service being offered in the next generation of transport protocols such as RSVP [15] and IPv6 <ref> [4] </ref>, we expect fewer and fewer message losses. Therefore, the interference from using the same FIFO channel is almost negligible in the future. A second source of interference happens when the failure of a HWG member disturbs the operation of the HWG and the LWG (s) mapped onto it.
Reference: [5] <author> B. Glade, K. Birman, R. Cooper, and R. van Renesse. </author> <title> Lightweight process groups in the ISIS system. </title> <journal> Distributed System Engineering, </journal> (1):29-36, 1993. 
Reference-contexts: Due to this reason, finding appropriate mappings is a critical point in the design of a Light-Weight Group Service. Light-Weight Group Services have been implemented be fore in different group based communication systems <ref> [5, 8] </ref>. Unfortunately, such services imposed restrictions on group usage as a result of changing the interface of the underlying virtually synchronous group. <p> The Isis system has extended this principle, offering a Light-Weight Group Service that supports dynamic associations between user level groups and core Isis groups <ref> [5] </ref>. However, the Isis LWGs require the specification of the target membership of a user group to make appropriate mapping decisions. Neither of these approaches is transparent, because they do not preserve the original HWG interface. In both cases, additional information is required.
Reference: [6] <author> K. Guo, W. Vogels, and R. van Renesse. </author> <title> Structured virtual synchrony: Exploring the bounds of virtually synchronous group communication. </title> <booktitle> In Proceedings of the 7th ACM SIGOPS European Workshop, </booktitle> <month> September </month> <year> 1996. </year>
Reference-contexts: In the Horus system, failure detection is performed by having each group member multicast to every other member a status report background message periodically (in the current configuration, every 2 seconds). Experiments show that the bottleneck for handling the background messages is the receiver buffer size <ref> [6] </ref>. Processors do not have enough input buffer space to handle all the input messages in the short amount of time, therefore, some messages are dropped from the input buffers. As a result, an important goal of resource sharing is to minimize the number of these background messages.
Reference: [7] <author> N. Hutchinson and L. Peterson. </author> <title> Design of the x-kernel. </title> <journal> ACM Computer Communication Review, </journal> <volume> 18(4) </volume> <pages> 65-75, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: Horus provides a large set of microprotocols. The following layers are related to our design of the Light-Weight Group Service. The COM layer provides the Horus interface over other low-level communication interfaces which include IP, UDP, ATM, the x-kernel <ref> [7] </ref> and a network simulator. The NAK layer provides reliable FIFO unicast and multicast. The FRAG layer implements fragmentation and reassembly of messages. The MBRSHIP layer guarantees virtual synchrony.
Reference: [8] <author> D. Powell, </author> <title> editor. Delta-4 A Generic Architecture for Dependable Distributed Computing. ESPRIT Research Reports. </title> <publisher> Springer Verlag, </publisher> <month> November </month> <year> 1991. </year>
Reference-contexts: Due to this reason, finding appropriate mappings is a critical point in the design of a Light-Weight Group Service. Light-Weight Group Services have been implemented be fore in different group based communication systems <ref> [5, 8] </ref>. Unfortunately, such services imposed restrictions on group usage as a result of changing the interface of the underlying virtually synchronous group. <p> The heuristics to support dynamic mappings are discussed in Section 4. Performance results obtained with an implementation in Horus are presented in Section 5. Section 6 concludes the paper. 2 Related work To our knowledge, Delta-4 <ref> [8] </ref> was the first system to offer some form of Light-Weight Group Service. The Delta-4 group communication subsystem was structured as a layered architecture similar to the ISO stack. Virtually synchronous support was provided in the lower layers of the architecture, immediately on top of standard MAC protocols.
Reference: [9] <author> L. Rodrigues, K. Guo, A. Sargento, R. van Renesse, B. Grade, P. Ver ssimo, and K. Birman. </author> <title> A transparent light-weight group service. </title> <booktitle> In Proceedings of the 15th IEEE Symposium on Reliable Distributed Systems, </booktitle> <pages> pages 130-139, </pages> <address> Niagara-on-the-Lake, Canada, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: Light-Weight Group Services have been implemented be fore in different group based communication systems [5, 8]. Unfortunately, such services imposed restrictions on group usage as a result of changing the interface of the underlying virtually synchronous group. In a recent paper <ref> [9] </ref>, we have proposed a new design for the LWG protocols that circumvents such limitations, in particular, we have shown that the Light-Weight Group Service can be implemented in a fully transparent manner. <p> The establishment of these mappings can be automated, using heuristics applied locally at each node. Experiments implementing this approach in the Horus system [12] have shown significant performance improvements. The paper is organized into five other sections. Related work is surveyed in Section 2. In a recent paper <ref> [9] </ref>, the design of the Transparent Light-Weight Group Service is further explored, but Section 3 provides a brief description. The heuristics to support dynamic mappings are discussed in Section 4. Performance results obtained with an implementation in Horus are presented in Section 5. <p> VS interface primitives described in detail elsewhere <ref> [9] </ref>. <p> When all members have joined hwgTo, the execution of the flush protocol is triggered. The protocol installs a new view and commits the new mapping. When a switch occurs, the name service is informed of the new mapping so that further joins are directed to the appropriate HWG (see <ref> [9] </ref> for a discussion of how concurrent joins and switches are handled). 3.2.6 Failure handling protocol. The basic failure handling protocol is quite simple because most of the complexity is handled by the virtually synchronous service. <p> These tests are relevant because they show the improvements obtained when maximum resource sharing is achieved, that is, when all LWGs are mapped onto a single HWG . For self-containment, we reproduce the results for data transfer and failure recovery (the remaining results can be found in <ref> [9] </ref>). To evaluate the effect of LWGs on failure recovery, we conducted the following test: a given process, member of n identical four-member groups, crashes and forces these n groups to reconfigure. <p> When the scenario changes, switching decisions are made according to local heuristics and the switch protocol is invoked as described in section 3.2.5. For a more detailed description of this protocol, see <ref> [9] </ref>. In scenario A, LWGs a 1 to a n are mapped on HWG1. LWGs b 1 to b n are contained in LWGs a 1 to a n .
Reference: [10] <author> L. Rodrigues, P. Ver ssimo, and J. Rufino. </author> <title> A low-level processor group membership protocol for LANs. </title> <booktitle> In Proceedings of the 13th International Conference on Distributed Computing Systems, </booktitle> <address> Pittsburgh, PA, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: A message multicast on a HWG can be performed using two main approaches. In one approach, known as selective multicasting, the message is multicast only to the relevant members of the HWG <ref> [10] </ref>. In order to be efficient, this approach requires some hardware support. In the other approach, the message is multicast to all members of the HWG and, then, each site that is not a member of the concerned LWG discards the message.
Reference: [11] <author> A. Schiper and A. Ricciardi. </author> <title> Virtually-synchronous communication based on a weak failure suspector. </title> <booktitle> In Digest of Papers, The 23th International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 534-543, </pages> <address> Toulouse, France, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Virtually synchronous group communication <ref> [2, 3, 11] </ref> has proven to be a powerful paradigm for developing distributed applications. This paradigm allows processes to be organized in groups within which messages are exchanged to achieve a common goal.
Reference: [12] <author> R. van Renesse, K. Birman, R. Cooper, B. Glade, and P. Stephenson. </author> <title> Reliable multicast between microkernels. </title> <booktitle> In Proceedings of the USENIX Workshop on Micro-Kernels and Other Architectures, </booktitle> <pages> pages 269-283, </pages> <address> Seattle, Washington, </address> <month> April </month> <year> 1992. </year>
Reference-contexts: We show the possibility to establish mappings that promote sharing and, at the same time, minimize interference. The establishment of these mappings can be automated, using heuristics applied locally at each node. Experiments implementing this approach in the Horus system <ref> [12] </ref> have shown significant performance improvements. The paper is organized into five other sections. Related work is surveyed in Section 2. In a recent paper [9], the design of the Transparent Light-Weight Group Service is further explored, but Section 3 provides a brief description. <p> These protocols are not tied to any particular architecture, but were designed having the Isis, Horus <ref> [13, 12] </ref> and NAVTECH [14] systems in mind. All these systems provide a virtually synchronous communication service. 3.2.1 Interface.
Reference: [13] <author> R. van Renesse, K. Birman, and S. Maffeis. Horus, </author> <title> a flexible group communication system. </title> <journal> Communications of the ACM, </journal> <volume> 39(4) </volume> <pages> 76-83, </pages> <month> April </month> <year> 1996. </year>
Reference-contexts: These protocols are not tied to any particular architecture, but were designed having the Isis, Horus <ref> [13, 12] </ref> and NAVTECH [14] systems in mind. All these systems provide a virtually synchronous communication service. 3.2.1 Interface. <p> Finally, when a new view is installed in the HWG , the failed processes are removed from the views of all mapped LWGs . 3.3 An Implementation in Horus 3.3.1 Horus overview. Horus <ref> [13] </ref> is a group communication system which offers great flexibility in the properties provided by protocols. It uses virtually synchronous protocols to support dynamic group membership, message ordering, synchronization and failure handling. In the Horus architecture, protocols are constructed dynamically by stacking microprotocols, which support a common interface.
Reference: [14] <author> P. Ver ssimo and L. Rodrigues. </author> <title> The NavTech large-scale distributed computing platform. </title> <type> Technical report, </type> <note> FCUL/IST. (in preparation). </note>
Reference-contexts: These protocols are not tied to any particular architecture, but were designed having the Isis, Horus [13, 12] and NAVTECH <ref> [14] </ref> systems in mind. All these systems provide a virtually synchronous communication service. 3.2.1 Interface.
Reference: [15] <author> L. Zhang, S. Deering, D. Estrin, S. Shenker, and D. Zap-pala. RSVP: </author> <title> A new Resource ReSerVation Protocol. </title> <journal> IEEE Network Magazine, </journal> <pages> pages 8-18, </pages> <month> September </month> <year> 1993. </year> <title> Scenario A Scenario B Scenario C Scenario D </title>
Reference-contexts: Today's technology rarely results in message losses due to bit errors, but losses due to congestion are still common. With Quality of Service being offered in the next generation of transport protocols such as RSVP <ref> [15] </ref> and IPv6 [4], we expect fewer and fewer message losses. Therefore, the interference from using the same FIFO channel is almost negligible in the future.
References-found: 15

