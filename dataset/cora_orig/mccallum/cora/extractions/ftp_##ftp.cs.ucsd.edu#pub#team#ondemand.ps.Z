URL: ftp://ftp.cs.ucsd.edu/pub/team/ondemand.ps.Z
Refering-URL: http://www.cs.ucsd.edu/users/flaviu/publications.html
Root-URL: http://www.cs.ucsd.edu
Title: On-Demand Asynchronous Atomic Broadcast  
Author: Guillermo A. Alvarez Flaviu Cristian Shivakant Mishra 
Address: La Jolla, CA 920930114, USA  
Affiliation: Department of Computer Science and Engineering University of California, San Diego  
Abstract: We propose a new asynchronous atomic broadcast protocol that provides good performance for applications with bursty update patters. If the members of a process group disseminate bursts of updates that tend to be disjoint in time, our protocol uses a small number of physical messages to accomplish a broadcast, and provides excellent update delivery and stability times. The protocol is tolerant of omission/performance communication failures and crash/performance process failures. The initial performance measurements made for a portable implementation on top of the UDP data-gram service confirm the suitability of the protocol for bursty update dissemination patterns. 
Abstract-found: 1
Intro-found: 1
Reference: [2] <author> Y. Amir, L. Moser, P. Melliar-Smith, D. Agar--wal, and P. Ciarfella. </author> <title> Fast message ordering and membership using a logical token-passing ring. </title> <booktitle> In Proceedings of Thirteenth International Conference on Distributed Computing Systems, </booktitle> <pages> pages 551-560, </pages> <address> Pittsburgh, PA, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: Another drawback is that the processing load is not evenly distributed, for the sequencer has to take part in the dissemination of every message, even if it never originates broadcasts. In rotating-sequencer (or token) based protocols <ref> [5, 2, 10] </ref>, a token carrying sequencing information circulates around a logical ring formed by all group members. This class of protocols is better suited for the problem under consideration.
Reference: [3] <author> K. Birman, A. Schiper, and P. Stephenson. </author> <title> Lightweight causal and atomic group multi-cast. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 9(3) </volume> <pages> 272-314, </pages> <month> Aug. </month> <year> 1991. </year>
Reference-contexts: The role of active primary will then migrate among primary partition managers, depending on what partition is accessed at any one time. This communication pattern is not well supported by existing broadcast protocols. In fixed-sequencer based protocols <ref> [4, 14, 3, 13] </ref>, a fixed group member (the sequencer) orders all updates broadcast in a group. The sequencer becomes a bottleneck, and the overhead is too high for the traffic pattern that we are considering here. <p> Only the holder of the token is allowed to broadcast, and it imposes a total order for message delivery that is obeyed by all group members. Although the possibility of transferring the role of sequencer with a message containing an update is briefly mentioned in <ref> [3] </ref>, we are not aware of any protocol that implements on-demand token circulation in the way described in this paper. The resulting on-demand protocol is intended to have smaller delivery and stability times, and higher throughput than existing broadcast protocols for the bursty traffic pattern under consideration.
Reference: [4] <author> R. Carr. </author> <title> The Tandem global update protocol. </title> <journal> Tandem Systems Review, </journal> <month> June </month> <year> 1985. </year>
Reference-contexts: The role of active primary will then migrate among primary partition managers, depending on what partition is accessed at any one time. This communication pattern is not well supported by existing broadcast protocols. In fixed-sequencer based protocols <ref> [4, 14, 3, 13] </ref>, a fixed group member (the sequencer) orders all updates broadcast in a group. The sequencer becomes a bottleneck, and the overhead is too high for the traffic pattern that we are considering here.
Reference: [5] <author> F. Cristian. </author> <title> Asynchronous atomic broadcast. </title> <journal> IBM Technical Disclosure Bulletin, </journal> <volume> 33(9) </volume> <pages> 115-116, </pages> <month> Feb. </month> <year> 1991. </year> <booktitle> Also presented at the First IEEE Workshop on Management of Replicated Data, </booktitle> <address> Houston, TX, </address> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: Another drawback is that the processing load is not evenly distributed, for the sequencer has to take part in the dissemination of every message, even if it never originates broadcasts. In rotating-sequencer (or token) based protocols <ref> [5, 2, 10] </ref>, a token carrying sequencing information circulates around a logical ring formed by all group members. This class of protocols is better suited for the problem under consideration. <p> Regarding the behavior in the presence of membership changes, a protocol achieves majority agreement <ref> [5] </ref> if whenever a process p delivers an update u, then either eventually all group members deliver u, or a new group g that does not contain p is created, so that no member of g has delivered u, and all updates proposed by p after delivering u are not delivered <p> As an aside, it is possible to modify the protocol to achieve strict agreement (in which a node delivers an update only when it knows that a majority of processes will deliver it <ref> [5] </ref>); this can be done by delaying the delivery of an update until the end of the corresponding acknowledgement round. However, this would be so detrimental to delivery times that we concentrate on the original version of the protocol.
Reference: [6] <author> F. Cristian. </author> <title> Understanding fault-tolerant distributed systems. </title> <journal> Communications of the ACM, </journal> <volume> 34(2) </volume> <pages> 56-78, </pages> <month> Feb. </month> <year> 1991. </year>
Reference-contexts: Such a service is useful in supporting higher level distributed services such as highly available servers and general application availability managers <ref> [6, 9] </ref>. The properties of the atomic broadcast imply that group members can maintain consistent replicas of the application's state by simply applying the updates to their local states as they are received. <p> A message can be lost or take more than ffi to arrive, but we assume that every received message is uncorrupted. In other terms, we assume a datagram service with omission/performance failure semantics <ref> [6] </ref>. The overwhelming majority of local and wide area network communication systems provide datagram services with this failure semantics.
Reference: [7] <author> F. Cristian, R. de Beijer, and S. Mishra. </author> <title> A performance comparison of asynchronous atomic broadcast protocols. </title> <journal> Distributed Systems Engineering, </journal> <volume> 1(4) </volume> <pages> 177-201, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: We will refer to the group member with rank i as group member i in what follows. The performance metrics used to evaluate atomic broadcast protocols are defined as in <ref> [7] </ref>. The broadcast delivery time is the duration between the moment an update is entrusted to the broadcast service by a group member and the moment the update is delivered by the service to every group member. <p> If there is a breach in the ordinal sequence, the updates will not be delivered until the missing predecessors have been received and delivered. In general, the broadcast stability time is better when nodes acknowledge the receipt of messages by sending positive acknowledgements <ref> [7] </ref>. However, this technique increases the number of messages exchanged per broadcast. Furthermore, since we expect potentially long bursts of updates from the holder, it is definitely not practical to require every member to reply with an acknowledgement message every time an update is received. <p> The standard of comparison is the pinwheel protocol [10] which we have found to offer the best overall performance among all known protocols when each node is equally likely to issue updates at any one time <ref> [7] </ref>. The pinwheel protocol rotates the role of sequencer (decider) cyclically among all the group members. When a node wants to broadcast, it sends a proposal to everybody in the group.
Reference: [8] <author> F. Cristian and C. </author> <title> Fetzer. Fault-tolerant external clock synchronization. </title> <booktitle> In Proceedings of the 15th International Conference on Distributed Systems, </booktitle> <address> Vancouver, Canada, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: The Team project at the University of California, San Diego aims at designing a set of fault-tolerant services to support the development of dependable distributed systems. Among the fault-tolerant services designed so far we mention time services <ref> [8] </ref>, atomic broadcast and membership services [10, 11] and availability management This article appeared in the 5th IFIP Working Conference on Dependable Computing and Critical Applications, Urbana-Champaign, IL, Sept. 1995.
Reference: [9] <author> F. Cristian and S. Mishra. </author> <title> Automatic service availability management in asynchronous distributed systems. </title> <booktitle> In Proceedings of the Second International Workshop on Configurable Distributed Systems, </booktitle> <address> Pittsburgh, PA, </address> <month> Mar. </month> <year> 1994. </year>
Reference-contexts: Such a service is useful in supporting higher level distributed services such as highly available servers and general application availability managers <ref> [6, 9] </ref>. The properties of the atomic broadcast imply that group members can maintain consistent replicas of the application's state by simply applying the updates to their local states as they are received. <p> This work was partially supported by the Air Force Office of Scientific Research, Sun Microsystems, the Organization of American States, and the San Diego Supercomputing Center. Last author is now with the Department of Computer Science, University of Wyoming, P.O. Box 3682, Laramie, WY 82071-3682. services <ref> [9] </ref>. This paper describes the design and implementation of the on-demand asynchronous atomic broadcast protocol. The main motivation for designing the on-demand protocol was to support applications in which each group member generates (possibly long) bursts of updates and bursts from different nodes are not likely to overlap in time.
Reference: [10] <author> F. Cristian and S. Mishra. </author> <title> The Pinwheel asynchronous atomic broadcast protocols. </title> <booktitle> In Proceedings of the Second International Symposium on Autonomous Decentralized Systems, </booktitle> <address> Phoenix, AZ, </address> <month> Mar. </month> <year> 1995. </year>
Reference-contexts: The Team project at the University of California, San Diego aims at designing a set of fault-tolerant services to support the development of dependable distributed systems. Among the fault-tolerant services designed so far we mention time services [8], atomic broadcast and membership services <ref> [10, 11] </ref> and availability management This article appeared in the 5th IFIP Working Conference on Dependable Computing and Critical Applications, Urbana-Champaign, IL, Sept. 1995. This work was partially supported by the Air Force Office of Scientific Research, Sun Microsystems, the Organization of American States, and the San Diego Supercomputing Center. <p> Another drawback is that the processing load is not evenly distributed, for the sequencer has to take part in the dissemination of every message, even if it never originates broadcasts. In rotating-sequencer (or token) based protocols <ref> [5, 2, 10] </ref>, a token carrying sequencing information circulates around a logical ring formed by all group members. This class of protocols is better suited for the problem under consideration. <p> We discuss the design aspects in Sections 3 and 4. In Section 5 we describe the implementation and performance of this protocol, and we compare it with the Pinwheel atomic broadcast protocol <ref> [10] </ref>, implemented in the same computing environment. Section 6 concludes the paper. 2 Assumptions and Definitions We assume a timed asynchronous distributed system [11] in which multiple processors are connected by a communication network. <p> The performance measurements were structured as a set of four experiments, with a different traffic pattern for each of them. The standard of comparison is the pinwheel protocol <ref> [10] </ref> which we have found to offer the best overall performance among all known protocols when each node is equally likely to issue updates at any one time [7]. The pinwheel protocol rotates the role of sequencer (decider) cyclically among all the group members.
Reference: [11] <author> F. Cristian and F. Schmuck. </author> <title> Agreeing on processor-group membership in asynchronous distributed systems. </title> <type> Technical Report CSE95-428, </type> <institution> Dept. of Computer Science and Engineering, University of California, </institution> <address> San Diego, </address> <year> 1995. </year> <note> Also available by anonymous ftp from cs.ucsd.edu/pub/team/asyncmembership.ps.Z. </note>
Reference-contexts: The Team project at the University of California, San Diego aims at designing a set of fault-tolerant services to support the development of dependable distributed systems. Among the fault-tolerant services designed so far we mention time services [8], atomic broadcast and membership services <ref> [10, 11] </ref> and availability management This article appeared in the 5th IFIP Working Conference on Dependable Computing and Critical Applications, Urbana-Champaign, IL, Sept. 1995. This work was partially supported by the Air Force Office of Scientific Research, Sun Microsystems, the Organization of American States, and the San Diego Supercomputing Center. <p> In Section 5 we describe the implementation and performance of this protocol, and we compare it with the Pinwheel atomic broadcast protocol [10], implemented in the same computing environment. Section 6 concludes the paper. 2 Assumptions and Definitions We assume a timed asynchronous distributed system <ref> [11] </ref> in which multiple processors are connected by a communication network. Processes running on these processors do not share any memory and communicate only by exchanging messages or by measuring the passage of time on their local timers. <p> The on-demand protocol also depends on a group membership service that has the properties specified for the three-round majority protocol of <ref> [11] </ref>. Given a team of potentially cooperating processes, this service generates a sequence of dynamic groups that approximate the set of team members that are correct and can communicate at every moment. We assume that processes suffer only crash and performance failures.
Reference: [12] <author> P. Ezhilchelvan, R. Macedo, and S. Shrivastava. Newtop: </author> <title> a fault-tolerant group communication protocol. </title> <booktitle> In Proceedings of the 15th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 296-306, </pages> <address> Vancouver, Canada, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: Finally, the communication-history based protocols <ref> [16, 15, 1, 12] </ref> allow each node to infer the update ordering independently, based on a fragment of the communication history encoded in each protocol message.
Reference: [13] <author> H. Garcia-Molina and A. Spauster. </author> <title> Ordered and reliable multicast communication. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 9(3) </volume> <pages> 242-271, </pages> <month> Aug. </month> <year> 1991. </year>
Reference-contexts: The role of active primary will then migrate among primary partition managers, depending on what partition is accessed at any one time. This communication pattern is not well supported by existing broadcast protocols. In fixed-sequencer based protocols <ref> [4, 14, 3, 13] </ref>, a fixed group member (the sequencer) orders all updates broadcast in a group. The sequencer becomes a bottleneck, and the overhead is too high for the traffic pattern that we are considering here.
Reference: [14] <author> M. F. Kaashoek, A. Tanenbaum, S. F. Hummel, and H. Bal. </author> <title> An efficient reliable broadcast protocol. </title> <journal> Operating Systems Review, </journal> <volume> 23(4) </volume> <pages> 5-19, </pages> <month> Oct. </month> <year> 1989. </year>
Reference-contexts: The role of active primary will then migrate among primary partition managers, depending on what partition is accessed at any one time. This communication pattern is not well supported by existing broadcast protocols. In fixed-sequencer based protocols <ref> [4, 14, 3, 13] </ref>, a fixed group member (the sequencer) orders all updates broadcast in a group. The sequencer becomes a bottleneck, and the overhead is too high for the traffic pattern that we are considering here.
Reference: [15] <author> P. M. Melliar-Smith, L. E. Moser, and V. Agrawala. </author> <title> Broadcast protocols for distributed systems. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 1(1) </volume> <pages> 17-25, </pages> <month> Jan. </month> <year> 1990. </year>
Reference-contexts: Finally, the communication-history based protocols <ref> [16, 15, 1, 12] </ref> allow each node to infer the update ordering independently, based on a fragment of the communication history encoded in each protocol message.
Reference: [16] <author> L. L. Peterson, N. C. Buchholz, and R. D. Schlichting. </author> <title> Preserving and using context information in interprocess communication. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 7(3) </volume> <pages> 217-246, </pages> <month> Aug. </month> <year> 1989. </year>
Reference-contexts: Finally, the communication-history based protocols <ref> [16, 15, 1, 12] </ref> allow each node to infer the update ordering independently, based on a fragment of the communication history encoded in each protocol message.
Reference: [17] <author> S. Ramanathan, V. Rangan, and H. Vin. </author> <title> Optical communication architectures for multimedia conferencing in distributed systems. </title> <booktitle> In Proceedings of the 12th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 46-53, </pages> <address> Yoko-hama, Japan, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: The main motivation for designing the on-demand protocol was to support applications in which each group member generates (possibly long) bursts of updates and bursts from different nodes are not likely to overlap in time. As an example, consider a video conferencing application <ref> [17] </ref>, where a set of group members exchange information with the property that only one group member broadcasts updates most of the time. In such an application, group members broadcast updates in bursts when they hold the floor, and remain relatively quiet otherwise.
References-found: 16

