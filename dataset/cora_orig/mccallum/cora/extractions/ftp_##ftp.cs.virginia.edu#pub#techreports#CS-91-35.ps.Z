URL: ftp://ftp.cs.virginia.edu/pub/techreports/CS-91-35.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Abstract: Function-Based Scheduling W. Timothy Strayer Computer Science Report No. TR-91-35 December 6, 1991 
Abstract-found: 1
Intro-found: 1
Reference: [BERN71] <author> Bernstein, A. J. and Sharp, J. C., </author> <title> A Policy-Driven Scheduler for a TimeSharing System, </title> <journal> Communications of the ACM, </journal> <volume> Vol. 14, No. 2, </volume> <pages> pp. 74-78, </pages> <month> (February </month> <year> 1971). </year>
Reference-contexts: Contribution This report introduces the importance abstraction as a framework for implementing scheduling policies. The importance abstraction is a function-based approach for 5 describing the scheduling policy. There have been previous function-based approaches, in particular those of <ref> [BERN71] </ref>, [RUSC77] and [JENS85]; the importance abstraction extends this previous work and makes contributions to scheduling theory in several ways: 1. the importance abstraction provides a universal framework for the expression of traditional and novel scheduling policies 2. the importance abstraction employs a standard and very simple scheduling algorithm, thus shifting <p> Below we survey these three techniques for using functions for making scheduling decisions. 11 2.2.1. Policy Functions Bernstein and Sharp, in <ref> [BERN71] </ref>, theorized that a scheduling algorithm which keeps track of the resource count of each task and orders the tasks according to how far a task is from the expected resource count at that tasks age would provide the specified level of service for each task. <p> Furthermore, an algorithm is called time-invariant if the difference between the priorities of any two tasks does not change as long as neither task receives service. Included in this class of algorithms is the policy-driven scheduling algorithms of <ref> [BERN71] </ref>. Ruschitzka and Fabry extend the work of Bernstein and Sharp by noting that, in general, time-invariant priorities are characterized by a policy function of an arbitrary number of arguments. 2.2.2.
Reference: [BIYA88] <author> Biyabani, S. R., Stankovic, J. A. and Ramamritham, K., </author> <title> The Integration of Deadline and Criticalness in Hard Real-Time Scheduling, </title> <booktitle> Proceedings of the 1988 IEEE Real-Time Systems Symposium, </booktitle> <address> Huntsville, Alabama, </address> <pages> pp. 152-160, </pages> <month> (December 6-8, </month> <year> 1988). </year>
Reference-contexts: Biyabani et al explore this kind of bilevel ranking in <ref> [BIYA88] </ref>. Most notably they offer a new sematic for the term guarantee that reects the uncertainty of the future task set composition.
Reference: [DHAL78] <author> Dhall, S. K. and Liu, C. L., </author> <title> On a Real-Time Scheduling Problem, </title> <journal> Operations Research, </journal> <volume> Vol. 26, No. 1, </volume> <pages> pp. 127-140, </pages> <month> (January-February </month> <year> 1978). </year>
Reference-contexts: Rate Monotonic Theory In 1973, Liu and Layland introduced rate monotonic scheduling theory ([LIU73]) as a method for scheduling many periodic tasks on a single processor such that the scheduling algorithm used to do this was optimal. Dhall and Liu extended this work into the multiprocessor environment in <ref> [DHAL78] </ref>. The following discussion is drawn largely from Sha and Goodenough ([SHA90]), who present an excellent overview of the theory and recent extensions which include aperiodic and sporadic tasks, as well as non-independent task relationships.
Reference: [GOOD88] <author> Goodenough, J. B. and Sha, L., </author> <title> The Priority Ceiling Protocol: A Method for Minimizing the Blocki/ng of High-Priority Ada Tasks, </title> <type> Technical Report CMU/SEI-88-SR-4, </type> <institution> Carnegie-Mellon University Software Engineering Institute, </institution> <month> March </month> <year> 1988. </year>
Reference: [JENS85] <author> Jensen, E. D., Locke, C. D. and Tokuda, H., </author> <title> A Time Driven Scheduling Model for Real-Time Operating Systems, </title> <booktitle> Proceedings of the Real-Time Systems Symposium, </booktitle> <pages> pp. 112-122, </pages> <month> (December 3-6, </month> <year> 1985). </year>
Reference-contexts: Contribution This report introduces the importance abstraction as a framework for implementing scheduling policies. The importance abstraction is a function-based approach for 5 describing the scheduling policy. There have been previous function-based approaches, in particular those of [BERN71], [RUSC77] and <ref> [JENS85] </ref>; the importance abstraction extends this previous work and makes contributions to scheduling theory in several ways: 1. the importance abstraction provides a universal framework for the expression of traditional and novel scheduling policies 2. the importance abstraction employs a standard and very simple scheduling algorithm, thus shifting the burden of <p> The optimal schedule, therefore, arranges the tasks such that they complete at times which maximize the sum of their values to the system. Jensen et al use this value sum as a metric for comparing the effectiveness of conventional scheduling algorithms. It was observed in <ref> [JENS85] </ref> that task scheduling in real-time systems almost always uses some simple algorithm, like fixed priority, first in first out, or round robin. Often the time-criticalness of the tasks is represented by a point in time called a deadline. <p> Jensen et al, in <ref> [JENS85] </ref>, used a five parameter function to describe value functions.
Reference: [LEHO87] <author> Lehoczky, J. P., Sha, L. and Strosnider, J. K., </author> <title> Enhanced Aperiodic Responsiveness in Hard Real-Time Environments, </title> <booktitle> Proceedings of the 1987 IEEE Real-Time Systems Symposium, </booktitle> <address> San Jose, California, </address> <pages> pp. 261-270, </pages> <month> (December 1-3, </month> <year> 1987). </year>
Reference: [LIU73] <author> Liu, C. L. and Layland, J. W., </author> <title> Scheduling Algorithms for Multiprogramming in a Hard Real-Time Environment, </title> <journal> Journal of the ACM, </journal> <volume> Vol. 20, No. 1, </volume> <pages> pp. 46-61, </pages> <month> (January </month> <year> 1973). </year>
Reference-contexts: Meeting Deadlines Since nearest deadline first is a static ranking, the result given in (Eq 30) also applies for schedules imposed using importance functions emulating the nearest deadline first algorithm. Such a set of importance functions is given in (Eq 7). We know from <ref> [LIU73] </ref> that, if deadlines can be met for a given task set, they will be met using the nearest deadline first policy. <p> Unfortunately, the utilization factor proof in <ref> [LIU73] </ref> only holds for periodic task (a counterexample: task 1 has arrival time a 1 = 5, work required w 1 = 10, deadline d 1 = 15, and task 2 has a 2 = 15, w 2 = 10, d 2 = 25; the utilization factor is 2, yet the
Reference: [LOCK86] <author> Locke, C. D., </author> <title> Best-Effort Decision Making for Real Time Scheduling, </title> <institution> Dissertation (Computer Science Report No. CMU-Computer Science-86-134), Carnegie- Mellon University Department of Computer Science, </institution> <month> May </month> <year> 1986. </year>
Reference-contexts: Ruschitzka and Fabry extend the work of Bernstein and Sharp by noting that, in general, time-invariant priorities are characterized by a policy function of an arbitrary number of arguments. 2.2.2. Time-Driven Scheduling The primary notion in time-driven scheduling ([JENS85], <ref> [LOCK86] </ref>, [TOKU87], [WEND88]) is that the distinguishing characteristic of a real-time system is the concept that the value a task has to the system is dependent upon when that task completes. <p> The results showed that the second experimental algorithm outperformed all others tested; this algorithm, called the Best-Effort Heuristic, is the focus of Lockes work in <ref> [LOCK86] </ref>. The implementation issues of time-driven scheduling, especially using the best-effort heuristic, are explored in [TOKU87] and [WEND88]. It was concluded that the high computational overhead of best-effort time-driven scheduling made implementation impractical on a uniprocessor system.
Reference: [LOCK88] <author> Locke, C. D. and Goodenough, J. B., </author> <title> A Practical Application of the Ceiling Protocol in a Real-Time System, </title> <type> Technical Report CMU/SEI-88-SR-3, </type> <institution> Carnegie- Mellon University Software Engineering Institute, </institution> <month> March </month> <year> 1988. </year>
Reference-contexts: The priority ceiling protocol minimizes the blocking of high priority tasks by guaranteeing that such a task will be blocked by at most one critical region of any lower priority task ([GOOD88], <ref> [LOCK88] </ref>). The priority ceiling of a critical region is defined to be the highest priority of all the tasks that may lock on that region.
Reference: [RUSC77] <author> Ruschitzka, M. and Fabry, R. S., </author> <title> A Unifying Approach to Scheduling, </title> <journal> Communications of the ACM, </journal> <volume> Vol. 20, No. 7, </volume> <pages> pp. 469-477, </pages> <month> (July </month> <year> 1977). </year> <month> 57 </month>
Reference-contexts: Contribution This report introduces the importance abstraction as a framework for implementing scheduling policies. The importance abstraction is a function-based approach for 5 describing the scheduling policy. There have been previous function-based approaches, in particular those of [BERN71], <ref> [RUSC77] </ref> and [JENS85]; the importance abstraction extends this previous work and makes contributions to scheduling theory in several ways: 1. the importance abstraction provides a universal framework for the expression of traditional and novel scheduling policies 2. the importance abstraction employs a standard and very simple scheduling algorithm, thus shifting the <p> Assume that each task requires 3 time units to finish. Figure 3 shows the graph of importance value versus 2. The concept of creating a framework within which to emulate other scheduling policies was first presented by Ruschitska and Fabry in <ref> [RUSC77] </ref> with the Universal Scheduling System. i T ( ) ," I i t ( ) task1 : a 1 0= task2 : a 2 2= task3 : a 3 3= task4 : a 4 4= 24 time as each task gets older.
Reference: [SHA86] <author> Sha, L., Lehoczky, J. and Rajkumar, R., </author> <title> Solutions for Some Practical Problems in Prioritized Preemptive Scheduling, </title> <booktitle> Proceedings of the 1986 IEEE Real-Time Systems Symposium, </booktitle> <address> New Orleans, </address> <publisher> Louisiana, </publisher> <pages> pp. 181-191, </pages> <month> (December 2-4, </month> <year> 1986). </year>
Reference: [SHA87] <author> Sha, L., Rajkumar, R. and Lehoczky, J. P., </author> <title> Priority Inheritance Protocols: An Approach to Real-Time Synchronization, </title> <type> Technical Report CMU-Computer Science-87-181, </type> <institution> Carnegie-Mellon University, Computer Science Department, </institution> <year> 1987. </year>
Reference: [SHA90] <author> Sha, L. and Goodenough, J. B., </author> <title> Real-Time Scheduling Theory and Ada, </title> <journal> IEEE Computer, </journal> <volume> Vol. 23, No. 4, </volume> <pages> pp. 53-62, </pages> <month> (April </month> <year> 1990). </year>
Reference-contexts: This variation is also optimal among all algorithms where priority assignment may be made during the run of the system. In the deadline driven scheduling algorithm, the priorities are assigned according to which tasks deadline is nearest rather than by period length. In <ref> [SHA90] </ref>, Sha and Goodenough discuss the use of rate monotonic theory for real-time scheduling in the Ada tasking model.
Reference: [SPRU88] <author> Sprunt, B., Lehoczky, J. and Sha, L., </author> <title> Exploiting Unused Periodic Time For Aperiodic Service Using The Extended Priority Exchange Algorithm, </title> <booktitle> Proceedings of the 1988 IEEE Real-Time Systems Symposium, </booktitle> <address> Huntsville, Alabama, </address> <month> (December 6-8, </month> <year> 1988). </year>
Reference-contexts: If an aperiodic task arrives just after the polling time, the task must wait until the next polling time. In both of these cases the response time for aperiodic tasks suffers unnecessarily due to naive treatment of the task set. 10 The Deferrable Server algorithm ([LEHO87], <ref> [SPRU88] </ref>) is designed to provide aperiodic tasks with a low response time without jeopardizing the periodic tasks. A new periodic task with highest priority is created to service the aperiodic tasks such that all tasks, including this aperiodic server, are guaranteed to meet their deadlines by the rate monotonic theory.
Reference: [TOKU87] <author> Tokuda, H., Wendorf, J. W. and Wang, H., </author> <title> Implementation of a Time-Driven Scheduler for Real Time Operating Systems, </title> <booktitle> Proceedings of the 1987 IEEE Real-Time Systems Symposium, </booktitle> <address> San Jose, California, </address> <pages> pp. 271-280, </pages> <month> (December 1-3, </month> <year> 1987). </year>
Reference-contexts: Ruschitzka and Fabry extend the work of Bernstein and Sharp by noting that, in general, time-invariant priorities are characterized by a policy function of an arbitrary number of arguments. 2.2.2. Time-Driven Scheduling The primary notion in time-driven scheduling ([JENS85], [LOCK86], <ref> [TOKU87] </ref>, [WEND88]) is that the distinguishing characteristic of a real-time system is the concept that the value a task has to the system is dependent upon when that task completes. <p> The results showed that the second experimental algorithm outperformed all others tested; this algorithm, called the Best-Effort Heuristic, is the focus of Lockes work in [LOCK86]. The implementation issues of time-driven scheduling, especially using the best-effort heuristic, are explored in <ref> [TOKU87] </ref> and [WEND88]. It was concluded that the high computational overhead of best-effort time-driven scheduling made implementation impractical on a uniprocessor system. More reasonable performance could be gained by using a dedicated processor for only scheduling decisions. 3.
Reference: [WEND88] <author> Wendorf, J. W., </author> <title> Implementation and Evaluation of a Time-Driven Scheduling Processor, </title> <booktitle> Proceedings of the 1988 IEEE Real-Time Systems Symposium, </booktitle> <address> Huntsville, Alabama, </address> <pages> pp. 172-180, </pages> <month> (December 6-8, </month> <year> 1988). </year> <month> 58 </month>
Reference-contexts: Ruschitzka and Fabry extend the work of Bernstein and Sharp by noting that, in general, time-invariant priorities are characterized by a policy function of an arbitrary number of arguments. 2.2.2. Time-Driven Scheduling The primary notion in time-driven scheduling ([JENS85], [LOCK86], [TOKU87], <ref> [WEND88] </ref>) is that the distinguishing characteristic of a real-time system is the concept that the value a task has to the system is dependent upon when that task completes. <p> The results showed that the second experimental algorithm outperformed all others tested; this algorithm, called the Best-Effort Heuristic, is the focus of Lockes work in [LOCK86]. The implementation issues of time-driven scheduling, especially using the best-effort heuristic, are explored in [TOKU87] and <ref> [WEND88] </ref>. It was concluded that the high computational overhead of best-effort time-driven scheduling made implementation impractical on a uniprocessor system. More reasonable performance could be gained by using a dedicated processor for only scheduling decisions. 3.
References-found: 16

