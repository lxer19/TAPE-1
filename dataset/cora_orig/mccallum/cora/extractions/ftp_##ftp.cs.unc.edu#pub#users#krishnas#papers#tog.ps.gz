URL: ftp://ftp.cs.unc.edu/pub/users/krishnas/papers/tog.ps.gz
Refering-URL: http://www.cs.unc.edu/~geom/CSG/intersect.html
Root-URL: http://www.cs.unc.edu
Email: krishnas@cs.unc.edu  manocha@cs.unc.edu  
Title: An Efficient Surface Intersection Algorithm based on Lower Dimensional Formulation  
Author: Shankar Krishnan Dinesh Manocha 
Address: CB#3175 Sitterson Hall,  Chapel Hill, NC 27599-3175  
Affiliation: Department of Computer Science,  University of North Carolina,  
Web: http://www.cs.unc.edu/~geom/index.html  
Note: To appear in ACM Trans. on Graphics  
Abstract: We present an efficient algorithm to compute the intersection of algebraic and NURBS surfaces. Our approach is based on combining the marching methods with the algebraic formulation. In particular, we propose a matrix representation for the intersection curve and compute it accurately using matrix computations. We present algorithms to compute a start point on each component of the intersection curve (both open and closed components), detect the presence of singularities, and find all the curve branches near the singularity. We also suggest methods to compute the step size during tracing to prevent component jumping. The algorithm runs an order of magnitude faster than previously published robust algorithms. The complexity of the algorithm is output sensitive.
Abstract-found: 1
Intro-found: 1
Reference: [AB88] <author> S.S. Abhyankar and C. Bajaj. </author> <title> Automatic parametrizations of rational curves and surfaces iii: Algebraic plane curves. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 5 </volume> <pages> 309-321, </pages> <year> 1988. </year>
Reference-contexts: Algebraically the singularities are classified by the number of branches or places the curve has at that point <ref> [AB88] </ref>. Cusps have only one branch while nodes and loops have more than one branch. Singularities on the intersection curve correspond to points where the tangent vector is undefined. The tangent to the intersection curve is obtained by taking the cross-product of the surface normals at that point. <p> In general the problem of computing the singularities in the intersection curve of high degree surfaces in floating point arithmetic can be numerically unstable [FR87]. Algorithms based on 24 exact arithmetic and birational transformations have been proposed in <ref> [AB88] </ref>. However they are computationally very slow. Our algorithms are based on the local geometry of the curve and the properties of the representation M (u; v). The algorithm proposed here assumes that all the singular points on the curve are geometrically isolated and well apart.
Reference: [Arn83] <author> D. S. Arnon. </author> <title> Topologically reliable display of algebraic curves. </title> <journal> Computer Graphics, </journal> <volume> 17 </volume> <pages> 219-227, </pages> <year> 1983. </year>
Reference-contexts: In many ways the underlying philosophy is rather similar to cylindrical algebraic decomposition [Col75] based algorithms for partitioning the domain into regions. Our algorithm uses an efficient and accurate zero-dimensional solver [Man94a] and works well using finite precision arithmetic. On the other hand, the algorithms based on algebraic decomposition <ref> [Arn83] </ref> compute all the extremal point and turning points using purely symbolic methods and exact arithmetic.
Reference: [BHHL88] <author> C.L. Bajaj, C.M. Hoffmann, J.E.H. Hopcroft, and R.E. Lynch. </author> <title> Tracing surface intersections. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 5 </volume> <pages> 285-307, </pages> <year> 1988. </year>
Reference-contexts: In this paper, Piegl uses geometric principles to compute the intersection of quadric surfaces very accurately. However, the algorithm cannot be easily extended to the general intersection problem. Marching methods: These are by far the most widely used <ref> [Far86, BHHL88, BK90, KPW90] </ref> because of their generality and ease of implementation. The basic advantage of this technique is its generality, allowing intersection of arbitrary parametric surfaces like offsets and blends. <p> These algorithms work very well to isolate cases with no loops only if the surfaces are relatively flat. However, in the presence of small loops or singularities, the algorithm becomes slow. Most algorithms use the local geometry of the curve coupled with quasi-Newton's methods <ref> [BHHL88, BK90] </ref> for tracing. These methods do not converge well sometimes [FF92] and many issues related to choice of step size to prevent component jumping are still open. <p> The complex tracing idea was applied here, and a point on the loop was found. 5 Tracing Given the start points, we evaluate the curve using our tracing algorithm. There are a number of algorithms proposed for tracing <ref> [BHHL88, BK90, Che89, KPW90] </ref>. Given a point on the curve, an approximate value of the next point is obtained by taking a small step size in a direction determined by the local geometry of the curve.
Reference: [BK90] <author> R.E. </author> <title> Barnhill and S.N. Kersey. A marching method for parametric surface/surface intersection. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 7 </volume> <pages> 257-280, </pages> <year> 1990. </year>
Reference-contexts: In this paper, Piegl uses geometric principles to compute the intersection of quadric surfaces very accurately. However, the algorithm cannot be easily extended to the general intersection problem. Marching methods: These are by far the most widely used <ref> [Far86, BHHL88, BK90, KPW90] </ref> because of their generality and ease of implementation. The basic advantage of this technique is its generality, allowing intersection of arbitrary parametric surfaces like offsets and blends. <p> These algorithms work very well to isolate cases with no loops only if the surfaces are relatively flat. However, in the presence of small loops or singularities, the algorithm becomes slow. Most algorithms use the local geometry of the curve coupled with quasi-Newton's methods <ref> [BHHL88, BK90] </ref> for tracing. These methods do not converge well sometimes [FF92] and many issues related to choice of step size to prevent component jumping are still open. <p> The complex tracing idea was applied here, and a point on the loop was found. 5 Tracing Given the start points, we evaluate the curve using our tracing algorithm. There are a number of algorithms proposed for tracing <ref> [BHHL88, BK90, Che89, KPW90] </ref>. Given a point on the curve, an approximate value of the next point is obtained by taking a small step size in a direction determined by the local geometry of the curve.
Reference: [Che89] <author> K.P Cheng. </author> <title> Using plane vector fields to obtain all the intersection curves of two general surfaces. </title> <booktitle> In Theory and Practice of Geometric Modeling, </booktitle> <pages> pages 187-204, </pages> <year> 1989. </year>
Reference-contexts: The intersection curve can be defined implicitly as an algebraic set based on the surface equations, as a curve of zero distance between the two surfaces, or as a vector field <ref> [Hof90, KPW90, Che89] </ref>. Tracing can be done on the intersection curve in higher dimensions or on its projection in the plane. According to [Hof90], the projection results in a high-degree formulation and its computation can be inefficient and numerically unreliable. <p> The complex tracing idea was applied here, and a point on the loop was found. 5 Tracing Given the start points, we evaluate the curve using our tracing algorithm. There are a number of algorithms proposed for tracing <ref> [BHHL88, BK90, Che89, KPW90] </ref>. Given a point on the curve, an approximate value of the next point is obtained by taking a small step size in a direction determined by the local geometry of the curve.
Reference: [Col75] <author> G.E. Collins. </author> <title> Quantifier elimination for real closed fields by cylindrical algebraic decomposition. </title> <booktitle> In Lecture Notes in Computer Science, number 33, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1975. </year>
Reference-contexts: For most practical cases, there are a few well-separated components in the real domain and the algorithm performs well for such cases. In many ways the underlying philosophy is rather similar to cylindrical algebraic decomposition <ref> [Col75] </ref> based algorithms for partitioning the domain into regions. Our algorithm uses an efficient and accurate zero-dimensional solver [Man94a] and works well using finite precision arithmetic.
Reference: [Dix08] <author> A.L. Dixon. </author> <title> The eliminant of three quantics in two independent variables. </title> <journal> Proceedings of London Mathematical Society, </journal> <volume> 6 </volume> <pages> 49-69, 209-236, </pages> <year> 1908. </year>
Reference-contexts: There are different formulations of resultants for tensor product surfaces and triangular surfaces. It turns out that the resultant of these three equations can always be 6 expressed as the determinant of a matrix <ref> [Dix08] </ref>. Let us denote that matrix as M (x; y; z; w). Furthermore, each entry of the matrix is of the form a ij x + b ij y + c ij z + d ij w. <p> Given a point (u 1 ; v 1 ) in the domain of G (u; v), (s 1 ; t 1 ) can be computed from a vector in the kernel of M (u 1 ; v 1 ) <ref> [Dix08] </ref>. The main advantages of this matrix representation are its efficiency and accuracy. Although the singular set is defined in terms of a determinant, we 9 use algorithms based on eigenvalues and singular values for numerical stability.
Reference: [Dok85] <author> T. Dokken. </author> <title> Finding intersections of b-spline represented geometries using recursive subdivision techniques. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 2 </volume> <pages> 189-195, </pages> <year> 1985. </year>
Reference-contexts: Thus making use of domain decomposition and inverse power iterations, we ensure that there is no component jumping during tracing. It is possible to compute less conservative step sizes by using higher order derivatives of the intersection curve <ref> [Dok85, DSY89] </ref>. However, we feel that the complexity of computing higher order derivatives is much more than tracing with a smaller step size. In the next section, detection of cusps during tracing will be discussed.
Reference: [DSY89] <author> T. Dokken, V. Skytt, and A.M. Ytrehus. </author> <title> Recursive subdivision and iteration in intersections and related problems. </title> <booktitle> In Mathematical Methods in Computer-Aided Geometric Design, </booktitle> <pages> pages 207-214. </pages> <publisher> Academic Press, </publisher> <year> 1989. </year>
Reference-contexts: Thus making use of domain decomposition and inverse power iterations, we ensure that there is no component jumping during tracing. It is possible to compute less conservative step sizes by using higher order derivatives of the intersection curve <ref> [Dok85, DSY89] </ref>. However, we feel that the complexity of computing higher order derivatives is much more than tracing with a smaller step size. In the next section, detection of cusps during tracing will be discussed.
Reference: [Far86] <author> R.T. Farouki. </author> <title> The characterization of parametric surface sections. Computer Vision, </title> <journal> Graphics and Image Processing, </journal> <volume> 33 </volume> <pages> 209-236, </pages> <year> 1986. </year>
Reference-contexts: In this paper, Piegl uses geometric principles to compute the intersection of quadric surfaces very accurately. However, the algorithm cannot be easily extended to the general intersection problem. Marching methods: These are by far the most widely used <ref> [Far86, BHHL88, BK90, KPW90] </ref> because of their generality and ease of implementation. The basic advantage of this technique is its generality, allowing intersection of arbitrary parametric surfaces like offsets and blends.
Reference: [FF92] <author> D.A. Field and R. </author> <title> Field. A new family of curves for industrial applications. </title> <type> Technical report GMR-7571, </type> <institution> General Motors Research Laboratories, </institution> <year> 1992. </year>
Reference-contexts: However, in the presence of small loops or singularities, the algorithm becomes slow. Most algorithms use the local geometry of the curve coupled with quasi-Newton's methods [BHHL88, BK90] for tracing. These methods do not converge well sometimes <ref> [FF92] </ref> and many issues related to choice of step size to prevent component jumping are still open. Therefore, most implementations use very conservative step sizes for tracing and this slows down the algorithm. 3 Overall, current tracing algorithms are not considered robust [Sny92]. <p> Given the approximate value, these algorithms use local iterative methods like Newton's method to trace back on to the curve. The three main problems with tracing algorithms are <ref> [FF92, Sny92] </ref>: 1. Converging back on to the curve. 2. Component jumping. 3. Inability to handle singularities and multiple branches. The convergence problems arising from the behavior of Newton's method are highlighted in [FF92]. <p> The three main problems with tracing algorithms are [FF92, Sny92]: 1. Converging back on to the curve. 2. Component jumping. 3. Inability to handle singularities and multiple branches. The convergence problems arising from the behavior of Newton's method are highlighted in <ref> [FF92] </ref>. It is rather difficult to predict the convergence of Newton's method on high degree equations corresponding to the intersection (for bicubic patches). Component jumping can occur when two components of the curve are relatively close to each other as shown in Figure 7 (a).
Reference: [FR87] <author> R.T. Farouki and V.T. Rajan. </author> <title> On the numerical condition of polynomials in bernstein form. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 4 </volume> <pages> 191-216, </pages> <year> 1987. </year>
Reference-contexts: We divide the polynomial by (1 u) d and use a reparametrization of the form u = u 1u to obtain a representation in the power basis. Direct conversion from Bernstein to power basis can introduce numerical problems <ref> [FR87] </ref>. The resulting matrix M (u) can be represented as M (u) = u d M d + u d1 M d1 + : : : + uM 1 + M 0 : (9) where M i 's are matrices of order 2mn with numeric entries. <p> Since we are evaluating the plane curve, we compute all the singularities and the branches. In general the problem of computing the singularities in the intersection curve of high degree surfaces in floating point arithmetic can be numerically unstable <ref> [FR87] </ref>. Algorithms based on 24 exact arithmetic and birational transformations have been proposed in [AB88]. However they are computationally very slow. Our algorithms are based on the local geometry of the curve and the properties of the representation M (u; v).
Reference: [Gei83] <author> A. Geisow. </author> <title> Surface Interrogations. </title> <type> PhD thesis, </type> <institution> School of Computing Studies and Accountancy, University of East Anglia, </institution> <year> 1983. </year> <month> 31 </month>
Reference-contexts: The last step is to merge all the individual curves together to get the final solution. This approach has the flavor of the divide and conquer paradigm used extensively in algorithmic design. Subdivisions are based on the geometric properties of the control polytopes <ref> [LR80, Gei83, Las86] </ref>. These methods are convergent in the limit but if used for high-precision results lead to data proliferation and are consequently slow. In case subdivision is stopped at some finite steps, it may miss small loops or lead to incorrect connectivity in the presence of singularities.
Reference: [GL89] <author> G.H. Golub and C.F. Van Loan. </author> <title> Matrix Computations. </title> <publisher> John Hopkins Press, </publisher> <address> Baltimore, </address> <year> 1989. </year>
Reference-contexts: Although the singular set is defined in terms of a determinant, we 9 use algorithms based on eigenvalues and singular values for numerical stability. Efficient and accu-rate algorithms for computing the eigendecomposition and SVD (Singular Value Decomposition) are well known <ref> [GL89] </ref>, and good implementations are available as part of numerical libraries like EISPACK and LAPACK. 4.1 Curve-Surface Intersections The algorithms for computing start points on the intersection curve and decomposing the intersection curve for robust tracing are based on Bezier curve-surface intersections. <p> In case M d is singular or ill-conditioned, the intersection problem is reduced to a generalized eigenvalue problem [Man94b]. Algorithms to compute all the eigenvalues are based on QR orthogonal transformations <ref> [GL89] </ref>. They compute all the real as well as complex eigenvalues. Algorithms to compute eigenvalues in a subset of the real or complex domain are presented in [MK97] and are based on algebraic pruning.
Reference: [GLR82] <author> I. Gohberg, P. Lancaster, and L. Rodman. </author> <title> Matrix Polynomials. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1982. </year>
Reference-contexts: polynomial, M (u), have one-to-one correspondence with the eigendecomposition of C = 6 6 6 0 I 2mn 0 : : : 0 . . . . . . 0 0 0 : : : I 2mn 3 7 7 5 where M i = M 1 d M i <ref> [GLR82] </ref>. In case M d is singular or ill-conditioned, the intersection problem is reduced to a generalized eigenvalue problem [Man94b]. Algorithms to compute all the eigenvalues are based on QR orthogonal transformations [GL89]. They compute all the real as well as complex eigenvalues.
Reference: [Hof89] <author> C.M. Hoffmann. </author> <title> Geometric and Solid Modeling. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, Cali-fornia, </address> <year> 1989. </year>
Reference-contexts: In--tersection of algebraic and NURBS (Non-Uniform Rational B-Splines) surfaces has been listed as one of the most fundamental problem in the integration of geometric and solid modeling systems <ref> [Hof89, RR92] </ref>. The intersection of two surfaces can be complicated in general, with a number of closed loops and self-intersections (singularities). A good surface intersection algorithm should, in theory, be able to detect all such features of the intersection curve and trace them correctly in an efficient manner. <p> Surface intersection has been an active area of research for more than three decades. The different approaches can be categorized into subdivision, lattice evaluation, analytic methods, and marching methods. However, none of them are able to balance three conflicting goals of accuracy, robustness and efficiency <ref> [Hof89, Pra86, RR92] </ref>. The robustness of the algorithm refers to the detection of all curve segments, closed loops, and singularities assuming no numerical errors. The surface intersection problem gets further complicated due to numerical errors present in all finite-precision computations [Hof89]. <p> The robustness of the algorithm refers to the detection of all curve segments, closed loops, and singularities assuming no numerical errors. The surface intersection problem gets further complicated due to numerical errors present in all finite-precision computations <ref> [Hof89] </ref>. The accuracy characterizes numerical stability of the algorithm in the context of floating point arithmetic. Intersection algorithms must be efficient since they are applied frequently during the design process. <p> It has been applied to the intersection of high-degree parametric surfaces (bicubic patches) and performs well. 1.1 Previous Work There is a significant body of literature addressing the surface intersection problem. Some recent surveys include <ref> [Pat93, Pra86, Hof89] </ref>. Surface intersection algorithms can be broadly classified into four major categories: subdivision, lattice evaluation, analytic methods, and marching methods. More recently, techniques have been designed that combine features of different categories. These are generally referred to as hybrid methods. <p> Given two Bezier surfaces, F (s; t) = (X (s; t); Y (s; t); Z (s; t); W (s; t)) in homogeneous coordinates, implicitize F (s; t) to the form f (x; y; z; w) = 0 <ref> [Sed83, Hof89] </ref> and substitute the parametrization of G (u; v) into f to get an algebraic plane curve of the form f (X (u; v); Y (u; v); Z (u; v); W (u; v)) = 0: (2) This corresponds to an algebraic plane curve birationally equivalent to the original intersection curve. <p> However, its degree is rather high and leads to efficiency and accuracy problems <ref> [Hof89] </ref>. Instead of explicitly computing the plane curve, we use numerically stable algorithms like eigenvalue and Singular Value Decomposition (SVD) computation. <p> The conditioning becomes more significant because of errors introduced by numerical computations. If the input data changes by *, the output results will change by a function ffi (*). For very small values of *, there may exist a constant such that ffi (*) * <ref> [Hof89] </ref>. If is small the problem is said to be well-conditioned. A large value of signifies an ill-conditioned problem. The value is called the condition number. However, it is nontrivial to calculate for surface intersection problems. Because of such difficulties, we restrict ourselves to robustness issues for well-conditioned problems only.
Reference: [Hof90] <author> C.M. Hoffmann. </author> <title> A dimensionality paradigm for surface interrogations. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 7 </volume> <pages> 517-532, </pages> <year> 1990. </year>
Reference-contexts: The intersection curve can be defined implicitly as an algebraic set based on the surface equations, as a curve of zero distance between the two surfaces, or as a vector field <ref> [Hof90, KPW90, Che89] </ref>. Tracing can be done on the intersection curve in higher dimensions or on its projection in the plane. According to [Hof90], the projection results in a high-degree formulation and its computation can be inefficient and numerically unreliable. <p> Tracing can be done on the intersection curve in higher dimensions or on its projection in the plane. According to <ref> [Hof90] </ref>, the projection results in a high-degree formulation and its computation can be inefficient and numerically unreliable. To circumvent these problems, a representation based on an unevaluated determinant was introduced in [MC91]. The components of an intersection curve consist of boundary segments and closed loops.
Reference: [Hoh91] <author> M.E. Hohmeyer. </author> <title> A surface intersection algorithm based on loop detection. </title> <journal> International Journal of Computational Geometry and Applications, </journal> <volume> 1(4) </volume> <pages> 473-490, </pages> <year> 1991. </year> <note> Special issue on Solid Modeling. </note>
Reference-contexts: The components of an intersection curve consist of boundary segments and closed loops. Start points on the boundary segments are obtained by curve-surface intersections [SN91]. Many techniques have appeared over the last few years to detect closed loops on the intersection curve <ref> [SM88, Hoh91, KPP90, ZS93] </ref>. They are based on bounds on Gauss maps and subdivide each surface until sufficient conditions for the non-existence of loops are satisfied. These algorithms work very well to isolate cases with no loops only if the surfaces are relatively flat. <p> However, we show that we can use a simple algebraic property which will guide us to some point on every loop. We shall describe our idea of loop detection in detail next. 4.3 Loop Detection A number of algorithms have appeared on finding loops in surface intersection <ref> [SM88, Hoh91, KPP90, ZS93] </ref>. They are based on geometric properties of the surfaces and arrive at a sufficient criterion for two surfaces to have no loop intersections. The first such condition was developed by Sinha [PSW85]. <p> Gauss maps are basically the projections of the normal vector field of the surface on a unit sphere. Techniques for approximating the Gauss map using bounding cones was introduced in [SM88]. Hohmeyer <ref> [Hoh91] </ref> reduced the problem of detecting overlap of Gauss maps to a linear programming problem. A pseudo-normal patch (F s fiF t ) is evaluated for each parametric surface as another Bezier patch and the control points are used to check for a separating plane. <p> Linear programming can be done in linear time (in fixed dimensions), and some very fast practical algorithms have been designed [Sei90]. If the two surfaces do not satisfy the test, the patches are subdivided and the algorithm is applied recursively. The algorithms of <ref> [Hoh91, ZS93] </ref> work very well in practice in isolating intersections with no loops, but only if the surfaces are relatively flat. If the intersection curve has a singularity or a small loop, it may take too many levels of subdivision to detect it. <p> The normal patch for a 11 rational patch of degree m (in u) and n (in v) is of degree 3m (in u) and 3n (in v) <ref> [Hoh91] </ref>. For example, eight levels of subdivision were required for the intersection of the two patches shown in We initially use Hohmeyer's algorithm based on Gauss maps and linear programming to check for absence of loops [Hoh91]. <p> and n (in v) is of degree 3m (in u) and 3n (in v) <ref> [Hoh91] </ref>. For example, eight levels of subdivision were required for the intersection of the two patches shown in We initially use Hohmeyer's algorithm based on Gauss maps and linear programming to check for absence of loops [Hoh91]. If the loop detection criterion is not satisfied, we use the algorithm presented below for computing start points on the loops. The intersection curve is an algebraic plane curve in the complex projective plane defined by u and v.
Reference: [KM96] <author> S. Krishnan and D. Manocha. </author> <title> Efficient representations and techniques for computing b-rep's of csg models with nurbs primitives. </title> <booktitle> In Proceedings of CSG'96, </booktitle> <pages> pages 101-122. </pages> <publisher> Information Geometers Ltd, </publisher> <year> 1996. </year>
Reference-contexts: Unfortunately, there are no existing benchmarks available to test our algorithm. Further, there are very few published performance results on surface 28 intersection algorithms. The intersection algorithm has also been used to compute Boolean combinations of solids (Constructive Solid Geometry - CSG) <ref> [KM96] </ref>. CSG is one of the more important representation schemes in solid modeling. CSG defines solids as Boolean combinations of primitive solids, and usually stores them in binary trees.
Reference: [KPP90] <author> G.A. Kriezis, P.V. Prakash, and N.M. Patrikalakis. </author> <title> Method for intersecting algebraic surfaces with rational polynomial patches. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 22(10) </volume> <pages> 645-654, </pages> <year> 1990. </year>
Reference-contexts: The components of an intersection curve consist of boundary segments and closed loops. Start points on the boundary segments are obtained by curve-surface intersections [SN91]. Many techniques have appeared over the last few years to detect closed loops on the intersection curve <ref> [SM88, Hoh91, KPP90, ZS93] </ref>. They are based on bounds on Gauss maps and subdivide each surface until sufficient conditions for the non-existence of loops are satisfied. These algorithms work very well to isolate cases with no loops only if the surfaces are relatively flat. <p> However, we show that we can use a simple algebraic property which will guide us to some point on every loop. We shall describe our idea of loop detection in detail next. 4.3 Loop Detection A number of algorithms have appeared on finding loops in surface intersection <ref> [SM88, Hoh91, KPP90, ZS93] </ref>. They are based on geometric properties of the surfaces and arrive at a sufficient criterion for two surfaces to have no loop intersections. The first such condition was developed by Sinha [PSW85].
Reference: [KPW90] <institution> G.A. Kriezis, N.M. Patrikalakis, and F.E. </institution> <month> Wolter. </month> <title> Topological and differential equation methods for surface intersections. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 24(1) </volume> <pages> 41-55, </pages> <year> 1990. </year>
Reference-contexts: In this paper, Piegl uses geometric principles to compute the intersection of quadric surfaces very accurately. However, the algorithm cannot be easily extended to the general intersection problem. Marching methods: These are by far the most widely used <ref> [Far86, BHHL88, BK90, KPW90] </ref> because of their generality and ease of implementation. The basic advantage of this technique is its generality, allowing intersection of arbitrary parametric surfaces like offsets and blends. <p> The intersection curve can be defined implicitly as an algebraic set based on the surface equations, as a curve of zero distance between the two surfaces, or as a vector field <ref> [Hof90, KPW90, Che89] </ref>. Tracing can be done on the intersection curve in higher dimensions or on its projection in the plane. According to [Hof90], the projection results in a high-degree formulation and its computation can be inefficient and numerically unreliable. <p> The complex tracing idea was applied here, and a point on the loop was found. 5 Tracing Given the start points, we evaluate the curve using our tracing algorithm. There are a number of algorithms proposed for tracing <ref> [BHHL88, BK90, Che89, KPW90] </ref>. Given a point on the curve, an approximate value of the next point is obtained by taking a small step size in a direction determined by the local geometry of the curve.
Reference: [Las86] <author> D. </author> <title> Lasser. Intersection of parametric surfaces in the bernstein-bezier representation. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 18(4) </volume> <pages> 186-192, </pages> <year> 1986. </year>
Reference-contexts: The last step is to merge all the individual curves together to get the final solution. This approach has the flavor of the divide and conquer paradigm used extensively in algorithmic design. Subdivisions are based on the geometric properties of the control polytopes <ref> [LR80, Gei83, Las86] </ref>. These methods are convergent in the limit but if used for high-precision results lead to data proliferation and are consequently slow. In case subdivision is stopped at some finite steps, it may miss small loops or lead to incorrect connectivity in the presence of singularities.
Reference: [LR80] <author> J.M. Lane and R.F. Riesenfeld. </author> <title> A theoretical development for the computer generation and display of piecewise polynomial surfaces. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 2(1) </volume> <pages> 150-159, </pages> <year> 1980. </year>
Reference-contexts: The last step is to merge all the individual curves together to get the final solution. This approach has the flavor of the divide and conquer paradigm used extensively in algorithmic design. Subdivisions are based on the geometric properties of the control polytopes <ref> [LR80, Gei83, Las86] </ref>. These methods are convergent in the limit but if used for high-precision results lead to data proliferation and are consequently slow. In case subdivision is stopped at some finite steps, it may miss small loops or lead to incorrect connectivity in the presence of singularities.
Reference: [Man92] <author> D. Manocha. </author> <title> Algebraic and Numeric Techniques for Modeling and Robotics. </title> <type> PhD thesis, </type> <institution> Computer Science Division, Department of Electrical Engineering and Computer Science, University of California, Berkeley, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: However, in their presence, the resultant method will not work. It was shown in <ref> [Man92] </ref> that the maximum rank submatrix (a non-vanishing minor) contains the implicit form as a factor in such cases. Therefore, in order to obtain the implicit representation of the surface, we have to find the rank submatrix. This can be achieved by performing Gaussian elimination on the original matrix.
Reference: [Man94a] <author> D. Manocha. </author> <title> Computing selected solutions of polynomial equations. </title> <booktitle> In Proceedings of International Symposium on Symbolic and Algebraic Computation, </booktitle> <pages> pages 1-8, </pages> <address> Oxford, England, 1994. </address> <publisher> ACM Press. </publisher>
Reference-contexts: In many ways the underlying philosophy is rather similar to cylindrical algebraic decomposition [Col75] based algorithms for partitioning the domain into regions. Our algorithm uses an efficient and accurate zero-dimensional solver <ref> [Man94a] </ref> and works well using finite precision arithmetic. On the other hand, the algorithms based on algebraic decomposition [Arn83] compute all the extremal point and turning points using purely symbolic methods and exact arithmetic.
Reference: [Man94b] <author> D. Manocha. </author> <title> Solving systems of polynomial equations. </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pages 46-55, </pages> <month> March </month> <year> 1994. </year> <journal> Special Issue on Solid Modeling. </journal> <volume> 32 </volume>
Reference-contexts: There are many algorithms known for computing these intersections based on subdivision properties of control polytopes. Their convergence can be improved by Bezier clipping [SN91]. We use some recent algorithms for these intersections based on eigenvalue computations <ref> [Man94b] </ref>. Given a surface F (s; t), we compute its implicit representation as described in the previous section and obtain a matrix formulation M (x; y; z; w). <p> In case M d is singular or ill-conditioned, the intersection problem is reduced to a generalized eigenvalue problem <ref> [Man94b] </ref>. Algorithms to compute all the eigenvalues are based on QR orthogonal transformations [GL89]. They compute all the real as well as complex eigenvalues. Algorithms to compute eigenvalues in a subset of the real or complex domain are presented in [MK97] and are based on algebraic pruning.
Reference: [MC91] <author> D. Manocha and J.F. Canny. </author> <title> A new approach for surface intersection. </title> <journal> International Journal of Computational Geometry and Applications, </journal> <volume> 1(4) </volume> <pages> 491-516, </pages> <year> 1991. </year> <note> Special issue on Solid Modeling. </note>
Reference-contexts: According to [Hof90], the projection results in a high-degree formulation and its computation can be inefficient and numerically unreliable. To circumvent these problems, a representation based on an unevaluated determinant was introduced in <ref> [MC91] </ref>. The components of an intersection curve consist of boundary segments and closed loops. Start points on the boundary segments are obtained by curve-surface intersections [SN91]. Many techniques have appeared over the last few years to detect closed loops on the intersection curve [SM88, Hoh91, KPP90, ZS93]. <p> The plane curves with one-to-one correspondence with the intersection curve in space are shown in Figure 2. We represent the plane curve as an unevaluated determinant <ref> [MC91] </ref>. Matrix Formulation: In this paper, we shall assume that the parametric surface is given in the form of a tensor product Bezier patch. <p> To compute the first and higher order partials, we use a simple variation of Gaussian elimination <ref> [MC91] </ref>. The basic idea is to compute the partial derivative of each matrix entry at the beginning of computation and update the derivative information with each step of Gaussian elimination.
Reference: [MK97] <author> D. Manocha and S. Krishnan. </author> <title> Algebraic pruning: A fast technique for curve and surface intersections. Computer Aided Geometric Design (to appear), </title> <year> 1997. </year>
Reference-contexts: Algorithms to compute all the eigenvalues are based on QR orthogonal transformations [GL89]. They compute all the real as well as complex eigenvalues. Algorithms to compute eigenvalues in a subset of the real or complex domain are presented in <ref> [MK97] </ref> and are based on algebraic pruning. If there are few intersections (two or three in the domain), the pruning approach is about an order of magnitude faster than the QR algorithm. 4.2 Start Points The marching algorithm needs start points on each component of the intersection curve.
Reference: [Pat93] <author> N.M. Patrikalakis. </author> <title> Surface-to-surface intersections. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 13(1) </volume> <pages> 89-95, </pages> <year> 1993. </year>
Reference-contexts: It has been applied to the intersection of high-degree parametric surfaces (bicubic patches) and performs well. 1.1 Previous Work There is a significant body of literature addressing the surface intersection problem. Some recent surveys include <ref> [Pat93, Pra86, Hof89] </ref>. Surface intersection algorithms can be broadly classified into four major categories: subdivision, lattice evaluation, analytic methods, and marching methods. More recently, techniques have been designed that combine features of different categories. These are generally referred to as hybrid methods.
Reference: [Pie89] <author> L. Piegl. </author> <title> Geometric method of intersecting natural quadrics represented in trimmed surface form. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 21(4) </volume> <pages> 201-212, </pages> <year> 1989. </year>
Reference-contexts: Analytic methods: Analytic methods are based on explicit representation of the intersection curve and have been restricted to low degree intersections [Sed83, Sar83]. Another alternative to the analytic methods is the use of geometric methods developed by <ref> [Pie89] </ref>. In this paper, Piegl uses geometric principles to compute the intersection of quadric surfaces very accurately. However, the algorithm cannot be easily extended to the general intersection problem.
Reference: [Pra86] <author> M.J. Pratt. </author> <title> Surface/surface intersection problems. </title> <editor> In J.A. Gregory, editor, </editor> <booktitle> The Mathematics of Surfaces II, </booktitle> <pages> pages 117-142, </pages> <address> Oxford, 1986. </address> <publisher> Claredon Press. </publisher>
Reference-contexts: Surface intersection has been an active area of research for more than three decades. The different approaches can be categorized into subdivision, lattice evaluation, analytic methods, and marching methods. However, none of them are able to balance three conflicting goals of accuracy, robustness and efficiency <ref> [Hof89, Pra86, RR92] </ref>. The robustness of the algorithm refers to the detection of all curve segments, closed loops, and singularities assuming no numerical errors. The surface intersection problem gets further complicated due to numerical errors present in all finite-precision computations [Hof89]. <p> It has been applied to the intersection of high-degree parametric surfaces (bicubic patches) and performs well. 1.1 Previous Work There is a significant body of literature addressing the surface intersection problem. Some recent surveys include <ref> [Pat93, Pra86, Hof89] </ref>. Surface intersection algorithms can be broadly classified into four major categories: subdivision, lattice evaluation, analytic methods, and marching methods. More recently, techniques have been designed that combine features of different categories. These are generally referred to as hybrid methods.
Reference: [PSW85] <author> E. Klassen P. Sinha and K. K. Wang. </author> <title> Exploiting topological and geometric properties for selective subdivision. </title> <booktitle> In Proceedings of ACM symposium on Computational Geometry, </booktitle> <pages> pages 39-45, </pages> <year> 1985. </year>
Reference-contexts: They are based on geometric properties of the surfaces and arrive at a sufficient criterion for two surfaces to have no loop intersections. The first such condition was developed by Sinha <ref> [PSW85] </ref>. It was proved that two surface patches cannot intersect in a loop if their corresponding Gauss maps do not overlap. Gauss maps are basically the projections of the normal vector field of the surface on a unit sphere.
Reference: [RR87] <author> J.R. Rossignac and A.A.G. Requicha. </author> <title> Piecewise-circular curves for geometric modeling. </title> <journal> IBM Journal of Research and Development, </journal> <volume> 31(3) </volume> <pages> 296-313, </pages> <year> 1987. </year>
Reference-contexts: The robustness of this approach can be improved by posing the problem algebraically and using interval arithmetic [Sny92]. Lattice evaluation: These techniques decompose surface intersection into a series of lower geometric complexity problems like curve-surface intersections <ref> [RR87] </ref>. This is followed by connecting the discrete points into curves. Determination of the discrete step size to guarantee robust solutions is hard. Further, these techniques can be slow and suffer from robustness problems in terms of finding all the small loops and singularities.
Reference: [RR92] <author> A.A.G. Requicha and J.R. Rossignac. </author> <title> Solid modeling and beyond. </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pages 31-44, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: In--tersection of algebraic and NURBS (Non-Uniform Rational B-Splines) surfaces has been listed as one of the most fundamental problem in the integration of geometric and solid modeling systems <ref> [Hof89, RR92] </ref>. The intersection of two surfaces can be complicated in general, with a number of closed loops and self-intersections (singularities). A good surface intersection algorithm should, in theory, be able to detect all such features of the intersection curve and trace them correctly in an efficient manner. <p> Surface intersection has been an active area of research for more than three decades. The different approaches can be categorized into subdivision, lattice evaluation, analytic methods, and marching methods. However, none of them are able to balance three conflicting goals of accuracy, robustness and efficiency <ref> [Hof89, Pra86, RR92] </ref>. The robustness of the algorithm refers to the detection of all curve segments, closed loops, and singularities assuming no numerical errors. The surface intersection problem gets further complicated due to numerical errors present in all finite-precision computations [Hof89].
Reference: [Sar83] <author> R F Sarraga. </author> <title> Algebraic methods for intersection. Computer Vision, </title> <journal> Graphics and Image Processing, </journal> <volume> 22 </volume> <pages> 222-238, </pages> <year> 1983. </year>
Reference-contexts: Further, these techniques can be slow and suffer from robustness problems in terms of finding all the small loops and singularities. Analytic methods: Analytic methods are based on explicit representation of the intersection curve and have been restricted to low degree intersections <ref> [Sed83, Sar83] </ref>. Another alternative to the analytic methods is the use of geometric methods developed by [Pie89]. In this paper, Piegl uses geometric principles to compute the intersection of quadric surfaces very accurately. However, the algorithm cannot be easily extended to the general intersection problem.
Reference: [Sed83] <author> T.W. </author> <title> Sederberg. Implicit and Parametric Curves and Surfaces. </title> <type> PhD thesis, </type> <institution> Purdue University, </institution> <year> 1983. </year>
Reference-contexts: Further, these techniques can be slow and suffer from robustness problems in terms of finding all the small loops and singularities. Analytic methods: Analytic methods are based on explicit representation of the intersection curve and have been restricted to low degree intersections <ref> [Sed83, Sar83] </ref>. Another alternative to the analytic methods is the use of geometric methods developed by [Pie89]. In this paper, Piegl uses geometric principles to compute the intersection of quadric surfaces very accurately. However, the algorithm cannot be easily extended to the general intersection problem. <p> Given two Bezier surfaces, F (s; t) = (X (s; t); Y (s; t); Z (s; t); W (s; t)) in homogeneous coordinates, implicitize F (s; t) to the form f (x; y; z; w) = 0 <ref> [Sed83, Hof89] </ref> and substitute the parametrization of G (u; v) into f to get an algebraic plane curve of the form f (X (u; v); Y (u; v); Z (u; v); W (u; v)) = 0: (2) This corresponds to an algebraic plane curve birationally equivalent to the original intersection curve. <p> The implicit representation of the patch is obtained by eliminating s and t from x W (s; t) X (s; t) = 0; y W (s; t) Y (s; t) = 0; z W (s; t) Z (s; t) = 0 (3) using resultants <ref> [Sed83] </ref>. There are different formulations of resultants for tensor product surfaces and triangular surfaces. It turns out that the resultant of these three equations can always be 6 expressed as the determinant of a matrix [Dix08]. Let us denote that matrix as M (x; y; z; w).
Reference: [Sei90] <author> R. Seidel. </author> <title> Linear programming and convex hulls made easy. </title> <booktitle> In Proc. 6th Ann. ACM Conf. on Computational Geometry, </booktitle> <pages> pages 211-215, </pages> <address> Berkeley, California, </address> <year> 1990. </year>
Reference-contexts: Linear programming can be done in linear time (in fixed dimensions), and some very fast practical algorithms have been designed <ref> [Sei90] </ref>. If the two surfaces do not satisfy the test, the patches are subdivided and the algorithm is applied recursively. The algorithms of [Hoh91, ZS93] work very well in practice in isolating intersections with no loops, but only if the surfaces are relatively flat.
Reference: [SM88] <author> T.W. Sederberg and R.J. Meyers. </author> <title> Loop detection in surface patch intersections. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 5 </volume> <pages> 161-171, </pages> <year> 1988. </year>
Reference-contexts: The components of an intersection curve consist of boundary segments and closed loops. Start points on the boundary segments are obtained by curve-surface intersections [SN91]. Many techniques have appeared over the last few years to detect closed loops on the intersection curve <ref> [SM88, Hoh91, KPP90, ZS93] </ref>. They are based on bounds on Gauss maps and subdivide each surface until sufficient conditions for the non-existence of loops are satisfied. These algorithms work very well to isolate cases with no loops only if the surfaces are relatively flat. <p> However, we show that we can use a simple algebraic property which will guide us to some point on every loop. We shall describe our idea of loop detection in detail next. 4.3 Loop Detection A number of algorithms have appeared on finding loops in surface intersection <ref> [SM88, Hoh91, KPP90, ZS93] </ref>. They are based on geometric properties of the surfaces and arrive at a sufficient criterion for two surfaces to have no loop intersections. The first such condition was developed by Sinha [PSW85]. <p> Gauss maps are basically the projections of the normal vector field of the surface on a unit sphere. Techniques for approximating the Gauss map using bounding cones was introduced in <ref> [SM88] </ref>. Hohmeyer [Hoh91] reduced the problem of detecting overlap of Gauss maps to a linear programming problem. A pseudo-normal patch (F s fiF t ) is evaluated for each parametric surface as another Bezier patch and the control points are used to check for a separating plane.
Reference: [SN91] <author> T.W. Sederberg and T. Nishita. </author> <title> Geometric hermite approximation of surface patch intersection curves. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 8 </volume> <pages> 97-114, </pages> <year> 1991. </year>
Reference-contexts: To circumvent these problems, a representation based on an unevaluated determinant was introduced in [MC91]. The components of an intersection curve consist of boundary segments and closed loops. Start points on the boundary segments are obtained by curve-surface intersections <ref> [SN91] </ref>. Many techniques have appeared over the last few years to detect closed loops on the intersection curve [SM88, Hoh91, KPP90, ZS93]. They are based on bounds on Gauss maps and subdivide each surface until sufficient conditions for the non-existence of loops are satisfied. <p> There are many algorithms known for computing these intersections based on subdivision properties of control polytopes. Their convergence can be improved by Bezier clipping <ref> [SN91] </ref>. We use some recent algorithms for these intersections based on eigenvalue computations [Man94b]. Given a surface F (s; t), we compute its implicit representation as described in the previous section and obtain a matrix formulation M (x; y; z; w).
Reference: [Sny92] <author> J. Snyder. </author> <title> Interval arithmetic for computer graphics. </title> <booktitle> In Proceedings of ACM Siggraph, </booktitle> <pages> pages 121-130, </pages> <year> 1992. </year>
Reference-contexts: In case subdivision is stopped at some finite steps, it may miss small loops or lead to incorrect connectivity in the presence of singularities. The robustness of this approach can be improved by posing the problem algebraically and using interval arithmetic <ref> [Sny92] </ref>. Lattice evaluation: These techniques decompose surface intersection into a series of lower geometric complexity problems like curve-surface intersections [RR87]. This is followed by connecting the discrete points into curves. Determination of the discrete step size to guarantee robust solutions is hard. <p> These methods do not converge well sometimes [FF92] and many issues related to choice of step size to prevent component jumping are still open. Therefore, most implementations use very conservative step sizes for tracing and this slows down the algorithm. 3 Overall, current tracing algorithms are not considered robust <ref> [Sny92] </ref>. The singularities on the intersection curve can be classified in terms of solutions of algebraic equations. <p> Given the approximate value, these algorithms use local iterative methods like Newton's method to trace back on to the curve. The three main problems with tracing algorithms are <ref> [FF92, Sny92] </ref>: 1. Converging back on to the curve. 2. Component jumping. 3. Inability to handle singularities and multiple branches. The convergence problems arising from the behavior of Newton's method are highlighted in [FF92]. <p> There are no benchmarks available to test its efficiency, but our algorithm compares favorably to many of the published timings. For example, it performs an order of magnitude faster than techniques like interval arithmetic. <ref> [Sny92] </ref> reports that a difference operation (CSG operation) between a bumpy sphere and a cylinder using trimmed parametric surfaces takes order of a few minutes on a HP workstation.
Reference: [ZS93] <author> A. Zundel and T. </author> <title> Sederberg. Using pyramidal surfaces to detect and isolate surface/surface intersections. </title> <booktitle> In SIAM Conference on Geometric Design, </booktitle> <address> Tempe, AZ, </address> <year> 1993. </year> <month> 33 </month>
Reference-contexts: The components of an intersection curve consist of boundary segments and closed loops. Start points on the boundary segments are obtained by curve-surface intersections [SN91]. Many techniques have appeared over the last few years to detect closed loops on the intersection curve <ref> [SM88, Hoh91, KPP90, ZS93] </ref>. They are based on bounds on Gauss maps and subdivide each surface until sufficient conditions for the non-existence of loops are satisfied. These algorithms work very well to isolate cases with no loops only if the surfaces are relatively flat. <p> However, we show that we can use a simple algebraic property which will guide us to some point on every loop. We shall describe our idea of loop detection in detail next. 4.3 Loop Detection A number of algorithms have appeared on finding loops in surface intersection <ref> [SM88, Hoh91, KPP90, ZS93] </ref>. They are based on geometric properties of the surfaces and arrive at a sufficient criterion for two surfaces to have no loop intersections. The first such condition was developed by Sinha [PSW85]. <p> Linear programming can be done in linear time (in fixed dimensions), and some very fast practical algorithms have been designed [Sei90]. If the two surfaces do not satisfy the test, the patches are subdivided and the algorithm is applied recursively. The algorithms of <ref> [Hoh91, ZS93] </ref> work very well in practice in isolating intersections with no loops, but only if the surfaces are relatively flat. If the intersection curve has a singularity or a small loop, it may take too many levels of subdivision to detect it.
References-found: 41

