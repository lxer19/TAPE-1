URL: ftp://ftp.cs.wisc.edu/markhill/Misc/lamport_project.ps
Refering-URL: http://www.cs.wisc.edu/~markhill/stuff.html
Root-URL: 
Author: Sorin Manoj Plakal 
Keyword: Verifying Memory System Protocols  
Date: May 4, 1997  
Affiliation: Dept of Electrical Computer Engg Computer Sciences Dept University of Wisconsin-Madison  
Note: Dan  
Abstract: CS757 Project Report Abstract We have proposed a framework for verifying that multiprocessor memory systems satisfy the requirements of memory consistency models. As an increasing number of optimizations and relaxed consistency models are being used in modern multiprocessors, a methodology for proving system correctness is necessary to convince memory system designers that their systems behave correctly. The verification framework utilizes a logical clocking scheme to define a total ordering on the events occurring in the system. We then prove properties of this ordering that guarantee the satisfaction of a particular memory consistency model. In this report, we provide proofs that show that two simple memory systems (a bus-based system and a directory-based system) observe sequential consistency. We also outline the ways in which this method could be applied to prove that more aggressive memory systems observe more relaxed consistency models.
Abstract-found: 1
Intro-found: 1
Reference: [AB86] <author> J. Archibald and J.-L. Baer. </author> <title> Cache Coherence Protocols : Evaluation Using a Multiprocessor Simulation Model. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 4(4) </volume> <pages> 273-298, </pages> <month> November </month> <year> 1986. </year>
Reference-contexts: If processor 1 and processor 2 perform events at the same logical time, the event at processor 1 is considered to be done first. Correctness requirements for various consistency models can be expressed by using the Lamport ordering. For example, the requirement of sequential consistency <ref> [AB86] </ref> is that a load returns the value of the last store made in Lamport order.
Reference: [AG96] <author> S. Adve and K. Gharachorloo. </author> <title> Shared Memory COnsistency Models : A Tutorial. </title> <booktitle> IEEE Computer, </booktitle> <year> 1996. </year>
Reference: [DDHY92] <author> D. Dill, A. Drexler, A. Hu, and C. Yang. </author> <title> Protocol Verification as a Hardware Design Aid. </title> <booktitle> In Proceedings of the IEEE International Conference on COmputer Design : VLSI in Computers and Processors, </booktitle> <pages> pages 522-525, </pages> <year> 1992. </year>
Reference-contexts: Rigorous formal analysis provides the most thorough verification, but it is limited to use on small systems by the explosion in the state space for large, complicated systems. Formal verification software, such as M ur <ref> [DDHY92] </ref>, is designed to be used as a tool in the verification process, but it is not capable of verifying an entire system. Informal intuitive reasoning is more tractable and easier to understand, but it becomes less convincing as it becomes more informal.
Reference: [GAG + 93] <author> K. Gharachorloo, S. Adve, A. Gupta, J. Hennessy, and M. Hill. </author> <title> Specifying System Requirements for Memory Consistency Models. </title> <type> Technical report, </type> <institution> Stanford University Technical Report CSL-TR-93-594, University of Wisconsin-Madison Technical Report #1199, </institution> <year> 1993. </year>
Reference: [Lam78] <author> L. Lamport. </author> <title> Time, Clocks and the Ordering of Events in a Distributed System. </title> <journal> Communications of the ACM, </journal> <volume> 21(7) </volume> <pages> 558-565, </pages> <month> July </month> <year> 1978. </year>
Reference-contexts: We propose a framework for correctness evaluation where a total ordering is defined for all the memory transactions that take place in a parallel machine. To construct such a total ordering of events in multiprocessor systems, we shall use an adaptation of an ordering scheme proposed by Lamport <ref> [Lam78] </ref>. 1 Lamport's scheme uses logical clocks to assign numbers to events, where the numbers are the logical times at which the events occur. Each processor has a logical clock (or Lamport clock, as we will generally refer to it) for assigning numbers to events at that processor.
Reference: [RS84] <author> L. Rudolph and Z. Segall. </author> <title> Dynamic Decentralized Cache Schemes for MIMD Parallel Processors. </title> <booktitle> In Conference Proceedings of the 11th Annual Symposium on Computer Architecture, </booktitle> <pages> pages 340-347, </pages> <month> June </month> <year> 1984. </year> <month> 19 </month>
References-found: 6

