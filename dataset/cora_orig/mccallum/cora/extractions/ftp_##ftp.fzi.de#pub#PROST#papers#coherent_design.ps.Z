URL: ftp://ftp.fzi.de/pub/PROST/papers/coherent_design.ps.Z
Refering-URL: http://www.fzi.de/prost/publications/overview.html
Root-URL: http://www.fzi.de
Email: e-mail: rueping@fzi.de, fweber@fzi.de, zimmer@fzi.de  
Title: Demonstrating Coherent Design: A Data Structure Catalogue  
Author: Andreas Rping, Franz Weber, Walter Zimmer 
Address: Haid-und-Neu-Strae 10-14 D-76131 Karlsruhe, Germany  
Affiliation: Forschungszentrum Informatik (FZI) Bereich Programmstrukturen  
Abstract: This paper explains the objectives and principles of coherent design and examines how this approach is applied to build a catalogue of data structures. A quantitative analysis as well as practical experience show that coherent design does indeed improve the quality of an object-oriented library and the productivity during application development. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Casais, E. </author> <title> An Incremental Class Reorganization Approach. </title> <booktitle> In Proceedings of ECOOP 92, </booktitle> <editor> Madsen, O. L. (Ed.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> 615. </volume> <publisher> Springer Verlag, </publisher> <year> 1992, </year> <pages> pp. 114-132. </pages>
Reference-contexts: However, a strong methodological framework is needed for the benefits of object-orientation to materialize. As several studies (cf. <ref> [1] </ref>, [3], [4], [13], [14]) have shown, an undisciplined usage of object-oriented programming constructs leads to complex hierarchies that are difficult to understand and to extend, and to a considerable amount of redundant code. Moreover, some approaches place more emphasis on one particular requirement rather than on their entirety. <p> The non-rooted hierarchy does not allow for assigning standard semantics to all objects. The principle of conceptual abstraction is characterized by an intensive process of factoring out common properties, requiring reorganization of the inheritance graph. There are several reorganization approaches that work automatically (cf. <ref> [1] </ref>, [9]). The resulting hierarchy is easy to understand and thus facilitates component search and browsing. The rooted hierarchy makes it possible to introduce and reuse standard semantics for all objects. Eiffel In [1] avoiding the redefinition of inherited properties is considered the main criterion for reorganizing class hierarchies. <p> There are several reorganization approaches that work automatically (cf. <ref> [1] </ref>, [9]). The resulting hierarchy is easy to understand and thus facilitates component search and browsing. The rooted hierarchy makes it possible to introduce and reuse standard semantics for all objects. Eiffel In [1] avoiding the redefinition of inherited properties is considered the main criterion for reorganizing class hierarchies. The Eiffel catalogue is taken to demonstrate that this criterion is useful to discover missing abstractions and unwanted subclassing patterns like inheritance for code sharing purposes only.
Reference: [2] <author> Casais, E., Ranft, M., Schiefer, B., Theobald, D., and Zimmer, W. </author> <title> OBST - an Overview. </title> <type> Tech. Rep. </type> <institution> FZI.039.1, Forschungszentrum Informatik, </institution> <year> 1992. </year>
Reference-contexts: OBST, an object-oriented database system developed at FZI, supports a data structure catalogue applying several of the concepts of coherent design such as interface and concept classes, compatibility relationships, and partial implementations (for iterators) (cf. <ref> [2] </ref>). The concepts already proved to be useful in many practical applications. In particular when new efficiency requirements arose within our project, different implementation variants for interface classes were needed.
Reference: [3] <author> Cook, W. R. </author> <title> Interfaces and Specifications for the Smalltalk-80 Collection Classes. </title> <booktitle> In Proceedings of OOPSLA 92. SIGPLAN Notices, </booktitle> <volume> 27 (10), </volume> <publisher> ACM Press, </publisher> <year> 1992, </year> <pages> pp. 1-15. </pages>
Reference-contexts: However, a strong methodological framework is needed for the benefits of object-orientation to materialize. As several studies (cf. [1], <ref> [3] </ref>, [4], [13], [14]) have shown, an undisciplined usage of object-oriented programming constructs leads to complex hierarchies that are difficult to understand and to extend, and to a considerable amount of redundant code. Moreover, some approaches place more emphasis on one particular requirement rather than on their entirety. <p> Different hierarchies for the developer and the client Different views are possible for the different roles that can be taken in the process of software development. For instance, the implementation hierarchy of the Smalltalk collection classes differs from the hierarchy presented in <ref> [3] </ref>. We have shown situations in which one persons role changes or communication with other roles is necessary. In such situations, it is necessary to understand several views and concepts, thus increasing the cognitive overhead of working with the catalogue.
Reference: [4] <author> Halbert, D. C. and OBrien, P. D. </author> <title> Using Types and Inheritance in Object-Oriented Programming. </title> <journal> IEEE Software, </journal> <month> September </month> <year> 1987, </year> <pages> pp. 71-79. </pages>
Reference-contexts: However, a strong methodological framework is needed for the benefits of object-orientation to materialize. As several studies (cf. [1], [3], <ref> [4] </ref>, [13], [14]) have shown, an undisciplined usage of object-oriented programming constructs leads to complex hierarchies that are difficult to understand and to extend, and to a considerable amount of redundant code. Moreover, some approaches place more emphasis on one particular requirement rather than on their entirety.
Reference: [5] <author> Hanson, D. </author> <title> Printing Common Words. </title> <journal> Communications of the ACM, </journal> <volume> 30 (7), </volume> <year> 1987, </year> <pages> pp. 594-599. </pages>
Reference-contexts: The lower time bound O (n) (and space O (n)) is achieved by using bucket sort as implementation variant for Sorted_Bag in filtering (cf. <ref> [5] </ref>). Bucket sort can be implemented as an implementation variant for Sorted_Bag by a dynamic array of sets. 4.4 Extending the Catalogue If the input size runs the risk of exceeding the main memory size, then space requirements become significant.
Reference: [6] <author> International Business Machines Corp. </author> <title> IBM OS/2 C/C++ Compiler - Collection Class Library Guide, </title> <note> 1993. To appear. </note>
Reference-contexts: Making use of this version, an interactive theorem prover was successfully developed. Inuenced by the ideas of coherent design, IBM developed a C++ catalogue which is currently being distributed commercially as a part of the operating system OS/2 (cf. <ref> [6] </ref>). Both abstract and concrete C++ classes are provided. The abstract classes are organized in a class hierarchy. Only for the leaves of this hierarchy implementations are supplied; all other abstract classes are concept classes as described in this paper. The benefits of this design are described in [6] as leading <p> OS/2 (cf. <ref> [6] </ref>). Both abstract and concrete C++ classes are provided. The abstract classes are organized in a class hierarchy. Only for the leaves of this hierarchy implementations are supplied; all other abstract classes are concept classes as described in this paper. The benefits of this design are described in [6] as leading to a catalogue that is a complete, systematic, and consistent combination of basic properties. A framework of properties is supplied to help to decide which abstract data type is appropriate in a given situation.
Reference: [7] <author> Knuth, D. E. </author> <title> A Literate Program. </title> <journal> Communications of the ACM, </journal> <volume> 29 (6), </volume> <year> 1986, </year> <pages> pp. 471-483. </pages>
Reference-contexts: Bucket sort can be implemented as an implementation variant for Sorted_Bag by a dynamic array of sets. 4.4 Extending the Catalogue If the input size runs the risk of exceeding the main memory size, then space requirements become significant. In <ref> [7] </ref> a solution with space O (d) has been presented while keeping up running time O (n).
Reference: [8] <author> Lieberherr, K., Holland, I., and Riel, A. </author> <title> Object-Oriented Programming: an Objective Sense of Style. </title> <journal> SIGPLAN Notices (special issue on OOPSLA 88), </journal> <volume> Meyrowitz, </volume> <editor> N. (Ed.), </editor> <volume> 23 (11). </volume> <publisher> ACM, </publisher> <month> November </month> <year> 1988, </year> <pages> pp. 323-334. </pages>
Reference-contexts: The introduction of indices in the catalogue has been a tradeoff between comprehensibility a new concept has to be understood and efficiency. 5.2 Comparison with other Approaches Law of Demeter Both approaches support abstract programming. The Law of Demeter (cf. <ref> [8] </ref>) allows for checking and transforming programs automatically so that they comply with the law. In general, this requires adding several levels of indirection leading to a loss of efficiency.
Reference: [9] <author> Lieberherr, K. J., Bergstein, P., and Silva-Lepe, I. </author> <title> From Objects to Classes: Algorithms for Optimal Object-Oriented Design. </title> <journal> Software Engineering Journal, </journal> <volume> BCS/IEE, </volume> <month> July </month> <year> 1991, </year> <pages> pp. 205-228. </pages>
Reference-contexts: The non-rooted hierarchy does not allow for assigning standard semantics to all objects. The principle of conceptual abstraction is characterized by an intensive process of factoring out common properties, requiring reorganization of the inheritance graph. There are several reorganization approaches that work automatically (cf. [1], <ref> [9] </ref>). The resulting hierarchy is easy to understand and thus facilitates component search and browsing. The rooted hierarchy makes it possible to introduce and reuse standard semantics for all objects. Eiffel In [1] avoiding the redefinition of inherited properties is considered the main criterion for reorganizing class hierarchies.
Reference: [10] <author> Mehlhorn, K. and Nher, S. </author> <title> Algorithm Design and Software Libraries: Recent Developments in the LEDA Project. </title> <booktitle> In Algorithms, Software, Architectures, Information Processing 92. </booktitle> <volume> vol. 1, </volume> <publisher> Elsevier Science Publishers B.V., </publisher> <year> 1992. </year>
Reference-contexts: Indices allow for dealing with elements without losing the information concerning their physical position which can then be exploited for efficient programming. A concept similar to indices is presented in <ref> [10] </ref>. Get_element returns the actual element to which an index refers. In Dynamic, the methods insert and remove are introduced. These methods depend on so-called insert positions or, respectively, remove positions. These positions serve as a sort of logical access to certain elements.
Reference: [11] <author> Meyer, B. </author> <title> Tools for the New Culture: Lessons from the Design of the Eiffel Libraries. </title> <journal> Communications of the ACM, </journal> <volume> 33 (9), </volume> <year> 1990, </year> <pages> pp. 68-88. </pages>
Reference-contexts: Redefinition of a partial implementation for efficiency reasons is the only exception. Since such a redefinition must be behaviour preserving, it does, however, not indicate a missing abstraction or an unwanted subclassing pattern. Other inheritance policies In <ref> [11] </ref> a covariant argument typing policy is proposed for structuring the inheritance hierarchy and redefining the argument types of inherited methods. On the other hand, specialization allows for the restriction of a class interface.
Reference: [12] <author> Rping, A., Weber, F., and Zimmer, W. </author> <title> Specification of a Data Structure Catalogue in COFFER. </title> <type> Tech. Rep. </type> <institution> ProSt/92-6, Forschungszentrum Informatik, </institution> <year> 1992. </year>
Reference-contexts: This did not cause any modifications to existing application code while allowing for an easy tuning with more appropriate implementation variants. Finally, the concept and interface classes of the catalogue were recently specified in an Eiffel-like language called Coffer (cf. <ref> [12] </ref>). 4 Example We demonstrate the usefulness of coherent design by solving the problem introduced in Section 2 using our data structure catalogue: Given a text file, find the k most common words in this file.
Reference: [13] <author> Sakkinen, M. </author> <title> Disciplined Inheritance. </title> <booktitle> In Proceedings of ECOOP 89, </booktitle> <editor> Cook, S. (Ed.), </editor> <booktitle> British Computer Society Workshop Series. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1989, </year> <pages> pp. 39-56. </pages>
Reference-contexts: However, a strong methodological framework is needed for the benefits of object-orientation to materialize. As several studies (cf. [1], [3], [4], <ref> [13] </ref>, [14]) have shown, an undisciplined usage of object-oriented programming constructs leads to complex hierarchies that are difficult to understand and to extend, and to a considerable amount of redundant code. Moreover, some approaches place more emphasis on one particular requirement rather than on their entirety.
Reference: [14] <author> Taenzer, D., Ganti, M., and Podar, S. </author> <title> Problems in Object-Oriented Software Reuse. </title> <booktitle> In Proceedings of ECOOP 89, </booktitle> <editor> Cook, S. (Ed.), </editor> <booktitle> British Computer Society Workshop Series. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1989, </year> <pages> pp. 25-38. </pages>
Reference-contexts: However, a strong methodological framework is needed for the benefits of object-orientation to materialize. As several studies (cf. [1], [3], [4], [13], <ref> [14] </ref>) have shown, an undisciplined usage of object-oriented programming constructs leads to complex hierarchies that are difficult to understand and to extend, and to a considerable amount of redundant code. Moreover, some approaches place more emphasis on one particular requirement rather than on their entirety.
Reference: [15] <author> Uhl, J. and Schmid, H. A. </author> <title> A Systematic Catalogue of Reusable Abstract Data Types. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> 460. </volume> <publisher> Springer Verlag, </publisher> <year> 1990. </year>
Reference-contexts: The first ideas of coherent design were applied to a catalogue of data structures that was implemented in Ada and is now being used by IBM USA. An improved Ada catalogue was presented in <ref> [15] </ref>. Based on [15], the catalogue was later transferred to Flavors (cf. [16]), an object-oriented extension of Lisp. Making use of this version, an interactive theorem prover was successfully developed. <p> The first ideas of coherent design were applied to a catalogue of data structures that was implemented in Ada and is now being used by IBM USA. An improved Ada catalogue was presented in <ref> [15] </ref>. Based on [15], the catalogue was later transferred to Flavors (cf. [16]), an object-oriented extension of Lisp. Making use of this version, an interactive theorem prover was successfully developed.
Reference: [16] <author> Weber, F. and Luber, M. </author> <title> A Catalogue of Abstract Data Types. </title> <type> Tech. Rep. </type> <institution> ProSt/91-6, Forschungszentrum Informatik, </institution> <year> 1991. </year>
Reference-contexts: The first ideas of coherent design were applied to a catalogue of data structures that was implemented in Ada and is now being used by IBM USA. An improved Ada catalogue was presented in [15]. Based on [15], the catalogue was later transferred to Flavors (cf. <ref> [16] </ref>), an object-oriented extension of Lisp. Making use of this version, an interactive theorem prover was successfully developed. Inuenced by the ideas of coherent design, IBM developed a C++ catalogue which is currently being distributed commercially as a part of the operating system OS/2 (cf. [6]).
Reference: [17] <author> Weber, F. </author> <title> Getting Class Correctness and System Correctness Equivalent - How to Get Covariance Right. </title> <booktitle> In Proceedings of TOOLS 8 - Technology of Object-Oriented Languages and Systems, </booktitle> <editor> Ege., R., Singh., M. and Meyer, B. (Eds.), </editor> <publisher> Prentice Hall, </publisher> <year> 1992, </year> <pages> pp. 199-213. </pages>
Reference-contexts: In case of conformance, the principle of substitutability holds, that is, if one class conforms to another, one of its objects can safely be used whenever an object of the other class is expected. Coherent design demands so-called imitation (cf. <ref> [17] </ref>, property compatibility) which is a weaker form of compatibility than conformance. Imitation requires that, throughout the body of a third class, all occurrences of the name of one class can safely be replaced by the name of the imitating class. <p> However, both covariance and specialization hamper the interchangeability of subclasses. Conformance (subtyping) is another semantically meaningful relationship that can be expressed by inheritance. Conformance has a theoretical advantage over imitation with respect to compatibility properties, but it is rarely applicable in practical situations (cf. <ref> [17] </ref>). Different hierarchies for the developer and the client Different views are possible for the different roles that can be taken in the process of software development. For instance, the implementation hierarchy of the Smalltalk collection classes differs from the hierarchy presented in [3].
References-found: 17

