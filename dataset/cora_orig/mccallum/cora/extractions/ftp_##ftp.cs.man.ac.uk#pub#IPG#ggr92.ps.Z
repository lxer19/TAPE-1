URL: ftp://ftp.cs.man.ac.uk/pub/IPG/ggr92.ps.Z
Refering-URL: http://www.cs.man.ac.uk/ipg/publications.html
Root-URL: http://www.cs.man.ac.uk
Title: The Use of a Persistent Language in the Implementation of a Process Support System  
Author: R. Mark Greenwood, Michael R. Guy and D. John K. Robinson 
Date: May 1992.  
Note: Process Support Centre, OPENframework Division, ICL Kidsgrove Published in the ICL Technical Journal  
Abstract-found: 0
Intro-found: 0
Reference: [Atkinson et al 1983] <author> ATKINSON, M.P., BAILEY, P.J., CHISHOLM, K.J., COCKSHOTT, W.P. and MORRISON, R. </author> <title> An Approach to Persistent Programming. </title> <journal> The Computer Journal, 1983, </journal> <volume> vol 26 no 4, </volume> <pages> pp 360-365. </pages>
Reference: [Atkinson and Morrison 1985] <author> ATKINSON, M.P. and MORRISON, R. </author> <title> Procedures as persistent data objects. </title> <journal> ACM TOPLAS, </journal> <month> 7(4) </month> <year> 1985. </year>
Reference-contexts: The raise.flag procedure itself persists because it is reachable by use of the identifier raise.EFTA.flag. Persistence and first class procedures are both powerful programming tools in their own right. Used together, they give the programmer the opportunity to create Abstract Data Types (ADTs) <ref> [Atkinson and Morrison 1985] </ref> as in the example above. There are three other attributes of PS-algol which we single out as being of great value for the implementation of PSS. The first is the table.
Reference: [Bocca 1991] <author> BOCCA, J.B. </author> <title> MegaLog A Platform for developing Knowledge Base Management Systems. </title> <booktitle> International Symposium on Database Systems for Advanced Applications, </booktitle> <address> Tokyo, </address> <month> April </month> <year> 1991. </year>
Reference-contexts: Thus a consistent set of data is available to another program. PML is a persistent language, as will be explained later. So is PS-algol, the language chosen for the implementation of PML. Raleigh [Kay and Rivett 1991] is implemented in MegaLog, the persistent Prolog from the ECRC <ref> [Bocca 1991] </ref>. PS-algol and MegaLog form an interesting comparison.
Reference: [Bruynooghe et al 1991] <author> BRUYNOOGHE, R.F., PARKER, J.M. and ROWLES, J.S. PSS: </author> <title> A System for Process Enactment. </title> <booktitle> Presented to 1st International Conference on Software Process, </booktitle> <address> Los Angeles 21-22 October 1991. </address>
Reference: [Dearle 1988] <author> DEARLE, A. </author> <booktitle> On the Construction of Persistent Programming Environments. Universities of Glasgow and StAndrews Persistent Programming Research Report 65, </booktitle> <month> June </month> <year> 1988. </year>
Reference-contexts: This provides a method of obtaining the correct entry even when further change to the role changes data table entries. 18 The PML compiler is built using the compiler componentry method described in <ref> [Dearle 1988] </ref>. Each of the major components, including the code generator, lexical analyser and type checker, is a generator procedure which returns a structure containing a set of interface procedures which is passed as a parameter to other components as required.
Reference: [Dearle and Brown 1988] <author> DEARLE, A. and BROWN, A.L. </author> <title> Safe Browsing in a Strongly Typed Persistent Environment. </title> <journal> The Computer Journal 31(6) </journal> <pages> 540-544, </pages> <year> 1988. </year>
Reference-contexts: The binding is achieved by storing the procedure value for later use by updating a PS-algol table. This technique draws on that of the PS-algol object store browser <ref> [Dearle and Brown 1988] </ref>. The unit of PML compilation is a string of PML text. This will contain a number of class definitions followed, optionally, by changes to the role instance structure.
Reference: [Guy 1987] <author> GUY, </author> <title> M.R. Persistent Store Successor to Virtual Store. In: Persistent Object Systems: their design, implementation and use (Proceedings of the Appin workshop August 1987). </title> <editor> Ed. Atkinson, M.P., Buneman, O.P. and Morrison, R. </editor> <booktitle> Universities of Glasgow and StAndrews Persistent Programming Research Report 44, </booktitle> <month> August </month> <year> 1987. </year>
Reference: [Guy and Robinson] <author> GUY, M.R. and ROBINSON, D.J.K. </author> <title> The Implementation of a Persistent Store for PS-algol. </title> <note> In preparation. </note>
Reference-contexts: Since then there has been ongoing development work with the seventh version of the system currently in development. The applications performance has been improved both through implementation improvements and through developments of the underlying object store on VME, which is described in <ref> [Guy and Robinson] </ref>. There is currently a major revision of the PML language 19 and the system's handling of external tools taking account of existing experiences with using the system. A pilot application has already received live usage in ICL's Customer Service organisation.
Reference: [Kay and Rivett 1991] <author> KAY, M.H. and RIVETT, P.J. </author> <title> An Overview of the Raleigh Object-Oriented Database System. </title> <journal> ICL Technical Journal, </journal> <month> November </month> <year> 1991. </year>
Reference-contexts: Before unlocking objects the transaction will selectively commit all the changes made within that transaction. Thus a consistent set of data is available to another program. PML is a persistent language, as will be explained later. So is PS-algol, the language chosen for the implementation of PML. Raleigh <ref> [Kay and Rivett 1991] </ref> is implemented in MegaLog, the persistent Prolog from the ECRC [Bocca 1991]. PS-algol and MegaLog form an interesting comparison.
Reference: [Morrison 1988] <author> MORRISON, R. </author> <title> PS-algol Reference Manual. </title> <booktitle> Fourth Edition. Universities of Glasgow and StAndrews Persistent Programming Research Report 12, </booktitle> <month> February </month> <year> 1988. </year>
Reference-contexts: These changes permit the use of databases which are larger than the virtual store available to a program, and open the way to shared usage of the system. 2.2 Some aspects of PS-algol PS-algol <ref> [Morrison 1988] </ref> has much in common with any conventional algorithmic language, and is not described in detail here. The slightly artificial example below will help to draw out some important points.
Reference: [Ould 1988] <author> OULD, M.A. and ROBERTS, C. </author> <title> Defining formal models of the software development process. In Software Engineering Environments. </title> <editor> Ed Brereton, P. </editor> <publisher> Ellis Horwood 1988. </publisher>
Reference-contexts: It has been influenced by the requirements modelling language RML <ref> [Ould 1988] </ref> and early prototype implementations were Smalltalk based. PML is a class based language with single inheritance. The class hierarchy supports three kinds of classes: entities, actions and roles. Entity class definitions create record types.
Reference: [Pearson 1973] <author> PEARSON, D. CADES. </author> <note> Computer Weekly, July 26th, August 2nd, August 9th 1973. </note>
Reference: [Perry and Kaiser 1991] <author> PERRY, D.E. and KAISER, G.E. </author> <title> Models of Software Development Environments. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 7(3) </volume> <pages> 283-295, </pages> <month> March </month> <year> 1991 </year> <month> 7. </month>
Reference: [PML 1990] <author> PML Reference Manual. IPSE 2.5 Project Document STL/608/00070, </author> <month> Dec </month> <year> 1990. </year>
Reference: [Snowdon 1989] <author> SNOWDON, R.A. </author> <title> An Introduction to the IPSE 2.5 Project. </title> <journal> ICL Technical Journal, </journal> <volume> 6(3) </volume> <pages> 467-478, </pages> <year> 1989. </year>
Reference: [Stoy 1977] <author> STOY, </author> <title> J.E. Denotational Semantics. </title> <publisher> The MIT Press, </publisher> <year> 1977. </year>
Reference-contexts: The implementation of the stacker is another example. A role is a persistent process and the parameterless procedures in the stack encapsulate the state of execution of the role: they are the continuation of the role <ref> [Stoy 1977] </ref>. 5.4 Intra-role Scheduling When a new role instance is created there is only one entry on its procedure stack, the role's intra-role scheduler.
Reference: [Warboys 1980] <author> WARBOYS, </author> <title> B.C. VME/B a model for the realisation of a total system concept. </title> <journal> ICL Technical Journal, </journal> <month> November </month> <year> 1980. </year>
Reference: [Warboys 1989] <author> WARBOYS, </author> <title> B.C. The IPSE 2.5 Project: A Process Model Based Architecture. In: Software Engineering Environments research and practice. </title> <editor> Ed Bennett, K.H. </editor> <publisher> Ellis Horwood 1989. </publisher> <pages> 22 </pages>
References-found: 18

