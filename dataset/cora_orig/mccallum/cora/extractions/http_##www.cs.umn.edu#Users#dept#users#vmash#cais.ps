URL: http://www.cs.umn.edu/Users/dept/users/vmash/cais.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/vmash/
Root-URL: http://www.cs.umn.edu
Email: fvmash,feulner,riedl@cs.umn.edug  
Title: CAIS: Collaborative Asynchronous Inspection of Software  
Author: Vahid Mashayekhi Chris Feulner John Riedl 
Keyword: Concurrent Software Engineering, Asynchrony, Software Inspection, Computer-Supported Cooperative Work (CSCW), Collaboration, Notification.  
Affiliation: Department Of Computer Science University of Minnesota  
Abstract: Many software engineering tasks have a synchronous component that requires the participants to assemble together at the same time and place. This approach is expensive in terms of traveling, scheduling and human resources. Existing computer tools mitigate these constraints by adding structure to the meeting, providing on-line document support, and distributing the participants over geographic boundaries. The constraint remains, however, that all participants participate at the same time. We propose relaxing the time constraint in software engineering tasks to resolve issues non-concurrently, in effect reducing (and in some cases eliminating) the need for the synchronous meeting. We hypothesize that support for asynchrony will enable software engineering teams to work together as effectively in different times as in same time. We have chosen software inspection as our candidate software engineering task because it is well-understood, highly-structured, and widely-practiced. We have designed and developed a Collaborative Asynchronous Inspection of Software (CAIS) meeting prototype that supports the meeting part of inspection. CAIS allows participants to effectively "meet" even when separated by time zones and working schedules. We have conducted a pilot study comparing the manual and CAIS meetings and present our results and lessons learned. fl We gratefully acknowledge the support of the National Science Foundation, grant number NSF=IRI 9208546, and the research funds of the Graduate School of the University of Minnesota. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S.R. Ahuja, J. Ensor, and D. Horn. </author> <title> The Rapport multimedia conferencing system. </title> <booktitle> In Proceedings of Conference on Office Information Systems, </booktitle> <month> March </month> <year> 1988. </year>
Reference-contexts: At the closure of a meeting, all participants are notified of the agenda of a possible synchronous meeting. 4 Implementation There exist a wealth of software infrastructures for developing CAIS <ref> [1, 2, 8, 16, 21, 27, 29, 32] </ref>.
Reference: [2] <author> Marc Andreesen. </author> <title> NCSA Mosaic technical summary. </title> <type> Technical report, </type> <institution> University of Illinois, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: At the closure of a meeting, all participants are notified of the agenda of a possible synchronous meeting. 4 Implementation There exist a wealth of software infrastructures for developing CAIS <ref> [1, 2, 8, 16, 21, 27, 29, 32] </ref>. <p> Proposed active e-mail systems could be used to support these extensions for effective CAIS [8]. 4.2 Mosaic Mosaic is a networked information discovery, retrieval, and collaboration tool <ref> [2] </ref>. It is accessible across several platforms (X Window System, Microsoft Windows, and Apple Macintosh), capable of supporting multiple media, user-tracking, annotations, and document cross-linking. Mosaic provides a number of facilities that may be used for developing CAIS: Distribution: Mosaic uses a client/server model of interaction.
Reference: [3] <author> L.M. Applegate, B.R. Konsynski, and J.F. Nuna-maker. </author> <title> A group decision support system for idea generation and issue analysis in organization planning. </title> <booktitle> In Proceedings of the First Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 16-34. </pages> <publisher> ACM, </publisher> <month> December </month> <year> 1986. </year>
Reference-contexts: Cognoter is a Colab tool used to prepare presentations collectively. It provides support for brainstorming, organizing, and evaluating. The PlexCenter Planning and Decision Support Laboratory at the University of Arizona provides a large U-shaped conference table with 16 workstations depressed below the table for line-of-sight considerations <ref> [3] </ref>. A large-screen projection system displays screens of individual participants or a compilation of screens. The facility is used for electronic brainstorming and issue analysis among other group activities.
Reference: [4] <author> Sara A. Bly, Steve R. Harrison, and Susan Irwin. </author> <title> Media spaces: Bringing people together in a video, audio, and computing environment. </title> <journal> Communications of The ACM, </journal> <volume> 36(1) </volume> <pages> 28-47, </pages> <month> Jan </month> <year> 1993. </year>
Reference-contexts: This approach is expensive in terms of traveling, scheduling, human resources, pre-meeting preparation of material, and post-meeting recording of the results. Advances in distributed systems, networks, and user interface technology have helped Computer Supported Cooperative Work (CSCW) become a viable alternative to face-to-face meetings <ref> [4, 12, 37] </ref>. CSCW is the study of methods for enhancing cooperation among computer users by providing an infrastructure that explicitly supports the user interaction and sharing of information [20]. Software engineering is a domain in which support for collaboration can be fruitfully explored.
Reference: [5] <author> B. Boehm. </author> <title> Industrial software metrics top 10 list. </title> <booktitle> In IEEE Software, </booktitle> <month> September </month> <year> 1987. </year>
Reference-contexts: Software inspection is an effective method for detecting faults in documents and code produced in software development [25]. Boehm includes software inspection in his list of the ten most important issues for improving the quality of software, saying, "Walkthroughs catch 60 percent of the errors." <ref> [5] </ref>. Software inspection has evolved from a purely centralized and paper-driven process to one that can be Page 1 performed paperless over distance [31]. In distributed software inspection, participants can "meet" with people in other cities through workstations at their desks.
Reference: [6] <author> N. Borenstein and N. Freed. MIME: </author> <title> Multi-purpose Internet Mail Extensions. </title> <type> RFC 1521. </type>
Reference-contexts: Traditional e-mail systems are characterized by passive, uni-directional exchange of electronic messages between a sender and one or more receivers. Multimedia email systems augment this exchange by supporting non-textual data, such as displaying of images and playing of audio, but the process has remained one-way and non-interactive <ref> [6, 7] </ref>. Computational or active e-mail systems propose to further facilitate asynchronous collaboration of users by embedding programs in electronic messages [8]. Active messages interact with the recipients of the messages and take different actions based on the recipients' responses.
Reference: [7] <author> N. Borenstein and C. Thyberg. </author> <title> Power, ease of use, and cooperative work in a practical multimedia message system. </title> <journal> International Journal of Man-Machine Studies, </journal> <month> April </month> <year> 1991. </year>
Reference-contexts: Traditional e-mail systems are characterized by passive, uni-directional exchange of electronic messages between a sender and one or more receivers. Multimedia email systems augment this exchange by supporting non-textual data, such as displaying of images and playing of audio, but the process has remained one-way and non-interactive <ref> [6, 7] </ref>. Computational or active e-mail systems propose to further facilitate asynchronous collaboration of users by embedding programs in electronic messages [8]. Active messages interact with the recipients of the messages and take different actions based on the recipients' responses.
Reference: [8] <author> Nathaniel Borenstein. </author> <title> Computational mail as network infrastructure for Computer-Supported Cooperative Work. </title> <booktitle> In CSCW 92 Proceedings, </booktitle> <pages> pages 67-74, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: At the closure of a meeting, all participants are notified of the agenda of a possible synchronous meeting. 4 Implementation There exist a wealth of software infrastructures for developing CAIS <ref> [1, 2, 8, 16, 21, 27, 29, 32] </ref>. <p> Multimedia email systems augment this exchange by supporting non-textual data, such as displaying of images and playing of audio, but the process has remained one-way and non-interactive [6, 7]. Computational or active e-mail systems propose to further facilitate asynchronous collaboration of users by embedding programs in electronic messages <ref> [8] </ref>. Active messages interact with the recipients of the messages and take different actions based on the recipients' responses. <p> Proposed active e-mail systems could be used to support these extensions for effective CAIS <ref> [8] </ref>. 4.2 Mosaic Mosaic is a networked information discovery, retrieval, and collaboration tool [2]. It is accessible across several platforms (X Window System, Microsoft Windows, and Apple Macintosh), capable of supporting multiple media, user-tracking, annotations, and document cross-linking.
Reference: [9] <author> L. Brothers, V. Sembugamoorthy, and M. Miller. ICICLE: </author> <title> Groupware for code inspection. </title> <booktitle> In Proceedings of Computer Supported Cooperative Work, </booktitle> <pages> pages 169-181, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: As we study asynchrony in inspection meetings, it could be that eliminating face-to-face meetings is neither possible nor desirable. For instance, verbal intercourse is regarded to be critical to the task of software inspection as currently formulated <ref> [9] </ref>, and this may be true for many types of meetings. Presently, our focus is on technical issues in distributed and asynchronous inspection. If our work is successful, it will make it possible for further investigation of the social changes introduced by an asynchronous meeting model. <p> Software Inspectors: Collaborative Software Inspection (CSI) [31] is a tool created to support distributed collaborative software inspection. CSI automates the inspection process, but its synchronous nature requires participation from all participants at the same time. ICICLE <ref> [9] </ref> is a system intended to support the complex set of tasks performed during code inspection. Like CSI, it assists individual users in the comment preparation phase of code inspection. The ICICLE meeting environment is synchronous also, with computer support aiding in making it a paperless meeting.
Reference: [10] <author> T. Cavalier, R. Chandhok, J. Morris, D. Kaufer, and C. Neuwirth. </author> <title> A visual design for collaborative work: Columns for commenting and annotation. </title> <booktitle> In Proceedings of HICSS '24 IEEE, </booktitle> <year> 1990. </year>
Reference-contexts: It uses a semi-structured issue-position-argument framework to provide a team of designers support for the capture and recording of design document discussion, creation, and commitments. The PREP Editor is a collaborative writing environment that is designed to provide commenting and annotation capabilities <ref> [10] </ref>. The system provides a columnar structure that provides columns of text for comments, author intent, and the actual text being reviewed. Group Decision Support Systems: The Min-nesota GDSS project aims at conducting theoretical and empirical research in Group Decision Support Systems [19].
Reference: [11] <author> J. Conklin and M. Begeman. gIBIS: </author> <title> A hypertext tools for exploratory policy discussion. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 6(4), </volume> <month> October </month> <year> 1988. </year>
Reference-contexts: These systems allow users to send messages to groups of users. Structured use of the electronic messaging systems has been shown to be an effective collaboration tool [28, 30, 39]. Collaborative Annotators: The Design Journal <ref> [11] </ref> is a hypertext system designed to facilitate the cap ture of early design deliberations. It is implemented using a specific method called Issue Based Information Systems (IBIS).
Reference: [12] <author> P. Cook, C. Ellia, M. Graf, G. Rein, and T. Smith. Project Nick: </author> <title> Meeting augmentation and analysis. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 5(2), </volume> <month> April </month> <year> 1987. </year>
Reference-contexts: This approach is expensive in terms of traveling, scheduling, human resources, pre-meeting preparation of material, and post-meeting recording of the results. Advances in distributed systems, networks, and user interface technology have helped Computer Supported Cooperative Work (CSCW) become a viable alternative to face-to-face meetings <ref> [4, 12, 37] </ref>. CSCW is the study of methods for enhancing cooperation among computer users by providing an infrastructure that explicitly supports the user interaction and sharing of information [20]. Software engineering is a domain in which support for collaboration can be fruitfully explored. <p> A large screen at the front of the room provides a shared focus for the participants by displaying a summary of group activities. Project Nick studies the theory of meetings and defines the meeting types and classes <ref> [12] </ref>. The focus is on small face-to-face meetings specializing in exploration activities such as brainstorming, defining design structure, analyzing issues, and problem resolution. Meeting-aids include an electronic blackboard, interconnected PCs, and recording apparatus.
Reference: [13] <author> Alan M. Davis. </author> <title> Software Requirements: Analysis and Specification. </title> <publisher> Prentice Hall, </publisher> <year> 1990. </year>
Reference-contexts: These stu Page 9 dents reviewed the requirements documents for two projects under development in our collaborative systems research group. We have chosen to inspect software requirements since requirements analysis is a pivotal stage in the software development waterfall model where many faults could be detected and corrected <ref> [13] </ref>. One group of students first manually inspected one requirements document, and then used CAIS to inspect the other, while the second group first used CAIS for inspection and then manually inspected the other requirements document.
Reference: [14] <author> A.R. Dennis, J.S. Valacich, and J.F. Nunamaker Jr. </author> <title> An experimental investigation of the effect of group size in an electronic meeting environment. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <volume> 20, </volume> <year> 1990. </year> <pages> Page 13 </pages>
Reference-contexts: Combining distributed software inspection with an asynchronous meeting would give complete flexibility in time and space for the software inspection process. In addition to enhancing flexibility throughout for the participants, asynchronous meetings may alleviate some of the social problems that have been reported in synchronous meetings <ref> [14, 26] </ref>: Free Riding: A subset of the group might not contribute to the task, relying on other members for contributing ideas. Limited Air Time: Only one person can speak at a time, limiting the time each person can contribute.
Reference: [15] <author> Gerardine DeSanctis, Marshall Scott Poole, and Gary W. Dickson. </author> <title> Interpretive analysis of team use of group technologies. </title> <journal> Journal of Organizational Computing, </journal> <volume> 3(1) </volume> <pages> 1-29, </pages> <year> 1993. </year>
Reference-contexts: Group Decision Support Systems: The Min-nesota GDSS project aims at conducting theoretical and empirical research in Group Decision Support Systems [19]. The work introduces the Adaptive Structuration Theory (AST), which focuses on how technology structures are applied in interpersonal interaction and the specific nature of appropriation patterns <ref> [15] </ref>. A multiuser software environment named Software-Aided Meeting Management (SAMM) serves as a vehicle for experimentation. Its U-shaped conference table has a terminal and keyboard for each group member to enter ideas, comments, votes, or notes.
Reference: [16] <author> P. Dewan and R. Choudhary. </author> <title> Flexible user interface coupling in a collaborative system. </title> <booktitle> Proceedings of the ACM CHI's 91 Conference, </booktitle> <month> April </month> <year> 1991. </year>
Reference-contexts: At the closure of a meeting, all participants are notified of the agenda of a possible synchronous meeting. 4 Implementation There exist a wealth of software infrastructures for developing CAIS <ref> [1, 2, 8, 16, 21, 27, 29, 32] </ref>. <p> The object in turn ensures that the other displays also update their values. 4.4.1 CAIS Implementation We have used the Suite software development environment <ref> [16] </ref> for developing CAIS. Suite was chosen as the application development platform foremost because of our success in building other multi-user applications in it, including CSI [31]. We use CSI for the individual reviews and fault collection.
Reference: [17] <author> P. Dewan and E. Vasilik. </author> <title> An object model for conventional operating systems. </title> <booktitle> Usenix Computing Systems, </booktitle> <month> December </month> <year> 1990. </year>
Reference-contexts: Notes can easily print views and forms for the paper documents needed for the meeting. 4.4 Suite Suite is a software system for developing multiuser applications. A prototype of Suite has been implemented on top of UNIX, TCP/IP, NFS, and X <ref> [17] </ref>. The Suite object model is an extension of UNIX, allowing distributed, shared, protected, and persistent objects. The components of Suite are: RPC: Suite RPC allows for applications executing in different address spaces and possibly on different hosts to name and communicate with each other by calling high-level remote procedures.
Reference: [18] <author> Prasun Dewan and John Riedl. </author> <title> Toward computer-supported concurrent software engineering. </title> <booktitle> IEEE Computer, </booktitle> <month> Jan 93. </month>
Reference-contexts: Software engineering is a domain in which support for collaboration can be fruitfully explored. Collaboration is a requirement in many software engineering tasks including requirements analysis, design, programming, debugging, and testing <ref> [18] </ref>. For most software engineering projects, analysts, designers, implementors, and testers must work together through an iterative process to build a software artifact. Research has shown that interaction among team members accounts for a significant part of the total cost of software systems [22].
Reference: [19] <author> Gary Dickson, Marshall Scott Poole, and Gerardine DeSanctis. </author> <title> An Overview of the GDSS Research Project and the SAMM System, </title> <booktitle> chapter 9, </booktitle> <pages> pages 163-179. </pages> <publisher> Van Nostrand Reinhold, </publisher> <year> 1992. </year>
Reference-contexts: The system provides a columnar structure that provides columns of text for comments, author intent, and the actual text being reviewed. Group Decision Support Systems: The Min-nesota GDSS project aims at conducting theoretical and empirical research in Group Decision Support Systems <ref> [19] </ref>. The work introduces the Adaptive Structuration Theory (AST), which focuses on how technology structures are applied in interpersonal interaction and the specific nature of appropriation patterns [15]. A multiuser software environment named Software-Aided Meeting Management (SAMM) serves as a vehicle for experimentation.
Reference: [20] <author> C. Ellis, S. Gibbs, and G. Rein. </author> <title> Groupware: Some issues and experiences. </title> <journal> Communications of the ACM, </journal> <pages> pages 39-56, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: CSCW is the study of methods for enhancing cooperation among computer users by providing an infrastructure that explicitly supports the user interaction and sharing of information <ref> [20] </ref>. Software engineering is a domain in which support for collaboration can be fruitfully explored. Collaboration is a requirement in many software engineering tasks including requirements analysis, design, programming, debugging, and testing [18]. <p> Relaxing the time constraint allows the participants to work at a time of their choosing, providing a greater degree of freedom in their actions. In general, collaborative meetings can be categorized by the two dimensions of space and time <ref> [20] </ref>. A same-time, same-place meeting is the current board-room type meeting where everyone congregates at a table, using pointers, overhead projectors, and handouts as meeting tools. A different-time, same-place environment might be a bulletin board in a publicly accessible room used for posting announcements.
Reference: [21] <author> H.C. Forsdick and R.H. Thomas. </author> <title> The design of Diamond: A distributed multimedia document system. </title> <type> Technical report, TR number 5402, </type> <institution> Bolt Be-ranek and Newman Inc., </institution> <month> October </month> <year> 1982. </year>
Reference-contexts: At the closure of a meeting, all participants are notified of the agenda of a possible synchronous meeting. 4 Implementation There exist a wealth of software infrastructures for developing CAIS <ref> [1, 2, 8, 16, 21, 27, 29, 32] </ref>.
Reference: [22] <author> G. Forte and R.J. Norman. </author> <title> A self-assessment by the software engineering community. </title> <journal> Communications of the ACM, </journal> <volume> 35(4) </volume> <pages> 28-32, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: For most software engineering projects, analysts, designers, implementors, and testers must work together through an iterative process to build a software artifact. Research has shown that interaction among team members accounts for a significant part of the total cost of software systems <ref> [22] </ref>. It is our belief that more effective software engineering methods will impact the society at large through savings in time, money, and effort. Furthermore, we anticipate that solutions to the problems in software engineering will also apply to collaboration in other domains.
Reference: [23] <author> John W. Gintell and Gerard Memmi. CIA: </author> <title> Collaborative Inspection Agent experience: Building a CSCW application for software engineering. </title> <booktitle> In Workshop on CSCW Tools, </booktitle> <month> October </month> <year> 1992. </year>
Reference-contexts: Like CSI, it assists individual users in the comment preparation phase of code inspection. The ICICLE meeting environment is synchronous also, with computer support aiding in making it a paperless meeting. Collaborative Inspection Agent <ref> [23] </ref> (CIA) uses ConversationBuilder [27] to develop a tool for synchronous inspection of all work products at various stages of the life cycle. Electronic mail and bulletin boards show that asynchrony is a feasible abstraction for collaboration.
Reference: [24] <author> J.D. Gould and N. Grischkowsky. </author> <title> Doing the same work with hard copy and with cathode ray tube (CRT) computer terminals. </title> <booktitle> In Human Factors, </booktitle> <pages> pages 323-337. </pages> <publisher> ACM, </publisher> <year> 1984. </year>
Reference-contexts: We believe that the additional time spent in the asynchronous meeting is due to four factors: (1) Typing is generally slower than speaking, (2) The reading speed from the screen is about 30% slower than the reading speed from the paper <ref> [24, 34] </ref>, (3) In asynchronous collaboration, a participant is required to read the previous comments for each fault every time to familiarize herself with the context of the discussion up to that point before contributing new ideas, and (4) Since the participants had the freedom of working from home in a
Reference: [25] <author> W.S. Humphrey. </author> <title> Managing the Software Process. </title> <publisher> Addison Wesley, </publisher> <year> 1989. </year>
Reference-contexts: We have chosen software inspection as our representative software engineering task because it is widely-practiced and highly-structured. Software inspection is an effective method for detecting faults in documents and code produced in software development <ref> [25] </ref>. Boehm includes software inspection in his list of the ten most important issues for improving the quality of software, saying, "Walkthroughs catch 60 percent of the errors." [5]. <p> Additional research is needed to understand the effects of the new meeting model on organizations. We suggest a rich set of problems for future work, based on our experience with CAIS: Roles: Our current implementation of CAIS does not support the notion of roles, as prescribed by Humphrey <ref> [25] </ref>. An inspection could assign one of three roles to the participants: Moderator, reviewer, or producer.
Reference: [26] <author> C.M. Hymes and G. Olson. </author> <title> Unblocking brainstorming through the use of a simple group editor. </title> <booktitle> In CSCW 92 Proceedings, </booktitle> <year> 1992. </year>
Reference-contexts: Combining distributed software inspection with an asynchronous meeting would give complete flexibility in time and space for the software inspection process. In addition to enhancing flexibility throughout for the participants, asynchronous meetings may alleviate some of the social problems that have been reported in synchronous meetings <ref> [14, 26] </ref>: Free Riding: A subset of the group might not contribute to the task, relying on other members for contributing ideas. Limited Air Time: Only one person can speak at a time, limiting the time each person can contribute.
Reference: [27] <author> Simon M. Kaplan, William J. Tolone, Douglas P. Bogia, and Celsina Bignoli. </author> <title> Flexible, active support for collaborative work with ConversationBuilder. </title> <booktitle> In CSCW 92 proceedings, </booktitle> <month> November </month> <year> 1992. </year>
Reference-contexts: Like CSI, it assists individual users in the comment preparation phase of code inspection. The ICICLE meeting environment is synchronous also, with computer support aiding in making it a paperless meeting. Collaborative Inspection Agent [23] (CIA) uses ConversationBuilder <ref> [27] </ref> to develop a tool for synchronous inspection of all work products at various stages of the life cycle. Electronic mail and bulletin boards show that asynchrony is a feasible abstraction for collaboration. <p> At the closure of a meeting, all participants are notified of the agenda of a possible synchronous meeting. 4 Implementation There exist a wealth of software infrastructures for developing CAIS <ref> [1, 2, 8, 16, 21, 27, 29, 32] </ref>.
Reference: [28] <author> K.Y. Lai and T.W. Malone. </author> <title> Object lens: A spreadsheet for cooperative work. </title> <booktitle> In Proceedings of 1988 Conference on Computer Supported Cooperative Work, </booktitle> <year> 1988. </year>
Reference-contexts: Electronic Mail and Bulletin Boards: Two widely used computer mechanisms for supporting asynchronous collaboration are electronic mail and bulletin boards. These systems allow users to send messages to groups of users. Structured use of the electronic messaging systems has been shown to be an effective collaboration tool <ref> [28, 30, 39] </ref>. Collaborative Annotators: The Design Journal [11] is a hypertext system designed to facilitate the cap ture of early design deliberations. It is implemented using a specific method called Issue Based Information Systems (IBIS).
Reference: [29] <author> Lotus Development Corporation. </author> <title> Lotus Notes: The Groupware Standard, </title> <note> release 3 edition, </note> <year> 1993. </year>
Reference-contexts: At the closure of a meeting, all participants are notified of the agenda of a possible synchronous meeting. 4 Implementation There exist a wealth of software infrastructures for developing CAIS <ref> [1, 2, 8, 16, 21, 27, 29, 32] </ref>. <p> Fill-out forms are an extension of the Mosaic browser that support user input and could be used to support annotations. * Evaluation of proposals through vote-taking needs to be added. * Users need to be notified of new annotations, and votes made to the document. 4.3 Lotus Notes Lotus Notes <ref> [29] </ref> manages information for a group of people distributed across a computer network. This management includes the ability to collect, organize, share, process, and customize information.
Reference: [30] <author> T. Malone, K. Grant, F. Furback, S. Brobst, and M. Cohen. </author> <title> Intelligent information-sharing systems. </title> <journal> CACM, </journal> <volume> 30(5) </volume> <pages> 390-402, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: Electronic Mail and Bulletin Boards: Two widely used computer mechanisms for supporting asynchronous collaboration are electronic mail and bulletin boards. These systems allow users to send messages to groups of users. Structured use of the electronic messaging systems has been shown to be an effective collaboration tool <ref> [28, 30, 39] </ref>. Collaborative Annotators: The Design Journal [11] is a hypertext system designed to facilitate the cap ture of early design deliberations. It is implemented using a specific method called Issue Based Information Systems (IBIS).
Reference: [31] <author> Vahid Mashayekhi, Janet Drake, Wei-Tek Tsai, and John Riedl. </author> <title> Distributed collaborative software inspection. </title> <journal> IEEE Software, </journal> <pages> pages 66-75, </pages> <month> Septem-ber </month> <year> 1993. </year>
Reference-contexts: Software inspection has evolved from a purely centralized and paper-driven process to one that can be Page 1 performed paperless over distance <ref> [31] </ref>. In distributed software inspection, participants can "meet" with people in other cities through workstations at their desks. The reduced travel costs increases the feasibility of inspection when the development team is not in the same location. <p> The reduced travel costs increases the feasibility of inspection when the development team is not in the same location. On-line support aids the participants in document preparation and maintenance, eliminating unnecessary note-taking and duplication. In this paper, we augment our previous work in distributing software inspection <ref> [31] </ref> to support asynchronous collaboration of inspection participants. Asynchronous, or non-concurrent, collaboration enables interaction without requiring all participants to be present at the same time. <p> The software inspection process consists of two distinct meeting modes: Fault collection and inspection meeting. These modes are denoted in Figure 1 by the bottom and top halves of the cube. During fault collection (bottom half), individuals review the documents independently and are not restricted by place and time <ref> [31] </ref>. Therefore, the fault collection activity spans the time and space axes and consists of all the parallel planes across the bottom half of the cube. The inspection meeting process (top half), consists of all participants discussing the correlated fault list generated by the reviewers. <p> The inspection meeting process (top half), consists of all participants discussing the correlated fault list generated by the reviewers. Traditional centralized inspection meetings cover the back left octant (same-time, same-place), while the distributed meeting covers the back right oc-tant (same-time, different-place) <ref> [31] </ref>. We are exploring the potential for asynchrony in the meeting phase, denoted by the shaded section (different-time, different-place). Combining distributed software inspection with an asynchronous meeting would give complete flexibility in time and space for the software inspection process. <p> Apollo's DSEE environment helps to archive previous versions of sources, control access to all versions, document the history of each file, build programs and individual components, rebuild programs with previously built components, build components concurrently on distributed nodes, and manage program releases [38]. Software Inspectors: Collaborative Software Inspection (CSI) <ref> [31] </ref> is a tool created to support distributed collaborative software inspection. CSI automates the inspection process, but its synchronous nature requires participation from all participants at the same time. ICICLE [9] is a system intended to support the complex set of tasks performed during code inspection. <p> Annotations: CAIS borrows annotations from CSI <ref> [31] </ref>. During the fault collection phase, annotations are attached to the document being inspected. During the inspection phase, the annotations are organized into a set of discussions, with hyperlinks to lines in the original document. The annotations help satisfy the "Visual Cues" requirement. <p> Suite was chosen as the application development platform foremost because of our success in building other multi-user applications in it, including CSI <ref> [31] </ref>. We use CSI for the individual reviews and fault collection. CSI supports collaboration of geographically distributed individuals in the inspection and provides on-line capability for recording and correlation of faults.
Reference: [32] <editor> C.M. Neuwirth, D.S. Kaufer, R. Chandhok, and J.H. Morris. </editor> <booktitle> Issues in the design of computer-supported for co-authroing and commenting. In Proceedings of the Third Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 183-195. </pages> <institution> Association for Computing Machinery, </institution> <year> 1990. </year>
Reference-contexts: At the closure of a meeting, all participants are notified of the agenda of a possible synchronous meeting. 4 Implementation There exist a wealth of software infrastructures for developing CAIS <ref> [1, 2, 8, 16, 21, 27, 29, 32] </ref>.
Reference: [33] <author> J.F. Nunamaker, A.R. Dennis, J.F. George, W.B. Martz, J.S. Valacich, and D.R. Vogel. GroupSys-tems, </author> <booktitle> chapter 8, </booktitle> <pages> pages 143-162. </pages> <publisher> Van Nostrand Reinhold, </publisher> <year> 1992. </year>
Reference-contexts: A large-screen projection system displays screens of individual participants or a compilation of screens. The facility is used for electronic brainstorming and issue analysis among other group activities. A newer version of the facility called the Collaborative Management Room, designed to accommodate larger groups, introduces more recent technological advances <ref> [33] </ref>. Computer Assisted Software Engineering (CASE) tools: Asynchrony is supported in a variety of existing CASE tools.
Reference: [34] <author> P.Wright and A. Lickorish. </author> <title> Proof-reading texts on screen and paper. </title> <journal> Behavior and Information Technology, </journal> <volume> 2(3) </volume> <pages> 227-235, </pages> <month> July-September </month> <year> 1983. </year>
Reference-contexts: We believe that the additional time spent in the asynchronous meeting is due to four factors: (1) Typing is generally slower than speaking, (2) The reading speed from the screen is about 30% slower than the reading speed from the paper <ref> [24, 34] </ref>, (3) In asynchronous collaboration, a participant is required to read the previous comments for each fault every time to familiarize herself with the context of the discussion up to that point before contributing new ideas, and (4) Since the participants had the freedom of working from home in a
Reference: [35] <author> John Riedl, Vahid Mashayekhi, Jim Schnepf, Mark Claypool, and Dan Frankowski. Suitesound: </author> <title> A system for distributed collaborative multimedia. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <pages> pages 600-610, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: A different-time, same-place environment might be a bulletin board in a publicly accessible room used for posting announcements. An example of a same-time, different-place meeting would be a teleconferencing system supporting audio and video, allowing the meeting to take place with members in different locations <ref> [35, 36] </ref>. Conceptually, a different-time, different-place meeting would enable participants to work together at the time and place of their choosing, but other than e-mail systems, existing implementations are scarce.
Reference: [36] <author> S. Sakata. </author> <title> Development and evaluation of an In-house multimedia desktop coneference. </title> <journal> IEEE journal on selected areas in communcations, </journal> <month> April </month> <year> 1990. </year>
Reference-contexts: A different-time, same-place environment might be a bulletin board in a publicly accessible room used for posting announcements. An example of a same-time, different-place meeting would be a teleconferencing system supporting audio and video, allowing the meeting to take place with members in different locations <ref> [35, 36] </ref>. Conceptually, a different-time, different-place meeting would enable participants to work together at the time and place of their choosing, but other than e-mail systems, existing implementations are scarce.
Reference: [37] <author> M. Stefik, G. Foster, D.G. Bobrow, K. Kahn, S. Lanning, and L. Suchman. </author> <title> Beyond the chalkboard: Computer support for collaboration and problem solving in meetings. </title> <journal> Communications of the ACM, </journal> <volume> 30(1) </volume> <pages> 32-47, </pages> <month> January </month> <year> 1987. </year>
Reference-contexts: This approach is expensive in terms of traveling, scheduling, human resources, pre-meeting preparation of material, and post-meeting recording of the results. Advances in distributed systems, networks, and user interface technology have helped Computer Supported Cooperative Work (CSCW) become a viable alternative to face-to-face meetings <ref> [4, 12, 37] </ref>. CSCW is the study of methods for enhancing cooperation among computer users by providing an infrastructure that explicitly supports the user interaction and sharing of information [20]. Software engineering is a domain in which support for collaboration can be fruitfully explored. <p> Meeting-aids include an electronic blackboard, interconnected PCs, and recording apparatus. The Colab experimental meeting room developed at Xerox PARC is designed for facilitating interaction in small working groups <ref> [37] </ref>. The room is equipped with workstations linked together over a LAN, a large touch-sensitive screen, and a stand-up keyboard. Cognoter is a Colab tool used to prepare presentations collectively. It provides support for brainstorming, organizing, and evaluating.
Reference: [38] <author> Apollo Systems. </author> <title> Introduction to the DSEE environment. User Reference Manual. </title>
Reference-contexts: Apollo's DSEE environment helps to archive previous versions of sources, control access to all versions, document the history of each file, build programs and individual components, rebuild programs with previously built components, build components concurrently on distributed nodes, and manage program releases <ref> [38] </ref>. Software Inspectors: Collaborative Software Inspection (CSI) [31] is a tool created to support distributed collaborative software inspection. CSI automates the inspection process, but its synchronous nature requires participation from all participants at the same time.
Reference: [39] <author> J.M. Tazelaar. </author> <title> In depth groupware. </title> <journal> Byte Magazine, </journal> <month> December </month> <year> 1988. </year>
Reference-contexts: Electronic Mail and Bulletin Boards: Two widely used computer mechanisms for supporting asynchronous collaboration are electronic mail and bulletin boards. These systems allow users to send messages to groups of users. Structured use of the electronic messaging systems has been shown to be an effective collaboration tool <ref> [28, 30, 39] </ref>. Collaborative Annotators: The Design Journal [11] is a hypertext system designed to facilitate the cap ture of early design deliberations. It is implemented using a specific method called Issue Based Information Systems (IBIS). <p> fol Page 6 lowing subsections, we describe how four selected plat-forms, namely Electronic Mail, Mosaic, Lotus Notes, and Suite, can be fruitfully explored for developing CAIS and detail our implementation in the Suite environment. 4.1 Electronic Mail Arguably, electronic mail (e-mail) has been the most successful groupware system ever introduced <ref> [39] </ref>. Traditional e-mail systems are characterized by passive, uni-directional exchange of electronic messages between a sender and one or more receivers. Multimedia email systems augment this exchange by supporting non-textual data, such as displaying of images and playing of audio, but the process has remained one-way and non-interactive [6, 7].
Reference: [40] <author> Walter F. Tichy. </author> <title> RCS A system for version control. </title> <journal> Software Practice and Experience, </journal> <volume> 15(7) </volume> <pages> 637-654, </pages> <month> July </month> <year> 1985. </year> <pages> Page 14 </pages>
Reference-contexts: UNIX Systems such as Source Code Control System (SCCS) and Revision Control System (RCS) provide utility programs designed to Page 3 manage multiple revisions of source files, automate the storing, retrieval, logging, identification, and merging of versions, and maintain a history of previous versions <ref> [40] </ref>. Apollo's DSEE environment helps to archive previous versions of sources, control access to all versions, document the history of each file, build programs and individual components, rebuild programs with previously built components, build components concurrently on distributed nodes, and manage program releases [38].
References-found: 40

