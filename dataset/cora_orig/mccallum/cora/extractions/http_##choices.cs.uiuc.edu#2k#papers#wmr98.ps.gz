URL: http://choices.cs.uiuc.edu/2k/papers/wmr98.ps.gz
Refering-URL: http://choices.cs.uiuc.edu/2k/
Root-URL: http://www.cs.uiuc.edu
Email: nemo@gsyc.inf.uc3m.es sarevalo@fi.upm.es  ff-kon,royg@cs.uiuc.edu  
Title: Towards a Grand Unified Framework For Mobile Objects Position Paper databases, mobile object systems, parallel
Author: Francisco J. Ballesteros Sergio Arevalo Fabio Kon Roy H. Campbell 
Note: Besides, applications such as  
Date: May, 1998  
Address: Madrid  
Affiliation: Universidad Carlos III de Madrid  Universidad Politecnica de  University of Illinois at Urbana-Champaign  University of Illinois at Urbana-Champaign  
Abstract: We believe that, behind it all, the reason is the inadequate support that existing operating systems offer for mobility, replication, and DOS in general. The lack of proper support promotes ad-hoc solutions and discourages sharing. We propose a different organization in which operating system and middleware cooperate to support efficient distributed object systems. A flexible microkernel is responsible for securely multiplexing distributed hardware. Adaptable middleware is built on top of this minimal network mi-crokernel and implements a flexible object model that can be customized to meet application-specific requirements. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Francisco J. Ballesteros and Luis L. Fernandez. </author> <title> The Network Hardware is the Operating System. </title> <booktitle> In Proceedings of the 6th Hot Topics on Operating Systems (HotOS-VI)., </booktitle> <address> Cape Cod, MA (USA), </address> <month> May </month> <year> 1997. </year>
Reference-contexts: It follows that these abstractions differ from one middleware system to another. Previous and Ongoing Work. In the past, we developed a distributed adaptable kernel architecture (DAMN 1 ) in which applications use local resources as a cache for network-wide resources <ref> [1] </ref>. Following this philosophy, we are proposing a framework (see figure 1b) in which the work is performed either by the minimal OS or by flexible middleware [11].
Reference: [2] <author> Carlos Baquero. </author> <title> Indirect Calls: Remote invocations on loosely coupled systems. </title> <note> http://www.di.uminho.pt/~/cbm/, 1996. </note>
Reference-contexts: A mobile application, on the other hand, could see the disconnection as a transitory state. We propose that the OS (and possibly, even the mid-dleware) delegate these protocols to protocol implementors specified by the application: each application will select its own model and share it with others. We consider <ref> [2] </ref> to be a step in the right direction Object State. As mentioned above, middleware encapsulates objects maintaining a portable view of object state. Since some of this state is already maintained by the OS, work is duplicated once more. The OS can instead export such state to the middleware. <p> Off ++ enables the use of per-application transport, location, and coherency protocols which can be selected and changed dynamically by each application through the system's reflective interface. The distributed IPC mechanism can be adjusted on demand by applications, as <ref> [2] </ref> suggests. We believe that this architecture can provide significant performance improvements for mid-dleware systems in which objects migrate and are replicated. System objects implement an interface for reading and writing state in a serialized form. "Frozen" object state is transported to different locations to implement migration and replica updates.
Reference: [3] <author> Miguel Mira da Silva and Malcom Atkinson. </author> <title> Combining Mobile Agents with Persistent Systems: Opportunities and Challenges. </title> <booktitle> In ECOOP 97 workshop on Mobile Object Systems, </booktitle> <year> 1997. </year>
Reference-contexts: In distributed environments, the discrepancies are maintained, distributed databases utilize their own algorithms for replication, communication, and mobility. The same problem occurs in other fields like parallel numeric applications [5], distributed multimedia, and distributed real-time. On one hand, many recent approaches consider support for general-purpose DOS applications <ref> [3, 10, 13] </ref>. They do not focus on providing basic mechanisms that could be shared to implement different distributed object models. <p> Other middleware-based systems which build heavily on OS support impose their own distributed object implementation to every application <ref> [14, 13, 3] </ref>. We explore distribution at a lower level of abstraction. Our physical resource protection model is comparable to TACOMA's resource containers [7]. TACOMA containers, handled outside the OS, are now handled by the resource multiplexor, the Off ++ kernel.
Reference: [4] <author> Robert S. Gray. </author> <title> Agent TCL: A flexible and secure mobile-agent system. </title> <booktitle> In Proceedings of the 4th Annual Tcl/Tk Workshop, </booktitle> <year> 1996. </year>
Reference-contexts: Another layer of protection is found in the underlying OS. In spite of using two different protection layers, mobile agent systems are still insecure and have raised new security issues <ref> [4] </ref>. Besides, databases might want coarse-grain ACL-based access control (e.g. before a whole query) and agent systems could prefer fine-grain capability-based access control: different security policies must coexist. We propose that the OS cooperate with the mid-dleware to protect resources.
Reference: [5] <author> Andrew S. Grimshaw, Wm. A. Wulf, </author> <title> and the Legion team. The Legion Vision of a Worldwide Virtual Computer. </title> <journal> CACM, </journal> <volume> 40(1), </volume> <year> 1997. </year>
Reference-contexts: Therefore, database developers are forced to implement their own mechanisms for data storage and retrieval, scheduling, con-currency, consistency, etc. In distributed environments, the discrepancies are maintained, distributed databases utilize their own algorithms for replication, communication, and mobility. The same problem occurs in other fields like parallel numeric applications <ref> [5] </ref>, distributed multimedia, and distributed real-time. On one hand, many recent approaches consider support for general-purpose DOS applications [3, 10, 13]. They do not focus on providing basic mechanisms that could be shared to implement different distributed object models.
Reference: [6] <author> Franscisco J.Ballesteros, Fabio Kon, and Roy H. Camp-bell. </author> <title> A Detailed Description of Off++, a Distributed Adaptable Microkernel. </title> <type> Technical Report UIUCDCS-R-97-2035, </type> <institution> Department of Computer Science, University of Illinois at Urbana-Champaign, </institution> <month> August </month> <year> 1997. </year>
Reference-contexts: Its major goal is to distribute network hardware resources in a secure manner. Off ++ abstractions <ref> [6] </ref> are simpler and lighter than the ones in traditional OSes. Therefore, the middleware has more freedom to implement its own abstractions in a efficient and highly-optimized way.
Reference: [7] <author> Dag Johansen, Robbert van Renessem, and Fred B. Schneider. </author> <title> Operating System Support for Mobile Agents. </title> <booktitle> In Proceedings of the 5th IEEE Workshop on Hot Topics in Operating Systems, </booktitle> <address> Orcas Island, Wa (USA), </address> <month> May </month> <year> 1995. </year> <note> IEEE. </note>
Reference-contexts: Other middleware-based systems which build heavily on OS support impose their own distributed object implementation to every application [14, 13, 3]. We explore distribution at a lower level of abstraction. Our physical resource protection model is comparable to TACOMA's resource containers <ref> [7] </ref>. TACOMA containers, handled outside the OS, are now handled by the resource multiplexor, the Off ++ kernel. Exokernel [8] proposes a flexible architecture in which user-level libraries implement system services in a highly customized and efficient way.
Reference: [8] <author> M. Frans Kaashoek, Dawson R. Engler, Gregory R. Ganger, Hector Brice no, Russell Hunt, David Mazieres, Tom Pinckney, Robert Grimm, John Janotti, and Kenneth Mackenzie. </author> <title> Application Performance and Flexibility on Exokernel Systems. </title> <booktitle> In Proceedings of the Sixteenth Symposium on Operating Systems Principles, </booktitle> <address> Saint Malo, FR, </address> <month> October </month> <year> 1997. </year> <note> ACM. </note>
Reference-contexts: Since some of this state is already maintained by the OS, work is duplicated once more. The OS can instead export such state to the middleware. Migration Decisions. In traditional OSes, resource allocation status is either carefully hidden or exposed in a machine-dependent way <ref> [8] </ref>. Hence, DOS supporting explicit migration must re-export state information in a platform-independent way so that applications can decide when and where to move their objects. In the framework proposed, both OS and middle-ware state is exported using a common well-defined interface. <p> We explore distribution at a lower level of abstraction. Our physical resource protection model is comparable to TACOMA's resource containers [7]. TACOMA containers, handled outside the OS, are now handled by the resource multiplexor, the Off ++ kernel. Exokernel <ref> [8] </ref> proposes a flexible architecture in which user-level libraries implement system services in a highly customized and efficient way. We extend their centralized model by considering distribution issues and, thus, developing a distributed adaptable kernel which can perform well for distributed objects.
Reference: [9] <author> Dejan S. Milojicic, Shai Guday, and Richard Wheeler. </author> <title> Old Wine in New Bottles. </title> <booktitle> In ECOOP 97 workshop on Mobile Object Systems, </booktitle> <year> 1997. </year>
Reference-contexts: This leads not only to duplication of work but also to space and time overhead. In summary, the OS supplies its own abstractions 1 (which differ from OS to OS, i.e., from node to node) and the middleware reinvents them <ref> [9] </ref> to provide uniform and convenient distributed services. It follows that these abstractions differ from one middleware system to another. Previous and Ongoing Work. In the past, we developed a distributed adaptable kernel architecture (DAMN 1 ) in which applications use local resources as a cache for network-wide resources [1]. <p> Distributed references as provided by existing OSes are usually too heavy-weight to be used by middleware systems. Besides, there is no OS support to handle references while and after objects move. Therefore, the middleware must encapsulate its objects to turn them into mobile entities <ref> [9] </ref>. Such encapsulation requires extra work and leads to performance degradation. If the OS supports call redirection, calls to objects in a problematic state (i.e., moving, or with inconsistent state) can be delegated to the middleware.
Reference: [10] <author> Dejan S. Milojicicc, William LaForge, and Deepika Chauhan. </author> <title> Mobile Objects and Agents (MOA). </title> <booktitle> In Proceedings of the 4th USENIX Conference on Object-Oriented Technologies and Systems, </booktitle> <address> Santa Fe (NM,USA), </address> <month> April </month> <year> 1998. </year>
Reference-contexts: In distributed environments, the discrepancies are maintained, distributed databases utilize their own algorithms for replication, communication, and mobility. The same problem occurs in other fields like parallel numeric applications [5], distributed multimedia, and distributed real-time. On one hand, many recent approaches consider support for general-purpose DOS applications <ref> [3, 10, 13] </ref>. They do not focus on providing basic mechanisms that could be shared to implement different distributed object models. <p> The practical consequence will be a thiner middleware cooperating with the OS rather than fighting against it. 4 Related work Systems based on virtual machines and interpreters are slow and pose a number of security concerns <ref> [10, 13] </ref>. Other middleware-based systems which build heavily on OS support impose their own distributed object implementation to every application [14, 13, 3]. We explore distribution at a lower level of abstraction. Our physical resource protection model is comparable to TACOMA's resource containers [7].
Reference: [11] <author> Ashish Singhai, Aamod Sane, and Roy Campbell. </author> <title> Quarterware for Middleware. </title> <booktitle> In Proceddings of the 4 18th International Conference on Distributed Comput--ing Systems (ICDCS). IEEE, </booktitle> <month> May </month> <year> 1998. </year>
Reference-contexts: Following this philosophy, we are proposing a framework (see figure 1b) in which the work is performed either by the minimal OS or by flexible middleware <ref> [11] </ref>. Both layers cooperate to support customized distributed object systems so that specific issues can be addressed on a per application basis and different approaches can coexist. Note the difference with respect to the implementation of conventional middleware systems on conventional operating systems (figure 1a).
Reference: [12] <author> Christian Tschudin. </author> <title> Open Resource Allocation for Mobile Code. </title> <booktitle> In Proceedings of the First International Workshop on Mobile Agents, </booktitle> <publisher> LNCS, </publisher> <pages> pages 186-187. </pages> <publisher> Springer Verlag, </publisher> <month> April </month> <year> 1997. </year>
Reference-contexts: In the framework proposed, both OS and middle-ware state is exported using a common well-defined interface. Users rely on it to gather information about system state and available resources in the network. This can be considered to be a generalization of facilities provided in MOS <ref> [12] </ref> to inspect processor availability and to allocate processor time.
Reference: [13] <author> Patrick Tullmann and Jay Lepreau. </author> <title> Nested Java Processes: OS Structure for Mobile Code. </title> <address> http://www.cs.utah.edu/projects/flexmach/java/alta. </address>
Reference-contexts: In distributed environments, the discrepancies are maintained, distributed databases utilize their own algorithms for replication, communication, and mobility. The same problem occurs in other fields like parallel numeric applications [5], distributed multimedia, and distributed real-time. On one hand, many recent approaches consider support for general-purpose DOS applications <ref> [3, 10, 13] </ref>. They do not focus on providing basic mechanisms that could be shared to implement different distributed object models. <p> The practical consequence will be a thiner middleware cooperating with the OS rather than fighting against it. 4 Related work Systems based on virtual machines and interpreters are slow and pose a number of security concerns <ref> [10, 13] </ref>. Other middleware-based systems which build heavily on OS support impose their own distributed object implementation to every application [14, 13, 3]. We explore distribution at a lower level of abstraction. Our physical resource protection model is comparable to TACOMA's resource containers [7]. <p> Other middleware-based systems which build heavily on OS support impose their own distributed object implementation to every application <ref> [14, 13, 3] </ref>. We explore distribution at a lower level of abstraction. Our physical resource protection model is comparable to TACOMA's resource containers [7]. TACOMA containers, handled outside the OS, are now handled by the resource multiplexor, the Off ++ kernel.
Reference: [14] <author> L. van Doorn, P. Homburg, and A.S. Tanenbaum. Paramecium: </author> <title> An extensible object-based kernel. </title> <booktitle> In Proceedings of the 5th Hot Topics in Operating Systems (HotOS) Workshop, </booktitle> <pages> pages 86-89, </pages> <address> Orcas Island, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: Other middleware-based systems which build heavily on OS support impose their own distributed object implementation to every application <ref> [14, 13, 3] </ref>. We explore distribution at a lower level of abstraction. Our physical resource protection model is comparable to TACOMA's resource containers [7]. TACOMA containers, handled outside the OS, are now handled by the resource multiplexor, the Off ++ kernel. <p> Exokernel [8] proposes a flexible architecture in which user-level libraries implement system services in a highly customized and efficient way. We extend their centralized model by considering distribution issues and, thus, developing a distributed adaptable kernel which can perform well for distributed objects. Paramecium <ref> [14] </ref> is a novel OS supporting the notion of distributed shared objects as a means to implement system services. The system can be adapted and heavy middleware layers could possibly be avoided.
Reference: [15] <author> Jim White. </author> <title> Mobile Agents. General Magic Corporation, </title> <year> 1996. </year>
Reference-contexts: The middleware assigns a concrete protection implementation for each of the allocated distributed system resources and the kernel is responsible for enforcing it. A migrating object uses a ticket <ref> [15] </ref> that includes its access rights in a format suitable to the selected protection scheme. Thus, protection can be enforced wherever the object goes.
Reference: [16] <author> Victor Yodaiken and Michael Barabanov. </author> <title> Real-time linux. </title> <note> http://luz.cs.mnt.edu/~rtlinux/, 1998. 5 </note>
Reference-contexts: We believe that this goal can be achieved without excessive effort. The modifications implemented in some modern UNIX systems to support soft real-time <ref> [16] </ref> are very close to what we need. The practical consequence will be a thiner middleware cooperating with the OS rather than fighting against it. 4 Related work Systems based on virtual machines and interpreters are slow and pose a number of security concerns [10, 13].
References-found: 16

