URL: http://www.csl.sri.com/reports/postscript/csl-93-7.ps.gz
Refering-URL: http://www.csl.sri.com/fm-papers.html
Root-URL: 
Email: Rushby@csl.sri.com  
Phone: Phone: +1 (415) 859-5456 Fax: +1 (415) 859-2844  
Title: Formal Methods and the Certification of Critical Systems 1  
Author: John Rushby 
Address: Menlo Park CA 94025 USA  
Affiliation: Computer Science Laboratory SRI International  
Abstract: Technical Report CSL-93-7 December 1993 1 Also issued under the title Formal Methods and Digital Systems Validation for Airborne Systems as NASA CR 4551. Preparation of this report was sponsored by the Federal Aviation Administration, FAA Technical Center, Atlantic City NJ, and by the National Aeronautics and Space Administration Langley Research Center, Langley VA, under Contract NAS1-18969, monitored by NASA Langley Research Center. 
Abstract-found: 1
Intro-found: 1
Reference: [ABHM85] <author> T. Anderson, P. A. Barrett, D. N. Halliwell, and M. R. </author> <title> Moulding. An evaluation of software fault tolerance in a practical system. </title> <booktitle> In Fault Tolerant Computing Symposium 15, </booktitle> <pages> pages 140-145, </pages> <address> Ann Arbor, MI, June 1985. </address> <publisher> IEEE Computer Society. </publisher>
Reference: [ABL89] <author> A. Frank Ackerman, Lynne S. Buchwald, and Frank H. Lewski. </author> <title> Software inspections: An effective verification process. </title> <journal> IEEE Software, </journal> <volume> 6(3) </volume> <pages> 31-36, </pages> <month> May </month> <year> 1989. </year>
Reference: [Abr80a] <author> J. R. </author> <title> Abrial. The Specification Language Z: The Basic Library. Programming Research Group, </title> <publisher> Oxford University, Oxford, </publisher> <address> UK, </address> <year> 1980. </year>
Reference: [Abr80b] <author> J. R. </author> <title> Abrial. Specification of Some Aspects of a Simple Batch Operating System. Programming Research Group, </title> <publisher> Oxford University, Oxford, </publisher> <address> UK, </address> <month> May </month> <year> 1980. </year>
Reference: [AD91] <author> Christine Anderson and Merlin Dorfman, </author> <title> editors. Aerospace Software Engineering: A Collection of Concepts, </title> <booktitle> volume 136 of Progress in Astronautics and Aeronautics. American Institute of Aeronautics and Astronautics, </booktitle> <address> Washington, DC, </address> <year> 1991. </year>
Reference: [Add91] <author> Edward Addy. </author> <title> A case study on isolation of safety-critical software. </title> <booktitle> In COMP [COMP91], </booktitle> <pages> pages 75-83. </pages>
Reference: [AHMP92] <author> Arnon Avron, Furio Honsell, Ian A. Mason, and Robert Pollack. </author> <title> Using typed lambda calculus to implement formal systems on a machine. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 9(3) </volume> <pages> 309-354, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: An alternative that can provide some of the advantages of a generic system is one based on a very rich foundation, such as higher-order logic (type theory). (More ambitious foundations, specifically intended to support a wide variety of logics, include the Edinburgh Logical Framework (LF) <ref> [AHMP92] </ref>.) It is possible to encode the semantics of other logics (e.g., temporal logics, or Hoare logics) or specification notations (e.g., Z) in higher-order logic. A disadvantage of this approach is that some of the details of the encoding used may obtrude 162 Chapter 3.
Reference: [AHW + 90] <author> G. H. Archinoff, R. J. Hohendorf, A. Wassyng, B. Quigley, and M. R. Borsch. </author> <title> Verification of the shutdown system software at the Dar-lington nuclear generating station. </title> <booktitle> In International Conference on Control and Instrumentation in Nuclear Installations, </booktitle> <address> Glasgow, UK, </address> <month> May </month> <year> 1990. </year> <title> The Institution of Nuclear Engineers. </title> <type> 181 182 Bibliography </type>
Reference: [AINP88] <author> Peter B. Andrews, Sunil Issar, Daniel Nesmith, and Frank Pfenning. </author> <title> The TPS theorem proving system. </title> <booktitle> In Lusk and Overbeek [LO88], </booktitle> <pages> pages 760-761. </pages>
Reference: [AJ90] <author> Heather Alexander and Val Jones. </author> <title> Software Design and Prototyping using me too. </title> <publisher> Prentice Hall International, </publisher> <address> Hemel Hempstead, UK, </address> <year> 1990. </year>
Reference: [AL86] <author> A. Avizienis and J. C. Laprie. </author> <title> Dependable computing: From concepts to design diversity. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 74(5) </volume> <pages> 629-638, </pages> <month> May </month> <year> 1986. </year>
Reference-contexts: However, specialized fault-tolerant system structures have been proposed that seek to avoid these difficulties. One such approach is "multiple-version dissimilar software" [RTCA92, Subsection 2.3.2] generally organized in the form of N -Version software <ref> [AL86, Avi85] </ref> or as "Recovery Blocks" [Ran75a]. The idea here is to use two or more independently developed software versions in conjunction with comparison or voting to avoid system failures due to systematic failures in individual software versions.
Reference: [AL90] <author> T. Anderson and P. A. Lee. </author> <title> Fault-Tolerance: Principles and Practice (Second, revised edition). </title> <publisher> Springer-Verlag, </publisher> <address> Vienna, Austria, </address> <year> 1990. </year>
Reference: [ALN + 91] <author> J.-R. Abrial, M. K. O. Lee, D. S. Neilson, P. N. Scharbach, and I. H. Strensen. </author> <title> The B-method. </title> <editor> In S. Prehn and W. J. Toetenel, editors, </editor> <booktitle> VDM '91: Formal Software Development Methods, </booktitle> <pages> pages 398-405, </pages> <address> Noordwijkerhout, The Netherlands, </address> <month> October </month> <year> 1991. </year> <booktitle> Volume 552 of Lecture Notes in Computer Science, Springer-Verlag. </booktitle> <volume> Volume 2: </volume> <pages> Tutorials. </pages>
Reference: [AN89] <author> Katsuji Akita and Hideo Nakamura. </author> <title> Safety and fault-tolerance in computer-controlled railway signalling systems. </title> <editor> In A. Avizienis and J. C. Laprie, editors, </editor> <booktitle> Dependable Computing for Critical Applications, </booktitle> <pages> pages 107-131, </pages> <address> Santa Barbara, CA, </address> <month> August </month> <year> 1989. </year> <title> Volume 4 of Dependable Computing and Fault-Tolerant Systems, </title> <publisher> Springer-Verlag, </publisher> <address> Vienna, Austria. </address>
Reference: [Ano89] <author> Anonymous. </author> <title> Reprogramming capability proves key to extending Voyager 2's journey. </title> <booktitle> Aviation Week and Space Technology, </booktitle> <pages> page 72, </pages> <month> August 7, </month> <year> 1989. </year>
Reference-contexts: The clocks lost synchronization and skewed 8 seconds, causing some scientific data to be lost. Clock synchronization was reprogrammed for Voyager 2's encounter with Neptune <ref> [Ano89] </ref>. * The Magellan spacecraft broke Earth lock and lost communications several times in August 1990 (soon after entering Venus orbit).
Reference: [AP93] <author> Stephen Austin and Graeme I. Parkin. </author> <title> Formal methods: a survey. </title> <type> Technical report, </type> <institution> Division of Information Technology and Computing, National Physical Laboratory, Teddington, </institution> <address> Middlesex, UK, </address> <month> March </month> <year> 1993. </year>
Reference-contexts: introduction to logic that is explicitly intended for computer scientists [MW93]. Many other books on logic are mentioned in the Appendix. Those considering the issues of transferring formal methods from research to practice may wish to consult Austin and Parkin <ref> [AP93] </ref>, who analyze 126 questionnaires returned by organizations, mostly in the UK, on industrial use of formal methods. Good accounts of the general problems of technology transfer are given by Davis [Dav92] and by Potts [Pot93].
Reference: [Art91] <author> R. D. Arthan. </author> <title> On formal specification of a proof tool. </title> <booktitle> In Prehn and Toetenel [PT91], </booktitle> <pages> pages 356-370. </pages>
Reference: [Avi85] <author> Algirdas Avizienis. </author> <title> The N -Version approach to fault-tolerant software. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-11(12):1491-1501, </volume> <month> December </month> <year> 1985. </year>
Reference-contexts: However, specialized fault-tolerant system structures have been proposed that seek to avoid these difficulties. One such approach is "multiple-version dissimilar software" [RTCA92, Subsection 2.3.2] generally organized in the form of N -Version software <ref> [AL86, Avi85] </ref> or as "Recovery Blocks" [Ran75a]. The idea here is to use two or more independently developed software versions in conjunction with comparison or voting to avoid system failures due to systematic failures in individual software versions.
Reference: [AW78] <author> T. Anderson and R. W. Witty. </author> <title> Safe programming. </title> <journal> BIT, </journal> <volume> 18 </volume> <pages> 1-8, </pages> <year> 1978. </year> <note> Bibliography 183 </note>
Reference: [Bar78] <author> Jon Barwise. </author> <title> An introduction to first-order logic. </title> <editor> In Jon Barwise, editor, </editor> <booktitle> Handbook of Mathematical Logic, volume 90 of Studies in Logic and the Foundations of Mathematics, chapter A1, </booktitle> <pages> pages 5-46. </pages> <publisher> North-Holland, Amsterdam, Holland, </publisher> <year> 1978. </year>
Reference: [Bar89a] <author> Geoff Barrett. </author> <title> Formal methods applied to a floating-point number system. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 15(5) </volume> <pages> 611-621, </pages> <month> May </month> <year> 1989. </year>
Reference: [Bar89b] <author> Jon Barwise. </author> <title> Mathematical proofs of computer system correctness. </title> <journal> Notices of the American Mathematical Society, </journal> <volume> 36 </volume> <pages> 844-851, </pages> <month> Septem-ber </month> <year> 1989. </year>
Reference: [BBH + 74] <author> H. Bekic, D. Bjtrner, W. Henhapl, C. B. Jones, and P. Lucas. </author> <title> A formal definition of a PL/1 subset. </title> <type> Technical Report 25.139, </type> <institution> IBM Laboratory, Vienna, Austria, </institution> <year> 1974. </year>
Reference: [BC81] <author> Eike Best and Flaviu Cristian. </author> <title> Systematic detection of exception occurrences. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 1(1) </volume> <pages> 115-144, </pages> <year> 1981. </year>
Reference-contexts: Techniques of this kind can be considered a very strong form of typechecking; they were pioneered by German [Ger78] and are now available in commercial tools [Egg90]. Best and Cristian give a formal treatment of more general kinds of exceptions <ref> [BC81, Cri84] </ref>. think about their software from a novel perspective and has the unexpected side-effect of leading them to discover faults that would otherwise have gone unnoticed at that stage. 34 For example, the onerous unit test criterion required by DO-178B called Modified Condition/Decision Coverage (MC/DC) is intended to exercise all
Reference: [BC85] <author> Jean-Fran~cois Bergeretti and Bernard A. Carre. </author> <title> Information-flow and data-flow analysis of while-programs. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 7(1) </volume> <pages> 37-61, </pages> <month> January </month> <year> 1985. </year>
Reference: [BCAG94] <institution> Statistical Summary of Commercial Jet Aircraft Accidents, </institution> <note> Worldwide Operations, 1959-1993. Published annually by: </note> <institution> Airplane Safety Engineering (B-210B), Boeing Commercial Airplane Group, </institution> <address> Seattle, WA, </address> <month> March </month> <year> 1994. </year>
Reference: [BCD91] <author> Ricky W. Butler, James L. Caldwell, and Ben L. Di Vito. </author> <title> Design strategy for a formally verified reliable computing platform. </title> <booktitle> In COMP [COMP91], </booktitle> <pages> pages 125-133. </pages>
Reference: [BCJ84] <author> H. Barringer, J. H. Cheng, and C. B. Jones. </author> <title> A logic covering unde-finedness in program proofs. </title> <journal> Acta Informatica, </journal> <volume> 21 </volume> <pages> 251-269, </pages> <year> 1984. </year>
Reference-contexts: Developing a semantics for a specification language that admits partial functions is a challenging problem. The main choices are multiple-valued logics (e.g., LPF <ref> [BCJ84] </ref>), or logics of partial terms (e.g., Beeson's LPT [Bee86]). The alternative is to treat all functions as total; this can be rather unnatural (e.g., allowing division by zero) in languages with only elementary type-systems, but becomes very effective when predicate subtypes and dependent types are available.
Reference: [BCM + 92] <author> J. R. Burch, E. M. Clarke, K. L. McMillan, D. L. Dill, and L. J. Hwang. </author> <title> Symbolic model checking: 10 20 states and beyond. </title> <journal> Information and Computation, </journal> <volume> 98(2) </volume> <pages> 142-170, </pages> <month> June </month> <year> 1992. </year>
Reference: [Bee86] <author> Michael J. Beeson. </author> <title> Proving programs and programming proofs. </title> <booktitle> In International Congress on Logic, Methodology and Philosophy of Science VII, </booktitle> <pages> pages 51-82, </pages> <address> Amsterdam, </address> <year> 1986. </year> <title> North-Holland. </title> <booktitle> Proceedings of a meeting held at Salzburg, </booktitle> <address> Austria, </address> <note> in July, 1983. 184 Bibliography </note>
Reference-contexts: Developing a semantics for a specification language that admits partial functions is a challenging problem. The main choices are multiple-valued logics (e.g., LPF [BCJ84]), or logics of partial terms (e.g., Beeson's LPT <ref> [Bee86] </ref>). The alternative is to treat all functions as total; this can be rather unnatural (e.g., allowing division by zero) in languages with only elementary type-systems, but becomes very effective when predicate subtypes and dependent types are available.
Reference: [Bev89] <author> William R. Bevier. </author> <title> Kit and the short stack. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 5(4) </volume> <pages> 519-530, </pages> <month> December </month> <year> 1989. </year>
Reference: [BF86] <author> Robin E. Bloomfield and Peter K. D. Froome. </author> <title> The application of formal methods to the assessment of high integrity software. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-12(9):988-993, </volume> <month> September </month> <year> 1986. </year>
Reference: [BF93] <author> Ricky W. Butler and George B. Finelli. </author> <title> The infeasibility of experimental quantification of life-critical software reliability. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 19(1) </volume> <pages> 3-12, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: Apart from concerns about 7 The Bayesian analysis shows that if we bring no prior belief to the problem, then following n hours of failure-free operation, there is a 50:50 chance that a further n hours will elapse before the first failure. 8 Butler and Finelli <ref> [BF93] </ref> present a similar analysis and conclusion (see also Hamlet [Ham92]). Parnas, van Schouwen, and Kwan [PvSK90] use a slightly different model. <p> But for this design approach to be effective, the incidence of coincident failures must be in the ultra-dependable region|and we are again faced with the infeasibility of experimental quantification of extremely rare events <ref> [BF93] </ref>.
Reference: [BG77] <author> Rod Burstall and Joseph Goguen. </author> <title> Putting theories together to make specifications. </title> <editor> In Raj Reddy, editor, </editor> <booktitle> Proceedings, Fifth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 1045-1058. </pages> <institution> Department of Computer Science, Carnegie-Mellon University, </institution> <year> 1977. </year>
Reference-contexts: Specifying these kinds of constraints can either be done directly, by attaching assumptions to the formal parameters that must be discharged whenever the module is instantiated, or by allowing modules to be parameterized by theories|OBJ [FGJM85] does this, and more elaborate ideas are discussed in the language proposal Clear <ref> [BG77] </ref>. * Does the language have a built-in model of computation? 166 Chapter 3. Formal Methods and Digital Systems Validation In most applications, formal methods are used to reason about computational processes. Thus, the chosen specification language must be able to represent the kinds of computations concerned.
Reference: [BH90] <author> Bishop Brock and Warren A. Hunt, Jr. </author> <title> Report on the formal specification and partial verification of the VIPER microprocessor. </title> <type> Technical Report 46, </type> <institution> Computational Logic Incorporated, Austin, TX, </institution> <month> January </month> <year> 1990. </year>
Reference: [BH91] <author> Bishop Brock and Warren A. Hunt, Jr. </author> <title> Report on the formal specification and partial verification of the VIPER microprocessor. </title> <booktitle> In COMP [COMP91], </booktitle> <pages> pages 91-98. </pages>
Reference: [Bis93] <author> P. G. Bishop. </author> <title> The variation of software survival time for different operational input profiles (or why you can wait a long time for a big bug to fail). </title> <booktitle> In Fault Tolerant Computing Symposium 23 [IEE93], </booktitle> <pages> pages 98-107. </pages>
Reference-contexts: And even if there were objective evidence that certain practices reduce the density of defects in delivered software to extremely low levels, this would not necessarily guarantee fewer safety-critical failures in operation|for the relationship between density of faults and rate of serious failure is not straightforward (see, e.g., <ref> [Bis93] </ref>).
Reference: [BJ92] <author> Neil A. Brock and David M. Jackson. </author> <title> Formal verification of a fault tolerant computer. </title> <booktitle> In 11th AIAA/IEEE Digital Avionics Systems Conference, </booktitle> <pages> pages 132-137, </pages> <address> Seattle, WA, </address> <month> October </month> <year> 1992. </year> <institution> The Institute of Electrical and Electronics Engineers. </institution>
Reference: [Bjt81] <author> D. Bjtrner. </author> <title> The VDM principles of software specification and program design. </title> <booktitle> In TC2 Working Conference on Formalization of Programming Concepts, </booktitle> <pages> pages 44-74. </pages> <booktitle> Volume 107 of Lecture Notes in Computer Science, IFIP, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference: [BL76] <author> D. E. Bell and L. J. La Padula. </author> <title> Secure computer system: Unified exposition and Multics interpretation. </title> <type> Technical Report ESD-TR-75-306, </type> <institution> Mitre Corporation, Bedford, </institution> <address> MA, </address> <month> March </month> <year> 1976. </year> <note> Bibliography 185 </note>
Reference: [BL92] <author> Sarah Brocklehurst and Bev Littlewood. </author> <title> New ways to get accurate reliability measures. </title> <journal> IEEE Software, </journal> <volume> 9(4) </volume> <pages> 34-42, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: A further limitation on the utility of N -version 10 Different reliability growth models often make very different predictions, and no single model is uniformly superior to the others; however, it is possible to determine which models are effective in a particular case, but only at modest reliability levels <ref> [BL92] </ref>. 11 For the Recovery Block technique to be effective, failure of the "Acceptance Test" must be almost independent of failures of the implementations comprising the body of the recovery block.
Reference: [BM79] <author> R. S. Boyer and J S. Moore. </author> <title> A Computational Logic. </title> <publisher> Academic Press, </publisher> <address> New York, NY, </address> <year> 1979. </year>
Reference: [BM81] <author> R. S. Boyer and J S. Moore. Metafunctions: </author> <title> Proving them correct and using them efficiently as new proof procedures. </title> <editor> In R. S. Boyer and J S. Moore, editors, </editor> <booktitle> The Correctness Problem in Computer Science. </booktitle> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1981. </year>
Reference-contexts: The metafunctions of the Boyer-Moore prover <ref> [BM81] </ref> have this character. "Reflective" theorem provers, a research topic, support reasoning about their own proof procedures and can be extended in quite general ways. 3.6 Conclusion "In science, nothing capable of proof ought to be accepted without proof." [Ded63, page 31] "The virtue of a logical proof is not that
Reference: [BM86] <author> R. S. Boyer and J S. Moore. </author> <title> Integrating decision procedures into heuristic theorem provers: A case study with linear arithmetic. </title> <booktitle> In Machine Intelligence, </booktitle> <volume> volume 11. </volume> <publisher> Oxford University Press, </publisher> <year> 1986. </year>
Reference: [BM88] <author> R. S. Boyer and J S. Moore. </author> <title> A Computational Logic Handbook. </title> <publisher> Academic Press, </publisher> <address> New York, NY, </address> <year> 1988. </year>
Reference: [Boe88] <author> Barry W. Boehm. </author> <title> A spiral model of software development and enhancement. </title> <journal> IEEE Computer, </journal> <volume> 21(5) </volume> <pages> 61-72, </pages> <month> May </month> <year> 1988. </year>
Reference: [Bou68] <author> N. Bourbaki. </author> <title> Elements of Mathematics: Theory of Sets. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1968. </year>
Reference: [BR91] <author> J. C. Bicarregui and B. Ritchie. </author> <title> Reasoning about VDM using the VDM support tool in Mural. </title> <booktitle> In Prehn and Toetenel [PT91], </booktitle> <pages> pages 371-388. </pages>
Reference: [Bro87] <author> Frederick P. Brooks, Jr. </author> <title> No silver bullet: </title> <journal> Essence and accidents of software engineering. IEEE Computer, </journal> <volume> 20(4) </volume> <pages> 10-19, </pages> <month> April </month> <year> 1987. </year>
Reference: [Bry86] <author> R. E. Bryant. </author> <title> Graph-based algorithms for Boolean function manipulation. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-35(8):677-691, </volume> <month> August </month> <year> 1986. </year>
Reference: [BS88] <editor> G. Birtwistle and P. A. Subrahmanyam, editors. </editor> <title> VLSI Specification, Verification and Synthesis. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1988. </year>
Reference: [BS89] <editor> G. Birtwistle and P. A. Subrahmanyam, editors. </editor> <title> Current Trends in Hardware Verification and Theorem Proving. </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1989. </year>
Reference: [BSH86] <author> Victor R. Basili, Richard W. Selby, and David H. Hutchens. </author> <title> Experimentation in software engineering. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-12(7):733-743, </volume> <month> July </month> <year> 1986. </year> <note> 186 Bibliography </note>
Reference-contexts: Before we attribute reductions in defect-rate to specific processes, we need to be sure that all other factors are adequately controlled. Although researchers such as Basili and his colleagues <ref> [BW84, BSH86] </ref> have described sound methodological approaches to the gathering of data on software engineering processes, it is difficult and expensive to perform the necessary experiments, particularly on other than "toy" examples.
Reference: [Bun83] <editor> Alan Bundy. </editor> <booktitle> The Computer Modelling of Mathematical Reasoning. </booktitle> <publisher> Academic Press, </publisher> <address> London, UK, </address> <year> 1983. </year>
Reference: [Bus90] <author> Marilyn Bush. </author> <title> Improving software quality: The use of formal inspections at the Jet Propulsion Laboratory. </title> <booktitle> In 12th International Conference on Software Engineering, </booktitle> <pages> pages 196-199, </pages> <address> Nice, France, March 1990. </address> <publisher> IEEE Computer Society. </publisher>
Reference: [BW84] <author> Victor R. Basili and David M. Weiss. </author> <title> A methodology for collecting valid software engineering data. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-10(11):728-738, </volume> <month> November </month> <year> 1984. </year>
Reference-contexts: Before we attribute reductions in defect-rate to specific processes, we need to be sure that all other factors are adequately controlled. Although researchers such as Basili and his colleagues <ref> [BW84, BSH86] </ref> have described sound methodological approaches to the gathering of data on software engineering processes, it is difficult and expensive to perform the necessary experiments, particularly on other than "toy" examples.
Reference: [BY92] <author> William R. Bevier and William D. Young. </author> <title> Machine checked proofs of the design of a fault-tolerant circuit. </title> <journal> Formal Aspects of Computing, </journal> <volume> 4(6A):755-775, </volume> <year> 1992. </year>
Reference: [CAB + 86] <author> R. L. Constable, S. F. Allen, H. M. Bromley, W. R. Cleaveland, J. F. Cremer, R. W. Harper, D. J. Howe, T. B. Knoblock, N. P. Mendler, P. Panangaden, J. T. Sasaki, and S. F. Smith. </author> <title> Implementing Mathematics with the Nuprl Proof Development System. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1986. </year>
Reference: [Car89] <author> Bernard Carre. </author> <title> Program analysis and validation. </title> <note> In Sennett [Sen89], chapter 8. </note>
Reference: [CDD90] <author> Flaviu Cristian, Bob Dancey, and Jon Dehn. </author> <title> Fault-tolerance in the advanced automation system. </title> <booktitle> In Fault Tolerant Computing Symposium 20, </booktitle> <pages> pages 6-17, </pages> <institution> Newcastle upon Tyne, </institution> <address> UK, June 1990. </address> <publisher> IEEE Computer Society. </publisher>
Reference-contexts: [LS93]; failures that could contribute to a major failure condition in an aircraft require a failure rate less than 10 5 per hour [FAA88, paragraph 10.b (2)]; the Advanced Automation System for Air Traffic Control has a requirement for less than 3 seconds unavailability per year (about 10 7 ) <ref> [CDD90] </ref>; failures that could contribute to a catastrophic failure condition in an aircraft require a failure rate less than 10 9 per hour [FAA88, paragraph 10.b (3)]; controllers for urban trains must have failure rates lower than 10 12 [LS93]. 6 The key issue here is the extent to which the
Reference: [CDM86] <author> P. Allen Currit, Michael Dyer, and Harlan D. Mills. </author> <title> Certifying the reliability of software. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-12(1):3-11, </volume> <month> January </month> <year> 1986. </year>
Reference-contexts: There is a huge variation in the rate at which different faults lead to failure, and also in the severity of their consequences. Currit, Dyer, and Mills <ref> [CDM86] </ref> report data from major IBM systems showing that one third of the faults identified had a mean time to failure (MTTF) of over 5,000 years (and thus have an insignificant effect on overall MTTF), and a mere 2% of the faults accounted for 1,000 times more failures than the 60%
Reference: [CES86] <author> E. M. Clarke, E. A. Emerson, and A. P. Sistla. </author> <title> Automatic verification of finite-state concurrent systems using temporal logic specifications. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 8(2) </volume> <pages> 244-263, </pages> <month> April </month> <year> 1986. </year>
Reference: [CFL + 91] <author> Jeffrey V. Cook, Ivan V. Filippenko, Beth H. Levy, Leo G. Marcus, and Telis K. Menas. </author> <title> Formal computer verification in the state delta verification system (SDVS). </title> <booktitle> In AIAA Computing in Aerospace VIII, </booktitle> <pages> pages 77-87, </pages> <address> Baltimore, MD, </address> <month> October </month> <year> 1991. </year> <note> AIAA paper 91-3715. Bibliography 187 </note>
Reference: [CG88] <author> Robert F. Cmelik and Narain H. Gehani. </author> <title> Dimensional analysis with C++. </title> <journal> IEEE Software, </journal> <volume> 5(3) </volume> <pages> 21-27, </pages> <month> May </month> <year> 1988. </year>
Reference: [CGH + 92] <author> E. M. Clarke, O. Grumberg, H. Haraishi, S. Jha, D. Long, K. L. McMillan, and L. Ness. </author> <title> Verification of the Futurebus+ cache coherence protocol. </title> <type> Technical Report CMU-CS-92-206, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <year> 1992. </year>
Reference: [CGR93a] <author> Dan Craigen, Susan Gerhart, and Ted Ralston. </author> <title> Formal methods reality check: Industrial usage. </title> <editor> In J. C. P. Woodcock and P. G. Larsen, editors, </editor> <booktitle> FME '93: Industrial-Strength Formal Methods, </booktitle> <pages> pages 250-267, </pages> <address> Odense, Denmark, </address> <month> April </month> <year> 1993. </year> <booktitle> Volume 670 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference: [CGR93b] <author> Dan Craigen, Susan Gerhart, and Ted Ralston. </author> <title> An international survey of industrial applications of formal methods; Volume 1: Purpose, approach, analysis and conclusions; Volume 2: Case studies. </title> <type> Technical Report NIST GCR 93/626, </type> <institution> National Institute of Standards and Technology, Gaithersburg, MD, </institution> <month> April </month> <year> 1993. </year>
Reference: [Cha92] <author> P. Chapront. </author> <title> Vital coded processor and safety related software design. </title> <booktitle> In Frey [Fre92], </booktitle> <pages> pages 141-145. </pages>
Reference: [Cha93] <author> Zhou Chaochen. </author> <title> Duration calculi: An overview. </title> <editor> In Dines Bjtrner, Manfred Broy, and Igor V. Pottosin, editors, </editor> <booktitle> Proceedings of the International Conference on Formal Methods in Programming and Their Applications, </booktitle> <pages> pages 256-266, </pages> <address> Novosibirsk, Russia, </address> <booktitle> June/July 1993. Volume 735 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: For control systems, the approach developed by Parnas and colleagues|variously known as the "A7" or "Software Cost Reduction" (SCR) method|seems most suitable. (A recent description of the A7 method is given by van Schouwen [vS90, vSPM93]; an example, in which a duration calculus <ref> [Cha93] </ref> is used to support the method, is given by Engel et al. [EKM + 93].) A more comprehensive approach, developed specifically for aerospace applications and combining object-oriented techniques with those of A7, is the "Consortium Requirements Engineering" (CoRE) method of the Software Productivity Consortium. (This method is currently being applied
Reference: [CHB79] <author> R. H. Campbell, K. H. Horton, and G. G. Belford. </author> <title> Simulations of a fault-tolerant deadline mechanism. </title> <booktitle> In Fault Tolerant Computing Symposium 9, </booktitle> <pages> pages 95-101, </pages> <address> Madison, WI, June 1979. </address> <publisher> IEEE Computer Society. </publisher>
Reference: [Che89] <author> Mikhail Chernyshov. </author> <title> Post-mortem on failure. </title> <booktitle> Nature, </booktitle> <address> 339:9, </address> <month> May 4, </month> <year> 1989. </year>
Reference: [CHJ86] <author> B. Cohen, W. T. Harwood, and M. I. Jackson. </author> <title> The Specification of Complex Systems. </title> <publisher> Addison-Wesley, </publisher> <address> Wokingham, England, </address> <year> 1986. </year>
Reference: [CJ90] <author> J. H. Cheng and C. B. Jones. </author> <title> On the usability of logics which handle partial functions. </title> <editor> In Carroll Morgan and J. C. P. Woodcock, editors, </editor> <booktitle> Proceedings of the Third Refinement Workshop, </booktitle> <pages> pages 51-69. </pages> <note> Springer-Verlag Workshops in Computing, 1990. 188 Bibliography </note>
Reference: [CKM + 91] <author> Dan Craigen, Sentot Kromodimoeljo, Irwin Meisels, Bill Pase, and Mark Saaltink. </author> <title> EVES: An overview. </title> <booktitle> In Prehn and Toetenel [PT91], </booktitle> <pages> pages 389-405. </pages>
Reference: [CLS88] <author> Stephen S. Cha, Nancy G. Leveson, and Timothy J. Shimeall. </author> <title> Safety verification in Murphy using fault tree analysis. </title> <booktitle> In 10th International Conference on Software Engineering, </booktitle> <pages> pages 377-386, </pages> <address> Singapore, April 1988. </address> <publisher> IEEE Computer Society. </publisher>
Reference: [CLSK87] <author> S. Cha, N. G. Leveson, T. J. Shimeall, and J. C. Knight. </author> <title> An empirical study of software error detection using self-checks. </title> <booktitle> In Fault Tolerant Computing Symposium 17, </booktitle> <pages> pages 156-161, </pages> <address> Pittsburgh, PA., </address> <month> July </month> <year> 1987. </year> <journal> IEEE Computer Society. </journal>
Reference: [CM88] <author> K. Mani Chandy and Jayadev Misra. </author> <title> Parallel Program Design: A Foundation. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1988. </year>
Reference: [CM93] <author> John Joseph Chilenski and Steven P. Miller. </author> <title> Applicability of modified condition/decision coverage to software testing. </title> <note> Issued for information under FAA memorandum ANM-106N:93-20, </note> <month> August </month> <year> 1993. </year>
Reference-contexts: to discover faults that would otherwise have gone unnoticed at that stage. 34 For example, the onerous unit test criterion required by DO-178B called Modified Condition/Decision Coverage (MC/DC) is intended to exercise all possible code sequences that a compiler might generate from the Boolean expressions appearing in tests and loops <ref> [CM93] </ref>. 148 Chapter 3.
Reference: [COCD86] <author> B. A. Carre, I. M. O'Neill, D. L. Clutterbuck, and C. W. Debney. SPADE: </author> <title> the Southampton program analysis and development environment. </title> <editor> In I. Sommerville, editor, </editor> <booktitle> Software Programming Environments. </booktitle> <editor> Peter Pereginus, </editor> <year> 1986. </year>
Reference: [Coh88] <author> A. J. Cohn. </author> <title> A proof of correctness of the viper microprocessors: </title> <booktitle> The first level. In Birtwistle and Subrahmanyam [BS88], </booktitle> <pages> pages 27-72. </pages>
Reference: [Coh89a] <author> A. J. Cohn. </author> <title> Correctness properties of the viper block model: </title> <booktitle> The second level. In Birtwistle and Subrahmanyam [BS89], </booktitle> <pages> pages 1-91. </pages>
Reference: [Coh89b] <author> Avra Cohn. </author> <title> The notion of proof in hardware verification. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 5(2) </volume> <pages> 127-139, </pages> <month> June </month> <year> 1989. </year>
Reference: [COMP89] <institution> COMPASS '89 (Proceedings of the Fourth Annual Conference on Computer Assurance), Gaithersburg, MD, </institution> <month> June </month> <year> 1989. </year> <note> IEEE Wash-ington Section. </note>
Reference: [COMP90] <institution> COMPASS '90 (Proceedings of the Fifth Annual Conference on Computer Assurance), Gaithersburg, MD, </institution> <month> June </month> <year> 1990. </year> <institution> IEEE Washington Section. </institution>
Reference: [COMP91] <institution> COMPASS '91 (Proceedings of the Sixth Annual Conference on Computer Assurance), Gaithersburg, MD, </institution> <month> June </month> <year> 1991. </year> <title> IEEE Washington Section. Bibliography 189 </title>
Reference: [Coo90] <author> Henry S. F. Cooper Jr. </author> <title> Annals of space (the planetary community)| part 1: </title> <address> Phobos. New Yorker, </address> <pages> pages 50-84, </pages> <month> June 11, </month> <year> 1990. </year>
Reference: [Cou93] <author> Costas Courcoubetis, </author> <title> editor. Computer-Aided Verification, </title> <booktitle> CAV '93, volume 697 of Lecture Notes in Computer Science, </booktitle> <address> Elounda, Greece, June/July 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference: [CP85] <author> W. J. Cullyer and C. H. Pygott. </author> <title> Hardware proofs using LCF-LSM and ELLA. </title> <type> Memorandum 3832, </type> <institution> Royal Signals and Radar Establishment, </institution> <month> September </month> <year> 1985. </year>
Reference: [Cra92] <author> R. H. Crane. </author> <title> Experience gained in the production of licensable safety-critical software for Darlington NGS. </title> <booktitle> In EPRI Workshop on Methodologies for Cost-Effective, Reliable Software Verification and Validation, </booktitle> <pages> pages 5-1 to 5-37, </pages> <address> Palo Alto, CA, </address> <month> January </month> <year> 1992. </year> <title> Electric Power Research Institute (EPRI). (Meeting held in Chicago, </title> <note> August, 1991; proceedings published as EPRI TR-100294). </note>
Reference: [Cri84] <author> Flaviu Cristian. </author> <title> Correct and robust programs. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-10(3):163-174, </volume> <month> March </month> <year> 1984. </year>
Reference-contexts: Techniques of this kind can be considered a very strong form of typechecking; they were pioneered by German [Ger78] and are now available in commercial tools [Egg90]. Best and Cristian give a formal treatment of more general kinds of exceptions <ref> [BC81, Cri84] </ref>. think about their software from a novel perspective and has the unexpected side-effect of leading them to discover faults that would otherwise have gone unnoticed at that stage. 34 For example, the onerous unit test criterion required by DO-178B called Modified Condition/Decision Coverage (MC/DC) is intended to exercise all
Reference: [Cri89] <author> Flaviu Cristian. </author> <title> Exception handling. </title> <editor> In T. Anderson, editor, </editor> <title> Dependability of Resilient Computers. </title> <publisher> Blackwell Scientific Publications, </publisher> <year> 1989. </year>
Reference: [Cul88] <author> W. J. Cullyer. </author> <title> Implementing safety critical systems: The viper microprocessor. </title> <booktitle> In Birtwistle and Subrahmanyam [BS88], </booktitle> <pages> pages 1-26. </pages>
Reference: [CV91] <author> Vinod Chandra and M. R. Verma. </author> <title> A fail-safe interlocking system for railways. </title> <journal> IEEE Design & Test of Computers, </journal> <volume> 8(1) </volume> <pages> 58-66, </pages> <month> March </month> <year> 1991. </year>
Reference: [Dav92] <author> Alan M. Davis. </author> <title> Why industry often says `no thanks' to research. </title> <journal> IEEE Software, </journal> <volume> 9(6) </volume> <pages> 97-99, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: Good accounts of the general problems of technology transfer are given by Davis <ref> [Dav92] </ref> and by Potts [Pot93]. Systems engineering for computer-based systems is the focus of a recent study group report [WAH + 93].
Reference: [dB72] <author> N. G. de Bruijn. </author> <title> Lambda calculus notation with nameless dummies, a tool for automatic formula manipulation, with application to the Church-Rosser theorem. </title> <journal> Indagationes Mathematica, </journal> <volume> 34(5) </volume> <pages> 381-392, </pages> <year> 1972. </year> <note> (Journal published by North-Holland, </note> <editor> supercedes Koninklijke Nederlandse Akademie van Wetenschappen, </editor> <publisher> Series A). </publisher>
Reference: [dB91] <author> N. G. de Bruijn. </author> <title> Checking mathematics with computer assistance. </title> <journal> Notices of the American Mathematical Society, </journal> <volume> 38(1) </volume> <pages> 8-16, </pages> <month> January </month> <year> 1991. </year> <note> 190 Bibliography </note>
Reference: [DB92] <author> Ben L. Di Vito and Ricky W. Butler. </author> <title> Formal techniques for synchronized fault-tolerant systems. </title> <editor> In Landwehr et al. </editor> <booktitle> [LRS92], </booktitle> <pages> pages 163-188. </pages>
Reference: [DD77a] <author> D. E. Denning and P. J. Denning. </author> <title> Certification of programs for secure information flow. </title> <journal> Communications of the ACM, </journal> <volume> 20(7) </volume> <pages> 504-513, </pages> <month> July </month> <year> 1977. </year>
Reference: [DD77b] <author> D. E. Denning and P. J. Denning. </author> <title> Certification of programs for secure information flow. </title> <journal> Communications of the ACM, </journal> <volume> 20(7) </volume> <pages> 504-513, </pages> <month> July </month> <year> 1977. </year>
Reference: [DDHY92] <author> David L. Dill, Andreas J. Drexler, Alan J. Hu, and C. Han Yang. </author> <title> Protocol verification as a hardware design aid. </title> <booktitle> In 1992 IEEE International Conference on Computer Design: VLSI in Computers and Processors, </booktitle> <pages> pages 522-525. </pages> <publisher> IEEE Computer Society, </publisher> <address> 1992. Cambridge, MA, </address> <month> October 11-14. </month>
Reference: [Ded63] <author> Richard Dedekind. </author> <title> Essays on the Theory of Numbers. </title> <publisher> Dover Publications, Inc., </publisher> <address> New York, NY, </address> <year> 1963. </year> <note> Reprint of the 1901 Translation by Wooster Woodruff Beman; the original essay was written 1887. </note>
Reference-contexts: The metafunctions of the Boyer-Moore prover [BM81] have this character. "Reflective" theorem provers, a research topic, support reasoning about their own proof procedures and can be extended in quite general ways. 3.6 Conclusion "In science, nothing capable of proof ought to be accepted without proof." <ref> [Ded63, page 31] </ref> "The virtue of a logical proof is not that it compels belief but that it suggests doubts." [Lak76, page 48] This report has covered a lot of material, and I have tried to present it in a balanced and neutral manner.
Reference: [DF90] <author> Janet R. Dunham and George B. Finelli. </author> <title> Real-time software failure characterization. </title> <booktitle> In COMP [COMP90], </booktitle> <pages> pages 39-45. </pages>
Reference-contexts: As with the independence assumption in design diversity, experimental evidence suggests that this property cannot simply be assumed (there is some evidence for "error crystals" <ref> [DF90] </ref>) and it must therefore be measured.
Reference: [DG90] <author> Norman Delisle and David Garlan. </author> <title> A formal specification of an oscilloscope. </title> <journal> IEEE Software, </journal> <volume> 7(5) </volume> <pages> 29-36, </pages> <month> September </month> <year> 1990. </year>
Reference: [DG93] <author> B. Terry Devlin and R. David Girts. </author> <title> MD-11 automatic flight system. </title> <journal> IEEE Aerospace and Electronic Systems Magazine, </journal> <volume> 8(3) </volume> <pages> 53-56, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: spin-up and horizontal stabilizer in motion detection; automatic throttle and engine trim via the FADEC; takeoff, cruise, and Cat II approach autopilot and flight director; in flight maintenance monitoring and ground maintenance functions interfacing with the central fault display system; annunciation, warning, and alert interfaces with the electronic instrumentation system" <ref> [DG93] </ref> (the perplexing punctuation is in the original). 22 It is not only that the evidence may be considered proprietary and is therefore unpublished, it is not clear that some of the most vital data are even collected.
Reference: [DGK + 90] <author> Ben Di Vito, Cristi Garvey, Davis Kwong, Alex Murray, Jane Solomon, and Amy Wu. </author> <title> The Deductive Theory Manager: A knowledge based system for formal verification. </title> <booktitle> In Proceedings of the Symposium on Research in Security and Privacy, </booktitle> <pages> pages 306-318, </pages> <address> Oakland, CA, </address> <month> May </month> <year> 1990. </year> <journal> IEEE Computer Society. </journal>
Reference: [DH90] <author> R. W. Dennis and A. D. </author> <title> Hills. A fault tolerant fly by wire system for maintenance free applications. </title> <booktitle> In 9th AIAA/IEEE Digital Avionics Systems Conference, </booktitle> <pages> pages 11-20, </pages> <address> Virginia Beach, VA, </address> <month> October </month> <year> 1990. </year> <institution> The Institute of Electrical and Electronics Engineers. </institution>
Reference-contexts: One architecture developed to this requirement uses asynchronously operating triple-redundant lanes (each employing different hardware and programming languages 20 ) within each of three synchronous channels <ref> [DH90] </ref>. Such elaborate architectures bear little resemblance to a dual-redundant FADEC. Elsewhere, there seems interest in shaving redundancy from quad to triple [SM92]. <p> These are the first commercial aircraft controlled solely by a fault-tolerant, diverse computing system. Strangely enough this development owes little to academia" [Kir89]. The GEC architecture <ref> [DH90] </ref> for the primary flight computers of the Boeing 777 is similarly without academic forbears. An exception to this general rule is Allied Signal's MAFT architec ture [KWFT88], which was proposed for some of the design studies in the 7j7, 767x series. 3.4.
Reference: [DHB91] <author> Flemming Damm, Bo Stig Hansen, and Hans Bruun. </author> <title> On typechecking in VDM and related consistency issues. </title> <booktitle> In Prehn and Toetenel [PT91], </booktitle> <pages> pages 45-62. Bibliography 191 </pages>
Reference: [Dij76] <author> E. W. Dijkstra. </author> <title> A Discipline of Programming. </title> <publisher> Prentice-Hall, </publisher> <address> Engle-wood Cliffs, NJ, </address> <year> 1976. </year>
Reference: [Dij82] <author> Edsger W. Dijkstra. EWD539: Mathematics inc., </author> <title> a private letter from its chairman. In Selected Writings on Computing: A Personal Perspective, </title> <booktitle> Texts and Monographs in Computer Science, </booktitle> <pages> pages 184-187. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1982. </year>
Reference-contexts: Chairman of Mathematics Inc., such as "our Proof of the Riemann Hypothesis has been brought into the field, contrary to the advice of our marketing manager who felt it still required too much maintenance: : : at the end of March, we transferred fifty mathematicians from Production to Field Support" <ref> [Dij82] </ref>. 41 Resolution provers, for example, perform exhaustive search. Even these require human control, in the form of selecting strategies, and assigning values to various parameters. 174 Chapter 3. Formal Methods and Digital Systems Validation Proof checkers that operate interactively are generally the easiest for users to understand.
Reference: [Dij89] <author> Edsger W. Dijkstra. </author> <title> On the cruelty of really teaching computer science. </title> <journal> Communications of the ACM, </journal> <volume> 32(12) </volume> <pages> 1398-1404, </pages> <note> Decem-ber 1989. Comments by seven colleagues follow Dijkstra's paper on pp. 1405-1414. </note>
Reference: [DLP79] <author> Richard A. De Millo, Richard J. Lipton, and Alan J. Perlis. </author> <title> Social processes and proofs of theorems and programs. </title> <journal> Communications of the ACM, </journal> <volume> 22(5) </volume> <pages> 271-280, </pages> <month> May </month> <year> 1979. </year>
Reference: [dLSA92] <author> R. de Lemos, A. Saeed, and T. Anderson. </author> <title> A train set as a case study for the requirements analysis of safety-critical systems. </title> <journal> Computer Journal, </journal> <volume> 35(1) </volume> <pages> 30-40, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: Formally stated assumptions and constraints, on the other hand, could capture general properties, and attempts to prove the conjecture assumptions plus requirements specification imply constraints should force systematic enumeration of all the significant scenarios. Work by de Lemos, Saeed, and Anderson <ref> [dLSA92] </ref> illustrates some steps in this direction. In addition to systematic exploration of requirements specification in relation to its assumptions and constraints, a suitably detailed specification can be scrutinized with respect to a number of consistency and completeness criteria.
Reference: [DoD84] <author> Military Standard MIL-STD-882B: </author> <title> System Safety Program Requirements. </title> <institution> Department of Defense, </institution> <address> Washington, DC, </address> <month> March </month> <year> 1984. </year> <note> Revised 1 July 1987. </note>
Reference: [DoD85] <institution> Department of Defense Trusted Computer System Evaluation Criteria. Department of Defense, </institution> <month> December </month> <year> 1985. </year> <note> DOD 5200.28-STD (supersedes CSC-STD-001-83). </note>
Reference-contexts: Standards, such as the British Interim Defence Standard 00-55 [MOD91a] and the United States Trusted Systems Evaluation Criteria <ref> [DoD85] </ref>, that mandate use of formal methods for certain classes of systems seem motivated by these beliefs.
Reference: [Dor91] <author> Michael A. Dornheim. </author> <title> X-31 flight tests to explore combat agility to 70 deg. </title> <booktitle> AOA. Aviation Week and Space Technology, </booktitle> <pages> pages 38-41, </pages> <month> March 11, </month> <year> 1991. </year>
Reference-contexts: The air data logic dates back to the mid-1960s and had a divide-by-zero that occurred briefly. This was not a problem in its previous 3.3. Experimental and Historical Data on Assurance, Faults and Failures 135 application, but the X31 flight-control system would not tolerate it." <ref> [Dor91] </ref>. It seems that either a potentially dangerous condition (i.e., divide-by-zero) had been present but undetected in the previous application, or it was known (and known not to be dangerous in that application) but undocumented. In either case, it seems to indicate inadequate assurance.
Reference: [Duk89] <author> Eugene L. </author> <title> Duke. </title> <journal> V&V of flight and mission-critical software. IEEE Software, </journal> <volume> 6(3) </volume> <pages> 39-45, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: "do you consider the requirements are complete?" and it will be necessary to add items such as "do you consider that you have been able to fully comprehend the formal specification?" The assurance that participants fully comprehend a formal specification may be enhanced if the suggestions of Parnas 30 Duke <ref> [Duk89] </ref> documents a methodology used at NASA Dryden that apparently involves development of a working software prototype, extraction of requirements from that prototype, development of fully engineered software to those requirements, and iteration until both software versions and the requirements agree.
Reference: [DV89] <author> Michel Diaz and Chris Vissers. SEDOS: </author> <title> Designing open distributed systems. </title> <journal> IEEE Software, </journal> <volume> 6(6) </volume> <pages> 24-33, </pages> <month> November </month> <year> 1989. </year>
Reference: [Dye92] <author> Michael Dyer. </author> <title> The Cleanroom Approach to Quality Software Development. </title> <publisher> John Wiley and Sons, </publisher> <address> New York, NY, </address> <year> 1992. </year>
Reference-contexts: Formal Methods and Digital Systems Validation Cleanroom methodology. The component comprised 31,000 lines of Fortran and testing revealed a defect rate of 3.3 faults per KSLOC, compared with an SEL average of 6 faults per KSLOC <ref> [Dye92, page 34] </ref>. But although they seem relevant to our concerns, numbers such as these need to be interpreted with care, and on two counts: control and relevance. Before we attribute reductions in defect-rate to specific processes, we need to be sure that all other factors are adequately controlled. <p> The Cleanroom methodology follows a very rigorous version of this approach: developers must provide correctness arguments for their code and are not allowed to run it; there are no unit tests, and integration tests use statistical sampling methods <ref> [Dye92] </ref>. 33 33 In order to support statistical testing, Cleanroom developers have to document the expected "operational profile" of their software. Apparently, this extra requirement causes developers to 3.4.
Reference: [ECK + 91] <author> Dave E. Eckhardt, Alper K. Caglayan, John C. Knight, Larry D. Lee, David F. McAllister, Mladen A. Vouk, and John P. J. Kelly. </author> <title> An experimental evaluation of software redundancy as a strategy for 192 Bibliography improving reliability. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(7) </volume> <pages> 692-702, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: For the N -Version technique to be effective, failures of the separate software versions must be almost independent of each other. 11 The difficulty is that since independence cannot be assumed (experiments indicate that coincident failures of different versions are not negligible <ref> [ECK + 91, KL86] </ref>, and theoretical studies suggest that independent faults can produce correlated failures [EL85]|though the correlation can be negative [LM89]), the probability of coincident failures must be measured.
Reference: [Egg90] <author> Paul Eggert. </author> <title> Toward special-purpose program verification. </title> <editor> In Mark Moriconi, editor, </editor> <booktitle> ACM Sigsoft International Workshop on Formal Methods in Software Development, </booktitle> <pages> pages 25-29, </pages> <address> Napa, CA, </address> <month> May </month> <year> 1990. </year> <booktitle> Published as ACM Software Engineering Notes, </booktitle> <volume> Vol. 15, No. 4, </volume> <month> Sept. </month> <year> 1990. </year>
Reference-contexts: Techniques of this kind can be considered a very strong form of typechecking; they were pioneered by German [Ger78] and are now available in commercial tools <ref> [Egg90] </ref>.
Reference: [EH93] <author> Carl T. Eichenlaub and C. Douglas Harper. </author> <title> Using Penelope to assess the correctness of NASA Ada software: A demonstration of formal methods as a counterpart to testing. </title> <type> NASA Contractor Report 4509, </type> <institution> NASA Langley Research Center, Hampton, VA, </institution> <month> May </month> <year> 1993. </year> <title> (Work performed by ORA Corporation). </title>
Reference: [EKM + 93] <author> Marcin Engel, Marcin Kubica, Jan Madey, David Lorge Parnas, An-ders P. Ravn, and A. John van Schouwen. </author> <title> A formal approach to computer systems requirements documentation. </title> <editor> In Robert L. Gross-man, Anil Nerode, Anders P. Ravn, and Hans Rischel, editors, </editor> <booktitle> Hybrid Systems, </booktitle> <pages> pages 452-474, </pages> <address> New York, NY, </address> <year> 1993. </year> <booktitle> Volume 736 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: by Parnas and colleagues|variously known as the "A7" or "Software Cost Reduction" (SCR) method|seems most suitable. (A recent description of the A7 method is given by van Schouwen [vS90, vSPM93]; an example, in which a duration calculus [Cha93] is used to support the method, is given by Engel et al. <ref> [EKM + 93] </ref>.) A more comprehensive approach, developed specifically for aerospace applications and combining object-oriented techniques with those of A7, is the "Consortium Requirements Engineering" (CoRE) method of the Software Productivity Consortium. (This method is currently being applied to Lockheed's C-130J (Hercules) avionics upgrade.) I suggest that formal specifications and formal
Reference: [EL85] <author> Dave E. Eckhardt, Jr. and Larry D. Lee. </author> <title> A theoretical basis for the analysis of multiversion software subject to coincident errors. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-11(12):1511-1517, </volume> <month> Decem-ber </month> <year> 1985. </year>
Reference: [End93] <author> Albert Endres. </author> <title> Lessons learned in an industrial software lab. </title> <journal> IEEE Software, </journal> <volume> 10(5) </volume> <pages> 58-61, </pages> <month> September </month> <year> 1993. </year>
Reference: [FAA-F] <institution> Fault-tolerant software. </institution> <note> Chapter 9 of [FAA89]. </note>
Reference: [FAA-L] <institution> Latent faults. </institution> <note> Chapter 10 of [FAA89]. </note>
Reference: [FAA88] <institution> System Design and Analysis. Federal Aviation Administration, </institution> <month> June 21, </month> <year> 1988. </year> <title> Advisory Circular 25.1309-1A. </title>
Reference-contexts: In particular, system failures that could lead to a catastrophic failure condition must be "extremely improbable," which means that they must be "so unlikely that they are not anticipated to occur during the entire operational life of all airplanes of one type" <ref> [FAA88, paragraph 9.e (3)] </ref>. "When using quantitative analyses: : : numerical probabilities: : : on the order of 10 9 per flight-hour 1 may be used: : : as aids to engineering judgment: : : to: : : help determine compliance : : : with the requirement for extremely improbable failure <p> 9.e (3)]. "When using quantitative analyses: : : numerical probabilities: : : on the order of 10 9 per flight-hour 1 may be used: : : as aids to engineering judgment: : : to: : : help determine compliance : : : with the requirement for extremely improbable failure conditions" <ref> [FAA88, paragraph 10.b] </ref>. 2 Clearly, software components of systems that have the potential for catastrophic failure conditions must have low probabilities of anomalous behaviors, but this does not mean that the software need have a reliability of 1 10 9 : it may have much lower reliability provided its failures do <p> how such assurances can be provided for software (and custom digital devices such as ASICs, which have similar characteristics to software), and examine the potential contributions of formal methods. 3.1 Background to Assurance Requirements and considerations for certification of software in airborne systems are described in FAA Advisory Circular 25.1309-1A <ref> [FAA88] </ref> and in DO-178B [RTCA92], which is incorporated by reference into the former document (see [FAA93], part of which is reproduced in Section 3.2). However, in order to best understand the potential contributions of formal methods, it is first necessary to examine the intellectual basis for assurance of safety-critical software. <p> The requirements and documents of the JAA parallel those of the FAA. In particular, the material just quoted from FAA Advisory Circular 25.1309A <ref> [FAA88] </ref> is also present in the JAA "Advisory Material-Joint" document AMJ 25.1309. 3.1. Background to Assurance 109 Failure includes the possibility of performing functions incorrectly, or performing unintended functions, as well as the loss of intended functions. <p> tests under conditions of single and multiple failures of components that 5 Nuclear protection systems require a probability of failure on demand of less than 10 4 [LS93]; failures that could contribute to a major failure condition in an aircraft require a failure rate less than 10 5 per hour <ref> [FAA88, paragraph 10.b (2)] </ref>; the Advanced Automation System for Air Traffic Control has a requirement for less than 3 seconds unavailability per year (about 10 7 ) [CDD90]; failures that could contribute to a catastrophic failure condition in an aircraft require a failure rate less than 10 9 per hour [FAA88, <p> [FAA88, paragraph 10.b (2)]; the Advanced Automation System for Air Traffic Control has a requirement for less than 3 seconds unavailability per year (about 10 7 ) [CDD90]; failures that could contribute to a catastrophic failure condition in an aircraft require a failure rate less than 10 9 per hour <ref> [FAA88, paragraph 10.b (3)] </ref>; controllers for urban trains must have failure rates lower than 10 12 [LS93]. 6 The key issue here is the extent to which the system accumulates state; systems that reinitialize themselves periodically can be tested using shorter trajectories than those that must run for long periods. <p> state explicitly that probabilities are not assigned or assessed for software that is certified by examination of its development processes: ": : : it is not feasible to assess the number or kinds of software errors, if any, that may remain after the completion of system design, development, and test" <ref> [FAA88, paragraph 7.i] </ref>. "Development of software to a software level does not imply the assignment of a failure rate for that software. <p> Up to the present, no airplane crash has been attributed to a software problem. However, "service experience showing that the failure mode has not yet occurred may be extensive, but it can never be enough" <ref> [FAA88, paragraph 7.g] </ref>. 19 Petroski's book subtitled "the role of failure in successful design" [Pet85] is interesting in this regard.
Reference: [FAA89] <institution> Digital Systems Validation Handbook-Volume II. Federal Aviation Administration Technical Center, Atlantic City, NJ, </institution> <month> February </month> <year> 1989. </year> <month> DOT/FAA/CT-88/10. </month>
Reference: [FAA93] <institution> RTCA Inc., Document RTCA/DO-178B. Federal Aviation Administration, </institution> <month> January 11, </month> <year> 1993. </year> <title> Advisory Circular 20-115B. Bibliography 193 </title>
Reference-contexts: which have similar characteristics to software), and examine the potential contributions of formal methods. 3.1 Background to Assurance Requirements and considerations for certification of software in airborne systems are described in FAA Advisory Circular 25.1309-1A [FAA88] and in DO-178B [RTCA92], which is incorporated by reference into the former document (see <ref> [FAA93] </ref>, part of which is reproduced in Section 3.2). However, in order to best understand the potential contributions of formal methods, it is first necessary to examine the intellectual basis for assurance of safety-critical software. The general approach to development and certification of safety-critical systems is grounded in hazard analysis. <p> The FAA may publish advisory circulars for specific FAR's (Federal Aviation Regulations) outlining the relationship between the criticality of the software-based systems and the appropriate `software level' as defined in RTCA/DO-178B. Those may differ from and will take precedence over the application of RTCA/DO-178B." <ref> [FAA93] </ref> DO-178B is quite long (over 90 pages when the appendices and index are included) and densely packed with information. Here, I simply give an overview and explain how formal methods are admitted into its guidelines. Where I quote material from DO-178B, I present it in italics.
Reference: [Fag76] <author> Michael E. Fagan. </author> <title> Design and code inspections to reduce errors in program development. </title> <journal> IBM Systems Journal, </journal> <volume> 15(3) </volume> <pages> 182-211, </pages> <month> March </month> <year> 1976. </year>
Reference: [Fag86] <author> Michael E. Fagan. </author> <title> Advances in software inspection. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-12(7):744-751, </volume> <month> July </month> <year> 1986. </year>
Reference: [Fai85] <author> Richard E. Fairley. </author> <title> Software Engineering Concepts. </title> <publisher> McGraw-Hill, </publisher> <address> New York, NY, </address> <year> 1985. </year>
Reference: [FB92] <editor> John H. Fielder and Douglas Birsch, editors. </editor> <title> The DC-10 Case: A Case Study in Applied Ethics, </title> <institution> Technology, and Society. State University of New York Press, </institution> <year> 1992. </year>
Reference: [FEG92] <author> Bob Fields and Morten Elvang-Gtransson. </author> <title> A VDM case study in mural. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 18(4) </volume> <pages> 279-295, </pages> <month> April </month> <year> 1992. </year>
Reference: [Fei80] <author> R. J. Feiertag. </author> <title> A technique for proving specifications are multilevel secure. </title> <type> Technical Report CSL-109, </type> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> January </month> <year> 1980. </year>
Reference: [Fen93] <author> Norman Fenton. </author> <title> How effective are software engineering methods? Journal of Systems and Software, </title> <booktitle> 22 </booktitle> <pages> 141-146, </pages> <year> 1993. </year>
Reference-contexts: For example, Vessey and Weber examined the empirical evidence in support of structured programming and found the results to be problematical and "a manifestation of poor theory, poor hypotheses, and poor methodology" [VW84, page 398]. Fenton <ref> [Fen93] </ref> is similarly critical of data cited in support of formal methods (including Cleanroom)|recall Section 2.7. Leaving aside the question of experimental controls, we must also question the relevance to safety-critical systems of much of the data cited in support of formal methods.
Reference: [Fet88] <author> James H. </author> <title> Fetzer. Program verification: The very idea. </title> <journal> Communications of the ACM, </journal> <volume> 31(9) </volume> <pages> 1048-1063, </pages> <month> September </month> <year> 1988. </year>
Reference: [FGJM85] <author> Kokichi Futatsugi, Joseph Goguen, Jean-Pierre Jouannaud, and Jose Meseguer. </author> <title> Principles of OBJ2. </title> <editor> In Brian K. Reid, editor, </editor> <booktitle> 12th ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 52-66. </pages> <institution> Association for Computing Machinery, </institution> <year> 1985. </year>
Reference-contexts: Specifying these kinds of constraints can either be done directly, by attaching assumptions to the formal parameters that must be discharged whenever the module is instantiated, or by allowing modules to be parameterized by theories|OBJ <ref> [FGJM85] </ref> does this, and more elaborate ideas are discussed in the language proposal Clear [BG77]. * Does the language have a built-in model of computation? 166 Chapter 3. Formal Methods and Digital Systems Validation In most applications, formal methods are used to reason about computational processes.
Reference: [FGT93] <author> William M. Farmer, Joshua D. Guttman, and F. Javier Thayer. IMPS: </author> <title> An interactive mathematical proof system. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 11(2) </volume> <pages> 213-248, </pages> <month> October </month> <year> 1993. </year>
Reference: [Flo67] <author> R. W. Floyd. </author> <title> Assigning meanings to programs. </title> <editor> In J. T. Schwartz, editor, </editor> <booktitle> Mathematical Aspects of Computer Science, </booktitle> <pages> pages 19-32, </pages> <address> Providence, RI, 1967. </address> <publisher> American Mathematical Society. </publisher>
Reference: [FLR77] <author> R. J. Feiertag, K. N. Levitt, and L. Robinson. </author> <title> Proving multilevel security of a system design. </title> <booktitle> In Sixth ACM Symposium on Operating System Principles, </booktitle> <pages> pages 57-65, </pages> <month> November </month> <year> 1977. </year> <note> 194 Bibliography </note>
Reference: [Fre92] <author> Heinz H. Frey, </author> <title> editor. Safety of Computer Control Systems (SAFE-COMP '92), </title> <address> Zurich, Switzerland, </address> <month> October </month> <year> 1992. </year> <title> International Federation of Automatic Control. </title>
Reference: [Fro85] <author> Robert A. Frosch. </author> <title> Getting it all under control. </title> <journal> IEEE Control Systems Magazine, </journal> <volume> 5(1) </volume> <pages> 3-8, </pages> <month> February </month> <year> 1985. </year> <title> Keynote speech to the 1984 American Control Conference. </title>
Reference-contexts: I must remind you, however, that disaster does not occur in the mean. Disaster always occurs in the variance. That's where the problem is: where something unanticipated and unanticipatable happens." From a speech by former NASA Administrator Robert Frosch <ref> [Fro85] </ref>. 107 108 Chapter 3. Formal Methods and Digital Systems Validation The more severe classes of aircraft failure conditions must be extremely rare.
Reference: [GAO92a] <institution> Embedded Computer Systems: </institution> <note> Significant Software Problems On C-17 Must Be Addressed. </note> <institution> United States General Accounting Office, </institution> <address> Washington, DC, </address> <month> May </month> <year> 1992. </year> <month> GAO/IMTEC-92-48. </month>
Reference-contexts: For an account of software engineering and management on the C17, see <ref> [GAO92a] </ref>. One of the purposes of flight test is to uncover problems, and so the discovery of those just described can be considered a vindication of the value of flight test.
Reference: [GAO92b] <author> Patriot Missile Defense: </author> <title> Software Problem Led to System Failure at Dhahran, </title> <type> Saudi Arabia. </type> <institution> United States General Accounting Office, </institution> <address> Washington, DC, </address> <month> February </month> <year> 1992. </year> <month> GAO/IMTEC-92-26. </month>
Reference-contexts: For example, the clock-drift error that led to failure of Patriot missiles <ref> [GAO92b] </ref> required many hours of continuous operation to manifest itself in a way that was externally detectable. 112 Chapter 3. Formal Methods and Digital Systems Validation interact with the system under test. <p> The conversion "results in a loss of precision causing a less accurate time calculation. The effect of this inaccuracy on the range gate's [i.e., target tracking] calculation is directly proportional to the target's velocity and the length of time the system has been running" <ref> [GAO92b] </ref>. As before, a common feature of these examples is that the faults arose in the context of redundancy management and timing-dependent coordination.
Reference: [GAO93] <author> Aircraft Certification: </author> <title> New FAA Approach Needed to Meet Challenges of Advanced Technology. United States General Accounting Office, </title> <address> Washington, DC, </address> <month> September </month> <year> 1993. </year> <month> GAO/RCED-93-155. </month>
Reference-contexts: delegation to DERs can be even greater in some software systems|for example, approval of the entire 747-400 flight management system was delegated to Boeing DERs because FAA staff "were not sufficiently familiar with the system to provide meaningful inputs to the testing requirements or to verify compliance with regulatory standards" <ref> [GAO93, pp. 17, 19, 20, 27] </ref>. For aircraft imported into the United States, the FAA relies on foreign authorities to conduct many of the necessary certification activities, but is responsible for certifying that the aircraft meet its requirements. 120 Chapter 3.
Reference: [Gar81] <author> John R. Garman. </author> <title> The "bug" heard 'round the world. </title> <journal> ACM Software Engineering Notes, </journal> <volume> 6(5) </volume> <pages> 3-10, </pages> <month> October </month> <year> 1981. </year>
Reference-contexts: 9 hours. * The first attempt to launch the Space Shuttle (STS-1) failed because the fifth (backup) on-board computer could not be synchronized with the main quad: "there was a very small, very improbable, very intricate, and very old mistake in the initialization logic of the primary avionics software system" <ref> [Gar81] </ref>. * Voyager spacecraft suffered 42 SEUs in the intense radiation surrounding Jupiter [Wil90]. The clocks lost synchronization and skewed 8 seconds, causing some scientific data to be lost.
Reference: [GAS89] <author> Donald I. Good, Robert L. Akers, and Lawrence M. Smith. </author> <title> Report on Gypsy 2.05. </title> <type> Technical Report 1, </type> <institution> Computational Logic Inc., Austin, TX, </institution> <month> January </month> <year> 1989. </year>
Reference: [GCR93] <author> Susan Gerhart, Dan Craigen, and Ted Ralston. </author> <title> Observations on industrial practice using formal methods. </title> <booktitle> In 15th International Conference on Software Engineering, </booktitle> <pages> pages 24-33, </pages> <address> Baltimore, MD, </address> <month> May </month> <year> 1993. </year> <journal> IEEE Computer Society. </journal>
Reference: [Ger78] <author> S. </author> <title> German. Automating proofs of the absence of common runtime errors. </title> <booktitle> In Proceedings, 5th ACM Symposium on the Principles of Programming Languages, </booktitle> <pages> pages 105-118, </pages> <address> Tucson, AZ, </address> <month> January </month> <year> 1978. </year>
Reference-contexts: Techniques of this kind can be considered a very strong form of typechecking; they were pioneered by German <ref> [Ger78] </ref> and are now available in commercial tools [Egg90].
Reference: [GH78] <author> John V. Guttag and James J. Horning. </author> <title> The algebraic specification of abstract data types. </title> <journal> Acta Informatica, </journal> <volume> 10(1) </volume> <pages> 27-52, </pages> <year> 1978. </year>
Reference: [GH80] <author> John Guttag and J. J. Horning. </author> <title> Formal specification as a design tool. </title> <booktitle> In 7th ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 251-261, </pages> <address> Las Vegas, NV, </address> <month> January </month> <year> 1980. </year>
Reference: [GH90] <author> G. Guiho and C. </author> <title> Hennebert. </title> <booktitle> SACEM software validation. In 12th International Conference on Software Engineering, </booktitle> <pages> pages 186-191, </pages> <address> Nice, France, </address> <month> March </month> <year> 1990. </year> <journal> IEEE Computer Society. </journal> <volume> Bibliography 195 </volume>
Reference: [GH93a] <author> Hubert Garavel and Rene-Pierre Hautbois. </author> <title> An experience with the LOTOS formal description technique on the flight warning computer of the Airbus 330/340 aircrafts. </title> <booktitle> In First AMAST International Workshop on Real-Time Systems, </booktitle> <address> Iowa City, IA, </address> <month> November </month> <year> 1993. </year> <note> Springer-Verlag Workshops in Computing. (To appear). </note>
Reference-contexts: Elsewhere, there seems interest in shaving redundancy from quad to triple [SM92]. Previously isolated functions are being integrated, 21 and the sheer quantity of onboard software is much greater than previously (e.g., 20 Mbytes in the case of the Airbus A340 <ref> [GH93a] </ref>). All of these developments raise the scale of the challenge, and diminish the relevance of earlier projects. <p> 3 applications (i.e., those involving mechanized proof checking), it will be necessary to match the capabilities of the tools used to the requirements of the problem domain: it will seldom be productive to use a process-algebra such as Lotos for the description of sequential programs and low-level data structures (recall <ref> [GH93a] </ref>), nor is a program verification system likely to be the best choice for abstract design specifications (see [SB89]). The intended analyses must also be considered, and the methods and tools chosen appropriately.
Reference: [GH93b] <author> John V. Guttag and James J. Horning with S. J. Garland, K. D. Jones, A. Modet, and J. M. Wing. </author> <title> Larch: Languages and Tools for Formal Specification. Texts and Monographs in Computer Science. </title> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: [GM93] <author> M. J. C. Gordon and T. F. Melham, </author> <title> editors. Introduction to HOL: </title>
References-found: 156

