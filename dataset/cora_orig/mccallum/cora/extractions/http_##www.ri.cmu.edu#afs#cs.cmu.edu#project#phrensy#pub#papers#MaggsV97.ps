URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/project/phrensy/pub/papers/MaggsV97.ps
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/bmm/public/www/MaggsV97.html
Root-URL: 
Email: bmm@cs.cmu.edu  voecking@uni-paderborn.de  
Title: Improved Routing and Sorting on Multibutterflies  
Author: Bruce M. Maggs Berthold Vocking 
Address: 5000 Forbes Avenue Pittsburgh, PA 15213  33095 Paderborn, Germany  
Affiliation: School of Computer Science Carnegie Mellon University  Dept. of Mathematics and Computer Science, and Heinz Nixdorf Institute University of Paderborn  
Abstract: This paper shows that an N-node AKS network (as described by Paterson) can be embedded in a 3N 2 -node degree-8 multibutterfly network with load 1, congestion 1, and dilation 2. The result has several implications, including the first deterministic algorithms for sorting and finding the median of n log n keys on an n-input multibutterfly in O(log n) time, a work-efficient algorithm for finding the median of n log 2 n log log n keys on an n-input multibutterfly in O(log n log log n) time, and a three-dimensional VLSI layout for the n-input AKS network with volume O(n 3=2 ). While these algorithms are not practical, they provide further evidence of the robustness of multibutterfly networks. We also present a separate, and more practical, deterministic algorithm for routing h relations on an n-input multibutterfly in O(h + log n) time. Previously, only algorithms for solving h one-to-one routing problems were known. Finally, we show that a 2-folded butterfly, whose individual splitters do not exhibit expansion, can emulate a bounded-degree multibutterfly with an (ff; fi) expansion property, for any ff fi &lt; 1=4.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Ajtai, J. Komlos, and E. Szemeredi. </author> <title> Sorting in c log n parallel steps. </title> <journal> Combinatorica, </journal> <volume> 3 </volume> <pages> 1-19, </pages> <year> 1983. </year>
Reference-contexts: 1 Introduction In 1983, Ajtai, Komlos, and Szemeredi devised a network for sorting n keys in O (log n) depth <ref> [1] </ref>. This result was surprising because no improvement in the asymptotic depth of sorting networks had been made since Batcher's invention of the O (log 2 n)-depth bitonic sorting network 15 years earlier [4].
Reference: [2] <author> S. Arora, F. T. Leighton, and B. M. Maggs. </author> <title> On-line algorithms for path selection in a non-blocking network. </title> <journal> SIAM Journal on Computing, </journal> <volume> 25(3) </volume> <pages> 600-625, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: Arora, Leighton, and Maggs termed two back-to-back multibutterflies a multi-Benes network, and showed that not only is a multi-Benes network nonblocking, but any set of new paths can be established in this network in O (log n) steps, even if many requests for new paths are made simultaneously <ref> [2] </ref>. The algorithms for reconfiguring a multibutterfly with faults and for establishing disjoint paths were later improved in [15] and [30], respectively. 1.1 Our results In this paper, we show that multibutterfly networks are at least as powerful as the AKS sorting network.
Reference: [3] <author> L. A. Bassalygo and M. S. Pinsker. </author> <title> Complexity of an optimum nonblocking switching network without reconnections. </title> <journal> Problems of Information Transmission, </journal> <volume> 9 </volume> <pages> 64-66, </pages> <year> 1974. </year>
Reference-contexts: In the passive fault model, a faulty-comparator can be viewed as having been removed from the network. Another network that incorporates expansion into its structure is the multibutterfly. The basic structure of this network was introduced by Bassalygo and Pinsker <ref> [3] </ref>, who showed that two back-to-back multibutterflies form an O (log n)-depth nonblocking network. Here n is the number of input and output terminals of the network.
Reference: [4] <author> K. Batcher. </author> <title> Sorting networks and their applications. </title> <booktitle> In Proceedings of the AFIPS Spring Joint Computing Conference, </booktitle> <volume> volume 32, </volume> <pages> pages 307-314, </pages> <year> 1968. </year>
Reference-contexts: This result was surprising because no improvement in the asymptotic depth of sorting networks had been made since Batcher's invention of the O (log 2 n)-depth bitonic sorting network 15 years earlier <ref> [4] </ref>. Indeed, the difficulty of improving on Batcher's construction led Knuth to conjecture that there was no sorting network with depth O (log n) [18, p. 243]. The AKS sorting network differed from previous constructions in one crucial aspect: it incorporated expansion into its structure. Expansion is a graph-theoretic notion. <p> The size of F L and F R is m and the size of CL and CR is (1 ), e.g, = 1=8. The sorters return the m input elements in sorted order. It is convenient to implement the sorters as Batcher's bitonic sorting network <ref> [4] </ref>. All sorters have constant width, so they can be implemented in constant height h.
Reference: [5] <author> P. Berthome, A. Ferreira, B. M. Maggs, S. Perennes, and C. G. Plaxton. </author> <title> Sorting-based selection algorithms for hypercubic networks. </title> <booktitle> In Proceedings of the 7th International Parallel Processing Symposium, </booktitle> <pages> pages 89-95, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: Prior to this work, the fastest deterministic selection algorithm for multibutterflies was the algorithm of Berthome, Ferreira, Maggs, Perennes, and Plaxton <ref> [5] </ref>. This algorithm selects the kth largest element from among N elements on an N -node butterfly (or any other hypercubic network) in O (log N log fl N ) time. Like the Sharesort algorithm, this algorithm does not make use of expansion when run on a multibutterfly.
Reference: [6] <author> G. Bilardi and F. P. Preparata. </author> <title> A minimum VLSI network for O(log N ) time sorting. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-34(4):336-343, </volume> <month> April </month> <year> 1985. </year>
Reference-contexts: An n-input multibutterfly network can be laid out in two dimensions with area O (n 2 ), and in three dimensions with volume O (n 3=2 ), and these bounds are tight. The two-dimensional layout area of the AKS network was known before <ref> [6, 7] </ref>, but the three-dimensional layout is new. We also present two deterministic algorithms for solving h-to-one routing problems on an n-input butterfly in O (h + log n) time. One applies when h is known, and the other when it is not.
Reference: [7] <author> G. Bilardi and F. P. Preparata. </author> <title> The VLSI optimality of the AKS sorting network. </title> <journal> Information Processing Letters, </journal> <volume> 20(2) </volume> <pages> 55-59, </pages> <month> February </month> <year> 1985. </year>
Reference-contexts: An n-input multibutterfly network can be laid out in two dimensions with area O (n 2 ), and in three dimensions with volume O (n 3=2 ), and these bounds are tight. The two-dimensional layout area of the AKS network was known before <ref> [6, 7] </ref>, but the three-dimensional layout is new. We also present two deterministic algorithms for solving h-to-one routing problems on an n-input butterfly in O (h + log n) time. One applies when h is known, and the other when it is not.
Reference: [8] <author> M. Blum, R. W. Floyd, V. R. Pratt, R. L. Rivest, and R. E. Tarjan. </author> <title> Time bounds for selection. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 7 </volume> <pages> 448-461, </pages> <year> 1973. </year>
Reference-contexts: Like the Sharesort algorithm, this algorithm does not make use of expansion when run on a multibutterfly. Since the selection problem can be solved in linear time sequentially <ref> [8] </ref>, this algorithm, which performs N log N log fl N work, is not work efficient.
Reference: [9] <author> E. A. Brewer, F. T. Chong, and F. T. Leighton. </author> <title> Scalable expanders: Exploiting hierarchical random wiring. </title> <booktitle> In Proceedings of the 26th Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 144-152, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: Furthermore, simulations show that the running time of the routing algorithm is actually smaller than the O (log N ) upper bound implies [20, 22]. Hence, a case can be made for the practicality of multibutterflies, and several studies have explored their implementation <ref> [9, 10, 13, 14] </ref>. Although no deterministic O (log n)-step sorting algorithm for multibutterflies was previously known, the network was known to have some capabilities that the AKS network was not known to have. For example, Leighton and Maggs showed that multibutterflies are highly fault tolerant [20].
Reference: [10] <author> F. Chong, E. Egozy, and A. DeHon. </author> <title> Fault tolerance and performance of multipath multistage interconnection networks. </title> <editor> In T. F. Knight, Jr. and J. Savage, editors, </editor> <booktitle> Advanced Research in VLSI: Proceedings of the MIT/Brown Conference 1992. </booktitle> <publisher> MIT Press, </publisher> <month> March </month> <year> 1992. </year> <note> To appear. </note>
Reference-contexts: Furthermore, simulations show that the running time of the routing algorithm is actually smaller than the O (log N ) upper bound implies [20, 22]. Hence, a case can be made for the practicality of multibutterflies, and several studies have explored their implementation <ref> [9, 10, 13, 14] </ref>. Although no deterministic O (log n)-step sorting algorithm for multibutterflies was previously known, the network was known to have some capabilities that the AKS network was not known to have. For example, Leighton and Maggs showed that multibutterflies are highly fault tolerant [20].
Reference: [11] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: A nice summary of the state of the art in expander graphs can be found in [17]. One drawback to the AKS network is that the big-O notation hides large constant factors. In contrast, the depth of the bitonic sorting network is (log 2 n)=2 + (log n)=2 <ref> [11, p. 650] </ref>. Some progress has been made in simplifying the AKS network and in improving the constant factors in its depth [28], but for practical values of n, the depth of bitonic sort is much smaller.
Reference: [12] <author> R. E. Cypher and C. G. Plaxton. </author> <title> Deterministic sorting in nearly logarithmic time on the hypercube and related computers. </title> <booktitle> In Proceedings of the 22nd Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 193-203, </pages> <month> May </month> <year> 1990. </year> <month> 19 </month>
Reference-contexts: Indeed, independent of the sorting algorithm, the multibutterfly is an efficient and highly fault-tolerant routing network. 1.2 Other related results Prior to this work, the fastest deterministic algorithm for sorting N keys on an N -node multibutterfly was the Sharesort algorithm of Cypher and Plaxton <ref> [12] </ref>. This algorithm was designed to run on the butterfly network, or on any other hypercubic network. Since the multibutterfly network contains a butterfly network, it applies to multibutterflies as well (but doesn't take advantage of the expansion in the multibutterfly). There are several variants of this algorithm.
Reference: [13] <author> A. DeHon, T. F. Knight Jr., and H. Minsky. </author> <title> Fault-tolerant design for multistage routing networks. </title> <booktitle> In Proceedings of the International Symposium on Shared Memory Multiprocessing, </booktitle> <pages> pages 60-71. </pages> <booktitle> Information Processing Society of Japan, </booktitle> <month> April </month> <year> 1991. </year>
Reference-contexts: Furthermore, simulations show that the running time of the routing algorithm is actually smaller than the O (log N ) upper bound implies [20, 22]. Hence, a case can be made for the practicality of multibutterflies, and several studies have explored their implementation <ref> [9, 10, 13, 14] </ref>. Although no deterministic O (log n)-step sorting algorithm for multibutterflies was previously known, the network was known to have some capabilities that the AKS network was not known to have. For example, Leighton and Maggs showed that multibutterflies are highly fault tolerant [20].
Reference: [14] <author> A. DeHon, T. F. Knight Jr., and H. Minsky. </author> <title> Fault-tolerant design for multistage routing networks. In Norihisa Suzuki, editor, Shared Memory Multiprocessing, </title> <booktitle> chapter 20, </booktitle> <pages> pages 483-503. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1992. </year>
Reference-contexts: Furthermore, simulations show that the running time of the routing algorithm is actually smaller than the O (log N ) upper bound implies [20, 22]. Hence, a case can be made for the practicality of multibutterflies, and several studies have explored their implementation <ref> [9, 10, 13, 14] </ref>. Although no deterministic O (log n)-step sorting algorithm for multibutterflies was previously known, the network was known to have some capabilities that the AKS network was not known to have. For example, Leighton and Maggs showed that multibutterflies are highly fault tolerant [20].
Reference: [15] <author> A. V. Goldberg, B. M. Maggs, and S. A. Plotkin. </author> <title> A parallel algorithm for reconfigur-ing a multibutterfly network with faulty switches. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 43(3) </volume> <pages> 321-326, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: The algorithms for reconfiguring a multibutterfly with faults and for establishing disjoint paths were later improved in <ref> [15] </ref> and [30], respectively. 1.1 Our results In this paper, we show that multibutterfly networks are at least as powerful as the AKS sorting network.
Reference: [16] <author> M. Goudreau, K. Lang, S. Rao, T. Suel, and T. Tsantilas. </author> <title> Towards efficiency and portability: Programming with the BSP model. </title> <booktitle> In Proceedings of the 8th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 1-12, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: One motivation for designing algorithms that route h relations is that routing an h relation is the primitive communication step in the BSP model of computation [36], for which there are growing libraries of parallel programs <ref> [16, 27, 26] </ref>. Finally, we show that a 2-folded butterfly (i.e., a degree-8 multibutterfly), whose individual splitters do not exhibit expansion can emulate a bounded-degree multibutterfly with an (ff; fi)-expansion property, for any ff fi &lt; 1=4.
Reference: [17] <author> N. Kahale. </author> <title> Eigenvalues and expansion of regular graphs. </title> <journal> Journal of the ACM, </journal> <volume> 42(5) </volume> <pages> 1091-1106, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: So far, however, the expansion achieved by the explicit constructions is still about a factor of two smaller than the expected expansion of a random graph. A nice summary of the state of the art in expander graphs can be found in <ref> [17] </ref>. One drawback to the AKS network is that the big-O notation hides large constant factors. In contrast, the depth of the bitonic sorting network is (log 2 n)=2 + (log n)=2 [11, p. 650].
Reference: [18] <author> D. E. Knuth. </author> <title> The Art of Computer Programming, volume 3, Sorting and Searching. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <note> second edition, </note> <year> 1973. </year>
Reference-contexts: Indeed, the difficulty of improving on Batcher's construction led Knuth to conjecture that there was no sorting network with depth O (log n) <ref> [18, p. 243] </ref>. The AKS sorting network differed from previous constructions in one crucial aspect: it incorporated expansion into its structure. Expansion is a graph-theoretic notion.
Reference: [19] <author> F. T. Leighton. </author> <title> Tight bounds on the complexity of parallel sorting. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-34(4):344-354, </volume> <month> April </month> <year> 1985. </year>
Reference-contexts: To date, however, all O (log n)-depth sorting networks are based on the AKS construction. Two notable AKS-based sorting networks are Leighton's sorting network <ref> [19] </ref>, and Ma's fault-tolerant sorting network [23]. Leighton shows how to construct an N -node degree-3 network capable of sorting N keys in O (log N ) steps. His network implements the columnsort algorithm, and uses a fi (N= log N )-input AKS network in a pipelined fashion. <p> As a consequence an N -node multibutterfly can emulate an N -node AKS network with constant slowdown. The embedding has several immediate implications. The emulation of the AKS network by the multibutterfly, along with Leighton's columnsort algorithm <ref> [19] </ref>, yields the first deterministic O (log N )-step algorithm for sorting N elements on an N -node multibutterfly. The sorting algorithm can then be used to construct the first deterministic O (log N )-step algorithms for finding the median of N elements and for routing with combining on multi-butterflies. <p> For the case of finding the kth largest out of N elements on an N - node network, the AKS sorting network combined with columnsort can be used to sort the elements (and hence solve the selection problem) in O (log N ) time <ref> [19] </ref>. This algorithm is optimal because selection on any bounded-degree N -node network requires (log N ) time.
Reference: [20] <author> F. T. Leighton and B. M. Maggs. </author> <title> Fast algorithms for routing around faults in multi-butterflies and randomly-wired splitter networks. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 41(5) </volume> <pages> 578-587, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: Furthermore, simulations show that the running time of the routing algorithm is actually smaller than the O (log N ) upper bound implies <ref> [20, 22] </ref>. Hence, a case can be made for the practicality of multibutterflies, and several studies have explored their implementation [9, 10, 13, 14]. <p> Although no deterministic O (log n)-step sorting algorithm for multibutterflies was previously known, the network was known to have some capabilities that the AKS network was not known to have. For example, Leighton and Maggs showed that multibutterflies are highly fault tolerant <ref> [20] </ref>. <p> We also present two deterministic algorithms for solving h-to-one routing problems on an n-input butterfly in O (h + log n) time. One applies when h is known, and the other when it is not. Previous routing algorithms could solve h one-to-one problems in a pipelined fashion <ref> [20, 35] </ref>, but assumed that each packet carried the label of the one-to-one problem to which 2 it belonged. An algorithm for solving h-to-one routing problems can also used to route h relations.
Reference: [21] <author> F. T. Leighton, B. M. Maggs, A. G. Ranade, and S. B. Rao. </author> <title> Randomized routing and sorting on fixed-connection networks. </title> <journal> Journal of Algorithms, </journal> <volume> 17(1) </volume> <pages> 157-205, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: Our embedding result yields an O (log N )-time algorithm for the multibutterfly. Note that the sorting problem can also be solved on an N -node butterfly (or multibutterfly) in O (log N ) time using the randomized Flashsort algorithm of Reif and Valiant <ref> [21, 34] </ref>. Prior to this work, the fastest deterministic selection algorithm for multibutterflies was the algorithm of Berthome, Ferreira, Maggs, Perennes, and Plaxton [5].
Reference: [22] <author> T. Leighton, D. Lisinski, and B. Maggs. </author> <title> Empirical evaluation of randomly-wired multistage networks. </title> <booktitle> In Proceedings of the 1990 IEEE International Conference on Computer Design: VLSI in Computers & Processors, </booktitle> <pages> pages 380-385. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> September </month> <year> 1990. </year>
Reference-contexts: Furthermore, simulations show that the running time of the routing algorithm is actually smaller than the O (log N ) upper bound implies <ref> [20, 22] </ref>. Hence, a case can be made for the practicality of multibutterflies, and several studies have explored their implementation [9, 10, 13, 14].
Reference: [23] <author> Y. Ma. </author> <title> An O(n log n)-size fault-tolerant sorting network. </title> <booktitle> In Proceedings of the 28th Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 266-275, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: To date, however, all O (log n)-depth sorting networks are based on the AKS construction. Two notable AKS-based sorting networks are Leighton's sorting network [19], and Ma's fault-tolerant sorting network <ref> [23] </ref>. Leighton shows how to construct an N -node degree-3 network capable of sorting N keys in O (log N ) steps. His network implements the columnsort algorithm, and uses a fi (N= log N )-input AKS network in a pipelined fashion.
Reference: [24] <author> G. A. Margulis. </author> <title> Explicit constructions of concentrators. </title> <journal> Problemy Peredachi Informat-sii, </journal> <volume> 9 </volume> <pages> 325-332, </pages> <year> 1973. </year> <note> In Russian. </note>
Reference-contexts: As it happens, a random graph is likely to be an expander [29]. There are also explicit constructions of expanders. These constructions were first discovered by Margulis <ref> [24, 25] </ref>, and have since been greatly improved. So far, however, the expansion achieved by the explicit constructions is still about a factor of two smaller than the expected expansion of a random graph.
Reference: [25] <author> G. A. Margulis. </author> <title> Explicit constructions of concentrators. </title> <journal> Problems of Information Transmission, </journal> <volume> 9 </volume> <pages> 71-80, </pages> <year> 1975. </year>
Reference-contexts: As it happens, a random graph is likely to be an expander [29]. There are also explicit constructions of expanders. These constructions were first discovered by Margulis <ref> [24, 25] </ref>, and have since been greatly improved. So far, however, the expansion achieved by the explicit constructions is still about a factor of two smaller than the expected expansion of a random graph.
Reference: [26] <author> W. F. McColl. </author> <title> BSP programming. </title> <editor> In G. E. Blelloch, K. M. Chandy, and S. Jagan-nathan, editors, </editor> <booktitle> Specification of Parallel Algorithms. Volume 18 of DIMACS Series in Discrete Mathematics and Theoretical Computer Science, </booktitle> <pages> pages 25-35. </pages> <publisher> American Mathematical Society, </publisher> <address> Providence, RI, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: One motivation for designing algorithms that route h relations is that routing an h relation is the primitive communication step in the BSP model of computation [36], for which there are growing libraries of parallel programs <ref> [16, 27, 26] </ref>. Finally, we show that a 2-folded butterfly (i.e., a degree-8 multibutterfly), whose individual splitters do not exhibit expansion can emulate a bounded-degree multibutterfly with an (ff; fi)-expansion property, for any ff fi &lt; 1=4.
Reference: [27] <author> R. Miller and J. L. Reed. </author> <title> The Oxford BSP library: User's guide. Version 1.0. </title> <type> Oxford parallel technical report, </type> <institution> Oxford University Computing Laboratory, </institution> <address> Oxford, England, </address> <year> 1994. </year>
Reference-contexts: One motivation for designing algorithms that route h relations is that routing an h relation is the primitive communication step in the BSP model of computation [36], for which there are growing libraries of parallel programs <ref> [16, 27, 26] </ref>. Finally, we show that a 2-folded butterfly (i.e., a degree-8 multibutterfly), whose individual splitters do not exhibit expansion can emulate a bounded-degree multibutterfly with an (ff; fi)-expansion property, for any ff fi &lt; 1=4.
Reference: [28] <author> M. S. Paterson. </author> <title> Improved sorting networks with O(log N ) depth. </title> <journal> Algorithmica, </journal> <volume> 5 </volume> <pages> 75-92, </pages> <year> 1990. </year>
Reference-contexts: In contrast, the depth of the bitonic sorting network is (log 2 n)=2 + (log n)=2 [11, p. 650]. Some progress has been made in simplifying the AKS network and in improving the constant factors in its depth <ref> [28] </ref>, but for practical values of n, the depth of bitonic sort is much smaller. To date, however, all O (log n)-depth sorting networks are based on the AKS construction. Two notable AKS-based sorting networks are Leighton's sorting network [19], and Ma's fault-tolerant sorting network [23]. <p> The k butterfly networks that define a multibutterfly are called underlying butterflies and we denote them by BF 1 ; : : :; BF k . 3 The AKS network Our description of the AKS network is based on Paterson's description <ref> [28] </ref>. Ours is a little more general than Paterson's because we do not describe the building blocks, i.e., the separators, and the sorters in detail. <p> The elements that are sent to the wrong child are then retransmitted in a later stages. We will not describe the algorithm in detail. Instead, we consider the flow of the elements between the bags. The proof that the algorithm sorts can be found in Paterson's article <ref> [28] </ref>. Associated with each node of the tree is a bag that contains a number of elements. The size of a bag is the number of elements stored in the bag, and the capacity of a bag is the maximum number of elements that can be stored in that bag. <p> But the integer sizes can be bigger than the ideal ones. Fortunately, both values differ only slightly, i.e., each bag of ideal size b has integer size at most b+2 <ref> [28] </ref>. Consider a level `. The number of congruent stages between stage t ` 0 and t ` 1 is at most log -(-=2A)=2, and the number of batches on level ` in a stage is at most 2 ` 2 ` fl (1 1=4A 2 ) n=r. <p> fi (1) (h + 2) (log 2 n + fi (1)) for (-; A; r; h) := (1 + 2=h) = log - 2A . (which is at most 1:462 : : :. for - = 43=48, A = 3, r = 160, and h = 36 as suggested in <ref> [28] </ref>). This completes the proof of Theorem 4.1. 5 Routing h-relations on multibutterflies In this section, we give a deterministic algorithm for routing h-relations on a multibutterfly with (ff; fi)-expansion.
Reference: [29] <author> M. Pinsker. </author> <title> On the complexity of a concentrator. </title> <booktitle> In 7th International Teletraffic Congress, </booktitle> <pages> pages 318/1-318/4, </pages> <month> June </month> <year> 1973. </year>
Reference-contexts: As it happens, a random graph is likely to be an expander <ref> [29] </ref>. There are also explicit constructions of expanders. These constructions were first discovered by Margulis [24, 25], and have since been greatly improved. So far, however, the expansion achieved by the explicit constructions is still about a factor of two smaller than the expected expansion of a random graph.
Reference: [30] <author> N. Pippenger. </author> <title> Self-routing superconcentrators. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 52(1) </volume> <pages> 53-60, </pages> <month> February </month> <year> 1996. </year>
Reference-contexts: The algorithms for reconfiguring a multibutterfly with faults and for establishing disjoint paths were later improved in [15] and <ref> [30] </ref>, respectively. 1.1 Our results In this paper, we show that multibutterfly networks are at least as powerful as the AKS sorting network.
Reference: [31] <author> C. G. Plaxton. </author> <title> On the network complexity of selection. </title> <booktitle> In Proceedings of the 30th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 396-401, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: Like the Sharesort algorithm, this algorithm does not make use of expansion when run on a multibutterfly. Since the selection problem can be solved in linear time sequentially [8], this algorithm, which performs N log N log fl N work, is not work efficient. Furthermore, Plaxton <ref> [31] </ref> showed that any deterministic algorithm for solving the selection problem on a N -node hypercubic network requires ((M=N ) log log N + log N ) time in the worst case, where M is the number of input elements. <p> largest of M elements, M N , can be found in O ((M=N ) + log N log log (M=N )) time on an N -node expander-based network using an implementation of a PRAM algorithm 3 due to Vishkin [37] that invokes the AKS sorting network and columnsort as subroutines <ref> [31] </ref>. This algorithm is work-optimal for M=N log N log log (M=N )). Our embedding result implies that a multibutterfly network can perform both of these algorithms.
Reference: [32] <author> C. G. Plaxton. </author> <title> Tight bounds for a distributed selection game with applications to fixed-connection machines. </title> <booktitle> In Proceedings of the 36th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 114-122, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: Hence, there can be no deterministic work-efficient selection algorithm on a hypercubic network. Recently, Plaxton showed that for M=N = log N , any deterministic algorithm for selection on a bounded-degree N -node hypercubic network requires (log 3=2 N ) steps <ref> [32] </ref>. He also presents an algorithm that runs in O (log 3=2 N (log log N ) 2 ) time on any N -node hypercubic network. For bounded-degree expander-based networks, two optimal deterministic algorithms for selection are known.
Reference: [33] <author> K. J. Rappoport. </author> <title> On the slowdown of efficient simulations of multibutterflies. </title> <booktitle> In Proceedings of the 8th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 176-182, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: Our embedding result implies that a multibutterfly network can perform both of these algorithms. Note that the latter algorithm beats Plaxton's lower bound for hypercubic networks, thus implying a separation in power between expander-based networks and hypercubic networks. Rappoport <ref> [33] </ref> has recently proved an even larger separation, namely that the largest butterfly that can efficiently simulate a N -node multibutterfly has fewer than N * nodes, for all constants * &gt; 0.
Reference: [34] <author> J. H. Reif and L. G. Valiant. </author> <title> A logarithmic time sort for linear size networks. </title> <journal> Journal of the ACM, </journal> <volume> 34(1) </volume> <pages> 60-76, </pages> <month> January </month> <year> 1987. </year>
Reference-contexts: Our embedding result yields an O (log N )-time algorithm for the multibutterfly. Note that the sorting problem can also be solved on an N -node butterfly (or multibutterfly) in O (log N ) time using the randomized Flashsort algorithm of Reif and Valiant <ref> [21, 34] </ref>. Prior to this work, the fastest deterministic selection algorithm for multibutterflies was the algorithm of Berthome, Ferreira, Maggs, Perennes, and Plaxton [5].
Reference: [35] <author> E. Upfal. </author> <title> An O(log N ) deterministic packet routing scheme. </title> <booktitle> In Proceedings of the 21st Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 241-250, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: It is not difficult, however, to modify their construction so that the degree of all nodes is bounded; they probably did not consider it important. The term "multibutterfly" was introduced by Upfal <ref> [35] </ref>. <p> We also present two deterministic algorithms for solving h-to-one routing problems on an n-input butterfly in O (h + log n) time. One applies when h is known, and the other when it is not. Previous routing algorithms could solve h one-to-one problems in a pipelined fashion <ref> [20, 35] </ref>, but assumed that each packet carried the label of the one-to-one problem to which 2 it belonged. An algorithm for solving h-to-one routing problems can also used to route h relations. <p> Then we say a concentrator G = (A [ B; E) has (ff; fi)-expansion if for any set X A with jXj ffjAj, we have j (X) " Bj fijXj. A multibutterfly is said to have (ff; fi)-expansion if all its concentrators have (ff; fi)-expansion. Upfal <ref> [35] </ref> shows that for any d, k, ff, and fi with 4 2fi &lt; k 1, and ff &gt; 1=(2fi)(2fie 1+2fi ) 1=(d2fi1) , there exists a multibutterfly of degree 4k with (ff; fi)-expansion. <p> We assume that each level ` with (h 1) ` 1 is connected to level ` + 1 by an (ff; fi)- expander, i.e., for any X V ` with jXj ffn it holds (X) " V `+1 fijXj. Upfal <ref> [35] </ref> presents an algorithm for routing a permutation, or 1-relation, in O (log n) steps. Our algorithm uses Upfal's algorithm as a subroutine. Upfal's algorithm. <p> activated, if node (`; u) stores in its buffer a packet with higher priority than the packet stored in the buffer of (` + 1; u), the two nodes exchange packets. (An empty buffer is considered a packet with the lowest priority.) We extract the following Lemma from Upfal's analysis <ref> [35] </ref>. 14 Lemma 5.1 Suppose the batches are chosen so that no more than ffm packets from each batch are routed through any splitter of size m. Then each packet has reached its destination in time O (log n + L).
Reference: [36] <author> L. G. Valiant. </author> <title> A bridging model for parallel computation. </title> <journal> Communications of the ACM, </journal> <volume> 33(8) </volume> <pages> 103-111, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: In an h relation, each source sends at most h packets, and each destination receives at most h packets. One motivation for designing algorithms that route h relations is that routing an h relation is the primitive communication step in the BSP model of computation <ref> [36] </ref>, for which there are growing libraries of parallel programs [16, 27, 26]. Finally, we show that a 2-folded butterfly (i.e., a degree-8 multibutterfly), whose individual splitters do not exhibit expansion can emulate a bounded-degree multibutterfly with an (ff; fi)-expansion property, for any ff fi &lt; 1=4.
Reference: [37] <author> U. Vishkin. </author> <title> An optimal parallel algorithm for selection. </title> <booktitle> In Parallel and Distributed Computing. Volume 4 of Advances in Computing Research, </booktitle> <pages> pages 79-86. </pages> <publisher> JAI Press, </publisher> <address> Greenwich, CT, </address> <year> 1987. </year> <month> 21 </month>
Reference-contexts: The kth largest of M elements, M N , can be found in O ((M=N ) + log N log log (M=N )) time on an N -node expander-based network using an implementation of a PRAM algorithm 3 due to Vishkin <ref> [37] </ref> that invokes the AKS sorting network and columnsort as subroutines [31]. This algorithm is work-optimal for M=N log N log log (M=N )). Our embedding result implies that a multibutterfly network can perform both of these algorithms.
References-found: 37

