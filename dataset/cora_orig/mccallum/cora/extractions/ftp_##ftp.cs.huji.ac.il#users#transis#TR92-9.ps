URL: ftp://ftp.cs.huji.ac.il/users/transis/TR92-9.ps
Refering-URL: http://www.cs.huji.ac.il/labs/transis/abstracts93.html
Root-URL: http://www.cs.huji.ac.il
Title: Total Ordering of Messages in Broadcast Domains  
Author: Danny Dolev, Shlomo Kramer, Dalia Malki 
Address: Jerusalem, Israel  
Affiliation: Computer Science department The Hebrew University of Jerusalem  
Abstract: Technical Report CS92-9 November 24, 1992 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. </author> <title> Membership algorithms for multicast communication groups. </title> <booktitle> In Intl. Workshop on Distributed Algorithms proceedings (WDAG-6), (L CNS, 647), number 6th, </booktitle> <pages> pages 292-312, </pages> <month> November </month> <year> 1992. </year> <note> previous version available as TR CS92-10, </note> <institution> Dept. of Comp. Sci., the Hebrew University of Jerusalem. </institution>
Reference-contexts: Experimenting with the ToTo protocols in the Transis environment we obtained a sustained throughput of 250 1K messages per second between 8 sun-4 machines connected by a 10 Mbit/sec Ethernet, when all 8 machines were receiving all messages. * Using Transis' membership service (see <ref> [1] </ref>), the ToTo protocols continue to form the total order in face of arbitrary machine crashes and recoveries as well as network detachments and reconnection. When a partition occurs, machines in every partition continue to form the same total order. This total order may differ across partitions. <p> The Initiate and Agree stages, when invoked, terminate within a finite delay of time (see <ref> [1] </ref>). The Flush stage may involve the delivery of agreed multicast messages. This occurs when pending messages wait for a detached machine q to acknowledge their reception. To solve this potential deadlock, the membership protocol must supply the multicast protocols with an intermediate event. <p> Intuitively, this stems from the fact that any message from a machine in CCS p Def unc p will causally follow a configuration change message extracting q from the configuration (see <ref> [1] </ref> for more details). Recall that a configuration change is installed by delivering a configuration change message to the upper level. In Section 2 we defined the virtual synchrony property of the membership service.
Reference: [2] <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. Transis: </author> <title> A communication sub-system for high availability. </title> <booktitle> In Annual International Symposium on Fault-Tolerant Computing, </booktitle> <volume> number 22, </volume> <pages> pages 76-84, </pages> <month> July </month> <year> 1992. </year> <note> previous version available as TR CS91-13, </note> <institution> Dept. of Comp. Sci., the Hebrew University of Jerusalem. </institution>
Reference-contexts: An agreed multicast service guarantees that messages arrive reliably and in the same total-order to all their destinations. Having such a service, most distributed applications become much easier to implement and to maintain. In <ref> [2] </ref>, we presented the Transis communication sub-system for the High Availability project, currently developed at the Hebrew University of Jerusalem. The protocols presented in this paper implement the agreed multicast service of Transis. The maintenance of total order of messages must bear a cost, in resources, in performance, or both. <p> In this section we give a brief explanation of the causal multicast and atomic membership services supplied by Transis and discuss the assumptions made by the ToTo protocols about these services. A detailed description of the Transis environment and services can be found in <ref> [2] </ref>. 2.1 Causal Multicast Transis contains the communication layer responsible for the reliable delivery of messages in the system ([2]).
Reference: [3] <author> M. Ben-Or. </author> <title> Another advantage of free choice: Completely asynchronous agreement protocols. </title> <booktitle> In Proceedings of the Second Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 27-30, </pages> <address> New York, </address> <month> Aug. </month> <year> 1983. </year> <institution> Association for Computing Machinery. </institution>
Reference: [4] <author> U. N. Bhat. </author> <title> Elements of Applied Stochastic Processes. </title> <publisher> John Wiley & Sons, Inc., </publisher> <year> 1972. </year>
Reference-contexts: For every machine q in the CCS, we model the stream of messages p receives from q by a continuous time renewal process N q (t) (see <ref> [4] </ref>). The stream of messages received by p is the superposition of n renewal processes N r (t) 1 r n. <p> In general, t and X i r may be dependent. We make this assumption in order to simplify the analysis. 7 Essentially all renewal processes are asymptotically stationary (see <ref> [4] </ref>), so this is not a limiting assumption. 19 modeled by a Poisson process. For the Poisson process, X 1 1 ; : : : ; X 1 n are i.i.d. exponential with mean 1 .
Reference: [5] <author> K. Birman, R. Cooper, and B. Gleeson. </author> <title> Programming with process groups: Group and mul-ticast semantics. </title> <type> TR 91-1185, </type> <institution> dept. of Computer Science, Cornell University, </institution> <month> Jan </month> <year> 1991. </year>
Reference-contexts: Furthermore, all machines agree on the set of messages to be delivered before the next configuration change. This set consists of messages prior or concurrent to the configuration change message. This last property is termed by Birman et al. virtual synchrony, and its importance is discussed in <ref> [5, 8, 9] </ref>. * Flush: after all messages in the above agreed upon set had been delivered, install the new configuration by delivering the configuration change message. The Initiate and Agree stages, when invoked, terminate within a finite delay of time (see [1]).
Reference: [6] <author> K. Birman, R. Cooper, T. A. Joseph, K. Marzullo, M. Makpangou, K. Kane, F. Schmuck, and M. Wood. </author> <title> The ISIS System Manual. </title> <institution> Dept of Computer Science, Cornell University, </institution> <month> Sep 90. </month>
Reference: [7] <author> K. Birman and T. Joseph. </author> <title> Realiable communication in the presence of failures. </title> <journal> ACM Trans. Comput. Syst., </journal> <volume> 5(1) </volume> <pages> 47-76, </pages> <month> February </month> <year> 1987. </year>
Reference: [8] <author> K. Birman and T. Joseph. </author> <title> Exploiting virtual synchrony in distributed systems. </title> <booktitle> In Ann. Symp. Operating Systems Principles, </booktitle> <volume> number 11, </volume> <pages> pages 123-138. </pages> <publisher> ACM, </publisher> <month> Nov 87. </month>
Reference-contexts: Furthermore, all machines agree on the set of messages to be delivered before the next configuration change. This set consists of messages prior or concurrent to the configuration change message. This last property is termed by Birman et al. virtual synchrony, and its importance is discussed in <ref> [5, 8, 9] </ref>. * Flush: after all messages in the above agreed upon set had been delivered, install the new configuration by delivering the configuration change message. The Initiate and Agree stages, when invoked, terminate within a finite delay of time (see [1]).
Reference: [9] <author> K. Birman, A. Schiper, and P. Stephenson. </author> <title> Lightweight causal and atomic group multicast. </title> <journal> ACM Trans. Comput. Syst., </journal> <volume> 9(3) </volume> <pages> 272-314, </pages> <year> 1991. </year>
Reference-contexts: If a message arrives at a machine, and some of its causal predecessors are missing, Transis transparently handles message recovery and re-ordering. Other environments like <ref> [9, 29] </ref> are equally suitable for providing the causality requirement. Below, we sometimes refer to the environment and messages as the Transis environment and Transis messages. The ToTo protocols operate above the Transis communication layer, such that message arrival order within the protocol preserves causality. <p> Furthermore, all machines agree on the set of messages to be delivered before the next configuration change. This set consists of messages prior or concurrent to the configuration change message. This last property is termed by Birman et al. virtual synchrony, and its importance is discussed in <ref> [5, 8, 9] </ref>. * Flush: after all messages in the above agreed upon set had been delivered, install the new configuration by delivering the configuration change message. The Initiate and Agree stages, when invoked, terminate within a finite delay of time (see [1]).
Reference: [10] <author> G. Bracha. </author> <title> An t(log n) expected rounds randomized byzantine generals algorithm. </title> <booktitle> In Proc. of the 17th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 316-326, </pages> <year> 1985. </year>
Reference: [11] <author> J. M. Chang and N. Maxemchuck. </author> <title> Realiable broadcast protocols. </title> <journal> ACM Trans. Comput. Syst., </journal> <volume> 2(3) </volume> <pages> 251-273, </pages> <month> August </month> <year> 1984. </year>
Reference: [12] <author> D. R. Cheriton and W. Zwaenepoel. </author> <title> Distributed process groups in the v kernel. </title> <journal> ACM Trans. Comput. Syst., </journal> <volume> 2(3) </volume> <pages> 77-107, </pages> <month> May </month> <year> 1985. </year>
Reference: [13] <author> B. Chor and B. Coan. </author> <title> A simple and efficient randomized byzantine agreement algorithm. </title> <journal> IEEE Trans. Softw. Eng., </journal> <volume> SE-11(6):531-539, </volume> <month> June </month> <year> 1985. </year>
Reference: [14] <author> F. Cristian. </author> <title> Reaching agreement on processor group membership in synchronous distributed systems. </title> <type> Research Report RJ 5964, </type> <institution> IBM Almaden Research Center, </institution> <month> Mar. </month> <year> 1988. </year>
Reference-contexts: The Transis protocols employ the network broadcast capability for the efficient dissemination of messages to multiple destinations via a single transmission. 2.2 Atomic Membership The problem of maintaining membership consensus is formally described in <ref> [14] </ref>. Transis contains a membership service, that maintains a consistent view of the current configuration among all the connected machines in a dynamic environment. Each machine maintains locally the following view: 4 CCS: the Current Configuration Set is the set of machines in agreement.
Reference: [15] <author> F. Cristian, H. Aghili, R. Strong, and D. Dolev. </author> <title> Atomic broadcast: From simple message diffusion to byzantine agreement. </title> <booktitle> In Proceedings of the IEEE Symposium on Fault Tolerant Computing, </booktitle> <pages> pages 200-206, </pages> <address> Ann Arbor, Michigan, </address> <month> June </month> <year> 1985. </year> <month> 25 </month>
Reference: [16] <author> D. Dolev and H. R. </author> <title> Strong. Authenticated algorithms for byzantine agreement. </title> <journal> SIAM J. Comput., </journal> <volume> 12(3) </volume> <pages> 656-666, </pages> <month> Nov </month> <year> 1983. </year>
Reference: [17] <author> P. Feldman and S. Micali. </author> <title> Optimal algorithms for byzantine agreement. </title> <booktitle> In Proceedings of the 28 th Annual ACM Symposium on Theory of Computing, </booktitle> <month> May </month> <year> 1988. </year>
Reference: [18] <author> W. Feller. </author> <title> An Introduction to Probability Theory and Its Applications. </title> <publisher> John Wiley & Sons, Inc., </publisher> <year> 1966. </year>
Reference-contexts: The Poisson process is perhaps the most important renewal process. Its importance stems from the following fact (see <ref> [18] </ref>): given n renewal processes, the superposition process formed by combining all the renewal epochs into one sequence is, under fairly general conditions, approximately a Poisson process. <p> For the Poisson process, X 1 1 ; : : : ; X 1 n are i.i.d. exponential with mean 1 . The expectation of X (i);n is given by (see <ref> [18] </ref>): EX (i);n = j=1 n j + 1 Using Equation 3 we get: l = i= n P (t = i) j=1 n j Consider, for example, a protocol P with t = + 1, where is some constant. <p> The periodic renewal process models the communication behavior of a machine sending a message every fixed interval of time. For such a process X (i);n = fi (i);n . Thus, the distribution function of X (i);n is given by (see <ref> [18] </ref>): P (X (i);n &gt; t) = k=0 k )t k (1 t) nk : And thus E (X (i);n ) is given by: E (X (i);n ) = 0 i1 X ( n Z c t k (1 t) nk dt i1 X ( n i1 X ( n (n
Reference: [19] <author> M. Fischer, N. Lynch, and M. Paterson. </author> <title> Impossibility of distributed consensus with one faulty process. </title> <journal> J. ACM, </journal> <volume> 32 </volume> <pages> 374-382, </pages> <month> April </month> <year> 1985. </year>
Reference: [20] <author> M. J. Fischer. </author> <title> The consensus problem in unreliable distributed systems (a brief survey). </title> <type> Technical Report YALEU/DCS/RR-273, </type> <institution> Yale University, </institution> <month> June </month> <year> 1983. </year>
Reference: [21] <author> K. J. Goldman. </author> <title> Highly concurrent logically synchronous multicast. </title> <journal> Distributed Computing, </journal> <volume> 4(4) </volume> <pages> 189-208, </pages> <year> 1991. </year>
Reference: [22] <author> A. Griefer and R. Strong. Dcf: </author> <title> Distributed communication with fault tolerance. </title> <booktitle> In Ann. Symp. Principles of Distributed Computing, </booktitle> <volume> number 7, </volume> <pages> pages 18-27, </pages> <month> August </month> <year> 1988. </year>
Reference: [23] <author> M. F. Kaashoek, A. S. Tanenbaum, S. F. Hummel, and H. E. Bal. </author> <title> An efficient reliable broadcast protocol. </title> <journal> Operating Systems Review, </journal> <volume> 23(4) </volume> <pages> 5-19, </pages> <month> October </month> <year> 1989. </year>
Reference: [24] <author> S. Kramer. </author> <title> Total ordering of messages in multicast communication systems. </title> <type> Master's thesis, </type> <institution> Hebrew University, Jerusalem, Il, </institution> <month> December </month> <year> 1992. </year>
Reference-contexts: Note that this does not violate the impossibility of making consensus decisions ([19]), since our membership protocol employs timeouts. * The ToTo protocols preserve a bounded latency worst case behavior: the ToTo protocols always admit a message after all the machines acknowledge its reception. In <ref> [24] </ref>, we show that this upper bound is impossible to incorporate in "inherently fault tolerant" protocols. Related Work The problem of total ordering has received considerable attention in the distributed processing community. Synchronous protocols for the total ordering problem have been studied for some time ([20, 16, 22, 15]). <p> For these systems we expect the optimal to be greater than n 2 . The ToTo protocols were implemented as part of the Transis communication system. Details about this implementation can be found in <ref> [24] </ref>. Denote by n c the number of candidate messages. Denote by n p the number of pending messages. <p> We now briefly sketch an extension of this model for message latency at any machine in the system (for more details see <ref> [24] </ref>). Let machine p receive message m q;i at time s.
Reference: [25] <author> L. Lamport. </author> <title> Time, clocks, and the ordering of events in a distributed system. </title> <journal> Commun. ACM, </journal> <volume> 21(7) </volume> <pages> 558-565, </pages> <month> July 78. </month>
Reference-contexts: A detailed description of the Transis environment and services can be found in [2]. 2.1 Causal Multicast Transis contains the communication layer responsible for the reliable delivery of messages in the system ([2]). Transis guarantees the causal (see <ref> [25] </ref>) delivery order of messages, defined as the reflexive, transitive closure of: (1) m cause ! m 0 if receive q (m) ! send q (m 0 ) 1 (2) m cause ! m 0 if send q (m) ! send q (m 0 ): If m 0 follows m in
Reference: [26] <author> S. W. Luan and V. D. Gligor. </author> <title> A fault-tolerant protocol for atomic broadcast. </title> <journal> IEEE Trans. Parallel & Distributed Syst., </journal> <volume> 1(3) </volume> <pages> 271-285, </pages> <month> July 90. </month>
Reference: [27] <author> P. M. Melliar-Smith, L. E. Moser, and V. Agrawala. </author> <title> Broadcast protocols for distributed systems. </title> <journal> IEEE Trans. Parallel & Distributed Syst., </journal> <volume> (1), </volume> <month> Jan </month> <year> 1990. </year>
Reference: [28] <author> P. M. Melliar-Smith, L. E. Moser, and V. Agrawala. </author> <title> Membership algorithms for asynchronous distributed systems. </title> <booktitle> In Intl. Conf. Distributed Computing Systems, </booktitle> <month> May 91. </month>
Reference-contexts: By the liveness property of the membership service, at time T + , m cc had already been delivered, a contradiction. 2 5 In order to assure eventual termination it is sufficient to assume eventual extraction (see <ref> [28] </ref>). 16 6 A Model of Performance In this Section we describe a performance model for distributed agreed multicast protocols. First, a new measure of efficiency for distributed agreed multicast protocols is described. We proceed to present a model connecting this measure with the latency the protocol inflicts on messages.
Reference: [29] <author> L. L. Peterson, N. C. Buchholz, and R. D. Schlichting. </author> <title> Preserving and using context information in interprocess communication. </title> <journal> ACM Trans. Comput. Syst., </journal> <volume> 7(3) </volume> <pages> 217-246, </pages> <month> August 89. </month>
Reference-contexts: If a message arrives at a machine, and some of its causal predecessors are missing, Transis transparently handles message recovery and re-ordering. Other environments like <ref> [9, 29] </ref> are equally suitable for providing the causality requirement. Below, we sometimes refer to the environment and messages as the Transis environment and Transis messages. The ToTo protocols operate above the Transis communication layer, such that message arrival order within the protocol preserves causality.
Reference: [30] <author> M. O. Rabin. </author> <title> Randomized byzantine generals. </title> <booktitle> In Proc. of the 24th IEEE Annual Symp. on Foundation of Computer Science, </booktitle> <pages> pages 403-409, </pages> <year> 1983. </year>
Reference: [31] <author> P. Verissimo, L. Rogrigues, and J. Rufino. </author> <title> The atomic multicast protocol (amp). </title> <editor> In D. Powell, editor, Delta-4: </editor> <booktitle> A Generic Architecture for Dependable Distributed Computing, </booktitle> <pages> pages 267-294. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year> <month> 26 </month>
References-found: 31

