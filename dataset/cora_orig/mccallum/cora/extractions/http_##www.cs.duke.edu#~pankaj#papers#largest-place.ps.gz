URL: http://www.cs.duke.edu/~pankaj/papers/largest-place.ps.gz
Refering-URL: http://www.cs.duke.edu/CGC/papers.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Largest Placements and Motion Planning of a Convex Polygon  
Author: Pankaj K. Agarwal Nina Amenta Boris Aronov Micha Sharir 
Address: 3333 Coyote Hill Road, Palo Alto, CA 94304, USA  NY 11201 USA  Aviv 69978, ISRAEL  New York University, New York, NY 10012, USA  
Affiliation: Xerox PARC,  Department of Computer and Information Science, Polytechnic University, Brooklyn,  School of Mathematical Sciences, Tel Aviv University, Tel  and Courant Institute of Mathematical Sciences,  
Abstract: We study two problems involving collision-free placements of a convex m-gon P in a planar polygonal environment: (i) We first show that the largest similar copy of P inside another convex polygon Q with n edges can be computed in O(mn 2 log n) time. We also show that the combinatorial complexity of the space of all similar copies of P inside Q is O(mn 2 ), and that it can also be computed in O(mn 2 log n) time. (ii) We then consider the case where Q is an arbitrary polygonal environment with n edges. We give the first (and relatively simple) algorithm that constructs the entire free configuration space (the 3-dimensional space of all free placements of P in Q) in time that is near fl Pankaj Agarwal has been supported by NSF Grant CCR-93-01259, an NYI award, and by matching funds from Xerox Corp. Nina Amenta has been supported by the Geometry Center, which is officially the Center for Computation and Visualization of Geometric Structures, supported by NSF/DMS-8920161. Boris Aronov has been supported by NSF Grant CCR-92-11541 and a Sloan Research Fellowship. Micha Sharir has been supported by NSF Grants CCR-94-24398 and CCR-93-11127, by a Max-Planck Research Award, and by grants from the U.S.-Israeli Binational Science Foundation, and the G.I.F., the German-Israeli Foundation for Scientific Research and Development. 0 quadratic in mn, which is nearly optimal in the worst case. Previous solutions of the second problem were either incomplete, more expensive, or produced only part of the free configuration space. Combining our solution with parametric searching, we obtain an algorithm that finds the largest placement of P in Q in time that is also near-quadratic in mn. In addition, we describe an algorithm that preprocesses the computed free configuration space so that `reachability' queries can be answered in polylogarithmic time. y Department of Computer Science, Box 90129, Duke University, Durham, NC 27708-0129, USA
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Agarwal, B. Aronov, and M. Sharir, </author> <title> Computing envelopes in four dimensions with applications, </title> <booktitle> Proc. 10th ACM Symp. on Computationl Geometry (1994), </booktitle> <pages> pp. 348-358. </pages>
Reference-contexts: Both algorithms are very simple to implement; they use some straightforward processing, followed by constructions of 3-dimensional convex hulls (for which optimal `off-the-shelf' code is available). We next study the case where Q is a general polygonal environment. We adapt a recent randomized algorithmic technique from <ref> [1, 3] </ref>, to obtain a ran Page 2 domized algorithm that constructs (the boundary of) C in expected time O (mn 6 (mn) log 2 mn). A somewhat more complex variant of the algorithm runs in expected O (mn 6 (mn) log mn) time. <p> We omit the details concerning the gluing process, Page 7 as they are essentially the same as in the preceding algorithms <ref> [1, 3, 11] </ref>. Note that @K ( 0 ) consists of all (free or non-free) placements of P at which its boundary makes contact with @ 0 and P and 0 are openly disjoint. <p> Note that there is an alternative, randomized incremental approach to construct each K , in which we add the 's one at a time, in a random order, and maintain a `trapezoidal' decomposition of the complement of their union; see <ref> [1, 3, 9] </ref>. The analysis of this technique is fairly standard, so we omit it here. The expected running time of this approach is only O (mn 6 (mn) log mn), so this technique is slightly faster, but somewhat more complicated. <p> Following an argument similar to that in <ref> [1] </ref>, one can show that the complexity of C fl is O (mn 10 (mn)). This follows by showing that any pair of contact surfaces intersect at most 8 times within a fixed vertical wall. More details are given in the full version of the paper. <p> The total time spent in this step is O (mn 10 (mn)). Finally, we preprocess C fl for point-location queries, using the algorithm of Preparata and Tamassia, as described in <ref> [1] </ref>. Using this data structure, we can determine in O (log 2 mn) time whether two given placements lie in the same connnected com ponent of C.
Reference: [2] <author> P. K. Agarwal, M. Sharir, and S. Toledo, </author> <title> Applications of parametric searching in geometric optimization, </title> <editor> J. </editor> <booktitle> Algorithms 17 (1994), </booktitle> <pages> 292-318. Page 10 </pages>
Reference-contexts: We therefore perform the merge step in the parallel version using a different approach, based on segment trees, such as the one used in <ref> [2] </ref>. Omitting all further details from this version, we show that one can compute C in O (log 2 mn) parallel steps, using O (mn 6 (mn) log mn) expected number of processors, in Valiant's comparison model.
Reference: [3] <author> B. Aronov and M. Sharir, </author> <title> The union of convex polyhe-dra in three dimensions, </title> <booktitle> Proc. 34th IEEE Symp. </booktitle> <institution> Found. Comput. Sci. </institution> <year> (1993), </year> <pages> pp. 518-527. </pages>
Reference-contexts: Both algorithms are very simple to implement; they use some straightforward processing, followed by constructions of 3-dimensional convex hulls (for which optimal `off-the-shelf' code is available). We next study the case where Q is a general polygonal environment. We adapt a recent randomized algorithmic technique from <ref> [1, 3] </ref>, to obtain a ran Page 2 domized algorithm that constructs (the boundary of) C in expected time O (mn 6 (mn) log 2 mn). A somewhat more complex variant of the algorithm runs in expected O (mn 6 (mn) log mn) time. <p> We omit the details concerning the gluing process, Page 7 as they are essentially the same as in the preceding algorithms <ref> [1, 3, 11] </ref>. Note that @K ( 0 ) consists of all (free or non-free) placements of P at which its boundary makes contact with @ 0 and P and 0 are openly disjoint. <p> Note that there is an alternative, randomized incremental approach to construct each K , in which we add the 's one at a time, in a random order, and maintain a `trapezoidal' decomposition of the complement of their union; see <ref> [1, 3, 9] </ref>. The analysis of this technique is fairly standard, so we omit it here. The expected running time of this approach is only O (mn 6 (mn) log mn), so this technique is slightly faster, but somewhat more complicated.
Reference: [4] <author> H. S. Baird, </author> <title> Model-Based Image Matching Using Location, Distinguished Dissertation Series, </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1984. </year>
Reference-contexts: We observe, following Baird <ref> [4] </ref>, that similar placements of P can be parameterized nicely by referring to an arbitrarily chosen reference point p 2 P .
Reference: [5] <author> R. Basri and D. Jacobs, </author> <title> Recognition using region correspondences, </title> <booktitle> Proc. 5th Int. Conf. Comput. Vision, </booktitle> <year> 1985, </year> <pages> pp. 8-13. </pages>
Reference-contexts: Previous results: Convex environment. One faces a much simpler situation when Q is also a convex polygon. The resulting problems are still challenging and have an interesting geometric structure. They also have several applications (see, e.g, <ref> [5] </ref> for a computer vision application). The only previous attack on the problem, in which P is assumed to have a fixed size, is in [6]. It is shown there that one can determine in O (mn 2 ) time whether P can be placed inside Q.
Reference: [6] <author> B. Chazelle, </author> <title> The polygon containment problem, </title> <booktitle> in Advances in Computing Research, </booktitle> <volume> Vol. 1: </volume> <editor> Computational Geometry (F. P. Preparata, Ed.), </editor> <publisher> JAI Press, </publisher> <address> London, England, </address> <year> 1983, </year> <pages> pp. 1-33. </pages>
Reference-contexts: Previous results: General environment. Both problems are important basic problems in robotics and manufacturing, and have been studied intensively in computational geometry, starting about 15 years ago. Some of the initial results on this problem can be found in <ref> [6, 13, 20, 23] </ref>; these algorithms are either inefficient or consider only special cases (e.g., where P is assumed to be a line segment). <p> The resulting problems are still challenging and have an interesting geometric structure. They also have several applications (see, e.g, [5] for a computer vision application). The only previous attack on the problem, in which P is assumed to have a fixed size, is in <ref> [6] </ref>. It is shown there that one can determine in O (mn 2 ) time whether P can be placed inside Q.
Reference: [7] <author> B. Chazelle and J. Friedman, </author> <title> A deterministic view of random sampling and its use in geometry, </title> <booktitle> Combinator-ica 10 (1990), </booktitle> <pages> 229-249. </pages>
Reference-contexts: Hence, to complete our algorithm, we need to detect and discard the facets of the hulls conv (S K ) which are not facets of D. This is accomplished as follows. We triangulate each computed facet F into O (jF j) tetrahedra, using the bottom-vertex triangulation scheme described in <ref> [7] </ref>. Let denote the set of resulting tetrahedra; jj = O (mn 2 ). Let D fl be the bottom-vertex triangulation of the boundary of D. We want to discard those tetrahedra of that are not facets of D fl .
Reference: [8] <author> L.P. Chew and K. Kedem, </author> <title> A convex polygon among polygonal obstacles: placement and high-clearance motion, </title> <journal> Comput. Geom. Theory Appls. </journal> <volume> 3(2) (1993), </volume> <pages> 59-89. </pages>
Reference-contexts: The case in which scaling is allowed, and we seek the largest placement of P inside Q, has been studied in <ref> [8, 22] </ref>. Using generalized Delaunay triangulations induced by P in Q, Chew and Kedem [8] gave an O (m 4 n 2 ff (n) log n)-time algorithm for computing a largest free similar placement of P in Q; here ff (n) is the inverse Ackermann's function. <p> The case in which scaling is allowed, and we seek the largest placement of P inside Q, has been studied in [8, 22]. Using generalized Delaunay triangulations induced by P in Q, Chew and Kedem <ref> [8] </ref> gave an O (m 4 n 2 ff (n) log n)-time algorithm for computing a largest free similar placement of P in Q; here ff (n) is the inverse Ackermann's function. <p> Using an approach based on parametric searching, similar to that of [22], we can find the largest similar placement of P in Q, in randomized expected time O (mn 6 (mn) log 5 mn), thus improving significantly over the previous bounds in <ref> [8, 22] </ref>. We note that the parametric searching requires an `oracle' procedure that has to determine, for a given size of P , whether the corresponding C is nonempty, which we can do using our algorithm for computing the entire C.
Reference: [9] <author> M. de Berg, K. Dobrindt, and O. Schwarzkopf, </author> <title> On lazy randomized incremental construction, </title> <journal> Discrete Comput. Geom. </journal> <volume> 14 (1995), </volume> <pages> 261-286. </pages>
Reference-contexts: Note that there is an alternative, randomized incremental approach to construct each K , in which we add the 's one at a time, in a random order, and maintain a `trapezoidal' decomposition of the complement of their union; see <ref> [1, 3, 9] </ref>. The analysis of this technique is fairly standard, so we omit it here. The expected running time of this approach is only O (mn 6 (mn) log mn), so this technique is slightly faster, but somewhat more complicated.
Reference: [10] <author> L. Guibas, L. Ramshaw, and J. Stolfi, </author> <title> A kinetic framework for computational geometry, </title> <booktitle> Proc. 24th Annu. IEEE Sympos. </booktitle> <institution> Found. Comput. Sci., </institution> <year> 1983, </year> <pages> pp. 100-111. </pages>
Reference-contexts: The algorithm is simply to form the polygons G i;j , take their three-dimensional convex hull, and intersect it with v fl = 0. Since the Minkowski sum of two convex polygons can be computed in linear time <ref> [10] </ref>, we spend O (mn 2 ) time in computing the polygons G i;j .
Reference: [11] <author> K. Kedem and M. Sharir, </author> <title> An efficient motion planning algorithm for a convex rigid polygonal object in 2-dimensional polygonal space, </title> <journal> Discrete Comput. Geom. </journal> <volume> 5 (1990), </volume> <pages> 43-75. </pages>
Reference-contexts: Thus the complexity of C is near-quadratic in mn. The goal then was to compute C in time that is also near-quadratic in mn. The first result in this direction is in <ref> [11] </ref>, where an O (mn 6 (mn) log mn)-time algorithm was proposed. <p> A second solution is given by Kedem et al. [12]. It remains within the time complexity O (mn 6 (mn) log mn) of the algorithm of <ref> [11] </ref>, but it may fail to produce the entire space C. <p> We omit the details concerning the gluing process, Page 7 as they are essentially the same as in the preceding algorithms <ref> [1, 3, 11] </ref>. Note that @K ( 0 ) consists of all (free or non-free) placements of P at which its boundary makes contact with @ 0 and P and 0 are openly disjoint.
Reference: [12] <author> K. Kedem, M. Sharir and S. Toledo, </author> <title> On critical orientations in the Kedem-Sharir motion planning algorithm for a convex polygon in the plane, </title> <booktitle> Proc. 5th Canadian Conference on Computational Geometry (1993), </booktitle> <pages> 204-209. </pages>
Reference-contexts: A second solution is given by Kedem et al. <ref> [12] </ref>. It remains within the time complexity O (mn 6 (mn) log mn) of the algorithm of [11], but it may fail to produce the entire space C. <p> Even for the task of computing only a portion of C, our algorithms are simpler than the ones in <ref> [12, 22] </ref>. <p> Notice that we cannot use the algorithm by Kedem et al. <ref> [12] </ref> here, because it may miss some of the components of C. 2 Largest Placement of One Convex Polygon Inside Another Let P be a convex polygon with m edges and Q a convex polygon with n edges.
Reference: [13] <author> D. Leven and M. Sharir, </author> <title> An efficient and simple motion planning algorithm for a ladder moving in two-dimensional space amidst polygonal barriers, </title> <editor> J. </editor> <booktitle> Algorithms 8 (1987), </booktitle> <pages> 192-215. </pages>
Reference-contexts: Previous results: General environment. Both problems are important basic problems in robotics and manufacturing, and have been studied intensively in computational geometry, starting about 15 years ago. Some of the initial results on this problem can be found in <ref> [6, 13, 20, 23] </ref>; these algorithms are either inefficient or consider only special cases (e.g., where P is assumed to be a line segment).
Reference: [14] <author> D. Leven and M. Sharir, </author> <title> On the number of critical free contacts of a convex polygonal object moving in two-dimensional polygonal space, </title> <journal> Discrete Comput. Geom. </journal> <volume> 2 (1987), </volume> <pages> 255-270. </pages>
Reference-contexts: Some of the initial results on this problem can be found in [6, 13, 20, 23]; these algorithms are either inefficient or consider only special cases (e.g., where P is assumed to be a line segment). The first significant development was made by Leven and Sharir <ref> [14] </ref>, who showed that the combinatorial complexity of C, when no scaling is allowed, is O (mn 6 (mn)). Here s (q) is the maximum length of (q; s)-Davenport-Schinzel sequences [21], which is nearly linear in q for any fixed s. Thus the complexity of C is near-quadratic in mn.
Reference: [15] <author> D. Leven and M. Sharir, </author> <title> Planning a purely translational motion for a convex object in two-dimensional space using generalized Voronoi diagrams, </title> <journal> Discrete Comput. Geom. </journal> <volume> 2 (1987), </volume> <pages> 9-31. </pages>
Reference-contexts: If only translations and scalings are allowed, the largest homothetic placement of P inside Q can be computed in time O (mn log n), using the generalized Voronoi diagram of @Q induced by P <ref> [15] </ref>. Previous results: Convex environment. One faces a much simpler situation when Q is also a convex polygon. The resulting problems are still challenging and have an interesting geometric structure. They also have several applications (see, e.g, [5] for a computer vision application).
Reference: [16] <author> N. Megiddo, </author> <title> Applying parallel computation algorithms in the design of serial algorithms, </title> <editor> J. </editor> <booktitle> ACM 30 (1983), </booktitle> <pages> 852-865. </pages>
Reference-contexts: Sharir and Toledo [22] proposed another algorithm that combines parametric searching <ref> [16] </ref> with a construction of the entire configuration space for the fixed-size case, as in the preceding paragraph; the running time of their algorithm is O (m 2 n 4 (mn) log 3 mn log log mn), which is close to O (m 3 n 2 ). <p> Finding the largest placement of P . As mentioned in the beginning of this section, we use the parametric-searching technique of Megiddo <ref> [16] </ref> to compute a largest collision-free similar placement of P inside Q. The parametric searching requires an `oracle' procedure to determine, for a given scalin factor of P , whether the corresponding C is nonempty.
Reference: [17] <author> F. Preparata and S. Hong, </author> <title> Convex hulls of finite sets of points in two and three dimensions, Commun. </title> <booktitle> ACM 20 (1977), </booktitle> <pages> 87-93. </pages>
Reference-contexts: Since the Minkowski sum of two convex polygons can be computed in linear time [10], we spend O (mn 2 ) time in computing the polygons G i;j . Their convex hull can be computed in O (mn 2 log n) time, using the divide-and-conquer algorithm of <ref> [17] </ref> (which has now only O (log n) recursive levels, because we start with the already available polygons G i;j ).
Reference: [18] <author> F. P. Preparata and M. I. Shamos, </author> <title> Computational Geometry: An Introduction, </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1985. </year>
Reference-contexts: This already implies that the combinatorial complexity of C is O (m 2 n 2 ), and that it can be constructed in O (m 2 n 2 ) time <ref> [18] </ref>. However, we will improve this bound in what follows, exploiting the fact that C is highly degenerate. The main results of this section are: Theorem 1 The vertices of the projection of C onto the st-plane can be computed in time O (mn 2 log n).
Reference: [19] <author> F.P. Preparata and R. Tamassia, </author> <title> Efficient point location in a convex spatial cell-complex, </title> <journal> SIAM J. Comput. </journal> <volume> 21 (1992), </volume> <pages> 267-280. </pages>
Reference: [20] <author> J.T. Schwartz and M. Sharir, </author> <title> On the Piano Movers' problem: I. The case of a rigid polygonal body moving amidst polygonal barriers, </title> <journal> Comm. Pure and Appl. Math. </journal> <volume> 36 (1983), </volume> <pages> 345-398. </pages>
Reference-contexts: Previous results: General environment. Both problems are important basic problems in robotics and manufacturing, and have been studied intensively in computational geometry, starting about 15 years ago. Some of the initial results on this problem can be found in <ref> [6, 13, 20, 23] </ref>; these algorithms are either inefficient or consider only special cases (e.g., where P is assumed to be a line segment). <p> There are O (m) such orientations, and can easily be obtained by sorting and processing these orientations in increasing order. Hence, @ consists of O (m) arcs. As shown in <ref> [20] </ref>, each such arc is a section of an algebaric curve of degree at most 4. can be computed in O (m log m) time. The total time needed to produce the sets , over all , is thus n fi O (m log m) = O (mn log m).
Reference: [21] <author> M. Sharir and P. K. Agarwal, </author> <title> Davenport-Schinzel Sequences and Their Geometric Applications, </title> <publisher> Cambridge University Press, </publisher> <address> New York, </address> <year> 1995. </year>
Reference-contexts: The first significant development was made by Leven and Sharir [14], who showed that the combinatorial complexity of C, when no scaling is allowed, is O (mn 6 (mn)). Here s (q) is the maximum length of (q; s)-Davenport-Schinzel sequences <ref> [21] </ref>, which is nearly linear in q for any fixed s. Thus the complexity of C is near-quadratic in mn. The goal then was to compute C in time that is also near-quadratic in mn.
Reference: [22] <author> M. Sharir and S. Toledo, </author> <title> Extremal polygon containment problems, </title> <journal> Comput. Geom. Theory Appls. </journal> <volume> 4 (1994), </volume> <pages> 99-118. </pages>
Reference-contexts: However, this filtering was not handled correctly in some cases. Two subsequent papers aimed to fix this problem. The first solution is given by Sharir and Toledo <ref> [22] </ref>. It processes Q into several range-searching data structures, and then it queries these structures with each placement of P produced by the algorithm. <p> The case in which scaling is allowed, and we seek the largest placement of P inside Q, has been studied in <ref> [8, 22] </ref>. Using generalized Delaunay triangulations induced by P in Q, Chew and Kedem [8] gave an O (m 4 n 2 ff (n) log n)-time algorithm for computing a largest free similar placement of P in Q; here ff (n) is the inverse Ackermann's function. <p> Using generalized Delaunay triangulations induced by P in Q, Chew and Kedem [8] gave an O (m 4 n 2 ff (n) log n)-time algorithm for computing a largest free similar placement of P in Q; here ff (n) is the inverse Ackermann's function. Sharir and Toledo <ref> [22] </ref> proposed another algorithm that combines parametric searching [16] with a construction of the entire configuration space for the fixed-size case, as in the preceding paragraph; the running time of their algorithm is O (m 2 n 4 (mn) log 3 mn log log mn), which is close to O (m <p> It is shown there that one can determine in O (mn 2 ) time whether P can be placed inside Q. Computing a largest homothetic copy of P inside Q (i.e., allowing only translations and scalings) can be done in O (m + n) time, using a linear-programming approach <ref> [22] </ref>. <p> Even for the task of computing only a portion of C, our algorithms are simpler than the ones in <ref> [12, 22] </ref>. <p> Using an approach based on parametric searching, similar to that of <ref> [22] </ref>, we can find the largest similar placement of P in Q, in randomized expected time O (mn 6 (mn) log 5 mn), thus improving significantly over the previous bounds in [8, 22]. <p> Using an approach based on parametric searching, similar to that of [22], we can find the largest similar placement of P in Q, in randomized expected time O (mn 6 (mn) log 5 mn), thus improving significantly over the previous bounds in <ref> [8, 22] </ref>. We note that the parametric searching requires an `oracle' procedure that has to determine, for a given size of P , whether the corresponding C is nonempty, which we can do using our algorithm for computing the entire C.
Reference: [23] <author> S. Sifrony and M. Sharir, </author> <title> A new efficient motion planning algorithm for a rod in two-dimensional polygonal space, </title> <booktitle> Algorithmica 2 (1987), </booktitle> <pages> 367-402. </pages>
Reference-contexts: Previous results: General environment. Both problems are important basic problems in robotics and manufacturing, and have been studied intensively in computational geometry, starting about 15 years ago. Some of the initial results on this problem can be found in <ref> [6, 13, 20, 23] </ref>; these algorithms are either inefficient or consider only special cases (e.g., where P is assumed to be a line segment).
Reference: [24] <author> L. Valiant, </author> <title> Parallelism in comparison problems, </title> <journal> SIAM J. Comput. </journal> <volume> 4(3) (1975), </volume> <pages> 348-355. Page 11 </pages>
Reference-contexts: Using Theorem 6, we can obtain an oracle that performs this task in expected time O (mn 6 (mn) log 2 mn). An efficient implementation of the parametric searching, however, also requires a parallel algorithm for the oracle (in Valiant's comparisons model <ref> [24] </ref>). The only part of the above randomized algorithm that is difficult to parallelize is the sweep-line procedure used in the merge step, because a sweep-line algorithm is inherently sequential.
References-found: 24

