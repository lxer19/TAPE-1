URL: http://www.cs.uoregon.edu/~hacks/phd/comp/plan/hacks-oce-plan.ps
Refering-URL: http://www.cs.uoregon.edu/~hacks/phd/
Root-URL: http://www.cs.uoregon.edu
Email: hacks@cs.uoregon.edu  
Title: Oral Comprehensive Exam Study Plan Specificity Through Abstraction: Domain-Specific Metacomputing for Computational Science  Committee Members:  
Author: Steven T. Hackstadt Prof. Allen D. Malony (Chair) Prof. Janice E. Cuny Prof. Virginia M. Lo 
Note: Table of Contents  
Date: January 1997  
Address: OR 97403-1202  
Affiliation: Department of Computer and Information Science University of Oregon, Eugene,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> J. Cuny, R. Dunn, S. Hackstadt, C. Harrop, H. Hersey, A. Malony, and D. Toomey. </author> <title> Building Domain-Specific Environments for Computational Science: A Case Study in Seismic Tomography, </title> <booktitle> Proceedings of the Workshop on Environments and Tools For Parallel Scientific Computing, </booktitle> <address> Lyon, France, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: Thus, at the core of the exam is an understanding of computational scientists' needs. Initial research suggests that there is a substantial need for domain-specific problem solving environments for computational scientists <ref> [1] </ref>. At least three characteristics are central to addressing the domain-specific aspects of computational science applications: interoperability, portability, and extensibility. Creating software tool architectures and component frameworks with these properties is nontrivial.
Reference: [2] <author> I. Foster and C. Kesselman, Globus: </author> <title> A Metacomputing Infrastructure Toolkit, </title> <booktitle> Proceedings of the Workshop on Environments and Tools For Parallel Scientific Computing, </booktitle> <address> Lyon, France, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: the application of metacomputing technology to computational science problems. 2.1 Metacomputing Recently, there has been an explosion of research activity in the area of metacomputing, or "execution environments in which high-speed networks are used to connect supercomputers, databases, scientific instruments, and advanced display devices, perhaps located at geographically distributed sites" <ref> [2] </ref>. The goal of metacomputing is two-fold: (1) to increase accessibility to high performance computing and (2) to enable unique capabilities that are not feasible in any other environment.
Reference: [3] <institution> The Object Management Group, </institution> <note> http://www.omg.org/, December 1996. </note>
Reference-contexts: If such a specification is widely accepted, then standard components can be built. At least, this is the approach taken by the Object Management Group (OMG), a consortium "dedicated to promoting the theory and practice of object technology for the development of distributed computing systems" <ref> [3] </ref>. Their goal is to define an integrated framework through which underlying technologies can be accessed by software developers, and they have been largely successful in accomplishing this goal. However, despite their promising work, several fundamental problems still exist.
Reference: [4] <institution> Open Doc, Apple Computer, Inc., </institution> <note> http://www.opendoc.apple.com/, December 1996. </note>
Reference-contexts: In this case, metacomputing can learn a big lesson from the distributed object movement. Certain object systems, like OpenDoc and OLE, attempt to target end-users and close the gap between the technology and the ultimate users of it. OpenDoc <ref> [4] </ref>, the most mature of these systems, accomplishes this by supporting a familiar "document" abstraction through which the user (perhaps even unknowingly) interacts with distributed resources.
Reference: [5] <institution> The Parallel Tools Consortium, </institution> <note> http://www.ptools.org/, September 1996. </note>
Reference-contexts: Each of these technologies has added individual capabilities to computing in general. But the inundation of new high performance computing technologies has greatly complicated the development and use of software in this area <ref> [5] </ref>. Each developer uses the technologies in different ways (e.g., with respect to interfaces, protocols, etc.) and the result is inconsistent user interfaces and functionality across computing platforms. Metacomputing systems may help this situation by providing a common means of accessing underlying machine or network capabilities.
Reference: [6] <author> R. M. Soley, </author> <title> Ph.D. The Software Crisis Presentation, Object Management Group, 1993. This and related documents are available at http://www.cs.uoregon.edu/~hacks/phd/ Last modified: </title> <address> Tue Jan 21 12:54:01 1997 Steven Hackstadt / hacks@cs.uoregon.edu </address>
Reference-contexts: Metacomputing systems may help this situation by providing a common means of accessing underlying machine or network capabilities. The situation is not unlike the "software crisis" described by Soley in motivating the development of distributed object systems like CORBA <ref> [6] </ref>.
References-found: 6

