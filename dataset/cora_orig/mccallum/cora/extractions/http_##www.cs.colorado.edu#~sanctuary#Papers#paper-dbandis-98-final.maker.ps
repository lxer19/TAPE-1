URL: http://www.cs.colorado.edu/~sanctuary/Papers/paper-dbandis-98-final.maker.ps
Refering-URL: http://www.cs.colorado.edu/~sanctuary/database.shtml
Root-URL: http://www.cs.colorado.edu
Email: e-mail: mciver@cs.colorado.edu, roger@cs.colorado.edu, rick@cs.colorado.edu  
Title: The COIL Project: A Common Object Interconnection Language to Support Database Integration and Evolution 1  
Author: William J. McIver, Jr., Roger King, Richard M. Osborne, and Christian Och 
Address: Boulder, Colorado 80309-0430  
Affiliation: Database Research Laboratory Department of Computer Science University of Colorado  
Abstract: The COIL Project is an effort to design a module interconnection language specifically for managing database integration and evolution. This project is a significant part of a larger effort to build a database integration and evolution environment called Sanctuary. COIL will make a significant contribution to module interconnection language research by providing interface symmetry, application-level module composition, and syntactic analysis capabilities for systems constructed with the Object Management Groups Common Object Request Broker Technology (CORBA). Since CORBA is the state-of-the-art in distributed, object-based technologies, and since it has been adopted by over 800 software vendors, software developers and end users, this research will have immediate and high impact. This paper presents a discussion of the motivation, background, and fundamental module interconnection language issues and goals for the COIL project. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> T. Ball, J. R. Larus: </author> <title> Optimally Profiling and Tracing Programs. </title> <journal> TOPLAS. </journal> <volume> Vol. 16, No. 4. </volume> <pages> pp. 1319-1360. </pages> <year> 1994. </year>
Reference: 2. <author> O. Bukhres, A. K. Elmagarmid, and E. Kuhn. </author> <title> Advanced Languages for Multidatabase Systems. Chapter in Object-Oriented Multidatabase Systems, A.K. </title> <editor> Elmagarmid, O. Bukhres (eds), </editor> <publisher> Prentice-Hall. </publisher> <year> 1994. </year>
Reference-contexts: Database integration and evolution problems in multidatabase environments present unique challenges in module interconnection research. First, a module interconnection language in this context must provide support during module composition for the integration of the different local database language interfaces that are constituents of a multidatabase environment <ref> [2, 17] </ref>. Second, module composition in a multidatabase environment is likely require support for traditional and advanced transaction models [6] for inter-module communication. Finally, production-quality database integration, migration, and evolution mechanisms should ideally support fault-tolerant switch-over to new module configurations or composites [29].
Reference: 3. <author> R. Cattell. </author> <title> The Object Database Standard: ODMG-93. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo, California, </address> <year> 1993. </year>
Reference: 4. <author> T. R. Dean and J. R. Cordy. </author> <title> A Syntactic Theory of Software Architecture. </title> <journal> IEEE Transactions on Software Engineering. </journal> <volume> Vol. 21, No. 4, </volume> <month> April </month> <year> 1995. </year>
Reference-contexts: Syntactic Analysis COIL will be based on a formal syntactic model of a CORBA-based module interconnection language. This will provide a consistent and meaningful framework in which axioms can be developed to reason about structural aspects of module composition. COIL can draw upon work such as <ref> [4] </ref> and [5] here. Module Evolution Analysis COIL must be capable of expressing the essential nature of future structural and functional changes produced by modifications to software systems composed with it. <p> For example, this capability would provide support for preserving CORBA facilities and services dependencies, as discussed in the previous section. COIL can draw upon work such as <ref> [4] </ref> here. This and other approaches must be re-contextualized and extended to deal with the unique challenges presented by database integration and evolution problems and CORBA. Module Behavior Analysis COIL must also be capable of expressing behavioral constraints and requirements of software modules.
Reference: 5. <author> T. R. Dean and D. A. Lamb. </author> <title> A Theory Model Core for Module Interconnection Languages. </title> <type> External Technical Report ISSN-0836-0235-94-370. </type> <institution> Department of Computing and Information Science, Queens University, Kingston, Canada. </institution> <month> October </month> <year> 1994. </year>
Reference-contexts: Syntactic Analysis COIL will be based on a formal syntactic model of a CORBA-based module interconnection language. This will provide a consistent and meaningful framework in which axioms can be developed to reason about structural aspects of module composition. COIL can draw upon work such as [4] and <ref> [5] </ref> here. Module Evolution Analysis COIL must be capable of expressing the essential nature of future structural and functional changes produced by modifications to software systems composed with it.
Reference: 6. <author> A.K. Elmagarmid (ed.). </author> <title> Database Transaction Models for Advanced Applications. </title> <publisher> Morgan Kaufmann Publishers. </publisher> <year> 1991. </year>
Reference-contexts: Second, module composition in a multidatabase environment is likely require support for traditional and advanced transaction models <ref> [6] </ref> for inter-module communication. Finally, production-quality database integration, migration, and evolution mechanisms should ideally support fault-tolerant switch-over to new module configurations or composites [29]. CORBA presents unique challenges in module interconnection research. The Object Management Architecture defines the environment within which CORBA exists [23].
Reference: 7. <author> J. A. Goguen. </author> <title> LIL -- A Library Interconnect Language. </title> <booktitle> In Report on Program Libraries Workshop. </booktitle> <pages> pp. 12-51. </pages> <address> Menlo Park, </address> <institution> California. SRI International. </institution> <month> October </month> <year> 1983. </year>
Reference: 8. <author> R. W. Gray, V. P. Heuring, S. P. Levi, A. M. Sloane, W. M. Waite. "Eli: </author> <title> A Complete, Flexible Compiler Construction System", </title> <journal> CACM, </journal> <volume> 35 (February, </volume> <year> 1992) </year> <month> 121-131. </month>
Reference: 9. <author> P. Hall and R. Weedon. </author> <title> Object Oriented Module Interconnection Languages. </title> <type> Technical Report. </type> <institution> Department of Computing. Open University, Milton Keynes, </institution> <address> England. </address> <year> 1992. </year>
Reference-contexts: The goals for the COIL project are to create a language that can give support in the following areas: Interface Symmetry CORBAs interface definition language lacks a symmetry recognized as a fundamental requirement in module interconnection languages <ref> [9] </ref>. An asymmetry exists in its interface definition language, as in most programming languages, where the interfaces provided by objects are made explicit, but the interfaces required by objects are encapsulated within objects and are implicitly represented by method invocations in the code.
Reference: 10. <author> D. Heimbigner and D. McLeod. </author> <title> A federated architecture for information management. </title> <journal> ACM Trans. on Office Information Systems, </journal> <volume> 3(3), </volume> <pages> pages 253-278. </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: This research is being funded under DARPA order B126 (Rome AF contract F30602-94-C-0253), under DARPA/NASA contract NAG2-862, and under NSF award IRI-9632595. Pegasus [30], UniSQL [14], multidatabase systems (e.g., InterBase [20]), and Federated databases <ref> [10] </ref>. Sanctuary is a database integration and evolution environment for supporting exactly such large, heterogeneous environments [15, 16] 1 .
Reference: 11. <institution> INRIA: Projet Sirac. Olan : un environnement pour la programmation par composants. </institution> <address> http:// sirac.inrialpes.fr/Sirac/olan-francais.html. </address> <month> December </month> <year> 1997. </year>
Reference-contexts: For example, it should be possible to express the composition of a set of client application objects with multiple application server objects associated with their underlying database systems. CORBA is designed for integrating objects, not whole applications <ref> [11] </ref>. A plethora of good research on creating module interconnection languages for existing systems can be drawn upon to achieve this goal [2,4,5,7,9,17,20,26,31]. These approaches must be re-contextualized and extended to deal with the unique challenges presented by database integration and evolution problems and CORBA.
Reference: 12. <author> P. Inverardi and A.L. Wolf. </author> <title> Formal Specification and Analysis of Software Architectures Using the Chemical Abstract Machine Model. </title> <journal> IEEE Transactions on Software Engineering. </journal> <volume> Vol. 21, No. 4, </volume> <month> April </month> <year> 1995. </year>
Reference-contexts: For example, one module may require that the module to which it interfaces uses non-blocking behavior, or that it marshals data according to certain capacity constraints. Specification and analysis of software system behavior has been dealt with in <ref> [12] </ref> and [13]. Again, these approaches must be re-contextualized and extended to deal with the unique challenges presented by database integration and evolution problems and CORBA, as discussed in the previous section. Support for other special types of module behavior such as temporal constraints might also be built into COIL.
Reference: 13. <author> A. Isazadeh, D. A. Lamb, G. H. MacEwen. Viewcharts: </author> <title> A Behavioral Specification Language for Complex Systems. </title> <type> External Technical Report ISSN-0836-0227-95-388. </type> <institution> Department of Computing and Information Science, Queens University, Kingston, Canada. </institution> <month> October 31, </month> <year> 1995. </year>
Reference-contexts: For example, one module may require that the module to which it interfaces uses non-blocking behavior, or that it marshals data according to certain capacity constraints. Specification and analysis of software system behavior has been dealt with in [12] and <ref> [13] </ref>. Again, these approaches must be re-contextualized and extended to deal with the unique challenges presented by database integration and evolution problems and CORBA, as discussed in the previous section. Support for other special types of module behavior such as temporal constraints might also be built into COIL.
Reference: 14. <author> W. Kelley, S. Gala, W. Kim, T. Reyes, and B.Graham. </author> <title> Schema architecture of the UniSQL/M multidatabase system. </title> <editor> In W. Kim, editor, </editor> <booktitle> Modern Database Systems, </booktitle> <pages> pages 621-648. </pages> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: There are several systems that have either taken this approach, or at least require a substantial amount of schema integration; these include 1. This research is being funded under DARPA order B126 (Rome AF contract F30602-94-C-0253), under DARPA/NASA contract NAG2-862, and under NSF award IRI-9632595. Pegasus [30], UniSQL <ref> [14] </ref>, multidatabase systems (e.g., InterBase [20]), and Federated databases [10]. Sanctuary is a database integration and evolution environment for supporting exactly such large, heterogeneous environments [15, 16] 1 .
Reference: 15. <author> R. King, M. Novak, and C. </author> <title> Och. Sybil: Supporting heterogeneous database interoperability with lightweight alliances. </title> <booktitle> In The Third International Workshop on Next Generation Information Technologies and Systems, </booktitle> <year> 1997. </year>
Reference-contexts: Pegasus [30], UniSQL [14], multidatabase systems (e.g., InterBase [20]), and Federated databases [10]. Sanctuary is a database integration and evolution environment for supporting exactly such large, heterogeneous environments <ref> [15, 16] </ref> 1 . <p> Unidata/VMARK CODASYL databases to O 2 object-oriented databases; support the building of new object-oriented applications atop old CODASYL applications; support the interoperation of the storage system of the WinWin application from USC and a CORBA-based system; and, support the integration of the object-oriented Catalyst software engineering environment with ODBC-compliant DBMSs <ref> [15, 16] </ref>. 2. Background: The Sanctuary/COIL Architecture and Implementation The Sanctuary approach is based on loosely coupling databases or other sources of persistent data into what might be thought of as lightweight alliances tailored for a specific application (or set of applications).
Reference: 16. <author> R. King, C. Och, and R. Osborne. Sybil: </author> <title> Evolving software persistence layers. </title> <journal> Software Engineering News, </journal> <year> 1997. </year>
Reference-contexts: Pegasus [30], UniSQL [14], multidatabase systems (e.g., InterBase [20]), and Federated databases [10]. Sanctuary is a database integration and evolution environment for supporting exactly such large, heterogeneous environments <ref> [15, 16] </ref> 1 . <p> Unidata/VMARK CODASYL databases to O 2 object-oriented databases; support the building of new object-oriented applications atop old CODASYL applications; support the interoperation of the storage system of the WinWin application from USC and a CORBA-based system; and, support the integration of the object-oriented Catalyst software engineering environment with ODBC-compliant DBMSs <ref> [15, 16] </ref>. 2. Background: The Sanctuary/COIL Architecture and Implementation The Sanctuary approach is based on loosely coupling databases or other sources of persistent data into what might be thought of as lightweight alliances tailored for a specific application (or set of applications).
Reference: 17. <author> E. Kuhn. </author> <title> Multidatabase Language Requirements. </title> <booktitle> Proceedings of the 3rd International RIDE-IMS Workshop. IEEE. </booktitle> <year> 1993. </year>
Reference-contexts: Database integration and evolution problems in multidatabase environments present unique challenges in module interconnection research. First, a module interconnection language in this context must provide support during module composition for the integration of the different local database language interfaces that are constituents of a multidatabase environment <ref> [2, 17] </ref>. Second, module composition in a multidatabase environment is likely require support for traditional and advanced transaction models [6] for inter-module communication. Finally, production-quality database integration, migration, and evolution mechanisms should ideally support fault-tolerant switch-over to new module configurations or composites [29].
Reference: 18. <author> J. Melton. </author> <title> In ISO/ANSI Working Draft Database SQL (SQL3). </title> <year> 1993. </year>
Reference: 19. <institution> Microsoft Corporation. ODBC 3.0 Specification. </institution> <note> http://www.microsoft.com/odbc/docs/odbc.hlp. 1997. </note>
Reference: 20. <author> J. Mullen, O. Bukhres, and A. Elmagarmid. </author> <title> Interbase: A multidatabase system. </title> <editor> In O. Bukhres and A. Elmagarmid, editors, </editor> <booktitle> Object-Oriented Multidatabase Systems, </booktitle> <pages> pages 652-683. </pages> <publisher> Prentice-Hall, </publisher> <year> 1996. </year>
Reference-contexts: This research is being funded under DARPA order B126 (Rome AF contract F30602-94-C-0253), under DARPA/NASA contract NAG2-862, and under NSF award IRI-9632595. Pegasus [30], UniSQL [14], multidatabase systems (e.g., InterBase <ref> [20] </ref>), and Federated databases [10]. Sanctuary is a database integration and evolution environment for supporting exactly such large, heterogeneous environments [15, 16] 1 .
Reference: 21. <author> The Object Management Group. </author> <title> The Common Object Request Broker: Architecture and Specification. Revision 2.0. </title> <note> http://www.omg.org. July 1995. </note>
Reference-contexts: Client application objects can then query a trading object in an attempt to discover instances of a desired service 3 . The CORBA IDL specification for the Location Service interface will resemble the following: import Sanctuary.idl interface SanctuaryLocationService - SanctuaryProxyObject FindMatching (in SanctuaryQueryObject query_expression);-; 1. See <ref> [21] </ref> for details on CORBA IDL. 2. This action is called exporting in CORBA terminology. 3. For further information on the CORBA Trading Object Service see [21]. The Proxy Service facilitates communication between application objects via an interoperation or data migration applet. <p> See <ref> [21] </ref> for details on CORBA IDL. 2. This action is called exporting in CORBA terminology. 3. For further information on the CORBA Trading Object Service see [21]. The Proxy Service facilitates communication between application objects via an interoperation or data migration applet. It does so by creating a proxy object for each applet used. Client and server application objects then communicate via the applet using the interface presented to them by the proxy object.
Reference: 22. <institution> The Object Management Group. Common Facilities Architecture. </institution> <note> Revision 4.0. http://www.omg.org. November 1995. </note>
Reference-contexts: The term Application Object is used here as defined in the Object Management Groups Object Management Architecture Reference Mode, meaning objects specific to particular commercial products or end user systems. See <ref> [22] </ref> for further details. generates. The stubs also represent the actual interfaces called by the Proxy Service in the Sanctuary Run-time Services Environment when it invokes requests on application objects (on behalf of client application objects). The Proxy Service will be explained in greater detail below. <p> The events service also permits blocking and non-blocking push and pull; fan-in and fan-out of event ows; and typed event communication, allowing suppliers to call operations on consumers through some mutually-agreed interface. In addition, notification and callback services are provided between servers and clients <ref> [22] </ref>. 1. The OMG-specific term Application Level is used specifically to indicate that COIL is concerned with application-level interconnection. 4. Conclusion: The COIL Project Research Goals This project is informed and motivated by a broad spectrum of module interconnection language work.
Reference: 23. <institution> The Object Management Group, Object Management Architecture, </institution> <note> Revision 3.0. http://www.omg.org. 1995. </note>
Reference-contexts: Finally, production-quality database integration, migration, and evolution mechanisms should ideally support fault-tolerant switch-over to new module configurations or composites [29]. CORBA presents unique challenges in module interconnection research. The Object Management Architecture defines the environment within which CORBA exists <ref> [23] </ref>. The OMA carries with it a far more complex collection of standard mechanisms, services, and facilities than contexts to which earlier MILs have been applied. These resources make it possible to offer much richer module interconnection mechanisms than heretofore possible.
Reference: 24. <institution> The Object Management Group. </institution> <note> Who is OMG? http://www.omg.org/about/whorwe.htm. 1997. </note>
Reference: 25. <author> P. Pazandak and J. Srivastava. </author> <title> The Language Components of DAMSEL: An Embedable Event-driven Declarative Multimedia Specification Language. </title> <booktitle> Presented At SPIE's Photonics East '95 , First International Symposium on Technologies and Systems for Voice, Video, and Data Communications, </booktitle> <address> Pittsburg, PA. </address> <year> 1995. </year>
Reference-contexts: Support for other special types of module behavior such as temporal constraints might also be built into COIL. The DAMSEL project is an example of specialized module interconnection support; in their case, support for event-driven, multimedia applications <ref> [25] </ref>. Fault-tolerant Module Interconnection The COIL environment must be capable of supporting fault-tolerant switch-over to new module configurations or composites. The very purpose of COIL (and of Sanctuary) is to support real-world database integration and evolution problems.
Reference: 26. <author> M. Purtilo. </author> <title> The POLYLITH Software Bus. </title> <journal> ACM Transactions of Programming Languages and Systems. </journal> <volume> Vol 16, No 1, </volume> <pages> pp 151-174. </pages> <month> January </month> <year> 1994. </year>
Reference: 27. <author> T. W. Reps. </author> <title> The Use of Program Profiling for Software Testing. </title> <booktitle> GI Jahrestagung. </booktitle> <pages> 4-16. </pages> <year> 1997. </year>
Reference: 28. <author> P. N. Robillard, D. Coupal. F. Coallier. </author> <title> Profiling Software through the Use of Metrics. </title> <journal> SP&E. </journal> <volume> Vol. 21, No. 5. </volume> <pages> pp. 507-518. </pages> <year> 1991. </year>
Reference: 29. <author> L. Sha, R. Rajkumar, and M. Gagliardi. </author> <title> A Software Architecture for Dependable and Evolvable Industrial Computing Systems. </title> <type> Technical Report CMU/SEI-95-TR-005. </type> <institution> Software Engineering Institute, Carnegie Mellon University. </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: Second, module composition in a multidatabase environment is likely require support for traditional and advanced transaction models [6] for inter-module communication. Finally, production-quality database integration, migration, and evolution mechanisms should ideally support fault-tolerant switch-over to new module configurations or composites <ref> [29] </ref>. CORBA presents unique challenges in module interconnection research. The Object Management Architecture defines the environment within which CORBA exists [23]. The OMA carries with it a far more complex collection of standard mechanisms, services, and facilities than contexts to which earlier MILs have been applied. <p> To the authors knowledge, MIL research has not focused on this problem. Work in this area has focused on the development of communication processes, transaction mechanisms and structures which can be used to perform on-line upgrades and the logical interchange of resources <ref> [29] </ref>. Again, these approaches must be re-contextualized and extended to deal with the unique challenges presented by database integration and evolution problems and CORBA.
Reference: 30. <author> M. Shan, R. Ahmed, J. Davis, W. Du, and W. Kent. </author> <title> Pegasus: A heterogeneous information management system. </title> <editor> In W. Kim, editor, </editor> <title> Modern Database Systems. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: There are several systems that have either taken this approach, or at least require a substantial amount of schema integration; these include 1. This research is being funded under DARPA order B126 (Rome AF contract F30602-94-C-0253), under DARPA/NASA contract NAG2-862, and under NSF award IRI-9632595. Pegasus <ref> [30] </ref>, UniSQL [14], multidatabase systems (e.g., InterBase [20]), and Federated databases [10]. Sanctuary is a database integration and evolution environment for supporting exactly such large, heterogeneous environments [15, 16] 1 .
Reference: 31. <author> W.J. Tracz. </author> <title> Parameterized Programming in LILEANNA. </title> <type> Ph.D Thesis. </type> <institution> Stanford University. </institution> <month> August </month> <year> 1997. </year>
References-found: 31

