URL: http://www.cs.cornell.edu/Info/People/gries/symposium/lu.ps
Refering-URL: http://www.cs.cornell.edu/Info/People/gries/symposium/symp.htm
Root-URL: 
Email: jameslu@bucknell.edu  
Title: Constraint Logic Programming: A Programming Approach to Teaching the Semantics of Logic  
Author: JAMES J. LU 
Date: (1996)  
Address: 1-10  PA 17837. U.S.A.  
Affiliation: Department of Computer Science, College of Engineering,  Bucknell University  Department of Computer Science, Bucknell University, Lewisburg,  
Abstract: The problem of teaching the notion of logical consequence is discussed, and a solution proposed. The essential idea is to make concrete the abstract notion of interpretation through computer programs. Constraint Logic Programming appears to meet this idea nicely. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> C.L. Chang and R.C.T Lee. </author> <title> Symbolic Logic and Mechanical Theorem Proving. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1973. </year>
Reference: 2. <author> J. Jaffar and J-L. Lassez. </author> <title> Constraint logic programming. </title> <booktitle> In Proceedings of the 14th ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 111-119. </pages> <publisher> ACM Press, </publisher> <year> 1987. </year>
Reference-contexts: 1. Introduction This paper analyzes a major conceptual difficulty students have in learning logic in general, and in learning the semantics of logic programming in particular. The difficulty is in understanding the notion of logical consequence (i.e. entailment). We show how Constraint Logic Programming (CLP) <ref> [2] </ref>, a recent extension to classical logic programming, can be used to overcome this difficulty especially for undergraduate computer science students who possess some intuition regarding computation and programming. To simplify our discussion, we focus on entailment in the context of Horn-clause logic programming.
Reference: 3. <author> J.W. Lloyd. </author> <title> Foundations of Logic Programming. </title> <publisher> Springer-Verlag, </publisher> <address> New York, 2 edition, </address> <year> 1988. </year>
Reference-contexts: Logic Programming and Logical Consequence 1 Hence, a proper introduction to logic programming requires an understanding of logic. In particular, as computing in logic programming corresponds to determining logical consequence, some coverage of interpretation, satisfiability, and theorem-hood is crucial in setting the semantical basis for discussion <ref> [3] </ref>. To communicate these ideas, the first notion that must be understood is interpretation. A common way to illustrate the idea is to first write down a specific formula, * To be presented at the DIMACS Symposium on Teaching Logic and Reasoning in an Illogical World.
Reference: 4. <author> J.A. Robinson. </author> <title> A machine oriented logic based on the resolution principle. </title> <journal> Journal of the ACM, </journal> <volume> 12(1) </volume> <pages> 23-41, </pages> <year> 1965. </year>
Reference: 5. <author> M.H. Van Emden and R. Kowalski. </author> <title> The semantics of predicate logic as a programming language. </title> <journal> Journal of the ACM, </journal> <volume> 23(4) </volume> <pages> 733-742, </pages> <year> 1976. </year>
Reference: 6. <author> P.C. Wankat and F.S. Oreovicz. </author> <title> Teaching Engineering. </title> <publisher> McGraw Hill, </publisher> <year> 1993. </year>
Reference-contexts: An Analysis In one sense, the problem is simply a matter of presentation. The traditional exposition of logic in logic texts promotes a deductive style of learning | a style that is less suitable for most students than the inductive style <ref> [6] </ref>. 2 Suppose we consider for a moment that the two parts of logic, the syntax and the semantics, to be two axes of a plane (the logic plane).
References-found: 6

