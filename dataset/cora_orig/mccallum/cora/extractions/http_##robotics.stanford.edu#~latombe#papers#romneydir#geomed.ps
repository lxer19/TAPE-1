URL: http://robotics.stanford.edu/~latombe/papers/romneydir/geomed.ps
Refering-URL: http://robotics.stanford.edu/~latombe/projects/
Root-URL: http://www.cs.stanford.edu
Email: bruce@flamingo.stanford.edu  
Title: Atlas: An Automatic Assembly Sequencing and Fixturing System  
Author: Bruce Romney 
Address: Stanford University  
Affiliation: Dept. of Computer Science  
Abstract: We present a method to generate automatically both an assembly sequence and a fixture to hold all the intermediate subassemblies, given only a geometric description of the product. The main contribution here is that the sequence and fixture are generated concurrently rather than sequentially, unlike in previous assembly-planning work. Also, the representation of possible fixturing locations is more complete. This method has been implemented for the planar case, and we present experimental results below. We also discuss some of the key issues involved in the concurrent design of assembly sequences and fixtures. The long-term vision for this work is a CAD tool which can provide immediate feedback to a product designer about the ease of assembling the proposed product.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> B. Romney, C. Godard, M. Goldwasser, and G. Ramkumar, </author> <title> "An efficient system for geometric assembly sequence generation and evaluation," </title> <booktitle> in Proc. ASME International Computers in Engineering Conference, (Boston), </booktitle> <pages> pp. 699-712, </pages> <year> 1995. </year>
Reference-contexts: These advances now allow the designer to quickly and automatically identify potential problems in these areas, and devote more attention to higher-level considerations. Recently, for example, a number of prototype systems have been presented which can automatically generate assembly sequences for a given product <ref> [1, 2, 3, 4, 5] </ref>. The purpose of the present research is to increase this level of sophistication still further, by automatically generating not only the assembly sequence but also the mechanical fixture required to hold the product in place during assembly. <p> We shall use this strategy as well. The assembly-sequencing portion of Atlas is based on the STAAT system <ref> [1] </ref> and the related concept of the local translational freedom cone [13]. The approach has some similarities to techniques described by other authors [2, 5, 14, 15]. However, little consideration is given in these papers to the problem of fixturing the intermediate subassemblies. <p> A similar operation detects part/fixture collisions. 4.5 Choosing an Action Having enumerated a set of feasible actions, Atlas' next step is choosing among them. This is a crucial decision, because exhaustively exploring all possible assembly sequences is not practical. In <ref> [1] </ref>, which considered sequencing but not fixturing, the choice of action was guided by the optimization of an objective function, such as removing a key part as quickly as possible. However, in sequence/fixture co-design, we must first and foremost ensure that our fixture successfully stabilizes the entire assembly sequence.
Reference: 2. <author> J. Wolter, </author> <title> "On the automatic generation of assembly plans," </title> <booktitle> in Proc. IEEE International Conference on Robotics and Automation, </booktitle> <volume> vol. </volume> <pages> 1, </pages> <address> (Scottsdale, AZ), </address> <pages> pp. 62-68, </pages> <year> 1989. </year>
Reference-contexts: These advances now allow the designer to quickly and automatically identify potential problems in these areas, and devote more attention to higher-level considerations. Recently, for example, a number of prototype systems have been presented which can automatically generate assembly sequences for a given product <ref> [1, 2, 3, 4, 5] </ref>. The purpose of the present research is to increase this level of sophistication still further, by automatically generating not only the assembly sequence but also the mechanical fixture required to hold the product in place during assembly. <p> As a result, much of the past and present work in this area focuses on even more restricted variants of the problem. For example, some systems insert parts only along the major axes [3, 9, 10, 11], while others insert only one part at a time <ref> [2, 4] </ref>. For the case of binary, monotone sequences using straight-line part insertions from any direction, Wilson and Latombe presented a complete polynomial-time algorithm in [12] using the non-directional blocking graph (NDBG) data structure. <p> We shall use this strategy as well. The assembly-sequencing portion of Atlas is based on the STAAT system [1] and the related concept of the local translational freedom cone [13]. The approach has some similarities to techniques described by other authors <ref> [2, 5, 14, 15] </ref>. However, little consideration is given in these papers to the problem of fixturing the intermediate subassemblies. There is a great deal of literature on the fixturing or grasping of a single part.
Reference: 3. <author> R. Hoffman, </author> <title> "Automated assembly planning for B-rep products," </title> <booktitle> in Proc. IEEE International Conference on Systems Engineering, (Pittsburgh), </booktitle> <pages> pp. 391-394, </pages> <year> 1990. </year>
Reference-contexts: These advances now allow the designer to quickly and automatically identify potential problems in these areas, and devote more attention to higher-level considerations. Recently, for example, a number of prototype systems have been presented which can automatically generate assembly sequences for a given product <ref> [1, 2, 3, 4, 5] </ref>. The purpose of the present research is to increase this level of sophistication still further, by automatically generating not only the assembly sequence but also the mechanical fixture required to hold the product in place during assembly. <p> As a result, much of the past and present work in this area focuses on even more restricted variants of the problem. For example, some systems insert parts only along the major axes <ref> [3, 9, 10, 11] </ref>, while others insert only one part at a time [2, 4]. For the case of binary, monotone sequences using straight-line part insertions from any direction, Wilson and Latombe presented a complete polynomial-time algorithm in [12] using the non-directional blocking graph (NDBG) data structure.
Reference: 4. <author> T. Woo and D. Dutta, </author> <title> "Automatic disassembly and total ordering in three dimensions," </title> <journal> Journal of Engineering for Industry, </journal> <volume> vol. 113, no. 2, </volume> <pages> pp. 207-213, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: These advances now allow the designer to quickly and automatically identify potential problems in these areas, and devote more attention to higher-level considerations. Recently, for example, a number of prototype systems have been presented which can automatically generate assembly sequences for a given product <ref> [1, 2, 3, 4, 5] </ref>. The purpose of the present research is to increase this level of sophistication still further, by automatically generating not only the assembly sequence but also the mechanical fixture required to hold the product in place during assembly. <p> As a result, much of the past and present work in this area focuses on even more restricted variants of the problem. For example, some systems insert parts only along the major axes [3, 9, 10, 11], while others insert only one part at a time <ref> [2, 4] </ref>. For the case of binary, monotone sequences using straight-line part insertions from any direction, Wilson and Latombe presented a complete polynomial-time algorithm in [12] using the non-directional blocking graph (NDBG) data structure.
Reference: 5. <author> A. Lin and T.-C. Chang, </author> <title> "3D MAPS: Three-dimensional mechanical assembly planning system," </title> <journal> Journal of Manufacturing Systems, </journal> <volume> vol. 12, no. 6, </volume> <pages> pp. 437-456, </pages> <year> 1993. </year>
Reference-contexts: These advances now allow the designer to quickly and automatically identify potential problems in these areas, and devote more attention to higher-level considerations. Recently, for example, a number of prototype systems have been presented which can automatically generate assembly sequences for a given product <ref> [1, 2, 3, 4, 5] </ref>. The purpose of the present research is to increase this level of sophistication still further, by automatically generating not only the assembly sequence but also the mechanical fixture required to hold the product in place during assembly. <p> We shall use this strategy as well. The assembly-sequencing portion of Atlas is based on the STAAT system [1] and the related concept of the local translational freedom cone [13]. The approach has some similarities to techniques described by other authors <ref> [2, 5, 14, 15] </ref>. However, little consideration is given in these papers to the problem of fixturing the intermediate subassemblies. There is a great deal of literature on the fixturing or grasping of a single part.
Reference: 6. <author> B. K. Natarajan, </author> <title> "On planning assemblies," </title> <booktitle> in Proc. 4th ACM Symp. on Computational Geometry, </booktitle> <pages> pp. 299-308, </pages> <year> 1988. </year>
Reference-contexts: In section 6, we present some experimental results. Finally, in section 7, we discuss some directions of future research and conclude. 2 Related Work The problem of automatically generating assembly sequences is, in its full generality, PSPACE-hard <ref> [6, 7] </ref>. Even when every operation moves exactly two subassemblies into their final relative positions, the problem is still NP-hard [8]. As a result, much of the past and present work in this area focuses on even more restricted variants of the problem.
Reference: 7. <author> J. D. Wolter, </author> <title> On the Automatic Generation of Plans for Mechanical Assembly. </title> <type> PhD thesis, </type> <institution> Univ. of Michigan, </institution> <year> 1988. </year>
Reference-contexts: In section 6, we present some experimental results. Finally, in section 7, we discuss some directions of future research and conclude. 2 Related Work The problem of automatically generating assembly sequences is, in its full generality, PSPACE-hard <ref> [6, 7] </ref>. Even when every operation moves exactly two subassemblies into their final relative positions, the problem is still NP-hard [8]. As a result, much of the past and present work in this area focuses on even more restricted variants of the problem.
Reference: 8. <author> L. Kavraki, J. Latombe, and R. Wilson, </author> <title> "On the complexity of assembly partitioning," </title> <journal> in Information Processing Letters, </journal> <volume> vol. 48, </volume> <pages> pp. 229-235, </pages> <year> 1993. </year>
Reference-contexts: Finally, in section 7, we discuss some directions of future research and conclude. 2 Related Work The problem of automatically generating assembly sequences is, in its full generality, PSPACE-hard [6, 7]. Even when every operation moves exactly two subassemblies into their final relative positions, the problem is still NP-hard <ref> [8] </ref>. As a result, much of the past and present work in this area focuses on even more restricted variants of the problem. For example, some systems insert parts only along the major axes [3, 9, 10, 11], while others insert only one part at a time [2, 4].
Reference: 9. <author> J. Miller and R. Hoffman, </author> <title> "Automatic assembly planning with fasteners," </title> <booktitle> in Proc. IEEE International Conference on Robotics and Automation, </booktitle> <volume> vol. </volume> <pages> 1, </pages> <address> (Scottsdale, AZ), </address> <pages> pp. 69-74, </pages> <year> 1989. </year>
Reference-contexts: As a result, much of the past and present work in this area focuses on even more restricted variants of the problem. For example, some systems insert parts only along the major axes <ref> [3, 9, 10, 11] </ref>, while others insert only one part at a time [2, 4]. For the case of binary, monotone sequences using straight-line part insertions from any direction, Wilson and Latombe presented a complete polynomial-time algorithm in [12] using the non-directional blocking graph (NDBG) data structure.
Reference: 10. <author> S. Lee and Y. Shin, </author> <title> "Assembly planning based on geometric reasoning," </title> <journal> Computers and Graphics, </journal> <volume> vol. 14, no. 2, </volume> <pages> pp. 237-250, </pages> <year> 1990. </year>
Reference-contexts: As a result, much of the past and present work in this area focuses on even more restricted variants of the problem. For example, some systems insert parts only along the major axes <ref> [3, 9, 10, 11] </ref>, while others insert only one part at a time [2, 4]. For the case of binary, monotone sequences using straight-line part insertions from any direction, Wilson and Latombe presented a complete polynomial-time algorithm in [12] using the non-directional blocking graph (NDBG) data structure.
Reference: 11. <author> A. Subramani and P. Dewhurst, </author> <title> "Automatic generation of product disassembly sequences," </title> <journal> Manufacturing Technology CIRP Annals, </journal> <volume> vol. 40, no. 1, </volume> <pages> pp. 115-118, </pages> <year> 1991. </year>
Reference-contexts: As a result, much of the past and present work in this area focuses on even more restricted variants of the problem. For example, some systems insert parts only along the major axes <ref> [3, 9, 10, 11] </ref>, while others insert only one part at a time [2, 4]. For the case of binary, monotone sequences using straight-line part insertions from any direction, Wilson and Latombe presented a complete polynomial-time algorithm in [12] using the non-directional blocking graph (NDBG) data structure.
Reference: 12. <author> R. Wilson and J. Latombe, </author> <title> "Geometric reasoning about mechanical assembly," </title> <journal> Artificial Intelligence, </journal> <volume> vol. 71, no. 2, </volume> <pages> pp. 371-396, </pages> <year> 1994. </year>
Reference-contexts: For example, some systems insert parts only along the major axes [3, 9, 10, 11], while others insert only one part at a time [2, 4]. For the case of binary, monotone sequences using straight-line part insertions from any direction, Wilson and Latombe presented a complete polynomial-time algorithm in <ref> [12] </ref> using the non-directional blocking graph (NDBG) data structure. One common thread that appears in much of the literature is the strategy of "assembly by disassembly", in which an assembly sequence is generated by starting with the completed product and working backwards through disassembly steps.
Reference: 13. <author> L. Homem de Mello, </author> <title> Task Sequence Planning for Robotic Assembly. </title> <type> Ph.D. thesis, </type> <institution> Carnegie Mellon University, Pittsburgh, </institution> <year> 1989. </year>
Reference-contexts: We shall use this strategy as well. The assembly-sequencing portion of Atlas is based on the STAAT system [1] and the related concept of the local translational freedom cone <ref> [13] </ref>. The approach has some similarities to techniques described by other authors [2, 5, 14, 15]. However, little consideration is given in these papers to the problem of fixturing the intermediate subassemblies. There is a great deal of literature on the fixturing or grasping of a single part. <p> The cone of directions is first discretized, and feasibility is checked on each of the resulting discrete directions. Furthermore, instead of the extended translational freedom cone, Atlas' method is based on the simpler local translational freedom (LTF) cone <ref> [13] </ref>. An LTF cone is the subset of directions over which a given part can move infinitesimally without colliding. 1 1 For a more rigorous definition of LTF cones, the reader is referred to [30]. Fig. 8. Atlas' procedure for enumerating feasible actions.
Reference: 14. <author> L. Homem de Mello and A. Sanderson, </author> <title> "A correct and complete algorithm for the generation of mechanical assembly sequences," </title> <booktitle> in Proc. IEEE International Conference on Robotics and Automation, </booktitle> <volume> vol. </volume> <pages> 1, </pages> <address> (Scottsdale, AZ), </address> <pages> pp. 56-61, </pages> <year> 1989. </year>
Reference-contexts: We shall use this strategy as well. The assembly-sequencing portion of Atlas is based on the STAAT system [1] and the related concept of the local translational freedom cone [13]. The approach has some similarities to techniques described by other authors <ref> [2, 5, 14, 15] </ref>. However, little consideration is given in these papers to the problem of fixturing the intermediate subassemblies. There is a great deal of literature on the fixturing or grasping of a single part.
Reference: 15. <author> A. Sanderson, </author> <title> "Automatic generation of mechanical assembly sequences," in Geometric Modeling for Product Engineering, </title> <publisher> (Amsterdam), </publisher> <pages> pp. 461-482, </pages> <publisher> North-Holland, </publisher> <year> 1990. </year>
Reference-contexts: We shall use this strategy as well. The assembly-sequencing portion of Atlas is based on the STAAT system [1] and the related concept of the local translational freedom cone [13]. The approach has some similarities to techniques described by other authors <ref> [2, 5, 14, 15] </ref>. However, little consideration is given in these papers to the problem of fixturing the intermediate subassemblies. There is a great deal of literature on the fixturing or grasping of a single part.
Reference: 16. <author> H. Asada and A. </author> <title> By, "Kinematic analysis of workpart fixturing for flexible assembly with automatically reconfigurable fixtures," </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> vol. RA-1, no. 2, </volume> <pages> pp. 86-94, </pages> <year> 1985. </year>
Reference-contexts: However, little consideration is given in these papers to the problem of fixturing the intermediate subassemblies. There is a great deal of literature on the fixturing or grasping of a single part. Much of it focuses on establishing form closure <ref> [16, 17, 18, 19, 20, 21] </ref> or force closure [22, 23, 24] on that part. Some authors also propose figures of merit with which to compare different form- or force-closing configurations, often based on the necessary contact forces.
Reference: 17. <author> J. Bausch and K. Youcef-Toumi, </author> <title> "Kinematic methods for automated fixture recon-figuration planning," </title> <booktitle> in Proc. International Conference on Robotics and Automation, </booktitle> <volume> vol. </volume> <pages> 2, </pages> <address> (Cincinnati, OH), </address> <pages> pp. 1396-1401, </pages> <year> 1990. </year>
Reference-contexts: However, little consideration is given in these papers to the problem of fixturing the intermediate subassemblies. There is a great deal of literature on the fixturing or grasping of a single part. Much of it focuses on establishing form closure <ref> [16, 17, 18, 19, 20, 21] </ref> or force closure [22, 23, 24] on that part. Some authors also propose figures of merit with which to compare different form- or force-closing configurations, often based on the necessary contact forces.
Reference: 18. <author> R. Brost and K. Goldberg, </author> <title> "Complete algorithm for synthesizing modular fixtures for polygonal parts," </title> <booktitle> in Proc. IEEE International Conference on Robotics and Automation, </booktitle> <address> (San Diego), </address> <pages> pp. 535-542, </pages> <year> 1994. </year>
Reference-contexts: However, little consideration is given in these papers to the problem of fixturing the intermediate subassemblies. There is a great deal of literature on the fixturing or grasping of a single part. Much of it focuses on establishing form closure <ref> [16, 17, 18, 19, 20, 21] </ref> or force closure [22, 23, 24] on that part. Some authors also propose figures of merit with which to compare different form- or force-closing configurations, often based on the necessary contact forces.
Reference: 19. <author> X. Markenscoff and C. Papadimitriou, </author> <title> "Optimum grip of a polygon," </title> <journal> International Journal of Robotics Research, </journal> <volume> vol. 8, no. 2, </volume> <pages> pp. 17-29, </pages> <year> 1989. </year>
Reference-contexts: However, little consideration is given in these papers to the problem of fixturing the intermediate subassemblies. There is a great deal of literature on the fixturing or grasping of a single part. Much of it focuses on establishing form closure <ref> [16, 17, 18, 19, 20, 21] </ref> or force closure [22, 23, 24] on that part. Some authors also propose figures of merit with which to compare different form- or force-closing configurations, often based on the necessary contact forces.
Reference: 20. <author> B. Mishra, J. Schwartz, and M. Sharir, </author> <title> "On the existence and synthesis of multi-finger positive grips," </title> <journal> Algorithmica, </journal> <volume> vol. 2, no. 4, </volume> <pages> pp. 541-558, </pages> <year> 1987. </year>
Reference-contexts: However, little consideration is given in these papers to the problem of fixturing the intermediate subassemblies. There is a great deal of literature on the fixturing or grasping of a single part. Much of it focuses on establishing form closure <ref> [16, 17, 18, 19, 20, 21] </ref> or force closure [22, 23, 24] on that part. Some authors also propose figures of merit with which to compare different form- or force-closing configurations, often based on the necessary contact forces.
Reference: 21. <author> Y. Xiong, D. Sanger, and D. Kerr, </author> <title> "Geometric modelling of boundless grasps," </title> <journal> Robotica, </journal> <volume> vol. 11, </volume> <pages> pp. 19-26, </pages> <year> 1993. </year>
Reference-contexts: However, little consideration is given in these papers to the problem of fixturing the intermediate subassemblies. There is a great deal of literature on the fixturing or grasping of a single part. Much of it focuses on establishing form closure <ref> [16, 17, 18, 19, 20, 21] </ref> or force closure [22, 23, 24] on that part. Some authors also propose figures of merit with which to compare different form- or force-closing configurations, often based on the necessary contact forces.
Reference: 22. <author> C. Ferrari and J. Canny, </author> <title> "Planning optimal grasps," </title> <booktitle> in Proc. International Conference on Robotics and Automation, </booktitle> <volume> vol. 3, </volume> <booktitle> (Nice, France), </booktitle> <pages> pp. 2290-2295, </pages> <year> 1992. </year>
Reference-contexts: However, little consideration is given in these papers to the problem of fixturing the intermediate subassemblies. There is a great deal of literature on the fixturing or grasping of a single part. Much of it focuses on establishing form closure [16, 17, 18, 19, 20, 21] or force closure <ref> [22, 23, 24] </ref> on that part. Some authors also propose figures of merit with which to compare different form- or force-closing configurations, often based on the necessary contact forces.
Reference: 23. <author> Z. Li and S. Sastry, </author> <title> "Task-oriented optimal grasping by multifingered robot hands," </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> vol. 4, no. 1, </volume> <pages> pp. 32-44, </pages> <year> 1988. </year>
Reference-contexts: However, little consideration is given in these papers to the problem of fixturing the intermediate subassemblies. There is a great deal of literature on the fixturing or grasping of a single part. Much of it focuses on establishing form closure [16, 17, 18, 19, 20, 21] or force closure <ref> [22, 23, 24] </ref> on that part. Some authors also propose figures of merit with which to compare different form- or force-closing configurations, often based on the necessary contact forces.
Reference: 24. <author> V.-D. Nguyen, </author> <title> "Constructing force-closure grasps," </title> <journal> International Journal of Robotics Research, </journal> <volume> vol. 7, no. 3, </volume> <pages> pp. 3-16, </pages> <year> 1988. </year>
Reference-contexts: However, little consideration is given in these papers to the problem of fixturing the intermediate subassemblies. There is a great deal of literature on the fixturing or grasping of a single part. Much of it focuses on establishing form closure [16, 17, 18, 19, 20, 21] or force closure <ref> [22, 23, 24] </ref> on that part. Some authors also propose figures of merit with which to compare different form- or force-closing configurations, often based on the necessary contact forces.
Reference: 25. <author> S. Fahlman, </author> <title> "A planning system for robot construction tasks," </title> <journal> Artificial Intelligence, </journal> <volume> vol. 5, </volume> <pages> pp. 1-49, </pages> <year> 1974. </year>
Reference-contexts: The field of assembly fixturing, in which all parts may move independently, is far less represented in the literature than that of part fixturing. Some early work was done by Fahlman <ref> [25] </ref> for structures of simple blocks. However, Fahlman himself acknowledged his stabilization techniques to be "a loose grouping of a very large number of essentially independent tricks".
Reference: 26. <author> J. Wolter and J. Trinkle, </author> <title> "Automatic selection of fixture points for frictionless assemblies," </title> <booktitle> in Proc. IEEE International Conference on Robotics and Automation, </booktitle> <address> (San Diego), </address> <pages> pp. 528-534, </pages> <year> 1994. </year>
Reference-contexts: Some early work was done by Fahlman [25] for structures of simple blocks. However, Fahlman himself acknowledged his stabilization techniques to be "a loose grouping of a very large number of essentially independent tricks". Later, Wolter and Trin-kle <ref> [26] </ref> and Mattikalli [27] described a more systematic approach to analyzing and fixturing individual assemblies, by using linear programs to solve simultaneous force or velocity equations. <p> This scheme resembles somewhat Wolter and Trinkle's use of two fixels at continuously-variable locations along each edge (in the planar case) <ref> [26] </ref>; however, the fixture continuum has the advantage of allowing segments to be broken up into arbitrarily many disconnected subsegments, as dictated by the evolving sequencing constraints. 4.3 The Disassembly Tree In [29], Homem de Mello and Sanderson described a way to represent all possible disassembly sequences using an AND/OR graph. <p> Each of these linear programs tries to find a combination of forces and torques from the virtual fixels and/or the interpart contacts to balance out the known external forces and torques. The formulas are presented briefly below, in section 5.1; for more information, the interested reader is referred to <ref> [26, 27] </ref>. One final point is worth mentioning about the enumeration of feasible actions. Sometimes it is possible to remove a part without reducing the fixture at all. In fact, such "fixture-preserving" actions may be preferred, since fixture reductions may reduce the ability of the fixture to stabilize future subassemblies. <p> As noted earlier, none of the fixels can apply negative force. So if w i is the unit-magnitude wrench imparted by fixel i, then there must be some ff i 2 &lt; such that <ref> [26, 27] </ref>: ff 0 w 0 + ff 1 w 1 + + ff m1 w m1 + W ext = 0; ff i 0 ff 0 w 0 + ff 1 w 1 + + ff m1 w m1 = W ext ; ff i 0 (1) For a planar <p> In the unglued case, we must also include wrenches from the interpart contacts. Atlas checks stability by seeking a solution fff i g to eqn. (1) using a linear program. (For more information on these formulations, the reader is referred to <ref> [26, 27] </ref>.) Graphically, what eqn. (1) implies is illustrated in Fig. 11.
Reference: 27. <author> R. Mattikalli, </author> <title> Mechanics Based Assembly Planning. </title> <type> Ph.D. thesis, </type> <institution> Carnegie Mellon University, Pittsburgh, </institution> <year> 1994. </year>
Reference-contexts: Some early work was done by Fahlman [25] for structures of simple blocks. However, Fahlman himself acknowledged his stabilization techniques to be "a loose grouping of a very large number of essentially independent tricks". Later, Wolter and Trin-kle [26] and Mattikalli <ref> [27] </ref> described a more systematic approach to analyzing and fixturing individual assemblies, by using linear programs to solve simultaneous force or velocity equations. <p> however, neglect the need for such an "escape path", for clarity in illustration.) 4.2 The Fixture Continuum Atlas represents the candidate fixture as a continuum of possible fixel locations, rather than as a finite set of discrete fixels. (See Fig. 3.) Although a discrete representation, such as was used in <ref> [27, 28] </ref>, is certainly valid, the continuous approach is a more complete representation of possible fixturing locations. This produces a potentially greater choice of stable disassembly steps. <p> Each of these linear programs tries to find a combination of forces and torques from the virtual fixels and/or the interpart contacts to balance out the known external forces and torques. The formulas are presented briefly below, in section 5.1; for more information, the interested reader is referred to <ref> [26, 27] </ref>. One final point is worth mentioning about the enumeration of feasible actions. Sometimes it is possible to remove a part without reducing the fixture at all. In fact, such "fixture-preserving" actions may be preferred, since fixture reductions may reduce the ability of the fixture to stabilize future subassemblies. <p> As noted earlier, none of the fixels can apply negative force. So if w i is the unit-magnitude wrench imparted by fixel i, then there must be some ff i 2 &lt; such that <ref> [26, 27] </ref>: ff 0 w 0 + ff 1 w 1 + + ff m1 w m1 + W ext = 0; ff i 0 ff 0 w 0 + ff 1 w 1 + + ff m1 w m1 = W ext ; ff i 0 (1) For a planar <p> In the unglued case, we must also include wrenches from the interpart contacts. Atlas checks stability by seeking a solution fff i g to eqn. (1) using a linear program. (For more information on these formulations, the reader is referred to <ref> [26, 27] </ref>.) Graphically, what eqn. (1) implies is illustrated in Fig. 11.
Reference: 28. <author> B. Romney, </author> <title> "Issues in the co-design of assembly sequences and fixtures." </title> <type> Manuscript. </type> <note> Available at http://robotics.stanford.edu/users/assembly, 1995. </note>
Reference-contexts: Atlas' fixturing algorithm was originally inspired by these researchers' efforts. However, to the author's knowledge, no one has previously addressed the problem of performing both assembly sequencing and assembly fixturing concurrently. This co-design approach raises a host of new issues, many of which were discussed in an earlier paper <ref> [28] </ref>. <p> however, neglect the need for such an "escape path", for clarity in illustration.) 4.2 The Fixture Continuum Atlas represents the candidate fixture as a continuum of possible fixel locations, rather than as a finite set of discrete fixels. (See Fig. 3.) Although a discrete representation, such as was used in <ref> [27, 28] </ref>, is certainly valid, the continuous approach is a more complete representation of possible fixturing locations. This produces a potentially greater choice of stable disassembly steps. <p> For simplicity, we can suppress these nodes, reducing the AND/OR graph to a simple OR graph whose missing leaf nodes are implicit. When fixture information is included in the nodes, however, the graph must become a tree in order to maintain consistency <ref> [28] </ref>. A partial example of such a tree is shown in Fig. 5. Note that the fixtures in most nodes represent partial solutions, admitting only the disassembly subsequence seen so far (at and above the given node). The final fixture solutions appear at the bottom, in the leaf nodes. <p> Since this sequence is not fully known until the end, deciding which action will best accomplish that goal is a difficult task indeed. Nonetheless, several strategies have been found which work well in practice. For example, one approach, used in <ref> [28] </ref>, is to minimize the number of deleted fixels (or deleted virtual fixels) in each step. In the planar case this is equivalent to minimizing the number of deleted fixture segments. <p> The assumption here is that a fixture with more remaining fixels will be more likely to stabilize future, as yet undetermined, subassemblies. While this method is generally a good one (as evidenced by the results reported in <ref> [28] </ref>), it can sometimes lead to dead ends in the disassembly process. For example, consider the "tilted blender" example of Fig. 10a. If we delete as few virtual fixels as possible in each step, we eventually arrive at the subassembly of Fig. 10b. <p> Stability against both gravity and insertion forces is guaranteed. To the author's knowledge, this system, and its predecessor in <ref> [28] </ref>, represent the first attempt to address the problems of assembly sequencing and assembly fixturing in a unified fashion. The system is viewed as an important first step toward the realization of a CAD tool which can provide immediate feedback to a team of product designers about a product's assemblability.
Reference: 29. <author> L. Homem de Mello and A. Sanderson, </author> <title> "AND/OR graph representation of assembly plans," </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> vol. 6, no. 2, </volume> <pages> pp. 188-199, </pages> <year> 1986. </year>
Reference-contexts: somewhat Wolter and Trinkle's use of two fixels at continuously-variable locations along each edge (in the planar case) [26]; however, the fixture continuum has the advantage of allowing segments to be broken up into arbitrarily many disconnected subsegments, as dictated by the evolving sequencing constraints. 4.3 The Disassembly Tree In <ref> [29] </ref>, Homem de Mello and Sanderson described a way to represent all possible disassembly sequences using an AND/OR graph. Each node in the graph represents a subassembly, and each AND'ed pair of children for that node represents two subassemblies into which the given subassembly can be decomposed.
Reference: 30. <author> R. Wilson, </author> <title> On Geometric Assembly Planning. </title> <type> Ph.D. thesis, </type> <institution> Stanford University, Stanford, </institution> <address> CA, </address> <year> 1992. </year>
Reference-contexts: An LTF cone is the subset of directions over which a given part can move infinitesimally without colliding. 1 1 For a more rigorous definition of LTF cones, the reader is referred to <ref> [30] </ref>. Fig. 8. Atlas' procedure for enumerating feasible actions. For each part, Atlas generates its LTF cone with respect to all other parts, and from that cone selects a finite set of directions (such as the "corners" of the LTF cone).
Reference: 31. <author> R. Brost and M. Mason, </author> <title> "Graphical analysis of planar rigid-body dynamics with multiple frictional contacts," </title> <booktitle> in Robotics Research: The Fifth International Symposium (H. </booktitle> <editor> Miura and S. Arimoto, </editor> <booktitle> eds.), </booktitle> <pages> pp. 293-300, </pages> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: If we were to project the wrenches onto a unit sphere, as Brost and Mason did in <ref> [31] </ref>, the projected W ext; j 's would have to lie on or inside the projected convex hull of the w i 's. Alternatively, the ordinary convex hull of the w i 's and the origin must contain *W ext for some suitably small *.
References-found: 31

