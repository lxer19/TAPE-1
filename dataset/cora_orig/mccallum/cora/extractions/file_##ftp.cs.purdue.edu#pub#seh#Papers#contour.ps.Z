URL: file://ftp.cs.purdue.edu/pub/seh/Papers/contour.ps.Z
Refering-URL: http://www.cs.purdue.edu/people/seh/
Root-URL: http://www.cs.purdue.edu
Email: hameed@cs.purdue.edu  seh@cs.purdue.edu  ashfaq@eecis.udel.edu  jamshed@ecn.purdue.edu  
Title: Contour Ranking On Coarse Grained Machines: A Case Study for Low-Level Vision Computations  
Author: Farooq Hameed Susanne E. Hambrusch Ashfaq A. Khokhar Jamshed N. Patel 
Keyword: Parallel processing, coarse-grained machines, contour ranking, list ranking, computer vision, scalability.  
Date: November 29, 1995  
Address: West Lafayette, IN 47907, USA  West Lafayette, IN 47907, USA  19716, USA  West Lafayette, IN 47907, USA  
Affiliation: Department of Computer Sciences Purdue University  Department of Computer Sciences Purdue University  Department of Electrical Engineering and Department of Computer and Information Sciences University of Delaware Newark, DE  School of Electrical and Computer Engineering Purdue University  
Abstract: In this paper we present parallel solutions for performing image contour ranking on coarse-grained machines. In contour ranking, a linear representation of the edge contours is generated from the edge contours of a raw image. We describe solutions that employ different divide-and-conquer approaches and that use different communication patterns. The combining step of the divide-and-conquer solutions uses efficient sequential techniques for merging information about subimages. The proposed solutions are implemented on Intel Delta and Intel Paragon machines. We discuss performance results and present scalability analysis using different image and machine sizes. fl Research supported in part by ARPA under contract DABT63-92-C-0022ONR. The views and conclusions contained in this paper are those of the authors and should not be interpreted as representing official policies, expressed or implied, of the U.S. government. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D.A. Bader, J. Ja'Ja', </author> <title> "Parallel Algorithms for Image Histogramming and Connected Components with an Experimental Study", </title> <type> Technical Report, </type> <institution> CS-TR-3384, University of Mary-land, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: We point out that the merging of boundaries is the basis of parallel algorithms for other problems on images; e.g., for determining the connected components. Coarse-grained connected component algorithms based on the merging of boundaries are described in <ref> [1, 3] </ref>. Our study of 1-phase 15 versus 2-phase algorithms, of varying the number of boundaries to be merged, and of the effect of locality on future iterations is broader than done in previous studies. <p> A number of other problems on images can be solved by algorithms following the same principle. The merging of boundaries is central to parallel connected component algorithms. We refer to <ref> [1, 3] </ref> and references therein for recent work on coarse-grained connected component algorithms. Other problems that can be solved by divide-and-conquer algorithms having similar characteristics include straight line approximations and region growing. The approaches used in our contour ranking algorithms can serve as templates for parallel algorithms for such problems.
Reference: [2] <author> L. T. Chen, L. S. Davis, and C. P. Kruskal, </author> <title> "Efficient parallel processing of image contours," </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> Vol. 15, no. 1, </volume> <pages> pp. 69-81, </pages> <year> 1993. </year>
Reference-contexts: 1 Introduction Edge operators in low-level vision tasks generate edge contours represented as edge maps in a 2-dimensional image plane. For efficient processing of these edge contours in subsequent mid-and high-level vision tasks, a more compact and linearized representation is desirable <ref> [2, 8, 14] </ref>. We refer to the process of generating such a linear representation as contour ranking. Contour ranking can be done by performing list ranking on each edge contour. Straightforward sequential linear-time solutions exist for list ranking.
Reference: [3] <author> A. Choudhary, R. Thakur, </author> <title> "Connected Component Labeling on Coarse Grain Parallel Computers", </title> <journal> JPDC, </journal> <volume> Vol. 20, no. 1, </volume> <pages> pp. 78-83, </pages> <year> 1994. </year>
Reference-contexts: We point out that the merging of boundaries is the basis of parallel algorithms for other problems on images; e.g., for determining the connected components. Coarse-grained connected component algorithms based on the merging of boundaries are described in <ref> [1, 3] </ref>. Our study of 1-phase 15 versus 2-phase algorithms, of varying the number of boundaries to be merged, and of the effect of locality on future iterations is broader than done in previous studies. <p> A number of other problems on images can be solved by algorithms following the same principle. The merging of boundaries is central to parallel connected component algorithms. We refer to <ref> [1, 3] </ref> and references therein for recent work on coarse-grained connected component algorithms. Other problems that can be solved by divide-and-conquer algorithms having similar characteristics include straight line approximations and region growing. The approaches used in our contour ranking algorithms can serve as templates for parallel algorithms for such problems.
Reference: [4] <author> P. H. Eichel and E. J. Delp, </author> <title> "Sequential edge linking," </title> <booktitle> Proceedings 22nd Allerton Conference on Communication, Control, and Computation, </booktitle> <pages> pp. 782-791, </pages> <year> 1984. </year>
Reference-contexts: A description of the images is given in Figure 7 and three of these images are shown in Figure 8. The edge contours of the images were obtained by applying a sequential edge linking algorithm <ref> [4] </ref>. As can be seen in image. The edge point density measures the fraction of pixels that are edge points. Also, the shape and size of edge contours vary significantly in the images.
Reference: [5] <author> S.E. Hambrusch, F. Hameed, and A. Khokhar, </author> <title> "Communication Operations on Coarse-Grained Architectures," </title> <journal> Parallel Computing, </journal> <volume> Vol. 21, </volume> <pages> pp. 731-751, </pages> <year> 1995. </year>
Reference-contexts: Processor P 2i;2j sends the updated head lists back to the corresponding processors in its group. 12 communication occurring only between processors in the same group. In <ref> [5] </ref>, we have used this notion of conceptual levels to define a k-level algorithm. One of the conclusions of that work was that for communication operations, 1-, 2-, and log p-level algorithms give good performance on existing coarse-grained machines.
Reference: [6] <author> T. Heywood and S. Ranka, </author> <title> "Architecture independent analysis of sorting and list ranking on the hierarchical PRAM model," </title> <booktitle> Proceedings Fourth Symposium on the Frontiers of Massively Parallel Computation, </booktitle> <pages> pp. 531-4, </pages> <year> 1992. </year>
Reference-contexts: Contour ranking can be done by performing list ranking on each edge contour. Straightforward sequential linear-time solutions exist for list ranking. On parallel machines, numerous fine-grained solutions for list ranking exist, many of them designed for the PRAM <ref> [6, 7, 11, 10, 12] </ref>. These algorithms are communication intensive and the resulting communication patterns are data-dependent and irregular. Thus, they do not perform well on coarse-grained message-passing machines. In this paper, we present efficient coarse-grained algorithms for contour ranking.
Reference: [7] <author> J. JaJa, </author> <title> An Introduction to Parallel Algorithms, </title> <publisher> Addison-Wesley, </publisher> <year> 1992. </year>
Reference-contexts: Contour ranking can be done by performing list ranking on each edge contour. Straightforward sequential linear-time solutions exist for list ranking. On parallel machines, numerous fine-grained solutions for list ranking exist, many of them designed for the PRAM <ref> [6, 7, 11, 10, 12] </ref>. These algorithms are communication intensive and the resulting communication patterns are data-dependent and irregular. Thus, they do not perform well on coarse-grained message-passing machines. In this paper, we present efficient coarse-grained algorithms for contour ranking.
Reference: [8] <author> M.H. Kim, O.H. Ibarra, </author> <title> "Transformations Between Boundary Codes, Run Length Codes, and Linear Quadtrees," </title> <booktitle> Proceedings of the 8th International Parallel Processing Symposium, </booktitle> <pages> pp. 120-125, </pages> <year> 1994. </year>
Reference-contexts: 1 Introduction Edge operators in low-level vision tasks generate edge contours represented as edge maps in a 2-dimensional image plane. For efficient processing of these edge contours in subsequent mid-and high-level vision tasks, a more compact and linearized representation is desirable <ref> [2, 8, 14] </ref>. We refer to the process of generating such a linear representation as contour ranking. Contour ranking can be done by performing list ranking on each edge contour. Straightforward sequential linear-time solutions exist for list ranking.
Reference: [9] <author> R. Miller, Q. Stout, </author> <title> "Geometric Algorithms for Digitized Pictures on a Mesh-connected Computer," </title> <journal> IEEE Trans. on PAMI, </journal> <pages> pp. 216-228, </pages> <year> 1985. </year>
Reference-contexts: The approaches used in our contour ranking algorithms can serve as templates for parallel algorithms for such problems. Unless sequential computation times and messages sizes change significantly, our observations about the performance of the different communication patterns will remain valid. Various distance computations in an image <ref> [9] </ref> can also be performed by divide-and-conquer algorithms. However, the information needed about a subimage may now be quadratic in the size of the boundary. This results in more data to be communicated.
Reference: [10] <author> J. N. Patel, A. A. Khokhar, and L. H. Jamieson, </author> <title> "Scalable Parallel List Ranking of Image Edges on Fine-grained Machines," </title> <booktitle> 9th International Parallel Processing Symposium, </booktitle> <pages> pp. 717-721, </pages> <year> 1995. </year>
Reference-contexts: Contour ranking can be done by performing list ranking on each edge contour. Straightforward sequential linear-time solutions exist for list ranking. On parallel machines, numerous fine-grained solutions for list ranking exist, many of them designed for the PRAM <ref> [6, 7, 11, 10, 12] </ref>. These algorithms are communication intensive and the resulting communication patterns are data-dependent and irregular. Thus, they do not perform well on coarse-grained message-passing machines. In this paper, we present efficient coarse-grained algorithms for contour ranking.
Reference: [11] <author> M. Reid-Miller, </author> <title> "List Ranking and List Scan on the Cray C-90," </title> <booktitle> Proceedings Symposium on Parallel Algorithms and Architectures, </booktitle> <address> Cape May, NJ, </address> <pages> pp. 104-113, </pages> <year> 1994. </year>
Reference-contexts: Contour ranking can be done by performing list ranking on each edge contour. Straightforward sequential linear-time solutions exist for list ranking. On parallel machines, numerous fine-grained solutions for list ranking exist, many of them designed for the PRAM <ref> [6, 7, 11, 10, 12] </ref>. These algorithms are communication intensive and the resulting communication patterns are data-dependent and irregular. Thus, they do not perform well on coarse-grained message-passing machines. In this paper, we present efficient coarse-grained algorithms for contour ranking.
Reference: [12] <institution> Synthesis of Parallel Algorithms, </institution> <note> J.R. Reif, </note> <editor> Editor, </editor> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: Contour ranking can be done by performing list ranking on each edge contour. Straightforward sequential linear-time solutions exist for list ranking. On parallel machines, numerous fine-grained solutions for list ranking exist, many of them designed for the PRAM <ref> [6, 7, 11, 10, 12] </ref>. These algorithms are communication intensive and the resulting communication patterns are data-dependent and irregular. Thus, they do not perform well on coarse-grained message-passing machines. In this paper, we present efficient coarse-grained algorithms for contour ranking.
Reference: [13] <author> S. Saini, H. Simon, </author> <title> "Enhancing Applications Performance on Intel Paragon through Dynamic Memory Allocation," </title> <booktitle> Proceedings of the Scalable Parallel Libraries Conference, </booktitle> <pages> pp. 232-239, </pages> <year> 1993. </year>
Reference-contexts: This is due to the use of demand paging by the operating system. This behavior is regarded as an anomaly of the current operating system <ref> [13] </ref>, and we expect the problem to be fixed in the next generation of parallel systems software. To eliminate the effects of demand paging on the performance results, we execute the entire program multiple times in a loop.
Reference: [14] <author> H. Samet, </author> <title> Applications of Spatial Data Structures, Computer Graphics, and Image Pro--cessing, </title> <publisher> Addison Wesley, </publisher> <year> 1990. </year> <month> 27 </month>
Reference-contexts: 1 Introduction Edge operators in low-level vision tasks generate edge contours represented as edge maps in a 2-dimensional image plane. For efficient processing of these edge contours in subsequent mid-and high-level vision tasks, a more compact and linearized representation is desirable <ref> [2, 8, 14] </ref>. We refer to the process of generating such a linear representation as contour ranking. Contour ranking can be done by performing list ranking on each edge contour. Straightforward sequential linear-time solutions exist for list ranking.
References-found: 14

