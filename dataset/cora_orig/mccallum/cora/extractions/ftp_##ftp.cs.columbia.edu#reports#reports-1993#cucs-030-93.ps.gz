URL: ftp://ftp.cs.columbia.edu/reports/reports-1993/cucs-030-93.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1993.html
Root-URL: http://www.cs.columbia.edu
Title: An Approach for Distributed Query Processing in Marvel: Concepts and Implementation  
Abstract: Toni A. Bunter Technical Report CUCS-030-93 COLUMBIA UNIVERSITY 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Toni A. Bunter. </author> <title> Optimisation of the characterisic function in marvel rules. </title> <type> Technical report: </type> <year> 1993. </year>
Reference-contexts: Immediately before the evaluation of a binding, all variables except the binding variable which occur in the binding formula, are bound to sets of objects. We refer to them as bound operands. A thorough definition of its syntax and semantics are given in <ref> [1] </ref>. 2.2 History Variables Two variables, the history variables called, keep track of the evaluation state during the formula walkthrough . <p> The cse waits for the acknowledgement from each new subenvironments. After the rest rule initializations, the cse sends a continue signal to all subenvironments. All subenvironments begin now with the get all bound objects function. As described in <ref> [1] </ref>, get all bound objects walks through the binding formula.
Reference: [2] <author> Stefano Ceri and Giuseppe Pelagatti. </author> <title> Distributed Databases. </title> <booktitle> MacGraw-Hill computer science series. </booktitle> <address> MacGraw-Hill, </address> <year> 1984. </year>
Reference-contexts: 1 Introduction Distributed query processing in databases is well explored for relational databases. In this work we elaborate a technique for distributed query processing in a Marvel objectbase, distributed over subenvironments. Results from the research of distributed relational databases are applied in form of semijoint optimization <ref> [2] </ref>. The entire work is done inside the scope of the Marvel project. In spite of this restriction, the displayed technique is believed to be applicable for a wide range of objectbases. 1.1 Marvel Marvel is a rule-based development environment [4]. <p> The only exception is the case of an associative predicate with two variables. This is equivalent to the computation of a semijoint in distributed relational databases. Instead of transmitting images, sets of values of involved attributes has to be transmitted (see <ref> [2] </ref>). 3 Throughout this work we mostly use the term 'object' for instances as well for images. If necessary, we use real for objects which are exclusively instances. Basically, there are two different needs to transmit images. <p> If so, the function get associative predicate acts locally. If both operands are variables, the computation of the predicate is a semijoint between the bound operand and the universe. For the computation of vertical distributed relational databases, optimizing solutions already exists (e.g. <ref> [2] </ref>). For completeness, we display a simple, non trivial, but suitable strategy. Be a the binding variable and b the bound operand. Be a:att1 and b:att2 the attributes over which the semijoint is computed, and op the conditional operator.
Reference: [3] <author> George T. Heineman, Gail E. Kaiser, Naser S. Barghouti, and Israel Z. Ben-Shaul. </author> <title> Rule chaining in marvel: Dynamic binding of parameters. </title> <journal> IEEE Expert, </journal> <volume> 7 </volume> <pages> 26-32, </pages> <year> 1992. </year>
Reference-contexts: An objectbase and rules can be tailored with the Marvel Strategic Language (MSL). The objectbase keeps track of the process and production data. Marvel rules are the atomic elements building the development process. Their activation can be triggered off by a user or by forward/backward chaining of another rule <ref> [3] </ref>. The most recent release, Marvel 3.1, runs a single server, administering one single objectbase. One or more clients can access the objectbase. The next step in the Marvel project will include the geographical distribution of a development project.
Reference: [4] <author> Gail E. Kaiser, Peter H. Feiler, and Steven S. Popovich. </author> <title> Intelligent assistance for software development and maintenance. </title> <journal> IEEE Software, </journal> <pages> pages 40-49, </pages> <month> May </month> <year> 1988. </year> <note> Figures 31 </note>
Reference-contexts: The entire work is done inside the scope of the Marvel project. In spite of this restriction, the displayed technique is believed to be applicable for a wide range of objectbases. 1.1 Marvel Marvel is a rule-based development environment <ref> [4] </ref>. An objectbase and rules can be tailored with the Marvel Strategic Language (MSL). The objectbase keeps track of the process and production data. Marvel rules are the atomic elements building the development process.
References-found: 4

