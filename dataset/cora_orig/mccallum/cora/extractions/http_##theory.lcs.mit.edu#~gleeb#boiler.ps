URL: http://theory.lcs.mit.edu/~gleeb/boiler.ps
Refering-URL: http://theory.lcs.mit.edu/~gleeb/
Root-URL: 
Email: gleeb@lcs.mit.edu  lynch@lcs.mit.edu  
Title: Steam Boiler Controller Using Timed Automata for the Steam Boiler Controller Formal Methods for Industrial
Author: Gunter Leeb Nancy Lynch 
Address: Technology Square 545, Cambridge, MA  
Affiliation: Massachusetts Institute for Technology Laboratory for Computer Science  
Note: G. Leeb, N.Lynch Page 1 of 35  
Date: June 1995  
Pubnum: 1.  
Abstract: In this paper we model a steam boiler and a controller for it as a hybrid system. Our model uses timed automata to show formally that certain safety and performance requirements can be guaranteed under described assumptions. The specification of the steam boiler follows the specification problem for participants of the Dagstuhl Meeting Methods for Semantics and Specification. This is a preliminary version for the discussion at the workshop in Dagstuhl.
Abstract-found: 1
Intro-found: 1
Reference: [Abr95] <author> Abrial, J.-R.: </author> <title> Steam-boiler control specification problem for the meeting Methods for Semantics and Specification, </title> <publisher> Dagstuhl, </publisher> <month> June </month> <year> 1995 </year>
Reference-contexts: June 1995 G. Leeb, N.Lynch Page 2 of 35 However, the Steam Boiler Controller represents a different kind of problem. Basically, it consists of a discrete control loop. We now give a condensed and informal version of Steam Boiler Controller specification (the more detailed version can be found in <ref> [Abr95] </ref>). Since the original specification is informal and ambiguous, the following summarizes our interpretation of the described problem. For easier understanding of the following discussion we included some abbreviations used in our later analysis: The physical plant consists of a steam boiler. Conceptually, this boiler is heated by nuclear fuel. <p> The rest of this paper is organized as follows. After presenting an outline of our formal methods (section two), we give a description of the assumptions we make for our model, point out some key differences to the specification in <ref> [Abr95] </ref>, and show how our model is related to the physical model (section three). The next two sections describes our model of the boiler and our separate model of the controller. In sections six thtough nine, we show some key proofs. <p> Some of the following assumptions are according to the informal specification of <ref> [Abr95] </ref> and most others are to resolve some ambiguity. To simplify reasoning about the model we ignore second order effects like the volume expansion of water when heated. <p> The delay between sensor reading and consequently the change of the active pumps is mainly caused by the slow reaction of the physical pumps. As a small contrast to the specification in <ref> [Abr95] </ref> we assume this delay to be the same at activation and deactivation of pumps. In contrast, in the case of an emergency stop, we assume that there is no delay at all. Other helpful assumptions are correct, perfectly synchronized clocks in all components and accuracy of sensor values. <p> As a practical alternative to the approach suggested in the informal specification and the one implemented here, the time between consecutive sensor readings could be reduced whenever close to one critical limit. For our approach, we stayed with the informal specification of <ref> [Abr95] </ref> and assume only equidistant sensor readings. Basically, the constants form the following hierarchy: M 2 2 2 1 1 1 . Dependent on the type of controller, there must be a certain minimum distance between these constants. <p> Furthermore, we get from Lemma 5.3 that if c.mode = stop then b.stop= true. QED. 11 Conclusion We have applied a formal method based on timed automata, invariant assertions and simulation mappings to model and verify the Steam Boiler Problem specified in <ref> [Abr95] </ref>. This method seems to close the gap between application engineers and formal method experts. It provides a tool for system modeling and requirement specification that is very general and easy to understand.
Reference: [Cle93] <author> Cleaveland, R.; Parrow, J.; Steffen, B.: </author> <title> The concurrency workbench: A semantics-based tool for verification of concurrent systems. </title> <journal> ACM Trans. on Prog. Lang. and Sys., </journal> <volume> 15(1) </volume> <pages> 36-72, </pages> <month> Jan. </month> <year> 1993 </year>
Reference: [Hei93] <author> Heitmeyer, C.; Jeffords, R.; Labaw, B.: </author> <title> A benchmark for comparing different approaches for specifying and verifying real-time systems. </title> <booktitle> In Proc., 10th Intern Workshop on Real-Time Operating Systems and Software, </booktitle> <month> May, </month> <year> 1993 </year>
Reference-contexts: For the purpose of comparison, some problems have been defined or borrowed from real life applications. One such a benchmark problem is the Steam Boiler Controller problem discussed in this paper. Another representative of this kind of problems is the Generalized Railroad Crossing (GRC) <ref> [Hei93] </ref>. Various solutions have been applied to the latter e.g. [Cle93,Jah86,Sha93,Hoa93].
Reference: [Hei94] <author> Heitmeyer, C.; Lynch, N.: </author> <title> The Generalized Railroad Crossing: A Case Study in Formal Verification of Real-Time Systems. </title> <booktitle> In Proc., IEEE Real-Time Systems Symposium, </booktitle> <address> San Juan, Puerto Rico, </address> <month> Dec. </month> <pages> 7-9. </pages> <year> 1994 </year>
Reference-contexts: Another representative of this kind of problems is the Generalized Railroad Crossing (GRC) [Hei93]. Various solutions have been applied to the latter e.g. [Cle93,Jah86,Sha93,Hoa93]. Many steps of this approach are similar to the steps described in <ref> [Hei94] </ref>. 1 2 3 4 M 1 N 2 1 emergency stop emergency_stop pumps water level sensor steam sensor P P P P actuator (set_pumps) sensor (q,w) Steam Boiler Controller W boiler. <p> A system requirements specification describes all acceptable system implementations <ref> [Hei94] </ref>. It has three parts: 1. A formal model describing the environment (e.g. the steam boiler) and its interface 2. A formal model describing the controller system and its interface at an abstraction level 3.
Reference: [Hoa93] <author> Hoare, C.: </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1985 </year>
Reference: [Jah86] <author> Jahanian, F.; Mok, A.: </author> <title> Safety analysis of timing properties in real-time systems. </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> SE-12(9), </volume> <month> Sep. </month> <year> 1986 </year>
Reference: [Lyn91] <author> Lynch, N.; Vaandrager, F.: </author> <title> Forward and backward simulations for timing-based systems. </title> <booktitle> In Proceedings for REX Workshop: Real-Time: Theory in Practice, vol. 600 of Lecture Notes in Computer Science, p. </booktitle> <pages> 397-446, </pages> <address> Mook, Netherlands, </address> <publisher> Springer-Verlag, </publisher> <month> June </month> <year> 1991 </year>
Reference-contexts: Steam Boiler Controller 1. June 1995 G. Leeb, N.Lynch Page 3 of 35 of Lynch and Vaandrager <ref> [Lyn91] </ref>. A timed automaton is a very general automaton, i.e., a labeled transition system. It is not finitestate: for example, the state can contain real-valued information, such as the current time or the current steam rate.
Reference: [Lyn94] <author> Lynch, N.: </author> <title> Simulation Techniques for Proving Properties of Real-time Systems, </title> <booktitle> In REX Workshop 93, Lecture Notes in Computer Science, Mook, </booktitle> <address> the Netherlands, </address> <publisher> Springer Verlag, </publisher> <year> 1994 </year>

References-found: 8

