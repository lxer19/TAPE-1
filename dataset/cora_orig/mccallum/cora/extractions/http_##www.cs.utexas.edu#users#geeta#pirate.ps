URL: http://www.cs.utexas.edu/users/geeta/pirate.ps
Refering-URL: http://www.cs.utexas.edu/users/dahlin/Classes/WebOS/reports.html
Root-URL: 
Title: Reducing the Menace of Pirate TCPs  
Author: Nimar S. Arora Jasleen Kaur Sahni Geeta Tarachandani 
Date: May 11, 1998  
Abstract: In this paper we investigate the potential threat posed to TCP traffic on the In- ternet due to "pirate" TCPs. Pirate TCPs do not back off during congestion in the network and thus get an unfair share of the bandwidth. We have studied some router mechanisms to tackle this problem. In particular we measured the fairness and efficiency of these schemes. We found that Deficit Round Robin is overall a good router strategy.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> V. Jacobson. </author> <title> Congestion avoidance and control. </title> <booktitle> SIGCOMM Symposium on Communication Architectures and Protocols, </booktitle> <pages> 314-329, </pages> <year> 1998. </year>
Reference-contexts: 1 Introduction The Internet is a heavily over-used shared resource. It remains functional primarily because of the cooperative attitude of users. E.g. most communication is done using TCP which "backs off" during congestion <ref> [1] </ref>. This raises a concern that transport protocols which do not back off in response to congestion could get an undue share of bandwidth. An example of an unresponsive transport protocol is Pirate TCP, a version of TCP which sends at the maximum possible rate irrespective of network conditions. <p> These experiments clearly show that Pirate TCPs pose a serious threat to regular TCPs. The Pirate TCP does not reduce its sending rate in response to network congestion. We implemented two versions of Pirate TCP. Both versions have a congestion window <ref> [1] </ref> to keep track of unacknowledged packets. Like TCP, this window slides forward when the first packet in the window is acknowledged. However, unlike regular TCP the congestion window size remains constant. The first version we implemented sends packets at the maximum rate permitted by the outgoing link.
Reference: [2] <author> S. Floyd and V. Jacobson. </author> <title> Random early detection gateways for congestion avoidance. </title> <journal> IEEE/ACM Transaction on Networking, </journal> <volume> 1(4) </volume> <pages> 397-413, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: However, DRR (Deficit Round Robin) was found to be comparable in execution speed to FCFS. In the literature there is a body of work devoted to developing scheduling algorithms based primarily on FCFS. Random Early Detection <ref> [2] </ref> is an FCFS based strategy in which packets are randomly dropped when the queue size exceeds a threshold. Based on this scheme, a congestion control mechanism was developed in [3] which punishes flows that are 1 unresponsive to packets being dropped. This strategy does not guarantee absolute fairness.
Reference: [3] <author> S. Floyd and K. </author> <month> Fall. </month> <title> Router mechanisms to support end-to-end congestion control. </title> <institution> Lawrence Berkeley National Laboratory, </institution> <type> Technical Report, </type> <month> February </month> <year> 1997. </year>
Reference-contexts: Random Early Detection [2] is an FCFS based strategy in which packets are randomly dropped when the queue size exceeds a threshold. Based on this scheme, a congestion control mechanism was developed in <ref> [3] </ref> which punishes flows that are 1 unresponsive to packets being dropped. This strategy does not guarantee absolute fairness. It is assumed to be computationally much more efficient than per-flow scheduling since it is based on FCFS.
Reference: [4] <author> A. Demers, S. Keshav and S. Shenker. </author> <title> Analysis and simulation of a fair queueing algorithm. </title> <journal> Journal of Internetworking: Research and Experience 1 </journal> <pages> 3-26, </pages> <year> 1990. </year>
Reference-contexts: These initial experiments prompted us to look for router strategies which schedule packets on a per-flow basis. These algorithms divide the available bandwidth among the various flows. We studied two per-flow scheduling strategies, Fair Queuing <ref> [4] </ref> and Deficit Round Robin [6]. Both of these strategies are fair in terms of throughput. The main criticism of per-flow scheduling has been that it is computationally inefficient. Indeed our experiments verified that FQ (Fair Queuing) is highly inefficient as compared to FCFS scheduling. <p> The router sends one packet of each contending flow in a round-robin manner. However, this approach is not fair when the flows have different packet sizes. The flow with the larger packet size gets a larger share of the bandwidth. The problem of unequal packet sizes was solved in <ref> [4] </ref> using Fair Queuing (FQ). The authors observed that if one bit of each contending flow was sent by the router in a round- robin manner, then it would be fair. The algorithm they propose sends packets in the order of finishing time determined by bit-by-bit round-robin.
Reference: [5] <author> S. </author> <title> Keshav Real 5.0 Network Simulator. </title> <address> http://www.cs.cornell.edu/skeshav/real/overview.html </address>
Reference-contexts: We have implemented a Pirate TCP protocol and studied its effect on the performance of regular TCP flows in the same network. For our experiments we used the REAL 5.0 simulator <ref> [5] </ref>. We found that with a simple router scheduling policy of FCFS (first come first serve), the Pirate TCP gained an undue advantage over regular TCP in terms of bandwidth share. These initial experiments prompted us to look for router strategies which schedule packets on a per-flow basis. <p> The experiment was conducted on the network topology shown in Figure 1. As shown in the figure both the Pirate TCP and regular TCP packets contend for the common link between the two routers. We used the REAL 5.0 simulator <ref> [5] </ref> for all experiments. TCP. It is clear that the Pirate gains a significant advantage over the regular TCP. However, we realized that its performance can be improved.
Reference: [6] <author> M. Shreedhar and G. Varghese. </author> <title> Efficient fair queuing using deficit round robin. </title> <journal> IEEE/ACM Transactions on Networking 4(3) </journal> <pages> 375-385, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: These initial experiments prompted us to look for router strategies which schedule packets on a per-flow basis. These algorithms divide the available bandwidth among the various flows. We studied two per-flow scheduling strategies, Fair Queuing [4] and Deficit Round Robin <ref> [6] </ref>. Both of these strategies are fair in terms of throughput. The main criticism of per-flow scheduling has been that it is computationally inefficient. Indeed our experiments verified that FQ (Fair Queuing) is highly inefficient as compared to FCFS scheduling. <p> In their paper they present an efficient implementation of this algorithm which takes O (log n) time per packet where n is the number of contending flows. Another round-robin algorithm known as Deficit Round Robin (DRR) was introduced in <ref> [6] </ref>. It determines the sending order of packets in a similar manner as the above algorithm except that it uses a quantum much larger than one bit. The quantum is chosen close to the average packet size. <p> On the other extreme, FQ is the most inefficient. The performance of DRR is close to that of FCFS. The graph shows that DRR is not a constant time algorithm. However, we believe that this is because our implementation is not O (1) as desribed in <ref> [6] </ref>. A production quality implementation would be closer to FCFS in performance. 5 Conclusion We have studied the ill-effects of malicious TCP implementations and some router mechanisms to control them. We studied per-flow router scheduling, in particular FQ and DRR. Both these algorithms were found to be reasonably fair.
Reference: [7] <author> J. Nagle. </author> <title> On packet switches with infinite storage. </title> <journal> IEEE Transactions on Communications 35(4), </journal> <month> April </month> <year> 1987. </year> <month> 9 </month>
Reference-contexts: If flows f1; : : : ; ng contend for this link of bandwidth B then for all i, o i (t) min (e i (t); B=n). The most natural algorithm for per-flow scheduling is Round Robin <ref> [7] </ref>. The router sends one packet of each contending flow in a round-robin manner. However, this approach is not fair when the flows have different packet sizes. The flow with the larger packet size gets a larger share of the bandwidth.
References-found: 7

