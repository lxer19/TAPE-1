URL: ftp://ftp.cs.virginia.edu/pub/dissertations/9503.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/dissertations/README.html
Root-URL: http://www.cs.virginia.edu
Title: Geometric Interconnection and Placement Algorithms  
Author: Joseph Lavinus Ganley 
Degree: A Dissertation Presented to the Faculty of the  In Partial Fulfillment of the Requirements for the Degree of Doctor of Philosophy Computer Science by  
Date: May 1995  
Affiliation: School of Engineering and Applied Science University of Virginia  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> E. H. L. Aarts and P. J. M. van Laarhoven. </author> <title> A new polynomial-time cooling schedule. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pages 206-208, </pages> <year> 1985. </year>
Reference-contexts: When some stop criterion is met, the algorithm halts and returns S B . Figure 6.6 describes the simulated annealing algorithm in detail. We use the cooling schedule and stop criterion of Aarts and van Laarhoven <ref> [1] </ref>. <p> 105 (1) Let S = S B be a random partitioning solution (2) t t 0 (3) While the stop criterion is not met: (4) Repeat c times: (5) Choose a random neighbor S 0 of S (6) = (S 0 ) (S) (7) If ( &lt; 0) or (Rand <ref> [0; 1] </ref> &lt; e =t ) then (8) S S 0 (9) If ((S) &lt; (S B )) then (10) S B S (11) Decrease t according to cooling schedule (12) Return S B function Rand [0; 1] returns a uniform random value in the interval [0; 1]. <p> S (6) = (S 0 ) (S) (7) If ( &lt; 0) or (Rand <ref> [0; 1] </ref> &lt; e =t ) then (8) S S 0 (9) If ((S) &lt; (S B )) then (10) S B S (11) Decrease t according to cooling schedule (12) Return S B function Rand [0; 1] returns a uniform random value in the interval [0; 1]. There are at most k 2n possible partitioning solutions, so jS fl j = k 2n and log jS fl j = O (n log k). <p> &lt; 0) or (Rand <ref> [0; 1] </ref> &lt; e =t ) then (8) S S 0 (9) If ((S) &lt; (S B )) then (10) S B S (11) Decrease t according to cooling schedule (12) Return S B function Rand [0; 1] returns a uniform random value in the interval [0; 1]. There are at most k 2n possible partitioning solutions, so jS fl j = k 2n and log jS fl j = O (n log k). Thus, the time complexity of the thumbnail partitioning algorithm is O (dn 3 log k).
Reference: [2] <author> A. V. Aho, M. R. Garey, and F. K. Hwang. </author> <title> Rectilinear Steiner trees: Efficient special-case algorithms. </title> <journal> Networks, </journal> <volume> 7 </volume> <pages> 37-58, </pages> <year> 1977. </year>
Reference-contexts: We then present experimental results comparing this algorithm with two existing algorithms for computing optimal rectilinear Steiner trees: Hakimi's spanning tree enumeration algorithm [70] and the dynamic programming algorithm of Aho, Garey, and Hwang <ref> [2] </ref> for terminals that lie on a small number of parallel lines. <p> For thumbnail-sized inputs, this can be as large as O (k 4 2:62 k 2 ), which is worse than Hakimi's algorithm. 6.9.2.3 A Dynamic Programming Algorithm Another natural approach is to apply the Aho, Garey, and Hwang (AGH) algorithm for terminals on a small number of parallel lines <ref> [2] </ref>. For TRSTs, the terminals lie on a set of at most k parallel lines. The AGH algorithm proceeds as follows. Imagine sweeping a vertical line from x = 0 to x = k 1 through the set of terminals. <p> Let G xfik denote the portion of the k fi k grid to the left of x. For each x, optimal solutions are built from the optimal solutions in G (x1)fik . The reader is referred to Aho, Garey, and Hwang <ref> [2] </ref> for details. The AGH algorithm has time complexity O (k16 k ). This is clearly asymptotically superior to the other two algorithms described above. However, as will be shown empirically below, for the small values of k considered here, the AGH algorithm is slower than the others described earlier.
Reference: [3] <author> M. J. Alexander, J. P. Cohoon, J. L. Ganley, and G. Robins. </author> <title> An architecture-independent approach to FPGA routing based on multi-weighted graphs. </title> <booktitle> In Proceedings of the European Design Automation Conference, </booktitle> <pages> pages 259-264, </pages> <year> 1994. </year>
Reference-contexts: Good physical design automation software for FPGAs can be even more crucial than for other design styles, for two reasons. The first is that the high degree of flexibility offered by FPGAs comes at the cost of decreased performance <ref> [3] </ref>. As FPGAs are increasingly used to actually implement integrated circuits (rather than, for example, simply prototyping them), it becomes increasingly important to optimize their performance as well as possible at the physical design level. <p> We have tested Mondrian on the benchmark circuits using three different algorithms for bottom-level routing: the integer programming (IP) formulation of Section 6.4.4.2, the IMIS heuristic of Section 6.4.4.3, and the approximation algorithm of Section 6.4.4.4. Detailed routing is performed using the algorithm of Alexander, Cohoon, Ganley, and Robins <ref> [3, 4] </ref>, which developed out of the work of Alexander and Robins [5]. The channel widths resulting from these tests are given in Table 6.2, along with the best channel width computed by previous tools for each benchmark. The most noteworthy feature of these results is 6.7.
Reference: [4] <author> M. J. Alexander, J. P. Cohoon, J. L. Ganley, and G. Robins. </author> <title> Performance-oriented placement and routing for field-programmable gate arrays. </title> <booktitle> In Proceedings of the European Design Automation Conference, </booktitle> <year> 1995. </year> <note> (To appear). </note>
Reference-contexts: Switch blocks, depicted as white squares in Figure 6.1, connect different sets of channel segments to one another. A switch block contains an interconnect topology that connects each incoming edge to F s Earlier versions of portions of this chapter appear in Ganley and Cohoon <ref> [4, 55, 58, 59, 60] </ref>. 95 6.1. Introduction 96 (inset). edges exiting the other three sides of the switch block. <p> We have tested Mondrian on the benchmark circuits using three different algorithms for bottom-level routing: the integer programming (IP) formulation of Section 6.4.4.2, the IMIS heuristic of Section 6.4.4.3, and the approximation algorithm of Section 6.4.4.4. Detailed routing is performed using the algorithm of Alexander, Cohoon, Ganley, and Robins <ref> [3, 4] </ref>, which developed out of the work of Alexander and Robins [5]. The channel widths resulting from these tests are given in Table 6.2, along with the best channel width computed by previous tools for each benchmark. The most noteworthy feature of these results is 6.7.
Reference: [5] <author> M. J. Alexander and G. Robins. </author> <title> A new approach to FPGA routing based on multi-weighted graphs. </title> <booktitle> In Proceedings of the International Workshop on Field-Programmable Gate Arrays, </booktitle> <year> 1994. </year>
Reference-contexts: Detailed routing is performed using the algorithm of Alexander, Cohoon, Ganley, and Robins [3, 4], which developed out of the work of Alexander and Robins <ref> [5] </ref>. The channel widths resulting from these tests are given in Table 6.2, along with the best channel width computed by previous tools for each benchmark. The most noteworthy feature of these results is 6.7. Experimental Results 124 IP IMIS Approx.
Reference: [6] <author> T. Asano. </author> <title> Generalized Manhattan path algorithm with applications. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 7 </volume> <pages> 797-804, </pages> <year> 1988. </year>
Reference-contexts: Depending on the values of n and s, this may or may not improve on the O (m) time required by the technique of applying Kanchanasut's algorithm to the escape graph. Several researchers <ref> [6, 31, 112] </ref> have devised techniques to find a shortest path between two vertices in a rectilinear graph such as the escape graph in O (c log c) time. (Note that this can be sublinear in the size of the escape graph!) These techniques would seem to improve upon both the <p> Computing Optimal Power-p Steiner Trees 70 Proof : The matrix A is clearly symmetric. Gershgorin's theorem indicates that the eigenvalues of A lie in the interval <ref> [0; 6] </ref>. Since A is nonsingular, none of its eigenval-ues is 0. Therefore, A is symmetric and positive definite, and so its condition number (A) = j n (A)= 1 (A)j, where n (A) and 1 (A) are, respectively, the largest and smallest eigenvalues of A.
Reference: [7] <author> H. Bakoglu. </author> <title> Circuits, Interconnections, and Packaging for VLSI. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1990. </year> <note> 142 Bibliography143 </note>
Reference-contexts: Furthermore|one of several reasons why physical design automation is more critical than it once was|as integrated-circuit feature sizes decrease, overall circuit delay is increasingly governed by interconnect delay rather than delay within the logic cells <ref> [7] </ref>. Typically, integrated-circuit technology requires the use of only horizontal and vertical wires.
Reference: [8] <author> S. Bapat and J. P. Cohoon. </author> <title> A parallel VLSI circuit layout methodology. </title> <booktitle> In Proceedings of the Sixth International Conference on VLSI Design, </booktitle> <pages> pages 236-241, </pages> <year> 1993. </year>
Reference-contexts: However, their algorithm also performs only placement; global and detailed routing are accomplished afterward. The most direct progenitor of our thumbnail partitioning strategy is the sharp partitioning technique of Bapat and Cohoon <ref> [8] </ref>. Sharp partitioning is a strategy for simultaneous placement and global routing of standard-cell circuits. <p> This switch block becomes a virtual terminal for the net in each of the neighboring regions of the partitioning template, in a similar manner to Bapat and Cohoon <ref> [8] </ref> and Dunlop and Kernighan [46]. Virtual terminals allow the subproblems within each region of the template to be solved independently of the rest of the circuit, such that the union of the 6.4.
Reference: [9] <author> S. Bapat, J. P. Cohoon, P. L. Heck, A. Ju, and L. J. Randall. </author> <title> Examining routing solutions. </title> <booktitle> In Proceedings of the Second Great Lakes Symposium on VLSI, </booktitle> <month> February </month> <year> 1992. </year>
Reference: [10] <author> J. E. Beasley. </author> <title> A heuristic for Euclidean and rectilinear Steiner problems. </title> <journal> European Journal of Operational Research, </journal> <volume> 58 </volume> <pages> 284-292, </pages> <year> 1992. </year>
Reference-contexts: For N = 4, greedy Steinerization is similar to the algorithm of Beasley <ref> [10] </ref>, though Beasley's algorithm computes a new MST at each iteration rather than locally modifying the current MST.
Reference: [11] <author> M. R. C. M. Berkelaar. </author> <title> lp solve user's manual (version 1.5). </title> <year> 1994. </year>
Reference-contexts: We use code written by Saltzman [132] to solve the matching problem in the virtual-terminal assignment step (see Section 6.4.3) and we use Berkelaar's lp solve code <ref> [11] </ref> to solve the integer programs in the bottom-level routing step (see Section 6.4.4). For testing purposes we use two sets of benchmarks, one for each of the Xilinx 3000-series and 4000-series FPGAs.
Reference: [12] <author> P. Berman and V. Ramaiyer. </author> <title> Improved approximations for the Steiner tree problem. </title> <journal> Journal of Algorithms, </journal> <volume> 17 </volume> <pages> 381-408, </pages> <year> 1994. </year>
Reference-contexts: Recently researchers have devised approximations with better bounds for the graph Steiner tree problem: Ze-likovsky [159] describes an algorithm with ~ = 11=6 1:83, and Berman and Ramaiyer <ref> [12] </ref> improve Zelikovsky's bound to ~ = 16=9 1:78, with better approximations possible at the expense of increased running time. Theorem 4.2 implies that these results provide equivalent approximations for the OARST problem. 4.3.4 Other heuristics It is possible to compute heuristic OARSTs without using a graph model. <p> A k-restricted Steiner tree is one in which every full tree contains at most k terminals. The notion of k-restriction has been applied to produce approximations for the Steiner problem in graphs and in the rectilinear metric with approximation bounds better than the Steiner ratio <ref> [12, 159] </ref>. This concept may prove useful for power-p Steiner tree problems as well. 5.4.3 R2ST and EBST algorithms In Sections 5.2.2 and 5.2.4, respectively, we briefly mention the difficulties in devising algorithms for computing optimal R2STs and EBSTs. We believe that different approaches 5.4.
Reference: [13] <author> M. Bern. </author> <title> Faster exact algorithms for Steiner trees in planar networks. </title> <journal> Networks, </journal> <volume> 20 </volume> <pages> 109-120, </pages> <year> 1990. </year>
Reference-contexts: In practice, the space requirements of the Dreyfus-Wagner algorithm are more restrictive than its time complexity <ref> [13] </ref>, and it cannot solve problems much above 16 terminals within the main memory of a workstation. <p> Thus, the OARST problem remains NP-complete if all terminals lie on obstacle perimeters. However, if the number of obstacles is small relative to the number of terminals, then a result due to Bern <ref> [13] </ref> allows computation of an optimal OARST more efficiently than by applying the Dreyfus-Wagner algorithm to the escape graph (see Section 4.3.3).
Reference: [14] <author> K. D. Boese, A. B. Kahng, and G. Robins. </author> <title> High-performance routing trees with identified critical sinks. </title> <booktitle> In Proceedings of the Thirtieth Design Automation Conference, </booktitle> <pages> pages 182-187, </pages> <year> 1993. </year>
Reference-contexts: A fool sees not the same tree that a wise man sees. | William Blake, The Marriage of Heaven and Hell 5 The Power-p Steiner Tree Problem Many VLSI routing applications, such as routing to minimize estimates of electrical delay <ref> [14, 34, 77, 91] </ref>, involve the computation of geometric Steiner trees in which the weight of an edge is a nonlinear function of its length. Consideration of this type of application inspired us to introduce the power-p Steiner tree problem.
Reference: [15] <author> M. A. Breuer. </author> <title> A class of min-cut placement algorithms. </title> <booktitle> In Proceedings of the Fourteenth Design Automation Conference, </booktitle> <pages> pages 284-290, </pages> <year> 1977. </year>
Reference-contexts: Previous Work 98 some sophisticated partitioning-based algorithms such as GORDIAN [97] have provided strong competition for local search strategies. The origins of partitioning-based placement are represented by the min-cut bisection algorithms of Gunther [68], Breuer <ref> [15, 16] </ref>, and Lauther [102]. In these algorithms, a vertical line is conceptually drawn down the approximate center of the circuit area. The logic blocks are then partitioned into two groups of roughly equal size, which will be placed on opposite sides of the line.
Reference: [16] <author> M. A. Breuer. </author> <title> Min-cut placement. </title> <journal> Journal of Design Automation and Fault-Tolerant Computing, </journal> <volume> 1 </volume> <pages> 343-362, </pages> <year> 1977. </year>
Reference-contexts: Previous Work 98 some sophisticated partitioning-based algorithms such as GORDIAN [97] have provided strong competition for local search strategies. The origins of partitioning-based placement are represented by the min-cut bisection algorithms of Gunther [68], Breuer <ref> [15, 16] </ref>, and Lauther [102]. In these algorithms, a vertical line is conceptually drawn down the approximate center of the circuit area. The logic blocks are then partitioned into two groups of roughly equal size, which will be placed on opposite sides of the line.
Reference: [17] <author> S. D. Brown, R. J. Francis, J. Rose, and Z. G. Vranesic. </author> <title> Field-Programmable Gate Arrays. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, Massachusetts, </address> <year> 1992. </year>
Reference-contexts: Since FPGAs can be produced quickly and inexpensively, this technology is well on the way to revolutionizing the production of integrated circuits for custom and rapid-prototyping applications <ref> [17] </ref>. Furthermore, the reprogrammable nature of FPGAs shortens the design cycle considerable, making it more similar to software design than to more traditional VLSI design processes. Continuing the software design analogy, design automation software is analogous to compilers for high-level programming languages. <p> FPGAs are available in various values of W , F c , and F s . The physical design phase of FPGA design takes place immediately following the technology mapping phase <ref> [17] </ref>. Technology mapping transforms an electrical description of a circuit into logic elements suitable for mapping onto FPGA logic blocks, as well as a specification of the electrical interconnections among the logic blocks.
Reference: [18] <author> S. D. Brown, J. S. Rose, and Z. G. Vranesic. </author> <title> A detailed router for field-programmable gate arrays. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pages 382-385, </pages> <year> 1990. </year> <month> Bibliography144 </month>
Reference-contexts: For testing purposes we use two sets of benchmarks, one for each of the Xilinx 3000-series and 4000-series FPGAs. The 3000-series benchmarks are those used by Brown, Rose, and Vranesic to test their FPGA router, which is called CGE <ref> [18] </ref>. The 4000-series benchmarks are those used by Lemieux and Brown to test their SEGA router [107] and by Wu and Marek-Sadowska to test their GPB router [156]. We use the same suggested parameters used by these previous works. <p> Details on Xilinx FPGAs are found in the Xilinx data book [157]. 6.7. Experimental Results 123 Table 6.1 summarizes the name, size, and number of nets for each of these benchmarks. The table also gives the channel widths computed by CGE <ref> [18] </ref> for the 3000-series bench marks and the channel widths computed by SEGA [107] and GPB [156] for the 4000-series benchmarks.
Reference: [19] <editor> J. Burgess. </editor> <booktitle> Completing the circuit of science and art. </booktitle> <address> The Washington Post, pages H1,H6-H7, </address> <month> October 4, </month> <year> 1992. </year>
Reference-contexts: We call our algorithm Mondrian because of the uncanny resemblance between circuit layouts and the works of the artist Piet Mondrian <ref> [19, 117] </ref>. A crucial aspect of thumbnail partitioning is the computation of optimal thumbnails. In our implementation, k = 3, and thus all optimal thumbnails for every possible terminal set are precomputed and stored, and simply looked up during the execution of the algorithm.
Reference: [20] <author> T. Chao and Y. Hsu. </author> <title> Rectilinear Steiner tree construction by local and global refinement. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pages 432-435, </pages> <year> 1990. </year>
Reference-contexts: For N = 3, greedy Steinerization is an oft-repeated idea whose genesis is unclear. For the standard RST problem, Richards (see Hwang, Richards, and Winter [84]) first investigated 3-Steinerization in this greedy form, and more complex variants appear in Chao and Hsu <ref> [20] </ref>, Lee, Bose, and Hwang [106] and Smith, Lee, and Liebman [138]; these and others are summarized in Hwang, Richards, and Winter [84].
Reference: [21] <author> D. S. Chen. </author> <title> Constrained wirelength minimization of a Steiner tree. </title> <type> Technical report, </type> <institution> Department of Electrical Engineering and Computer Science, Northwestern University, Evanston, Illinois, </institution> <year> 1994. </year>
Reference-contexts: A detailed discussion of these techniques is beyond the scope of this chapter; interested readers are referred to Preas and Lorenzetti [123]. Also, as mentioned previously, any of the two-terminal interconnection techniques described in Section 4.2 can be used to compute heuristic OARSTs. Chen <ref> [21] </ref> describes a somewhat different technique. He describes an algorithm that, given any heuristic OARST, performs iterative improvements that possibly reduce the length of the OARST without changing its topological structure. If certain conditions are met, then the algorithm computes an optimal OARST with the given topology. 4.4.
Reference: [22] <author> S. Cheng, A. Lim, and C. Wu. </author> <title> Optimal rectilinear Steiner tree for extremal point sets. </title> <booktitle> In Proceedings of the International Symposium on Algorithms and Computation, volume 762 of Lecture Notes in Computer Science, </booktitle> <pages> pages 523-532. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <year> 1993. </year>
Reference-contexts: More generally, Richards and Salowe [129] present an algorithm that computes, in O (k 4 n) time, an optimal RST for terminals on the perimeter of a k-sided convex polygon. Cheng, Lim, and Wu <ref> [22] </ref> describe an algorithm that computes an optimal RST of such an instance in O (n 3 ) time regardless of k (note that this is an improvement if k = ( p Mirayala, Hashmi, and Sherwani [118] present a linear-time algorithm that computes an optimal OARST when the terminals lie
Reference: [23] <author> C. Chiang, M. Sarrafzadeh, and C. K. Wong. </author> <title> Global routing based on Steiner min-max trees. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 9 </volume> <pages> 1318-1325, </pages> <year> 1990. </year>
Reference-contexts: A special case with practical significance is also examined, where the objective is to minimize the length of the longest wire in the interconnect <ref> [23, 133] </ref>. In Chapter 5, we present a number of results concerning computation of optimal and approximate power-p Steiner trees. Specifically, we present algorithms for computing optimal Euclidean power-2 Steiner trees, optimal rectilinear bottleneck Steiner trees, and rectilinear Steiner trees that minimize a combination of bottleneck weight and total length. <p> The bottleneck Steiner tree problem is the limiting case of the power-p problem as p approaches infinity. Again, bottleneck Steiner trees find application in VLSI routing <ref> [23, 76] </ref> as well as in facility location [38, 50, 113]. Our first set of results concerns computation of optimal power-p Steiner trees. We give an algorithm for computing optimal Euclidean power-2 Steiner trees and describe the difficulties in applying it to the rectilinear case. <p> Such trees find application in VLSI routing; for example, Chiang, Sarrafzadeh, and Wong <ref> [23] </ref> perform VLSI routing using Steiner trees that have minimum 5.2. Computing Optimal Power-p Steiner Trees 80 bottleneck weight (for a more tractable but less realistic definition of bottleneck weight) and low total weight. <p> In Section 5.2.5 we described an algorithm for computing RBSTs with minimum total weight, which find application in VLSI routing <ref> [23, 76] </ref>. Other important multiobjective power-p Steiner tree problems arise in the computation of Steiner trees with minimum electrical delay.
Reference: [24] <author> C. Chiang, M. Sarrafzadeh, and C. K. Wong. </author> <title> An optimal algorithm for rectilinear Steiner trees for channels with obstacles. </title> <journal> International Journal of Circuit Theory and Applications, </journal> <volume> 19 </volume> <pages> 551-563, </pages> <year> 1991. </year>
Reference-contexts: Chiang, Sarrafzadeh, and Wong present algorithms that compute an optimal OARST if the terminals lie on two parallel lines (i.e. on opposite sides of a channel) <ref> [24] </ref> and if the terminals lie on the perimeter of a rectangle [25]. These algorithms run in time linear in the number of terminals but exponential in the number of obstacles.
Reference: [25] <author> C. Chiang, M. Sarrafzadeh, and C. K. Wong. </author> <title> An algorithm for exact rectilinear Steiner trees for switchbox with obstacles. </title> <journal> IEEE Transactions on Circuits and Systems, </journal> <volume> 39 </volume> <pages> 446-455, </pages> <year> 1992. </year>
Reference-contexts: Chiang, Sarrafzadeh, and Wong present algorithms that compute an optimal OARST if the terminals lie on two parallel lines (i.e. on opposite sides of a channel) [24] and if the terminals lie on the perimeter of a rectangle <ref> [25] </ref>. These algorithms run in time linear in the number of terminals but exponential in the number of obstacles. Despite these exponential-time results, the OARST problem is solvable in polynomial time if the terminals lie on the perimeter of the routing region, regardless of the shape of the routing region.
Reference: [26] <author> F. R. K. Chung, M. Gardner, and R. L. Graham. </author> <title> Steiner trees on a checkerboard. </title> <journal> Mathematics Magazine, </journal> <volume> 62 </volume> <pages> 83-96, </pages> <year> 1989. </year>
Reference-contexts: We now consider the general version of the thumbnail rectilinear Steiner tree (TRST) problem: compute an optimal RST of a set of terminals drawn from a k fi k grid, for small k. Researchers have previously investigated Euclidean Steiner trees of terminal sets from small grids <ref> [26, 27, 28] </ref> and triangular and hexagonal grids [83], but this is the first known study of the rectilinear problem. Note that the Euclidean problem is very different from the rectilinear one. <p> Note that the Euclidean problem is very different from the rectilinear one. For the Euclidean case, most previous work <ref> [26, 27] </ref> focuses on simple, mechanical constructions that are conjectured but not proven to be optimal. In the rectilinear case there seem to be no such simple constructions for which optimality can be reasonably conjectured.
Reference: [27] <author> F. R. K. Chung and R. L. Graham. </author> <title> Steiner trees for ladders. </title> <journal> Annals of Discrete Mathematics, </journal> <volume> 2 </volume> <pages> 173-200, </pages> <year> 1978. </year> <month> Bibliography145 </month>
Reference-contexts: We now consider the general version of the thumbnail rectilinear Steiner tree (TRST) problem: compute an optimal RST of a set of terminals drawn from a k fi k grid, for small k. Researchers have previously investigated Euclidean Steiner trees of terminal sets from small grids <ref> [26, 27, 28] </ref> and triangular and hexagonal grids [83], but this is the first known study of the rectilinear problem. Note that the Euclidean problem is very different from the rectilinear one. <p> Note that the Euclidean problem is very different from the rectilinear one. For the Euclidean case, most previous work <ref> [26, 27] </ref> focuses on simple, mechanical constructions that are conjectured but not proven to be optimal. In the rectilinear case there seem to be no such simple constructions for which optimality can be reasonably conjectured.
Reference: [28] <author> E. J. Cockayne and D. E. Hewgill. </author> <title> Exact computation of Steiner minimal trees in the plane. </title> <journal> Information Processing Letters, </journal> <volume> 22 </volume> <pages> 151-156, </pages> <year> 1986. </year>
Reference-contexts: This modification increases the space requirements to O (n2 n ), which is still a significant improvement over Dreyfus-Wagner. 3.4 Full-set Screening The key concept in the Euclidean Steiner tree algorithms of Cockayne and Hewgill <ref> [28, 29] </ref> and Winter [149] and the RST algorithm of Salowe and Warme [131] is that of full-set screening. The idea is that relatively few subsets of the set of terminals can be full sets. <p> We now consider the general version of the thumbnail rectilinear Steiner tree (TRST) problem: compute an optimal RST of a set of terminals drawn from a k fi k grid, for small k. Researchers have previously investigated Euclidean Steiner trees of terminal sets from small grids <ref> [26, 27, 28] </ref> and triangular and hexagonal grids [83], but this is the first known study of the rectilinear problem. Note that the Euclidean problem is very different from the rectilinear one. <p> In particular, the Euclidean constructions largely focus on the complete k fi k terminal set, which is uninteresting in the rectilinear case since a minimum spanning tree (MST) is an optimal TRST for such an instance. Cockayne and Hewgill <ref> [28] </ref> use their exact algorithm for the general Euclidean Steiner tree problem to compute optimal Euclidean Steiner trees for a number of terminal sets on a small integer grid. <p> The fact that inputs are drawn from a small grid allows us some screening improvements beyond those for the standard RST problem. As in many previous full-set decomposition algorithms <ref> [28, 29, 131, 149] </ref>, we then use a branch and bound algorithm to find a set of candidate full sets of minimum total length, whose union spans all the terminals. Let M (T ) denote an MST of a set T of terminals.
Reference: [29] <author> E. J. Cockayne and D. E. Hewgill. </author> <title> Improved computation of plane Steiner minimal trees. </title> <journal> Algorithmica, </journal> <volume> 7 </volume> <pages> 219-229, </pages> <year> 1992. </year>
Reference-contexts: This modification increases the space requirements to O (n2 n ), which is still a significant improvement over Dreyfus-Wagner. 3.4 Full-set Screening The key concept in the Euclidean Steiner tree algorithms of Cockayne and Hewgill <ref> [28, 29] </ref> and Winter [149] and the RST algorithm of Salowe and Warme [131] is that of full-set screening. The idea is that relatively few subsets of the set of terminals can be full sets. <p> The fact that inputs are drawn from a small grid allows us some screening improvements beyond those for the standard RST problem. As in many previous full-set decomposition algorithms <ref> [28, 29, 131, 149] </ref>, we then use a branch and bound algorithm to find a set of candidate full sets of minimum total length, whose union spans all the terminals. Let M (T ) denote an MST of a set T of terminals.
Reference: [30] <author> J. P. Cohoon and J. L. Ganley. </author> <title> Rectilinear interconnections in the presence of obstacles. </title> <editor> In Y. T. Wong and M. Pecht, editors, </editor> <title> Advanced Routing in Electronic Modules. </title> <publisher> CRC Press, </publisher> <address> Boca Raton, Florida. </address> <note> (To appear). </note>
Reference-contexts: Section 4.3 presents results from the literature as well as new results on the general OARST problem. Section 4.4 discusses several special cases of the OARST problem, such as when Earlier versions of portions of this chapter appear in Ganley and Cohoon <ref> [30, 57] </ref>. 37 4.1. Terminology 38 all terminals lie on obstacle perimeters or when all terminals lie on the perimeter of the routing region.
Reference: [31] <author> J. P. Cohoon and D. S. Richards. </author> <title> Optimal two-terminal ff-fi wire routing. Integration: </title> <journal> the VLSI Journal, </journal> <volume> 6 </volume> <pages> 35-57, </pages> <year> 1988. </year>
Reference-contexts: Many of these approaches, rather than describing an algorithm per se, describe the construction of a graph guaranteed to contain shortest paths between all pairs of terminals, to which shortest-path algorithms are then applied. One such graph is the escape graph of Cohoon and Richards <ref> [31] </ref>. 4.2.2.1 The escape graph as follows. Draw a "beltway" around each obstacle at a distance of from the obstacle, and similarly inscribe a beltway around the interior of the routing region, as shown in Figure 4.2 (b). <p> Note that m = O (c 2 ) in the worst case and also that G e (T; S) is 4.2. Two-Terminal Interconnections 41 (a) (b) planar and thus contains O (m) edges. The escape graph is generated in O (c 2 ) time using a plane-sweep algorithm <ref> [31] </ref>. It has been proven [31] that the escape graph contains a shortest path between every pair of terminals. <p> Two-Terminal Interconnections 41 (a) (b) planar and thus contains O (m) edges. The escape graph is generated in O (c 2 ) time using a plane-sweep algorithm <ref> [31] </ref>. It has been proven [31] that the escape graph contains a shortest path between every pair of terminals. <p> Depending on the values of n and s, this may or may not improve on the O (m) time required by the technique of applying Kanchanasut's algorithm to the escape graph. Several researchers <ref> [6, 31, 112] </ref> have devised techniques to find a shortest path between two vertices in a rectilinear graph such as the escape graph in O (c log c) time. (Note that this can be sublinear in the size of the escape graph!) These techniques would seem to improve upon both the
Reference: [32] <author> J. P. Cohoon, D. S. Richards, and J. S. Salowe. </author> <title> An optimal Steiner tree algorithm for a net whose terminals lie on the perimeter of a rectangle. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 9 </volume> <pages> 398-407, </pages> <year> 1990. </year>
Reference-contexts: This special case is roughly analogous to the standard RST problem when the terminals lie on the perimeter of a convex polygon. In the standard RST problem, this restriction renders the problem solvable in polynomial time. For example, Cohoon, Richards, and Salowe <ref> [32] </ref> describe an algorithm to compute an optimal RST in linear time for a set of terminals that lie on the perimeter of a rectangle.
Reference: [33] <author> J. Cong, A. Kahng, G. Robins, M. Sarrafzadeh, and C. K. Wong. </author> <title> Probably good performance-driven global routing. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 11 </volume> <pages> 739-752, </pages> <year> 1992. </year>
Reference-contexts: Mondrian is easily modified for performance-driven routing and placement in which maximum source-sink path lengths are optimized along with maximum channel width and total wire length. For many technologies, maximum source-sink path lengths model electrical delay more accurately than total wire length <ref> [33] </ref>. First, the thumbnail rectilinear Steiner trees are replaced with rectilinear Steiner ar-borescences (RSAs) [127]. An RSA is a minimum-length Steiner tree that contains a shortest path from the source to every sink. For performance-driven placement and routing, thumbnail arborescences subsume the purpose of thumbnail Steiner trees.
Reference: [34] <author> J. Cong, K. S. Leung, and D. Zhou. </author> <title> Performance-driven interconnect design based on distributed RC delay model. </title> <booktitle> In Proceedings of the Thirtieth Design Automation Conference, </booktitle> <pages> pages 606-611, </pages> <year> 1993. </year>
Reference-contexts: One such measure is accomplished by minimizing a nonlinear function of the lengths of the wires in the interconnect. For example, a first-order approximation of electrical delay under many technologies is the product of the resistance and capacitance of a wire <ref> [34] </ref>. If the width of the wire is fixed, then this product is a quadratic function in the length of the wire. Consideration of these types of objective inspired us to introduce the power-p 7 Steiner tree problem, which is the subject of Chapter 5. <p> A fool sees not the same tree that a wise man sees. | William Blake, The Marriage of Heaven and Hell 5 The Power-p Steiner Tree Problem Many VLSI routing applications, such as routing to minimize estimates of electrical delay <ref> [14, 34, 77, 91] </ref>, involve the computation of geometric Steiner trees in which the weight of an edge is a nonlinear function of its length. Consideration of this type of application inspired us to introduce the power-p Steiner tree problem.
Reference: [35] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1990. </year>
Reference-contexts: Define a minimum power-p spanning tree (MpST) to be a spanning tree M that minimizes ! p (M ). It is well known that an MST is also a minimum bottleneck spanning tree, i.e. an M1ST (see Cormen, Leiserson, and Rivest <ref> [35] </ref>). In fact, an MST is an MpST for every p 0. Theorem 5.4 An M1ST is an MpST for every p 0. Proof : Consider the operation of Kruskal's MST algorithm [101]. First, the edges are sorted according to length.
Reference: [36] <author> D. M. Cvetkovic, M. Doob, and H. Sachs. </author> <title> Spectra of Graphs: Theory and Applications. </title> <publisher> Academic Press, </publisher> <address> New York, New York, </address> <year> 1979. </year> <month> Bibliography146 </month>
Reference-contexts: Since is a tree, and all trees are bipartite, 1 (A ) = 1 (A ) = n (A ) = n (A ) (the entire spectrum of a bipartite graph, considered as a set of points in R 1 , is symmetric with respect to reflection about the origin) <ref> [36] </ref>. Furthermore, since A = 3I A , each i (A) = i (A ) + 3.
Reference: [37] <author> P. J. de Rezende, D. T. Lee, and Y. F. Wu. </author> <title> Rectilinear shortest paths with rectangular barriers. </title> <booktitle> In Proceedings of the Seventeenth Symposium on Computational Geometry, </booktitle> <pages> pages 204-213, </pages> <year> 1985. </year>
Reference-contexts: However, we can apply Kanchanasut's algorithm [92] to the spp graph to compute a set of single-source shortest paths in O (s log s) total time, which is optimal <ref> [37] </ref>. Recent work by Lee, Yang, and Wong [105] gives an optimal-time plane-sweep algorithm that also solves the OASP problem directly in O (s log s) time. 4.2.3 Multiple-net routing The problem of routing multiple nets has received substantially less attention than the single-net problem.
Reference: [38] <author> P. M. Dearing and R. L. Francis. </author> <title> A network flow solution to a multifacility location problem involving rectilinear distances. </title> <journal> Transportation Science, </journal> <volume> 8 </volume> <pages> 126-141, </pages> <year> 1974. </year>
Reference-contexts: The bottleneck Steiner tree problem is the limiting case of the power-p problem as p approaches infinity. Again, bottleneck Steiner trees find application in VLSI routing [23, 76] as well as in facility location <ref> [38, 50, 113] </ref>. Our first set of results concerns computation of optimal power-p Steiner trees. We give an algorithm for computing optimal Euclidean power-2 Steiner trees and describe the difficulties in applying it to the rectilinear case. <p> It is difficult 5.2. Computing Optimal Power-p Steiner Trees 75 to determine the time required to solve a given linear program, but applying Khachian's ellipsoid algorithm [95] results in an O (n 6 ) algorithm (see Ignizio and Cavalier [87]). Dearing and Francis <ref> [38] </ref> describe a more involved linear programming formulation that involves solving two linear programs, each of which contains n 1 variables and 3n 2 5n constraints.
Reference: [39] <author> W. A. Dees and P. G. Karger. </author> <title> Automated rip-up and reroute techniques. </title> <booktitle> In Proceedings of the Nineteenth Design Automation Conference, </booktitle> <pages> pages 432-439, </pages> <year> 1982. </year>
Reference-contexts: If the instance is not entirely routed using this technique, then often rip-up and reroute techniques are applied, where one or more of the previously routed nets are removed and rerouted differently to make room for other nets <ref> [39, 40, 136] </ref>. Clearly these techniques are heuristic in nature, but 4.3. Multi-Terminal Interconnections 44 the more elegant solution|simultaneously routing all the nets|is NP-complete even in a planar graph if all nets contain only two terminals [126, 128].
Reference: [40] <author> W. A. Dees and R. J. Smith II. </author> <title> Performance of interconnection rip-up and reroute strategies. </title> <booktitle> In Proceedings of the Eighteenth Design Automation Conference, </booktitle> <pages> pages 382-390, </pages> <year> 1981. </year>
Reference-contexts: If the instance is not entirely routed using this technique, then often rip-up and reroute techniques are applied, where one or more of the previously routed nets are removed and rerouted differently to make room for other nets <ref> [39, 40, 136] </ref>. Clearly these techniques are heuristic in nature, but 4.3. Multi-Terminal Interconnections 44 the more elegant solution|simultaneously routing all the nets|is NP-complete even in a planar graph if all nets contain only two terminals [126, 128].
Reference: [41] <author> L. L. Deneen and J. B. Dezell. </author> <title> Using partitioning and clustering techniques to generate rectilinear Steiner trees. </title> <booktitle> In Proceedings of the Second Canadian Conference on Computational Geometry, </booktitle> <pages> pages 315-318, </pages> <year> 1990. </year>
Reference-contexts: The FDP algorithm is very simple and easily implemented and runs in O (n3 n ) time. This improves, 3.3. Full-set Dynamic Programming 22 both theoretically and practically, on the Dreyfus-Wagner algorithm, which is often used in practice to compute optimal RSTs <ref> [41, 42, 98, 145] </ref>. Theorem 2.3 implies that an optimal RST for every set of terminals is either a full tree satisfying Hwang's theorem (Theorem 2.2 on page 14), or else it can be divided into two optimal subtrees joined at a terminal. This observation leads to the FDP algorithm.
Reference: [42] <author> L. L. Deneen, G. M. Shute, and C. D. Thomborson. </author> <title> A probably fast, provably optimal algorithm for rectilinear Steiner trees. Random Structures and Algorithms, </title> <booktitle> 5 </booktitle> <pages> 535-557, </pages> <year> 1994. </year>
Reference-contexts: The FDP algorithm is very simple and easily implemented and runs in O (n3 n ) time. This improves, 3.3. Full-set Dynamic Programming 22 both theoretically and practically, on the Dreyfus-Wagner algorithm, which is often used in practice to compute optimal RSTs <ref> [41, 42, 98, 145] </ref>. Theorem 2.3 implies that an optimal RST for every set of terminals is either a full tree satisfying Hwang's theorem (Theorem 2.2 on page 14), or else it can be divided into two optimal subtrees joined at a terminal. This observation leads to the FDP algorithm. <p> It is particularly well-suited to applications in which the Dreyfus-Wagner algorithm was previously used, such as in the basis of recursive decomposition algorithms like those of Komlos and 3.9. Conclusions and Future Work 35 Shing [98] and Deneen, Shute, and Thomborson <ref> [42] </ref>. It is at least as easily implemented as the Dreyfus-Wagner algorithm and is faster and uses less space. Our second algorithm is called Screened Full-set Dynamic Programming (SFDP), and runs in at most O (n 2 (1 + ) n ) time, where = (1 + p 5)=2 1:62.
Reference: [43] <author> S. E. Dreyfus and R. A. Wagner. </author> <title> The Steiner problem in graphs. </title> <journal> Networks, </journal> <volume> 1 </volume> <pages> 195-207, </pages> <year> 1972. </year>
Reference-contexts: Hakimi's algorithm solves 8-terminal problems in less than a day on a workstation. 3.2. Previous Work 20 The most provably efficient algorithm for solving the GST problem is the dynamic programming algorithm of Dreyfus and Wagner <ref> [43] </ref>, which has time complexity O (n 2 3 n ) when applied to G. Its time and space requirements restrict it to solving instances with 16 or fewer terminals on a workstation. <p> Our results in Section 3.5 improve this bound slightly to O (2 n1:62 n ). Authors Time n day Dreyfus and Wagner <ref> [43] </ref> O (n 2 3 n ) 16 Hakimi [70] O (n2 n 2 n log n) 8 Lewis et al. [109] O (4 n log n =n 4 ) 10 Salowe and Warme [131] O (2 n1:62 n ) 35 Sidorenko [137] O (n!) 11 Smith [139] n O ( <p> The time complexity of the FDP algorithm is derived in a manner similar to that of Dreyfus and Wagner <ref> [43] </ref>. For each value of m in loop (1) in Figure 3.1, Loop (2) iterates I 2 = n times. 3.4. Full-set Screening 23 Loop (4) iterates I 4 = m2 m1 I 2 times. <p> same techniques as Smith to solve a number of other problems; readers interested in the technique itself are referred there as well as to Smith [139]. 3.8 Empirical Results We have implemented the FDP and SFDP algorithms in order to compare them empirically with Hakimi's algorithm [70], the Dreyfus-Wagner algorithm <ref> [43] </ref>, and the algorithm of Thomborson, Alpern, and Carter [145]. of input terminals. Each data point results from 10 runs on each of 10 different sets of terminals generated uniformly at random from a 10000 by 10000 grid. <p> Finally, we have demonstrated empirically that our algorithms are faster in practice than three popular previous algorithms for computing optimal RSTs: Hakimi's spanning tree enumeration algorithm [70], the dynamic programming algorithm of Dreyfus and Wag-ner <ref> [43] </ref>, and the improvement to the Dreyfus-Wagner algorithm devised by Thomborson, Alpern, and Carter [145]. We note that the improvement of the SFDP algorithm over the FDP algorithm comes at the expense of a significant increase in implementation complexity. <p> For the instances of the OARST problem tested here, this value is somewhat lower. An optimal Steiner tree in the escape graph can be computed using the algorithm of Dreyfus and Wagner <ref> [43] </ref>, which has time complexity O (m3 n ). Table 4.5 gives the average improvement of the optimal OARST over the MST for the instances in Table 4.4 with 10 or fewer terminals. <p> Erickson, Monma, and Veinott [51] (and independently Provan [125]) show that the graph the routing region. Steiner tree problem is solvable in polynomial time for a 1-outerplanar graph. One way to achieve polynomial-time solution is with a modification of the Dreyfus-Wagner dynamic programming algorithm <ref> [43] </ref>. The key to the Dreyfus-Wagner algorithm, and the source of its exponential time complexity, is that it examines all possible subsets of the set of terminals. <p> Applied to the grid graph G kfik , an upper bound on the time complexity of Hakimi's algorithm is O (k 2 2 k 2 ). For the standard RST problem, Hakimi's algorithm is less efficient than dynamic programming algorithms such as that of Dreyfus and Wagner <ref> [43] </ref> and those described in Chapter 3. However, these algorithms examine every subset of the set of terminals, so when applied to thumbnail-sized inputs, they have time complexity (2 k 2 ).
Reference: [44] <author> Z. Drezner and G. O. Wesolowsky. </author> <title> Layout of facilities with some fixed points. </title> <journal> Computers and Operations Research, </journal> <volume> 12 </volume> <pages> 603-610, </pages> <year> 1985. </year>
Reference-contexts: The BST problem is the limiting case of the power-p Steiner tree problem as p approaches infinity. In this section, we consider computation of optimal BSTs under the rectilinear distance metric, i.e., the rectilinear bottleneck Steiner tree (RBST) problem. Drezner and Wesolowsky <ref> [44] </ref> examine a generalization of the RBST problem where the topology is not necessarily a tree. They give two iterative techniques that asymptotically converge to optimal solutions, but they do not describe the rate of convergence and the algorithms do not produce exact solutions.
Reference: [45] <author> D. Z. Du and F. K. Hwang. </author> <title> A proof of the Gilbert-Pollak conjecture on the Steiner ratio. </title> <journal> Algorithmica, </journal> <volume> 7 </volume> <pages> 121-135, </pages> <year> 1992. </year>
Reference-contexts: For geometric Steiner tree problems, is often smaller than 2. For the EST problem, = 2= 3 (this fact was conjectured by Gilbert and Pollak in 1966 [65] and finally 2.2. Steiner Trees 13 proven in 1992 by Du and Hwang <ref> [45] </ref>). For the RST tree problem, Hwang [82] proved that = 3=2. 2.2.2 Rectilinear Steiner trees Most of the results in this dissertation concern the RST problem. The RST problem naturally arises in VLSI routing applications because typically VLSI fabrication technology requires all wires to be either horizontal or vertical.
Reference: [46] <author> A. E. Dunlop and B. W. Kernighan. </author> <title> A procedure for placement of standard-cell VLSI circuits. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 4 </volume> <pages> 92-98, </pages> <year> 1985. </year> <month> Bibliography147 </month>
Reference-contexts: The process is then repeated using a horizontal line in each of the two regions. The entire process is repeated recursively until the number of logic blocks in each region is small enough to place by some other method. This process is illustrated in Figure 6.3. Dunlop and Kernighan <ref> [46] </ref> improved min-cut bisection techniques by adding a feature called terminal propagation. In terminal propagation, virtual terminals are added along 6.2. Previous Work 99 =) =) =) the borders between regions so that the placement within each region better reflects its connections to neighboring regions. <p> This switch block becomes a virtual terminal for the net in each of the neighboring regions of the partitioning template, in a similar manner to Bapat and Cohoon [8] and Dunlop and Kernighan <ref> [46] </ref>. Virtual terminals allow the subproblems within each region of the template to be solved independently of the rest of the circuit, such that the union of the 6.4. The MONDRIAN System 108 solutions to the subproblems is a solution for the entire circuit area within the current template.
Reference: [47] <author> H. Edelsbrunner. </author> <title> Algorithms in Combinatorial Geometry. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <year> 1987. </year>
Reference-contexts: Assume that no two terminals have the same x or y value; if necessary, this property can be ensured by perturbation (see Edelsbrunner <ref> [47] </ref>). Label the terminals t 1 ; t 2 ; : : : ; t n such that x t i &lt; x t i+1 for all 1 i &lt; n. <p> There can be degenerate cases where two horizontal lines or two vertical lines intersect, in which case jP (s)j = 1, but such degeneracies can be eliminated by perturbation (see Edelsbrunner <ref> [47] </ref>). If every horizontal line intersects every vertical line and all intersections lie within R (s), then jP (s)j = 8 2 = 64. 2 This upper bound is met for four concentric rectangles, though it is unclear whether such a configuration can arise in the construction of an RBST.
Reference: [48] <author> A. El Gamal, J. Greene, J. Reyneri, E. Rogoyski, K. El-Ayat, and A. Mohsen. </author> <title> An architecture for electrically configurable gate arrays. </title> <journal> IEEE Journal of Solid State Circuits, </journal> <volume> 24 </volume> <pages> 394-398, </pages> <year> 1988. </year>
Reference-contexts: The gate array design style simplifies the physical design process still further; now the placement process consists simply of assigning the unplaced cells to the cell templates. The gate array concept is taken yet another step further in the field-programmable gate array (FPGA) design style <ref> [48] </ref>. In an FPGA, even the routing resources are prefabricated 3 on the circuit surface. A given design is implemented by electrically programming the wires between the cell templates to realize the desired electrical interconnections. <p> We also present results concerning the quality of a minimum spanning tree as an approximation of a power-p Steiner tree. Field-programmable gate array (FPGA) technology <ref> [48] </ref> allows inexpensive prototyping and implementation of custom integrated-circuit designs. An FPGA is a prefabricated integrated circuit consisting of electrically reprogrammable logic and routing resources.
Reference: [49] <author> W. C. </author> <title> Elmore. The transient response of damped linear network with particular regard to wideband amplifiers. </title> <journal> Journal of Applied Physics, </journal> <volume> 19 </volume> <pages> 55-63, </pages> <year> 1948. </year>
Reference-contexts: In Section 5.2.5 we described an algorithm for computing RBSTs with minimum total weight, which find application in VLSI routing [23, 76]. Other important multiobjective power-p Steiner tree problems arise in the computation of Steiner trees with minimum electrical delay. For example, the Elmore estimate of electrical delay <ref> [49] </ref> is essentially a combination of power-2 weight and path lengths from a designated source terminal to the remaining terminals, which are sinks. "O look at the trees!" they cried, "O look at the trees!" | Robert Bridges, London Snow 6 FPGA Placement and Routing 6.1 Introduction Field-programmable gate arrays (FPGAs)
Reference: [50] <author> J. Elzinga, D. Hearn, and W. D. Randolph. </author> <title> Minimax multifacility location with Euclidean distances. </title> <journal> Transportation Science, </journal> <volume> 10 </volume> <pages> 321-336, </pages> <year> 1976. </year>
Reference-contexts: The bottleneck Steiner tree problem is the limiting case of the power-p problem as p approaches infinity. Again, bottleneck Steiner trees find application in VLSI routing [23, 76] as well as in facility location <ref> [38, 50, 113] </ref>. Our first set of results concerns computation of optimal power-p Steiner trees. We give an algorithm for computing optimal Euclidean power-2 Steiner trees and describe the difficulties in applying it to the rectilinear case. <p> Since there are at most f (n) edges in some path through a and b in an optimal BST, the length of the longest edge must be at least 1=f (n). 2 5.3.3 Better approximate bottleneck Steiner trees Elzinga, Hearn, and Randolph <ref> [50] </ref> and Love, Wesolowsky, and Kraemer [113] describe algorithms based on nonlinear optimization that compute an *-approximation to a Euclidean bottleneck Steiner tree for a given topology.
Reference: [51] <author> R. E. Erickson, C. L. Monma, and A. F. Veinott Jr. </author> <title> Send-and-split method for minimum-concave-cost network flows. </title> <journal> Mathematics of Operations Research, </journal> <volume> 12 </volume> <pages> 634-664, </pages> <year> 1987. </year>
Reference-contexts: A planar graph in which all terminals lie on the boundary of the infinite face is called 1-outerplanar. Figure 4.6 shows an instance with the terminals on the perimeter of the routing region and its escape graph. Erickson, Monma, and Veinott <ref> [51] </ref> (and independently Provan [125]) show that the graph the routing region. Steiner tree problem is solvable in polynomial time for a 1-outerplanar graph. One way to achieve polynomial-time solution is with a modification of the Dreyfus-Wagner dynamic programming algorithm [43].
Reference: [52] <author> J. W. Eyster and J. A. White. </author> <title> Some properties of the squared Euclidean distance location problem. </title> <journal> AIIE Transactions, </journal> <volume> 5 </volume> <pages> 275-280, </pages> <year> 1973. </year>
Reference-contexts: In addition to the VLSI applications mentioned above, nonlinear Steiner tree problems are often studied in the operations research community under the name facility location <ref> [52, 78, 147] </ref>. A special case of the power-p Steiner tree problem is the bottleneck Steiner tree problem, which is to find a geometric Steiner tree that minimizes the length of the longest edge. <p> In that context, Eyster and White <ref> [52] </ref> 5.2. Computing Optimal Power-p Steiner Trees 67 give an iterative procedure that approximates an optimal solution to a quadratic facility location problem, and White [147] proves a result similar to our Theorem 5.1. However, ours is the first known algorithm for computing optimal E2STs.
Reference: [53] <author> A. Frank, T. Nishizeki, N. Saito, H. Suzuki, and E. Tardos. </author> <title> Algorithms for routing around a rectangle. </title> <journal> Discrete Applied Mathematics, </journal> <volume> 40 </volume> <pages> 363-378, </pages> <year> 1992. </year>
Reference-contexts: Question: Is there a set of paths P i in G such that each P i spans all v 2 R i and such that max e2E jfP i : e 2 P i gj C? 6.4.4.1 NP-Completeness Frank, Nishizeki, Saito, Suzuki, and Tardos <ref> [53] </ref> show that the MCRC problem is solvable in polynomial time if every net contains 2 vertices. However, their algorithm relies on the planar multicommodity flow theorem of Okamura and Seymour [121], which does not apply if nets can contain more than 2 vertices.
Reference: [54] <author> J. L. Ganley and J. P. Cohoon. </author> <title> A faster dynamic programming algorithm for exact rectilinear Steiner minimal trees. </title> <booktitle> In Proceedings of the Fourth Great Lakes Symposium on VLSI, </booktitle> <pages> pages 238-241, </pages> <year> 1994. </year>
Reference-contexts: This second algorithm runs in at most O (n 2 (1 + ) n ) time, where = (1 + p 5)=2 1:62. For instances Earlier versions of portions of this chapter appear in Ganley and Cohoon <ref> [54, 56] </ref>. 18 3.2. Previous Work 19 that can reasonably be solved in practice, we show that these bounds are better than those of any previous algorithm. The remainder of this chapter is organized as follows.
Reference: [55] <author> J. L. Ganley and J. P. Cohoon. </author> <title> FPGA layout by congestion-driven simultaneous placement and routing. </title> <type> Technical Report CS-94-47, </type> <institution> Department of Computer Science, University of Virginia, Charlottesville, Virginia, </institution> <year> 1994. </year> <month> Bibliography148 </month>
Reference-contexts: Switch blocks, depicted as white squares in Figure 6.1, connect different sets of channel segments to one another. A switch block contains an interconnect topology that connects each incoming edge to F s Earlier versions of portions of this chapter appear in Ganley and Cohoon <ref> [4, 55, 58, 59, 60] </ref>. 95 6.1. Introduction 96 (inset). edges exiting the other three sides of the switch block.
Reference: [56] <author> J. L. Ganley and J. P. Cohoon. </author> <title> Optimal rectilinear Steiner minimal trees in O(n 2 2:62 n ) time. </title> <booktitle> In Proceedings of the Sixth Canadian Conference on Computational Geometry, </booktitle> <pages> pages 308-313, </pages> <year> 1994. </year>
Reference-contexts: This second algorithm runs in at most O (n 2 (1 + ) n ) time, where = (1 + p 5)=2 1:62. For instances Earlier versions of portions of this chapter appear in Ganley and Cohoon <ref> [54, 56] </ref>. 18 3.2. Previous Work 19 that can reasonably be solved in practice, we show that these bounds are better than those of any previous algorithm. The remainder of this chapter is organized as follows.
Reference: [57] <author> J. L. Ganley and J. P. Cohoon. </author> <title> Routing a multi-terminal critical net: Steiner tree construction in the presence of obstacles. </title> <booktitle> In Proceedings of the International Symposium on Circuits and Systems, </booktitle> <pages> pages 113-116, </pages> <year> 1994. </year>
Reference-contexts: Section 4.3 presents results from the literature as well as new results on the general OARST problem. Section 4.4 discusses several special cases of the OARST problem, such as when Earlier versions of portions of this chapter appear in Ganley and Cohoon <ref> [30, 57] </ref>. 37 4.1. Terminology 38 all terminals lie on obstacle perimeters or when all terminals lie on the perimeter of the routing region.
Reference: [58] <author> J. L. Ganley and J. P. Cohoon. </author> <title> Minimum-congestion hypergraph embedding in a cycle. </title> <type> Technical Report CS-95-04, </type> <institution> Department of Computer Science, University of Virginia, Charlottesville, Virginia, </institution> <year> 1995. </year>
Reference-contexts: Switch blocks, depicted as white squares in Figure 6.1, connect different sets of channel segments to one another. A switch block contains an interconnect topology that connects each incoming edge to F s Earlier versions of portions of this chapter appear in Ganley and Cohoon <ref> [4, 55, 58, 59, 60] </ref>. 95 6.1. Introduction 96 (inset). edges exiting the other three sides of the switch block.
Reference: [59] <author> J. L. Ganley and J. P. Cohoon. </author> <title> Provably good moat routing. </title> <type> Technical Report CS-95-13, </type> <institution> Department of Computer Science, University of Virginia, Charlottesville, Virginia, </institution> <year> 1995. </year>
Reference-contexts: Switch blocks, depicted as white squares in Figure 6.1, connect different sets of channel segments to one another. A switch block contains an interconnect topology that connects each incoming edge to F s Earlier versions of portions of this chapter appear in Ganley and Cohoon <ref> [4, 55, 58, 59, 60] </ref>. 95 6.1. Introduction 96 (inset). edges exiting the other three sides of the switch block.
Reference: [60] <author> J. L. Ganley and J. P. Cohoon. </author> <title> Thumbnail rectilinear Steiner trees. </title> <booktitle> In Proceedings of the Fifth Great Lakes Symposium on VLSI, </booktitle> <pages> pages 46-49, </pages> <year> 1995. </year>
Reference-contexts: Switch blocks, depicted as white squares in Figure 6.1, connect different sets of channel segments to one another. A switch block contains an interconnect topology that connects each incoming edge to F s Earlier versions of portions of this chapter appear in Ganley and Cohoon <ref> [4, 55, 58, 59, 60] </ref>. 95 6.1. Introduction 96 (inset). edges exiting the other three sides of the switch block.
Reference: [61] <author> J. L. Ganley and J. S. Salowe. </author> <title> Optimal and approximate bottleneck Steiner trees. </title> <type> manuscript, </type> <year> 1994. </year>
Reference-contexts: We give an algorithm for computing optimal Euclidean power-2 Steiner trees and describe the difficulties in applying it to the rectilinear case. We give an algorithm for computing optimal Earlier versions of portions of this chapter appear in Ganley and Salowe <ref> [61] </ref>. 64 5.1. Basics 65 rectilinear bottleneck Steiner trees, and describe the difficulties encountered when trying to generalize this algorithm to the Euclidean case.
Reference: [62] <author> M. R. Garey, R. L. Graham, and D. S. Johnson. </author> <title> The complexity of computing Steiner minimal trees. </title> <journal> SIAM Journal on Applied Mathematics, </journal> <volume> 32 </volume> <pages> 835-859, </pages> <year> 1977. </year>
Reference-contexts: These are referred to as the Euclidean Steiner tree (EST) problem and the rectilinear Steiner tree (RST) problem, respectively. Both of these 2.2. Steiner Trees 12 variations have been proven to be NP-complete as well (by Garey, Graham, and Johnson <ref> [62] </ref> and Garey and Johnson [63], respectively). 2.2.1 The Steiner ratio Much attention has been given to the quality of an MST as an approximation of an optimal Steiner tree for various versions of the Steiner tree problem. <p> Conclusions and Future Work 93 bottleneck Steiner tree problems are NP-complete if one imposes an upper bound (of less than n 2) on the number of Steiner points allowed. The NP-completeness proofs for the power-1 problems <ref> [62, 63] </ref> do not easily generalize to the power-p or bottleneck problems. The reason for this difficulty is the absence of the triangle inequality.
Reference: [63] <author> M. R. Garey and D. S. Johnson. </author> <title> The rectilinear Steiner tree problem is NP-complete. </title> <journal> SIAM Journal on Applied Mathematics, </journal> <volume> 32 </volume> <pages> 826-834, </pages> <year> 1977. </year>
Reference-contexts: In Chapter 3, we present two new algorithms for computing optimal rectilinear Steiner trees. As suggested by the fact that the rectilinear Steiner tree problem is NP-complete <ref> [63] </ref>, the algorithms we present require time that is exponential in the number of pins to be interconnected. <p> These are referred to as the Euclidean Steiner tree (EST) problem and the rectilinear Steiner tree (RST) problem, respectively. Both of these 2.2. Steiner Trees 12 variations have been proven to be NP-complete as well (by Garey, Graham, and Johnson [62] and Garey and Johnson <ref> [63] </ref>, respectively). 2.2.1 The Steiner ratio Much attention has been given to the quality of an MST as an approximation of an optimal Steiner tree for various versions of the Steiner tree problem. <p> The development of Mondrian also includes some algorithmic results of independent interest, such as minimum-congestion routing in a cycle and computing optimal rectilinear Steiner trees for terminals in a small grid. 3 Computing Optimal Rectilinear Steiner Trees As mentioned in Section 2.2, the rectilinear Steiner tree (RST) problem is NP-complete <ref> [63] </ref>. This suggests that a polynomial-time algorithm that computes an optimal RST is unlikely to exist. As with most NP-complete problems, one avenue of research is to devise exponential-time algorithms that compute optimal solutions to small instances. <p> The rectilinear Steiner tree (RST) problem is described in Section 2.2.2. The obstacle-avoiding rectilinear Steiner tree (OARST) problem is identical to the RST problem except for the presence of rectilinear obstacles that the segments in the Steiner tree must not intersect. The RST problem is NP-complete <ref> [63] </ref>, and therefore the OARST problem is as well. However, the two-terminal problem is efficiently solvable. The remainder of this chapter consists of four sections. Section 4.2 surveys some of the literature on the special case of the OARST problem in which there are only two terminals. <p> Conclusions and Future Work 93 bottleneck Steiner tree problems are NP-complete if one imposes an upper bound (of less than n 2) on the number of Steiner points allowed. The NP-completeness proofs for the power-1 problems <ref> [62, 63] </ref> do not easily generalize to the power-p or bottleneck problems. The reason for this difficulty is the absence of the triangle inequality.
Reference: [64] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-completeness. </title> <editor> W. H. </editor> <publisher> Freeman and Company, </publisher> <address> New York, New York, </address> <year> 1979. </year>
Reference-contexts: A fully polynomial-time approximation scheme (FPTAS) is an algorithm that computes a solution to an instance with input length L that is within * of optimal in time polynomial in L and 1=* <ref> [64] </ref>. Theorem 5.9 The algorithm described above is an FPTAS for the BST problem. Proof : For a given *, consider the number of iterations required to converge to a solution within * of optimal. That is, we want to find k such that m=2 k *. <p> For r nets, the vector s has at most r s (k) different possible values. Thus, an optimal solution to the congestion balancing subproblem is computed in a manner similar to the well-known dynamic programming algorithm for the partition problem <ref> [64] </ref>. Let B (i) denote a set of possible values of b for nets R 1 through R i . The set B (i+1) is computed by adding each possible thumbnail for net R i+1 to each entry b (i) 2 B (i) . <p> We now prove that the CCMCP problem, and thus the MCRC problem, is NP-complete. Theorem 6.1 The MCRC problem is NP-complete. Proof : Inclusion in NP is obvious. To prove NP-hardness, we perform a transformation from numerical matching with target sums (NMTS) <ref> [64] </ref> to CCMCP. <p> containing exactly one element from each of X and Y , such that for 1 i q, P Note that it must be the case that X s (a) = 1iq and also that s (a) &lt; B i for all a 2 X [ Y and 1 i q <ref> [64] </ref>. 6.4.
Reference: [65] <author> E. N. Gilbert and H. O. Pollak. </author> <title> Steiner minimal trees. </title> <journal> SIAM Journal on Applied Mathematics, </journal> <volume> 16 </volume> <pages> 1-29, </pages> <year> 1966. </year> <month> Bibliography149 </month>
Reference-contexts: Thus, 2 2=n; again, is arbitrarily close to 2 if n is large. For geometric Steiner tree problems, is often smaller than 2. For the EST problem, = 2= 3 (this fact was conjectured by Gilbert and Pollak in 1966 <ref> [65] </ref> and finally 2.2. Steiner Trees 13 proven in 1992 by Du and Hwang [45]). For the RST tree problem, Hwang [82] proved that = 3=2. 2.2.2 Rectilinear Steiner trees Most of the results in this dissertation concern the RST problem.
Reference: [66] <author> C. D. Godsil. </author> <title> Spectra of trees. </title> <editor> In M. Rosenfeld and J. Zaks, editors, </editor> <title> Convexity and Graph Theory, </title> <journal> volume 20 of Annals of Discrete Mathematics, </journal> <pages> pages 151-159. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, Netherlands, </address> <year> 1983. </year>
Reference-contexts: the following expression: (A) = fi fi 1 (A ) + 3 fi fi fi fi n (A ) + 3 fi fi If A F is a the adjacency matrix of a forest (a collection of one or more trees) with maximum degree d, then p p d 1 <ref> [66] </ref>. The maximum degree of is 3, so p p 2.
Reference: [67] <author> G. Golub and J. M. Ortega. </author> <title> Scientific Computing: An Introduction with Parallel Computing. </title> <publisher> Academic Press, </publisher> <address> San Diego, California, </address> <year> 1993. </year>
Reference-contexts: Further more, A is well conditioned. Theorem 5.2 The condition number (A) of A satisfies (A) p 3 2 2 1 Unless cited otherwise, linear algebra results are found in most textbooks that cover numerical linear algebra, such as Golub and Ortega <ref> [67] </ref>. 5.2. Computing Optimal Power-p Steiner Trees 70 Proof : The matrix A is clearly symmetric. Gershgorin's theorem indicates that the eigenvalues of A lie in the interval [0; 6]. Since A is nonsingular, none of its eigenval-ues is 0.
Reference: [68] <author> T. Gunther. </author> <title> Die raumliche Anordnung von Einheiten mit Wechselbeziehungen. </title> <journal> Elektronische Datenverarbeitung, </journal> <volume> 11 </volume> <pages> 209-211, </pages> <year> 1969. </year>
Reference-contexts: Until recently, local search techniques were considered inherently superior to partitioning-based methods, but recently 6.2. Previous Work 98 some sophisticated partitioning-based algorithms such as GORDIAN [97] have provided strong competition for local search strategies. The origins of partitioning-based placement are represented by the min-cut bisection algorithms of Gunther <ref> [68] </ref>, Breuer [15, 16], and Lauther [102]. In these algorithms, a vertical line is conceptually drawn down the approximate center of the circuit area. The logic blocks are then partitioned into two groups of roughly equal size, which will be placed on opposite sides of the line.
Reference: [69] <author> U. I. Gupta, D. T. Lee, and J. Y.-T. Leung. </author> <title> Efficient algorithms for interval graphs and circular arc graphs. </title> <journal> Networks, </journal> <volume> 12 </volume> <pages> 459-467, </pages> <year> 1982. </year>
Reference-contexts: Now find a maximum independent set (MIS) in G R . This is accomplished in O (a 2 ) time, where a is the number of arcs in G R <ref> [69] </ref>. The number a of arcs is at most O (rm). Thus, an MIS in G R is computed in at most O ((rm) 2 ) time.
Reference: [70] <author> S. L. Hakimi. </author> <title> Steiner's problem in graphs and its implications. </title> <journal> Networks, </journal> <volume> 1 </volume> <pages> 113-133, </pages> <year> 1971. </year>
Reference-contexts: An early algorithm for the GST problem is Hakimi's spanning tree enumeration algorithm <ref> [70] </ref>, which has time complexity O (n2 n 2 n log n) when applied to G. Hakimi's algorithm solves 8-terminal problems in less than a day on a workstation. 3.2. <p> Our results in Section 3.5 improve this bound slightly to O (2 n1:62 n ). Authors Time n day Dreyfus and Wagner [43] O (n 2 3 n ) 16 Hakimi <ref> [70] </ref> O (n2 n 2 n log n) 8 Lewis et al. [109] O (4 n log n =n 4 ) 10 Salowe and Warme [131] O (2 n1:62 n ) 35 Sidorenko [137] O (n!) 11 Smith [139] n O ( p Thomborson et al. [145] O (n 2 3 <p> [85] use essentially the same techniques as Smith to solve a number of other problems; readers interested in the technique itself are referred there as well as to Smith [139]. 3.8 Empirical Results We have implemented the FDP and SFDP algorithms in order to compare them empirically with Hakimi's algorithm <ref> [70] </ref>, the Dreyfus-Wagner algorithm [43], and the algorithm of Thomborson, Alpern, and Carter [145]. of input terminals. Each data point results from 10 runs on each of 10 different sets of terminals generated uniformly at random from a 10000 by 10000 grid. <p> Finally, we have demonstrated empirically that our algorithms are faster in practice than three popular previous algorithms for computing optimal RSTs: Hakimi's spanning tree enumeration algorithm <ref> [70] </ref>, the dynamic programming algorithm of Dreyfus and Wag-ner [43], and the improvement to the Dreyfus-Wagner algorithm devised by Thomborson, Alpern, and Carter [145]. We note that the improvement of the SFDP algorithm over the FDP algorithm comes at the expense of a significant increase in implementation complexity. <p> The shortest tree seen is returned as the optimal tree. This computation incurs a time complexity of O (m 2 ), dominated by checking the H topology. These explicit enumeration algorithms are similar to Hakimi's spanning tree enumeration algorithm <ref> [70] </ref>; however, identifying and examining the various topologies explicitly has significant dividends. A straightforward implementation of Hakimi's spanning tree enumeration algorithm that uses an MST algorithm is many times slower than the explicit enumeration algorithms. <p> We devise a full-set decomposition algorithm for computing optimal TRSTs, which uses the special nature of the inputs to improve the screening of candidate full sets. We then present experimental results comparing this algorithm with two existing algorithms for computing optimal rectilinear Steiner trees: Hakimi's spanning tree enumeration algorithm <ref> [70] </ref> and the dynamic programming algorithm of Aho, Garey, and Hwang [2] for terminals that lie on a small number of parallel lines. <p> One such algorithm is Hakimi's spanning tree enumeration algorithm for the graph Steiner tree problem <ref> [70] </ref>. Hakimi's algorithm has time complexity O (n2 n ) in a graph with 6.9. Other Issues 133 equally weighted edges, where n is the number of candidate Steiner points.
Reference: [71] <author> M. Hanan. </author> <title> On Steiner's problem with rectilinear distance. </title> <journal> SIAM Journal on Applied Mathematics, </journal> <volume> 14 </volume> <pages> 255-265, </pages> <year> 1966. </year>
Reference-contexts: Typically, integrated-circuit technology requires the use of only horizontal and vertical wires. This restriction prescribes the use of the rectilinear distance metric that measures 4 distance in this manner <ref> [71] </ref>. (The rectilinear distance between two points is the sum of the x-distance and the y-distance between the points.) The precise routing objectives that minimize electrical delay vary with the particulars of the VLSI technology being used. <p> The severely constrained nature of the rectilinear distance metric leads to several 2.2. Steiner Trees 14 important geometric results. The first (and earliest) is Hanan's theorem. Theorem 2.1 (Hanan <ref> [71] </ref>) For every set of terminals, there exists an optimal RST in which every Steiner point shares both its x- and y-coordinates with some pair of terminals. Hanan's theorem implies that the following graph, called the Hanan grid graph, always contains an optimal RST. <p> We have examined the problem of multi-terminal routing in the presence of obstacles, which we formulate as the obstacle-avoiding rectilinear Steiner tree (OARST) problem. We proved a theorem, analogous to Hanan's theorem <ref> [71] </ref> for the standard RST problem, that enables the first algorithms that compute optimal OARSTs in time corresponding to the size of the instance rather than the size of the routing area.
Reference: [72] <author> N. Hasan, G. Vijayan, and C. K. Wong. </author> <title> A neighborhood improvement algorithm for rectilinear Steiner trees. </title> <booktitle> In Proceedings of the International Symposium on Circuits and Systems, </booktitle> <pages> pages 2869-2872, </pages> <year> 1990. </year>
Reference-contexts: The running time of Steinerization heuristics can be improved using a batching technique similar to the heuristic of Hasan, Vijayan, and Wong <ref> [72] </ref> for the standard RST problem. In their neighborhood Steinerization heuristic, each vertex v is assigned a weight that is the amount of improvement that is gained by Steinerizing v and its neighbors.
Reference: [73] <author> D. W. Hightower. </author> <title> A solution to the line-routing problem on the continuous plane. </title> <booktitle> In Proceedings of the Sixth Design Automation Workshop, </booktitle> <pages> pages 1-24, </pages> <year> 1969. </year>
Reference-contexts: Research into line-based algorithms 4.2. Two-Terminal Interconnections 40 for rectilinear interconnection in the presence of obstacles began with the independent works of Hightower <ref> [73] </ref> and Mikami and Tabuchi [116]. Their algorithms were innovative in that they were the first line-based routing algorithms, but they suffer several disadvantages.
Reference: [74] <author> D. W. Hightower. </author> <title> The interconnection problem|a tutorial. </title> <booktitle> In Proceedings of the Tenth Design Automation Workshop, </booktitle> <pages> pages 1-21, </pages> <year> 1973. </year>
Reference-contexts: We refer to this special case of the OARST problem as the obstacle-avoiding shortest path (OASP) problem. The literature on the OASP and similar problems is quite vast; since other surveys have been written <ref> [74, 104, 141] </ref> and since our focus is on Steiner-tree routing of multi-terminal nets, we only overview some of the principal results for the two-terminal case. 4.2.1 Grid-based algorithms The earliest techniques for solving the OASP problem are so-called grid-based algorithms.
Reference: [75] <author> J. Ho, G. Vijayan, and C. K. Wong. </author> <title> New algorithms for the rectilinear Steiner tree problem. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 9 </volume> <pages> 185-193, </pages> <year> 1990. </year> <month> Bibliography150 </month>
Reference-contexts: Wong and Pecht [154] describe an exact RST algorithm that is essentially an exhaustive version of the edge-embedding heuristic of Ho, Vijayan, and Wong <ref> [75] </ref>. The time complexity of the algorithm is a summation for which no closed form is given, but it grows slightly faster than O (4 n ). Their algorithm solves roughly 15-terminal instances [153].
Reference: [76] <author> N. D. Holmes, N. A. Sherwani, and M. Sarrafzadeh. </author> <title> Utilization of vacant terminals for improved over-the-cell channel routing. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 12 </volume> <pages> 780-792, </pages> <year> 1993. </year>
Reference-contexts: The bottleneck Steiner tree problem is the limiting case of the power-p problem as p approaches infinity. Again, bottleneck Steiner trees find application in VLSI routing <ref> [23, 76] </ref> as well as in facility location [38, 50, 113]. Our first set of results concerns computation of optimal power-p Steiner trees. We give an algorithm for computing optimal Euclidean power-2 Steiner trees and describe the difficulties in applying it to the rectilinear case. <p> In Section 5.2.5 we described an algorithm for computing RBSTs with minimum total weight, which find application in VLSI routing <ref> [23, 76] </ref>. Other important multiobjective power-p Steiner tree problems arise in the computation of Steiner trees with minimum electrical delay.
Reference: [77] <author> X. Hong, T. Xue, E. S. Kuh, C.-K. Cheng, and J. Huang. </author> <title> Performance-driven Steiner tree algorithms for global routing. </title> <booktitle> In Proceedings of the Thirtieth Design Automation Conference, </booktitle> <pages> pages 177-181, </pages> <year> 1993. </year>
Reference-contexts: A fool sees not the same tree that a wise man sees. | William Blake, The Marriage of Heaven and Hell 5 The Power-p Steiner Tree Problem Many VLSI routing applications, such as routing to minimize estimates of electrical delay <ref> [14, 34, 77, 91] </ref>, involve the computation of geometric Steiner trees in which the weight of an edge is a nonlinear function of its length. Consideration of this type of application inspired us to introduce the power-p Steiner tree problem.
Reference: [78] <author> J. N. Hooker. </author> <title> Solving nonlinear multiple-facility network location problems. </title> <journal> Networks, </journal> <volume> 19 </volume> <pages> 117-133, </pages> <year> 1989. </year>
Reference-contexts: In addition to the VLSI applications mentioned above, nonlinear Steiner tree problems are often studied in the operations research community under the name facility location <ref> [52, 78, 147] </ref>. A special case of the power-p Steiner tree problem is the bottleneck Steiner tree problem, which is to find a geometric Steiner tree that minimizes the length of the longest edge. <p> Nonlinear versions of the p-center and p-median problems (here p describes the number of Steiner points, not the edge weight function) are analogous to the power-p and bottleneck Steiner tree problems, respectively, with the addition of restrictions on the possible locations of the Steiner points. Hooker <ref> [78] </ref> states that these problems are NP-complete. Additionally, it is easily shown (for example, by a transformation from geometric connected dominating set [110]) that both the power-p and 5.4.
Reference: [79] <author> J. E. Hopcroft and R. M. Karp. </author> <title> An n 5=2 algorithm for maximum matchings in bipartite graphs. </title> <journal> SIAM Journal on Computing, </journal> <volume> 2 </volume> <pages> 225-231, </pages> <year> 1973. </year>
Reference-contexts: The virtual-terminal assignment problem is now solved by finding a minimum-cost perfect matching in B, which is computed in O (jR (e)j 5=2 ) time by the algorithm of Hopcroft and Karp <ref> [79] </ref>. Note that this time complexity is at most O (r 5=2 ). Once the assignment of switch blocks to nets is accomplished, each switch block is added as a virtual terminal to the corresponding net. The Mondrian algorithm is then called recursively for the portion 6.4.
Reference: [80] <author> J. E. Hopcroft and J. D. Ullman. </author> <title> Introduction to Automata Theory, Languages, and Computation. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1979. </year>
Reference-contexts: These strings are described by regular expressions; readers not familiar with regular expression notation may refer to Hopcroft and Ullman <ref> [80] </ref>. Define a string S to be a sequence s 1 s 2 s m , where s i 2 fa; bg, i.e. S is a string in the language (a + b) fl .
Reference: [81] <author> T. W. Hungerford. </author> <title> Algebra. </title> <publisher> Springer-Verlag, </publisher> <address> New York, New York, </address> <year> 1974. </year>
Reference-contexts: The best approach to approximating solutions to such polynomials is iterative numerical techniques that converge to the solutions. 2 Unless cited otherwise, algebra results can be found in standard algebra texts such as Hungerford <ref> [81] </ref> or van der Waerden [146]. 5.2. Computing Optimal Power-p Steiner Trees 73 We conjecture that, in this sense, the EpST problem cannot be solved exactly if p 5.
Reference: [82] <author> F. K. Hwang. </author> <title> On Steiner minimal trees with rectilinear distance. </title> <journal> SIAM Journal on Applied Mathematics, </journal> <volume> 30 </volume> <pages> 104-114, </pages> <year> 1976. </year>
Reference-contexts: For geometric Steiner tree problems, is often smaller than 2. For the EST problem, = 2= 3 (this fact was conjectured by Gilbert and Pollak in 1966 [65] and finally 2.2. Steiner Trees 13 proven in 1992 by Du and Hwang [45]). For the RST tree problem, Hwang <ref> [82] </ref> proved that = 3=2. 2.2.2 Rectilinear Steiner trees Most of the results in this dissertation concern the RST problem. The RST problem naturally arises in VLSI routing applications because typically VLSI fabrication technology requires all wires to be either horizontal or vertical. <p> A Steiner tree of a full set is called a full tree. An important result concerning full sets in the rectilinear metric is Hwang's theorem. Theorem 2.2 (Hwang <ref> [82] </ref>) An optimal full tree can have only one of the following two topologies.
Reference: [83] <author> F. K. Hwang and D. Z. Du. </author> <title> Steiner minimal trees on the Chinese checkerboard. </title> <journal> Mathematics Magazine, </journal> <volume> 64 </volume> <pages> 332-339, </pages> <year> 1991. </year>
Reference-contexts: Researchers have previously investigated Euclidean Steiner trees of terminal sets from small grids [26, 27, 28] and triangular and hexagonal grids <ref> [83] </ref>, but this is the first known study of the rectilinear problem. Note that the Euclidean problem is very different from the rectilinear one. For the Euclidean case, most previous work [26, 27] focuses on simple, mechanical constructions that are conjectured but not proven to be optimal.
Reference: [84] <author> F. K. Hwang, D. S. Richards, and P. Winter. </author> <title> The Steiner Tree Problem, </title> <booktitle> volume 53 of Annals of Discrete Mathematics. </booktitle> <publisher> North-Holland, </publisher> <address> Amsterdam, Netherlands, </address> <year> 1992. </year>
Reference-contexts: Finally, a well-known decomposition theorem on Steiner trees is the following. Theorem 2.3 Every Steiner tree is composed of a number of full trees that intersect at terminals of degree 2 or greater. (See Hwang, Richards, and Winter <ref> [84] </ref>.) 2.3 Overview The remainder of this dissertation is organized in four chapters, each of which examines a different geometric problem related to VLSI design automation. 2 As an aside, we know of no other class of graph or distance metric in which an optimal full tree is computable in polynomial <p> The reader is referred to Hwang, Richards, and Winter <ref> [84] </ref> for further discussion of algorithms for the GST problem. A number of other algorithms have been devised that solve the RST problem in a geometric fashion, without explicit use of the Hanan grid graph. <p> The Steiner points introduced by the Steiner-ization are candidates for further Steinerization in later iterations. For N = 3, greedy Steinerization is an oft-repeated idea whose genesis is unclear. For the standard RST problem, Richards (see Hwang, Richards, and Winter <ref> [84] </ref>) first investigated 3-Steinerization in this greedy form, and more complex variants appear in Chao and Hsu [20], Lee, Bose, and Hwang [106] and Smith, Lee, and Liebman [138]; these and others are summarized in Hwang, Richards, and Winter [84]. <p> For the standard RST problem, Richards (see Hwang, Richards, and Winter <ref> [84] </ref>) first investigated 3-Steinerization in this greedy form, and more complex variants appear in Chao and Hsu [20], Lee, Bose, and Hwang [106] and Smith, Lee, and Liebman [138]; these and others are summarized in Hwang, Richards, and Winter [84]. For the OARST problem, greedy 3-Steinerization (henceforth called G3S ) has time complexity O (n 2 m), since O (nm) time is required to find each locally optimal 3-Steinerization and at most O (n) of these operations are performed. <p> For the standard RST problem, the average improvement of optimal RSTs over the MST is roughly 12% (see Hwang, Richards, and Winter <ref> [84] </ref>). For the instances of the OARST problem tested here, this value is somewhat lower. An optimal Steiner tree in the escape graph can be computed using the algorithm of Dreyfus and Wagner [43], which has time complexity O (m3 n ). <p> The topology of every Steiner tree is a (possibly degenerate) full topology, i.e. a topology in which every terminal is a leaf (see Hwang, Richards, and Winter <ref> [84] </ref>). Thus, an optimal E2ST is computed by applying the construction from Theorem 5.1 to every full topology and taking the shortest resulting tree as the optimum.
Reference: [85] <author> R. Z. Hwang, R. C. Chang, and R. C. T. Lee. </author> <title> The searching over separators strategy to solve some NP-hard problems in subexponential time. </title> <journal> Algorithmica, </journal> <volume> 9 </volume> <pages> 398-423, </pages> <year> 1993. </year> <month> Bibliography151 </month>
Reference-contexts: In fact, Smith states that one would want to use a different algorithm for instances with less than 300 terminals [139]. Hwang, Chang, and Lee <ref> [85] </ref> use essentially the same techniques as Smith to solve a number of other problems; readers interested in the technique itself are referred there as well as to Smith [139]. 3.8 Empirical Results We have implemented the FDP and SFDP algorithms in order to compare them empirically with Hakimi's algorithm [70],
Reference: [86] <author> T. Ichimori. </author> <title> A shortest path approach to a multifacility minimax location problem with rectilinear distances. </title> <journal> Journal of the Operations Research Society of Japan, </journal> <volume> 28 </volume> <pages> 269-284, </pages> <year> 1985. </year>
Reference-contexts: They state that their linear programming formulation leads to an O (n 3 log n) algorithm that computes an optimal RBST with a given topology. Ichimori <ref> [86] </ref> describes a parametric search algorithm that computes an optimal RBST for a given topology. However, the algorithm relies on an involved shortest-paths formulation of the problem and has time complexity O (n 4 ).
Reference: [87] <author> J. P. Ignizio and T. M. Cavalier. </author> <title> Linear Programming. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1994. </year>
Reference-contexts: It is difficult 5.2. Computing Optimal Power-p Steiner Trees 75 to determine the time required to solve a given linear program, but applying Khachian's ellipsoid algorithm [95] results in an O (n 6 ) algorithm (see Ignizio and Cavalier <ref> [87] </ref>). Dearing and Francis [38] describe a more involved linear programming formulation that involves solving two linear programs, each of which contains n 1 variables and 3n 2 5n constraints.
Reference: [88] <author> J. JaJa and S. A. Wu. </author> <title> On routing two-terminal nets in the presence of obstacles. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 8 </volume> <pages> 563-570, </pages> <year> 1989. </year>
Reference-contexts: Clearly these techniques are heuristic in nature, but 4.3. Multi-Terminal Interconnections 44 the more elegant solution|simultaneously routing all the nets|is NP-complete even in a planar graph if all nets contain only two terminals [126, 128]. Jaja and Wu <ref> [88] </ref> describe a technique for doing just that: simultaneously routing a number r of two-terminal nets. Their approach is to modify the basic escape graph by replacing each escape segment with O (r) parallel segments at distance from each other. <p> Let R denote the set of nets; each net R i in R consists of a pair of terminals. Thus, a problem instance is denoted (R; S), where S is the set of obstacle perimeter segments. Theorem 4.1 (Jaja and Wu <ref> [88] </ref>) A r-net routing instance (R; S) has a solution if and only if there are r vertex-disjoint paths in G r e (R; S). They use algorithms by Robertson and Seymour [130] to find these vertex-disjoint paths in polynomial time for any fixed r. <p> It seems likely that the results of Jaja and Wu <ref> [88] </ref> (see Theorem 4.1) can be generalized to Steiner tree routing. However, the multiple Steiner tree problem is much more difficult than the disjoint-paths problem, and to our knowledge it has been minimally studied.
Reference: [89] <author> D. S. Johnson, A. Demers, J. D. Ullman, M. R. Garey, and R. L. Graham. </author> <title> Worst-cast performance bounds for simple one-dimensional bin packing algorithms. </title> <journal> SIAM Journal on Computing, </journal> <volume> 3 </volume> <pages> 299-325, </pages> <year> 1974. </year>
Reference-contexts: While this time complexity is polynomial for every fixed k, even for k = 2 the resulting time complexity is O (r 5 ), which is too inefficient to be used in practice. Instead, we use the following heuristic, similar to the first-fit decreasing algorithm for bin packing <ref> [89] </ref>: 1. Sort the nets in ascending order according to the number of different optimal thumb nails for each net. Let R i denote the i th net in this sorted ordering, for 1 i r. 2.
Reference: [90] <author> A. B. Kahng and G. Robins. </author> <title> A new class of iterative Steiner tree heuristics with good performance. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 11 </volume> <pages> 893-902, </pages> <year> 1992. </year>
Reference-contexts: Thus, we add a postprocessing step to the algorithm that reroutes such nets. Suppose the maximum congestion is C. The postprocessing algorithm finds a net that contains every edge with congestion C, and reroutes it using the iterated 1-Steiner heuristic of Kahng and Robins <ref> [90] </ref>. The graph is modified so that the new route does not use any edge with congestion C or C 1. The maximum congestion is recomputed, and the process is repeated until there does not exist a net that contains every maximum-congestion edge.
Reference: [91] <author> A. B. Kahng and G. Robins. </author> <title> On Optimal Interconnections for VLSI. </title> <publisher> Kluwer Academic Publishers, Norwell, </publisher> <address> Massachusetts, </address> <year> 1995. </year>
Reference-contexts: Advances in VLSI technology, particularly decreasing feature size, change the character of the physical design process, in the sense that the relationship between electrical delay and interconnect length becomes more tenuous <ref> [91] </ref>. As a result, new measures of interconnect quality have been devised that more accurately reflect their electrical delay in such technologies. One such measure is accomplished by minimizing a nonlinear function of the lengths of the wires in the interconnect. <p> A fool sees not the same tree that a wise man sees. | William Blake, The Marriage of Heaven and Hell 5 The Power-p Steiner Tree Problem Many VLSI routing applications, such as routing to minimize estimates of electrical delay <ref> [14, 34, 77, 91] </ref>, involve the computation of geometric Steiner trees in which the weight of an edge is a nonlinear function of its length. Consideration of this type of application inspired us to introduce the power-p Steiner tree problem.
Reference: [92] <author> K. Kanchanasut. </author> <title> A shortest-path algorithm for Manhattan graphs. </title> <journal> Information Processing Letters, </journal> <volume> 49 </volume> <pages> 21-25, </pages> <year> 1994. </year>
Reference-contexts: Two-Terminal Interconnections 41 (a) (b) planar and thus contains O (m) edges. The escape graph is generated in O (c 2 ) time using a plane-sweep algorithm [31]. It has been proven [31] that the escape graph contains a shortest path between every pair of terminals. Kanchanasut <ref> [92] </ref> describes an algorithm that computes a set of single-source shortest paths in a rectilinear graph in linear time, which can be applied to the escape graph to solve the OASP problem in O (m) time. 4.2. <p> The reader is referred to Widmayer [148] for details. Widmayer also describes how to use the spp graph to compute a shortest path between two terminals in O (s log s log log s) time. However, we can apply Kanchanasut's algorithm <ref> [92] </ref> to the spp graph to compute a set of single-source shortest paths in O (s log s) total time, which is optimal [37]. <p> Multi-Terminal Interconnections 49 available. All-pairs shortest paths can be computed in O (m 2 ) time by applying the O (m) single-source shortest paths algorithm of Kanchanasut <ref> [92] </ref> to each vertex in the escape graph. A similar observation can be made for four-terminal nets. For four terminals, the following topologies are possible: A simple path through the four terminals. A star in which three terminals are directly connected to the fourth.
Reference: [93] <author> R. M. Karp. </author> <title> On the computational complexity of combinatorial problems. </title> <journal> Networks, </journal> <volume> 5 </volume> <pages> 45-68, </pages> <year> 1975. </year>
Reference-contexts: If T = V , then the GST problem is equivalent to the MST problem, and (a) (b) (c) weight 3. if jT j = 2, then it is the shortest path problem. Both, of course, are easily solvable in polynomial time. However, the general GST problem is NP-complete <ref> [93] </ref>, indicating that a polynomial-time algorithm to solve exactly it is unlikely to exist. Furthermore, it remains NP-complete even if G is planar or if all edge weights are equal. A variation on the basic Steiner tree problem is the geometric Steiner tree problem.
Reference: [94] <author> M. Kaufmann, S. Gao, and K. Thulasiraman. </author> <title> On Steiner minimal trees in grid graphs and its application to VLSI layout. </title> <booktitle> In Proceedings of the International Symposium on Algorithms and Computation, volume 834 of Lecture Notes in Computer Science, </booktitle> <pages> pages 351-359. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <year> 1994. </year>
Reference-contexts: The resulting algorithm has time complexity O (n 3 m 2 + n 2 m 2 log m + m 2 ). Recently, Kaufmann, Gao, and Thulasiraman <ref> [94] </ref> have modified this dynamic programming approach, using geometric properties of grid graphs to speed up the algorithm. Their algorithm finds an optimal OARST in a 1-outerplanar grid graph in O (n 2 minfn 2 log n; mg) 4.5. Conclusions and Future Work 61 time. <p> Conclusions and Future Work 63 efficiently than by simply applying the Dreyfus-Wagner algorithm for the graph Steiner tree problem to the escape graph. For example, Hwang's theorem does not apply in a 1-outerplanar grid graph with a non-convex boundary. However, Kaufman, Gao, and Thu-lasiraman <ref> [94] </ref> use the geometric structure of the grid graph to implement tie-breaking rules that eliminate from consideration many Steiner trees of equal length. The resulting algorithm is faster than the 1-outerplanar version of the Dreyfus-Wagner algorithm.
Reference: [95] <author> L. G. </author> <title> Khachian. A polynomial algorithm in linear programming. </title> <journal> Soviet Mathematics Doklady, </journal> <volume> 20 </volume> <pages> 191-194, </pages> <year> 1979. </year> <month> Bibliography152 </month>
Reference-contexts: It is difficult 5.2. Computing Optimal Power-p Steiner Trees 75 to determine the time required to solve a given linear program, but applying Khachian's ellipsoid algorithm <ref> [95] </ref> results in an O (n 6 ) algorithm (see Ignizio and Cavalier [87]). Dearing and Francis [38] describe a more involved linear programming formulation that involves solving two linear programs, each of which contains n 1 variables and 3n 2 5n constraints.
Reference: [96] <author> S. Kirkpatrick, C. D. Gelatt Jr., and M. P. Vecchi. </author> <title> Optimization by simulated annealing. </title> <journal> Science, </journal> <volume> 220 </volume> <pages> 671-679, </pages> <year> 1983. </year>
Reference-contexts: For performance-driven placement, the partitioning algorithm also minimizes source-sink path lengths (see Section 6.5). In our implementation, the algorithm begins with an arbitrary partition and then improves the partition using simulated annealing. Simulated annealing <ref> [96] </ref> is a general local search strategy that produces high-quality solutions to a wide range of combinatorial optimization problems. The key concept in local search algorithms is the neighborhood of a solution.
Reference: [97] <author> J. M. Kleinhans, G. Sigl, F. M. Johannes, and K. J. Antreich. GORDIAN: </author> <title> VLSI placement by quadratic programming and slicing optimization. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 10 </volume> <pages> 356-365, </pages> <year> 1991. </year>
Reference-contexts: Partitioning-based placement involves recursive partitioning strategies, such as that used by our system. The other camp is local search strategies such as simulated annealing. Until recently, local search techniques were considered inherently superior to partitioning-based methods, but recently 6.2. Previous Work 98 some sophisticated partitioning-based algorithms such as GORDIAN <ref> [97] </ref> have provided strong competition for local search strategies. The origins of partitioning-based placement are represented by the min-cut bisection algorithms of Gunther [68], Breuer [15, 16], and Lauther [102]. In these algorithms, a vertical line is conceptually drawn down the approximate center of the circuit area.
Reference: [98] <author> J. Komlos and M. T. Shing. </author> <title> Probabilistic partitioning algorithms for the rectilinear Steiner problem. </title> <journal> Networks, </journal> <volume> 15 </volume> <pages> 413-423, </pages> <year> 1985. </year>
Reference-contexts: The FDP algorithm is very simple and easily implemented and runs in O (n3 n ) time. This improves, 3.3. Full-set Dynamic Programming 22 both theoretically and practically, on the Dreyfus-Wagner algorithm, which is often used in practice to compute optimal RSTs <ref> [41, 42, 98, 145] </ref>. Theorem 2.3 implies that an optimal RST for every set of terminals is either a full tree satisfying Hwang's theorem (Theorem 2.2 on page 14), or else it can be divided into two optimal subtrees joined at a terminal. This observation leads to the FDP algorithm. <p> The FDP algorithm is very simple and easily implemented. It is particularly well-suited to applications in which the Dreyfus-Wagner algorithm was previously used, such as in the basis of recursive decomposition algorithms like those of Komlos and 3.9. Conclusions and Future Work 35 Shing <ref> [98] </ref> and Deneen, Shute, and Thomborson [42]. It is at least as easily implemented as the Dreyfus-Wagner algorithm and is faster and uses less space. <p> Other Issues 129 to the length of an optimal tree t fl is O (1). This result is similar to that of Komlos and Shing <ref> [98] </ref> for a different recursive partitioning algorithm. Theorem 6.2 Let t be a Steiner tree produced by thumbnail partitioning for any set of terminals, and let t fl be an optimal Steiner tree for the same set of terminals.
Reference: [99] <author> M. R. Kramer and J. van Leeuwen. </author> <title> Wire-routing is NP-complete. </title> <type> Technical Report RUU-CS-82-4, </type> <institution> Department of Computer Science, University of Utrecht, </institution> <address> Utrecht, Netherlands, </address> <year> 1982. </year>
Reference-contexts: Even if all nets have only two terminals, the congestion balancing problem with k as a parameter can be reduced from finding edge-disjoint paths of minimum total length in a grid graph, which has been proven NP-complete <ref> [99, 111, 126, 128] </ref>. For each fixed k, the congestion balancing problem can be solved exactly in polynomial time. For r nets, the vector s has at most r s (k) different possible values.
Reference: [100] <author> G. Kreweras. Complexite et circuits Euleriens dan les sommes tensorielles de graphes. </author> <title> Journal of Combinatorial Theory, </title> <journal> Series B, </journal> <volume> 24 </volume> <pages> 202-212, </pages> <year> 1978. </year>
Reference-contexts: Since every edge in G kfik has length 1, every spanning tree is an MST; thus we are interested in the spanning tree number of G kfik , denoted t (G kfik ). Kreweras <ref> [100] </ref> proves that the spanning tree number of G kfik is t (G kfik ) = Y 1y&lt;k 4 sin 2 x + 4 sin 2 y The value of this quantity for a few small values of k is shown in Table 6.5.
Reference: [101] <author> J. B. Kruskal. </author> <title> On the shortest spanning tree of a graph and the traveling salesman problem. </title> <journal> Proceedings of the American Mathematical Society, </journal> <volume> 7 </volume> <pages> 48-50, </pages> <year> 1956. </year>
Reference-contexts: The MST problem in an undirected, weighted graph G is defined as follows: find a minimum-weight subtree of G that spans all the vertices. MSTs are efficiently computed by algorithms such as those of Kruskal <ref> [101] </ref> and Prim [124]. An MST of a selected set of vertices in a graph G is modeled by a complete graph on these vertices, in which each edge corresponds to a shortest path between its endpoints in G. <p> In fact, an MST is an MpST for every p 0. Theorem 5.4 An M1ST is an MpST for every p 0. Proof : Consider the operation of Kruskal's MST algorithm <ref> [101] </ref>. First, the edges are sorted according to length. Now, raise the length of each edge to the p power. Since p 0, doing so does not change the sorted ordering of the edges.
Reference: [102] <author> U. Lauther. </author> <title> A min-cut placement algorithm for general cell assemblies based on a graph representation. </title> <journal> Journal of Digital Systems, </journal> <volume> 4 </volume> <pages> 21-34, </pages> <year> 1979. </year>
Reference-contexts: Previous Work 98 some sophisticated partitioning-based algorithms such as GORDIAN [97] have provided strong competition for local search strategies. The origins of partitioning-based placement are represented by the min-cut bisection algorithms of Gunther [68], Breuer [15, 16], and Lauther <ref> [102] </ref>. In these algorithms, a vertical line is conceptually drawn down the approximate center of the circuit area. The logic blocks are then partitioned into two groups of roughly equal size, which will be placed on opposite sides of the line.
Reference: [103] <author> C. Y. Lee. </author> <title> An algorithm for path connections and its applications. </title> <journal> IRE Transactions on Electronic Computers, </journal> <volume> 10 </volume> <pages> 346-365, </pages> <year> 1961. </year>
Reference-contexts: Grid-based routing techniques find their genesis in the maze routing algorithms of Lee <ref> [103] </ref> and Moore [120]. In a grid-based algorithm, the routing surface is typically divided into a grid in which each square is the size of the smallest feature that can be fabricated in the given technology (this distance is denoted ).
Reference: [104] <author> D. T. Lee, C. D. Yang, and C. K. Wong. </author> <title> Rectilinear paths among rectilinear obstacles. </title> <type> Technical Report 92-AC-123, </type> <institution> Department of Electrical Engineering and Computer Science, Northwestern University, Evanston, Illinois, </institution> <month> September </month> <year> 1992. </year>
Reference-contexts: We refer to this special case of the OARST problem as the obstacle-avoiding shortest path (OASP) problem. The literature on the OASP and similar problems is quite vast; since other surveys have been written <ref> [74, 104, 141] </ref> and since our focus is on Steiner-tree routing of multi-terminal nets, we only overview some of the principal results for the two-terminal case. 4.2.1 Grid-based algorithms The earliest techniques for solving the OASP problem are so-called grid-based algorithms.
Reference: [105] <author> D. T. Lee, C. D. Yang, and C. K. Wong. </author> <title> On bends and distances of paths among obstacles in 2-layer interconnection model. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 43 </volume> <pages> 711-724, </pages> <year> 1994. </year> <month> Bibliography153 </month>
Reference-contexts: However, we can apply Kanchanasut's algorithm [92] to the spp graph to compute a set of single-source shortest paths in O (s log s) total time, which is optimal [37]. Recent work by Lee, Yang, and Wong <ref> [105] </ref> gives an optimal-time plane-sweep algorithm that also solves the OASP problem directly in O (s log s) time. 4.2.3 Multiple-net routing The problem of routing multiple nets has received substantially less attention than the single-net problem.
Reference: [106] <author> J. H. Lee, N. K. Bose, and F. K. Hwang. </author> <title> Use of Steiner's problem in suboptimal routing in rectilinear metric. </title> <journal> IEEE Transactions on Circuits and Systems, </journal> <pages> pages 470-476, </pages> <year> 1976. </year>
Reference-contexts: For N = 3, greedy Steinerization is an oft-repeated idea whose genesis is unclear. For the standard RST problem, Richards (see Hwang, Richards, and Winter [84]) first investigated 3-Steinerization in this greedy form, and more complex variants appear in Chao and Hsu [20], Lee, Bose, and Hwang <ref> [106] </ref> and Smith, Lee, and Liebman [138]; these and others are summarized in Hwang, Richards, and Winter [84].
Reference: [107] <author> G. G. Lemieux and S. D. Brown. </author> <title> A detailed routing algorithm for allocating wire segments in field-programmable gate arrays. </title> <booktitle> In Proceedings of the Fourth Physical Design Workshop, </booktitle> <pages> pages 215-226, </pages> <year> 1993. </year>
Reference-contexts: The 3000-series benchmarks are those used by Brown, Rose, and Vranesic to test their FPGA router, which is called CGE [18]. The 4000-series benchmarks are those used by Lemieux and Brown to test their SEGA router <ref> [107] </ref> and by Wu and Marek-Sadowska to test their GPB router [156]. We use the same suggested parameters used by these previous works. For the 3000-series benchmarks, F c = d0:6W e and F s = 6. For the 4000-series benchmarks, F c = W and F s = 3. <p> Experimental Results 123 Table 6.1 summarizes the name, size, and number of nets for each of these benchmarks. The table also gives the channel widths computed by CGE [18] for the 3000-series bench marks and the channel widths computed by SEGA <ref> [107] </ref> and GPB [156] for the 4000-series benchmarks.
Reference: [108] <author> T. Lengauer. </author> <title> Combinatorial Algorithms for Integrated Circuit Layout. </title> <publisher> John Wiley and Sons, </publisher> <address> Chichester, England, </address> <year> 1990. </year>
Reference-contexts: However, Theorem 4.1 might instead be used in a heuristic fashion for routing multiple nets; to our knowledge, this has not yet been tried. 4.3 Multi-Terminal Interconnections The general OARST problem has received substantially less attention than the special case in which there are only two terminals. Several authors <ref> [108, 155] </ref> have pointed out that if one can solve the OASP problem, then one can construct a minimum spanning tree (MST) of a multi-terminal instance. <p> The MST has length not exceeding twice the length of an optimal OARST; thus, an obstacle-avoiding MST algorithm is a 2-approximation algorithm for the OARST problem <ref> [108] </ref>. For the standard RST problem, Hanan's theorem (Theorem 2.1 on page 14) states that an optimal RST always exists that is a subgraph of the grid graph formed by passing a 4.3. Multi-Terminal Interconnections 45 horizontal and vertical line through each terminal. <p> We attribute this phenomenon to the reduction technique described above. Note that the worst-case ratio of the length of an MST to the length of an optimal Steiner tree (called the Steiner ratio; see also Section 2.2.1) is 2 for the OARST problem <ref> [108] </ref>. All three of these heuristics always produce trees at least as short as the MST, and thus produce 4.3. Multi-Terminal Interconnections 57 trees that are no more than twice the length of an optimal tree. In practice, of course, their performance is rarely that bad.
Reference: [109] <author> F. D. Lewis, W. C. Pong, and N. Van Cleave. </author> <title> Optimum Steiner tree generation. </title> <booktitle> In Proceedings of the Second Great Lakes Symposium on VLSI, </booktitle> <pages> pages 207-212, </pages> <year> 1992. </year>
Reference-contexts: The time complexity of the algorithm is a summation for which no closed form is given, but it grows slightly faster than O (4 n ). Their algorithm solves roughly 15-terminal instances [153]. Lewis, Pong, and Van Cleave <ref> [109] </ref> use some geometric properties of optimal RSTs to devise an algorithm with time complexity O (4 n log n =n 4 ), which solves 10-terminal instances in a day. Sidorenko [137] describes an exact RST algorithm. <p> Our results in Section 3.5 improve this bound slightly to O (2 n1:62 n ). Authors Time n day Dreyfus and Wagner [43] O (n 2 3 n ) 16 Hakimi [70] O (n2 n 2 n log n) 8 Lewis et al. <ref> [109] </ref> O (4 n log n =n 4 ) 10 Salowe and Warme [131] O (2 n1:62 n ) 35 Sidorenko [137] O (n!) 11 Smith [139] n O ( p Thomborson et al. [145] O (n 2 3 n ) 20 Wong and Pecht [154] O (a n ); a
Reference: [110] <author> D. Lichtenstein. </author> <title> Planar formulae and their uses. </title> <journal> SIAM Journal on Computing, </journal> <volume> 11 </volume> <pages> 329-343, </pages> <year> 1982. </year>
Reference-contexts: Hooker [78] states that these problems are NP-complete. Additionally, it is easily shown (for example, by a transformation from geometric connected dominating set <ref> [110] </ref>) that both the power-p and 5.4. Conclusions and Future Work 93 bottleneck Steiner tree problems are NP-complete if one imposes an upper bound (of less than n 2) on the number of Steiner points allowed.
Reference: [111] <author> W. W.-L. Lin. </author> <title> Wire length minimization in a simple single-layer circuit. </title> <type> Bachelor's thesis, </type> <institution> Department of Electrical Engineering, Massachusetts Institute of Technology, Cambridge, Massachusetts, </institution> <year> 1983. </year>
Reference-contexts: Even if all nets have only two terminals, the congestion balancing problem with k as a parameter can be reduced from finding edge-disjoint paths of minimum total length in a grid graph, which has been proven NP-complete <ref> [99, 111, 126, 128] </ref>. For each fixed k, the congestion balancing problem can be solved exactly in polynomial time. For r nets, the vector s has at most r s (k) different possible values.
Reference: [112] <author> W. Lipski Jr. </author> <title> An O(n log n) Manhattan path algorithm. </title> <journal> Information Processing Letters, </journal> <volume> 19 </volume> <pages> 99-102, </pages> <year> 1984. </year>
Reference-contexts: Depending on the values of n and s, this may or may not improve on the O (m) time required by the technique of applying Kanchanasut's algorithm to the escape graph. Several researchers <ref> [6, 31, 112] </ref> have devised techniques to find a shortest path between two vertices in a rectilinear graph such as the escape graph in O (c log c) time. (Note that this can be sublinear in the size of the escape graph!) These techniques would seem to improve upon both the
Reference: [113] <author> R. F. Love, G. O. Wesolowsky, and S. A. Kraemer. </author> <title> A multifacility minimax location method for Euclidean distances. </title> <journal> International Journal of Production Research, </journal> <volume> 11 </volume> <pages> 37-45, </pages> <year> 1973. </year>
Reference-contexts: The bottleneck Steiner tree problem is the limiting case of the power-p problem as p approaches infinity. Again, bottleneck Steiner trees find application in VLSI routing [23, 76] as well as in facility location <ref> [38, 50, 113] </ref>. Our first set of results concerns computation of optimal power-p Steiner trees. We give an algorithm for computing optimal Euclidean power-2 Steiner trees and describe the difficulties in applying it to the rectilinear case. <p> Since there are at most f (n) edges in some path through a and b in an optimal BST, the length of the longest edge must be at least 1=f (n). 2 5.3.3 Better approximate bottleneck Steiner trees Elzinga, Hearn, and Randolph [50] and Love, Wesolowsky, and Kraemer <ref> [113] </ref> describe algorithms based on nonlinear optimization that compute an *-approximation to a Euclidean bottleneck Steiner tree for a given topology.
Reference: [114] <author> S. Mayrhofer and U. Lauther. </author> <title> Congestion-driven placement using a new multi-partitioning heuristic. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pages 332-335, </pages> <year> 1990. </year> <month> Bibliography154 </month>
Reference-contexts: A quadrisection algorithm is similar to a min-cut bisection algorithm except that the vertical and horizontal cuts are performed simultaneously. Suaris and Kedem later revised this technique to simultaneously perform placement and global routing [144]. Mayrhofer and Lauther <ref> [114] </ref> extended the quadrisection technique to larger grids, and based their partitioning strategies on (heuristic) rectilinear Steiner trees in these grids. However, their algorithm also performs only placement; global and detailed routing are accomplished afterward.
Reference: [115] <author> N. Megiddo. </author> <title> Combinatorial optimization with rational objective functions. </title> <journal> Mathematics of Operations Research, </journal> <volume> 4 </volume> <pages> 414-424, </pages> <year> 1979. </year>
Reference-contexts: We now incorporate this algorithm for computing an RBST with a given bottleneck weight into the parametric search framework devised by Megiddo <ref> [115] </ref>. The resulting algorithm computes the bottleneck weight ffi fl of an optimal RBST in O (n 2 ) time, from which the actual RBST is easily computed by the above algorithm. Imagine running the modified Sarrafzadeh-Wong algorithm for the (unknown) bottleneck value ffi fl . <p> It thus does not meet the technical conditions necessary to apply the parametric search technique <ref> [115] </ref>, so it is unclear how to choose each new value ffi 0 to be examined in the parametric search. 5.2.5 Minimum-length rectilinear bottleneck Steiner trees For many applications, it is desirable to compute a Steiner tree that not only has low bottleneck weight but also low total length.
Reference: [116] <author> K. Mikami and K. Tabuchi. </author> <title> A computer program for optimal routing of printed circuit connectors. </title> <booktitle> IFIPS Proceedings, </booktitle> <address> H47:1475-1478, </address> <year> 1968. </year>
Reference-contexts: Research into line-based algorithms 4.2. Two-Terminal Interconnections 40 for rectilinear interconnection in the presence of obstacles began with the independent works of Hightower [73] and Mikami and Tabuchi <ref> [116] </ref>. Their algorithms were innovative in that they were the first line-based routing algorithms, but they suffer several disadvantages. Primary among them is that they do not necessarily find a shortest path between the two terminals, and furthermore they sometimes does not find any solution although one exists.
Reference: [117] <author> J. Milner. Mondrian. </author> <title> Abbeville, </title> <address> New York, New York, </address> <year> 1992. </year>
Reference-contexts: We call our algorithm Mondrian because of the uncanny resemblance between circuit layouts and the works of the artist Piet Mondrian <ref> [19, 117] </ref>. A crucial aspect of thumbnail partitioning is the computation of optimal thumbnails. In our implementation, k = 3, and thus all optimal thumbnails for every possible terminal set are precomputed and stored, and simply looked up during the execution of the algorithm.
Reference: [118] <author> S. Mirayala, J. Hashmi, and N. Sherwani. </author> <title> Switchbox Steiner tree problem in presence of obstacles. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pages 536-539, </pages> <year> 1991. </year>
Reference-contexts: Cheng, Lim, and Wu [22] describe an algorithm that computes an optimal RST of such an instance in O (n 3 ) time regardless of k (note that this is an improvement if k = ( p Mirayala, Hashmi, and Sherwani <ref> [118] </ref> present a linear-time algorithm that computes an optimal OARST when the terminals lie on the perimeter of a rectangle and there is one rectangular obstacle. They also present an approximation algorithm for the more general case where there is any number of rectangular obstacles.
Reference: [119] <author> J. S. B. Mitchell. </author> <title> L 1 shortest paths among polygonal obstacles in the plane. </title> <journal> Algorithmica, </journal> <volume> 8 </volume> <pages> 55-88, </pages> <year> 1992. </year>
Reference-contexts: Mitchell <ref> [119] </ref> describes a more direct plane-sweep algorithm that does not explicitly use any graph structures. The algorithm requires O (e log s) time, where e is the number of "events" encountered during the plane-sweep algorithm.
Reference: [120] <author> E. F. Moore. </author> <title> Shortest path through a maze. </title> <journal> Annals of the Computational Laboratory of Harvard University, </journal> <volume> 30 </volume> <pages> 285-292, </pages> <year> 1959. </year>
Reference-contexts: Grid-based routing techniques find their genesis in the maze routing algorithms of Lee [103] and Moore <ref> [120] </ref>. In a grid-based algorithm, the routing surface is typically divided into a grid in which each square is the size of the smallest feature that can be fabricated in the given technology (this distance is denoted ). This grid divides the routing area into a number of grid cells.
Reference: [121] <author> H. Okamura and P. D. Seymour. </author> <title> Multicommodity flows in planar graphs. </title> <journal> Journal of Combinatorial Theory, Series B, </journal> <volume> 31 </volume> <pages> 75-81, </pages> <year> 1981. </year>
Reference-contexts: However, their algorithm relies on the planar multicommodity flow theorem of Okamura and Seymour <ref> [121] </ref>, which does not apply if nets can contain more than 2 vertices. We now show that the MCRC problem is NP-complete if nets can contain more than 2 vertices. 6.4.
Reference: [122] <author> B. T. Preas. </author> <title> Benchmarks for cell-based layout systems. </title> <booktitle> In Proceedings of the Twenty-fourth Design Automation Conference, </booktitle> <pages> pages 319-320, </pages> <year> 1987. </year>
Reference-contexts: A well-known folk theorem of VLSI routing is that most nets contain four or fewer terminals. In an effort to verify this claim, we examine the SIGDA standard-cell benchmark suite <ref> [122] </ref>. Figure 4.4 illustrates the distribution of terminals per net in the SIGDA benchmarks. As can be seen in the figure, in these benchmarks three- and four-terminal nets comprise the vast majority of the nets with more than two terminals.
Reference: [123] <author> B. T. Preas and M. J. Lorenzetti, </author> <title> editors. Physical Design Automation of VLSI Systems. </title> <publisher> Benjamin/Cumming Publishing Company, </publisher> <address> Menlo Park, California, </address> <year> 1988. </year>
Reference-contexts: Introduction VLSI physical design automation is the process of translating an electrical description of a circuit into a physical layout on the surface of an integrated circuit <ref> [123, 135] </ref>. From the physical design automation domain arises a number of difficult algorithmic and combinatorial problems. The ability to compute good solutions to these problems is crucial to the production of high-performance integrated circuits at a reasonable cost. <p> However, such algorithms are designed to find a feasible routing of a large number of nets, rather than a good routing of a single net. A detailed discussion of these techniques is beyond the scope of this chapter; interested readers are referred to Preas and Lorenzetti <ref> [123] </ref>. Also, as mentioned previously, any of the two-terminal interconnection techniques described in Section 4.2 can be used to compute heuristic OARSTs. Chen [21] describes a somewhat different technique.
Reference: [124] <author> R. C. Prim. </author> <title> Shortest connection networks and some generalizations. </title> <journal> Bell System Technical Journal, </journal> <volume> 36 </volume> <pages> 1389-1401, </pages> <year> 1957. </year>
Reference-contexts: The MST problem in an undirected, weighted graph G is defined as follows: find a minimum-weight subtree of G that spans all the vertices. MSTs are efficiently computed by algorithms such as those of Kruskal [101] and Prim <ref> [124] </ref>. An MST of a selected set of vertices in a graph G is modeled by a complete graph on these vertices, in which each edge corresponds to a shortest path between its endpoints in G.
Reference: [125] <author> J. S. Provan. </author> <title> A polynomial algorithm for the Steiner tree problem on terminal-planar graphs. </title> <type> Technical Report 83/10, </type> <institution> Department of Operations Research, University of North Carolina, Chapel Hill, North Carolina, </institution> <year> 1983. </year> <month> Bibliography155 </month>
Reference-contexts: A planar graph in which all terminals lie on the boundary of the infinite face is called 1-outerplanar. Figure 4.6 shows an instance with the terminals on the perimeter of the routing region and its escape graph. Erickson, Monma, and Veinott [51] (and independently Provan <ref> [125] </ref>) show that the graph the routing region. Steiner tree problem is solvable in polynomial time for a 1-outerplanar graph. One way to achieve polynomial-time solution is with a modification of the Dreyfus-Wagner dynamic programming algorithm [43].
Reference: [126] <author> R. Raghavan, J. P. Cohoon, and S. Sahni. </author> <title> Single bend wiring. </title> <journal> Journal of Algorithms, </journal> <volume> 7 </volume> <pages> 232-257, </pages> <year> 1986. </year>
Reference-contexts: Clearly these techniques are heuristic in nature, but 4.3. Multi-Terminal Interconnections 44 the more elegant solution|simultaneously routing all the nets|is NP-complete even in a planar graph if all nets contain only two terminals <ref> [126, 128] </ref>. Jaja and Wu [88] describe a technique for doing just that: simultaneously routing a number r of two-terminal nets. Their approach is to modify the basic escape graph by replacing each escape segment with O (r) parallel segments at distance from each other. <p> Even if all nets have only two terminals, the congestion balancing problem with k as a parameter can be reduced from finding edge-disjoint paths of minimum total length in a grid graph, which has been proven NP-complete <ref> [99, 111, 126, 128] </ref>. For each fixed k, the congestion balancing problem can be solved exactly in polynomial time. For r nets, the vector s has at most r s (k) different possible values.
Reference: [127] <author> S. K. Rao, P. Sadayappan, F. K. Hwang, and P. W. Shor. </author> <title> The rectilinear Steiner arborescence problem. </title> <journal> Algorithmica, </journal> <volume> 7 </volume> <pages> 277-288, </pages> <year> 1992. </year>
Reference-contexts: For many technologies, maximum source-sink path lengths model electrical delay more accurately than total wire length [33]. First, the thumbnail rectilinear Steiner trees are replaced with rectilinear Steiner ar-borescences (RSAs) <ref> [127] </ref>. An RSA is a minimum-length Steiner tree that contains a shortest path from the source to every sink. For performance-driven placement and routing, thumbnail arborescences subsume the purpose of thumbnail Steiner trees.
Reference: [128] <author> D. S. Richards. </author> <title> Complexity of single-layer routing. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 33 </volume> <pages> 286-288, </pages> <year> 1984. </year>
Reference-contexts: Clearly these techniques are heuristic in nature, but 4.3. Multi-Terminal Interconnections 44 the more elegant solution|simultaneously routing all the nets|is NP-complete even in a planar graph if all nets contain only two terminals <ref> [126, 128] </ref>. Jaja and Wu [88] describe a technique for doing just that: simultaneously routing a number r of two-terminal nets. Their approach is to modify the basic escape graph by replacing each escape segment with O (r) parallel segments at distance from each other. <p> Even if all nets have only two terminals, the congestion balancing problem with k as a parameter can be reduced from finding edge-disjoint paths of minimum total length in a grid graph, which has been proven NP-complete <ref> [99, 111, 126, 128] </ref>. For each fixed k, the congestion balancing problem can be solved exactly in polynomial time. For r nets, the vector s has at most r s (k) different possible values.
Reference: [129] <author> D. S. Richards and J. S. Salowe. </author> <title> A linear-time algorithm to construct a rectilinear Steiner minimal tree for k-extremal point sets. </title> <journal> Algorithmica, </journal> <volume> 7 </volume> <pages> 247-276, </pages> <year> 1992. </year>
Reference-contexts: For example, Cohoon, Richards, and Salowe [32] describe an algorithm to compute an optimal RST in linear time for a set of terminals that lie on the perimeter of a rectangle. More generally, Richards and Salowe <ref> [129] </ref> present an algorithm that computes, in O (k 4 n) time, an optimal RST for terminals on the perimeter of a k-sided convex polygon.
Reference: [130] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors XIII: The disjoint paths problem. </title> <journal> Journal of Combinatorial Theory, Series B, </journal> <volume> 63 </volume> <pages> 65-110, </pages> <year> 1995. </year>
Reference-contexts: Theorem 4.1 (Jaja and Wu [88]) A r-net routing instance (R; S) has a solution if and only if there are r vertex-disjoint paths in G r e (R; S). They use algorithms by Robertson and Seymour <ref> [130] </ref> to find these vertex-disjoint paths in polynomial time for any fixed r. This approach is of largely theoretical interest, as the running time is exponential in r.
Reference: [131] <author> J. S. Salowe and D. M. Warme. </author> <title> 35-point rectilinear Steiner minimal trees in a day. </title> <journal> Networks, </journal> <volume> 25 </volume> <pages> 69-87, </pages> <year> 1995. </year>
Reference-contexts: However, the algorithm is not practically applicable due to tremendous constant factors in its time complexity. Smith's algorithm is discussed further in Section 3.7. Salowe and Warme <ref> [131] </ref> present an algorithm that works well in practice|it is applicable to 35-terminal instances|but the only previously known bound on its worst-case time complexity is O (2 2 n ). Our results in Section 3.5 improve this bound slightly to O (2 n1:62 n ). <p> Authors Time n day Dreyfus and Wagner [43] O (n 2 3 n ) 16 Hakimi [70] O (n2 n 2 n log n) 8 Lewis et al. [109] O (4 n log n =n 4 ) 10 Salowe and Warme <ref> [131] </ref> O (2 n1:62 n ) 35 Sidorenko [137] O (n!) 11 Smith [139] n O ( p Thomborson et al. [145] O (n 2 3 n ) 20 Wong and Pecht [154] O (a n ); a 4 15 Yang and Wing [158] O (2 n 2 ) 9 SFDP <p> This modification increases the space requirements to O (n2 n ), which is still a significant improvement over Dreyfus-Wagner. 3.4 Full-set Screening The key concept in the Euclidean Steiner tree algorithms of Cockayne and Hewgill [28, 29] and Winter [149] and the RST algorithm of Salowe and Warme <ref> [131] </ref> is that of full-set screening. The idea is that relatively few subsets of the set of terminals can be full sets. Thus, several tests are applied to each subset to potentially eliminate it from candidacy as 3.5. Bounding the Number of Full Sets 24 a possible full set. <p> H (S) is an optimal full tree of the set S of terminals. The time required to compute the set F (T ) of candidate full sets is O (h (n)), where h (n) is the number of subsets that satisfy Hwang's theorem <ref> [131] </ref>; by Theorem 3.1, this time complexity does not exceed O (n n ) and is dominated by the decomposition term. Like the FDP algorithm, the space complexity of the SFDP algorithm is O (2 n ). <p> Figure 3.3 depicts the behavior of these three functions with respect to n. Note that currently the fastest algorithms only solve 35-terminal instances in a day on a workstation <ref> [131] </ref>, so computational technology will have to improve tremendously before Smith's algorithm is faster than ours on practically solvable instances. 3.8. <p> Note that O (n 2 2:62 n ) is an extremely pessimistic bound. In practice, we apply a number of other tests for full set candidacy <ref> [131] </ref>, and f (n) is much smaller than O (n n ) in practice. In fact, we conjecture that the upper bound on f (n) is at most O (n 2 ) and is quite possibly O (n log n). <p> The Salowe and Warme algorithm <ref> [131] </ref> is still faster than the SFDP algorithm in practice. <p> We note that the improvement of the SFDP algorithm over the FDP algorithm comes at the expense of a significant increase in implementation complexity. In our implementation, in addition to Hwang's theorem, a number of other tests are applied to eliminate subsets from full-set candidacy <ref> [131] </ref>. We are investigating how each test for full-set candidacy affects the resulting number of candidate full sets. In particular, applying only Hwang's theorem still guarantees the worst-case runtime of the SFDP algorithm, but would reduce the code considerably. <p> The fact that inputs are drawn from a small grid allows us some screening improvements beyond those for the standard RST problem. As in many previous full-set decomposition algorithms <ref> [28, 29, 131, 149] </ref>, we then use a branch and bound algorithm to find a set of candidate full sets of minimum total length, whose union spans all the terminals. Let M (T ) denote an MST of a set T of terminals. <p> We also apply a number of other tests from the Salowe-Warme algorithm <ref> [131] </ref> to eliminate full sets from candidacy; these tests eliminate many more full sets, accounting for the gap between k k and the actual number of possible full sets. 6.9. <p> In addition, the current branch and bound algorithm for finding the optimal full-set decomposition it quite simple. We believe that its efficiency can be considerably improved by using more elaborate strategies to prune the search space <ref> [131] </ref>. 6.9.
Reference: [132] <author> M. J. Saltzman. </author> <type> Personal communication. </type> <year> 1994. </year>
Reference-contexts: Experimentally, the postprocessing step typically reduces the channel width by several units. 6.7 Experimental Results We have implemented Mondrian in order to compare it against previous FPGA layout tools. We use code written by Saltzman <ref> [132] </ref> to solve the matching problem in the virtual-terminal assignment step (see Section 6.4.3) and we use Berkelaar's lp solve code [11] to solve the integer programs in the bottom-level routing step (see Section 6.4.4).
Reference: [133] <author> M. Sarrafzadeh and C. K. Wong. </author> <title> Bottleneck Steiner trees in the plane. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 41 </volume> <pages> 370-374, </pages> <year> 1992. </year>
Reference-contexts: A special case with practical significance is also examined, where the objective is to minimize the length of the longest wire in the interconnect <ref> [23, 133] </ref>. In Chapter 5, we present a number of results concerning computation of optimal and approximate power-p Steiner trees. Specifically, we present algorithms for computing optimal Euclidean power-2 Steiner trees, optimal rectilinear bottleneck Steiner trees, and rectilinear Steiner trees that minimize a combination of bottleneck weight and total length. <p> We now describe a geometric algorithm that computes an optimal RBST with a given topology in O (n 2 ) time without the use of linear programming. Sarrafzadeh and Wong <ref> [133] </ref> describe a simple algorithm that, given a set of terminals, a topology, and a real value ffi, either computes a bottleneck Steiner tree t with !(t ) ffi or determines that such a tree does not exist. Since our algorithm generalizes theirs, we briefly describe their algorithm. <p> The resulting algorithm has time complexity O (n 2 n!). The algorithm can also be used to compute good heuristic solutions by applying it to a small number of likely topologies. It is difficult to generalize these results to the Euclidean metric. While the algorithm of Sarrafzadeh and Wong <ref> [133] </ref> provides the required decision procedure for a given ffi, its control flow does not appear to depend on comparisons involving low-degree polynomials in ffi (the degree seems to be exponential in the depth of the topology). <p> However, we can modify our geometric algorithm to obtain solutions more efficiently. The RBST algorithm of Section 5.2.4, given a set of terminals and a topology , computes the optimal bottleneck weight ffi fl of an RBST with topology . Application of the algorithm of Sarrafzadeh and Wong <ref> [133] </ref> results in a region R ffi fl (s) for each Steiner point s such that placing each s anywhere within R ffi fl (s) produces an RBST with bottleneck weight ffi fl . <p> We obtain a simpler *-approximation algorithm for any distance metric by applying the algorithm of Sarrafzadeh and Wong <ref> [133] </ref> in binary-search fashion (the Sarrafzadeh and Wong algorithm is described in Section 5.2.4). Initialize a = 0 and initialize b to the length of the longest edge in an MST. Apply the algorithm of Sarrafzadeh and Wong for ffi = (b a)=2.
Reference: [134] <author> M. Schonert et al. </author> <title> GAP: Groups, algorithms, </title> <note> and programming (version 3 release 4). </note> <year> 1994. </year>
Reference-contexts: Proving the conjecture requires proving that the general equation for d! p (x) is irreducible and that its Galois group is an unsolvable group. While we have not proved this, we provide some evidence that it is true. We use the GAP software package <ref> [134] </ref> to verify that each polynomial is irreducible and that its Galois group is the symmetric group S d with d 5, which is an unsolvable group.
Reference: [135] <author> N. Sherwani. </author> <title> Algorithms for VLSI Physical Design Automation. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, Massachusetts, </address> <year> 1993. </year>
Reference-contexts: Introduction VLSI physical design automation is the process of translating an electrical description of a circuit into a physical layout on the surface of an integrated circuit <ref> [123, 135] </ref>. From the physical design automation domain arises a number of difficult algorithmic and combinatorial problems. The ability to compute good solutions to these problems is crucial to the production of high-performance integrated circuits at a reasonable cost.
Reference: [136] <author> H. Shin and A. Sangiovanni-Vincentelli. </author> <title> A detailed router based on incremental routing modifications: </title> <journal> Mighty. IEEE Transactions on Computer-Aided Design, </journal> <volume> 6 </volume> <pages> 942-955, </pages> <year> 1987. </year> <month> Bibliography156 </month>
Reference-contexts: If the instance is not entirely routed using this technique, then often rip-up and reroute techniques are applied, where one or more of the previously routed nets are removed and rerouted differently to make room for other nets <ref> [39, 40, 136] </ref>. Clearly these techniques are heuristic in nature, but 4.3. Multi-Terminal Interconnections 44 the more elegant solution|simultaneously routing all the nets|is NP-complete even in a planar graph if all nets contain only two terminals [126, 128].
Reference: [137] <author> A. F. Sidorenko. </author> <title> On minimal rectilinear Steiner trees. </title> <journal> Diskretnaya Matematika, </journal> <volume> 1 </volume> <pages> 28-37, </pages> <year> 1989. </year> <note> (In Russian). </note>
Reference-contexts: Their algorithm solves roughly 15-terminal instances [153]. Lewis, Pong, and Van Cleave [109] use some geometric properties of optimal RSTs to devise an algorithm with time complexity O (4 n log n =n 4 ), which solves 10-terminal instances in a day. Sidorenko <ref> [137] </ref> describes an exact RST algorithm. He proves some geometric and topological properties of optimal RSTs, and uses them to devise an O (n!) algorithm. <p> Authors Time n day Dreyfus and Wagner [43] O (n 2 3 n ) 16 Hakimi [70] O (n2 n 2 n log n) 8 Lewis et al. [109] O (4 n log n =n 4 ) 10 Salowe and Warme [131] O (2 n1:62 n ) 35 Sidorenko <ref> [137] </ref> O (n!) 11 Smith [139] n O ( p Thomborson et al. [145] O (n 2 3 n ) 20 Wong and Pecht [154] O (a n ); a 4 15 Yang and Wing [158] O (2 n 2 ) 9 SFDP O (n 2 2:62 n ) 27 Table
Reference: [138] <author> J. M. Smith, D. T. Lee, and J. S. Liebman. </author> <title> An O(n log n) heuristic algorithm for the rectilinear Steiner minimal tree problem. </title> <journal> Engineering Optimization, </journal> <volume> 4 </volume> <pages> 179-192, </pages> <year> 1980. </year>
Reference-contexts: For the standard RST problem, Richards (see Hwang, Richards, and Winter [84]) first investigated 3-Steinerization in this greedy form, and more complex variants appear in Chao and Hsu [20], Lee, Bose, and Hwang [106] and Smith, Lee, and Liebman <ref> [138] </ref>; these and others are summarized in Hwang, Richards, and Winter [84].
Reference: [139] <author> W. D. Smith. </author> <title> How to find Steiner minimal trees in Euclidean d-space. </title> <journal> Algorithmica, </journal> <volume> 7 </volume> <pages> 137-177, </pages> <year> 1992. </year>
Reference-contexts: He states that the algorithm is is applicable to instances with up to 11 terminals 1 . 1 Thanks to Masha Sosonkina for translating the paper. 3.3. Full-set Dynamic Programming 21 Smith <ref> [139] </ref> presents an algorithm with worst-case time complexity n O ( p n) , which is asymptotically faster than any (c n ) algorithm for constant c &gt; 1. However, the algorithm is not practically applicable due to tremendous constant factors in its time complexity. <p> Dreyfus and Wagner [43] O (n 2 3 n ) 16 Hakimi [70] O (n2 n 2 n log n) 8 Lewis et al. [109] O (4 n log n =n 4 ) 10 Salowe and Warme [131] O (2 n1:62 n ) 35 Sidorenko [137] O (n!) 11 Smith <ref> [139] </ref> n O ( p Thomborson et al. [145] O (n 2 3 n ) 20 Wong and Pecht [154] O (a n ); a 4 15 Yang and Wing [158] O (2 n 2 ) 9 SFDP O (n 2 2:62 n ) 27 Table 3.1: Summary of algorithms for <p> Again, one may wish to store the optimal decomposition of each subset along with its length, increasing the space requirements to O (n2 n ) but eliminating the need for two passes. 3.7 Time Complexity As mentioned previously, Smith's n O ( p n) algorithm <ref> [139] </ref> is asymptotically faster than either of our algorithms, or indeed than any (c n ) algorithm with c &gt; 1. However, for instances small enough to solve in practice, our algorithms are provably faster than Smith's. <p> In fact, Smith states that one would want to use a different algorithm for instances with less than 300 terminals <ref> [139] </ref>. Hwang, Chang, and Lee [85] use essentially the same techniques as Smith to solve a number of other problems; readers interested in the technique itself are referred there as well as to Smith [139]. 3.8 Empirical Results We have implemented the FDP and SFDP algorithms in order to compare them <p> that one would want to use a different algorithm for instances with less than 300 terminals <ref> [139] </ref>. Hwang, Chang, and Lee [85] use essentially the same techniques as Smith to solve a number of other problems; readers interested in the technique itself are referred there as well as to Smith [139]. 3.8 Empirical Results We have implemented the FDP and SFDP algorithms in order to compare them empirically with Hakimi's algorithm [70], the Dreyfus-Wagner algorithm [43], and the algorithm of Thomborson, Alpern, and Carter [145]. of input terminals. <p> The analysis of the SFDP algorithm includes an upper bound of O (n n ) on the maximum number of full sets on n terminals. We have proven that both algorithms, while asymptotically slower than that the algorithm of Smith <ref> [139] </ref>, are provably faster than Smith's algorithm for instances that can be solved in practice. Thus, for instances that can be solved in practice, the SFDP algorithm has faster proven time complexity than that of any previous algorithm for computing optimal RSTs. <p> These equations are linear, so an optimal solution to the system of linear equations can be computed using, e.g., Gaussian elimination. The graph structure of the system is a tree, so the system can be solved in O (n) time by Gaussian elimination on the leaves of the tree <ref> [139] </ref>. In addition, the x and y equations are independent, so each of the two systems can be solved separately. 5.2. <p> Thus, an optimal E2ST is computed by applying the construction from Theorem 5.1 to every full topology and taking the shortest resulting tree as the optimum. There are O (n!) full topologies on n terminals <ref> [139] </ref>, so this algorithm computes an optimal E2ST of n terminals in O (n n!) time. In practice, this algorithm is too inefficient to be applied to more than a few terminals. <p> Another topic is to devise approaches to these problems. If the conjecture proves to be true, then a reasonable approach is to devise iterative numerical algorithms that converge to optimal solutions, similar to Smith's <ref> [139] </ref> for the E1ST problem. In addition, even if the conjecture is true, computation of E3STs and E4STs remains an open problem. 5.4.5 Multiobjective power-p Steiner trees Many VLSI routing applications suggest the formulation of multiobjective power-p Steiner tree problems.
Reference: [140] <author> J. Soukup. </author> <title> On minimum cost networks with nonlinear costs. </title> <journal> SIAM Journal on Applied Mathematics, </journal> <volume> 29 </volume> <pages> 571-581, </pages> <year> 1975. </year>
Reference-contexts: Soukup <ref> [140] </ref> shows that given this restriction, for a class of edge weight functions that includes the power-p weight function, the degree of every Steiner point in an optimal power-p Steiner tree is exactly 3. We consider power-p Steiner trees with respect to both the Euclidean and rectilinear distance metrics. <p> Computing Optimal Power-p Steiner Trees 67 give an iterative procedure that approximates an optimal solution to a quadratic facility location problem, and White [147] proves a result similar to our Theorem 5.1. However, ours is the first known algorithm for computing optimal E2STs. Soukup <ref> [140] </ref> shows that for three terminals, the unique Steiner point is located at the arithmetic mean of the coordinates of the terminals. Lemma 5.1 (Soukup [140]) For three terminals t 1 , t 2 , and t 3 , the Steiner point s that minimizes the length of the E2ST is <p> However, ours is the first known algorithm for computing optimal E2STs. Soukup <ref> [140] </ref> shows that for three terminals, the unique Steiner point is located at the arithmetic mean of the coordinates of the terminals. Lemma 5.1 (Soukup [140]) For three terminals t 1 , t 2 , and t 3 , the Steiner point s that minimizes the length of the E2ST is given by s = x t 1 + x t 2 + x t 3 ; 3 : We use Lemma 5.1 to devise a
Reference: [141] <author> J. Soukup. </author> <title> Circuit layout. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 69 </volume> <pages> 1281-1304, </pages> <year> 1981. </year>
Reference-contexts: We refer to this special case of the OARST problem as the obstacle-avoiding shortest path (OASP) problem. The literature on the OASP and similar problems is quite vast; since other surveys have been written <ref> [74, 104, 141] </ref> and since our focus is on Steiner-tree routing of multi-terminal nets, we only overview some of the principal results for the two-terminal case. 4.2.1 Grid-based algorithms The earliest techniques for solving the OASP problem are so-called grid-based algorithms.
Reference: [142] <author> H. Spruth, F. Johannes, and K. Antreich. PHIroute: </author> <title> A parallel hierarchical sea-of-gates router. </title> <booktitle> In Proceedings of the International Symposium on Circuits and Systems, </booktitle> <pages> pages 487-490, </pages> <year> 1994. </year>
Reference-contexts: Let S (e) be the set of switch blocks on the cut line corresponding to e. Virtual terminal assignment is accomplished in a manner similar to the route algorithm of Spruth, Johannes, and Antreich <ref> [142] </ref>. Associate a cost with the assignment of each net in R (e) to each switch block in S (e).
Reference: [143] <author> P. R. Suaris and G. Kedem. </author> <title> An efficient algorithm for quadrisection and its applications to standard cell placement. </title> <journal> IEEE Transactions on Circuits and Systems, </journal> <volume> 35 </volume> <pages> 294-303, </pages> <year> 1988. </year>
Reference-contexts: All of the min-cut bisection techniques described above perform only placement; global and detailed routing are accomplished afterwards by different methods. An extension of the min-cut approach is the quadrisection approach of Suaris and Ke-dem <ref> [143] </ref>. A quadrisection algorithm is similar to a min-cut bisection algorithm except that the vertical and horizontal cuts are performed simultaneously. Suaris and Kedem later revised this technique to simultaneously perform placement and global routing [144].
Reference: [144] <author> P. R. Suaris and G. Kedem. </author> <title> A quadrisection-based place and route scheme for standard cells. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 8 </volume> <pages> 234-244, </pages> <year> 1989. </year>
Reference-contexts: An extension of the min-cut approach is the quadrisection approach of Suaris and Ke-dem [143]. A quadrisection algorithm is similar to a min-cut bisection algorithm except that the vertical and horizontal cuts are performed simultaneously. Suaris and Kedem later revised this technique to simultaneously perform placement and global routing <ref> [144] </ref>. Mayrhofer and Lauther [114] extended the quadrisection technique to larger grids, and based their partitioning strategies on (heuristic) rectilinear Steiner trees in these grids. However, their algorithm also performs only placement; global and detailed routing are accomplished afterward.
Reference: [145] <author> C. D. Thomborson, B. Alpern, and L. Carter. </author> <title> Rectilinear Steiner tree minimization on a workstation. </title> <editor> In N. Dean and G. E. Shannon, editors, </editor> <booktitle> Computational Support for Discrete Mathematics, volume 15 of DIMACS Series in Discrete Mathematics and Theoretical Computer Science, </booktitle> <pages> pages 119-136. </pages> <publisher> American Mathematical Society, </publisher> <address> Providence, Rhode Island, </address> <year> 1994. </year>
Reference-contexts: Its time and space requirements restrict it to solving instances with 16 or fewer terminals on a workstation. Thomborson, Alpern, and Carter <ref> [145] </ref> present some improvements to the Dreyfus-Wagner algorithm that do not change the algorithm's time complexity, but do improve its efficiency in practice|their algorithm solves 20-terminal problems in a day on a workstation. <p> n ) 16 Hakimi [70] O (n2 n 2 n log n) 8 Lewis et al. [109] O (4 n log n =n 4 ) 10 Salowe and Warme [131] O (2 n1:62 n ) 35 Sidorenko [137] O (n!) 11 Smith [139] n O ( p Thomborson et al. <ref> [145] </ref> O (n 2 3 n ) 20 Wong and Pecht [154] O (a n ); a 4 15 Yang and Wing [158] O (2 n 2 ) 9 SFDP O (n 2 2:62 n ) 27 Table 3.1: Summary of algorithms for computing optimal RSTs. <p> The FDP algorithm is very simple and easily implemented and runs in O (n3 n ) time. This improves, 3.3. Full-set Dynamic Programming 22 both theoretically and practically, on the Dreyfus-Wagner algorithm, which is often used in practice to compute optimal RSTs <ref> [41, 42, 98, 145] </ref>. Theorem 2.3 implies that an optimal RST for every set of terminals is either a full tree satisfying Hwang's theorem (Theorem 2.2 on page 14), or else it can be divided into two optimal subtrees joined at a terminal. This observation leads to the FDP algorithm. <p> In practice, the space requirements of the Dreyfus-Wagner algorithm are more restrictive than its time complexity [13], and it cannot solve problems much above 16 terminals within the main memory of a workstation. The Thomborson, Alpern, and Carter <ref> [145] </ref> optimization to the Dreyfus-Wagner algorithm manages memory explicitly on disk, but even so, a 23-terminal problem requires about 400 megabytes of storage, so problems larger than this are currently infeasible on a typical workstation. <p> other problems; readers interested in the technique itself are referred there as well as to Smith [139]. 3.8 Empirical Results We have implemented the FDP and SFDP algorithms in order to compare them empirically with Hakimi's algorithm [70], the Dreyfus-Wagner algorithm [43], and the algorithm of Thomborson, Alpern, and Carter <ref> [145] </ref>. of input terminals. Each data point results from 10 runs on each of 10 different sets of terminals generated uniformly at random from a 10000 by 10000 grid. As can be seen, the FDP algorithm is faster than the Hakimi, Dreyfus-Wagner, and Thomborson, Alpern, and Carter algorithms. <p> Finally, we have demonstrated empirically that our algorithms are faster in practice than three popular previous algorithms for computing optimal RSTs: Hakimi's spanning tree enumeration algorithm [70], the dynamic programming algorithm of Dreyfus and Wag-ner [43], and the improvement to the Dreyfus-Wagner algorithm devised by Thomborson, Alpern, and Carter <ref> [145] </ref>. We note that the improvement of the SFDP algorithm over the FDP algorithm comes at the expense of a significant increase in implementation complexity. In our implementation, in addition to Hwang's theorem, a number of other tests are applied to eliminate subsets from full-set candidacy [131].
Reference: [146] <author> B. L. van der Waerden. </author> <title> Modern Algebra. </title> <publisher> Frederick Ungar Publishing Company, </publisher> <address> New York, New York, </address> <year> 1949. </year> <month> Bibliography157 </month>
Reference-contexts: The best approach to approximating solutions to such polynomials is iterative numerical techniques that converge to the solutions. 2 Unless cited otherwise, algebra results can be found in standard algebra texts such as Hungerford [81] or van der Waerden <ref> [146] </ref>. 5.2. Computing Optimal Power-p Steiner Trees 73 We conjecture that, in this sense, the EpST problem cannot be solved exactly if p 5.
Reference: [147] <author> J. A. White. </author> <title> A quadratic facility location problem. </title> <journal> AIIE Transactions, </journal> <volume> 3 </volume> <pages> 156-157, </pages> <year> 1971. </year>
Reference-contexts: In addition to the VLSI applications mentioned above, nonlinear Steiner tree problems are often studied in the operations research community under the name facility location <ref> [52, 78, 147] </ref>. A special case of the power-p Steiner tree problem is the bottleneck Steiner tree problem, which is to find a geometric Steiner tree that minimizes the length of the longest edge. <p> In that context, Eyster and White [52] 5.2. Computing Optimal Power-p Steiner Trees 67 give an iterative procedure that approximates an optimal solution to a quadratic facility location problem, and White <ref> [147] </ref> proves a result similar to our Theorem 5.1. However, ours is the first known algorithm for computing optimal E2STs. Soukup [140] shows that for three terminals, the unique Steiner point is located at the arithmetic mean of the coordinates of the terminals.
Reference: [148] <author> P. Widmayer. </author> <title> On graphs preserving rectilinear shortest paths in the presence of obstacles. </title> <journal> Annals of Operations Research, </journal> <volume> 33 </volume> <pages> 557-575, </pages> <year> 1991. </year>
Reference-contexts: Furthermore, Mitchell conjectures that in fact e = O (s), in which case the algorithm would have the optimal running time of O (s log s). An elegant approach to the OASP problem is due to Widmayer <ref> [148] </ref>, who describes the construction of a graph similar to the escape graph that contains O (s log s) vertices while still containing a shortest path between every pair of terminals. Widmayer calls this graph the shortest-paths preserving graph, or spp graph. 4.2. <p> It can be shown that the spp graph contains a shortest path between every pair of terminals, and that it contains O (s log s) vertices and edges. Furthermore, the spp graph can be generated in O (s log s) time. The reader is referred to Widmayer <ref> [148] </ref> for details. Widmayer also describes how to use the spp graph to compute a shortest path between two terminals in O (s log s log log s) time.
Reference: [149] <author> P. Winter. </author> <title> An algorithm for the Steiner problem in the Euclidean plane. </title> <journal> Networks, </journal> <volume> 15 </volume> <pages> 323-345, </pages> <year> 1985. </year>
Reference-contexts: This modification increases the space requirements to O (n2 n ), which is still a significant improvement over Dreyfus-Wagner. 3.4 Full-set Screening The key concept in the Euclidean Steiner tree algorithms of Cockayne and Hewgill [28, 29] and Winter <ref> [149] </ref> and the RST algorithm of Salowe and Warme [131] is that of full-set screening. The idea is that relatively few subsets of the set of terminals can be full sets. Thus, several tests are applied to each subset to potentially eliminate it from candidacy as 3.5. <p> The fact that inputs are drawn from a small grid allows us some screening improvements beyond those for the standard RST problem. As in many previous full-set decomposition algorithms <ref> [28, 29, 131, 149] </ref>, we then use a branch and bound algorithm to find a set of candidate full sets of minimum total length, whose union spans all the terminals. Let M (T ) denote an MST of a set T of terminals.
Reference: [150] <author> P. </author> <title> Winter. </title> <type> Personal communication. </type> <year> 1994. </year>
Reference-contexts: These reductions appear empirically to be much more effective than the standard reductions such as the dimension reduction test described in Section 4.3.1. Furthermore, the reductions are applicable to other rectilinear graphs such as the escape graph, and Winter <ref> [150] </ref> conjectures that they will be at least as effective in this domain as for the standard RST problem. The application of Winter's reductions to escape graphs should be empirically examined. 4.5.2 Computing optimal OARSTs A full Steiner tree is one in which every terminal is a leaf.
Reference: [151] <author> P. Winter. </author> <title> Reductions for the rectilinear Steiner tree problem. </title> <type> manuscript, </type> <year> 1994. </year>
Reference-contexts: Conclusions and Future Work 62 Winter <ref> [151] </ref> has devised a number of graph reductions intended for the standard RST problem. These reductions appear empirically to be much more effective than the standard reductions such as the dimension reduction test described in Section 4.3.1.
Reference: [152] <author> S. Wolfram. </author> <title> Mathematica: A System for Doing Mathematics by Computer. </title> <publisher> Addison-Wesley, </publisher> <address> Redwood City, California, </address> <year> 1988. </year>
Reference-contexts: Thus, p (n) 2 (2 p1 blg nc p1 ) as desired. 2 We use Mathematica TM <ref> [152] </ref> to find the value n fl that maximizes the lower bound for a given value of p. Table 5.1 gives the value of n fl and the Euclidean lower and upper bounds 5.3.
Reference: [153] <author> Y. T. Wong. </author> <type> Personal communication. </type> <year> 1993. </year>
Reference-contexts: The time complexity of the algorithm is a summation for which no closed form is given, but it grows slightly faster than O (4 n ). Their algorithm solves roughly 15-terminal instances <ref> [153] </ref>. Lewis, Pong, and Van Cleave [109] use some geometric properties of optimal RSTs to devise an algorithm with time complexity O (4 n log n =n 4 ), which solves 10-terminal instances in a day. Sidorenko [137] describes an exact RST algorithm.
Reference: [154] <author> Y. T. Wong and M. Pecht. </author> <title> A solution for Steiner's problem. </title> <editor> In M. Pecht, editor, </editor> <booktitle> Placement and Routing of Electronic Modules, </booktitle> <pages> pages 261-304. </pages> <publisher> Marcel Dekker, </publisher> <address> New York, New York, </address> <year> 1993. </year>
Reference-contexts: Yang and Wing [158] present a branch-and-bound algorithm with worst-case complexity O (2 n 2 ); the largest instance on which they test their algorithm contains 9 terminals. Wong and Pecht <ref> [154] </ref> describe an exact RST algorithm that is essentially an exhaustive version of the edge-embedding heuristic of Ho, Vijayan, and Wong [75]. The time complexity of the algorithm is a summation for which no closed form is given, but it grows slightly faster than O (4 n ). <p> n) 8 Lewis et al. [109] O (4 n log n =n 4 ) 10 Salowe and Warme [131] O (2 n1:62 n ) 35 Sidorenko [137] O (n!) 11 Smith [139] n O ( p Thomborson et al. [145] O (n 2 3 n ) 20 Wong and Pecht <ref> [154] </ref> O (a n ); a 4 15 Yang and Wing [158] O (2 n 2 ) 9 SFDP O (n 2 2:62 n ) 27 Table 3.1: Summary of algorithms for computing optimal RSTs.
Reference: [155] <author> Y. Wu, P. Widmayer, M. D. F. Schlag, and C. K. Wong. </author> <title> Rectilinear shortest paths and minimum spanning trees in the presence of rectilinear obstacles. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 36 </volume> <pages> 321-331, </pages> <year> 1987. </year>
Reference-contexts: Kanchanasut [92] describes an algorithm that computes a set of single-source shortest paths in a rectilinear graph in linear time, which can be applied to the escape graph to solve the OASP problem in O (m) time. 4.2. Two-Terminal Interconnections 42 4.2.2.2 Other algorithms Wu, Widmayer, Schlag, and Wong <ref> [155] </ref> describe a graph they call a track graph, which is identical to the escape graph defined in Section 4.2.2.1 except that the segments adjacent to terminals extend only until they hit some escape segment (in the escape graph they are extended maximally). <p> However, Theorem 4.1 might instead be used in a heuristic fashion for routing multiple nets; to our knowledge, this has not yet been tried. 4.3 Multi-Terminal Interconnections The general OARST problem has received substantially less attention than the special case in which there are only two terminals. Several authors <ref> [108, 155] </ref> have pointed out that if one can solve the OASP problem, then one can construct a minimum spanning tree (MST) of a multi-terminal instance.
Reference: [156] <author> Y. L. Wu and M. Marek-Sadowska. </author> <title> An efficient router for 2-D field programmable gate arrays. </title> <booktitle> In Proceedings of the European Design and Test Conference, </booktitle> <pages> pages 412-416, </pages> <year> 1994. </year>
Reference-contexts: The 3000-series benchmarks are those used by Brown, Rose, and Vranesic to test their FPGA router, which is called CGE [18]. The 4000-series benchmarks are those used by Lemieux and Brown to test their SEGA router [107] and by Wu and Marek-Sadowska to test their GPB router <ref> [156] </ref>. We use the same suggested parameters used by these previous works. For the 3000-series benchmarks, F c = d0:6W e and F s = 6. For the 4000-series benchmarks, F c = W and F s = 3. <p> Experimental Results 123 Table 6.1 summarizes the name, size, and number of nets for each of these benchmarks. The table also gives the channel widths computed by CGE [18] for the 3000-series bench marks and the channel widths computed by SEGA [107] and GPB <ref> [156] </ref> for the 4000-series benchmarks.
Reference: [157] <author> Xilinx. </author> <title> The Programmable Gate Array Data Book. </title> <address> Xilinx, San Jose, California, </address> <year> 1992. </year> <month> Bibliography158 </month>
Reference-contexts: The type of FPGA considered here is a symmetrical array FPGA typical of those available from Xilinx <ref> [157] </ref>. A symmetrical-array FPGA consists of a number of identical programmable logic blocks arranged in a grid, interconnected by programmable routing resources. A portion of such an FPGA is illustrated in Figure 6.1. <p> We use the same suggested parameters used by these previous works. For the 3000-series benchmarks, F c = d0:6W e and F s = 6. For the 4000-series benchmarks, F c = W and F s = 3. Details on Xilinx FPGAs are found in the Xilinx data book <ref> [157] </ref>. 6.7. Experimental Results 123 Table 6.1 summarizes the name, size, and number of nets for each of these benchmarks.
Reference: [158] <author> Y. Y. Yang and O. Wing. </author> <title> Optimal and suboptimal solution algorithms for the wiring problem. </title> <booktitle> In Proceedings of the International Symposium on Circuit Theory, </booktitle> <pages> pages 154-158, </pages> <year> 1972. </year>
Reference-contexts: The reader is referred to Hwang, Richards, and Winter [84] for further discussion of algorithms for the GST problem. A number of other algorithms have been devised that solve the RST problem in a geometric fashion, without explicit use of the Hanan grid graph. Yang and Wing <ref> [158] </ref> present a branch-and-bound algorithm with worst-case complexity O (2 n 2 ); the largest instance on which they test their algorithm contains 9 terminals. Wong and Pecht [154] describe an exact RST algorithm that is essentially an exhaustive version of the edge-embedding heuristic of Ho, Vijayan, and Wong [75]. <p> =n 4 ) 10 Salowe and Warme [131] O (2 n1:62 n ) 35 Sidorenko [137] O (n!) 11 Smith [139] n O ( p Thomborson et al. [145] O (n 2 3 n ) 20 Wong and Pecht [154] O (a n ); a 4 15 Yang and Wing <ref> [158] </ref> O (2 n 2 ) 9 SFDP O (n 2 2:62 n ) 27 Table 3.1: Summary of algorithms for computing optimal RSTs. The column labeled n day indicates the problem size that each algorithm solves in 24 hours on a workstation. <p> We now describe a few straightforward tests whose application typically eliminates many vertices from the escape graph. We call the resulting graph the reduced escape graph. The first test is the dimension reduction test of Yang and Wing <ref> [158] </ref> for the standard RST problem. Yang and Wing prove that if a vertex v is a corner vertex, i.e. it is incident to exactly two orthogonal edges e 1 and e 2 , and v is not a terminal, and edges exist that 4.3.
Reference: [159] <author> A. Z. Zelikovsky. </author> <title> An 11=6-approximation algorithm for the network Steiner problem. </title> <journal> Algorithmica, </journal> <volume> 9 </volume> <pages> 463-470, </pages> <year> 1993. </year>
Reference-contexts: As mentioned above, an MST is an approximate solution to the graph Steiner tree problem, and thus the OARST problem, with ~ = 2. Recently researchers have devised approximations with better bounds for the graph Steiner tree problem: Ze-likovsky <ref> [159] </ref> describes an algorithm with ~ = 11=6 1:83, and Berman and Ramaiyer [12] improve Zelikovsky's bound to ~ = 16=9 1:78, with better approximations possible at the expense of increased running time. <p> A k-restricted Steiner tree is one in which every full tree contains at most k terminals. The notion of k-restriction has been applied to produce approximations for the Steiner problem in graphs and in the rectilinear metric with approximation bounds better than the Steiner ratio <ref> [12, 159] </ref>. This concept may prove useful for power-p Steiner tree problems as well. 5.4.3 R2ST and EBST algorithms In Sections 5.2.2 and 5.2.4, respectively, we briefly mention the difficulties in devising algorithms for computing optimal R2STs and EBSTs. We believe that different approaches 5.4.
References-found: 159

