URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr92/tr92-006.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr92-abstracts.html
Root-URL: http://www.cis.ufl.edu
Title: An Integrated Approach to System Modelling using a Synthesis of Artificial Intelligence, Software Engineering and
Author: Paul A. Fishwick 
Keyword: Categories and Subject Descriptors: D.2.1 [Software Engineering] Requirements/Specifications Methodologies; D.2.2 [Software Engineering] Tools and Techniques Computer-aided software engineering; D.2.10 [Software Engineering] Design Methodologies, Representation; I.2.0 [Artificial Intelligence] General Cognitive Simulation; I.2.4 [Artificial Intelligence] Knowledge Representation Formalisms and Methods Representations; I.6.1 [Simulation and Modeling] Simulation Theory Model classification, systems theory; I.6.5 [Simulation and Modeling] Model Development Modeling methodologies. I.6.8 [Simulation and Modeling] Types of Simulation Combined, Discrete event, Continuous. General Terms: Modeling. Additional Key Words and Phrases: Multimodeling, Abstraction Levels.  
Affiliation: University of Florida.  
Abstract: Traditional computer simulation terminology includes taxonomic divisions with terms such as "discrete event," "continuous," and "process oriented." Even though such terms have become familiar to simulation researchers, the terminology is distinct from other disciplines |such as artificial intelligence and software engineering| which have similar goals relating specifically to modelling dynamic systems. There is a need to unify terminology among these disciplines so that system modelling is formalized in a common framework. We present a perspective that serves to characterize simulation models in terms of their procedural versus declarative orientations since these two orientations are prevalent throughout most modelling disciplines that we have encountered. We used a sample dynamic system (e.g., two jug problem) found in artificial intelligence to highlight the connecting threads in system modelling within each discipline. Moreover, in teaching simulation students using this perspective, we have had considerable success in relating the field of modelling within computer simulation to other sub-disciplines within computer science. The result is that modelling in simulation can be more easily compared-with and contrasted-against other modelling approaches in computer science. fl Author's Address: Paul A. Fishwick, Dept. of Computer and Information Sciences, University of Florida, Bldg. CSE, Room 301, Gainesville, FL 32611. This paper is an enhanced and comprehensive manuscript based on initial results [34] prepared for the Third Conference on AI, Simulation and Planning in High Autonomy Systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Abramsky, S., and Hankin, C. </author> <title> Abstract Interpretation of Declarative Languages. </title> <publisher> Ellis Horwood Limited/John Wiley and Sons, </publisher> <year> 1987. </year>
Reference-contexts: Declarative models emphasize state transitions, while functional models emphasize operational or event oriented modelling. Declarative and functional model forms are prevalent in all three disciplines. For instance, programming languages are often categorized into either declarative <ref> [1, 49] </ref> or functional [48, 6] types. The declarative programming languages (such as Prolog) emphasize changes in state where "states" are best coded as particular data structures | a simple variable being the most commonly used form for a state.
Reference: [2] <author> Addanki, S., Cremonini, R., and Penberthy, J. S. </author> <title> Reasoning about Assumptions in Graphs of Models. </title> <booktitle> In Eleventh International Joint Conference on Artificial Intelligence (August 1989), IJCAI, </booktitle> <pages> pp. 1432 - 1438. </pages>
Reference-contexts: Within the simulation field, the term multimodel was introduced by Oren [67] and subsequently refined by Fishwick and Zeigler [37]. Recently, AI researchers such as Addanki <ref> [2] </ref> and Forbus [39, 40] have also performed research dealing with multiple models.
Reference: [3] <author> Akkermans, H. A., and Dijkum, C. v. </author> <title> Worlds Apart? The Modeling Cycle, Paradigms and the World View in Simulation Modeling. </title> <booktitle> In European Simulation Multi-Conference (Nuremberg, </booktitle> <address> Germany, </address> <month> June </month> <year> 1990), </year> <booktitle> Society for Computer Simulation, </booktitle> <pages> pp. 99 - 106. </pages>
Reference-contexts: as well as asking fundamentally interesting historical questions such as "What are the causes or catalysts aiding in the relatively recent convergence in AI, SE and simulation modelling?" and "How, precisely, will modellers and decision makers benefit in this convergence?" The integrated style is being used by several simulation researchers <ref> [92, 60, 78, 66, 33, 3] </ref>; however, it has not yet penetrated the general simulation textbook literature as a more powerful paradigm for modelling dynamical systems.
Reference: [4] <author> Ashby, W. R. </author> <title> An Introduction to Cybernetics. </title> <publisher> John Wiley and Sons, </publisher> <year> 1963. </year>
Reference-contexts: Systems theory has developed since the early 1960s into a field that made precise the core components of "systems" regardless of the specific discipline (i.e., computer science, biology, chemistry, physics, operations research) <ref> [12, 4] </ref>. The first formal theories for discrete event simulation [88, 89, 91] were founded upon systems theory, and much recent work has continued this trend.
Reference: [5] <institution> Athena Systems. </institution> <note> Foresight User's Manual, </note> <month> February </month> <year> 1989. </year>
Reference-contexts: however, they are most useful within conceptual models that serve to enhance our ability to diagnose symptoms, plan future actions and provide common-sense explanations of device behavior [83, 22]. 2.2 SE & Simulation Models Software engineers are pioneering new and novel methods for building system models; tools such as Foresight <ref> [5] </ref> provide the modeller with the capability of modelling dynamic systems using finite state automata and block modelling all under the umbrella of object organization. Software engineers have developed a keen interest in simulation; there is an apparent convergence between these two areas [76, 68, 7, 8, 61, 45, 46]. <p> Inputs and outputs can represent data flows or control flows, and they are defined as such within SE <ref> [5] </ref>. From our perspective, these flows are all data flows regardless of whether a function treats its input data from a control perspective. The functional SE box structuring techniques of Mills [58] bear remarkable resemblance to those of systems and simulation theory [69, 88].
Reference: [6] <author> Bailey, R. </author> <title> Functional Programming with HOPE. </title> <publisher> Ellis Horwood Limited/Simon and Schulster, </publisher> <year> 1990. </year>
Reference-contexts: Declarative models emphasize state transitions, while functional models emphasize operational or event oriented modelling. Declarative and functional model forms are prevalent in all three disciplines. For instance, programming languages are often categorized into either declarative [1, 49] or functional <ref> [48, 6] </ref> types. The declarative programming languages (such as Prolog) emphasize changes in state where "states" are best coded as particular data structures | a simple variable being the most commonly used form for a state. Functional programming languages concentrate on functional composition while de-emphasizing side effects 2 .
Reference: [7] <author> Balci, O., and Nance, R. E. </author> <title> Simulation Model Development Environments: A Research Prototype. </title> <journal> Journal of the Operational Research Society 38, </journal> <volume> 8 (1987), 753 - 763. </volume>
Reference-contexts: Software engineers have developed a keen interest in simulation; there is an apparent convergence between these two areas <ref> [76, 68, 7, 8, 61, 45, 46] </ref>. Some of our previous research [31, 30, 32, 37] has suggested the study of model engineering as a direct analog to software engineering. Within the simulation community, Zeigler presents a theory for mod-elling autonomous agents [92] while implementing a model engineering methodology.
Reference: [8] <author> Balci, O., Nance, R. E., Derrick, E. J., Page, E., and Bishop, J. L. </author> <title> Model Generation Issues in a Simulation Support Environment. </title> <booktitle> In 1990 Winter Simulation Conference (New Orleans, </booktitle> <address> LA, </address> <month> December </month> <year> 1990), </year> <pages> pp. 257 - 263. </pages>
Reference-contexts: Software engineers have developed a keen interest in simulation; there is an apparent convergence between these two areas <ref> [76, 68, 7, 8, 61, 45, 46] </ref>. Some of our previous research [31, 30, 32, 37] has suggested the study of model engineering as a direct analog to software engineering. Within the simulation community, Zeigler presents a theory for mod-elling autonomous agents [92] while implementing a model engineering methodology.
Reference: [9] <author> Banks, J., and Carson, J. S. </author> <title> Discrete Event System Simulation. </title> <publisher> Prentice Hall, </publisher> <year> 1984. </year>
Reference-contexts: Our emphasis is on modelling methodology [89, 65, 66, 25, 24] rather than analysis methodology. Methodology in analysis has received a much more comprehensive treatment in the general simulation literature <ref> [54, 9] </ref> as compared with methodology in modelling.
Reference: [10] <author> Beck, H. W., and Fishwick, P. A. </author> <title> Incorporating Natural Language Descriptions into Modeling and Simulation. Simulation Journal (March", </title> <booktitle> volume=52, number=3,pages = "102 - 109 1989). CIS TR92-006 TBP: ACM Transactions on Modeling & Computer Simulation, V2, </booktitle> <pages> N4 23 </pages>
Reference-contexts: Events are points in event space just as states are points in state space. Event space is defined as Q fi T . Events normally represent values of state that correspond to definite cognitive or lexical mappings <ref> [10, 11] </ref>. For instance, in a queueing model we identify an event as an "arrival" but we may not have words to represent the values of other states whose values do not correspond to a cognitive or lexical association.
Reference: [11] <author> Beck, H. W., and Fishwick, P. A. </author> <title> Natural Language, Cognitive Models and Simulation. In Qualitative Simulation Modeling and Analysis, </title> <editor> P. A. Fishwick and P. A. Luker, Eds. </editor> <publisher> Springer Verlag, </publisher> <year> 1990. </year> <note> (in press). </note>
Reference-contexts: Events are points in event space just as states are points in state space. Event space is defined as Q fi T . Events normally represent values of state that correspond to definite cognitive or lexical mappings <ref> [10, 11] </ref>. For instance, in a queueing model we identify an event as an "arrival" but we may not have words to represent the values of other states whose values do not correspond to a cognitive or lexical association.
Reference: [12] <author> Bertalanffy, L. v. </author> <title> General System Theory. </title> <address> George Braziller, New York, </address> <year> 1968. </year>
Reference-contexts: Systems theory has developed since the early 1960s into a field that made precise the core components of "systems" regardless of the specific discipline (i.e., computer science, biology, chemistry, physics, operations research) <ref> [12, 4] </ref>. The first formal theories for discrete event simulation [88, 89, 91] were founded upon systems theory, and much recent work has continued this trend.
Reference: [13] <author> Bobrow, D. G. </author> <title> Qualitative Reasoning about Physical Systems. </title> <publisher> MIT Press, </publisher> <year> 1985. </year>
Reference-contexts: Autonomy has, therefore, spawned the creation of knowledge based models that contain a variety of natural, artificial and intelligent objects interacting and reasoning in a complex environment. The fields of qualitative reasoning and qualitative physics <ref> [83, 13] </ref> are evidence of the AI interest in system modelling from the perspective of mathematical reasoning. In addition to autonomy playing a critical role, incomplete knowledge is ever present within models and AI researchers have suggested new ways of representing this type of knowledge.
Reference: [14] <author> Booch, G. </author> <title> Object-Oriented Development. </title> <journal> IEEE Transactions on Software Engineering 12, </journal> <month> 2 (Feb. </month> <year> 1986), </year> <pages> 211 - 221. </pages>
Reference-contexts: From such a model, we can gradually progress to more system theoretic constructs. The concept model in AI is termed a semantic network [86, 27, 17], while equivalent model in SE is the object model with attribute definition <ref> [79, 15, 16, 14] </ref>. Most work in simulation, concerning concept models, has been performed along the lines of model specifications [59, 68] and the system entity structure [89, 92].
Reference: [15] <author> Booch, G. </author> <title> On the Concepts of Object-Oriented Design. In Modern Software Engineering, </title> <editor> P. A. Ng and R. T. Yeh, Eds. </editor> <publisher> Van Nostrand Reinhold, </publisher> <year> 1990, </year> <journal> ch. </journal> <volume> 6, </volume> <pages> pp. 165 - 204. </pages>
Reference-contexts: From such a model, we can gradually progress to more system theoretic constructs. The concept model in AI is termed a semantic network [86, 27, 17], while equivalent model in SE is the object model with attribute definition <ref> [79, 15, 16, 14] </ref>. Most work in simulation, concerning concept models, has been performed along the lines of model specifications [59, 68] and the system entity structure [89, 92].
Reference: [16] <author> Booch, G. </author> <title> Object Oriented Design. </title> <publisher> Benjamin Cummings, </publisher> <year> 1991. </year>
Reference-contexts: CIS TR92-006 TBP: ACM Transactions on Modeling & Computer Simulation, V2, N4 4 when introducing how additional modelling techniques such as production systems, track-based animation and System Dynamics fit within the overall framework. In the usual object oriented modelling approach within SE <ref> [79, 16] </ref>, specific modelling methods such as FSA modelling and DFDs are promoted. We treat these two types of models as instances of a class rather than a class by itself. Our approach is to stress the utility of having functional and declarative classes of models. <p> From such a model, we can gradually progress to more system theoretic constructs. The concept model in AI is termed a semantic network [86, 27, 17], while equivalent model in SE is the object model with attribute definition <ref> [79, 15, 16, 14] </ref>. Most work in simulation, concerning concept models, has been performed along the lines of model specifications [59, 68] and the system entity structure [89, 92].
Reference: [17] <editor> Brachman, R., and Levesque, H., Eds. </editor> <booktitle> Readings in Knowledge Representation. </booktitle> <publisher> Morgan Kaufman, </publisher> <year> 1985. </year>
Reference-contexts: The first type of model that we want to create is a concept model that emphasizes a objects and their relations to one another. From such a model, we can gradually progress to more system theoretic constructs. The concept model in AI is termed a semantic network <ref> [86, 27, 17] </ref>, while equivalent model in SE is the object model with attribute definition [79, 15, 16, 14]. Most work in simulation, concerning concept models, has been performed along the lines of model specifications [59, 68] and the system entity structure [89, 92].
Reference: [18] <author> Cellier, F. E. </author> <title> Combined Continuous System Simulation by Use of Digital Computers: Techniques and Tools. </title> <type> PhD thesis, </type> <institution> Swiss Federal Institute of Technology Zurich, </institution> <year> 1979. </year>
Reference-contexts: Finally, the multimodel [33, 57, 37] is the most comprehensive type of model that supports multiple models tied together with homomorphic mappings from one model to another [28]. The multimodel approach is a generalization of combined simulation modelling <ref> [18, 71] </ref> where models may be of many different types | not just a mixture of discrete event and continuous components. The proposed taxonomy is an extension to the object oriented modelling paradigm.
Reference: [19] <author> Cellier, F. E. </author> <title> Continuous System Modeling. </title> <publisher> Springer Verlag, </publisher> <year> 1991. </year>
Reference-contexts: For continuous systems <ref> [19] </ref>, T = R (reals), and for discrete time systems, T = Z (integers). * U is the input set containing the possible values of the input to the system. * Y is the output set.
Reference: [20] <author> Checkland, P. B. </author> <title> Systems Thinking, </title> <booktitle> Systems Science. </booktitle> <publisher> John Wiley and Sons, </publisher> <year> 1981. </year>
Reference-contexts: Most work in simulation, concerning concept models, has been performed along the lines of model specifications [59, 68] and the system entity structure [89, 92]. Since simulation has its formal roots in systems theory and science, we find work relating to conceptual modelling in these areas as well <ref> [20, 52, 38] </ref>. The semantic network, even though it can serve as a rough cut of a simulation model, was often built as an end in itself, or to facilitate qualitative reasoning via link traversal. Semantic networks are traversed to answer simple questions about a system.
Reference: [21] <author> Davis, A. M. </author> <title> A Comparison of Techniques for the Specification of External System Behavior. </title> <journal> Communications of the ACM 31, </journal> <month> 9 (September </month> <year> 1988), </year> <pages> 1098 - 1115. </pages>
Reference-contexts: A model can contain homogeneous or heterogeneous node types; simple modelling constructs are homogeneous (such as FSAs), and more complex constructs are heterogeneous (such as System Dynamics graphs, Petri nets or 3 The concept of superstate in SE is discussed by Davis <ref> [21] </ref> CIS TR92-006 TBP: ACM Transactions on Modeling & Computer Simulation, V2, N4 8 bond graphs).
Reference: [22] <author> Davis, E. </author> <title> Representations of Commonsense Knowledge. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1990. </year>
Reference-contexts: These types of techniques have been used for declarative and functional modelling [85]; however, they are most useful within conceptual models that serve to enhance our ability to diagnose symptoms, plan future actions and provide common-sense explanations of device behavior <ref> [83, 22] </ref>. 2.2 SE & Simulation Models Software engineers are pioneering new and novel methods for building system models; tools such as Foresight [5] provide the modeller with the capability of modelling dynamic systems using finite state automata and block modelling all under the umbrella of object organization.
Reference: [23] <author> Davis, R., and King, J. </author> <title> An overview of production systems. </title> <booktitle> Machine Intelligence 8 (1977). </booktitle>
Reference-contexts: The production system, constraint and logic approaches utilize unification and pattern matching to afford declarative methods the capability of representing complex behaviors with a modicum of mathematical notation. Methods of production systems <ref> [23] </ref> and formal logic [26] (either standard or temporal) may be used as a basis for simulation modelling. We need to define the concept of state, input and time with respect to these models: * State is defined as the current set of facts or truths in a formal system.
Reference: [24] <author> Elzas, M. S., Oren, T. I., and Zeigler, B. P. </author> <title> Modelling and Simulation Methodology in the Artificial Intelligence Era. </title> <publisher> North Holland, </publisher> <year> 1986. </year>
Reference-contexts: Our emphasis is on modelling methodology <ref> [89, 65, 66, 25, 24] </ref> rather than analysis methodology. Methodology in analysis has received a much more comprehensive treatment in the general simulation literature [54, 9] as compared with methodology in modelling.
Reference: [25] <author> Elzas, M. S., Oren, T. I., and Zeigler, B. P. </author> <title> Modelling and Simulation Methodology: Knowledge Systems' Paradigms. </title> <publisher> North Holland, </publisher> <year> 1989. </year>
Reference-contexts: Our emphasis is on modelling methodology <ref> [89, 65, 66, 25, 24] </ref> rather than analysis methodology. Methodology in analysis has received a much more comprehensive treatment in the general simulation literature [54, 9] as compared with methodology in modelling.
Reference: [26] <author> Enderton, H. </author> <title> A Mathematical Introduction to Logic. </title> <publisher> Academic Press, </publisher> <year> 1972. </year>
Reference-contexts: The production system, constraint and logic approaches utilize unification and pattern matching to afford declarative methods the capability of representing complex behaviors with a modicum of mathematical notation. Methods of production systems [23] and formal logic <ref> [26] </ref> (either standard or temporal) may be used as a basis for simulation modelling. We need to define the concept of state, input and time with respect to these models: * State is defined as the current set of facts or truths in a formal system.
Reference: [27] <author> Findler, N. V., Ed. </author> <title> Associate Networks: Representation and Use of Knowledge By Computers. </title> <publisher> Academic Press, </publisher> <year> 1979. </year>
Reference-contexts: The first type of model that we want to create is a concept model that emphasizes a objects and their relations to one another. From such a model, we can gradually progress to more system theoretic constructs. The concept model in AI is termed a semantic network <ref> [86, 27, 17] </ref>, while equivalent model in SE is the object model with attribute definition [79, 15, 16, 14]. Most work in simulation, concerning concept models, has been performed along the lines of model specifications [59, 68] and the system entity structure [89, 92].
Reference: [28] <author> Fishwick, P. A. </author> <title> Hierarchical Reasoning: Simulating Complex Processes over Multiple Levels of Abstraction. </title> <type> PhD thesis, </type> <institution> University of Pennsylvania, </institution> <year> 1986. </year>
Reference-contexts: One may combine these forms to synthesize heterogeneous models where model graph nodes may be of different types. Finally, the multimodel [33, 57, 37] is the most comprehensive type of model that supports multiple models tied together with homomorphic mappings from one model to another <ref> [28] </ref>. The multimodel approach is a generalization of combined simulation modelling [18, 71] where models may be of many different types | not just a mixture of discrete event and continuous components. The proposed taxonomy is an extension to the object oriented modelling paradigm. <p> By coupling functions or states, and by making networks and hierarchies we can simplify the overall model organization. We will call one model an "abstraction level" or a "perspective." Abstraction levels are discussed by many researchers in SE [58], AI [82] and simulation <ref> [28, 29] </ref>.
Reference: [29] <author> Fishwick, P. A. </author> <title> The Role of Process Abstraction in Simulation. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics 18, </journal> <volume> 1 (January/February 1988), 18 - 39. </volume> <booktitle> CIS TR92-006 TBP: ACM Transactions on Modeling & Computer Simulation, V2, </booktitle> <pages> N4 24 </pages>
Reference-contexts: By coupling functions or states, and by making networks and hierarchies we can simplify the overall model organization. We will call one model an "abstraction level" or a "perspective." Abstraction levels are discussed by many researchers in SE [58], AI [82] and simulation <ref> [28, 29] </ref>. <p> Models at varying levels of abstraction <ref> [29] </ref> are created in response to the questions asked of them [37]. 6 Functional Models We will use a liberal interpretation of the word "functional" to include modelling approaches that stress procedural or "process-oriented" models [34].
Reference: [30] <author> Fishwick, P. A. </author> <title> Qualitative Methodology in Simulation Model Engineering. </title> <journal> Simulation Journal 52, </journal> <month> 3 (March </month> <year> 1989), </year> <pages> 95 - 101. </pages>
Reference-contexts: Software engineers have developed a keen interest in simulation; there is an apparent convergence between these two areas [76, 68, 7, 8, 61, 45, 46]. Some of our previous research <ref> [31, 30, 32, 37] </ref> has suggested the study of model engineering as a direct analog to software engineering. Within the simulation community, Zeigler presents a theory for mod-elling autonomous agents [92] while implementing a model engineering methodology.
Reference: [31] <author> Fishwick, P. A. </author> <title> Studying how Models Evolve: An Emphasis on Simulation Model Engineering. </title> <booktitle> In Advances in AI and Simulation (Tampa, </booktitle> <address> FL, </address> <year> 1989), </year> <pages> pp. 74 - 79. </pages>
Reference-contexts: Software engineers have developed a keen interest in simulation; there is an apparent convergence between these two areas [76, 68, 7, 8, 61, 45, 46]. Some of our previous research <ref> [31, 30, 32, 37] </ref> has suggested the study of model engineering as a direct analog to software engineering. Within the simulation community, Zeigler presents a theory for mod-elling autonomous agents [92] while implementing a model engineering methodology.
Reference: [32] <author> Fishwick, P. A. </author> <title> Toward an Integrated Approach to Simulation Model Engineering. </title> <journal> International Journal of General Systems 17, </journal> <month> 1 (May </month> <year> 1990), </year> <pages> 1 - 19. </pages>
Reference-contexts: Software engineers have developed a keen interest in simulation; there is an apparent convergence between these two areas [76, 68, 7, 8, 61, 45, 46]. Some of our previous research <ref> [31, 30, 32, 37] </ref> has suggested the study of model engineering as a direct analog to software engineering. Within the simulation community, Zeigler presents a theory for mod-elling autonomous agents [92] while implementing a model engineering methodology.
Reference: [33] <author> Fishwick, P. A. </author> <title> Heterogeneous Decomposition and Coupling for Combined Modeling. </title> <booktitle> In 1991 Winter Simulation Conference (Phoenix, </booktitle> <address> AZ, </address> <month> December </month> <year> 1991), </year> <pages> pp. 1199 - 1208. </pages>
Reference-contexts: Functional programming languages concentrate on functional composition while de-emphasizing side effects 2 . One may combine these forms to synthesize heterogeneous models where model graph nodes may be of different types. Finally, the multimodel <ref> [33, 57, 37] </ref> is the most comprehensive type of model that supports multiple models tied together with homomorphic mappings from one model to another [28]. <p> as well as asking fundamentally interesting historical questions such as "What are the causes or catalysts aiding in the relatively recent convergence in AI, SE and simulation modelling?" and "How, precisely, will modellers and decision makers benefit in this convergence?" The integrated style is being used by several simulation researchers <ref> [92, 60, 78, 66, 33, 3] </ref>; however, it has not yet penetrated the general simulation textbook literature as a more powerful paradigm for modelling dynamical systems. <p> Recently, AI researchers such as Addanki [2] and Forbus [39, 40] have also performed research dealing with multiple models. Each level or segment of a multimodel can be represented by a different type of model; By permitting different types <ref> [33] </ref> of models, we create a more flexible modelling environment where each level is represented by its most appropriate form. <p> This necessitates a formal partitioning of a more complex state space CIS TR92-006 TBP: ACM Transactions on Modeling & Computer Simulation, V2, N4 20 as described in <ref> [33, 37] </ref>, and we must also carefully define the level traversal semantics so that the transition among phases is well-defined. as we proceed down the figure, we use more powerful refinment techniques. The topmost two levels represents a homogeneous refinement [33] which is common in most model languages. <p> The topmost two levels represents a homogeneous refinement <ref> [33] </ref> which is common in most model languages. In this case, we have taken a single function and hierarchically decomposed it into 4 sub-functions. The breakdown is "homogeneous" since each level uses the same type of model | functional block. The dynamics of J ugA is performed by an FSA.
Reference: [34] <author> Fishwick, P. A. </author> <title> A Functional/Declarative Dichotomy for Characterizing Simulation Models. In AI, Simulation and Planning in High Autonomy Systems (Perth, </title> <address> Australia, 1992), </address> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 102 - 109. </pages>
Reference-contexts: Models at varying levels of abstraction [29] are created in response to the questions asked of them [37]. 6 Functional Models We will use a liberal interpretation of the word "functional" to include modelling approaches that stress procedural or "process-oriented" models <ref> [34] </ref>. A purely functional model is termed "memoryless" since there is no state information; so we define a functional model as one that focuses on "function" rather than state to state transition.
Reference: [35] <author> Fishwick, P. A. </author> <title> Computer Simulation Modeling: Methodology, Algorithms and Programs. </title> <note> 1992. (to be published as a textbook in early 1993). </note>
Reference-contexts: Normally the state has a structure of an n-tuple: fs 1 ; s 2 ; : : : ; s n g however, it is best generalized as a data structure | a tuple being one type of data structure. Superstates provide flexibility in describing some model forms <ref> [35] </ref>. A superstate is a subset of a state, therefore, "goal" is the subset of the hockey puck state representing the geometrical region where the goal net is located 3 . A pair consisting of a time and a state (t; s) where s 2 Q is called an event.
Reference: [36] <author> Fishwick, P. A., and Modjeski, R. B., Eds. </author> <title> Knowledge Based Simulation: Methodology and Application. </title> <publisher> Springer Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Often, the decision making is heuristically based, and there is incomplete knowledge about the domain [56]. This "incompleteness" should be programmed into the dynamical model where it is present. For the past decade, the interface area between AI and simulation has grown, and several papers and texts have appeared <ref> [63, 64, 84, 36, 43] </ref>.
Reference: [37] <author> Fishwick, P. A., and Zeigler, B. P. </author> <title> A Multimodel Methodology for Qualitative Model Engineering. </title> <booktitle> ACM Transactions on Modeling and Computer Simulation 2, </booktitle> <month> 1 </month> <year> (1992). </year>
Reference-contexts: Functional programming languages concentrate on functional composition while de-emphasizing side effects 2 . One may combine these forms to synthesize heterogeneous models where model graph nodes may be of different types. Finally, the multimodel <ref> [33, 57, 37] </ref> is the most comprehensive type of model that supports multiple models tied together with homomorphic mappings from one model to another [28]. <p> Software engineers have developed a keen interest in simulation; there is an apparent convergence between these two areas [76, 68, 7, 8, 61, 45, 46]. Some of our previous research <ref> [31, 30, 32, 37] </ref> has suggested the study of model engineering as a direct analog to software engineering. Within the simulation community, Zeigler presents a theory for mod-elling autonomous agents [92] while implementing a model engineering methodology. <p> Models at varying levels of abstraction [29] are created in response to the questions asked of them <ref> [37] </ref>. 6 Functional Models We will use a liberal interpretation of the word "functional" to include modelling approaches that stress procedural or "process-oriented" models [34]. <p> The purpose of a multimodel is to have a unifying system representation that contains many different levels of abstraction and perspective views within the system. Within the simulation field, the term multimodel was introduced by Oren [67] and subsequently refined by Fishwick and Zeigler <ref> [37] </ref>. Recently, AI researchers such as Addanki [2] and Forbus [39, 40] have also performed research dealing with multiple models. <p> This necessitates a formal partitioning of a more complex state space CIS TR92-006 TBP: ACM Transactions on Modeling & Computer Simulation, V2, N4 20 as described in <ref> [33, 37] </ref>, and we must also carefully define the level traversal semantics so that the transition among phases is well-defined. as we proceed down the figure, we use more powerful refinment techniques. The topmost two levels represents a homogeneous refinement [33] which is common in most model languages.
Reference: [38] <author> Flood, R. L., and Carson, E. R. </author> <title> Dealing with Complexity: An Introduction to the Theory and Application of Systems Science. </title> <publisher> Plenum Press, </publisher> <year> 1988. </year>
Reference-contexts: Most work in simulation, concerning concept models, has been performed along the lines of model specifications [59, 68] and the system entity structure [89, 92]. Since simulation has its formal roots in systems theory and science, we find work relating to conceptual modelling in these areas as well <ref> [20, 52, 38] </ref>. The semantic network, even though it can serve as a rough cut of a simulation model, was often built as an end in itself, or to facilitate qualitative reasoning via link traversal. Semantic networks are traversed to answer simple questions about a system.
Reference: [39] <author> Forbus, K. </author> <title> Qualitative Physics: Past, Present and Future. </title> <booktitle> In Exploring Artificial Intelligence, </booktitle> <editor> H. Shrobe, Ed. </editor> <publisher> Morgan Kaufmann, </publisher> <year> 1988, </year> <pages> pp. </pages> <address> 239 -296. </address>
Reference-contexts: Within the simulation field, the term multimodel was introduced by Oren [67] and subsequently refined by Fishwick and Zeigler [37]. Recently, AI researchers such as Addanki [2] and Forbus <ref> [39, 40] </ref> have also performed research dealing with multiple models. Each level or segment of a multimodel can be represented by a different type of model; By permitting different types [33] of models, we create a more flexible modelling environment where each level is represented by its most appropriate form.
Reference: [40] <author> Forbus, K. D., and Falkenhainer, B. </author> <title> Self-Explanatory Simulations: An Integration of Qualitative and Quantitative Knowledge. </title> <booktitle> In AAAI (1990), </booktitle> <pages> pp. 380 - 387. </pages>
Reference-contexts: Within the simulation field, the term multimodel was introduced by Oren [67] and subsequently refined by Fishwick and Zeigler [37]. Recently, AI researchers such as Addanki [2] and Forbus <ref> [39, 40] </ref> have also performed research dealing with multiple models. Each level or segment of a multimodel can be represented by a different type of model; By permitting different types [33] of models, we create a more flexible modelling environment where each level is represented by its most appropriate form.
Reference: [41] <author> Forrester, J. W. </author> <title> Urban Dynamics. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1969. </year>
Reference-contexts: The area of Systems Dynamics <ref> [42, 41, 74, 75] </ref> focuses, not only on the formalism for a dynamic model but also, on several key steps during the model building process: 1) causal model without signed information, 2) causal model with signed arcs and loops, 3) flow graph, and finally 4) equations (or program).
Reference: [42] <author> Forrester, J. W. </author> <title> World Dynamics. </title> <publisher> Wright-Allen Press, </publisher> <year> 1971. </year>
Reference-contexts: The area of Systems Dynamics <ref> [42, 41, 74, 75] </ref> focuses, not only on the formalism for a dynamic model but also, on several key steps during the model building process: 1) causal model without signed information, 2) causal model with signed arcs and loops, 3) flow graph, and finally 4) equations (or program).
Reference: [43] <author> Futo, I., and Gergely, T. </author> <booktitle> Artificial Intelligence in Simulation. </booktitle> <publisher> Ellis Horwood Limited/John Wiley and Sons, </publisher> <year> 1990. </year>
Reference-contexts: Often, the decision making is heuristically based, and there is incomplete knowledge about the domain [56]. This "incompleteness" should be programmed into the dynamical model where it is present. For the past decade, the interface area between AI and simulation has grown, and several papers and texts have appeared <ref> [63, 64, 84, 36, 43] </ref>.
Reference: [44] <author> Harel, D. </author> <title> On Visual Formalisms. </title> <journal> Communications of the ACM 31, </journal> <month> 5 (May </month> <year> 1988), </year> <pages> 514 - 530. </pages>
Reference-contexts: The FSA and Markov models in simulation are the most basic declarative model types. 4 In SE, the state transition model is termed the "dynamic" or "state" model. Harel <ref> [44] </ref> extends the basic state model to form state charts containing embedded hierarchies of FSA levels.
Reference: [45] <author> Harel, D. STATEMATE: </author> <title> A Working Environment for the Development of Complex Reactive Systems. </title> <journal> IEEE Transactions on Software Engineering 16, </journal> <month> 3 (April </month> <year> 1990), </year> <title> 403 - 414. </title> <journal> CIS TR92-006 TBP: ACM Transactions on Modeling & Computer Simulation, V2, </journal> <volume> N4 25 </volume>
Reference-contexts: Software engineers have developed a keen interest in simulation; there is an apparent convergence between these two areas <ref> [76, 68, 7, 8, 61, 45, 46] </ref>. Some of our previous research [31, 30, 32, 37] has suggested the study of model engineering as a direct analog to software engineering. Within the simulation community, Zeigler presents a theory for mod-elling autonomous agents [92] while implementing a model engineering methodology.
Reference: [46] <author> Harel, D. </author> <title> Biting the Silver Bullet: Toward a Brighter Future for System Development. </title> <booktitle> IEEE Computer 25, </booktitle> <month> 1 (January </month> <year> 1992), </year> <pages> 8 - 20. </pages>
Reference-contexts: Software engineers have developed a keen interest in simulation; there is an apparent convergence between these two areas <ref> [76, 68, 7, 8, 61, 45, 46] </ref>. Some of our previous research [31, 30, 32, 37] has suggested the study of model engineering as a direct analog to software engineering. Within the simulation community, Zeigler presents a theory for mod-elling autonomous agents [92] while implementing a model engineering methodology.
Reference: [47] <author> Heintze, N., Jaffar, J., Michaylov, S., Stuckey, P., and Yap, R. </author> <title> The CLP(R) Programmer's Manual: </title> <note> Version 1.1, </note> <month> November </month> <year> 1991. </year>
Reference-contexts: For instance, if Q = X 1 fi X 2 for a two dimensional hockey rink then the goal net location could be specified by the constraint f (X; Y )jY 10g. Logic programming and, especially, constraint based programming <ref> [55, 47] </ref> typify the declarative approach to modelling using state space partitions to create superstates. The production system, constraint and logic approaches utilize unification and pattern matching to afford declarative methods the capability of representing complex behaviors with a modicum of mathematical notation.
Reference: [48] <author> Henderson, P. </author> <title> Functional Programming: Application and Implementation. </title> <publisher> Prentice Hall International, </publisher> <year> 1980. </year>
Reference-contexts: Declarative models emphasize state transitions, while functional models emphasize operational or event oriented modelling. Declarative and functional model forms are prevalent in all three disciplines. For instance, programming languages are often categorized into either declarative [1, 49] or functional <ref> [48, 6] </ref> types. The declarative programming languages (such as Prolog) emphasize changes in state where "states" are best coded as particular data structures | a simple variable being the most commonly used form for a state. Functional programming languages concentrate on functional composition while de-emphasizing side effects 2 .
Reference: [49] <author> Hogger, C. J. </author> <title> Essentials of Logic Programming. </title> <publisher> Oxford University Press, </publisher> <year> 1990. </year>
Reference-contexts: Declarative models emphasize state transitions, while functional models emphasize operational or event oriented modelling. Declarative and functional model forms are prevalent in all three disciplines. For instance, programming languages are often categorized into either declarative <ref> [1, 49] </ref> or functional [48, 6] types. The declarative programming languages (such as Prolog) emphasize changes in state where "states" are best coded as particular data structures | a simple variable being the most commonly used form for a state.
Reference: [50] <author> Hopcroft, J. E., and Ullman, J. D. </author> <title> Introduction to Automata Theory, Languages and Computation. </title> <publisher> Addison Wesley, </publisher> <year> 1979. </year>
Reference-contexts: The input to the function box is the same input referred to on the FSA arc labels; the output from the box is the same as the FSA output represented using either the Moore or Mealy <ref> [50] </ref> conventions. * A functional block model captures system dynamics from a functional or procedural perspective rather than the declarative form of the FSA. In most functional models [69], the only representation of state is the one in the integrator and delay blocks.
Reference: [51] <author> Kalman, R. E., Falb, P. L., and Arbib, M. A. </author> <title> Topics in Mathematical Systems Theory. </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1962. </year>
Reference-contexts: Given this view, simulation is the process of creating abstract versions of programs; the final most detailed simulation is simply the executable program. 3 Terminology 3.1 Using Systems Theory as a Starting Point For the fundamental building primitives comprising models that represent time-dependent system behavior, we have found systems theory <ref> [69, 87, 52, 51] </ref> to provide the most mathematically consistent foundation. Systems theory has developed since the early 1960s into a field that made precise the core components of "systems" regardless of the specific discipline (i.e., computer science, biology, chemistry, physics, operations research) [12, 4].
Reference: [52] <author> Klir, G. J. </author> <title> Architecture of Systems Problem Solving. </title> <publisher> Plenum Press, </publisher> <year> 1985. </year>
Reference-contexts: Given this view, simulation is the process of creating abstract versions of programs; the final most detailed simulation is simply the executable program. 3 Terminology 3.1 Using Systems Theory as a Starting Point For the fundamental building primitives comprising models that represent time-dependent system behavior, we have found systems theory <ref> [69, 87, 52, 51] </ref> to provide the most mathematically consistent foundation. Systems theory has developed since the early 1960s into a field that made precise the core components of "systems" regardless of the specific discipline (i.e., computer science, biology, chemistry, physics, operations research) [12, 4]. <p> Most work in simulation, concerning concept models, has been performed along the lines of model specifications [59, 68] and the system entity structure [89, 92]. Since simulation has its formal roots in systems theory and science, we find work relating to conceptual modelling in these areas as well <ref> [20, 52, 38] </ref>. The semantic network, even though it can serve as a rough cut of a simulation model, was often built as an end in itself, or to facilitate qualitative reasoning via link traversal. Semantic networks are traversed to answer simple questions about a system.
Reference: [53] <author> Kowalski, R. </author> <title> Logic for Problem Solving. </title> <publisher> Elsevier North Holland, </publisher> <year> 1979. </year>
Reference-contexts: Our approach is similar to object oriented design principles espoused in SE: begin with an object representation and then produce declarative and functional model types. Let's consider the water jug problem in AI <ref> [53, 73] </ref>. In the water jug problem, there are two water jugs (one with a three gallon capacity, and the other with four gallons). Jug A is the three gallon jug and jug B is the four gallon jug (see figure 2).
Reference: [54] <author> Law, A. M., and Kelton, D. W. </author> <title> Simulation Modeling & Analysis. </title> <publisher> McGraw Hill, </publisher> <year> 1991. </year> <note> Second edition. </note>
Reference-contexts: Our emphasis is on modelling methodology [89, 65, 66, 25, 24] rather than analysis methodology. Methodology in analysis has received a much more comprehensive treatment in the general simulation literature <ref> [54, 9] </ref> as compared with methodology in modelling.
Reference: [55] <author> Leler, W. </author> <title> Constraint Programming Languages: Their Specification and Generation. </title> <publisher> Addison Wesley, </publisher> <year> 1988. </year>
Reference-contexts: For instance, if Q = X 1 fi X 2 for a two dimensional hockey rink then the goal net location could be specified by the constraint f (X; Y )jY 10g. Logic programming and, especially, constraint based programming <ref> [55, 47] </ref> typify the declarative approach to modelling using state space partitions to create superstates. The production system, constraint and logic approaches utilize unification and pattern matching to afford declarative methods the capability of representing complex behaviors with a modicum of mathematical notation.
Reference: [56] <author> Miller, D. P., Rothenberg, J., Franke, D. W., Fishwick, P. A., and Firby, R. J. </author> <title> AI: What Simulationists Really Need to Know. </title> <booktitle> In 1990 Winter Simulation Conference (New Orleans, </booktitle> <address> LA, </address> <month> December </month> <year> 1990), </year> <pages> pp. 204 - 209. </pages>
Reference-contexts: Often, the decision making is heuristically based, and there is incomplete knowledge about the domain <ref> [56] </ref>. This "incompleteness" should be programmed into the dynamical model where it is present. For the past decade, the interface area between AI and simulation has grown, and several papers and texts have appeared [63, 64, 84, 36, 43].
Reference: [57] <author> Miller, V. T., and Fishwick, P. A. </author> <title> Heterogeneous Hierarchical Models. </title> <booktitle> In Artificial Intelligence X: Knowledge Based Systems (Orlando, </booktitle> <address> FL, </address> <month> April </month> <year> 1992), </year> <pages> SPIE. </pages>
Reference-contexts: Functional programming languages concentrate on functional composition while de-emphasizing side effects 2 . One may combine these forms to synthesize heterogeneous models where model graph nodes may be of different types. Finally, the multimodel <ref> [33, 57, 37] </ref> is the most comprehensive type of model that supports multiple models tied together with homomorphic mappings from one model to another [28].
Reference: [58] <author> Mills, H. D. </author> <title> Stepwise Refinement and Verification in Box-Structured Systems. </title> <booktitle> IEEE Computer 21, </booktitle> <month> 6 (June </month> <year> 1988), </year> <pages> 23 - 36. </pages>
Reference-contexts: By coupling functions or states, and by making networks and hierarchies we can simplify the overall model organization. We will call one model an "abstraction level" or a "perspective." Abstraction levels are discussed by many researchers in SE <ref> [58] </ref>, AI [82] and simulation [28, 29]. <p> Inputs and outputs can represent data flows or control flows, and they are defined as such within SE [5]. From our perspective, these flows are all data flows regardless of whether a function treats its input data from a control perspective. The functional SE box structuring techniques of Mills <ref> [58] </ref> bear remarkable resemblance to those of systems and simulation theory [69, 88]. This further demonstrates a convergence in model theory between SE and simulation. If we consider each tap and each jug to be a function then we can create a functional block model illustrated in figure 9.
Reference: [59] <author> Nance, R. E. </author> <title> The Time and State Relationships in Simulation Modeling. </title> <journal> Communications of the ACM 24, </journal> <month> 4 (April </month> <year> 1981), </year> <pages> 173 - 179. </pages>
Reference-contexts: The concept model in AI is termed a semantic network [86, 27, 17], while equivalent model in SE is the object model with attribute definition [79, 15, 16, 14]. Most work in simulation, concerning concept models, has been performed along the lines of model specifications <ref> [59, 68] </ref> and the system entity structure [89, 92]. Since simulation has its formal roots in systems theory and science, we find work relating to conceptual modelling in these areas as well [20, 52, 38].
Reference: [60] <author> Nance, R. E. </author> <title> A Conical Methodology: A Framework for Simulation Model Development. </title> <booktitle> In Conference on Methodology and Validation (San Diego, </booktitle> <address> CA., </address> <month> April </month> <year> 1987), </year> <booktitle> Society for Computer Simulation, </booktitle> <pages> pp. 38 - 43. </pages>
Reference-contexts: as well as asking fundamentally interesting historical questions such as "What are the causes or catalysts aiding in the relatively recent convergence in AI, SE and simulation modelling?" and "How, precisely, will modellers and decision makers benefit in this convergence?" The integrated style is being used by several simulation researchers <ref> [92, 60, 78, 66, 33, 3] </ref>; however, it has not yet penetrated the general simulation textbook literature as a more powerful paradigm for modelling dynamical systems.
Reference: [61] <author> Nance, R. E. </author> <title> Modeling and Programming: An Evolutionary Convergence, </title> <month> April </month> <year> 1988. </year> <note> Unpublished overheads requested from author. </note>
Reference-contexts: Software engineers have developed a keen interest in simulation; there is an apparent convergence between these two areas <ref> [76, 68, 7, 8, 61, 45, 46] </ref>. Some of our previous research [31, 30, 32, 37] has suggested the study of model engineering as a direct analog to software engineering. Within the simulation community, Zeigler presents a theory for mod-elling autonomous agents [92] while implementing a model engineering methodology.
Reference: [62] <author> Narain, S., and Rothenberg, J. </author> <title> Qualitative modeling using the causality relation. </title> <booktitle> Transactions of the Society for Computer Simulation 7, 3 (1990), </booktitle> <volume> 265 - 289. </volume> <booktitle> CIS TR92-006 TBP: ACM Transactions on Modeling & Computer Simulation, V2, </booktitle> <pages> N4 26 </pages>
Reference-contexts: On the other hand, simulation literature is relatively weak in its use of logic and in its emphasis on correct programs implementing models; however, recently there has been renewed interest within the use of logic to both verify and simulate models <ref> [62] </ref>. 3.2 The Generic Model Structure A deterministic system &lt; T; U; Y; Q; ; ffi; &gt; within classical systems theory [69] is defined as follows: * T is the time set.
Reference: [63] <author> Nielsen, N. R. </author> <title> Applications of AI Techniques to Simulation. In Knowledge Based Simulation: Methodology and Application, </title> <editor> P. Fishwick and R. Modjeski, Eds. </editor> <publisher> Springer Verlag, </publisher> <year> 1991, </year> <pages> pp. 1 - 19. </pages>
Reference-contexts: Often, the decision making is heuristically based, and there is incomplete knowledge about the domain [56]. This "incompleteness" should be programmed into the dynamical model where it is present. For the past decade, the interface area between AI and simulation has grown, and several papers and texts have appeared <ref> [63, 64, 84, 36, 43] </ref>.
Reference: [64] <author> O'Keefe, R. M. </author> <booktitle> The Role of Artificial Intelligence in Discrete Event Simulation. In Artificial Intelligence, Simulation & Modeling, </booktitle> <editor> L. E. Widman, K. A. Loparo, and N. R. Nielsen, Eds. </editor> <publisher> John Wiley and Sons, </publisher> <year> 1989, </year> <pages> pp. 359 - 379. </pages>
Reference-contexts: Often, the decision making is heuristically based, and there is incomplete knowledge about the domain [56]. This "incompleteness" should be programmed into the dynamical model where it is present. For the past decade, the interface area between AI and simulation has grown, and several papers and texts have appeared <ref> [63, 64, 84, 36, 43] </ref>.
Reference: [65] <author> Oren, T. I. </author> <title> Model-Based Activities: A Paradigm Shift. In Simulation and Model-Based Methodologies: An Integrative View, </title> <editor> T. I. Oren, B. P. Zeigler, and E. M. S., Eds. </editor> <publisher> Springer Verlag, </publisher> <year> 1984, </year> <pages> pp. 3 - 40. </pages>
Reference-contexts: Our emphasis is on modelling methodology <ref> [89, 65, 66, 25, 24] </ref> rather than analysis methodology. Methodology in analysis has received a much more comprehensive treatment in the general simulation literature [54, 9] as compared with methodology in modelling.
Reference: [66] <author> Oren, T. I. </author> <title> Simulation: Taxonomy. In Systems and Control Encyclopedia, </title> <editor> M. G. Singh, Ed. </editor> <publisher> Pergammon Press, </publisher> <year> 1987, </year> <pages> pp. 4411 - 4414. </pages>
Reference-contexts: Our emphasis is on modelling methodology <ref> [89, 65, 66, 25, 24] </ref> rather than analysis methodology. Methodology in analysis has received a much more comprehensive treatment in the general simulation literature [54, 9] as compared with methodology in modelling. <p> as well as asking fundamentally interesting historical questions such as "What are the causes or catalysts aiding in the relatively recent convergence in AI, SE and simulation modelling?" and "How, precisely, will modellers and decision makers benefit in this convergence?" The integrated style is being used by several simulation researchers <ref> [92, 60, 78, 66, 33, 3] </ref>; however, it has not yet penetrated the general simulation textbook literature as a more powerful paradigm for modelling dynamical systems.
Reference: [67] <author> Oren, T. I. </author> <title> Dynamic Templates and Semantic Rules for Simulation Advisors and Certifiers. In Knowledge Based Simulation: Methodology and Application, </title> <editor> P. Fishwick and R. Modjeski, Eds. </editor> <publisher> Springer Verlag, </publisher> <year> 1991, </year> <pages> pp. 53 - 76. </pages>
Reference-contexts: The purpose of a multimodel is to have a unifying system representation that contains many different levels of abstraction and perspective views within the system. Within the simulation field, the term multimodel was introduced by Oren <ref> [67] </ref> and subsequently refined by Fishwick and Zeigler [37]. Recently, AI researchers such as Addanki [2] and Forbus [39, 40] have also performed research dealing with multiple models.
Reference: [68] <author> Overstreet, C. M., and Nance, R. E. </author> <title> A Specification Language to Assist in Analysis of Discrete Event Simulation Models. </title> <journal> Communications of the ACM 28, </journal> <note> 2 (February 1985), 190 - 201. </note>
Reference-contexts: Software engineers have developed a keen interest in simulation; there is an apparent convergence between these two areas <ref> [76, 68, 7, 8, 61, 45, 46] </ref>. Some of our previous research [31, 30, 32, 37] has suggested the study of model engineering as a direct analog to software engineering. Within the simulation community, Zeigler presents a theory for mod-elling autonomous agents [92] while implementing a model engineering methodology. <p> The concept model in AI is termed a semantic network [86, 27, 17], while equivalent model in SE is the object model with attribute definition [79, 15, 16, 14]. Most work in simulation, concerning concept models, has been performed along the lines of model specifications <ref> [59, 68] </ref> and the system entity structure [89, 92]. Since simulation has its formal roots in systems theory and science, we find work relating to conceptual modelling in these areas as well [20, 52, 38].
Reference: [69] <author> Padulo, L., and Arbib, M. A. </author> <title> Systems Theory: A Unified State Space Approach to Continuous and Discrete Systems. </title> <editor> W. B. </editor> <publisher> Saunders, </publisher> <address> Philadelphia, PA, </address> <year> 1974. </year>
Reference-contexts: Given this view, simulation is the process of creating abstract versions of programs; the final most detailed simulation is simply the executable program. 3 Terminology 3.1 Using Systems Theory as a Starting Point For the fundamental building primitives comprising models that represent time-dependent system behavior, we have found systems theory <ref> [69, 87, 52, 51] </ref> to provide the most mathematically consistent foundation. Systems theory has developed since the early 1960s into a field that made precise the core components of "systems" regardless of the specific discipline (i.e., computer science, biology, chemistry, physics, operations research) [12, 4]. <p> of logic and in its emphasis on correct programs implementing models; however, recently there has been renewed interest within the use of logic to both verify and simulate models [62]. 3.2 The Generic Model Structure A deterministic system &lt; T; U; Y; Q; ; ffi; &gt; within classical systems theory <ref> [69] </ref> is defined as follows: * T is the time set. For continuous systems [19], T = R (reals), and for discrete time systems, T = Z (integers). * U is the input set containing the possible values of the input to the system. * Y is the output set. <p> From our perspective, these flows are all data flows regardless of whether a function treats its input data from a control perspective. The functional SE box structuring techniques of Mills [58] bear remarkable resemblance to those of systems and simulation theory <ref> [69, 88] </ref>. This further demonstrates a convergence in model theory between SE and simulation. If we consider each tap and each jug to be a function then we can create a functional block model illustrated in figure 9. <p> In most functional models <ref> [69] </ref>, the only representation of state is the one in the integrator and delay blocks. For instance, an integrator functional block using a single step approach keeps track of the last value for a state variable.
Reference: [70] <author> Peterson, J. L. </author> <title> Petri Net Theory and the Modeling of Systems. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1981. </year>
Reference-contexts: System Dynamics models [74] and block models, for instance have functional orientations. The term "dichotomy" is used somewhat loosely, though, since there exist several kinds of modelling methods such as Petri nets <ref> [70] </ref> that have equal shares of declarative (i.e., place) and functional (i.e., transition) sub-representations. We first overview why we chose these two categories in our attempt to synthesize system modelling techniques in AI, SE and simulation.
Reference: [71] <author> Praehofer, H. </author> <title> System Theoretic Foundations for Combined Discrete-Continuous System Simulation. </title> <type> PhD thesis, </type> <institution> Johannes Kepler University of Linz, </institution> <year> 1991. </year>
Reference-contexts: Finally, the multimodel [33, 57, 37] is the most comprehensive type of model that supports multiple models tied together with homomorphic mappings from one model to another [28]. The multimodel approach is a generalization of combined simulation modelling <ref> [18, 71] </ref> where models may be of many different types | not just a mixture of discrete event and continuous components. The proposed taxonomy is an extension to the object oriented modelling paradigm.
Reference: [72] <author> Pressman, R. S. </author> <title> Software Engineering: A Practitioner's Approach. </title> <publisher> McGraw Hill, </publisher> <year> 1992. </year>
Reference-contexts: Within the simulation community, Zeigler presents a theory for mod-elling autonomous agents [92] while implementing a model engineering methodology. The historical reason for the convergence of the SE and simulation fields lies in the area of distributed and real-time design <ref> [72] </ref> and computing. Technology has seen the computer decrease in size and cost while increasing in power. This combination of circumstances naturally leads to the use of computers in almost every electro-mechanical device.
Reference: [73] <author> Rich, E., and Knight, K. </author> <booktitle> Artificial Intelligence. </booktitle> <publisher> McGraw-Hill, </publisher> <year> 1991. </year>
Reference-contexts: Our approach is similar to object oriented design principles espoused in SE: begin with an object representation and then produce declarative and functional model types. Let's consider the water jug problem in AI <ref> [53, 73] </ref>. In the water jug problem, there are two water jugs (one with a three gallon capacity, and the other with four gallons). Jug A is the three gallon jug and jug B is the four gallon jug (see figure 2).
Reference: [74] <author> Richardson, G. P., and Pugh, A. L. </author> <title> Introduction to System Dynamics Modeling with DYNAMO. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1981. </year>
Reference-contexts: Two key aspects of the view shown in fig. 1 are the declarative versus the functional perspectives. These two modelling views form a dichotomy in that most modelling methods in simulation are oriented toward one view rather than the other. System Dynamics models <ref> [74] </ref> and block models, for instance have functional orientations. The term "dichotomy" is used somewhat loosely, though, since there exist several kinds of modelling methods such as Petri nets [70] that have equal shares of declarative (i.e., place) and functional (i.e., transition) sub-representations. <p> The area of Systems Dynamics <ref> [42, 41, 74, 75] </ref> focuses, not only on the formalism for a dynamic model but also, on several key steps during the model building process: 1) causal model without signed information, 2) causal model with signed arcs and loops, 3) flow graph, and finally 4) equations (or program).
Reference: [75] <author> Roberts, N., Andersen, D., Deal, R., Garet, M., and Shaffer, W. </author> <title> Introduction to Computer Simulation: A Systems Dynamics Approach. </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year>
Reference-contexts: The area of Systems Dynamics <ref> [42, 41, 74, 75] </ref> focuses, not only on the formalism for a dynamic model but also, on several key steps during the model building process: 1) causal model without signed information, 2) causal model with signed arcs and loops, 3) flow graph, and finally 4) equations (or program).
Reference: [76] <author> Rothenberg, J. </author> <title> Object-Oriented Simulation: Where do we go from here? Tech. </title> <type> rep., </type> <institution> RAND Corporation, </institution> <month> October </month> <year> 1989. </year>
Reference-contexts: Software engineers have developed a keen interest in simulation; there is an apparent convergence between these two areas <ref> [76, 68, 7, 8, 61, 45, 46] </ref>. Some of our previous research [31, 30, 32, 37] has suggested the study of model engineering as a direct analog to software engineering. Within the simulation community, Zeigler presents a theory for mod-elling autonomous agents [92] while implementing a model engineering methodology.
Reference: [77] <author> Rothenberg, J. </author> <title> Knowledge-Based Simulation at the RAND Corporation. In Knowledge Based Simulation: Methodology and Application, </title> <editor> P. Fishwick and R. Modjeski, Eds. </editor> <publisher> Springer Verlag, </publisher> <year> 1991, </year> <pages> pp. 133 - 161. </pages> <booktitle> CIS TR92-006 TBP: ACM Transactions on Modeling & Computer Simulation, V2, </booktitle> <pages> N4 27 </pages>
Reference-contexts: "predict when object XYZ reaches point B" or "give the mean idle time for the cashier." It would also be useful for simulationists to be able to ask more abstract questions about a system, and furthermore, to obtain abstract answers that serve in forming a causal explanation of system behavior <ref> [77] </ref>.
Reference: [78] <author> Rozenblit, J. W., and Zeigler, B. P. </author> <title> Knowledge-Based Simulation and Design Methodology: A Flexible Test Architecture Application. </title> <booktitle> Transactions of the Society for Computer Simulation 7, </booktitle> <month> 3 </month> <year> (1990). </year>
Reference-contexts: as well as asking fundamentally interesting historical questions such as "What are the causes or catalysts aiding in the relatively recent convergence in AI, SE and simulation modelling?" and "How, precisely, will modellers and decision makers benefit in this convergence?" The integrated style is being used by several simulation researchers <ref> [92, 60, 78, 66, 33, 3] </ref>; however, it has not yet penetrated the general simulation textbook literature as a more powerful paradigm for modelling dynamical systems.
Reference: [79] <author> Rumbaugh, J., Blaha, M., Premerlani, W., Frederick, E., and Lorenson, W. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: CIS TR92-006 TBP: ACM Transactions on Modeling & Computer Simulation, V2, N4 4 when introducing how additional modelling techniques such as production systems, track-based animation and System Dynamics fit within the overall framework. In the usual object oriented modelling approach within SE <ref> [79, 16] </ref>, specific modelling methods such as FSA modelling and DFDs are promoted. We treat these two types of models as instances of a class rather than a class by itself. Our approach is to stress the utility of having functional and declarative classes of models. <p> From such a model, we can gradually progress to more system theoretic constructs. The concept model in AI is termed a semantic network [86, 27, 17], while equivalent model in SE is the object model with attribute definition <ref> [79, 15, 16, 14] </ref>. Most work in simulation, concerning concept models, has been performed along the lines of model specifications [59, 68] and the system entity structure [89, 92]. <p> There are three basic operations that can be performed in this system: emptying a jug, filling a jug, or transferring water from one jug to the other. A concept model can be created by concentrating on key objects, concepts and actions within the system. Rumbaugh et al. <ref> [79] </ref> present a useful checklist for deriving the object model: 1. Identify objects and classes. 2. Prepare a data dictionary. 3. Identify associations and aggregations among objects. 4. Identify attributes and objects and links. 5. Organize and simplify object classes using inheritance.
Reference: [80] <author> Shannon, R. E. </author> <title> Systems Simulation: </title> <booktitle> The Art and Science. </booktitle> <publisher> Prentice Hall, </publisher> <year> 1975. </year>
Reference-contexts: Model engineering does not lend itself to a nice neat formalism, and therefore the engineering aspect of simulation modelling is often part art and part science <ref> [80] </ref>. Despite this difficulty in formalization, model engineering is a critical task and should be a central activity within the simulation field; we want to better understand the very nature of modelling including how and why we choose the models that we do during the course of systems analysis.
Reference: [81] <author> Sowa, J. F. </author> <title> Conceptual Structures: Information Processing in Mind and Machine. </title> <publisher> Addison-Wesley, </publisher> <year> 1984. </year>
Reference-contexts: be collapsed into a single model) then we can have multimodels where many models are attached to one another via behavior-preserving homomorphic links. 4 Concept Models Models whose components have not been clearly identified in terms of system theoretic categories such as state, event and function are called "concept models" <ref> [81] </ref>. Conceptual models are a logical first step to modelling; research in these models has many connections in AI, SE, systems science and simulation. At first, it would appear that non-executable models should play no part in simulation.
Reference: [82] <author> Weld, D. S. </author> <title> The Use of Aggregation in Causal Simulation. </title> <booktitle> Artificial Intelligence 30, </booktitle> <month> 1 (October </month> <year> 1986), </year> <pages> 1 - 34. </pages>
Reference-contexts: By coupling functions or states, and by making networks and hierarchies we can simplify the overall model organization. We will call one model an "abstraction level" or a "perspective." Abstraction levels are discussed by many researchers in SE [58], AI <ref> [82] </ref> and simulation [28, 29].
Reference: [83] <author> Weld, D. S., and DeKleer, J. </author> <title> Readings in Qualitative Reasoning about Physical Systems. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1990. </year>
Reference-contexts: Autonomy has, therefore, spawned the creation of knowledge based models that contain a variety of natural, artificial and intelligent objects interacting and reasoning in a complex environment. The fields of qualitative reasoning and qualitative physics <ref> [83, 13] </ref> are evidence of the AI interest in system modelling from the perspective of mathematical reasoning. In addition to autonomy playing a critical role, incomplete knowledge is ever present within models and AI researchers have suggested new ways of representing this type of knowledge. <p> These types of techniques have been used for declarative and functional modelling [85]; however, they are most useful within conceptual models that serve to enhance our ability to diagnose symptoms, plan future actions and provide common-sense explanations of device behavior <ref> [83, 22] </ref>. 2.2 SE & Simulation Models Software engineers are pioneering new and novel methods for building system models; tools such as Foresight [5] provide the modeller with the capability of modelling dynamic systems using finite state automata and block modelling all under the umbrella of object organization.
Reference: [84] <author> Widman, L. E., Loparo, K. A., and Nielsen, N. R. </author> <booktitle> Artificial Intelligence, Simulation and Modeling. </booktitle> <publisher> John Wiley and Sons, </publisher> <year> 1989. </year>
Reference-contexts: Often, the decision making is heuristically based, and there is incomplete knowledge about the domain [56]. This "incompleteness" should be programmed into the dynamical model where it is present. For the past decade, the interface area between AI and simulation has grown, and several papers and texts have appeared <ref> [63, 64, 84, 36, 43] </ref>.
Reference: [85] <author> Winograd, T. </author> <title> Frame Representations and the Declarative/Procedural Controversy. In Representation and Understanding, </title> <editor> D. Bobrow and A. Collins, Eds. </editor> <publisher> Academic Press, </publisher> <year> 1975, </year> <pages> pp. 185 - 210. </pages>
Reference-contexts: While simulationists have used probability theory for representing abstracted quantities, one can also use heuristic rules and constraint based modelling techniques. These types of techniques have been used for declarative and functional modelling <ref> [85] </ref>; however, they are most useful within conceptual models that serve to enhance our ability to diagnose symptoms, plan future actions and provide common-sense explanations of device behavior [83, 22]. 2.2 SE & Simulation Models Software engineers are pioneering new and novel methods for building system models; tools such as Foresight
Reference: [86] <author> Woods, W. A. </author> <title> What's in a Link: Foundations for Semantic Networks. In Representation and Understanding, </title> <editor> D. Bobrow and A. Collins, Eds. </editor> <publisher> Academic Press, </publisher> <year> 1975, </year> <pages> pp. 35 - 82. </pages>
Reference-contexts: The first type of model that we want to create is a concept model that emphasizes a objects and their relations to one another. From such a model, we can gradually progress to more system theoretic constructs. The concept model in AI is termed a semantic network <ref> [86, 27, 17] </ref>, while equivalent model in SE is the object model with attribute definition [79, 15, 16, 14]. Most work in simulation, concerning concept models, has been performed along the lines of model specifications [59, 68] and the system entity structure [89, 92].
Reference: [87] <author> Wymore, A. W. </author> <title> A Mathematical Theory of Systems Engineering: The Elements. </title> <publisher> Krieger Publishing Co., </publisher> <year> 1977. </year>
Reference-contexts: Given this view, simulation is the process of creating abstract versions of programs; the final most detailed simulation is simply the executable program. 3 Terminology 3.1 Using Systems Theory as a Starting Point For the fundamental building primitives comprising models that represent time-dependent system behavior, we have found systems theory <ref> [69, 87, 52, 51] </ref> to provide the most mathematically consistent foundation. Systems theory has developed since the early 1960s into a field that made precise the core components of "systems" regardless of the specific discipline (i.e., computer science, biology, chemistry, physics, operations research) [12, 4].
Reference: [88] <author> Zeigler, B. P. </author> <title> Theory of Modelling and Simulation. </title> <publisher> John Wiley and Sons, </publisher> <year> 1976. </year>
Reference-contexts: Systems theory has developed since the early 1960s into a field that made precise the core components of "systems" regardless of the specific discipline (i.e., computer science, biology, chemistry, physics, operations research) [12, 4]. The first formal theories for discrete event simulation <ref> [88, 89, 91] </ref> were founded upon systems theory, and much recent work has continued this trend. <p> From our perspective, these flows are all data flows regardless of whether a function treats its input data from a control perspective. The functional SE box structuring techniques of Mills [58] bear remarkable resemblance to those of systems and simulation theory <ref> [69, 88] </ref>. This further demonstrates a convergence in model theory between SE and simulation. If we consider each tap and each jug to be a function then we can create a functional block model illustrated in figure 9.
Reference: [89] <author> Zeigler, B. P. </author> <title> Multi-Facetted Modelling and Discrete Event Simulation. </title> <publisher> Academic Press, </publisher> <year> 1984. </year>
Reference-contexts: Our emphasis is on modelling methodology <ref> [89, 65, 66, 25, 24] </ref> rather than analysis methodology. Methodology in analysis has received a much more comprehensive treatment in the general simulation literature [54, 9] as compared with methodology in modelling. <p> Systems theory has developed since the early 1960s into a field that made precise the core components of "systems" regardless of the specific discipline (i.e., computer science, biology, chemistry, physics, operations research) [12, 4]. The first formal theories for discrete event simulation <ref> [88, 89, 91] </ref> were founded upon systems theory, and much recent work has continued this trend. <p> Most work in simulation, concerning concept models, has been performed along the lines of model specifications [59, 68] and the system entity structure <ref> [89, 92] </ref>. Since simulation has its formal roots in systems theory and science, we find work relating to conceptual modelling in these areas as well [20, 52, 38].
Reference: [90] <author> Zeigler, B. P. </author> <title> Multifaceted Systems Modeling: Structure and Behavior at a Multiplicity of Levels. In Individual Development and Social Change: Explanatory Analysis. </title> <publisher> Academic Press, </publisher> <year> 1985, </year> <pages> pp. 265 - 293. </pages>
Reference-contexts: For instance, an integrator functional block using a single step approach keeps track of the last value for a state variable. Graphically, one can envision a functional block with a single circle representing the saved state. * The DEVS model <ref> [90, 92] </ref> extends the standard functional notation by permitting, not only a collection of states within a function block, but also an FSA within each functional block.
Reference: [91] <author> Zeigler, B. P. </author> <title> DEVS Representation of Dynamical Systems: Event-Based Intelligent Control. </title> <booktitle> Proceedings of the IEEE 77, </booktitle> <month> 1 (January </month> <year> 1989), </year> <pages> 72 - 80. </pages>
Reference-contexts: This alternative taxonomy is based on a set of modelling approaches depicted in figure 1. In fig. 1, the first type of model is the concept model which corresponds to an object model within SE or a system entity structure <ref> [91] </ref>. The concept model is non-executable, and serves as a knowledge base for the system. From the concept model, one can derive either one of two basic modelling forms: declarative and functional. Declarative models emphasize state transitions, while functional models emphasize operational or event oriented modelling. <p> Systems theory has developed since the early 1960s into a field that made precise the core components of "systems" regardless of the specific discipline (i.e., computer science, biology, chemistry, physics, operations research) [12, 4]. The first formal theories for discrete event simulation <ref> [88, 89, 91] </ref> were founded upon systems theory, and much recent work has continued this trend.
Reference: [92] <author> Zeigler, B. P. </author> <title> Object Oriented Simulation with Hierarchical, Modular Models: Intelligent Agents and Endomorphic Systems. </title> <publisher> Academic Press, </publisher> <year> 1990. </year>
Reference-contexts: as well as asking fundamentally interesting historical questions such as "What are the causes or catalysts aiding in the relatively recent convergence in AI, SE and simulation modelling?" and "How, precisely, will modellers and decision makers benefit in this convergence?" The integrated style is being used by several simulation researchers <ref> [92, 60, 78, 66, 33, 3] </ref>; however, it has not yet penetrated the general simulation textbook literature as a more powerful paradigm for modelling dynamical systems. <p> Some of our previous research [31, 30, 32, 37] has suggested the study of model engineering as a direct analog to software engineering. Within the simulation community, Zeigler presents a theory for mod-elling autonomous agents <ref> [92] </ref> while implementing a model engineering methodology. The historical reason for the convergence of the SE and simulation fields lies in the area of distributed and real-time design [72] and computing. Technology has seen the computer decrease in size and cost while increasing in power. <p> Most work in simulation, concerning concept models, has been performed along the lines of model specifications [59, 68] and the system entity structure <ref> [89, 92] </ref>. Since simulation has its formal roots in systems theory and science, we find work relating to conceptual modelling in these areas as well [20, 52, 38]. <p> For instance, an integrator functional block using a single step approach keeps track of the last value for a state variable. Graphically, one can envision a functional block with a single circle representing the saved state. * The DEVS model <ref> [90, 92] </ref> extends the standard functional notation by permitting, not only a collection of states within a function block, but also an FSA within each functional block.
References-found: 92

