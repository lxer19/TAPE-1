URL: ftp://ftp.cs.umass.edu/pub/eksl/tech-reports/94-31.ps
Refering-URL: http://eksl-www.cs.umass.edu/~oates/home.html
Root-URL: 
Title: Mixed-Initiative Schedule Maintenance: A First Step Toward Plan Steering  
Author: Tim Oates and Paul R. Cohen 
Note: This work was supported by ARPA/Rome Laboratory under contract #F30602-91-C-0076.  
Address: Box 34610  Amherst, MA 01003-4610  
Affiliation: Computer Science  Experimental Knowledge Systems Laboratory Department of Computer Science,  Lederle Graduate Research Center University of Massachusetts  
Pubnum: Technical Report 94-31  
Abstract: When a plan involves hundreds or thousands of events over time it can be difficult or impossible to tell whether those events are unfolding "according to plan" and to assess the impact of dynamic plan modifications. Pathological states may arise in which goals cannot be attained or are attained too slowly. Plan steering is an agent-based approach to this problem. The agent monitors an unfolding plan, detects and predicts pathological situations, and develops dynamic plan modifications that will steer the plan around the problem. We present results for a system that performs the related task of schedule maintenance in the transportation planning domain. We evaluate system performance at pathology prediction and pathology avoidance and show that the agent, using limited domain knowledge and simple heuristics, is able to improve throughput significantly. We describe experiments in which humans perform the same schedule maintenance task both with and without the aid of the agent, and show that the human and the agent working together achieve better results than either working alone. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ambros-Ingerson, J. A. and Steel, S. </author> <title> Integrating planning, execution and monitoring. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 83-88, </pages> <address> Minneapolis, Minnesota, </address> <year> 1988. </year>
Reference-contexts: 1 Introduction Plans formulated to run in the real world will often fail due to the complexity and unpredictability of the environment. Existing methods to deal with this problem include real time recovery from plan failures <ref> [1] </ref> [3] [12] and post-hoc plan repair based on failures observed while executing the plan [9]. Failure recovery mechanisms, such as replanning, can be expensive, and it may not be feasible to repair a plan by letting it repeatedly fail.
Reference: [2] <author> Anderson, S.D., Carlson, A., Westbrook, D.L., Hart, D.M. and Cohen, P.R. CLASP/CLIP: </author> <title> Common Lisp Analytical Statistics Package/Common Lisp Instrumentation Package. </title> <institution> Department of Computer Science Technical Report 93-55, University of Massachusetts, Amherst. </institution>
Reference-contexts: The agent achieved its design goal of reducing queue length. In doing so, it reduced the amount of time cargo spends sitting idle and actually increased the 1 All experiments and analysis utilized CLASP/CLIP <ref> [2] </ref>. 3 Cost p Value No Advice Mean Advice Mean % Reduction BP 0.0 232 169.9 26.8 IC 0.0 1542.9 1208.2 21.7 SD 0.0325 168.2 149 11.4 Table 1: Effects of Agent Advice - 35 SMRs speed with which cargo travels to its destination locally (decreased Cargo Transit) and globally (decreased
Reference: [3] <author> Lopez-Mellado, E. and Alami, R. </author> <title> A failure recovery scheme for assembly workcells. </title> <booktitle> In Proceedings of the IEEE International Conference on Robotics and Automation, </booktitle> <volume> volume 1, </volume> <pages> pages 702-707, </pages> <year> 1990. </year>
Reference-contexts: 1 Introduction Plans formulated to run in the real world will often fail due to the complexity and unpredictability of the environment. Existing methods to deal with this problem include real time recovery from plan failures [1] <ref> [3] </ref> [12] and post-hoc plan repair based on failures observed while executing the plan [9]. Failure recovery mechanisms, such as replanning, can be expensive, and it may not be feasible to repair a plan by letting it repeatedly fail.
Reference: [4] <author> Muscetolla, N. and Smith, </author> <title> S.F. A probabilistic framework for resource-constrained multi-agent planning. </title> <booktitle> In Proceedings of the Tenth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pp. 1063-1066, </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1987. </year>
Reference-contexts: Combining these distributions with the current state of each port, the demon arrives at a predicted docking queue length for each port. The model is similar to that used in <ref> [4] </ref> for exploring the effects of resource allocation decisions. Long docking queues indicate the presence of a bottleneck. Several factors affect the accuracy of the demon's predictions.
Reference: [5] <author> Oates, T. and Cohen, P.R. </author> <title> Toward a plan steering agent: experiments with schedule maintenance. </title> <institution> Department of Computer Science Technical Report 94-02, University of Massachusetts, Amherst. </institution> <note> Submitted to AIPS-94. </note>
Reference-contexts: The general procedure is to run several simulations in each of a variety of experimental conditions, taking several dependent cost measures which are then compared to determine the effect of the condition <ref> [5] </ref>. Experiments in which humans manage the TransSim domain both with and without the aid of the agent are presented in Section 4. 3.1 Pathology Demon The pathology prediction demon models each ship as a probability distribution of arrival times.
Reference: [6] <author> Oates, T. and Cohen, P.R. </author> <title> Humans plus agents maintain schedules better than either alone. </title> <institution> Department of Computer Science Technical Report 94-03, University of Massachusetts, Amherst. </institution> <note> Submitted to AAAI-94. </note>
Reference-contexts: In one half of the trials the human worked alone, and in the other half the human and the agent worked together. This experiment design and experimental results are presented below <ref> [6] </ref>. 4.1 Experiment Design The schedule maintenance agent was designed to increase throughput in TransSim simulations while minimizing schedule disruptions. The goal of this set of experiments is to determine how both an unassisted human and a human working in concert with the agent perform at that task.
Reference: [7] <author> Ow, P.S., Smith, S.F. and Thiriez A., </author> <title> Reactive plan revision. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <pages> pp. 77-82, </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1988. </year>
Reference-contexts: The agent then uses simple heuristics to generate advice that, when implemented, will either alleviate or avoid the predicted bottleneck. This may be contrasted with reactive approaches, such as <ref> [7] </ref>, that respond to unexpected events at the time they occur. Currently, the only advice the agent offers is based on a simple rerouting heuristic.
Reference: [8] <author> Sadeh, N. </author> <title> Micro-opportunistic scheduling: the micro-boss factory scheduler. To appear in Intelligent Scheduling, edited by M. </title> <editor> Zweben and M. Fox, </editor> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: Failure recovery mechanisms, such as replanning, can be expensive, and it may not be feasible to repair a plan by letting it repeatedly fail. An alternative strategy is to monitor the execution of the plan, attempting to predict pathological states that make it difficult or impossible to achieve goals <ref> [8] </ref>. Doing so admits the possibility of effecting plan modifications in real time to avoid pathological states. Plan steering is a mixed-initiative approach to real time prediction and avoidance of plan failures.
Reference: [9] <author> Simmons, R.G. </author> <title> A theory of debugging plans and interpretations. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 94-99, </pages> <address> Minneapolis, Minnesota, </address> <year> 1988. </year>
Reference-contexts: Existing methods to deal with this problem include real time recovery from plan failures [1] [3] [12] and post-hoc plan repair based on failures observed while executing the plan <ref> [9] </ref>. Failure recovery mechanisms, such as replanning, can be expensive, and it may not be feasible to repair a plan by letting it repeatedly fail.
Reference: [10] <author> Smith, </author> <title> S.F., Ow, P.S., </title> <editor> Muscetolla, N., Potvin, J., and Matthys, </editor> <title> D.C. An integrated framework for generating and revising factory schedules. </title> <journal> In Journal of the Operational Research Society, </journal> <volume> Vol. 41. No. 6, </volume> <year> 1990. </year>
Reference-contexts: That is, the demon only uses information local to a given port. Resource-based schedule revision with local information was used successfully in <ref> [10] </ref>. The schedule maintenance agent combines the demon's predictions for multiple days in the future to determine which ports are likely to become substantial problems. The agent then uses simple heuristics to generate advice that, when implemented, will either alleviate or avoid the predicted bottleneck.
Reference: [11] <author> Tukey, J.W. </author> <title> Exploratory Data Analysis. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1977. </year>
Reference-contexts: That baseline was created by averaging the queue lengths measured for each day over all four of the participants' assisted trials in a scenario and then performing a 3-mean smooth <ref> [11] </ref>. To score a decision point on a given day in an individual trial, we simply look at future queue lengths in that trial and compare them to future queue lengths in the same time range in the appropriate baseline curve.
Reference: [12] <author> Wilkins, D.E. </author> <title> Recovering from execution errors in SIPE. </title> <type> Technical Report 346, </type> <institution> Artificial Intelligence Center, Computer Science and Technology Center, SRI International, </institution> <year> 1985. </year> <month> 10 </month>
Reference-contexts: 1 Introduction Plans formulated to run in the real world will often fail due to the complexity and unpredictability of the environment. Existing methods to deal with this problem include real time recovery from plan failures [1] [3] <ref> [12] </ref> and post-hoc plan repair based on failures observed while executing the plan [9]. Failure recovery mechanisms, such as replanning, can be expensive, and it may not be feasible to repair a plan by letting it repeatedly fail.
References-found: 12

