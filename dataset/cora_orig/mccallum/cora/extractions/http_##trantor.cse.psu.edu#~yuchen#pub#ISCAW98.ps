URL: http://trantor.cse.psu.edu/~yuchen/pub/ISCAW98.ps
Refering-URL: http://www.cse.psu.edu/~yuchen/
Root-URL: http://www.cse.psu.edu
Title: An Architectural Level Power Estimator  
Author: Rita Yu Chen, Mary Jane Irwin, Raminder S. Bajway 
Affiliation: Department of Computer Science and Engineering The Pennsylvania State University ySemiconductor Research Laboratory Hitachi America Ltd.  
Abstract: To enable architecture tradeoff experiments, we have implemented a power estimator for a commercial processor at the architectural level. The target processor integrates a 16-bit DSP and a 32-bit RISC on a single chip. Our power estimator provides cycle-by-cycle power consumption data of the architecture based on the instruction/data flow stream. The accuracy of the estimator has been validated by comparing the power values it produces against measurements made by a gate level power simulator of the commercial processor for the same benchmark set. Our estimation approach has been shown to provide very efficient, accurate power analysis at the architectural level. Based on this power estimation technique, several architecture tradeoff experiments have been performed and are presented. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S.R. Powell and P.M. Chau, </author> <title> "Estimating power dissipation of VLSI signal processing chips: The PFA technique," </title> <booktitle> in VLSI Signal Processing IV, </booktitle> <year> 1990, </year> <pages> pp. 250-259. </pages>
Reference-contexts: Most of the research in this area falls in the category of empirical methods which "measure" the power consumption of existing implementations and produce models based on those measurements. This macromodeling technique can be subdivided into three sub-categories. The first approach introduced in <ref> [1] </ref> is a fixed-activity macromodeling strategy called the Power Factor Approximation (PFA) method. The energy models are parameterized in terms of complexity parameters and a PFA proportionality constant. Thus, the intrinsic internal activity is captured through this PFA constant.
Reference: [2] <author> P. Landman and J. Rabaey, </author> <title> "Power estimation for high level synthesis," </title> <booktitle> in Proceedings of EDAC-EUROASIC, </booktitle> <year> 1993, </year> <pages> pp. 361-366. </pages>
Reference-contexts: This approach implicitly assumes that the inputs do not affect the switching activity of the hardware block. To remedy this weakness of the fixed-activity approach, activity-sensitive empirical energy models have been developed. They are based on predictable input signal statistics, such as used in the SPA method <ref> [2, 3, 4] </ref>. Although the individual models built in this way are relatively accurate (the error rate is 10% 15%), overall accuracy may be sacrificed for the reasons of unavailable correct input statistics or an inability to model the interactions correctly.
Reference: [3] <author> P. Landman and J. Rabaey, </author> <title> "Black-box capacitance models for architectural power analysis," </title> <booktitle> in Proceedings of 1994 International Symposium on Low Power Electronics and Design, </booktitle> <month> April </month> <year> 1994, </year> <pages> pp. 165-170. </pages>
Reference-contexts: This approach implicitly assumes that the inputs do not affect the switching activity of the hardware block. To remedy this weakness of the fixed-activity approach, activity-sensitive empirical energy models have been developed. They are based on predictable input signal statistics, such as used in the SPA method <ref> [2, 3, 4] </ref>. Although the individual models built in this way are relatively accurate (the error rate is 10% 15%), overall accuracy may be sacrificed for the reasons of unavailable correct input statistics or an inability to model the interactions correctly.
Reference: [4] <author> P. Landman and J. Rabaey, </author> <title> "Activity-sensitive architectural power analysis for the control path," </title> <booktitle> in Proceedings of 1995 International Symposium on Low Power Electronics and Design, </booktitle> <month> April </month> <year> 1995, </year> <pages> pp. 93-98. </pages>
Reference-contexts: This approach implicitly assumes that the inputs do not affect the switching activity of the hardware block. To remedy this weakness of the fixed-activity approach, activity-sensitive empirical energy models have been developed. They are based on predictable input signal statistics, such as used in the SPA method <ref> [2, 3, 4] </ref>. Although the individual models built in this way are relatively accurate (the error rate is 10% 15%), overall accuracy may be sacrificed for the reasons of unavailable correct input statistics or an inability to model the interactions correctly.
Reference: [5] <author> H. Mehta, R.M. Owens, and M.J. Irwin, </author> <title> "Energy characterization using clustering," </title> <booktitle> in Proceedings of 33rd Design Automation Conference, </booktitle> <month> June </month> <year> 1996. </year>
Reference-contexts: The third empirical approach, transition-sensitive energy models, is based on input transitions rather than input statistics. The method presented in <ref> [5] </ref> assumes an energy model is provided for each functional unit a table containing the power consumed for each input transition. The authors give a scheme for collapsing closely related input transition vectors and energy patterns into clusters, thereby reducing the size of the table for each functional unit. <p> A major problem is that the size of this table grows exponentially in the size of the inputs. A clustering algorithm solves this problem and the sub-problems associated with it by compressing similar energy patterns. The details of this algorithm can be found in <ref> [5] </ref>. Figure 3 shows an example of uncompressed/compressed energy table for a 2:1 multiplexer. The capacitance data in the energy characterization table is obtained from a switch level simulation of the functional unit.
Reference: [6] <author> R. Bajwa, N. Schumann, and H. Kojima, </author> <title> "Power analysis of a 32-bit RISC microcontroller integrated with a 16-bit DSP," </title> <booktitle> in Proceedings of 1997 International Symposium on Low Power Electronics and Design, </booktitle> <year> 1997, </year> <pages> pp. 137-142. </pages>
Reference-contexts: It also collects power consumption data on the functional units (ALU, MAC, etc.) exercised by the instruction and its data. The results of our power estimator are compared with the power consumption data provided by the manufacturer <ref> [6] </ref>. This comparison confirms the accuracy of our power estimation technique [7]. To show the application of the estimator, several architecture tradeoff experiments have been performed. The rest of this paper consists of four sections. Section 2 presents the power estimation approach. <p> These are the same benchmarks used to test the processor in <ref> [6] </ref>. Power consumption of the instruction loop buffer (ILB), memories, buses, ALU, the multiplier and other functional units are collected as the benchmarks are run. Data values used were those which maximized the switching in the datapath. In Table 1, "padd pmuls movx+ movy+" contains four separate operations executed simultaneously. <p> Program Use ILB Main Loop Operation pow032 No padd pmuls movx+ movy+ pow033 Yes padd pmuls movx+ movy+ pow035a Yes padd pmuls movx movy pow034 No padd pmuls pow035 Yes padd pmuls pow035b Yes padd pow035d No nop Table 1: The Power Benchmark estimator with the data gathered by <ref> [6] </ref>. The power consumption data of each program is normalized to that of the pow034 benchmark. As you can see, for most of the benchmarks our simulator produces results very close to those reported data in [6]. <p> pow035d No nop Table 1: The Power Benchmark estimator with the data gathered by <ref> [6] </ref>. The power consumption data of each program is normalized to that of the pow034 benchmark. As you can see, for most of the benchmarks our simulator produces results very close to those reported data in [6]. However, in both the case of the pow035d benchmark and the pow035c benchmark, the power consumption is underestimated by our simulator. Since we did not have access to the design of the control unit of the processor, average data is used to characterize its power consumption.
Reference: [7] <author> R.Y. Chen, R.M. Owens, M.J. Irwin, </author> <title> and R.S. Bajwa, "Validation of an architectural level power analysis technique," </title> <booktitle> to appear in Proceedings of 35th Design Automation Conference, </booktitle> <month> June </month> <year> 1998. </year>
Reference-contexts: It also collects power consumption data on the functional units (ALU, MAC, etc.) exercised by the instruction and its data. The results of our power estimator are compared with the power consumption data provided by the manufacturer [6]. This comparison confirms the accuracy of our power estimation technique <ref> [7] </ref>. To show the application of the estimator, several architecture tradeoff experiments have been performed. The rest of this paper consists of four sections. Section 2 presents the power estimation approach. Section 3 overviews the processor architecture and discusses the validation results. Section 4 shows several architecture tradeoff experiments.
Reference: [8] <author> H. Mehta, R.M. Owens, and M.J. Irwin, </author> <title> "Instruction level power profiling," </title> <booktitle> in Proceedings of International Conference on Acoustics, Speech and Signal Processing, </booktitle> <year> 1996. </year>
Reference-contexts: [MEMtoIDB] is set read data from memory; put the data on IDB; if ctr_bit [MWBtoIDB] is set MWB buffer puts data on IDB; if ctr_bit [BIFtoIDB] is set BIF (Bus Interface) puts data on IDB; - The energy consumed by each functional unit per access can be computed as follows <ref> [8] </ref> E m = 2 2 where C m is the switch capacitance per access of the functional unit and V dd is the supply voltage. For each active functional unit, C m is calculated from the energy model of the unit based on the previous and present input vectors.
Reference: [9] <author> Atul Kalambur, </author> <title> Micro-architectural techniques for low power processors, M.S. </title> <type> thesis, </type> <institution> Penn State University, </institution> <year> 1997. </year>
Reference-contexts: The pow035 benchmark includes the DSP multiplication operation while pow035b does not. Reducing the power consumption of the MAC unit will lead to a significant power reduction in the whole processor. Pow035 BUS 12.1% Memory 16.6% Memory 16.6% BUS 12.2% 20.3% Reduce 34.4% More architectural level experiments <ref> [9] </ref> have been performed on a 5-stage pipelined DLX processor [10]. The power estimation identifies the most power hungry modules: instruction and data caches, pipeline registers and the register file.
Reference: [10] <author> J.L. Hennessy, and D.A. Patterson, </author> <title> Computer Architecture A Quantitative Approach, </title> <publisher> Morgan Kaufmann Publishers Inc, </publisher> <year> 1996. </year>
Reference-contexts: Reducing the power consumption of the MAC unit will lead to a significant power reduction in the whole processor. Pow035 BUS 12.1% Memory 16.6% Memory 16.6% BUS 12.2% 20.3% Reduce 34.4% More architectural level experiments [9] have been performed on a 5-stage pipelined DLX processor <ref> [10] </ref>. The power estimation identifies the most power hungry modules: instruction and data caches, pipeline registers and the register file. To reduce register file accesses, an architecture optimization approach|early bypass detection|places the register forwarding logic in the ID (Instruction Decode) stage.
Reference: [11] <author> Huzefa Mehta, </author> <title> System Level Power Analysis, </title> <type> Ph.D. thesis, </type> <institution> Penn State University, </institution> <year> 1996. </year>
Reference-contexts: But, the 6-stage pipeline consumes as much or more energy than the normal architecture due to the additional pipeline register. I$ RegFile Idecode PipeReg 0 2 4 6 Switch Capacitance (x10**5pF) Original 5-stage RegMem 6-stage RegMem Different from above approaches which change the architecture, a register relabeling technique <ref> [11] </ref> modifies only the compiler. This approach encodes the register labels such that the switching costs of all the register label transitions are minimized. It can reduce the energy of the pipeline registers, register file and the instruction bus.
References-found: 11

