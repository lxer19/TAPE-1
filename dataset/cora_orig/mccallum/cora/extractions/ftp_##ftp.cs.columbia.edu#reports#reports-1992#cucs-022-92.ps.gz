URL: ftp://ftp.cs.columbia.edu/reports/reports-1992/cucs-022-92.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1992.html
Root-URL: http://www.cs.columbia.edu
Title: An On-Line String Superprimitivity Test  
Author: Dany Breslauer 
Address: CUCS-022-92  
Affiliation: Columbia University  
Abstract: A string w covers another string z if every symbol of z is within some occurrence of w in z. A string is called superprimitive if it is covered only by itself, and quasiperiodic if it is covered by some shorter string. We present an on-line linear-time algorithm that tests if each prefix of an input string is superprimitive while the string is given a symbol at a time.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Apostolico and A. Ehrenfeucht. </author> <title> Efficient Detection of Quasiperiodicities in Strings. </title> <type> Technical Report 90.5, </type> <institution> The Leonadro Fibonacci Institute, Trento, Italy, </institution> <year> 1990. </year>
Reference-contexts: 1 Introduction Quasiperiodicity, as defined by Apostolico and Ehrenfeucht <ref> [1] </ref>, is an avoidable regularity of strings that is strongly related to other regularities such as periods and squares [4]. Apos-tolico, Farach and Iliopoulos [2] gave a linear time recursive algorithm that tests if a string is superprimitive. Apostolico and Ehrenfeucht [1] presented an algorithm that finds all maximal quasiperiodic substrings <p> 1 Introduction Quasiperiodicity, as defined by Apostolico and Ehrenfeucht <ref> [1] </ref>, is an avoidable regularity of strings that is strongly related to other regularities such as periods and squares [4]. Apos-tolico, Farach and Iliopoulos [2] gave a linear time recursive algorithm that tests if a string is superprimitive. Apostolico and Ehrenfeucht [1] presented an algorithm that finds all maximal quasiperiodic substrings of a string. In this paper we present a new algorithm that tests if a string is superprimitive. The algorithm is simpler and more efficient than the algorithm of Apostolico, Farach and Il-iopoulos [2].
Reference: [2] <author> A. Apostolico, M. Farach, and C. S. Iliopoulos. </author> <title> Optimal superprimitivity testing for strings. </title> <journal> Inform. Process. Lett., </journal> <volume> 39 </volume> <pages> 17-20, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction Quasiperiodicity, as defined by Apostolico and Ehrenfeucht [1], is an avoidable regularity of strings that is strongly related to other regularities such as periods and squares [4]. Apos-tolico, Farach and Iliopoulos <ref> [2] </ref> gave a linear time recursive algorithm that tests if a string is superprimitive. Apostolico and Ehrenfeucht [1] presented an algorithm that finds all maximal quasiperiodic substrings of a string. In this paper we present a new algorithm that tests if a string is superprimitive. <p> Apostolico and Ehrenfeucht [1] presented an algorithm that finds all maximal quasiperiodic substrings of a string. In this paper we present a new algorithm that tests if a string is superprimitive. The algorithm is simpler and more efficient than the algorithm of Apostolico, Farach and Il-iopoulos <ref> [2] </ref>. It is also on-line, which means that it tests if each prefix of the input string is superprimitive as soon that the prefix is given. The algorithm works under the general alphabet assumption where the only access to the input string is by comparisons of pairs of symbols. <p> The algorithm works under the general alphabet assumption where the only access to the input string is by comparisons of pairs of symbols. Similarly to the algorithm given by Apostolico, Farach and Iliopoulos <ref> [2] </ref> the new algorithm uses the Knuth-Morris-Pratt [3] string matching algorithm. However, that string matching algorithm is used only once. We proceed with some definitions of terms that will be used in the sequel. <p> Similarly to the algorithm of Apostolico, Farach and Iliopoulos <ref> [2] </ref>, if a prefix S [1::k] is not superprimitive the algorithm finds the quasiperiod of that prefix. The new algorithm will use the pattern processing step of the Knuth-Morris-Pratt [3] string matching algorithm.
Reference: [3] <author> D. E. Knuth, J. H. Morris, and V. R. Pratt. </author> <title> Fast pattern matching in strings. </title> <journal> SIAM J. Comput., </journal> <volume> 6 </volume> <pages> 322-350, </pages> <year> 1977. </year>
Reference-contexts: The algorithm works under the general alphabet assumption where the only access to the input string is by comparisons of pairs of symbols. Similarly to the algorithm given by Apostolico, Farach and Iliopoulos [2] the new algorithm uses the Knuth-Morris-Pratt <ref> [3] </ref> string matching algorithm. However, that string matching algorithm is used only once. We proceed with some definitions of terms that will be used in the sequel. <p> Similarly to the algorithm of Apostolico, Farach and Iliopoulos [2], if a prefix S [1::k] is not superprimitive the algorithm finds the quasiperiod of that prefix. The new algorithm will use the pattern processing step of the Knuth-Morris-Pratt <ref> [3] </ref> string matching algorithm. In the pattern processing step, the Knuth-Morris-Pratt algorithm computes the periods of all prefixes of the pattern while the pattern is given on-line. <p> In the pattern processing step, the Knuth-Morris-Pratt algorithm computes the periods of all prefixes of the pattern while the pattern is given on-line. We do not include the details of the Knuth-Morris-Pratt algorithm, but rather summarize its properties in the following theorem: 2 Theorem 2.1 (Knuth, Morris and Pratt <ref> [3] </ref>) There exists an on-line algorithm that finds the period of each prefix of a string S [1::n] while the string is given a symbol at a time. The algorithm takes O (n) time and uses linear auxiliary space.
Reference: [4] <author> M. </author> <title> Lothaire. Combinatorics on Words. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA. U. S.A., </address> <year> 1983. </year> <month> 4 </month>
Reference-contexts: 1 Introduction Quasiperiodicity, as defined by Apostolico and Ehrenfeucht [1], is an avoidable regularity of strings that is strongly related to other regularities such as periods and squares <ref> [4] </ref>. Apos-tolico, Farach and Iliopoulos [2] gave a linear time recursive algorithm that tests if a string is superprimitive. Apostolico and Ehrenfeucht [1] presented an algorithm that finds all maximal quasiperiodic substrings of a string. In this paper we present a new algorithm that tests if a string is superprimitive.
References-found: 4

