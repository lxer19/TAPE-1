URL: http://www.isi.edu/sims/papers/94-caic-pop.ps
Refering-URL: http://www.isi.edu/~knoblock/
Root-URL: 
Email: qyang@logos.uwaterloo.ca knoblock@isi.edu  
Title: Evaluating the Tradeoffs in Partial-Order Planning Algorithms  
Author: Craig A. Knoblock Qiang Yang 
Address: 4676 Admiralty Way Waterloo, Ont., Canada N2L 3G1 Marina del Rey, CA 90292  
Affiliation: Information Sciences Institute University of Waterloo University of Southern California Computer Science Department  
Abstract: Most practical partial-order planning systems employ some form of goal protection. How ever, it is not clear from previous work what the tradeoffs are between the different goal protection strategies. Is it better to protect against all threats to a subgoal, some threats, or no threats at all? In this paper, we con sider three well-known planning algorithms, snlp, nonlin, and tweak. Each algorithm makes use of a different goal-protection strat egy. Through a comparison of the three al gorithms, we provide a detailed analysis of different goal protection methods, in order to identify the factors that determine the per formance of the systems. The analysis clearly shows that the relative performance of the different goal-protection methods used by the systems, depends on the characteristics of the problems being solved. One of the main de termining factors of performance is the ratio of the number of negative threats to the num ber of positive threats. We present an artifi cial domain where we can control this ratio and show that in fact the planners show radi cally different performance as the ratio is var ied. The implication of this result for some one implementing a planning system is that the most appropriate algorithm will depend on the types of problems to be solved by the planner. 
Abstract-found: 1
Intro-found: 1
Reference: [ Barrett and Weld, 1992 ] <author> Anthony Barrett and Dan Weld. </author> <title> Partial order planning: Evaluating possible efficiency gains. </title> <type> Technical Report 92-05-01, </type> <institution> Univer sity of Washington, Department of Computer Science and Engineering, </institution> <year> 1992. </year>
Reference-contexts: First, we present the snlp algo rithm based on the algorithm descriptions of McAllester and Rosenblitt's Find-Completion algorithm [ McAllester and Rosenblitt, 1991 ] and Barrett and Weld's POCL al gorithm <ref> [ Barrett and Weld, 1992 ] </ref> . We start with this algorithm because we can build on the elegant algo rithm description and implementation provided in pre vious work. <p> Then, we describe the changes necessary to transform the snlp algorithm into algorithms that implement nonlin [ Tate, 1977 ] and tweak [ Chapman 1987 ] . 2.1 The snlp Algorithm In the planning algorithms that we consider below, we follow the notations used by Barrett and Weld <ref> [ Barrett and Weld, 1992 ] </ref> . A plan is a 3-tuple, represented as hS; O; Bi, where S is a number of steps, O is a set of ordering constraints, and B the set of variable binding constraints associated with a plan. <p> The following algorithm which is an adaptation of McAllester and Rosenblitt's Find-Completion algorithm [ McAllester and Rosenblitt, 1991 ] and Barrett and Weld's POCL algorithm <ref> [ Barrett and Weld, 1992 ] </ref> , has been shown to be sound, complete, and systematic (never generates redundant plans). Let the notation codesignate (R) denote the codesignation constraints im posed on a set of variable pairs R. <p> Below, we present the results of our empirical tests on different points of the spectrum of as defined by the ratio R. In the experiments, each problem was run in snlp <ref> [ Barrett and Weld, 1992 ] </ref> , a version of nonlin and a version of tweak that were modified from snlp. The problems were solved using a best-first search on the solution size in order to fairly compare the size of the problem spaces being searched by each system.
Reference: [ Chapman 1987 ] <editor> David Chapman Planning for Con junctive Goals. </editor> <booktitle> Artificial Intelligence, </booktitle> <volume> volume 32, </volume> <pages> pp. 333-377, </pages> <year> 1987. </year>
Reference-contexts: We start with this algorithm because we can build on the elegant algo rithm description and implementation provided in pre vious work. Then, we describe the changes necessary to transform the snlp algorithm into algorithms that implement nonlin [ Tate, 1977 ] and tweak <ref> [ Chapman 1987 ] </ref> . 2.1 The snlp Algorithm In the planning algorithms that we consider below, we follow the notations used by Barrett and Weld [ Barrett and Weld, 1992 ] . <p> protection methods employed by snlp and nonlin are relatively minor. 2.3 The tweak Algorithm The primary difference between tweak and the two previous algorithms is that instead of building explicit causal links for each condition established by the plan ner, tweak uses what is called the Modal Truth Crite rion <ref> [ Chapman 1987 ] </ref> to check the truth of each precondi tion in the plan. This difference results in four changes from the snlp algorithm and only three changes from the nonlin algorithm. The differences are in termina tion, separation, goal selection, and threat identification. <p> Each of these are discussed in turn. Since tweak does not maintain explicit causal links for each precondition, it must test the truth of all of the preconditions in the plan to determine when the plan is complete. It does this using the Modal Truth Crite rion check <ref> [ Chapman 1987 ] </ref> . This algorithm takes O (n 3 ) time, as compared with the O (1) time termination rou tine of snlp. We will refer to the algorithm that imple ments the Modal Truth Criterion as mtc.
Reference: [ Korf, 1987 ] <author> Korf, R.E., </author> <title> "Planning as Search: A Quan titative Approach," </title> <booktitle> Artificial Intelligence (33), </booktitle> <year> 1987, </year> <pages> 65-88. </pages>
Reference: [ Oren et al., 1992 ] <author> Oren Etzioni, Steve Hanks, Daniel Weld, Denise Draper, Neal Lesh, and Mike Williamson. </author> <title> An approach to planning with incom plete information. </title> <note> submitted for publication, </note> <institution> Univer sity of Washington, Department of Computer Science and Engineering, </institution> <year> 1992. </year>
Reference: [ McAllester and Rosenblitt, 1991 ] <author> David McAllester and David Rosenblitt. </author> <title> Systematic nonlinear plan ning. </title> <booktitle> In Proceedings of the 9th AAAI, </booktitle> <address> Anaheim, CA, </address> <year> 1991. </year>
Reference-contexts: First, we present the snlp algo rithm based on the algorithm descriptions of McAllester and Rosenblitt's Find-Completion algorithm <ref> [ McAllester and Rosenblitt, 1991 ] </ref> and Barrett and Weld's POCL al gorithm [ Barrett and Weld, 1992 ] . We start with this algorithm because we can build on the elegant algo rithm description and implementation provided in pre vious work. <p> Likewise, S k is a neg ative threat if it can possibly be between S i and S j , and deletes a literal q that can possibly be bound to p. The following algorithm which is an adaptation of McAllester and Rosenblitt's Find-Completion algorithm <ref> [ McAllester and Rosenblitt, 1991 ] </ref> and Barrett and Weld's POCL algorithm [ Barrett and Weld, 1992 ] , has been shown to be sound, complete, and systematic (never generates redundant plans). Let the notation codesignate (R) denote the codesignation constraints im posed on a set of variable pairs R.
Reference: [ Minton et al. 1991 ] <author> Steve Minton, John Bresina, and Mark Drummond. </author> <title> Commitment strategies in plan ning: A comparative analysis. </title> <booktitle> In Proceedings of the 12th IJCAI, </booktitle> <address> Sydney, Australia, </address> <year> 1991. </year>
Reference: [ Pednault, 1986 ] <author> Edwin P.D. </author> <title> Pednault Toward a Math ematical Theory of Plan Synthesis. </title> <type> Ph.D. Thesis, </type> <institution> Department of Electrical Engineering, Stanford Uni versity, Stanford, </institution> <address> CA, </address> <year> 1986. </year>
Reference: [ Kambhampati, 1992 ] <author> Subbarao Kambhampati. </author> <title> Multi Contributor Causal Structures for Planning: A For malization and Evaluation. </title> <institution> Arizona State University, </institution> <type> technical report ASU-CS-TR-92-019, </type> <month> July </month> <year> 1992. </year>
Reference-contexts: An exception is the work by Kambhampati <ref> [ Kambhampati, 1993; Kambhampati, 1992 ] </ref> , who (concurrently with our work) carried out a set of experiments to test the merits of different partial-order planners.
Reference: [ Kambhampati, 1993 ] <author> Subbarao Kambhampati. </author> <title> On the Utility of Systematicity: Understanding Tradeoffs between Redundancy and Commitment in Partial ordering Planning. </title> <booktitle> Proceedings of 13th IJCAI, </booktitle> <address> Chambery, France, </address> <year> 1993, </year> <pages> 1380-1387. </pages>
Reference-contexts: An exception is the work by Kambhampati <ref> [ Kambhampati, 1993; Kambhampati, 1992 ] </ref> , who (concurrently with our work) carried out a set of experiments to test the merits of different partial-order planners. <p> Experiments in a set of closely related domains were conducted, and the resulting comparison of snlp, nonlin, tweak, MP, and MP-I show that MP-I outperforms all of the rest, and that nonlin in one test performed much better than both snlp and tweak (Figure 8, <ref> [ Kambhampati, 1993 ] </ref> ). Contrasting Kambhampati's results to ours, we note that the former is based on a fixed domain.
Reference: [ Tate, 1977 ] <institution> Austin Tate Generating Project Networks. </institution> <month> IJCAI77, </month> <pages> pp. 888-893, </pages> <year> 1977. </year>
Reference-contexts: We start with this algorithm because we can build on the elegant algo rithm description and implementation provided in pre vious work. Then, we describe the changes necessary to transform the snlp algorithm into algorithms that implement nonlin <ref> [ Tate, 1977 ] </ref> and tweak [ Chapman 1987 ] . 2.1 The snlp Algorithm In the planning algorithms that we consider below, we follow the notations used by Barrett and Weld [ Barrett and Weld, 1992 ] . <p> Recursive invocation: snlp (hS 0 ; O 0 ; B 0 i; T 0 ; G 0 ; L 0 ). 2.2 The nonlin Algorithm snlp is a descendant of nonlin <ref> [ Tate, 1977 ] </ref> , so the al gorithms are quite similar and differ mainly in which threats they protect against and how they perform sep aration.
Reference: [ Wilkins, 1988 ] <author> David Wilkins. </author> <title> Practical planning: ex tending the classical AI planning paradigm. </title> <publisher> Morgan Kaufmann, </publisher> <address> CA, </address> <year> 1988. </year>
Reference: [ Yang et al. 1991 ] <author> Qiang Yang, Josh Tenenberg, and Steve Woods. </author> <title> Abstraction in nonlinear planning. </title> <institution> University of Waterloo Technical Report CS 91-65, </institution> <year> 1991. </year>
References-found: 12

