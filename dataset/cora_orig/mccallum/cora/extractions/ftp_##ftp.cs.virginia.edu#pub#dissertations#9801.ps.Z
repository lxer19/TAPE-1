URL: ftp://ftp.cs.virginia.edu/pub/dissertations/9801.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/dissertations/README.html
Root-URL: http://www.cs.virginia.edu
Title: Parallel Set Operations in Complex Object-Oriented Queries  
Author: Russell F. Haddleton 
Degree: A Dissertation Presented to the Faculty of the  In Partial Fulfillment of the Requirements for the Degree of Doctor of Philosophy Computer Science by  
Date: January 1998  
Affiliation: School of Engineering and Applied Science University of Virginia  
Abstract-found: 0
Intro-found: 1
Reference: [ABM + 90] <author> T. Lougenia Anderson, Arne J. Berre, Moira Mallison, Harry H. Porter III, and Bruce Schneider. </author> <title> The HyperModel Benchmark. </title> <editor> In F. Bancilhon, C. Thanos, and D. Tsichritzis, editors, </editor> <booktitle> Advances in Database Technology - EDBT '90. International Conference on Extending Database Technology, </booktitle> <address> Venice, Italy, </address> <month> March </month> <year> 1990. </year>
Reference-contexts: As with 007, the complex conjunctive and disjunctive queries that we wish to test are not to be found in 001. The suite of queries in 001 doesn't include range search operations either. The HyperModel benchmark <ref> [ABM + 90] </ref> and the ACOB benchmark [DMFV90] also have a traversal focus, as that appears to be a common activity in CAD applications. 6.4.3 Relational Benchmarks The Set Query Benchmark [O'N93] was designed to reflect the requirements of Strategic Data Access systems, where queries into large collections of data are
Reference: [AC88a] <author> William Alexander and George Copeland. </author> <title> Comparison of Dataflow Control Techniques in Distributed Data-Intensive Systems. </title> <booktitle> In Proceedings of the 1988 ACM Sigmetrics Conference on Measurement and Modeling of Computer Systems., </booktitle> <month> May </month> <year> 1988. </year>
Reference-contexts: Successful parallel database systems which label themselves as dataflow generally split all query operators in a horizontal manner in order to exploit data parallelism <ref> [AC88b, AC88a, WAF90, JWKL90, TB93] </ref>. Other systems occasionally go as far as to explicitly shun dataflow techniques, as with the Teradata [DG92]: "Hashing is used to split the outputs of relational operators into intermediate relations. Join operators are executed using a parallel sort-merge algorithm.
Reference: [AC88b] <author> William Alexander and George Copeland. </author> <title> Process and Dataflow Control in Distributed Data-Intensive Systems. </title> <booktitle> In Proceedings of the 1988 SIGMOD International Conference on Management of Data, </booktitle> <address> Chicago, </address> <month> June </month> <year> 1988. </year>
Reference-contexts: Successful parallel database systems which label themselves as dataflow generally split all query operators in a horizontal manner in order to exploit data parallelism <ref> [AC88b, AC88a, WAF90, JWKL90, TB93] </ref>. Other systems occasionally go as far as to explicitly shun dataflow techniques, as with the Teradata [DG92]: "Hashing is used to split the outputs of relational operators into intermediate relations. Join operators are executed using a parallel sort-merge algorithm.
Reference: [AHH + 90] <author> P. M. G. Apers, L. O. Hertzberger, B. J. A. Hulshof, A. C. M. Oerlemans, and M. L. Kersten. PRISMA, </author> <title> a platform for experiments with parallelism. </title> <booktitle> In Parallel Database Systems. PRISMA Workshop, Noordwijk, </booktitle> <address> The Netherlands., </address> <month> September </month> <year> 1990. </year>
Reference-contexts: and business community will 1 According to Mohan et al. [MPTW94], "Traditionally, users have been forced to deal with this problem of handling the transaction and query workloads properly by maintaining two different databases on two different systems."(p.354). 2 We contrast this with recent work in main memory DBMS systems <ref> [AHH + 90, vdB94] </ref>, which are not likely to be able to address the same applications in the near future 3 be forced to use outdated relational technology to meet their performance needs, sacrificing the expressiveness of the object oriented model while needlessly enduring the overhead of countless joins and sequential <p> Results are given for some 007 benchmark activities run on a Sequent Symmetry processor over a database consisting of 5.7 MB of relevant data. It is unclear how the system would perform on a substantially larger database. 53 6.1.7 Main Memory Systems Prisma <ref> [AHH + 90] </ref> and Goblin [vdB94] are two main memory parallel systems. Goblin apparently is only a partial implementation. In general, we do not expect that such systems will have the capacity to support the databases in our application area in the near future.
Reference: [BAC + 90] <author> Boral, Alexander, Clay, Copeland, Danforth, Franklin, Hart, Smith, and Val-duriez. </author> <title> Prototyping Bubba, A Highly Parallel Database System. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 2(1), </volume> <month> March </month> <year> 1990. </year> <pages> 154 155 </pages>
Reference-contexts: According to Heytens, "We believe that only a relational subset of FAD (no inter-object references) was actually implemented before the end of the project; we do not know what optimizations were implemented or what performance was achieved" ([Hey92], p. 215). We note that <ref> [BAC + 90] </ref> provides some performance information, although a full specification of the queries and experimental database is not given. Partitioning by OID, as done by parallel ADAMS, seems to be an important step in providing efficient inter-object references or implicit join capability.
Reference: [BBKV87] <author> Francois Bancilon, Ted Briggs, Setrag Khoshafian, and Patrick Valduriez. </author> <title> FAD, a Powerful and Simple Database Language. </title> <booktitle> In Proceedings of the 13th VLDB Conference, </booktitle> <address> Brighton, England, </address> <year> 1987. </year>
Reference: [BCV93] <author> B. Bergsten, M. Couprie, and P. Valduriez. </author> <title> Overview of Parallel Architectures for Databases. </title> <journal> The Computer Journal, </journal> <volume> 36(8), </volume> <year> 1993. </year>
Reference-contexts: Maintaining great volumes within a DBMS is difficult. A number of researchers are attempting to address this problem <ref> [SSU91, BCV93] </ref>. Some are investigating approaches including employing tertiary storage within a DBMS [Sto94, CHL93, Moh93] 2 , while others are examining parallel database systems [DG92]. Successful commercial parallel relational database systems have been deployed [BFG + 95, Pag92].
Reference: [Ber94] <author> Elisa Bertino. </author> <title> Query Processing for Advanced Database systems, chapter A Survey of Indexing Techniques for Object-Oriented Database Management Systems. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1994. </year>
Reference-contexts: Often a map inverse is applied to an entire set of objects. In a query to find all corporations headquartered in cities whose population is less than 5000, one might have the following compound expression S fx j x.city.pop 5000g In <ref> [Ber94] </ref> these compound map queries are called implicit joins. In the relational model this query would be implemented using a selection and a join.
Reference: [BFG + 95] <author> C. K. Baru, G. Fecteau, A. Goyal, H. Hsiao, A. Jhingran, S. Padmanabhan, G. P. Copeland, and W. G. Wilson. </author> <title> DB2 Parallel Edition. </title> <journal> IBM Systems Journal, </journal> <volume> 34(2) </volume> <pages> 292-322., </pages> <year> 1995. </year>
Reference-contexts: A number of researchers are attempting to address this problem [SSU91, BCV93]. Some are investigating approaches including employing tertiary storage within a DBMS [Sto94, CHL93, Moh93] 2 , while others are examining parallel database systems [DG92]. Successful commercial parallel relational database systems have been deployed <ref> [BFG + 95, Pag92] </ref>. According to Gesman [Ges96], "the exploitation of parallelism within OODBMS has been almost completely ignored"(p. 852). <p> Through the model we expect to clearly show why our system performs as is does, and to give insight into how it might perform with other hardware configurations or applications. This implementation effort handles a complaint of Baru et al. <ref> [BFG + 95] </ref> regarding earlier academic work: "The results of these studies form a basis for our knowledge of parallel database issues today.
Reference: [BMC88] <author> Jeffrey A. Brumfield, Janet Lynn Miller, and Hong-Tai Chou. </author> <title> Performance Modeling of Distributed Object-Oriented Database Systems. </title> <booktitle> In Proceedings of the International Symposium on Databases in Parallel and Distributed Systems., </booktitle> <address> Austin, Texas, </address> <month> December </month> <year> 1988. </year>
Reference-contexts: Specifically, analytical modeling alone cannot reflect the non-deterministic behavior of situations such as contention and bottlenecks." (p.1). 8.1.1.1 Brumfield, Miller, and Chou Relevant simulation work includes that of Brumfield, Miller, and Chou <ref> [BMC88] </ref>, which looks at ORION-2, a distributed object-oriented system in its early stages of development. The goal of the simulation was to evaluate the performance of two client/server architectures in a distributed OODB system. The first configuration employed a single server with four disk drives.
Reference: [Bor88] <author> Haran Boral. </author> <title> Parallelism in Bubba. </title> <booktitle> In International Symposium on Databases in Parallel and Distributed Systems, </booktitle> <address> Austin, Texas, </address> <month> December </month> <year> 1988. </year>
Reference: [CAB + 96] <author> R. G. G. Cattell, Tom Atwood, Douglas Barry, Joshua Dul, Jeff Eastman, Guy Ferran, David Jordan, Mary Loomis, and Drew Wade. </author> <title> The Benchmark Handbook for Database and Transaction Processing Systems. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, </address> <year> 1996. </year>
Reference-contexts: Even though there is reasonable consensus on the basic features that need to be supported by any object model, (e.g., object identity, encapsulation of state and behavior, type inheritance, and typed collections), how these features are supported differs among models and systems"(p.148). The Object Database Management Group <ref> [CAB + 96] </ref>, a consortium of OODBMS vendors, provides an object model describing a number of OODBMS constructs such as the "basic features" given above.
Reference: [CABK88] <author> George Copeland, William Alexander, Ellen Boughter, and Tom Keller. </author> <title> Data Placement in Bubba. </title> <booktitle> In Proceedings of the 1988 SIGMOD International Conference on Management of Data, </booktitle> <address> Chicago, Ill., </address> <month> June </month> <year> 1988. </year> <month> 156 </month>
Reference-contexts: Those systems which partition sets based on some property of the object, such as an attribute value, must resolve several difficult questions <ref> [CABK88, GD90] </ref>. For example, if the attribute value of the object changes the location of the object must change 16 as well. This may include updating all sets in which the object resides. Partitioning by the immutable oid value avoids many of these problems. <p> In such cases message passing can dominate performance. Also, by its structure, the approach is limited to horizontally partitioned databases, and in some cases it is hard to know how to properly horizontally partition <ref> [CABK88, TN92] </ref>. We note that granularity, large and small, is often left to the eye of the beholder. Bergsten, Couprie, and 38 Valduriez's definition ([BCV93],p.735) generally serves: "course grain interaction access to more than 10,000 data items", "fine grain interaction access to less than 10 data items". <p> PFAD, the parallel FAD language, is described as "an abstraction of a highly parallel, shared-nothing database system Bubba" ([HDV88],p.72). An important task, as outlined in [HDV88], is to optimally convert FAD into PFAD 4 . This conversion is complicated by data placement issues <ref> [CABK88] </ref>. Bubba declusters by key 5 . Each PFAD relation can be independently partitioned over a different number of nodes. In contrast, the ADAMS abstraction is the parallel set, and partitioning is always done by oid. There are other differences. <p> The 3 They continue: "(contrast this, for example, with dataflow machines where the data is sent to the operation nodes)." 4 This task includes dataflow analysis. 5 "We decluster records into segments according to either the key value or its hash" (p.102, <ref> [CABK88] </ref> 48 degree to which what we now see as the object model was supported by FAD/Bubba is unclear.
Reference: [Cat93] <author> R. G. G. Cattell. </author> <title> The Benchmark Handbook for Database and Transaction Processing Systems, chapter An Engineering Database Benchmark. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, </address> <year> 1993. </year>
Reference-contexts: One of them is an exact match query on Atomic Part Id. Two of them are date range search on Atomic Parts. None of them involve the complex conjunctive and disjunctive queries that we wish to use with ADAMS. 55 6.4.2 Earlier OODB Benchmarks The 001 benchmark <ref> [Cat93, CS92] </ref> is intended to represent engineering applications, much like 007 which followed it. As with 007, the complex conjunctive and disjunctive queries that we wish to test are not to be found in 001. The suite of queries in 001 doesn't include range search operations either.
Reference: [CDF + 94] <author> Michael J. Carey, David J. DeWitt, Michael J. Franklin, Nancy E. Hall, Mark L. McAuliffe, Jeffrey F. Naughton, and et al. </author> <title> Shoring Up Persistent Applications. </title> <booktitle> In Proceedings of the 1994 ACM SIGMOD International Conference on Management of Data, volume 23, </booktitle> <address> Minneapolis, Minnesota., </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Addressing schemes employing a simple mapping between object identifier and partition subset are common (as in ORION [JWKL90]), although few claims of direct database support for data parallel set operations have been encountered. The SHORE system is one such example, providing support for a parallel structure called the ParSet <ref> [Kil92, CDF + 94, DNSV] </ref> which is discussed in Chapter 6. We use the oid of an object to uniquely determine the partition subset. <p> In processing implicit join queries, they discuss the use of relational foreign key techniques supported by surrogate-based join indexes [KCJ + 87], rather than direct inter-object references as provided in ADAMS. 6.1.2 SHORE Another prolific research group has been the SHORE research group at the University of Wisconsin-Madison. SHORE <ref> [DNSV, CDF + 94, Gro95b] </ref> is a page-server based system, see Chapter 4. However, as mentioned in the introduction, they did experiment with a feature known as Parsets [DNSV], which effectively extended server functionality.
Reference: [CDKN94] <author> Michael J. Carey, David J. DeWitt, Chander Kant, and Jeffrey F. </author> <note> Naughton. </note>
Reference-contexts: While the following does not represent a complete set, it does include what we believe to be the primary OODB benchmark candidates for our purposes. 54 We note that all of the benchmarks are single user, although some efforts are being made to create a multi-user 007 benchmark <ref> [CDKN94] </ref>. This is important, as we expect that a multi-user page server implementation would provide far less disk access locality than a multi-user query server implementation.
References-found: 16

