URL: http://osl.cs.uiuc.edu/~w-kim4/pdt93.ps
Refering-URL: http://osl.cs.uiuc.edu/~w-kim4/publications.html
Root-URL: http://www.cs.uiuc.edu
Email: Email: &lt;agha|frolund|wooyoung|raju|annap|sturman&gt;@cs.uiuc.edu  
Title: Abstraction and Modularity Mechanisms for Concurrent Computing  
Author: Gul Agha, Svend Frtlund, WooYoung Kim, Rajendra Panwar, Anna Patterson, and Daniel Sturman 
Address: 1304 W. Springfield Avenue  Urbana, IL 61801, USA  
Affiliation: Department of Computer Science  University of Illinois at Urbana-Champaign  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> G. Agha. </author> <title> Concurrent Object-Oriented Programming. </title> <journal> Communications of the ACM, </journal> <volume> 33(9) </volume> <pages> 125-141, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: First, if the response of a sending actor to the next message is not dependent on the results from a call/return communication, the program is transformed by changing the calls to asynchronous sends and creating a join continuation actor <ref> [1] </ref>. The join continuation actor performs a part of computation of the original sender actor that is dependent on the results. Consider the following expression: send B (v, C.request1 (), D.request2 ()) 4 send represents an asynchronous send. <p> A stack may delegate invocations of its methods to an array. A good survey of research in object-oriented programming can be found in [11]. A description of concurrent object-oriented programming can be found in <ref> [1] </ref>. 9 INSET: Incremental Modifications of Synchronization Constraints Consider the example of producers and consumers which communicate through a buffer (see Figure 3). The buffer defers requests from consumers if it is empty. <p> We believe that the successful application of these methods will further stimulate research in the development of a new generation of realistic high-level programming languages. INSET: Furhter Reading Following is a list of further readings. The Actor model was originally proposed by Hewitt (for example, see <ref> [1] </ref>), and later developed by Agha ([2]). [1] C. Hewitt. Viewing Control Structures as Patterns of Passing Messages. Journal of Artificial Intelligence, 8 (3):323-364, 1977. [2] G. Agha. Actors: A Model of Concurrent Computation in Distributed Systems. MIT Press, 1986. <p> INSET: Furhter Reading Following is a list of further readings. The Actor model was originally proposed by Hewitt (for example, see <ref> [1] </ref>), and later developed by Agha ([2]). [1] C. Hewitt. Viewing Control Structures as Patterns of Passing Messages. Journal of Artificial Intelligence, 8 (3):323-364, 1977. [2] G. Agha. Actors: A Model of Concurrent Computation in Distributed Systems. MIT Press, 1986.
Reference: [2] <author> G. Agha and C.J. Callsen. ActorSpace: </author> <title> An Open Distributed Programming Paradigm. </title> <booktitle> In Principles and Practice of Parallel Programming '93, </booktitle> <year> 1993. </year> <note> Sigplan Notices (To be published). </note>
Reference-contexts: Thus, the actual recipients may be transparently changed: none of clients needs to know the exact identities of potential receivers or to poll them to determine if they satisfy some pattern. In the ActorSpace model, a communication model based on destination patterns is defined <ref> [2] </ref>. An actorSpace is a computationally passive container of actors which acts as a context for matching patterns. Note that actorSpaces may overlap; in particular, an actorSpace may be wholly contained in another. Patterns are matched against listed attributes of actors and actorSpaces that are visible in the actorSpace. <p> INSET: Furhter Reading Following is a list of further readings. The Actor model was originally proposed by Hewitt (for example, see [1]), and later developed by Agha (<ref> [2] </ref>). [1] C. Hewitt. Viewing Control Structures as Patterns of Passing Messages. Journal of Artificial Intelligence, 8 (3):323-364, 1977. [2] G. Agha. Actors: A Model of Concurrent Computation in Distributed Systems. MIT Press, 1986. A formal theory of actors, including proof techniques for establishing the equivalence of actor systems, appears in [3]. [3] G. Agha, I. Mason, S. Smith, and C. Talcott. Towards a Theory of Actor Computation.
Reference: [3] <author> G. Agha, S. Frtlund, R. Panwar, and D. Sturman. </author> <title> A Linguistic Framework for Dynamic Composition of Dependability Protocols. In Dependable Computing for Critical Applications III, IFIP Transactions. </title> <publisher> Elsevier Science Publisher, </publisher> <year> 1993. </year>
Reference-contexts: A significant savings in software development and maintenance costs may be realized if abstract, application-independent specifications of dependability protocols are possible. We have developed a methodology which allows the code for a dependability protocol to be specified independently of the application specific code <ref> [3] </ref>. The methodology has been implemented in an experimental kernel called Broadway. Our reflective model allows compositionality of dependability protocols. Compositionality means that we can specify and reason about a complex dependability scheme in terms of its constituents. <p> Hewitt. Viewing Control Structures as Patterns of Passing Messages. Journal of Artificial Intelligence, 8 (3):323-364, 1977. [2] G. Agha. Actors: A Model of Concurrent Computation in Distributed Systems. MIT Press, 1986. A formal theory of actors, including proof techniques for establishing the equivalence of actor systems, appears in <ref> [3] </ref>. [3] G. Agha, I. Mason, S. Smith, and C. Talcott. Towards a Theory of Actor Computation. In Third International Conference on Concurrency Theory (CONCUR '92), pages 565-579. Springer-Verlag, August 1992. LNCS. <p> Hewitt. Viewing Control Structures as Patterns of Passing Messages. Journal of Artificial Intelligence, 8 (3):323-364, 1977. [2] G. Agha. Actors: A Model of Concurrent Computation in Distributed Systems. MIT Press, 1986. A formal theory of actors, including proof techniques for establishing the equivalence of actor systems, appears in <ref> [3] </ref>. [3] G. Agha, I. Mason, S. Smith, and C. Talcott. Towards a Theory of Actor Computation. In Third International Conference on Concurrency Theory (CONCUR '92), pages 565-579. Springer-Verlag, August 1992. LNCS.
Reference: [4] <author> G. Agha, C. Houck, and R. Panwar. </author> <title> Distributed Execution of Actor Systems. </title> <editor> In D. Gelernter, T. Gross, A. Nicolau, and D. Padua, editors, </editor> <booktitle> Languages and Compilers for Parallel Computing, </booktitle> <pages> pages 1-17. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year> <note> LNCS 589. </note>
Reference-contexts: Agha, I. Mason, S. Smith, and C. Talcott. Towards a Theory of Actor Computation. In Third International Conference on Concurrency Theory (CONCUR '92), pages 565-579. Springer-Verlag, August 1992. LNCS. Separation of representation and description of system and reasoning in terms of meta objects are described in <ref> [4] </ref>. [4] N. Venkatasubramanian and C. Talcott. A MetaArchitecture for Distributed Resource Management. In Proceedings of the Hawaii International Conference on System Sciences. IEEE Computer Society Press, January 1993. The use of actors for message driven programming of multicomputers is described in [5]. [5] W. Athas and C. Seitz. <p> Agha, I. Mason, S. Smith, and C. Talcott. Towards a Theory of Actor Computation. In Third International Conference on Concurrency Theory (CONCUR '92), pages 565-579. Springer-Verlag, August 1992. LNCS. Separation of representation and description of system and reasoning in terms of meta objects are described in <ref> [4] </ref>. [4] N. Venkatasubramanian and C. Talcott. A MetaArchitecture for Distributed Resource Management. In Proceedings of the Hawaii International Conference on System Sciences. IEEE Computer Society Press, January 1993. The use of actors for message driven programming of multicomputers is described in [5]. [5] W. Athas and C. Seitz.
Reference: [5] <author> N. Carriero and D. Gelernter. </author> <title> How to Write Parallel Programs: A Guide to the Perplexed. </title> <journal> ACM Computing Surveys, </journal> <volume> 21(3) </volume> <pages> 323-357, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: This provides an abstraction that allows replication of services, for example to enhance reliability or increase performance. Linda <ref> [5] </ref> defines a communication abstraction similar to that of actorSpace; however, the semantics of Linda, unlike ActorSpace, require explicit read operations by recipients. This results in at least two significant differences. First, race conditions may occur as a result of concurrent access by different processes to a common space. <p> Venkatasubramanian and C. Talcott. A MetaArchitecture for Distributed Resource Management. In Proceedings of the Hawaii International Conference on System Sciences. IEEE Computer Society Press, January 1993. The use of actors for message driven programming of multicomputers is described in <ref> [5] </ref>. [5] W. Athas and C. Seitz. Multicomputers: Message-Passing Concurrent Computers. IEEE Computer, pages 9-23, August 1988. A number of research efforts in object-oriented programming are described in [6]. [6] A. Yonezawa and M. Tokoro, editors. Object-Oriented Concurrent Programming. MIT Press, Cambridge, Massachussets, 1987. <p> Venkatasubramanian and C. Talcott. A MetaArchitecture for Distributed Resource Management. In Proceedings of the Hawaii International Conference on System Sciences. IEEE Computer Society Press, January 1993. The use of actors for message driven programming of multicomputers is described in <ref> [5] </ref>. [5] W. Athas and C. Seitz. Multicomputers: Message-Passing Concurrent Computers. IEEE Computer, pages 9-23, August 1988. A number of research efforts in object-oriented programming are described in [6]. [6] A. Yonezawa and M. Tokoro, editors. Object-Oriented Concurrent Programming. MIT Press, Cambridge, Massachussets, 1987.
Reference: [6] <author> Bjorn N. Freeman-Benson and Alan Borning. </author> <title> Integrating Constraints with an Object-Oriented Language. </title> <editor> In O. Lehrmann Madsen, editor, </editor> <booktitle> Proceedings ECOOP '92, </booktitle> <volume> LNCS 615, </volume> <pages> pages 268-286, </pages> <address> Utrecht, The Netherlands, July 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Although synchronization constraints are often promoted as a way to describe coordination of concurrent objects (e.g., <ref> [6] </ref>), they are unsatisfactory when describing multi-actor coordination: synchronization constraints depend only on the local state of a single actor. In distributed computing, a group of object invocations often must satisfy certain temporal ordering or atomicity constraints. <p> Alternately, a synchronizer can be permanently associated with a group of servers when the servers are first put into operation. In this case, the constraints can express the default interdependence between servers. Two other approaches to constraints are developed in the systems Kaleidoscope <ref> [6] </ref> and Rapide [10]. Constraints in Kaleidoscope capture relations between instance variables of multiple objects. Thus, Kaleidoscope constraints are formulated in terms of the representation of the constrained entities rather than their abstract interfaces. The Rapide prototyping system developed by Luckham et al. [10] involves pattern-based triggering of concurrent objects. <p> IEEE Computer Society Press, January 1993. The use of actors for message driven programming of multicomputers is described in [5]. [5] W. Athas and C. Seitz. Multicomputers: Message-Passing Concurrent Computers. IEEE Computer, pages 9-23, August 1988. A number of research efforts in object-oriented programming are described in <ref> [6] </ref>. [6] A. Yonezawa and M. Tokoro, editors. Object-Oriented Concurrent Programming. MIT Press, Cambridge, Massachussets, 1987. AST's generalize and abstract over Concurrent Aggregates ([7]). [7] A. A. Chien. Concurrent Aggregates: Supporting Modularity in Massively Parallel Programs. MIT Press, 1993. For actor-based computer architecture such as J-machine, see [8]. [8] W. <p> IEEE Computer Society Press, January 1993. The use of actors for message driven programming of multicomputers is described in [5]. [5] W. Athas and C. Seitz. Multicomputers: Message-Passing Concurrent Computers. IEEE Computer, pages 9-23, August 1988. A number of research efforts in object-oriented programming are described in <ref> [6] </ref>. [6] A. Yonezawa and M. Tokoro, editors. Object-Oriented Concurrent Programming. MIT Press, Cambridge, Massachussets, 1987. AST's generalize and abstract over Concurrent Aggregates ([7]). [7] A. A. Chien. Concurrent Aggregates: Supporting Modularity in Massively Parallel Programs. MIT Press, 1993. For actor-based computer architecture such as J-machine, see [8]. [8] W. Dally.
Reference: [7] <author> S. Frtlund and G. Agha. </author> <title> A Language Framework for Multi-Object Coordination. </title> <booktitle> In Proceedings of ECOOP 1993. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1993. </year> <note> To appear in LNCS. </note>
Reference-contexts: These difficulties suggest that new high-level coordination language constructs are needed to simplify the task of programming. We have made some progress in this area. Specifically, we have developed high level language constructs which allow multi-actor constraints to be directly expressed <ref> [7] </ref>. We define two types of multi-actor constraints: temporal orderings on, and atomicity of, invocations of shared distributed actors. Multi-actor constraints are described in terms of conditions that must be satisfied for a group of method invocations to be accepted: if the conditions are not met, the invocations are delayed. <p> Athas and C. Seitz. Multicomputers: Message-Passing Concurrent Computers. IEEE Computer, pages 9-23, August 1988. A number of research efforts in object-oriented programming are described in [6]. [6] A. Yonezawa and M. Tokoro, editors. Object-Oriented Concurrent Programming. MIT Press, Cambridge, Massachussets, 1987. AST's generalize and abstract over Concurrent Aggregates (<ref> [7] </ref>). [7] A. A. Chien. Concurrent Aggregates: Supporting Modularity in Massively Parallel Programs. MIT Press, 1993. For actor-based computer architecture such as J-machine, see [8]. [8] W. Dally. A VLSI Architecture for Concurrent Data Structures. Kluwer Academic Press, 1986. [9] S. Matsuoka and A. Yonezawa.
Reference: [8] <author> L. H. Jamieson. </author> <title> Characterizing Parallel Algorithms. </title> <editor> In R. J. Douglass L.H. Jamieson, D.B. Gannon, editor, </editor> <booktitle> The Characteristics of Parallel Algorithms, </booktitle> <pages> pages 65-100. </pages> <publisher> MIT Press, </publisher> <year> 1987. </year>
Reference-contexts: Such a specification may be called an ideal algorithm <ref> [8] </ref>. The time taken by the ideal algorithm, in the presence of unbounded resources and zero communication cost, is determined by the sequential depth of the longest path in the partial order defined by the actor computation. However, neither of these assumptions is realistic. <p> Yonezawa and M. Tokoro, editors. Object-Oriented Concurrent Programming. MIT Press, Cambridge, Massachussets, 1987. AST's generalize and abstract over Concurrent Aggregates ([7]). [7] A. A. Chien. Concurrent Aggregates: Supporting Modularity in Massively Parallel Programs. MIT Press, 1993. For actor-based computer architecture such as J-machine, see <ref> [8] </ref>. [8] W. Dally. A VLSI Architecture for Concurrent Data Structures. Kluwer Academic Press, 1986. [9] S. Matsuoka and A. Yonezawa. Analysis of Inheritance Anomaly in Object-Oriented Concurrent Programming Languages. In G. Agha, P. Wegner, and A. Yonezawa, editors, Research Directions in Object-Oriented Programming. <p> Yonezawa and M. Tokoro, editors. Object-Oriented Concurrent Programming. MIT Press, Cambridge, Massachussets, 1987. AST's generalize and abstract over Concurrent Aggregates ([7]). [7] A. A. Chien. Concurrent Aggregates: Supporting Modularity in Massively Parallel Programs. MIT Press, 1993. For actor-based computer architecture such as J-machine, see <ref> [8] </ref>. [8] W. Dally. A VLSI Architecture for Concurrent Data Structures. Kluwer Academic Press, 1986. [9] S. Matsuoka and A. Yonezawa. Analysis of Inheritance Anomaly in Object-Oriented Concurrent Programming Languages. In G. Agha, P. Wegner, and A. Yonezawa, editors, Research Directions in Object-Oriented Programming.
Reference: [9] <author> W. Kim and G. Agha. </author> <title> Compilation of a Highly Parallel Actor-Based Language. </title> <editor> In U. Banerjee, D. Gelernter, A. Nicolau, and D. Padua, editors, </editor> <booktitle> Proceedings of the Workshop on Languages and Compilers for Parallel Computing. </booktitle> <institution> Yale University TR DCS RR-915, </institution> <year> 1992. </year> <note> to appear in LNCS, Springer-Verlag. 22 </note>
Reference-contexts: The transformations used preserve the maximal concurrency in a program. Optimizing this form of communication by using a concurrent analog of continuation passing style program transformation avoids incurring unnecessary costs (see inset). INSET: Program Transformations for Call/Return Communication We use one of two transformations on call/return communication <ref> [9] </ref>. First, if the response of a sending actor to the next message is not dependent on the results from a call/return communication, the program is transformed by changing the calls to asynchronous sends and creating a join continuation actor [1]. <p> AST's generalize and abstract over Concurrent Aggregates ([7]). [7] A. A. Chien. Concurrent Aggregates: Supporting Modularity in Massively Parallel Programs. MIT Press, 1993. For actor-based computer architecture such as J-machine, see [8]. [8] W. Dally. A VLSI Architecture for Concurrent Data Structures. Kluwer Academic Press, 1986. <ref> [9] </ref> S. Matsuoka and A. Yonezawa. Analysis of Inheritance Anomaly in Object-Oriented Concurrent Programming Languages. In G. Agha, P. Wegner, and A. Yonezawa, editors, Research Directions in Object-Oriented Programming.
Reference: [10] <author> D. C. Luckham, J. Vera, D. Bryan, L. Augustin, and F. Belz. </author> <title> Partial Orderings of Event Sets and Their Application to Prototyping Concurrent Timed Systems. </title> <booktitle> In Proceedings of the 1992 DARPA software Technology Conference, </booktitle> <month> April </month> <year> 1992. </year>
Reference-contexts: Alternately, a synchronizer can be permanently associated with a group of servers when the servers are first put into operation. In this case, the constraints can express the default interdependence between servers. Two other approaches to constraints are developed in the systems Kaleidoscope [6] and Rapide <ref> [10] </ref>. Constraints in Kaleidoscope capture relations between instance variables of multiple objects. Thus, Kaleidoscope constraints are formulated in terms of the representation of the constrained entities rather than their abstract interfaces. The Rapide prototyping system developed by Luckham et al. [10] involves pattern-based triggering of concurrent objects. <p> constraints are developed in the systems Kaleidoscope [6] and Rapide <ref> [10] </ref>. Constraints in Kaleidoscope capture relations between instance variables of multiple objects. Thus, Kaleidoscope constraints are formulated in terms of the representation of the constrained entities rather than their abstract interfaces. The Rapide prototyping system developed by Luckham et al. [10] involves pattern-based triggering of concurrent objects. Thus, in Rapide, it is not possible to express constraints on the invocations accepted by the involved actors. INSET: Cooperating Resource Administrators Consider two cooperating resource administrators (spoolers) which manage a common printer pool. Suppose the pool has n printers.
Reference: [11] <editor> B. Shriver and P. Wegner (Eds.), editors. </editor> <booktitle> Research Directions in Object-Oriented Programming. </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1987. </year>
Reference-contexts: A stack may delegate invocations of its methods to an array. A good survey of research in object-oriented programming can be found in <ref> [11] </ref>. A description of concurrent object-oriented programming can be found in [1]. 9 INSET: Incremental Modifications of Synchronization Constraints Consider the example of producers and consumers which communicate through a buffer (see Figure 3). The buffer defers requests from consumers if it is empty.
Reference: [12] <author> V. Singh, V. Kumar, G. Agha, and C. Tomlinson. </author> <title> Scalability of Parallel Sorting on Mesh Multicomputers. </title> <journal> International Journal of Parallel Programming, </journal> <volume> 20(2), </volume> <month> April </month> <year> 1991. </year>
Reference-contexts: There is a similar theoretical bound on I/O. In case of sorting, this means that the speed up is bound by P 2=3 in general (and p P on a two dimensional network) <ref> [12] </ref>. Since the performance of an algorithm is dependent on how many messages have to be sent and to which nodes, the efficiency of execution depends in part on the placement and scheduling of objects. In general, the problem of finding an optimal placement policy is intractable.
References-found: 12

