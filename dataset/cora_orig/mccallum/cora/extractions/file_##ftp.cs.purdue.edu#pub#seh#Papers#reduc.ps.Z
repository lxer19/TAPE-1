URL: file://ftp.cs.purdue.edu/pub/seh/Papers/reduc.ps.Z
Refering-URL: http://www.cs.purdue.edu/people/seh/
Root-URL: http://www.cs.purdue.edu
Title: Edge Weight Reduction Problems in Directed, Acyclic Graphs  
Author: Susanne E. Hambrusch Hung-Yi Tu 
Keyword: Analysis of algorithms; directed, acyclic graphs; longest path computations; series-parallel graphs; trees.  
Date: February 7, 1996  
Address: West Lafayette, IN 47907, USA  Taichung Hsien, Taiwan, ROC  
Affiliation: Department of Computer Sciences Purdue University  Department of Computer Science and Information Management Providence University  
Abstract: Let G be a weighted, directed, acyclic graph in which each edge weight is not a static quantity, but can be reduced for a certain cost. In this paper we consider the problem of determining which edges to reduce so that the length of the longest paths is minimized and the total cost associated with the reductions does not exceed a given cost. We consider two types of edge reductions, linear reductions and 0/1 reductions, which model different applications. We present efficient algorithms for different classes of graphs, including trees, series-parallel graphs, and directed acyclic graphs, and we show other edge reduction problems to be NP-hard. fl Research supported in part by ARPA under contract DABT63-92-C-0022ONR. The views and conclusions contained in this paper are those of the authors and should not be interpreted as representing official policies, expressed or implied, of the U.S. government. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Al-Khalili, Y. Zhu, and D. Al-Khalili. </author> <title> A module generator for optimized cmos buffers. </title> <booktitle> In Proceedings of 26th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 245-250, </pages> <year> 1989. </year> <month> 31 </month>
Reference-contexts: For both reductions we require d r (v i ; v j ) 0. We briefly comment on where such edge reductions arise. Linear reductions model, for example, physical performance optimizations of circuits through gate resizing and buffer insertions <ref> [1, 3, 7, 8] </ref>. Such optimizations do not change the topology of the circuit and result in circuits having a smaller delay. <p> For vertex N i we construct an array T i of size m i + 1. Entry T i [j] represents the length of the longest path in G i when at most j edges are reduced. We thus have T i [0] T i <ref> [1] </ref> T i [2] : : : T i [m i 1] T i [m i ]. The T i -arrays are determined from the decomposition tree in a bottom-up fashion, with a node using the arrays associated with its children. <p> Assume this 22 edge is (v a ; v b ). Array T i has size two and we have T i [0] = d (v a ; v b ) and T i <ref> [1] </ref> = * fi d (v a ; v b ). If N i is not a leaf, T i is constructed as follows. Assume N i has two children, N l and N r , and that arrays T l and T r have already been determined.
Reference: [2] <author> H. Booth and R.T. Tarjan. </author> <title> Finding the minimum-cost maximum flow in a series-parallel network. </title> <journal> Journal of Algorithms, </journal> <volume> 15 </volume> <pages> 416-446, </pages> <year> 1993. </year>
Reference-contexts: The offset of linear segments A, B, and C increases by 19 30. The O (m log m) time is achieved by representing each function M N (L) in a balanced binary tree, called the function tree T N . Balanced tree representations are also used in <ref> [2] </ref> for maximum flow problems in sp-graphs. The leaves of a function tree correspond to the endpoints of intervals arranged according to increasing positions (and thus and increasing slope). <p> For vertex N i we construct an array T i of size m i + 1. Entry T i [j] represents the length of the longest path in G i when at most j edges are reduced. We thus have T i [0] T i [1] T i <ref> [2] </ref> : : : T i [m i 1] T i [m i ]. The T i -arrays are determined from the decomposition tree in a bottom-up fashion, with a node using the arrays associated with its children.
Reference: [3] <author> H.-C. Chen, D.H.-C. Du, and L.-R. Liu. </author> <title> Critical path selection for perfomance optimization. </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> 12(2) </volume> <pages> 185-195, </pages> <year> 1993. </year>
Reference-contexts: For both reductions we require d r (v i ; v j ) 0. We briefly comment on where such edge reductions arise. Linear reductions model, for example, physical performance optimizations of circuits through gate resizing and buffer insertions <ref> [1, 3, 7, 8] </ref>. Such optimizations do not change the topology of the circuit and result in circuits having a smaller delay.
Reference: [4] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> The MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction Determining the longest path in a directed graph G is a problem with applications in scheduling task graphs, circuit layout compaction, and performance optimization of circuits. The problem can be solved in linear time when G is a directed, acyclic graph and it is NP-hard for general graphs <ref> [4, 5] </ref>. In some applications the weight of an edge is not a static quantity, but can be reduced for a certain cost.
Reference: [5] <author> M.R. Garey and D.S. Johnson. </author> <title> Computers and Intractability : A Guide to the Theory of NP-Completeness. </title> <editor> W. H. </editor> <publisher> Freeman, </publisher> <year> 1979. </year>
Reference-contexts: 1 Introduction Determining the longest path in a directed graph G is a problem with applications in scheduling task graphs, circuit layout compaction, and performance optimization of circuits. The problem can be solved in linear time when G is a directed, acyclic graph and it is NP-hard for general graphs <ref> [4, 5] </ref>. In some applications the weight of an edge is not a static quantity, but can be reduced for a certain cost. <p> Proof: The problem is easily shown to be in NP. NP-completeness follows by a reduction from monotone 3-SAT <ref> [5] </ref>. Let X = fx 1 ; x 2 ; : : : ; x n g be n variables and C = C 1 ^ C 2 ^ ^ C k be an instance of monotone 3-SAT.
Reference: [6] <author> A. Gerasoulis and T. Yang. </author> <title> A comparison of clustering heuristics for scheduling directed acyclic graphs on multiprocessors. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 16 </volume> <pages> 276-291, </pages> <year> 1992. </year>
Reference-contexts: Such optimizations do not change the topology of the circuit and result in circuits having a smaller delay. At the same time, circuit size and power consumption increase. 0/1 reductions with * = 0 are a basic operation in clustering heuristics for mapping task graphs to multiprocessors <ref> [6, 9] </ref>. In a task graph the edge weights represent the communication cost 2 and vertices mapped to the same processor experience no communication cost. For * &gt; 0, 0/1 reductions can model scenarios in which there exist fast and slow buses for communication.
Reference: [7] <author> D. Marple. </author> <title> Transistor size optimization in the tailor layout system. </title> <booktitle> In Proceedings of 26th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 43-48, </pages> <year> 1989. </year>
Reference-contexts: For both reductions we require d r (v i ; v j ) 0. We briefly comment on where such edge reductions arise. Linear reductions model, for example, physical performance optimizations of circuits through gate resizing and buffer insertions <ref> [1, 3, 7, 8] </ref>. Such optimizations do not change the topology of the circuit and result in circuits having a smaller delay.
Reference: [8] <author> F. Obermeier and R. Katz. </author> <title> An electrical optimizer that considers physical layout. </title> <booktitle> In Proceedings of 25th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 453-459, </pages> <year> 1988. </year>
Reference-contexts: For both reductions we require d r (v i ; v j ) 0. We briefly comment on where such edge reductions arise. Linear reductions model, for example, physical performance optimizations of circuits through gate resizing and buffer insertions <ref> [1, 3, 7, 8] </ref>. Such optimizations do not change the topology of the circuit and result in circuits having a smaller delay.
Reference: [9] <author> C.H. Papadimitriou and J.D. Ullman. </author> <title> A communication-time tradeoff. </title> <journal> SIAM Journal of Computing, </journal> <volume> 16(4) </volume> <pages> 639-646, </pages> <month> August </month> <year> 1987. </year>
Reference-contexts: Such optimizations do not change the topology of the circuit and result in circuits having a smaller delay. At the same time, circuit size and power consumption increase. 0/1 reductions with * = 0 are a basic operation in clustering heuristics for mapping task graphs to multiprocessors <ref> [6, 9] </ref>. In a task graph the edge weights represent the communication cost 2 and vertices mapped to the same processor experience no communication cost. For * &gt; 0, 0/1 reductions can model scenarios in which there exist fast and slow buses for communication.
Reference: [10] <author> J. Valdes, R.E. Tarjan, and E.L. Lawler. </author> <title> The recongnition of series parallel digraph. </title> <journal> SIAM J. Comput., </journal> <volume> 11(2) </volume> <pages> 298-313, </pages> <month> May </month> <year> 1982. </year> <month> 32 </month>
Reference-contexts: Testing whether a given dag G on n vertices and m edges is an sp-graph can be done in O (m) time <ref> [10] </ref>. Furthermore, the decomposition tree D for a given sp-graph G can be constructed in O (m) time by using the recognition algorithm shown in [10]. Let N be a node in the decomposition tree and let G N be the associated subgraph of G. <p> Testing whether a given dag G on n vertices and m edges is an sp-graph can be done in O (m) time <ref> [10] </ref>. Furthermore, the decomposition tree D for a given sp-graph G can be constructed in O (m) time by using the recognition algorithm shown in [10]. Let N be a node in the decomposition tree and let G N be the associated subgraph of G. Let M N (L) be the minimum edge reduction reducing the length of the longest path in G N to L. <p> Offsets change accordingly. In Figure 4 (a), M N 2 corresponds to the interval [0; 15] with the linear function 3 fi L + 45. Inserting interval [0; 15] into M N 1 results in the interval <ref> [10; 20] </ref> being split into intervals [10; 15] and [15; 20]. Interval [10; 15] has slope (2) + (3) = 5 and offset 50 + 45 = 95. <p> Offsets change accordingly. In Figure 4 (a), M N 2 corresponds to the interval [0; 15] with the linear function 3 fi L + 45. Inserting interval [0; 15] into M N 1 results in the interval [10; 20] being split into intervals <ref> [10; 15] </ref> and [15; 20]. Interval [10; 15] has slope (2) + (3) = 5 and offset 50 + 45 = 95. In a series composition, we also create M N (L) by inserting each interval of M N 2 (L) into M N 1 (L). <p> Offsets change accordingly. In Figure 4 (a), M N 2 corresponds to the interval [0; 15] with the linear function 3 fi L + 45. Inserting interval [0; 15] into M N 1 results in the interval [10; 20] being split into intervals <ref> [10; 15] </ref> and [15; 20]. Interval [10; 15] has slope (2) + (3) = 5 and offset 50 + 45 = 95. In a series composition, we also create M N (L) by inserting each interval of M N 2 (L) into M N 1 (L).
References-found: 10

