URL: http://www.idt.unit.no/~epos/Papers/pml-ewspt95.ps
Refering-URL: http://www.idt.unit.no/~epos/bibliografia.html
Root-URL: 
Title: Process Modelling Languages: One or Many?  
Author: Reidar Conradi Chunnian Liu, 
Note: Submitted for EWSPT'95,  
Date: October 5, 1994  April 1995, Leiden  
Address: Trondheim, Norway  P.R. China  
Affiliation: Norwegian Institute of Technology,  Beijing Polytechnic University, Beijing,  
Abstract: The paper describes the different phases and subdomains of process modelling and their needs for conceptual and linguistic support, and in what forms. We group the relevant factors into three dimensions: meta-process phases, process elements, and the tool/user views. In the first dimension, we focus on enactable process models. For such models, we describe the design alternatives for a core process modelling language and a set of tailored sub-languages to cover special process elements. However, no detailed and functional comparison of possible modelling language are attempted. Then we address interoperability between related sub-models and its implication to the language design. We also present a general architecture for a Process-Centered Software Engineering Environment, with a segmented repository of model servers. Some concrete language realisations, mainly from the EPOS PSEE, are used throughout the presentation. We also give a realistic example of the design of an interoperable PSEE, and discuss how it can be improved using an extended EPOS. The paper concludes that we have to live with many sub-languages around a core process modelling language. However, the underlying linguistic paradigm in this core language is not judged critical. What counts is use of standard support technologies, interoperability to handle heterogeneous and distributed process information, non-intrusive process support, end-user comprehension, and flexible support for evolution (meta-process).
Abstract-found: 1
Intro-found: 1
Reference: [ABGM92] <author> P. Armenise, S. Bandinelli, C. Ghezzi, and A. Morzenti. </author> <title> Software Process Representation Languages: Survey and Assessment. </title> <booktitle> In Proc. 4th IEEE International Conference on Software Engineering and Knowledge Engineering, </booktitle> <address> Capri, Italy, </address> <month> June 17-19. </month> <pages> 31 pages, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: There is yet little agreement on basic concepts, terminology, linguistic constructs, and tool architectures underlying such PSEEs. Some classification of concepts can be found in [CFFS92] [Lon93] [FH93] [CFF94], of languages in [CLJ91] <ref> [ABGM92] </ref>, and of architectures in [BBFL94]. We will use the below definitions. By process we understand a set of goal-oriented, partially ordered and interacting activities, and their associated artifacts and resources (humans, tools, time). Activities, artifacts, tools etc. are called process elements.
Reference: [ACF94] <author> Vincenzo Ambriola, Reidar Conradi, and Alfonso Fuggetta. </author> <title> Experiences and Issues in Building and Using Process-centered Software Engineering Evironments, </title> <month> September </month> <year> 1994. </year> <type> Internal draft paper, </type> <institution> Univ. Pisa / NTH, Trondheim / Politecnico di Milano, </institution> <note> 26 p. </note>
Reference-contexts: The EPOS PML (s) are used as an example, but with comparisons to PMLs in other PSEEs. 2.1 The PML Design Dilemma Much research effort has been spent on designing the right PML. We can identify four approaches L1-L4 for PML design, and all include a core PML, cf. <ref> [ACF94] </ref> : * L1: One fixed and large core PML. Here, the core PML contains language primitives to express all relevant process elements. Although Occam's razor might be successfully used, a large but common PML will result.
Reference: [BBFL94] <author> Sergio Bandinelli, Marco Braga, Alfonso Fuggetta, and Luigi Lavazza. </author> <booktitle> The Architecture of the SPADE Process-Centered SEE. In [War94], </booktitle> <pages> pages 15-30, </pages> <year> 1994. </year>
Reference-contexts: There is yet little agreement on basic concepts, terminology, linguistic constructs, and tool architectures underlying such PSEEs. Some classification of concepts can be found in [CFFS92] [Lon93] [FH93] [CFF94], of languages in [CLJ91] [ABGM92], and of architectures in <ref> [BBFL94] </ref>. We will use the below definitions. By process we understand a set of goal-oriented, partially ordered and interacting activities, and their associated artifacts and resources (humans, tools, time). Activities, artifacts, tools etc. are called process elements.
Reference: [BEM93] <author> N. Belkhatir, Jacky Estublier, and Walcelio Melo. </author> <title> Software Process Model and Work Space Control in the Adele System. </title> <booktitle> In [Ost93], </booktitle> <pages> pages 2-11, </pages> <year> 1993. </year>
Reference-contexts: On the other hand, the EPOS process model is itself a first-class artifact, and can be stored, versioned and reused by the same versioning model. In Adele2 <ref> [BEM93] </ref>, the product model instances (product descriptions) are supported by one versioning model. For the product schema and for the activity/tool model, other facilities are used to achieve evolution, e.g. special delegation paths and roles (meaning versioned types). The transaction model should be nested and allow pre-commit cooperation.
Reference: [BFG93] <author> Sergio Bandinelli, Alfonso Fuggetta, and Carlo Ghezzi. </author> <title> Software Process Model Evolution in the SPADE Environment. </title> <journal> IEEE Trans. on Software Engineering, </journal> <pages> pages 1128-1144, </pages> <month> December </month> <year> 1993. </year> <title> (special issue on Process Model Evolution). </title>
Reference-contexts: A task is runnable if its PRE-condition evaluates to True. The tasks stand in a chained and decomposed network, and is connected to artifacts, tools and users. A Planner tool helps in building such networks. In SPADE <ref> [BFG93] </ref>, an extended Petri-net formalism is used (L1) and with clustering of natural net units (L2).
Reference: [BGMT88] <author> Gerard Boudier, Ferdinando Gallo, Regis Minot, and Ian Thomas. </author> <title> An Overview of PCTE and PCTE+. </title> <booktitle> In Proc. of the ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, </booktitle> <address> Boston, Massachusetts, </address> <month> November 28-30, </month> <pages> pages 248-257, </pages> <year> 1988. </year>
Reference-contexts: All this require specifications in and translation from a L3 PML. 12 Another alternative is to rely on a virtual file system, where all file accesses are trapped and mapped directly onto the PSEE directory, cf. PCTE <ref> [BGMT88] </ref> or ClearCase [LL93]. Transparent versioning is also easy to arrange with such a solution. 2. PSEE Repository vs. own Sub-Repositories: The cleanest combination is that the production workspace is a sub-database of the core PSEE repository.
Reference: [BK92] <author> Naser S. Barghouti and Gail E. Kaiser. </author> <title> Scaling Up Rule-Based Development Environments. </title> <journal> International Journal on Software Engineering and Knowledge Engineering, World Scientific, </journal> <volume> 2(1) </volume> <pages> 59-78, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: The tasks stand in a chained and decomposed network, and is connected to artifacts, tools and users. A Planner tool helps in building such networks. In SPADE [BFG93], an extended Petri-net formalism is used (L1) and with clustering of natural net units (L2). In Marvel <ref> [BK92] </ref>, activities are described by a dual model: production rules resembling types (L1) and a separate network formalism (L3) to connect the rules and to attach the artifacts. 2.3.2 Artifacts (core) The artifacts describe the product in question. In a reflective system, all process model fragments can be considered artifacts.
Reference: [C + 94] <author> Reidar Conradi et al. EPOS: </author> <title> Object-Oriented and Cooperative Process Modelling. </title> <editor> In Anthony Finkelstein, Jeff Kramer, and Bashar A. Nuseibeh, editors, </editor> <booktitle> Software Process Modelling and Technology (PROMOTER book), </booktitle> <pages> pages 33-70. </pages> <publisher> Research Studies Press/John Wiley & Sons, </publisher> <year> 1994. </year>
Reference-contexts: It is usually stored in a PSEE repository, and consists of model fragments. The model can be interpreted to provide the user with process assistance of some sort (guidance, control, automation). The paper will specially draw on examples from the EPOS PSEE [JC93] <ref> [C + 94] </ref> and its process modelling language called SPELL. EPOS has been developed at NTH in Trondheim since 1989, first as part of a national project, later as a Ph.D. project.
Reference: [Cat94] <author> Rick G. G. Catell. </author> <title> Object Data Management: Object-Oriented and Extended Relational Database Systems. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: The product model will usually contain a basic data model, a product schema, and instances of the latter. At least product composition and dependencies must be described. We generally advocate an object-oriented paradigm (cf. CORBA [Obj92] and ODMG <ref> [Cat94] </ref>), in spite of lack of final standardisation. On modelling of artifacts, we face a strategic choice. One alternative is to model a product as mere placeholders (like in Process Weaver, L3), in order to be independent of the actual product workspace.
Reference: [CFF94] <author> Reidar Conradi, Christer Fernstrom, and Alfonso Fuggetta. </author> <title> Concepts for Evolving Software Processes. </title> <editor> In Anthony Finkelstein, Jeff Kramer, and Bashar A. Nuseibeh, editors, </editor> <booktitle> Software Process Modelling and Technology (PROMOTER book), </booktitle> <pages> pages 9-32. </pages> <publisher> Research Studies Press/ John Wiley & Sons, </publisher> <year> 1994. </year> <note> Also as EPOS TR 187, NTH, 9 Nov. 1992, 26 p., Trondheim. </note>
Reference-contexts: There is yet little agreement on basic concepts, terminology, linguistic constructs, and tool architectures underlying such PSEEs. Some classification of concepts can be found in [CFFS92] [Lon93] [FH93] <ref> [CFF94] </ref>, of languages in [CLJ91] [ABGM92], and of architectures in [BBFL94]. We will use the below definitions. By process we understand a set of goal-oriented, partially ordered and interacting activities, and their associated artifacts and resources (humans, tools, time). Activities, artifacts, tools etc. are called process elements.
Reference: [CFFS92] <author> Reidar Conradi, Christer Fernstrom, Alfonso Fuggetta, and Robert Snowdon. </author> <title> Towards a Reference Framework for Process Concepts. </title> <booktitle> In [Der92], </booktitle> <pages> pages 3-17, </pages> <year> 1992. </year>
Reference-contexts: There is yet little agreement on basic concepts, terminology, linguistic constructs, and tool architectures underlying such PSEEs. Some classification of concepts can be found in <ref> [CFFS92] </ref> [Lon93] [FH93] [CFF94], of languages in [CLJ91] [ABGM92], and of architectures in [BBFL94]. We will use the below definitions. By process we understand a set of goal-oriented, partially ordered and interacting activities, and their associated artifacts and resources (humans, tools, time). Activities, artifacts, tools etc. are called process elements.
Reference: [CHL94] <author> Reidar Conradi, Marianne Hagaseth, and Chunnian Liu. </author> <title> Planning Support for Cooperating Transactions in EPOS. </title> <booktitle> In Proc. CAISE'94, Utrecht, </booktitle> <pages> pages 2-13, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: EPOS has extensive support for cooperating transactions, where high-level cooperation protocols (L3) are translated down to e.g. operational triggers and task networks. Similar has been demonstrated by Adele. EPOS also provides some planning tools for transaction (or project) breakdown, scheduling, and cooperation <ref> [CHL94] </ref>. 2.3.11 Cooperation (non-core) We have two basic modes of cooperation: sequential, e.g. by normal work or review chains, or parallel, e.g. upon workspace overlap. For sequential cooperation, the normal EPOS task networks are used, also across transactions.
Reference: [CLJ91] <author> Reidar Conradi, Chunnian Liu, and M. Letizia Jaccheri. </author> <title> Process Modeling Paradigms. </title> <booktitle> In Proc. 7th International Software Process Workshop - ISPW'7, </booktitle> <address> Yountville (Napa Valley), CA, USA, 16-18 Oct. 1991, </address> <publisher> IEEE-CS Press, </publisher> <pages> pages 51-53, </pages> <year> 1991. </year>
Reference-contexts: There is yet little agreement on basic concepts, terminology, linguistic constructs, and tool architectures underlying such PSEEs. Some classification of concepts can be found in [CFFS92] [Lon93] [FH93] [CFF94], of languages in <ref> [CLJ91] </ref> [ABGM92], and of architectures in [BBFL94]. We will use the below definitions. By process we understand a set of goal-oriented, partially ordered and interacting activities, and their associated artifacts and resources (humans, tools, time). Activities, artifacts, tools etc. are called process elements.
Reference: [Der92] <editor> Jean-Claude Derniame, editor. </editor> <booktitle> Proc. Second European Workshop on Software Process Technology (EWSPT'92), </booktitle> <address> Trondheim, Norway. 253 p. </address> <publisher> Springer Verlag LNCS 635, </publisher> <month> September </month> <year> 1992. </year>
Reference: [ECM91] <author> ECMA. </author> <title> A Reference Model for Frameworks of Computer Assisted Software Engineering Environments. </title> <type> Technical report, </type> <institution> European Computer Manufactoring Association, </institution> <year> 1991. </year> <note> ECMA/TC33 Technical Report, Nov. 1991, Draft Version 1.5. 17 </note>
Reference-contexts: Some aspects to consider are: uniformity of presentation and interaction, easy comprehension of presented information, and flexible choice of presentation formats (filters, viewers). For instance, the external view could be a task network, while the internal activity model is rule-based or inversely! Cf. also the ECMA roaster model <ref> [ECM91] </ref>, where the user interface is made separate. This separation has a tactic consequence: first we should define by fast prototyping the interface on the user's premises and based on familiar concepts according to his role. Then we may consider to implement this interface by some suitable technology.
Reference: [Fer93] <author> Christer Fernstrom. </author> <title> Process WEAVER: Adding Process Support to UNIX. </title> <booktitle> In [Ost93], </booktitle> <pages> pages 12-26, </pages> <year> 1993. </year>
Reference-contexts: Many Process-Centred Software Engineering Environments (PSEEs) have been constructed and documented, although to a less extent tested in industrial settings. A few commercial PSEEs have also become available in the last years, e.g. Process Weaver from Cap <ref> [Fer93] </ref>, and Process Wise Integrator (PWI) from ICL [Rob94]. The goal of this paper is to pragmatically discuss the design of the ideal process modelling language versus the functionality required. A special concern is how existing modelling concepts and linguistic constructs can be used and combined.
Reference: [FG94] <author> Alfonso Fuggetta and Carlo Ghezzi. </author> <title> State of the Art and Open Issues in Process-Centered Software Engineering Environments. </title> <journal> Journal of Systems and Software, </journal> <volume> 26(1) </volume> <pages> 53-60, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: This applies in all lifecycle phases, but especially in the last ones. 9 2.4.1 Tool View (non-core) The tool view deals with how much the process support perturbates the production process. We can identify at least two different tool views or work modes <ref> [FG94] </ref>: 1. In most existing PSEEs, the user has a task-oriented view of the process: The user is directed by the PSEE. That is, most tool activations are strictly controlled and invoked through a central process support interface. That means that all relevant production tools must be enveloped. 2.
Reference: [FH93] <author> Peter H. Feiler and Watts S. Humphrey. </author> <title> Software Process Development and Enactment: Concepts and Definitions. </title> <booktitle> In [Ost93], </booktitle> <pages> pages 28-40, </pages> <year> 1993. </year>
Reference-contexts: There is yet little agreement on basic concepts, terminology, linguistic constructs, and tool architectures underlying such PSEEs. Some classification of concepts can be found in [CFFS92] [Lon93] <ref> [FH93] </ref> [CFF94], of languages in [CLJ91] [ABGM92], and of architectures in [BBFL94]. We will use the below definitions. By process we understand a set of goal-oriented, partially ordered and interacting activities, and their associated artifacts and resources (humans, tools, time). Activities, artifacts, tools etc. are called process elements.
Reference: [Fol83] <author> J. D. Foley. </author> <title> Managing the Design of User Computer Interface. </title> <booktitle> Computer Graphics World, </booktitle> <pages> pages 47-56, </pages> <month> December </month> <year> 1983. </year>
Reference-contexts: Then we may consider to implement this interface by some suitable technology. Much research has been devoted to expressing multiple and possibly incompatible model views to the user. The views can be conceptual (using ViewPoints [NKF93]) and/or graphical (using Smalltalk's Model-View-Controller [GR83]). For the latter, <ref> [Fol83] </ref> recommends showing simply the entities and their relations and operations. EPOS provides the user with an activity network and an agenda. The network is a simple print-out 10 of the internal data of the process engine.
Reference: [GJ92] <author> Volker Gruhn and Rudiger Jegelka. </author> <title> An Evaluation of FUNSOFT Nets. </title> <booktitle> In [Der92], </booktitle> <pages> pages 196-214, </pages> <year> 1992. </year>
Reference-contexts: Evolving an enacting model is known as pulling the rug from telecommunication switches, relying on dynamic linking and special hardware. 7 The available PML mechanisms to support model evolution differ, e.g. by predefined facilities (delayed subtask expansion in MELMAC <ref> [GJ92] </ref>, L1), by a fully reflective PML (as in EPOS, SPADE, and PWI - L2), by another language (as in Marvel, L4), or ad-hoc (Process Weaver, no support). Note, that parts of the process model may exist in many different (translated) forms in a PSEE and its environment, cf.
Reference: [GR83] <author> Adele Goldberg and Dave Robson. </author> <title> Smalltalk-80: The Language and its Implementation. </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year> <pages> 714 pp. </pages>
Reference-contexts: Then we may consider to implement this interface by some suitable technology. Much research has been devoted to expressing multiple and possibly incompatible model views to the user. The views can be conceptual (using ViewPoints [NKF93]) and/or graphical (using Smalltalk's Model-View-Controller <ref> [GR83] </ref>). For the latter, [Fol83] recommends showing simply the entities and their relations and operations. EPOS provides the user with an activity network and an agenda. The network is a simple print-out 10 of the internal data of the process engine.
Reference: [H94] <author> Geir Magne Hydalsvik. </author> <title> Programmering Prosjektarbeid, Forslag til Prosjektoppgave. (In Norwegian, </title> <type> Working note for PhD thesis), </type> <month> August </month> <year> 1994. </year>
Reference-contexts: A quality model is defined, but again followed up manually. Below, we will recapitulate the projected design of a PSEE demonstrator to offer more automatic support for such development projects. The work is done at NTH by a student project group, lead by Geir Magne Hydalsvik <ref> [H94] </ref>. For this demonstrator, Sysdeco insists on using only commercially available tools and databases for this, including their own Systemator tool.
Reference: [IS94] <author> IEEE-Software. </author> <title> Special Issue on Measurement-based Process Improvement. </title> <address> IEEE-Software, </address> <month> July </month> <year> 1994. </year>
Reference-contexts: Before transaction commit, the modified files must be brought back through a similar check-in tool. 2.3.9 Product Quality and Process Performance (non-core) A product quality model includes operational goals of product quality and associated metrics, e.g. review and test status <ref> [IS94] </ref>. The process performance model for process quality expresses compliance to the stated process model, e.g. wrt. deadlines, budget, and user roles.
Reference: [JC93] <author> M. Letizia Jaccheri and Reidar Conradi. </author> <title> Techniques for Process Model Evolution in EPOS. </title> <journal> IEEE Trans. on Software Engineering, </journal> <pages> pages 1145-1156, </pages> <month> December </month> <year> 1993. </year> <title> (special issue on Process Model Evolution). </title>
Reference-contexts: It is usually stored in a PSEE repository, and consists of model fragments. The model can be interpreted to provide the user with process assistance of some sort (guidance, control, automation). The paper will specially draw on examples from the EPOS PSEE <ref> [JC93] </ref> [C + 94] and its process modelling language called SPELL. EPOS has been developed at NTH in Trondheim since 1989, first as part of a national project, later as a Ph.D. project.
Reference: [L + 89] <author> Anund Lie et al. </author> <title> Change Oriented Versioning in a Software Engineering Database. </title> <editor> In Walter F. Tichy (Ed.): </editor> <booktitle> Proc. 2nd International Workshop on Software Configuration Management, </booktitle> <address> Princeton, USA, 25-27 Oct. </address> <year> 1989, </year> <title> 178 p. </title> <booktitle> In ACM SIGSOFT Software Engineering Notes, </booktitle> <volume> 14 (7), </volume> <pages> pages 56-65, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: Note, that there are parts of the process support, that cannot easily be subjected to formal versioning and transactions. We can mention configuration tables in BMSes, shell-envelopes around production tools, or extra triggers in production workspaces. EPOS rely on Change-Oriented Versioning <ref> [L + 89] </ref> [Mun93], giving uniform versioning. Process modelling and versioning work well together (L4). On the one hand, a particular version of a partial product can be checked out into the workspace before the process starts, using EPOSDB facilities and the added check-out tool (Section 2.3.8).
Reference: [LL93] <author> Paul H. Levine and David Leblang. </author> <title> Software Configuration Management: Why is it needed and what should it do? In Proc. </title> <booktitle> of 4th International Workshop on Software Configuration Management (SCM-4), Baltimore, </booktitle> <pages> pages 174-179, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: All this require specifications in and translation from a L3 PML. 12 Another alternative is to rely on a virtual file system, where all file accesses are trapped and mapped directly onto the PSEE directory, cf. PCTE [BGMT88] or ClearCase <ref> [LL93] </ref>. Transparent versioning is also easy to arrange with such a solution. 2. PSEE Repository vs. own Sub-Repositories: The cleanest combination is that the production workspace is a sub-database of the core PSEE repository.
Reference: [Lon93] <author> Jacques Lonchamp. </author> <title> A Structured Conceptual and Terminological Framework for Software Process Engineering. </title> <booktitle> In [Ost93], </booktitle> <pages> pages 41-53, </pages> <year> 1993. </year>
Reference-contexts: There is yet little agreement on basic concepts, terminology, linguistic constructs, and tool architectures underlying such PSEEs. Some classification of concepts can be found in [CFFS92] <ref> [Lon93] </ref> [FH93] [CFF94], of languages in [CLJ91] [ABGM92], and of architectures in [BBFL94]. We will use the below definitions. By process we understand a set of goal-oriented, partially ordered and interacting activities, and their associated artifacts and resources (humans, tools, time). Activities, artifacts, tools etc. are called process elements.
Reference: [LSS94] <author> Odd Ivar Lindland, Guttorm Sindre, and Arne Slvberg. </author> <title> Understanding Quality in Conceptual Modelling. </title> <journal> IEEE Software, </journal> <pages> pages 42-49, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: Phone: +47 73 593444, Fax: +47 73 594466, Email: conradi@idt.unit.no. 1 are faced with similar design decisions in Information Systems Engineering, Business Process Reengineering, Enterprise Modelling etc. resulting in a plethora of modelling formalisms. See also <ref> [LSS94] </ref>. For instance, we may choose to have one large modelling language for the entire domain.
Reference: [Mun93] <author> Bjrn P. Munch. </author> <title> Versioning in a Software Engineering Database the Change Oriented Way. </title> <type> PhD thesis, </type> <address> DCST, NTH, Trondheim, Norway, </address> <month> August </month> <year> 1993. </year> <type> 265 p. (PhD thesis NTH 1993:78). </type>
Reference-contexts: Note, that there are parts of the process support, that cannot easily be subjected to formal versioning and transactions. We can mention configuration tables in BMSes, shell-envelopes around production tools, or extra triggers in production workspaces. EPOS rely on Change-Oriented Versioning [L + 89] <ref> [Mun93] </ref>, giving uniform versioning. Process modelling and versioning work well together (L4). On the one hand, a particular version of a partial product can be checked out into the workspace before the process starts, using EPOSDB facilities and the added check-out tool (Section 2.3.8).
Reference: [Mye89] <author> Brad A. Myers. </author> <title> User-Interface Tools: Introduction and Survey. </title> <journal> IEEE Software, </journal> <volume> 6(1) </volume> <pages> 15-23, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: This fact is amplified by the delicate balance between control and assistance, cf. the previous subsection. However, the problem of displaying complex and heterogeneous information to users with different levels of competence and goals, are shared by most computerised systems <ref> [Mye89] </ref>. The general paradigm of user interfaces is that we should split how is works (internal model, e.g. in C or Prolog) from how to do it (external view) - i.e. L3 or even L4.
Reference: [NKF93] <author> Bashar Nuseibeh, Jeff Kramer, and Anthony Finkelstein. </author> <title> Expressing the Relationship between Multiple Views in Requirements Specification. </title> <booktitle> In Proc. 15th IEEE Int. Conf. on Software Engineering (ICSE), </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: Then we may consider to implement this interface by some suitable technology. Much research has been devoted to expressing multiple and possibly incompatible model views to the user. The views can be conceptual (using ViewPoints <ref> [NKF93] </ref>) and/or graphical (using Smalltalk's Model-View-Controller [GR83]). For the latter, [Fol83] recommends showing simply the entities and their relations and operations. EPOS provides the user with an activity network and an agenda. The network is a simple print-out 10 of the internal data of the process engine.
Reference: [Obj92] <author> Object Management Group, </author> <title> 492 Old Connecticut Path, Framingham, MA 01701, USA. OMG CORBA Common Object Request Broker Architecture Specification, </title> <month> January </month> <year> 1992. </year>
Reference-contexts: In a reflective system, all process model fragments can be considered artifacts. The product model will usually contain a basic data model, a product schema, and instances of the latter. At least product composition and dependencies must be described. We generally advocate an object-oriented paradigm (cf. CORBA <ref> [Obj92] </ref> and ODMG [Cat94]), in spite of lack of final standardisation. On modelling of artifacts, we face a strategic choice. One alternative is to model a product as mere placeholders (like in Process Weaver, L3), in order to be independent of the actual product workspace.
Reference: [Ost93] <editor> Leon Osterweil, editor. </editor> <booktitle> Proc. 2nd Int'l Conference on Software Process (ICSP'2), </booktitle> <address> Berlin. 170 p. </address> <publisher> IEEE-CS Press, </publisher> <month> March </month> <year> 1993. </year>
Reference: [Rob94] <author> Ian Robertson. </author> <title> An Implementation of the ISPW-6 Process Example. </title> <booktitle> In [War94], </booktitle> <pages> pages 187-206, </pages> <year> 1994. </year>
Reference-contexts: Many Process-Centred Software Engineering Environments (PSEEs) have been constructed and documented, although to a less extent tested in industrial settings. A few commercial PSEEs have also become available in the last years, e.g. Process Weaver from Cap [Fer93], and Process Wise Integrator (PWI) from ICL <ref> [Rob94] </ref>. The goal of this paper is to pragmatically discuss the design of the ideal process modelling language versus the functionality required. A special concern is how existing modelling concepts and linguistic constructs can be used and combined. Therefore, interoperability between different languages and related models and tools are emphasised.
Reference: [SC92] <editor> H. G. Sol and R. L. Crosslin, editors. </editor> <title> Dynamic Modelling of Information Systems 2. </title> <publisher> North-Holland, </publisher> <year> 1992. </year> <month> 18 </month>
Reference: [vV92] <author> Kees M. van Hee and P. A. C. Verkoulen. </author> <title> Data, Process and Behaviour Modelling in an Integrated Specification Framework. </title> <booktitle> In [SC92], </booktitle> <pages> pages 191-218, </pages> <year> 1992. </year>
Reference-contexts: There is clear analogy with conceptual modelling of software systems: In newer approaches (see e.g. <ref> [vV92] </ref>), entity-relationship or object-oriented data models have been effectively combined with data flow diagrams or Petri-nets to describe the static and dynamic parts of the domain, respectively.
Reference: [War94] <editor> Brian Warboys, editor. </editor> <booktitle> Proc. Third European Workshop on Software Process Technology (EWSPT'94), </booktitle> <address> Villard-de-Lans, France. 274 p. </address> <publisher> Springer Verlag LNCS 772, </publisher> <month> February </month> <year> 1994. </year> <note> epos/papers/pml-ewspt95.tex liu/PMseg/liu.tex 19 </note>
References-found: 37

