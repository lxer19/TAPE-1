URL: http://osl.cs.uiuc.edu/~m-astle/papers/hcw98.ps
Refering-URL: http://osl.cs.uiuc.edu/~m-astle/
Root-URL: http://www.cs.uiuc.edu
Email: Email: agha@cs.uiuc.edu  
Phone: Phone: (217) 244-3087  
Title: Modular Heterogeneous System Development: A Critical Analysis of Java  
Author: Gul A. Agha, Mark Astley, Jamil A. Sheikh, and Carlos Varela 
Address: Urbana, IL 61801, USA  
Affiliation: Department of Computer Science Univ. of Illinois at Urbana-Champaign  
Abstract: Java supports heterogeneous applications by transforming a heterogeneous network of machines into a homogeneous network of Java virtual machines. This approach abstracts over many of the complications that arise from heterogeneity, providing a uniform API to all components of an application. However, for many applications heterogeneity is an intentional feature where components and resources are co-located for optimal performance. We argue that Java's API does not provide an effective means for building applications in such an environment. Specifically, we suggest improvements to Java's existing mechanisms for maintaining consistency (e.g. synchronized), and controlling resources (e.g. thread scheduling). We also consider the recent addition of a CORBA API in JDK 1.2. We argue that while such an approach provides greater flexibility for heterogeneous applications, many key problems still exist from an architectural standpoint. Finally, we consider the future of Java as a foundation for component-based software in heterogeneous environments and suggest architectural abstractions which will prove key to the successful development of such systems. We drive the discussion with examples and suggestions from our own work on the Actor model of computation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> YOU'RE THE TOP: </institution> <note> A research note from the standish group. Available at http://www.ncr.com/product/integrated /analyst reports/standish-your/index.htm. </note>
Reference-contexts: Top End is part of the Top End Service Interface Repository (TESIR) model designed by NCR for supporting access to legacy applications, and which defines a general object service mechanism <ref> [1] </ref>. NCR plans to launch the underlying infrastructure of Top-ORB in 1998. The Solaris NEO system from Sun is similar to CORBA and designed around the same object model. JOE is another Sun product which provides for distributed client-server applications, and complies with the CORBA 2.0 standard.
Reference: [2] <author> G. Agha. </author> <title> Actors: A Model of Concurrent Computation in Distributed Systems. </title> <publisher> MIT Press, </publisher> <year> 1986. </year>
Reference-contexts: In Section 4, we present a future vision of Java as a tool for implementing large grain coordination and management for heterogeneous applications. We describe lessons learned from our research in Actor <ref> [2] </ref> systems and propose several abstractions to be incorporated in future Java developments. We present concluding remarks in Section 5. 2 Heterogeneity in Java Software executing in a heterogeneous environment is naturally segmented into a collection of distributed, coordinating objects.
Reference: [3] <author> S. Frtlund. </author> <title> Coordinating Distributed Objects: An Actor-Based Approach to Synchronization. </title> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: We view the synchronized keyword as too low-level for effective use by application developers. Specifically, requiring developers to implement sophisticated synchronization constraints in terms of low-level primitives is error prone and difficult to debug. Synchronizers <ref> [4, 3] </ref> are linguistic abstractions which describe synchronization constraints over collections of actors (see Figure 2). In particular, synchronizers allow the specification of message patterns which are associated with rules that enable or disable methods on actors.
Reference: [4] <author> S. Frtlund and G. Agha. </author> <title> Object-Based Models and Languages for Concurrent Systems, chapter Abstracting Interactions Based on Message Sets. </title> <booktitle> Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: We view the synchronized keyword as too low-level for effective use by application developers. Specifically, requiring developers to implement sophisticated synchronization constraints in terms of low-level primitives is error prone and difficult to debug. Synchronizers <ref> [4, 3] </ref> are linguistic abstractions which describe synchronization constraints over collections of actors (see Figure 2). In particular, synchronizers allow the specification of message patterns which are associated with rules that enable or disable methods on actors.
Reference: [5] <author> J. Gosling, B. Joy, and G. Steele. </author> <title> The Java Language Specification. </title> <publisher> Addison Wesley, </publisher> <year> 1996. </year>
Reference-contexts: A particular example is the ability of application programmers to control thread scheduling. While the Java language specification <ref> [5] </ref> encourages language implementors to write fair schedulers, this rule is not enforced. Hence, different environments may provide different schedulers emphasizing particular applications.
Reference: [6] <author> J. Gosling and H. McGilton. </author> <title> The java language environment: A white paper. </title> <type> Technical report, </type> <institution> Sun Microsystems Inc., </institution> <month> May </month> <year> 1996. </year> <note> Available at http://www.javasoft.com/docs /white/index.html. </note>
Reference-contexts: Still other environments, may utilize a hybrid of these two solutions. Many languages and programming environments exist for managing heterogeneous computing environments. The Java programming language is an example which directly addresses the technical problems cre-ated by a heterogeneous environment. In the words of its designers <ref> [6] </ref>: Java is designed to meet the challenges of application development in the context of heterogeneous, network-wide distributed environments. Paramount among these challenges is secure delivery of applications that consume the minimum of system resources, can run on any hardware and software plat form, and can be extended dynamically.
Reference: [7] <author> Object Management Group. </author> <title> CORBA services: Common object services specification version 2. </title> <type> Technical report, </type> <institution> Object Management Group, </institution> <month> June </month> <year> 1997. </year> <note> Available at http://www.omg.org/corba. </note>
Reference-contexts: A detailed description of each of these features is not within the scope of this paper. We refer the interested reader to <ref> [7] </ref> for more details. In addition to the features described above, ORBs provide several other features which simplify system development.
Reference: [8] <author> Open Systems Lab. </author> <title> The actor foundry: A java-based actor programming environment. </title> <note> Available for download at http://www-osl.cs.uiuc.edu/~astley/foundry.html. </note>
Reference-contexts: Despite our reservations, we believe that Java is an important step towards developing appropriate tools for building heterogeneous systems. In particular, we have used Java as the development environment for a prototype actor system which incorporates many of the abstractions described above <ref> [8] </ref>. Acknowledgments We thank past and present members of the Open Systems Laboratory who aided in this research. The research described has been made possible in part by support from the National Science Foundation (NSF CCR-9619522) and the Air Force Office of Science Research (AF BASAR 2689 ANTIC).
Reference: [9] <author> M. Shaw, R. DeLine, D. V. Klein, T. L. Ross, D. M. Young, and G. Zelesnik. </author> <title> Abstractions for software architecture and tools to support them. </title> <journal> IEEE Transactions on Software Engineer--ing, </journal> <month> April </month> <year> 1995. </year>
Reference-contexts: Currently, this is an active area of research in the software architecture community in which such systems are viewed as consisting of a collection of components, which encapsulate computation, and a collection of connectors, which describe how components are integrated into the architecture <ref> [9] </ref>. This separation of design concerns favors a compositional approach to system design; a methodology which is particularly important when specifying architectures for heterogeneous distributed systems. Heterogeneity, failure, and the potential for unpredictable interactions yield evolving systems which require complex management policies.
Reference: [10] <author> D. C. Sturman. </author> <title> Modular Specification of Interaction Policies in Distributed Computing. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <month> May </month> <year> 1996. </year>
Reference-contexts: Applications requiring specific policies must either use a custom coded ORB implementation, or embed policy code within clients and servers. Both approaches are error-prone and make systems less modular. Our research in Actors has lead to a novel approach for separating communication policies from application code. Communicators <ref> [10] </ref> rely on a meta-architecture to abstract over the communication behavior of Actors.
Reference: [11] <author> The Java Team. </author> <title> JDK 1.2 Beta specification. </title> <note> Available at http://developer.javasoft.com/developer/ earlyAccess/jdk12. </note>
Reference-contexts: In particular, to answer the challenge of high-performance systems, Java must make local, optimized servers more available to Java clients. Currently, there are joint efforts between Sun and OSF to link CORBA and Java for precisely this reason <ref> [11] </ref>. However, we believe that while Java should be more ORB-like, it should also overcome many of the weaknesses of existing ORBs such as the inability to customize interactions between ORB-served objects.

References-found: 11

