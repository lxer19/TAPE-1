URL: http://www.eecs.umich.edu/~andrewdn/591/design_doc/ds.ps
Refering-URL: http://www.eecs.umich.edu/~andrewdn/591/design_doc/
Root-URL: http://www.cs.umich.edu
Email: bradc@eecs.umich.edu  tpkelly@eecs.umich.edu  andrewdn@eecs.umich.edu Lukasz Opyrchal lukasz@eecs.umich.edu  
Title: Dr. T and Mr. Hide: Communications Infrastructures for Distributed Interactive Applications  
Author: Brad Clement Terence Kelly Andrew Nierman 
Web: http://www-personal.engin.umich.edu/~tpkelly/ds/  
Note: This document is available in HTML on the World Wide Web at  
Date: October 29, 1997  
Address: Ann Arbor, MI 48109 USA  
Affiliation: Artificial Intelligence Lab University of Michigan  
Abstract: We present decentralized communication services for interactive multiuser applications. Our design was motivated by applications that need consistent replicated shared memory, e.g. collaborative whiteboard systems and distributed multi-player games. Our simplest service, "Dr. T," can create for application software the illusion of a collection of users at a single computer and is unaware of application state. A more sophisticated service, "Mr. Hide," uses knowledge of application state to provide a looser brand of consistency and greater scalability for multi-player games where players may directly interact or may be hidden from each other. With Dr. T, a multi-player game can offer players equal rates of access to the game-world and ensures that all players see the same sequence of game state updates. Using Mr. Hide may only ensure this fairness and consistency within groups of interacting players, thus allowing greater concurrency among different regions of game play in the environment. By comparing the performance characteristics of Dr. T and Mr. Hide, we can empirically evaluate the tradeoffs between a simple implementation that is oblivious to the semantics of higher software layers and a more elaborate infrastructure that facilitates concurrency by exploiting knowledge of higher-level semantics. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Y. Amir, L.E. Moser, P.M. Melliar-Smith, D.A. Agarwal, and P. Ciarfella. </author> <title> The totem single-ring ordering and membershop protocol. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 13(4) </volume> <pages> 311-342, </pages> <month> November </month> <year> 1995. </year>
Reference-contexts: Whereas in the Totem single-ring protocol the token is used to sequence messages <ref> [1, 22] </ref>, in Dr. T "the medium is the message" | the token itself carries data among processes. The role of the token is to carry user input sampled at each host to all other hosts. We assume that user input, sampled at 30 Hz, is compact.
Reference: [2] <author> John Bentley. </author> <title> Writing Efficient Programs. </title> <publisher> Prentice Hall, </publisher> <year> 1982. </year> <note> ISBN 0 13-970244-X. </note>
Reference-contexts: T 2.2.1 Design Philosophy The basic philosophy behind Dr. T is that simplicity is a virtue and that optimization ought only be attempted when a simple system proves to be unacceptably slow <ref> [2, 14] </ref>. While modern networks are often slower than we'd like, our tests indicate that ethernets and campus-sized WANs are fast enough to support fast-paced distributed interactive applications involving dozens of processes using a very simple token-based scheme.
Reference: [3] <author> Kenneth P. Birman. </author> <title> The process group approach to reliable distributed computing. </title> <journal> Communications of the ACM, </journal> <volume> 36(12) </volume> <pages> 37-53, </pages> <month> December </month> <year> 1993. </year>
Reference: [4] <author> David R. Cheriton and Dale Skeen. </author> <title> Understanding the limitations of causally and totally ordered communication. </title> <journal> Operating Systems Review (ACM), </journal> <volume> 27(5) </volume> <pages> 44-57, </pages> <month> December </month> <year> 1993. </year> <title> An excellent critique of CATOCS, illustrating why in many cases it at once provides too much and too little to application-level software. </title>
Reference-contexts: We believe that these considerations will lead distributed interactive application developers away from general-purpose CATOCS infrastructures, which offer at once too much and too little for many purposes <ref> [4] </ref>, and toward a simple system designed with their application domain specifically in mind. 2.2.2 A Simple Token Ring Implementation In a simple implementation of Dr.
Reference: [5] <author> Douglas E. Comer. </author> <title> Internetworking with TCP/IP: Principles, Protocols, and Architecture, volume I. </title> <publisher> Prentice Hall, </publisher> <address> third edition, </address> <year> 1995. </year> <note> ISBN 0-13-216987-8. </note>
Reference: [6] <author> Douglas E. Comer and David L. Stevens. </author> <title> Internetworking with TCP/IP: Design, Implementation, and Internals, volume II. </title> <publisher> Prentice Hall, </publisher> <address> second edition, </address> <year> 1994. </year> <note> ISBN 0-13-125527-4. </note>
Reference: [7] <author> Douglas E. Comer and David L. Stevens. </author> <title> Internetworking with TCP/IP: Client-Server Programming and Applications, volume III. </title> <publisher> Prentice Hall, </publisher> <address> second edition, </address> <year> 1996. </year> <title> This book comes in three flavors: WinSock, TLI, and Berkeley sockets. We're using the Berkeley sockets version. </title> <note> ISBN 0-13-260969-X. </note>
Reference: [8] <author> Ian F. Darwin. </author> <title> Checking C Programs with lint. </title> <publisher> O'Reilly & Associates, </publisher> <year> 1988. </year> <title> One of a very few books currently available on lint. Neither large nor recent, but provides a decent introduction to the basics. Also noteworthy for reprinting the Ten Commandments for C Programmers in an appendix. </title> <note> ISBN 0-937175-30-7. </note>
Reference: [9] <author> Margaret A. Ellis and Bjarne Stroustrup. </author> <title> The Annotated C++ Reference Manual. </title> <publisher> Addison-Wesley, </publisher> <month> April </month> <year> 1995. </year> <note> ISBN 0-201-51459-1. </note>
Reference: [10] <author> David Evans. </author> <title> The LCLint User's Guide. </title> <institution> MIT Laboratory for Computer Science, </institution> <address> 2.2 edition, </address> <month> August </month> <year> 1996. </year> <title> LCLint is a powerful lint that uses special comments to convey the programmer's intentions to the verifier. Read all about it on the Web at http://larch-www.lcs.mit.edu:8001/larch/lclint/. </title>
Reference: [11] <author> Simson Garfinkel, Daniel Weise, and Steven Strassmann. </author> <title> The UNIX-Hater's Handbook. </title> <publisher> IDG Books, </publisher> <year> 1994. </year> <title> A bitterly humorous look at the Dr. T October 29, 1997 16 dark side of Unix, written by knowledgeable programmers. Worth the purchase price for the chapter subtitles alone, e.g. "power tools for power fools" and, for the C++ chapter, "the COBOL of the 90's." </title> <note> ISBN 1-56884-203-1. </note>
Reference-contexts: Our first concern was the curses library, which has a reputation for being inefficient <ref> [11] </ref>. We found that curses can change every character of a 100 by 50 character screen array at a rate of over 30 Hz on an UltraSparc. This is fast enough for a fast-paced game.
Reference: [12] <author> Laurent Gautier and Christophe Diot. Mimaze, </author> <title> a multiuser game on the internet. </title> <type> Technical Report RR-3248, </type> <institution> Institut National de Recherche en Informatique et en Automatique (INRIA), </institution> <month> September </month> <year> 1997. </year> <note> Available on the Web at http://www.inria.fr/rodeo/MiMaze/ReportInt.html. </note>
Reference: [13] <author> Audio-Video Transport Working Group. Rtp: </author> <title> A transport protocol for real-time applications. Internet RFC 1889, </title> <month> January </month> <year> 1996. </year> <note> Available on the Web at http://www.cis.ohio-state.edu/htbin/rfc/rfc1889.html. </note>
Reference: [14] <author> David R. Hanson. </author> <title> C Interfaces and Implementations. </title> <publisher> Addison-Wesley Professional Computing Series. Addison-Wesley, </publisher> <year> 1997. </year> <title> An excellent book on modular and reusable software design by a true Jedi master of C (and a former professor of mine). All of the source code described in the book is available on the Web at http://www.cs.princeton.edu/software/cii/. The book itself is produced with the aid of Ramsey's noweb literate programming tool [29, </title> <type> 28]. </type>
Reference-contexts: T 2.2.1 Design Philosophy The basic philosophy behind Dr. T is that simplicity is a virtue and that optimization ought only be attempted when a simple system proves to be unacceptably slow <ref> [2, 14] </ref>. While modern networks are often slower than we'd like, our tests indicate that ethernets and campus-sized WANs are fast enough to support fast-paced distributed interactive applications involving dozens of processes using a very simple token-based scheme. <p> This greatly enhances the readability of the code and helps us to ensure that our code is in agreement with our documentation. For an example of an entire library of high-quality C routines documented in this style, see <ref> [14] </ref>. 3.1 Dr. T In this section we present only the interface to the Dr. T library. In more concrete terms the interface consists of a C header file which clients of Dr. T must #include. The header file contains macro definitions and prototypes for functions exported by the Dr.
Reference: [15] <author> Brian W. Kernighan and Dennis M. Ritchie. </author> <title> The C Programming Language. </title> <publisher> Prentice Hall, </publisher> <address> second edition, </address> <year> 1988. </year> <title> See section 2.5, page 41, for the ugly truth about integer division and modulus involving negative operands. </title> <note> ISBN 0-13-110362-8. </note>
Reference: [16] <author> Donald E. Knuth. </author> <title> Literate Programming. Center for the Study of Language and Information, </title> <publisher> Stanford, </publisher> <address> California, </address> <year> 1992. </year> <note> The 1995 printing is thought to be error-free. ISBN 0-937073-80-6. Details available on the Web at http://www-cs-faculty.Stanford.EDU/~knuth/lp.html. </note>
Reference-contexts: T and Mr. Hide. An application built atop Dr. T is confronted with a relatively simple interface. Mr. Hide demands more from application-level software, but may offer enhanced performance by taking advantage of knowledge of the application state. Through the magic of literate programming <ref> [16] </ref> and in particular Norman Ramsey's excellent noweb tool [29, 28], we are able to present all of our actual C source code in a typeset document, interspersed with explanatory notes.
Reference: [17] <author> Andrew Koenig. </author> <title> C traps and Pitfalls. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year> <title> Includes a brief discussion of C portability issues. </title> <note> ISBN 0-201-17928-8. </note>
Reference: [18] <author> Leslie Lamport. </author> <title> L A T E X User's Guide and Reference Manual. Addison-Wesley, </title> <note> second edition, 1994. ISBN 0-201-52983-1. </note>

Reference: [20] <author> Stephen A. Maguire. </author> <title> Debugging The Development Process. </title> <publisher> Microsoft Press, </publisher> <year> 1994. </year> <title> Whereas [19] is for individual programmers, this book is for small software team leaders. </title> <journal> ISBN 1-55615-650-2. Dr. </journal> <note> T October 29, 1997 17 </note>
Reference: [21] <author> David L. Mills. </author> <title> Network time protocol. Internet RFC 1305, </title> <month> March </month> <year> 1992. </year> <note> Available on the Web at http://www.cis.ohio-state.edu/htbin/rfc/rfc1305.html. </note>
Reference: [22] <author> L.E. Moser, P.M. Melliar-Smith, D.A. Agarwal, R.K. Budhia, and C.A. Lingley-Papadopoulos. Totem: </author> <title> A fault-tolerant multicast group communication system. </title> <journal> Communications of the ACM, </journal> <volume> 39(4) </volume> <pages> 54-63, </pages> <month> April </month> <year> 1996. </year>
Reference-contexts: Whereas in the Totem single-ring protocol the token is used to sequence messages <ref> [1, 22] </ref>, in Dr. T "the medium is the message" | the token itself carries data among processes. The role of the token is to carry user input sampled at each host to all other hosts. We assume that user input, sampled at 30 Hz, is compact.
Reference: [23] <author> Sape Mullender, </author> <title> editor. Distributed Systems. </title> <publisher> ACM Press Frontier Series. Addison-Wesley, </publisher> <address> second edition, </address> <year> 1993. </year> <note> ISBN 0-201-62427-3. </note>
Reference-contexts: T can sample input at over 100 hosts on a LAN at a rate of 30 Hz. Dr. T provides very simple "group membership" services, allowing processes to join and leave an existing process group. Assuming only benign failures (in the sense of <ref> [23, page 101] </ref>), Dr. T furthermore guarantees reliable and totally ordered delivery of input in that every process in a Dr. T group is guaranteed to see the same stream of inputs. Finally, a straightforward token-based implementation of Dr.
Reference: [24] <author> J. Oikarinen and D. Reed. </author> <title> Internet relay chat protocol. Internet RFC 1459, </title> <month> May </month> <year> 1993. </year> <note> Available on the Web at http://www.cis.ohio-state.edu/htbin/rfc/rfc1459.html. </note>
Reference: [25] <author> P. J. Plauger. </author> <title> The Standard C Library. </title> <publisher> Prentice Hall, </publisher> <year> 1992. </year> <title> Provides a thorough description and an implementation of the ANSI standard C library. </title> <note> ISBN 0-13-131509-9. </note>
Reference-contexts: T library. In more concrete terms the interface consists of a C header file which clients of Dr. T must #include. The header file contains macro definitions and prototypes for functions exported by the Dr. T interface. As is customary in C interfaces, we use a macro guard <ref> [25, page 11] </ref> to ensure idempotence.
Reference: [26] <author> William H. Press, Saul A. Teukolsky, William T. Vetterling, and Brian P. Flannery. </author> <title> Numerical Recipes in C. </title> <publisher> Cambridge University Press, </publisher> <address> second edition, </address> <year> 1992. </year> <pages> Chapter 7, pages 274-316, </pages> <note> is devoted to random number generation. ISBN 0-521-43108-5. There's also a Numerical Recipes Web page at http://cfata2.harvard.edu/nr/nrhome.html, where the most important books in the series are available in PostScript and PDF form. </note>
Reference: [27] <author> Pure Software, 1309 S. Mary Ave., </author> <title> Sunnyvale CA 94087. Purify User's Guide. An excellent introduction to an excellent tool. My edition is labelled part number PFY300-XPX-UGD. </title> <note> Visit the Pure Software Web site at http://www.pureatria.com/. </note>
Reference: [28] <author> Norman Ramsey. noweb(1), noweave(1), </author> <title> and notangle(1) manual pages. </title> <institution> University of Virginia. </institution> <note> The noweb family of tools is installed on the University of Michigan CAEN system in /afs/engin.umich.edu/u/t/p/tpkelly/bin/. The noweb tools are freely available on the Web at http://www.cs.virginia.edu/~nr/noweb/. </note>
Reference-contexts: An application built atop Dr. T is confronted with a relatively simple interface. Mr. Hide demands more from application-level software, but may offer enhanced performance by taking advantage of knowledge of the application state. Through the magic of literate programming [16] and in particular Norman Ramsey's excellent noweb tool <ref> [29, 28] </ref>, we are able to present all of our actual C source code in a typeset document, interspersed with explanatory notes. This greatly enhances the readability of the code and helps us to ensure that our code is in agreement with our documentation.
Reference: [29] <author> Norman Ramsey. </author> <title> Literate programming simplified. </title> <journal> IEEE Software, </journal> <volume> 11(5) </volume> <pages> 97-105, </pages> <month> September </month> <year> 1994. </year> <title> Describes Ramsey's noweb(1) family of simple literate programming tools. </title>
Reference-contexts: An application built atop Dr. T is confronted with a relatively simple interface. Mr. Hide demands more from application-level software, but may offer enhanced performance by taking advantage of knowledge of the application state. Through the magic of literate programming [16] and in particular Norman Ramsey's excellent noweb tool <ref> [29, 28] </ref>, we are able to present all of our actual C source code in a typeset document, interspersed with explanatory notes. This greatly enhances the readability of the code and helps us to ensure that our code is in agreement with our documentation.
Reference: [30] <author> Richard M. Stallman and Roland McGrath. </author> <title> GNU Make. Free Software Foundation, </title> <type> 59 Temple Place, Suite 330, </type> <address> Boston MA 02111, 0.50 edition, </address> <month> March </month> <year> 1996. </year> <note> ISBN 1-882114-79-5. </note>
Reference: [31] <author> W. Richard Stevens. </author> <title> UNIX Network Programming. </title> <publisher> Prentice Hall, </publisher> <year> 1990. </year> <note> ISBN 0-13-949876-1. </note>
Reference: [32] <author> Bjarne Stroustrup. </author> <title> The Design and Evolution of C++. </title> <publisher> Addison-Wesley, </publisher> <month> April </month> <year> 1995. </year> <note> ISBN 0-201-54330-3. Dr. T October 29, 1997 18 </note>
Reference: [33] <author> Bjarne Stroustrup. </author> <title> The C++ Programming Language. </title> <publisher> Addison-Wesley, </publisher> <address> third edition, </address> <month> August </month> <year> 1997. </year> <note> ISBN 0-201-88954-4. </note>
Reference: [34] <author> Andrew S. Tanenbaum. </author> <title> Distributed Operating Systems. </title> <publisher> Prentice Hall, </publisher> <year> 1995. </year> <note> ISBN 0-13-219908-4. </note>
Reference-contexts: 1 Introduction 1.1 Dr. T Consider Tanenbaum's definition of a distributed system: "a collection of independent computers that appear to the users of the system as a single computer" <ref> [34, page 2] </ref>. We can identify cases where an application program would benefit from an analogous illusion, the illusion that a collection of users interacting with different hosts on a network appear to be a single user. Examples include shared whiteboard programs and fast-paced video games.
Reference: [35] <author> Peter van der Linden. </author> <title> Expert C Programming: Deep C Secrets. </title> <publisher> Prentice Hall, </publisher> <year> 1994. </year> <title> A highly readable and humorous look into the dark corners of C by a member of Sun's compiler and OS kernel group. Highly recommended. </title> <note> ISBN 0-13-177429-8. More information is available on the Web at http://www.sun.com/books/books/vanderLinden/vanderLinden.html. </note>
Reference-contexts: In a simple keyboard-operated game application, the get_input () function will be a non-blocking read from the keyboard (the Unix curses library provides non-blocking getchar (); see <ref> [35] </ref> for more tips on non-blocking and interrupt-driven I/O in Unix). Finally, after_update () is called. In a curses-based game, this function might in turn call refresh ().
Reference: [36] <author> Kevin Watkins. </author> <title> Discrete Event Simulation in C. </title> <booktitle> McGraw-Hill International Series in Software Engineering. </booktitle> <publisher> McGraw-Hill, </publisher> <year> 1993. </year> <note> Includes code on diskette, none of which was used in the project described in this paper. ISBN 0-07-707733-4. </note>
Reference: [37] <editor> Gray Watson. </editor> <address> Debug Malloc Library, 3.2.0 edition, </address> <month> January </month> <year> 1997. </year> <title> Debug malloc is poor man's Purify. It's a drop-in replacement for the standard C library malloc. Detects many of the same errors as Purify (e.g. leaks, some forms of corruption). Available free on the Web at ftp://ftp.letters.com/src/dmalloc/. Dr. T October 29, 1997 19 Dr. T October 29, 1997 20 of CAEN). Dr. T October 29, 1997 21 Dr. T October 29, 1997 22 size. The upper series is for Solaris, the lower series is for Win32. </title>
References-found: 36

