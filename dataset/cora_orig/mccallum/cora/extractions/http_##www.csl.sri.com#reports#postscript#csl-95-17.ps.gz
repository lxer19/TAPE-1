URL: http://www.csl.sri.com/reports/postscript/csl-95-17.ps.gz
Refering-URL: http://www.csl.sri.com/trlist.html
Root-URL: 
Title: Finite-State Analysis of Space Shuttle Contingency Guidance Requirements  
Author: Judith Crow 
Note: July 15, 1996  
Address: Menlo Park CA 94025 USA  
Affiliation: Computer Science Laboratory SRI International  
Abstract: SRI Technical Report SRI-CSL-95-17 Also Available as NASA Contractor Report 4741 
Abstract-found: 1
Intro-found: 1
Reference: [AG93] <author> Joanne M. Atlee and John Gannon. </author> <title> State-Based Model Checking of Event-Driven System Requirements. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 19(1) </volume> <pages> 24-40, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: As far as we've been able to determine, only one other application to the domain of software requirements has been documented. Atlee and Gannon <ref> [AG93] </ref> describe a largely automated technique for transforming tabular, SCR-style requirements [HKPS78] such as those used in [vS90] into a finite-state machine analyzable by the CTL model checker [CES86, McM93].
Reference: [BCC + 95] <author> R. Butler, J. Caldwell, V. Carreno, M. Holloway, P. Miner, and B. Di Vito. </author> <title> NASA Langley's Research and Technology Transfer Program in Formal Methods. </title> <booktitle> In Tenth Annual Conference on Computer Assurance COMPASS 95, </booktitle> <pages> pages 26-30, </pages> <address> Gaithersburg, MD, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: Introduction The project documented in this report was undertaken in the context of a research program in formal methods <ref> [BCC + 95] </ref> and forms part of a study intended to demonstrate that formal specification and verification can enhance the clarity, precision, and comprehension of requirements specifications for space applications.
Reference: [BCM + 92] <author> J. R. Burch, E. M. Clarke, K. L. McMillan, D. L. Dill, and L. J. Hwang. </author> <title> Symbolic Model Checking: 10 20 States and Beyond. </title> <journal> Information and Computation, </journal> <volume> 98(2) </volume> <pages> 142-170, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: This observation led us to wonder whether the type of mode-sequencing exemplified by 3E/O could be verified most effectively using finite-state analysis techniques. 1 3.1 Finite-State Verification Techniques Finite-state verification techniques, described in <ref> [ZWR + 80, CG87, BCM + 92, Kur93, McM93] </ref>, have been around in one guise or another since at least the late 1970's.
Reference: [BGM82] <author> Robert S. Boyer, Milton W. Green, and J. Strother Moore. </author> <title> The Use of a Formal Simulator to Verify a Simple Real Time Control Program. </title> <type> Technical Report ICSCA-CMP-29, </type> <institution> Institute for Computing Science and Computer Applications, </institution> <month> July </month> <year> 1982. </year>
Reference-contexts: Boyer, Green, and Moore discuss an initial investigation into applying formal methods to programs that interact with environments using a very simple example: "steering a vehicle down a 31 32 Chapter 4. Discussion straightline course in a crosswind that varies with time" <ref> [BGM82, 3] </ref>, but apparently have not pursued this or similar examples on a more realistic scale.
Reference: [CES86] <author> E. M. Clarke, E. Emerson, and A. Sistla. </author> <title> Automatic Verification of Finite State Concurrent Systems Using Temporal Logic Specifications. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 8(2) </volume> <pages> 244-263, </pages> <month> April </month> <year> 1986. </year>
Reference-contexts: Atlee and Gannon [AG93] describe a largely automated technique for transforming tabular, SCR-style requirements [HKPS78] such as those used in [vS90] into a finite-state machine analyzable by the CTL model checker <ref> [CES86, McM93] </ref>. The technique is used to analyze safety properties of two examples, each with a small set of environmental conditions: an automobile cruise control system and a water-level monitoring system.
Reference: [CG87] <author> E. M. Clarke and O. Grumberg. </author> <title> Research on Automatic Verification of Finite-State Concurrent Systems. </title> <editor> In Joseph F. Traub, Barbara J. Grosz, Butler W. Lampson, and Nils J. Nilsson, editors, </editor> <booktitle> Annual Review of Computer Science, </booktitle> <volume> Volume 2, </volume> <pages> pages 269-290. </pages> <publisher> Annual Reviews, Inc., </publisher> <address> Palo Alto, CA, </address> <year> 1987. </year>
Reference-contexts: This observation led us to wonder whether the type of mode-sequencing exemplified by 3E/O could be verified most effectively using finite-state analysis techniques. 1 3.1 Finite-State Verification Techniques Finite-state verification techniques, described in <ref> [ZWR + 80, CG87, BCM + 92, Kur93, McM93] </ref>, have been around in one guise or another since at least the late 1970's.
Reference: [CM88] <author> K. Mani Chandy and Jayadev Misra. </author> <title> Parallel Program Design A Foundation. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1988. </year>
Reference-contexts: Formal Analysis of Contingency 3E/O Sequencing which is loosely-based on Chandy and Misra's Unity model <ref> [CM88] </ref> and includes user-defined datatypes, procedures, and parameterized descriptions. A Mur description consists of constant and type declarations, variable declarations, rule definitions, start states, and a collection of invariants.
Reference: [DDHY92] <author> David L. Dill, Andreas J. Drexler, Alan J. Hu, and C. Han Yang. </author> <title> Protocol Verification as a Hardware Design Aid. </title> <booktitle> In 1992 IEEE International Conference on Computer Design: VLSI in Computers and Processors, </booktitle> <pages> pages 522-525. </pages> <publisher> IEEE Computer Society, </publisher> <address> 1992. Cambridge, MA, </address> <month> October 11-14. </month> <note> 34 References 35 </note>
Reference-contexts: Hen80, vS90], except that the distinction made here between "external" and "internal" environment variables would probably not appear as such in a standard A-7 interpretation. 4 3.3 Finite-State Specification of Three-Engines-Out Mur, the finite-state verifier used in this study was developed by David Dill and his students at Stanford University <ref> [DDHY92, ID93] </ref> 5 and consists of the Mur Compiler and the Mur description language for finite-state asynchronous concurrent systems, 3 In the context of finite-state verification, a technique which prides itself on being able to handle very large (but finite) state spaces, it is far better to consider too many possibilities,
Reference: [Fag76] <author> M. E. Fagan. </author> <title> Design and Code Inspections to Reduce Errors in Program Development. </title> <journal> IBM Systems Journal, </journal> <volume> 15(3) </volume> <pages> 182-211, </pages> <month> March </month> <year> 1976. </year>
Reference: [Fag86] <author> M. E. Fagan. </author> <title> Advances in Software Inspection. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-12(7):744-751, </volume> <month> July </month> <year> 1986. </year>
Reference: [Hen80] <author> K. L. Heninger. </author> <title> Specifying Software Requirements for Complex Systems: New Techniques and Their Application. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-6(1):2-13, </volume> <month> January </month> <year> 1980. </year>
Reference-contexts: This view is similar to the standard A-7 model <ref> [HKPS78, Hen80, vS90] </ref>, except that the distinction made here between "external" and "internal" environment variables would probably not appear as such in a standard A-7 interpretation. 4 3.3 Finite-State Specification of Three-Engines-Out Mur, the finite-state verifier used in this study was developed by David Dill and his students at Stanford University
Reference: [HK90] <author> Zvi Har'El and Robert P. Kurshan. </author> <title> Software for Analytical Development of Communications Protocols. </title> <journal> AT&T Technical Journal, </journal> <volume> 69(1) </volume> <pages> 45-59, </pages> <month> Jan-uary/February </month> <year> 1990. </year>
Reference-contexts: These techniques were first used for verifying protocols (described as a collection of communicating finite-state machines) and have been applied almost exclusively to hardware or software implementation of control algorithms such as communication <ref> [HK90, Sha93] </ref> and cache coherence protocols [ID93]. Although to our knowledge, no previous attempts 1 The quaternion calculations are the only computational component of 3E/O. Although these calculations constitute an important 3E/O output, the matrix manipulations involved are relatively simple, well understood operations.
Reference: [HKPS78] <author> K. L. Heninger, J. W. Kallander, D. L. Parnas, and J. E. Shore. </author> <title> Software Requirements for the A-7E Aircraft. </title> <type> NRL Report 3876, </type> <institution> Naval Research Laboratory, </institution> <month> November </month> <year> 1978. </year>
Reference-contexts: This view is similar to the standard A-7 model <ref> [HKPS78, Hen80, vS90] </ref>, except that the distinction made here between "external" and "internal" environment variables would probably not appear as such in a standard A-7 interpretation. 4 3.3 Finite-State Specification of Three-Engines-Out Mur, the finite-state verifier used in this study was developed by David Dill and his students at Stanford University <p> As far as we've been able to determine, only one other application to the domain of software requirements has been documented. Atlee and Gannon [AG93] describe a largely automated technique for transforming tabular, SCR-style requirements <ref> [HKPS78] </ref> such as those used in [vS90] into a finite-state machine analyzable by the CTL model checker [CES86, McM93]. The technique is used to analyze safety properties of two examples, each with a small set of environmental conditions: an automobile cruise control system and a water-level monitoring system.
Reference: [ID93] <author> C. Norris Ip and David L. Dill. </author> <title> Better Verification through Symmetry. </title> <booktitle> In CHDL '93: 11th Conference on Computer Hardware Description Languages and their Applications, </booktitle> <pages> pages 87-100. </pages> <publisher> IFIP, </publisher> <address> 1993. Ottawa, Canada. </address>
Reference-contexts: These techniques were first used for verifying protocols (described as a collection of communicating finite-state machines) and have been applied almost exclusively to hardware or software implementation of control algorithms such as communication [HK90, Sha93] and cache coherence protocols <ref> [ID93] </ref>. Although to our knowledge, no previous attempts 1 The quaternion calculations are the only computational component of 3E/O. Although these calculations constitute an important 3E/O output, the matrix manipulations involved are relatively simple, well understood operations. <p> Hen80, vS90], except that the distinction made here between "external" and "internal" environment variables would probably not appear as such in a standard A-7 interpretation. 4 3.3 Finite-State Specification of Three-Engines-Out Mur, the finite-state verifier used in this study was developed by David Dill and his students at Stanford University <ref> [DDHY92, ID93] </ref> 5 and consists of the Mur Compiler and the Mur description language for finite-state asynchronous concurrent systems, 3 In the context of finite-state verification, a technique which prides itself on being able to handle very large (but finite) state spaces, it is far better to consider too many possibilities,
Reference: [Kur93] <author> R.P. Kurshan. </author> <title> Automata-Theoretic Verification of Coordinating Processes. </title> <publisher> Princeton University Press, </publisher> <address> Princeton, NJ, </address> <year> 1993. </year>
Reference-contexts: This observation led us to wonder whether the type of mode-sequencing exemplified by 3E/O could be verified most effectively using finite-state analysis techniques. 1 3.1 Finite-State Verification Techniques Finite-state verification techniques, described in <ref> [ZWR + 80, CG87, BCM + 92, Kur93, McM93] </ref>, have been around in one guise or another since at least the late 1970's.
Reference: [McM93] <author> K.L. McMillan. </author> <title> Symbolic Model Checking. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Dordrecht, The Netherlands, </address> <year> 1993. </year>
Reference-contexts: This observation led us to wonder whether the type of mode-sequencing exemplified by 3E/O could be verified most effectively using finite-state analysis techniques. 1 3.1 Finite-State Verification Techniques Finite-state verification techniques, described in <ref> [ZWR + 80, CG87, BCM + 92, Kur93, McM93] </ref>, have been around in one guise or another since at least the late 1970's. <p> Atlee and Gannon [AG93] describe a largely automated technique for transforming tabular, SCR-style requirements [HKPS78] such as those used in [vS90] into a finite-state machine analyzable by the CTL model checker <ref> [CES86, McM93] </ref>. The technique is used to analyze safety properties of two examples, each with a small set of environmental conditions: an automobile cruise control system and a water-level monitoring system.
Reference: [NAS93] <institution> An Assessment of Space Shuttle Flight Software Development Practices. National Research Council Committee for Review of Oversight Mechanisms for Space Shuttle Flight Software Processes, National Academy Press, </institution> <address> Wash-ington, DC, </address> <year> 1993. </year>
Reference-contexts: Such upgrades underscore a need recognized in the NASA community and in a recent assessment of Shuttle flight software development, for "state-of-the-art technology" and "leading-edge methodologies" to meet the demands of software development for increasingly large and complex systems <ref> [NAS93, p. 91] </ref>. The 3E/O project described in this report represents an attempt to explore productive tools and pragmatic strategies to address this need. 1 2 Chapter 1. <p> The 1993 assessment of Shuttle flight software development practices cited at the beginning of this report recommends that ". . . software safety programs must take advantage of state-of-the-art techniques and leading edge methodologies to build safety into the software and the system while enhancing software development capabilities." <ref> [NAS93, p. 91] </ref> Finite-state verification merits further study as we explore techniques, methodologies, and the integration of complementary paradigms for improving Space Shuttle flight software development.
Reference: [NASA93] <institution> Formal Methods Demonstration Project for Space Applications Phase I Case Study: Space Shuttle Orbit DAP Jet Select. Multi-Center NASA Team from Jet Propulsion Laboratory, Johnson Space Center, and Langley Research Center, </institution> <month> December </month> <year> 1993. </year> <title> NASA Code Q Final Report (Unnumbered). </title>
Reference-contexts: final chapter summarizes our work and considers directions for future research. 1.1 Motivation Although the quality of Space Shuttle flight software is generally regarded as exemplary among NASA software development projects, much of the quality assurance activity in early lifecycle phases remains a manual exercise lacking well-defined methods or techniques <ref> [NASA93, p. 22] </ref>. Shuttle flight software is complex and life-critical. Software upgrades to accommodate new missions such as the recent MIR docking, new capabilities such as Global Positioning System navigation, and improved algorithms such as the newly automated three-engine-out contingency abort maneuvers (3E/O) are continually introduced. <p> The ratio of the former to the later yields a rough quality metric (the "process error rate") for RE. Although the processes sketched here for both the initial development and the modification of requirement documents including ongoing quality assurance activities - are considered effective, <ref> [NASA93, pp. 9,22] </ref> notes the limitations paraphrased below: * Current techniques are largely manual and highly dependent on the skill and diligence of individual inspectors and review teams. * There is no methodology to guide the analysis process, no structured way for RAs to document their analysis, and there are no
Reference: [ORSvH95] <author> Sam Owre, John Rushby, Natarajan Shankar, and Friedrich von Henke. </author> <title> Formal Verification for Fault-Tolerant Architectures: Prolegomena to the Design of PVS. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(2) </volume> <pages> 107-125, </pages> <month> February </month> <year> 1995. </year>
Reference-contexts: As such, 3E/O is too procedural to be a good candidate for the type of formal specification and proof supported by systems like PVS <ref> [ORSvH95] </ref>, but can be quite naturally modeled as a finite-state system.
Reference: [Roc94] <institution> Space Shuttle Orbiter Operational Level C Functional Subsystem Software Requirements: Guidance Navigation and Control Part A Guidance Ascent and RTLS. Rockwell International, Space Systems Division, </institution> <address> OI-25, CR 90705h edition, </address> <month> June </month> <year> 1994. </year> <note> 36 References </note>
Reference-contexts: The 3E/O project described in this report represents an attempt to explore productive tools and pragmatic strategies to address this need. 1 2 Chapter 1. Introduction 1.2 Acknowledgments The informal description of 3E/O, and the finite-state analysis that follows, are based on our interpretation of the requirements documented in <ref> [Roc94] </ref>. <p> specification of our understanding, those with greater familiarity and understanding of the true requirements will be able to identify our errors and help us develop a precise, understandable, and accurate analysis that will inform future applications of formal methods to space applications, as well as future use and modification of <ref> [Roc94] </ref>. <p> Both the requirements and the test plan also undergo a baseline review before work on lower-level engineering products is allowed to proceed. Since the 3E/O document we are working from is a Change Request (CR) <ref> [Roc94] </ref>, the similarly well-defined process for modifying an existing requirements document is of 4 A -Z translation moves the Shuttle downward along the Z axis, which runs parallel to the Shuttle plane of symmetry, and perpendicular to the X axis, which runs parallel to the Shuttle body, with the Y axis <p> The key properties are typically specified as invariants, i.e., expressions that must be true in all states, and are illustrated in the following section. 3.4 Finite-State Analysis of 3E/O Sequencing The 3E/O requirements document <ref> [Roc94] </ref> provides a procedural description of 3E/O, but does not identify essential properties of the contingency abort functions. In order to validate the Mur specification, we derived a handful of properties that capture the fundamental characteristics of mode sequencing intrinsic to 3E/O region selection and contingency guidance.
Reference: [RSS95] <author> S. Rajan, N. Shankar, </author> <title> and M.K. Srivas. An Integration of Model-Checking with Automated Proof Checking. </title> <editor> In Pierre Wolper, editor, </editor> <booktitle> Computer-Aided Verification, CAV '95, </booktitle> <pages> pages 84-97, </pages> <address> Liege, Belgium, </address> <month> June </month> <year> 1995. </year> <booktitle> Volume 939 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Combining general, but labor-intensive theorem proving techniques with the domain-specific, but highly automatic finite-state verification paradigm appears to be a promising approach. As discussed in <ref> [RSS95] </ref>, several formal methods systems integrate model-checking and proof-checking, although to date there have been few, if any, truly effective integrations of these complementary technologies. <p> Concluding Remarks 33 Exploring effective ways of integrating Mur-style state exploration with PVS-style specification and theorem checking is an example of this hybrid approach. There is already a BDD-based model-checker for the propositional mu-calculus available as a decision procedure within the PVS proof checker <ref> [RSS95] </ref>. There is also an experimental, automated translation from Mur to PVS and the reverse translation is under study.
Reference: [Sha93] <author> W. David Shambroom. </author> <title> Use of Protocol Validation and Verification Techniques in the Design of a Fault-Tolerant Computer Architecture. </title> <booktitle> In Fault Tolerant Computing Symposium 23, </booktitle> <pages> pages 636-640, </pages> <address> Toulouse, France, June 1993. </address> <publisher> IEEE Computer Society. </publisher>
Reference-contexts: These techniques were first used for verifying protocols (described as a collection of communicating finite-state machines) and have been applied almost exclusively to hardware or software implementation of control algorithms such as communication <ref> [HK90, Sha93] </ref> and cache coherence protocols [ID93]. Although to our knowledge, no previous attempts 1 The quaternion calculations are the only computational component of 3E/O. Although these calculations constitute an important 3E/O output, the matrix manipulations involved are relatively simple, well understood operations.
Reference: [vS90] <author> A. John van Schouwen. </author> <title> The A-7 Requirements Model: Re-Examination for Real-Time Systems and an Application to Monitoring Systems. </title> <type> Technical Report 90-276, </type> <institution> Department of Computing and Information Science, Queen's University, Kingston, </institution> <address> Ontario, Canada, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: This view is similar to the standard A-7 model <ref> [HKPS78, Hen80, vS90] </ref>, except that the distinction made here between "external" and "internal" environment variables would probably not appear as such in a standard A-7 interpretation. 4 3.3 Finite-State Specification of Three-Engines-Out Mur, the finite-state verifier used in this study was developed by David Dill and his students at Stanford University <p> of the Mur Compiler and the Mur description language for finite-state asynchronous concurrent systems, 3 In the context of finite-state verification, a technique which prides itself on being able to handle very large (but finite) state spaces, it is far better to consider too many possibilities, than too few. 4 <ref> [vS90] </ref> distinguishes three types of environmental state variables: application, established and hardware-dependent, but these distinctions are implementation-based, whereas ours reflect a somewhat different bias. 5 Mur is named after the author of the irrefutable law which states that "The bug is always in the case you didn't test." 16 Chapter 3. <p> As far as we've been able to determine, only one other application to the domain of software requirements has been documented. Atlee and Gannon [AG93] describe a largely automated technique for transforming tabular, SCR-style requirements [HKPS78] such as those used in <ref> [vS90] </ref> into a finite-state machine analyzable by the CTL model checker [CES86, McM93]. The technique is used to analyze safety properties of two examples, each with a small set of environmental conditions: an automobile cruise control system and a water-level monitoring system.
Reference: [WdK90] <author> Daniel S. Weld and Johan de Kleer, </author> <title> editors. Readings in Qualitative Reasoning about Physical Systems. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1990. </year>
Reference-contexts: Discussion straightline course in a crosswind that varies with time" [BGM82, 3], but apparently have not pursued this or similar examples on a more realistic scale. Our use of qualitative values for physical entities is reminiscent of techniques used in certain subfields of Artificial Intelligence such as Qualitative Physics <ref> [WdK90] </ref> for modeling and reasoning about the physical world, but the analogy ends there. Our approach also differs from the simulation and scenario generation used extensively in industrial applications, including Shuttle requirements analysis (cf.
Reference: [ZWR + 80] <author> Pitro Zafiropulo, Colin H. West, Harry Rudin, D.D. Cowan, and Daniel Brand. </author> <title> Toward Analyzing and Synthesizing Protocols. </title> <journal> IEEE Transactions on Communications, </journal> <volume> COM-28(4), </volume> <month> April </month> <year> 1980. </year>
Reference-contexts: This observation led us to wonder whether the type of mode-sequencing exemplified by 3E/O could be verified most effectively using finite-state analysis techniques. 1 3.1 Finite-State Verification Techniques Finite-state verification techniques, described in <ref> [ZWR + 80, CG87, BCM + 92, Kur93, McM93] </ref>, have been around in one guise or another since at least the late 1970's.
References-found: 25

