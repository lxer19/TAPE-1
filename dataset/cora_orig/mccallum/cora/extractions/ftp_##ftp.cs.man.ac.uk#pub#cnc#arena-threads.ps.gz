URL: ftp://ftp.cs.man.ac.uk/pub/cnc/arena-threads.ps.gz
Refering-URL: http://www.cs.man.ac.uk/cnc/arena/publication.html
Root-URL: http://www.cs.man.ac.uk
Title: User-level threads on a general hardware interface  
Author: K.R. Mayes, S. Quick and B.C. Warboys 
Address: Manchester, Oxford Road, Manchester, UK.  
Affiliation: Centre for Novel Computing, Department of Computer Science, University of  
Abstract-found: 0
Intro-found: 1
Reference: <author> Anderson, T.E., H.M. Levy, B.N. Bershad and E.D. </author> <title> Lazowska (1991) The interaction of architecture and operating system design. </title> <booktitle> Proceedings of 4th International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> 108-120. </pages>
Reference: <author> Anderson, T.E., B.N. Bershad, E.D. La-zowska and H.M. </author> <title> Levy (1992) Scheduler activations: Effective kernel support for the user-level management of parallelism. </title> <journal> ACM Transactions on Computer Systems 10(1), </journal> <pages> 53-79. </pages>
Reference: <author> Assenmacher, H., T. Breitbach, P. Buhler, V. Hubsch, H. Peine and R. </author> <title> Schwarz (1994) Meeting the application in user space. </title> <booktitle> Proceedings of the 6th ACM SIGOPS European Workshop, </booktitle> <month> September, </month> <pages> 82-87. </pages>
Reference-contexts: The user-level Process Manager provides a createThread () routine, which is used here to provide figures for thread creation times. 6 Related work Other systems seek to provide minimal software wrappers for hardware, e.g. Aegis (Engler et al., 1994) and PANDA <ref> (Assenmacher et al., 1994) </ref>. There are issues relating to the abstractions that should be provided by such systems, and whether user-provided code should be able to be inserted into this hardware-dependent layer. The PANDA system provided two abstractions: protection domain and virtual processor.
Reference: <author> Clark, </author> <title> D.D. (1985) The structuring of systems using upcalls. </title> <booktitle> Proceedings of 10th ACM Symposium on Operating System Principles, </booktitle> <pages> 117-180. </pages>
Reference: <author> Draves, R., B. Bershad, R. Rashid and R. </author> <title> Dean(1991) Using continuations to implement thread management and communication in operat-ing systems. </title> <booktitle> Proc. 13th ACM Symp. on operating systems principles (October), </booktitle> <pages> 122-136. </pages>
Reference-contexts: Arena has an upcall mechanism based on dedicated, purely user-level, threads scheduled directly from user-level. There is a single kernel stack for each processor on which the Arena HWO is running. On this basis the Arena system falls into the `interrupt kernel' model <ref> (Draves et al., 1991) </ref>. Where a reschedule is required after entry to the `kernel', thread state is saved in a user-level block. However, there is no explicit `continuation' code associated with this saved context: it is resumed by the normal user-level scheduler code.
Reference: <author> Engler, D., M.F.Kaashoek and J. </author> <title> O'Toole (1994) The operating system kernel as a secure programmable machine. Operating Systems Review 29(1), 78-82 Liedtke (1993) Lazy context switching algorithms for Sparc-like processors. </title> <type> GMD Technical Report No 776. </type>
Reference-contexts: On Sparc, the per-user-level register window cost is unaffected. The user-level Process Manager provides a createThread () routine, which is used here to provide figures for thread creation times. 6 Related work Other systems seek to provide minimal software wrappers for hardware, e.g. Aegis <ref> (Engler et al., 1994) </ref> and PANDA (Assenmacher et al., 1994). There are issues relating to the abstractions that should be provided by such systems, and whether user-provided code should be able to be inserted into this hardware-dependent layer. The PANDA system provided two abstractions: protection domain and virtual processor.
Reference: <author> Marsh, </author> <title> B.D., M.L. Scott, T.J. LeBlanc and E.P. Markatos (1991) First class user-level threads. </title> <booktitle> Operating Systems Review 25(5), </booktitle> <pages> 110-121. </pages>
Reference-contexts: Upcalls in Arena are associated with threads and are thus asynchronous. However, the term `upcall' was used by Clark (1985) to refer to a synchronous access to services provided by a higher level in a layered system. The `software interrupt' of Psyche <ref> (Marsh et al., 1991) </ref> was executed in the context of a kernel thread, after switching the stack and program counter, and entering user-level.
Reference: <author> Mayes, K.R. </author> <title> (1993) Trends in operating systems towards dynamic user-level policy provision. </title> <institution> University of Manchester Computer Science Technical Report UMCS-93-9-1. </institution>
Reference: <author> Mayes, K., S. Quick, J. Bridgland and A. </author> <title> Nisbet (1994) Language- and application-oriented resource management for parallel architectures. </title> <booktitle> Proceedings of the 6th ACM SIGOPS European Workshop, </booktitle> <month> September, </month> <pages> 172-177. </pages>
Reference-contexts: The idea is to encapsulate the hardware behind an interface with certain low-level concepts which are generally applicable to any processor. Localization of hardware-dependency has the effect of increasing modularity and thus portability. This encapsulation, termed the Arena hardware object (HWO) supports portable user-level customizable resource management <ref> (Mayes et al., 1994) </ref>. The aim is to remove resource management policy from the HWO whilst maintaining its integrity. The present paper deals with the Arena approach to the provision of pure user-level threads. Native implementations on Sparc and i486 processors are briefly described and performance figures are given.
Reference: <author> Mueller, F., V. </author> <title> Rustagi and T.P. Baker (1994) Mythos a micro-kernel threads operating system. </title> <type> Technical report 94-091, </type> <institution> Dept of CS, Florida State University. </institution>
Reference: <author> Mukherjee, B, G. Eisenhauer and K. </author> <title> Ghosh (1994) A machine independent interface for lightweight threads. </title> <booktitle> Operating Systems Review 28(1), </booktitle> <pages> 33-47. </pages>
Reference: <author> S. </author> <title> Quick (1995) A generalised hardware interface for operating systems. </title> <note> In Preparation. </note>
Reference: <author> Ward, M. and P. </author> <title> Townsend (1990) EDS hardware architecture. </title> <booktitle> Lecture Notes in Computer Science 457, </booktitle> <pages> 816-827. </pages>
Reference-contexts: There is a single window save area per processor in the HWO for use in the case where a thread stack is not resident. 5 Performance results The target machine for the Sparc port was a 13-node European Declarative System prototype (EDSP) machine <ref> (Ward and Townsend, 1990) </ref>. This has a distributed-store architecture of nodes closely -coupled on an internal network. Each node consists of two 40 MHz Cypress Sparc processors sharing 64 MB of nodal store.
References-found: 13

