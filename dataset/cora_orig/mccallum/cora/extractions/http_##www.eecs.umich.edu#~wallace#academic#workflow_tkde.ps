URL: http://www.eecs.umich.edu/~wallace/academic/workflow_tkde.ps
Refering-URL: http://www.eecs.umich.edu/~wallace/academic/
Root-URL: http://www.eecs.umich.edu
Title: Analysis of Workflow Scheduling using Supervisory Control  
Author: P. Jensen N. Soparkar C. Wallace 
Abstract: Workflow has become an important paradigm for distributed data and computing systems in a wide range of application areas. An important challenge in workflow management is the scheduling of actions of concurrent tasks. This requires specifying the legal schedules of concurrent actions, and generating control mechanisms to ensure correct, efficient executions. Workflow scheduling is particularly difficult because the constraints between tasks are application-specific, and task autonomy may place certain actions outside the control or observation of the scheduler. We use techniques from supervisory control theory of discrete event systems to generate workflow scheduling controllers automatically. We specify tasks and intertask constraints as finite state automata, characterizing some transitions as outside the control or observation of the workflow scheduler. Applying the techniques of supervisory control theory to these specifications, we can automatically determine the existence of schedulers. In cases where an optimal (minimally restrictive) scheduler exists, we can generate it. In cases where no controller can allow exactly the desired class of schedules, we show how to construct a scheduler that allows the best possible approximation to the desired class. We also address the issue of distributed workflow scheduling, using decentralized supervisory control with global execution constraints. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Alonso, D. Agrawal, A. El Abbadi, M. Kamath, R. Gunthor and C. Mohan. </author> <title> "Advanced transaction models in workflow contexts". </title> <booktitle> Proceedings of ICDE, </booktitle> <month> February </month> <year> 1996. </year>
Reference-contexts: SCT takes into account the issues of controllability and observability mentioned above, among others. The techniques of SCT allow us to state unequivocally what is possible, and how to achieve the possible, for a given model. The increased interest in workflow management (e.g., see <ref> [7, 10, 1] </ref>) has resulted in considerable work on scheduling for workflow, and [15] provides an overview of various techniques. Some other approaches use temporal logic ([21]) and Petri nets ([5]).
Reference: [2] <author> P. Attie, M. Singh, A. Sheth and M. Rusinkiewicz. </author> <title> "Specifying and enforcing intertask dependencies". </title> <booktitle> Proceedings of VLDB, </booktitle> <pages> 134-145, </pages> <year> 1993. </year>
Reference-contexts: The increased interest in workflow management (e.g., see [7, 10, 1]) has resulted in considerable work on scheduling for workflow, and [15] provides an overview of various techniques. Some other approaches use temporal logic ([21]) and Petri nets ([5]). Our work is more closely related to <ref> [2, 21, 11, 8] </ref> in that we model tasks in a workflow system as FSAs. For example, finite state automata are constructed in [2] to represent dependencies in a manner similar to ours. <p> Some other approaches use temporal logic ([21]) and Petri nets ([5]). Our work is more closely related to [2, 21, 11, 8] in that we model tasks in a workflow system as FSAs. For example, finite state automata are constructed in <ref> [2] </ref> to represent dependencies in a manner similar to ours. What distinguishes our work is that we adapt the well-understood 2 techniques of SCT, including established results for controllability and observability.
Reference: [3] <author> H. Cho and S. Marcus. </author> <title> "Supremal and maximal sublanguages arising in supervisor synthesis problems with partial observations". </title> <booktitle> Mathematical Systems Theory 22(3) </booktitle> <pages> 177-211, </pages> <year> 1989. </year>
Reference: [4] <author> R. Cieslak, C. Desclaux, A. Fawaz and P. Varaiya. </author> <title> "Supervisory control of discrete-event processes with partial observations". </title> <journal> IEEE Transactions on Automatic Control 33(3) </journal> <pages> 249-260, </pages> <month> March </month> <year> 1988. </year>
Reference: [5] <author> C. Ellis and G. Nutt. </author> <title> "Modeling and enactment of workflow systems". </title> <booktitle> International Conference on Application and Theory of Petri Nets, </booktitle> <year> 1993. </year>
Reference: [6] <author> D. Georgakopolous, M. Rusinkiewicz and A. Sheth. </author> <title> "On serializability of multidatabase transactions through forced local conflicts". </title> <booktitle> Proceedings of ICDE, </booktitle> <year> 1991. </year>
Reference: [7] <author> D. Georgakopoulos, M. Hornick and A. Sheth. </author> <title> "An overview of workflow management: from process modeling to workflow automation infrastructure". </title> <booktitle> Distributed and Parallel Databases 3 </booktitle> <pages> 119-153, </pages> <year> 1995. </year>
Reference-contexts: SCT takes into account the issues of controllability and observability mentioned above, among others. The techniques of SCT allow us to state unequivocally what is possible, and how to achieve the possible, for a given model. The increased interest in workflow management (e.g., see <ref> [7, 10, 1] </ref>) has resulted in considerable work on scheduling for workflow, and [15] provides an overview of various techniques. Some other approaches use temporal logic ([21]) and Petri nets ([5]).
Reference: [8] <author> R. Gunthor. </author> <title> "Extended transaction processing based on dependency rules". </title> <booktitle> Proceedings of RIDE-IMS, </booktitle> <pages> 207-214, </pages> <month> April </month> <year> 1993. </year> <month> 21 </month>
Reference-contexts: The increased interest in workflow management (e.g., see [7, 10, 1]) has resulted in considerable work on scheduling for workflow, and [15] provides an overview of various techniques. Some other approaches use temporal logic ([21]) and Petri nets ([5]). Our work is more closely related to <ref> [2, 21, 11, 8] </ref> in that we model tasks in a workflow system as FSAs. For example, finite state automata are constructed in [2] to represent dependencies in a manner similar to ours.
Reference: [9] <author> N. Ben Hadj-Alouane, S. Lafortune and F. Lin. </author> <title> "Centralized and distributed algorithms for on-line synthesis of maximal control policies under partial observation". </title> <type> Technical report CGR-95-07, </type> <institution> University of Michigan, </institution> <month> September </month> <year> 1995. </year>
Reference-contexts: However, there are important specific conditions under which the problem is computable in polynomial time. For instance, when the sets of controllable events among sites are pairwise disjoint, schedulers can be realized in polynomial time. These and related issues are active topics of research in SCT. For example, <ref> [9] </ref> presents an algorithm for computing control inputs on-line which allows exactly a maximal controllable and co-observable language if one exists. 6 Conclusions SCT can provide firm foundations to the area of workflow scheduling.
Reference: [10] <author> M. Kamath and K. Ramamritham. </author> <title> "Modeling, correctness and systems issues in supporting advanced database applications using workflow management systems". </title> <type> Technical report 95-50, </type> <institution> University of Mas-sachusetts, </institution> <year> 1995. </year>
Reference-contexts: SCT takes into account the issues of controllability and observability mentioned above, among others. The techniques of SCT allow us to state unequivocally what is possible, and how to achieve the possible, for a given model. The increased interest in workflow management (e.g., see <ref> [7, 10, 1] </ref>) has resulted in considerable work on scheduling for workflow, and [15] provides an overview of various techniques. Some other approaches use temporal logic ([21]) and Petri nets ([5]).
Reference: [11] <author> J. Klein. </author> <title> "Advanced rule driven transaction management". </title> <booktitle> Proceedings of IEEE Computer Society International Conference, </booktitle> <pages> 562-567, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: The increased interest in workflow management (e.g., see [7, 10, 1]) has resulted in considerable work on scheduling for workflow, and [15] provides an overview of various techniques. Some other approaches use temporal logic ([21]) and Petri nets ([5]). Our work is more closely related to <ref> [2, 21, 11, 8] </ref> in that we model tasks in a workflow system as FSAs. For example, finite state automata are constructed in [2] to represent dependencies in a manner similar to ours.
Reference: [12] <author> S. Lafortune and E. Chen. </author> <title> "The infimal closed controllable superlanguage and its application in supervisory control". </title> <journal> IEEE Transactions in Automatic Control 35(4), </journal> <month> April </month> <year> 1990. </year>
Reference: [13] <author> F. Lin and W. Wonham. </author> <title> "Decentralized supervisory control of discrete-event systems". </title> <booktitle> Information Sciences 44 </booktitle> <pages> 199-224, </pages> <year> 1988. </year>
Reference-contexts: Assume that each supervisor sees only a subset of the possible events in the system (e.g., some sites may be unaware of events occurring at other sites), and some local events are not controllable by remote schedulers. In Figure 14 we show the model of <ref> [13] </ref> for distributed supervisory control. As before, the generator represents the uncontrolled behavior of the workflow system. Associated with each site i in the system is a supervisor S i .
Reference: [14] <author> P. Muth, D. Wodtke, J. Weissenfels, G. Weikum and A. Kotz-Dittrich. </author> <title> "Enterprise-wide workflow management based on state and activity charts". NATO Advanced Study Institute on Workflow Management Systems and Interoperability, </title> <year> 1997. </year>
Reference-contexts: We believe that our work shows promise for future development. Our models are simple, familiar FSAs, and the concepts of SCT facilitate analysis. This indicates that integration with other techniques should be straightforward. For instance, an interface with specification methods for workflow design (e.g., <ref> [14] </ref>), which focuses on the visualization of control and data flow, would allow users to design workflows in a more human-friendly manner, and then translate them to FSAs for scheduling purposes.
Reference: [15] <author> M. Rusinkiewicz and A. Sheth. </author> <title> "Specification and execution of transactional workflows". </title> <editor> In W. Kim (ed.), </editor> <title> Modern Database Systems: The Object Model, Interoperability, and Beyond. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: The techniques of SCT allow us to state unequivocally what is possible, and how to achieve the possible, for a given model. The increased interest in workflow management (e.g., see [7, 10, 1]) has resulted in considerable work on scheduling for workflow, and <ref> [15] </ref> provides an overview of various techniques. Some other approaches use temporal logic ([21]) and Petri nets ([5]). Our work is more closely related to [2, 21, 11, 8] in that we model tasks in a workflow system as FSAs.
Reference: [16] <author> P. Ramadge and W. Wonham. </author> <title> "Modular feedback logic for discrete event systems". </title> <journal> SIAM Journal of Control and Optimization 25(5) </journal> <pages> 1202-1218, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: This means that a supremal supervisor generating (K 1 " K 2 ) " can be achieved in polynomial time, by applying the " operator to each specification language and intersecting the results (K 1 " K 2 ). We summarize the above results, taken from <ref> [16, 23] </ref>: 1.
Reference: [17] <author> P. Ramadge and W. Wonham. </author> <title> "Supervisory control of a class of discrete-event processes". </title> <journal> SIAM Journal of Control and Optimization 25(1) </journal> <pages> 206-230, </pages> <month> January </month> <year> 1987. </year>
Reference-contexts: To avoid blocking, we must not exclude any marked prefix that leads to a desired string k, else there will be no way to reach k. The results for controllability, taken from <ref> [17] </ref>, are summarized as follows. Fix a generator G that generates language L (G) and marked language L M (G). 1. For nonempty K L (G) there exists a supervisor S realizing K if and only if K is prefix-closed and controllable. 2.
Reference: [18] <author> P. Ramadge and W. Wonham. </author> <title> "The control of discrete event systems". </title> <booktitle> Proceedings of the IEEE 77(1) </booktitle> <pages> 81-98, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: This commit dependency is a co-occurrence condition (i.e., if Credit commits, 4 then Debit must have committed or must commit later). 2.2 Discrete event systems We present relevant material from <ref> [18] </ref> for discrete event systems and show how to model workflows as DESs. A discrete event system (DES ) is a dynamic system whose state changes through instantaneous occurrences of events. Workflows can be accurately modeled as DESs, since the workflow scheduler receives event notifications in a discrete fashion. <p> oe); r) if ffi A (q; oe) is defined and ffi B (r; oe) is undefined; (q; ffi B (r; oe)) if ffi A (q; oe) is undefined and ffi B (r; oe) is defined 3 Workflows and SCT We present the definitions and results of supervisory control theory from <ref> [18] </ref> that we need to frame workflow scheduling as a supervisory control problem. We then use these results to develop schedulers for our Transfer-funds example in the next section. 3.1 Modeling Workflows To put workflows into the context of SCT, we describe a workflow in terms of DES.
Reference: [19] <author> K. Rudie and W. Wonham. </author> <title> "Think globally, act locally: decentralized supervisory control". </title> <journal> IEEE Transactions on Automatic Control 37(11) </journal> <pages> 1692-1708, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: There exist supervisors S 1 , . . . S n such that L (S 1 ^ : : : ^ S 2 =G) = K if and only if K is controllable and co-observable <ref> [19] </ref>. [20] presents an algorithm of polynomial computational complexity which determines the existence of controllers S 1 , . . . S n satisfying the above conditions. Realizing maximal schedulers when the specification K is not controllable or not co-observable is of exponential computational complexity in general.
Reference: [20] <author> K. Rudie and J. Willems. </author> <title> "The computational complexity of decentralized discrete-event control problems". </title> <type> IMA Preprint Series 1105, </type> <institution> University of Minnesota, </institution> <year> 1993. </year>
Reference-contexts: There exist supervisors S 1 , . . . S n such that L (S 1 ^ : : : ^ S 2 =G) = K if and only if K is controllable and co-observable [19]. <ref> [20] </ref> presents an algorithm of polynomial computational complexity which determines the existence of controllers S 1 , . . . S n satisfying the above conditions. Realizing maximal schedulers when the specification K is not controllable or not co-observable is of exponential computational complexity in general.
Reference: [21] <author> M. Singh and C. Tomlinson. </author> <title> "Workflow execution through distributed events". </title> <booktitle> Proceedings of SIGMOD, </booktitle> <year> 1994. </year>
Reference-contexts: The increased interest in workflow management (e.g., see [7, 10, 1]) has resulted in considerable work on scheduling for workflow, and [15] provides an overview of various techniques. Some other approaches use temporal logic ([21]) and Petri nets ([5]). Our work is more closely related to <ref> [2, 21, 11, 8] </ref> in that we model tasks in a workflow system as FSAs. For example, finite state automata are constructed in [2] to represent dependencies in a manner similar to ours.
Reference: [22] <author> W. Wonham and P. Ramadge. </author> <title> "On the supremal controllable sublanguage of a given language". </title> <journal> SIAM Journal of Control and Optimization 25(3) </journal> <pages> 637-659, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: We use the algorithm of <ref> [22] </ref> discussed in section 3.2.3 to construct a generator for K " M with marked language K " M . We start with the FSA H 0 , shown in Figure 6. <p> Let K s and K c be the languages generated by the dependency automata D s and D c . We can construct generators for K " s and K d , using the algorithm of <ref> [22] </ref>; the generators are shown in Figure 8. Our goal is to use these generators in a controller for the language K " = (K s " K c ) " .
Reference: [23] <author> W. Wonham and P. Ramadge. </author> <title> "Modular supervisory control of discrete event systems". Mathematical Control, Signals, </title> <booktitle> and Systems 1(1) </booktitle> <pages> 13-30, </pages> <month> January </month> <year> 1988. </year>
Reference-contexts: This means that a supremal supervisor generating (K 1 " K 2 ) " can be achieved in polynomial time, by applying the " operator to each specification language and intersecting the results (K 1 " K 2 ). We summarize the above results, taken from <ref> [16, 23] </ref>: 1.
Reference: [24] <author> N. Soparkar and H. Korth and A. Silberschatz. </author> <booktitle> "Failure-resilient transaction management in multi-databases". IEEE Computer 24(12) </booktitle> <pages> 28-36, </pages> <month> December </month> <year> 1991. </year>
Reference: [25] <author> R. Sengupta and S. Lafortune. </author> <title> "A deterministic optimal control theory for discrete event systems: formulation and existence theory". </title> <type> Technical report CGR-93-7, </type> <institution> University of Michigan, </institution> <month> December </month> <year> 1993. </year>
Reference: [26] <author> R. Sengupta and S. Lafortune. </author> <title> "A deterministic optimal control theory for discrete event systems: computational results". </title> <type> Technical report CGR-93-16, </type> <institution> University of Michigan, </institution> <month> December </month> <year> 1993. </year>

References-found: 26

