URL: http://www.cs.indiana.edu/l/www/ftp/pierce/compobj.ps.gz
Refering-URL: http://www.cs.indiana.edu/l/www/ftp/pierce/
Root-URL: http://www.cs.indiana.edu
Title: Comparing Object Encodings  
Author: Kim B. Bruce Williams College Benjamin C. Pierce 
Degree: Luca Cardelli DEC SRC  
Date: January 27, 1997  
Affiliation: Indiana University  
Abstract: lt;: as a common basis, we now offer a detailed comparison of four models: (1) a recursive-record encoding similar to the ones used by Cardelli [Car84], Reddy [Red88, KR94], Cook [Coo89, CHC90], and others; (2) Hofmann, Pierce, and Turner's existential encoding [PT94, HP95]; (3) Bruce's model based on existential and recursive types [Bru94]; and (4) Abadi, Cardelli, and Viswanathan's type-theoretic encoding [ACV96] of a calculus of primitive objects.
Abstract-found: 1
Intro-found: 1
Reference: [AC93] <author> Roberto Amadio and Luca Cardelli. </author> <title> Subtyping recursive types. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 15(4) </volume> <pages> 575-631, </pages> <year> 1993. </year>
Reference-contexts: four encodings, but a detailed comparison falls outside the scope of this study. 2 Technical Preliminaries The "ambient type theory" in which our four encodings are expressed is the omega-order polymorphic lambda-calculus with subtyping, System F ! &lt;: [Car90, PT94, HP95, PS97], extended with existential types [MP88], recursively defined types <ref> [AC93] </ref>, recursive functions, and records.
Reference: [AC95] <author> Martn Abadi and Luca Cardelli. </author> <title> On subtyping and matching. </title> <booktitle> In Proceedings ECOOP '95, </booktitle> <pages> pages 145-167, </pages> <year> 1995. </year>
Reference-contexts: Indeed, this style of "polymorphic programming by bounded abstraction over interfaces" has been proposed in several languages under the name matching <ref> [BSvG95, AC95] </ref>. 4.8 Method override Method update can be incorporated in the ORBE encoding by extending the encoding of an object with a collection of method updaters.
Reference: [AC96] <author> Martn Abadi and Luca Cardelli. </author> <title> A Theory of Objects. </title> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Meanwhile, frustrated by the difficulties of encoding objects in lambda calculi, Abadi and Cardelli introduced a calculus of primitive objects <ref> [AC96] </ref>. Later, however, Abadi, Cardelli, and Viswanathan [ACV96] discovered a faithful encoding of that object calculus in terms of bounded existentials and recursive types. (The encoding is simplified in this paper to facilitate comparisons with the other encodings; in particular, method update is only considered in Section 4.8).
Reference: [ACV96] <author> Martn Abadi, Luca Cardelli, and Ramesh Viswanathan. </author> <title> An interpretation of objects and object types. </title> <booktitle> In Principles of Programming Languages, </booktitle> <pages> pages 396-409, </pages> <year> 1996. </year>
Reference-contexts: Meanwhile, frustrated by the difficulties of encoding objects in lambda calculi, Abadi and Cardelli introduced a calculus of primitive objects [AC96]. Later, however, Abadi, Cardelli, and Viswanathan <ref> [ACV96] </ref> discovered a faithful encoding of that object calculus in terms of bounded existentials and recursive types. (The encoding is simplified in this paper to facilitate comparisons with the other encodings; in particular, method update is only considered in Section 4.8). <p> OE is the "existential encoding" of Hofmann, Pierce, and Turner [PT94, HP95]. ORE is a type-theoretic analog of Bruce's denotational semantics for objects based on F-bounded quantification [Bru94]. ORBE is a variant of Abadi, Cardelli, and Viswanathan's type-theoretic encoding <ref> [ACV96] </ref>. The names are designed to remind the reader of the main features of the encodings: R stands for recursive types, E for existential types, and BE for bounded existentials. 1 We concentrate here on the purely functional versions of each of the encodings. <p> See <ref> [ACV96] </ref> for details. The technique of method updaters used for ORBE cannot be easily adapted to the other models.
Reference: [BCC + 96] <author> Kim B. Bruce, Luca Cardelli, Giuseppe Castagna, the Hopkins Objects Group (Jonathan Eifrig, Scott Smith, Valery Trifonov), Gary T. Leavens, and Benjamin Pierce. </author> <title> On binary methods. </title> <journal> Theory and Practice of Object Systems, </journal> <volume> 1(3) </volume> <pages> 221-242, </pages> <year> 1996. </year>
Reference-contexts: Section 4.6 discusses the implications of relaxing this restriction to allow "binary" methods with parameters of the same type as the receiver. See <ref> [BCC + 96] </ref> for a more extended discussion.
Reference: [Bru94] <author> Kim B. Bruce. </author> <title> A paradigmatic object-oriented programming language: Design, static typing and semantics. </title> <journal> Journal of Functional Programming, </journal> <volume> 4(2), </volume> <month> April </month> <year> 1994. </year> <title> A preliminary version appeared in POPL 1993 under the title "Safe Type Checking in a Statically Typed Object-Oriented Programming Language". </title>
Reference-contexts: uniform, type-driven interpretation of objects in a functional calculus. fl Corresponding author: Kim Bruce (kim@cs.williams.edu), Department of Computer Science, Williams College, Williamstown, MA 01267 y Partially supported by NSF grant CCR-9424123. z Supported by EPSRC grant GR/K 38403. 1 2 At the same conference in 1993, Bruce presented a paper <ref> [Bru94] </ref> on the semantics of a functional object-oriented language. This semantics was originally presented as a direct mapping into a denotational model of F ! &lt;: , but has recently been reformulated as an object encoding that depends on both existential and recursive types. <p> OE is the "existential encoding" of Hofmann, Pierce, and Turner [PT94, HP95]. ORE is a type-theoretic analog of Bruce's denotational semantics for objects based on F-bounded quantification <ref> [Bru94] </ref>. ORBE is a variant of Abadi, Cardelli, and Viswanathan's type-theoretic encoding [ACV96].
Reference: [BSvG95] <author> Kim B. Bruce, Angela Schuett, and Robert van Gent. PolyTOIL: </author> <title> A type-safe polymorphic object-oriented language, extended abstract. </title> <booktitle> In ECOOP '95, </booktitle> <pages> pages 27-51. </pages> <publisher> LNCS 952, Springer-Verlag, </publisher> <year> 1995. </year> <note> A complete version of this paper with full proofs is available via http://www.cs.williams.edu/~kim/. </note>
Reference-contexts: Indeed, this style of "polymorphic programming by bounded abstraction over interfaces" has been proposed in several languages under the name matching <ref> [BSvG95, AC95] </ref>. 4.8 Method override Method update can be incorporated in the ORBE encoding by extending the encoding of an object with a collection of method updaters.
Reference: [Car84] <author> Luca Cardelli. </author> <title> A semantics of multiple inheritance. </title> <editor> In G. Kahn, D. MacQueen, and G. Plotkin, editors, </editor> <booktitle> Semantics of Data Types, volume 173 of Lecture Notes in Computer Science, </booktitle> <pages> pages 51-67. </pages> <publisher> Springer-Verlag, </publisher> <year> 1984. </year> <note> Full version in Information and Computation </note> 76(2/3):138-164, 1988. 
Reference-contexts: 1 Introduction Over the last half decade, several authors have proposed foundational models for statically typed object-oriented programming. Although their motivating intuitions and the technical machinery they use are all strongly related to typed lambda-calculi with subtyping <ref> [Car84, CW85, CG92] </ref>, stylistic differences have made rigorous comparisons difficult. <p> In this paper we compare four of these models. The first of these, based on recursively-defined records, was introduced by Cardelli <ref> [Car84] </ref> and studied in many variations by Kamin and Reddy [Red88, KR94], Cook and Palsberg [CP89], and Mitchell [Mit90]. In its untyped form, this model was used rather effectively for the denotational semantics of untyped object-oriented languages.
Reference: [Car90] <author> Luca Cardelli. </author> <title> Notes about F ! &lt;: </title> . <type> Unpublished manuscript, </type> <month> October </month> <year> 1990. </year>
Reference-contexts: These are of course supported|in interestingly different ways|by all four encodings, but a detailed comparison falls outside the scope of this study. 2 Technical Preliminaries The "ambient type theory" in which our four encodings are expressed is the omega-order polymorphic lambda-calculus with subtyping, System F ! &lt;: <ref> [Car90, PT94, HP95, PS97] </ref>, extended with existential types [MP88], recursively defined types [AC93], recursive functions, and records.
Reference: [CCH + 89] <author> Peter Canning, William Cook, Walter Hill, Walter Olthoff, and John Mitchell. </author> <title> F-bounded quantification for object-oriented programming. </title> <booktitle> In Fourth International Conference on Functional Programming Languages and Computer Architecture, </booktitle> <pages> pages 273 280, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: In its typed form, it was used to encode individual object-oriented examples, but had difficulties with uniform interpretations of typed object-oriented languages. The most successful effort in this direction was carried out by Cook et al. <ref> [CHC90, CCH + 89] </ref>. In 1993, Pierce and Turner [PT94] introduced an encoding that relied only on a type system with existential types, but no recursive types.
Reference: [CG92] <author> Pierre-Louis Curien and Giorgio Ghelli. </author> <title> Coherence of subsumption: Minimum typing and type-checking in F . Mathematical Structures in Computer Science, </title> <booktitle> 2 </booktitle> <pages> 55-91, </pages> <year> 1992. </year> <note> 18 Also in Carl A. </note> <editor> Gunter and John C. Mitchell, editors, </editor> <title> Theoretical Aspects of Object-Oriented Programming: Types, Semantics, </title> <publisher> and Language Design (MIT Press, </publisher> <year> 1994). </year>
Reference-contexts: 1 Introduction Over the last half decade, several authors have proposed foundational models for statically typed object-oriented programming. Although their motivating intuitions and the technical machinery they use are all strongly related to typed lambda-calculi with subtyping <ref> [Car84, CW85, CG92] </ref>, stylistic differences have made rigorous comparisons difficult.
Reference: [CHC90] <author> William R. Cook, Walter L. Hill, and Peter S. Canning. </author> <title> Inheritance is not subtyping. </title> <booktitle> In Proc. 17th ACM Symp. on Principles of Programming Languages, </booktitle> <pages> pages 125-135, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: In its typed form, it was used to encode individual object-oriented examples, but had difficulties with uniform interpretations of typed object-oriented languages. The most successful effort in this direction was carried out by Cook et al. <ref> [CHC90, CCH + 89] </ref>. In 1993, Pierce and Turner [PT94] introduced an encoding that relied only on a type system with existential types, but no recursive types.
Reference: [Coo89] <author> William Cook. </author> <title> A Denotational Semantics of Inheritance. </title> <type> PhD thesis, </type> <institution> Brown University, </institution> <year> 1989. </year>
Reference: [CP89] <author> W. Cook and J. Palsberg. </author> <title> A denotational semantics of inheritance and its correctness. </title> <booktitle> In Proc. ACM Conf. on Object-Oriented Programming: Systems, Languages and Applications, </booktitle> <pages> pages 433-444, </pages> <year> 1989. </year>
Reference-contexts: In this paper we compare four of these models. The first of these, based on recursively-defined records, was introduced by Cardelli [Car84] and studied in many variations by Kamin and Reddy [Red88, KR94], Cook and Palsberg <ref> [CP89] </ref>, and Mitchell [Mit90]. In its untyped form, this model was used rather effectively for the denotational semantics of untyped object-oriented languages. In its typed form, it was used to encode individual object-oriented examples, but had difficulties with uniform interpretations of typed object-oriented languages.
Reference: [CW85] <author> Luca Cardelli and Peter Wegner. </author> <title> On understanding types, data abstraction, </title> <journal> and poly-morphism. Computing Surveys, </journal> <volume> 17(4), </volume> <month> December </month> <year> 1985. </year>
Reference-contexts: 1 Introduction Over the last half decade, several authors have proposed foundational models for statically typed object-oriented programming. Although their motivating intuitions and the technical machinery they use are all strongly related to typed lambda-calculi with subtyping <ref> [Car84, CW85, CG92] </ref>, stylistic differences have made rigorous comparisons difficult. <p> For more complicated result types involving the self type variable, the appropriate repackaging code can be generated by induction on the method type. 4.5 Strength of underlying type theory OE works in the "most elementary" type theory | F ! &lt;: with the Kernel Fun subtyping rule <ref> [CW85] </ref>. If classes and inheritance are omitted, the underlying calculus is even strongly normalizing. All the other models require recursive types, which entail recursion and loss of strong normalization. OE itself requires recursion (on values) to handle classes.
Reference: [Ghe93] <author> Giorgio Ghelli. </author> <title> Recursive types are not conservative over F . In Typed Lambda Calculus and Applications, </title> <month> March </month> <year> 1993. </year>
Reference-contexts: OR, OE, and ORE work fine with the Kernel Fun subtyping rule for quantifiers. ORBE requires the full F &lt;: rule, leading to a substantial increase in the theoretical complexity of the calculus <ref> [Ghe95, Ghe93] </ref> and the loss of some pragmatically desirable properties such as decidability [Pie94].
Reference: [Ghe95] <author> Giorgio Ghelli. </author> <title> Divergence of F type checking. </title> <booktitle> Theoretical Computer Science, </booktitle> <address> 139(1,2):131-162, </address> <year> 1995. </year>
Reference-contexts: OR, OE, and ORE work fine with the Kernel Fun subtyping rule for quantifiers. ORBE requires the full F &lt;: rule, leading to a substantial increase in the theoretical complexity of the calculus <ref> [Ghe95, Ghe93] </ref> and the loss of some pragmatically desirable properties such as decidability [Pie94].
Reference: [HP95] <author> Martin Hofmann and Benjamin Pierce. </author> <title> A unifying type-theoretic framework for objects. </title> <journal> Journal of Functional Programming, </journal> <volume> 5(4) </volume> <pages> 593-635, </pages> <month> October </month> <year> 1995. </year> <note> Previous versions appeared in the Symposium on Theoretical Aspects of Computer Science, </note> <year> 1994, </year> <title> (pages 251-262) and, under the title "An Abstract View of Objects and Subtyping (Preliminary Report)," as University of Edinburgh, </title> <type> LFCS technical report ECS-LFCS-92-226, </type> <year> 1992. </year>
Reference-contexts: The most successful effort in this direction was carried out by Cook et al. [CHC90, CCH + 89]. In 1993, Pierce and Turner [PT94] introduced an encoding that relied only on a type system with existential types, but no recursive types. This led Hofmann and Pierce <ref> [HP95] </ref> to the first uniform, type-driven interpretation of objects in a functional calculus. fl Corresponding author: Kim Bruce (kim@cs.williams.edu), Department of Computer Science, Williams College, Williamstown, MA 01267 y Partially supported by NSF grant CCR-9424123. z Supported by EPSRC grant GR/K 38403. 1 2 At the same conference in 1993, Bruce <p> These are of course supported|in interestingly different ways|by all four encodings, but a detailed comparison falls outside the scope of this study. 2 Technical Preliminaries The "ambient type theory" in which our four encodings are expressed is the omega-order polymorphic lambda-calculus with subtyping, System F ! &lt;: <ref> [Car90, PT94, HP95, PS97] </ref>, extended with existential types [MP88], recursively defined types [AC93], recursive functions, and records. <p> OE is the "existential encoding" of Hofmann, Pierce, and Turner <ref> [PT94, HP95] </ref>. ORE is a type-theoretic analog of Bruce's denotational semantics for objects based on F-bounded quantification [Bru94]. ORBE is a variant of Abadi, Cardelli, and Viswanathan's type-theoretic encoding [ACV96].
Reference: [KR94] <author> Samuel N. Kamin and Uday S. Reddy. </author> <title> Two semantic models of object-oriented languages. </title> <editor> In Carl A. Gunter and John C. Mitchell, editors, </editor> <booktitle> Theoretical Aspects of Object-Oriented Programming: Types, Semantics, and Language Design, </booktitle> <pages> pages 464-495. </pages> <publisher> The MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: In this paper we compare four of these models. The first of these, based on recursively-defined records, was introduced by Cardelli [Car84] and studied in many variations by Kamin and Reddy <ref> [Red88, KR94] </ref>, Cook and Palsberg [CP89], and Mitchell [Mit90]. In its untyped form, this model was used rather effectively for the denotational semantics of untyped object-oriented languages. In its typed form, it was used to encode individual object-oriented examples, but had difficulties with uniform interpretations of typed object-oriented languages.
Reference: [Mit90] <author> John C. Mitchell. </author> <title> Toward a typed foundation for method specialization and inheritance. </title> <booktitle> In Proceedings of the 17th ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 109-124, </pages> <month> January </month> <year> 1990. </year> <editor> Also in Carl A. Gunter and John C. Mitchell, editors, </editor> <title> Theoretical Aspects of Object-Oriented Programming: Types, Semantics, </title> <publisher> and Language Design (MIT Press, </publisher> <year> 1994). </year>
Reference-contexts: In this paper we compare four of these models. The first of these, based on recursively-defined records, was introduced by Cardelli [Car84] and studied in many variations by Kamin and Reddy [Red88, KR94], Cook and Palsberg [CP89], and Mitchell <ref> [Mit90] </ref>. In its untyped form, this model was used rather effectively for the denotational semantics of untyped object-oriented languages. In its typed form, it was used to encode individual object-oriented examples, but had difficulties with uniform interpretations of typed object-oriented languages.
Reference: [MMH96] <author> Yasuhiko Minamide, Greg Morrisett, and R. Harper. </author> <title> Typed closure conversion. </title> <booktitle> In Proc. 23rd ACM Symp. on Principles of Programming Languages, </booktitle> <pages> pages 271-283, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: This encoding technique is closely related to semantic models of ADT languages. See [MP88] for details. This encoding has also been adopted in <ref> [MMH96] </ref> in order to represent closures as objects in compilers. In the simple encoding, the bump method has no access to the set and get methods it's only passed the state as a parameter.
Reference: [MP88] <author> J.C. Mitchell and G.D. Plotkin. </author> <title> Abstract types have existential type. </title> <journal> ACM Trans. on Programming Languages and Systems, </journal> <volume> 10(3) </volume> <pages> 470-502, </pages> <year> 1988. </year> <note> Preliminary version appeared in Proc. 12th ACM Symp. on Principles of Programming Languages, 1985. 19 </note>
Reference-contexts: interestingly different ways|by all four encodings, but a detailed comparison falls outside the scope of this study. 2 Technical Preliminaries The "ambient type theory" in which our four encodings are expressed is the omega-order polymorphic lambda-calculus with subtyping, System F ! &lt;: [Car90, PT94, HP95, PS97], extended with existential types <ref> [MP88] </ref>, recursively defined types [AC93], recursive functions, and records. <p> This encoding technique is closely related to semantic models of ADT languages. See <ref> [MP88] </ref> for details. This encoding has also been adopted in [MMH96] in order to represent closures as objects in compilers. In the simple encoding, the bump method has no access to the set and get methods it's only passed the state as a parameter.
Reference: [Pie94] <author> Benjamin C. Pierce. </author> <title> Bounded quantification is undecidable. </title> <journal> Information and Computation, </journal> <volume> 112(1) </volume> <pages> 131-165, </pages> <month> July </month> <year> 1994. </year> <editor> Also in Carl A. Gunter and John C. Mitchell, editors, </editor> <title> Theoretical Aspects of Object-Oriented Programming: Types, Semantics, </title> <publisher> and Language Design (MIT Press, </publisher> <year> 1994). </year> <note> A preliminary version appeared in POPL '92. </note>
Reference-contexts: OR, OE, and ORE work fine with the Kernel Fun subtyping rule for quantifiers. ORBE requires the full F &lt;: rule, leading to a substantial increase in the theoretical complexity of the calculus [Ghe95, Ghe93] and the loss of some pragmatically desirable properties such as decidability <ref> [Pie94] </ref>.
Reference: [PS97] <author> Benjamin Pierce and Martin Steffen. </author> <title> Higher-order subtyping. </title> <booktitle> Theoretical Computer Science, </booktitle> <year> 1997. </year> <note> To appear. A preliminary version appeared in IFIP Working Conference on Programming Concepts, Methods and Calculi (PROCOMET), June 1994, and as University of Edinburgh technical report ECS-LFCS-94-280 and Universitat Erlangen-Nurnberg Interner Bericht IMMD7-01/94, </note> <month> January </month> <year> 1994. </year>
Reference-contexts: These are of course supported|in interestingly different ways|by all four encodings, but a detailed comparison falls outside the scope of this study. 2 Technical Preliminaries The "ambient type theory" in which our four encodings are expressed is the omega-order polymorphic lambda-calculus with subtyping, System F ! &lt;: <ref> [Car90, PT94, HP95, PS97] </ref>, extended with existential types [MP88], recursively defined types [AC93], recursive functions, and records. <p> OR, OE, and ORE work fine with the Kernel Fun subtyping rule for quantifiers. ORBE requires the full F &lt;: rule, leading to a substantial increase in the theoretical complexity of the calculus [Ghe95, Ghe93] and the loss of some pragmatically desirable properties such as decidability [Pie94]. See <ref> [PS97] </ref> for more discussion of variants of this rule. 14 Karl Crary has observed [personal communication] that it may be possible to ameliorate this deficiency in ORBE by introducing a single type constructor combining the behaviors of Rec and Some. 4.6 Binary Methods Another difference between the encodings concerns the treatment
Reference: [PT94] <author> Benjamin C. Pierce and David N. Turner. </author> <title> Simple type-theoretic foundations for object-oriented programming. </title> <journal> Journal of functional programming, </journal> <volume> 4 </volume> <pages> 207-247, </pages> <year> 1994. </year> <note> An earlier version appeared in Proc. of POPL '93, pp. 299-312. </note>
Reference-contexts: In its typed form, it was used to encode individual object-oriented examples, but had difficulties with uniform interpretations of typed object-oriented languages. The most successful effort in this direction was carried out by Cook et al. [CHC90, CCH + 89]. In 1993, Pierce and Turner <ref> [PT94] </ref> introduced an encoding that relied only on a type system with existential types, but no recursive types. <p> These are of course supported|in interestingly different ways|by all four encodings, but a detailed comparison falls outside the scope of this study. 2 Technical Preliminaries The "ambient type theory" in which our four encodings are expressed is the omega-order polymorphic lambda-calculus with subtyping, System F ! &lt;: <ref> [Car90, PT94, HP95, PS97] </ref>, extended with existential types [MP88], recursively defined types [AC93], recursive functions, and records. <p> OE is the "existential encoding" of Hofmann, Pierce, and Turner <ref> [PT94, HP95] </ref>. ORE is a type-theoretic analog of Bruce's denotational semantics for objects based on F-bounded quantification [Bru94]. ORBE is a variant of Abadi, Cardelli, and Viswanathan's type-theoretic encoding [ACV96].
Reference: [Red88] <author> Uday S. Reddy. </author> <title> Objects as closures: Abstract semantics of object oriented languages. </title> <booktitle> In Proceedings of the 1988 ACM Symposium on Lisp and Functional Programming, </booktitle> <pages> pages 289-297, </pages> <address> Snowbird, Utah, </address> <month> July </month> <year> 1988. </year>
Reference-contexts: In this paper we compare four of these models. The first of these, based on recursively-defined records, was introduced by Cardelli [Car84] and studied in many variations by Kamin and Reddy <ref> [Red88, KR94] </ref>, Cook and Palsberg [CP89], and Mitchell [Mit90]. In its untyped form, this model was used rather effectively for the denotational semantics of untyped object-oriented languages. In its typed form, it was used to encode individual object-oriented examples, but had difficulties with uniform interpretations of typed object-oriented languages.
References-found: 26

