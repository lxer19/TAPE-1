URL: http://www.eecs.umich.edu/~radu/papers/CGTC28.ps.gz
Refering-URL: http://www.eecs.umich.edu/~radu/private/resume.html
Root-URL: http://www.eecs.umich.edu
Email: email: radu@eecs.umich.edu  email: kountan@cs.wmich.edu  
Title: Closest Pair for Two Separated Sets of Points  
Author: Radu Litiu Dionysios I. Kountanis 
Keyword: closest pair, rectilinear distance, separated sets  
Date: March 10, 1997  
Address: Ann Arbor, MI 48109-2122,  Kalamazoo, MI 49008,  
Affiliation: Department of Electrical Engineering and Computer Science, University of Michigan  Department of Computer Science, Western Michigan University  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Selim G. Akl and Kelly A. Lyons, </author> <title> "Parallel Computational Geometry", </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1993 </year>
Reference-contexts: Find a pair of points (p, q) with p2P, q2Q such that d (p,q) = ffi (P, Q). Similar problems have been extensively studied in the literature under the heading "the closest pair" problem <ref> [1, 7, 8] </ref>. The closest pair problem though is for one set of points instead of two separated sets of points considered in this paper.
Reference: [2] <author> J.L. Bentley, </author> <title> "Multidimensional Divide and Conquer", </title> <journal> Communications ACM 23(4), </journal> <pages> p.p. 214-229, </pages> <year> 1980 </year>
Reference-contexts: The closest pair problem though is for one set of points instead of two separated sets of points considered in this paper. A divide and conquer approach has been used in <ref> [2, 3] </ref> to solve the closest pair problem, obtaining time complexity fi (n log d1 n), where n is the number of points in the set. 1 Multiprocessor models have also been used to obtain faster solutions.
Reference: [3] <author> J.L. Bentley and M.I. Shamos, </author> <title> "Divide-and-Conquer in Multidimensional Space", </title> <booktitle> Proceedings Eight ACM Annual Symposium on Theory of Computation, </booktitle> <pages> p.p. 220-230, </pages> <year> 1976 </year>
Reference-contexts: The closest pair problem though is for one set of points instead of two separated sets of points considered in this paper. A divide and conquer approach has been used in <ref> [2, 3] </ref> to solve the closest pair problem, obtaining time complexity fi (n log d1 n), where n is the number of points in the set. 1 Multiprocessor models have also been used to obtain faster solutions.
Reference: [4] <author> R. Cypher and C.G. Planton, </author> <title> "Deterministic Sorting in Nearly Logarithmic Time on the Hypercube and Related Computers", </title> <booktitle> Proceedings of the Twenty-Second Annual ACM Symposium of Theory of Computing, </booktitle> <pages> p.p. 93-203, </pages> <year> 1990 </year>
Reference-contexts: Using a hypercube with O (n) processors, O (log n (log log n) 2 ) time has been obtained in [6] by using a fast sorting algorithm with O (log n log log n) time described in <ref> [4, 5] </ref>.
Reference: [5] <author> F.T. Leighton, </author> <title> "Introduction to Parallel Algorithms and Architectures: </title> <address> Arrays-Trees-Hypercubes", Morgan-Kaufman, San Mateo, CA, </address> <year> 1991 </year>
Reference-contexts: Using a hypercube with O (n) processors, O (log n (log log n) 2 ) time has been obtained in [6] by using a fast sorting algorithm with O (log n log log n) time described in <ref> [4, 5] </ref>.
Reference: [6] <author> P.D. MacKenzie and Q.F. Stout, </author> <title> "Asymptotically Efficient Hypercube Algorithms for Computational Geometry", </title> <booktitle> Proceedings of the Third Symposium on the Frontiers of Massively Parallel Computations, </booktitle> <pages> p.p. 8-11, </pages> <year> 1990 </year>
Reference-contexts: Using a hypercube with O (n) processors, O (log n (log log n) 2 ) time has been obtained in <ref> [6] </ref> by using a fast sorting algorithm with O (log n log log n) time described in [4, 5].
Reference: [7] <author> Ketan Mulmuley, </author> <title> "Computational Geometry an Introduction Through Randomized Algorithms", </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1994 </year>
Reference-contexts: Find a pair of points (p, q) with p2P, q2Q such that d (p,q) = ffi (P, Q). Similar problems have been extensively studied in the literature under the heading "the closest pair" problem <ref> [1, 7, 8] </ref>. The closest pair problem though is for one set of points instead of two separated sets of points considered in this paper.
Reference: [8] <author> Franco P. Preparata and Michael Ian Shamos, </author> <title> "Computational Geometry an Introduction", </title> <publisher> Springer-Verlag, </publisher> <address> N.Y., </address> <year> 1985 </year> <month> 12 </month>
Reference-contexts: Find a pair of points (p, q) with p2P, q2Q such that d (p,q) = ffi (P, Q). Similar problems have been extensively studied in the literature under the heading "the closest pair" problem <ref> [1, 7, 8] </ref>. The closest pair problem though is for one set of points instead of two separated sets of points considered in this paper.
References-found: 8

