URL: ftp://ftp.cs.arizona.edu/reports/1992/TR92-20.ps
Refering-URL: http://www.cs.arizona.edu/research/reports.html
Root-URL: http://www.cs.arizona.edu
Title: Modularity in the Design and Implementation of Consul  
Author: Shivakant Mishra, Larry L. Peterson and Richard D. Schlichting 
Address: Tucson, AZ 85721  
Affiliation: Department of Computer Science The University of Arizona  
Note: August  
Date: TR 92-20  3, 1992  
Abstract: Many applications constructed as Autonomous Decentralized Systems require high dependability, often leading to the use of distributed architectures and their associated fault-tolerance techniques. Consul is a system designed to support the use of such techniques in the construction of fault-tolerant, distributed systems structured according to the state machine approach. Here, the way in which modularity has been used in the design and implementation of Consul is described. Our approach to this issue makes it easy to configure a system customized to the needs of a specific application, as well as facilitating the development of the individual components that make up Consul. 
Abstract-found: 1
Intro-found: 1
Reference: [ACG86] <author> Sudhir Ahuja, Nicholas Carriero, and David Gelernter. </author> <title> Linda and friends. </title> <journal> IEEE Computer, </journal> <volume> 19(8) </volume> <pages> 26-34, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: Two small prototype applications have been constructed, a replicated directory object and a replicated word search game; following the completion of the Mach port, Consul will also be used to implement a replicated tuple space for a fault-tolerant version of the Linda coordination language <ref> [ACG86] </ref>.
Reference: [BSS91] <author> K. Birman, A. Schiper, and P. Stephenson. </author> <title> Lightweight causal and atomic group multicast. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 9(3) </volume> <pages> 272-314, </pages> <month> Aug </month> <year> 1991. </year>
Reference-contexts: These services are realized using protocols as the fundamental modules of the system. A large amount of research has been performed in areas related to this approach, including development of new algorithms [CM84, Cri88, GMS91, RB91, VM90] and systems <ref> [BSS91, KDK + 89, PSB + 88] </ref>. In this paper, we overview the way in which modularity has been used in the design and implementation of Consul. <p> The system architecture is optimized to handle a relatively small number of replicas, a reasonable strategy given Consul's orientation towards the state machine approach. It does mean, however, that issues of scale have not been addressed explicitly as they have been in other systems <ref> [BSS91, GMS91] </ref>. In keeping with our emphasis on modularity, the fault-tolerant services supported by Consul are 2 implemented independently of one another as individual protocols rather than together in one monolithic system. Figure 1 illustrates the detailed architecture of a typical protocol configuration in Consul. <p> Fundamentally, each process sends a message in the context of those messages it has already sent or received, a relation that defines a partial ordering on the messages exchanged through the conversation. This partial order, which has also been called causal order <ref> [BSS91] </ref>, is maintained explicitly by Psync in the form of a directed acyclic graph called a context graph. At any given time during execution, each participant has a view of the context graph, which is the subgraph corresponding to those messages it has sent or received up to that point.
Reference: [CASD85] <author> F. Cristian, H. Aghili, R. Strong, and D. Dolev. </author> <title> Atomic broadcast: From simple message diffusion to Byzantine agreement. </title> <booktitle> In Proceedings of the Fifteenth International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 200-206, </pages> <address> Ann Arbor, MI, </address> <month> Jun </month> <year> 1985. </year>
Reference-contexts: At this point, two other kinds of orderings have been constructed. One is a consistent total order; when combined with the atomic message delivery guarantees of Psync, this gives the effect of an atomic broadcast <ref> [CASD85, KTHB89, MSM89, VRB89] </ref>. The other is a semantic dependent order; this takes advantage of the commutativity of the commands encoded in messages to provide an ordering that is less restrictive than total ordering, yet still strong enough to preserve the correctness of the application [MPS89].
Reference: [CM84] <author> J. Chang and N. Maxemchuk. </author> <title> Reliable broadcast protocols. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(3) </volume> <pages> 251-273, </pages> <month> Aug </month> <year> 1984. </year>
Reference-contexts: These services are realized using protocols as the fundamental modules of the system. A large amount of research has been performed in areas related to this approach, including development of new algorithms <ref> [CM84, Cri88, GMS91, RB91, VM90] </ref> and systems [BSS91, KDK + 89, PSB + 88]. In this paper, we overview the way in which modularity has been used in the design and implementation of Consul.
Reference: [Cri88] <author> F. Cristian. </author> <title> Agreeing on who is present and who is absent in a synchronous distributed system. </title> <booktitle> In Proceedings of the Eighteenth International Conference on Fault-tolerant Computing, </booktitle> <pages> pages 206-211, </pages> <address> Tokyo, </address> <month> Jun </month> <year> 1988. </year>
Reference-contexts: These services are realized using protocols as the fundamental modules of the system. A large amount of research has been performed in areas related to this approach, including development of new algorithms <ref> [CM84, Cri88, GMS91, RB91, VM90] </ref> and systems [BSS91, KDK + 89, PSB + 88]. In this paper, we overview the way in which modularity has been used in the design and implementation of Consul.
Reference: [Cri91] <author> F. Cristian. </author> <title> Understanding fault-tolerant distributed systems. </title> <journal> Communicationsof ACM, </journal> <volume> 34(2) </volume> <pages> 56-78, </pages> <month> Feb </month> <year> 1991. </year>
Reference-contexts: Figure 1 illustrates the detailed architecture of a typical protocol configuration in Consul. In this figure, the rectangles are protocols, with an arrow from protocol P 1 to protocol P 2 indicating that P 1 depends on the correct functioning of P 2 to ensure its own correctness <ref> [Cri91] </ref>. The stable store protocol at the base of the substrate provides a storage facility that survives processor crashes. The (re)start and divider protocols are configuration protocols, i.e., they aid the user in building a system according to the requirements of the application.
Reference: [GMS91] <author> H. Garcia-Molina and A. Spauster. </author> <title> Ordered and reliable multicast communication. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 9(3) </volume> <pages> 242-271, </pages> <month> Aug </month> <year> 1991. </year>
Reference-contexts: These services are realized using protocols as the fundamental modules of the system. A large amount of research has been performed in areas related to this approach, including development of new algorithms <ref> [CM84, Cri88, GMS91, RB91, VM90] </ref> and systems [BSS91, KDK + 89, PSB + 88]. In this paper, we overview the way in which modularity has been used in the design and implementation of Consul. <p> The system architecture is optimized to handle a relatively small number of replicas, a reasonable strategy given Consul's orientation towards the state machine approach. It does mean, however, that issues of scale have not been addressed explicitly as they have been in other systems <ref> [BSS91, GMS91] </ref>. In keeping with our emphasis on modularity, the fault-tolerant services supported by Consul are 2 implemented independently of one another as individual protocols rather than together in one monolithic system. Figure 1 illustrates the detailed architecture of a typical protocol configuration in Consul.
Reference: [HP91] <author> N. C. Hutchinson and L. L. Peterson. </author> <title> The x-kernel: An architecture for implementing network protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(1) </volume> <pages> 64-76, </pages> <month> Jan </month> <year> 1991. </year>
Reference-contexts: Section 3 then describes the structural aspects of the system implementation; in addition to serving as a case study of how such modularity is achieved in fault-tolerant systems, this description also documents other interesting features of the implementation. Our use of the x-kernel <ref> [HP91] </ref> as an implementation platform has been influential in many aspects of Consul's implementation, so its fundamental characteristics are outlined here as well. <p> Here, we first give an operational overview of the x-kernel derived from <ref> [HP91] </ref> and then describe how it has been used to construct a modular implementation of Consul. 3.1 Overview of the x-kernel The x-kernel is an operating system kernel explicitly designed to support the rapid implementation of efficient network protocols by providing a uniform protocol interface and an implementation support library.
Reference: [HPOA89] <author> N. C. Hutchinson, L. L. Peterson, S. O'Malley, and M. Abbott. </author> <title> RPC in the x-kernel: Evaluating new design techniques. </title> <booktitle> In Proceedings of the Twelfth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 91-101, </pages> <address> Litchfield Park, AZ, </address> <month> Dec </month> <year> 1989. </year>
Reference-contexts: Moreover, the implementation retains this modularity by using the configuration and communication support provided by the x-kernel. Our experience, both with Consul directly [Mis91] as well as with other systems built using the x-kernel model <ref> [HPOA89, OP92] </ref>, is that this modularization comes with little or no performance penalty. 10 Despite our positive experience with modularization in this context, there were, in fact, a number of difficulties that made the process less straightforward than it might appear.
Reference: [HS92] <author> M. Hiltunen and R. D. Schlichting. </author> <title> Modularizing fault-tolerant protocols. </title> <booktitle> In Fifth SIGOPS European Workshop, </booktitle> <address> Le Mont Saint-Michel, France, </address> <month> Sept </month> <year> 1992. </year> <note> To appear. 11 </note>
Reference-contexts: Our current research in this area is concentrating on identifying and characterizing the dependencies that exist between protocols used for building fault-tolerant, distributed systems. As part of this effort, we are also working on developing a new model for this type of protocol that we hope will facilitate modularization <ref> [HS92] </ref>. This new model is based on further refining protocols into their orthogonal properties and then realizing these properties with a standard system framework. Acknowledgments This work has been supported in part by NSF Grant CCR-9003161, ONR Grant N00014-91J-1015, and DARPA Contract DABT63-91-0030.
Reference: [KDK + 89] <author> H. Kopetz, A. Damm, C. Koza, M. Mulazzani, W. Schwabl, C. Senft, and R. Zainlinger. </author> <title> Distributed fault-tolerant real-time systems: The Mars approach. </title> <booktitle> IEEE Micro, </booktitle> <pages> pages 25-40, </pages> <month> Feb </month> <year> 1989. </year>
Reference-contexts: These services are realized using protocols as the fundamental modules of the system. A large amount of research has been performed in areas related to this approach, including development of new algorithms [CM84, Cri88, GMS91, RB91, VM90] and systems <ref> [BSS91, KDK + 89, PSB + 88] </ref>. In this paper, we overview the way in which modularity has been used in the design and implementation of Consul.
Reference: [KTHB89] <author> M. F. Kaashoek, A. Tanenbaum, S. F. Hummel, and H. Bal. </author> <title> An efficient reliable broadcast protocol. </title> <journal> Operating Systems Review, </journal> <volume> 23(4) </volume> <pages> 5-19, </pages> <month> Oct </month> <year> 1989. </year>
Reference-contexts: At this point, two other kinds of orderings have been constructed. One is a consistent total order; when combined with the atomic message delivery guarantees of Psync, this gives the effect of an atomic broadcast <ref> [CASD85, KTHB89, MSM89, VRB89] </ref>. The other is a semantic dependent order; this takes advantage of the commutativity of the commands encoded in messages to provide an ordering that is less restrictive than total ordering, yet still strong enough to preserve the correctness of the application [MPS89].
Reference: [Lam81] <author> B. Lampson. </author> <title> Atomic transactions. </title> <booktitle> In Distributed SystemsArchitecture and Implementation, </booktitle> <pages> pages 246-265. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1981. </year>
Reference-contexts: Furthermore, processors are assumed to suffer fail-silent semantics [PSB + 88], i.e., they fail by crashing without making any incorrect state transitions. Finally, Consul assumes that stable storage is available to each processor, and that data written to stable storage survives processor crashes <ref> [Lam81] </ref>. A copy of Consul resides on each processor in the system, and provides an interface between the application program (i.e., the state machine replicas) and the underlying network.
Reference: [Lap92] <author> J. C. Laprie, </author> <title> editor. Dependability: Basic Concepts and Terminology. </title> <publisher> Springer-Verlag, </publisher> <address> Vienna, </address> <year> 1992. </year>
Reference-contexts: Another advantage, which is the focus of this paper, is that distributed systems provide an inherent redundancy that can be exploited to improve the overall dependability of the system <ref> [Lap92] </ref>. High dependability is often the single-most important attribute needed in many of the applications for which ADS are used, such as railway control and manufacturing systems.
Reference: [Mis91] <author> S. Mishra. </author> <title> Consul: A Communication Substrate for Fault-tolerant Distributed Programs. </title> <type> PhD thesis, </type> <institution> Dept of Computer Science, University of Arizona, </institution> <address> Tucson, AZ, </address> <year> 1991. </year>
Reference-contexts: To achieve high dependability, the software for a distributed system must be implemented as a fault-tolerant, distributed program that can continue executing despite processor or network failures. Recently, we have designed and implemented a system called Consul <ref> [Mis91, MPS91b] </ref> that provides support for constructing such programs using the state machine approach [Sch90]. It does this by providing various fault-tolerant services such as group-oriented multicast, membership, and recovery, which simplify the problems associated with consistently ordering events and dealing with failures in this approach. <p> This is done by first, reading a checkpoint stored by the replica during execution, and then using an automatic replay of messages stored in Psync's context graph to process missing commands. Further details on all of these protocols can be found in <ref> [Mis91] </ref>. 3 Implementation Modularity The implementation of Consul is made up of approximately 10,000 lines of C code, of which 3,500 is Psync. As already mentioned, the implementation vehicle is the x-kernel, an operating system kernel designed explicitly for experimenting with communication protocols. <p> Such a strategy avoids many of the ad-hoc structuring and control paths that often accompany a monolithic system. Moreover, the implementation retains this modularity by using the configuration and communication support provided by the x-kernel. Our experience, both with Consul directly <ref> [Mis91] </ref> as well as with other systems built using the x-kernel model [HPOA89, OP92], is that this modularization comes with little or no performance penalty. 10 Despite our positive experience with modularization in this context, there were, in fact, a number of difficulties that made the process less straightforward than it
Reference: [MPS89] <author> S. Mishra, L. Peterson, and R. Schlichting. </author> <title> Implementing replicated objects using Psync. </title> <booktitle> In Proceedings of the Eighth Symposium on Reliable Distributed Computing, </booktitle> <pages> pages 42-52, </pages> <address> Seattle, Washington, </address> <month> Oct </month> <year> 1989. </year>
Reference-contexts: The other is a semantic dependent order; this takes advantage of the commutativity of the commands encoded in messages to provide an ordering that is less restrictive than total ordering, yet still strong enough to preserve the correctness of the application <ref> [MPS89] </ref>. The failure detection and membership protocols deal with replica failures and recoveries, and together comprise Consul's membership service [MPS91a]. The failure detection protocol is used to monitor replicas for failures.
Reference: [MPS91a] <author> S. Mishra, L. Peterson, and R. Schlichting. </author> <title> A membership protocol based on partial order. </title> <booktitle> In Proceedings of the Second Working Conference on Dependable Computing for Critical Applications, </booktitle> <pages> pages 137-145, </pages> <address> Tucson, AZ, </address> <month> Feb </month> <year> 1991. </year>
Reference-contexts: The failure detection and membership protocols deal with replica failures and recoveries, and together comprise Consul's membership service <ref> [MPS91a] </ref>. The failure detection protocol is used to monitor replicas for failures. It does this based on message traffic, i.e., if no message is received from some replica in a given interval of time, its failure is suspected. <p> The MT message, which is 12 bytes long, is schematically depicted in Figure 3. Here, mode indicates the type of the membership message and p addr indicates the address of the replica. As described in <ref> [MPS91a] </ref>, there are five types of membership messages: &lt;P is down&gt;, &lt;P is up&gt;, &lt;Ack, P is down&gt;, &lt;Nack, P is down&gt; and &lt;Ack, P is up&gt;.
Reference: [MPS91b] <author> S. Mishra, L. L. Peterson, and R. D. Schlichting. </author> <title> Consul: A communication substrate for fault-tolerant distributed programs. </title> <type> Technical Report TR 91-32, </type> <institution> Dept of Computer Science, University of Arizona, </institution> <address> Tucson, AZ, </address> <year> 1991. </year>
Reference-contexts: To achieve high dependability, the software for a distributed system must be implemented as a fault-tolerant, distributed program that can continue executing despite processor or network failures. Recently, we have designed and implemented a system called Consul <ref> [Mis91, MPS91b] </ref> that provides support for constructing such programs using the state machine approach [Sch90]. It does this by providing various fault-tolerant services such as group-oriented multicast, membership, and recovery, which simplify the problems associated with consistently ordering events and dealing with failures in this approach.
Reference: [MSM89] <author> P. M. Melliar-Smith and L. E. Moser. </author> <title> Fault-tolerant distributed systems based on broadcast communication. </title> <booktitle> In Proceedings of the Ninth International Conference on Distributed Computing Systems, </booktitle> <pages> pages 129-134, </pages> <address> Newport Beach, CA, </address> <month> Jun </month> <year> 1989. </year>
Reference-contexts: At this point, two other kinds of orderings have been constructed. One is a consistent total order; when combined with the atomic message delivery guarantees of Psync, this gives the effect of an atomic broadcast <ref> [CASD85, KTHB89, MSM89, VRB89] </ref>. The other is a semantic dependent order; this takes advantage of the commutativity of the commands encoded in messages to provide an ordering that is less restrictive than total ordering, yet still strong enough to preserve the correctness of the application [MPS89].
Reference: [OP92] <author> Sean W. O'Malley and Larry L. Peterson. </author> <title> A dynamic network architecture. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(2) </volume> <pages> 110-143, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: Moreover, the implementation retains this modularity by using the configuration and communication support provided by the x-kernel. Our experience, both with Consul directly [Mis91] as well as with other systems built using the x-kernel model <ref> [HPOA89, OP92] </ref>, is that this modularization comes with little or no performance penalty. 10 Despite our positive experience with modularization in this context, there were, in fact, a number of difficulties that made the process less straightforward than it might appear.
Reference: [PBS89] <author> L. L. Peterson, N. C. Buchholz, and R. D. Schlichting. </author> <title> Preserving and using context information in interprocess communication. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 7(3) </volume> <pages> 217-246, </pages> <month> Aug </month> <year> 1989. </year>
Reference-contexts: The divider protocol is a demultiplexing protocol that directs messages in the system to the appropriate protocols. The role of these protocols is described further in Section 3. Psync is the main communication mechanism in Consul <ref> [PBS89] </ref>. It provides a group-oriented interprocess communication mechanism in the form of a multicast facility that maintains the partial order of messages exchanged in the system. Specifically, it supports a conversation abstraction through which a collection of processes such as the state machine replicas exchange messages.
Reference: [Pos80] <author> Jon Postel. </author> <title> User datagram protocol. Request For Comments 768, </title> <institution> USC Information Sciences Institute, Marina del Ray, Calif., </institution> <month> Aug </month> <year> 1980. </year>
Reference-contexts: The x-kernel provides three primitive communication objects: protocols, sessions, and messages. Protocol objects are static and passive. Each protocol object corresponds to a conventional network protocole.g., IP [Pos81], UDP <ref> [Pos80] </ref>, TCP [USC81]where the relationships between protocols are defined at the time a kernel is configured. Session objects are also passive, but they are dynamically created.
Reference: [Pos81] <author> Jon Postel. </author> <title> Internet protocol. Request For Comments 791, </title> <institution> USC Information Sciences Institute, Marina del Ray, Calif., </institution> <month> Sep </month> <year> 1981. </year>
Reference-contexts: The x-kernel provides three primitive communication objects: protocols, sessions, and messages. Protocol objects are static and passive. Each protocol object corresponds to a conventional network protocole.g., IP <ref> [Pos81] </ref>, UDP [Pos80], TCP [USC81]where the relationships between protocols are defined at the time a kernel is configured. Session objects are also passive, but they are dynamically created.
Reference: [PSB + 88] <author> D Powell, D. Seaton, G. Bonn, P. Verissimo, and F. Waeselynk. </author> <title> The Delta-4 approach to dependability in open distributed computing systems. </title> <booktitle> In Proceedings of the Eighteenth Symposium on Fault-Tolerant Computing, </booktitle> <address> Tokyo, </address> <month> Jun </month> <year> 1988. </year>
Reference-contexts: These services are realized using protocols as the fundamental modules of the system. A large amount of research has been performed in areas related to this approach, including development of new algorithms [CM84, Cri88, GMS91, RB91, VM90] and systems <ref> [BSS91, KDK + 89, PSB + 88] </ref>. In this paper, we overview the way in which modularity has been used in the design and implementation of Consul. <p> Messages may be lost or delivered out-of-order, but it is assumed that they are never corrupted. Furthermore, processors are assumed to suffer fail-silent semantics <ref> [PSB + 88] </ref>, i.e., they fail by crashing without making any incorrect state transitions. Finally, Consul assumes that stable storage is available to each processor, and that data written to stable storage survives processor crashes [Lam81].
Reference: [RB91] <author> A. Ricciardi and K. Birman. </author> <title> Using process groups to implement failure detection in asynchronous environments. </title> <booktitle> In Proceedings of Tenth Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 341-353, </pages> <address> Montreal, Quebec, Canada, </address> <month> Aug </month> <year> 1991. </year>
Reference-contexts: These services are realized using protocols as the fundamental modules of the system. A large amount of research has been performed in areas related to this approach, including development of new algorithms <ref> [CM84, Cri88, GMS91, RB91, VM90] </ref> and systems [BSS91, KDK + 89, PSB + 88]. In this paper, we overview the way in which modularity has been used in the design and implementation of Consul.
Reference: [Sch90] <author> F. Schneider. </author> <title> Implementing fault-tolerant services using the state machine approach: A tutorial. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(4) </volume> <pages> 299-319, </pages> <month> Dec </month> <year> 1990. </year>
Reference-contexts: Recently, we have designed and implemented a system called Consul [Mis91, MPS91b] that provides support for constructing such programs using the state machine approach <ref> [Sch90] </ref>. It does this by providing various fault-tolerant services such as group-oriented multicast, membership, and recovery, which simplify the problems associated with consistently ordering events and dealing with failures in this approach. These services are realized using protocols as the fundamental modules of the system. <p> Finally, Section 4 offers some conclusions. 2 Design Modularity As already noted, Consul is a collection of protocols that form a communication substrate upon which fault-tolerant, distributed systems can be built using the state machine approach <ref> [Sch90] </ref>. In this approach, a system is structured as a collection of generic services that are implemented by multiple processes for fault-tolerance.
Reference: [USC81] <author> USC. </author> <title> Transmission control protocol. Request For Comments 793, </title> <institution> USC Information Sciences Institute, Marina del Ray, Calif., </institution> <month> Sep </month> <year> 1981. </year>
Reference: [VM90] <author> P. Verissimo and J. Marques. </author> <title> Reliable broadcast for fault-tolerance on local computer networks. </title> <booktitle> In Proceedings of the Ninth Symposium on Reliable Distributed Systems, </booktitle> <pages> pages 54-63, </pages> <address> Huntsville, AL, </address> <month> oct </month> <year> 1990. </year>
Reference-contexts: These services are realized using protocols as the fundamental modules of the system. A large amount of research has been performed in areas related to this approach, including development of new algorithms <ref> [CM84, Cri88, GMS91, RB91, VM90] </ref> and systems [BSS91, KDK + 89, PSB + 88]. In this paper, we overview the way in which modularity has been used in the design and implementation of Consul.
Reference: [VRB89] <author> P. Verissimo, L. Rodrigues, and M. Baptista. </author> <title> Amp: A highly parallel atomic multicast protocol. </title> <booktitle> In SIGCOMM'89, </booktitle> <pages> pages 83-93, </pages> <address> Austin, TX, </address> <month> Sep </month> <year> 1989. </year> <month> 12 </month>
Reference-contexts: At this point, two other kinds of orderings have been constructed. One is a consistent total order; when combined with the atomic message delivery guarantees of Psync, this gives the effect of an atomic broadcast <ref> [CASD85, KTHB89, MSM89, VRB89] </ref>. The other is a semantic dependent order; this takes advantage of the commutativity of the commands encoded in messages to provide an ordering that is less restrictive than total ordering, yet still strong enough to preserve the correctness of the application [MPS89].
References-found: 29

