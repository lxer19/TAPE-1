URL: http://www.cse.ucsc.edu/research/concurrent/papers/icccn97.ps
Refering-URL: http://www.cse.ucsc.edu/research/concurrent/reports/
Root-URL: http://www.cse.ucsc.edu
Title: Improving Video-on-Demand Server Efficiency Through Stream Tapping  
Author: Steven W. Carter and Darrell D. E. Long 
Address: Santa Cruz, CA 95064  
Affiliation: Department of Computer Science University of California, Santa Cruz  
Abstract: Efficiency is essential for Video-on-Demand (VOD) to be successful. Conventional VOD servers are inefficient; they dedicate a disk stream for each client, quickly using up all available streams. However, several systems have been proposed that allow clients to share streams. We present a new system called stream tapping that allows a client to greedily tap data from any stream on the VOD server containing video data the client can use. This is accomplished through the use of a small buffer on the client set-top box and requires less than 20% of the disk bandwidth used by conventional systems for popular videos. We present a description and analysis of the stream tapping system as well as comparisons between it and other efficiency-improving systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> James R. Allen, Blaise L. Heltai, Arthur H. Koenig, Don-ald F. Snow, and James R. Watson. VCTV: </author> <title> a video-on-demand market test. </title> <journal> AT&T Technical Journal, </journal> <volume> 72(1):714, </volume> <month> January </month> <year> 1993. </year>
Reference-contexts: Contact: Manager, Copyrights and Permissions / IEEE Service Center / 445 Hoes Lane / P.O. Box 1331 / Piscataway, NJ 08855-1331, USA. Telephone: + Intl. 908-562-3966. z This research was supported by the Office of Naval Research under Grant N0001492J1807. nels, and satellite television <ref> [1] </ref>. Thus it is also important for the VOD server to be run as efficiently as possible so it can support the large number of clients expected to use it.
Reference: [2] <author> Asit Dan, Dinkar Sitaram, and Perwez Shahabuddin. </author> <title> Dynamic batching policies for an on-demand video server. Multimedia Systems, </title> <address> 4(3):11221, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: Some of the systems use several techniques. We distinguish them by using the most fundamental idea of the system. 2.1 Batching A simple but effective technique for improving VOD server efficiency is known as batching <ref> [2, 3] </ref>. When the VOD server has multiple requests for the same video in its request queue, it may service them all (that is, batch the requests together) by multicasting the video to all of the requesting clients. <p> These lengths were capped at a minimum of 90 minutes and a maximum of 180 minutes to keep the values realistic. The probability of each video was modeled using a Zipf-like distribution. This distribution was recommended by Drapeau et al. [12], and as in other studies <ref> [2, 9] </ref> we configured the distribution to more closely fit empirical video rental patterns [13] using Zipf parameters N = 92 and = 0:271. 4.2 Clients Client requests were generated based on a Poisson arrival process with interarrival time 1=.
Reference: [3] <author> Charu C. Aggarwal, Joel L. Wolf, and Philip S. Yu. </author> <title> On optimal batching policies for video-on-demand storage servers. </title> <booktitle> In Proceedings of the International Conference on Multimedia Computing and Systems, </booktitle> <pages> pages 2538, </pages> <address> Hiroshima, Japan, June 1996. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Some of the systems use several techniques. We distinguish them by using the most fundamental idea of the system. 2.1 Batching A simple but effective technique for improving VOD server efficiency is known as batching <ref> [2, 3] </ref>. When the VOD server has multiple requests for the same video in its request queue, it may service them all (that is, batch the requests together) by multicasting the video to all of the requesting clients.
Reference: [4] <author> Kevin C. Almeroth and Mostafa H. Ammar. </author> <title> The use of mul-ticast delivery to provide a scalable and interactive video-on-demand service. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 14(5):111022, </volume> <month> August </month> <year> 1996. </year>
Reference-contexts: However, this strategy will not attempt to make efficient use of the server's disk streams until all of the streams are in use. 2.2 Staggered Broadcasting In this system <ref> [4, 5] </ref>, a disk stream for a video is only started at regular intervals (such as every 10 minutes), and all requests for the video received during the current interval are batched together.
Reference: [5] <author> Tzi-cker Chiueh and Chung-ho Lu. </author> <title> A periodic broadcasting approach to video-on-demand service. </title> <booktitle> Proceedings of the SPIE The International Society for Optical Engineering, </booktitle> <address> 2615:1629, </address> <year> 1996. </year>
Reference-contexts: However, this strategy will not attempt to make efficient use of the server's disk streams until all of the streams are in use. 2.2 Staggered Broadcasting In this system <ref> [4, 5] </ref>, a disk stream for a video is only started at regular intervals (such as every 10 minutes), and all requests for the video received during the current interval are batched together.
Reference: [6] <author> S. Viswanathan and T. Imielinski. </author> <title> Metropolitan area video-on-demand service using pyramid broadcasting. Multimedia Systems, </title> <address> 4(4):197208, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: While this makes very good use of the server's available bandwidth, it guarantees a non-zero average latency. 2.3 Pyramid Broadcasting Pyramid broadcasting <ref> [6, 7] </ref> is a variation on staggered broadcasting. It also reserves a certain number of disk streams for particular videos, but rather than having the disk streams read the entire video, it has the streams read multiplicatively increasing segments of the video.
Reference: [7] <author> Charu C. Aggarwal, Joel L. Wolf, and Philip S. Yu. </author> <title> A permutation-based pyramid broadcasting scheme for video-on-demand systems. </title> <booktitle> In Proceedings of the International Conference on Multimedia Computing and Systems, </booktitle> <pages> pages 11826, </pages> <address> Hiroshima, Japan, June 1996. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: While this makes very good use of the server's available bandwidth, it guarantees a non-zero average latency. 2.3 Pyramid Broadcasting Pyramid broadcasting <ref> [6, 7] </ref> is a variation on staggered broadcasting. It also reserves a certain number of disk streams for particular videos, but rather than having the disk streams read the entire video, it has the streams read multiplicatively increasing segments of the video. <p> Given a video i, we used L s (S) = 2S for staggered broadcasting and L p (S) = L i 2 S=3 1 for pyramid broadcasting <ref> [7] </ref>. Note that even with the high arrival rate (a request every ten seconds) stream tapping outperformed both broadcasting systems given sufficient disk streams. Figures 9 and 10 compare stream tapping to batching and asynchronous multicasting.
Reference: [8] <author> Leana Golubchik, John C. S. Lui, and Richard R. Muntz. </author> <title> Adaptive piggybacking: a novel technique for data sharing in video-on-demand storage servers. Multimedia Systems, </title> <address> 4(30):14055, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: The STB also requires a local buffer of moderate size: for MPEG-1, the buffer must be between 250 and 600 MB, depending on the version of pyramid broadcasting used. 2.4 Piggybacking In this system <ref> [8, 9] </ref>, the display rates of videos are changed by 5% (little enough so human observers should not notice) so that two existing disk streams can be merged into one. <p> However, in both Figures 9 and 10, stream tapping handily outperforms the other systems. The only system that we could not compare stream tapping to directly was piggybacking. However, we note that the simple merging policy <ref> [8] </ref> is essentially the same as stream tapping using only full taps and no options, but where the number of disk minutes required by the full tap is 10 rather than .
Reference: [9] <author> Charu C. Aggarwal, Joel L. Wolf, and Philip S. Yu. </author> <title> On optimal piggyback merging policies for video-on-demand systems. </title> <booktitle> In Proceedings of the International Conference on Multimedia Systems, </booktitle> <pages> pages 2538, </pages> <address> Hiroshima, Japan, June 1996. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: The STB also requires a local buffer of moderate size: for MPEG-1, the buffer must be between 250 and 600 MB, depending on the version of pyramid broadcasting used. 2.4 Piggybacking In this system <ref> [8, 9] </ref>, the display rates of videos are changed by 5% (little enough so human observers should not notice) so that two existing disk streams can be merged into one. <p> These lengths were capped at a minimum of 90 minutes and a maximum of 180 minutes to keep the values realistic. The probability of each video was modeled using a Zipf-like distribution. This distribution was recommended by Drapeau et al. [12], and as in other studies <ref> [2, 9] </ref> we configured the distribution to more closely fit empirical video rental patterns [13] using Zipf parameters N = 92 and = 0:271. 4.2 Clients Client requests were generated based on a Poisson arrival process with interarrival time 1=.
Reference: [10] <author> Heekyoung Woo and Chong-Kwon Kim. </author> <title> Multicast scheduling for VOD services. Multimedia Tools and Applications, </title> <address> 2(2):157171, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: However, the slow merging rate (two streams 3 minutes apart take 30 minutes to merge) limits this system's potential. 2.5 Asynchronous Multicasting Asynchronous multicasting <ref> [10, 11] </ref> allows a client to join a multicast group for a video after the video has started.
Reference: [11] <author> Hari Kalva and Borko Furht. </author> <title> Techniques for improving the capacity of video-on-demand systems. </title> <booktitle> In Proceedings of the 29th Annual Hawaii International Conference on System Sciences, </booktitle> <pages> pages 30815, </pages> <address> Wailea, HI, USA, January 1996. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: However, the slow merging rate (two streams 3 minutes apart take 30 minutes to merge) limits this system's potential. 2.5 Asynchronous Multicasting Asynchronous multicasting <ref> [10, 11] </ref> allows a client to join a multicast group for a video after the video has started. <p> The buffer for asynchronous multicasting must be able to hold at least N S minutes of video data. Using N = 3 and S = 6 <ref> [11] </ref>, this is larger than 200 MB. Also, since the client can only receive one segment at a time (due to the high transfer rate), in order to join an existing mul-ticast group it must receive its first segment before the group receives the N th segment of the video.
Reference: [12] <author> Ann L. Drapeau, David A. Patterson, and Randy H. Katz. </author> <title> Toward workload characterization of video server and digi-tial library applications. </title> <booktitle> 1994 ACM SIGMETRICS Conference on Measurement and Modeling of Computer Systems, </booktitle> <address> 22(1):2745, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: These lengths were capped at a minimum of 90 minutes and a maximum of 180 minutes to keep the values realistic. The probability of each video was modeled using a Zipf-like distribution. This distribution was recommended by Drapeau et al. <ref> [12] </ref>, and as in other studies [2, 9] we configured the distribution to more closely fit empirical video rental patterns [13] using Zipf parameters N = 92 and = 0:271. 4.2 Clients Client requests were generated based on a Poisson arrival process with interarrival time 1=.
Reference: [13] <author> Video Store Magazine, </author> <month> December 13, </month> <year> 1992. </year>
Reference-contexts: The probability of each video was modeled using a Zipf-like distribution. This distribution was recommended by Drapeau et al. [12], and as in other studies [2, 9] we configured the distribution to more closely fit empirical video rental patterns <ref> [13] </ref> using Zipf parameters N = 92 and = 0:271. 4.2 Clients Client requests were generated based on a Poisson arrival process with interarrival time 1=. Upon arrival, clients selected a video based on the distribution described above.
Reference: [14] <author> Steven W. Carter and Darrell D. E. </author> <title> Long. Stream tapping: a system for improving efficiency on a video-on-demand server. </title> <type> Technical Report UCSCCRL9711, </type> <institution> University of California, Santa Cruz, </institution> <month> April </month> <year> 1997. </year>
Reference-contexts: While the assumptions made here and in x4.3 may seem overly simplistic, they are consistent with the approach taken by other researchers [211]. 5 Results This section gives several results for the stream tapping simulation. A more complete description can be found in another report <ref> [14] </ref>. In a default configuration: * The VOD server has 300 disk streams and 92 videos (S = 300, N = 92). * The client STB has a 10-minute buffer and can receive up to 4 disk streams at any one time (fi = 10, C = 4).
References-found: 14

