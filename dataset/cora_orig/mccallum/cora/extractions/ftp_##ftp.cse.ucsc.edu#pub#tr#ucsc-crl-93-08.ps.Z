URL: ftp://ftp.cse.ucsc.edu/pub/tr/ucsc-crl-93-08.ps.Z
Refering-URL: ftp://ftp.cse.ucsc.edu/pub/tr/README.html
Root-URL: http://www.cse.ucsc.edu
Title: Descriptive Complexity of Optimization and Counting Problems  
Author: by Madhukar Narayan Thakur Phokion G. Kolaitis David Haussler Manfred K. Warmuth Dean 
Degree: A dissertation submitted in partial satisfaction of the requirements for the degree of Doctor of Philosophy in  The dissertation of Madhukar Narayan Thakur is approved:  
Date: December 1992  
Affiliation: University of California Santa Cruz  Computer and Information Sciences  of Graduate Studies and Research  
Abstract-found: 0
Intro-found: 1
Reference: [ADP80] <author> G. Ausiello, A. D'Atri, and M. Protasi. </author> <title> Structure preserving reductions among convex optimization problems. </title> <journal> J. Computer and System Sciences, </journal> <volume> 21 </volume> <pages> 136-153, </pages> <year> 1980. </year>
Reference-contexts: There have been several attempts to classify optimization problems by classifying related language problems. Notable among these is the work of Krentel [Kre87], Wagner [Wag86], Leggett and Moore [LM81], Ausiello, and D'Atri and Protasi <ref> [ADP80] </ref>. (cf. [BJY89] for a comprehensive survey of the results in the area). We are interested in a structural theory of NP optimization problems that isolates interesting and natural classes of optimization problems with good approximation algorithms.
Reference: [ALM + 92] <author> S. Arora, C. Lund, R. Motwani, M. Sudan, and M. Szegedy. </author> <title> Proof verification and intractability of approximation problems. </title> <booktitle> In Proc. 33th IEEE Symp. on Foundations of Computer Science, </booktitle> <year> 1992. </year>
Reference-contexts: A variety of optimization problems, whose decision versions are NP-complete have vastly different approximation behavior. They range from being non-approximable on one extreme to having FPTAS. For example, MAX CLIQUE is not constant approximable <ref> [AS92, ALM + 92] </ref> unless P = NP. On the other hand a large number of optimization problems like MAX SAT, MAX CUT, MIN VERTEX COVER, and MIN TSP with weights f1, 2g are constant-approximable [PS82]. <p> On a more positive note, the MAX INDEPENDENT SET problem restricted to planar graphs has a PTAS [Bak83] and the KNAPSACK problem has a fully polynomial time approximation scheme [IK75]. On the other hand, no PTAS exists for MAX 3SAT, MAX CUT, MIN VERTEX COVER, unless P = NP <ref> [ALM + 92] </ref>. One of the first attempts made to study optimization problems with an aim of deriving necessary and sufficient conditions for their approximability, was made by Paz 19 and Moran [PM81]. <p> One may wonder if the "dual" concept of negativity might have an impact on the approximation properties of maximization problems. A moment's reflection, however, reveals that this is not the case, since MAX F 1 contains MAX CLIQUE, which is not constant-approximable <ref> [AS92, ALM + 92] </ref>, but is definable by the 1 formula (8x)(8y)(:S (x) _ :S (y) _ x = y _ E (x; y)) in which S has negative occurrences only.
Reference: [AS92] <author> S. Arora and S. Safra. </author> <title> Approximating clique is NP-complete. </title> <booktitle> In Proc. 33th IEEE Symp. on Foundations of Computer Science, </booktitle> <year> 1992. </year>
Reference-contexts: A variety of optimization problems, whose decision versions are NP-complete have vastly different approximation behavior. They range from being non-approximable on one extreme to having FPTAS. For example, MAX CLIQUE is not constant approximable <ref> [AS92, ALM + 92] </ref> unless P = NP. On the other hand a large number of optimization problems like MAX SAT, MAX CUT, MIN VERTEX COVER, and MIN TSP with weights f1, 2g are constant-approximable [PS82]. <p> This explains the difference between showing that a problem is non-approximable and it is complete for NPOpt. It also shows that problems which are NP-complete in their decision version behave differently w.r.t. their approximation properties and their completeness for NPOpt. More recently, Arora and Safra <ref> [AS92] </ref> showed the non-approximability of the MAX CLIQUE problem. They used techniques related to probabilistic proof checking and provided a new characterization of the class NP in terms of resources required to probabilistically verify proofs. <p> One may wonder if the "dual" concept of negativity might have an impact on the approximation properties of maximization problems. A moment's reflection, however, reveals that this is not the case, since MAX F 1 contains MAX CLIQUE, which is not constant-approximable <ref> [AS92, ALM + 92] </ref>, but is definable by the 1 formula (8x)(8y)(:S (x) _ :S (y) _ x = y _ E (x; y)) in which S has negative occurrences only.
Reference: [Bak83] <author> B. S. Baker. </author> <title> Approximation algorithms for NP-complete problems on planar graphs. </title> <booktitle> In Proc. 24th IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 265-273, </pages> <year> 1983. </year>
Reference-contexts: On the other hand a large number of optimization problems like MAX SAT, MAX CUT, MIN VERTEX COVER, and MIN TSP with weights f1, 2g are constant-approximable [PS82]. On a more positive note, the MAX INDEPENDENT SET problem restricted to planar graphs has a PTAS <ref> [Bak83] </ref> and the KNAPSACK problem has a fully polynomial time approximation scheme [IK75]. On the other hand, no PTAS exists for MAX 3SAT, MAX CUT, MIN VERTEX COVER, unless P = NP [ALM + 92].
Reference: [BH77] <author> L. Berman and J. Hartmanis. </author> <title> On isomorphisms and density of NP and other complete sets. </title> <journal> SIAM Journal for Computing, </journal> <volume> 6(2):305 - 322, </volume> <year> 1977. </year>
Reference-contexts: The absence of a good model of computation for optimization problems has hindered the development of structural optimization theory on a par with structural complexity theory. Polynomial reducibility also seems to be an inappropriate notion of reduction between optimization problems. Although all known natural NP-complete problems are polynomially isomorphic <ref> [BH77] </ref>, their optimization counterparts have drastically different approximation properties. Even though the tools of complexity theory seem inappropriate to deal with classification of optimization problems, researchers have made some progress in classifying optimization problems so as to obtain classes of problems approximable by polynomial time algorithms.
Reference: [BIS90] <author> D. M. Barrington, N. Immerman, and H. Straubing. </author> <title> On uniformity within NC. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 41(3):274 - 306, </volume> <year> 1990. </year>
Reference-contexts: In addition to these results, researchers have provided logical characterization of many complexity classes; among these are the characterizations of uniform versions of the circuit class AC 0 <ref> [BIS90] </ref>, NLOGSPACE [Imm87b], and PSPACE [Imm87b]. The important results in this field are surveyed in [Gur88, Imm87a, Imm89]. These are logical characterizations of language classes, or in other words, the above work studies how a decision problem can be defined in a logical framework.
Reference: [BJY89] <author> D. Bruschi, D. Joseph, and P. Young. </author> <title> A structural overview of NP optimization problems. </title> <type> Technical Report 861, </type> <institution> Department of Computer Science, University of Wisconsin, Madison, </institution> <year> 1989. </year>
Reference-contexts: There have been several attempts to classify optimization problems by classifying related language problems. Notable among these is the work of Krentel [Kre87], Wagner [Wag86], Leggett and Moore [LM81], Ausiello, and D'Atri and Protasi [ADP80]. (cf. <ref> [BJY89] </ref> for a comprehensive survey of the results in the area). We are interested in a structural theory of NP optimization problems that isolates interesting and natural classes of optimization problems with good approximation algorithms.
Reference: [CH86] <author> J. Cai and L. Hemachandra. </author> <title> The boolean hierarchy over NP. </title> <booktitle> In Proc. Structure in Complexity Theory, First Annual Conference, Lecture Notes 223, </booktitle> <pages> pages 104 - 124. </pages> <publisher> Springer Verlag, </publisher> <year> 1986. </year>
Reference-contexts: Prominent in this area is the work of Wagner [Wag86] who studied the related language problems and placed them in the Boolean Hierarchy. The Boolean Hierarchy was introduced and investigated independently in <ref> [CH86, WW86] </ref>.
Reference: [CH89] <author> J.Y. Cai and L. Hemachandra. </author> <title> Enumerative counting is hard. </title> <journal> Information and Control, </journal> <volume> 82(1) </volume> <pages> 34-44, </pages> <year> 1989. </year>
Reference-contexts: There have been other approaches too for approximating counting problems in #P , which are of theoretical interest, e.g., enumerative counting <ref> [CH89] </ref>, randomized approximation using NP oracles [VV86], deterministic polynomial time approximation using oracles in Polynomial Hierarchy [Sto83].
Reference: [CP88] <author> P. Crescenzi and A. Panconesi. </author> <title> Completeness in approximation classes. </title> <booktitle> In FCT Proceedings, </booktitle> <year> 1988. </year>
Reference-contexts: Even though the tools of complexity theory seem inappropriate to deal with classification of optimization problems, researchers have made some progress in classifying optimization problems so as to obtain classes of problems approximable by polynomial time algorithms. Notable is the work of Orponen and Manila [OM90], Crescenzi and Panconesi <ref> [CP88] </ref>, and Paz and Moran [PM81]. The work in classifying optimization problems are attempts to answer some questions put forth by Johnson in 1974.
Reference: [CP89] <author> P. Crescenzi and A. Panconesi. </author> <title> Completeness in approximation classes. </title> <booktitle> In Proceedings of FCT'89, Lecture Notes 380, </booktitle> <pages> pages 116-126. </pages> <publisher> Springer Verlag, </publisher> <year> 1989. </year>
Reference-contexts: Orponen and Mannila [OM90] studied minimization problems and reductions between such problems. These reductions have the property that they preserve approximability within a constant factor between optimization problems We use here a variant of these reductions introduced by Crescenzi and Panconesi <ref> [CP89] </ref>. Definition 4.10: [CP89] Let Q and R be two NP optimization problems. <p> Orponen and Mannila [OM90] studied minimization problems and reductions between such problems. These reductions have the property that they preserve approximability within a constant factor between optimization problems We use here a variant of these reductions introduced by Crescenzi and Panconesi <ref> [CP89] </ref>. Definition 4.10: [CP89] Let Q and R be two NP optimization problems. <p> Using the notion of approximability preserving reduction used by Orponen and Mannila, Crescenzi and Panconesi <ref> [CP89] </ref> studied the structural properties of NP optimization problems and identified classes of approximable problems and classes of problems that have a PTAS and those that have a FPTAS. They introduce and study the classes Apx, Ptas, Fptas.
Reference: [Dah87] <author> E. Dahlhaus. </author> <title> Skolem normal forms concerning the least fixpoint. </title> <editor> In E. Borger, editor, </editor> <booktitle> Computation Theory and Logic, Lecture Notes in Computer Science 270, </booktitle> <pages> pages 101 - 107. </pages> <publisher> Springer Verlag, </publisher> <year> 1987. </year>
Reference-contexts: The appropriate notion of reduction between optimization problems in the setting of descriptive complexity is a syntactic or logical reduction that preserves approximability. Dahlhaus <ref> [Dah87, Dah88] </ref> studied quantifier-free reductions and established the existence 80 of complete problems for NP and fixpoint logic via such reductions. Immerman [Imm87b] studied first order reductions, a more general form of syntactic reductions, and proved completeness results for P and NLOGSPACE.
Reference: [Dah88] <author> E. Dahlhaus. </author> <title> Completeness with respect to interpretations in deterministic and nondeterministic polynomial time. </title> <booktitle> In Proc. of the 2nd Workshop on Computer Science Logic, Lecture Notes in Computer Science 385, </booktitle> <pages> pages 52 - 62. </pages> <publisher> Springer Verlag, </publisher> <year> 1988. </year>
Reference-contexts: The appropriate notion of reduction between optimization problems in the setting of descriptive complexity is a syntactic or logical reduction that preserves approximability. Dahlhaus <ref> [Dah87, Dah88] </ref> studied quantifier-free reductions and established the existence 80 of complete problems for NP and fixpoint logic via such reductions. Immerman [Imm87b] studied first order reductions, a more general form of syntactic reductions, and proved completeness results for P and NLOGSPACE.
Reference: [DFK91] <author> M. Dyer, A. Frieze, and R. Kannan. </author> <title> A random polynomial time algorithm for approximating the volume of a convex body. </title> <journal> Journal of the ACM, </journal> <volume> 38(1) </volume> <pages> 1-17, </pages> <year> 1991. </year>
Reference-contexts: It will be interesting to see if in these cases too, logical definability of the problems has a role to play. Finally, we would like a syntactic characterization of problems like #EXT which are not in # 1 but which have polynomial time randomized approximation algorithms <ref> [DFK91] </ref>. 107
Reference: [DLMV88] <author> P. Dagum, M. Luby, M. Mihail, and U. Vazirani. </author> <title> Polytopes, permanents and graphs with large factors. </title> <booktitle> In Proc. 29th IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 412 - 421, </pages> <year> 1988. </year> <month> 108 </month>
Reference-contexts: There are some counting problems in #P for which there are efficient superpolynomial time approximation algorithms or for which there are polynomial time randomized approximation algorithms for special cases of inputs (see, for example, <ref> [DLMV88] </ref>). It will be interesting to see if in these cases too, logical definability of the problems has a role to play. Finally, we would like a syntactic characterization of problems like #EXT which are not in # 1 but which have polynomial time randomized approximation algorithms [DFK91]. 107
Reference: [End72] <author> H. Enderton. </author> <title> A mathematical introduction to logic. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1972. </year>
Reference-contexts: V. Subrahmanyam and are published in [SST92]. 4 2. Logic Preliminaries This chapter contains some basic definitions from mathematical logic and a minimum amount of necessary background material from logical definability theory. We give below brief definitions of these terms and refer the reader to <ref> [End72] </ref> for a more rigorous treatment. Definition 2.1: [End72] A vocabulary (also known as a similarity type) = f ~ R 1 ; ; ~ R k g is a finite set of predicate symbols. <p> Logic Preliminaries This chapter contains some basic definitions from mathematical logic and a minimum amount of necessary background material from logical definability theory. We give below brief definitions of these terms and refer the reader to <ref> [End72] </ref> for a more rigorous treatment. Definition 2.1: [End72] A vocabulary (also known as a similarity type) = f ~ R 1 ; ; ~ R k g is a finite set of predicate symbols. Each predicate symbol ~ R i has a positive integer r i as its designated arity. <p> The reader is referred to <ref> [End72] </ref> for a thorough introduction on first-order logic. 5 Notation: We shall use A; B; ::: to refer to finite structures and A; B; ::: to refer to the universe of these structures. <p> of elements from the universe of the structure is assigned as interpretation to the sequence of the free variables of the formula, i.e., to those variables v i that do not always occur within the scope of a quantifier (9v i ) or (8v i ) in the formula (cf. <ref> [End72] </ref> for the precise definitions). Let w be a finite sequences of variables. We shall write (w) to indicate that w is the sequence of the free variables of the formula . <p> Fagin's theorem [Fag74] asserts that a class C of finite structures, closed under isomorphism, is NP-computable if and only if it is definable by an existential second-order formula. Moreover, it is well known that by the process of Skolemization (cf. <ref> [End72] </ref>), we can show that every such formula is equivalent to one of the form (9S)(8x)(9y) (x; y; S), where is a quantifier-free formula and x; y are finite sequences of variables.
Reference: [Fag74] <author> R. Fagin. </author> <title> Generalized first-order spectra and polynomial time recognizable sets. </title> <editor> In R. Karp, editor, </editor> <booktitle> Complexity of Computations, </booktitle> <pages> pages 43-73. </pages> <booktitle> SIAM-AMS Proc. </booktitle> <volume> 7, </volume> <year> 1974. </year>
Reference-contexts: This is the direction taken by descriptive complexity theory [Imm89]. These studies began with the work of Fagin who provided a logical characterization of the class NP <ref> [Fag74] </ref>. <p> In particular, this resolves the long standing open 21 problem of the constant-approximability of the MAX CLIQUE problem. 4.2 The Logical Definability Approach Papadimitriou and Yannakakis [PY91] brought a fresh perspective to approximation theory by focusing on the logical definability of optimization problems. Their main motivation came from Fagin's <ref> [Fag74] </ref> characterization of NP in terms of definability in second-order logic on finite structures. An existential second-order formula is an expression of the form (9S)(S), where S is a sequence of predicates and (S) is a first-order formula. Fagin's theorem [Fag74] asserts that a class C of finite structures, closed under <p> Their main motivation came from Fagin's <ref> [Fag74] </ref> characterization of NP in terms of definability in second-order logic on finite structures. An existential second-order formula is an expression of the form (9S)(S), where S is a sequence of predicates and (S) is a first-order formula. Fagin's theorem [Fag74] asserts that a class C of finite structures, closed under isomorphism, is NP-computable if and only if it is definable by an existential second-order formula. <p> Since Q is an NP optimization problem, we have that Q is a problem in NP. Moreover, Q can be viewed as an NP decision problem whose instances are finite structures over the vocabulary [ fW g. By Fagin's <ref> [Fag74] </ref> characterization of NP in terms of definability in second-order logic, there is an existential second-order formula (9S fl ) (S fl ) such that (A; W ) is a YES instance of Q if and only if (A; W ) j= (9S fl ) (S fl ). <p> It follows that opt Q (A) = max jfw : (A; S) j= (w; S)gj: Moreover, (w; S) can be chosen to be a 2 formula, because Fagin's characterization of NP <ref> [Fag74] </ref> holds with a 2 formula (w; S fl ). 5.1.2 Logical Hierarchy in MAXF O Theorem 5.1 shows that MAX F O = MAX 2 is the entire class MAX PB of polynomially bounded NP maximization problems. In particular, it shows that MAX 2 MAX 2 . <p> We chose to use MAX CLIQUE here, because it is in the class MAX 1 and, thus, the result makes the difference between the classes MAX 1 and MIN 1 more striking. Corollary 8.1.1 yields a machine-independent characterization of the NP ? = coNPquestion. Fagin <ref> [Fag74] </ref> characterized NP computability in terms of definability in second-order logic on finite structures. From Fagin's [Fag74] main result, it follows that NP 6= coNP if and only if CLIQUE (or any NP-complete decision problem) can not be defined on finite structures by any universal second-order sentence. <p> Corollary 8.1.1 yields a machine-independent characterization of the NP ? = coNPquestion. Fagin <ref> [Fag74] </ref> characterized NP computability in terms of definability in second-order logic on finite structures. From Fagin's [Fag74] main result, it follows that NP 6= coNP if and only if CLIQUE (or any NP-complete decision problem) can not be defined on finite structures by any universal second-order sentence. <p> There is an NP machine for Q such that the number of accepting paths of the machine on input A is given by f Q (A). Hence, to check if f Q (A) is nonzero is a problem in NP . By Fagin's characterization of NP <ref> [Fag74] </ref> in terms of definability in existential second order logic, there is a first order formula (T), with relation symbols from and the sequence T of predicate symbols, such that A is in the NP language, i.e., f Q (A) 6= 0, if and only if (A; T) j= (9T)(T).
Reference: [GJ79] <author> M. R. Garey and D. Johnson. </author> <title> Computers and Intractability: A Guide to the theory of NP-completeness. </title> <publisher> Freeman, </publisher> <address> San Francisco, </address> <year> 1979. </year>
Reference-contexts: We begin by presenting MIN 3NON-TAUTOLOGY, which is an optimization problem in MIN 0 that arises from the NP-complete problem NON-TAUTOLOGY of 3DNF formulae <ref> [GJ79] </ref>: Given a boolean formula in disjunctive normal form with three literals per disjunct (3DNF), is there a truth assignment that makes this formula false? * MIN 3NON-TAUTOLOGY (3NT): Given a boolean formula in 3DNF, find the minimum number of satisfiable disjuncts. <p> ^ S (w 2 ) ^ S (w 3 )) _ ( D 1 (w 1 ; w 2 ; w 3 ) ^ :S (w 1 ) ^ S (w 2 ) ^ S (w 3 ))_ * MIN CHROMATIC NUMBER is an important polynomially bounded minimization problem (cf. <ref> [GJ79] </ref>). Theorem 3 implies that MIN CHROMATIC NUMBER in the class MIN 2 . We exhibit below a 2 formula that establishes this fact directly. <p> as: opt MIN;kHYPER VC (G) = min S fjSj : (G; S) j= (8y 1 ) (8y k )(E (y 1 ; ; y k ) ! S (y 1 ) _ _ S (y k )): The MIN VERTEX COVER problem has a rather straightforward polynomial time 2-approximation algorithm <ref> [GJ79] </ref> that is based on the idea of maximal matching. By generalizing the notion of maximal matching to hypergraphs, we can obtain a polynomial time k-approximation algorithm for the MIN k-HYPERVERTEX COVER problem. <p> Several well known NP-hard optimization problems, such as MIN VERTEX COVER and MIN FEEDBACK ARC SET <ref> [GJ79] </ref>, can be stated as node or edge deletion problems by specifying the property appropriately. Assume now that is a property of finite graphs that is definable using a universal first-order sentence. <p> There are non-polynomially bounded optimization problems that are of interest, eg., the TRAVELING SALESPERSON problem with inequality which is constant approximable and the KNAPSACK problem which has a fully polynomial time approximation scheme. The non-polynomially bounded problems are also called number problems by Garey and Johnson <ref> [GJ79] </ref>. These are problems which involve integers as a part of their problem instance. They are not polynomially bounded because an instance of length n can encode, in binary, integers as large as 2 n and therefore could have exponentially large optimum values.
Reference: [Gur88] <author> Y. Gurevich. </author> <title> Logic and the challenge of computer science. </title> <editor> In E. Borger, editor, </editor> <booktitle> Trends in Theoretical Computer Science, </booktitle> <pages> pages 1-57. </pages> <publisher> Computer Science Press,, </publisher> <year> 1988. </year>
Reference-contexts: In addition to these results, researchers have provided logical characterization of many complexity classes; among these are the characterizations of uniform versions of the circuit class AC 0 [BIS90], NLOGSPACE [Imm87b], and PSPACE [Imm87b]. The important results in this field are surveyed in <ref> [Gur88, Imm87a, Imm89] </ref>. These are logical characterizations of language classes, or in other words, the above work studies how a decision problem can be defined in a logical framework.
Reference: [IK75] <author> O. H. Ibarra and C. E. Kim. </author> <title> Fast approximation for knapsack and sum of subset problems. </title> <journal> Journal of the ACM, </journal> <volume> 22(4) </volume> <pages> 463-468, </pages> <year> 1975. </year>
Reference-contexts: On a more positive note, the MAX INDEPENDENT SET problem restricted to planar graphs has a PTAS [Bak83] and the KNAPSACK problem has a fully polynomial time approximation scheme <ref> [IK75] </ref>. On the other hand, no PTAS exists for MAX 3SAT, MAX CUT, MIN VERTEX COVER, unless P = NP [ALM + 92].
Reference: [Imm86] <author> N. Immerman. </author> <title> Relational queries computable in polynomial time. </title> <journal> Information and Control, </journal> <volume> 68 </volume> <pages> 86-104, </pages> <year> 1986. </year>
Reference-contexts: Another demonstration of such a close connection between computational and descriptive complexity was demonstrated by Immerman and Vardi <ref> [Imm86, Var82] </ref> who discovered a logical characterization of the complexity class P using fixpoint logic. In addition to these results, researchers have provided logical characterization of many complexity classes; among these are the characterizations of uniform versions of the circuit class AC 0 [BIS90], NLOGSPACE [Imm87b], and PSPACE [Imm87b].
Reference: [Imm87a] <author> N. Immerman. </author> <title> Expressibility as a complexity measure: Results and directions. </title> <booktitle> In Proc. Structure in Complexity Theory, Second Annual Conference, </booktitle> <pages> pages 194-202, </pages> <year> 1987. </year>
Reference-contexts: In addition to these results, researchers have provided logical characterization of many complexity classes; among these are the characterizations of uniform versions of the circuit class AC 0 [BIS90], NLOGSPACE [Imm87b], and PSPACE [Imm87b]. The important results in this field are surveyed in <ref> [Gur88, Imm87a, Imm89] </ref>. These are logical characterizations of language classes, or in other words, the above work studies how a decision problem can be defined in a logical framework.
Reference: [Imm87b] <author> N. Immerman. </author> <title> Languages that capture complexity classes. </title> <journal> SIAM Journal of Computing, </journal> <volume> 16 </volume> <pages> 760-778, </pages> <year> 1987. </year>
Reference-contexts: In addition to these results, researchers have provided logical characterization of many complexity classes; among these are the characterizations of uniform versions of the circuit class AC 0 [BIS90], NLOGSPACE <ref> [Imm87b] </ref>, and PSPACE [Imm87b]. The important results in this field are surveyed in [Gur88, Imm87a, Imm89]. These are logical characterizations of language classes, or in other words, the above work studies how a decision problem can be defined in a logical framework. <p> In addition to these results, researchers have provided logical characterization of many complexity classes; among these are the characterizations of uniform versions of the circuit class AC 0 [BIS90], NLOGSPACE <ref> [Imm87b] </ref>, and PSPACE [Imm87b]. The important results in this field are surveyed in [Gur88, Imm87a, Imm89]. These are logical characterizations of language classes, or in other words, the above work studies how a decision problem can be defined in a logical framework. <p> The appropriate notion of reduction between optimization problems in the setting of descriptive complexity is a syntactic or logical reduction that preserves approximability. Dahlhaus [Dah87, Dah88] studied quantifier-free reductions and established the existence 80 of complete problems for NP and fixpoint logic via such reductions. Immerman <ref> [Imm87b] </ref> studied first order reductions, a more general form of syntactic reductions, and proved completeness results for P and NLOGSPACE. These reductions are purely syntactic in nature and do not involve computation in their definition. Appropriate modifications of these reductions can be used in the context of optimization problems.
Reference: [Imm89] <author> N. Immerman. </author> <title> Descriptive and computational complexity. </title> <editor> In J. Hartmanis, editor, </editor> <booktitle> computational Complexity Theory, </booktitle> <pages> pages 75-91. </pages> <booktitle> Proceedings of the AMS Symposia in Applied Mathematics, </booktitle> <volume> 38, </volume> <year> 1989. </year>
Reference-contexts: These logical characterizations capture computational complexity without involving a model of 2 computation directly and suggest that logical expressibility of problems may determine their computational complexity. This is the direction taken by descriptive complexity theory <ref> [Imm89] </ref>. These studies began with the work of Fagin who provided a logical characterization of the class NP [Fag74]. <p> In addition to these results, researchers have provided logical characterization of many complexity classes; among these are the characterizations of uniform versions of the circuit class AC 0 [BIS90], NLOGSPACE [Imm87b], and PSPACE [Imm87b]. The important results in this field are surveyed in <ref> [Gur88, Imm87a, Imm89] </ref>. These are logical characterizations of language classes, or in other words, the above work studies how a decision problem can be defined in a logical framework.
Reference: [Irv91] <author> R. W. Irving. </author> <title> On the approximation of the minimum independent set. </title> <journal> Information Processing Letters, </journal> <volume> 37 </volume> <pages> 197-200, </pages> <year> 1991. </year>
Reference-contexts: This problem asks for the cardinality of the smallest set of vertices S of a graph, such 66 that S is both an independent set and a dominating set. Irving <ref> [Irv91] </ref> proved that this problem is not constant-approximable, unless P = NP.
Reference: [Joh74] <author> D. Johnson. </author> <title> Approximation algorithms for combinatorial problems. </title> <journal> J. Computer and System Sciences, </journal> <volume> 9 </volume> <pages> 256-278, </pages> <year> 1974. </year>
Reference-contexts: Notable is the work of Orponen and Manila [OM90], Crescenzi and Panconesi [CP88], and Paz and Moran [PM81]. The work in classifying optimization problems are attempts to answer some questions put forth by Johnson in 1974. In Johnson's words: <ref> [Joh74] </ref> "What is it that makes algorithms for different problems behave the same way? Is there some stronger kind of reducibility than the simple polynomial reducibility that will explain these results, or are they due to some structural similarity between the problems as we define them? And what other types of <p> The MIN SET COVER problem is approximable within a log factor of the optimum <ref> [Joh74] </ref> and no better approximation properties for it are known. 6.4.2 The class MIN F + 2 Definition 6.7: MIN F + 2 is the subclass of MIN F 2 consisting of all minimization problems that are definable using 2 (universal-existential) formulae (S) that are positive in S. <p> Also, if T is any feasible solution for I A , then the set, S T = s ~ 2T ~ is a feasible solution for the instance A of size at most kjT j. We can now use Johnson's approximation algorithm for the set cover problem <ref> [Joh74] </ref> to obtain an approximate solution T for I A such that jT j c 0 opt MIN SET COVER (I A ) log (jI A j); where c 0 is a constant. Then we obtain the set S T as a feasible solution for A.
Reference: [Kan91] <author> V. Kann. </author> <title> Maximum bounded 3-dimensional matching is MAX SNP-complete. </title> <journal> Information Processing Letters, </journal> <volume> 37 </volume> <pages> 27-35, </pages> <year> 1991. </year>
Reference-contexts: MAX 3SAT is a typical MAX 0 - complete problem. Some of the other MAX 0 complete problems are MAX CUT, MAX INDEPENDENT SET-B [PY91], MAX 3-DIMENSIONAL MATCHING-B <ref> [Kan91] </ref>, and MAX BOUNDED H-MATCHING [Kan92]. Later, Panconesi and Ranjan [PR90] investigated the expressive power of MAX 1 and towards this end, they used Kozen's proof that MAX CLIQUE does not belong to this class. They also proved that certain polynomial-time optimization problems are not in MAX 1 .
Reference: [Kan92] <author> V. Kann. </author> <title> On the Approximability of NP-complete Optimization Problems. </title> <type> PhD thesis, </type> <institution> Royal Institure of Technology, Skockholm, </institution> <year> 1992. </year>
Reference-contexts: MAX 3SAT is a typical MAX 0 - complete problem. Some of the other MAX 0 complete problems are MAX CUT, MAX INDEPENDENT SET-B [PY91], MAX 3-DIMENSIONAL MATCHING-B [Kan91], and MAX BOUNDED H-MATCHING <ref> [Kan92] </ref>. Later, Panconesi and Ranjan [PR90] investigated the expressive power of MAX 1 and towards this end, they used Kozen's proof that MAX CLIQUE does not belong to this class. They also proved that certain polynomial-time optimization problems are not in MAX 1 . <p> Also, as explained above, in the study of descriptive complexity of classes, reductions between problems defined using Turing machines are very strong tools to be used in defining classes. Another criticism of the descriptive complexity approach was made by Kann in his Ph.D. dissertation <ref> [Kan92] </ref>.
Reference: [KK82] <author> K. Karmarkar and R. Karp. </author> <title> An efficient approximation scheme for the one-dimensional bin packing problem. </title> <booktitle> In Proc. 23rd IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 312 - 320, </pages> <year> 1982. </year>
Reference-contexts: This separates the complexity of problems like BIN PACKING and MAX CLIQUE. This is because, MAX CLIQUE is complete for FP SAT [O (log n)], but BIN PACKING can be solved in polynomial time with 2 log log n + O (1) queries to SAT <ref> [KK82] </ref>. The work described above studies the difficulty of solving various optimization problems and related language problems exactly. It was aimed at providing structural properties of language classes related to the maximum/minimum solutions of optimization problems and of the function classes directly.
Reference: [KL83] <author> R. M. Karp and M. Luby. </author> <title> Monte carlo algorithms for enumeration and reliability problems. </title> <booktitle> In Proc. 24th IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 56-64, </pages> <year> 1983. </year>
Reference-contexts: Seeing the apparent difficulty of computing #P functions, as well as their significance, researchers have used randomization to approximate some of these problems in polynomial time. In this direction, Karp and Luby <ref> [KL83] </ref> studied the notion of randomized approximability in polynomial time and showed that the #DNF problem has a fully polynomial time randomized approximation scheme (FPTRAS). <p> For example, both #DNF and #CNF are complete for #P under polynomial time Turing reductions; the former has a polynomial time randomized approximation algorithm <ref> [KL83] </ref>, whereas the latter is not known to have such an algorithm. <p> As a corollary, we show that every problem in # 1 has a fully polynomial time randomized approximation scheme (FPTRAS). In fact, the FPTRAS for a # 1 problem is very simple and does not require the full power of the method of Karp and Luby <ref> [KL83] </ref>. Once again, this result is not likely to hold upwards in the hierarchy because the next level # 1 contains the #3CNF problem which cannot have a polynomial time randomized approximation algorithm unless NP = RP. <p> Hence it follows that the decision version of every # 1 problem is polynomial time computable. Lemma 12.2: For every k, there is a fully polynomial time randomized approximation scheme for the #klogDNF problem. The above lemma is a special case of the result of Karp and Luby <ref> [KL83] </ref>, who give a FPTRAS for the general #DNF problem. However, as our proof below shows, there is a simple FPTRAS which works for the #klogDNF problem (for every k) and does not need the full power of the method of Karp and Luby. <p> Then for every * &gt; 0; P r [j (x 1 +x 2 +:::+x t ) 9 (1p) ). The proof of this lemma follows from Theorem 2, pp. 41, of Renyi [R 70] and was used by Karp and Luby <ref> [KL83] </ref> in their analysis on a FPTRAS for the #DNF problem. 100 Proof: [of Lemma 12.2] Let d be a DNF formula so that there are at most k log (n) literals per disjunct where n is the number of propositional variables occurring in the formula. <p> Theorem 12.3: (a) Every counting problem in #R 2 has an FPTRAS. (b) The decision version of every counting problem in #R 2 is in P . Proof: (a) Using Proposition 12.2 and Lemma 12.4, the theorem follows from the result of Karp and Luby <ref> [KL83] </ref> which says that #DNF has a FPTRAS. (b) The proof of this part follows from Proposition 12.1 and Lemma 12.4. These results are similar in flavor to that obtained in Part I in the context of minimization problems problems.
Reference: [Kre87] <author> M. Krentel. </author> <title> The Complexity of Optimization Problems. </title> <type> PhD thesis, </type> <institution> Cornell University, </institution> <year> 1987. </year>
Reference-contexts: For an optimization problem to be considered in this context, we must first derive a language problem from it. There have been several attempts to classify optimization problems by classifying related language problems. Notable among these is the work of Krentel <ref> [Kre87] </ref>, Wagner [Wag86], Leggett and Moore [LM81], Ausiello, and D'Atri and Protasi [ADP80]. (cf. [BJY89] for a comprehensive survey of the results in the area). We are interested in a structural theory of NP optimization problems that isolates interesting and natural classes of optimization problems with good approximation algorithms.
Reference: [KT90] <author> Ph. G. Kolaitis and M. N. Thakur. </author> <title> Logical definability of NP optimization problems. </title> <type> Technical Report UCSC-CRL-90-48, </type> <institution> Computer and Information Sciences, University of California, Santa Cruz, </institution> <year> 1990. </year> <note> To appear in Information and Computation. 109 </note>
Reference-contexts: The results presented in Part I of this thesis have been arrived jointly with Phokion Kolaitis and are published in <ref> [KT90, KT91] </ref>. The results presented in Part II of the thesis dealing with counting problems have been arrived jointly with Sanjeev Saluja and K. V. Subrahmanyam and are published in [SST92]. 4 2.
Reference: [KT91] <author> Ph. G. Kolaitis and M. N. Thakur. </author> <title> Approximation properties of NP minimization classes. </title> <booktitle> In Proc. Structure in Complexity Theory, Sixth Annual Conference, </booktitle> <pages> pages 353-366, </pages> <year> 1991. </year> <note> Full paper to appear in Journal of Computer and System Scienecs. </note>
Reference-contexts: The results presented in Part I of this thesis have been arrived jointly with Phokion Kolaitis and are published in <ref> [KT90, KT91] </ref>. The results presented in Part II of the thesis dealing with counting problems have been arrived jointly with Sanjeev Saluja and K. V. Subrahmanyam and are published in [SST92]. 4 2.
Reference: [KT92] <author> Ph. G. Kolaitis and M. N. Thakur. </author> <title> Polynomial time optimization, parallel approximation and fixpoint logic. </title> <type> Unpublished manuscript, </type> <year> 1992. </year>
Reference-contexts: These reductions are purely syntactic in nature and do not involve computation in their definition. Appropriate modifications of these reductions can be used in the context of optimization problems. Recently, Kolaitis and Thakur <ref> [KT92] </ref> have used a restricted form of quantifier-free reductions to show completeness results for classes of polynomial time functions. 9.2 Non-polynomially bounded Optimization Problems In this thesis, we have studied the descriptive complexity of polynomially bounded NP optimization problems.
Reference: [KV87] <author> Ph. G. Kolaitis and M. Y. Vardi. </author> <title> The decision problem for the probabilities of higher-order properties. </title> <booktitle> In Proc. 19th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 425-435, </pages> <year> 1987. </year>
Reference: [LM81] <author> E. Leggett and J. Moore. </author> <title> Optimization problems and the polynomial time hierarchy. </title> <journal> Theoretical Computer Science, </journal> <volume> 15:279 - 289, </volume> <year> 1981. </year>
Reference-contexts: For an optimization problem to be considered in this context, we must first derive a language problem from it. There have been several attempts to classify optimization problems by classifying related language problems. Notable among these is the work of Krentel [Kre87], Wagner [Wag86], Leggett and Moore <ref> [LM81] </ref>, Ausiello, and D'Atri and Protasi [ADP80]. (cf. [BJY89] for a comprehensive survey of the results in the area). We are interested in a structural theory of NP optimization problems that isolates interesting and natural classes of optimization problems with good approximation algorithms. <p> MAX CLIQUE, MAX SAT, MIN VERTEX COVER, and MIN DOMINATING SET are examples of polynomially bounded NP optimization problems. On the other hand, MIN TSP, KNAPSACK are not polynomially bounded optimization problems. 4.1 Computational Approaches Leggett and Moore <ref> [LM81] </ref> were amongst the first to study optimization problems by studying the complexity of determining membership in a related set.
Reference: [OM90] <author> P. Orponen and H. Manila. </author> <title> On approximation preserving reductions: Complete problems and robust measures. </title> <note> To be published; earlier version: TR, </note> <institution> University of Helsiki, </institution> <year> 1990. </year>
Reference-contexts: Even though the tools of complexity theory seem inappropriate to deal with classification of optimization problems, researchers have made some progress in classifying optimization problems so as to obtain classes of problems approximable by polynomial time algorithms. Notable is the work of Orponen and Manila <ref> [OM90] </ref>, Crescenzi and Panconesi [CP88], and Paz and Moran [PM81]. The work in classifying optimization problems are attempts to answer some questions put forth by Johnson in 1974. <p> An analogous result holds for minimization problems too. Such necessary and sufficient conditions are not very interesting as they are themselves stated, implicitly, in terms of approximate solutions. Orponen and Mannila <ref> [OM90] </ref> studied minimization problems and reductions between such problems. These reductions have the property that they preserve approximability within a constant factor between optimization problems We use here a variant of these reductions introduced by Crescenzi and Panconesi [CP89].
Reference: [PM81] <author> A. Paz and S. Moran. </author> <title> Non-deterministic polynomial optimization problems and their approximation. </title> <journal> Theoretical Computer Science, </journal> <volume> 15 </volume> <pages> 251-257, </pages> <year> 1981. </year>
Reference-contexts: Notable is the work of Orponen and Manila [OM90], Crescenzi and Panconesi [CP88], and Paz and Moran <ref> [PM81] </ref>. The work in classifying optimization problems are attempts to answer some questions put forth by Johnson in 1974. <p> One of the first attempts made to study optimization problems with an aim of deriving necessary and sufficient conditions for their approximability, was made by Paz 19 and Moran <ref> [PM81] </ref>. They observed that for many NP optimization problems Q, for every constant k, there is a polynomial time algorithm to decide if opt Q (I) k. They called such problems simple.
Reference: [PR90] <author> A. Panconesi and D. Ranjan. </author> <title> Quantifiers and approximation. </title> <booktitle> In Proceedings 22nd Annual ACM Symp. on Theory of Computing. ACM, </booktitle> <editor> N. Y., </editor> <year> 1990. </year>
Reference-contexts: They brought a fresh perspective to this area by focusing on the logical definability of optimization problems. This approach makes no explicit reference to Turing machines and provides a machine independent classification of optimization 11 problems. Later, Panconesi and Ranjan <ref> [PR90] </ref> showed the limited expressive nature of some of the classes of optimization problems defined by Papadimitriou and Yannakakis. In Part I of this thesis, motivated by [PY91, PR90], we study optimization problems using logic. We study the logical definability of NP maximization and minimization problems differently. <p> Later, Panconesi and Ranjan [PR90] showed the limited expressive nature of some of the classes of optimization problems defined by Papadimitriou and Yannakakis. In Part I of this thesis, motivated by <ref> [PY91, PR90] </ref>, we study optimization problems using logic. We study the logical definability of NP maximization and minimization problems differently. For minimization problems, we reveal a picture drastically different than the one for maximization problems. <p> For minimization problems, we reveal a picture drastically different than the one for maximization problems. We show that logical definability has different implications on maximization and minimization problems both in terms of expressive power and approximation properties. The logical framework used in <ref> [PY91, PR90] </ref> does not help us isolate classes of approximable minimization problems. Therefore, we modify the logical framework used in these papers and introduce a second framework and show the applicability of both these frameworks in defining classes of approximable problems. <p> Let NPOpt denote the class of all NP optimization problems. An optimization problem Q is said to be NP-hard if the standard decision problem associated with Q is NP-complete. The above definition is a variation of the definition given by <ref> [PR90] </ref> and is broad enough to encompass every known optimization problem arising in NP-completeness. <p> MAX 3SAT is a typical MAX 0 - complete problem. Some of the other MAX 0 complete problems are MAX CUT, MAX INDEPENDENT SET-B [PY91], MAX 3-DIMENSIONAL MATCHING-B [Kan91], and MAX BOUNDED H-MATCHING [Kan92]. Later, Panconesi and Ranjan <ref> [PR90] </ref> investigated the expressive power of MAX 1 and towards this end, they used Kozen's proof that MAX CLIQUE does not belong to this class. They also proved that certain polynomial-time optimization problems are not in MAX 1 . <p> It turns out that MAX 1 also contains maximization problems that are not constant-approximable, unless P=NP. In view of this, Panconesi and Ranjan <ref> [PR90] </ref> studied the class RMAX, which is a syntactic subclass of MAX 1 containing MAX CLIQUE. Every approximation-complete problem in it has the following property. If the problem is constant-approximable, then it has a polynomial time approximation scheme. <p> Every approximation-complete problem in it has the following property. If the problem is constant-approximable, then it has a polynomial time approximation scheme. Motivated by the work of Papadimitriou and Yannakakis [PY91] and Panconesi and Ranjan <ref> [PR90] </ref> we undertake a systematic study of NP optimization problems from a logical definability perspective. Our work is motivated by the following natural questions that arise 23 from their work. <p> In Section 5.1.1 we provide a purely descriptive characterization of this class. Then we define subclasses of MAX PB, that occur naturally in this setting, and show that they form a hierarchy with exactly four levels. Finally, we mention results from <ref> [PY91, PR90] </ref> on the approxability of some of these subclasses. 5.1.1 A characterization of MAX PB Definition 5.1: Let be a vocabulary and let Q be a maximization problem with finite structures A over as instances. <p> Moreover, the notation n and n is consistent with the notation p n used for the polynomial hierarchy [Sto76]. The class MAX 1 was introduced by Panconesi and Ranjan <ref> [PR90] </ref>. MAX 3SAT and MAX SAT are examples of problems in the classes MAX 0 and MAX 1 respectively and MAX CLIQUE is a prototypical problem in the class MAX 1 . <p> In particular, it shows that MAX 2 MAX 2 . By restricting the quantifier prefix 8 fl 9 fl of 2 formulae, we obtain the class MAX 1 of <ref> [PR90] </ref>, and the classes MAX 1 = MAX NP and MAX 0 = MAX SNP of [PY91]. <p> encoding of SATISFIABILITY given in Chapter 2, if A (I) is the finite structure associated with an instance I of MAX SAT, then we have opt MAX SAT (A (I)) = max jfw : (A (I); S) j= (9y)[C (w)^ * MAX CLIQUE is in the class MAX 1 (cf. <ref> [PR90] </ref>). <p> Thus, we have arrived at a contradiction. Part C: Kozen showed that that MAX CLIQUE is in the class MAX 1 but not in the 31 class MAX 1 <ref> [PR90] </ref>. Part D: We have seen before that MAX SAT is in the class MAX 1 . In this part of the proof we show that MAX SAT is not in the class MAX 0 . <p> It follows that opt MAX SAT (A) n 2 , which is a contradiction. The proof that MAX SAT is not in the class MAX 0 is now complete. 5.1.3 Approximation Properties of Subclasses of MAX F O In this section, we mention the results from [PY91] and <ref> [PR90] </ref> concerning the approximation properties of the maximization classes MAX 1 and MAX 1 . Theorem 5.3: [PY91] Every problem in the class MAX 1 , and consequently, MAX 0 , is constant-approximable. This result for the first time gave a syntactic condition on approximability of optimization problems. <p> In the process, they studied the class MAX 1 and showed a negative approximability result for this class. They observed that a simple generalization of the MAX SAT problem, MAX NSF, is non approximable, unless P 6=NP <ref> [PR90] </ref>. The MAX NUMBER OF SATISFIABLE FORMULAE (NSF) takes as input a set of 3CNF formulae and asks for the maximum number of satisfiable formulae. It is also easy to see that this problem is in the class MAX 1 . <p> It follows that Q is A-reducible to MIN k-HYPERVERTEX COVER and so MIN k-HYPERVERTEX COVER is complete for MIN F 1 (k). The approximation properties of the class MIN F + 1 should be contrasted with those of the class RMAX introduced in <ref> [PR90] </ref>. This is a syntactic subclass of MAX 1 that is in some sense the "dual" of MIN F + 1 . <p> MAX CLIQUE is the canonical example of a problem in RMAX. Moreover, every approximation complete problem Q in this class is self-improvable, i.e., if Q is *- approximable for some constant * 1, then it has it has a PTAS (cf. <ref> [PR90] </ref>). Remark 6.3: From Figure 6.1, observe that MIN F 2 is a new class that is sandwiched between the classes MIN F 1 = MIN 1 and MIN F 2 = MIN 2 . <p> Indeed, it can be shown that MAX 1 contains problems that are complete for the class MAX 2 via A-reductions. Such an example is provided by the MAX Number of Satisfiable Formulae (MAX NSF) problem of <ref> [PR90] </ref>. It should be pointed out that a similar situation holds with NP decision problems. For example, 3-COLORABILITY is expressible using a strict 1 1 formula, i.e., an existential second-order formula whose first-order part has universal quantifiers only. <p> Kann makes the observation MAX 3DIMENSIONAL MATCHING-B, the problem of finding the size of the largest 3 dimensional matching when the number of occurrences of any element in input triplets is bounded by a constant B is not in the class MAX 1 <ref> [PR90] </ref> under one particular vocabulary 1 , when the same problem defined w.r.t another vocabulary 2 is in the class MAX 0 : Kann then argues that it is improper to have a reencoding of a problem change its class membership.
Reference: [PS82] <author> C. Papadimitriou and K. Steiglitz. </author> <title> Combinatorial Optimization Algorithms and Complexity. </title> <publisher> Prentice Hall, </publisher> <address> New Jersey, </address> <year> 1982. </year>
Reference-contexts: For example, MAX CLIQUE is not constant approximable [AS92, ALM + 92] unless P = NP. On the other hand a large number of optimization problems like MAX SAT, MAX CUT, MIN VERTEX COVER, and MIN TSP with weights f1, 2g are constant-approximable <ref> [PS82] </ref>. On a more positive note, the MAX INDEPENDENT SET problem restricted to planar graphs has a PTAS [Bak83] and the KNAPSACK problem has a fully polynomial time approximation scheme [IK75]. <p> LINEAR PROGRAMMING provides the canonical manifestation of this phenomenon. Indeed, duality theory makes it possible to rewrite a given maximization linear programming problem as a minimization linear programming problem, and vice versa (cf. <ref> [PS82] </ref>). When it comes to NP optimization problems, a folklore result in complexity theory asserts that, unless P = NP , it is not possible to rewrite every NP maximization problem as an NP minimization problem.
Reference: [PW88] <author> C. Papadimitriou and D. Wolfe. </author> <title> The complexity of facets resolved. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 37:2 - 13, </volume> <booktitle> 1988. (First appeared in Proceedings IEEE 26th Symposium on Foundations of Computer Science (1985), </booktitle> <pages> 74-78). </pages>
Reference-contexts: The essence of their results is that, to solve an NP-hard optimization problem exactly, we have to solve two problems, an NP-complete problem and a coNP-complete problem. Papadimitriou and Yannakakis [PY84] (cf. also <ref> [PW88] </ref>) studied the class of such problems and called it the class D P .
Reference: [PY84] <author> C. Papadimitriou and M. Yannakakis. </author> <title> The complexity of facets (and some facets of compelxity). </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 28:244 - 259, </volume> <booktitle> 1984. (First appeared in Proceedings 20th Annual ACM Symp. on Theory of Computing, </booktitle> <year> 1982, </year> <pages> pp 255-260). </pages>
Reference-contexts: The essence of their results is that, to solve an NP-hard optimization problem exactly, we have to solve two problems, an NP-complete problem and a coNP-complete problem. Papadimitriou and Yannakakis <ref> [PY84] </ref> (cf. also [PW88]) studied the class of such problems and called it the class D P . Definition 4.3: The class D P is defined as fL 1 " L 2 : L 1 2 NP ; L 2 2 coNPg: Papadimitriou and Yannakakis [PY84] show that if Q is <p> Papadimitriou and Yannakakis <ref> [PY84] </ref> (cf. also [PW88]) studied the class of such problems and called it the class D P . Definition 4.3: The class D P is defined as fL 1 " L 2 : L 1 2 NP ; L 2 2 coNPg: Papadimitriou and Yannakakis [PY84] show that if Q is an NP-hard optimization problem, then EXACT (Q) is a language complete for D P . This result subsumes some of the results of Leggett and Moore. <p> Note that the class C NP 2 has been called D P in <ref> [PY84] </ref>. * If Q is a polynomially invertible optimization problem, then Q k is complete for the class coNPand Q odd is complete for the class P NP . * Finally, if Q is neither polynomially bounded nor polynomially invertible, then Q k is complete for the class C NP 2k
Reference: [PY91] <author> C. Papadimitriou and M. Yannakakis. </author> <title> Optimization, approximation and complexity classes. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 43(3):425 - 440, </volume> <booktitle> 1991. First appeared in the Proceedings 20th Annual ACM Symp. on Theory of Computing, </booktitle> <year> 1988. </year>
Reference-contexts: With appropriate modifications, the logical definability framework can also be used to define classes of functions which map finite structures to natural numbers. Papadimitriou and Yannakakis <ref> [PY91] </ref> were the first to use logic to study NP optimization problems. They showed that descriptive complexity of NP maximization problems has some bearing on the approximability of such problems in polynomial time. <p> In 1988, Papadimitriou and Yannakakis <ref> [PY91] </ref> made the first major, and quite successful, attempt to answer Johnson's questions about the structural similarity of some optimization problems based on their definition. They brought a fresh perspective to this area by focusing on the logical definability of optimization problems. <p> Later, Panconesi and Ranjan [PR90] showed the limited expressive nature of some of the classes of optimization problems defined by Papadimitriou and Yannakakis. In Part I of this thesis, motivated by <ref> [PY91, PR90] </ref>, we study optimization problems using logic. We study the logical definability of NP maximization and minimization problems differently. For minimization problems, we reveal a picture drastically different than the one for maximization problems. <p> For minimization problems, we reveal a picture drastically different than the one for maximization problems. We show that logical definability has different implications on maximization and minimization problems both in terms of expressive power and approximation properties. The logical framework used in <ref> [PY91, PR90] </ref> does not help us isolate classes of approximable minimization problems. Therefore, we modify the logical framework used in these papers and introduce a second framework and show the applicability of both these frameworks in defining classes of approximable problems. <p> In particular, this resolves the long standing open 21 problem of the constant-approximability of the MAX CLIQUE problem. 4.2 The Logical Definability Approach Papadimitriou and Yannakakis <ref> [PY91] </ref> brought a fresh perspective to approximation theory by focusing on the logical definability of optimization problems. Their main motivation came from Fagin's [Fag74] characterization of NP in terms of definability in second-order logic on finite structures. <p> Thus, a class C of finite structures is NP-computable if and only if there is a formula (9S)(8x)(9y) (x; y; S), with quantifier-free, such that for every finite structure A we have that A 2 C () (A; S) j= (9S)(8x)(9y) (x; y; S): Papadimitriou and Yannakakis <ref> [PY91] </ref> introduced the class MAX NP of maximization problems whose optimum can be defined as max jfx : (A; S) j= (9y) (x; y; S)gj; where is quantifier-free. <p> This problem asks for the maximum number of clauses that can be satisfied in a given Boolean formula. In order to obtain a uniform nomenclature for classes of optimization problems defined using logical formulae, we call this class MAX 1 . 22 Papadimitriou and Yannakakis <ref> [PY91] </ref> showed that every optimization problem in MAX 1 is *-approximable for some constant *. <p> They demonstrated that MAX 0 contains several natural maximization problems that are complete for MAX 0 via a certain reduction that preserves approximability. MAX 3SAT is a typical MAX 0 - complete problem. Some of the other MAX 0 complete problems are MAX CUT, MAX INDEPENDENT SET-B <ref> [PY91] </ref>, MAX 3-DIMENSIONAL MATCHING-B [Kan91], and MAX BOUNDED H-MATCHING [Kan92]. Later, Panconesi and Ranjan [PR90] investigated the expressive power of MAX 1 and towards this end, they used Kozen's proof that MAX CLIQUE does not belong to this class. <p> Every approximation-complete problem in it has the following property. If the problem is constant-approximable, then it has a polynomial time approximation scheme. Motivated by the work of Papadimitriou and Yannakakis <ref> [PY91] </ref> and Panconesi and Ranjan [PR90] we undertake a systematic study of NP optimization problems from a logical definability perspective. Our work is motivated by the following natural questions that arise 23 from their work. <p> In Section 5.1.1 we provide a purely descriptive characterization of this class. Then we define subclasses of MAX PB, that occur naturally in this setting, and show that they form a hierarchy with exactly four levels. Finally, we mention results from <ref> [PY91, PR90] </ref> on the approxability of some of these subclasses. 5.1.1 A characterization of MAX PB Definition 5.1: Let be a vocabulary and let Q be a maximization problem with finite structures A over as instances. <p> The classes MAX 0 and MAX 1 were introduced and studied by Papadimitriou and Yannakakis <ref> [PY91] </ref> under the names MAX SNP and MAX NP respectively. We have chosen to use different names for MAX SNP and MAX NP here, because we are interested in having a uniform notation and terminology for all the classes of optimization problems obtained using first-order formulae. <p> In particular, it shows that MAX 2 MAX 2 . By restricting the quantifier prefix 8 fl 9 fl of 2 formulae, we obtain the class MAX 1 of [PR90], and the classes MAX 1 = MAX NP and MAX 0 = MAX SNP of <ref> [PY91] </ref>. It is clear that we have the following containments between these four classes: 27 MAX 0 MAX 2 MAX 2 = MAX PB We now give examples of natural problems in these classes. * MAX 3SAT is a problem in the class MAX 0 (cf. [PY91]). <p> = MAX SNP of <ref> [PY91] </ref>. It is clear that we have the following containments between these four classes: 27 MAX 0 MAX 2 MAX 2 = MAX PB We now give examples of natural problems in these classes. * MAX 3SAT is a problem in the class MAX 0 (cf. [PY91]). This problem asks for the maximum number of clauses that can be satisfied in a given Boolean formula in conjunctive normal form (CNF) with three literals per clause. <p> ) _ S (w 2 ) _ S (w 3 )) _ C 1 (w 1 ; w 2 ; w 3 ) ^ (:S (w 1 ) _ S (w 2 ) _ S (w 3 ))_ * MAX SAT is a problem in the class MAX 1 (cf. <ref> [PY91] </ref>). <p> It follows that opt MAX SAT (A) n 2 , which is a contradiction. The proof that MAX SAT is not in the class MAX 0 is now complete. 5.1.3 Approximation Properties of Subclasses of MAX F O In this section, we mention the results from <ref> [PY91] </ref> and [PR90] concerning the approximation properties of the maximization classes MAX 1 and MAX 1 . Theorem 5.3: [PY91] Every problem in the class MAX 1 , and consequently, MAX 0 , is constant-approximable. This result for the first time gave a syntactic condition on approximability of optimization problems. <p> proof that MAX SAT is not in the class MAX 0 is now complete. 5.1.3 Approximation Properties of Subclasses of MAX F O In this section, we mention the results from <ref> [PY91] </ref> and [PR90] concerning the approximation properties of the maximization classes MAX 1 and MAX 1 . Theorem 5.3: [PY91] Every problem in the class MAX 1 , and consequently, MAX 0 , is constant-approximable. This result for the first time gave a syntactic condition on approximability of optimization problems. <p> In this section, we show the classes of maximization and minimization properties also differ in their approximation properties. Recall that Papadimitriou and Yannakakis <ref> [PY91] </ref> showed that every maximization problem in MAX 0 or in MAX 1 is approximable. In contrast, we now prove here that MIN 0 = MIN 1 contain natural minimization problems, such as MIN 3NON-TAUTOLOGY, that are not approximable, unless P=NP. <p> The above comment was motivated by the fact that there are apparently two different definitions of MAX SNP in the literature. In retrospect, it seems that the original intention of Papadimitriou and Yannakakis <ref> [PY91] </ref> was to define MAX SNP as the A-closure of the class of problems defined purely syntactically, i.e., a problem Q is in the class MAX SNP if there is a problem R, with inputs finite structures A over a vocabulary , whose optimum is definable using a quantifier-free formula (w)
Reference: [R 70] <author> Renyi. </author> <title> Probability Theory. </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1970. </year>
Reference-contexts: Then for every * &gt; 0; P r [j (x 1 +x 2 +:::+x t ) 9 (1p) ). The proof of this lemma follows from Theorem 2, pp. 41, of Renyi <ref> [R 70] </ref> and was used by Karp and Luby [KL83] in their analysis on a FPTRAS for the #DNF problem. 100 Proof: [of Lemma 12.2] Let d be a DNF formula so that there are at most k log (n) literals per disjunct where n is the number of propositional variables
Reference: [SST92] <author> S. Saluja, K. V. Subrahmanyam, and M. N. Thakur. </author> <title> Descriptive complexity of #P functions. </title> <booktitle> In Proc. Structure in Complexity Theory, Seventh Annual Conference, </booktitle> <pages> pages 169 - 184, </pages> <year> 1992. </year>
Reference-contexts: The results presented in Part II of the thesis dealing with counting problems have been arrived jointly with Sanjeev Saluja and K. V. Subrahmanyam and are published in <ref> [SST92] </ref>. 4 2. Logic Preliminaries This chapter contains some basic definitions from mathematical logic and a minimum amount of necessary background material from logical definability theory. We give below brief definitions of these terms and refer the reader to [End72] for a more rigorous treatment.
Reference: [Sto76] <author> L. J. Stockmeyer. </author> <title> The polynomial time hierarchy. </title> <journal> Theoretical Computer Science, </journal> <volume> 3 </volume> <pages> 1-22, </pages> <year> 1976. </year>
Reference-contexts: Moreover, the notation n and n is consistent with the notation p n used for the polynomial hierarchy <ref> [Sto76] </ref>. The class MAX 1 was introduced by Panconesi and Ranjan [PR90]. MAX 3SAT and MAX SAT are examples of problems in the classes MAX 0 and MAX 1 respectively and MAX CLIQUE is a prototypical problem in the class MAX 1 . <p> The hardness of problems in #P is further demonstrated by Toda's result [Tod89], which says that every language in the Polynomial Hierarchy <ref> [Sto76] </ref> can be recognized in deterministic polynomial time using at most one query to an oracle in #P. Seeing the apparent difficulty of computing #P functions, as well as their significance, researchers have used randomization to approximate some of these problems in polynomial time.
Reference: [Sto83] <author> L. Stockmeyer. </author> <title> The complexity of approximate counting. </title> <booktitle> In Proc. 15th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 118-126, </pages> <year> 1983. </year>
Reference-contexts: There have been other approaches too for approximating counting problems in #P , which are of theoretical interest, e.g., enumerative counting [CH89], randomized approximation using NP oracles [VV86], deterministic polynomial time approximation using oracles in Polynomial Hierarchy <ref> [Sto83] </ref>. Though #P problems are well studied using the model of Turing machines and polynomial time reducibilities, there are certain curiosities which cannot be explained well in 1 Appendix B contains precise defintions of this and other counting problems used in the sequel 83 the setting of computational models.
Reference: [Tod89] <author> S. </author> <title> Toda. On the computational power of P P and P. </title> <booktitle> In Proc. 30th IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 514-519, </pages> <year> 1989. </year> <month> 110 </month>
Reference-contexts: The hardness of problems in #P is further demonstrated by Toda's result <ref> [Tod89] </ref>, which says that every language in the Polynomial Hierarchy [Sto76] can be recognized in deterministic polynomial time using at most one query to an oracle in #P.
Reference: [Tra50] <author> B. A. Trakhtenbrot. </author> <title> The impossibility of an algorithm for the decision problem for finite models. </title> <journal> Doklady Akademii Nauk SSR, </journal> <volume> 70:569 - 572, </volume> <year> 1950. </year>
Reference-contexts: Assuming P6=NP, the following is an undecidable problem: 70 Given a first-order sentence (S) over [ S, is the minimization problem Q constant-approximable? Proof: We use Trakhtenbrot's classical theorem <ref> [Tra50] </ref>, which asserts that the set of first-order sentences true on all finite structures over a vocabulary t is not recursive, provided t contains at least one non-unary predicate symbol. We reduce the question of "truth on all finite structures" to that of "constant-approximabilty".
Reference: [Val79] <author> L.G. Valiant. </author> <title> The complexity of computing the permanent. </title> <journal> Theoretical computer Science, </journal> <volume> 8 </volume> <pages> 189-201, </pages> <year> 1979. </year>
Reference-contexts: We begin by presenting, in Chapter 2, some notation and background from logic. Then in 3 part I, we study the descriptive complexity of optimization problems arising from the class NP and in Part II, we study the descriptive complexity of #P, a counting class introduced by Valiant <ref> [Val79] </ref>. The results presented in Part I of this thesis have been arrived jointly with Phokion Kolaitis and are published in [KT90, KT91]. The results presented in Part II of the thesis dealing with counting problems have been arrived jointly with Sanjeev Saluja and K. V. <p> Introduction In Part I of this thesis, we studied the logical characterization of one kind of function classes, the NP optimization problems. In this part we demonstrate the use of similar techniques to study the descriptive characterization of another class of functions, the class #P , introduced by Valiant <ref> [Val79] </ref>. The aim of this part is to propose a logical characterization for the class #P of counting problems and study the expressiveness and feasibility of syntax-restricted subclasses naturally obtained in this setting of logical definability. Valiant [Val79] defined #P to be the class of counting problems with an associated counting <p> characterization of another class of functions, the class #P , introduced by Valiant <ref> [Val79] </ref>. The aim of this part is to propose a logical characterization for the class #P of counting problems and study the expressiveness and feasibility of syntax-restricted subclasses naturally obtained in this setting of logical definability. Valiant [Val79] defined #P to be the class of counting problems with an associated counting function on the input space. The counting function applied to an input is the number of accepting paths of an NP machine on that input.
Reference: [Var82] <author> M. Y. Vardi. </author> <title> The complexity of relational query languages. </title> <booktitle> In Proc. 14th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 137-146, </pages> <year> 1982. </year>
Reference-contexts: Another demonstration of such a close connection between computational and descriptive complexity was demonstrated by Immerman and Vardi <ref> [Imm86, Var82] </ref> who discovered a logical characterization of the complexity class P using fixpoint logic. In addition to these results, researchers have provided logical characterization of many complexity classes; among these are the characterizations of uniform versions of the circuit class AC 0 [BIS90], NLOGSPACE [Imm87b], and PSPACE [Imm87b].
Reference: [VV86] <author> L.G. Valiant and V.V. Vazirani. </author> <title> NP is as easy as detecting unique solutions. </title> <journal> Theoretical Computer Science, </journal> <volume> 47 </volume> <pages> 85-93, </pages> <year> 1986. </year>
Reference-contexts: There have been other approaches too for approximating counting problems in #P , which are of theoretical interest, e.g., enumerative counting [CH89], randomized approximation using NP oracles <ref> [VV86] </ref>, deterministic polynomial time approximation using oracles in Polynomial Hierarchy [Sto83].
Reference: [Wag86] <author> K. Wagner. </author> <title> More complicated questions about maxima and minima, and some closure properties of NP. </title> <journal> Theoretical Computer Science, </journal> <volume> 51 </volume> <pages> 53-80, </pages> <year> 1986. </year>
Reference-contexts: For an optimization problem to be considered in this context, we must first derive a language problem from it. There have been several attempts to classify optimization problems by classifying related language problems. Notable among these is the work of Krentel [Kre87], Wagner <ref> [Wag86] </ref>, Leggett and Moore [LM81], Ausiello, and D'Atri and Protasi [ADP80]. (cf. [BJY89] for a comprehensive survey of the results in the area). We are interested in a structural theory of NP optimization problems that isolates interesting and natural classes of optimization problems with good approximation algorithms. <p> Papadimitriou and Yannakakis' work on the class D P generated interest in the closure of NP under boolean operations and the natural optimization problems that lie in the different classes so obtained. Prominent in this area is the work of Wagner <ref> [Wag86] </ref> who studied the related language problems and placed them in the Boolean Hierarchy. The Boolean Hierarchy was introduced and investigated independently in [CH86, WW86].
Reference: [WW86] <author> K. Wagner and G. Wechsung. </author> <title> Computational Complexity. </title> <publisher> Verlag der Wissenschaften and Reidel, </publisher> <address> Berlin, </address> <year> 1986. </year>
Reference-contexts: Prominent in this area is the work of Wagner [Wag86] who studied the related language problems and placed them in the Boolean Hierarchy. The Boolean Hierarchy was introduced and investigated independently in <ref> [CH86, WW86] </ref>.
Reference: [Yan81a] <author> M. Yannakakis. </author> <title> Edge-deletion problems. </title> <journal> SIAM Journal for Computing, </journal> <volume> 10(2):297 - 309, </volume> <year> 1981. </year>
Reference-contexts: We now discuss the expressive power of MIN F + 1 . On the positive side, in addition to MIN VERTEX COVER, the class MIN F + 1 contains a large number of node-deletion and edge-deletion graph problems (cf. <ref> [Yan81a, Yan81b] </ref>). If is a property of graphs, then the node (edge) deletion problem NODE-DEL (EDGE-DEL ) associated with is defined as follows: Given a graph G, find a set of nodes (edges) of minimum cardinality whose deletion from G results into a graph satisfying [Yan81a, Yan81b]. <p> and edge-deletion graph problems (cf. <ref> [Yan81a, Yan81b] </ref>). If is a property of graphs, then the node (edge) deletion problem NODE-DEL (EDGE-DEL ) associated with is defined as follows: Given a graph G, find a set of nodes (edges) of minimum cardinality whose deletion from G results into a graph satisfying [Yan81a, Yan81b]. Several well known NP-hard optimization problems, such as MIN VERTEX COVER and MIN FEEDBACK ARC SET [GJ79], can be stated as node or edge deletion problems by specifying the property appropriately. Assume now that is a property of finite graphs that is definable using a universal first-order sentence. <p> Yannakakis <ref> [Yan81a, Yan81b] </ref> showed that if is one of the following properties, then the node or edge deletion decision problem associated with is NP-complete: 1. transitive digraph (edge deletion problem). 2. without cycles of specified length l, for any fixed l 3 (edge deletion problem). 3. maximum degree 1 (node deletion problem).
Reference: [Yan81b] <author> M. Yannakakis. </author> <title> Node-deletion problems on bipartite graphs. </title> <journal> SIAM Journal for Computing, </journal> <volume> 10(2):310 - 326, </volume> <year> 1981. </year> <month> 111 </month>
Reference-contexts: We now discuss the expressive power of MIN F + 1 . On the positive side, in addition to MIN VERTEX COVER, the class MIN F + 1 contains a large number of node-deletion and edge-deletion graph problems (cf. <ref> [Yan81a, Yan81b] </ref>). If is a property of graphs, then the node (edge) deletion problem NODE-DEL (EDGE-DEL ) associated with is defined as follows: Given a graph G, find a set of nodes (edges) of minimum cardinality whose deletion from G results into a graph satisfying [Yan81a, Yan81b]. <p> and edge-deletion graph problems (cf. <ref> [Yan81a, Yan81b] </ref>). If is a property of graphs, then the node (edge) deletion problem NODE-DEL (EDGE-DEL ) associated with is defined as follows: Given a graph G, find a set of nodes (edges) of minimum cardinality whose deletion from G results into a graph satisfying [Yan81a, Yan81b]. Several well known NP-hard optimization problems, such as MIN VERTEX COVER and MIN FEEDBACK ARC SET [GJ79], can be stated as node or edge deletion problems by specifying the property appropriately. Assume now that is a property of finite graphs that is definable using a universal first-order sentence. <p> Yannakakis <ref> [Yan81a, Yan81b] </ref> showed that if is one of the following properties, then the node or edge deletion decision problem associated with is NP-complete: 1. transitive digraph (edge deletion problem). 2. without cycles of specified length l, for any fixed l 3 (edge deletion problem). 3. maximum degree 1 (node deletion problem).
References-found: 56

