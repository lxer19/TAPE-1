URL: http://www.csc.ncsu.edu/eos/users/r/rhee/WWW/pub/mtcp.ps.gz
Refering-URL: http://www.csc.ncsu.edu/eos/users/r/rhee/WWW/publication.html
Root-URL: http://www.csc.ncsu.edu
Phone: 7534  
Title: MTCP: Scalable TCP-like Congestion Control for Reliable Multicast  
Author: Injong Rhee Nallathambi Balaguru George N. Rouskas 
Keyword: Reliable multicast, congestion control  
Address: Campus Box  Raleigh, NC 27695-7534 Atlanta, GA 30322  
Affiliation: Department of Computer Science Department of Mathematics North Carolina State University and Computer Science  Emory University  
Abstract: We present MTCP, a congestion control scheme for large-scale reliable multicast. Congestion control for reliable multicast is important, because of its wide applications in multimedia and collaborative computing, yet nontrivial, because of the potentially large number of receivers involved. Many schemes have been proposed to handle the recovery of lost packets in a scalable manner, but there is little work on the design and implementation of congestion control schemes for reliable multicast. We propose new techniques that can effectively handle instances of congestion occurring simultaneously at various parts of a multicast tree. Our protocol incorporates several novel features: (1) hierarchical congestion status reports that distribute the load of processing feedback from all receivers across the multicast group, (2) the relative time delay (RTD) concept which overcomes the difficulty of estimating round-trip times in tree-based multicast environments, (3) window-based control that prevents the sender from transmitting faster than packets leave the bottleneck link on the multicast path through which the sender's traffic flows, (4) a retransmission window that regulates the flow of repair packets to prevent local recovery from causing congestion, and (5) a selective acknowledgment scheme that prevents independent (i.e., non-congestion-related) packet loss from reducing the sender's transmission rate. We have implemented MTCP both on UDP in SunOS 5.6 and on the simulator ns, and we have conducted extensive Internet experiments and simulation to test the scalability and inter-fairness properties of the protocol. The encouraging results we have obtained support our confidence that TCP-like congestion control for large-scale reliable multicast is within our grasp. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> V. Jacobson. </author> <title> Congestion avoidance and control. </title> <booktitle> In Proceedings of SIGCOMM, </booktitle> <pages> pages 314329. </pages> <publisher> ACM, </publisher> <month> August </month> <year> 1988. </year>
Reference-contexts: This paper is concerned with the flow and congestion control of best-effort multicast traffic. Congestion control is an integral part of any best-effort Internet data transport protocol. It is widely accepted that the end-to-end congestion control mechanisms employed in TCP <ref> [1] </ref> have been one of the key contributors to the success of the Internet. A conforming TCP flow is expected to respond to congestion indication (e.g., packet loss) by drastically reducing its transmission rate and by slowly increasing its rate during steady state. <p> As these values can change over time because of routing and network traffic changes, MTCP needs to track these changes and modify its timeout values accordingly. We use the techniques employed by TCP <ref> [1] </ref> to set the RT O RT D and RT O RT T based on the average measured length of RTDs and RTTs, respectively, and their deviations in time. <p> This doubling of the timeout value continues until an ACK for the packet is received. 3.6 Slow Start Slow start is an algorithm used by TCP <ref> [1] </ref> to find the available bandwidth on the path of a connection. Slow start is invoked at the beginning of transmission or after the retransmission timer of a packet expires.
Reference: [2] <author> B. Braden, D. Clark, J. Crowcroft, B. Davie, S. Deering, D. Estrin, S. Floyd, V. Jacobson, G. Minshall, C. Partridge, L. Peterson, K. K. Ramakrishnan, S. Shenker, J. Wroclawski, and L. Zhang. </author> <title> Recomme-dations on queue management and congestion avoidance in the Internet. </title> <type> Internet Draft, </type> <month> March </month> <year> 1997. </year>
Reference-contexts: This congestion control mechanism encourages the fair sharing of a congested link among multiple competing TCP flows. A flow is said to be TCP-compatible or TCP-like if it behaves similar to a flow produced by TCP under congestion <ref> [2] </ref>. At steady state, a TCP-compatible flow uses no more bandwidth than a conforming TCP connection running under comparable conditions. Unfortunately, most of the multicast schemes proposed so far do not employ end-to-end congestion control. <p> Furthermore, as it has been pointed out [14], extra delays up to a few seconds can be tolerated because network links where a single flow can create severe transient congestion are likely to employ an appropriate queue management mechanism such as random early detection (RED) <ref> [15, 2] </ref>. We have observed through Internet experiments and simulation that the delay in MTCP is well within this range; more details are given in Section 4 (also refer to Figure 8). 3.11 Window Update Acknowledgments In MTCP, congestion summaries are normally piggybacked on every ACK and NACK.
Reference: [3] <author> S. Floyd and K. </author> <month> Fall. </month> <title> Router mechanisms to support end-to-end congestion control. </title> <type> Technical report, </type> <institution> Lawrence Berkeley Laboratory, </institution> <month> February </month> <year> 1997. </year>
Reference-contexts: Furthermore, multicast flows insensitive to existing congestion (especially congestion caused by their own traffic) are likely to cause simultaneous congestion collapses in many parts of the Internet <ref> [3] </ref>. Because of the potential far-reaching damage of TCP-incompatible multicast traffic, it is highly unlikely that transport protocols for large-scale reliable multicast will become widely accepted without TCP-like congestion control mechanisms. The main challenge of congestion control for reliable multicast is scalability. <p> Since MTCP emulates TCP on a logical tree, the throughput behavior of MTCP is similar to that of TCP and can be approximated as <ref> [3] </ref>: T = cs RTT p , where s is the packet size, RTT is the round trip time, p is the packet loss rate, and c is some constant.
Reference: [4] <author> T. Jiang, M. H. Ammar, and E. W. Zegura. </author> <title> Inter-receiver fairness: A novel performance measure for multicast abr sessions. </title> <booktitle> In Procceedings of ACM SIGMETRICS/PERFORMANCE '98, pages 202211. ACM, </booktitle> <month> June </month> <year> 1998. </year>
Reference-contexts: While such a feature fosters fairness among 1 different flows (inter-fairness), it does not address the issue of fairness among the receivers in the same multicast group (intra-fairness) <ref> [4] </ref>. Specifically, it would be unfair for non-congested receivers to be subject to a low transmission rate just because of some isolated instances of congestion. In this paper, we introduce Multicast TCP (MTCP), a new congestion control protocol for reliable mul-ticast that addresses the inter-fairness and scalability issues.
Reference: [5] <author> B. N. Levine, D. B. Lavo, and J. J. Garcia-Luna-Aceves. </author> <title> The case for reliable concurrent multicasting using shared ack trees. </title> <booktitle> In Proceedings of Multimedia 1996, </booktitle> <pages> pages 365376. </pages> <publisher> ACM, </publisher> <year> 1996. </year>
Reference-contexts: The encouraging results from these experiments indicate that MTCP is an effective flow and congestion control protocol for reliable multicast. Tree-based protocols are not new and have been studied by many researchers <ref> [5, 6, 7, 8, 9] </ref>. However, little work has been done on TCP-like congestion control for these protocols. Instead, most previous work has focused on the issues of error recovery and feedback implosion. <p> Tree-based protocols are not new and have been studied by many researchers [5, 6, 7, 8, 9]. However, little work has been done on TCP-like congestion control for these protocols. Instead, most previous work has focused on the issues of error recovery and feedback implosion. In <ref> [5, 10] </ref> it has been analytically shown that tree-based protocols can achieve higher throughput than any other class of protocols, and that their hierarchical structure is the key to reducing the processing load at each member of the multicast group. <p> In RMP, since NACKs are also multicast to suppress other NACKs, the protocol suffers from problems similar to those arising in receiver-based protocols. In a tree protocol <ref> [5, 6, 7, 8, 9] </ref>, a logical tree structure is imposed on the multicast group, with internal nodes acting as representative receivers for the group. While the sender multicasts data to the entire group, a receiver sends feedback only to its parent. <p> In the following, we discuss the congestion control schemes of RMTP [6] and TMTP [8], since the LBRM [7], LGC [9] and LORAX <ref> [5] </ref> tree protocols do not incorporate (or do not give much detail about) a congestion control scheme. The main problem with RMTP is that it does not provide end-to-end feedback. The sender only gets feedback from its own children (called designated receivers (DR)) about their receiving status.
Reference: [6] <author> S. Paul, K. K. Sabnani, J. C. Lin, and S. Bhattacharyya. </author> <title> Reliable multicast transport protocol (RMTP). </title> <booktitle> In Proceedings of INFOCOM '96. IEEE, </booktitle> <month> March </month> <year> 1996. </year>
Reference-contexts: The encouraging results from these experiments indicate that MTCP is an effective flow and congestion control protocol for reliable multicast. Tree-based protocols are not new and have been studied by many researchers <ref> [5, 6, 7, 8, 9] </ref>. However, little work has been done on TCP-like congestion control for these protocols. Instead, most previous work has focused on the issues of error recovery and feedback implosion. <p> However, the analysis does not consider the effects of congestion control. Tree-based protocols such as RMTP <ref> [6] </ref> and TMTP [8] do not incorporate end-to-end congestion control schemes an do not guarantee inter-fairness. <p> This acknowledgment also indicates that the receiver has received all packets up to and including packet 149. A similar bit vector is used in RMTP <ref> [6] </ref>. <p> In RMP, since NACKs are also multicast to suppress other NACKs, the protocol suffers from problems similar to those arising in receiver-based protocols. In a tree protocol <ref> [5, 6, 7, 8, 9] </ref>, a logical tree structure is imposed on the multicast group, with internal nodes acting as representative receivers for the group. While the sender multicasts data to the entire group, a receiver sends feedback only to its parent. <p> Since the maximum degree of each node is fixed to a small constant, each node, including the sender, receives only a small amount of feedback within a round trip time. In the following, we discuss the congestion control schemes of RMTP <ref> [6] </ref> and TMTP [8], since the LBRM [7], LGC [9] and LORAX [5] tree protocols do not incorporate (or do not give much detail about) a congestion control scheme. The main problem with RMTP is that it does not provide end-to-end feedback.
Reference: [7] <author> H. W. Holbrook, S. K. Singhal, and D. R. Cheriton. </author> <title> Log-based receiver-reliable multicast for distributed interactive simulation. </title> <booktitle> In Proceedings of SIGCOMM, </booktitle> <pages> pages 328341. </pages> <publisher> ACM, </publisher> <month> August </month> <year> 1995. </year>
Reference-contexts: The encouraging results from these experiments indicate that MTCP is an effective flow and congestion control protocol for reliable multicast. Tree-based protocols are not new and have been studied by many researchers <ref> [5, 6, 7, 8, 9] </ref>. However, little work has been done on TCP-like congestion control for these protocols. Instead, most previous work has focused on the issues of error recovery and feedback implosion. <p> In RMP, since NACKs are also multicast to suppress other NACKs, the protocol suffers from problems similar to those arising in receiver-based protocols. In a tree protocol <ref> [5, 6, 7, 8, 9] </ref>, a logical tree structure is imposed on the multicast group, with internal nodes acting as representative receivers for the group. While the sender multicasts data to the entire group, a receiver sends feedback only to its parent. <p> Since the maximum degree of each node is fixed to a small constant, each node, including the sender, receives only a small amount of feedback within a round trip time. In the following, we discuss the congestion control schemes of RMTP [6] and TMTP [8], since the LBRM <ref> [7] </ref>, LGC [9] and LORAX [5] tree protocols do not incorporate (or do not give much detail about) a congestion control scheme. The main problem with RMTP is that it does not provide end-to-end feedback.
Reference: [8] <author> R. Yavatkar, J. Griffioen, and M. Sudan. </author> <title> A reliable dissemination protocol for interactive collaborative applications. </title> <booktitle> In Proceedings of Multimedia 1996. ACM, </booktitle> <year> 1996. </year>
Reference-contexts: The encouraging results from these experiments indicate that MTCP is an effective flow and congestion control protocol for reliable multicast. Tree-based protocols are not new and have been studied by many researchers <ref> [5, 6, 7, 8, 9] </ref>. However, little work has been done on TCP-like congestion control for these protocols. Instead, most previous work has focused on the issues of error recovery and feedback implosion. <p> However, the analysis does not consider the effects of congestion control. Tree-based protocols such as RMTP [6] and TMTP <ref> [8] </ref> do not incorporate end-to-end congestion control schemes an do not guarantee inter-fairness. In [9, 11] it was proposed to use a tree structure for feedback control, and a detailed description of how to construct such a tree was provided, but no details on congestion control were given. <p> In RMP, since NACKs are also multicast to suppress other NACKs, the protocol suffers from problems similar to those arising in receiver-based protocols. In a tree protocol <ref> [5, 6, 7, 8, 9] </ref>, a logical tree structure is imposed on the multicast group, with internal nodes acting as representative receivers for the group. While the sender multicasts data to the entire group, a receiver sends feedback only to its parent. <p> Since the maximum degree of each node is fixed to a small constant, each node, including the sender, receives only a small amount of feedback within a round trip time. In the following, we discuss the congestion control schemes of RMTP [6] and TMTP <ref> [8] </ref>, since the LBRM [7], LGC [9] and LORAX [5] tree protocols do not incorporate (or do not give much detail about) a congestion control scheme. The main problem with RMTP is that it does not provide end-to-end feedback.
Reference: [9] <author> M. Hofmann. </author> <title> A generic concept for large-scale multicast. </title> <editor> In B. Plattner (ed.), </editor> <booktitle> Broadband Communications, Proceedings of International Zurich Seminar on Digital Communications (IZS '96). </booktitle> <publisher> LNCS 1044, Springer Verlag, </publisher> <month> February </month> <year> 1996. </year>
Reference-contexts: The encouraging results from these experiments indicate that MTCP is an effective flow and congestion control protocol for reliable multicast. Tree-based protocols are not new and have been studied by many researchers <ref> [5, 6, 7, 8, 9] </ref>. However, little work has been done on TCP-like congestion control for these protocols. Instead, most previous work has focused on the issues of error recovery and feedback implosion. <p> However, the analysis does not consider the effects of congestion control. Tree-based protocols such as RMTP [6] and TMTP [8] do not incorporate end-to-end congestion control schemes an do not guarantee inter-fairness. In <ref> [9, 11] </ref> it was proposed to use a tree structure for feedback control, and a detailed description of how to construct such a tree was provided, but no details on congestion control were given. A more detailed discussion on related work can be found in Section 5. <p> In RMP, since NACKs are also multicast to suppress other NACKs, the protocol suffers from problems similar to those arising in receiver-based protocols. In a tree protocol <ref> [5, 6, 7, 8, 9] </ref>, a logical tree structure is imposed on the multicast group, with internal nodes acting as representative receivers for the group. While the sender multicasts data to the entire group, a receiver sends feedback only to its parent. <p> In the following, we discuss the congestion control schemes of RMTP [6] and TMTP [8], since the LBRM [7], LGC <ref> [9] </ref> and LORAX [5] tree protocols do not incorporate (or do not give much detail about) a congestion control scheme. The main problem with RMTP is that it does not provide end-to-end feedback. The sender only gets feedback from its own children (called designated receivers (DR)) about their receiving status.
Reference: [10] <author> B. N. Levine and J. J. Garcia-Luna-Aceves. </author> <title> A comparision of known classes of reliable multicast protocols. </title> <booktitle> In Proceedings of International Conference on Network Protocols. IEEE, </booktitle> <month> October </month> <year> 1996. </year>
Reference-contexts: Tree-based protocols are not new and have been studied by many researchers [5, 6, 7, 8, 9]. However, little work has been done on TCP-like congestion control for these protocols. Instead, most previous work has focused on the issues of error recovery and feedback implosion. In <ref> [5, 10] </ref> it has been analytically shown that tree-based protocols can achieve higher throughput than any other class of protocols, and that their hierarchical structure is the key to reducing the processing load at each member of the multicast group.
Reference: [11] <author> M. Hofmann. </author> <title> Adding scalability to transport level multicast. </title> <booktitle> In Proceedings of Third COST 237 Workshop Multimedia Telecommunications and Applications. </booktitle> <publisher> Springer Verlag, </publisher> <month> November </month> <year> 1996. </year>
Reference-contexts: However, the analysis does not consider the effects of congestion control. Tree-based protocols such as RMTP [6] and TMTP [8] do not incorporate end-to-end congestion control schemes an do not guarantee inter-fairness. In <ref> [9, 11] </ref> it was proposed to use a tree structure for feedback control, and a detailed description of how to construct such a tree was provided, but no details on congestion control were given. A more detailed discussion on related work can be found in Section 5.
Reference: [12] <author> S. Deering. </author> <title> Multicast Routing in a Datagram Internetwork. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <month> December </month> <year> 1991. </year>
Reference-contexts: Below we give an overview of MTCP, and in the next section, we provide a detailed description of the protocol. Packet loss detection and recovery via selective acknowledgments. A sender multicasts data packets using IP-Multicast <ref> [12] </ref> to all receivers. SAs in the logical tree store packets received from the sender in their buffers, and set a timer, called retransmission timer, for each packet they buffer. The sender also sets a retransmission timer for each of the packets it transmits.
Reference: [13] <author> L. S. Brakmo, S. W. O'Malley, and L. L. Peterson. </author> <title> TCP Vegas: New techniques for congestion detection and avoidance. </title> <booktitle> In Proceedings of SIGCOMM '94, </booktitle> <pages> pages 2435. </pages> <publisher> ACM, </publisher> <month> May </month> <year> 1994. </year>
Reference-contexts: TCP-like congestion window. Each SA (including the sender) estimates the minimum bandwidth available in the multicast routes from the sender to its children by maintaining a TCP-like congestion window 3 (cwnd). An SA maintains its cwnd using TCP-Vegas <ref> [13] </ref> congestion control mechanisms such as slow start and congestion avoidance. <p> This linear increase period is called the congestion avoidance period. Since during slow start cwnd increases exponentially, this process itself can cause congestion. MTCP adopts the slow start mechanisms of TCP-Vegas <ref> [13] </ref> to detect congestion even during slow start.
Reference: [14] <author> S. Floyd. </author> <title> Requirements for congestion control for reliable multicast. </title> <booktitle> The Reliable Multicast Research Group Meeting in Cannes, </booktitle> <month> September </month> <year> 1997. </year> <month> 32 </month>
Reference-contexts: However, unless congestion is reported directly to the sender (an approach that inevitably leads to ACK implosion), this extra delay is unavoidable. Furthermore, as it has been pointed out <ref> [14] </ref>, extra delays up to a few seconds can be tolerated because network links where a single flow can create severe transient congestion are likely to employ an appropriate queue management mechanism such as random early detection (RED) [15, 2].
Reference: [15] <author> S. Floyd and V. Jacobson. </author> <title> Random early detection gateways for congestion avoidance. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> 1(4):397413, </volume> <month> August </month> <year> 1993. </year>
Reference-contexts: Furthermore, as it has been pointed out [14], extra delays up to a few seconds can be tolerated because network links where a single flow can create severe transient congestion are likely to employ an appropriate queue management mechanism such as random early detection (RED) <ref> [15, 2] </ref>. We have observed through Internet experiments and simulation that the delay in MTCP is well within this range; more details are given in Section 4 (also refer to Figure 8). 3.11 Window Update Acknowledgments In MTCP, congestion summaries are normally piggybacked on every ACK and NACK.
Reference: [16] <author> L. Vicisano, L. Rizzo, and J. Crowcroft. </author> <title> TCP-like congestion control for layered multicast data transfer. </title> <booktitle> In Proceedings of INFOCOM '98. IEEE, </booktitle> <month> April </month> <year> 1998. </year>
Reference-contexts: In this section we present results for the topology shown in Figure 16, which is very similar to the one used in <ref> [16, Figure 2] </ref>; results obtained from other topologies are very similar to the ones presented here. There are four senders and nine receivers in the network, and each MTCP instance involves one of the senders and all nine receivers. We run three different experiments. <p> In addition, since the group structure is essentially two-level, it is not clear whether the protocol is scalable to very large numbers of receivers. Other types of protocols that do not fall within the above categories include receiver-driven layered multicast protocols <ref> [35, 16, 36] </ref>. These protocols implement congestion control by encoding the transmitted data into multiple layers and transmitting each layer to a different multicast group. By joining and leaving different multicast groups, each receiver can control its own receiving rate. <p> By joining and leaving different multicast groups, each receiver can control its own receiving rate. Initially, the layering technique was proposed for continuous multimedia data streams which can tolerate some loss. Recently the technique was applied to a reliable bulk data multicast by Vicisano et al. <ref> [16] </ref>.
Reference: [17] <author> R. Jain. </author> <title> A delay-based approach for congestion avoidance in interconnected heterogeneous computer networks. </title> <journal> Computer Communications Review, </journal> <volume> 19:5671, </volume> <month> October </month> <year> 1989. </year>
Reference-contexts: The total simulation time for each experiment was 250 seconds. 23 0 100000 200000 300000 400000 500000 Receiving Rate (bytes/sec) Time (sec) "MTCP" "TCP1" "TCP3" In each experiment, we calculated the fairness index defined by Jain et al. <ref> [17] </ref>. The fairness index is a quantitative measure of fairness for a resource allocation system, which is independent of the amount of resource being shared.
Reference: [18] <author> D. DeLucia and K. Obraczka. </author> <title> Multicast feedback supression using representatives. </title> <booktitle> In Proceedings of INFOCOM '97. IEEE, </booktitle> <month> April </month> <year> 1997. </year>
Reference-contexts: For the results presented in this section, we have used the network topology shown in Figure 17, which is an extension of 24 Sender Receiver A/B: A Mbps, B ms delay link 10/30 10/30 1 3 5 7 9 10/2 10/2 10/10 1.5/30 the topology used in <ref> [18] </ref>. This network was generated using Georgia Institute of Technology's Internetwork Topology Models (GT-ITM) tool [19], which has been shown to generate topologies that closely resemble the structure of the Internet. <p> The fact that TMTP continues to transmit at a fixed rate despite the congestion is unfair to TCP-compatible flows which reduce their rates at the first indication of congestion. Hybrid protocols <ref> [18, 34] </ref> combine the packet recovery techniques used in structured and unstructured protocols. As in receiver-based protocols, a receiver can multicast NACKs suppressing other NACKs, while other receivers may respond to the NACKs by retransmitting lost packets. <p> In addition, a small number of representative receivers multicast their feedback immediately without any delay or suppression. The sender uses this feedback to control its transmission rate. Delucia and Obraczka <ref> [18] </ref> proposed a hybrid congestion control technique in which the size of the representative set is fixed, but the actual nodes in the set change over time based on the congestion status of receivers. <p> For each subgroup, one relay receiver is chosen to receive data from the sender and play them out at a slower rate suitable for the receivers in the subgroup. The idea of representatives is similar to that in <ref> [18] </ref>, but the subgroup idea is new and promising. However, the overhead, complexity, and efficacy of dynamic subgroup formations are not yet explored, justified or proven. In addition, since the group structure is essentially two-level, it is not clear whether the protocol is scalable to very large numbers of receivers.
Reference: [19] <author> E. Zegura, K. Calvert, and S. Bhallacharjee. </author> <title> How to model an internetwork. </title> <booktitle> In Proceedings of INFO-COM '96. IEEE, </booktitle> <month> March </month> <year> 1996. </year>
Reference-contexts: This network was generated using Georgia Institute of Technology's Internetwork Topology Models (GT-ITM) tool <ref> [19] </ref>, which has been shown to generate topologies that closely resemble the structure of the Internet. The links connecting the nodes were one of three types, as shown in the figure, the queueing discipline at the routers was DropTail, and the queue size was 20.
Reference: [20] <author> Alfred C. Weaver. </author> <title> Xpress Transport Protocol Version 4. </title> <institution> University of Virginia. </institution>
Reference-contexts: Unstructured protocols do not impose any structure among receivers, and Pingali et al. [30] further classify them into sender-based <ref> [20, 22, 26, 28, 27, 29] </ref> and receiver-based protocols [24, 25]. In sender-based protocols, every receiver sends ACKs or NACKs directly to the sender, and the sender retransmits lost packets reported in NACKs.
Reference: [21] <author> S. Armstrong, A. Freier, and K. Marzullo. </author> <title> Multicast transport protocol. In Internet Request for Comments RFC 1301, </title> <month> February </month> <year> 1992. </year>
Reference: [22] <author> K. P. Birman and T. Clark. </author> <title> Performance of the Isis distributed computing toolkit. </title> <type> Technical Report 94-1432, </type> <institution> Cornell University's Computer Science Department, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: Unstructured protocols do not impose any structure among receivers, and Pingali et al. [30] further classify them into sender-based <ref> [20, 22, 26, 28, 27, 29] </ref> and receiver-based protocols [24, 25]. In sender-based protocols, every receiver sends ACKs or NACKs directly to the sender, and the sender retransmits lost packets reported in NACKs.
Reference: [23] <author> B. Whetten, T. Montgomery, and S. Kaplan. </author> <title> A high performance totally ordered multicast protocol. In Theory and Practice in Distributed Systems. </title> <publisher> LNCS 938, Springer Verlag. </publisher>
Reference-contexts: However the protocol assumes that the end-to-end delay variation is bounded and a priori known to all receivers. Structured protocols impose a logical structure among group members. Two commonly studied structures are rings and trees. In ring protocols <ref> [23] </ref>, a logical ring of group members is formed. Typically, a token is passed around the ring and only the process with the token may send feedback to the sender. RMP [23] supports TCP-like congestion control based on both ACKs and NACKs. <p> Two commonly studied structures are rings and trees. In ring protocols <ref> [23] </ref>, a logical ring of group members is formed. Typically, a token is passed around the ring and only the process with the token may send feedback to the sender. RMP [23] supports TCP-like congestion control based on both ACKs and NACKs. However, since only the token holder can send an ACK, it is unclear how the ACKs are used for purposes of congestion control when there is a large number of nodes in the ring.
Reference: [24] <author> S. Floyd, V. Jacobson, S. McCanne, C. G. Liu, and L. Zhang. </author> <title> A reliable multicast framework for light-weight sessions and application level framing. </title> <booktitle> In Proceedings of SIGCOMM '95 Conference, </booktitle> <pages> pages 342356. </pages> <publisher> ACM, </publisher> <month> October </month> <year> 1995. </year>
Reference-contexts: Unstructured protocols do not impose any structure among receivers, and Pingali et al. [30] further classify them into sender-based [20, 22, 26, 28, 27, 29] and receiver-based protocols <ref> [24, 25] </ref>. In sender-based protocols, every receiver sends ACKs or NACKs directly to the sender, and the sender retransmits lost packets reported in NACKs. <p> Assuming that a small set of bottleneck links always causes the majority of the congestion problem, the protocol solves the feedback implosion problem, as well as other problems associated with SRM <ref> [24] </ref> (such as the RTT estimation problem). The scalability and utility of the protocol highly depend on this basic assumption, namely, that the representative set is always small.
Reference: [25] <author> B. Sabata, M. J. Brown, and B. A. Denny. </author> <title> Transport protocol for reliable multicast: </title> <booktitle> TRM. In Proceedings of the IASTED International Conference on Networks, </booktitle> <pages> pages 143145, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: Unstructured protocols do not impose any structure among receivers, and Pingali et al. [30] further classify them into sender-based [20, 22, 26, 28, 27, 29] and receiver-based protocols <ref> [24, 25] </ref>. In sender-based protocols, every receiver sends ACKs or NACKs directly to the sender, and the sender retransmits lost packets reported in NACKs.
Reference: [26] <author> R. Van Renesse, K. Birman, and S. Maffeis. Horus: </author> <title> A flexible group communication system. </title> <journal> Communications of the ACM, </journal> <volume> 39(9):6470, </volume> <month> April </month> <year> 1996. </year>
Reference-contexts: Unstructured protocols do not impose any structure among receivers, and Pingali et al. [30] further classify them into sender-based <ref> [20, 22, 26, 28, 27, 29] </ref> and receiver-based protocols [24, 25]. In sender-based protocols, every receiver sends ACKs or NACKs directly to the sender, and the sender retransmits lost packets reported in NACKs.
Reference: [27] <author> J. R. Cooperstock and S. Kotsopoulos. </author> <title> Why use a fishing line when you have a net? an adaptive multicast data distribution protocol. </title> <booktitle> In Proceedings of 1996 USENIX Technical Conference, </booktitle> <month> January </month> <year> 1996. </year>
Reference-contexts: Unstructured protocols do not impose any structure among receivers, and Pingali et al. [30] further classify them into sender-based <ref> [20, 22, 26, 28, 27, 29] </ref> and receiver-based protocols [24, 25]. In sender-based protocols, every receiver sends ACKs or NACKs directly to the sender, and the sender retransmits lost packets reported in NACKs.
Reference: [28] <author> A. Koifman and S. Zabele. </author> <title> A reliable adaptive multicast protocol. </title> <booktitle> In Proceedings of INFOCOM '96, </booktitle> <pages> pages 14421451. </pages> <publisher> IEEE, </publisher> <month> March </month> <year> 1996. </year>
Reference-contexts: Unstructured protocols do not impose any structure among receivers, and Pingali et al. [30] further classify them into sender-based <ref> [20, 22, 26, 28, 27, 29] </ref> and receiver-based protocols [24, 25]. In sender-based protocols, every receiver sends ACKs or NACKs directly to the sender, and the sender retransmits lost packets reported in NACKs.
Reference: [29] <author> I. Rhee, S. Y. Cheung, P. W. Hutto, and V. S. Sunderam. </author> <title> Group communication support for distributed multimedia and CSCW systems. </title> <booktitle> In Proceedings of 17th Interanational Conference on Distributed Computing Systems. IEEE, </booktitle> <month> June </month> <year> 1997. </year> <month> 33 </month>
Reference-contexts: Unstructured protocols do not impose any structure among receivers, and Pingali et al. [30] further classify them into sender-based <ref> [20, 22, 26, 28, 27, 29] </ref> and receiver-based protocols [24, 25]. In sender-based protocols, every receiver sends ACKs or NACKs directly to the sender, and the sender retransmits lost packets reported in NACKs.
Reference: [30] <author> S. Pingali, D. Towsley, and J. F. Kurose. </author> <title> A comparision of sender-initiated and receiver-initiated reliable multicast protocols. </title> <booktitle> In Proceedings of SIGMETRICS. ACM, </booktitle> <year> 1994. </year>
Reference-contexts: Unstructured protocols do not impose any structure among receivers, and Pingali et al. <ref> [30] </ref> further classify them into sender-based [20, 22, 26, 28, 27, 29] and receiver-based protocols [24, 25]. In sender-based protocols, every receiver sends ACKs or NACKs directly to the sender, and the sender retransmits lost packets reported in NACKs.
Reference: [31] <author> M. Yajnik, J. Kurose, and D. Towsley. </author> <title> Packet loss correlation in the MBONE multicast network. </title> <type> Technical Report CMPSCI 96-32, </type> <institution> University of Massachussetts, </institution> <address> Amherst, MA. </address>
Reference-contexts: Typically, the protocols incorporate randomized NACK and retransmission suppression timers to reduce the number of duplicate NACKs and retransmissions. We find three main shortcomings with receiver-based protocols. First, Yajnik et al. <ref> [31] </ref> report that most packet loss in the Internet Multicast Backbone (MBONE) occurs not at the backbone, but near end receivers, and that even excluding packet loss occurring near the sender, a small, but still significant, amount of loss (about 1% to 30%) involves more than two receivers. <p> Either approach seems unreasonable. Second, in most receiver-based protocols that primarily use NACKs to detect congestion, the absence of NACKs is considered as no congestion or congestion clearance. Some Internet studies <ref> [31, 32] </ref>, however, reveal that almost every experiment trace includes one or more extremely long bursts of packet loss lasting from a few seconds up to a few minutes. During these bursts, no packets are received.
Reference: [32] <author> V. Paxson. </author> <title> End-to-end routing behavior in the Internet. </title> <booktitle> In Proceedings of SIGCOMM '96. ACM, </booktitle> <month> August </month> <year> 1996. </year>
Reference-contexts: Either approach seems unreasonable. Second, in most receiver-based protocols that primarily use NACKs to detect congestion, the absence of NACKs is considered as no congestion or congestion clearance. Some Internet studies <ref> [31, 32] </ref>, however, reveal that almost every experiment trace includes one or more extremely long bursts of packet loss lasting from a few seconds up to a few minutes. During these bursts, no packets are received.
Reference: [33] <author> M. Grossglauser. </author> <title> Optimal deterministic timeouts for reliable scalable multicast. </title> <booktitle> In Proceedings of INFOCOM '96, </booktitle> <pages> pages 14251432. </pages> <publisher> IEEE, </publisher> <month> March </month> <year> 1996. </year>
Reference-contexts: Third, the randomized NACK suppression techniques employed by the receiver-based protocols require each receiver to estimate the round trip time (RTT) to every receiver in the group. This approach requires O (n 2 ) RTT estimations by every receiver, thus imposing limits on scalability. Grossglauser <ref> [33] </ref> proposed a distributed deterministic timeout estimation protocol that does not require global information. However the protocol assumes that the end-to-end delay variation is bounded and a priori known to all receivers. Structured protocols impose a logical structure among group members. Two commonly studied structures are rings and trees.
Reference: [34] <author> M. Handley. </author> <title> A congestion control architecture for bulk data transfer. </title> <booktitle> In The Reliable Multicast Research Group Meeting in Cannes, </booktitle> <month> September </month> <year> 1997. </year>
Reference-contexts: The fact that TMTP continues to transmit at a fixed rate despite the congestion is unfair to TCP-compatible flows which reduce their rates at the first indication of congestion. Hybrid protocols <ref> [18, 34] </ref> combine the packet recovery techniques used in structured and unstructured protocols. As in receiver-based protocols, a receiver can multicast NACKs suppressing other NACKs, while other receivers may respond to the NACKs by retransmitting lost packets. <p> This assumption may not be realistic, however, since several group members can be independently and simultaneously congested although they do not share the same congested links. No safeguard against this situation is provided. Handley <ref> [34] </ref> also recently proposed a hybrid congestion control architecture. His technique works as follows. A small set of representative receivers is selected based on their loss characteristics, and each representative forms a subgroup along with receivers that share similar loss characteristics.
Reference: [35] <author> S. McCanne, V. Jacobson, and M. Vetterli. </author> <title> Receiver-driven layered multicast. </title> <booktitle> In Proceedings of SIGCOMM '96, </booktitle> <pages> pages 117130. </pages> <publisher> ACM, </publisher> <month> August </month> <year> 1996. </year>
Reference-contexts: In addition, since the group structure is essentially two-level, it is not clear whether the protocol is scalable to very large numbers of receivers. Other types of protocols that do not fall within the above categories include receiver-driven layered multicast protocols <ref> [35, 16, 36] </ref>. These protocols implement congestion control by encoding the transmitted data into multiple layers and transmitting each layer to a different multicast group. By joining and leaving different multicast groups, each receiver can control its own receiving rate.
Reference: [36] <author> T. Turletti, J. C. Bolot, and I. Wakeman. </author> <title> Scalable feedback control for multicast video distribution in the Internet. </title> <booktitle> In Proceedings of SIGCOMM '94. ACM, </booktitle> <month> August </month> <year> 1994. </year> <month> 34 </month>
Reference-contexts: In addition, since the group structure is essentially two-level, it is not clear whether the protocol is scalable to very large numbers of receivers. Other types of protocols that do not fall within the above categories include receiver-driven layered multicast protocols <ref> [35, 16, 36] </ref>. These protocols implement congestion control by encoding the transmitted data into multiple layers and transmitting each layer to a different multicast group. By joining and leaving different multicast groups, each receiver can control its own receiving rate.
References-found: 36

