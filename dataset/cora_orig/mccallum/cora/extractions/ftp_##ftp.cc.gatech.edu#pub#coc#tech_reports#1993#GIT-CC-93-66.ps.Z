URL: ftp://ftp.cc.gatech.edu/pub/coc/tech_reports/1993/GIT-CC-93-66.ps.Z
Refering-URL: http://www.cs.gatech.edu/tech_reports/index.93.html
Root-URL: 
Email: e-mail frimli,venkatg@cc.gatech.edu  
Title: Lower Bounds for Perfect Matching in Restricted Boolean Circuits  
Author: Rimli Sengupta and H. Venkateswaran 
Note: This work was supported by NSF grant CCR-9200878.  
Address: Atlanta, Georgia 30332-0280  
Affiliation: College of Computing Georgia Institute of Technology  
Date: November, 1993  
Pubnum: GIT-CC-93/66  
Abstract: We consider three restrictions on Boolean circuits: bijectivity, consistency and mul-tilinearity. Our main result is that Boolean circuits require exponential size to compute the bipartite perfect matching function when restricted to be (i) bijective or (ii) consistent and multilinear. As a consequence of the lower bound on bijec-tive circuits, we prove an exponential size lower bound for monotone arithmetic circuits that compute the 0-1 permanent function. We also define a notion of homogeneity for Boolean circuits and show that consistent homogeneous circuits require exponential size to compute the bipartite perfect matching function. Motivated by consistent multilinear circuits, we consider certain restricted (; ^) circuits and obtain an exponential lower bound for computing bipartite perfect matching using such circuits. Finally, we show that the lower bound arguments for the bipartite perfect matching function on all these restricted models can be adapted to prove exponential lower bounds for the Hamiltonian circuit problem in all these models. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Boppana and M. Sipser, </author> <title> The complexity of finite functions, </title> <booktitle> In The Handbook iof Theoretical Computer Science, </booktitle> <editor> J. Van Leeeuwen ed., </editor> <publisher> Elsevier Science Publishers B.V. </publisher> <year> (1990) </year> <month> 759-804. </month>
Reference-contexts: 1 Introduction The difficulty in obtaining non-trivial size or depth lower bounds for computing functions using general Boolean circuits has led researchers into studying restricted models of Boolean computation <ref> [1] </ref>. Monotone Boolean circuits is an example of such a restricted model for which several interesting results have been obtained [9, 3, 14, 7]. The problem of computing the bipartite perfect matching function has received considerable attention in the past. <p> This is an ^ gate that has two inputs [B; i; k] and [C; k + 1; j] and it evaluates to 1 on input x if and only if B fl fl The output gate is <ref> [S; 1; n] </ref> where S is the start symbol in the grammar G.
Reference: [2] <author> A. Chandra, L. Stockmeyer and U. Vishkin, </author> <title> Constant depth reducibility, </title> <journal> SIAM J. Comput. </journal> <month> 13:2 </month> <year> (1984), </year> <pages> 423-439. </pages>
Reference-contexts: For monotone Boolean circuits computing this function, a super-polynomial size lower bound [9] and a linear depth lower bound [7] are known. For constant depth unbounded fan-in circuits an exponential size lower bound for this function follows since it is constant depth reducible to PARITY <ref> [2] </ref>. In this paper we identify three new and non-trivial restrictions on Boolean circuits: bijectiv-ity, consistency and multilinearity, obtained by defining restrictions on the formal polynomial associated with the circuit.
Reference: [3] <author> M. Grigni and M. Sipser, </author> <title> Monotone separation of Logspace from NC 1 , Proc. </title> <booktitle> 6th IEEE Structures (1991), </booktitle> <pages> 294-298. </pages>
Reference-contexts: 1 Introduction The difficulty in obtaining non-trivial size or depth lower bounds for computing functions using general Boolean circuits has led researchers into studying restricted models of Boolean computation [1]. Monotone Boolean circuits is an example of such a restricted model for which several interesting results have been obtained <ref> [9, 3, 14, 7] </ref>. The problem of computing the bipartite perfect matching function has received considerable attention in the past. Deciding whether a bipartite graph has a perfect matching is equivalent to computing the Boolean permanent of the adjacency matrix of the graph.
Reference: [4] <author> J.E. Hopcroft and R.M. Karp, </author> <title> A n 5=2 algorithm for maximum matching in bipartite graphs, </title> <journal> SIAM J. Comput. </journal> <volume> 2 (1973), </volume> <pages> 225-231. </pages>
Reference-contexts: Deciding whether a bipartite graph has a perfect matching is equivalent to computing the Boolean permanent of the adjacency matrix of the graph. This problem can be solved by polynomial size Boolean circuits since it is known to be in P <ref> [4] </ref>. But no non-trivial lower bounds are known for the size or depth of general Boolean circuits that compute this function. For monotone Boolean circuits computing this function, a super-polynomial size lower bound [9] and a linear depth lower bound [7] are known. <p> The proof of this lemma is almost identical to that of lemma 4.1, considering only cyclic permutations in the place of all permutations. 18 restriction circuit size B (n:2 n1 ) B, M " C ? M, C (n:2 n1 ) none O (n 5=2 ) <ref> [4] </ref> Lemma 8.1 Let ff be an (r,d)-significant ^-node in B m .
Reference: [5] <author> M. Jerrum and M. Snir, </author> <title> Some exact complexity results for straight-line computations over semi-rings, </title> <journal> J. Assoc. Comput. Mach. </journal> <volume> 29 (1982), </volume> <pages> 874-897. </pages>
Reference-contexts: For instance, the N C 1 circuit for PARITY is bijective, consistent and multilinear. Similarly, the polynomial size circuit implementing the Cocke-Kasami-Younger algorithm for context-free language recognition is consistent and multilinear. To prove our lower bounds, we generalize a combinatorial framework developed by Jerrum and Snir <ref> [5] </ref> to obtain exponential lower bounds on the number of multiplications necessary to compute polynomials using circuits defined over semi-rings. The lower bound arguments in [5] are developed for the Boolean circuit model and then translated into lower bounds for circuits over other semi-rings. <p> To prove our lower bounds, we generalize a combinatorial framework developed by Jerrum and Snir <ref> [5] </ref> to obtain exponential lower bounds on the number of multiplications necessary to compute polynomials using circuits defined over semi-rings. The lower bound arguments in [5] are developed for the Boolean circuit model and then translated into lower bounds for circuits over other semi-rings. We observe that the Boolean circuits used in the lower bound arguments in [5] are bijective, monotone and multilinear. <p> The lower bound arguments in <ref> [5] </ref> are developed for the Boolean circuit model and then translated into lower bounds for circuits over other semi-rings. We observe that the Boolean circuits used in the lower bound arguments in [5] are bijective, monotone and multilinear. Since monotone circuits are necessarily consistent, our work can also be viewed as improvements to the results of [5] in several directions. We also define a restriction called homogeneity on Boolean circuits. <p> We observe that the Boolean circuits used in the lower bound arguments in <ref> [5] </ref> are bijective, monotone and multilinear. Since monotone circuits are necessarily consistent, our work can also be viewed as improvements to the results of [5] in several directions. We also define a restriction called homogeneity on Boolean circuits. A homogeneous circuit is one in which every consistent formal monomial has the same number of positive literals. Unlike the three restrictions above, homogeneous circuits cannot compute all Boolean functions. <p> Parse-graphs are a generalization of the notion of parse-trees in <ref> [5] </ref>. Every node of a parse-graph G computes a formal multivariate monomial, defined in the obvious way. The monomial computed at the root of G is a monomial of P (B n ). <p> In this section, we generalize the lower bound arguments of <ref> [5] </ref> to hold for bijective circuits. The main differences between this model and that used in [5] are that the circuits used here need not be multilinear and could have limited usage of negations through inconsistent monomials. <p> In this section, we generalize the lower bound arguments of <ref> [5] </ref> to hold for bijective circuits. The main differences between this model and that used in [5] are that the circuits used here need not be multilinear and could have limited usage of negations through inconsistent monomials. Definition 4.1 For an ^-node ff, let m (ff) be the number of consistent parse-graphs in which ff appears. <p> Definition 4.3 Let H be a subgraph of a consistent parse-graph G. Define weight of H as follows: W (H) = P ff2^nodes (H) 1 m (ff) , where ^-nodes (H) denotes the set of ^-nodes in H. A lemma similar to the one below was proven in <ref> [5] </ref> for their model. To prove it for bijective circuits, we need to take into account the fact that the parse-graphs are not necessarily trees and that the circuit could be non-monotone. <p> Since this means that the node ff contributes to m (ff) only for a single value of r and a single value of d, m (ff) is bounded above by d!(r d)!(n r)!. 2 The lemma below is motivated by theorem 3.3 in <ref> [5] </ref>, where fG i j 1 i n!g, are the consistent parse-graphs of B m . <p> m (ff) 1 m (ff) = 1 and therefore the right-hand side is the number of ^-nodes in fl. 2 To obtain a lower bound on the weight of a parse-graph G, we consider the number of input variables covered by G, instead of the notion of degree used in <ref> [5] </ref>. This is primarily because P (B m ) is not necessarily multilinear in our model. For any subgraph H of a parse-graph of B m , let v (H) denote the number of positive variables in the term associated with H. Let c (r; d) = d!(r d)!(n r)!. <p> For any subgraph H of a parse-graph of B m , let v (H) denote the number of positive variables in the term associated with H. Let c (r; d) = d!(r d)!(n r)!. The lemma below is adapted from theorem 3.4 in <ref> [5] </ref>. Lemma 4.3 Let H be a subgraph of of any consistent parse-graph G. Then, W (H) P v (H) 1 Proof: The proof is by induction on the number of nodes in H. For the base case, H has a single node. <p> Applying the induction hypothesis to the subgraphs ~ H fi and H fl and using lemma 4.1, we get: W (H) i=2 c (i; 1) (rd) X 1 + c (r; d) The expression on the right is shown in <ref> [5] </ref> to be minimum at d = 1 in the range 1 d b r 2 c. <p> As in section 4.1.1, we generalize the lower bound arguments in <ref> [5] </ref>, but in another direction. The main differences between consistent multilinear circuits and the model used in [5] are that the circuits used here need not be bijective and could use negations as long as no inconsistent monomials are computed. <p> As in section 4.1.1, we generalize the lower bound arguments in <ref> [5] </ref>, but in another direction. The main differences between consistent multilinear circuits and the model used in [5] are that the circuits used here need not be bijective and could use negations as long as no inconsistent monomials are computed. Let m = n 2 and let B m be a consistent multilinear Boolean circuit computing BPM. All parse-graphs of B m are trees. <p> Since monotone Boolean circuits are consistent, the above bound holds for monotone mul-tilinear Boolean circuits as well. 4.3 Upper Bounds The Boolean circuit based on the permanent analogue of Laplace's expansion rule for determinants computes BPM within size O (n (2 n1 1)) <ref> [5] </ref>. This circuit is bijective, monotone and multilinear. <p> Thus every parse-graph of B m is a representative of some parse-class. As in section 4, we adapt the combinatorial framework developed by Jerrum and Snir <ref> [5] </ref> to consistent homogeneous circuits. The main difference between the consistent homogeneous model and that used in [5] are that the circuits used here need not be bijective or multilinear and could use negations as long as no inconsistent monomials are computed. <p> Thus every parse-graph of B m is a representative of some parse-class. As in section 4, we adapt the combinatorial framework developed by Jerrum and Snir <ref> [5] </ref> to consistent homogeneous circuits. The main difference between the consistent homogeneous model and that used in [5] are that the circuits used here need not be bijective or multilinear and could use negations as long as no inconsistent monomials are computed. <p> Then m (ff) (d 1)!(r d 1)!(n r 1)! if r &lt; n Lemma 4.2 holds without any modifications and lemma 4.3 holds as well by choosing c (r; d) as suggested in <ref> [5] </ref>: c (r; d) = (d 1)!(r d 1)!(n r 1)! if r &lt; n As in the proof of theorem 4.1 it follows from these lemmas that the size of any bijective Boolean circuit for the Hamiltonian circuit problem is at least (n 1)! P (n1) 1 c (i;1) . <p> This expression evaluates to n 2 :2 n3 from which the theorem follows.2 The above size lower bound implies a linear depth lower bound for computing the HC using bijective circuits. Moreover, as in the case of BPM, Jerrum and Snir <ref> [5] </ref> also show an O (n 2 :2 n3 ) size upper bound for computing the Hamiltonian circuit polynomial in their model.
Reference: [6] <author> M. Karchmer, </author> <title> private communication. </title> <type> 20 </type>
Reference-contexts: But interestingly enough, they can compute all such functions, bipartite perfect matching in particular, within the same size as that of general Boolean circuits <ref> [6] </ref>. <p> Circuits over (; ^) can only compute Boolean functions f such that f (0) = 0 (note that this includes all monotone functions). In fact, (; ^) circuits can compute all such functions, BPM in particular, within size polynomial in that of the full Boolean basis <ref> [6] </ref>. Thus, by Razbarov's super-polynomial size lower bound on monotone circuits for BPM [9], it follows that (; ^) circuits are at least super-polynomially more powerful than monotone circuits for this function since they can compute it within polynomial size. <p> Moreover, B is multilinear since P (B) is formally identical to P (C) and C is multilinear. But by theorem 4.2, B must have size n (2 n1 1). Thus, s n (2 n1 1). 2 The results in this section can be summarized as follows. It is known <ref> [6] </ref> that (; ^) circuits can compute BPM within polynomial size. We identify two restrictions on (; ^) circuits: (a) multilinearity and (b) no even recurrence.
Reference: [7] <author> R. Raz and A. Wigderson, </author> <title> Monotone circuits for matching require linear depth, </title> <booktitle> Proc. 22nd annual ACM STOC (1990), </booktitle> <pages> 287-292. </pages>
Reference-contexts: 1 Introduction The difficulty in obtaining non-trivial size or depth lower bounds for computing functions using general Boolean circuits has led researchers into studying restricted models of Boolean computation [1]. Monotone Boolean circuits is an example of such a restricted model for which several interesting results have been obtained <ref> [9, 3, 14, 7] </ref>. The problem of computing the bipartite perfect matching function has received considerable attention in the past. Deciding whether a bipartite graph has a perfect matching is equivalent to computing the Boolean permanent of the adjacency matrix of the graph. <p> But no non-trivial lower bounds are known for the size or depth of general Boolean circuits that compute this function. For monotone Boolean circuits computing this function, a super-polynomial size lower bound [9] and a linear depth lower bound <ref> [7] </ref> are known. For constant depth unbounded fan-in circuits an exponential size lower bound for this function follows since it is constant depth reducible to PARITY [2].
Reference: [8] <author> A. A. Razborov, </author> <title> Lower bounds on the monotone complexity of some Boolean functions, </title> <journal> Soviet Mathematics Doklady 31 (1985), </journal> <pages> 354-357. </pages>
Reference: [9] <author> A.A. Razborov, </author> <title> A lower bound on the monotone network complexity of the logical permanent, </title> <booktitle> Mathematischi Zametki 37 (1985), </booktitle> <pages> 887-900. </pages>
Reference-contexts: 1 Introduction The difficulty in obtaining non-trivial size or depth lower bounds for computing functions using general Boolean circuits has led researchers into studying restricted models of Boolean computation [1]. Monotone Boolean circuits is an example of such a restricted model for which several interesting results have been obtained <ref> [9, 3, 14, 7] </ref>. The problem of computing the bipartite perfect matching function has received considerable attention in the past. Deciding whether a bipartite graph has a perfect matching is equivalent to computing the Boolean permanent of the adjacency matrix of the graph. <p> But no non-trivial lower bounds are known for the size or depth of general Boolean circuits that compute this function. For monotone Boolean circuits computing this function, a super-polynomial size lower bound <ref> [9] </ref> and a linear depth lower bound [7] are known. For constant depth unbounded fan-in circuits an exponential size lower bound for this function follows since it is constant depth reducible to PARITY [2]. <p> By defining monotone analogues of the counting classes ]P [18] and ]LOGCF L [21], this lower bound implies a separation between these two classes. Here ]LOGCF L is the counting version of the class LOGCF L. Such a separation also follows from the result of Razborov <ref> [9] </ref> since it leads to a super-polynomial size lower bound for monotone arithmetic circuits for computing the permanent. We also study the problem of computing the bipartite perfect matching function using (; ^) circuits. To our knowledge, circuits over (; ^) have not been studied in the past. <p> That is, P (B m ) is not necessarily multilinear, has exactly n! consistent monomials and possibly some inconsistent monomials. Note that bijective circuits for BPM need not be monotone due to the presence of inconsistent monomials. Thus, Razborov's super-polynomial size lower bound <ref> [9] </ref> does not apply. 8 4.1.1 Adaptation of Jerrum and Snir's Framework Throughout this section, we shall use the result that the consistent monomials of P (B m ) are monotone and therefore, any term computed at any node of a consistent parse-graph of B m is a conjunction of positive <p> But by theorem 5.1 and the circuit definition of m]LOGCF L, PERM 62 m]LOGCF L. Therefore, Theorem 5.3 m]LOGCF L is properly contained in m]P. We note that this separation also follows from Razborov's super-polynomial size lower bound for monotone circuits that compute the Boolean permanent <ref> [9] </ref>. Using the argument in the proof of theorem 5.1 above, Razborov's lower bound can be shown to imply that monotone arithmetic circuits for PERM must have at least super-polynomial size. <p> In fact, (; ^) circuits can compute all such functions, BPM in particular, within size polynomial in that of the full Boolean basis [6]. Thus, by Razbarov's super-polynomial size lower bound on monotone circuits for BPM <ref> [9] </ref>, it follows that (; ^) circuits are at least super-polynomially more powerful than monotone circuits for this function since they can compute it within polynomial size. <p> Lemma 6.3 combined with the super-polynomial size lower bound on monotone circuits for BPM <ref> [9] </ref> yields the following theorem: Theorem 6.1 (; ^) circuits without even recurrence require super-polynomial size to compute BPM. 16 Proof: Let C be a (; ^) circuit of size less than super-polynomial that computes BPM without even recurrence. <p> Then, by the above lemma, there is a monotone Boolean circuit of the same size for BPM. But this is impossible due to the lower bound by Razborov <ref> [9] </ref>. 2 We can improve this bound to exponential if (; ^) circuits are restricted further with multilinearity. Theorem 6.2 Multilinear (; ^) circuits without even recurrence require exponential size to compute BPM. <p> interesting to be able to prove a lower bound for BPM in this model. * Do consistent circuits require exponential size to compute the Boolean permanent? Answering this in the affirmative would have two interesting consequences: (i) since monotone circuits are necessarily consistent, this would improve Razborov's super-polynomial lower bound <ref> [9] </ref> to exponential; (b) it would establish that cancellations are crucial for computing the Boolean permanent within polynomial size, thereby allowing us to comprehend the power of negation at a finer granularity than previously possible. * We would like to be able to fill in the gaps in the table in
Reference: [10] <author> A. A. Razborov, </author> <title> Lower bounds for the size of bounded depth circuits with basis f; ^g, </title> <journal> Math. Notes of the Academy of Sciences of the USSR 41:4 (1987), </journal> <pages> 333-338. </pages>
Reference-contexts: We also study the problem of computing the bipartite perfect matching function using (; ^) circuits. To our knowledge, circuits over (; ^) have not been studied in the past. The only related result is by Razborov <ref> [10] </ref> who studied constant depth unbounded fanin circuits over f; ^; 1g and proved an exponential size lower bound for computing the MAJORITY function in this model.
Reference: [11] <author> W. L. Ruzzo, </author> <title> On uniform circuit complexity, </title> <booktitle> JCSS 22 (1981), </booktitle> <pages> 365-383. </pages>
Reference-contexts: Subsequently, Vinay [21] gave a circuit definition of ]LOGCF L, the counting 14 version of the class LOGCF L [19]. The circuit definition of ]LOGCF L stated below, follows from known simulations in <ref> [11, 19] </ref>. The uniformity condition used in these definitions is U D - uniformity, defined by Ruzzo [11]. <p> The circuit definition of ]LOGCF L stated below, follows from known simulations in [11, 19]. The uniformity condition used in these definitions is U D - uniformity, defined by Ruzzo <ref> [11] </ref>. Theorem 5.2 [19, 18] ]P is the class of functions computable by uniform families of arithmetic circuits within polynomial depth and polynomial degree. ]LOGCF L is the class of functions computable by uniform families of arithmetic circuits within polynomial size and polynomial degree.
Reference: [12] <author> M. Santha and C. </author> <title> Wilson Polynomial size constant depth circuits with a limited number of negations, </title> <booktitle> Proc. 8th STACS (1991), </booktitle> <pages> 228-237. </pages>
Reference-contexts: Consistent circuits can be viewed as Boolean circuits with restricted usage of negations, monotone Boolean circuits being trivially consistent. In the past, researchers have studied Boolean circuits with limited number of negations <ref> [12] </ref> to better understand the power of negations in Boolean computation. The study of consistent circuits is interesting for the same reason.
Reference: [13] <author> J. E. Savage, </author> <title> The complexity of computing, </title> <editor> R. E. </editor> <publisher> Kreiger Publishing Co., </publisher> <address> Malabar, Florida, </address> <year> 1987. </year>
Reference-contexts: Definition 2.3 A term t is said to be consistent if var (t + ) " var (t ) = ;. A parse-graph is consistent if the term it computes is consistent. Fact 2.1 <ref> [13] </ref> Each Boolean function f can be represented as a disjunction of its prime im-plicants, where each prime implicant is a term such that the set PI (f ) of prime implicants satisfy the following properties: (i) for all t 2 PI (f ), t is consistent and each literal appears <p> Definition 6.2 A (; ^) circuit C n is said to have even recurrence if there is a monomial that occurs an even number of times in P (C n ). We note that the (; ^) circuit based on the ring-sum expansion <ref> [13] </ref> of a Boolean function f is multilinear and has no even recurrence. The set of distinct monomials of P (C n ) can be partitioned into: those that occur an even number of times and those that do not.
Reference: [14] <author> E. Tardos, </author> <title> The gap between monotone and non-monotone circuit complexity is exponential, </title> <booktitle> Combinatorica 7 (1987), </booktitle> <pages> 141-142. </pages>
Reference-contexts: 1 Introduction The difficulty in obtaining non-trivial size or depth lower bounds for computing functions using general Boolean circuits has led researchers into studying restricted models of Boolean computation [1]. Monotone Boolean circuits is an example of such a restricted model for which several interesting results have been obtained <ref> [9, 3, 14, 7] </ref>. The problem of computing the bipartite perfect matching function has received considerable attention in the past. Deciding whether a bipartite graph has a perfect matching is equivalent to computing the Boolean permanent of the adjacency matrix of the graph.
Reference: [15] <author> L. Valiant, </author> <title> The complexity of computing the permanent, </title> <booktitle> Theoretical Computer Science 8 (1979), </booktitle> <pages> 189-201. </pages>
Reference: [16] <author> L. Valiant, </author> <title> Negation can be exponentially powerful, </title> <booktitle> Theoretical Computer Science 12 (1980), </booktitle> <pages> 303-314. </pages>
Reference-contexts: However, in the Booleanizing argument above we have observed that the Boolean circuit so obtained is not only monotone but also bijective leading to an exponential size lower bound. We note that this lower bound on arithmetic circuits computing PERM also does not follow from the work of Valiant <ref> [16] </ref>.
Reference: [17] <author> L. Valiant, </author> <title> Why is Boolean complexity theory difficult? In Boolean Function Complexity Theory, edited by M.S. Paterson, </title> <booktitle> London Mathematical Society. Lecture Notes Series 169, </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1992. </year>
Reference-contexts: This is not true for general Boolean circuits due to the laws of additive idempotence and absorption of a Boolean algebra. Thus intuitively, the bijectivity restriction allows us to view arithmetic computation as restricted Boolean computation. This view has also been suggested by Valiant <ref> [17] </ref>. In fact, an interesting consequence of the lower bound result using bijective circuits is an exponential size lower bound for computing the 0-1 permanent using monotone arithmetic circuits over (+; fi) with inputs fx i ji 1g, where each x i 2 f0; 1g.
Reference: [18] <author> H. Venkateswaran, </author> <title> Circuit definitions of nondeterministic complexity classes, </title> <journal> SIAM J. Comput. </journal> <month> 21 </month> <year> (1992) </year> <month> 655-670. </month>
Reference-contexts: By defining monotone analogues of the counting classes ]P <ref> [18] </ref> and ]LOGCF L [21], this lower bound implies a separation between these two classes. Here ]LOGCF L is the counting version of the class LOGCF L. <p> Proof: Suppose A m had smaller size. Then, the bijective Boolean circuit obtained by Booleaniz-ing A m , would compute BPM within size smaller than n (2 (n1) 1). But by theorem 4.1, this is impossible. 2 In <ref> [18] </ref>, Venkateswaran characterized popular counting classes such as ]P, in terms of arithmetic circuits. Subsequently, Vinay [21] gave a circuit definition of ]LOGCF L, the counting 14 version of the class LOGCF L [19]. The circuit definition of ]LOGCF L stated below, follows from known simulations in [11, 19]. <p> The circuit definition of ]LOGCF L stated below, follows from known simulations in [11, 19]. The uniformity condition used in these definitions is U D - uniformity, defined by Ruzzo [11]. Theorem 5.2 <ref> [19, 18] </ref> ]P is the class of functions computable by uniform families of arithmetic circuits within polynomial depth and polynomial degree. ]LOGCF L is the class of functions computable by uniform families of arithmetic circuits within polynomial size and polynomial degree.
Reference: [19] <author> H. Venkateswaran, </author> <title> Properties that characterize LOGCFL, </title> <journal> JCSS 43-2 (1991), </journal> <pages> 380-404. </pages>
Reference-contexts: But by theorem 4.1, this is impossible. 2 In [18], Venkateswaran characterized popular counting classes such as ]P, in terms of arithmetic circuits. Subsequently, Vinay [21] gave a circuit definition of ]LOGCF L, the counting 14 version of the class LOGCF L <ref> [19] </ref>. The circuit definition of ]LOGCF L stated below, follows from known simulations in [11, 19]. The uniformity condition used in these definitions is U D - uniformity, defined by Ruzzo [11]. <p> Subsequently, Vinay [21] gave a circuit definition of ]LOGCF L, the counting 14 version of the class LOGCF L [19]. The circuit definition of ]LOGCF L stated below, follows from known simulations in <ref> [11, 19] </ref>. The uniformity condition used in these definitions is U D - uniformity, defined by Ruzzo [11]. <p> The circuit definition of ]LOGCF L stated below, follows from known simulations in [11, 19]. The uniformity condition used in these definitions is U D - uniformity, defined by Ruzzo [11]. Theorem 5.2 <ref> [19, 18] </ref> ]P is the class of functions computable by uniform families of arithmetic circuits within polynomial depth and polynomial degree. ]LOGCF L is the class of functions computable by uniform families of arithmetic circuits within polynomial size and polynomial degree.
Reference: [20] <author> H. Venkateswaran, </author> <title> Two dynamic programming algorithms for which interpreted pebbling helps, </title> <booktitle> Information and Computation 92:2 (1991), </booktitle> <pages> 237-252. </pages>
Reference-contexts: Multilinearity of C n then follows by inductive hypothesis. C n is also consistent by a similar argument. The analysis for C n is similar. Clearly, C n and C n are both N C 1 circuits.2 We now show that the circuit implementation in <ref> [20] </ref> of the standard Cocke-Kasami-Younger algorithm for context-free language recognition is multilinear. For a fixed context-free grammar in Chomsky normal form, a Boolean circuit family fG n g that accepts the language generated by the grammar can be derived from the Cocke-Kasami Younger algorithm. <p> For a fixed context-free grammar in Chomsky normal form, a Boolean circuit family fG n g that accepts the language generated by the grammar can be derived from the Cocke-Kasami Younger algorithm. A gate in the circuit G n has one of the following forms <ref> [20] </ref>: * [A; i; j], for some nonterminal A and integers i and j such that 1 i j n.
Reference: [21] <author> V. Vinay, </author> <title> Counting auxilliary pushdown automata and semi-unbounded arithmetic circuits, </title> <booktitle> Proc. 6th annual IEEE Conference on Structure in Complexity Theory (1991), </booktitle> <pages> 270-284. 21 </pages>
Reference-contexts: By defining monotone analogues of the counting classes ]P [18] and ]LOGCF L <ref> [21] </ref>, this lower bound implies a separation between these two classes. Here ]LOGCF L is the counting version of the class LOGCF L. <p> Then, the bijective Boolean circuit obtained by Booleaniz-ing A m , would compute BPM within size smaller than n (2 (n1) 1). But by theorem 4.1, this is impossible. 2 In [18], Venkateswaran characterized popular counting classes such as ]P, in terms of arithmetic circuits. Subsequently, Vinay <ref> [21] </ref> gave a circuit definition of ]LOGCF L, the counting 14 version of the class LOGCF L [19]. The circuit definition of ]LOGCF L stated below, follows from known simulations in [11, 19]. The uniformity condition used in these definitions is U D - uniformity, defined by Ruzzo [11].
References-found: 21

