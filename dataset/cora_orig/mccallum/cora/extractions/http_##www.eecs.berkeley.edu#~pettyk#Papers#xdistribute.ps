URL: http://www.eecs.berkeley.edu/~pettyk/Papers/xdistribute.ps
Refering-URL: http://www.eecs.berkeley.edu/~pettyk/pubs.html
Root-URL: 
Email: Email: pettyk@eecs.berkeley.edu  
Title: XDISTRIBUTE A PROCESS DISTRIBUTION SYSTEM  
Author: Karl Petty Nick McKeown 
Address: Berkeley, CA 94720  Stanford, CA 94305-9030  
Affiliation: Department of Electrical Engineering and Computer Science University of California, Berkeley  Departments of Electrical Engineering and Computer Science Stanford University  
Abstract: Email: nickm@ee.stanford.edu Abstract - Powerful, single-user w orkstations - no w common in the w orkplace - spend most of their time sitting idle. In an attempt to find lo w-cost computational po wer researchers have attempted to take adv antage of these idle machines. Many systems ha ve been designed, ranging fr om simple process distribution like Condor [1], to completely new operating systems lik e Sprite [2] and Amoeba [3]. Although v ery powerful, these systems ar e out of r each of the typical user - they r equire special privileges, and require specialized installation, setup and maintenance. We propose a simpler way to utilize these idle machines using a r emote execution en vironment. We ha ve written an application, xdistribute, that is extremely portable, simple to use, requires no changes to any source code, leaves no residual dependencies on the local machine, and can be used by any user without modification to the operating system or installation of any network daemons.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Litzkow, M. </author> <title> Livny , Experience W ith the Condor Distributed Batc h System, </title> <booktitle> Proc. of the IEEE Workshop on Experimental Distributed Systems, </booktitle> <address> Huntsville, Al., </address> <month> October </month> <year> 1990. </year>
Reference-contexts: The process is not moved to the other machine by the process distribution scheme; these systems typically require a uniform file system so that all programs are accessible by all machines in the netw ork. Prototype process distribution systems of this type include Condor <ref> [1] </ref>, Butler [5], Utopia [9], and the Portable Batch System [16]. Commercial systems include TaskBroker by Hewlett Packard [18] and Jobware by Ockham Technology [19]. <p> These systems are the process distrib ution systems of Condor <ref> [1] </ref>, Utopia [9], and Butler [5]. The key categories of features that we compare are ease of setup, distrib ution capabilities, and how considerate the systems are to other users. The comparisons are summarized in Table 1.
Reference: [2] <author> F. Douglis , J . Ousterhout, </author> <title> Transparent process migration: Design alternatives and the Sprite implementation, </title> <journal> Software Practice and Experience, </journal> <volume> 21(8):757785, </volume> <month> August </month> <year> 1991. </year>
Reference-contexts: A few examples of completely distributed operating systems are Accent [10], Amoeba [3], Charlotte [11], Linda [12], Sprite <ref> [2] </ref>, and the V System [13]. GLUnix [14] is a compromise between a distributed operating system and a process distrib ution facility.
Reference: [3] <author> S. Mullender, B. van Rossum, A. Tanenbaum, R. van Renesse, H. van Staveren, </author> <title> Amoeba: A distributed operating system for the 1990s, </title> <booktitle> Computer, </booktitle> <address> 23(5):4453, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: A few examples of completely distributed operating systems are Accent [10], Amoeba <ref> [3] </ref>, Charlotte [11], Linda [12], Sprite [2], and the V System [13]. GLUnix [14] is a compromise between a distributed operating system and a process distrib ution facility.
Reference: [4] <author> M. Nuttall, </author> <title> Survey of Systems Providing Process or Object Migration, </title> <type> Technical Report 94/10, </type> <institution> Department of Computing, Imperial College, </institution> <address> London, England, U.K., </address> <month> May </month> <year> 1994. </year>
Reference: [5] <author> D. A. Nic hols, </author> <title> Using idle workstations in a shared computing environment, </title> <booktitle> Proc. of the 11th ACM Symposium on Operating System Principles, </booktitle> <pages> pages 512, </pages> <address> Austin, Tx., </address> <month> November </month> <year> 1987. </year> <institution> The Association for Computing Machinery. </institution>
Reference-contexts: The process is not moved to the other machine by the process distribution scheme; these systems typically require a uniform file system so that all programs are accessible by all machines in the netw ork. Prototype process distribution systems of this type include Condor [1], Butler <ref> [5] </ref>, Utopia [9], and the Portable Batch System [16]. Commercial systems include TaskBroker by Hewlett Packard [18] and Jobware by Ockham Technology [19]. <p> These systems are the process distrib ution systems of Condor [1], Utopia [9], and Butler <ref> [5] </ref>. The key categories of features that we compare are ease of setup, distrib ution capabilities, and how considerate the systems are to other users. The comparisons are summarized in Table 1.
Reference: [6] <author> R. H. Arpaci, A. C. Dusseau, A. M. Vahdat, L. T. Liu, T. E. Anderson, D. A. Patterson, </author> <title> The Interaction of P arallel and Sequential W orkloads on a Network of W orkstations, </title> <type> Technical Report CS-94-838, </type> <institution> Department of Electrical Engineering and Computer Science , University of California, Berkeley, </institution> <year> 1994. </year>
Reference: [7] <author> M.M. Theimer , K. A. Lantz, </author> <title> F inding Idle Mac hines in a W orkstation-Based Distributed System, </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 15(11) </volume> <pages> 1444-1457, </pages> <month> November </month> <year> 1989. </year>
Reference: [8] <author> F. Douglis, J. K. Ousterhout, M. F. Kaashoek, A. S . Tanenbaum, </author> <title> A comparison of two distributed systems; Amoeba and Sprite, </title> <booktitle> Computing Systems, </booktitle> <address> 4(4):353385, </address> <month> Fall </month> <year> 1991. </year>
Reference-contexts: We present a brief overview of these tw o techniques and cite se veral implementations. We refer the reader to <ref> [8] </ref> for a discussion of the features of distrib uted operating systems, and to [9] for the details of process distribution systems. 2.1 The Operating System Approach In distributed operating systems an entire process is mo ved to a remote processor and restarted.
Reference: [9] <author> S. Zhou, J. Wang, X. Zheng, P. Delisle, </author> <title> UTOPIA: a load sharing facility for large, </title> <booktitle> heterogeneous distributed computer systems , Software Practice and Experience , 23(12):1305 1336, </booktitle> <month> December </month> <year> 1993. </year>
Reference-contexts: We present a brief overview of these tw o techniques and cite se veral implementations. We refer the reader to [8] for a discussion of the features of distrib uted operating systems, and to <ref> [9] </ref> for the details of process distribution systems. 2.1 The Operating System Approach In distributed operating systems an entire process is mo ved to a remote processor and restarted. Moving a process requires that both its code and data be migrated to the ne w processor. <p> The process is not moved to the other machine by the process distribution scheme; these systems typically require a uniform file system so that all programs are accessible by all machines in the netw ork. Prototype process distribution systems of this type include Condor [1], Butler [5], Utopia <ref> [9] </ref>, and the Portable Batch System [16]. Commercial systems include TaskBroker by Hewlett Packard [18] and Jobware by Ockham Technology [19]. While these systems and less complex than the operating system approach, they do require the installation of network daemons on each machine participating in the process migration scheme. <p> In situations like this the probability of good administrative support, and the installation of network daemons, is minimal. * In the case of a decentralized scheduler <ref> [9] </ref> these daemons respond to broadcast queries. 5 custom built simulation routines. We feel that this is a lar ge enough set of jobs to justify a user level tool. Jobs that require synchronization can t use xdistribute, and typically need tightly coupled processors with message passing support. <p> These systems are the process distrib ution systems of Condor [1], Utopia <ref> [9] </ref>, and Butler [5]. The key categories of features that we compare are ease of setup, distrib ution capabilities, and how considerate the systems are to other users. The comparisons are summarized in Table 1.
Reference: [10] <author> E. R. Za yas, </author> <title> Attacking the process migration bottlenec k, </title> <booktitle> Proc. of the 11th A CM Symposium on Operating System Principles, </booktitle> <pages> pages 1324, </pages> <address> Austin, Tx., </address> <month> November </month> <year> 1987. </year> <institution> The Association for Computing Machinery. </institution>
Reference-contexts: A few examples of completely distributed operating systems are Accent <ref> [10] </ref>, Amoeba [3], Charlotte [11], Linda [12], Sprite [2], and the V System [13]. GLUnix [14] is a compromise between a distributed operating system and a process distrib ution facility.
Reference: [11] <author> Y. Artsy , R. F inkel, </author> <title> Designing a process migration facility: </title> <booktitle> the Charlotte experience , Computer, </booktitle> <address> 22(9):4756, </address> <month> September </month> <year> 1989. </year>
Reference-contexts: A few examples of completely distributed operating systems are Accent [10], Amoeba [3], Charlotte <ref> [11] </ref>, Linda [12], Sprite [2], and the V System [13]. GLUnix [14] is a compromise between a distributed operating system and a process distrib ution facility.
Reference: [12] <author> N. </author> <title> Carriero , D . Gelernter , The S/Net s Linda K ernel, </title> <journal> ACM T ransactions on Computer Systems, </journal> <volume> 4(2):110129, </volume> <month> May </month> <year> 1986. </year>
Reference-contexts: A few examples of completely distributed operating systems are Accent [10], Amoeba [3], Charlotte [11], Linda <ref> [12] </ref>, Sprite [2], and the V System [13]. GLUnix [14] is a compromise between a distributed operating system and a process distrib ution facility.
Reference: [13] <author> M. M. Theimer, K. A. Lantz, D . R. Cheriton, </author> <title> Preemptable remote execution facilities for the V-system, </title> <booktitle> Proceedings of the 10th Symposium on Operating System Principles , pages 212. The Association for Computing Machinery, </booktitle> <month> December </month> <year> 1985. </year>
Reference-contexts: A few examples of completely distributed operating systems are Accent [10], Amoeba [3], Charlotte [11], Linda [12], Sprite [2], and the V System <ref> [13] </ref>. GLUnix [14] is a compromise between a distributed operating system and a process distrib ution facility.
Reference: [14] <author> R. W ahbe, S . Lucco , T. Anderson, S . Graham, </author> <title> Efficient softw are-based fault isolation, </title> <booktitle> Proc. of the F ourteenth A CM Symposium on Operating System Principles , pages 203216. The Association for Computing Machinery, </booktitle> <month> December </month> <year> 1993. </year>
Reference-contexts: A few examples of completely distributed operating systems are Accent [10], Amoeba [3], Charlotte [11], Linda [12], Sprite [2], and the V System [13]. GLUnix <ref> [14] </ref> is a compromise between a distributed operating system and a process distrib ution facility. Written as a layer of software that runs on top of an e xisting operating system, * GLUnix can make a network of computers look like a global operating system by catching system calls.
Reference: [15] <author> P. Mehra, B. W. Wah, </author> <title> Automated Learning of Workload Measures for Load Balancing on a Distributed System, </title> <booktitle> Proc. of the 1993 International Conference on P aralled Processing , pages 263-270, section III. </booktitle>
Reference: [16] <author> R. L. Henderson, D. Tweten, </author> <title> Portable batch system: Requirements specification, </title> <type> Technical report, </type> <institution> NAS Systems Division, NASA Ames Researc h Center, Moffett F ield, </institution> <address> CA, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: Prototype process distribution systems of this type include Condor [1], Butler [5], Utopia [9], and the Portable Batch System <ref> [16] </ref>. Commercial systems include TaskBroker by Hewlett Packard [18] and Jobware by Ockham Technology [19]. While these systems and less complex than the operating system approach, they do require the installation of network daemons on each machine participating in the process migration scheme.
Reference: [17] <author> J.H. </author> <title> How ard, M.L. </title> <editor> Kazar , S .G. Menees , D .A. Nic hols, M. Satyanara yanan, R.N . Side-botham, </editor> <title> M.J . W est, Scale and performance in a distributed file system, </title> <journal> ACM T ransac-tions on Computer Systems, </journal> <volume> 6(1):5181, </volume> <month> Feb </month> <year> 1988. </year>
Reference-contexts: However, Condor is unable to k eep track of inter process communications, process signals or file operations that read and write to the same file. Butler was developed to work on top of the Andre w File System <ref> [17] </ref>. Since this system provides each machine with a uniform vie w of the file system, Butler does not need to w orry about moving processes or files to the remote machine.
Reference: [18] <institution> HP Task Broker for HP 9000 Servers and Workstations, HP Product Brief. </institution>
Reference-contexts: Prototype process distribution systems of this type include Condor [1], Butler [5], Utopia [9], and the Portable Batch System [16]. Commercial systems include TaskBroker by Hewlett Packard <ref> [18] </ref> and Jobware by Ockham Technology [19]. While these systems and less complex than the operating system approach, they do require the installation of network daemons on each machine participating in the process migration scheme.
Reference: [19] <institution> Ockham Technology; Jobware, </institution> <note> http://www.ockham.be/jobware.htm </note>
Reference-contexts: Prototype process distribution systems of this type include Condor [1], Butler [5], Utopia [9], and the Portable Batch System [16]. Commercial systems include TaskBroker by Hewlett Packard [18] and Jobware by Ockham Technology <ref> [19] </ref>. While these systems and less complex than the operating system approach, they do require the installation of network daemons on each machine participating in the process migration scheme.
References-found: 19

