URL: http://www.cs.ucsb.edu/TRs/techreports/TRCS93-11.ps
Refering-URL: http://www.cs.ucsb.edu/TRs/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Resource Allocation on Dynamic Conflict Graphs  
Author: Manhoi Choy and Ambuj K. Singh 
Keyword: Index Terms: Distributed Algorithms, Dynamic Grpahs, Graph Coloring, Resource Allo cation  
Address: Santa Barbara, California 93106  
Affiliation: Department of Computer Science University of California at Santa Barbara  
Abstract: The sharing of resources among processes in a distributed system leads to a conflict graph that may change with time. Resource allocation over a static conflict graph (also called the dining philosophers problem) has been studied extensively. We seek to solve resource allocation on dynamic conflict graphs by using existing algorithms that work only for static conflict graphs. In the process we define the notion of a snapshot of a dynamic graph, specify its properties, and show how it can be combined with static graph algorithms to yield efficient solutions for dynamic graphs. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Y. Afek, B. Awerbuch, and E. Gafni. </author> <title> Applying static network protocols to dynamic networks. </title> <booktitle> In Proceedings of the 28th Annual Symposium on Foundations of Computer Science, IEEE, </booktitle> <pages> pages 358-370, </pages> <year> 1987. </year>
Reference-contexts: Existing techniques to solve these problems have relied on some form of a reset or restart after each change in the underlying network <ref> [1, 3] </ref>. Once the network stablizes for a sufficiently long period of time, meaningful computations can be carried out. We are investigating whether some resets or restarts can be avoided if more information is available about the kind of computation being performed.
Reference: [2] <author> B. Awerbuch and M. Saks. </author> <title> A dining philosophers algorithm with polynomial response time. </title> <booktitle> In Proceedings of the 31st Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 65-74, </pages> <year> 1990. </year>
Reference-contexts: Since the resources are usually used in an exclusive manner, efficient resource allocation algorithm are needed to minimize the amount of waiting and to improve the throughput of the system. The distributed job scheduling problem <ref> [2] </ref> is an abstraction of the resource allocation problem in distributed systems. This problem consists of a number of processes and a number of resources. From time to time a process issues a job request for the exclusive usage of a subset of the resources. <p> However, the response time and the message complexity of their solution are both O (ffi logffi+1 ). Awerbuch and Saks <ref> [2] </ref> achieved a breakthrough in response time. They used a distributed queue to solve the distributed job scheduling problem achieving a response time of O (ffi 2 log N ) and a message complexity of O (ffi 2 log N ). <p> The response time of our algorithm improves that of the best known result, due to Awerbuch and Saks <ref> [2] </ref>, when ffi is less than log N , and the message complexity of our algorithm improves that of Awerbuch and Saks's algorithm by a factor of log N . Most importantly however, our algorithm minimizes the dependence of the complexity measures on the global parameters.
Reference: [3] <author> B. Awerbuch and M. Sipser. </author> <title> Dynamic networks are as fast as static networks. </title> <booktitle> In Proceedings of the 28th Annual Symposium on Foundations of Computer Science, IEEE, </booktitle> <pages> pages 206-220, </pages> <year> 1988. </year>
Reference-contexts: Existing techniques to solve these problems have relied on some form of a reset or restart after each change in the underlying network <ref> [1, 3] </ref>. Once the network stablizes for a sufficiently long period of time, meaningful computations can be carried out. We are investigating whether some resets or restarts can be avoided if more information is available about the kind of computation being performed.
Reference: [4] <author> J. Bar-Ilan and D. Peleg. </author> <title> Distributed resource allocation algorithms. </title> <booktitle> In 6th International Workshop on Distributed Algorithms, </booktitle> <pages> pages 277-291, </pages> <year> 1992. </year>
Reference-contexts: Recently, Bar-Ilan and Peleg <ref> [4] </ref> modified the distributed queue algorithm of Awerbuch and Saks and obtained an algorithm for the distributed job scheduling problem with a response time of O (ffi log N ) and a message complexity of O (ffi log N ) in a synchronous complete communication network.
Reference: [5] <author> K. M. Chandy and L. Lamport. </author> <title> Distributed snapshots: Determining global states of distributed systems. </title> <journal> ACM Transaction on Computer Systems, </journal> <volume> 3(1) </volume> <pages> 63-75, 85. </pages>
Reference-contexts: The new technique is based on the idea of snapshots. This terminology should not be confused with the snapshot of a distributed computation as considered by Chandy and Lamport <ref> [5] </ref>. In the problem that they consider, the goal is to compute a possible global state of a given underlying distributed computation occurring over a static graph of processes. On the other hand, a snapshot in our terminology is a stable subgraph of a dynamic graph of processes.
Reference: [6] <author> K. M. Chandy and J. Misra. </author> <title> Parallel Program Design: A Foundation. </title> <publisher> Addison Wesley Pub. Co., </publisher> <address> Reading, Mass., </address> <year> 1988. </year>
Reference-contexts: The degree of the conflict graph, denoted by ffi, is the maximum among all the ffi p 's. Since job requests may enter the system at any time, conflict graphs are dynamic. This is in contrary to the assumption of the dining/drinking philosophers problems <ref> [6, 8, 10] </ref> in which the conflict graph is fixed in advance. Although the conflict graph changes with time, the number of jobs in the system is bounded by the total number of processes N at any time. <p> Though any dining philosophers solution can be used in algorithm J1, the setting of the initial state requires special care. For example, consider the dining philosophers solution due to Chandy and Misra <ref> [6] </ref>. As a part of the initial state, this solution requires an acyclic graph connecting all the processes. The process IDs can be used to obtain this initial acyclic graph by directing the edge between two processes towards the one with the higher ID.
Reference: [7] <author> M. Choy and A. K. Singh. </author> <title> Efficient fault tolerant algorithms for resource allocation in distributed systems. </title> <booktitle> In Proceedings of the 24th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 593-602, </pages> <year> 1992. </year> <month> 19 </month>
Reference-contexts: Awerbuch and Saks [2] achieved a breakthrough in response time. They used a distributed queue to solve the distributed job scheduling problem achieving a response time of O (ffi 2 log N ) and a message complexity of O (ffi 2 log N ). Choy and Singh <ref> [7] </ref> presented a solution to the dining philosophers problem with a response time of O (ffi 2 ) and a message complexity of O (ffi) assuming an initial (ffi + 1)-coloring, that assigned a legal color in the range 0 ffi to each node of the conflict graph. <p> In particular, the algorithm obtained by combining the (ffi + 1)-coloring algorithm of Goldberg, Plotkin, and Shannon [9] with a dining philosophers algorithm in <ref> [7] </ref> has a response time of O ((ffi 3 + ffi log fl N )- + O (ffi 2 )t ) and a message complexity of O (ffi 2 + ffi log fl N ). 4.1 Algorithm J 1 execution of a process at idle and trying is as defined by <p> Consequently, snapshot algorithm S2 is used at trying 1 . A brief account of the (ffi + 1)-coloring is given below. The dining philosophers algorithm used here is algorithm 1 of <ref> [7] </ref> and its description is omitted. 4.2.1 (ffi + 1)-coloring The (ffi + 1)-coloring algorithm used here is based on the algorithm by Goldberg, Plotkin, and Shannon [9]. <p> of Theorem 13. 2 Corollary 1 The response time of algorithm J2 is O (ffi 3 +ffi log fl N ) and the message complexity is O (ffi 2 + ffi log fl N ) when the (ffi + 1)-coloring algorithm in Figure 6 and the dining philosophers algorithm in <ref> [7] </ref> are used. Note that if only one snapshot is used and the dining philosophers algorithm is invoked after (ffi + 1)-coloring at executing 1 then the total response time would be ffi fl ( response time of (ffi + 1)-coloring + response time of dining philosophers).
Reference: [8] <author> E. W. Dijkstra. </author> <title> Solution of a problem in concurrent programming control. </title> <journal> Communication of ACM., </journal> <volume> 8(9):569, </volume> <year> 1965. </year>
Reference-contexts: The degree of the conflict graph, denoted by ffi, is the maximum among all the ffi p 's. Since job requests may enter the system at any time, conflict graphs are dynamic. This is in contrary to the assumption of the dining/drinking philosophers problems <ref> [6, 8, 10] </ref> in which the conflict graph is fixed in advance. Although the conflict graph changes with time, the number of jobs in the system is bounded by the total number of processes N at any time.
Reference: [9] <author> A. V. Goldberg, S. A. Plotkin, and G. E. Shannon. </author> <title> Parallel symmetry-breaking in sparse graphs. </title> <booktitle> In Proceedings of the 19th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 315-324, </pages> <year> 1987. </year>
Reference-contexts: When a job is scheduled, a color is chosen and assigned to the corresponding node so that the colors between neighboring nodes are different. Since an (log fl N ) lower bound exists for the (ffi + 1)-coloring problem <ref> [9] </ref>, any job scheduling algorithm also has an (log fl N ) response time. In practice, jobs usually request for a small number of resources and the degree of the resulting conflict graph is small compared with the value of N . <p> In particular, the algorithm obtained by combining the (ffi + 1)-coloring algorithm of Goldberg, Plotkin, and Shannon <ref> [9] </ref> with a dining philosophers algorithm in [7] has a response time of O ((ffi 3 + ffi log fl N )- + O (ffi 2 )t ) and a message complexity of O (ffi 2 + ffi log fl N ). 4.1 Algorithm J 1 execution of a process at <p> A brief account of the (ffi + 1)-coloring is given below. The dining philosophers algorithm used here is algorithm 1 of [7] and its description is omitted. 4.2.1 (ffi + 1)-coloring The (ffi + 1)-coloring algorithm used here is based on the algorithm by Goldberg, Plotkin, and Shannon <ref> [9] </ref>. However, our algorithm (shown in Figure 6) is implemented in a distributed message passing environment instead of a shared memory environment and the validity of a coloring is slightly different. A node invoking our coloring algorithm has two parameters R and used such that jRj + jusedj ffi. <p> ; j 2 [1::jRj]; = fl phase 3 fl = obtain 3-colorings from the 6-colorings; = fl phase 4 fl = reduce the 3-colorings to a valid (ffi + 1)-coloring that does not use colors in set used; In the second phase of the algorithm, the 6-coloring algorithm described in <ref> [9] </ref> is executed on each pseudo forest G k . <p> concatenation of ith bit of its previous color and the binary representation of i, where i is the least significant bit of p's color that is different from the corresponding bit of the color of p's parent. (For a root node, i is taken as zero.) It is shown in <ref> [9] </ref> that a 6-coloring is obtained for each pseudo forest after the recoloring procedure is repeated for O (log fl N ) steps where N is the maximum value of the IDs.
Reference: [10] <author> N. Lynch. </author> <title> Fast allocation of nearby resources in a distributed system. </title> <booktitle> In Proceedings of the 12th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 70-81, </pages> <year> 1980. </year>
Reference-contexts: The degree of the conflict graph, denoted by ffi, is the maximum among all the ffi p 's. Since job requests may enter the system at any time, conflict graphs are dynamic. This is in contrary to the assumption of the dining/drinking philosophers problems <ref> [6, 8, 10] </ref> in which the conflict graph is fixed in advance. Although the conflict graph changes with time, the number of jobs in the system is bounded by the total number of processes N at any time. <p> It is therefore desirable to have solutions to the distributed job scheduling problem whose response time depends on ffi but not on N . In the existing literature on the dining philosophers problem, Lynch <ref> [10] </ref> is perhaps the first one who considered response time explicitly. Lynch's algorithm, which uses a precomputed edge coloring, achieves a response time of O (c ffi ) where c is the number of colors used to color the edges of the underlying conflict graph.
Reference: [11] <author> B. Meyer. </author> <title> Systematic concurrent object-oriented programming. Interactive Software Engineering Inc., </title> <type> Technical Report TR-EI-37/SC, </type> <year> 1993. </year>
Reference-contexts: The basic requirement of the problem is that every job must be started eventually. The job scheduling problem is crucial in the efficient implementation of concurrent object-oriented systems. For example, in extending the object oriented language Eiffel for concurrent execution <ref> [11] </ref>, resource requesters (called features in Eiffel or methods in object oriented database systems) may be concurrently requesting for the use of a set of objects to start their execution. The required objects must then be allocated to the requesters in an exclusive manner.
Reference: [12] <author> I. Page, T. Jacob, and E. Chern. </author> <title> Fast Algorithms for Distributed Resource Allocation. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 4(2), </volume> <pages> pages 188-197, </pages> <year> 1993. </year>
Reference-contexts: Another recent solution to the dining philosophers problem 2 by Page, Jacob, and Chern <ref> [12] </ref> achieves a response time of O (ffi 2 ) if the dependence on is ignored. In this paper, we present a new method for solving dynamic graph problems in which the input graph is allowed to change dynamically. The new technique is based on the idea of snapshots.
Reference: [13] <author> E. Styer and G. Peterson. </author> <title> Improved algorithms for distributed resource allocation. </title> <booktitle> In Proceedings of the 7th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 105-116, </pages> <year> 1988. </year> <month> 20 </month>
Reference-contexts: Lynch's algorithm, which uses a precomputed edge coloring, achieves a response time of O (c ffi ) where c is the number of colors used to color the edges of the underlying conflict graph. The algorithm has a message complexity of O (ffi). Styer and Peterson <ref> [13] </ref> extended the edge coloring algorithm of Lynch and gave solutions in which the longest waiting chain of processes that can exist in the system is of O (log ffi). However, the response time and the message complexity of their solution are both O (ffi logffi+1 ).
References-found: 13

