URL: http://www.cs.umn.edu/Users/dept/users/myriad/nda93.ps.Z
Refering-URL: http://www.cs.umn.edu/Users/dept/users/myriad/
Root-URL: http://www.cs.umn.edu
Title: Entity Identification in Database Integration: An Evidential Reasoning Approach  
Author: Ee-Peng Lim, Jaideep Srivastava 
Address: Minneapolis, MN 55455  
Affiliation: Department of Computer Science University of Minnesota  
Abstract: Entity identification is the problem of matching object instances from different databases which correspond to the same real-world entity. In this paper, we present a 2-step entity identification process in which attributes for matching tuples may be missing in certain tuples, and thus need to be derived prior to the matching. To match tuples, we require identity rules which specify the conditions to be satisfied by a pair of tuples, from different databases, before they can be considered as modeling the same real-world entity. We also introduce ILFD's (instance-level functional dependencies) as a form of inference rules which derive the missing identifying attributes. In order to provide more interesting integrated results to the users, we allow both identity rules and ILFD's to contain indefiniteness represented as necessary and possible support information. Based on support logic programming[2], we develop an approach to perform reasoning on the local databases using identity rules and ILFD's. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Ahmed, P.D. Smedt, W. Du, W. Kent, M. Ketabchi, W.A. Litwin, A. Rafii, and M-C. Shan. </author> <title> The pegasus heterogeneous multidatabase system. </title> <booktitle> IEEE Computer, </booktitle> <month> December </month> <year> 1991. </year>
Reference-contexts: Most entity identification techniques proposed have not explicitly modeled the concept of identity rules <ref> [5, 1, 15] </ref>. Other proposed techniques have assumed the existence of only one identity rule [12, 10].
Reference: [2] <author> J.F. Baldwin. </author> <title> Evidential support logic programming. </title> <journal> Fuzzy Sets and Systems, </journal> <volume> 24 </volume> <pages> 1-26, </pages> <year> 1987. </year>
Reference-contexts: However, only definite knowledge is employed in the entity identification process. In this paper, we extend our approach to allow incomplete and uncertain knowledge to be used in the entity identification process. We borrow the representation and inference framework from support logic programming <ref> [2] </ref> which is a well-accepted approach for reasoning with uncertainty. Multiple identity rules and derivation rules for identifying attributes are attached with various believability supports. Each database tuple is represented as a set of binary evidential facts, each of which relates the tuple to a particular attribute value. <p> To capture indefinite information, the standard logic formalism is not sufficient. A number of formalisms have been proposed for reasoning based on evidences <ref> [2, 16] </ref>. The one we adopt is the formalism of logic with supports [2]. Logic with supports is a generalization of standard logic. <p> To capture indefinite information, the standard logic formalism is not sufficient. A number of formalisms have been proposed for reasoning based on evidences [2, 16]. The one we adopt is the formalism of logic with supports <ref> [2] </ref>. Logic with supports is a generalization of standard logic. While in standard logic, a conclusion can be derived inferentially from a set of axioms, a conclusion in logic with supports is "supported to a certain degree" by evidences from various sources. <p> The function that allocates these mass values is called the mass function (m)[13]. A mass function satisfies the following properties: m (OE) = 0 P The mass value assignment can essentially be interpreted using a group voting model <ref> [2] </ref>. In this model, the mass value assigned to a subset of val-ues denotes the fraction of votes given to the set. In some cases, the votes may be cast by a group of people who have some knowledge about the attributes of a database instance. <p> In the following, we adopt an interpretation in our reasoning process similar to the procedural semantic interpretation of support logic programming <ref> [2] </ref> and Prolog. Several rules of determining the support pairs for a proof path, and combining them to give an overall support, have been given in [2]. We present some of them here to give a brief description of the reasoning process in support logic programming. 1. <p> In the following, we adopt an interpretation in our reasoning process similar to the procedural semantic interpretation of support logic programming <ref> [2] </ref> and Prolog. Several rules of determining the support pairs for a proof path, and combining them to give an overall support, have been given in [2]. We present some of them here to give a brief description of the reasoning process in support logic programming. 1. <p> The second sub-task determines the matched tuples from two database sources using identity rules. Our approach uses the support logic programming paradigm and the Dempster-Shafer theory of evidence in both the representation and inference mechanism <ref> [2, 13] </ref>. The amount of semantic information, i.e. ILFDs and identity rules, for performing entity identification can vary depending on the database administrators' understanding about the domains of attributes and the entities in the databases.
Reference: [3] <author> C. Batini, M. Lenzerini, and S.B. Navathe. </author> <title> A comparative analysis of methodologies for database schema integration. </title> <journal> ACM Computing Surveys, </journal> <volume> 18(4), </volume> <month> December </month> <year> 1986. </year>
Reference-contexts: Schema-level incompatibilities can be categorized into domain mismatch, schema mismatch and constraint mismatch. Approaches to resolve schema-level incompatibilities include <ref> [3, 4] </ref>. 2. Instance-level Incompatibility: This refers to the conflicts that arise when the data stored in multiple databases, modeling same real-world entities, has to be merged. Two problems that occur are the entity identification and the attribute value conflict resolution problems.
Reference: [4] <author> E. Bertino. </author> <title> Integration of heterogeneous data repositories by using object-oriented views. </title> <booktitle> In Proc. of the 1st Int'l Workshop on Interoperability in Multidatabase Systems, </booktitle> <year> 1991. </year>
Reference-contexts: Schema-level incompatibilities can be categorized into domain mismatch, schema mismatch and constraint mismatch. Approaches to resolve schema-level incompatibilities include <ref> [3, 4] </ref>. 2. Instance-level Incompatibility: This refers to the conflicts that arise when the data stored in multiple databases, modeling same real-world entities, has to be merged. Two problems that occur are the entity identification and the attribute value conflict resolution problems.
Reference: [5] <author> A. Chatterjee and A. Segev. </author> <title> Data manipulation in heterogeneous databases. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 20(4), </volume> <month> December </month> <year> 1991. </year>
Reference-contexts: Note that the above methodology of resolving instance-level problems distinguishes our work from most others <ref> [5, 14] </ref>. We assume that database administrators can provide some attributes which are likely to contain reliable values for entity identification and they do not need to undergo the subsequent attribute value conflict resolution step. <p> Furthermore, these approaches do not consider situations when some attributes useful for identifying database instances do not exist in the original databases. Recently, some new approaches to entity identification have been proposed <ref> [12, 5, 15] </ref>. Wang and Madnick [15] recognized the need to derive attributes useful for identifying database instances, and proposed the use of heuristic rules to suggest probable values for these attributes, thus reducing the number of tuple pairs to be matched. <p> However, the ap proach does not provide a metric to measure the uncer-tainty associated with the (approximately) matched result. A probabilistic approach to entity identification has been proposed by Chatterjee and Segev <ref> [5] </ref>, where all common attributes between two relations are used to determine matched tuples. Probability is assigned as a measure of confidence in the matching. The approach, however, does not consider deriving missing attributes useful for entity identification. <p> Most entity identification techniques proposed have not explicitly modeled the concept of identity rules <ref> [5, 1, 15] </ref>. Other proposed techniques have assumed the existence of only one identity rule [12, 10].
Reference: [6] <author> U. Dayal and H-Y. Hwang. </author> <title> View definition and generalization for database integration in multi-base: A system for heterogeneous distributed databases. </title> <journal> IEEE Trans. Software Eng., </journal> <volume> SE-10(6), </volume> <month> November </month> <year> 1984. </year>
Reference-contexts: We further consider situations in which attributes participating in the identity rule do not exist in the stored database. Early approaches to database integration assume the existence of a common key between relations from different databases, and thus entity identification is straightforward <ref> [6, 7] </ref>. However, this is only true when the common key is indeed the key in the integrated world of entities [10]. Furthermore, these approaches do not consider situations when some attributes useful for identifying database instances do not exist in the original databases.
Reference: [7] <author> L.G. DeMichiel. </author> <title> Resolving database incompatibility:an approach to performing relational operations over mismatched domains. </title> <journal> IEEE Trans. on Knowledge and Data Engineering, </journal> <volume> 1(4), </volume> <year> 1989. </year>
Reference-contexts: We further consider situations in which attributes participating in the identity rule do not exist in the stored database. Early approaches to database integration assume the existence of a common key between relations from different databases, and thus entity identification is straightforward <ref> [6, 7] </ref>. However, this is only true when the common key is indeed the key in the integrated world of entities [10]. Furthermore, these approaches do not consider situations when some attributes useful for identifying database instances do not exist in the original databases.
Reference: [8] <author> W. Kent. </author> <title> The breakdown of the information model in mdbss. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 20(4), </volume> <month> De-cember </month> <year> 1991. </year>
Reference-contexts: A pair of tuples, from different databases, are said to match if they represent the same real-world entity. 1.1 Related Work Kent described entity identification problem as part of the breakdown of the information model in multidatabases <ref> [8] </ref>. One of his suggested solutions is to keep a table of correspondences between object instances from different databases. He also discussed the possibility of comparing reliable identifiers of instances in order to determine their matchings. In our approach, we model the reliable identifier concept as an identity rule.
Reference: [9] <author> S.K. Lee. </author> <title> Imprecise and uncertain information in databases: An evidential approach. </title> <booktitle> In Proceedings of the 8th Int'l Conf. on Data Engineering, </booktitle> <pages> pages 614-621, </pages> <year> 1992. </year>
Reference: [10] <author> E-P. Lim, J. Srivastava, S. Prabhakar, and J. Richardson. </author> <title> Entity identification problem in database integration. </title> <booktitle> Proceedings of IEEE Data Engineering Conference, </booktitle> <year> 1993. </year>
Reference-contexts: On the other hand, instance-level incompatibilities need resolution whenever local database instances change. In an environment where the local databases are autonomous and continue to support their pre-existing applications, the database instances are not integrated in one shot <ref> [10] </ref>. Instead, instance integration is built into the query processing mechanism, as is done on a query basis for the qualifying instances. This can make instance integration a rather frequent operation. requires some knowledge about the schema elements from each participating database, and their interrelationships. <p> Early approaches to database integration assume the existence of a common key between relations from different databases, and thus entity identification is straightforward [6, 7]. However, this is only true when the common key is indeed the key in the integrated world of entities <ref> [10] </ref>. Furthermore, these approaches do not consider situations when some attributes useful for identifying database instances do not exist in the original databases. Recently, some new approaches to entity identification have been proposed [12, 5, 15]. <p> In [12], Pu addressed entity identification as a name matching problem, and proposed matching the subfields of names. If most of the subfields in two given names match, the names are considered to be identical. In <ref> [10] </ref>, we presented an approach that makes use of additional knowledge about the matching criteria, as well as some inference rules to derive the missing attribute values useful for entity identification. However, only definite knowledge is employed in the entity identification process. <p> Most entity identification techniques proposed have not explicitly modeled the concept of identity rules [5, 1, 15]. Other proposed techniques have assumed the existence of only one identity rule <ref> [12, 10] </ref>. When multiple identity rules are allowed, some means of weighing the rules may be needed since some identity rules may be more reliable than others. * Identifying attributes: These are attributes of the database instances which participate in identity rules. <p> In most solutions to the entity identification problem, it has been assumed that the identifying attributes are stored attributes of database instances. In general, this assumption may be relaxed. Identity rules may require identifying attributes which have not been stored in the source databases. In <ref> [10] </ref>, we have shown that ILFD's (Instance-Level Functional Dependencies), a form of inference rules, can be used to derive missing identifying attributes. Here, we consider this kind of inference rules as part of the knowledge about the identifying attributes. <p> In the scenario where all knowledge is definite, the result of entity identification gives definite answers to matching a pair of database instances. The entity identification technique proposed in <ref> [10] </ref> is one example which assumes this scenario. While it is easier to deal with definite information, it is not always easy, if at all possible, to acquire knowledge that is definite. <p> Having extended the notion of fact to express in-definite information, we now extend identity rules and ILFDs introduced in <ref> [10] </ref>: Definition: (Evidential Identity Rule) Let R and S be two relations, with keys K R and K S respectively. Let A i 's and B i 's be some attributes (may include the keys) of R and S, respectively. <p> As part of our future research, we intend to apply the evidential reasoning technique to other database integration problems, e.g. attribute value conflict resolution. Eventually, we would like to enhance the entity identification component of our current prototype <ref> [10] </ref> to use indefinite information. Acknowledgement We would like to express our gratitude to Professors James Slagle and Shashi Shekhar for their comments in the process of developing the above ideas.
Reference: [11] <author> J.W. Lloyd. </author> <title> Foundations of Logic Programming. </title> <publisher> Springer-Verlag, </publisher> <year> 1984. </year>
Reference-contexts: To obtain the support information attached to an evidential fact or rules (evidential identity rules or ILFDs), we assume that the group voting model is used. 3.2 Reasoning with Evidential Informa tion Reasoning with evidential information described in this paper is quite different from that of logic programming <ref> [11] </ref>.
Reference: [12] <author> C. Pu. </author> <title> Key equivalence in heterogeneous databases. </title> <booktitle> In Proc. of the 1st Int'l Workshop on Interoperability in Multidatabase Systems, </booktitle> <year> 1991. </year>
Reference-contexts: Furthermore, these approaches do not consider situations when some attributes useful for identifying database instances do not exist in the original databases. Recently, some new approaches to entity identification have been proposed <ref> [12, 5, 15] </ref>. Wang and Madnick [15] recognized the need to derive attributes useful for identifying database instances, and proposed the use of heuristic rules to suggest probable values for these attributes, thus reducing the number of tuple pairs to be matched. <p> Moreover, the method does not consider the use of different identity rules, each assigned with different supports, to compute the matched tuples. In <ref> [12] </ref>, Pu addressed entity identification as a name matching problem, and proposed matching the subfields of names. If most of the subfields in two given names match, the names are considered to be identical. <p> Most entity identification techniques proposed have not explicitly modeled the concept of identity rules [5, 1, 15]. Other proposed techniques have assumed the existence of only one identity rule <ref> [12, 10] </ref>. When multiple identity rules are allowed, some means of weighing the rules may be needed since some identity rules may be more reliable than others. * Identifying attributes: These are attributes of the database instances which participate in identity rules.
Reference: [13] <author> G. Shafer. </author> <title> A Mathematical Theory of Evidence. </title> <publisher> Princeton Univ. Press, </publisher> <address> Princeton, NJ, </address> <year> 1976. </year>
Reference-contexts: Same Conclusion: To combine two evidential facts, we need to consolidate their support pairs using Dempster-Shafer's rule of combination <ref> [13] </ref>. <p> The second sub-task determines the matched tuples from two database sources using identity rules. Our approach uses the support logic programming paradigm and the Dempster-Shafer theory of evidence in both the representation and inference mechanism <ref> [2, 13] </ref>. The amount of semantic information, i.e. ILFDs and identity rules, for performing entity identification can vary depending on the database administrators' understanding about the domains of attributes and the entities in the databases.
Reference: [14] <author> P.S.M. Tsai and A.L.P. Chen. </author> <title> Querying uncertain data in heterogeneous databases. </title> <booktitle> In Proc. of RIDE-IMS 93, </booktitle> <pages> pages 161-168, </pages> <year> 1993. </year>
Reference-contexts: Note that the above methodology of resolving instance-level problems distinguishes our work from most others <ref> [5, 14] </ref>. We assume that database administrators can provide some attributes which are likely to contain reliable values for entity identification and they do not need to undergo the subsequent attribute value conflict resolution step.
Reference: [15] <author> Y.R. Wang and S.E. Madnick. </author> <title> The inter-database instance identification problem in integrating autonomous systems. </title> <booktitle> In Proceedings of the 5th Int'l Conf. on Data Engineering, </booktitle> <year> 1989. </year>
Reference-contexts: Furthermore, these approaches do not consider situations when some attributes useful for identifying database instances do not exist in the original databases. Recently, some new approaches to entity identification have been proposed <ref> [12, 5, 15] </ref>. Wang and Madnick [15] recognized the need to derive attributes useful for identifying database instances, and proposed the use of heuristic rules to suggest probable values for these attributes, thus reducing the number of tuple pairs to be matched. <p> Furthermore, these approaches do not consider situations when some attributes useful for identifying database instances do not exist in the original databases. Recently, some new approaches to entity identification have been proposed [12, 5, 15]. Wang and Madnick <ref> [15] </ref> recognized the need to derive attributes useful for identifying database instances, and proposed the use of heuristic rules to suggest probable values for these attributes, thus reducing the number of tuple pairs to be matched. <p> Most entity identification techniques proposed have not explicitly modeled the concept of identity rules <ref> [5, 1, 15] </ref>. Other proposed techniques have assumed the existence of only one identity rule [12, 10].
Reference: [16] <author> L.A. Zadeh. </author> <title> Knowledge representation in fuzzy logic. </title> <journal> IEEE Trans. on Knowledge and Data Engineering, </journal> <volume> 1(1) </volume> <pages> 89-100, </pages> <year> 1989. </year>
Reference-contexts: To capture indefinite information, the standard logic formalism is not sufficient. A number of formalisms have been proposed for reasoning based on evidences <ref> [2, 16] </ref>. The one we adopt is the formalism of logic with supports [2]. Logic with supports is a generalization of standard logic.
References-found: 16

