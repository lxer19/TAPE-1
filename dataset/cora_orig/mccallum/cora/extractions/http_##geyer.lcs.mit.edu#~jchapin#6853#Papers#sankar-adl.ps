URL: http://geyer.lcs.mit.edu/~jchapin/6853/Papers/sankar-adl.ps
Refering-URL: http://geyer.lcs.mit.edu/~jchapin/6853/readinglist.html
Root-URL: 
Email: sriram.sankar@eng.sun.com roger.hayes@eng.sun.com  
Title: Specifying and Testing Software Components using ADL  
Author: Sriram Sankar Roger Hayes 
Address: M/S 29-01 2550 Garcia Avenue Mountain View, CA 94043  
Note: email addresses:  
Date: April 1994  
Pubnum: SMLI TR-94-23  
Abstract: This paper presents a novel approach to unit testing of software components. This approach uses the specification language ADL, that is particularly well-suited for testing, to formally document the intended behavior of software components. Another related language, TDD, is used to systematically describe the test-data on which the software components will be tested. This paper gives a detailed overview of the ADL language, and a brief presentation of the TDD language. Some details of the actual test system are also presented, along with some significant results. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Belz, Frank and Luckham, David C. </author> <title> A New Approach to Prototyping Ada-based Hardware/Software Systems. </title> <booktitle> Proceedings of the ACM Tri-Ada Conference (December 1990). </booktitle>
Reference-contexts: This syntax may then be augmented with constructs from the programming language, such as its expression syntax. This approach of defining a language framework that may be specialized for use with any language has been used successfully in other projects, e.g., IDL [4], Rapide <ref> [1] </ref>, and Larch [7]. The ADL language framework has been specialized for use with the C programming language, and with IDLObject Management Groups interface definition language for the CORBA architecture specification. We intend to specialize ADL for use with C++ and Ada shortly.
Reference: [2] <author> Bjorner, D. </author> <title> VDM '87A Formal Method at Work. </title> <booktitle> Vol. 252 of Lecture Notes in Computer Science. </booktitle> <address> New York: </address> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: For this purpose (among others), various specification languages and specification techniques have been designedan overview of which can be found in [10]. Some examples of specification languages are Anna [11], Z [15], Larch [7], and VDM <ref> [2] </ref>. Our approach to program validation is through testing. In this approach, the program is run with many different test inputs in a systematic manner. Correct behavior is determined by examining the results of the program or function in terms of the specification that describes its behavior.
Reference: [3] <author> Boyer, R. S., B. Elspas, and K. N. Levitt. </author> <title> SELECTA Formal System for Testing and Debugging Programs by Symbolic Execution. </title> <booktitle> Proceedings of the International Conference on Reliable Software (April 1975): </booktitle> <pages> 234245. </pages>
Reference-contexts: Lately, however, much work has been done to realize this oracle. In nearly all cases, this has been achieved by comparing the behavior of a program against its specifications that have been written in some formal specification language (e.g., see <ref> [5, 3, 14] </ref>). We have designed a specification language called ADL (Assertion Definition Language). The design of ADL is well-suited for testinggenerating a test oracle from an ADL specification is a straightforward process. <p> Some approaches have been to generate test-data that force every program statement to be executed (statement coverage), while others force every edge in the programs owchart to be traversed (path coverage). A useful technique for test-data generation is symbolic execution of the program <ref> [3, 9] </ref>. Symbolic execution can be performed in a forward traversal or a backward traversal of the program paths. During these traversals, various constraints are established which are then used to generate the test-data. This falls under the general category of white-box testing.
Reference: [4] <institution> Digital Equipment Corporation, Hewlett Packard Company, HyperDesk Corporation, NCR Corporation, </institution> <note> Object Design, </note> <author> Inc., and SunSoft, Inc. </author> <title> The Common Object Request Broker: Architecture and Specification. revision 1.1. OMG document number 91.12.1 edition. </title> <month> December </month> <year> 1991. </year> <month> 20 </month>
Reference-contexts: This syntax may then be augmented with constructs from the programming language, such as its expression syntax. This approach of defining a language framework that may be specialized for use with any language has been used successfully in other projects, e.g., IDL <ref> [4] </ref>, Rapide [1], and Larch [7]. The ADL language framework has been specialized for use with the C programming language, and with IDLObject Management Groups interface definition language for the CORBA architecture specification. We intend to specialize ADL for use with C++ and Ada shortly.
Reference: [5] <author> Gannon, J., P. McMullin, and R. Hamlet. </author> <title> Data-abstraction Implementation, Specification, and Testing. </title> <journal> ACM Transactions on Programming Languages and Systems 3, </journal> <volume> no. </volume> <month> 3 (July </month> <year> 1981): </year> <month> 211223. </month>
Reference-contexts: Lately, however, much work has been done to realize this oracle. In nearly all cases, this has been achieved by comparing the behavior of a program against its specifications that have been written in some formal specification language (e.g., see <ref> [5, 3, 14] </ref>). We have designed a specification language called ADL (Assertion Definition Language). The design of ADL is well-suited for testinggenerating a test oracle from an ADL specification is a straightforward process.
Reference: [6] <author> Goodenough, J. B. and S. L. Gerhart. </author> <title> Towards a Theory of Test-data Selection. </title> <booktitle> Proceedings of the International Conference on Reliable Software (April 1975): </booktitle> <pages> 493510. </pages>
Reference-contexts: The objective is solely to find out when the input-output behavior of the program does not agree with its specification. In this approach, test-data are constructed from the specification [8, 12]. Weyuker and Ostrand [18], building on the work of Goodenough and Gerhart <ref> [6] </ref>, attempt to define a theoretically sound and practical definition of what constitutes an adequate test. The idea is to divide the test-data into a finite number of equivalence classes where testing on a representative of an equivalence class will, by induction, test the entire class.
Reference: [7] <author> Guttag, J. V., J. J. Horning, and J. M. Wing. </author> <title> The Larch family of Specification Languages. </title> <journal> IEEE Software 2, </journal> <volume> no. </volume> <month> 5 (September </month> <year> 1985): </year> <month> 2436. </month>
Reference-contexts: To automate the validation process, it is essential to formalize the specification of the program. For this purpose (among others), various specification languages and specification techniques have been designedan overview of which can be found in [10]. Some examples of specification languages are Anna [11], Z [15], Larch <ref> [7] </ref>, and VDM [2]. Our approach to program validation is through testing. In this approach, the program is run with many different test inputs in a systematic manner. Correct behavior is determined by examining the results of the program or function in terms of the specification that describes its behavior. <p> This syntax may then be augmented with constructs from the programming language, such as its expression syntax. This approach of defining a language framework that may be specialized for use with any language has been used successfully in other projects, e.g., IDL [4], Rapide [1], and Larch <ref> [7] </ref>. The ADL language framework has been specialized for use with the C programming language, and with IDLObject Management Groups interface definition language for the CORBA architecture specification. We intend to specialize ADL for use with C++ and Ada shortly.
Reference: [8] <author> Infotech International. </author> <title> Infotech State of the Art Report. Software Testing Volume 1: Analysis and Bibliography. </title> <year> 1979. </year>
Reference-contexts: In this case, the internal structure and behavior of the program is not considered. The objective is solely to find out when the input-output behavior of the program does not agree with its specification. In this approach, test-data are constructed from the specification <ref> [8, 12] </ref>. Weyuker and Ostrand [18], building on the work of Goodenough and Gerhart [6], attempt to define a theoretically sound and practical definition of what constitutes an adequate test.
Reference: [9] <author> King, J. C. </author> <title> A New Approach to Program Testing. </title> <booktitle> Proceedings of the International Conference on Reliable Software (April 1975): </booktitle> <pages> 228233. </pages>
Reference-contexts: Some approaches have been to generate test-data that force every program statement to be executed (statement coverage), while others force every edge in the programs owchart to be traversed (path coverage). A useful technique for test-data generation is symbolic execution of the program <ref> [3, 9] </ref>. Symbolic execution can be performed in a forward traversal or a backward traversal of the program paths. During these traversals, various constraints are established which are then used to generate the test-data. This falls under the general category of white-box testing.
Reference: [10] <author> Liskov, B. and S. Zilles. </author> <title> Specification Techniques for Data Abstraction. </title> <journal> IEEE Transactions on Software Engineering SE-1, </journal> <volume> no. </volume> <month> 1 (March </month> <year> 1975): </year> <month> 719. </month>
Reference-contexts: To automate the validation process, it is essential to formalize the specification of the program. For this purpose (among others), various specification languages and specification techniques have been designedan overview of which can be found in <ref> [10] </ref>. Some examples of specification languages are Anna [11], Z [15], Larch [7], and VDM [2]. Our approach to program validation is through testing. In this approach, the program is run with many different test inputs in a systematic manner.
Reference: [11] <author> Luckham, David C., Friedrich W. von Henke, Bernd Krieg-Bruckner, and Olaf Owe. ANNA, </author> <title> A Language for Annotating Ada Programs. </title> <booktitle> Vol. 260 of Lecture Notes in Computer Science. </booktitle> <address> New York: </address> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: To automate the validation process, it is essential to formalize the specification of the program. For this purpose (among others), various specification languages and specification techniques have been designedan overview of which can be found in [10]. Some examples of specification languages are Anna <ref> [11] </ref>, Z [15], Larch [7], and VDM [2]. Our approach to program validation is through testing. In this approach, the program is run with many different test inputs in a systematic manner.
Reference: [12] <author> Meyers, G. J. </author> <title> The Art of Software Testing. </title> <address> New York: </address> <publisher> John Wiley & Sons, </publisher> <year> 1979. </year>
Reference-contexts: In this case, the internal structure and behavior of the program is not considered. The objective is solely to find out when the input-output behavior of the program does not agree with its specification. In this approach, test-data are constructed from the specification <ref> [8, 12] </ref>. Weyuker and Ostrand [18], building on the work of Goodenough and Gerhart [6], attempt to define a theoretically sound and practical definition of what constitutes an adequate test.
Reference: [13] <author> Richardson, D. J., S. L. Aha, and T. O. OMalley. </author> <title> Specification-based Test Oracles for Reactive Systems. </title> <booktitle> Proceedings of the Fourteenth International Conference on Software Engineering (May 1992). </booktitle>
Reference: [14] <author> Sankar, S. </author> <title> Automatic Runtime Consistency Checking and Debugging of Formally Specified Programs. </title> <type> Ph.D. thesis, </type> <institution> Stanford University, 1989. Also Stanford University Department of Computer Science Technical Report No. STAN-CS-89-1282 and Computer Systems Laboratory Technical Report No. CSL-TR-89-391. </institution>
Reference-contexts: Lately, however, much work has been done to realize this oracle. In nearly all cases, this has been achieved by comparing the behavior of a program against its specifications that have been written in some formal specification language (e.g., see <ref> [5, 3, 14] </ref>). We have designed a specification language called ADL (Assertion Definition Language). The design of ADL is well-suited for testinggenerating a test oracle from an ADL specification is a straightforward process.
Reference: [15] <author> Spivey, J. M. </author> <title> Understanding Z, A Specification Language and its Formal Semantics. </title> <booktitle> Tracts in Theoretical Computer Science, </booktitle> <volume> vol. 3. </volume> <publisher> Cambridge University Press, </publisher> <year> 1988. </year>
Reference-contexts: To automate the validation process, it is essential to formalize the specification of the program. For this purpose (among others), various specification languages and specification techniques have been designedan overview of which can be found in [10]. Some examples of specification languages are Anna [11], Z <ref> [15] </ref>, Larch [7], and VDM [2]. Our approach to program validation is through testing. In this approach, the program is run with many different test inputs in a systematic manner.
Reference: [16] <author> Sun Microsystems, Inc., U. S. A. </author> <title> and Information-Technology Promotion Agency, Japan. ADL Language Reference Manual. document no. </title> <address> MITI/0002/D/0.1 edition. </address> <month> August </month> <year> 1993. </year>
Reference-contexts: Section 3 describes how assertion-checking functions (our oracle) are generated from ADL specifications, and provides a description of the TDD language. Finally, Section 4 concludes the paper with a discussion of ongoing work. More information on the ADL testing methodology and environment is available in <ref> [16] </ref> and [17]. 5 ADL is a language designed for formal specification of software components. It is well-suited for the purpose of testing. ADL defines a set of general-purpose specification concepts applicable for the specification of software written in most programming languages.
Reference: [17] <author> Sun Microsystems, Inc., U. S. A. </author> <title> and Information-Technology Promotion Agency, Japan. ADL Translator Design Specification. document no. </title> <address> MITI/0001/D/0.1 edition. </address> <month> August </month> <year> 1993. </year>
Reference-contexts: Section 3 describes how assertion-checking functions (our oracle) are generated from ADL specifications, and provides a description of the TDD language. Finally, Section 4 concludes the paper with a discussion of ongoing work. More information on the ADL testing methodology and environment is available in [16] and <ref> [17] </ref>. 5 ADL is a language designed for formal specification of software components. It is well-suited for the purpose of testing. ADL defines a set of general-purpose specification concepts applicable for the specification of software written in most programming languages.

References-found: 17

