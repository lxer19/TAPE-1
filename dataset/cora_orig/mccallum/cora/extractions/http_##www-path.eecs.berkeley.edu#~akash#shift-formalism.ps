URL: http://www-path.eecs.berkeley.edu/~akash/shift-formalism.ps
Refering-URL: http://www-path.eecs.berkeley.edu/~akash/akash.html
Root-URL: 
Email: fakash,gollu,varaiyag@eecs.berkeley.edu  
Title: Shift: A Formalism and a Programming Language for Dynamic Networks of Hybrid Automata  
Author: Akash Deshpande, Aleks Gollu and Pravin Varaiya 
Web: URL http://www.path.berkeley.edu/shift.  
Note: More information about Shift can be found at  
Address: Berkeley, Berkeley, CA 94720  
Affiliation: Department of Electrical Engineering and Computer Sciences University of California at  
Abstract: Shift is a programming language for describing dynamic networks of hybrid automata. Such systems consist of components which can be created, interconnected and destroyed as the system evolves. Components exhibit hybrid behavior, consisting of continuous-time phases separated by discrete-event transitions. Components may evolve independently, or they may interact through their inputs, outputs and exported events. The interaction network itself may evolve. We believe that the Shift model offers the proper level of abstraction for describing complex applications such as automated highway systems, air traffic control systems, robotic shopfloors, coordinated submarines and other systems whose operation cannot be captured easily by conventional models. We have implemented a compiler for translating a Shift program to a C program, and we have implemented the Shift run-time system for obtaining an executable program. The executable program, when run, simulates the design specified in the Shift source program. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Alur, C. Courcoubetis, T. Henzinger, and P. Ho. </author> <title> Hybrid Automata: An Algorithmic Approach to the Specification and Verification of Hybrid Systems. In Hybrid Systems, </title> <publisher> LNCS 736, Springer-Verlag, </publisher> <year> 1993, </year> <pages> pp. 209-229. </pages>
Reference-contexts: The hybrid systems approach <ref> [1] </ref> satisfied our needs for component modeling but not for modeling dynamically reconfigurable interactions between components. Most general-purpose programming languages support dynamic reconfigurability. But the abstraction facilities in general-purpose programming languages such as C or C++ would not allow us to write simple, concise descriptions of our designs.
Reference: [2] <author> A. Deshpande and P. Varaiya. </author> <title> Viable Control of Hybrid Systems. In Hybrid Systems II, </title> <publisher> LNCS 999, Springer-Verlag. </publisher> <year> 1995. </year>
Reference-contexts: From our previous experience in modeling [16, 9], analysis <ref> [21, 2, 13] </ref> and implementation [6, 10, 12], we adopted the hybrid systems approach for modeling the system components. Since spatial relationships between vehicles change as they move, our application displayed a dynamically changing network of interactions between system components.
Reference: [3] <author> A. Deshpande, D. Godbole, A. Gollu, L. Semenzato, R. Sengupta, D. Swaroop and P. Varaiya. </author> <title> Automated Highway System Tool Interface Format. </title> <type> California PATH Technical Report (draft). </type> <month> 24 January </month> <year> 1996. </year> <month> 14 </month>
Reference-contexts: Our primary application was the specification and analysis of different designs for automatic control of vehicles and highway systems. [24, 7] We needed to capture the behavior of vehicles, sensors, actuators, communication devices and controllers in a structured and modular specification. <ref> [3, 4] </ref> Models for these components were to be provided by different groups of experts and then integrated in different ways for comparative analysis.
Reference: [4] <author> A. Deshpande, D. Godbole, A. Gollu, P. Varaiya. </author> <title> "Design and Evaluation Tools for Automated Highway Systems." </title> <booktitle> In DIMACS 1995 and in Hybrid Systems III, </booktitle> <publisher> LNCS, Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Our primary application was the specification and analysis of different designs for automatic control of vehicles and highway systems. [24, 7] We needed to capture the behavior of vehicles, sensors, actuators, communication devices and controllers in a structured and modular specification. <ref> [3, 4] </ref> Models for these components were to be provided by different groups of experts and then integrated in different ways for comparative analysis.
Reference: [5] <author> A. Deshpande, A. Gollu, L. Semenzato. </author> <title> "The SHIFT Programming Language and Run-time System for Dynamic Networks of Hybrid Automata". </title> <note> Submitted to Proceedings of IEEE. </note>
Reference-contexts: Since all continuous variables are integrated simultaneously, Shift yields more accurate results than simulators that perform component-wise integration using piecewise constant approximations of interacting components. During the continuous step, the state of the world is examined periodically for enabled world transitions using the synchronization algorithm described in <ref> [5] </ref>. When an enabled transition is found, the discrete step is executed by "taking" the transition. The run-time system takes transitions as soon as they are enabled.
Reference: [6] <author> F. Eskafi, Delnaz Khorramabadi, and P. Varaiya, </author> <title> An Automatic Highway System Simulator. </title> <booktitle> In Transpn. </booktitle> <volume> Res.-C Vol. 3, No. 1, </volume> <pages> pp. 1-17, </pages> <year> 1995. </year>
Reference-contexts: From our previous experience in modeling [16, 9], analysis [21, 2, 13] and implementation <ref> [6, 10, 12] </ref>, we adopted the hybrid systems approach for modeling the system components. Since spatial relationships between vehicles change as they move, our application displayed a dynamically changing network of interactions between system components.
Reference: [7] <author> F. Eskafi, A. Gollu. </author> <title> "Simulation Needs for Automated Highway Planning". </title> <note> To appear in Transactions of Society of Computer Simulation. </note>
Reference-contexts: The interaction network itself may evolve. The Shift model was motivated by our need for tools that support dynamically reconfigurable hybrid systems. Our primary application was the specification and analysis of different designs for automatic control of vehicles and highway systems. <ref> [24, 7] </ref> We needed to capture the behavior of vehicles, sensors, actuators, communication devices and controllers in a structured and modular specification. [3, 4] Models for these components were to be provided by different groups of experts and then integrated in different ways for comparative analysis.
Reference: [8] <institution> Estelle A Formal Description Technique Based on Extended State Transition Model. ISO9074, </institution> <year> 1988 </year>
Reference-contexts: Since spatial relationships between vehicles change as they move, our application displayed a dynamically changing network of interactions between system components. We investigated several system description frameworks <ref> [20, 14, 15, 8, 17, 19, 23, 26] </ref> and some of their real-time extensions, but found none that suited our needs sufficiently well. Most support only static configurations of system components and mainly provide discrete event behavior description 1 with limited real-time extensions.
Reference: [9] <author> D. Godbole, J. Lygeros, E. Singh, A. Deshpande and E. Lindsey. </author> <title> Design and Verification of Communication Protocols for Degraded Modes of Operation of AHS. </title> <booktitle> In Conference on Decision and Control. </booktitle> <year> 1995. </year>
Reference-contexts: From our previous experience in modeling <ref> [16, 9] </ref>, analysis [21, 2, 13] and implementation [6, 10, 12], we adopted the hybrid systems approach for modeling the system components. Since spatial relationships between vehicles change as they move, our application displayed a dynamically changing network of interactions between system components.
Reference: [10] <author> A. Gollu. </author> <title> Object Management Systems. </title> <type> PhD Thesis, </type> <institution> UC Berkeley 1995. </institution>
Reference-contexts: From our previous experience in modeling [16, 9], analysis [21, 2, 13] and implementation <ref> [6, 10, 12] </ref>, we adopted the hybrid systems approach for modeling the system components. Since spatial relationships between vehicles change as they move, our application displayed a dynamically changing network of interactions between system components.
Reference: [11] <author> A. Gollu, P. Varaiya. </author> <title> "Dynamic Networks of Hybrid Automata", </title> <booktitle> Fifth Annual Conference on AI, Simulation, and Planning in High Autonomy Systems, </booktitle> <pages> pp. 244-251, </pages> <address> Gainesville, Florida. </address> <year> 1994. </year>
Reference-contexts: Our model performs synchronous composition of multiple automata. Our choice of this definition of world transitions rested on a tradeoff between ease of use and efficiency of implementation. An alternative would be to describe pair-wise cause-effect relationships between the transitions of different components. <ref> [11, 18] </ref> Programs written using the synchronous composition approach can be exponentially smaller than those written using cause-effect relationships. However, the algorithm for determining world transitions in the synchronous composition approach is exponentially more complex than the corresponding algorithm for the cause-effect synchronization approach.
Reference: [12] <author> A. Gollu, P. Varaiya. "SmartAHS: </author> : <title> A Simulation Framework for Automated Vehicles and Highway Systems". </title> <note> To appear in Mathematical and Computer Modeling. </note>
Reference-contexts: From our previous experience in modeling [16, 9], analysis [21, 2, 13] and implementation <ref> [6, 10, 12] </ref>, we adopted the hybrid systems approach for modeling the system components. Since spatial relationships between vehicles change as they move, our application displayed a dynamically changing network of interactions between system components.
Reference: [13] <author> J. Haddon, D. Godbole, A. Deshpande and J. Lygeros. </author> <title> Verification of Hybrid Systems: </title> <booktitle> Mono-tonicity in the AHS Control System. In DIMACS. </booktitle> <year> 1995. </year>
Reference-contexts: From our previous experience in modeling [16, 9], analysis <ref> [21, 2, 13] </ref> and implementation [6, 10, 12], we adopted the hybrid systems approach for modeling the system components. Since spatial relationships between vehicles change as they move, our application displayed a dynamically changing network of interactions between system components.
Reference: [14] <author> C.A.R. Hoare. </author> <title> Communicating Sequential Processes, </title> <booktitle> Prentice/Hall International, </booktitle> <year> 1985 </year>
Reference-contexts: Since spatial relationships between vehicles change as they move, our application displayed a dynamically changing network of interactions between system components. We investigated several system description frameworks <ref> [20, 14, 15, 8, 17, 19, 23, 26] </ref> and some of their real-time extensions, but found none that suited our needs sufficiently well. Most support only static configurations of system components and mainly provide discrete event behavior description 1 with limited real-time extensions.
Reference: [15] <author> G.P. Hong and T.G. Kim. </author> <title> The DEVS Formalism: A Framework for Logical Analysis and Performance. </title> <booktitle> In Fifth Annual Conference on AI, Simulation, and Planning in High Autonomy Systems, </booktitle> <pages> pp. 170-278, </pages> <address> Gainesville, Florida. </address> <year> 1994. </year>
Reference-contexts: Since spatial relationships between vehicles change as they move, our application displayed a dynamically changing network of interactions between system components. We investigated several system description frameworks <ref> [20, 14, 15, 8, 17, 19, 23, 26] </ref> and some of their real-time extensions, but found none that suited our needs sufficiently well. Most support only static configurations of system components and mainly provide discrete event behavior description 1 with limited real-time extensions.
Reference: [16] <author> A. Hsu, F. Eskafi, S. Sachs, P. Varaiya. </author> <title> Protocol Design for an Automated Highway System. In Discrete Event Dynamic Systems: </title> <booktitle> Theory and Applications 2, </booktitle> <year> (1993): </year> <pages> 183-206. </pages>
Reference-contexts: From our previous experience in modeling <ref> [16, 9] </ref>, analysis [21, 2, 13] and implementation [6, 10, 12], we adopted the hybrid systems approach for modeling the system components. Since spatial relationships between vehicles change as they move, our application displayed a dynamically changing network of interactions between system components.
Reference: [17] <author> Kemal Inan and Pravin Varaiya. </author> <title> Finitely Recursive Process Models for Discrete Event Systems. </title> <journal> In IEEE Trans. Auto. Control, </journal> <volume> vol. AC-33, no. 7, </volume> <pages> pp. 626-639, </pages> <month> July </month> <year> 1988. </year>
Reference-contexts: Since spatial relationships between vehicles change as they move, our application displayed a dynamically changing network of interactions between system components. We investigated several system description frameworks <ref> [20, 14, 15, 8, 17, 19, 23, 26] </ref> and some of their real-time extensions, but found none that suited our needs sufficiently well. Most support only static configurations of system components and mainly provide discrete event behavior description 1 with limited real-time extensions.
Reference: [18] <author> R. Kurshan. </author> <title> Computer-Aided Verification of Coordinating Processes: The Automata-Theoretic Approach. </title> <publisher> Princeton University Press, </publisher> <year> 1994. </year>
Reference-contexts: Our model performs synchronous composition of multiple automata. Our choice of this definition of world transitions rested on a tradeoff between ease of use and efficiency of implementation. An alternative would be to describe pair-wise cause-effect relationships between the transitions of different components. <ref> [11, 18] </ref> Programs written using the synchronous composition approach can be exponentially smaller than those written using cause-effect relationships. However, the algorithm for determining world transitions in the synchronous composition approach is exponentially more complex than the corresponding algorithm for the cause-effect synchronization approach.
Reference: [19] <institution> LOTOS A Formal Description Technique Based on the Temporal Ordering of Observational Behavior. ISO8807, 1XS989 </institution>
Reference-contexts: Since spatial relationships between vehicles change as they move, our application displayed a dynamically changing network of interactions between system components. We investigated several system description frameworks <ref> [20, 14, 15, 8, 17, 19, 23, 26] </ref> and some of their real-time extensions, but found none that suited our needs sufficiently well. Most support only static configurations of system components and mainly provide discrete event behavior description 1 with limited real-time extensions.
Reference: [20] <author> R.Milner. </author> <title> A Calculus of Communicating Systems, </title> <publisher> Springer-Verlag, </publisher> <year> 1980 </year>
Reference-contexts: Since spatial relationships between vehicles change as they move, our application displayed a dynamically changing network of interactions between system components. We investigated several system description frameworks <ref> [20, 14, 15, 8, 17, 19, 23, 26] </ref> and some of their real-time extensions, but found none that suited our needs sufficiently well. Most support only static configurations of system components and mainly provide discrete event behavior description 1 with limited real-time extensions.
Reference: [21] <author> A. Puri and P. Varaiya, </author> <title> Driving safely in smart cars. </title> <booktitle> In American Control Conference, </booktitle> <pages> pp. 3597-3599, </pages> <year> 1995. </year>
Reference-contexts: From our previous experience in modeling [16, 9], analysis <ref> [21, 2, 13] </ref> and implementation [6, 10, 12], we adopted the hybrid systems approach for modeling the system components. Since spatial relationships between vehicles change as they move, our application displayed a dynamically changing network of interactions between system components.
Reference: [22] <author> L. Semenzato, A. Deshpande and A. Gollu. </author> <title> Shift Reference Manual. </title> <type> California PATH Technical Report (draft). </type> <month> 28 June </month> <year> 1996. </year>
Reference-contexts: We introduce the Shift syntax with simple examples and give a complete program in Section 3.1. The complete Shift syntax is given in the Shift reference manual <ref> [22] </ref>. Larger size examples can be found at the Shift home page. Shift provides two native data types|number and symbol, and it provides mechanisms for defining additional types. Variables of type number have piecewise constant or piecewise continuous real-valued time traces.
Reference: [23] <editor> Specification and Description Language SDL. </editor> <booktitle> International Telecommunications Union-T Rec.Z.100 1988. </booktitle>
Reference-contexts: Since spatial relationships between vehicles change as they move, our application displayed a dynamically changing network of interactions between system components. We investigated several system description frameworks <ref> [20, 14, 15, 8, 17, 19, 23, 26] </ref> and some of their real-time extensions, but found none that suited our needs sufficiently well. Most support only static configurations of system components and mainly provide discrete event behavior description 1 with limited real-time extensions.
Reference: [24] <author> P. Varaiya. </author> <title> Smart cars on smart roads: problems of control. </title> <journal> In IEEE Trans. Automatic Control, </journal> <volume> vol. 38, No. 2, </volume> <year> 1993. </year>
Reference-contexts: The interaction network itself may evolve. The Shift model was motivated by our need for tools that support dynamically reconfigurable hybrid systems. Our primary application was the specification and analysis of different designs for automatic control of vehicles and highway systems. <ref> [24, 7] </ref> We needed to capture the behavior of vehicles, sensors, actuators, communication devices and controllers in a structured and modular specification. [3, 4] Models for these components were to be provided by different groups of experts and then integrated in different ways for comparative analysis.
Reference: [25] <author> Peter Wegner. </author> <title> "Concepts and Paradigms of Object-Oriented Programming", </title> <journal> ACM SIGPLAN OOPS Messenger, </journal> <volume> 1(1), </volume> <month> Aug </month> <year> 1990. </year>
Reference-contexts: Components obey continuous-time dynamics within each phase and discrete-event dynamics in phase transitions. The SHIFT mathematical model is class based <ref> [25] </ref>. The components are organized into types that describe the prototypical behavior of a component. We say that a component is an instantiation of its type. Type descriptors are an implicit and static part of the world.
Reference: [26] <author> Bernard Zeigler. </author> <title> Multifaceted modeling and discrete event simulation. </title> <publisher> Academic Press, </publisher> <address> London, Orlando, </address> <year> 1984. </year> <month> 16 </month>
Reference-contexts: Since spatial relationships between vehicles change as they move, our application displayed a dynamically changing network of interactions between system components. We investigated several system description frameworks <ref> [20, 14, 15, 8, 17, 19, 23, 26] </ref> and some of their real-time extensions, but found none that suited our needs sufficiently well. Most support only static configurations of system components and mainly provide discrete event behavior description 1 with limited real-time extensions.
References-found: 26

