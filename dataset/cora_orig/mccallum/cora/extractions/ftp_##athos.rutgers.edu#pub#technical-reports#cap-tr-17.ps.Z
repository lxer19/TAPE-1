URL: ftp://athos.rutgers.edu/pub/technical-reports/cap-tr-17.ps.Z
Refering-URL: http://www.cs.rutgers.edu/~ellman/ellman-publications.html
Root-URL: 
Title: Learning Prototype-Selection Rules for Case-Based Iterative Design seen as a case-based reasoning system [4], in
Author: Mark Schwabacher Haym Hirsh Thomas Ellman 
Note: 1: Introduction accomplished by an optimization method such as hill-climbing search [12, 2]. Such a design system can be  
Address: New Brunswick, NJ 08903  
Affiliation: Department of Computer Science Rutgers University  
Abstract: The first step for most case-based design systems is to select an initial prototype from a database of previous designs. The retrieved prototype is then modified to tailor it to the given goals. For any particular design goal the selection of a starting point for the design process can have a dramatic effect both on the quality of the eventual design and on the overall design time. We present a technique for automatically constructing effective prototype-selection rules. Our technique applies a standard inductive-learning algorithm, C4.5, to a set of training data describing which particular prototype would have been the best choice for each goal encountered in a previous design session. We have tested our technique in the domain of racing-yacht-hull design, comparing our inductively learned selection rules to several competing prototype-selection methods. Our results show that the inductive prototype-selection method leads to better final designs when the design process is guided by a noisy evaluation function, and that the inductively learned rules will often be more efficient than competing methods. Many automated design systems begin by retrieving an initial prototype from a library of previous designs, using the given design goal as an index to guide the retrieval process [14]. The retrieved prototype is then modified by a set of design modification operators to tailor the selected design to the given goals. In many cases the quality of competing designs can be assessed using domain-specific evaluation functions, and in such cases the design-modification process is often This research has benefited from numerous discussions with members of the Rutgers CAP project. We thank Andrew Gelsey for helping with the cross-validation code, John Keane for helping with RUVPP, and Andrew Gelsey and Tim Weinrich for comments on a previous draft of this paper. This research was supported under ARPA-funded NASA grant NAG 2-645. In the context of such case-based design systems, the choice of an initial prototype can affect both the quality of the final design and the computational cost of obtaining that design, for three reasons. First, prototype selection may impact quality when the prototypes lie in disjoint search spaces. In particular, if the system's design modification operators cannot convert any prototype into any other prototype, the choice of initial prototype will restrict the set of possible designs that can be obtained by any search process. A poor choice of initial prototype may therefore lead to a suboptimal final design. Second, prototype selection may impact quality when the design process is guided by a nonlinear evaluation function with unknown global properties. Since there is no known method that is guaranteed to find the global optimum of an arbitrary nonlinear function [7], most design systems rely on iterative local search methods whose results are sensitive to the initial starting point. Finally, the choice of prototype may have an impact on the time needed to carry out the design modification process|two different starting points may yield the same final design but take very different amounts of time to get there. In design problems where evaluating even just a single design can take tremendous amounts of time, selecting an appropriate initial prototype can be the determining factor in the success or failure of the design process. This paper describes the application of inductive learning [11] to form rules for selecting appropriate prototype designs. The paper is structured as follows. In Section 2, we describe our inductive method for learning prototype-selection rules. In Section 3 we describe the domain of racing-yacht-hull design, in which we tested our prototype-selection methods. In Sections 4 and 5, we describe the experiments 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Cerbone. </author> <title> Machine learning in engineering: Tech niques to speed up numerical optimization. </title> <type> Technical Report 92-30-09, </type> <institution> Oregon State University Department of Computer Science, </institution> <year> 1992. </year> <type> Ph.D. Thesis. </type>
Reference-contexts: In all of the experiments that we performed, there were four prototypes and 30 training examples, so our inductive approach will be less expensive than the exhaustive approach as long as at least 40 out of the more than 150,000 remaining design goals must be attempted. 7: Related work Cerbone <ref> [1] </ref> has reported work which applied machine-learning techniques to a problem similar to our prototype-selection problem. His design space, in the domain of truss design, has an exponential number of disconnected search spaces.
Reference: [2] <author> T. Ellman, J. Keane, and M. Schwabacher. </author> <title> The Rut gers CAP project design associate. </title> <type> Technical Report CAP-TR-7, </type> <institution> Department of Computer Science, Rut-gers University, </institution> <address> New Brunswick, NJ, </address> <year> 1992. </year>
Reference-contexts: This research was supported under ARPA-funded NASA grant NAG 2-645. accomplished by an optimization method such as hill-climbing search <ref> [12, 2] </ref>. Such a design system can be seen as a case-based reasoning system [4], in which the prototype-selection method is the indexing process, and the optimization method is the adaptation process. <p> The resulting tree is then used as a decision procedure for assigning labels to future, unlabeled data. 3: Yacht design Our prototype-selection techniques have been developed as part of the "Design Associate," a system for assisting human experts in the design of complex physical engineering structures <ref> [2] </ref>. The Design Associate is currently being tested in the domain of 12-meter racing yachts, which until recently was the class of yachts raced in America's Cup competitions. An example of a 12-meter yacht, the Stars and Stripes '87, is shown in Figure 1.
Reference: [3] <author> T. Ellman and M. Schwabacher. </author> <title> Abstraction and decomposition in hillclimbing design optimization. </title> <type> Technical Report CAP-TR-14, </type> <institution> Department of Computer Science, Rutgers University, </institution> <month> January </month> <year> 1993. </year>
Reference-contexts: To label the 1 The four operators we chose were Scale-X, Scale-Y, Prism-Y, and Scale-Keel. We chose these operators because the results of our earlier work on operator-importance analysis suggested that these are the four most important operators <ref> [3] </ref>. training data we attempted to find designs for each of the 30 goals starting from each of the four prototypes using the restricted set of operators, and determined which starting point was best. To generate test data we randomly selected ten "testing goals" from the goal space.
Reference: [4] <author> J. Kolodner. </author> <title> Case-Based Reasoning. </title> <publisher> Morgan Kauf mann Publishers, </publisher> <address> San Mateo, CA, </address> <year> 1993. </year>
Reference-contexts: This research was supported under ARPA-funded NASA grant NAG 2-645. accomplished by an optimization method such as hill-climbing search [12, 2]. Such a design system can be seen as a case-based reasoning system <ref> [4] </ref>, in which the prototype-selection method is the indexing process, and the optimization method is the adaptation process. <p> Several investigators [6, 15] have developed alternative artificial-intelligence techniques for controlling iterative parameter-design optimization. However, none of these efforts is focused directly on the problem of finding a starting point for iterative design. Likewise, library-retrieval techniques for case-based design <ref> [14, 4] </ref> have not been used to initialize an iterative design process. 8: Future work This paper presents an initial exploration of our inductive approach to the prototype-selection problem, and there are a number of directions for future work.
Reference: [5] <author> J. Letcher. </author> <title> The Aero/Hydro VPP Manual. </title> <institution> Aero/Hydro, Inc., Southwest Harbor, ME, </institution> <year> 1991. </year>
Reference-contexts: Our design system represents a yacht geometry by a set of B-spline surfaces [13], and evaluates course time using a "Velocity-Prediction Program" called "AHVPP" from AeroHydro, Inc., which is a marketed product used in yacht design <ref> [5] </ref>. Yacht designs are modified by operators that manipulate the B-spline surfaces. A search space is thus specified by providing an initial prototype geometry and a set of operators for modifying that prototype.
Reference: [6] <author> M. Orelup, J. Dixon, P. Cohen, and M. Simmons. Dominic II: </author> <title> Meta-level control in iterative redesign. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <pages> pages 25-30, </pages> <address> St. Paul, MN, </address> <year> 1988. </year>
Reference-contexts: In contrast to this, our work has evaluated retrieval strategies in terms of the quality of the resulting designs, rather than the number of iterations needed to find them. Several investigators <ref> [6, 15] </ref> have developed alternative artificial-intelligence techniques for controlling iterative parameter-design optimization. However, none of these efforts is focused directly on the problem of finding a starting point for iterative design.
Reference: [7] <author> W. Press, B. Flannery, S. Teukolsky, and W. Vetter ling. </author> <title> Numerical Recipes. </title> <publisher> Cambridge University Press, </publisher> <address> New York, NY, </address> <year> 1986. </year>
Reference-contexts: Second, prototype selection may impact quality when the design process is guided by a nonlinear evaluation function with unknown global properties. Since there is no known method that is guaranteed to find the global optimum of an arbitrary nonlinear function <ref> [7] </ref>, most design systems rely on iterative local search methods whose results are sensitive to the initial starting point. <p> These eight operators represent a subset of the full set that were actually developed, focusing on a smaller set suitable for testing our prototype-selection methods. To find a yacht for a given design goal our system uses steepest-descent hillclimbing <ref> [7] </ref>. The steepest-descent algorithm operates by repeatedly computing the gradient of the evaluation function. The algorithm then takes a step in the direction of the gradient, and evaluates the resulting point.
Reference: [8] <author> J. R. Quinlan. C4.5: </author> <title> Programs for Machine Learning. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo, CA, </address> <year> 1993. </year>
Reference-contexts: If learning is successful this mapping extrapolates from the training data and can be used successfully in future design sessions to map a new goal into an appropriate initial prototype in the design library. The specific inductive-learning system used in this work is C4.5 <ref> [8] </ref> (release 3.0, with windowing turned off). The approach taken by C4.5 is to find a small decision tree that correctly classifies the training data, then remove lower portions of the tree that appear to fit noise in the data.
Reference: [9] <author> J. R. Quinlan. </author> <title> Learning logical definitions from rela tions. </title> <journal> Machine Learning, </journal> <volume> 5 </volume> <pages> 239-266, </pages> <year> 1990. </year>
Reference-contexts: Additionally, learning methods operating on more expressive representations, such as inductive logic programming systems like FOIL <ref> [9] </ref>, may enable going beyond the simple representation of goals used here and handling more complicated goals, such as those involving multiple disciplines. Finally, learning systems operating over continuous value spaces, such as M5 [10], may make it possible to perform prototype generation instead of prototype selection.
Reference: [10] <author> J. R. Quinlan. </author> <title> Learning with continuous classes. </title> <booktitle> In Proceedings of the Australian Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 343-348, </pages> <address> Singapore, 1992. </address> <publisher> World Scientific. </publisher>
Reference-contexts: Finally, learning systems operating over continuous value spaces, such as M5 <ref> [10] </ref>, may make it possible to perform prototype generation instead of prototype selection. This will involve learning rules to map the goal directly into the parameters that form a prototype, rather than a particular prototype in a database.
Reference: [11] <author> J. Carbonell R. Michalski and T. Mitchell, edi tors. </author> <title> Machine Learning, An Artificial Intelligence Approach. </title> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, CA, </address> <year> 1983. </year>
Reference-contexts: In design problems where evaluating even just a single design can take tremendous amounts of time, selecting an appropriate initial prototype can be the determining factor in the success or failure of the design process. This paper describes the application of inductive learning <ref> [11] </ref> to form rules for selecting appropriate prototype designs. The paper is structured as follows. In Section 2, we describe our inductive method for learning prototype-selection rules. In Section 3 we describe the domain of racing-yacht-hull design, in which we tested our prototype-selection methods.
Reference: [12] <author> N. Ramachandran, N. Langrana, L. Steinberg, and V. Jamalabad. </author> <title> Initial design strategies for iterative design. </title> <booktitle> Research in Engineering Design, </booktitle> <volume> 4 </volume> <pages> 159-169, </pages> <year> 1992. </year>
Reference-contexts: This research was supported under ARPA-funded NASA grant NAG 2-645. accomplished by an optimization method such as hill-climbing search <ref> [12, 2] </ref>. Such a design system can be seen as a case-based reasoning system [4], in which the prototype-selection method is the indexing process, and the optimization method is the adaptation process. <p> Cerbone also presents two learners that incorporate background knowledge by incorporating the objective function into the learner. Research on prototype-retrieval strategies for hill-climbing design optimization is reported by Ra-machandran et al. <ref> [12] </ref>, who investigated a number of library-based methods for finding starting points for the DPMED iterative parameter-design system. These included a nearest-neighbor method, a curve-fitting method, and a hybrid method. The curve-fitting method is similar in spirit to our inductive learning method.
Reference: [13] <author> D. Rogers and J. Adams. </author> <title> Mathematical elements for computer graphics. </title> <publisher> McGraw-Hill, </publisher> <address> 2nd edition, </address> <year> 1990. </year>
Reference-contexts: A particular course-time goal thus requires the specification of two things: (1) the race course, represented as a set of (distance; heading) pairs; and (2) the wind speed, represented as a scalar number, in knots. Our design system represents a yacht geometry by a set of B-spline surfaces <ref> [13] </ref>, and evaluates course time using a "Velocity-Prediction Program" called "AHVPP" from AeroHydro, Inc., which is a marketed product used in yacht design [5]. Yacht designs are modified by operators that manipulate the B-spline surfaces.
Reference: [14] <author> K. Sycara and D. Navinchandra. </author> <title> Retrieval strate gies in a case-based design system. </title> <editor> In C. Tong and D. Sriram, editors, </editor> <booktitle> Artificial Intelligence in Engineering Design (Volume II), </booktitle> <pages> pages 145 - 164. </pages> <publisher> Academic Press, </publisher> <address> New York, NY, </address> <year> 1992. </year>
Reference-contexts: 1: Introduction Many automated design systems begin by retrieving an initial prototype from a library of previous designs, using the given design goal as an index to guide the retrieval process <ref> [14] </ref>. The retrieved prototype is then modified by a set of design modification operators to tailor the selected design to the given goals. <p> Several investigators [6, 15] have developed alternative artificial-intelligence techniques for controlling iterative parameter-design optimization. However, none of these efforts is focused directly on the problem of finding a starting point for iterative design. Likewise, library-retrieval techniques for case-based design <ref> [14, 4] </ref> have not been used to initialize an iterative design process. 8: Future work This paper presents an initial exploration of our inductive approach to the prototype-selection problem, and there are a number of directions for future work.
Reference: [15] <author> S. Tong. </author> <title> Coupling symbolic manipulation and numer ical simulation for complex engineering designs. </title> <booktitle> In International Association of Mathematics and Computers in Simulation Conference on Expert Systems for Numerical Computing, </booktitle> <institution> Purdue University, </institution> <year> 1988. </year>
Reference-contexts: In contrast to this, our work has evaluated retrieval strategies in terms of the quality of the resulting designs, rather than the number of iterations needed to find them. Several investigators <ref> [6, 15] </ref> have developed alternative artificial-intelligence techniques for controlling iterative parameter-design optimization. However, none of these efforts is focused directly on the problem of finding a starting point for iterative design.
Reference: [16] <author> S. Weiss and C. </author> <title> Kulikowski. Computer Systems That Learn. </title> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, CA, </address> <year> 1991. </year>
Reference-contexts: This was done using ten trials of four-fold cross-validation <ref> [16] </ref> on a set of forty random goals. Each such trial involves randomly dividing the data into four sets of size ten, using three of the sets for training data and the remaining one as testing.
References-found: 16

