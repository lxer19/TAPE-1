URL: http://www.research.microsoft.com/~gurevich/Opera/97.ps
Refering-URL: http://www.research.microsoft.com/~gurevich/annotated.html
Root-URL: http://www.research.microsoft.com
Title: Matrix Transformation is Complete for the Average Case  
Author: Andreas Blass andYuri Gurevich 
Abstract: In the theory of worst case complexity, NP completeness is used to establish that, for all practical purposes, the given NP problem is not decidable in polynomial time. In the theory of average case complexity, average case completeness is supposed to play the role of NP completeness. However, the average case reduction theory is still at an early stage, and only a few average case complete problems are known. We present the first algebraic problem complete for the average case under a natural probability distribution. The problem is this: Given a unimodular matrix X of integers, a set S of linear transformations of such unimodular matrices and a natural number n, decide if there is a product of n (not necessarily different) members of S that takes X to the identity matrix. 
Abstract-found: 1
Intro-found: 1
Reference: [BCGL] <author> Shai Ben-David, Benny Chor, Oded Goldreich and Michael Luby, </author> <title> "On the Theory of Average Case Complexity", </title> <booktitle> 21st Annual ACM Symposium on Theory of Computing, ACM, </booktitle> <year> 1989, </year> <pages> 204-216. 36 </pages>
Reference-contexts: Some progress has been achieved in the meantime. In particular, the restriction to PTime computable distributions was liberalized <ref> [BCGL] </ref>; Levin's complete problems remained complete (we return to the issue of the liberalized RNP later in this introduction). The reduction theory has been revised [Gu1, BCGL, VL, BG1, BG2]. <p> Some progress has been achieved in the meantime. In particular, the restriction to PTime computable distributions was liberalized [BCGL]; Levin's complete problems remained complete (we return to the issue of the liberalized RNP later in this introduction). The reduction theory has been revised <ref> [Gu1, BCGL, VL, BG1, BG2] </ref>. In particular, deterministic reductions, shown insufficient in [Gu1], have been replaced in [VL] by randomizing reductions; in other words reduction algorithms have been allowed to flip coins. This tuning up of the reduction theory continues in this paper. <p> Actually, we prove only that Matrix Transformation is hard for RNP. It is obvious that (the unrandomized version of) Matrix Transformation is NP. Checking that the probability distribution is PTime is routine and we ignore it. We mentioned already that the definition of RNP has been liberalized in <ref> [BCGL] </ref> by allowing more general distributions called samplable. Impagliazzo and Levin proved that every NP search problem with samplable distribution reduces via many-one PTime computable reductions to an NP search problem with PTime computable distribution [IL] (see also [BG2]). <p> In an appropriate sense a search problem with a PTime computable distribution reduces to a decision problems with PTime computable distribution <ref> [BCGL] </ref>. Thus, Matrix Transformation is hard for the class of NP search problems with sam-plable distributions. Our reduction of Bounded Halting to Matrix Transformation can be easily modified to obtain a many-one randomized reduction of the search version of Bounded Halting to the search version of Matrix Transformation. <p> Traditional concepts of (worst-case) complexity are defined by means of the size function jxj. Concepts of average-case complexity are defined by averaging with respect to the probability distribution P X . As was pointed out by Levin [Le] and discussed in some detail in <ref> [BCGL, Gu1] </ref>, the most obvious definition of the concept "polynomial time on average" has inappropriate consequences, and some care is needed to obtain a suitable definition. We use the following definition due to Levin [Le], as modified in [BG1] to allow 1 as a value.
Reference: [BG1] <author> Andreas Blass and Yuri Gurevich, </author> <title> "On the Reduction Theory for Average-Case Complexity", </title> <booktitle> CSL'90, 4th Workshop on Computer Science Logic, Heidelberg, Germany, Springer Lecture Notes in Computer Science 533, </booktitle> <year> 1991, </year> <pages> 17-30. </pages>
Reference-contexts: Some progress has been achieved in the meantime. In particular, the restriction to PTime computable distributions was liberalized [BCGL]; Levin's complete problems remained complete (we return to the issue of the liberalized RNP later in this introduction). The reduction theory has been revised <ref> [Gu1, BCGL, VL, BG1, BG2] </ref>. In particular, deterministic reductions, shown insufficient in [Gu1], have been replaced in [VL] by randomizing reductions; in other words reduction algorithms have been allowed to flip coins. This tuning up of the reduction theory continues in this paper. <p> We thank Abraham Sharell, the team of Belanger and Wang, and the referees for pointing out various flaws in the previous versions of this paper. 2 Domains As a general framework for the study of average case complexity, we use domains <ref> [Gu2, BG1, BG2] </ref>. <p> We use the following definition due to Levin [Le], as modified in <ref> [BG1] </ref> to allow 1 as a value. Definition 2.2 Let T be a function from a domain X to the interval [0; 1] of the real line augmented with 1. <p> If is a subset of the cartesian product U fi V of sets U and V then, for each x 2 U , (x) = fy : (x; y) 2 g. The notion of dilation was introduced in [Gu1] and used in <ref> [BG1, BG2] </ref>. The idea is to combine the probability distribution on instances and the probability distribution of coin flips into one probability distribution. <p> In the following definition, think of as the set of pairs (x; s) where x is an input to a randomizing algorithm and s is a sequence of coin flips just sufficient to make that algorithm, with input x, produce an output. Definition 3.11 (cf. <ref> [Gu1, BG1] </ref>) A dilation of a domain X is a domain such that * The universe of is a subset of X fi BS such that, for every x 2 X of non-zero probability, (x) is non-empty and satisfies the prefix condition, * The size function j (x; s)j = jxj,
Reference: [BG2] <author> Andreas Blass and Yuri Gurevich, </author> <title> "Randomizing Reductions of Search Problems", SIAM J. on Computing, to appear. An extended abstract in FST&- TCS'91, </title> <booktitle> 11th Conference on Foundations of Software Technology and Theoretical Computer Science, </booktitle> <address> New Delhi, India, </address> <booktitle> Springer Lecture Notes in Computer Science 560 (1991), </booktitle> <pages> 10-24. </pages>
Reference-contexts: Some progress has been achieved in the meantime. In particular, the restriction to PTime computable distributions was liberalized [BCGL]; Levin's complete problems remained complete (we return to the issue of the liberalized RNP later in this introduction). The reduction theory has been revised <ref> [Gu1, BCGL, VL, BG1, BG2] </ref>. In particular, deterministic reductions, shown insufficient in [Gu1], have been replaced in [VL] by randomizing reductions; in other words reduction algorithms have been allowed to flip coins. This tuning up of the reduction theory continues in this paper. <p> Impagliazzo and Levin proved that every NP search problem with samplable distribution reduces via many-one PTime computable reductions to an NP search problem with PTime computable distribution [IL] (see also <ref> [BG2] </ref>). In an appropriate sense a search problem with a PTime computable distribution reduces to a decision problems with PTime computable distribution [BCGL]. Thus, Matrix Transformation is hard for the class of NP search problems with sam-plable distributions. <p> We thank Abraham Sharell, the team of Belanger and Wang, and the referees for pointing out various flaws in the previous versions of this paper. 2 Domains As a general framework for the study of average case complexity, we use domains <ref> [Gu2, BG1, BG2] </ref>. <p> If is a subset of the cartesian product U fi V of sets U and V then, for each x 2 U , (x) = fy : (x; y) 2 g. The notion of dilation was introduced in [Gu1] and used in <ref> [BG1, BG2] </ref>. The idea is to combine the probability distribution on instances and the probability distribution of coin flips into one probability distribution.
Reference: [BG3] <author> Andreas Blass and Yuri Gurevich, </author> <title> "Randomized Reductions of Decision Problems" (tentative title), </title> <note> in preparation. </note>
Reference-contexts: The question remains whether Matrix Transformation (or Bounded Halting) is complete for the class of NP decision problems with samplable distributions. In the usual NP theory, decision problems are easily reducible to search problems. The situation is different in the average-case theory. We intend to consider these issues in <ref> [BG3] </ref>. A simpler version of Matrix Transformation is obtained by making S just a set of unimodular matrices and asking whether another unimodular matrix X can be represented as a product of at most n matrices from S.
Reference: [Ei] <author> Samuel Eilenberg, </author> <title> "Automata, Languages, and Machines", Vol. A and B, </title> <publisher> Academic Press, </publisher> <address> NY & London, </address> <note> 1974 and 1976, xvi+451pp. and xiii+387 pp. </note>
Reference-contexts: This fact is noticed in <ref> [Ei, Chapter VI, Section 12] </ref>. The following theorem should be known too, but we don't have an appropriate reference. 15 Theorem 6.2 The monoid PM is isomorphic to the monoid BS of binary strings. The two indecomposable non-unit elements are the matrices A 0 and B 0 .
Reference: [GJ] <author> Michael R. Garey and David S. Johnson, </author> <title> "Computers and Intractability: A Guide to the Theory of NP-Completeness", </title> <publisher> Freeman, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: Lemma 11.2 Integer Sum is NP complete. The fact may be well known. It was not known to us. Suzanne Zeitman, a graduate student of the second author, proved the lemma. Proof The proof is by reduction from X3C, Exact Cover by 3-Sets <ref> [GJ] </ref>, which is the following NP problem: Instance: A positive integer q and a collection C of 3-element subsets of the set f1; 2; : : : ; 3qg. <p> Question: Is there an exact cover C 0 C for X (so that each element of X belongs to exactly one member of C 0 )? The transformation f we use resembles that used in the reduction of 3-Dimensional Matching to Partition <ref> [GJ] </ref>. Given an instance (q; C) of X3C, let l be the length of the binary notation for q and B be the collection of binary strings of length 3ql. View a B string as a sequence of 3q blocks (substrings) of length l.
Reference: [Gu1] <author> Yuri Gurevich, </author> <title> "Average Case Completeness", </title> <journal> J. Computer and System Sciences 42:3, </journal> <month> June </month> <year> 1991, </year> <pages> 346-398. </pages> <note> (An extended abstract in FOCS'87.) </note>
Reference-contexts: Most known natural NP problems are either PTime decidable or NP complete. The theory of average case completeness was pioneered by Leonid Levin in [Le]. Levin replaced NP with the class RNP of NP problems with so-called PTime computable probability distributions <ref> [Le, Gu1] </ref>. He generalized PTime computability to computability in time polynomial on average (APtime computability) and defined many-one PTime reductions of RNP problems. <p> randomized tiling problem belongs to RNP and every problem in RNP reduces to it via many-one PTime reductions.) Another RNP problem, implicitly present in [Le], is Bounded Halting, a bounded version of the standard halting problem together with natural probability distribution; this problem is explicitly defined and proved complete in <ref> [Gu1] </ref>. Some progress has been achieved in the meantime. In particular, the restriction to PTime computable distributions was liberalized [BCGL]; Levin's complete problems remained complete (we return to the issue of the liberalized RNP later in this introduction). The reduction theory has been revised [Gu1, BCGL, VL, BG1, BG2]. <p> Some progress has been achieved in the meantime. In particular, the restriction to PTime computable distributions was liberalized [BCGL]; Levin's complete problems remained complete (we return to the issue of the liberalized RNP later in this introduction). The reduction theory has been revised <ref> [Gu1, BCGL, VL, BG1, BG2] </ref>. In particular, deterministic reductions, shown insufficient in [Gu1], have been replaced in [VL] by randomizing reductions; in other words reduction algorithms have been allowed to flip coins. This tuning up of the reduction theory continues in this paper. <p> In particular, the restriction to PTime computable distributions was liberalized [BCGL]; Levin's complete problems remained complete (we return to the issue of the liberalized RNP later in this introduction). The reduction theory has been revised [Gu1, BCGL, VL, BG1, BG2]. In particular, deterministic reductions, shown insufficient in <ref> [Gu1] </ref>, have been replaced in [VL] by randomizing reductions; in other words reduction algorithms have been allowed to flip coins. This tuning up of the reduction theory continues in this paper. <p> In Sections 2-5 of this paper, we describe the current state of the reduction theory in full detail and in particular define a clean notion of randomized many-one reductions of randomized decision problems. A number of additional natural RNP complete problem have been found <ref> [Gu1, VL, Gu2, VR] </ref> but that number is still very small. Moreover, none of the known complete problems, however natural they are, arose in applications. All of them were designed specially for the purpose of finding additional average-case complete problems. <p> The probability distribution on the instances is rather natural. The three components of a random instance (X; S; n) are chosen independently. The integer component n is chosen with respect to the default probability function 1 . (The choice of the default distribution does not matter much <ref> [Gu1] </ref>.) To choose the uni-modular component X, first choose a positive integer k with respect to the default distribution and then choose X randomly (with respect to the uniform probability distribution) among all unimodular matrices of size k. <p> Traditional concepts of (worst-case) complexity are defined by means of the size function jxj. Concepts of average-case complexity are defined by averaging with respect to the probability distribution P X . As was pointed out by Levin [Le] and discussed in some detail in <ref> [BCGL, Gu1] </ref>, the most obvious definition of the concept "polynomial time on average" has inappropriate consequences, and some care is needed to obtain a suitable definition. We use the following definition due to Levin [Le], as modified in [BG1] to allow 1 as a value. <p> Another natural way to define uniform domains requires a default probability distribution on positive integers; it is customary to assign the probability 1 to a positive integer n. The choice of the default probability distribution does not matter much; see <ref> [Gu1] </ref> in this connection. Definition 2.5 PI is the domain of positive integers such that jnj = n and the probability of any n is 1=[n (n + 1)]. The probability of a number n in PI is called the default probability of n. <p> Unfortunately, deterministic reductions are too weak to yield a good notion of completeness; see <ref> [Gu1] </ref> where it is shown that complete problems in this sense must (under the reasonable assumption that nondeterministic exponential time differs from deterministic exponential time) have too special probability distributions (non-flat, in the terminology of [Gu1]). <p> Unfortunately, deterministic reductions are too weak to yield a good notion of completeness; see <ref> [Gu1] </ref> where it is shown that complete problems in this sense must (under the reasonable assumption that nondeterministic exponential time differs from deterministic exponential time) have too special probability distributions (non-flat, in the terminology of [Gu1]). Therefore, we use the larger class, suggested in [VL], of randomizing reductions, i.e., we allow the computation of the reducing function to flip coins. In order to introduce randomizing reductions, we need some auxiliary notions. <p> If is a subset of the cartesian product U fi V of sets U and V then, for each x 2 U , (x) = fy : (x; y) 2 g. The notion of dilation was introduced in <ref> [Gu1] </ref> and used in [BG1, BG2]. The idea is to combine the probability distribution on instances and the probability distribution of coin flips into one probability distribution. <p> In the following definition, think of as the set of pairs (x; s) where x is an input to a randomizing algorithm and s is a sequence of coin flips just sufficient to make that algorithm, with input x, produce an output. Definition 3.11 (cf. <ref> [Gu1, BG1] </ref>) A dilation of a domain X is a domain such that * The universe of is a subset of X fi BS such that, for every x 2 X of non-zero probability, (x) is non-empty and satisfies the prefix condition, * The size function j (x; s)j = jxj, <p> A decision problem is complete for C if it belongs to C and is hard for C. RNP is the class of decision problems with PTime computable probability distributions. PTime computable distributions are defined in [Le] and analyzed in <ref> [Gu1] </ref>. 6 Positive matrices We now turn from the general theory of randomizing algorithms and reductions to the specific problem, Matrix Transformation, whose completeness for RNP we shall prove in Section 10. We begin with information about unimodular matrices. <p> Lemma 7.3 For a certain U , RWH (U ) is hard for RNP. Proof Some RBH (T ) is RNP complete, by Corollary 1 of Theorem 1 in <ref> [Gu1] </ref>. (Actually, a slightly different version of bounded halting problems was considered in [Gu1]. It was supposed there that n &gt; jxj and P (x; n) / n 3 2 jxj . However the same proof works. <p> Lemma 7.3 For a certain U , RWH (U ) is hard for RNP. Proof Some RBH (T ) is RNP complete, by Corollary 1 of Theorem 1 in <ref> [Gu1] </ref>. (Actually, a slightly different version of bounded halting problems was considered in [Gu1]. It was supposed there that n &gt; jxj and P (x; n) / n 3 2 jxj . However the same proof works. <p> Theorem 7.5 Some RPMC () is hard for RNP. Remark 2 Replacing PM with BS in the definition of RPMC () gives a variant RPCP () of the Post Correspondence Problem; this variant has been proved RNP complete for not too small in <ref> [Gu1] </ref>. (Actually, RPCP () is slightly different from the version in [Gu1] but the difference is immaterial. For readers with Section 5.1 of [Gu1] before them, we indicate the changes needed in the completeness proof to cover our variant. <p> Remark 2 Replacing PM with BS in the definition of RPMC () gives a variant RPCP () of the Post Correspondence Problem; this variant has been proved RNP complete for not too small in <ref> [Gu1] </ref>. (Actually, RPCP () is slightly different from the version in [Gu1] but the difference is immaterial. For readers with Section 5.1 of [Gu1] before them, we indicate the changes needed in the completeness proof to cover our variant. Remove the clause L0 from the definition of L (w) to obtain a reduced set L 0 (w) of pairs. <p> the definition of RPMC () gives a variant RPCP () of the Post Correspondence Problem; this variant has been proved RNP complete for not too small in <ref> [Gu1] </ref>. (Actually, RPCP () is slightly different from the version in [Gu1] but the difference is immaterial. For readers with Section 5.1 of [Gu1] before them, we indicate the changes needed in the completeness proof to cover our variant. Remove the clause L0 from the definition of L (w) to obtain a reduced set L 0 (w) of pairs. <p> Proof of Theorem 7.5. Fix a Turing machine U witnessing Lemma 7.3. We will reduce RWH (U ) to RPMC () for appropriate . The variant RPCP () of the Post Correspondence Problem was defined in a remark above. According <ref> [Gu1, Section 5] </ref> (with changes indicated in the remark), there exists a PTime reduction F (x; n) = (xx 0 ; K (x); p (n)) of RBH (U ) to some RPCP () such that jx 0 j = O (log jxx 0 j) and jK (x)j = O (log jxx <p> reduction F (x; n) = (xx 0 ; K (x); p (n)) of RBH (U ) to some RPCP () such that jx 0 j = O (log jxx 0 j) and jK (x)j = O (log jxx 0 j). (Concerning the size bounds, see in particular Lemma 5.1 in <ref> [Gu1] </ref>.) Extend the isomorphism J to sequences of pairs of binary strings. The function G (x; n) = (J (xx 0 ); J (K (x)); p (n)) is the desired reduction of RWH (U ) to RPMC (). Clearly, G is AP time computable and has the correctness property. <p> For example, (j) = j. The restriction of MT (resp. MT ()) to instances (A; S; n) with n = (jAj) remains RNP complete. The proof is the same proof except we start with the corresponding version of the bounded halting problem, which has been proved RNP complete in <ref> [Gu1, Section 9] </ref>. 11 Bounded membership problem In this section, we briefly consider a natural simplification of MT () where the question is whether the given unimodular matrix X is a product of at most n factors taken from a given finite subset (assumed closed under inverses) of SL 2 (Z).
Reference: [Gu2] <author> Yuri Gurevich, </author> <title> "Matrix Decomposition Problem is Complete for the Average Case", </title> <booktitle> FOCS'90, 31st Annual Symposium on Foundations of Computer Science, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1990, </year> <pages> 802-811. </pages>
Reference-contexts: In Sections 2-5 of this paper, we describe the current state of the reduction theory in full detail and in particular define a clean notion of randomized many-one reductions of randomized decision problems. A number of additional natural RNP complete problem have been found <ref> [Gu1, VL, Gu2, VR] </ref> but that number is still very small. Moreover, none of the known complete problems, however natural they are, arose in applications. All of them were designed specially for the purpose of finding additional average-case complete problems. <p> In this connection, Leonid Levin challenged the second author (who started his career an algebraist) to find an average-case complete problem of algebraic character. Such a problem was found in <ref> [Gu2] </ref>; this paper is a full version of the extended abstract [Gu2]. The matrix decomposition problem involves linear transformations of unimodular matrices. The modular group is the multiplicative group SL 2 (Z) of two-by-two integer matrices of determinant 1 (unimodular matrices). <p> In this connection, Leonid Levin challenged the second author (who started his career an algebraist) to find an average-case complete problem of algebraic character. Such a problem was found in <ref> [Gu2] </ref>; this paper is a full version of the extended abstract [Gu2]. The matrix decomposition problem involves linear transformations of unimodular matrices. The modular group is the multiplicative group SL 2 (Z) of two-by-two integer matrices of determinant 1 (unimodular matrices). <p> We thank Abraham Sharell, the team of Belanger and Wang, and the referees for pointing out various flaws in the previous versions of this paper. 2 Domains As a general framework for the study of average case complexity, we use domains <ref> [Gu2, BG1, BG2] </ref>. <p> These logarithms in the sizes contribute polynomials in jxj as factors in the probabilities, and such factors are ignored. 2 22 Remark 3 In <ref> [Gu2] </ref>, Theorem 7.5 has been stated in a stronger form; instead of RPMC () it referred to RPMC (; c) where the (A; S; n) were required to have jSj = O (log jAj). Our proof of the theorem does not establish the stronger result automatically.
Reference: [Gu3] <author> Yuri Gurevich, </author> <title> "Average Case Complexity", </title> <booktitle> ICALP'91, 18th International Colloquium on Automata, Languages and Programming, Madrid, Springer Lecture Notes in Computer Science 510, </booktitle> <year> 1991, </year> <pages> 615-628. </pages>
Reference: [GS] <author> Yuri Gurevich and Saharon Shelah, </author> <title> "Expected Computation Time for Hamil-tonian Path Problem", </title> <note> SIAM J. on Computing 16:3 (1987) 486-502. </note>
Reference-contexts: One way around the NP completeness phenomenon is to consider the given NP problem together with an appropriate probability distribution and seek a decision algorithm that runs quickly on average. This works very well for some problems (see <ref> [GS] </ref> for example), but some other randomized decision problems appear too difficult even on average. It would be very useful to generalize the theory of NP completeness to be able to establish that certain randomized decision problems are, for all practical purposes, not decidable quickly on average.
Reference: [HW] <author> G. H. Hardy and E. M. Wright, </author> <title> "An Introduction to the Theory of Numbers", </title> <publisher> Oxford University Press, </publisher> <address> 5th edition, 1988 printing. </address>
Reference-contexts: Proof (x) comprises all binary strings s of length jxj such that the numbers (represented by binary strings) s and 1x are relatively prime. Since the chance that a random s is relatively prime to 1x is sufficiently large <ref> [HW] </ref>, is nonrare. f (x; s) = s . 4 Search problems Definition 4.1 A (randomized) search problem SP (X; W ) is given by a domain X (of instances) and a PTime computable relation W (x; w) (the witness relation) between elements of X and arbitrary strings in a fixed <p> Recall that (m) is the number of positive integers n m that are prime to m, and that (m) = (1) + : : : + (m) = 3m 2 = 2 + O (m log m) <ref> [HW, Theorem 330] </ref>. Thus, N (l) `(m)=l By Theorem 6.2, PM is isomorphic to BS as a monoid. There are exactly two isomorphisms of PM onto BS. <p> Lemma 6.10, E n 2 n" y X [(s (y) 2 =2 n1 ) " 2 (n1) ] = ffE n1 : It follows that E n is (ff n ) and therefore is not bounded by a polynomial of n. 2 Recall the notion of a (simple) continued fraction <ref> [HW] </ref>. <p> Define (x; n) to comprise binary strings s of length jxj 1 such that N (s) is prime to and less than N (x). It is obvious that the dilation is certifiable. By Theorem 328 in <ref> [HW] </ref>, the number (k) of positive integers prime to and less than k is k . Notice that, if j is relatively prime to k, then so is k j.
Reference: [IL] <author> Russel Impagliazzo and Leonid A. Levin, </author> <title> "No Better Ways to Generate Hard NP Instances than Picking Uniformly at Random", </title> <booktitle> 31st Annual Symposium on Foundations of Computer Science, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1990. </year>
Reference-contexts: We mentioned already that the definition of RNP has been liberalized in [BCGL] by allowing more general distributions called samplable. Impagliazzo and Levin proved that every NP search problem with samplable distribution reduces via many-one PTime computable reductions to an NP search problem with PTime computable distribution <ref> [IL] </ref> (see also [BG2]). In an appropriate sense a search problem with a PTime computable distribution reduces to a decision problems with PTime computable distribution [BCGL]. Thus, Matrix Transformation is hard for the class of NP search problems with sam-plable distributions.
Reference: [Jo] <author> David S. Johnson, </author> <title> "The NP-Completeness Column", </title> <booktitle> Journal of Algorithms 5 (1984), </booktitle> <pages> 284-299. </pages>
Reference: [Kn1] <author> Donald E. Knuth, </author> <booktitle> "The Art of Computer Programming", </booktitle> <volume> Vol. 1, </volume> <booktitle> 2nd edition, </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1973. </year> <month> 37 </month>
Reference-contexts: Proof Use the extended Euclid's algorithm <ref> [Kn1] </ref>. 2 Remark 1 Instead of columns, we could use rows above in this section.
Reference: [Kn2] <author> Donald E. Knuth, </author> <title> "Big Omicron and Big Omega and Big Theta", </title> <journal> SIGACT News, </journal> <volume> Apr.-June, </volume> <year> 1976, </year> <pages> 18-24. </pages>
Reference-contexts: Proof Let g (l) f (l) mean that g (l) = fi (f (l)), i.e., that there exist positive constants c, c 0 and l 0 such that cf (l) g (l) c 0 f (l) for all l l 0 <ref> [Kn2] </ref>. It suffices to prove that the number N (l) of positive matrices of size l is fi (2 2l ).
Reference: [Le] <author> Leonid A. Levin, </author> <title> "Average Case Complete Problems", </title> <journal> SIAM Journal of Computing, </journal> <volume> No. 15, </volume> <year> 1986, </year> <pages> 285-286. </pages>
Reference-contexts: A decision problem is complete for NP if it belongs to NP and is hard for NP. Most known natural NP problems are either PTime decidable or NP complete. The theory of average case completeness was pioneered by Leonid Levin in <ref> [Le] </ref>. Levin replaced NP with the class RNP of NP problems with so-called PTime computable probability distributions [Le, Gu1]. He generalized PTime computability to computability in time polynomial on average (APtime computability) and defined many-one PTime reductions of RNP problems. <p> Most known natural NP problems are either PTime decidable or NP complete. The theory of average case completeness was pioneered by Leonid Levin in [Le]. Levin replaced NP with the class RNP of NP problems with so-called PTime computable probability distributions <ref> [Le, Gu1] </ref>. He generalized PTime computability to computability in time polynomial on average (APtime computability) and defined many-one PTime reductions of RNP problems. <p> that a bounded version of the known tiling problem together with a natural probability distribution is complete for RNP via many-one PTime reductions. (That is, the randomized tiling problem belongs to RNP and every problem in RNP reduces to it via many-one PTime reductions.) Another RNP problem, implicitly present in <ref> [Le] </ref>, is Bounded Halting, a bounded version of the standard halting problem together with natural probability distribution; this problem is explicitly defined and proved complete in [Gu1]. Some progress has been achieved in the meantime. <p> In the rest of the paper, an algorithm is a Turing machine. Traditional concepts of (worst-case) complexity are defined by means of the size function jxj. Concepts of average-case complexity are defined by averaging with respect to the probability distribution P X . As was pointed out by Levin <ref> [Le] </ref> and discussed in some detail in [BCGL, Gu1], the most obvious definition of the concept "polynomial time on average" has inappropriate consequences, and some care is needed to obtain a suitable definition. We use the following definition due to Levin [Le], as modified in [BG1] to allow 1 as a <p> As was pointed out by Levin <ref> [Le] </ref> and discussed in some detail in [BCGL, Gu1], the most obvious definition of the concept "polynomial time on average" has inappropriate consequences, and some care is needed to obtain a suitable definition. We use the following definition due to Levin [Le], as modified in [BG1] to allow 1 as a value. Definition 2.2 Let T be a function from a domain X to the interval [0; 1] of the real line augmented with 1. <p> A decision problem is complete for C if it belongs to C and is hard for C. RNP is the class of decision problems with PTime computable probability distributions. PTime computable distributions are defined in <ref> [Le] </ref> and analyzed in [Gu1]. 6 Positive matrices We now turn from the general theory of randomizing algorithms and reductions to the specific problem, Matrix Transformation, whose completeness for RNP we shall prove in Section 10. We begin with information about unimodular matrices.
Reference: [VL] <author> Ramarathnam Venkatesan and Leonid Levin, </author> " <title> Random Instances of a Graph Coloring Problem are Hard", </title> <booktitle> 20th Symp. on Theory of Computing, ACM, </booktitle> <year> 1988, </year> <pages> 217-222. </pages>
Reference-contexts: Some progress has been achieved in the meantime. In particular, the restriction to PTime computable distributions was liberalized [BCGL]; Levin's complete problems remained complete (we return to the issue of the liberalized RNP later in this introduction). The reduction theory has been revised <ref> [Gu1, BCGL, VL, BG1, BG2] </ref>. In particular, deterministic reductions, shown insufficient in [Gu1], have been replaced in [VL] by randomizing reductions; in other words reduction algorithms have been allowed to flip coins. This tuning up of the reduction theory continues in this paper. <p> The reduction theory has been revised [Gu1, BCGL, VL, BG1, BG2]. In particular, deterministic reductions, shown insufficient in [Gu1], have been replaced in <ref> [VL] </ref> by randomizing reductions; in other words reduction algorithms have been allowed to flip coins. This tuning up of the reduction theory continues in this paper. <p> In Sections 2-5 of this paper, we describe the current state of the reduction theory in full detail and in particular define a clean notion of randomized many-one reductions of randomized decision problems. A number of additional natural RNP complete problem have been found <ref> [Gu1, VL, Gu2, VR] </ref> but that number is still very small. Moreover, none of the known complete problems, however natural they are, arose in applications. All of them were designed specially for the purpose of finding additional average-case complete problems. <p> Therefore, we use the larger class, suggested in <ref> [VL] </ref>, of randomizing reductions, i.e., we allow the computation of the reducing function to flip coins. In order to introduce randomizing reductions, we need some auxiliary notions.
Reference: [VR] <author> Ramarathnam Venkatesan and Sivaramakrishnan Rajagopalan, </author> <title> "Average Case Intractability of Matrix and Diophantine Problems", </title> <booktitle> 24th Symp. on Theory of Computing, ACM, </booktitle> <year> 1992, </year> <pages> 632-642. </pages>
Reference-contexts: In Sections 2-5 of this paper, we describe the current state of the reduction theory in full detail and in particular define a clean notion of randomized many-one reductions of randomized decision problems. A number of additional natural RNP complete problem have been found <ref> [Gu1, VL, Gu2, VR] </ref> but that number is still very small. Moreover, none of the known complete problems, however natural they are, arose in applications. All of them were designed specially for the purpose of finding additional average-case complete problems. <p> Indeed, there are indications that it is solvable in time polynomial on average. However, Venkatesan and Rajagopalan proved that the same problem for higher-dimension matrices is complete for the average case <ref> [VR] </ref>. Since we deal almost exclusively with randomized decision problems, the term "decision problem" will usually mean "randomized decision problem"; similarly, the term "search problem" will usually mean "randomized search problem". Acknowledgment We thank Suzanne Zeitman for allowing us to publish her 4 proof that Integer Sum is NP complete.
Reference: [Mi] <author> Charles F. Miller, III, </author> <title> "Decision Problems in Algebraic Classes of Groups (a Survey)", in Word Problems, ed. by W.W. Boone, F.B. Cannonito, and R.C. Lyndon, </title> <publisher> North-Holland, </publisher> <year> 1973, </year> <pages> 507-523. </pages>
Reference-contexts: A simpler version of Matrix Transformation is obtained by making S just a set of unimodular matrices and asking whether another unimodular matrix X can be represented as a product of at most n matrices from S. This bounded version of the classical membership problem <ref> [Mi, p. 511] </ref> for SL 2 (Z) is NP complete; see Section 11 in this connection. However, we don't think that the naturally randomized version of the bounded membership (Section 11) problem is complete for the average case. <p> This is a bounded version of the membership problem <ref> [Mi] </ref> for SL 2 (Z). We show that it is NP complete. It is interesting open problem whether a natural randomization of it is RNP complete.
Reference: [YK] <author> Andrew C. Yao and Donald E. Knuth, </author> <title> "Analysis of the subtractive algorithm for greatest common divisors", </title> <booktitle> Proc. </booktitle> <institution> Nat. Acad. Sci USA 72:12 (1975), </institution> <month> 4720-4722. </month>
Reference-contexts: Proof Let s (n; m) be as in Lemma 6.11. We use the following strong result of Yao and Knuth <ref> [YK] </ref>: P m=n fi (n (log n) 2 ). Let X be a matrix of size l &gt; 0, and let a (X) &lt; b (X) form the major row of the matrix X.
Reference: [W] <author> Bartel L. van der Waerden, </author> <title> "Gruppen von Linearen Transformationen", </title> <publisher> Ergeb-nisse Math., IV.2, Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1935. </year> <month> 38 </month>
Reference-contexts: show that there is a matrix B 2 SL 2 (C) satisfying the conclusion of the theorem with C = B 1 (as T (I) = I), not only for all X 2 SL 2 (Z) but for all X 2 M 2 (C). (This information is essentially contained in <ref> [W, pages 19-21] </ref>, but for the reader's convenience we give a different, more detailed proof.) Once this is done, we shall complete the proof by showing that the entries of B must be integers.
References-found: 21

