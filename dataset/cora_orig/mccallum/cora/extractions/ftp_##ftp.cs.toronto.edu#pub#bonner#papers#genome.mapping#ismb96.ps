URL: ftp://ftp.cs.toronto.edu/pub/bonner/papers/genome.mapping/ismb96.ps
Refering-URL: http://www.cs.toronto.edu/DB/people/bonner/papers.html
Root-URL: 
Email: eharley@db.toronto.edu  bonner@db.toronto.edu  nat@genome.wi.mit.edu  
Title: Good Maps are Straight  
Author: Eric Harley Anthony J. Bonner Nathan Goodman Whitehead Institute/MIT 
Address: Toronto, Ont, Canada M5S 3G4  Toronto, Ont, Canada M5S 3G4  Cambridge, MA 02139, USA  
Affiliation: University of Toronto Dept. of Computer Science  University of Toronto Dept. of Computer Science  Center for Genome Research  
Abstract: This paper proposes a simplified approach to the assembly of large physical genome maps. The approach focuses on two key problems: (i) the integration of diverse forms of data from numerous sources, and (ii) the detection and removal of errors and anomalies in the data. The approach simplifies map assembly by dividing it into three phases|overlap, linkage and ordering. In the first phase, all forms of overlap data are integrated into a simple abstract structure, called clusters, where each cluster is a set of mutually-overlapping DNA segments. This phase filters out many questionable overlaps in the mapping data. In the second phase, clusters are linked together into a weighted intersection graph. False links between widely separated regions of the genome show up as crooked, branching structures in the graph. Removing these false links produces graphs that are straight, reflecting the linear structure of chromosomes. From these straight graphs, the third phase constructs a physical map. Graph algorithms and graph visualization play key roles in implementing the approach. At present, the approach is at an early stage of development: it has been tested on real and simulated mapping data, and the results look promising. This paper describes the first two phases of the approach in detail, and reports on our progress to date. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Arratia, R.; Lander, E. S.; Tavare, S.; and Waterman, M. S. </author> <year> 1991. </year> <title> Genomic mapping by anchoring random clones: </title> <journal> A mathematical analysis. </journal> <volume> Genomics 11: </volume> <pages> 806-827. </pages>
Reference-contexts: In this paper, we only consider edges of weight at least 2. This filters out many false links between widely separated regions of the genome (caused by an experimental anomaly called chimerism), generalizing the notion of double linkage <ref> (Arratia et al. 1991) </ref>. If the experimental data were perfect, then the linkage graph would be straight, i:e:, long, thin and nearly linear, reflecting the linear structure of chromosomes. 1 However, errors and anomalies in the data distort the graph. <p> Thus, we will only consider intersection graphs for which M 2, which we call double linkage intersection graphs. Double linkage is a good method for eliminating spurious connections caused by chimeras, since it is very unlikely that two chimeric YACs will happen to link the same unrelated STSs <ref> (Arratia et al. 1991) </ref>. However, it provides no defense against spurious links caused by repeat regions. It appears that most of the non-unit weight edges that link STSs on different chromosomes are caused by non-unique STSs, i.e., STSs that hit repeat regions.
Reference: <author> Bron, C.; and Kerbosch, J. </author> <year> 1971. </year> <title> Finding All Cliques of an Undirected Graph. </title> <journal> Communications of the ACM 16: </journal> <pages> 575-577. </pages>
Reference-contexts: Implementing the above approach involves developing numerous graph algorithms. For example, cluster formation is an NP-complete problem that reduces to finding all the maximal cliques in a graph. We have adapted the Bron-Kerbosch maximal clique algorithm <ref> (Bron & Kerbosch 1971) </ref> to exploit the sparsity of the graphs for overlap data. It generates all of the clusters for human genome data|40,000 of them|in 3 minutes. Other algorithms identify large-scale nonlinearities in our graphs, and others extract nearly-linear subgraphs from them. <p> Since 2 125 is an astronomically large number, and since we cannot expect to find a better-than-exponential algorithm for an NP-complete problem, we need heuristics to speed up the search. The branch and bound heuristic of <ref> (Bron & Ker-bosch 1971) </ref> is an effective method to reduce the search space for maximal cliques. We modified the Bron-Kerbosch algorithm in the following way. Since our graphs are large and sparse, we represented edges by adjacency lists rather than as a two-dimensional array.
Reference: <author> Chumakov, I. M.; Rigault, P.; Le Gall, I.; et al. </author> <year> 1995. </year>
Reference-contexts: Substantial progress towards this goal has been made. A library of megabase sized genomic fragments cloned in yeast (yeast artificial chromosomes, or YACs) was created and made available to the genome community by CEPH/Genethon <ref> (Chumakov et al. 1995) </ref>. Whitehead/MIT has assembled an STS-based map of the human genome consisting of 15,000 STSs screened against the CEPH YAC library (Hudson et al. 1995). The map is estimated to cover 95% of the genome. <p> <ref> (Chumakov et al. 1995) </ref>. Whitehead/MIT has assembled an STS-based map of the human genome consisting of 15,000 STSs screened against the CEPH YAC library (Hudson et al. 1995). The map is estimated to cover 95% of the genome. A clone based map from CEPH estimated to be about 75% complete (Chumakov et al. 1995) along with detailed "second-generation" physical maps of several human chromosomes by other labs have been published in the Genome Directory (cf: Genome Directory 1995). <p> The YAC count includes only YACs positive for at least one STS. Average YAC length was 1000 500 kb. the library screened by Whitehead has 8-fold coverage (Hudson et al. 1995), and the portion screened in the merged data set has 10-fold coverage <ref> (Chumakov et al. 1995) </ref>. STS Intersection Graphs One way to represent STS data is with a weighted intersection graph (Harley & Bonner 1994). In this graph, each node is an STS (or equivalently, the set of YACs hit by the STS).
References-found: 3

