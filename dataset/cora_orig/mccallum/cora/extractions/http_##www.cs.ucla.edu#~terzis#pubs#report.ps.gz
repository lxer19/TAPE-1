URL: http://www.cs.ucla.edu/~terzis/pubs/report.ps.gz
Refering-URL: http://www.cs.ucla.edu/~terzis/
Root-URL: http://www.cs.ucla.edu
Email: nikolud@cs.ucla.edu, terzis@cs.ucla.edu, lanw@cs.ucla.edu  
Title: Simulation of the Resource ReSerVation Protocol (RSVP) in PARSEC  
Author: Konstantinos Nikoloudakis, Andreas Terzis, Lan Wang 
Address: Los Angeles  
Affiliation: University of California,  
Abstract: We have implemented a simulator of the RSVP protocol using the PARSEC simulation language. Our simulator can work as a standalone program or it could be integrated as a module in a larger simulation environment. The user creates the desired topology and observes the progress of the simulation using a graphical user interface. The simulation data are also collected in log files for post processing. Due to its modular design, the RSVP simulator can coexist/cooperate with a large number of underlying network layers as well as scheduling and admission control algorithms. We plan in the future to use the simulator to gain a better understanding of RSVP and its interactions with other components of the Internet architecture. Experience and insight gained from this phase will be used in studies of RSVP scalability. 
Abstract-found: 1
Intro-found: 1
Reference: [Bag98] <author> R. Bagrodia. </author> <title> PARSEC User Manual. </title> <month> Feb </month> <year> 1998. </year>
Reference-contexts: These reasons lead us to develop an RSVP simulator. Simulation has many advantages over actual implementation/deployment since it offers a fully customizable and controllable environment and freedom from implementation details. Our simulator is written in the PARSEC <ref> [Bag98] </ref> simulation language. PARSEC is a C-based discrete event simulation language. It uses the process interaction approach to discrete-event simulation. In PARSEC an object or a set of objects (in our case RSVP daemons) is represented by a logical process.
Reference: [BZB + 97] <author> R. Braden, L. Zhang, S. Berson, S. Herzog, and S. Jamin. </author> <title> Resource ReSerVation Protocol (RSVP), Version 1 Functional Specification. </title> <type> RFC 2205, </type> <month> September </month> <year> 1997. </year>
Reference-contexts: 1 Introduction While RSVP ([ZDE + 93], <ref> [BZB + 97] </ref>) was initially designed in the early 90's as part of the Integrated Services architecture and many implementations exist today, the protocol has not been widely deployed in the Internet.
Reference: [BZS94] <author> Richard Braden, Lixia Zhang, and Scott Shenker. </author> <title> Integrated services in the internet architecture: An overview. </title> <type> RFC 1663, </type> <year> 1994. </year>
Reference-contexts: the functionality of an RSVP daemon running on a router forwarding RSVP messages and recording RSVP state, while the end-hosts should be able to initiate the procedure by sending PATH messages and RESV messages. 4.1 RSVP Daemon RSVP is a resource reservation setup protocol designed for an integrated services Internet <ref> [BZS94] </ref>. The RSVP protocol is used by a host to request specific qualities of service from the network for particular application data streams or flows.
Reference: [ISI] <author> ISI. </author> <note> http://www.isi.edu/rsvp. RSVP Home page. </note>
Reference-contexts: In the absence of refresh messages, the state automatically times out and is deleted. Our implementation of the RSVP daemon is based on the ISI implementation of the RSVP protocol <ref> [ISI] </ref>. We followed this approach since the ISI code is heavily tested and this way the development time for the simulator was greatly reduced. We have also to note that the entirety of the RSVP protocol was not implemented.
Reference: [NS97] <author> K. Nguyen and N. Sturtevant. </author> <title> A Simulation and Analysis of the Cache Group Management Protocol (CGMP). </title> <note> Available at http://irl.cs.ucla.edu/ khoi/cgmp, </note> <year> 1997. </year>
Reference-contexts: various nodes, for example by clicking with the middle mouse button on a daemon he can learn about its current state (reservations etc.) in a popup window. 5.1 Implementation The interface was implemented in Java from ideas and the reuse of some classes the were used in the interface in <ref> [NS97] </ref>. As shown in Fig. 1 the GUI communicates with the actual simulation by using TCP sockets. This allows the execution of the interface on another machine than the actual simulation, although it is not advisable because some of the interface features are rendered invalid.
Reference: [Wro97] <author> J. Wroclawski. </author> <title> Specification of the controlled-load network element service. </title> <type> RFC 2211, </type> <month> Sep </month> <year> 1997. </year> <month> 12 </month>
Reference-contexts: Both the sender and the receiver use the Controlled Load Service model, defined in RFC 2211 <ref> [Wro97] </ref> to describe the characteristics of the traffic sent and the desired amount of resources reserved. Other traffic modes (Guaranteed Service for example) are easy to implement.
Reference: [ZDE + 93] <author> L. Zhang, S. Deering, D. Es--trin, S. Shenker, and D. Zappala. RSVP: </author> <title> A New Resource ReSerVation Protocol. </title> <journal> IEEE Network, </journal> <volume> 7(5), </volume> <month> September </month> <year> 1993. </year> <month> 13 </month>
References-found: 7

