URL: http://www.cs.ucsd.edu/~calder/pfdc/papers/pfdc-ball.ps.Z
Refering-URL: http://www.cs.ucsd.edu/~calder/pfdc/program.html
Root-URL: http://www.cs.ucsd.edu
Email: tball@research.bell-labs.com larus@microsoft.com rosay@cs.wisc.edu  
Title: Analyzing Path Profiles with the Hot Path Browser  
Author: Thomas Ball James R. Larus Genevieve Rosay 
Affiliation: Bell Laboratories Microsoft Research Dept. of Computer Science Lucent Technologies Microsoft Corp. University of Wisconsin-Madison  
Abstract-found: 0
Intro-found: 1
Reference: [ABL97] <author> G. Ammons, T. Ball, and J.R. Larus. </author> <title> Exploiting hardware performance counters with flow and context sensitive profiling. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 32(5) </volume> <pages> 85-96, </pages> <month> June </month> <year> 1997. </year> <booktitle> Proceedings of the SIGPLAN '97 Conference on Programming Language Design and Implementation. </booktitle>
Reference-contexts: Without this understanding, consumers of measurement data-programmers, computer architects, compiler writers, etc.-can be distracted by minor moguls and miss important mountains. We have built a tool, called the Hot Path Browser (HPB) for graphically displaying path profiles <ref> [BL96, ABL97] </ref>. Paths provide a concise record of a program's dynamic control flow. Even large complex programs, such as gcc and Microsoft Word, only execute a few tens of thousands of paths in an execution. <p> HPB imports path profiles described in an extensible ASCII data format so that additional attributes may easily be associated with paths, procedures and files. Currently, profiles are created using the PP profiling tool of Ammons, Ball and Larus <ref> [BL96, ABL97] </ref>. PP instruments Solaris executable files to record intrapro-cedural path profiles. The paths PP records begin at procedure entry or a loop backedge and end at proce-dure exit or a loop backedge.
Reference: [BGS97] <author> R. Bodik, R. Gupta, and M. L. Soffa. </author> <title> Inter-procedural conditional branch elimination. </title> <booktitle> In Proceedings of the SIGPLAN '97 Conference on Programming Language Design and Implementation, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: These branches are logically dependent. Correlated branches when a branch controls the setting of a variable's value that is later branched on. Correlated branches lead to infeasible paths: paths that can never be executed. They can also be an indication of redundant checks <ref> [BGS97] </ref>. Of course, determining whether or not branches are correlated is an undecidable problem. However, path profiles give an approximation to correlated branches, and can be used to point to potentially correlated branches and correlated code.
Reference: [BL96] <author> T. Ball and J. R. Larus. </author> <title> Efficient path profiling. </title> <booktitle> In Proceedings of MICRO 96, </booktitle> <pages> pages 46-57, </pages> <month> December </month> <year> 1996. </year>
Reference-contexts: Without this understanding, consumers of measurement data-programmers, computer architects, compiler writers, etc.-can be distracted by minor moguls and miss important mountains. We have built a tool, called the Hot Path Browser (HPB) for graphically displaying path profiles <ref> [BL96, ABL97] </ref>. Paths provide a concise record of a program's dynamic control flow. Even large complex programs, such as gcc and Microsoft Word, only execute a few tens of thousands of paths in an execution. <p> HPB imports path profiles described in an extensible ASCII data format so that additional attributes may easily be associated with paths, procedures and files. Currently, profiles are created using the PP profiling tool of Ammons, Ball and Larus <ref> [BL96, ABL97] </ref>. PP instruments Solaris executable files to record intrapro-cedural path profiles. The paths PP records begin at procedure entry or a loop backedge and end at proce-dure exit or a loop backedge.
Reference: [LS95] <author> James R. Larus and Eric Schnarr. EEL: </author> <title> Machine-independent executable editing. </title> <booktitle> In Proceedings of the SIGPLAN '95 Conference on Programming Language Design and Implementation (PLDI), </booktitle> <pages> pages 291-300, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Measuring program behavior is easy; understanding program behavior is hard. It is not difficult to construct program profilers using instrumentation libraries such as ATOM [SE94], and EEL <ref> [LS95] </ref>. The resultant profiling tools can accurately and efficiently record many aspects of programs' execution. Such tools generate reams of data but offer little support to the end user in analyzing and understanding this data. Producing useful information that provides insight into a program's behavior remains a difficult task.
Reference: [SE94] <author> Amitabh Srivastava and Alan Eustace. </author> <title> ATOM: A system for building customized program analysis tools. </title> <journal> SIGPLAN Notices, </journal> <volume> 29(6) </volume> <pages> 196-205, </pages> <month> June </month> <year> 1994. </year> <booktitle> Proceedings of the ACM SIGPLAN '94 Conference on Programming Language Design and Implementation. </booktitle>
Reference-contexts: 1 Introduction Measuring program behavior is easy; understanding program behavior is hard. It is not difficult to construct program profilers using instrumentation libraries such as ATOM <ref> [SE94] </ref>, and EEL [LS95]. The resultant profiling tools can accurately and efficiently record many aspects of programs' execution. Such tools generate reams of data but offer little support to the end user in analyzing and understanding this data.
Reference: [Sne96] <author> Gregor Snelting. </author> <title> Reengineering of configurations based on mathematical concept analysis. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> 5(2) </volume> <pages> 146-189, </pages> <month> April </month> <year> 1996. </year> <title> Ball, Larus, Rosay: Analyzing Path Profiles with the Hot Path Browser 8 </title>
Reference-contexts: Before presenting hot subpaths to the user, we must determine how to identify these subpaths in an existing path profile. Concept analysis is a technique for identifying groups of objects that have common attributes <ref> [Sne96] </ref>. Concept analysis provides a useful data structure for reasoning about hot paths. The input to concept analysis is a boolean-valued table in which rows represent objects and columns represent attributes. An entry of the table is true if an object has an attribute and false otherwise.
References-found: 6

