URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr93/tr93-019.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr93-abstracts.html
Root-URL: http://www.cis.ufl.edu
Email: wdn@cis.ufl.edu  fishwick@cis.ufl.edu  
Title: An Object-Oriented Multimodel Design for Integrating Simulation and Planning Tasks  
Author: Jin Joo Lee William D. Norris II Paul A. Fishwick 
Date: June 3, 1993  
Affiliation: Department of Computer and Information Sciences University of Florida  
Abstract-found: 0
Intro-found: 1
Reference: [Boo91] <author> G. Booch. </author> <title> Object Oriented Design. </title> <publisher> Benjamin Cummings, </publisher> <year> 1991. </year>
Reference-contexts: Within computer simulation, the system entity structure (SES) [Zei90] (an extension of DEVS [PAG93, Pra91]) defines a way of organizing models within an inheritance hierarchy. In SES, models are refined into individual blocks that contain external and internal transition functions. Within the object oriented design literature <ref> [RBP + 91, Boo91] </ref>, the effort is very similar in that object oriented simulation is accomplished by building 1) a class model and 2) dynamic models for each object containing state information.
Reference: [Bro86] <author> R. A. Brooks. </author> <title> A robot layered control system for a mobile robot. </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> 2:14 - 23, </volume> <year> 1986. </year>
Reference-contexts: Dean [TW91] provides a good overview of the various problems and techniques available in these two areas. Most of the traditional planners 3 which have been built so far are either purely deliberative or purely reactive. Recently, there have been some efforts to develop a combined planner <ref> [Kae87, Bro86, FG90] </ref>. Due to the divided research between deliberative and reactive planners, the technology of the two fields has also been divided. We believe the major difficulty in trying to build a combined planner is integrating the different methods of each area. <p> Therefore, we require a planner that is able to plan and react in parallel. As illustrated in Fig. 7, the overall architecture of the planner is a multimodel. Due to the reactive nature of the problem, we have adopted Brook's subsumption architecture <ref> [Bro86] </ref> to integrate the different level modules. Our hierarchical approach is different from a conventional hierarchical planner in the sense that each of the levels have access to input and output. <p> If the Mixture Control module decides that its output is more critical, it will suppress the lower level output and replace the command with its own. For more detailed explanation of the suppressor function, refer to <ref> [Bro86] </ref>. 1 Note, these numbers are not related to the fuzzy set values in Exception Control. 14 4.3 Optimal Height Control Finally, the Optimal Height Control module controls the optimal height in order to maximize the profit.
Reference: [Cox92] <author> E. Cox. </author> <title> Fuzzy fundamentals. </title> <journal> IEEE Spectrum, </journal> <pages> pages 58 - 61, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: EMPTY, NORMAL) correspond to one superstate NOT FULL. The output set for valve V 3 is similar to the one for valves V 1 and V 2 . 11 12 As discussed in <ref> [SK92, Cox92] </ref>, fuzzy control has proved to be successful in many practical applications. Because the point where the basin overflows or becomes empty is exact, fuzzy logic may seem unnecessary.
Reference: [FG90] <author> I. Futo and T. </author> <title> Gergely. </title> <booktitle> Artificial Intelligence in Simulation. </booktitle> <publisher> Ellis Horwood Limited/John Wiley and Sons, </publisher> <year> 1990. </year> <month> 30 </month>
Reference-contexts: Dean [TW91] provides a good overview of the various problems and techniques available in these two areas. Most of the traditional planners 3 which have been built so far are either purely deliberative or purely reactive. Recently, there have been some efforts to develop a combined planner <ref> [Kae87, Bro86, FG90] </ref>. Due to the divided research between deliberative and reactive planners, the technology of the two fields has also been divided. We believe the major difficulty in trying to build a combined planner is integrating the different methods of each area.
Reference: [Fis91] <author> P. A. Fishwick. </author> <title> Heterogeneous Decomposition and Coupling for Combined Modeling. </title> <booktitle> In 1991 Winter Simulation Conference, </booktitle> <pages> pages 1199 - 1208, </pages> <address> Phoenix, AZ, </address> <month> December </month> <year> 1991. </year>
Reference-contexts: The problem is that phase three can be quite complex depending on the scale of the system being modeled. There needs to be a way of developing multi-level models that specify the phase three dynamics. Our approach is to use multimodels <ref> [FZ92, Fis91, Fis92, Fis93b, Mil93] </ref> for this purpose. Multimodeling is a paradigm for designing and executing models. We use several well defined model types and connect them, so that the lower levels refine the higher levels. <p> There has been previous work done in the integration of AI and Simulation [Nie91, O'K89]. However, combining different modeling paradigms and techniques is often a difficult task. Because of the ability to combine different modeling paradigms at multiple levels, we consider the object-oriented approach of multimodeling <ref> [Fis91, Fis92] </ref> to be a natural approach to solving the problem. There are advantages to be obtained by integrating simulation and planning. Because both the intelligent and non-intelligent objects are being modeled and simulated under one simulation, we are able to test and evaluate the performance of the overall system.
Reference: [Fis92] <author> P. A. Fishwick. </author> <title> An Integrated Approach to System Modelling using a Synthesis of Artificial Intelligence, </title> <booktitle> Software Engineering and Simulation Methodologies. ACM Transactions on Modeling and Computer Simulation, </booktitle> <volume> 2(4), </volume> <year> 1992. </year>
Reference-contexts: The problem is that phase three can be quite complex depending on the scale of the system being modeled. There needs to be a way of developing multi-level models that specify the phase three dynamics. Our approach is to use multimodels <ref> [FZ92, Fis91, Fis92, Fis93b, Mil93] </ref> for this purpose. Multimodeling is a paradigm for designing and executing models. We use several well defined model types and connect them, so that the lower levels refine the higher levels. <p> There has been previous work done in the integration of AI and Simulation [Nie91, O'K89]. However, combining different modeling paradigms and techniques is often a difficult task. Because of the ability to combine different modeling paradigms at multiple levels, we consider the object-oriented approach of multimodeling <ref> [Fis91, Fis92] </ref> to be a natural approach to solving the problem. There are advantages to be obtained by integrating simulation and planning. Because both the intelligent and non-intelligent objects are being modeled and simulated under one simulation, we are able to test and evaluate the performance of the overall system.
Reference: [Fis93a] <author> P. A. Fishwick. </author> <title> Computer Simulation Model Design & Execution. </title> <publisher> Prentice Hall, </publisher> <year> 1993. </year> <note> (to be published as a textbook). </note>
Reference-contexts: C fl (totalvolumeof input) where N is the amount of reward per unit of volume and C is the amount of money charged per unit of volume. 15 5 Simulating Multimodels 5.1 What are Multimodels? Models that are composed of other models, in a network or graph, are called mul-timodels <ref> [Fis93a] </ref>. Multimodels allow the modeling of large scale systems at varying levels of abstraction without loss of accuracy, and they combine the expressive power of several well known modeling types such as FSAs, Petri nets, block models, differential equations, and queuing models. <p> * Update () performs the specified function on the input signals and returns an output signal. * Output () is the outputs of the selected function blocks. 5.3.5 Differential Equation When a model requires continuous time/continuous state description, then we must specify that part of the model with differential equations <ref> [Fis93a] </ref>. The general form for a differential equation is either of the following: dx (t) = f (x; t) (1) Differential equations are used at (or near) the lowest level of abstraction in multi-models, to provide information about those objects in the system that have continuous states.
Reference: [Fis93b] <author> P. A. Fishwick. </author> <title> Discrete event dynamic systems: </title> <journal> Theory and applications. </journal> <note> (accepted for publication), </note> <year> 1993. </year>
Reference-contexts: The problem is that phase three can be quite complex depending on the scale of the system being modeled. There needs to be a way of developing multi-level models that specify the phase three dynamics. Our approach is to use multimodels <ref> [FZ92, Fis91, Fis92, Fis93b, Mil93] </ref> for this purpose. Multimodeling is a paradigm for designing and executing models. We use several well defined model types and connect them, so that the lower levels refine the higher levels.
Reference: [FZ92] <author> P. A. Fishwick and B. P. Zeigler. </author> <title> A Multimodel Methodology for Qualitative Model Engineering. </title> <journal> ACM Transactions on Modeling and Computer Simulation, </journal> <volume> 1(2):52 - 81, </volume> <year> 1992. </year>
Reference-contexts: The problem is that phase three can be quite complex depending on the scale of the system being modeled. There needs to be a way of developing multi-level models that specify the phase three dynamics. Our approach is to use multimodels <ref> [FZ92, Fis91, Fis92, Fis93b, Mil93] </ref> for this purpose. Multimodeling is a paradigm for designing and executing models. We use several well defined model types and connect them, so that the lower levels refine the higher levels.
Reference: [Har88] <author> D. Harel. </author> <title> On Visual Formalisms. </title> <journal> Communications of the ACM, </journal> <volume> 31(5):514 - 530, </volume> <month> May </month> <year> 1988. </year>
Reference-contexts: Within the object oriented design literature [RBP + 91, Boo91], the effort is very similar in that object oriented simulation is accomplished by building 1) a class model and 2) dynamic models for each object containing state information. Harel <ref> [Har88, Har92] </ref> defines useful visual modeling methods in the form of "state charts" so that the dynamics may be seen in the form of finite state machines. From our perspective the object oriented approach provides an excellent starting point when deciding how to organize information about dynamical systems: 1.
Reference: [Har92] <author> D. Harel. </author> <title> Biting the Silver Bullet: Toward a Brighter Future for System Developmen t. </title> <journal> IEEE Computer, </journal> <volume> 25(1):8 - 20, </volume> <month> January </month> <year> 1992. </year>
Reference-contexts: Within the object oriented design literature [RBP + 91, Boo91], the effort is very similar in that object oriented simulation is accomplished by building 1) a class model and 2) dynamic models for each object containing state information. Harel <ref> [Har88, Har92] </ref> defines useful visual modeling methods in the form of "state charts" so that the dynamics may be seen in the form of finite state machines. From our perspective the object oriented approach provides an excellent starting point when deciding how to organize information about dynamical systems: 1.
Reference: [Kae87] <author> L. P. Kaelbling. </author> <title> An architecture for intelligent reactive systems. </title> <booktitle> In Reasoning About Actions and Plans, </booktitle> <pages> pages 395 - 410. </pages> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, CA, </address> <year> 1987. </year>
Reference-contexts: Dean [TW91] provides a good overview of the various problems and techniques available in these two areas. Most of the traditional planners 3 which have been built so far are either purely deliberative or purely reactive. Recently, there have been some efforts to develop a combined planner <ref> [Kae87, Bro86, FG90] </ref>. Due to the divided research between deliberative and reactive planners, the technology of the two fields has also been divided. We believe the major difficulty in trying to build a combined planner is integrating the different methods of each area. <p> Our hierarchical approach is different from a conventional hierarchical planner in the sense that each of the levels have access to input and output. Since it is possible to have conflicting output commands, we need some type of coordination or mediation <ref> [Kae87] </ref> among them. Adopting the subsumption architecture's method of mediation, the outputs are suppressed 9 by a higher level when the higher level makes an overriding decision. In the original version of the subsumption architecture, a time period is specified, during which the output will be suppressed.
Reference: [Mil93] <author> V. T. Miller. </author> <title> Heterogeneous Hierarchical Modelling for Knowledge-Based Autonomous Systems. </title> <type> PhD thesis, </type> <institution> University of Florida, </institution> <year> 1993. </year>
Reference-contexts: The problem is that phase three can be quite complex depending on the scale of the system being modeled. There needs to be a way of developing multi-level models that specify the phase three dynamics. Our approach is to use multimodels <ref> [FZ92, Fis91, Fis92, Fis93b, Mil93] </ref> for this purpose. Multimodeling is a paradigm for designing and executing models. We use several well defined model types and connect them, so that the lower levels refine the higher levels.
Reference: [Nie91] <author> N. R. Nielsen. </author> <title> Applications of AI Techniques to Simulation. </title> <editor> In P. Fishwick and R. Modjeski, editors, </editor> <title> Knowledge Based Simulation: </title> <booktitle> Methodology and Application, </booktitle> <pages> pages 1 - 19. </pages> <publisher> Springer Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Thus, multimodeling allows the integration of these different techniques as submodels. With planning and control combined, we now want to integrate the different modeling types that exist in AI and simulation. There has been previous work done in the integration of AI and Simulation <ref> [Nie91, O'K89] </ref>. However, combining different modeling paradigms and techniques is often a difficult task. Because of the ability to combine different modeling paradigms at multiple levels, we consider the object-oriented approach of multimodeling [Fis91, Fis92] to be a natural approach to solving the problem.
Reference: [O'K89] <author> R. M. O'Keefe. </author> <title> The Role of Artificial Intelligence in Discrete Event Simulation. </title> <editor> In L. E. Widman, K. A. Loparo, and N. R. Nielsen, editors, </editor> <booktitle> Artificial Intelligence, Simulation & Modeling, </booktitle> <pages> pages 359 - 379. </pages> <publisher> John Wiley and Sons, </publisher> <year> 1989. </year>
Reference-contexts: Thus, multimodeling allows the integration of these different techniques as submodels. With planning and control combined, we now want to integrate the different modeling types that exist in AI and simulation. There has been previous work done in the integration of AI and Simulation <ref> [Nie91, O'K89] </ref>. However, combining different modeling paradigms and techniques is often a difficult task. Because of the ability to combine different modeling paradigms at multiple levels, we consider the object-oriented approach of multimodeling [Fis91, Fis92] to be a natural approach to solving the problem.
Reference: [PAG93] <author> H. Praehofer, G. Auernig, and Reisinger G. </author> <title> An environment for devs-based modeling in common lisp/closs. </title> <note> (accepted for publication), 1993. 31 </note>
Reference-contexts: 1 Introduction The object oriented approach to simulation is discussed in different literature camps. Within computer simulation, the system entity structure (SES) [Zei90] (an extension of DEVS <ref> [PAG93, Pra91] </ref>) defines a way of organizing models within an inheritance hierarchy. In SES, models are refined into individual blocks that contain external and internal transition functions.
Reference: [Pra91] <author> H. Praaehofer. </author> <title> Theoretic Foundations for Combined Discrete Continuous System Simulation. </title> <type> PhD thesis, </type> <institution> University Linz, Austria, </institution> <year> 1991. </year>
Reference-contexts: 1 Introduction The object oriented approach to simulation is discussed in different literature camps. Within computer simulation, the system entity structure (SES) [Zei90] (an extension of DEVS <ref> [PAG93, Pra91] </ref>) defines a way of organizing models within an inheritance hierarchy. In SES, models are refined into individual blocks that contain external and internal transition functions.
Reference: [RBP + 91] <author> J. Rumbaugh, M. Blaha, W. Premerlani, E. Frederick, and W Lorenson. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: Within computer simulation, the system entity structure (SES) [Zei90] (an extension of DEVS [PAG93, Pra91]) defines a way of organizing models within an inheritance hierarchy. In SES, models are refined into individual blocks that contain external and internal transition functions. Within the object oriented design literature <ref> [RBP + 91, Boo91] </ref>, the effort is very similar in that object oriented simulation is accomplished by building 1) a class model and 2) dynamic models for each object containing state information. <p> From our perspective the object oriented approach provides an excellent starting point when deciding how to organize information about dynamical systems: 1. Start with a concept model of the system. 2. Create a class model using a visual approach such as OMT <ref> [RBP + 91] </ref>. This phase should involve creating all relationships among classes. 3. Specify the dynamics for each class instance where state transition is a factor. Note that some classes will not contain state information and some relations may not be of a dynamic nature. 4.
Reference: [SK92] <author> D. G. Schwartz and G. J. Klir. </author> <title> Fuzzy logic flowers in Japan. </title> <journal> IEEE Spectrum, </journal> <pages> pages 32 - 35, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: EMPTY, NORMAL) correspond to one superstate NOT FULL. The output set for valve V 3 is similar to the one for valves V 1 and V 2 . 11 12 As discussed in <ref> [SK92, Cox92] </ref>, fuzzy control has proved to be successful in many practical applications. Because the point where the basin overflows or becomes empty is exact, fuzzy logic may seem unnecessary.
Reference: [TW91] <author> D. L. Thomas and M. P. Wellman. </author> <note> Planning and Control . Morgan Kauf-mann, </note> <year> 1991. </year>
Reference-contexts: A planner must have the ability to perform some form of long-range planning while reacting accordingly to any changes of the environment that may need immediate action. The next logical step is to combine planning and control to produce a planner that is both deliberative and reactive. Dean <ref> [TW91] </ref> provides a good overview of the various problems and techniques available in these two areas. Most of the traditional planners 3 which have been built so far are either purely deliberative or purely reactive. Recently, there have been some efforts to develop a combined planner [Kae87, Bro86, FG90]. <p> From the planning perspective, testing, evaluation and modification can be done without connecting the planner to an actual physical device or object. The Truck Depot problem was originally taken from <ref> [TW91] </ref>.
Reference: [Zad88] <author> L. A. Zadeh. </author> <title> Fuzzy logic. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 83 - 93, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: The Exception Control takes the state of the basin as input, which is the volume of the mixture in the basin, B vol and the volume of the mixture in the truck, T vol . With B vol , fuzzy logic <ref> [Zad88] </ref> is used to infer whether the basin is in an OVERFLOW or EMPTY state. With T vol , fuzzy sets are used to decide if the truck is in an OVERFLOW 10 state. Only when these conditions arise, does Exception Control react and send an output command.
Reference: [Zei90] <author> B. P. Zeigler. </author> <title> Object Oriented Simulation with Hierarchical, Modular Models: Intelligent Agents and Endomorphic Systems. </title> <publisher> Academic Press, </publisher> <year> 1990. </year> <month> 32 </month>
Reference-contexts: 1 Introduction The object oriented approach to simulation is discussed in different literature camps. Within computer simulation, the system entity structure (SES) <ref> [Zei90] </ref> (an extension of DEVS [PAG93, Pra91]) defines a way of organizing models within an inheritance hierarchy. In SES, models are refined into individual blocks that contain external and internal transition functions.
References-found: 22

