URL: ftp://mighp0.cs.man.ac.uk/pub/theses/horrocks/tableaux98.ps.gz
Refering-URL: http://www.cs.man.ac.uk/mig/people/horrocks/index.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: horrocks@cs.man.ac.uk  pfps@research.bell-labs.com  
Phone: 2  3  
Title: FaCT and DLP  
Author: Ian Horrocks ; and Peter F. Patel-Schneider 
Address: Manchester, Manchester M13 9PL, UK  Tecnologica, I-38050 Povo TN, ITALY  Murray Hill, NJ, U.S.A.  
Affiliation: 1 Medical Informatics Group, Department of Computer Science, University of  IRST, Istituto per la Ricerca Scientifica e  Bell Labs Research,  
Abstract: FaCT: The tests were performed using FaCT version 1.2. FaCT is a description logic classifier whose description language is a superset of K4 (m) and whose subsumption reasoning uses a sound and complete tableaux algorithm. FaCT employs a wide range of optimisations, in particular a form of dependency directed backtracking called backjumping which can significantly reduce the size of the search space [5]. The FaCT algorithm does not support KT and S4 explicitly, but FaCT includes a preprocessing and encoding optimisation which is also able to apply the standard embedding of KT and S4 in K and K4 respectively: the time taken for preprocessing and embedding is included in the results. Programming language: Common Lisp (compiled). DLP: The ideas in FaCT are being incorporated into a new generation of Description Logic systems. Initial experiments in this effort have resulted in a modal prover for a superset of K4 (m) , which has provisionally been called DLP. The DLP prover has control over several options, including backjumping and caching partial results. Both of these mechanisms have proved to be very useful in the benchmarks, with caching being the more powerful. As an experimental prover, there are essentially no user amenities in DLP, but the final Description Logic system will have a full user interface and other amenities. Programming language: ML (compiled). The other provers: For comparative purposes the tests for K and KT were repeated using three other available provers: Crack version 1.0 beta 15 [3], KSAT [4] and Kris [2, 1]. Crack and Kris are also description logic classifiers which use sound and complete tableaux algorithms while KSAT is a K (m) prover which uses an algorithm based on propositional satisfiability (SAT) testing. None of these systems supports transitive relations so they could not be used for S4. The KT tests were performed by using the standard embedding of KT in K: the time taken for the embedding is not included in the results for these systems. All three systems are programmed in Common Lisp (compiled). It should be pointed out that neither Crack nor Kris are intended as stand-alone K provers and for many classes of formula a significant improvement in their performance 
Abstract-found: 1
Intro-found: 1
Reference: 1. <editor> F. Baader, E. Franconi, B. Hollunder, B. Nebel, and H.-J. </editor> <title> Profitlich. An empirical analysis of optimization techniques for terminological representation systems. </title> <editor> In B. Nebel, C. Rich, and W. Swartout, editors, </editor> <booktitle> Principals of Knowledge Representation and Reasoning: Proceedings of the Third International Conference (KR'92), </booktitle> <pages> pages 270-281. </pages> <publisher> Morgan-Kaufmann, </publisher> <year> 1992. </year> <note> Also available as DFKI RR-93-03. </note>
Reference-contexts: Programming language: ML (compiled). The other provers: For comparative purposes the tests for K and KT were repeated using three other available provers: Crack version 1.0 beta 15 [3], KSAT [4] and Kris <ref> [2, 1] </ref>. Crack and Kris are also description logic classifiers which use sound and complete tableaux algorithms while KSAT is a K (m) prover which uses an algorithm based on propositional satisfiability (SAT) testing. None of these systems supports transitive relations so they could not be used for S4.
Reference: 2. <author> F. Baader and B. </author> <title> Hollunder. A terminological knowledge representation system with complete inference algorithms. </title> <booktitle> In Processing declarative knowledge: International workshop PDK'91, number 567 in Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 67-86, </pages> <address> Berlin, 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Programming language: ML (compiled). The other provers: For comparative purposes the tests for K and KT were repeated using three other available provers: Crack version 1.0 beta 15 [3], KSAT [4] and Kris <ref> [2, 1] </ref>. Crack and Kris are also description logic classifiers which use sound and complete tableaux algorithms while KSAT is a K (m) prover which uses an algorithm based on propositional satisfiability (SAT) testing. None of these systems supports transitive relations so they could not be used for S4.
Reference: 3. <author> P. Bresciani, E. Franconi, and S. Tessaris. </author> <title> Implementing and testing expressive description logics: a preliminary report. </title> <editor> In Gerard Ellis, Robert A. Levinson, An-drew Fall, and Veronica Dahl, editors, </editor> <title> Knowledge Retrieval, Use and Storage for Efficiency: </title> <booktitle> Proceedings of the First International KRUSE Symposium, </booktitle> <pages> pages 28-39, </pages> <year> 1995. </year>
Reference-contexts: Programming language: ML (compiled). The other provers: For comparative purposes the tests for K and KT were repeated using three other available provers: Crack version 1.0 beta 15 <ref> [3] </ref>, KSAT [4] and Kris [2, 1]. Crack and Kris are also description logic classifiers which use sound and complete tableaux algorithms while KSAT is a K (m) prover which uses an algorithm based on propositional satisfiability (SAT) testing.
Reference: 4. <author> F. Giunchiglia and R. Sebastiani. </author> <title> A SAT-based decision procedure for ALC. </title> <editor> In L. C. Aiello, J. Doyle, and S. Shapiro, editors, </editor> <booktitle> Principals of Knowledge Representation and Reasoning: Proceedings of the Fifth International Conference (KR'96), </booktitle> <pages> pages 304-314. </pages> <publisher> Morgan Kaufmann, </publisher> <month> November </month> <year> 1996. </year>
Reference-contexts: Programming language: ML (compiled). The other provers: For comparative purposes the tests for K and KT were repeated using three other available provers: Crack version 1.0 beta 15 [3], KSAT <ref> [4] </ref> and Kris [2, 1]. Crack and Kris are also description logic classifiers which use sound and complete tableaux algorithms while KSAT is a K (m) prover which uses an algorithm based on propositional satisfiability (SAT) testing.
Reference: 5. <author> I. Horrocks. </author> <title> Optimising Tableaux Decision Procedures for Description Logics. </title> <type> PhD thesis, </type> <institution> University of Manchester, </institution> <year> 1997. </year>
Reference-contexts: FaCT employs a wide range of optimisations, in particular a form of dependency directed backtracking called backjumping which can significantly reduce the size of the search space <ref> [5] </ref>. The FaCT algorithm does not support KT and S4 explicitly, but FaCT includes a preprocessing and encoding optimisation which is also able to apply the standard embedding of KT and S4 in K and K4 respectively: the time taken for preprocessing and embedding is included in the results.
References-found: 5

