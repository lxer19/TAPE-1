URL: http://www.it.kth.se/docs/Reports/DEGREE-PROJECT-REPORTS/mch-msc.ps.gz
Refering-URL: http://www.it.kth.se/docs/Reports/DEGREE-PROJECT-REPORTS/
Root-URL: http://www.it.kth.se
Title: Techniques for Runtime Code Generation in Instrumented Instruction Set Simulators  
Author: Magnus Christensson 
Address: Stockholm  
Affiliation: Institute of Computer Science Computer and Network Architectures Laboratory  Royal Institute of Technology Department of Teleinformatics  
Note: This work has been carried out at Swedish  
Email: mch@sics.se  
Degree: Master's thesis  
Date: 1997  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Jennifer M. Anderson, Lance M. Berc, Jeoerey Dean, Sanjay Ghemawat, Monika R. Henzinger, Shun-Tak A. Leung, Richard L. Sites, Mark T. Van-devoorde, Carl A. Waldspurger, and William E. Weihl. </author> <title> Continuous Pro-oling: Where Have All the Cycles Gone? Technical Report 1997-016a, </title> <institution> Digital Systems Research Center, </institution> <month> September </month> <year> 1997. </year>
Reference: [2] <author> Thomas Ball and James R. Larus. </author> <title> Optimally prooling and tracing programs. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 16(3):13191360, </volume> <month> July </month> <year> 1994. </year>
Reference: [3] <author> Robert C. Bedichek. </author> <title> Some EOEcient Architecture Simulation Techniques. </title> <booktitle> In Proceedings of Winter '90 USENIX Conference, </booktitle> <pages> pages 5363, </pages> <month> January </month> <year> 1990. </year>
Reference: [4] <author> Robert C. Bedichek. Talisman: </author> <title> Fast and accurate multicomputer simulation. </title> <booktitle> In Proceedings of the 1995 ACM SIGMETRICS Conference on Modeling and Measurement of Computer Systems, </booktitle> <month> May </month> <year> 1995. </year>
Reference: [5] <author> Robert C. Bedichek. </author> <title> Talisman 2 A Fugu System Simulator. </title> <note> Unpublished web page, </note> <year> 1996. </year>
Reference: [6] <author> James R. Bell. </author> <title> Threaded Code. </title> <journal> Communication of the ACM, </journal> <volume> 16(6):370 372, </volume> <month> June </month> <year> 1973. </year>
Reference: [7] <author> Robert F. Cmelik and David Keppel. Shade: </author> <title> A Fast Instruction-set Simulator for Execution Prooling. </title> <booktitle> In Proceedings of the '94 ACM SIGMETRICS Conference, </booktitle> <pages> pages 128137, </pages> <month> May </month> <year> 1994. </year>
Reference: [8] <institution> Digital Semiconductor. FX!32 Technical introduction. </institution>
Reference: [9] <author> Dawson R. Engler. </author> <title> VCODE: A retargetable, extensible, very fast dynamic code generation system. </title> <booktitle> In SIGPLAN Conference on Programming Language Design and Implementation, </booktitle> <month> May </month> <year> 1996. </year>
Reference: [10] <author> Dawson R. Engler, Wilson C. Hsieh, and M. Frans Kaashoek. </author> <title> `C: A language for high-level, eOEcient, and michine-independent dynamic code generation. </title> <booktitle> In Proceedings of the 23rd Annual ACM Symposium on Principles of Programming Languages, </booktitle> <month> January </month> <year> 1996. </year>
Reference: [11] <author> Dawson R. Engler and Todd A. Proebstring. </author> <title> DCG: An eOEcient, retar-getable dynamic code generation system. </title> <booktitle> In ASPLOS '94, </booktitle> <pages> pages 280287, </pages> <month> January </month> <year> 1994. </year>
Reference: [12] <author> John L. Hennessy and David A. Patterson. </author> <title> Computer Architecture A Quantitative Approach. </title> <publisher> Morgan Kaufmann, </publisher> <address> 2nd edition, </address> <year> 1996. </year> <note> 46 Bibliography 47 </note>
Reference-contexts: The latest revision of SPARC is version 9 [32] (the orst version was actually version 7). UltraSPARC documentation can be found in [29]. A.1 SPARC architecture The SPARC (Sun Processor ARChitecture, later Scalable Processor ARChitecture) is the result of computer architecture research at Berkeley in the early 1980s <ref> [12] </ref>.
Reference: [13] <author> Mathew J. Hostetter and Clioeord T. Matthews. </author> <title> Executor internals: How to eOEciently run mac programs on PCs. </title> <note> http://www.ardi.com/MacHack/machack.html, 1997. </note>
Reference: [14] <author> Mike Johnson. </author> <title> Superscalar Microprocessor Design. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference: [15] <author> Donald E. Knuth. </author> <title> An empirical study of FORTRAN programs. </title> <journal> Software Practice and Experience, </journal> <volume> 1(2):105133, </volume> <month> April/June </month> <year> 1971. </year>
Reference: [16] <author> Donald E. Knuth. </author> <booktitle> The Art of Computer Programming, </booktitle> <volume> Volume 1. </volume> <publisher> Addison-Wesley, 3rd edition, </publisher> <year> 1997. </year>
Reference: [17] <author> Fredrik Larsson. </author> <title> Generating eOEcient simulators from a speciocation language. </title> <institution> Research Report R97:03, Swedish Institute of Computer Science, </institution> <year> 1997. </year> <type> Master's thesis. </type>
Reference: [18] <author> Mark Leone and Peter Lee. </author> <title> Lightweight run-time code generation. </title> <booktitle> In ACM SIGPLAN Workshop on Partial Evaluation and Semantics-Based Program Manipulation, </booktitle> <month> June </month> <year> 1994. </year>
Reference: [19] <author> Peter S. Magnusson. </author> <title> EOEcient Simulation of Parallel Hardware. </title> <type> Master's thesis, </type> <institution> Royal Instiute of Technology (KTH), Stockholm, Sweden, </institution> <year> 1992. </year>
Reference: [20] <author> Peter S. Magnusson. </author> <title> Partial Translation. </title> <type> Technical Report T93:05, </type> <institution> Swedish Institute of Computer Science, </institution> <month> October </month> <year> 1993. </year>
Reference: [21] <author> Peter S. Magnusson. </author> <title> EOEcient instruction cache simulation and execution prooling with a threaded-code interpreter. </title> <booktitle> In Proceedings of the Winter Simulation Conference '97, </booktitle> <year> 1997. </year>
Reference: [22] <author> Peter S. Magnusson and Bengt Werner. </author> <booktitle> EOEcient Memory Simulation in SimICS. In Proceedings of the 28th Annual Simulation Symposium, </booktitle> <year> 1995. </year>
Reference: [23] <author> Cathy May. </author> <title> Mimic: A Fast System/370 Simulator. </title> <booktitle> In In Proceedings of the SIGPLAN '87 Symposium on Interpreters and Interpretive Techniques, </booktitle> <pages> pages 113, </pages> <month> June </month> <year> 1987. </year>
Reference: [24] <author> Massimiliano Poletto, Dawson R. Engler, and M. Frans Kaashoek. tcc: </author> <title> A system for fast, AEexible, and high-level dynamic code generation. </title> <booktitle> In SIG-PLAN Conference on Programming Language Design and Implementation, </booktitle> <year> 1997. </year>
Reference: [25] <author> Mendel Rosenblum, Stephen A. Herrod, Emmett Witchel, and Anoop Gupta. </author> <title> Complete computer system simulation: The SimOS approach. </title> <note> To appear in IEEE Parallel and Distributed Technology, </note> <year> 1997. </year>
Reference: [26] <author> David Samuelsson. </author> <title> System Level Interpretation of the SPARC V8 Instruction Set Architecture. </title> <institution> Research Report R94:23, Swedish Institute of Computer Science, </institution> <month> August </month> <year> 1994. </year>
Reference: [27] <author> Richard L. Sites, Anton Chernooe, Matthew B. Kerk, Maurice P. Marks, and Scott G. Robinson. </author> <title> Binary Translation. </title> <journal> Communications of the ACM, </journal> <volume> 36(2):6981, </volume> <month> February </month> <year> 1993. </year>
Reference: [28] <author> Richard M. Stallman. </author> <title> Using and Porting GNU C, </title> <note> version 2.0 (15 February 1992). Technical report, </note> <institution> Free Software Foundation, </institution> <address> Mass., USA, </address> <year> 1992. </year>
Reference: [29] <institution> Sun Microelectronics. </institution> <note> UltraSPARC I&II User's Manual, January 1997. 48 Bibliography </note>
Reference-contexts: Introduction to UltraSPARC Understanding the target architecture is paramount for performance sensitive programming. This appendix serves as an introduction to the only current SimICS target, Sun's UltraSPARC. The latest revision of SPARC is version 9 [32] (the orst version was actually version 7). UltraSPARC documentation can be found in <ref> [29] </ref>. A.1 SPARC architecture The SPARC (Sun Processor ARChitecture, later Scalable Processor ARChitecture) is the result of computer architecture research at Berkeley in the early 1980s [12].
Reference: [30] <author> Jack E. Veenstra and Robert J. Fowler. MINT: </author> <title> A front end for eOEcient simulation of shared-memory multiprocessors. </title> <booktitle> In Proceedings of the Second International Workshop on Modeling, Analysis and Simulation of Computer and Telecommunication Systems (MASCOTS), </booktitle> <pages> pages 201207, </pages> <month> Jan-uary </month> <year> 1994. </year>
Reference: [31] <author> David W. Wall. </author> <title> Predicting program behavior using real or estimated pro-oles. </title> <type> Technical Note TN-18, </type> <institution> Western Research Laboratory, </institution> <month> December </month> <year> 1990. </year>
Reference: [32] <author> David L. Weaver and Tom Germond, </author> <title> editors. The SPARC Architecture Manual, Version 9. </title> <publisher> Prentice Hall, </publisher> <year> 1994. </year>
Reference-contexts: Introduction to UltraSPARC Understanding the target architecture is paramount for performance sensitive programming. This appendix serves as an introduction to the only current SimICS target, Sun's UltraSPARC. The latest revision of SPARC is version 9 <ref> [32] </ref> (the orst version was actually version 7). UltraSPARC documentation can be found in [29]. A.1 SPARC architecture The SPARC (Sun Processor ARChitecture, later Scalable Processor ARChitecture) is the result of computer architecture research at Berkeley in the early 1980s [12].
Reference: [33] <author> Bengt Werner and Peter S. Magnusson. </author> <title> A hybrid simulation approach enabling performance characterization of large software systems. </title> <booktitle> In Proceedings of MASCOTS '97, </booktitle> <year> 1997. </year>
Reference: [34] <author> Emmett Witchel and Mendel Rosenblum. Embra: </author> <title> Fast and AEexible machine simulation. </title> <booktitle> In Proceedings of SIGMETRICS '96, </booktitle> <pages> pages 6879, </pages> <month> May </month> <year> 1996. </year>
References-found: 34

