URL: http://www.csc.ncsu.edu/eos/users/s/stsims/WWW/cwb/user.ps
Refering-URL: http://www.csc.ncsu.edu/eos/users/r/rance/WWW/cwb-nc.html
Root-URL: http://www.csc.ncsu.edu
Email: rance@csc.ncsu.edu stsims@eos.ncsu.edu  
Title: The Concurrency Workbench  User's Manual  
Author: Rance Cleaveland Steve Sims 
Note: Copyright c fl1996, 1997 by  
Date: September, 1997  
Address: Version 1.1  Raleigh, N.C. 27695-8206  
Affiliation: of North Carolina  Dept. of Computer Science N.C. State University  North Carolina State University  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> T. Bolognesi and E. Brinksma. </author> <title> Introduction to the ISO specification language LOTOS. </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> 14 </volume> <pages> 25-59, </pages> <year> 1987. </year>
Reference-contexts: Currently available languages are: Design language Command line argument Milner's Calculus of Communicating Systems (CCS) [14] ccs Version of CCS with prioritized actions [5] pccs Version of CCS with timed actions [15] tccs Hoare's Communicating Sequential Processes (CSP) [13] csp Basic Lotos <ref> [1] </ref> lotos The examples here use CCS as the design language. The tool is used in exactly the same fashion for other languages. See Section 4 for details on the syntax and semantics of each language. <p> DESIGN LANGUAGE SYNTAX AND SEMANTICS 4.6 Basic Lotos For an introduction to Basic Lotos, see <ref> [1] </ref>. We adopt the standard notation for all operators, but, for efficiency reasons, do not allow local process definitions. 4.6.1 Syntax of Basic Lotos A .lotos file simply consists of a sequence of process declarations. The full syntax of a .lotos file is shown in Figure 4.16.
Reference: [2] <author> G. Bruns. </author> <title> Distributed Systems Analysis With CCS. </title> <publisher> Prentice Hall, </publisher> <month> December </month> <year> 1996. </year>
Reference-contexts: In the SOS rules for each language the transitions relation for automata is denoted aut &gt; . aut 0 to indicate that the automaton aut may perform the action a and evolve to the automaton aut 0 . 4.2 CCS For an introduction to CCS we recommend <ref> [2] </ref> and [14]. 4.2.1 CCS Syntax A sample CCS specification was seen in Figure 3.1. Readers familiar with CCS will recognize that the standard syntax is used for all operators. The comment character is *. All text between a * and the end of line character is ignored.
Reference: [3] <author> U. Celikkan. </author> <title> Semantic Preorders in the Automated Verification of Concurrent Systems. </title> <type> PhD thesis, </type> <institution> North Carolina State University, </institution> <year> 1995. </year>
Reference-contexts: In a second approach fi is defined as a preorder (i.e. a relation that is reflexive and transitive) and hSys; Speci 2 fi indicates that Sys behaves the same or better than Spec. Efficient algorithms have been developed for equivalence and preorder checking <ref> [16, 3] </ref> and routines for performing these types of verification have been implemented in the CWB-NC. The CWB-NC provides appropriate diagnostic information for explaining why two systems fail to be related by a given semantic equivalence or preorder.
Reference: [4] <author> E.M. Clarke, </author> <title> E.A. Emerson, and A.P. Sistla. Automatic verification of finite-state concurrent systems using temporal logic specifications. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 8(2) </volume> <pages> 244-263, </pages> <month> April </month> <year> 1986. </year>
Reference-contexts: Many other logics may be efficiently translated into the mu-calculus; therefore, it may serve as the basis for model checking in a variety of different logics. The CWB-NC checks CTL <ref> [4] </ref> formulas using this approach. A third type of verification supported by the CWB-NC involves using a design language for defining both systems and specifications. Here the specification describes a system behavior more abstractly than the system description. <p> One then loads this file into a CWB-NC session (with the load command) and invokes the model checker with the chk command. Computation Tree Logic (CTL) <ref> [4] </ref> has proven to be an intuitive and easy to use logic for specifying temporal properties of systems, so we have extended the logic supported by the CWB-NC to include the CTL operators.
Reference: [5] <author> R. Cleaveland and M.C.B. Hennessy. </author> <title> Priorities in process algebra. </title> <journal> Information and Computation, </journal> 87(1/2):58-77, July/August 1990. 
Reference-contexts: The required argument indicates the design language to be used for describing systems. Currently available languages are: Design language Command line argument Milner's Calculus of Communicating Systems (CCS) [14] ccs Version of CCS with prioritized actions <ref> [5] </ref> pccs Version of CCS with timed actions [15] tccs Hoare's Communicating Sequential Processes (CSP) [13] csp Basic Lotos [1] lotos The examples here use CCS as the design language. The tool is used in exactly the same fashion for other languages. <p> PRIORITIZED CCS 25 4.3 Prioritized CCS For a description of this version of CCS with priorities, which we call PCCS, see <ref> [5, 6] </ref>. PCCS extends CCS by allowing different priority values to be assinged to actions to give higher priority communications preemptive power. Priority values are natural numbers and we adopt the convention that 0 has the highest priority and increasing numbers imply decreasing priorities.
Reference: [6] <author> R. Cleaveland, G. Luettgen, V. Natarajan, and S. Sims. </author> <title> Modeling and verifying distributed systems using priorities: A case study. </title> <booktitle> Software Concepts and Tools, </booktitle> <volume> 17 </volume> <pages> 50-62, </pages> <year> 1996. </year>
Reference-contexts: PRIORITIZED CCS 25 4.3 Prioritized CCS For a description of this version of CCS with priorities, which we call PCCS, see <ref> [5, 6] </ref>. PCCS extends CCS by allowing different priority values to be assinged to actions to give higher priority communications preemptive power. Priority values are natural numbers and we adopt the convention that 0 has the highest priority and increasing numbers imply decreasing priorities.
Reference: [7] <author> R. Cleaveland, E. Madelaine, and S. Sims. </author> <title> A front-end generator for verification tools. </title> <editor> In E. Brinksma, R. Cleaveland, K.G. Larsen, and B. Steffen, editors, </editor> <booktitle> Tools and Algorithms for the Construction and Analysis of Systems (TACAS '95), volume 1019 of Lecture Notes in Computer Science, </booktitle> <pages> pages 153-173, </pages> <address> Aarhus, Denmark, May 1995. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The design of the system exploits the language-independence of its analysis routines by localizing language-specific procedures (syntactic analyzers, semantic functions) in one module. This enables users to change the system description language of the CWB-NC using the Process Algebra Compiler of North Carolina (PAC-NC) <ref> [8, 7] </ref>. Using this tool a number of front ends have been implemented to support a number of different design languages which are listed in Section 3.1. In order to enable the tool to handle large "real-world" systems we have also paid great attention to issues of time- and space-efficiency. <p> In the syntax description, we also list the Lex regular expressions for any non-trivial tokens as well as the associativity and priority assigned to tokens. These are also the notations used by the PAC-NC <ref> [8, 7] </ref> to generate language interfaces for the CWB-NC. The grammars and SOS rule sets shown here are elided versions of the PAC-NC specifications for the corresponding languages. The complete versions are included with the CWB-NC distributions.
Reference: [8] <author> R. Cleaveland and S. Sims. </author> <title> The Process Algebra Compiler of North Carolina. </title> <address> URL http://www.csc.ncsu.edu/eos/users/s/stsims/WWW/pac/pac-nc.html. </address>
Reference-contexts: The design of the system exploits the language-independence of its analysis routines by localizing language-specific procedures (syntactic analyzers, semantic functions) in one module. This enables users to change the system description language of the CWB-NC using the Process Algebra Compiler of North Carolina (PAC-NC) <ref> [8, 7] </ref>. Using this tool a number of front ends have been implemented to support a number of different design languages which are listed in Section 3.1. In order to enable the tool to handle large "real-world" systems we have also paid great attention to issues of time- and space-efficiency. <p> In the syntax description, we also list the Lex regular expressions for any non-trivial tokens as well as the associativity and priority assigned to tokens. These are also the notations used by the PAC-NC <ref> [8, 7] </ref> to generate language interfaces for the CWB-NC. The grammars and SOS rule sets shown here are elided versions of the PAC-NC specifications for the corresponding languages. The complete versions are included with the CWB-NC distributions.
Reference: [9] <author> R. Cleaveland and S. Sims. </author> <title> The Concurrency Workbench of North Carolina. </title> <address> URL http://www.csc.ncsu.edu/eos/users/r/rance/WWW/cwb-nc.html. </address>
Reference-contexts: This document describes how to use a particular automatic verification tool: The Concurrency Workbench of North Carolina (CWB-NC) <ref> [9, 10] </ref>.
Reference: [10] <author> R. Cleaveland and S. Sims. </author> <title> The NCSU Concurrency Workbench. </title> <editor> In R. Alur and T. Henzinger, editors, </editor> <booktitle> Computer Aided Verification (CAV '96), Lecture Notes in Computer Science, </booktitle> <pages> pages 394-397, </pages> <address> New Brunswick, New Jersey, July 1996. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: This document describes how to use a particular automatic verification tool: The Concurrency Workbench of North Carolina (CWB-NC) <ref> [9, 10] </ref>.
Reference: [11] <author> Formal Systems (Europe) Ltd. </author> <title> Failures Divergence Refinement, User Manual and Tutorial Version 1.42, </title> <month> February </month> <year> 1995. </year>
Reference-contexts: CSP 37 A CWB-NC interface for Hoare's Communicating Sequential Processes (CSP) [13] has also been implemented. The version of CSP implemented here is similar to the version of CSP supported by the FDR tool <ref> [11] </ref>; however, our language does not allow for the communication of data values as is possible in the FDR version.
Reference: [12] <author> J. Gray. </author> <title> A CSP interface for the concurrency workbench. </title> <type> Undergraduate Honors Thesis, </type> <institution> Department of Computer Science, North Carolina State University, </institution> <month> May </month> <year> 1996. </year>
Reference-contexts: The version of CSP implemented here is similar to the version of CSP supported by the FDR tool [11]; however, our language does not allow for the communication of data values as is possible in the FDR version. The CSP interface was implemented by Joel Gray <ref> [12] </ref>. 4.5.1 Syntax of CSP A CSP specification is defined as a sequence of declarations in a .csp suffixed file as indicated by the grammar in Figure 4.12. Comments begin with -- and continue until an end of line character.
Reference: [13] <author> C.A.R. Hoare. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice-Hall, </publisher> <address> London, </address> <year> 1985. </year>
Reference-contexts: Currently available languages are: Design language Command line argument Milner's Calculus of Communicating Systems (CCS) [14] ccs Version of CCS with prioritized actions [5] pccs Version of CCS with timed actions [15] tccs Hoare's Communicating Sequential Processes (CSP) <ref> [13] </ref> csp Basic Lotos [1] lotos The examples here use CCS as the design language. The tool is used in exactly the same fashion for other languages. See Section 4 for details on the syntax and semantics of each language. <p> CSP 37 A CWB-NC interface for Hoare's Communicating Sequential Processes (CSP) <ref> [13] </ref> has also been implemented. The version of CSP implemented here is similar to the version of CSP supported by the FDR tool [11]; however, our language does not allow for the communication of data values as is possible in the FDR version.
Reference: [14] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <publisher> Prentice-Hall, </publisher> <address> London, </address> <year> 1989. </year> <note> 85 86 BIBLIOGRAPHY </note>
Reference-contexts: The required argument indicates the design language to be used for describing systems. Currently available languages are: Design language Command line argument Milner's Calculus of Communicating Systems (CCS) <ref> [14] </ref> ccs Version of CCS with prioritized actions [5] pccs Version of CCS with timed actions [15] tccs Hoare's Communicating Sequential Processes (CSP) [13] csp Basic Lotos [1] lotos The examples here use CCS as the design language. The tool is used in exactly the same fashion for other languages. <p> In the SOS rules for each language the transitions relation for automata is denoted aut &gt; . aut 0 to indicate that the automaton aut may perform the action a and evolve to the automaton aut 0 . 4.2 CCS For an introduction to CCS we recommend [2] and <ref> [14] </ref>. 4.2.1 CCS Syntax A sample CCS specification was seen in Figure 3.1. Readers familiar with CCS will recognize that the standard syntax is used for all operators. The comment character is *. All text between a * and the end of line character is ignored.
Reference: [15] <author> F. Moller and C. Tofts. </author> <title> A temporal calculus of communicating systems. </title> <editor> In J.C.M. Baeten and J.F. Groote, editors, </editor> <booktitle> CONCUR '91, volume 527 of Lecture Notes in Computer Science, </booktitle> <pages> pages 401-415, </pages> <address> Amsterdam, </address> <month> August </month> <year> 1991. </year> <note> Springer-Verlag. </note>
Reference-contexts: The required argument indicates the design language to be used for describing systems. Currently available languages are: Design language Command line argument Milner's Calculus of Communicating Systems (CCS) [14] ccs Version of CCS with prioritized actions [5] pccs Version of CCS with timed actions <ref> [15] </ref> tccs Hoare's Communicating Sequential Processes (CSP) [13] csp Basic Lotos [1] lotos The examples here use CCS as the design language. The tool is used in exactly the same fashion for other languages. See Section 4 for details on the syntax and semantics of each language. <p> is incapable of performing an internal action. stable (ae; se; p) = 8 : false if ae; se : p t true otherwise Table 4.3: Functions and predicates used in the SOS for TCCS (augmenting Table 4.1). 4.4 Timed CCS The version of Timed CCS (TCCS) implemented here, based on <ref> [15] </ref>, extends CCS to allow quantitative timing characteristics of a system to be described. In addition to the input, output, and internal actions of CCS, TCCS also allows delay actions, represented as natural numbers.
Reference: [16] <author> R. Paige and R.E. Tarjan. </author> <title> Three partition refinement algorithms. </title> <journal> SIAM Journal of Computing, </journal> <volume> 16(6) </volume> <pages> 973-989, </pages> <month> December </month> <year> 1987. </year>
Reference-contexts: In a second approach fi is defined as a preorder (i.e. a relation that is reflexive and transitive) and hSys; Speci 2 fi indicates that Sys behaves the same or better than Spec. Efficient algorithms have been developed for equivalence and preorder checking <ref> [16, 3] </ref> and routines for performing these types of verification have been implemented in the CWB-NC. The CWB-NC provides appropriate diagnostic information for explaining why two systems fail to be related by a given semantic equivalence or preorder.

References-found: 16

