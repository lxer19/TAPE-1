URL: http://compgeom.cs.uiuc.edu/~jeffe/pubs/emptiness.ps.gz
Refering-URL: http://compgeom.cs.uiuc.edu/~jeffe/pubs/tradeoff.html
Root-URL: http://www.cs.uiuc.edu
Title: Space-Time Tradeoffs for Emptiness Queries  Space-Time Tradeoffs for Emptiness Queries  
Author: Jeff Erickson 
Keyword: lower bounds, range searching, space-time tradeoff, partition graph  
Address: Durham, NC 27708-0129, USA;  
Affiliation: Center for Geometric Computing, Department of Computer Science, Duke University,  
Note: Submitted to SIAM Journal on Computing  AMS subject classification: 68Q25 (68U05) Abbreviated title:  
Email: jeffe@cs.duke.edu;  
Web: http://www:cs:duke:edu/ jeffe  
Date: April 3, 1998  
Abstract: We develop the first nontrivial lower bounds on the complexity of online hyperplane and halfspace emptiness queries. Our lower bounds apply to a general class of geometric range query data structures called partition graphs. Informally, a partition graph is a directed acyclic graph that describes a recursive decomposition of space. We show that any partition graph that supports hyperplane emptiness queries implicitly defines a half-space range query data structure in the Fredman/Yao semigroup arithmetic model, with the same asymptotic space and time bounds. Thus, results of Bronnimann, Chazelle, and Pach imply that any partition graph of size s that supports hyperplane emptiness queries in time t must satisfy the inequality st d = ((n= log n) d-(d-1)=(d+1) ). Using different techniques, we improve previous lower bounds for Hopcroft's problem|Given a set of points and hyperplanes, does any hyperplane contain a point?|in dimensions four and higher. Using this o*ine result, we show that for online hyperplane emptiness queries, (n d = polylog n) space is required to achieve polylogarithmic query time, and (n (d-1)=d = polylog n) query time is required if only O(n polylog n) space is available. These two lower bounds are optimal up to polylogarithmic factors. For two-dimensional queries, we obtain an optimal continuous tradeoff st 2 = (n 2 ) between these two extremes. Finally, using a lifting argument, we show that the same lower bounds hold for both o*ine and online halfspace emptiness queries in IR d(d+3)=2 . fl Portions of this research were done at the Computer Science Division, U. C. Berkeley, with the support of a Graduate Assistance in Areas of National Need fellowship. This research was also supported by NSF grant DMS-9627683 and by the U. S. Army Research Office MURI grant DAAH04-96-1-0013. Portions of this paper were presented at the 37th IEEE Symposium on Foundations of Computer Science [28] and at the 13th ACM Symposium on Computational Geometry [30]. See http://www:cs:duke:edu/ ~ jeffe/pubs/tradeoff:html for the most recent version of this paper. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. K. Agarwal and J. Erickson. </author> <title> Geometric range searching and its relatives. </title> <type> Tech. Rep. </type> <institution> CS-1997-11, Duke University, </institution> <month> September </month> <year> 1997. </year> <note> hhttp://www:cs:duke:edu/ ~ jeffe/pubs/ survey:htmli. 28 Jeff Erickson </note>
Reference-contexts: For comparison, the best known upper bounds are listed in Table 1. For a thorough overview of range searching techniques, results, and applications, see the surveys by Matousek [41] and by Agarwal and Erickson <ref> [1] </ref>. * Any partition graph that supports hyperplane queries requires (n) space, (n log n) pre processing time, and (log n) query time. * Any partition graph that supports hyperplane emptiness queries implicitly defines a halfspace range query data structure in the Fredman/Yao semigroup arithmetic model, with the same time and <p> Some of our lower bounds derive from the following result. Theorem 2.1 (Bronnimann, Chazelle, Pach [10]). Let P be a uniformly distributed set of points in the d-dimensional unit hypercube <ref> [0; 1] </ref> d . <p> The following results now immediately follow from Theorems 2.1 and 2.5. Corollary 4.2. Let P be a uniformly generated set of n points in <ref> [0; 1] </ref> d . With high probability, any partition graph of size s that supports halfspace counting or reporting queries for P in time t satisfies the inequality st d = ((n= log n) d-(d-1)=(d+1) ). Corollary 4.3. <p> Corollary 4.5. Let P be a uniformly generated set of n points in <ref> [0; 1] </ref> d . <p> The set fi P conv (A) can be rewritten as ffi fi fi fi i=1 9 i 2 <ref> [0; 1] </ref> r : j=1 r X ij = 1 : This is an orthogonal projection of the compact semialgebraic set ffi (P; A; fl) 2 C n+r fi [0; 1] rfin fi fi fi i=1 r X ij a j = p i ^ j=1 !* and is thus also <p> The set fi P conv (A) can be rewritten as ffi fi fi fi i=1 9 i 2 <ref> [0; 1] </ref> r : j=1 r X ij = 1 : This is an orthogonal projection of the compact semialgebraic set ffi (P; A; fl) 2 C n+r fi [0; 1] rfin fi fi fi i=1 r X ij a j = p i ^ j=1 !* and is thus also compact. It follows that Sep r (H; n) " C n is an orthogonal projection of the intersection of two compact sets and therefore must be compact.
Reference: [2] <author> P. K. Agarwal and J. Matousek. </author> <title> Ray shooting and parametric search. </title> <journal> SIAM J. Comput. </journal> <volume> 22(4) </volume> <pages> 794-806, </pages> <year> 1993. </year>
Reference-contexts: Perhaps the simplest type of query is an emptiness query (also called an existential query [6, 43]), which asks whether the query range contains any points in the set. Emptiness query data structures have been used to solve several geometric problems, including point location [19], ray shooting <ref> [2, 19, 39, 42] </ref>, nearest and farthest neighbor queries [2], linear programming queries [38, 11], depth ordering [9], collision detection [18], and output-sensitive convex hull construction [38, 12]. <p> Emptiness query data structures have been used to solve several geometric problems, including point location [19], ray shooting [2, 19, 39, 42], nearest and farthest neighbor queries <ref> [2] </ref>, linear programming queries [38, 11], depth ordering [9], collision detection [18], and output-sensitive convex hull construction [38, 12]. This paper presents the first nontrivial lower bounds on the complexity of data structures that support emptiness queries, where the query ranges are either arbitrary hyperplanes or arbitrary halfspaces. <p> Is there a reduction from hyperplane queries to halfspace queries that only increases the dimension by a constant factor (preferably two)? Finally, can our techniques be applied to other closely related problems, such as nearest neighbor queries <ref> [2] </ref>, linear programming queries [38, 11] and ray shooting queries [2, 19, 39, 42]? Acknowledgments I thank Pankaj Agarwal for suggesting studying the complexity of online emptiness problems. <p> Is there a reduction from hyperplane queries to halfspace queries that only increases the dimension by a constant factor (preferably two)? Finally, can our techniques be applied to other closely related problems, such as nearest neighbor queries [2], linear programming queries [38, 11] and ray shooting queries <ref> [2, 19, 39, 42] </ref>? Acknowledgments I thank Pankaj Agarwal for suggesting studying the complexity of online emptiness problems.
Reference: [3] <author> A. Aggarwal, M. Hansen, and T. Leighton. </author> <title> Solving query-retrieval problems by compacting Voronoi diagrams. </title> <booktitle> Proc. 22nd Annu. ACM Sympos. Theory Comput., </booktitle> <pages> pp. 331-340. </pages> <year> 1990. </year>
Reference-contexts: Corollary 7.6 is always an improvement (although a small one) over the lower bound in Corollary 4.3. 24 Jeff Erickson Space Preprocessing Query Time Source d = 2; 3 O (n) O (n log n) O (log n) <ref> [20, 3, 25] </ref> O (n) O (n 1+" ) O (n 1-1=bd=2c 2 O (log fl n) ) [37] O (n) O (n log n) O (n 1-1=bd=2c polylog n) [42] n s n bd=2c O (s polylog n) O ((n polylog n)=s 1=bd=2c ) [42] Table 2.
Reference: [4] <author> A. Andersson. </author> <title> Sublogarithmic searching without multiplications. </title> <booktitle> Proc. 36th Annu. IEEE Pympos. Found. Comput. Sci., </booktitle> <pages> pp. 655-663. </pages> <year> 1995. </year>
Reference-contexts: space requirements) [17, 40], any better lower bound must take the form of a space-time tradeoff. 1 Sublogarithmic or even constant query times can be obtained for axis-aligned rectangular queries in models of computation that allow bit manipulation and require integer inputs within a known bounded universe; see, for example, <ref> [4, 5, 13, 44, 45, 53] </ref>. No such result is known for non-orthogonal ranges, however.
Reference: [5] <author> A. Andersson. </author> <title> Faster deterministic sorting and searching in linear space. </title> <booktitle> Proc. 37th Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pp. 135-141. </pages> <year> 1996. </year>
Reference-contexts: space requirements) [17, 40], any better lower bound must take the form of a space-time tradeoff. 1 Sublogarithmic or even constant query times can be obtained for axis-aligned rectangular queries in models of computation that allow bit manipulation and require integer inputs within a known bounded universe; see, for example, <ref> [4, 5, 13, 44, 45, 53] </ref>. No such result is known for non-orthogonal ranges, however.
Reference: [6] <author> A. Andersson and K. Swanson. </author> <title> On the difficulty of range searching. </title> <journal> Comp. Geom. Theory Appl. </journal> <volume> 8 </volume> <pages> 115-122, </pages> <year> 1997. </year>
Reference-contexts: For example, a reporting query asks for the list of points in the query range, and a counting query asks for their number. Perhaps the simplest type of query is an emptiness query (also called an existential query <ref> [6, 43] </ref>), which asks whether the query range contains any points in the set. <p> Best known upper bounds for online hyperplane emptiness queries. The only nontrivial lower bound previously known for any class of online emptiness queries, in any model of computation, is due to Anderson and Swanson <ref> [6] </ref>.
Reference: [7] <author> S. Arya and D. M. Mount. </author> <title> Approximate range searching. </title> <booktitle> Proc. 11th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pp. 172-181. </pages> <year> 1995. </year>
Reference-contexts: In Section 5, we define polyhedral covers and develop bounds on their worst-case complexity. 3 This "curse of dimensionality" can sometimes be avoided by requiring only an approximation of the correct output; see, for example, <ref> [7, 24, 35] </ref>. 4 Jeff Erickson Using these combinatorial bounds, in Section 6, we (slightly) improve earlier lower bounds on the complexity of Hopcroft's o*ine point-hyperplane incidence problem in dimensions four and higher.
Reference: [8] <author> M. Ben-Or. </author> <title> Lower bounds for algebraic computation trees. </title> <booktitle> Proc. 15th Annu. ACM Sympos. Theory Comput., </booktitle> <pages> pp. 80-86. </pages> <year> 1983. </year>
Reference-contexts: The time to answer any range query must be at least (log n), even for a fixed one-dimensional point set, in any reasonable model of computation such as algebraic decision trees [48], algebraic computation trees <ref> [8] </ref>, or real RAMs [47]. 1 Since there are both linear-size data structures (with large query times) [36] and data structures with logarithmic query time (with large space requirements) [17, 40], any better lower bound must take the form of a space-time tradeoff. 1 Sublogarithmic or even constant query times can <p> Linear space and logarithmic query time are required to answer online queries. A simple reduction from the set intersection problem shows that (n log k + k log n) time is required for the o*ine problem in the algebraic decision tree and algebraic computation tree models <ref> [8, 48] </ref>. In this section, we derive the first nontrivial lower bounds on the complexity of halfspace emptiness queries. To prove our results, we use a simple reduction argument to transform hyperplane queries into halfspace queries in a higher-dimensional space [29, 27].
Reference: [9] <author> M. de Berg, M. Overmars, and O. Schwarzkopf. </author> <title> Computing and verifying depth orders. </title> <journal> SIAM J. Comput. </journal> <volume> 23 </volume> <pages> 437-446, </pages> <year> 1994. </year>
Reference-contexts: Emptiness query data structures have been used to solve several geometric problems, including point location [19], ray shooting [2, 19, 39, 42], nearest and farthest neighbor queries [2], linear programming queries [38, 11], depth ordering <ref> [9] </ref>, collision detection [18], and output-sensitive convex hull construction [38, 12]. This paper presents the first nontrivial lower bounds on the complexity of data structures that support emptiness queries, where the query ranges are either arbitrary hyperplanes or arbitrary halfspaces.
Reference: [10] <author> H. Bronnimann, B. Chazelle, and J. Pach. </author> <title> How hard is halfspace range searching. </title> <journal> Discrete Comput. Geom. </journal> <volume> 10 </volume> <pages> 143-155, </pages> <year> 1993. </year>
Reference-contexts: data structure is the number of partial sums, and the query time is the number of semigroup additions performed on these partial sums to obtain the required answer. (More formal definitions are given in Section 2.) Lower bounds have been established in this model for several types of query ranges <ref> [10, 14, 16, 54] </ref>, in many cases matching the complexities of the corresponding data structures, at least up to polylogarithmic factors. Unfortunately, emptiness queries are completely trivial in the semigroup arithmetic model. <p> Thus, results of Bronnimann, Chazelle, and Pach <ref> [10] </ref> immediately imply that st d = ((n= log n) d-(d-1)=(d+1) ). This lower bound applies with high probability to a randomly generated set of points. <p> The size of a storage scheme is the number of clusters, and the query time for a range q is the minimum number of clusters whose union is P " q. This is the formulation actually used to prove lower bounds in the semigroup arithmetic model 6 <ref> [10, 14, 16, 54] </ref>. Whether or not the clusters used to answer a query must be disjoint depends on the semigroup. If the semigroup is integral, the clusters must be disjoint for every query; on the other hand, if the semigroup is idempotent, clusters can overlap arbitrarily. <p> Thus, upper bounds developed for integral semigroups and lower bounds developed for idempotent semigroups apply to all other semigroups as well. Some of our lower bounds derive from the following result. Theorem 2.1 (Bronnimann, Chazelle, Pach <ref> [10] </ref>). Let P be a uniformly distributed set of points in the d-dimensional unit hypercube [0; 1] d . <p> This raises the frustrating possibility that closing the existing gaps between upper and lower bounds for other types of ranges, such as halfspaces <ref> [10] </ref>, will be impossible unless more realistic computational models are considered. <p> Since these bounds are achieved by current algorithms|exactly for hyperplanes [40], within polylogarithmic factors for halfspaces [42]|the only way to prove our conjecture is to improve the lower bounds. Our space-time tradeoffs derive from lower bounds for halfspace queries in the semigroup arithmetic model <ref> [10] </ref>, and our preprocessing-query tradeoffs follow from lower bounds on the complexity of polyhedral covers. Any improvements to these lower bounds would improve our results as well.
Reference: [11] <author> T. M. Chan. </author> <title> Fixed-dimensional linear programming queries made easy. </title> <booktitle> Proc. 12th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pp. 284-290. </pages> <year> 1996. </year>
Reference-contexts: Emptiness query data structures have been used to solve several geometric problems, including point location [19], ray shooting [2, 19, 39, 42], nearest and farthest neighbor queries [2], linear programming queries <ref> [38, 11] </ref>, depth ordering [9], collision detection [18], and output-sensitive convex hull construction [38, 12]. This paper presents the first nontrivial lower bounds on the complexity of data structures that support emptiness queries, where the query ranges are either arbitrary hyperplanes or arbitrary halfspaces. <p> Is there a reduction from hyperplane queries to halfspace queries that only increases the dimension by a constant factor (preferably two)? Finally, can our techniques be applied to other closely related problems, such as nearest neighbor queries [2], linear programming queries <ref> [38, 11] </ref> and ray shooting queries [2, 19, 39, 42]? Acknowledgments I thank Pankaj Agarwal for suggesting studying the complexity of online emptiness problems.
Reference: [12] <author> T. M. Chan. </author> <title> Output-sensitive results on convex hulls, extreme points, and related problems. </title> <journal> Discrete Comput. Geom. </journal> <volume> 16 </volume> <pages> 369-388, </pages> <year> 1996. </year>
Reference-contexts: Emptiness query data structures have been used to solve several geometric problems, including point location [19], ray shooting [2, 19, 39, 42], nearest and farthest neighbor queries [2], linear programming queries [38, 11], depth ordering [9], collision detection [18], and output-sensitive convex hull construction <ref> [38, 12] </ref>. This paper presents the first nontrivial lower bounds on the complexity of data structures that support emptiness queries, where the query ranges are either arbitrary hyperplanes or arbitrary halfspaces.
Reference: [13] <author> B. Chazelle. </author> <title> A functional approach to data structures and its use in multidimensional searching. </title> <journal> SIAM J. Comput. </journal> <volume> 17 </volume> <pages> 427-462, </pages> <year> 1988. </year>
Reference-contexts: space requirements) [17, 40], any better lower bound must take the form of a space-time tradeoff. 1 Sublogarithmic or even constant query times can be obtained for axis-aligned rectangular queries in models of computation that allow bit manipulation and require integer inputs within a known bounded universe; see, for example, <ref> [4, 5, 13, 44, 45, 53] </ref>. No such result is known for non-orthogonal ranges, however. <p> They show that (n log n= log t) space is required to answer axis-aligned rectangular emptiness queries in time t, in the so-called layered partition model; in particular, (n log n= log log n) space is required to achieve polyloga-rithmic query time in this model (but see <ref> [13] </ref> for better upper bounds in the integer RAM model). Our new lower bounds apply to a general class of geometric range query data structures called partition graphs. Informally, a partition graph is a directed acyclic graph that describes a recursive decomposition of space into connected regions.
Reference: [14] <author> B. Chazelle. </author> <title> Lower bounds on the complexity of polytope range searching. </title> <journal> J. Amer. Math. Soc. </journal> <volume> 2 </volume> <pages> 637-666, </pages> <year> 1989. </year>
Reference-contexts: data structure is the number of partial sums, and the query time is the number of semigroup additions performed on these partial sums to obtain the required answer. (More formal definitions are given in Section 2.) Lower bounds have been established in this model for several types of query ranges <ref> [10, 14, 16, 54] </ref>, in many cases matching the complexities of the corresponding data structures, at least up to polylogarithmic factors. Unfortunately, emptiness queries are completely trivial in the semigroup arithmetic model. <p> model do not apply to the problem of counting the number of points in the query range, even though (ZZ; +) is a faithful semigroup, since a storage scheme for that problem only needs to work for the particular weight function w (p) = 1 for all p 2 P <ref> [14] </ref>. For the same reason, even though the semigroup (ftrue; falseg; _) is faithful, the semigroup model cannot be used to prove lower bounds for emptiness queries. <p> The size of a storage scheme is the number of clusters, and the query time for a range q is the minimum number of clusters whose union is P " q. This is the formulation actually used to prove lower bounds in the semigroup arithmetic model 6 <ref> [10, 14, 16, 54] </ref>. Whether or not the clusters used to answer a query must be disjoint depends on the semigroup. If the semigroup is integral, the clusters must be disjoint for every query; on the other hand, if the semigroup is idempotent, clusters can overlap arbitrarily. <p> In particular, Chazelle's lower bound st d = (n d = log d n) for simplex range searching <ref> [14] </ref>, which holds when the query ranges are slabs bounded by two parallel hyperplanes, does not apply when the ranges are hyperplanes; Chazelle's proof requires a positive lower bound on the width of the slabs.
Reference: [15] <author> B. Chazelle. </author> <title> Lower bounds for orthogonal range searching, I: The reporting case. </title> <editor> J. </editor> <booktitle> ACM 37 </booktitle> <pages> 200-212, </pages> <year> 1990. </year>
Reference-contexts: If the query range is empty, we perform no additions; conversely, if we perform even a single addition, the query range must not be empty. Similar arguments apply to Tarjan's pointer machine model [52], which has been used to derive output-sensitive lower bounds for several types of reporting queries <ref> [15, 21] </ref>. In fact, the only lower bounds previously known for hyperplane emptiness queries are essentially trivial. The size of any range searching data structure must be (n), since it must store each of the points.
Reference: [16] <author> B. Chazelle. </author> <title> Lower bounds for orthogonal range searching, II: The arithmetic model. </title> <editor> J. </editor> <booktitle> ACM 37 </booktitle> <pages> 439-463, </pages> <year> 1990. </year>
Reference-contexts: data structure is the number of partial sums, and the query time is the number of semigroup additions performed on these partial sums to obtain the required answer. (More formal definitions are given in Section 2.) Lower bounds have been established in this model for several types of query ranges <ref> [10, 14, 16, 54] </ref>, in many cases matching the complexities of the corresponding data structures, at least up to polylogarithmic factors. Unfortunately, emptiness queries are completely trivial in the semigroup arithmetic model. <p> The size of a storage scheme is the number of clusters, and the query time for a range q is the minimum number of clusters whose union is P " q. This is the formulation actually used to prove lower bounds in the semigroup arithmetic model 6 <ref> [10, 14, 16, 54] </ref>. Whether or not the clusters used to answer a query must be disjoint depends on the semigroup. If the semigroup is integral, the clusters must be disjoint for every query; on the other hand, if the semigroup is idempotent, clusters can overlap arbitrarily.
Reference: [17] <author> B. Chazelle. </author> <title> Cutting hyperplanes for divide-and-conquer. </title> <journal> Discrete Comput. Geom. </journal> <volume> 9(2) </volume> <pages> 145-158, </pages> <year> 1993. </year>
Reference-contexts: for a fixed one-dimensional point set, in any reasonable model of computation such as algebraic decision trees [48], algebraic computation trees [8], or real RAMs [47]. 1 Since there are both linear-size data structures (with large query times) [36] and data structures with logarithmic query time (with large space requirements) <ref> [17, 40] </ref>, any better lower bound must take the form of a space-time tradeoff. 1 Sublogarithmic or even constant query times can be obtained for axis-aligned rectangular queries in models of computation that allow bit manipulation and require integer inputs within a known bounded universe; see, for example, [4, 5, 13, <p> We will take the traditional computational-geometric view that geometric objects are represented by arbitrary real coordinates, for which bit manipulation is impossible. 2 Jeff Erickson Space Preprocessing Query Time Source O (n d = log d n) O (n d = log d-" n) O (log n) <ref> [17, 40] </ref> O (n) O (n log n) O (n 1-1=d polylog n) [36] n s n d = log d n O (n 1+" + s log " n) O (n=s 1=d ) [17, 40] Table 1. Best known upper bounds for online hyperplane emptiness queries. <p> (n d = log d n) O (n d = log d-" n) O (log n) <ref> [17, 40] </ref> O (n) O (n log n) O (n 1-1=d polylog n) [36] n s n d = log d n O (n 1+" + s log " n) O (n=s 1=d ) [17, 40] Table 1. Best known upper bounds for online hyperplane emptiness queries. The only nontrivial lower bound previously known for any class of online emptiness queries, in any model of computation, is due to Anderson and Swanson [6]. <p> Except when s is near n d , our upper bounds in the semigroup model are significantly better than the best known upper bounds in more realistic models of computation. The most efficient data structure known satisfies the upper bound st d = O (n d ) <ref> [17, 40] </ref>, and this is believed to be optimal, especially in light of Chazelle's simplex range searching lower bounds. We are not suggesting that this data structure can be significantly improved, but rather that the semigroup model is too powerful to permit tight lower bounds for this range searching problem. <p> When d 3, these bounds apply to arbitrary partition graphs. Although in general these bounds are far from optimal, there are two interesting special cases that match known upper bounds <ref> [17, 36, 40] </ref> up to polylogarithmic factors. Space-Time Tradeoffs for Emptiness Queries 23 Corollary 7.3. Any polyhedral partition graph that supports hyperplane emptiness queries after O (n polylog n) preprocessing time requires query time (n (d-1)=d = polylog n) in the worst case. <p> Corollary 7.5. Any trim partition graph of size s that supports line emptiness queries in time t satisfies the inequality st 2 = (n 2 ) in the worst case. This lower bound is optimal, up to constant factors. Chazelle <ref> [17] </ref> and Matousek [40] describe a family of line query data structures with st 2 = O (n 2 ). Corollary 7.6. <p> The situation is entirely different for halfspace queries. The best halfspace counting data structure known requires roughly (n d ) space to achieve logarithmic query time <ref> [17, 40] </ref>; whereas, the same query time can be achieved with o (n bd=2c ) space if we only want to know whether the halfspace is empty [42]. Table 2 lists the resource bounds for the best known online halfspace emptiness data structures.
Reference: [18] <author> B. Chazelle, H. Edelsbrunner, L. Guibas, and M. Sharir. </author> <title> Algorithms for bichromatic line segment problems and polyhedral terrains. </title> <journal> Algorithmica 11 </journal> <pages> 116-132, </pages> <year> 1994. </year> <title> Space-Time Tradeoffs for Emptiness Queries 29 </title>
Reference-contexts: Emptiness query data structures have been used to solve several geometric problems, including point location [19], ray shooting [2, 19, 39, 42], nearest and farthest neighbor queries [2], linear programming queries [38, 11], depth ordering [9], collision detection <ref> [18] </ref>, and output-sensitive convex hull construction [38, 12]. This paper presents the first nontrivial lower bounds on the complexity of data structures that support emptiness queries, where the query ranges are either arbitrary hyperplanes or arbitrary halfspaces. <p> Proof: Szemeredi and Trotter [51] (see also <ref> [18, 50] </ref>) proved that there are at most O (n+n 2=3 k 2=3 + k) incidences between any set of n points and any set of k lines. <p> points and n hyperplanes with (n 2d=(d+1) ) incident pairs, such that no d points lie on the intersection of d hyperplanes, or in other words, such that the bipartite incidence graph of P and H does not have K d;d as a subgraph. (The results of Clarkson et al. <ref> [18] </ref> and of Guibas, Overmars, and Robert [33] imply that this is the smallest forbidden subgraph for which the desired lower bound is possible.) An upper bound of ffi d (n; n) = O (n 2d=(d+1) 2 O (log fl n) follows from the running time of Matousek's algorithm for Hopcroft's
Reference: [19] <author> B. Chazelle and J. Friedman. </author> <title> Point location among hyperplanes and unidirectional ray-shooting. </title> <journal> Comput. Geom. Theory Appl. </journal> <volume> 4 </volume> <pages> 53-62, </pages> <year> 1994. </year>
Reference-contexts: Perhaps the simplest type of query is an emptiness query (also called an existential query [6, 43]), which asks whether the query range contains any points in the set. Emptiness query data structures have been used to solve several geometric problems, including point location <ref> [19] </ref>, ray shooting [2, 19, 39, 42], nearest and farthest neighbor queries [2], linear programming queries [38, 11], depth ordering [9], collision detection [18], and output-sensitive convex hull construction [38, 12]. <p> Perhaps the simplest type of query is an emptiness query (also called an existential query [6, 43]), which asks whether the query range contains any points in the set. Emptiness query data structures have been used to solve several geometric problems, including point location [19], ray shooting <ref> [2, 19, 39, 42] </ref>, nearest and farthest neighbor queries [2], linear programming queries [38, 11], depth ordering [9], collision detection [18], and output-sensitive convex hull construction [38, 12]. <p> Is there a reduction from hyperplane queries to halfspace queries that only increases the dimension by a constant factor (preferably two)? Finally, can our techniques be applied to other closely related problems, such as nearest neighbor queries [2], linear programming queries [38, 11] and ray shooting queries <ref> [2, 19, 39, 42] </ref>? Acknowledgments I thank Pankaj Agarwal for suggesting studying the complexity of online emptiness problems.
Reference: [20] <author> B. Chazelle, L. J. Guibas, and D. T. Lee. </author> <title> The power of geometric duality. </title> <journal> BIT 25 </journal> <pages> 76-90, </pages> <year> 1985. </year>
Reference-contexts: Corollary 7.6 is always an improvement (although a small one) over the lower bound in Corollary 4.3. 24 Jeff Erickson Space Preprocessing Query Time Source d = 2; 3 O (n) O (n log n) O (log n) <ref> [20, 3, 25] </ref> O (n) O (n 1+" ) O (n 1-1=bd=2c 2 O (log fl n) ) [37] O (n) O (n log n) O (n 1-1=bd=2c polylog n) [42] n s n bd=2c O (s polylog n) O ((n polylog n)=s 1=bd=2c ) [42] Table 2.
Reference: [21] <author> B. Chazelle and B. Rosenberg. </author> <title> Simplex range reporting on a pointer machine. </title> <journal> Comput. Geom. Theory Appl. </journal> <volume> 5 </volume> <pages> 237-247, </pages> <year> 1996. </year>
Reference-contexts: If the query range is empty, we perform no additions; conversely, if we perform even a single addition, the query range must not be empty. Similar arguments apply to Tarjan's pointer machine model [52], which has been used to derive output-sensitive lower bounds for several types of reporting queries <ref> [15, 21] </ref>. In fact, the only lower bounds previously known for hyperplane emptiness queries are essentially trivial. The size of any range searching data structure must be (n), since it must store each of the points.
Reference: [22] <author> B. Chazelle. </author> <title> Lower bounds for off-line range searching. </title> <journal> Discrete Comput. Geom. </journal> <volume> 17(1) </volume> <pages> 53-66, </pages> <year> 1997. </year>
Reference-contexts: With high probability, any storage scheme of size s that supports halfspace queries in P in time t must satisfy the inequality st d = ((n= log n) d-(d-1)=(d+1) ). 2.2 Unreasonably Good Bounds for Hyperplane Queries Although lower bounds are known for o*ine hyperplane searching in the semigroup model <ref> [22, 29] </ref>, we are unaware of any previous results for online hyperplane queries.
Reference: [23] <author> K. Clarkson, H. Edelsbrunner, L. Guibas, M. Sharir, and E. Welzl. </author> <title> Combinatorial complexity bounds for arrangements of curves and spheres. </title> <journal> Discrete Comput. Geom. </journal> <volume> 5 </volume> <pages> 99-160, </pages> <year> 1990. </year>
Reference-contexts: Theorem 2.5. A storage scheme of size s that supports d-dimensional hyperplane queries in time t must satisfy the inequality st d (d+1)=2 = (n d ) in the worst case. Space-Time Tradeoffs for Emptiness Queries 7 Using techniques of Clarkson et al. <ref> [23] </ref>, Guibas, Overmars, and Robert [33] prove that if any d points in an n-point set P lie on a unique hyperplane, then for any set H of k hyperplanes, I (P; H) = O (n + n d=(2d-1) k (2d-2)=(2d-1) + k).
Reference: [24] <author> K. L. Clarkson. </author> <title> An algorithm for approximate closest-point queries. </title> <booktitle> Proc. 10th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pp. 160-164. </pages> <year> 1994. </year>
Reference-contexts: In Section 5, we define polyhedral covers and develop bounds on their worst-case complexity. 3 This "curse of dimensionality" can sometimes be avoided by requiring only an approximation of the correct output; see, for example, <ref> [7, 24, 35] </ref>. 4 Jeff Erickson Using these combinatorial bounds, in Section 6, we (slightly) improve earlier lower bounds on the complexity of Hopcroft's o*ine point-hyperplane incidence problem in dimensions four and higher.
Reference: [25] <author> D. P. Dobkin and D. G. Kirkpatrick. </author> <title> Determining the separation of preprocessed polyhedra - a unified approach. </title> <booktitle> Proc. 17th Internat. Colloq. Automata Lang. Program., </booktitle> <pages> pp. 400-413. </pages> <publisher> Lecture Notes Comput. Sci. 443, Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Corollary 7.6 is always an improvement (although a small one) over the lower bound in Corollary 4.3. 24 Jeff Erickson Space Preprocessing Query Time Source d = 2; 3 O (n) O (n log n) O (log n) <ref> [20, 3, 25] </ref> O (n) O (n 1+" ) O (n 1-1=bd=2c 2 O (log fl n) ) [37] O (n) O (n log n) O (n 1-1=bd=2c polylog n) [42] n s n bd=2c O (s polylog n) O ((n polylog n)=s 1=bd=2c ) [42] Table 2.
Reference: [26] <author> R. Dwyer and W. Eddy. </author> <title> Maximal empty ellipsoids. </title> <journal> Internat. J. Comput. Geom. Appl. </journal> <volume> 6 </volume> <pages> 169-186, </pages> <year> 1996. </year>
Reference-contexts: In this section, we derive the first nontrivial lower bounds on the complexity of halfspace emptiness queries. To prove our results, we use a simple reduction argument to transform hyperplane queries into halfspace queries in a higher-dimensional space [29, 27]. A similar transformation is described by Dwyer and Eddy <ref> [26] </ref>.
Reference: [27] <author> J. Erickson. </author> <title> On the relative complexities of some geometric problems. </title> <booktitle> Proc. 7th Canad. Conf. Comput. Geom., </booktitle> <pages> pp. 85-90. </pages> <year> 1995. </year>
Reference-contexts: In this section, we derive the first nontrivial lower bounds on the complexity of halfspace emptiness queries. To prove our results, we use a simple reduction argument to transform hyperplane queries into halfspace queries in a higher-dimensional space <ref> [29, 27] </ref>. A similar transformation is described by Dwyer and Eddy [26].
Reference: [28] <author> J. Erickson. </author> <title> New lower bounds for halfspace emptiness. </title> <booktitle> Proc. 37th Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pp. 472-481. </pages> <year> 1996. </year>
Reference-contexts: We can combine the lower bounds from all dimensions 1 i d into a single expression, as in <ref> [29, 28] </ref>: ffi d X : If the relative growth rates of n and k are fixed, this entire sum reduces to a single term. <p> Marginally better lower bounds in dimensions 14 and higher (!) Space-Time Tradeoffs for Emptiness Queries 27 can be obtained directly in the polyhedral partition graph model by generalizing the arguments in Sections 5 and 6 (as in <ref> [28] </ref>). However, since these lower bounds are far from optimal, we omit further details. 9 Conclusions We have presented the first nontrivial lower bounds on the complexity of hyperplane and halfspace emptiness queries.
Reference: [29] <author> J. Erickson. </author> <title> New lower bounds for Hopcroft's problem. </title> <journal> Discrete Comput. Geom. </journal> <volume> 16 </volume> <pages> 389-418, </pages> <year> 1996. </year>
Reference-contexts: in Section 3.) Our model is powerful enough to describe most, if not all, known hyperplane range searching data structures. 2 Partition graphs were originally introduced to study the complexity of Hopcroft's problem|Given a set of points and hyperplanes, does any hyperplane contain a point?|and similar o*ine geometric searching problems <ref> [29] </ref>. We summarize our results below. In each of these results and throughout the paper, s denotes space, p denotes preprocessing time, and t denotes worst-case query time. For comparison, the best known upper bounds are listed in Table 1. <p> This lower bound applies with high probability to a randomly generated set of points. This is the first nontrivial lower bound for hyperplane emptiness queries in any model of computation. * We generalize earlier lower bounds on the complexity of Hopcroft's problem <ref> [29] </ref> for the special case of polyhedral partition graphs. <p> This lower bound was previously known in dimensions less than four, and in arbitrary dimensions for o*ine counting and reporting queries, for arbitrary partition graphs <ref> [29] </ref>. 2 Difficulties in directly modeling existing range searching data structures as partition graphs are discussed in [29, Section 3.5]. Space-Time Tradeoffs for Emptiness Queries 3 * The previous o*ine result implies the worst-case online bounds pt (d+2)(d-1)=2 = (n d ) and pt 2=(d-1) = (n (d+2)=d ). <p> This lower bound was previously known in dimensions less than four, and in arbitrary dimensions for o*ine counting and reporting queries, for arbitrary partition graphs [29]. 2 Difficulties in directly modeling existing range searching data structures as partition graphs are discussed in <ref> [29, Section 3.5] </ref>. Space-Time Tradeoffs for Emptiness Queries 3 * The previous o*ine result implies the worst-case online bounds pt (d+2)(d-1)=2 = (n d ) and pt 2=(d-1) = (n (d+2)=d ). <p> With high probability, any storage scheme of size s that supports halfspace queries in P in time t must satisfy the inequality st d = ((n= log n) d-(d-1)=(d+1) ). 2.2 Unreasonably Good Bounds for Hyperplane Queries Although lower bounds are known for o*ine hyperplane searching in the semigroup model <ref> [22, 29] </ref>, we are unaware of any previous results for online hyperplane queries. <p> Our higher-dimensional lower bounds, both here and later in the paper, use the following generalization of the Erd-os point-line construction. Lemma 2.4 (Erickson <ref> [29] </ref>). For any integers n and k with n &gt; bk 1=d c, there is a restricted set P of n points and a set H of k hyperplanes in IR d , such that I (P; H) = (n 2=(d+1) k 1-2=d (d+1) ). Theorem 2.5. <p> A partitioning algorithm constructs a partition graph, which can depend arbitrarily on the input, preprocesses each point in P, and performs a query for each range in H. The running time of the partitioning algorithm is the sum of the preprocessing and query times. In the original definition <ref> [29] </ref>, the preprocessing and queries were performed concurrently, but this has no effect on the overall running time. 8 Again, since we ignore the time required in practice to construct the partition graph, partitioning algorithms have the full power of nondeterminism. 3.2 Basic Properties Partition graphs have several properties that are <p> Theorem 3.5 also implies that any partitioning algorithm, given n points and k hyperplanes (or halfspaces, if we are not performing emptiness queries), requires at least (n log k + k log n) time in the worst case; this was previously proved in <ref> [29] </ref>, using essentially the same argument. We will prove similar lower bounds for halfspace emptiness queries in Section 8. 4 Space-Time Tradeoffs We now present our space-time tradeoff lower bounds for hyperplane emptiness and related queries in the partition graph model. <p> In all our terminology and notation, whenever the parameter r is omitted, we take it to be a fixed constant. In the remainder of this section, we derive asymptotic lower bounds for ffi d (n; k). 5.2 Topological Properties The lower bound proofs in <ref> [29] </ref> relied on the following trivial observation: if we perturb a set of points and hyperplanes just enough to remove any point-hyperplane incidences, and every point is 16 Jeff Erickson above every hyperplane in the perturbed set, then no point was below a hyperplane in the original set. <p> The symmetric lower bound (n 1-2=d (d+1) k 2=(d+1) ) follows by considering the dual points H fl and the dual hyperplanes P fl . fl 20 Jeff Erickson When d 3, this result follows from earlier bounds on the complexity of monochromatic covers derived in <ref> [29] </ref>. (In a monochromatic minor, either every point lies above every hyperplane, or every point lies below every hyperplane.) Our d-dimensional lower bound only improves our (d - 1)-dimensional lower bound when k = O (k 2=(d-1) ) or k = (n (d-1)=2 ). <p> We can combine the lower bounds from all dimensions 1 i d into a single expression, as in <ref> [29, 28] </ref>: ffi d X : If the relative growth rates of n and k are fixed, this entire sum reduces to a single term. <p> For a polyhedral partitioning algorithm, the partition graph's query regions are all convex (or projective) polyhedra, each with at most r faces, where r is some fixed constant. 10 In <ref> [29] </ref>, it was shown that the worst-case running time of any partitioning algorithm that solves Hopcroft's point-hyperplane incidence problem, given n points and k hyperplanes as input, requires time (n log k + n 2=3 k 2=3 + k log n) when d = 2, or (n log k + n <p> + k log n : This lower bound was previously known for arbitrary partitioning algorithms for counting or reporting versions of Hopcroft's problem|Given a set of points and lines, return the number of point-hyperplane incidences, or a list of incident pairs|as well as for o*ine halfspace counting and reporting problems <ref> [29] </ref>. 7 Preprocessing-Query Time Tradeoffs Based on the o*ine results in the previous section, we now establish tradeoff lower bounds between preprocessing and query time for online hyperplane emptiness and related queries. <p> Thus, there is a set of n points and k lines such that for any partition graph, the total time required to preprocess the n points and correctly answer the k line queries is at least ffn 2=3 k 2=3 = ffc 2=3 p for some positive constant ff <ref> [29] </ref>. If we choose c = (2=ff) 3=2 , the total query time is at least p. <p> All of these lower bounds apply to hyperplane and halfspace counting and reporting queries as well, by Lemma 3.4. In fact, the results in <ref> [29] </ref> imply that for counting and reporting queries, the preprocessing-query tradeoffs apply to arbitrary partition graphs, and the space-time tradeoffs to arbitrary trim partition graphs, in all dimensions. <p> In this section, we derive the first nontrivial lower bounds on the complexity of halfspace emptiness queries. To prove our results, we use a simple reduction argument to transform hyperplane queries into halfspace queries in a higher-dimensional space <ref> [29, 27] </ref>. A similar transformation is described by Dwyer and Eddy [26].
Reference: [30] <author> J. Erickson. </author> <title> Space-time tradeoffs for emptiness queries. </title> <booktitle> Proc. 13th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pp. 304-313. </pages> <year> 1997. </year>
Reference: [31] <author> M. L. Fredman. </author> <title> Lower bounds on the complexity of some optimal data structures. </title> <journal> SIAM J. Comput. </journal> <volume> 10 </volume> <pages> 1-10, </pages> <year> 1981. </year>
Reference-contexts: We also prove tradeoffs between preprocessing time and query time. Most range searching lower bounds are presented in the Fredman/Yao semigroup arithmetic model <ref> [31, 54] </ref>. In this model, the points are given weights from a semigroup, and the goal of a range query is to determine the total weight of the points in a query region. <p> Finally, in Section 9, we offer our conclusions. 2 Semigroup Arithmetic 2.1 Definitions We begin by reviewing the definition of the semigroup arithmetic model, originally introduced by Fredman to study dynamic range searching problems <ref> [31] </ref>, and later refined for the static setting by Yao [54]. A semigroup (S; +) is a set S equipped with an associative addition operator + : S fi S ! S. <p> Proof: Let P be a p p n integer lattice of points. Erd-os showed that for any integer k, there is a set of k lines L such that the number of point-line incidences between P and L is (n 2=3 k 2=3 ); see <ref> [31] </ref> or [46, p. 177]. This implies that the kth largest maximal colinear subset of P contains at least (n 2=3 =k 1=3 ) points.
Reference: [32] <author> J. E. Goodman and R. Pollack. </author> <title> Allowable sequences and order types in discrete and computational geometry. </title> <booktitle> New Trends in Discrete and Computational Geometry, </booktitle> <pages> pp. 103-134. </pages> <booktitle> Algorithms and Combinatorics 10, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: There are only a finitely many equivalence classes of convex polytopes with a given number of faces or vertices <ref> [32] </ref>. Thus, there is a finite set B = fB 1 ; B 2 ; : : :g of n-point configurations, one of each possible combinatorial type, such that if conv (A) has at most r faces, then A v B i for some configuration B i 2 B.
Reference: [33] <author> L. Guibas, M. Overmars, and J.-M. Robert. </author> <title> The exact fitting problem in higher dimensions. </title> <journal> Comput. Geom. Theory Appl. </journal> <volume> 6 </volume> <pages> 215-230, </pages> <year> 1996. </year>
Reference-contexts: The theorem follows by setting k = s - n + 1. fl In order to derive bounds in higher dimensions, we restrict our attention to restricted point sets <ref> [33] </ref>, in which any d points lie on a unique hyperplane. <p> Theorem 2.5. A storage scheme of size s that supports d-dimensional hyperplane queries in time t must satisfy the inequality st d (d+1)=2 = (n d ) in the worst case. Space-Time Tradeoffs for Emptiness Queries 7 Using techniques of Clarkson et al. [23], Guibas, Overmars, and Robert <ref> [33] </ref> prove that if any d points in an n-point set P lie on a unique hyperplane, then for any set H of k hyperplanes, I (P; H) = O (n + n d=(2d-1) k (2d-2)=(2d-1) + k). The following upper bound follows immediately from their result. Theorem 2.6. <p> ) incident pairs, such that no d points lie on the intersection of d hyperplanes, or in other words, such that the bipartite incidence graph of P and H does not have K d;d as a subgraph. (The results of Clarkson et al. [18] and of Guibas, Overmars, and Robert <ref> [33] </ref> imply that this is the smallest forbidden subgraph for which the desired lower bound is possible.) An upper bound of ffi d (n; n) = O (n 2d=(d+1) 2 O (log fl n) follows from the running time of Matousek's algorithm for Hopcroft's problem [40], using the results in the
Reference: [34] <author> M. Henk, J. Richter-Gebert, and G. M. Ziegler. </author> <title> Basic properties of convex polytopes. Handbook of Discrete and Computational Geometry, </title> <booktitle> chapter 13, </booktitle> <pages> pp. 243-270. </pages> <publisher> CRC Press LLC, </publisher> <year> 1997. </year> <note> 30 Jeff Erickson </note>
Reference: [35] <author> J. Kleinberg. </author> <title> Two algorithms for nearest-neighbor search in high dimension. </title> <booktitle> Proc. 29th Annu. ACM Sympos. Theory Comput., </booktitle> <pages> pp. 599-608. </pages> <year> 1997. </year>
Reference-contexts: In Section 5, we define polyhedral covers and develop bounds on their worst-case complexity. 3 This "curse of dimensionality" can sometimes be avoided by requiring only an approximation of the correct output; see, for example, <ref> [7, 24, 35] </ref>. 4 Jeff Erickson Using these combinatorial bounds, in Section 6, we (slightly) improve earlier lower bounds on the complexity of Hopcroft's o*ine point-hyperplane incidence problem in dimensions four and higher.
Reference: [36] <author> J. Matousek. </author> <title> Efficient partition trees. </title> <journal> Discrete Comput. Geom. </journal> <volume> 8 </volume> <pages> 315-334, </pages> <year> 1992. </year>
Reference-contexts: to answer any range query must be at least (log n), even for a fixed one-dimensional point set, in any reasonable model of computation such as algebraic decision trees [48], algebraic computation trees [8], or real RAMs [47]. 1 Since there are both linear-size data structures (with large query times) <ref> [36] </ref> and data structures with logarithmic query time (with large space requirements) [17, 40], any better lower bound must take the form of a space-time tradeoff. 1 Sublogarithmic or even constant query times can be obtained for axis-aligned rectangular queries in models of computation that allow bit manipulation and require integer <p> are represented by arbitrary real coordinates, for which bit manipulation is impossible. 2 Jeff Erickson Space Preprocessing Query Time Source O (n d = log d n) O (n d = log d-" n) O (log n) [17, 40] O (n) O (n log n) O (n 1-1=d polylog n) <ref> [36] </ref> n s n d = log d n O (n 1+" + s log " n) O (n=s 1=d ) [17, 40] Table 1. Best known upper bounds for online hyperplane emptiness queries. <p> These lower bounds match known upper bounds up to polylog-arithmic factors when d = 2, p = O (n polylog n), or t = O (polylog n) <ref> [36, 40] </ref>. These results apply to polyhedral partition graphs when d 4, and to all partition graphs when d 3. <p> When d 3, these bounds apply to arbitrary partition graphs. Although in general these bounds are far from optimal, there are two interesting special cases that match known upper bounds <ref> [17, 36, 40] </ref> up to polylogarithmic factors. Space-Time Tradeoffs for Emptiness Queries 23 Corollary 7.3. Any polyhedral partition graph that supports hyperplane emptiness queries after O (n polylog n) preprocessing time requires query time (n (d-1)=d = polylog n) in the worst case.
Reference: [37] <author> J. Matousek. </author> <title> Reporting points in halfspaces. </title> <journal> Comput. Geom. Theory Appl. </journal> <volume> 2(3) </volume> <pages> 169-186, </pages> <year> 1992. </year>
Reference-contexts: (although a small one) over the lower bound in Corollary 4.3. 24 Jeff Erickson Space Preprocessing Query Time Source d = 2; 3 O (n) O (n log n) O (log n) [20, 3, 25] O (n) O (n 1+" ) O (n 1-1=bd=2c 2 O (log fl n) ) <ref> [37] </ref> O (n) O (n log n) O (n 1-1=bd=2c polylog n) [42] n s n bd=2c O (s polylog n) O ((n polylog n)=s 1=bd=2c ) [42] Table 2.
Reference: [38] <author> J. Matousek. </author> <title> Linear optimization queries. </title> <journal> J. </journal> <volume> Algorithms 14 </volume> <pages> 432-448, </pages> <year> 1993. </year>
Reference-contexts: Emptiness query data structures have been used to solve several geometric problems, including point location [19], ray shooting [2, 19, 39, 42], nearest and farthest neighbor queries [2], linear programming queries <ref> [38, 11] </ref>, depth ordering [9], collision detection [18], and output-sensitive convex hull construction [38, 12]. This paper presents the first nontrivial lower bounds on the complexity of data structures that support emptiness queries, where the query ranges are either arbitrary hyperplanes or arbitrary halfspaces. <p> Emptiness query data structures have been used to solve several geometric problems, including point location [19], ray shooting [2, 19, 39, 42], nearest and farthest neighbor queries [2], linear programming queries [38, 11], depth ordering [9], collision detection [18], and output-sensitive convex hull construction <ref> [38, 12] </ref>. This paper presents the first nontrivial lower bounds on the complexity of data structures that support emptiness queries, where the query ranges are either arbitrary hyperplanes or arbitrary halfspaces. <p> Is there a reduction from hyperplane queries to halfspace queries that only increases the dimension by a constant factor (preferably two)? Finally, can our techniques be applied to other closely related problems, such as nearest neighbor queries [2], linear programming queries <ref> [38, 11] </ref> and ray shooting queries [2, 19, 39, 42]? Acknowledgments I thank Pankaj Agarwal for suggesting studying the complexity of online emptiness problems.
Reference: [39] <author> J. Matousek. </author> <title> On vertical ray shooting in arrangements. </title> <journal> Comput. Geom. Theory Appl. </journal> <volume> 2(5) </volume> <pages> 279-285, </pages> <month> Mar. </month> <year> 1993. </year>
Reference-contexts: Perhaps the simplest type of query is an emptiness query (also called an existential query [6, 43]), which asks whether the query range contains any points in the set. Emptiness query data structures have been used to solve several geometric problems, including point location [19], ray shooting <ref> [2, 19, 39, 42] </ref>, nearest and farthest neighbor queries [2], linear programming queries [38, 11], depth ordering [9], collision detection [18], and output-sensitive convex hull construction [38, 12]. <p> Is there a reduction from hyperplane queries to halfspace queries that only increases the dimension by a constant factor (preferably two)? Finally, can our techniques be applied to other closely related problems, such as nearest neighbor queries [2], linear programming queries [38, 11] and ray shooting queries <ref> [2, 19, 39, 42] </ref>? Acknowledgments I thank Pankaj Agarwal for suggesting studying the complexity of online emptiness problems.
Reference: [40] <author> J. Matousek. </author> <title> Range searching with efficient hierarchical cuttings. </title> <journal> Discrete Comput. Geom. </journal> <volume> 10(2) </volume> <pages> 157-182, </pages> <year> 1993. </year>
Reference-contexts: for a fixed one-dimensional point set, in any reasonable model of computation such as algebraic decision trees [48], algebraic computation trees [8], or real RAMs [47]. 1 Since there are both linear-size data structures (with large query times) [36] and data structures with logarithmic query time (with large space requirements) <ref> [17, 40] </ref>, any better lower bound must take the form of a space-time tradeoff. 1 Sublogarithmic or even constant query times can be obtained for axis-aligned rectangular queries in models of computation that allow bit manipulation and require integer inputs within a known bounded universe; see, for example, [4, 5, 13, <p> We will take the traditional computational-geometric view that geometric objects are represented by arbitrary real coordinates, for which bit manipulation is impossible. 2 Jeff Erickson Space Preprocessing Query Time Source O (n d = log d n) O (n d = log d-" n) O (log n) <ref> [17, 40] </ref> O (n) O (n log n) O (n 1-1=d polylog n) [36] n s n d = log d n O (n 1+" + s log " n) O (n=s 1=d ) [17, 40] Table 1. Best known upper bounds for online hyperplane emptiness queries. <p> (n d = log d n) O (n d = log d-" n) O (log n) <ref> [17, 40] </ref> O (n) O (n log n) O (n 1-1=d polylog n) [36] n s n d = log d n O (n 1+" + s log " n) O (n=s 1=d ) [17, 40] Table 1. Best known upper bounds for online hyperplane emptiness queries. The only nontrivial lower bound previously known for any class of online emptiness queries, in any model of computation, is due to Anderson and Swanson [6]. <p> These lower bounds match known upper bounds up to polylog-arithmic factors when d = 2, p = O (n polylog n), or t = O (polylog n) <ref> [36, 40] </ref>. These results apply to polyhedral partition graphs when d 4, and to all partition graphs when d 3. <p> Except when s is near n d , our upper bounds in the semigroup model are significantly better than the best known upper bounds in more realistic models of computation. The most efficient data structure known satisfies the upper bound st d = O (n d ) <ref> [17, 40] </ref>, and this is believed to be optimal, especially in light of Chazelle's simplex range searching lower bounds. We are not suggesting that this data structure can be significantly improved, but rather that the semigroup model is too powerful to permit tight lower bounds for this range searching problem. <p> of Guibas, Overmars, and Robert [33] imply that this is the smallest forbidden subgraph for which the desired lower bound is possible.) An upper bound of ffi d (n; n) = O (n 2d=(d+1) 2 O (log fl n) follows from the running time of Matousek's algorithm for Hopcroft's problem <ref> [40] </ref>, using the results in the next section. 6 Better O*ine Lower Bounds Recall that a partitioning algorithm, given a set of points and hyperplanes, constructs a partition graph (which may depend arbitrarily on the input, at no cost), preprocesses the points, and queries the hyperplanes, using the algorithms in Figure <p> Thus, at least one query requires time at least p=k = (n=p 1=2 ). fl This lower bound almost matches the best known upper bound pt 2 = O (n 2 log " n), due to Matousek <ref> [40] </ref>. The following higher-dimensional bound follows from Corollary 6.2 using precisely the same argument. Theorem 7.2. <p> When d 3, these bounds apply to arbitrary partition graphs. Although in general these bounds are far from optimal, there are two interesting special cases that match known upper bounds <ref> [17, 36, 40] </ref> up to polylogarithmic factors. Space-Time Tradeoffs for Emptiness Queries 23 Corollary 7.3. Any polyhedral partition graph that supports hyperplane emptiness queries after O (n polylog n) preprocessing time requires query time (n (d-1)=d = polylog n) in the worst case. <p> Corollary 7.5. Any trim partition graph of size s that supports line emptiness queries in time t satisfies the inequality st 2 = (n 2 ) in the worst case. This lower bound is optimal, up to constant factors. Chazelle [17] and Matousek <ref> [40] </ref> describe a family of line query data structures with st 2 = O (n 2 ). Corollary 7.6. Any trim polyhedral partition graph of size s that supports d-dimensional hyper-plane emptiness queries in time t satisfies the inequality st (d+2)(d-1)=2 = (n d ) in the worst case. <p> The situation is entirely different for halfspace queries. The best halfspace counting data structure known requires roughly (n d ) space to achieve logarithmic query time <ref> [17, 40] </ref>; whereas, the same query time can be achieved with o (n bd=2c ) space if we only want to know whether the halfspace is empty [42]. Table 2 lists the resource bounds for the best known online halfspace emptiness data structures. <p> For example, simplex range searching data structures are typically constructed by composing several levels of halfspace "counting" data structures <ref> [40] </ref>. To answer a query for the intersection of k halfspaces, the points in the first halfspace are (implicitly) extracted as the disjoint union of several subsets, and a (k - 1)-halfspace query is recursively performed on each subset. <p> We conjecture that the correct space-time tradeoffs are st d = fi (n d ) for hyperplanes and st bd=2c = fi (n bd=2c ) for halfspaces. Since these bounds are achieved by current algorithms|exactly for hyperplanes <ref> [40] </ref>, within polylogarithmic factors for halfspaces [42]|the only way to prove our conjecture is to improve the lower bounds. Our space-time tradeoffs derive from lower bounds for halfspace queries in the semigroup arithmetic model [10], and our preprocessing-query tradeoffs follow from lower bounds on the complexity of polyhedral covers.
Reference: [41] <author> J. Matousek. </author> <title> Geometric range searching. </title> <journal> ACM Comput. Surv. </journal> <volume> 26 </volume> <pages> 421-461, </pages> <year> 1994. </year>
Reference-contexts: For comparison, the best known upper bounds are listed in Table 1. For a thorough overview of range searching techniques, results, and applications, see the surveys by Matousek <ref> [41] </ref> and by Agarwal and Erickson [1]. * Any partition graph that supports hyperplane queries requires (n) space, (n log n) pre processing time, and (log n) query time. * Any partition graph that supports hyperplane emptiness queries implicitly defines a halfspace range query data structure in the Fredman/Yao semigroup arithmetic
Reference: [42] <author> J. Matousek and O. Schwarzkopf. </author> <title> On ray shooting in convex polytopes. </title> <journal> Discrete Comput. Geom. </journal> <volume> 10(2) </volume> <pages> 215-232, </pages> <year> 1993. </year>
Reference-contexts: Perhaps the simplest type of query is an emptiness query (also called an existential query [6, 43]), which asks whether the query range contains any points in the set. Emptiness query data structures have been used to solve several geometric problems, including point location [19], ray shooting <ref> [2, 19, 39, 42] </ref>, nearest and farthest neighbor queries [2], linear programming queries [38, 11], depth ordering [9], collision detection [18], and output-sensitive convex hull construction [38, 12]. <p> Jeff Erickson Space Preprocessing Query Time Source d = 2; 3 O (n) O (n log n) O (log n) [20, 3, 25] O (n) O (n 1+" ) O (n 1-1=bd=2c 2 O (log fl n) ) [37] O (n) O (n log n) O (n 1-1=bd=2c polylog n) <ref> [42] </ref> n s n bd=2c O (s polylog n) O ((n polylog n)=s 1=bd=2c ) [42] Table 2. <p> log n) O (log n) [20, 3, 25] O (n) O (n 1+" ) O (n 1-1=bd=2c 2 O (log fl n) ) [37] O (n) O (n log n) O (n 1-1=bd=2c polylog n) <ref> [42] </ref> n s n bd=2c O (s polylog n) O ((n polylog n)=s 1=bd=2c ) [42] Table 2. Best known upper bounds for halfspace emptiness queries. 8 Halfspace Emptiness Queries The space and time bounds for the best hyperplane (or simplex) emptiness query data structures are only a polylogarithmic factor smaller than the bounds for hyperplane (or simplex) counting queries. <p> The best halfspace counting data structure known requires roughly (n d ) space to achieve logarithmic query time [17, 40]; whereas, the same query time can be achieved with o (n bd=2c ) space if we only want to know whether the halfspace is empty <ref> [42] </ref>. Table 2 lists the resource bounds for the best known online halfspace emptiness data structures. <p> The fastest o*ine algorithm, given n points and k halfspaces, requires O n log k + (nk) bd=2c=(bd=2c+1) polylog (n + k) + k log n time to decide if any point lies in any halfspace <ref> [42] </ref>. In contrast, the only lower bounds previously known for halfspace emptiness queries are trivial. Linear space and logarithmic query time are required to answer online queries. <p> Is there a reduction from hyperplane queries to halfspace queries that only increases the dimension by a constant factor (preferably two)? Finally, can our techniques be applied to other closely related problems, such as nearest neighbor queries [2], linear programming queries [38, 11] and ray shooting queries <ref> [2, 19, 39, 42] </ref>? Acknowledgments I thank Pankaj Agarwal for suggesting studying the complexity of online emptiness problems.
Reference: [43] <author> P. B. Milterson. </author> <title> Lower bounds for Union-Split-Find related problems on random access machines. </title> <booktitle> Proc. 26th Annu. ACM Sympos. Theory Comput., </booktitle> <pages> pp. 625-634. </pages> <year> 1994. </year>
Reference-contexts: For example, a reporting query asks for the list of points in the query range, and a counting query asks for their number. Perhaps the simplest type of query is an emptiness query (also called an existential query <ref> [6, 43] </ref>), which asks whether the query range contains any points in the set.
Reference: [44] <author> P. B. Milterson, N. Nisan, S. Safra, and A. Widgerson. </author> <title> On data structures and asymmetric communicatoin complexity. </title> <booktitle> Proc. 27th Annu. ACM Sympos. Theory Comput., </booktitle> <pages> pp. 103-111. </pages> <year> 1995. </year>
Reference-contexts: space requirements) [17, 40], any better lower bound must take the form of a space-time tradeoff. 1 Sublogarithmic or even constant query times can be obtained for axis-aligned rectangular queries in models of computation that allow bit manipulation and require integer inputs within a known bounded universe; see, for example, <ref> [4, 5, 13, 44, 45, 53] </ref>. No such result is known for non-orthogonal ranges, however.
Reference: [45] <author> M. H. Overmars. </author> <title> Efficient data structures for range searching on a grid. </title> <journal> J. </journal> <volume> Algorithms 9 </volume> <pages> 254-275, </pages> <year> 1988. </year>
Reference-contexts: space requirements) [17, 40], any better lower bound must take the form of a space-time tradeoff. 1 Sublogarithmic or even constant query times can be obtained for axis-aligned rectangular queries in models of computation that allow bit manipulation and require integer inputs within a known bounded universe; see, for example, <ref> [4, 5, 13, 44, 45, 53] </ref>. No such result is known for non-orthogonal ranges, however.
Reference: [46] <author> J. Pach and P. K. Agarwal. </author> <title> Combinatorial Geometry. </title> <publisher> John Wiley & Sons, </publisher> <address> New York, NY, </address> <year> 1995. </year>
Reference-contexts: Proof: Let P be a p p n integer lattice of points. Erd-os showed that for any integer k, there is a set of k lines L such that the number of point-line incidences between P and L is (n 2=3 k 2=3 ); see [31] or <ref> [46, p. 177] </ref>. This implies that the kth largest maximal colinear subset of P contains at least (n 2=3 =k 1=3 ) points.
Reference: [47] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: An Introduction. </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1985. </year>
Reference-contexts: The time to answer any range query must be at least (log n), even for a fixed one-dimensional point set, in any reasonable model of computation such as algebraic decision trees [48], algebraic computation trees [8], or real RAMs <ref> [47] </ref>. 1 Since there are both linear-size data structures (with large query times) [36] and data structures with logarithmic query time (with large space requirements) [17, 40], any better lower bound must take the form of a space-time tradeoff. 1 Sublogarithmic or even constant query times can be obtained for axis-aligned
Reference: [48] <author> J. M. Steele and A. C. Yao. </author> <title> Lower bounds for algebraic decision trees. </title> <journal> J. </journal> <volume> Algorithms 3 </volume> <pages> 1-8, </pages> <year> 1982. </year>
Reference-contexts: The time to answer any range query must be at least (log n), even for a fixed one-dimensional point set, in any reasonable model of computation such as algebraic decision trees <ref> [48] </ref>, algebraic computation trees [8], or real RAMs [47]. 1 Since there are both linear-size data structures (with large query times) [36] and data structures with logarithmic query time (with large space requirements) [17, 40], any better lower bound must take the form of a space-time tradeoff. 1 Sublogarithmic or even <p> Linear space and logarithmic query time are required to answer online queries. A simple reduction from the set intersection problem shows that (n log k + k log n) time is required for the o*ine problem in the algebraic decision tree and algebraic computation tree models <ref> [8, 48] </ref>. In this section, we derive the first nontrivial lower bounds on the complexity of halfspace emptiness queries. To prove our results, we use a simple reduction argument to transform hyperplane queries into halfspace queries in a higher-dimensional space [29, 27].
Reference: [49] <author> J. Stolfi. </author> <title> Oriented Projective Geometry: A Framework for Geometric Computations. </title> <publisher> Academic Press, </publisher> <address> New York, NY, </address> <year> 1991. </year>
Reference-contexts: We easily verify that fl is a projective polyhedron whose face lattice is the inverse of the face lattice of . In particular, and fl have the same number of faces. See [55, pp. 59-64] and <ref> [49, pp. 143-150] </ref> for similar definitions. We say that a polyhedron separates a set P of points and a set H of hyperplanes if contains P and the dual polyhedron fl contains the dual points H fl .
Reference: [50] <author> L. Szekely. </author> <title> Crossing numbers and hard Erd-os problems in discrete geometry. Combinatorics, Probability, </title> <booktitle> and Computing 6 </booktitle> <pages> 353-358, </pages> <year> 1997. </year>
Reference-contexts: Proof: Szemeredi and Trotter [51] (see also <ref> [18, 50] </ref>) proved that there are at most O (n+n 2=3 k 2=3 + k) incidences between any set of n points and any set of k lines.
Reference: [51] <author> E. Szemeredi and W. Trotter, Jr. </author> <title> Extremal problems in discrete geometry. </title> <type> Combinatorica 3 </type> <pages> 381-392, </pages> <year> 1983. </year>
Reference-contexts: Theorem 2.3. For any set P of n points in the plane and any integer s with n + p there is a storage scheme of size s that supports line queries for P in time t, where st 3 = O (n 2 ). Proof: Szemeredi and Trotter <ref> [51] </ref> (see also [18, 50]) proved that there are at most O (n+n 2=3 k 2=3 + k) incidences between any set of n points and any set of k lines.
Reference: [52] <author> R. E. Tarjan. </author> <title> A class of algorithms which require nonlinear time to maintain disjoint sets. </title> <journal> J. Comput. Syst. Sci. </journal> <volume> 18 </volume> <pages> 110-127, </pages> <year> 1979. </year> <title> Space-Time Tradeoffs for Emptiness Queries 31 </title>
Reference-contexts: Unfortunately, emptiness queries are completely trivial in the semigroup arithmetic model. If the query range is empty, we perform no additions; conversely, if we perform even a single addition, the query range must not be empty. Similar arguments apply to Tarjan's pointer machine model <ref> [52] </ref>, which has been used to derive output-sensitive lower bounds for several types of reporting queries [15, 21]. In fact, the only lower bounds previously known for hyperplane emptiness queries are essentially trivial.
Reference: [53] <author> D. E. Willard. </author> <title> Log-logarithmic worst case range queries are possible in space fi(n). </title> <journal> Inform. Process. Lett. </journal> <volume> 17 </volume> <pages> 81-89, </pages> <year> 1983. </year>
Reference-contexts: space requirements) [17, 40], any better lower bound must take the form of a space-time tradeoff. 1 Sublogarithmic or even constant query times can be obtained for axis-aligned rectangular queries in models of computation that allow bit manipulation and require integer inputs within a known bounded universe; see, for example, <ref> [4, 5, 13, 44, 45, 53] </ref>. No such result is known for non-orthogonal ranges, however.
Reference: [54] <author> A. C. Yao. </author> <title> On the complexity of maintaining partial sums. </title> <journal> SIAM J. Comput. </journal> <volume> 14 </volume> <pages> 277-288, </pages> <year> 1985. </year>
Reference-contexts: We also prove tradeoffs between preprocessing time and query time. Most range searching lower bounds are presented in the Fredman/Yao semigroup arithmetic model <ref> [31, 54] </ref>. In this model, the points are given weights from a semigroup, and the goal of a range query is to determine the total weight of the points in a query region. <p> data structure is the number of partial sums, and the query time is the number of semigroup additions performed on these partial sums to obtain the required answer. (More formal definitions are given in Section 2.) Lower bounds have been established in this model for several types of query ranges <ref> [10, 14, 16, 54] </ref>, in many cases matching the complexities of the corresponding data structures, at least up to polylogarithmic factors. Unfortunately, emptiness queries are completely trivial in the semigroup arithmetic model. <p> Finally, in Section 9, we offer our conclusions. 2 Semigroup Arithmetic 2.1 Definitions We begin by reviewing the definition of the semigroup arithmetic model, originally introduced by Fredman to study dynamic range searching problems [31], and later refined for the static setting by Yao <ref> [54] </ref>. A semigroup (S; +) is a set S equipped with an associative addition operator + : S fi S ! S. A semigroup is commutative if the equation x + y = y + x is true for all x; y 2 S. <p> The size of a storage scheme is the number of clusters, and the query time for a range q is the minimum number of clusters whose union is P " q. This is the formulation actually used to prove lower bounds in the semigroup arithmetic model 6 <ref> [10, 14, 16, 54] </ref>. Whether or not the clusters used to answer a query must be disjoint depends on the semigroup. If the semigroup is integral, the clusters must be disjoint for every query; on the other hand, if the semigroup is idempotent, clusters can overlap arbitrarily.
Reference: [55] <author> G. M. Ziegler. </author> <title> Lectures on Polytopes. Graduate Texts in Mathematics 152. </title> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Everything we define in this subsection can be formalized algebraically in the language of polyhedral cones and linear subspaces one dimension higher; we will give a less formal, purely geometric treatment. For more technical details, we refer the reader to the first two chapters of Ziegler's lecture notes <ref> [55] </ref>, or the survey by Henk et al.[34]. The d-dimensional real projective space IRIP d can be defined as the set of lines through the origin in the (d + 1)-dimensional real vector space IR d+1 . <p> We easily verify that fl is a projective polyhedron whose face lattice is the inverse of the face lattice of . In particular, and fl have the same number of faces. See <ref> [55, pp. 59-64] </ref> and [49, pp. 143-150] for similar definitions. We say that a polyhedron separates a set P of points and a set H of hyperplanes if contains P and the dual polyhedron fl contains the dual points H fl .
References-found: 55

