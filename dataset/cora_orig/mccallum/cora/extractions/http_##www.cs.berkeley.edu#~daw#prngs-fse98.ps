URL: http://www.cs.berkeley.edu/~daw/prngs-fse98.ps
Refering-URL: http://www.cs.berkeley.edu/~daw/me.html
Root-URL: 
Email: e-mail: fkelsey,schneier,hallg@counterpane.com  e-mail: daw@cs.berkeley.edu  
Phone: 2  
Title: Cryptanalytic Attacks on Pseudorandom Number Generators  
Author: John Kelsey Bruce Schneier David Wagner and Chris Hall 
Address: Berkeley  
Affiliation: 1 Counterpane Systems  University of California  
Abstract: In this paper we discuss PRNGs: the mechanisms used by real-world secure systems to generate cryptographic keys, initialization vectors, "random" nonces, and other values assumed to be random. We argue that PRNGs are their own unique type of cryptographic primitive, and should be analyzed as such. We propose a model for PRNGs, discuss possible attacks against this model, and demonstrate the applicability of the model (and our attacks) to four real-world PRNGs. We close with a discussion of lessons learned about PRNG design and use, and a few open questions.
Abstract-found: 1
Intro-found: 1
Reference: [Agn88] <author> G.B. Agnew, </author> <title> "Random Source for Cryptographic Systems," </title> <booktitle> Advances in Cryptology | EUROCRYPT '87 Proceedings, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1988, </year> <pages> pp. 77-81. </pages>
Reference: [ANSI85] <author> ANSI X 9.17 (Revised), </author> <title> "American National Standard for Financial Institution Key Management (Wholesale)," </title> <journal> American Bankers Association, </journal> <year> 1985. </year>
Reference-contexts: Examples of this include the ANSI X9.17 key generation mechanism <ref> [ANSI85] </ref> and the RSAREF 2.0 PRNG [RSA94]. A PRNG has a secret state, S. Upon request, it must generate outputs that are indistinguishable from random numbers to an attacker who doesn't know and cannot guess S. In this, it is very similar to a stream cipher.
Reference: [Bal96] <author> R.W. Baldwin, </author> <title> "Proper Initialization for the BSAFE Random Number Generator," </title> <journal> RSA Laboratories Bulletin, n. </journal> <volume> 3, </volume> <month> 25 Jan </month> <year> 1996. </year>
Reference: [Dai97] <author> W. </author> <title> Dai, </title> <address> Crypto++ library, http://www.eskimo.com/~weidai/cryptlib.html. </address>
Reference-contexts: All arithmetic in this PRNG is allowed to be done modulo 2 N , where 160 N 512. In the remainder of this document, we will assume this modulus to be 2 Wei Dai's Crypto++ library <ref> [Dai97] </ref> includes an implementation of a X9.17 variant with increased security against seed compromise attacks. That variant is 1. T i = E K (T i1 current timestamp). 2. output [i] = E K (T i seed [i]). 3. seed [i + 1] = E K (T i output [i]).
Reference: [DIF94] <author> D. Davis, R. Ihaka, and P. Fenstermacher, </author> <title> "Cryptographic Randomness from Air Turbulience in Disk Drives," </title> <booktitle> Advances in Cryptology | CRYPTO '94 Proceedings, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994, </year> <pages> pp. 114-120. </pages>
Reference-contexts: Other times, the input samples are processed as they become available: e.g. RSAREF 2.0 PRNG. Note that the inputs are intended to carry some unknown (to an attacker) information into the PRNG. These are the values typically collected from physical processes (like hard drive latencies <ref> [DIF94] </ref>), user interactions with the machine [Zim95], or other external, hard-to-predict processes.
Reference: [ECS94] <author> D. Eastlake, S.D. Crocker, and J.I. Schiller, </author> <title> "Randomness Requirements for Security," </title> <type> RFC 1750, </type> <institution> Internet Engineering Task Force, </institution> <month> Dec. </month> <year> 1994. </year>
Reference: [FMK85] <author> R.C. </author> <title> Fairchild, R.L. Mortenson, and K.B. Koulthart, "An LSI Random Number Generator (RNG)," </title> <booktitle> Advances in Cryptology: Proceedings of CRYPTO '84, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1985, </year> <pages> pp. 203-230. </pages>
Reference: [Gud85] <author> M. Gude, </author> <title> "Concept for a High-Performance Random Number Generator Based on Physical Random Noise," </title> <editor> Frequenz, v. </editor> <volume> 39, </volume> <year> 1985, </year> <pages> pp. 187-190. </pages> <publisher> 188 John Kelsey, </publisher> <editor> Bruce Schneier, David Wagner, </editor> <publisher> Chris Hall </publisher>
Reference: [Gut98] <author> P. Gutmann, </author> <title> "Software Generation of Random Numbers for Cryptographic Purposes," </title> <booktitle> Proceedings of the 1998 Usenix Security Symposium, </booktitle> <year> 1998, </year> <note> to appear. </note>
Reference-contexts: The best way to resist all the state-compromise extension attacks is simply never to have the PRNG's state compromised. While it's not possible to guarantee this, system designers should spend a lot of effort on starting their PRNG from an unguessable point, handling PRNG seed files intelligently, etc. (See <ref> [Gut98] </ref> for several ways that this can be done.) 4.2 Guidelines for Designing a PRNG Having described a set of possible attacks on PRNGs, it is reasonable to try to discuss ways to develop new PRNGs that will resist them. We propose the following guidelines for developing new PRNGs: 1.
Reference: [Koc95] <author> P. Kocher, </author> <note> post to sci.crypt Internet newsgroup (message-ID pckDIr4Ar.L4z@netcom.com), 4 Dec 1995. </note>
Reference: [LMS93] <author> J.B. Lacy, D.P. Mitchell, and W.M. </author> <title> Schell, </title> <booktitle> "CryptoLib: Cryptography in Software," USENIX Security Symposium IV Proceedings, USENIX Association, </booktitle> <year> 1993, </year> <pages> pp. 237-246. </pages>
Reference-contexts: Append a current timestamp and/or a counter to all inputs before sending them into the PRNG, to eliminate the order-independence of PRNG inputs. 3.5 Cryptolib's PRNGs Cryptolib is a cryptographic library developed primarily by Jack Lacy, Donald Mitchel, William Schnell, and Matt Blaze, and initially described in <ref> [LMS93] </ref>. The primary source of randomness in Cryptolib is TrueRand, a mechanism for pulling (hopefully) unpredictable values out of the clock skew between different timers available to the system. <p> TrueRand is thus the source of PRNG inputs, and fsrRand or desRand is the source of PRNG outputs. Description of Algorithms fsrRand fsrRand is described in <ref> [LMS93] </ref>. Its secret state consists of a secret DES key, K, and an array of seven 32-bit values, X 0::6 , organized as a shift-register. Each time an output is required, two of the 32-bit values are taken and concatenated to form a 64-bit value. <p> The register is then shifted, so that two new values will be used to generate the next output. A more complete description can be found in <ref> [LMS93] </ref>. desRand desRand appears in the Cryptolib source code (version 1.2). Its secret state consists of a 64-bit counter, C, a secret three-key triple-DES key, K, a secret 20-byte prefix, P , and a secret 20-byte suffix, S.
Reference: [NIST92] <institution> National Institute for Standards and Technology, "Key Management Using X9.17," </institution> <type> NIST FIPS PUB 171, U.S. </type> <institution> Department of Commerce, </institution> <year> 1992. </year>
Reference: [NIST93] <institution> National Institute for Standards and Technology, </institution> <type> "Secure Hash Standard," NIST FIPS PUB 180, U.S. </type> <institution> Department of Commerce, </institution> <year> 1993. </year>
Reference: [NIST94] <institution> National Institute for Standards and Technology, "Digital Signature Standard," </institution> <type> NIST FIPS PUB 186, U.S. </type> <institution> Department of Commerce, </institution> <year> 1994. </year>
Reference-contexts: For systems that use X9.17, the most obvious way to resist this class of attack is to occasionally use the current X9.17 state to generate a whole new X9.17 state, including a new K and a new starting seed [0]. 3.2 The DSA PRNG The Digital Signature Standard specification <ref> [NIST94] </ref> also describes a fairly simple PRNG based on SHA (or, alternatively, a DES construction) which was intended for generating pseudorandom parameters for the DSA signature algorithm.
Reference: [OW95] <author> P.C. van Oorschot and M.J. Wiener, </author> <title> "Parallel collision search with application to hash function and discrete logarithms," </title> <booktitle> 2nd ACM Conf. on Computer and Communications Security, </booktitle> <address> New York, NY, </address> <publisher> ACM, </publisher> <year> 1994. </year>
Reference: [OW96] <author> P.C. van Oorschot and M.J. Wiener, </author> <title> "Improving implementable meet-in-the-middle attacks by orders of magnitude," CRYPTO '96, </title> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference: [Plu94] <author> C. Plumb, </author> <title> "Truly Random Numbers, </title> <journal> Dr. Dobbs Journal, v. </journal> <volume> 19, </volume> <editor> n. </editor> <volume> 13, </volume> <month> Nov </month> <year> 1994, </year> <pages> pp. 113-115. </pages>
Reference: [Ric92] <author> M. </author> <title> Richterm "Ein Rauschgenerator zur Gweinnung won quasi-idealen Zu-fallszahlen fur die stochastische Simulation," </title> <type> Ph.D. dissertation, </type> <institution> Aachen University of Technology, </institution> <year> 1992. </year> <note> (In German.) </note>
Reference: [RSA94] <institution> RSA Laboratories, </institution> <address> RSAREF cryptographic library, </address> <month> Mar </month> <year> 1994, </year> <note> ftp://ftp.funet.fi/pub/crypt/cryptography/asymmetric/rsa/ rsaref2.tar.gz. </note>
Reference-contexts: Examples of this include the ANSI X9.17 key generation mechanism [ANSI85] and the RSAREF 2.0 PRNG <ref> [RSA94] </ref>. A PRNG has a secret state, S. Upon request, it must generate outputs that are indistinguishable from random numbers to an attacker who doesn't know and cannot guess S. In this, it is very similar to a stream cipher.
Reference: [SV86] <author> M. Santha and U.V. Vazirani, </author> <title> "Generating Quasi-Random Sequences from Slightly Random Sources," </title> <journal> Journal of Computer and System Sciences, v. </journal> <volume> 33, </volume> <year> 1986, </year> <pages> pp. 75-87. </pages>
Reference: [Sch96] <author> B. Schneier, </author> <title> Applied Cryptrography, </title> <publisher> John Wiley & Sons, </publisher> <year> 1996. </year>
Reference: [Zim95] <author> P. Zimmermann, </author> <title> The Official PGP User's Guide, </title> <publisher> MIT Press, </publisher> <year> 1995. </year>
Reference-contexts: RSAREF 2.0 PRNG. Note that the inputs are intended to carry some unknown (to an attacker) information into the PRNG. These are the values typically collected from physical processes (like hard drive latencies [DIF94]), user interactions with the machine <ref> [Zim95] </ref>, or other external, hard-to-predict processes.
References-found: 22

