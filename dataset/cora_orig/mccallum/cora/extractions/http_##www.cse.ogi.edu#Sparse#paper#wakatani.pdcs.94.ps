URL: http://www.cse.ogi.edu/Sparse/paper/wakatani.pdcs.94.ps
Refering-URL: http://www.cse.ogi.edu/Sparse/sparse.papers.html
Root-URL: http://www.cse.ogi.edu
Email: wakatani@isl.mei.co.jp mwolfe@cse.ogi.edu  
Title: Effectiveness of Message Strip-Mining for Regular and Irregular Communication  
Author: Akiyoshi Wakatani Michael Wolfe 
Address: Moriguchi, 570, JAPAN Portland, OR, 97291-1000,USA  
Affiliation: Matsushita Electric Industrial Oregon Graduate Institute  
Abstract: Languages such as High Performance Fortran are used to implement parallel algorithms by distributing large data structures across a multicomputer system. To hide communication behind computation, we introduce an optimization scheme, message strip-mining. By using this scheme, the communication overhead is almost completely overlapped with the subsequent computation. We have implemented the proposed scheme for redistribution of arrays (regular communication) and executor for indirect access (irregular communication), and have achieved speedups of 3.5 and 2.6 for a redistribution of 2560 fi 2560 array and an executor to collect data whose size is 5 fi 10 5 for each processor, respectively. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Jeanne Adams et al. </author> <title> Fortran 90 Handbook. </title> <address> Mc-Graw Hill, </address> <year> 1992. </year>
Reference-contexts: To show how message strip-mining overcomes the drawbacks, we apply the proposed scheme to the redistribution of arrays and the executor of indirect access. The scheme can also be easily applied to other communication such as FORTRAN 90 <ref> [1] </ref> intrinsics such as transpose, spread and so on. We discussed message strip-mining redistribution with 1 block in detail in previous work [7]. The scheme can be easily extended to redistribution with multiple blocks.
Reference: [2] <author> High Performance Fortran Forum. </author> <title> High Performance Fortran Language Specification. </title> <type> Technical report, </type> <institution> Rice University, Dept. Computer Science, </institution> <month> October </month> <year> 1992. </year>
Reference-contexts: 1 Introduction HPF <ref> [2] </ref> allows users to make a program executable on any distributed memory multicomputer. HPF also allows use of expensive communication such as redistribution of arrays (regular communication ) and indirect access to distributed array elements (irregular communication).
Reference: [3] <author> Charles Koelbel, Piyush Mehrotra, Joel Saltz, and Harry Berryman. </author> <title> Parallel loops on distributed machines. </title> <booktitle> In Proceedings of the 5th Distributed Memory Computing Conference, </booktitle> <year> 1990. </year>
Reference-contexts: Often, on distributed memory computers, indirect access to distributed array elements is accomplished via the inspector/executor method <ref> [3] </ref>. The inspector/executor method consists of two phases.
Reference: [4] <author> William Press. </author> <booktitle> Numerical Recipes in C, </booktitle> <pages> pages 665-666. </pages> <address> Cambridge, </address> <year> 1988. </year>
Reference: [5] <author> J. Saltz, R. Das, R Ponnusamy, and D Mavriplis. </author> <title> PARTI procedures for realistic loops. </title> <booktitle> In Proceedings of the 6th Distributed Memory Computing Conference, </booktitle> <year> 1991. </year>
Reference-contexts: The second part of this method (executor) is to exchange messages with other processors in accordance with the schedules that the inspector has already arranged. By using the inspector/executor scheme, the program in Figure 4 is compiled into an SPMD program with the PARTI <ref> [5] </ref> runtime library shown in Figure 5, which is a runtime library for irregular communication developed at the University of Maryland. Note that nproc is the number of processors.
Reference: [6] <author> Chau-Wen Tseng. </author> <title> An optimizing Fortran D compiler for MIMD distributed-memory machines. </title> <type> PhD dissertation, </type> <institution> Rice University, Dept. Computer Science, </institution> <month> January </month> <year> 1993. </year>
Reference-contexts: Therefore, users have to be careful not to reduce the performance due to the communication overhead. To hide the communication overhead, several methods have been proposed; for instance, iteration reordering and vector message pipelining <ref> [6] </ref>, both of which overlap communication with computation by using non-blocking communication. Although these methods are useful, the requirements of these communication optimizations are too restrictive.
Reference: [7] <author> Akiyoshi Wakatani and Michael Wolfe. </author> <title> A new approach to array redistribution: Strip mining redistribution. </title> <booktitle> In Proceedings of Parallel Architectures and Languages Europe, 1994. </booktitle> <address> library </address>
Reference-contexts: The scheme can also be easily applied to other communication such as FORTRAN 90 [1] intrinsics such as transpose, spread and so on. We discussed message strip-mining redistribution with 1 block in detail in previous work <ref> [7] </ref>. The scheme can be easily extended to redistribution with multiple blocks.
References-found: 7

