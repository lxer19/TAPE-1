URL: ftp://ftp.cs.brown.edu/pub/techreports/95/cs95-02.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-95-02.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [1] <institution> J. Alziary de Roquefort. Les apports des methodes syntaxiques pour la detection des redon-dances dans les systemes d'inequations lineaires. Memoire de DEA, Laboratoire d'Informatique de Clermont-Ferrand, France, </institution> <year> 1994. </year>
Reference-contexts: The experimental results reported here use randomly generated constraint systems with various sparsity configurations and various ratios n=m, where n is the number of constraints and m is the number of non-basic variables. The complete results are reported in <ref> [1] </ref>. 7.1 Applicability of the Theoretical Results The first results we report are the applicability of the various theoretical results, i.e. how many times a given definition, lemma, or theorem can be used. Table 1 gives the results for a variety of parameter configurations. <p> Table 1 gives the results for a variety of parameter configurations. These results are not intended to be comprehensive (see <ref> [1] </ref> for a more complete coverage) but they give a good picture on the applicability of the results.
Reference: [2] <author> Brearly, Mitra, and Williams. </author> <title> Analysis of Mathematical Programming Problems Prior to Applying the Simplex Method Mathematical Programming, </title> <type> 8, p 54-83, </type> <year> 1975. </year>
Reference-contexts: Finally, note that advanced linear programming software such as CPLEX TM include a number of transformations on the initial problem description (this is an optional feature which can be turned off if necessary). These transformations are syntactic and partly based on <ref> [2] </ref>; they include simple removal of columns and rows, detections of infeasibility or redundancy by bound reasoning, derivation of new bounds on the variables, and elimination of free variables. Our techniques are complementary to those; they do not work on the initial problem statement but rather on its solved form.
Reference: [3] <author> P. Cousot and N. Halbwachs. </author> <booktitle> Automatic Discovery of Linear Restraints among Variables of a Program In Proceedings of the fifth Annual ACM Symposium on Principles of Programming languages, </booktitle> <address> Tucson, Arizona, </address> <month> January 23-25, </month> <year> 1978. </year>
Reference-contexts: 1 Introduction Detection of redundant linear constraints is important for a variety of applications including linear programming [12], variable elimination (e.g. [8, 6]), canonical forms (e.g [9]) and program analysis and verification of hybrid systems (e.g. <ref> [3, 5] </ref>) to name a few. Systematic semantic methods exist to identify all redundant constraints. They consist essentially in solving a linear program per constraint (i.e. optimizing the constraint subject to the other constraints) and hence they are generally computationally expensive.
Reference: [4] <author> G.B. Dantzig. </author> <title> Linear Programming and Extensions. </title> <publisher> Princeton University Press, </publisher> <address> Princeton, New Jersey, </address> <year> 1963. </year>
Reference-contexts: not trivially true and if there is a non-slack variable x in C, rewrite C as x = t (with t not containing x) and insert it into E else (there are only slack variables in C) if C is not trivially true, insert it into S. end Proof See <ref> [4, 11] </ref>. 2 The detection of redundant constraints is conveniently performed, not on the initial system of linear inequalities I, but rather on a linear program associated with I. <p> Proof See [13]. 2 The other important property of LSF is that it is preserved through pivoting provided that a lexicographic pivoting rule be used. Since our new criteria make use of the lexicographic pivoting rule, we briefly review the basic concepts. The lexicographic pivoting rule <ref> [4] </ref> is defined as follows. Definition 13 Let S = fx b i = a i0 + j=1 be a set of equations in LSF, x k be the selected entering variable.
Reference: [5] <author> N. Halbwachs, P. Raymond, and Y.-E. Proy. </author> <title> Verification of Linear Hybrid Systems by Means of Convex Approximations In Proceedings of the first Symposium on Static Analysis (SAS-94), </title> <address> Namur, Belgium, </address> <month> September, </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Detection of redundant linear constraints is important for a variety of applications including linear programming [12], variable elimination (e.g. [8, 6]), canonical forms (e.g [9]) and program analysis and verification of hybrid systems (e.g. <ref> [3, 5] </ref>) to name a few. Systematic semantic methods exist to identify all redundant constraints. They consist essentially in solving a linear program per constraint (i.e. optimizing the constraint subject to the other constraints) and hence they are generally computationally expensive.
Reference: [6] <author> J.L. Imbert. </author> <title> About Redundant Inequalities Generated by Fourier's Algorithm. </title> <booktitle> AIMSA'90, Fourth International Conference on Artificial Intelligence: Methodology, Systems, Applications, </booktitle> <address> Albena-Varna, Bulgaria, </address> <month> September </month> <year> 1990 </year>
Reference-contexts: 1 Introduction Detection of redundant linear constraints is important for a variety of applications including linear programming [12], variable elimination (e.g. <ref> [8, 6] </ref>), canonical forms (e.g [9]) and program analysis and verification of hybrid systems (e.g. [3, 5]) to name a few. Systematic semantic methods exist to identify all redundant constraints.
Reference: [7] <author> M.H. Karwan, V. Lofti, J. Telgen, and S. Zionts. </author> <title> Redundancy in Mathematical Programming: a State-of-the-Art Survey, </title> <booktitle> volume 206 of Lecture Notes in Economics and Mathematical Systems. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1983. </year>
Reference-contexts: They consist essentially in solving a linear program per constraint (i.e. optimizing the constraint subject to the other constraints) and hence they are generally computationally expensive. This has led to the investigation of syntactic methods to detect redundant linear constraints (e.g. <ref> [7, 10, 12] </ref>) in order to reduce the need for semantic methods. The purpose of this paper is to propose new syntactic criteria to detect redundant linear constraints. <p> if there exists no solution of S in which all variables are assigned nonnegative values except x k which is assigned a negative value. 1 In the following, we always use S + to denote the system S augmented with the positivity requirements on all its variables. 3 Proof See <ref> [7, 12] </ref>. 2 The rest of this paper focuses on the problem of detecting redundant or non-redundant variables. Detecting a non-redundant variable is in fact as important as detecting a redundant variable, since it precludes the need for semantic methods on the variable. <p> We are now in position to present three syntactic criteria for redundancy. The first result concerns non-basic variables <ref> [7] </ref>. Lemma 3 Let S + be a system of equations in SF. A non-basic variable x k is non redundant in S + if, for each equation x b j = a j0 + P a ji x i satisfying a j0 = 0, we have a jk 0. <p> Variable x k can then be assigned a sufficiently small negative value v k (i.e. jv k j &lt; minfa j0 =a jk j a jk &gt; 0g). Then apply Lemma 2. 2 The second result identifies the non-redundancy of a subset of the leaving variables <ref> [7] </ref> and uses the pivotiong rule of the simplex algorithm.
Reference: [8] <author> D.A. Kolher. </author> <title> Projection of Convex Polyhedral Sets Ph.D. </title> <type> Thesis, </type> <institution> University of California, Berkeley, </institution> <year> 1967. </year>
Reference-contexts: 1 Introduction Detection of redundant linear constraints is important for a variety of applications including linear programming [12], variable elimination (e.g. <ref> [8, 6] </ref>), canonical forms (e.g [9]) and program analysis and verification of hybrid systems (e.g. [3, 5]) to name a few. Systematic semantic methods exist to identify all redundant constraints.
Reference: [9] <author> J.L. Lassez and K. McAloon. </author> <title> Applications of a Canonical Form for Generalized Linear Constraints. </title> <booktitle> In Proceedings of the International Conference on Fifth Generation Computer Systems, </booktitle> <address> Tokyo, Japan, </address> <month> December </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Detection of redundant linear constraints is important for a variety of applications including linear programming [12], variable elimination (e.g. [8, 6]), canonical forms (e.g <ref> [9] </ref>) and program analysis and verification of hybrid systems (e.g. [3, 5]) to name a few. Systematic semantic methods exist to identify all redundant constraints.
Reference: [10] <author> J-L. Lassez, T. Huynh, and K. McAloon. </author> <title> Simplification and Elimination of Redundant Linear Arithmetic Constraints. </title> <editor> In F. Benhamou and A. Colmerauer, editors, </editor> <booktitle> Constraint Logic Programming: Selected Research, </booktitle> <address> p 73-87, </address> <publisher> MIT Press, </publisher> <address> Cambridge, USA, </address> <year> 1993. </year>
Reference-contexts: They consist essentially in solving a linear program per constraint (i.e. optimizing the constraint subject to the other constraints) and hence they are generally computationally expensive. This has led to the investigation of syntactic methods to detect redundant linear constraints (e.g. <ref> [7, 10, 12] </ref>) in order to reduce the need for semantic methods. The purpose of this paper is to propose new syntactic criteria to detect redundant linear constraints. <p> For convenience, we assume that the system S + in LSF does not contain two equations which have similar right-hand sides up to multiplication by a constant and up to the value of the constant. This kind of syntactic redundancy <ref> [10] </ref> can be easily detected. Our first result is a generalization of Lemma 4 and shows that all leaving variables, for a given ordering about to be specified, are non-redundant. This theorem produces much stronger results than Lemma 4. Theorem 3 Let S + be a system in LSF.
Reference: [11] <author> A. Shrijver. </author> <title> Theory of linear and integer programming. Interscience Series in Discrete Mathematics and Optimization. </title> <publisher> Wiley, </publisher> <year> 1986. </year>
Reference-contexts: An inequality C in I is redundant iff Sol (I) = Sol (I n fCg): The following lemma is a basic result on redundancy <ref> [11] </ref>. Lemma 1 Let I = f t 1 0; : : : ; t n 0 g. <p> not trivially true and if there is a non-slack variable x in C, rewrite C as x = t (with t not containing x) and insert it into E else (there are only slack variables in C) if C is not trivially true, insert it into S. end Proof See <ref> [4, 11] </ref>. 2 The detection of redundant constraints is conveniently performed, not on the initial system of linear inequalities I, but rather on a linear program associated with I.
Reference: [12] <author> J. Telgen. </author> <title> Redundancy and linear programs. </title> <publisher> Mathematical Centre Tracts 137, Mathematisch Centrum, </publisher> <address> Amsterdam, </address> <year> 1981. </year>
Reference-contexts: 1 Introduction Detection of redundant linear constraints is important for a variety of applications including linear programming <ref> [12] </ref>, variable elimination (e.g. [8, 6]), canonical forms (e.g [9]) and program analysis and verification of hybrid systems (e.g. [3, 5]) to name a few. Systematic semantic methods exist to identify all redundant constraints. <p> They consist essentially in solving a linear program per constraint (i.e. optimizing the constraint subject to the other constraints) and hence they are generally computationally expensive. This has led to the investigation of syntactic methods to detect redundant linear constraints (e.g. <ref> [7, 10, 12] </ref>) in order to reduce the need for semantic methods. The purpose of this paper is to propose new syntactic criteria to detect redundant linear constraints. <p> if there exists no solution of S in which all variables are assigned nonnegative values except x k which is assigned a negative value. 1 In the following, we always use S + to denote the system S augmented with the positivity requirements on all its variables. 3 Proof See <ref> [7, 12] </ref>. 2 The rest of this paper focuses on the problem of detecting redundant or non-redundant variables. Detecting a non-redundant variable is in fact as important as detecting a redundant variable, since it precludes the need for semantic methods on the variable. <p> Theorem 3 was shown to be effective on almost all cases. It is interesting to note that the problem of redundancy is sometimes connected to the problem of implicit equalities (see for example <ref> [12] </ref>). The lexicographic solved form seems to be an interesting tool to deal with both of these issues since it was originally proposed as an efficient way of detecting implicit equalities inside the simplex algorithm. Hence, it would be interesting to study other related applications.
Reference: [13] <author> P. Van Hentenryck and T. Graf. </author> <title> Standard Forms for Rational Linear Arithmetics in Constraint Logic Programming. </title> <journal> Annals of Mathematics and Artificial Intelligence, </journal> <pages> 5(2-4), </pages> <year> 1992. </year> <month> 18 </month>
Reference-contexts: The purpose of this paper is to propose new syntactic criteria to detect redundant linear constraints. The novel results are based on a lexicographic solved form for linear programming which 1 was proposed in <ref> [13] </ref> as a basis for a decision procedure for generalized linear constraints (including strict inequalities and 6=). The lexicographic solved form appears to be an effective tool to detect redundant linear constraints since our new syntactic criteria subsume and are much stronger than previous results. <p> A non-basic variable which has the unique positive coefficient in the right-hand side of an equation is redundant. Proof This is a direct consequence of Definition 3. 2 4 Redundancy Detection with the Lexicographic Solved Form Our new results are based on another solved form, the lexicographic solved form <ref> [13] </ref>, which was introduced to handle strict inequalities (e.g. &gt;) and disequations (6=). The lexicographic solved form enables us to obtain much stronger syntactic criterion than those obtained with SF. <p> The leading variables are respectively x 0 and x 2 for the first two equations. The following theorem states that LSF is indeed a solved form. Theorem 1 A linear program is satisfiable if and only if it can be mapped into LSF. Proof See <ref> [13] </ref>. 2 The other important property of LSF is that it is preserved through pivoting provided that a lexicographic pivoting rule be used. Since our new criteria make use of the lexicographic pivoting rule, we briefly review the basic concepts. The lexicographic pivoting rule [4] is defined as follows. <p> Proof See <ref> [13] </ref>. 2 Note finally that we can always change the lexicographic ordering as convenient provided that the system remains in LSF. 4.2 Redundancy Detection With LSF We now investigate the use of LSF for the detection of redundant and non-redundant constraints.
References-found: 13

