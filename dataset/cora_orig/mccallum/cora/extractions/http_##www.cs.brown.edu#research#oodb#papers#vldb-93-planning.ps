URL: http://www.cs.brown.edu/research/oodb/papers/vldb-93-planning.ps
Refering-URL: http://www.cs.brown.edu/research/oodb/
Root-URL: http://www.cs.brown.edu
Title: Control of an Extensible Query Optimizer: A Planning-Based Approach  
Author: Gail Mitchell Umeshwar Dayal Stanley B. Zdonik 
Abstract: In this paper we address the problem of controlling the execution of a query optimizer. We describe a control for the optimization process that is based on planning. The controller described here is a goal-directed planner that intermingles planning with the execution of query transformations, and uses execution results to direct further planning of optimizer processing. We describe this control in the context of the Epoq extensible architecture. Epoq is an approach to extensible query optimization that integrates specialized rewrite strategies through its extensible control mechanism. This paper describes our planning-based approach to extensible control and illustrates it with a simple example. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Catriel Beeri and Yoram Kornatzky. </author> <title> Algebraic Optimization of Object-Oriented Query Languages. </title> <booktitle> In Proceedings ICDT, </booktitle> <address> Paris, France, </address> <year> 1990. </year>
Reference-contexts: Most extensible optimiz-ers (e.g. [5], [7], [8], [10], [20]) provide a fixed strategy for searching for and applying rules for query transformation. In other words, although the possible optimizer results can be extended, the optimization process is fixed. Proposals for object-oriented optimizers either use one of these extensible approaches <ref> [1] </ref> or provide some fixed sequence of optimizer processing strategies [3, 21]. The Epoq approach is motivated by the desire to extend an optimizer with new strategies for optimization. In other words, the optimization process can be extended.
Reference: [2] <author> Eugene Charniak and Drew McDermott. </author> <title> Introduction to Artificial Intelligence. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA., </address> <year> 1985. </year>
Reference-contexts: The extensibility of an Epoq optimizer requires, then, that the control component react to the addition of new regions. We satisfy this requirement with a control that is based on planning the optimization process. 5.1 Planning-Based Control over Regions Planning reduces a task to primitive actions <ref> [2] </ref>. In the Epoq context, a region's task is to achieve some goal on a query, and primitive actions are subordinate region executions. Plans use goals to describe tasks and subtasks that can be performed to achieve other goals.
Reference: [3] <institution> Sophie Cluet. Langages et Optimisation de Requ^etes pour Systemes de Gestion de Base de Donnees Ori-entes-Objet. </institution> <type> PhD thesis, </type> <institution> Universite de Paris-Sud Cen-tre d'Orsay, </institution> <month> June </month> <year> 1991. </year>
Reference-contexts: In other words, although the possible optimizer results can be extended, the optimization process is fixed. Proposals for object-oriented optimizers either use one of these extensible approaches [1] or provide some fixed sequence of optimizer processing strategies <ref> [3, 21] </ref>. The Epoq approach is motivated by the desire to extend an optimizer with new strategies for optimization. In other words, the optimization process can be extended. This leads to the need for an extensible control to direct the optimization process.
Reference: [4] <author> Thomas A. Cooper and Nancy Wogrin. </author> <title> Rule-based Programming with OPS5. </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> San Mateo, CA, </address> <year> 1988. </year>
Reference-contexts: Planning actions induce a forward chain through rule goals to find primitive actions. Update actions modify the region's working memory with information that may be used later in the rule search. The rule language and working memory are patterned after rule-based languages such as OPS5 <ref> [4] </ref>. A major difference, though, is that the Epoq rule interpreter interleaves rule manipulation with the execution of subordinate regions. <p> Epoq regions form a knowledge base of information about query processing strategies. The control presented here contains knowledge about ways to combine these strategies to process a query. The Epoq planning-based control is based on rule-based programming languages <ref> [4] </ref> and reactive planning [6]. Our rule execution system, though, differs from either of these. A rule is a task that, if successful, will result in a desired transformation of a query. Thus, a rule describes a consistent way to process a query.
Reference: [5] <author> Beatrice Finance and Georges Gardarin. </author> <title> A Rule-Based Query Rewriter in an Extensible DBMS. </title> <booktitle> In Proceedings of the 7th International Conference on Data Engineering, </booktitle> <pages> pages 248-256. </pages> <publisher> IEEE, </publisher> <year> 1991. </year>
Reference-contexts: To copy otherwise, or to republish, requires a fee and/or special permission from the Endowment. Proceedings of the 19th VLDB Conference Dublin, Ireland 1993 transforming queries. The kinds of rules used to describe query transformations, and the control over execution of those rules, differ in all systems <ref> [5, 7, 16, 19] </ref>. Some systems also recognize a need to support new strategies for optimization; i.e., extensibility of the optimization process itself [11, 14, 18]. The control we present here is designed to support this kind of extensibility. <p> Indeed, in Figure 1 the leaf regions are shown simply as transformations. Of course, these transformations will, in practice, be complicated strategies for manipulating queries. The control presented here concentrates on the integration of transformation strategies. Most extensible optimizers (e.g., <ref> [5] </ref>, [7], [8], [10], [20]) provide a fixed control over the application of strategies to manipulate queries. This makes it difficult for these optimizers to adapt to a changing repertoire of strategies. Epoq allows extension of the control as well as the addition of new optimization strategies. <p> Region LC can choose to use this region to attain its own goal, or can choose to send the query through a sequence of modules (CNF and DP, here) each of which has its own strategy for applying its smaller collection of rules to the query (similarly to <ref> [5] </ref> or [18]). LC could even try both strategies, choosing the best result, or could use the strategies in a pilot pass type of approach. The leaf regions in this example are complicated strategies for the application of transformations to queries. These strategies are controlled by higher-level regions. <p> Most extensible optimiz-ers (e.g. <ref> [5] </ref>, [7], [8], [10], [20]) provide a fixed strategy for searching for and applying rules for query transformation. In other words, although the possible optimizer results can be extended, the optimization process is fixed.
Reference: [6] <author> R. James Firby. </author> <title> Adaptive Execution in Complex Dynamic Worlds. </title> <type> PhD thesis, </type> <institution> Yale University, </institution> <month> January </month> <year> 1989. </year> <month> YALEU/CSD/RR#672. </month>
Reference-contexts: Epoq regions form a knowledge base of information about query processing strategies. The control presented here contains knowledge about ways to combine these strategies to process a query. The Epoq planning-based control is based on rule-based programming languages [4] and reactive planning <ref> [6] </ref>. Our rule execution system, though, differs from either of these. A rule is a task that, if successful, will result in a desired transformation of a query. Thus, a rule describes a consistent way to process a query.
Reference: [7] <author> Goetz Graefe. </author> <title> Rule-Based Query Optimization in Extensible Database Systems. </title> <type> PhD thesis, </type> <institution> Univ. of Wisconsin-Madison, </institution> <month> November </month> <year> 1987. </year>
Reference-contexts: To copy otherwise, or to republish, requires a fee and/or special permission from the Endowment. Proceedings of the 19th VLDB Conference Dublin, Ireland 1993 transforming queries. The kinds of rules used to describe query transformations, and the control over execution of those rules, differ in all systems <ref> [5, 7, 16, 19] </ref>. Some systems also recognize a need to support new strategies for optimization; i.e., extensibility of the optimization process itself [11, 14, 18]. The control we present here is designed to support this kind of extensibility. <p> Indeed, in Figure 1 the leaf regions are shown simply as transformations. Of course, these transformations will, in practice, be complicated strategies for manipulating queries. The control presented here concentrates on the integration of transformation strategies. Most extensible optimizers (e.g., [5], <ref> [7] </ref>, [8], [10], [20]) provide a fixed control over the application of strategies to manipulate queries. This makes it difficult for these optimizers to adapt to a changing repertoire of strategies. Epoq allows extension of the control as well as the addition of new optimization strategies. <p> Normally, rule-based optimizers do pattern matching (and usually condition testing) of the query expression with the left hand sides of rules, then perform some conflict resolution if more than one rule matches a query (e.g., assign weights to rules as in <ref> [7] </ref>). This approach is not satisfactory for an Epoq optimizer because the regions do not behave as precisely as rules behave. In a rule-based optimizer, rules provide complete information to a search engine, and can be applied by a rule execution process. <p> Most extensible optimiz-ers (e.g. [5], <ref> [7] </ref>, [8], [10], [20]) provide a fixed strategy for searching for and applying rules for query transformation. In other words, although the possible optimizer results can be extended, the optimization process is fixed.
Reference: [8] <author> Goetz Graefe. Volcano, </author> <title> an Extensible and Parallel Query Evaluation System. </title> <type> Technical Report CU-CS-481-90, </type> <institution> University of Colorado at Boulder, </institution> <month> July </month> <year> 1990. </year>
Reference-contexts: Indeed, in Figure 1 the leaf regions are shown simply as transformations. Of course, these transformations will, in practice, be complicated strategies for manipulating queries. The control presented here concentrates on the integration of transformation strategies. Most extensible optimizers (e.g., [5], [7], <ref> [8] </ref>, [10], [20]) provide a fixed control over the application of strategies to manipulate queries. This makes it difficult for these optimizers to adapt to a changing repertoire of strategies. Epoq allows extension of the control as well as the addition of new optimization strategies. <p> Most extensible optimiz-ers (e.g. [5], [7], <ref> [8] </ref>, [10], [20]) provide a fixed strategy for searching for and applying rules for query transformation. In other words, although the possible optimizer results can be extended, the optimization process is fixed.
Reference: [9] <author> Goetz Graefe and David J. DeWitt. </author> <title> The EXODUS Optimizer Generator. </title> <booktitle> In SIGMOD Proceedings, </booktitle> <pages> pages 160-172. </pages> <publisher> ACM, </publisher> <month> May </month> <year> 1987. </year>
Reference-contexts: This region has three subordinate regions that it can use in trying to achieve its goal of lowering the expected cost of its input query expression. Region EX could be a rule processor (perhaps built by an optimizer generator <ref> [9] </ref>) that estimates the cost of transformed queries and returns the lowest cost query it can find.
Reference: [10] <author> Laura M. Haas et al. </author> <title> Extensible Query Processing in Starburst. </title> <booktitle> In SIGMOD Proceedings, </booktitle> <pages> pages 377-388. </pages> <publisher> ACM, </publisher> <month> June </month> <year> 1989. </year>
Reference-contexts: Indeed, in Figure 1 the leaf regions are shown simply as transformations. Of course, these transformations will, in practice, be complicated strategies for manipulating queries. The control presented here concentrates on the integration of transformation strategies. Most extensible optimizers (e.g., [5], [7], [8], <ref> [10] </ref>, [20]) provide a fixed control over the application of strategies to manipulate queries. This makes it difficult for these optimizers to adapt to a changing repertoire of strategies. Epoq allows extension of the control as well as the addition of new optimization strategies. <p> Most extensible optimiz-ers (e.g. [5], [7], [8], <ref> [10] </ref>, [20]) provide a fixed strategy for searching for and applying rules for query transformation. In other words, although the possible optimizer results can be extended, the optimization process is fixed.
Reference: [11] <author> Rosana S. G. Lanzelotte and Patrick Valduriez. </author> <title> Extending the Search Strategy in a Query Optimizer. </title> <booktitle> In Proceedings of the 17th VLDB Conference, </booktitle> <pages> pages 363 - 373, </pages> <year> 1991. </year>
Reference-contexts: The kinds of rules used to describe query transformations, and the control over execution of those rules, differ in all systems [5, 7, 16, 19]. Some systems also recognize a need to support new strategies for optimization; i.e., extensibility of the optimization process itself <ref> [11, 14, 18] </ref>. The control we present here is designed to support this kind of extensibility. The Epoq approach to extensible query optimization allows extension of the collection of control strategies that can be used when optimizing a query [14]. <p> In other words, the optimization process can be extended. This leads to the need for an extensible control to direct the optimization process. Optimizer strategy extensibility also motivates the approaches of Lanzelotte and Valduriez <ref> [11] </ref> and Sciore and Sieg [18], so we discuss these in more detail here. Sciore and Sieg [18, 19] group query rewrite rules into modules, where different modules can have different rule search and termination strategies. We use a similar approach in our planning system. <p> Lanzelotte and Valduriez address the problem of customizing the optimization process to a particular query by focussing on an extensible way to define strategies for manipulating query expressions <ref> [11] </ref>. Different search strategies are related through a sub-type hierarchy of strategies, with higher level specifications describing the methods present in a search strategy and lower level specializations (i.e., the specific strategies) implementing these methods (in different ways).
Reference: [12] <author> Rosana S. G. Lanzelotte, Patrick Valduriez, M. Ziane, and J.-P. Cheiney. </author> <title> Optimization of Nonrecursive Queries in OODBs. </title> <booktitle> In Proceedings of the Second International Conference on Deductive and Object-Oriented Databases, </booktitle> <month> December </month> <year> 1991. </year>
Reference-contexts: The optimizer in this example ignores many of the problems that are encountered with object-oriented queries. For example, this optimizer design doesn't include any processing for path expressions (as in <ref> [12] </ref>, for example) or any type specific optimization (e.g. [13]). Such optimizations could be included as leaf regions, and the control of OPT could use these strategies in conjunction with the other strategies when appropriate. For example, path expression processing might be combined with join/outerjoin reordering.
Reference: [13] <author> Christopher V. Malley and Stanley B. Zdonik. </author> <title> A Knowledge-Based Approach to Query Optimization. </title> <booktitle> In Proceedings of the First International Conference on Expert Database Systems, </booktitle> <pages> pages 329-344, </pages> <year> 1987. </year>
Reference-contexts: The optimizer in this example ignores many of the problems that are encountered with object-oriented queries. For example, this optimizer design doesn't include any processing for path expressions (as in [12], for example) or any type specific optimization (e.g. <ref> [13] </ref>). Such optimizations could be included as leaf regions, and the control of OPT could use these strategies in conjunction with the other strategies when appropriate. For example, path expression processing might be combined with join/outerjoin reordering.
Reference: [14] <author> Gail Mitchell, Stanley B. Zdonik, and Umeshwar Dayal. </author> <title> An Architecture for Query Processing in Persistent Object Stores. </title> <booktitle> In Proceedings of the Hawaii International Conference on System Sciences, </booktitle> <volume> volume II, </volume> <pages> pages 787-798, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: The kinds of rules used to describe query transformations, and the control over execution of those rules, differ in all systems [5, 7, 16, 19]. Some systems also recognize a need to support new strategies for optimization; i.e., extensibility of the optimization process itself <ref> [11, 14, 18] </ref>. The control we present here is designed to support this kind of extensibility. The Epoq approach to extensible query optimization allows extension of the collection of control strategies that can be used when optimizing a query [14]. <p> The control we present here is designed to support this kind of extensibility. The Epoq approach to extensible query optimization allows extension of the collection of control strategies that can be used when optimizing a query <ref> [14] </ref>. Each strategy can search some portion of the space of queries equivalent to the optimizer input query. Different strategies will usually search different (possibly overlapping) parts of the search space, although different strategies may simply offer alternative ways to search the same space.
Reference: [15] <author> Gail A. Mitchell. </author> <title> Extensible Query Processing in an Object-Oriented Database. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Brown University, </institution> <month> May </month> <year> 1993. </year> <note> Technical report CS-93-16. </note>
Reference-contexts: The interface to a region's children allows the region to use the children as transformations. This interface can request information from children which is then supplied to the region's control. Region interfaces are described more completely in <ref> [15] </ref>. Epoq defines a common structure for the interface to ensure structural compatibility. This supports communication between regions as well as the addition of new regions to an optimizer. The architecture of all parent-child interfaces is the same, although the implementation of this architecture may be different for each interface. <p> On the other hand, goal "Flatter" (rule 3) is a planning goal of the region. Subtasks that can achieve this goal are described by another goal package (not shown, see <ref> [15] </ref>). Memory update actions can be used to affect subsequent rule control. For example, the Fast Rewrite goal package (Figure 7) uses the local control store to implement the conditional decision structure of the following pilot pass style algorithm: 1. Achieve Simple Transform on Q Giving Q 1 . 2.
Reference: [16] <author> Hamid Pirahesh, Joseph M. Hellerstein, and Waqar Hasan. </author> <title> Extensible/Rule Based Query Rewrite Optimization in Starburst. </title> <booktitle> In SIGMOD Proceedings, </booktitle> <pages> pages 39-48. </pages> <publisher> ACM, </publisher> <month> June </month> <year> 1992. </year>
Reference-contexts: To copy otherwise, or to republish, requires a fee and/or special permission from the Endowment. Proceedings of the 19th VLDB Conference Dublin, Ireland 1993 transforming queries. The kinds of rules used to describe query transformations, and the control over execution of those rules, differ in all systems <ref> [5, 7, 16, 19] </ref>. Some systems also recognize a need to support new strategies for optimization; i.e., extensibility of the optimization process itself [11, 14, 18]. The control we present here is designed to support this kind of extensibility. <p> Collecting rules with the same goals into a package allows for the definition of package search strategies that can take advantage of the smaller sets of rules and of any particular characteristics of the rule sets <ref> [16, 19] </ref>. Each goal package has its own execution and private control store. Thus, as for regions, different goals can define different search control strategies and termination conditions.
Reference: [17] <author> Arnon Rosenthal, Umeshwar Dayal, and David Reiner. </author> <title> Speeding a Query Optimizer: The Pilot Pass Approach. </title> <institution> Computer Corp. of America, </institution> <note> unpublished note. </note>
Reference-contexts: The specification of such orderings, and the means for choosing among regions with the same goals (e.g., OJ and DP) are presented in Section 5. Region OPT can also choose to process queries using a "pilot pass" style algorithm <ref> [17] </ref> that first applies simple transformations to the query (region SX) and is satisfied with the result (and quits) if those transformations reduce the expected cost by some amount.
Reference: [18] <author> Edward Sciore and John Sieg, Jr. </author> <title> A Modular Query Optimizer Generator. </title> <booktitle> In Proceedings of the 6th International Conference on Data Engineering, </booktitle> <pages> pages 146-153, </pages> <year> 1990. </year>
Reference-contexts: The kinds of rules used to describe query transformations, and the control over execution of those rules, differ in all systems [5, 7, 16, 19]. Some systems also recognize a need to support new strategies for optimization; i.e., extensibility of the optimization process itself <ref> [11, 14, 18] </ref>. The control we present here is designed to support this kind of extensibility. The Epoq approach to extensible query optimization allows extension of the collection of control strategies that can be used when optimizing a query [14]. <p> Region LC can choose to use this region to attain its own goal, or can choose to send the query through a sequence of modules (CNF and DP, here) each of which has its own strategy for applying its smaller collection of rules to the query (similarly to [5] or <ref> [18] </ref>). LC could even try both strategies, choosing the best result, or could use the strategies in a pilot pass type of approach. The leaf regions in this example are complicated strategies for the application of transformations to queries. These strategies are controlled by higher-level regions. <p> In other words, the optimization process can be extended. This leads to the need for an extensible control to direct the optimization process. Optimizer strategy extensibility also motivates the approaches of Lanzelotte and Valduriez [11] and Sciore and Sieg <ref> [18] </ref>, so we discuss these in more detail here. Sciore and Sieg [18, 19] group query rewrite rules into modules, where different modules can have different rule search and termination strategies. We use a similar approach in our planning system. <p> This leads to the need for an extensible control to direct the optimization process. Optimizer strategy extensibility also motivates the approaches of Lanzelotte and Valduriez [11] and Sciore and Sieg [18], so we discuss these in more detail here. Sciore and Sieg <ref> [18, 19] </ref> group query rewrite rules into modules, where different modules can have different rule search and termination strategies. We use a similar approach in our planning system. The difference here, of course, is that our rules plan the operation of the optimizer itself.
Reference: [19] <author> John Connor Sieg, Jr. </author> <title> Making extensible database technology work. </title> <type> PhD thesis, </type> <institution> Boston University, </institution> <year> 1989. </year>
Reference-contexts: To copy otherwise, or to republish, requires a fee and/or special permission from the Endowment. Proceedings of the 19th VLDB Conference Dublin, Ireland 1993 transforming queries. The kinds of rules used to describe query transformations, and the control over execution of those rules, differ in all systems <ref> [5, 7, 16, 19] </ref>. Some systems also recognize a need to support new strategies for optimization; i.e., extensibility of the optimization process itself [11, 14, 18]. The control we present here is designed to support this kind of extensibility. <p> Collecting rules with the same goals into a package allows for the definition of package search strategies that can take advantage of the smaller sets of rules and of any particular characteristics of the rule sets <ref> [16, 19] </ref>. Each goal package has its own execution and private control store. Thus, as for regions, different goals can define different search control strategies and termination conditions. <p> This leads to the need for an extensible control to direct the optimization process. Optimizer strategy extensibility also motivates the approaches of Lanzelotte and Valduriez [11] and Sciore and Sieg [18], so we discuss these in more detail here. Sciore and Sieg <ref> [18, 19] </ref> group query rewrite rules into modules, where different modules can have different rule search and termination strategies. We use a similar approach in our planning system. The difference here, of course, is that our rules plan the operation of the optimizer itself.
Reference: [20] <author> Michael Stonebraker. </author> <title> Inclusion of New Types in Relational Database Systems. </title> <editor> In Michael Stonebraker, editor, </editor> <booktitle> Readings in Database Systems. </booktitle> <publisher> Morgan Kaufmann Pub. Inc., </publisher> <year> 1988. </year>
Reference-contexts: Indeed, in Figure 1 the leaf regions are shown simply as transformations. Of course, these transformations will, in practice, be complicated strategies for manipulating queries. The control presented here concentrates on the integration of transformation strategies. Most extensible optimizers (e.g., [5], [7], [8], [10], <ref> [20] </ref>) provide a fixed control over the application of strategies to manipulate queries. This makes it difficult for these optimizers to adapt to a changing repertoire of strategies. Epoq allows extension of the control as well as the addition of new optimization strategies. <p> Most extensible optimiz-ers (e.g. [5], [7], [8], [10], <ref> [20] </ref>) provide a fixed strategy for searching for and applying rules for query transformation. In other words, although the possible optimizer results can be extended, the optimization process is fixed.
Reference: [21] <author> Dave D. Straube and M. Tamer Ozsu. </author> <title> Queries and Query Processing in Object-Oriented Database Systems. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 8(4) </volume> <pages> 387-430, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: In other words, although the possible optimizer results can be extended, the optimization process is fixed. Proposals for object-oriented optimizers either use one of these extensible approaches [1] or provide some fixed sequence of optimizer processing strategies <ref> [3, 21] </ref>. The Epoq approach is motivated by the desire to extend an optimizer with new strategies for optimization. In other words, the optimization process can be extended. This leads to the need for an extensible control to direct the optimization process.
Reference: [22] <author> H.J.A. van Kuijk and P.M.G. Apers. </author> <title> Semantic Query Optimization in Distributed Databases: A Knowledge-Based Approach. </title> <editor> In Goetz Graefe, editor, </editor> <booktitle> Workshop on Database Query Optimization, </booktitle> <pages> pages 53-58, </pages> <address> Portland, OR, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: Given a query to process, one of the strategies present in an optimizer is chosen to optimize that query. The Epoq approach to query optimization is related to the knowledge-based approach of <ref> [22] </ref>. Epoq regions form a knowledge base of information about query processing strategies. The control presented here contains knowledge about ways to combine these strategies to process a query. The Epoq planning-based control is based on rule-based programming languages [4] and reactive planning [6].
References-found: 22

