URL: ftp://ftp.cs.ucsd.edu/pub/team/casd.ps.Z
Refering-URL: http://www.cs.ucsd.edu/users/flaviu/publications.html
Root-URL: http://www.cs.ucsd.edu
Title: Atomic Broadcast: From Simple Message Diffusion to Byzantine Agreement  
Author: Flaviu Cristian, Houtan Aghili, Ray Strong, Danny Dolev 
Keyword: and phrases: Atomic Broadcast, Byzantine Agreement, Computer Network, Correctnesss, Distributed System, Failure Classification, Fault-Tolerance, Lower Bound, Real-Time System, Reliability, Replicated Data.  
Note: Flaviu Cristian is now with the University of California, San Diego, Houtan Aghili is with the IBM TJ Watson Research Center and Danny Dolev is with the  
Date: March 29, 1994  
Address: San Jose, CA 95120-6099  
Affiliation: IBM Alamaden Research Center  Hebrew University  
Abstract: In distributed systems subject to random communication delays and component failures, atomic broadcast can be used to implement the abstraction of synchronous replicated storage, a distributed storage that displays the same contents at every correct processor as of any clock time. This paper presents a systematic derivation of a family of atomic broadcast protocols that are tolerant of increasingly general failure classes: omission failures, timing failures, and authentication-detectable Byzantine failures. The protocols work for arbitrary point-to-point network topologies, and can tolerate any number of link and process failures up to network partitioning. After proving their correctness, we also prove two lower bounds that show that the protocols provide in many cases the best possible termination times. 
Abstract-found: 1
Intro-found: 1
Reference: [ADLS] <author> H. Attiya, C. Dwork, N. Lynch, and L. Stockmeyer, </author> <title> "Bounds on the time to reach agreement in the presence of timing uncertainty," </title> <booktitle> Proceedings of ACM Symposium on Theory of Computing, </booktitle> <pages> pp. 358-369, </pages> <year> 1991. </year>
Reference-contexts: However, they still remain competitive from the point of view of simplicity. Work on very closely related problems suggests that the time complexity attributed to algorithms operating in our model is very sensitive to the definition of termination time. Recent results <ref> [ADLS, Po] </ref> on the real time required for the consensus problem are not readily comparable with our termination time results even though our models describe exactly the same phenomena. A better understanding of the relationship between our results and these real time results is the subject of current research.
Reference: [BSD] <author> O. Babaoglu, P. Stephenson, R. Drumond: </author> <title> "Reliable Broadcasts and Communication Models: Tradeoffs and Lower Bounds," </title> <journal> Distributed Computing, </journal> <volume> No. 2, </volume> <pages> pp. 177-189, </pages> <year> 1988. </year>
Reference-contexts: Since then, several other protocols for atomic broadcast in system models similar to ours have been proposed (e.g. [BJ], <ref> [BSD] </ref>, [Ca], [CM], [D], [GSTC], [PG], [SDC]). All protocols proposed so far can be divided into two classes: time oriented protocols providing bounded termination times even when failures occur during broadcast, and acknowledgement-based protocols that do not provide bounded termination times if failures occur during a broadcast. <p> Examples of protocols in 39 the first class (other than those given in this paper) are <ref> [BSD] </ref>, [GSTC], [PG], and [SDC]. Examples of acknowledgement-based protocols are [BJ], [Ca], [CM], and [D]. While the acknowledgement-based protocols have the potential of tolerating performance failures that can cause network partitioning, diffusion protocols cannot tolerate partition failures.
Reference: [BJ] <author> K. Birman, T. Joseph: </author> <title> "Reliable Communication in the Presence of Failures," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> Vol. 5, No. 1, </volume> <month> February </month> <year> 1987, </year> <pages> pp. 47-76, </pages> <year> 1984. </year>
Reference-contexts: Since then, several other protocols for atomic broadcast in system models similar to ours have been proposed (e.g. <ref> [BJ] </ref>, [BSD], [Ca], [CM], [D], [GSTC], [PG], [SDC]). All protocols proposed so far can be divided into two classes: time oriented protocols providing bounded termination times even when failures occur during broadcast, and acknowledgement-based protocols that do not provide bounded termination times if failures occur during a broadcast. <p> Examples of protocols in 39 the first class (other than those given in this paper) are [BSD], [GSTC], [PG], and [SDC]. Examples of acknowledgement-based protocols are <ref> [BJ] </ref>, [Ca], [CM], and [D]. While the acknowledgement-based protocols have the potential of tolerating performance failures that can cause network partitioning, diffusion protocols cannot tolerate partition failures.
Reference: [C] <author> F. Cristian, </author> <title> "Correct and Robust Programs," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. SE-10, no. 2, </volume> <pages> pp. 163-174, </pages> <year> 1984. </year>
Reference: [Ca] <author> R. Carr: </author> <title> "The Tandem Global Update Protocol," </title> <journal> Tandem Systems Review, </journal> <pages> pp. 74-85, </pages> <month> 40 June </month> <year> 1985. </year>
Reference-contexts: Since then, several other protocols for atomic broadcast in system models similar to ours have been proposed (e.g. [BJ], [BSD], <ref> [Ca] </ref>, [CM], [D], [GSTC], [PG], [SDC]). All protocols proposed so far can be divided into two classes: time oriented protocols providing bounded termination times even when failures occur during broadcast, and acknowledgement-based protocols that do not provide bounded termination times if failures occur during a broadcast. <p> Examples of protocols in 39 the first class (other than those given in this paper) are [BSD], [GSTC], [PG], and [SDC]. Examples of acknowledgement-based protocols are [BJ], <ref> [Ca] </ref>, [CM], and [D]. While the acknowledgement-based protocols have the potential of tolerating performance failures that can cause network partitioning, diffusion protocols cannot tolerate partition failures.
Reference: [CAS] <author> F. Cristian, H. Aghili, and R. </author> <title> Strong, "Clock Synchronization in the Presence of Omission and Performance Faults, and Processor Joins," </title> <booktitle> 16th International Conference on Fault-Tolerant Computing, </booktitle> <address> Vienna, Austria, </address> <year> 1986. </year>
Reference-contexts: Note that Assumptions 3 and 5 from Section 3 constrain the possible specifications for links and for sub-component clocks. Our results will hold for any specifications that satisfy our assumptions. For example, it would be sufficient to specify that (a) each correct clock maintain linear envelope synchronization (v. [DHSS], <ref> [CAS] </ref>) so that ff (u v) C p (u) C p (v) fi (u v) + fl, for all real times u &gt; v, and that (b) each message be delivered by a link within (ffi fl)=fi time units of the real time at which it was sent on the link. <p> Even better performance could be achieved by adopting a clock synchronization approach developed later [Cri] which enables the achievement of synchronization precisions superior to those achievable by algorithms such as those discussed in <ref> [CAS] </ref>, [DHSS], and [Sc]. At the time when our protocols were invented (1983), we were unaware of other protocols for atomic broadcast designed for system models more realistic than those assumed in the Byzantine agreement literature [F], [LSP], [SD].
Reference: [Cr] <author> F. Cristian, </author> <title> "Agreeing on Who is Present and Who is Absent in a Synchronous Distributed System," </title> <booktitle> 18th International Conference on Fault-Tolerant Computing, </booktitle> <address> Tokyo, Japan, </address> <year> 1988. </year>
Reference-contexts: Several examples of such adaptations are given in [L]. Within the Highly Available System project 1 at the Almaden Research Center, atomic broadcast was designed for updating replicated system directories and reaching agreement on the failure and recovery of system components <ref> [Cr] </ref>, [GS]. In the HAS system prototype, membership information and service directories are maintained as synchronous replicated storage. Much of the previous work on atomic broadcast has been performed within the Byzantine Generals framework [LSP] (see [F],[SD] for surveys of this work). <p> If q receives broadcast T i by T i + , but does not receive broadcast T i+1 by T i+1 + , q learns the proposition "p is not correct at time T i+1 on its clock" <ref> [Cr] </ref>. For each correctness proof, we will use the term "learn" for an action that can only happen once at a processor for any particular proposition.
Reference: [Cri] <author> F. Cristian, </author> <title> "Probabilistic Clock Synchronization," </title> <journal> Distributed Computing, </journal> <volume> Vol. 3, </volume> <pages> pp. 146-158, </pages> <year> 1989. </year>
Reference-contexts: If * &lt; ffi (this is possible for probabilistic clock synchronization algorithms <ref> [Cri] </ref>) then p receives a message (T,p,) from r at local time T + 3ffi after the delivery deadline T + 2ffi + * has passed. To prevent such residual messages from accumulating in local histories, we introduce a "late message" acceptance test. <p> Abandoning the rounds model has led to better performance than we obtained by a straightforward conversion of the rounds based protocol in [DS]. Even better performance could be achieved by adopting a clock synchronization approach developed later <ref> [Cri] </ref> which enables the achievement of synchronization precisions superior to those achievable by algorithms such as those discussed in [CAS], [DHSS], and [Sc].
Reference: [CM] <author> J.M. Chang, </author> <title> and N.F. Maxemchuk, "Reliable Broadcast Protocols," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> Vol. 2, No. 3, </volume> <pages> pp. 251-273, </pages> <year> 1984. </year> <title> [D] "The Delta-4: Overal System Specification," </title> <editor> D. Powell, editor, Delta-4 Project Consortium, Bull-SA, </editor> <address> BP 208, 38432 Echirolles, France, </address> <month> January </month> <year> 1989. </year>
Reference-contexts: Since then, several other protocols for atomic broadcast in system models similar to ours have been proposed (e.g. [BJ], [BSD], [Ca], <ref> [CM] </ref>, [D], [GSTC], [PG], [SDC]). All protocols proposed so far can be divided into two classes: time oriented protocols providing bounded termination times even when failures occur during broadcast, and acknowledgement-based protocols that do not provide bounded termination times if failures occur during a broadcast. <p> Examples of protocols in 39 the first class (other than those given in this paper) are [BSD], [GSTC], [PG], and [SDC]. Examples of acknowledgement-based protocols are [BJ], [Ca], <ref> [CM] </ref>, and [D]. While the acknowledgement-based protocols have the potential of tolerating performance failures that can cause network partitioning, diffusion protocols cannot tolerate partition failures.
Reference: [DS] <author> D. Dolev, and R. </author> <title> Strong, "Authenticated Algorithms for Byzantine Agreement," </title> <journal> SIAM Journal of Computing, </journal> <volume> Vol. 12, No. 4, </volume> <pages> pp. 656-666, </pages> <year> 1983. </year>
Reference-contexts: One way of preventing this phenomenon is to authenticate the messages exchanged by processors during a broadcast <ref> [DS] </ref>, [LSP], so that messages corrupted by "Byzantine" processors can be recognized and discarded by correct processors. In this way, we are able to handle authentication-detectable Byzantine failures in a manner similar to the way we handle timing failures. <p> In this case our message costs are as good but may not be better, since these protocols usually use some variant of diffusion. For illustrative purposes, we consider the round based protocol in <ref> [DS] </ref> that was designed for complete connectivity. Moreover, we consider a straightforward conversion of this protocol to our model, using an arbitrary minimal length routing scheme to simulate complete "logical" connectivity between processors. <p> For example the fourth algorithm of [LSP] which terminates in + d rounds by using diffusion 27 requires a termination time of ( + d)(ffi + *) clock time units [LSP]. A round based protocol such as <ref> [DS] </ref> which assumes full network connectivity would require that each round lasts for at least dffi + * clock time units. To tolerate failures, the [DS] protocol needs at least + 1 rounds, that is, a conversion to our model would require at least ( + 1)(dffi + *) clock time <p> A round based protocol such as <ref> [DS] </ref> which assumes full network connectivity would require that each round lasts for at least dffi + * clock time units. To tolerate failures, the [DS] protocol needs at least + 1 rounds, that is, a conversion to our model would require at least ( + 1)(dffi + *) clock time units. <p> We then prove a second lower bound for the termination time of any atomic broadcast in the presence of authentication-detectable Byzantine failures. Our first lower bound proof is based on a proof in <ref> [DS] </ref> for a much simpler model; but the conversion from the simple model to our system model, especially from completely connected to arbitrary networks, was not at all trivial. <p> It is easy to show that a completely connected network of n nodes requires +1 steps (to tolerate &lt;n-1 processor omission failures and =0 link failures), so Theorem 4 is consistent with the result in <ref> [DS] </ref>. 9.3 A time lower bound for authentication-detectable Byzantine failures We now move from omission failures to authentication-detectable Byzantine failures and show that our protocols are best possible for the case of an n processor Hamiltonian network that must tolerate n-2 processor authentication-detectable Byzantine failures. <p> Abandoning the rounds model has led to better performance than we obtained by a straightforward conversion of the rounds based protocol in <ref> [DS] </ref>. Even better performance could be achieved by adopting a clock synchronization approach developed later [Cri] which enables the achievement of synchronization precisions superior to those achievable by algorithms such as those discussed in [CAS], [DHSS], and [Sc].
Reference: [DHSS] <author> D. Dolev, J. Halpern, B. Simons, and R. </author> <title> Strong, "Fault-Tolerant Clock Synchronization," </title> <booktitle> Proceedings of the 3rd Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <year> 1984. </year>
Reference-contexts: Note that Assumptions 3 and 5 from Section 3 constrain the possible specifications for links and for sub-component clocks. Our results will hold for any specifications that satisfy our assumptions. For example, it would be sufficient to specify that (a) each correct clock maintain linear envelope synchronization (v. <ref> [DHSS] </ref>, [CAS]) so that ff (u v) C p (u) C p (v) fi (u v) + fl, for all real times u &gt; v, and that (b) each message be delivered by a link within (ffi fl)=fi time units of the real time at which it was sent on the <p> Even better performance could be achieved by adopting a clock synchronization approach developed later [Cri] which enables the achievement of synchronization precisions superior to those achievable by algorithms such as those discussed in [CAS], <ref> [DHSS] </ref>, and [Sc]. At the time when our protocols were invented (1983), we were unaware of other protocols for atomic broadcast designed for system models more realistic than those assumed in the Byzantine agreement literature [F], [LSP], [SD].
Reference: [F] <author> M. Fischer, </author> <title> "The Consensus Problem in Unreliable Distributed Systems," </title> <booktitle> Proceedings of the International Conference on Foundations of Computing Theory, </booktitle> <address> Sweden, </address> <year> 1983. </year>
Reference-contexts: At the time when our protocols were invented (1983), we were unaware of other protocols for atomic broadcast designed for system models more realistic than those assumed in the Byzantine agreement literature <ref> [F] </ref>, [LSP], [SD]. Since then, several other protocols for atomic broadcast in system models similar to ours have been proposed (e.g. [BJ], [BSD], [Ca], [CM], [D], [GSTC], [PG], [SDC]).
Reference: [GSTC] <author> A. Gopal, R. Strong, S. Toueg, and F. Cristian, </author> <title> "Early-delivery atomic broadcast," </title> <booktitle> Proc. 9th ACM Symp. on Principles of Distributed Computing, </booktitle> <pages> pp. 297-309, </pages> <address> Quebec City, </address> <year> 1990. </year>
Reference-contexts: Our termination times hold for each execution uniformly and are not simply worst case. Recent work has shown that it is often possible to terminate earlier than the worst case time using acknowledgement in addition to diffusion <ref> [PG, GSTC] </ref>. Thus our algorithms neither achieve the best worst case time nor the best expected or average time. However, they still remain competitive from the point of view of simplicity. <p> Since then, several other protocols for atomic broadcast in system models similar to ours have been proposed (e.g. [BJ], [BSD], [Ca], [CM], [D], <ref> [GSTC] </ref>, [PG], [SDC]). All protocols proposed so far can be divided into two classes: time oriented protocols providing bounded termination times even when failures occur during broadcast, and acknowledgement-based protocols that do not provide bounded termination times if failures occur during a broadcast. <p> Examples of protocols in 39 the first class (other than those given in this paper) are [BSD], <ref> [GSTC] </ref>, [PG], and [SDC]. Examples of acknowledgement-based protocols are [BJ], [Ca], [CM], and [D]. While the acknowledgement-based protocols have the potential of tolerating performance failures that can cause network partitioning, diffusion protocols cannot tolerate partition failures.
Reference: [GS] <author> A. Griefer, and H. R. Strong, "DCF: </author> <title> Distributed Communication with Fault-tolerance," </title> <booktitle> Proceedings of the 7th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <year> 1988. </year>
Reference-contexts: Several examples of such adaptations are given in [L]. Within the Highly Available System project 1 at the Almaden Research Center, atomic broadcast was designed for updating replicated system directories and reaching agreement on the failure and recovery of system components [Cr], <ref> [GS] </ref>. In the HAS system prototype, membership information and service directories are maintained as synchronous replicated storage. Much of the previous work on atomic broadcast has been performed within the Byzantine Generals framework [LSP] (see [F],[SD] for surveys of this work). <p> the timestamps issued by cyclic clocks that would be sufficient to prove the correctness of our algorithms under the assumption that faulty processors do not live longer than half the wrap around time (this is the way the order relation on timestamps is implemented in the system prototype described in <ref> [GS] </ref>). <p> A variant of this protocol (which uses error correcting codes to authenticate messages) has been implemented and runs on a prototype system designed by the Highly Available Systems project at the IBM Almaden Research Center <ref> [GS] </ref>. The experience accumulated during the implementation and test of this prototype showed us that the failures most likely to be observed in distributed systems based on general purpose operating systems such as VM or Unix are performance (or late timing) failures caused by random variations in system load.
Reference: [L] <author> L. Lamport, </author> <title> "Using Time instead of Time-outs in Fault-Tolerant Systems," </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> Vol. 6, No. 2, </volume> <pages> pp. 256-280, </pages> <year> 1984. </year>
Reference-contexts: It is relatively straightforward to adapt known concurrent programming paradigms for shared storage environments to distributed environments that provide 2 the abstraction of a synchronous replicated storage. Several examples of such adaptations are given in <ref> [L] </ref>. Within the Highly Available System project 1 at the Almaden Research Center, atomic broadcast was designed for updating replicated system directories and reaching agreement on the failure and recovery of system components [Cr], [GS].
Reference: [LSP] <author> L. Lamport, R. Shostak, and M. Pease, </author> <title> "The Byzantine Generals Problem," </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> Vol. 4, No. 3, </volume> <pages> pp. 382-401, </pages> <month> July </month> <year> 1982. </year>
Reference-contexts: In the HAS system prototype, membership information and service directories are maintained as synchronous replicated storage. Much of the previous work on atomic broadcast has been performed within the Byzantine Generals framework <ref> [LSP] </ref> (see [F],[SD] for surveys of this work). Typical models within this framework have assumed guaranteed communication in a completely connected network of perfectly synchronized processors. <p> An omission failure occurs when, in response to a sequence of inputs, a component never gives the specified output. A timing failure occurs when the component gives the specified output too early, too late, or never. A Byzantine failure <ref> [LSP] </ref> occurs when the component does not behave in the manner specified: either no output occurs, or the output is outside the real-time interval specified, or some output different from the one specified occurs. <p> An important subclass of Byzantine failures are those for which any resulting corruption of messages relayed by components such as processors and links is detectable by using a message authentication protocol. We call failures in this class authentication-detectable Byzantine failures (cf. <ref> [LSP] </ref>). Error detecting codes [PW] and public-key cryptosystems based on digital signatures [RSA] are two examples of authentication techniques which can ensure that both unintentional and intentional message corruptions are detected with very high probability. <p> One way of preventing this phenomenon is to authenticate the messages exchanged by processors during a broadcast [DS], <ref> [LSP] </ref>, so that messages corrupted by "Byzantine" processors can be recognized and discarded by correct processors. In this way, we are able to handle authentication-detectable Byzantine failures in a manner similar to the way we handle timing failures. <p> Otherwise, the number of component failures tolerated by the converted protocol may be dramatically reduced from that of the original. However, there are round based protocols that do not depend on complete connectivity (e.g. the fourth protocol of <ref> [LSP] </ref> based on authentication). In this case our message costs are as good but may not be better, since these protocols usually use some variant of diffusion. For illustrative purposes, we consider the round based protocol in [DS] that was designed for complete connectivity. <p> For example the fourth algorithm of <ref> [LSP] </ref> which terminates in + d rounds by using diffusion 27 requires a termination time of ( + d)(ffi + *) clock time units [LSP]. <p> For example the fourth algorithm of <ref> [LSP] </ref> which terminates in + d rounds by using diffusion 27 requires a termination time of ( + d)(ffi + *) clock time units [LSP]. A round based protocol such as [DS] which assumes full network connectivity would require that each round lasts for at least dffi + * clock time units. <p> At the time when our protocols were invented (1983), we were unaware of other protocols for atomic broadcast designed for system models more realistic than those assumed in the Byzantine agreement literature [F], <ref> [LSP] </ref>, [SD]. Since then, several other protocols for atomic broadcast in system models similar to ours have been proposed (e.g. [BJ], [BSD], [Ca], [CM], [D], [GSTC], [PG], [SDC]).
Reference: [PG] <author> F. Pittelli, H. Garcia-Molina, </author> <title> "Recovery in a Triple Modular Redundant Database System," </title> <type> Technical Report CS-076-87, </type> <institution> Princeton University, </institution> <month> January, </month> <year> 1987. </year> <month> 41 </month>
Reference-contexts: Our termination times hold for each execution uniformly and are not simply worst case. Recent work has shown that it is often possible to terminate earlier than the worst case time using acknowledgement in addition to diffusion <ref> [PG, GSTC] </ref>. Thus our algorithms neither achieve the best worst case time nor the best expected or average time. However, they still remain competitive from the point of view of simplicity. <p> Since then, several other protocols for atomic broadcast in system models similar to ours have been proposed (e.g. [BJ], [BSD], [Ca], [CM], [D], [GSTC], <ref> [PG] </ref>, [SDC]). All protocols proposed so far can be divided into two classes: time oriented protocols providing bounded termination times even when failures occur during broadcast, and acknowledgement-based protocols that do not provide bounded termination times if failures occur during a broadcast. <p> Examples of protocols in 39 the first class (other than those given in this paper) are [BSD], [GSTC], <ref> [PG] </ref>, and [SDC]. Examples of acknowledgement-based protocols are [BJ], [Ca], [CM], and [D]. While the acknowledgement-based protocols have the potential of tolerating performance failures that can cause network partitioning, diffusion protocols cannot tolerate partition failures.
Reference: [PW] <author> W. Peterson, and E. Weldon, </author> <title> "Error Correction Codes," (2nd Edition), </title> <publisher> MIT Press, </publisher> <address> Massachusetts, </address> <year> 1972. </year>
Reference-contexts: An important subclass of Byzantine failures are those for which any resulting corruption of messages relayed by components such as processors and links is detectable by using a message authentication protocol. We call failures in this class authentication-detectable Byzantine failures (cf. [LSP]). Error detecting codes <ref> [PW] </ref> and public-key cryptosystems based on digital signatures [RSA] are two examples of authentication techniques which can ensure that both unintentional and intentional message corruptions are detected with very high probability. <p> If the source of message corruption is unintentional (e.g., transmission errors due to random noise on a link or hardware malfunction) then simple signature and authentication functions like the error detecting/correcting codes studied in <ref> [PW] </ref> are appropriate. If the source of message corruption is intentional, e.g., an act of sabotage, then more elaborate authentication schemes like those discussed in [RSA] should be used. In any case there is always a small but non-zero probability that a corrupted message will be accepted as authentic.
Reference: [Po] <author> S. Ponzio, </author> <title> "Consensus in the Presence of Timing Uncertainty: Omission and Byzan-tine Failures (Extended abstract)," </title> <booktitle> Proceedings of the 10th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <year> 1991. </year>
Reference-contexts: However, they still remain competitive from the point of view of simplicity. Work on very closely related problems suggests that the time complexity attributed to algorithms operating in our model is very sensitive to the definition of termination time. Recent results <ref> [ADLS, Po] </ref> on the real time required for the consensus problem are not readily comparable with our termination time results even though our models describe exactly the same phenomena. A better understanding of the relationship between our results and these real time results is the subject of current research.
Reference: [RSA] <author> R. Rivest, A. Shamir, and L. Adelman, </author> <title> "A Method for Obtaining Digital Signatures and Public-Key Cryptosystems," </title> <journal> CACM, </journal> <volume> 21:2, </volume> <pages> pp. 120-126, </pages> <year> 1978. </year>
Reference-contexts: We call failures in this class authentication-detectable Byzantine failures (cf. [LSP]). Error detecting codes [PW] and public-key cryptosystems based on digital signatures <ref> [RSA] </ref> are two examples of authentication techniques which can ensure that both unintentional and intentional message corruptions are detected with very high probability. For the rest of the paper we will assume the existence of a fixed authentication protocol (it will be further described below). <p> If the source of message corruption is intentional, e.g., an act of sabotage, then more elaborate authentication schemes like those discussed in <ref> [RSA] </ref> should be used. In any case there is always a small but non-zero probability that a corrupted message will be accepted as authentic. We implement message authentication by using three procedures "sign", "cosign", and 19 "authenticate", and a new signed message data type "Smsg" (Figure 6).
Reference: [Se] <author> A. Segall, </author> <title> "Distributed Network Protocols," </title> <journal> IEEE Trans. on Information Theory, </journal> <volume> IT-29:1, </volume> <pages> pp. 23-35, </pages> <year> 1983. </year>
Reference-contexts: This ensures that, in the absence of network partitions, information diffuses throughout the network to all correct processors. This technique is called propagation of information and characterized relatively abstractly in a 1983 paper by Segall <ref> [SE] </ref>. However, the concept of diffusion or "flooding" has been used in distributed systems work at least since the early seventies, usually without reference to a particular source. Information diffusion is a communication technique, that is, a method for conveying information among processors.
Reference: [Sc] <author> F. Schneider: </author> <title> "Understanding Protocols for Byzantine Clock Synchronization," </title> <type> Technical report 87-859, </type> <institution> Cornell University, </institution> <month> August </month> <year> 1987. </year>
Reference-contexts: t, clocks are within a maximum deviation * jC p (t) C q (t)j &lt; * and are within a linear enveloppe of real time. (Diffusion based clock synchronization protocols tolerant of omission, performance, and authentication-detectable Byzantine failures that satisfy these requirements are presented in [CAS,DHSS]; for a survey see <ref> [Sc] </ref>.) 4. Processors run under the control of a real time operating system which provides multi-tasking. To schedule a task A with input parameters B at local time T, the operating system provides a "schedule A (B) at T" command. <p> Even better performance could be achieved by adopting a clock synchronization approach developed later [Cri] which enables the achievement of synchronization precisions superior to those achievable by algorithms such as those discussed in [CAS], [DHSS], and <ref> [Sc] </ref>. At the time when our protocols were invented (1983), we were unaware of other protocols for atomic broadcast designed for system models more realistic than those assumed in the Byzantine agreement literature [F], [LSP], [SD].
Reference: [SD] <author> R. Strong, and D. Dolev, </author> <title> "Byzantine Agreement," </title> <booktitle> Proceedings of COMPCON, </booktitle> <month> Spring </month> <year> 1983. </year>
Reference-contexts: At the time when our protocols were invented (1983), we were unaware of other protocols for atomic broadcast designed for system models more realistic than those assumed in the Byzantine agreement literature [F], [LSP], <ref> [SD] </ref>. Since then, several other protocols for atomic broadcast in system models similar to ours have been proposed (e.g. [BJ], [BSD], [Ca], [CM], [D], [GSTC], [PG], [SDC]).
Reference: [SDC] <author> R. Strong, D. Dolev, and F. Cristian, </author> <title> "New Latency Bounds for Atomic Broadcast," </title> <booktitle> Proceedings of the 11th IEEE Real Time Systems Symposium, </booktitle> <address> Orlando, </address> <year> 1990. </year>
Reference-contexts: However, we were only able to prove the lower bounds of the next section. Recent results have shown that our second and third algorithms do not in fact provide optimal termination times <ref> [SDC] </ref>. Our termination times hold for each execution uniformly and are not simply worst case. Recent work has shown that it is often possible to terminate earlier than the worst case time using acknowledgement in addition to diffusion [PG, GSTC]. <p> Since then, several other protocols for atomic broadcast in system models similar to ours have been proposed (e.g. [BJ], [BSD], [Ca], [CM], [D], [GSTC], [PG], <ref> [SDC] </ref>). All protocols proposed so far can be divided into two classes: time oriented protocols providing bounded termination times even when failures occur during broadcast, and acknowledgement-based protocols that do not provide bounded termination times if failures occur during a broadcast. <p> Examples of protocols in 39 the first class (other than those given in this paper) are [BSD], [GSTC], [PG], and <ref> [SDC] </ref>. Examples of acknowledgement-based protocols are [BJ], [Ca], [CM], and [D]. While the acknowledgement-based protocols have the potential of tolerating performance failures that can cause network partitioning, diffusion protocols cannot tolerate partition failures.
Reference: [SSCA] <author> R. Strong, D. Skeen, F. Cristian, H. Aghili, </author> <title> "Handshake Protocols," </title> <booktitle> 7th International Conference on Distributed Computing, </booktitle> <pages> pp. 521-528, </pages> <month> September </month> <year> 1987. </year> <month> 42 </month>
Reference-contexts: While the acknowledgement-based protocols have the potential of tolerating performance failures that can cause network partitioning, diffusion protocols cannot tolerate partition failures. We have investigated methods for detecting and reconciling inconsistencies caused by partitions in systems using diffusion based atomic broadcast (e.g. <ref> [SSCA] </ref>), but such "optimistic" approaches cannot be used in applications in which there are no natural compensation actions for the actions taken by some processors while their state was inconsistent with the state of other processors.
References-found: 25

