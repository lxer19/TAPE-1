URL: http://www.cs.colorado.edu/users/carzanig/papers/CU-CS-863-98.ps.gz
Refering-URL: http://www.cs.colorado.edu/users/carzanig/papers/index.html
Root-URL: http://www.cs.colorado.edu
Email: carzanig@cs.colorado.edu  alw@cs.colorado.edu  
Phone: +1 303 492 4463  +1 949 824 6534  +1 303 492 5263  
Title: Design of a Scalable Event Notification Service: Interface and Architecture  
Author: Antonio Carzaniga David S. Rosenblum Alexander L. Wolf 
Address: Boulder, CO 80309-0430, USA  Irvine, CA 92697-3425, USA  Boulder, CO 80309-0430, USA  
Affiliation: Dept. of Computer Science University of Colorado  Dept. of Inf. and Computer Science University of California  Dept. of Computer Science University of Colorado  
Abstract: Event-based distributed systems are programmed to operate in response to events. An event notification service is an application-independent infrastructure that supports the construction of event-based systems. While numerous technologies have been developed for supporting event-based interactions over local-area networks, these technologies do not scale well to wide-area networks such as the Internet. Wide-area networks pose new challenges that have to be attacked with solutions that specifically address issues of scalability. This paper presents Siena, a scalable event notification service that is based on a distributed architecture of event servers. We first present a formally defined interface that is based on an extension to the publish/subscribe protocol. We then describe and compare several different server topologies and routing algorithms. We conclude by briefly discussing related work, our experience with an initial implementation of Siena, and a framework for evaluating the scalability of event notification services such as Siena. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. Barners-Lee. </author> <title> Universal Resource Identifiers in WWW, A Unifying Syntax for the Expression of Names and Addresses of Objects on the Network as used in the World-Wide Web. Internet Request For Comments (RFC) 1630, </title> <institution> Internet Engineering Task Force, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: A handling scheme must also be adopted so that objects can be contacted using appropriate communication protocols. The Siena event service adopts the generic URI <ref> [1] </ref> form for both its naming and handling scheme. This means that every object has a URI associated with it that defines both the identity of that object and the handler used by the event service to deliver a notification to that object.
Reference: [2] <author> G. Cugola, E. Di Nitto, and A. Fuggetta. </author> <title> The JEDI event-based infrastructure and its application to the development of the OPSS WFMS. </title> <type> Technical report, </type> <institution> CEFRIEL Politecnico di Milano, Milano, Italy, </institution> <month> August </month> <year> 1998. </year> <note> submitted for publication. </note>
Reference-contexts: Passive objects, such as files, can participate in an event-based interaction by means of other active objects that act as proxies and that notify events on behalf of the passive objects. This distinction is similar to the one made in JEDI <ref> [2] </ref>. In any case, the passive object will not be considered in the models. Event Servers The event service can be realized by connecting many events servers. An application contacts the event service via one event server also referred as its access point. (see Figure 2). <p> Server Topologies Hierarchical Server Topology A natural way of connecting event servers is according to a hierarchical topology; for instance, this is the topology of the distributed implementation of the JEDI event dispatcher <ref> [2] </ref>. As shown in Figure 6, each server in a hierarchical topology has a number clients that can be either normal objects of interest or interested parties or other event servers. <p> Event Notification Technologies Some technologies specifically realize an event notification service, and some of them also attempt to extend their support to wide-area networks. To relate these systems to Siena, we adopt the classification framework defined in <ref> [2] </ref> and concentrate in particular on subscription languages. Channel-based Subscriptions The simplest subscription mechanism is the channel. Interested parties can listen to a channel by subscribing to it. <p> Moreover, exposing the structure of notifications makes their type system (if any is adopted) visible too, thus, allowing more expressive and clear filters. Examples of systems that provide this kind of subscription language are JEDI <ref> [2] </ref>, Yeast [10], GEM [11], Elvin [14], and Siena itself. 6 EXPERIENCE The evaluation of distributed software systems is a difficult task, and the Siena event service is no exception.
Reference: [3] <author> Y. K. Dalal and R. M. Metcalfe. </author> <title> Reverse path forwarding of broadcast packets. </title> <journal> Communications of the ACM, </journal> <volume> 21(12):10401048, </volume> <month> December </month> <year> 1978. </year>
Reference-contexts: The realization of this process depends upon the underlying topology of servers. The solution is trivial in the case of acyclic topologies (i.e., hierarchical and acyclic peer-to-peer), but it requires additional data structures and protocols for the generic graph topology <ref> [3] </ref>. In propagating requests, servers maintain tables of subscriptions and/or advertisements. When an event server receives a new request, say a subscription, that is already covered by a previously served one, the server simply adds the subscriber to the local list and no other action is taken.
Reference: [4] <author> S. Deering, D. Estrin, D. Farinacci, V. Jacobson, C. Liu, and L. Wei. </author> <title> The PIM Architecture for Wide-Area Multicast Routing. </title> <journal> ACM Transactions on Networks, </journal> <month> April </month> <year> 1996. </year>
Reference-contexts: In fact, the algorithms presented here are very similar in principle to a combination of the Internet Group Management Protocol (IGMP [6]) and a reverse-path multicast routing algorithm <ref> [5, 4] </ref>. More details on the similarities and differences with network-level multicasting can be found in Section 5. We have defined two classes of algorithms: subscription forwarding: This technique uses subscriptions to set the paths for notifications.
Reference: [5] <author> S. E. Deering and D. R. Cheriton. </author> <title> Multicast Routing in Datagram Networks and Extended LANS. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 8(2):85 111, </volume> <month> May </month> <year> 1990. </year>
Reference-contexts: In fact, the algorithms presented here are very similar in principle to a combination of the Internet Group Management Protocol (IGMP [6]) and a reverse-path multicast routing algorithm <ref> [5, 4] </ref>. More details on the similarities and differences with network-level multicasting can be found in Section 5. We have defined two classes of algorithms: subscription forwarding: This technique uses subscriptions to set the paths for notifications.
Reference: [6] <author> W. Fenner. </author> <title> Internet Group Management Protocol, Version 2. Internet Request For Comments (RFC) 2236, </title> <institution> Internet Engineering Task Force, </institution> <month> November </month> <year> 1997. </year>
Reference-contexts: Note that a network of servers imple 6 menting the event service is logically equivalent to a network of routers connecting sub-nets and realizing multicast routing. In fact, the algorithms presented here are very similar in principle to a combination of the Internet Group Management Protocol (IGMP <ref> [6] </ref>) and a reverse-path multicast routing algorithm [5, 4]. More details on the similarities and differences with network-level multicasting can be found in Section 5. We have defined two classes of algorithms: subscription forwarding: This technique uses subscriptions to set the paths for notifications.
Reference: [7] <author> R. S. Hall, D. Heimbigner, A. van der Hoek, and A. L. Wolf. </author> <title> An Architecture for Post-Development Configuration Management in a Wide-Area Network. </title> <booktitle> In Proceedings of the 17 th International Conference on Distributed Computing Systems, </booktitle> <address> Baltimore, USA, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: We have implemented a prototype of Siena that realizes the acyclic topology with the subscription forwarding algorithm. We used this prototype as the event service of an agent-based deployment system called the SoftwareDock <ref> [7] </ref>. The current version of the prototype provides a reduced version of the notification model with only strings and integers and a few operators.
Reference: [8] <author> T. Inc. </author> <title> Rendezvous information bus. </title> <type> Technical report, </type> <institution> TIBCO Inc., </institution> <year> 1996. </year> <note> http://www.rv.tibco.com/rvwhitepaper.html. </note>
Reference-contexts: Some technologies address issues related to wide-area services. Among them, are new technologies such as Tibco <ref> [8] </ref> that specifically provide an event service, but also, more mature technologies such as the USENET news infrastructure, IP multicasting, the Domain Name Service (DNS), that, although not explicitly targeted at this problem domain, represent potential or partial solutions. <p> The main difference with respect to channels is that here subscriptions can express interest in many (potentially infinitely many) subjects/channels by specifying some form of expressions to match a subject. Also, in this model, two different subscriptions can define overlapping sets of notifications. TIBCO Rendezvous <ref> [8] </ref> adopts a subject-based subscription mechanism.
Reference: [9] <author> B. Kantor and P. Lapsley. </author> <title> Network news transfer protocol, a proposed standard for the stream-based transmission of news. Internet Request For Comments (RFC) 977, </title> <institution> Internet Engineering Task Force, </institution> <month> February </month> <year> 1986. </year> <month> 11 </month>
Reference-contexts: Another differentiator is the essential read-only nature of the DNS service, which does not apply much to event notification services. USENET News The USENET News system with its main protocol NNTP <ref> [9] </ref> is perhaps the best example of a scalable user-level one-to-many communication facility. USENET News messages are modeled after e-mail messages, yet they provide additional information (headers) that can be used by NNTP commands to direct their distribution. NNTP provides both client-server and server-server commands.
Reference: [10] <author> B. Krishnamurthy and D. S. Rosenblum. </author> <month> Yeast: </month>
Reference-contexts: Moreover, exposing the structure of notifications makes their type system (if any is adopted) visible too, thus, allowing more expressive and clear filters. Examples of systems that provide this kind of subscription language are JEDI [2], Yeast <ref> [10] </ref>, GEM [11], Elvin [14], and Siena itself. 6 EXPERIENCE The evaluation of distributed software systems is a difficult task, and the Siena event service is no exception.
References-found: 10

