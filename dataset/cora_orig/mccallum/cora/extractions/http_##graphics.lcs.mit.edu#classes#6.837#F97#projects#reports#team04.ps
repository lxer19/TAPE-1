URL: http://graphics.lcs.mit.edu/classes/6.837/F97/projects/reports/team04.ps
Refering-URL: http://graphics.lcs.mit.edu/classes/6.837/F97/projects/reports.html
Root-URL: 
Title: An interactive importance-driven parallel radiosity renderer  
Author: Andy Stark 
Date: Fall 1997  
Pubnum: 6.837  
Abstract: This project is an investigation into rendering with radiosity in real-time. Radiosity is traditionally a method which is done with a large amount of precomputation, ending in a view-independent solution. However, it is possible to use a quantity known as importance in order to concentrate calculations in the area visible to the eye, producing a view-dependent solution. In addition, it is possible to speed up radiosity calculations using parallel machines because of the independence of formfactors. In this project I combined these two techniques and produced software which can give fairly realistic lighting to a reasonable sized scene in something close to real-time. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Smits, Brian E., James R. Arvo, and David H. Salesin. </author> <title> "An Importance-Driven Radiosity Algorithm," </title> <booktitle> SIGGRAPH 1992, </booktitle> <pages> pp. 273-282. </pages>
Reference-contexts: Nonetheless, interactive environments are both useful and fun, so it would be worthwhile to be able to use accurate lighting models in them. In order to achieve this, there needs to be some way to do the calculations more quickly. One possibility is make the radiosity engine importance-driven <ref> [1] </ref>. The importance of a patch in the scene represents how much effect it will have on the portion of the scene visible to the user. Importance can be propagated very similarly to radiance, so the importances can be found simultaneously with the radiances. <p> For this project, I wanted to make the application interactive. Interactive environments are often more interesting than still frames. Also, it seemed worthwhile from an educational and research point of view to learn how importance-driven calculations work. In the original SIGGRAPH paper <ref> [1] </ref> describing importance, it was suggested that importance could be used in interactive environments, but apparently not implemented. In addition, I hoped to produce a system in which the users would really be able to see the difference in time between the serial and parallel versions. <p> The Gauss-Seidel approach is very similar to the approach presented by Smits, Arvo, and Salesin in SIGGRAPH '92 <ref> [1] </ref>. 3.1.1 Gauss-Seidel Iterations repeat for each top-level patch p GSRefine (p) ShootImportanceGatherRadiance (p) for each patch i UpdateRadianceAndImportance (i) until no additional refinements were needed 3.1.2 Southwell Iterations repeat p = NextMostImportanceContributingPatch ShootImportance (p) UpdateImportance (p) q = NextMostRadContributingPatch SWRefine (q) ShootRadiance (q) UpdateRadiance (q) until no next radiance or <p> The "Update" routines have to do with adjusting the contribution of radiance and importance from a parent patch to a child and vice versa. I'm not really concerned about this part of the algorithm since it is not very computationally intensive; see <ref> [1] </ref> for a description. GSRefine and SWRefine mean to subdivide patches to reduce the error in the formfactor calculation below a tolerance. GSRefine continues refining interaction j--&gt;i until i i F err j &lt; gs . SWRefine continues until i F err j &lt; sw .
Reference: [2] <editor> Goral, Cindy M., et. al. </editor> <title> "Modeling the Interaction of Light Between Diffuse Surfaces," </title> <booktitle> SIGGRAPH 1984, </booktitle> <pages> pp. 213-222. </pages>

References-found: 2

