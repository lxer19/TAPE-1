URL: http://www.cs.washington.edu/research/constraints/drafts/soda.ps.Z
Refering-URL: http://www.cs.washington.edu/research/constraints/drafts/
Root-URL: http://www.cs.washington.edu
Title: The Table Layout Problem  
Author: Richard J. Anderson Sumeet Sobti 
Date: July 8, 1998  
Abstract: In this paper we study an important typographical problem: the problem of laying out a two dimensional table. Each cell of the table has content associated with it. We may have choices on the geometry of cells (e.g., number of rows to use for the text) or on the content to display (e.g., a choice between full content or a link to another location). The problem is to choose configurations for the cells to optimize an objective function such as minimum table height given a fixed width or maximum number of uncompressed cells given fixed height and width for the table. We formulate a combinatorial version of the table layout problem, identifying formatting and compression as special cases. The formatting problem is to choose cell geometry to minimize table size. The compression problem is to maximize the score of a layout subject to size constraints on the table, where the scores arise from the amount of information displayed from each cell. The table layout problems are NP-complete, even for very restricted instances. Our main results include an algorithm for computing the convex hull of the set of feasible table configurations, which gives a heuristic algorithm for table formatting, a simple approximation algorithm for a special case of the compression problem, and a connection between the generalized network flow problem and the fractional (LP) solution to the table formatting problem. 
Abstract-found: 1
Intro-found: 1
Reference: [AMO93] <author> R. K. Ahuja, T. L. Magnanti, and J. B. Orlin. </author> <title> Network Flows. </title> <publisher> Prentice Hall, </publisher> <year> 1993. </year>
Reference-contexts: Generalized network flow is network flow with multipliers on the edges which increase (or decrease) the flow passing along the edge. There are algorithms for generalized network flow which are superior to solving generalized network flow as a linear program <ref> [Rad93, AMO93] </ref>. We show that if we have an optimal solution to the table formatting problem for width W , then the optimal solution for width W 0 &gt; W (for W 0 sufficiently close to W ) can be found with an algorithm for the generalized network flow problem.
Reference: [Bea85] <author> R. J. </author> <title> Beach. Setting Tables and Illustrations with Style. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Waterloo, </institution> <year> 1985. </year>
Reference-contexts: They also give a series of heuristic algorithms for table formatting which give good results in practice. Earlier work on algorithms for setting tables was done by Beach <ref> [Bea85] </ref>. There has been a substantial amount of algorithmic work on digital typography [KvW89, Knu84]. The work on paragraphing/linebreaking is relevant to our work since one of the cases of interest is choosing the number of rows of text to fit into a cell [KP81].
Reference: [BLM97] <author> Alan Borning, Richard Lin, and Kim Marriott. </author> <title> Constraints for the web. </title> <booktitle> In Proceedings of ACM MULTIMEDIA'97, </booktitle> <month> November </month> <year> 1997. </year>
Reference-contexts: Linear programming also allows additional constraints to be placed upon the table and layout, such as requiring certain relationships between the sizes of row and columns. It may be possible to use linear programming based table formatting in more general constraint based layout systems <ref> [BLM97, BMSX97] </ref>. 8 We establish a connection between the linear program and the generalized network flow problem. Generalized network flow is network flow with multipliers on the edges which increase (or decrease) the flow passing along the edge.
Reference: [BMSX97] <author> Alan Borning, Kim Marriott, Peter Stuckey, and Yi Xiao. </author> <title> Solving linear arithmetic constraints for user interface applications: Algorithm details. </title> <type> Technical Report 97-06-01, </type> <institution> Dept. of Computer Science and Engineering, University of Washington, </institution> <address> Seattle, WA, </address> <month> July </month> <year> 1997. </year>
Reference-contexts: Linear programming also allows additional constraints to be placed upon the table and layout, such as requiring certain relationships between the sizes of row and columns. It may be possible to use linear programming based table formatting in more general constraint based layout systems <ref> [BLM97, BMSX97] </ref>. 8 We establish a connection between the linear program and the generalized network flow problem. Generalized network flow is network flow with multipliers on the edges which increase (or decrease) the flow passing along the edge.
Reference: [FJ97] <author> A. Frieze and M. Jerrum. </author> <title> Improved approximation algorithms for max k-CUT and MAX BISECTION. </title> <journal> Algorithmica, </journal> <volume> 18(1) </volume> <pages> 67-81, </pages> <year> 1997. </year>
Reference-contexts: A result would be interesting for simple tables (cell sizes (1; 1) or (2; 2)). An attractive approach is to use Semidefinite Programming, combining ideas of Goemans and Williamson [GW95], and of Frieze and Jerrum <ref> [FJ97] </ref>, However our efforts in this direction have yielded bounds worse than the greedy algorithm. We would also like to find a combinatorial algorithm for computing the fractional linear programming solution of the formatting problem.
Reference: [GGT89] <author> G. Gallo, M. D. Grigoriadis, and R. E. Tarjan. </author> <title> A fast parametric maximum flow algorithm and applications. </title> <journal> SIAM Journal on Computing, </journal> <volume> 18(1) </volume> <pages> 30-55, </pages> <year> 1989. </year>
Reference-contexts: The problem we need to solve is the parameterized flow problem, where the flow graph has edges emanating from the source with capacities which are linear in the parameter ff. This problem has been solved by Gallo, Grigoriadis, and Tarjan <ref> [GGT89] </ref> who give a polynomial time algorithm for the problem.
Reference: [Gus88] <author> D. Gusfield. </author> <title> A graph theoretic approach to statistical data security. </title> <journal> SIAM Journal on Computing, </journal> <volume> 17(3) </volume> <pages> 552-571, </pages> <year> 1988. </year>
Reference-contexts: A main theme of our paper is that there is a strong connection between the table formatting problem and graph algorithms, especially with network flow. Gusfield has explored similar connections between data security in tables and graph and network algorithms <ref> [Gus88] </ref>. 2 Definitions 2.1 Tables and layouts An m fi n table is a two-dimensional array with m rows and n columns, which has content (or an item) associated with each of its mn cells.
Reference: [GW95] <author> M. X. Goemans and D. P. Williamson. </author> <title> Improved approximation algorithms for maximum cut and satisfiability problems using semidefinite programming. </title> <journal> Journal of the ACM, </journal> <volume> 42(6) </volume> <pages> 1115-1145, </pages> <year> 1995. </year>
Reference-contexts: A result would be interesting for simple tables (cell sizes (1; 1) or (2; 2)). An attractive approach is to use Semidefinite Programming, combining ideas of Goemans and Williamson <ref> [GW95] </ref>, and of Frieze and Jerrum [FJ97], However our efforts in this direction have yielded bounds worse than the greedy algorithm. We would also like to find a combinatorial algorithm for computing the fractional linear programming solution of the formatting problem.
Reference: [Knu84] <author> D. E. Knuth. </author> <title> The TeXbook. Computers and Typesetting. </title> <publisher> Addison Wesley, </publisher> <year> 1984. </year>
Reference-contexts: They also give a series of heuristic algorithms for table formatting which give good results in practice. Earlier work on algorithms for setting tables was done by Beach [Bea85]. There has been a substantial amount of algorithmic work on digital typography <ref> [KvW89, Knu84] </ref>. The work on paragraphing/linebreaking is relevant to our work since one of the cases of interest is choosing the number of rows of text to fit into a cell [KP81].
Reference: [KP81] <author> D. E. Knuth and M. F. Plass. </author> <title> Breaking paragraphs into lines. </title> <journal> Software Practice and Experience, </journal> <volume> 11(11) </volume> <pages> 1119-1184, </pages> <year> 1981. </year>
Reference-contexts: There has been a substantial amount of algorithmic work on digital typography [KvW89, Knu84]. The work on paragraphing/linebreaking is relevant to our work since one of the cases of interest is choosing the number of rows of text to fit into a cell <ref> [KP81] </ref>. A main theme of our paper is that there is a strong connection between the table formatting problem and graph algorithms, especially with network flow.
Reference: [KvW89] <author> B. W. Kernighan and C. van Wyk. </author> <title> Page makeup by postprocessing text formatter output. </title> <journal> Computing Systems, </journal> <volume> 2(2) </volume> <pages> 103-132, </pages> <year> 1989. </year>
Reference-contexts: They also give a series of heuristic algorithms for table formatting which give good results in practice. Earlier work on algorithms for setting tables was done by Beach [Bea85]. There has been a substantial amount of algorithmic work on digital typography <ref> [KvW89, Knu84] </ref>. The work on paragraphing/linebreaking is relevant to our work since one of the cases of interest is choosing the number of rows of text to fit into a cell [KP81].
Reference: [LK78] <author> J. K. Lenstra and A. H. G. Rinnooy Kan. </author> <title> Complexity of scheduling under precedence constraints. </title> <journal> OR, </journal> <volume> 26 </volume> <pages> 22-35, </pages> <year> 1978. </year>
Reference-contexts: The previous NP-completeness proof for table formatting did rely on large integers [Wan96]. Our reductions are from the clique problem. The basic idea of this type of clique reduction is due to Lenstra and Rinooy Kan who gave very elegant NP-completeness proofs for a wide variety of scheduling problems <ref> [LK78] </ref> using the technique. Theorem 3.1 The formatting problem for simple tables is NP-complete. Proof: We reduce the clique problem to the formatting problem. Suppose we wish to determine if there is a clique of size K in an n vertex, m edge graph G.
Reference: [Rad93] <author> T. Radzik. </author> <title> Faster algorithms for the generalized network flow problem. </title> <booktitle> In 34th Symposium on Foundations of Computer Science, </booktitle> <pages> pages 438-448, </pages> <year> 1993. </year>
Reference-contexts: Generalized network flow is network flow with multipliers on the edges which increase (or decrease) the flow passing along the edge. There are algorithms for generalized network flow which are superior to solving generalized network flow as a linear program <ref> [Rad93, AMO93] </ref>. We show that if we have an optimal solution to the table formatting problem for width W , then the optimal solution for width W 0 &gt; W (for W 0 sufficiently close to W ) can be found with an algorithm for the generalized network flow problem.
Reference: [Wan96] <author> X. Wang. </author> <title> Tabular Abstraction, Editing, and Formatting. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Waterloo, </institution> <year> 1996. </year>
Reference-contexts: Many other formatting systems have facilities for displaying tables, although in most cases the cell content is fixed before the layout is computed. Our main interest is in choosing the cell content to optimize layout. The main study of table layout is Xinxin Wang's PhD thesis <ref> [Wan96] </ref> and related papers with Derick Wood [WW96, WW93]. They consider a broader range of topics than are addressed here including determining the logical structure of the table and allowing tables with more complex structure than a two dimensional array. <p> The previous NP-completeness proof for table formatting did rely on large integers <ref> [Wan96] </ref>. Our reductions are from the clique problem. The basic idea of this type of clique reduction is due to Lenstra and Rinooy Kan who gave very elegant NP-completeness proofs for a wide variety of scheduling problems [LK78] using the technique.
Reference: [WW93] <author> X. Wang and D. Wood. </author> <title> Tabular formatting problems. </title> <journal> TUGboat, The communications of the TeX Users Group, </journal> <volume> 14(3) </volume> <pages> 231-237, </pages> <year> 1993. </year>
Reference-contexts: Our main interest is in choosing the cell content to optimize layout. The main study of table layout is Xinxin Wang's PhD thesis [Wan96] and related papers with Derick Wood <ref> [WW96, WW93] </ref>. They consider a broader range of topics than are addressed here including determining the logical structure of the table and allowing tables with more complex structure than a two dimensional array.
Reference: [WW96] <author> X. Wang and D. Wood. </author> <title> Tabular formatting problems. </title> <booktitle> In Proceedings of Principles of Document Processing, </booktitle> <year> 1996. </year> <month> 11 </month>
Reference-contexts: Our main interest is in choosing the cell content to optimize layout. The main study of table layout is Xinxin Wang's PhD thesis [Wan96] and related papers with Derick Wood <ref> [WW96, WW93] </ref>. They consider a broader range of topics than are addressed here including determining the logical structure of the table and allowing tables with more complex structure than a two dimensional array.
References-found: 16

