URL: http://www.eecs.umich.edu/~qstout/pap/DMCC89alloc.ps.Z
Refering-URL: http://www.eecs.umich.edu/~qstout/papers.html
Root-URL: http://www.eecs.umich.edu
Title: PARALLEL ALLOCATION ALGORITHMS FOR HYPERCUBES AND MESHES (Preliminary Version)  
Author: Marilynn Livingston Quentin F. Stout 
Address: Edwardsville, IL 62026-1653 Ann Arbor, MI 48109-2122  
Affiliation: Department of Computer Science Dept. of Elec. Eng. and Comp. Sci. Southern Illinois University University of Michigan  
Note: In Proc. 4th Conf. on Hypercube Concurrent Computers and Applications (1989), ACM, pp. 59-66.  Partially supported by National Science Foundation grant CCR-8808839 Partially supported by National Science Foundation grant DCR-8507851 and an Incentives for Excellence Award from Digital Equipment Corporation  
Abstract: We consider the problem of subsystem allocation in the mesh, torus, and hypercube multicomputers. Although the usual practice is to use a serial algorithm on the host processor to do the allocation, we show how the free and non-faulty processors can be used to perform the allocation in parallel. The algorithms we provide are dynamic, require very little storage, and work correctly even in the presence of faults. For the 2-dimensional mesh and torus with n processors, we give an optimal fi( n) time algorithm which identifies all rectangular subsystems that are not busy and not faulty. For the d-dimensional mesh and torus of size n = m fi m fi fi m, we show how to find all submeshes of dimensions k fi k fi fi k, for all k m, in optimal fi(dn 1=d ) time. Since the number of subcubes in a hypercube of dimension d is 3 d , the current practice is to allocate only a fraction of the possible subcubes, which degrades the fault tolerance and dynamic allocation ability of the system. We consider two approaches to this problem. In one approach, we limit the dimensions of the subcubes to be allocated, and show, for fixed q, how to determine all non-faulty and non-busy subcubes of dimension d q in a hypercube of dimension d in time fi(d). The second approach involves allocating only a subset of the possible subcubes in all dimensions. We give optimal parallel algorithms for implementing several previously suggested allocation schemes of this type, including single and multiple versions of buddy, Gray-coded-buddy, and k-cube buddy systems. The parallel versions of these are significantly faster than the known serial allocation algorithms, and they provide a significant improvement in the fault tolerance of the system. We also introduce a new allocation system, the cyclical buddy system, which has a simple, efficient parallel implementation but which does not naturally arise as a serial allocation system. p
Abstract-found: 1
Intro-found: 1
Reference: [BeSi] <author> B. Becker and H. Simon, </author> <title> "How robust is the n-cube?", </title> <booktitle> Proc. 27th IEEE Symp. on Foundations of Comp. Sci. </booktitle> <year> (1986), </year> <pages> 283-291. </pages>
Reference: [ChSh] <author> M.-S. Chen and K. Shin, </author> <title> "Processor allocation in an n-cube multiprocessor using gray codes", </title> <journal> IEEE Trans. Computers C-36 (1987), </journal> <pages> 1396-1407. </pages>
Reference-contexts: In dynamic allocation and de-allocation, however, it is no longer optimal. Studies of the behavior of subcube allocation in this dynamic situation have been made in <ref> [ChSh, DuHa] </ref> for the purpose of evaluating various policies governing the selection of which subcube to allocate when there are several available subcubes. One of the problems in using a serial algorithm to implement any allocation system is in maintaining the availability information when faults occur. <p> The double Gray-coded buddy system, first suggested in <ref> [ChSh] </ref>, allocates q-subcubes by using the Gray-coded buddy system corresponding to the identity permutation, plus the Gray-coded buddy system corresponding to the permutation which reverses the order of the bits.
Reference: [DuHa] <author> S. Dutt and J. P. Hayes, </author> <title> "On allocating sub-cubes in a hypercube multiprocessor", </title> <booktitle> Proc. Third Conference on Hypercube Computers and Applications (1988), </booktitle> <pages> 801-810. </pages>
Reference-contexts: In dynamic allocation and de-allocation, however, it is no longer optimal. Studies of the behavior of subcube allocation in this dynamic situation have been made in <ref> [ChSh, DuHa] </ref> for the purpose of evaluating various policies governing the selection of which subcube to allocate when there are several available subcubes. One of the problems in using a serial algorithm to implement any allocation system is in maintaining the availability information when faults occur.
Reference: [GHLS] <author> N. Graham, F. Harary, M. Livingston, and Q.F. Stout, </author> <title> "Subcube fault-tolerence in hyper-cubes", </title> <institution> Univ. Michigan Comp. Res. Lab. Tech. Rept. </institution> <month> CRL-TR-12-87 </month> <year> (1987). </year>
Reference: [Hals] <author> J. Hastad, T. Leighton, and M. Newman, </author> <title> "Reconfiguring a hypercube in the presence of faults", </title> <booktitle> Proc. 19th ACM Symp. Theory of Comp. </booktitle> <year> (1987), </year> <pages> 274-284. </pages>
Reference-contexts: Since any message sent to ff from a neighbor of node ff now must travel twice as far, we say this cube has dilation 2. Thus, our allocation problem could be extended to the allocation of subsystems with some limited dilation. This situation was investigated in <ref> [Hals] </ref>. Under the assumption that faults are distributed uniformly and randomly with probability p &lt; 0:5 in a hypercube of dimension d, it is shown that, with high probability, it is possible to assign a d1-dimensional subcube with dilation at most 7.
Reference: [KlSp] <author> D. Kleitman and J. Spencer, </author> <title> "Families of k-independent sets", </title> <booktitle> Discrete Math.6 (1973), </booktitle> <pages> 255-262. </pages>
Reference: [LiSt] <author> M. Livingston and Q.F. Stout, </author> <title> "Fault tolerance of allocation schemes in massively parallel computers", </title> <booktitle> Proc. 2nd Symp. on the Frontiers of Massively Parallel Computation (1988), (to appear). </booktitle> <pages> 8 </pages>
Reference-contexts: Further, if we con sider the expected case behavior, where B e (n; m) and 1 K e (n; m) denote the corresponding numbers for the sit-uation in which the faulty (or busy) processors are distributed independently and uniformly throughout the hypercube, it is shown in <ref> [LiSt] </ref> through simulation that B e (2 20 ; 2 18 ) 8:1 and K e (2 20 ; 2 18 ) 24:6. Thus, in the worst case, we suffer a 50% decrease and, in the expected case, a decrease of 67% in the fault-tolerant allocation ability of the system. <p> Complete allocation in hypercubes may not be the method of choice when d, q, and d q are all large, or when allocation of all sizes is necessary. For such cases, we recommend the use of the k-cube buddy system first introduced in <ref> [LiSt] </ref>. For fixed k, this system allocates q-dimensional subcubes in which the last d k bits are arbitrary and the first d q + k bits are the nodes of a k-subcube of a dq+k-dimensional cube. <p> Although QB w (2 20 ; 2 18 ) = 5 which is a small improvement over B w (2 20 ; 2 18 ), we have QB e (2 20 ; 2 18 ) 12:8 <ref> [LiSt] </ref>, which represents a 50% improvement over the expected case behavior of the single buddy system. Throughout this paper we will assume that each processing element (pe) in each of the networks under consideration has a unique identification number (id), and that each pe knows its own id. <p> In the next subsection, we consider a generalization of the buddy and Gray-coded buddy systems that offers significant improvement over the schemes described in subsections 3.1 and 3.2. 3.5 k-Cube Buddy Systems We describe here a family of allocation schemes which we first introduced in <ref> [LiSt] </ref>. Let k 1 and consider an allocation scheme for Q (2 d ) that will allocate q-subcubes in which the last q k bits are arbitrary and the first d q + k bits form the nodes of a subcube of dimension k in Q (2 dq+k ).
References-found: 7

