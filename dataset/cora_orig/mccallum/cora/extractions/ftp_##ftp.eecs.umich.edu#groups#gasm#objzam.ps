URL: ftp://ftp.eecs.umich.edu/groups/gasm/objzam.ps
Refering-URL: http://www.eecs.umich.edu/gasm/papers.html
Root-URL: http://www.eecs.umich.edu
Email: e-mail: zam@iis.nsk.su  
Title: Object-Oriented Abstract State Machines  
Author: A.V. Zamulin 
Address: 630090, Novosibirsk, Russia  
Affiliation: Institute of Informatics Systems Siberian Division of the Russian Academy of Sciences  
Abstract: An approach to the representation and specification of a dynamic system in terms of mutable and constant objects is proposed in the paper. The approach is based on considering an object update as a transition from one algebra of a given signature to another of the same signature. Each object possesses a state and a unique identifier; the state of a mutable object can be updated, the state of a constant object cannot be updated. An algebra provides two sets of unique identifiers for each object type: a set of mutable object identifiers and a set of constant object identifiers. Partial ordering of the sets of object identifiers is possible, which serves for modeling inheritance and subtyping. An object type signature introduces attributes of the corresponding set of objects serving to represent an object state, observers serving to observe object states and mutators serving to initialize and update the attributes of mutable objects. Transition rules of an Abstract State Machine are proposed as a means of object specification. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Y. Gurevich. </author> <title> Evolving Algebras 1993: Lipary Guide. In: Specification and Validation Methods, </title> <publisher> Oxford University Press, </publisher> <year> 1994, </year> <pages> pp. 9-36. </pages>
Reference-contexts: 1 Introduction The aim of this paper is to extend and adapt the mechanism of Abstract State Machines (former known as evolving algebras <ref> [1] </ref>) to the specification of mutable and constant objects of a complex dynamic system. Following [2], we understand an object as a complex entity having a unique identifier and state which changes during the object's life. <p> A similar observation is noted in [7]. Therefore, a technique for modeling systems with states is called for. The approach presented in the paper is mainly based on Gurevich's work on Abstract State Machines <ref> [1, 8] </ref> and effected by works on algebraic specifications with implicit state [7], d-oids [9], and dynamic abstract types [10]. One of the major goals was the use of first-order logic in contrast to some kind of temporal logic used, for example, in TROLL [11]. <p> Among the works along the second approach, the most related work is Abstract State Machines (evolving algebras) of Gurevich <ref> [1] </ref>, algebraic specifications with implicit state of Dauchy and Gaudel [7], d-oids of Astesiano and Zucca [9], and dynamic abstract types of Ehrig and Orejas [10].
Reference: 2. <author> P.Wegner. </author> <title> Dimensions of Object-Oriented Language Design. </title> <booktitle> In ACM Symp. on Object-Oriented Programming: Systems, Languages and Applications, </booktitle> <year> 1987, </year> <pages> pp. 168-182. </pages>
Reference-contexts: 1 Introduction The aim of this paper is to extend and adapt the mechanism of Abstract State Machines (former known as evolving algebras [1]) to the specification of mutable and constant objects of a complex dynamic system. Following <ref> [2] </ref>, we understand an object as a complex entity having a unique identifier and state which changes during the object's life. The object's state can be represented by a tuple of simple (like an integer number) or structured (like an array) attributes.
Reference: 3. <author> J.A. Goguen and R. Diaconescu. </author> <title> Towards an Algebraic Semantics for the Object Paradigm. Recent Trends in Data Type Specification, </title> <booktitle> LNCS, 1994, </booktitle> <volume> vol. 785, </volume> <pages> pp. 1-29. </pages>
Reference: 4. <author> H.-D. Ehrig and A. Sernadas. </author> <title> Local Specification of Distributed Families of Sequential Objects. In: Recent Trends in Data Type Specifications. </title> <booktitle> LNCS, </booktitle> <volume> vol. 906, </volume> <year> 1994, </year> <pages> pp. 219-235. </pages>
Reference: 5. <author> F. Parisi-Presicce and A. Pierantonio. </author> <title> An Algebraic Theory of Class Specification. </title> <journal> ACM Transactions on Software Engineering and Methodology, April 1994, </journal> <volume> vol. 3, No. 2, </volume> <pages> pp. 166-169. </pages>
Reference: 6. <author> A.V. Zamulin. </author> <title> Algebraic Specification of an Oberon Target Machine. </title> <booktitle> Proc. A.P. Ershov Second Intern. Memorial Conference "Perspectives of System Informatics", </booktitle> <address> Novosibirsk, </address> <month> June 25-28, </month> <year> 1996, </year> <booktitle> LNCS, </booktitle> <volume> vol. 1181, </volume> <pages> pp. 41-54. </pages>
Reference-contexts: In contrast to a value of a conventional data type, an object is generally a dynamic entity whose state evolves with time. Although the author's experience with formal definition of the programming language Oberon <ref> [6] </ref> has shown that the state can be modeled by a suitable data type in the framework of conventional algebraic specifications, this experience has also shown that such a modeling is quite artificial and tedious. A similar observation is noted in [7].
Reference: 7. <author> P. Dauchy and M.C. </author> <title> Gaudel. Algebraic Specifications with Implicit State. </title> <type> Tech. report No 887, </type> <institution> Univ. Paris-Sud, </institution> <year> 1994. </year>
Reference-contexts: A similar observation is noted in <ref> [7] </ref>. Therefore, a technique for modeling systems with states is called for. The approach presented in the paper is mainly based on Gurevich's work on Abstract State Machines [1, 8] and effected by works on algebraic specifications with implicit state [7], d-oids [9], and dynamic abstract types [10]. <p> A similar observation is noted in <ref> [7] </ref>. Therefore, a technique for modeling systems with states is called for. The approach presented in the paper is mainly based on Gurevich's work on Abstract State Machines [1, 8] and effected by works on algebraic specifications with implicit state [7], d-oids [9], and dynamic abstract types [10]. One of the major goals was the use of first-order logic in contrast to some kind of temporal logic used, for example, in TROLL [11]. The paper is organized in the following way. <p> Among the works along the second approach, the most related work is Abstract State Machines (evolving algebras) of Gurevich [1], algebraic specifications with implicit state of Dauchy and Gaudel <ref> [7] </ref>, d-oids of Astesiano and Zucca [9], and dynamic abstract types of Ehrig and Orejas [10]. The Abstract State Machines approach has provided a mechanism for the transition from one state to another by means of transition rules resembling imperative programming statements. <p> The present work uses Gurevich's transition rules as a means of object type specification. The idea to represent states of a system by algebras and dynamic operations by transformations between them is also advocated by Dauchy and Gaudel <ref> [7] </ref>. Transformations are defined by means of so-called modifiers which are counterparts of transition rules of Gurevich Machines. The main contribution of the work is the proposition of a specification mechanism for modifiers. This idea is used in the present work as the basis of object mutator specifications.
Reference: 8. <author> Y. Gurevich, </author> <note> May 1997 Draft of the ASM Guide. Available electronically from http://www.eecs.umich.edu/gasm/. </note>
Reference-contexts: A similar observation is noted in [7]. Therefore, a technique for modeling systems with states is called for. The approach presented in the paper is mainly based on Gurevich's work on Abstract State Machines <ref> [1, 8] </ref> and effected by works on algebraic specifications with implicit state [7], d-oids [9], and dynamic abstract types [10]. One of the major goals was the use of first-order logic in contrast to some kind of temporal logic used, for example, in TROLL [11]. <p> We define here only the sequence constructor, set constructor, guarded update, and loop constructors be cause the others have minimal relevance to the subject of the paper (one can find more details in <ref> [8, 16] </ref>). Sequence constructor.
Reference: 9. <author> E. Astesiano and E. Zucca. D-oids: </author> <title> a Model for Dynamic Data Types. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 5(2), </volume> <month> June </month> <year> 1995, </year> <pages> pp. 257-282. </pages>
Reference-contexts: A similar observation is noted in [7]. Therefore, a technique for modeling systems with states is called for. The approach presented in the paper is mainly based on Gurevich's work on Abstract State Machines [1, 8] and effected by works on algebraic specifications with implicit state [7], d-oids <ref> [9] </ref>, and dynamic abstract types [10]. One of the major goals was the use of first-order logic in contrast to some kind of temporal logic used, for example, in TROLL [11]. The paper is organized in the following way. <p> Among the works along the second approach, the most related work is Abstract State Machines (evolving algebras) of Gurevich [1], algebraic specifications with implicit state of Dauchy and Gaudel [7], d-oids of Astesiano and Zucca <ref> [9] </ref>, and dynamic abstract types of Ehrig and Orejas [10]. The Abstract State Machines approach has provided a mechanism for the transition from one state to another by means of transition rules resembling imperative programming statements. <p> This idea is used in the present work as the basis of object mutator specifications. The same idea of an implicit state in terms of a new mathematical structure, d-oid, is given by Astesiano and Zucca <ref> [9] </ref>. A d-oid is a set of instance structures (e.g., algebras) and a set of dynamic operations (transformations of instance structures with a possible result of a definite sort). Here dynamic operations serve as counterparts of transition rules of Gurevich and modifiers of Dauchy and Gaudel.
Reference: 10. <author> H. Ehrig and F. Orejas. </author> <title> Dynamic Abstract Types: An Informal Proposal. </title> <journal> Bull of EATCS, </journal> <volume> 53, </volume> <month> June </month> <year> 1994, </year> <pages> pp. 162-169. </pages>
Reference-contexts: Therefore, a technique for modeling systems with states is called for. The approach presented in the paper is mainly based on Gurevich's work on Abstract State Machines [1, 8] and effected by works on algebraic specifications with implicit state [7], d-oids [9], and dynamic abstract types <ref> [10] </ref>. One of the major goals was the use of first-order logic in contrast to some kind of temporal logic used, for example, in TROLL [11]. The paper is organized in the following way. Object type signatures and relationships among them are defined in Sections 2 and 3, respectively. <p> Among the works along the second approach, the most related work is Abstract State Machines (evolving algebras) of Gurevich [1], algebraic specifications with implicit state of Dauchy and Gaudel [7], d-oids of Astesiano and Zucca [9], and dynamic abstract types of Ehrig and Orejas <ref> [10] </ref>. The Abstract State Machines approach has provided a mechanism for the transition from one state to another by means of transition rules resembling imperative programming statements. As a result, a specification looks like an imperative program, it is easier to understand and is executable. <p> However, the approach in question deals only with models and does not address the issue of specifying the class of such behaviors, which is our aim. Dynamic abstract types are informally introduced in <ref> [10] </ref>. It is proposed that such a type should consist of an abstract data type and a collection of dynamic operations. Four levels of specification are outlined: value type specification, instance structure specification, dynamic operation specification, and higher--level specification.
Reference: 11. <author> T. Hartmann, G. Saake, R. Jungclaus, P. Hartel, and J. Kush. </author> <title> Revised Version of the Modelling Language TROLL. </title> <publisher> Technishe Universitaet Braunschweig, </publisher> <address> Informatik-Berichte 94-03, </address> <year> 1994. </year>
Reference-contexts: One of the major goals was the use of first-order logic in contrast to some kind of temporal logic used, for example, in TROLL <ref> [11] </ref>. The paper is organized in the following way. Object type signatures and relationships among them are defined in Sections 2 and 3, respectively. Object-structured algebras and dynamic systems are introduced in Section 4. The construction and interpretation of terms of an object-structured dynamic system are discussed in Section 5. <p> There are a number of works investigating the use of temporal logic for the specification of dynamic system behavior. The major achievement in this direction is the conceptual modeling and design language TROLL <ref> [11] </ref>. Although semantics of the language is given in [11] rather informally, it is argued in [21] that it can be given with the use of template specification logic which is a kind of temporal logic. <p> There are a number of works investigating the use of temporal logic for the specification of dynamic system behavior. The major achievement in this direction is the conceptual modeling and design language TROLL <ref> [11] </ref>. Although semantics of the language is given in [11] rather informally, it is argued in [21] that it can be given with the use of template specification logic which is a kind of temporal logic. <p> An advantage of the technique proposed is that an object specification is done in an abstract and precise way, the specification is executable, and it is easy to understand by programmers. We create only an identifier sort for each object type in contrast to <ref> [19, 11] </ref> where value sorts are also created. This significantly simplifies the semantics of an object update and permits us to specify objects types with mutual references. Constant objects in addition to mutable objects are allowed.
Reference: 12. <author> M. Abadi and L. Cardelli. </author> <title> A Theory of Objects. </title> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: In a concrete specification language (like in a programming language) some kind of language means should be provided for inheriting the supertype definition in a subtype definition. Following <ref> [12] </ref>, we consider inheritance as a kind of "differential description" of an object type and do not propose such means here because we are interested only in underlying principles. <p> Note that the subtype-supertype relationship presented is the most general one since it ignores whether the corresponding object types have common methods. Some more restrictive subtype-supertype relationships taking into account different method inheritance schemes can be found in <ref> [12] </ref>. 4 Object-structured algebras 4.1 Instance algebras An instance algebra represents some state of a number of objects. An update of an object's state as well as creation or deletion of an object leads to the transformation of one instance algebra into another. <p> A simplified approach taking into account only mutable objects and not allowing the specification of recursive object types is proposed in [24]. These shortcomings are eliminated in the present paper. Finally, a fundamental work <ref> [12] </ref> where objects updates are simulated by method overrides should be mentioned.
Reference: 13. <author> K.B. Bruce. </author> <title> Typing in object-oriented languages: Achieving expressibility and safety. Williams College, </title> <type> Technical report, </type> <year> 1995. </year>
Reference-contexts: It does not restrict us, however, to have overloaded observer or mutators names in the supertype-subtype hierarchy. Moreover, it allows us to create the basis for a very flexible type system like one proposed in <ref> [13] </ref>. Note that the subtype-supertype relationship presented is the most general one since it ignores whether the corresponding object types have common methods.
Reference: 14. <author> G. Smalka, W. Nutt, J. A. Goguen and J. Meseguer. </author> <title> Order-Sorted Equational Computation. </title> <editor> In: H. Ait-Kaci and M. Niva, eds., </editor> <booktitle> Resolution of Equations in Algebraic Structures, </booktitle> <volume> vol. 2, </volume> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1989, </year> <pages> pp. 299-367. </pages>
Reference-contexts: One can say that a supertype attribute function is inherited in each of its subtypes. If id 2 A T , then at A T (id) is an attribute of id. Thus, an instance algebra is a kind of order-sorted algebra <ref> [14] </ref>. An object is a pair (id; obs) where id is an object identifier and obs is a tuple of its attributes called object's state. We write sometimes "object id" meaning an object with the identifier id.
Reference: 15. <author> N. Wirth. </author> <title> The Programming Language Oberon (Revised edition). </title> <institution> Department In-formatik, Institut fur Computersysteme, ETH, </institution> <address> Zurich, </address> <year> 1990. </year>
Reference-contexts: Inter pretation: t (T ) A = t A if t A 2 A T ; t (T ) A is undefined otherwise. This is a typeguard like that one in Oberon <ref> [15] </ref> permitting us to regard a supertype term as a subtype term. This facility used together with guarded updates (see next section) allows us to bind dynamically a method (observer, mutator) name to the corresponding map. 6.
Reference: 16. <author> A.V.Zamulin. </author> <title> Typed Gurevich Machines Revisited. </title> <journal> Joint NCC&ISS Bull., Comp. Science, </journal> <volume> 5 (1997), </volume> <pages> pp. </pages> <note> 1-26 (available electronically from http://www.eecs.umich.edu/gasm/). </note>
Reference-contexts: We define here only the sequence constructor, set constructor, guarded update, and loop constructors be cause the others have minimal relevance to the subject of the paper (one can find more details in <ref> [8, 16] </ref>). Sequence constructor.
Reference: 17. <author> C. Khoury, M.C. Gaudel and P. Dauchy. AS-IS. </author> <type> Tech. report No 1119, </type> <institution> Univ. Paris-Sud, </institution> <year> 1997. </year>
Reference: 18. <author> E. Sekerinski. </author> <title> A Type-Theoretic Basis for an Object-Oriented Refinement Calcu--lus. </title> <editor> In: S.J. Goldsack, S.J. Kent (Eds.) </editor> <booktitle> Formal Methods and Object Technology, </booktitle> <address> Springer-Ferlag, </address> <year> 1996. </year>
Reference-contexts: Pieran-tonio that "the algebraic framework so far has been inadequate in describing the dynamic properties of objects and their state transformation as well as more complex notions typical of the object oriented paradigm such as object identity and persistency of objects" [20]. The interested reader can refer to <ref> [3-5, 18] </ref>. In [19] objects are elements of instance structures which are quadruples of algebras of different signatures. Specifications of the algebras resemble traditional algebraic specifications. One of the algebras is extended with extra state function symbols mapping object identifiers to their values.
Reference: 19. <author> A. Pierantonio. </author> <title> Making Statics Dynamic. </title> <editor> In: G. Hommel, editor, </editor> <booktitle> Proc. International Workshop on Communication based Systems, </booktitle> <publisher> Kluwer Academic Publishers, </publisher> <year> 1995, </year> <pages> pp. 19-34. </pages>
Reference-contexts: The interested reader can refer to [3-5, 18]. In <ref> [19] </ref> objects are elements of instance structures which are quadruples of algebras of different signatures. Specifications of the algebras resemble traditional algebraic specifications. One of the algebras is extended with extra state function symbols mapping object identifiers to their values. <p> An advantage of the technique proposed is that an object specification is done in an abstract and precise way, the specification is executable, and it is easy to understand by programmers. We create only an identifier sort for each object type in contrast to <ref> [19, 11] </ref> where value sorts are also created. This significantly simplifies the semantics of an object update and permits us to specify objects types with mutual references. Constant objects in addition to mutable objects are allowed.
Reference: 20. <author> F. Parisi-Presicce and A. Pierantonio. </author> <title> Dynamic behavior of Object Systems. In: Recent trends in Data Type Specification. </title> <booktitle> LNCS, </booktitle> <volume> vol. 906, </volume> <year> 1995, </year> <pages> pp. 406-419. </pages>
Reference-contexts: Parisi-Presicce and A. Pieran-tonio that "the algebraic framework so far has been inadequate in describing the dynamic properties of objects and their state transformation as well as more complex notions typical of the object oriented paradigm such as object identity and persistency of objects" <ref> [20] </ref>. The interested reader can refer to [3-5, 18]. In [19] objects are elements of instance structures which are quadruples of algebras of different signatures. Specifications of the algebras resemble traditional algebraic specifications. One of the algebras is extended with extra state function symbols mapping object identifiers to their values. <p> Dynamic operations serving for object evolution are modeled by algebra morphisms. The author believes that the specification of these operation should have an imperative nature, but he does not suggest a method of specification. The approach is further formalized with a heavy use of category theory in <ref> [20] </ref>. In contrast to all of this, we represent a state by a single algebra, we believe that there are no necessity in state function symbols since user-defined observers perfectly serve for this purpose, and we suggest a concrete method of specification by means of transition rules.
Reference: 21. <author> H.-D. Ehrich, R. Jungclaus, G. Denker, and A. Sernadas. </author> <title> Object-Oriented design of Information Systems: Theoretical Foundations. </title> <editor> In: J. Paredaens and L. Tenen-baum, eds., </editor> <booktitle> Advances in Database Systems, Implementations and Applications, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994, </year> <pages> pp. 201-218. </pages>
Reference-contexts: There are a number of works investigating the use of temporal logic for the specification of dynamic system behavior. The major achievement in this direction is the conceptual modeling and design language TROLL [11]. Although semantics of the language is given in [11] rather informally, it is argued in <ref> [21] </ref> that it can be given with the use of template specification logic which is a kind of temporal logic.
Reference: 22. <author> G. Gottlob, G. Kappel, M. Schrefl. </author> <title> Semantics of Object-Oriented Data Models The Evolving Algebra Approach. In Next Generation Information System Technology, </title> <booktitle> LNCS, 1991, </booktitle> <volume> vol. 504, </volume> <pages> pp. 144-160. </pages>
Reference-contexts: As a result, a specification looks like an imperative program, it is easier to understand and is executable. The approach has been used in particular for the definition of the semantics of a concrete object-oriented data model <ref> [22] </ref>. However, no formal model of an object type with different kinds of methods (observers, mutators) is given in the paper, and the problems of object type specification are left unanswered. The present work uses Gurevich's transition rules as a means of object type specification.
Reference: 23. <author> E. Zucca. </author> <title> From Static to Dynamic Data Types. </title> <editor> in: W. Penchek and A. Szalas, editors, </editor> <booktitle> Mathematical Foundations of Computer Science 1996, LNCS, </booktitle> <volume> vol. 1113, </volume> <year> 1996, </year> <pages> pp. 579-590. </pages>
Reference-contexts: In contrast to this approach, our aim is to separate strictly conventional data types and dynamic object types, providing each of them with only one level of specification. The idea of dynamic types is also investigated in <ref> [23] </ref>. Although no direct definition of a dynamic abstract type is given in that paper, it has contributed by formal definitions of a static framework and of a dynamic framework over a given static framework.
Reference: 24. <author> A.V. Zamulin. </author> <title> Algebraic Specification of Dynamic Objects. LMO 97 (Acte du Col-loque "Langage et Modeles a Objets", </title> <address> Roscoff, France, 22-24 Octobre 1997), Edition Hermes, Paris, </address> <year> 1997, </year> <pages> pp. 111-127. </pages>
Reference-contexts: A simplified approach taking into account only mutable objects and not allowing the specification of recursive object types is proposed in <ref> [24] </ref>. These shortcomings are eliminated in the present paper. Finally, a fundamental work [12] where objects updates are simulated by method overrides should be mentioned.
References-found: 24

