URL: http://www.cs.utexas.edu/users/cpg/pub/94-PDRTS.ps.gz
Refering-URL: http://www.cs.utexas.edu/users/cpg/pub/abs.html
Root-URL: 
Title: The Integration of Control and Dataflow Structures in Distributed Hard Real-Time Systems  
Author: C. Puchol and A. K. Mok 
Address: Austin, TX 78712-1188  
Affiliation: Department of Computer Sciences The University of Texas at Austin  
Abstract: The control structure of many real-time applications are naturally described by state machines. However, the state transitions of these machines are governed not only by the state of the system and the occurrence of events, but also by their time of occurrence. The control structure of a real-time system determines what computation to perform and the set of timing constraints in effect at all times. The computation performed by the system can then be modeled by a directed graph, where the nodes denote transformations on the data and the edges denote data flow. In this paper, we discuss some research issues that arise from the integration of control flow with data flow. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Bettati, D. Gillies, C.C. Han, K.J. Lin, C.L. Liu, J.W.S. Liu, and W.K. Shih. </author> <title> Recent Results in Real-Time Scheduling. </title> <editor> In A. van Tilborg and G. Koob, editors, </editor> <booktitle> Foundations of Real-Time Computing: Scheduling and Resource Management, chapter 4, </booktitle> <pages> pages 91-127. </pages> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year>
Reference: [2] <author> D. Harel. Statecharts: </author> <title> A Visual Formalism for Complex Systems. </title> <type> Technical report, </type> <institution> The Weizmann Institute of Science, </institution> <month> July </month> <year> 1986. </year>
Reference: [3] <author> F. Jahanian and A.K. Mok. </author> <title> Safety Analysis of Timing Properties of Real-Time Systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 12(9) </volume> <pages> 890-904, </pages> <month> September </month> <year> 1986. </year>
Reference-contexts: our domain model for real-time systems by means of an equation which is meant to capture the structure of a hard-real-time system: Real-Time System = State Machine + Timing Assertions + Dataflow Model Much work has been done by real-time system researchers in advancing the analysis of state machines ([2], <ref> [3] </ref>) and schedulability determination of data transformation tasks ([1]). However, there has been little done in examining the integration of the control structure (state machines) with the dataflow structure (data transformation) for real-time systems.
Reference: [4] <author> A. Mok. </author> <title> Towards Mechanization of Real-Time System Design. </title> <editor> In A. van Tilborg and G. Koob, editors, </editor> <booktitle> Foundations of Real-Time Computing: Formal Specifications and Methods, chapter 1, </booktitle> <pages> pages 1-38. </pages> <publisher> Kluwer Academic Publishers, </publisher> <year> 1992. </year>
Reference-contexts: Full automation is difficult if not impossible for the engineering of large general-purpose computing systems. It is therefore important to carefully restrict oneself to a proper domain model. In <ref> [4] </ref> we have summarized our domain model for real-time systems by means of an equation which is meant to capture the structure of a hard-real-time system: Real-Time System = State Machine + Timing Assertions + Dataflow Model Much work has been done by real-time system researchers in advancing the analysis of
Reference: [5] <author> A. Mok and S. Sutanthavibul. </author> <title> Modeling and Scheduling of Dataflow Real-Time Systems. </title> <booktitle> In Proceedings of the IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 178-187, </pages> <month> December </month> <year> 1985. </year>
Reference-contexts: This is an important open problem. In the next section, we discuss some details about the dataflow structure of distributed hard-real-time systems. 5 Dataflow Models A basic dataflow model is introduced in <ref> [5] </ref>. An extended dataflow model (AND/OR model) was introduced in [6] for modelling a more general class of distributed hard real-time systems. Both dataflow models have been extensively studied for the case of uniprocessor systems.
Reference: [6] <author> S. Sutanthavibul. </author> <title> A Data-Flow Model of Real-Time Systems. </title> <type> PhD thesis, </type> <institution> The University of Texas at Austin, Department of Computer Sciences, </institution> <month> May </month> <year> 1990. </year>
Reference-contexts: This is an important open problem. In the next section, we discuss some details about the dataflow structure of distributed hard-real-time systems. 5 Dataflow Models A basic dataflow model is introduced in [5]. An extended dataflow model (AND/OR model) was introduced in <ref> [6] </ref> for modelling a more general class of distributed hard real-time systems. Both dataflow models have been extensively studied for the case of uniprocessor systems. The models are for real-time systems where the execution of the functional elements is governed by the presence of data.
References-found: 6

