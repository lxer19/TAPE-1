URL: http://www.cs.washington.edu/homes/mel/abstracts/case.ps
Refering-URL: http://www.cs.washington.edu/homes/mel/abstracts/case.html
Root-URL: 
Title: The Case for Chaotic Adaptive Routing  
Author: Kevin Bolding, Member, IEEE, Melanie Fulgham and Lawrence Snyder, Fellow, IEEE 
Keyword: Routing, Interconnection Networks, Adaptive, Multicomputer, VLSI, Non-minimal, Torus, Mesh  
Note: IEEE TRANSACTIONS ON COMPUTERS, VOL. XX, NO. YY, MONTH 199X 1  
Abstract: Chaotic routers are randomizing, non-minimal adaptive packet routers designed for use in the communication networks of parallel computers. Chaotic routers combine the flexibility found in adaptive routing with a design simple enough to be competitive with the most streamlined oblivious routers. We review chaotic routing and compare it with other contemporary network routing approaches, including state-of-the-art oblivious and adaptive routers. A detailed head-to-head comparison between oblivious, minimal adaptive, and chaotic routing is then presented, exploring the performance of comparable VLSI implementations through analysis and simulation. The results indicate that chaotic routers provide very effective and efficient high-performance message routing. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W. Dally, </author> <title> "Wire-efficient VLSI multiprocessor communication networks," </title> <booktitle> in Proceedings of the Stanford Conference on Advanced Research in VLSI, </booktitle> <editor> Paul Losleben, Ed. </editor> <month> Mar. </month> <year> 1987, </year> <pages> pp. 391-415, </pages> <publisher> MIT Press. </publisher>
Reference: [2] <author> P. Kermani and L. Kleinrock, </author> <title> "Virtual cut-through: A new computer communication switching technique," </title> <journal> Computer Networks, </journal> <volume> vol. 3, </volume> <pages> pp. 267-286, </pages> <year> 1979. </year>
Reference: [3] <author> W. Dally and C. Seitz, </author> <title> "Deadlock-free message routing in multiprocessor interconnection networks," </title> <journal> IEEE Trans. on Computers, </journal> <volume> vol. C-36, no. 5, </volume> <pages> pp. 547-553, </pages> <month> May </month> <year> 1987. </year>
Reference: [4] <author> Kevin Bolding, </author> <title> "Non-uniformities introduced by virtual channel deadlock prevention," </title> <type> Tech. Rep. </type> <institution> UW-CSE-92-07-07, University of Washington, </institution> <address> Seattle, WA, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: For *-channels, throughput degradation also occurs for the bit reversal traffic pattern. The most likely cause of this is the asymmetry in the oblivious and *-channels network introduced by the virtual channels used for deadlock prevention in the torus <ref> [4] </ref>, [5]. At very low loads, latency for the torus is slightly higher for the Chaos and *-channels routers than for the oblivious router, due to the lower per-hop latency of the oblivious router. At higher loads before Chaos saturation, the Chaos network generally has the lowest latency.
Reference: [5] <author> Vikram S. Adve and Mary K. Vernon, </author> <title> "Performance analysis of mesh interconnection networks with deterministic routing," </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <year> 1993. </year>
Reference-contexts: For *-channels, throughput degradation also occurs for the bit reversal traffic pattern. The most likely cause of this is the asymmetry in the oblivious and *-channels network introduced by the virtual channels used for deadlock prevention in the torus [4], <ref> [5] </ref>. At very low loads, latency for the torus is slightly higher for the Chaos and *-channels routers than for the oblivious router, due to the lower per-hop latency of the oblivious router. At higher loads before Chaos saturation, the Chaos network generally has the lowest latency.
Reference: [6] <author> Christos Kaklamanis, Danny Krizanc, and Thanais Tsantilas, </author> <title> "Tight bounds for oblivious routing in the hypercube," </title> <booktitle> in Proc. Symp. on Parallel Algorithms and Architectures, </booktitle> <year> 1990, </year> <pages> pp. 31-35. </pages>
Reference: [7] <author> L. G. Valiant and G.J. Brebner, </author> <title> "Universal schemes for parallel communication," </title> <booktitle> in Proceedings of the 13th ACM Symposium on Theory of Computing, </booktitle> <year> 1981, </year> <pages> pp. 263-277. </pages>
Reference: [8] <author> G. F. Pfister and V. A. Norton, </author> <title> ""Hot spot" contention and combining in multistage interconnection networks," </title> <journal> IEEE Trans. on Computers, </journal> <volume> vol. C-34, no. 10, </volume> <month> Oct. </month> <year> 1985. </year>
Reference: [9] <author> Christopher J. Glass and Lionel M. Ni, </author> <title> "The turn model for adaptive routing," </title> <booktitle> in Proc. Int. Symp. on Computer Architecture, </booktitle> <year> 1992. </year>
Reference-contexts: C.1.c Wormhole Non-minimal Routers. While both deflection and queuing non-minimal adaptive routers require that messages be broken into fixed-size packets, wormhole routers do not require this, but allow arbitrary size messages in the network. However, this makes deadlock prevention more complex and requires either restrictions on routing <ref> [9] </ref>, [27], multiple classes of virtual channels [15], [18], or both [27]. C.2 Deadlock Prevention In fully adaptive non-minimal routers, any packet has the possibility of going out any free channel from its current location 3 .
Reference: [10] <author> Smaragda Konstantinidou, </author> <title> "Adaptive, minimal routing in hy-percubes," </title> <booktitle> in Proc. 6th MIT Conf. On Advanced Research in VLSI, </booktitle> <year> 1990, </year> <pages> pp. 139-153. </pages>
Reference: [11] <author> Andrew A. Chien and Jae H. Kim, </author> <title> "Planar-adaptive routing: Low-cost adaptive networks for multiprocessors," </title> <booktitle> in Proc. Int. Symp. on Computer Architecture, </booktitle> <month> May </month> <year> 1992, </year> <pages> pp. 268-277. </pages>
Reference: [12] <author> Gustavo D. Pifarre, Luis Gravano, Sergio A. Felperin, and Jorge L. C. Sanz, </author> <title> "Fully-adaptive minimal deadlock-free packet routing in hypercubes, meshes and other networks," </title> <booktitle> in Proc. Symp. on Parallel Algorithms and Architectures, </booktitle> <year> 1991, </year> <pages> pp. 278-290. </pages>
Reference: [13] <author> Robert Cypher and Luis Gravano, </author> <title> "Adaptive, deadlock-free packet routing in torus networks with minimal storage," </title> <booktitle> in Proc. Int. Conf. on Parallel Processing, </booktitle> <year> 1992, </year> <pages> pp. 204-211. </pages>
Reference: [14] <author> J. Yantchev and C.R. Jesshope, </author> <title> "Adaptive, low latency, deadlock-free packet routing for networks of processors," </title> <booktitle> IEE Proc., Part E, </booktitle> <volume> vol. 136, no. 3, </volume> <pages> pp. 178-186, </pages> <month> May </month> <year> 1989. </year>
Reference: [15] <author> D. H. Linder and J. C. Harden, </author> <title> "An adaptive and fault tolerant wormhole routing strategy for k-ary n-cubes," </title> <journal> IEEE Trans. on Computers, </journal> <volume> vol. C-40, no. 1, </volume> <pages> pp. 2-12, </pages> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: However, this makes deadlock prevention more complex and requires either restrictions on routing [9], [27], multiple classes of virtual channels <ref> [15] </ref>, [18], or both [27]. C.2 Deadlock Prevention In fully adaptive non-minimal routers, any packet has the possibility of going out any free channel from its current location 3 .
Reference: [16] <author> S.A. Felperin, L. Gravano, G. Pifarre, and J.L.C. Sanz, </author> <title> "Fully-adaptive routing: Packet switching performance and wormhole algorithms," </title> <booktitle> in Supercomputing, </booktitle> <year> 1991, </year> <pages> pp. 654-663. </pages>
Reference: [17] <author> P.E. Berman, L. Gravano, G. Pifarre, and J.L.C. Sanz, </author> <title> "Adaptive deadlock- and livelock-free routing with all minimal paths in torus networks," </title> <booktitle> in Proc. Symp. on Parallel Algorithms and Architectures, </booktitle> <year> 1992. </year>
Reference: [18] <author> R.V. Boppana and S. Chalasani, </author> <title> "New wormhole routing algorithms for multicomputers," </title> <type> Tech. Rep. </type> <institution> ECE-92-7, Univ. Wisc., Madison, </institution> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: However, this makes deadlock prevention more complex and requires either restrictions on routing [9], [27], multiple classes of virtual channels [15], <ref> [18] </ref>, or both [27]. C.2 Deadlock Prevention In fully adaptive non-minimal routers, any packet has the possibility of going out any free channel from its current location 3 . As a result, it is simple to show that deadlock cannot occur through path dependencies because there are no explicit paths.
Reference: [19] <author> Thu Nguyen and Lawrence Snyder, </author> <title> "Performance of minimal adaptive routers," </title> <booktitle> in Proc. Parallel Computer Routing and Communication Workshop, </booktitle> <month> May </month> <year> 1994, </year> <pages> pp. 60-71. </pages>
Reference-contexts: In between these, the *-channels minimal adaptive router offers a compromise by using limited adaptivity. In this section we compare these three routers using the met-rics of low latency and high throughput. Comparisons of chaotic routing with another minimal adaptive router can be found in <ref> [19] </ref> and with deflection routing in [29]. A. Uncongested Network Performance When a network is uncongested there are few conflicts for resources, so packets should be able to acquire needed buffers and links with little or no delay at all times.
Reference: [20] <author> B. J. Smith, </author> <title> "Architecture and applications of the HEP multiprocessor computer system," </title> <booktitle> in Proceedings of SPIE, </booktitle> <year> 1981, </year> <pages> pp. 241-248. </pages>
Reference-contexts: Thus, infinite livelock is prevented since all packets will eventually be delivered or become the oldest packet and be guaranteed delivery. Battle scar methods <ref> [20] </ref> require each packet to contain information indicating how many times it has been derouted. This information is used in a manner similar to timestamps: the packet with the smallest battle scar is selected for derouting, giving priority to messages that have "lost" derouting decisions previously.
Reference: [21] <author> N. F. Maxemchuk, </author> <title> "Comparison of deflection and store-and-forward techniques in the manhattan street and shu*e-exchange networks," </title> <booktitle> in Proceedings of IEEE INFOCOM '89, </booktitle> <year> 1989, </year> <pages> pp. </pages> <month> 800-809. </month> <journal> 12 IEEE TRANSACTIONS ON COMPUTERS, </journal> <volume> VOL. XX, NO. </volume> <publisher> YY, MONTH 199X </publisher>
Reference: [22] <author> Chien Fang and Ted Szymanski, </author> <title> "An analysis of deflection routing in multi-dimensional regular mesh networks," </title> <booktitle> in Proceedings of IEEE INFOCOM '91, </booktitle> <month> Apr. </month> <year> 1991, </year> <pages> pp. 859-868. </pages>
Reference: [23] <author> David Smitley, </author> <title> "Design tradeoffs for a high speed network node," </title> <type> Tech. Rep. </type> <institution> SRC-TR-89-007, Supercomputing Research Center Institute for Defense Analysis, Bowie, Maryland, </institution> <month> July </month> <year> 1989. </year>
Reference: [24] <author> J. Y. Ngai and C. L. Seitz, </author> <title> "A framework for adaptive routing in multicomputer networks," </title> <booktitle> in Proc. Symp. on Parallel Algorithms and Architectures, </booktitle> <year> 1989, </year> <pages> pp. 1-9. </pages>
Reference-contexts: This results in unacceptably long latency for most packets. Thus, the complexity of the mapping decision and the inability to use virtual cut-through routing limit the use of deflection routing as a multicomputer router. C.1.b Queuing Routers. Queuing non-minimal routers <ref> [24] </ref>, [25], [26] differ from deflection routers by the presence of a central buffer which holds packets awaiting free outgoing links. In general, packets move into a central buffer from incoming links and wait there until a preferred outgoing link (a link on a minimal path) becomes available. <p> XX, NO. YY, MONTH 199X ing a routing cycle will exit during the next routing cycle, so all of the packets are always moving about. Queuing routers usually rely on the packet-exchange protocol developed by Ngai and Seitz <ref> [24] </ref> which ensures that each bi-directional link in the network will not deadlock. Essentially, the protocol mandates that two nodes connected by a bi-directional link and having packets to send to each other must both accept each others' packet.
Reference: [25] <author> Smaragda Konstantinidou and Lawrence Snyder, </author> <title> "The Chaos Router: A practical application of randomization in network routing," </title> <booktitle> in Proc. Symp. on Parallel Algorithms and Architectures, </booktitle> <year> 1990, </year> <pages> pp. 21-30. </pages>
Reference-contexts: This results in unacceptably long latency for most packets. Thus, the complexity of the mapping decision and the inability to use virtual cut-through routing limit the use of deflection routing as a multicomputer router. C.1.b Queuing Routers. Queuing non-minimal routers [24], <ref> [25] </ref>, [26] differ from deflection routers by the presence of a central buffer which holds packets awaiting free outgoing links. In general, packets move into a central buffer from incoming links and wait there until a preferred outgoing link (a link on a minimal path) becomes available. <p> By introducing randomness into the network in this manner, the very regular cycles typical of livelock decay with time. Livelock-freedom is provided only in a probabilistic sense: the probability a packet is in the network for a time greater than t goes to zero as t approaches infinity <ref> [25] </ref>. Since the likelihood of livelock is low to start with, this provides a practical, though not a deterministic solution. IV. Chaotic Routing In this section we briefly describe the operation of a Chaos Router and overview a few critical features of its implementation in VLSI technology. <p> A. Operation Chaotic routing belongs to the queuing class of non-minimal adaptive routers, and as such must deal with the complexities of the queue operations. Chaotic routing attempts to minimize the impact of the queue management overhead by eliminating it from the critical path of the routing decision <ref> [25] </ref>. In Chaos routers, single packet buffers are placed on both the input and output sides of each external channel (see Figure 1). <p> This greatly simplifies the design of the router, allowing a reasonable pipeline design. Details of the timing of the internal design of the Chaos Router have previously been published <ref> [25] </ref>, [29]. V. Comparisons of Oblivious, *-Channels, and Chaotic Routing Among adaptive routers, chaotic routing is promising because of the flexibility of its non-minimal routing combined with its uniform and uncomplicated design. Oblivious routing, on the other hand, gains from its extreme simplicity of design.
Reference: [26] <author> Bill Coates, Al Davis, and Ken Stevens, </author> <title> "The post office experience: Designing a large asynchronous chip," </title> <booktitle> in Proceedings of the HICSS, </booktitle> <year> 1993. </year>
Reference-contexts: This results in unacceptably long latency for most packets. Thus, the complexity of the mapping decision and the inability to use virtual cut-through routing limit the use of deflection routing as a multicomputer router. C.1.b Queuing Routers. Queuing non-minimal routers [24], [25], <ref> [26] </ref> differ from deflection routers by the presence of a central buffer which holds packets awaiting free outgoing links. In general, packets move into a central buffer from incoming links and wait there until a preferred outgoing link (a link on a minimal path) becomes available. <p> In other words, node a cannot send a packet to node b while at the same time denying b's request to send a packet to a. Other methods of deadlock prevention based on restricted resource claiming have also been presented <ref> [26] </ref>. C.3 Livelock Prevention A distinct problem which plagues non-minimal adaptive routers is the possibility of packets having infinite-length paths. <p> Of those that have, little technical information is available on most of them due to proprietary design considerations. Exceptions to this are the Post Office router, of which a preliminary version has been built and runs at around 20MHz <ref> [26] </ref>, and the Planar-adaptive router, which, using 0:8 CMOS gate-array technology, achieves approximately 88 MHz operation in simulation [30].
Reference: [27] <author> William J. Dally and Hiromichi Aoki, </author> <title> "Deadlock-free adaptive routing in multicomputer networks using virtual channels," </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <year> 1992. </year>
Reference-contexts: C.1.c Wormhole Non-minimal Routers. While both deflection and queuing non-minimal adaptive routers require that messages be broken into fixed-size packets, wormhole routers do not require this, but allow arbitrary size messages in the network. However, this makes deadlock prevention more complex and requires either restrictions on routing [9], <ref> [27] </ref>, multiple classes of virtual channels [15], [18], or both [27]. C.2 Deadlock Prevention In fully adaptive non-minimal routers, any packet has the possibility of going out any free channel from its current location 3 . <p> However, this makes deadlock prevention more complex and requires either restrictions on routing [9], <ref> [27] </ref>, multiple classes of virtual channels [15], [18], or both [27]. C.2 Deadlock Prevention In fully adaptive non-minimal routers, any packet has the possibility of going out any free channel from its current location 3 . As a result, it is simple to show that deadlock cannot occur through path dependencies because there are no explicit paths. <p> This information is used in a manner similar to timestamps: the packet with the smallest battle scar is selected for derouting, giving priority to messages that have "lost" derouting decisions previously. A similar method by Dally and Aoki <ref> [27] </ref> allows messages to be derouted freely up to a maximum number of times, at which point they are routed deterministically by dimension-order. Priority methods suffer from two problems: complexity and overhead. The routing decision at each node becomes more complicated due to the necessity of comparing priorities when derouting.
Reference: [28] <author> J. Y. Ngai, </author> <title> A Framework for Adaptive Routing in Multicom-puter Networks, </title> <type> Ph.D. thesis, </type> <institution> California Institute of Technology, Pasadena, </institution> <address> CA, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: This eventuality is known as live-lock. There are two basic methods of dealing with livelock: priorities and randomness. Priority methods have two basic variations: timestamps and battle scars. Timestamp protocols <ref> [28] </ref> require that each packet be stamped with the time it was injected into the network. Whenever a router must choose a packet to deroute, it ensures that the oldest packet is not chosen.
Reference: [29] <author> Kevin Bolding, </author> <title> Chaotic Routing: Design and Implementation of an Adaptive Multicomputer Network Router, </title> <type> Ph.D. thesis, </type> <institution> University of Washington, </institution> <address> Seattle, WA, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: IV. Chaotic Routing In this section we briefly describe the operation of a Chaos Router and overview a few critical features of its implementation in VLSI technology. More detailed descriptions can be found in Bolding's dissertation <ref> [29] </ref>. A. Operation Chaotic routing belongs to the queuing class of non-minimal adaptive routers, and as such must deal with the complexities of the queue operations. Chaotic routing attempts to minimize the impact of the queue management overhead by eliminating it from the critical path of the routing decision [25]. <p> A two-dimensional (mesh or torus) Chaos router has been built with the design described below and achieves 30MHz operation using 1:2 CMOS, short of the 66MHz goal for the design <ref> [29] </ref>, due to implementation errors in the prototype. A version of the chip to be used as a switching element in local area networks is currently under design 5 . It is expected to operate at 180MHz. <p> This greatly simplifies the design of the router, allowing a reasonable pipeline design. Details of the timing of the internal design of the Chaos Router have previously been published [25], <ref> [29] </ref>. V. Comparisons of Oblivious, *-Channels, and Chaotic Routing Among adaptive routers, chaotic routing is promising because of the flexibility of its non-minimal routing combined with its uniform and uncomplicated design. Oblivious routing, on the other hand, gains from its extreme simplicity of design. <p> In this section we compare these three routers using the met-rics of low latency and high throughput. Comparisons of chaotic routing with another minimal adaptive router can be found in [19] and with deflection routing in <ref> [29] </ref>. A. Uncongested Network Performance When a network is uncongested there are few conflicts for resources, so packets should be able to acquire needed buffers and links with little or no delay at all times.
Reference: [30] <author> Kazuhiro Aoyama, </author> <title> "Design issues in implementing an adaptive router," M.S. </title> <type> thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <year> 1993. </year>
Reference-contexts: Exceptions to this are the Post Office router, of which a preliminary version has been built and runs at around 20MHz [26], and the Planar-adaptive router, which, using 0:8 CMOS gate-array technology, achieves approximately 88 MHz operation in simulation <ref> [30] </ref>. A two-dimensional (mesh or torus) Chaos router has been built with the design described below and achieves 30MHz operation using 1:2 CMOS, short of the 66MHz goal for the design [29], due to implementation errors in the prototype.
Reference: [31] <author> M.L. Fulgham and L. Snyder, </author> <title> "A comparison of input and output driven routers," </title> <booktitle> in Lecture Notes in Computer Science, Proc. </booktitle> <institution> of Euro-Par'96, </institution> <note> to appear 1996. </note>
Reference-contexts: In order to reduce the complexity of the pipeline, the 5 This version uses dual 8-bit uni-directional channels and a packet size of 72 bytes. constraint that only one new route may be set up per cycle is added. Furthermore, the Chaos router uses an output driven design <ref> [31] </ref>. During a cycle, a single output channel is selected to be considered as the destination for newly routed packets and only packets which can profitably use this output channel are considered. This greatly simplifies the design of the router, allowing a reasonable pipeline design.
Reference: [32] <author> Charles L. Seitz and Wen-King Su, </author> <title> "A family of routing and communication chips based on the Mosaic," </title> <booktitle> in Symp. on Integrated Systems: Proc. of the 1993 Washington Conf., </booktitle> <year> 1993, </year> <pages> pp. 320-337. </pages>
Reference-contexts: Existing oblivious routers, such as the Caltech MRC, have been built with a cycle time equal to the lower bound resulting from the limits of the VLSI technology used (a 1:2 CMOS process with a 5V interface) <ref> [32] </ref>. For chaotic routing, the design presented in Section IV-B achieves the same cycle time using the same technology. Although *-channels has not been implemented in hardware, there is nothing in the algorithm that prevents achieving the same minimum cycle time by carefully pipelining the design. <p> The performance exhibited by the Caltech "Elko" MRC is consistent with our observation, having an asynchron ous "cycle time" of 14.5 ns and minimum input-to-output latency of 44.5 ns (c = 14.5 ns and d = 3 cycles) <ref> [32] </ref>. With chaotic routing, packets are delayed a total of four cycles by the routing pipeline. When congestion is minimal or absent, incoming packets will immediately enter the routing pipeline and have no extra delay. Thus, for the Chaos router, d = 4 cycles.
Reference: [33] <author> Kevin Bolding and William Yost, </author> <title> "Design of a router for fault-tolerant networks," </title> <booktitle> in Proc. Parallel Computer Routing and Communication Workshop, </booktitle> <month> May </month> <year> 1994, </year> <pages> pp. 226-240. </pages>
Reference-contexts: If a link is not functioning, it will appear to the router as a continually busy link and the router will deroute around it. Mechanisms to extend this "natural" fault-tolerance to be more efficient and robust at little cost have been considered <ref> [33] </ref>. D. Out-of-order Packet Delivery Messages which are broken into packets for network transmission must be reconstructed before being delivered to the receiving node. If the packets arrive in the same order as they are sent, this is trivial, provided there are no lost packets.
Reference: [34] <author> Neil McKenzie, Kevin Bolding, Carl Ebeling, and Lawrence Snyder, "CRANIUM: </author> <title> An interface for message passing on adaptive packet routing networks," </title> <booktitle> in Proc. Parallel Computer Routing and Communication Workshop, </booktitle> <month> May </month> <year> 1994, </year> <pages> pp. 266-280. </pages>
Reference-contexts: Re-ordering can be done by software at the receiving node, but this adds to the time spent in the network interface. A hardware solution to this problem has been proposed by McKenzie in which packets include information on their length and their destination in memory <ref> [34] </ref>. Packets are placed in their proper place in memory and the processor is signaled as soon as the entire message has arrived. VI.
Reference: [35] <author> W. Dally, </author> <title> "Virtual-channel flow control," </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> vol. 3, no. 2, </volume> <pages> pp. 194-205, </pages> <month> Mar. </month> <year> 1992. </year>
Reference-contexts: Essentially, the design is the same as the chaotic router shown in Figure 1 without the multiqueue. The oblivious router requires two (one) virtual channels per channel on the torus (mesh), but is configured with an extra set of virtual channels or lanes <ref> [35] </ref>. The *-channels routers use three (two) virtual channels per channel on the torus (mesh). This yields a total of 15 (15), 34 (18), and 26 (18) buffers per node on the torus (mesh) for the Chaos, oblivious, and *-channels algorithms, respectively.
Reference: [36] <author> Kevin Bolding, Melanie Fulgham, and Lawrence Snyder, </author> <title> "The case for chaotic adaptive routing," </title> <type> Tech. Rep. </type> <institution> CSE-94-02-04, University of Washington, </institution> <month> Feb. </month> <year> 1994. </year>
Reference-contexts: In the simulations, each packet consists of 20 flits where the first flit is the header of the message. The channels between nodes are shared bi-directionally. The details of the simulation methodologies have been described before <ref> [36] </ref>. The traffic patterns considered have been used previously in the literature and are generally thought to be difficult, useful or both. Following is a description of the traffic patterns simulated. <p> Simulation results for mesh networks can be found in the appendices of <ref> [36] </ref>. For torus networks, saturation almost always occurs earlier using oblivious routing than when using chaotic routing. One exception to this is the complement permutation, which achieves an unusually high throughput under oblivious routing when compared to the other nonuniform traffic patterns. <p> The graphs in Figure 3 through 6 display the throughput and latency versus the offered load for uniform random, bit reversal, complement, and transpose traffic patterns. Results of more detailed comparisons are found in the appendices of <ref> [36] </ref>. Throughput of a Chaos network is greater than or equal to that of the oblivious or *-channels network for the torus topology for all traffic patterns at all loads except two. <p> Due to space limitations, results are only shown for a typical torus arrangement. The results of the others exhibit the same trends, although the particular values differ slightly from case to case. Full results are available in <ref> [36] </ref>. When hot spots are added to random traffic, the maximum throughput of the oblivious torus is reduced from 76% to 63%, as shown in Figure 7.
Reference: [37] <author> C.D. Thompson, </author> <title> "Area-time complexity for VLSI," </title> <booktitle> in Annual Symposium on Theory of Computing, </booktitle> <month> May </month> <year> 1979, </year> <pages> pp. 81-88. </pages>
Reference-contexts: All nodes generate packets at the rate specified by the presented load, normalized to the maximum load that could be delivered, under any circumstances, for random traffic. The maximum load constraint is due to the finite bisection bandwidth of the networks <ref> [37] </ref> and the fact that on average half the messages cross the bisection for random traffic. All of the traffic patterns except complement and transpose have the same limit.
Reference: [38] <author> F. Thomson Leighton, </author> <title> Introduction to Parallel Algorithms and Architectures: Arrays, Trees, Hypercubes, </title> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1992. </year>
Reference-contexts: Average injection delay in cycles for a 256-node mesh using chaotic routing. tination is the composition of the x and y axes reflection of the source. Transpose and bit reversal are important because they occur in practical computations and can cause worst case behavior in hypercubic oblivious routers <ref> [38] </ref>. A. Saturation The first set of results simply identifies the saturation points for the different traffic patterns. The saturation point reported is the first normalized applied load, using intervals of .05, that saturates the network.

References-found: 38

