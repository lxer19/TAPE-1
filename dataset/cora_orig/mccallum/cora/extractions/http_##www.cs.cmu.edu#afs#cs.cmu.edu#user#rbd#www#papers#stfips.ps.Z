URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/rbd/www/papers/stfips.ps.Z
Refering-URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/rbd/www/bib-interactiveperformance.html
Root-URL: 
Email: dannenberg@cs.cmu.edu  
Phone: (412) 268-3827  
Title: Software Techniques for Interactive Performance Systems  
Author: Roger B. Dannenberg 
Address: Pittsburgh, PA 15213  
Affiliation: School of Computer Science Carnegie Mellon University  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [Allen 90] <author> Allen, P. E. and R. B. Dannenberg. </author> <title> Tracking Musical Beats in Real Time. </title> <editor> In S. Arnold and G. Hair (editor), </editor> <booktitle> ICMC Glasgow 1990 Proceedings, </booktitle> <pages> pages 140-143. </pages> <booktitle> International Computer Music Association, </booktitle> <year> 1990. </year>
Reference-contexts: Synchronous interprocess communication operations are used to invoke routines within the music process or to set variables. This communication blocks until the currently executing action in the music process completes so as to preserve the non-preemptive semantics within the music process. A beat-tracking system constructed with Paul Allen <ref> [Allen 90] </ref> is the only system where our non-preemptive approach broke down in the context of music processing. This application uses a computationally intensive search to identify downbeats and a ``drummer'' that plays on the downbeats.
Reference: [Boynton 86] <author> L. Boynton, J. Duthen, Y. Potard, and X. Rodet. </author> <title> Adding a Graphical Interface to FORMES. </title> <editor> In P. Berg (editor), </editor> <booktitle> Proceedings of the International Computer Music Conference 1986, </booktitle> <pages> pages 105-108. </pages> <booktitle> International Computer Music Association, </booktitle> <year> 1986. </year>
Reference-contexts: Some toolkits have addressed this problem by allowing the programmer to change at run-time what method or routine to call for each event <ref> [Boynton 86] </ref>. CMT advocates a simpler method: keydown () should act as a dispatcher that forwards calls to the appropriate handler, depending upon program variables.
Reference: [Collinge 85] <author> Collinge, D. J. MOXIE: </author> <title> A Language for Computer Music Performance. </title> <editor> In W. Buxton (editor), </editor> <booktitle> Proceedings of the International Computer Music Conference 1984, </booktitle> <pages> pages 217-220. </pages> <booktitle> International Computer Music Association, </booktitle> <year> 1985. </year>
Reference-contexts: The creation and initialization of objects can be expensive, and it is usually the programmer's task to free storage when it is no longer needed. Freeing storage to which there are still outstanding references is a common error. An alternative approach (pioneered by Doug Collinge <ref> [Collinge 85, Collinge 88] </ref>) is to enqueue a routine name to be called in the future and a list of parameters. This simple operation can be used to simulate most tasks, and it hides all storage management from the application programmer. It is also quite fast.
Reference: [Collinge 88] <author> Collinge, D. J. and Scheidt, D. J. </author> <title> MOXIE for the Atari ST. </title> <editor> In C. Lischka and J. Fritsch (editor), </editor> <booktitle> Proceedings of the 14th International Computer Music Conference, </booktitle> <pages> pages 231-238. </pages> <booktitle> International Computer Music Association, </booktitle> <year> 1988. </year>
Reference-contexts: The creation and initialization of objects can be expensive, and it is usually the programmer's task to free storage when it is no longer needed. Freeing storage to which there are still outstanding references is a common error. An alternative approach (pioneered by Doug Collinge <ref> [Collinge 85, Collinge 88] </ref>) is to enqueue a routine name to be called in the future and a list of parameters. This simple operation can be used to simulate most tasks, and it hides all storage management from the application programmer. It is also quite fast.
Reference: [Dannenberg 86a] <author> Dannenberg, R. B. </author> <title> The CMU MIDI Toolkit. </title> <booktitle> In Proceedings of the 1986 International Computer Music Conference, </booktitle> <pages> pages 53-56. </pages> <booktitle> International Computer Music Association, </booktitle> <address> San Francisco, </address> <year> 1986. </year> <month> 8 </month>
Reference-contexts: For example, after receiving a MIDI note-on command, it is not possible to simply issue another read operation to get the corresponding note-off command, because other inputs may arrive in the meantime, and there may be other processing to take care of while waiting. The CMU MIDI Toolkit (CMT) <ref> [Dannenberg 86a] </ref> uses an approach in which all input is managed by a central dispatcher that parses incoming MIDI and other events. An event refers to the arrival of data or the passage of time such that some computation, called an action, should be performed. <p> For further reading, the original CMU MIDI Toolkit manual is available [Dannenberg 93], and this system is also described in a short paper <ref> [Dannenberg 86a] </ref>. The issues of preemption and high-latency graphics operations are discussed in [Dannenberg 89], and a longer discussion of CMT and Ritual of the Science Makers appears in [Dannenberg 91]. A more detailed list of recent additions to CMT appears in [Dannenberg 90]. 10.
Reference: [Dannenberg 86b] <author> Dannenberg, R. B., P. McAvinney, and D. Rubine. </author> <title> Arctic: A Functional Language for Real-Time Systems. </title> <journal> Computer Music Journal 10(4) </journal> <pages> 67-78, </pages> <month> Winter, </month> <year> 1986. </year>
Reference-contexts: For example, pitch bend can be used to produce a vibrato, and digital signal processor parameters like reverberation time can be controlled with a time-varying function. The language Arctic 7 <ref> [Dannenberg 86b] </ref> provides a good semantic model, and it would be nice to have an efficient implementation that is integrated with the CMT model. The areas of interactive composition and mixed media compositions have raised many artistic questions as well as technical ones.
Reference: [Dannenberg 89] <author> Dannenberg, R. B. </author> <title> Real Time Control For Interactive Computer Music and Animation. </title> <editor> In N. Zahler (editor), </editor> <booktitle> The Arts and Technology II: A Symposium, </booktitle> <pages> pages 85-94. </pages> <address> Connecticut College, New London, Conn., </address> <year> 1989. </year>
Reference-contexts: For further reading, the original CMU MIDI Toolkit manual is available [Dannenberg 93], and this system is also described in a short paper [Dannenberg 86a]. The issues of preemption and high-latency graphics operations are discussed in <ref> [Dannenberg 89] </ref>, and a longer discussion of CMT and Ritual of the Science Makers appears in [Dannenberg 91]. A more detailed list of recent additions to CMT appears in [Dannenberg 90]. 10. Acknowledgments The author would like to thank IBM and the CMU Information Technology Center their support.
Reference: [Dannenberg 90] <author> Dannenberg, R. B. </author> <title> Recent Developments in the CMU MIDI Toolkit. </title> <editor> In C. Sandoval (editor), </editor> <booktitle> Proceedings of the International Seminar Ano 2000: Theoretical, Technological and Compositional Alternatives, </booktitle> <pages> pages 52-62. </pages> <institution> Universidad Nacional Autonoma de Mexico, </institution> <address> Mexico City, </address> <year> 1990. </year>
Reference-contexts: The issues of preemption and high-latency graphics operations are discussed in [Dannenberg 89], and a longer discussion of CMT and Ritual of the Science Makers appears in [Dannenberg 91]. A more detailed list of recent additions to CMT appears in <ref> [Dannenberg 90] </ref>. 10. Acknowledgments The author would like to thank IBM and the CMU Information Technology Center their support. This work has evolved over a number of years with additional support from the CMU Music Department, the School of Computer Science, Yamaha, and Commodore.
Reference: [Dannenberg 91] <author> Dannenberg, R. B. </author> <title> Software Support for Interactive Multimedia Performance. </title> <editor> In D. Smalley, N. Zahler, and C. Luce (editor), </editor> <booktitle> Proceedings of The Arts and Technology 3, </booktitle> <pages> pages 85-94. </pages> <address> Connecticut College, New London, Conn., </address> <year> 1991. </year>
Reference-contexts: The issues of preemption and high-latency graphics operations are discussed in [Dannenberg 89], and a longer discussion of CMT and Ritual of the Science Makers appears in <ref> [Dannenberg 91] </ref>. A more detailed list of recent additions to CMT appears in [Dannenberg 90]. 10. Acknowledgments The author would like to thank IBM and the CMU Information Technology Center their support.
Reference: [Dannenberg 93] <author> Dannenberg, R. B. </author> <note> The CMU MIDI Toolkit 1993. </note>
Reference-contexts: The integration of scores (sequences) into an otherwise procedural programming system has added a great amount of power, especially because scores can have procedure calls embedded in them. For further reading, the original CMU MIDI Toolkit manual is available <ref> [Dannenberg 93] </ref>, and this system is also described in a short paper [Dannenberg 86a]. The issues of preemption and high-latency graphics operations are discussed in [Dannenberg 89], and a longer discussion of CMT and Ritual of the Science Makers appears in [Dannenberg 91].
Reference: [Rubine 88] <author> Rubine, D. and P. McAvinney. </author> <booktitle> The VideoHarp. In Proceedings of the 14th International Computer Music Conference, </booktitle> <pages> pages 49-55. </pages> <booktitle> International Computer Music Association, </booktitle> <year> 1988. </year> <month> 9 </month>
Reference-contexts: These examples illustrate useful features of CMT. 6. The VideoHarp in The Night of Power 2 The Night of Power , by Reza Vali, is scored for strings, brass, percussion, and VideoHarp. The VideoHarp <ref> [Rubine 88] </ref> is a MIDI controller, shaped roughly like a harp, whose sensors detect the positions of fingers on two playing surfaces. The VideoHarp supports a number of playing gestures, including strumming, bowing, and keyboard emulation.
References-found: 11

