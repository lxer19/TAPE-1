URL: http://ftp.eecs.umich.edu/people/rundenst/papers/r-95-14.ps
Refering-URL: http://ftp.eecs.umich.edu/people/rundenst/papers/
Root-URL: http://www.eecs.umich.edu
Email: e-mail: [ywh j jning j rundenst] @eecs.umich.edu  
Title: Path View Algorithm for Transportation Networks: The Dynamic Reordering Approach  
Author: Yun-Wu Huangy, Ning Jingz, and Elke A. Rundensteinery 
Keyword: Index Terms Transportation Databases, Sliding Windows, View Materialization, Transitive Closure, Route Guidance, Path Finding.  
Address: Ann Arbor, MI 48109  Changsha, Hunan, P.R. China  
Affiliation: Department of Electrical Engineering and Computer Science University of Michigan,  Department of Electrical Engineering Changsha Institute of Technology,  
Abstract: Efficient path computation necessary for route guidance has been identified as one of the key requirements for Intelligent Transportation Systems (ITS). We present a new path view algorithm that computes the materialized path view for an ITS graph database in order to efficiently support a large number of path queries. Based on breadth-first traversal, this algorithm computes single-source path views iteratively for each node in the graph. It deploys a dynamic reordering technique to prevent I/O from deteriorating for inter- single-source computation, trading off reordering I/O with increased page misses. For intra- single-source computation, it uses the sliding window method to optimize the paging activity. The experimental results show that this path view algorithm outperforms other disk-based shortest path algorithms proposed in the literature by a wide margin for ITS graphs. The dynamic reordering mechanism significantly reduces I/O for graphs with low outdegree and high locality, making this algorithm an effective solution to the ITS path finding problem. We further extend this algorithm to compress the internal data representation but retain the external tuple-based data representation, which results in significant additional I/O reduction. fl This work was supported in part by the University of Michigan ITS Center of Excellence grant (DTFH61-93-X-00017-Sub) sponsored by the U.S. Department of Transportation and by the Michigan Department of Transportation. Ning Jing, on leave from the Changsha Institute of Technology, is currently visiting the University of Michigan and likes to thank the National Education Committee of P.R. China. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Agrawal, R. and Jagadish, H. V., </author> <title> "Materialization and Incremental Update of Path Information", </title> <booktitle> IEEE 5th Int. Conf. on Data Engineering, </booktitle> <year> 1989, </year> <pages> pp. 374 - 383. </pages>
Reference-contexts: Their work is based on a direct implementation on relational DBMS products. They found that the elapsed search time is unrealistically high. These results are not surprising and further motivate our investigation of specialized solutions. Agrawal and Jagadish <ref> [1] </ref> presented (using simulation) a path encoding structure that has an acceptable storage overhead compared to maintaining all possible paths. A shortest path version of it can be adopted to materialize encoded path views [9].
Reference: [2] <author> Agrawal, R., Dar, S., and Jagadish, H. V., </author> <title> "Direct Transitive Closure Algorithms: Design and Performance Evaluation," </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 15, No. 3, </volume> <month> Sep. </month> <year> 1990, </year> <pages> pp. 427 - 458. </pages>
Reference-contexts: Because ITS graphs are cyclic, algorithms solving the ITS shortest path problem must be cycle-indifferent. Many such shortest path transitive closure algorithms have been presented in the literature <ref> [2, 3, 6, 12, 13, 22, 23] </ref>. Classic ones such as the W arshall and W arren 0 s algorithms, that are matrix-based [22, 23], and the Dijkstra 0 s algorithm, that traverses the graph based on priorities [6], work better in main memory environments. <p> Classic ones such as the W arshall and W arren 0 s algorithms, that are matrix-based [22, 23], and the Dijkstra 0 s algorithm, that traverses the graph based on priorities [6], work better in main memory environments. Recently proposed transitive closure algorithms <ref> [2, 3, 12, 13] </ref> provide disk-based solutions that can be adopted to solve linear recursive queries in relational databases [14]. Among these, Ioannidis et al.'s P ath BT C algorithm is based on depth-first graph traversal [13]. <p> Among these, Ioannidis et al.'s P ath BT C algorithm is based on depth-first graph traversal [13]. Agrawal et al.'s hybrid algorithms is a combination of matrix-based and graph-traversal approaches <ref> [2, 3] </ref>. The P ath BT C and hybrid algorithms are similar in that both use Tarjan's algorithm [20] as the first pass to identify strongly connected components and to create an approximate topological order. <p> This dramatically increases the paging activities. Experiments of shortest path on cyclic graphs were done with graphs of only up to 200 nodes running P ath BT C [13], and under 300 nodes using Agrawal el al.'s Direct transitive closure algorithms <ref> [2] </ref>, an earlier variation of the hybrid algorithms 3 , verifying the tremendous cost for shortest path algorithms on cyclic graphs using these techniques. <p> Consequently, fewer descendent 1 CON stands for concatenation; AGG stands for aggregation. They are path operators in the path algebra developed by Carre [5], and refined by Rosenthal et al. [17], Agrawal et al. <ref> [2] </ref>, and Ioannidis et al. [13]. 2 The algorithm P ath BT C marks a node when it is expanded, unmarks it if it may need re-expansion. 3 Agrawal et al. did not experiment the shortest path problem for cyclic graphs using the hybrid algorithms in [3]. 1 sets can fit <p> It deploys a sliding window method that optimizes the paging behavior within the single-source computation. Between single-source computations, it incorporates a dynamic reordering technique to prevent I/O from deteriorating. This is in contrast to previous works which perform only one a-priori ordering <ref> [2, 13] </ref>. In this paper, we propose and study different criteria for reordering that include historical trends and constant intervals. We then present detailed analyses and experimental results evaluating our proposed BSR algorithm, and comparing it against alternative approaches. <p> Among the ones that address the shortest path problem for cyclic graphs, there is a lack of performance studies for the shortest path problem for cyclic graphs with the exception of <ref> [2, 13] </ref>. For this reason, we implemented a variation of the P ath BT C algorithm [13] in order to have a benchmark against which to compare with our proposed BSR algorithm. <p> A comparison of P ath BT C with BSR, given in Section 4, demonstrates the superority of the proposed BSR for ITS graphs. Agrawal et al.'s Blocked Warren algorithm <ref> [2] </ref>, an earlier variation of the hybrid algorithm, allows for blocking by row or by column, and uses dynamic repartitioning to manage main memory. The performance of this algorithm on the shortest path problem for cyclic graphs reported in [2] is in the same order with the P ath BT C <p> Agrawal et al.'s Blocked Warren algorithm <ref> [2] </ref>, an earlier variation of the hybrid algorithm, allows for blocking by row or by column, and uses dynamic repartitioning to manage main memory. The performance of this algorithm on the shortest path problem for cyclic graphs reported in [2] is in the same order with the P ath BT C reported in [13]. Therefore we expect its performance on ITS graphs will be similar to the RDF S algorithm introduced in Section 4.
Reference: [3] <author> Agrawal, R. and Jagadish, H. V., </author> <title> "Hybrid Transitive Closure Algorithms," </title> <booktitle> Proc. of the 16th VLDB Conf., </booktitle> <address> Brisbane, Australia, </address> <year> 1990, </year> <pages> pp. 326 - 334. </pages>
Reference-contexts: Because ITS graphs are cyclic, algorithms solving the ITS shortest path problem must be cycle-indifferent. Many such shortest path transitive closure algorithms have been presented in the literature <ref> [2, 3, 6, 12, 13, 22, 23] </ref>. Classic ones such as the W arshall and W arren 0 s algorithms, that are matrix-based [22, 23], and the Dijkstra 0 s algorithm, that traverses the graph based on priorities [6], work better in main memory environments. <p> Classic ones such as the W arshall and W arren 0 s algorithms, that are matrix-based [22, 23], and the Dijkstra 0 s algorithm, that traverses the graph based on priorities [6], work better in main memory environments. Recently proposed transitive closure algorithms <ref> [2, 3, 12, 13] </ref> provide disk-based solutions that can be adopted to solve linear recursive queries in relational databases [14]. Among these, Ioannidis et al.'s P ath BT C algorithm is based on depth-first graph traversal [13]. <p> Among these, Ioannidis et al.'s P ath BT C algorithm is based on depth-first graph traversal [13]. Agrawal et al.'s hybrid algorithms is a combination of matrix-based and graph-traversal approaches <ref> [2, 3] </ref>. The P ath BT C and hybrid algorithms are similar in that both use Tarjan's algorithm [20] as the first pass to identify strongly connected components and to create an approximate topological order. <p> They both build descendent sets and process CON and AGG 1 operations by updating the information in the descendent sets of nodes being expanded in main memory. These algorithms are designed to solve general transitive closure problems that include reachability <ref> [3, 13] </ref>. Purdom [16] observed that the reachability transitive closures are identical for all nodes in a strongly connected component. This however is not true for shortest path problems for cyclic graphs in which the potential shortest paths in the strongly connected components still need to be computed. <p> [17], Agrawal et al. [2], and Ioannidis et al. [13]. 2 The algorithm P ath BT C marks a node when it is expanded, unmarks it if it may need re-expansion. 3 Agrawal et al. did not experiment the shortest path problem for cyclic graphs using the hybrid algorithms in <ref> [3] </ref>. 1 sets can fit into main memory simultaneously, resulting in more page misses during computation. 1.3 Our Proposed Approach: The BSR Algorithm For this reason, we must look into alternative solutions for solving the ITS path problem in a disk-based environment. The ITS graphs are city road maps. <p> Therefore we expect its performance on ITS graphs will be similar to the RDF S algorithm introduced in Section 4. Agrawal et al. also presented a new variation of the hybrid algorithm <ref> [3] </ref> that incorporates T arjan 0 s algorithm for graph condensation. This is however inapplicable to the shortest path problem for cyclic graphs. Shekar et al. [18] have studied the path computation problem for ITS applications.
Reference: [4] <author> Bancilhon, F., </author> <title> "Naive Evaluation of Recursively Defined Relations", In On Knowledge Base Management Systems Integrating Database and AI systems, </title> <editor> M. Brodie and J, Mylopoulos, Eds., </editor> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1985 </year>
Reference: [5] <author> Carr, B. </author> <title> "Graphs and Networks", </title> <publisher> Clarendon Press, Oxford, </publisher> <address> England, </address> <year> 1979. </year>
Reference-contexts: Consequently, fewer descendent 1 CON stands for concatenation; AGG stands for aggregation. They are path operators in the path algebra developed by Carre <ref> [5] </ref>, and refined by Rosenthal et al. [17], Agrawal et al. [2], and Ioannidis et al. [13]. 2 The algorithm P ath BT C marks a node when it is expanded, unmarks it if it may need re-expansion. 3 Agrawal et al. did not experiment the shortest path problem for cyclic
Reference: [6] <author> Dijkstra, E. W. </author> <title> "A Note on Two Problems in Connection with Graphs", </title> <journal> Numer. </journal> <month> March, </month> <year> 1959, </year> <pages> pp. 269 - 271. </pages>
Reference-contexts: Because ITS graphs are cyclic, algorithms solving the ITS shortest path problem must be cycle-indifferent. Many such shortest path transitive closure algorithms have been presented in the literature <ref> [2, 3, 6, 12, 13, 22, 23] </ref>. Classic ones such as the W arshall and W arren 0 s algorithms, that are matrix-based [22, 23], and the Dijkstra 0 s algorithm, that traverses the graph based on priorities [6], work better in main memory environments. <p> Classic ones such as the W arshall and W arren 0 s algorithms, that are matrix-based [22, 23], and the Dijkstra 0 s algorithm, that traverses the graph based on priorities <ref> [6] </ref>, work better in main memory environments. Recently proposed transitive closure algorithms [2, 3, 12, 13] provide disk-based solutions that can be adopted to solve linear recursive queries in relational databases [14]. Among these, Ioannidis et al.'s P ath BT C algorithm is based on depth-first graph traversal [13].
Reference: [7] <author> Ebert, J., </author> <title> "A Sensitive Transitive Closure Algorithm", </title> <journal> Information Processing Letters, </journal> <volume> 12. </volume> , <year> 1981, </year> <pages> pp. 255 - 258. </pages>
Reference-contexts: While most of the presented algorithms emphasize the problem of reachability, others are not applicable to the shortest path problem for cyclic graphs <ref> [7, 8, 16, 19] </ref> because of the node collapsing technique [20] they adopt. Among the ones that address the shortest path problem for cyclic graphs, there is a lack of performance studies for the shortest path problem for cyclic graphs with the exception of [2, 13].
Reference: [8] <author> Eve, J. and Kurki-Suonio, R., </author> <title> "On Computing the Transitive Closure of a Relation", </title> <journal> Acta Informatica, </journal> <volume> 8. </volume> , <year> 1977, </year> <pages> pp. 303 - 314. </pages>
Reference-contexts: While most of the presented algorithms emphasize the problem of reachability, others are not applicable to the shortest path problem for cyclic graphs <ref> [7, 8, 16, 19] </ref> because of the node collapsing technique [20] they adopt. Among the ones that address the shortest path problem for cyclic graphs, there is a lack of performance studies for the shortest path problem for cyclic graphs with the exception of [2, 13].
Reference: [9] <author> Huang, Y. W., Jing, N. and Rundensteiner, E., </author> <title> "A Semi-Materialized View Approach for Route Mainte--nance in Intelligent Vehicle Highway Systems," </title> <booktitle> The Second ACM Workshop on Geographic Information Systems, </booktitle> <address> Washington, D.C., </address> <month> Nov. </month> <year> 1994. </year>
Reference-contexts: This way large numbers of path queries can be efficiently answered by a simple lookup of the path view <ref> [9] </ref>. Our project at the ITS Research Center of Excellence of the University of Michigan is investigating the centralized approach and its ramifications. Results reported in this paper thus focus on providing solutions to the centralized route guidance problem. <p> Agrawal and Jagadish [1] presented (using simulation) a path encoding structure that has an acceptable storage overhead compared to maintaining all possible paths. A shortest path version of it can be adopted to materialize encoded path views <ref> [9] </ref>. While this structure does not enumerate all nodes in the shortest paths, they can be efficiently retrieved through path queries. This work does not focus on I/O optimization in creating disk-based encoding structures. <p> This work does not focus on I/O optimization in creating disk-based encoding structures. The BSR algorithm, with minor modification, can be considered an I/O efficient algorithm that creates disk-based encoding structures for ITS graphs. Our previous work <ref> [9] </ref> presents detailed comparisons between the path queries on the aforementioned encoded path views and the compute-on-demand approach using A fl heuristic search in main memory. Our performance evaluations conclude that the encoded path view approach is more efficient to answer real-time ITS path queries if submitted in large numbers. <p> Our performance evaluations conclude that the encoded path view approach is more efficient to answer real-time ITS path queries if submitted in large numbers. While our previous work is done using only main memory, the BSR algorithm is an extension to the disk-based approach. In our previous work <ref> [9] </ref>, the limited size of main memory for creating the encoded path views makes it unsuitable for ITS graphs with more than 2500 nodes. In a separate research effort [15], we use fragmentation to 12 T arjan 0 s algorithm is famous for identifying strongly connected components efficiently. <p> While still guaranteeing shortest path optimality, this approach significantly reduced the memory requirement and the computation time in path views maintenance compared to the flat solution <ref> [9] </ref>. However, in [15], we only study main memory solutions. 8 Conclusion In this paper, we considered the problem of efficient path queries for centralized ITS route guidance systems. To this end, we presented a disk-based algorithm, called BSR, that materializes the path view for a transportation network.
Reference: [10] <institution> Loral Federal Systems, "IVHS Architecture Phase One Final Report", Sponsored by Federal Highway Administration, DTFH61-93-C-00211, </institution> <year> 1994. </year>
Reference-contexts: 1 Introduction 1.1 Background on ITS Route Guidance Route guidance has been recognized as an important feature of Intelligence Transportation Systems (ITS) [21]. Current development of ITS route guidance architectures can be characterized by two approaches, centralized and decentralized <ref> [10] </ref>. Decentralized route guidance systems, where ITS vehicles conduct their own path finding using on-board computers and static road maps in CD-ROMs, commonly deploy heuristic single-pair algorithms such as A fl to find paths [18, 24].
Reference: [11] <author> Ioannidis, Y. E., </author> <title> "On the Computation of the Transitive Closure of Relational Operators," </title> <booktitle> Proc. 12th Int'l Conf. VLDB, </booktitle> <month> Aug. </month> <year> 1986, </year> <pages> pp. 403 - 411. </pages>
Reference: [12] <author> Ioannidis, Y. E. and Ramakrishnan, R., </author> <title> "An Efficient Transitive Closure Algorithm," </title> <booktitle> Proc. 14th Int'l Conf. VLDB, </booktitle> <address> Aug.-Sep. </address> <year> 1988, </year> <pages> pp. 382 - 394. </pages>
Reference-contexts: Because ITS graphs are cyclic, algorithms solving the ITS shortest path problem must be cycle-indifferent. Many such shortest path transitive closure algorithms have been presented in the literature <ref> [2, 3, 6, 12, 13, 22, 23] </ref>. Classic ones such as the W arshall and W arren 0 s algorithms, that are matrix-based [22, 23], and the Dijkstra 0 s algorithm, that traverses the graph based on priorities [6], work better in main memory environments. <p> Classic ones such as the W arshall and W arren 0 s algorithms, that are matrix-based [22, 23], and the Dijkstra 0 s algorithm, that traverses the graph based on priorities [6], work better in main memory environments. Recently proposed transitive closure algorithms <ref> [2, 3, 12, 13] </ref> provide disk-based solutions that can be adopted to solve linear recursive queries in relational databases [14]. Among these, Ioannidis et al.'s P ath BT C algorithm is based on depth-first graph traversal [13].
Reference: [13] <author> Ioannidis, Y. E., Ramakrishnan, R., and Winger, L., </author> <title> "Transitive Closure Algorithms Based on Graph Traversal," </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 18, No. 3, </volume> <month> Sep. </month> <year> 1993, </year> <pages> pp. 512 - 576. </pages>
Reference-contexts: In this paper, we present a disk-based algorithm that efficiently computes ITS path views. Our optimized algorithm is a significant improvement over previously published results of general transitive closure algorithms <ref> [13, 23] </ref> when applied to the shortest path problem in ITS graphs. 1.2 Problem Description: Shortest Path Algorithms for ITS We use the shortest path transitive closure concept to model the path view. Because ITS graphs are cyclic, algorithms solving the ITS shortest path problem must be cycle-indifferent. <p> Because ITS graphs are cyclic, algorithms solving the ITS shortest path problem must be cycle-indifferent. Many such shortest path transitive closure algorithms have been presented in the literature <ref> [2, 3, 6, 12, 13, 22, 23] </ref>. Classic ones such as the W arshall and W arren 0 s algorithms, that are matrix-based [22, 23], and the Dijkstra 0 s algorithm, that traverses the graph based on priorities [6], work better in main memory environments. <p> Classic ones such as the W arshall and W arren 0 s algorithms, that are matrix-based [22, 23], and the Dijkstra 0 s algorithm, that traverses the graph based on priorities [6], work better in main memory environments. Recently proposed transitive closure algorithms <ref> [2, 3, 12, 13] </ref> provide disk-based solutions that can be adopted to solve linear recursive queries in relational databases [14]. Among these, Ioannidis et al.'s P ath BT C algorithm is based on depth-first graph traversal [13]. <p> Recently proposed transitive closure algorithms [2, 3, 12, 13] provide disk-based solutions that can be adopted to solve linear recursive queries in relational databases [14]. Among these, Ioannidis et al.'s P ath BT C algorithm is based on depth-first graph traversal <ref> [13] </ref>. Agrawal et al.'s hybrid algorithms is a combination of matrix-based and graph-traversal approaches [2, 3]. The P ath BT C and hybrid algorithms are similar in that both use Tarjan's algorithm [20] as the first pass to identify strongly connected components and to create an approximate topological order. <p> They both build descendent sets and process CON and AGG 1 operations by updating the information in the descendent sets of nodes being expanded in main memory. These algorithms are designed to solve general transitive closure problems that include reachability <ref> [3, 13] </ref>. Purdom [16] observed that the reachability transitive closures are identical for all nodes in a strongly connected component. This however is not true for shortest path problems for cyclic graphs in which the potential shortest paths in the strongly connected components still need to be computed. <p> This means some descendent sets may need to be brought into main memory multiple times to update their associated labels. This dramatically increases the paging activities. Experiments of shortest path on cyclic graphs were done with graphs of only up to 200 nodes running P ath BT C <ref> [13] </ref>, and under 300 nodes using Agrawal el al.'s Direct transitive closure algorithms [2], an earlier variation of the hybrid algorithms 3 , verifying the tremendous cost for shortest path algorithms on cyclic graphs using these techniques. <p> Consequently, fewer descendent 1 CON stands for concatenation; AGG stands for aggregation. They are path operators in the path algebra developed by Carre [5], and refined by Rosenthal et al. [17], Agrawal et al. [2], and Ioannidis et al. <ref> [13] </ref>. 2 The algorithm P ath BT C marks a node when it is expanded, unmarks it if it may need re-expansion. 3 Agrawal et al. did not experiment the shortest path problem for cyclic graphs using the hybrid algorithms in [3]. 1 sets can fit into main memory simultaneously, resulting <p> It deploys a sliding window method that optimizes the paging behavior within the single-source computation. Between single-source computations, it incorporates a dynamic reordering technique to prevent I/O from deteriorating. This is in contrast to previous works which perform only one a-priori ordering <ref> [2, 13] </ref>. In this paper, we propose and study different criteria for reordering that include historical trends and constant intervals. We then present detailed analyses and experimental results evaluating our proposed BSR algorithm, and comparing it against alternative approaches. <p> The RDF S algorithm simulates Ioannidis et al.'s P ath BT C which is a recently proposed shortest path transitive closure algorithm in the literature <ref> [13] </ref>. In P ath BT C, pages are segmented into blocks to minimize internal fragmentation and to reduce page I/O. <p> main memory version of the simpler BF SSP in this case. 196-node Grid P = 10 400-node Grid P = 10 625-node Grid P = 10 900-node Grid P = 10 K=2, R=10 BFSSP RDFS Warshall 199 4709 199 47810 2403 102314 63460 927710 Page I/O It is reported in <ref> [13] </ref> that it takes P ath BT C about 8000 I/O pages to compute the shortest path transitive closure for a 200-node cyclic graph using 10 2K-byte pages in main memory. <p> We think the P ath BT C algorithm will have a similar increase pattern for large graphs, although <ref> [13] </ref> does not report any result for graphs of size larger than 200. 16 The incredible number of I/O needed for the W arshall algorithm demonstrates that it is not outdegree--sensitive and is ill-suited for disk-based computation for ITS graphs. 5.2.4 Experiments on Random Graphs Locality Experiments. <p> Among the ones that address the shortest path problem for cyclic graphs, there is a lack of performance studies for the shortest path problem for cyclic graphs with the exception of <ref> [2, 13] </ref>. For this reason, we implemented a variation of the P ath BT C algorithm [13] in order to have a benchmark against which to compare with our proposed BSR algorithm. <p> Among the ones that address the shortest path problem for cyclic graphs, there is a lack of performance studies for the shortest path problem for cyclic graphs with the exception of [2, 13]. For this reason, we implemented a variation of the P ath BT C algorithm <ref> [13] </ref> in order to have a benchmark against which to compare with our proposed BSR algorithm. The P ath BT C algorithm [13] uses T arjan 0 s algorithm as the first pass to construct a topological ordering 12 . <p> For this reason, we implemented a variation of the P ath BT C algorithm <ref> [13] </ref> in order to have a benchmark against which to compare with our proposed BSR algorithm. The P ath BT C algorithm [13] uses T arjan 0 s algorithm as the first pass to construct a topological ordering 12 . Information from the first pass can be used to physically cluster the relation in reverse topological order with nodes in descendent sets arranged in topological order. <p> The performance of this algorithm on the shortest path problem for cyclic graphs reported in [2] is in the same order with the P ath BT C reported in <ref> [13] </ref>. Therefore we expect its performance on ITS graphs will be similar to the RDF S algorithm introduced in Section 4. Agrawal et al. also presented a new variation of the hybrid algorithm [3] that incorporates T arjan 0 s algorithm for graph condensation. <p> We have conducted experiments on three types of graphs: real ITS graphs, synthetic grid graphs and random graphs. The experimental results show that the BSR algorithm outperforms other algorithms from the literature by a wide margin for cyclic graphs with low outdegree <ref> [13, 23] </ref>. The dynamic reordering mechanism significantly reduces I/O for graphs with low outdegree and high locality, making this algorithm an effective solution to the ITS path finding problem. We further extend this algorithm by compressing the internal data representation but retaining the external tuple-based data representation.
Reference: [14] <author> Jagadish, H. V. and Agrawal, R., </author> <title> "A Study of Transitive Closure as a Recursion Mechanism," </title> <booktitle> Proc. ACM-SIGMOD, </booktitle> <month> May </month> <year> 1987, </year> <pages> pp. 331 - 344. </pages>
Reference-contexts: Recently proposed transitive closure algorithms [2, 3, 12, 13] provide disk-based solutions that can be adopted to solve linear recursive queries in relational databases <ref> [14] </ref>. Among these, Ioannidis et al.'s P ath BT C algorithm is based on depth-first graph traversal [13]. Agrawal et al.'s hybrid algorithms is a combination of matrix-based and graph-traversal approaches [2, 3].
Reference: [15] <author> Jing, N., Huang, Y.W. and Rundensteiner, E., </author> <title> "Shortest Path Queries: A Hierarchical Graph Model and Evaluation," </title> <booktitle> In submission to the Int. Conf. on Data Engineering, </booktitle> <month> Mar. </month> <year> 1996. </year>
Reference-contexts: In our previous work [9], the limited size of main memory for creating the encoded path views makes it unsuitable for ITS graphs with more than 2500 nodes. In a separate research effort <ref> [15] </ref>, we use fragmentation to 12 T arjan 0 s algorithm is famous for identifying strongly connected components efficiently. But this does not apply to the shortest path problem for cyclic graphs. 19 create a hierarchical graph structure and materialize a hierarchical encoded path view. <p> While still guaranteeing shortest path optimality, this approach significantly reduced the memory requirement and the computation time in path views maintenance compared to the flat solution [9]. However, in <ref> [15] </ref>, we only study main memory solutions. 8 Conclusion In this paper, we considered the problem of efficient path queries for centralized ITS route guidance systems. To this end, we presented a disk-based algorithm, called BSR, that materializes the path view for a transportation network.
Reference: [16] <author> Purdom, P. </author> <title> "A Transitive Closure Algorithm," </title> <journal> BIT, </journal> <volume> 10, </volume> <year> 1970, </year> <pages> pp. 76 - 94. </pages>
Reference-contexts: They both build descendent sets and process CON and AGG 1 operations by updating the information in the descendent sets of nodes being expanded in main memory. These algorithms are designed to solve general transitive closure problems that include reachability [3, 13]. Purdom <ref> [16] </ref> observed that the reachability transitive closures are identical for all nodes in a strongly connected component. This however is not true for shortest path problems for cyclic graphs in which the potential shortest paths in the strongly connected components still need to be computed. <p> While most of the presented algorithms emphasize the problem of reachability, others are not applicable to the shortest path problem for cyclic graphs <ref> [7, 8, 16, 19] </ref> because of the node collapsing technique [20] they adopt. Among the ones that address the shortest path problem for cyclic graphs, there is a lack of performance studies for the shortest path problem for cyclic graphs with the exception of [2, 13].
Reference: [17] <author> Rosenthal, A., Heiler, S., Dayal, U., and Manola, F., </author> <title> "Traversal Recursion: A Practical Approach to Supporting Recursive Applications," </title> <booktitle> Proc. ACM-SIGMOD, </booktitle> <month> May </month> <year> 1986, </year> <pages> pp. 166 - 176. </pages>
Reference-contexts: Consequently, fewer descendent 1 CON stands for concatenation; AGG stands for aggregation. They are path operators in the path algebra developed by Carre [5], and refined by Rosenthal et al. <ref> [17] </ref>, Agrawal et al. [2], and Ioannidis et al. [13]. 2 The algorithm P ath BT C marks a node when it is expanded, unmarks it if it may need re-expansion. 3 Agrawal et al. did not experiment the shortest path problem for cyclic graphs using the hybrid algorithms in [3].
Reference: [18] <author> Shekar, S., Kohli, A. and Coyle, M., </author> <title> "Path Computation Algorithms for Advanced Traveller Information Systems," </title> <booktitle> IEEE 9th Int. Conf. on Data Engineering, </booktitle> <year> 1993, </year> <pages> pp. 31 - 39. </pages>
Reference-contexts: Decentralized route guidance systems, where ITS vehicles conduct their own path finding using on-board computers and static road maps in CD-ROMs, commonly deploy heuristic single-pair algorithms such as A fl to find paths <ref> [18, 24] </ref>. The centralized approach, on the other hand, relies on central stations such as the TMCs (Traffic Management Centers) to answer path queries submitted by the ITS vehicles. <p> Agrawal et al. also presented a new variation of the hybrid algorithm [3] that incorporates T arjan 0 s algorithm for graph condensation. This is however inapplicable to the shortest path problem for cyclic graphs. Shekar et al. <ref> [18] </ref> have studied the path computation problem for ITS applications. However, they focus exclusively on the compute-on-demand approach by comparing several typical route computation algorithms, such as, breadth-first search and A fl heuristic search. Their work is based on a direct implementation on relational DBMS products.
Reference: [19] <author> Schmitz, I., </author> <title> "An Imporved Transitive Closure Algorithm," </title> <booktitle> Computing 30, </booktitle> <year> 1983, </year> <pages> pp. 359 - 371. </pages>
Reference-contexts: While most of the presented algorithms emphasize the problem of reachability, others are not applicable to the shortest path problem for cyclic graphs <ref> [7, 8, 16, 19] </ref> because of the node collapsing technique [20] they adopt. Among the ones that address the shortest path problem for cyclic graphs, there is a lack of performance studies for the shortest path problem for cyclic graphs with the exception of [2, 13].
Reference: [20] <author> Tarjan, R. E., </author> <title> "Depth-First Search and Linear Graph Algorithms," </title> <journal> SIAM J. Compu. </journal> <volume> 1, 2, </volume> <year> 1972, </year> <pages> pp. 146 - 160. </pages>
Reference-contexts: Among these, Ioannidis et al.'s P ath BT C algorithm is based on depth-first graph traversal [13]. Agrawal et al.'s hybrid algorithms is a combination of matrix-based and graph-traversal approaches [2, 3]. The P ath BT C and hybrid algorithms are similar in that both use Tarjan's algorithm <ref> [20] </ref> as the first pass to identify strongly connected components and to create an approximate topological order. They both build descendent sets and process CON and AGG 1 operations by updating the information in the descendent sets of nodes being expanded in main memory. <p> While most of the presented algorithms emphasize the problem of reachability, others are not applicable to the shortest path problem for cyclic graphs [7, 8, 16, 19] because of the node collapsing technique <ref> [20] </ref> they adopt. Among the ones that address the shortest path problem for cyclic graphs, there is a lack of performance studies for the shortest path problem for cyclic graphs with the exception of [2, 13].
Reference: [21] <institution> U.S. Department of Transportation and Intelligent Vehicle-Highway Society of America, "Interim Report of IVHS Architecture Development Program", </institution> <year> 1994, </year> <pages> pp. 3. </pages>
Reference-contexts: 1 Introduction 1.1 Background on ITS Route Guidance Route guidance has been recognized as an important feature of Intelligence Transportation Systems (ITS) <ref> [21] </ref>. Current development of ITS route guidance architectures can be characterized by two approaches, centralized and decentralized [10].
Reference: [22] <author> Warren, H.S. </author> <title> "A Modification of Warshall's Algorithm for the Transitive Closure of Biary Relations," </title> <journal> Commun. ACM, </journal> <volume> 18, 4, </volume> <year> 1975, </year> <pages> pp. 218 - 220 </pages>
Reference-contexts: Because ITS graphs are cyclic, algorithms solving the ITS shortest path problem must be cycle-indifferent. Many such shortest path transitive closure algorithms have been presented in the literature <ref> [2, 3, 6, 12, 13, 22, 23] </ref>. Classic ones such as the W arshall and W arren 0 s algorithms, that are matrix-based [22, 23], and the Dijkstra 0 s algorithm, that traverses the graph based on priorities [6], work better in main memory environments. <p> Many such shortest path transitive closure algorithms have been presented in the literature [2, 3, 6, 12, 13, 22, 23]. Classic ones such as the W arshall and W arren 0 s algorithms, that are matrix-based <ref> [22, 23] </ref>, and the Dijkstra 0 s algorithm, that traverses the graph based on priorities [6], work better in main memory environments. Recently proposed transitive closure algorithms [2, 3, 12, 13] provide disk-based solutions that can be adopted to solve linear recursive queries in relational databases [14].
Reference: [23] <author> Warshall, S. </author> <title> "A Theorem on Boolean Matrices," </title> <journal> JACM, </journal> <volume> 9, 1, </volume> <year> 1962, </year> <pages> pp. 11 - 12 </pages>
Reference-contexts: In this paper, we present a disk-based algorithm that efficiently computes ITS path views. Our optimized algorithm is a significant improvement over previously published results of general transitive closure algorithms <ref> [13, 23] </ref> when applied to the shortest path problem in ITS graphs. 1.2 Problem Description: Shortest Path Algorithms for ITS We use the shortest path transitive closure concept to model the path view. Because ITS graphs are cyclic, algorithms solving the ITS shortest path problem must be cycle-indifferent. <p> Because ITS graphs are cyclic, algorithms solving the ITS shortest path problem must be cycle-indifferent. Many such shortest path transitive closure algorithms have been presented in the literature <ref> [2, 3, 6, 12, 13, 22, 23] </ref>. Classic ones such as the W arshall and W arren 0 s algorithms, that are matrix-based [22, 23], and the Dijkstra 0 s algorithm, that traverses the graph based on priorities [6], work better in main memory environments. <p> Many such shortest path transitive closure algorithms have been presented in the literature [2, 3, 6, 12, 13, 22, 23]. Classic ones such as the W arshall and W arren 0 s algorithms, that are matrix-based <ref> [22, 23] </ref>, and the Dijkstra 0 s algorithm, that traverses the graph based on priorities [6], work better in main memory environments. Recently proposed transitive closure algorithms [2, 3, 12, 13] provide disk-based solutions that can be adopted to solve linear recursive queries in relational databases [14]. <p> We believe these variations result in better I/O performance for ITS graphs than the initial P ath BT C algorithm. The W arshall algorithm is a direct implementation of the well-known W arshall 0 s matrix-based shortest path algorithm using secondary storage <ref> [23] </ref>. 4.2 Implementation Environment All algorithms are implemented on an IBM-RS6000 workstation model C10 that runs the Unix (AIX) operating system. <p> We have conducted experiments on three types of graphs: real ITS graphs, synthetic grid graphs and random graphs. The experimental results show that the BSR algorithm outperforms other algorithms from the literature by a wide margin for cyclic graphs with low outdegree <ref> [13, 23] </ref>. The dynamic reordering mechanism significantly reduces I/O for graphs with low outdegree and high locality, making this algorithm an effective solution to the ITS path finding problem. We further extend this algorithm by compressing the internal data representation but retaining the external tuple-based data representation.
Reference: [24] <author> Yang, T. A., Shekhar, S., Hamidzadeh, B. and Hancock, P. A., </author> <title> "Path Planning and Evaluation in IVHS Databases," </title> <address> VNIS, </address> <year> 1991, </year> <pages> pp. 283 - 290. 21 </pages>
Reference-contexts: Decentralized route guidance systems, where ITS vehicles conduct their own path finding using on-board computers and static road maps in CD-ROMs, commonly deploy heuristic single-pair algorithms such as A fl to find paths <ref> [18, 24] </ref>. The centralized approach, on the other hand, relies on central stations such as the TMCs (Traffic Management Centers) to answer path queries submitted by the ITS vehicles.
References-found: 24

