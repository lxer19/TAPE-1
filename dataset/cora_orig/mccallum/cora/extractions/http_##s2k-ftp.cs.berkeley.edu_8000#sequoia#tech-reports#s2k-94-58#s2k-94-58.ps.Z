URL: http://s2k-ftp.cs.berkeley.edu:8000/sequoia/tech-reports/s2k-94-58/s2k-94-58.ps.Z
Refering-URL: http://s2k-ftp.cs.berkeley.edu:8000/sequoia/tech-reports/s2k-94-58/
Root-URL: http://www.cs.berkeley.edu
Title: SEQUOIA 2000 A REFLECTION ON THE FIRST THREE YEARS  
Author: Michael Stonebraker 
Address: Berkeley  
Affiliation: EECS Department University of California,  
Abstract: This paper describes the SEQUOIA 2000 project and its implementation efforts during the first three years. Included are the objectives we had, how we chose to address them and some of the lessons we learned from this endeavor. 
Abstract-found: 1
Intro-found: 1
Reference: [FERR90] <author> Ferrari, D., </author> <title> "Client Requirements for Real-time Communication Services," </title> <journal> IEEE Communications, </journal> <month> November </month> <year> 1990. </year>
Reference-contexts: These algorithms require a "set-up" phase for a connection that will allocate bandwidth on all the lines and in all the switches, and are based on the work in <ref> [FERR90] </ref>. Lastly, the network researchers are concerned that Ultrix and OSF-1 copy every byte four times in between retrieving it from the disk and sending it out over a network connection. Even Alphas may not be fast enough to endure this kind of backplane bandwidth.
Reference: [HELL93] <author> Hellerstein, J. and Stonebraker, M., </author> <title> "Predicate Migration: Optimizing Queries with Expensive Predicates," </title> <booktitle> Proc. 1993 ACM SIGMOD Conference on Management of Data, </booktitle> <address> Washing-ton, D.C., </address> <month> May </month> <year> 1993. </year>
Reference-contexts: As such, the DBMS must be cognizant of the CPU cost of clauses when constructing a query plan, a cost component ignored by most previous optimization work. In <ref> [HELL93] </ref>, we indicate our work in extending the POSTGRES optimizer to deal intelligently with expensive functions. Furthermore, it is highly desirable to allow popular expensive functions to be precomputed. In this way they can be evaluated once, rather than once per query in which they appear.
Reference: [HERO80] <author> Herot, C., "SDMS: </author> <title> A Spatial Data Base System," </title> <journal> ACM TODS, </journal> <month> June </month> <year> 1980. </year>
Reference-contexts: For example, one could have an icon for a document, zoom in to see the abstract and then zoom in further to see the entire document. Hence, zooming can change from iconic to textual representation. This use of abstracts was popularized in the DBMS community by SDMS <ref> [HERO80] </ref>. SEQUOIA 2000 clients wish to have abstracts. However, it is clear that they can be managed by the visualization tool, the network, the DBMS, or the file system. In the former case abstracts are defined for boxes-and-arrows networks as noted in [STON93B].
Reference: [KOHL93] <author> Kohl, J. et. al., "Highlight: </author> <title> Using a Log-structured File System for Tertiary Storage Management," </title> <booktitle> Proc. 1993 Winter USENIX Meeting, </booktitle> <address> San Diego, Ca., </address> <month> Jan </month> <year> 1993. </year>
Reference-contexts: The File System Layer On top of Footprint we have written two file systems that manage data in the Bigfoot multi-level memory hierarchy. The first file system is Highlight <ref> [KOHL93] </ref>. It is an extension of the Log Structured File System (LFS) pioneered for disk devices by Ousterhout and Rosenblum [ROSE92]. Specifically, LFS treats a disk device as a single continuous log onto which newly written disk blocks are appended.
Reference: [LARS91] <author> Larson, R., </author> <title> "Classification, Clustering, Probabilistic Information Retrieval and the On-Line Catalog," </title> <address> Library Quarterly, </address> <month> April </month> <year> 1991. </year>
Reference-contexts: A third cornerstone of our architecture is a browsing capability for textual information of interest to our clients, called Lassen. This text system has two components. The first is a facility for constructing weighted keyword indexes for the the words in a POSTGRES document. This indexing systems, Cheshire <ref> [LARS91] </ref>, builds on the pioneering work of the Cornell Smart system and operates as the action part of a POSTGRES rule [STON90] which is triggered on each document insertion, update or removal.
Reference: [OLSO93] <author> Olson, M., </author> <title> "The Design and Implementation of the Inversion File System," </title> <booktitle> Proc. 1993 Winter USENIX Meeting, </booktitle> <address> San Diego, Ca., </address> <month> Jan </month> <year> 1993. </year>
Reference-contexts: In summary, Highlight should give very good performance on a workload that is "write-mostly". Since SEQUOIA 2000 clients want to archive vast amounts of data, Highlight has the potential for good performance in the SEQUOIA 2000 environment. The second file system is Inversion <ref> [OLSO93] </ref>. Most Data Base Management Systems, including the one we are using for SEQUOIA 2000, support binary large objects (blobs), which are arbitrary length, variable-length byte strings. Like several commercial systems, our data manager POSTGRES [STON90] stores large objects in a customized storage system directly on a raw storage device. <p> In additional novel characteristics of our next generation DBMS, including time travel, and an extensible type system for all DBMS objects, are automatically available for files. Of course, the possible disadvantage of files on top of a DBMS is poor performance. As reported in <ref> [OLSO93] </ref>, Inversion performance is exceedingly good when large amounts of data are read and written, a characteristic of the SEQUOIA 2000 2 The SEQUOIA 2000 Architecture workload. At the present time, Highlight is more or less operational on 4.3BSD Unix.
Reference: [ROSE92] <author> Rosenblum, M. and Ousterhout, J., </author> <title> "The Design and Implementation of a Log-structured File System," </title> <journal> ACM TOCS, </journal> <month> Feb. </month> <year> 1992. </year>
Reference-contexts: The File System Layer On top of Footprint we have written two file systems that manage data in the Bigfoot multi-level memory hierarchy. The first file system is Highlight [KOHL93]. It is an extension of the Log Structured File System (LFS) pioneered for disk devices by Ousterhout and Rosenblum <ref> [ROSE92] </ref>. Specifically, LFS treats a disk device as a single continuous log onto which newly written disk blocks are appended. Moreover, blocks are never overwritten, so a disk device can always be written sequentially. Hence, LFS turns a random write environment into a sequential write environment.
Reference: [SARA93] <author> Sarawagi, S. and Stonebraker, M., </author> <title> "Efficient Organization of Large Multidimensional Arrays," </title> <booktitle> Proc. 1993 IEEE Data Engineering Conference, </booktitle> <address> Houston, Tx., </address> <month> Feb </month> <year> 1993. </year>
Reference-contexts: How to reformat a multi-terabyte data base in finite time is currently an open ques tion that is troubling us. 3 Furthermore, we have tuned POSTGRES to meet the needs of our clients. The interface to POSTGRES arrays has been improved and a novel chunking strategy <ref> [SARA93] </ref> is now operational. Instead of storing an array by ordering the array indices from fastest to slowest changing, this system chooses a stride for each dimension and stores "hyperslabs" of the correct stride sizes in each storage object.
Reference: [SELT93] <author> Seltzer, M. et. al., </author> <title> "An Implementation of a Log-structured File System for UNIX," </title> <booktitle> Proc. 1993 Winter USENIX Meeting, </booktitle> <address> San Diego, Ca., </address> <month> Jan </month> <year> 1993. </year>
Reference-contexts: Moreover, blocks are never overwritten, so a disk device can always be written sequentially. Hence, LFS turns a random write environment into a sequential write environment. In particular problem areas, this may lead to much higher performance, and benchmark data which supports this conclusion can be found in <ref> [SELT93] </ref>. In addition, LFS can always identify the last few blocks that were written prior to a crash by finding the end of the log at recovery time. Repair of the file system is then very fast, because potentially damaged blocks are easily found.
Reference: [STON90] <author> Stonebraker, M. et al., </author> <title> "The Implementation of POSTGRES," </title> <journal> IEEE TKDE, </journal> <month> March </month> <year> 1990. </year>
Reference-contexts: The second file system is Inversion [OLSO93]. Most Data Base Management Systems, including the one we are using for SEQUOIA 2000, support binary large objects (blobs), which are arbitrary length, variable-length byte strings. Like several commercial systems, our data manager POSTGRES <ref> [STON90] </ref> stores large objects in a customized storage system directly on a raw storage device. As a result, it is a straightforward exercise to support conventional files on top of DBMS large objects. <p> This text system has two components. The first is a facility for constructing weighted keyword indexes for the the words in a POSTGRES document. This indexing systems, Cheshire [LARS91], builds on the pioneering work of the Cornell Smart system and operates as the action part of a POSTGRES rule <ref> [STON90] </ref> which is triggered on each document insertion, update or removal. The second piece of Lassen is a natural language understanding front-end query tool that allows a user to ask for all documents which satisfy a collection of keywords by inquiring in a subset of Natural 4 English.
Reference: [STON91] <author> Stonebraker, M. and Dozier, J., </author> <title> "Large Capacity Object Servers to Support Global Change Research," </title> <type> SEQUOIA 2000 Technical Report 91/1, </type> <institution> Berkeley, </institution> <address> Ca., </address> <month> July </month> <year> 1991. </year>
Reference-contexts: SEQUOIA 2000 is the Digital Equipment Corporation (DEC) flagship research project for the 1990's, replacing Project Athena at MIT, and its original conception is described in <ref> [STON91] </ref>. The participants in SEQUOIA 2000 are four types of investigators: Computer Science Researchers. Their charge is to build a prototype environment which better serves the needs of the target clients.
Reference: [STON93] <author> Stonebraker, M. et. al., </author> <title> "The SEQUOIA 2000 Benchmark," </title> <booktitle> Proc. 1993 ACM SIGMOD Conference on Management of Data, </booktitle> <address> Washington, D.C., </address> <month> May </month> <year> 1993. </year>
Reference-contexts: In order to have any chance of meeting SEQUOIA 2000 client needs, a DBMS must support spatial data such as points, lines, and polygons. In addition it must support the large spatial arrays in which satellite imagery is naturally stored. As noted in <ref> [STON93] </ref>, these characteristics are not met by popular general purpose relational and object-oriented DBMSs. The best fit to client needs is a special purpose Geographic Information Systems (GIS), or a next general prototype DBMS. <p> Vector quantities are stored in special line and polygon types. Vectors are fully enumerated (as opposed to an arc-node representation) to take advantage of POSTGRES indexed searches. The advantages of this representation are discussed in more detail in <ref> [STON93] </ref>. Raster data comprises the bulk of SEQUOIA 2000 data. These data are stored in POSTGRES multidimensional arrays objects. The contents of textual objects (in PostScript, or scanned page bitmaps) are stored in a POSTGRES document type. <p> I recall one endless discussion on the construction of a SEQUOIA 2000 benchmark that led eventually to the one in <ref> [STON93] </ref>. The CS types were arguing strongly for a representative abstract example of ES data access, i.e. the "specmark" of Earth Science. On the other hand, the ES types were equally adamant that the benchmark convey the exact data accesses of one of their real applications.
Reference: [STON93B] <author> Stonebraker, M. et. al., </author> <title> "Tioga: Providing Data Management for Scientific Visualization Applications," </title> <booktitle> Proc. 1993 VLDB Conference, </booktitle> <address> Dublin, Ireland, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: In this way, the visualizer can "navigate" around his data and then zoom in to obtain additional data on items of particular interest. This environment, named Tioga, is a joint project between Berkeley and SDSC, and its preliminary design is presented in <ref> [STON93B] </ref>. Moreover, a first prototype (early Tioga) is currently running and its features are described in [WOOD94]. A third cornerstone of our architecture is a browsing capability for textual information of interest to our clients, called Lassen. This text system has two components. <p> In short, guaranteed delivery is a collection of contracts which must be adhered to by the DBMS, the visualization package, the storage system and the network. One approach to architecting these contracts is discussed in <ref> [STON93B] </ref>. 3.2. Abstracts One aspect of the SEQUOIA 2000 visualization process is the the necessity of abstracts. Consider the above Hurricane Andrew example. The client might initially want to browse the Hurricane at 100 x 100 resolution. <p> SEQUOIA 2000 clients wish to have abstracts. However, it is clear that they can be managed by the visualization tool, the network, the DBMS, or the file system. In the former case abstracts are defined for boxes-and-arrows networks as noted in <ref> [STON93B] </ref>. In the DBMS, abstracts would be defined for individual data elements or for data classes. Furthermore, if the network manages abstracts, then it will use them to automatically lower resolution to eliminate congestion.
Reference: [WOOD94] <author> Woodruff, A. et. al., </author> <title> "Zooming and Tunneling in Tioga: Supporting Navigation in Multidimensional Space," </title> <type> SEQUOIA 2000 Technical Report 94/48, </type> <institution> Berkeley, </institution> <address> Ca., </address> <month> March </month> <year> 1994. </year> <month> 9 </month>
Reference-contexts: This environment, named Tioga, is a joint project between Berkeley and SDSC, and its preliminary design is presented in [STON93B]. Moreover, a first prototype (early Tioga) is currently running and its features are described in <ref> [WOOD94] </ref>. A third cornerstone of our architecture is a browsing capability for textual information of interest to our clients, called Lassen. This text system has two components. The first is a facility for constructing weighted keyword indexes for the the words in a POSTGRES document.
References-found: 14

