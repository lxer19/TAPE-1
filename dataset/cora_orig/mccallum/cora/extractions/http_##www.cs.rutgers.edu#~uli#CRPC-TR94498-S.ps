URL: http://www.cs.rutgers.edu/~uli/CRPC-TR94498-S.ps
Refering-URL: http://www.cs.rutgers.edu/~uli/pubs.html
Root-URL: http://www.cs.rutgers.edu
Title: Automatic Data Layout for High Performance Fortran  
Author: Ken Kennedy Ulrich Kremer 
Address: 6100 South Main Street Houston, TX 77005-1892  
Affiliation: Rice University  
Note: Center for Research on Parallel Computation  
Date: December, 1994  Revised April 1995, August 1995  
Pubnum: CRPC-TR94498-S  
Abstract-found: 0
Intro-found: 1
Reference: [ACG + 94] <author> V. Adve, A. Carle, E. Granston, S. Hiranandani, K. Kennedy, C. Koelbel, U. Kre-mer, J. Mellor-Crummey, C-W. Tseng, and S. Warren. </author> <title> Requirements for data-parallel programming environments. </title> <journal> IEEE Parallel and Distributed Technology, </journal> <volume> 2(3) </volume> <pages> 48-58, </pages> <year> 1994. </year>
Reference-contexts: This paper discusses a framework for automatic data layout for regular problems as part of a data layout assistant tool in a data parallel programming environment such as the D system <ref> [ACG + 94] </ref>. A data layout assistant tool can be used to determine an initial data layout for a sequential Fortran application. <p> We discuss a translation of the graph problem into a 0-1 integer programming formulation elsewhere [BKK94b]. We found our 0-1 formulation to be efficient in practice. 3 Prototype Implementation A prototype data layout assistant tool has been implemented as part of the D system <ref> [ACG + 94] </ref>. The prototype tool performs only intra-procedural analysis. Non-linear control flow in input Fortran programs is restricted to Do loops and If statements. The alignment analysis performance model and the heuristic for alignment search space construction are discussed in Section 3.1 and Section 3.2, respectively.
Reference: [AGG + 94] <author> E. Ayguade, J. Garcia, M. Girones, J. Labarta, J. Torres, and M. Valero. </author> <title> Detecting and using affinity in an automatic data distribution tool. </title> <booktitle> In Proceedings of the Seventh 17 Workshop on Languages and Compilers for Parallel Computing, </booktitle> <address> Ithaca, New York, </address> <month> August </month> <year> 1994. </year>
Reference-contexts: is similar in nature to the recent work done by Anderson and Lam at Stanford University [AL93], Chatterjee, Gilbert, Schreiber, She*er, and Pugh at RIACS, Xerox Parc, and the University of Maryland [CGSS94, SSP + 95], Ayguade, Garcia, Girones, Labarta, Torres and Valero at the University of Catalunya in Barcelona, <ref> [AGG + 94, GAL95] </ref>, and Ning, Van Dongen, and Gao at CRIM and McGill University [NDG95]. In contrast to previous work, our framework is designed to be used inside a data layout as 16 sistance tool.
Reference: [AL93] <author> J. Anderson and M. Lam. </author> <title> Global optimizations for parallelism and locality on scalable parallel machines. </title> <booktitle> In Proceedings of the SIGPLAN '93 Conference on Program Language Design and Implementation, </booktitle> <address> Albuquerque, NM, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: Alignment analysis is done in two stages. First, only alignment preferences between arrays are considered. In the second stage, each array is mapped onto the unique program template such that the relative alignment preferences are respected. The second stage of the alignment mapping is called orientation <ref> [AL93] </ref>. This section discusses basic operations that are needed to identify and represent relative alignment preferences, to detect and resolve conflicting relative alignment preferences, and to compare relative candidate alignments. The comparison of alignment candidates is important in order to avoid redundant alignment information in the alignment search spaces. <p> Therefore an algorithm is needed that matches the orientations of the CAGs in the alignment search spaces as closely as possible. Anderson and Lam propose a greedy strategy to determine orientations <ref> [AL93] </ref>. We discuss a similar strategy based on meet operations over the lattice of conflict-free CAGs in [Kre95]. 2.2.2 Distribution Analysis Distribution analysis is performed after alignment analysis. <p> The presented solutions differ significantly in the assumptions that are made about the input language, the possible set of data layouts, the compilation system, and the target machine architecture. Our work is similar in nature to the recent work done by Anderson and Lam at Stanford University <ref> [AL93] </ref>, Chatterjee, Gilbert, Schreiber, She*er, and Pugh at RIACS, Xerox Parc, and the University of Maryland [CGSS94, SSP + 95], Ayguade, Garcia, Girones, Labarta, Torres and Valero at the University of Catalunya in Barcelona, [AGG + 94, GAL95], and Ning, Van Dongen, and Gao at CRIM and McGill University [NDG95].
Reference: [ASU86] <author> A. V. Aho, R. Sethi, and J. Ullman. </author> <booktitle> Compilers: Principles, Techniques, and Tools. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <note> second edition, </note> <year> 1986. </year>
Reference-contexts: She*er et al. describe techniques to perform such phase merges [SSP + 95]. Transformations to improve phase recognition are beyond the scope of this paper. The phase structure of the program is represented in the phase control flow graph (PCFG), an augmented control flow graph <ref> [ASU86] </ref> where each phase is represented by a single node. The graph is annotated with branch probabilities and loop control information.
Reference: [BFKK91] <author> V. Balasundaram, G. Fox, K. Kennedy, and U. Kremer. </author> <title> A static performance estimator to guide data partitioning decisions. </title> <booktitle> In Proceedings of the Third ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, </booktitle> <address> Williamsburg, VA, </address> <month> April </month> <year> 1991. </year>
Reference-contexts: The execution model uses data dependence information to detect processor synchronization. Phases are classified as either pipelined, loosely synchronous, or reductions. Performance estimates for basic computations and communication patterns are based on machine level training sets for Intel's iPSC/860 or Paragon <ref> [BFKK91] </ref>. The training set node programs were compiled using the highest level of optimization (if77 -O4).
Reference: [Bix92] <author> R. Bixby. </author> <title> Implementing the Simplex method: The initial basis. </title> <journal> ORSA Journal on Computing, </journal> <volume> 4(3), </volume> <year> 1992. </year>
Reference-contexts: Instances of these problems are translated into 0-1 integer programming problems suitable to be solved by CPLEX 1 , a linear integer programming tool and library, partly developed by Robert Bixby at Rice University <ref> [Bix92] </ref>.
Reference: [BKK + 94a] <author> D. Bau, I. Kodukula, V. Kotlyar, K. Pingali, and P. Stodghill. </author> <title> Solving alignment using elementary linear algebra. </title> <booktitle> In Proceedings of the Seventh Workshop on Languages and Compilers for Parallel Computing, </booktitle> <address> Ithaca, New York, </address> <month> August </month> <year> 1994. </year>
Reference: [BKK94b] <author> R. Bixby, K. Kennedy, and U. Kremer. </author> <title> Automatic data layout using 0-1 integer programming. </title> <booktitle> In Proceedings of the International Conference on Parallel Architectures and Compilation Techniques (PACT94), </booktitle> <pages> pages 111-122, </pages> <address> Montreal, Canada, </address> <month> August </month> <year> 1994. </year>
Reference-contexts: Edges represent possible 8 remappings between layouts. Nodes and edges are weighted by their relative execution times. The optimal selection problem has been shown to be NP-complete [Kre93]. We discuss a translation of the graph problem into a 0-1 integer programming formulation elsewhere <ref> [BKK94b] </ref>. We found our 0-1 formulation to be efficient in practice. 3 Prototype Implementation A prototype data layout assistant tool has been implemented as part of the D system [ACG + 94]. The prototype tool performs only intra-procedural analysis.
Reference: [CGS93] <author> S. Chatterjee, J.R. Gilbert, and R. Schreiber. </author> <title> The alignment-distribution graph. </title> <booktitle> In Proceedings of the Sixth Workshop on Languages and Compilers for Parallel Computing, </booktitle> <address> Portland, OR, </address> <month> August </month> <year> 1993. </year>
Reference: [CGSS94] <author> S. Chatterjee, J. R. Gilbert, R. Schreiber, and T. She*er. </author> <title> Array distribution in data-parallel programs. </title> <booktitle> In Proceedings of the Seventh Workshop on Languages and Compilers for Parallel Computing, </booktitle> <address> Ithaca, New York, </address> <month> August </month> <year> 1994. </year>
Reference-contexts: Our work is similar in nature to the recent work done by Anderson and Lam at Stanford University [AL93], Chatterjee, Gilbert, Schreiber, She*er, and Pugh at RIACS, Xerox Parc, and the University of Maryland <ref> [CGSS94, SSP + 95] </ref>, Ayguade, Garcia, Girones, Labarta, Torres and Valero at the University of Catalunya in Barcelona, [AGG + 94, GAL95], and Ning, Van Dongen, and Gao at CRIM and McGill University [NDG95].
Reference: [CGST93] <author> S. Chatterjee, J.R. Gilbert, R. Schreiber, and S-H. Teng. </author> <title> Automatic array alignment in data-parallel programs. </title> <booktitle> In Proceedings of the Twentieth Annual ACM Symposium on the Principles of Programming Languages, </booktitle> <address> Albuquerque, NM, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: The basic operations and methods form the building blocks for implementing different heuristics and strategies for the alignment search space construction. The heuristic implemented in our prototype tool is discussed in Section 3.2. There are two types of alignment preferences, namely inter-dimensional and intra-dimensional alignment <ref> [LC90, KLS90, CGST93] </ref>. The current framework does not perform intra-dimensional alignment analysis, i.e., assumes canonical offset and stride alignments.
Reference: [FHK + 90] <author> G. Fox, S. Hiranandani, K. Kennedy, C. Koelbel, U. Kremer, C. Tseng, and M. Wu. </author> <title> Fortran D language specification. </title> <type> Technical Report TR90-141, </type> <institution> Dept. of Computer Science, Rice University, </institution> <month> December </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Compilers for data parallel languages such as High Performance Fortran (HPF) or Fortran D <ref> [FHK + 90] </ref> typically perform many optimizations based on the specified data layout. The actual optimizations performed may vary between compilers. Different parallel machine architectures have different communication and computation costs, resulting in distinct optimal balances between communication and computation for each architecture. <p> Distribution analysis generates exhaustive search spaces for only one-dimensional, block distributions. This restriction is due to the fact that the compiler model implementation mimics the program analysis steps in the Fortran D prototype compiler which does not support multi-dimensional distributions [Tse93]. Fortran D <ref> [FHK + 90] </ref> shares many features with HPF since it was one of the main contributors to the HPF language proposal. The execution model uses data dependence information to detect processor synchronization. Phases are classified as either pipelined, loosely synchronous, or reductions.
Reference: [FJL + 88] <author> G. Fox, M. Johnson, G. Lyzenga, S. Otto, J. Salmon, and D. Walker. </author> <title> Solving Problems on Concurrent Processors, volume 1. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1988. </year>
Reference-contexts: Communication inside a phase may lead to a reduction or pipelined execution of the loop. In contrast, communication outside of the phase may result in a loosely synchronous execution scheme <ref> [FJL + 88] </ref>. 2.4 Layout Selection As the result of the performance estimation step, performance numbers in terms of relative execution times are available for all candidate data layouts and possible remappings between layouts.
Reference: [GAL95] <author> J. Garcia, E. Ayguade, and J. Labarta. </author> <title> A novel approach towards automatic data distribution. In Proceedings of the Workshop on Automatic Data Layout and Performance Prediction (AP'95), </title> <address> Houston, TX, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: is similar in nature to the recent work done by Anderson and Lam at Stanford University [AL93], Chatterjee, Gilbert, Schreiber, She*er, and Pugh at RIACS, Xerox Parc, and the University of Maryland [CGSS94, SSP + 95], Ayguade, Garcia, Girones, Labarta, Torres and Valero at the University of Catalunya in Barcelona, <ref> [AGG + 94, GAL95] </ref>, and Ning, Van Dongen, and Gao at CRIM and McGill University [NDG95]. In contrast to previous work, our framework is designed to be used inside a data layout as 16 sistance tool. <p> Our framework can use techniques that may be too expensive to be included in a compiler, such as 0-1 integer programming. More recently, other researchers have started to investigate the feasibility of 0-1 integer programming techniques in the context of automatic data layout <ref> [GAL95, Phi95] </ref>. 6 Summary and Future Work The paper discussed a new framework for automatic data layout designed to be used in a data layout assistant tool.
Reference: [Gup92] <author> M. Gupta. </author> <title> Automatic Data Partitioning on Distributed Memory Multicomputers. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <month> September </month> <year> 1992. </year> <month> 18 </month>
Reference: [HA90] <author> D. Hudak and S. Abraham. </author> <title> Compiler techniques for data partitioning of sequentially iterated parallel loops. </title> <booktitle> In Proceedings of the 1990 ACM International Conference on Supercomputing, </booktitle> <address> Amsterdam, The Netherlands, </address> <month> June </month> <year> 1990. </year>
Reference: [Hec77] <author> M. S. Hecht. </author> <title> Flow Analysis of Computer Programs. </title> <publisher> North Holland, </publisher> <address> New York, NY, </address> <year> 1977. </year>
Reference-contexts: Each partition in the partitioning of a conflict-free CAG is a connected component in the CAG. The set of all possible conflict-free, inter-dimensional alignments of a set of arrays forms a semi-lattice <ref> [Hec77] </ref>. The bottom element of the lattice is the CAG that contains no alignment information, i.e., the graph contains no edges and therefore its partitioning consists of partitions that contain only single nodes. Figure 2 shows an example lattice for two two-dimensional arrays. <p> Each class of phases is represented by its joined, conflict-free CAG. The current prototype uses a greedy strategy to determine the phase CAGs to be merged next. The implemented algorithm visits the phases, i.e., the nodes in the PCFG in reverse postorder <ref> [Hec77] </ref>, and joins their CAGs as long as no conflict is detected. Once a conflict is encountered, a new class is created and initialized with the CAG of the single phase that led to the conflict. The partitioning algorithm terminates after all phases have been visited.
Reference: [Ke93] <author> C.W. Keler. </author> <title> Knowledge-based automatic parallelization by pattern recognition. </title> <editor> In C.W. Keler, editor, </editor> <title> Automatic Parallelization | New Approaches to Code Generation, Data Distribution, </title> <booktitle> and Performance Prediction, </booktitle> <pages> pages 110-135. </pages> <publisher> Verlag Vieweg, Wiesbaden, </publisher> <address> Germany, </address> <year> 1993. </year>
Reference: [KLD92] <author> K. Knobe, J.D. Lukas, and W.J. Dally. </author> <title> Dynamic alignment on distributed memory systems. </title> <booktitle> In Proceedings of the Third Workshop on Compilers for Parallel Computers, </booktitle> <address> Vienna, Austria, </address> <month> July </month> <year> 1992. </year>
Reference: [KLS90] <author> K. Knobe, J. Lukas, and G. Steele, Jr. </author> <title> Data optimization: Allocation of arrays to reduce communication on SIMD machines. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 8(2) </volume> <pages> 102-118, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: The basic operations and methods form the building blocks for implementing different heuristics and strategies for the alignment search space construction. The heuristic implemented in our prototype tool is discussed in Section 3.2. There are two types of alignment preferences, namely inter-dimensional and intra-dimensional alignment <ref> [LC90, KLS90, CGST93] </ref>. The current framework does not perform intra-dimensional alignment analysis, i.e., assumes canonical offset and stride alignments.
Reference: [Kre93] <author> U. Kremer. </author> <title> NP-completeness of dynamic remapping. </title> <booktitle> In Proceedings of the Fourth Workshop on Compilers for Parallel Computers, </booktitle> <address> Delft, The Netherlands, </address> <month> December </month> <year> 1993. </year> <note> Also available as technical report CRPC-TR93-330-S (D Newsletter #8), </note> <institution> Rice University. </institution>
Reference-contexts: The data layout graph has one node for each candidate layout. Edges represent possible 8 remappings between layouts. Nodes and edges are weighted by their relative execution times. The optimal selection problem has been shown to be NP-complete <ref> [Kre93] </ref>. We discuss a translation of the graph problem into a 0-1 integer programming formulation elsewhere [BKK94b]. We found our 0-1 formulation to be efficient in practice. 3 Prototype Implementation A prototype data layout assistant tool has been implemented as part of the D system [ACG + 94].
Reference: [Kre95] <author> U. Kremer. </author> <title> Automatic Data Layout for Distributed Memory Machines. </title> <type> PhD thesis, </type> <institution> Rice University, </institution> <month> October </month> <year> 1995. </year> <note> Available as CRPC-TR95-559-S. </note>
Reference-contexts: Therefore an algorithm is needed that matches the orientations of the CAGs in the alignment search spaces as closely as possible. Anderson and Lam propose a greedy strategy to determine orientations [AL93]. We discuss a similar strategy based on meet operations over the lattice of conflict-free CAGs in <ref> [Kre95] </ref>. 2.2.2 Distribution Analysis Distribution analysis is performed after alignment analysis. A candidate distribution can map single template dimensions either by block, cyclic, or block-cyclic onto the target architecture, or replicate dimensions on each processor. In addition, a candidate distribution specifies the number of processors in each distributed dimension. <p> The heuristics for the construction of candidate distribution search spaces can be roughly 7 divided into two classes, exhaustive and constructive. The sizes of some exhaustive search spaces are discussed in <ref> [Kre95] </ref>. Exhaustive heuristics approximate the exhaustive set of all possible distributions of the program template. An approximation is a subset of candidate distributions that can be considered a sparse representation of the exhaustive set. Constructive heuristics choose distribution candidates based on the alignments in the alignment search spaces. <p> A more detailed discussion of the alignment heuristic can be found in <ref> [Kre95] </ref>. Finally, candidate alignment schemes for phase classes are translated into candidate alignments for each individual phase in the class. Since the current prototype generates exhaustive search spaces of only one-dimensional block distributions, the orientation selection is trivial due to the symmetry between orientations and distribution candidates.
Reference: [LC90] <author> J. Li and M. Chen. </author> <title> Index domain alignment: Minimizing cost of cross-referencing between distributed arrays. </title> <booktitle> In Frontiers90: The 3rd Symposium on the Frontiers of Massively Parallel Computation, </booktitle> <address> College Park, MD, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: The basic operations and methods form the building blocks for implementing different heuristics and strategies for the alignment search space construction. The heuristic implemented in our prototype tool is discussed in Section 3.2. There are two types of alignment preferences, namely inter-dimensional and intra-dimensional alignment <ref> [LC90, KLS90, CGST93] </ref>. The current framework does not perform intra-dimensional alignment analysis, i.e., assumes canonical offset and stride alignments. <p> The current framework does not perform intra-dimensional alignment analysis, i.e., assumes canonical offset and stride alignments. Identification and Representation of Relative Alignment Preferences A central representation for the relative, inter-dimensional alignment problem is the weighted, undirected component affinity graph (CAG) introduced by Li and Chen at Yale University <ref> [LC90] </ref>. It represents the alignment preferences of arrays that are coupled in a computation. A d-dimensional array is represented in the CAG by d nodes, one node for each dimension. Alignment preferences between dimensions of distinct arrays are represented as edges between the corresponding nodes. <p> A good solution tries to minimize the weights of the edges that cross partitions and therefore cannot be satisfied. Li and Chen showed that finding the optimal solution for the inter-dimensional alignment problem is NP-complete <ref> [LC90] </ref>. Instead of using a heuristic, the current framework formulates the inter-dimensional alignment problem as an efficient 0-1 integer programming problem. A detailed description of our 0-1 formulation is given in the appendix.
Reference: [LT93] <author> P. Lee and T-B. Tsai. </author> <title> Compiling efficient programs for tightly-coupled distributed memory computers. </title> <booktitle> In Proceedings of the 1993 International Conference on Parallel Processing, </booktitle> <address> St. Charles, IL, </address> <month> August </month> <year> 1993. </year>
Reference: [NDG95] <author> Q. Ning, V. V. Dongen, and G. R. Gao. </author> <title> Automatic data and computation decomposition for distributed memory machines. </title> <booktitle> In Proceedings of the 28th Annual Hawaii International Conference on System Sciences, </booktitle> <address> Maui, Hawaii, </address> <month> January </month> <year> 1995. </year>
Reference-contexts: University [AL93], Chatterjee, Gilbert, Schreiber, She*er, and Pugh at RIACS, Xerox Parc, and the University of Maryland [CGSS94, SSP + 95], Ayguade, Garcia, Girones, Labarta, Torres and Valero at the University of Catalunya in Barcelona, [AGG + 94, GAL95], and Ning, Van Dongen, and Gao at CRIM and McGill University <ref> [NDG95] </ref>. In contrast to previous work, our framework is designed to be used inside a data layout as 16 sistance tool. To support user interaction, the framework builds and examines explicit search spaces of possible candidate layouts.
Reference: [NW88] <author> G. L. Nemhauser and L. A. Wolsey. </author> <title> Integer and Combinatorial Optimization. </title> <publisher> John Wiley & Sons, </publisher> <year> 1988. </year>
Reference: [Phi95] <author> M. Philippsen. </author> <title> Automatic alignment of array data and processes to reduce communication time on DMPPs. </title> <booktitle> In Proceedings of the Fifth ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, </booktitle> <address> Santa Barbara, CA, </address> <month> July </month> <year> 1995. </year>
Reference-contexts: Our framework can use techniques that may be too expensive to be included in a compiler, such as 0-1 integer programming. More recently, other researchers have started to investigate the feasibility of 0-1 integer programming techniques in the context of automatic data layout <ref> [GAL95, Phi95] </ref>. 6 Summary and Future Work The paper discussed a new framework for automatic data layout designed to be used in a data layout assistant tool.
Reference: [RS89] <author> J. Ramanujam and P. Sadayappan. </author> <title> A methodology for parallelizing programs for mul-ticomputers and complex memory multiprocessors. </title> <booktitle> In Proceedings of Supercomputing '89, </booktitle> <address> Reno, NV, </address> <month> November </month> <year> 1989. </year>
Reference: [SSP + 95] <author> T. J. She*er, R. Schreiber, W. Pugh, J. R. Gilbert, and S. Chatterjee. </author> <title> Efficient distri 19 bution analysis via graph contraction. In Proceedings of the Workshop on Automatic Data Layout and Performance Prediction (AP'95), </title> <address> Houston, TX, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: Other strategies for identifying program phases are a topic of current research. For instance, two adjacent phases can be merged into a single phase if remapping can never be profitable between them. She*er et al. describe techniques to perform such phase merges <ref> [SSP + 95] </ref>. Transformations to improve phase recognition are beyond the scope of this paper. The phase structure of the program is represented in the phase control flow graph (PCFG), an augmented control flow graph [ASU86] where each phase is represented by a single node. <p> Our work is similar in nature to the recent work done by Anderson and Lam at Stanford University [AL93], Chatterjee, Gilbert, Schreiber, She*er, and Pugh at RIACS, Xerox Parc, and the University of Maryland <ref> [CGSS94, SSP + 95] </ref>, Ayguade, Garcia, Girones, Labarta, Torres and Valero at the University of Catalunya in Barcelona, [AGG + 94, GAL95], and Ning, Van Dongen, and Gao at CRIM and McGill University [NDG95].
Reference: [Tse93] <author> C. Tseng. </author> <title> An Optimizing Fortran D Compiler for MIMD Distributed-Memory Machines. </title> <type> PhD thesis, </type> <institution> Rice University, Houston, TX, </institution> <month> January </month> <year> 1993. </year> <institution> Rice COMP TR93-199. </institution>
Reference-contexts: Distribution analysis generates exhaustive search spaces for only one-dimensional, block distributions. This restriction is due to the fact that the compiler model implementation mimics the program analysis steps in the Fortran D prototype compiler which does not support multi-dimensional distributions <ref> [Tse93] </ref>. Fortran D [FHK + 90] shares many features with HPF since it was one of the main contributors to the HPF language proposal. The execution model uses data dependence information to detect processor synchronization. Phases are classified as either pipelined, loosely synchronous, or reductions. <p> To perform the comparison, each program was compiled for each data layout in its set of promising data layouts using the Fortran D compiler prototype <ref> [Tse93] </ref> with loop interchange and coarse-grain pipelining disabled. When necessary, the output of the Fortran D compiler was modified by hand to ensure correct code. The resulting SPMD node programs were compiled using the highest optimization level (if77 -O4), and executed and timed on the iPSC/860.
Reference: [Who91] <author> S. Wholey. </author> <title> Automatic Data Mapping for Distributed-Memory Parallel Computers. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <month> May </month> <year> 1991. </year> <month> 20 </month>
References-found: 31

