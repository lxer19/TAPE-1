URL: http://www.idt.unit.no/~epos/Papers/scm5.ps
Refering-URL: http://www.idt.unit.no/~epos/bibliografia.html
Root-URL: 
Email: -eirik|bjorngu|conradi-@idt.unit.no  
Title: Modelling Systems with Variability using the PROTEUS Configuration Language  
Author: Eirik Tryggeseth, Bjrn Gulla and Reidar Conradi 
Keyword: Configuration language, software evolution, software configuration management.  
Address: N-7034 Trondheim, Norway  
Affiliation: Department of Computer Systems and Telematics Norwegian Institute of Technology (NTH)  
Abstract: To respond to environmental changes and customer specific requirements, industrial software systems must often incorporate many sources of variability. Developers use a diverse range of representations and techniques to achieve this, including structural variability, component version selection, conditional inclusion, and varying derivation processes. This paper advocates specifying all potential variability within a system using a single formalism. PCL, the configuration language defined in the PROTEUS 1 project, provides uniform facilities for expressing and controlling variability in all aspects of a system and its manufacturing process. PCL is supported by a comprehensive tool set and is integrated with several design methods. The paper uses a simple example throughout to illustrate the facilities of PCL and how these are supported by the tool set. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> E. Borison: </author> <title> A Model of Software Manufacture. </title> <editor> In Reidar Conradi et.al., editors, </editor> <booktitle> Proceedings of the International Workshop on Advanced Programming Environments, </booktitle> <address> Trondheim, Norway, June 16-18, 1986, </address> <publisher> LNCS no. 244, Springer-Verlag, Berlin, </publisher> <pages> pp. 197-220. </pages>
Reference-contexts: Figure 5 shows a part of the full classification hierarchy. The next paragraph explains how we use this classification information to sup port system manufacture. 3.6 System Manufacture (Building) Borison <ref> [1] </ref> defines software manufacture to be the process by which a software product is derived, through an often complex sequence of steps, from the primitive components of a system. PCL provides constructs to define customizable tasks in software system manufacturing.
Reference: 2. <author> L. W. Cooprider: </author> <title> The Representation of Families of Software Systems. </title> <type> PhD thesis, </type> <institution> Carnegie-Mellon University, Computer Science Department, </institution> <month> April </month> <year> 1979. </year>
Reference: 3. <author> F. DeRemer and H. H. Kron: </author> <title> Programming-in-the-large Versus Programming-in-the-small, </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-2(2), </volume> <month> June </month> <year> 1976, </year> <pages> pp. 80-86. </pages>
Reference: 4. <author> J. Estublier: </author> <title> A configuration manager: The Adele data base of programs. </title> <booktitle> In Workshop on Software Engineering Environments for Programming-in-the-Large, </booktitle> <address> Har-wichport, Massachusetts, </address> <month> June </month> <year> 1985, </year> <pages> pp. 140-147. </pages>
Reference-contexts: Basically, this process consists of finding a unique version identifier for each element, so that the resulting configuration is consistent and possesses the desired properties. PCL supports intensional version selection, adopted from the Adele system <ref> [4] </ref>. Version selection is done by the Select operation. It transforms a bound PCL model to a selected model by adding explicit version identifiers to the description of each physical object stored in the Repository.
Reference: 5. <author> J. Estublier and R. Casallas: </author> <title> The Adele Configuration Manager. </title> <editor> In W. F. </editor> <title> Tichy, Configuration Management, </title> <publisher> John Wiley & Sons Ltd., </publisher> <address> Chichester, 1994, ISBN 0 471-94245-6, </address> <pages> pp. 99-133. </pages>
Reference-contexts: Narayanaswamy identified the need for structural variability [11], although the proposed NuMIL does not contain constructs for expressing it. In SySL some TABLE I Support offered by MILs and SCM systems for PROTEUS requirements MIL75 [3]Cooprider s MIL [2]INTERCOL [15]Jasmine [10]SySL [14] ClearCase [8]Adele <ref> [5] </ref> PCL [12] Integrated system modelling None None None Good None None Good Multiple structural viewpoints Limited None None None None Limited Good Structural variability None None None Limited Limited Good Good Component variability None Limited Limited None Good Good Good Flexible manufacture support None None Limited Limited Good Good Good
Reference: 6. <author> S. I. Feldman: </author> <title> Make, a Program for Maintaining Computer Programs, </title> <journal> Software - Practice and Experience, </journal> <volume> 9(4), </volume> <month> April </month> <year> 1979, </year> <pages> pp. 255-265. </pages>
Reference-contexts: In Adele, an intertwined binding process over the product is used, exploiting preferences and constraint rules. Yet other systems, such as ClearCase and EPOS [9], first perform version binding, allowing transparent access to a uni-version view. Automated support for system manufacture was introduced by Feldman <ref> [6] </ref> with the Make system. ClearCase provides more accurate and optimized re-generation by managing configuration records for derived objects. In Adele manufacture support may be implemented by triggers. PCL advocates user control of recompilation, using automatically generated makefiles tailored to the selected product configuration. <p> The form of this script is sim ilar to the build script. As physical objects are transformed to new representations, which again may be further transformed, the system derivation graph is built. This information is emitted to a makefile which can be utilized by the Make program <ref> [6] </ref>. The make-file generation process can be customized in different ways, as shown in Figure6. Fig. 6. Menu for customizing makefile generation. The system derivation graph for the calc program is shown in Figure 7. 3.7 Repository Management A PCL model refers ultimately to a set of physical objects.
Reference: 7. <author> B. Gulla and J. Gorman: </author> <title> Supporting evolution with a configuration language: </title> <journal> industrial experience, </journal> <pages> 11 pages. </pages> <note> Submitted for publication. </note>
Reference-contexts: The Repository is currently implemented on top of RCS [16]. 5 Preliminary Experiences PCL and its tool set is currently being validated at four different partners in the PROTEUS project, on applications ranging from telecommunications software to system development tools. Reported benefits include (see also <ref> [7] </ref>): Increased system visibility, i.e. recording and formalizing knowledge previously distributed and unavailable (person dependent). This system documentation is essential for controlling the system evolution (impact analysis of changes), but has in addition proved valuable for internal communication and training.
Reference: 8. <author> D. L. Leblang: </author> <title> The CM Challenge: Configuration Management that Works. </title> <editor> In W. F. </editor> <title> Tichy, Configuration Management, </title> <publisher> John Wiley & Sons Ltd., </publisher> <address> Chichester, 1994, ISBN 0-471-94245-6, </address> <pages> pp. 1-37. </pages>
Reference: 9. <author> A. Lie, R. Conradi, T. M. Didriksen, E.-A. Karlsson, S. O. Hallsteinsen and P. Holager: </author> <title> Change Oriented Versioning in a Software Engineering Database. </title> <editor> In W. F. Tichy, editor, </editor> <booktitle> Proceedings of the Second International Workshop on Software Configuration Management, </booktitle> <pages> pp. 56-65, </pages> <address> Princeton, NJ, </address> <month> October 25-27, </month> <year> 1989. </year> <booktitle> ACM SIGSOFT Software Engineering Notes 17(7), </booktitle> <month> November </month> <year> 1989. </year>
Reference-contexts: MILs usually first perform product elaboration into relevant product families, and then version binding for each atomic family. In Adele, an intertwined binding process over the product is used, exploiting preferences and constraint rules. Yet other systems, such as ClearCase and EPOS <ref> [9] </ref>, first perform version binding, allowing transparent access to a uni-version view. Automated support for system manufacture was introduced by Feldman [6] with the Make system. ClearCase provides more accurate and optimized re-generation by managing configuration records for derived objects. In Adele manufacture support may be implemented by triggers.
Reference: 10. <author> K. Marzullo and D. Wiebe: Jasmine: </author> <title> A Software System Modelling Facility. </title> <editor> In P. B. Henderson, </editor> <booktitle> Proceedings of the 2nd ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, </booktitle> <address> Palo Alto, CA, </address> <month> December 9-11, </month> <year> 1986. </year> <journal> ACM SIGPLAN Notices, </journal> <volume> 22(1), </volume> <month> January </month> <year> 1987, </year> <pages> pp. 121-130. </pages>
Reference: 11. <author> K. Narayanaswamy and W. Scacchi: </author> <title> Maintaining Configurations of Evolving Software Systems, </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-13(3), </volume> <month> March </month> <year> 1987, </year> <pages> pp. 324-334. </pages>
Reference-contexts: Future work largely ignored this early insight and still only provided limited support. PCL is the first language to provide good facilities to model a range of these different structural viewpoints. Narayanaswamy identified the need for structural variability <ref> [11] </ref>, although the proposed NuMIL does not contain constructs for expressing it.
Reference: 12. <author> PROTEUS consortium: </author> <title> PCL-V2 Reference Manual, </title> <type> Technical Report P-DEL-3.4.D-1.9, </type> <month> September </month> <year> 1994, </year> <pages> 85 pages. </pages>
Reference-contexts: Narayanaswamy identified the need for structural variability [11], although the proposed NuMIL does not contain constructs for expressing it. In SySL some TABLE I Support offered by MILs and SCM systems for PROTEUS requirements MIL75 [3]Cooprider s MIL [2]INTERCOL [15]Jasmine [10]SySL [14] ClearCase [8]Adele [5] PCL <ref> [12] </ref> Integrated system modelling None None None Good None None Good Multiple structural viewpoints Limited None None None None Limited Good Structural variability None None None Limited Limited Good Good Component variability None Limited Limited None Good Good Good Flexible manufacture support None None Limited Limited Good Good Good Object-oriented modelling <p> This includes software, hardware, documentation, possible configurations, how these configurations are instantiated into a system, and finally how the software parts of an instantiated system are processed into executable programs. PCL <ref> [12] </ref> defines six distinct entity types for modelling families of systems, as defined in Table II. An entity description is organized in sections, each con sisting of a sequence of named slots. These entity types are related to each other by a set of language-defined relations as shown in Figure1.
Reference: 13. <author> I. Sommerville and G. Dean: PCL: </author> <title> A configuration language for modelling evolving system architectures, </title> <type> 21 pages. </type> <note> Submitted for publication. </note>
Reference-contexts: It is a principle in configuration management that the system model must be explicit, unambiguous, and be managed as the system evolves [17]. Module Interconnection Languages, MILs, is a common approach for expressing system models. Sommerville and Dean <ref> [13] </ref> give an overview of existing module interconnection languages and compare these with the capabilities of PCL. System models are also employed by current SCM systems, although the model is usually embedded in a tool or in a database. We have extended the comparison in [13] with more fine-grained criteria and <p> Sommerville and Dean <ref> [13] </ref> give an overview of existing module interconnection languages and compare these with the capabilities of PCL. System models are also employed by current SCM systems, although the model is usually embedded in a tool or in a database. We have extended the comparison in [13] with more fine-grained criteria and replaced the description of some MILs with characterization of three SCM systems. Table I presents a summary of the comparison, which is to some degree influenced by the concrete requirements expressed by the application partners in PROTEUS.
Reference: 14. <author> R. Thomson and I. Sommerville: </author> <title> An Approach to the Support of Software Evolution, </title> <journal> Computer Journal, </journal> <volume> 32(5), </volume> <month> October </month> <year> 1989, </year> <pages> pp. 386-396. </pages>
Reference-contexts: Narayanaswamy identified the need for structural variability [11], although the proposed NuMIL does not contain constructs for expressing it. In SySL some TABLE I Support offered by MILs and SCM systems for PROTEUS requirements MIL75 [3]Cooprider s MIL [2]INTERCOL [15]Jasmine [10]SySL <ref> [14] </ref> ClearCase [8]Adele [5] PCL [12] Integrated system modelling None None None Good None None Good Multiple structural viewpoints Limited None None None None Limited Good Structural variability None None None Limited Limited Good Good Component variability None Limited Limited None Good Good Good Flexible manufacture support None None Limited Limited
Reference: 15. <author> W. F. Tichy: </author> <title> Software Development Control Based on Module Interconnection. </title> <booktitle> In Proceedings of the 4th International Conference on Software Engineering, IEEE, </booktitle> <month> September </month> <year> 1979, </year> <pages> pp. 29-41. </pages>
Reference: 16. <author> W. F. Tichy: </author> <title> RCS - A System for Version Control, </title> <journal> Software Practice and Experience, </journal> <volume> 15(7), </volume> <month> July </month> <year> 1985, </year> <pages> pp. 637-654. </pages>
Reference-contexts: It is currently available for Sun and HP workstations. BMS, a selective multicast package provided by CAP Gemini, is used for tool integration, both of the PCL tool set itself and for integration with external design tools. The Repository is currently implemented on top of RCS <ref> [16] </ref>. 5 Preliminary Experiences PCL and its tool set is currently being validated at four different partners in the PROTEUS project, on applications ranging from telecommunications software to system development tools.
Reference: 17. <author> D. Whitgift: </author> <title> Methods and Tools for Software Configuration Management, </title> <publisher> John Wiley & Sons Ltd., </publisher> <address> Chichester, </address> <year> 1991. </year> <note> ISBN 0-471-92940-9 </note>
Reference-contexts: For such a model to support configuration management, it must uniquely identify the comprising components, their static structure and derivation processes. It is a principle in configuration management that the system model must be explicit, unambiguous, and be managed as the system evolves <ref> [17] </ref>. Module Interconnection Languages, MILs, is a common approach for expressing system models. Sommerville and Dean [13] give an overview of existing module interconnection languages and compare these with the capabilities of PCL.
References-found: 17

