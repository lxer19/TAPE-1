URL: http://www.cs.rice.edu:80/~rjf/papers/rocsys.ps.gz
Refering-URL: http://www.cs.rice.edu:80/~rjf/pubs.html
Root-URL: 
Title: A Closed-Form Approximation to a MVA Multiprocessor Model and a New Component of Communication Overhead  
Author: Ioan I. Macarie Robert J. Fowler 
Abstract: We present a technique for producing a simple closed-form approximate solution to a Mean Value model of a bus-based multiprocessor architecture with coherent caches. Using architectural parameters and the relative frequencies of different types of memory operations in an application program, the model predicts the waiting time for the bus and effective slowdown of each processor. The solution consists of three terms that characterize performance in terms of a sequential component, a parallel component, and a new asymptotic component. This contrasts with common performance models that include sequential, parallel, and logarithmic components. 
Abstract-found: 1
Intro-found: 1
Reference: [BrAd88] <author> Browne, J.C. and Adiga, </author> <title> A.K. Graph Structured Performance Mod els. Performance Evaluation of Supercomputers, </title> <editor> J.L. Martin (editor), </editor> <publisher> El-sevier Science Publishers B.V., </publisher> <year> 1988, </year> <pages> pp. 239-281 </pages>
Reference: [CrBiLeMaWi92] <author> Crovella M., Bianchini R., LeBlanc T., Makatos E., and Wis niewski R. </author> <title> Using Communication-to-Computation Ratio in Parallel Program Design and Performance Prediction. </title> <booktitle> To appear in Proc. 4th IEEE Symp on Parallel and Distributed Processing. </booktitle>
Reference-contexts: It also predicts bus bandwidth requirements and utilizations for 2 the bus and memory controllers. By the time the paper was written, the model was partially validated against measurements of a working system. Crovella et al. <ref> [CrBiLeMaWi92] </ref> used a different performance prediction technique. Based on communication-to-computation ratios, the method was able to predict performance accurately in the case of simple programs (Gaus-sian elimination, Quicksort) on bus-based multiprocessor architectures like the SGI Power Series in which contention for the shared bus is the only possible bottleneck.
Reference: [Go83] <author> Goodman J.R., </author> <title> Using Cache Memory to Reduce Processor-Memory Traffic, </title> <booktitle> Proc. 10th Int. Symp. on Computer Architecture, </booktitle> <month> June </month> <year> 1983, </year> <pages> pp. 124-131. </pages>
Reference-contexts: The model we use is derived from the models already presented in [JoViCa90] and [VeLaZa88]. We describe it in detail below. The coherency protocol for data blocks is a variation on Goodman's <ref> [Go83] </ref> Write Once protocol. A data cache block can be in one of four states: Invalid The block does not contain valid information. Shared The block contains valid information that can also be in other caches. The values in all caches and in main memory are the same.
Reference: [HoVe85a] <author> Holliday M.A., </author> <title> Vernon M.K. A Generalized Timed Petri Net Model for Performance Analysis. </title> <booktitle> Proc. Int'l. Workshop on Timed Petri Nets, </booktitle> <address> Torino, Italy, </address> <month> July </month> <year> 1985. </year>
Reference: [HoVe85b] <author> Holliday M. A. and Vernon M.K. </author> <title> Exact Performance Estimates for Multiprocessor Memory and Bus Interference. </title> <type> Technical Report 594, </type> <institution> Comp. Sci. Dept., UW-Madison, </institution> <month> May </month> <year> 1985. </year>
Reference: [Ja88] <author> Jamieson L.H. </author> <title> Using Algorithm Characteristics to Evaluate Paral lel Architectures. Performance Evaluation of Supercomputers J.L. </title> <publisher> Mar-tin(editor), Elsevier Science Publishers B.V., </publisher> <year> 1988, </year> <month> pp.21-49. </month>
Reference: [JoViCa90] <author> Jog R., Vitale P.L., Callister J.R. </author> <title> Performance Evaluation of a Commercial Cache-Coherent Shared Memory Multiprocessor. </title> <booktitle> 1990 ACM SIGMETRICS Conference on Measurement and Modeling of mputer Systems, </booktitle> <month> May </month> <year> 1990, </year> <institution> Boulder, </institution> <address> Colorado, </address> <pages> pp. 173-182. </pages>
Reference-contexts: Although we can't evaluate the accuracy of the predictions for such large systems, at least the solution of the model is tractable. An extension of this MVA model was used to evaluate the performance of a commercial cache-coherent shared memory multiprocessor <ref> [JoViCa90] </ref>. This model includes delays due to bus and memory contention, as well as cache interference. It also predicts bus bandwidth requirements and utilizations for 2 the bus and memory controllers. By the time the paper was written, the model was partially validated against measurements of a working system. <p> The model we use is derived from the models already presented in <ref> [JoViCa90] </ref> and [VeLaZa88]. We describe it in detail below. The coherency protocol for data blocks is a variation on Goodman's [Go83] Write Once protocol. A data cache block can be in one of four states: Invalid The block does not contain valid information. <p> Following the approach of <ref> [JoViCa90] </ref>, other factors responsible for performance degradation, such as multi-cycle instructions, pipeline interlocks, branch penalties, and TLB misses, are aggregated in a single term, C 0 . <p> Since many common programs conform to a coarse-grain Single Program, Multiple Data idiom, this assumption is reasonable and close to reality. The more general case will be left for future research. We need to compute T ransCK, the mean delay per instruction due to cache interference. As in <ref> [JoViCa90] </ref>, T ransCK is computed as the product of the frequency of coherence checks and of the penalty for a cache coherence check plus an additional penalty in case of coherence hit. (5) T ransCK = fl (Relative f requence of coherence checks=instruction) time f or checks + f Cwb (penality <p> These (finally) depend on the total cycle time for each processor (R). A iterative solution of such sets of equations will converge to a fixed point, producing a numerical solution. This is the approach used in [VeLaZa88] and <ref> [JoViCa90] </ref>. Although it is easy to get numerical solutions, a closed-form analytic solution is preferable for the reasons cited in the Introduction above. By introducing a few reasonable assumptions, we try to break the cycle of dependencies and thus derive an analytical formula for R and w bus .
Reference: [LaZaGrSe84] <author> Lazowska E.D., Zahorjan J., Graham G.S., and Sevcik, K.C. </author> <title> Quantitative System Performance, Computer System Analysis Using Queueing Network Models, </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englwood Cliffs, N.J., </address> <year> 1984 </year>
Reference-contexts: Since performance is the only reason to use parallel systems, it is vital that programmers gain such understanding. Mean Value Analysis is a valuable modelling technique for computer system performance studies, but conventional techniques <ref> [LaZaGrSe84] </ref> for evaluating these models produce only numerical solutions. In this paper we present a closed-form approximate solution to a Mean Value Analysis model of a bus-based multiprocessor with coherent caches.
Reference: [MacD75] <author> MacDougall, M.H., </author> <title> Graph Models and Programs, Digital System Design Automation:Languages,Simulations and Data Base, </title> <type> 11 M.A.Breuer(ed), </type> <institution> Computer Science Press, Section 1.7, </institution> <year> 1975. </year>
Reference: [VeHo86] <author> Vernon, </author> <title> M.K. and Holliday M.A. Performance Analysis of Multipro cessor Cache Consistency Protocols Using Generalized Timed Petri Nets, </title> <booktitle> Proc. of Performance 86 and ACM SIGMETRICS 1986 Joint Conf. on Computer Performance Modeling, Measurement and Evaluation, </booktitle> <address> aleigh, N.C., </address> <month> May </month> <year> 1986, </year> <pages> pp 9-17. </pages>
Reference-contexts: All of these results were obtained in performance analysis. One of our goals is to use them to predict performance of specific programs. Holliday and Vernon [HoVe85a],[HoVe85b] introduced the Generalized Timed Petri Net (GTPN) model and later used it to evaluate the performance of several shared bus consistency protocols <ref> [VeHo86] </ref>. The GTPN model is relatively accurate, but the solution cost is high. Thus, it is not practical unless the state space is small. (In [VeHo86] it was applied on architectures with less than 10 processors.) Vernon et al.[VeLaZa88] defined a Mean Value Analysis (MVA) model that is more abstract and <p> and Vernon [HoVe85a],[HoVe85b] introduced the Generalized Timed Petri Net (GTPN) model and later used it to evaluate the performance of several shared bus consistency protocols <ref> [VeHo86] </ref>. The GTPN model is relatively accurate, but the solution cost is high. Thus, it is not practical unless the state space is small. (In [VeHo86] it was applied on architectures with less than 10 processors.) Vernon et al.[VeLaZa88] defined a Mean Value Analysis (MVA) model that is more abstract and easier to manipulate than the GTPN model, while still able to produce comparably detailed results.
Reference: [VeLaZa88] <author> Vernon, M.K.,Lazowska E.D.,Zahorjan J. </author> <title> An Accurate and Efficient Performance Analysis Technique for Multiprocessor Cache-Consistency Protocols, </title> <booktitle> Proc. 15th Annual Symposium on Computer Architecture, </booktitle> <address> Honolulu, HI., </address> <year> 1988, </year> <pages> pp 308-315. </pages>
Reference-contexts: When an iterative approximation technique is used with the MVA model, the results of the two models differ by at most 3% in the case of the cache consistency protocol evaluated in <ref> [VeLaZa88] </ref>. The technique is efficient enough to be able to solve for system configurations with up to 100 processors. Although we can't evaluate the accuracy of the predictions for such large systems, at least the solution of the model is tractable. <p> The model we use is derived from the models already presented in [JoViCa90] and <ref> [VeLaZa88] </ref>. We describe it in detail below. The coherency protocol for data blocks is a variation on Goodman's [Go83] Write Once protocol. A data cache block can be in one of four states: Invalid The block does not contain valid information. <p> We compute the mean values related to the bus. The main goal is to compute w bus . We consider that the queue at the bus is composed of the queues for different types of request. Using the approach of <ref> [VeLaZa88] </ref> we have: (5.1) Q r = N1 (5.2) U r = N (5.3) p Busy bus;r = U r (U r =N) 1 (U=N) P r [(Q r p Busy bus;r )T r + p Busy bus;r T r =2] where Q r is the mean queue length for the <p> These (finally) depend on the total cycle time for each processor (R). A iterative solution of such sets of equations will converge to a fixed point, producing a numerical solution. This is the approach used in <ref> [VeLaZa88] </ref> and [JoViCa90]. Although it is easy to get numerical solutions, a closed-form analytic solution is preferable for the reasons cited in the Introduction above.
Reference: [WeGu89] <author> Weber W.D., Gupta A. </author> <title> Analysis of Cache Invalidation Patterns in Multiprocessors. </title> <booktitle> Proc. 3rd Conf. Architectural Support for Programming Languages and Operating Systems, </booktitle> <month> Apr. </month> <year> 1989, </year> <pages> pp 243-256. 12 </pages>
Reference-contexts: If tag memories are duplicated, then only those processors that have an affected cache block can be stalled by a coherency operation. Weber and Gupta <ref> [WeGu89] </ref> empirically determined that in practice the average number of copies of an affected block is less than two. We consider the case in which fl = N 1.
References-found: 12

