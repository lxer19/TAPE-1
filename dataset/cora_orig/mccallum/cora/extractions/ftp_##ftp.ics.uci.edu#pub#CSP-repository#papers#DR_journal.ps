URL: ftp://ftp.ics.uci.edu/pub/CSP-repository/papers/DR_journal.ps
Refering-URL: 
Root-URL: 
Email: dechter@ics.uci.edu, irinar@ics.uci.edu  
Title: Directional Resolution: The Davis-Putnam Procedure, Revisited  
Author: Rina Dechter and Irina Rish 
Keyword: propositional satisfiability, computational complexity, resolution, back tracking, graph representation of a propositional theory, induced width.  
Note: This work was partially supported by NSF grant IRI-9157636, by Air Force Office of Scientific Research grant AFOSR 900136, by Toshiba of America, and by a Xerox grant.  
Address: Irvine  
Affiliation: Information and Computer Science University of California,  
Abstract: The paper presents an algorithm called directional resolution, a variation on the original Davis-Putnam algorithm, and analyzes its worst-case behavior as a function of the topological structure of propositional theories. The concepts of induced width and diversity are shown to play a key role in bounding the complexity of the procedure. The importance of our analysis lies in highlighting structure-based tractable classes of satisfiability and in providing theoretical guarantees on the time and space complexity of the algorithm. Contrary to previous assessments, we show that for many theories directional resolution could be a surprisingly effective procedure. Our empirical tests confirm theoretical prediction, showing that on problems with a special structure, namely k-tree embeddings (e.g., chains, (k,m)-trees), directional resolution greatly outperforms one of the most effective satisfiability algorithms known to date, the popular Davis-Putnam procedure. Furthermore, combining a bounded version of directional resolution with the Davis-Putnam procedure results in an algorithm superior to either component by itself. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Arnborg, S., Corneil, D.G., and Proskurowski, A., </author> <title> Complexity of Finding Embedding in a k-tree, </title> <journal> Journal of SIAM, Algebraic Discrete Methods, </journal> <volume> 8(2) </volume> <month> 177-184 </month> <year> (1987). </year>
Reference-contexts: It is known that the induced width of a graph embedded in a k-tree is bounded by k <ref> [1] </ref>. Here is a recursive definition of k-trees. Definition 3: (k-trees) 1. A clique of size k (complete graph with k vertices) is a k-tree. 2. <p> is a formula whose interaction graph can be embedded in a k-tree, then there is an ordering d such that the time complexity of algorithm DR on that ordering is O (n 9 k ). 2 Finding an ordering that yields the smallest induced width of a graph is NP-hard <ref> [1] </ref>. However, any ordering d yields an easily computed bound, w fl (d). Consequently, when given a theory and its interaction graph, we will try to find an ordering that yields the smallest width possible. Several heuristic orderings are available (see [2]). <p> Each 2-cnf clause contains variables from two consecutive subtheories in the chain (see Figure 7). Similarly, we connected sequences of independent theories into a tree structure. Both the chains and the tree structures described above belong to a class of random embeddings in k-trees <ref> [1] </ref>. We implemented a generator, called (k; m)-trees, which generalizes the idea of k-trees. A (k; m)-tree is a tree of cliques, each having (k+m) nodes, where k is the size of intersection between each two neighboring cliques. Therefore, conventional k-trees are (k; 1)-trees according to our definition.
Reference: [2] <author> Bertele, U. and Brioschi, F., </author> <title> Nonserial Dynamic Programming, </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1972. </year>
Reference-contexts: However, any ordering d yields an easily computed bound, w fl (d). Consequently, when given a theory and its interaction graph, we will try to find an ordering that yields the smallest width possible. Several heuristic orderings are available (see <ref> [2] </ref>). Important special tractable classes are those having w fl = 1 (namely, the interaction graph is a tree) and those having w fl = 2, (that is, series parallel networks). These classes can be recognized in linear time. <p> variables, 1100-1400 clauses) 1100 36 193.7 6111 4.1 23.8 568 290 1300 2 95.1 2589 8.4 0.1 0 390 amount of dead ends if processed by DP-backtracking alone. 7 Related work and conclusions Directional resolution belongs to a family of elimination algorithms first analyzed for optimization tasks in dynamic programming <ref> [2] </ref> and later used in constraint satisfaction [17, 7] and in belief networks [19]. The complexity of all such elimination algorithms is a function of the induced width w fl of the undirected graph characteristic of each problem instance.
Reference: [3] <author> Ben-Eliyahu, R., and Dechter, R., </author> <title> Default Logic, Propositional Logic and Constraints, </title> <booktitle> in Proceedings of the National Conference on Artificial Intelligence (AAAI-91), </booktitle> <address> Anaheim, CA, </address> <month> July </month> <year> 1991, </year> <pages> pp. 379-385. </pages>
Reference-contexts: Since propositional satisfiability is a special case of constraint satisfaction, the induced-width could be obtained by mapping a propositional formula into the relational framework of a constraint satisfaction problem (see <ref> [3] </ref>) and then applying adaptive consistency, the elimination algorithm tailored for constraint satisfaction problems [7, 17]. We have recently shown, however, that the kind of pairwise elimination operation performed by directional resolution is more effective.
Reference: [4] <author> Crawford, J.M. and Auton, L.D., </author> <title> Experimental Results on the Cross-over Point in Sat-isfiability Problems, </title> <booktitle> in Proceedings of the National Conference on Artificial Intelligence (AAAI-93) , July 1993, </booktitle> <pages> pp. 21-27. </pages>
Reference-contexts: The DP-backtracking implemented here is a version of the Davis-Putnam procedure (see in order to increase space efficiency. The algorithm is also augmented with the 2-literal clause heuristic proposed in <ref> [4] </ref>. This heuristic suggests instantiating next a variable that would cause the largest number of unit propagations, where the number of possible unit propagations is approximated by the number of 2-literal clauses in which the variable appears. The augmented algorithm significantly outperforms DP-backtracking without this heuristic [4]. <p> clause heuristic proposed in <ref> [4] </ref>. This heuristic suggests instantiating next a variable that would cause the largest number of unit propagations, where the number of possible unit propagations is approximated by the number of 2-literal clauses in which the variable appears. The augmented algorithm significantly outperforms DP-backtracking without this heuristic [4]. Algorithm DR is implemented as discussed in Section 3, followed by DP-backtracking without the 2-literal clause heuristic so that the order of variables is fixed. <p> As was shown for uniform 3-cnfs <ref> [16, 4] </ref>, the percentage of satisfiable problems and the median of the problems' complexity depend on the clauses/variables ratio. When the ratio is low, the problems are underconstrained, and generally are easily solved by DP-backtracking. <p> We also ran a small set of experiments with the actual code of tableau <ref> [4] </ref>, which implements the Davis-Putnam procedure with various heuristics. Its behavior on 3-cnf chain problems was similar to the behavior of our implementation, although some problem instances that were hard for DP-backtracking were easy for tableau. However, there was a subset of instances that were extremely difficult for both algorithms.
Reference: [5] <author> Davis, M., Logemann, G., and Loveland, D., </author> <title> A Machine Program for Theorem Proving, </title> <journal> Communications of the ACM, </journal> <volume> 5 </volume> <month> 394-397 </month> <year> (1962). </year>
Reference-contexts: This happened, in our view, because the algorithm was immediately overshadowed by a competitor with nearly the same name: the Davis-Putnam Procedure. This competing algorithm, proposed in 1962 by Davis, Logemann, and Loveland <ref> [5] </ref>, searches through the space of possible truth assignments while performing unit resolution until quiesience at each step. We will refer to the first algorithm as DP-elimination and to the second as DP-backtracking. The latter was presented in [5] as a minor syntactic change to the first: the elimination rule (rule <p> This competing algorithm, proposed in 1962 by Davis, Logemann, and Loveland <ref> [5] </ref>, searches through the space of possible truth assignments while performing unit resolution until quiesience at each step. We will refer to the first algorithm as DP-elimination and to the second as DP-backtracking. The latter was presented in [5] as a minor syntactic change to the first: the elimination rule (rule III in [6]) in DP-elimination was replaced by the splitting rule (rule III' in [5]) in order to avoid the memory explosion encountered when empirically testing DP-elimination. <p> We will refer to the first algorithm as DP-elimination and to the second as DP-backtracking. The latter was presented in <ref> [5] </ref> as a minor syntactic change to the first: the elimination rule (rule III in [6]) in DP-elimination was replaced by the splitting rule (rule III' in [5]) in order to avoid the memory explosion encountered when empirically testing DP-elimination. By refraining from an explicit analysis of this exchange (beyond the short comment on memory explosion), the authors of [5] may have left the impression that the two algorithms are basically identical. <p> the elimination rule (rule III in [6]) in DP-elimination was replaced by the splitting rule (rule III' in <ref> [5] </ref>) in order to avoid the memory explosion encountered when empirically testing DP-elimination. By refraining from an explicit analysis of this exchange (beyond the short comment on memory explosion), the authors of [5] may have left the impression that the two algorithms are basically identical. Indeed, from then on, most work quotes the backtracking version [15, 18], wrongly suggesting that this is the algorithm presented in [6]. <p> Third, we introduce a new parameter, called diversity, that gives rise to new tractable classes. On the empirical side, we qualify prior empirical tests <ref> [5] </ref> by showing that for uniform random propositional theories, DP-backtracking outperforms DP-elimination by far. However, for a class of instances having a special structure (embeddings in k-trees, e.g., chains and (k,m)-trees), DP-elimination outperforms DP-backtracking by several orders of magnitude.
Reference: [6] <author> Davis, M., and Putnam, H., </author> <title> A Computing Procedure for Quantification Theory, </title> <journal> Journal of the ACM, </journal> <volume> 7 </volume> <month> 201-215 </month> <year> (1960). </year>
Reference-contexts: 1 Introduction In 1960, Davis and Putnam presented a resolution algorithm for determining propositional satisfiability, i.e., the Davis-Putnam algorithm <ref> [6] </ref>. They proved that a restricted amount of resolution performed systematically along some ordering of the variables in a propositional theory is sufficient for deciding satisfiability. <p> We will refer to the first algorithm as DP-elimination and to the second as DP-backtracking. The latter was presented in [5] as a minor syntactic change to the first: the elimination rule (rule III in <ref> [6] </ref>) in DP-elimination was replaced by the splitting rule (rule III' in [5]) in order to avoid the memory explosion encountered when empirically testing DP-elimination. <p> Indeed, from then on, most work quotes the backtracking version [15, 18], wrongly suggesting that this is the algorithm presented in <ref> [6] </ref>. In this paper, we wish to "revive" the DP-elimination algorithm by studying its virtues theoretically and by subjecting it to extensive empirical testing. First, we show that, in addition to determining satisfiability, the algorithm generates an equivalent theory that facilitates model generation and query processing. <p> A clause is positive if it contains only positive literals and is negative if it contains negative literals only. A k-cnf formula is one whose clauses are all of length k or less. 3 DP-elimination Directional resolution DP-elimination <ref> [6] </ref> is an ordering-based restricted resolution that can be described as follows. Given an arbitrary ordering of the propositional variables, we assign to each clause the index of the highest ordered literal in that clause. Then we resolve only clauses having the same index, and only on their highest literal. <p> Such a clause, if it exists, would not have allowed the partial model q 1 ; :::; q i , thus leading to a contradiction. 2 Corollary 1: <ref> [6] </ref> A theory has a non-empty directional extension iff it is satisfiable. 2 Clearly, the effectiveness of algorithm DR both for satisfiability and for subsequent query processing depends on the the size of its output theory E d (').
Reference: [7] <author> Dechter, R., and Pearl, J., </author> <title> Network-based Heuristics for Constraint Satisfaction Problems, </title> <journal> Artificial Intelligence, </journal> <volume> 34 </volume> <month> 1-38 </month> <year> (1987). </year>
Reference-contexts: Consequently, it may be viewed as a knowledge-compilation algorithm. Second, we offset the known worst-case exponential complexities [12, 14] by showing the tractability of DP-elimination for many known tractable classes of satisfiability and constraint satisfaction problems (e.g., 2-cnfs, causal theories, and theories having a bounded induced width <ref> [7, 8] </ref>). Third, we introduce a new parameter, called diversity, that gives rise to new tractable classes. On the empirical side, we qualify prior empirical tests [5] by showing that for uniform random propositional theories, DP-backtracking outperforms DP-elimination by far. <p> The 6 size of this parent set is the width of A relative to d. The width w (d) of an ordering d is the maximum width of nodes along the ordering, and the width w of a graph is the minimal width of all its orderings <ref> [11, 7] </ref>. <p> The algorithm records clauses of size k or less when k is a constant. Consequently, its complexity is polynomial in k. Algorithm BDR parallels algorithms for directional k-consistency in solving constraint satisfaction problems <ref> [7] </ref>. 6 Experimental evaluation In this section, we report experimental results demonstrating advantages and drawbacks of the algorithms DR, BDR, and DP-backtracking on problems with different structures. <p> 4.1 23.8 568 290 1300 2 95.1 2589 8.4 0.1 0 390 amount of dead ends if processed by DP-backtracking alone. 7 Related work and conclusions Directional resolution belongs to a family of elimination algorithms first analyzed for optimization tasks in dynamic programming [2] and later used in constraint satisfaction <ref> [17, 7] </ref> and in belief networks [19]. The complexity of all such elimination algorithms is a function of the induced width w fl of the undirected graph characteristic of each problem instance. <p> Since propositional satisfiability is a special case of constraint satisfaction, the induced-width could be obtained by mapping a propositional formula into the relational framework of a constraint satisfaction problem (see [3]) and then applying adaptive consistency, the elimination algorithm tailored for constraint satisfaction problems <ref> [7, 17] </ref>. We have recently shown, however, that the kind of pairwise elimination operation performed by directional resolution is more effective. And, while it can be extended to any row-convex constraint problem [20] or to every 1-tight relation [21], pairwise elimination cannot decide consistency for arbitrary multi-valued networks of relations.
Reference: [8] <author> Dechter, R., and Pearl, J., </author> <title> Directed Constraint Networks: A Relational Framework for Causal Models, </title> <booktitle> in Proceedings of the Twelfth International Joint Conference on Artificial Intelligence (IJCAI-91), </booktitle> <address> Sidney, Australia, </address> <month> August </month> <year> 1991, </year> <pages> pp. 1164-1170. </pages>
Reference-contexts: Consequently, it may be viewed as a knowledge-compilation algorithm. Second, we offset the known worst-case exponential complexities [12, 14] by showing the tractability of DP-elimination for many known tractable classes of satisfiability and constraint satisfaction problems (e.g., 2-cnfs, causal theories, and theories having a bounded induced width <ref> [7, 8] </ref>). Third, we introduce a new parameter, called diversity, that gives rise to new tractable classes. On the empirical side, we qualify prior empirical tests [5] by showing that for uniform random propositional theories, DP-backtracking outperforms DP-elimination by far. <p> Note that the diversity of theories in Example 3 along the specified ordering is 1. Zero-diversity theories generalize the notion of causal theories defined for general networks of multivalued relations <ref> [8] </ref>. According to the definition in [8], theories specified in the form of cnfs will correspond to causal theories if there is an ordering of the symbols such that each bucket contains a single clause and consequently the ordering has zero diversity. <p> Note that the diversity of theories in Example 3 along the specified ordering is 1. Zero-diversity theories generalize the notion of causal theories defined for general networks of multivalued relations <ref> [8] </ref>. According to the definition in [8], theories specified in the form of cnfs will correspond to causal theories if there is an ordering of the symbols such that each bucket contains a single clause and consequently the ordering has zero diversity.
Reference: [9] <author> Dechter, R., </author> <title> Enhancement Schemes for Constraint Processing: Backjumping, Learning and Cutset Decomposition, </title> <journal> Artificial Intelligence, </journal> <volume> 41 </volume> <month> 273-312 </month> <year> (1990). </year>
Reference-contexts: Min-diversity and min-width orderings do not preclude such a situation. Thus, not knowing the structure hurts DP-backtracking. Choosing the right ordering would help but is difficult to accomplish without some preprocessing. Variants of backtracking that are capable of exploiting the structure such as backjumping <ref> [13, 9] </ref>, would avoid such useless re-instantiation of variables. Experiments with backjumping on the instances in Table 3 confirm that it outperforms DP-backtracking by far (Figure 11). Similar experiments with BDR-DP reveal that all 3-cnf chain instances that are hard for DP-backtracking are solved easily by BDR-DP.
Reference: [10] <author> Even, S., Itai, A., and Shamir, A., </author> <title> On the Complexity of Timetable and Multi-Commodity Flow, </title> <journal> SIAM Journal on Computing, </journal> <volume> 5 </volume> <month> 691-703 </month> <year> (1976). </year>
Reference-contexts: Clearly, this algorithm is not the most effective one for satisfiability of 2-cnfs. Satisfiability for these theories can be decided in linear time <ref> [10] </ref>. However, as noted earlier, algorithm 5 A C E B D AB E A, B, C, D, E; (c) the induced graph of ' 2 DR achieves more than satisfiability: it compiles a theory that allows model generation in linear time.
Reference: [11] <author> Freuder, </author> <title> E.C., A Sufficient Condition for Backtrack-free Search, </title> <journal> Journal of the ACM, </journal> <volume> 29 </volume> <month> 24-32 </month> <year> (1982). </year>
Reference-contexts: The 6 size of this parent set is the width of A relative to d. The width w (d) of an ordering d is the maximum width of nodes along the ordering, and the width w of a graph is the minimal width of all its orderings <ref> [11, 7] </ref>.
Reference: [12] <author> Galil, Z., </author> <title> On the Complexity of Regular Resolution and the Davis-Putnam Procedure, </title> <journal> Theoretical Computer Science, </journal> <volume> 4 </volume> <month> 23-46 </month> <year> (1977). </year>
Reference-contexts: They proved that a restricted amount of resolution performed systematically along some ordering of the variables in a propositional theory is sufficient for deciding satisfiability. This algorithm, in its original form, has received limited attention, and analyses of its performance have emphasized its worst-case exponential behavior <ref> [12, 14] </ref>, while neglecting the algorithm's virtues. This happened, in our view, because the algorithm was immediately overshadowed by a competitor with nearly the same name: the Davis-Putnam Procedure. <p> First, we show that, in addition to determining satisfiability, the algorithm generates an equivalent theory that facilitates model generation and query processing. Consequently, it may be viewed as a knowledge-compilation algorithm. Second, we offset the known worst-case exponential complexities <ref> [12, 14] </ref> by showing the tractability of DP-elimination for many known tractable classes of satisfiability and constraint satisfaction problems (e.g., 2-cnfs, causal theories, and theories having a bounded induced width [7, 8]). Third, we introduce a new parameter, called diversity, that gives rise to new tractable classes.
Reference: [13] <author> Gashnig, J., </author> <title> Performance Measurement and Analysis of Certain Search Algorithms, </title> <type> Technical Report CMU-CS-79-124, </type> <institution> Carnegie Mellon University, </institution> <year> 1979. </year>
Reference-contexts: Min-diversity and min-width orderings do not preclude such a situation. Thus, not knowing the structure hurts DP-backtracking. Choosing the right ordering would help but is difficult to accomplish without some preprocessing. Variants of backtracking that are capable of exploiting the structure such as backjumping <ref> [13, 9] </ref>, would avoid such useless re-instantiation of variables. Experiments with backjumping on the instances in Table 3 confirm that it outperforms DP-backtracking by far (Figure 11). Similar experiments with BDR-DP reveal that all 3-cnf chain instances that are hard for DP-backtracking are solved easily by BDR-DP.
Reference: [14] <author> Goerdt, A., </author> <title> Davis-Putnam Resolution versus Unrestricted Resolution, </title> <journal> Annals of Mathematics and Artificial Intelligence, </journal> <volume> 6 </volume> <month> 169-184 </month> <year> (1992). </year> <month> 24 </month>
Reference-contexts: They proved that a restricted amount of resolution performed systematically along some ordering of the variables in a propositional theory is sufficient for deciding satisfiability. This algorithm, in its original form, has received limited attention, and analyses of its performance have emphasized its worst-case exponential behavior <ref> [12, 14] </ref>, while neglecting the algorithm's virtues. This happened, in our view, because the algorithm was immediately overshadowed by a competitor with nearly the same name: the Davis-Putnam Procedure. <p> First, we show that, in addition to determining satisfiability, the algorithm generates an equivalent theory that facilitates model generation and query processing. Consequently, it may be viewed as a knowledge-compilation algorithm. Second, we offset the known worst-case exponential complexities <ref> [12, 14] </ref> by showing the tractability of DP-elimination for many known tractable classes of satisfiability and constraint satisfaction problems (e.g., 2-cnfs, causal theories, and theories having a bounded induced width [7, 8]). Third, we introduce a new parameter, called diversity, that gives rise to new tractable classes.
Reference: [15] <author> Goldberg, A., Purdom P., and Brown, C., </author> <title> Average Time Analysis of Simplified Davis--Putnam Procedures, </title> <journal> Information Processing Letters, </journal> <volume> 15 </volume> <month> 72-75 </month> <year> (1982). </year>
Reference-contexts: By refraining from an explicit analysis of this exchange (beyond the short comment on memory explosion), the authors of [5] may have left the impression that the two algorithms are basically identical. Indeed, from then on, most work quotes the backtracking version <ref> [15, 18] </ref>, wrongly suggesting that this is the algorithm presented in [6]. In this paper, we wish to "revive" the DP-elimination algorithm by studying its virtues theoretically and by subjecting it to extensive empirical testing.
Reference: [16] <author> Mitchell, D., Selman, B., and Levesque, H., </author> <title> Hard and Easy Distributions of SAT Problems, </title> <booktitle> in Proceedings of the National Conference on Artificial Intelligence (AAAI-92), </booktitle> <address> San Jose, CA, </address> <month> July </month> <year> 1992, </year> <pages> pp. 459-465. </pages>
Reference-contexts: Min-diversity ordering was described in section 4.2. To test the implementations on problems with different structures, several random generators were used. Uniform k-cnfs were obtained using the generator proposed in <ref> [16] </ref>. <p> As was shown for uniform 3-cnfs <ref> [16, 4] </ref>, the percentage of satisfiable problems and the median of the problems' complexity depend on the clauses/variables ratio. When the ratio is low, the problems are underconstrained, and generally are easily solved by DP-backtracking.
Reference: [17] <author> Seidel, R., </author> <title> A New Method for Solving Constraint Satisfaction Problems, </title> <booktitle> in Proceedings of the Seventh International Joint Conference on Artificial Intelligence (IJCAI-81), </booktitle> <address> Vancouver, Canada, </address> <month> August </month> <year> 1981, </year> <pages> pp. 338-342. </pages>
Reference-contexts: 4.1 23.8 568 290 1300 2 95.1 2589 8.4 0.1 0 390 amount of dead ends if processed by DP-backtracking alone. 7 Related work and conclusions Directional resolution belongs to a family of elimination algorithms first analyzed for optimization tasks in dynamic programming [2] and later used in constraint satisfaction <ref> [17, 7] </ref> and in belief networks [19]. The complexity of all such elimination algorithms is a function of the induced width w fl of the undirected graph characteristic of each problem instance. <p> Since propositional satisfiability is a special case of constraint satisfaction, the induced-width could be obtained by mapping a propositional formula into the relational framework of a constraint satisfaction problem (see [3]) and then applying adaptive consistency, the elimination algorithm tailored for constraint satisfaction problems <ref> [7, 17] </ref>. We have recently shown, however, that the kind of pairwise elimination operation performed by directional resolution is more effective. And, while it can be extended to any row-convex constraint problem [20] or to every 1-tight relation [21], pairwise elimination cannot decide consistency for arbitrary multi-valued networks of relations.
Reference: [18] <author> Selman, B., Levesque, H., and Mitchell, D., </author> <title> A New Method for Solving Hard Satis-fiability Problems, </title> <booktitle> in Proceedings of the National Conference on Artificial Intelligence (AAAI-92), </booktitle> <address> San Jose, CA, </address> <month> July </month> <year> 1992, </year> <pages> pp. 440-446. </pages>
Reference-contexts: By refraining from an explicit analysis of this exchange (beyond the short comment on memory explosion), the authors of [5] may have left the impression that the two algorithms are basically identical. Indeed, from then on, most work quotes the backtracking version <ref> [15, 18] </ref>, wrongly suggesting that this is the algorithm presented in [6]. In this paper, we wish to "revive" the DP-elimination algorithm by studying its virtues theoretically and by subjecting it to extensive empirical testing.
Reference: [19] <author> Lauritzen, S.L., and Spigelholter, </author> <title> D.J., Local Computations with Probabilities on Graphical Structures and Their Applications to Expert Systems, </title> <journal> Journal of the Royal Statistical Society, Series B, </journal> <volume> 5 </volume> <month> 65-74 </month> <year> (1988). </year>
Reference-contexts: 95.1 2589 8.4 0.1 0 390 amount of dead ends if processed by DP-backtracking alone. 7 Related work and conclusions Directional resolution belongs to a family of elimination algorithms first analyzed for optimization tasks in dynamic programming [2] and later used in constraint satisfaction [17, 7] and in belief networks <ref> [19] </ref>. The complexity of all such elimination algorithms is a function of the induced width w fl of the undirected graph characteristic of each problem instance. Although it is known that determining the w fl of an arbitrary graph is NP-hard, useful heuristics for bounding w fl are available.
Reference: [20] <author> Van Beek, P., and Dechter, R., </author> <title> On the Minimality and Decomposability of Row-Convex Constraint Networks, </title> <journal> Journal of the ACM, </journal> <note> In press, </note> <year> 1995. </year>
Reference-contexts: We have recently shown, however, that the kind of pairwise elimination operation performed by directional resolution is more effective. And, while it can be extended to any row-convex constraint problem <ref> [20] </ref> or to every 1-tight relation [21], pairwise elimination cannot decide consistency for arbitrary multi-valued networks of relations. This paper makes three main contributions.
Reference: [21] <author> Van Beek, P., and Dechter, R., </author> <title> Constraint Tightness versus Global Consistency, </title> <note> Novem-ber 1994. Submitted manuscript. 25 </note>
Reference-contexts: We have recently shown, however, that the kind of pairwise elimination operation performed by directional resolution is more effective. And, while it can be extended to any row-convex constraint problem [20] or to every 1-tight relation <ref> [21] </ref>, pairwise elimination cannot decide consistency for arbitrary multi-valued networks of relations. This paper makes three main contributions.
References-found: 21

