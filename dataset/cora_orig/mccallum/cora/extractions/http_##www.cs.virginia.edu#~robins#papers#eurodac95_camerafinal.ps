URL: http://www.cs.virginia.edu/~robins/papers/eurodac95_camerafinal.ps
Refering-URL: http://www.cs.virginia.edu/~robins/publications.html
Root-URL: http://www.cs.virginia.edu
Title: Performance-Oriented Placement and Routing for Field-Programmable Gate Arrays  
Author: Michael J. Alexander, James P. Cohoon, Joseph L. Ganley and Gabriel Robins 
Address: Charlottesville, VA 22903-2442  San Jose, CA 95134  
Affiliation: Department of Computer Science, University of Virginia,  Cadence Design Systems, Inc.,  
Abstract: This paper presents a performance-oriented placement and routing tool for field-programmable gate arrays. Using recursive geometric partitioning for simultaneous placement and global routing, and a graph-based strategy for detailed routing, our tool optimizes source-sink pathlengths, channel width and total wire-length. Our results compare favorably with other FPGA layout tools, as measured by the maximum channel width required to place and route a number of industrial benchmarks. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. J. Alexander, J. P. Cohoon, J. L. Ganley, and G. Robins, </author> <title> An Architecture-Independent Approach to FPGA Routing Based on Multi-Weighted Graphs, </title> <booktitle> in Proc. European Design Automation Conf., </booktitle> <address> Grenoble, France, </address> <month> September </month> <year> 1994, </year> <pages> pp. 259-264. </pages>
Reference-contexts: To increase FPGA performance, partitioning and technology mapping have been extensively studied [7, 12, 18, 24]. However, the observation that circuit performance is impacted more by routing delays rather than by device delays [4, 17] has focused recent attention on routing <ref> [1, 2, 6, 9, 21, 22, 31] </ref>. In this paper we present an FPGA Placement and Routing (FPR) tool. FPR is based on a recursive geometric strategy for simultaneous placement and global routing, followed by a graph-based detailed-routing phase. FPR heuristically minimizes both wirelength and source-sink pathlengths. <p> This potential drawback is effectively ameliorated using the greedy strategy described below. Our detailed-routing algorithm is based on combining a greedy, iterated heuristic [13, 16] with the KMB algorithm; we refer to this hybrid method as the Iterated-KMB (IKMB) algorithm <ref> [1] </ref>. Given a routing graph G = (V; E), a net N V , and a set S of potential Steiner nodes, we define the savings of S with respect to N as KMB G (N; S) = KMB G (N ) KMB G (N [ S).
Reference: [2] <author> M. J. Alexander and G. Robins, </author> <title> New Performance-Driven FPGA Routing Algorithms, </title> <booktitle> in Proc. ACM/IEEE Design Automation Conf., </booktitle> <address> San Francisco, CA, </address> <month> June </month> <year> 1995, </year> <pages> pp. 562-567. </pages>
Reference-contexts: To increase FPGA performance, partitioning and technology mapping have been extensively studied [7, 12, 18, 24]. However, the observation that circuit performance is impacted more by routing delays rather than by device delays [4, 17] has focused recent attention on routing <ref> [1, 2, 6, 9, 21, 22, 31] </ref>. In this paper we present an FPGA Placement and Routing (FPR) tool. FPR is based on a recursive geometric strategy for simultaneous placement and global routing, followed by a graph-based detailed-routing phase. FPR heuristically minimizes both wirelength and source-sink pathlengths.
Reference: [3] <author> S. Bapat and J. P. Cohoon, </author> <title> A Parallel VLSI Circuit Layout Methodology, </title> <booktitle> in Proc. IEEE Intl. Conf. VLSI Design, </booktitle> <month> January </month> <year> 1993, </year> <pages> pp. 236-241. </pages>
Reference-contexts: Setting m = n = 3 yields the basic 3 fi 3 partitioning template that is used in our implementation (Figure 2). Thumbnail partitioning is a generalization of sharp partitioning <ref> [3] </ref>, which in turn is a generalization of quadrisection [27]. The overall strategy consists of a placement and global-routing phase, followed by a detailed-routing phase. <p> Each such switch block is then conceptually added as a new "virtual" pin in the net. The portion of each net within each region of the partitioning template is then passed on to a lower level of the recursion (this is similar to the virtual terminal <ref> [3] </ref> and terminal propagation [8] techniques). Thus, the global routing computed for a net corresponds to the topology of its thumbnail. The assignment of nets to switch blocks is accomplished in a manner similar to [26].
Reference: [4] <author> N. B. Bhat and D. D. Hill, </author> <title> Routable Technology Mapping for LUT FPGAs, </title> <booktitle> in Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <year> 1992, </year> <pages> pp. 95-98. </pages>
Reference-contexts: This penalty is of primary concern to designers and users alike [28]. To increase FPGA performance, partitioning and technology mapping have been extensively studied [7, 12, 18, 24]. However, the observation that circuit performance is impacted more by routing delays rather than by device delays <ref> [4, 17] </ref> has focused recent attention on routing [1, 2, 6, 9, 21, 22, 31]. In this paper we present an FPGA Placement and Routing (FPR) tool. FPR is based on a recursive geometric strategy for simultaneous placement and global routing, followed by a graph-based detailed-routing phase.
Reference: [5] <author> S. D. Brown, R. J. Francis, J. Rose, and Z. G. Vranesic, </author> <title> Field-Programmable Gate Arrays, </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1992. </year>
Reference-contexts: 1 Introduction Field-programmable gate arrays, or FPGAs, afford designers a versatile and inexpensive way to implement and test VLSI designs <ref> [5, 10] </ref>. FPGAs are available in a number of styles and configurations [29]. One of the most common FPGA architectures consists of symmetrical arrays of user-configurable logic blocks interconnected by a set of programmable routing resources [32] (Figure 1). <p> Two FPGA architectures, corresponding to Xilinx 3000-series and 4000-series parts, were modeled <ref> [5, 32] </ref>; these architectures are identical to the ones used by CGE [6], SEGA [22] and GBP [31], respectively.
Reference: [6] <author> S. D. Brown, J. Rose, and Z. G. Vranesic, </author> <title> A Detailed Router for Field-Programmable Gate Arrays, </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 11 (1992), </volume> <pages> pp. 620-628. </pages>
Reference-contexts: To increase FPGA performance, partitioning and technology mapping have been extensively studied [7, 12, 18, 24]. However, the observation that circuit performance is impacted more by routing delays rather than by device delays [4, 17] has focused recent attention on routing <ref> [1, 2, 6, 9, 21, 22, 31] </ref>. In this paper we present an FPGA Placement and Routing (FPR) tool. FPR is based on a recursive geometric strategy for simultaneous placement and global routing, followed by a graph-based detailed-routing phase. FPR heuristically minimizes both wirelength and source-sink pathlengths. <p> Two FPGA architectures, corresponding to Xilinx 3000-series and 4000-series parts, were modeled [5, 32]; these architectures are identical to the ones used by CGE <ref> [6] </ref>, SEGA [22] and GBP [31], respectively. We compared the performance of these tools on fourteen large benchmark circuits: the suite of five 3000-series benchmarks used by [6], and the suite of nine 4000-series benchmarks used by [22] and [31]. <p> FPGA architectures, corresponding to Xilinx 3000-series and 4000-series parts, were modeled [5, 32]; these architectures are identical to the ones used by CGE <ref> [6] </ref>, SEGA [22] and GBP [31], respectively. We compared the performance of these tools on fourteen large benchmark circuits: the suite of five 3000-series benchmarks used by [6], and the suite of nine 4000-series benchmarks used by [22] and [31]. The 3000-series benchmarks were routed on FPGAs with switch-block flexibility F s = 6 and connection flexibility F c = d0:6 W e, where W is the the channel width. <p> A common objective in FPGA physical design is to minimize maximum channel width. Table 1 shows the maximum channel widths of actual complete placement and routing solutions produced by FPR; these compare favorably with CGE <ref> [6] </ref> for the 3000-series benchmarks, and with SEGA [22] and GBP [31] for the 4000-series benchmarks.
Reference: [7] <author> K. C. Chen, J. Cong, Y. Ding, A. B. Kahng, and P. Trajmar, DAG-Map: </author> <title> Graph-Based FPGA Technology Mapping for Delay Optimization, </title> <booktitle> IEEE Design & Test of Computers, 9 (1992), </booktitle> <pages> pp. 7-20. </pages>
Reference-contexts: FPGA reprogrammability is achieved at the expense of performance, i.e., long signal delays through the reconfigurable routing resources. This penalty is of primary concern to designers and users alike [28]. To increase FPGA performance, partitioning and technology mapping have been extensively studied <ref> [7, 12, 18, 24] </ref>. However, the observation that circuit performance is impacted more by routing delays rather than by device delays [4, 17] has focused recent attention on routing [1, 2, 6, 9, 21, 22, 31]. In this paper we present an FPGA Placement and Routing (FPR) tool.
Reference: [8] <author> A. E. Dunlop and B. W. Kernighan, </author> <title> A Procedure for Placement of Standard-Cell VLSI Circuits, </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 4 (1985), </volume> <pages> pp. 92-98. </pages>
Reference-contexts: The portion of each net within each region of the partitioning template is then passed on to a lower level of the recursion (this is similar to the virtual terminal [3] and terminal propagation <ref> [8] </ref> techniques). Thus, the global routing computed for a net corresponds to the topology of its thumbnail. The assignment of nets to switch blocks is accomplished in a manner similar to [26].
Reference: [9] <author> J. Frankle, </author> <title> Iterative and Adaptive Slack Allocation for Performance-driven Layout and FPGA Routing, </title> <booktitle> in Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1992, </year> <pages> pp. 536-542. </pages>
Reference-contexts: To increase FPGA performance, partitioning and technology mapping have been extensively studied [7, 12, 18, 24]. However, the observation that circuit performance is impacted more by routing delays rather than by device delays [4, 17] has focused recent attention on routing <ref> [1, 2, 6, 9, 21, 22, 31] </ref>. In this paper we present an FPGA Placement and Routing (FPR) tool. FPR is based on a recursive geometric strategy for simultaneous placement and global routing, followed by a graph-based detailed-routing phase. FPR heuristically minimizes both wirelength and source-sink pathlengths.
Reference: [10] <author> A. E. Gamal, J. Greene, J. Reyneri, E. Rogoyski, K. El-Ayat, and A. Mohsen, </author> <title> An Architecture for Electrically Configurable Gate Arrays, </title> <journal> IEEE J. Solid State Circuits, </journal> <volume> 24 (1989), </volume> <pages> pp. 394-398. </pages>
Reference-contexts: 1 Introduction Field-programmable gate arrays, or FPGAs, afford designers a versatile and inexpensive way to implement and test VLSI designs <ref> [5, 10] </ref>. FPGAs are available in a number of styles and configurations [29]. One of the most common FPGA architectures consists of symmetrical arrays of user-configurable logic blocks interconnected by a set of programmable routing resources [32] (Figure 1).
Reference: [11] <author> J. L. Ganley, </author> <title> Geometric Interconnection and Placement Algorithms, </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Virginia, Charlottesville, Virginia, </institution> <year> 1995. </year>
Reference-contexts: We then route nets within the channels surrounding the logic block (if it exists) while minimizing the maximum channel congestion. In our implementation, an optimal solution is computed using integer programming. This is efficient in practice since the number of nets involving any single logic block is small <ref> [11] </ref>. (a) construct routing graph (b) for a Xilinx [32] 4000 series part with a channel width of 2. 5 Detailed Routing Following the placement and global-routing phases described above, FPR performs detailed routing by assigning specific channel and switch-block edges to each net. <p> We also measured how well FPR optimizes total wirelength and maximum source-sink pathlengths (i.e., radius). Since previous works do not report these statistics, we have implemented a modified version of FPR, called SFPR, that uses unrooted Steiner trees as thumbnails <ref> [11] </ref>, instead of the preferred arborescence thumbnails described in Section 3. We compared the solutions produced by SFPR against performance-oriented solutions produced by the unmodified FPR tool. These results are summarized in Table 2, where we observe that a 1:0% increase in wirelength has yielded a 6:7% decrease in radius.
Reference: [12] <author> T. Gao, K. C. Chen, J. Cong, Y. Ding, and C. L. Liu, </author> <title> Placement and Placement Driven Technology Mapping for FPGA Synthesis, </title> <booktitle> in Proc. IEEE Intl. ASIC Conf., </booktitle> <address> Rochester, NY, </address> <month> September </month> <year> 1993, </year> <pages> pp. 87-91. </pages>
Reference-contexts: FPGA reprogrammability is achieved at the expense of performance, i.e., long signal delays through the reconfigurable routing resources. This penalty is of primary concern to designers and users alike [28]. To increase FPGA performance, partitioning and technology mapping have been extensively studied <ref> [7, 12, 18, 24] </ref>. However, the observation that circuit performance is impacted more by routing delays rather than by device delays [4, 17] has focused recent attention on routing [1, 2, 6, 9, 21, 22, 31]. In this paper we present an FPGA Placement and Routing (FPR) tool.
Reference: [13] <author> J. Griffith, G. Robins, J. S. Salowe, and T. Zhang, </author> <title> Closing the Gap: Near-Optimal Steiner Trees in Polynomial Time, </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 13 (1994), </volume> <pages> pp. 1351-1365. </pages>
Reference-contexts: While the KMB heuristic always finds a feasible detailed routing if one exists, it often does not "branch" at the appropriate Steiner nodes (Figure 6 (a)). This potential drawback is effectively ameliorated using the greedy strategy described below. Our detailed-routing algorithm is based on combining a greedy, iterated heuristic <ref> [13, 16] </ref> with the KMB algorithm; we refer to this hybrid method as the Iterated-KMB (IKMB) algorithm [1].
Reference: [14] <author> W. Heyns, W. Sansen, and H. Beke, </author> <title> A Line-Expansion Algorithm for the General Routing Problem with a Guaranteed Solution, </title> <booktitle> in Proc. ACM/IEEE Design Automation Conf., </booktitle> <address> Minneapolis, </address> <year> 1980, </year> <pages> pp. 243-249. </pages>
Reference-contexts: Note that this wavefront-expansion technique determines the region searched by the routing algorithm, as opposed to the order in which graph edges are explored <ref> [14] </ref>. We found that in practice, the vast majority of those nets that fail to route using the initial global route become routable after only a single loosening operation.
Reference: [15] <author> F. K. Hwang, D. S. Richards, and P. Winter, </author> <title> The Steiner Tree Problem, </title> <publisher> North-Holland, </publisher> <year> 1992. </year>
Reference-contexts: Since the GST problem is NP-complete <ref> [15] </ref>, we utilize the heuristic of Kou, Markowsky and Berman [20] (KMB), which approximately solves the GST problem in polynomial time, and is guaranteed to yield solutions with cost less than twice the optimal.
Reference: [16] <author> A. B. Kahng and G. Robins, </author> <title> A New Class of Iterative Steiner Tree Heuristics With Good Performance, </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 11 (1992), </volume> <pages> pp. 893-902. </pages>
Reference-contexts: While the KMB heuristic always finds a feasible detailed routing if one exists, it often does not "branch" at the appropriate Steiner nodes (Figure 6 (a)). This potential drawback is effectively ameliorated using the greedy strategy described below. Our detailed-routing algorithm is based on combining a greedy, iterated heuristic <ref> [13, 16] </ref> with the KMB algorithm; we refer to this hybrid method as the Iterated-KMB (IKMB) algorithm [1].
Reference: [17] <author> A. B. Kahng and G. Robins, </author> <title> On Optimal Interconnections for VLSI, </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1995. </year>
Reference-contexts: This penalty is of primary concern to designers and users alike [28]. To increase FPGA performance, partitioning and technology mapping have been extensively studied [7, 12, 18, 24]. However, the observation that circuit performance is impacted more by routing delays rather than by device delays <ref> [4, 17] </ref> has focused recent attention on routing [1, 2, 6, 9, 21, 22, 31]. In this paper we present an FPGA Placement and Routing (FPR) tool. FPR is based on a recursive geometric strategy for simultaneous placement and global routing, followed by a graph-based detailed-routing phase.
Reference: [18] <author> K. Karplus, Xmap: </author> <title> a Technology Mapper for Table-lookup Field-Programmable Gate Arrays, </title> <booktitle> in Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1991, </year> <pages> pp. 240-243. </pages>
Reference-contexts: FPGA reprogrammability is achieved at the expense of performance, i.e., long signal delays through the reconfigurable routing resources. This penalty is of primary concern to designers and users alike [28]. To increase FPGA performance, partitioning and technology mapping have been extensively studied <ref> [7, 12, 18, 24] </ref>. However, the observation that circuit performance is impacted more by routing delays rather than by device delays [4, 17] has focused recent attention on routing [1, 2, 6, 9, 21, 22, 31]. In this paper we present an FPGA Placement and Routing (FPR) tool.
Reference: [19] <author> S. Kirkpatrick, C. D. Gelatt, and M. P. Vecchi, </author> <title> Optimization by Simulated Annealing: An Experimental Evaluation (part 1), </title> <booktitle> Science, 220 (1983), </booktitle> <pages> pp. 671-680. </pages>
Reference-contexts: Cut lines of the partitioning template go through switch blocks so that each logic block lies entirely within a single region of the partitioning template. The distribution of logic blocks among regions of the partitioning template is then improved using simulated annealing <ref> [19] </ref>, where a move consists of swapping two logic blocks that lie in different regions of the partitioning template and the objective is to minimize (1) the sum of the maximum source-sink pathlengths in the thumbnails over the nets, and (2) the total length of the thumbnails for all nets.
Reference: [20] <author> L. Kou, G. Markowsky, and L. Berman, </author> <title> A Fast Algorithm for Steiner Trees, </title> <journal> Acta Informatica, </journal> <volume> 15 (1981), </volume> <pages> pp. 141-145. </pages>
Reference-contexts: Since the GST problem is NP-complete [15], we utilize the heuristic of Kou, Markowsky and Berman <ref> [20] </ref> (KMB), which approximately solves the GST problem in polynomial time, and is guaranteed to yield solutions with cost less than twice the optimal. While the KMB heuristic always finds a feasible detailed routing if one exists, it often does not "branch" at the appropriate Steiner nodes (Figure 6 (a)).
Reference: [21] <author> Y.-S. Lee and A. C.-H. Wu, </author> <title> A Performance and Routability Driven Router for FPGAs Considering Path Delays, </title> <booktitle> in Proc. ACM/IEEE Design Automation Conf., </booktitle> <address> San Francisco, CA, </address> <month> June </month> <year> 1995, </year> <pages> pp. 557-561. </pages>
Reference-contexts: To increase FPGA performance, partitioning and technology mapping have been extensively studied [7, 12, 18, 24]. However, the observation that circuit performance is impacted more by routing delays rather than by device delays [4, 17] has focused recent attention on routing <ref> [1, 2, 6, 9, 21, 22, 31] </ref>. In this paper we present an FPGA Placement and Routing (FPR) tool. FPR is based on a recursive geometric strategy for simultaneous placement and global routing, followed by a graph-based detailed-routing phase. FPR heuristically minimizes both wirelength and source-sink pathlengths.
Reference: [22] <author> G. G. Lemieux and S. D. Brown, </author> <title> A Detailed Routing Algorithm for Allocating Wire Segments in Field-Programmable Gate Arrays, </title> <booktitle> in Proc. ACM/SIGDA Physical Design Workshop, </booktitle> <address> Lake Arrowhead, CA, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: To increase FPGA performance, partitioning and technology mapping have been extensively studied [7, 12, 18, 24]. However, the observation that circuit performance is impacted more by routing delays rather than by device delays [4, 17] has focused recent attention on routing <ref> [1, 2, 6, 9, 21, 22, 31] </ref>. In this paper we present an FPGA Placement and Routing (FPR) tool. FPR is based on a recursive geometric strategy for simultaneous placement and global routing, followed by a graph-based detailed-routing phase. FPR heuristically minimizes both wirelength and source-sink pathlengths. <p> Two FPGA architectures, corresponding to Xilinx 3000-series and 4000-series parts, were modeled [5, 32]; these architectures are identical to the ones used by CGE [6], SEGA <ref> [22] </ref> and GBP [31], respectively. We compared the performance of these tools on fourteen large benchmark circuits: the suite of five 3000-series benchmarks used by [6], and the suite of nine 4000-series benchmarks used by [22] and [31]. <p> modeled [5, 32]; these architectures are identical to the ones used by CGE [6], SEGA <ref> [22] </ref> and GBP [31], respectively. We compared the performance of these tools on fourteen large benchmark circuits: the suite of five 3000-series benchmarks used by [6], and the suite of nine 4000-series benchmarks used by [22] and [31]. The 3000-series benchmarks were routed on FPGAs with switch-block flexibility F s = 6 and connection flexibility F c = d0:6 W e, where W is the the channel width. <p> A common objective in FPGA physical design is to minimize maximum channel width. Table 1 shows the maximum channel widths of actual complete placement and routing solutions produced by FPR; these compare favorably with CGE [6] for the 3000-series benchmarks, and with SEGA <ref> [22] </ref> and GBP [31] for the 4000-series benchmarks. The channel width required by FPR is smaller than that required by CGE, SEGA, and GBP in 8 of the 14 benchmark circuits, and is equal on all but one of the remaining 6 benchmark circuits.
Reference: [23] <author> S. K. Rao, P. Sadayappan, F. K. Hwang, and P. W. Shor, </author> <title> The Rectilinear Steiner Arborescence Problem, </title> <address> Al-gorithmica, </address> <year> (1992), </year> <pages> pp. 277-288. </pages>
Reference-contexts: This grid is called the partitioning template. The placement is then optimized and a global routing is determined relative to the partitioning template using optimal rectilinear Steiner arborescences 1 (RSAs) <ref> [23] </ref>. Since m and n are small and fixed, these optimal RSAs (called thumbnails) may be precomputed for efficient lookup during execution. Setting m = n = 3 yields the basic 3 fi 3 partitioning template that is used in our implementation (Figure 2).
Reference: [24] <author> K. Roy, B. Guan, and C. Sechen, </author> <title> FPGA MCM Partitioning and Placement, </title> <booktitle> in Proc. ACM/SIGDA Physical Design Workshop, </booktitle> <address> Lake Arrowhead, CA, </address> <month> April </month> <year> 1993, </year> <pages> pp. 211-212. </pages>
Reference-contexts: FPGA reprogrammability is achieved at the expense of performance, i.e., long signal delays through the reconfigurable routing resources. This penalty is of primary concern to designers and users alike [28]. To increase FPGA performance, partitioning and technology mapping have been extensively studied <ref> [7, 12, 18, 24] </ref>. However, the observation that circuit performance is impacted more by routing delays rather than by device delays [4, 17] has focused recent attention on routing [1, 2, 6, 9, 21, 22, 31]. In this paper we present an FPGA Placement and Routing (FPR) tool.
Reference: [25] <author> H. Shin and A. Sangiovanni-Vincentelli, </author> <title> A Detailed Router Based on Incremental Routing Modifications: </title> <journal> Mighty, IEEE Trans. Computer-Aided Design, </journal> <volume> 6 (1987), </volume> <pages> pp. 942-955. </pages>
Reference-contexts: We found that in practice, the vast majority of those nets that fail to route using the initial global route become routable after only a single loosening operation. In cases where wavefront expansion fails to produce a routing solution, we next employ a "move-to-front" heuristic <ref> [25] </ref>, where unroutable nets are moved to the beginning of the net-routing order and the new routing order is attempted. global routes when infeasibility is encountered. 6 Experimental Results We have implemented our algorithms and incorporated them into FPR.
Reference: [26] <author> H. Spruth, F. Johannes, and K. Antreich, PHIroute: </author> <title> A Parallel Hierarchical Sea-of-Gates Router, </title> <booktitle> in Proc. IEEE Intl. Symp. Circuits and Systems, </booktitle> <year> 1994, </year> <pages> pp. 487-490. </pages>
Reference-contexts: Thus, the global routing computed for a net corresponds to the topology of its thumbnail. The assignment of nets to switch blocks is accomplished in a manner similar to <ref> [26] </ref>. The number of nets that can be assigned to each switch block is bounded by the number of nets crossing the cut, divided by the number of switch blocks on the cut.
Reference: [27] <author> P. R. Suaris and G. Kedem, </author> <title> A Quadrisection-Based Place and Route Scheme for Standard Cells, </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 8 (1989), </volume> <pages> pp. 234-244. </pages>
Reference-contexts: Setting m = n = 3 yields the basic 3 fi 3 partitioning template that is used in our implementation (Figure 2). Thumbnail partitioning is a generalization of sharp partitioning [3], which in turn is a generalization of quadrisection <ref> [27] </ref>. The overall strategy consists of a placement and global-routing phase, followed by a detailed-routing phase.
Reference: [28] <author> S. Trimberger, </author> <title> Effects of FPGA Architecture on FPGA Routing, </title> <booktitle> in Proc. ACM/IEEE Design Automation Conf., </booktitle> <address> San Francisco, CA, </address> <month> June </month> <year> 1995, </year> <pages> pp. 574-578. </pages>
Reference-contexts: FPGA reprogrammability is achieved at the expense of performance, i.e., long signal delays through the reconfigurable routing resources. This penalty is of primary concern to designers and users alike <ref> [28] </ref>. To increase FPGA performance, partitioning and technology mapping have been extensively studied [7, 12, 18, 24]. However, the observation that circuit performance is impacted more by routing delays rather than by device delays [4, 17] has focused recent attention on routing [1, 2, 6, 9, 21, 22, 31].
Reference: [29] <author> S. M. Trimberger, </author> <title> Field-Programmable Gate Array Technology, </title> <editor> S. M. Trimberger, editor, </editor> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1994. </year>
Reference-contexts: 1 Introduction Field-programmable gate arrays, or FPGAs, afford designers a versatile and inexpensive way to implement and test VLSI designs [5, 10]. FPGAs are available in a number of styles and configurations <ref> [29] </ref>. One of the most common FPGA architectures consists of symmetrical arrays of user-configurable logic blocks interconnected by a set of programmable routing resources [32] (Figure 1). FPGA reprogrammability is achieved at the expense of performance, i.e., long signal delays through the reconfigurable routing resources.
Reference: [30] <author> Y.-L. Wu and M. Marek-Sadowska, </author> <title> Graph Based Analysis of FPGA Routing, </title> <booktitle> in Proc. European Design and Test Conf., </booktitle> <year> 1993, </year> <pages> pp. 104-109. </pages>
Reference-contexts: The placement and global-routing phases seek to minimize congestion, thereby enabling the detailed router to find a feasible (and high-quality) solution more easily. However, since it is NP-complete to determine whether there exists a feasible detailed-routing solution for all nets <ref> [30] </ref>, we use a deterministic net-ordering scheme to route the nets one at a time. When a detailed-routing solution for a net is found, the corresponding routing resources are committed to that net and are made unavailable for subsequent nets (i.e., they are removed from the underlying graph).
Reference: [31] <author> Y.-L. Wu and M. Marek-Sadowska, </author> <title> An Efficient Router for 2-D Field Programmable Gate Arrays, </title> <booktitle> in European Design and Test Conf., </booktitle> <year> 1994, </year> <pages> pp. 412-416. </pages>
Reference-contexts: To increase FPGA performance, partitioning and technology mapping have been extensively studied [7, 12, 18, 24]. However, the observation that circuit performance is impacted more by routing delays rather than by device delays [4, 17] has focused recent attention on routing <ref> [1, 2, 6, 9, 21, 22, 31] </ref>. In this paper we present an FPGA Placement and Routing (FPR) tool. FPR is based on a recursive geometric strategy for simultaneous placement and global routing, followed by a graph-based detailed-routing phase. FPR heuristically minimizes both wirelength and source-sink pathlengths. <p> Two FPGA architectures, corresponding to Xilinx 3000-series and 4000-series parts, were modeled [5, 32]; these architectures are identical to the ones used by CGE [6], SEGA [22] and GBP <ref> [31] </ref>, respectively. We compared the performance of these tools on fourteen large benchmark circuits: the suite of five 3000-series benchmarks used by [6], and the suite of nine 4000-series benchmarks used by [22] and [31]. <p> 32]; these architectures are identical to the ones used by CGE [6], SEGA [22] and GBP <ref> [31] </ref>, respectively. We compared the performance of these tools on fourteen large benchmark circuits: the suite of five 3000-series benchmarks used by [6], and the suite of nine 4000-series benchmarks used by [22] and [31]. The 3000-series benchmarks were routed on FPGAs with switch-block flexibility F s = 6 and connection flexibility F c = d0:6 W e, where W is the the channel width. <p> A common objective in FPGA physical design is to minimize maximum channel width. Table 1 shows the maximum channel widths of actual complete placement and routing solutions produced by FPR; these compare favorably with CGE [6] for the 3000-series benchmarks, and with SEGA [22] and GBP <ref> [31] </ref> for the 4000-series benchmarks. The channel width required by FPR is smaller than that required by CGE, SEGA, and GBP in 8 of the 14 benchmark circuits, and is equal on all but one of the remaining 6 benchmark circuits.
Reference: [32] <author> Xilinx, </author> <title> The Programmable Gate Array Data Book, </title> <publisher> Xilinx, Inc., </publisher> <address> San Jose, California, </address> <year> 1994. </year>
Reference-contexts: FPGAs are available in a number of styles and configurations [29]. One of the most common FPGA architectures consists of symmetrical arrays of user-configurable logic blocks interconnected by a set of programmable routing resources <ref> [32] </ref> (Figure 1). FPGA reprogrammability is achieved at the expense of performance, i.e., long signal delays through the reconfigurable routing resources. This penalty is of primary concern to designers and users alike [28]. To increase FPGA performance, partitioning and technology mapping have been extensively studied [7, 12, 18, 24]. <p> In our implementation, an optimal solution is computed using integer programming. This is efficient in practice since the number of nets involving any single logic block is small [11]. (a) construct routing graph (b) for a Xilinx <ref> [32] </ref> 4000 series part with a channel width of 2. 5 Detailed Routing Following the placement and global-routing phases described above, FPR performs detailed routing by assigning specific channel and switch-block edges to each net. <p> Two FPGA architectures, corresponding to Xilinx 3000-series and 4000-series parts, were modeled <ref> [5, 32] </ref>; these architectures are identical to the ones used by CGE [6], SEGA [22] and GBP [31], respectively.
References-found: 32

