URL: ftp://ftp.cs.rpi.edu/pub/ulfar/tr95_14.ps.gz
Refering-URL: http://www.cs.rpi.edu/~ulfar/lucid.html
Root-URL: http://www.cs.rpi.edu
Title: Series Logo  LUCID AND EFFICIENT CASE ANALYSIS  
Author: ULFAR ERLINGSSON, MUKKAI KRISHNAMOORTHY, AND T. V. RAMAN 
Keyword: Algorithms, Compilers, Switch statements, Code generation, Code optimization, Object-oriented methods.  
Date: 19xx  
Note: Volume 00, Number 00, Xxxx  
Abstract: This paper describes a new scheme for building static search trees, using multiway radix search trees. We present this method for code generation of switch statements in imperative languages. We show that, for sparse case sets, the method produces faster code on average than existing methods, requiring O(1) time with a small constant for the average search. We then apply this method to the problem of code generation for generic functions in object-oriented languages, and find that its use improves clarity as well as efficiency. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Aho, R. Sethi, and J. Ullman, </author> <booktitle> Compilers, Principles, Techniques, and Tools. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1986. </year>
Reference-contexts: Analysis of Methods There are several different methods of generating code for switch statements, apart from our MRST. Some common ones are: 1. Skewed Binary Tree (see <ref> [1] </ref> and [8]) 2. Balanced Binary Tree (see [8] and [9]) 3. Balanced Binary Tree to Hash Tables (see [3], [6], [5] and [4]) 4. Jump Table Method (see [1] and [8]) LUCID AND EFFICIENT CASE ANALYSIS 5 start: mov r1, z shr r1, 3 jmp [table1+r1] table1: data case 000 <p> Some common ones are: 1. Skewed Binary Tree (see <ref> [1] </ref> and [8]) 2. Balanced Binary Tree (see [8] and [9]) 3. Balanced Binary Tree to Hash Tables (see [3], [6], [5] and [4]) 4. Jump Table Method (see [1] and [8]) LUCID AND EFFICIENT CASE ANALYSIS 5 start: mov r1, z shr r1, 3 jmp [table1+r1] table1: data case 000 data case 001 data case 010 data Default data case 100 data case 101 data Default data case 111 case 000: cmp z, 2048 jeq Function4 jmp Default case
Reference: [2] <author> L. Atkinson, </author> <title> "Optimizing Two-state Case Statements in Pascal," </title> <journal> Software|Practice and Experience, </journal> <volume> Vol. 12, </volume> <year> 1982, </year> <pages> pp. 571-581. </pages>
Reference-contexts: Although the MRST method is appropriate for most searches where a static search tree can be generated, only its application to switch statements is considered here. There has been considerable work in the past ([8], [5], <ref> [2] </ref>, [3] and [6]) regarding the Pascal case statement and code generation. Generating code for switch statements is discussed in [4] and [9]. A scheme similar to MRST, but restricted to binary radix search trees, can be found in [7].
Reference: [3] <author> R. Bernstein, </author> <title> "Producing Good Code for the Case Statement," </title> <journal> Software|Practice and Experience, </journal> <volume> Vol. 15, </volume> <year> 1985, </year> <pages> pp. 1021-1024. </pages>
Reference-contexts: Although the MRST method is appropriate for most searches where a static search tree can be generated, only its application to switch statements is considered here. There has been considerable work in the past ([8], [5], [2], <ref> [3] </ref> and [6]) regarding the Pascal case statement and code generation. Generating code for switch statements is discussed in [4] and [9]. A scheme similar to MRST, but restricted to binary radix search trees, can be found in [7]. <p> Analysis of Methods There are several different methods of generating code for switch statements, apart from our MRST. Some common ones are: 1. Skewed Binary Tree (see [1] and [8]) 2. Balanced Binary Tree (see [8] and [9]) 3. Balanced Binary Tree to Hash Tables (see <ref> [3] </ref>, [6], [5] and [4]) 4.
Reference: [4] <author> C. Fraser and D. Hanson, </author> <title> A Retargetable C Compiler: Design and Implementation, </title> <publisher> The Benjamin/Cummings Publishing Company Inc., </publisher> <address> Redwood City, CA, </address> <year> 1994. </year>
Reference-contexts: There has been considerable work in the past ([8], [5], [2], [3] and [6]) regarding the Pascal case statement and code generation. Generating code for switch statements is discussed in <ref> [4] </ref> and [9]. A scheme similar to MRST, but restricted to binary radix search trees, can be found in [7]. We begin, in section 2, by describing the MRST method of code generation for switch statements. In section 3, we compare it with four other code generation methods. <p> Some common ones are: 1. Skewed Binary Tree (see [1] and [8]) 2. Balanced Binary Tree (see [8] and [9]) 3. Balanced Binary Tree to Hash Tables (see [3], [6], [5] and <ref> [4] </ref>) 4.
Reference: [5] <author> J. Hennessy and N. Mendelsohn, </author> <title> "Compilation of the Pascal Case Statement," </title> <journal> Software| Practice and Experience, </journal> <volume> Vol. 12, </volume> <year> 1982, </year> <pages> pp. </pages> <month> 879-882. </month> <title> LUCID AND EFFICIENT CASE ANALYSIS 9 </title>
Reference-contexts: Although the MRST method is appropriate for most searches where a static search tree can be generated, only its application to switch statements is considered here. There has been considerable work in the past ([8], <ref> [5] </ref>, [2], [3] and [6]) regarding the Pascal case statement and code generation. Generating code for switch statements is discussed in [4] and [9]. A scheme similar to MRST, but restricted to binary radix search trees, can be found in [7]. <p> Analysis of Methods There are several different methods of generating code for switch statements, apart from our MRST. Some common ones are: 1. Skewed Binary Tree (see [1] and [8]) 2. Balanced Binary Tree (see [8] and [9]) 3. Balanced Binary Tree to Hash Tables (see [3], [6], <ref> [5] </ref> and [4]) 4.
Reference: [6] <author> S. Kannan and T. Proebsting, </author> <title> "Correction to Producing Good Code for the Case Statement," </title> <journal> Software|Practice and Experience, </journal> <volume> Vol. 24, </volume> <year> 1994, </year> <pages> pp. 233. </pages>
Reference-contexts: Although the MRST method is appropriate for most searches where a static search tree can be generated, only its application to switch statements is considered here. There has been considerable work in the past ([8], [5], [2], [3] and <ref> [6] </ref>) regarding the Pascal case statement and code generation. Generating code for switch statements is discussed in [4] and [9]. A scheme similar to MRST, but restricted to binary radix search trees, can be found in [7]. <p> Analysis of Methods There are several different methods of generating code for switch statements, apart from our MRST. Some common ones are: 1. Skewed Binary Tree (see [1] and [8]) 2. Balanced Binary Tree (see [8] and [9]) 3. Balanced Binary Tree to Hash Tables (see [3], <ref> [6] </ref>, [5] and [4]) 4.
Reference: [7] <author> D. R. Morrison, </author> <title> "PATRICIA|Practical Algorithm To Retrieve Information Coded In Alphanumeric," </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> Vol. 15, </volume> <year> 1968, </year> <pages> pp. 514-534. </pages>
Reference-contexts: There has been considerable work in the past ([8], [5], [2], [3] and [6]) regarding the Pascal case statement and code generation. Generating code for switch statements is discussed in [4] and [9]. A scheme similar to MRST, but restricted to binary radix search trees, can be found in <ref> [7] </ref>. We begin, in section 2, by describing the MRST method of code generation for switch statements. In section 3, we compare it with four other code generation methods.
Reference: [8] <author> A. Sale, </author> <title> "The Implementation of Case Statements in Pascal," </title> <journal> Software|Practice and Experience, </journal> <volume> Vol. 11, </volume> <year> 1981, </year> <pages> pp. 929-942. </pages>
Reference-contexts: Analysis of Methods There are several different methods of generating code for switch statements, apart from our MRST. Some common ones are: 1. Skewed Binary Tree (see [1] and <ref> [8] </ref>) 2. Balanced Binary Tree (see [8] and [9]) 3. Balanced Binary Tree to Hash Tables (see [3], [6], [5] and [4]) 4. Jump Table Method (see [1] and [8]) LUCID AND EFFICIENT CASE ANALYSIS 5 start: mov r1, z shr r1, 3 jmp [table1+r1] table1: data case 000 data case <p> Analysis of Methods There are several different methods of generating code for switch statements, apart from our MRST. Some common ones are: 1. Skewed Binary Tree (see [1] and <ref> [8] </ref>) 2. Balanced Binary Tree (see [8] and [9]) 3. Balanced Binary Tree to Hash Tables (see [3], [6], [5] and [4]) 4. Jump Table Method (see [1] and [8]) LUCID AND EFFICIENT CASE ANALYSIS 5 start: mov r1, z shr r1, 3 jmp [table1+r1] table1: data case 000 data case 001 data case 010 data Default <p> Some common ones are: 1. Skewed Binary Tree (see [1] and <ref> [8] </ref>) 2. Balanced Binary Tree (see [8] and [9]) 3. Balanced Binary Tree to Hash Tables (see [3], [6], [5] and [4]) 4. Jump Table Method (see [1] and [8]) LUCID AND EFFICIENT CASE ANALYSIS 5 start: mov r1, z shr r1, 3 jmp [table1+r1] table1: data case 000 data case 001 data case 010 data Default data case 100 data case 101 data Default data case 111 case 000: cmp z, 2048 jeq Function4 jmp Default case 001: mov
Reference: [9] <author> R. M. Stallman, </author> <title> "Using and Porting GNU CC," </title> <type> Technical Report, </type> <institution> Free Software Foundation, </institution> <address> Cambridge, MA, </address> <year> 1992. </year> <institution> (Erlingsson) Rensselaer Polytechnic Institute, Troy, NY 12180 (Krishnamoorthy) Rensselaer Polytechnic Institute, Troy, NY 12180 (Raman) Cambridge Research Laboratory, Digital Equipment Corp., </institution> <address> Cambridge, MA 02139 E-mail address, Erlingsson: </address> <publisher> ulfar@cs.rpi.edu E-mail address, Krishnamoorthy: moorthy@cs.rpi.edu E-mail address, Raman: raman@crl.dec.com </publisher>
Reference-contexts: There has been considerable work in the past ([8], [5], [2], [3] and [6]) regarding the Pascal case statement and code generation. Generating code for switch statements is discussed in [4] and <ref> [9] </ref>. A scheme similar to MRST, but restricted to binary radix search trees, can be found in [7]. We begin, in section 2, by describing the MRST method of code generation for switch statements. In section 3, we compare it with four other code generation methods. <p> Analysis of Methods There are several different methods of generating code for switch statements, apart from our MRST. Some common ones are: 1. Skewed Binary Tree (see [1] and [8]) 2. Balanced Binary Tree (see [8] and <ref> [9] </ref>) 3. Balanced Binary Tree to Hash Tables (see [3], [6], [5] and [4]) 4.
References-found: 9

