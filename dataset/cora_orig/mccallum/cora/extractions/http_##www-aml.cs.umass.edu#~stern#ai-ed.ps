URL: http://www-aml.cs.umass.edu/~stern/ai-ed.ps
Refering-URL: http://gaia.cs.umass.edu/nmis/manicpubs.html
Root-URL: 
Email: email: fstern,bev,kuroseg@cs.umass.edu  
Phone: Phone: (413) 545-0582 Fax: (413) 545-1249  
Title: Intelligence on the Web?  
Author: Mia Stern, Beverly Park Woolf, and James F. Kurose 
Address: Amherst, MA 01003  
Affiliation: Computer Science Department University of Massachusetts  
Abstract: This paper describes a courseware system delivered over the World Wide Web for transforming existing video-taped courses. The on-line courses take advantage of the interactivity and the individualized instruction of intelligent tutoring systems. They use synchronized audio and HTML slides to present material to the student. An overlay student model records a student's ability on each topic in the system, determined by which slides the student has seen and quizzes he has taken. This model is then used to help guide the student through the material, to provide interactive and adaptive quizzes, and to prefetch course material before it is explicitly requested, reducing the delays seen by the student. The first goal is accomplished by using adaptive hypertext techniques including adaptive navigation support and adaptive presentation. The second goal is achieved by dynamically constructing quizzes at the correct level of difficulty for the student. The third goal is accomplished by predicting the next actions the student will take, and preparing for them ahead of time. In this paper we discuss initial efforts to implement a student model for the kinds of web-based courses supported in the system. We also discuss how the student model is used to accomplish the three goals. We conclude by providing a brief description of the first student encoun ters with the system.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Anderson and B. Reiser. </author> <title> The LISP Tutor. </title> <journal> Byte, </journal> <volume> 10(4) </volume> <pages> 159-175, </pages> <year> 1985. </year>
Reference-contexts: This graph can be considered to be a fully connected graph, with most weights at 0. The weights, which represent the ideal way of proceeding through the course, are determined a priori by a domain expert. Unlike traditional ITSs that determine what students see (for example, the LISP tutor <ref> [1] </ref> and the Cardiac tutor [6]), the MANIC system does not strictly impose presentation of prerequisite topics before a new topic is started. Additionally, we have extended the existing course by providing alternative ways to present essentially the same material.
Reference: [2] <author> C. Boyle and A. Encarnacion. Metadoc: </author> <title> an Adaptive Hypertext Reading System. In In User Models and User Adapted Interaction, </title> <booktitle> volume 4(1), </booktitle> <pages> pages 1-19. </pages>
Reference-contexts: In this section, we describe each of these in turn. 3.1 Guiding the student through the material Work in adaptive hypermedia has identified two methods for adapting the material in a course to each individual student: adaptive presentation <ref> [2] </ref> and adaptive navigation support [7]. The first technique provides different course content for different students, while the second changes the links that are visible from a given state. We use both techniques in the MANIC system.
Reference: [3] <author> P. Brusilovsky and L. Pesin. Isis-tutor: </author> <title> An Intelligent Learning Environment for Cds/Isis users. </title> <booktitle> In Proceedings of CLCE'94, </booktitle> <year> 1994. </year>
Reference-contexts: This list is augmented with suggestions from the tutor indicating which topics the student should view. The tutor thus provides adaptive navigation support. This is similar to the mechanism used in ELM-ART [4] and in the ISIS tutor <ref> [3] </ref>. As in those systems, the student has the option of either taking or ignoring the tutor's suggestion. To accomplish this topic suggestion, the tutor examines the scores the student has on the topic that has just been completed.
Reference: [4] <author> P. Brusilovsky, E. Schwarz, and G. Weber. ELM-ART: </author> <title> An Intelligent Tutoring System on World Wide Web. </title> <booktitle> In Intelligent Tutoring Systems, </booktitle> <pages> pages 261-269, </pages> <year> 1996. </year>
Reference-contexts: At this point, the student is presented with a list of all available topics. This list is augmented with suggestions from the tutor indicating which topics the student should view. The tutor thus provides adaptive navigation support. This is similar to the mechanism used in ELM-ART <ref> [4] </ref> and in the ISIS tutor [3]. As in those systems, the student has the option of either taking or ignoring the tutor's suggestion. To accomplish this topic suggestion, the tutor examines the scores the student has on the topic that has just been completed.
Reference: [5] <author> B. Carr and I. Goldstein. Overlays: </author> <title> a Theory of Modeling for Computer-aided Instruction. AI Lab Memo 406, </title> <publisher> MIT, </publisher> <year> 1977. </year>
Reference-contexts: Rather, they may simply want to explore one concept for advice on a homework assignment. Thus the concept distinction allows the tutor to focus in on a smaller part of the course. 2.3 The student model The student model in MANIC is essentially an overlay model <ref> [5] </ref>. Students must gain a certain degree of knowledge on each topic. No buggy knowledge is tracked, as the system is simply attempting to guide the student into gaining the desired knowledge. The MANIC student model tracks a student's ability on each topic within the domain.
Reference: [6] <author> C. Eliot. </author> <title> An Intelligent Tutoring System Based Upon Adaptive Simulation. </title> <type> PhD thesis, </type> <institution> University of Massachusetts, </institution> <month> February </month> <year> 1996. </year>
Reference-contexts: The weights, which represent the ideal way of proceeding through the course, are determined a priori by a domain expert. Unlike traditional ITSs that determine what students see (for example, the LISP tutor [1] and the Cardiac tutor <ref> [6] </ref>), the MANIC system does not strictly impose presentation of prerequisite topics before a new topic is started. Additionally, we have extended the existing course by providing alternative ways to present essentially the same material.
Reference: [7] <author> C. Kaplan, J. Fenwick, and J. Chen. </author> <title> Adaptive Hypertext Navigation Based on User Goals and Context. In User Models and User Adapted Interaction, </title> <booktitle> volume 3(2). </booktitle>
Reference-contexts: In this section, we describe each of these in turn. 3.1 Guiding the student through the material Work in adaptive hypermedia has identified two methods for adapting the material in a course to each individual student: adaptive presentation [2] and adaptive navigation support <ref> [7] </ref>. The first technique provides different course content for different students, while the second changes the links that are visible from a given state. We use both techniques in the MANIC system.
Reference: [8] <author> H. Lei and D. Duchamp. </author> <title> An Analytical Approach to File Prefetching. </title> <booktitle> In USENIX Annual Tech-incal Conference, </booktitle> <address> Anaheim, CA, </address> <month> January </month> <year> 1997. </year>
Reference-contexts: However, prefetching that is not accurate will waste network bandwidth and cache space, by storing pages not requested by the user. Thus, the question remains as to how to make the prefetching accurate. Prefetching has been implemented in both file systems <ref> [8] </ref> and on the WWW [11]. The work presented in these papers involves general population models for guiding the prefetching. Our work, however, uses individual student models to aid with prefetching. There are three kinds of prefetching that MANIC performs.
Reference: [9] <author> A. Luotonen and K. Altis. </author> <title> World-Wide Web Proxies. </title> <booktitle> In Proceedings of the First International World Wide Web Conference, </booktitle> <address> Amsterdam, 1994. </address> <publisher> Elsevier. </publisher>
Reference-contexts: The client side software consists of a web browser (such as Netscape Navigator) and the RealAudio client. Both of these are off-the-shelf software and easy to obtain. The proxy is an application that runs between a web client and a web server <ref> [9] </ref>. All requests from the client are processed by the proxy before being sent to the server. Similarly, server responses are processed by the proxy and then sent to the client.
Reference: [10] <author> J. D. Padhye. </author> <title> Can Intelligent Prefetching Make Web Browsing Faster? Department of Computer Science, </title> <institution> University of Massachusetts, </institution> <year> 1996. </year> <title> Synthesis Project Report. </title>
Reference-contexts: Similarly, server responses are processed by the proxy and then sent to the client. The proxy is included in the architecture to enable prefetching; data must be stored in a cache so that it can be served to the client. See <ref> [10] </ref> for more details on the proxy implementation. The HTTP server is also standard, but we have augmented it with Common Gateway Interface scripts.
Reference: [11] <author> V. Padmanabhan and J. Mogul. </author> <title> Using Predictive Prefetching to Improve World Wide Web Latency. </title> <booktitle> In ACM SIGComm, </booktitle> <pages> pages 22-36, </pages> <year> 1996. </year>
Reference-contexts: If the student elects to see these slides, he will see an easier version, since his knowledge of the topic and concept have been downgraded. 3.3 Prefetching Many users on the World Wide Web complain of latencies experienced due to downloading a new page <ref> [11] </ref>. One way to reduce these delays is to download the page ahead of time, before the user makes an explicit request. With a MANIC course, one option is to prefetch large sections of the course, or even the entire course, ahead of time. <p> However, prefetching that is not accurate will waste network bandwidth and cache space, by storing pages not requested by the user. Thus, the question remains as to how to make the prefetching accurate. Prefetching has been implemented in both file systems [8] and on the WWW <ref> [11] </ref>. The work presented in these papers involves general population models for guiding the prefetching. Our work, however, uses individual student models to aid with prefetching. There are three kinds of prefetching that MANIC performs. The first is prefetching while the student is viewing the material on one topic.
Reference: [12] <author> F. Shipman, C. Marshall, and R. Furuta. </author> <title> Creating Educational Guided Paths over the World-Wide Web. </title> <booktitle> In Educational Telecommunications, </booktitle> <pages> pages 326-331, </pages> <year> 1996. </year>
Reference-contexts: The next category of prefetching occurs when the end of a topic is reached. Which new topic should the tutor start to prefetch? Because there is not a clear linear path through the course, our work differs from that presented in <ref> [12] </ref>. If the tutor predicts the student is most likely going to choose one particular topic, it can start prefetching that one, ignoring the others. The tutor can begin to know this information by seeing how accurate its predictions are for what the student will choose as his next topic.
Reference: [13] <author> M. Stern, J. Steinberg, H.I. Lee, J. Padhye, and J. Kurose. MANIC: </author> <title> Multimedia Asynchronous Networked Individualized Courseware. In Educational Media and Hypermedia, </title> <year> 1997. </year>
Reference-contexts: Finally, at any point, students can elect to take on-line quizzes to test themselves on the material. A more detailed description of the initial implementation of MANIC can be found in <ref> [13] </ref>. We have added a tutor to adapt MANIC courses to customize the material to students' needs and preferences. The intelligent tutor is used to guide the student through the course material, to provide appropriate quizzes, and to prefetch material before the student requests it.
Reference: [14] <author> M. K. Stern. </author> <title> Network Implementation of an Intelligent Tutoring System. </title> <institution> Department of Computer Science, University of Massachusetts, </institution> <year> 1996. </year> <title> Synthesis Project Report. </title>
Reference-contexts: The decisions made at the student model server are the main focus of this paper. See <ref> [14] </ref> for details on the other parts of the architecture. The client side software consists of a web browser (such as Netscape Navigator) and the RealAudio client. Both of these are off-the-shelf software and easy to obtain.
References-found: 14

