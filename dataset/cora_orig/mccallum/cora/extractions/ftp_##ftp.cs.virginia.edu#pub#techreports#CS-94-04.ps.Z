URL: ftp://ftp.cs.virginia.edu/pub/techreports/CS-94-04.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A SAFETY KERNEL ARCHITECTURE  
Author: Kevin G. Wika John C. Knight 
Keyword: Index Terms software safety, software architecture, verification, security kernel, safety kernel  
Note: Supported in part by the National Science Foundation under grant number CCR-9213427 and in part by NASA under grant number NAG1-1123-FDP.  
Address: Charlottesville Virginia 22903  
Affiliation: Department of Computer Science University of Virginia  
Abstract: Software plays a crucial role in a large number of safety-critical systems. In spite of this, many safety-critical systems exhibit residual software errors even after extensive implementation and verification efforts. We describe a software architecture based on a safety kernel that facilitates the implementation and verification of safety-critical software. Drawing many concepts from the related notion of a security kernel, the safety kernel enforces safety policies independent of application programs and permits verification of properties of a small kernel rather than large amounts of application software. Safety-critical software is typically custom-built for each application. This leads to consistently high development costs and limited reuse of either designs or software modules. We believe that the safety kernel architecture provides a framework for identification of generally applicable classes of safety policies. The paper examines several classes of kernel-enforced policies. The policies have been identified using criteria that consider the criticality of a policy and the effects of kernel enforcement on the simplicity and verifiability of both the application software and the safety kernel. These general policies are parameterized to enable configuration of an instance of the safety kernel. A mechanical translator is utilized to instantiate the safety kernel from the parameter information. The concepts and design of the safety kernel architecture have been significantly inuenced by our research into the development of dependable software for an experimental neurosurgical device. For example, having worked with this real system, we recognized that in general the safety kernel would need to coexist with a large amount of potentially unreliable software. As a result, we describe a system architecture wherein the safety kernel operates in the context of application and system software that is unreliable or at least of unknown properties. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Ames, S. R. and M. Gasser, Jr., </author> <title> Security Kernel Design and Implementation: an Introduction, </title> <journal> IEEE Computer, </journal> <volume> Vol. 16, </volume> <pages> pp. 14-22, </pages> <month> July </month> <year> 1983. </year>
Reference-contexts: The result was that the systems were very difficult to build and, once built, were almost impossible to verify. Over time, however, the security kernel and other concepts have been developed that have made the development of secure systems more general, repeatable, and more amenable to verification <ref> [1] </ref>. Several authors have used the term safety kernel for systems or concepts that had the goal of supporting safe operation of application software. Others have suggested methods that have some of the features of a safety kernel.
Reference: 2. <author> Anderson, T. Ed., </author> <title> Safe and Secure Computing Systems, </title> <publisher> Blackwell Scientific Publi cations, </publisher> <year> 1989. </year>
Reference: 3. <author> Butler, R. W. and G. B. Finelli, </author> <title> The Infeasibility of Quantifying the Reliability of Life-Critical Real-Time Software, </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. </volume> <pages> 19-1, pp. 3-12, </pages> <month> January </month> <year> 1993. </year>
Reference: 4. <author> Garman, J. R., </author> <title> The Bug Heard Round the World, </title> <booktitle> ACM Software Engineering Notes Vol. </booktitle> <pages> 6-5, pp. 3-10, </pages> <month> October </month> <year> 1981. </year>
Reference: 5. <author> Knight, </author> <title> J.C. and D.M. Kienzle.,Safety-Critical Computer Applications: The Role Of Software Engineering, </title> <type> Technical Report TR-92-23, </type> <institution> Department of Computer Science, University of Virginia, </institution> <year> 1993. </year>
Reference-contexts: This is possible because, from the perspective of the safety kernel, failure of the operating system in this manner is indistinguishable from a failure of the device itself. In fact, this type of operating system failure emulates the failure of the device <ref> [5] </ref>. As a result, by being prepared to respond to device failures, the kernel is also able to respond to this class of operating system failure.
Reference: 6. <author> Leveson, N. G., T. J. Shimeall, J. L. Stelay and J. C. Thomas, </author> <title> Design for Safe Soft ware, </title> <booktitle> in Proceedings AIAA Space Sciences Meeting, </booktitle> <address> Reno, Nevada, </address> <year> 1983. </year>
Reference-contexts: Others have suggested methods that have some of the features of a safety kernel. In particular all utilize a relatively small, critical component to provide support for software safety. Leveson, et al. <ref> [6] </ref> first used the term safety kernel to identify a concept based on a centralized location for a set of safety mechanisms. The mechanisms are used to effect error detection and recovery policies established for a given system.
Reference: 7. <author> Neumann, P. G., </author> <title> On Hierarchical Design of Computer Systems for Critical Applications, </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. SE-12, </volume> <pages> pp. 905-920, </pages> <month> September </month> <year> 1986. </year>
Reference-contexts: This safety kernel concept is similar in function to the one proposed by Leveson, et al, serv ing as a monitor with no clear means of actually enforcing safety policies for a system. Neumann <ref> [7] </ref> considers the idea of a safety-trusted computing base as a part of his examination of whether the hierarchical design familiar in secure systems could be gener A Safety Kernel Architecture Page 6 alized to other critical applications.
Reference: 8. <editor> NATO AC/310 Ad Hoc Working Group on Munition Related Safety Critical Computing Systems, </editor> <title> Safety Design Requirements and Guidelines for Munition Related Safety Critical Computing Systems, </title> <type> NATO Standardization Agreement (STANAG) 4404 (Draft), </type> <month> March </month> <year> 1990. </year>
Reference-contexts: Thus the term kernel, as used in that work, was not directly analogous to its use in the security context. A report by the NATO ad hoc Working Group on Munition Related Safety Critical Computing Systems <ref> [8] </ref> mentions a safety kernel that it defines as follows: An independent computer program that monitors the state of the system to determine when potentially unsafe system states occur or when transitions to potentially unsafe system states may occur.
Reference: 9. <author> Rushby, J., </author> <title> Kernels for Safety?, in Safe and Secure Computing Systems, </title> <editor> T. Anderson Ed., </editor> <publisher> Blackwell Scientific Publications, </publisher> <year> 1989, </year> <pages> pp. 210-220. </pages>
Reference-contexts: A safety hierarchy could also incorporate criticality with the most critical properties enforced at the lowest levels. Rushby has made the strongest theoretical argument for the development of a safety kernel <ref> [9] </ref>. In the process, he has more clearly defined the role of a safety kernel. Rushby considers whether the concept of a small component that guarantees the enforcement of some system policy (typically security) could be applied to safety-critical software systems.
Reference: 10. <author> Wika, K. G., </author> <title> A User Interface and Control Algorithm for the Video Tumor Fighter, </title> <type> Masters Thesis, </type> <institution> University of Virginia, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: This is an investigational device for performing a" op * :P a ( ) A Safety Kernel Architecture Page 7 human neurosurgery being developed in a joint effort between the Department of Physics at the University of Virginia and the Department of Neurosurgery at the University of Iowa <ref> [10] </ref>. As a real, safety-critical application, the MSS forces complex, practical issues of software safety to be considered. In addition, it also serves as a target for implementation of a prototype of the safety kernel.
Reference: 11. <author> Neumann, P.G., </author> <title> Editor, Risks to the Public. </title> <booktitle> Software Engineering Notes. </booktitle>
References-found: 11

