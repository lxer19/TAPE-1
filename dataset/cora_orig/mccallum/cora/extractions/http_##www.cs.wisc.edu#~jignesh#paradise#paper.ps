URL: http://www.cs.wisc.edu/~jignesh/paradise/paper.ps
Refering-URL: http://www.cs.wisc.edu/shore/shore.papers.html
Root-URL: 
Email: paradise@cs.wisc.edu  
Title: Client-Server Paradise  
Author: David J. DeWitt, Navin Kabra, Jun Luo, Jignesh M. Patel, and Jie-Bing Yu 
Address: Wisconsin, Madison  
Affiliation: Computer Sciences Department, University of  
Abstract: This paper describes the design and implementation of Paradise, a database system designed for handling GIS type of applications. The current version of Paradise, uses a client-server architecture and provides an extended-relational data model for modeling GIS applications. Paradise supports an extended version of SQL and provides a graphical user interface for querying and browsing the database. We also describe the results of benchmarking Paradise using the Sequoia 2000 storage benchmark. 
Abstract-found: 1
Intro-found: 1
Reference: [ABD + 89] <author> M. Atkinson, F. Bancilhon, D. DeWitt, K. Dit-trich, D. Maier, and S. Zdonik. </author> <title> "The Object-Oriented Database Manifesto". </title> <booktitle> In International Conference on DOOD, </booktitle> <address> Japan, </address> <year> 1989. </year>
Reference-contexts: As an example, consider the weather database shown in Figure 1. In the example, "Text", "Raster", "Date", "Polyline" and "Polygon" are some of the predefined ADTs. While fairly rich, the Paradise data model is more restricted than what a full object-oriented database system would provide <ref> [ABD + 89] </ref>. For example, Paradise does not directly support set-valued attributes. We made this simplifying decision in order to avoid many of the implementation complexities associated with a full object-oriented data model.
Reference: [BKSS90] <author> N. Beckmann, Hans-Peter Kriegel, R. Schnei-der, and B. Seeger. </author> <title> "The R*-tree: An Efficient and Robust Access Method for Points and Rectangles". </title> <booktitle> In Proceedings of the 1990 ACM-SIGMOD Conference, </booktitle> <month> June </month> <year> 1990. </year>
Reference-contexts: In the following sections, we describe several of the more interesting design and implementation issues that we encountered during the implementation phase. 3.3.1 Spatial Access Through R*-Trees In order to support the efficient retrieval of objects with spatial attributes, R*-trees <ref> [BKSS90] </ref> (with full concurrency control and recovery) were added to the SHORE storage manager. R*-trees were selected because of their efficacy and "relative" ease of implementation, especially since we could reuse a lot of the existing SHORE B + -tree code. <p> However, when a full node in an R + -tree is split, the split must be propagated in both a downwards and upwards direction. This significantly complicates implementing concur-rency control and recovery. Finally, R*-trees provide support for "forced reinsert" <ref> [BKSS90] </ref>, which makes it possible to dynamically re-clustering spatial objects in the index.
Reference: [Car92] <author> R. V. Carlone. </author> <title> "NASA's EOSDIS Development Approach". </title> <type> Technical report, </type> <institution> United States General Accounting Office, </institution> <month> February </month> <year> 1992. </year>
Reference-contexts: and parallel database technology developed as part of the EXODUS [CDF + 86] 1 and Gamma [DGS + 90] projects to the task of imple-menting a parallel GIS system capable of managing extremely large (multi-terabyte) data sets such as those that will be produced by the upcoming NASA EOSDIS project <ref> [Car92] </ref>. The project is focusing its resources on algorithms, processing, and storage techniques, and not on making new contributions to the data modeling, query language, or user interface domains. Paradise supports storing, browsing, and querying of geographic data sets.
Reference: [Cat93] <author> R. G. G. Cattell, </author> <title> editor. "The Object Database Standard: ODMG-93". </title> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo, California, </address> <year> 1993. </year> <title> With contributions by T. </title> <editor> Attwood, J. Duhl, G. Ferran, M. Loomis and D. </editor> <publisher> Wade. </publisher>
Reference-contexts: For example, Paradise does not directly support set-valued attributes. We made this simplifying decision in order to avoid many of the implementation complexities associated with a full object-oriented data model. When the SHORE implementation of the ODMG standard <ref> [Cat93] </ref> object-oriented data model ODL is operational, we plan on switching to it. create extent Instrument (name String, type Integer, manual Text); create extent CloudCover ( cloudDensity Raster, measuringDevice ref Instrument, date Date); create extent Rivers (name String, shape Polyline, flood_plain Polygon, water_level Integer, levee_status Integer); create extent Cities (boundary Polygon,
Reference: [CDF + 86] <author> M. J. Carey, D. J. Dewitt, D. Frank, G. Graefe, M. Muralikrishna, J. E. Richardson, and E. J. Shekita. </author> <title> "The Architecture of the EXODUS Extensible DBMS". </title> <booktitle> In Proceedings of the 12th VLDB Conf., </booktitle> <month> September </month> <year> 1986. </year>
Reference-contexts: We began the Paradise (Parallel Data Information System) project in early 1993 [DLPY93] as a response to the challenges posed by the Sequoia benchmark [SFGM93]. The goal of the Paradise project is to apply the object-oriented and parallel database technology developed as part of the EXODUS <ref> [CDF + 86] </ref> 1 and Gamma [DGS + 90] projects to the task of imple-menting a parallel GIS system capable of managing extremely large (multi-terabyte) data sets such as those that will be produced by the upcoming NASA EOSDIS project [Car92].
Reference: [CDF + 94] <author> M. J. Carey, D. J. DeWitt, M. J. Franklin, N. E. Hall, M. McAuliffe, J. F. Naughton, D. T. Schuh, M. H. Solomon, C. K. Tan, O. Tsatalos, S. White, and M. J. Zwilling. </author> <title> "Shoring up Persistent Objects". </title> <booktitle> In Proceedings of the 1994 ACM-SIGMOD Conference, </booktitle> <address> "Min-neapolis, Minnesota", </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Paradise supports storing, browsing, and querying of geographic data sets. Its data model is an extended-relational data model, extended with raster, polygon, and poly-line ADTs and typed references. An extension of SQL is provided to support ad-hoc queries over extents of persistent objects. Paradise uses SHORE <ref> [CDF + 94] </ref> as its storage manager for persistent objects, and a graphical user interface that is built using Tk, a public domain X11 toolkit. At the outset, we organized the Paradise project as two phases. The goal of first phase was to produce a client-server version of Paradise. <p> A screen dump from the Paradise front-end is shown in Figure 4. 3.3 The Paradise Server The Paradise server uses SHORE <ref> [CDF + 94] </ref> as its underlying persistent object manager. The Paradise server is implemented as a SHORE Value Added Server (VAS) directly on top of the SHORE Storage Manager.
Reference: [DGS + 90] <author> D. J. DeWitt, S. Ghandeharizadeh, D. Schnei-der, A. Bricker, H. Hsiao, and R. Rasmussen. </author> <title> "The Gamma Database Machine Project". </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <month> March </month> <year> 1990. </year> <month> 11 </month>
Reference-contexts: The goal of the Paradise project is to apply the object-oriented and parallel database technology developed as part of the EXODUS [CDF + 86] 1 and Gamma <ref> [DGS + 90] </ref> projects to the task of imple-menting a parallel GIS system capable of managing extremely large (multi-terabyte) data sets such as those that will be produced by the upcoming NASA EOSDIS project [Car92].
Reference: [DLPY93] <author> D. J. DeWitt, J. Luo, J. M. Patel, and J. Yu. </author> <title> "Paradise A Parallel Geographic Information System". </title> <booktitle> In Proceedings of the ACM Workshop on Advances in Geographic Information Systems, </booktitle> <address> Arlington, Virginia, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: The third approach, as exemplified by Postgres [SR86], Gral [Gut89] Montage [Ube94], GEO [VvO92], and Paradise uses a integrated approach in which all data is stored in the database system. We began the Paradise (Parallel Data Information System) project in early 1993 <ref> [DLPY93] </ref> as a response to the challenges posed by the Sequoia benchmark [SFGM93].
Reference: [FK93] <author> C. Faloutsos and I. Kamel. </author> <title> "Packed R-Trees Using Fractals". </title> <booktitle> In Conference on Intelligence and Knowledge Management, </booktitle> <month> November </month> <year> 1993. </year>
Reference-contexts: Bulk loading builds the index bottom up and guarantees that each index page is only processed once. In order to improve the bulk load time while retaining the effectiveness of the resulting R*-tree, a tree packing algorithm must be used. Like <ref> [FK93] </ref>, our bulk load algorithm does spatial sorting using the Hilbert Curve. The Hilbert Curve was selected as it has better performance than other spatial ordering curves (e.g. Z-ordering, Grey code, column-scan) in a spatial query processing domain [Jag90]. However, unlike [FK93], our algorithm does not pack the leaves of the <p> Like <ref> [FK93] </ref>, our bulk load algorithm does spatial sorting using the Hilbert Curve. The Hilbert Curve was selected as it has better performance than other spatial ordering curves (e.g. Z-ordering, Grey code, column-scan) in a spatial query processing domain [Jag90]. However, unlike [FK93], our algorithm does not pack the leaves of the R*-tree to 100% utilization as we discovered (through simulation) that doing so may not generate a well structured R*-tree when the input data is not distributed uniformly.
Reference: [FW91] <author> E. Famma and A. Weinand. </author> <title> "ET++3.0 Introduction and Installation". </title> <institution> UBILAB, Union Bank of Switzerland, </institution> <year> 1991. </year>
Reference-contexts: In this section, we will describe our approach to developing such an user front-end for Paradise. Our first attempt at a front-end used GEO, a C++ based, graphical user interface for geographical database systems [vOV91]. GEO uses the ET++ class libraries <ref> [FW91] </ref> (based on X11) as its display vehicle and Postgres [SR86] as its underlying spatial database management system. GEO provides both a graphical browser for viewing spatial data and a graphical interface for composing ad-hoc queries. We converted GEO to use Paradise instead of Post-gres as its database server.
Reference: [Gre89] <author> D. Greene. </author> <title> "An Implementation and Performance Analysis of Spatial Data Access Methods". </title> <booktitle> In Proc. of the 5th Data Engineering Conf., </booktitle> <year> 1989. </year>
Reference-contexts: Grid files [NHS84] and KDB-trees [Rob81] were not considered as these multidimensional access methods do not do a good job of handling non-point spatial data <ref> [Gre89] </ref>. R + - trees [TS87] (another variant of the R-tree [Gut84]) reduce the overlap between nodes by duplicating spatial objects across different nodes. However, when a full node in an R + -tree is split, the split must be propagated in both a downwards and upwards direction.
Reference: [Gro93] <institution> The Postgres Group. </institution> <note> "Postgres 4.1 Reference Manual". </note> <institution> University of California, Berkeley, </institution> <address> CA, </address> <year> 1993. </year>
Reference-contexts: In either case, the front-end transforms a query into our extended SQL syntax and ships it to the Paradise server for execution. After executing the query, the server ships the result objects back to the client process through a Postgres-like portal mechanism <ref> [Gro93] </ref>. All communication between the front-end and server processes is in the form of remote procedure calls running over TCP/IP. 3.2 Paradise User Front-end Although the user interface is an important component of any database system, it is an especially important part of a GIS.
Reference: [GS91] <author> G. Graefe and L. D. Shapiro. </author> <title> "Data Compression and Database Performance". </title> <booktitle> In Proceedings of the ACM/IEEE-Computer Science Symposium on Applied Computing, </booktitle> <year> 1991. </year>
Reference-contexts: Then, each relevant tile of the input is read from the disk and processed by the clip operation. II) Compression as an Optimization Strategy While compression techniques have been widely used in many image processing domains, only occasionally have they been integrated directly into a database system <ref> [SWKH94, GS91] </ref>. Several problems arise when such an integration is attempted. First, the unit of compression is generally the entire image. This approach makes sense if the entire image is always required.
Reference: [Gut84] <author> A. Gutman. "R-trees: </author> <title> A Dynamic Index Structure for Spatial Searching". </title> <booktitle> In Proceedings of the 1984 ACM-SIGMOD Conference, </booktitle> <address> Boston, Mass, </address> <month> June </month> <year> 1984. </year>
Reference-contexts: Grid files [NHS84] and KDB-trees [Rob81] were not considered as these multidimensional access methods do not do a good job of handling non-point spatial data [Gre89]. R + - trees [TS87] (another variant of the R-tree <ref> [Gut84] </ref>) reduce the overlap between nodes by duplicating spatial objects across different nodes. However, when a full node in an R + -tree is split, the split must be propagated in both a downwards and upwards direction. This significantly complicates implementing concur-rency control and recovery.
Reference: [Gut89] <author> R. H. Guting. </author> <title> "Gral: An Extensible Relational Database System for Geometric Applications". </title> <booktitle> In Proceedings of the 15th VLDB Conf., </booktitle> <month> August </month> <year> 1989. </year>
Reference-contexts: While the hybrid approach has been quite successful, it complicates query optimization and execution, especially in a multiuser environment. The third approach, as exemplified by Postgres [SR86], Gral <ref> [Gut89] </ref> Montage [Ube94], GEO [VvO92], and Paradise uses a integrated approach in which all data is stored in the database system. We began the Paradise (Parallel Data Information System) project in early 1993 [DLPY93] as a response to the challenges posed by the Sequoia benchmark [SFGM93].
Reference: [HHK + 93] <author> W. Hasan, M. Heytens, C. Kolovson, M. A. Neimat, S. Potamianos, and D. Schneider. </author> <title> "Papyrus GIS Demonstration". </title> <booktitle> In Proceedings of the 1993 ACM-SIGMOD Conference, </booktitle> <address> Washington, D.C., </address> <month> May </month> <year> 1993. </year>
Reference-contexts: From a traditional database perspective these systems are very limited in terms of functionality especially with respect to query optimization and processing, transaction support, concurrency control, and physical data independence. Other GIS systems <ref> [Mor92, HHK + 93] </ref>, employ a hybrid approach in which a traditional relational database manager is used to store non-spatial data with the spatial data going into either the file system (ARC/INFO) or a spatial data manager (Papyrus).
Reference: [Jag90] <author> H. V. Jagadish. </author> <title> "Linear Clustering of Objects with Multiple Attributes". </title> <booktitle> In Proceedings of the 1990 ACM-SIGMOD Conference, </booktitle> <month> May </month> <year> 1990. </year>
Reference-contexts: Like [FK93], our bulk load algorithm does spatial sorting using the Hilbert Curve. The Hilbert Curve was selected as it has better performance than other spatial ordering curves (e.g. Z-ordering, Grey code, column-scan) in a spatial query processing domain <ref> [Jag90] </ref>. However, unlike [FK93], our algorithm does not pack the leaves of the R*-tree to 100% utilization as we discovered (through simulation) that doing so may not generate a well structured R*-tree when the input data is not distributed uniformly.
Reference: [LCV88] <author> M. A. Linton, P. R. Calder, and J. M. Vlissides. "InterViews: </author> <title> A C++ Graphical Interface Toolkit". </title> <type> Technical Report CSL-TR-88-358, </type> <institution> Stanford University, </institution> <month> July </month> <year> 1988. </year>
Reference-contexts: The approach was simple: "clone" GEO's "look and feel" while avoiding the limitations of the current GEO implementation. The new Paradise front-end is implemented using Tk [Ous91], a publicly available X11 toolkit based on a lightweight interpretive command language Tcl [Ous90]. Using Tk, instead of ET++ or Interviews <ref> [LCV88] </ref>, resulted in a dramatic reduction 2 in the size and complexity of the front-end, without apparently sacrificing performance. The key features of the Paradise front-end include: * Display of objects with spatial attributes on a 2-D map.
Reference: [MGR91] <author> D. J. Maguire, M. F. Goodchild, and D. W. </author> <title> Rhind. </title> <journal> "Geographic Information Systems", </journal> <volume> volume 1. </volume> <publisher> Longman Scientific & Technical, copublished in the US with John Wiley & Sons, Inc. </publisher> <address> New York, </address> <year> 1991. </year>
Reference-contexts: 1 Introduction Over the last five years interest in Geographic Information Systems (GIS) has increased significantly. Existing systems represent an integration of ideas from many different fields including remote sensing, pho-togrammetry, and computer cartography <ref> [MGR91] </ref>. In turn, new application domains have placed additional demands on existing systems. For example, GIS systems are now being used to store and process vast amounts of remote-sensed data gathered from sensors on satellites. These satellites scan the surface of the earth, measuring certain electromagnetic properties of the surface. <p> Raster images, specially those used for studying large portions of the earth surface, can thus be very big. For example, the National Oceanographic and Atmospheric Administration (NOAA) Advanced Very High Resolution Radiometer (AVHRR) has a cell size of approximately 1.1km x 1.1km (at the nadir) <ref> [MGR91] </ref>. If the size of each cell value is 2 bytes, each raster image for a region corresponding to the United States (5500km x 3000km) will consume about 27 MBytes of space.
Reference: [Mor92] <author> S. Morehouse. </author> <title> "The ARC/INFO Geographic Information System". </title> <journal> Computers and Geosciences: An International Journal, </journal> <volume> 18(4), </volume> <month> August </month> <year> 1992. </year>
Reference-contexts: From a traditional database perspective these systems are very limited in terms of functionality especially with respect to query optimization and processing, transaction support, concurrency control, and physical data independence. Other GIS systems <ref> [Mor92, HHK + 93] </ref>, employ a hybrid approach in which a traditional relational database manager is used to store non-spatial data with the spatial data going into either the file system (ARC/INFO) or a spatial data manager (Papyrus).
Reference: [MP94] <author> C. B. Medeiros and F. Pires. </author> <title> "Databases for GIS". </title> <booktitle> In SIGMOD Record, </booktitle> <month> March </month> <year> 1994. </year>
Reference-contexts: In addition to providing an expressive data model and query language, a GIS must also provide an efficient mechanism for performing operations on spatial data if it is to successfully process spatial queries on large volumes of data. Existing GIS systems employ a variety of different architectures <ref> [MP94] </ref>. Some systems (e.g. GRASS [Sea92]) store all data in normal operating system files, providing a library of functions for retrieving, manipulating, and displaying data.
Reference: [NHS84] <author> J. Nievergelt, H. Hinterberger, and K. C. Sevcik. </author> <title> "The Grid File: An Adaptable, Symmetric Multikey File Structure". </title> <journal> ACM Transactions on Database Systems, </journal> <month> March </month> <year> 1984. </year>
Reference-contexts: R*-trees were selected because of their efficacy and "relative" ease of implementation, especially since we could reuse a lot of the existing SHORE B + -tree code. Grid files <ref> [NHS84] </ref> and KDB-trees [Rob81] were not considered as these multidimensional access methods do not do a good job of handling non-point spatial data [Gre89]. R + - trees [TS87] (another variant of the R-tree [Gut84]) reduce the overlap between nodes by duplicating spatial objects across different nodes.
Reference: [Ous90] <author> J. Ousterhout. </author> <title> "Tcl: An embeddable command language". </title> <booktitle> In Proceedings of the 1990 Winter USENIX Conference, </booktitle> <year> 1990. </year>
Reference-contexts: The approach was simple: "clone" GEO's "look and feel" while avoiding the limitations of the current GEO implementation. The new Paradise front-end is implemented using Tk [Ous91], a publicly available X11 toolkit based on a lightweight interpretive command language Tcl <ref> [Ous90] </ref>. Using Tk, instead of ET++ or Interviews [LCV88], resulted in a dramatic reduction 2 in the size and complexity of the front-end, without apparently sacrificing performance. The key features of the Paradise front-end include: * Display of objects with spatial attributes on a 2-D map.
Reference: [Ous91] <author> J. Ousterhout. </author> <title> "An X11 toolkit based on the Tcl language". </title> <booktitle> In Proceedings of the 1991 Winter USENIX Conference, </booktitle> <year> 1991. </year>
Reference-contexts: Given these limitations we reluctantly decided that the best solution was to write our own interface. The approach was simple: "clone" GEO's "look and feel" while avoiding the limitations of the current GEO implementation. The new Paradise front-end is implemented using Tk <ref> [Ous91] </ref>, a publicly available X11 toolkit based on a lightweight interpretive command language Tcl [Ous90]. Using Tk, instead of ET++ or Interviews [LCV88], resulted in a dramatic reduction 2 in the size and complexity of the front-end, without apparently sacrificing performance.
Reference: [Rob81] <author> J. T. Robinson. </author> <title> "The K-D-B Tree: A Search Structure for Large Multidimensional Dynamic Indexes". </title> <booktitle> In Proceedings of the 1981 ACM-SIGMOD Conference, </booktitle> <month> April </month> <year> 1981. </year>
Reference-contexts: R*-trees were selected because of their efficacy and "relative" ease of implementation, especially since we could reuse a lot of the existing SHORE B + -tree code. Grid files [NHS84] and KDB-trees <ref> [Rob81] </ref> were not considered as these multidimensional access methods do not do a good job of handling non-point spatial data [Gre89]. R + - trees [TS87] (another variant of the R-tree [Gut84]) reduce the overlap between nodes by duplicating spatial objects across different nodes.
Reference: [Sam89] <author> H. Samet. </author> <title> "The Design and Analysis of Spatial Data Structures". </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: Currently, only the basic LZW algorithm [Wel84] is used for compression and all raster objects are decomposed into rectangular shaped tiles. In the future, we plan on adding fancier, domain specific compression algorithms. We are also considering adopting the Quadtree <ref> [Sam89] </ref> approach, which has the additional advantage of improving the performance for certain types of spatial analysis on raster objects. 4 Performance Evaluation To evaluate the performance of Paradise, we used the Sequoia 2000 Storage Benchmark [SFGM93].
Reference: [Sea92] <author> Michael Shapiro and et. al. </author> <title> "GRASS 4.0 Programmer's Manual". </title> <type> U.S. </type> <institution> Army Consrtuction Engineering Research Laboraroty, </institution> <year> 1992. </year>
Reference-contexts: Existing GIS systems employ a variety of different architectures [MP94]. Some systems (e.g. GRASS <ref> [Sea92] </ref>) store all data in normal operating system files, providing a library of functions for retrieving, manipulating, and displaying data. From a traditional database perspective these systems are very limited in terms of functionality especially with respect to query optimization and processing, transaction support, concurrency control, and physical data independence.
Reference: [SFGM93] <author> M. Stonebraker, J. Frew, K. Gardels, and J. Meredith. </author> <title> "The SEQUOIA 2000 Storage Benchmark". </title> <booktitle> In Proceedings of the 1993 ACM-SIGMOD Conference, </booktitle> <address> Washington, D.C., </address> <month> May </month> <year> 1993. </year>
Reference-contexts: We began the Paradise (Parallel Data Information System) project in early 1993 [DLPY93] as a response to the challenges posed by the Sequoia benchmark <ref> [SFGM93] </ref>. <p> We are also considering adopting the Quadtree [Sam89] approach, which has the additional advantage of improving the performance for certain types of spatial analysis on raster objects. 4 Performance Evaluation To evaluate the performance of Paradise, we used the Sequoia 2000 Storage Benchmark <ref> [SFGM93] </ref>. The Se-quoia benchmark uses real data sets and defines a suite of 11 queries that were chosen to be representative of the queries that earth scientists frequently pose to such a system. The benchmark has four different scales of data. <p> While the national benchmark will fit on a moderate-size secondary storage system, the earth benchmark clearly requires the use of a tertiary storage system. A brief description of the regional benchmark follows (for more details, readers are referred to the original benchmark paper <ref> [SFGM93] </ref>). 4.1 Description of the Regional Benchmark The regional benchmark comprises of data corresponding to a 1280km X 800km rectangular region, covering parts of California and Nevada. The data set for this benchmark primarily consists of the following different data sets. * Raster data. <p> benchmark consists of the following extents create extent raster (time Integer, frequency Integer, data Raster); create extent polygon (landuse Integer, shape ClosedPolygon); create extent point (location Point, name String); create extent graph (shape PolyLine); A brief description of the queries 1 : : : 10 follows (for more details see <ref> [SFGM93] </ref>). Terms in a query in all capitals (e.g. FREQ, RECT ...) are constants. Query 1: Loads all the data files and builds a clustered R fl -tree on "point.location" and "polygon.shape". Non-clustered B + -tree indices are constructed on "raster.frequency", "raster.time", "point.name" and "polygon.landuse". <p> The scripts for POSTGRES and Illustra are modified versions of the scripts that we had received from the developers. A few modification were made to the scripts provided by POSTGRES and Illustra in order to exactly match the the benchmark originally specified in <ref> [SFGM93] </ref>. For example, the scripts that we received used a value of 50 meters for the constant SIDE_VAL in query 8 (refer to section 4.1 for the query). However, the value specified for this in the original benchmark [SFGM93] is 50,000 meters. <p> Illustra in order to exactly match the the benchmark originally specified in <ref> [SFGM93] </ref>. For example, the scripts that we received used a value of 50 meters for the constant SIDE_VAL in query 8 (refer to section 4.1 for the query). However, the value specified for this in the original benchmark [SFGM93] is 50,000 meters. Paradise cannot run query 10 because the minus operator is not currently implemented. The numbers for the three systems are shown in Table 3.
Reference: [SR86] <author> M. Stonebraker and L. A. Rowe. </author> <title> "The Design of Postgres". </title> <booktitle> In Proceedings of the 1986 ACM-SIGMOD Conference, </booktitle> <year> 1986. </year>
Reference-contexts: While the hybrid approach has been quite successful, it complicates query optimization and execution, especially in a multiuser environment. The third approach, as exemplified by Postgres <ref> [SR86] </ref>, Gral [Gut89] Montage [Ube94], GEO [VvO92], and Paradise uses a integrated approach in which all data is stored in the database system. We began the Paradise (Parallel Data Information System) project in early 1993 [DLPY93] as a response to the challenges posed by the Sequoia benchmark [SFGM93]. <p> Our first attempt at a front-end used GEO, a C++ based, graphical user interface for geographical database systems [vOV91]. GEO uses the ET++ class libraries [FW91] (based on X11) as its display vehicle and Postgres <ref> [SR86] </ref> as its underlying spatial database management system. GEO provides both a graphical browser for viewing spatial data and a graphical interface for composing ad-hoc queries. We converted GEO to use Paradise instead of Post-gres as its database server. <p> With a larger selectivity, we would have observed a bigger difference in the performance of the two cases. 4.4 Comparison with Other Systems In this section, we compare Paradise with two other systems, namely POSTGRES <ref> [SR86] </ref> and Illustra (formerly called Montage [Ube94]). In [Sto94] it was shown that these systems outperformed GRASS and IPW, two popular GIS systems. The machine used for the benchmark was a Sun SPARC-10/40 with 32 MBytes of memory, running SunOS Release 4.1.3.
Reference: [Sto86] <author> M. Stonebraker. </author> <title> "The Case for Shared Nothing". </title> <journal> Database Engineering, </journal> <volume> 9(1), </volume> <year> 1986. </year>
Reference-contexts: At the outset, we organized the Paradise project as two phases. The goal of first phase was to produce a client-server version of Paradise. The second phase of the project is to parallelize the Paradise server to operate on a shared-nothing <ref> [Sto86] </ref> multiprocessor (our target multiprocessor platform is a 64 processor/64 disk Intel Paragon). The first phase is now complete and is described in this paper. <p> Paradise's performance is competitive with other systems when executing queries from the Sequoia benchmark. During the next phase of the project we will add support for tertiary storage and extend the software to run on "shared nothing" multiprocessors <ref> [Sto86] </ref>. 6 Acknowledgement We would like to thank C. K.
Reference: [Sto94] <author> M. Stonebraker, </author> <title> editor. </title> <booktitle> "Readings in Database Systems", </booktitle> <pages> pages 492-505. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1994. </year>
Reference-contexts: With a larger selectivity, we would have observed a bigger difference in the performance of the two cases. 4.4 Comparison with Other Systems In this section, we compare Paradise with two other systems, namely POSTGRES [SR86] and Illustra (formerly called Montage [Ube94]). In <ref> [Sto94] </ref> it was shown that these systems outperformed GRASS and IPW, two popular GIS systems. The machine used for the benchmark was a Sun SPARC-10/40 with 32 MBytes of memory, running SunOS Release 4.1.3.
Reference: [SWKH94] <author> M. Stonebraker, E. Wong, P. Kreps, and G. </author> <title> Held. </title> <booktitle> "The Design and Implementation of INGRES", </booktitle> <pages> pages 37-53. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1994. </year>
Reference-contexts: Then, each relevant tile of the input is read from the disk and processed by the clip operation. II) Compression as an Optimization Strategy While compression techniques have been widely used in many image processing domains, only occasionally have they been integrated directly into a database system <ref> [SWKH94, GS91] </ref>. Several problems arise when such an integration is attempted. First, the unit of compression is generally the entire image. This approach makes sense if the entire image is always required.
Reference: [TS87] <author> C. Faloutsos T. Sellis, N. Roussopoulos. </author> <title> "The R + -Tree: A Dynamic Index for Multi-Dimensional Objects". </title> <booktitle> In Proceedings of the 13th VLDB Conf., </booktitle> <month> Septem-ber </month> <year> 1987. </year>
Reference-contexts: Grid files [NHS84] and KDB-trees [Rob81] were not considered as these multidimensional access methods do not do a good job of handling non-point spatial data [Gre89]. R + - trees <ref> [TS87] </ref> (another variant of the R-tree [Gut84]) reduce the overlap between nodes by duplicating spatial objects across different nodes. However, when a full node in an R + -tree is split, the split must be propagated in both a downwards and upwards direction.
Reference: [Ube94] <author> M. Ubell. </author> <title> "The Montage Extensible DataBlade Architecture". </title> <booktitle> In Proceedings of the 1994 ACM-SIGMOD Conference, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: While the hybrid approach has been quite successful, it complicates query optimization and execution, especially in a multiuser environment. The third approach, as exemplified by Postgres [SR86], Gral [Gut89] Montage <ref> [Ube94] </ref>, GEO [VvO92], and Paradise uses a integrated approach in which all data is stored in the database system. We began the Paradise (Parallel Data Information System) project in early 1993 [DLPY93] as a response to the challenges posed by the Sequoia benchmark [SFGM93]. <p> With a larger selectivity, we would have observed a bigger difference in the performance of the two cases. 4.4 Comparison with Other Systems In this section, we compare Paradise with two other systems, namely POSTGRES [SR86] and Illustra (formerly called Montage <ref> [Ube94] </ref>). In [Sto94] it was shown that these systems outperformed GRASS and IPW, two popular GIS systems. The machine used for the benchmark was a Sun SPARC-10/40 with 32 MBytes of memory, running SunOS Release 4.1.3.
Reference: [vOV91] <author> P. van Oosterom and T. Vijlbrief. </author> <title> "Building a GIS on Top of the Open DBMS Postgres". </title> <booktitle> In Proceedings EGIS'91, Second European Conference on Geographical Information Systems, </booktitle> <month> April </month> <year> 1991. </year>
Reference-contexts: In this section, we will describe our approach to developing such an user front-end for Paradise. Our first attempt at a front-end used GEO, a C++ based, graphical user interface for geographical database systems <ref> [vOV91] </ref>. GEO uses the ET++ class libraries [FW91] (based on X11) as its display vehicle and Postgres [SR86] as its underlying spatial database management system. GEO provides both a graphical browser for viewing spatial data and a graphical interface for composing ad-hoc queries.
Reference: [VvO92] <author> T. Vijlbrief and P. van Oosterom. </author> <title> "The GEO System: an Extensible GIS". </title> <booktitle> In Proceedings of the International Symposium on Spatial Data Handling, </booktitle> <address> Charleston, South Carolina, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: While the hybrid approach has been quite successful, it complicates query optimization and execution, especially in a multiuser environment. The third approach, as exemplified by Postgres [SR86], Gral [Gut89] Montage [Ube94], GEO <ref> [VvO92] </ref>, and Paradise uses a integrated approach in which all data is stored in the database system. We began the Paradise (Parallel Data Information System) project in early 1993 [DLPY93] as a response to the challenges posed by the Sequoia benchmark [SFGM93].
Reference: [Wel84] <author> T.A. Welch. </author> <title> "A Technique for High-Performance Data Compression". </title> <journal> IEEE Computer, </journal> <volume> 17(6), </volume> <year> 1984. </year>
Reference-contexts: If compression does not reduce the size of the tile significantly, we store the tile in its uncompressed form (a flag in the mapping table is used to indicate whether or not a tile is compressed). Currently, only the basic LZW algorithm <ref> [Wel84] </ref> is used for compression and all raster objects are decomposed into rectangular shaped tiles. In the future, we plan on adding fancier, domain specific compression algorithms.
Reference: [Zan83] <author> C. Zaniolo. </author> <title> "The Database Lanaguage GEM". </title> <booktitle> In Proceedings of the 1983 ACM-SIGMOD Conference, </booktitle> <month> May </month> <year> 1983. </year> <month> 12 </month>
Reference-contexts: To SQL we have added the ability to invoke methods defined on the ADTs, and the ability to follow inter-object references using the standard nested dot notation <ref> [Zan83] </ref> for accessing components of complex objects (i.e. x.y.z). Consider the schema shown in Figure 1.
References-found: 38

