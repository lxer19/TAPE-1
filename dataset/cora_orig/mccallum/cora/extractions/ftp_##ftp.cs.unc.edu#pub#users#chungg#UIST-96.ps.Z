URL: ftp://ftp.cs.unc.edu/pub/users/chungg/UIST-96.ps.Z
Refering-URL: http://www.cs.unc.edu/~chungg/UIST96.html
Root-URL: http://www.cs.unc.edu
Email: -chungg,dewan-@cs.unc.edu  
Title: A Mechanism for Supporting Client Migration in a Shared Window System  
Author: Goopeel Chung Prasun Dewan 
Keyword: multiuser interface, collaborative system, logging, groupware, migration, window system, replication  
Address: Chapel Hill, NC 27599-3175  
Affiliation: Department of Computer Science University of North Carolina at Chapel Hill  
Abstract: Migrating collaborative applications to or near the workstations of active users can offer better performance in many scenarios. We have developed a client migration mechanism for centralized shared window systems that does not require changes to existing application and system software. It is based on logging input at the old site and replaying it at the new site. This approach raises several difficult questions: How should the log size be kept low? How should response time be kept low while migration is in progress? How should applications that depend on the rate at which input is received be accommodated? How should the transition from the replay phase to the play phase be detected at the new site? How should the software at the old and new sites be synchronized? We have developed a series of alternative approaches for answering these questions and implemented them in the XTV [1] shared window system. In this paper, we motivate, describe, illustrate and evaluate these approaches, and outline how they are implemented. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Abdel-Wahab, H, M. & Feit, M. A., XTV: </author> <title> A Framework for Sharing X Window Clients in Remote Synchronous Collaboration, Proceedings, IEEE Con fer en ce o n Co mm uni ca tions So ftware : Communications for Distributed Applications & Systems, </title> <address> Chapel Hill, NC, </address> <month> April </month> <year> 1991, </year> <month> pp.159-167. </month>
Reference-contexts: As mentioned earlier, we can categorize shared window systems into centralized and replicated systems. In centralized systems such as XTV <ref> [1] </ref>, requests from the single copy of a shared application are distributed to multiple display servers, and input events from the servers are delivered to the shared application. In replicated shared window systems such as MMConf [10], a copy of the application runs at every site in the conference.
Reference: 2. <author> Artsy, Y. & Finkel, R. </author> , <title> Designing a Process Migration Facility: </title> <booktitle> The Charlotte Experience, IEEE Computer, </booktitle> <year> 1989, </year> <month> pp.47-56. </month>
Reference-contexts: In order to facilitate this, the migration system needs the state information regarding the process such as the process' address space, information on opened files, register values, and links to other processes. Many process migration systems such as DEMOS/MP [15], Charlotte <ref> [2] </ref> and MOS [3,4] use migration-aware kernels to automatically extract and ship this state information to the destination processor, where the process context is rebuilt before resuming execution.
Reference: 3. <author> Barak, A. & Shiloh, A. </author> , <title> A Distributed Load-balancing Policy for a Multicomputer, </title> <journal> Software Practice and Experience, Vol.15 No.9, </journal> <month> September </month> <year> 1985, </year> <month> pp.901-913. </month>
Reference: 4. <author> Barak, A. & Litman, A., </author> <title> Mos: A Multicomput er Distributed Operating System, </title> <journal> Software Practice and Experience, Vol.15 No.8, </journal> <month> August </month> <year> 1985, </year> <month> pp.725-737. </month>
Reference: 5. <author> Bharat, K. & Cardelli, L., </author> <title> Migratory Applications, </title> <booktitle> Proceedings of UIST '95, </booktitle> <address> pp.133-142. </address>
Reference: 6. <author> Bharat, K., Hudson, S . & Sukaviriya, N., </author> <title> Synthesized Interaction on the X Window System, </title> <institution> GVU Center, Georgia Tech, </institution> <type> Technical Report #95-07. </type>
Reference: 7. <author> Black, A., Hu tchinson, N., Jul, E., Levy, H. & Carter, L., </author> <title> Distribution and Abstract Types in Emerald, </title> <journal> IEEE Transactions on Software Engineering, Vol.SE-13, </journal> <volume> No.1, </volume> <month> January </month> <year> 1987, </year> <month> pp.65-76. </month>
Reference: 8. <author> Chang, R.N. & Ravishankar, </author> <title> C.V., A Service A c q u i s i ti o n M e c h a ni s m f o r Se r v e r Based Heterogeneous Distributed Systems, </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <month> February </month> <year> 1994, </year> <month> pp.154-168. </month>
Reference: 9. <author> Chung, G., Jeffay, K. & Abdel-Wahab, H., </author> <title> Dynamic Participation in Computer-based Conferencing System, </title> <journal> Journal of Computer Communications , 17(1) </journal> <pages> 7-16, </pages> <month> January </month> <year> 1994. </year>
Reference: 10. <author> Crowley, T., Milazzo, P., Baker, E., Forsdick, H. & Tomlinson, R. , MMConf: </author> <title> An Infrastructure for Building Shared Multimedia Applications, </title> <booktitle> CSCW '90 Proceedings, </booktitle> <month> October </month> <year> 1990, </year> <month> pp.329-342. </month>
Reference-contexts: In centralized systems such as XTV [1], requests from the single copy of a shared application are distributed to multiple display servers, and input events from the servers are delivered to the shared application. In replicated shared window systems such as MMConf <ref> [10] </ref>, a copy of the application runs at every site in the conference. Input from each server is distributed to each copy, and output from each copy is delivered only to the local display server. The replicated architecture offers better performance.
Reference: 11. <author> Hoare, </author> <title> C.A.R ., Communicating Sequential Processes, </title> <journal> CACM, </journal> <volume> Volume 21, </volume> <month> August </month> <year> 1978, </year> <pages> pp. 666-677. </pages>
Reference: 12. <author> Johansen, D., Renesse, R. & Schneider, </author> <title> F.B. , Operating System Support for Mobile Agents, </title> <booktitle> IEEE Computer, </booktitle> <month> September </month> <year> 1989, </year> <month> pp.42-45. </month>
Reference: 13. <author> Joseph, A.D., deLespinasse, A.F., Tauber, J.A., Gifford, D.K. & Kaashoek, M.F. </author> , <title> Rover: A Toolki t for Mobile Information Access, </title> <booktitle> Proceedings of the Fifteenth Symposium on Operating Systems Principles, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: This can result in different copies of the client receiving different sequences of input events. Some of these problems are caused by the need to fully synchronize all replicas by sending each input event immediately to all replicas. An alternative, ''lazy'', method of synchronization, is provided by the Rover <ref> [13] </ref> caching scheme developed to support mobile computing. Like a replicated window system, Rover creates multiple copies of an application, one at a fixed host, and another on the mobile client. Since the client and host are not always connected, Rover cannot provide full synchronization.
Reference: 14. <author> Jul, E., Levy, H., Hutchinson, N. & Black, A., </author> <title> Fine-Grained Mobility in the Emerald System, </title> <journal> ACM Transactions on Computer Systems , Vol.6 No.1, </journal> <month> February </month> <year> 1988, </year> <month> pp.109-133. </month>
Reference: 15. <author> Powell, </author> <title> M.L. & Miller, B.P., Process Migration in DEMOS/MP, </title> <booktitle> Proceedings of the Sixth ACM Symposium on Operating System Principles, Novem ber 1983, </booktitle> <address> pp.110-119. </address>
Reference-contexts: In order to facilitate this, the migration system needs the state information regarding the process such as the process' address space, information on opened files, register values, and links to other processes. Many process migration systems such as DEMOS/MP <ref> [15] </ref>, Charlotte [2] and MOS [3,4] use migration-aware kernels to automatically extract and ship this state information to the destination processor, where the process context is rebuilt before resuming execution.
References-found: 15

