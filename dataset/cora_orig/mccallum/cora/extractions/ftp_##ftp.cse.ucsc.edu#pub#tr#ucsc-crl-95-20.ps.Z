URL: ftp://ftp.cse.ucsc.edu/pub/tr/ucsc-crl-95-20.ps.Z
Refering-URL: ftp://ftp.cse.ucsc.edu/pub/tr/README.html
Root-URL: http://www.cse.ucsc.edu
Title: Mix&Match A Construction Kit for Scientific Visualization  
Author: Dr. Alex Pang Dr. Patrick Mantey Dr. Glen Langdon Dean 
Degree: A dissertation submitted in partial satisfaction of the requirements for the degree of Doctor of Philosophy in Computer Engineering by Naim Alper  The dissertation of Naim Alper is approved:  
Date: March 1995  
Affiliation: University of California Santa Cruz  of Graduate Studies and Research  
Abstract-found: 0
Intro-found: 1
Reference: [A + 92] <author> J. Almond et al. </author> <title> Visualization `91 workshop report: Scientific visualization environments. </title> <journal> Computer Graphics, </journal> <volume> 26(3):213 - 216, </volume> <year> 1992. </year>
Reference-contexts: This classification leads to a discussion of which techniques are more amenable to be adapted to the spray rendering model. 3.1 Scientific Data In the most general case, a simple definition <ref> [A + 92] </ref> treats scientific data abstractly as a mapping between an n-dimensional space of independent variables x and an m-dimensional space of dependent variables y.
Reference: [AHH + 94] <author> Ricardo S. Avila, Taosong He, Lichan Hong, Arie. E. Kaufman, Hanspeter Pfister, Claudio Silva, Lisa M. Sobierajski, and Sidney Wang. VolVis: </author> <title> A diversified volume visualization system. </title> <booktitle> In Proceedings: Visualization '94, </booktitle> <pages> pages 31 - 38. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1994. </year>
Reference-contexts: Only rectilinear grids are supported. The Ultra product can mix geometry with volume data. * VolVis, SUNY Stony Brook. This is a framework for volume visualization algorithms <ref> [ASK92, AHH + 94] </ref>. It is supported by a generalized abstract model which provides for both geometric and volumetric constructs. The techniques supported include a fast volume rendering algorithm as well as costly, realistic ray-tracing. Tools include 3D manipulation, key-frame animation and quantitative analysis. * Vis-5D, University of Wisconsin.
Reference: [Amk89] <author> S. Amkraut. Flock: </author> <title> A behavioral model for computer animation. </title> <type> Master's thesis, </type> <institution> Ohio State University, </institution> <year> 1989. </year> <title> Art Education. </title>
Reference-contexts: The constraints, such as collision avoidance and maintained average speed, endow the group as a whole with a behavior. This mimics the behavior of a school of fish or a flock of birds rather well <ref> [Rey87, Amk89] </ref>. In the light of the above techniques and an object oriented preliminary design, sparts were to have a state consisting of certain attributes such as age and appearance, and certain methods to affect that state such as: target function, direction function, death function etc.
Reference: [ASK92] <author> Ricardo S. Avila, Lisa M. Sobierajski, and Arie. E. Kaufman. </author> <title> Towards a comprehensive volume visualization system. </title> <booktitle> In Proceedings: Visualization '92, </booktitle> <pages> pages 13 - 20. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1992. </year>
Reference-contexts: Only rectilinear grids are supported. The Ultra product can mix geometry with volume data. * VolVis, SUNY Stony Brook. This is a framework for volume visualization algorithms <ref> [ASK92, AHH + 94] </ref>. It is supported by a generalized abstract model which provides for both geometric and volumetric constructs. The techniques supported include a fast volume rendering algorithm as well as costly, realistic ray-tracing. Tools include 3D manipulation, key-frame animation and quantitative analysis. * Vis-5D, University of Wisconsin.
Reference: [AVS92] <author> AVS. </author> <title> AVS Technical Overview. Advanced Visual Systems Inc., </title> <address> Waltham, MA, </address> <year> 1992. </year> <title> Part Number 320-0018-02, Rev. </title> <publisher> A. </publisher>
Reference-contexts: It is especially tailored for computational fluid dynamics needs. Modular Visualization Environments * Advanced Visualization System (AVS), AVS Inc. This is the earliest, general purpose, data flow based visualization system that has a wide user community <ref> [Ups89, Wet90b, AVS92, Bel93] </ref>. The architecture consists of five layers. At the bottom is the system interface layer that supports native graphics libraries of the platforms AVS runs on.
Reference: [BAWW90] <author> D. L. Brittain, J. Aller, M. Wilson, and S. C. Wang. </author> <title> Design of an end-user data visualization system. </title> <booktitle> In Proceedings: Visualization '90, </booktitle> <pages> pages 323 - 328. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1990. </year>
Reference-contexts: This category has become very popular because it is flexible and caters to users of different levels of expertise. 2.1.1 Turnkey Visualization Systems * The Data Visualizer, Wavefront Technologies Inc. The Data Visualizer offers a traditional, menu-driven application interface and primarily deals with 3D data <ref> [BAWW90, Mer91, Bel93] </ref>. Version 2.1 also supports a command language interface. The architecture is tool-oriented where each tool is an instance of a visualization method. A Visualization Tool Manager accepts input from the user and manages the creation and manipulation of various tools.
Reference: [Bel87] <author> R. G. Belie. </author> <title> Some advances in digital flow visualization. </title> <booktitle> In AIAA Aerospace Sciences Conference, </booktitle> <address> Reno, NV, </address> <month> January </month> <year> 1987. </year> <month> AIAA-87-1179. </month>
Reference-contexts: Stream lines or tubes only give the path. One cannot obtain rotation information from these techniques. To alleviate this problem, stream ribbons have been used. In this case, the path of two particles are traced and polygons are generated from their joint path <ref> [Bel87, Vol89] </ref>. Since flow fields diverge, ribbons may need to be adaptively split to get better polygonal representations. Hultquist has proposed an advancing front method that achieves this more efficiently [Hul92].
Reference: [Bel93] <author> A.J.C. Belien. </author> <title> Comparison of visualization techniques and packages. </title> <type> Technical report, </type> <address> Stichting Academisch Rekencentrum Amsterdam, Amsterdam, The Netherlands, </address> <year> 1993. </year> <note> ISBN 90-72490-08-8. </note>
Reference-contexts: This category has become very popular because it is flexible and caters to users of different levels of expertise. 2.1.1 Turnkey Visualization Systems * The Data Visualizer, Wavefront Technologies Inc. The Data Visualizer offers a traditional, menu-driven application interface and primarily deals with 3D data <ref> [BAWW90, Mer91, Bel93] </ref>. Version 2.1 also supports a command language interface. The architecture is tool-oriented where each tool is an instance of a visualization method. A Visualization Tool Manager accepts input from the user and manages the creation and manipulation of various tools. <p> It is especially tailored for computational fluid dynamics needs. Modular Visualization Environments * Advanced Visualization System (AVS), AVS Inc. This is the earliest, general purpose, data flow based visualization system that has a wide user community <ref> [Ups89, Wet90b, AVS92, Bel93] </ref>. The architecture consists of five layers. At the bottom is the system interface layer that supports native graphics libraries of the platforms AVS runs on. <p> While it supports different grid types, the modules provided do not support all types. A module called rezone maps variables from one grid type to another. Distributed applications are possible in apE. There is a post-processor for image processing. * Iris Explorer, Silicon Graphics Inc. Iris Explorer <ref> [Slo92, Edw93, Bel93] </ref> is another general purpose, data flow visualization system that has been bundled with Silicon Graphics machines. At the present time, it only runs on SGI machines but version 3.0 will be unbundled and ported to other machines. The architecture consists of five 11 layers. <p> Explorer offers a module prototyping facility through an interpretive language called shape. A scripting language called Skm allows scripting as well as a command language interface to the user. * IBM Visualization Data Explorer, IBM Corp. Data Explorer <ref> [LAC + 92, Bel93] </ref> has a client-server open system architecture that uses standard protocols and systems for portability. It consists of two components, the user interface (the client) and the executive (server) running as two separate processes communicating via Unix sockets.
Reference: [Bli82a] <author> J. F. </author> <title> Blinn. A generalization of algebraic surface drawing. </title> <journal> ACM Transaction on Graphics, </journal> <volume> 1(3):235 - 256, </volume> <year> 1982. </year>
Reference-contexts: To increase the efficiency, Wilhelms and Van Gelder [WVG90a] proposed a hierarchical approach while [Tur92, SZL92, MSS94] have proposed approaches to reduce the number of the primitives. Other related techniques for extracting and rendering surfaces use implicit surface methods <ref> [Bli82a, WMW86, Blo88] </ref>. 3.4.3 Direct Volume Rendering The term "direct" in Direct Volume Rendering emphasizes the distinguishing characteristic of the technique: no intermediate geometric primitives are produced, as is the case in isosurface extraction.
Reference: [Bli82b] <author> J. F. </author> <title> Blinn. Light reflection functions for simulation of clouds and dusty surfaces. </title> <journal> Computer Graphics, </journal> <volume> 16(3):21 - 29, </volume> <year> 1982. </year>
Reference-contexts: The ray-casting algorithms differ in the details of the model used for mapping to visual parameters. Sabella [Sab88] uses a simplified light scattering model that had been used for the image synthesis of natural phenomena such as clouds <ref> [Bli82b, KH84, Max86] </ref>. In his density emitter model, the volume is assumed to consist of light-emitting particles but instead of modeling the particles individually, he considers their density and derives a ray integral involving an exponential for the attenuated intensity along a ray.
Reference: [Blo88] <author> J. Bloomenthal. </author> <title> Polygonization of implicit surfaces. Computer-Aided Geometric Design, </title> <address> 5:341 - 355, </address> <year> 1988. </year>
Reference-contexts: To increase the efficiency, Wilhelms and Van Gelder [WVG90a] proposed a hierarchical approach while [Tur92, SZL92, MSS94] have proposed approaches to reduce the number of the primitives. Other related techniques for extracting and rendering surfaces use implicit surface methods <ref> [Bli82a, WMW86, Blo88] </ref>. 3.4.3 Direct Volume Rendering The term "direct" in Direct Volume Rendering emphasizes the distinguishing characteristic of the technique: no intermediate geometric primitives are produced, as is the case in isosurface extraction.
Reference: [BMP + 90] <author> G. V. Bancroft, F. J. Merritt, T. C. Plessel, P. G. Kelaita, R. K. McCabe, and A. Globus. </author> <title> FAST: A multi-processed environment for visualization of computational fluid dynamics. </title> <booktitle> In Proceedings: Visualization '90, </booktitle> <pages> pages 14 - 27. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1990. </year>
Reference-contexts: Scientists used many different programs to achieve specific visualization goals. Some domain-specific modular and extensible software packages evolved that included all the usual techniques encountered in a particular discipline <ref> [BMP + 90] </ref>. However, in the last few years a data flow paradigm has become very popular for general purpose, modular and extensible visualization software. <p> It can be used interac tively or it can be used to create functions, procedures and applications. * FAST, NASA Ames. FAST is a public domain program developed at NASA Ames for the visualization of fluid dynamics data <ref> [BMP + 90] </ref>. It is a collection of programs communicating through Unix sockets. A central hub process manages a pool of shared memory. A collection of libraries and utilities are provided for building application modules.
Reference: [BP89] <author> D. M. Butler and M. H. Pendley. </author> <title> A visualization model based on the mathematics of fiber bundles. </title> <journal> Computers in Physics, </journal> <volume> 3(5):45 - 51, </volume> <year> 1989. </year>
Reference-contexts: The goal is to link scientific visualization and DBMS technologies [SCN + 93, KASS93]. An interesting data model is one proposed by Butler and Pendley <ref> [BP89] </ref>, a model based on the mathematics of fiber bundles which was extended by Haber et al. [HLC91] to incorporate localized, piecewise field description.
Reference: [Bun88] <author> P. G. Buning. </author> <title> Sources of error in the graphical analysis of CFD results. </title> <journal> J. Sci. Comp., </journal> <volume> 3(2), </volume> <year> 1988. </year>
Reference-contexts: If this path consists of line segments, one gets so-called streamlines. The line segments can be colored according to the magnitude of the vector to give extra information. Issues such as the integration method, vector interpolation and step size adapting have appeared in the literature <ref> [MP88, Bun88, YP88, EOR89] </ref>. More recently, Kenright and Mallinson have proposed a new approach for tracking streamlines where streamlines are considered to be the intersection of two stream surfaces [KM92]. In 3D, one can get an improved perception if, instead of drawing lines, one draws 3D shapes such as cylinders.
Reference: [CA91] <author> R. A. Crawfis and M. J. Allison. </author> <title> A scientific visualization synthesizer. </title> <booktitle> In Proceedings: Visualization '91, </booktitle> <pages> pages 262 - 267. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1991. </year>
Reference-contexts: Different parameters of the data set govern different colors and features of the geometry of the icon [Lev91]. Crawfis and Allison use an interpreted programming environment to synthesize textures and raster images which can be composited together <ref> [CA91] </ref>. The 29 textures and images can be obtained by operating on different parameters and integrated to reveal relationships. Foley and Lane describe various techniques that can be incorporated into a single image to visualize 3D multiparameter data sets [FL91].
Reference: [Cha90] <author> J. Challinger. </author> <title> Object-oriented rendering of volumetric and geometric primitives. </title> <type> Master's thesis, </type> <institution> University of California, </institution> <address> Santa Cruz, CA, </address> <year> 1990. </year> <month> 99 </month>
Reference-contexts: have appeared in the literature are as follows: Tuy [TT84] used ray-casting to render binary voxels, Montani [MS90] rendered constant valued voxels using the sticks representation, Novins [NSG90] used a slab based method to achieve perspective projection, Krueger [Kru90] developed an elaborate and flexible transport theory model, Garity [Gar90], Challinger <ref> [Cha90] </ref>, Wilhelms [WCA + 90] raytraced irregular volume data and Yagel [YK92] used a template-based ray-casting method for rendering constant valued voxels. More recently, Stander and Hart have used a Lipschitz method for accelerating a ray-casting volume renderer [SH94].
Reference: [CL93] <author> Brian Cabral and Leith(Casey) Leedom. </author> <title> Imaging vector fields using line integral convolution. </title> <booktitle> Computer Graphics (ACM Siggraph Proceedings), </booktitle> <volume> 27(4):263 - 270, </volume> <month> August </month> <year> 1993. </year>
Reference-contexts: Crawfis and Max extended the splatting technique to include textures for vector field visualization [CM93]. Cabral and Leedom introduced a novel technique which uses linear and curvilinear filters to locally blur textures along a vector field <ref> [CL93] </ref> which was extended by Forsell to visualize flow over curvilinear grid surfaces [For94]. 32 4. Mix&Match: A Construction Kit The environment presented in this dissertation blends the ideas of spray rendering with those of modular visualization environments.
Reference: [CLL + 88] <author> H. E. ClineW., E. Lorensen, S. Ludke, C. R. Crawford, and B. C. Teeter. </author> <title> Two algorithms for the three-dimensional reconstruction of tomograms. </title> <journal> Medical Physics, </journal> <volume> 15(3), </volume> <year> 1988. </year>
Reference-contexts: These techniques evolved into extracting surfaces directly from the volume data by specifying a threshold value. Particularly popular techniques for extracting so-called iso-surfaces is the marching cubes [LC87] and the dividing cubes <ref> [CLL + 88] </ref> algorithms. In the marching cubes algorithm, one walks the cells in a volume and marks the vertices of a cell as either ones or zeros depending on whether the value at that vertex is above or below a given threshold.
Reference: [CM92] <author> R. Crawfis and N. Max. </author> <title> Direct volume visualization of three-dimensional vector fields. </title> <booktitle> Proceedings of the Boston Workshop on Volume Visualization(ACM Siggraph), </booktitle> <pages> pages 55 - 60, </pages> <year> 1992. </year>
Reference-contexts: By varying the shape of the source of the particles, he obtains different visualization techniques such as streamlines, tubes and ribbons. He provides a detailed method for rendering shaded particles. Crawfis and Max <ref> [CM92] </ref> employ a splatting technique for the direct volume visualization of 3D vector fields. They have developed a filter which is used to sweep through a volume in back-to-front order. The filter deposits anti-aliased lines as it passes through the volume.
Reference: [CM93] <author> Roger A. Crawfis and Nelson Max. </author> <title> Texture splats for 3d scalar and vector field visualization. </title> <booktitle> In Proceedings: Visualization '93, </booktitle> <pages> pages 261 - 266. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1993. </year>
Reference-contexts: Van Wijk also used implicit surface representation to construct implicit stream surfaces of flow fields [vW93]. Crawfis and Max extended the splatting technique to include textures for vector field visualization <ref> [CM93] </ref>. Cabral and Leedom introduced a novel technique which uses linear and curvilinear filters to locally blur textures along a vector field [CL93] which was extended by Forsell to visualize flow over curvilinear grid surfaces [For94]. 32 4.
Reference: [Dic89] <author> R. R. Dickinson. </author> <title> A unified approach to the design of visualization software for the analysis of field problems. In Three-Dimensional Visualization and Display Technologies, </title> <booktitle> volume 1083, pages 173 - 180. SPIE, </booktitle> <year> 1989. </year>
Reference-contexts: In 3D, one can get an improved perception if, instead of drawing lines, one draws 3D shapes such as cylinders. This results in stream tubes which can be shaded using lighting models <ref> [Dic89, HD91] </ref>. Stream tubes can also have the advantage of showing local expansion of the flow field if their circular cross-sectional areas are based upon the local crossflow divergence. Stream lines or tubes only give the path. One cannot obtain rotation information from these techniques.
Reference: [dLvW93] <author> Willem C. de Leeuw and Jarke J. van Wijk. </author> <title> A probe for local flow field visualization. </title> <booktitle> In Proceedings: Visualization '93, </booktitle> <pages> pages 39 - 45. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1993. </year>
Reference-contexts: More recently, Max et al. used a volumetric equivalent of stream lines to volume render vector fields [MBC93]. Leeuw and van Wijk map scalar, vector and tensor values to a 3-D probe for interactive local flow field visualization <ref> [dLvW93] </ref>. Van Wijk also used implicit surface representation to construct implicit stream surfaces of flow fields [vW93]. Crawfis and Max extended the splatting technique to include textures for vector field visualization [CM93].
Reference: [Dye90] <author> D. S. Dyer. </author> <title> A dataflow toolkit for visualization. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 10(4):60 - 69, </volume> <year> 1990. </year>
Reference-contexts: However, in the last few years a data flow paradigm has become very popular for general purpose, modular and extensible visualization software. Products such as AVS [Ups89], Iris Explorer [Slo92], apE <ref> [Dye90] </ref>, and IBM Data Explorer [LAC + 92], which have also come to be known as Modular Visualization Environments (MVE), all use this approach. <p> AVS allows upstream data flow suitable for loops and conditionals in the network. AVS can be used to build customized applications. * apE, TaraVisual Inc. Another early package, apE was originally developed by Ohio State University and was public domain until it was licensed to TaraVisual for marketing <ref> [Dye90, Wet90a] </ref>. It is a general purpose, data flow visualization system. The work area where the visual program is constructed is known as the wrench.
Reference: [Edw93] <author> G. J. Edwards. </author> <title> The design of a second generation visualization environment. </title> <editor> In J.J. Connor, S. Hernandez, T.K.S. Murthy, and H. Power, editors, </editor> <booktitle> Visualization and Intelligent Design in Engineering and Architecture, </booktitle> <pages> pages 3 - 16. </pages> <publisher> Computational Mechanics Publications, Elsevier Science Publishers, </publisher> <year> 1993. </year>
Reference-contexts: While it supports different grid types, the modules provided do not support all types. A module called rezone maps variables from one grid type to another. Distributed applications are possible in apE. There is a post-processor for image processing. * Iris Explorer, Silicon Graphics Inc. Iris Explorer <ref> [Slo92, Edw93, Bel93] </ref> is another general purpose, data flow visualization system that has been bundled with Silicon Graphics machines. At the present time, it only runs on SGI machines but version 3.0 will be unbundled and ported to other machines. The architecture consists of five 11 layers.
Reference: [EOR89] <author> P. Eliasson, J. Oppelstrup, and A. Rizzi. </author> <title> STREAM 3D: Computer graphics program for streamline visualization. </title> <booktitle> Advances in Engineering Software, </booktitle> <volume> 11(4), </volume> <year> 1989. </year>
Reference-contexts: If this path consists of line segments, one gets so-called streamlines. The line segments can be colored according to the magnitude of the vector to give extra information. Issues such as the integration method, vector interpolation and step size adapting have appeared in the literature <ref> [MP88, Bun88, YP88, EOR89] </ref>. More recently, Kenright and Mallinson have proposed a new approach for tracking streamlines where streamlines are considered to be the intersection of two stream surfaces [KM92]. In 3D, one can get an improved perception if, instead of drawing lines, one draws 3D shapes such as cylinders.
Reference: [FGR85] <author> G. Frieder, D. Gordon, and R.Reynolds. </author> <title> Back-to-front display of voxel-based objects. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 5(1):52 - 59, </volume> <year> 1985. </year>
Reference-contexts: A related technique uses geometric objects as probes to interactively examine the data values on the surface of the probes [SK90]. One can also carve out sections of the 23 data set to either remove uninteresting portions or to reveal hidden areas <ref> [FZY84, FGR85] </ref>. These can be done by boolean set operations as in constructive solid geometry. Any of the volume visualization techniques can then be used to view the remaining volume of interest. 3.4.2 Geometry-based Volumetric Techniques Geometry-based volumetric techniques produce geometric primitives that are rendered. <p> Some algorithms use a binary voxel classification. Herman and Liu [HL79] first described the cuberille technique, which thresholded volume data to yield a binary array of ones and zeros. The resulting volume was displayed by treating ones as opaque cubes. Frieder et al. <ref> [FGR85] </ref> and Gordon and Reynolds [GR85] improved upon the algorithm by processing the voxels in a single pass. Meagher proposed the use of octrees for speeding up the process [Mea82].
Reference: [FKU77] <author> H. Fuchs, Z. M. Kedem, and S. P. Uselton. </author> <title> Optimal surface reconstruction from planar contours. </title> <journal> Communications of the ACM, </journal> <volume> 20(10):693 - 702, </volume> <year> 1977. </year>
Reference-contexts: If local gradient shading is applied instead of a binary representation substantial improvements to image quality can be obtained [HB86, Gol86, SSW86, TS87]. Three dimensional representations can be extracted from two dimensional contours which can be obtained through edge tracking <ref> [FKU77] </ref>. These techniques evolved into extracting surfaces directly from the volume data by specifying a threshold value. Particularly popular techniques for extracting so-called iso-surfaces is the marching cubes [LC87] and the dividing cubes [CLL + 88] algorithms.
Reference: [FL91] <author> T. A. Foley and D. A. Lane. </author> <title> Multi-valued volumetric visualization. </title> <booktitle> In Proceedings: Visualization '91, </booktitle> <pages> pages 218 - 225. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1991. </year>
Reference-contexts: The 29 textures and images can be obtained by operating on different parameters and integrated to reveal relationships. Foley and Lane describe various techniques that can be incorporated into a single image to visualize 3D multiparameter data sets <ref> [FL91] </ref>. The techniques involve defining a surface or a geometric object in the volume and operating on that volume. By combining the operations in a single image, different parameters can be related to one another. Two dimensional vector visualization is also quite common.
Reference: [For94] <author> L. K. Forssell. </author> <title> Visualizing flow over curvilinear grid surfaces using line integral convolution. </title> <booktitle> In Proceedings: Visualization '94, </booktitle> <pages> pages 240 - 247. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1994. </year>
Reference-contexts: Crawfis and Max extended the splatting technique to include textures for vector field visualization [CM93]. Cabral and Leedom introduced a novel technique which uses linear and curvilinear filters to locally blur textures along a vector field [CL93] which was extended by Forsell to visualize flow over curvilinear grid surfaces <ref> [For94] </ref>. 32 4. Mix&Match: A Construction Kit The environment presented in this dissertation blends the ideas of spray rendering with those of modular visualization environments.
Reference: [FZY84] <author> E. J. Farrell, R. Zappulla, and W.C. Yang. </author> <title> Color 3-d imaging of normal and pathologic intracranial structures. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 4(9):5 - 17, </volume> <month> September </month> <year> 1984. </year>
Reference-contexts: A related technique uses geometric objects as probes to interactively examine the data values on the surface of the probes [SK90]. One can also carve out sections of the 23 data set to either remove uninteresting portions or to reveal hidden areas <ref> [FZY84, FGR85] </ref>. These can be done by boolean set operations as in constructive solid geometry. Any of the volume visualization techniques can then be used to view the remaining volume of interest. 3.4.2 Geometry-based Volumetric Techniques Geometry-based volumetric techniques produce geometric primitives that are rendered.
Reference: [Gar90] <author> M. P. Garrity. </author> <title> Raytracing irregular volume data. </title> <booktitle> Computer Graphics (Proceedings of the San Diego Workshop on Volume Visualization), </booktitle> <volume> 24(5):35 - 40, </volume> <year> 1990. </year> <month> 100 </month>
Reference-contexts: approaches that have appeared in the literature are as follows: Tuy [TT84] used ray-casting to render binary voxels, Montani [MS90] rendered constant valued voxels using the sticks representation, Novins [NSG90] used a slab based method to achieve perspective projection, Krueger [Kru90] developed an elaborate and flexible transport theory model, Garity <ref> [Gar90] </ref>, Challinger [Cha90], Wilhelms [WCA + 90] raytraced irregular volume data and Yagel [YK92] used a template-based ray-casting method for rendering constant valued voxels. More recently, Stander and Hart have used a Lipschitz method for accelerating a ray-casting volume renderer [SH94].
Reference: [Gol86] <author> S. Goldwasser. </author> <title> Rapid techniques for the display and manipulation of 3d biomedical data. </title> <booktitle> NCGA '86 Tutorial, </booktitle> <month> May </month> <year> 1986. </year>
Reference-contexts: Meagher proposed the use of octrees for speeding up the process [Mea82]. If local gradient shading is applied instead of a binary representation substantial improvements to image quality can be obtained <ref> [HB86, Gol86, SSW86, TS87] </ref>. Three dimensional representations can be extracted from two dimensional contours which can be obtained through edge tracking [FKU77]. These techniques evolved into extracting surfaces directly from the volume data by specifying a threshold value.
Reference: [Gou88] <author> M. L. Gough. </author> <note> NSSDC CDF Implementer's Guide(DEC VAX/VMS Version 1.1. </note> <institution> National Space Science Data Center, NASA/Goddard Space Flight Center, Greenbelt, MD, </institution> <year> 1988. </year>
Reference: [GR85] <author> D. Gordon and R. A. Reynolds. </author> <title> Image space shading of 3-dimensional objects. Computer Vision, </title> <journal> Graphics and Image Processing, </journal> <volume> 29:361 - 376, </volume> <year> 1985. </year>
Reference-contexts: Some algorithms use a binary voxel classification. Herman and Liu [HL79] first described the cuberille technique, which thresholded volume data to yield a binary array of ones and zeros. The resulting volume was displayed by treating ones as opaque cubes. Frieder et al. [FGR85] and Gordon and Reynolds <ref> [GR85] </ref> improved upon the algorithm by processing the voxels in a single pass. Meagher proposed the use of octrees for speeding up the process [Mea82]. If local gradient shading is applied instead of a binary representation substantial improvements to image quality can be obtained [HB86, Gol86, SSW86, TS87].
Reference: [GW93] <author> Allen Van Gelder and Jane Wilhelms. </author> <title> Rapid exploration of curvilinear grids using direct volume rendering. </title> <booktitle> In Proceedings: Visualization '93, </booktitle> <pages> pages 70 - 77. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1993. </year>
Reference-contexts: They break down the cells into convex polyhedra (tetrahedra in the case of [ST90]), sort them in depth order and scan convert them. Max et al. use an assumption to provide an analytical solution to the ray integral equation. Wilhelms and Van Gelder <ref> [WVG91, GW93] </ref> employ a similar projection technique for rectilinear and 28 curvilinear volumes. All of them provide options for using hardware interpolation of color and opacity values across polygons to achieve greater speed at the cost of some accuracy. A different approach was taken by Westover [Wes89, Wes90].
Reference: [HB86] <author> K.H. Hoehne and R. Bernstein. </author> <title> Shading 3d-images from CT using gray-level gradients. </title> <journal> IEEE Transactions on Medical Imaging, </journal> <volume> MI-5(1):45 - 47, </volume> <month> March </month> <year> 1986. </year>
Reference-contexts: Meagher proposed the use of octrees for speeding up the process [Mea82]. If local gradient shading is applied instead of a binary representation substantial improvements to image quality can be obtained <ref> [HB86, Gol86, SSW86, TS87] </ref>. Three dimensional representations can be extracted from two dimensional contours which can be obtained through edge tracking [FKU77]. These techniques evolved into extracting surfaces directly from the volume data by specifying a threshold value.
Reference: [HD91] <author> R. Haimes and D. Darmofal. </author> <title> Visualization in computational fluid dynamics: A case study. </title> <booktitle> In Proceedings: Visualization '91, </booktitle> <pages> pages 392 - 397. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1991. </year>
Reference-contexts: In 3D, one can get an improved perception if, instead of drawing lines, one draws 3D shapes such as cylinders. This results in stream tubes which can be shaded using lighting models <ref> [Dic89, HD91] </ref>. Stream tubes can also have the advantage of showing local expansion of the flow field if their circular cross-sectional areas are based upon the local crossflow divergence. Stream lines or tubes only give the path. One cannot obtain rotation information from these techniques.
Reference: [HL79] <author> G. T. Herman and H. K. Liu. </author> <title> Three-dimensional display of human organs from computer tomograms. </title> <journal> Computer Graphics and Image Processing, </journal> <volume> 9(1):1 - 21, </volume> <year> 1979. </year>
Reference-contexts: Any of the volume visualization techniques can then be used to view the remaining volume of interest. 3.4.2 Geometry-based Volumetric Techniques Geometry-based volumetric techniques produce geometric primitives that are rendered. Some algorithms use a binary voxel classification. Herman and Liu <ref> [HL79] </ref> first described the cuberille technique, which thresholded volume data to yield a binary array of ones and zeros. The resulting volume was displayed by treating ones as opaque cubes.
Reference: [HLC91] <author> R. B. Haber, B. Lucas, and N. Collins. </author> <title> A data model for scientific visualization with provisions for regular and irregular grids. </title> <booktitle> In Proceedings: Visualization '91, </booktitle> <pages> pages 298 - 305. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1991. </year>
Reference-contexts: The goal is to link scientific visualization and DBMS technologies [SCN + 93, KASS93]. An interesting data model is one proposed by Butler and Pendley [BP89], a model based on the mathematics of fiber bundles which was extended by Haber et al. <ref> [HLC91] </ref> to incorporate localized, piecewise field description.
Reference: [HPvW94] <author> Lambertus Hesselink, Frits H. Post, and Jarke J. van Wijk. </author> <title> Research issues in vector and tensor field visualization. </title> <editor> In L. Rosenblum, R. A. Earnshaw, J. Encarnacao, H. Hagen, A. Kaufman, S. Klimenko, G. Nielson, F. Post, and D. Thalmann, editors, </editor> <booktitle> Scientific Visualization: Advances and Challenges, </booktitle> <pages> pages 488 - 495. </pages> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1994. </year>
Reference-contexts: Another classification by Hesselink et al. also adds a third attribute, the information level, which indicates whether the information shown at a certain point refers only to the elementary data at that point, whether it refers to some local neighborhood or whether it is global to the whole data set <ref> [HPvW94] </ref>. Table 3.1 lists some 3D techniques in a manner that is a combination of the above classifications. The Geometry column of the table refers to the dimensionality of the geometric primitive used to represent the data. These could be points (0), lines (1), polygons (2) or volumes (3).
Reference: [HR92] <author> J. P. M. Hultquist and E. L. Raible. SuperGlue: </author> <title> A programming environment for scientific visualization. </title> <booktitle> In Proceedings: Visualization '92, </booktitle> <pages> pages 243 - 249. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1992. </year>
Reference-contexts: A collection of libraries and utilities are provided for building application modules. FAST offers the usual isosurface and stream line modules as well as a calculator module that operates on field data to produce new data. * SuperGlue, NASA Ames. SuperGlue <ref> [HR92] </ref> aims to emphasize extensibility (more than ease of use) for the rapid prototyping of new visualization methods by providing a programming environment based on the interpreted language Scheme. It is especially tailored for computational fluid dynamics needs. Modular Visualization Environments * Advanced Visualization System (AVS), AVS Inc.
Reference: [HS90] <author> B. Hibbard and D. Santek. </author> <title> The Vis-5D system for easy interactive visualization. </title> <booktitle> In Proceedings: Visualization '90, </booktitle> <pages> pages 28 - 35. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1990. </year>
Reference-contexts: The techniques supported include a fast volume rendering algorithm as well as costly, realistic ray-tracing. Tools include 3D manipulation, key-frame animation and quantitative analysis. * Vis-5D, University of Wisconsin. This is a public domain package for the visualization of 5-dimensional data sets <ref> [HS90] </ref>. The dimensions refer to three spatial dimensions, one time dimension and a dimension for multiple parameters to be visualized. It is popular among meteorological scientists. It offers animated isosurfaces, 2D slices and streamline traces.
Reference: [Hul92] <author> J. P. M. Hultquist. </author> <title> Constructing stream surfaces in steady 3d vector fields. </title> <booktitle> In Proceedings: Visualization '92, </booktitle> <pages> pages 171 - 177. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1992. </year>
Reference-contexts: In this case, the path of two particles are traced and polygons are generated from their joint path [Bel87, Vol89]. Since flow fields diverge, ribbons may need to be adaptively split to get better polygonal representations. Hultquist has proposed an advancing front method that achieves this more efficiently <ref> [Hul92] </ref>. Another method that has been used to capture not only the rotation but also the strain and shear (or angular deformation) is the stream polygon method proposed by Schroeder et al. [SVL91].
Reference: [KASS93] <author> Peter Kochevar, Zahid Ahmed, Jonathan Shade, and Colin Sharp. </author> <title> Bridging the gap between visualization and data management: A simple visualization management system. </title> <booktitle> In Proceedings: Visualization '93, </booktitle> <pages> pages 94 - 101. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1993. </year>
Reference-contexts: Another motivating force for an abstract data model, not just a standard format, is the need to manage enormous amounts of data generated through simulation and observation by the scientific community. The goal is to link scientific visualization and DBMS technologies <ref> [SCN + 93, KASS93] </ref>. An interesting data model is one proposed by Butler and Pendley [BP89], a model based on the mathematics of fiber bundles which was extended by Haber et al. [HLC91] to incorporate localized, piecewise field description.
Reference: [KH84] <author> J. T. Kajiya and B. P. Von Herzen. </author> <title> Ray tracing volume densities. </title> <journal> Computer Graphics, </journal> <volume> 18(4):165 - 174, </volume> <year> 1984. </year>
Reference-contexts: The ray-casting algorithms differ in the details of the model used for mapping to visual parameters. Sabella [Sab88] uses a simplified light scattering model that had been used for the image synthesis of natural phenomena such as clouds <ref> [Bli82b, KH84, Max86] </ref>. In his density emitter model, the volume is assumed to consist of light-emitting particles but instead of modeling the particles individually, he considers their density and derives a ray integral involving an exponential for the attenuated intensity along a ray.
Reference: [KM92] <author> D. N. Kenwright and G. D. Mallinson. </author> <title> A 3-d streamline tracking algorithm using dual stream functions. </title> <booktitle> In Proceedings: Visualization '92, </booktitle> <pages> pages 62 - 68. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1992. </year>
Reference-contexts: Issues such as the integration method, vector interpolation and step size adapting have appeared in the literature [MP88, Bun88, YP88, EOR89]. More recently, Kenright and Mallinson have proposed a new approach for tracking streamlines where streamlines are considered to be the intersection of two stream surfaces <ref> [KM92] </ref>. In 3D, one can get an improved perception if, instead of drawing lines, one draws 3D shapes such as cylinders. This results in stream tubes which can be shaded using lighting models [Dic89, HD91].
Reference: [Kri91] <author> R. D. Kriz. </author> <title> PV-Wave Point & Click. </title> <booktitle> Pixel, </booktitle> <pages> pages 28 - 30, </pages> <month> July/August </month> <year> 1991. </year> <month> 101 </month>
Reference-contexts: This is a two and three dimensional visualization package that uses a command language interface (although the newer Point & Click 8 version has a menu-driven interactive graphical interface <ref> [Kri91] </ref>). PV-Wave provides an intelligent data previewer for importing ASCII data files. It offers a macro tool for automating repetitive tasks. True ray-cast volumetric rendering that can be combined with geometric objects is provided as well as iso-surfaces.
Reference: [Kru90] <author> W. Krueger. </author> <title> Volume rendering and data feature enhancement. </title> <booktitle> Computer Graphics (Proceedings of the San Diego Workshop on Volume Visualization), </booktitle> <volume> 24(5):21 - 26, </volume> <year> 1990. </year>
Reference-contexts: Other ray-casting approaches that have appeared in the literature are as follows: Tuy [TT84] used ray-casting to render binary voxels, Montani [MS90] rendered constant valued voxels using the sticks representation, Novins [NSG90] used a slab based method to achieve perspective projection, Krueger <ref> [Kru90] </ref> developed an elaborate and flexible transport theory model, Garity [Gar90], Challinger [Cha90], Wilhelms [WCA + 90] raytraced irregular volume data and Yagel [YK92] used a template-based ray-casting method for rendering constant valued voxels.
Reference: [LAC + 92] <author> B. Lucas, G. Abram, N. Collins, D. Epstein, D. Gresh, and K. McAuliffe. </author> <title> An architecture for a scientific visualization system. </title> <booktitle> In Proceedings: Visualization '92, </booktitle> <pages> pages 107 - 114. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1992. </year>
Reference-contexts: However, in the last few years a data flow paradigm has become very popular for general purpose, modular and extensible visualization software. Products such as AVS [Ups89], Iris Explorer [Slo92], apE [Dye90], and IBM Data Explorer <ref> [LAC + 92] </ref>, which have also come to be known as Modular Visualization Environments (MVE), all use this approach. The data flow paradigm offers a good mapping to the problem domain: acquired data is perhaps filtered, then mapped to some visual parameters and the result rendered. <p> Explorer offers a module prototyping facility through an interpretive language called shape. A scripting language called Skm allows scripting as well as a command language interface to the user. * IBM Visualization Data Explorer, IBM Corp. Data Explorer <ref> [LAC + 92, Bel93] </ref> has a client-server open system architecture that uses standard protocols and systems for portability. It consists of two components, the user interface (the client) and the executive (server) running as two separate processes communicating via Unix sockets.
Reference: [LC87] <author> W. E. Lorensen and H. E. Cline. </author> <title> Marching cubes: A high resolution 3d surface construction algorithm. </title> <journal> Computer Graphics, </journal> <volume> 21(4):163 - 169, </volume> <year> 1987. </year>
Reference-contexts: Three dimensional representations can be extracted from two dimensional contours which can be obtained through edge tracking [FKU77]. These techniques evolved into extracting surfaces directly from the volume data by specifying a threshold value. Particularly popular techniques for extracting so-called iso-surfaces is the marching cubes <ref> [LC87] </ref> and the dividing cubes [CLL + 88] algorithms. In the marching cubes algorithm, one walks the cells in a volume and marks the vertices of a cell as either ones or zeros depending on whether the value at that vertex is above or below a given threshold.
Reference: [Leg91] <author> S. M. Legensky. </author> <title> Advanced visualization on desktop workstations. </title> <booktitle> In Proceedings: Visualization '91, </booktitle> <pages> pages 372 - 378. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1991. </year>
Reference-contexts: Its native file format is an ASCII format called wave and it supports custom file format readers written by users. The user interface is also customizable. Keyframe and flip-book animations are possible. * Fieldview, Intelligent Light. Fieldview is primarily for fluid dynamics data <ref> [Leg91] </ref>. Its native data format is the same as that of PLOT3D, five dimensionless quantities on a 3D grid. Calculator tools are provided that can compute compound functions (scalar and vector) on the data and display the results as cutting-planes, iso-surfaces, streamlines, particles and other techniques.
Reference: [Lev88] <author> M. Levoy. </author> <title> Display of surfaces from volume data. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 8(3):29 - 37, </volume> <year> 1988. </year>
Reference-contexts: In the former, one starts from object space and calculates the contributions of the sub-volumes to the affected pixels. In the latter, for each pixel in image space, one accumulates the contributions of the sub-volumes affecting it. Image Order Algorithms Image order algorithms are ray-casting techniques <ref> [Lev88, Sab88, UK88] </ref>. This is distinct from ray-tracing since rays are not reflected from objects. Instead, rays are cast from each pixel into the data set in object space which they enter and exit in a straight line (figure 3.2). <p> Upson and Keeler [UK88] use independent color and opacity transfer functions for mapping the scalar values. They use finite differences at the nodes to calculate the normals used in shading. The integral is approximated as a discrete summation. Levoy <ref> [Lev88] </ref> calculates colors and opacities from the scalar values through shading and classification formulae respectively and uses trilinear interpolation on these volumes for samples that fall in cells. The shading model used is the standard Phong model.
Reference: [Lev91] <author> H. Levkowitz. </author> <title> Color icons: Merging color and texture perception for integrated visualization of multiple parameters. </title> <booktitle> In Proceedings: Visualization '91, </booktitle> <pages> pages 164 - 170. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1991. </year>
Reference-contexts: In 2D, iconographic displays have been used to visualize multiparameter data. The icons consist of a number of pixels and are coded both in terms of color and geometry. Different parameters of the data set govern different colors and features of the geometry of the icon <ref> [Lev91] </ref>. Crawfis and Allison use an interpreted programming environment to synthesize textures and raster images which can be composited together [CA91]. The 29 textures and images can be obtained by operating on different parameters and integrated to reveal relationships.
Reference: [Mat94] <author> S. V. Matveyev. </author> <title> Approximation of isosurface in the marching cube: Ambiguity problem. </title> <booktitle> In Proceedings: Visualization '94, </booktitle> <pages> pages 288 - 292. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1994. </year>
Reference-contexts: Solutions to this problem have been 24 are above while the others are below a given threshold causing edge intersections e1,e4,e9 and e6,e7,e12. The index and the triangles produced are also shown. proposed by <ref> [WVG90b, NH91, Mat94] </ref>. The marching cubes algorithm also produces a large number of geometric primitives. To increase the efficiency, Wilhelms and Van Gelder [WVG90a] proposed a hierarchical approach while [Tur92, SZL92, MSS94] have proposed approaches to reduce the number of the primitives.
Reference: [Max86] <author> N. Max. </author> <title> Light diffusion through clouds and haze. Computer Vision, </title> <journal> Graphics and Image Processing, </journal> <volume> 33(3):280 - 292, </volume> <year> 1986. </year>
Reference-contexts: The ray-casting algorithms differ in the details of the model used for mapping to visual parameters. Sabella [Sab88] uses a simplified light scattering model that had been used for the image synthesis of natural phenomena such as clouds <ref> [Bli82b, KH84, Max86] </ref>. In his density emitter model, the volume is assumed to consist of light-emitting particles but instead of modeling the particles individually, he considers their density and derives a ray integral involving an exponential for the attenuated intensity along a ray.
Reference: [MBC93] <author> Nelson Max, Barry Becker, and Roger Crawfis. </author> <title> Flow volume for interactive vector field visualization. </title> <booktitle> In Proceedings: Visualization '93, </booktitle> <pages> pages 19 - 24. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1993. </year>
Reference-contexts: The filter deposits anti-aliased lines as it passes through the volume. The technique is used to volume render both a vector and a scalar field in the same image. More recently, Max et al. used a volumetric equivalent of stream lines to volume render vector fields <ref> [MBC93] </ref>. Leeuw and van Wijk map scalar, vector and tensor values to a 3-D probe for interactive local flow field visualization [dLvW93]. Van Wijk also used implicit surface representation to construct implicit stream surfaces of flow fields [vW93].
Reference: [McC87] <author> B. H. McCormick. </author> <title> Visualization in scientific computing. </title> <journal> Computer Graphics, </journal> <volume> 21(6), </volume> <month> November </month> <year> 1987. </year>
Reference-contexts: It has grown in importance in recent years, particularly after the impetus provided by the NSF panel report which identified areas in need of research and funding <ref> [McC87] </ref>. Up until the late 1980's, there existed no general software package to meet the diverse needs of scientists from many disciplines. Scientists used many different programs to achieve specific visualization goals. <p> How Mix&Match relates to other visualization environments and spray rendering is then discussed at the end of this chapter. 2.1 Some Scientific Visualization Environments Many commercial and public domain packages have been developed since they were first proposed by the NSF Panel on Graphics, Image Processing and Workstations <ref> [McC87] </ref>. The panel's report pointed to the need for general purpose scientific visualization environments as opposed to domain specific, in-house developed, and monolithic systems. There are basically three categories of visualization software: 1. Graphics Libraries.
Reference: [Mea82] <author> D. J. Meagher. </author> <title> Geometric modeling using octree encoding. </title> <journal> Computer Graphics and Image Processing, </journal> <volume> 19:129 - 147, </volume> <year> 1982. </year>
Reference-contexts: The resulting volume was displayed by treating ones as opaque cubes. Frieder et al. [FGR85] and Gordon and Reynolds [GR85] improved upon the algorithm by processing the voxels in a single pass. Meagher proposed the use of octrees for speeding up the process <ref> [Mea82] </ref>. If local gradient shading is applied instead of a binary representation substantial improvements to image quality can be obtained [HB86, Gol86, SSW86, TS87]. Three dimensional representations can be extracted from two dimensional contours which can be obtained through edge tracking [FKU77].
Reference: [Mer91] <author> Philip J. Mercurio. </author> <title> The data visualizer. </title> <booktitle> Pixel, </booktitle> <pages> pages 31 - 34, </pages> <month> July/August </month> <year> 1991. </year>
Reference-contexts: This category has become very popular because it is flexible and caters to users of different levels of expertise. 2.1.1 Turnkey Visualization Systems * The Data Visualizer, Wavefront Technologies Inc. The Data Visualizer offers a traditional, menu-driven application interface and primarily deals with 3D data <ref> [BAWW90, Mer91, Bel93] </ref>. Version 2.1 also supports a command language interface. The architecture is tool-oriented where each tool is an instance of a visualization method. A Visualization Tool Manager accepts input from the user and manages the creation and manipulation of various tools.
Reference: [MHC90] <author> N. Max, P. Hanrahan, and R. Crawfis. </author> <title> Area and volume coherence for efficient visualization of 3d scalar functions. </title> <booktitle> Computer Graphics (Proceedings of the San Diego Workshop on Volume Visualization), </booktitle> <volume> 24(5):27 - 34, </volume> <year> 1990. </year>
Reference-contexts: Researchers have taken two approaches in this case. Most break down the volume into sub-volumes and scan convert the front and back faces of the sub-volumes in front-to-back or back-to-front order <ref> [UK88, MHC90, ST90, WVG91] </ref>. A different approach called splatting composites the footprints of each node in the volume [Wes89, Wes90]. Upson and Keeler's [UK88] V-buffer algorithm determines a bounding box for each cell in front-to-back order. The bounding box is clipped to scanlines to produce pixel runs. <p> The bounding box is clipped to scanlines to produce pixel runs. Each scanline can be broken up into five spans depending on the polygon produced by the cutting plane of the scanline. The calculations in the spans are vectorizable. Max et al. <ref> [MHC90] </ref> and Shirley and Tuchman [ST90] handle not just regular grids but curvilinear ones as well. They break down the cells into convex polyhedra (tetrahedra in the case of [ST90]), sort them in depth order and scan convert them.
Reference: [MP88] <author> E. Murman and K. Powell. </author> <title> Trajectory integration in vortical flows. </title> <journal> AIAA Journal, </journal> <volume> 27(7):982 - 984, </volume> <year> 1988. </year>
Reference-contexts: If this path consists of line segments, one gets so-called streamlines. The line segments can be colored according to the magnitude of the vector to give extra information. Issues such as the integration method, vector interpolation and step size adapting have appeared in the literature <ref> [MP88, Bun88, YP88, EOR89] </ref>. More recently, Kenright and Mallinson have proposed a new approach for tracking streamlines where streamlines are considered to be the intersection of two stream surfaces [KM92]. In 3D, one can get an improved perception if, instead of drawing lines, one draws 3D shapes such as cylinders.
Reference: [MS90] <author> C. Montani and R. Scopigno. </author> <title> Rendering volumetric data using the sticks representation scheme. </title> <booktitle> Computer Graphics (Proceedings of the San Diego Workshop on Volume Visualization), </booktitle> <volume> 24(5):87 - 93, </volume> <year> 1990. </year>
Reference-contexts: These functions depend on whether one is trying to extract value contours or region boundary surfaces. Other ray-casting approaches that have appeared in the literature are as follows: Tuy [TT84] used ray-casting to render binary voxels, Montani <ref> [MS90] </ref> rendered constant valued voxels using the sticks representation, Novins [NSG90] used a slab based method to achieve perspective projection, Krueger [Kru90] developed an elaborate and flexible transport theory model, Garity [Gar90], Challinger [Cha90], Wilhelms [WCA + 90] raytraced irregular volume data and Yagel [YK92] used a template-based ray-casting method for
Reference: [MSS94] <author> C. Montani, R. Scateni, and R. Scopigno. </author> <title> Discretized marching cubes. </title> <booktitle> In Proceedings: Visualization '94, </booktitle> <pages> pages 281 - 287. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1994. </year>
Reference-contexts: The index and the triangles produced are also shown. proposed by [WVG90b, NH91, Mat94]. The marching cubes algorithm also produces a large number of geometric primitives. To increase the efficiency, Wilhelms and Van Gelder [WVG90a] proposed a hierarchical approach while <ref> [Tur92, SZL92, MSS94] </ref> have proposed approaches to reduce the number of the primitives.
Reference: [Nat89] <institution> National Center for Supercomputing Applications, University of Illinois at Urbana-Champaign. </institution> <note> NCSA HDF Calling Interfaces and Utilities. Version 3.0, 1989. 102 </note>
Reference: [NH91] <author> G. M. Nielson and B. Hamann. </author> <title> The asymptotic decider: Resolving the ambiguity in marching cubes. </title> <booktitle> In Proceedings: Visualization '91, </booktitle> <pages> pages 83 - 90. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1991. </year>
Reference-contexts: Solutions to this problem have been 24 are above while the others are below a given threshold causing edge intersections e1,e4,e9 and e6,e7,e12. The index and the triangles produced are also shown. proposed by <ref> [WVG90b, NH91, Mat94] </ref>. The marching cubes algorithm also produces a large number of geometric primitives. To increase the efficiency, Wilhelms and Van Gelder [WVG90a] proposed a hierarchical approach while [Tur92, SZL92, MSS94] have proposed approaches to reduce the number of the primitives.
Reference: [NSG90] <author> K. L. Novins, F. X. Sillion, and D. P Greenberg. </author> <title> An efficient method for volume rendering using perspective projection. </title> <booktitle> Computer Graphics (Proceedings of the San Diego Workshop on Volume Visualization), </booktitle> <volume> 24(5):95 - 102, </volume> <year> 1990. </year>
Reference-contexts: These functions depend on whether one is trying to extract value contours or region boundary surfaces. Other ray-casting approaches that have appeared in the literature are as follows: Tuy [TT84] used ray-casting to render binary voxels, Montani [MS90] rendered constant valued voxels using the sticks representation, Novins <ref> [NSG90] </ref> used a slab based method to achieve perspective projection, Krueger [Kru90] developed an elaborate and flexible transport theory model, Garity [Gar90], Challinger [Cha90], Wilhelms [WCA + 90] raytraced irregular volume data and Yagel [YK92] used a template-based ray-casting method for rendering constant valued voxels.
Reference: [PA95] <author> Alex Pang and Naim Alper. </author> <title> Bump mapped vector fields. In Symposium on Electronic Imaging: Visual Data Exploration and Analysis. </title> <booktitle> SPIE, </booktitle> <year> 1995. </year>
Reference-contexts: As an example, the computer graphics technique of bump mapping was used in various ways to visualize vector fields <ref> [PA95] </ref>. <p> In a certain mode of operation, the text scrolls allowing cans to talk to each other in a collaborative setting. * BumpMap. This component implements various techniques for vector visualization using bump-mapping <ref> [PA95] </ref>. 6.1.3 Position Components These components update the current location of the spart. Some are deterministic while others use a pseudo random number generator to achieve some nondeterministic behavior. Still others are data dependent. * BallPos. <p> This task is further facilitated by a configuration manager that presents a graphical interface for component integration. Mix&Match was also successfully used to experiment with new visualization techniques. Of note, is the use of bump mapping to visualize vector data <ref> [PA95] </ref>. There is much room for the extension of Mix&Match features. Scripting would allow batch processing at the expense of interactivity. This would help users who want to just see an end product at the press of a button.
Reference: [PD84] <author> T. Porter and T. Duff. </author> <title> Compositing digital images. </title> <journal> Computer Graphics, </journal> <volume> 17(3):253 - 260, </volume> <year> 1984. </year>
Reference-contexts: With ray/cell face intersections, bilinear interpolation is used to calculate the sample value. For each of the sample values, a color and opacity value is calculated. These are then composited in front-to-back or back-to-front order to give the final pixel color <ref> [PD84] </ref>. <p> He used a reconstruction kernel (a Gaussian) and proceeded from each node in the grid to calculate the contribution its footprint made on the affected pixels, a process he termed splatting. All the algorithms use the same compositing scheme for accumulation of the contributions to affected pixels <ref> [PD84] </ref>. 3.5 Multiparameter and Vector Visualization Multiparameter visualization, as used in this document, will mean more than one dependent variable associated with the independent variables, and is restricted to spatially coherent techniques (the independent variables are spatial).
Reference: [PS93a] <author> A. Pang and K. Smith. </author> <title> Spray rendering: A new framework for visualization. </title> <type> Technical report, </type> <institution> Board of Studies in C. I. S., University of California, </institution> <address> Santa Cruz, CA 95064, </address> <year> 1993. </year> <month> UCSC-CRL-93-01. </month>
Reference-contexts: On the other hand, flexibility 2 and extensibility in these environments are limited by the coarse granularity of the modules, and very little direct user interaction is supported. Recently, Pang and Smith have proposed a new paradigm for scientific visualization <ref> [PS93a, PS93b] </ref>. The name Spray Rendering reflects the metaphor used to describe the way the scientist interacts with the data. The user has "spray cans" available which can be filled with different "paints". <p> In this chapter, a brief survey of current examples of scientific visualization environments is presented with more emphasis on the ones that are related to Mix&Match. Spray Rendering, as originally envisaged by Pang and Smith <ref> [PS93a, PS93b] </ref> is also presented, since it was used to model the components. <p> Support for coarse-grained shared memory parallelism is provided but makes module writing more difficult. Data Explorer uses explicit data partitioning and a simple fork-join model to make this task easier. 2.2 Spray Rendering Spray rendering was proposed by Pang and Smith <ref> [PS93a, PS93b] </ref> as a new framework for doing scientific visualization. In this framework it was proposed to have a shelf of metaphorical spray cans containing smart particles (sparts) designed to look for features in the data set and manifest themselves as renderable objects. <p> New components can also be added which makes it an extensible system. Although this thesis uses the metaphors of spray cans and sparts, the design and implementation of spray rendering in this work is less ambitious than originally envisaged <ref> [PS93a, PS93b] </ref>. As will be elaborated in later chapters, the emphasis in Mix&Match is on the ability to interactively define the overall behavior of a spart and different interaction techniques. In Mix&Match, sparts are independent and do not communicate. 17 3.
Reference: [PS93b] <author> Alex Pang and Kyle Smith. </author> <title> Spray rendering: Visualization using smart particles. </title> <booktitle> In Proceedings: Visualization '93, </booktitle> <pages> pages 283 - 290. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1993. </year>
Reference-contexts: On the other hand, flexibility 2 and extensibility in these environments are limited by the coarse granularity of the modules, and very little direct user interaction is supported. Recently, Pang and Smith have proposed a new paradigm for scientific visualization <ref> [PS93a, PS93b] </ref>. The name Spray Rendering reflects the metaphor used to describe the way the scientist interacts with the data. The user has "spray cans" available which can be filled with different "paints". <p> In this chapter, a brief survey of current examples of scientific visualization environments is presented with more emphasis on the ones that are related to Mix&Match. Spray Rendering, as originally envisaged by Pang and Smith <ref> [PS93a, PS93b] </ref> is also presented, since it was used to model the components. <p> Support for coarse-grained shared memory parallelism is provided but makes module writing more difficult. Data Explorer uses explicit data partitioning and a simple fork-join model to make this task easier. 2.2 Spray Rendering Spray rendering was proposed by Pang and Smith <ref> [PS93a, PS93b] </ref> as a new framework for doing scientific visualization. In this framework it was proposed to have a shelf of metaphorical spray cans containing smart particles (sparts) designed to look for features in the data set and manifest themselves as renderable objects. <p> New components can also be added which makes it an extensible system. Although this thesis uses the metaphors of spray cans and sparts, the design and implementation of spray rendering in this work is less ambitious than originally envisaged <ref> [PS93a, PS93b] </ref>. As will be elaborated in later chapters, the emphasis in Mix&Match is on the ability to interactively define the overall behavior of a spart and different interaction techniques. In Mix&Match, sparts are independent and do not communicate. 17 3.
Reference: [RD90] <author> Russ Rew and Glenn P. Davis. NetCDF: </author> <title> An interface for scientific data access. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 10(4):76 - 82, </volume> <year> 1990. </year>
Reference: [Ree83] <author> W. T. Reeves. </author> <title> Particle systems: A technique for modeling a class of fuzzy objects. </title> <journal> Computer Graphics, </journal> <volume> 17(3):359 - 376, </volume> <year> 1983. </year>
Reference-contexts: Stochastic processes are used to affect the shape and form resulting in non-deterministic objects. The particles have attributes such as size, color and shape, and the system as a whole has parameters governing its form. Reeves used this technique to model fire, explosions, fireworks and grass <ref> [Ree83] </ref>. Behavioral animation was developed to capture group behavior in animations. Rather than account for each body in a group individually, the individuals in the group are required to behave according to some 14 rule based constraints set for the whole group.
Reference: [Rey87] <author> C. W. Reynolds. </author> <title> Flocks, herds and schools: A distributed behavioral model. </title> <journal> Computer Graphics, </journal> <volume> 21(4):25 - 34, </volume> <year> 1987. </year>
Reference-contexts: The constraints, such as collision avoidance and maintained average speed, endow the group as a whole with a behavior. This mimics the behavior of a school of fish or a flock of birds rather well <ref> [Rey87, Amk89] </ref>. In the light of the above techniques and an object oriented preliminary design, sparts were to have a state consisting of certain attributes such as age and appearance, and certain methods to affect that state such as: target function, direction function, death function etc.
Reference: [Sab86] <author> M. Sabin. </author> <title> A survey of contouring methods. </title> <journal> Computer Graphics Forum, </journal> <volume> 5:325 - 340, </volume> <year> 1986. </year>
Reference-contexts: There are two main algorithms: producing all the contour lines within each cell so that contours are produced in a piecemeal fashion, or following each contour to its conclusion. Sabin gives a survey of contouring methods that also deal with scattered data <ref> [Sab86] </ref>. Instead of drawing curves, one can map the values to color and use color blended regions, so called pseudo-color contour maps.
Reference: [Sab88] <author> P. Sabella. </author> <title> A rendering algorithm for visualizing 3d scalar fields. </title> <journal> Computer Graphics, </journal> <volume> 22(4):51 - 58, </volume> <year> 1988. </year>
Reference-contexts: In the former, one starts from object space and calculates the contributions of the sub-volumes to the affected pixels. In the latter, for each pixel in image space, one accumulates the contributions of the sub-volumes affecting it. Image Order Algorithms Image order algorithms are ray-casting techniques <ref> [Lev88, Sab88, UK88] </ref>. This is distinct from ray-tracing since rays are not reflected from objects. Instead, rays are cast from each pixel into the data set in object space which they enter and exit in a straight line (figure 3.2). <p> The ray-casting algorithms differ in the details of the model used for mapping to visual parameters. Sabella <ref> [Sab88] </ref> uses a simplified light scattering model that had been used for the image synthesis of natural phenomena such as clouds [Bli82b, KH84, Max86].
Reference: [SCN + 93] <author> Michael Stonebraker, Jolly Chen, Nobuko Nathan, Caroline Paxson, Alan Su, and Jiang Wu. </author> <title> Tioga: A database-oriented visualization tool. </title> <booktitle> In Proceedings: Visualization '93, </booktitle> <pages> pages 86 - 93. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1993. </year>
Reference-contexts: Another motivating force for an abstract data model, not just a standard format, is the need to manage enormous amounts of data generated through simulation and observation by the scientific community. The goal is to link scientific visualization and DBMS technologies <ref> [SCN + 93, KASS93] </ref>. An interesting data model is one proposed by Butler and Pendley [BP89], a model based on the mathematics of fiber bundles which was extended by Haber et al. [HLC91] to incorporate localized, piecewise field description.
Reference: [SH94] <author> Barton Stander and John Hart. </author> <title> A lipschitz method for accelerated volume rendering. </title> <booktitle> In Proceedings: 1994 Symposium on Volume Visualization, </booktitle> <pages> pages 107 - 114. </pages> <publisher> ACM SIGGRAPH, </publisher> <year> 1994. </year>
Reference-contexts: More recently, Stander and Hart have used a Lipschitz method for accelerating a ray-casting volume renderer <ref> [SH94] </ref>. Object Order Algorithms Object-order algorithms are projection techniques where the main loop of the algorithm proceeds in object space. Researchers have taken two approaches in this case.
Reference: [SK90] <author> D. Speray and S. Kennan. </author> <title> Volume probes : Interactive data exploration on arbitrary grids. </title> <booktitle> Computer Graphics (Proceedings of the San Diego Workshop on Volume Visualization), </booktitle> <volume> 24(5):5 - 12, </volume> <year> 1990. </year>
Reference-contexts: Some algorithms refer to the sample values as voxels where it is assumed that the sub-volume surrounding the sample point is constant-valued. A taxonomy of the connectivity appears in <ref> [SK90] </ref> (although this is by no means standard): * regular: Cells are identical parallelepipeds (bricks). <p> When these slices are animated across the volume, the motion provides extra visual cues [Smi87]. A related technique uses geometric objects as probes to interactively examine the data values on the surface of the probes <ref> [SK90] </ref>. One can also carve out sections of the 23 data set to either remove uninteresting portions or to reveal hidden areas [FZY84, FGR85]. These can be done by boolean set operations as in constructive solid geometry.
Reference: [Slo92] <author> G. Sloane. </author> <title> IRIS Explorer Module Writer's Guide. Silicon Graphics, </title> <publisher> Inc, </publisher> <address> Mountain View, </address> <year> 1992. </year> <title> Document Number 007-1369-010. </title>
Reference-contexts: However, in the last few years a data flow paradigm has become very popular for general purpose, modular and extensible visualization software. Products such as AVS [Ups89], Iris Explorer <ref> [Slo92] </ref>, apE [Dye90], and IBM Data Explorer [LAC + 92], which have also come to be known as Modular Visualization Environments (MVE), all use this approach. <p> While it supports different grid types, the modules provided do not support all types. A module called rezone maps variables from one grid type to another. Distributed applications are possible in apE. There is a post-processor for image processing. * Iris Explorer, Silicon Graphics Inc. Iris Explorer <ref> [Slo92, Edw93, Bel93] </ref> is another general purpose, data flow visualization system that has been bundled with Silicon Graphics machines. At the present time, it only runs on SGI machines but version 3.0 will be unbundled and ported to other machines. The architecture consists of five 11 layers.
Reference: [Smi87] <author> A. R. Smith. </author> <title> Volume graphics and volume visualization: A tutorial. </title> <type> Technical report, </type> <address> Pixar, San Rafael, CA, </address> <year> 1987. </year> <type> Technical Report 176. </type>
Reference-contexts: When these slices are animated across the volume, the motion provides extra visual cues <ref> [Smi87] </ref>. A related technique uses geometric objects as probes to interactively examine the data values on the surface of the probes [SK90]. One can also carve out sections of the 23 data set to either remove uninteresting portions or to reveal hidden areas [FZY84, FGR85].
Reference: [SSW86] <author> D. S. Schlusselberg, W. K. Smith, and D. J. Woodward. </author> <title> Three-dimensional display of medical image volumes. </title> <booktitle> Proceedings of NCGA, </booktitle> <pages> pages 114 - 123, </pages> <year> 1986. </year>
Reference-contexts: Meagher proposed the use of octrees for speeding up the process [Mea82]. If local gradient shading is applied instead of a binary representation substantial improvements to image quality can be obtained <ref> [HB86, Gol86, SSW86, TS87] </ref>. Three dimensional representations can be extracted from two dimensional contours which can be obtained through edge tracking [FKU77]. These techniques evolved into extracting surfaces directly from the volume data by specifying a threshold value.
Reference: [ST90] <author> P. Shirley and A. Tuchman. </author> <title> A polygonal approximation to direct scalar volume rendering. </title> <booktitle> Computer Graphics (Proceedings of the San Diego Workshop on Volume Visualization), </booktitle> <volume> 24(5):63 - 70, </volume> <year> 1990. </year> <month> 103 </month>
Reference-contexts: Researchers have taken two approaches in this case. Most break down the volume into sub-volumes and scan convert the front and back faces of the sub-volumes in front-to-back or back-to-front order <ref> [UK88, MHC90, ST90, WVG91] </ref>. A different approach called splatting composites the footprints of each node in the volume [Wes89, Wes90]. Upson and Keeler's [UK88] V-buffer algorithm determines a bounding box for each cell in front-to-back order. The bounding box is clipped to scanlines to produce pixel runs. <p> The bounding box is clipped to scanlines to produce pixel runs. Each scanline can be broken up into five spans depending on the polygon produced by the cutting plane of the scanline. The calculations in the spans are vectorizable. Max et al. [MHC90] and Shirley and Tuchman <ref> [ST90] </ref> handle not just regular grids but curvilinear ones as well. They break down the cells into convex polyhedra (tetrahedra in the case of [ST90]), sort them in depth order and scan convert them. Max et al. use an assumption to provide an analytical solution to the ray integral equation. <p> The calculations in the spans are vectorizable. Max et al. [MHC90] and Shirley and Tuchman <ref> [ST90] </ref> handle not just regular grids but curvilinear ones as well. They break down the cells into convex polyhedra (tetrahedra in the case of [ST90]), sort them in depth order and scan convert them. Max et al. use an assumption to provide an analytical solution to the ray integral equation. Wilhelms and Van Gelder [WVG91, GW93] employ a similar projection technique for rectilinear and 28 curvilinear volumes.
Reference: [SVL91] <author> W. J. Schroeder, C. R. Volpe, and W. E. Lorensen. </author> <title> The Stream Polygon: A technique for 3D vector field visualization. </title> <booktitle> In Proceedings: Visualization '91, </booktitle> <pages> pages 126 - 131. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1991. </year>
Reference-contexts: Hultquist has proposed an advancing front method that achieves this more efficiently [Hul92]. Another method that has been used to capture not only the rotation but also the strain and shear (or angular deformation) is the stream polygon method proposed by Schroeder et al. <ref> [SVL91] </ref>. In this method, local deformations affect the shape 31 of a polygon that moves along a stream line such that its orientation is normal to the local vector. When the vertices of these polygons are joined, one gets a non-cylindrical tube with local deformations.
Reference: [SZL92] <author> W. J. Schroeder, J. A. Zarge, and W. E. Lorensen. </author> <title> Decimation of triangle meshes. </title> <booktitle> Computer Graphics (ACM Siggraph Proceedings), </booktitle> <volume> 26(2):65 - 70, </volume> <year> 1992. </year>
Reference-contexts: The index and the triangles produced are also shown. proposed by [WVG90b, NH91, Mat94]. The marching cubes algorithm also produces a large number of geometric primitives. To increase the efficiency, Wilhelms and Van Gelder [WVG90a] proposed a hierarchical approach while <ref> [Tur92, SZL92, MSS94] </ref> have proposed approaches to reduce the number of the primitives.
Reference: [Tre93] <author> Lyoyd A. Treinish. </author> <title> Unifying Principles of Data Management for Scientific Visu-alziation. </title> <institution> Association for Computing Machinery, </institution> <month> August </month> <year> 1993. </year> <title> SIGGRAPH '93 Course 02 Notes: Introduction to Scientific Visualization Tools and Techniques. </title>
Reference-contexts: Some attributes that can be used to categorize data are the following <ref> [Tre93] </ref>: * Physical Data Type Primitives: The data can be stored on a medium in many ways, (e.g. byte, int, float, : : : ). * Dimensionality: (e.g. spatial, temporal, spectral, : : : ). <p> It also provides insight as to which 19 techniques are more suitable to the proposed framework. Treinish lists general visualization techniques based on the dimensionality and the rank (see section 3.1) of the data <ref> [Tre93] </ref>. The table includes example data types and the techniques are classified as either discrete or continuous.
Reference: [TS87] <author> Y. Trousset and F. Schmitt. </author> <title> Active-ray tracing for 3d medical imaging. </title> <booktitle> Proc. Eurographics '87, </booktitle> <pages> pages 139 - 149, </pages> <year> 1987. </year>
Reference-contexts: Meagher proposed the use of octrees for speeding up the process [Mea82]. If local gradient shading is applied instead of a binary representation substantial improvements to image quality can be obtained <ref> [HB86, Gol86, SSW86, TS87] </ref>. Three dimensional representations can be extracted from two dimensional contours which can be obtained through edge tracking [FKU77]. These techniques evolved into extracting surfaces directly from the volume data by specifying a threshold value.
Reference: [TT84] <author> H. K. Tuy and L. T. Tuy. </author> <title> Direct 2d display of 3d objects. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 4(10):29 - 33, </volume> <year> 1984. </year>
Reference-contexts: For 27 classification, opacity is made to be a function of the local gradient. These functions depend on whether one is trying to extract value contours or region boundary surfaces. Other ray-casting approaches that have appeared in the literature are as follows: Tuy <ref> [TT84] </ref> used ray-casting to render binary voxels, Montani [MS90] rendered constant valued voxels using the sticks representation, Novins [NSG90] used a slab based method to achieve perspective projection, Krueger [Kru90] developed an elaborate and flexible transport theory model, Garity [Gar90], Challinger [Cha90], Wilhelms [WCA + 90] raytraced irregular volume data and
Reference: [Tur92] <author> G. Turk. </author> <title> Re-tiling polygonal surfaces. </title> <booktitle> Computer Graphics (ACM Siggraph Proceedings), </booktitle> <volume> 26(2):55 - 64, </volume> <year> 1992. </year>
Reference-contexts: The index and the triangles produced are also shown. proposed by [WVG90b, NH91, Mat94]. The marching cubes algorithm also produces a large number of geometric primitives. To increase the efficiency, Wilhelms and Van Gelder [WVG90a] proposed a hierarchical approach while <ref> [Tur92, SZL92, MSS94] </ref> have proposed approaches to reduce the number of the primitives.
Reference: [UK88] <author> C. Upson and M. Keeler. </author> <title> The V-buffer : Visible volume rendering. </title> <journal> Computer Graphics, </journal> <volume> 22(4):59 - 64, </volume> <year> 1988. </year>
Reference-contexts: In the former, one starts from object space and calculates the contributions of the sub-volumes to the affected pixels. In the latter, for each pixel in image space, one accumulates the contributions of the sub-volumes affecting it. Image Order Algorithms Image order algorithms are ray-casting techniques <ref> [Lev88, Sab88, UK88] </ref>. This is distinct from ray-tracing since rays are not reflected from objects. Instead, rays are cast from each pixel into the data set in object space which they enter and exit in a straight line (figure 3.2). <p> This integral equation is then approximated by a discrete sum of products equation. Upson and Keeler <ref> [UK88] </ref> use independent color and opacity transfer functions for mapping the scalar values. They use finite differences at the nodes to calculate the normals used in shading. The integral is approximated as a discrete summation. <p> Researchers have taken two approaches in this case. Most break down the volume into sub-volumes and scan convert the front and back faces of the sub-volumes in front-to-back or back-to-front order <ref> [UK88, MHC90, ST90, WVG91] </ref>. A different approach called splatting composites the footprints of each node in the volume [Wes89, Wes90]. Upson and Keeler's [UK88] V-buffer algorithm determines a bounding box for each cell in front-to-back order. The bounding box is clipped to scanlines to produce pixel runs. <p> Most break down the volume into sub-volumes and scan convert the front and back faces of the sub-volumes in front-to-back or back-to-front order [UK88, MHC90, ST90, WVG91]. A different approach called splatting composites the footprints of each node in the volume [Wes89, Wes90]. Upson and Keeler's <ref> [UK88] </ref> V-buffer algorithm determines a bounding box for each cell in front-to-back order. The bounding box is clipped to scanlines to produce pixel runs. Each scanline can be broken up into five spans depending on the polygon produced by the cutting plane of the scanline.
Reference: [Ups89] <author> C. Upson. </author> <title> The application visualization system: A computational environment for scientific visualization. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 9(4):30 - 42, </volume> <year> 1989. </year>
Reference-contexts: Some domain-specific modular and extensible software packages evolved that included all the usual techniques encountered in a particular discipline [BMP + 90]. However, in the last few years a data flow paradigm has become very popular for general purpose, modular and extensible visualization software. Products such as AVS <ref> [Ups89] </ref>, Iris Explorer [Slo92], apE [Dye90], and IBM Data Explorer [LAC + 92], which have also come to be known as Modular Visualization Environments (MVE), all use this approach. <p> It is especially tailored for computational fluid dynamics needs. Modular Visualization Environments * Advanced Visualization System (AVS), AVS Inc. This is the earliest, general purpose, data flow based visualization system that has a wide user community <ref> [Ups89, Wet90b, AVS92, Bel93] </ref>. The architecture consists of five layers. At the bottom is the system interface layer that supports native graphics libraries of the platforms AVS runs on.
Reference: [Ups91] <author> Craig Upson. </author> <title> Volumetric visualization techniques. </title> <editor> In David F. Rogers and Rae A. Earnshaw, editors, </editor> <booktitle> State of the Art in Computer Graphics, </booktitle> <pages> pages 313 - 350. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1991. </year>
Reference-contexts: The table includes example data types and the techniques are classified as either discrete or continuous. Upson provides a two dimensional array where one axis represents the dimensionality of the computational domain, the other the dimensionality of the visual representation and the techniques appear as elements in the array <ref> [Ups91] </ref>.
Reference: [Vol89] <author> G. Volpe. </author> <title> Streamlines and streamribbons in aerodynamics. </title> <type> Technical report, </type> <institution> AIAA, </institution> <year> 1989. </year> <note> Technical Report AIAA-89-0140. </note>
Reference-contexts: Stream lines or tubes only give the path. One cannot obtain rotation information from these techniques. To alleviate this problem, stream ribbons have been used. In this case, the path of two particles are traced and polygons are generated from their joint path <ref> [Bel87, Vol89] </ref>. Since flow fields diverge, ribbons may need to be adaptively split to get better polygonal representations. Hultquist has proposed an advancing front method that achieves this more efficiently [Hul92].
Reference: [vW91] <author> J. J. van Wijk. </author> <title> Spot Noise: Texture synthesis for data visualization. </title> <journal> Computer Graphics, </journal> <volume> 25(4):309 - 318, </volume> <year> 1991. </year>
Reference-contexts: Alternatively, contour maps or streamlines can be used. Color can provide additional cues. Texture has also been used in visualizing 2D vector fields <ref> [vW91] </ref>. Three dimensional vector visualization has been extensively studied under the name flow visualization, and many techniques exist. One approach is to reduce the dimensionality by visualizing the field on a cutting plane or an arbitrary object's surface. <p> When the vertices of these polygons are joined, one gets a non-cylindrical tube with local deformations. Van Wijk creates textures by spot noise to visualize scalar and vector fields on surfaces <ref> [vW91] </ref>. By varying the parameters of the spots, such as shape and size, different textures are obtained that best fit the problem. Van Wijk also uses surface particles to visualize flow fields [vW92].
Reference: [vW92] <author> J. J. van Wijk. </author> <title> Rendering surface particles. </title> <booktitle> In Proceedings: Visualization '92, </booktitle> <pages> pages 54 - 61. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1992. </year>
Reference-contexts: Van Wijk creates textures by spot noise to visualize scalar and vector fields on surfaces [vW91]. By varying the parameters of the spots, such as shape and size, different textures are obtained that best fit the problem. Van Wijk also uses surface particles to visualize flow fields <ref> [vW92] </ref>. Particles from a source are periodically released into the flow field and form a textured surface when rendered. By varying the shape of the source of the particles, he obtains different visualization techniques such as streamlines, tubes and ribbons. He provides a detailed method for rendering shaded particles.
Reference: [vW93] <author> Jarke J. van Wijk. </author> <title> Implicit stream surfaces. </title> <booktitle> In Proceedings: Visualization '93, </booktitle> <pages> pages 245 - 252. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1993. </year>
Reference-contexts: Leeuw and van Wijk map scalar, vector and tensor values to a 3-D probe for interactive local flow field visualization [dLvW93]. Van Wijk also used implicit surface representation to construct implicit stream surfaces of flow fields <ref> [vW93] </ref>. Crawfis and Max extended the splatting technique to include textures for vector field visualization [CM93].
Reference: [WCA + 90] <author> J. Wilhelms, J. Challinger, N. Alper, S. Ramamoorthy, and A. Vaziri. </author> <title> Direct volume rendering of curvilinear volumes. </title> <booktitle> Computer Graphics (Proceedings of the San Diego Workshop on Volume Visualization), </booktitle> <volume> 24(5):41 - 46, </volume> <year> 1990. </year>
Reference-contexts: in the literature are as follows: Tuy [TT84] used ray-casting to render binary voxels, Montani [MS90] rendered constant valued voxels using the sticks representation, Novins [NSG90] used a slab based method to achieve perspective projection, Krueger [Kru90] developed an elaborate and flexible transport theory model, Garity [Gar90], Challinger [Cha90], Wilhelms <ref> [WCA + 90] </ref> raytraced irregular volume data and Yagel [YK92] used a template-based ray-casting method for rendering constant valued voxels. More recently, Stander and Hart have used a Lipschitz method for accelerating a ray-casting volume renderer [SH94].
Reference: [Wes89] <author> L. Westover. </author> <title> Interactive volume rendering. </title> <booktitle> Proceedings of the Chapel Hill Workshop on Volume Visualization(ACM Siggraph), </booktitle> <pages> pages 9 - 16, </pages> <year> 1989. </year>
Reference-contexts: Researchers have taken two approaches in this case. Most break down the volume into sub-volumes and scan convert the front and back faces of the sub-volumes in front-to-back or back-to-front order [UK88, MHC90, ST90, WVG91]. A different approach called splatting composites the footprints of each node in the volume <ref> [Wes89, Wes90] </ref>. Upson and Keeler's [UK88] V-buffer algorithm determines a bounding box for each cell in front-to-back order. The bounding box is clipped to scanlines to produce pixel runs. Each scanline can be broken up into five spans depending on the polygon produced by the cutting plane of the scanline. <p> All of them provide options for using hardware interpolation of color and opacity values across polygons to achieve greater speed at the cost of some accuracy. A different approach was taken by Westover <ref> [Wes89, Wes90] </ref>. He used a reconstruction kernel (a Gaussian) and proceeded from each node in the grid to calculate the contribution its footprint made on the affected pixels, a process he termed splatting.
Reference: [Wes90] <author> L. Westover. </author> <title> Footprint evaluation for volume rendering. </title> <journal> Computer Graphics, </journal> <volume> 24(4):367 - 376, </volume> <year> 1990. </year>
Reference-contexts: Researchers have taken two approaches in this case. Most break down the volume into sub-volumes and scan convert the front and back faces of the sub-volumes in front-to-back or back-to-front order [UK88, MHC90, ST90, WVG91]. A different approach called splatting composites the footprints of each node in the volume <ref> [Wes89, Wes90] </ref>. Upson and Keeler's [UK88] V-buffer algorithm determines a bounding box for each cell in front-to-back order. The bounding box is clipped to scanlines to produce pixel runs. Each scanline can be broken up into five spans depending on the polygon produced by the cutting plane of the scanline. <p> All of them provide options for using hardware interpolation of color and opacity values across polygons to achieve greater speed at the cost of some accuracy. A different approach was taken by Westover <ref> [Wes89, Wes90] </ref>. He used a reconstruction kernel (a Gaussian) and proceeded from each node in the grid to calculate the contribution its footprint made on the affected pixels, a process he termed splatting.
Reference: [Wet90a] <author> Mark Vande Wettering. apE 2.0. </author> <booktitle> Pixel, </booktitle> <pages> pages 30 - 34, </pages> <month> November/December </month> <year> 1990. </year>
Reference-contexts: AVS allows upstream data flow suitable for loops and conditionals in the network. AVS can be used to build customized applications. * apE, TaraVisual Inc. Another early package, apE was originally developed by Ohio State University and was public domain until it was licensed to TaraVisual for marketing <ref> [Dye90, Wet90a] </ref>. It is a general purpose, data flow visualization system. The work area where the visual program is constructed is known as the wrench.
Reference: [Wet90b] <author> Mark Vande Wettering. </author> <title> The application visualization system AVS 2.0. </title> <booktitle> Pixel, </booktitle> <pages> pages 30 - 33, </pages> <month> July/August </month> <year> 1990. </year> <month> 104 </month>
Reference-contexts: It is especially tailored for computational fluid dynamics needs. Modular Visualization Environments * Advanced Visualization System (AVS), AVS Inc. This is the earliest, general purpose, data flow based visualization system that has a wide user community <ref> [Ups89, Wet90b, AVS92, Bel93] </ref>. The architecture consists of five layers. At the bottom is the system interface layer that supports native graphics libraries of the platforms AVS runs on.
Reference: [WMW86] <author> B. Wyvill, C. McPheeters, and G. Wyvill. </author> <title> Data structure for soft objects. </title> <journal> The Visual Computer, </journal> <volume> 2(4):227 - 234, </volume> <year> 1986. </year>
Reference-contexts: To increase the efficiency, Wilhelms and Van Gelder [WVG90a] proposed a hierarchical approach while [Tur92, SZL92, MSS94] have proposed approaches to reduce the number of the primitives. Other related techniques for extracting and rendering surfaces use implicit surface methods <ref> [Bli82a, WMW86, Blo88] </ref>. 3.4.3 Direct Volume Rendering The term "direct" in Direct Volume Rendering emphasizes the distinguishing characteristic of the technique: no intermediate geometric primitives are produced, as is the case in isosurface extraction.
Reference: [WVG90a] <author> J. Wilhelms and A Van Gelder. </author> <title> Octrees for faster isosurface generation. </title> <booktitle> Computer Graphics (Proceedings of the San Diego Workshop on Volume Visualization), </booktitle> <volume> 24(5):57 - 62, </volume> <year> 1990. </year>
Reference-contexts: The index and the triangles produced are also shown. proposed by [WVG90b, NH91, Mat94]. The marching cubes algorithm also produces a large number of geometric primitives. To increase the efficiency, Wilhelms and Van Gelder <ref> [WVG90a] </ref> proposed a hierarchical approach while [Tur92, SZL92, MSS94] have proposed approaches to reduce the number of the primitives.
Reference: [WVG90b] <author> J. Wilhelms and A Van Gelder. </author> <title> Topological considerations in isosurface generation: Extended abstract. </title> <booktitle> Computer Graphics (Proceedings of the San Diego Workshop on Volume Visualization), </booktitle> <volume> 24(5):79 - 86, </volume> <year> 1990. </year>
Reference-contexts: Solutions to this problem have been 24 are above while the others are below a given threshold causing edge intersections e1,e4,e9 and e6,e7,e12. The index and the triangles produced are also shown. proposed by <ref> [WVG90b, NH91, Mat94] </ref>. The marching cubes algorithm also produces a large number of geometric primitives. To increase the efficiency, Wilhelms and Van Gelder [WVG90a] proposed a hierarchical approach while [Tur92, SZL92, MSS94] have proposed approaches to reduce the number of the primitives.
Reference: [WVG91] <author> J. Wilhelms and A Van Gelder. </author> <title> A coherent projection approach for direct volume rendering. </title> <journal> Computer Graphics, </journal> <volume> 25(4):275 - 284, </volume> <year> 1991. </year>
Reference-contexts: Researchers have taken two approaches in this case. Most break down the volume into sub-volumes and scan convert the front and back faces of the sub-volumes in front-to-back or back-to-front order <ref> [UK88, MHC90, ST90, WVG91] </ref>. A different approach called splatting composites the footprints of each node in the volume [Wes89, Wes90]. Upson and Keeler's [UK88] V-buffer algorithm determines a bounding box for each cell in front-to-back order. The bounding box is clipped to scanlines to produce pixel runs. <p> They break down the cells into convex polyhedra (tetrahedra in the case of [ST90]), sort them in depth order and scan convert them. Max et al. use an assumption to provide an analytical solution to the ray integral equation. Wilhelms and Van Gelder <ref> [WVG91, GW93] </ref> employ a similar projection technique for rectilinear and 28 curvilinear volumes. All of them provide options for using hardware interpolation of color and opacity values across polygons to achieve greater speed at the cost of some accuracy. A different approach was taken by Westover [Wes89, Wes90].
Reference: [YK92] <author> R. Yagel and A. Kaufman. </author> <title> Template-based volume viewing. </title> <type> EUROGRAPHICS '92, </type> <address> 11(3):153 - 167, </address> <year> 1992. </year>
Reference-contexts: ray-casting to render binary voxels, Montani [MS90] rendered constant valued voxels using the sticks representation, Novins [NSG90] used a slab based method to achieve perspective projection, Krueger [Kru90] developed an elaborate and flexible transport theory model, Garity [Gar90], Challinger [Cha90], Wilhelms [WCA + 90] raytraced irregular volume data and Yagel <ref> [YK92] </ref> used a template-based ray-casting method for rendering constant valued voxels. More recently, Stander and Hart have used a Lipschitz method for accelerating a ray-casting volume renderer [SH94]. Object Order Algorithms Object-order algorithms are projection techniques where the main loop of the algorithm proceeds in object space.
Reference: [YP88] <author> P. K. Yeung and S. B. Pope. </author> <title> An algorithm for tracking fluid particles in numerical simulations of homogeneous turbulence. </title> <journal> J. Comp. Physics, </journal> <volume> 79:373, </volume> <year> 1988. </year>
Reference-contexts: If this path consists of line segments, one gets so-called streamlines. The line segments can be colored according to the magnitude of the vector to give extra information. Issues such as the integration method, vector interpolation and step size adapting have appeared in the literature <ref> [MP88, Bun88, YP88, EOR89] </ref>. More recently, Kenright and Mallinson have proposed a new approach for tracking streamlines where streamlines are considered to be the intersection of two stream surfaces [KM92]. In 3D, one can get an improved perception if, instead of drawing lines, one draws 3D shapes such as cylinders.
References-found: 106

