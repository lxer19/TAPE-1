URL: http://www.eecis.udel.edu/~fecko/PAPERS-PS/evry98.ps.gz
Refering-URL: http://www.eecis.udel.edu/~fecko/mf-research.html
Root-URL: http://www.eecis.udel.edu
Title: OPTIMUM TEST SEQUENCE GENERATION FROM ESTELLE SPECIFICATIONS  
Author: Mariusz A. Fecko M. Umit Uyar Paul D. Amer, Adarshpal S. Sethi 
Date: 157-161, Nov 1998)  
Note: (Proc. Estelle'98, pp  
Address: New York  
Affiliation: Computer and Information Science Department University of Delaware, Newark, DE  Department of Electrical Engineering City College of the City University of  Computer and Information Science Department University of Delaware, Newark, DE  
Abstract: The recent research results from the Protocol Engineering Lab of the University of Delaware in minimum-length test generation based on Estelle specifications are summarized. The methods use models restricting the number of self-loops to be consecutively traversed for each state, and utilizing semicontrollable interfaces of the IUT to increase the number of testable transitions. The initial results show that test sequences can be successfully generated for real-life Estelle specifications, such as MIL-STD 188-220B. The test sequences are free of interruptions due to unexpected timeouts. Also, the number of testable transitions is increased by 300%. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Ural and B. Yang, </author> <title> "A test sequence selection method for protocol testing," </title> <journal> IEEE Trans. on Communications, </journal> <volume> vol. 39, no. 4, </volume> <year> 1991. </year>
Reference-contexts: 1 Introduction Conformance test generation techniques reported in literature <ref> [1] </ref> - [6], using a deterministic finite-state machine (FSM) model of a protocol specification, focus on the optimization of the test sequence length. However, an Implementation Under Test (IUT) may have timing constraints imposed by active timers.
Reference: [2] <author> R. E. Miller and S. Paul, </author> <title> "On the generation of minimal-length conformance tests for communication protocols," </title> <journal> IEEE/ACM Trans. on Networking, </journal> <volume> vol. 2, </volume> <pages> pp. 116-129, </pages> <month> Feb </month> <year> 1993. </year>
Reference: [3] <author> B. S. Bosik and M. U. Uyar, </author> <title> "FSM-based formal methods in protocol conformance testing: from theory to implementation," </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> vol. 22, </volume> <pages> pp. 7-34, </pages> <month> Sep </month> <year> 1991. </year>
Reference-contexts: The IUT responds with outputs (such as message b in Figure 2), which are applied to F SM 1 at I 1 's points of control and observation (PCOs) <ref> [3, 22] </ref>. As response to those outputs, F SM 1 will send inputs (similar to message c in Figure 2) to the IUT through semicontrollable interface I 1 .
Reference: [4] <author> W. Y. Chan and S. T. Vuong, </author> <title> "An improved protocol test generation procedure based on UIOs," </title> <booktitle> in Proc. ACM SIGCOMM, </booktitle> <month> Sep </month> <year> 1989. </year>
Reference: [5] <author> A. V. Aho, A. T. Dahbura, D. Lee, and M. U. Uyar, </author> <title> "An optimization technique for protocol conformance test generation based on UIO sequences and rural Chinese postman tours," </title> <journal> IEEE Trans. on Communications, </journal> <volume> vol. 39, </volume> <pages> pp. 1604-1615, </pages> <month> Nov </month> <year> 1991. </year>
Reference-contexts: Due to the practical diagnostic considerations [23], we prefer testing edges when no inputs are buffered in semicontrollable interfaces. The Aho et al. <ref> [5] </ref> optimization technique gives the minimum length test sequence for G 0 shown in Table 2.
Reference: [6] <author> B. Sarikaya, G. von Bochmann, and E. Cerny, </author> <title> "A test design methodology for protocol testing," </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> vol. 13, </volume> <pages> pp. 518-531, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: 1 Introduction Conformance test generation techniques reported in literature [1] - <ref> [6] </ref>, using a deterministic finite-state machine (FSM) model of a protocol specification, focus on the optimization of the test sequence length. However, an Implementation Under Test (IUT) may have timing constraints imposed by active timers.
Reference: [7] <author> Information Processing Systems Open System Interconnection, </author> <title> ISO International Standard 9074: Estelle a Formal Description Technique Based on an Extended State Transition Model, </title> <year> 1989. </year>
Reference-contexts: The interactions involving such interfaces may render some portions of the protocol untestable, and may introduce non-determinism and/or race conditions during testing. These timing and controllability issues were present in the extended FSM (EFSM) model of the Estelle <ref> [7, 8, 9] </ref> specification of MIL-STD 188-220B [10, 11, 12] for Combat Net Radio communication.
Reference: [8] <author> S. Budkowski and P. </author> <title> Dembinski, "An introduction to Estelle: A specification language for distributed systems," </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> vol. 14, no. 1, </volume> <pages> pp. 3-24, </pages> <year> 1991. </year>
Reference-contexts: The interactions involving such interfaces may render some portions of the protocol untestable, and may introduce non-determinism and/or race conditions during testing. These timing and controllability issues were present in the extended FSM (EFSM) model of the Estelle <ref> [7, 8, 9] </ref> specification of MIL-STD 188-220B [10, 11, 12] for Combat Net Radio communication.
Reference: [9] <author> R. Tenney, </author> <title> "A tutorial introduction to Estelle," </title> <type> Tech. Rep. 88-1, </type> <institution> Univ of Mass, </institution> <address> Boston, </address> <month> Jun </month> <year> 1988. </year>
Reference-contexts: The interactions involving such interfaces may render some portions of the protocol untestable, and may introduce non-determinism and/or race conditions during testing. These timing and controllability issues were present in the extended FSM (EFSM) model of the Estelle <ref> [7, 8, 9] </ref> specification of MIL-STD 188-220B [10, 11, 12] for Combat Net Radio communication.
Reference: [10] <institution> Military Standard Interoperability Standard for Digital Message Device Subsystems (MIL-STD 188-220B), </institution> <month> Jan </month> <year> 1998. </year>
Reference-contexts: The interactions involving such interfaces may render some portions of the protocol untestable, and may introduce non-determinism and/or race conditions during testing. These timing and controllability issues were present in the extended FSM (EFSM) model of the Estelle [7, 8, 9] specification of MIL-STD 188-220B <ref> [10, 11, 12] </ref> for Combat Net Radio communication. <p> Clearly, this is not the goal of testing. Therefore, a properly generated test sequence must take timer constraints into account. Examples of protocols that contain many self-loop transitions in their FSM models include ISDN Q.931 for supplementary voice services, MIL-STD 188-220B <ref> [10] </ref> for Combat Net Radio communication, and LAPD [13], the data link protocol for the ISDN's D channel.
Reference: [11] <author> M. A. Fecko, P. D. Amer, A. S. Sethi, M. U. Uyar, T. Dzik, R. Menell, and M. McMahon, </author> <title> "Formal design and testing of MIL-STD 188-220A based on Estelle," </title> <booktitle> in Proc. MILCOM'97: IEEE Military Comm. Conf., </booktitle> <address> (Monterey, CA), </address> <month> Nov </month> <year> 1997. </year>
Reference-contexts: The interactions involving such interfaces may render some portions of the protocol untestable, and may introduce non-determinism and/or race conditions during testing. These timing and controllability issues were present in the extended FSM (EFSM) model of the Estelle [7, 8, 9] specification of MIL-STD 188-220B <ref> [10, 11, 12] </ref> for Combat Net Radio communication.
Reference: [12] <author> P. D. Amer, M. A. Fecko, A. S. Sethi, M. U. Uyar, T. J. Dzik, R. Menell, and M. McMahon, </author> <title> "Using Es-telle to evolve MIL-STD 188-220," </title> <booktitle> in Proc. Estelle'98: Int'l Workshop on FDT Estelle, </booktitle> <address> (Evry, France), </address> <month> Nov </month> <year> 1998. </year>
Reference-contexts: The interactions involving such interfaces may render some portions of the protocol untestable, and may introduce non-determinism and/or race conditions during testing. These timing and controllability issues were present in the extended FSM (EFSM) model of the Estelle [7, 8, 9] specification of MIL-STD 188-220B <ref> [10, 11, 12] </ref> for Combat Net Radio communication.
Reference: [13] <author> M. U. Uyar and M. H. Sherif, </author> <title> "Protocol modeling for conformance testing: Case study for the ISDN LAPD protocol," </title> <journal> AT&T Technical Journal, </journal> <volume> vol. 69, </volume> <month> Jan </month> <year> 1990. </year>
Reference-contexts: Clearly, this is not the goal of testing. Therefore, a properly generated test sequence must take timer constraints into account. Examples of protocols that contain many self-loop transitions in their FSM models include ISDN Q.931 for supplementary voice services, MIL-STD 188-220B [10] for Combat Net Radio communication, and LAPD <ref> [13] </ref>, the data link protocol for the ISDN's D channel.
Reference: [14] <author> K. K. Sabnani and A. T. Dahbura, </author> <title> "A protocol test generation procedure," </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> vol. 15, </volume> <pages> pp. 285-297, </pages> <year> 1988. </year>
Reference-contexts: In addition to the original self-loops of a specification model, additional self-loops are typically created when generated test sequences use state verification techniques such as unique input/output (UIO) sequences <ref> [14] </ref>, distinguishing sequences [15, 16], or char acterizing sequences [15, 16]. 1 e8 e6 v 0 e1 e2 e4 e5 e0 e10 e12 Test sequence (34 edges) e0 e1 e2 e3e10 e12 e9e0 e2 e2 e9 e2 e4 e6e1 e0e9 Test sequence (40 edges) e0 e1 e10 e12 e0 e2 e9 <p> Note that, for simplicity, the UIO sequences <ref> [14] </ref> are not included in this sequence. 4 Conclusions and future work This paper summarizes some recent results of generating minimum-length test cases from Estelle specifications under the constraints of timing and controllability. The methodology discussed in Section 2 uses an FSM model of a communications protocol.
Reference: [15] <author> A. Bhattacharyya, </author> <title> Checking Experiments in Sequential Machines. </title> <address> New York, N.Y.: </address> <publisher> John Wiley & Sons, </publisher> <year> 1989. </year>
Reference-contexts: In addition to the original self-loops of a specification model, additional self-loops are typically created when generated test sequences use state verification techniques such as unique input/output (UIO) sequences [14], distinguishing sequences <ref> [15, 16] </ref>, or char acterizing sequences [15, 16]. 1 e8 e6 v 0 e1 e2 e4 e5 e0 e10 e12 Test sequence (34 edges) e0 e1 e2 e3e10 e12 e9e0 e2 e2 e9 e2 e4 e6e1 e0e9 Test sequence (40 edges) e0 e1 e10 e12 e0 e2 e9 e2 e0 e1 <p> In addition to the original self-loops of a specification model, additional self-loops are typically created when generated test sequences use state verification techniques such as unique input/output (UIO) sequences [14], distinguishing sequences <ref> [15, 16] </ref>, or char acterizing sequences [15, 16]. 1 e8 e6 v 0 e1 e2 e4 e5 e0 e10 e12 Test sequence (34 edges) e0 e1 e2 e3e10 e12 e9e0 e2 e2 e9 e2 e4 e6e1 e0e9 Test sequence (40 edges) e0 e1 e10 e12 e0 e2 e9 e2 e0 e1 e4 e6 e7 e11 e12 e2
Reference: [16] <author> Z. Kohavi, </author> <title> Switching and Finite Automata Theory. </title> <address> New York, N.Y.: McGraw Hill, </address> <year> 1978. </year>
Reference-contexts: In addition to the original self-loops of a specification model, additional self-loops are typically created when generated test sequences use state verification techniques such as unique input/output (UIO) sequences [14], distinguishing sequences <ref> [15, 16] </ref>, or char acterizing sequences [15, 16]. 1 e8 e6 v 0 e1 e2 e4 e5 e0 e10 e12 Test sequence (34 edges) e0 e1 e2 e3e10 e12 e9e0 e2 e2 e9 e2 e4 e6e1 e0e9 Test sequence (40 edges) e0 e1 e10 e12 e0 e2 e9 e2 e0 e1 <p> In addition to the original self-loops of a specification model, additional self-loops are typically created when generated test sequences use state verification techniques such as unique input/output (UIO) sequences [14], distinguishing sequences <ref> [15, 16] </ref>, or char acterizing sequences [15, 16]. 1 e8 e6 v 0 e1 e2 e4 e5 e0 e10 e12 Test sequence (34 edges) e0 e1 e2 e3e10 e12 e9e0 e2 e2 e9 e2 e4 e6e1 e0e9 Test sequence (40 edges) e0 e1 e10 e12 e0 e2 e9 e2 e0 e1 e4 e6 e7 e11 e12 e2
Reference: [17] <author> M. U. Uyar, M. A. Fecko, A. S. Sethi, and P. D. Amer, </author> <title> "Generation of realizable conformance tests under timing constraints," </title> <booktitle> in Proc. MILCOM'98: IEEE Military Comm. Conf., </booktitle> <address> (Bedford, MA), </address> <month> Oct </month> <year> 1998. </year>
Reference-contexts: The presented methodology <ref> [17, 18, 19] </ref> optimizes the test sequence length and cost, under the constraint that an IUT can remain only a limited amount of time in some states during testing, before a timer's expira tion forces a state change. <p> The methodology uses UIO sequences for state verification. However, the results presented also are ap plicable to test generation that uses distinguishing or characterizing sequences. Earlier results of this study, limited to verification sequences that are self-loops, are presented in [19]. The later papers <ref> [17, 18] </ref> gen eralize these earlier results to both self-loop and non-self-loop verification sequences. Example 1: Consider the FSM (represented by the graph G (V; E)) with self-loop transitions shown in Figure 1 (a). <p> i ) self-loops would result in disruption of a test se quence; * d min self (v i ) the minimum number of times a tour covering all edges in E must include vertex v i 2 V (the derivation of d min self (v i ) is shown in <ref> [17, 18, 19] </ref>).
Reference: [18] <author> M. U. Uyar, M. A. Fecko, A. S. Sethi, and P. D. Amer, </author> <title> "Test generation for protocols with timing constraints," </title> <type> Tech. Rep. </type> <institution> TR-98-07, CIS Dept., University of Delaware, Newark, DE, </institution> <year> 1997. </year> <note> (Submitted for publication). </note>
Reference-contexts: The presented methodology <ref> [17, 18, 19] </ref> optimizes the test sequence length and cost, under the constraint that an IUT can remain only a limited amount of time in some states during testing, before a timer's expira tion forces a state change. <p> The methodology uses UIO sequences for state verification. However, the results presented also are ap plicable to test generation that uses distinguishing or characterizing sequences. Earlier results of this study, limited to verification sequences that are self-loops, are presented in [19]. The later papers <ref> [17, 18] </ref> gen eralize these earlier results to both self-loop and non-self-loop verification sequences. Example 1: Consider the FSM (represented by the graph G (V; E)) with self-loop transitions shown in Figure 1 (a). <p> i ) self-loops would result in disruption of a test se quence; * d min self (v i ) the minimum number of times a tour covering all edges in E must include vertex v i 2 V (the derivation of d min self (v i ) is shown in <ref> [17, 18, 19] </ref>).
Reference: [19] <author> M. U. Uyar, M. A. Fecko, A. S. Sethi, and P. D. Amer, </author> <title> "Minimum-cost solutions for testing protocols with timers," </title> <booktitle> in Proc. IEEE Int'l Performance, Computing, and Communications Conf., </booktitle> <address> (Phoenix, AZ), </address> <pages> pp. 346-354, </pages> <month> Feb </month> <year> 1998. </year>
Reference-contexts: The presented methodology <ref> [17, 18, 19] </ref> optimizes the test sequence length and cost, under the constraint that an IUT can remain only a limited amount of time in some states during testing, before a timer's expira tion forces a state change. <p> The methodology uses UIO sequences for state verification. However, the results presented also are ap plicable to test generation that uses distinguishing or characterizing sequences. Earlier results of this study, limited to verification sequences that are self-loops, are presented in <ref> [19] </ref>. The later papers [17, 18] gen eralize these earlier results to both self-loop and non-self-loop verification sequences. Example 1: Consider the FSM (represented by the graph G (V; E)) with self-loop transitions shown in Figure 1 (a). <p> i ) self-loops would result in disruption of a test se quence; * d min self (v i ) the minimum number of times a tour covering all edges in E must include vertex v i 2 V (the derivation of d min self (v i ) is shown in <ref> [17, 18, 19] </ref>). <p> Since in 2 IUT (N)-layer (N+1)-layer FSM 1 I 1 a d N-PDUs (N-1)-Service Provider Lower Tester PCOs semicontrollable interface. this example all UIO sequences are self-loops, the simplified conversion presented in <ref> [19] </ref> is sufficient. The vertices for which a premature timeout may disrupt a test sequence, which are v 1 and v 2 , are split and then connected by d min self (v 1 ) = 3 and d min self (v 2 ) = 4 edges, respectively.
Reference: [20] <author> J. K. Lenstra and A. H. G. R. Kan, </author> <title> "On general routing problems," </title> <journal> Networks, </journal> <volume> vol. 6, </volume> <pages> pp. 273-280, </pages> <year> 1976. </year>
Reference-contexts: The solution first augments an original graph representation of the protocol FSM model. Then it formulates a Rural Chinese Postman Problem solution <ref> [20] </ref> to generate a minimum-length tour. In the final test sequence generated, the number of consecutive self-loops never exceeds any state's specified limit.
Reference: [21] <author> M. U. Uyar and A. T. Dahbura, </author> <title> "Optimal test sequence generation for protocols: the Chinese postman algorithm applied to Q.931," </title> <booktitle> in Proc. IEEE GLOBE-COM, </booktitle> <pages> pp. 68-72, </pages> <month> Dec </month> <year> 1986. </year>
Reference-contexts: state ver and d min self for vertices v 0 ; v 1 ; v 2 ; and v 3 are as fol lows: Vertex UIO max self d state ver d min self v 0 e0 3 1 2 v 2 e6,e7 3 2 4 The Chinese postman method <ref> [21] </ref> when applied to the graph without any self-loop repetition constraint results in the test sequence e0; e0; e1; e2; e2; e2; e10; e9; e9; e9; e12; e0; e12; e1; e4; e7; e6; e7; e8; e6; e7; e5; e0 (1) containing 34 edges.
Reference: [22] <author> ISO, </author> <title> Information Technology - OSI, Geneva, Switzer-land, ISO International Standard 9646: Conformance Testing Methodology and Framework, </title> <year> 1991. </year>
Reference-contexts: The IUT responds with outputs (such as message b in Figure 2), which are applied to F SM 1 at I 1 's points of control and observation (PCOs) <ref> [3, 22] </ref>. As response to those outputs, F SM 1 will send inputs (similar to message c in Figure 2) to the IUT through semicontrollable interface I 1 .
Reference: [23] <author> M. A. Fecko, M. U. Uyar, A. S. Sethi, and P. D. Amer, </author> <title> "Issues in conformance testing: Multiple semicon-trollable interfaces," </title> <booktitle> in Proc. IFIP Joint Int'l Conf. </booktitle> <address> FORTE/PSTV, (Paris, France), </address> <pages> pp. 111-126, </pages> <month> Nov </month> <year> 1998. </year>
Reference-contexts: These inputs will trigger the appropriate transitions in the IUT, which will send output (s) to the lower tester (message d in Figure 2). The methodology presented in <ref> [23] </ref> addresses the problem of generating optimal realizable test sequences in an environment with multiple semicontrollable interfaces. The methodology fully utilizes semicontrollable interfaces in an IUT while avoiding the race conditions. An algorithm is introduced in [23] to modify the directed graph representation of the IUT such that its semicontrollable portions <p> The methodology presented in <ref> [23] </ref> addresses the problem of generating optimal realizable test sequences in an environment with multiple semicontrollable interfaces. The methodology fully utilizes semicontrollable interfaces in an IUT while avoiding the race conditions. An algorithm is introduced in [23] to modify the directed graph representation of the IUT such that its semicontrollable portions become directly controllable, where possible. In the most general case, obtaining such a graph conversion may end up with exponentially large number of nodes. However, it is shown [23] that special considerations such as the small <p> An algorithm is introduced in <ref> [23] </ref> to modify the directed graph representation of the IUT such that its semicontrollable portions become directly controllable, where possible. In the most general case, obtaining such a graph conversion may end up with exponentially large number of nodes. However, it is shown [23] that special considerations such as the small number of interfaces interacting with an IUT and diagnostics considerations make the problem size feasible for most practical cases. <p> The solid edges in Figure 4 are the mandatory edges that are incident to nodes that correspond to the case where both buffers are empty; the dashed-line edges are the ones that can be traversed only when either buffer contains an input. Due to the practical diagnostic considerations <ref> [23] </ref>, we prefer testing edges when no inputs are buffered in semicontrollable interfaces. The Aho et al. [5] optimization technique gives the minimum length test sequence for G 0 shown in Table 2. <p> A semicontrollable F SM i is expected to interact with the IUT (i.e., generate a desired input to the IUT as a response to the IUT's stimulus) without a tester's explicit control. As a future work, we plan on enhancing the graph conversion algorithm <ref> [23] </ref> by including preambles and postambles to control both the IUT and F SM i : bringing F SM i into a desired state by a preamble, and bringing F SM i from a given state into its initial state by a postam-ble.
Reference: [24] <author> R. Alur and D. L. Dill, </author> <title> "A theory of timed automata," </title> <journal> Theoretical Computer Science, </journal> <volume> vol. 126, </volume> <pages> pp. 183-235, </pages> <year> 1994. </year>
Reference-contexts: We intend to generalize the problem of timing constraints during testing by using a Timed Automata <ref> [24, 25, 26] </ref> model of a protocol. The technique outlined in Section 3 is focused on controlling an IUT.
Reference: [25] <author> R. Alur, C. Courcoubetis, N. Halbwachs, D. L. Dill, and H. Wong-Toi, </author> <title> "Minimization of timed transition systems," </title> <booktitle> in Proc. 3rd Conference on Concur-rency Theory (LNCS-360, </booktitle> <publisher> ed.), </publisher> <pages> pp. 340-354, </pages> <address> Sprinter-Verlag, </address> <year> 1992. </year>
Reference-contexts: We intend to generalize the problem of timing constraints during testing by using a Timed Automata <ref> [24, 25, 26] </ref> model of a protocol. The technique outlined in Section 3 is focused on controlling an IUT.
Reference: [26] <author> J. Springintveld, F. Vaandrager, and P. R. D'Argenio, </author> <title> "Testing timed automata," </title> <type> Tech. Rep. </type> <institution> CTIT-97-17, University of Twente, </institution> <address> the Netherlands, </address> <year> 1997. </year> <month> 5 </month>
Reference-contexts: We intend to generalize the problem of timing constraints during testing by using a Timed Automata <ref> [24, 25, 26] </ref> model of a protocol. The technique outlined in Section 3 is focused on controlling an IUT.
References-found: 26

