URL: http://now.cs.berkeley.edu/Implicit/sig98.ps.gz
Refering-URL: http://now.cs.berkeley.edu/Implicit/
Root-URL: 
Email: alanmg@cs.berkeley.edu  
Title: Scheduling with Implicit Information in Distributed Systems  
Author: Andrea C. Arpaci-Dusseau, David E. Culler, Alan M. Mainwaring fdusseau, culler, 
Affiliation: Computer Science Division University of California, Berkeley  
Abstract: Implicit coscheduling is a distributed algorithm for time-sharing communicating processes in a cluster of workstations. By observing and reacting to implicit information, local schedulers in the system make independent decisions that dynamically coordinate the scheduling of communicating processes. The principal mechanism involved is two-phase spin-blocking: a process waiting for a message response spins for some amount of time, and then relinquishes the processor if the response does not arrive. In this paper, we describe our experience implementing implicit coscheduling on a cluster of 16 UltraSPARC I workstations; this has led to contributions in three main areas. First, we more rigorously analyze the two-phase spin-block algorithm and show that spin time should be increased when a process is receiving messages. Second, we present performance measurements for a wide range of synthetic benchmarks and for seven Split-C parallel applications. Finally, we show how implicit coscheduling behaves under different job layouts and scaling, and discuss preliminary results for achieving fairness. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Alexandrov, M. Ionescu, K. E. Schauser, and C. Scheiman. LogGP: </author> <title> IncorporatingLong Messages into the LogP model One step closer towards a realistic model for parallel computation. </title> <booktitle> In 7th Annual Symposium on Parallel Algorithms and Architectures (SPAA'95), </booktitle> <month> July </month> <year> 1995. </year>
Reference-contexts: We now evaluate seven Split-C programs: matrix multiplication, mm, two copies of radix sort, radix <ref> [1, 12] </ref>, two fast Fourier transforms, fft [1, 10], and two versions of a model of electro-magnetic waves propagated in three dimensions, em3d [9]. When two versions of an application exist, one copy has been optimized to communicate with large messages, while the other uses short messages. <p> We now evaluate seven Split-C programs: matrix multiplication, mm, two copies of radix sort, radix [1, 12], two fast Fourier transforms, fft <ref> [1, 10] </ref>, and two versions of a model of electro-magnetic waves propagated in three dimensions, em3d [9]. When two versions of an application exist, one copy has been optimized to communicate with large messages, while the other uses short messages. These applications exhibit a variety of communication characteristics.
Reference: [2] <author> T. E. Anderson, D. E. Culler, D. A. Patterson, </author> <title> and the NOW Team. </title>
Reference-contexts: 1 Introduction Scheduling parallel applications in a distributed environment, such as a cluster of workstations <ref> [2] </ref>, remains an important and unsolved problem. For general-purpose and developmental workloads, time-sharing approachesare attractive becausethey provide good response time without migration or execution-time predictions. However, time-sharing has the drawback that communicating processes must be scheduled simultaneously for good performance.
References-found: 2

