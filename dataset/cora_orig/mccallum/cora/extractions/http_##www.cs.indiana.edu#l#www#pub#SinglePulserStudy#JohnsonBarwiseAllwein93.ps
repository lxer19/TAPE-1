URL: http://www.cs.indiana.edu/l/www/pub/SinglePulserStudy/JohnsonBarwiseAllwein93.ps
Refering-URL: http://www.cs.indiana.edu/l/www/pub/SinglePulserStudy/
Root-URL: http://www.cs.indiana.edu
Email: barwise@indiana.edu  
Title: Toward the Rigorous Use of Diagrams in Reasoning about Hardware  
Author: Steven D. Johnson sjohnson@indiana.edu Jon Barwise Gerard T. Allwein 
Date: May 1993  
Affiliation: Department of Computer Science Indiana University  Departments of Philosophy, Mathematics, and Computer Science Indiana University  Visual Inference Laboratory Indiana University Indiana University Logic Group  
Pubnum: Preprint No. IULG-93-23  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Jon Barwise. Hyperproof: </author> <title> an exercise in situated logic. </title> <booktitle> In Proceedings of the North Americal Logic Programming Conference, </booktitle> <year> 1990. </year>
Reference-contexts: Exploring these has led to the development of Hyperproof, 1 a specialized heterogeneous reasoning system developed under the guidance of Barwise and Etchemendy by Allwein, Greaves, and Lenz <ref> [1, 5] </ref>. This program is now being used at Stanford, Notre Dame, and Indiana to teach basic reasoning skills to students in a way that makes crucial use of visualization of information. <p> Hunt offers a radical statement of purist objectives [12]: "We envision providing a mathematical statement which we call a formula manual [Hunt's italics], that completely specifies the operation of a hardware component. With respect to digital systems, we want to: <ref> [1] </ref> Completely replace programmer's manuals, timing diagrams, interface specifications, power requirements, tec. with clear precise formulas. [2] Provide a perfectly clear foundation upon which systems can be built." Surely this is not the world to which we really aspire, for while the programmer's manual may convey information imperfectly, it conveys that
Reference: [2] <editor> Jon Barwise and John Etchemendy. </editor> <publisher> Turing's World. Academic Course-ware Exchange, </publisher> <year> 1986. </year>
Reference-contexts: idea that only formulas can be used in formal reasoning. 4 Author's name The CircuitProof pro ject The foundations of the research described here arose from previous work in information theoretic aspects of logic: Turing's World, a program for building and running Turing machines using only graphical representations for them <ref> [2] </ref>, and Tarski's World, a program to teach the language of first-order logic [4]. The success of these programs shows the power of graphical designs in reasoning in logic, but it also raises a host of new theoretical issues and possibilities. <p> With respect to digital systems, we want to: [1] Completely replace programmer's manuals, timing diagrams, interface specifications, power requirements, tec. with clear precise formulas. <ref> [2] </ref> Provide a perfectly clear foundation upon which systems can be built." Surely this is not the world to which we really aspire, for while the programmer's manual may convey information imperfectly, it conveys that imperfect information rather efficiently in human terms.
Reference: [3] <author> Jon Barwise and John Etchemendy. </author> <title> Visual information and valid reasoning. </title> <editor> In W. Zimmerman and S. Cunningham, editors, </editor> <booktitle> Visualization in Teaching and Learning Mathematics, </booktitle> <pages> pages 9-24. </pages> <booktitle> Mathematical Association of America, 1991. MAA Notes, </booktitle> <volume> No. </volume> <pages> 19. </pages>
Reference-contexts: In this paper we propose a new understanding of the role of various sorts of diagrams in the specification and design of computational hardware. This proposal stems from a larger project, initiated by Barwise and Etchemendy <ref> [3] </ref>, the goals of which are to develop a mathematical basis from which to understand the substantive logical relationships between diagrams and sentences, and to develop a new generation of automated reasoning tools from that basis. Microelectronic CAD systems are among the supreme examples of visualized reasoning environments.
Reference: [4] <author> Jon Barwise and John Etchemendy. </author> <title> The Language of First-order logic, with Tarski's World 3.0. </title> <booktitle> CLSI Lecture Notes, 2nd edition, </booktitle> <year> 1992. </year>
Reference-contexts: The CircuitProof pro ject The foundations of the research described here arose from previous work in information theoretic aspects of logic: Turing's World, a program for building and running Turing machines using only graphical representations for them [2], and Tarski's World, a program to teach the language of first-order logic <ref> [4] </ref>. The success of these programs shows the power of graphical designs in reasoning in logic, but it also raises a host of new theoretical issues and possibilities.
Reference: [5] <editor> Jon Barwise and John Etchemendy. Hyperproof. </editor> <publisher> University of Chicago Press, </publisher> <year> 1993. </year> <note> In press. </note>
Reference-contexts: Exploring these has led to the development of Hyperproof, 1 a specialized heterogeneous reasoning system developed under the guidance of Barwise and Etchemendy by Allwein, Greaves, and Lenz <ref> [1, 5] </ref>. This program is now being used at Stanford, Notre Dame, and Indiana to teach basic reasoning skills to students in a way that makes crucial use of visualization of information.
Reference: [6] <author> Avra Cohn. </author> <title> Correctness properties of the viper block model: the second level. </title> <editor> In G. Birtwistle and P. A. Subrahmanyam, editors, </editor> <booktitle> Current Trends in Hardware Verification and Automated Theorem Proving, </booktitle> <pages> pages 1-91, </pages> <address> New York, 1989. </address> <publisher> Springer. </publisher>
Reference-contexts: Hunt is justifiably calling for greater rigor in the description of hardware, but his formula manual, as described, would be of marginal benefit to the human user. Cohn poses the central problem in her summary of the VIPER verification project <ref> [6] </ref>: "The first task in the [block level] verification effort is to derive a functional expression of the block model in a formal logic which is suitable for reasoning and proof. This is necessary because it is difficult to reason formally about a schematic diagram indicating [information flow].
Reference: [7] <author> A. L. Davis. </author> <title> What do computer architects design anyway? In G. </title> <editor> Birtwistle and P. A. Subrahmanyam, editors, </editor> <booktitle> Current Trends in Hardware Verification and Automated Theorem Proving, </booktitle> <pages> pages 463-479. </pages> <publisher> Springer, </publisher> <address> New York, </address> <year> 1989. </year>
Reference-contexts: Often, these differ dramatically. There must be other reasons for the ubiquitous use of diagrams. As in many realms of mathematical discourse, the interaction of a narrative argument and a circuit diagram yields an efficient mode of explanation. The following excerpt from <ref> [7] </ref> is typical: ": : : When A = B either the N-types will be turned on or the P-types. They will clamp the input to the strong (S) inverter, overpower the weak (W) inverter, and the output will change to the proper level.
Reference: [8] <author> Mike Gordon. </author> <title> Why higher-order logic is a good formalism for specifying and verifying hardware. </title> <editor> In G. J. Milne and P. A. Subrahmanyam, editors, </editor> <booktitle> Formal Aspects of VLSI Design, </booktitle> <pages> pages 153-177, </pages> <address> Amsterdam, 1986. </address> <publisher> North-Holland. </publisher>
Reference-contexts: In predicate logic for example, one would employ relations for devices, variables for wires, and conjunction for composition <ref> [8] </ref>. The narrative sketches a proof, "this circuit is a C-element," listing relevant facts that can be extraced from such a formula and which, taken together, should imply the behavioral properties of a C-element.
Reference: [9] <author> E. M. Mayger, M. D. Francis, R. L. Harris, G. Musgrave, and M. P. Fourman. </author> <title> Dialog linking formal proof to the design environment. Abstract Hardware Ltd. </title> <type> report, </type> <address> dated 1989. Uxbridge, U. K. </address>
Reference-contexts: Given the human tendencies for using both forms, it is worth investigating a middle ground. A notable example of work connecting diagramatic representation with formal proof is the LAMBDA system of Fourman and others <ref> [9] </ref>. A schematic-entry facility called DIALOG associates graphical symbols with HOL proof Title 9 tactics, which are invoked as new components are connected. These tactics generate proof obligations, which may be resolved by either graphical or textual interactions with the system.
Reference: [10] <author> Thomas F. Melham. </author> <title> Formalizing Abstraction Mechanisms for Hardware Verification in Higher Order Logic. </title> <type> PhD thesis, </type> <institution> University of Cambridge, </institution> <month> August </month> <year> 1990. </year> <note> Computer Laboratory Technical Report No. 201. 38 Author's name </note>
Reference-contexts: However, this is only the first step toward getting how the diagramatic reasoning systems to interact. Our visual forms reflect three of the four principal aspects of hardware design <ref> [10] </ref>. Circuit diagrams deal with the design structure; State machines deal with design behavior; and timing diagrams deal with the aspect of timing, which includes not only real-time constraints but also protocol and com-muncation.
Reference: [11] <author> S. Owre, J. M. Rushby, and N. Shankar. PVS: </author> <title> a prototype verification system. </title> <editor> In Deepak Kapur, editor, </editor> <booktitle> 11th International Conference on Automated Deduction (CADE), </booktitle> <pages> pages 748-752. </pages> <publisher> Springer, </publisher> <year> 1992. </year> <booktitle> Volume 607 of Springer Lecture Notes in Artificial Intelligence. </booktitle>
Reference-contexts: Since there are constructions that produce circuits from state machines and state machines from circuits these two diagramantic forms are equivalent with respect to the class of profiles they can describe. 2 Proved by Paul Miner using PVS <ref> [11] </ref> 28 Author's name Timing diagrams are properly more expressive than the circuit diagrams and machine diagrams. For instance, our Single-pulser specification, would include a device which generates its output pulse at the midpoint of every input pulse; and no circuit could realize that implementation.
Reference: [12] <author> Jr. Warren A. Hunt. </author> <title> a formal HDL and its use in the FM9001 verification. </title> <booktitle> Second NASA Formal Methods Workshop 1992, NASA Conference Publication 10110, </booktitle> <institution> Langley Research Center, Hampton Virginia. </institution> <note> From an oral presentation. </note>
Reference-contexts: Discovered properties like "pull-down path" and "latch" emerge as syntactic qualities of the diagram, but would otherwise have to be indirectly developed in the course of a formal deduction. Hunt offers a radical statement of purist objectives <ref> [12] </ref>: "We envision providing a mathematical statement which we call a formula manual [Hunt's italics], that completely specifies the operation of a hardware component.
Reference: [13] <author> Daniel Weise. </author> <title> Constraints, abstraction and verification. </title> <editor> In M. Leeser and G. Brown, editors, </editor> <title> Hardware Specification, Verification and Synthesis: </title> <journal> Mathematical Aspects, </journal> <pages> pages 25-39, </pages> <address> Berlin, </address> <year> 1989. </year> <institution> Springer. Mathematical Sciences Institute Workshop, Cornell University. </institution>
Reference-contexts: But as Weise <ref> [13] </ref> and many others have explained, this is too weak, since, for example, the empty set becomes an implementation profile of any specification. "Implementation" involves both entailment and consistency. In the directional case, we can say that any input accepted by the specification must also be accepted by the implementation.
Reference: [14] <author> David Winkel and Franklin Prosser. </author> <title> The Art of Digital Design. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, 2nd edition, </address> <year> 1989. </year> <note> Title 39 </note>
Reference-contexts: that the formal-methods community should engage itself with questions of this nature, in order to help establish a new foundation for 21st century logic. 10 Author's name The Unit-Pulser Example To illustrate a perspective on design, let us consider a simple example, drawn from the textbook by Winkel and Prosser <ref> [14] </ref>. We will present the example as it might be developed in an actual design class, with all the diagrams one would naturally use. Our claim is relatively simple: properly understood, this design process is a logically rigorous piece of reasoning it as it stands.
References-found: 14

