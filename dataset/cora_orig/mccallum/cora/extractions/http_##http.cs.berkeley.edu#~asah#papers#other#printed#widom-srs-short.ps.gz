URL: http://http.cs.berkeley.edu/~asah/papers/other/printed/widom-srs-short.ps.gz
Refering-URL: http://http.cs.berkeley.edu/~asah/papers/other/printed/
Root-URL: http://www.cs.berkeley.edu
Title: The Starburst Rule System: Language Design, Implementation, and Applications  
Author: Jennifer Widom 
Affiliation: IBM Almaden Research Center  
Date: 15(4):15-18, Dec. 1992  
Note: In: IEEE Data Engineering Bulletin, Special Issue on Active Databases,  
Abstract: This short paper provides an overview of the Starburst Rule System, a production rules facility integrated into the Starburst extensible database system. The rule language is based on arbitrary database state transitions rather than tuple- or statement-level changes, yielding a clear and flexible execution semantics. The rule system was implemented rapidly using the extensibility features of Starburst; it is integrated into all aspects of query and transaction processing, including concurrency control, authorization, recovery, etc. Using the Starburst Rule System, we have developed a number of methods for automatically generating database rule applications, including integrity constraints, materialized views, deductive rules, and semantic heterogeneity.
Abstract-found: 1
Intro-found: 1
Reference: [ACL91] <author> R. Agrawal, R.J. Cochrane, and B. Lindsay. </author> <title> On maintaining priorities in a production rule system. </title> <booktitle> In Proceedings of the Seventeenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 479-487, </pages> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: Rule processing is an iterative algorithm in which: 1. A triggered rule R is selected for consideration such that no other triggered rule has priority over R (for further details on Starburst's rule ordering strategy see <ref> [ACL91] </ref>) 2. R's condition is evaluated 3.
Reference: [AWH92] <author> A. Aiken, J. Widom, and J.M. Hellerstein. </author> <title> Behavior of database production rules: Termination, confluence, and observable determinism. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 59-68, </pages> <address> San Diego, California, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: whether the rules are guaranteed to terminate, whether they are guaranteed to produce a unique final database state independent of the ordering between non-prioritized rules, and whether they are guaranteed to produce a unique stream of "observable" actions independent of the ordering between non-prioritized rules; this work is reported in <ref> [AWH92] </ref>. Our second approach is based on the observation that, unlike rules themselves, many common rule applications are static, structured, and easy to specify.
Reference: [CW90] <author> S. Ceri and J. Widom. </author> <title> Deriving production rules for constraint maintenance. </title> <booktitle> In Proceedings of the Sixteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 566-577, </pages> <address> Brisbane, Australia, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: Further details on language design appear in [WF90, Wid92], further details on implementation appear in [WCL91], and further details on applications appear in <ref> [CW90, CW91, CW92a, CW92b, Wid91] </ref>. 2 Language Design There are two important aspects in the design of a database production rule language: the syntax for creating (as well as modifying, deleting, and grouping) rules, and the semantics of rule processing at run time. <p> We have developed a method whereby the user specifies constraints as SQL predicates over the database. From an arbitrary set of constraints, the system semi-automatically derives a set of rules that are guaranteed to maintain the constraints <ref> [CW90] </ref>. Materialized views Views are logical tables specified as queries over base (stored) tables. When a view is materialized, the view table is stored in the database and must be kept consistent with the base tables.
Reference: [CW91] <author> S. Ceri and J. Widom. </author> <title> Deriving production rules for incremental view maintenance. </title> <booktitle> In Proceedings of the Seventeenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 577-589, </pages> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: Further details on language design appear in [WF90, Wid92], further details on implementation appear in [WCL91], and further details on applications appear in <ref> [CW90, CW91, CW92a, CW92b, Wid91] </ref>. 2 Language Design There are two important aspects in the design of a database production rule language: the syntax for creating (as well as modifying, deleting, and grouping) rules, and the semantics of rule processing at run time. <p> We have developed a method whereby the user specifies views using SQL, then the system automatically derives a set of Starburst rules that are guaranteed to maintain materializations of the views in an incremental fashion <ref> [CW91] </ref>. Deductive rules Similar to views, deductive rules specify logical tables derived from base tables. However, deductive rules use a recursive logic programming formalism, which is more powerful than SQL views.
Reference: [CW92a] <author> S. Ceri and J. Widom. </author> <title> Deriving incremental production rules for deductive data. </title> <institution> IBM Research Report, IBM Almaden Research Center, </institution> <month> November </month> <year> 1992. </year>
Reference-contexts: Further details on language design appear in [WF90, Wid92], further details on implementation appear in [WCL91], and further details on applications appear in <ref> [CW90, CW91, CW92a, CW92b, Wid91] </ref>. 2 Language Design There are two important aspects in the design of a database production rule language: the syntax for creating (as well as modifying, deleting, and grouping) rules, and the semantics of rule processing at run time. <p> We have developed methods for automatically deriving Starburst rules from deductive rules for both of these approaches <ref> [CW92a, Wid91] </ref>. Semantic heterogeneity Semantic heterogeneity occurs when multiple databases model the same real-world entities in different ways. Whenever possible, it is desirable to maintain consistency across such databases, despite the heterogeneity.
Reference: [CW92b] <author> S. Ceri and J. Widom. </author> <title> Managing semantic heterogeneity with production rules and persistent queues. </title> <institution> IBM Research Report, IBM Almaden Research Center, </institution> <month> October </month> <year> 1992. </year>
Reference-contexts: Further details on language design appear in [WF90, Wid92], further details on implementation appear in [WCL91], and further details on applications appear in <ref> [CW90, CW91, CW92a, CW92b, Wid91] </ref>. 2 Language Design There are two important aspects in the design of a database production rule language: the syntax for creating (as well as modifying, deleting, and grouping) rules, and the semantics of rule processing at run time. <p> We have developed a method whereby the user specifies consistency requirements across semantically heterogeneous databases in a high-level language, then the system automatically derives Starburst rules that are guaranteed to monitor and enforce consistency <ref> [CW92b] </ref>. Acknowledgements I am ever grateful to Stefano Ceri, Bobbie Cochrane, Shel Finkelstein, and Bruce Lindsay, all of whom made important contributions to one aspect or another of the Starburst Rule System.
Reference: [H + 90] <author> L. Haas et al. </author> <title> Starburst mid-flight: As the dust clears. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 2(1) </volume> <pages> 143-160, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: The implementation took about one woman-year to complete; it consists of about 28,000 lines of C and C++ code including comments and blank lines (about 10,000 semicolons). The implementation relies heavily on several extensibility features of the Starburst database system <ref> [H + 90] </ref>. We briefly outline the rule system's general design; many details necessarily are omitted. Rule and rule set information is stored in rule catalogs, portions of which are cached in global main memory structures (i.e. structures shared by all processes).
Reference: [WCL91] <author> J. Widom, R.J. Cochrane, and B.G. Lindsay. </author> <title> Implementing set-oriented production rules as an extension to Starburst. </title> <booktitle> In Proceedings of the Seventeenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 275-285, </pages> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: Further details on language design appear in [WF90, Wid92], further details on implementation appear in <ref> [WCL91] </ref>, and further details on applications appear in [CW90, CW91, CW92a, CW92b, Wid91]. 2 Language Design There are two important aspects in the design of a database production rule language: the syntax for creating (as well as modifying, deleting, and grouping) rules, and the semantics of rule processing at run time.
Reference: [WF90] <author> J. Widom and S.J. Finkelstein. </author> <title> Set-oriented production rules in relational database systems. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 259-270, </pages> <address> Atlantic City, New Jersey, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: Further details on language design appear in <ref> [WF90, Wid92] </ref>, further details on implementation appear in [WCL91], and further details on applications appear in [CW90, CW91, CW92a, CW92b, Wid91]. 2 Language Design There are two important aspects in the design of a database production rule language: the syntax for creating (as well as modifying, deleting, and grouping) rules, and
Reference: [Wid91] <author> J. Widom. </author> <title> Deduction in the Starburst production rule system. </title> <institution> IBM Research Report RJ 8135, IBM Almaden Research Center, </institution> <address> San Jose, California, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: Further details on language design appear in [WF90, Wid92], further details on implementation appear in [WCL91], and further details on applications appear in <ref> [CW90, CW91, CW92a, CW92b, Wid91] </ref>. 2 Language Design There are two important aspects in the design of a database production rule language: the syntax for creating (as well as modifying, deleting, and grouping) rules, and the semantics of rule processing at run time. <p> We have developed methods for automatically deriving Starburst rules from deductive rules for both of these approaches <ref> [CW92a, Wid91] </ref>. Semantic heterogeneity Semantic heterogeneity occurs when multiple databases model the same real-world entities in different ways. Whenever possible, it is desirable to maintain consistency across such databases, despite the heterogeneity.
Reference: [Wid92] <author> J. Widom. </author> <title> A denotational semantics for the Starburst production rule language. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 21(3) </volume> <pages> 4-9, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Further details on language design appear in <ref> [WF90, Wid92] </ref>, further details on implementation appear in [WCL91], and further details on applications appear in [CW90, CW91, CW92a, CW92b, Wid91]. 2 Language Design There are two important aspects in the design of a database production rule language: the syntax for creating (as well as modifying, deleting, and grouping) rules, and
References-found: 11

