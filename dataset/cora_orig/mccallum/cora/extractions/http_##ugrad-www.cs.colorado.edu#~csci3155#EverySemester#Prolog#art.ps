URL: http://ugrad-www.cs.colorado.edu/~csci3155/EverySemester/Prolog/art.ps
Refering-URL: http://ugrad-www.cs.colorado.edu/~csci3155/EverySemester/Prolog/resources.html
Root-URL: http://www.cs.colorado.edu
Email: tarau@info.umoncton.ca  
Title: BinProlog 5.75 User Guide  
Author: Paul Tarau 
Date: April 3, 1997  
Address: Moncton, Canada, E1A 3E9,  
Affiliation: Departement d'Informatique Universite de Moncton  
Abstract-found: 0
Intro-found: 0
Reference: [1] <author> K. De Bosschere, D. Perron, and P. Tarau. LogiMOO: </author> <title> Prolog Technology for Virtual Worlds. </title> <booktitle> In Proceedings of PAP'96, </booktitle> <pages> pages 51-64, </pages> <address> London, </address> <month> Apr. </month> <year> 1996. </year> <note> ISBN 0 9525554 1 7. </note>
Reference-contexts: a similar CGI script at your site, put the bp executable in directory cgi-bin, together with the program and call it from a HTML page as follows: &lt;A HREF= "/cgi-bin/bp?$/&lt;MY ABSOLUTE PATH&gt;/counter.pro"> Click here! &lt;/A&gt; You can try it out by clicking on it at: 19 http://clement.info.umoncton.ca/~tarau Look for LogiMOO <ref> [23, 1] </ref>, a more advanced BinProlog based Internet application, now also running directly under Netscape 3.x, at: http://eve.info.umoncton.ca:8080/~logimoo or http://clement.info.umoncton.ca/~tarau/logimoo 5.2 A first look at Internet programming in BinProlog To try this out, open 3 windows, start BinProlog in each, then type: ?-run_server. % in the first window ?-out (hello (your_name)). <p> C : see example if0 */ term bp_prolog_call (goal,regs,H,P,A,wam) register term goal,regs,H,*A; register instr P; register stack wam; - PREP_CALL (goal); return bp (regs,H,P,A,wam); - /* simple example of prolog call */ 63 term if0 (regs,H,P,A,wam) register term regs,H,*A; register instr P; register stack wam; term bp (); cell goal=regs <ref> [1] </ref>; /* in this example the input GOAL is in regs [1] */ /* of course you can also build it directly in C */ /* unless you want specific action on failure, use BP_prolog_call (goal) here */ H=bp_prolog_call (goal,regs,H,P,A,wam); if (H) fprintf (stderr,"success: returning from New WAM"n"); else fprintf (stderr,"fail: <p> goal,regs,H,*A; register instr P; register stack wam; - PREP_CALL (goal); return bp (regs,H,P,A,wam); - /* simple example of prolog call */ 63 term if0 (regs,H,P,A,wam) register term regs,H,*A; register instr P; register stack wam; term bp (); cell goal=regs <ref> [1] </ref>; /* in this example the input GOAL is in regs [1] */ /* of course you can also build it directly in C */ /* unless you want specific action on failure, use BP_prolog_call (goal) here */ H=bp_prolog_call (goal,regs,H,P,A,wam); if (H) fprintf (stderr,"success: returning from New WAM"n"); else fprintf (stderr,"fail: returning from New WAM"n"); /* do not forget this !!! */
Reference: [2] <author> K. De Bosschere and P. Tarau. </author> <title> Blackboard-based Extensions for Parallel Programming in BinProlog. </title> <booktitle> In Proceedings of the 1993 ILPS Conference, </booktitle> <pages> page 664, </pages> <address> Vancouver, Canada, </address> <year> 1993. </year> <note> Poster Abstract. </note>
Reference: [3] <author> K. De Bosschere and P. Tarau. </author> <title> Blackboard Communication in Logic Programming. </title> <booktitle> In Proceedings of the PARCO'93 Conference, </booktitle> <pages> pages 257-264, </pages> <address> Grenoble, France, </address> <month> Sept. </month> <year> 1993. </year>
Reference: [4] <author> K. De Bosschere and P. Tarau. </author> <title> High Performance Continuation Passing Style Prolog-to-C Mapping. </title> <editor> In E. Deaton, D. Oppenheim, J. Urban, and H. Berghel, editors, </editor> <booktitle> Proceedings of the 1994 ACM Symposium on Applied Computing, </booktitle> <pages> pages 383-387, </pages> <address> Phoenix/AZ, </address> <month> Mar. </month> <year> 1994. </year> <note> ACM Press. </note>
Reference: [5] <author> K. De Bosschere and P. Tarau. </author> <title> Blackboard-based Extensions in Prolog. </title> <journal> Software | Practice and Experience, </journal> <volume> 26(1) </volume> <pages> 49-69, </pages> <month> Jan. </month> <year> 1996. </year>
Reference: [6] <author> B. Demoen. </author> <title> On the Transformation of a Prolog program to a more efficient Binary program. </title> <type> Technical Report 130, </type> <institution> K.U.Leuven, </institution> <month> Dec. </month> <year> 1990. </year>
Reference: [7] <author> B. Demoen, G. Engels, and P. Tarau. </author> <title> Segment Preserving Copying Garbage Collection for WAM based Prolog. </title> <booktitle> In Proceedings of the 1996 ACM Symposium on Applied Computing, </booktitle> <pages> pages 380-386, </pages> <address> Philadelphia, Feb. 1996. </address> <publisher> ACM Press. </publisher>
Reference: [8] <author> B. Demoen and A. Marien. </author> <title> Implementation of Prolog as binary definite Programs. </title> <editor> In A. Voronkov, editor, </editor> <booktitle> Logic Programming, RCLP Proceedings, number 592 in Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 165-176, </pages> <address> Berlin, Heidelberg, 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference: [9] <author> T. Lindgren. </author> <title> Compiling logic programs using a binary continuation style, </title> <month> Dec. </month> <year> 1992. </year> <type> draft, </type> <institution> Uppsala University. </institution>
Reference: [10] <author> U. Neumerkel. </author> <title> Specialization of Prolog Programs with Partially Static Goals and Bina-rization. </title> <type> Phd thesis, </type> <institution> Technische Universitat Wien, </institution> <year> 1992. </year>
Reference: [11] <author> U. Neumerkel. </author> <title> A transformation based on the equality between terms. In Logic Program Synthesis and Transformation, </title> <booktitle> LOPSTR 1993. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: [12] <author> P. Tarau. </author> <title> A Simplified Abstract Machine for the Execution of Binary Metaprograms. </title> <booktitle> In Proceedings of the Logic Programming Conference'91, </booktitle> <pages> pages 119-128. </pages> <publisher> ICOT, </publisher> <address> Tokyo, </address> <month> 7 </month> <year> 1991. </year>
Reference: [13] <author> P. Tarau. </author> <title> Ecological Memory Management in a Continuation Passing Prolog Engine. </title> <editor> In Y. Bekkers and J. Cohen, editors, </editor> <booktitle> Memory Management International Workshop IWMM 92 Proceedings, number 637 in Lecture Notes in Computer Science, </booktitle> <pages> pages 344-356. </pages> <publisher> Springer, </publisher> <month> Sept. </month> <year> 1992. </year>
Reference-contexts: We refer to <ref> [13] </ref> for the implementation and memory management aspects of these primitives. Save term/2 copies an object possibly distributed over the heap and the blackboard to a new blackboard object. It also takes care not to copy parts of the object already on the blackboard.
Reference: [14] <author> P. Tarau. </author> <title> Program Transformations and WAM-support for the Compilation of Definite Metaprograms. </title> <editor> In A. Voronkov, editor, </editor> <booktitle> Logic Programming, RCLP Proceedings, number 592 in Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 462-473, </pages> <address> Berlin, Heidelberg, 1992. </address> <publisher> Springer-Verlag. </publisher> <pages> 67 </pages>
Reference: [15] <author> P. Tarau. </author> <title> WAM-optimizations in BinProlog: Towards a Realistic Continuation Passing Prolog Engine. </title> <type> Technical Report 92-3, </type> <institution> Dept. d'Informatique, Universite de Moncton, </institution> <month> July </month> <year> 1992. </year> <note> available by ftp from clement.info.umoncton.ca. </note>
Reference: [16] <author> P. Tarau. </author> <title> An Efficient Specialization of the WAM for Continuation Passing Binary programs. </title> <booktitle> In Proceedings of the 1993 ILPS Conference, </booktitle> <address> Vancouver, Canada, 1993. </address> <publisher> MIT Press. poster. </publisher>
Reference: [17] <author> P. Tarau. </author> <title> Language Issues and Programming Techniques in BinProlog. </title> <editor> In D. Sacca, editor, </editor> <booktitle> Proceeding of the GULP'93 Conference, </booktitle> <address> Gizzeria Lido, Italy, </address> <month> June </month> <year> 1993. </year>
Reference: [18] <author> P. Tarau. </author> <title> Low level Issues in Implementing a High-Performance Continuation Passing Binary Prolog Engine. </title> <editor> In M.-M. Corsini, editor, </editor> <booktitle> Proceedings of JFPL'94, </booktitle> <month> June </month> <year> 1994. </year>
Reference: [19] <author> P. Tarau and M. Boyer. </author> <title> Elementary Logic Programs. </title> <editor> In P. Deransart and J. Maluszynski, editors, </editor> <booktitle> Proceedings of Programming Language Implementation and Logic Programming, number 456 in Lecture Notes in Computer Science, </booktitle> <pages> pages 159-173. </pages> <publisher> Springer, </publisher> <month> Aug. </month> <year> 1990. </year>
Reference: [20] <author> P. Tarau, V. Dahl, and A. </author> <month> Fall. </month> <title> Backtrackable State with Linear Assumptions, Continuations and Hidden Accumulator Grammars. </title> <booktitle> In ILPS'95 Workshop on Visions for the Future of Logic Programming, </booktitle> <month> Nov. </month> <year> 1995. </year>
Reference: [21] <author> P. Tarau, V. Dahl, and A. </author> <month> Fall. </month> <title> Backtrackable State with Linear Affine Implication and Assumption Grammars. </title> <editor> In J. Jaffar and R. H. Yap, editors, </editor> <title> Concurrency and Parallelism, </title> <booktitle> Programming, Networking, and Security, Lecture Notes in Computer Science 1179, </booktitle> <pages> pages 53-64, </pages> <address> Singapore, Dec. 1996. </address> <publisher> Springer. </publisher>
Reference: [22] <author> P. Tarau and K. De Bosschere. </author> <title> Memoing with Abstract Answers and Delphi Lemmas. </title> <editor> In Y. Deville, editor, </editor> <title> Logic Program Synthesis and Transformation, </title> <publisher> Springer-Verlag, Workshops in Computing, </publisher> <pages> pages 196-209, </pages> <address> Louvain-la-Neuve, </address> <month> July </month> <year> 1993. </year>
Reference: [23] <author> P. Tarau and K. De Bosschere. </author> <title> Virtual World Brokerage with BinProlog and Netscape. </title> <editor> In P. Tarau, A. Davison, K. De Bosschere, and M. Hermenegildo, editors, </editor> <booktitle> Proceedings of the 1st Workshop on Logic Programming Tools for INTERNET Applications, </booktitle> <address> JICSLP'96, Bonn, </address> <month> Sept. </month> <year> 1996. </year> <note> http://clement.info.umoncton.ca/ lpnet. </note>
Reference-contexts: a similar CGI script at your site, put the bp executable in directory cgi-bin, together with the program and call it from a HTML page as follows: &lt;A HREF= "/cgi-bin/bp?$/&lt;MY ABSOLUTE PATH&gt;/counter.pro"> Click here! &lt;/A&gt; You can try it out by clicking on it at: 19 http://clement.info.umoncton.ca/~tarau Look for LogiMOO <ref> [23, 1] </ref>, a more advanced BinProlog based Internet application, now also running directly under Netscape 3.x, at: http://eve.info.umoncton.ca:8080/~logimoo or http://clement.info.umoncton.ca/~tarau/logimoo 5.2 A first look at Internet programming in BinProlog To try this out, open 3 windows, start BinProlog in each, then type: ?-run_server. % in the first window ?-out (hello (your_name)).
Reference: [24] <author> P. Tarau, K. De Bosschere, and B. Demoen. </author> <title> Partial Translation: Towards a Portable and Efficient Prolog Implementation Technology. </title> <journal> Journal of Logic Programming, </journal> <volume> 29(1-3):65-83, </volume> <month> Nov. </month> <year> 1996. </year>
Reference-contexts: The generated C-code can be seen in files queens.h and queens.c. Moreover, on systems with dynamic linking like Solaris 2.x true executables of size starting at about 6K can be created starting with version 3.30 (see directory dynpl2c). We refer to <ref> [24] </ref> for the details of this translation process. If you define a predicate main/0 then your executable will start directly from there instead of the usual interactive top-level.
Reference: [25] <author> P. Tarau and B. Demoen. </author> <title> Language Embedding by Dual Compilation and State Mirroring. </title> <editor> In M. Fromherz, A. Kusalik, and O. Nytro, editors, </editor> <booktitle> Proceedings of 6-th Workshop on Logic Programming Environments, </booktitle> <address> Santa Margherita Ligure, </address> <year> 1994, </year> <pages> pages 15-20, </pages> <month> June </month> <year> 1994. </year> <note> also available as TR N-7034 Norges Tek. Hogscole, TRONDHEIM. </note>
Reference: [26] <author> P. Tarau, B. Demoen, and K. De Bosschere. </author> <title> The Power of Partial Translation: an Experiment with the C-ification of Binary Prolog. </title> <editor> In K. George, J. Carrol, E. Deaton, D. Oppenheim, and J. Hightower, editors, </editor> <booktitle> Proceedings of the 1995 ACM Symposium on Applied Computing, </booktitle> <pages> pages 152-176, </pages> <address> Nashville, Feb. 1995. </address> <publisher> ACM Press. </publisher>
Reference-contexts: asm. ^D DEFINITE: a (A,B) :- c (C,D), BINARY: a (A,B,C) :- WAM-ASSEMBLER: clause_? a,3 firstarg_? _/0,6 put_structure d/3,var (4-4/11,1/2) write_variable put,var (5-5/10,1/2) write_value put,var (2-2/6,2/2) 35 write_value put,var (3-3/7,2/2) put_structure c/3,var (3-8/14,1/2) write_variable put,var (2-9/13,1/2) write_value put,var (5-5/10,2/2) write_value put,var (4-4/11,2/2) execute_? b,3 12 Compiling to C Partial C-ification <ref> [26] </ref> is a translation framework which `does less instead of doing more' to improve performance of emulators close to native code systems.
Reference: [27] <author> P. Tarau and U. Neumerkel. </author> <title> A Novel Term Compression Scheme and Data Representation in the BinWAM. </title> <editor> In M. Hermenegildo and J. Penjam, editors, </editor> <booktitle> Proceedings of Programming Language Implementation and Logic Programming, Lecture Notes in Computer Science 844, </booktitle> <pages> pages 73-87. </pages> <publisher> Springer, </publisher> <month> Sept. </month> <year> 1994. </year> <month> 68 </month>
Reference-contexts: It compiles itself in less than 1 minute on a Sparcstation 10-40. The system has very fast (heap-based) copy term/2, findall/3 and findall/4 predicates, floating point, global logical variables, but still lacks full garbage collection. A new term compression technique <ref> [27] </ref> (joint work with Ulrich Neumerkel) reduces heap-consumption and adds some extra speed . Ulrich's iterative copy term/2 algorithm further accelerates BinProlog's `copy-once' heap-based findall/3 and findall/4 so that findall-intensive programs may run 2-3 times faster in BinProlog than in other (even native code) implementations.

References-found: 27

