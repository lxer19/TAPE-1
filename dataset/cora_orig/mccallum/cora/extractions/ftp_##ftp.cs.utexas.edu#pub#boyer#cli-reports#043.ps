URL: ftp://ftp.cs.utexas.edu/pub/boyer/cli-reports/043.ps
Refering-URL: ftp://ftp.cs.utexas.edu/pub/boyer/cli-reports/index.html
Root-URL: http://www.cs.utexas.edu
Phone: (512) 322-9951  
Title: DEFN-SK: An Extension of the Boyer-Moore Theorem Prover to Handle First-Order Quantifiers ***DRAFT***  
Author: Matt Kaufmann 
Note: This research was supported in part by ONR Contract N00014-88-C-0454. The views and conclusions contained in this document are those of the author and should not be interpreted as representing the official policies, either expressed or implied, of Computational Logic, Inc., the Office of Naval Research or the U.S. Government.  
Address: 1717 W. 6th St. Suite 290 Austin, Texas 78703  
Affiliation: Computational Logic Inc.  
Date: #43 May, 1989  
Pubnum: Technical Report  
Abstract-found: 0
Intro-found: 1
Reference: 1. <author> R. S. Boyer and J S. Moore, </author> <title> A Computational Logic Handbook, </title> <publisher> Academic Press, </publisher> <address> Boston, </address> <year> 1988. </year>
Reference-contexts: 1. Introduction The successful use of the Boyer-Moore Theorem Prover to proof-check a diverse variety of theorems is well-documented in Boyer and Moore's book <ref> [1] </ref>. Nevertheless, there are occasions when their quantifier-free logic is awkward or inadequate because of its lack of explicit quantification. Actually, the current "NQTHM" logic does have a version of bounded quantification, but that notion involves a somewhat tricky concept of evaluation, similar in flavor to the Lisp EVAL construct. <p> This notion of "appropriate" is a rather slippery one, and we will treat it with care. The important thing for us here is that Skolemization gives us a way to "interpret" first-order formulas in a slight extension of the quantifier-free "computational logic" of Boyer and Moore <ref> [1] </ref>, with minimal changes to the NQTHM theorem-prover. Of course, we want the output of our Skolemization procedure to provide terms which are helpful when we attempt to reason about them. It might be tempting then to write a Skolemizer which is "smart" in some ways. <p> A quantification of a formula is any expression of the form (FORALL v x) or (EXISTS v x), where v is a variable and x is a formula. In analogy to (and extending) the extended syntax for terms as described in <ref> [1] </ref>, i.e. the syntax that the user may type in, we extend the syntax for formulas to an extended syntax for formulas as follows. First, any term in the extended syntax for terms is in the extended syntax for formulas.
Reference: 2. <author> Robert S. Boyer, David M. Goldschlag, Matt Kaufmann, and J Strother Moore, </author> <title> ``Functional Instantiation in First Order Logic'', </title> <type> Tech. report 44, </type> <institution> Computational Logic, Inc., </institution> <month> May </month> <year> 1989. </year>
Reference-contexts: The first appendix documents a macro DEFN-FO built on top of DEFN-SK which does some first-order simplification (normalization). The second appendix lays out our Skolemization algorithm and proves its correctness. We follow this with Appendix C, which extends the soundness proof in <ref> [2] </ref>. The remaining appendices contain the lists of events summarized in Section 5. Acknowledgements. I'd like to thank my colleagues at Computational Logic for useful conversations and suggestions during the course of this work. <p> h |- A (since h 2 2 extends h'), hence h |- A (by conservativity of h over h ), hence h |- A (by conservativity of h over h). 1 2 1 1 -| 8 This is analogous (even to its wording!) to a corresponding note about CONSTRAIN in <ref> [2] </ref>. 9 The paper [2] contains an argument which shows the correctness of the implementation of the event FUNCTIONALLY-INSTANTIATE. However, that argument assumes an underlying logic which does not have DEFN-SK. In Appendix C we provide the main lemma required to extend the arguments in [2] to the case that the <p> h 2 2 extends h'), hence h |- A (by conservativity of h over h ), hence h |- A (by conservativity of h over h). 1 2 1 1 -| 8 This is analogous (even to its wording!) to a corresponding note about CONSTRAIN in <ref> [2] </ref>. 9 The paper [2] contains an argument which shows the correctness of the implementation of the event FUNCTIONALLY-INSTANTIATE. However, that argument assumes an underlying logic which does not have DEFN-SK. In Appendix C we provide the main lemma required to extend the arguments in [2] to the case that the existing "starting point" logic <p> corresponding note about CONSTRAIN in <ref> [2] </ref>. 9 The paper [2] contains an argument which shows the correctness of the implementation of the event FUNCTIONALLY-INSTANTIATE. However, that argument assumes an underlying logic which does not have DEFN-SK. In Appendix C we provide the main lemma required to extend the arguments in [2] to the case that the existing "starting point" logic does include DEFN-SK. 5. Examples The purpose of this section is to demonstrate that our simple DEFN-SK interface from first-order logic into the Boyer-Moore logic enables one to mechanically proof-check interesting theorems. We treat three separate examples here. <p> These proofs make heavy use of the induction capabilities of the Boyer-Moore prover. The main idea of the DEFN-SK approach is to retain the current prover's strengths while allowing first-order reasoning. All of these examples introduce axioms using the CONSTRAIN mechanism reported in <ref> [2] </ref>. Appendix C extends the proof in that paper to show conservativity of CONSTRAIN events even in the presence of DEFN-SK events. The reader not familiar with [2] can view CONSTRAIN simply as a consistent way of adding axioms. The first subsection below says a little more about CONSTRAIN. <p> All of these examples introduce axioms using the CONSTRAIN mechanism reported in <ref> [2] </ref>. Appendix C extends the proof in that paper to show conservativity of CONSTRAIN events even in the presence of DEFN-SK events. The reader not familiar with [2] can view CONSTRAIN simply as a consistent way of adding axioms. The first subsection below says a little more about CONSTRAIN. <p> Thus, the first two examples replay in the unadorned Boyer-Moore prover as extended by the functional variables work (especially CONSTRAIN) reported in <ref> [2] </ref> together with DEFN-SK, but not extended by the proof-checker. We hope to implement something akin to the proof-checker's treatment of free variables, as used in these proofs, in the Boyer-Moore prover someday; then the aforementioned USE hints should not, we hope, be necessary. 10 5.1 Koenig's Tree Lemma. <p> However, the final list of events in Appendix D has been successfully run in the extension of NQTHM by CONSTRAIN <ref> [2] </ref> and DEFN-SK. <p> In the meantime, we'll continue to use an "outside-in" method, since it seems to suffer no deficiences for our purposes. 32 Appendix C Extending the soundness proof of <ref> [2] </ref> This appendix is rather tedious and technical. Its purpose is to extend the argument given in [2] to the case where DEFN-SK is included in the underlying logic. <p> In the meantime, we'll continue to use an "outside-in" method, since it seems to suffer no deficiences for our purposes. 32 Appendix C Extending the soundness proof of <ref> [2] </ref> This appendix is rather tedious and technical. Its purpose is to extend the argument given in [2] to the case where DEFN-SK is included in the underlying logic. Specifically, the notion of the obvious extension of an extensible functional substitution and history is defined and shown to have the following property: Theorem [2]. The obvious extension of an extensible functional substitution and history is itself extensible. <p> Its purpose is to extend the argument given in <ref> [2] </ref> to the case where DEFN-SK is included in the underlying logic. Specifically, the notion of the obvious extension of an extensible functional substitution and history is defined and shown to have the following property: Theorem [2]. The obvious extension of an extensible functional substitution and history is itself extensible. The problem is that this theorem was proved in [2] for a logic not including DEFN-SK. Below we extend the notion of obvious extension so that this theorem remains true in the context of DEFN-SK. <p> Specifically, the notion of the obvious extension of an extensible functional substitution and history is defined and shown to have the following property: Theorem <ref> [2] </ref>. The obvious extension of an extensible functional substitution and history is itself extensible. The problem is that this theorem was proved in [2] for a logic not including DEFN-SK. Below we extend the notion of obvious extension so that this theorem remains true in the context of DEFN-SK. It is then routine to check that the arguments in [2] all extend to the logic with DEFN-SK. (One need only change all references to <p> The problem is that this theorem was proved in <ref> [2] </ref> for a logic not including DEFN-SK. Below we extend the notion of obvious extension so that this theorem remains true in the context of DEFN-SK. It is then routine to check that the arguments in [2] all extend to the logic with DEFN-SK. (One need only change all references to "DEFN or CONSTRAIN" to references to "DEFN-SK or DEFN or CONSTRAIN".) In particular, the following theorem holds in for the version of the logic which has DEFN-SK: Lemma. <p> Justification of Functional Instantiation with Extension (adapted from <ref> [2] </ref>). <p> Then thm"fs is a theorem in a DEFN/CONSTRAIN/DEFN-SK extension of h. We will prove the theorem above; the justification lemma immediately above then follows from that theorem just as it does in <ref> [2] </ref>. That is, we need to extend the notion of obvious extension from [2] to the case where the existing logic includes DEFN-SK, so that the obvious extension of an extensible functional substitution and history is itself extensible. <p> Then thm"fs is a theorem in a DEFN/CONSTRAIN/DEFN-SK extension of h. We will prove the theorem above; the justification lemma immediately above then follows from that theorem just as it does in <ref> [2] </ref>. That is, we need to extend the notion of obvious extension from [2] to the case where the existing logic includes DEFN-SK, so that the obvious extension of an extensible functional substitution and history is itself extensible. We omit all definitions from the following exposition; in fact, we gear it to those who have already read through [2]. <p> notion of obvious extension from <ref> [2] </ref> to the case where the existing logic includes DEFN-SK, so that the obvious extension of an extensible functional substitution and history is itself extensible. We omit all definitions from the following exposition; in fact, we gear it to those who have already read through [2]. In particular, we assume that the reader has read through the DEFN and CONSTRAIN cases of the definition of obvious extension. <p> By the inductive hypothesis we may choose an extension FS' of FS to the Skolem functions of sk and a Skolemization sk' of P/-&lt;v,v'&gt;-"FS (same parity) such that sk' = sk"FS'. But P/-&lt;v,v'&gt;-"FS = P"FS/-&lt;v,v'&gt;- by the Commutativity Lemma in <ref> [2] </ref>, since by hypothesis v is not any of the z . <p> Therefore sk' is a Skolemization of f"FS, as 1 k required. -| 36 Appendix D Koenig's Lemma Events List The following events go through in a version of NQTHM extended by the functional variables work <ref> [2] </ref> and DEFN-SK. <p> one prefers: (prove-lemma konig-tree-lemma-again nil (implies (numberp n) (and (node-p (k n)) (implies (not (lessp j i)) (subseq (k i) (k j))) (equal (length (k n)) n)))) 44 Appendix E Ramsey Theorem Events List The following events go through in a version of NQTHM extended by the functional variables work <ref> [2] </ref> and DEFN-SK. <p> fact that p-num was arbitrary (and there are no add-axioms) ;; finishes the job. 52 Appendix F Schroeder-Bernstein Theorem Events List The following events go through in a version of the proof-checker (PC-NQTHM) enhancement of the Boyer-Moore prover, as documented in [5] and [6], extended by the functional variables work <ref> [2] </ref> and DEFN SK.
Reference: 3. <author> J. R. Shoenfield, </author> <title> Mathematical Logic, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Ma., </address> <year> 1967. </year>
Reference-contexts: We will feel free to use familiar notions about formulas, such as the notion of free variable. Such notions are explained in any logic textbook; see for example <ref> [3] </ref>. 2.2 Skolemization in Brief For now let us discuss Skolemization in an abstract framework. We defer to Appendix B the presentation of the particular Skolemization algorithm that we use. <p> Suppose we imbed the Boyer-Moore logic into a traditional first-order logic, such as that of <ref> [3] </ref>, turning the induction principle into a collection of axioms, admitting existential quantifiers and the existential-quantifier introduction-rule. Then a DEFN-SK event, as defined above, results in a conservative extension of the previous theory. Proof. <p> Let h be the history obtained by adding the above 1 first-order sentence to h, and let h be the union of h and h'. Then h is a conservative extension of h since it's 2 1 1 simply a definitional extension (cf. <ref> [3] </ref>). And h is a conservative extension of h by our (abstract) definition of 2 1 Skolemization.
Reference: 4. <author> D. de Champeaux, </author> <title> ``Subproblem Finder and Instance Checker, Two Cooperating Modules for Theorem Provers'', </title> <journal> J. Assoc. for Comp. Mach., </journal> <volume> Vol. 33, </volume> <month> October </month> <year> 1986, </year> <pages> pp. 633-657. </pages>
Reference-contexts: Notice that it's much easier to see that the resulting ("normalized") sentence is a theorem than that the original sentence is a theorem. That's why we've implemented a notion of normalization. Note that in fact a smart enough procedure, such as the one in <ref> [4] </ref>, would immediately recognize the result as a theorem. <p> Then we can prove (EQUAL (FOO X Y) T) because PLUS never returns F. 3. Normalization We have already specified normalization as any function which returns a first-order formula that is logically equivalent to the given one. In <ref> [4] </ref> de Champeaux gives a rather elaborate "miniscoping" procedure for first-order simplification. However, we confine ourselves to the simplest parts of this procedure. We omit its proof of correctness (i.e. that it meets the above specification), which is routine. Here is the algorithm.
Reference: 5. <author> Matt Kaufmann, </author> <title> ``A User's Manual for an Interactive Enhancement to the Boyer-Moore Theorem Prover'', </title> <type> Tech. report 19, </type> <institution> Computational Logic, Inc., </institution> <month> May </month> <year> 1988. </year>
Reference-contexts: The reader not familiar with [2] can view CONSTRAIN simply as a consistent way of adding axioms. The first subsection below says a little more about CONSTRAIN. All three examples made heavy use of the "proof-checker" enhancement (PC-NQTHM) of the Boyer-Moore prover, as reported first in <ref> [5] </ref> and then extended in [6] to implement a notion of free variables. <p> This turned out to be a substantial portion of the total effort. Those events are near the front of Appendix D and are clearly labeled. Our methodology for reasoning about INF was to introduce events INF-SUFF and INF-NECC (see the appendix). We used the proof-checker <ref> [5] </ref> enhancement of the Boyer-Moore prover, as extended to support free variables [6], to deal with the free variables introduced by backchaining with the Skolem axioms. <p> ;; (lessp (ramsey i) (ramsey j)))) ;; and the fact that p-num was arbitrary (and there are no add-axioms) ;; finishes the job. 52 Appendix F Schroeder-Bernstein Theorem Events List The following events go through in a version of the proof-checker (PC-NQTHM) enhancement of the Boyer-Moore prover, as documented in <ref> [5] </ref> and [6], extended by the functional variables work [2] and DEFN SK.
Reference: 6. <author> Matt Kaufmann, </author> <title> ``Addition of Free Variables to an Interactive Enhancement of the Boyer-Moore Theorem Prover'', </title> <type> Tech. report 42, </type> <institution> Computational Logic, Inc., </institution> <month> May </month> <year> 1989. </year>
Reference-contexts: The first subsection below says a little more about CONSTRAIN. All three examples made heavy use of the "proof-checker" enhancement (PC-NQTHM) of the Boyer-Moore prover, as reported first in [5] and then extended in <ref> [6] </ref> to implement a notion of free variables. The proofs especially used the macro command SK* documented in [6] to eliminate notions defined by DEFN-SK by automatically applying the Skolem axioms and the BACKCHAIN macro command to provide appropriate instantiations for the free variables introduced by SK*. <p> All three examples made heavy use of the "proof-checker" enhancement (PC-NQTHM) of the Boyer-Moore prover, as reported first in [5] and then extended in <ref> [6] </ref> to implement a notion of free variables. The proofs especially used the macro command SK* documented in [6] to eliminate notions defined by DEFN-SK by automatically applying the Skolem axioms and the BACKCHAIN macro command to provide appropriate instantiations for the free variables introduced by SK*. <p> Those events are near the front of Appendix D and are clearly labeled. Our methodology for reasoning about INF was to introduce events INF-SUFF and INF-NECC (see the appendix). We used the proof-checker [5] enhancement of the Boyer-Moore prover, as extended to support free variables <ref> [6] </ref>, to deal with the free variables introduced by backchaining with the Skolem axioms. A number of events in the appendices have a comment like ";; done with help of proof-checker" to indicate that the first proof was found using the proof-checker, including macro-commands to help with unification and backchaining. <p> (ramsey i) (ramsey j)))) ;; and the fact that p-num was arbitrary (and there are no add-axioms) ;; finishes the job. 52 Appendix F Schroeder-Bernstein Theorem Events List The following events go through in a version of the proof-checker (PC-NQTHM) enhancement of the Boyer-Moore prover, as documented in [5] and <ref> [6] </ref>, extended by the functional variables work [2] and DEFN SK.
Reference: 7. <author> Kenneth Kunen, </author> <title> Set Theory: An Introduction to Independence Proofs, </title> <publisher> North-Holland, </publisher> <address> New York, </address> <year> 1980. </year>
Reference-contexts: We followed the proof sketch given in Exercise 8 of Chapter 1 of <ref> [7] </ref>.
Reference: 8. <author> Matt Kaufmann, </author> <title> ``Another Note on Skolemization'', Internal Note 127, Computational Logic, </title> <publisher> Inc., </publisher> <month> March </month> <year> 1989. </year> <title> Table of Contents </title>
Reference-contexts: of (9) and (10) by predicate logic: (IMPLIES (AND y y ) 1 2 (FORALL (z ... z ) 1 k (AND sk sk ))) 1 2 The remaining propositional cases are similar, so we omit them. -| Remarks on choices This section contains a summary of remarks made in <ref> [8] </ref>; indeed, some of the text here is taken directly from that reference. However, we occasionally refer the reader to [8] for a more complete discussion. Remark 1. <p> k (AND sk sk ))) 1 2 The remaining propositional cases are similar, so we omit them. -| Remarks on choices This section contains a summary of remarks made in <ref> [8] </ref>; indeed, some of the text here is taken directly from that reference. However, we occasionally refer the reader to [8] for a more complete discussion. Remark 1. <p> The desirability of minimality of the set of Skolem variables is formalized in the first section of <ref> [8] </ref>. Remark 2. Pushing quantifiers inward.
Reference: 1. <institution> Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 </institution>
Reference-contexts: 1. Introduction The successful use of the Boyer-Moore Theorem Prover to proof-check a diverse variety of theorems is well-documented in Boyer and Moore's book <ref> [1] </ref>. Nevertheless, there are occasions when their quantifier-free logic is awkward or inadequate because of its lack of explicit quantification. Actually, the current "NQTHM" logic does have a version of bounded quantification, but that notion involves a somewhat tricky concept of evaluation, similar in flavor to the Lisp EVAL construct. <p> This notion of "appropriate" is a rather slippery one, and we will treat it with care. The important thing for us here is that Skolemization gives us a way to "interpret" first-order formulas in a slight extension of the quantifier-free "computational logic" of Boyer and Moore <ref> [1] </ref>, with minimal changes to the NQTHM theorem-prover. Of course, we want the output of our Skolemization procedure to provide terms which are helpful when we attempt to reason about them. It might be tempting then to write a Skolemizer which is "smart" in some ways. <p> A quantification of a formula is any expression of the form (FORALL v x) or (EXISTS v x), where v is a variable and x is a formula. In analogy to (and extending) the extended syntax for terms as described in <ref> [1] </ref>, i.e. the syntax that the user may type in, we extend the syntax for formulas to an extended syntax for formulas as follows. First, any term in the extended syntax for terms is in the extended syntax for formulas.

Reference: 3. <institution> Normalization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 </institution>
Reference-contexts: We will feel free to use familiar notions about formulas, such as the notion of free variable. Such notions are explained in any logic textbook; see for example <ref> [3] </ref>. 2.2 Skolemization in Brief For now let us discuss Skolemization in an abstract framework. We defer to Appendix B the presentation of the particular Skolemization algorithm that we use. <p> Suppose we imbed the Boyer-Moore logic into a traditional first-order logic, such as that of <ref> [3] </ref>, turning the induction principle into a collection of axioms, admitting existential quantifiers and the existential-quantifier introduction-rule. Then a DEFN-SK event, as defined above, results in a conservative extension of the previous theory. Proof. <p> Let h be the history obtained by adding the above 1 first-order sentence to h, and let h be the union of h and h'. Then h is a conservative extension of h since it's 2 1 1 simply a definitional extension (cf. <ref> [3] </ref>). And h is a conservative extension of h by our (abstract) definition of 2 1 Skolemization.
Reference: 4. <institution> Soundness . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8 </institution>
Reference-contexts: Notice that it's much easier to see that the resulting ("normalized") sentence is a theorem than that the original sentence is a theorem. That's why we've implemented a notion of normalization. Note that in fact a smart enough procedure, such as the one in <ref> [4] </ref>, would immediately recognize the result as a theorem. <p> Then we can prove (EQUAL (FOO X Y) T) because PLUS never returns F. 3. Normalization We have already specified normalization as any function which returns a first-order formula that is logically equivalent to the given one. In <ref> [4] </ref> de Champeaux gives a rather elaborate "miniscoping" procedure for first-order simplification. However, we confine ourselves to the simplest parts of this procedure. We omit its proof of correctness (i.e. that it meets the above specification), which is routine. Here is the algorithm.

References-found: 11

