URL: http://www.cs.umd.edu/users/cml/cstyle/indhill-cstyle.ps.gz
Refering-URL: http://www.cs.umd.edu/users/cml/cstyle/
Root-URL: 
Title: Recommended C Style and Coding Standards  
Author: L.W. Cannon R.A. Elliott L.W. Kirchhoff J.H. Miller J.M. Milner R.W. Mitze E.P. Schan Henry Spencer David Keppel Mark Brader 
Note: February 19, 1997  
Address: Toronto  
Affiliation: Bell Labs  Zoology Computer Systems University of Toronto  EECS, UC Berkeley CS&E, University of Washington  SoftQuad Incorporated  
Pubnum: N.O. Whittington  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B.A. Tague, </author> <title> C Language Portability, </title> <address> Sept 22, </address> <year> 1977. </year> <note> This document issued by department 8234 contains three memos by R.C. </note> <author> Haight, A.L. Glasser, </author> <title> and T.L. Lyon dealing with style and portability. </title>
Reference-contexts: One-line comments alone on a line should be indented to the tab setting of the code that follows. if (argc &gt; 1) - /* Get input file from command line. */ if (freopen (argv <ref> [1] </ref>, "r", stdin) == NULL) - perror (argv [1]); - Very short comments may appear on the same line as the code they describe, and should be tabbed over to separate them from the statements. <p> One-line comments alone on a line should be indented to the tab setting of the code that follows. if (argc &gt; 1) - /* Get input file from command line. */ if (freopen (argv <ref> [1] </ref>, "r", stdin) == NULL) - perror (argv [1]); - Very short comments may appear on the same line as the code they describe, and should be tabbed over to separate them from the statements. <p> The header files will contain #defines and typedefs that may vary from machine to machine. In general, a new ``machine'' is different hardware, a different operating system, a different compiler, or any combination of these. Reference <ref> [1] </ref> contains useful information on both style and portability. The following is a list of pitfalls to be avoided and recommendations to be considered when designing portable code: g Write portable code first, worry about detail optimizations only on machines where they prove necessary. Optimized code is often obscure.
Reference: [2] <author> S.C. Johnson, </author> <title> Lint, a C Program Checker, USENIX UNIX Supplementary Documents, </title> <month> November </month> <year> 1986. </year>
Reference-contexts: should be established for reviewing lint complaints? A tolerance level needs to be established in concert with the lint options to prevent unimportant complaints from hiding complaints about real bugs or inconsistencies. g If a project establishes its own archive libraries, it should plan on supplying a lint library file <ref> [2] </ref> to the system administrators. The lint library file allows lint to check for compatible use of library functions. g What kind of revision control needs to be used? 22. Conclusion A set of standards has been presented for C programming style.
Reference: [3] <author> R.W. Mitze, </author> <title> The 3B/PDP-11 Swabbing Problem, Memorandum for File, </title> <journal> 1273-770907.01MF, </journal> <volume> Sep-tember 14, </volume> <year> 1977. </year>
Reference: [4] <author> R.A. Elliott and D.C. Pfeffer, </author> <title> 3B Processor Common Diagnostic Standards- Version 1, Memorandum for File, </title> <address> 5514-780330.01MF, March 30, </address> <year> 1978. </year>
Reference: [5] <author> R.W. Mitze, </author> <title> An Overview of C Compilation of UNIX User Processes on the 3B, Memorandum for File, </title> <address> 5521-780329.02MF, March 29, </address> <year> 1978. </year>
Reference-contexts: These rules apply to both program files and default files used and produced by the program (e.g., ``rogue.sav''). Some compilers and tools require certain suffix conventions for names of files <ref> [5] </ref>. The following suffixes are required: g C source file names must end in .c g Assembler source file names must end in .s The following conventions are universally followed: g Relocatable object file names end in .o g Include header file names end in .h.
Reference: [6] <author> B.W. Kernighan and D.M. Ritchie, </author> <title> The C Programming Language, </title> <publisher> Prentice Hall 1978, </publisher> <editor> Second Ed. </editor> <year> 1988, </year> <note> ISBN 0-13-110362-8. </note>
Reference: [7] <author> S.I. Feldman, </author> <title> Make A Program for Maintaining Computer Programs, USENIX UNIX Supplementary Documents, </title> <month> November </month> <year> 1986. </year>
Reference-contexts: Lint also recognizes several special comments in the code. These comments both shut up lint when the code otherwise makes it complain, and also document special code. 20. Make One other very useful tool is make <ref> [7] </ref>. During development, make recompiles only those modules that have been changed since the last time make was used. It can be used to automate other tasks, as well.
Reference: [8] <author> Ian Darwin and Geoff Collyer, </author> <title> Can't Happen or /* NOTREACHED */ or Real Programs Dump Core, </title> <booktitle> USENIX Association Winter Conference, Dallas 1985 Proceedings. </booktitle>
Reference-contexts: Write your own functions so that they test for errors and return error values or abort the program in a well-defined way. Include a lot of debugging and error-checking code and leave most of it in the finished product. Check even for ``impossible'' errors. <ref> [8] </ref> Use the assert facility to insist that each function is being passed well-defined values, and that intermediate results are well-formed. Build in the debug code using as few #ifdefs as possible. <p> Do not depend on this. g Do not modify string constants 7 . One particularly notorious (bad) example is s = "/dev/tty??"; strcpy (&s <ref> [8] </ref>, ttychars); g The address space may have holes. Simply computing the address of an unallocated element in an array (before or after the actual storage of the array) may crash the program.
Reference: [9] <author> Brian W. Kernighan and P. J. </author> <title> Plauger The Elements of Programming Style. </title> <publisher> McGraw-Hill, </publisher> <year> 1974, </year> <note> Second Ed. 1978, ISBN 0-07-034-207-5. </note>
Reference: [10] <author> J. E. </author> <title> Lapin Portable C and UNIX System Programming, </title> <publisher> Prentice Hall 1987, </publisher> <address> ISBN 0-13-686494-5. </address>
Reference: [11] <author> Ian F. Darwin, </author> <title> Checking C Programs with lint, </title> <publisher> O'Reilly & Associates, </publisher> <year> 1989. </year> <note> ISBN 0-937175-30-7. </note>

References-found: 11

