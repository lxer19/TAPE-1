URL: http://vlsicad.cs.ucla.edu/~abk/papers/journal/j26.ps
Refering-URL: http://vlsicad.cs.ucla.edu/~abk/publications.html
Root-URL: http://www.cs.ucla.edu
Title: On Implementation Choices for Iterative Improvement Partitioning Algorithms  
Author: Lars W. Hagen Dennis J.-H. Huang and Andrew B. Kahng 
Address: Los Angeles, CA 90095-1596  San Jose, CA 95134  
Affiliation: UCLA Department of Computer Science,  Cadence Design Systems, Inc.,  
Abstract: Iterative improvement partitioning algorithms such as the FM algorithm of Fiduccia and Mattheyses [8], the algorithm of Krishnamurthy [13], and Sanchis's extensions of these algorithms to multi-way partitioning [16], all rely on efficient data structures to select the modules to be moved from one partition to the other. The implementation choices for one of these data structures, the gain bucket, is investigated. Surprisingly, selection from gain buckets maintained as LIFO (Last-In-First-Out) stacks leads to significantly better results than gain buckets maintained randomly (as in previous studies of the FM algorithm [13] [16]) or as FIFO (First-In-First-Out) queues. In particular, LIFO buckets result in a 36% improvement over random buckets and a 43% improvement over FIFO buckets for minimum-cut bisection. Eliminating randomization from the bucket selection not only improves the solution quality, but has a greater impact on FM performance than adding the Krishnamurthy gain vector. The LIFO selection scheme also results in improvement over random schemes for multi-way partitioning [16] and for more sophisticated partitioning strategies such as the two-phase FM methodology [2]. Finally, by combining insights from the LIFO gain buckets with the Krishnamurthy higher-level gain formulation, a new higher-level gain formulation is proposed. This alternative formulation results in a further 22% reduction in the average cut cost when compared directly to the Krishnamurthy formulation for higher-level gains, assuming LIFO organization for the gain buckets.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. J. Alpert and A. B. Kahng, </author> <title> "Geometric Embeddings for Faster and Better Multi-way Netlist Partitioning", </title> <booktitle> Proc. ACM/IEEE Design Automation Conference, </booktitle> <year> 1993, </year> <pages> pp. 743-748. </pages>
Reference: [2] <author> C. J. Alpert and A. B. Kahng, </author> <title> "A General Framework for Vertex Orderings, With Applications to netlist Clustering", </title> <booktitle> Proc. IEEE Intl. Conf. on Computer-Aided Design, </booktitle> <year> 1994, </year> <pages> pp. 63-67. </pages>
Reference-contexts: constructed and FM is run on this clustered instance, after which phase II uses the "flattened" solution from phase I as the starting solution for running FM on the original netlist. 4 Table 4 gives the LIFO, random and FIFO results for 2-phase FM using the recent WINDOW clustering of <ref> [2] </ref>. 5 As in Table 1, there is a noticeable difference among the three selection schemes. LIFO selection is consistently better than either random or FIFO selection, with average improvement of LIFO over random being 12%.
Reference: [3] <author> T. Bui, C. Heigham, C. Jones, and T. Leighton. </author> <title> "Improving the Performance of the Kernighan-Lin and Simulated Annealing Graph Bisection Algorithms." </title> <booktitle> In Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 775-778, </pages> <year> 1989. </year>
Reference-contexts: The numbers in parentheses give the minimum observed cutsizes. Our third set of experiments tests the LIFO, random and FIFO selection schemes within the so-called two-phase FM approach. Two-phase FM <ref> [3] </ref> [9], which has gained attention recently due to much better results than "single-phase" FM, is essentially the state-of-the-art in iterative partitioning (see, e.g., [5]).
Reference: [4] <author> P. K. Chan, M. D. F. Schlag, and J. Y. Zien. </author> <title> "Spectral K-Way Ratio-Cut Partitioning and Clustering." </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 13(9) </volume> <pages> 1088-1096, </pages> <year> 1994. </year>
Reference-contexts: The orderings used correspond to the "scaled cost" (generalized ratio-cut) metric proposed by Chan et al. <ref> [4] </ref>. 6 A Krishnamurthy Variant for Min Cut Bisection The observation in Section 3|that it may be more important to move modules which are incident to locked nets|suggests an alternative multi-level gain formulation for 2-way partitioning.
Reference: [5] <author> C.-K. Cheng and Y.-C. A. Wei. </author> <title> "An Improved Two-Way Partitioning Algorithm with Stable Performance." </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 10(12) </volume> <pages> 1502-1511, </pages> <year> 1991. </year>
Reference-contexts: Our third set of experiments tests the LIFO, random and FIFO selection schemes within the so-called two-phase FM approach. Two-phase FM [3] [9], which has gained attention recently due to much better results than "single-phase" FM, is essentially the state-of-the-art in iterative partitioning (see, e.g., <ref> [5] </ref>).
Reference: [6] <author> A. Dasdan and C. Aykanat. </author> <title> Improved multiple-way circuit partitioning algorithms. </title> <booktitle> In Proc. ACM/SIGDA International Workshop on Field-Programmable Gate Arrays, </booktitle> <year> 1994. </year>
Reference-contexts: Iterative improvement partitioning algorithms are typically variants of the Kernighan-Lin method (KL) [11] [18] or its algorithmic speedup by Fiduccia and Mattheyses (FM) [8]. Examples of more recent methods are given by Krishnamurthy [13], Sanchis [16], Dutt [7], Hoffman [10], Dasdan and Aykanat <ref> [6] </ref>, and Saab [15].
Reference: [7] <author> S. Dutt. </author> <title> New faster kernighan-lin-type graph-partitioning algorithms. </title> <booktitle> In Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <pages> pages 370-377, </pages> <year> 1993. </year> <title> 6 The input format of a netlist is typically a function of how the other development tools represent and output the circuit, and may group related nets or modules together or far apart. This relatedness/unrelatedness will in turn be reflected within the data structures used by FM to store the netlist information. </title> <type> 11 </type>
Reference-contexts: Iterative improvement partitioning algorithms are typically variants of the Kernighan-Lin method (KL) [11] [18] or its algorithmic speedup by Fiduccia and Mattheyses (FM) [8]. Examples of more recent methods are given by Krishnamurthy [13], Sanchis [16], Dutt <ref> [7] </ref>, Hoffman [10], Dasdan and Aykanat [6], and Saab [15].
Reference: [8] <author> C. M. Fiduccia and R. M. Mattheyses. </author> <title> A linear time heuristic for improving network partitions. </title> <booktitle> In Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pages 175-181, </pages> <year> 1982. </year>
Reference-contexts: Iterative improvement partitioning algorithms are typically variants of the Kernighan-Lin method (KL) [11] [18] or its algorithmic speedup by Fiduccia and Mattheyses (FM) <ref> [8] </ref>. Examples of more recent methods are given by Krishnamurthy [13], Sanchis [16], Dutt [7], Hoffman [10], Dasdan and Aykanat [6], and Saab [15]. <p> Note that on average there are more modules in the highest-gain bucket during 2-way partitioning than during 3-way or 4-way partitioning. From the figure accompanying the algorithm description in <ref> [8] </ref> one can infer that the Fiduccia and 3 Mattheyses gain buckets function as LIFO stacks (remove at head, insert at head). However, the gain buckets could just as easily function as FIFO queues (remove at head, insert at tail) while supporting the same algorithmic complexity. <p> Also, our new formulation explicitly gives higher priority to the neighbors of moved modules, which is similar to the effect of the LIFO selection scheme. 7 Conclusion We have shown that implementation choices play an important part for both the FM algorithm of Fiduccia and Mattheyses <ref> [8] </ref> and the algorithm of Krishnamurthy [13]. In particular, selection from gain buckets based on the implicit ordering of a linked list representation is advantageous, and will result in improved partitioning solutions.
Reference: [9] <author> L. Hagen and A. B. Kahng. </author> <title> "A New Approach to Effective Circuit Clustering." </title> <booktitle> In Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <pages> pp. 422-427, </pages> <year> 1992. </year>
Reference-contexts: The numbers in parentheses give the minimum observed cutsizes. Our third set of experiments tests the LIFO, random and FIFO selection schemes within the so-called two-phase FM approach. Two-phase FM [3] <ref> [9] </ref>, which has gained attention recently due to much better results than "single-phase" FM, is essentially the state-of-the-art in iterative partitioning (see, e.g., [5]).
Reference: [10] <author> A. G. Hoffman. </author> <title> The dynamic locking heuristic anew graph partitioning algorithm. </title> <booktitle> In Proc. IEEE Intl. Symp. Circuits and Systems, </booktitle> <pages> pages 173-176, </pages> <year> 1994. </year>
Reference-contexts: Iterative improvement partitioning algorithms are typically variants of the Kernighan-Lin method (KL) [11] [18] or its algorithmic speedup by Fiduccia and Mattheyses (FM) [8]. Examples of more recent methods are given by Krishnamurthy [13], Sanchis [16], Dutt [7], Hoffman <ref> [10] </ref>, Dasdan and Aykanat [6], and Saab [15].
Reference: [11] <author> B. W. Kernighan and S. Lin. </author> <title> An efficient heuristic procedure for partitioning graphs. </title> <journal> Bell Syst. Tech. J., </journal> <volume> 49(2) </volume> <pages> 291-307, </pages> <year> 1970. </year>
Reference-contexts: 1 Introduction In production software for circuit partitioning, iterative improvement is a nearly universal approach, either as a postprocessing refinement to other methods or as a method in itself. Iterative improvement partitioning algorithms are typically variants of the Kernighan-Lin method (KL) <ref> [11] </ref> [18] or its algorithmic speedup by Fiduccia and Mattheyses (FM) [8]. Examples of more recent methods are given by Krishnamurthy [13], Sanchis [16], Dutt [7], Hoffman [10], Dasdan and Aykanat [6], and Saab [15].
Reference: [12] <author> S. Kirkpatrick, C. D. Gelatt, Jr., and M. P. Vecchi. </author> <title> Optimization by simulated annealing. </title> <journal> Science, </journal> <volume> 220 </volume> <pages> 671-680, </pages> <year> 1983. </year>
Reference: [13] <author> B. Krishnamurthy. </author> <title> An improved min-cut algorithm for partitioning VLSI networks. </title> <journal> IEEE Trans. on Computers, </journal> <volume> 33(5) </volume> <pages> 438-446, </pages> <year> 1984. </year>
Reference-contexts: Iterative improvement partitioning algorithms are typically variants of the Kernighan-Lin method (KL) [11] [18] or its algorithmic speedup by Fiduccia and Mattheyses (FM) [8]. Examples of more recent methods are given by Krishnamurthy <ref> [13] </ref>, Sanchis [16], Dutt [7], Hoffman [10], Dasdan and Aykanat [6], and Saab [15]. <p> The enabling data structure is an array of "gain buckets" which groups the modules of a given partition according to their gains. Many works have investigated possible improvements and extensions to the FM algorithm. One commonly-cited extension is that of Krishnamurthy <ref> [13] </ref>, which introduces efficient "look-ahead" into the FM algorithm to improve tie-breaking when the highest-gain bucket contains more than one module. Specifically, Krishnamurthy extends the gain value of a module into a gain vector which stores a sequence of potential gain values corresponding to sets of future moves. <p> When a pass results in zero gain, the algorithm terminates. 2 The notation used for the Krishnamurthy formulae are adapted from <ref> [13] </ref>. Note that in order to handle 1-pin nets correctly, the term fi U (s) &gt; 0 should be changed to fi U (s) &gt; 1. <p> In other words, within each pass the solution cost curve will have a relatively sharper decline, and stay at lower costs as it returns back to the initial cost. 3 Columns 4-6 of Table 1 show the effects of LIFO, random and FIFO selection on the Krishna-murthy higher-level gains <ref> [13] </ref>. Introducing second-level (k = 2) and in some cases third-level (k = 3) gain seems to improve the solution quality for random and FIFO selection. <p> fl k (v i ) = jfs 2 Ejv i 2 s; fi U (s) = k; fi W (s) &gt; 0gj + jfs 2 Ejv i 2 s; 0 &lt; fi U (s) &lt; 1; fi W (s) = 1gj The first two terms are identical to Krishnamurthy's formulation <ref> [13] </ref>. The third term is new and 8 represents the "attraction" to locked modules. Figure 2 contrasts the evolution of Krishnamurthy's gain vector against that of the gain vector resulting from our new formulation. <p> new formulation explicitly gives higher priority to the neighbors of moved modules, which is similar to the effect of the LIFO selection scheme. 7 Conclusion We have shown that implementation choices play an important part for both the FM algorithm of Fiduccia and Mattheyses [8] and the algorithm of Krishnamurthy <ref> [13] </ref>. In particular, selection from gain buckets based on the implicit ordering of a linked list representation is advantageous, and will result in improved partitioning solutions. <p> Eliminating randomization from the bucket selection not only improves the solution quality, but has a greater impact on FM performance than adding the Krishnamurthy gain vector; this reopens the question of interpreting such seminal works in the literature as [16] and <ref> [13] </ref>, whose studies used random bucket selection. Organizing the gain buckets as LIFO (Last-In-First-Out) stacks leads to a 36% improvement versus random bucket organization and 10 a 43% improvement versus FIFO (First-In-First-Out) queues.
Reference: [14] <author> T. Lengauer. </author> <title> Combinatorial Algorithms for Integrated Circuit Layout. </title> <address> Wiley-Teubner, </address> <year> 1990. </year>
Reference: [15] <author> Y. Saab. </author> <title> A fast and robust network bisection algorithm. </title> <journal> IEEE Trans. </journal> <note> Computers (to appear), </note> <year> 1995. </year>
Reference-contexts: Iterative improvement partitioning algorithms are typically variants of the Kernighan-Lin method (KL) [11] [18] or its algorithmic speedup by Fiduccia and Mattheyses (FM) [8]. Examples of more recent methods are given by Krishnamurthy [13], Sanchis [16], Dutt [7], Hoffman [10], Dasdan and Aykanat [6], and Saab <ref> [15] </ref>.
Reference: [16] <author> L. A. Sanchis. </author> <title> Multiple-way network partitioning. </title> <journal> IEEE Trans. on Computers, </journal> <volume> 38 </volume> <pages> 62-81, </pages> <year> 1989. </year>
Reference-contexts: Iterative improvement partitioning algorithms are typically variants of the Kernighan-Lin method (KL) [11] [18] or its algorithmic speedup by Fiduccia and Mattheyses (FM) [8]. Examples of more recent methods are given by Krishnamurthy [13], Sanchis <ref> [16] </ref>, Dutt [7], Hoffman [10], Dasdan and Aykanat [6], and Saab [15]. <p> This was confirmed by Sanchis <ref> [16] </ref>, who extended FM+HL (and thus implicitly FM also) to multi-way partitioning. 2 Tie-Breaking in the Fiduccia-Mattheyses Algorithm first pass of FM on 2-way, 3-way and 4-way balanced partitioning for test case Primary1 (833 modules). The average numbers were generated from 1000 separate FM runs. <p> Neither Krishnamurthy nor Sanchis points out any tie-breaking schemes for cells with identical gains. In fact, both used randomized selection in case of tie. In the following section we compare LIFO selection with random selection (used by Sanchis <ref> [16] </ref>) and FIFO selection (an alternative organization which as far as we know has never been used before). Our testbed is the code distributed by Sanchis [17] with appropriate modifications made for handling LIFO and FIFO selection. <p> is locked) is more important than "staying away from the minority" (i.e., not moving to the side having very few modules of the incident nets). 4 Experimental Results for Multi-Way Partitioning We have also tested the LIFO, random and FIFO selection schemes for 3-way and 4-way balanced partitioning using Sanchis's <ref> [16] </ref> extension of the FM algorithm and Krishnamurthy's higher-level gains to multi-way partitioning. <p> Eliminating randomization from the bucket selection not only improves the solution quality, but has a greater impact on FM performance than adding the Krishnamurthy gain vector; this reopens the question of interpreting such seminal works in the literature as <ref> [16] </ref> and [13], whose studies used random bucket selection. Organizing the gain buckets as LIFO (Last-In-First-Out) stacks leads to a 36% improvement versus random bucket organization and 10 a 43% improvement versus FIFO (First-In-First-Out) queues.
Reference: [17] <author> L. A. Sanchis, </author> <month> March </month> <year> 1994. </year> <type> Personal communication. </type>
Reference-contexts: In the following section we compare LIFO selection with random selection (used by Sanchis [16]) and FIFO selection (an alternative organization which as far as we know has never been used before). Our testbed is the code distributed by Sanchis <ref> [17] </ref> with appropriate modifications made for handling LIFO and FIFO selection.
Reference: [18] <author> D. G. Schweikert and B. W. Kernighan. </author> <title> A proper model for the partitioning of electrical circuits. </title> <booktitle> In Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pages 57-62, </pages> <year> 1972. </year>
Reference-contexts: 1 Introduction In production software for circuit partitioning, iterative improvement is a nearly universal approach, either as a postprocessing refinement to other methods or as a method in itself. Iterative improvement partitioning algorithms are typically variants of the Kernighan-Lin method (KL) [11] <ref> [18] </ref> or its algorithmic speedup by Fiduccia and Mattheyses (FM) [8]. Examples of more recent methods are given by Krishnamurthy [13], Sanchis [16], Dutt [7], Hoffman [10], Dasdan and Aykanat [6], and Saab [15].
Reference: [19] <author> C. Sechen. </author> <title> Placement and Global Routing of Integrated Circuits Using Simulated Annealing. </title> <type> PhD thesis, </type> <institution> Univ. of California, Berkeley, </institution> <year> 1986. </year>
Reference: [20] <author> Y.-C. Wei and C.-K. Cheng. </author> <title> Towards efficient hierarchical designs by ratio cut partitioning. </title> <booktitle> In Proc. IEEE Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pages 298-301, </pages> <year> 1989. </year> <month> 12 </month>
References-found: 20

