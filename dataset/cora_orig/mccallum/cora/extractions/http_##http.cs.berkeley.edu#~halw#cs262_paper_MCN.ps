URL: http://http.cs.berkeley.edu/~halw/cs262_paper_MCN.ps
Refering-URL: http://http.cs.berkeley.edu/~halw/
Root-URL: 
Title: Comparing Algorithms for Dynamic Speed-Setting of a Low-Power CPU  
Author: Kinshuk Govil Edwin Chan Hal Wasserman 
Address: Berkeley, CA 94720  
Affiliation: Computer Science Division University of California  
Abstract: To take advantage of the full potential of ubiquitous computing, we will need systems which minimize power-consumption. Weiser et al. and others have suggested that this may be accomplished by a CPU which dynamically changes speed and voltage, thereby saving energy by spreading run cycles into idle time. Here we continue this research, using a simulation to compare a number of policies for dynamic speed-setting. Our work clarifies a fundamental power vs. delay tradeoff, as well as the role of prediction and of smoothing in dynamic speed-setting policies. We conclude that success seemingly depends more on simple smoothing algorithms than on sophisticated prediction techniques, but defer to the replication of these results on future variable-speed systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T.D. Burd and R.W. Brodersen, </author> <title> "Energy efficient CMOS microprocessor design," </title> <booktitle> Proc. 28th Hawaii Int'l Conf. on System Sciences, </booktitle> <volume> Vol. 1, </volume> <pages> pp. 288-297, </pages> <month> Jan. </month> <year> 1995. </year>
Reference-contexts: From [9] we inherit the assumption that, over an idealized device's voltage range [V min ; V max ], voltage may be decreased in direct proportion to speed: this is a valid first-order approximation <ref> [1] </ref>. Now, a CPU, regarded as a capacitor-based system, satisfies the physical law energy/sec / voltage 2 speed or equivalently energy/task / voltage 2 . And so it is possible to save on overall energy-usage by reducing voltage. <p> No attempt is made to capture the unique workload (if any) of a ubiquitous computing device. Trace data is first divided into uniform-length time intervals. For each interval, one computes the run - percent: the fraction (on range <ref> [0; 1] </ref>) of cycles in which the CPU is active. Figures 1 and 2 give examples of such data for interval lengths 0.01 seconds and 0.05 seconds. Not surprisingly, the run percent values are more bursty for the smaller interval length. <p> Figures 1 and 2 give examples of such data for interval lengths 0.01 seconds and 0.05 seconds. Not surprisingly, the run percent values are more bursty for the smaller interval length. It is assumed that, for a given interval, speed may be set to any real number on range <ref> [min speed, 1] </ref>, where 1 represents full speed. Weiser et al. compile data for min speeds 0.2, 0.44, and 0.66 (corresponding to idealized CPUs with full voltage 5.0 V and minimum voltages 1.0 V, 2.2 V, and 3.3 V). <p> Weak on prediction, it simply tries to smooth speed to a global average. FLAT takes an input parameter hconsti, which must be a real number on range <ref> [0; 1] </ref>. * FLAT hconsti: Prediction: Predict the new run percent to be hconsti. - Speed-setting: Set speed fast enough to complete the predicted new work plus the excess cycles being pushed into the coming interval (subject, of course, to the limit of full speed = 1).
Reference: [2] <author> A.P. Chandrakasan, S. Sheng, and R.W. Brodersen, </author> <title> "Low-power CMOS digital design," </title> <journal> IEEE Journal of Solid-State Circuits, </journal> <volume> Vol. 27, </volume> <pages> pp. 473-484, Ap. </pages> <year> 1992. </year>
Reference-contexts: Supported by NDSEG Fellowship daah04-93-g-0267. In the future we may well see ubiquitous computing devices with neither disks nor conventional displays; and, for such devices, minimizing the power-consumption of the CPU will be particularly critical. Methods for saving CPU power have been suggested by <ref> [2, 4, 9] </ref>. They point out that some CPUs can run at a range of possible speeds: and voltage may then be decreased as speed decreases.
Reference: [3] <author> F. Douglis, P. Krishnan, and B. Marsh, </author> <title> "Thwarting the power-hungry disk," </title> <booktitle> Proc. Winter 1994 USENIX Conf., </booktitle> <pages> pp. 293-306, </pages> <month> Jan. </month> <year> 1994. </year>
Reference-contexts: There is seemingly little which can be done to minimize screen power-consumption, beyond employing a screen-saver and waiting for hardware improvements. Disk power-consumption may be minimized by spinning down the disk when it has been inactive for several seconds; <ref> [3, 6, 7] </ref> have researched this topic. fl kinshuk@csua.berkeley.edu. y chance@cory.eecs.berkeley.edu. z halw@cs.berkeley.edu. Supported by NDSEG Fellowship daah04-93-g-0267. In the future we may well see ubiquitous computing devices with neither disks nor conventional displays; and, for such devices, minimizing the power-consumption of the CPU will be particularly critical.
Reference: [4] <author> M.A. Horowitz, </author> <title> "Self-clocked structures for low power systems," </title> <type> ARPA semi-annual report, </type> <institution> Computer Systems Laboratory, Stanford University, </institution> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: Supported by NDSEG Fellowship daah04-93-g-0267. In the future we may well see ubiquitous computing devices with neither disks nor conventional displays; and, for such devices, minimizing the power-consumption of the CPU will be particularly critical. Methods for saving CPU power have been suggested by <ref> [2, 4, 9] </ref>. They point out that some CPUs can run at a range of possible speeds: and voltage may then be decreased as speed decreases.
Reference: [5] <author> M. Ishigami, </author> <title> "Pentium Processor (610n75) design considerations for mobile systems," Intel Application Note AP-518, </title> <address> http://techdoc.wais.net:2160/ default.html, </address> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: Such a capability is indeed technically feasible: for example, the Intel Pentium Processor can, in 50 sec, enter a low-current sleep state in which power-usage drops 85% <ref> [5, Section 5.3] </ref>. In the energy-usage graphs of Weiser et al. and in our own, the maximum energy level (energy usage = 1) already reflects savings due to a zero-power sleep state. The extent of this initial saving is not here studied, but may well be substantial. <p> Thus ramping-time is determined by the time-constants of the converter and the phase-locked loop, and so would be on the order of tens of sec <ref> [9, 5] </ref>. This time-scale seems well suited to our policies, which allow 5000 sec between speed changes. Moreover, the CPU should be able to continue working during a voltage ramp; and ramping should not have any substantial power-cost. Our results defer, then, to hopefully imminent studies of actual systems.
Reference: [6] <author> K. Li, R. Kumpf, P. Horton, and T. Anderson, </author> <title> "A quantitative analysis of disk drive power management in portable computers," </title> <booktitle> Proc. Winter 1994 USENIX Conf., </booktitle> <pages> pp. 279-292, </pages> <month> Jan. </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Recent developments in ubiquitous computing make it likely that the future will see a proliferation of cordless computing devices. Clearly it will be advantageous for such devices to minimize power-consumption. The top power-consumers in a computer system are the display (68%), the disk (20%), and the CPU (12%) <ref> [6] </ref>. There is seemingly little which can be done to minimize screen power-consumption, beyond employing a screen-saver and waiting for hardware improvements. <p> There is seemingly little which can be done to minimize screen power-consumption, beyond employing a screen-saver and waiting for hardware improvements. Disk power-consumption may be minimized by spinning down the disk when it has been inactive for several seconds; <ref> [3, 6, 7] </ref> have researched this topic. fl kinshuk@csua.berkeley.edu. y chance@cory.eecs.berkeley.edu. z halw@cs.berkeley.edu. Supported by NDSEG Fellowship daah04-93-g-0267. In the future we may well see ubiquitous computing devices with neither disks nor conventional displays; and, for such devices, minimizing the power-consumption of the CPU will be particularly critical. <p> Indeed, due to the radically different time-frames involved, it is reasonable to focus on the CPU alone. For example, CPU-slowing could stretch a 0.001 second task to 0.01 seconds, whereas disk spindown might typically take place after 2-300 seconds of disk idle <ref> [6] </ref>; hence we may well expect that the former will have no substantial effect on the latter. In order to support this argument, our policies will explicitly limit delay to a brief interval-length. The simulator takes as input traces of CPU-usage for a workstation running standard applications.
Reference: [7] <author> K. Li, </author> <title> "Towards a low power file system," </title> <type> CS Tech. Report 94-814, </type> <institution> University of California, Berkeley, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: There is seemingly little which can be done to minimize screen power-consumption, beyond employing a screen-saver and waiting for hardware improvements. Disk power-consumption may be minimized by spinning down the disk when it has been inactive for several seconds; <ref> [3, 6, 7] </ref> have researched this topic. fl kinshuk@csua.berkeley.edu. y chance@cory.eecs.berkeley.edu. z halw@cs.berkeley.edu. Supported by NDSEG Fellowship daah04-93-g-0267. In the future we may well see ubiquitous computing devices with neither disks nor conventional displays; and, for such devices, minimizing the power-consumption of the CPU will be particularly critical.
Reference: [8] <author> M. Weiser, </author> <title> "Some computer science issues in ubiquitous computing," </title> <journal> Communications of the ACM, </journal> <volume> Vol. 36, </volume> <pages> pp. 74-83, </pages> <month> July </month> <year> 1993. </year>
Reference: [9] <author> M. Weiser, B. Welch, A. Demers, and S. Shenker, </author> <title> "Scheduling for reduced CPU energy," </title> <booktitle> Proc. 1st USENIX Symp. on Operating Systems Design and Implementation, </booktitle> <pages> pp. 13-23, </pages> <month> Nov. </month> <year> 1994. </year>
Reference-contexts: Supported by NDSEG Fellowship daah04-93-g-0267. In the future we may well see ubiquitous computing devices with neither disks nor conventional displays; and, for such devices, minimizing the power-consumption of the CPU will be particularly critical. Methods for saving CPU power have been suggested by <ref> [2, 4, 9] </ref>. They point out that some CPUs can run at a range of possible speeds: and voltage may then be decreased as speed decreases. <p> Methods for saving CPU power have been suggested by [2, 4, 9]. They point out that some CPUs can run at a range of possible speeds: and voltage may then be decreased as speed decreases. From <ref> [9] </ref> we inherit the assumption that, over an idealized device's voltage range [V min ; V max ], voltage may be decreased in direct proportion to speed: this is a valid first-order approximation [1]. <p> Nevertheless, we will attempt to separate the two functions to some extent, trying to understand the utility (or lack thereof) of several algorithms for prediction and for smoothing. Weiser et al. <ref> [9] </ref> present only one practical speed-setting policy, PAST. PAST's prediction algorithm is elementary, and its smoothing somewhat ad hoc. Hypothesizing that more sophisticated prediction methods will allow for substantially improved performance, we here set out to test several new policies. <p> In Section 4, we present a number of speed-setting policies. In Section 5, we analyze the performance of these policies. Finally, in Section 6, we present our conclusions and suggest avenues for future research. 2 Previous work From Weiser et al. <ref> [9] </ref> we inherit a simulator, and with it a number of assumptions. Only the CPU's energy-usage is studied; there is no consideration of the energy costs which CPU-slowing could generate elsewhere in the system. <p> Instead of trying to combine interval length and de 1 This bug may be observed in the "Speed Setting Algorithm" of <ref> [9, Section 6] </ref>. In the second assignment statement, excess cycles from the previous interval are added into run cycles. <p> Moreover, our correction of a simulator bug, as noted in Section 3, has affected the performance of the policy in ways to which Weiser et al. did not have the opportunity to respond. 4 Refer to <ref> [9] </ref> for full details. 10 seconds to execute. The bottom line is for process execution at full speed; the top line, for process execution at a slower, intermittent speed. Nevertheless, we felt that there was room for improvement here. <p> To assure that the above results are not specific to trace emacs1, we have duplicated the runs in Figure 10 on a quite different trace, kestrel.mar1; nearly ten hours long, this trace is on a workload including "software development, documentation, e-mail, simulation, and other typical activities of engineering workstations" <ref> [9] </ref>. The results are graphed in Figure 11. Since the trace-data identified much of the idle time in kestrel.mar1 as soft, we were able to do these runs using the simulator option of stretching run cycles only into soft idle. <p> The ARM Processor may operate at 2.5-3.6 V; while "a Motorola CMOS 6805 microcontroller (cloned by SGS-Thomson) is rated at 6 Mhz at 5.0 Volts, 4.5 Mhz at 3.3 Volts, and 3 Mhz at 2.2 Volts. This is a close to linear relationship between voltage and clock rate" <ref> [9] </ref>. Thus there is seemingly no technical objection to designing a variable-voltage system, provided that the input reference voltage to the proces values of its parameter hconsti, is compared to PAST. <p> Thus ramping-time is determined by the time-constants of the converter and the phase-locked loop, and so would be on the order of tens of sec <ref> [9, 5] </ref>. This time-scale seems well suited to our policies, which allow 5000 sec between speed changes. Moreover, the CPU should be able to continue working during a voltage ramp; and ramping should not have any substantial power-cost. Our results defer, then, to hopefully imminent studies of actual systems.
References-found: 9

