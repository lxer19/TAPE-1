URL: ftp://ftp.cs.toronto.edu/pub/eric/COOCS93.ps.Z
Refering-URL: http://www.cs.toronto.edu/~eric/
Root-URL: 
Title: An Actor Dependency Model of Organizational Work With Application to Business Process Reengineering  
Author: Eric S. K. Yu and John Mylopoulos 
Keyword: Organization model, organization analysis and design, business process reengineering, workflow, requirements engineering.  
Address: Toronto, Ontario, Canada M5S 1A4  
Affiliation: Department of Computer Science, University of Toronto  
Note: Proceedings, Conf. on Organizational Computing Systems (COOCS 93) November 1-4, 1993, Milpitas, California, USA, pp. 258-268.  
Abstract: In developing information systems for use in an organization, one often needs to understand the reasons that underlie established work patterns and practices. Because organizational actors depend on each other for goals to be achieved, tasks to be performed, and resources to be furnished, reasons for work patterns can be revealed by examining the dependencies among actors. We present a model which characterizes a work organization in terms of the network of dependencies among organizational actors. Actor dependencies are taken to be intentional they expand or restrict an actor's ability to pursue goals. The network of actor dependencies constitutes the intentional structure of the organization. We use examples from business process reengineering to motivate and illustrate the model. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. R. Barber, </author> <title> Office Semantics, </title> <type> Ph.D. Dissertation, </type> <institution> Dept. of Elec. Eng. and Comp. Sci., M.I.T., </institution> <year> 1982. </year>
Reference-contexts: In reality, actors interact with each other in order to accomplish work, and use their knowhow to deal with problems. The recognition of the problematic nature of organizational work has led researchers to develop technical systems that support the problem solving activities of organizational actors (e.g., <ref> [1, 34, 7, 9] </ref>). A model aimed at helping organizational participants and stakeholders understand the implications of an organization design (e.g., a particular way of introducing computing technology) need not capture the actual problem solving knowledge (such as those required for building technical systems to support problem solving). <p> Researchers in the office/organizational information systems (OIS) area have long adopted this more dynamic, open-ended, problem-solving view of organizational work, and have developed more sophisticated and flexible information systems by embedding knowledge represen tation and reasoning into the system (e.g. <ref> [1, 34, 7] </ref>).
Reference: [2] <author> A. Borgida, S. Greenspan, J. Mylopoulos, </author> <title> Knowledge Representation as the Basis for Requirements Specifications, </title> <booktitle> IEEE Computer, </booktitle> <month> April </month> <year> 1985, </year> <pages> pp. 82-91. </pages>
Reference-contexts: INTRODUCTION To build effective organizational computing systems, one needs to have a good understanding of the organizational environment in which the systems are intended to operate. Research in software engineering and information system development have increasingly recognized the need to model the environment (e.g., <ref> [3, 17, 2] </ref>). Models employing knowledge representation techniques have been developed to structure and manage the knowledge about environments (e.g., [14, 10, 25]).
Reference: [3] <author> J. A. Bubenko, </author> <title> Information Modeling in the Context of System Development, </title> <booktitle> Proc. IFIP, </booktitle> <pages> pp. 395-411, </pages> <year> 1980. </year>
Reference-contexts: INTRODUCTION To build effective organizational computing systems, one needs to have a good understanding of the organizational environment in which the systems are intended to operate. Research in software engineering and information system development have increasingly recognized the need to model the environment (e.g., <ref> [3, 17, 2] </ref>). Models employing knowledge representation techniques have been developed to structure and manage the knowledge about environments (e.g., [14, 10, 25]).
Reference: [4] <author> C. Castelfranchi, M. Miceli, and A. </author> <title> Cesta, Dependence Relations Among Autonomous Agents, </title> <booktitle> Decentralized A.I. - 3 (Proc. 3rd European Workshop on Modeling Autonomous Agents in a Multi-Agent World), </booktitle> <publisher> Elsevier, </publisher> <year> 1992. </year>
Reference-contexts: For instance, various types of conflict resulting from a confluence of dependencies on an actor would be of interest. There may be conflicting goals, opposing tasks, and contention over resources. Also of interest are special patterns of dependency networks, such as reciprocal dependencies or loops <ref> [4] </ref>. A reciprocal dependency can be viewed positively, as in an exchange relationship. It can also be viewed as a method of control to enforce commitment, through countervailing power, since reciprocal dependency implies reciprocal vulnerability.
Reference: [5] <author> K. L. Chung, </author> <title> Representing and Using NonFunctional Requirements for Information System Development: A Process-Oriented Approach, </title> <type> Ph.D. Thesis, </type> <institution> Dept. of Comp. Sci., Univ. of Toronto, </institution> <note> submitted for approval. </note>
Reference-contexts: This interpretation of a soft-goal is based on a framework for dealing with non-functional requirements in software engineering <ref> [27, 5] </ref>. It is often possible to choose which type of dependency to establish for a given dependum object, by modifying the type of the object. The example in Figure 4 is an illustration. <p> The Issue Argumentation model uses an argumentation structure to manage and support stakeholders' reasoning about various designs, following work in design rationale [22] and in non-functional requirements in software engineering <ref> [5, 27] </ref>. The Actor Dependency model serves as the subject matter for the arguments in the Issue Argumentation model.
Reference: [6] <author> P. R. Cohen and H. J. Levesque, </author> <title> Intention is Choice with Commitment, </title> <journal> Artif. Intell., </journal> <volume> 42 (3), </volume> <year> 1990. </year>
Reference-contexts: In accordance with the conceptual modelling approach, we have endeavoured to seek a formal grounding for the concepts of the model. Intentional models of agents have been developed in AI (e.g., <ref> [6, 33, 23] </ref>) using modal operators for belief, goal, ability, and commitment. We have adapted some of these concepts for characterizing actor dependencies. A preliminary set of axioms for the model were proposed in [35].
Reference: [7] <author> W. B. Croft and L. S. Lefkowitz, </author> <title> A Goal-Based Representation of Office Work, Office Knowledge: Representation, Management, and Utilization, </title> <editor> W. Lamersdorf (ed.), </editor> <publisher> Elsevier, </publisher> <year> 1988, </year> <pages> pp. 99-124. </pages>
Reference-contexts: In reality, actors interact with each other in order to accomplish work, and use their knowhow to deal with problems. The recognition of the problematic nature of organizational work has led researchers to develop technical systems that support the problem solving activities of organizational actors (e.g., <ref> [1, 34, 7, 9] </ref>). A model aimed at helping organizational participants and stakeholders understand the implications of an organization design (e.g., a particular way of introducing computing technology) need not capture the actual problem solving knowledge (such as those required for building technical systems to support problem solving). <p> Researchers in the office/organizational information systems (OIS) area have long adopted this more dynamic, open-ended, problem-solving view of organizational work, and have developed more sophisticated and flexible information systems by embedding knowledge represen tation and reasoning into the system (e.g. <ref> [1, 34, 7] </ref>).
Reference: [8] <author> P. R. Crosby, </author> <title> Quality is Free, </title> <address> MacGraw-Hill, </address> <year> 1979. </year>
Reference-contexts: By redesigning the business process, invoices, and hence invoicing errors, were eliminated altogether (in the spirit of the zero-defect approach to process quality <ref> [8] </ref>). The remaining reconciliation (between purchase orders and receiving reports), which is much simpler, could now be handled mostly by computer, which also generates the payment cheque.
Reference: [9] <author> P. de Jong, Ubik: </author> <title> A Framework for the Development of Distributed Organizations, </title> <type> Ph.D. Dissertation, </type> <institution> Dept. of Elec. Eng. and Comp. Sci., M.I.T., </institution> <year> 1989. </year>
Reference-contexts: In reality, actors interact with each other in order to accomplish work, and use their knowhow to deal with problems. The recognition of the problematic nature of organizational work has led researchers to develop technical systems that support the problem solving activities of organizational actors (e.g., <ref> [1, 34, 7, 9] </ref>). A model aimed at helping organizational participants and stakeholders understand the implications of an organization design (e.g., a particular way of introducing computing technology) need not capture the actual problem solving knowledge (such as those required for building technical systems to support problem solving).
Reference: [10] <author> E. Dubois, J. Hagelstein, E. Lahou, F. Ponsaert and A. Rifaut, </author> <title> A Knowledge Representation Language for Requirements Engineering, </title> <journal> Proc. IEEE, </journal> <volume> 74 (10), </volume> <pages> pp. </pages> <address> 1431 -1444, </address> <month> Oct. </month> <year> 1986. </year>
Reference-contexts: Research in software engineering and information system development have increasingly recognized the need to model the environment (e.g., [3, 17, 2]). Models employing knowledge representation techniques have been developed to structure and manage the knowledge about environments (e.g., <ref> [14, 10, 25] </ref>).
Reference: [11] <author> T. H. Davenport, </author> <title> Process Innovation: Reengi-neering Work Through Information Technology, </title> <publisher> Harvard Business School Press, </publisher> <address> Boston, Mass., </address> <year> 1993. </year>
Reference-contexts: Recent interest in business process improvement and innovation in the business and management communities (e.g., <ref> [12, 16, 11] </ref>) underscores the need to understand organizations at an intentional level. As business environments are changing rapidly, organizations must adopt new ways of working, and take advantage of the capabilities of new technologies [29, 20]. Too often, computers are simply used to automate existing ways of doing business. <p> We now illustrate this with some examples from business process reengineering. The concept of reengineering is advocated as one way to achieve dramatic improvements in organizational performance by fundamentally redesigning the work organization as new information technology is introduced <ref> [15, 11] </ref>. It is argued that information technology often is not able to deliver significant benefits because it is simply used to automate existing (and often outdated) business practices. Instead, one should question the appropriateness of the work process itself, with respect to today's business environment.
Reference: [12] <institution> The Search for the Organization of Tomorrow, Fortune Magazine, </institution> <month> May 18, </month> <year> 1992, </year> <pages> pp. 93-98. </pages>
Reference-contexts: Recent interest in business process improvement and innovation in the business and management communities (e.g., <ref> [12, 16, 11] </ref>) underscores the need to understand organizations at an intentional level. As business environments are changing rapidly, organizations must adopt new ways of working, and take advantage of the capabilities of new technologies [29, 20]. Too often, computers are simply used to automate existing ways of doing business.
Reference: [13] <author> L. Gasser, </author> <title> The Integration of Computing and Routine Work, </title> <journal> Trans. Office Info. Sys., </journal> <volume> vol. 4, no. 3, </volume> <month> July </month> <year> 1986, </year> <pages> pp. 205-225. </pages>
Reference-contexts: Although this kind of goal graph does reveal, to some degree, the intentionality behind the work, it does not accurately reflect the way work actually gets done. Empirical research (e.g., <ref> [31, 13] </ref>) has indicated that a large part of organizational work has to do with addressing problems. Because of the open-endedness of organizational work situations, the exact kinds of problems that will arise cannot be fully anticipated.
Reference: [14] <author> S. J. Greenspan, </author> <title> Requirements Modelling: A Knowledge Representation Approach to Software Requirements Definition, </title> <type> Ph. D. Thesis, </type> <institution> Dept. of Comp. Sci., Univ. of Toronto, </institution> <year> 1984. </year>
Reference-contexts: Research in software engineering and information system development have increasingly recognized the need to model the environment (e.g., [3, 17, 2]). Models employing knowledge representation techniques have been developed to structure and manage the knowledge about environments (e.g., <ref> [14, 10, 25] </ref>). <p> We distinguish among four types of dependencies, based on the type of the dependum. In world modelling, it has been found useful to distinguish among three basic ontological categories: entities, activities, and assertions <ref> [14] </ref>. Entities are used to model objects in the world. These can be physical or informational. Activities produce changes in the world. An assertion expresses a state or condition about the world. From these basic categories, we get three types of intentional dependencies: Resource-dependency, Task-dependency, and Goal-dependency.
Reference: [15] <author> M. Hammer, </author> <title> Reengineering Work: Don't Automate, Obliterate, Harvard Business Review, </title> <booktitle> July-August 1990, </booktitle> <pages> pp. 104-112. </pages>
Reference-contexts: If one were to achieve the full potential of organizational computing technologies, one must challenge the reasons behind established work patterns and practices, and "obliterate" those that are there for reasons that are no longer valid <ref> [15] </ref>. In this paper, we propose a model of organizational work based on a notion of actor dependency. We view organizational participants as inherently autonomous actors who deploy resources (such as physical objects, information, and knowhow) to carry out actions in pursuit of goals. <p> We now illustrate this with some examples from business process reengineering. The concept of reengineering is advocated as one way to achieve dramatic improvements in organizational performance by fundamentally redesigning the work organization as new information technology is introduced <ref> [15, 11] </ref>. It is argued that information technology often is not able to deliver significant benefits because it is simply used to automate existing (and often outdated) business practices. Instead, one should question the appropriateness of the work process itself, with respect to today's business environment. <p> Instead, one should question the appropriateness of the work process itself, with respect to today's business environment. This is summarized in the slogan: Don't automate, obliterate <ref> [15] </ref>. To do this, one needs to keep asking Why? and What-if? questions about existing work practices. Workflow models cannot provide answers to Why? and What-if? questions because the intentional content is missing. <p> To bypass Purchasing, the client would have to acquire the knowhow and have the needed resources (e.g., time and effort) to doing purchasing on his own. As reported in <ref> [15] </ref>, one company reengineered its goods acquisition process by following this line of reasoning. The traditional purchasing process was full of paperwork, errors, and delays. For small purchases, it was not uncommon for the purchasing process to cost more than the item. <p> The Actor Dependency model of analysis (Figure 1) and no explicit support for answering Why? and What-if? questions, one is more likely to end up with the less effective, "automation" approach. A number of rule-of-thumb principles have been proposed to guide reengineering efforts (e.g. see <ref> [15, 32] </ref>). We use two of these principles to further illustrate how the Actor Dependency model can help bring out the distinctive features of different organizational configurations by making their intentional structures explicit. "Organize around outcomes, not tasks".
Reference: [16] <author> H. J. Harrington, </author> <title> Business Process Improvement: the breakthrough strategy for total quality, productivity, and competitiveness, </title> <address> MacGraw-Hill, </address> <year> 1991. </year>
Reference-contexts: Recent interest in business process improvement and innovation in the business and management communities (e.g., <ref> [12, 16, 11] </ref>) underscores the need to understand organizations at an intentional level. As business environments are changing rapidly, organizations must adopt new ways of working, and take advantage of the capabilities of new technologies [29, 20]. Too often, computers are simply used to automate existing ways of doing business.
Reference: [17] <author> M. Jackson, </author> <title> System Development, </title> <publisher> Prentice-Hall, </publisher> <year> 1983. </year>
Reference-contexts: INTRODUCTION To build effective organizational computing systems, one needs to have a good understanding of the organizational environment in which the systems are intended to operate. Research in software engineering and information system development have increasingly recognized the need to model the environment (e.g., <ref> [3, 17, 2] </ref>). Models employing knowledge representation techniques have been developed to structure and manage the knowledge about environments (e.g., [14, 10, 25]).
Reference: [18] <author> M. Jarke, J. Mylopoulos, J. W. Schmidt, Y. Vassiliou, DAIDA: </author> <title> An Environment for Evolving Information Systems, </title> <journal> ACM Trans. Information Systems, </journal> <volume> vol. 10, no. 1, </volume> <month> Jan </month> <year> 1992, </year> <pages> pp. 1-50. </pages>
Reference: [19] <author> P. Keen, </author> <title> Information Systems and Organizational Change, </title> <journal> Comm. of ACM, </journal> <volume> vol. 24, no. 1, </volume> <month> January </month> <year> 1981, </year> <pages> pp. 24-33. </pages>
Reference-contexts: The business process improvement and reengineering literature focuses on issues such as turnaround time, manpower savings, and quality of service to customers. For successful information system and organizational change, other issues such as power, cultural values, and conflict will also need to be considered (e.g., <ref> [19, 21] </ref>). The Issue Argumentation model uses an argumentation structure to manage and support stakeholders' reasoning about various designs, following work in design rationale [22] and in non-functional requirements in software engineering [5, 27].
Reference: [20] <author> P. Keen, </author> <title> Shaping the Future: Business Design Through Information Technology, </title> <publisher> Harvard Business School Press, </publisher> <address> Boston, Mass., </address> <year> 1991. </year>
Reference-contexts: As business environments are changing rapidly, organizations must adopt new ways of working, and take advantage of the capabilities of new technologies <ref> [29, 20] </ref>. Too often, computers are simply used to automate existing ways of doing business. Hammer's concept of reengineering, in particular, emphasizes the need to keep asking Why? and What-if? questions.
Reference: [21] <author> R. Kling, </author> <title> Defining the Boundaries of Computing Across Complex Organizations, Critical Issues in Information Systems Research, </title> <editor> R. J. Boland Jr., and R. A. Hirschheim, eds., </editor> <publisher> Wiley, </publisher> <year> 1987. </year>
Reference-contexts: The business process improvement and reengineering literature focuses on issues such as turnaround time, manpower savings, and quality of service to customers. For successful information system and organizational change, other issues such as power, cultural values, and conflict will also need to be considered (e.g., <ref> [19, 21] </ref>). The Issue Argumentation model uses an argumentation structure to manage and support stakeholders' reasoning about various designs, following work in design rationale [22] and in non-functional requirements in software engineering [5, 27].
Reference: [22] <author> J. Lee and K.-Y. Lai, </author> <title> What's In Design Rationale? Human-Computer Interaction vol. </title> <journal> 6, </journal> <volume> no. 3, </volume> <year> 1991, </year> <pages> pp. 251-280. </pages>
Reference-contexts: For successful information system and organizational change, other issues such as power, cultural values, and conflict will also need to be considered (e.g., [19, 21]). The Issue Argumentation model uses an argumentation structure to manage and support stakeholders' reasoning about various designs, following work in design rationale <ref> [22] </ref> and in non-functional requirements in software engineering [5, 27]. The Actor Dependency model serves as the subject matter for the arguments in the Issue Argumentation model.
Reference: [23] <author> Y. Lesperance, </author> <title> A Formal Theory of Indexical Knowledge and Action, </title> <type> Ph.D. Thesis, </type> <institution> Univ. of Toronto, also, Tech. Rept. CSRI-248, Comp. Sys. Res. Inst., Univ. of Toronto, </institution> <month> Feb. </month> <year> 1991. </year>
Reference-contexts: In accordance with the conceptual modelling approach, we have endeavoured to seek a formal grounding for the concepts of the model. Intentional models of agents have been developed in AI (e.g., <ref> [6, 33, 23] </ref>) using modal operators for belief, goal, ability, and commitment. We have adapted some of these concepts for characterizing actor dependencies. A preliminary set of axioms for the model were proposed in [35].
Reference: [24] <author> T. W. Malone, </author> <title> Modeling Coordination in Organizations and Markets, </title> <journal> Management Science, </journal> <volume> vol. 33, </volume> <year> 1987, </year> <pages> pp. 1317-1332. </pages>
Reference-contexts: By depending on another actor for a dependum, an actor is able to achieve goals that it was not able to do without the dependency, or not as easily or as well. At the same time, the depender becomes vulnerable <ref> [24] </ref>. If the dependee fails to deliver the dependum, the depen-der would be adversely affected in its ability to achieve its goals.
Reference: [25] <author> J. Mylopoulos, A. Borgida, M. Jarke, M. Koubarakis, </author> <title> Telos: Representing Knowledge about Information Systems, </title> <journal> ACM Trans. Info. Sys., </journal> <volume> 8 (4), </volume> <year> 1991. </year>
Reference-contexts: Research in software engineering and information system development have increasingly recognized the need to model the environment (e.g., [3, 17, 2]). Models employing knowledge representation techniques have been developed to structure and manage the knowledge about environments (e.g., <ref> [14, 10, 25] </ref>). <p> The semantics of the model will need to be characterized formally. Algorithms for assisting with reasoning about the model will need to be identified. Knowledge structuring mechanisms such as classification, generalization, aggregation, and time (such as those offered in Telos <ref> [25] </ref>) will also be necessary. A model is but one ingredient in the overall process of understanding and redesigning an organization and its technological support. The methodological implications of the proposed model remain open issues.
Reference: [26] <author> J. Mylopoulos, </author> <title> Representing Knowledge About Information Systems, </title> <booktitle> Intl. Workshop on Development of Intelligent Information Systems, </booktitle> <address> Niagara-on-the-Lake, Ontario, Canada, </address> <month> April 21-23, </month> <year> 1991, </year> <pages> pp. 94-96. </pages>
Reference-contexts: The organization modelling framework of [37], of which the Actor Dependency model is part, follows a conceptual modelling approach to software engineering and information system development, which emphasizes the need to represent and utilize pertinent knowledge to support each phase of development and on-going evolution <ref> [26] </ref>. The organization modelling framework aims to add to this line of research ([14, 25, 18]) by elaborating on the link between organization redesign and technical system development. In accordance with the conceptual modelling approach, we have endeavoured to seek a formal grounding for the concepts of the model.
Reference: [27] <author> J. Mylopoulos, L. Chung, B. Nixon, </author> <title> Representing and Using Non-Functional Requirements: A Process-Oriented Approach, </title> <journal> IEEE Trans. Soft. Eng., </journal> <volume> 18 (6), </volume> <month> June </month> <year> 1992. </year>
Reference-contexts: This interpretation of a soft-goal is based on a framework for dealing with non-functional requirements in software engineering <ref> [27, 5] </ref>. It is often possible to choose which type of dependency to establish for a given dependum object, by modifying the type of the object. The example in Figure 4 is an illustration. <p> The Issue Argumentation model uses an argumentation structure to manage and support stakeholders' reasoning about various designs, following work in design rationale [22] and in non-functional requirements in software engineering <ref> [5, 27] </ref>. The Actor Dependency model serves as the subject matter for the arguments in the Issue Argumentation model.
Reference: [28] <author> N. Nilsson, </author> <booktitle> Principles of Artificial Intelligence, </booktitle> <publisher> Tioga Press, </publisher> <year> 1980. </year>
Reference-contexts: For instance, entities and activities in the goods acquisition process can be traced to the goal that the client wants to have an item purchased. In terms of classical AI concepts, these objects can be linked to goals in a goal graph <ref> [28] </ref> (Figure 2). Each entity or activity could then be traced to the goals that it is a means for. Conversely, from a goal reduction viewpoint, goals are reduced to subgoals, and eventually to actions that can be performed. When fully reduced, they form a plan.
Reference: [29] <author> J. F. Rockart and J. E. </author> <title> Short, The Networked Organization and the Management of Interdependence, The Corporation of the 1990's Information Technology and Organizational Transformation, </title> <editor> M. Scott Morton, ed., </editor> <year> 1991. </year>
Reference-contexts: As business environments are changing rapidly, organizations must adopt new ways of working, and take advantage of the capabilities of new technologies <ref> [29, 20] </ref>. Too often, computers are simply used to automate existing ways of doing business. Hammer's concept of reengineering, in particular, emphasizes the need to keep asking Why? and What-if? questions.
Reference: [30] <author> A.-W. Scheer, </author> <title> Enterprise-Wide Data Modelling: Information Systems in Industry, </title> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: These kinds of properties, once recognized in the Actor Dependency model, can be used as support for arguments in the Issue Argumentation model for or against particular redesign proposals. Actor Dependency modelling is intended to complement, not to replace, existing types of organization modelling. Entity Relationship-based organization models (e.g. <ref> [30] </ref>) or more elaborate semantic data models which focus on passive and static relationships will continue to be useful for characterizing the structure of information and data.
Reference: [31] <author> L. Suchman, </author> <title> Office Procedures as Practical Action: Models of Work and System Design, </title> <journal> ACM Trans. Office Information Systems, </journal> <volume> vol. 1, no. 4, </volume> <month> October </month> <year> 1983, </year> <pages> pp. 320-328. </pages>
Reference-contexts: Although this kind of goal graph does reveal, to some degree, the intentionality behind the work, it does not accurately reflect the way work actually gets done. Empirical research (e.g., <ref> [31, 13] </ref>) has indicated that a large part of organizational work has to do with addressing problems. Because of the open-endedness of organizational work situations, the exact kinds of problems that will arise cannot be fully anticipated.
Reference: [32] <author> D. Tapscott, A. Caston, </author> <title> Paradigm Shift The New Promise of Information Technology, </title> <publisher> McGraw Hill, </publisher> <year> 1993. </year>
Reference-contexts: The Actor Dependency model of analysis (Figure 1) and no explicit support for answering Why? and What-if? questions, one is more likely to end up with the less effective, "automation" approach. A number of rule-of-thumb principles have been proposed to guide reengineering efforts (e.g. see <ref> [15, 32] </ref>). We use two of these principles to further illustrate how the Actor Dependency model can help bring out the distinctive features of different organizational configurations by making their intentional structures explicit. "Organize around outcomes, not tasks".
Reference: [33] <author> B. Thomas, Y. Shoham, A. Schwartz, and S. Kraus, </author> <title> Preliminary Thoughts on an Agent Description Language, </title> <journal> Intl. J. Intell. Sys., </journal> <volume> Vol. 6, </volume> <year> 1991, </year> <pages> pp. 498-508. </pages>
Reference-contexts: In accordance with the conceptual modelling approach, we have endeavoured to seek a formal grounding for the concepts of the model. Intentional models of agents have been developed in AI (e.g., <ref> [6, 33, 23] </ref>) using modal operators for belief, goal, ability, and commitment. We have adapted some of these concepts for characterizing actor dependencies. A preliminary set of axioms for the model were proposed in [35].
Reference: [34] <author> C. Woo, </author> <title> An Object-Oriented Model for Supporting Office Work, </title> <type> Ph.D. Thesis, </type> <institution> Dept. of Comp. Sci., Univ. of Toronto, </institution> <year> 1988. </year>
Reference-contexts: In reality, actors interact with each other in order to accomplish work, and use their knowhow to deal with problems. The recognition of the problematic nature of organizational work has led researchers to develop technical systems that support the problem solving activities of organizational actors (e.g., <ref> [1, 34, 7, 9] </ref>). A model aimed at helping organizational participants and stakeholders understand the implications of an organization design (e.g., a particular way of introducing computing technology) need not capture the actual problem solving knowledge (such as those required for building technical systems to support problem solving). <p> Researchers in the office/organizational information systems (OIS) area have long adopted this more dynamic, open-ended, problem-solving view of organizational work, and have developed more sophisticated and flexible information systems by embedding knowledge represen tation and reasoning into the system (e.g. <ref> [1, 34, 7] </ref>).
Reference: [35] <author> E. Yu, </author> <title> Modelling Organizations for Information Systems Requirements Engineering, </title> <booktitle> Proceedings of First IEEE Symposium on Requirements Engineering, </booktitle> <address> San Diego, Calif., </address> <year> 1993, </year> <pages> pp. 34-41. </pages>
Reference-contexts: Intentional models of agents have been developed in AI (e.g., [6, 33, 23]) using modal operators for belief, goal, ability, and commitment. We have adapted some of these concepts for characterizing actor dependencies. A preliminary set of axioms for the model were proposed in <ref> [35] </ref>. A formal characterization of the model will serve to clarify the semantics of the model features, and will help human users of the model resolve ambiguities in interpretation. For computational support, general inference procedures for the formalism are likely to be intractable.
Reference: [36] <author> E. Yu, </author> <title> An Organization Modelling Framework for Multi-Perspective Information System Design, in Requirements Engineering 1993: Selected Papers, </title> <editor> J. Mylopoulos et al., eds., </editor> <address> Univ. </address> <institution> of Toronto Dept. of Comp. Sci. Tech. Rpt. DKBS-TR-93-2, </institution> <month> July </month> <year> 1993. </year>
Reference-contexts: An illustration of how the Actor Dependency model is used in conjunction with the Issue Argumentation model has been presented in <ref> [36] </ref>. A third component of the framework differentiates actors into agents, roles, and positions to deal with more complex organizational relationships.
Reference: [37] <author> E. Yu, </author> <title> An Organization Modelling Framework for Information Systems Requirements Engineering, </title> <type> Ph.D. Thesis, </type> <institution> Dept. of Computer Science, Univ. of Toronto, forthcoming. </institution>
Reference-contexts: We now discuss its use in the broader context of organization redesign and information system development. The Actor Dependency model is one of two main components in a framework aimed at supporting requirements engineering for organizational information systems <ref> [37] </ref>. The purpose of the Actor Dependency model is to provide an appropriate representation of an organizational configuration (of human and computer elements). <p> An illustration of how the Actor Dependency model is used in conjunction with the Issue Argumentation model has been presented in [36]. A third component of the framework differentiates actors into agents, roles, and positions to deal with more complex organizational relationships. The organization modelling framework of <ref> [37] </ref>, of which the Actor Dependency model is part, follows a conceptual modelling approach to software engineering and information system development, which emphasizes the need to represent and utilize pertinent knowledge to support each phase of development and on-going evolution [26].
References-found: 37

