URL: ftp://ftp.cs.unc.edu/pub/publications/techreports/96-011.ps.Z
Refering-URL: ftp://ftp.cs.unc.edu/pub/publications/techreports/FILE.html
Root-URL: http://www.cs.unc.edu
Title: Surface Triangulation: A Survey  
Author: Subodh Kumar 
Date: July 3, 1996  
Address: Chapel Hill NC 27599  
Affiliation: Department of Computer Science University of North Carolina  
Abstract: This paper presents a brief survey of some problems and solutions related to the triangulation of surfaces. A surface (a two dimensional manifold, in the context of this paper) can be represented as a three dimensional function on a planar disk. In that sense, the triangulation of the disk induces a triangulation of the surface. Hence the emphasis of this paper is on triangulation on a plane. Apart from the issues in triangulation, this survey talks about the known upper and lower bounds on various triangulation problems. It is intended as a broad compilation of known results rather than an intensive treatise, and the details of most algorithms are skipped. 
Abstract-found: 1
Intro-found: 1
Reference: [AAP86] <author> Ta. Asano, Te. Asano, and R. Y. Pinter. </author> <title> Polygon triangulation: Efficiency and minimality. </title> <journal> J. Algorithms, </journal> <volume> 7 </volume> <pages> 221-231, </pages> <year> 1986. </year>
Reference-contexts: If we are just interested in legal triangulation, we cannot expect to triangulate a simple polygon in better than (n) time; all points need to be a part of the triangulation. For polygons with holes, <ref> [AAP86] </ref> proves a lower bound of (n log n). 7 A line segment between two points of a simple polygon P is called a diagonal if it lies completely inside the polygon: Consider the left most point u of a polygon P . <p> We need further research to find simple an practical algorithm that will `actually' run faster than the simple O (n log n) algorithms on data of interest. It turns out that if the polygon is allowed to have holes we cannot do better than (n log n) <ref> [AAP86] </ref>.
Reference: [ACNS82] <author> M. Ajtai, V. Chvatal, M. Newborn, and E. Szemeredi. </author> <title> Crossing-free subgraphs. </title> <journal> Annals of Discrete Math., </journal> <volume> 12 </volume> <pages> 9-12, </pages> <year> 1982. </year>
Reference-contexts: The weight of an edge can be its Euclidean length. Optimal triangulation of a set S is denoted as OT (S). <ref> [ACNS82] </ref> shows that every planar drawing of a graph with n vertices and m edges (m 4n) contains 10 13n graphs with no edges crossing each other.
Reference: [AES91] <author> S.S. Abi-Ezzi and L.A. Shirman. </author> <title> Tessellation of curved surfaces under highly varying transformations. </title> <booktitle> Proceedings of Eurographics'91, </booktitle> <pages> pages 385-97, </pages> <year> 1991. </year>
Reference: [AES93] <author> S.S. Abi-Ezzi and L.A. Shirman. </author> <title> The scaling behavior of viewing transformations. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 13(3) </volume> <pages> 48-54, </pages> <year> 1993. </year>
Reference: [AHU74] <author> A. Aho, J. Hopcroft, and J. Ullman. </author> <title> The Design and Analysis of Computer Algorithms. </title> <publisher> Addison-Wesley, </publisher> <year> 1974. </year>
Reference-contexts: It first partitions the input data set by drawing a grid with a small number of points per grid cell on average. This partitioning is done by the radix-sort algorithm <ref> [AHU74] </ref>.
Reference: [Baj90] <author> C.L. Bajaj. </author> <title> Rational hypersurface display. </title> <booktitle> In Symposium on Interactive 3D Graphics, </booktitle> <pages> pages 117-27, </pages> <address> Snowbird, UT, </address> <year> 1990. </year>
Reference: [B.C82] <author> B.Chazelle. </author> <title> A theorem on polygon cutting with applications. </title> <booktitle> In Proc. 23rd Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 339-349, </pages> <year> 1982. </year>
Reference-contexts: (Fig.3 (c)) Add diagonals (q i ; x 2 ); (q i ; x 3 ); : : : (q i ; x j1 ) and stop. end For general simple polygons, the time complexity was not improved till quite recently when a number of O (n log n) algorithms <ref> [GJPT78, B.C82, HM83, FM84] </ref> were proposed in the late 70's and 80's. Still the gap between the known lower bound, (n), and upper bounds kept challenging computational geometers for long. Finding a linear time algorithm remained open 8 problem; [TV86]'s algorithm was mistakenly thought to be linear for some time.
Reference: [BDE92] <author> M. Bern, D. Dobkin, and D. Eppstein. </author> <title> Triangulating polygons without large angles. </title> <booktitle> In Proc. 8th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 222-231, </pages> <year> 1992. </year>
Reference-contexts: General polygons can be triangulated with no angles smaller than tan 1 ( 1 4 ); up to O (n 2 ) triangles may be needed. Using only O (n) triangles <ref> [BDE92] </ref> guarantees that the smallest height of the triangle is approximately as large as allowed by the input polygon. Using (n log n) triangles O (n 3 polygons with holes) they guarantee that no triangles have more than 150 ffi internal angles. For convex polygons [BDE92] uses O (n 1:85 ) <p> Using only O (n) triangles <ref> [BDE92] </ref> guarantees that the smallest height of the triangle is approximately as large as allowed by the input polygon. Using (n log n) triangles O (n 3 polygons with holes) they guarantee that no triangles have more than 150 ffi internal angles. For convex polygons [BDE92] uses O (n 1:85 ) triangles and produces non-obtuse triangulation. [BE91] triangulates a polygon into O (n 2 ) non-obtuse triangles. <p> straight line graph in O (n 2 log n) time adding O (n 2 log n) steiner points with no angle larger than 7 8 . (There is a lower bound of O (n 2 ) triangles for any triangulation that guarantees angles smaller than 180 *; * &gt; 0 <ref> [BDE92] </ref>.) It improves a given triangulation by starting at an obtuse angle and explores the triangulation in search for a sequence for steiner points that satisfies the angle condition locally. 12 3.4 Simpler Polygons While one thread of research had been trying to improve the time complexity of simple polygon triangulation,
Reference: [BE91] <author> M. Bern and D. Eppstein. </author> <title> Polynomial-size nonobtuse triangulation of polygons. </title> <booktitle> In Proc. 7th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 342-350, </pages> <year> 1991. </year> <month> 15 </month>
Reference-contexts: Using (n log n) triangles O (n 3 polygons with holes) they guarantee that no triangles have more than 150 ffi internal angles. For convex polygons [BDE92] uses O (n 1:85 ) triangles and produces non-obtuse triangulation. <ref> [BE91] </ref> triangulates a polygon into O (n 2 ) non-obtuse triangles. This algorithm does not restrict the polygon to be simple it triangulates polygons with holes. [BE91] also describes how to triangulate a convex polygon into O (n 2 ) right triangles. [BMR94] reports a O (n 2 log n) time <p> For convex polygons [BDE92] uses O (n 1:85 ) triangles and produces non-obtuse triangulation. <ref> [BE91] </ref> triangulates a polygon into O (n 2 ) non-obtuse triangles. This algorithm does not restrict the polygon to be simple it triangulates polygons with holes. [BE91] also describes how to triangulate a convex polygon into O (n 2 ) right triangles. [BMR94] reports a O (n 2 log n) time algorithm that improves the bound for general polygons to O (n) non-obtuse triangles.
Reference: [BEY91] <author> M. Bern, D. Eppstein, and F. Yao. </author> <title> The expected extremes in a Delaunay triangu-lation. </title> <journal> Internat. J. Comput. Geom. Appl., </journal> <volume> 1 </volume> <pages> 79-91, </pages> <year> 1991. </year>
Reference-contexts: The Delaunay triangulation of a set of points, for example, maximize the minimum angle of any triangle, thus assuring that triangles are not long and skinny in general. [SH75] erroneously claimed that Delaunay triangulation was the minimum weight triangula tion. <ref> [BEY91] </ref> proved a variety of properties about Delaunay triangulation. It assumes Poisson distribution on the input point set. 6 Let S be a [0; n] fi [0; n] square. Its results (Table 1) hold for the part of the Delaunay triangulation that lies entirely inside the square.
Reference: [BGR88] <author> B. S. Baker, E. Grosse, and C. S. Rafferty. </author> <title> Nonobtuse triangulation of polygons. </title> <journal> Discrete Comput. Geom., </journal> <volume> 3 </volume> <pages> 147-168, </pages> <year> 1988. </year>
Reference-contexts: These points are referred to as steiner points. [KKT90] showed that the problem of triangulating a simple polygon with steiner points is linear time equivalent to the steiner free triangulation, if we are interested only in a legal triangulation. <ref> [BGR88] </ref> computes a triangulation that has no obtuse triangles. It does this by overlaying a square grid on the polygon. It also proves that there always exists an obtuse triangulation if the vertices of the polygon lie on a square grid.
Reference: [Blo88] <author> J. Bloomenthal. </author> <title> Polygonization of implicit surfaces. </title> <type> Tech. Report EDL-88-4, </type> <institution> Xerox PARC, </institution> <address> Palo Alto, CA, </address> <year> 1988. </year>
Reference-contexts: a triangular surface function is: X G ijk i!j!k! u + v + w = 1. 4.2 Algebraic surfaces Algebraic surfaces belong to the class of implicit surfaces which can be thought of as the set of points that form roots to an equation f (x; y; z) = 0. <ref> [HW90, Blo88] </ref> are some of the excellent sources on triangulation of implicit surfaces. [Blo88] surrounds the implicit surface with an octree [Mea82]. The surface is sampled at the corners of this octree. <p> w = 1. 4.2 Algebraic surfaces Algebraic surfaces belong to the class of implicit surfaces which can be thought of as the set of points that form roots to an equation f (x; y; z) = 0. [HW90, Blo88] are some of the excellent sources on triangulation of implicit surfaces. <ref> [Blo88] </ref> surrounds the implicit surface with an octree [Mea82]. The surface is sampled at the corners of this octree.
Reference: [BMR94] <author> M. Bern, S. Mitchell, and J. Ruppert. </author> <title> Linear-size nonobtuse triangulation of polygons. </title> <booktitle> In Proc. 10th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 221-230, </pages> <year> 1994. </year>
Reference-contexts: This algorithm does not restrict the polygon to be simple it triangulates polygons with holes. [BE91] also describes how to triangulate a convex polygon into O (n 2 ) right triangles. <ref> [BMR94] </ref> reports a O (n 2 log n) time algorithm that improves the bound for general polygons to O (n) non-obtuse triangles. This algorithm first packs the polygon with non-overlapping discs that are tangent to each other and to the polygon edges.
Reference: [CCT92] <author> K. L. Clarkson, R. Cole, and R. E. Tarjan. </author> <title> Randomized parallel algorithms for trapezoidal diagrams. </title> <journal> Internat. J. Comput. Geom. Appl., </journal> <volume> 2(2) </volume> <pages> 117-133, </pages> <year> 1992. </year>
Reference-contexts: The polygon is then subdivided into smaller polygon about that partition using Jordan sorting. This subdivision is then used to recurse. The algorithm terminates in expected O (n log fln). It can also be used to check whether or not a given polygon is simple. <ref> [CCT92] </ref> reports a version that eliminates the use of Jordan sorting, and is similar in flavor to the result introduced next. [Sei91] is a randomized incremental algorithm, much simpler than [CTV89]. It starts by randomly ordering the edges of the input polygon.
Reference: [Cha90a] <author> B. Chazelle. </author> <title> Efficient polygon triangulation. </title> <type> Preprint. </type> <note> Probably unpublished - precursor to [Cha90b], </note> <year> 1990. </year>
Reference-contexts: Finding a linear time algorithm remained open 8 problem; [TV86]'s algorithm was mistakenly thought to be linear for some time. In 1988 [TV88] brought it down to O (n log log n), showing that simple polygon triangle was easier than sorting. [CTV89] and <ref> [Cha90a] </ref> improved it to O (n log fln) subsequently. Finally [Cha91] showed that polygon triangulation can indeed be performed in asymptotically linear time. Unfortunately, in practice, this is not the recommended algorithm. <p> O (n + nt 0 ) (t 0 = # triangles with no edges on @P ) [Tou90] O (n log log n) [TV88] O (n log fln) (randomized) [CTV89] 1990 O (n log log n) [KKT90] O (n log fln) (bounded integer domain) [KKT90] O (n log fln) (deterministic) <ref> [Cha90a] </ref> 1991 O (n) [Cha91] Table 2: History of Polygon Triangulation (modified from [O'R94]) 3.1 Improvement in Algorithms [GJPT78] triangulates a simple polygon by decomposing it into monotone polygons and then triangulate each of them separately using the algorithm described earlier. This decomposition uses the regularization procedure introduced in [LP77].
Reference: [Cha90b] <author> B. Chazelle. </author> <title> Triangulating a simple polygon in linear time. </title> <booktitle> In Proc. 31st Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 220-230, </pages> <year> 1990. </year>
Reference: [Cha91] <author> B. Chazelle. </author> <title> Triangulating a simple polygon in linear time. </title> <journal> Discrete Comput. Geom., </journal> <volume> 6 </volume> <pages> 485-524, </pages> <year> 1991. </year>
Reference-contexts: In 1988 [TV88] brought it down to O (n log log n), showing that simple polygon triangle was easier than sorting. [CTV89] and [Cha90a] improved it to O (n log fln) subsequently. Finally <ref> [Cha91] </ref> showed that polygon triangulation can indeed be performed in asymptotically linear time. Unfortunately, in practice, this is not the recommended algorithm. We need further research to find simple an practical algorithm that will `actually' run faster than the simple O (n log n) algorithms on data of interest. <p> 0 ) (t 0 = # triangles with no edges on @P ) [Tou90] O (n log log n) [TV88] O (n log fln) (randomized) [CTV89] 1990 O (n log log n) [KKT90] O (n log fln) (bounded integer domain) [KKT90] O (n log fln) (deterministic) [Cha90a] 1991 O (n) <ref> [Cha91] </ref> Table 2: History of Polygon Triangulation (modified from [O'R94]) 3.1 Improvement in Algorithms [GJPT78] triangulates a simple polygon by decomposing it into monotone polygons and then triangulate each of them separately using the algorithm described earlier. This decomposition uses the regularization procedure introduced in [LP77]. <p> The linear time algorithm of <ref> [Cha91] </ref> also constructs the horizontal visibility map of the polygon. The basic idea is the same as that of merge sort. It first builds a tree bottom-up constructing `coarse' visibility map. This process does not consider all edges.
Reference: [Che89] <author> L. Chew. </author> <title> Constrained delaunay triangulation. </title> <journal> Algorithmica, </journal> <volume> 4 </volume> <pages> 97-108, </pages> <year> 1989. </year>
Reference-contexts: This algorithm terminates after O (n 2 ) flips. [LL86] presents a simple O (n 2 ) algorithm to compute a valid starting triangulation. This algorithm can be modified to run in O (n log n) if the constraints are edges of a simple polygon. <ref> [Che89] </ref> improves the upper bound to O (n log n) for arbitrary point set, thus hitting the lower bound of (n log n). It uses the divide and conquer approach: Sort the input points S by the X coordinate.
Reference: [Che93] <author> F. Cheng. </author> <title> Computation techniques on nurb surfaces. </title> <booktitle> In SIAM Conference on Geometric Design, </booktitle> <address> Tempe, AZ, </address> <year> 1993. </year>
Reference: [CI84] <author> B. Chazelle and J. Incerpi. </author> <title> Triangulation and shape-complexity. </title> <journal> ACM Trans. Graph., </journal> <volume> 3(2) </volume> <pages> 135-152, </pages> <year> 1984. </year>
Reference-contexts: Year Complexity Reference 1911 O (n 2 ) [Len11] 1978 O (n log n) [GJPT78] 1983 O (n log r) (r = # concavities) [HM83] O (n log s) (s = sinousity) <ref> [CI84] </ref> 1988 O (n + nt 0 ) (t 0 = # triangles with no edges on @P ) [Tou90] O (n log log n) [TV88] O (n log fln) (randomized) [CTV89] 1990 O (n log log n) [KKT90] O (n log fln) (bounded integer domain) [KKT90] O (n log fln) <p> The sweep line also is no longer a simple straight line. A crooked line is carried, since some points do not get processed till the actual sweep line is well past them. This algorithm works even if the (simple) polygon has (polygonal) holes. <ref> [CI84] </ref>, like [HM83], depends on the complexity of the polygon. It defines a new measure sinuosity. Any simple polygon can be decomposed into alternating sequences of spiraling and antispiraling chains. <p> The number of such chains is the sinuosity of the polygon. (In particular start shaped polygons have a sinuosity of 1.) Its complexity is n log s. The attempts to start with the `montonization' or `diagonal splitting' path failed till <ref> [CI84] </ref> and [FM84] showed the equivalence of trapezoidal decomposition with triangulation for simple 9 polygons, and many recent efforts have been concentrated on polygon trapezoidalization (of course, a trapezoidalization can be used for monotone decomposition, as discussed below).
Reference: [CR90] <author> A. K. Cline and R. J. Renka. </author> <title> A constrained 2-dimensional triangulation and the solution of closest node problems in the presence of barriers. </title> <journal> SIAM J. Numer. Anal., </journal> <volume> 27(5) </volume> <pages> 1305-1321, </pages> <year> 1990. </year>
Reference-contexts: Divide the region (of points) into vertical strips such that there is exactly one vertex per strip (This requires unique X coordinates. [MV93] addresses that problem effectively.) Triangulation is found for each strip and adjacent strips merged. Repeat till only one strip remains. <ref> [CR90] </ref> reports an O (n log n) time incremental algorithm. Its strategy is to start with no constraints, and then add them, one at a time, to the current triangulation. 5 2.4 Optimal Triangulation Optimal triangulation is the problem of finding a triangulation with the minimum total weight.
Reference: [CSS83] <author> Z. J. Cendes, D. N. Shenton, and H. Shahnasser. </author> <title> Magnetic field computation using Delaunay triangulation and complementary finite element methods. </title> <journal> IEEE Trans. Magn., </journal> <volume> MAG-19(6), </volume> <year> 1983. </year>
Reference-contexts: A similar application lies in visibility computation, which, in turn, is used extensively in computer graphics to perform hidden surface elimination. Triangulation is also useful in rendering images, since current graphics hardwares can draw triangles rather efficiently. Triangulation are also used to compute magnetic fields on a given domain <ref> [CSS83] </ref>. Finite element analysis methods extensively use domain triangulation to make the problem tractable [Lis94, ZSZZ90]. Nearest neighbour computation can be speeded up using triangulation. Computer vision research benefits from the use triangulation to represent stereo data [LSFB88, FLB90]. Meteorologists routinely triangulate their domains to perform weather analysis.
Reference: [CTV89] <author> K. Clarkson, R. E. Tarjan, and C. J. Van Wyk. </author> <title> A fast Las Vegas algorithm for triangulating a simple polygon. </title> <journal> Discrete Comput. Geom., </journal> <volume> 4 </volume> <pages> 423-432, </pages> <year> 1989. </year>
Reference-contexts: Finding a linear time algorithm remained open 8 problem; [TV86]'s algorithm was mistakenly thought to be linear for some time. In 1988 [TV88] brought it down to O (n log log n), showing that simple polygon triangle was easier than sorting. <ref> [CTV89] </ref> and [Cha90a] improved it to O (n log fln) subsequently. Finally [Cha91] showed that polygon triangulation can indeed be performed in asymptotically linear time. Unfortunately, in practice, this is not the recommended algorithm. <p> n) [GJPT78] 1983 O (n log r) (r = # concavities) [HM83] O (n log s) (s = sinousity) [CI84] 1988 O (n + nt 0 ) (t 0 = # triangles with no edges on @P ) [Tou90] O (n log log n) [TV88] O (n log fln) (randomized) <ref> [CTV89] </ref> 1990 O (n log log n) [KKT90] O (n log fln) (bounded integer domain) [KKT90] O (n log fln) (deterministic) [Cha90a] 1991 O (n) [Cha91] Table 2: History of Polygon Triangulation (modified from [O'R94]) 3.1 Improvement in Algorithms [GJPT78] triangulates a simple polygon by decomposing it into monotone polygons and <p> For bounded integer coordinates, this algorithm build a data structure in linear time that can answer queries about horizontal neighbours in O (log 2 n). 1 As they are in, for instance, many computer graphics applications, when points are specified in screen coordinates. 10 <ref> [CTV89] </ref> is a randomized divide and conquer based algorithm that finds the visibility parti-tion of the polygons wrt a random subset of edges. The polygon is then subdivided into smaller polygon about that partition using Jordan sorting. This subdivision is then used to recurse. <p> It can also be used to check whether or not a given polygon is simple. [CCT92] reports a version that eliminates the use of Jordan sorting, and is similar in flavor to the result introduced next. [Sei91] is a randomized incremental algorithm, much simpler than <ref> [CTV89] </ref>. It starts by randomly ordering the edges of the input polygon. These edges are then added to the trapezoidal data structure one by one in that order, updating the trapezoidalization each time (see Fig. 3.1).
Reference: [DC91] <author> B. R. Donald and D. R. Chang. </author> <title> On the complexity of computing the homology type of a triangulation. </title> <booktitle> In Proc. 32nd Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 650-662, </pages> <year> 1991. </year>
Reference-contexts: Many times a surface is decomposed into many different approximate triangulations multi-resolution modeling [Tur92, HDD + 93, Var94] is one such example. It becomes imperative to ensure, then, that a triangulations does not alter the topology of the surface. <ref> [DC91] </ref> gives criteria for testing if two triangulations are of the same homology type.
Reference: [DDMW94] <author> M. T. Dickerson, R. L. S. Drysdale, S. A. McElfresh, and E. Welzl. </author> <title> Fast greedy triangulation algorithms. </title> <booktitle> In Proc. 10th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 211-220, </pages> <year> 1994. </year>
Reference-contexts: deterministic algorithm: T G ; T GDT (S; T G ) While more triangulation is needed, do find the shortest edge uv not in T G such that u and v are visible to each other T G T G [ fuvg T GDT (s; tg) Output T G . <ref> [DDMW94] </ref> brings the random complexity down to n log n.
Reference: [De 89] <author> L. De Floriani. </author> <title> A pyramidal data structure for triangle-based surface representation. </title> <journal> IEEE Comput. Graph. Appl., </journal> <volume> 9 </volume> <pages> 67-78, </pages> <month> March </month> <year> 1989. </year>
Reference-contexts: It becomes imperative to ensure, then, that a triangulations does not alter the topology of the surface. [DC91] gives criteria for testing if two triangulations are of the same homology type. In other words, it answers if they are topologically similar. <ref> [De 89] </ref> talks about representing different representations of the surface as a `pyramid' of Delaunay triangulations that encodes triangulation of the surface at different levels of sampling on the surface.
Reference: [DG70] <author> Duppe and Gottschalk. </author> <title> Automatische interpolation von isolinen bei willkurlichen stutzpunkten. </title> <journal> Algrveine Vermessungsnachricten, </journal> <volume> 77, </volume> <year> 1970. </year>
Reference-contexts: `left most' to mean `the point with the minimum X coordinate' are used occasionally; the meaning should be clear from the context. 2 General Triangulation Two popular schemes to compute legal triangulations are listed below. 2.1 Greedy Triangulation One technique to triangulate a set of points is the greedy method <ref> [DG70] </ref>.
Reference: [ea89] <author> T. Derose et al. Apex: </author> <title> two architectures for generating parametric curves and surfaces. </title> <journal> The Visual Computer, </journal> <volume> 5 </volume> <pages> 264-276, </pages> <year> 1989. </year>
Reference: [ea91] <author> R. Bedichek et al. </author> <title> Rapid low-cost display of spline surfaces. </title> <booktitle> In Proceedings of advanced reserach in VLSI, </booktitle> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference: [ET91] <author> H. Edelsbrunner and T. S. Tan. </author> <title> A quadratic time algorithm for the minmax length triangulation. </title> <booktitle> In Proc. 32nd Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 414-423, </pages> <year> 1991. </year>
Reference-contexts: It is important how this new edge uv is chosen. If 6 xuy is the largest angle of the triangulation, an `ear cutting' procedure finds uv such that uv 2 S fx; u; yg; and xy " uv 6= . <ref> [ET91, ET93] </ref> minimizes, instead of the maximum internal angle of the triangles, the maxi mum length of the any triangle. This is done in O (n 2 ) time. It starts by finding the convex hull ch (S) and the relative neighbourhood graph rng (S) of S. <p> of (n log n) is also shown. [ETW90, ETW92] can be used to minimize the maximum angle, while minimizes the maximum edge length. [LL92] shows an alternate scheme that takes only O (n) time for simple polygon and O (n log n) for planar straight line graph, as opposed to <ref> [ET91, ET93] </ref>'s O (n 2 ), but it does not guarantee minimality. It can be up to 3 times more than the minimum.
Reference: [ET93] <author> H. Edelsbrunner and T. S. Tan. </author> <title> A quadratic time algorithm for the minmax length triangulation. </title> <journal> SIAM J. Comput., </journal> <volume> 22 </volume> <pages> 527-551, </pages> <year> 1993. </year>
Reference-contexts: It is important how this new edge uv is chosen. If 6 xuy is the largest angle of the triangulation, an `ear cutting' procedure finds uv such that uv 2 S fx; u; yg; and xy " uv 6= . <ref> [ET91, ET93] </ref> minimizes, instead of the maximum internal angle of the triangles, the maxi mum length of the any triangle. This is done in O (n 2 ) time. It starts by finding the convex hull ch (S) and the relative neighbourhood graph rng (S) of S. <p> of (n log n) is also shown. [ETW90, ETW92] can be used to minimize the maximum angle, while minimizes the maximum edge length. [LL92] shows an alternate scheme that takes only O (n) time for simple polygon and O (n log n) for planar straight line graph, as opposed to <ref> [ET91, ET93] </ref>'s O (n 2 ), but it does not guarantee minimality. It can be up to 3 times more than the minimum.
Reference: [ETW90] <author> H. Edelsbrunner, T. S. Tan, and R. Waupotitsch. </author> <title> An O(n 2 log n) time algorithm for the minmax angle triangulation. </title> <booktitle> In Proc. 6th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 44-52, </pages> <year> 1990. </year>
Reference-contexts: Property Expected value Maximum vertex degree ( n log log n ) Maximum length of an edge (log 1 Minimum angle of a triangle (n 1 2 ) Maximum angle of a triangle (n 1 5 ) Table 1: Properties of Delaunay triangulation <ref> [ETW90, ETW92] </ref> shows an algorithm that minimizes the maximum angle of any triangle in O (n 2 log n) time. It starts with an arbitrary triangulation and improves it iteratively by `edge-insertion'. <p> At the `edge-insertion' step, all old edges that intersect the new edge are deleted, and the polygons on the two sides of the new edge are retriangulated. Although a local operation, <ref> [ETW90, ETW92] </ref> proves that a global optimum is reached. It is important how this new edge uv is chosen. <p> A tight lower bound of (n log n) is also shown. <ref> [ETW90, ETW92] </ref> can be used to minimize the maximum angle, while minimizes the maximum edge length. [LL92] shows an alternate scheme that takes only O (n) time for simple polygon and O (n log n) for planar straight line graph, as opposed to [ET91, ET93]'s O (n 2 ), but it
Reference: [ETW92] <author> Herbert Edelsbrunner, Tiow Seng Tan, and Roman Waupotitsch. </author> <title> O(N 2 log N ) time algorithm for the minmax angle triangulation. </title> <journal> SIAM J. Sci. Statist. Comput., </journal> <volume> 13(4) </volume> <pages> 994-1008, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Property Expected value Maximum vertex degree ( n log log n ) Maximum length of an edge (log 1 Minimum angle of a triangle (n 1 2 ) Maximum angle of a triangle (n 1 5 ) Table 1: Properties of Delaunay triangulation <ref> [ETW90, ETW92] </ref> shows an algorithm that minimizes the maximum angle of any triangle in O (n 2 log n) time. It starts with an arbitrary triangulation and improves it iteratively by `edge-insertion'. <p> At the `edge-insertion' step, all old edges that intersect the new edge are deleted, and the polygons on the two sides of the new edge are retriangulated. Although a local operation, <ref> [ETW90, ETW92] </ref> proves that a global optimum is reached. It is important how this new edge uv is chosen. <p> A tight lower bound of (n log n) is also shown. <ref> [ETW90, ETW92] </ref> can be used to minimize the maximum angle, while minimizes the maximum edge length. [LL92] shows an alternate scheme that takes only O (n) time for simple polygon and O (n log n) for planar straight line graph, as opposed to [ET91, ET93]'s O (n 2 ), but it
Reference: [FK90] <author> D.R. Forsey and V. Klassen. </author> <title> An adaptive subdivision algorithm for crack prevention in the display of parametric surfaces. </title> <booktitle> Proceedings of Graphics Interface, </booktitle> <pages> pages 1-8, </pages> <year> 1990. </year>
Reference: [FLB90] <author> O. D. Faugeras, E. Le Bras-Mehlman, and J. D. Boissonnat. </author> <title> Representing stereo data with the Delaunay triangulation. </title> <booktitle> Artif. Intell., </booktitle> <address> 44(1-2):41-87, </address> <month> July </month> <year> 1990. </year>
Reference-contexts: Triangulation are also used to compute magnetic fields on a given domain [CSS83]. Finite element analysis methods extensively use domain triangulation to make the problem tractable [Lis94, ZSZZ90]. Nearest neighbour computation can be speeded up using triangulation. Computer vision research benefits from the use triangulation to represent stereo data <ref> [LSFB88, FLB90] </ref>. Meteorologists routinely triangulate their domains to perform weather analysis. Mathematicians can efficiently perform the interpolation of multi-variate functions by triangulating the domains. Triangulations also appears in a number of algorithms in chaos theory to solve differential equations. 1.3 Organization Rest of this paper is organized as follows.
Reference: [FM84] <author> A. Fournier and D. Y. Montuno. </author> <title> Triangulating simple polygons and equivalent problems. </title> <journal> ACM Trans. Graph., </journal> <volume> 3(2) </volume> <pages> 153-174, </pages> <year> 1984. </year>
Reference-contexts: (Fig.3 (c)) Add diagonals (q i ; x 2 ); (q i ; x 3 ); : : : (q i ; x j1 ) and stop. end For general simple polygons, the time complexity was not improved till quite recently when a number of O (n log n) algorithms <ref> [GJPT78, B.C82, HM83, FM84] </ref> were proposed in the late 70's and 80's. Still the gap between the known lower bound, (n), and upper bounds kept challenging computational geometers for long. Finding a linear time algorithm remained open 8 problem; [TV86]'s algorithm was mistakenly thought to be linear for some time. <p> The number of such chains is the sinuosity of the polygon. (In particular start shaped polygons have a sinuosity of 1.) Its complexity is n log s. The attempts to start with the `montonization' or `diagonal splitting' path failed till [CI84] and <ref> [FM84] </ref> showed the equivalence of trapezoidal decomposition with triangulation for simple 9 polygons, and many recent efforts have been concentrated on polygon trapezoidalization (of course, a trapezoidalization can be used for monotone decomposition, as discussed below). <p> Horizontal trapezoidalization is also called horizontal visibility map it gives the edges on the left and the right of a vertex that are visible from it, via a horizontal ray. <ref> [FM84] </ref> constructs trapezoids with two vertical sides and are determined by two vertices of the input polygon P . It is a deterministic sweep line algorithm to find the trapezoidalization in O (n log n). Once trapezoidalized, P is broken into monotone polygons and triangulated.
Reference: [FMM86] <author> D. Filip, R. Magedson, and R. Markot. </author> <title> Surface algorithms using bounds on derivatives. </title> <journal> CAGD, </journal> <volume> 3 </volume> <pages> 295-311, </pages> <year> 1986. </year>
Reference: [Gho83] <author> S. K. Ghosh. </author> <title> A linear time algorithm for decomposing a monotone polygon into star-shaped polygons. </title> <booktitle> In Proc. 3rd Conf. Found. Softw. </booktitle> <publisher> Tech. Theoret. Comput. Sci., </publisher> <pages> pages 505-519, </pages> <address> India, </address> <year> 1983. </year>
Reference: [GJPT78] <author> M. R. Garey, D. S. Johnson, F. P. Preparata, and R. E. Tarjan. </author> <title> Triangulating a simple polygon. </title> <journal> Inform. Process. Lett., </journal> <volume> 7 </volume> <pages> 175-179, </pages> <year> 1978. </year>
Reference-contexts: Each edge between points on the polygon is a diagonal. In fact a monotone polygon (a polygons that can be split into two monotone chains wrt any line) can be triangulated in O (n) ([Gho83, Tou83]). A simple algorithm by <ref> [GJPT78] </ref> is outlined below. (We can assume without any loss of generality that the polygon is monotone in the Y coordinate. Sort the vertices from top to bottom: q 0 ; q 1 ; : : : q n . (These vertices are considered in that order. <p> (Fig.3 (c)) Add diagonals (q i ; x 2 ); (q i ; x 3 ); : : : (q i ; x j1 ) and stop. end For general simple polygons, the time complexity was not improved till quite recently when a number of O (n log n) algorithms <ref> [GJPT78, B.C82, HM83, FM84] </ref> were proposed in the late 70's and 80's. Still the gap between the known lower bound, (n), and upper bounds kept challenging computational geometers for long. Finding a linear time algorithm remained open 8 problem; [TV86]'s algorithm was mistakenly thought to be linear for some time. <p> It turns out that if the polygon is allowed to have holes we cannot do better than (n log n) [AAP86]. Year Complexity Reference 1911 O (n 2 ) [Len11] 1978 O (n log n) <ref> [GJPT78] </ref> 1983 O (n log r) (r = # concavities) [HM83] O (n log s) (s = sinousity) [CI84] 1988 O (n + nt 0 ) (t 0 = # triangles with no edges on @P ) [Tou90] O (n log log n) [TV88] O (n log fln) (randomized) [CTV89] 1990 <p> O (n log log n) [TV88] O (n log fln) (randomized) [CTV89] 1990 O (n log log n) [KKT90] O (n log fln) (bounded integer domain) [KKT90] O (n log fln) (deterministic) [Cha90a] 1991 O (n) [Cha91] Table 2: History of Polygon Triangulation (modified from [O'R94]) 3.1 Improvement in Algorithms <ref> [GJPT78] </ref> triangulates a simple polygon by decomposing it into monotone polygons and then triangulate each of them separately using the algorithm described earlier. This decomposition uses the regularization procedure introduced in [LP77]. <p> The algorithm finds such a diagonal in O (jP j) time. Given that, a simple divide and conquer algorithm yields a total complexity of O (n log n). [HM83] combines the steps of <ref> [GJPT78] </ref> into one sweep to yield an O (n log n) algorithm.
Reference: [Gol89] <author> S. Goldman. </author> <title> A space efficient greedy triangulation algorithm. </title> <journal> Inform. Process. Lett., </journal> <volume> 31(4) </volume> <pages> 191-196, </pages> <year> 1989. </year>
Reference-contexts: mg 3 end This same basic structure has been implemented by a number of different researchers in different ways achieving different overall complexity. [Lin89] shows that if S is uniformly distributed in a unit square, the greedy triangulation of S can be computed in O (nlog 1:5 n) expected time. <ref> [Gol89] </ref> presents a very simple O (n 2 log n) deterministic algorithm: T G ; T GDT (S; T G ) While more triangulation is needed, do find the shortest edge uv not in T G such that u and v are visible to each other T G T G [
Reference: [HDD + 93] <author> H. Hoppe, T. Derose, T. Duchamp, J. Mcdonald, and W. Stuetzle. </author> <title> Mesh optimization. </title> <booktitle> In ACM SIGGRAPH, </booktitle> <pages> pages 19-26, </pages> <year> 1993. </year>
Reference-contexts: They report that this works quite well in practice. Finally this algorithm performs a post processing step flipping diagonals just as described earlier. Many times a surface is decomposed into many different approximate triangulations multi-resolution modeling <ref> [Tur92, HDD + 93, Var94] </ref> is one such example. It becomes imperative to ensure, then, that a triangulations does not alter the topology of the surface. [DC91] gives criteria for testing if two triangulations are of the same homology type.
Reference: [HM83] <author> S. Hertel and K. Mehlhorn. </author> <title> Fast triangulation of simple polygons. </title> <booktitle> In Proc. 4th Internat. Conf. Found. Comput. Theory, volume 158 of Lecture Notes in Computer Science, </booktitle> <pages> pages 207-218. </pages> <publisher> Springer-Verlag, </publisher> <year> 1983. </year>
Reference-contexts: (Fig.3 (c)) Add diagonals (q i ; x 2 ); (q i ; x 3 ); : : : (q i ; x j1 ) and stop. end For general simple polygons, the time complexity was not improved till quite recently when a number of O (n log n) algorithms <ref> [GJPT78, B.C82, HM83, FM84] </ref> were proposed in the late 70's and 80's. Still the gap between the known lower bound, (n), and upper bounds kept challenging computational geometers for long. Finding a linear time algorithm remained open 8 problem; [TV86]'s algorithm was mistakenly thought to be linear for some time. <p> It turns out that if the polygon is allowed to have holes we cannot do better than (n log n) [AAP86]. Year Complexity Reference 1911 O (n 2 ) [Len11] 1978 O (n log n) [GJPT78] 1983 O (n log r) (r = # concavities) <ref> [HM83] </ref> O (n log s) (s = sinousity) [CI84] 1988 O (n + nt 0 ) (t 0 = # triangles with no edges on @P ) [Tou90] O (n log log n) [TV88] O (n log fln) (randomized) [CTV89] 1990 O (n log log n) [KKT90] O (n log fln) <p> The algorithm finds such a diagonal in O (jP j) time. Given that, a simple divide and conquer algorithm yields a total complexity of O (n log n). <ref> [HM83] </ref> combines the steps of [GJPT78] into one sweep to yield an O (n log n) algorithm. <p> The sweep line also is no longer a simple straight line. A crooked line is carried, since some points do not get processed till the actual sweep line is well past them. This algorithm works even if the (simple) polygon has (polygonal) holes. [CI84], like <ref> [HM83] </ref>, depends on the complexity of the polygon. It defines a new measure sinuosity. Any simple polygon can be decomposed into alternating sequences of spiraling and antispiraling chains.
Reference: [HMRT86] <author> K. Hoffman, K. Mehlhorn, P. Rosenthiel, and R. Tarjan. </author> <title> Sorting jordan sequence in linear time usuing level-link search trees. </title> <journal> Inform. and Control, </journal> <volume> 68 </volume> <pages> 170-184, </pages> <year> 1986. </year>
Reference-contexts: This algorithms uses complex data structures and complicated steps, and is not easy to implement. Though practically of modest consequence, it was a major theoretical jump. This algorithm is based on a result that Jordan sorting can be done in linear time <ref> [HMRT86] </ref>.
Reference: [HW90] <author> Mark Hall and Joe Warren. </author> <title> Adaptive polygonalization of implicitly defined surfaces. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 10(6) </volume> <pages> 33-42, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: a triangular surface function is: X G ijk i!j!k! u + v + w = 1. 4.2 Algebraic surfaces Algebraic surfaces belong to the class of implicit surfaces which can be thought of as the set of points that form roots to an equation f (x; y; z) = 0. <ref> [HW90, Blo88] </ref> are some of the excellent sources on triangulation of implicit surfaces. [Blo88] surrounds the implicit surface with an octree [Mea82]. The surface is sampled at the corners of this octree.
Reference: [Jar84] <author> J. W. Jaromczyk. </author> <title> Lower bounds for polygon simplicity testing and other problems. </title> <booktitle> In Proc. Math. Found. of Computer Science '84, </booktitle> <pages> pages 339-347. </pages> <publisher> Springer-Verlag, </publisher> <year> 1984. </year>
Reference-contexts: An edge visible polygon contains at least one edge such that every point inside the polygon is visible from some point on that edge. Given a general polygon, testing if it is simple does no seem to be all that simple: <ref> [Jar84] </ref> shows a lower bound of O (n log n). 4 Surfaces The triangulation of a surface is just an extension of planar triangulations and finds application in computer vision, geometric modeling, geographic data representation, function interpolation, virtual reality etc.
Reference: [KB92] <author> G. Kant and H. L. Bodlaender. </author> <title> Triangulating planar graphs while minimizing the maximum degree. </title> <booktitle> In Proc. 3rd Scand. Workshop Algorithm Theory, volume 621 of Lecture Notes in Computer Science, </booktitle> <pages> pages 258-271. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: The Delaunay triangulation of a polygon (a constrained Delaunay triangulation) was shown to be computable in O (n log n) by [LL86]. [KL93] improves that to a randomized algorithm with expected running time to be O (n). <ref> [KB92] </ref> minimizes the maximum degree of the triangulation of any planar graph. Such triangulation is specially useful for re-triangulation when local changes are made to the input point set. Unfortunately it turns out to be an NP-complete problem.
Reference: [Kir80] <author> D. G. Kirkpatrick. </author> <title> A note on delaunay and optimal triangulations. </title> <journal> Info. Proc. Letters., </journal> <volume> 10 </volume> <pages> 127-128, </pages> <year> 1980. </year>
Reference-contexts: They are not even close to optimal - [MZ79] showed that R (GT ) is (n 1 log n ). <ref> [Kir80] </ref> tightened the bound for R (DT ) to (n). Of course, this is also the lower bound since any reasonable triangulation will be no worse, as no triangulation can have &lt; 3n edges.
Reference: [KKT90] <author> D. G. Kirkpatrick, M. M. Klawe, and R. E. Tarjan. </author> <title> Polygon triangulation in O(n log log n) time with simple data structures. </title> <booktitle> In Proc. 6th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 34-43, </pages> <year> 1990. </year>
Reference-contexts: (r = # concavities) [HM83] O (n log s) (s = sinousity) [CI84] 1988 O (n + nt 0 ) (t 0 = # triangles with no edges on @P ) [Tou90] O (n log log n) [TV88] O (n log fln) (randomized) [CTV89] 1990 O (n log log n) <ref> [KKT90] </ref> O (n log fln) (bounded integer domain) [KKT90] O (n log fln) (deterministic) [Cha90a] 1991 O (n) [Cha91] Table 2: History of Polygon Triangulation (modified from [O'R94]) 3.1 Improvement in Algorithms [GJPT78] triangulates a simple polygon by decomposing it into monotone polygons and then triangulate each of them separately using <p> s) (s = sinousity) [CI84] 1988 O (n + nt 0 ) (t 0 = # triangles with no edges on @P ) [Tou90] O (n log log n) [TV88] O (n log fln) (randomized) [CTV89] 1990 O (n log log n) <ref> [KKT90] </ref> O (n log fln) (bounded integer domain) [KKT90] O (n log fln) (deterministic) [Cha90a] 1991 O (n) [Cha91] Table 2: History of Polygon Triangulation (modified from [O'R94]) 3.1 Improvement in Algorithms [GJPT78] triangulates a simple polygon by decomposing it into monotone polygons and then triangulate each of them separately using the algorithm described earlier. <p> The basic idea is the same as [TV88], but the triangle splitting is achieved without any Jordan sorting or other complicated data structures of [TV88]. <ref> [KKT90] </ref> is based on the construction of the visibility partition of a polygonal chain P 0 from the partitions of some prefix chain P 1 of P 0 and the rest, P 0 n P 1 . <p> If we could introduce extra points inside such polygons, we may expect to find better triangulation, in terms of these quality criteria. These points are referred to as steiner points. <ref> [KKT90] </ref> showed that the problem of triangulating a simple polygon with steiner points is linear time equivalent to the steiner free triangulation, if we are interested only in a legal triangulation. [BGR88] computes a triangulation that has no obtuse triangles.
Reference: [KL93] <author> R. Klein and A. Lingas. </author> <title> A note on generalizations of Chew's algorithm for the Voronoi diagram of a convex polygon. </title> <booktitle> In Proc. 5th Canad. Conf. Comput. Geom., </booktitle> <pages> pages 370-374, </pages> <address> Waterloo, Canada, </address> <year> 1993. </year> <month> 17 </month>
Reference-contexts: A partial triangulation of G of G is said to be c-sensitive if all diagonals forming it are c-sensitive. The Delaunay triangulation of a polygon (a constrained Delaunay triangulation) was shown to be computable in O (n log n) by [LL86]. <ref> [KL93] </ref> improves that to a randomized algorithm with expected running time to be O (n). [KB92] minimizes the maximum degree of the triangulation of any planar graph. Such triangulation is specially useful for re-triangulation when local changes are made to the input point set.
Reference: [Kli80] <author> G. T. Klincsek. </author> <title> Minimum triangulation of polygonal domains. </title> <journal> Annals of Discrete Math., </journal> <volume> 9 </volume> <pages> 121-123, </pages> <year> 1980. </year>
Reference-contexts: This bound is maintained through out the algorithm, making sure that the merges do no take too long. 3.2 Polygon triangulation with guarantees The O (n 3 ) algorithm mentioned in the beginning can be modified to compute the minimum weight triangulation that is not NP-complete for the polygon case <ref> [Kli80] </ref>. [Ram91] gives an O (n log n) algorithm for minimum weight triangulation if the the vertices have weights.
Reference: [KM94] <author> S. Kumar and D. Manocha. </author> <title> Interactive display of large scale nurbs models. </title> <type> Technical Report TR94-008, </type> <institution> Department of Computer Science, University of North Carolina, </institution> <year> 1994. </year>
Reference: [LC93] <author> W.L. Luken and Fuhua Cheng. </author> <title> Rendering trimmed nurb surfaces. </title> <institution> Computer science research report 18669(81711), IBM Research Division, </institution> <year> 1993. </year>
Reference: [Len11] <author> N. J. Lennes. </author> <title> Theorems on simple polygon and polyhedron. </title> <journal> Amer. J. Math., </journal> <volume> 33 </volume> <pages> 37-62, </pages> <year> 1911. </year>
Reference-contexts: For each of the O (n 2 ) pairs of possible segments we can check if it intersects the polygon in O (n) time. In fact we know of an O (n 2 ) algorithm since at least the the beginning of the century <ref> [Len11] </ref>. If we are just interested in legal triangulation, we cannot expect to triangulate a simple polygon in better than (n) time; all points need to be a part of the triangulation. <p> It turns out that if the polygon is allowed to have holes we cannot do better than (n log n) [AAP86]. Year Complexity Reference 1911 O (n 2 ) <ref> [Len11] </ref> 1978 O (n log n) [GJPT78] 1983 O (n log r) (r = # concavities) [HM83] O (n log s) (s = sinousity) [CI84] 1988 O (n + nt 0 ) (t 0 = # triangles with no edges on @P ) [Tou90] O (n log log n) [TV88] O
Reference: [Lev87] <author> C. Levcopoulos. </author> <title> An ( p n) lower bound for the nonoptimality of the greedy triangulation. </title> <journal> Inform. Process. Lett., </journal> <volume> 25 </volume> <pages> 247-251, </pages> <year> 1987. </year>
Reference-contexts: And since the edges of the hull lie in the optimal triangulation the ratio is not more than O (n). In the special case when S is convex, [LL87] formally proves that R (DT ) is, in fact, O (1). <ref> [Lev87] </ref> tightened the bound for R (GT ) to p n 2 . [Lin86] showed that though in worst case these triangulations can be quite un-optimal, on average they both behave well. [Lin86] proves that both R (GT ) and R (DT ) are O (log n) with high probability, using
Reference: [Lin86] <author> A. Lingas. </author> <title> Info. </title> <journal> Proc. Letters., </journal> <volume> 22(1) </volume> <pages> 25-31, </pages> <year> 1986. </year>
Reference-contexts: In the special case when S is convex, [LL87] formally proves that R (DT ) is, in fact, O (1). [Lev87] tightened the bound for R (GT ) to p n 2 . <ref> [Lin86] </ref> showed that though in worst case these triangulations can be quite un-optimal, on average they both behave well. [Lin86] proves that both R (GT ) and R (DT ) are O (log n) with high probability, using a maximal rectangle around the set S. <p> special case when S is convex, [LL87] formally proves that R (DT ) is, in fact, O (1). [Lev87] tightened the bound for R (GT ) to p n 2 . <ref> [Lin86] </ref> showed that though in worst case these triangulations can be quite un-optimal, on average they both behave well. [Lin86] proves that both R (GT ) and R (DT ) are O (log n) with high probability, using a maximal rectangle around the set S.
Reference: [Lin87] <author> A. Lingas. </author> <title> A new heuristic for minimum weight triangulation. </title> <journal> SIAM J. Algebraic Discrete Methods, </journal> <volume> 8(4) </volume> <pages> 646-658, </pages> <year> 1987. </year>
Reference-contexts: If the length of this rectangle is L and the width is W , P r R (DT ) = O (log n W n e log n L ) 2 ) 1 (1 + t 2.5 Minimum Triangulation heuristics A number of other heuristics have been proposed in literature <ref> [PH87, Lin87] </ref>. [Lin87] presents an O (n 3 ) algorithm assures that the R-factor is O (log n) with probability greater than 1 cn ff , where c &gt; 0 and ff &gt; 1. <p> length of this rectangle is L and the width is W , P r R (DT ) = O (log n W n e log n L ) 2 ) 1 (1 + t 2.5 Minimum Triangulation heuristics A number of other heuristics have been proposed in literature [PH87, Lin87]. <ref> [Lin87] </ref> presents an O (n 3 ) algorithm assures that the R-factor is O (log n) with probability greater than 1 cn ff , where c &gt; 0 and ff &gt; 1. This algorithm has the following basic steps: Find the convex hull, (CH (S), of the input set S.
Reference: [Lin89] <author> Andrzej Lingas. </author> <title> Greedy triangulation can be efficiently implemented in the average case. </title> <booktitle> In Graph-Theoretic Concepts in Computer Science. Proceedings., </booktitle> <year> 1989. </year>
Reference-contexts: W ((p y ; p z )) = min i;j W (p i ; p j ) L L n fW g fm 2 LjW properly intersects mg 3 end This same basic structure has been implemented by a number of different researchers in different ways achieving different overall complexity. <ref> [Lin89] </ref> shows that if S is uniformly distributed in a unit square, the greedy triangulation of S can be computed in O (nlog 1:5 n) expected time. [Gol89] presents a very simple O (n 2 log n) deterministic algorithm: T G ; T GDT (S; T G ) While more triangulation
Reference: [Lis94] <author> Dani Lischinski. </author> <title> Incremental Delaunay triangulation. </title> <editor> In Paul Heckbert, editor, </editor> <booktitle> Graphics Gems IV, </booktitle> <pages> pages 47-59. </pages> <publisher> Academic Press, </publisher> <address> Boston, MA, </address> <year> 1994. </year>
Reference-contexts: Triangulation is also useful in rendering images, since current graphics hardwares can draw triangles rather efficiently. Triangulation are also used to compute magnetic fields on a given domain [CSS83]. Finite element analysis methods extensively use domain triangulation to make the problem tractable <ref> [Lis94, ZSZZ90] </ref>. Nearest neighbour computation can be speeded up using triangulation. Computer vision research benefits from the use triangulation to represent stereo data [LSFB88, FLB90]. Meteorologists routinely triangulate their domains to perform weather analysis. Mathematicians can efficiently perform the interpolation of multi-variate functions by triangulating the domains.
Reference: [LL86] <author> D. T. Lee and A. K. Lin. </author> <title> Generalized Delaunay triangulation for planar graphs. </title> <journal> Discrete Comput. Geom., </journal> <volume> 1 </volume> <pages> 201-217, </pages> <year> 1986. </year>
Reference-contexts: Q does not belong to the triangulation if the minimum angle that e makes with the edges of Q is smaller than that the other diagonal xy makes. In such case switch the diagonal; generate triangles xyu and xvy. This algorithm terminates after O (n 2 ) flips. <ref> [LL86] </ref> presents a simple O (n 2 ) algorithm to compute a valid starting triangulation. <p> A partial triangulation of G of G is said to be c-sensitive if all diagonals forming it are c-sensitive. The Delaunay triangulation of a polygon (a constrained Delaunay triangulation) was shown to be computable in O (n log n) by <ref> [LL86] </ref>. [KL93] improves that to a randomized algorithm with expected running time to be O (n). [KB92] minimizes the maximum degree of the triangulation of any planar graph. Such triangulation is specially useful for re-triangulation when local changes are made to the input point set.
Reference: [LL87] <author> C. Levcopoulos and A. Lingas. </author> <title> On approximation behavior of the greedy triangulation for convex polygons. </title> <journal> Algorithmica, </journal> <volume> 2 </volume> <pages> 175-193, </pages> <year> 1987. </year>
Reference-contexts: And since the edges of the hull lie in the optimal triangulation the ratio is not more than O (n). In the special case when S is convex, <ref> [LL87] </ref> formally proves that R (DT ) is, in fact, O (1). [Lev87] tightened the bound for R (GT ) to p n 2 . [Lin86] showed that though in worst case these triangulations can be quite un-optimal, on average they both behave well. [Lin86] proves that both R (GT )
Reference: [LL90] <author> C. Levcopoulos and A. Lingas. </author> <title> Fast algorithms for greedy triangulation. </title> <booktitle> In Proc. 2nd Scand. Workshop Algorithm Theory, volume 447 of Lecture Notes in Computer Science, </booktitle> <pages> pages 238-250. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: It terminates in O (n log n) expected time, if the input point set is randomly distributed over any convex shape. <ref> [LL90] </ref> brought down the deterministic complexity to O (n 2 ) using Voronoi diagram with barriers, an extension to Voronoi diagrams where a number of the output edges are specified in the input. Let G = (V; E) be a planar straight line graph. <p> The minimal set of straight-line segments and half-lines outside G that partitions the plane onto regions R (v); v 2 V , is called the Voronoi diagram with barriers of G, or V orb (G). <ref> [LL90] </ref> is outlined below: T Compute V orb (G) While T is not a complete triangulation do begin Find the shortest diagonal d of G [ T (using V orb (G)) T T [ d Update V orb (G [ T ) (compute it from V orb (G [ T n <p> orb (G) While T is not a complete triangulation do begin Find the shortest diagonal d of G [ T (using V orb (G)) T T [ d Update V orb (G [ T ) (compute it from V orb (G [ T n fdg) end T is the triangulation. <ref> [LL90] </ref> also presents an algorithm to optimally triangulate convex polygons in linear time. 2.2 Delaunay Triangulation Another popular way of triangulating a set of polygons is by using Delaunay triangulation. Delaunay triangulation is the dual of the Voronoi diagram (also called Drichilet or Thiessen tessellation).
Reference: [LL92] <author> C. Levcopoulos and A. Lingas. </author> <title> C-sensitive triangulations approximate the minmax length triangulation. </title> <booktitle> In Proc. 12th Conf. </booktitle> <institution> Found. Softw. Tech. Theoret. Comput. Sci., </institution> <address> New Delhi, India, </address> <year> 1992. </year>
Reference-contexts: A tight lower bound of (n log n) is also shown. [ETW90, ETW92] can be used to minimize the maximum angle, while minimizes the maximum edge length. <ref> [LL92] </ref> shows an alternate scheme that takes only O (n) time for simple polygon and O (n log n) for planar straight line graph, as opposed to [ET91, ET93]'s O (n 2 ), but it does not guarantee minimality. It can be up to 3 times more than the minimum. <p> It can be up to 3 times more than the minimum. In general, any c-sensitive triangulation of a planar point set approximates the minmax triangulation within a factor of 2 (c + 1). <ref> [LL92] </ref> also proves that the greedy triangulation and the Delaunay triangulation of a planar straight line graph are 4-sensitive and 1-sensitive respectively. c-sensitivity is defined as follows: Let G be a planar straight line graph and let c &gt; 0 A diagonal a of G is said to be c-sensitive if
Reference: [Llo77] <author> E. Lloyd. </author> <title> Dt and gt are non-optimal. </title> <booktitle> In Proc. 18th Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 228-240, </pages> <year> 1977. </year>
Reference-contexts: We can quantify the quality of a class of triangulations T by maxfW (S 0 )=OT (S)g; S 0 2 T : Neither Greedy triangulation (GT ) nor Delaunay triangulation (DT ) are optimal <ref> [Llo77] </ref>. They are not even close to optimal - [MZ79] showed that R (GT ) is (n 1 log n ). [Kir80] tightened the bound for R (DT ) to (n).
Reference: [LP77] <author> D.T. Lee and F.P. Preparata. </author> <title> Location of a point in a planar subdivision and its application. </title> <journal> SIAM J. Comput., </journal> <volume> 6 </volume> <pages> 594-606, </pages> <year> 1977. </year>
Reference-contexts: This decomposition uses the regularization procedure introduced in <ref> [LP77] </ref>. This procedure takes O (n log n) and adds non-intersecting diagonals to the polygon which do not cross the polygon boundary. Thus the total complexity of the algorithm remains O (n log n). [B.C82]'s algorithm is particularly easy to implement.
Reference: [LR78] <author> B. A. Lewis and J. S. Robinson. </author> <title> Triangulation of planar regions with applications. </title> <journal> Comput. J., </journal> <volume> 21 </volume> <pages> 324-332, </pages> <year> 1978. </year>
Reference-contexts: We typically look for three qualities in such surface triangulation algorithms: 1. Speed 2. quality of triangulation 3. generality of solution <ref> [LR78] </ref> addresses all these issues. It triangulates a set of points and a bounding polygon. The bounding polygon is an important factor in surface triangulation because, typically surfaces are broken into smaller surfaces and each surface must be triangulated independently. <p> It triangulates a set of points and a bounding polygon. The bounding polygon is an important factor in surface triangulation because, typically surfaces are broken into smaller surfaces and each surface must be triangulated independently. It is required that the triangulations must match at each of these sub-surface boundaries. <ref> [LR78] </ref> computes such triangulation in O (n log n), and handles multiply connected regions. It divides the input data set into disjoint sections by splitting it along a line, and solves the problem on each of these sub-problems recursively.
Reference: [LR81] <author> J.M. Lane and R.F. Riesenfeld. </author> <title> Bounds on polynomials. </title> <journal> BIT, </journal> <volume> 2 </volume> <pages> 112-117, </pages> <year> 1981. </year>
Reference: [LSFB88] <author> E. Le Bras-Mehlman, M. Schmitt, O. D. Faugeras, and J. D. Boissonnat. </author> <title> How the Delaunay triangulation can be used for representing stereo data. </title> <booktitle> In Second International Conference on Computer Vision, </booktitle> <pages> pages 54-63, </pages> <address> New York, NY, 1988. </address> <publisher> IEEE. </publisher>
Reference-contexts: Triangulation are also used to compute magnetic fields on a given domain [CSS83]. Finite element analysis methods extensively use domain triangulation to make the problem tractable [Lis94, ZSZZ90]. Nearest neighbour computation can be speeded up using triangulation. Computer vision research benefits from the use triangulation to represent stereo data <ref> [LSFB88, FLB90] </ref>. Meteorologists routinely triangulate their domains to perform weather analysis. Mathematicians can efficiently perform the interpolation of multi-variate functions by triangulating the domains. Triangulations also appears in a number of algorithms in chaos theory to solve differential equations. 1.3 Organization Rest of this paper is organized as follows.
Reference: [Luk93] <institution> W.L. Luken. Tessellation of trimmed nurb surfaces. Computer science research report 19322(84059), IBM Research Division, </institution> <year> 1993. </year>
Reference: [Mau84] <author> A. Maus. </author> <title> Delaunay triangulation and the convex hull of n points in expected linear time. </title> <journal> BIT, </journal> <volume> 24 </volume> <pages> 151-163, </pages> <year> 1984. </year>
Reference-contexts: Discard all edges of V or (S 2 ) that lie to the left of , and all the edges of V or (S 1 ) that lie to the right of . The result is V or (S). <ref> [Mau84] </ref> presents a randomized algorithm which has an expected running time of O (n) if the input data set is uniformly distributed. It first partitions the input data set by drawing a grid with a small number of points per grid cell on average.
Reference: [Mea82] <author> D. Meagher. </author> <title> Geometric modeling using octree encoding. Comput. Graph. </title> <journal> Image Process., </journal> <volume> 19(2) </volume> <pages> 129-147, </pages> <year> 1982. </year>
Reference-contexts: belong to the class of implicit surfaces which can be thought of as the set of points that form roots to an equation f (x; y; z) = 0. [HW90, Blo88] are some of the excellent sources on triangulation of implicit surfaces. [Blo88] surrounds the implicit surface with an octree <ref> [Mea82] </ref>. The surface is sampled at the corners of this octree. The algorithm proceeds to adaptively refine the octree and finally triangulates each node of the octree. 5 Conclusion This survey is an attempt to present the current state of the art in surface triangulation.
Reference: [MF85] <author> D. Montuno and A. Fournier. </author> <title> A linear time triangulation for simple polygons. </title> <institution> Report ??, Dept. Comput. Sci., Univ. Toronto, Toronto, ON, </institution> <year> 1985. </year> <month> 18 </month>
Reference: [Mit93] <author> Scott A. Mitchell. </author> <title> Refining a triangulation of a planar straight-line graph to elimi-nate large angles. </title> <booktitle> In Proc. 34th Annu. IEEE Sympos. Found. Comput. Sci. (FOCS 93), </booktitle> <pages> pages 583-591, </pages> <year> 1993. </year>
Reference-contexts: Each uncovered region of the polygon has four sides now. The algorithm adds edges between centers of the discs and points of tangen cies. This subdivides the polygon into smaller polygons, which are triangulated independently. <ref> [Mit93] </ref> triangulates a general planar straight line graph in O (n 2 log n) time adding O (n 2 log n) steiner points with no angle larger than 7 8 . (There is a lower bound of O (n 2 ) triangles for any triangulation that guarantees angles smaller than 180
Reference: [MV93] <author> J.-M. Moreau and P. Volino. </author> <title> Constrained Delaunay triangulation revisited. </title> <booktitle> In Proc. 5th Canad. Conf. Comput. Geom., </booktitle> <pages> pages 340-345, </pages> <address> Waterloo, Canada, </address> <year> 1993. </year>
Reference-contexts: It uses the divide and conquer approach: Sort the input points S by the X coordinate. Divide the region (of points) into vertical strips such that there is exactly one vertex per strip (This requires unique X coordinates. <ref> [MV93] </ref> addresses that problem effectively.) Triangulation is found for each strip and adjacent strips merged. Repeat till only one strip remains. [CR90] reports an O (n log n) time incremental algorithm.
Reference: [MZ79] <author> G. K. Manacher and A. L. Zobrist. </author> <title> Neither the greedy nor the Delaunay triangulation of a planar point set approximates the optimal triangulation. </title> <journal> Inform. Process. Lett., </journal> <volume> 9 </volume> <pages> 31-34, </pages> <year> 1979. </year>
Reference-contexts: We can quantify the quality of a class of triangulations T by maxfW (S 0 )=OT (S)g; S 0 2 T : Neither Greedy triangulation (GT ) nor Delaunay triangulation (DT ) are optimal [Llo77]. They are not even close to optimal - <ref> [MZ79] </ref> showed that R (GT ) is (n 1 log n ). [Kir80] tightened the bound for R (DT ) to (n). Of course, this is also the lower bound since any reasonable triangulation will be no worse, as no triangulation can have &lt; 3n edges.
Reference: [Nei66] <author> B. O' Neill. </author> <title> Elementary Differential Geometry. </title> <publisher> Academic Press, </publisher> <year> 1966. </year>
Reference-contexts: Such triangulation is referred to the minimum weight triangulation. The weight of an edge, very often, is just the geodesic (shortest distance along the surface <ref> [Nei66] </ref>) distance (` 1 , ` 2 or ` 1 ) between the end points. Some other useful conditions are based on angles of the triangles, maximum weight of triangle edges etc. Also, only maximal triangulations are considered. <p> We do not lose much by concentrating only on triangulation in planar domains, since a surface can be broken into a small number of planar domains. Only a cursory description is presented here. For details see any text book, e.g. <ref> [Nei66] </ref>, on differential geometry. 2 1.1 A surface is 2D A surface M can be represented as map from a two dimensional disk D in R 2 to R 3 . The map should be 1-to-1 and continuous.
Reference: [O'R94] <author> J. O'Rourke. </author> <title> Computational Geometry in C. </title> <publisher> Cambridge University Press, </publisher> <year> 1994. </year>
Reference-contexts: edges on @P ) [Tou90] O (n log log n) [TV88] O (n log fln) (randomized) [CTV89] 1990 O (n log log n) [KKT90] O (n log fln) (bounded integer domain) [KKT90] O (n log fln) (deterministic) [Cha90a] 1991 O (n) [Cha91] Table 2: History of Polygon Triangulation (modified from <ref> [O'R94] </ref>) 3.1 Improvement in Algorithms [GJPT78] triangulates a simple polygon by decomposing it into monotone polygons and then triangulate each of them separately using the algorithm described earlier. This decomposition uses the regularization procedure introduced in [LP77].
Reference: [PH87] <author> D. A. Plaisted and J. Hong. </author> <title> A heuristic triangulation algorithm. </title> <journal> J. Algorithms, </journal> <volume> 8 </volume> <pages> 405-437, </pages> <year> 1987. </year>
Reference-contexts: If the length of this rectangle is L and the width is W , P r R (DT ) = O (log n W n e log n L ) 2 ) 1 (1 + t 2.5 Minimum Triangulation heuristics A number of other heuristics have been proposed in literature <ref> [PH87, Lin87] </ref>. [Lin87] presents an O (n 3 ) algorithm assures that the R-factor is O (log n) with probability greater than 1 cn ff , where c &gt; 0 and ff &gt; 1.
Reference: [PS81] <author> F. P. Preparata and K. J. Supowit. </author> <title> Testing a simple polygon for monotonicity. </title> <journal> Inform. Process. Lett., </journal> <volume> 12 </volume> <pages> 161-164, </pages> <year> 1981. </year>
Reference-contexts: As noted earlier, convex or monotone polygons can be triangulated in linear time. A star shaped polygon can also be triangulated in linear time using an ear cutting procedure. <ref> [PS81] </ref> shows how to test if a given simple polygon is monotonic in O (n) time. [TA82] show how to triangulate a class of polygons called edge-visible polygons in linear time.
Reference: [Raj91] <author> V. T. Rajan. </author> <title> Optimality of the Delaunay triangulation in R d . In Proc. </title> <booktitle> 7th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 357-363, </pages> <year> 1991. </year>
Reference-contexts: Note that an optimal triangulation of each of these polygons can be computed in O (n 3 ), but such triangulation does not give a globally optimal minimum length triangulation. Delaunay triangulation is again found to be of use. <ref> [Raj91] </ref> proved that the Delaunay trian gulation of a point set lies within a factor of 2 p 3 of the minimum length triangulation. 3 Polygon Triangulation A polygon is a sequence of points (specified in either clockwise or anticlockwise order), or equivalently a sequence of edges.
Reference: [Ram91] <author> P. Ramanan. </author> <title> A new lower bound technique and its application: tight lower bound for a polygon triangulation problem. </title> <booktitle> In Proc. 2nd ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 281-290, </pages> <year> 1991. </year>
Reference-contexts: bound is maintained through out the algorithm, making sure that the merges do no take too long. 3.2 Polygon triangulation with guarantees The O (n 3 ) algorithm mentioned in the beginning can be modified to compute the minimum weight triangulation that is not NP-complete for the polygon case [Kli80]. <ref> [Ram91] </ref> gives an O (n log n) algorithm for minimum weight triangulation if the the vertices have weights.
Reference: [RHD89] <author> A. Rockwood, K. Heaton, and T. Davis. </author> <title> Real-time rendering of trimmed surfaces. </title> <booktitle> In Proceedings of ACM Siggraph, </booktitle> <pages> pages 107-117, </pages> <year> 1989. </year>
Reference: [Roc87] <author> A. Rockwood. </author> <title> A generalized scanning technique for display of parametrically defined surface. </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pages 15-26, </pages> <month> August </month> <year> 1987. </year>
Reference-contexts: Sometime triangulation is inherent in the sampling process, e.g. Coarse triangulation is generated and multiple levels of sampling is done. Samples within a triangle need to be triangulated within themselves. New samples are introduced inside each of these new triangles, and so on until a stopping criterion is reached. <ref> [Roc87] </ref> samples the surface at a set of grid points. The grid size is determined at run time, and the triangulation changes as grid does. This algorithm handles trimmed surfaces also. A trimmed surface is a normal surface with some part trimmed out. <p> The grid size is determined at run time, and the triangulation changes as grid does. This algorithm handles trimmed surfaces also. A trimmed surface is a normal surface with some part trimmed out. Now, we not only have a set of points but boundary as well. <ref> [Roc87] </ref> does a monotonic decomposition of the boundary, and subdivides the surface such that each boundary is now monotonic. The problem can now 14 be solved using grid point triangulation except the tessellation on the boundary. To solve this problem [Roc87] introduces steiner points where the grid intersects the boundary. <p> only have a set of points but boundary as well. <ref> [Roc87] </ref> does a monotonic decomposition of the boundary, and subdivides the surface such that each boundary is now monotonic. The problem can now 14 be solved using grid point triangulation except the tessellation on the boundary. To solve this problem [Roc87] introduces steiner points where the grid intersects the boundary. If steiner points are not allowed, the problem can be as easily solved ([KM94]) by connecting the vertices of the bounding polygon to the closest grid points.
Reference: [SC88] <author> M. Shantz and S. Chang. </author> <title> Rendering trimmed nurbs with adaptive forward differencing. </title> <booktitle> In Proceedings of ACM Siggraph, </booktitle> <pages> pages 189-198, </pages> <year> 1988. </year>
Reference: [Sei91] <author> R. Seidel. </author> <title> A simple and fast incremental randomized algorithm for computing trapezoidal decompositions and for triangulating polygons. </title> <journal> Comput. Geom. Theory Appl., </journal> <volume> 1 </volume> <pages> 51-64, </pages> <year> 1991. </year>
Reference-contexts: The algorithm terminates in expected O (n log fln). It can also be used to check whether or not a given polygon is simple. [CCT92] reports a version that eliminates the use of Jordan sorting, and is similar in flavor to the result introduced next. <ref> [Sei91] </ref> is a randomized incremental algorithm, much simpler than [CTV89]. It starts by randomly ordering the edges of the input polygon. These edges are then added to the trapezoidal data structure one by one in that order, updating the trapezoidalization each time (see Fig. 3.1). <p> The trapezoids are decompose into monotone polygons in linear time these polygons are computed from the trapezoidal decomposition by checking whether the two vertices of the original polygon lie on the same side. <ref> [Sei91] </ref> proves that if each permutation of s 1 ; : : :; s n is equally likely then trapezoid formation takes O (n log fl n) expected time. The linear time algorithm of [Cha91] also constructs the horizontal visibility map of the polygon.
Reference: [SH75] <author> M. Shamos and D. Hoey. </author> <title> Closest pair problems. </title> <booktitle> In Proc. 16th Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 151-162, </pages> <year> 1975. </year>
Reference-contexts: Delaunay triangulation can be computed by drawing an edge between two input points if their Voronoi faces are adjacent. Delaunay triangulation of a point set can be found in O (n log n) <ref> [SH75] </ref> (this is also the lower bound on the problem). <p> The Delaunay triangulation of a set of points, for example, maximize the minimum angle of any triangle, thus assuring that triangles are not long and skinny in general. <ref> [SH75] </ref> erroneously claimed that Delaunay triangulation was the minimum weight triangula tion. [BEY91] proved a variety of properties about Delaunay triangulation. It assumes Poisson distribution on the input point set. 6 Let S be a [0; n] fi [0; n] square.
Reference: [Sha78] <author> M. Shamos. </author> <title> Computational Geometry. </title> <type> PhD thesis, </type> <institution> Dept. Of Comput. Sci., Yale Univ., </institution> <year> 1978. </year>
Reference-contexts: The length of each edge is less than the diameter of S, which in turn is less than half the length of Convex Hull of S <ref> [Sha78] </ref>. And since the edges of the hull lie in the optimal triangulation the ratio is not more than O (n).
Reference: [SL87] <author> M. Shantz and S. Lien. </author> <title> Shading bicubic patches. </title> <booktitle> In Proceedings of ACM Siggraph, </booktitle> <pages> pages 189-196, </pages> <year> 1987. </year>
Reference: [TA82] <author> G. T. Toussaint and D. Avis. </author> <title> On a convex hull algorithm for polygons and its application to triangulation problems. </title> <journal> Pattern Recogn., </journal> <volume> 15 </volume> <pages> 23-29, </pages> <year> 1982. </year>
Reference-contexts: As noted earlier, convex or monotone polygons can be triangulated in linear time. A star shaped polygon can also be triangulated in linear time using an ear cutting procedure. [PS81] shows how to test if a given simple polygon is monotonic in O (n) time. <ref> [TA82] </ref> show how to triangulate a class of polygons called edge-visible polygons in linear time. An edge visible polygon contains at least one edge such that every point inside the polygon is visible from some point on that edge.
Reference: [Tou83] <author> G. T. Toussaint. </author> <title> A new linear algorithm for triangulating monotone polygons. </title> <type> Technical Report SOCS 83.9, </type> <institution> McGill University, </institution> <year> 1983. </year>
Reference: [Tou90] <author> G. T. Toussaint. </author> <title> An output-sensitive polygon triangulation algorithm. </title> <booktitle> In Proc. 8th Internat. Conf. on Comput. Graphics, </booktitle> <pages> pages 443-446, </pages> <year> 1990. </year>
Reference-contexts: Complexity Reference 1911 O (n 2 ) [Len11] 1978 O (n log n) [GJPT78] 1983 O (n log r) (r = # concavities) [HM83] O (n log s) (s = sinousity) [CI84] 1988 O (n + nt 0 ) (t 0 = # triangles with no edges on @P ) <ref> [Tou90] </ref> O (n log log n) [TV88] O (n log fln) (randomized) [CTV89] 1990 O (n log log n) [KKT90] O (n log fln) (bounded integer domain) [KKT90] O (n log fln) (deterministic) [Cha90a] 1991 O (n) [Cha91] Table 2: History of Polygon Triangulation (modified from [O'R94]) 3.1 Improvement in Algorithms
Reference: [Tur92] <author> G. Turk. </author> <title> Re-tiling polygonal surfaces. </title> <booktitle> In ACM SIGGRAPH, </booktitle> <pages> pages 55-64, </pages> <year> 1992. </year>
Reference-contexts: They report that this works quite well in practice. Finally this algorithm performs a post processing step flipping diagonals just as described earlier. Many times a surface is decomposed into many different approximate triangulations multi-resolution modeling <ref> [Tur92, HDD + 93, Var94] </ref> is one such example. It becomes imperative to ensure, then, that a triangulations does not alter the topology of the surface. [DC91] gives criteria for testing if two triangulations are of the same homology type.
Reference: [TV86] <author> R. E. Tarjan and C. J. Van Wyk. </author> <title> A linear-time algorithm for triangulating simple polygons. </title> <booktitle> In Proc. 18th Annu. ACM Sympos. Theory Comput., </booktitle> <pages> pages 380-388, </pages> <year> 1986. </year> <title> Erratum in SIGACT News 18:4 (1987), </title> <type> 63. </type>
Reference: [TV88] <author> R. E. Tarjan and C. J. Van Wyk. </author> <title> An O(n log log n)-time algorithm for triangulating a simple polygon. </title> <journal> SIAM J. Comput., </journal> <volume> 17 </volume> <pages> 143-178, </pages> <year> 1988. </year> <month> 19 </month>
Reference-contexts: Still the gap between the known lower bound, (n), and upper bounds kept challenging computational geometers for long. Finding a linear time algorithm remained open 8 problem; [TV86]'s algorithm was mistakenly thought to be linear for some time. In 1988 <ref> [TV88] </ref> brought it down to O (n log log n), showing that simple polygon triangle was easier than sorting. [CTV89] and [Cha90a] improved it to O (n log fln) subsequently. Finally [Cha91] showed that polygon triangulation can indeed be performed in asymptotically linear time. <p> ) [Len11] 1978 O (n log n) [GJPT78] 1983 O (n log r) (r = # concavities) [HM83] O (n log s) (s = sinousity) [CI84] 1988 O (n + nt 0 ) (t 0 = # triangles with no edges on @P ) [Tou90] O (n log log n) <ref> [TV88] </ref> O (n log fln) (randomized) [CTV89] 1990 O (n log log n) [KKT90] O (n log fln) (bounded integer domain) [KKT90] O (n log fln) (deterministic) [Cha90a] 1991 O (n) [Cha91] Table 2: History of Polygon Triangulation (modified from [O'R94]) 3.1 Improvement in Algorithms [GJPT78] triangulates a simple polygon by <p> Trapezoids that are determined by the two points (of the polygon) that are neither adjacent on the polygon nor on the trapezoid, can be triangulated by joining those two points. When all such trapezoids are exhausted, only monotone polygons remain to be triangulated. <ref> [TV88] </ref> used trapezoidalization to show that triangulation is simpler than sorting. The complexity of his algorithm is O (n log log n). This algorithms uses complex data structures and complicated steps, and is not easy to implement. Though practically of modest consequence, it was a major theoretical jump. <p> Jordan sorting problem is to sort the intersection points of @P (the boundary of P ) and L by X coordinate, given as input only a list of the intersections in the order in which they occur clockwise around @P . (the list of vertices of P are not given.) <ref> [TV88] </ref> starts with a vertex v of P that is neither the highest or the lowest vertex. (If there are no such vertices, the visibility computation is done.) It then determines the intersection points of @P with the horizontal line L through v. <p> In addition, this algorithm can be modified to run in (n log fln) if the coordinates of the points of the polygon are integers bounded by a fixed polynomial in n 1 . The basic idea is the same as <ref> [TV88] </ref>, but the triangle splitting is achieved without any Jordan sorting or other complicated data structures of [TV88]. [KKT90] is based on the construction of the visibility partition of a polygonal chain P 0 from the partitions of some prefix chain P 1 of P 0 and the rest, P 0 <p> The basic idea is the same as <ref> [TV88] </ref>, but the triangle splitting is achieved without any Jordan sorting or other complicated data structures of [TV88]. [KKT90] is based on the construction of the visibility partition of a polygonal chain P 0 from the partitions of some prefix chain P 1 of P 0 and the rest, P 0 n P 1 .
Reference: [Var94] <author> A. Varshney. </author> <title> Hierarchical Geometric Approximations. </title> <type> PhD thesis, </type> <institution> University of North Carolina, </institution> <year> 1994. </year>
Reference-contexts: They report that this works quite well in practice. Finally this algorithm performs a post processing step flipping diagonals just as described earlier. Many times a surface is decomposed into many different approximate triangulations multi-resolution modeling <ref> [Tur92, HDD + 93, Var94] </ref> is one such example. It becomes imperative to ensure, then, that a triangulations does not alter the topology of the surface. [DC91] gives criteria for testing if two triangulations are of the same homology type.
Reference: [Yvi89] <author> M. Yvinec. </author> <title> Triangulation in 2D and 3D space. </title> <booktitle> In Geometry and Robotics Workshop Proceedings, </booktitle> <address> Toulouse France, </address> <month> 26-28 May </month> <year> 1988, </year> <booktitle> volume 391 of Lecture Notes in Computer Science, </booktitle> <pages> pages 275-291, </pages> <address> Berlin, 1989. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Many applications need to find triangulation in 3D, i.e. tetrahedral-ization of a subset of (R 3 ), but this survey does not address the issues there (Refer <ref> [Yvi89] </ref>). Though I will note that many of the results presented here extend to 3D. Robotics people use triangulation to plan the motion of a robot. A similar application lies in visibility computation, which, in turn, is used extensively in computer graphics to perform hidden surface elimination.
Reference: [ZSZZ90] <author> Jian-Ming Zhou, Ke-Ran Shao, Ke-Ding Zhou, and Qiong-Hua Zhan. </author> <title> Computing constrained triangulation and Delaunay triangulation: A new algorithm. </title> <journal> IEEE Trans. Magn., </journal> <volume> 26(2) </volume> <pages> 694-697, </pages> <month> March </month> <year> 1990. </year> <month> 20 </month>
Reference-contexts: Triangulation is also useful in rendering images, since current graphics hardwares can draw triangles rather efficiently. Triangulation are also used to compute magnetic fields on a given domain [CSS83]. Finite element analysis methods extensively use domain triangulation to make the problem tractable <ref> [Lis94, ZSZZ90] </ref>. Nearest neighbour computation can be speeded up using triangulation. Computer vision research benefits from the use triangulation to represent stereo data [LSFB88, FLB90]. Meteorologists routinely triangulate their domains to perform weather analysis. Mathematicians can efficiently perform the interpolation of multi-variate functions by triangulating the domains.
References-found: 96

