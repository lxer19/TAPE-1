URL: http://charm.cs.uiuc.edu/papers/NamdLCPC97.ps
Refering-URL: http://charm.cs.uiuc.edu/papers/NamdLCPC97.html
Root-URL: http://www.cs.uiuc.edu
Email: fkale,milind,brunner,nealk,jim,arig@ks.uiuc.edu  
Title: NAMD: A Case Study in Multilingual Parallel Programming  
Author: L. V. Kale, M. Bhandarkar, R. Brunner, N. Krawetz, J. Phillips, and A. Shinozaki 
Address: Urbana Illinois 61801,  
Affiliation: Dept. of Computer Science, and Theoretical Biophysics Group, Beckman Institute, University of Illinois,  
Abstract: Parallel languages are tools for constructing efficient application programs, while reducing the required labor. In this light, using the most appropriate tool for each component of a complex system seems natural, resulting in multi-paradigm multilingual programming. The Converse system developed at Illinois addresses the issues involved in supporting multilingual applications. This paper describes the development of a large parallel application in Computational Biophysics from the point of view of multilingual programming. NAMD, a molecular dynamics program, is implemented using three different "paradigms": Parallel message-driven objects, Message-Passing, and Multithreading. The issues faced in implementing such a system, and the advantages of multilingual approach are discussed. NAMD is already operational on many parallel machines. Some preliminary performance results are presented and the lessons learned from this experience are discussed.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Milind Bhandarkar and L. V. Kale. </author> <title> MICE: A Prototype MPI Implementation in Converse Environment. </title> <booktitle> In Proceedings of the second MPI Developers Conference, </booktitle> <pages> pages 26-31, </pages> <address> South Bend, Indiana, </address> <month> July </month> <year> 1996. </year>
Reference-contexts: A number of languages based on different paradigms have been implemented on top of Converse. Charm and Charm++, based on message-driven objects, have been retargeted on top of Converse. Prototype implementations of SPMD languages such as SM, PVM and MPI <ref> [1] </ref> have been done using Converse framework. A data-parallel language DP [11] (subset of HPF) and a data-parallel object-oriented language pC++ [2] have been implemented on top of Converse. A parallel simulation language, Import [12], and a functional language Agents [15] are under development. <p> It demonstrated the ability of Converse to support blocking-receive communication without affecting concurrent message-driven computations. It was later used as a core for our prototype implementation of MPI <ref> [1] </ref>. SM utilizes the message manager component of Converse to support message-tags and enforce message order guaranteed by most SPMD languages. It is a minimal SPMD language and provides only three calls: send, receive, and probe.
Reference: 2. <author> F. Bodin, P. Beckman, D. Gannon, S. Narayana, and S. Yang. </author> <title> Distributed pC++: Basic Ideas for an Object Parallel Language. </title> <journal> Scientific Programming, </journal> <volume> 2(3), </volume> <year> 1993. </year>
Reference-contexts: Charm and Charm++, based on message-driven objects, have been retargeted on top of Converse. Prototype implementations of SPMD languages such as SM, PVM and MPI [1] have been done using Converse framework. A data-parallel language DP [11] (subset of HPF) and a data-parallel object-oriented language pC++ <ref> [2] </ref> have been implemented on top of Converse. A parallel simulation language, Import [12], and a functional language Agents [15] are under development. Converse has also been used to enrich scripting languages such as Perl to support message-driven objects.
Reference: 3. <author> N. Carriero and D. Gelernter. </author> <title> Linda in Context. </title> <journal> Communications of the ACM, </journal> <volume> 32(4), </volume> <month> April </month> <year> 1989. </year>
Reference-contexts: However, many parallel languages that have evolved are library-based. Yet, they represent different parallel programming paradigms, and for the sake of brevity, are called "languages" in this paper. This is also consistent with the usage in the literature. For example, "Linda" <ref> [3] </ref> consists of 4 major calls in a runtime library. A Linda program is written in a conventional sequential language such as C or Fortran, and includes calls to the Linda runtime.
Reference: 4. <author> A. Gursoy. </author> <title> Simplified Expression of Message Driven Programs and Quantification of Their Impact on Performance. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <month> June </month> <year> 1994. </year> <note> Also, Technical Report UIUCDCS-R-94-1852. </note>
Reference-contexts: A number of researchers have worked on more efficient N-body solvers for both chemical and astronomical simulations. For NAMD, we chose an efficient implementation of the fast multipole algorithm in DPMTA [14] library developed by researchers at Duke University. NAMD was originally designed as a message-driven program <ref> [4] </ref>. The complex dependencies between each patch and its 26 neighbors made the overlapping of communication and computation provided by a message-driven design attractive. Charm++ [9] was a language well-suited to this design, and NAMD was written from the outset as a Charm++ program.
Reference: 5. <author> William F. Humphrey, Andrew Dalke, and Klaus Schulten. </author> <title> VMD Visual molecular dynamics. </title> <journal> Journal of Molecular Graphics, </journal> <volume> 14(1) </volume> <pages> 33-38, </pages> <year> 1996. </year>
Reference-contexts: Meanwhile, as the normal patch cycle proceeds, reductions are being done to collect energy values, positions, and/or velocities for output and for certain integration methods. VMD <ref> [5] </ref>, the visualization component of MDSCOPE uses this data to render the molecule in every timestep. The main patch loop may or may not need to wait for the results of these reductions after each step, depending on the parameters of the simulation.
Reference: 6. <author> L. V. Kale, Milind Bhandarkar, Narain Jagathesan, Sanjeev Krishnan, and Joshua Yelon. </author> <title> Converse: An Interoperable Framework for Parallel Programming. </title> <booktitle> In Proceedings of the 10th International Parallel Processing Symposium, </booktitle> <pages> pages 212-217, </pages> <address> Honolulu, Hawaii, </address> <month> April </month> <year> 1996. </year>
Reference-contexts: From the parallel language designer's point of view, a level playing field is now created, because the initial hurdle of making the entire programming team to switch to a new programming language is removed. We have been developing such a multilingual framework called Converse <ref> [6] </ref> for the last few years. Converse already supports several parallel languages, such as Charm++, PVM, MPI etc. The first large multilingual application using the Converse framework, a parallel molecular dynamics program named NAMD, was recently completed.
Reference: 7. <author> L. V. Kale, Milind Bhandarkar, and Terry Wilmarth. </author> <title> Design and implementation of parallel java with a global object space. </title> <type> Technical report, </type> <institution> Parallel Programming Laboratory, Department of Computer Science, University of Illinois at Urbana-Champaign, </institution> <month> April </month> <year> 1997. </year> <note> Submitted for publication. </note>
Reference-contexts: A parallel simulation language, Import [12], and a functional language Agents [15] are under development. Converse has also been used to enrich scripting languages such as Perl to support message-driven objects. Message-driven extensions to Java <ref> [7] </ref> are also implemented. 4 Languages and Paradigms used In this section, we will describe the four languages that were used in implementing NAMD: the Charm++ parallel object language, PVM implemented under Converse, a simple messaging language (SM), and Converse threads. 4.1 Charm++ Charm++[9] is a parallel object-oriented programming language, based
Reference: 8. <author> L.V. Kale. </author> <title> The Chare Kernel parallel programming language and system. </title> <booktitle> In Proceedings of the International Conference on Parallel Processing, </booktitle> <month> August </month> <year> 1990. </year>
Reference-contexts: will describe the four languages that were used in implementing NAMD: the Charm++ parallel object language, PVM implemented under Converse, a simple messaging language (SM), and Converse threads. 4.1 Charm++ Charm++[9] is a parallel object-oriented programming language, based on C++, that follows the message-driven execution model of its predecessor, Charm <ref> [8] </ref>. Charm++ has been ported to a variety of distributed and shared memory parallel computers including Workstation Networks. Programs written in Charm++ are source-compatible across all the architectures. Charm++ modules consist of medium-grained objects called chare objects and replicated branch-office objects.
Reference: 9. <author> L.V. Kale and S. Krishnan. Charm++: </author> <title> A portable concurrent object oriented system based on C++. </title> <booktitle> In Proceedings of the Conference on Object Oriented Programming Systems, Languages and Applications, </booktitle> <month> September </month> <year> 1993. </year>
Reference-contexts: NAMD was originally designed as a message-driven program [4]. The complex dependencies between each patch and its 26 neighbors made the overlapping of communication and computation provided by a message-driven design attractive. Charm++ <ref> [9] </ref> was a language well-suited to this design, and NAMD was written from the outset as a Charm++ program. Early in development, it was decided that NAMD would use the DPMTA library when a simulation demanded long-range electrostatic computation.
Reference: 10. <author> L.V. Kale and Amitabh Sinha. </author> <title> Projections : A scalable performance tool. In Parallel Systems Fair, </title> <booktitle> International Parallel Processing Sympos ium, </booktitle> <pages> pages 108-114, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: The resulting implementation had a number of problems. First, the PVM based implementation could not take advantage of the Charm++ based performance analysis tools developed over the last several years <ref> [10] </ref>. Secondly, it was very difficult to modify, since any features requiring communication require careful considerations of the implicit dependencies in the message loops.
Reference: 11. <author> E. Kornkven and L. V. Kale. </author> <title> Efficient implementation of high performance fortran via adaptive scheduling an overview. </title> <booktitle> In Proceedings of the International Workshop on Parallel Processing, </booktitle> <address> Bangalore, India, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: Charm and Charm++, based on message-driven objects, have been retargeted on top of Converse. Prototype implementations of SPMD languages such as SM, PVM and MPI [1] have been done using Converse framework. A data-parallel language DP <ref> [11] </ref> (subset of HPF) and a data-parallel object-oriented language pC++ [2] have been implemented on top of Converse. A parallel simulation language, Import [12], and a functional language Agents [15] are under development. Converse has also been used to enrich scripting languages such as Perl to support message-driven objects.
Reference: 12. <author> Vance P. Morrison. </author> <title> Import/dome language reference manual. </title> <type> Technical report, US. </type> <institution> Army Corps of Engineering Research Laboratory, ASSET group., </institution> <year> 1995. </year>
Reference-contexts: Prototype implementations of SPMD languages such as SM, PVM and MPI [1] have been done using Converse framework. A data-parallel language DP [11] (subset of HPF) and a data-parallel object-oriented language pC++ [2] have been implemented on top of Converse. A parallel simulation language, Import <ref> [12] </ref>, and a functional language Agents [15] are under development. Converse has also been used to enrich scripting languages such as Perl to support message-driven objects.
Reference: 13. <author> Mark Nelson, William Humphrey, Attila Gursoy, Andrew Dalke, Laxmikant Kale, Robert D. Skeel, and Klaus Schulten. </author> <title> NAMD| A parallel, object-oriented molecular dynamics program. </title> <editor> J. </editor> <booktitle> Supercomputing App., </booktitle> <year> 1996. </year>
Reference-contexts: The languages used for NAMD implementation are described in section 4. Section 5 describes the design of key NAMD components in detail and illustrates the use of multilingual modules. Preliminary performance results are given in section 6. 2 Previous Work: PVM-based NAMD NAMD is a major component of MDSCOPE <ref> [13] </ref>, being developed as a part of the interdisciplinary project on biomolecular modeling led by Prof. K. Schulten, Prof. L.V. Kale, and Prof. R.D. Skeel. NAMD models the behavior of a molecule by simulating the motions of the constituent atoms in a small region of its environment.
Reference: 14. <author> W. Rankin and J. </author> <title> Board. A portable distributed implementation of the parallel multipole tree algorithm. </title> <booktitle> IEEE Symposium on High Performance Distributed Computing, </booktitle> <year> 1995. </year> <note> [Duke University Technical Report 95-002]. </note>
Reference-contexts: A number of researchers have worked on more efficient N-body solvers for both chemical and astronomical simulations. For NAMD, we chose an efficient implementation of the fast multipole algorithm in DPMTA <ref> [14] </ref> library developed by researchers at Duke University. NAMD was originally designed as a message-driven program [4]. The complex dependencies between each patch and its 26 neighbors made the overlapping of communication and computation provided by a message-driven design attractive.
Reference: 15. <author> Joshua Yelon and L. V. Kale. </author> <title> Agents: An undistorted representation of problem structure. </title> <booktitle> In Lecture Notes in Computer Science, </booktitle> <volume> volume 1033, </volume> <pages> pages 551-565. </pages> <publisher> Springer-Verlag, </publisher> <month> August </month> <year> 1995. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: A data-parallel language DP [11] (subset of HPF) and a data-parallel object-oriented language pC++ [2] have been implemented on top of Converse. A parallel simulation language, Import [12], and a functional language Agents <ref> [15] </ref> are under development. Converse has also been used to enrich scripting languages such as Perl to support message-driven objects.
References-found: 15

