URL: http://www.cs.utexas.edu/users/yau/papers/proposal.ps
Refering-URL: http://www.cs.utexas.edu/users/yau/research.html
Root-URL: http://www.cs.utexas.edu
Email: (yau@cs.utexas.edu)  
Title: Operating System Support for Distributed Multimedia  
Author: David K.Y. Yau Supervising professor: Simon S. Lam 
Degree: (Dissertation Proposal)  
Date: June 18, 1996  
Address: Austin, Texas 78712  
Affiliation: Department of Computer Sciences The University of Texas at Austin  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> David P. Anderson. </author> <title> Metascheduling for continuous media. </title> <journal> ACM Trans. Computer Systems, </journal> <volume> 11(3) </volume> <pages> 226-252, </pages> <month> August </month> <year> 1993. </year>
Reference: [2] <author> Brian N. Bershad, Stefan Savage, Przemyslaw Pardyak, Emin Gun Sirer, Marc E. Fiuczynski, David Becjer, Craig Chamers, and Susan Eggers. </author> <title> Extensibility, safety and performance in the SPIN operating system. </title> <booktitle> In Proc. 15th SOSP, </booktitle> <month> November </month> <year> 1995. </year> <month> 16 </month>
Reference: [3] <author> A.D. Birrell and B.J. Nelson. </author> <title> Implementing remote procedure calls. </title> <journal> ACM Trans. Computer Systems, </journal> <volume> 2(1) </volume> <pages> 39-59, </pages> <month> February </month> <year> 1984. </year>
Reference-contexts: While they can be rich in generic protocol functionalities, they are oblivious to the specific needs of applications. In particular, they treat application payload as an uninter-preted byte stream (TCP) or packet stream (UDP). RPC <ref> [3] </ref> addresses some of the problems by providing stub procedures to encode/decode data types that can be user defined. RPC also emulates local procedure invocation by, for example, allowing remote procedures to be registered by servers and hence located by clients, and automatically matching RPC replies to RPC requests.
Reference: [4] <author> Flavio Bonomi and Kerry W. Fendick. </author> <title> The rate-based flow control framework for the available bit rate ATM service. </title> <journal> IEEE Network, </journal> <month> March/April </month> <year> 1995. </year>
Reference-contexts: Furthermore, the transport of media data would require real-time QoS (such as delay and throughput) guarantees to ensure smooth playback. I therefore expect that future multimedia applications will negotiate reserved-rate connections with networks | such as those considered in <ref> [4] </ref> and [24]. To obtain QoS guarantees, the packet arrivals to a reserved-rate connection are required to satisfy certain flow specifications. Aside from being isochronous, distributed multimedia applications require bulk data transfer.
Reference: [5] <author> CCITT White Book. </author> <title> Recommendation H.261: Video Codec for Audiovisual Services at p fi 64 kbits/s, </title> <year> 1990. </year>
Reference-contexts: 1 Introduction Recent development of digital compression standards <ref> [5, 12, 34] </ref> and the low cost of video peripheral hardware have enabled the deployment of digital video applications in general purpose workstations and personal computers.
Reference: [6] <author> Peter Druschel. </author> <title> Operating system support for high-speed networking. </title> <type> Technical Report 94-24 (Ph.D. Dissertation), </type> <institution> The University of Arizona, Tucson, Arizona, </institution> <month> August </month> <year> 1994. </year>
Reference: [7] <author> Peter Druschel and Larry L. Peterson. Fbufs: </author> <title> A high-bandwidth cross-domain transfer facility. </title> <booktitle> In Proc. 14th SOSP, </booktitle> <pages> pages 189-202, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: The second reason is cost, since a network controller that provides sophisticated flow control will likely be more complicated and expensive. I/O efficient buffers My architecture distinguishes between three types of buffers for reduced memory-to-memory data copies (as motivated in <ref> [7] </ref>). User buffers are only mapped to a user domain. Kernel buffers are co-mapped to user and kernel. Kernel buffers can be used by a user process to efficiently communicate with the kernel (i.e. without the overhead of intermediary memory-to-memory data copies).
Reference: [8] <author> Peter Druschel, Larry L. Peterson, and Bruce S. Davie. </author> <title> Experiences with a high-speed network adaptor: A software perspective. </title> <booktitle> In Proc. ACM SIGCOMM '94, </booktitle> <pages> pages 2-13, </pages> <month> September </month> <year> 1994. </year>
Reference: [9] <author> Aled Edwards and Steve Muir. </author> <title> Experiences implementing a high performance TCP in user space. </title> <booktitle> In Proc. SIGCOMM '95, </booktitle> <pages> pages 196-205, </pages> <year> 1995. </year>
Reference-contexts: These applications demonstrate the potential of multimedia services over the Internet. Since most of these applications are delay sensitive and can tolerate some loss, they usually run on UDP/IP rather than TCP/IP. My OS architecture assumes a user level protocol implementation <ref> [9, 29] </ref>. Work is under way to implement user level libraries that provide applications with UDP/IP access.
Reference: [10] <author> Dawson Engler, M. Frans Kaashoek, and James O'Toole Jr. Exokernel: </author> <title> An operating system architecture for application-level resource management. </title> <booktitle> In Proc. 15th SOSP, </booktitle> <month> November </month> <year> 1995. </year>
Reference: [11] <author> Ron Frederick. </author> <title> Network video (nv). </title> <institution> Xerox Palo Alto Research Center, </institution> <note> software on-line at ftp://ftp.parc.xerox.com/net-research. </note>
Reference-contexts: Second, I expect this exercise to yield valuable experience in structuring and implementing various application and communication services in a novel way. 3.1 User level protocol implementation There is a considerable body of tele-conferencing applications on the Mbone <ref> [11, 14, 15] </ref>. These applications demonstrate the potential of multimedia services over the Internet. Since most of these applications are delay sensitive and can tolerate some loss, they usually run on UDP/IP rather than TCP/IP. My OS architecture assumes a user level protocol implementation [9, 29].
Reference: [12] <author> Didier Le Gall. </author> <title> MPEG: A video compression standard for multimedia applications. </title> <journal> CACM, </journal> <volume> 34(4) </volume> <pages> 47-58, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Recent development of digital compression standards <ref> [5, 12, 34] </ref> and the low cost of video peripheral hardware have enabled the deployment of digital video applications in general purpose workstations and personal computers.
Reference: [13] <author> S. Jamaloddin Golestani. </author> <title> Congestion-free communication in high-speed packet networks. </title> <journal> IEEE Trans. Communications, </journal> <volume> 39(12) </volume> <pages> 1802-1812, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: Future networks in the evolving National Information Infrastructure (such as ATM networks) are expected to provide resource reservations which, together with suitable packet scheduling techniques, can transport media packets with QoS (such as throughput and delay) guarantees <ref> [13, 18, 23, 38] </ref>. To obtain truly superior application-level performance for end users, however, the network-level guarantees must be extended to the endpoints of a communication path.
Reference: [14] <author> Van Jacobson. </author> <note> LBL whiteboard. </note> <institution> Lawrence Berkeley Lab, </institution> <note> software on-line at ftp://ftp.ee.lbl.gov/conferencing/wb. </note>
Reference-contexts: Second, I expect this exercise to yield valuable experience in structuring and implementing various application and communication services in a novel way. 3.1 User level protocol implementation There is a considerable body of tele-conferencing applications on the Mbone <ref> [11, 14, 15] </ref>. These applications demonstrate the potential of multimedia services over the Internet. Since most of these applications are delay sensitive and can tolerate some loss, they usually run on UDP/IP rather than TCP/IP. My OS architecture assumes a user level protocol implementation [9, 29].
Reference: [15] <author> Van Jacobson. </author> <title> Visual audio tool. </title> <institution> Lawrence Berkeley Lab, </institution> <note> software on-line at ftp://ftp.ee.lbl.gov/conferencing/vat. </note>
Reference-contexts: Second, I expect this exercise to yield valuable experience in structuring and implementing various application and communication services in a novel way. 3.1 User level protocol implementation There is a considerable body of tele-conferencing applications on the Mbone <ref> [11, 14, 15] </ref>. These applications demonstrate the potential of multimedia services over the Internet. Since most of these applications are delay sensitive and can tolerate some loss, they usually run on UDP/IP rather than TCP/IP. My OS architecture assumes a user level protocol implementation [9, 29].
Reference: [16] <author> Kevin Jeffay and David Bennett. </author> <title> A rate-based execution abstraction for multimedia computing. </title> <booktitle> In Proc. 5th International Worshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <address> Durham, NH, </address> <month> April </month> <year> 1995. </year> <month> 17 </month>
Reference: [17] <author> Simon S. Lam, Simon Chow, and David K.Y. Yau. </author> <title> An algorithm for lossless smoothing of MPEG video. </title> <booktitle> In Proc. ACM SIGCOMM '94, </booktitle> <month> August </month> <year> 1994. </year> <note> Also to appear in IEEE/ACM Transactions on Networking. </note>
Reference-contexts: Kernel threads can also be used for rate-based flow control. A kernel thread has been used to efficiently implement the lossless smoothing algorithm in <ref> [17] </ref>. It also allows multiple user processes to send packets to a shared reserved rate network connection at the intended bit rates. [37] presents an algorithm called KT RC that achieves this service objective.
Reference: [18] <author> Simon S. Lam and Geoffrey G. Xie. </author> <title> Burst scheduling: Algorithm and architecture for switching packet video. </title> <booktitle> In Proc INFOCOM '95, </booktitle> <month> March </month> <year> 1995. </year>
Reference-contexts: Future networks in the evolving National Information Infrastructure (such as ATM networks) are expected to provide resource reservations which, together with suitable packet scheduling techniques, can transport media packets with QoS (such as throughput and delay) guarantees <ref> [13, 18, 23, 38] </ref>. To obtain truly superior application-level performance for end users, however, the network-level guarantees must be extended to the endpoints of a communication path.
Reference: [19] <author> C.L. Liu and J.W. Layland. </author> <title> Scheduling algorithms for multiprogramming in a hard real time environment. </title> <journal> JACM, </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <year> 1973. </year>
Reference-contexts: The deadline of an event, which is the time by which processing of the event must complete, is assumed to be the beginning of the next period. For RM scheduling, Liu and Layland <ref> [19] </ref> show that if i C i =P i n (2 1=n 1), then each process gets the following progress guarantee: For all i, process i will be scheduled to run for C i within period P i .
Reference: [20] <author> Chris Maeda and Brian N. Bershad. </author> <title> Protocol service decomposition for high-performance networking. </title> <booktitle> In Proc. 14th SOSP, </booktitle> <pages> pages 244-255, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: In particular, my user level implementation will support the socket API. Important protocol functions such as IP routing will be provided. My current design recognizes that certain protocol functions like connection establishment and routing decisions require access to global connection state <ref> [20] </ref>. The functions having global impact will be implemented in a dedicated network server. When a connection endpoint is first created, it is managed by the network server. Network applications accessing the connection endpoint communicate with the network server through the Unix IPC mechanism of message queues.
Reference: [21] <author> Steven McCanne and Van Jacobson. </author> <title> vic: A flexible framework for packet video. </title> <booktitle> In Proc. ACM Multimedia '95, </booktitle> <year> 1995. </year>
Reference-contexts: Such control is typically achieved by various media scaling techniques. To illustrate, consider a video-conferencing tool called vic developed at Lawrence Berkeley Laboratory <ref> [21] </ref>.
Reference: [22] <author> Jason Nieh and Monica S. Lam. </author> <title> Integrated processor scheduling for multimedia. </title> <booktitle> In Proc. 5th International Worshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <pages> pages 215-218, </pages> <address> Durham, NH, </address> <month> April </month> <year> 1995. </year>
Reference: [23] <author> A.K. Parekh and R.G. Gallager. </author> <title> A generalized processor sharing approach to flow control in integrated services networks: The single-node case. </title> <journal> IEEE/ACM Trans. Networking, </journal> <volume> 1(3) </volume> <pages> 344-357, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Future networks in the evolving National Information Infrastructure (such as ATM networks) are expected to provide resource reservations which, together with suitable packet scheduling techniques, can transport media packets with QoS (such as throughput and delay) guarantees <ref> [13, 18, 23, 38] </ref>. To obtain truly superior application-level performance for end users, however, the network-level guarantees must be extended to the endpoints of a communication path.
Reference: [24] <author> C. Partridge. </author> <title> A proposed flow specification. Internet RFC 1363, </title> <month> September </month> <year> 1992. </year>
Reference-contexts: Furthermore, the transport of media data would require real-time QoS (such as delay and throughput) guarantees to ensure smooth playback. I therefore expect that future multimedia applications will negotiate reserved-rate connections with networks | such as those considered in [4] and <ref> [24] </ref>. To obtain QoS guarantees, the packet arrivals to a reserved-rate connection are required to satisfy certain flow specifications. Aside from being isochronous, distributed multimedia applications require bulk data transfer.
Reference: [25] <author> J. Postel. </author> <title> Transmission Control Protocol. </title> <type> RFC 793, </type> <institution> Network Information Center, </institution> <month> September </month> <year> 1981. </year>
Reference: [26] <author> D.M. Ritchie. </author> <title> A stream input-output system. </title> <journal> AT&T Bell Laboratories Technical Journal, </journal> <volume> 63(8) </volume> <pages> 1897-1910, </pages> <month> October </month> <year> 1984. </year>
Reference: [27] <author> Jonathan M. Smith, C. Brendan, and S. Traw. </author> <title> Giving applications access to Gb/s networking. </title> <journal> IEEE Network, </journal> <pages> pages 44-52, </pages> <month> July </month> <year> 1993. </year>
Reference: [28] <author> Ralf Steinmetz. </author> <title> Multimedia operating systems. </title> <journal> IEEE Multimedia Magazine, </journal> <year> 1995. </year>
Reference-contexts: A user must translate the progress requirements of applications to RT priorities in an ad-hoc manner. More importantly, the lack of QoS interpretation means that the system cannot do effective admission control. Without admission control, long term system overload cannot be prevented. Some multimedia operating systems <ref> [28] </ref> have applied classical real-time scheduling techniques to support user applications with real-time constraints. Two algorithms that are generally believed to be suitable for scheduling CM applications are the rate-monotonic (RM) algorithm and the earliest deadline first (EDF) algorithm.
Reference: [29] <author> C.A. Thekkath, T.D. Nguyen, E. Moy, and E.D. Lazowska. </author> <title> Implementing network protocols at user level. </title> <journal> IEEE/ACM Trans. Networking, </journal> <volume> 1(5) </volume> <pages> 554-565, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: These applications demonstrate the potential of multimedia services over the Internet. Since most of these applications are delay sensitive and can tolerate some loss, they usually run on UDP/IP rather than TCP/IP. My OS architecture assumes a user level protocol implementation <ref> [9, 29] </ref>. Work is under way to implement user level libraries that provide applications with UDP/IP access.
Reference: [30] <author> T. von Eicken, Anindya Basi, </author> <title> and Vineet Buch. Low-latency communication over ATM networks using active messages. </title> <booktitle> In IEEE Micro, </booktitle> <pages> pages 46-53, </pages> <month> February </month> <year> 1995. </year>
Reference: [31] <author> T. von Eicken, D.E. Culler, S.C. Goldstein, and K.E. Schauser. </author> <title> Active messages: A mechanism for integrated communication and computation. </title> <booktitle> In Proc. 19th ISCA, </booktitle> <pages> pages 256-266, </pages> <month> May </month> <year> 1992. </year> <month> 18 </month>
Reference: [32] <author> Thorsten von Eicken, Anindya Basu, Vineet Buch, and Werner Vogels. U-Net: </author> <title> A user-level network interface for parallel and distributed computing. </title> <booktitle> In Proc. 15th SOSP, </booktitle> <month> November </month> <year> 1995. </year>
Reference: [33] <author> R. Wahbe, S. Lucco, T. Anderson, and S. Graham. </author> <title> Efficient software-based fault isolation. </title> <booktitle> In Proc. 14th SOSP, </booktitle> <pages> pages 203-216, </pages> <month> December </month> <year> 1993. </year>
Reference: [34] <author> Gregory K. Wallace. </author> <title> The JPEG still picture compression standard. </title> <journal> CACM, </journal> <volume> 34(4) </volume> <pages> 31-44, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Recent development of digital compression standards <ref> [5, 12, 34] </ref> and the low cost of video peripheral hardware have enabled the deployment of digital video applications in general purpose workstations and personal computers.
Reference: [35] <author> Geoffrey G. Xie and Simon S. Lam. </author> <title> Delay guarantee of Virtual Clock server. </title> <journal> IEEE/ACM Trans. on Networking, </journal> <volume> 3(6) </volume> <pages> 683-689, </pages> <month> December </month> <year> 1995. </year>
Reference: [36] <author> David K.Y. Yau and Simon S. Lam. </author> <title> Adaptive rate-controlled scheduling for multimedia applications. </title> <type> Technical Report TR-96-17, </type> <institution> The University of Texas at Austin, </institution> <month> April </month> <year> 1996. </year>
Reference-contexts: Similarly, an event arrival that is late can affect the system as a whole. See <ref> [36] </ref> for examples. The scheduling framework I have developed allows CM and other processes to reserve CPU time based on rates of progress [36]. It consists of the following components (Fig. 1). First, there is an on-line rate-controlled (RC) scheduler that schedules processes according to dynamic rate-controlled priority values. <p> Similarly, an event arrival that is late can affect the system as a whole. See <ref> [36] </ref> for examples. The scheduling framework I have developed allows CM and other processes to reserve CPU time based on rates of progress [36]. It consists of the following components (Fig. 1). First, there is an on-line rate-controlled (RC) scheduler that schedules processes according to dynamic rate-controlled priority values. Second, there is an admission control interface that admits or rejects new processes based on the rate-based reservation model. <p> In addition, I have performed a large number of experiments to evaluate the effectiveness of the framework <ref> [36] </ref>. The experimental results show that RC scheduling lets processes make progress at their relative reserved rates. Moreover, it allows CM applications to meet their timing constraints even in the presence of competing processes. <p> In either strategy, the reserved rate stabilizes at about 70% and enables the video application to acheive its intended performance throughout the trace. See <ref> [36] </ref> for a detailed presentation. 6 audio application and three compute-bound applications. 7 (a) (b) adaptation from an initial rate of 0.4. (a) (b) adaptation from an initial rate of 0.9. 8 2.2 OS techniques for transport of media data Data flows generated by multimedia applications are more predictable than conventional <p> For future research, I plan to build a UDP/IP protocol stack and user level communication services for a network JPEG video player which make use of and extend the framework. The goal is two fold. First, I want to demonstrate that the performance results I have reported <ref> [36, 37] </ref> can be extended to achieve good performance in more complex end-to-end services.
Reference: [37] <author> David K.Y. Yau and Simon S. Lam. </author> <title> An architecture towards efficient OS support for distributed multimedia. </title> <booktitle> In Proc. IS&T/SPIE Multimedia Computing and Networking Conference, </booktitle> <pages> pages 424-435, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: In this way, the primary role of host software becomes the transport of media data across the network. This enables specialized OS techniques to be used for increased efficiency. In view of the above, I have designed and implemented an OS architecture for improved support for distributed multimedia applications <ref> [37] </ref>. The architecture achieves efficiency in data transport and provides rate-based flow control to network connections for performance guarantees. I have performed a large number of experiments to evaluate the performance of the various techniques employed [37]. <p> have designed and implemented an OS architecture for improved support for distributed multimedia applications <ref> [37] </ref>. The architecture achieves efficiency in data transport and provides rate-based flow control to network connections for performance guarantees. I have performed a large number of experiments to evaluate the performance of the various techniques employed [37]. For example, Fig. 7 shows that the new techniques of kernel thread and fast system call (see below) achieve significant efficiency over an unmodified data path in Solaris 2.3. The figure shows the write path latency for a train of packets. <p> Kernel threads My architecture provides kernel threads for managing users' sends to the network. For tradeoff between efficiency and flexibility, I investigated both dedicated and lightweight kernel 9 threads <ref> [37] </ref>. In my design in [37], a kernel thread is used in combination with the fast write () (see below) system call to significantly reduce the number of system calls needed for sending. This achieves higher CPU efficiency. <p> Kernel threads My architecture provides kernel threads for managing users' sends to the network. For tradeoff between efficiency and flexibility, I investigated both dedicated and lightweight kernel 9 threads <ref> [37] </ref>. In my design in [37], a kernel thread is used in combination with the fast write () (see below) system call to significantly reduce the number of system calls needed for sending. This achieves higher CPU efficiency. <p> Kernel threads can also be used for rate-based flow control. A kernel thread has been used to efficiently implement the lossless smoothing algorithm in [17]. It also allows multiple user processes to send packets to a shared reserved rate network connection at the intended bit rates. <ref> [37] </ref> presents an algorithm called KT RC that achieves this service objective. As an example, consider an audio application that sends an audio packet to the network every 10 ms and a video application that sends a picture to the network every 33.3 ms. <p> By using a set of system calls, it can reconfigure the media device, reconfigure the network connection, or close the device-network streamline. I have implemented an audio write path in Solaris 2.3 and found that it is highly efficient <ref> [37] </ref>. 3 Additional Research Topics My prototype OS support framework serves as a platform on which further software development can take place and more comprehensive experimental results can be obtained. <p> For future research, I plan to build a UDP/IP protocol stack and user level communication services for a network JPEG video player which make use of and extend the framework. The goal is two fold. First, I want to demonstrate that the performance results I have reported <ref> [36, 37] </ref> can be extended to achieve good performance in more complex end-to-end services.
Reference: [38] <author> Lixia Zhang. </author> <title> Virtual clock: A new traffic control algorithm for packet switching networks. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 9(2) </volume> <pages> 101-124, </pages> <month> May </month> <year> 1991. </year> <month> 19 </month>
Reference-contexts: Future networks in the evolving National Information Infrastructure (such as ATM networks) are expected to provide resource reservations which, together with suitable packet scheduling techniques, can transport media packets with QoS (such as throughput and delay) guarantees <ref> [13, 18, 23, 38] </ref>. To obtain truly superior application-level performance for end users, however, the network-level guarantees must be extended to the endpoints of a communication path.
References-found: 38

