URL: http://charm.cs.uiuc.edu/version2/papers/MediumGrainOOPSLA93.ps
Refering-URL: http://charm.cs.uiuc.edu/version2/papers/MediumGrainOOPSLA93.html
Root-URL: http://www.cs.uiuc.edu
Email: email fkale,sanjeevg@cs.uiuc.edu  
Title: Medium Grained Execution in Concurrent Object Oriented Systems  
Author: Laxmikant V. Kale Sanjeev Krishnan 
Affiliation: Department of Computer Science, University of Illinois, Urbana-Champaign.  
Abstract: We present arguments for the adequacy of medium grained execution for concurrent object oriented systems such as Charm++ on current stock multicomputers. We briefly describe Charm++ and present performance data for two of its basic primitives. We argue that although grainsize decisions must be made by the programmer, they remain portable across different ma chines and with different numbers of processors.
Abstract-found: 1
Intro-found: 1
Reference: [D + 89] <author> W. Dally et al. </author> <title> The J-Machine : A fine grained concurrent computer. </title> <booktitle> In Information Processing 89, Proceedings of the IFIP Congress, </booktitle> <pages> pages 1147-1153, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: The Charm runtime system is being optimized and one can expect a further reduction in these times. Despite this, however, the times in Charm are substantially higher than the results reported for fine grained systems such as ABCL [YMY92] and the J-Machine <ref> [D + 89] </ref>, which are usually of the order of a few tens of microseconds.
Reference: [Kal90] <author> L.V. Kale. </author> <title> The Chare Kernel parallel programming language and system. </title> <booktitle> In Proceedings of the International Conference on Parallel Processing, </booktitle> <month> August </month> <year> 1990. </year>
Reference-contexts: Charm++ provides specific modes for sharing information between parallel objects. Extensive dynamic load balancing strategies are provided. It is based on the Charm parallel programming system <ref> [Kal90, SK90] </ref>, and its runtime system implementation reuses most of the runtime system for Charm. 3 Timings for basic primitives in CHARM++ We measured the times for two basic operations in Charm++, viz. intra node object creation and round trip messaging. The times for the CM5 are in Table 1.
Reference: [KK93] <author> L. V. Kale and Sanjeev Krishnan. </author> <title> Charm++ : A portable concurrent object oriented system based on C++. </title> <booktitle> In Conference on Object Oriented Programming Systems, Languages and Applications, </booktitle> <month> September </month> <year> 1993. </year> <note> To Appear. </note>
Reference-contexts: The second category comprises systems which distinguish between sequential and parallel objects. Explicit grainsize control is usually needed to create sequential computations of sufficient size such that message passing overheads are amortized. These sequential computations are coordinated by parallel objects. Charm++ <ref> [KK93] </ref> is such a medium grained concurrent object oriented system.
Reference: [SK90] <author> W. W. Shu and L. V. Kale. </author> <title> Chare Kernel a runtime support system for parallel computations. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 11 </volume> <pages> 198-211, </pages> <year> 1990. </year>
Reference-contexts: Charm++ provides specific modes for sharing information between parallel objects. Extensive dynamic load balancing strategies are provided. It is based on the Charm parallel programming system <ref> [Kal90, SK90] </ref>, and its runtime system implementation reuses most of the runtime system for Charm. 3 Timings for basic primitives in CHARM++ We measured the times for two basic operations in Charm++, viz. intra node object creation and round trip messaging. The times for the CM5 are in Table 1.
Reference: [YMY92] <author> M. Yasugi, S. Matsouka, and A. Yonezawa. </author> <title> ABCL/onEM4 : A new software / hardware architecture for object-oriented concurrent computing on an extended dataflow supercomputer. </title> <booktitle> In 6th ACM International Conference on Supercomputing, </booktitle> <month> July </month> <year> 1992. </year> <month> 4 </month>
Reference-contexts: The Charm runtime system is being optimized and one can expect a further reduction in these times. Despite this, however, the times in Charm are substantially higher than the results reported for fine grained systems such as ABCL <ref> [YMY92] </ref> and the J-Machine [D + 89], which are usually of the order of a few tens of microseconds.
References-found: 5

