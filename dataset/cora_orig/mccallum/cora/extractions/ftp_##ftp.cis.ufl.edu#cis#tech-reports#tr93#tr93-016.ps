URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr93/tr93-016.ps
Refering-URL: http://www.cis.ufl.edu/~fishwick/tr/tr93-016.html
Root-URL: http://www.cis.ufl.edu
Email: email: fishwick@cis.ufl.edu  email: porr@graphics.cis.upenn.edu  
Phone: phone: (904) 392-1414  phone: (215) 898-1976  
Title: INTEGRATING SIMULATION AND ANIMATION APPROACHES FOR AUTONOMOUS ARTICULATED BODIES 1  
Author: Paul A. Fishwick Hanns-Oskar A. Porr 
Note: 1 This is an expanded paper based on earlier work presented at the 1991 Winter Simulation Conference [23]  
Address: Bldg. CSE, Room 301 Gainesville, FL 32611  200 S. 33 Street Philadelphia, PA 19104-6389  
Affiliation: University of Florida Computer and Information Sciences Dept.  University of Pennsylvania Dept. of Computer and Information Sciences  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Armstrong, W., and Green, M. </author> <title> The Dynamics of Articulated Rigid Bodies for Purposes of Animation. </title> <booktitle> In Proceedings of Graphics Interface '85. Canadian Information Processing Society (Toronto, </booktitle> <address> Canada, </address> <year> 1985), </year> <pages> pp. 407-415. </pages>
Reference-contexts: One promising direction is dynamics which is concerned with applying the laws of physics to a computer model. There exist several techniques that describe the "equations of motion," such as the Newton-Euler, the Lagrangian [2, 15], the D'Alembert [31], the Gibbs-Appell [51], and the Armstrong notation <ref> [1, 50] </ref>. Dynamic simulation is capable of producing very realist looking motion, however the technique does suffer from a number of flaws: TR93-016 Computer and Information Sciences, University of Florida 9 1. All systems developed for high-level dynamic simulation, (i.e., for human [10] and insect gaits [28, 36]) are non-general. <p> In the case of physical simulation and dynamics, it is awkward for a human to specify the animation in terms of physical parameters <ref> [53, 1] </ref>. In other instances, a system may have been designed only for a special case [10].
Reference: [2] <author> Asada, H., and Slotine, J. J. E. </author> <title> Robot Analysis And Control. </title> <publisher> John Wiley and Sons, </publisher> <address> New York, New York, </address> <year> 1986. </year>
Reference-contexts: To enable movement, joints have to be placed inside of the structure. There are two basic types of joints available <ref> [15, 2] </ref>: revolute and prismatic (slider), as shown in figure 3. Both joints have only one "degree of freedom" (DOF): the revolute joint may only rotate over one axis, and the slider can only slide along one axis. <p> This can be done using the Denavit-Hartenberg <ref> [16, 2, 15] </ref> notation, which has become a standard in the robotics literature. 3.2 Animation Systems The task of a computer animation system is to allow the user to specify object motion in an easy to use, high level environment. <p> One promising direction is dynamics which is concerned with applying the laws of physics to a computer model. There exist several techniques that describe the "equations of motion," such as the Newton-Euler, the Lagrangian <ref> [2, 15] </ref>, the D'Alembert [31], the Gibbs-Appell [51], and the Armstrong notation [1, 50]. Dynamic simulation is capable of producing very realist looking motion, however the technique does suffer from a number of flaws: TR93-016 Computer and Information Sciences, University of Florida 9 1.
Reference: [3] <author> Badler, N. I., Korein, J., Korein, J., Radack, G., and Brotman, L. </author> <title> Positioning and Animating Human Figures in a Task-Oriented Environment. </title> <booktitle> The Visual Computer 4, 1 (1985), </booktitle> <volume> 212 - 220. </volume>
Reference-contexts: We can integrate a number of abstraction levels. This integration has two primary benefits: 1) to better organize a system in terms of levels, and 2) to allow very fast execution of parts of the system through abstraction level traversal [19]. Badler et al. <ref> [3, 4] </ref> have produced a system that integrates AI, simulation and animation concepts. Tasks are specified in natural language [26, 17, 32] and are used to construct a model for simulation and animation.
Reference: [4] <author> Badler, N. I., Manoochehri, K., and Walters, G. </author> <title> Articulated Figure Positioning by Multiple Constraints. </title> <journal> IEEE Computer Graphics and Applications 7, </journal> <month> 6 (June </month> <year> 1987). </year> <institution> TR93-016 Computer and Information Sciences, University of Florida 21 </institution>
Reference-contexts: We can integrate a number of abstraction levels. This integration has two primary benefits: 1) to better organize a system in terms of levels, and 2) to allow very fast execution of parts of the system through abstraction level traversal [19]. Badler et al. <ref> [3, 4] </ref> have produced a system that integrates AI, simulation and animation concepts. Tasks are specified in natural language [26, 17, 32] and are used to construct a model for simulation and animation.
Reference: [5] <author> Badler, N. I., Webber, B., Kalita, J., and Esakov, J. </author> <title> Animation from Instructions. In Making Them Move, </title> <editor> N. I. Badler, B. Barsky, and D. Zeltzer, Eds. </editor> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> San Mateo, California, </address> <year> 1991, </year> <pages> pp. 51-93. </pages>
Reference-contexts: Esakov and Badler [17] take a Simon Says approach, using commands such as "John, look at switch tw-1." Another system [46] does not allow pronouns in the language at all, and events have to be listed in a sequential order. Badler et al. <ref> [5] </ref> describe a system that uses a natural language processor program as the front end to the animation system.
Reference: [6] <author> Beck, H. W., and Fishwick, P. A. </author> <title> Incorporating Natural Language Descriptions into Modeling and Simulation. </title> <journal> Simulation Journal 52, </journal> <month> 3 (March </month> <year> 1989), </year> <pages> 102 - 109. </pages>
Reference-contexts: Such a high level system can produce an intermediate level animation script file [56, 12, 17] distinguishing between task level and animation level (figure 6), or produce equational models <ref> [6, 7] </ref>. The animation level can be any of the animation systems described above. The main research focus of goal directed animation can thus be defined as all problems dealing with the task level: to specify goals (tasks) and have the system automatically produce an animation.
Reference: [7] <author> Beck, H. W., and Fishwick, P. A. </author> <title> Natural Language, Cognitive Models and Simulation. In Qualitative Simulation Modeling and Analysis, </title> <editor> P. A. Fishwick and P. A. Luker, Eds. </editor> <publisher> Springer Verlag, </publisher> <year> 1991, </year> <pages> pp. 302 - 325. </pages>
Reference-contexts: Such a high level system can produce an intermediate level animation script file [56, 12, 17] distinguishing between task level and animation level (figure 6), or produce equational models <ref> [6, 7] </ref>. The animation level can be any of the animation systems described above. The main research focus of goal directed animation can thus be defined as all problems dealing with the task level: to specify goals (tasks) and have the system automatically produce an animation.
Reference: [8] <author> Breen, D. </author> <title> Choreographing Goal-Oriented Motion Using Cost Functions. In State-of-the-art in Computer Animation, </title> <editor> N. Magnenat-Thalmann and D. Thalmann, Eds. </editor> <publisher> Springer Verlag, </publisher> <address> New York, New York, </address> <year> 1989, </year> <pages> pp. 141-151. </pages>
Reference-contexts: the natural language input, which are piped into the animation program. [Figure 6 about here.] 3.2.6 Motion Planning Motion planning involves algorithms that combine, blend, or organize individual motions into one [41, 48], as well as the planning of an optimal, collision free path of motion in an arbitrary environment <ref> [8, 35] </ref>. Similar to natural language processing, there is much AI research involved. The system has to have a certain knowledge base: it has to know about its environment (i.e., what and where is a doorknob), and what skills a given object is capable of walking, running or grasping.
Reference: [9] <author> Brooks, R. </author> <title> A Robot that Walks: Emergent Behaivor from a Carefully Evolved Network. In Making Them Move, </title> <editor> N. I. Badler, B. Barsky, and D. Zeltzer, Eds. </editor> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> San Mateo, California, </address> <year> 1991, </year> <pages> pp. 99-108. </pages>
Reference-contexts: Each skill can be seen as a different motor program. It has been shown that a skill can be modeled as a finite state automata (FSA). Figure 7 shows a simple FSA for walking. Several systems were build using this approach as a basis <ref> [54, 10, 9] </ref>. In previous implementation these motor programs were hardcoded as functions in a program, which made learning new skills and variations inflexible. [Figure 7 about here.] While these systems certainly represent the future, they are still in the experimental stage.
Reference: [10] <author> Bruderlein, A., and Calvert, T. </author> <title> Goal-Directed, Dynamic Animation of Walking. </title> <booktitle> In Computer Graphics: SIGGRAPH '89 Conference Proceedings (Boston,Massachusetts, 1989), ACM-SIGGRAPH, </booktitle> <pages> pp. 268-292. </pages>
Reference-contexts: Dynamic simulation is capable of producing very realist looking motion, however the technique does suffer from a number of flaws: TR93-016 Computer and Information Sciences, University of Florida 9 1. All systems developed for high-level dynamic simulation, (i.e., for human <ref> [10] </ref> and insect gaits [28, 36]) are non-general. The equations of motion must be explicitly developed for a particular model and are usually hardcoded in the system. To teach the system a new movement, the program has to be changed. 2. <p> The task level itself can be divided further into a hierarchy of smaller sub-systems in a top down fashion <ref> [54, 56, 10, 12, 57] </ref> as shown in figure 6. There are three major issues involved here [54]: natural language processing, motion planning, and motor control. <p> Each skill can be seen as a different motor program. It has been shown that a skill can be modeled as a finite state automata (FSA). Figure 7 shows a simple FSA for walking. Several systems were build using this approach as a basis <ref> [54, 10, 9] </ref>. In previous implementation these motor programs were hardcoded as functions in a program, which made learning new skills and variations inflexible. [Figure 7 about here.] While these systems certainly represent the future, they are still in the experimental stage. <p> In the case of physical simulation and dynamics, it is awkward for a human to specify the animation in terms of physical parameters [53, 1]. In other instances, a system may have been designed only for a special case <ref> [10] </ref>. Thus, there still remains more research to be done in generating an easy-to-use, general animation system. 4 INTEGRATING SIMULATION AND ANIMATION To model a high level autonomous system, we chose to integrate a computer simulation with the traditional keyframe animation system.
Reference: [11] <author> Burtnyk, N., and Wein, M. </author> <title> Computer Generated Key Frame Animation. </title> <journal> Journal of the SMPTE 80 (1971), </journal> <pages> 149-153. </pages> <institution> TR93-016 Computer and Information Sciences, University of Florida 22 </institution>
Reference-contexts: Its advantage is that the user can create the animation in a more structured manner so that they do not have to worry about the low-level implementations. 3.2.2 Keyframe Animation Keyframe animation is one of the oldest computer animation techniques; since it was first introduced <ref> [11] </ref> it has become one of the most popular types of creating animations with a computer [44, 30, 25]. The concept is an extension of how animation is traditionally done in 2D, for instance, in an animated cartoon.
Reference: [12] <author> Calvert, T. </author> <title> Composition of Realistic Animation Sequences for Multiple Human Figures. In Making Them Move, </title> <editor> N. I. Badler, B. Barsky, and D. Zeltzer, Eds. </editor> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> San Mateo, California, </address> <year> 1991, </year> <pages> pp. 35-50. </pages>
Reference-contexts: In such a system, the animator states a goal in natural language (i.e., "the man stands up and takes a book off the shelve"), and the system produces an animation by processing the text. Such a high level system can produce an intermediate level animation script file <ref> [56, 12, 17] </ref> distinguishing between task level and animation level (figure 6), or produce equational models [6, 7]. The animation level can be any of the animation systems described above. <p> The task level itself can be divided further into a hierarchy of smaller sub-systems in a top down fashion <ref> [54, 56, 10, 12, 57] </ref> as shown in figure 6. There are three major issues involved here [54]: natural language processing, motion planning, and motor control.
Reference: [13] <author> Catmul, E., and Rom, R. </author> <title> A Class of Local Interpolating Splines. In Computer Aided Geometric Design, </title> <editor> R. Arnhill and R. Riesenfeld, Eds. </editor> <publisher> Academic Press, </publisher> <address> San Francisco, California, </address> <year> 1974, </year> <pages> pp. 317-326. </pages>
Reference-contexts: The computer is then used to calculate all in between frames by interpolating the individual DOFs using a spline curve technique [33]. The three most commonly used splines in animation are the Catmul-Rom spline <ref> [13] </ref>, the Cardinal spline [43], and the Hermite spline [37], because the curve passes through the spline control points. [Figure 5 about here.] 3.2.3 Dynamics The quality of an animation created with any of the techniques described so far greatly depends on the skill of the animator.
Reference: [14] <author> Chuang, R., and Entis, G. </author> <title> Shaded Computer Animation -Step by Step. </title> <journal> IEEE Computer Graphics & Applications 3, </journal> <volume> 3 (1983), 18 - 25. </volume>
Reference-contexts: Furthermore, if a different motion is to be used, the program has to be completely rewritten. Script animation involves a specialized programming language that produces graphics and animation <ref> [40, 14, 47] </ref>.
Reference: [15] <author> Craig, R. </author> <title> Introduction to Robotics, Mechanics and Control, second edition. </title> <publisher> Addison-Wesley Publishing Company, Inc., </publisher> <address> New York, New York, </address> <year> 1989. </year>
Reference-contexts: To enable movement, joints have to be placed inside of the structure. There are two basic types of joints available <ref> [15, 2] </ref>: revolute and prismatic (slider), as shown in figure 3. Both joints have only one "degree of freedom" (DOF): the revolute joint may only rotate over one axis, and the slider can only slide along one axis. <p> This can be done using the Denavit-Hartenberg <ref> [16, 2, 15] </ref> notation, which has become a standard in the robotics literature. 3.2 Animation Systems The task of a computer animation system is to allow the user to specify object motion in an easy to use, high level environment. <p> One promising direction is dynamics which is concerned with applying the laws of physics to a computer model. There exist several techniques that describe the "equations of motion," such as the Newton-Euler, the Lagrangian <ref> [2, 15] </ref>, the D'Alembert [31], the Gibbs-Appell [51], and the Armstrong notation [1, 50]. Dynamic simulation is capable of producing very realist looking motion, however the technique does suffer from a number of flaws: TR93-016 Computer and Information Sciences, University of Florida 9 1.
Reference: [16] <author> Denavit, J., and Hartenberg, R. </author> <title> A Kinematic Notation for Lower Pair Mechanisms Bases On Matrices. </title> <journal> Journal of Applied Mechanics 22 (1955), </journal> <pages> 215-221. </pages>
Reference-contexts: This can be done using the Denavit-Hartenberg <ref> [16, 2, 15] </ref> notation, which has become a standard in the robotics literature. 3.2 Animation Systems The task of a computer animation system is to allow the user to specify object motion in an easy to use, high level environment. <p> This is done in the XKEY system. XKEY provides an easy interactive environment for specifying an object's low level positions at each keyframe. Specifically, XKEY provides: * A capability for loading, storing and interactively creating keyframes. TR93-016 Computer and Information Sciences, University of Florida 18 * Denavit-Hartenberg notation <ref> [16] </ref> which is used for setting up the articulation linkage and their associated degrees of freedom (DOF). * An interactive method for moving objects or sub-objects with respect to their DOF.
Reference: [17] <author> Esakov, J., and Badler, N. I. </author> <title> An Architecture for High-Level Human Task Animation Control. In In Knowledge Based Simulation, Methodology and Application;Advances in Simulation, </title> <journal> Num. </journal> <volume> 4, </volume> <editor> P. Fishwick and R. Modjeski, Eds. </editor> <publisher> Springer Verlag, </publisher> <address> New York, New York, </address> <year> 1991, </year> <pages> pp. 164-197. </pages>
Reference-contexts: Badler et al. [3, 4] have produced a system that integrates AI, simulation and animation concepts. Tasks are specified in natural language <ref> [26, 17, 32] </ref> and are used to construct a model for simulation and animation. Our work on integrating animation with simulation most closely resembles Badler's approach since we are interested in a hierarchical methodology for computer animation | from natural language task description down to video frames. <p> In such a system, the animator states a goal in natural language (i.e., "the man stands up and takes a book off the shelve"), and the system produces an animation by processing the text. Such a high level system can produce an intermediate level animation script file <ref> [56, 12, 17] </ref> distinguishing between task level and animation level (figure 6), or produce equational models [6, 7]. The animation level can be any of the animation systems described above. <p> For that reason many high level animation systems use a modified, simpler natural language. Esakov and Badler <ref> [17] </ref> take a Simon Says approach, using commands such as "John, look at switch tw-1." Another system [46] does not allow pronouns in the language at all, and events have to be listed in a sequential order. <p> Given all this knowledge, it is then possible for a program called the task manager [54] or task planner <ref> [17] </ref> to break down (or refine) a task even further into individual skills. Zeltzer [57] suggests using a skill lattice for the refinement.
Reference: [18] <author> Fishwick, P. A. </author> <title> The Role of Process Abstraction in Simulation. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics 18, </journal> <volume> 1 (January/February 1988), 18 - 39. </volume>
Reference-contexts: Our current concentration is focussed on the use of multiple mathematical models to drive the animation of complex systems. We have found that a flexible and comprehensive multi TR93-016 Computer and Information Sciences, University of Florida 4 model <ref> [18, 24, 20] </ref> representation is necessary to control the animation of systems with articulated objects in a detailed environment. 2 DISCRETE EVENT SIMULATION Table 1 displays a wide variety of simulation modeling types available for experimentation. [Table 1 about here.] As can be seen from table 1, discrete event models are
Reference: [19] <author> Fishwick, P. A. </author> <title> Abstraction Level Traversal in Hierarchical Modeling. In Modelling and Simulation Methodology: Knowledge Systems Paradigms, </title> <editor> B. P. Zeigler, M. Elzas, and T. Oren, Eds. </editor> <publisher> Elsevier North Holland, </publisher> <year> 1989, </year> <pages> pp. 393 - 429. </pages> <institution> TR93-016 Computer and Information Sciences, University of Florida 23 </institution>
Reference-contexts: We can integrate a number of abstraction levels. This integration has two primary benefits: 1) to better organize a system in terms of levels, and 2) to allow very fast execution of parts of the system through abstraction level traversal <ref> [19] </ref>. Badler et al. [3, 4] have produced a system that integrates AI, simulation and animation concepts. Tasks are specified in natural language [26, 17, 32] and are used to construct a model for simulation and animation.
Reference: [20] <author> Fishwick, P. A. </author> <title> Heterogeneous Decomposition and Coupling for Combined Modeling. </title> <booktitle> In 1991 Winter Simulation Conference (Phoenix, </booktitle> <address> AZ, </address> <month> December </month> <year> 1991), </year> <pages> pp. 1199 - 1208. </pages>
Reference-contexts: Our current concentration is focussed on the use of multiple mathematical models to drive the animation of complex systems. We have found that a flexible and comprehensive multi TR93-016 Computer and Information Sciences, University of Florida 4 model <ref> [18, 24, 20] </ref> representation is necessary to control the animation of systems with articulated objects in a detailed environment. 2 DISCRETE EVENT SIMULATION Table 1 displays a wide variety of simulation modeling types available for experimentation. [Table 1 about here.] As can be seen from table 1, discrete event models are <p> Discrete event modeling is useful for representing a system's dynamics at a fairly high abstraction level, and therefore complex systems can be efficiently represented as a network or hierarchy of discrete event and continuous models <ref> [24, 20] </ref>. Key components of systems are well defined in the systems literature [42] and include state, event and time. The state of the system represents the condition of the system objects and varies over time. Events are specific points in time where the state changes.
Reference: [21] <author> Fishwick, P. A. Simpack: </author> <title> Getting Started with Simulation Programming in C and C++. </title> <booktitle> In 1992 Winter Simulation Conference (Arlington, </booktitle> <address> VA, </address> <month> December </month> <year> 1992), </year> <pages> pp. 154 - 162. </pages>
Reference-contexts: Figure 8 displays the order in which we proceeded. [Figure 8 about here.] TR93-016 Computer and Information Sciences, University of Florida 12 4.1 Modeling First we begin with the simulator (stage 1). We use a set of tools called SimPack. Sim-Pack <ref> [22, 21] </ref> permits the following types of modeling: * Finite state automaton with timed states. * Markov chain modeling. * Queuing networks. * Differential, difference equation and delay differential equation modeling. * Pulse processes. * Stochastic Petri networks. * Bi-directional message passing networks. * Parallel network simulation with the Linda parallel
Reference: [22] <author> Fishwick, P. A. </author> <title> Computer Simulation Model Design & Execution. </title> <publisher> Prentice Hall, </publisher> <year> 1993. </year> <note> (to be published as a textbook). </note>
Reference-contexts: For instance, the familiar barbershop model contains entities (people) that move through the system (shop) using two events: "arrival" and "departure." [Figure 1 about here.] In fig. 1, The input to a simulation system such as SimPack <ref> [22] </ref> is the graph model specification. Models such as the barber shop model are constructed from queuing networks, and TR93-016 Computer and Information Sciences, University of Florida 5 queuing networks are a form of procedural, data flow modeling where the barber (server) accepts entities (data) that flow through the system. <p> Figure 8 displays the order in which we proceeded. [Figure 8 about here.] TR93-016 Computer and Information Sciences, University of Florida 12 4.1 Modeling First we begin with the simulator (stage 1). We use a set of tools called SimPack. Sim-Pack <ref> [22, 21] </ref> permits the following types of modeling: * Finite state automaton with timed states. * Markov chain modeling. * Queuing networks. * Differential, difference equation and delay differential equation modeling. * Pulse processes. * Stochastic Petri networks. * Bi-directional message passing networks. * Parallel network simulation with the Linda parallel
Reference: [23] <author> Fishwick, P. A., and Porr, H.-O. A. </author> <title> Using discrete event modeling for effective computer animation control. </title> <booktitle> In Winter Simulation Conference (Phoenix, </booktitle> <address> AZ, </address> <month> December </month> <year> 1991), </year> <pages> pp. </pages> <address> 1156 -1164. </address>
Reference: [24] <author> Fishwick, P. A., and Zeigler, B. P. </author> <title> A Multimodel Methodology for Qualitative Model Engineering. </title> <booktitle> ACM Transactions on Modeling and Computer Simulation 1, 2 (1992), </booktitle> <volume> 52 - 81. </volume>
Reference-contexts: Our current concentration is focussed on the use of multiple mathematical models to drive the animation of complex systems. We have found that a flexible and comprehensive multi TR93-016 Computer and Information Sciences, University of Florida 4 model <ref> [18, 24, 20] </ref> representation is necessary to control the animation of systems with articulated objects in a detailed environment. 2 DISCRETE EVENT SIMULATION Table 1 displays a wide variety of simulation modeling types available for experimentation. [Table 1 about here.] As can be seen from table 1, discrete event models are <p> Discrete event modeling is useful for representing a system's dynamics at a fairly high abstraction level, and therefore complex systems can be efficiently represented as a network or hierarchy of discrete event and continuous models <ref> [24, 20] </ref>. Key components of systems are well defined in the systems literature [42] and include state, event and time. The state of the system represents the condition of the system objects and varies over time. Events are specific points in time where the state changes.
Reference: [25] <author> Fortin, D. Lamy, J. F., and Thalman, D. </author> <title> A multiple track animator system. </title> <booktitle> In Proceedings SIGGRAPH/SIGART Interdisciplinary Workshop on Motion: Representation and Perception (Toronto, </booktitle> <address> Canada, </address> <year> 1983), </year> <pages> pp. 180-186. </pages>
Reference-contexts: a more structured manner so that they do not have to worry about the low-level implementations. 3.2.2 Keyframe Animation Keyframe animation is one of the oldest computer animation techniques; since it was first introduced [11] it has become one of the most popular types of creating animations with a computer <ref> [44, 30, 25] </ref>. The concept is an extension of how animation is traditionally done in 2D, for instance, in an animated cartoon. Here, a figure is hand drawn on a transparency by the master animator only at key points in the movement (at the beginning and the end).
Reference: [26] <author> Gangel, J. </author> <title> A Motion Verb Interface to a Task Animation System. </title> <type> Master's thesis, </type> <institution> University of Pennsylvania, </institution> <year> 1984. </year>
Reference-contexts: Badler et al. [3, 4] have produced a system that integrates AI, simulation and animation concepts. Tasks are specified in natural language <ref> [26, 17, 32] </ref> and are used to construct a model for simulation and animation. Our work on integrating animation with simulation most closely resembles Badler's approach since we are interested in a hierarchical methodology for computer animation | from natural language task description down to video frames.
Reference: [27] <author> Gelernter, D. H. </author> <title> Generative Communication in Linda. </title> <journal> ACM Transactions on Programming Languages and Systems 7, </journal> <month> 1 (January </month> <year> 1985), </year> <type> 80 - 112. </type> <institution> TR93-016 Computer and Information Sciences, University of Florida 24 </institution>
Reference-contexts: the following types of modeling: * Finite state automaton with timed states. * Markov chain modeling. * Queuing networks. * Differential, difference equation and delay differential equation modeling. * Pulse processes. * Stochastic Petri networks. * Bi-directional message passing networks. * Parallel network simulation with the Linda parallel computation model <ref> [27] </ref>. For our example, we chose the Petri net modeler. Petri nets can be thought of as a hybrid between procedural and declarative modeling as depicted in fig. 1.
Reference: [28] <author> Girard, M., and Maciejewski, A. A. </author> <title> Computational Modeling for the Computer Animation of Legged Figures. </title> <booktitle> In Computer Graphics: SIGGRAPH '85 Conference Proceedings (San Francisco, </booktitle> <address> California, </address> <year> 1985), </year> <month> ACM-SIGGRAPH, </month> <pages> pp. 263-270. </pages>
Reference-contexts: Dynamic simulation is capable of producing very realist looking motion, however the technique does suffer from a number of flaws: TR93-016 Computer and Information Sciences, University of Florida 9 1. All systems developed for high-level dynamic simulation, (i.e., for human [10] and insect gaits <ref> [28, 36] </ref>) are non-general. The equations of motion must be explicitly developed for a particular model and are usually hardcoded in the system. To teach the system a new movement, the program has to be changed. 2. <p> We are currently experimenting with the implementation of dynamic "filters" to enhance the realism. The objects are assigned masses and inertias, and the algorithm then computes accelerations on the spline curve. We are currently investigating the following three methods: * Constrain the dynamics to follow the spline path exactly <ref> [28, 51] </ref>. TR93-016 Computer and Information Sciences, University of Florida 19 * Constrain the dynamics to follow a path to some * tolerance.
Reference: [29] <author> Gomez, J. TWIXT: </author> <title> A 3-D Animation System. </title> <journal> Computer & Graphics 9, </journal> <volume> 3 (1985), 291 - 298. </volume>
Reference-contexts: All operations are performed using mouse interaction, e.g. dragging and rotating objects directly on the screen, and are therefor highly user friendly. * A multi-track <ref> [29] </ref> coordinator that includes cut, copy and paste of frames. * Cubic spline and linear interpolation of keyframe DOF variables. [Figure 14 about here.] The models used are polygon based, and were created by using a CSG (Constructive Solid Geometry) approach where spheres are combined to form the limbs.
Reference: [30] <author> Hanrahan, P., and Sturman, D. </author> <title> Interactive animation of parametric models. </title> <booktitle> Visual Computer 1 (1985), </booktitle> <pages> 260-266. </pages>
Reference-contexts: a more structured manner so that they do not have to worry about the low-level implementations. 3.2.2 Keyframe Animation Keyframe animation is one of the oldest computer animation techniques; since it was first introduced [11] it has become one of the most popular types of creating animations with a computer <ref> [44, 30, 25] </ref>. The concept is an extension of how animation is traditionally done in 2D, for instance, in an animated cartoon. Here, a figure is hand drawn on a transparency by the master animator only at key points in the movement (at the beginning and the end).
Reference: [31] <author> Isaacs, P., and Cohen, M. F. </author> <title> Controlling Dynamic Simulations with Kinematic Constraint. </title> <booktitle> In Computer Graphics: SIGGRAPH '87 Conference Proceedings (Anaheim, </booktitle> <address> California, </address> <year> 1987), </year> <month> ACM-SIGGRAPH, </month> <pages> pp. 214-223. </pages>
Reference-contexts: One promising direction is dynamics which is concerned with applying the laws of physics to a computer model. There exist several techniques that describe the "equations of motion," such as the Newton-Euler, the Lagrangian [2, 15], the D'Alembert <ref> [31] </ref>, the Gibbs-Appell [51], and the Armstrong notation [1, 50]. Dynamic simulation is capable of producing very realist looking motion, however the technique does suffer from a number of flaws: TR93-016 Computer and Information Sciences, University of Florida 9 1.
Reference: [32] <author> Kalita, J. </author> <title> Analysis of a Class of Action Verbs and Synthesis of Underlying Tasks in an Animation Environment. </title> <type> PhD thesis, </type> <institution> University of Pennsylvania, </institution> <year> 1990. </year>
Reference-contexts: Badler et al. [3, 4] have produced a system that integrates AI, simulation and animation concepts. Tasks are specified in natural language <ref> [26, 17, 32] </ref> and are used to construct a model for simulation and animation. Our work on integrating animation with simulation most closely resembles Badler's approach since we are interested in a hierarchical methodology for computer animation | from natural language task description down to video frames.
Reference: [33] <author> Kochanek, D. </author> <title> Interpolating Splines with Local Tension, Continuity, and Bias Control. </title> <booktitle> In Computer Graphics: SIGGRAPH '84 Conference Proceedings (Minneapolis, Minnesota, 1984), ACM SIGGRAPH, </booktitle> <pages> pp. 33-41. </pages>
Reference-contexts: The animator defines the configuration (i.e., sets all DOFs) of an object only at key times in the movement, the keyframes. The computer is then used to calculate all in between frames by interpolating the individual DOFs using a spline curve technique <ref> [33] </ref>.
Reference: [34] <author> Lasseter, J. </author> <title> Principles of Traditional Animation Applied to 3D Computer Animation. </title> <booktitle> In Computer Graphics: SIGGRAPH '87 Conference Proceedings (Anaheim, </booktitle> <address> California, </address> <year> 1987), </year> <month> ACM-SIGGRAPH, </month> <pages> pp. 35-44. </pages>
Reference-contexts: To have a motion sequence look realistic requires talent and training <ref> [34] </ref>. For this reason, much recent research in computer animation has involved taking the burden off the animator and placing it on the system which produces the animations automatically. One promising direction is dynamics which is concerned with applying the laws of physics to a computer model.
Reference: [35] <author> Lengyel, J., Reichert, M., Donald, B., and Greenberg, D. P. </author> <title> Real-Time Robot Motion Planning Using Rasterizing Computer Graphics Hardware. </title> <booktitle> In Com TR93-016 Computer and Information Sciences, University of Florida 25 puter Graphics: SIGGRAPH '90 Conference Proceedings (Dallas, </booktitle> <address> Texas, </address> <year> 1990), </year> <month> ACM-SIGGRAPH, </month> <pages> pp. 327-335. </pages>
Reference-contexts: the natural language input, which are piped into the animation program. [Figure 6 about here.] 3.2.6 Motion Planning Motion planning involves algorithms that combine, blend, or organize individual motions into one [41, 48], as well as the planning of an optimal, collision free path of motion in an arbitrary environment <ref> [8, 35] </ref>. Similar to natural language processing, there is much AI research involved. The system has to have a certain knowledge base: it has to know about its environment (i.e., what and where is a doorknob), and what skills a given object is capable of walking, running or grasping.
Reference: [36] <author> McKenna, M., and Zeltzer, D. </author> <title> Dynamic Simulation of Autonomous Legged Locomotion. </title> <booktitle> In Computer Graphics: SIGGRAPH '90 Conference Proceedings (Dallas, </booktitle> <address> Texas, </address> <year> 1990), </year> <month> ACM-SIGGRAPH, </month> <pages> pp. 29-38. </pages>
Reference-contexts: Dynamic simulation is capable of producing very realist looking motion, however the technique does suffer from a number of flaws: TR93-016 Computer and Information Sciences, University of Florida 9 1. All systems developed for high-level dynamic simulation, (i.e., for human [10] and insect gaits <ref> [28, 36] </ref>) are non-general. The equations of motion must be explicitly developed for a particular model and are usually hardcoded in the system. To teach the system a new movement, the program has to be changed. 2.
Reference: [37] <author> Mortenson, M. </author> <title> Geometric Modeling. </title> <publisher> John Wiley & Sons, Inc., </publisher> <address> New York, New York, </address> <year> 1985. </year>
Reference-contexts: The computer is then used to calculate all in between frames by interpolating the individual DOFs using a spline curve technique [33]. The three most commonly used splines in animation are the Catmul-Rom spline [13], the Cardinal spline [43], and the Hermite spline <ref> [37] </ref>, because the curve passes through the spline control points. [Figure 5 about here.] 3.2.3 Dynamics The quality of an animation created with any of the techniques described so far greatly depends on the skill of the animator. To have a motion sequence look realistic requires talent and training [34].
Reference: [38] <author> Peterson, J. L. </author> <title> Petri Net Theory and the Modeling of Systems. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1981. </year>
Reference-contexts: In our simulation studies, we have created a two level timed Petri net to model the behavior of 5 articulated figures which comprise the dining philosopher's (DP) scenario. A Petri net model of DP is described by Peterson <ref> [38] </ref>. This model represents the concurrency of "eating" and the resource dependencies for each philosopher. Note that the places and transitions are labeled counter-clockwise (using concentric passes) starting with p 0 and t 0 respectively.
Reference: [39] <author> Porr, H. O. </author> <title> High-Level Computer Animation using Motion Primitives created from Keyframes. </title> <type> Master's thesis, </type> <institution> University of Florida, </institution> <year> 1991. </year>
Reference-contexts: To make the primitives more general, we came up with several ways to manipulate a motion primitive so that it can be combined spatially and temporally with other primitives <ref> [39] </ref>. Using this concept, it is possible to build up a complete "motion library" that can be used in the graphical simulation of a high autonomy system.
Reference: [40] <author> Reynolds, C. </author> <title> Computer Animation with Scripts and Actors. </title> <booktitle> In Computer Graphics: SIGGRAPH '82 Conference Proceedings (Boston, </booktitle> <address> Massachusetts, </address> <year> 1982), </year> <month> ACM-SIGGRAPH, </month> <pages> pp. 289-296. </pages>
Reference-contexts: Furthermore, if a different motion is to be used, the program has to be completely rewritten. Script animation involves a specialized programming language that produces graphics and animation <ref> [40, 14, 47] </ref>.
Reference: [41] <author> Reynolds, C. </author> <title> Flocks, Herds, and Schools: A Distributed Behavior Model. </title> <booktitle> In Computer Graphics: SIGGRAPH '87 Conference Proceedings (Anaheim, </booktitle> <address> California, </address> <year> 1987), </year> <month> ACM-SIGGRAPH, </month> <pages> pp. 25-34. </pages>
Reference-contexts: The program is used to extract a stream of simpler actions (tasks) out of the natural language input, which are piped into the animation program. [Figure 6 about here.] 3.2.6 Motion Planning Motion planning involves algorithms that combine, blend, or organize individual motions into one <ref> [41, 48] </ref>, as well as the planning of an optimal, collision free path of motion in an arbitrary environment [8, 35]. Similar to natural language processing, there is much AI research involved.
Reference: [42] <author> Singh, M. </author> <title> Systems and Control Encyclopedia: Theory, Technology, and Applications. </title> <publisher> Pergammon Press, </publisher> <year> 1987. </year> <title> (8 Volume set). </title> <institution> TR93-016 Computer and Information Sciences, University of Florida 26 </institution>
Reference-contexts: Discrete event modeling is useful for representing a system's dynamics at a fairly high abstraction level, and therefore complex systems can be efficiently represented as a network or hierarchy of discrete event and continuous models [24, 20]. Key components of systems are well defined in the systems literature <ref> [42] </ref> and include state, event and time. The state of the system represents the condition of the system objects and varies over time. Events are specific points in time where the state changes.
Reference: [43] <author> Smith, A. </author> <title> Spline Tutorial Notes. Technical Memo No. 77. In SIGGRAPH '83 Tutorial Notes: Introduction to Computer Animation (New Orleans, Louisiana, </title> <booktitle> 1983), ACM-SIGGRAPH, </booktitle> <pages> pp. 64-75. </pages>
Reference-contexts: The computer is then used to calculate all in between frames by interpolating the individual DOFs using a spline curve technique [33]. The three most commonly used splines in animation are the Catmul-Rom spline [13], the Cardinal spline <ref> [43] </ref>, and the Hermite spline [37], because the curve passes through the spline control points. [Figure 5 about here.] 3.2.3 Dynamics The quality of an animation created with any of the techniques described so far greatly depends on the skill of the animator.
Reference: [44] <author> Sturman, D. </author> <title> Interactive keyframe animation of 3-D articulated models. </title> <booktitle> In Proceedings Graphics Interface '84 (Ottawa, </booktitle> <address> Canada, </address> <year> 1984), </year> <pages> pp. 35-40. </pages>
Reference-contexts: a more structured manner so that they do not have to worry about the low-level implementations. 3.2.2 Keyframe Animation Keyframe animation is one of the oldest computer animation techniques; since it was first introduced [11] it has become one of the most popular types of creating animations with a computer <ref> [44, 30, 25] </ref>. The concept is an extension of how animation is traditionally done in 2D, for instance, in an animated cartoon. Here, a figure is hand drawn on a transparency by the master animator only at key points in the movement (at the beginning and the end).
Reference: [45] <author> Sturman, D. </author> <title> A Discussion of the Development of Motion Control Systems. In SIG-GRAPH '87 Course 10, Computer Animation: 3-D Motion Secification and Control (Anaheim, </title> <address> California, </address> <year> 1987), </year> <month> ACM-SIGGRAPH, </month> <pages> pp. 1-15. </pages>
Reference-contexts: Programmed animation is used only if an animator requires a special effect, or if a specific motion is not handled by a general animation system <ref> [45] </ref>. The disadvantages are obvious: The user has to know a programming language, and the quality of the motion is directly tied to the quality of the programmer. Furthermore, if a different motion is to be used, the program has to be completely rewritten.
Reference: [46] <author> Takashima, Y., Shimazu, H., and Tomoto, M. </author> <title> Story Driven Animation. </title> <booktitle> In Proceedings Computer Human Interface and Graphics Interface '87 (1987), ACM SIGCHI, </booktitle> <pages> pp. 149-153. </pages>
Reference-contexts: For that reason many high level animation systems use a modified, simpler natural language. Esakov and Badler [17] take a Simon Says approach, using commands such as "John, look at switch tw-1." Another system <ref> [46] </ref> does not allow pronouns in the language at all, and events have to be listed in a sequential order. Badler et al. [5] describe a system that uses a natural language processor program as the front end to the animation system.
Reference: [47] <author> Thalmann, D., and Magnenat-Thalman, N. MIRA-SHADING: </author> <title> a language for the synthesis and the animation of realistic images. </title> <booktitle> In Frontiers in Computer Graphics. </booktitle> <publisher> Springer Verlag, </publisher> <address> New York, New York, </address> <year> 1984, </year> <pages> pp. 101-113. </pages> <editor> [48] van de Panne, M., Fiume, E., and Vranesic, Z. </editor> <title> Reusable Motion Synthesis Using State-Space Contollers. </title> <booktitle> In Computer Graphics: SIGGRAPH '90 Conference Proceedings (Dallas, </booktitle> <address> Texas, </address> <year> 1990), </year> <month> ACM-SIGGRAPH, </month> <pages> pp. 225-234. </pages>
Reference-contexts: Furthermore, if a different motion is to be used, the program has to be completely rewritten. Script animation involves a specialized programming language that produces graphics and animation <ref> [40, 14, 47] </ref>.
Reference: [49] <author> White, T. </author> <title> The Animator's Workbook, Step-by-Step Techniques of Drawn Animation. </title> <publisher> Watson-Guptill Publications, </publisher> <address> New York, New York, </address> <year> 1988. </year> <institution> TR93-016 Computer and Information Sciences, University of Florida 27 </institution>
Reference-contexts: Here, a figure is hand drawn on a transparency by the master animator only at key points in the movement (at the beginning and the end). All in between frames are then filled in by an assistant animator using artistic judgement <ref> [49] </ref>. In the 3D case, the actual mathematical parameters that describe the position and orientation of an object are used for the interpolation. These parameters represent the body's DOFs.
Reference: [50] <author> Wilhelms, J. </author> <title> Dynamics for Everyone. Appendix 1. In SIGGRAPH '87 Course 10, Computer Animation: 3-D Motion Specification and Control (Anaheim, </title> <booktitle> California, 1987), ACM SIGGRAPH, </booktitle> <pages> pp. 145-146. </pages>
Reference-contexts: One promising direction is dynamics which is concerned with applying the laws of physics to a computer model. There exist several techniques that describe the "equations of motion," such as the Newton-Euler, the Lagrangian [2, 15], the D'Alembert [31], the Gibbs-Appell [51], and the Armstrong notation <ref> [1, 50] </ref>. Dynamic simulation is capable of producing very realist looking motion, however the technique does suffer from a number of flaws: TR93-016 Computer and Information Sciences, University of Florida 9 1. All systems developed for high-level dynamic simulation, (i.e., for human [10] and insect gaits [28, 36]) are non-general.
Reference: [51] <author> Wilhelms, J. </author> <title> Using dynamic analysis for animation of articulated bodies. </title> <journal> IEEE Computer Graphics & Applications 7, </journal> <volume> 6 (1987), </volume> <pages> 12-27. </pages>
Reference-contexts: One promising direction is dynamics which is concerned with applying the laws of physics to a computer model. There exist several techniques that describe the "equations of motion," such as the Newton-Euler, the Lagrangian [2, 15], the D'Alembert [31], the Gibbs-Appell <ref> [51] </ref>, and the Armstrong notation [1, 50]. Dynamic simulation is capable of producing very realist looking motion, however the technique does suffer from a number of flaws: TR93-016 Computer and Information Sciences, University of Florida 9 1. <p> To teach the system a new movement, the program has to be changed. 2. The systems are often difficult to control: The animation has to be specified in term of forces and torques <ref> [51] </ref>, or boundary condition accelerations and velocities [53]. Both ways are unnatural for an animator. 3.2.4 Goal-Directed Animation In all of the systems described above, the animator is still forced to specify the motion in an unnatural way. Creating a natural animation system is the topic of goal-directed animation. <p> We are currently experimenting with the implementation of dynamic "filters" to enhance the realism. The objects are assigned masses and inertias, and the algorithm then computes accelerations on the spline curve. We are currently investigating the following three methods: * Constrain the dynamics to follow the spline path exactly <ref> [28, 51] </ref>. TR93-016 Computer and Information Sciences, University of Florida 19 * Constrain the dynamics to follow a path to some * tolerance.
Reference: [52] <author> Witkin, A., Fleischer, K., and Barr, A. </author> <title> Energy Constraints on Parameterized Models. </title> <booktitle> In SIGGRAPH '87, Computer Graphics (1987), </booktitle> <volume> vol. 24, </volume> <pages> pp. 225 - 232. </pages>
Reference-contexts: TR93-016 Computer and Information Sciences, University of Florida 19 * Constrain the dynamics to follow a path to some * tolerance. This is often achieved through the use of spring-like forces attached to the path <ref> [52] </ref>. * Constrain dynamics to pass through or near the keyframe points and use a method such as optimal control to obtain the path achieved by minimizing potential energy. Obtaining fast physical object responses within an easy-to-use animation system is an active research problem.
Reference: [53] <author> Witkin, A., and Kass, M. </author> <title> Spacetime Contraints. </title> <booktitle> In Computer Graphics: SIG-GRAPH '88 Conference Proceedings (Atlanta, Georgia, 1988), ACM-SIGGRAPH, </booktitle> <pages> pp. 159-168. </pages>
Reference-contexts: To teach the system a new movement, the program has to be changed. 2. The systems are often difficult to control: The animation has to be specified in term of forces and torques [51], or boundary condition accelerations and velocities <ref> [53] </ref>. Both ways are unnatural for an animator. 3.2.4 Goal-Directed Animation In all of the systems described above, the animator is still forced to specify the motion in an unnatural way. Creating a natural animation system is the topic of goal-directed animation. <p> In the case of physical simulation and dynamics, it is awkward for a human to specify the animation in terms of physical parameters <ref> [53, 1] </ref>. In other instances, a system may have been designed only for a special case [10].
Reference: [54] <author> Zeltzer, D. </author> <title> Motor Control Techniques For Figure Animation. </title> <journal> IEEE Computer Graphics & Applications 2, </journal> <volume> 9 (1982), </volume> <pages> 53-59. </pages>
Reference-contexts: The task level itself can be divided further into a hierarchy of smaller sub-systems in a top down fashion <ref> [54, 56, 10, 12, 57] </ref> as shown in figure 6. There are three major issues involved here [54]: natural language processing, motion planning, and motor control. <p> The task level itself can be divided further into a hierarchy of smaller sub-systems in a top down fashion [54, 56, 10, 12, 57] as shown in figure 6. There are three major issues involved here <ref> [54] </ref>: natural language processing, motion planning, and motor control. <p> Given all this knowledge, it is then possible for a program called the task manager <ref> [54] </ref> or task planner [17] to break down (or refine) a task even further into individual skills. Zeltzer [57] suggests using a skill lattice for the refinement. <p> Each skill can be seen as a different motor program. It has been shown that a skill can be modeled as a finite state automata (FSA). Figure 7 shows a simple FSA for walking. Several systems were build using this approach as a basis <ref> [54, 10, 9] </ref>. In previous implementation these motor programs were hardcoded as functions in a program, which made learning new skills and variations inflexible. [Figure 7 about here.] While these systems certainly represent the future, they are still in the experimental stage. <p> The skull is the same as used by Zeltzer <ref> [55, 54] </ref>. The renderer supports Phong shading, texture/bump/reflection mapping, metal and spot light effects. 4.4 Dynamics and Video Often, the animation produced by keyframing methods is not very realistic looking because it is non-physical in nature. We are currently experimenting with the implementation of dynamic "filters" to enhance the realism.
Reference: [55] <author> Zeltzer, D. </author> <title> Representation of Complex Animated Figures. </title> <booktitle> In Graphics Interface '82 (1982), </booktitle> <pages> pp. 205 - 211. </pages>
Reference-contexts: The skull is the same as used by Zeltzer <ref> [55, 54] </ref>. The renderer supports Phong shading, texture/bump/reflection mapping, metal and spot light effects. 4.4 Dynamics and Video Often, the animation produced by keyframing methods is not very realistic looking because it is non-physical in nature. We are currently experimenting with the implementation of dynamic "filters" to enhance the realism.
Reference: [56] <author> Zeltzer, D. </author> <title> Task Level Graphical Simulation of 3D Computer Animation. The Visual Computer: </title> <journal> The International Journal of Computer Graphics 1, </journal> <volume> 4 (1985), </volume> <pages> 249-259. </pages>
Reference-contexts: In such a system, the animator states a goal in natural language (i.e., "the man stands up and takes a book off the shelve"), and the system produces an animation by processing the text. Such a high level system can produce an intermediate level animation script file <ref> [56, 12, 17] </ref> distinguishing between task level and animation level (figure 6), or produce equational models [6, 7]. The animation level can be any of the animation systems described above. <p> The task level itself can be divided further into a hierarchy of smaller sub-systems in a top down fashion <ref> [54, 56, 10, 12, 57] </ref> as shown in figure 6. There are three major issues involved here [54]: natural language processing, motion planning, and motor control.

References-found: 55

