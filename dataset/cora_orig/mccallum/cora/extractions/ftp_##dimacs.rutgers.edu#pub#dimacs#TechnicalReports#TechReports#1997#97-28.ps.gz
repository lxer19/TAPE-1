URL: ftp://dimacs.rutgers.edu/pub/dimacs/TechnicalReports/TechReports/1997/97-28.ps.gz
Refering-URL: http://dimacs.rutgers.edu/TechnicalReports/1997.html
Root-URL: http://www.cs.rutgers.edu
Email: E-mail: joe@research.nj.nec.com  Email: erez@dimacs.rutgers.edu.  
Author: Joe Kilian Erez Petrank 
Keyword: Identity Escrow  
Address: P.O.Box 1179, Piscataway, NJ 08855.  
Affiliation: NEC Research Institute  DIMACS Center,  
Note: by  2 DIMACS post-doctoral fellow DIMACS is a partnership of Rutgers University, Princeton University, AT&T Labs, Bellcore, and Bell Labs. DIMACS is an NSF Science and Technology Center, funded under contract STC-91-19999; and also receives support from the New Jersey Commission on Science and Technology.  
Abstract: DIMACS Technical Report 97-28 July 1997 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Bellare and S. Goldwasser. </author> <title> Verifiable partial key escrow. </title> <booktitle> Proceedings of the Fourth Annual Conference on Computer and Communications Security, ACM, </booktitle> <year> 1997. </year> <note> Preliminary version appeared as Technical Report CS95-447, </note> <institution> Dept. of CS and Engineering, UCSD, </institution> <month> October </month> <year> 1995. </year>
Reference-contexts: A useful tool in our system is a zero knowledge test which verifies that a given pair of numbers a 1 ; a 2 2 <ref> [0; 1; : : : ; pq 1] </ref> satisfies that a 1 a 2 mod pq is a number in the range [0::p 1]. <p> A solution to this problem, for a general range, is given by Bellare and Goldwasser <ref> [1] </ref>; for greatest efficiency they use an improvement due to Cramer based on the techniques of [7]. In their scenario, the prover commits on the value a (which has to be in the right range) by committing on each of the bits in its binary representation.
Reference: [2] <author> M. Bellare and S. Goldwasser. </author> <title> Encapsulated key escrow. </title> <institution> MIT Laboratory for Computer Science Technical Report 688, </institution> <month> April </month> <year> 1996. </year>
Reference: [3] <author> M. Ben-Or, S. Goldwasser, and A. Wigderson. </author> <title> Completeness theorems for noncrypto-graphic fault-tolerant distributed computations. </title> <booktitle> In Proc. of the 20th Annu. Symposium on the Theory of Computing, </booktitle> <pages> pages 1-10, </pages> <year> 1988. </year> - <title> 16 - [4] "Efficient generation of shared RSA keys", </title> <note> Submitted to Crypto 97. </note>
Reference: [5] <author> G. Brassard, D. Chaum and C. Crepeau. </author> <title> Minimum Disclosure Proofs of Knowledge. </title> <booktitle> In JCSS, </booktitle> <pages> pages 156-189. </pages> <year> 1988. </year>
Reference-contexts: This implies that the escrowed identity does not reveal the certificate of the user. 3 Preliminaries We describe some of the basic building blocks we use in our protocol. 3.1 Bit Commitments We work in the argument framework of Brassard, Chaum and Crepeau <ref> [5] </ref>. In this paradigm, all parties are assumed to be computationally bounded. It is shown in [5] how to commit to bits in statistical zero-knowledge, based on the intractability of certain number-theoretic problems. <p> the certificate of the user. 3 Preliminaries We describe some of the basic building blocks we use in our protocol. 3.1 Bit Commitments We work in the argument framework of Brassard, Chaum and Crepeau <ref> [5] </ref>. In this paradigm, all parties are assumed to be computationally bounded. It is shown in [5] how to commit to bits in statistical zero-knowledge, based on the intractability of certain number-theoretic problems. D-amgard, Pedersen and Pfitzmann [8] give a protocol for efficiently committing to and revealing strings of bits in statistical zero-knowledge, relying only on the existence of collision-intractable hash functions.
Reference: [6] <author> D. Chaum, C. Crepau, and I. D-amgard. </author> <title> Multiparty unconditionally secure protocols. </title> <booktitle> In Proc. of the 20th Annu. ACM Symp. on the Theory of Computing, </booktitle> <pages> pages 11-19, </pages> <year> 1988. </year>
Reference: [7] <author> R. Cramer, I. Damg-ard and B. Schoenmakers. </author> <title> Proofs of partial knowledge and simplified design of witness hiding protocols. </title> <booktitle> Advances in Cryptology - CRYPTO '94 Proceedings, </booktitle> <pages> pp. 174-187. </pages> <booktitle> Lecture Notes in Computer Science #839, </booktitle> <address> Berlin: </address> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: A solution to this problem, for a general range, is given by Bellare and Goldwasser [1]; for greatest efficiency they use an improvement due to Cramer based on the techniques of <ref> [7] </ref>. In their scenario, the prover commits on the value a (which has to be in the right range) by committing on each of the bits in its binary representation.
Reference: [8] <author> I. D-amgard, T. Pedersen and B. Pfitzmann. </author> <title> On the Existence of Statistically Hiding Bit Commitment Schemes and Fail-Stop Signatures. </title> <booktitle> Advances in Cryptology - CRYPTO '93 Proceedings, </booktitle> <pages> pp. 250-265. </pages> <booktitle> Lecture Notes in Computer Science #773, </booktitle> <address> Berlin: </address> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: In this paradigm, all parties are assumed to be computationally bounded. It is shown in [5] how to commit to bits in statistical zero-knowledge, based on the intractability of certain number-theoretic problems. D-amgard, Pedersen and Pfitzmann <ref> [8] </ref> give a protocol for efficiently committing to and revealing strings of bits in statistical zero-knowledge, relying only on the existence of collision-intractable hash functions. This scheme is quite practical and is used heavily in our protocol. <p> This scheme is quite practical and is used heavily in our protocol. For simplicity, we will simply speak of committing to and revealing bits when referring to the protocols of <ref> [8] </ref>. For our RSA based implementation we also commit to strings by probabilistic encryption [14] using the public key of the escrow agency. These commitments are only computationally secure, but allow for the escrow agents to recover the values of these commitments.
Reference: [9] <author> Yvo Desmedt and Yair Frankel. </author> <title> Theshold cryptosystems. </title> <booktitle> Advances in Cryptology - CRYPTO '89 Proceedings, </booktitle> <pages> pp. 307-315. </pages> <address> Berlin: </address> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Thus, the possibilities for widespread abuse are greater than with our scenario. Nevertheless, it is only prudent to allow for multiple escrow agents; the escrow agents in our protocols can be made to work using simple group cryptography (e.g. <ref> [9, 21] </ref>). It might also be useful for the identity issuer to be implemented using group cryptography. For the RSA based scheme, the issuer needs to create a standard RSA public key, agree on a random string and perform RSA decryptions.
Reference: [10] <author> T. El Gamal. </author> <title> A Public Key Cryptosystem and a Signature Scheme Based on Discrete Logarithms. </title> <booktitle> Advances in Cryptology - CRYPTO '89 Proceedings, </booktitle> <pages> pp. 10-18. </pages> <address> Berlin: </address> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: This - 7 - allows for the escrow agents to recover the value of these commitment in addition to those revealed in the course of the zero-knowledge proof. 3.2 The El-Gamal signature and encryption schemes We base our implementation of escrowed identity on the El-Gamal signature and encryption schemes <ref> [10] </ref>, which we summarize, following [22], with slight modifications to suit our purposes. In both schemes, there is a common prime p, which for our purposes is of the form 2q + 1 where q is a prime. Let g 2 Z fl p have order q.
Reference: [11] <author> G. Davida, Y. Frankel, Y. Tsiounis and M. Yung. </author> <booktitle> Anonymity control in e-cash. In 1st Financial Cryptography conference, </booktitle> <address> Anguilla, BWI, </address> <year> 1997. </year> <note> Also available at http://www.ccs.neu.edu/home/yiannis/pubs.html. </note>
Reference: [12] <author> Y. Frankel, Y. Tsiounis and M. Yung. </author> <title> Indirect discourse proofs: achieving fair off-line e-cash. </title> <booktitle> In Advances in Cryptology, Proc. of Asiacrypt '96 (Lecture Notes in Computer Science 1163), </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1996, </year> <pages> pp. 286-300. </pages> <note> PUBLISHER = "Springer-Verlag", International patent pending. Available at http://www.ccs.neu.edu/home/yiannis/pubs.html </note>
Reference-contexts: Recently, all the necessary RSA operations (including setting up the public key) have been implemented in the group cryptography framework [4]. 1.3 Related work on electronic cash Some works on electronic commerce considered a similar problem. One particular such paper is by Frankel, Tsiounis and Yung <ref> [12] </ref>. In this work, a protocol is given for electronic cash transactions for which a trusted party can later reveal the identity of the payer. <p> The user of electronic cash is allowed to use his cash only once. If he uses his coins more than once, all guarantees for his privacy become invalid. Usually, two transcripts of such transactions allow efficient computation of the users identity. In the protocol of <ref> [12] </ref> this complete collapse of security does not happen, but still something bad happens: The verifier will be able to tell if a user identifies more than once. Namely, after a user identifies himself once, the verifier can tell whenever the user comes to visit again.
Reference: [13] <author> Y. Frankel and M. Yung. </author> <title> Escrow Encryption Systems Visited: Attacks, Analysis and Designs. </title> <booktitle> Advances in Cryptology - CRYPTO '95 Proceedings, </booktitle> <address> Berlin: </address> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: 1 Introduction Key escrow has proven an active and contentious field of research and discussion (c.f. <ref> [18, 19, 16, 13, 15, 17, 20] </ref>).
Reference: [14] <author> S. Goldwasser and S. Micali. </author> <title> Probabilistic Encryption. </title> <booktitle> In JCSS Vol 28(2), </booktitle> <pages> pages 270-299, </pages> <year> 1984. </year>
Reference-contexts: This scheme is quite practical and is used heavily in our protocol. For simplicity, we will simply speak of committing to and revealing bits when referring to the protocols of [8]. For our RSA based implementation we also commit to strings by probabilistic encryption <ref> [14] </ref> using the public key of the escrow agency. These commitments are only computationally secure, but allow for the escrow agents to recover the values of these commitments.
Reference: [15] <author> J. Kilian and F. T. Leighton. </author> <title> Fair Cryptosystems, Revisited. </title> <booktitle> Advances in Cryptology - CRYPTO '95 Proceedings, </booktitle> <address> Berlin: </address> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: 1 Introduction Key escrow has proven an active and contentious field of research and discussion (c.f. <ref> [18, 19, 16, 13, 15, 17, 20] </ref>).
Reference: [16] <author> F. T. Leighton. </author> <title> Failsafe key escrow systems. </title> <type> Technical Memo 483, </type> <institution> MIT Lab. for Computer Science, </institution> <month> August </month> <year> 1994. </year> <month> - 17 </month> - 
Reference-contexts: 1 Introduction Key escrow has proven an active and contentious field of research and discussion (c.f. <ref> [18, 19, 16, 13, 15, 17, 20] </ref>).
Reference: [17] <author> A. Lenstra, P. Winkler and Y. Yacobi. </author> <title> A Key Escrow System with Warrant Bounds. </title> <booktitle> Advances in Cryptology - CRYPTO '95 Proceedings, </booktitle> <address> Berlin: </address> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: 1 Introduction Key escrow has proven an active and contentious field of research and discussion (c.f. <ref> [18, 19, 16, 13, 15, 17, 20] </ref>).
Reference: [18] <author> S. </author> <title> Micali Fair public-key cryptosystems. </title> <booktitle> Advances in Cryptology - CRYPTO '92 Proceedings, </booktitle> <address> Berlin: </address> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: 1 Introduction Key escrow has proven an active and contentious field of research and discussion (c.f. <ref> [18, 19, 16, 13, 15, 17, 20] </ref>).
Reference: [19] <author> S. Micali. </author> <title> Fair public-key cryptosystems. </title> <type> Technical Report 579, </type> <institution> MIT Lab. for Computer Science, </institution> <month> September </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Key escrow has proven an active and contentious field of research and discussion (c.f. <ref> [18, 19, 16, 13, 15, 17, 20] </ref>).
Reference: [20] <author> S. Micali and R. </author> <title> Sydney. A Simple Method for Generating and Sharing Pseudo-Random Functions, with Applications to Clipper-like Key Escrow Systems. </title> <booktitle> Advances in Cryptology - CRYPTO '95 Proceedings, </booktitle> <address> Berlin: </address> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: 1 Introduction Key escrow has proven an active and contentious field of research and discussion (c.f. <ref> [18, 19, 16, 13, 15, 17, 20] </ref>).
Reference: [21] <author> A. De Santis, Y. Desmedt, Y. Frankel and M. Yung. </author> <title> How to Share a Function Securely (Extended Summary). </title> <booktitle> Proceedings of the Twenty-Sixth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pp. 522-533, </pages> <address> Montreal, Quebec, </address> <month> May 23-25, </month> <year> 1994. </year>
Reference-contexts: Thus, the possibilities for widespread abuse are greater than with our scenario. Nevertheless, it is only prudent to allow for multiple escrow agents; the escrow agents in our protocols can be made to work using simple group cryptography (e.g. <ref> [9, 21] </ref>). It might also be useful for the identity issuer to be implemented using group cryptography. For the RSA based scheme, the issuer needs to create a standard RSA public key, agree on a random string and perform RSA decryptions.
Reference: [22] <author> Schneier, B. </author> <year> (1993). </year> <title> Applied Cryptography. </title> <publisher> John Wiley. </publisher>
Reference-contexts: allows for the escrow agents to recover the value of these commitment in addition to those revealed in the course of the zero-knowledge proof. 3.2 The El-Gamal signature and encryption schemes We base our implementation of escrowed identity on the El-Gamal signature and encryption schemes [10], which we summarize, following <ref> [22] </ref>, with slight modifications to suit our purposes. In both schemes, there is a common prime p, which for our purposes is of the form 2q + 1 where q is a prime. Let g 2 Z fl p have order q.
Reference: [23] <author> Stinson, D. R. </author> <year> (1995). </year> <note> Cryptography Theory and Practice CRC Press. </note>
Reference-contexts: This assumption is plausible, but we do not know of any more standard assumptions that imply it. We remark that other weak forgeries (i.e., signing random messages) are known (see <ref> [23] </ref> Page 206-207). 3.3 The RSA encryption scheme In the RSA encryption scheme the public key consists of n = pq where p and q are prime and an exponent e, where e is relatively prime to n and (n).
References-found: 22

