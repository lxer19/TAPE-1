URL: http://www.win.tue.nl/win/cs/tt/paul/publ/csn.ps
Refering-URL: http://www.win.tue.nl/win/cs/tt/paul/cv.html
Root-URL: http://www.win.tue.nl
Phone: 2  
Title: Distributed real-time systems: a survey of applications and a general design model model is used
Author: P.C.N. van Gorp E.J. Luit D.K. Hammer E.H.L. Aarts 
Note: The  [8], which is being developed at the  
Address: Eindhoven, The Netherlands  Eindhoven, The Netherlands  
Affiliation: 1 Department of Mathematics and Computing Science, Eindhoven University of Technology,  Philips Research Laboratories,  Eindhoven University of Technology.  
Abstract: The design of dependable real-time systems is very complex and calls for computer aided support. Scheduling is one of the important stages in the design trajectory. The input of the scheduler should describe all relevant features of the application. The aims of this paper are twofold. Firstly, a survey is made of relevant timing characteristics in applications from different domains. Secondly, a model is presented which reflects all important concepts of dependable real-time systems (such as replication and communication). The model incorporates all the timing characteristics which are discussed in the survey. It is shown how different temporal behaviors can be expressed in the model. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Alstein and P.D.V. van der Stok. </author> <title> Hard real-time reliable multicast in the DEDOS system. </title> <institution> Lincoln, </institution> <address> New Hampshire, </address> <month> September </month> <year> 1993. </year> <booktitle> Third International Workshop on Responsive Systems, </booktitle> <address> Lincoln, New Hampshire, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: The exact start times of beads are chosen after the determination of the time intervals of blocks. Improving efficiency by using blocks can also be achieved in other ways. For example, in the execution of the reliable message protocol <ref> [1] </ref>, many short messages are exchanged between a number of processors. There is a small chance that these messages collide. Therefore it is not considered worthwhile to schedule all these communications in detail.
Reference: [2] <author> C. Bickford, M.S. Teo, G. Wallace, J.A. Stankovic, and K. Ramamritham. </author> <title> A robotic assembly application on the spring real-time system. </title> <institution> Umass Computer Science Technical Report 96-06, University of Massachusetts, </institution> <month> January </month> <year> 1996. </year>
Reference-contexts: It is possible to partition this computation into a number of tasks <ref> [2] </ref>. Any statement that would normally cause such a computation to block is known as a (re)scheduling point and forms a task boundary. Depending on the partitioning, precedence relations exist on the execution of different tasks.
Reference: [3] <author> G.D. Carlow. </author> <title> Architecture of the space shuttle primary avionics software system. </title> <journal> Communications of the ACM, </journal> <volume> 27(9) </volume> <pages> 926-936, </pages> <month> September </month> <year> 1984. </year>
Reference-contexts: Start and completion of different processes and their associated I/O behaviors have to be synchronized such that overruns in the system do not occur <ref> [3] </ref>. An aircraft control system also contains sensors and actuators. Output to the actuators must be generated with specified frequency, i.e. the task (process) that controls an actuator should be executed periodically.
Reference: [4] <author> F. Cristian, H. Aghili, R. Strong, and D. Dolev. </author> <title> Atomic broadcast: from simple message diffusion to byzantine agreement. </title> <type> Technical Report RJ5244, </type> <institution> IBM Research Lab, </institution> <address> San Jose, CA, </address> <month> December </month> <year> 1989. </year> <note> An earlier version was published as RJ4540. </note>
Reference: [5] <author> A.F.W. Gouder de Beauregard. </author> <title> Object assignment in real-time systems; a case study in DEDOS. </title> <type> Master's thesis, </type> <institution> Eindhoven University of Technology, </institution> <month> August </month> <year> 1996. </year>
Reference-contexts: Therefore, the problem has to be decomposed. To this end, there are several possibilities. It is the subject of further research to design effective decompositions and to solve the resulting subproblems. One solution strategy for the distribution and communication subproblems is treated in <ref> [5] </ref>. Apart from this, there are some other interesting open problems. One is the influence of data dependency on the scheduling problem. For example, an if-statement in a DEAL program is translated into a branch in the execution graph.
Reference: [6] <author> G. Essink, E. Aarts, R. van Dongen, P. van Gerwen, J. Korst, and K. Vissers. </author> <title> Scheduling in programmable Video Signal Processors. </title> <booktitle> In Proceedings of the IEEE International Conference on Computer-Aided Design, </booktitle> <pages> pages 284-287, </pages> <year> 1991. </year>
Reference: [7] <author> D.K. Hammer. </author> <title> Process-oriented development of embedded systems; modeling behavior and dependability. </title> <note> To be published, </note> <year> 1997. </year>
Reference-contexts: If in each activity the beads 23 that correspond to file handling are grouped into a block, and if these blocks are executed under mutual exclusion, then the consistency of the file is guaranteed. This view on the use of blocks corresponds to the use of transactions in <ref> [7] </ref>. To assure mutual exclusion, corresponding constraints are needed.
Reference: [8] <author> D.K. Hammer, P. Lemmens, E. Luit, O.S. van Roosmalen, P. van der Stok, and J. Ver-hoosel. DEDOS: </author> <title> A distributed environment for object-oriented real-time systems. </title> <address> Dallas, Texas, USA, </address> <month> October </month> <year> 1994. </year> <booktitle> 1st Workshop on Concurrent Object-Based Systems (COBS) at the 6th IEEE Symposium on Parallel and Distributed Processing (SPDP), </booktitle> <address> Dallas, Texas, USA, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: 1 Introduction The DEpendable Distributed Operating System (DEDOS) project <ref> [8] </ref> is concerned with dependable distributed real-time systems. The development of techniques and algorithms for the design of these systems is the main purpose of the project. Nowadays, the use of dependable distributed real-time systems is growing fast, for example in the field of embedded systems.
Reference: [9] <author> H. Kasahara and S. Narita. </author> <title> Parallel processing of robot-arm control computation on a multimicroprocessor system. </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> 1(2) </volume> <pages> 104-113, </pages> <month> June </month> <year> 1985. </year>
Reference-contexts: The problem of computing robot motions can be formulated as a multiprocessor scheduling problem, to minimize the overall execution time, where the tasks with different execution times have precedence relations and are allocated to a number of processors <ref> [9] </ref>. 2.2.2 Computer vision Computer vision deals with the recognition of structures or objects in a scene, within a restricted amount of time. Examples include part and position recognition, weather analysis, analysis of currents of fluids, and molecular dynamics.
Reference: [10] <author> P.E.R Lippens, J.L. van Meerbergen, A. van der Werf, W.F.J. Verhaegh, B.T. Sweeney, J.O. Huisken, and O.P. McArdle. PHIDEO: </author> <title> A silicon compiler for high speed algorithms. </title> <booktitle> In Proceedings of the European Conference on Design Automation, </booktitle> <pages> pages 436-441, </pages> <year> 1991. </year>
Reference: [11] <author> J.D. Schoe*er. </author> <title> Distributed computer systems for industrial process control. </title> <journal> IEEE Computer, </journal> <volume> 17(2) </volume> <pages> 11-18, </pages> <month> February </month> <year> 1984. </year>
Reference-contexts: The rejection mechanism may only be activated after a given amount of time has elapsed once the corresponding image is processed. This introduces constraints on the delay between different tasks. 2.2.3 Sensing In industrial systems, data of the process under control is acquired by means of sensors <ref> [11] </ref>. These sensors are scanned, sampled and digitized at rates as fast as 10 times per second. Even higher rates may occur in the sensing of certain physical or chemical processes, such as those in nuclear power plants. Periodic scanning is one way of performing measurements.
Reference: [12] <author> A.D.H. Thomas, M.G. Rodd, J.D. Holt, and C.J. Neill. </author> <title> Real-time industrial visual inspection: A review. </title> <booktitle> Real-Time Imaging, </booktitle> (1):139-158, 1995. 
Reference-contexts: Because output has to be produced within a reasonable amount of time, this could lead to 10 11 10 13 operations per second. So, a high throughput has to be achieved using parallel processing. One application of computer vision is automated visual inspection (AVI) <ref> [12] </ref>. Objects are moved on a conveyor belt for inspection (figure 1). Depending on the result of the inspection, some operation may be performed on the objects (for example the removal of cherry-stones from cherries or the filleting of fish in food processing industries).
Reference: [13] <author> G.J.W. van Dijk. </author> <title> The Design of the EMPS Multiprocessor Executive for Distributed Computing. </title> <type> PhD thesis, </type> <institution> Eindhoven University of Technology, </institution> <year> 1993. </year> <month> 30 </month>
Reference: [14] <author> O.S. van Roosmalen. </author> <title> DEAL: an object-oriented language for distributed real-time sys-tems. Dana Point, </title> <address> CA, USA, </address> <month> October </month> <year> 1994. </year> <title> Int. Workshop on Object-Oriented Real-Time Dependable Systems (WORDS), Dana Point, </title> <address> CA, USA, </address> <month> October </month> <year> 1994. </year>
Reference: [15] <author> W.F.J. Verhaegh. </author> <title> Multidimensional periodic scheduling. </title> <type> PhD thesis, </type> <institution> Eindhoven University of Technology, </institution> <month> December </month> <year> 1995. </year>
Reference-contexts: Periodicity can be encountered in many places in DSP applications. For example, television images are constructed by periodically projecting pixels, i.e. an operation is performed for each pixel in a row and for each row in a frame at a certain (predefined) rate or period <ref> [15] </ref> (for example, 64 s per line and 74.1 ns between consecutive pixels in one line). This period implicitly defines a deadline for each execution of the operation. Another example of periodicity is the decoding of scrambled information used in the D2MAC standard.
Reference: [16] <author> J.P.C. Verhoosel. </author> <title> Pre-Run-Time Scheduling of Distributed Real-Time Systems. </title> <type> PhD thesis, </type> <institution> Eindhoven University of Technology, </institution> <year> 1995. </year>
Reference-contexts: In principle, this model can be extended for soft real-time scheduling. For this purpose, the notation can be easily extended with value functions. An earlier version of this model is presented in <ref> [16] </ref>. In contrast with that model, replication is part of the current model, apart from other differences in the level of detail. The model presented in this paper will be used in the development of scheduling algorithms for the DEDOS design environment.
Reference: [17] <author> B.J.J. Verhulst. </author> <title> Specification of time constraints for SPRINT. </title> <type> Master's thesis, </type> <institution> Eindhoven University of Technology, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: This period implicitly defines a deadline for each execution of the operation. Another example of periodicity is the decoding of scrambled information used in the D2MAC standard. Every 10 seconds a new decoding scheme is provided. This introduces a periodic timing constraint for this task <ref> [17] </ref>. Other timing constraints arise from the interactive part of multimedia systems. Although the interactions between the system and the user typically have soft real-time characteristics, also stricter timing constraints have to be met as well.
Reference: [18] <author> J.H. Wensley, L. Lamport, J. Goldberg, M.W. Green, K.N. Levitt, P.M. Melliar-Smith, R.E. Shostak, and C.B. Weinstock. SIFT: </author> <title> Design and analysis of a fault-tolerant computer for aircraft control. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 66(11) </volume> <pages> 1240-1255, </pages> <month> October </month> <year> 1978. </year>
Reference-contexts: The iteration rates required by different tasks differ, but they can be adjusted somewhat to simplify the scheduling. The time needed to execute an iteration of a task is highly predictable, so it can be assumed that these are given <ref> [18] </ref>. Furthermore, precedence relations between tasks also occur. 3 Timing and Precedence Constraints In this section, the different timing and precedence constraints are examined for a number of the applications of the previous section.
Reference: [19] <author> H.H.H. Wevers. </author> <title> Reliable HRT intra-node multipoint RPC in DEDOS. </title> <type> Master's thesis, </type> <institution> Eindhoven University of Technology, </institution> <month> October </month> <year> 1995. </year> <month> 31 </month>
Reference-contexts: The extended set of TPCs is denoted by TPC 0 . The way in which the communication behavior is influenced by the introduction of replicated beads and objects depends on the communication protocol used. A reliable communication mechanism based on replicated mailboxes is discussed in <ref> [19] </ref>. Because a discussion of such communication protocols is not the subject of this paper, it is assumed that it is known how the communication between replicated beads is established, i.e. functions BCM and BDS are suitably extended into functions BCM 0 and BDS 0 respectively.
References-found: 19

