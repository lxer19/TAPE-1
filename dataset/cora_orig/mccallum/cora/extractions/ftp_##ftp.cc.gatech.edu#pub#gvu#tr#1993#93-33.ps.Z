URL: ftp://ftp.cc.gatech.edu/pub/gvu/tr/1993/93-33.ps.Z
Refering-URL: http://www.cs.gatech.edu/gvu/reports/1993/
Root-URL: 
Email: -kb, noi-@cc.gatech.edu  
Title: Animating User Interfaces Using Animation Servers and store, and often fail to exploit the presence
Author: Krishna Bharat Piyawadee Noi Sukaviriya 
Keyword: User interface animation, animation server, extensible interfaces, multimedia, context-sensitivity, application state, CSCW  
Note: EMULATING THE USER The emulation of the user could occur at various levels:  
Address: Atlantic Drive  Atlanta, GA 30332  
Affiliation: Graphics, Visualization and Usability Center College of Computing,  Georgia Institute of Technology  
Abstract: Animated demonstration systems such as MacroMind Director [6] are becoming popular. Our notion of animation is more restricted. We define user interface animation as the process of emulating the interaction of a user with the interface. The interaction should be real, in the sense that it should engage the actual application. Such systems are powerful because of their ability to invoke actions, and expressive because they can be used to demonstrate interaction techniques. The effect of the presentation may be enhanced by displaying the behavior of input devices audio-visually. In this paper we present the architecture of a general purpose tool for user interface animation - the animation server. Although designed for the X environment [14] the tool has applicability to other environments as well. 1. Application Level: The emulator could invoke application actions directly. Many architectures allow one application to drive another by some internal mechanism such as Apple Events [21]. Since interaction is not being shown, this does not conform to our definition of animation. 2. Interface Level: The emulator could trigger interface actions and make widgets provide appropriate feedback. The emulator may be integrated with the UIMS (user interface management system) that implements the interface. 3. Window System: Input events could be delivered to the interface via the window system. The emulator could be integrated with the window system. ABSTRACT Our approach to user interface animation involves simulating the interaction of a user with the interface by synthetically generating the input events that drive the session. The interaction is made explicit by displaying the behavior of input devices audio-visually. Such animation is both educational and functional, and has the potential to become a powerful new medium in the graphical user interface domain. We describe the construction of a general purpose tool for animating user interfaces - the animation server. Clients drive the server with textual scripts that describe the interaction. These may contain constructs for obtaining application context information at runtime and synchronizing with other media servers. We present a few potential applications for animation servers, including a groupware package for loosely coupled collaboration. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Bach, M.J., </author> <title> The Design of the UNIX Operating System, </title> <publisher> Prentice-Hall Inc., </publisher> <year> 1986. </year>
Reference-contexts: The A-shell is typically spawned by the application, which also appoints any media-servers and infoservers required in the presentation. Every process maintains an input queue for interprocess communication. All communication is in the form of typed messages supported by UNIX 1 System V message queues <ref> [1] </ref>. The queues allow blocking, non-blocking and selective access to messages. The programmers interface to the animation server is a library of routines to drive the A-shell and register call-backs. The application may the drive the A-shell syn 1.
Reference: 2. <author> Cypher, A. EAGER: </author> <title> Programming Repetitive Tasks by Example, </title> <booktitle> in CHI 91 Conference Proceedings (May 1991), </booktitle> <pages> pp. 33-39. </pages>
Reference-contexts: The disadvantage is that the events being generated are low level, and so is the programmers interface. RELATED WORK Commercial record-and-playback macro packages like Tempo II [11] and Microsofts Recorder [8] work at the level of window system while most programming by demonstration systems like Metamouse [7], Eager <ref> [2] </ref> and Chimera [5] work at the interface level. Triggers [13] is a system-wide macro facility on the Macintosh that generates keyboard and mouse events and uses pixel-level pattern matching to obtain context. Cartoonist [17] is a context-sensitive animated help system integrated with the UIMS.
Reference: 3. <author> Knister, M.J. and Prakash, A. DistEdit: </author> <title> A Distributed Toolkit for Supporting Multiple Group Editors, </title> <booktitle> in CSCW 90 Conference Proceedings (1992). </booktitle>
Reference-contexts: DistEdit <ref> [3] </ref> is an example of a toolkit that allows heter-ogeneous applications to collaborate using a common language for application actions. Periodically, each site transmits updates (translated application actions) over the network to other sites, where they get buffered.
Reference: 4. <author> Kosbie, D. S. and Myers, B. A., </author> <title> A SystemWide Macro Facility Based on Aggregate Events </title> : 
Reference-contexts: In Metamouse and Eager, an agent within the application infers procedures from interface actions and performs actions autonomously, when a familiar sequence is detected. Kosbie and Myers <ref> [4] </ref> suggest the use of event hierarchies to relate high-level semantic events with the low-level events that drive the session. IMPLEMENTATION Background The animation server described in this paper evolved from a tool called the animator, implemented in an experiment to compare various forms of multimedia help [18].
References-found: 4

