URL: http://www.cs.mu.oz.au/tr_db/mu_92_27.ps.gz
Refering-URL: http://www.cs.mu.oz.au/tr_db/TR.html
Root-URL: 
Title: Aditi-Prolog language manual  
Author: James Harland David B. Kemp Tim S. Leask Kotagiri Ramamohanarao John A. Shepherd Zoltan Somogyi Peter J. Stuckey Jayen Vaghani 
Abstract: Aditi is a deductive database system under development at the Collaborative Information Technology Research Institute by researchers from the University of Melbourne. The main language in which users interact with Aditi is Aditi-Prolog. This document is a reference manual for Aditi-Prolog. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> I. Balbin and K. Ramamohanarao. </author> <title> A generalization of the differential approach to recursive query evaluation. </title> <journal> Journal of Logic Programming, </journal> <volume> 4(3) </volume> <pages> 259-262, </pages> <year> 1987. </year>
Reference-contexts: The optimizations implemented via evaluation methods are: diff This flag requests differential evaluation for the named predicate. This method is also called semi-naive; it is described in <ref> [1] </ref>. This flag exists only for completeness since differential evaluation is the default. This evaluation method is applicable to all recursive predicates. nodiff This flag requests non-differential (i.e. naive) evaluation for the named predicate.
Reference: [2] <author> F. Bancilhon, D. Maier, Y. Sagiv, and J. Ullman. </author> <title> Magic sets and other strange ways to implement logic programs. </title> <booktitle> Proceedings of the Fifth Symposium on Principles of Database Systems, </booktitle> <pages> pages 1-15, </pages> <year> 1986. </year>
Reference-contexts: The optimizations implemented via program transformations are: magic This flag requests that the magic set transformation (described in <ref> [2, 3] </ref>) be performed on the named predicate. Specifying this flag for a predicate also implicitly specifies it for other predicates the named predicate is mutually recursive with and for other predicates in the same module (see next section).
Reference: [3] <author> C. Beeri and R. Ramakrishnan. </author> <title> On the power of magic. </title> <booktitle> Proceedings of the Sixth ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 269-283, </pages> <month> March </month> <year> 1987. </year>
Reference-contexts: This flag is not strictly necessary, since this behavior is the default. The suffix "sips" shared by these flag names stands for sideways information passing strategy (see <ref> [3] </ref>). If a predicate is available in only one mode, the leftrightsips flag allows the programmer to define precisely the order in which calls in the body are evaluated. However, the programmer may wish to do likewise even for predicates that are available in more than one mode. <p> The optimizations implemented via program transformations are: magic This flag requests that the magic set transformation (described in <ref> [2, 3] </ref>) be performed on the named predicate. Specifying this flag for a predicate also implicitly specifies it for other predicates the named predicate is mutually recursive with and for other predicates in the same module (see next section).
Reference: [4] <author> J. Harland, D. B. Kemp, T. S. Leask, K. Ramamohanarao, J. Shepherd, Z. Somogyi, P. J. Stuckey, and J. Vaghani. </author> <title> Aditi users' guide. </title> <type> Technical Report 92/26, </type> <institution> Department of Computer Science, University of Melbourne, </institution> <month> November </month> <year> 1992. </year>
Reference-contexts: The other documents are: * "An introduction to the Aditi deductive database system" [11]. This is an overview of the Aditi system. It introduces the concepts behind Aditi and describes its structure as well as its main components. * "Aditi users' guide" <ref> [4] </ref>. This is an introductory guide to the Aditi system and its commands. * "Experiences with a flights database" [5]. This describes one application of Aditi. All four documents are distributed together with Aditi.
Reference: [5] <author> J. Harland and K. Ramamohanarao. </author> <title> Experiences with a flights database. </title> <type> Technical Report 92/28, </type> <institution> Department of Computer Science, University of Melbourne, </institution> <month> November </month> <year> 1992. </year>
Reference-contexts: This is an overview of the Aditi system. It introduces the concepts behind Aditi and describes its structure as well as its main components. * "Aditi users' guide" [4]. This is an introductory guide to the Aditi system and its commands. * "Experiences with a flights database" <ref> [5] </ref>. This describes one application of Aditi. All four documents are distributed together with Aditi. This users' guide assumes familiarity with the first two of these documents and provides the background necessary for the third.
Reference: [6] <author> D. B. Kemp, K. Ramamohanarao, and Z. Somogyi. Right-, </author> <title> left-, and multi-linear rule transformations that maintain context information. </title> <booktitle> Proceedings of the Sixteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 380-391, </pages> <month> August </month> <year> 1990. </year> <month> 26 </month>
Reference-contexts: This transformation is applicable to all recursive predicates that have at least one input argument. context This flag requests that the context transformation (described in <ref> [6] </ref>) be performed on the named predicate. The transformation is applicable only to predicates all of whose rules are either non-recursive or left-, right- or multi-linear (see that paper for details).
Reference: [7] <author> G. Port, I. Balbin, and K. Ramamohanarao. </author> <title> A new approach to supplementary magic optimisation. </title> <booktitle> Proceedings of the First Far-East Workshop on Future Database Systems, </booktitle> <pages> pages 89-104, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: This evaluation method is applicable to all recursive predicates. msi This flag requests the evaluation method known as the magic set interpreter for the named predicate (see <ref> [7] </ref> for a description). This evaluation method is applicable to all recursive predicates that have at least one input argument. psn This flag requests the evaluation method known as predicate semi-naive for the named predicate (see [8] for details).
Reference: [8] <author> R. Ramakrishnan, D. Srivastava, and S. Sudarshan. </author> <title> Rule ordering in bottom-up fixpoint evaluation of logic programs. </title> <booktitle> Proceedings of the Sixteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 359-371, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: This evaluation method is applicable to all recursive predicates that have at least one input argument. psn This flag requests the evaluation method known as predicate semi-naive for the named predicate (see <ref> [8] </ref> for details). This evaluation method is based on semi-naive evaluation but makes the results of computations available as early as possible.
Reference: [9] <author> D. Sacca and C. Zaniolo. </author> <title> Implementation of recursive queries for a data language based on pure horn logic. </title> <booktitle> Proceedings of the Fourth International Conference on Logic Programming, </booktitle> <pages> pages 104-135, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: This transformation is applicable to all recursive predicates that have at least one input argument. supmagic This flag requests that the supplementary magic set transformation (described in <ref> [9] </ref>) be performed on the named predicate. Specifying this flag for a predicate also implicitly specifies it for other predicates the named predicate is mutually recursive with and for other predicates in the same module (see next section).
Reference: [10] <author> P. J. Stuckey, T. S. Leask, and K. Ramamohanarao. </author> <title> Exploiting parallelism in bottom-up computation in aditi. </title> <booktitle> Proceedings of the ILPS '91 Workshop on Deductive Databases, </booktitle> <month> October </month> <year> 1991. </year>
Reference-contexts: This evaluation method is applicable to all recursive predicates, but it is usually not worthwhile applying it to predicates that are not involved in mutual recursion. 11 parallel This flag requests that independent tasks should be evaluated in parallel using the fork-join scheme described in <ref> [10] </ref>. In this scheme, the DAP can start several RAP operations at once, then wait for them all to finish. This evaluation method is applicable to all predicates, but it is usually not worthwhile applying it to predicates without multiple rules.
Reference: [11] <author> J. Vaghani, K. Ramamohanarao, D. B. Kemp, Z. Somogyi, and P. J. Stuckey. </author> <title> Design overview of the aditi deductive database system. </title> <booktitle> Proceedings of the Seventh International Conference on Data Engineering, </booktitle> <pages> pages 240-247, </pages> <month> April </month> <year> 1991. </year> <month> 27 </month>
Reference-contexts: This document is an introductory guide to the Aditi system. It is one of four documents describing Aditi. The other documents are: * "An introduction to the Aditi deductive database system" <ref> [11] </ref>. This is an overview of the Aditi system. It introduces the concepts behind Aditi and describes its structure as well as its main components. * "Aditi users' guide" [4]. This is an introductory guide to the Aditi system and its commands. * "Experiences with a flights database" [5].
References-found: 11

