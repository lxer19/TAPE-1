URL: http://www.cis.upenn.edu/~switchware/papers/sware.ps
Refering-URL: http://www.cis.upenn.edu/~switchware/home.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: SwitchWare: Towards a 21st Century Network Infrastructure  network built from SwitchWare switches is an active network.  
Author: J. M. Smith, D. J. Farber, C. A. Gunter, S. M. Nettles, Mark E. Segal, W. D. Sincoskie, D. C. Feldmeier* and D. Scott Alexander. 
Note: A  
Abstract: SwitchWare is a set of software technologies which will enable rapid development and deployment of new network services. By making the basic network service selectable on a per user (or even per packet) basis, the need for formal standardization is eliminated. Additionally, by making the basic network service programmable, the deployment times, today constrained by capital funding limitations, are tremendously reduced (to the order of software distribution times). Finally, by constructing an advanced, robust programming environment, even the service development time can be reduced. A SwitchWare switch consists of input and output ports controlled by a software-programmable element; programs are contained in sequences of messages sent to the SwitchWare switch's input ports, which interpret the messages as programs called ``Switchlets''. This accelerates the pace of network evolution, as ev olving user needs can be immediately reflected in the network infrastructure. Immediate reconfigurability also enhances the adaptability of the network infrastructure to unexpected situations. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> CERT Advisory CA-96.21: </author> <title> TCP SYN Flooding and IP Spoofing Attacks, Software Engineering Institute Computer Emergency Response Team, </title> <address> Pittsburgh, PA (Sep. 19, </address> <year> 1996). </year> <month> ftp://info.cert.org/pub/cert_advisories/CA-96.21.tcp_syn_flooding </month>
Reference-contexts: SCANs can perform autonomous local activities which lead to a desired global behavior. For example, consider a denial-of-service attack based on repeated attempts to open a TCP connection without subsequent action <ref> [1] </ref>. A SCAN could specify TCP's expected behavior [46] using a state graph in which a SYN must result in further actions, e.g., a SYN-ACK reply followed by an ACK. When intermediate SCAN nodes see an invalid state sequence (SYN, SYN,...) they can discard subsequent packets.
Reference: [2] <author> D. Scott Alexander, Marianne Shaw, Scott M. Nettles, and Jonathan M. Smith, </author> <title> ``Active Bridging,'' </title> <booktitle> in Proceedings, ACM SIGCOMM Conference, </booktitle> <address> C annes, </address> <month> FR (October </month> <year> 1997), </year> <pages> pp. 101-111. </pages>
Reference-contexts: Thus CAML is the Switchlet language, CAML bytecodes are the wire language, and C (in the form of a LINUX kernel) is the infrastructure language. The system is running today on a 4 processor HP Netserver with 166 Mhz Pentium processors <ref> [2] </ref>, and we expect to have IP routing features operational to report in a final paper. The idea with the multiprocessor is that the processors act simultaneously as port controllers and execution engines for the language. 8.
Reference: [3] <author> J. Armstrong, M. Williams, and R. Virding, </author> <title> Concurrent Programming in Erlang, </title> <publisher> Prentice Hall (1993). </publisher> <address> ISBN 13-285792-8 </address>
Reference-contexts: The nodes were supported by a small operating system, which protected the network elements, e.g., to prevent buggy programs from destroying the packet-switching fabric. The focus was proof-of-concept rather than a wholesale change in network infrastructure, models and run-time support. - 14 - Erlang <ref> [3] </ref> is a concurrent functional programming language for large industrial real-time systems, providing transparent cross-platform distribution, primitives for detecting run-time errors, real-time GC, and dynamic code replacement. Erlang has been deployed in switches built by Ericsson. It does not provide the strong static type checking we propose in our approach.
Reference: [4] <editor> Ruzena Bajcsy, David J. Farber, Richard P. Paul, and Jonathan M. Smith, ``Gigabit Teler obotics: </editor> <booktitle> Applying Advanced Information Infrastructure,'' in 1994 International Symposium on Robotics and Manufacturing, </booktitle> <address> Maui, </address> <month> HI (August </month> <year> 1994). </year>
Reference-contexts: Subnet-specific compression, as bandwidth and latency characteristics dictate how much effort should be spent compressing. Data type-specific routing and stream synchronization. As an example video frames might choose a higher bandwidth link with a greater loss rate, while motion control streams for interactive telerobotics <ref> [4] </ref> would select a path with low b andwidth but high reliability and low delay jitter. - 10 - 4.
Reference: [5] <author> Brian Bershad, Stefan Savage, Przemyslaw Pardyak, Emin Gun Sirer, David Becker, Marc Fiuczynski, Craig Chambers, and Susan Eggers, </author> <title> ``Extensibility, Safety and Performance in the SPIN Operating System,'' </title> <booktitle> in Proceedings of the 15th ACM Symposium on Operating System Principles (SOSP-15), </booktitle> <address> Copper Mountain, CO (December 1995), </address> <pages> pp. 267-284. </pages>
Reference-contexts: All communication functions, such as connection setup/tear-down, were performed by sending blocks of executable LISP code to various processor platforms in the network. There was no formal model and no abstraction useful for security and interoperability validation developed. The SPIN <ref> [5] </ref> Project is an effort to build extensible operating systems kernels, with the idea that type-safe Modula-3 code could be loaded into an operating system for reasons of performance or access to resources.
Reference: [6] <author> E. Biagioni, </author> <title> ``A Structured TCP in Standard ML,'' </title> <booktitle> in Proceedings, 1994 SIGCOMM Con ference, </booktitle> <address> London, UK (Aug. </address> <booktitle> 31st - Sep. 2nd, </booktitle> <year> 1994), </year> <pages> pp. 36-45. - 17 </pages> - 
Reference-contexts: To somewhat oversimplify, the research group at CMU has been focused on evangelizing SML to the systems community, and they hav e been doing this by focusing on interesting problems such as writing a TCP/IP in Standard ML <ref> [6] </ref>. We look at the CMU work as providing tools.
Reference: [7] <author> Nathaniel S. Borenstein, </author> <title> ``Computational Mail as Network Infrastructure for Computer Supported Cooperative Work,'' </title> <booktitle> in Proceedings, Computer Supported Cooperative Work Conference, </booktitle> <address> Toronto, CANADA (1992). </address>
Reference-contexts: These pauses are a substantial reason for high-level languages not being used for performance critical applications [33]. These techniques are applicable to other garbage-collected languages like Java and should greatly improve the performance of garbage-collected languages, and allow s ignifi-cant speedups on multiprocessors. 6. Related research Borenstein's ATOMICMAIL <ref> [7] </ref> system used LISP functions embedded in electronic mail messages, to support overlay functions such as automatically generated mailing lists and software distribution via e-mail. Considerable value stemmed from combining message transport with programs applied to interpreting the messages, especially for widely heterogeneous user environments.
Reference: [8] <author> Vinton G. Cerf, </author> <title> ``Multiprocessors, Semaphores and a Graph Model of Computation,'' </title> <type> Technical Report UCLA-ENG-7223, </type> <institution> University of California, </institution> <address> Los Angeles, Los Angeles, CA (April, </address> <year> 1972). </year> <type> Ph.D. Thesis </type>
Reference-contexts: Active Network technology can be used to construct survivable network infrastructures based on the idea of ``self-checking'' systems. The basic approach is to use high-level specifications to generate Active Network programs that can be used to self-check the operation of the network. As suggested by early work of Cerf <ref> [8] </ref>, Farber, and Postel [37], protocols are represented as graphs that show the protocol's flow of control and message emissions. Distributed systems use such protocols to operate over the network, giving rise to a ``protocol graph,'' a common and powerful formal representation of protocols.
Reference: [9] <institution> System Security Study Committee - National Research Council, </institution> <note> Computers at Risk: Safe Computing in the Information Age, National Academy Press (1991). </note>
Reference-contexts: Security failures can include unauthorized viewing of information, denial of service [32], and insertion of false information. These sorts of failures <ref> [9] </ref> will become more common unless security is designed into a system.
Reference: [10] <author> G. Davida, Y. Desmedt, and B. Matt, </author> <title> ``Defending Systems Against Viruses through Crypto graphic Authentication,'' </title> <booktitle> in Proceedings, IEEE Symposium on Security and Privacy (1989), </booktitle> <pages> pp. 312-318. </pages>
Reference-contexts: Several authors have addressed the need for secure object storage [15] in such an environment, and new cryptographic technologies <ref> [10] </ref> for digital signatures are applicable to this environment; in particular a type-checked module can be stored in a machine-independent form, which is then either signed directly or supported by a secure hashing algorithm.
Reference: [11] <author> D. Dean and D. Wallach, </author> <title> ``Security Flaws in the HotJava Web Browser,'' </title> <type> Technical Report, </type> <institution> Princeton University, Computer Science (November 3rd, </institution> <year> 1995). </year>
Reference-contexts: Thus a key question in the design of SwitchWare is how t his power can be provided safely. 4.2. Systems Security and Programming Environments Familiarity with the Internet Worm [42] or recent security problems <ref> [11] </ref> found in systems such as Netscape's Web browser and the Java [26] highlight the importance of security in distributed computing. Although these problems manifested themselves as security breaches, many of them were a result of the lack of safety features in the programming language, notably C.
Reference: [12] <author> S. Deering, D. Estrin, D. Farinacci, V. Jacobson, C.-G. Liu, and L. Wei, </author> <title> ``An Architecture for Wide-Area Multicast Routing,'' </title> <booktitle> in Proceedings, 1994 SIGCOMM Conference, L ondon, UK (Aug. 31st - Sep. 2nd, </booktitle> <year> 1994), </year> <pages> pp. 126-135. </pages>
Reference-contexts: It must run everywhere (e.g., at hosts and switches). There are two subconsequences: changing IP means changing everything, and everyone must share the same service model. 2. Use of overlays (e.g., the reliable stream overlay of TCP, or multimedia multicast with MBONE <ref> [12] </ref> ) is forced for people who don't accept the communal service model, i.e., they CIS Department, University of Pennsylvania. This research was supported by DARPA under contracts DABT 63-95-C-0073 and N66001-96-C-852. Additional support was provided by Intel, Hewlett-Packard and AT&T.
Reference: [13] <author> P. Druschel, L. L. Peterson, and B. S. Davie, </author> <title> ``Experiences with a High-Speed Network Adaptor: A Software Perspective,'' </title> <booktitle> in Proceedings, 1994 SIGCOMM Conference, </booktitle> <address> London, UK (Aug. </address> <booktitle> 31st - Sep. 2nd, </booktitle> <year> 1994), </year> <pages> pp. 2-13. </pages>
Reference-contexts: Multiplexing performance is crucial in switching. A great deal of recent research has tried to alleviate these costs while preserving the protection semantics of the operating system <ref> [13, 14] </ref>. To obtain an order of magnitude estimate of the penalty for this boundary crossing, we compared system calls with an ideal scheduling method, i.e., co-routine scheduling. The method used was the facilities setjmp () and longjmp () provided by the C library.
Reference: [14] <author> Dawson R. Engler, M. Frans Kaashoek, and James O'Toole, Jr., ``Exokernel: </author> <title> An Operating System Architecture for Application-Level Resource Management,'' </title> <booktitle> in Proceedings of the 15th ACM Symposium on Operating System Principles (SOSP-15), </booktitle> <address> Copper Mountain, CO (December 1995). </address>
Reference-contexts: Multiplexing performance is crucial in switching. A great deal of recent research has tried to alleviate these costs while preserving the protection semantics of the operating system <ref> [13, 14] </ref>. To obtain an order of magnitude estimate of the penalty for this boundary crossing, we compared system calls with an ideal scheduling method, i.e., co-routine scheduling. The method used was the facilities setjmp () and longjmp () provided by the C library. <p> We believe that while Scout itself may be able to operate across many e nviron-ments, it is providing a level of abstraction that is too low to gain the interoperability advantages of our extensions to SML/NJ. The Exokernel <ref> [14] </ref> project at MIT has been focusing on an operating system restructuring, where much of the operating system functionality is carried out in libraries. There is still, for security, a need for a small kernel.
Reference: [15] <author> Virgil D. Gligor and Bruce G. Lindsay, </author> <title> ``Object Migration and Authentication,'' </title> <journal> IEEE Tr ansactions on Software Engineering SE-5(6), </journal> <pages> pp. </pages> <month> 607-611 (November </month> <year> 1979). </year>
Reference-contexts: Several authors have addressed the need for secure object storage <ref> [15] </ref> in such an environment, and new cryptographic technologies [10] for digital signatures are applicable to this environment; in particular a type-checked module can be stored in a machine-independent form, which is then either signed directly or supported by a secure hashing algorithm.
Reference: [16] <author> M. J. C. Gordon, R. Milner, and C. </author> <title> Wadsworth, </title> <publisher> Edinburgh LCF, Springer (1979). </publisher>
Reference-contexts: In particular, this is the case when there is a strong need to guarantee various safety or security constraints. As a motivating example, the programming language Standard ML (SML) is descended from a Meta-Language (ML) used to guide a goal-directed theorem-proving system <ref> [16] </ref>. The standard [27] was completed in 1987 and is described via a set of mathematical rules. Since the soundness of the language as a theorem-proving vehicle was a paramount early concern, the semantics of the language was constructed with great rigor and attention to detail.
Reference: [17] <author> M.E. Grzelakowski, J.H. Campbell, </author> <title> and M.R. Dubman, ``DMERT Operating System,'' </title> <journal> Bell System Technical Journal 62(1), </journal> <pages> pp. </pages> <month> 303-323 (January </month> <year> 1983). </year> <note> [18] http://www.cs.cmu.edu/afs/cs/project/fox/mosaic/HomePage.html, Fox Project, </note> <institution> CMU School of Computer Science, </institution> <year> 1995. </year>
Reference-contexts: Programmability of switching elements led to major progress in the evolution of our national network infrastructure. An excellent case study of telecommunications switching infrastructure [28] is the Western Electric 3B20D processor [47] and the associated Duplex Multiple Environment Real Time (DMERT) <ref> [19, 17] </ref> operating system. This system was employed in the Bell System's 5ESS switch systems which remain in widespread use. DMERT is based on the earlier MERT operating system [24], and provides both a real-time and timesharing environment.
Reference: [19] <author> J.R. Kane, R.E. Anderson, and P.S. McCabe, </author> <title> ``Overview, Architecture, and Performance of DMERT, </title> '' <journal> Bell System Technical Journal 62(1), </journal> <pages> pp. </pages> <month> 291-302 (January </month> <year> 1983). </year>
Reference-contexts: Programmability of switching elements led to major progress in the evolution of our national network infrastructure. An excellent case study of telecommunications switching infrastructure [28] is the Western Electric 3B20D processor [47] and the associated Duplex Multiple Environment Real Time (DMERT) <ref> [19, 17] </ref> operating system. This system was employed in the Bell System's 5ESS switch systems which remain in widespread use. DMERT is based on the earlier MERT operating system [24], and provides both a real-time and timesharing environment.
Reference: [20] <author> Randy H. Katz, Garth A. Gibson, and David A. Patterson, </author> <title> ``Disk System Architectures for High Performance Computing,'' </title> <booktitle> Proceedings of the IEEE 77(12) (December 1989). </booktitle>
Reference-contexts: Consider the two interconnected SwitchWare switches shown in Figure 1. If three channels worth of capacity are required, we can implement the striping algorithm on the three channels, and utilize the fourth as an error/loss correction channel, as in RAID systems <ref> [20] </ref>. So, for example, we could (using SwitchWare's capacity for processing), for each three packets sent on the three stripes, compute a fourth packet consisting of the Exclusive-OR of the three packets comprising the stripe.
Reference: [21] <author> A. Keromytis and J. Smith, </author> <title> ``Creating Efficient Fail-Stop Cryptographic Protocols,'' </title> <type> Tech nical Report MS-CIS-96-32, </type> <institution> CIS Dept., University of Pennsylvania (December 2, </institution> <year> 1996). </year>
Reference-contexts: For network security, unusual and unexpected message sequences can be used to detect large classes of intrusions. SCANs provide the ability to protect the network against many active attacks. For example, Keromytis and Smith <ref> [21] </ref> have dev eloped a method by which arbitrary cryptographic protocols can be made fail-stop. Rather than release information, fail-stop cryptographic protocols terminate when an active attack is detected. The - 9 - method uses cryptographic hashes to validate sequences of messages by reflecting message dependencies in the hash values.
Reference: [22] <author> Frederick Colville Knabe, </author> <title> ``Language Support for Mobile Agents,'' </title> <institution> CMU-CS-95-223, CMU School of Computer Science (December 1995). </institution> <type> Ph.D. Thesis </type>
Reference-contexts: That is, it must be programmable by the packets that flow through it. While not all packets need contain code, packet sequences can contain modules of programming, as in the mobile agents prototyped by Knabe <ref> [22] </ref>. These code objects are used to provide customized services to the level of an individual user, or if predictions of hundreds of processors or intelligent sensors per person are true, perhaps composites of hundreds of such services. 3. <p> New technologies are becoming available for message-hashing, such - 13 - as MD5, which can be very helpful in distributed type-checking. A trusted authority is referenced as part of loading a new module into the system. This work can easily build on existing work for distributing loadable modules <ref> [22] </ref>. A rogue loadable module can be looked at as a particularly harmful form of virus, one introduced directly into the network infrastructure, so we can draw on the considerable work [38] focused on this topic. 5.
Reference: [23] <author> Mark Leone and Peter Lee, </author> <title> ``Optimizing ML with Run-Time Code Generation,'' </title> <booktitle> in Pro ceedings, ACM SIGPLAN PLDI '96 (May 1996). </booktitle>
Reference-contexts: We look at the CMU work as providing tools. Their implementation ideas for compilers [44] and run-time environments <ref> [23] </ref> can be viewed as aids and assists to providing a high-performance implementation of our SwitchWare language system; in essence, our SML/NJ extensions for SwitchWare ride the compiler technology curve as well.
Reference: [24] <author> H. Lycklama and D.L. Bayer, </author> <title> ``The MERT Operating System,'' </title> <journal> Bell System Technical Jour nal 57(6, </journal> <volume> Part 2), </volume> <pages> pp. </pages> <year> 2049-2086 </year> <month> (July/August </month> <year> 1978). </year>
Reference-contexts: This system was employed in the Bell System's 5ESS switch systems which remain in widespread use. DMERT is based on the earlier MERT operating system <ref> [24] </ref>, and provides both a real-time and timesharing environment.
Reference: [25] <author> Aamer Mahmood and E. J. McCluskey, </author> <title> ``Concurrent Error Detection Using Watchdog Processors - A Survey,'' </title> <journal> IEEE Transactions on Computers 37(2), </journal> <pages> pp. </pages> <month> 160-174 (February, </month> <year> 1988). </year>
Reference-contexts: This checking of state traversals can be applied broadly in an Active Net, hence the name Self-Checking Active Network (SCAN). SCANs can be considered a distributed analogue of watchdogs <ref> [25] </ref> and some of the key ideas were sketched out (without the availability of Active Networks) by Pickens and Farber in their Overseer [36] scheme. If an invalid sequence is detected, the infrastructure performs an exceptional action, for example, raising an alarm, or blocking further messages.
Reference: [26] <author> Sun Microsystems, </author> <title> ``The Java Language: </title> <note> A White Paper,'' http://java.sun.com - 18 </note> - 
Reference-contexts: of network evolution proceeds far too slowly, relative to t he technological changes in the underlying transmission systems, where laboratory results have reached Terabit/second bandwidths, and relative to the applications deployed at the edges of the network, such as the WorldWide Web and its supporting technologies such as the Java <ref> [26] </ref> Programming language. The - 3 - element interconnecting the links and end-nodes is a switch; logically (although atypically) it is possible to view routers, bridges, etc. as specialized switches. Programmability of switching elements led to major progress in the evolution of our national network infrastructure. <p> Thus a key question in the design of SwitchWare is how t his power can be provided safely. 4.2. Systems Security and Programming Environments Familiarity with the Internet Worm [42] or recent security problems [11] found in systems such as Netscape's Web browser and the Java <ref> [26] </ref> highlight the importance of security in distributed computing. Although these problems manifested themselves as security breaches, many of them were a result of the lack of safety features in the programming language, notably C. Languages like SML and Java avoid these problems by supporting pointer safety.
Reference: [27] <author> R. Milner, M. Tofte, and R. Harper, </author> <title> The Definition of Standard ML, </title> <publisher> The MIT Press (1990). </publisher>
Reference-contexts: In particular, this is the case when there is a strong need to guarantee various safety or security constraints. As a motivating example, the programming language Standard ML (SML) is descended from a Meta-Language (ML) used to guide a goal-directed theorem-proving system [16]. The standard <ref> [27] </ref> was completed in 1987 and is described via a set of mathematical rules. Since the soundness of the language as a theorem-proving vehicle was a paramount early concern, the semantics of the language was constructed with great rigor and attention to detail.
Reference: [28] <author> R. W. Mitze, H. L. Bosco, N. X. DeLessio, R. J. Frank, N. A. Martellotto, W. C . Schwartz, and R. W. Wolfe, </author> <title> ``3B20D Processor and DMERT as a Base for Telecommunications Applications,'' </title> <journal> Bell System Technical Journal 62(1), </journal> <pages> pp. </pages> <month> 181-190 (January </month> <year> 1983). </year>
Reference-contexts: Programmability of switching elements led to major progress in the evolution of our national network infrastructure. An excellent case study of telecommunications switching infrastructure <ref> [28] </ref> is the Western Electric 3B20D processor [47] and the associated Duplex Multiple Environment Real Time (DMERT) [19, 17] operating system. This system was employed in the Bell System's 5ESS switch systems which remain in widespread use.
Reference: [29] <author> A. B. Montz and D. Mosberger, S. W. O'Malley, L. L . Peterson, T. A. Proebsting, J. H. Hartman, </author> <title> ``Scout: A communications-oriented operating system,'' </title> <type> Technical Report 94-20,, </type> <institution> Department of Computer Science, University of Arizona (June 1994). </institution>
Reference-contexts: The setting of a switch infrastructure has different challenges, including the need for resource partitioning algorithms, distributed loading of type-checked modules, security and a high degree of multiplexing/ parallel processing, that are less pressing for workstations. The Scout Project <ref> [29] </ref> at the University of Arizona uses an algorithm, pathfinding, to optimize the paths through protocol executions in a realization.
Reference: [30] <institution> MTSs, Engineering and Operations in The Bell System, AT&T Bell Laboratories, </institution> <address> Murray Hill, NJ (1983). ISBN #0-932764-04-5 </address>
Reference-contexts: These are: 1. Programmable services, to accelerate network evolution. 2. Extensibility, so that logical overlays can be implemented within the switches rather than as true overlays at the endpoints. Programmability alone is not extensibility; for example, extensibility is missing in control software for telephone switches <ref> [30] </ref>. It seems most useful to provide user-extensibility, so that new applications not imagined by the designers can be easily added, and we can avoid the risks of a ``narrow-gauge'' infrastructure. 3.
Reference: [31] <author> R. Needham and M. Schroeder, </author> <title> ``Using Encryption for Authentication in Large Networks,'' </title> <journal> Communications of the ACM 21(12), </journal> <pages> pp. </pages> <month> 993-999 (December, </month> <year> 1978). </year>
Reference-contexts: Authenticated Type-checked modules When we apply mathematical methods to the context of a highly-available distributed switching fabric, which depends on type-checking, we must face the challenge of making the formal guarantees in the face of threats in the network <ref> [31] </ref>.
Reference: [32] <author> Roger M. Needham, </author> <title> ``Denial of Service: An Example,'' </title> <journal> Communications of the ACM 37(11), </journal> <pages> pp. </pages> <month> 42-46 (November </month> <year> 1994). </year>
Reference-contexts: Security failures can include unauthorized viewing of information, denial of service <ref> [32] </ref>, and insertion of false information. These sorts of failures [9] will become more common unless security is designed into a system.
Reference: [33] <author> S. Nettles and J. O'Toole, </author> <title> ``Real-Time Replication Garbage Collection,'' </title> <booktitle> in SIGPLAN Sym posium on Programming Language Design and Implementation, ACM (June 1993). </booktitle>
Reference-contexts: More importantly, the results show that replicating collection is very successful at eliminating the long pauses often associated with garbage collection. These pauses are a substantial reason for high-level languages not being used for performance critical applications <ref> [33] </ref>. These techniques are applicable to other garbage-collected languages like Java and should greatly improve the performance of garbage-collected languages, and allow s ignifi-cant speedups on multiprocessors. 6.
Reference: [34] <author> James O'Toole, Scott Nettles, and David Gifford, </author> <title> ``Concurrent Compacting Garbage Col lection of a Persistent Heap,'' </title> <booktitle> in Proceedings, 14th ACM Symp. Operating Syst. Principles (December, </booktitle> <year> 1993), </year> <pages> pp. 161-174. </pages>
Reference-contexts: Unfortunately, the degree of concurrency offered by such an implementation is limited by the need to garbage collect the store sequentially. Nettles, et al., have dev eloped a new concurrent GC technique, replicating collection <ref> [34] </ref>. Based on ideas from distributed systems, replicating collection is a simple and and elegant solution to the difficult problem of making copying collection concurrent. It has been implemented in the runtime of SML/NJ on both DEC uniprocessors running Mach and on SGI multiprocessors using IRIX.
Reference: [35] <author> Guru Parulkar, Douglas C. Schmidt, and Jonathan S. Turner, </author> <title> ``a I P m: a Strategy for Integrating IP with ATM,'' </title> <booktitle> in Proceedings, SIGCOMM 95, C ambridge, </booktitle> <address> MA (Aug. </address> <note> 28th to Sept. 1, </note> <year> 1995), </year> <pages> pp. 49-58. </pages>
Reference-contexts: Our focus in programming language semantics allows us to attack the theoretical problems in a restricted context, that - 15 - of an Active Network Switch, that increases our chances of success. Turner's group <ref> [35] </ref> at Washington University propose an approach of interconnecting powerful general purpose processors with an ATM switching system. Thus, the hardware has the ability, in principle, to execute SwitchWare-like software.
Reference: [36] <author> J. R. Pickens and D. J. Farber, </author> <title> ``The Overseer: A Powerful Communications Attribute for Debugging and Security in Thin-Wire Connected Control Structures,'' </title> <booktitle> in Proceedings, International Computer Communications Conference (August, </booktitle> <year> 1976). </year> <note> also TR #75, </note> <institution> UC Irvine, </institution> <year> 1975 </year>
Reference-contexts: Figure 2 illustrates striping in an embedded switch. 3.4. Self-Checking Active Networks (SCANs) DARPA-sponsored network security research in the 1970s led to the Overseer <ref> [36] </ref> idea, where network packets were checked for correctness with respect to a protocol graph. Active Networks make this feasible. Active Network technology can be used to construct survivable network infrastructures based on the idea of ``self-checking'' systems. <p> SCANs can be considered a distributed analogue of watchdogs [25] and some of the key ideas were sketched out (without the availability of Active Networks) by Pickens and Farber in their Overseer <ref> [36] </ref> scheme. If an invalid sequence is detected, the infrastructure performs an exceptional action, for example, raising an alarm, or blocking further messages. For network security, unusual and unexpected message sequences can be used to detect large classes of intrusions.
Reference: [37] <author> J. Postel and D. J. Farber, </author> <title> ``Graph Modeling of Computer Communications Protocols,'' </title> <booktitle> in Proc. of the Fifth Texas Conference on Computing Systems, </booktitle> <institution> University of Texas, Austin, TX (October, </institution> <year> 1976), </year> <pages> pp. 66-77. </pages>
Reference-contexts: The basic approach is to use high-level specifications to generate Active Network programs that can be used to self-check the operation of the network. As suggested by early work of Cerf [8], Farber, and Postel <ref> [37] </ref>, protocols are represented as graphs that show the protocol's flow of control and message emissions. Distributed systems use such protocols to operate over the network, giving rise to a ``protocol graph,'' a common and powerful formal representation of protocols.
Reference: [38] <author> M. Pozzo and T. Gray, </author> <title> ``A model for the containment of Computer Viruses,'' </title> <booktitle> in Second Aerospace Computer Security Applications Conference (December 1986), </booktitle> <pages> pp. 11-18. </pages>
Reference-contexts: This work can easily build on existing work for distributing loadable modules [22]. A rogue loadable module can be looked at as a particularly harmful form of virus, one introduced directly into the network infrastructure, so we can draw on the considerable work <ref> [38] </ref> focused on this topic. 5. Concurrency and garbage collection Garbage collection is crucial because it avoids the possibility that storage will be returned to the memory allocator while it is still in use.
Reference: [39] <author> Bell Communications Research, Inc., </author> <title> ``AIN Release 1 Service Logic Program Framework Generic Requirements,'' </title> <publisher> FA-NWT-001132. </publisher>
Reference-contexts: The approach suggested in this paper is an extension of that used to revolutionize telephony in the early 1990's. Advanced Intelligent Networking <ref> [39] </ref>, developed in part by Bellcore, separates the implementation of telephony services from basic switching by moving the service control to an adjunct processor from the switch. Since each call can now hav e a different service, the need for standardization of new services has been eliminated. <p> A software approach: the Advanced Intelligent Network (AIN) As we remarked earlier, the approach suggested in this paper is an extension of that used to revolutionize telephony in the early 1990's, Advanced Intelligent Networking <ref> [39] </ref>, which was developed in part by Bellcore. The use of an independent control processor in the switching fabric gav e service designers access to databases and other processors to provide call processing features.
Reference: [40] <author> A. Romanow and S. Floyd, </author> <title> ``The Dynamics of TCP Traffic over ATM Networks,'' </title> <booktitle> in Pro ceedings, 1994 SIGCOMM Conference, </booktitle> <address> London, UK (Aug. </address> <booktitle> 31st - Sep. 2nd, </booktitle> <year> 1994), </year> <pages> pp. 79-88. </pages>
Reference-contexts: IP has no semantics for passing data-link layer information to the end-points. Overlays are problems for two additional reasons. First, overlays may be inefficient because the underlying network does not take the functionality of the overlay into account, e.g., packet loss versus cell-loss <ref> [40] </ref> for IP/ATM. Second, partitioning of resources is harder because we must split the partitioning of resources within an overlay from the partitioning of resources among overlays. A second alternative, stemming from our overall goal of accelerating network evolution, is to create a virtual network infrastructure, consisting of SwitchWare switches.
Reference: [41] <author> John F. Shoch and Jon A. Hupp, </author> <title> ``The Worm Programs - Early Experience with a Dis tributed Computation,'' </title> <journal> Communications of the ACM 25(3) (March 1982). </journal>
Reference-contexts: Another example is personal multicast topologies; it is easy to write a small program which moves itself from SwitchWare switch to switch <ref> [41] </ref>, replicating itself selectively to output ports to create a per-packet multicast. Still more applications include: Speech coding conversion for interoperation of national telecommunications infrastructures; this would be accomplished with SwitchWare libraries or DSPs if higher performance is needed.
Reference: [42] <author> Eugene H. Spafford, </author> <title> ``The Internet Worm: Crisis and Aftermath,'' </title> <journal> Communications of the ACM 32(6), </journal> <pages> pp. </pages> <month> 678-687 (June </month> <year> 1989). </year>
Reference-contexts: Thus a key question in the design of SwitchWare is how t his power can be provided safely. 4.2. Systems Security and Programming Environments Familiarity with the Internet Worm <ref> [42] </ref> or recent security problems [11] found in systems such as Netscape's Web browser and the Java [26] highlight the importance of security in distributed computing.
Reference: [43] <author> Adobe Systems, Inc., </author> <title> PostScript Language Reference Manual, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA (1985). </address>
Reference-contexts: The IP protocol has been successful in standardizing packet formats, but because its standardization process operates at a political tempo rather than a technological tempo, the pace of evolution has been held back. We believe that a PostScript-like <ref> [43] </ref> concept, which raises the level of abstraction of the standard, to SwitchWare services rather than IP services, is the method for staying on the technology curve. Raising the level of abstraction also gives a much greater toehold for network management, specifically for automated self-diagnosis and repair.
Reference: [44] <author> David Tarditi, Greg Morrisett, Perry Cheng, Chris Stone, Bob Harper, and Peter Lee, </author> <title> ``TIL: </title>
Reference-contexts: We look at the CMU work as providing tools. Their implementation ideas for compilers <ref> [44] </ref> and run-time environments [23] can be viewed as aids and assists to providing a high-performance implementation of our SwitchWare language system; in essence, our SML/NJ extensions for SwitchWare ride the compiler technology curve as well. <p> The programming language implementation challenge in SwitchWare will be providing good performance for SML when it is used as a systems programming language. A recent implementation of SML, the TIL compiler at CMU by Morrisett and Tarditi <ref> [44] </ref>, strongly suggests that SML implementations with performance similar to C are feasible. - 16 - 7.1.
References-found: 43

