URL: http://www.cs.cornell.edu/home/kleinber/soda94-search.ps
Refering-URL: http://www.cs.cornell.edu/home/kleinber/kleinber.html
Root-URL: 
Title: On-Line Search in a Simple Polygon -competitive algorithm for the search rectilinear streets it achieves
Author: Jon M. Kleinberg . 
Address: Cambridge MA 02139 USA.  
Affiliation: Laboratory for Computer Science, MIT,  
Note: 2  8 2:61); in  This work was supported in part by the Sloan Fellowship and NSF PYI award of Eva Tardos. Author is supported by an ONR Graduate Fellowship  
Abstract: We consider a number of search and exploration problems, from the perspective of robot navigation in a simple polygon. These problems are "on-line" in the sense that the robot does not have access to the map of the polygon; it must make decisions as it proceeds, based only on what it has seen so far. For the problem of exploring a simple rectilinear polygon (under the L 1 norm), Deng, Kameda, and Papadimitriou give a 2-competitive deterministic algorithm; we present a randomized exploration algorithm which is 5=4-competitive. Using similar techniques, we are able to give an algorithm for searching an arbitrary, unknown rectilinear polygon. No constant competitive ratio is attainable in this case, but our algorithm is within a constant factor of optimal in the worst case; in a sense, it is a generalization of some of the strategies of Baeza-Yates, Culberson, and Rawlins to a much more general class of search spaces. Finally, we examine a type of polygon for which competitive search is possible | the class of "streets" considered by Klein, who gave a 1 + 3 problem in this case. We present a simple algorithm with a competitive ratio of at most q p 
Abstract-found: 1
Intro-found: 1
Reference: [BBFY] <author> E. Bar-Eli, P. Berman, A. Fiat, P. Yan, </author> <title> "On-Line Navigation in a Room," </title> <booktitle> Proc. 3rd ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <year> 1992, </year> <pages> pp. 237-249. </pages>
Reference-contexts: Most of the work on the geometric version of the navigation problem has focused on finding shortest paths in an obstacle-filled environment <ref> [BRS, BBFY] </ref>, and exploring a geometric scene [DKP].
Reference: [BCR] <author> R. Baeza-Yates, J. Culberson, G. Rawlins, </author> <title> "Searching in the Plane," </title> <journal> Inf. and Computation, </journal> <volume> 106(1993), </volume> <pages> pp. 234-252. </pages>
Reference-contexts: Search algorithms, on the other hand, have generally been developed for situations in which the geometry is kept to a minimum | for example, the case of searching for a point on one of m rays emanating from a point <ref> [BCR, KRT] </ref>, a line in the plane, or a point in an integer lattice [BCR]. <p> other hand, have generally been developed for situations in which the geometry is kept to a minimum | for example, the case of searching for a point on one of m rays emanating from a point [BCR, KRT], a line in the plane, or a point in an integer lattice <ref> [BCR] </ref>. Moreover, the structure of the space to be searched is assumed to be known | only the location of the target is unknown. [BCR] writes, ": : : these problems are (very simple) models of searching in the real-world. <p> for a point on one of m rays emanating from a point [BCR, KRT], a line in the plane, or a point in an integer lattice <ref> [BCR] </ref>. Moreover, the structure of the space to be searched is assumed to be known | only the location of the target is unknown. [BCR] writes, ": : : these problems are (very simple) models of searching in the real-world. <p> identify the number of essential cuts of P [CN, DKP] as a fundamental parameter in determining the best competitive ratio attainable in searching P | it is easy to cast the problem of searching m concurrent rays as a search problem in a polygon with m essential cuts, whence the <ref> [BCR] </ref> lower bound of 2em o (m) on competitive ratio applies (e is being used to denote the base of the natural logarithm here). <p> As mentioned in the introduction, O (m) is the best bound possible on the competitive ratio: if we take 11 the polygon P m of Figure 3, make the m "arms" extremely long, and introduce tiny bends to limit visibility, then the <ref> [BCR] </ref> lower bound for searching m concurrent rays applies | no deterministic algorithm can be better than (2em o (m))-competitive. (An (m) lower bound clearly holds for randomized algorithms as well, with a somewhat smaller constant.) We first assemble some basic lemmas that will be useful in analyzing the exploration algorithm.
Reference: [BRS] <author> A. Blum, P. Raghavan, B. Schieber, </author> <title> "Navigating in Unfamiliar Geometric Terrain," </title> <booktitle> Proc. 23rd ACM Symposium on Theory of Computing, </booktitle> <year> 1991. </year>
Reference-contexts: Most of the work on the geometric version of the navigation problem has focused on finding shortest paths in an obstacle-filled environment <ref> [BRS, BBFY] </ref>, and exploring a geometric scene [DKP].
Reference: [BK] <author> M. Blum, D. Kozen, </author> <title> "On the Power of the Compass (or, Why Mazes are Easier to Search than Graphs)," </title> <booktitle> Proc. 19th IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1978, </year> <pages> pp. 132-142. </pages>
Reference-contexts: In one sense, such problems are as old as algorithmic maze-solving questions that reach back a century and more (see e.g. [O]). More recently, problems in this spirit have been addressed by Blum and Kozen in the context of automata theory <ref> [BK] </ref>, and by Lumelsky, Stepanov, and others in robotics [LS]; they were first incorporated into the framework of on-line algorithms (cf. [ST, MMS]) by Papadimitriou and Yannakakis in [PY].
Reference: [CN] <author> W. Chin, S. Ntafos, </author> <title> "Shortest Watchman Routes in Simple Polygons," </title> <journal> Discrete and Computational Geometry, </journal> <volume> 6(1991), </volume> <pages> pp. 9-31. 14 </pages>
Reference-contexts: Thus, the robot must adapt its search pattern as it sees more and more of the polygon. For a given rectilinear polygon P , we identify the number of essential cuts of P <ref> [CN, DKP] </ref> as a fundamental parameter in determining the best competitive ratio attainable in searching P | it is easy to cast the problem of searching m concurrent rays as a search problem in a polygon with m essential cuts, whence the [BCR] lower bound of 2em o (m) on competitive <p> Thus we can show Theorem 2 When P is rectilinear, the above algorithm is p 2-competitive, and this is optimal. 3 Exploring a Simple Rectilinear Polygon First, we present some basic definitions of <ref> [CN, DKP] </ref> on the structure of rectilinear polygons. In this and the remaining sections, distances will be measured in the L 1 metric. Let P be a simple rectilinear polygon and s a distinguished point in P . <p> The robot does not know the map of P in advance. As noted in <ref> [CN, DKP] </ref> (see also the discussion above), a closed path through s has this property if and only if it touches all essential cuts in P . In [CN, DKP], it is observed that since any exploration route can 8 b) Polygon P m s horizon essential cut essential cut a) <p> The robot does not know the map of P in advance. As noted in <ref> [CN, DKP] </ref> (see also the discussion above), a closed path through s has this property if and only if it touches all essential cuts in P . In [CN, DKP], it is observed that since any exploration route can 8 b) Polygon P m s horizon essential cut essential cut a) be traversed (off-line) without self-crossings, the shortest exploration route will touch the essential cuts in clockwise order.
Reference: [DKP] <author> X. Deng, T. Kameda, C. Papadimitriou, </author> <title> "How to Learn an Unknown Environment I: The Rectilinear Case," </title> <type> Technical Report CS-93-04, </type> <institution> Department of Computer Science, York University. </institution> <note> (Preliminary version in Proc. 32nd IEEE Symposium on Foundations of Computer Science, </note> <year> 1991, </year> <pages> pp. 298-303.) </pages>
Reference-contexts: Most of the work on the geometric version of the navigation problem has focused on finding shortest paths in an obstacle-filled environment [BRS, BBFY], and exploring a geometric scene <ref> [DKP] </ref>. <p> Thus, the robot must adapt its search pattern as it sees more and more of the polygon. For a given rectilinear polygon P , we identify the number of essential cuts of P <ref> [CN, DKP] </ref> as a fundamental parameter in determining the best competitive ratio attainable in searching P | it is easy to cast the problem of searching m concurrent rays as a search problem in a polygon with m essential cuts, whence the [BCR] lower bound of 2em o (m) on competitive <p> Thus, the natural question is whether there is an algorithm which is O (m)-competitive for the problem of searching an arbitrary simple rectilinear polygon with m essential cuts. In Section 4, we present such an algorithm. The algorithm is based on the problem | first considered in <ref> [DKP] </ref> | of exploring a 2 simple rectilinear polygon P , starting from and returning to a fixed point s in P ; we use an exploration algorithm iteratively as the search proceeds. We show in Section 3 how an adaptation of the technique in [DKP] gives a randomized algorithm which <p> problem | first considered in <ref> [DKP] </ref> | of exploring a 2 simple rectilinear polygon P , starting from and returning to a fixed point s in P ; we use an exploration algorithm iteratively as the search proceeds. We show in Section 3 how an adaptation of the technique in [DKP] gives a randomized algorithm which is 5=4-competitive in the L 1 norm when s is any point inside P . <p> Thus we can show Theorem 2 When P is rectilinear, the above algorithm is p 2-competitive, and this is optimal. 3 Exploring a Simple Rectilinear Polygon First, we present some basic definitions of <ref> [CN, DKP] </ref> on the structure of rectilinear polygons. In this and the remaining sections, distances will be measured in the L 1 metric. Let P be a simple rectilinear polygon and s a distinguished point in P . <p> The horizons of P which are maximal are called essential cuts; for an essential cut h, it is possible to start at s and follow a path which crosses every horizon except h. See A special case of the following lemma is given in <ref> [DKP] </ref>; it is the underlying reason for the success of "greedy" exploration algorithms in rectilinear polygons. Lemma 5 Let ff 1 ; : : : ; ff n be a set of horizontal and vertical segments in P , and v a point in P . <p> The robot does not know the map of P in advance. As noted in <ref> [CN, DKP] </ref> (see also the discussion above), a closed path through s has this property if and only if it touches all essential cuts in P . In [CN, DKP], it is observed that since any exploration route can 8 b) Polygon P m s horizon essential cut essential cut a) <p> The robot does not know the map of P in advance. As noted in <ref> [CN, DKP] </ref> (see also the discussion above), a closed path through s has this property if and only if it touches all essential cuts in P . In [CN, DKP], it is observed that since any exploration route can 8 b) Polygon P m s horizon essential cut essential cut a) be traversed (off-line) without self-crossings, the shortest exploration route will touch the essential cuts in clockwise order. <p> Moreover, by Lemma 5, it will touch the cuts in this order using the greedy algorithm. Consider the case in which the point s lies on the boundary of P , between the endpoints of essential cuts e and e 0 . The on-line algorithm given in <ref> [DKP] </ref> is essentially a greedy strategy which crosses each upcoming horizon as quickly as possible; it is shown in [DKP] that it will traverse the greedy path which touches the essential cuts in clockwise order, beginning with e. <p> The on-line algorithm given in <ref> [DKP] </ref> is essentially a greedy strategy which crosses each upcoming horizon as quickly as possible; it is shown in [DKP] that it will traverse the greedy path which touches the essential cuts in clockwise order, beginning with e. Consequently, this algorithm finds the optimal exploration route on-line; it is 1-competitive when s lies on the boundary of P . <p> On the other hand, the greedy exploration route which visits C first travels a distance of 8. The algorithm given in <ref> [DKP] </ref> is 2-competitive when s is an arbitrary starting point in P , and this is the best known deterministic ratio. In the remainder of this section, we give a simple randomized algorithm whose performance matches the deterministic lower bound of Proposition 1. <p> There is some small ffi 0 such that all points within ffi 0 of s are visible from s. By rescaling, we can assume that ffi 0 = 1. For fixed values of ffi, the robot will simulate the algorithm of <ref> [DKP] </ref> in P ffi , as follows. The [DKP] algorithm has the property that at all times, the robot is moving along the coordinate axes, perpendicularly towards an extended edge, and it maintains this direction until it reaches the closest such extended edge e. <p> There is some small ffi 0 such that all points within ffi 0 of s are visible from s. By rescaling, we can assume that ffi 0 = 1. For fixed values of ffi, the robot will simulate the algorithm of <ref> [DKP] </ref> in P ffi , as follows. The [DKP] algorithm has the property that at all times, the robot is moving along the coordinate axes, perpendicularly towards an extended edge, and it maintains this direction until it reaches the closest such extended edge e. <p> By Lemma 9, it can see both of the endpoints of the edge e; thus, by Lemma 10, it can tell whether e lies in P ffi or not. If e lies in P ffi , the robot moves towards it, as in the <ref> [DKP] </ref> algorithm; otherwise, e is treated as a wall in the simulation. In this way, the exploration route generated by the simulation is the same as the route that the [DKP] algorithm generates in P ffi . Initially, ffi is set to 1. <p> If e lies in P ffi , the robot moves towards it, as in the <ref> [DKP] </ref> algorithm; otherwise, e is treated as a wall in the simulation. In this way, the exploration route generated by the simulation is the same as the route that the [DKP] algorithm generates in P ffi . Initially, ffi is set to 1. Whenever t is first seen, the robot moves directly to it; if the robot explores P ffi without seeing t, then ffi is doubled and the next iteration begins.
Reference: [IK] <author> C. Icking, R. Klein, </author> <title> "The Two Guards Problem," </title> <booktitle> Proc. 7th ACM Symposium on Computational Geometry. </booktitle>
Reference-contexts: The paper begins, however, with a self-contained section in which we look at an intriguing notion | restricting the class of polygons and target points in such a way that a constant competitive ratio can be achieved for the search problem. The papers <ref> [IK, Kl] </ref> introduce the term street to define a class of general (not necessarily rectilinear) polygons with two distinguished points s and t, such that the two st boundary chains are mutually weakly visible (see below for an elaboration on this definition). <p> The removal of s and t would disconnect the boundary into two polygonal chains, L and R. We say that P is a street <ref> [IK, Kl] </ref> if each point on the boundary of P can see some point on the opposite boundary chain. The goal is for a robot with vision to travel from s to t; neither the map of P nor the coordinates of t are known.
Reference: [Kl] <author> R. Klein, </author> <title> "Walking an Unknown Street with Bounded Detour," Computational Geometry: </title> <journal> Theory and Applications, </journal> <volume> 1(1992), </volume> <pages> pp. 325-351. </pages> <note> (Preliminary version in Proc. 32nd IEEE Symposium on Foundations of Computer Science, </note> <year> 1991, </year> <pages> pp. 304-313.) </pages>
Reference-contexts: The paper begins, however, with a self-contained section in which we look at an intriguing notion | restricting the class of polygons and target points in such a way that a constant competitive ratio can be achieved for the search problem. The papers <ref> [IK, Kl] </ref> introduce the term street to define a class of general (not necessarily rectilinear) polygons with two distinguished points s and t, such that the two st boundary chains are mutually weakly visible (see below for an elaboration on this definition). <p> The papers [IK, Kl] introduce the term street to define a class of general (not necessarily rectilinear) polygons with two distinguished points s and t, such that the two st boundary chains are mutually weakly visible (see below for an elaboration on this definition). In <ref> [Kl] </ref>, Klein gives a 1 + 3 2 -competitive (~ 5:71-competitive) algorithm for finding t from s in an unknown street P . However, the algorithm and its analysis are quite involved. <p> The removal of s and t would disconnect the boundary into two polygonal chains, L and R. We say that P is a street <ref> [IK, Kl] </ref> if each point on the boundary of P can see some point on the opposite boundary chain. The goal is for a robot with vision to travel from s to t; neither the map of P nor the coordinates of t are known. <p> The cost incurred by the robot is the length of the path it generates, and its competitive ratio is taken with respect to the length of the shortest s-t path in P ; distances are measured in the Euclidean metric. the corner from either X or Y <ref> [Kl] </ref>. The robot will incur the best worst-case performance if it moves directly to segment XY , then to t (it will see t when it reaches XY ). This can be at most a factor of p 2 longer than the shortest path. <p> This can be at most a factor of p 2 longer than the shortest path. Curiously, this is the only known lower bound on the competitive ratio achievable for the problem. In <ref> [Kl] </ref>, an algorithm with a competitive ratio of at most 1 + 3 2 (~ 5:71) is presented.
Reference: [KRT] <author> M. Kao, J. Reif, S. Tate, </author> <title> "Searching in an Unknown Environment: An Optimal Randomized Algorithm for the Cow-Path Problem," </title> <booktitle> Proc. 4th ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <year> 1993, </year> <pages> pp. 441-447. </pages>
Reference-contexts: Search algorithms, on the other hand, have generally been developed for situations in which the geometry is kept to a minimum | for example, the case of searching for a point on one of m rays emanating from a point <ref> [BCR, KRT] </ref>, a line in the plane, or a point in an integer lattice [BCR].
Reference: [LS] <author> V. Lumelsky, A. Stepanov, </author> <title> "Path-Planning Strategies for a Point Mobile Automaton Moving Amidst Unknown Obstacles of Arbitrary Shape," </title> <journal> Algorithmica, </journal> <pages> 2(1987) pp. 403-430. </pages>
Reference-contexts: More recently, problems in this spirit have been addressed by Blum and Kozen in the context of automata theory [BK], and by Lumelsky, Stepanov, and others in robotics <ref> [LS] </ref>; they were first incorporated into the framework of on-line algorithms (cf. [ST, MMS]) by Papadimitriou and Yannakakis in [PY].
Reference: [MMS] <author> M. Manasse, L. McGeoch, D. Sleator, </author> <title> "Competitive Algorithms for Server Problems," </title> <journal> J. Algorithms, </journal> <volume> 11(1990), </volume> <month> pp.208-230. </month>
Reference-contexts: More recently, problems in this spirit have been addressed by Blum and Kozen in the context of automata theory [BK], and by Lumelsky, Stepanov, and others in robotics [LS]; they were first incorporated into the framework of on-line algorithms (cf. <ref> [ST, MMS] </ref>) by Papadimitriou and Yannakakis in [PY].
Reference: [O] <author> O. </author> <title> Ore Theory of Graphs, </title> <publisher> Providence: AMS, </publisher> <year> 1962. </year>
Reference-contexts: In one sense, such problems are as old as algorithmic maze-solving questions that reach back a century and more (see e.g. <ref> [O] </ref>). More recently, problems in this spirit have been addressed by Blum and Kozen in the context of automata theory [BK], and by Lumelsky, Stepanov, and others in robotics [LS]; they were first incorporated into the framework of on-line algorithms (cf. [ST, MMS]) by Papadimitriou and Yannakakis in [PY].
Reference: [PY] <author> C. Papadimitriou, M. Yannakakis, </author> <title> "Shortest Paths Without a Map," </title> <journal> Theoretical Computer Science, </journal> <volume> 84(1991), </volume> <pages> pp. 127-150. </pages>
Reference-contexts: More recently, problems in this spirit have been addressed by Blum and Kozen in the context of automata theory [BK], and by Lumelsky, Stepanov, and others in robotics [LS]; they were first incorporated into the framework of on-line algorithms (cf. [ST, MMS]) by Papadimitriou and Yannakakis in <ref> [PY] </ref>. Since then, a number of papers have analyzed algorithms for navigation in an unknown environment in terms of their competitive ratio: the worst-case ratio of the distance traveled by the algorithm to the distance that an optimal algorithm with a map of the scene would have traveled.
Reference: [ST] <author> D. Sleator, R. Tarjan, </author> <title> "Amortized Efficiency of List Update and Paging Rules," </title> <journal> Comm. ACM, </journal> <volume> 23(1985). </volume> <pages> 15 </pages>
Reference-contexts: More recently, problems in this spirit have been addressed by Blum and Kozen in the context of automata theory [BK], and by Lumelsky, Stepanov, and others in robotics [LS]; they were first incorporated into the framework of on-line algorithms (cf. <ref> [ST, MMS] </ref>) by Papadimitriou and Yannakakis in [PY].
References-found: 14

