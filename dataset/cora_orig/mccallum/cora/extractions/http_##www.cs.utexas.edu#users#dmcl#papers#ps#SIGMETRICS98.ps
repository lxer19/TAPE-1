URL: http://www.cs.utexas.edu/users/dmcl/papers/ps/SIGMETRICS98.ps
Refering-URL: http://www.cs.utexas.edu/users/dmcl/allpapers.html
Root-URL: 
Email: E-mail: fshenoy,ving@cs.utexas.edu,  
Phone: Telephone: (512) 471-9732, Fax: (512) 471-8885  
Title: Cello: A Disk Scheduling Framework for Next Generation Operating Systems  
Author: Prashant J. Shenoy and Harrick M. Vin 
Web: URL: http://www.cs.utexas.edu/users/dmcl  
Address: Taylor Hall 2.124, Austin, Texas 78712-1188  
Affiliation: Distributed Multimedia Computing Laboratory Department of Computer Sciences, University of Texas at Austin  
Abstract: In this paper, we present the Cello disk scheduling framework for meeting the diverse service requirements of applications. Cello employs a two-level disk scheduling architecture, consisting of a class-independent scheduler and a set of class-specific schedulers. The two levels of the framework allocate disk bandwidth at two time-scales: the class-independent scheduler governs the coarse-grain allocation of bandwidth to application classes, while the class-specific schedulers control the fine-grain interleaving of requests. The two levels of the architecture separate application-independent mechanisms from application-specific scheduling policies, and thereby facilitate the co-existence of multiple class-specific schedulers. We demonstrate that Cello is suitable for next generation operating systems since: (i) it aligns the service provided with the application requirements, (ii) it protects application classes from one another, (iii) it is work-conserving and can adapt to changes in work-load, (iv) it minimizes the seek time and rotational latency overhead incurred during access, and (v) it is computationally efficient. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R K. Abbott and H. Garcia-Molina. </author> <title> Scheduling I/O Requests with Deadlines: A Performance Evaluation. </title> <booktitle> In Proceedings of RTSS, </booktitle> <pages> pages 113-124, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: Hence, it can incur significant seek time and rotational latency overhead. This limitation has been addressed by several disk scheduling algorithms, including Priority SCAN (PSCAN), Earliest Deadline SCAN, Feasible Deadline SCAN (FD-SCAN), SCAN-EDF, Shortest Seek Earliest Deadline by Order/Value (SSEDO, SSEDV) <ref> [1, 4, 5, 16] </ref>, etc. These algorithms start from an EDF schedule and reorder requests so as to reduce the seek and rotational latency overhead without violating request deadlines. <p> In contrast, applications that support interactive navigation through virtual environments yield real-time requests with low average response time requirements. EDF and fixed priority schedulers are suitable for hard real-time applications [14], while scheduling algorithms such as FD-SCAN and SSEDV/SSEDO are are suitable for soft real-time applications <ref> [1, 5] </ref>. Just-in-time schedulers (which schedule requests just prior to their deadlines) are desirable for real-time applications that initiate data consumption at deadlines (e.g., video playback). <p> The concepts of allocating disk bandwidth at two time-scales and separating application-independent mechanisms from application-specific policies are the key contributions of the Cello disk scheduling framework. To service n application classes, Cello uses a class-independent scheduler C and n class-specific schedulers S i ; i 2 <ref> [1; n] </ref>, and maintains (n + 1) queues: n pending queues, one per application class and a scheduled queue (see Figure 2). Newly arriving requests are placed in the class-specific pending queues, and are eventually moved to the scheduled queue. Requests are dispatched for service from the scheduled queue. <p> Proportionate time-allocation In the proportionate time-allocation method, for each interval, the class-independent scheduler C maintains the disk idle time I, and the total service time U i ; i 2 <ref> [1; n] </ref> which includes seek time, rotational latency, and transfer time expended for scheduling requests from class i. At the beginning of each interval, I and U i are initialized to 0. <p> That is, the idle time is updated as I = I + t (10) Proportionate Byte-allocation In the proportionate byte-allocation method, for each interval, the class-independent scheduler C, maintains I, the disk idle time I; and U i ; i 2 <ref> [1; n] </ref>, the total service time expended for scheduling requests from class i. Additionally, C maintains B i ; i 2 [1; n], which denotes the total number of bytes accessed during an interval for class i. <p> t (10) Proportionate Byte-allocation In the proportionate byte-allocation method, for each interval, the class-independent scheduler C, maintains I, the disk idle time I; and U i ; i 2 <ref> [1; n] </ref>, the total service time expended for scheduling requests from class i. Additionally, C maintains B i ; i 2 [1; n], which denotes the total number of bytes accessed during an interval for class i. Just as in the proportionate time-allocation method, C ensures (1) holds at all times. <p> Specifically, if t denotes the current time, then the earliest time e i at which the disk may begin servicing the i th request (i 2 <ref> [1; R] </ref>) in the queue is given by: e i = t i = 1 (18) Given l i and e i , the slack of the i th request is defined as: s i = max (0; l i e i ) (19) Thus, s i defines the duration for
Reference: [2] <author> D. Anderson, Y. Osawa, and R. Govindan. </author> <title> A File System for Continuous Media. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(4) </volume> <pages> 311-337, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: Another common approach for servicing the mix of real-time and best-effort applications is to employ a scheduler that assigns priorities to application classes and services disk requests in the priority order. Unfortunately, such schedulers may violate service requirements of requests and induce starvation <ref> [2] </ref>. Finally, simply enhancing a conventional scheduler by allocating time-slices to service requests from different application classes may incur substantial seek and rotational latency overhead (for short time-slices) or yield unacceptable response times (for long time-slices) (see Figure 1).
Reference: [3] <author> P. Barham. </author> <title> A Fresh Approach to File System Quality of Service. </title> <booktitle> In Proceedings of NOSSDAV'97, </booktitle> <address> St. Louis, </address> <publisher> Missouri, </publisher> <pages> pages 119-128, </pages> <month> May </month> <year> 1997. </year>
Reference-contexts: These algorithms start from an EDF schedule and reorder requests so as to reduce the seek and rotational latency overhead without violating request deadlines. Unlike the systems for which these scheduling algorithms were designed, today's general purpose file and operating systems simultaneously support applications with diverse performance requirements <ref> [3, 15] </ref>. For instance, a typical file server today services requests from interactive best-effort applications (e.g., word processors); real-time applications (e.g., video and audio players); and file transfer applications (e.g., http servers). Interactive applications require the file server to minimize the average response time of requests.
Reference: [4] <author> M J. Carey, R. Jauhari, and M. Linvy. </author> <title> Priority in DBMS Resource Scheduling. </title> <booktitle> In Proceedings of the 15th VLDB Conference, </booktitle> <year> 1989. </year>
Reference-contexts: Hence, it can incur significant seek time and rotational latency overhead. This limitation has been addressed by several disk scheduling algorithms, including Priority SCAN (PSCAN), Earliest Deadline SCAN, Feasible Deadline SCAN (FD-SCAN), SCAN-EDF, Shortest Seek Earliest Deadline by Order/Value (SSEDO, SSEDV) <ref> [1, 4, 5, 16] </ref>, etc. These algorithms start from an EDF schedule and reorder requests so as to reduce the seek and rotational latency overhead without violating request deadlines.
Reference: [5] <author> S. Chen, J. A. Stankovic, J. F. Kurose, and D. Towsley. </author> <title> Performance Evaluation of Two New Disk Scheduling Algorithms for Real-Time Systems. </title> <journal> Journal of Real-Time Systems, </journal> <volume> 3 </volume> <pages> 307-336, </pages> <year> 1991. </year>
Reference-contexts: Hence, it can incur significant seek time and rotational latency overhead. This limitation has been addressed by several disk scheduling algorithms, including Priority SCAN (PSCAN), Earliest Deadline SCAN, Feasible Deadline SCAN (FD-SCAN), SCAN-EDF, Shortest Seek Earliest Deadline by Order/Value (SSEDO, SSEDV) <ref> [1, 4, 5, 16] </ref>, etc. These algorithms start from an EDF schedule and reorder requests so as to reduce the seek and rotational latency overhead without violating request deadlines. <p> In contrast, applications that support interactive navigation through virtual environments yield real-time requests with low average response time requirements. EDF and fixed priority schedulers are suitable for hard real-time applications [14], while scheduling algorithms such as FD-SCAN and SSEDV/SSEDO are are suitable for soft real-time applications <ref> [1, 5] </ref>. Just-in-time schedulers (which schedule requests just prior to their deadlines) are desirable for real-time applications that initiate data consumption at deadlines (e.g., video playback).
Reference: [6] <author> E G. Coffman and M. Hofri. </author> <title> On the Expected Performance of Scanning Disks. </title> <journal> SIAM Journal of Computing, </journal> <volume> 10(1) </volume> <pages> 60-70, </pages> <month> February </month> <year> 1982. </year>
Reference-contexts: This limitation has been addressed by several disk scheduling algorithms, such as Shortest Seek Time First (SSTF), SCAN, LOOK, V (R), etc., that schedule requests to minimize seek time <ref> [6, 7, 8, 9, 10, 18, 19, 20] </ref>; and Shortest fl This research was supported in part by an AT&T Foundation Award, IBM Faculty Development Award, Intel, the National Science Foundation (Research Initiation Award CCR-9409666 and CAREER award CCR-9624757), Lucent Bell Laboratories, NASA, Mitsubishi Electric Research Laboratories (MERL), and Sun Microsystems
Reference: [7] <author> E G. Coffman, L A. Klimko, and B. Ryan. </author> <title> Analysis of Scanning Policies for Reducing Disk Seek Times. </title> <journal> SIAM Journal of Computing, </journal> <volume> 1(3) </volume> <pages> 269-279, </pages> <month> September </month> <year> 1972. </year>
Reference-contexts: This limitation has been addressed by several disk scheduling algorithms, such as Shortest Seek Time First (SSTF), SCAN, LOOK, V (R), etc., that schedule requests to minimize seek time <ref> [6, 7, 8, 9, 10, 18, 19, 20] </ref>; and Shortest fl This research was supported in part by an AT&T Foundation Award, IBM Faculty Development Award, Intel, the National Science Foundation (Research Initiation Award CCR-9409666 and CAREER award CCR-9624757), Lucent Bell Laboratories, NASA, Mitsubishi Electric Research Laboratories (MERL), and Sun Microsystems
Reference: [8] <author> P J. Denning. </author> <title> Effects of Scheduling on File Memory Operations. </title> <booktitle> In Proceedings of AFIPS SJCC, </booktitle> <pages> pages 9-21, </pages> <year> 1967. </year>
Reference-contexts: This limitation has been addressed by several disk scheduling algorithms, such as Shortest Seek Time First (SSTF), SCAN, LOOK, V (R), etc., that schedule requests to minimize seek time <ref> [6, 7, 8, 9, 10, 18, 19, 20] </ref>; and Shortest fl This research was supported in part by an AT&T Foundation Award, IBM Faculty Development Award, Intel, the National Science Foundation (Research Initiation Award CCR-9409666 and CAREER award CCR-9624757), Lucent Bell Laboratories, NASA, Mitsubishi Electric Research Laboratories (MERL), and Sun Microsystems
Reference: [9] <author> R. Geist and S. Daniel. </author> <title> A Continuum of Disk Scheduling Algorithms. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 5(1) </volume> <pages> 77-92, </pages> <month> February </month> <year> 1987. </year>
Reference-contexts: This limitation has been addressed by several disk scheduling algorithms, such as Shortest Seek Time First (SSTF), SCAN, LOOK, V (R), etc., that schedule requests to minimize seek time <ref> [6, 7, 8, 9, 10, 18, 19, 20] </ref>; and Shortest fl This research was supported in part by an AT&T Foundation Award, IBM Faculty Development Award, Intel, the National Science Foundation (Research Initiation Award CCR-9409666 and CAREER award CCR-9624757), Lucent Bell Laboratories, NASA, Mitsubishi Electric Research Laboratories (MERL), and Sun Microsystems
Reference: [10] <author> M. Hofri. </author> <title> Disk Scheduling: FCFS vs. SSTF Revisited. </title> <journal> Communications of the ACM, </journal> <volume> 23(11) </volume> <pages> 645-653, </pages> <month> November </month> <year> 1980. </year>
Reference-contexts: This limitation has been addressed by several disk scheduling algorithms, such as Shortest Seek Time First (SSTF), SCAN, LOOK, V (R), etc., that schedule requests to minimize seek time <ref> [6, 7, 8, 9, 10, 18, 19, 20] </ref>; and Shortest fl This research was supported in part by an AT&T Foundation Award, IBM Faculty Development Award, Intel, the National Science Foundation (Research Initiation Award CCR-9409666 and CAREER award CCR-9624757), Lucent Bell Laboratories, NASA, Mitsubishi Electric Research Laboratories (MERL), and Sun Microsystems
Reference: [11] <author> D M. Jacobson and J. Wilkes. </author> <title> Disk Scheduling Algorithms Based on Rotational Position. </title> <type> Technical report, </type> <institution> Hewlett Packard Labs, </institution> <month> February </month> <year> 1991. </year>
Reference-contexts: Total/Access Time First (STF/SATF), Aged Shortest Access Time First (ASATF), etc., that schedule requests to minimize the total seek time and rotational latency overhead <ref> [11, 17] </ref>. 2. Disk scheduling algorithms optimized to service requests with real-time deadlines: The simplest of these algorithms is Earliest Deadline First (EDF) [14]. EDF schedules requests in the order of their deadlines but ignores the relative positions of requested data on disk in deriving the access schedule.
Reference: [12] <author> M.B. Jones, P. Leach, R. Draves, and J. Barrera. </author> <title> Support for User-Centric Modular Real-Time Resource Management in Rialto Operating System. </title> <booktitle> In Proceedings of NOSSDAV'95, </booktitle> <address> Durham, New Hampshire, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: Observe that the two-level disk scheduling framework of Cello facilitates the development of a service manager that allocates disk bandwidth as per the requirements of applications <ref> [12] </ref>.
Reference: [13] <author> J. P. Lehoczky and S. Ramos-Thuel. </author> <title> An optimal algorithm for scheduling soft-aperiodic tasks in fixed-priority preemptive systems. </title> <booktitle> In Proceedings of Real Time Systems Symposium, </booktitle> <pages> pages 110-123, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: To illustrate, consider a mix of real-time and best-effort applications. A real-time disk scheduling algorithm can be adapted to service these applications by modeling the requests generated by best-effort applications as a periodic task with deadlines <ref> [13] </ref>. This modeling, however, is non-trivial and introduces artificial constraints that reduce the effectiveness of the system. Another common approach for servicing the mix of real-time and best-effort applications is to employ a scheduler that assigns priorities to application classes and services disk requests in the priority order. <p> It can achieve this objective as follows: 1. Select a request from the pending queue in the FIFO order. 2. Insert the selected request into the scheduled queue using the classic slack stealing technique <ref> [13] </ref>. Specifically, the sched-uler inserts the request ahead of the request at position k in the scheduled queue only if the increase in service time yielded by inserting the request is smaller than s k .
Reference: [14] <author> C L. Liu and J W. Layland. </author> <title> Scheduling Algorithms for Multiprogramming in a Hard-Real-Time Environment. </title> <journal> Journal of the ACM, </journal> <volume> 30 </volume> <pages> 47-61, </pages> <year> 1973. </year>
Reference-contexts: Total/Access Time First (STF/SATF), Aged Shortest Access Time First (ASATF), etc., that schedule requests to minimize the total seek time and rotational latency overhead [11, 17]. 2. Disk scheduling algorithms optimized to service requests with real-time deadlines: The simplest of these algorithms is Earliest Deadline First (EDF) <ref> [14] </ref>. EDF schedules requests in the order of their deadlines but ignores the relative positions of requested data on disk in deriving the access schedule. Hence, it can incur significant seek time and rotational latency overhead. <p> In contrast, applications that support interactive navigation through virtual environments yield real-time requests with low average response time requirements. EDF and fixed priority schedulers are suitable for hard real-time applications <ref> [14] </ref>, while scheduling algorithms such as FD-SCAN and SSEDV/SSEDO are are suitable for soft real-time applications [1, 5]. Just-in-time schedulers (which schedule requests just prior to their deadlines) are desirable for real-time applications that initiate data consumption at deadlines (e.g., video playback).
Reference: [15] <author> A. Molano, K. Juvva, and R. Rajkumar. </author> <title> Real-time File Systems: Guaranteeing Timing Constraints for Disk Accesses in RT-Mach. </title> <booktitle> In Proceedings of IEEE Real-time Systems Symposium, </booktitle> <month> December </month> <year> 1997. </year>
Reference-contexts: These algorithms start from an EDF schedule and reorder requests so as to reduce the seek and rotational latency overhead without violating request deadlines. Unlike the systems for which these scheduling algorithms were designed, today's general purpose file and operating systems simultaneously support applications with diverse performance requirements <ref> [3, 15] </ref>. For instance, a typical file server today services requests from interactive best-effort applications (e.g., word processors); real-time applications (e.g., video and audio players); and file transfer applications (e.g., http servers). Interactive applications require the file server to minimize the average response time of requests.
Reference: [16] <author> A.L. Narasimha Reddy and J. Wyllie. </author> <title> Disk Scheduling in Multimedia I/O System. </title> <booktitle> In Proceedings of ACM Multimedia'93, </booktitle> <address> Anaheim, CA, </address> <pages> pages 225-234, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: Hence, it can incur significant seek time and rotational latency overhead. This limitation has been addressed by several disk scheduling algorithms, including Priority SCAN (PSCAN), Earliest Deadline SCAN, Feasible Deadline SCAN (FD-SCAN), SCAN-EDF, Shortest Seek Earliest Deadline by Order/Value (SSEDO, SSEDV) <ref> [1, 4, 5, 16] </ref>, etc. These algorithms start from an EDF schedule and reorder requests so as to reduce the seek and rotational latency overhead without violating request deadlines. <p> Most of the known real-time disk scheduling algorithms can be adapted to derive a suite of just-in-time schedulers with different properties. In what follows, we derive a just-in-time scheduler from the SCAN-EDF algorithm <ref> [16] </ref>. The SCAN-EDF real-time disk scheduling algorithm orders requests based on their deadlines, and then schedules requests with the same deadline in the SCAN order. This algorithm can be adapted to achieve just-in-time service as follows: 1.
Reference: [17] <author> M. Seltzer, P. Chen, and J. Ousterhout. </author> <title> Disk Scheduling Revisited. </title> <booktitle> In Proceedings of the 1990 Winter USENIX Conference, </booktitle> <address> Washington, D.C., </address> <pages> pages 313-323, </pages> <month> Jan </month> <year> 1990. </year>
Reference-contexts: Total/Access Time First (STF/SATF), Aged Shortest Access Time First (ASATF), etc., that schedule requests to minimize the total seek time and rotational latency overhead <ref> [11, 17] </ref>. 2. Disk scheduling algorithms optimized to service requests with real-time deadlines: The simplest of these algorithms is Earliest Deadline First (EDF) [14]. EDF schedules requests in the order of their deadlines but ignores the relative positions of requested data on disk in deriving the access schedule.
Reference: [18] <author> T. Teorey and T. B. Pinkerton. </author> <title> A Comparative Analysis of Disk Scheduling Policies. </title> <journal> Communications of the ACM, </journal> <volume> 15(3) </volume> <pages> 177-184, </pages> <month> March </month> <year> 1972. </year>
Reference-contexts: This limitation has been addressed by several disk scheduling algorithms, such as Shortest Seek Time First (SSTF), SCAN, LOOK, V (R), etc., that schedule requests to minimize seek time <ref> [6, 7, 8, 9, 10, 18, 19, 20] </ref>; and Shortest fl This research was supported in part by an AT&T Foundation Award, IBM Faculty Development Award, Intel, the National Science Foundation (Research Initiation Award CCR-9409666 and CAREER award CCR-9624757), Lucent Bell Laboratories, NASA, Mitsubishi Electric Research Laboratories (MERL), and Sun Microsystems
Reference: [19] <author> N. C. Wilhelm. </author> <title> An Anomaly in Disk Scheduling: A Comparison of FCFS and SSTF Seek Scheduling using and Empirical Model for Disk Access. </title> <journal> Communications of the ACM, </journal> <volume> 19(1) </volume> <pages> 13-17, </pages> <month> January </month> <year> 1976. </year>
Reference-contexts: This limitation has been addressed by several disk scheduling algorithms, such as Shortest Seek Time First (SSTF), SCAN, LOOK, V (R), etc., that schedule requests to minimize seek time <ref> [6, 7, 8, 9, 10, 18, 19, 20] </ref>; and Shortest fl This research was supported in part by an AT&T Foundation Award, IBM Faculty Development Award, Intel, the National Science Foundation (Research Initiation Award CCR-9409666 and CAREER award CCR-9624757), Lucent Bell Laboratories, NASA, Mitsubishi Electric Research Laboratories (MERL), and Sun Microsystems
Reference: [20] <author> B L. Worthington, G R. Ganger, and Y N. Patt. </author> <title> Scheduling Algorithms for Modern Disk Drives. </title> <booktitle> In Proceedings of ACM SIGMETRICS'94, </booktitle> <pages> pages 241-251, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: This limitation has been addressed by several disk scheduling algorithms, such as Shortest Seek Time First (SSTF), SCAN, LOOK, V (R), etc., that schedule requests to minimize seek time <ref> [6, 7, 8, 9, 10, 18, 19, 20] </ref>; and Shortest fl This research was supported in part by an AT&T Foundation Award, IBM Faculty Development Award, Intel, the National Science Foundation (Research Initiation Award CCR-9409666 and CAREER award CCR-9624757), Lucent Bell Laboratories, NASA, Mitsubishi Electric Research Laboratories (MERL), and Sun Microsystems
References-found: 20

