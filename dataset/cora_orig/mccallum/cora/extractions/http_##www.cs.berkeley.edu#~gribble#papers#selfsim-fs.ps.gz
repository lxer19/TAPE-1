URL: http://www.cs.berkeley.edu/~gribble/papers/selfsim-fs.ps.gz
Refering-URL: http://www.cs.berkeley.edu/~brewer/cs262.html
Root-URL: http://www.cs.berkeley.edu
Email: fgribble,manku,brewerg@cs.berkeley.edu  ftgibso2,elmg@cs.umbc.edu  
Title: Self-Similarity in File Systems for synthesizing a stream of events that exhibit the same self-similar
Author: Steven D. Gribble, Gurmeet Singh Manku, and Eric A. Brewer Timothy J. Gibson and Ethan L. Miller 
Note: nique  
Address: Berkeley  Baltimore County  
Affiliation: Computer Science Division, University of California at  Computer Science and Electrical Engineering Department, University of Maryland  
Abstract: This paper demonstrates that high-level file system events are self-similar in nature through the analysis of three sets of traces that span timescales of milliseconds through months, and that differ in the trace collection method, the filesystems being traced, and the chronological times of the tracing. Two sets of detailed, short-term file system trace data are analyzed; both are shown to have consistent Hurst parameters (a measure of self-similarity) for all file system traffic as well as individual classes of file system events. Long-term file system trace data (of a much coarser granularity) is then analyzed to demonstrate that high variability and self-similarity persist across timescales of many months. Using the short-term trace data, we then show that sources of file system traffic exhibit ON/OFF source behaviour, which is characterized by highly variably lengthed bursts of activity, followed by similarly variably lengthed periods of inactivity. This ON/OFF behaviour is used to motivate a simple tech 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Adams, D. </author> <title> What if the noise is the pattern. </title> <booktitle> Computer Measurement Group Transactions 88 (1995), </booktitle> <pages> 75-84. </pages>
Reference-contexts: The trend in the U**** data is shown in figure 4. To show these trends we use a technique called Z-scaling, where the data is shown in relationship to its own mean and standard deviation <ref> [1] </ref>. To better illustrate the pattern, both the overall file system activity and the same data randomly rearranged is shown. Parts a and b of the figure show the true data and the random data in a Z-scale plot. The randomized data is clearly more jagged.
Reference: [2] <author> Baker, M. G., Hartman, J. H., Kupfer, M. D., Shirriff, K. W., and Ousterhout, J. K. </author> <title> Measurements of a Distributed File System. </title> <booktitle> In Proceedings of the 13th ACM Symposium on Operating Systems Principles (1991). </booktitle>
Reference-contexts: The analysis of file system performance, access characteristics, and traffic patterns has received considerable attention in the past few years. In [24], the effects of file layout and fragmentation of a disk on file system performance are measured using synthesized work-loads. Baker et al. <ref> [2] </ref> analyzed the user-level file access patterns in the Sprite distributed file system using traces gathered via kernel instrumentation in a Sprite installation [10]. The design and performance of a log-structured file system is presented in [23], including the analysis of various cleaning policies. <p> The first set of traces was collected in 1991 for a study of the file access patterns and caching behaviour of the Sprite distributed file system <ref> [2] </ref>. The traces were collected on a Sprite cluster of approximately 40 workstations sharing a single Ethernet, over eight separate 24 hour intervals. <p> This difference is easily explainable. First and foremost, files are known to be read far more frequently than they are written; from table 1 we see that approximately 13.4% of NFS files are opened with write or RW privileges, while 86.6% of files are opened with read-only privilege. Similarly, <ref> [2] </ref> reported that 88% of files within the Sprite traces were opened with read-only privilege. Secondly, many file read and write events occur in between a given file open and close pair.
Reference: [3] <author> Beran, J., Sherman, R., Taqqu, M. S., and Will-inger, W. </author> <title> Long-range Dependence in Variable-Bit-Rate Video Traffic. </title> <journal> IEEE Transactions on Communications 43 (Mar. </journal> <year> 1995), </year> <pages> 1566-79. </pages>
Reference-contexts: 1 Introduction Recent studies of high quality network traces (see [13], <ref> [3] </ref>, and [19]) revealed an unexpected property of network traffic, namely that the traffic is self-similar in nature. Intuitively, a self-similar process looks similar and bursty across all time-scales. <p> If the combined traffic is self-similar, this is not necessarily the case. Further studies have shown that the total traffic (measured in bytes/s or packets/s) on Ethernet LANs [13] and on WANs [20] is self-similar. Similarly, investigations into variable-bit-rate (VBR) video traffic <ref> [3] </ref> have shown that traffic to exhibit long-range dependence, which is an indicator of self-similarity. The purpose of this paper is to demonstrate the existence of self-similarity in high-level file system events such as file opens, block writes, file closes, and file deletions. This paper is structured as follows. <p> We borrow heavily upon the theory and analysis techniques presented in these two papers to demonstrate the presence of self-similarity in file system traffic. Self-similarity in various other types of systems (such as wide-area traffic [20], ATM networks [8], variable-bit-rate video <ref> [3] </ref>, and World Wide Web traffic [5]) has been detected using similar techniques. The analysis of file system performance, access characteristics, and traffic patterns has received considerable attention in the past few years. <p> not in a statistically significant manner), suggesting the possibility that this parameter is to some degree independent of the type of file system measured. 4.3 R/S-Analysis and Pox plots A second estimate of the Hurst parameter can be obtained through R/S analysis (originally presented in [16], and fully explained in <ref> [3] </ref>). Given a set of observations (X k : k = 1; 2; : : : ; N ), that set is subdivided into K disjoint, contiguous subsets of length (N=K).
Reference: [4] <author> Blackwell, T., Harris, J., and Seltzer, M. </author> <title> Heuristic cleaning algorithms in log-structured file systems. </title> <booktitle> In Proceedings of the 1995 USENIX Technical Conference (Berkeley, </booktitle> <address> CA, USA, </address> <month> Jan </month> <year> 1995), </year> <pages> pp. 277-287. </pages>
Reference-contexts: The design and performance of a log-structured file system is presented in [23], including the analysis of various cleaning policies. The HP Au-toRAID hierarchical storage system is discussed in [27]. Algorithms for heuristically scheduling cleaning in an LFS based on idle time detection and prediction are discussed in <ref> [4] </ref>. In [17], adaptive methods for improving the performance log-structured file systems are de scribed and analyzed. 2 3 Theory of Self-Similarity The theory behind self-similar processes is briefly presented in this section.
Reference: [5] <author> Crovella, M. E., and Bestavros, A. </author> <title> Explaining world wide web traffic self-similarity. </title> <type> Tech. Rep. </type> <institution> TR-95-015, Computer Science Department, Boston University, </institution> <month> Oct </month> <year> 1995. </year>
Reference-contexts: We borrow heavily upon the theory and analysis techniques presented in these two papers to demonstrate the presence of self-similarity in file system traffic. Self-similarity in various other types of systems (such as wide-area traffic [20], ATM networks [8], variable-bit-rate video [3], and World Wide Web traffic <ref> [5] </ref>) has been detected using similar techniques. The analysis of file system performance, access characteristics, and traffic patterns has received considerable attention in the past few years. In [24], the effects of file layout and fragmentation of a disk on file system performance are measured using synthesized work-loads.
Reference: [6] <author> Dahlin, M. D., Mather, C. J., Wang, R. Y., An-derson, T. E., and Patterson, D. A. </author> <title> A quantitative analysis of cache policies for scalable network file systems. </title> <booktitle> In Proceedings of the SIGMETRICS '94 Annual Conference on Measurement and Modeling of Computer Systems (Nashville, </booktitle> <address> Tennessee, </address> <month> May </month> <year> 1994), </year> <institution> Association for Computing Machinery. </institution>
Reference-contexts: The second set of traces used in this paper was gathered from a relatively large NFS installation served by a single Auspex NFS server. These traces were collected in 1994 to study the impact of different cache policies on scalable network file system performance <ref> [6] </ref>. The Aus pex NFS server straddled four separate Ethernets, and served a total of 237 clients. The traces were collected by monitoring network activity on each of the four Eth-ernets. This implies that any file system request satisfied by a client-side NFS cache was not present in the trace.
Reference: [7] <author> Ferrari, D., and Verma, D. C. </author> <title> A scheme for real-time channel establishment in wide-area networks. </title> <journal> IEEE Journal on Selected Areas in Communications 8, </journal> <month> 3 (Apr. </month> <year> 1990), </year> <pages> 368-379. </pages>
Reference-contexts: The theoretical and practical consequences of having a self-similar process cannot be dismissed. A common assumption in the design of networks and operating systems is that the aggregation of a large number of bursty sources tends to be smooth. For example, statistical ad-missions criteria in real-time channel establishment <ref> [7] </ref> assume that while an individual source may exceed its average resource requirements at any given time, the aggregate resource requirements across many such sources has a low variance. If the combined traffic is self-similar, this is not necessarily the case.
Reference: [8] <author> Georganas, N. D. </author> <title> Self-similar ("fractal") traffic in atm networks. </title> <booktitle> In Proceedings of the 2nd International Workshop on Advanced Teleservices and High-Speed Communications Architectures (IWACA '94) (Heidel-berg, </booktitle> <address> Germany, </address> <month> Sept. </month> <year> 1994), </year> <pages> pp. 1-7. </pages>
Reference-contexts: We borrow heavily upon the theory and analysis techniques presented in these two papers to demonstrate the presence of self-similarity in file system traffic. Self-similarity in various other types of systems (such as wide-area traffic [20], ATM networks <ref> [8] </ref>, variable-bit-rate video [3], and World Wide Web traffic [5]) has been detected using similar techniques. The analysis of file system performance, access characteristics, and traffic patterns has received considerable attention in the past few years. <p> 0 20201 Seeks 28371 n/a Total #: 121215 4000000 Time: 14413s 91337s (4h) (25.37h) Table 1: Trace summaries: this table summarizes the number and type of events available in each of the file system traces. tem event arrival rate; file system events are thus only asymptotically self-similar (as defined in <ref> [8] </ref>) in the limit of large time scales. 4.2 Variance-time plots We can take advantage of equation 6 to more rigorously verify the self-similar nature of a process, and to estimate the value of the Hurst parameter H.
Reference: [9] <author> Gibson, T. J., and Miller, E. L. </author> <title> Long-Term File Activity Patterns in a UNIX Workstation Environment. </title> <booktitle> In Proceedings of the Fifteenth IEEE Symposium on Mass Storage Systems (Greenbelt, </booktitle> <address> MD, </address> <month> Mar </month> <year> 1998). </year>
Reference-contexts: Despite these drawbacks, the long-term traces provide a coarse-grained look at file system activity. Post-processing the trace files generated detailed long-term statistics for file accesses, modifications, creations, deletions, and other high-level file activity. <ref> [9] </ref> The U**** file system trace data is summarized in table 4. While the U**** data is disparate from the Sprite and NFS data, if file system traffic is truly self-similar, then the U**** data should also be self-similar.
Reference: [10] <author> Hartman, J. H. </author> <title> Using the Sprite File System Traces. </title> <institution> Computer Science Division, EECS Department, University of California at Berkeley, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: In [24], the effects of file layout and fragmentation of a disk on file system performance are measured using synthesized work-loads. Baker et al. [2] analyzed the user-level file access patterns in the Sprite distributed file system using traces gathered via kernel instrumentation in a Sprite installation <ref> [10] </ref>. The design and performance of a log-structured file system is presented in [23], including the analysis of various cleaning policies. The HP Au-toRAID hierarchical storage system is discussed in [27]. Algorithms for heuristically scheduling cleaning in an LFS based on idle time detection and prediction are discussed in [4].
Reference: [11] <author> Hastings, H. M., and Sugihara, G. </author> <title> Fractals: A User's Guide for the Natural Sciences. </title> <publisher> Oxford University Press, Oxford, </publisher> <address> UK, </address> <year> 1993. </year>
Reference-contexts: However, it is possible to analyze data for self-similarity with only several hundred data points. <ref> [11, 22] </ref> The Sprite and NFS traces provide hundreds of thousands of measurements to analyze. The U**** traces only provide 287 data points, so different techniques must be used to analyze them.
Reference: [12] <author> Kratz, M. F., and Resnick, S. I. </author> <title> The qq-estimator and heavy tails. </title> <type> Preprint, </type> <year> 1995. </year>
Reference: [13] <author> Leland, W. E., Taqqu, M. S., Willinger, W., and Wilson, D. V. </author> <title> On the Self-Similar Nature of Ethernet Traffic (extended version). </title> <journal> IEEE/ACM Transactions on Networking 2 (Feb. </journal> <year> 1994). </year>
Reference-contexts: 1 Introduction Recent studies of high quality network traces (see <ref> [13] </ref>, [3], and [19]) revealed an unexpected property of network traffic, namely that the traffic is self-similar in nature. Intuitively, a self-similar process looks similar and bursty across all time-scales. <p> If the combined traffic is self-similar, this is not necessarily the case. Further studies have shown that the total traffic (measured in bytes/s or packets/s) on Ethernet LANs <ref> [13] </ref> and on WANs [20] is self-similar. Similarly, investigations into variable-bit-rate (VBR) video traffic [3] have shown that traffic to exhibit long-range dependence, which is an indicator of self-similarity. <p> Finally, a summary of this paper is presented and general conclusions drawn in section 7. 2 Related Work The study of self-similarity in computer networks was pioneered by the work of Leland et al. <ref> [13] </ref>, in which they demonstrated that Ethernet traffic was self-similar in nature. Further work showed that the self-similarity could be attributed to the ON/OFF behaviour of traffic sources within their system [28]. <p> In [17], adaptive methods for improving the performance log-structured file systems are de scribed and analyzed. 2 3 Theory of Self-Similarity The theory behind self-similar processes is briefly presented in this section. A more thorough treatment can be found in <ref> [13] </ref>, [28], or [20]; the goal of this section is to outline enough of the theory to motivate the methodology discussed in 4. <p> As described in <ref> [13] </ref>, self-similar processes provide an explanation for an empirical law known as the Hurst effect.
Reference: [14] <author> Mandelbrot, B. </author> <title> Self-similar Error Clusters in Communication Systems and the Concept of Conditional Stationarity. </title> <journal> IEEE Transactions on Communication Technology COM-13 (1965). </journal>
Reference-contexts: However, we have not yet attempted to explain the underlying cause of this observed phenomenon. Willinger et al.[28] proposed a physical explanation of observed self-similarity in Ethernet LAN traffic, based on theory developed initially by Mandelbrot <ref> [14] </ref> and then Taqqu and Levy [25]. The theory states that the aggregation of many ON/OFF sources, each exhibiting a characteristic known as the Noah effect, results in self-similar total traffic.
Reference: [15] <author> Mandelbrot, B. </author> <title> The Fractal Nature of Geometry. </title> <editor> W. H. </editor> <publisher> Freeman and Company, </publisher> <address> New York, NY, USA, </address> <year> 1983. </year> <month> 19 </month>
Reference-contexts: If H &lt; 0:5, the values produced are self-similar with a negative correlation. Negative correlated data tends to reverse itself instead of continuing along the same path. Positive and negative correlated data is also called persistent and anti-persistent data respectively. <ref> [15, 21] </ref> Most observed self-similar data to date is persistent. 3 4 Self-Similarity in File Systems (Short-term) In this section we analyze two previously gathered sets of file system traces in order to detect self-similarity in high-level file system events.
Reference: [16] <author> Mandelbrot, B. B., and Wallis, J. R. </author> <title> Computer experiments with fractional gaussian noises. </title> <booktitle> Water Resources Research 5 (1969), </booktitle> <pages> 228-267. </pages>
Reference-contexts: traces are closely correlated (but not in a statistically significant manner), suggesting the possibility that this parameter is to some degree independent of the type of file system measured. 4.3 R/S-Analysis and Pox plots A second estimate of the Hurst parameter can be obtained through R/S analysis (originally presented in <ref> [16] </ref>, and fully explained in [3]). Given a set of observations (X k : k = 1; 2; : : : ; N ), that set is subdivided into K disjoint, contiguous subsets of length (N=K).
Reference: [17] <author> Matthews, J. N., Roselli, D., Costello, A. M., Wang, R., and Anderson, T. </author> <title> Improving the performance of log-structured file systems with adaptive methods. </title> <booktitle> In Proceedings of the Sixteenth ACM Symposium on Operating System Principles (Saint Malo, </booktitle> <address> France, </address> <month> Oct </month> <year> 1997). </year>
Reference-contexts: The HP Au-toRAID hierarchical storage system is discussed in [27]. Algorithms for heuristically scheduling cleaning in an LFS based on idle time detection and prediction are discussed in [4]. In <ref> [17] </ref>, adaptive methods for improving the performance log-structured file systems are de scribed and analyzed. 2 3 Theory of Self-Similarity The theory behind self-similar processes is briefly presented in this section.
Reference: [18] <author> Ousterhout, J. K., Costa, H. D., Harrison, D., Kunze, J., Kupfer, M., and Thompson, J. </author> <title> A Trace-driven Analysis of the UNIX 4.2 BSD File System. Operating System Review 19, </title> <booktitle> 4 (1985), </booktitle> <pages> 15-24. </pages>
Reference-contexts: Thus, the long-term traces collapse many events into one. Similarly, the trace collection process does not track how many times a file is used during a day. Finally, it misses all the temporary files the system creates and deletes during the day - Ousterhout <ref> [18] </ref> noted that 80% of all file creations have a lifetime of less than three minutes; all of these are missed. Despite these drawbacks, the long-term traces provide a coarse-grained look at file system activity.
Reference: [19] <author> Paxson, V. </author> <title> Fast approximation of self-similar network traffic. </title> <type> Tech. rep., </type> <institution> Lawrence Berkeley Laboratory and EECS Division, University of California, Berkeley, </institution> <address> 1 Cyclotron Road, Berkeley, CA 94720, </address> <month> Apr. </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Recent studies of high quality network traces (see [13], [3], and <ref> [19] </ref>) revealed an unexpected property of network traffic, namely that the traffic is self-similar in nature. Intuitively, a self-similar process looks similar and bursty across all time-scales.
Reference: [20] <author> Paxson, V., and Floyd, S. </author> <title> Wide-area Traffic: the Failure of Poisson Modeling. </title> <booktitle> In ACM SIGCOMM '94 Conference on Communications Architectures, Protocols and Applications (London, </booktitle> <address> UK, </address> <month> Aug. </month> <year> 1994). </year>
Reference-contexts: If the combined traffic is self-similar, this is not necessarily the case. Further studies have shown that the total traffic (measured in bytes/s or packets/s) on Ethernet LANs [13] and on WANs <ref> [20] </ref> is self-similar. Similarly, investigations into variable-bit-rate (VBR) video traffic [3] have shown that traffic to exhibit long-range dependence, which is an indicator of self-similarity. <p> We borrow heavily upon the theory and analysis techniques presented in these two papers to demonstrate the presence of self-similarity in file system traffic. Self-similarity in various other types of systems (such as wide-area traffic <ref> [20] </ref>, ATM networks [8], variable-bit-rate video [3], and World Wide Web traffic [5]) has been detected using similar techniques. The analysis of file system performance, access characteristics, and traffic patterns has received considerable attention in the past few years. <p> In [17], adaptive methods for improving the performance log-structured file systems are de scribed and analyzed. 2 3 Theory of Self-Similarity The theory behind self-similar processes is briefly presented in this section. A more thorough treatment can be found in [13], [28], or <ref> [20] </ref>; the goal of this section is to outline enough of the theory to motivate the methodology discussed in 4.
Reference: [21] <author> Peitgen, H. O., Jurgens, H., and Saupe, D. </author> <title> Chaos and Fractals: </title> <booktitle> New Frontiers of Science. </booktitle> <publisher> Springer Ver-lag, </publisher> <address> New York, NY, USA, </address> <year> 1992. </year>
Reference-contexts: If H &lt; 0:5, the values produced are self-similar with a negative correlation. Negative correlated data tends to reverse itself instead of continuing along the same path. Positive and negative correlated data is also called persistent and anti-persistent data respectively. <ref> [15, 21] </ref> Most observed self-similar data to date is persistent. 3 4 Self-Similarity in File Systems (Short-term) In this section we analyze two previously gathered sets of file system traces in order to detect self-similarity in high-level file system events.
Reference: [22] <author> Peters, E. E. </author> <title> Chaos and Order in the Capital Market. </title> <publisher> John Wiley & Sons, </publisher> <address> New York, NY, USA, </address> <year> 1996. </year>
Reference-contexts: However, it is possible to analyze data for self-similarity with only several hundred data points. <ref> [11, 22] </ref> The Sprite and NFS traces provide hundreds of thousands of measurements to analyze. The U**** traces only provide 287 data points, so different techniques must be used to analyze them.
Reference: [23] <author> Rosenblum, M., and Ousterhout, J. K. </author> <title> The Design and Implementation of a Log-Structured File System. </title> <booktitle> In Proceedings of the 13th ACM Symposium on Operating Systems Principles (1991). </booktitle>
Reference-contexts: Baker et al. [2] analyzed the user-level file access patterns in the Sprite distributed file system using traces gathered via kernel instrumentation in a Sprite installation [10]. The design and performance of a log-structured file system is presented in <ref> [23] </ref>, including the analysis of various cleaning policies. The HP Au-toRAID hierarchical storage system is discussed in [27]. Algorithms for heuristically scheduling cleaning in an LFS based on idle time detection and prediction are discussed in [4].
Reference: [24] <author> Smith, K., and Seltzer, M. </author> <title> File layout and file system performance. </title> <type> Tech. Rep. </type> <institution> TR-35-94, Harvard University, </institution> <year> 1994. </year>
Reference-contexts: The analysis of file system performance, access characteristics, and traffic patterns has received considerable attention in the past few years. In <ref> [24] </ref>, the effects of file layout and fragmentation of a disk on file system performance are measured using synthesized work-loads. Baker et al. [2] analyzed the user-level file access patterns in the Sprite distributed file system using traces gathered via kernel instrumentation in a Sprite installation [10].
Reference: [25] <author> Taqqu, M., and Levy, J. </author> <title> Using renewal processes to generate long-range dependence and high variability. In Dependence in Probability and Statistics (Boston, </title> <address> MA, </address> <year> 1986), </year> <editor> E. Eberlein and M. Taqqu, </editor> <booktitle> Eds., </booktitle> <pages> pp. 73-89. </pages>
Reference-contexts: However, we have not yet attempted to explain the underlying cause of this observed phenomenon. Willinger et al.[28] proposed a physical explanation of observed self-similarity in Ethernet LAN traffic, based on theory developed initially by Mandelbrot [14] and then Taqqu and Levy <ref> [25] </ref>. The theory states that the aggregation of many ON/OFF sources, each exhibiting a characteristic known as the Noah effect, results in self-similar total traffic. <p> The Noah effect refers to the high variability of the ON and OFF periods. If the distribution of ON and OFF period lengths from individual sources is heavy-tailed, 2 then the aggregate traffic exhibits the Noah effect, and can be shown to exhibit self-similarity. The theory presented in <ref> [25] </ref> makes the simplifying assumption that events within an ON period are evenly distributed. The ON/OFF source model is thus similar to packet-train models often used to model network 2 A heavy-tailed distribution is typically one which exhibits infinite variance.
Reference: [26] <author> Tukey, J., and Tukey, P. </author> <title> Strips displaying empirical distributions: I. textured dot strips. </title> <note> In Bellcore Technical Memorandum (1990). </note>
Reference-contexts: Figure 5 presents two textured dot strip plots obtained from the Sprite and NFS traces. A textured dot strip plot (proposed in <ref> [26] </ref>) is a two-dimensional representation of a one-dimensional time-series. Each vertical column in a plot corresponds to one time unit; the displacement of dots (representing events) within that column represents the fractional position of the event in that time unit.
Reference: [27] <author> Wilkes, J., Golding, R., Staelin, C., and Sulli-van, T. </author> <title> The hp autoraid hierarchical storage system technology. </title> <booktitle> In Proceedings of the 15th Symposium on Operating System Principles (Monterey, </booktitle> <address> CA, USA, </address> <month> Nov </month> <year> 1995). </year>
Reference-contexts: The design and performance of a log-structured file system is presented in [23], including the analysis of various cleaning policies. The HP Au-toRAID hierarchical storage system is discussed in <ref> [27] </ref>. Algorithms for heuristically scheduling cleaning in an LFS based on idle time detection and prediction are discussed in [4].
Reference: [28] <author> Willinger, W., Taqqu, M. S., Sherman, R., and Wilson, D. V. </author> <title> Self-similarity through high-variability: Statistical analysis of ethernet lan traffic at the source level. </title> <booktitle> In ACM SIGCOMM '95 Conference on Communications Architectures, Protocols and Applications (Cambridge, </booktitle> <address> MA, USA, </address> <year> 1995). </year> <month> 20 </month>
Reference-contexts: Further work showed that the self-similarity could be attributed to the ON/OFF behaviour of traffic sources within their system <ref> [28] </ref>. We borrow heavily upon the theory and analysis techniques presented in these two papers to demonstrate the presence of self-similarity in file system traffic. <p> In [17], adaptive methods for improving the performance log-structured file systems are de scribed and analyzed. 2 3 Theory of Self-Similarity The theory behind self-similar processes is briefly presented in this section. A more thorough treatment can be found in [13], <ref> [28] </ref>, or [20]; the goal of this section is to outline enough of the theory to motivate the methodology discussed in 4. <p> To do so, we use a method similar to that described in <ref> [28] </ref>. The source's trace is scanned linearly; given an event from the trace, we assume that subsequent events belong to the same ON period if they occur within some threshold amount of time, otherwise we mark the interval to the next event as an OFF period. <p> (U &gt; u) ~ cu ff with u ! 1; 1 &lt; ff &lt; 2; (14) for period length U, and if the activity within an ON-period is uniform, then the aggregation of many such sources gives rise to a self-similar process with Hurst parameter H = 3ff 2 . <ref> [28] </ref> Once the ON and OFF periods from a given source have been identified, we can verify the presence of the Noah effect using two techniques, one heuristic and the other statistically more robust.
References-found: 28

