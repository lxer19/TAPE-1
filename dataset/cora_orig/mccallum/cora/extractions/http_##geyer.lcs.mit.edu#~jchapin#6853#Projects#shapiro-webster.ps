URL: http://geyer.lcs.mit.edu/~jchapin/6853/Projects/shapiro-webster.ps
Refering-URL: http://geyer.lcs.mit.edu/~jchapin/6853/Projects/index.html
Root-URL: 
Email: -dshapiro, swebster-@mit.edu  
Title: Incorporating PICS-based Filtering into the WWW Browser Amaya  
Author: David Shapiro and Seth Webster 
Abstract: Content-based filtering is one approach to dealing with the vast amount of questionable material available on the WorldWide Web. To demonstrate the viability of filtering, we have incorporated a PICS-based filter in the Web browser Amaya. We found that the filter itself was easy to implement but creating a user interface for it proved to be much more difficult due to the complexity of Amayas design. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Irne Vatton. </author> <note> Amaya Overview http://www.w3.org/Amaya/ </note>
Reference-contexts: Section 5 contains the results of some simple performance tests. Section 6 presents conclusions drawn from our work. 2 Overview 2.1 Amaya Amaya is a Web browsing/authoring tool created and made publicly available by the WorldWide Web Consortium (W3C). <ref> [1] </ref> It was developed as a testbed for experimental Web protocols and standards. A single distribution of Amaya source code can be compiled to run on either Windows or Unix.
Reference: [2] <author> Vincent Quint and Irne Vatton. </author> <note> About Thot http://opera.inrialpes.fr/thot/AboutThot.html </note>
Reference-contexts: The Thot library is used by Amaya for manipulating and displaying both the Web pages and the entire user interface. Thot is a library of C routines designed to facilitate the building of applications for structured active documents. <ref> [2] </ref> Amaya is built directly on top of Thot, rather than interfacing with traditional libraries such as X/Motif or Win32. Thot abstracts away the system dependent libraries and presents a set of high level primitives for creating document elements. Amayas browser interface is simply a collection of Thot supplied primitives.
Reference: [3] <author> Philip DesAutels. </author> <title> Platform for Internet Content Selection (PICS) http://www.w3.org/PICS/ </title>
Reference-contexts: Amayas browser interface is simply a collection of Thot supplied primitives. All of our changes were made to the UNIX version of Amaya (version 1.1c), running under RedHat Linux 4.2. 2.2 PICS PICS, the Platform for Internet Content Selection, is an infrastructure for associating labels (metadata) with Internet content. <ref> [3] </ref> It is a technology platform developed by W3C to allow for filtering of information.
Reference: [4] <author> Jim Miller. </author> <note> PICS Statement of Principles http://www.w3.org/PICS/principles.html </note>
Reference-contexts: PICS was designed to allow the development of filters while preserving three fundamental principles: Self-Rating, Third-party Rating, and Ease-of-use. <ref> [4] </ref> The PICS standard encompasses three different, but closely linked, data formats: Rating Service Descriptions, Labels and Profiles.
Reference: [5] <author> Jim Miller. </author> <title> Rating Services and Rating Systems (and Their Machine Readable Descriptions) http://www.w3.org/PICS/services.html </title>
Reference-contexts: Rating Service Descriptions provide the necessary information in order to be able to interpret labels properly. <ref> [5] </ref> A Service Description typically consists of several categories, each of which can have its own properties, along with methods to indicate values within each category. The most popular rating service currently in use, RSACi, consists of four categories: violence, sex, nudity and language.
Reference: [6] <author> Jim Miller. </author> <title> PICS Label Distribution Label Syntax and Communication Protocols http://www.w3.org/PICS/labels.html </title>
Reference-contexts: There are three ways that labels can be retrieved for a given URL: in the header of an HTML file, as an RFC-822 style header in a data stream, or as a separate file, possibly even from a third-party server. <ref> [6] </ref> For a given retrieval method, a URL can have one label per Rating Service. The values in a label are indications of the nature of the content of a particular URL.
Reference: [7] <author> Martin Presler-Marshall. </author> <note> PICSRules 1.1 http://www.w3.org/PICS/picsrules/spec11.htm </note>
Reference-contexts: Profiles provide a way for users to describe exactly what content to filter, based on the labels associated with it. The PICSRules language is used to construct filters and can incorporate any number of rating systems at a time. <ref> [7] </ref> 3 Extending Amaya 3.1 Amaya/PICS We modified the Amaya browser to support PICS-based filtering of properly labeled pages. Our implementation of PICS only handles labels embedded in the header of HTML files; it does not contact third-party label 3 bureaus for labels.
Reference: [8] <author> David Shapiro. </author> <title> PICS Standard Library http://www.w3.org/PICS/refcode/Parser/ </title>
Reference-contexts: A set of parsers for converting text files containing label lists, service descriptions and PICSRules profiles into Label, Service and Profile Java objects. <ref> [8] </ref> Since the HTTP stack of Amaya consists of Java source code, implementing our filtering mechanism using the PICS Standard Library allowed us to confine much of our filtering code work to Amayas Java layer.
Reference: [9] <author> Tim Wilkinson. </author> <note> Kaffe http://www.kaffe.org/ </note>
Reference-contexts: calls to the Thot API, which contains approximately 450,000 lines of C source code. 4.2 Kaffe Java VM Kaffe is a freeware Java virtual machine which is being developed using a clean room approach to separate it from Suns VM, and is used by Amaya to execute the Java code. <ref> [9] </ref> Unfortunately, Kaffe is not a full implementation of a Java VM. Among other things, we found that it does not support the Java Abstract Window Toolkit (AWT) or Runtime.exec () calls. The lack of AWT support prevented us from creating windows using Java source code.
References-found: 9

