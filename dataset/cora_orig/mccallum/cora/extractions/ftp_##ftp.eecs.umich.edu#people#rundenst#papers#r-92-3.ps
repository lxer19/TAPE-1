URL: ftp://ftp.eecs.umich.edu/people/rundenst/papers/r-92-3.ps
Refering-URL: http://www.eecs.umich.edu/~rundenst/group/papers.html
Root-URL: http://www.cs.umich.edu
Title: Evaluating Aggregates in Possibilistic Relational Databases  
Author: ELKE A. RUNDENSTEINER and LUBOMIR BIC 
Keyword: Categories and Subject Descriptors: H.2.3 [Database Management]: Languages Query languages. Additional Key Words and Phrases: Scalar Aggregates, Aggregate Functions, Partitioning Function, Relational Database Model, Possibilistic Relational Model, Possibility Theory and Fuzzy Set Theory.  
Date: August, 1990  January, 1991  
Note: Original submission date:  Submission date of Revision:  Paper reference number: 255 This work has partially been supported by NSF grant CCR-8709817.  
Address: Irvine, CA 92717  
Affiliation: Department of Information and Computer Science University of California, Irvine  
Abstract: The need for extending information management systems to handle the imprecision of information found in the real world has been recognized. Fuzzy set theory together with possibility theory represent a uniform framework for extending the relational database model with these features. However, none of the existing proposals for handling imprecision in the literature has dealt with queries involving a functional evaluation of a set of items, traditionally referred to as aggregation. Two kinds of aggregate operators, namely, scalar aggregates and aggregate functions, exist. Both are important for most real-world applications, and thus this paper presents a framework for handling these two types of aggregates in the context of imprecise information. We consider three cases, specifically, aggregates within vague queries on precise data, aggregates within precisely specified queries on pos-sibilistic data, and aggregates within vague queries on imprecise data. The consistency of the proposed operations is shown. An extended operator is defined to be consistent if it defaults to its classical counterpart when evaluated on crisp data. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Astrahan, M. M., Blasgen, M. W., Chamberlin, D. D., and others. </author> <title> System R: Relational approach to database management. </title> <journal> ACM Trans. Database Systems 1, </journal> <volume> 2 (1976), 97 - 137. </volume>
Reference-contexts: The only notable exception is the work of Ozsoyoglu et al [13], which addresses aggregation over set-valued attributes. 2 This paper investigates the incorporation of aggregate operators into Fuzzy Relational Query Languages (FRQL). Queries involving scalar aggregates and aggregate functions can be managed by traditional query languages like SQL <ref> [1] </ref> or QUEL [7], therefore both are also supported in our proposed model. There are three general cases we consider. First, we handle approximate queries on a relational database containing precise information. <p> attribute, where arithmetic mean is defined to be the sum divided by the count. ( e.g., What is the average salary for female professors?) * any: This checks whether the relation is empty (0) or not (1). (e.g., Is there a female professor at UCI?) Both QUEL [7] and SQL <ref> [1] </ref>, the query languages of Ingres and System R, respectively, require that aggregate operations be able to accept arguments with duplicates. This means that they provide two other operators, let us call them UNIQUE and DUPLICATE, which are used in conjunction with the just described aggregate operators. <p> The proposed data model is based on discrete possibility distributions, therefore the presentation is limited to discrete possibility distributions. Definition 6 Let U be a universe of discourse. F is a fuzzy subset of U, if there is a membership function F j U ! <ref> [0; 1] </ref>; (4) which associates with each element u 2 U a grade of membership F (u) in the fuzzy set F. <p> Example 4 The fuzzy set Old could be defined on the domain Age = <ref> [1, 2, ..., 100] </ref> in the manner described in Figure 3. The tuple (70,1.0) (or better, 1.0/70) denotes that the membership of Age=70 in the fuzzy set Old is 1.0, meaning, that a person with the Age of 70 is considered old. <p> U = U 1 x U 2 x ... x U n . Then an n-ary fuzzy relation r in U is a relation which is characterized by a n-variate membership function ranging over U, i.e., r : U ! <ref> [0; 1] </ref> (9) Since the traditional relational data model is based on the foundation of set and relation theory, the proposal to adopt the concept of a fuzzy relation from fuzzy set theory as given in Definition 9 for the enhanced data model has been made by several researchers [28, 31]. <p> Definition 14 Let r be a relation defined over the relation schema R (A i ; A j ,...). and F be a fuzzy set over the domain of A j denoted by F . Let ff 2 <ref> [0; 1] </ref>. Then, the ff-level relation A r j (ff) is defined by: A r The definition of an ff-level relation is based on the concept of an ff-level set F ff (Definition 7). <p> Thus, the partition function is now defined for all a 2 D by r (a) = ft j (t 2 r) ^ (a 2 D) ^ ( t [A j ] (a) &gt; 0)g (17) Let ff 2 <ref> [0; 1] </ref>. For each partition block P A j r (a) define the ff-level partition L A j function of two variables, ff and a. <p> In particular, PRDM is able to handle vague queries. However, in order to make use of the PRDM in real world applications, it became imperative to develop and incorporate suitable aggregate evaluation mechanisms supported by most existing relational database systems, such as, System R <ref> [1] </ref> or Ingres [7]. The major contribution of this paper is the development of a framework of evaluation procedures for scalar aggregates as well as aggregate functions for the PRDM. First, we extended the definition of conventional aggregate operators to cope with vague queries.
Reference: [2] <author> Bandler, W. and Kohout, L. </author> <title> Fuzzy Power Sets and Fuzzy Implication Operators. Fuzzy Sets and Systems 4, </title> <booktitle> (1980), </booktitle> <volume> 13 - 30. </volume>
Reference-contexts: Example 4 The fuzzy set Old could be defined on the domain Age = <ref> [1, 2, ..., 100] </ref> in the manner described in Figure 3. The tuple (70,1.0) (or better, 1.0/70) denotes that the membership of Age=70 in the fuzzy set Old is 1.0, meaning, that a person with the Age of 70 is considered old.
Reference: [3] <author> Buckles, B. P. and Petry, F. E. </author> <title> A Fuzzy Representation of Data for Relational Databases. </title> <journal> Fuzzy Sets and Systems. </journal> <volume> 7, </volume> <year> (1982), </year> <pages> 213 - 226. </pages>
Reference-contexts: The first issue addresses the limitation of conventional data models to allow attributes to take but one constant value from a domain. Buckles and Petry <ref> [3] </ref> modified this restriction by replacing attribute values by sets of values. Umano [26] and Zvieli modified this restriction by allowing fuzzy sets and memberships values. <p> of this paper, we will make extensive use of this definition, especially for defining generalized versions of the classical scalar aggregates. 4 EXTENDING THE RELATIONAL DATA MODEL 4.1 The Possibilistic Relational Data Model Various attempts toward enhancing the relational database model by fuzzy extensions can be found in the literature <ref> [3, 15, 30, 21] </ref>. This section reviews the basics underlying most of these models and then describes our approach of enhancing the relational model by means of fuzzy set theory, which results in the possibilistic relational model [23]. <p> This proposal of different data types corresponds to the approach of Prade and Testemale [15] and Zemankova and Kandel [30]. Most other approaches in the literature restrict their models to a subset of the above, e.g. Buckles and Petry <ref> [3] </ref> and Ozsoyoglu, Ozsoyoglu, and Matos [13] allow only the data types (1) and (2), Umano [25] permits (1), (2) and (4), and many others use only 15 (4) besides (1), e.g. Zvieli [31] and Raju and Majumdar [16]. Now the following can be defined. <p> The third case is only concerned with aggregate functions, whereas the others have to consider both, scalar aggregates and aggregate functions. An important goal of this research in either of the above cases is to base the generalizations of the aggregate evaluation on the consistency principle <ref> [3] </ref>. A generalized operation is consistent if and only if it defaults to (is consistent with) the corresponding crisp operation for conventional data. This requirement states that the generalized versions of aggregates are supposed to be natural extensions of their crisp counterparts.
Reference: [4] <author> Buckles, B. P., Petry, F. E., and Sachar, H. S. </author> <title> A Domain Calculus for Fuzzy Relational Databases. </title> <type> Tech. Rep. </type> <institution> CSE TR-85-006, Dep. of Computer Science Engineering, Uni. of Texas, Arlington, </institution> <month> (Nov. </month> <year> 1985). </year>
Reference-contexts: Most attempts to design an enhanced RQL, here called a FRQL, are based on some form of the generally accepted relational algebra or relational calculus, both developed by Codd [6]. Buckles and Petry <ref> [4] </ref> propose a domain calculus for their set-valued data model. Prade and Testemale [15] extended the classical relational algebra to accommodate the possibilistic representation. Rundensteiner et al [21] advocate the use of resemblance relations instead of similarity relations to measure the nearness between tuples that contain possibilistic data. <p> U we f23; 24; 25g 130 male Anita about20 light female Hans young f0:6=120; 1:0=130g male M ary 20 110 female 4.2 Relational Algebra for the Possibilistic Relational Model Several suggestions can be found in the literature on how to extend the relational algebra operations to deal with possibilistic data <ref> [4, 15, 26, 30, 31, 21] </ref>. Important issues among others are how to compare two possibility distributions and how to measure their similarity. We will limit our discussion here to the SELECT operation. For the other relational algebra operations see [23].
Reference: [5] <author> Codd, E. F. </author> <title> Extending the Relational Database Model to capture more meaning. </title> <journal> ACM Trans. on Database Systems 4, </journal> <note> 4 (Dec. 1979), 397 - 434. </note>
Reference-contexts: future research are discussed in the last section. 3 2 AGGREGATES IN RELATIONAL QUERY LANGUAGES In this section, we review how aggregates are handled within the classical relational data model [6, 12]. 2.1 The Classical Relational Model In the following some basic concepts related to the classical relational database model <ref> [6, 5] </ref> are introduced. A relational data model consists of a set of attribute names A i , a set of corresponding domains U i , and a set of relation schemas R i and relations r i . <p> This is an important issue worth further investigating, but it is beyond the scope of this work. It is related to the problem of handling null values in the traditional relational database model <ref> [5] </ref>. Let us mention here, that conventional systems which allow null values remove those from the column before computing the aggregates, e.g. see Ingres [7].
Reference: [6] <author> Codd, E. F. </author> <title> A relational model of data for large shared data banks. </title> <journal> Communications of the ACM 13, </journal> <month> 6 (June </month> <year> 1970), </year> <pages> 337 - 387. </pages>
Reference-contexts: 1 INTRODUCTION It has been widely recognized that the vagueness, uncertainty, and incompleteness inherent in the real world data have to be dealt with in information management systems. Research in coping with this phenomenon has to a large extent been based on the relational data model developed by Codd <ref> [6] </ref>. Unfortunately, almost all available implementations of relational database systems are modeling the real world in a deterministic manner and allow only for exact retrievals. <p> Most attempts to design an enhanced RQL, here called a FRQL, are based on some form of the generally accepted relational algebra or relational calculus, both developed by Codd <ref> [6] </ref>. Buckles and Petry [4] propose a domain calculus for their set-valued data model. Prade and Testemale [15] extended the classical relational algebra to accommodate the possibilistic representation. <p> Rundensteiner et al [21] advocate the use of resemblance relations instead of similarity relations to measure the nearness between tuples that contain possibilistic data. This can be used to evaluate comparisons between tuples and to determine whether a tuple is redundant. Database systems featuring only retrieval and update operations <ref> [6] </ref> are inadequate for many important applications [12]. Virtually all real-world problems need query capabilities involving aggregate and statistical functions [7]. Consequently, most commercially available systems provide a set of these aggregate operators [24, 7]. <p> Section 5 is devoted to our proposal for evaluating aggregates within the PRDM. Conclusions and future research are discussed in the last section. 3 2 AGGREGATES IN RELATIONAL QUERY LANGUAGES In this section, we review how aggregates are handled within the classical relational data model <ref> [6, 12] </ref>. 2.1 The Classical Relational Model In the following some basic concepts related to the classical relational database model [6, 5] are introduced. <p> future research are discussed in the last section. 3 2 AGGREGATES IN RELATIONAL QUERY LANGUAGES In this section, we review how aggregates are handled within the classical relational data model [6, 12]. 2.1 The Classical Relational Model In the following some basic concepts related to the classical relational database model <ref> [6, 5] </ref> are introduced. A relational data model consists of a set of attribute names A i , a set of corresponding domains U i , and a set of relation schemas R i and relations r i . <p> Query languages for the relational database model (RQLs) are based on either the relational algebra or the relational calculus, both proposed by Codd <ref> [6] </ref>. In this paper, we use the relational algebra. We chose a notation similar to the one of QUEL [7] over a more formal mathematical one in order to make the queries more understandable. The readers are assumed to be familiar with the relational algebra. <p> Necessary characteristics of the extended sum aggregate definition are the commutativity and associativity, since the relational data model does not place any order on the tuples of a relation but considers them as a `set of tuples' <ref> [6] </ref>. The sum aggregate, here termed f sum, is defined based on the application of the resolution principle (Definition 8).
Reference: [7] <author> Date, C. J. </author> <title> A Guide to Ingres. </title> <publisher> Addison-Wesley Pub. Co., </publisher> <address> Reading, Mass, </address> <year> 1987. </year>
Reference-contexts: This can be used to evaluate comparisons between tuples and to determine whether a tuple is redundant. Database systems featuring only retrieval and update operations [6] are inadequate for many important applications [12]. Virtually all real-world problems need query capabilities involving aggregate and statistical functions <ref> [7] </ref>. Consequently, most commercially available systems provide a set of these aggregate operators [24, 7]. This strongly suggests that the evaluation of aggregates has to be dealt with in the context of the extended relational models. <p> Database systems featuring only retrieval and update operations [6] are inadequate for many important applications [12]. Virtually all real-world problems need query capabilities involving aggregate and statistical functions [7]. Consequently, most commercially available systems provide a set of these aggregate operators <ref> [24, 7] </ref>. This strongly suggests that the evaluation of aggregates has to be dealt with in the context of the extended relational models. However, most research on extending relational query languages has neglected this issue of aggregate evaluation. <p> Queries involving scalar aggregates and aggregate functions can be managed by traditional query languages like SQL [1] or QUEL <ref> [7] </ref>, therefore both are also supported in our proposed model. There are three general cases we consider. First, we handle approximate queries on a relational database containing precise information. <p> Query languages for the relational database model (RQLs) are based on either the relational algebra or the relational calculus, both proposed by Codd [6]. In this paper, we use the relational algebra. We chose a notation similar to the one of QUEL <ref> [7] </ref> over a more formal mathematical one in order to make the queries more understandable. The readers are assumed to be familiar with the relational algebra. For more information we refer them to [7]. 2.2 Aggregates in Relational Query Languages Retrieval statements composed out of retrieval operations, such as the relational <p> We chose a notation similar to the one of QUEL <ref> [7] </ref> over a more formal mathematical one in order to make the queries more understandable. The readers are assumed to be familiar with the relational algebra. For more information we refer them to [7]. 2.2 Aggregates in Relational Query Languages Retrieval statements composed out of retrieval operations, such as the relational algebra operations, are inadequate for many important applications of database management systems [12]. Many real-world queries involve the application of aggregate and statistical functions to database relations. <p> Many real-world queries involve the application of aggregate and statistical functions to database relations. Therefore most commercial systems provide a set of these aggregate operators <ref> [24, 7] </ref>. The most common aggregate operators of the conventional RQLs as, for example, found in Ingres [7], are count, any, sum, avg, min, and max. <p> Many real-world queries involve the application of aggregate and statistical functions to database relations. Therefore most commercial systems provide a set of these aggregate operators [24, 7]. The most common aggregate operators of the conventional RQLs as, for example, found in Ingres <ref> [7] </ref>, are count, any, sum, avg, min, and max. <p> for a given attribute, where arithmetic mean is defined to be the sum divided by the count. ( e.g., What is the average salary for female professors?) * any: This checks whether the relation is empty (0) or not (1). (e.g., Is there a female professor at UCI?) Both QUEL <ref> [7] </ref> and SQL [1], the query languages of Ingres and System R, respectively, require that aggregate operations be able to accept arguments with duplicates. This means that they provide two other operators, let us call them UNIQUE and DUPLICATE, which are used in conjunction with the just described aggregate operators. <p> It is related to the problem of handling null values in the traditional relational database model [5]. Let us mention here, that conventional systems which allow null values remove those from the column before computing the aggregates, e.g. see Ingres <ref> [7] </ref>. Attribute variables appearing as an argument for a scalar aggregate are purely local to it and thus do not interfere with any variable outside the scope of the aggregate. The following example demonstrates the point. <p> In particular, PRDM is able to handle vague queries. However, in order to make use of the PRDM in real world applications, it became imperative to develop and incorporate suitable aggregate evaluation mechanisms supported by most existing relational database systems, such as, System R [1] or Ingres <ref> [7] </ref>. The major contribution of this paper is the development of a framework of evaluation procedures for scalar aggregates as well as aggregate functions for the PRDM. First, we extended the definition of conventional aggregate operators to cope with vague queries.
Reference: [8] <author> Date, C. J. </author> <title> An Introduction to Database Systems. 3 r d ed., </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1981. </year>
Reference: [9] <author> Dubois, D., and Prade, H. </author> <title> The Treatment of Uncertainty in Knowledge-Based Systems Using Fuzzy Sets and Possibility Theory. </title> <booktitle> Int. Journal of Intelligent Systems 3, 2 (Summer 1988), </booktitle> <volume> 141 - 165. </volume>
Reference-contexts: Buckles and Petry [3] modified this restriction by replacing attribute values by sets of values. Umano [26] and Zvieli modified this restriction by allowing fuzzy sets and memberships values. Umano [25], Prade and Testemale [15] and Dubois and Prade <ref> [9] </ref> have proposed models based explicitly on possibility distributions where domain values as well as associations among entities are represented by possibility distributions. Zemankova and Kandel [30] presented a thorough discussion of fuzzy relational database models. <p> For example, the tuple (Full, 4250) is formed. This finally results in the relation Average-Sal depicted in Figure 2. 3 BASIC CONCEPTS OF FUZZY SET AND POSSIBILITY THEORY This section introduces the basic concepts of fuzzy set and possibility theory as proposed by Zadeh [27] and others <ref> [9] </ref> . The proposed data model is based on discrete possibility distributions, therefore the presentation is limited to discrete possibility distributions. Definition 6 Let U be a universe of discourse.
Reference: [10] <author> Hawkes, L. W., Derry, S. J., and Rundensteiner, E. A., </author> <title> Individualized Tutoring Using an Intelligent Fuzzy Temporal Relational Database, </title> <journal> International Journal of Man-Machine Studies (IJMMS), </journal> <volume> vol. 33, </volume> <year> (1990), </year> <pages> 409-429. </pages>
Reference-contexts: We would like to mention that this work was originally driven by the requirements of a real application domain. Namely, the Student Manager Component, which provides statistics about the student's scores to the Intelligent Tutoring System <ref> [23, 10] </ref>, needs to evaluate summary functions on the student's performance data, and the available data is generally of imprecise nature. This is just one of many example applications which require aggregate functions to be evaluated on possibilistic data.
Reference: [11] <author> Kandel, A. </author> <title> Fuzzy Mathematical Techniques with Applications. </title> <publisher> Addison-Wesley Pub. Co, </publisher> <address> Reading, Mass, </address> <year> 1986. </year>
Reference: [12] <author> Klug, A. </author> <title> Equivalence of Relational Algebra and Relational Calculus Query Languages Having Aggregate Functions. </title> <journal> Journal of ACM 29, </journal> <month> 3 (July </month> <year> 1982), </year> <pages> 699 - 717. </pages>
Reference-contexts: This can be used to evaluate comparisons between tuples and to determine whether a tuple is redundant. Database systems featuring only retrieval and update operations [6] are inadequate for many important applications <ref> [12] </ref>. Virtually all real-world problems need query capabilities involving aggregate and statistical functions [7]. Consequently, most commercially available systems provide a set of these aggregate operators [24, 7]. This strongly suggests that the evaluation of aggregates has to be dealt with in the context of the extended relational models. <p> Section 5 is devoted to our proposal for evaluating aggregates within the PRDM. Conclusions and future research are discussed in the last section. 3 2 AGGREGATES IN RELATIONAL QUERY LANGUAGES In this section, we review how aggregates are handled within the classical relational data model <ref> [6, 12] </ref>. 2.1 The Classical Relational Model In the following some basic concepts related to the classical relational database model [6, 5] are introduced. <p> The readers are assumed to be familiar with the relational algebra. For more information we refer them to [7]. 2.2 Aggregates in Relational Query Languages Retrieval statements composed out of retrieval operations, such as the relational algebra operations, are inadequate for many important applications of database management systems <ref> [12] </ref>. Many real-world queries involve the application of aggregate and statistical functions to database relations. Therefore most commercial systems provide a set of these aggregate operators [24, 7]. <p> This notion of `duplicates' not only violates the set-theoretic foundation of the relational model, but provides various other disadvantages discussed in <ref> [12] </ref>. Hence, we adopt the simple solution of applying an aggregate on a relation instead of an isolated column, i.e. set. <p> The syntax as well as the underlying semantics <ref> [12] </ref> of aggregate functions are shown below: Definition 4 Let r be a relation on R (A 1 ; :::; A n ). The application of an aggregate function f on the attribute A i is specified by f ((A i )(r) BY A j ) with 1 i,j n.
Reference: [13] <author> Ozsoyoglu, G., Ozsoyoglu, Z. M., and Matos, V. </author> <title> Extending Relational Algebra and Relational Calculus with Set-Valued Attributes and Aggregate Functions. </title> <journal> ACM Trans. on Database Systems 12, </journal> <note> 4 (Dec. 1987), 566 - 592. 36 </note>
Reference-contexts: This strongly suggests that the evaluation of aggregates has to be dealt with in the context of the extended relational models. However, most research on extending relational query languages has neglected this issue of aggregate evaluation. The only notable exception is the work of Ozsoyoglu et al <ref> [13] </ref>, which addresses aggregation over set-valued attributes. 2 This paper investigates the incorporation of aggregate operators into Fuzzy Relational Query Languages (FRQL). <p> This proposal of different data types corresponds to the approach of Prade and Testemale [15] and Zemankova and Kandel [30]. Most other approaches in the literature restrict their models to a subset of the above, e.g. Buckles and Petry [3] and Ozsoyoglu, Ozsoyoglu, and Matos <ref> [13] </ref> allow only the data types (1) and (2), Umano [25] permits (1), (2) and (4), and many others use only 15 (4) besides (1), e.g. Zvieli [31] and Raju and Majumdar [16]. Now the following can be defined.
Reference: [14] <author> Prade, H. </author> <title> Global Evaluations of Fuzzy Sets of Items in Fuzzy Data Bases. </title> <booktitle> Int. Workshop on Fuzzy System Applications. </booktitle> <address> Fukuoka, Japan, </address> <month> (Aug </month> <year> 1988). </year>
Reference-contexts: And if A i takes only non-negative values, then also sum ((A i )A r j (ff 1 )) sum ((A i )A r There is no monotonicity for the other aggregates <ref> [14] </ref>. It may be of interest to summarize the result of such a query in a more concise way.
Reference: [15] <author> Prade, H., and Testemale, C. </author> <title> Generalizing database relational algebra for the treatment of incomplete/uncertain information and vague queries. </title> <booktitle> Information Science 34, (1984), </booktitle> <volume> 115 - 143. </volume>
Reference-contexts: Buckles and Petry [3] modified this restriction by replacing attribute values by sets of values. Umano [26] and Zvieli modified this restriction by allowing fuzzy sets and memberships values. Umano [25], Prade and Testemale <ref> [15] </ref> and Dubois and Prade [9] have proposed models based explicitly on possibility distributions where domain values as well as associations among entities are represented by possibility distributions. Zemankova and Kandel [30] presented a thorough discussion of fuzzy relational database models. <p> Most attempts to design an enhanced RQL, here called a FRQL, are based on some form of the generally accepted relational algebra or relational calculus, both developed by Codd [6]. Buckles and Petry [4] propose a domain calculus for their set-valued data model. Prade and Testemale <ref> [15] </ref> extended the classical relational algebra to accommodate the possibilistic representation. Rundensteiner et al [21] advocate the use of resemblance relations instead of similarity relations to measure the nearness between tuples that contain possibilistic data. <p> Therefore, a possibility distribution may be viewed as a collection of graded, mutually exclusive values, where the grade of membership F (u) of u in the fuzzy set F may be interpreted as the degree of possibility of u given F <ref> [15] </ref>. This is stated more precisely in the following. <p> of this paper, we will make extensive use of this definition, especially for defining generalized versions of the classical scalar aggregates. 4 EXTENDING THE RELATIONAL DATA MODEL 4.1 The Possibilistic Relational Data Model Various attempts toward enhancing the relational database model by fuzzy extensions can be found in the literature <ref> [3, 15, 30, 21] </ref>. This section reviews the basics underlying most of these models and then describes our approach of enhancing the relational model by means of fuzzy set theory, which results in the possibilistic relational model [23]. <p> It has already been pointed out that these data value types can be described by some form of a possibility distribution. This proposal of different data types corresponds to the approach of Prade and Testemale <ref> [15] </ref> and Zemankova and Kandel [30]. Most other approaches in the literature restrict their models to a subset of the above, e.g. <p> U we f23; 24; 25g 130 male Anita about20 light female Hans young f0:6=120; 1:0=130g male M ary 20 110 female 4.2 Relational Algebra for the Possibilistic Relational Model Several suggestions can be found in the literature on how to extend the relational algebra operations to deal with possibilistic data <ref> [4, 15, 26, 30, 31, 21] </ref>. Important issues among others are how to compare two possibility distributions and how to measure their similarity. We will limit our discussion here to the SELECT operation. For the other relational algebra operations see [23]. <p> The query can be evaluated by measuring the agreement of each tuple in the relation r with the fuzzy set F. This agreement, referred to as possibility measure by <ref> [15] </ref>, is defined by u2A i for all u 2 the domain U i of A i . 17 The SELECT query given in Equation 10 of Definition 12 is based on a selection condition that compares an attribute value against a constant, where the constant can be a simple value <p> Lastly, the maximum of this measure for all elements of the domain U then gives the measure of agreement for the tuple. Note that in the approach proposed by Prade and Testemale <ref> [15] </ref>, the agreement between a tuple of a relation r and the fuzzy set F is measured by a possibility measure and a necessity measure. Our model is limited to the possibility measure only.
Reference: [16] <author> Raju, K. V. S. V. N., and Majumdar, A. K. </author> <title> Fuzzy Functional Dependencies and Lossless Join Decomposition of Fuzzy Relational Database Systems. </title> <journal> ACM Trans. on Database Systems 13, </journal> <month> 2 (June </month> <year> 1988), </year> <pages> 129 - 166. </pages>
Reference-contexts: Buckles and Petry [3] and Ozsoyoglu, Ozsoyoglu, and Matos [13] allow only the data types (1) and (2), Umano [25] permits (1), (2) and (4), and many others use only 15 (4) besides (1), e.g. Zvieli [31] and Raju and Majumdar <ref> [16] </ref>. Now the following can be defined. Definition 10 Let A i for i from 1 to n be attributes defined on the domain sets U i , respectively.
Reference: [17] <author> Rundensteiner, E. A., Bic, L., Gilbert, J., and Yin, M., </author> <title> A Semantic Integrity Framework: Set Restrictions for Semantic Groupings, </title> <booktitle> in IEEE Int. Conf. on Data Engineering, </booktitle> <address> (ICDE-7), Kobe, Japan, </address> <month> (April </month> <year> 1991). </year>
Reference-contexts: In this paper we have addressed aggregate evaluation on possibilistic data in the context of the relational data model. We believe that much of this research can and needs to be embedded into more advanced data models, such as, semantic and object oriented data bases <ref> [17, 19] </ref>, when the later are used to capture possibilistic rather than crisp data. This is a largely unexplored research area that deserves further attention. Initial research efforts in incorporating a possibilistic data representation into the semantic data model have been presented in [18]. 35
Reference: [18] <author> Rundensteiner, E. A., and Bic, L., </author> <title> Semantic Data Models and their Potential for Capturing Imprecision, </title> <booktitle> Conference on Management of Data, </booktitle> <address> COMAD'89, Hyder-abad, India, </address> <month> (Nov. </month> <year> 1989). </year>
Reference-contexts: This is a largely unexplored research area that deserves further attention. Initial research efforts in incorporating a possibilistic data representation into the semantic data model have been presented in <ref> [18] </ref>. 35
Reference: [19] <author> Rundensteiner, E. A., and Bic, L., </author> <title> Set Operations in a Data Model Supporting Complex Objects, </title> <booktitle> Int. Conf. on Extending Data Base Technology (EDBT), </booktitle> <address> Fon-dazione Cini, Venice, Italy, </address> <month> (March </month> <year> 1990). </year> <note> (published in Lecture Notes in Computer Science, vol. 416, </note> <year> 1990, </year> <pages> pp. 286 - 300.) </pages>
Reference-contexts: In this paper we have addressed aggregate evaluation on possibilistic data in the context of the relational data model. We believe that much of this research can and needs to be embedded into more advanced data models, such as, semantic and object oriented data bases <ref> [17, 19] </ref>, when the later are used to capture possibilistic rather than crisp data. This is a largely unexplored research area that deserves further attention. Initial research efforts in incorporating a possibilistic data representation into the semantic data model have been presented in [18]. 35
Reference: [20] <author> Rundensteiner, E. A., and Bic, L. </author> <title> Aggregates in Possibilistic Databases. </title> <booktitle> Proc. of VLDB'89, </booktitle> <address> Amsterdam, Holland, </address> <month> (Aug. </month> <year> 1989), </year> <pages> 287 - 295. </pages>
Reference-contexts: This is just one of many example applications which require aggregate functions to be evaluated on possibilistic data. Our initial research efforts about aggregate evaluation have been presented in <ref> [22, 20] </ref>. The paper is structured in the following manner. First, we review the aggregate operators in the context of the relational data model (Section 2). The basics of fuzzy set theory are presented in Section 3.
Reference: [21] <author> Rundensteiner, E. A., Hawkes, L. W., and Bandler, W. </author> <title> On Nearness Measures in Fuzzy Relational Data Models. International Journal of Approximate Reasoning. </title> <publisher> Elsevier Science Pub. Co, Inc., North Holland, </publisher> <editor> vol. </editor> <volume> 3, no. 3, </volume> <month> July </month> <year> 1989, </year> <pages> 267 - 298. </pages>
Reference-contexts: Buckles and Petry [4] propose a domain calculus for their set-valued data model. Prade and Testemale [15] extended the classical relational algebra to accommodate the possibilistic representation. Rundensteiner et al <ref> [21] </ref> advocate the use of resemblance relations instead of similarity relations to measure the nearness between tuples that contain possibilistic data. This can be used to evaluate comparisons between tuples and to determine whether a tuple is redundant. <p> of this paper, we will make extensive use of this definition, especially for defining generalized versions of the classical scalar aggregates. 4 EXTENDING THE RELATIONAL DATA MODEL 4.1 The Possibilistic Relational Data Model Various attempts toward enhancing the relational database model by fuzzy extensions can be found in the literature <ref> [3, 15, 30, 21] </ref>. This section reviews the basics underlying most of these models and then describes our approach of enhancing the relational model by means of fuzzy set theory, which results in the possibilistic relational model [23]. <p> U we f23; 24; 25g 130 male Anita about20 light female Hans young f0:6=120; 1:0=130g male M ary 20 110 female 4.2 Relational Algebra for the Possibilistic Relational Model Several suggestions can be found in the literature on how to extend the relational algebra operations to deal with possibilistic data <ref> [4, 15, 26, 30, 31, 21] </ref>. Important issues among others are how to compare two possibility distributions and how to measure their similarity. We will limit our discussion here to the SELECT operation. For the other relational algebra operations see [23]. <p> The minimum of these two then corresponds to the possibility of the attribute value and fuzzy set to take on the same value u <ref> [21] </ref>. Lastly, the maximum of this measure for all elements of the domain U then gives the measure of agreement for the tuple.
Reference: [22] <author> Rundensteiner, E. A., and Bic, L. </author> <title> Extending Fuzzy Relational Query Languages by Scalar Aggregates, </title> <booktitle> Proc. of NAPIPS'88, </booktitle> <address> San Francisco, CA, </address> <month> June </month> <year> 1988. </year>
Reference-contexts: This is just one of many example applications which require aggregate functions to be evaluated on possibilistic data. Our initial research efforts about aggregate evaluation have been presented in <ref> [22, 20] </ref>. The paper is structured in the following manner. First, we review the aggregate operators in the context of the relational data model (Section 2). The basics of fuzzy set theory are presented in Section 3.
Reference: [23] <author> Rundensteiner, E. A. </author> <title> The Development of a Fuzzy Temporal Relational Database (FTRDB): An Artificial Intelligence Application. </title> <type> Master's thesis. </type> <institution> Dept. of Computer Science. Florida State University. </institution> <year> 1987. </year>
Reference-contexts: We would like to mention that this work was originally driven by the requirements of a real application domain. Namely, the Student Manager Component, which provides statistics about the student's scores to the Intelligent Tutoring System <ref> [23, 10] </ref>, needs to evaluate summary functions on the student's performance data, and the available data is generally of imprecise nature. This is just one of many example applications which require aggregate functions to be evaluated on possibilistic data. <p> This section reviews the basics underlying most of these models and then describes our approach of enhancing the relational model by means of fuzzy set theory, which results in the possibilistic relational model <ref> [23] </ref>. The remainder of this work is based on the here discussed possibilistic relational model. The concept of a fuzzy relation has been defined based on the notion of a fuzzy set. <p> Thus, in the traditional data model each of these data values u ji is a single value from a domain. It is proposed to extend the set of possible data values to take different forms besides being constants. The data values for the possibilistic relational model <ref> [23] </ref> are extended to be (1) a single scalar or number, (2) a set of scalars or numbers, (3) a possibilistic distribution of scalar domain values or, of number domain values, (4) a real number from [0,1], and (5) a designated null value. <p> Important issues among others are how to compare two possibility distributions and how to measure their similarity. We will limit our discussion here to the SELECT operation. For the other relational algebra operations see <ref> [23] </ref>. Now, instead of demanding the exact match between two values, an approximate match can be specified. <p> Hence, the comparison of the attribute values of two tuples reduces to the problem of comparing two possibility distributions as demonstrated in Equation 13 of Definition 13. This evaluation could be extended to also incorporate the similarity between domain values <ref> [23] </ref>. However, in order to keep the discussion simple this is neglected here. Also, additional modifiers could be applied to extend these queries. <p> A non-base relation ( ff-level relation ) is generated in step 1, based on which the aggregate evaluation process can continue with the remaining steps as discussed in Section 5.2 and 5.3. 6 CONCLUSIONS The paper presents the possibilistic relational data model <ref> [23] </ref>, which is a generalized version of the relational database model capable of capturing precise, as well as imprecise, data. In short, the appropriate blending of fuzzy set and possibility theory with the relational database model has led to a true enhancement of the capabilities of existing database systems.
Reference: [24] <author> Ullman, J. D. </author> <title> Principles of Database Systems. 2 nd ed., </title> <publisher> Computer Science Press, </publisher> <address> Rockville, MD, </address> <year> 1983. </year>
Reference-contexts: Database systems featuring only retrieval and update operations [6] are inadequate for many important applications [12]. Virtually all real-world problems need query capabilities involving aggregate and statistical functions [7]. Consequently, most commercially available systems provide a set of these aggregate operators <ref> [24, 7] </ref>. This strongly suggests that the evaluation of aggregates has to be dealt with in the context of the extended relational models. However, most research on extending relational query languages has neglected this issue of aggregate evaluation. <p> Many real-world queries involve the application of aggregate and statistical functions to database relations. Therefore most commercial systems provide a set of these aggregate operators <ref> [24, 7] </ref>. The most common aggregate operators of the conventional RQLs as, for example, found in Ingres [7], are count, any, sum, avg, min, and max. <p> This decision does not represent any limitations of our framework as shown in the next section. Another point of interest is that there are, in general, two types of aggregate queries supported by RQLs, namely, the scalar aggregates and the aggregate functions <ref> [24] </ref>. The discussion of aggregate functions is postponed until Section 2.4, whereas scalar aggregates are described in the following. 5 2.3 Scalar Aggregates Scalar aggregates take a set of tuples (a relation) as an argument and produce a single simple value as a result.
Reference: [25] <author> Umano, M. Freedom-0: </author> <title> A Fuzzy Database System. Fuzzy Information and Decision Processes. </title> <editor> M. M. Gupta and E. Sachez, (eds), </editor> <publisher> North-Holland Pub. Co., </publisher> <year> (1982), </year> <pages> 339 - 347. 37 </pages>
Reference-contexts: Buckles and Petry [3] modified this restriction by replacing attribute values by sets of values. Umano [26] and Zvieli modified this restriction by allowing fuzzy sets and memberships values. Umano <ref> [25] </ref>, Prade and Testemale [15] and Dubois and Prade [9] have proposed models based explicitly on possibility distributions where domain values as well as associations among entities are represented by possibility distributions. Zemankova and Kandel [30] presented a thorough discussion of fuzzy relational database models. <p> Most other approaches in the literature restrict their models to a subset of the above, e.g. Buckles and Petry [3] and Ozsoyoglu, Ozsoyoglu, and Matos [13] allow only the data types (1) and (2), Umano <ref> [25] </ref> permits (1), (2) and (4), and many others use only 15 (4) besides (1), e.g. Zvieli [31] and Raju and Majumdar [16]. Now the following can be defined.
Reference: [26] <author> Umano, M. </author> <title> Retrieval from fuzzy database by fuzzy relational algebra. </title> <journal> Knowledge Information Systems, Medical Applications. (1983), </journal> <volume> 1 - 6. </volume>
Reference-contexts: The first issue addresses the limitation of conventional data models to allow attributes to take but one constant value from a domain. Buckles and Petry [3] modified this restriction by replacing attribute values by sets of values. Umano <ref> [26] </ref> and Zvieli modified this restriction by allowing fuzzy sets and memberships values. Umano [25], Prade and Testemale [15] and Dubois and Prade [9] have proposed models based explicitly on possibility distributions where domain values as well as associations among entities are represented by possibility distributions. <p> U we f23; 24; 25g 130 male Anita about20 light female Hans young f0:6=120; 1:0=130g male M ary 20 110 female 4.2 Relational Algebra for the Possibilistic Relational Model Several suggestions can be found in the literature on how to extend the relational algebra operations to deal with possibilistic data <ref> [4, 15, 26, 30, 31, 21] </ref>. Important issues among others are how to compare two possibility distributions and how to measure their similarity. We will limit our discussion here to the SELECT operation. For the other relational algebra operations see [23].
Reference: [27] <author> Zadeh, L. </author> <title> Fuzzy Sets. </title> <journal> Information and Control 8, (1965), </journal> <volume> 338 - 353. </volume>
Reference-contexts: Unfortunately, almost all available implementations of relational database systems are modeling the real world in a deterministic manner and allow only for exact retrievals. There have been several attempts in the literature to use fuzzy set theory as proposed by Zadeh <ref> [27] </ref> and related concepts for providing a suitable interpretation of different types of impreciseness and vagueness in relational database models. <p> For this, we introduce the notion of an ff-level relation, a concept closely related to ff-level sets <ref> [27] </ref>, which allows us to keep track of the influence of the fuzziness on the possible values of the answer. The second case occurs when the query is exact but the information stored in the database is of possibilistic nature. <p> We define the evaluation of scalar aggregates on possibilistic data by employing various concepts developed within the fields of fuzzy set and possibilistic theory, in particular, the extension principle <ref> [27] </ref>. The strategy of decomposing the aggregate evaluation process for functional aggregates into several simple steps forms the basis of our work on aggregate functions. In order to partition on columns of a relation with possibilistic data, we introduce the notion of an ff-level partition. <p> For example, the tuple (Full, 4250) is formed. This finally results in the relation Average-Sal depicted in Figure 2. 3 BASIC CONCEPTS OF FUZZY SET AND POSSIBILITY THEORY This section introduces the basic concepts of fuzzy set and possibility theory as proposed by Zadeh <ref> [27] </ref> and others [9] . The proposed data model is based on discrete possibility distributions, therefore the presentation is limited to discrete possibility distributions. Definition 6 Let U be a universe of discourse. <p> Note, that F (u) is a real number taken from the interval [0,1]. 10 Zadeh <ref> [27] </ref> proposed the following notation for a fuzzy set F: F = f F (u 1 )=u 1 ; F (u 2 )=u 2 ; ::::; F (u n )=u n g (5) where u i 2 U for 1 i n. <p> Table format 12 * a set-valued data item fx1; x2; x3g corresponds to a possibility distribution which has elements with possibilities of 1.0, i.e. fx1; x2; x3g = f1:0=x1; 1:0=x2; 1:0=x3g. The notion of ff-sets <ref> [27] </ref> allows us to get from fuzzy to crisp sets. This is useful, for example, if we want to make a binary decision based on imprecise information (fuzzy set F). <p> Then, Section 5.2 presents our approach of extending scalar aggregates to apply to pos-sibilistic data found in the PRDM. The evaluation of scalar aggregates for possibilistic data makes use of various concepts developed within the framework of fuzzy set and possibilistic theory, in particular, the extension principle <ref> [27] </ref>. We were able to prove the consistency of the extensions of the aggregate operators. In order to demonstrate the intuitiveness of the proposed operators, we have shown the results of each of the operations on the same example relation.
Reference: [28] <author> Zadeh, L. </author> <title> A computational approach to fuzzy quantifiers in natural languages. </title> <booktitle> Computers and Mathematics 9, 1 (1983), </booktitle> <publisher> Pergamon Press Ltd, </publisher> <address> Great Britain, 149 - 184. </address>
Reference-contexts: In this paper, we assume that the fuzzy sets are based on non-continuous possibility distributions, and hence the summation in Equation (8) is finite. The extension principle for fuzzy sets introduced by Zadeh <ref> [28] </ref> corresponds to a basic identity which allows the domain of the definition of a mapping to be extended from points in the domain U to fuzzy subsets F of U. <p> ! [0; 1] (9) Since the traditional relational data model is based on the foundation of set and relation theory, the proposal to adopt the concept of a fuzzy relation from fuzzy set theory as given in Definition 9 for the enhanced data model has been made by several researchers <ref> [28, 31] </ref>.
Reference: [29] <author> Zadeh, L. </author> <title> Fuzzy Logic. </title> <booktitle> Computer 21, </booktitle> <month> 4 (April </month> <year> 1988), </year> <pages> 83 - 93. </pages>
Reference-contexts: The tuple (70,1.0) (or better, 1.0/70) denotes that the membership of Age=70 in the fuzzy set Old is 1.0, meaning, that a person with the Age of 70 is considered old. A close connection between fuzzy sets and possibility theory has been established <ref> [29] </ref>. A possibility distribution defined on U expresses the restriction of the possible values of a given variable. <p> For example, an extension of the aggregate concept to continuous domains, such as * interval representations, e.g., Weight [John] = [55.5,95.1] * functional descriptions, e.g., Weight [John] = light, where light is a continuous function on the real numbers between 100 and 200 <ref> [29] </ref>, should be considered. It would be interesting to develop a common representation of the data to be found in a respective model, much like the possibilistic representation offers a common technique to represent all types of information to be captured in the possibilistic relational data model.
Reference: [30] <author> Zemankova, M. and Kandel, A. </author> <title> Fuzzy Relational Database A Key to Expert Systems. </title> <publisher> Koeln: Verlag TNV Rheinland, </publisher> <year> 1984. </year>
Reference-contexts: Umano [25], Prade and Testemale [15] and Dubois and Prade [9] have proposed models based explicitly on possibility distributions where domain values as well as associations among entities are represented by possibility distributions. Zemankova and Kandel <ref> [30] </ref> presented a thorough discussion of fuzzy relational database models. The second problem is the inadequacy of current relational query languages (RQLs) to cope with different types of fuzzy representations of data. <p> of this paper, we will make extensive use of this definition, especially for defining generalized versions of the classical scalar aggregates. 4 EXTENDING THE RELATIONAL DATA MODEL 4.1 The Possibilistic Relational Data Model Various attempts toward enhancing the relational database model by fuzzy extensions can be found in the literature <ref> [3, 15, 30, 21] </ref>. This section reviews the basics underlying most of these models and then describes our approach of enhancing the relational model by means of fuzzy set theory, which results in the possibilistic relational model [23]. <p> It has already been pointed out that these data value types can be described by some form of a possibility distribution. This proposal of different data types corresponds to the approach of Prade and Testemale [15] and Zemankova and Kandel <ref> [30] </ref>. Most other approaches in the literature restrict their models to a subset of the above, e.g. <p> U we f23; 24; 25g 130 male Anita about20 light female Hans young f0:6=120; 1:0=130g male M ary 20 110 female 4.2 Relational Algebra for the Possibilistic Relational Model Several suggestions can be found in the literature on how to extend the relational algebra operations to deal with possibilistic data <ref> [4, 15, 26, 30, 31, 21] </ref>. Important issues among others are how to compare two possibility distributions and how to measure their similarity. We will limit our discussion here to the SELECT operation. For the other relational algebra operations see [23]. <p> However, in order to keep the discussion simple this is neglected here. Also, additional modifiers could be applied to extend these queries. An example is the query "Find all professors who are very old" where very is a modifier for the fuzzy set old <ref> [30] </ref>. 5 EXTENDING FRQLs WITH AGGREGATES In this section, it is investigated how the aggregate operators as presented in Section 2 can be redefined to cope with the possibilistic representation of data. <p> Also, fcount ((Weight)(person)) = 4. Thus, favg1 ((Weight)(person)) = fsum ((W eight)(person)) fcount ((W eight)(person)) = 4 An average of around 120 is realistic for the above example. But this will not always be the case <ref> [30] </ref>, and therefore we propose an alternative definition for the extended average operator. The generalized operation f avg1 will default to its conventional counterpart in the crisp case, as shown below. Lemma 5 The favg1 operation is consistent. <p> This is the classical definition of the average aggregate as given in Definition 3. q.e.d. An alternative to the approach just described is to make use of the possibilistic expected value, PEV, a concept introduced by Zemankova and Kandel <ref> [30] </ref>. Zemankova and Kandel propose to use the PEV value as a default value in place of a null value in a query evaluation. Definition 18 Let A be an attribute of a numeric domain of relation R.
Reference: [31] <author> Zvieli, A. </author> <title> On Complete Fuzzy Relational Query Languages. </title> <booktitle> Proc. of NAFIPS'86. </booktitle> <address> New Orleans, </address> <year> (1986), </year> <pages> 704 - 726. 38 </pages>
Reference-contexts: ! [0; 1] (9) Since the traditional relational data model is based on the foundation of set and relation theory, the proposal to adopt the concept of a fuzzy relation from fuzzy set theory as given in Definition 9 for the enhanced data model has been made by several researchers <ref> [28, 31] </ref>. <p> Buckles and Petry [3] and Ozsoyoglu, Ozsoyoglu, and Matos [13] allow only the data types (1) and (2), Umano [25] permits (1), (2) and (4), and many others use only 15 (4) besides (1), e.g. Zvieli <ref> [31] </ref> and Raju and Majumdar [16]. Now the following can be defined. Definition 10 Let A i for i from 1 to n be attributes defined on the domain sets U i , respectively. <p> U we f23; 24; 25g 130 male Anita about20 light female Hans young f0:6=120; 1:0=130g male M ary 20 110 female 4.2 Relational Algebra for the Possibilistic Relational Model Several suggestions can be found in the literature on how to extend the relational algebra operations to deal with possibilistic data <ref> [4, 15, 26, 30, 31, 21] </ref>. Important issues among others are how to compare two possibility distributions and how to measure their similarity. We will limit our discussion here to the SELECT operation. For the other relational algebra operations see [23].
References-found: 31

