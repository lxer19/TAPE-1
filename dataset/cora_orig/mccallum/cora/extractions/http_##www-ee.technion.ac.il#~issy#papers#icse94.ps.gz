URL: http://www-ee.technion.ac.il/~issy/papers/icse94.ps.gz
Refering-URL: http://www-ee.technion.ac.il/~issy/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A Paradigm for Decentralized Process Modeling and its Realization in the Oz Environment  
Author: Israel Z. Ben-Shaul Gail E. Kaiser 
Date: May 1994.  
Note: To appear in Sixteenth International Conference on Software Engineering,  
Address: New York, NY 10027  
Affiliation: Department of Computer Science Columbia University  
Abstract: We present a model for decentralized Process Centered Environments (PCEs), which support concerted efforts among geographically-dispersed teams | each local team with its own autonomous process | and emphasize flexibility in the tradeoff between collaboration vs. autonomy. We consider both decentralized process modeling and decentralized process enaction. We describe a realization in the Oz decentralized PCE, which employs a rule-based formalism, and also investigate the application to PCEs based on Petri-nets. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Sergio Bandinelli and Alfonso Fuggetta. </author> <title> Computational reflection in software process modeling: the SLANG approach. </title> <booktitle> In 15th International Conference on Software Engineering, </booktitle> <pages> pages 144-154, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Here again, some use of directives may be necessary to specify opportunities to fan-in. 4.2 Petri-net-based PMLs The application of our decentralized model to Petri-net based PCEs is influenced primarily by MEL MAC [13] and SPADE <ref> [1] </ref>. Transitions represent our notion of activities. Places represent the activity's data parameters. When places are typed, they can also be viewed as both prerequisites and immediate consequences on the transitions. A predicate can be attached to a transition, and must be satisfied prior to firing the transition.
Reference: [2] <author> Naser S. Barghouti and Gail E. Kaiser. </author> <title> Concurrency control in advanced database applications. </title> <journal> ACM Computing Surveys, </journal> <volume> 23(3) </volume> <pages> 269-317, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: This requirement is important when two or more organizations with established processes need to collaborate for a limited time. 6. Decentralized Concurrency Control and Recovery | Software development environments in general and PCEs in particular require sophisticated and flex ible concurrency control (CC) mechanisms and poli-cies <ref> [2] </ref>. DEPCEs add the dimension of remote vs. local access. This complicates CC in that extended transaction models devised for centralized and even distributed systems are not adequate.
Reference: [3] <author> Naser S. Barghouti and Gail E. Kaiser. </author> <title> Scaling up rule-based development environments. </title> <journal> International Journal on Software Engineering & Knowledge Engineering, </journal> <volume> 2(1) </volume> <pages> 59-78, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: This paper explores modeling and enaction of inter--group collaboration among independent, autonomous and, possibly, pre-existing processes. This is in contrast to work on (1) supporting intra-group collaboration and synchronization, where multiple team-members (co)operate within the same process, possibly with different "views" <ref> [7, 3] </ref>; and (2) process mod-ularization, where a single process is decomposed into sub-processes both for modeling and enaction purposes [21]. We further distinguish between distribution and decentralization.
Reference: [4] <author> Israel Z. Ben-Shaul. </author> <title> Oz: A decentralized process centered environment. </title> <institution> CUCS-011-93, Columbia University Department of Computer Science, </institution> <month> April </month> <year> 1993. </year> <type> PhD Thesis Proposal. </type>
Reference-contexts: Decentralized Query Processing | A DEPCE must provide for and, preferably, optimize multi-site global queries on both process and product data. This paper focuses on the first two requirements. Requirements 3 and 4 are mostly architectural, and are discussed in depth in <ref> [4] </ref>. Our approach to fulfilling requirement 5 is described separately in [6]. Requirements 6 and 7 are outside the scope of this work. <p> The main extensions were in: 1. Infrastructure for interaction between multi-ple SubEnvs (Marvel supports only a single process per environment instance, enacted by a centralized server). This includes server-to-server and client-to-remote-server communication, decentralized naming schemes, and a new component for establishing remote connections <ref> [4] </ref>. 2. Global browsing and querying capabilities. A user interface client can display and access remote data regardless of its physical location (a Marvel instance supports only a single local objectbase managed by the server). This enables the user to supply remote data arguments to a collaborative process.
Reference: [5] <author> Israel Z. Ben-Shaul and Gail E. Kaiser. </author> <title> A paradigm for decentralized process modeling and its realization in the oz environment. </title> <institution> CUCS-024-93, Columbia University Department of Computer Science, </institution> <month> September </month> <year> 1993. </year>
Reference-contexts: Application to PCEs with grammar-based PMLs | a third prominent paradigm | has been contemplated but is omitted due to lack of space (see <ref> [5] </ref>). 4.1 Rule-based PMLs In general, a rule represents a process step in our context hierarchy, consisting of an optional action (activity) with its pre-condition (prerequisites) and post-condition (immediate consequences).
Reference: [6] <author> Israel Z. Ben-Shaul and Gail E. Kaiser. </author> <title> A configuration process for a distributed software development environment. </title> <booktitle> In 2nd International Workshop on Configurable Distributed Systems, </booktitle> <month> March </month> <year> 1994. </year> <note> In press. </note>
Reference-contexts: This paper focuses on the first two requirements. Requirements 3 and 4 are mostly architectural, and are discussed in depth in [4]. Our approach to fulfilling requirement 5 is described separately in <ref> [6] </ref>. Requirements 6 and 7 are outside the scope of this work. A Motivating Example Assume there are three development teams using three SubEnvs SE1, SE2, and SE3, who are responsible for three disjoint modules of a system S, labeled M1, M2, and M3. <p> In addition, each client controls the "refresh" policy for its multi-objectbase display on a per objectbase basis. 3. Dynamic environment (re)configuration, to add and delete SubEnvs from a global environment. This is implemented as a process using the same notation and enaction engine as for general purpose process modeling <ref> [6] </ref>. 4. A dynamic import-export mechanism for defining decentralized sub-processes, which takes advantage of the infrastructure's inter-process communication layer to implement Treaties. 5. Most significantly, substantial extensions to the process engine to support the Summit decentralized enaction protocol.
Reference: [7] <author> Israel Z. Ben-Shaul, Gail E. Kaiser, and George T. Heineman. </author> <title> An architecture for multi-user software development environments. </title> <journal> Computing Systems, </journal> <volume> 6(2) </volume> <pages> 65-103, </pages> <month> Spring </month> <year> 1993. </year>
Reference-contexts: This paper explores modeling and enaction of inter--group collaboration among independent, autonomous and, possibly, pre-existing processes. This is in contrast to work on (1) supporting intra-group collaboration and synchronization, where multiple team-members (co)operate within the same process, possibly with different "views" <ref> [7, 3] </ref>; and (2) process mod-ularization, where a single process is decomposed into sub-processes both for modeling and enaction purposes [21]. We further distinguish between distribution and decentralization. <p> in contrast to the "corporation" model of decentralization suggested by Shy et al. [23], whereby subunits of a corporation do not have any existence independent of the corporation. 2 Requirements The following is a list of the main requirements that a DEPCE should fulfill (for centralized multi-user PCE requirements, see <ref> [7] </ref>): 1. Process Autonomy | Each local subenvironment (henceforth SubEnv) should control autonomously its process and its data, while allowing access to them by remote SubEnvs under restrictions that are solely determined by the local SubEnv. A related requirement is that a SubEnv should be self-contained and operationally independent. <p> This can lead to further firing of transitions depending on the local nets, and may lead to subsequent related Summits. 5 Realization of the Model in Oz We have implemented the Summit and Treaty Protocols in the Oz rule-based DEPCE, reusing as much code as possible from Marvel version 3.1 <ref> [7] </ref>. The main extensions were in: 1. Infrastructure for interaction between multi-ple SubEnvs (Marvel supports only a single process per environment instance, enacted by a centralized server). This includes server-to-server and client-to-remote-server communication, decentralized naming schemes, and a new component for establishing remote connections [4]. 2.
Reference: [8] <author> Donald Cohen. </author> <title> Automatic compilation of logical specifications into efficient programs. </title> <booktitle> In 5th National Conference on Artificial Intelligence, volume Science, </booktitle> <pages> pages 20-25, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: Forward chaining arises when the action or post-condition of a rule fulfills the pre-conditions of some rules, which are then fired recursively. Rule-based PMLs can be roughly divided into backward-chaining oriented such as Darwin [22], forward-chaining oriented such as AP5 <ref> [8] </ref>, and those that incorporate both, like Merlin [25]. The rule is the minimal common sub-process that might be shared among local processes.
Reference: [9] <author> Wolfgang Deiters and Volker Gruhn. </author> <title> Managing software processes in the environment MELMAC. </title> <booktitle> In 4th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 193-205, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: Kernel/2r [18] supports a special case of process formalism inter-operation. The system identifies and divides the process into three distinguished kinds of process fragments, each with a separate process engine (and PML). The interworking process engine, MELMAC <ref> [9] </ref>, supports cooperation between teams or within a team. An instance of the interaction process engine, WHOW, supports a single user working with a variety of tools to create, manipulate and delete development materials.
Reference: [10] <author> Prasun Dewan and John Riedl. </author> <title> Towards computer-supported concurrent software engineering. </title> <journal> Computer, </journal> <volume> 26(1) </volume> <pages> 17-36, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: A decentralized activity is one that can operate on remote as well as local data. The activity itself is not decentralized in execution, that is, an individual activity executes on a single host. This definition excludes tools that are themselves multi-user (e.g., Flecse <ref> [10] </ref>). However, our decentralized model can be extended to include such tools, provided that the PML and the corresponding PCE have mechanisms to describe the concurrent invocations by multiple participants in the process.
Reference: [11] <author> Christer Fernstrom. </author> <title> PROCESS WEAVER: Adding process support to UNIX. </title> <booktitle> In 2nd International Conference on the Software Process, </booktitle> <pages> pages 12-26, </pages> <month> Febru-ary </month> <year> 1993. </year>
Reference-contexts: Fernstrom describes "...in a process, which consists of a set of cooperating sub-processes, every sub-process can be characterized by the set of "services" it provides and requires from the other sub-processes" <ref> [11] </ref>. This sounds remarkably similar to our approach.
Reference: [12] <author> G. Forte and R.J. Norman. </author> <title> A self assessment by the software engineering community. </title> <journal> Communications of the ACM, </journal> <volume> 35(4) </volume> <pages> 29-32, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: At the same time, the teams need to cooperate in order to develop the product, and as studies in software engineering have shown, the interaction among team members accounts for a significant fraction of the total cost of the product being developed <ref> [12] </ref>. The degrees of autonomy and collaboration both depend on the nature of the product being developed and on organizational policies. Sometimes multiple organizations collaborate on a product, in which case autonomy (privacy or security) is a "hard" constraint that cannot be compromised.
Reference: [13] <author> Volker Gruhn and Rudiger Jegelka. </author> <title> An evaluation of FUNSOFT nets. </title> <booktitle> In 2nd European Workshop on Software Process Technology, </booktitle> <month> September </month> <year> 1992. </year>
Reference-contexts: Here again, some use of directives may be necessary to specify opportunities to fan-in. 4.2 Petri-net-based PMLs The application of our decentralized model to Petri-net based PCEs is influenced primarily by MEL MAC <ref> [13] </ref> and SPADE [1]. Transitions represent our notion of activities. Places represent the activity's data parameters. When places are typed, they can also be viewed as both prerequisites and immediate consequences on the transitions.
Reference: [14] <author> Dennis Heimbigner. </author> <title> A federated architecture for environments: Take II. Process Sensitive SEE Architectures Workshop, </title> <month> September </month> <year> 1992. </year>
Reference-contexts: In contrast, our view of processes is that of independent units, which may or may not voluntarily decide to collaborate for a time. Heimbigner argues that just like databases, "...environments will move to looser, federated, architectures ... address inter-operability between partial-environments of varying degrees of openness" <ref> [14] </ref>. He also notes that part of the reason for not adopting this approach until recently was due to the inadequacy of existing software process technology. However, his focus is on support for multiple formalisms, and in retro-fitting a process onto a process-ignorant environment.
Reference: [15] <author> Dennis Heimbigner. </author> <title> The ProcessWall: A process state server approach to process programming. </title> <booktitle> In 5th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 159-168, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: We address interoperability in the sense of multiple independent processes but a single PML in which they are defined, as well as multiple schemas but a single data definition language. This is in contrast to Pro-cessWall <ref> [15] </ref>, where multiple formalisms can be used to define a single process, or to the Activity Structures Language [19], where high and low level modeling formalisms are combined into one. 3. Data Sharing and Presentation | A DEPCE should provide non-transparent, but nevertheless efficient and highly available data access capabilities. <p> He also notes that part of the reason for not adopting this approach until recently was due to the inadequacy of existing software process technology. However, his focus is on support for multiple formalisms, and in retro-fitting a process onto a process-ignorant environment. Heimbigner's ProcessWall <ref> [15] </ref> is an attempt to address one particular aspect of federation, namely process formalism interoperability.
Reference: [16] <author> George T. Heineman. </author> <title> A transaction manager component for cooperative transaction models. </title> <institution> CUCS-017-93, Columbia University Department of Computer Science, </institution> <month> July </month> <year> 1993. </year> <type> PhD Thesis Proposal. </type>
Reference-contexts: Finally, while Oz provides cooperative transaction support for purely local operations (inherited from Marvel <ref> [16] </ref>), support for decentralized or distributed transactions is still minimal.
Reference: [17] <author> George T. Heineman, Gail E. Kaiser, Naser S. Bargh-outi, and Israel Z. Ben-Shaul. </author> <title> Rule chaining in marvel: Dynamic binding of parameters. </title> <journal> IEEE Expert, </journal> <volume> 7(6) </volume> <pages> 26-32, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: A dynamic import-export mechanism for defining decentralized sub-processes, which takes advantage of the infrastructure's inter-process communication layer to implement Treaties. 5. Most significantly, substantial extensions to the process engine to support the Summit decentralized enaction protocol. However, the only change to the Marvel rule-based PML <ref> [17] </ref> was to add optional annotations to direct multi-rule Summits. Otherwise, rules maintain the identical syntax | and the semantics have changed only in those cases where remote data is accessed.
Reference: [18] <author> Bernhard Holtkamp. </author> <title> Process engine interoperation in PSEEs. Process Sensitive SEE Architectures Workshop, </title> <month> September </month> <year> 1992. </year>
Reference-contexts: However, decentralization per se is not addressed, and the process state server is described as centralized. Kernel/2r <ref> [18] </ref> supports a special case of process formalism inter-operation. The system identifies and divides the process into three distinguished kinds of process fragments, each with a separate process engine (and PML). The interworking process engine, MELMAC [9], supports cooperation between teams or within a team.
Reference: [19] <author> Gail E. Kaiser, Steven S. Popovich, and Israel Z. Ben-Shaul. </author> <title> A bi-level language for software process modeling. </title> <booktitle> In 15th International Conference on Software Engineering, </booktitle> <pages> pages 132-143, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: This is in contrast to Pro-cessWall [15], where multiple formalisms can be used to define a single process, or to the Activity Structures Language <ref> [19] </ref>, where high and low level modeling formalisms are combined into one. 3. Data Sharing and Presentation | A DEPCE should provide non-transparent, but nevertheless efficient and highly available data access capabilities. In particular, SubEnvs should be able to access and browse through data residing at remote sites. 4.
Reference: [20] <author> Won Kim and Jungyun Seo. </author> <title> Classifying schematic and data heterogeneity in multidatabase systems. </title> <journal> Computer, </journal> <volume> 24(12) </volume> <pages> 12-18, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: Finally, the PML must allow for both dynamic inclusion and exclusion of common sub-processes, as well as independent evolution of private sub-processes. The former is particularly important when indepen 1 This is known in the database community as "schematic heterogeneity"; see <ref> [20] </ref>. The details of what constitutes a valid sub-schema is PML-specific and outside the scope of this paper. dent pre-existing processes decide to collaborate, perhaps only temporarily, while the latter is important for preserving the autonomy of local processes.
Reference: [21] <author> Peiwei Mi and Walt Scacchi. </author> <title> Process integration in CASE environments. </title> <journal> IEEE Software, </journal> <volume> 9(2) </volume> <pages> 45-53, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: This is in contrast to work on (1) supporting intra-group collaboration and synchronization, where multiple team-members (co)operate within the same process, possibly with different "views" [7, 3]; and (2) process mod-ularization, where a single process is decomposed into sub-processes both for modeling and enaction purposes <ref> [21] </ref>. We further distinguish between distribution and decentralization.
Reference: [22] <author> Naftaly H. Minsky and David Rozenshtein. </author> <title> A software development environment for law-governed systems. </title> <booktitle> In ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, </booktitle> <pages> pages 65-75, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: Then the firing of the second rule is considered recursively. Forward chaining arises when the action or post-condition of a rule fulfills the pre-conditions of some rules, which are then fired recursively. Rule-based PMLs can be roughly divided into backward-chaining oriented such as Darwin <ref> [22] </ref>, forward-chaining oriented such as AP5 [8], and those that incorporate both, like Merlin [25]. The rule is the minimal common sub-process that might be shared among local processes.
Reference: [23] <author> Izhar Shy, Richard Taylor, and Leon Osterweil. </author> <title> A metaphor and a conceptual architecture for software development environments. </title> <booktitle> In Software Engineering Environments International Workshop on Environments, </booktitle> <pages> pages 77-97, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: This is in contrast to the "corporation" model of decentralization suggested by Shy et al. <ref> [23] </ref>, whereby subunits of a corporation do not have any existence independent of the corporation. 2 Requirements The following is a list of the main requirements that a DEPCE should fulfill (for centralized multi-user PCE requirements, see [7]): 1. <p> being developed. 2 We are using Marvel 3.1 to produce Oz, employing a process based on code re-engineering and componentization, but plan to soon start using Oz for its own further development. 6 Related Work Shy et al. were among the first to identify decentralization as a key environment technology <ref> [23] </ref>. They draw an analogy between software development and the business corporation, and advocate a model for PCEs with global support for infrastructure capabilities and local management with means to mediate relations between local processes.
Reference: [24] <author> Peter D. Skopp and Gail E. Kaiser. </author> <title> Disconnected operation in a multi-user software development environment. </title> <booktitle> In IEEE Workshop on Advances in Parallel and Distributed Systems, </booktitle> <pages> pages 146-151, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: Open questions posed by this research include: (1) Support for multi-formalism inter-operability on top of our decentralized model; (2) Varying bandwidth has not yet been addressed (although see <ref> [24] </ref>); (3) Integration of "groupware" technology into the DE-PCE framework, including process support for multiuser tools, and incorporation of multi-media technology; (4) Decentralization of concurrency control and recovery policies suitable for collaborative work; and (5) Methodology for defining decentralized (sub )processes.
Reference: [25] <author> Wilhelm Schafer, Burkhard Peuschel and Stefan Wolf. </author> <title> A knowledge-based software development environment supporting cooperative work. </title> <journal> International Journal on Software Engineering & Knowledge Engineering, </journal> <volume> 2(1) </volume> <pages> 79-106, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Forward chaining arises when the action or post-condition of a rule fulfills the pre-conditions of some rules, which are then fired recursively. Rule-based PMLs can be roughly divided into backward-chaining oriented such as Darwin [22], forward-chaining oriented such as AP5 [8], and those that incorporate both, like Merlin <ref> [25] </ref>. The rule is the minimal common sub-process that might be shared among local processes.
References-found: 25

